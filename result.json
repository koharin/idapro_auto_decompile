int __cdecl main(int argc, const char **argv, const char **envp)
{
  __int64 v3; // rbp
  const char *v4; // rsi
  const char *v5; // rdi
  __int64 v6; // rdx
  int result; // eax
  unsigned __int64 v8; // rcx
  unsigned __int64 v9; // rt1
  unsigned __int64 i; // [rsp-F8h] [rbp-F8h]
  unsigned __int64 j; // [rsp-F0h] [rbp-F0h]
  __int64 v12; // [rsp-E8h] [rbp-E8h]
  __int64 v13; // [rsp-E0h] [rbp-E0h]
  __int64 v14; // [rsp-D8h] [rbp-D8h]
  __int64 v15; // [rsp-D0h] [rbp-D0h]
  __int64 v16; // [rsp-C8h] [rbp-C8h]
  int v17; // [rsp-C0h] [rbp-C0h]
  signed int v18; // [rsp-B8h] [rbp-B8h]
  signed int v19; // [rsp-B4h] [rbp-B4h]
  signed int v20; // [rsp-B0h] [rbp-B0h]
  signed int v21; // [rsp-ACh] [rbp-ACh]
  signed int v22; // [rsp-A8h] [rbp-A8h]
  signed int v23; // [rsp-A4h] [rbp-A4h]
  signed int v24; // [rsp-A0h] [rbp-A0h]
  signed int v25; // [rsp-9Ch] [rbp-9Ch]
  signed int v26; // [rsp-98h] [rbp-98h]
  signed int v27; // [rsp-94h] [rbp-94h]
  signed int v28; // [rsp-90h] [rbp-90h]
  signed int v29; // [rsp-8Ch] [rbp-8Ch]
  signed int v30; // [rsp-88h] [rbp-88h]
  signed int v31; // [rsp-84h] [rbp-84h]
  signed int v32; // [rsp-80h] [rbp-80h]
  signed int v33; // [rsp-7Ch] [rbp-7Ch]
  signed int v34; // [rsp-78h] [rbp-78h]
  signed int v35; // [rsp-74h] [rbp-74h]
  signed int v36; // [rsp-70h] [rbp-70h]
  signed int v37; // [rsp-6Ch] [rbp-6Ch]
  signed int v38; // [rsp-68h] [rbp-68h]
  signed int v39; // [rsp-64h] [rbp-64h]
  signed int v40; // [rsp-60h] [rbp-60h]
  signed int v41; // [rsp-5Ch] [rbp-5Ch]
  signed int v42; // [rsp-58h] [rbp-58h]
  signed int v43; // [rsp-54h] [rbp-54h]
  signed int v44; // [rsp-50h] [rbp-50h]
  signed int v45; // [rsp-4Ch] [rbp-4Ch]
  signed int v46; // [rsp-48h] [rbp-48h]
  signed int v47; // [rsp-44h] [rbp-44h]
  signed int v48; // [rsp-40h] [rbp-40h]
  signed int v49; // [rsp-3Ch] [rbp-3Ch]
  signed int v50; // [rsp-38h] [rbp-38h]
  signed int v51; // [rsp-34h] [rbp-34h]
  signed int v52; // [rsp-30h] [rbp-30h]
  signed int v53; // [rsp-2Ch] [rbp-2Ch]
  signed int v54; // [rsp-28h] [rbp-28h]
  signed int v55; // [rsp-24h] [rbp-24h]
  signed int v56; // [rsp-20h] [rbp-20h]
  signed int v57; // [rsp-1Ch] [rbp-1Ch]
  unsigned __int64 v58; // [rsp-10h] [rbp-10h]
  __int64 v59; // [rsp-8h] [rbp-8h]

  __asm { endbr64 }
  v59 = v3;
  v58 = __readfsqword(0x28u);
  v12 = 0LL;
  v13 = 0LL;
  v14 = 0LL;
  v15 = 0LL;
  v16 = 0LL;
  v17 = 0;
  v18 = 1;
  v19 = 2;
  v20 = 6;
  v21 = 4;
  v22 = 8;
  v23 = 5;
  v24 = 9;
  v25 = 7;
  v26 = 8;
  v27 = 10;
  v28 = 1;
  v29 = 6;
  v30 = 3;
  v31 = 8;
  v32 = 6;
  v33 = 10;
  v34 = 3;
  v35 = 8;
  v36 = 2;
  v37 = 7;
  v38 = 6;
  v39 = 5;
  v40 = 7;
  v41 = 6;
  v42 = 8;
  v43 = 6;
  v44 = 7;
  v45 = 5;
  v46 = 6;
  v47 = 6;
  v48 = 5;
  v49 = 6;
  v50 = 7;
  v51 = 5;
  v52 = 6;
  v53 = 4;
  v54 = 8;
  v55 = 6;
  v56 = 8;
  v57 = 10;
  for ( i = 0LL; i <= 0x27; ++i )
    ++*((_DWORD *)&v59 + *((signed int *)&v59 + i - 44) - 56);
  v4 = "Rating";
  v5 = "%s%17s\n";
  sub_1070("%s%17s\n", "Rating", "Frequency");
  for ( j = 1LL; j <= 0xA; ++j )
  {
    v4 = (const char *)j;
    v5 = "%6lu%17d\n";
    sub_1070("%6lu%17d\n", j, *((unsigned int *)&v59 + j - 56));
  }
  result = 0;
  v9 = __readfsqword(0x28u);
  v8 = v9 ^ v58;
  if ( v9 != v58 )
    result = sub_1060(v5, v4, v6, v8);
  return result;
}
