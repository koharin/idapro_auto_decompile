{
    "decompileResult": [
        {
            "decompiledFuncCode": "signed __int64 sub_BDD0()\n{\n  __uid_t v0; // ebx\n  signed __int64 result; // rax\n  __gid_t v2; // ebx\n  void (__fastcall *v3)(signed __int64, signed __int64); // rax\n  char *v4; // rax\n  unsigned __int64 v5; // rax\n\n  if ( getuid() && ((v0 = geteuid(), v0 != getuid()) || (v2 = getegid(), v2 != getgid())) )\n  {\n    fputs(\"Are you nuts ? Don't apply a SUID bit to this binary\\n\", stderr);\n    result = 0LL;\n  }\n  else\n  {\n    v3 = (void (__fastcall *)(signed __int64, signed __int64))dlsym(0LL, \"mallopt\");\n    if ( v3 )\n      v3(4294967288LL, 2LL);\n    qword_258378 = 0x80000LL;\n    v4 = getenv(\"MALLOC_TOP_PAD_\");\n    if ( v4 )\n    {\n      v5 = strtoul(v4, 0LL, 10);\n      if ( v5 != -1LL )\n        qword_258378 = v5;\n    }\n    qword_258380 = (__int64)dlsym(0LL, \"malloc_trim\");\n    setlocale(2, \"C\");\n    tzset();\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xbdd0L", 
            "funcEndAddr": "0xbe9dL", 
            "funcName": "sub_BDD0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_BE9D()\n{\n  _QWORD *v0; // rax\n  _QWORD *v1; // rbx\n  time_t v2; // rax\n  int v3; // eax\n  __time_t v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-48h]\n  struct timespec tp; // [rsp+10h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-20h]\n\n  v8 = __readfsqword(0x28u);\n  v0 = calloc(1uLL, 0x1A8uLL);\n  if ( !v0 )\n    ck_assert_failed(\"server.c\", 285LL, \"srv\");\n  v1 = v0;\n  v0[6] = buffer_init(1LL, 424LL);\n  strftime_cache_reset();\n  li_rand_reseed();\n  v2 = time(0LL);\n  v1[47] = v2;\n  log_epoch_secs = v2;\n  if ( clock_gettime(6, (struct timespec *)&v6) )\n  {\n    if ( clock_gettime(4, (struct timespec *)&v6) )\n      clock_id = 1;\n    else\n      clock_id = 4;\n  }\n  else\n  {\n    clock_id = 6;\n  }\n  v3 = clock_gettime(clock_id, &tp);\n  v4 = log_monotonic_secs;\n  if ( !v3 )\n    v4 = tp.tv_sec;\n  log_monotonic_secs = v4;\n  v1[14] = log_set_global_errh(0LL, 0LL);\n  config_init(v1);\n  v1[16] = 0LL;\n  v1[17] = 0LL;\n  v1[18] = 0LL;\n  v1[5] = plugins_call_handle_request_env;\n  *((_DWORD *)v1 + 101) = -1;\n  log_con_jqueue = (__int64)&log_con_jqueue;\n  return v1;\n}\n", 
            "funcStartAddr": "0xbe9dL", 
            "funcEndAddr": "0xbff0L", 
            "funcName": "sub_BE9D"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_BFF0(__int64 a1)\n{\n  unsigned int v1; // edx\n  __int64 v2; // rax\n  __int64 v3; // rcx\n  unsigned int v4; // edx\n  __int64 result; // rax\n  __int64 v6; // rcx\n  __int128 v7; // xmm1\n\n  v1 = *(_DWORD *)(a1 + 340);\n  v2 = 0LL;\n  while ( v1 > (unsigned int)v2 )\n  {\n    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v2++);\n    *(_QWORD *)(v3 + 128) = 0LL;\n  }\n  v4 = *(_DWORD *)(a1 + 356);\n  result = 0LL;\n  while ( v4 > (unsigned int)result )\n  {\n    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * result++);\n    *(_QWORD *)(v6 + 128) = 0LL;\n  }\n  xmmword_258350 = *(_OWORD *)(a1 + 328);\n  v7 = *(_OWORD *)(a1 + 344);\n  *(_OWORD *)(a1 + 328) = 0LL;\n  xmmword_258340 = v7;\n  *(_OWORD *)(a1 + 344) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0xbff0L", 
            "funcEndAddr": "0xc06cL", 
            "funcName": "sub_BFF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C06C(__int64 a1, unsigned int a2)\n{\n  unsigned int v2; // ebx\n  __int64 v3; // rdx\n  __int64 result; // rax\n\n  v2 = 0;\n  while ( *(_DWORD *)(a1 + 340) > v2 )\n  {\n    v3 = v2++;\n    result = fdevent_fdnode_event_set(\n               *(_QWORD *)(a1 + 24),\n               *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v3) + 120LL),\n               a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xc06cL", 
            "funcEndAddr": "0xc0a6L", 
            "funcName": "sub_C06C"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C0A6(__int64 a1)\n{\n  sub_C06C(a1, 1u);\n  *(_DWORD *)(a1 + 88) = 0;\n  return log_error(*(_QWORD *)(a1 + 112));\n}\n", 
            "funcStartAddr": "0xc0a6L", 
            "funcEndAddr": "0xc0daL", 
            "funcName": "sub_C0A6"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C0DA(__int64 a1)\n{\n  bool v1; // zf\n\n  sub_C06C(a1, 0);\n  v1 = *(_DWORD *)(a1 + 92) == 0;\n  *(_DWORD *)(a1 + 88) = 1;\n  return log_error(*(_QWORD *)(a1 + 112));\n}\n", 
            "funcStartAddr": "0xc0daL", 
            "funcEndAddr": "0xc11aL", 
            "funcName": "sub_C0DA"
        }, 
        {
            "decompiledFuncCode": "int sub_C11A()\n{\n  char *v0; // rax\n  __pid_t v1; // ebx\n\n  v0 = getenv(\"LIGHTTPD_PREV_GEN\");\n  if ( v0 )\n  {\n    v1 = strtol(v0, 0LL, 10);\n    LODWORD(v0) = unsetenv(\"LIGHTTPD_PREV_GEN\");\n    if ( v1 > 0 )\n    {\n      LODWORD(v0) = fdevent_waitpid(v1, 0LL);\n      if ( (_DWORD)v0 != v1 )\n        LODWORD(v0) = kill(v1, 2);\n    }\n  }\n  return (signed int)v0;\n}\n", 
            "funcStartAddr": "0xc11aL", 
            "funcEndAddr": "0xc16fL", 
            "funcName": "sub_C11A"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C16F(__int64 a1)\n{\n  plugins_call_handle_sighup();\n  fdlog_files_cycle(*(_QWORD *)(a1 + 112));\n  return log_error(*(_QWORD *)(a1 + 112));\n}\n", 
            "funcStartAddr": "0xc16fL", 
            "funcEndAddr": "0xc1aeL", 
            "funcName": "sub_C16F"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C1AE(__int64 a1)\n{\n  __int64 result; // rax\n\n  if ( !fildes || (result = *(_QWORD *)(a1 + 384)) != 0 && result < log_monotonic_secs )\n    result = connection_graceful_shutdown_maint();\n  return result;\n}\n", 
            "funcStartAddr": "0xc1aeL", 
            "funcEndAddr": "0xc1d2L", 
            "funcName": "sub_C1AE"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_C1D2(__int64 a1)\n{\n  const char **v1; // rax\n  __int64 v2; // r8\n  __int64 v3; // r8\n\n  LODWORD(v1) = fd + 1;\n  if ( !((fd + 1 < 0) ^ __OFADD__(1, fd)) )\n  {\n    if ( *(_QWORD *)(a1 + 272) && fd >= 0 && ftruncate64(fd, 0LL) )\n    {\n      v2 = **(_QWORD **)(a1 + 272);\n      log_perror(*(_QWORD *)(a1 + 112));\n    }\n    if ( fd >= 0 )\n    {\n      close(fd);\n      fd = -1;\n    }\n    v1 = *(const char ***)(a1 + 272);\n    if ( v1 )\n    {\n      if ( !*(_QWORD *)(a1 + 216) )\n      {\n        LODWORD(v1) = unlink(*v1);\n        if ( (_DWORD)v1 )\n        {\n          LODWORD(v1) = *__errno_location();\n          if ( (_DWORD)v1 != 13 )\n          {\n            LODWORD(v1) = (_DWORD)v1 - 1;\n            if ( (_DWORD)v1 )\n            {\n              v3 = **(_QWORD **)(a1 + 272);\n              LODWORD(v1) = log_perror(*(_QWORD *)(a1 + 112));\n            }\n          }\n        }\n      }\n    }\n  }\n  return (signed int)v1;\n}\n", 
            "funcStartAddr": "0xc1d2L", 
            "funcEndAddr": "0xc2aeL", 
            "funcName": "sub_C1D2"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_C2AE(void *ptr)\n{\n  void **v1; // rbx\n  int v2; // edi\n  void *v3; // rbp\n\n  v1 = (void **)ptr;\n  if ( fildes > 0 )\n  {\n    if ( qword_258368 )\n    {\n      fdevent_fdnode_event_del(*((_QWORD *)ptr + 3));\n      fdevent_unregister(*((_QWORD *)ptr + 3), (unsigned int)fildes);\n      qword_258368 = 0LL;\n    }\n    close(fildes);\n  }\n  if ( dword_258018 >= 0 )\n    close(dword_258018);\n  v2 = *((_DWORD *)ptr + 101);\n  if ( v2 >= 0 )\n    close(v2);\n  buffer_free(v1[6]);\n  fdevent_free(v1[3]);\n  config_free(v1);\n  stat_cache_free();\n  li_rand_cleanup();\n  chunkqueue_chunk_pool_free();\n  v3 = v1[14];\n  if ( v3 != (void *)log_set_global_errh(0LL, 0LL) )\n    fdlog_free(v1[14]);\n  free(v1);\n}\n", 
            "funcStartAddr": "0xc2aeL", 
            "funcEndAddr": "0xc367L", 
            "funcName": "sub_C2AE"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C367(__int64 a1)\n{\n  __int64 v1; // rax\n  unsigned int v2; // edx\n  __int64 v3; // rcx\n  unsigned int v4; // edx\n  __int64 result; // rax\n  __int64 v6; // rcx\n\n  v1 = 0LL;\n  *(_OWORD *)(a1 + 328) = xmmword_258350;\n  v2 = *(_DWORD *)(a1 + 340);\n  xmmword_258350 = 0LL;\n  *(_OWORD *)(a1 + 344) = xmmword_258340;\n  xmmword_258340 = 0LL;\n  while ( v2 > (unsigned int)v1 )\n  {\n    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v1++);\n    *(_QWORD *)(v3 + 128) = a1;\n  }\n  v4 = *(_DWORD *)(a1 + 356);\n  result = 0LL;\n  while ( v4 > (unsigned int)result )\n  {\n    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * result++);\n    *(_QWORD *)(v6 + 128) = a1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xc367L", 
            "funcEndAddr": "0xc3dbL", 
            "funcName": "sub_C367"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C3DB(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // rbx\n  unsigned int v4; // er14\n  __int64 v5; // rbp\n\n  v2 = 0LL;\n  v3 = 0LL;\n  v4 = *(_DWORD *)(a1 + 340);\n  while ( v4 > (unsigned int)v2 )\n  {\n    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v2);\n    if ( (unsigned int)sock_addr_is_port_eq(v5, a2) )\n    {\n      if ( (unsigned int)sock_addr_is_addr_eq(v5, a2) )\n        return v5;\n      if ( !v3 )\n      {\n        if ( (unsigned int)sock_addr_is_addr_wildcard(v5) )\n          v3 = v5;\n      }\n    }\n    ++v2;\n  }\n  if ( !v3 )\n  {\n    if ( v4 )\n      v3 = **(_QWORD **)(a1 + 328);\n    else\n      log_error(*(_QWORD *)(a1 + 112));\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0xc3dbL", 
            "funcEndAddr": "0xc48cL", 
            "funcName": "sub_C3DB"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_C48C(__int64 a1)\n{\n  unsigned int i; // ebp\n  __int64 v2; // rdx\n  int result; // eax\n  __int64 v4; // r12\n\n  if ( *(_DWORD *)(a1 + 88) != 3 )\n  {\n    for ( i = 0; i < *(_DWORD *)(a1 + 340); ++i )\n    {\n      v2 = *(_QWORD *)(a1 + 328);\n      result = i;\n      v4 = *(_QWORD *)(v2 + 8LL * i);\n      if ( *(_DWORD *)(v4 + 112) != -1 )\n      {\n        if ( *(_DWORD *)(a1 + 88) != 2 )\n          network_unregister_sock(a1, *(_QWORD *)(v2 + 8LL * i));\n        result = close(*(_DWORD *)(v4 + 112));\n        *(_DWORD *)(v4 + 112) = -1;\n      }\n    }\n    *(_DWORD *)(a1 + 88) = 3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xc48cL", 
            "funcEndAddr": "0xc4edL", 
            "funcName": "sub_C48C"
        }, 
        {
            "decompiledFuncCode": "unsigned int __fastcall sub_C4ED(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  unsigned int result; // eax\n  __int64 v4; // rax\n  const char **v5; // r12\n  const char *v6; // rdi\n  bool v7; // al\n  __pid_t v8; // eax\n  __pid_t v9; // ebp\n  __int64 v10; // rbx\n  int v11; // ebp\n  __int64 v12; // rbp\n  unsigned int v13; // ebp\n  __int64 v14; // rdx\n\n  v1 = a1;\n  if ( !dword_25832C )\n  {\n    if ( !*(_QWORD *)(a1 + 384) )\n    {\n      v2 = (signed int)config_feature_int(a1, \"server.graceful-shutdown-timeout\", 8LL);\n      *(_QWORD *)(a1 + 384) = (signed int)v2;\n      if ( (_DWORD)v2 )\n        *(_QWORD *)(a1 + 384) = log_monotonic_secs + v2;\n    }\n    sub_C1AE(a1);\n  }\n  result = *(_DWORD *)(a1 + 88) - 2;\n  if ( result <= 1 )\n  {\n    if ( fildes )\n      dword_258334 = 0;\n    return result;\n  }\n  log_error(*(_QWORD *)(a1 + 112));\n  if ( *(_QWORD *)(a1 + 216) || fildes || dword_258330 == 2 )\n    dword_258334 = 0;\n  if ( !dword_258334 )\n  {\n    sub_C48C(a1);\n    result = sub_C1D2(a1);\n    *(_QWORD *)(a1 + 272) = 0LL;\n    return result;\n  }\n  if ( !dword_25832C && (unsigned int)config_feature_bool(a1, \"server.graceful-restart-bg\", 0LL) )\n  {\n    v4 = array_get_data_unset(*(_QWORD *)(a1 + 248), \"server.graceful-restart-bg\", 26LL);\n    if ( *(_DWORD *)(v4 + 24) )\n      *(_DWORD *)(v4 + 28) = 0;\n    else\n      buffer_copy_string_len(v4 + 32, \"false\", 5LL);\n    v5 = *(const char ***)(a1 + 408);\n    v6 = *v5;\n    v7 = *(_BYTE *)(v1 + 192) ? strchr(v6, 47) == 0LL : *v6 != 47;\n    if ( !v7 )\n    {\n      plugins_call_handle_sighup(v1);\n      fdlog_files_cycle(*(_QWORD *)(v1 + 112));\n      v8 = fork();\n      v9 = v8;\n      if ( !v8 )\n      {\n        if ( *(_WORD *)(v1 + 166) )\n          sub_C48C(v1);\n        if ( fd >= 0 )\n        {\n          close(fd);\n          fd = -1;\n        }\n        v11 = *(unsigned __int16 *)(v1 + 170);\n        *(_QWORD *)(v1 + 272) = 0LL;\n        v12 = (unsigned int)(v11 - *(_DWORD *)(v1 + 92));\n        getpid();\n        log_error(*(_QWORD *)(v1 + 112));\n        if ( !*(_WORD *)(v1 + 166) )\n        {\n          *(_QWORD *)(v1 + 384) = 0LL;\n          dword_258330 = 0;\n        }\n        dword_258334 = 0;\n        goto LABEL_40;\n      }\n      if ( v8 >= 0 )\n      {\n        network_socket_activation_to_env(v1);\n        sub_C11A();\n        if ( !*(_WORD *)(v1 + 166) )\n        {\n          v10 = *(_QWORD *)(v1 + 48);\n          *(_DWORD *)(v10 + 8) = 0;\n          buffer_append_int(v10, v9);\n          setenv(\"LIGHTTPD_PREV_GEN\", *(const char **)v10, 1);\n        }\n        execv(*v5, (char *const *)v5);\n        _exit(1);\n      }\n    }\n  }\n  if ( *(_DWORD *)(v1 + 88) != 2 )\n  {\n    *(_DWORD *)(v1 + 88) = 2;\n    v13 = 0;\n    while ( v13 < *(_DWORD *)(v1 + 340) )\n    {\n      v14 = v13++;\n      network_unregister_sock(v1, *(_QWORD *)(*(_QWORD *)(v1 + 328) + 8 * v14));\n    }\n  }\nLABEL_40:\n  result = fd;\n  if ( fd > 0 )\n  {\n    result = -fd;\n    fd = -fd;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xc4edL", 
            "funcEndAddr": "0xc7ccL", 
            "funcName": "sub_C4ED"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C7CC(__int64 a1, int a2, char **a3)\n{\n  int v3; // er13\n  __int64 v4; // rbx\n  signed int v5; // er15\n  __uid_t v6; // eax\n  __uid_t v7; // er14\n  char **v8; // rsi\n  unsigned int v9; // er12\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  __int64 v12; // rax\n  bool v13; // zf\n  __int64 v14; // rdi\n  int v15; // eax\n  __int64 v16; // rdi\n  signed int v17; // eax\n  unsigned int v18; // er13\n  unsigned int v19; // er15\n  const char *v20; // rsi\n  __int64 v21; // r13\n  char **v22; // r8\n  _QWORD *v23; // r15\n  const char *v24; // rdi\n  int v25; // eax\n  const char **v26; // rax\n  const char *v27; // r13\n  __int64 v28; // r8\n  int v29; // er15\n  rlim64_t v30; // rax\n  rlim64_t v31; // rcx\n  signed __int16 v32; // ax\n  const char **v33; // rax\n  struct group *v34; // r15\n  __int64 v35; // r8\n  const char **v36; // rax\n  struct passwd *v37; // rax\n  struct passwd *v38; // r14\n  __int64 v39; // r8\n  __int64 v40; // r8\n  __gid_t v41; // edi\n  __int64 v42; // rdi\n  const char **v43; // rax\n  int v44; // er15\n  __pid_t v45; // eax\n  ssize_t v46; // rbx\n  signed __int64 v47; // rcx\n  __int64 *v48; // rdi\n  const char *v49; // rsi\n  __pid_t v50; // eax\n  signed int v51; // edx\n  __int64 v52; // rdi\n  __int64 v53; // rdi\n  int v54; // ecx\n  void *v55; // rsp\n  __int64 v56; // rax\n  __pid_t v57; // eax\n  __pid_t v58; // edx\n  signed __int64 v59; // rcx\n  int v60; // eax\n  __ino64_t *v61; // rdi\n  signed __int64 v62; // rdi\n  __int64 v63; // rax\n  int v64; // eax\n  rlim64_t v65; // rsi\n  int v66; // eax\n  __int64 v67; // rax\n  int v68; // eax\n  rlim64_t v69; // rsi\n  __int64 v70; // rdi\n  char **v71; // rdx\n  __pid_t v72; // edi\n  signed int v73; // eax\n  __int64 v74; // rcx\n  __int64 v75; // rdi\n  __int64 v76; // rax\n  int v77; // er9\n  int v78; // er8\n  unsigned __int16 v79; // ax\n  unsigned int v80; // eax\n  __int64 v81; // rsi\n  __int64 v82; // rdi\n  int v83; // eax\n  unsigned int v84; // er14\n  unsigned int v85; // er12\n  char *v86; // rax\n  const char *v87; // rdx\n  char *v88; // r14\n  char *v89; // r15\n  unsigned int v90; // er13\n  unsigned __int16 v91; // ax\n  unsigned __int16 v92; // ax\n  __int64 v93; // rax\n  __int64 v94; // r13\n  __int64 v95; // rdi\n  __int64 v96; // rax\n  __int64 v97; // rdi\n  __int64 v98; // r15\n  __int64 v99; // rax\n  __int64 v101; // [rsp+0h] [rbp-1D0h]\n  unsigned int *v102; // [rsp+8h] [rbp-1C8h]\n  __int64 v103; // [rsp+10h] [rbp-1C0h]\n  __int64 *v104; // [rsp+18h] [rbp-1B8h]\n  int v105; // [rsp+20h] [rbp-1B0h]\n  unsigned int v106; // [rsp+24h] [rbp-1ACh]\n  char **endptr; // [rsp+28h] [rbp-1A8h]\n  int argc[2]; // [rsp+30h] [rbp-1A0h]\n  char **argv; // [rsp+38h] [rbp-198h]\n  unsigned int v110; // [rsp+4Ch] [rbp-184h]\n  struct rlimit64 rlimits; // [rsp+50h] [rbp-180h]\n  __int64 (__fastcall *v112)(); // [rsp+60h] [rbp-170h]\n  __int64 v113; // [rsp+68h] [rbp-168h]\n  int v114; // [rsp+E8h] [rbp-E8h]\n  struct stat64 stat_buf; // [rsp+100h] [rbp-D0h]\n  unsigned __int64 v116; // [rsp+198h] [rbp-38h]\n\n  v3 = 0;\n  v4 = a1;\n  v5 = 0;\n  argc[0] = a2;\n  argv = a3;\n  v116 = __readfsqword(0x28u);\n  v6 = getuid();\n  dword_25832C = 0;\n  v7 = v6;\n  dword_258330 = 0;\n  fildes = 0;\n  dword_258010 = 1;\n  dword_258018 = -1;\n  dword_258324 = 0;\n  dword_258320 = 0;\n  chunkqueue_set_tempdirs_default_reset();\n  *(_QWORD *)(a1 + 408) = argv;\n  endptr = (char **)&rlimits;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v8 = argv;\n          v9 = getopt(argc[0], argv, \"f:m:i:hvVD1pt\");\n          if ( v9 == -1 )\n          {\n            if ( !*(_QWORD *)(a1 + 320) )\n            {\n              log_error(*(_QWORD *)(a1 + 112));\n              return v9;\n            }\n            if ( v5 )\n            {\n              config_print(a1, argv);\n              puts(**(const char ***)(a1 + 48));\n              if ( !v3 )\n                return 0;\n            }\n            else if ( !v3 )\n            {\n              goto LABEL_48;\n            }\n            *(_QWORD *)(a1 + 272) = 0LL;\n            if ( v3 == 1 )\n            {\n              puts(\"Syntax OK\");\n            }\n            else\n            {\n              *(_WORD *)(a1 + 192) = 257;\n              v3 = 0;\n            }\n            if ( v5 | v3 )\n              return 0;\nLABEL_48:\n            if ( fildes )\n            {\n              if ( fildes <= 2 )\n              {\n                log_error(*(_QWORD *)(a1 + 112));\n                return v9;\n              }\n              v13 = *(_WORD *)(a1 + 166) == 0;\n              dword_258330 = 1;\n              *(_DWORD *)(a1 + 88) = 2;\n              *(_BYTE *)(a1 + 192) = 1;\n              *(_QWORD *)(a1 + 272) = 0LL;\n              if ( !v13 )\n              {\n                v14 = *(_QWORD *)(a1 + 112);\n                *(_WORD *)(v4 + 166) = 0;\n                log_error(v14);\n              }\n              v8 = (char **)(unsigned int)fildes;\n              if ( __fxstat64(1, fildes, &stat_buf) )\n              {\n                log_perror(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              v15 = stat_buf.st_mode & 0xF000;\n              if ( v15 == 4096 )\n              {\n                dword_258018 = dup(1);\n                if ( dword_258018 <= 2 )\n                {\n                  log_perror(*(_QWORD *)(v4 + 112));\n                  return v9;\n                }\n              }\n              else if ( v15 != 49152 )\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n            }\n            v16 = *(_QWORD *)(v4 + 208);\n            if ( v16 )\n            {\n              v8 = (char **)\"/dev/stdin\";\n              if ( (unsigned int)buffer_eq_slen(v16, \"/dev/stdin\", 10LL) )\n              {\n                if ( *(_DWORD *)(v4 + 404) == -1 )\n                {\n                  v16 = 0LL;\n                  *(_DWORD *)(v4 + 404) = dup(0);\n                }\n                if ( *(_DWORD *)(v4 + 404) <= 2 )\n                {\n                  log_error(*(_QWORD *)(v4 + 112));\n                  return v9;\n                }\n              }\n            }\n            do\n            {\n              v17 = fdevent_open_devnull(v16, v8);\n              v18 = v17;\n            }\n            while ( v17 != -1 && v17 <= 2 );\n            if ( v17 == -1 )\n            {\n              log_perror(*(_QWORD *)(v4 + 112));\n              return v9;\n            }\n            v19 = v17;\n            argv = (char **)&stat_buf;\n            if ( !__fxstat64(1, 2, &stat_buf) )\n              v19 = v9;\n            if ( (unsigned int)fdevent_set_stdin_stdout_stderr(v18, v18, v19) )\n            {\n              log_perror(*(_QWORD *)(v4 + 112));\n              if ( v19 == -1 || (close(v19), v19 != v18) )\n                close(v18);\n              return v9;\n            }\n            if ( v19 == -1 || (close(v19), v19 != v18) )\n              close(v18);\n            http_response_send_1xx_cb_set(0LL, 2LL);\n            if ( !(unsigned int)config_feature_bool(v4, \"server.h2-discard-backend-1xx\", 0LL) )\n              http_response_send_1xx_cb_set(h2_send_1xx, 2LL);\n            http_response_send_1xx_cb_set(0LL, 1LL);\n            v20 = \"server.h1-discard-backend-1xx\";\n            if ( !(unsigned int)config_feature_bool(v4, \"server.h1-discard-backend-1xx\", 0LL) )\n            {\n              v20 = (_BYTE *)(&size + 1);\n              http_response_send_1xx_cb_set(connection_send_1xx, 1LL);\n            }\n            if ( (unsigned int)config_set_defaults(v4, v20) )\n            {\n              log_error(*(_QWORD *)(v4 + 112));\n              return v9;\n            }\n            if ( (unsigned int)plugins_load(v4) )\n            {\n              log_error(*(_QWORD *)(v4 + 112));\n              return v9;\n            }\n            if ( (unsigned int)plugins_call_init(v4) )\n            {\n              log_error(*(_QWORD *)(v4 + 112));\n              return v9;\n            }\n            v21 = 0LL;\n            v22 = 0LL;\n            argc[0] = *(_DWORD *)(v4 + 368);\n            while ( argc[0] > (unsigned int)v21 )\n            {\n              v23 = *(_QWORD **)(*(_QWORD *)(v4 + 360) + 8 * v21);\n              if ( v22 )\n              {\n                v24 = (const char *)v23[22];\n                endptr = v22;\n                v25 = strcmp(v24, \"indexfile\");\n                v22 = endptr;\n                if ( !v25 )\n                {\n                  log_error(*(_QWORD *)(v4 + 112));\n                  break;\n                }\n              }\n              if ( v23[7] && v23[8] && !v22 )\n                v22 = (char **)v23[22];\n              ++v21;\n            }\n            if ( fd == -2 )\n              fd = -1;\n            if ( fd == -1 )\n            {\n              v26 = *(const char ***)(v4 + 272);\n              if ( v26 )\n              {\n                v27 = *v26;\n                fd = fdevent_open_cloexec(*v26, 0LL, 705LL, 420LL, v22);\n                if ( fd == -1 )\n                {\n                  if ( *__errno_location() != 17 )\n                  {\n                    log_perror(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                  if ( __xstat64(1, v27, (struct stat64 *)argv) )\n                    log_perror(*(_QWORD *)(v4 + 112));\n                  if ( (stat_buf.st_mode & 0xF000) != 0x8000 )\n                  {\n                    log_error(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                  fd = fdevent_open_cloexec(v27, 0LL, 577LL, 420LL, v28);\n                  if ( fd == -1 )\n                  {\n                    log_perror(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                }\n              }\n            }\n            rlimits.rlim_cur = 4096LL;\n            rlimits.rlim_max = 4096LL;\n            v29 = getrlimit64(RLIMIT_NOFILE, &rlimits);\n            if ( v29 )\n            {\n              v29 = 0;\n              log_perror(*(_QWORD *)(v4 + 112));\n            }\n            else\n            {\n              v30 = *(unsigned __int16 *)(v4 + 168);\n              if ( !(_WORD)v30 || v7 && rlimits.rlim_max < v30 )\n                goto LABEL_320;\n              v31 = rlimits.rlim_cur;\n              rlimits.rlim_cur = *(unsigned __int16 *)(v4 + 168);\n              *(_QWORD *)argc = v31;\n              if ( !v7 )\n                rlimits.rlim_max = v30;\n              if ( setrlimit64(RLIMIT_NOFILE, &rlimits) )\n              {\n                log_perror(*(_QWORD *)(v4 + 112));\n                log_error(*(_QWORD *)(v4 + 112));\n                if ( (unsigned __int64)*(unsigned __int16 *)(v4 + 168) > *(_QWORD *)argc )\n                  *(_WORD *)(v4 + 168) = argc[0];\n              }\n              else\n              {\nLABEL_320:\n                v29 = 1;\n              }\n            }\n            if ( !*(_WORD *)(v4 + 168) )\n            {\n              v32 = 4096;\n              if ( rlimits.rlim_cur <= 0x1000 )\n                v32 = rlimits.rlim_cur;\n              *(_WORD *)(v4 + 168) = v32;\n            }\n            if ( v29 && *(_BYTE *)(v4 + 194) && !getrlimit64(RLIMIT_CORE, &rlimits) )\n            {\n              rlimits.rlim_cur = rlimits.rlim_max;\n              setrlimit64(RLIMIT_CORE, &rlimits);\n            }\n            v106 = network_init(v4, *(unsigned int *)(v4 + 404));\n            if ( v106 )\n              return (unsigned int)-1;\n            *(_DWORD *)(v4 + 404) = -1;\n            if ( v7 )\n            {\nLABEL_167:\n              if ( *(_BYTE *)(v4 + 192) )\n              {\n                v44 = v9;\n              }\n              else\n              {\n                v44 = v9;\n                if ( !dword_258334 )\n                {\n                  signal(22, (__sighandler_t)((char *)&size + 1));\n                  signal(21, (__sighandler_t)((char *)&size + 1));\n                  signal(20, (__sighandler_t)((char *)&size + 1));\n                  if ( (signed int)fdevent_pipe_cloexec((int *)argv) < 0 || (v45 = fork(), v45 < 0) )\nLABEL_177:\n                    exit(-1);\n                  if ( v45 )\n                  {\n                    close(SHIDWORD(stat_buf.st_dev));\n                    do\n                      v46 = read(stat_buf.st_dev, &rlimits, 1uLL);\n                    while ( v46 < 0 && *__errno_location() == 4 );\n                    close(stat_buf.st_dev);\n                    if ( v46 <= 0 )\n                    {\n                      fwrite(\"daemonized server failed to start; check error log for details\\n\", 1uLL, 0x3FuLL, stderr);\n                      goto LABEL_177;\n                    }\nLABEL_179:\n                    exit(0);\n                  }\n                  close(stat_buf.st_dev);\n                  if ( setsid() == -1 )\n                    goto LABEL_179;\n                  signal(1, (__sighandler_t)((char *)&size + 1));\n                  if ( fork() || chdir(\"/\") )\n                    goto LABEL_179;\n                  v44 = HIDWORD(stat_buf.st_dev);\n                }\n              }\n              dword_258334 = 0;\n              if ( !fildes )\n                dword_258330 = 0;\n              v47 = 36LL;\n              v112 = (__int64 (__fastcall *)())(&size + 1);\n              v48 = &v113;\n              argv = (char **)&v113;\n              while ( v47 )\n              {\n                *(_DWORD *)v48 = 0;\n                v48 = (__int64 *)((char *)v48 + 4);\n                --v47;\n              }\n              sigaction(13, (const struct sigaction *)&v112, 0LL);\n              *(_QWORD *)&xmmword_258230 = 0LL;\n              v112 = sub_1D800;\n              *(_QWORD *)&xmmword_2582B0 = 0LL;\n              sigemptyset((sigset_t *)argv);\n              v114 = 4;\n              sigaction(2, (const struct sigaction *)&v112, 0LL);\n              sigaction(15, (const struct sigaction *)&v112, 0LL);\n              sigaction(1, (const struct sigaction *)&v112, 0LL);\n              sigaction(14, (const struct sigaction *)&v112, 0LL);\n              sigaction(10, (const struct sigaction *)&v112, 0LL);\n              v49 = (const char *)&v112;\n              v114 |= 0x10000001u;\n              sigaction(17, (const struct sigaction *)&v112, 0LL);\n              *(_DWORD *)(v4 + 396) = getgid();\n              *(_DWORD *)(v4 + 392) = getuid();\n              v50 = getpid();\n              v51 = fd;\n              *(_DWORD *)(v4 + 400) = v50;\n              if ( v51 <= 2 )\n              {\n                if ( fd < -2 )\n                  fd = -fd;\n              }\n              else\n              {\n                v52 = *(_QWORD *)(v4 + 48);\n                *(_DWORD *)(v52 + 8) = 0;\n                argv = (char **)v52;\n                buffer_append_int(v52, v50);\n                buffer_append_string_len(v52, \"\\n\", 1LL);\n                v49 = *(const char **)v52;\n                if ( write_all(fd, *argv, *((_DWORD *)argv + 2) - (unsigned int)(*((_DWORD *)argv + 2) != 0)) == -1 )\n                {\n                  log_perror(*(_QWORD *)(v4 + 112));\n                  close(fd);\n                  fd = -1;\n                  return v9;\n                }\n              }\n              if ( !*(_BYTE *)(v4 + 193) )\n              {\n                if ( (unsigned int)config_log_error_open(v4, v49) == -1 )\n                {\n                  log_error(*(_QWORD *)(v4 + 112));\n                  return (unsigned int)-1;\n                }\n                if ( !fildes )\n                {\n                  v49 = \"server.c\";\n                  log_error(*(_QWORD *)(v4 + 112));\n                }\n              }\n              if ( (unsigned int)plugins_call_set_defaults(v4, v49) )\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              if ( !(unsigned int)config_finalize(v4, &off_2561C0) )\n                return (unsigned int)-1;\n              if ( *(_BYTE *)(v4 + 193) )\n                return 0;\n              if ( !*(_BYTE *)(v4 + 192) && v44 != -1 )\n              {\n                if ( write(v44, \"\", 1uLL) < 0 )\n                  return (unsigned int)-1;\n                close(v44);\n              }\n              if ( dword_258320 && *(_WORD *)(v4 + 166) )\n              {\n                v53 = *(_QWORD *)(v4 + 112);\n                *(_WORD *)(v4 + 166) = 0;\n                log_error(v53);\n              }\n              v54 = *(unsigned __int16 *)(v4 + 166);\n              LODWORD(argv) = *(unsigned __int16 *)(v4 + 166);\n              if ( v54 )\n              {\n                v104 = &v101;\n                v55 = alloca((4 * v54 + 18) & 0x7FFF0);\n                v56 = 0LL;\n                do\n                  *((_DWORD *)&v101 + v56++) = -1;\n                while ( (signed int)argv > (signed int)v56 );\n                sub_C11A();\n                argc[0] = 0;\n                v105 = (signed int)argv;\n                v102 = &v110;\nLABEL_214:\n                while ( !dword_25832C && !dword_258330 )\n                {\n                  if ( v105 )\n                  {\n                    v57 = fork();\n                    v58 = v57;\n                    if ( v57 == -1 )\n                      return v9;\n                    if ( !v57 )\n                    {\n                      LODWORD(argv) = 0;\n                      alarm(0);\n                      v59 = 36LL;\n                      v60 = (signed int)argv;\n                      v61 = &stat_buf.st_ino;\n                      while ( v59 )\n                      {\n                        *(_DWORD *)v61 = v60;\n                        v61 = (__ino64_t *)((char *)v61 + 4);\n                        --v59;\n                      }\n                      v62 = 10LL;\n                      stat_buf.st_dev = 1LL;\n                      sigaction(10, (const struct sigaction *)&stat_buf, 0LL);\n                      if ( fd >= 0 )\n                      {\n                        v62 = (unsigned int)fd;\n                        close(fd);\n                        fd = -1;\n                      }\n                      *(_QWORD *)(v4 + 272) = 0LL;\n                      fdlog_pipes_abandon_pids(v62);\n                      *(_DWORD *)(v4 + 400) = getpid();\n                      li_rand_reseed();\n                      goto LABEL_255;\n                    }\n                    --v105;\n                    v63 = 0LL;\n                    while ( *((_DWORD *)&v101 + v63) != -1 )\n                    {\n                      if ( (signed int)argv <= (signed int)++v63 )\n                        goto LABEL_214;\n                    }\n                    *((_DWORD *)&v101 + (signed int)v63) = v58;\n                  }\n                  else\n                  {\n                    LODWORD(endptr) = fdevent_waitpid_intr(0xFFFFFFFFLL, v102);\n                    if ( (_DWORD)endptr == -1 )\n                    {\n                      if ( *__errno_location() == 4 )\n                      {\n                        endptr = (char **)log_monotonic_secs;\n                        v68 = clock_gettime(clock_id, (struct timespec *)&rlimits);\n                        v69 = log_monotonic_secs;\n                        if ( !v68 )\n                          v69 = rlimits.rlim_cur;\n                        log_monotonic_secs = v69;\n                        log_epoch_secs = sub_1DBB0(v4, v69 - (_QWORD)endptr);\n                        if ( dword_258324 )\n                        {\n                          v70 = *(_QWORD *)(v4 + 112);\n                          dword_258324 = 0;\n                          fdlog_files_cycle(v70);\n                          v71 = 0LL;\n                          do\n                          {\n                            v72 = *((_DWORD *)&v101 + (_QWORD)v71);\n                            if ( v72 > 0 )\n                            {\n                              endptr = v71;\n                              kill(v72, 1);\n                              v71 = endptr;\n                            }\n                            v71 = (char **)((char *)v71 + 1);\n                          }\n                          while ( (signed int)argv > (signed int)v71 );\n                        }\n                        if ( dword_258010 )\n                        {\n                          dword_258010 = 0;\n                          plugins_call_handle_trigger(v4);\n                          fdlog_pipes_restart(log_monotonic_secs);\n                          argc[0] = 0;\n                        }\n                      }\n                    }\n                    else\n                    {\n                      v103 = log_monotonic_secs;\n                      v64 = clock_gettime(clock_id, (struct timespec *)&rlimits);\n                      v65 = log_monotonic_secs;\n                      if ( !v64 )\n                        v65 = rlimits.rlim_cur;\n                      log_monotonic_secs = v65;\n                      log_epoch_secs = sub_1DBB0(v4, v65 - v103);\n                      if ( (unsigned int)plugins_call_handle_waitpid(v4, (unsigned int)endptr, v110)\n                        || (v66 = fdlog_pipes_waitpid_cb((unsigned int)endptr), v66 == -1) )\n                      {\n                        if ( !argc[0] )\n                        {\n                          alarm(5u);\n                          argc[0] = 5;\n                        }\n                      }\n                      else if ( v66 != 1 )\n                      {\n                        v67 = 0LL;\n                        while ( *((_DWORD *)&v101 + v67) != (_DWORD)endptr )\n                        {\n                          if ( (signed int)argv <= (signed int)++v67 )\n                            goto LABEL_214;\n                        }\n                        v105 = 1;\n                        *((_DWORD *)&v101 + (signed int)v67) = -1;\n                      }\n                    }\n                  }\n                }\n                if ( dword_258330 || dword_258334 )\n                {\n                  if ( dword_258334 )\n                    dword_258334 = 2;\n                  kill(0, 2);\n                  sub_C4ED(v4);\n                }\n                else if ( dword_25832C )\n                {\n                  kill(0, 15);\n                }\n                return v106;\n              }\nLABEL_255:\n              v73 = *(unsigned __int16 *)(v4 + 168);\n              v74 = *(_QWORD *)(v4 + 112);\n              v75 = *(_QWORD *)(v4 + 256);\n              if ( v73 < 32 )\n                v73 = 32;\n              *(_DWORD *)(v4 + 72) = v73;\n              v76 = fdevent_init(v75, v4 + 72, v4 + 84, v74);\n              *(_QWORD *)(v4 + 24) = v76;\n              if ( !v76 )\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              v77 = *(_DWORD *)(v4 + 72);\n              v78 = *(unsigned __int16 *)(v4 + 170);\n              *(_DWORD *)(v4 + 76) = 8 * v77 / 10;\n              *(_DWORD *)(v4 + 80) = 9 * v77 / 10;\n              if ( v78 <= v77 / 2 )\n              {\n                if ( (_WORD)v78 )\n                {\n                  *(_DWORD *)(v4 + 92) = v78;\n                }\n                else\n                {\n                  *(_WORD *)(v4 + 170) = v77 / 3;\n                  *(_DWORD *)(v4 + 92) = (unsigned __int16)(v77 / 3);\n                }\n              }\n              else\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                v79 = *(_DWORD *)(v4 + 72) / 2;\n                *(_WORD *)(v4 + 170) = v79;\n                *(_DWORD *)(v4 + 92) = v79;\n              }\n              sigaction(17, (const struct sigaction *)&v112, 0LL);\n              if ( (unsigned int)network_register_fdevents(v4, &v112) )\n                return (unsigned int)-1;\n              v80 = config_feature_bool(v4, \"chunkqueue.splice\", 1LL);\n              chunkqueue_internal_pipes(v80, \"chunkqueue.splice\");\n              v81 = *(_QWORD *)(v4 + 112);\n              v82 = *(_QWORD *)(v4 + 24);\n              if ( !(unsigned int)stat_cache_init(v82, v81) )\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              v83 = fdevent_open_devnull(v82, v81);\n              if ( v83 >= 0 )\n              {\n                *(_DWORD *)(v4 + 84) = v83;\n                close(v83);\n              }\n              v84 = 0;\n              if ( !*(_DWORD *)(v4 + 88) )\n              {\n                while ( v84 < *(_DWORD *)(v4 + 340) )\n                {\n                  v9 = fdevent_fcntl_set_nb_cloexec_sock(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 8LL * v84)\n                                                                   + 112LL));\n                  if ( v9 == -1 )\n                  {\n                    log_perror(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                  ++v84;\n                }\n              }\n              if ( (unsigned int)plugins_call_worker_init(v4) )\n                return (unsigned int)-1;\n              v85 = fildes;\n              LODWORD(argv) = dword_258018;\n              if ( dword_258018 <= 0 )\n              {\n                if ( fildes )\n                {\n                  LODWORD(rlimits.rlim_cur) = 112;\n                  if ( getsockname(fildes, (struct sockaddr *)&stat_buf, (socklen_t *)&rlimits) )\n                  {\n                    log_perror(*(_QWORD *)(v4 + 112));\n                  }\n                  else\n                  {\n                    v98 = sub_C3DB(v4, (__int64)&stat_buf);\n                    if ( v98 )\n                    {\n                      LODWORD(rlimits.rlim_cur) = 112;\n                      if ( getpeername(v85, (struct sockaddr *)&stat_buf, (socklen_t *)&rlimits) )\n                      {\n                        log_perror(*(_QWORD *)(v4 + 112));\n                      }\n                      else if ( (unsigned int)fdevent_fcntl_set_nb_cloexec(v85) == -1 )\n                      {\n                        log_perror(*(_QWORD *)(v4 + 112));\n                      }\n                      else\n                      {\n                        if ( LOWORD(stat_buf.st_dev) != 1 )\n                          network_accept_tcp_nagle_disable(v85);\n                        v99 = connection_accepted(v4, v98, &stat_buf, v85);\n                        if ( v99 )\n                        {\n                          connection_state_machine(v99);\n                          fildes = -1;\n                        }\n                      }\n                    }\n                  }\n                }\n                goto LABEL_306;\n              }\n              v86 = getenv(\"NCAT_LOCAL_ADDR\");\n              v87 = v86;\n              if ( v86 )\n              {\n                *(_QWORD *)argc = v86;\n                v89 = getenv(\"NCAT_LOCAL_PORT\");\n                v88 = getenv(\"NCAT_REMOTE_ADDR\");\n                endptr = (char **)getenv(\"NCAT_REMOTE_PORT\");\n                if ( !v89 )\n                {\nLABEL_306:\n                  v9 = 1;\n                  if ( !*(_WORD *)(v4 + 166) )\n                    sub_C11A();\n                  return v9;\n                }\n                v87 = *(const char **)argc;\n              }\n              else\n              {\n                v88 = \"127.0.0.1\";\n                v89 = \"80\";\n                *(_QWORD *)argc = \"127.0.0.1\";\n                endptr = (char **)\"48080\";\n              }\n              if ( v88 && endptr )\n              {\n                v90 = 2;\n                if ( v87 )\n                  v90 = (unsigned __int64)strchr(*(const char **)argc, 58) < 1 ? 2 : 10;\n                v91 = strtol(v89, 0LL, 10);\n                if ( (unsigned int)sock_addr_inet_pton(&stat_buf, *(_QWORD *)argc, v90, v91) == 1 )\n                {\n                  *(_QWORD *)argc = sub_C3DB(v4, (__int64)&stat_buf);\n                  if ( *(_QWORD *)argc )\n                  {\n                    v92 = strtol((const char *)endptr, 0LL, 10);\n                    if ( (unsigned int)sock_addr_inet_pton(&stat_buf, v88, v90, v92) == 1 )\n                    {\n                      if ( (unsigned int)fdevent_fcntl_set_nb_cloexec(v85) == -1 )\n                      {\n                        log_perror(*(_QWORD *)(v4 + 112));\n                      }\n                      else if ( (unsigned int)fdevent_fcntl_set_nb_cloexec((int)argv) == -1 )\n                      {\n                        log_perror(*(_QWORD *)(v4 + 112));\n                      }\n                      else\n                      {\n                        v93 = connection_accepted(v4, *(_QWORD *)argc, &stat_buf, (unsigned int)argv);\n                        v94 = v93;\n                        if ( v93 )\n                        {\n                          v95 = *(_QWORD *)(v4 + 24);\n                          qword_258360 = *(_QWORD *)(v93 + 896);\n                          *(_QWORD *)(v93 + 896) = sub_1DB40;\n                          v96 = fdevent_register(v95, v85, sub_1DA20, v93);\n                          v97 = *(_QWORD *)(v4 + 24);\n                          qword_258368 = v96;\n                          fdevent_fdnode_event_set(v97, v96, 0x2000LL);\n                          connection_state_machine(v94);\n                          fildes = -1;\n                          dword_258018 = -1;\n                        }\n                      }\n                    }\n                    else\n                    {\n                      log_error(*(_QWORD *)(v4 + 112));\n                    }\n                  }\n                }\n                else\n                {\n                  log_error(*(_QWORD *)(v4 + 112));\n                }\n              }\n              goto LABEL_306;\n            }\n            v33 = *(const char ***)(v4 + 232);\n            if ( v33 )\n            {\n              v34 = getgrnam(*v33);\n              if ( !v34 )\n              {\n                v35 = **(_QWORD **)(v4 + 232);\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n            }\n            else\n            {\n              v34 = 0LL;\n            }\n            v36 = *(const char ***)(v4 + 224);\n            if ( v36 )\n            {\n              v37 = getpwnam(*v36);\n              v38 = v37;\n              if ( !v37 )\n              {\n                v39 = **(_QWORD **)(v4 + 224);\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              if ( !v37->pw_uid )\n              {\n                log_error(*(_QWORD *)(v4 + 112));\n                return v9;\n              }\n              if ( !v34 )\n              {\n                v34 = getgrgid(v37->pw_gid);\n                if ( !v34 )\n                {\n                  v40 = v38->pw_gid;\n                  log_error(*(_QWORD *)(v4 + 112));\n                  return v9;\n                }\n              }\n            }\n            else\n            {\n              v38 = 0LL;\n              if ( !v34 )\n              {\nLABEL_157:\n                if ( *(_QWORD *)(v4 + 216) )\n                {\n                  tzset();\n                  if ( chroot(**(const char ***)(v4 + 216)) == -1 )\n                  {\n                    v9 = -1;\n                    log_perror(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                  if ( chdir(\"/\") == -1 )\n                  {\n                    v9 = -1;\n                    log_perror(*(_QWORD *)(v4 + 112));\n                    return v9;\n                  }\n                }\n                if ( v38 && setuid(v38->pw_uid) == -1 )\n                {\n                  v9 = -1;\n                  log_perror(*(_QWORD *)(v4 + 112));\n                  return v9;\n                }\n                if ( *(_BYTE *)(v4 + 194) )\n                  prctl(4, 1LL, 0LL, 0LL, 0LL);\n                goto LABEL_167;\n              }\n            }\n            v41 = v34->gr_gid;\n            if ( !v41 )\n            {\n              log_error(*(_QWORD *)(v4 + 112));\n              return v9;\n            }\n            if ( setgid(v41) == -1 )\n            {\n              LODWORD(argv) = -1;\n              v42 = *(_QWORD *)(v4 + 112);\nLABEL_154:\n              log_perror(v42);\n              return (unsigned int)argv;\n            }\n            if ( setgroups(0LL, 0LL) == -1 )\n            {\n              v42 = *(_QWORD *)(v4 + 112);\n              LODWORD(argv) = -1;\n              goto LABEL_154;\n            }\n            v43 = *(const char ***)(v4 + 224);\n            if ( v43 )\n              initgroups(*v43, v34->gr_gid);\n            goto LABEL_157;\n          }\n          if ( v9 == 104 )\n          {\n            v9 = 0;\n            write_all(\n              1,\n              \"lighttpd/1.4.64 - a light and fast webserver\\n\"\n              \"usage:\\n\"\n              \" -f <name>  filename of the config-file\\n\"\n              \" -m <name>  module directory (default: /usr/local/lib)\\n\"\n              \" -i <secs>  graceful shutdown after <secs> of inactivity\\n\"\n              \" -1         process single (one) request on stdin socket, then exit\\n\"\n              \" -p         print the parsed config-file in internal form, and exit\\n\"\n              \" -t         test config-file syntax, then exit\\n\"\n              \" -tt        test config-file syntax, load and init modules, then exit\\n\"\n              \" -D         don't go to background (default: go to background)\\n\"\n              \" -v         show version\\n\"\n              \" -V         show compile-time features\\n\"\n              \" -h         show this help\\n\"\n              \"\\n\",\n              0x264uLL);\n            return v9;\n          }\n          if ( (signed int)v9 > 104 )\n            break;\n          if ( v9 == 68 )\n          {\n            *(_BYTE *)(a1 + 192) = 1;\n          }\n          else if ( (signed int)v9 > 68 )\n          {\n            if ( v9 == 86 )\n            {\n              v9 = 0;\n              write_all(1, \"lighttpd/1.4.64 - a light and fast webserver\\n\", 0x2DuLL);\n              v11 = network_write_show_handlers(1LL, \"lighttpd/1.4.64 - a light and fast webserver\\n\");\n              v12 = fdevent_show_event_handlers();\n              __printf_chk(\n                1LL,\n                \"%s%s%s%s\\n\",\n                v12,\n                v11,\n                \"\\n\"\n                \"Features:\\n\"\n                \"\\n\"\n                \"\\t+ IPv6 support\\n\"\n                \"\\t+ zlib support\\n\"\n                \"\\t- zstd support\\n\"\n                \"\\t- bzip2 support\\n\"\n                \"\\t- brotli support\\n\"\n                \"\\t+ crypt support\\n\"\n                \"\\t- OpenSSL support\\n\"\n                \"\\t- mbedTLS support\\n\"\n                \"\\t- NSS crypto support\\n\"\n                \"\\t- GnuTLS support\\n\"\n                \"\\t- WolfSSL support\\n\"\n                \"\\t- Nettle support\\n\"\n                \"\\t+ PCRE support\\n\"\n                \"\\t- MySQL support\\n\"\n                \"\\t- PgSQL support\\n\"\n                \"\\t- DBI support\\n\"\n                \"\\t- Kerberos support\\n\"\n                \"\\t- LDAP support\\n\"\n                \"\\t- PAM support\\n\"\n                \"\\t- FAM support\\n\"\n                \"\\t- LUA support\\n\"\n                \"\\t- xml support\\n\"\n                \"\\t- SQLite support\\n\",\n                \"\\t+ Y2038 support\\n\");\n              return v9;\n            }\n            if ( v9 != 102 )\n              goto LABEL_36;\n            if ( *(_QWORD *)(a1 + 320) )\n            {\n              v9 = -1;\n              log_error(*(_QWORD *)(a1 + 112));\n              return v9;\n            }\n            if ( (unsigned int)config_read(a1, optarg) )\n              return (unsigned int)-1;\n          }\n          else\n          {\n            if ( v9 != 49 )\n              goto LABEL_36;\n            if ( !fildes )\n              fildes = dup(0);\n          }\n        }\n        if ( v9 != 112 )\n          break;\n        v5 = 1;\n      }\n      if ( (signed int)v9 > 112 )\n        break;\n      if ( v9 == 105 )\n      {\n        v10 = strtol(optarg, endptr, 0);\n        if ( !*optarg || *(_BYTE *)rlimits.rlim_cur || v10 < 0 )\n        {\n          log_error(*(_QWORD *)(a1 + 112));\n          return (unsigned int)-1;\n        }\n        dword_258320 = v10;\n      }\n      else\n      {\n        if ( v9 != 109 )\n          goto LABEL_36;\n        *(_QWORD *)(a1 + 264) = optarg;\n      }\n    }\n    if ( v9 != 116 )\n      break;\n    ++v3;\n  }\n  if ( v9 == 118 )\n  {\n    v9 = 0;\n    write_all(1, \"lighttpd/1.4.64 - a light and fast webserver\\n\", 0x2DuLL);\n  }\n  else\n  {\nLABEL_36:\n    v9 = -1;\n    write_all(\n      1,\n      \"lighttpd/1.4.64 - a light and fast webserver\\n\"\n      \"usage:\\n\"\n      \" -f <name>  filename of the config-file\\n\"\n      \" -m <name>  module directory (default: /usr/local/lib)\\n\"\n      \" -i <secs>  graceful shutdown after <secs> of inactivity\\n\"\n      \" -1         process single (one) request on stdin socket, then exit\\n\"\n      \" -p         print the parsed config-file in internal form, and exit\\n\"\n      \" -t         test config-file syntax, then exit\\n\"\n      \" -tt        test config-file syntax, load and init modules, then exit\\n\"\n      \" -D         don't go to background (default: go to background)\\n\"\n      \" -v         show version\\n\"\n      \" -V         show compile-time features\\n\"\n      \" -h         show this help\\n\"\n      \"\\n\",\n      0x264uLL);\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0xc7ccL", 
            "funcEndAddr": "0xe248L", 
            "funcName": "sub_C7CC"
        }, 
        {
            "decompiledFuncCode": "int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  char **v3; // r15\n  int v4; // ebp\n  _QWORD *v5; // rbx\n  unsigned __int64 v6; // rsi\n\n  v3 = (char **)argv;\n  v4 = -1;\n  if ( (unsigned int)sub_BDD0() )\n  {\n    do\n    {\n      v5 = sub_BE9D();\n      if ( dword_258334 )\n      {\n        sub_C367((__int64)v5);\n        optind = 1;\n      }\n      v6 = (unsigned int)argc;\n      v4 = sub_C7CC((__int64)v5, argc, v3);\n      if ( v4 > 0 )\n      {\n        sub_1D000(v5, (unsigned int)argc);\n        if ( dword_258330 || dword_258334 )\n          sub_C4ED((__int64)v5);\n        if ( !v5[12] )\n          v4 = 0;\n        if ( dword_258330 == 2 )\n        {\n          v6 = (unsigned __int64)\"server.c\";\n          log_error(v5[14]);\n        }\n        else if ( !fildes )\n        {\n          v6 = (unsigned __int64)\"server.c\";\n          log_error(v5[14]);\n        }\n      }\n      chunkqueue_internal_pipes(0LL, v6);\n      sub_C1D2((__int64)v5);\n      config_log_error_close(v5);\n      if ( dword_258334 )\n        sub_BFF0((__int64)v5);\n      else\n        network_close(v5);\n      request_pool_free();\n      connections_free(v5);\n      plugins_free(v5);\n      sub_C2AE(v5);\n      if ( v4 < 0 || !dword_258334 )\n        break;\n      while ( (signed int)fdevent_waitpid(-1, 0LL) > 0 )\n        ;\n    }\n    while ( dword_258334 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0xe248L", 
            "funcEndAddr": "0xe3c6L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_E3C6(__int64 a1, int a2)\n{\n  signed __int64 result; // rax\n\n  *(_BYTE *)(a1 + 566) = 0;\n  *(_BYTE *)(a1 + 560) = 1;\n  result = 1LL;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  *(_DWORD *)(a1 + 4) = a2;\n  return result;\n}\n", 
            "funcStartAddr": "0xe3c6L", 
            "funcEndAddr": "0xe3e5L", 
            "funcName": "sub_E3C6"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E3E5(__int64 a1)\n{\n  _DWORD *v1; // rbp\n  __int64 v2; // r12\n  bool v3; // cf\n  bool v4; // zf\n  __int64 result; // rax\n\n  v1 = 0LL;\n  if ( *(_DWORD *)(a1 + 4) == 401 )\n  {\n    v2 = http_header_response_get(a1, 53LL, \"WWW-Authenticate\", 16LL);\n    if ( v2 )\n    {\n      v1 = (_DWORD *)buffer_init(a1, 53LL);\n      buffer_copy_string_len(v1, *(_QWORD *)v2, *(_DWORD *)(v2 + 8) - (unsigned int)(*(_DWORD *)(v2 + 8) != 0));\n    }\n  }\n  v3 = *(_DWORD *)(a1 + 340) < 0x1000u;\n  v4 = *(_DWORD *)(a1 + 340) == 4096;\n  *(_DWORD *)(a1 + 336) = 0;\n  if ( !v3 && !v4 )\n    buffer_free_ptr(a1 + 328);\n  *(_QWORD *)(a1 + 528) = 0LL;\n  array_reset_data_strings(a1 + 536);\n  result = http_response_body_clear(a1, 0LL);\n  if ( v1 )\n  {\n    http_header_response_set(a1, 53LL, \"WWW-Authenticate\", 16LL, *(_QWORD *)v1, v1[2] - (unsigned int)(v1[2] != 0));\n    result = buffer_free(v1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe3e5L", 
            "funcEndAddr": "0xe4bcL", 
            "funcName": "sub_E3E5"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_E4BC(__int64 a1)\n{\n  int v1; // eax\n  signed int v2; // ebp\n  __int64 v4; // r12\n  __int64 v5; // rax\n  __int64 v6; // rax\n  int v7; // eax\n  int v8; // eax\n\n  v1 = *(_DWORD *)(a1 + 616);\n  if ( v1 > 0 )\n    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 620);\n  if ( *(_QWORD *)(a1 + 32) && !*(_BYTE *)(a1 + 159) )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 4);\n  if ( v1 )\n  {\n    if ( v1 <= 0 )\n    {\n      if ( (unsigned int)(v2 - 403) > 1 )\n        goto LABEL_10;\n      v1 = -v1;\n    }\n    *(_DWORD *)(a1 + 4) = v1;\nLABEL_10:\n    if ( (unsigned int)(v2 - 200) <= 0x63 )\n      *(_DWORD *)(a1 + 616) = 0xFFFF;\n    return 0LL;\n  }\n  if ( v2 <= 399 )\n    return 0LL;\n  v4 = *(_QWORD *)(a1 + 192);\n  if ( !v4 )\n  {\n    if ( (unsigned int)(v2 - 403) > 1 )\n      return 0LL;\n    v4 = *(_QWORD *)(a1 + 200);\n    if ( !v4 )\n      return 0LL;\n  }\n  v5 = http_header_env_set_ptr(a1, \"REDIRECT_STATUS\", 15LL);\n  buffer_append_int(v5, v2);\n  if ( *(_QWORD *)(a1 + 192) == v4 )\n  {\n    plugins_call_handle_request_reset(a1, v2);\n    v6 = *(_QWORD *)(a1 + 416);\n    if ( v6 )\n    {\n      if ( v6 != *(_QWORD *)(a1 + 752) )\n        *(_BYTE *)(a1 + 566) = 0;\n      *(_QWORD *)(a1 + 416) = 0LL;\n      chunkqueue_reset(a1 + 736);\n    }\n    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 841LL) = 1;\n    v7 = *(_DWORD *)(a1 + 4);\n    *(_WORD *)(a1 + 560) = 0;\n    *(_DWORD *)(a1 + 616) = v7;\n    v8 = *(_DWORD *)(a1 + 24);\n    *(_DWORD *)(a1 + 24) = 0;\n    *(_DWORD *)(a1 + 620) = v8;\n  }\n  else\n  {\n    *(_DWORD *)(a1 + 616) = -*(_DWORD *)(a1 + 4);\n  }\n  if ( *(_DWORD *)(a1 + 28) == -1 )\n    *(_DWORD *)(a1 + 28) = 0;\n  buffer_copy_string_len(a1 + 456, *(_QWORD *)v4, *(_DWORD *)(v4 + 8) - (unsigned int)(*(_DWORD *)(v4 + 8) != 0));\n  sub_E3E5(a1);\n  *(_DWORD *)(a1 + 4) = 0;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0xe4bcL", 
            "funcEndAddr": "0xe62cL", 
            "funcName": "sub_E4BC"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_E62C(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  int v4; // ebp\n  signed __int64 result; // rax\n\n  if ( *(_QWORD *)(a1 + 32) || *(_DWORD *)(a1 + 336) )\n    return 0LL;\n  v1 = a1;\n  request_config_reset();\n  v2 = *(_QWORD *)(a1 + 440);\n  v3 = a1 + 280;\n  if ( v2 )\n    buffer_copy_string_len_lc(v3, *(_QWORD *)v2, *(_DWORD *)(v2 + 8) - (unsigned int)(*(_DWORD *)(v2 + 8) != 0));\n  else\n    buffer_copy_string_len(v3, \"\", 0LL);\n  v4 = http_request_parse_target(v1, *(unsigned __int16 *)(*(_QWORD *)(v1 + 48) + 846LL));\n  if ( v4 )\n  {\n    *(_DWORD *)(v1 + 56) = 258;\n    config_cond_cache_reset(v1);\n    result = sub_E3C6(v1, v4);\n  }\n  else\n  {\n    *(_DWORD *)(v1 + 56) = 7950;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe62cL", 
            "funcEndAddr": "0xe6ceL", 
            "funcName": "sub_E62C"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E6CE(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // rbx\n  __int64 v3; // rdi\n  __int64 v4; // r8\n  __int64 v5; // r8\n\n  v2 = a1;\n  v3 = a1[16];\n  if ( a2 )\n    log_error(v3);\n  else\n    log_perror(v3);\n  v4 = v2[41];\n  log_error(v2[16]);\n  v5 = v2[37];\n  return log_error(v2[16]);\n}\n", 
            "funcStartAddr": "0xe6ceL", 
            "funcEndAddr": "0xe768L", 
            "funcName": "sub_E6CE"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_E768(__int64 a1)\n{\n  __int64 v1; // rax\n  bool v2; // al\n  __int64 v3; // rax\n  __int64 v4; // rax\n  __int64 v5; // rbp\n  const char *v6; // r8\n  signed __int64 v7; // r9\n  __int64 v8; // rbp\n\n  if ( *(_QWORD *)(a1 + 32) )\n  {\n    v2 = 1;\n    if ( *(_BYTE *)(a1 + 159) )\n      v2 = *(_DWORD *)(a1 + 616) != 0;\n    LOBYTE(v1) = v2;\n  }\n  else\n  {\n    LOBYTE(v1) = *(_DWORD *)(a1 + 616) > 65534;\n  }\n  if ( (_BYTE)v1 )\n    return v1;\n  sub_E3E5(a1);\n  v3 = *(_QWORD *)(a1 + 208);\n  *(_BYTE *)(a1 + 560) = 1;\n  if ( !v3 )\n  {\nLABEL_13:\n    v8 = chunkqueue_append_buffer_open(a1 + 624);\n    buffer_copy_string_len(\n      v8,\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\\n\"\n      \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\"\n      \"         \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"\n      \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n      \" <head>\\n\"\n      \"  <title>\",\n      260LL);\n    http_status_append(v8, *(unsigned int *)(a1 + 4));\n    buffer_append_string_len(v8, \"</title>\\n </head>\\n <body>\\n  <h1>\", 32LL);\n    http_status_append(v8, *(unsigned int *)(a1 + 4));\n    buffer_append_string_len(v8, \"</h1>\\n </body>\\n</html>\\n\", 23LL);\n    chunkqueue_append_buffer_commit(a1 + 624, \"</h1>\\n </body>\\n</html>\\n\");\n    v6 = \"text/html\";\n    v7 = 9LL;\n    goto LABEL_14;\n  }\n  buffer_copy_string_len(a1 + 328, *(_QWORD *)v3, *(_DWORD *)(v3 + 8) - (unsigned int)(*(_DWORD *)(v3 + 8) != 0));\n  buffer_append_int(a1 + 328, *(signed int *)(a1 + 4));\n  buffer_append_string_len(a1 + 328, \".html\", 5LL);\n  v4 = stat_cache_get_entry_open(a1 + 328, *(unsigned __int8 *)(a1 + 154));\n  v5 = v4;\n  if ( !v4 || (unsigned int)http_chunk_append_file_ref(a1, v4) )\n  {\n    *(_DWORD *)(a1 + 336) = 0;\n    goto LABEL_13;\n  }\n  v1 = stat_cache_content_type_get_by_ext(v5, *(_QWORD *)(a1 + 96));\n  if ( v1 )\n  {\n    v6 = *(const char **)v1;\n    v7 = *(_DWORD *)(v1 + 8) - (unsigned int)(*(_DWORD *)(v1 + 8) != 0);\nLABEL_14:\n    LOBYTE(v1) = http_header_response_set(a1, 18LL, \"Content-Type\", 12LL, v6, v7);\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0xe768L", 
            "funcEndAddr": "0xe8fcL", 
            "funcName": "sub_E768"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_omit_header(__int64 a1, _QWORD *a2)\n{\n  unsigned int v2; // ebx\n  __int64 result; // rax\n  __int64 v4; // r13\n  __int64 v5; // rax\n  __int64 v6; // rdx\n\n  v2 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  if ( v2 == 10 )\n    return (unsigned int)buffer_eq_icase_ssn(*a2, \"X-Sendfile\", 10LL) != 0;\n  result = 0LL;\n  if ( v2 > 0xA )\n  {\n    v4 = *a2;\n    result = buffer_eq_icase_ssn(*a2, \"X-LIGHTTPD-\", 11LL);\n    if ( (_DWORD)result )\n    {\n      if ( v2 == 28 )\n      {\n        if ( (unsigned int)buffer_eq_icase_ssn(v4 + 11, \"KBytes-per-second\", 17LL) )\n        {\n          v5 = strtol((const char *)a2[4], 0LL, 10) << 10;\n          if ( v5 > 0 )\n          {\n            v6 = *(unsigned int *)(a1 + 172);\n            if ( !(_DWORD)v6 || v5 < v6 )\n              *(_DWORD *)(a1 + 172) = v5;\n          }\n        }\n      }\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe8fcL", 
            "funcEndAddr": "0xe9b8L", 
            "funcName": "http_response_omit_header"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_E9B8(int a1)\n{\n  const char *result; // rax\n\n  result = \"(unknown)\";\n  switch ( a1 )\n  {\n    case 0:\n      result = \"connect\";\n      break;\n    case 1:\n      result = \"req-start\";\n      break;\n    case 2:\n      result = \"read\";\n      break;\n    case 3:\n      result = \"req-end\";\n      break;\n    case 4:\n      result = \"readpost\";\n      break;\n    case 5:\n      result = \"handle-req\";\n      break;\n    case 6:\n      result = \"resp-start\";\n      break;\n    case 7:\n      result = \"write\";\n      break;\n    case 8:\n      result = \"resp-end\";\n      break;\n    case 9:\n      result = \"error\";\n      break;\n    case 10:\n      result = \"close\";\n      break;\n    default:\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe9b8L", 
            "funcEndAddr": "0xea2eL", 
            "funcName": "sub_E9B8"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall connections_free(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rdi\n  __int64 result; // rax\n  _QWORD *v4; // rdi\n\n  v1 = a1;\n  while ( 1 )\n  {\n    v2 = *(_QWORD **)(v1 + 104);\n    if ( !v2 )\n      break;\n    *(_QWORD *)(v1 + 104) = v2[140];\n    result = sub_1F270(v2);\n  }\n  while ( 1 )\n  {\n    v4 = *(_QWORD **)(v1 + 96);\n    if ( !v4 )\n      break;\n    *(_QWORD *)(v1 + 96) = v4[140];\n    result = sub_1F270(v4);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xea2eL", 
            "funcEndAddr": "0xea6aL", 
            "funcName": "connections_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall connection_graceful_shutdown_maint(__int64 a1)\n{\n  _BOOL4 v1; // ebp\n  __int64 result; // rax\n  int *i; // rbx\n  int v4; // eax\n  int *v5; // r12\n  signed __int64 v6; // rax\n  __int64 v7; // rdx\n  bool v8; // zf\n\n  v1 = 0;\n  result = *(_QWORD *)(a1 + 384);\n  if ( result )\n    v1 = result < log_monotonic_secs;\n  for ( i = *(int **)(a1 + 96); i; i = v5 )\n  {\n    v4 = *i;\n    v5 = (int *)*((_QWORD *)i + 140);\n    if ( *i == 10 )\n    {\n      v6 = *((_QWORD *)i + 136) - 4LL;\n      v7 = log_monotonic_secs - v6;\n      *((_QWORD *)i + 136) = v6;\n      result = v7 > 5;\n      goto LABEL_17;\n    }\n    if ( *((_QWORD *)i + 101) && v4 == 7 )\n    {\n      h2_send_goaway(i, 0LL);\n      if ( *(_DWORD *)(*((_QWORD *)i + 101) + 64LL) || **((_QWORD **)i + 106) )\n        goto LABEL_10;\n      *i = 8;\n      result = 1LL;\n    }\n    else\n    {\n      if ( v4 != 2 || (unsigned int)i[278] <= 1 || **((_QWORD **)i + 107) )\n      {\nLABEL_10:\n        result = 0LL;\n        goto LABEL_17;\n      }\n      *i = 9;\n      result = 1LL;\n    }\nLABEL_17:\n    if ( v1 )\n    {\n      *i = 9;\n      result = (unsigned int)v1;\n    }\n    v8 = *((_BYTE *)i + 843) == 0;\n    *((_BYTE *)i + 566) = 0;\n    *(_QWORD *)(i + 43) = 0LL;\n    if ( v8 )\n    {\n      if ( !(_DWORD)result )\n        continue;\n    }\n    else\n    {\n      *((_BYTE *)i + 843) = 0;\n    }\n    result = connection_state_machine(i);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xea6aL", 
            "funcEndAddr": "0xeb7fL", 
            "funcName": "connection_graceful_shutdown_maint"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_EB7F(__int64 a1)\n{\n  __int64 v1; // r9\n  __int64 v2; // r8\n\n  v1 = *(unsigned int *)(a1 + 12);\n  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 816LL);\n  return log_error(*(_QWORD *)(a1 + 128));\n}\n", 
            "funcStartAddr": "0xeb7fL", 
            "funcEndAddr": "0xebbdL", 
            "funcName": "sub_EB7F"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_EBBD(__int64 a1, unsigned int a2)\n{\n  int v2; // eax\n\n  chunkqueue_compact_mem(a1, a2);\n  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16LL) + 8LL);\n  return v2 - (unsigned int)(v2 != 0) - *(_DWORD *)(*(_QWORD *)a1 + 24LL);\n}\n", 
            "funcStartAddr": "0xebbdL", 
            "funcEndAddr": "0xebe0L", 
            "funcName": "sub_EBBD"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_EBE0(unsigned int a1, __int64 a2, unsigned int a3)\n{\n  __int64 v4; // [rsp+0h] [rbp-28h]\n  unsigned __int32 v5; // [rsp+8h] [rbp-20h]\n  unsigned __int32 v6; // [rsp+Ch] [rbp-1Ch]\n  unsigned __int64 v7; // [rsp+18h] [rbp-10h]\n\n  v5 = _byteswap_ulong(a1);\n  v6 = _byteswap_ulong(a3);\n  v7 = __readfsqword(0x28u);\n  v4 = 0LL;\n  *(_WORD *)((char *)&v4 + 5) = 772;\n  chunkqueue_append_mem(a2, (char *)&v4 + 3, 13LL, 0LL);\n  return __readfsqword(0x28u) ^ v7;\n}\n", 
            "funcStartAddr": "0xebe0L", 
            "funcEndAddr": "0xec3eL", 
            "funcName": "sub_EBE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_EC3E(_DWORD *a1, __int64 a2, unsigned int a3)\n{\n  if ( (unsigned int)(a1[2] - 5) > 1 )\n    *(_QWORD *)(*(_QWORD *)(a2 + 808) + 224LL) = log_monotonic_secs;\n  *a1 = 9;\n  a1[2] = 6;\n  return sub_EBE0(a1[3], *(_QWORD *)(a2 + 848), a3);\n}\n", 
            "funcStartAddr": "0xec3eL", 
            "funcEndAddr": "0xec7aL", 
            "funcName": "sub_EC3E"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_EC7A(__int64 a1, __int64 a2, _BYTE *a3, __int64 a4, unsigned int a5)\n{\n  _DWORD *v5; // r12\n  _BYTE *v6; // rbx\n  __int64 v7; // rbp\n  __int64 *v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // r14\n  signed int v11; // eax\n  signed __int64 v12; // rcx\n  char *v13; // rdi\n  __int64 v14; // r12\n  __int64 v15; // rbp\n  __int64 v16; // r14\n  __int64 v17; // r10\n  __int64 v18; // rbx\n  _BYTE *v19; // rax\n  _BYTE *v20; // rsi\n  __int64 v21; // rdx\n  signed __int64 v22; // rdx\n  char *v23; // rdi\n  signed __int64 v24; // rcx\n  __int64 v25; // rax\n  __int64 v27; // [rsp+0h] [rbp-40B8h]\n  signed __int64 v28; // [rsp+8h] [rbp-40B0h]\n  _DWORD *v29; // [rsp+10h] [rbp-40A8h]\n  __int64 v30; // [rsp+18h] [rbp-40A0h]\n  char *v31; // [rsp+20h] [rbp-4098h]\n  unsigned int v32; // [rsp+2Ch] [rbp-408Ch]\n  _BYTE *v33; // [rsp+40h] [rbp-4078h]\n  __int16 v34; // [rsp+48h] [rbp-4070h]\n  _BYTE *v35; // [rsp+50h] [rbp-4068h]\n  char v36; // [rsp+58h] [rbp-4060h]\n  __int16 v37; // [rsp+60h] [rbp-4058h]\n  int v38; // [rsp+62h] [rbp-4056h]\n  __int16 v39; // [rsp+66h] [rbp-4052h]\n  int v40; // [rsp+70h] [rbp-4048h]\n  unsigned __int64 v41; // [rsp+4078h] [rbp-40h]\n\n  v5 = (_DWORD *)a1;\n  v6 = a3;\n  v7 = a2;\n  v32 = a5;\n  v40 = 1;\n  v41 = __readfsqword(0x28u);\n  if ( (unsigned int)http_header_parse_hoff(a3) - 1 > 0xFFFE || (unsigned __int16)v40 > 0x1FFEu || (_WORD)v40 == 1 )\n  {\n    log_error(*(_QWORD *)(a1 + 128));\n    v40 = 1;\n    http_header_parse_hoff(\":status: 500\\r\\n\\r\\n\");\n  }\n  v8 = *(__int64 **)(a1 + 568);\n  v9 = *((unsigned int *)v8 + 3);\n  if ( (unsigned int)v9 <= 0xFFFF )\n    ck_assert_failed(\"h2.c\", 2144LL, \"tb->size >= 65536\");\n  v10 = *v8;\n  v27 = *v8 + v9;\n  v28 = *(_QWORD *)(a2 + 808) + 152LL;\n  v11 = 1;\n  if ( *v6 == 58 )\n  {\n    v12 = 6LL;\n    v35 = v6;\n    v13 = &v36;\n    while ( v12 )\n    {\n      *(_DWORD *)v13 = 0;\n      v13 += 4;\n      --v12;\n    }\n    v38 = 589831;\n    v39 = 3;\n    v10 = lshpack_enc_encode(v28, v10, v27, &v35);\n    if ( *v8 == v10 )\n    {\nLABEL_31:\n      sub_EC3E(v5, v7, 2u);\n      return __readfsqword(0x28u) ^ v41;\n    }\n    v11 = 2;\n  }\n  v29 = v5;\n  v30 = a2;\n  v14 = (__int64)v6;\n  v15 = v10;\n  v16 = v11;\n  v31 = (char *)&v40 + 2 * (unsigned int)(v11 + 1) + -2 * v11;\n  while ( (unsigned __int16)v40 > (signed int)v16 )\n  {\n    v17 = 0LL;\n    if ( (_DWORD)v16 != 1 )\n      v17 = *((unsigned __int16 *)&v40 + v16);\n    v34 = v17;\n    v33 = (_BYTE *)(v14 + v17);\n    v18 = *(unsigned __int16 *)&v31[2 * v16];\n    v19 = memchr((const void *)(v14 + v17), 58, v18 - v17);\n    v20 = v19;\n    if ( v19 && v33 != v19 && (_DWORD)v19 != (_DWORD)v33 )\n    {\n      do\n      {\n        do\n          ++v20;\n        while ( *v20 == 32 );\n      }\n      while ( *v20 == 9 );\n      v21 = v14 + (unsigned __int16)v18;\n      if ( *(_BYTE *)(v21 - 2) == 13 )\n      {\n        v22 = v21 - 2 - (_QWORD)v20;\n        if ( (_DWORD)v22 )\n        {\n          v23 = &v36;\n          v24 = 6LL;\n          v35 = (_BYTE *)v14;\n          while ( v24 )\n          {\n            *(_DWORD *)v23 = 0;\n            v23 += 4;\n            --v24;\n          }\n          v39 = v22;\n          v37 = v34;\n          LOWORD(v38) = (_WORD)v19 - (_WORD)v33;\n          HIWORD(v38) = (_WORD)v20 - v14;\n          v25 = lshpack_enc_encode(v28, v15, v27, &v35);\n          if ( v15 == v25 )\n          {\n            v5 = v29;\n            v7 = v30;\n            goto LABEL_31;\n          }\n          v15 = v25;\n        }\n      }\n    }\n    ++v16;\n  }\n  sub_22170((unsigned int)v29[3], v30 + 808, v30 + 848, *v8, (unsigned int)v15 - (unsigned int)*v8, v32);\n  return __readfsqword(0x28u) ^ v41;\n}\n", 
            "funcStartAddr": "0xec7aL", 
            "funcEndAddr": "0xef68L", 
            "funcName": "sub_EC7A"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall h2_check_con_upgrade_h2c(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 result; // rax\n  __int64 v4; // rbp\n  __int64 v5; // r12\n  __int64 v6; // r13\n  __int64 v7; // rcx\n  __int64 v8; // r12\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rdx\n  _DWORD *v12; // rdi\n  _DWORD *v13; // rsi\n  signed __int64 v14; // rcx\n  __int128 v15; // xmm0\n  signed __int64 v16; // rcx\n  _DWORD *v17; // rdi\n  signed __int64 v18; // rcx\n  _DWORD *v19; // rdi\n  __int128 v20; // xmm0\n  char v21; // al\n  __int64 v22; // rax\n\n  v1 = a1;\n  v2 = http_header_request_get(a1, 49LL, \"Upgrade\", 7LL);\n  result = 0LL;\n  if ( v2 )\n  {\n    v4 = http_header_request_get(a1, 12LL, \"Connection\", 10LL);\n    if ( v4 )\n    {\n      if ( *(_DWORD *)(a1 + 28) == 1 )\n      {\n        result = http_header_str_contains_token(\n                   *(_QWORD *)v2,\n                   *(_DWORD *)(v2 + 8) - (unsigned int)(*(_DWORD *)(v2 + 8) != 0),\n                   \"h2c\",\n                   3LL);\n        if ( (_DWORD)result )\n        {\n          v5 = http_header_request_get(a1, 28LL, \"HTTP2-Settings\", 14LL);\n          if ( v5 )\n          {\n            if ( !*(_QWORD *)(a1 + 416) )\n            {\n              v6 = *(_QWORD *)(a1 + 568);\n              *(_DWORD *)(v6 + 8) = 0;\n              if ( *(_BYTE *)(a1 + 160) > 1u\n                && !*(_BYTE *)(*(_QWORD *)(a1 + 48) + 842LL)\n                && (unsigned int)http_header_str_contains_token(\n                                   *(_QWORD *)v4,\n                                   *(_DWORD *)(v4 + 8) - (unsigned int)(*(_DWORD *)(v4 + 8) != 0),\n                                   \"HTTP2-Settings\",\n                                   14LL)\n                && buffer_append_base64_decode(\n                     v6,\n                     *(_QWORD *)v5,\n                     *(_DWORD *)(v5 + 8) - (unsigned int)(*(_DWORD *)(v5 + 8) != 0),\n                     1LL) )\n              {\n                chunkqueue_append_mem(\n                  a1 + 624,\n                  \"HTTP/1.1 101 Switching Protocols\\r\\nConnection: Upgrade\\r\\nUpgrade: h2c\\r\\n\\r\\n\",\n                  71LL,\n                  v7);\n                v8 = *(_QWORD *)(a1 + 48);\n                *(_DWORD *)(a1 + 520) = 71;\n                h2_init_con(a1, v8, v6);\n                v9 = *(_QWORD *)(v8 + 808);\n                if ( !*(_DWORD *)(v9 + 76) )\n                {\n                  *(_DWORD *)(v9 + 68) = 1;\n                  v10 = sub_21F10(a1, v8);\n                  --*(_DWORD *)(v8 + 1112);\n                  v11 = v10;\n                  *(_DWORD *)v10 = 3;\n                  *(_DWORD *)(v10 + 4) = 0;\n                  v12 = (_DWORD *)(v10 + 264);\n                  v13 = (_DWORD *)(v1 + 264);\n                  v14 = 16LL;\n                  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v1 + 24);\n                  *(_QWORD *)(v10 + 8) = 4294967301LL;\n                  v15 = *(_OWORD *)(v1 + 240);\n                  *(_QWORD *)(v10 + 232) = *(_QWORD *)(v1 + 232);\n                  LODWORD(v10) = *(_DWORD *)(v1 + 224);\n                  *(_QWORD *)(v1 + 232) = 0LL;\n                  *(_DWORD *)(v11 + 224) = v10;\n                  *(_DWORD *)(v1 + 224) = 0;\n                  *(_OWORD *)(v11 + 240) = v15;\n                  *(_QWORD *)(v11 + 256) = *(_QWORD *)(v1 + 256);\n                  while ( v14 )\n                  {\n                    *v12 = *v13;\n                    ++v13;\n                    ++v12;\n                    --v14;\n                  }\n                  v16 = 6LL;\n                  v17 = (_DWORD *)(v1 + 240);\n                  while ( v16 )\n                  {\n                    *v17 = 0;\n                    ++v17;\n                    --v16;\n                  }\n                  v18 = 16LL;\n                  v19 = (_DWORD *)(v1 + 264);\n                  while ( v18 )\n                  {\n                    *v19 = 0;\n                    ++v19;\n                    --v18;\n                  }\n                  v20 = *(_OWORD *)(v1 + 456);\n                  *(_QWORD *)(v11 + 440) = *(_QWORD *)(v1 + 440);\n                  *(_QWORD *)(v1 + 440) = 0LL;\n                  *(_OWORD *)(v11 + 456) = v20;\n                  *(_OWORD *)(v11 + 472) = *(_OWORD *)(v1 + 472);\n                  v21 = *(_BYTE *)(v1 + 566);\n                  *(_OWORD *)(v1 + 456) = 0LL;\n                  *(_OWORD *)(v1 + 472) = 0LL;\n                  *(_BYTE *)(v11 + 566) = v21;\n                  v22 = *(_QWORD *)(v1 + 568);\n                  *(_OWORD *)(v11 + 600) = *(_OWORD *)(v1 + 600);\n                  *(_QWORD *)(v11 + 568) = v22;\n                }\n                *(_DWORD *)(v1 + 28) = 2;\n              }\n            }\n            http_header_request_unset(v1, 28LL, \"HTTP2-Settings\", 14LL);\n            http_header_remove_token(v4, \"HTTP2-Settings\", 14LL);\n          }\n          http_header_request_unset(v1, 49LL, \"Upgrade\", 7LL);\n          http_header_remove_token(v4, \"Upgrade\", 7LL);\n          result = *(_DWORD *)(v1 + 28) == 2;\n        }\n      }\n      else\n      {\n        http_header_request_unset(a1, 49LL, \"Upgrade\", 7LL);\n        http_header_remove_token(v4, \"Upgrade\", 7LL);\n        result = 0LL;\n      }\n    }\n    else\n    {\n      http_header_request_unset(a1, 49LL, \"Upgrade\", 7LL);\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xf10dL", 
            "funcEndAddr": "0xf47dL", 
            "funcName": "h2_check_con_upgrade_h2c"
        }, 
        {
            "decompiledFuncCode": "void __fastcall request_config_set_defaults(__int64 a1)\n{\n  qword_2583A0 = a1;\n}\n", 
            "funcStartAddr": "0xf47dL", 
            "funcEndAddr": "0xf485L", 
            "funcName": "request_config_set_defaults"
        }, 
        {
            "decompiledFuncCode": "void __fastcall request_free_data(__int64 a1)\n{\n  __int64 v1; // rbx\n  signed int v2; // er12\n  __int64 i; // rbp\n  _QWORD *v4; // rdi\n\n  v1 = a1;\n  chunkqueue_reset(a1 + 736);\n  chunkqueue_reset(a1 + 624);\n  chunkqueue_reset(a1 + 680);\n  array_free_data(a1 + 240);\n  array_free_data(a1 + 536);\n  array_free_data(a1 + 392);\n  free(*(void **)(a1 + 456));\n  free(*(void **)(a1 + 472));\n  free(*(void **)(a1 + 264));\n  free(*(void **)(a1 + 280));\n  free(*(void **)(a1 + 296));\n  free(*(void **)(a1 + 312));\n  free(*(void **)(a1 + 360));\n  free(*(void **)(a1 + 328));\n  free(*(void **)(a1 + 344));\n  free(*(void **)(a1 + 376));\n  free(*(void **)(a1 + 488));\n  free(*(void **)(a1 + 504));\n  free(*(void **)(a1 + 40));\n  free(*(void **)(a1 + 64));\n  if ( *(_QWORD *)(a1 + 80) )\n  {\n    v2 = *(_DWORD *)(a1 + 800);\n    for ( i = 0LL; ; ++i )\n    {\n      v4 = *(_QWORD **)(v1 + 80);\n      if ( v2 <= (signed int)i )\n        break;\n      if ( v4[4 * i + 1] )\n        pcre2_match_data_free_8();\n    }\n    free(v4);\n    free(*(void **)(v1 + 72));\n  }\n}\n", 
            "funcStartAddr": "0xf485L", 
            "funcEndAddr": "0xf5c1L", 
            "funcName": "request_free_data"
        }, 
        {
            "decompiledFuncCode": "void request_pool_free()\n{\n  void *v0; // rbx\n  void *v1; // rdi\n\n  while ( 1 )\n  {\n    v0 = ptr;\n    if ( !ptr )\n      break;\n    v1 = ptr;\n    ptr = (void *)*((_QWORD *)ptr + 6);\n    request_free_data((__int64)v1);\n    free(v0);\n  }\n}\n", 
            "funcStartAddr": "0xf5c1L", 
            "funcEndAddr": "0xf5edL", 
            "funcName": "request_pool_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F5ED(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n\n  result = *a2;\n  switch ( (_DWORD)result )\n  {\n    case 0:\n      *(_BYTE *)(a1 + 4) = a2[2] != 0;\n      break;\n    case 1:\n      result = a2[2];\n      *(_DWORD *)a1 = result;\n      break;\n    case 2:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 16) = result;\n      break;\n    case 3:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 24) = result;\n      break;\n    case 4:\n      *(_BYTE *)(a1 + 7) = a2[2] != 0;\n      break;\n    case 5:\n      *(_BYTE *)(a1 + 5) = a2[2] != 0;\n      break;\n    case 6:\n      *(_BYTE *)(a1 + 6) = a2[2] != 0;\n      break;\n    case 7:\n      *(_BYTE *)(a1 + 8) = a2[2] != 0;\n      break;\n    default:\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xf5edL", 
            "funcEndAddr": "0xf649L", 
            "funcName": "sub_F5ED"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F649(const char **a1)\n{\n  const char *v1; // rbx\n  char v2; // al\n  char *v3; // rax\n  char *v4; // rax\n\n  v1 = *a1;\n  v2 = **a1;\n  if ( v2 == 91 )\n  {\n    v3 = strstr(*a1, \"]:\");\n    if ( !v3 )\n      return *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0);\n    v4 = v3 + 1;\n  }\n  else\n  {\n    if ( v2 == 47 )\n      return *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0);\n    v4 = strchr(*a1, 58);\n  }\n  if ( v4 )\n    return (unsigned int)((_DWORD)v4 - (_DWORD)v1);\n  return *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0);\n}\n", 
            "funcStartAddr": "0xf649L", 
            "funcEndAddr": "0xf69eL", 
            "funcName": "sub_F649"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_F69E(__int64 a1, void *a2, __int64 a3, _BYTE *a4, unsigned int a5)\n{\n  __int64 v6; // r9\n  const char **v7; // r13\n  __int16 v8; // ST0E_2\n  const char *v9; // rbx\n  char *v10; // rax\n  char *v11; // rax\n  bool v12; // zf\n  __int64 v13; // r9\n\n  if ( a5 <= 1 )\n  {\n    log_error(*(_QWORD *)(a1 + 112));\n    return 0xFFFFFFFFLL;\n  }\n  if ( *a4 == 47 )\n  {\n    v6 = *(_QWORD *)(a1 + 112);\n  }\n  else\n  {\n    v7 = *(const char ***)(a1 + 48);\n    v8 = *(_DWORD *)(a1 + 172);\n    buffer_copy_string_len(*(_QWORD *)(a1 + 48), a4, a5 - 1);\n    v9 = *v7;\n    if ( **v7 == 91 )\n    {\n      v10 = strchr(*v7, 93);\n      if ( v10 && (v12 = v10[1] == 58, *v10 = 0, v12) )\n        v11 = v10 + 1;\n      else\n        v11 = 0LL;\n      v9 = *v7 + 1;\n    }\n    else\n    {\n      v11 = strrchr(*v7, 58);\n    }\n    if ( v11 )\n    {\n      *v11 = 0;\n      if ( (unsigned int)strtol(v11 + 1, 0LL, 10) - 1 > 0xFFFE )\n      {\n        log_error(*(_QWORD *)(a1 + 112));\n        return 0xFFFFFFFFLL;\n      }\n    }\n    if ( *v9 == 42 && !v9[1] )\n      ++v9;\n    *v9;\n    v13 = *(_QWORD *)(a1 + 112);\n  }\n  return (unsigned int)-((unsigned int)sock_addr_from_str_hints(a2) != 1);\n}\n", 
            "funcStartAddr": "0xf69eL", 
            "funcEndAddr": "0xf81cL", 
            "funcName": "sub_F69E"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F81C(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rbx\n  int v4; // esi\n  void *v5; // rdi\n  __int64 v6; // rsi\n  void *v7; // rax\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v11; // [rsp+0h] [rbp-18h]\n\n  v2 = a2;\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 + 340);\n  if ( v4 == *(_DWORD *)(a1 + 336) )\n  {\n    v5 = *(void **)(a1 + 328);\n    v6 = (unsigned int)(v4 + 4);\n    *(_DWORD *)(v3 + 336) = v6;\n    v7 = realloc(v5, 8 * v6);\n    *(_QWORD *)(v3 + 328) = v7;\n    if ( !v7 )\n      ck_assert_failed(\"network.c\", 169LL, \"((void *)0) != srv->srv_sockets.ptr\");\n  }\n  v8 = *(unsigned int *)(v3 + 340);\n  v9 = *(_QWORD *)(v3 + 328);\n  *(_DWORD *)(v3 + 340) = v8 + 1;\n  *(_QWORD *)(v9 + 8 * v8) = v2;\n  return v11;\n}\n", 
            "funcStartAddr": "0xf81cL", 
            "funcEndAddr": "0xf891L", 
            "funcName": "sub_F81C"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_F891@<rax>(__int64 a1@<rdx>, __int16 a2@<cx>, __int64 a3@<rbp>, __int64 a4@<rdi>, _BYTE *a5@<rsi>, unsigned int a6@<r8d>, _BYTE *a7@<r13>, unsigned __int64 a8@<r15>)\n{\n  __int64 v8; // rbx\n  bool v9; // cf\n  bool v10; // zf\n  char **v11; // r14\n  unsigned int v12; // er12\n  __int64 v13; // rax\n  char v14; // al\n  signed __int64 v15; // rcx\n  unsigned __int16 *v16; // rdi\n  unsigned int v17; // eax\n  __int64 v18; // r9\n  unsigned __int8 v19; // al\n  const void *v20; // rdi\n  void *v21; // rax\n  void *v22; // rdi\n  __int64 v23; // rax\n  int v24; // edx\n  char *v25; // rsi\n  signed __int64 v26; // r8\n  signed __int64 v27; // ST28_8\n  __int64 v28; // r14\n  int v29; // eax\n  int v30; // eax\n  int v31; // eax\n  int v32; // eax\n  __int64 v33; // rdi\n  int v34; // edi\n  unsigned __int64 v35; // rt1\n  __int64 result; // rax\n  _BYTE **v37; // rax\n  _BYTE *v38; // rdx\n  int i; // esi\n  int v40; // eax\n  __int64 v41; // r9\n  signed int v42; // [rsp+Ch] [rbp-ECh]\n  size_t addr; // [rsp+10h] [rbp-E8h]\n  __int16 v44; // [rsp+18h] [rbp-E0h]\n  unsigned int v45; // [rsp+20h] [rbp-D8h]\n  unsigned int v46; // [rsp+24h] [rbp-D4h]\n  socklen_t len; // [rsp+38h] [rbp-C0h]\n  int optval; // [rsp+3Ch] [rbp-BCh]\n  unsigned __int16 v49; // [rsp+40h] [rbp-B8h]\n  unsigned __int64 v50; // [rsp+B8h] [rbp-40h]\n\n  v8 = a4;\n  v50 = __readfsqword(0x28u);\n  v9 = *(_DWORD *)(a1 + 8) < 1u;\n  v10 = *(_DWORD *)(a1 + 8) == 1;\n  v44 = a2;\n  len = 112;\n  if ( v9 || v10 )\n  {\n    v12 = -1;\n    log_error(*(_QWORD *)(a4 + 112));\n    goto LABEL_79;\n  }\n  a7 = a5;\n  v11 = (char **)a1;\n  v12 = a6;\n  a3 = *(unsigned int *)(a4 + 340);\n  a8 = 0LL;\n  while ( (unsigned int)a3 > (unsigned int)a8 )\n  {\n    v13 = *(_QWORD *)(*(_QWORD *)(a4 + 328) + 8 * a8++);\n    if ( (unsigned int)buffer_is_equal(*(_QWORD *)(v13 + 136), v11) )\n      goto LABEL_78;\n  }\n  a3 = (__int64)*v11;\n  v14 = **v11;\n  if ( a5[5] && (!v14 || v14 == 58) || v14 == 91 && *(_BYTE *)(a3 + 1) == 93 )\n    log_error(*(_QWORD *)(a4 + 112));\n  if ( *(_BYTE *)a3 == 91 )\n    a5[5] = 1;\n  v15 = 28LL;\n  v16 = &v49;\n  while ( v15 )\n  {\n    *(_DWORD *)v16 = 0;\n    v16 += 2;\n    --v15;\n  }\n  if ( v12 == -1 )\n  {\n    v18 = (unsigned __int8)a5[5];\n    if ( (unsigned int)sub_F69E(v8, &v49, (__int64)&len, *v11, *((_DWORD *)v11 + 2)) )\n      goto LABEL_79;\n  }\n  else\n  {\n    v17 = getsockname(v12, (struct sockaddr *)&v49, &len);\n    a8 = v17;\n    if ( v17 == -1 )\n    {\n      v12 = v17;\n      log_perror(*(_QWORD *)(v8 + 112));\n      goto LABEL_79;\n    }\n  }\n  v45 = v49;\n  if ( *(_BYTE *)a3 )\n  {\n    v42 = 0;\n    if ( v49 == 10 )\n    {\n      v42 = 1;\n      if ( !a5[6] )\n      {\n        log_error(*(_QWORD *)(v8 + 112));\n        v42 = 0;\n      }\n      goto LABEL_28;\n    }\n  }\n  else\n  {\n    v42 = 0;\n    if ( v49 == 10 )\n    {\nLABEL_28:\n      v19 = a5[8];\n      if ( v19 != -1 )\n        v42 = v19 < 1u ? 1 : -1;\n      goto LABEL_30;\n    }\n  }\nLABEL_30:\n  *((_DWORD *)v11 + 2) = 0;\n  sock_addr_stringify_append_buffer(v11, &v49);\n  if ( *(_BYTE *)(v8 + 193) )\n    goto LABEL_78;\n  a3 = *(unsigned int *)(v8 + 340);\n  a8 = 0LL;\n  while ( (unsigned int)a3 > (unsigned int)a8 )\n  {\n    v20 = *(const void **)(*(_QWORD *)(v8 + 328) + 8 * a8++);\n    if ( !memcmp(v20, &v49, 0x70uLL) )\n      goto LABEL_78;\n  }\n  a8 = (unsigned __int64)*v11;\n  v21 = calloc(1uLL, 0x90uLL);\n  a3 = (__int64)v21;\n  if ( !v21 )\n    ck_assert_failed(\"network.c\", 318LL, \"((void *)0) != srv_socket\");\n  v22 = v21;\n  __memcpy_chk(v21, &v49, len, 144LL);\n  *(_DWORD *)(a3 + 112) = -1;\n  *(_QWORD *)(a3 + 128) = v8;\n  *(_WORD *)(a3 + 118) = v44;\n  *(_BYTE *)(a3 + 116) = a5[4];\n  v23 = buffer_init(v22, &v49);\n  v24 = *((_DWORD *)v11 + 2);\n  v25 = *v11;\n  *(_QWORD *)(a3 + 136) = v23;\n  buffer_copy_string_len(v23, v25, v24 - (unsigned int)(v24 != 0));\n  *(_BYTE *)(a3 + 117) = sub_F649(*(const char ***)(a3 + 136));\n  sub_F81C(v8, a3);\n  if ( *(_DWORD *)(v8 + 88) )\n  {\nLABEL_78:\n    v12 = 0;\n    goto LABEL_79;\n  }\n  if ( *(_BYTE *)(v8 + 198) )\n  {\n    v26 = 0LL;\n    v46 = *(_DWORD *)(v8 + 356);\n    addr = len;\n    while ( v46 > (unsigned int)v26 )\n    {\n      v27 = v26;\n      v28 = *(_QWORD *)(*(_QWORD *)(v8 + 344) + 8 * v26);\n      v29 = memcmp((const void *)v28, (const void *)a3, addr);\n      v26 = v27 + 1;\n      if ( !v29 )\n      {\n        if ( *(_WORD *)(v28 + 118) == -1 )\n          *(_WORD *)(v28 + 118) = v44;\n        v12 = *(_DWORD *)(v28 + 112);\n        break;\n      }\n    }\n  }\n  if ( v12 == -1 )\n  {\n    if ( v45 == 1 )\n    {\n      if ( !a8 )\n        ck_assert_failed(\"network.c\", 355LL, \"host\");\n      v30 = fdevent_socket_cloexec(1LL, 1LL, 0LL);\n      *(_DWORD *)(a3 + 112) = v30;\n      if ( v30 == -1 )\n      {\n        log_perror(*(_QWORD *)(v8 + 112));\n        goto LABEL_79;\n      }\n      if ( !connect(v30, (const struct sockaddr *)a3, len) )\n      {\n        log_error(*(_QWORD *)(v8 + 112));\n        goto LABEL_79;\n      }\n      v31 = *__errno_location();\n      if ( v31 != 2 )\n      {\n        if ( v31 != 111 )\n        {\n          log_perror(*(_QWORD *)(v8 + 112));\n          goto LABEL_79;\n        }\n        unlink((const char *)a8);\n      }\n      if ( (unsigned int)fdevent_fcntl_set_nb(*(unsigned int *)(a3 + 112), a3) == -1 )\n      {\n        v12 = -1;\n        log_perror(*(_QWORD *)(v8 + 112));\n        goto LABEL_79;\n      }\n    }\n    else\n    {\n      v32 = fdevent_socket_nb_cloexec(v45, 1LL, 6LL);\n      *(_DWORD *)(a3 + 112) = v32;\n      if ( v32 == -1 )\n      {\n        log_perror(*(_QWORD *)(v8 + 112));\n        goto LABEL_79;\n      }\n      if ( v42 )\n      {\n        optval = v42 > 0;\n        if ( setsockopt(v32, 41, 26, &optval, 4u) == -1 )\n        {\n          log_perror(*(_QWORD *)(v8 + 112));\n          goto LABEL_79;\n        }\n      }\n    }\n  }\n  else\n  {\n    *(_DWORD *)(a3 + 112) = v12;\n    if ( (unsigned int)fdevent_fcntl_set_nb_cloexec(v12) == -1 )\n    {\n      v12 = -1;\n      log_perror(*(_QWORD *)(v8 + 112));\n      goto LABEL_79;\n    }\n  }\n  v33 = *(unsigned int *)(a3 + 112);\n  *(_DWORD *)(v8 + 84) = v33;\n  if ( (signed int)fdevent_set_so_reuseaddr(v33, 1LL) < 0 )\n  {\n    v12 = -1;\n    log_perror(*(_QWORD *)(v8 + 112));\n    goto LABEL_79;\n  }\n  if ( v45 != 1 && (signed int)fdevent_set_tcp_nodelay(*(unsigned int *)(a3 + 112), 1LL) < 0 )\n  {\n    v12 = -1;\n    log_perror(*(_QWORD *)(v8 + 112));\n    goto LABEL_79;\n  }\n  if ( v12 != -1 )\n  {\nLABEL_74:\n    if ( !a7[4] && a7[7] )\n    {\n      v34 = *(_DWORD *)(a3 + 112);\n      optval = (unsigned __int8)a7[7];\n      if ( setsockopt(v34, 6, 9, &optval, 4u) == -1 )\n        log_perror(*(_QWORD *)(v8 + 112));\n    }\n    goto LABEL_78;\n  }\n  if ( !bind(*(_DWORD *)(a3 + 112), (const struct sockaddr *)a3, len) )\n    goto LABEL_80;\n  log_perror(*(_QWORD *)(v8 + 112));\nLABEL_79:\n  while ( 1 )\n  {\n    v35 = __readfsqword(0x28u);\n    v8 = v35 ^ v50;\n    result = v12;\n    if ( v35 == v50 )\n      return result;\n    if ( v45 != 1 )\n      goto LABEL_92;\n    v37 = (_BYTE **)*((_QWORD *)a7 + 2);\n    if ( !v37 )\n      goto LABEL_92;\nLABEL_80:\n    v38 = *v37;\n    for ( i = 0; ; i = (v40 - 48) | 8 * i )\n    {\n      v40 = (char)*v38;\n      if ( !*v38 )\n        break;\n      ++v38;\n    }\n    if ( i && (v12 = chmod((const char *)a8, i), v12 == -1) )\n    {\n      v41 = **((_QWORD **)a7 + 2);\n      log_perror(*(_QWORD *)(v8 + 112));\n    }\n    else\n    {\nLABEL_92:\n      v12 = listen(*(_DWORD *)(a3 + 112), *(_DWORD *)a7);\n      if ( v12 != -1 )\n        goto LABEL_74;\n      log_perror(*(_QWORD *)(v8 + 112));\n    }\n  }\n}\n", 
            "funcStartAddr": "0xf891L", 
            "funcEndAddr": "0xffb2L", 
            "funcName": "sub_F891"
        }, 
        {
            "decompiledFuncCode": "unsigned int __fastcall network_socket_activation_to_env(__int64 a1)\n{\n  __int64 v1; // r12\n  unsigned int v2; // ebp\n  unsigned int v3; // ebx\n  unsigned int result; // eax\n  __int64 v5; // rdx\n  int v6; // edi\n  __int64 v7; // rax\n  signed __int64 v8; // rcx\n  __int64 v9; // rdx\n  __int64 v10; // rdi\n  __int64 v11; // rsi\n  __int64 v12; // rdi\n  int v13; // esi\n  __int64 v14; // rbx\n  __int64 v15; // rsi\n\n  v1 = a1;\n  v2 = 0;\n  v3 = 3;\n  while ( 1 )\n  {\n    result = *(_DWORD *)(v1 + 340);\n    if ( result <= v2 )\n      break;\n    v5 = *(_QWORD *)(v1 + 328);\n    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 8LL * v2) + 112LL);\n    if ( v6 >= (signed int)v3 )\n    {\n      if ( v6 == v3 )\n      {\n        v10 = v3++;\n        fdevent_clrfd_cloexec(v10);\n      }\n      else\n      {\n        v7 = result - 1 - v2;\n        v8 = v5 + 8LL * (v2 + 1);\n        v9 = 0LL;\n        while ( v9 != v7 )\n        {\n          v11 = *(_QWORD *)(v8 + 8 * v9++);\n          if ( *(_DWORD *)(v11 + 112) == v3 )\n          {\n            v12 = v3;\n            --v2;\n            ++v3;\n            fdevent_clrfd_cloexec(v12);\n            goto LABEL_12;\n          }\n        }\n        if ( dup2(v6, v3) == v3 )\n          ++v3;\n      }\n    }\nLABEL_12:\n    ++v2;\n  }\n  v13 = v3 - 3;\n  if ( v3 != 3 )\n  {\n    v14 = *(_QWORD *)(v1 + 48);\n    *(_DWORD *)(v14 + 8) = 0;\n    buffer_append_int(v14, v13);\n    setenv(\"LISTEN_FDS\", *(const char **)v14, 1);\n    v15 = *(signed int *)(v1 + 400);\n    *(_DWORD *)(v14 + 8) = 0;\n    buffer_append_int(v14, v15);\n    result = setenv(\"LISTEN_PID\", *(const char **)v14, 1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xffb2L", 
            "funcEndAddr": "0x10092L", 
            "funcName": "network_socket_activation_to_env"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall network_init(__int64 a1, unsigned int a2)\n{\n  unsigned __int64 v2; // r15\n  unsigned int v3; // er12\n  __int64 v4; // rbx\n  signed __int64 v5; // rcx\n  char *v6; // rdi\n  const char *v7; // rsi\n  unsigned __int64 v8; // rdi\n  unsigned int *v9; // rcx\n  int *v10; // r8\n  __int64 v11; // rcx\n  unsigned int v12; // edx\n  __int64 v13; // rax\n  __int64 v14; // rcx\n  int v15; // er14\n  const char *v16; // rdi\n  char *v17; // r13\n  char *v18; // rax\n  const char *v19; // rcx\n  struct sockaddr *addr; // ST00_8\n  int v21; // eax\n  int v22; // er15\n  _DWORD *v23; // r14\n  signed __int64 v24; // r13\n  __pid_t v25; // er14\n  unsigned int v26; // eax\n  unsigned int v27; // eax\n  signed __int64 i; // r13\n  int *v29; // r13\n  __int64 v30; // rax\n  __int64 v31; // r14\n  __int64 v32; // rcx\n  char *v33; // rax\n  int v34; // er9\n  char *v35; // r8\n  __int64 v36; // rcx\n  __int128 *v37; // r8\n  unsigned int *v38; // rcx\n  __int64 v39; // rcx\n  unsigned int v40; // eax\n  unsigned int v41; // er8\n  _BYTE *v42; // rcx\n  unsigned int v43; // eax\n  _QWORD *v44; // r12\n  __int64 v45; // rax\n  __int64 v46; // r12\n  unsigned int j; // er13\n  _DWORD *v48; // rax\n  __int64 v49; // rbp\n  _DWORD *v50; // rdi\n  _DWORD *v51; // rsi\n  signed __int64 k; // rcx\n  __int64 *v53; // r12\n  __int64 v54; // rax\n  int v55; // edx\n  __int64 v56; // rsi\n  int v58; // [rsp+8h] [rbp-160h]\n  int v59; // [rsp+2Ch] [rbp-13Ch]\n  int v60; // [rsp+30h] [rbp-138h]\n  int v61; // [rsp+34h] [rbp-134h]\n  __int64 v62; // [rsp+38h] [rbp-130h]\n  char v63; // [rsp+50h] [rbp-118h]\n  int v64; // [rsp+54h] [rbp-114h]\n  void *ptr; // [rsp+58h] [rbp-110h]\n  int v66; // [rsp+68h] [rbp-100h]\n  int v67; // [rsp+6Dh] [rbp-FBh]\n  __int128 v68; // [rsp+78h] [rbp-F0h]\n  __int128 v69; // [rsp+88h] [rbp-E0h]\n  __int128 v70; // [rsp+98h] [rbp-D0h]\n  char v71; // [rsp+B0h] [rbp-B8h]\n  unsigned __int64 v72; // [rsp+128h] [rbp-40h]\n\n  v2 = 0xFFFFFFFFLL;\n  v3 = a2;\n  v4 = a1;\n  v72 = __readfsqword(0x28u);\n  if ( !(unsigned int)network_write_init() )\n  {\n    v5 = 22LL;\n    v6 = &v63;\n    v7 = &v63;\n    while ( v5 )\n    {\n      *(_DWORD *)v6 = 0;\n      v6 += 4;\n      --v5;\n    }\n    v8 = v4;\n    if ( !(unsigned int)config_plugin_values_init(v4, &v63, &off_2561E0, \"network\") )\n    {\n      LODWORD(v2) = 4;\n      return (unsigned int)v2;\n    }\n    v66 = 1024;\n    v67 = -16776960;\n    if ( v64 > 0 )\n    {\n      if ( *((_DWORD *)ptr + 3) )\n      {\n        v9 = (unsigned int *)((char *)ptr + 16 * *((unsigned int *)ptr + 2));\n        if ( *v9 != -1 )\n        {\n          v10 = &v66;\n          do\n          {\n            v7 = (const char *)v9;\n            v8 = (unsigned __int64)v10;\n            sub_F5ED((__int64)v10, v9);\n            v9 = (unsigned int *)(v11 + 16);\n          }\n          while ( *v9 != -1 );\n        }\n      }\n    }\n    if ( *(_BYTE *)(v4 + 198) )\n    {\n      v12 = *(_DWORD *)(v4 + 356);\n      v13 = 0LL;\n      while ( v12 > (unsigned int)v13 )\n      {\n        v14 = *(_QWORD *)(*(_QWORD *)(v4 + 344) + 8 * v13++);\n        *(_WORD *)(v14 + 118) = -1;\n      }\n      v15 = 0;\n      v16 = \"LISTEN_FDS\";\n      v17 = getenv(\"LISTEN_PID\");\n      v18 = getenv(\"LISTEN_FDS\");\n      v19 = v18;\n      if ( v17 )\n      {\n        v7 = 0LL;\n        v16 = v17;\n        addr = (struct sockaddr *)v18;\n        v21 = strtoul(v17, 0LL, 10);\n        v19 = (const char *)addr;\n        v15 = v21;\n      }\n      v22 = 0;\n      if ( v19 )\n      {\n        v7 = 0LL;\n        v16 = v19;\n        v22 = strtol(v19, 0LL, 10);\n      }\n      if ( (unsigned int)(v22 - 1) <= 0x1386\n        && (getpid() == v15\n         || (v7 = \"parent:\", !strncmp(v17, \"parent:\", 7uLL))\n         && (v16 = v17 + 7, v25 = getppid(), v7 = 0LL, v25 == (unsigned int)strtoul(v17 + 7, 0LL, 10))) )\n      {\n        v23 = (_DWORD *)buffer_init(v16, v7);\n        v24 = 3LL;\n        v58 = v22 + 3;\n        while ( 1 )\n        {\n          v60 = 112;\n          v27 = getsockname(v24, (struct sockaddr *)&v71, (socklen_t *)&v60);\n          v2 = v27;\n          if ( v27 == -1 )\n            break;\n          v23[2] = 0;\n          sock_addr_stringify_append_buffer(v23, &v71);\n          v7 = (const char *)&v66;\n          v26 = sub_F891((__int64)v23, 0, (__int64)&v63, v4, &v66, v24, (_BYTE *)v24, v2);\n          v2 = v26;\n          if ( !v26 )\n          {\n            v24 = (unsigned int)(v24 + 1);\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 8LL * (unsigned int)(*(_DWORD *)(v4 + 340) - 1)) + 118LL) = -1;\n            if ( v58 > (signed int)v24 )\n              continue;\n          }\n          goto LABEL_30;\n        }\n        v7 = \"network.c\";\n        log_perror(*(_QWORD *)(v4 + 112));\nLABEL_30:\n        buffer_free(v23);\n        *(_OWORD *)(v4 + 344) = *(_OWORD *)(v4 + 328);\n        *(_OWORD *)(v4 + 328) = 0LL;\n      }\n      else\n      {\n        v2 = 0LL;\n      }\n      unsetenv(\"LISTEN_PID\");\n      unsetenv(\"LISTEN_FDS\");\n      v8 = (unsigned __int64)\"LISTEN_FDNAMES\";\n      unsetenv(\"LISTEN_FDNAMES\");\n      if ( (_DWORD)v2 )\n        goto LABEL_65;\n      if ( !*(_DWORD *)(v4 + 356) )\n        *(_BYTE *)(v4 + 198) = 0;\n    }\n    if ( v3 != -1 )\n    {\n      v29 = (int *)buffer_init(v8, v7);\n      v30 = *(_QWORD *)(v4 + 208);\n      v7 = *(const char **)v30;\n      buffer_copy_string_len(v29, *(const char **)v30, *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0));\n      if ( *(_DWORD *)(v4 + 340) )\n      {\n        v2 = (unsigned int)close(v3);\n      }\n      else\n      {\n        v7 = (const char *)&v66;\n        v2 = (unsigned int)sub_F891((__int64)v29, 0, (__int64)&v63, v4, &v66, v3, v29, v2);\n      }\n      v8 = (unsigned __int64)v29;\n      buffer_free(v29);\n      if ( (_DWORD)v2 )\n      {\nLABEL_65:\n        free(ptr);\n        return (unsigned int)v2;\n      }\n    }\n    for ( i = 1LL; *(_DWORD *)(*(_QWORD *)(v4 + 8) + 16LL) > (unsigned int)i; i = (unsigned int)(i + 1) )\n    {\n      v8 = (unsigned __int64)&v60;\n      v7 = (const char *)(unsigned int)i;\n      config_get_config_cond_info(&v60, (unsigned int)i);\n      if ( v60 == 1 )\n      {\n        v31 = v62;\n        v69 = *(_OWORD *)&v66;\n        v8 = (unsigned int)v64;\n        v70 = v68;\n        v32 = 0LL;\n        v7 = (const char *)(*((_DWORD *)ptr + 3) == 0);\n        v33 = (char *)ptr + 16 * (_QWORD)v7;\n        while ( v64 > (signed int)v7 )\n        {\n          v34 = *(_DWORD *)&v33[v32];\n          v35 = &v33[v32];\n          v32 += 16LL;\n          if ( v34 == (_DWORD)i )\n          {\n            v36 = *((unsigned int *)v35 + 2);\n            v37 = &v69;\n            v38 = (unsigned int *)((char *)ptr + 16 * v36);\n            do\n            {\n              v7 = (const char *)v38;\n              v8 = (unsigned __int64)v37;\n              sub_F5ED((__int64)v37, v38);\n              v38 = (unsigned int *)(v39 + 16);\n            }\n            while ( *v38 != -1 );\n            break;\n          }\n          v7 = (const char *)(unsigned int)((_DWORD)v7 + 1);\n        }\n        if ( v61 == 1 )\n        {\n          v7 = (const char *)&v69;\n          v8 = v4;\n          v40 = sub_F891(v31, i, (__int64)&v63, v4, &v69, 0xFFFFFFFF, (_BYTE *)i, v2);\n          v2 = v40;\n          if ( v40 )\n            goto LABEL_65;\n        }\n        else if ( v61 == 3 )\n        {\n          v41 = *(_DWORD *)(v31 + 8);\n          v42 = *(_BYTE **)v31;\n          v59 = 112;\n          v43 = sub_F69E(v4, &v71, (__int64)&v59, v42, v41);\n          v2 = v43;\n          if ( v43 )\n            goto LABEL_65;\n          v7 = &v71;\n          *(_DWORD *)(v31 + 8) = 0;\n          v8 = v31;\n          sock_addr_stringify_append_buffer(v31, &v71);\n        }\n      }\n    }\n    if ( *(_BYTE *)(v4 + 198) )\n    {\n      if ( !*(_QWORD *)(v4 + 208) )\n        goto LABEL_67;\n      if ( v3 != -1 )\n        goto LABEL_73;\n    }\n    else if ( v3 != -1 )\n    {\n      goto LABEL_72;\n    }\n    v44 = (_QWORD *)buffer_init(v8, v7);\n    v45 = *(_QWORD *)(v4 + 208);\n    if ( v45 )\n      buffer_copy_string_len(v44, *(_QWORD *)v45, *(_DWORD *)(v45 + 8) - (unsigned int)(*(_DWORD *)(v45 + 8) != 0));\n    if ( !*v44 || *(_BYTE *)*v44 != 47 )\n    {\n      buffer_append_string_len(v44, \":\", 1LL);\n      buffer_append_int(v44, *(unsigned __int16 *)(v4 + 172));\n    }\n    LODWORD(v2) = sub_F891((__int64)v44, 0, (__int64)&v63, v4, &v66, 0xFFFFFFFF, (_BYTE *)i, v2);\n    buffer_free(v44);\n    if ( (_DWORD)v2 )\n      goto LABEL_65;\nLABEL_67:\n    if ( !*(_BYTE *)(v4 + 198) )\n    {\nLABEL_72:\n      LODWORD(v2) = 0;\n      goto LABEL_65;\n    }\nLABEL_73:\n    for ( j = 0; *(_DWORD *)(v4 + 356) > j; ++j )\n    {\n      v46 = *(_QWORD *)(*(_QWORD *)(v4 + 344) + 8LL * j);\n      if ( *(_WORD *)(v46 + 118) == -1 )\n      {\n        *(_WORD *)(v46 + 118) = 0;\n        v48 = calloc(1uLL, 0x90uLL);\n        v49 = (__int64)v48;\n        if ( !v48 )\n          ck_assert_failed(\"network.c\", 764LL, \"((void *)0) != srv_socket\");\n        v50 = v48;\n        v51 = (_DWORD *)v46;\n        for ( k = 36LL; k; --k )\n        {\n          *v50 = *v51;\n          ++v51;\n          ++v50;\n        }\n        v53 = (__int64 *)*((_QWORD *)v48 + 17);\n        v54 = buffer_init(v50, v51);\n        v55 = *((_DWORD *)v53 + 2);\n        v56 = *v53;\n        *(_QWORD *)(v49 + 136) = v54;\n        buffer_copy_string_len(v54, v56, v55 - (unsigned int)(v55 != 0));\n        *(_BYTE *)(v49 + 117) = sub_F649(*(const char ***)(v49 + 136));\n        sub_F81C(v4, v49);\n      }\n    }\n    goto LABEL_72;\n  }\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0x10092L", 
            "funcEndAddr": "0x106d6L", 
            "funcName": "network_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall network_unregister_sock(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a2 + 120);\n  if ( v2 )\n  {\n    fdevent_fdnode_event_del(*(_QWORD *)(a1 + 24));\n    result = fdevent_unregister(*(_QWORD *)(a1 + 24), *(unsigned int *)(v2 + 16));\n    *(_QWORD *)(a2 + 120) = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x106d6L", 
            "funcEndAddr": "0x10710L", 
            "funcName": "network_unregister_sock"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall network_close(__int64 a1)\n{\n  unsigned int v1; // er12\n  __int64 v2; // rbx\n  _QWORD *v3; // rdi\n  __int64 v4; // rbp\n  unsigned int v5; // ebp\n  _QWORD *v6; // rdi\n  __int64 v7; // r12\n  int v8; // edi\n\n  v1 = 0;\n  v2 = a1;\n  while ( 1 )\n  {\n    v3 = *(_QWORD **)(v2 + 328);\n    if ( *(_DWORD *)(v2 + 340) <= v1 )\n      break;\n    v4 = v3[v1];\n    if ( *(_DWORD *)(v4 + 112) != -1 )\n    {\n      network_unregister_sock(v2, v4);\n      close(*(_DWORD *)(v4 + 112));\n    }\n    ++v1;\n    buffer_free(*(void **)(v4 + 136));\n    free((void *)v4);\n  }\n  free(v3);\n  v5 = 0;\n  *(_QWORD *)(v2 + 328) = 0LL;\n  *(_QWORD *)(v2 + 336) = 0LL;\n  while ( 1 )\n  {\n    v6 = *(_QWORD **)(v2 + 344);\n    if ( *(_DWORD *)(v2 + 356) <= v5 )\n      break;\n    v7 = v6[v5];\n    v8 = *(_DWORD *)(v7 + 112);\n    if ( v8 != -1 && *(_WORD *)(v7 + 118) != -1 )\n      close(v8);\n    ++v5;\n    buffer_free(*(void **)(v7 + 136));\n    free((void *)v7);\n  }\n  free(v6);\n  *(_QWORD *)(v2 + 344) = 0LL;\n  *(_QWORD *)(v2 + 352) = 0LL;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x10710L", 
            "funcEndAddr": "0x107e8L", 
            "funcName": "network_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall network_register_fdevents(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 result; // rax\n  unsigned int v3; // ebp\n  __int64 v4; // rdx\n  __int64 v5; // r12\n  __int64 v6; // rax\n  __int64 v7; // rdi\n\n  v1 = a1;\n  result = fdevent_reset(*(_QWORD *)(a1 + 24));\n  if ( (_DWORD)result != -1 )\n  {\n    v3 = 0;\n    if ( !*(_DWORD *)(a1 + 88) )\n    {\n      while ( *(_DWORD *)(v1 + 340) > v3 )\n      {\n        v4 = v3++;\n        v5 = *(_QWORD *)(*(_QWORD *)(v1 + 328) + 8 * v4);\n        v6 = fdevent_register(*(_QWORD *)(v1 + 24), *(unsigned int *)(v5 + 112), sub_25430, v5);\n        v7 = *(_QWORD *)(v1 + 24);\n        *(_QWORD *)(v5 + 120) = v6;\n        fdevent_fdnode_event_set(v7, v6, 1LL);\n      }\n    }\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x107e8L", 
            "funcEndAddr": "0x10861L", 
            "funcName": "network_register_fdevents"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_10861(__int64 a1, char a2)\n{\n  int v2; // eax\n\n  v2 = *__errno_location();\n  if ( v2 != 11 )\n  {\n    if ( v2 > 11 )\n    {\n      if ( v2 == 32 || v2 == 104 )\n        return 4294967294LL;\n      goto LABEL_8;\n    }\n    if ( v2 != 4 )\n    {\nLABEL_8:\n      log_perror(a2);\n      return 0xFFFFFFFFLL;\n    }\n  }\n  return 4294967293LL;\n}\n", 
            "funcStartAddr": "0x10861L", 
            "funcEndAddr": "0x108c0L", 
            "funcName": "sub_10861"
        }, 
        {
            "decompiledFuncCode": "int __fastcall network_write_init(_QWORD *a1)\n{\n  const char **v1; // rax\n  const char *v2; // r12\n  __int64 i; // rbp\n  const char *v4; // rsi\n  int result; // eax\n  unsigned int v6; // edx\n  int v7[2]; // [rsp+0h] [rbp-A8h]\n  const char *v8; // [rsp+8h] [rbp-A0h]\n  int v9; // [rsp+10h] [rbp-98h]\n  const char *v10; // [rsp+18h] [rbp-90h]\n  int v11; // [rsp+20h] [rbp-88h]\n  void *v12; // [rsp+28h] [rbp-80h]\n  int v13; // [rsp+30h] [rbp-78h]\n  const char *v14; // [rsp+38h] [rbp-70h]\n  int v15; // [rsp+40h] [rbp-68h]\n  const char *v16; // [rsp+48h] [rbp-60h]\n  int v17; // [rsp+50h] [rbp-58h]\n  const char *v18; // [rsp+58h] [rbp-50h]\n  int v19; // [rsp+60h] [rbp-48h]\n  __int64 v20; // [rsp+68h] [rbp-40h]\n  unsigned __int64 v21; // [rsp+78h] [rbp-30h]\n\n  v21 = __readfsqword(0x28u);\n  v7[0] = 3;\n  v9 = 3;\n  v11 = 3;\n  v13 = 3;\n  v8 = \"sendfile\";\n  v15 = 2;\n  v17 = 1;\n  v19 = 0;\n  v10 = \"linux-sendfile\";\n  v20 = 0LL;\n  v12 = &unk_41F13;\n  v14 = \"solaris-sendfilev\";\n  v16 = \"writev\";\n  v18 = \"write\";\n  v1 = (const char **)a1[30];\n  if ( v1 )\n  {\n    v2 = *v1;\n    for ( i = 0LL; ; ++i )\n    {\n      v4 = (&v8)[2 * i];\n      if ( !v4 )\n      {\n        log_error(a1[14]);\n        goto LABEL_13;\n      }\n      result = strcmp(v2, v4);\n      if ( !result )\n        break;\n    }\n    v6 = v7[4 * i];\n    if ( v6 >= 1 )\n    {\n      if ( v6 <= 2 )\n      {\n        a1[4] = &loc_25880;\n        return result;\n      }\n      if ( v6 == 3 )\n        goto LABEL_10;\n    }\nLABEL_13:\n    result = -1;\n  }\n  else\n  {\nLABEL_10:\n    a1[4] = sub_25910;\n    result = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x108c0L", 
            "funcEndAddr": "0x10a15L", 
            "funcName": "network_write_init"
        }, 
        {
            "decompiledFuncCode": "const char *network_write_show_handlers()\n{\n  return \"\\n\"\n         \"Network handler:\\n\"\n         \"\\n\"\n         \"\\t+ linux-sendfile\\n\"\n         \"\\t- freebsd-sendfile\\n\"\n         \"\\t- darwin-sendfile\\n\"\n         \"\\t- solaris-sendfilev\\n\"\n         \"\\t+ writev\\n\"\n         \"\\t+ write\\n\"\n         \"\\t- mmap support\\n\";\n}\n", 
            "funcStartAddr": "0x10a15L", 
            "funcEndAddr": "0x10a1dL", 
            "funcName": "network_write_show_handlers"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_10A1D(__int64 a1)\n{\n  void *v1; // rdi\n\n  free(*(void **)(a1 + 72));\n  v1 = *(void **)(a1 + 88);\n  if ( v1 )\n    free(v1);\n}\n", 
            "funcStartAddr": "0x10a1dL", 
            "funcEndAddr": "0x10a3bL", 
            "funcName": "sub_10A1D"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_10A3B(__int64 a1)\n{\n  close(*(_DWORD *)(a1 + 60));\n  free(*(void **)(a1 + 64));\n}\n", 
            "funcStartAddr": "0x10a3bL", 
            "funcEndAddr": "0x10a51L", 
            "funcName": "sub_10A3B"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall fdevent_config(const char **a1, char a2)\n{\n  const char *v2; // rbx\n  __int64 v3; // r13\n  signed __int64 result; // rax\n  __int64 v5; // rbp\n  const char *v6; // rdi\n\n  v2 = *a1;\n  if ( !*a1 || !strcmp(*a1, \"libev\") )\n  {\n    *a1 = (const char *)&unk_46126;\n    result = 3LL;\n  }\n  else\n  {\n    if ( !strcmp(v2, \"select\") )\n      v2 = \"poll\";\n    v3 = 0LL;\n    while ( 1 )\n    {\n      v5 = (unsigned int)v3;\n      v6 = (const char *)off_256848[2 * v3];\n      if ( !v6 )\n        break;\n      ++v3;\n      if ( !strcmp(v6, v2) )\n      {\n        result = *((unsigned int *)&unk_256840 + 4 * v5);\n        if ( (_DWORD)result )\n          return result;\n        break;\n      }\n    }\n    log_error(a2);\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x10a51L", 
            "funcEndAddr": "0x10b16L", 
            "funcName": "fdevent_config"
        }, 
        {
            "decompiledFuncCode": "const char *fdevent_show_event_handlers()\n{\n  return \"\\n\"\n         \"Event Handlers:\\n\"\n         \"\\n\"\n         \"\\t- select (generic)\\n\"\n         \"\\t+ poll (Unix)\\n\"\n         \"\\t+ epoll (Linux)\\n\"\n         \"\\t- /dev/poll (Solaris)\\n\"\n         \"\\t- eventports (Solaris)\\n\"\n         \"\\t- kqueue (FreeBSD)\\n\"\n         \"\\t- libev (generic)\\n\";\n}\n", 
            "funcStartAddr": "0x10b16L", 
            "funcEndAddr": "0x10b1eL", 
            "funcName": "fdevent_show_event_handlers"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall fdevent_init(__int64 a1, signed int *a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r15\n  signed int *v5; // r14\n  __int64 v6; // r12\n  signed int v7; // ebp\n  __int64 v8; // rsi\n  _QWORD *v9; // rbx\n  int v10; // er13\n  _QWORD *v11; // rax\n  unsigned int v12; // er14\n  void *v13; // rax\n  void *v14; // rdi\n  int v15; // eax\n  void *v16; // rax\n  void *v17; // rdi\n  __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a2;\n  v6 = a4;\n  v7 = *a2;\n  v19 = a1;\n  if ( !v7 )\n    v7 = 4096;\n  v8 = a4;\n  v9 = 0LL;\n  v10 = fdevent_config((const char **)&v19, a4);\n  if ( v10 > 0 )\n  {\n    fdevent_socket_nb_cloexec_init(&v19, v8);\n    *v5 = v7;\n    v11 = calloc(1uLL, 0x88uLL);\n    v12 = v7 + 1;\n    v9 = v11;\n    if ( !v11 )\n      ck_assert_failed(\"fdevent_impl.c\", 204LL, \"((void *)0) != ev\");\n    v11[5] = v6;\n    v11[6] = v4;\n    v11[15] = v19;\n    v13 = calloc(v12, 8uLL);\n    *v9 = v13;\n    if ( v13 )\n    {\n      *((_DWORD *)v9 + 14) = v12;\n      if ( v10 == 2 )\n      {\n        *((_DWORD *)v9 + 32) = 2;\n        v9[2] = &loc_27F20;\n        v9[3] = sub_27E70;\n        v9[4] = sub_27E00;\n        v9[14] = sub_10A1D;\n      }\n      else if ( v10 != 3\n             || (*((_DWORD *)v9 + 32) = 3,\n                 v9[2] = sub_28080,\n                 v9[3] = sub_28060,\n                 v9[4] = &loc_28000,\n                 v9[14] = sub_10A3B,\n                 v15 = epoll_create1(0x80000),\n                 *((_DWORD *)v9 + 15) = v15,\n                 v15 == -1) )\n      {\n        free((void *)*v9);\n        v17 = v9;\n        v9 = 0LL;\n        free(v17);\n        log_error(v6);\n      }\n      else\n      {\n        v16 = malloc(12LL * *((unsigned int *)v9 + 14));\n        v9[8] = v16;\n        if ( !v16 )\n          ck_assert_failed(\"fdevent_impl.c\", 424LL, \"((void *)0) != ev->epoll_events\");\n      }\n    }\n    else\n    {\n      log_error(v6);\n      v14 = v9;\n      v9 = 0LL;\n      free(v14);\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x10b1eL", 
            "funcEndAddr": "0x10cf7L", 
            "funcName": "fdevent_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_free(void *ptr)\n{\n  _DWORD *v1; // rbx\n  void (*v2)(void); // rax\n  unsigned int i; // ebp\n  _QWORD *v4; // rdi\n  __int64 v5; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    v2 = (void (*)(void))*((_QWORD *)ptr + 14);\n    if ( v2 )\n      v2();\n    for ( i = 0; ; ++i )\n    {\n      v4 = *(_QWORD **)v1;\n      if ( v1[14] <= i )\n        break;\n      v5 = v4[i];\n      if ( v5 )\n        free((void *)(v5 & 0xFFFFFFFFFFFFFFFCLL));\n    }\n    free(v4);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x10cf7L", 
            "funcEndAddr": "0x10d43L", 
            "funcName": "fdevent_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_reset(_QWORD *a1)\n{\n  unsigned int v1; // ebp\n  __int64 (*v2)(void); // rax\n\n  v1 = 0;\n  v2 = (__int64 (*)(void))a1[13];\n  if ( v2 )\n  {\n    v1 = v2();\n    if ( v1 == -1 )\n    {\n      a1[15];\n      log_error(a1[5]);\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x10d43L", 
            "funcEndAddr": "0x10d94L", 
            "funcName": "fdevent_reset"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_10D94(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  free(*(void **)ptr);\n  free(*((void **)ptr + 13));\n  array_free(*((void **)ptr + 19));\n  vector_free(*((void **)ptr + 16));\n  v2 = (void *)*((_QWORD *)ptr + 8);\n  v1[16] = 0LL;\n  v1[18] = 0LL;\n  v1[17] = 0LL;\n  free(v2);\n  if ( v1[10] )\n    pcre2_code_free_8();\n  free(v1);\n}\n", 
            "funcStartAddr": "0x10d94L", 
            "funcEndAddr": "0x10e02L", 
            "funcName": "sub_10D94"
        }, 
        {
            "decompiledFuncCode": "_QWORD *data_config_init()\n{\n  _QWORD *v0; // rax\n  _QWORD *v1; // rbx\n\n  v0 = calloc(1uLL, 0xA0uLL);\n  if ( !v0 )\n    ck_assert_failed(\"data_config.c\", 68LL, \"ds\");\n  v1 = v0;\n  v0[15] = \"\";\n  v0[19] = array_init(4LL, 160LL);\n  v1[16] = 0LL;\n  v1[18] = 0LL;\n  v1[17] = 0LL;\n  v1[2] = &off_256880;\n  *((_DWORD *)v1 + 6) = 3;\n  return v1;\n}\n", 
            "funcStartAddr": "0x10e02L", 
            "funcEndAddr": "0x10e86L", 
            "funcName": "data_config_init"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_10E86(__int64 a1)\n{\n  _QWORD *v1; // rax\n  _QWORD *v2; // rbp\n  int v3; // eax\n\n  v1 = data_config_init();\n  v2 = v1;\n  *((_DWORD *)v1 + 8) = *(_DWORD *)(a1 + 32);\n  v3 = *(_DWORD *)(a1 + 8);\n  if ( v3 )\n  {\n    buffer_copy_string_len(v2, *(_QWORD *)a1, (unsigned int)(v3 - 1));\n    v2[15] = *v2 + *(_QWORD *)(a1 + 120) - *(_QWORD *)a1;\n  }\n  buffer_copy_string_len(\n    v2 + 13,\n    *(_QWORD *)(a1 + 104),\n    *(_DWORD *)(a1 + 112) - (unsigned int)(*(_DWORD *)(a1 + 112) != 0));\n  array_copy_array(v2[19], *(_QWORD *)(a1 + 152));\n  return v2;\n}\n", 
            "funcStartAddr": "0x10e86L", 
            "funcEndAddr": "0x10ef4L", 
            "funcName": "sub_10E86"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall data_config_pcre_compile(__int64 a1, int a2, char a3)\n{\n  char v3; // r12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // esi\n  __int64 v7; // rdi\n  __int64 v8; // rax\n  __int64 v9; // ST00_8\n  unsigned int v10; // ebp\n  unsigned int v11; // eax\n  __int64 v12; // r9\n  unsigned int v13; // eax\n  __int64 v14; // r9\n  __int64 v15; // r8\n  unsigned int v17; // [rsp+0h] [rbp-448h]\n  unsigned int v18; // [rsp+4h] [rbp-444h]\n  __int64 v19; // [rsp+8h] [rbp-440h]\n  char v20; // [rsp+10h] [rbp-438h]\n  unsigned __int64 v21; // [rsp+418h] [rbp-30h]\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = *(_DWORD *)(a1 + 72);\n  v7 = *(_QWORD *)(a1 + 64);\n  v21 = __readfsqword(0x28u);\n  v8 = pcre2_compile_8(v7, v6 - (unsigned int)(v6 != 0), 0x80000LL, &v17, &v19, 0LL);\n  *(_QWORD *)(v5 + 80) = v8;\n  if ( v8 )\n  {\n    if ( v4 )\n    {\n      v11 = pcre2_jit_compile_8(v8, 1LL);\n      v17 = v11;\n      if ( v11 )\n      {\n        if ( v11 != -45 )\n        {\n          pcre2_get_error_message_8(v11, &v20, 1024LL);\n          v12 = *(_QWORD *)(v5 + 64);\n          log_error(v3);\n        }\n      }\n    }\n    v13 = pcre2_pattern_info_8(*(_QWORD *)(v5 + 80), 4LL, &v18);\n    v10 = v13;\n    v17 = v13;\n    if ( v13 )\n    {\n      v10 = 0;\n      pcre2_get_error_message_8(v13, &v20, 1024LL);\n      v14 = *(_QWORD *)(v5 + 64);\n      log_error(v3);\n    }\n    else if ( v18 <= 9 )\n    {\n      v10 = 1;\n    }\n    else\n    {\n      v15 = *(_QWORD *)(v5 + 64);\n      log_error(v3);\n    }\n  }\n  else\n  {\n    pcre2_get_error_message_8(v17, &v20, 1024LL);\n    v9 = *(_QWORD *)(v5 + 64);\n    v10 = 0;\n    log_error(v3);\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x10ef4L", 
            "funcEndAddr": "0x11098L", 
            "funcName": "data_config_pcre_compile"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_11098(__int64 a1, int a2)\n{\n  void *v2; // rdx\n  char result; // al\n\n  v2 = (void *)buffer_extend(a1, 4 * a2);\n  result = 32;\n  memset(v2, 32, 4 * a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x11098L", 
            "funcEndAddr": "0x110baL", 
            "funcName": "sub_11098"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_110BA(__int64 a1, __int64 a2, int a3)\n{\n  unsigned int v3; // er13\n  __int64 v4; // rbp\n  __int64 v5; // rbx\n  int v6; // er12\n  __int64 result; // rax\n  _BYTE *v8; // rax\n  char *v9; // rcx\n  unsigned int v10; // edx\n  __int64 v11; // rsi\n  char v12; // di\n  __int64 v13; // rsi\n  unsigned int v14; // ecx\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rdx\n  unsigned int v19; // er14\n  int v20; // eax\n  unsigned int v21; // eax\n  unsigned int v22; // er13\n  __int64 v23; // r15\n  int v24; // eax\n  int v25; // eax\n  __int64 v26; // r14\n  __int64 v27; // rdx\n  int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // r15\n  int v31; // eax\n  unsigned int v32; // er15\n  __int64 v33; // rdx\n  __int64 v34; // ST10_8\n  const char *v35; // rsi\n  unsigned int v36; // er13\n  unsigned int v37; // er12\n  __int64 v38; // rdx\n  unsigned int v39; // [rsp+0h] [rbp-48h]\n  unsigned int v40; // [rsp+0h] [rbp-48h]\n  unsigned int i; // [rsp+8h] [rbp-40h]\n\n  v3 = a3 + 1;\n  v4 = a1;\n  v5 = a2;\n  v6 = a3;\n  while ( 1 )\n  {\n    result = *(unsigned int *)(v4 + 24);\n    if ( (_DWORD)result == 1 )\n    {\n      v14 = *(_DWORD *)(v4 + 48);\n      if ( v14 <= 5 )\n      {\n        if ( !v14 )\n        {\nLABEL_60:\n          v36 = 0;\n          v37 = v6 + 1;\n          buffer_append_string(v5, \"(\");\n          while ( v36 < *(_DWORD *)(v4 + 48) )\n          {\n            if ( v36 )\n              buffer_append_string(v5, \", \");\n            v38 = v36++;\n            sub_110BA(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v38), v5, v37);\n          }\n          return buffer_append_string(v5, \")\");\n        }\n        v15 = *(_QWORD *)(v4 + 32);\n        if ( !*(_DWORD *)(*(_QWORD *)v15 + 8LL) )\n        {\n          v16 = 0LL;\n          while ( v14 > (unsigned int)v16 )\n          {\n            v17 = *(_QWORD *)(v15 + 8 * v16++);\n            if ( *(_DWORD *)(v17 + 24) & 0xFFFFFFFD )\n              goto LABEL_20;\n          }\n          goto LABEL_60;\n        }\n      }\nLABEL_20:\n      v18 = 0LL;\n      v19 = 0;\n      while ( v14 > (unsigned int)v18 )\n      {\n        v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v18) + 8LL);\n        v21 = v20 - (v20 != 0);\n        if ( v19 < v21 )\n          v19 = v21;\n        ++v18;\n      }\n      v22 = 0;\n      buffer_append_string(v5, \"(\\n\");\n      v39 = v6 + 1;\n      while ( v22 < *(_DWORD *)(v4 + 48) )\n      {\n        sub_11098(v5, v39);\n        v23 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8LL * v22);\n        v24 = *(_DWORD *)(v23 + 8);\n        if ( v24 )\n        {\n          buffer_append_str3(v5, \"\\\"\", 1LL, *(_QWORD *)v23, (unsigned int)(v24 - 1));\n          v25 = *(_DWORD *)(v23 + 8) - (*(_DWORD *)(v23 + 8) != 0);\n          if ( (signed int)(v19 - v25) > 0 )\n            memset((void *)buffer_extend(v5, (signed int)(v19 - v25)), 32, v19 - v25);\n          buffer_append_string(v5, \" => \");\n        }\n        ++v22;\n        sub_110BA(v23, v5, v39);\n        buffer_append_string(v5, \",\\n\");\n      }\n      sub_11098(v5, v6);\n      return buffer_append_string(v5, \")\");\n    }\n    if ( (unsigned int)result < 1 )\n      break;\n    if ( (_DWORD)result == 2 )\n      return buffer_append_int(v5, *(signed int *)(v4 + 28));\n    if ( (_DWORD)result != 3 )\n      return result;\n    v26 = *(_QWORD *)(v4 + 152);\n    if ( *(_DWORD *)(v4 + 28) )\n    {\n      if ( *(_DWORD *)(v4 + 36) != 5 )\n      {\n        buffer_append_string(v5, *(_QWORD *)(v4 + 120));\n        buffer_append_string(v5, \" \");\n      }\n      buffer_append_string(v5, \"{\\n\");\n      sub_11098(v5, v3);\n      buffer_append_string(v5, \"# block \");\n      buffer_append_int(v5, *(signed int *)(v4 + 28));\n      buffer_append_string(v5, \"\\n\");\n    }\n    else\n    {\n      buffer_append_string(v5, \"config {\\n\");\n    }\n    v27 = 0LL;\n    v40 = 0;\n    while ( *(_DWORD *)(v26 + 16) > (unsigned int)v27 )\n    {\n      v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8 * v27) + 8LL);\n      v29 = v28 - (v28 != 0);\n      if ( v40 >= v29 )\n        v29 = v40;\n      ++v27;\n      v40 = v29;\n    }\n    for ( i = 0; i < *(_DWORD *)(v26 + 16); ++i )\n    {\n      sub_11098(v5, v3);\n      v30 = *(_QWORD *)(*(_QWORD *)v26 + 8LL * i);\n      buffer_append_string_len(v5, *(_QWORD *)v30, *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0));\n      v31 = *(_DWORD *)(v30 + 8) - (*(_DWORD *)(v30 + 8) != 0);\n      if ( (signed int)(v40 - v31) > 0 )\n        memset((void *)buffer_extend(v5, (signed int)(v40 - v31)), 32, v40 - v31);\n      buffer_append_string(v5, \" = \");\n      sub_110BA(v30, v5, v3);\n      buffer_append_string(v5, \"\\n\");\n    }\n    v32 = 0;\n    buffer_append_string(v5, \"\\n\");\n    while ( (unsigned __int64)v32 < *(_QWORD *)(v4 + 136) )\n    {\n      v33 = *(_QWORD *)(v4 + 128);\n      if ( !*(_QWORD *)(*(_QWORD *)(v33 + 8LL * v32) + 48LL) )\n      {\n        v34 = *(_QWORD *)(v33 + 8LL * v32);\n        buffer_append_string(v5, \"\\n\");\n        sub_11098(v5, v3);\n        sub_110BA(v34, v5, v3);\n        buffer_append_string(v5, \"\\n\");\n      }\n      ++v32;\n    }\n    sub_11098(v5, v6);\n    result = buffer_append_string(v5, \"}\");\n    if ( *(_DWORD *)(v4 + 28) )\n    {\n      buffer_append_string(v5, \" # end of \");\n      v35 = \"else\";\n      if ( *(_DWORD *)(v4 + 36) != 5 )\n        v35 = *(const char **)(v4 + 120);\n      result = buffer_append_string(v5, v35);\n    }\n    if ( !*(_QWORD *)(v4 + 56) )\n      return result;\n    buffer_append_string(v5, \"\\n\");\n    sub_11098(v5, v6);\n    buffer_append_string(v5, \"else \");\n    v4 = *(_QWORD *)(v4 + 56);\n  }\n  v8 = (_BYTE *)buffer_string_prepare_append(v5, 2 * (*(_DWORD *)(v4 + 40) - (unsigned int)(*(_DWORD *)(v4 + 40) != 0)));\n  *v8 = 34;\n  v9 = *(char **)(v4 + 32);\n  v10 = 1;\n  if ( v9 )\n  {\n    while ( *v9 )\n    {\n      if ( *v9 == 34 )\n      {\n        v11 = v10++;\n        v8[v11] = 92;\n      }\n      v12 = *v9;\n      v13 = v10;\n      ++v9;\n      ++v10;\n      v8[v13] = v12;\n    }\n  }\n  v8[v10] = 34;\n  return buffer_commit(v5, v10 + 1);\n}\n", 
            "funcStartAddr": "0x110baL", 
            "funcEndAddr": "0x11589L", 
            "funcName": "sub_110BA"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_11589(__int64 a1)\n{\n  unsigned __int64 v1; // kr08_8\n  __int64 v2; // rax\n  __pid_t *v3; // rbx\n  __int64 _0; // [rsp+0h] [rbp+0h]\n  unsigned __int64 vars1008; // [rsp+1008h] [rbp+1008h]\n\n  vars1008 = __readfsqword(0x28u);\n  if ( getcwd((char *)&_0, 0x1000uLL) )\n  {\n    v1 = strlen((const char *)&_0) + 1;\n    v2 = array_get_buf_ptr(a1, \"var.CWD\", 7LL);\n    buffer_copy_string_len(v2, &_0, (unsigned int)(v1 - 1));\n  }\n  v3 = (__pid_t *)array_get_int_ptr(a1, \"var.PID\", 7LL);\n  *v3 = getpid();\n  return __readfsqword(0x28u) ^ vars1008;\n}\n", 
            "funcStartAddr": "0x11589L", 
            "funcEndAddr": "0x11637L", 
            "funcName": "sub_11589"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_11637(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // rdx\n  char v3; // cl\n  signed __int64 result; // rax\n\n  v2 = *a2;\n  v3 = *(_BYTE *)(a1 + *a2);\n  if ( v3 != 13 && v3 != 10 )\n    ck_assert_failed(\"configfile.c\", 1724LL, \"t->input[t->offset] == '\\\\r' || t->input[t->offset] == '\\\\n'\");\n  result = 1LL;\n  if ( v3 == 13 && *(_BYTE *)(a1 + v2 + 1) == 10 )\n  {\n    *a2 = v2 + 1;\n    result = 2LL;\n  }\n  ++*a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x11637L", 
            "funcEndAddr": "0x11684L", 
            "funcName": "sub_11637"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11684(__int64 a1, signed __int64 *a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  signed __int64 v5; // rdx\n  signed __int64 v6; // r10\n  _BYTE *v7; // rdi\n  __int64 result; // rax\n  signed __int64 v9; // r9\n\n  v5 = 1LL;\n  v6 = 9217LL;\n  v7 = (_BYTE *)(*a2 + a1);\n  if ( *v7 != 35 )\n    ck_assert_failed(\"configfile.c\", 1735LL, \"t->input[t->offset] == '#'\");\n  do\n  {\n    do\n    {\n      LOBYTE(a5) = v7[v5];\n      result = (unsigned int)v5;\n      v9 = *a2 + v5++;\n    }\n    while ( (unsigned __int8)a5 > 0xDu );\n  }\n  while ( !_bittest64(&v6, a5) );\n  *a2 = v9;\n  return result;\n}\n", 
            "funcStartAddr": "0x11684L", 
            "funcEndAddr": "0x116d4L", 
            "funcName": "sub_11684"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_116D4(__int64 a1, char *a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  char *v5; // r14\n  __int64 v6; // r12\n  __int64 v7; // rax\n  __int64 v8; // r13\n  __int64 v9; // rcx\n  const char **v10; // rbx\n  const unsigned __int16 *v11; // r8\n  signed int v12; // ebp\n  __int64 v13; // rdx\n  __int64 v14; // rdx\n  unsigned __int64 v15; // r8\n  __int64 v16; // rdi\n  char v17; // al\n  char v18; // al\n  int v19; // eax\n  signed __int64 v20; // r15\n  __int64 v21; // ST20_8\n  __int64 v22; // rcx\n  char *v23; // rdx\n  char v24; // si\n  __int64 v25; // rcx\n  int v26; // eax\n  int v27; // eax\n  __int64 i; // rbp\n  unsigned __int8 v29; // r15\n  __int64 v30; // r15\n  __int64 v31; // rdx\n  unsigned __int8 v32; // al\n  const char *v33; // r9\n  unsigned int v34; // ST20_4\n  __int64 v35; // r15\n  __int64 v36; // ST08_8\n  __int64 result; // rax\n  unsigned __int64 v38; // rt1\n  const char *v39; // rbp\n  int v40; // eax\n  int v41; // eax\n  int v42; // eax\n  __int64 v43; // r8\n  const char *v44; // [rsp-8h] [rbp-B0h]\n  __int64 *ptr; // [rsp+8h] [rbp-A0h]\n  unsigned __int8 v46; // [rsp+10h] [rbp-98h]\n  unsigned __int64 v47; // [rsp+18h] [rbp-90h]\n  __int64 v48; // [rsp+20h] [rbp-88h]\n  __int64 v49; // [rsp+28h] [rbp-80h]\n  __int64 v50; // [rsp+30h] [rbp-78h]\n  char *v51; // [rsp+38h] [rbp-70h]\n  unsigned __int64 v52; // [rsp+40h] [rbp-68h]\n  unsigned __int64 v53; // [rsp+48h] [rbp-60h]\n  __int64 v54; // [rsp+50h] [rbp-58h]\n  __int64 v55; // [rsp+58h] [rbp-50h]\n  __int64 v56; // [rsp+60h] [rbp-48h]\n  unsigned __int64 v57; // [rsp+68h] [rbp-40h]\n\n  v5 = a2;\n  v6 = a1;\n  v57 = __readfsqword(0x28u);\n  v50 = a3;\n  v51 = (char *)a4;\n  v53 = a5;\n  v52 = 0LL;\n  v54 = 4294967297LL;\n  v55 = 1LL;\n  v56 = 0LL;\n  v7 = configparserAlloc(&malloc);\n  if ( !v7 )\n    ck_assert_failed(\"configfile.c\", 2128LL, \"pParser\");\n  v8 = v7;\n  ptr = (__int64 *)buffer_init(&malloc, a2);\n  v10 = (const char **)buffer_init(&malloc, a2);\nLABEL_4:\n  v12 = HIDWORD(v56);\n  if ( HIDWORD(v56) )\n  {\n    HIDWORD(v56) = 0;\nLABEL_22:\n    a2 = \"(EOL)\";\n    LODWORD(v55) = 1;\n    buffer_copy_string_len(v10, \"(EOL)\", 5LL);\n    LODWORD(v11) = 1;\n    goto LABEL_138;\n  }\nLABEL_9:\n  while ( 1 )\n  {\n    v13 = v52;\n    if ( v52 >= v53 )\n      break;\n    a2 = &v51[v52];\n    LOBYTE(v9) = v51[v52];\n    if ( !(_BYTE)v9 )\n    {\n      v33 = *v10;\n      a2 = \"configfile.c\";\n      log_error(*(_QWORD *)(v6 + 112));\n      break;\n    }\n    if ( (_BYTE)v9 == 40 )\n    {\n      a2 = \"(\";\n      ++v52;\n      ++HIDWORD(v55);\n      buffer_copy_string_len(v10, \"(\", 1LL);\n      LODWORD(v11) = 9;\n      goto LABEL_138;\n    }\n    if ( (char)v9 > 40 )\n    {\n      if ( (_BYTE)v9 == 61 )\n      {\n        if ( HIDWORD(v55) )\n        {\n          if ( v51[v52 + 1] != 62 )\n          {\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"use => for assignments in arrays\";\n            goto LABEL_133;\n          }\n          a2 = \"=>\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"=>\", 2LL);\n          LODWORD(v11) = 12;\n          goto LABEL_138;\n        }\n        if ( !(_DWORD)v56 )\n        {\n          if ( !(_DWORD)v55 )\n          {\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"unexpected equal-sign: =\";\n            goto LABEL_133;\n          }\n          buffer_copy_string_len(v10, a2, 1LL);\n          ++v52;\n          LODWORD(v54) = v54 + 1;\n          LODWORD(v11) = 2;\n          goto LABEL_138;\n        }\n        v17 = v51[v52 + 1];\n        if ( v17 == 61 )\n        {\n          a2 = \"==\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"==\", 2LL);\n          LODWORD(v11) = 21;\n        }\n        else\n        {\n          if ( v17 != 126 )\n          {\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"only =~ and == are allowed in the condition\";\n            goto LABEL_133;\n          }\n          a2 = \"=~\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"=~\", 2LL);\n          LODWORD(v11) = 22;\n        }\nLABEL_63:\n        LODWORD(v55) = 1;\n        LODWORD(v56) = 0;\n        goto LABEL_138;\n      }\n      if ( (char)v9 > 61 )\n      {\n        if ( (_BYTE)v9 == 93 )\n        {\n          a2 = \"]\";\n          ++v52;\n          buffer_copy_string_len(v10, \"]\", 1LL);\n          LODWORD(v11) = 20;\n          goto LABEL_138;\n        }\n        if ( (char)v9 > 93 )\n        {\n          if ( (_BYTE)v9 == 123 )\n          {\n            a2 = \"{\";\n            ++v52;\n            buffer_copy_string_len(v10, \"{\", 1LL);\n            LODWORD(v11) = 14;\n            goto LABEL_138;\n          }\n          if ( (_BYTE)v9 == 125 )\n          {\n            a2 = \"}\";\n            ++v52;\n            buffer_copy_string_len(v10, \"}\", 1LL);\n            while ( v52 < v53 )\n            {\n              LOBYTE(v14) = v51[v52];\n              if ( (_BYTE)v14 == 13 || (_BYTE)v14 == 10 )\n                break;\n              if ( (_BYTE)v14 == 35 )\n              {\n                a2 = (char *)&v52;\n                v26 = sub_11684((__int64)v51, (signed __int64 *)&v52, v14, v53, v15);\n                LODWORD(v11) = 15;\n                LODWORD(v54) = v26 + v54;\n                goto LABEL_138;\n              }\n              if ( (_BYTE)v14 != 32 && (_BYTE)v14 != 9 )\n              {\n                HIDWORD(v56) = 1;\n                LODWORD(v11) = 15;\n                goto LABEL_138;\n              }\n              LODWORD(v54) = v54 + 1;\n              ++v52;\n            }\n            LODWORD(v11) = 15;\nLABEL_138:\n            if ( !*((_DWORD *)v5 + 2) )\n            {\n              v12 = 1;\n              break;\n            }\n            v34 = (unsigned int)v11;\n            buffer_copy_string_len(ptr, *v10, *((_DWORD *)v10 + 2) - (unsigned int)(*((_DWORD *)v10 + 2) != 0));\n            a2 = (char *)v34;\n            configparser(v8, v34, v10, v5);\n            v10 = (const char **)buffer_init(v8, v34);\n            goto LABEL_4;\n          }\n        }\n        else if ( (_BYTE)v9 == 91 )\n        {\n          a2 = \"[\";\n          ++v52;\n          buffer_copy_string_len(v10, \"[\", 1LL);\n          LODWORD(v11) = 19;\n          goto LABEL_138;\n        }\n        goto LABEL_105;\n      }\n      if ( (_BYTE)v9 == 43 )\n      {\n        if ( v51[v52 + 1] == 61 )\n        {\n          a2 = \"+=\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"+=\", 2LL);\n          LODWORD(v11) = 4;\n        }\n        else\n        {\n          a2 = \"+\";\n          ++v52;\n          buffer_copy_string_len(v10, \"+\", 1LL);\n          LODWORD(v11) = 6;\n        }\n        goto LABEL_138;\n      }\n      if ( (char)v9 <= 43 )\n      {\n        if ( (_BYTE)v9 == 41 )\n        {\n          a2 = \")\";\n          ++v52;\n          --HIDWORD(v55);\n          buffer_copy_string_len(v10, \")\", 1LL);\n          LODWORD(v11) = 10;\n          goto LABEL_138;\n        }\n        goto LABEL_105;\n      }\n      if ( (_BYTE)v9 != 44 )\n      {\n        if ( (_BYTE)v9 == 58 )\n        {\n          if ( v51[v52 + 1] != 61 )\n          {\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"unexpected character ':'\";\n            goto LABEL_133;\n          }\n          a2 = \":=\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \":=\", 2LL);\n          LODWORD(v11) = 3;\n          goto LABEL_138;\n        }\n        goto LABEL_105;\n      }\n      v11 = 0LL;\n      if ( SHIDWORD(v55) > 0 )\n      {\n        a2 = \"(COMMA)\";\n        buffer_copy_string_len(v10, \"(COMMA)\", 7LL);\n        v11 = (_WORD *)(byte_9 + 2);\n      }\n      ++v52;\n      LODWORD(v54) = v54 + 1;\nLABEL_134:\n      if ( (_DWORD)v11 )\n        goto LABEL_138;\n    }\n    else\n    {\n      if ( (_BYTE)v9 == 32 )\n      {\nLABEL_8:\n        LODWORD(v54) = v54 + 1;\n        ++v52;\n        continue;\n      }\n      if ( (char)v9 <= 32 )\n      {\n        if ( (_BYTE)v9 == 10 || (_BYTE)v9 == 13 )\n        {\n          if ( HIDWORD(v55) )\n          {\n            a2 = (char *)&v52;\n            sub_11637((__int64)v51, (__int64 *)&v52);\n            LODWORD(v54) = 1;\n            ++HIDWORD(v54);\n            continue;\n          }\n          while ( 1 )\n          {\nLABEL_17:\n            if ( v52 >= v53 )\n              goto LABEL_22;\n            LOBYTE(v13) = v51[v52];\n            if ( (_BYTE)v13 == 13 )\n              goto LABEL_68;\n            if ( (char)v13 <= 13 )\n              break;\n            if ( (_BYTE)v13 == 32 )\n              goto LABEL_69;\n            if ( (_BYTE)v13 != 35 )\n              goto LABEL_22;\n            v19 = sub_11684((__int64)v51, (signed __int64 *)&v52, v13, v9, (unsigned __int64)v11);\n            LODWORD(v54) = v19 + v54;\n          }\n          if ( (_BYTE)v13 != 9 )\n          {\n            if ( (_BYTE)v13 != 10 )\n              goto LABEL_22;\nLABEL_68:\n            sub_11637((__int64)v51, (__int64 *)&v52);\n            LODWORD(v54) = 1;\n            ++HIDWORD(v54);\n            goto LABEL_17;\n          }\nLABEL_69:\n          LODWORD(v54) = v54 + 1;\n          ++v52;\n          goto LABEL_17;\n        }\n        if ( (_BYTE)v9 == 9 )\n          goto LABEL_8;\n        goto LABEL_105;\n      }\n      if ( (_BYTE)v9 == 34 )\n      {\n        v20 = 1LL;\n        v21 = (__int64)&v51[v52 + 1];\n        buffer_copy_string_len(v10, \"\", 0LL);\n        v22 = v21;\n        while ( 1 )\n        {\n          v23 = &v51[v20 + v52];\n          v24 = *v23;\n          if ( !*v23 )\n            break;\n          if ( v24 == 92 )\n          {\n            if ( v51[v20 + 1 + v52] == 34 )\n            {\n              buffer_append_string_len(v10, v22, &v23[-v22]);\n              v25 = v20++ + v52 + 1;\n              v22 = (__int64)&v51[v25];\n            }\n          }\n          else if ( v24 == 34 )\n          {\n            buffer_append_string_len(v10, v22, &v23[-v22]);\n            v11 = (_WORD *)&byte_7;\n            goto LABEL_83;\n          }\n          ++v20;\n        }\n        v11 = 0LL;\nLABEL_83:\n        a2 = v51;\n        v9 = (unsigned int)v54;\n        if ( !v51[v20 + v52] )\n        {\n          v16 = *(_QWORD *)(v6 + 112);\n          v44 = \"missing closing quote\";\n          goto LABEL_133;\n        }\n        v52 += v20 + 1;\n        LODWORD(v54) = v54 + v20 + 1;\n        goto LABEL_134;\n      }\n      if ( (char)v9 < 34 )\n      {\n        if ( !(_DWORD)v56 )\n        {\n          v16 = *(_QWORD *)(v6 + 112);\n          v44 = \"unexpected exclamation-marks: !\";\n          goto LABEL_133;\n        }\n        v18 = v51[v52 + 1];\n        if ( v18 == 61 )\n        {\n          a2 = \"!=\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"!=\", 2LL);\n          LODWORD(v11) = 23;\n        }\n        else\n        {\n          if ( v18 != 126 )\n          {\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"only !~ and != are allowed in the condition\";\n            goto LABEL_133;\n          }\n          a2 = \"!~\";\n          v52 += 2LL;\n          buffer_copy_string_len(v10, \"!~\", 2LL);\n          LODWORD(v11) = 24;\n        }\n        goto LABEL_63;\n      }\n      if ( (_BYTE)v9 == 35 )\n      {\n        a2 = (char *)&v52;\n        v27 = sub_11684((__int64)v51, (signed __int64 *)&v52, v52, v9, (unsigned __int64)v11);\n        LODWORD(v54) = v27 + v54;\n        continue;\n      }\n      if ( (_BYTE)v9 == 36 )\n      {\n        a2 = \"$\";\n        ++v52;\n        LODWORD(v56) = 1;\n        LODWORD(v55) = 0;\n        buffer_copy_string_len(v10, \"$\", 1LL);\n        LODWORD(v11) = 17;\n        goto LABEL_138;\n      }\nLABEL_105:\n      if ( (_DWORD)v56 )\n      {\n        for ( i = 0LL; ; ++i )\n        {\n          v29 = a2[i];\n          if ( !v29 )\n            break;\n          if ( !((*__ctype_b_loc())[v29] & 0x400) && v29 != 95 )\n            goto LABEL_148;\n        }\n        goto LABEL_112;\n      }\n      v49 = (__int64)&v51[v52];\n      v46 = v51[v52];\n      v30 = 0LL;\n      v48 = (__int64)v51;\n      v47 = v52;\n      v11 = *__ctype_b_loc();\n      a2 = (char *)v49;\n      v9 = v46;\n      if ( !(v11[v46] & 0x800) )\n      {\n        while ( 1 )\n        {\n          v32 = *(_BYTE *)(v49 + v30);\n          if ( !v32 )\n            break;\n          if ( !(v11[v32] & 8) && v32 != 95 && (unsigned __int8)(v32 - 45) > 1u )\n          {\n            if ( v30 )\n            {\n              buffer_copy_string_len(v10, v49, v30);\n              v39 = *v10;\n              a2 = \"include\";\n              v40 = strcmp(*v10, \"include\");\n              LODWORD(v11) = 25;\n              if ( v40 )\n              {\n                a2 = \"include_shell\";\n                v41 = strcmp(v39, \"include_shell\");\n                LODWORD(v11) = 26;\n                if ( v41 )\n                {\n                  a2 = \"global\";\n                  v42 = strcmp(v39, \"global\");\n                  LODWORD(v11) = 13;\n                  if ( v42 )\n                  {\n                    a2 = \"else\";\n                    LODWORD(v11) = (unsigned int)strcmp(v39, \"else\") < 1 ? 16 : 5;\n                  }\n                }\n              }\n              v52 += v30;\n              LODWORD(v54) = v30 + v54;\n              goto LABEL_138;\n            }\nLABEL_129:\n            if ( v46 == -62 && *(_BYTE *)(v48 + v47 + 1) == -96 )\n            {\n              v52 = v47 + 2;\n              LODWORD(v54) = v54 + 2;\n              goto LABEL_9;\n            }\nLABEL_132:\n            v16 = *(_QWORD *)(v6 + 112);\n            v44 = \"invalid character in variable name\";\n            goto LABEL_133;\n          }\n          ++v30;\n        }\n        if ( !v30 )\n          goto LABEL_129;\n        goto LABEL_132;\n      }\n      while ( 1 )\n      {\n        v31 = *(unsigned __int8 *)(v49 + v30);\n        if ( !(_BYTE)v31 || !(v11[v31] & 0x800) )\n          break;\n        ++v30;\n      }\n      if ( v30 )\n      {\n        buffer_copy_string_len(v10, v49, v30);\n        v52 += v30;\n        LODWORD(v54) = v30 + v54;\n        LODWORD(v11) = 8;\n        goto LABEL_138;\n      }\n    }\n  }\n  while ( 1 )\n  {\n    buffer_free(v10);\n    if ( v12 == -1 )\n    {\n      configparserFree(v8, &free);\n      a2 = \"configfile.c\";\n      v43 = *ptr;\n      log_error(*(_QWORD *)(v6 + 112));\n    }\n    else\n    {\n      if ( *((_DWORD *)v5 + 2) )\n      {\n        v35 = buffer_init(v10, a2);\n        buffer_copy_string(v35, \"(EOL)\");\n        configparser(v8, 1LL, v35, v5);\n        if ( *((_DWORD *)v5 + 2) )\n          configparser(v8, 0LL, 0LL, v5);\n      }\n      a2 = (char *)&free;\n      configparserFree(v8, &free);\n      if ( !*((_DWORD *)v5 + 2) )\n      {\n        a2 = \"configfile.c\";\n        v12 = -1;\n        v36 = *ptr;\n        log_error(*(_QWORD *)(v6 + 112));\n      }\n    }\n    buffer_free(ptr);\n    i = (unsigned int)(v12 + 1);\n    result = (unsigned int)-((_DWORD)i == 0);\n    v38 = __readfsqword(0x28u);\n    v10 = (const char **)(v38 ^ v57);\n    if ( v38 == v57 )\n      return result;\nLABEL_148:\n    if ( i )\n    {\n      buffer_copy_string_len(v10, a2, i);\n      v52 += i;\n      LODWORD(v54) = i + v54;\n      LODWORD(v11) = 18;\n      goto LABEL_138;\n    }\nLABEL_112:\n    v16 = *(_QWORD *)(v6 + 112);\n    v44 = \"invalid character in condition\";\nLABEL_133:\n    v12 = -1;\n    log_error(v16);\n    a2 = (char *)v44;\n  }\n}\n", 
            "funcStartAddr": "0x116d4L", 
            "funcEndAddr": "0x122bbL", 
            "funcName": "sub_116D4"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_122BB(__int64 a1, char *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // rax\n  unsigned int v5; // ebp\n  void *v6; // rbx\n  unsigned __int64 v8; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v8 = 0x2000000LL;\n  v9 = __readfsqword(0x28u);\n  v4 = fdevent_load_file(a3, &v8, 0LL, &malloc, &free);\n  if ( v4 )\n  {\n    v5 = 0;\n    v6 = (void *)v4;\n    if ( v8 )\n    {\n      v5 = sub_116D4(a1, a2, v3, v4, v8);\n      ck_memclear_s(v6, v8, v8);\n    }\n    free(v6);\n  }\n  else\n  {\n    v5 = -1;\n    log_perror(*(_QWORD *)(a1 + 112));\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x122bbL", 
            "funcEndAddr": "0x1238aL", 
            "funcName": "sub_122BB"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1238A(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // er13\n  __int64 v4; // rbp\n  unsigned int v5; // ebx\n  __int64 v6; // r12\n  _QWORD *v7; // rdi\n  __int64 v8; // rax\n  __int64 v10; // [rsp+0h] [rbp-28h]\n\n  v3 = a3;\n  v4 = a1;\n  v5 = 0;\n  v6 = array_init((unsigned int)(*(_DWORD *)(*(_QWORD *)a1 + 16LL) + 4), a2);\n  array_insert_value(v6, a2, v3);\n  while ( 1 )\n  {\n    v7 = *(_QWORD **)v4;\n    if ( v5 >= *(_DWORD *)(*(_QWORD *)v4 + 16LL) )\n      break;\n    v8 = *(_QWORD *)(*v7 + 8LL * v5++);\n    array_insert_value(v6, *(_QWORD *)(v8 + 32), *(_DWORD *)(v8 + 40) - (unsigned int)(*(_DWORD *)(v8 + 40) != 0));\n  }\n  array_free(v7);\n  *(_QWORD *)v4 = v6;\n  return v10;\n}\n", 
            "funcStartAddr": "0x1238aL", 
            "funcEndAddr": "0x123fdL", 
            "funcName": "sub_1238A"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_123FD(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r14\n  __int64 v4; // rbx\n  __int64 v5; // rbp\n  unsigned int v6; // er13\n  __int64 v7; // rax\n\n  v3 = 0LL;\n  v4 = a2;\n  v5 = a3;\n  v6 = *(_DWORD *)(a1 + 16);\n  while ( v6 > (unsigned int)v3 )\n  {\n    v7 = array_get_element_klen(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3) + 152LL), \"auth.backend\", 12LL);\n    if ( v7 && !*(_DWORD *)(v7 + 24) && (unsigned int)buffer_eq_slen(v7 + 32, a2, v5) )\n      return v4;\n    ++v3;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x123fdL", 
            "funcEndAddr": "0x12475L", 
            "funcName": "sub_123FD"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_finalize(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  unsigned int i; // ebp\n  __int64 v5; // rdx\n  unsigned int v6; // er12\n  __int64 v7; // r13\n  __int64 v8; // r14\n  const char *v9; // r15\n  bool v10; // zf\n  unsigned int v11; // ebp\n  unsigned int j; // ebp\n  __int64 v13; // rdx\n  __int64 v14; // r12\n  __int64 v15; // rax\n\n  v2 = *(_QWORD *)(a1 + 320);\n  *(_BYTE *)(v2 + 88) = *(_BYTE *)(a1 + 161);\n  v3 = *(_QWORD *)(v2 + 56);\n  if ( v3 )\n  {\n    if ( *(_DWORD *)(v3 + 8) <= 1u )\n      *(_QWORD *)(v2 + 56) = 0LL;\n  }\n  else\n  {\n    *(_QWORD *)(v2 + 56) = a2;\n  }\n  for ( i = 0; ; ++i )\n  {\n    v5 = *(_QWORD *)(a1 + 8);\n    if ( *(_DWORD *)(v5 + 16) <= i )\n      break;\n    v6 = 0;\n    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8LL * i) + 152LL);\n    while ( v7 && *(_DWORD *)(v7 + 16) > v6 )\n    {\n      v8 = *(_QWORD *)(*(_QWORD *)v7 + 8LL * v6);\n      v9 = *(const char **)v8;\n      if ( strncmp(*(const char **)v8, \"var.\", 4uLL) )\n      {\n        if ( !array_get_element_klen(\n                *(_QWORD *)(a1 + 288),\n                v9,\n                *(_DWORD *)(v8 + 8) - (unsigned int)(*(_DWORD *)(v8 + 8) != 0)) )\n          log_error(*(_QWORD *)(a1 + 112));\n      }\n      ++v6;\n    }\n  }\n  array_free(*(void **)(a1 + 288));\n  v10 = *(_WORD *)(a1 + 196) == 0;\n  *(_QWORD *)(a1 + 288) = 0LL;\n  if ( v10 )\n  {\n    for ( j = 1; ; ++j )\n    {\n      v13 = *(_QWORD *)(a1 + 8);\n      if ( *(_DWORD *)(v13 + 16) <= j )\n        break;\n      v14 = *(_QWORD *)(*(_QWORD *)v13 + 8LL * j);\n      if ( !((*(_DWORD *)(v14 + 36) - 2) & 0xFFFFFFFD) && !*(_DWORD *)(v14 + 96) )\n      {\n        if ( !*(_QWORD *)(a1 + 416) )\n        {\n          v15 = pcre2_match_data_create_8(10LL, 0LL);\n          *(_QWORD *)(a1 + 416) = v15;\n          if ( !v15 )\n            ck_assert_failed(\"configfile.c\", 1261LL, \"srv->match_data\");\n        }\n        *(_QWORD *)(v14 + 88) = *(_QWORD *)(a1 + 416);\n      }\n    }\n    v11 = 1;\n  }\n  else\n  {\n    if ( *(_BYTE *)(a1 + 197) )\n      log_error(*(_QWORD *)(a1 + 112));\n    v11 = 0;\n    if ( *(_BYTE *)(a1 + 196) )\n      log_error(*(_QWORD *)(a1 + 112));\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x12475L", 
            "funcEndAddr": "0x12652L", 
            "funcName": "config_finalize"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_print(__int64 a1)\n{\n  __int64 v1; // rsi\n  __int64 *v2; // rax\n\n  v1 = *(_QWORD *)(a1 + 48);\n  v2 = **(__int64 ***)(a1 + 8);\n  *(_DWORD *)(v1 + 8) = 0;\n  return sub_110BA(*v2, v1, 0);\n}\n", 
            "funcStartAddr": "0x12652L", 
            "funcEndAddr": "0x1266eL", 
            "funcName": "config_print"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_free(__int64 a1)\n{\n  __int64 v1; // rbp\n  __int64 v2; // r12\n  __int64 v3; // rax\n  bool v4; // al\n  __int64 v5; // r15\n  _BOOL4 v6; // er13\n  _BOOL8 v7; // r14\n  char *v8; // rdi\n  signed __int64 i; // rbx\n  __int64 result; // rax\n  int v11; // [rsp+Ch] [rbp-3Ch]\n\n  v1 = a1;\n  v2 = *(_QWORD *)(a1 + 320);\n  if ( v2 )\n  {\n    v3 = *(_QWORD *)(v2 + 8);\n    if ( v3 )\n    {\n      v11 = *(_DWORD *)(v2 + 4);\n      v4 = *(_DWORD *)(v3 + 12) == 0;\n      v5 = 0LL;\n      v6 = v4;\n      v7 = v4;\n      while ( 1 )\n      {\n        v8 = *(char **)(v2 + 8);\n        if ( v11 <= v6 + (signed int)v5 )\n          break;\n        for ( i = (signed __int64)&v8[16 * *(unsigned int *)&v8[16 * (v7 + v5) + 8]]; *(_DWORD *)i != -1; i += 16LL )\n        {\n          if ( *(_DWORD *)i == 18 && *(_DWORD *)(i + 4) == 10 )\n            free(*(void **)(i + 8));\n        }\n        ++v5;\n      }\n      free(v8);\n    }\n    free((void *)v2);\n  }\n  array_free(*(void **)(v1 + 8));\n  array_free(*(void **)(v1 + 288));\n  array_free(*(void **)(v1 + 280));\n  result = array_free(*(void **)(v1 + 184));\n  if ( !*(_QWORD *)(v1 + 416) )\n    result = pcre2_match_data_free_8(0LL);\n  return result;\n}\n", 
            "funcStartAddr": "0x1266eL", 
            "funcEndAddr": "0x12761L", 
            "funcName": "config_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_init(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n\n  *(_QWORD *)(a1 + 8) = array_init(16LL, a2);\n  v2 = array_init(128LL, a2);\n  *(_WORD *)(a1 + 172) = 0;\n  *(_QWORD *)(a1 + 288) = v2;\n  *(_WORD *)(a1 + 192) = 0;\n  *(_BYTE *)(a1 + 195) = 1;\n  *(_BYTE *)(a1 + 198) = 0;\n  *(_BYTE *)(a1 + 161) = 0;\n  *(_DWORD *)(a1 + 152) = 0x2000;\n  *(_WORD *)(a1 + 157) = 257;\n  *(_BYTE *)(a1 + 159) = 0;\n  *(_WORD *)(a1 + 164) = 1368;\n  *(_QWORD *)(a1 + 280) = array_init(16LL, a2);\n  *(_QWORD *)(a1 + 264) = \"/usr/local/lib\";\n  result = array_init(2LL, a2);\n  *(_QWORD *)(a1 + 184) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x12761L", 
            "funcEndAddr": "0x12800L", 
            "funcName": "config_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_log_error_open(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rdx\n  __int64 v3; // rbp\n  _BOOL8 v4; // r15\n  signed __int64 v5; // r13\n  signed __int64 i; // r12\n  int v7; // eax\n  __int64 v8; // rcx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r14\n  unsigned int v12; // er13\n  const char *v13; // rsi\n  int v14; // eax\n  const char *v15; // rdi\n  _DWORD *v16; // r12\n  const char **v17; // rax\n  int v18; // edx\n  const char *v19; // r14\n  __int64 v20; // r13\n  unsigned int v21; // er12\n  bool v22; // r14\n  __int64 v24; // [rsp+10h] [rbp-48h]\n  __int64 v25; // [rsp+18h] [rbp-40h]\n\n  v1 = a1;\n  v2 = *(_QWORD *)(a1 + 320);\n  v3 = 0LL;\n  v4 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 12LL) == 0;\n  v5 = 16 * v4;\nLABEL_2:\n  if ( *(_DWORD *)(v2 + 4) > (signed int)v4 )\n  {\n    for ( i = *(_QWORD *)(v2 + 8) + 16LL * *(unsigned int *)(*(_QWORD *)(v2 + 8) + v5 + 8); ; i += 16LL )\n    {\n      v7 = *(_DWORD *)i;\n      if ( *(_DWORD *)i == -1 )\n      {\n        LODWORD(v4) = v4 + 1;\n        v5 += 16LL;\n        goto LABEL_2;\n      }\n      if ( v7 == 32 )\n      {\n        if ( !(_DWORD)v4 )\n        {\n          if ( *(_BYTE *)(a1 + 199) )\n            continue;\n          v8 = *(_QWORD *)(a1 + 112);\n          goto LABEL_12;\n        }\n      }\n      else if ( v7 != 33 )\n      {\n        continue;\n      }\n      v8 = 0LL;\nLABEL_12:\n      v9 = *(_QWORD *)(i + 8);\n      if ( *(_DWORD *)(v9 + 8) > 1u && *(_QWORD *)v9 )\n      {\n        v25 = v2;\n        v24 = v8;\n        v10 = fdlog_open(*(char **)v9);\n        v11 = v10;\n        v2 = v25;\n        if ( !v10 )\n        {\n          v12 = -1;\n          log_perror(*(_QWORD *)(a1 + 112));\n          return v12;\n        }\n        if ( v24 )\n        {\n          *(_QWORD *)(a1 + 112) = v10;\n          *(_QWORD *)(v25 + 64) = v10;\n          log_set_global_errh(v10, 0LL);\n          v2 = v25;\n        }\n        *(_QWORD *)(i + 8) = v11;\n        *(_DWORD *)(i + 4) = 10;\n        if ( !(_DWORD)v4 && *(_QWORD *)(a1 + 112) != v11 )\n          v3 = v11;\n      }\n    }\n  }\n  v13 = \"server.errorlog-high-precision\";\n  v14 = config_feature_bool(a1, \"server.errorlog-high-precision\", 0LL);\n  v15 = *(const char **)(a1 + 112);\n  if ( v14 )\n  {\n    v13 = (_BYTE *)(&size + 1);\n    log_set_global_errh(v15, 1LL);\n  }\n  v16 = *(_DWORD **)(v1 + 112);\n  if ( *(_BYTE *)(v1 + 199) )\n  {\n    v17 = *(const char ***)(v1 + 200);\n    v18 = 24;\n    *v16 = 2;\n    v16[1] = -1;\n    if ( v17 )\n    {\n      v19 = *v17;\n      v20 = 0LL;\n      while ( strcmp(v19, *(const char **)((char *)&off_256D00 + v20)) )\n      {\n        v20 += 16LL;\n        if ( v20 == 336 )\n          goto LABEL_32;\n      }\n      v18 = *(_DWORD *)((char *)&off_256D00 + v20 + 8);\n      if ( v18 != -1 )\n        goto LABEL_33;\nLABEL_32:\n      log_error((char)v16);\n      v18 = 24;\n    }\nLABEL_33:\n    v15 = \"lighttpd\";\n    v13 = (_BYTE *)(&size + 3);\n    openlog(\"lighttpd\", 3, v18);\n    if ( !v3 )\n    {\nLABEL_44:\n      v21 = -1;\n      if ( *(_BYTE *)(v1 + 192) )\n        goto LABEL_47;\n      goto LABEL_45;\n    }\n    v16 = *(_DWORD **)(v1 + 112);\n    if ( *v16 == 1 )\n      goto LABEL_40;\nLABEL_41:\n    v21 = *(_DWORD *)(v3 + 4);\n    if ( **(_BYTE **)(v3 + 24) == 124 )\n      fdlog_pipe_serrh(v21, v13);\n    goto LABEL_47;\n  }\n  if ( *v16 != 1 )\n  {\n    if ( !v3 )\n      goto LABEL_44;\n    goto LABEL_41;\n  }\n  if ( *(_BYTE *)(v1 + 192) )\n  {\n    if ( !v3 )\n      goto LABEL_44;\n    goto LABEL_40;\n  }\n  v16[1] = -1;\n  if ( v3 )\n  {\nLABEL_40:\n    v16[1] = dup(2);\n    fdevent_setfd_cloexec(*(unsigned int *)(*(_QWORD *)(v1 + 112) + 4LL), v13);\n    goto LABEL_41;\n  }\nLABEL_45:\n  v21 = fdevent_open_devnull(v15, v13);\n  if ( v21 == -1 )\n  {\n    v12 = -1;\n    log_perror(*(_QWORD *)(v1 + 112));\n    return v12;\n  }\nLABEL_47:\n  v12 = fdevent_set_stdin_stdout_stderr(0xFFFFFFFFLL, 0xFFFFFFFFLL, v21);\n  v22 = v3 == 0 && v21 != -1;\n  if ( v12 )\n  {\n    v12 = -1;\n    log_perror(*(_QWORD *)(v1 + 112));\n    if ( !v22 )\n      return v12;\nLABEL_51:\n    close(v21);\n    return v12;\n  }\n  if ( v22 )\n    goto LABEL_51;\n  if ( v3 )\n  {\n    close(v21);\n    *(_DWORD *)(v3 + 4) = 2;\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x12800L", 
            "funcEndAddr": "0x12b53L", 
            "funcName": "config_log_error_open"
        }, 
        {
            "decompiledFuncCode": "void __fastcall config_log_error_close(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbx\n  __int64 v3; // rdi\n  _DWORD *v4; // rax\n\n  v1 = *(_QWORD *)(a1 + 320);\n  if ( v1 )\n  {\n    v2 = a1;\n    v3 = *(_QWORD *)(a1 + 112);\n    *(_QWORD *)(v1 + 152) = 0LL;\n    fdlog_closeall(v3);\n    v4 = *(_DWORD **)(v2 + 112);\n    if ( *v4 == 2 )\n    {\n      *v4 = 1;\n      v4[1] = 2;\n      closelog();\n    }\n  }\n}\n", 
            "funcStartAddr": "0x12b53L", 
            "funcEndAddr": "0x12b96L", 
            "funcName": "config_log_error_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_parse_file(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r13\n  const char **v4; // rbx\n  char v5; // al\n  unsigned __int64 v6; // kr08_8\n  char v7; // al\n  char v8; // al\n  int v9; // eax\n  unsigned __int64 v10; // r15\n  unsigned int v11; // er13\n  const char *v12; // r12\n  const char *v13; // r8\n  unsigned __int64 v15; // [rsp+0h] [rbp-88h]\n  __int64 v16; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v17; // [rsp+48h] [rbp-40h]\n\n  v3 = a3;\n  v17 = __readfsqword(0x28u);\n  v4 = (const char **)buffer_init(a1, a2);\n  v6 = strlen((const char *)v3) + 1;\n  v5 = *(_BYTE *)v3;\n  if ( *(_BYTE *)v3 != 47\n    && v5 != 92\n    && (v5 != 46\n     || (v7 = *(_BYTE *)(v3 + 1), v7 != 47) && v7 != 92 && (v7 != 46 || (v8 = *(_BYTE *)(v3 + 2), v8 != 47) && v8 != 92)) )\n  {\n    buffer_copy_path_len2(\n      v4,\n      **(_QWORD **)(a2 + 56),\n      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(a2 + 56) + 8LL) != 0),\n      v3,\n      v6 - 1);\n  }\n  else\n  {\n    buffer_copy_string_len(v4, v3, v6 - 1);\n  }\n  v9 = glob64(*v4, 1024, 0LL, (glob64_t *)&v15);\n  if ( v9 > 2 )\n  {\n    if ( v9 != 3 )\n      goto LABEL_24;\n    v12 = *v4;\n    v11 = 0;\n    if ( !v12[strcspn(*v4, \"*?[]{}\")] )\n    {\n      v11 = -1;\n      log_error(*(_QWORD *)(a1 + 112));\n    }\n  }\n  else if ( v9 >= 1 )\n  {\n    v13 = *v4;\n    v11 = -1;\n    log_perror(*(_QWORD *)(a1 + 112));\n  }\n  else\n  {\n    v10 = 0LL;\n    v11 = -1;\n    if ( v9 )\n    {\nLABEL_24:\n      v11 = -1;\n      goto LABEL_25;\n    }\n    while ( v15 > v10 )\n    {\n      v11 = sub_122BB(a1, (char *)a2, *(_QWORD *)(v16 + 8 * v10));\n      if ( v11 )\n        break;\n      ++v10;\n    }\n    globfree64((glob64_t *)&v15);\n  }\nLABEL_25:\n  buffer_free(v4);\n  return v11;\n}\n", 
            "funcStartAddr": "0x12b96L", 
            "funcEndAddr": "0x12d3dL", 
            "funcName": "config_parse_file"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_parse_cmd(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // r12\n  unsigned int v5; // ebx\n  __int64 v6; // rax\n  __int64 v7; // r8\n  char *v8; // rax\n  char *v9; // rdi\n  __pid_t v10; // er14\n  __int64 v11; // r13\n  void *v12; // rax\n  ssize_t v13; // rax\n  ssize_t v14; // ST18_8\n  int stat_loc; // [rsp+14h] [rbp-1074h]\n  int pipedes[2]; // [rsp+18h] [rbp-1070h]\n  char *argv; // [rsp+20h] [rbp-1068h]\n  const char *v19; // [rsp+28h] [rbp-1060h]\n  __int64 v20; // [rsp+30h] [rbp-1058h]\n  __int64 v21; // [rsp+38h] [rbp-1050h]\n  char buf; // [rsp+40h] [rbp-1048h]\n  unsigned __int64 v23; // [rsp+1048h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a3;\n  v23 = __readfsqword(0x28u);\n  if ( getcwd(&buf, 0x1000uLL) )\n  {\n    v6 = *(_QWORD *)(a2 + 56);\n    if ( *(_DWORD *)(v6 + 8) > 1u && chdir(*(const char **)v6) )\n    {\n      v5 = -1;\n      v7 = **(_QWORD **)(a2 + 56);\n      log_perror(*(_QWORD *)(a1 + 112));\n    }\n    else\n    {\n      v5 = fdevent_pipe_cloexec(pipedes);\n      if ( v5 )\n      {\n        v5 = -1;\n        log_perror(*(_QWORD *)(a1 + 112));\n      }\n      else\n      {\n        v8 = getenv(\"SHELL\");\n        if ( !v8 )\n          v8 = \"/bin/sh\";\n        argv = v8;\n        v20 = v4;\n        v21 = 0LL;\n        v19 = \"-c\";\n        v9 = v8;\n        v10 = fdevent_fork_execve(v8, &argv, -1);\n        if ( v10 == -1 )\n        {\n          v5 = -1;\n          log_perror(*(_QWORD *)(v3 + 112));\n        }\n        else\n        {\n          stat_loc = 0;\n          v11 = buffer_init(v9, &argv);\n          close(pipedes[1]);\n          pipedes[1] = -1;\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              v12 = (void *)buffer_string_prepare_append(v11, 1023LL);\n              v13 = read(pipedes[0], v12, 0x3FFuLL);\n              if ( v13 < 0 )\n                break;\n              v14 = v13;\n              buffer_commit(v11, v13);\n              if ( !v14 )\n                goto LABEL_22;\n            }\n            if ( v13 != -1 )\n              break;\n            if ( *__errno_location() != 4 )\n              goto LABEL_21;\n          }\n          if ( !v13 )\n            goto LABEL_22;\nLABEL_21:\n          v5 = -1;\n          log_perror(*(_QWORD *)(v3 + 112));\nLABEL_22:\n          close(pipedes[0]);\n          pipedes[0] = -1;\n          if ( (unsigned int)fdevent_waitpid(v10, &stat_loc) != v10 )\n          {\n            v5 = -1;\n            log_perror(*(_QWORD *)(v3 + 112));\n          }\n          if ( stat_loc )\n          {\n            v5 = -1;\n            log_error(*(_QWORD *)(v3 + 112));\n          }\n          else if ( v5 != -1 )\n          {\n            v5 = sub_116D4(\n                   v3,\n                   (char *)a2,\n                   v4,\n                   *(_QWORD *)v11,\n                   *(_DWORD *)(v11 + 8) - (unsigned int)(*(_DWORD *)(v11 + 8) != 0));\n          }\n          buffer_free((void *)v11);\n        }\n        if ( pipedes[0] != -1 )\n          close(pipedes[0]);\n        if ( pipedes[1] != -1 )\n          close(pipedes[1]);\n      }\n      if ( chdir(&buf) )\n      {\n        v5 = -1;\n        log_perror(*(_QWORD *)(v3 + 112));\n      }\n    }\n  }\n  else\n  {\n    v5 = -1;\n    log_perror(*(_QWORD *)(a1 + 112));\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x12d3dL", 
            "funcEndAddr": "0x13077L", 
            "funcName": "config_parse_cmd"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall config_remoteip_normalize(const char **a1, __int64 a2)\n{\n  const char *v2; // rbp\n  signed __int64 result; // rax\n  const char **v4; // rbx\n  char *v5; // r13\n  char *v6; // r14\n  unsigned __int64 v7; // rbp\n  int v8; // er13\n  const char *v9; // rcx\n  unsigned int v10; // er13\n  int v11; // er14\n  __int64 v12; // rdx\n  __int64 v13; // r12\n  __int64 v14; // rax\n  unsigned __int64 v15; // rdi\n  int v16; // eax\n  __int64 v17; // rax\n  _BYTE *v18; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v19; // [rsp+8h] [rbp-30h]\n\n  v2 = *a1;\n  v19 = __readfsqword(0x28u);\n  result = 1LL;\n  if ( *v2 != 47 )\n  {\n    v4 = a1;\n    v5 = strchr(v2, 47);\n    v6 = strchr(v2, 58);\n    if ( v5 )\n    {\n      v7 = strtoul(v5 + 1, &v18, 10);\n      if ( *v18 || !v7 || (-(signed __int64)((unsigned __int64)v6 < 1) & 0xFFFFFFFFFFFFFFA0LL) + 128 < v7 )\n        return 0xFFFFFFFFLL;\n      v8 = (_DWORD)v5 - (unsigned __int64)*a1;\n      (*a1)[v8] = 0;\n      *((_DWORD *)a1 + 2) = v8 + 1;\n    }\n    else\n    {\n      v7 = 0LL;\n    }\n    if ( v6 )\n    {\n      v9 = *a1;\n      *(_DWORD *)(a2 + 8) = 0;\n      if ( *v9 == 91 )\n        buffer_append_string_len(a2, v9, *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0));\n      else\n        buffer_append_str3(a2, \"[\", 1LL, v9, *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0));\n      v10 = 10;\n      v11 = http_request_host_normalize(a2, 0LL);\n      if ( !v11 )\n      {\n        v12 = *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0);\n        if ( (unsigned int)v12 > 1 )\n          buffer_copy_string_len(a1, *(_QWORD *)a2 + 1LL, v12 - 2);\n      }\n    }\n    else\n    {\n      v10 = 2;\n      v11 = http_request_host_normalize(a1, 0LL);\n    }\n    v13 = *((_DWORD *)a1 + 2) - (unsigned int)(*((_DWORD *)a1 + 2) != 0);\n    if ( v7 )\n    {\n      buffer_append_string_len(a1, \"/\", 1LL);\n      buffer_append_int(a1, v7);\n      if ( v11 )\n        return 0xFFFFFFFFLL;\n      v14 = buffer_string_prepare_append(a1, 36LL);\n      *(_BYTE *)(v14 + 1) = v7;\n      v15 = (v14 + 9) & 0xFFFFFFFFFFFFFFF8LL;\n      (*v4)[(unsigned int)v13] = 0;\n    }\n    else\n    {\n      if ( v11 )\n        return 0xFFFFFFFFLL;\n      v17 = buffer_string_prepare_append(a1, 36LL);\n      *(_BYTE *)(v17 + 1) = 0;\n      v15 = (v17 + 9) & 0xFFFFFFFFFFFFFFF8LL;\n    }\n    v16 = sock_addr_inet_pton(v15, *v4, v10, 0LL);\n    if ( v7 )\n      (*v4)[v13] = 47;\n    result = v16 == 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x13077L", 
            "funcEndAddr": "0x132a7L", 
            "funcName": "config_remoteip_normalize"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_read(__int64 a1, const char *a2)\n{\n  __int64 v2; // r14\n  void *v3; // rax\n  void *v4; // rbp\n  char *v5; // rax\n  _QWORD *v6; // rbp\n  __int64 v7; // rdi\n  signed __int64 v8; // r12\n  _QWORD *v9; // rbx\n  __int64 v10; // rcx\n  unsigned int v11; // edx\n  int v12; // edi\n  size_t v13; // rax\n  unsigned int v14; // edi\n  char *v15; // rsi\n  ssize_t v16; // rax\n  __int64 v17; // r8\n  __int64 v18; // rax\n  unsigned int v19; // edi\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rdx\n  __int64 v22; // rsi\n  const char *v23; // rsi\n  signed __int64 v24; // rcx\n  char *v25; // rdi\n  char *i; // r15\n  __int64 v27; // rax\n  __int64 v28; // rax\n  __int64 v29; // rax\n  __int64 v30; // rax\n  __int64 v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rax\n  int v34; // ebp\n  signed int v35; // er13\n  __int64 *v36; // rbx\n  int v37; // er12\n  __int64 v38; // r9\n  __int64 v39; // r8\n  __int64 v40; // r8\n  signed int v41; // eax\n  __int16 v42; // bx\n  signed int v43; // eax\n  bool v44; // zf\n  signed int v45; // eax\n  __int64 v46; // rbp\n  __int64 v47; // rax\n  char v48; // bl\n  __int64 v49; // rax\n  __int64 v50; // rax\n  __int64 v51; // r9\n  __int64 v52; // r13\n  __int64 v53; // rax\n  int v54; // er14\n  __int64 v55; // rcx\n  unsigned int v56; // er12\n  __int64 *v57; // rbp\n  __int64 v58; // r15\n  signed __int64 v59; // rbx\n  signed __int64 v60; // rdx\n  __int64 v61; // rax\n  unsigned int v62; // ST44_4\n  __int64 v63; // ST38_8\n  signed __int64 v64; // ST30_8\n  int v65; // eax\n  __int64 *v66; // rbx\n  __int64 v67; // rbp\n  int v68; // er12\n  __int64 v69; // r14\n  __int64 v70; // r12\n  __int64 v71; // r13\n  unsigned int v72; // er15\n  __int64 v73; // rbp\n  __int64 v74; // rsi\n  int v75; // er15\n  signed int v76; // er12\n  const char *v77; // r13\n  __int64 v78; // rdx\n  __int64 v79; // rbp\n  signed __int64 v80; // rbx\n  const char *v81; // rbp\n  signed int v82; // eax\n  signed int v83; // eax\n  __int64 v84; // rbx\n  __int64 v85; // rbx\n  __int64 v86; // r12\n  signed int v87; // ebp\n  __int64 v88; // r15\n  signed int v89; // ebx\n  signed __int64 v90; // r13\n  __int64 v91; // r12\n  __int64 v92; // r8\n  __int64 v93; // r15\n  signed int v94; // er14\n  __int64 v95; // r13\n  __int64 v96; // rbx\n  const char **v97; // rax\n  int v98; // eax\n  __int64 v99; // rbx\n  __int64 v100; // rax\n  unsigned int v101; // ebx\n  __int64 v102; // rbp\n  _DWORD *v103; // rdi\n  __int64 v104; // r13\n  unsigned int v105; // ebp\n  int v106; // ebx\n  __int64 v107; // rbx\n  unsigned int n; // ebp\n  __int64 *v109; // rdx\n  __int64 v110; // rdx\n  __int64 v111; // rdi\n  unsigned int v112; // eax\n  __int64 v113; // rdi\n  __int64 v114; // rdx\n  char *v115; // rax\n  char *v116; // r13\n  _BOOL8 v117; // r12\n  signed int v118; // ecx\n  signed __int64 k; // rbx\n  __int64 v120; // rbp\n  unsigned __int64 v121; // rdx\n  char *l; // r15\n  char *v123; // rax\n  char v124; // dl\n  signed __int64 v125; // ST20_8\n  int v126; // ST1C_4\n  const char *m; // rcx\n  signed __int64 v128; // rsi\n  int v129; // eax\n  _QWORD *v130; // rax\n  __int64 v131; // rax\n  __int64 v132; // rax\n  _DWORD *v133; // rbx\n  _DWORD *v134; // rsi\n  unsigned int v136; // [rsp+0h] [rbp-E8h]\n  signed __int64 j; // [rsp+0h] [rbp-E8h]\n  signed int v138; // [rsp+Ch] [rbp-DCh]\n  unsigned int v139; // [rsp+10h] [rbp-D8h]\n  __int64 v140; // [rsp+10h] [rbp-D8h]\n  unsigned int v141; // [rsp+10h] [rbp-D8h]\n  unsigned int v142; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v143; // [rsp+18h] [rbp-D0h]\n  __int64 v144; // [rsp+18h] [rbp-D0h]\n  signed __int64 v145; // [rsp+18h] [rbp-D0h]\n  unsigned int v146; // [rsp+18h] [rbp-D0h]\n  unsigned int v147; // [rsp+18h] [rbp-D0h]\n  __int64 v148; // [rsp+20h] [rbp-C8h]\n  signed __int64 v149; // [rsp+20h] [rbp-C8h]\n  signed int v150; // [rsp+20h] [rbp-C8h]\n  __int64 v151; // [rsp+20h] [rbp-C8h]\n  signed __int16 v152; // [rsp+28h] [rbp-C0h]\n  signed int v153; // [rsp+28h] [rbp-C0h]\n  signed int v154; // [rsp+34h] [rbp-B4h]\n  signed int v155; // [rsp+38h] [rbp-B0h]\n  signed int v156; // [rsp+3Ch] [rbp-ACh]\n  char v157; // [rsp+40h] [rbp-A8h]\n  void *v158; // [rsp+48h] [rbp-A0h]\n  __int64 v159; // [rsp+60h] [rbp-88h]\n  int v160; // [rsp+68h] [rbp-80h]\n  __int64 v161; // [rsp+70h] [rbp-78h]\n  void *ptr; // [rsp+78h] [rbp-70h]\n  __int64 v163; // [rsp+80h] [rbp-68h]\n  __int64 v164; // [rsp+88h] [rbp-60h]\n  _QWORD *v165; // [rsp+90h] [rbp-58h]\n  void *v166; // [rsp+98h] [rbp-50h]\n  unsigned __int64 v167; // [rsp+A8h] [rbp-40h]\n\n  v2 = a1;\n  v167 = __readfsqword(0x28u);\n  v159 = a1;\n  v160 = 1;\n  ptr = 0LL;\n  v164 = 0LL;\n  v163 = 0LL;\n  v3 = (void *)buffer_init(a1, a2);\n  v166 = v3;\n  v4 = v3;\n  v161 = *(_QWORD *)(a1 + 8);\n  v5 = strrchr(a2, 47);\n  if ( v5 )\n    buffer_copy_string_len(v4, a2, v5 - a2 + 1);\n  v6 = data_config_init();\n  buffer_copy_string_len(v6, \"global\", 6LL);\n  sub_11589(v6[19]);\n  v7 = v161;\n  if ( *(_DWORD *)(v161 + 16) )\n    ck_assert_failed(\"configfile.c\", 2467LL, \"context.all_configs->used == 0\");\n  *((_DWORD *)v6 + 7) = 0;\n  array_insert_unique(v7, v6);\n  v165 = v6;\n  v136 = strcmp(a2, \"-\");\n  if ( v136 )\n  {\n    v136 = sub_122BB(v2, (char *)&v159, (__int64)a2);\n  }\n  else\n  {\n    v8 = -1LL;\n    v9 = (_QWORD *)chunk_buffer_acquire(a2, \"-\");\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v10 = *((unsigned int *)v9 + 3);\n        v11 = 0;\n        v12 = *((_DWORD *)v9 + 2);\n        if ( (_DWORD)v10 )\n          v11 = v10 - (v12 | (v12 == 0));\n        v13 = v11;\n        v14 = v12 - (v12 != 0);\n        if ( v11 <= 0x3FF )\n        {\n          if ( v14 > 0x1FFFFFF )\n          {\n            log_error(*(_QWORD *)(v2 + 112));\n            if ( !v8 )\n            {\nLABEL_13:\n              v136 = sub_116D4(v2, (char *)&v159, (__int64)\"-\", *v9, v14);\n              goto LABEL_24;\n            }\n            goto LABEL_23;\n          }\n          v13 = chunk_buffer_prepare_append(v9, v10 + v11);\n        }\n        v15 = (char *)(v14 + *v9);\n        v16 = read(0, v15, v13);\n        v8 = v16;\n        if ( v16 <= 0 )\n          break;\n        buffer_commit(v9, v16);\n      }\n      if ( v16 != -1 )\n        break;\n      if ( *__errno_location() != 4 )\n        goto LABEL_23;\n    }\n    if ( !v16 )\n    {\n      if ( !v14 )\n        goto LABEL_25;\n      goto LABEL_13;\n    }\nLABEL_23:\n    v15 = \"configfile.c\";\n    log_perror(*(_QWORD *)(v2 + 112));\n    v136 = -1;\n    if ( !v14 )\n      goto LABEL_25;\nLABEL_24:\n    v15 = (char *)v14;\n    ck_memclear_s(*v9, v14, v14);\nLABEL_25:\n    chunk_buffer_release(v9, v15);\n  }\n  if ( !v136 && v160 && v163 )\n    ck_assert_failed(\"configfile.c\", 2477LL, \"!(0 == ret && context.ok && 0 != context.configs_stack.used)\");\n  vector_free(ptr);\n  ptr = 0LL;\n  v164 = 0LL;\n  v163 = 0LL;\n  buffer_free(v166);\n  if ( !v136 )\n  {\n    v17 = *(_QWORD *)(v2 + 8);\n    v18 = 0LL;\n    v19 = *(_DWORD *)(v17 + 16);\n    while ( v19 > (unsigned int)v18 )\n    {\n      v20 = *(_QWORD *)v17 + 8 * v18;\n      if ( *(_DWORD *)(*(_QWORD *)v20 + 28LL) != (_DWORD)v18 )\n      {\n        v21 = *(_QWORD *)v17 + 8 * v18;\n        while ( 1 )\n        {\n          v22 = *(_QWORD *)v21;\n          if ( (_DWORD)v18 == *(_DWORD *)(*(_QWORD *)v21 + 28LL) )\n            break;\n          v21 += 8LL;\n          if ( *(_QWORD *)v17 + 8 * (v18 + v19 - 1 - (unsigned int)v18) + 8 == v21 )\n            goto LABEL_38;\n        }\n        *(_QWORD *)v21 = *(_QWORD *)v20;\n        *(_QWORD *)v20 = v22;\n      }\nLABEL_38:\n      ++v18;\n    }\n    v23 = &v157;\n    v24 = 6LL;\n    *(_BYTE *)(v2 + 162) = 2;\n    v25 = &v157;\n    while ( v24 )\n    {\n      *(_DWORD *)v25 = 0;\n      v25 += 4;\n      --v24;\n    }\n    if ( !(unsigned int)config_plugin_values_init(v2, &v157, &off_256AE0, \"global\") )\n      return (unsigned int)-1;\n    if ( *((_DWORD *)v158 + 3) )\n    {\n      v139 = 0;\n      v138 = 0;\n      for ( i = (char *)v158 + 16 * *((unsigned int *)v158 + 2); ; i += 16 )\n      {\n        if ( *(_DWORD *)i == -1 )\n          goto LABEL_132;\n        switch ( *(_DWORD *)i )\n        {\n          case 0:\n            v23 = (const char *)*((_QWORD *)i + 1);\n            array_copy_array(*(_QWORD *)(v2 + 280), v23);\n            continue;\n          case 1:\n            *(_BYTE *)(v2 + 195) = *((_DWORD *)i + 2);\n            continue;\n          case 2:\n            *(_BYTE *)(v2 + 198) = *((_DWORD *)i + 2);\n            continue;\n          case 3:\n            *(_WORD *)(v2 + 172) = *((_DWORD *)i + 2);\n            continue;\n          case 4:\n            v27 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v27 + 8) > 1u )\n              *(_QWORD *)(v2 + 208) = v27;\n            continue;\n          case 5:\n            v28 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v28 + 8) > 1u )\n              *(_QWORD *)(v2 + 240) = v28;\n            continue;\n          case 6:\n            v29 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v29 + 8) > 1u )\n              *(_QWORD *)(v2 + 216) = v29;\n            continue;\n          case 7:\n            v30 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v30 + 8) > 1u )\n              *(_QWORD *)(v2 + 224) = v30;\n            continue;\n          case 8:\n            v31 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v31 + 8) > 1u )\n              *(_QWORD *)(v2 + 232) = v31;\n            continue;\n          case 0xB:\n            *(_BYTE *)(v2 + 199) = *((_DWORD *)i + 2);\n            continue;\n          case 0xC:\n            v32 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v32 + 8) > 1u )\n              *(_QWORD *)(v2 + 200) = v32;\n            continue;\n          case 0xD:\n            *(_BYTE *)(v2 + 194) = *((_DWORD *)i + 2);\n            continue;\n          case 0xE:\n            *(_QWORD *)(v2 + 256) = **((_QWORD **)i + 1);\n            continue;\n          case 0xF:\n            v33 = *((_QWORD *)i + 1);\n            if ( *(_DWORD *)(v33 + 8) > 1u )\n              *(_QWORD *)(v2 + 272) = v33;\n            continue;\n          case 0x10:\n            *(_WORD *)(v2 + 166) = *((_DWORD *)i + 2);\n            continue;\n          case 0x11:\n            *(_WORD *)(v2 + 168) = *((_DWORD *)i + 2);\n            continue;\n          case 0x12:\n            *(_WORD *)(v2 + 170) = *((_DWORD *)i + 2);\n            continue;\n          case 0x13:\n            *(_DWORD *)(v2 + 152) = *((_DWORD *)i + 2);\n            continue;\n          case 0x14:\n            chunkqueue_set_chunk_size(*((unsigned int *)i + 2));\n            continue;\n          case 0x15:\n            *(_DWORD *)(v2 + 176) = *((_DWORD *)i + 2);\n            continue;\n          case 0x16:\n            v23 = (const char *)*((_QWORD *)i + 1);\n            array_copy_array(*(_QWORD *)(v2 + 184), v23);\n            continue;\n          case 0x17:\n            v34 = *(_DWORD *)(v2 + 164);\n            v35 = 1;\n            v143 = 0LL;\n            v152 = 1;\n            v148 = *((_QWORD *)i + 1);\n            break;\n          case 0x18:\n            *(_BYTE *)(v2 + 157) = *((_DWORD *)i + 2) != 0;\n            continue;\n          case 0x19:\n            *(_BYTE *)(v2 + 158) = *((_DWORD *)i + 2) != 0;\n            continue;\n          case 0x1A:\n            *(_BYTE *)(v2 + 159) = *((_DWORD *)i + 2) != 0;\n            continue;\n          case 0x1C:\n            v23 = *(const char **)(v2 + 112);\n            v44 = (unsigned int)stat_cache_choose_engine(*((_QWORD *)i + 1), v23) == 0;\n            v45 = 4;\n            if ( v44 )\n              v45 = v138;\n            v138 = v45;\n            continue;\n          case 0x1D:\n            stat_cache_xattrname(**((_QWORD **)i + 1));\n            continue;\n          case 0x1E:\n            v139 = 0;\n            if ( *((_DWORD *)i + 2) )\n            {\n              v23 = \"configfile.c\";\n              log_error(*(_QWORD *)(v2 + 112));\n              v139 = 1;\n              v138 = 4;\n            }\n            continue;\n          case 0x1F:\n            *(_BYTE *)(v2 + 156) = *((_DWORD *)i + 2) != 0;\n            continue;\n          case 0x20:\n            v46 = *((_QWORD *)i + 1);\n            *(_QWORD *)(v2 + 248) = v46;\n            v47 = array_get_element_klen(v46, \"server.h2proto\", 14LL);\n            v48 = config_plugin_value_tobool(v47, 1LL);\n            *(_BYTE *)(v2 + 162) = v48;\n            if ( v48 )\n            {\n              v49 = array_get_element_klen(v46, \"server.h2c\", 10LL);\n              *(_BYTE *)(v2 + 162) = (unsigned __int64)config_plugin_value_tobool(v49, 1LL) + v48;\n            }\n            v50 = array_get_element_klen(v46, \"server.absolute-dir-redirect\", 28LL);\n            v23 = 0LL;\n            *(_BYTE *)(v2 + 163) = config_plugin_value_tobool(v50, 0LL);\n            continue;\n          default:\n            continue;\n        }\n        while ( v143 < *(unsigned int *)(v148 + 16) )\n        {\n          v36 = *(__int64 **)(*(_QWORD *)v148 + 8 * v143);\n          v37 = config_plugin_value_tobool(*(_QWORD *)(*(_QWORD *)v148 + 8 * v143), 2LL);\n          if ( v37 == 2 )\n          {\n            v38 = v36[4];\n            v39 = *v36;\n            v35 = 0;\n            log_error(*(_QWORD *)(v2 + 112));\n          }\n          v23 = \"url-normalize\";\n          if ( (unsigned int)buffer_eq_slen(v36, \"url-normalize\", 13LL) )\n          {\n            if ( !v37 )\n            {\n              v42 = 0;\n              goto LABEL_114;\n            }\n            v41 = 8;\n            goto LABEL_102;\n          }\n          v23 = \"url-normalize-unreserved\";\n          if ( (unsigned int)buffer_eq_slen(v36, \"url-normalize-unreserved\", 24LL) )\n          {\n            v41 = 16;\nLABEL_302:\n            if ( v37 )\n              goto LABEL_102;\n            v34 &= ~v41;\n            goto LABEL_103;\n          }\n          v23 = \"url-normalize-required\";\n          if ( (unsigned int)buffer_eq_slen(v36, \"url-normalize-required\", 22LL) )\n          {\n            v41 = 32;\n            goto LABEL_302;\n          }\n          v23 = \"url-ctrls-reject\";\n          if ( (unsigned int)buffer_eq_slen(v36, \"url-ctrls-reject\", 16LL) )\n          {\n            v41 = 64;\n            goto LABEL_302;\n          }\n          v23 = \"url-path-backslash-trans\";\n          if ( (unsigned int)buffer_eq_slen(v36, \"url-path-backslash-trans\", 24LL) )\n          {\n            v41 = 128;\n            goto LABEL_302;\n          }\n          v23 = \"url-path-2f-decode\";\n          if ( !(unsigned int)buffer_eq_slen(v36, \"url-path-2f-decode\", 18LL) )\n          {\n            v23 = \"url-path-2f-reject\";\n            if ( (unsigned int)buffer_eq_slen(v36, \"url-path-2f-reject\", 18LL) )\n            {\n              v41 = 512;\n            }\n            else\n            {\n              v23 = \"url-path-dotseg-remove\";\n              if ( (unsigned int)buffer_eq_slen(v36, \"url-path-dotseg-remove\", 22LL) )\n              {\n                v41 = 1024;\n              }\n              else\n              {\n                v23 = \"url-path-dotseg-reject\";\n                if ( (unsigned int)buffer_eq_slen(v36, \"url-path-dotseg-reject\", 22LL) )\n                {\n                  v41 = 2048;\n                }\n                else\n                {\n                  v23 = \"url-query-20-plus\";\n                  if ( !(unsigned int)buffer_eq_slen(v36, \"url-query-20-plus\", 17LL) )\n                  {\n                    v23 = \"header-strict\";\n                    if ( (unsigned int)buffer_eq_slen(v36, \"header-strict\", 13LL) )\n                    {\n                      *(_BYTE *)(v2 + 157) = v37;\n                    }\n                    else\n                    {\n                      v23 = \"host-strict\";\n                      if ( (unsigned int)buffer_eq_slen(v36, \"host-strict\", 11LL) )\n                      {\n                        *(_BYTE *)(v2 + 158) = v37;\n                      }\n                      else\n                      {\n                        v23 = \"host-normalize\";\n                        if ( (unsigned int)buffer_eq_slen(v36, \"host-normalize\", 14LL) )\n                        {\n                          *(_BYTE *)(v2 + 159) = v37;\n                        }\n                        else\n                        {\n                          v23 = \"method-get-body\";\n                          if ( (unsigned int)buffer_eq_slen(v36, \"method-get-body\", 15LL) )\n                          {\n                            *(_BYTE *)(v2 + 160) = v37;\n                          }\n                          else\n                          {\n                            v40 = *v36;\n                            v23 = \"configfile.c\";\n                            v35 = 0;\n                            log_error(*(_QWORD *)(v2 + 112));\n                          }\n                        }\n                      }\n                    }\n                    goto LABEL_103;\n                  }\n                  v41 = 4096;\n                }\n              }\n            }\n            goto LABEL_302;\n          }\n          if ( v37 )\n          {\n            v41 = 256;\nLABEL_102:\n            v34 |= v41;\n            goto LABEL_103;\n          }\n          LOWORD(v34) = v34 & 0xFEFF;\n          v152 = 0;\nLABEL_103:\n          ++v143;\n        }\n        v42 = 0;\n        if ( (_WORD)v34 )\n        {\n          v42 = v34 | 8;\n          if ( (v34 & 0x300) == 768 )\n          {\n            v23 = \"configfile.c\";\n            v35 = 0;\n            log_error(*(_QWORD *)(v2 + 112));\n          }\n          if ( (v34 & 0xC00) == 3072 )\n          {\n            v23 = \"configfile.c\";\n            v35 = 0;\n            log_error(*(_QWORD *)(v2 + 112));\n          }\n          if ( !(v34 & 0x30) )\n          {\n            v42 = v34 | 0x18;\n            if ( v152 )\n            {\n              if ( !(v34 & 0x200) )\n                v42 = v34 | 0x118;\n            }\n          }\n        }\nLABEL_114:\n        v43 = 4;\n        if ( v35 )\n          v43 = v138;\n        *(_WORD *)(v2 + 164) = v42;\n        v138 = v43;\n      }\n    }\n    v139 = 0;\n    v138 = 0;\nLABEL_132:\n    if ( !*(_WORD *)(v2 + 172) )\n      *(_WORD *)(v2 + 172) = v139 < 1 ? 80 : 443;\n    v51 = v2;\n    v52 = 0LL;\n    v140 = v2 + 280;\n    v53 = *(_QWORD *)(v2 + 280);\n    v54 = 0;\n    v55 = (unsigned int)(*(_DWORD *)(v53 + 16) - 1);\n    v56 = *(_DWORD *)(v53 + 16);\n    v57 = *(__int64 **)v53;\n    while ( v56 > (unsigned int)v52 )\n    {\n      v58 = 0LL;\n      v59 = v57[v52] + 32;\n      v144 = (unsigned int)(v55 - v52);\n      v60 = (signed __int64)&v57[(unsigned int)(v52 + 1)];\n      while ( v144 != v58 )\n      {\n        v61 = *(_QWORD *)(v60 + 8 * v58);\n        v62 = v55;\n        v63 = v51;\n        v64 = v60;\n        ++v58;\n        v23 = (const char *)(v61 + 32);\n        v65 = buffer_is_equal(v59, v61 + 32);\n        v60 = v64;\n        v51 = v63;\n        v55 = v62;\n        if ( v65 )\n        {\n          ++v54;\n          break;\n        }\n      }\n      ++v52;\n    }\n    v66 = v57;\n    v67 = v56;\n    v68 = v54;\n    v44 = v54 == 0;\n    v69 = v51;\n    if ( !v44 )\n    {\n      v70 = array_init((unsigned int)(v67 - v68), v23);\n      v149 = (signed __int64)&v66[v67];\n      while ( (__int64 *)v149 != v66 )\n      {\n        v71 = *v66;\n        v72 = *(_DWORD *)(v70 + 16);\n        v73 = 0LL;\n        v145 = *v66 + 32;\n        while ( (unsigned int)v73 < v72 )\n        {\n          v74 = *(_QWORD *)(*(_QWORD *)v70 + 8 * v73++);\n          v23 = (const char *)(v74 + 32);\n          if ( (unsigned int)buffer_is_equal(v145, v23) )\n            goto LABEL_150;\n        }\n        if ( (_DWORD)v73 == v72 )\n        {\n          v23 = *(const char **)(v71 + 32);\n          array_insert_value(v70, v23, *(_DWORD *)(v71 + 40) - (unsigned int)(*(_DWORD *)(v71 + 40) != 0));\n        }\nLABEL_150:\n        ++v66;\n      }\n      array_free(*(void **)(v69 + 280));\n      *(_QWORD *)(v69 + 280) = v70;\n    }\n    if ( *(_BYTE *)(v69 + 195) )\n    {\n      v146 = 0;\n      v75 = 0;\n      v150 = 0;\n      v76 = 0;\n      v77 = 0LL;\n      v153 = 1;\n      v156 = 1;\n      v155 = 1;\n      v154 = 1;\n      while ( 1 )\n      {\n        v78 = *(_QWORD *)(v69 + 280);\n        if ( v146 >= *(_DWORD *)(v78 + 16) )\n          break;\n        v23 = (const char *)&unk_4699E;\n        v79 = *(_QWORD *)(*(_QWORD *)v78 + 8LL * v146);\n        v80 = v79 + 32;\n        if ( (unsigned int)buffer_eq_slen(v79 + 32, &unk_4699E, 13LL) )\n        {\n          v154 = 0;\n        }\n        else\n        {\n          v23 = \"mod_staticfile\";\n          if ( (unsigned int)buffer_eq_slen(v79 + 32, \"mod_staticfile\", 14LL) )\n          {\n            v156 = 0;\n          }\n          else\n          {\n            v23 = \"mod_dirlisting\";\n            if ( (unsigned int)buffer_eq_slen(v79 + 32, \"mod_dirlisting\", 14LL) )\n            {\n              v155 = 0;\n            }\n            else\n            {\n              v23 = \"mod_gnutls\";\n              if ( !(unsigned int)buffer_eq_slen(v79 + 32, \"mod_gnutls\", 10LL) )\n              {\n                v23 = \"mod_mbedtls\";\n                if ( !(unsigned int)buffer_eq_slen(v79 + 32, \"mod_mbedtls\", 11LL) )\n                {\n                  v23 = \"mod_nss\";\n                  if ( !(unsigned int)buffer_eq_slen(v79 + 32, \"mod_nss\", 7LL) )\n                  {\n                    v23 = \"mod_openssl\";\n                    if ( !(unsigned int)buffer_eq_slen(v79 + 32, \"mod_openssl\", 11LL) )\n                    {\n                      v23 = \"mod_wolfssl\";\n                      if ( !(unsigned int)buffer_eq_slen(v79 + 32, \"mod_wolfssl\", 11LL) )\n                      {\n                        v81 = *(const char **)(v79 + 32);\n                        if ( !strncmp(v81, \"mod_auth\", 8uLL) )\n                        {\n                          if ( (unsigned int)buffer_eq_slen(v80, \"mod_auth\", 8LL) )\n                          {\n                            if ( v76 || !v77 )\n                            {\n                              v76 = 1;\n                            }\n                            else\n                            {\n                              v76 = 1;\n                              log_error(*(_QWORD *)(v69 + 112));\n                            }\n                          }\n                          else\n                          {\n                            v82 = 1;\n                            if ( v76 )\n                              v82 = v150;\n                            v150 = v82;\n                          }\n                          v23 = \"mod_authn_file\";\n                          v44 = (unsigned int)buffer_eq_slen(v80, \"mod_authn_file\", 14LL) == 0;\n                          v83 = 0;\n                          if ( v44 )\n                            v83 = v153;\n                          v153 = v83;\n                        }\n                        else if ( !strncmp(v81, \"mod_vhostdb\", 0xBuLL) )\n                        {\n                          v23 = \"mod_vhostdb\";\n                          if ( (unsigned int)buffer_eq_slen(v80, \"mod_vhostdb\", 11LL) )\n                          {\n                            v75 |= 2u;\n                          }\n                          else if ( !(v75 & 2) )\n                          {\n                            v75 |= 1u;\n                          }\n                        }\n                        else\n                        {\n                          v23 = \"mod_ajp13\";\n                          if ( !strncmp(v81, \"mod_ajp13\", 9uLL)\n                            || (v23 = \"mod_cgi\", !strncmp(v81, \"mod_cgi\", 7uLL))\n                            || (v23 = \"mod_fastcgi\", !strncmp(v81, \"mod_fastcgi\", 0xBuLL))\n                            || (v23 = \"mod_proxy\", !strncmp(v81, \"mod_proxy\", 9uLL))\n                            || (v23 = \"mod_scgi\", !strncmp(v81, \"mod_scgi\", 8uLL))\n                            || (v23 = \"mod_sockproxy\", !strncmp(v81, \"mod_sockproxy\", 0xDuLL))\n                            || (v23 = \"mod_wstunnel\", !strncmp(v81, \"mod_wstunnel\", 0xCuLL)) )\n                          {\n                            if ( !v77 )\n                              v77 = v81;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ++v146;\n      }\n      if ( v154 )\n      {\n        v23 = (const char *)&unk_4699E;\n        sub_1238A(v140, (__int64)&unk_4699E, 0xDu);\n      }\n      if ( v155 )\n      {\n        v23 = \"mod_dirlisting\";\n        array_insert_value(*(_QWORD *)(v69 + 280), \"mod_dirlisting\", 14LL);\n      }\n      if ( v156 )\n      {\n        v23 = \"mod_staticfile\";\n        array_insert_value(*(_QWORD *)(v69 + 280), \"mod_staticfile\", 14LL);\n      }\n      if ( (unsigned __int8)v76 & (unsigned __int8)v153 )\n      {\n        v84 = *(_QWORD *)(v69 + 8);\n        if ( sub_123FD(*(_QWORD *)(v69 + 8), (__int64)\"htdigest\", 8u)\n          || sub_123FD(v84, (__int64)\"htpasswd\", 8u)\n          || (v23 = \"plain\", sub_123FD(v84, (__int64)\"plain\", 5u)) )\n        {\n          v85 = *(_QWORD *)(v69 + 48);\n          buffer_copy_string_len(*(_QWORD *)(v69 + 48), \"mod_authn_\", 10LL);\n          buffer_append_string_len(v85, \"file\", 4LL);\n          array_insert_value(\n            *(_QWORD *)(v69 + 280),\n            *(_QWORD *)v85,\n            *(_DWORD *)(v85 + 8) - (unsigned int)(*(_DWORD *)(v85 + 8) != 0));\n          v23 = \"configfile.c\";\n          log_error(*(_QWORD *)(v69 + 112));\n        }\n      }\n      if ( v150 )\n      {\n        v23 = \"mod_auth\";\n        sub_1238A(v140, (__int64)\"mod_auth\", 8u);\n      }\n      if ( v75 & 1 )\n      {\n        v23 = \"mod_vhostdb\";\n        sub_1238A(v140, (__int64)\"mod_vhostdb\", 0xBu);\n      }\n    }\n    v86 = *(_QWORD *)(v69 + 280);\n    v87 = -1;\n    v88 = 0LL;\n    v89 = -1;\n    v141 = *(_DWORD *)(v86 + 16);\n    while ( v141 > (unsigned int)v88 )\n    {\n      v23 = \"mod_compress\";\n      v90 = *(_QWORD *)(*(_QWORD *)v86 + 8 * v88) + 32LL;\n      if ( (unsigned int)buffer_eq_slen(v90, \"mod_compress\", 12LL) )\n      {\n        v89 = v88;\n      }\n      else\n      {\n        v23 = \"mod_deflate\";\n        if ( (unsigned int)buffer_eq_slen(v90, \"mod_deflate\", 11LL) )\n          v87 = v88;\n      }\n      ++v88;\n    }\n    v91 = *(_QWORD *)(v69 + 8);\n    v147 = *(_DWORD *)(v91 + 16);\n    if ( v89 >= 0 )\n    {\n      v92 = v69;\n      v93 = 0LL;\n      v94 = v89;\n      while ( v147 > (unsigned int)v93 )\n      {\n        v95 = 0LL;\n        v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v91 + 8 * v93) + 152LL);\n        v142 = *(_DWORD *)(v96 + 16);\n        while ( v142 > (unsigned int)v95 )\n        {\n          v23 = \"compress.\";\n          v151 = v92;\n          v97 = *(const char ***)(*(_QWORD *)v96 + 8 * v95++);\n          v98 = strncmp(*v97, \"compress.\", 9uLL);\n          v92 = v151;\n          if ( !v98 )\n          {\n            v23 = \"configfile.c\";\n            v99 = v94;\n            v69 = v151;\n            log_error(*(_QWORD *)(v151 + 112));\n            LOBYTE(v136) = 1;\n            goto LABEL_224;\n          }\n        }\n        ++v93;\n      }\n      v99 = v94;\n      v69 = v92;\nLABEL_224:\n      v100 = *(_QWORD *)(v69 + 280);\n      if ( v87 < 0 && v136 & 1 )\n      {\n        buffer_copy_string_len(*(_QWORD *)(*(_QWORD *)v100 + 8 * v99) + 32LL, \"mod_deflate\", 11LL);\n      }\n      else\n      {\n        v101 = 0;\n        v102 = array_init((unsigned int)(*(_DWORD *)(v100 + 16) - 1), v23);\n        while ( 1 )\n        {\n          v103 = *(_DWORD **)(v69 + 280);\n          if ( v101 >= v103[4] )\n            break;\n          v104 = *(_QWORD *)(*(_QWORD *)v103 + 8LL * v101);\n          if ( !(unsigned int)buffer_eq_slen(v104 + 32, \"mod_compress\", 12LL) )\n            array_insert_value(\n              v102,\n              *(_QWORD *)(v104 + 32),\n              *(_DWORD *)(v104 + 40) - (unsigned int)(*(_DWORD *)(v104 + 40) != 0));\n          ++v101;\n        }\n        array_free(v103);\n        *(_QWORD *)(v69 + 280) = v102;\n      }\n    }\n    if ( !*(_WORD *)(v69 + 164) )\n    {\nLABEL_234:\n      v105 = 0;\n      v106 = config_feature_bool(v69, \"server.pcre_jit\", 1LL);\n      while ( 1 )\n      {\n        v114 = *(_QWORD *)(v69 + 8);\n        if ( v105 >= *(_DWORD *)(v114 + 16) )\n          break;\n        v113 = *(_QWORD *)(*(_QWORD *)v114 + 8LL * v105);\n        if ( !((*(_DWORD *)(v113 + 36) - 2) & 0xFFFFFFFD)\n          && !(unsigned int)data_config_pcre_compile(v113, v106, *(_QWORD *)(v69 + 112)) )\n        {\n          v138 = 4;\n          break;\n        }\n        ++v105;\n      }\n      free(v158);\n      if ( !v138 )\n      {\n        v115 = (char *)calloc(1uLL, 0xA0uLL);\n        v116 = v115;\n        if ( !v115 )\n          ck_assert_failed(\"configfile.c\", 1035LL, \"p\");\n        *(_QWORD *)(v69 + 320) = v115;\n        if ( (unsigned int)config_plugin_values_init(v69, v115, &off_2568A0, \"base\") )\n        {\n          v117 = *(_DWORD *)(*((_QWORD *)v116 + 1) + 12LL) == 0;\n          for ( j = 16 * v117; ; j += 16LL )\n          {\n            v118 = *((_DWORD *)v116 + 1);\n            if ( (signed int)v117 >= v118 )\n              break;\n            for ( k = *((_QWORD *)v116 + 1) + 16LL * *(unsigned int *)(*((_QWORD *)v116 + 1) + j + 8);\n                  *(_DWORD *)k != -1;\n                  k += 16LL )\n            {\n              switch ( *(_DWORD *)k )\n              {\n                case 1:\n                case 8:\n                case 9:\n                case 0xA:\n                  if ( *(_DWORD *)(*(_QWORD *)(k + 8) + 8LL) <= 1u )\n                    goto LABEL_278;\n                  break;\n                case 2:\n                  v120 = *(_QWORD *)(k + 8);\n                  if ( *(_DWORD *)(v120 + 8) <= 1u )\n                  {\n                    if ( (_DWORD)v117 )\nLABEL_278:\n                      *(_QWORD *)(k + 8) = 0LL;\n                  }\n                  else\n                  {\n                    for ( l = strchr(*(const char **)v120, 10); ; l = strchr(l + 2, 10) )\n                    {\n                      v123 = *(char **)v120;\n                      if ( !l )\n                        break;\n                      v124 = l[1];\n                      if ( v124 != 32 && v124 != 9 )\n                      {\n                        v125 = l - v123;\n                        v126 = *(_DWORD *)(v120 + 8);\n                        buffer_string_prepare_append(v120, 1LL);\n                        l = (char *)(v125 + *(_QWORD *)v120);\n                        memmove(l + 2, l + 1, v126 - (unsigned int)(v126 != 0) - 1LL - v125);\n                        l[1] = 32;\n                        buffer_commit(v120, 1LL);\n                      }\n                    }\n                    for ( m = *(const char **)v120; ; ++m )\n                    {\n                      LOBYTE(v121) = *m;\n                      if ( *m > 0x20u )\n                        break;\n                      v128 = 4294977024LL;\n                      if ( !_bittest64(&v128, v121) )\n                      {\n                        if ( !(_BYTE)v121 )\n                        {\n                          *v123 = 0;\n                          *(_DWORD *)(v120 + 8) = 1;\n                        }\n                        goto LABEL_284;\n                      }\n                    }\n                  }\n                  break;\n                case 0x10:\n                case 0x11:\n                  v129 = *(_DWORD *)(k + 8);\n                  if ( v129 & 2 )\n                    *(_WORD *)(k + 8) = v129 | 1;\n                  break;\n                case 0x12:\n                  v130 = malloc(0x10uLL);\n                  if ( !v130 )\n                    ck_assert_failed(\"configfile.c\", 1114LL, \"cnt\");\n                  *v130 = 0LL;\n                  v130[1] = (unsigned __int64)*(unsigned __int16 *)(k + 8) << 10;\n                  *(_QWORD *)(k + 8) = v130;\n                  *(_DWORD *)(k + 4) = 10;\n                  break;\n                default:\n                  continue;\n              }\nLABEL_284:\n              ;\n            }\n            LODWORD(v117) = v117 + 1;\n          }\n          v131 = *(_QWORD *)(v69 + 112);\n          v116[94] = 1;\n          *(_DWORD *)(v116 + 89) = 34013441;\n          *((_QWORD *)v116 + 8) = v131;\n          *(_QWORD *)(v116 + 76) = 101331249314201700LL;\n          *((_DWORD *)v116 + 6) = *(unsigned __int16 *)(v69 + 164) | (*(_BYTE *)(v69 + 160) >= 1u ? 0x8000 : 0) | (*(_BYTE *)(v69 + 159) >= 1u ? 4 : 0) | (*(_BYTE *)(v69 + 158) >= 1u ? 6 : 0) | (*(_BYTE *)(v69 + 157) != 0);\n          *((_QWORD *)v116 + 4) = v69 + 296;\n          v116[96] = *(_BYTE *)(v69 + 162);\n          if ( v118 > 0 )\n          {\n            v132 = *((_QWORD *)v116 + 1);\n            if ( *(_DWORD *)(v132 + 12) )\n            {\n              v133 = (_DWORD *)(v132 + 16LL * *(unsigned int *)(v132 + 8));\n              while ( *v133 != -1 )\n              {\n                v134 = v133;\n                v133 += 4;\n                sub_28D50(v116 + 24, v134);\n              }\n            }\n          }\n          v44 = *((_WORD *)v116 + 49) == 0;\n          *((_DWORD *)v116 + 7) = *(_DWORD *)(v69 + 152);\n          v116[104] = *(_BYTE *)(v69 + 156);\n          if ( !v44 )\n            v116[104] = 1;\n          request_config_set_defaults((__int64)(v116 + 24));\n          return 0;\n        }\n      }\n      return (unsigned int)-1;\n    }\n    v107 = *(_QWORD *)(v69 + 48);\n    for ( n = 0; ; ++n )\n    {\n      v109 = *(__int64 **)(v69 + 8);\n      if ( n >= *((_DWORD *)v109 + 4) )\n        goto LABEL_234;\n      v110 = *v109;\n      v111 = *(_QWORD *)(v110 + 8LL * n);\n      if ( *(_DWORD *)(v111 + 32) == 9 )\n      {\n        v112 = *(_DWORD *)(v111 + 36);\n        if ( v112 == 2 )\n          goto LABEL_244;\n        if ( v112 <= 2 )\n        {\n          if ( v112 != 1 )\n            continue;\nLABEL_244:\n          pcre_keyvalue_burl_normalize_key(v111 + 64, v107, v110, v55);\n          continue;\n        }\n        if ( v112 == 3 || v112 == 4 )\n          goto LABEL_244;\n      }\n    }\n  }\n  return v136;\n}\n", 
            "funcStartAddr": "0x132a7L", 
            "funcEndAddr": "0x14850L", 
            "funcName": "config_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_set_defaults(__int64 a1)\n{\n  __int64 v1; // rbx\n  signed __int64 v2; // rdi\n  unsigned int v3; // ebp\n  __int64 v4; // rsi\n  __int64 v5; // r12\n  const char **v6; // rax\n  __int64 v7; // r8\n  __int64 v8; // r8\n  char *v9; // rsi\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // r14\n  unsigned __int64 v13; // r13\n  unsigned int v14; // ebp\n  __int64 v15; // rax\n  __int64 v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // r8\n  unsigned int v20; // edx\n  const char **v21; // rbx\n  __int64 *v22; // r13\n  int v23; // er14\n  __int64 v24; // rsi\n  struct stat64 stat_buf; // [rsp+10h] [rbp-168h]\n  struct stat64 v27; // [rsp+A0h] [rbp-D8h]\n  unsigned __int64 v28; // [rsp+138h] [rbp-40h]\n\n  v1 = a1;\n  v2 = a1 + 256;\n  v3 = -1;\n  v4 = *(_QWORD *)(v2 - 144);\n  v5 = *(_QWORD *)(v2 + 64);\n  v28 = __readfsqword(0x28u);\n  if ( (signed int)fdevent_config((const char **)v2, v4) > 0 )\n  {\n    v6 = *(const char ***)(v1 + 216);\n    if ( v6 )\n    {\n      v3 = __xstat64(1, *v6, &stat_buf);\n      if ( v3 == -1 )\n      {\n        v7 = **(_QWORD **)(v1 + 216);\n        log_error(*(_QWORD *)(v1 + 112));\n        return v3;\n      }\n      if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      {\n        v3 = -1;\n        v8 = **(_QWORD **)(v1 + 216);\n        log_error(*(_QWORD *)(v1 + 112));\n        return v3;\n      }\n    }\n    if ( !*(_DWORD *)(*(_QWORD *)(v1 + 184) + 16LL) )\n    {\n      v9 = getenv(\"TMPDIR\");\n      if ( !v9 )\n        v9 = \"/var/tmp\";\n      array_insert_value(*(_QWORD *)(v1 + 184), v9, strlen(v9));\n    }\n    if ( *(_DWORD *)(*(_QWORD *)(v1 + 184) + 16LL) )\n    {\n      v11 = *(_QWORD *)(v1 + 216);\n      v12 = *(__int64 **)(v1 + 48);\n      *((_DWORD *)v12 + 2) = 0;\n      if ( v11 )\n        buffer_copy_string_len(v12, *(_QWORD *)v11, *(_DWORD *)(v11 + 8) - (unsigned int)(*(_DWORD *)(v11 + 8) != 0));\n      v13 = 0LL;\n      v14 = *((_DWORD *)v12 + 2) - (*((_DWORD *)v12 + 2) != 0);\n      while ( 1 )\n      {\n        v15 = *(_QWORD *)(v1 + 184);\n        if ( *(unsigned int *)(v15 + 16) <= v13 )\n          break;\n        v16 = *(_QWORD *)(*(_QWORD *)v15 + 8 * v13);\n        if ( v14 )\n        {\n          *(_BYTE *)(*v12 + v14) = 0;\n          v17 = *(_QWORD *)(v16 + 32);\n          *((_DWORD *)v12 + 2) = v14 + 1;\n          buffer_append_path_len(v12, v17, *(_DWORD *)(v16 + 40) - (unsigned int)(*(_DWORD *)(v16 + 40) != 0));\n        }\n        else\n        {\n          buffer_copy_string_len(\n            v12,\n            *(_QWORD *)(v16 + 32),\n            *(_DWORD *)(v16 + 40) - (unsigned int)(*(_DWORD *)(v16 + 40) != 0));\n        }\n        if ( __xstat64(1, (const char *)*v12, &stat_buf) == -1 )\n        {\n          v18 = *v12;\n          log_error(*(_QWORD *)(v1 + 112));\n        }\n        else if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n        {\n          v19 = *v12;\n          log_error(*(_QWORD *)(v1 + 112));\n        }\n        ++v13;\n      }\n    }\n    chunkqueue_set_tempdirs_default(*(_QWORD *)(v1 + 184), *(unsigned int *)(v1 + 176));\n    v10 = *(_QWORD *)(v5 + 40);\n    if ( v10 && (v20 = *(_DWORD *)(v10 + 8), v20 > 1) )\n    {\n      if ( *(_BYTE *)(v5 + 92) == 2 )\n      {\n        *(_BYTE *)(v5 + 92) = 0;\n        v21 = *(const char ***)(v1 + 48);\n        buffer_copy_string_len_lc(v21, *(_QWORD *)v10, v20 - 1);\n        v3 = __xstat64(1, *v21, &stat_buf);\n        if ( !v3 )\n        {\n          v22 = *(__int64 **)(v5 + 40);\n          v23 = buffer_is_equal(v21, *(_QWORD *)(v5 + 40));\n          v24 = *v22;\n          buffer_copy_string_len(v21, *v22, *((_DWORD *)v22 + 2) - (unsigned int)(*((_DWORD *)v22 + 2) != 0));\n          buffer_to_upper(v21, v24);\n          if ( v23 && (unsigned int)buffer_is_equal(v21, *(_QWORD *)(v5 + 40)) )\n          {\n            *(_BYTE *)(v5 + 92) = 0;\n            return v3;\n          }\n          v3 = __xstat64(1, *v21, &v27);\n          if ( !v3 && stat_buf.st_ino == v27.st_ino )\n          {\n            *(_BYTE *)(v5 + 92) = 1;\n            return v3;\n          }\n        }\n      }\n      v3 = 0;\n    }\n    else\n    {\n      v3 = -1;\n      log_error(*(_QWORD *)(v1 + 112));\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x14850L", 
            "funcEndAddr": "0x14be2L", 
            "funcName": "config_set_defaults"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14BE2(unsigned __int8 a1, void **a2)\n{\n  __int64 result; // rax\n\n  if ( a1 == 38 )\n  {\nLABEL_11:\n    if ( *a2 )\n      result = (*(__int64 (**)(void))(*((_QWORD *)*a2 + 2) + 8LL))();\n    return result;\n  }\n  if ( a1 <= 0x26u )\n  {\n    if ( a1 != 36 && a1 <= 0x24u )\n    {\n      if ( (unsigned __int8)(a1 - 1) > 0x19u )\n        return result;\n      return buffer_free(*a2);\n    }\n    goto LABEL_11;\n  }\n  if ( a1 < 0x29u )\n    return result;\n  if ( a1 <= 0x2Au )\n    return array_free(*a2);\n  if ( a1 <= 0x2Cu )\n    return buffer_free(*a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x14be2L", 
            "funcEndAddr": "0x14c2eL", 
            "funcName": "sub_14BE2"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14C2E(signed int *a1)\n{\n  unsigned int v1; // ebp\n  __int64 v2; // rdx\n  signed __int64 v3; // rdx\n\n  v1 = 0;\n  v2 = *a1;\n  if ( (signed int)v2 >= 0 )\n  {\n    v3 = 4 * (v2 + 1);\n    v1 = LOBYTE(a1[v3 + 1]);\n    sub_14BE2(a1[v3 + 1], (void **)&a1[v3 + 2]);\n    --*a1;\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x14c2eL", 
            "funcEndAddr": "0x14c60L", 
            "funcName": "sub_14C2E"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14C60(signed int *a1, int a2, int a3, __int64 *a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rbp\n  __int64 result; // rax\n  signed __int64 v7; // rdi\n  __int64 v8; // [rsp-18h] [rbp-18h]\n\n  v4 = *a1;\n  *a1 = v4 + 1;\n  if ( (signed int)v4 + 1 <= 99 )\n  {\n    v7 = (signed __int64)&a1[4 * v4];\n    *(_DWORD *)(v7 + 32) = a2;\n    *(_DWORD *)(v7 + 36) = a3;\n    result = *a4;\n    *(_QWORD *)(v7 + 40) = *a4;\n  }\n  else\n  {\n    v5 = *((_QWORD *)a1 + 1);\n    *a1 = v4;\n    while ( *a1 >= 0 )\n      sub_14C2E(a1);\n    *((_QWORD *)a1 + 1) = v5;\n    result = v8;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x14c60L", 
            "funcEndAddr": "0x14cabL", 
            "funcName": "sub_14C60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14CAB(__int64 a1)\n{\n  __int64 v1; // rbp\n  __int64 v3; // [rsp+0h] [rbp-18h]\n\n  v1 = *(_QWORD *)(a1 + 8);\n  while ( *(_DWORD *)a1 >= 0 )\n    sub_14C2E((signed int *)a1);\n  *(_QWORD *)(a1 + 8) = v1;\n  return v3;\n}\n", 
            "funcStartAddr": "0x14cabL", 
            "funcEndAddr": "0x14ccfL", 
            "funcName": "sub_14CAB"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14CCF(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  __int64 v3; // rbx\n  unsigned int v4; // eax\n  int v5; // edx\n  __int64 v6; // rax\n  signed __int64 v7; // r13\n  __int64 v8; // rbp\n  FILE *v9; // rsi\n  signed __int64 v10; // r14\n  unsigned __int64 i; // r13\n  __int64 *v12; // rbp\n  int v13; // edx\n  __int64 v14; // r15\n  __int64 v15; // rsi\n  int v16; // eax\n  __int64 v18; // [rsp+8h] [rbp-40h]\n\n  v2 = a2;\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 + 24);\n  v5 = *(_DWORD *)(a2 + 24);\n  if ( v4 != v5 )\n  {\n    if ( v4 )\n    {\n      if ( v4 == 2 && !v5 )\n      {\n        v6 = array_data_string_init();\n        v7 = v6 + 32;\n        v8 = v6;\n        buffer_append_int(v6 + 32, *(signed int *)(a1 + 28));\n        buffer_append_string_len(\n          v7,\n          *(_QWORD *)(a2 + 32),\n          *(_DWORD *)(a2 + 40) - (unsigned int)(*(_DWORD *)(a2 + 40) != 0));\n        v3 = v8;\n        (*(void (__fastcall **)(__int64))(*(_QWORD *)(a1 + 16) + 8LL))(a1);\n        return v3;\n      }\n    }\n    else if ( v5 == 2 )\n    {\n      buffer_append_int(a1 + 32, *(signed int *)(a2 + 28));\n      return v3;\n    }\n    v9 = stderr;\n    fputs(\"data type mismatch, cannot merge\\n\", stderr);\n    v3 = 0LL;\n    (*(void (__fastcall **)(__int64, FILE *))(*(_QWORD *)(a1 + 16) + 8LL))(a1, v9);\n    return v3;\n  }\n  if ( v4 == 1 )\n  {\n    v10 = a1 + 32;\n    for ( i = 0LL; *(unsigned int *)(v2 + 48) > i; ++i )\n    {\n      v12 = *(__int64 **)(*(_QWORD *)(v2 + 32) + 8 * i);\n      if ( v12 )\n      {\n        v13 = *((_DWORD *)v12 + 2);\n        if ( v13 && (v18 = *v12, (v14 = array_get_element_klen(v10, *v12, (unsigned int)(v13 - 1))) != 0) )\n        {\n          __fprintf_chk(stderr, 1LL, \"Duplicate array-key '%s'\\n\", v18);\n          v16 = *(_DWORD *)(v14 + 24);\n          if ( v16 != *((_DWORD *)v12 + 6) )\n            goto LABEL_26;\n          if ( v16 )\n          {\n            if ( v16 != 2 || *((_DWORD *)v12 + 7) != *(_DWORD *)(v14 + 28) )\n            {\nLABEL_26:\n              v3 = 0LL;\n              (*(void (__fastcall **)(__int64))(*(_QWORD *)(a1 + 16) + 8LL))(a1);\n              return v3;\n            }\n          }\n          else if ( !(unsigned int)buffer_is_equal(v12 + 4, v14 + 32) )\n          {\n            goto LABEL_26;\n          }\n        }\n        else\n        {\n          v15 = (*(__int64 (__fastcall **)(__int64 *))v12[2])(v12);\n          array_insert_unique(v10, v15);\n        }\n      }\n    }\n  }\n  else if ( v4 < 1 )\n  {\n    buffer_append_string_len(\n      a1 + 32,\n      *(_QWORD *)(a2 + 32),\n      *(_DWORD *)(a2 + 40) - (unsigned int)(*(_DWORD *)(a2 + 40) != 0));\n  }\n  else\n  {\n    if ( v4 != 2 )\n      ck_assert_failed(\"./configparser.y\", 131LL, \"0\");\n    *(_DWORD *)(a1 + 28) += *(_DWORD *)(a2 + 28);\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x14ccfL", 
            "funcEndAddr": "0x14ea6L", 
            "funcName": "sub_14CCF"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14EA6(__int64 a1, __int64 *a2)\n{\n  __int64 *v2; // rbp\n  __int64 i; // rbx\n  __int64 v4; // rsi\n  __int64 v5; // rax\n  __int64 result; // rax\n\n  v2 = a2;\n  for ( i = a1; i; i = *(_QWORD *)(i + 40) )\n  {\n    v4 = *v2;\n    v5 = array_get_element_klen(\n           *(_QWORD *)(i + 152),\n           *v2,\n           *((_DWORD *)v2 + 2) - (unsigned int)(*((_DWORD *)v2 + 2) != 0));\n    if ( v5 )\n    {\n      result = (**(__int64 (__fastcall ***)(__int64, __int64))(v5 + 16))(v5, v4);\n      *(_DWORD *)(result + 8) = 0;\n      return result;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x14ea6L", 
            "funcEndAddr": "0x14ef6L", 
            "funcName": "sub_14EA6"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14EF6(_QWORD *a1)\n{\n  __int64 v1; // rdx\n  __int64 result; // rax\n  __int64 v3; // rcx\n  signed __int64 v4; // rdx\n\n  v1 = a1[4];\n  result = a1[6];\n  v3 = a1[3];\n  if ( !v1 )\n    ck_assert_failed(\"configfile.h\", 23LL, \"v->used > 0\");\n  v4 = v1 - 1;\n  a1[4] = v4;\n  a1[6] = *(_QWORD *)(v3 + 8 * v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x14ef6L", 
            "funcEndAddr": "0x14f33L", 
            "funcName": "sub_14EF6"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_14F33(_QWORD *a1)\n{\n  unsigned __int64 v1; // rcx\n  unsigned __int64 v2; // rdx\n\n  v1 = a1[2];\n  if ( v1 == a1[1] )\n  {\n    if ( v1 > 0xFFFFFFFFFFFFFFFDLL )\n      ck_assert_failed(\"configfile.h\", 23LL, \"v->used < SIZE_MAX - p\");\n    v2 = (v1 + 16) & 0xFFFFFFFFFFFFFFF0LL;\n    if ( v2 < v1 + 1 )\n      v2 = v1 + 1;\n    a1[2] = v2;\n    *a1 = vector_realloc(*a1, 8LL);\n  }\n}\n", 
            "funcStartAddr": "0x14f33L", 
            "funcEndAddr": "0x14f89L", 
            "funcName": "sub_14F33"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14F89(_QWORD *a1, __int64 a2, int a3)\n{\n  _QWORD *v3; // rbx\n  __int64 v4; // rdx\n  __int64 v5; // rdi\n  int v6; // eax\n  __int64 v7; // r12\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // r12\n  __int64 result; // rax\n  __int64 v12; // rdx\n\n  v3 = a1;\n  if ( a3 )\n  {\n    v4 = a1[6];\n    v5 = a1[2];\n    v6 = *(_DWORD *)(v5 + 16);\n    *(_DWORD *)(a2 + 28) = v6;\n    if ( v6 <= *(_DWORD *)(v4 + 28) )\n      ck_assert_failed(\"./configparser.y\", 28LL, \"dc->context_ndx > ctx->current->context_ndx\");\n    array_insert_unique(v5, a2);\n    v7 = v3[6];\n    *(_QWORD *)(a2 + 40) = v7;\n    sub_14F33((_QWORD *)(v7 + 128));\n    v8 = *(_QWORD *)(v7 + 136);\n    v9 = *(_QWORD *)(v7 + 128);\n    *(_QWORD *)(v7 + 136) = v8 + 1;\n    *(_QWORD *)(v9 + 8 * v8) = a2;\n  }\n  v10 = v3[6];\n  if ( v3[4] && !*(_DWORD *)(v10 + 28) )\n  {\n    fputs(\"Cannot use conditionals inside a global { ... } block\\n\", stderr);\n    exit(-1);\n  }\n  sub_14F33(v3 + 3);\n  result = v3[4];\n  v12 = v3[3];\n  v3[4] = result + 1;\n  *(_QWORD *)(v12 + 8 * result) = v10;\n  v3[6] = a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x14f89L", 
            "funcEndAddr": "0x15050L", 
            "funcName": "sub_14F89"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall configparserAlloc(__int64 (__fastcall *a1)(signed __int64))\n{\n  _DWORD *result; // rax\n\n  result = (_DWORD *)a1(1616LL);\n  if ( result )\n    *result = -1;\n  return result;\n}\n", 
            "funcStartAddr": "0x15050L", 
            "funcEndAddr": "0x1506bL", 
            "funcName": "configparserAlloc"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall configparserFree(signed int *a1, __int64 (__fastcall *a2)(signed int *, _QWORD))\n{\n  __int64 result; // rax\n\n  if ( a1 )\n  {\n    while ( *a1 >= 0 )\n      sub_14C2E(a1);\n    result = a2(a1, a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1506bL", 
            "funcEndAddr": "0x15094L", 
            "funcName": "configparserFree"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall configparser(signed __int64 a1, signed int a2, __int64 a3, __int64 a4)\n{\n  signed int *v4; // r15\n  signed __int64 v5; // rbp\n  __int64 v6; // rdx\n  int v7; // eax\n  __int64 v8; // rax\n  int v9; // esi\n  int v10; // eax\n  __int64 v11; // rsi\n  signed __int64 v12; // r13\n  __int64 v13; // r12\n  signed int *v14; // rbx\n  int v15; // eax\n  __int64 *v16; // r13\n  __int64 v17; // r8\n  __int64 v18; // r14\n  __int64 v19; // r8\n  __int64 v20; // rdi\n  __int64 v21; // r14\n  const char *v22; // r13\n  __int64 *v23; // rax\n  __int64 v24; // r8\n  __int64 v25; // rdi\n  __int64 *v26; // r14\n  __int64 v27; // r13\n  __int64 v28; // r8\n  __int64 v29; // rax\n  __int64 v30; // r13\n  __int64 v31; // rdi\n  const char **v32; // rbx\n  const char *v33; // rdi\n  bool v34; // zf\n  __int64 v35; // rax\n  __int64 v36; // rdi\n  __int64 v37; // rdi\n  __int64 *v38; // r13\n  __int64 v39; // rbx\n  char *v40; // r13\n  __int64 v41; // rbx\n  const char *v42; // rdx\n  signed __int64 v43; // rcx\n  __int64 v44; // rax\n  _OWORD *v45; // rdx\n  int *v46; // rax\n  int *v47; // rbx\n  int v48; // eax\n  char *v49; // r13\n  const unsigned __int16 *v50; // rdx\n  __int64 v51; // rax\n  __int64 v52; // rdx\n  __int64 v53; // rax\n  void **v54; // rsi\n  __int64 v55; // rax\n  __int64 *v56; // r13\n  __int64 v57; // rcx\n  int v58; // edx\n  __int64 v59; // r14\n  __int64 v60; // ST10_8\n  __int64 v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rdi\n  __int64 v64; // rax\n  __int64 v65; // rax\n  __int64 v66; // rsi\n  __int64 v67; // rax\n  __int64 v68; // rdi\n  __int64 v69; // rax\n  __int64 v70; // rax\n  __int64 v71; // rdx\n  __int64 v72; // rax\n  __int64 v73; // rcx\n  __int64 *v74; // rax\n  __int64 v75; // rdx\n  int v76; // edi\n  int v77; // esi\n  unsigned int v78; // ecx\n  __int64 v79; // rax\n  __int64 v80; // r13\n  __int64 v81; // r14\n  __int64 v82; // rdx\n  __int64 v83; // rax\n  FILE *v84; // rsi\n  __int64 v85; // rdi\n  __int64 v86; // rbp\n  unsigned int v87; // ecx\n  const char *v88; // rax\n  __int64 v89; // rdx\n  __int64 v90; // r14\n  __int64 v91; // rcx\n  __int64 v92; // rsi\n  __int64 v93; // rcx\n  __int64 v94; // rdx\n  int v95; // eax\n  __int64 v96; // rax\n  _QWORD *v97; // r13\n  int v98; // eax\n  _BOOL8 v99; // rdx\n  int v100; // eax\n  _QWORD *v101; // rcx\n  __int64 v102; // r14\n  const char **v103; // r14\n  __int64 v104; // rdx\n  signed __int64 v105; // r8\n  int v106; // eax\n  __int64 v107; // rcx\n  _BYTE *v108; // rax\n  void *v109; // rdi\n  _QWORD *v110; // rbx\n  __int64 v111; // rbx\n  int v112; // eax\n  __int64 v113; // rax\n  int v114; // edx\n  __int64 v115; // rsi\n  __int64 v116; // rax\n  __int64 v117; // rdx\n  int v118; // edx\n  int v119; // ebx\n  __int64 v120; // rcx\n  int v121; // eax\n  __int64 v122; // rax\n  int v123; // esi\n  __int64 v124; // rdx\n  int v125; // eax\n  int v126; // esi\n  __int64 v127; // rax\n  __int64 v128; // rax\n  __int64 v129; // rbx\n  signed int v131; // [rsp+Ch] [rbp-14Ch]\n  __int64 v132; // [rsp+10h] [rbp-148h]\n  __int64 v133; // [rsp+10h] [rbp-148h]\n  __int64 v134; // [rsp+10h] [rbp-148h]\n  __int64 v135; // [rsp+10h] [rbp-148h]\n  __int64 v136; // [rsp+18h] [rbp-140h]\n  __int64 v137; // [rsp+20h] [rbp-138h]\n  signed int v138; // [rsp+28h] [rbp-130h]\n  signed int v139; // [rsp+2Ch] [rbp-12Ch]\n  int v140; // [rsp+30h] [rbp-128h]\n  int v141; // [rsp+34h] [rbp-124h]\n  int v142[4]; // [rsp+38h] [rbp-120h]\n  _QWORD *v143; // [rsp+38h] [rbp-120h]\n  __int64 v144; // [rsp+48h] [rbp-110h]\n  __int64 v145; // [rsp+50h] [rbp-108h]\n  char *endptr; // [rsp+58h] [rbp-100h]\n  __int64 v147; // [rsp+60h] [rbp-F8h]\n  __int64 v148; // [rsp+68h] [rbp-F0h]\n  const char *v149; // [rsp+70h] [rbp-E8h]\n  __int64 v150; // [rsp+78h] [rbp-E0h]\n  const char *v151; // [rsp+80h] [rbp-D8h]\n  __int64 v152; // [rsp+88h] [rbp-D0h]\n  __int64 v153; // [rsp+90h] [rbp-C8h]\n  __int64 v154; // [rsp+98h] [rbp-C0h]\n  const char *v155; // [rsp+A0h] [rbp-B8h]\n  __int64 v156; // [rsp+A8h] [rbp-B0h]\n  __int64 v157; // [rsp+B0h] [rbp-A8h]\n  __int64 v158; // [rsp+B8h] [rbp-A0h]\n  const char *v159; // [rsp+C0h] [rbp-98h]\n  __int64 v160; // [rsp+C8h] [rbp-90h]\n  const char *v161; // [rsp+D0h] [rbp-88h]\n  __int64 v162; // [rsp+D8h] [rbp-80h]\n  const char *v163; // [rsp+E0h] [rbp-78h]\n  __int64 v164; // [rsp+E8h] [rbp-70h]\n  __int64 v165; // [rsp+F0h] [rbp-68h]\n  __int64 v166; // [rsp+F8h] [rbp-60h]\n  char *v167; // [rsp+100h] [rbp-58h]\n  __int64 v168; // [rsp+108h] [rbp-50h]\n  unsigned __int64 v169; // [rsp+118h] [rbp-40h]\n\n  v4 = (signed int *)a1;\n  v169 = __readfsqword(0x28u);\n  v138 = a2;\n  if ( *(_DWORD *)a1 >= 0 )\n    goto LABEL_4;\n  if ( a2 )\n  {\n    *(_QWORD *)(a1 + 16) = 0LL;\n    *(_QWORD *)a1 = -4294967296LL;\nLABEL_4:\n    v144 = a3;\n    *(_QWORD *)(a1 + 8) = a4;\n    v139 = 0;\n    v131 = a2;\n    do\n    {\n      v5 = (signed __int64)&v4[4 * *v4];\n      v6 = *(signed int *)(v5 + 16);\n      v7 = byte_47EE0[v6];\n      if ( v7 == -7 )\n        goto LABEL_253;\n      if ( v131 == 51 )\n        goto LABEL_247;\n      LODWORD(v8) = v131 + v7;\n      if ( (unsigned int)v8 <= 0x89 && (v8 = (signed int)v8, v131 == byte_47F40[(signed int)v8]) )\n        v9 = byte_47FE0[v8];\n      else\nLABEL_253:\n        v9 = (unsigned __int8)aHrgijrkrrderhr[v6];\n      if ( v9 > 69 )\n      {\n        if ( v9 > 113 )\n        {\n          if ( v9 != 114 )\n          {\nLABEL_247:\n            sub_14CAB((__int64)v4);\n            return __readfsqword(0x28u) ^ v169;\n          }\n          if ( *(_DWORD *)(v5 + 20) == 27 || v139 )\n          {\n            a1 = (unsigned __int8)v131;\n            sub_14BE2(v131, (void **)&v144);\n            v131 = 51;\n          }\n          else\n          {\n            while ( 1 )\n            {\n              v127 = *v4;\n              if ( (signed int)v127 < 0 )\n                break;\n              v124 = v4[4 * (v127 + 1)];\n              v125 = byte_47EE0[v124];\n              if ( v125 == -7\n                || (LODWORD(v128) = v125 + 27, (unsigned int)v128 > 0x89)\n                || (v128 = (signed int)v128, byte_47F40[(signed int)v128] != 27) )\n              {\n                v126 = (unsigned __int8)aHrgijrkrrderhr[v124];\n              }\n              else\n              {\n                v126 = byte_47FE0[v128];\n              }\n              if ( v126 <= 69 )\n              {\n                if ( v131 )\n                {\n                  a1 = (signed __int64)v4;\n                  LODWORD(endptr) = 0;\n                  sub_14C60(v4, v126, 27, (__int64 *)&endptr);\n                  goto LABEL_246;\n                }\n                break;\n              }\n              sub_14C2E(v4);\n            }\n            a1 = (unsigned __int8)v131;\n            sub_14BE2(v131, (void **)&v144);\n            v129 = *((_QWORD *)v4 + 1);\n            while ( *v4 >= 0 )\n            {\n              a1 = (signed __int64)v4;\n              sub_14C2E(v4);\n            }\n            *(_DWORD *)(v129 + 8) = 0;\n            v131 = 51;\n            *((_QWORD *)v4 + 1) = v129;\n          }\nLABEL_246:\n          v4[1] = 3;\n          v139 = 1;\n        }\n        else\n        {\n          v10 = v9 - 70;\n          v11 = (unsigned int)(v9 - 75);\n          v12 = 4 * (*v4 + 1LL);\n          v13 = *((_QWORD *)v4 + 1);\n          v141 = v10;\n          v14 = &v4[v12];\n          switch ( (_DWORD)v11 )\n          {\n            case 0:\n              *((_QWORD *)v14 - 1) = 0LL;\n              a1 = 1LL;\n              sub_14BE2(1u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 3:\n            case 0x15:\n              a1 = 1LL;\n              sub_14BE2(1u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 4:\n              if ( *(_DWORD *)(v13 + 8) )\n              {\n                buffer_copy_string_len(\n                  *(_QWORD *)(v5 + 24),\n                  **((_QWORD **)v14 - 3),\n                  *(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) - (unsigned int)(*(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) != 0));\n                v15 = strncmp(**((const char ***)v14 - 3), \"env.\", 4uLL);\n                v16 = *(__int64 **)(v13 + 48);\n                if ( v15 )\n                {\n                  v18 = *(_QWORD *)(v5 + 24);\n                  v132 = v16[19];\n                  if ( array_get_element_klen(\n                         v16[19],\n                         *(_QWORD *)v18,\n                         *(_DWORD *)(v18 + 8) - (unsigned int)(*(_DWORD *)(v18 + 8) != 0)) )\n                  {\n                    v19 = *v16;\n                    __fprintf_chk(\n                      stderr,\n                      1LL,\n                      \"Duplicate config variable in conditional %d %s: %s\\n\",\n                      *((unsigned int *)v16 + 7));\n                    *(_DWORD *)(v13 + 8) = 0;\n                  }\n                  else\n                  {\n                    array_insert_unique(v132, v18);\n                    *(_QWORD *)(v5 + 24) = 0LL;\n                  }\n                }\n                else\n                {\n                  v17 = *v16;\n                  __fprintf_chk(\n                    stderr,\n                    1LL,\n                    \"Setting env variable is not supported in conditional %d %s: %s\\n\",\n                    *((unsigned int *)v16 + 7));\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n              }\n              buffer_free(*((void **)v14 - 3));\n              *((_QWORD *)v14 - 3) = 0LL;\n              v20 = *(_QWORD *)(v5 + 24);\n              if ( v20 )\n                (*(void (**)(void))(*(_QWORD *)(v20 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 2LL;\n              sub_14BE2(2u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 5:\n              if ( *(_DWORD *)(v13 + 8) )\n              {\n                v21 = *((_QWORD *)v14 - 3);\n                v22 = *(const char **)v21;\n                if ( !strncmp(*(const char **)v21, \"env.\", 4uLL) )\n                {\n                  v23 = *(__int64 **)(v13 + 48);\n                  v24 = *v23;\n                  __fprintf_chk(\n                    stderr,\n                    1LL,\n                    \"Setting env variable is not supported in conditional %d %s: %s\\n\",\n                    *((unsigned int *)v23 + 7));\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n                else\n                {\n                  buffer_copy_string_len(\n                    *(_QWORD *)(v5 + 24),\n                    v22,\n                    *(_DWORD *)(v21 + 8) - (unsigned int)(*(_DWORD *)(v21 + 8) != 0));\n                  array_replace(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 152LL), *(_QWORD *)(v5 + 24));\n                  *(_QWORD *)(v5 + 24) = 0LL;\n                }\n              }\n              buffer_free(*((void **)v14 - 3));\n              *((_QWORD *)v14 - 3) = 0LL;\n              v25 = *(_QWORD *)(v5 + 24);\n              if ( v25 )\n                (*(void (**)(void))(*(_QWORD *)(v25 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 3LL;\n              sub_14BE2(3u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 6:\n              if ( *(_DWORD *)(v13 + 8) )\n              {\n                v26 = *(__int64 **)(v13 + 48);\n                v27 = **((_QWORD **)v14 - 3);\n                v133 = *((_QWORD *)v14 - 3);\n                if ( !strncmp(**((const char ***)v14 - 3), \"env.\", 4uLL) )\n                {\n                  v28 = *v26;\n                  __fprintf_chk(\n                    stderr,\n                    1LL,\n                    \"Appending env variable is not supported in conditional %d %s: %s\\n\",\n                    *((unsigned int *)v26 + 7));\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n                else\n                {\n                  v29 = array_extract_element_klen(\n                          v26[19],\n                          v27,\n                          *(_DWORD *)(v133 + 8) - (unsigned int)(*(_DWORD *)(v133 + 8) != 0));\n                  if ( v29 || (v29 = sub_14EA6(*(_QWORD *)(v13 + 48), *((__int64 **)v14 - 3))) != 0 )\n                  {\n                    v30 = sub_14CCF(v29, *(_QWORD *)(v5 + 24));\n                    if ( v30 )\n                    {\n                      buffer_copy_string_len(\n                        v30,\n                        **((_QWORD **)v14 - 3),\n                        *(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL)\n                      - (unsigned int)(*(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) != 0));\n                      array_insert_unique(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 152LL), v30);\n                    }\n                    else\n                    {\n                      *(_DWORD *)(v13 + 8) = 0;\n                    }\n                  }\n                  else\n                  {\n                    buffer_copy_string_len(\n                      *(_QWORD *)(v5 + 24),\n                      **((_QWORD **)v14 - 3),\n                      *(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL)\n                    - (unsigned int)(*(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) != 0));\n                    array_insert_unique(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 152LL), *(_QWORD *)(v5 + 24));\n                    *(_QWORD *)(v5 + 24) = 0LL;\n                  }\n                }\n              }\n              buffer_free(*((void **)v14 - 3));\n              *((_QWORD *)v14 - 3) = 0LL;\n              v31 = *(_QWORD *)(v5 + 24);\n              if ( v31 )\n                (*(void (**)(void))(*(_QWORD *)(v31 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 4LL;\n              sub_14BE2(4u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 7:\n              v32 = *(const char ***)(v5 + 24);\n              v33 = *v32;\n              if ( strchr(*v32, 46) )\n              {\n                v145 = (__int64)v32;\n                *(_QWORD *)(v5 + 24) = 0LL;\n              }\n              else\n              {\n                v145 = buffer_init(v33, 46LL);\n                buffer_copy_string(v145, \"var.\");\n                buffer_append_string_len(\n                  v145,\n                  **(_QWORD **)(v5 + 24),\n                  *(_DWORD *)(*(_QWORD *)(v5 + 24) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v5 + 24) + 8LL) != 0));\n              }\n              goto LABEL_74;\n            case 8:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( v34 )\n                goto LABEL_52;\n              v35 = sub_14CCF(*((_QWORD *)v14 - 3), *(_QWORD *)(v5 + 24));\n              v145 = v35;\n              *((_QWORD *)v14 - 3) = 0LL;\n              if ( !v35 )\n              {\n                *(_DWORD *)(v13 + 8) = 0;\nLABEL_52:\n                v36 = *((_QWORD *)v14 - 3);\n                if ( v36 )\n                  (*(void (**)(void))(*(_QWORD *)(v36 + 16) + 8LL))();\n              }\n              *((_QWORD *)v14 - 3) = 0LL;\n              v37 = *(_QWORD *)(v5 + 24);\n              if ( v37 )\n                (*(void (**)(void))(*(_QWORD *)(v37 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 6LL;\n              sub_14BE2(6u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 9:\n            case 0x13:\n            case 0x1B:\n              v145 = *(_QWORD *)(v5 + 24);\n              *(_QWORD *)(v5 + 24) = 0LL;\n              goto LABEL_217;\n            case 0xA:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( v34 )\n                goto LABEL_74;\n              v38 = *(__int64 **)(v5 + 24);\n              v39 = *v38;\n              if ( !strncmp((const char *)*v38, \"env.\", 4uLL) )\n              {\n                v40 = getenv((const char *)(v39 + 4));\n                if ( v40 )\n                {\n                  v41 = array_data_string_init(v39 + 4, \"env.\");\n                  buffer_append_string(v41 + 32, v40);\n                  v145 = v41;\n                  goto LABEL_74;\n                }\n                v42 = \"Undefined env variable: %s\\n\";\n                v43 = **(_QWORD **)(v5 + 24) + 4LL;\n              }\n              else\n              {\n                v145 = sub_14EA6(*(_QWORD *)(v13 + 48), v38);\n                if ( v145 )\n                  goto LABEL_74;\n                v42 = \"Undefined config variable: %s\\n\";\n                v43 = **(_QWORD **)(v5 + 24);\n              }\nLABEL_73:\n              __fprintf_chk(stderr, 1LL, v42, v43);\n              *(_DWORD *)(v13 + 8) = 0;\nLABEL_74:\n              a1 = *(_QWORD *)(v5 + 24);\n              buffer_free((void *)a1);\n              *(_QWORD *)(v5 + 24) = 0LL;\n              goto LABEL_217;\n            case 0xB:\n              v44 = ((__int64 (*)(void))array_data_string_init)();\n              v45 = *(_OWORD **)(v5 + 24);\n              v145 = v44;\n              *(_OWORD *)(v44 + 32) = *v45;\n              a1 = *(_QWORD *)(v5 + 24);\n              free((void *)a1);\n              *(_QWORD *)(v5 + 24) = 0LL;\n              goto LABEL_217;\n            case 0xC:\n              v145 = array_data_integer_init();\n              v46 = __errno_location();\n              *v46 = 0;\n              v47 = v46;\n              v48 = strtol(**(const char ***)(v5 + 24), &endptr, 10);\n              *(_DWORD *)(v145 + 28) = v48;\n              v49 = **(char ***)(v5 + 24);\n              if ( v49 != endptr )\n              {\n                v50 = *__ctype_b_loc();\n                while ( v50[(unsigned __int8)*endptr] & 0x2000 )\n                  ++endptr;\n              }\n              if ( !*v47 && !*endptr )\n                goto LABEL_74;\n              v42 = \"error parsing number: '%s'\\n\";\n              v43 = (signed __int64)v49;\n              goto LABEL_73;\n            case 0xD:\n              v51 = array_data_array_init();\n              v52 = *(_QWORD *)(v5 + 24);\n              v145 = v51;\n              *(_OWORD *)(v51 + 32) = *(_OWORD *)v52;\n              *(_QWORD *)(v51 + 48) = *(_QWORD *)(v52 + 16);\n              a1 = *(_QWORD *)(v5 + 24);\n              free((void *)a1);\n              *(_QWORD *)(v5 + 24) = 0LL;\n              goto LABEL_217;\n            case 0xE:\n              v53 = array_init(8LL, v11);\n              v54 = (void **)(v14 - 2);\n              v145 = v53;\n              goto LABEL_78;\n            case 0xF:\n              v55 = *((_QWORD *)v14 - 1);\n              v54 = (void **)(v14 - 6);\n              *((_QWORD *)v14 - 1) = 0LL;\n              v145 = v55;\nLABEL_78:\n              sub_14BE2(9u, v54);\n              a1 = 10LL;\n              sub_14BE2(0xAu, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x10:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                v56 = *(__int64 **)(v5 + 24);\n                v57 = *((_QWORD *)v14 - 3);\n                v58 = *((_DWORD *)v56 + 2);\n                if ( v58\n                  && (v59 = *v56,\n                      v60 = *((_QWORD *)v14 - 3),\n                      v61 = array_get_element_klen(*((_QWORD *)v14 - 3), *v56, (unsigned int)(v58 - 1)),\n                      v57 = v60,\n                      v61) )\n                {\n                  __fprintf_chk(\n                    stderr,\n                    1LL,\n                    \"Error: duplicate array-key: %s. Please get rid of the duplicate entry.\\n\",\n                    v59);\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n                else\n                {\n                  array_insert_unique(v57, v56);\n                  *(_QWORD *)(v5 + 24) = 0LL;\n                }\n                v62 = *((_QWORD *)v14 - 3);\n                *((_QWORD *)v14 - 3) = 0LL;\n                v145 = v62;\n              }\n              array_free(*((void **)v14 - 3));\n              *((_QWORD *)v14 - 3) = 0LL;\n              v63 = *(_QWORD *)(v5 + 24);\n              if ( v63 )\n                (*(void (**)(void))(*(_QWORD *)(v63 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 11LL;\n              sub_14BE2(0xBu, (void **)v14 - 1);\n              goto LABEL_217;\n            case 0x11:\n              v64 = *((_QWORD *)v14 - 1);\n              *((_QWORD *)v14 - 1) = 0LL;\n              a1 = 11LL;\n              v145 = v64;\n              sub_14BE2(0xBu, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x12:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                v65 = array_init(4LL, v11);\n                v66 = *(_QWORD *)(v5 + 24);\n                v145 = v65;\n                array_insert_unique(v65, v66);\n                *(_QWORD *)(v5 + 24) = 0LL;\n              }\n              goto LABEL_206;\n            case 0x14:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                buffer_copy_string_len(\n                  *(_QWORD *)(v5 + 24),\n                  **((_QWORD **)v14 - 3),\n                  *(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) - (unsigned int)(*(_DWORD *)(*((_QWORD *)v14 - 3) + 8LL) != 0));\n                v67 = *(_QWORD *)(v5 + 24);\n                *(_QWORD *)(v5 + 24) = 0LL;\n                v145 = v67;\n              }\n              v68 = *(_QWORD *)(v5 + 24);\n              if ( v68 )\n                (*(void (**)(void))(*(_QWORD *)(v68 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              buffer_free(*((void **)v14 - 3));\n              *((_QWORD *)v14 - 3) = 0LL;\n              a1 = 12LL;\n              sub_14BE2(0xCu, (void **)v14 - 1);\n              goto LABEL_217;\n            case 0x17:\n              v69 = array_get_data_unset(*(_QWORD *)(*(_QWORD *)v13 + 8LL), \"global\", 6LL);\n              if ( !v69 )\n                ck_assert_failed(\"./configparser.y\", 557LL, \"dc\");\n              sub_14F89((_QWORD *)v13, v69, 0);\n              a1 = 13LL;\n              sub_14BE2(0xDu, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x18:\n              if ( !*(_QWORD *)(v13 + 48) )\n                ck_assert_failed(\"./configparser.y\", 562LL, \"ctx->current\");\n              sub_14EF6((_QWORD *)v13);\n              if ( !*(_QWORD *)(v13 + 48) )\n                ck_assert_failed(\"./configparser.y\", 564LL, \"ctx->current\");\n              goto LABEL_142;\n            case 0x19:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                if ( *(_DWORD *)(*((_QWORD *)v14 - 5) + 28LL) >= *(_DWORD *)(*(_QWORD *)(v5 + 24) + 28LL) )\n                {\n                  fputs(\"unreachable else condition\\n\", stderr);\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n                if ( *(_DWORD *)(*((_QWORD *)v14 - 5) + 36LL) == 5 )\n                {\n                  fputs(\"unreachable condition following else catch-all\\n\", stderr);\n                  *(_DWORD *)(v13 + 8) = 0;\n                }\n                v70 = *(_QWORD *)(v5 + 24);\n                v71 = *((_QWORD *)v14 - 5);\n                v145 = v70;\n                *(_QWORD *)(v70 + 48) = v71;\n                *(_QWORD *)(v71 + 56) = v70;\n              }\n              goto LABEL_131;\n            case 0x1A:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( v34 )\n                goto LABEL_131;\n              if ( *(_DWORD *)(*((_QWORD *)v14 - 5) + 28LL) >= *(_DWORD *)(*(_QWORD *)(v5 + 24) + 28LL) )\n              {\n                fputs(\"unreachable else condition\\n\", stderr);\n                *(_DWORD *)(v13 + 8) = 0;\n              }\n              if ( *(_DWORD *)(*((_QWORD *)v14 - 5) + 36LL) == 5 )\n              {\n                fputs(\"unreachable condition following else catch-all\\n\", stderr);\n                *(_DWORD *)(v13 + 8) = 0;\n              }\n              if ( !*(_DWORD *)(v13 + 8) )\n                goto LABEL_131;\n              v72 = array_extract_element_klen(\n                      *(_QWORD *)(v13 + 16),\n                      **(_QWORD **)(v5 + 24),\n                      *(_DWORD *)(*(_QWORD *)(v5 + 24) + 8LL)\n                    - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v5 + 24) + 8LL) != 0));\n              if ( v72 != *(_QWORD *)(v5 + 24) )\n                ck_assert_failed(\"./configparser.y\", 602LL, \"yymsp[0].minor.yy18 == dc\");\n              buffer_copy_string_len(\n                v72,\n                **((_QWORD **)v14 - 5),\n                *(_DWORD *)(*((_QWORD *)v14 - 5) + 8LL) - (unsigned int)(*(_DWORD *)(*((_QWORD *)v14 - 5) + 8LL) != 0));\n              v73 = *((_QWORD *)v14 - 5);\n              v74 = *(__int64 **)(v5 + 24);\n              v75 = *v74;\n              v76 = *((_DWORD *)v74 + 2);\n              v74[15] = *v74 + *(_QWORD *)(v73 + 120) - *(_QWORD *)v73;\n              *((_DWORD *)v74 + 8) = *(_DWORD *)(v73 + 32);\n              v77 = *(_DWORD *)(v73 + 72);\n              v78 = *(_DWORD *)(v73 + 36);\n              v79 = v76 - 5 - (v76 != 0) - (v77 - (unsigned int)(v77 != 0));\n              if ( v78 == 2 )\n                goto LABEL_125;\n              if ( v78 > 2 )\n              {\n                if ( v78 != 3 && v78 != 4 )\nLABEL_126:\n                  ck_assert_failed(\"./configparser.y\", 627LL, \"0\");\n                *(_BYTE *)(v75 + v79) = 61;\n              }\n              else\n              {\n                if ( v78 != 1 )\n                  goto LABEL_126;\nLABEL_125:\n                *(_BYTE *)(v75 + v79) = 33;\n              }\n              v80 = *(_QWORD *)(v5 + 24);\n              v134 = *(_QWORD *)(v13 + 16);\n              v81 = array_get_data_unset(\n                      *(_QWORD *)(v13 + 16),\n                      *(_QWORD *)v80,\n                      *(_DWORD *)(v80 + 8) - (unsigned int)(*(_DWORD *)(v80 + 8) != 0));\n              if ( v81 )\n              {\n                v84 = stderr;\n                fputs(\"unreachable else condition\\n\", stderr);\n                v85 = *(_QWORD *)(v5 + 24);\n                *(_DWORD *)(v13 + 8) = 0;\n                (*(void (__fastcall **)(__int64, FILE *))(*(_QWORD *)(v85 + 16) + 8LL))(v85, v84);\n                *(_QWORD *)(v5 + 24) = v81;\n              }\n              else\n              {\n                array_insert_unique(v134, v80);\n                v82 = *(_QWORD *)(v5 + 24);\n                v83 = *((_QWORD *)v14 - 5);\n                *(_QWORD *)(v82 + 48) = v83;\n                *(_QWORD *)(v83 + 56) = v82;\n              }\n              v145 = *(_QWORD *)(v5 + 24);\nLABEL_131:\n              *((_QWORD *)v14 - 5) = 0LL;\n              a1 = 16LL;\n              *(_QWORD *)(v5 + 24) = 0LL;\n              sub_14BE2(0x10u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 0x1C:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( v34 )\n                goto LABEL_142;\n              v86 = *(_QWORD *)(v13 + 48);\n              sub_14EF6((_QWORD *)v13);\n              if ( !v86 || !*(_QWORD *)(v13 + 48) )\n                ck_assert_failed(\"./configparser.y\", 661LL, &unk_47BFE);\n              goto LABEL_141;\n            case 0x1D:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                v86 = *(_QWORD *)(v13 + 48);\n                sub_14EF6((_QWORD *)v13);\n                if ( !v86 || !*(_QWORD *)(v13 + 48) )\n                  ck_assert_failed(\"./configparser.y\", 675LL, &unk_47BFE);\nLABEL_141:\n                v145 = v86;\n              }\nLABEL_142:\n              sub_14BE2(0xEu, (void **)v14 - 3);\n              a1 = 15LL;\n              sub_14BE2(0xFu, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x1E:\n              if ( *(_DWORD *)(v13 + 8) && *(_DWORD *)(*(_QWORD *)(v5 + 24) + 24LL) )\n              {\n                fputs(\"rvalue must be string\", stderr);\n                *(_DWORD *)(v13 + 8) = 0;\n              }\n              if ( !*(_DWORD *)(v13 + 8) )\n                goto LABEL_193;\n              v87 = *(v14 - 2);\n              if ( v87 == 2 )\n              {\n                v88 = \"=~\";\n              }\n              else if ( v87 > 2 )\n              {\n                if ( v87 == 3 )\n                {\n                  v88 = \"!=\";\n                }\n                else\n                {\n                  if ( v87 != 4 )\nLABEL_155:\n                    ck_assert_failed(\"./configparser.y\", 189LL, \"0\");\n                  v88 = \"!~\";\n                }\n              }\n              else\n              {\n                if ( v87 != 1 )\n                  goto LABEL_155;\n                v88 = \"==\";\n              }\n              v142[0] = *(v14 - 2);\n              v89 = *(_QWORD *)(v13 + 48);\n              v90 = *((_QWORD *)v14 - 9);\n              v135 = *(_QWORD *)(v5 + 24);\n              v137 = *((_QWORD *)v14 - 5);\n              v140 = *(_DWORD *)(v89 + 8);\n              v91 = *(_QWORD *)(*(_QWORD *)v13 + 48LL);\n              v92 = *(_QWORD *)v89;\n              *(_DWORD *)(v91 + 8) = 0;\n              LODWORD(v89) = *(_DWORD *)(v89 + 8);\n              v147 = v92;\n              v136 = v91;\n              v150 = 3LL;\n              v152 = 1LL;\n              v93 = (unsigned int)v89 - ((_DWORD)v89 != 0);\n              v94 = *(_QWORD *)v90;\n              v148 = v93;\n              v153 = v94;\n              LODWORD(v94) = *(_DWORD *)(v90 + 8);\n              v149 = \" / \";\n              v156 = 2LL;\n              v151 = \"$\";\n              v154 = (unsigned int)v94 - ((_DWORD)v94 != 0);\n              v155 = \"[\\\"\";\n              v157 = *(_QWORD *)v137;\n              v158 = *(_DWORD *)(v137 + 8) - (unsigned int)(*(_DWORD *)(v137 + 8) != 0);\n              v159 = \"\\\"] \";\n              v161 = v88;\n              v160 = 3LL;\n              v163 = \" \\\"\";\n              v162 = 2LL;\n              v164 = 2LL;\n              v165 = *(_QWORD *)(v135 + 32);\n              v95 = *(_DWORD *)(v135 + 40);\n              v168 = 1LL;\n              v166 = v95 - (unsigned int)(v95 != 0);\n              v167 = \"\\\"\";\n              buffer_append_iovec(v136, &v147, 11LL);\n              v96 = array_get_data_unset(\n                      *(_QWORD *)(v13 + 16),\n                      *(_QWORD *)v136,\n                      *(_DWORD *)(v136 + 8) - (unsigned int)(*(_DWORD *)(v136 + 8) != 0));\n              if ( v96 )\n              {\n                sub_14F89((_QWORD *)v13, v96, 0);\n                goto LABEL_193;\n              }\n              v97 = data_config_init();\n              *((_DWORD *)v97 + 9) = v142[0];\n              v98 = buffer_eq_slen(v90, \"REQUEST_HEADER\", 14LL);\n              LODWORD(v99) = 12;\n              if ( !v98 )\n              {\n                if ( (unsigned int)buffer_eq_slen(v90, \"SERVER\", 6LL) )\n                {\n                  v99 = (unsigned int)buffer_eq_slen(v137, \"socket\", 6LL) != 0;\n                }\n                else\n                {\n                  v100 = buffer_eq_slen(v90, \"HTTP\", 4LL);\n                  LODWORD(v99) = 0;\n                  if ( v100 )\n                  {\n                    v101 = &unk_256E60;\n                    v102 = 0LL;\n                    do\n                    {\n                      v143 = v101;\n                      if ( (unsigned int)buffer_eq_slen(v137, v101[1], *((unsigned int *)v101 + 1)) )\n                      {\n                        LODWORD(v99) = *((_DWORD *)&unk_256E60 + 4 * v102);\n                        goto LABEL_169;\n                      }\n                      v102 = (unsigned int)(v102 + 1);\n                      v101 = v143 + 2;\n                    }\n                    while ( (_DWORD)v102 != 13 );\n                    LODWORD(v99) = 0;\n                  }\n                }\n              }\nLABEL_169:\n              *((_DWORD *)v97 + 8) = v99;\n              v103 = (const char **)(v135 + 32);\n              buffer_copy_string_len(\n                v97,\n                *(_QWORD *)v136,\n                *(_DWORD *)(v136 + 8) - (unsigned int)(*(_DWORD *)(v136 + 8) != 0));\n              buffer_copy_string_len(\n                v97 + 13,\n                *(_QWORD *)v137,\n                *(_DWORD *)(v137 + 8) - (unsigned int)(*(_DWORD *)(v137 + 8) != 0));\n              v105 = (signed __int64)(v97 + 13);\n              v106 = *((_DWORD *)v97 + 8);\n              v107 = *v97 + v140 + 3 - (unsigned int)(v140 != 0);\n              v97[15] = v107;\n              if ( !v106 )\n              {\n                __fprintf_chk(stderr, 1LL, \"error comp_key %s\", v107);\n                *(_DWORD *)(v13 + 8) = 0;\n                goto LABEL_188;\n              }\n              if ( v106 == 6 )\n              {\n                *((_DWORD *)v97 + 8) = 12;\n                buffer_copy_string_len(v105, \"Accept-Language\", 15LL);\n                goto LABEL_188;\n              }\n              if ( v106 == 5 )\n              {\n                *((_DWORD *)v97 + 8) = 12;\n                buffer_copy_string_len(v105, \"User-Agent\", 10LL);\n                goto LABEL_188;\n              }\n              if ( v106 == 8 )\n              {\n                if ( (*((_DWORD *)v97 + 9) & 0xFFFFFFFD) != 1 )\n                  goto LABEL_190;\n                if ( !(unsigned int)config_remoteip_normalize(v103, v136) )\n                  goto LABEL_187;\n              }\n              else\n              {\n                if ( v106 == 1 )\n                {\n                  v108 = *(_BYTE **)(v135 + 32);\n                  LOBYTE(v104) = *v108;\n                  if ( *v108 == 58 || (_BYTE)v104 == 91 && v108[1] == 93 )\n                    goto LABEL_190;\n                }\n                else\n                {\n                  if ( v106 != 3 )\n                    goto LABEL_188;\n                  if ( (*((_DWORD *)v97 + 9) & 0xFFFFFFFD) != 1 )\n                    goto LABEL_190;\n                }\n                if ( (unsigned int)http_request_host_normalize(v103, 0LL) )\n                {\nLABEL_187:\n                  __fprintf_chk(stderr, 1LL, \"invalid IP addr: %s\\n\", *(_QWORD *)(v135 + 32));\n                  *(_DWORD *)(v13 + 8) = 0;\n                  goto LABEL_188;\n                }\n              }\nLABEL_188:\n              if ( *((_DWORD *)v97 + 8) == 12 )\n                *((_DWORD *)v97 + 25) = http_header_hkey_get(\n                                          v97[13],\n                                          *((_DWORD *)v97 + 28) - (unsigned int)(*((_DWORD *)v97 + 28) != 0));\nLABEL_190:\n              buffer_move(v97 + 8, v103, v104, v107, v105);\n              if ( *(_DWORD *)(v13 + 8) )\n                sub_14F89((_QWORD *)v13, (__int64)v97, 1);\n              else\n                (*(void (__fastcall **)(_QWORD *))(v97[2] + 8LL))(v97);\nLABEL_193:\n              buffer_free(*((void **)v14 - 9));\n              v109 = (void *)*((_QWORD *)v14 - 5);\n              *((_QWORD *)v14 - 9) = 0LL;\n              buffer_free(v109);\n              *((_QWORD *)v14 - 5) = 0LL;\n              (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 16LL) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              sub_14BE2(0x11u, (void **)v14 - 11);\n              sub_14BE2(0x13u, (void **)v14 - 7);\n              a1 = 20LL;\n              sub_14BE2(0x14u, (void **)v14 - 3);\nLABEL_217:\n              v118 = byte_47DC0[2 * v141];\n              v119 = *v4 - byte_47DC0[2 * v141 + 1];\n              *v4 = v119;\n              v120 = v4[4 * (v119 + 1LL)];\n              v121 = byte_47E80[v120];\n              if ( v121 == -39 )\n                goto LABEL_221;\n              if ( v118 != 51 )\n              {\n                LODWORD(v122) = v118 + v121;\n                if ( (unsigned int)v122 <= 0x89 && (v122 = (signed int)v122, v118 == byte_47F40[(signed int)v122]) )\n                  v123 = byte_47FE0[v122];\n                else\nLABEL_221:\n                  v123 = (unsigned __int8)aHrgijrkrrderhr[v120];\n                if ( v123 > 69 )\n                {\n                  if ( v123 == 115 )\n                  {\n                    a1 = (signed __int64)v4;\n                    sub_14CAB((__int64)v4);\n                  }\n                }\n                else\n                {\n                  a1 = (signed __int64)v4;\n                  sub_14C60(v4, v123, v118, &v145);\n                }\n              }\n              break;\n            case 0x1F:\n              if ( *(_DWORD *)(v13 + 8) )\n              {\n                v110 = data_config_init();\n                *((_DWORD *)v110 + 9) = 5;\n                buffer_append_str2(\n                  v110,\n                  **(_QWORD **)(v13 + 48),\n                  *(_DWORD *)(*(_QWORD *)(v13 + 48) + 8LL)\n                - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v13 + 48) + 8LL) != 0),\n                  \" / else_tmp_token\",\n                  17LL);\n                a1 = v13;\n                sub_14F89((_QWORD *)v13, (__int64)v110, 1);\n              }\n              goto LABEL_217;\n            case 0x20:\n              a1 = 21LL;\n              LODWORD(v145) = 1;\n              sub_14BE2(0x15u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x21:\n              a1 = 22LL;\n              LODWORD(v145) = 2;\n              sub_14BE2(0x16u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x22:\n              a1 = 23LL;\n              LODWORD(v145) = 3;\n              sub_14BE2(0x17u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x23:\n              a1 = 24LL;\n              LODWORD(v145) = 4;\n              sub_14BE2(0x18u, (void **)&v4[v12 + 2]);\n              goto LABEL_217;\n            case 0x24:\n              v34 = *(_DWORD *)(v13 + 8) == 0;\n              v145 = 0LL;\n              if ( !v34 )\n              {\n                v111 = *(_QWORD *)(v5 + 24);\n                v112 = *(_DWORD *)(v111 + 24);\n                if ( v112 )\n                {\n                  if ( v112 == 2 )\n                  {\n                    v116 = buffer_init(a1, v11);\n                    v117 = *(_QWORD *)(v5 + 24);\n                    v145 = v116;\n                    buffer_append_int(v116, *(signed int *)(v117 + 28));\n                  }\n                  else\n                  {\n                    fputs(\"operand must be string\", stderr);\n                    *(_DWORD *)(v13 + 8) = 0;\n                  }\n                }\n                else\n                {\n                  v113 = buffer_init(a1, v11);\n                  v114 = *(_DWORD *)(v111 + 40);\n                  v115 = *(_QWORD *)(v111 + 32);\n                  v145 = v113;\n                  buffer_copy_string_len(v113, v115, v114 - (unsigned int)(v114 != 0));\n                }\n              }\nLABEL_206:\n              a1 = *(_QWORD *)(v5 + 24);\n              if ( a1 )\n                (*(void (**)(void))(*(_QWORD *)(a1 + 16) + 8LL))();\n              *(_QWORD *)(v5 + 24) = 0LL;\n              goto LABEL_217;\n            case 0x25:\n              if ( *(_DWORD *)(v13 + 8) && (unsigned int)config_parse_file(*(_QWORD *)v13, v13, **(_QWORD **)(v5 + 24)) )\n                *(_DWORD *)(v13 + 8) = 0;\n              buffer_free(*(void **)(v5 + 24));\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 25LL;\n              sub_14BE2(0x19u, (void **)v14 - 1);\n              goto LABEL_217;\n            case 0x26:\n              if ( *(_DWORD *)(v13 + 8) && (unsigned int)config_parse_cmd(*(_QWORD *)v13, v13, **(_QWORD **)(v5 + 24)) )\n                *(_DWORD *)(v13 + 8) = 0;\n              buffer_free(*(void **)(v5 + 24));\n              *(_QWORD *)(v5 + 24) = 0LL;\n              a1 = 26LL;\n              sub_14BE2(0x1Au, (void **)v14 - 1);\n              goto LABEL_217;\n            default:\n              goto LABEL_217;\n          }\n        }\n        if ( v131 == 51 )\n          return __readfsqword(0x28u) ^ v169;\n      }\n      else\n      {\n        a1 = (signed __int64)v4;\n        sub_14C60(v4, v9, v131, &v144);\n        --v4[1];\n        if ( v138 || *v4 < 0 )\n          return __readfsqword(0x28u) ^ v169;\n        v131 = 0;\n      }\n    }\n    while ( *v4 >= 0 );\n  }\n  return __readfsqword(0x28u) ^ v169;\n}\n", 
            "funcStartAddr": "0x15094L", 
            "funcEndAddr": "0x16701L", 
            "funcName": "configparser"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_16701(void **a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rax\n  void **v3; // rbx\n  unsigned __int64 i; // rsi\n  void *v5; // rdi\n  signed __int64 v6; // rsi\n  void *result; // rax\n\n  v2 = (a2 + 64) & 0xFFFFFFFFFFFFFFC0LL;\n  if ( a2 >= v2 )\n    ck_assert_failed(\"buffer.c\", 47LL, \"sz > len\");\n  v3 = a1;\n  if ( v2 & (v2 - 1) && v2 <= 0x7FFFFFFE )\n  {\n    for ( i = 256LL; i < v2; i *= 2LL )\n      ;\n  }\n  else\n  {\n    i = (a2 + 64) & 0xFFFFFFFFFFFFFFC0LL;\n  }\n  v5 = *a1;\n  v6 = i | 1;\n  *((_DWORD *)v3 + 3) = v6;\n  result = realloc(v5, v6);\n  *v3 = result;\n  if ( !result )\n    ck_assert_failed(\"buffer.c\", 58LL, \"((void *)0) != b->ptr\");\n  return result;\n}\n", 
            "funcStartAddr": "0x16701L", 
            "funcEndAddr": "0x16780L", 
            "funcName": "sub_16701"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_16780(void **a1, unsigned __int64 a2)\n{\n  void **v2; // rbx\n  unsigned __int64 v3; // rbp\n  void *v4; // rdi\n  unsigned __int64 v5; // rax\n\n  v2 = a1;\n  v3 = a2;\n  v4 = *a1;\n  if ( v4 )\n  {\n    free(v4);\n    *v2 = 0LL;\n  }\n  v5 = 2LL * *((unsigned int *)v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;\n  if ( v5 > a2 )\n    v3 = v5 - 1;\n  return sub_16701(v2, v3);\n}\n", 
            "funcStartAddr": "0x16780L", 
            "funcEndAddr": "0x167c1L", 
            "funcName": "sub_16780"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_167C1(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rdx\n  unsigned __int64 v3; // rax\n  _BYTE *result; // rax\n  unsigned __int64 v5; // rcx\n  unsigned __int64 v6; // rax\n\n  v2 = *(unsigned int *)(a1 + 8);\n  v3 = *(unsigned int *)(a1 + 12);\n  if ( (unsigned int)v2 > 1 )\n  {\n    v5 = v2 + a2;\n    v6 = 2 * v3 & 0xFFFFFFFFFFFFFFFCLL;\n    if ( v6 - v2 > a2 )\n      v5 = v6 - 1;\n    if ( v2 > v5 )\n      ck_assert_failed(\"buffer.c\", 106LL, \"req_size >= b->used\");\n    result = (char *)sub_16701((void **)a1, v5) + *(unsigned int *)(a1 + 8) - 1;\n  }\n  else\n  {\n    *(_DWORD *)(a1 + 8) = 0;\n    if ( a2 >= v3 )\n      result = sub_16780((void **)a1, a2);\n    else\n      result = *(_BYTE **)a1;\n    *result = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x167c1L", 
            "funcEndAddr": "0x16837L", 
            "funcName": "sub_167C1"
        }, 
        {
            "decompiledFuncCode": "void __fastcall buffer_free_ptr(__int64 a1)\n{\n  free(*(void **)a1);\n  *(_QWORD *)a1 = 0LL;\n  *(_QWORD *)(a1 + 8) = 0LL;\n}\n", 
            "funcStartAddr": "0x16837L", 
            "funcEndAddr": "0x16854L", 
            "funcName": "buffer_free_ptr"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall buffer_copy_string(__int64 a1, const char *a2)\n{\n  if ( !a2 )\n    a2 = \"\";\n  return buffer_copy_string_len(a1, a2, strlen(a2));\n}\n", 
            "funcStartAddr": "0x16854L", 
            "funcEndAddr": "0x16880L", 
            "funcName": "buffer_copy_string"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall buffer_append_string(__int64 a1, const char *a2)\n{\n  if ( !a2 )\n    a2 = \"\";\n  return buffer_append_string_len(a1, a2, strlen(a2));\n}\n", 
            "funcStartAddr": "0x16880L", 
            "funcEndAddr": "0x168acL", 
            "funcName": "buffer_append_string"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_168AC(__int64 a1)\n{\n  struct tm *v1; // rax\n  unsigned __int64 v2; // rcx\n  struct tm *v3; // rax\n  int v4; // eax\n  __int64 v6; // [rsp+0h] [rbp-88h]\n  __int64 v7; // [rsp+8h] [rbp-80h]\n  struct tm tp; // [rsp+10h] [rbp-78h]\n  char v9; // [rsp+50h] [rbp-38h]\n  unsigned __int64 v10; // [rsp+68h] [rbp-20h]\n\n  v10 = __readfsqword(0x28u);\n  if ( timer == -2 )\n  {\n    v6 = 0LL;\n    v7 = 0LL;\n    clock_gettime(0, (struct timespec *)&v6);\n    v1 = localtime_r(&v6, &tp);\n    buffer_append_strftime(a1, \"%F %T\", v1);\n    buffer_append_string_len(a1, \".000000000: \", 12LL);\n    v2 = li_utostrn(&v9, 22LL, v7);\n    qmemcpy(\n      (void *)(*(_QWORD *)a1 + *(_DWORD *)(a1 + 8) - (unsigned int)(*(_DWORD *)(a1 + 8) != 0) - 2LL - v2),\n      &v9,\n      v2);\n  }\n  else\n  {\n    if ( timer != log_epoch_secs )\n    {\n      timer = log_epoch_secs;\n      v3 = localtime_r(&timer, &tp);\n      v4 = strftime(byte_258560, 0x18uLL, \"%F %T\", v3);\n      byte_258560[v4] = 58;\n      dword_258550 = v4 + 2;\n      byte_258560[v4 + 1] = 32;\n    }\n    buffer_copy_string_len(a1, byte_258560, (unsigned int)dword_258550);\n  }\n  return __readfsqword(0x28u) ^ v10;\n}\n", 
            "funcStartAddr": "0x168acL", 
            "funcEndAddr": "0x169eeL", 
            "funcName": "sub_168AC"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_169EE(__int64 a1, const char *a2)\n{\n  const char *v3; // [rsp+0h] [rbp-78h]\n  __int64 v4; // [rsp+8h] [rbp-70h]\n  const char *v5; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-60h]\n  char *v7; // [rsp+20h] [rbp-58h]\n  __int64 v8; // [rsp+28h] [rbp-50h]\n  char *v9; // [rsp+30h] [rbp-48h]\n  __int64 v10; // [rsp+38h] [rbp-40h]\n  const char *v11; // [rsp+40h] [rbp-38h]\n  __int64 v12; // [rsp+48h] [rbp-30h]\n  char v13; // [rsp+50h] [rbp-28h]\n  unsigned __int64 v14; // [rsp+68h] [rbp-10h]\n\n  v14 = __readfsqword(0x28u);\n  v5 = a2;\n  v4 = 1LL;\n  v3 = \"(\";\n  v8 = 1LL;\n  v9 = &v13;\n  v6 = strlen(a2);\n  v7 = \".\";\n  v10 = li_itostrn(&v13, 22LL);\n  v12 = 2LL;\n  v11 = \") \";\n  buffer_append_iovec(a1, &v3, 5LL);\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0x169eeL", 
            "funcEndAddr": "0x16aa8L", 
            "funcName": "sub_169EE"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_16AA8(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  int v4; // ecx\n  int v5; // eax\n  int v6; // er13\n  int v7; // edx\n  __int64 v8; // r14\n  __int64 v9; // r12\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // ST08_8\n  int v12; // eax\n  size_t v13; // rbp\n  unsigned int v14; // eax\n  size_t i; // rax\n  void *v16; // rax\n  void *v17; // r15\n  __int128 v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+20h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+28h] [rbp-40h]\n\n  v3 = a3;\n  v4 = *((_DWORD *)a1 + 3);\n  v20 = __readfsqword(0x28u);\n  v5 = *((_DWORD *)a1 + 2);\n  v6 = v5 - (v5 != 0);\n  v7 = 0;\n  v8 = v5 - (unsigned int)(v5 != 0);\n  if ( v4 )\n    v7 = v4 - ((v5 == 0) | v5);\n  v9 = *a1;\n  v18 = *(_OWORD *)v3;\n  v10 = (_BYTE *)(v8 + v9);\n  v11 = (unsigned int)(v7 + 1);\n  v19 = *(_QWORD *)(v3 + 16);\n  v12 = __vsnprintf_chk(v10, v11, 1LL, -1LL, a2, &v18);\n  v13 = v12;\n  if ( v11 <= v12 )\n  {\n    v10 = (_BYTE *)buffer_extend(a1, v12);\n    __vsnprintf_chk(v10, v13 + 1, 1LL, -1LL, a2, v3);\n  }\n  else\n  {\n    v14 = v12 + v6;\n    *(_BYTE *)(*a1 + v14) = 0;\n    *((_DWORD *)a1 + 2) = v14 + 1;\n  }\n  for ( i = 0LL; i < v13; ++i )\n  {\n    if ( (unsigned __int8)(v10[i] - 32) > 0x5Eu )\n      goto LABEL_11;\n  }\n  if ( i == v13 )\n    return;\nLABEL_11:\n  v16 = malloc(v13);\n  qmemcpy(v16, v10, v13);\n  v17 = v16;\n  *(_BYTE *)(*a1 + v8) = 0;\n  *((_DWORD *)a1 + 2) = v6 + 1;\n  buffer_append_string_c_escaped(a1, v16, v13);\n  if ( __readfsqword(0x28u) == v20 )\n    free(v17);\n}\n", 
            "funcStartAddr": "0x16aa8L", 
            "funcEndAddr": "0x16c1aL", 
            "funcName": "sub_16AA8"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_16C1A(__int64 a1)\n{\n  int v1; // eax\n  __int64 v3; // [rsp+0h] [rbp-428h]\n  unsigned __int64 v4; // [rsp+408h] [rbp-20h]\n\n  v4 = __readfsqword(0x28u);\n  v1 = ck_strerror_s(&v3);\n  if ( !v1 || v1 == 34 )\n    buffer_append_str2(a1, \": \", 2LL, &v3, strlen((const char *)&v3));\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x16c1aL", 
            "funcEndAddr": "0x16ca2L", 
            "funcName": "sub_16C1A"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_16CA2(_DWORD *a1, _QWORD *a2)\n{\n  if ( *a1 == 2 )\n    return __syslog_chk(3LL, 1LL, &off_4987E, *a2);\n  buffer_append_string_len(a2, \"\\n\", 1LL);\n  return write_all(a1[1], (void *)*a2, *((_DWORD *)a2 + 2) - (unsigned int)(*((_DWORD *)a2 + 2) != 0));\n}\n", 
            "funcStartAddr": "0x16ca2L", 
            "funcEndAddr": "0x16cfcL", 
            "funcName": "sub_16CA2"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_16CFC(_DWORD *a1, const char *a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  int v6; // er15\n  _DWORD *v7; // rbx\n  _DWORD *result; // rax\n  __int64 *v9; // r12\n  int v10; // er14\n  _DWORD *v11; // r13\n  __int64 v12; // [rsp+10h] [rbp-48h]\n  __int64 v13; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a1;\n  v12 = a4;\n  v13 = a5;\n  result = __errno_location();\n  v9 = (__int64 *)off_2580C0;\n  v10 = *result;\n  v11 = result;\n  if ( !a1 )\n    v7 = off_2580C0;\n  *((_DWORD *)off_2580C0 + 4) = 0;\n  if ( *v7 != 2 )\n  {\n    if ( v7[1] == -1 )\n      return result;\n    sub_168AC((__int64)(v9 + 1));\n  }\n  sub_169EE((__int64)(v9 + 1), a2);\n  sub_16AA8(v9 + 1, v12, v13);\n  if ( v6 )\n    sub_16C1A((__int64)(v9 + 1));\n  result = (_DWORD *)sub_16CA2(v7, v9 + 1);\n  *((_DWORD *)v9 + 4) = 0;\n  *v11 = v10;\n  return result;\n}\n", 
            "funcStartAddr": "0x16cfcL", 
            "funcEndAddr": "0x16db5L", 
            "funcName": "sub_16CFC"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 log_error(_DWORD *a1, const char *a2, __int64 a3, __int64 a4, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a4);\n  v6 = __readfsqword(0x28u);\n  sub_16CFC(a1, a2, a3, a4, (__int64)va, 0);\n  return __readfsqword(0x28u) ^ v6;\n}\n", 
            "funcStartAddr": "0x16db5L", 
            "funcEndAddr": "0x16e5fL", 
            "funcName": "log_error"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 log_perror(_DWORD *a1, const char *a2, __int64 a3, __int64 a4, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a4);\n  v6 = __readfsqword(0x28u);\n  sub_16CFC(a1, a2, a3, a4, (__int64)va, 1);\n  return __readfsqword(0x28u) ^ v6;\n}\n", 
            "funcStartAddr": "0x16e5fL", 
            "funcEndAddr": "0x16f0cL", 
            "funcName": "log_perror"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 log_error_multiline(_DWORD *a1, const char *a2, __int64 a3, const char *a4, __int64 a5, __int64 a6, ...)\n{\n  const char *v6; // r15\n  _DWORD *v7; // r12\n  __int64 v8; // r14\n  int *v9; // rax\n  __int64 *v10; // rbx\n  int v11; // eax\n  unsigned int v12; // er13\n  char *v13; // r14\n  signed __int64 v14; // rdx\n  __int64 i; // rsi\n  int *v17; // [rsp+0h] [rbp-128h]\n  char *v18; // [rsp+8h] [rbp-120h]\n  int v19; // [rsp+14h] [rbp-114h]\n  __int64 v20; // [rsp+18h] [rbp-110h]\n  gcc_va_list va; // [rsp+20h] [rbp-108h]\n  unsigned __int64 v22; // [rsp+38h] [rbp-F0h]\n\n  v6 = a4;\n  v7 = a1;\n  v8 = a5;\n  v20 = a6;\n  v22 = __readfsqword(0x28u);\n  if ( a5 )\n  {\n    v9 = __errno_location();\n    v10 = (__int64 *)off_2580C0;\n    v17 = v9;\n    v11 = *v9;\n    if ( !a1 )\n      v7 = off_2580C0;\n    *((_DWORD *)off_2580C0 + 4) = 0;\n    v19 = v11;\n    if ( *v7 != 2 )\n    {\n      if ( v7[1] == -1 )\n        return __readfsqword(0x28u) ^ v22;\n      sub_168AC((__int64)(v10 + 1));\n    }\n    sub_169EE((__int64)(v10 + 1), a2);\n    va_start(va, a6);\n    sub_16AA8(v10 + 1, v20, (__int64)va);\n    v12 = *((_DWORD *)v10 + 4) - (*((_DWORD *)v10 + 4) != 0);\n    v18 = (char *)&v6[v8];\n    while ( v6 < v18 )\n    {\n      v13 = strchr(v6, 10);\n      if ( !v13 )\n        v13 = v18;\n      v14 = v13 - v6;\n      if ( v13 != v6 && *(v13 - 1) == 13 )\n        --v14;\n      *(_BYTE *)(v10[1] + v12) = 0;\n      *((_DWORD *)v10 + 4) = v12 + 1;\n      for ( i = 0LL; ; ++i )\n      {\n        if ( v14 == i )\n        {\n          buffer_append_string_len(v10 + 1, v6, v14);\n          goto LABEL_20;\n        }\n        if ( (unsigned __int8)(v6[i] - 32) > 0x5Eu )\n          break;\n      }\n      buffer_append_string_c_escaped(v10 + 1, v6, v14);\nLABEL_20:\n      v6 = v13 + 1;\n      sub_16CA2(v7, v10 + 1);\n    }\n    *((_DWORD *)v10 + 4) = 0;\n    *v17 = v19;\n  }\n  return __readfsqword(0x28u) ^ v22;\n}\n", 
            "funcStartAddr": "0x16f0cL", 
            "funcEndAddr": "0x17101L", 
            "funcName": "log_error_multiline"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall log_set_global_errh(void *a1, unsigned int a2)\n{\n  void *v2; // rbx\n  void *result; // rax\n\n  v2 = a1;\n  timer = -(signed __int64)(a2 < 1) | 0xFFFFFFFFFFFFFFFELL;\n  buffer_free_ptr((__int64)&unk_2580A8);\n  if ( !a1 )\n    v2 = &unk_2580A0;\n  result = v2;\n  off_2580C0 = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x17101L", 
            "funcEndAddr": "0x1713aL", 
            "funcName": "log_set_global_errh"
        }, 
        {
            "decompiledFuncCode": "void *pcre_keyvalue_buffer_init()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x18uLL);\n  if ( !result )\n    ck_assert_failed(\"keyvalue.c\", 48LL, \"((void *)0) != kvb\");\n  return result;\n}\n", 
            "funcStartAddr": "0x1713aL", 
            "funcEndAddr": "0x1716cL", 
            "funcName": "pcre_keyvalue_buffer_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall pcre_keyvalue_buffer_append(_DWORD *a1, __int64 a2, _QWORD *a3, _OWORD *a4, int a5)\n{\n  _OWORD *v5; // r15\n  _QWORD *v6; // r12\n  int v7; // ebx\n  int v8; // eax\n  void *v9; // rax\n  __int64 v10; // rax\n  signed __int64 v11; // rbp\n  __int64 v12; // rax\n  unsigned int v13; // ebx\n  unsigned int v14; // eax\n  unsigned int v15; // eax\n  unsigned int v17; // [rsp+0h] [rbp-458h]\n  unsigned int v18; // [rsp+4h] [rbp-454h]\n  __int64 v19; // [rsp+8h] [rbp-450h]\n  char v20; // [rsp+10h] [rbp-448h]\n  unsigned __int64 v21; // [rsp+418h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a3;\n  v7 = a5;\n  v21 = __readfsqword(0x28u);\n  v8 = *(_DWORD *)(a2 + 8);\n  if ( !(v8 & 3) )\n  {\n    v9 = realloc(*(void **)a2, 32LL * (unsigned int)(v8 + 4));\n    *(_QWORD *)a2 = v9;\n    if ( !v9 )\n      ck_assert_failed(\"keyvalue.c\", 61LL, \"((void *)0) != kvb->kv\");\n  }\n  v10 = *(unsigned int *)(a2 + 8);\n  v11 = 32 * v10 + *(_QWORD *)a2;\n  *(_DWORD *)(a2 + 8) = v10 + 1;\n  *(_OWORD *)(v11 + 16) = *v5;\n  v12 = pcre2_compile_8(*v6, *((_DWORD *)v6 + 2) - (unsigned int)(*((_DWORD *)v6 + 2) != 0), 0x80000LL, &v17, &v19, 0LL);\n  *(_QWORD *)v11 = v12;\n  if ( v12 )\n  {\n    if ( v7 )\n    {\n      v14 = pcre2_jit_compile_8(v12, 1LL);\n      v17 = v14;\n      if ( v14 )\n      {\n        if ( v14 != -45 )\n        {\n          pcre2_get_error_message_8(v14, &v20, 1024LL);\n          log_error(a1, \"keyvalue.c\", 90LL, (__int64)\"pcre2_jit_compile: %s, regex: %s\", &v20, *v6, *(_QWORD *)&v17);\n        }\n      }\n    }\n    v15 = pcre2_pattern_info_8(*(_QWORD *)v11, 4LL, &v18);\n    v13 = v15;\n    v17 = v15;\n    if ( v15 )\n    {\n      v13 = 0;\n      pcre2_get_error_message_8(v15, &v20, 1024LL);\n      log_error(a1, \"keyvalue.c\", 100LL, (__int64)\"pcre2_pattern_info: %s, regex: %s\", &v20, *v6, *(_QWORD *)&v17);\n    }\n    else if ( v18 <= 0x13 )\n    {\n      if ( !qword_258580 )\n      {\n        qword_258580 = pcre2_match_data_create_8(20LL, 0LL);\n        if ( !qword_258580 )\n          ck_assert_failed(\"keyvalue.c\", 114LL, \"keyvalue_match_data\");\n      }\n      v13 = 1;\n      *(_QWORD *)(v11 + 8) = qword_258580;\n    }\n    else\n    {\n      log_error(\n        a1,\n        \"keyvalue.c\",\n        105LL,\n        (__int64)\"Too many captures in regex, use (?:...) instead of (...): %s\",\n        *v6,\n        *(_QWORD *)&v17);\n    }\n  }\n  else\n  {\n    pcre2_get_error_message_8(v17, &v20, 1024LL);\n    v13 = 0;\n    log_error(a1, \"keyvalue.c\", 80LL, (__int64)\"pcre2_compile: %s at offset %zu, regex: %s\", &v20, v19, *v6);\n  }\n  return v13;\n}\n", 
            "funcStartAddr": "0x1716cL", 
            "funcEndAddr": "0x173baL", 
            "funcName": "pcre_keyvalue_buffer_append"
        }, 
        {
            "decompiledFuncCode": "void __fastcall pcre_keyvalue_buffer_free(void *ptr)\n{\n  __int64 v1; // rbp\n  _QWORD *v2; // r13\n  signed int v3; // er12\n\n  v1 = 0LL;\n  v2 = *(_QWORD **)ptr;\n  v3 = *((_DWORD *)ptr + 2);\n  while ( v3 > (signed int)v1 )\n  {\n    if ( v2[4 * v1] )\n      pcre2_code_free_8();\n    if ( qword_258580 )\n    {\n      pcre2_match_data_free_8(qword_258580);\n      qword_258580 = 0LL;\n    }\n    ++v1;\n  }\n  if ( *(_QWORD *)ptr )\n    free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x173baL", 
            "funcEndAddr": "0x17428L", 
            "funcName": "pcre_keyvalue_buffer_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall pcre_keyvalue_burl_normalize_key(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r10\n  int v3; // ecx\n  int v4; // er9\n  unsigned __int8 v5; // r11\n  signed __int64 v6; // rax\n  __int64 v7; // r12\n  __int64 v8; // rcx\n  int v9; // ebp\n  __int64 result; // rax\n  __int64 *v11; // rbx\n  __int64 v12; // rax\n  __int64 v13; // rdi\n  __int64 v14; // rcx\n  char v15; // r8\n  _BYTE *v16; // rdx\n\n  v2 = *a1;\n  v3 = 0;\n  v4 = *((_DWORD *)a1 + 2) - (*((_DWORD *)a1 + 2) != 0);\n  while ( v4 > v3 )\n  {\n    if ( *(_BYTE *)(v2 + v3) == 37 )\n    {\n      v5 = *(_BYTE *)(v2 + v3 + 1);\n      if ( (unsigned int)*(unsigned __int8 *)(v2 + v3 + 1) - 48 <= 9 || (v5 & 0xDFu) - 65 <= 5 )\n      {\n        v6 = v3 + 2LL;\n        if ( (unsigned int)*(unsigned __int8 *)(v2 + v6) - 48 <= 9 || (*(_BYTE *)(v2 + v6) & 0xDFu) - 65 <= 5 )\n        {\n          if ( v5 > 0x60u )\n            *(_BYTE *)(*a1 + v3 + 1LL) &= 0xDFu;\n          if ( *(_BYTE *)(v2 + v6) > 0x60u )\n            *(_BYTE *)(*a1 + v6) &= 0xDFu;\n          v3 += 2;\n        }\n      }\n    }\n    ++v3;\n  }\n  v7 = *a1;\n  v8 = 0LL;\n  v9 = *((_DWORD *)a1 + 2) - (*((_DWORD *)a1 + 2) != 0);\n  result = 0LL;\n  while ( v9 > (signed int)v8 )\n  {\n    if ( *(_BYTE *)(v7 + v8) < 0 )\n      result = (unsigned int)(result + 1);\n    ++v8;\n  }\n  if ( (_DWORD)result )\n  {\n    v11 = a1;\n    v12 = buffer_string_prepare_copy(a2, (unsigned int)(v9 + 2 * result));\n    v13 = 0LL;\n    LODWORD(v14) = 0;\n    while ( v9 > (signed int)v13 )\n    {\n      v15 = *(_BYTE *)(v7 + v13);\n      v16 = (_BYTE *)(v12 + (unsigned int)v14);\n      if ( v15 < 0 )\n      {\n        *v16 = 37;\n        *(_BYTE *)(v12 + (unsigned int)(v14 + 1)) = a0123456789abcd[(*(_BYTE *)(v7 + v13) >> 4) & 0xF];\n        v14 = (unsigned int)(v14 + 2);\n        *(_BYTE *)(v12 + v14) = a0123456789abcd[*(_BYTE *)(v7 + v13) & 0xF];\n      }\n      else\n      {\n        *v16 = v15;\n      }\n      LODWORD(v14) = v14 + 1;\n      ++v13;\n    }\n    result = buffer_copy_string_len(v11, v12, (unsigned int)v14);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x17428L", 
            "funcEndAddr": "0x17569L", 
            "funcName": "pcre_keyvalue_burl_normalize_key"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall pcre_keyvalue_burl_normalize_value(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r10\n  int v3; // ecx\n  int v4; // er9\n  unsigned __int8 v5; // r11\n  signed __int64 v6; // rax\n  __int64 v7; // r12\n  __int64 v8; // rcx\n  int v9; // ebp\n  __int64 result; // rax\n  __int64 *v11; // rbx\n  __int64 v12; // rax\n  __int64 v13; // rdi\n  __int64 v14; // rcx\n  char v15; // r8\n  _BYTE *v16; // rdx\n\n  v2 = *a1;\n  v3 = 0;\n  v4 = *((_DWORD *)a1 + 2) - (*((_DWORD *)a1 + 2) != 0);\n  while ( v4 > v3 )\n  {\n    if ( *(_BYTE *)(v2 + v3) == 37 && *(_BYTE *)(v2 + v3 + 1) == 37 )\n    {\n      v5 = *(_BYTE *)(v2 + v3 + 2);\n      if ( (unsigned int)*(unsigned __int8 *)(v2 + v3 + 2) - 48 <= 9 || (v5 & 0xDFu) - 65 <= 5 )\n      {\n        v6 = v3 + 3LL;\n        if ( (unsigned int)*(unsigned __int8 *)(v2 + v6) - 48 <= 9 || (*(_BYTE *)(v2 + v6) & 0xDFu) - 65 <= 5 )\n        {\n          if ( v5 > 0x60u )\n            *(_BYTE *)(*a1 + v3 + 2LL) &= 0xDFu;\n          if ( *(_BYTE *)(v2 + v6) > 0x60u )\n            *(_BYTE *)(*a1 + v6) &= 0xDFu;\n          v3 += 3;\n        }\n      }\n    }\n    ++v3;\n  }\n  v7 = *a1;\n  v8 = 0LL;\n  v9 = *((_DWORD *)a1 + 2) - (*((_DWORD *)a1 + 2) != 0);\n  result = 0LL;\n  while ( v9 > (signed int)v8 )\n  {\n    if ( *(_BYTE *)(v7 + v8) < 0 )\n      result = (unsigned int)(result + 1);\n    ++v8;\n  }\n  if ( (_DWORD)result )\n  {\n    v11 = a1;\n    v12 = buffer_string_prepare_copy(a2, (unsigned int)(3 * result + v9));\n    v13 = 0LL;\n    LODWORD(v14) = 0;\n    while ( v9 > (signed int)v13 )\n    {\n      v15 = *(_BYTE *)(v7 + v13);\n      v16 = (_BYTE *)(v12 + (unsigned int)v14);\n      if ( v15 < 0 )\n      {\n        *v16 = 37;\n        *(_BYTE *)(v12 + (unsigned int)(v14 + 1)) = 37;\n        *(_BYTE *)(v12 + (unsigned int)(v14 + 2)) = a0123456789abcd[(*(_BYTE *)(v7 + v13) >> 4) & 0xF];\n        v14 = (unsigned int)(v14 + 3);\n        *(_BYTE *)(v12 + v14) = a0123456789abcd[*(_BYTE *)(v7 + v13) & 0xF];\n      }\n      else\n      {\n        *v16 = v15;\n      }\n      LODWORD(v14) = v14 + 1;\n      ++v13;\n    }\n    result = buffer_copy_string_len(v11, v12, (unsigned int)v14);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x17569L", 
            "funcEndAddr": "0x176bfL", 
            "funcName": "pcre_keyvalue_burl_normalize_value"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall chunkqueue_set_chunk_size(unsigned __int64 a1)\n{\n  unsigned __int64 result; // rax\n\n  for ( result = 1024LL; result < a1 && result <= 0x3FFFFFFF; result *= 2LL )\n    ;\n  if ( !a1 )\n    result = 0x2000LL;\n  qword_2580D8 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x176bfL", 
            "funcEndAddr": "0x176eaL", 
            "funcName": "chunkqueue_set_chunk_size"
        }, 
        {
            "decompiledFuncCode": "void chunkqueue_set_tempdirs_default_reset()\n{\n  qword_2580D8 = 0x2000LL;\n  qword_258590 = 0LL;\n  qword_2580D0 = 0x100000LL;\n}\n", 
            "funcStartAddr": "0x176eaL", 
            "funcEndAddr": "0x1770cL", 
            "funcName": "chunkqueue_set_tempdirs_default_reset"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_free(void *ptr)\n{\n  _QWORD **v1; // rbx\n  _QWORD *v2; // rdi\n\n  if ( ptr )\n  {\n    v1 = (_QWORD **)ptr;\n    *((_QWORD *)ptr + 1) = 0LL;\n    while ( 1 )\n    {\n      v2 = *v1;\n      if ( !*v1 )\n        break;\n      *v1 = (_QWORD *)*v2;\n      sub_2D6B0(v2);\n    }\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x1770cL", 
            "funcEndAddr": "0x1773cL", 
            "funcName": "chunkqueue_free"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_set_tempdirs_default(__int64 a1, signed __int64 a2)\n{\n  if ( !a2 )\n    a2 = 0x100000LL;\n  qword_258590 = a1;\n  qword_2580D0 = a2;\n}\n", 
            "funcStartAddr": "0x1773cL", 
            "funcEndAddr": "0x17755L", 
            "funcName": "chunkqueue_set_tempdirs_default"
        }, 
        {
            "decompiledFuncCode": "int __fastcall chunkqueue_internal_pipes(int a1)\n{\n  int result; // eax\n\n  if ( pipedes[0] != -1 )\n  {\n    result = close(pipedes[0]);\n    pipedes[0] = -1;\n  }\n  if ( fdout != -1 )\n  {\n    result = close(fdout);\n    fdout = -1;\n  }\n  if ( a1 )\n    result = fdevent_pipe_cloexec(pipedes);\n  return result;\n}\n", 
            "funcStartAddr": "0x17755L", 
            "funcEndAddr": "0x177a4L", 
            "funcName": "chunkqueue_internal_pipes"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_177A4()\n{\n  ssize_t v0; // rax\n  int v1; // eax\n  __int64 v3; // [rsp+0h] [rbp-4018h]\n  unsigned __int64 v4; // [rsp+4008h] [rbp-10h]\n\n  v4 = __readfsqword(0x28u);\n  while ( 1 )\n  {\n    do\n      v0 = read(pipedes[0], &v3, 0x4000uLL);\n    while ( v0 > 0 );\n    if ( !v0 )\n      break;\n    v1 = *__errno_location();\n    if ( v1 != 4 )\n    {\n      if ( v1 != 11 )\n        chunkqueue_internal_pipes(1);\n      return __readfsqword(0x28u) ^ v4;\n    }\n  }\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x177a4L", 
            "funcEndAddr": "0x17819L", 
            "funcName": "sub_177A4"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17819(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // rax\n  __int64 v3; // r9\n  signed __int64 v4; // rcx\n  _DWORD *v5; // rsi\n  __int64 v6; // r8\n  __int64 v7; // rdx\n  void **v8; // rdi\n  __int64 result; // rax\n  int v10; // ebx\n  void *v11; // rdi\n  void *ptr; // [rsp+0h] [rbp-48h]\n  __int64 v13; // [rsp+8h] [rbp-40h]\n  unsigned __int64 v14; // [rsp+38h] [rbp-10h]\n\n  v2 = a1;\n  v3 = a2;\n  v4 = 14LL;\n  v5 = a1;\n  v6 = a1[3];\n  v7 = a1[2];\n  v8 = &ptr;\n  while ( v4 )\n  {\n    *(_DWORD *)v8 = *v5;\n    ++v5;\n    v8 = (void **)((char *)v8 + 4);\n    --v4;\n  }\n  v2[1] = 0LL;\n  *v2 = 0LL;\n  v2[2] = v6;\n  v14 = __readfsqword(0x28u);\n  result = chunkqueue_steal_with_tempfiles(v2, &ptr, v7 - v6, v3);\n  if ( (_DWORD)result )\n  {\n    v10 = *__errno_location();\n    v13 = 0LL;\n    while ( 1 )\n    {\n      v11 = ptr;\n      if ( !ptr )\n        break;\n      ptr = *(void **)ptr;\n      sub_2D6B0(v11);\n    }\n    result = (unsigned int)-v10;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x17819L", 
            "funcEndAddr": "0x178b7L", 
            "funcName": "sub_17819"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_178B7(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r12\n  _QWORD *i; // rax\n\n  v4 = a4;\n  for ( i = (_QWORD *)*a1; (_QWORD *)*i != a2; i = (_QWORD *)*i )\n    ;\n  *i = 0LL;\n  a1[2] -= a3;\n  a1[3] -= a3;\n  a1[1] = i;\n  chunkqueue_mark_written(a1, a3);\n  *a2 = *a1;\n  *a1 = a2;\n  return -(signed __int64)((unsigned int)sub_17819(a1, v4) != 0);\n}\n", 
            "funcStartAddr": "0x178b7L", 
            "funcEndAddr": "0x17917L", 
            "funcName": "sub_178B7"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_remove_empty_chunks(_QWORD **a1)\n{\n  _QWORD **v1; // rbp\n  _QWORD *i; // rbx\n  _QWORD *v3; // rdi\n  __int64 v4; // rax\n  bool v5; // zf\n  __int64 v7; // [rsp+0h] [rbp-18h]\n\n  v1 = a1;\n  chunkqueue_remove_finished_chunks();\n  for ( i = *a1; i; i = (_QWORD *)*i )\n  {\n    v3 = (_QWORD *)*i;\n    if ( !*i )\n      break;\n    if ( *((_DWORD *)v3 + 2) )\n      v4 = v3[4];\n    else\n      v4 = *(_DWORD *)(v3[2] + 8LL) - (unsigned int)(*(_DWORD *)(v3[2] + 8LL) != 0);\n    if ( v3[3] == v4 )\n    {\n      v5 = v1[1] == v3;\n      *i = *v3;\n      if ( v5 )\n        v1[1] = i;\n      sub_2D6B0(v3);\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x17917L", 
            "funcEndAddr": "0x17976L", 
            "funcName": "chunkqueue_remove_empty_chunks"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17976(__int64 a1, _DWORD *a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  int v4; // eax\n  unsigned int v5; // ebp\n  __int64 v6; // rdx\n  unsigned int v7; // eax\n  bool v8; // cf\n  __int64 v9; // rax\n  int v10; // eax\n\n  v3 = a3;\n  v4 = *__errno_location();\n  if ( v4 == 4 )\n  {\n    v5 = 1;\n  }\n  else\n  {\n    if ( v4 == 28\n      && (v6 = *(_QWORD *)(a1 + 32)) != 0\n      && (v7 = *(_DWORD *)(a1 + 48) + 1, v8 = v7 < *(_DWORD *)(v6 + 16), *(_DWORD *)(a1 + 48) = v7, v8) )\n    {\n      v5 = 1;\n    }\n    else\n    {\n      v5 = 0;\n      log_perror(a2, \"chunk.c\", 716LL, (__int64)\"write() temp-file %s failed\", **(_QWORD **)(v3 + 16));\n    }\n    if ( *(_DWORD *)(v3 + 8) )\n      v9 = *(_QWORD *)(v3 + 32);\n    else\n      v9 = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v3 + 16) + 8LL) != 0);\n    if ( *(_QWORD *)(v3 + 24) == v9 )\n    {\n      chunkqueue_remove_empty_chunks((_QWORD **)a1);\n    }\n    else\n    {\n      if ( *(_QWORD *)(v3 + 80) )\n        ck_assert_failed(\"chunk.c\", 724LL, \"0 == c->file.refchg\");\n      v10 = close(*(_DWORD *)(v3 + 40));\n      *(_DWORD *)(v3 + 40) = -1;\n      if ( v10 )\n      {\n        v5 = 0;\n        log_perror(a2, \"chunk.c\", 728LL, (__int64)\"close() temp-file %s failed\", **(_QWORD **)(v3 + 16));\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x17976L", 
            "funcEndAddr": "0x17a7bL", 
            "funcName": "sub_17976"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17A7B(__int64 a1, int a2, int a3, __int64 a4)\n{\n  __int64 v4; // r14\n  int v5; // ebx\n  ssize_t v6; // rax\n  int v7; // er12\n  int *v9; // rax\n  __int64 v10; // rdx\n  int v11; // ebx\n  __int64 v12; // rax\n  __int64 v13; // [rsp+0h] [rbp-4048h]\n  unsigned __int64 v14; // [rsp+4008h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v14 = __readfsqword(0x28u);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v6 = read(a2, &v13, 0x4000uLL);\n      v7 = v6;\n      if ( v6 >= 0 )\n        break;\n      if ( *__errno_location() != 4 )\n        goto LABEL_8;\n    }\n    if ( (unsigned int)chunkqueue_append_mem_to_tempfile(a1, &v13, v6, v4) )\n      break;\n    v5 -= v7;\n    if ( !v5 )\n      return 0LL;\n  }\nLABEL_8:\n  if ( !v5 )\n    return 0LL;\n  v9 = __errno_location();\n  v10 = *(_QWORD *)(a1 + 8);\n  v11 = *v9;\n  if ( v10 )\n  {\n    if ( *(_DWORD *)(v10 + 8) )\n      v12 = *(_QWORD *)(v10 + 32);\n    else\n      v12 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v10 + 16) + 8LL) != 0);\n    if ( *(_QWORD *)(v10 + 24) == v12 )\n      chunkqueue_remove_empty_chunks((_QWORD **)a1);\n  }\n  return -v11;\n}\n", 
            "funcStartAddr": "0x17a7bL", 
            "funcEndAddr": "0x17b5cL", 
            "funcName": "sub_17A7B"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_17B5C(int fd, __int64 a2, __int64 a3)\n{\n  signed __int64 v3; // rax\n  size_t v4; // r12\n  const void *v5; // rbx\n  ssize_t result; // rax\n  char n[12]; // [rsp+4h] [rbp-4074h]\n  __int64 v8; // [rsp+10h] [rbp-4068h]\n  __int64 v9; // [rsp+18h] [rbp-4060h]\n  __int64 v10; // [rsp+20h] [rbp-4058h]\n  __int64 v11; // [rsp+28h] [rbp-4050h]\n  __int64 v12; // [rsp+30h] [rbp-4048h]\n  __int64 v13; // [rsp+38h] [rbp-4040h]\n  int v14; // [rsp+40h] [rbp-4038h]\n  char v15; // [rsp+50h] [rbp-4028h]\n  unsigned __int64 v16; // [rsp+4058h] [rbp-20h]\n\n  v16 = __readfsqword(0x28u);\n  *(_QWORD *)&n[4] = &v15;\n  v3 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);\n  if ( v3 > 0x3FFF )\n    LODWORD(v3) = 0x4000;\n  *(_DWORD *)n = v3;\n  v8 = a2;\n  v9 = a2;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  v13 = 0LL;\n  v14 = 0;\n  if ( (unsigned int)chunkqueue_peek_data(&v8, &n[4], n, a3) && !*(_DWORD *)n )\n    return -1LL;\n  v4 = *(unsigned int *)n;\n  v5 = *(const void **)&n[4];\n  while ( 1 )\n  {\n    result = write(fd, v5, v4);\n    if ( result != -1 )\n      break;\n    if ( *__errno_location() != 4 )\n      return -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x17b5cL", 
            "funcEndAddr": "0x17c49L", 
            "funcName": "sub_17B5C"
        }, 
        {
            "decompiledFuncCode": "int fdevent_socket_nb_cloexec_init()\n{\n  int result; // eax\n  int v1; // ebx\n  unsigned int v2; // eax\n  int v3; // edx\n\n  result = socket(2, 526337, 0);\n  if ( result >= 0 )\n  {\n    v1 = result;\n    v2 = fcntl(result, 3, 0LL);\n    v3 = 0;\n    if ( v2 != -1 )\n      v3 = (v2 >> 11) & 1;\n    dword_2585C0 = v3;\n    dword_2585C4 = 1;\n    result = close(v1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x17c49L", 
            "funcEndAddr": "0x17c9aL", 
            "funcName": "fdevent_socket_nb_cloexec_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_load_file(__int64 a1, __off_t *a2, _DWORD *a3, __int64 (__fastcall *a4)(__off_t, __int64), void (__fastcall *a5)(__int64, __off_t))\n{\n  __off_t *v5; // r13\n  __int64 (__fastcall *v6)(__off_t, __int64); // rbp\n  int v7; // eax\n  int v8; // er12\n  __int64 v9; // rsi\n  __off_t v10; // rbx\n  __int64 v11; // rbp\n  __int64 v12; // r15\n  ssize_t v13; // rax\n  bool v14; // zf\n  ssize_t v15; // r14\n  bool v16; // al\n  bool v17; // al\n  int *v18; // rax\n  int *v19; // r14\n  int v20; // er15\n  _DWORD *v22; // [rsp+10h] [rbp-E8h]\n  void (__fastcall *v23)(__int64, __off_t); // [rsp+18h] [rbp-E0h]\n  struct stat64 stat_buf; // [rsp+20h] [rbp-D8h]\n  unsigned __int64 v25; // [rsp+B8h] [rbp-40h]\n\n  v5 = a2;\n  v6 = a4;\n  v22 = a3;\n  v25 = __readfsqword(0x28u);\n  v23 = a5;\n  v7 = fdevent_open_cloexec(a1, 1LL, 0LL, 0LL, a5);\n  v8 = v7;\n  if ( v7 < 0 || (v9 = (unsigned int)v7, __fxstat64(1, v7, &stat_buf)) )\n  {\n    v11 = 0LL;\n    v10 = 0LL;\n  }\n  else\n  {\n    v10 = stat_buf.st_size;\n    if ( *v5 && *v5 <= stat_buf.st_size )\n    {\n      v11 = 0LL;\n      *__errno_location() = 75;\n      v10 = 0LL;\n    }\n    else\n    {\n      v11 = v6(stat_buf.st_size + 1, v9);\n      if ( v11 )\n      {\n        if ( !v10 )\n          goto LABEL_30;\n        v12 = 0LL;\n        do\n        {\n          v13 = read(v8, (void *)(v11 + v12), v10 - v12);\n          v14 = v13 == 0;\n          v15 = v13;\n          if ( v13 <= 0 )\n          {\n            v17 = 0;\n            if ( !v14 )\n              v17 = *__errno_location() == 4;\n            v16 = v17;\n          }\n          else\n          {\n            v12 += v13;\n            v16 = v12 != v10;\n          }\n        }\n        while ( v16 );\n        if ( v12 == v10 )\n        {\nLABEL_30:\n          *(_BYTE *)(v11 + v10) = 0;\n          *v5 = v10;\n          close(v8);\n          return v11;\n        }\n        v18 = __errno_location();\n        if ( v15 >= 0 )\n          *v18 = 5;\n      }\n    }\n  }\n  v19 = __errno_location();\n  v20 = *v19;\n  if ( v22 )\n    log_perror(v22, \"fdevent.c\", 623LL, (__int64)&unk_49879, \"fdevent_load_file\", a1);\n  if ( v8 >= 0 )\n    close(v8);\n  if ( v11 )\n  {\n    ck_memclear_s(v11, v10, v10);\n    v23(v11, v10);\n  }\n  *v5 = 0LL;\n  v11 = 0LL;\n  *v19 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x17c9aL", 
            "funcEndAddr": "0x17e57L", 
            "funcName": "fdevent_load_file"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_17E57(__int64 a1, __int64 a2)\n{\n  int *v2; // r12\n\n  v2 = __errno_location();\n  do\n  {\n    if ( *v2 != 4 && *v2 != 11 )\n    {\n      log_perror(\n        *(_DWORD **)(a1 + 40),\n        \"fdevent_fdnode.c\",\n        81LL,\n        (__int64)\"fdevent event_del failed on fd %d\",\n        *(unsigned int *)(a2 + 16));\n      return 0LL;\n    }\n  }\n  while ( (*(unsigned int (__fastcall **)(__int64, __int64))(a1 + 24))(a1, a2) );\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x17e57L", 
            "funcEndAddr": "0x17eb4L", 
            "funcName": "sub_17E57"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_17EB4(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // er13\n  int *v4; // r12\n\n  v3 = a3;\n  v4 = __errno_location();\n  do\n  {\n    if ( *v4 != 4 && *v4 != 11 )\n    {\n      log_perror(\n        *(_DWORD **)(a1 + 40),\n        \"fdevent_fdnode.c\",\n        118LL,\n        (__int64)\"fdevent event_set failed on fd %d\",\n        *(unsigned int *)(a2 + 16));\n      return 0LL;\n    }\n  }\n  while ( (*(unsigned int (__fastcall **)(__int64, __int64, _QWORD))(a1 + 16))(a1, a2, v3) );\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x17eb4L", 
            "funcEndAddr": "0x17f20L", 
            "funcName": "sub_17EB4"
        }, 
        {
            "decompiledFuncCode": "void *sub_17F20()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x10uLL);\n  if ( !result )\n    ck_assert_failed(\"gw_backend.c\", 219LL, \"f\");\n  return result;\n}\n", 
            "funcStartAddr": "0x17f20L", 
            "funcEndAddr": "0x17f52L", 
            "funcName": "sub_17F20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17F52(char **a1, _OWORD *a2, __int64 a3)\n{\n  __int64 v3; // r15\n  __int64 v4; // r13\n  __int64 *v5; // r14\n  unsigned int v6; // ebp\n  char *v7; // rdx\n  signed __int64 v8; // rbx\n  char *v9; // ST08_8\n  signed __int64 v10; // rbx\n  int v11; // eax\n  __int64 v12; // rbp\n  char *v13; // rax\n  signed __int64 v14; // rcx\n  char *v15; // rdi\n  __int64 v16; // rax\n  __int64 v17; // rbx\n  int v18; // esi\n  void *v19; // rdi\n  __int64 v20; // rsi\n  void *v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // rdx\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = (__int64 *)a1;\n  v6 = *((_DWORD *)a1 + 2);\n  v7 = *a1;\n  while ( v6 > (unsigned int)v3 )\n  {\n    v8 = 40 * v3;\n    v9 = v7;\n    ++v3;\n    v10 = (signed __int64)&v7[v8];\n    v11 = buffer_is_equal(a2, v10);\n    v7 = v9;\n    if ( v11 )\n    {\n      if ( v10 )\n        goto LABEL_12;\n      break;\n    }\n  }\n  if ( v6 == *((_DWORD *)a1 + 3) )\n  {\n    v12 = v6 + 8;\n    *((_DWORD *)a1 + 3) = v12;\n    v13 = (char *)realloc(v7, 40 * v12);\n    *a1 = v13;\n    if ( !v13 )\n      ck_assert_failed(\"gw_backend.c\", 249LL, \"ext->exts\");\n    v14 = 80LL;\n    v15 = &v13[40 * *((unsigned int *)a1 + 2)];\n    while ( v14 )\n    {\n      *(_DWORD *)v15 = 0;\n      v15 += 4;\n      --v14;\n    }\n  }\n  v16 = *((unsigned int *)v5 + 2);\n  v17 = *v5;\n  *((_DWORD *)v5 + 2) = v16 + 1;\n  v10 = 40 * v16 + v17;\n  *(_DWORD *)(v10 + 20) = -1;\n  *(_OWORD *)v10 = *a2;\nLABEL_12:\n  v18 = *(_DWORD *)(v10 + 36);\n  if ( v18 == *(_DWORD *)(v10 + 32) )\n  {\n    v19 = *(void **)(v10 + 24);\n    v20 = (unsigned int)(v18 + 4);\n    *(_DWORD *)(v10 + 36) = v20;\n    v21 = realloc(v19, 8 * v20);\n    *(_QWORD *)(v10 + 24) = v21;\n    if ( !v21 )\n      ck_assert_failed(\"gw_backend.c\", 262LL, \"fe->hosts\");\n  }\n  v22 = *(unsigned int *)(v10 + 32);\n  v23 = *(_QWORD *)(v10 + 24);\n  *(_DWORD *)(v10 + 32) = v22 + 1;\n  *(_QWORD *)(v23 + 8 * v22) = v4;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x17f52L", 
            "funcEndAddr": "0x18071L", 
            "funcName": "sub_17F52"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18071(__int64 a1, const void *a2, unsigned __int64 a3, const void *a4, __int64 a5)\n{\n  __int64 v5; // r14\n  const void *v6; // r13\n  unsigned __int64 v7; // rbp\n  char *v8; // rax\n  const char *v9; // r12\n  size_t v10; // rbp\n  const void *v11; // rsi\n  unsigned int v12; // er8\n  __int64 v13; // r13\n  _QWORD *v14; // rcx\n  const char *v15; // r9\n  unsigned int v16; // ST1C_4\n  _QWORD *v17; // ST10_8\n  signed __int64 v18; // r15\n  unsigned int v19; // er14\n  unsigned int v20; // esi\n  __int64 v21; // rsi\n  void *v22; // rax\n  __int64 v23; // rax\n  _QWORD *v24; // rdx\n  char *ptr; // [rsp+8h] [rbp-50h]\n\n  if ( a2 && a4 )\n  {\n    v5 = a5;\n    v6 = a4;\n    v7 = a3;\n    v8 = (char *)malloc(a3 + a5 + 3);\n    v9 = v8;\n    if ( !v8 )\n      ck_assert_failed(\"gw_backend.c\", 478LL, \"dst\");\n    qmemcpy(v8, a2, v7);\n    v8[v7] = 61;\n    v10 = v7 + 1;\n    v11 = v6;\n    v12 = *(_DWORD *)(a1 + 12);\n    v13 = 0LL;\n    qmemcpy(&v8[v10], v11, v5 + 1);\n    v14 = *(_QWORD **)a1;\n    while ( v12 > (unsigned int)v13 )\n    {\n      v15 = (const char *)v14[v13];\n      v16 = v12;\n      v17 = v14;\n      v18 = 8 * v13++;\n      ptr = (char *)v15;\n      v19 = strncmp(v9, v15, v10);\n      v14 = v17;\n      v12 = v16;\n      if ( !v19 )\n      {\n        free(ptr);\n        *(_QWORD *)(*(_QWORD *)a1 + v18) = v9;\n        return v19;\n      }\n    }\n    v20 = *(_DWORD *)(a1 + 8);\n    if ( v20 <= v12 + 1 )\n    {\n      v21 = v20 + 16;\n      *(_DWORD *)(a1 + 8) = v21;\n      v22 = realloc(v14, 8 * v21);\n      *(_QWORD *)a1 = v22;\n      if ( !v22 )\n        ck_assert_failed(\"gw_backend.c\", 497LL, \"env->ptr\");\n    }\n    v23 = *(unsigned int *)(a1 + 12);\n    v24 = *(_QWORD **)a1;\n    v19 = 0;\n    *(_DWORD *)(a1 + 12) = v23 + 1;\n    v24[v23] = v9;\n  }\n  else\n  {\n    v19 = -1;\n  }\n  return v19;\n}\n", 
            "funcStartAddr": "0x18071L", 
            "funcEndAddr": "0x181b6L", 
            "funcName": "sub_18071"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_181B6(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 *v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // rsi\n\n  if ( *(_QWORD *)(a1 + 104) )\n  {\n    v3 = a1;\n    v4 = a2;\n    if ( !*(_QWORD *)(a2 + 88) )\n      *(_QWORD *)(a2 + 88) = buffer_init(a1, a2);\n    v5 = *(__int64 **)(a1 + 104);\n    v6 = *(_QWORD *)(a2 + 88);\n    v7 = *v5;\n    if ( *(_QWORD *)(v3 + 112) )\n    {\n      *(_DWORD *)(v6 + 8) = 0;\n      buffer_append_str2(v6, v7, *((_DWORD *)v5 + 2) - (unsigned int)(*((_DWORD *)v5 + 2) != 0), \"-\", 1LL);\n      result = buffer_append_int(*(_QWORD *)(v4 + 88), *(unsigned int *)(v4 + 48));\n    }\n    else\n    {\n      result = buffer_copy_string_len(v6, v7, *((_DWORD *)v5 + 2) - (unsigned int)(*((_DWORD *)v5 + 2) != 0));\n    }\n  }\n  else\n  {\n    result = (unsigned int)(*(_DWORD *)(a2 + 48) + *(_DWORD *)(a1 + 40));\n    *(_WORD *)(a2 + 96) = *(_WORD *)(a2 + 48) + *(_WORD *)(a1 + 40);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x181b6L", 
            "funcEndAddr": "0x1823eL", 
            "funcName": "sub_181B6"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1823E(_DWORD *a1, _DWORD *a2, int a3)\n{\n  __int64 result; // rax\n\n  result = (unsigned int)*a2;\n  if ( (_DWORD)result != a3 )\n  {\n    if ( (_DWORD)result )\n    {\n      if ( !a3 )\n        ++*a1;\n    }\n    else\n    {\n      --*a1;\n    }\n    *a2 = a3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1823eL", 
            "funcEndAddr": "0x18255L", 
            "funcName": "sub_1823E"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18255(void *ptr)\n{\n  _QWORD *v1; // rbx\n  unsigned int v2; // ebp\n  void **v3; // rdi\n  __int64 v4; // rax\n\n  v1 = ptr;\n  if ( *(_QWORD *)ptr )\n    sub_31240();\n  if ( *((_QWORD *)ptr + 8) )\n    sub_31240();\n  v2 = 0;\n  while ( 1 )\n  {\n    v3 = (void **)v1[24];\n    if ( v2 >= *((_DWORD *)v1 + 51) )\n      break;\n    v4 = v2++;\n    free(v3[v4]);\n  }\n  free(v3);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x18255L", 
            "funcEndAddr": "0x182a9L", 
            "funcName": "sub_18255"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_182A9(void *ptr)\n{\n  _DWORD *v1; // r13\n  unsigned int i; // ebp\n  char *v3; // rdi\n  unsigned int v4; // er12\n  signed __int64 v5; // rbx\n  _QWORD *v6; // rdi\n  _DWORD *v7; // rdi\n  int v8; // eax\n\n  v1 = ptr;\n  for ( i = 0; ; ++i )\n  {\n    v3 = *(char **)v1;\n    if ( i >= v1[2] )\n      break;\n    v4 = 0;\n    v5 = (signed __int64)&v3[40 * i];\n    while ( 1 )\n    {\n      v6 = *(_QWORD **)(v5 + 24);\n      if ( v4 >= *(_DWORD *)(v5 + 32) )\n        break;\n      v7 = (_DWORD *)v6[v4];\n      if ( v7 )\n      {\n        v8 = v7[46];\n        if ( v8 )\n          v7[46] = v8 - 1;\n        else\n          sub_18255(v7);\n      }\n      ++v4;\n    }\n    free(v6);\n  }\n  free(v3);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x182a9L", 
            "funcEndAddr": "0x1831fL", 
            "funcName": "sub_182A9"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1831F(unsigned __int16 *a1, _DWORD *a2, _QWORD **a3, _DWORD *a4, __int64 a5)\n{\n  unsigned __int64 result; // rax\n\n  result = a5 & 0x7F;\n  if ( a5 & 0x7F )\n  {\n    if ( (char)(result + 1) <= 1 )\n    {\n      result = log_error(a4, \"gw_backend.c\", 384LL, (__int64)\"child died somehow: %d\", a5, a1);\n    }\n    else if ( (_DWORD)result != 15 && (_DWORD)result != 2 && (_DWORD)result != *a1 )\n    {\n      result = log_error(a4, \"gw_backend.c\", 380LL, (__int64)\"child signalled: %d\", (unsigned int)result);\n    }\n  }\n  else if ( *a2 != 4 )\n  {\n    result = log_error(a4, \"gw_backend.c\", 373LL, (__int64)\"child exited: %d %s\", BYTE1(a5), **a3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1831fL", 
            "funcEndAddr": "0x183acL", 
            "funcName": "sub_1831F"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_183AC(__int64 a1, __int64 a2)\n{\n  unsigned __int64 result; // rax\n  __int64 v3; // rcx\n  __int64 v4; // r8\n  _DWORD *v5; // r10\n  char **v6; // rdx\n  char *v7; // rax\n  char **v8; // rdx\n  char *v9; // r9\n\n  result = log_monotonic_secs;\n  if ( *(_QWORD *)(a2 + 64) < log_monotonic_secs && *(_DWORD *)(a2 + 8) == 1 )\n  {\n    sub_1823E((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8), 0);\n    v6 = *(char ***)(v4 + 104);\n    v7 = \"\";\n    if ( v6 )\n      v7 = *v6;\n    v8 = *(char ***)(v4 + 48);\n    v9 = \"\";\n    if ( v8 )\n      v9 = *v8;\n    result = log_error(\n               v5,\n               \"gw_backend.c\",\n               362LL,\n               (__int64)\"gw-server re-enabled: %s %s %hu %s\",\n               **(_QWORD **)(v3 + 80),\n               v9,\n               *(unsigned __int16 *)(v4 + 40),\n               v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x183acL", 
            "funcEndAddr": "0x18432L", 
            "funcName": "sub_183AC"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18432(_QWORD **a1, __int64 a2, const void *a3, unsigned __int64 a4)\n{\n  unsigned __int64 v4; // r13\n  const void *v5; // r12\n  unsigned int v6; // eax\n  __int64 v7; // rbx\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  char vars0[11]; // [rsp+0h] [rbp+0h]\n  char varsB; // [rsp+Bh] [rbp+Bh]\n  unsigned __int64 vars128; // [rsp+128h] [rbp+128h]\n\n  v4 = a4;\n  v5 = a3;\n  vars128 = __readfsqword(0x28u);\n  qmemcpy(vars0, \"gw.backend.\", sizeof(vars0));\n  v6 = *((_DWORD *)*a1 + 2) - (*((_DWORD *)*a1 + 2) != 0);\n  if ( *((_DWORD *)*a1 + 2) == (*((_DWORD *)*a1 + 2) != 0) )\n  {\n    v8 = 11LL;\n    if ( !a2 )\n      goto LABEL_9;\n    goto LABEL_8;\n  }\n  v7 = v6;\n  if ( v6 > 0x114 )\n    ck_assert_failed(\"gw_backend.c\", 56LL, \"len < sizeof(label) - llen\");\n  __memcpy_chk(&varsB, **a1, v6, 277LL);\n  v8 = v7 + 11;\n  if ( a2 )\n  {\n    if ( v8 > 0x108 )\n      ck_assert_failed(\n        \"gw_backend.c\",\n        62LL,\n        \"llen < sizeof(label) - ((2 + (8 * sizeof(intmax_t) * 31 + 99) / 100) + 1)\");\nLABEL_8:\n    v9 = *(unsigned int *)(a2 + 48);\n    vars0[v8] = 46;\n    v8 += 1 + li_utostrn(&vars0[v8 + 1], 22LL, v9);\n  }\nLABEL_9:\n  if ( 288 - v8 <= v4 )\n    ck_assert_failed(\"gw_backend.c\", 68LL, &unk_499CF);\n  qmemcpy(&vars0[v8], v5, (unsigned int)v4);\n  vars0[v8 + v4] = 0;\n  return array_get_int_ptr(&plugin_stats, vars0, v8 + v4);\n}\n", 
            "funcStartAddr": "0x18432L", 
            "funcEndAddr": "0x1857fL", 
            "funcName": "sub_18432"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_1857F(_DWORD *a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // er12\n  __int64 v7; // rbx\n  int v8; // er14\n  __int64 v9; // r13\n  _DWORD *result; // rax\n  _DWORD *v11; // [rsp+8h] [rbp-50h]\n  _QWORD **v12; // [rsp+10h] [rbp-48h]\n  int v13; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = a5;\n  v7 = a3;\n  v8 = a4;\n  v9 = log_monotonic_secs;\n  v13 = a6;\n  *__errno_location() = a5;\n  log_perror(a1, \"gw_backend.c\", 285LL, (__int64)\"establishing connection failed: socket: %s\", **(_QWORD **)(v7 + 80));\n  v12 = (_QWORD **)(a2 + 56);\n  if ( !*(_DWORD *)(v7 + 44) )\n  {\n    *(_QWORD *)(v7 + 64) = *(unsigned __int16 *)(a2 + 84) + v9;\n    sub_1823E((_DWORD *)(a2 + 8), (_DWORD *)(v7 + 8), 1);\n    goto LABEL_10;\n  }\n  if ( *(_DWORD *)(v7 + 40) != v8 || *(_DWORD *)(v7 + 8) )\n  {\nLABEL_10:\n    if ( v6 == 11 )\n    {\nLABEL_11:\n      result = (_DWORD *)sub_18432(v12, v7, \".overloaded\", 0xBuLL);\n      ++*result;\n      return result;\n    }\n    goto LABEL_12;\n  }\n  log_error(\n    a1,\n    \"gw_backend.c\",\n    301LL,\n    (__int64)\"backend error; we'll disable for %dsecs and send the request to another backend instead:load: %d\",\n    *(unsigned __int16 *)(a2 + 84),\n    *(unsigned int *)(a2 + 16));\n  v11 = (_DWORD *)(a2 + 8);\n  if ( v6 == 11 )\n  {\n    log_error(\n      a1,\n      \"gw_backend.c\",\n      308LL,\n      (__int64)\"If this happened on Linux: You have run out of local ports. Check the manual, section Performance how to handle this.\");\n    if ( v13 )\n      log_error(\n        a1,\n        \"gw_backend.c\",\n        313LL,\n        (__int64)\"This means that you have more incoming requests than your FastCGI backend can handle in parallel.  It m\"\n                 \"ight help to spawn more FastCGI backends or PHP children; if not, decrease server.max-connections.  The\"\n                 \" load for this FastCGI backend %s is %d\",\n        **(_QWORD **)(v7 + 80),\n        *(unsigned int *)(v7 + 12));\n    *(_QWORD *)(v7 + 64) = *(unsigned __int16 *)(a2 + 84) + v9;\n    sub_1823E(v11, (_DWORD *)(v7 + 8), 1);\n    goto LABEL_11;\n  }\n  *(_QWORD *)(v7 + 64) = *(unsigned __int16 *)(a2 + 84) + v9;\n  sub_1823E(v11, (_DWORD *)(v7 + 8), 1);\nLABEL_12:\n  result = (_DWORD *)sub_18432(v12, v7, \".died\", 5uLL);\n  ++*result;\n  return result;\n}\n", 
            "funcStartAddr": "0x1857fL", 
            "funcEndAddr": "0x1872cL", 
            "funcName": "sub_1857F"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1872C(__int64 a1, __int64 a2, _DWORD *a3)\n{\n  __int64 v4; // rbp\n  __pid_t v5; // edi\n  _DWORD *v6; // r13\n  int v7; // eax\n  bool v8; // zf\n  int stat_loc; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v10; // [rsp+8h] [rbp-30h]\n\n  v10 = __readfsqword(0x28u);\n  if ( !*(_DWORD *)(a2 + 44) )\n    return 0LL;\n  v4 = a1;\n  v5 = *(_DWORD *)(a2 + 40);\n  if ( v5 <= 0 )\n    return 0LL;\n  v6 = a3;\n  v7 = fdevent_waitpid(v5, &stat_loc);\n  if ( !v7 )\n    return 0LL;\n  if ( v7 == -1 )\n    log_perror(\n      v6,\n      \"gw_backend.c\",\n      402LL,\n      (__int64)\"pid %d %d not found\",\n      *(unsigned int *)(a2 + 40),\n      *(unsigned int *)(a2 + 8));\n  else\n    sub_1831F((unsigned __int16 *)(v4 + 178), (_DWORD *)(a2 + 8), (_QWORD **)(a2 + 80), v6, (unsigned int)stat_loc);\n  v8 = *(_DWORD *)(a2 + 8) == 4;\n  *(_DWORD *)(a2 + 40) = 0;\n  if ( !v8 )\n    *(_QWORD *)(a2 + 64) = log_monotonic_secs;\n  sub_1823E((_DWORD *)(v4 + 8), (_DWORD *)(a2 + 8), 3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x1872cL", 
            "funcEndAddr": "0x1880eL", 
            "funcName": "sub_1872C"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1880E(__int64 a1, __int64 a2, _DWORD *a3, int a4)\n{\n  int v4; // er15\n  _DWORD *v5; // r12\n  char **v6; // rax\n  char *v7; // r9\n  unsigned int v8; // er13\n  int v9; // eax\n  int v10; // er14\n  _QWORD *v11; // rax\n  unsigned int v12; // eax\n  unsigned int v13; // er13\n  int v14; // eax\n  const char *v15; // rcx\n  __int64 v16; // rdx\n  __int64 v17; // r8\n  __int64 v18; // rax\n  unsigned int i; // er15\n  __int64 *v20; // rdx\n  __int64 v21; // rdx\n  char *v22; // rax\n  unsigned int j; // er15\n  unsigned int v24; // er15\n  char *v25; // rax\n  unsigned int v26; // er15\n  const char **v27; // r9\n  signed __int64 v28; // rcx\n  __int64 v29; // rax\n  __int64 v30; // rax\n  const char **v31; // ST20_8\n  signed __int64 v32; // ST18_8\n  int v33; // eax\n  __int64 v34; // rdx\n  int v35; // er15\n  signed int v36; // eax\n  unsigned int k; // eax\n  unsigned int v38; // ST18_4\n  __int64 v39; // rax\n  __int64 v40; // rax\n  __int64 v42; // [rsp+8h] [rbp-80h]\n  __int64 v43; // [rsp+10h] [rbp-78h]\n  const void *v44; // [rsp+18h] [rbp-70h]\n  void *ptr; // [rsp+20h] [rbp-68h]\n  __int64 v46; // [rsp+28h] [rbp-60h]\n  struct timeval timeout; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v48; // [rsp+48h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v48 = __readfsqword(0x28u);\n  if ( a4 )\n  {\n    v6 = *(char ***)(a2 + 88);\n    v7 = \"\";\n    if ( v6 )\n      v7 = *v6;\n    log_error(a3, \"gw_backend.c\", 514LL, (__int64)\"new proc, socket: %hu %s\", *(unsigned __int16 *)(a2 + 96), v7);\n  }\n  v8 = fdevent_socket_cloexec(**(unsigned __int16 **)(a2 + 56), 1LL, 0LL);\n  if ( v8 != -1 )\n  {\n    while ( 1 )\n    {\n      v10 = connect(v8, *(const struct sockaddr **)(a2 + 56), *(_DWORD *)(a2 + 52));\n      if ( v10 != -1 )\n        break;\n      v9 = *__errno_location();\n      if ( v9 != 4 )\n      {\n        if ( v9 != 2 )\n        {\n          v11 = *(_QWORD **)(a2 + 88);\n          if ( v11 )\n          {\n            log_perror(v5, \"gw_backend.c\", 530LL, (__int64)\"connect %s\", *v11);\n            unlink(**(const char ***)(a2 + 88));\n          }\n        }\n        break;\n      }\n    }\n    close(v8);\n    if ( v10 == -1 )\n    {\n      v12 = fdevent_socket_cloexec(**(unsigned __int16 **)(a2 + 56), 1LL, 0LL);\n      v13 = v12;\n      if ( v12 == -1 )\n      {\n        log_perror(v5, \"gw_backend.c\", 545LL, (__int64)\"socket()\");\n        return (unsigned int)-1;\n      }\n      v14 = fdevent_set_so_reuseaddr(v12, 1LL);\n      v15 = \"socketsockopt()\";\n      v16 = 550LL;\n      if ( v14 < 0 )\n      {\nLABEL_21:\n        log_perror(v5, \"gw_backend.c\", v16, (__int64)v15);\n        close(v13);\n        return (unsigned int)-1;\n      }\n      if ( bind(v13, *(const struct sockaddr **)(a2 + 56), *(_DWORD *)(a2 + 52)) == -1 )\n      {\n        log_perror(v5, \"gw_backend.c\", 557LL, (__int64)\"bind failed for: %s\", **(_QWORD **)(a2 + 80));\n        close(v13);\n        return (unsigned int)-1;\n      }\n      if ( listen(v13, *(_DWORD *)(a1 + 180)) == -1 )\n      {\n        v15 = \"listen()\";\n        v16 = 564LL;\n        goto LABEL_21;\n      }\n      v18 = *(_QWORD *)(a1 + 128);\n      ptr = 0LL;\n      v46 = 0LL;\n      if ( v18 && *(_DWORD *)(v18 + 16) )\n      {\n        for ( i = 0; ; ++i )\n        {\n          v20 = *(__int64 **)(a1 + 128);\n          if ( *((_DWORD *)v20 + 4) <= i )\n            break;\n          v21 = *v20;\n          v43 = *(_QWORD *)(v21 + 8LL * i);\n          v22 = getenv(*(const char **)(*(_QWORD *)(v21 + 8LL * i) + 32LL));\n          if ( v22 )\n            sub_18071(\n              (__int64)&ptr,\n              *(const void **)(v43 + 32),\n              *(_DWORD *)(v43 + 40) - (unsigned int)(*(_DWORD *)(v43 + 40) != 0),\n              v22,\n              strlen(v22));\n        }\n      }\n      else\n      {\n        v42 = fdevent_environ(v13);\n        for ( j = 0; *(_QWORD *)(v42 + 8LL * j); ++j )\n        {\n          v44 = *(const void **)(v42 + 8LL * j);\n          v25 = strchr(*(const char **)(v42 + 8LL * j), 61);\n          if ( v25 )\n            sub_18071((__int64)&ptr, v44, v25 - (_BYTE *)v44, v25 + 1, strlen(v25 + 1));\n        }\n      }\n      v24 = 0;\n      if ( *(_QWORD *)(a1 + 120) )\n      {\n        while ( 1 )\n        {\n          v29 = *(_QWORD *)(a1 + 120);\n          if ( *(_DWORD *)(v29 + 16) <= v24 )\n            break;\n          v30 = *(_QWORD *)(*(_QWORD *)v29 + 8LL * v24++);\n          sub_18071(\n            (__int64)&ptr,\n            *(const void **)v30,\n            *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0),\n            *(const void **)(v30 + 32),\n            *(_DWORD *)(v30 + 40) - (unsigned int)(*(_DWORD *)(v30 + 40) != 0));\n        }\n      }\n      v26 = HIDWORD(v46);\n      v27 = (const char **)ptr;\n      v28 = 0LL;\n      while ( v26 > (unsigned int)v28 )\n      {\n        v31 = v27;\n        v32 = v28;\n        v33 = strncmp(v27[v28], \"PHP_FCGI_CHILDREN=\", 0x12uLL);\n        v27 = v31;\n        v28 = v32 + 1;\n        if ( !v33 )\n          goto LABEL_43;\n      }\n      if ( v26 == (_DWORD)v28 )\n        sub_18071((__int64)&ptr, \"PHP_FCGI_CHILDREN\", 0x11uLL, \"1\", 1LL);\nLABEL_43:\n      v34 = HIDWORD(v46);\n      *((_QWORD *)ptr + v34) = 0LL;\n      v35 = fdevent_open_dirname(**(_QWORD **)(a1 + 192), 1LL, v34, v28, v17, v27);\n      if ( v35 == -1 )\n      {\n        log_perror(v5, \"gw_backend.c\", 624LL, (__int64)\"open dirname failed: %s\", **(_QWORD **)(a1 + 192));\n        v36 = -1;\n      }\n      else\n      {\n        v36 = -1;\n        if ( v35 >= 0 )\n          v36 = fdevent_fork_execve(**(char ***)(a1 + 192), *(char ***)(a1 + 192), v35);\n      }\n      *(_DWORD *)(a2 + 40) = v36;\n      for ( k = 0; HIDWORD(v46) > k; k = v38 + 1 )\n      {\n        v38 = k;\n        free(*((void **)ptr + k));\n      }\n      free(ptr);\n      if ( v35 != -1 )\n        close(v35);\n      close(v13);\n      if ( *(_DWORD *)(a2 + 40) == -1 )\n      {\n        log_error(v5, \"gw_backend.c\", 640LL, (__int64)\"gw-backend failed to start: %s\", **(_QWORD **)(a1 + 112));\n        v39 = log_monotonic_secs;\n        *(_DWORD *)(a2 + 40) = 0;\n        *(_QWORD *)(a2 + 64) = v39;\n        return (unsigned int)-1;\n      }\n      v40 = log_monotonic_secs;\n      *(_DWORD *)(a2 + 44) = 1;\n      timeout.tv_sec = 0LL;\n      *(_QWORD *)(a2 + 16) = v40;\n      timeout.tv_usec = 1000LL;\n      select(0, 0LL, 0LL, 0LL, &timeout);\n      if ( (unsigned int)sub_1872C(a1, a2, v5) )\n      {\n        log_error(v5, \"gw_backend.c\", 656LL, (__int64)\"gw-backend failed to start: %s\", **(_QWORD **)(a1 + 112));\n        log_error(\n          v5,\n          \"gw_backend.c\",\n          658LL,\n          (__int64)\"If you're trying to run your app as a FastCGI backend, make sure you're using the FastCGI-enabled ver\"\n                   \"sion.  If this is PHP on Gentoo, add 'fastcgi' to the USE flags.  If this is PHP, try removing the by\"\n                   \"tecode caches for now and try again.\");\n        return (unsigned int)-1;\n      }\n    }\n    else\n    {\n      *(_QWORD *)(a2 + 40) = 0LL;\n      if ( v4 )\n        log_error(\n          v5,\n          \"gw_backend.c\",\n          670LL,\n          (__int64)\"(debug) socket is already used; won't spawn: %s\",\n          **(_QWORD **)(a2 + 80));\n    }\n    v8 = 0;\n    sub_1823E((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8), 0);\n    return v8;\n  }\n  log_perror(v5, \"gw_backend.c\", 521LL, (__int64)\"socket()\");\n  return v8;\n}\n", 
            "funcStartAddr": "0x1880eL", 
            "funcEndAddr": "0x18dd5L", 
            "funcName": "sub_1880E"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_18DD5(__int64 a1, _DWORD *a2, int a3, int a4, __int64 a5)\n{\n  int v5; // er13\n  __int64 v6; // rbx\n  unsigned int v7; // eax\n  signed __int64 v8; // rax\n  bool v9; // sf\n  int v10; // esi\n  __int64 v12; // [rsp+0h] [rbp-28h]\n\n  v5 = a3;\n  v6 = a5;\n  v7 = *(_DWORD *)(a5 + 8);\n  if ( v7 == 2 )\n  {\n    if ( !(unsigned int)sub_1872C(a1, a5, a2) )\n      sub_183AC(a1, v6);\n    if ( *(_DWORD *)(v6 + 8) != 3 )\n      return v12;\nLABEL_17:\n    if ( !*(_QWORD *)(a1 + 112) )\n      return sub_183AC(a1, v6);\n    if ( !*(_DWORD *)(v6 + 12) && *(_QWORD *)(v6 + 64) < log_monotonic_secs )\n    {\n      if ( v5 )\n        log_error(\n          a2,\n          \"gw_backend.c\",\n          1075LL,\n          (__int64)\"--- gw spawning\\n\\tsocket %s\\n\\tcurrent: 1 / %u\",\n          **(_QWORD **)(v6 + 80),\n          *(unsigned __int16 *)(a1 + 74));\n      if ( (unsigned int)sub_1880E(a1, v6, a2, v5) )\n        return log_error(a2, \"gw_backend.c\", 1083LL, (__int64)\"ERROR: spawning gw failed.\", v12);\n    }\n    return v12;\n  }\n  if ( v7 <= 2 )\n  {\n    if ( v7 == 1 )\n      return sub_183AC(a1, v6);\n    return v12;\n  }\n  if ( v7 == 3 )\n    goto LABEL_17;\n  if ( v7 != 4 )\n    return v12;\n  if ( !a4 )\n    return v12;\n  v8 = *(_QWORD *)(a5 + 64) + 1LL;\n  v9 = *(_QWORD *)(a5 + 64) - 3LL < 0;\n  *(_QWORD *)(a5 + 64) = v8;\n  if ( (unsigned __int8)(v9 ^ __OFSUB__(v8, 4LL)) | (v8 == 4) )\n    return v12;\n  if ( v8 > 8 )\n  {\n    v10 = 15;\n    if ( v8 >= 17 )\n      v10 = 9;\n  }\n  else\n  {\n    v10 = *(unsigned __int16 *)(a1 + 178);\n  }\n  return kill(*(_DWORD *)(a5 + 40), v10);\n}\n", 
            "funcStartAddr": "0x18dd5L", 
            "funcEndAddr": "0x18f28L", 
            "funcName": "sub_18DD5"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_18F28(_WORD *a1, __int64 **a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 *v4; // rax\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v8; // r8\n  __int64 v9; // rdx\n  signed __int64 result; // rax\n  __int64 *v11; // rax\n  __int64 v12; // rdi\n  void *v13; // rdi\n  void *v14; // rax\n  char *v15; // rax\n  char *v16; // rdi\n  size_t size; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v18; // [rsp+88h] [rbp-30h]\n\n  v3 = a3;\n  v18 = __readfsqword(0x28u);\n  v4 = *(__int64 **)(a3 + 88);\n  if ( !v4 )\n  {\n    v8 = *(unsigned __int16 *)(a3 + 96);\n    v9 = **a2;\n    if ( (unsigned int)sock_addr_from_str_hints((char *)&size + 4) == 1 )\n    {\n      if ( *((_DWORD *)*a2 + 3) )\n      {\n        sock_addr_inet_ntop_copy_buffer(*a2, (char *)&size + 4);\n        *a1 = WORD2(size);\n      }\n      v11 = *a2;\n      v12 = *(_QWORD *)(v3 + 80);\n      *(_DWORD *)(v12 + 8) = 0;\n      buffer_append_str3(v12, \"tcp:\", 4LL, *v11, *((_DWORD *)v11 + 2) - (unsigned int)(*((_DWORD *)v11 + 2) != 0));\n      buffer_append_int(*(_QWORD *)(v3 + 80), *(unsigned __int16 *)(v3 + 96));\n      goto LABEL_9;\n    }\nLABEL_5:\n    *__errno_location() = 22;\n    return 0xFFFFFFFFLL;\n  }\n  v5 = *v4;\n  if ( (unsigned int)sock_addr_from_str_hints((char *)&size + 4) != 1 )\n    goto LABEL_5;\n  v6 = *(_QWORD *)(v3 + 88);\n  v7 = *(_QWORD *)(v3 + 80);\n  *(_DWORD *)(v7 + 8) = 0;\n  buffer_append_str2(v7, \"unix:\", 5LL, *(_QWORD *)v6, *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0));\nLABEL_9:\n  v13 = *(void **)(v3 + 56);\n  if ( v13 && *(_DWORD *)(v3 + 52) < (unsigned int)size )\n  {\n    free(v13);\n    *(_QWORD *)(v3 + 56) = 0LL;\n  }\n  if ( !*(_QWORD *)(v3 + 56) )\n  {\n    v14 = malloc((unsigned int)size);\n    *(_QWORD *)(v3 + 56) = v14;\n    if ( !v14 )\n      ck_assert_failed(\"gw_backend.c\", 465LL, \"proc->saddr\");\n  }\n  v15 = *(char **)(v3 + 56);\n  *(_DWORD *)(v3 + 52) = size;\n  v16 = v15;\n  result = 0LL;\n  qmemcpy(v16, (char *)&size + 4, (unsigned int)size);\n  return result;\n}\n", 
            "funcStartAddr": "0x18f28L", 
            "funcEndAddr": "0x190ddL", 
            "funcName": "sub_18F28"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_190DD(void *ptr, __int64 a2)\n{\n  void (*v2)(void); // rax\n\n  v2 = (void (*)(void))*((_QWORD *)ptr + 42);\n  if ( v2 )\n    v2();\n  http_response_backend_error(a2);\n  sub_31490(ptr);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x190ddL", 
            "funcEndAddr": "0x19113L", 
            "funcName": "sub_190DD"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_19113(__int64 a1, __int64 a2, _WORD *a3)\n{\n  __int16 v3; // ax\n\n  if ( !*(_QWORD *)(a1 + 56)\n    && *(_WORD *)(*(_QWORD *)(a1 + 8) + 176LL)\n    && *(_WORD *)(a1 + 32) != 2\n    && !((*a3 >> 8) & 0x40) )\n  {\n    v3 = *a3 & 0x7FFF;\n    HIBYTE(v3) |= 0x40u;\n    *a3 = v3;\n    *(_BYTE *)(*(_QWORD *)a2 + 840LL) = 0;\n    shutdown(*(_DWORD *)(a1 + 136), 1);\n    fdevent_fdnode_event_clr(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), 4LL);\n  }\n}\n", 
            "funcStartAddr": "0x19113L", 
            "funcEndAddr": "0x19176L", 
            "funcName": "sub_19113"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_19176(__int64 a1)\n{\n  _QWORD *v1; // rax\n  __int64 v2; // rbx\n  int v3; // eax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n\n  v1 = calloc(1uLL, 0x68uLL);\n  if ( !v1 )\n    ck_assert_failed(\"gw_backend.c\", 164LL, \"proc\");\n  v2 = (__int64)v1;\n  v1[10] = buffer_init(1LL, 104LL);\n  v3 = *(_DWORD *)(a1 + 160);\n  *(_QWORD *)(v2 + 72) = 0LL;\n  *(_QWORD *)v2 = 0LL;\n  *(_DWORD *)(v2 + 8) = 3;\n  *(_DWORD *)(v2 + 48) = v3;\n  *(_DWORD *)(a1 + 160) = v3 + 1;\n  *(_DWORD *)sub_18432((_QWORD **)(a1 + 56), v2, \".disabled\", 9uLL) = 0;\n  *(_DWORD *)sub_18432((_QWORD **)(a1 + 56), v2, \".died\", 5uLL) = 0;\n  *(_DWORD *)sub_18432((_QWORD **)(a1 + 56), v2, \".overloaded\", 0xBuLL) = 0;\n  v4 = (_DWORD *)sub_18432((_QWORD **)(a1 + 56), v2, \".connected\", 0xAuLL);\n  *(_QWORD *)(v2 + 32) = v4;\n  *v4 = 0;\n  v5 = (_DWORD *)sub_18432((_QWORD **)(a1 + 56), v2, \".load\", 5uLL);\n  *(_QWORD *)(v2 + 24) = v5;\n  *v5 = 0;\n  sub_181B6(a1, v2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x19176L", 
            "funcEndAddr": "0x19292L", 
            "funcName": "sub_19176"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_19292(__int64 a1, _DWORD *a2, int a3)\n{\n  int v3; // er13\n  __int64 i; // rbx\n  int v5; // edx\n  __int64 v7; // rax\n  __int64 v8; // rax\n  bool v9; // zf\n  __int64 v10; // rax\n  __int64 v11; // [rsp+0h] [rbp-28h]\n\n  v3 = a3;\n  for ( i = *(_QWORD *)(a1 + 64); ; i = *(_QWORD *)i )\n  {\n    if ( !i )\n    {\n      i = sub_19176(a1);\n      goto LABEL_8;\n    }\n    if ( *(_DWORD *)(i + 40) <= 0 )\n      break;\n  }\n  if ( *(_QWORD *)(i + 64) >= log_monotonic_secs )\n    return v11;\n  v10 = *(_QWORD *)i;\n  if ( i == *(_QWORD *)(a1 + 64) )\n    *(_QWORD *)(a1 + 64) = v10;\n  else\n    **(_QWORD **)(i + 72) = v10;\n  if ( *(_QWORD *)i )\n  {\n    *(_QWORD *)(*(_QWORD *)i + 72LL) = *(_QWORD *)(i + 72);\n    *(_QWORD *)i = 0LL;\n  }\n  *(_QWORD *)(i + 72) = 0LL;\n  sub_181B6(a1, i);\nLABEL_8:\n  if ( !(unsigned int)sub_18F28((_WORD *)(a1 + 42), (__int64 **)(a1 + 48), i) )\n  {\n    if ( (unsigned int)sub_1880E(a1, i, a2, v3) )\n    {\n      log_error(a2, \"gw_backend.c\", 715LL, (__int64)\"ERROR: spawning backend failed.\");\n      v7 = *(_QWORD *)(a1 + 64);\n      *(_QWORD *)i = v7;\n      if ( v7 )\n        *(_QWORD *)(v7 + 72) = i;\n      *(_QWORD *)(a1 + 64) = i;\n    }\n    else\n    {\n      v8 = *(_QWORD *)a1;\n      v9 = *(_QWORD *)a1 == 0LL;\n      *(_QWORD *)i = *(_QWORD *)a1;\n      if ( !v9 )\n        *(_QWORD *)(v8 + 72) = i;\n      *(_QWORD *)a1 = i;\n      ++*(_DWORD *)(a1 + 76);\n    }\n    return v11;\n  }\n  log_error(a2, \"gw_backend.c\", 710LL, (__int64)\"ERROR: spawning backend failed.\");\n  v5 = *(_DWORD *)(i + 48);\n  if ( v5 == *(_DWORD *)(a1 + 160) - 1 )\n    *(_DWORD *)(a1 + 160) = v5;\n  return ((__int64 (__fastcall *)(__int64, const char *))sub_31240)(i, \"gw_backend.c\");\n}\n", 
            "funcStartAddr": "0x19292L", 
            "funcEndAddr": "0x193e2L", 
            "funcName": "sub_19292"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_193E2(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  signed __int64 result; // rax\n  int *v5; // rcx\n  int v6; // eax\n  __int64 v7; // rax\n\n  sub_31330(a1, a2 + 128);\n  v2 = sub_31520(a2, *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 248), *(unsigned int *)(a1 + 256));\n  v3 = v2;\n  *(_QWORD *)(a1 + 8) = v2;\n  result = 1LL;\n  if ( v3 )\n  {\n    v5 = *(int **)(v3 + 24);\n    v6 = *(_DWORD *)(v3 + 16) + 1;\n    *(_DWORD *)(v3 + 16) = v6;\n    *v5 = v6;\n    LOWORD(v6) = *(_WORD *)(v3 + 150);\n    *(_DWORD *)(a1 + 152) = 0;\n    *(_BYTE *)(a1 + 178) = v6;\n    v7 = *(_QWORD *)(v3 + 152);\n    *(_DWORD *)(a1 + 36) = 0;\n    *(_QWORD *)(a1 + 184) = v7;\n    result = 2LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x193e2L", 
            "funcEndAddr": "0x19463L", 
            "funcName": "sub_193E2"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_19463(void *ptr, __int64 a2)\n{\n  __int64 v2; // rax\n  signed int v3; // eax\n  __int64 result; // rax\n  signed int v5; // eax\n\n  if ( *((_DWORD *)ptr + 9) > 1u )\n  {\n    result = sub_31990(ptr);\n    if ( (_DWORD)result )\n      return result;\n  }\n  else\n  {\n    if ( *(_QWORD *)ptr )\n    {\n      if ( *(_DWORD *)(*(_QWORD *)ptr + 44LL) )\n      {\n        v2 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 912LL);\n        if ( !*(_WORD *)(v2 + 166) )\n          sub_31280(*((_QWORD *)ptr + 1), *(_QWORD *)(v2 + 112), *((unsigned int *)ptr + 64), 0LL);\n      }\n    }\n    v3 = *((_DWORD *)ptr + 37);\n    *((_DWORD *)ptr + 37) = v3 + 1;\n    if ( v3 <= 4 )\n      return sub_193E2((__int64)ptr, a2);\n  }\n  if ( !*(_BYTE *)(a2 + 561) )\n  {\n    v5 = *(_DWORD *)(a2 + 4);\n    if ( v5 != 400 && v5 <= 499 )\n      *(_DWORD *)(a2 + 4) = 503;\n  }\n  return sub_190DD(ptr, a2);\n}\n", 
            "funcStartAddr": "0x19463L", 
            "funcEndAddr": "0x1950eL", 
            "funcName": "sub_19463"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1950E(void *ptr, _BYTE *a2)\n{\n  __int64 v2; // rbx\n  unsigned int *v3; // rbp\n  __int64 v4; // rax\n  __int64 v5; // rdx\n  __int64 v6; // rdx\n  _DWORD *v7; // rdi\n  signed int v8; // eax\n  __int64 result; // rax\n\n  v2 = *((_QWORD *)ptr + 33);\n  v3 = (unsigned int *)ptr;\n  v4 = *(_QWORD *)(v2 + 48);\n  if ( !*(_QWORD *)(v4 + 832) )\n  {\n    v5 = log_con_jqueue;\n    log_con_jqueue = *(_QWORD *)(v2 + 48);\n    *(_QWORD *)(v4 + 832) = v5;\n  }\n  v6 = *(_QWORD *)ptr;\n  v7 = *(_DWORD **)(v2 + 128);\n  if ( *a2 == 99 )\n  {\n    sub_1857F(v7, *((_QWORD *)v3 + 1), v6, v3[36], 110, v3[64]);\n    v8 = v3[37];\n    v3[37] = v8 + 1;\n    if ( v8 <= 0 )\n      return sub_193E2((__int64)v3, v2);\n    *(_DWORD *)(v2 + 4) = 503;\n  }\n  else\n  {\n    log_error(\n      v7,\n      \"gw_backend.c\",\n      2716LL,\n      (__int64)\"%s timeout on socket: %s (fd: %d)\",\n      a2,\n      **(_QWORD **)(v6 + 80),\n      v3[34]);\n    if ( *a2 == 119 )\n    {\n      result = sub_19463(v3, v2);\n      if ( *(_DWORD *)(v2 + 4) != 503 )\n        return result;\n      goto LABEL_13;\n    }\n  }\n  result = sub_190DD(v3, v2);\n  if ( *(_DWORD *)(v2 + 4) == 500 && !*(_BYTE *)(v2 + 561) && !*(_QWORD *)(v2 + 32) )\nLABEL_13:\n    *(_DWORD *)(v2 + 4) = 504;\n  return result;\n}\n", 
            "funcStartAddr": "0x1950eL", 
            "funcEndAddr": "0x19619L", 
            "funcName": "sub_1950E"
        }, 
        {
            "decompiledFuncCode": "void *gw_init()\n{\n  return calloc(1uLL, 0x80uLL);\n}\n", 
            "funcStartAddr": "0x19619L", 
            "funcEndAddr": "0x19628L", 
            "funcName": "gw_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall gw_plugin_config_free(void *ptr)\n{\n  unsigned int v1; // er12\n  void **v2; // rbp\n  __int64 v3; // r15\n  unsigned int v4; // er13\n  signed __int64 v5; // rbx\n  __int64 **v6; // r14\n  __int64 *i; // rdx\n  __pid_t v8; // edi\n  __int64 *v9; // ST08_8\n  const char **v10; // rax\n  __int64 *v11; // ST08_8\n  __int64 *j; // rdx\n  __pid_t v13; // edi\n  __int64 *v14; // ST08_8\n  const char **v15; // rax\n  __int64 *v16; // ST08_8\n  void *v17; // rdi\n  void *v18; // rdi\n\n  v1 = 0;\n  v2 = (void **)ptr;\n  v3 = *(_QWORD *)ptr;\n  if ( *(_QWORD *)ptr )\n  {\n    while ( *(_DWORD *)(v3 + 8) > v1 )\n    {\n      v4 = 0;\n      v5 = *(_QWORD *)v3 + 40LL * v1;\n      while ( *(_DWORD *)(v5 + 32) > v4 )\n      {\n        v6 = *(__int64 ***)(*(_QWORD *)(v5 + 24) + 8LL * v4);\n        for ( i = *v6; i; i = (__int64 *)*i )\n        {\n          v8 = *((_DWORD *)i + 10);\n          if ( v8 > 0 )\n          {\n            v9 = i;\n            kill(v8, *((unsigned __int16 *)v6 + 89));\n            i = v9;\n          }\n          if ( *((_DWORD *)i + 11) )\n          {\n            v10 = (const char **)i[11];\n            if ( v10 )\n            {\n              v11 = i;\n              unlink(*v10);\n              i = v11;\n            }\n          }\n        }\n        for ( j = v6[8]; j; j = (__int64 *)*j )\n        {\n          v13 = *((_DWORD *)j + 10);\n          if ( v13 > 0 )\n          {\n            v14 = j;\n            kill(v13, *((unsigned __int16 *)v6 + 89));\n            j = v14;\n          }\n          if ( *((_DWORD *)j + 11) )\n          {\n            v15 = (const char **)j[11];\n            if ( v15 )\n            {\n              v16 = j;\n              unlink(*v15);\n              j = v16;\n            }\n          }\n        }\n        ++v4;\n      }\n      ++v1;\n    }\n    if ( *v2 )\n      sub_182A9(*v2);\n    v17 = v2[1];\n    if ( v17 )\n      sub_182A9(v17);\n    v18 = v2[2];\n    if ( v18 )\n      sub_182A9(v18);\n  }\n  free(v2);\n}\n", 
            "funcStartAddr": "0x19628L", 
            "funcEndAddr": "0x1975dL", 
            "funcName": "gw_plugin_config_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_free(__int64 a1)\n{\n  __int64 result; // rax\n  int v2; // er13\n  bool v3; // al\n  __int64 v4; // r14\n  _BOOL4 v5; // er15\n  _BOOL8 v6; // r12\n  signed __int64 i; // rbx\n  __int64 v8; // [rsp-38h] [rbp-38h]\n\n  result = *(_QWORD *)(a1 + 8);\n  if ( result )\n  {\n    v2 = *(_DWORD *)(a1 + 4);\n    v3 = *(_DWORD *)(result + 12) == 0;\n    v4 = 0LL;\n    v5 = v3;\n    v6 = v3;\n    while ( v2 > v5 + (signed int)v4 )\n    {\n      for ( i = *(_QWORD *)(a1 + 8) + 16LL * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16 * (v6 + v4) + 8);\n            *(_DWORD *)i != -1;\n            i += 16LL )\n      {\n        if ( !*(_DWORD *)i && *(_DWORD *)(i + 4) == 10 )\n          gw_plugin_config_free(*(void **)(i + 8));\n      }\n      ++v4;\n    }\n    result = v8;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1975dL", 
            "funcEndAddr": "0x197dfL", 
            "funcName": "gw_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_exts_clear_check_local(__int64 a1)\n{\n  unsigned int v1; // esi\n  __int64 result; // rax\n  __int64 v3; // rdx\n  signed __int64 v4; // rcx\n  unsigned int v5; // er8\n  __int64 v6; // r9\n\n  v1 = *(_DWORD *)(a1 + 8);\n  for ( result = 0LL; v1 > (unsigned int)result; ++result )\n  {\n    v3 = 0LL;\n    v4 = *(_QWORD *)a1 + 40 * result;\n    v5 = *(_DWORD *)(v4 + 32);\n    while ( v5 > (unsigned int)v3 )\n    {\n      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v3++);\n      *(_WORD *)(v6 + 146) = 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x197dfL", 
            "funcEndAddr": "0x19817L", 
            "funcName": "gw_exts_clear_check_local"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_set_defaults_backend(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6)\n{\n  __int64 v6; // r12\n  const char *v7; // rsi\n  _QWORD *v8; // rbx\n  unsigned int v9; // er14\n  char *v10; // rbp\n  signed __int64 v11; // rcx\n  char *v12; // rdi\n  char *v13; // rsi\n  _QWORD *v14; // rax\n  __int64 v15; // r15\n  __int64 v16; // rax\n  __int64 v17; // rax\n  __int64 v18; // rax\n  __int64 v19; // r14\n  __int64 v20; // rax\n  __int64 v21; // rdx\n  unsigned int v22; // eax\n  _BYTE *v23; // rcx\n  __int64 v24; // rax\n  bool v25; // zf\n  unsigned int v26; // er13\n  __int64 v27; // rdx\n  __int64 v28; // r14\n  _DWORD *v29; // rbp\n  unsigned int i; // ebp\n  const char *v31; // r13\n  _BYTE **v32; // rax\n  __int64 v33; // r13\n  __int64 v34; // rdx\n  _DWORD *v35; // r10\n  __int64 v36; // r9\n  _QWORD *v37; // r15\n  __int64 v38; // r11\n  __int64 j; // r13\n  __int64 *v40; // rcx\n  signed __int64 k; // rax\n  __int64 v42; // r14\n  __int64 v43; // r8\n  __int64 v44; // rbx\n  __int64 v45; // r13\n  __int64 v46; // rbp\n  signed __int64 v47; // r12\n  __int64 v48; // rax\n  __int64 v49; // rdi\n  __int64 v50; // ST88_8\n  __int64 v51; // ST80_8\n  int v52; // eax\n  __int64 v53; // rsi\n  int v54; // eax\n  _DWORD *v55; // rax\n  __int64 v56; // r14\n  const char *v57; // rdx\n  unsigned __int64 v58; // r13\n  unsigned int v59; // ebx\n  int v60; // esi\n  int v61; // eax\n  char v62; // cl\n  void *v63; // rdi\n  __int64 v64; // rsi\n  const char *v65; // ST60_8\n  void *v66; // rax\n  char *v67; // rax\n  char v68; // cl\n  __int64 v69; // rbp\n  char v70; // ST6C_1\n  __int64 v71; // ST60_8\n  const char *v72; // rbp\n  void *v73; // rdi\n  __int64 v74; // rsi\n  int v75; // ebx\n  _QWORD *v76; // r13\n  char *v77; // rax\n  __int64 v78; // rbx\n  __int64 v79; // rax\n  const char **v80; // rcx\n  unsigned int v81; // ebx\n  void **v82; // rdi\n  __int64 v83; // rax\n  _QWORD *v84; // rbx\n  _QWORD *v85; // rax\n  __int64 v86; // rbx\n  _BYTE *v87; // rax\n  __int64 v88; // rbx\n  _BYTE *v89; // rax\n  unsigned __int16 v90; // ax\n  _DWORD *v91; // rdi\n  char **v92; // rdx\n  char *v93; // rax\n  __int64 l; // rbx\n  _QWORD *v95; // r14\n  char **v96; // rax\n  char *v97; // r9\n  __int64 v98; // rcx\n  __int64 v99; // rdx\n  __int64 v100; // rdx\n  __int64 v101; // rax\n  __int64 v102; // rax\n  __int64 v103; // rax\n  __int64 v104; // rcx\n  __int64 v105; // rbx\n  __int64 v106; // rax\n  int v107; // er13\n  _QWORD *v109; // [rsp+8h] [rbp-310h]\n  __int64 v110; // [rsp+10h] [rbp-308h]\n  __int64 v111; // [rsp+18h] [rbp-300h]\n  __int64 v112; // [rsp+20h] [rbp-2F8h]\n  unsigned int v113; // [rsp+2Ch] [rbp-2ECh]\n  unsigned int v114; // [rsp+30h] [rbp-2E8h]\n  signed __int16 v115; // [rsp+36h] [rbp-2E2h]\n  __int64 v116; // [rsp+38h] [rbp-2E0h]\n  signed int v117; // [rsp+40h] [rbp-2D8h]\n  int v118; // [rsp+48h] [rbp-2D0h]\n  unsigned int v119; // [rsp+4Ch] [rbp-2CCh]\n  unsigned int v120; // [rsp+50h] [rbp-2C8h]\n  int v121; // [rsp+54h] [rbp-2C4h]\n  _DWORD *ptr; // [rsp+58h] [rbp-2C0h]\n  __int64 v123; // [rsp+70h] [rbp-2A8h]\n  __int64 v124; // [rsp+78h] [rbp-2A0h]\n  struct stat64 stat_buf; // [rsp+80h] [rbp-298h]\n  char v126; // [rsp+110h] [rbp-208h]\n  unsigned __int64 v127; // [rsp+2D8h] [rbp-40h]\n\n  v6 = a1;\n  v111 = a2;\n  v7 = \"server.graceful-restart-bg\";\n  v116 = a3;\n  v121 = a5;\n  v112 = a6;\n  v110 = a4;\n  v127 = __readfsqword(0x28u);\n  v118 = config_feature_bool(a1, \"server.graceful-restart-bg\", 0LL);\n  *(_DWORD *)(v111 + 24) = *(_DWORD *)(a1 + 400);\n  *(_QWORD *)v110 = sub_17F20();\n  *(_QWORD *)(v110 + 8) = sub_17F20();\n  v113 = 0;\n  *(_QWORD *)(v110 + 16) = sub_17F20();\n  while ( 1 )\n  {\n    if ( *(_DWORD *)(v116 + 16) <= v113 )\n      return 1;\n    v114 = 0;\n    v109 = *(_QWORD **)(*(_QWORD *)v116 + 8LL * v113);\nLABEL_4:\n    if ( *((_DWORD *)v109 + 12) > v114 )\n      break;\n    ++v113;\n  }\n  v8 = *(_QWORD **)(v109[4] + 8LL * v114);\n  if ( *((_DWORD *)v8 + 6) != 1 || !(unsigned int)array_is_kvany(v8 + 4, v7) )\n  {\n    *v8;\n    v9 = 0;\n    log_error(\n      *(_DWORD **)(v6 + 112),\n      \"gw_backend.c\",\n      1378LL,\n      (__int64)\"unexpected value for gw.server near [%s](string); expected ( \\\"ext\\\" => ( \\\"backend-label\\\" => ( \\\"key\\\" \"\n               \"=> \\\"value\\\" )))\");\n    return v9;\n  }\n  v10 = &v126;\n  v11 = 112LL;\n  v12 = &v126;\n  while ( v11 )\n  {\n    *(_DWORD *)v12 = 0;\n    v12 += 4;\n    --v11;\n  }\n  if ( !(unsigned int)config_plugin_values_init_block(v6, v8 + 4, &off_257620, v112, &v126) )\n    return 0;\n  v13 = (char *)&qword_D0;\n  v14 = calloc(1uLL, 0xD0uLL);\n  v15 = (__int64)v14;\n  if ( !v14 )\n    ck_assert_failed(\"gw_backend.c\", 196LL, \"f\");\n  v14[7] = v8;\n  *((_DWORD *)v14 + 18) = 262148;\n  *((_WORD *)v14 + 45) = 8;\n  *((_DWORD *)v14 + 20) = 3932161;\n  *((_WORD *)v14 + 42) = 1;\n  v14[18] = &loc_10000;\n  *(_QWORD *)((char *)v14 + 178) = 67108879LL;\n  *((_WORD *)v14 + 93) = 0;\n  v115 = 1;\n  while ( *(_DWORD *)v10 != -1 )\n  {\n    switch ( *(_DWORD *)v10 )\n    {\n      case 0:\n        v16 = *((_QWORD *)v10 + 1);\n        if ( *(_DWORD *)(v16 + 8) > 1u )\n          *(_QWORD *)(v15 + 48) = v16;\n        goto LABEL_63;\n      case 1:\n        *(_WORD *)(v15 + 40) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 2:\n        v17 = *((_QWORD *)v10 + 1);\n        if ( *(_DWORD *)(v17 + 8) > 1u )\n          *(_QWORD *)(v15 + 104) = v17;\n        goto LABEL_63;\n      case 3:\n        *(_DWORD *)(v15 + 180) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 4:\n        v18 = *((_QWORD *)v10 + 1);\n        if ( *(_DWORD *)(v18 + 8) > 1u )\n          *(_QWORD *)(v15 + 112) = v18;\n        goto LABEL_63;\n      case 5:\n        *(_WORD *)(v15 + 178) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 6:\n        *(_WORD *)(v15 + 146) = *((_DWORD *)v10 + 2) != 0;\n        goto LABEL_63;\n      case 7:\n        v19 = *((_QWORD *)v10 + 1);\n        if ( *(_DWORD *)(v19 + 8) > 1u )\n        {\n          v13 = \"responder\";\n          if ( (unsigned int)buffer_eq_slen(*((_QWORD *)v10 + 1), \"responder\", 9LL) )\n          {\n            v115 = 1;\n          }\n          else\n          {\n            v13 = \"authorizer\";\n            if ( (unsigned int)buffer_eq_slen(v19, \"authorizer\", 10LL) )\n            {\n              v115 = 2;\n            }\n            else\n            {\n              v13 = \"gw_backend.c\";\n              log_error(\n                *(_DWORD **)(v6 + 112),\n                \"gw_backend.c\",\n                1446LL,\n                (__int64)\"WARNING: unknown gw mode: %s (ignored, mode set to responder)\",\n                *(_QWORD *)v19);\n            }\n          }\n        }\n        goto LABEL_63;\n      case 8:\n        v20 = *((_QWORD *)v10 + 1);\n        if ( *(_DWORD *)(v20 + 8) > 1u )\n          *(_QWORD *)(v15 + 136) = v20;\n        goto LABEL_63;\n      case 9:\n        *(_WORD *)(v15 + 72) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0xA:\n        *(_WORD *)(v15 + 74) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0xB:\n        *(_WORD *)(v15 + 80) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0xC:\n        *(_WORD *)(v15 + 82) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0xD:\n        *(_WORD *)(v15 + 84) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0xE:\n        *(_QWORD *)(v15 + 120) = *((_QWORD *)v10 + 1);\n        goto LABEL_63;\n      case 0xF:\n        *(_QWORD *)(v15 + 128) = *((_QWORD *)v10 + 1);\n        goto LABEL_63;\n      case 0x10:\n        *(_WORD *)(v15 + 144) = *((_DWORD *)v10 + 2) != 0;\n        goto LABEL_63;\n      case 0x11:\n        v21 = *((_QWORD *)v10 + 1);\n        v22 = *(_DWORD *)(v21 + 8);\n        *(_QWORD *)(v15 + 168) = v21;\n        if ( v22 > 1 )\n        {\n          v23 = (_BYTE *)(*(_QWORD *)v21 + v22 - 2);\n          if ( *v23 == 47 )\n          {\n            *v23 = 0;\n            *(_DWORD *)(v21 + 8) = v22 - 1;\n          }\n        }\n        goto LABEL_63;\n      case 0x12:\n        *(_WORD *)(v15 + 148) = *((_DWORD *)v10 + 2) != 0;\n        goto LABEL_63;\n      case 0x13:\n      case 0x14:\n        *(_WORD *)(v15 + 150) = *((_DWORD *)v10 + 2) != 0;\n        goto LABEL_63;\n      case 0x15:\n        v24 = *((_QWORD *)v10 + 1);\n        v25 = *(_DWORD *)(v24 + 16) == 0;\n        *(_QWORD *)(v15 + 152) = v24;\n        if ( v25 )\n          goto LABEL_63;\n        v26 = 0;\n        break;\n      case 0x16:\n        *(_WORD *)(v15 + 176) = *((_DWORD *)v10 + 2) != 0;\n        goto LABEL_63;\n      case 0x17:\n        *(_WORD *)(v15 + 90) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0x18:\n        *(_WORD *)(v15 + 88) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      case 0x19:\n        *(_WORD *)(v15 + 86) = *((_DWORD *)v10 + 2);\n        goto LABEL_63;\n      default:\n        goto LABEL_63;\n    }\n    while ( 1 )\n    {\n      v27 = *((_QWORD *)v10 + 1);\n      if ( *(_DWORD *)(v27 + 16) <= v26 )\n        break;\n      v28 = *(_QWORD *)(*(_QWORD *)v27 + 8LL * v26);\n      if ( *(_DWORD *)(v28 + 24) )\n      {\n        v29 = (_DWORD *)v15;\n        log_error(\n          *(_DWORD **)(v6 + 112),\n          \"gw_backend.c\",\n          1502LL,\n          (__int64)\"unexpected type for x-sendfile-docroot; expected: \\\"x-sendfile-docroot\\\" => ( \\\"/allowed/path\\\", ... )\");\n        goto LABEL_191;\n      }\n      if ( **(_BYTE **)(v28 + 32) != 47 )\n      {\n        v29 = (_DWORD *)v15;\n        log_error(\n          *(_DWORD **)(v6 + 112),\n          \"gw_backend.c\",\n          1509LL,\n          (__int64)\"x-sendfile-docroot paths must begin with '/'; invalid: \\\"%s\\\"\");\n        goto LABEL_191;\n      }\n      buffer_path_simplify(v28 + 32, v13);\n      if ( *(_DWORD *)(v28 + 40) != (*(_DWORD *)(v28 + 40) != 0)\n        && *(_BYTE *)(*(_QWORD *)(v28 + 32) + *(_DWORD *)(v28 + 40) - (unsigned int)(*(_DWORD *)(v28 + 40) != 0) - 1) != 47 )\n      {\n        v13 = \"/\";\n        buffer_append_string_len(v28 + 32, \"/\", 1LL);\n      }\n      ++v26;\n    }\nLABEL_63:\n    v10 += 16;\n  }\n  for ( i = 0; *((_DWORD *)v8 + 12) > i; ++i )\n  {\n    v31 = **(const char ***)(v8[4] + 8LL * i);\n    if ( strchr(v31, 95) )\n      log_error(\n        *(_DWORD **)(v6 + 112),\n        \"gw_backend.c\",\n        1538LL,\n        (__int64)\"incorrect directive contains underscore ('_') instead of dash ('-'): %s\",\n        v31);\n  }\n  v32 = *(_BYTE ***)(v15 + 48);\n  if ( v32 || *(_WORD *)(v15 + 40) )\n  {\n    if ( *(_QWORD *)(v15 + 104) )\n    {\n      v29 = (_DWORD *)v15;\n      log_error(\n        *(_DWORD **)(v6 + 112),\n        \"gw_backend.c\",\n        1545LL,\n        (__int64)\"either host/port or socket have to be set in: %s = (%s => (%s ( ...\",\n        v112,\n        *v109,\n        *v8);\n      goto LABEL_191;\n    }\n    if ( v32 && **v32 == 47 )\n      *(_QWORD *)(v15 + 104) = v32;\n  }\n  v33 = *(_QWORD *)(v15 + 104);\n  if ( !v33 )\n  {\n    if ( v32 || *(_QWORD *)(v15 + 112) )\n    {\n      if ( !*(_WORD *)(v15 + 40) )\n        *(_WORD *)(v15 + 40) = 80;\n      if ( !v32 )\n        *(_QWORD *)(v15 + 48) = &off_257600;\n      *(_WORD *)(v15 + 42) = (unsigned __int64)strchr(**(const char ***)(v15 + 48), 58) < 1 ? 2 : 10;\n      goto LABEL_116;\n    }\n    v29 = (_DWORD *)v15;\n    log_error(\n      *(_DWORD **)(v6 + 112),\n      \"gw_backend.c\",\n      1589LL,\n      (__int64)\"host or bin-path have to be set in: %s = (%s => (%s ( ...\",\n      v112,\n      *v109,\n      *v8);\n    goto LABEL_191;\n  }\n  if ( (unsigned int)(*(_DWORD *)(v33 + 8) == 0) + *(_DWORD *)(v33 + 8) > 0x6A )\n  {\n    v29 = (_DWORD *)v15;\n    log_error(\n      *(_DWORD **)(v6 + 112),\n      \"gw_backend.c\",\n      1562LL,\n      (__int64)\"unixsocket is too long in: %s = (%s => (%s ( ...\",\n      v112,\n      *v109,\n      *v8);\n    goto LABEL_191;\n  }\n  if ( !*(_QWORD *)(v15 + 112) )\n    goto LABEL_107;\n  v117 = *(_DWORD *)(v111 + 4);\n  v34 = *(_QWORD *)(v111 + 8);\n  if ( !v34 )\n    goto LABEL_107;\n  v35 = (_DWORD *)v15;\n  v36 = *(_QWORD *)(v15 + 112);\n  v37 = *(_QWORD **)(v15 + 104);\n  v38 = v6;\n  for ( j = *(_DWORD *)(v34 + 12) == 0; ; ++j )\n  {\n    if ( v117 <= (signed int)j )\n    {\n      v15 = (__int64)v35;\n      v6 = v38;\n      goto LABEL_107;\n    }\n    v40 = 0LL;\n    for ( k = v34 + 16LL * *(unsigned int *)(v34 + 16 * j + 8); *(_DWORD *)k != -1; k += 16LL )\n    {\n      if ( !*(_DWORD *)k && *(_DWORD *)(k + 4) == 10 )\n        v40 = *(__int64 **)(k + 8);\n    }\n    if ( v40 )\n    {\n      v42 = *v40;\n      if ( *v40 )\n        break;\n    }\nLABEL_101:\n    ;\n  }\n  v43 = j;\n  v44 = 0LL;\n  v45 = v36;\n  v120 = *(_DWORD *)(v42 + 8);\nLABEL_92:\n  if ( v120 <= (unsigned int)v44 )\n  {\n    v36 = v45;\n    j = v43;\n    goto LABEL_101;\n  }\n  v46 = 0LL;\n  v47 = *(_QWORD *)v42 + 40 * v44;\n  v119 = *(_DWORD *)(v47 + 32);\n  while ( 1 )\n  {\n    if ( v119 <= (unsigned int)v46 )\n    {\n      ++v44;\n      goto LABEL_92;\n    }\n    v48 = *(_QWORD *)(v47 + 24);\n    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 8 * v46) + 104LL);\n    v124 = *(_QWORD *)(v48 + 8 * v46);\n    if ( v49 )\n    {\n      v123 = v38;\n      v50 = v43;\n      v51 = v34;\n      ptr = v35;\n      v52 = buffer_is_equal(v49, v37);\n      v35 = ptr;\n      v34 = v51;\n      v43 = v50;\n      v38 = v123;\n      if ( v52 )\n      {\n        v53 = *(_QWORD *)(v124 + 112);\n        if ( v53 )\n          break;\n      }\n    }\n    ++v46;\n  }\n  v6 = v123;\n  if ( !(unsigned int)buffer_is_equal(v45, v53) )\n  {\n    v29 = ptr;\n    log_error(*(_DWORD **)(v123 + 112), \"gw_backend.c\", 1573LL, (__int64)\"duplicate unixsocket path: %s\", *v37);\n    goto LABEL_191;\n  }\n  v54 = ptr[46];\n  if ( v54 )\n    ptr[46] = v54 - 1;\n  else\n    sub_18255(ptr);\n  ++*(_DWORD *)(v124 + 184);\n  v15 = v124;\nLABEL_107:\n  *(_WORD *)(v15 + 42) = 1;\nLABEL_116:\n  if ( !*(_DWORD *)(v15 + 184) )\n  {\n    v55 = (_DWORD *)sub_18432((_QWORD **)(v15 + 56), 0LL, \".load\", 5uLL);\n    *(_QWORD *)(v15 + 24) = v55;\n    *v55 = 0;\n    *(_QWORD *)(v15 + 32) = array_get_int_ptr(&plugin_stats, \"gw.active-requests\", 18LL);\n  }\n  if ( *(_DWORD *)(v15 + 184) )\n  {\nLABEL_180:\n    v106 = *(_QWORD *)(v15 + 48);\n    if ( !v106 )\n      v106 = *(_QWORD *)(v15 + 104);\n    *(_DWORD *)(v15 + 12) = sub_311C0(\n                              *(_QWORD *)v106,\n                              *(_DWORD *)(v106 + 8) - (unsigned int)(*(_DWORD *)(v106 + 8) != 0),\n                              5381LL);\n    sub_17F52(*(char ***)v110, v109, v15);\n    if ( v115 == 2 )\n    {\n      ++*(_DWORD *)(v15 + 184);\n      v7 = (const char *)v109;\n      sub_17F52(*(char ***)(v110 + 8), v109, v15);\n    }\n    else\n    {\n      ++*(_DWORD *)(v15 + 184);\n      v7 = (const char *)v109;\n      sub_17F52(*(char ***)(v110 + 16), v109, v15);\n    }\n    ++v114;\n    goto LABEL_4;\n  }\n  v56 = *(_QWORD *)(v15 + 112);\n  if ( v56 )\n  {\n    v57 = *(const char **)v56;\n    v58 = 0LL;\n    v59 = *(_DWORD *)(v56 + 8) - (*(_DWORD *)(v56 + 8) != 0);\n    while ( 1 )\n    {\n      v60 = *(_DWORD *)(v15 + 200);\n      v61 = *(_DWORD *)(v15 + 204);\n      if ( v59 <= v58 )\n        break;\n      v62 = *(_BYTE *)(*(_QWORD *)v56 + v58);\n      if ( v62 == 9 || v62 == 32 )\n      {\n        if ( v60 == v61 )\n        {\n          v63 = *(void **)(v15 + 192);\n          v64 = (unsigned int)(v60 + 16);\n          v65 = v57;\n          *(_DWORD *)(v15 + 200) = v64;\n          v66 = realloc(v63, 8 * v64);\n          *(_QWORD *)(v15 + 192) = v66;\n          v57 = v65;\n          if ( !v66 )\n            ck_assert_failed(\"gw_backend.c\", 798LL, \"env->ptr\");\n        }\n        v67 = (char *)(v58 + *(_QWORD *)v56);\n        v68 = *v67;\n        *v67 = 0;\n        v69 = *(unsigned int *)(v15 + 204);\n        v70 = v68;\n        v71 = *(_QWORD *)(v15 + 192);\n        *(_DWORD *)(v15 + 204) = v69 + 1;\n        *(_QWORD *)(v71 + 8 * v69) = strdup(v57);\n        *(_BYTE *)(*(_QWORD *)v56 + v58) = v70;\n        v57 = (const char *)(*(_QWORD *)v56 + v58 + 1);\n      }\n      ++v58;\n    }\n    v72 = v57;\n    if ( v60 == v61 )\n    {\n      v73 = *(void **)(v15 + 192);\n      v74 = (unsigned int)(v60 + 16);\n      *(_DWORD *)(v15 + 200) = v74;\n      *(_QWORD *)(v15 + 192) = realloc(v73, 8 * v74);\n    }\n    v75 = *(_DWORD *)(v15 + 204);\n    v76 = *(_QWORD **)(v15 + 192);\n    *(_DWORD *)(v15 + 204) = v75 + 1;\n    v77 = strdup(v72);\n    v25 = v75 + 1 == *(_DWORD *)(v15 + 200);\n    v76[v75] = v77;\n    if ( v25 )\n    {\n      v78 = (unsigned int)(v75 + 17);\n      *(_DWORD *)(v15 + 200) = v78;\n      *(_QWORD *)(v15 + 192) = realloc(v76, 8 * v78);\n    }\n    v79 = *(unsigned int *)(v15 + 204);\n    v80 = *(const char ***)(v15 + 192);\n    *(_DWORD *)(v15 + 204) = v79 + 1;\n    v80[v79] = 0LL;\n    if ( __xstat64(1, *v80, &stat_buf) || (stat_buf.st_mode & 0xF000) != 0x8000 || !(stat_buf.st_mode & 0x49) )\n      log_error(\n        *(_DWORD **)(v6 + 112),\n        \"gw_backend.c\",\n        1619LL,\n        (__int64)\"invalid \\\"bin-path\\\" => \\\"%s\\\" (check that file exists, is regular file, and is executable by lighttpd)\",\n        **(_QWORD **)(v15 + 112));\n    if ( v121 )\n    {\n      v81 = 0;\n      while ( 1 )\n      {\n        v82 = *(void ***)(v15 + 192);\n        if ( *(_DWORD *)(v15 + 204) <= v81 )\n          break;\n        v83 = v81++;\n        free(v82[v83]);\n      }\n      free(v82);\n      v84 = calloc(4uLL, 8uLL);\n      *(_QWORD *)(v15 + 192) = v84;\n      if ( !v84 )\n        ck_assert_failed(\"gw_backend.c\", 1634LL, \"host->args.ptr\");\n      *(_QWORD *)(v15 + 200) = 12884901892LL;\n      v85 = malloc(8uLL);\n      *v84 = v85;\n      if ( !v85 )\n        ck_assert_failed(\"gw_backend.c\", 1638LL, \"host->args.ptr[0]\");\n      *v85 = 29400045130965551LL;\n      v86 = *(_QWORD *)(v15 + 192);\n      v87 = malloc(3uLL);\n      *(_QWORD *)(v86 + 8) = v87;\n      if ( !v87 )\n        ck_assert_failed(\"gw_backend.c\", 1641LL, \"host->args.ptr[1]\");\n      *(_WORD *)v87 = 25389;\n      v87[2] = 0;\n      v88 = *(_QWORD *)(v15 + 192);\n      v89 = malloc(\n              *(_DWORD *)(*(_QWORD *)(v15 + 112) + 8LL)\n            - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v15 + 112) + 8LL) != 0)\n            + 6LL);\n      *(_QWORD *)(v88 + 16) = v89;\n      if ( !v89 )\n        ck_assert_failed(\"gw_backend.c\", 1645LL, \"host->args.ptr[2]\");\n      *(_DWORD *)v89 = 1667594341;\n      v89[4] = 32;\n      qmemcpy(\n        (void *)(*(_QWORD *)(*(_QWORD *)(v15 + 192) + 16LL) + 5LL),\n        **(const void ***)(v15 + 112),\n        (unsigned int)(*(_DWORD *)(*(_QWORD *)(v15 + 112) + 8LL) == 0) + *(_DWORD *)(*(_QWORD *)(v15 + 112) + 8LL));\n      *(_QWORD *)(*(_QWORD *)(v15 + 192) + 24LL) = 0LL;\n    }\n    v90 = *(_WORD *)(v15 + 74);\n    if ( *(_WORD *)(v15 + 72) > v90 )\n      *(_WORD *)(v15 + 72) = v90;\n    if ( v90 != *(_WORD *)(v15 + 72) && *(_WORD *)(v6 + 166) )\n    {\n      v91 = *(_DWORD **)(v6 + 112);\n      *(_WORD *)(v15 + 72) = v90;\n      log_error(\n        v91,\n        \"gw_backend.c\",\n        1657LL,\n        (__int64)\"adaptive backend spawning disabled (server.max_worker is non-zero)\");\n    }\n    if ( *(_DWORD *)(v110 + 40) )\n    {\n      v92 = *(char ***)(v15 + 104);\n      v93 = \"\";\n      if ( v92 )\n        v93 = *v92;\n      log_error(\n        *(_DWORD **)(v6 + 112),\n        \"gw_backend.c\",\n        1665LL,\n        (__int64)\"--- gw spawning local\\n\\tproc: %s\\n\\tport: %hu\\n\\tsocket %s\\n\\tmin-procs: %d\\n\\tmax-procs: %d\",\n        **(_QWORD **)(v15 + 112),\n        *(unsigned __int16 *)(v15 + 40),\n        v93,\n        *(unsigned __int16 *)(v15 + 72),\n        *(unsigned __int16 *)(v15 + 74));\n    }\n    for ( l = 0LL; *(unsigned __int16 *)(v15 + 72) > (unsigned int)l; l = (unsigned int)(l + 1) )\n    {\n      v95 = (_QWORD *)sub_19176(v15);\n      if ( *(_DWORD *)(v110 + 40) )\n      {\n        v96 = *(char ***)(v15 + 104);\n        v97 = \"\";\n        if ( v96 )\n          v97 = *v96;\n        log_error(\n          *(_DWORD **)(v6 + 112),\n          \"gw_backend.c\",\n          1683LL,\n          (__int64)\"--- gw spawning\\n\\tport: %hu\\n\\tsocket %s\\n\\tcurrent: %u / %u\",\n          *(unsigned __int16 *)(v15 + 40),\n          v97,\n          l,\n          *(unsigned __int16 *)(v15 + 74));\n      }\n      v98 = *(_QWORD *)(v6 + 112);\n      if ( (unsigned int)sub_18F28((_WORD *)(v15 + 42), (__int64 **)(v15 + 48), (__int64)v95) )\n      {\n        v29 = (_DWORD *)v15;\n        sub_31240(v95, v15 + 48, v99);\n        goto LABEL_191;\n      }\n      if ( !*(_BYTE *)(v6 + 193)\n        && (unsigned int)sub_1880E(v15, (__int64)v95, *(_DWORD **)(v6 + 112), *(_DWORD *)(v110 + 40)) )\n      {\n        v29 = (_DWORD *)v15;\n        log_error(*(_DWORD **)(v6 + 112), \"gw_backend.c\", 1700LL, (__int64)\"[ERROR]: spawning gw failed.\");\n        sub_31240(v95, \"gw_backend.c\", v100);\n        goto LABEL_191;\n      }\n      v101 = *(_QWORD *)v15;\n      v25 = *(_QWORD *)v15 == 0LL;\n      *v95 = *(_QWORD *)v15;\n      if ( !v25 )\n        *(_QWORD *)(v101 + 72) = v95;\n      *(_QWORD *)v15 = v95;\n      ++*(_DWORD *)(v15 + 76);\n    }\n    if ( v118 )\n    {\n      log_error(\n        *(_DWORD **)(v6 + 112),\n        \"gw_backend.c\",\n        1715LL,\n        (__int64)\"server.graceful-restart-bg disabled (incompatible with %s.server \\\"bin-path\\\")\",\n        *(_QWORD *)(*(_QWORD *)(v111 + 16) + 176LL));\n      v102 = array_get_data_unset(*(_QWORD *)(v6 + 248), \"server.graceful-restart-bg\", 26LL);\n      if ( *(_DWORD *)(v102 + 24) )\n        *(_DWORD *)(v102 + 28) = 0;\n      else\n        buffer_copy_string_len(v102 + 32, \"false\", 5LL);\n    }\n    v118 = 0;\n    goto LABEL_180;\n  }\n  v103 = sub_19176(v15);\n  ++*(_DWORD *)(v15 + 76);\n  v104 = *(_QWORD *)(v6 + 112);\n  *(_QWORD *)v15 = v103;\n  *(_DWORD *)(v15 + 72) = 65537;\n  v105 = v103;\n  if ( !(unsigned int)sub_18F28((_WORD *)(v15 + 42), (__int64 **)(v15 + 48), v103) )\n  {\n    sub_1823E((_DWORD *)(v15 + 8), (_DWORD *)(v105 + 8), 0);\n    goto LABEL_180;\n  }\n  v29 = (_DWORD *)v15;\nLABEL_191:\n  v9 = v29[46];\n  if ( v9 )\n  {\n    v107 = v9 - 1;\n    v9 = 0;\n    v29[46] = v107;\n  }\n  else\n  {\n    sub_18255(v29);\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x19817L", 
            "funcEndAddr": "0x1a77eL", 
            "funcName": "gw_set_defaults_backend"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_get_defaults_balance(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // ebx\n\n  v2 = 0;\n  if ( a2 && *(_DWORD *)(a2 + 8) > 1u )\n  {\n    v2 = buffer_eq_slen(a2, \"fair\", 4LL);\n    if ( v2 )\n    {\n      v2 = 0;\n    }\n    else if ( !(unsigned int)buffer_eq_slen(a2, \"least-connection\", 16LL) )\n    {\n      v2 = 1;\n      if ( !(unsigned int)buffer_eq_slen(a2, \"round-robin\", 11LL) )\n      {\n        v2 = 2;\n        if ( !(unsigned int)buffer_eq_slen(a2, \"hash\", 4LL) )\n        {\n          v2 = buffer_eq_slen(a2, \"sticky\", 6LL);\n          if ( v2 )\n            v2 = 3;\n          else\n            log_error(\n              *(_DWORD **)(a1 + 112),\n              \"gw_backend.c\",\n              1789LL,\n              (__int64)\"xxxxx.balance has to be one of: least-connection, round-robin, hash, sticky, but not: %s\",\n              *(_QWORD *)a2);\n        }\n      }\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x1a77eL", 
            "funcEndAddr": "0x1a860L", 
            "funcName": "gw_get_defaults_balance"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall stat_cache_init(__int64 a1, _DWORD *a2)\n{\n  unsigned int v2; // er13\n  _DWORD *v3; // rax\n  _DWORD *v4; // rbx\n  int v5; // eax\n  __int64 v6; // rax\n  __int64 v7; // rdi\n\n  v2 = 1;\n  if ( dword_2585D0 == 2 )\n  {\n    v3 = calloc(1uLL, 0x30uLL);\n    v4 = v3;\n    if ( !v3 )\n      ck_assert_failed(\"stat_cache.c\", 574LL, \"scf\");\n    v3[10] = -1;\n    *((_QWORD *)v3 + 3) = a1;\n    *((_QWORD *)v3 + 2) = a2;\n    v5 = inotify_init1(526336);\n    v4[10] = v5;\n    if ( v5 >= 0 )\n    {\n      v6 = fdevent_register(*((_QWORD *)v4 + 3), (unsigned int)v5, sub_34DA0, v4);\n      v7 = *((_QWORD *)v4 + 3);\n      *((_QWORD *)v4 + 4) = v6;\n      fdevent_fdnode_event_set(v7, v6, 8193LL);\n      qword_2585E0 = v4;\n    }\n    else\n    {\n      v2 = 0;\n      log_perror(a2, \"stat_cache.c\", 582LL, (__int64)\"inotify_init1()\");\n      free(v4);\n      qword_2585E0 = 0LL;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x1a860L", 
            "funcEndAddr": "0x1a943L", 
            "funcName": "stat_cache_init"
        }, 
        {
            "decompiledFuncCode": "__int64 stat_cache_free()\n{\n  __int64 i; // rbx\n  _DWORD *v1; // rdi\n  bool v2; // zf\n  _QWORD *v3; // rbx\n  __int64 v4; // rdi\n  void *v5; // rdi\n  __int64 v6; // rbp\n  int v7; // edi\n  __int64 v9; // [rsp+0h] [rbp-18h]\n\n  for ( i = qword_2585D8; i; i = splaytree_delete(i, *(unsigned int *)(i + 16)) )\n  {\n    v1 = *(_DWORD **)(i + 24);\n    if ( v1 )\n    {\n      v2 = v1[7]-- == 1;\n      if ( v2 )\n        sub_33C70(v1);\n    }\n  }\n  v3 = qword_2585E0;\n  qword_2585D8 = 0LL;\n  if ( qword_2585E0 )\n  {\n    while ( 1 )\n    {\n      v4 = v3[1];\n      if ( !v4 )\n        break;\n      v3[1] = splaytree_delete(v4, *(unsigned int *)(v4 + 16));\n    }\n    while ( 1 )\n    {\n      v6 = *v3;\n      if ( !*v3 )\n        break;\n      v5 = *(void **)(v6 + 24);\n      if ( v5 )\n        sub_33B40(v5);\n      *v3 = splaytree_delete(*v3, *(unsigned int *)(v6 + 16));\n    }\n    v7 = *((_DWORD *)v3 + 10);\n    if ( v7 != -1 )\n      close(v7);\n    free(v3);\n  }\n  qword_2585E0 = 0LL;\n  dword_2585D0 = 0;\n  return v9;\n}\n", 
            "funcStartAddr": "0x1a943L", 
            "funcEndAddr": "0x1a9f8L", 
            "funcName": "stat_cache_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall stat_cache_choose_engine(__int64 a1, _DWORD *a2)\n{\n  unsigned int v2; // ebp\n\n  if ( *(_DWORD *)(a1 + 8) <= 1u || (v2 = buffer_eq_slen(a1, \"simple\", 6LL)) != 0 )\n  {\n    dword_2585D0 = 0;\n    v2 = 0;\n  }\n  else if ( (unsigned int)buffer_eq_slen(a1, \"inotify\", 7LL) || (unsigned int)buffer_eq_slen(a1, \"fam\", 3LL) )\n  {\n    dword_2585D0 = 2;\n  }\n  else if ( (unsigned int)buffer_eq_slen(a1, \"disable\", 7LL) || (unsigned int)buffer_eq_slen(a1, \"none\", 4LL) )\n  {\n    dword_2585D0 = 1;\n    v2 = 0;\n  }\n  else\n  {\n    v2 = -1;\n    log_error(\n      a2,\n      \"stat_cache.c\",\n      927LL,\n      (__int64)\"server.stat-cache-engine can be one of \\\"disable\\\", \\\"simple\\\", \\\"inotify\\\", \\\"fam\\\", but not: %s\",\n      *(_QWORD *)a1);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x1a9f9L", 
            "funcEndAddr": "0x1aad5L", 
            "funcName": "stat_cache_choose_engine"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall stat_cache_path_contains_symlink(__int64 a1, _DWORD *a2)\n{\n  unsigned int v2; // eax\n  unsigned __int64 v3; // rbx\n  signed __int64 result; // rax\n  char *v5; // rax\n  __int64 v6; // [rsp+0h] [rbp-10B8h]\n  int v7; // [rsp+18h] [rbp-10A0h]\n  char filename[4104]; // [rsp+90h] [rbp-1028h]\n  unsigned __int64 v9; // [rsp+1098h] [rbp-20h]\n\n  v9 = __readfsqword(0x28u);\n  v2 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n  if ( *(_DWORD *)(a1 + 8) == (*(_DWORD *)(a1 + 8) != 0) )\n    ck_assert_failed(\"stat_cache.c\", 1425LL, \"0 != len\");\n  if ( **(_BYTE **)a1 != 47 )\n    ck_assert_failed(\"stat_cache.c\", 1426LL, \"name->ptr[0] == '/'\");\n  v3 = v2;\n  if ( v2 == 1LL )\n    return 0LL;\n  result = 0xFFFFFFFFLL;\n  if ( v3 <= 0xFFF )\n  {\n    __memcpy_chk(filename, *(_BYTE **)a1, v3, 4096LL);\n    v5 = &filename[v3];\n    while ( 1 )\n    {\n      *v5 = 0;\n      if ( __lxstat64(1, filename, (struct stat64 *)&v6) )\n        break;\n      if ( (v7 & 0xF000) == 40960 )\n        return 1LL;\n      v5 = strrchr(filename, 47);\n      if ( v5 <= filename )\n        return 0LL;\n    }\n    log_perror(a2, \"stat_cache.c\", 1443LL, (__int64)\"lstat failed for: %s\", filename);\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1aad5L", 
            "funcEndAddr": "0x1ac0bL", 
            "funcName": "stat_cache_path_contains_symlink"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1AC0B(_QWORD *a1, int a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n  __int64 i; // rbx\n\n  v2 = *(unsigned __int16 *)(*a1 + 2LL * a2);\n  if ( (_WORD)v2 )\n  {\n    for ( i = v2 + *a1; *(_QWORD *)i; i += 16LL )\n    {\n      result = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))i)(a1, *(_QWORD *)(i + 8));\n      if ( (_DWORD)result )\n        return result;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1ac0bL", 
            "funcEndAddr": "0x1ac4bL", 
            "funcName": "sub_1AC0B"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1AC4B(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    v2 = (void *)*((_QWORD *)ptr + 24);\n    if ( v2 )\n      dlclose(v2);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x1ac4bL", 
            "funcEndAddr": "0x1ac6fL", 
            "funcName": "sub_1AC4B"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1AC6F(_QWORD *a1, unsigned int a2)\n{\n  char *v2; // rsi\n  char *i; // rax\n  char *v4; // rsi\n  char *v5; // rdx\n  __int64 v6; // rdi\n  __int64 v7; // rcx\n\n  if ( a2 )\n  {\n    v2 = (char *)(*a1 + a2);\n    for ( i = v2; *(_QWORD *)i; i += 16 )\n      ;\n    v4 = &v2[(_QWORD)i];\n    while ( 1 )\n    {\n      v5 = (char *)(v4 - i);\n      i -= 16;\n      if ( i <= v5 )\n        break;\n      v6 = *(_QWORD *)v5;\n      v7 = *((_QWORD *)v5 + 1);\n      *(_OWORD *)v5 = *(_OWORD *)i;\n      *(_QWORD *)i = v6;\n      *((_QWORD *)i + 1) = v7;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x1ac6fL", 
            "funcEndAddr": "0x1acb0L", 
            "funcName": "sub_1AC6F"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1ACB0(_QWORD *a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  _QWORD *i; // rcx\n\n  if ( a2 )\n  {\n    for ( i = (_QWORD *)(*a1 + a4); *i; i += 2 )\n      ;\n    *i = a2;\n    i[1] = a3;\n  }\n}\n", 
            "funcStartAddr": "0x1acb0L", 
            "funcEndAddr": "0x1acceL", 
            "funcName": "sub_1ACB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall plugins_load(__int64 a1)\n{\n  unsigned int v1; // er13\n  __int64 v2; // rbx\n  _QWORD *v3; // rbp\n  __int64 v4; // rdx\n  __int64 v5; // r15\n  void **v6; // r12\n  void *v7; // rax\n  char *v8; // rax\n  const char *v9; // rsi\n  unsigned int (__fastcall *v10)(void **, const char *); // rax\n  char *v11; // r8\n  _DWORD *v12; // rdi\n  const char *v13; // r8\n  const char *v14; // rcx\n  __int64 v15; // rdx\n  int v17; // esi\n  void *v18; // rdi\n  __int64 v19; // rsi\n  void *v20; // rax\n  __int64 v21; // rax\n  __int64 v22; // rdx\n\n  v1 = 0;\n  v2 = a1;\n  v3 = *(_QWORD **)(a1 + 48);\n  while ( 1 )\n  {\n    v4 = *(_QWORD *)(v2 + 280);\n    if ( *(_DWORD *)(v4 + 16) <= v1 )\n      return 0LL;\n    v5 = *(_QWORD *)(*(_QWORD *)v4 + 8LL * v1);\n    buffer_copy_string((__int64)v3, *(const char **)(v2 + 264));\n    buffer_append_path_len(v3, *(_QWORD *)(v5 + 32), *(_DWORD *)(v5 + 40) - (unsigned int)(*(_DWORD *)(v5 + 40) != 0));\n    buffer_append_string_len(v3, \".so\", 3LL);\n    v6 = (void **)calloc(1uLL, 0xC8uLL);\n    if ( !v6 )\n      ck_assert_failed(\"plugin.c\", 62LL, \"((void *)0) != p\");\n    v7 = dlopen((const char *)*v3, 258);\n    v6[24] = v7;\n    if ( !v7 )\n      break;\n    *((_DWORD *)v3 + 2) = 0;\n    buffer_append_str2(\n      v3,\n      *(_QWORD *)(v5 + 32),\n      *(_DWORD *)(v5 + 40) - (unsigned int)(*(_DWORD *)(v5 + 40) != 0),\n      \"_plugin_init\",\n      12LL);\n    v9 = (const char *)*v3;\n    v10 = (unsigned int (__fastcall *)(void **, const char *))dlsym(v6[24], (const char *)*v3);\n    if ( !v10 )\n    {\n      v11 = dlerror();\n      v12 = *(_DWORD **)(v2 + 112);\n      if ( !v11 )\n      {\n        v13 = (const char *)*v3;\n        v14 = \"dlsym symbol not found: %s\";\n        v15 = 252LL;\n        goto LABEL_13;\n      }\n      log_error(v12, \"plugin.c\", 250LL, (__int64)\"dlsym: %s\", v11);\nLABEL_14:\n      sub_1AC4B(v6);\n      return 0xFFFFFFFFLL;\n    }\n    if ( v10(v6, v9) )\n    {\n      v12 = *(_DWORD **)(v2 + 112);\n      v13 = *(const char **)(v5 + 32);\n      v14 = \"%s plugin init failed\";\n      v15 = 261LL;\nLABEL_13:\n      log_error(v12, \"plugin.c\", v15, (__int64)v14, v13);\n      goto LABEL_14;\n    }\n    v17 = *(_DWORD *)(v2 + 368);\n    if ( v17 == *(_DWORD *)(v2 + 372) )\n    {\n      v18 = *(void **)(v2 + 360);\n      v19 = (unsigned int)(v17 + 4);\n      *(_DWORD *)(v2 + 372) = v19;\n      v20 = realloc(v18, 8 * v19);\n      *(_QWORD *)(v2 + 360) = v20;\n      if ( !v20 )\n        ck_assert_failed(\"plugin.c\", 90LL, \"((void *)0) != srv->plugins.ptr\");\n    }\n    v21 = *(unsigned int *)(v2 + 368);\n    v22 = *(_QWORD *)(v2 + 360);\n    *(_DWORD *)(v2 + 368) = v21 + 1;\n    *(_QWORD *)(v22 + 8 * v21) = v6;\nLABEL_21:\n    ++v1;\n  }\n  v8 = dlerror();\n  log_error(*(_DWORD **)(v2 + 112), \"plugin.c\", 203LL, (__int64)\"dlopen() failed for: %s %s\", *v3, v8);\n  sub_1AC4B(v6);\n  if ( *(_BYTE *)(v2 + 195) && (unsigned int)buffer_eq_slen(v5 + 32, \"mod_deflate\", 11LL) )\n    goto LABEL_21;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x1acceL", 
            "funcEndAddr": "0x1af28L", 
            "funcName": "plugins_load"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_set_defaults(_QWORD *a1)\n{\n  return sub_1AC0B(a1, 14);\n}\n", 
            "funcStartAddr": "0x1af28L", 
            "funcEndAddr": "0x1af32L", 
            "funcName": "plugins_call_set_defaults"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_worker_init(_QWORD *a1)\n{\n  return sub_1AC0B(a1, 15);\n}\n", 
            "funcStartAddr": "0x1af32L", 
            "funcEndAddr": "0x1af3cL", 
            "funcName": "plugins_call_worker_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_sighup(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbx\n  void (__fastcall *v3)(__int64, __int64); // rdx\n  __int64 v4; // rsi\n  __int64 v6; // [rsp+0h] [rbp-18h]\n\n  v1 = *(unsigned __int16 *)(*(_QWORD *)a1 + 26LL);\n  if ( (_WORD)v1 )\n  {\n    v2 = v1 + *(_QWORD *)a1;\n    while ( 1 )\n    {\n      v3 = *(void (__fastcall **)(__int64, __int64))v2;\n      if ( !*(_QWORD *)v2 )\n        break;\n      v4 = *(_QWORD *)(v2 + 8);\n      v2 += 16LL;\n      v3(a1, v4);\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x1af3cL", 
            "funcEndAddr": "0x1af71L", 
            "funcName": "plugins_call_handle_sighup"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_init(__int64 a1)\n{\n  signed __int64 v1; // rcx\n  unsigned int v2; // er14\n  __int64 v3; // rbx\n  __int64 v4; // r12\n  __int128 *v5; // rdi\n  __int64 *v6; // rbp\n  __int64 (__fastcall *v7)(__int128 *); // rdx\n  __int64 v8; // rax\n  __int64 result; // rax\n  bool v10; // zf\n  __int64 (__fastcall *v11)(__int64, __int64); // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  size_t v14; // rdi\n  int v15; // edx\n  _OWORD *v16; // rax\n  unsigned int i; // eax\n  int v18; // eax\n  unsigned int j; // er8\n  __int64 *v20; // rax\n  __int64 *v21; // rax\n  __int64 *v22; // rax\n  __int64 *v23; // rax\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  __int64 *v27; // rax\n  __int64 *v28; // rax\n  __int64 *v29; // rax\n  __int64 *v30; // rax\n  __int64 *v31; // rax\n  __int64 *v32; // rax\n  __int64 *v33; // rax\n  __int64 *v34; // rax\n  int v35; // er8\n  __int128 v36; // [rsp+0h] [rbp-58h]\n  __int128 v37; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v38; // [rsp+28h] [rbp-30h]\n\n  v1 = 8LL;\n  v2 = 0;\n  v3 = a1;\n  v4 = *(_QWORD *)(a1 + 360);\n  v38 = __readfsqword(0x28u);\n  v5 = &v36;\n  while ( v1 )\n  {\n    *(_DWORD *)v5 = 0;\n    v5 = (__int128 *)((char *)v5 + 4);\n    --v1;\n  }\n  while ( *(_DWORD *)(v3 + 368) > v2 )\n  {\n    v6 = *(__int64 **)(v4 + 8LL * v2);\n    v7 = (__int64 (__fastcall *)(__int128 *))v6[17];\n    if ( v7 )\n    {\n      v8 = v7(v5);\n      *v6 = v8;\n      if ( !v8 )\n      {\n        log_error(\n          *(_DWORD **)(v3 + 112),\n          \"plugin.c\",\n          454LL,\n          (__int64)\"plugin-init failed for module %s\",\n          v6[22],\n          (_QWORD)v36);\n        return 4LL;\n      }\n      v10 = v6[23] == 66624;\n      *(_QWORD *)(v8 + 16) = v6;\n      *(_DWORD *)v8 = v2 + 1;\n      if ( !v10 )\n      {\n        log_error(\n          *(_DWORD **)(v3 + 112),\n          \"plugin.c\",\n          463LL,\n          (__int64)\"plugin-version doesn't match lighttpd-version for %s\",\n          v6[22],\n          (_QWORD)v36);\n        return 4LL;\n      }\n    }\n    v11 = (__int64 (__fastcall *)(__int64, __int64))v6[18];\n    if ( v11 )\n    {\n      v5 = (__int128 *)v3;\n      result = v11(v3, *v6);\n      if ( (_DWORD)result == 4 )\n        return result;\n    }\n    v12 = v6[2];\n    if ( v12 )\n      LOWORD(v36) = v36 + 1;\n    if ( v6[1] && !v12 )\n      LOWORD(v36) = v36 + 1;\n    if ( v6[5] )\n      ++HIWORD(v36);\n    if ( v6[6] )\n      ++WORD5(v36);\n    if ( v6[11] )\n      LOWORD(v37) = v37 + 1;\n    if ( v6[12] )\n      ++WORD1(v37);\n    if ( v6[13] )\n      ++WORD2(v37);\n    if ( v6[14] )\n      ++WORD3(v37);\n    if ( v6[15] )\n      ++WORD5(v37);\n    if ( v6[16] )\n      ++WORD4(v37);\n    if ( v6[7] )\n      ++WORD3(v36);\n    if ( v6[9] )\n      ++WORD4(v36);\n    if ( v6[3] )\n      ++WORD1(v36);\n    if ( v6[4] )\n      ++WORD2(v36);\n    if ( v6[10] )\n      ++WORD6(v36);\n    if ( v6[19] )\n      ++WORD6(v37);\n    if ( v6[20] )\n      ++HIWORD(v37);\n    ++v2;\n  }\n  v13 = 0LL;\n  v14 = 2LL;\n  do\n  {\n    v15 = *((unsigned __int16 *)&v36 + v13);\n    if ( (_WORD)v15 )\n    {\n      if ( 16 * (unsigned __int64)(unsigned int)v14 > 0xFFFF )\n        ck_assert_failed(\"plugin.c\", 515LL, \"offset * sizeof(plugin_fn_data) <= (0x7fff * 2 + 1)\");\n      *((_WORD *)&v36 + v13) = 16 * v14;\n      v14 = (unsigned int)(v14 + v15 + 1);\n    }\n    ++v13;\n  }\n  while ( v13 != 16 );\n  v16 = calloc(v14, 0x10uLL);\n  *(_QWORD *)v3 = v16;\n  if ( !v16 )\n    ck_assert_failed(\"plugin.c\", 522LL, \"((void *)0) != srv->plugin_slots\");\n  *v16 = v36;\n  v16[1] = v37;\n  for ( i = 0; *(_DWORD *)(v3 + 368) > i; i = v18 + 1 )\n    sub_1ACB0(\n      (_QWORD *)v3,\n      *(_QWORD *)(*(_QWORD *)(v4 + 8LL * i) + 8LL),\n      **(_QWORD **)(v4 + 8LL * i),\n      (unsigned __int16)v36);\n  for ( j = 0; *(_DWORD *)(v3 + 368) > j; j = v35 + 1 )\n  {\n    v20 = *(__int64 **)(v4 + 8LL * j);\n    if ( !v20[1] )\n      sub_1ACB0((_QWORD *)v3, v20[2], *v20, (unsigned __int16)v36);\n    sub_1ACB0((_QWORD *)v3, v20[5], *v20, HIWORD(v36));\n    sub_1ACB0((_QWORD *)v3, v21[6], *v21, WORD5(v36));\n    sub_1ACB0((_QWORD *)v3, v22[11], *v22, (unsigned __int16)v37);\n    sub_1ACB0((_QWORD *)v3, v23[12], *v23, WORD1(v37));\n    sub_1ACB0((_QWORD *)v3, v24[13], *v24, WORD2(v37));\n    sub_1ACB0((_QWORD *)v3, v25[14], *v25, WORD3(v37));\n    sub_1ACB0((_QWORD *)v3, v26[15], *v26, WORD5(v37));\n    sub_1ACB0((_QWORD *)v3, v27[16], *v27, WORD4(v37));\n    sub_1ACB0((_QWORD *)v3, v28[7], *v28, WORD3(v36));\n    sub_1ACB0((_QWORD *)v3, v29[9], *v29, WORD4(v36));\n    sub_1ACB0((_QWORD *)v3, v30[3], *v30, WORD1(v36));\n    sub_1ACB0((_QWORD *)v3, v31[4], *v31, WORD2(v36));\n    sub_1ACB0((_QWORD *)v3, v32[10], *v32, WORD6(v36));\n    sub_1ACB0((_QWORD *)v3, v33[19], *v33, WORD6(v37));\n    sub_1ACB0((_QWORD *)v3, v34[20], *v34, HIWORD(v37));\n  }\n  sub_1AC6F((_QWORD *)v3, WORD6(v36));\n  sub_1AC6F((_QWORD *)v3, WORD2(v37));\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1af71L", 
            "funcEndAddr": "0x1b382L", 
            "funcName": "plugins_call_init"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_free(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r14\n  unsigned int i; // ebp\n  void ***v4; // r12\n  void **v5; // r13\n  void **v6; // rax\n  unsigned int v7; // ebp\n  void **v8; // rdi\n  __int64 v9; // rax\n\n  v1 = a1;\n  if ( *(_QWORD *)a1 )\n  {\n    v2 = *(_QWORD *)(a1 + 360);\n    for ( i = 0; i < *(_DWORD *)(a1 + 368); ++i )\n    {\n      v4 = *(void ****)(v2 + 8LL * i);\n      if ( v4 )\n      {\n        v5 = *v4;\n        if ( *v4 )\n        {\n          v6 = v4[21];\n          if ( v6 )\n            ((void (__fastcall *)(void **))v6)(*v4);\n          free(v5[1]);\n          free(v5);\n          *v4 = 0LL;\n        }\n      }\n    }\n    free(*(void **)a1);\n    *(_QWORD *)a1 = 0LL;\n  }\n  v7 = 0;\n  while ( 1 )\n  {\n    v8 = *(void ***)(v1 + 360);\n    if ( *(_DWORD *)(v1 + 368) <= v7 )\n      break;\n    v9 = v7++;\n    sub_1AC4B(v8[v9]);\n  }\n  free(v8);\n  *(_QWORD *)(v1 + 360) = 0LL;\n  *(_QWORD *)(v1 + 368) = 0LL;\n  return array_free_data(&plugin_stats);\n}\n", 
            "funcStartAddr": "0x1b382L", 
            "funcEndAddr": "0x1b445L", 
            "funcName": "plugins_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1B445(__int64 *a1, int a2)\n{\n  unsigned int v2; // eax\n  __int64 v3; // rsi\n  __int64 *v4; // rbx\n  void *v5; // rax\n  __int64 v6; // rsi\n  void *v7; // rdi\n  void *v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  void *v11; // rdx\n  __int64 v12; // rcx\n  __int64 result; // rax\n\n  v2 = *((_DWORD *)a1 + 5);\n  if ( v2 > 0x7FFFFFFF - a2 )\n    ck_assert_failed(\"array.c\", 117LL, \"a->size <= (2147483647)-n\");\n  v3 = v2 + a2;\n  v4 = a1;\n  *((_DWORD *)a1 + 5) = v3;\n  v5 = realloc((void *)*a1, 8 * v3);\n  v6 = *((unsigned int *)a1 + 5);\n  v7 = (void *)a1[1];\n  *v4 = (__int64)v5;\n  v8 = realloc(v7, 8 * v6);\n  v9 = *v4;\n  v4[1] = (__int64)v8;\n  if ( !v9 )\n    ck_assert_failed(\"array.c\", 121LL, \"a->data\");\n  if ( !v8 )\n    ck_assert_failed(\"array.c\", 122LL, \"a->sorted\");\n  v10 = *((unsigned int *)v4 + 4);\n  v11 = (void *)(v9 + 8 * v10);\n  v12 = (unsigned int)(*((_DWORD *)v4 + 5) - v10);\n  result = 0LL;\n  memset(v11, 0, 8 * v12);\n  return result;\n}\n", 
            "funcStartAddr": "0x1b445L", 
            "funcEndAddr": "0x1b4edL", 
            "funcName": "sub_1B445"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1B4ED(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  __int64 v4; // r8\n  __int64 result; // rax\n\n  v2 = a1;\n  v3 = a1 + 32;\n  v4 = *(_DWORD *)(a2 + 40) - (unsigned int)(*(_DWORD *)(a2 + 40) != 0);\n  if ( *(_DWORD *)(v2 + 40) <= 1u )\n    result = buffer_copy_string_len(v3, *(_QWORD *)(a2 + 32), v4);\n  else\n    result = buffer_append_str2(v3, \", \", 2LL, *(_QWORD *)(a2 + 32), v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x1b4edL", 
            "funcEndAddr": "0x1b529L", 
            "funcName": "sub_1B4ED"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1B529(__int64 a1, __int64 a2)\n{\n  int v2; // ecx\n  _QWORD *v3; // rbx\n  __int64 v4; // rsi\n  signed __int64 result; // rax\n  __int64 v6; // r12\n  int v7; // eax\n\n  if ( !a2 )\n    ck_assert_failed(\"array.c\", 436LL, \"((void *)0) != entry\");\n  v2 = *(_DWORD *)(a2 + 8);\n  v3 = (_QWORD *)a2;\n  v4 = *(unsigned int *)(a1 + 16);\n  if ( v2 )\n  {\n    v6 = *(_QWORD *)(a1 + 8);\n    v7 = sub_1D4D0(*(_QWORD *)(a1 + 8), v4, *v3, (unsigned int)(v2 - 1));\n    if ( v7 < 0 )\n    {\n      sub_1D380(a1, v3, (unsigned int)~v7);\n      result = 0LL;\n    }\n    else\n    {\n      result = v6 + 8LL * v7;\n    }\n  }\n  else\n  {\n    sub_1D380(a1, v3, (unsigned int)v4);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1b529L", 
            "funcEndAddr": "0x1b59bL", 
            "funcName": "sub_1B529"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1B59B(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n\n  v2 = array_data_string_init(a1, a2);\n  v3 = *(_DWORD *)(a1 + 8);\n  if ( v3 )\n    buffer_copy_string_len(v2, *(_QWORD *)a1, (unsigned int)(v3 - 1));\n  buffer_copy_string_len(\n    v2 + 32,\n    *(_QWORD *)(a1 + 32),\n    *(_DWORD *)(a1 + 40) - (unsigned int)(*(_DWORD *)(a1 + 40) != 0));\n  return v2;\n}\n", 
            "funcStartAddr": "0x1b59bL", 
            "funcEndAddr": "0x1b5e1L", 
            "funcName": "sub_1B59B"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1B5E1(__int64 a1)\n{\n  __int64 v1; // rbx\n  int v2; // eax\n\n  v1 = array_data_integer_init();\n  v2 = *(_DWORD *)(a1 + 8);\n  if ( v2 )\n    buffer_copy_string_len(v1, *(_QWORD *)a1, (unsigned int)(v2 - 1));\n  *(_DWORD *)(v1 + 28) = *(_DWORD *)(a1 + 28);\n  return v1;\n}\n", 
            "funcStartAddr": "0x1b5e1L", 
            "funcEndAddr": "0x1b615L", 
            "funcName": "sub_1B5E1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_free_data(__int64 a1)\n{\n  __int64 v1; // rbx\n  void *v2; // rdi\n  _QWORD *v3; // r12\n  unsigned int v4; // er13\n  __int64 i; // rbp\n  __int64 v6; // rdi\n  __int64 v8; // [rsp+0h] [rbp-28h]\n\n  v1 = a1;\n  v2 = *(void **)(a1 + 8);\n  if ( v2 )\n    free(v2);\n  v3 = *(_QWORD **)v1;\n  v4 = *(_DWORD *)(v1 + 20);\n  for ( i = 0LL; v4 > (unsigned int)i; ++i )\n  {\n    v6 = v3[i];\n    if ( v6 )\n      (*(void (**)(void))(*(_QWORD *)(v6 + 16) + 8LL))();\n  }\n  free(v3);\n  *(_QWORD *)v1 = 0LL;\n  *(_QWORD *)(v1 + 8) = 0LL;\n  *(_QWORD *)(v1 + 16) = 0LL;\n  return v8;\n}\n", 
            "funcStartAddr": "0x1b615L", 
            "funcEndAddr": "0x1b67aL", 
            "funcName": "array_free_data"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_get_data_unset(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rdx\n  __int64 result; // rax\n\n  v3 = *(_QWORD *)(a1 + 8);\n  v4 = (signed int)sub_1D4D0(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), a2, a3);\n  result = 0LL;\n  if ( (signed int)v4 >= 0 )\n    result = *(_QWORD *)(v3 + 8 * v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x1b67aL", 
            "funcEndAddr": "0x1b6a1L", 
            "funcName": "array_get_data_unset"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_extract_element_klen(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // rbp\n  int v5; // ebx\n  __int64 v6; // r13\n  int v7; // eax\n  __int64 v8; // rbx\n  __int64 *v9; // rdi\n  unsigned int v10; // eax\n  _QWORD *v11; // rdx\n  _QWORD *v12; // rcx\n\n  v3 = a1;\n  v4 = 0LL;\n  v5 = *(_DWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 8);\n  v7 = sub_1D4D0(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), a2, a3);\n  if ( v7 >= 0 )\n  {\n    v8 = (unsigned int)(v5 - 1);\n    v9 = (__int64 *)(v6 + 8LL * v7);\n    v4 = *v9;\n    *(_DWORD *)(v3 + 16) = v8;\n    if ( (_DWORD)v8 != v7 )\n      memmove(v9, v9 + 1, 8LL * (unsigned int)(v8 - v7));\n    v10 = 0;\n    v11 = (_QWORD *)(*(_QWORD *)v3 + 8 * v8);\n    if ( *v11 != v4 )\n    {\n      while ( 1 )\n      {\n        v12 = (_QWORD *)(*(_QWORD *)v3 + 8LL * v10);\n        if ( *v12 == v4 )\n          break;\n        ++v10;\n      }\n      *v12 = *v11;\n    }\n    *v11 = 0LL;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x1b6a1L", 
            "funcEndAddr": "0x1b727L", 
            "funcName": "array_extract_element_klen"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_replace(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rbp\n  __int64 v3; // rbx\n  int v4; // ecx\n  __int64 v5; // r13\n  unsigned int v6; // er12\n  __int64 v7; // rdx\n  __int64 v8; // rsi\n  int v9; // eax\n  signed __int64 v10; // rcx\n  __int64 *v11; // rax\n  __int64 v12; // rdi\n  __int64 i; // rax\n  __int64 v15; // [rsp+0h] [rbp-28h]\n\n  v2 = (_QWORD *)a1;\n  v3 = a2;\n  if ( !sub_1B529(a1, a2) )\n    return v15;\n  v4 = *(_DWORD *)(a2 + 8);\n  v5 = *(_QWORD *)(a1 + 8);\n  v6 = *(_DWORD *)(a1 + 16);\n  v7 = *(_QWORD *)a2;\n  v8 = *(unsigned int *)(a1 + 16);\n  v9 = sub_1D4D0(*(_QWORD *)(a1 + 8), v8, v7, v4 - (unsigned int)(v4 != 0));\n  if ( v9 < 0 )\n    ck_assert_failed(\"array.c\", 458LL, \"ipos >= 0\");\n  v11 = (__int64 *)(v5 + 8LL * v9);\n  v12 = *v11;\n  if ( v3 == *v11 )\n    ck_assert_failed(\"array.c\", 460LL, \"old != entry\");\n  *v11 = v3;\n  for ( i = 0LL; (unsigned int)i < v6; ++i )\n  {\n    v10 = i + 1;\n    if ( *(_QWORD *)(*v2 + 8 * i) == v12 )\n      goto LABEL_12;\n  }\n  if ( (_DWORD)i == v6 )\n    ck_assert_failed(\"array.c\", 465LL, \"i != a->used\");\nLABEL_12:\n  *(_QWORD *)(*v2 + 8 * i) = v3;\n  return (*(__int64 (__fastcall **)(__int64, __int64, signed __int64))(*(_QWORD *)(v12 + 16) + 8LL))(v12, v8, v10);\n}\n", 
            "funcStartAddr": "0x1b727L", 
            "funcEndAddr": "0x1b805L", 
            "funcName": "array_replace"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_insert_unique(__int64 a1, __int64 a2)\n{\n  signed __int64 result; // rax\n  void (*v3)(void); // rdx\n\n  result = sub_1B529(a1, a2);\n  if ( result )\n  {\n    v3 = *(void (**)(void))(*(_QWORD *)(a2 + 16) + 16LL);\n    if ( v3 )\n    {\n      if ( *(_DWORD *)(*(_QWORD *)result + 24LL) != *(_DWORD *)(a2 + 24) )\n        ck_assert_failed(\"array.c\", 476LL, \"(*old)->type == entry->type\");\n      v3();\n    }\n    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)(a2 + 16) + 8LL))(a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1b805L", 
            "funcEndAddr": "0x1b858L", 
            "funcName": "array_insert_unique"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_copy_array(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r12\n  __int64 result; // rax\n  int v4; // esi\n  unsigned int v5; // ebx\n  __int64 v6; // rdx\n  __int64 v7; // rsi\n\n  v2 = a2;\n  result = array_free_data((__int64)a1);\n  v4 = *(_DWORD *)(a2 + 20);\n  if ( v4 )\n  {\n    v5 = 0;\n    result = sub_1B445(a1, v4);\n    while ( v5 < *(_DWORD *)(v2 + 16) )\n    {\n      v6 = v5++;\n      v7 = (**(__int64 (***)(void))(*(_QWORD *)(*(_QWORD *)v2 + 8 * v6) + 16LL))();\n      result = array_insert_unique((__int64)a1, v7);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1b858L", 
            "funcEndAddr": "0x1b8a5L", 
            "funcName": "array_copy_array"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1B8A5(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // eax\n\n  v1 = array_data_array_init();\n  v2 = *(_DWORD *)(a1 + 8);\n  if ( v2 )\n    buffer_copy_string_len(v1, *(_QWORD *)a1, (unsigned int)(v2 - 1));\n  array_copy_array((__int64 *)(v1 + 32), a1 + 32);\n  return v1;\n}\n", 
            "funcStartAddr": "0x1b8a5L", 
            "funcEndAddr": "0x1b8dfL", 
            "funcName": "sub_1B8A5"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_is_vlist(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rdx\n\n  v1 = 0LL;\n  do\n  {\n    if ( *(_DWORD *)(a1 + 16) <= (unsigned int)v1 )\n      return 1LL;\n    v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);\n    if ( *(_DWORD *)(v2 + 8) )\n      break;\n    ++v1;\n  }\n  while ( !*(_DWORD *)(v2 + 24) );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1b8dfL", 
            "funcEndAddr": "0x1b909L", 
            "funcName": "array_is_vlist"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_is_kvany(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rcx\n\n  v1 = 0LL;\n  while ( *(_DWORD *)(a1 + 16) > (unsigned int)v1 )\n  {\n    v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1++);\n    if ( !*(_DWORD *)(v2 + 8) )\n      return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x1b909L", 
            "funcEndAddr": "0x1b92bL", 
            "funcName": "array_is_kvany"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_is_kvarray(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rdx\n\n  v1 = 0LL;\n  do\n  {\n    if ( *(_DWORD *)(a1 + 16) <= (unsigned int)v1 )\n      return 1LL;\n    v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);\n    if ( !*(_DWORD *)(v2 + 8) )\n      break;\n    ++v1;\n  }\n  while ( *(_DWORD *)(v2 + 24) == 1 );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1b92bL", 
            "funcEndAddr": "0x1b955L", 
            "funcName": "array_is_kvarray"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_is_kvstring(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rdx\n\n  v1 = 0LL;\n  do\n  {\n    if ( *(_DWORD *)(a1 + 16) <= (unsigned int)v1 )\n      return 1LL;\n    v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v1);\n    if ( !*(_DWORD *)(v2 + 8) )\n      break;\n    ++v1;\n  }\n  while ( !*(_DWORD *)(v2 + 24) );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1b955L", 
            "funcEndAddr": "0x1b97fL", 
            "funcName": "array_is_kvstring"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1B97F(__int64 a1, _DWORD *a2, __int64 a3, unsigned int a4, unsigned int a5)\n{\n  _DWORD *v5; // r10\n  char v6; // al\n  const char *v7; // rsi\n\n  v5 = a2;\n  v6 = *(_BYTE *)(a1 + 2LL * (signed int)a4);\n  v7 = \"skipped\";\n  if ( v6 != 1 )\n  {\n    if ( v6 > 1 )\n    {\n      v7 = \"false\";\n      if ( v6 != 2 )\n      {\n        v7 = \"true\";\n        if ( v6 != 3 )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      v7 = \"unset\";\n      if ( v6 )\n      {\nLABEL_7:\n        v7 = \"invalid cond_result_t\";\n        return log_error(\n                 v5,\n                 \"configfile-glue.c\",\n                 375LL,\n                 (__int64)\"%d (%s) result: %s (cond: %s)\",\n                 a4,\n                 &aUncached[a5 >= 1 ? 2 : 0],\n                 v7,\n                 a3);\n      }\n    }\n  }\n  return log_error(\n           v5,\n           \"configfile-glue.c\",\n           375LL,\n           (__int64)\"%d (%s) result: %s (cond: %s)\",\n           a4,\n           &aUncached[a5 >= 1 ? 2 : 0],\n           v7,\n           a3);\n}\n", 
            "funcStartAddr": "0x1b97fL", 
            "funcEndAddr": "0x1ba02L", 
            "funcName": "sub_1B97F"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_get_config_cond_info(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // rax\n  signed __int64 v3; // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(qword_2585F0 + 8LL * a2);\n  *(_DWORD *)a1 = *(_DWORD *)(v2 + 32);\n  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v2 + 36);\n  v3 = v2 + 64;\n  result = *(_QWORD *)(v2 + 120);\n  *(_QWORD *)(a1 + 8) = v3;\n  *(_QWORD *)(a1 + 16) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x1ba02L", 
            "funcEndAddr": "0x1ba2bL", 
            "funcName": "config_get_config_cond_info"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_capture(__int64 a1, int a2)\n{\n  __int64 v2; // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(qword_2585F0 + 8LL * a2);\n  result = *(unsigned int *)(v2 + 96);\n  if ( !(_DWORD)result )\n  {\n    result = (unsigned int)(*(_DWORD *)(a1 + 16) + 1);\n    *(_DWORD *)(a1 + 16) = result;\n    *(_DWORD *)(v2 + 96) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1ba2bL", 
            "funcEndAddr": "0x1ba4cL", 
            "funcName": "config_capture"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_plugin_value_tobool(__int64 a1, _BOOL4 a2)\n{\n  _BOOL4 v2; // ebp\n  int v3; // eax\n  signed __int64 v4; // rbx\n  int v5; // er12\n\n  v2 = a2;\n  if ( a1 )\n  {\n    v3 = *(_DWORD *)(a1 + 24);\n    if ( v3 )\n    {\n      if ( v3 == 2 )\n        v2 = *(_DWORD *)(a1 + 28) != 0;\n    }\n    else\n    {\n      v4 = a1 + 32;\n      if ( (unsigned int)buffer_eq_icase_slen(a1 + 32, \"enable\", 6LL)\n        || (unsigned int)buffer_eq_icase_slen(v4, \"enabled\", 7LL)\n        || (unsigned int)buffer_eq_icase_slen(v4, \"true\", 4LL)\n        || (unsigned int)buffer_eq_icase_slen(v4, \"1\", 1LL) )\n      {\n        v2 = 1;\n      }\n      else if ( (unsigned int)buffer_eq_icase_slen(v4, \"disable\", 7LL)\n             || (unsigned int)buffer_eq_icase_slen(v4, \"disabled\", 8LL)\n             || (v5 = buffer_eq_icase_slen(v4, \"false\", 5LL)) != 0 )\n      {\n        v2 = 0;\n      }\n      else if ( (unsigned int)buffer_eq_icase_slen(v4, \"0\", 1LL) )\n      {\n        v2 = v5;\n      }\n    }\n  }\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0x1ba4cL", 
            "funcEndAddr": "0x1bb5eL", 
            "funcName": "config_plugin_value_tobool"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_feature_bool(__int64 a1, const char *a2, _BOOL4 a3)\n{\n  __int64 v3; // r8\n  __int64 result; // rax\n  _BOOL4 v5; // ebx\n  __int64 v6; // rax\n\n  v3 = *(_QWORD *)(a1 + 248);\n  result = (unsigned int)a3;\n  if ( v3 )\n  {\n    v5 = a3;\n    v6 = array_get_element_klen(v3, a2, strlen(a2));\n    result = config_plugin_value_tobool(v6, v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1bb5eL", 
            "funcEndAddr": "0x1bb98L", 
            "funcName": "config_feature_bool"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_plugin_value_to_int32(__int64 a1, unsigned int a2)\n{\n  unsigned int v2; // ebp\n  int v3; // eax\n  __int64 v4; // rax\n  _BYTE *v6; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+8h] [rbp-20h]\n\n  v2 = a2;\n  v7 = __readfsqword(0x28u);\n  if ( a1 )\n  {\n    v3 = *(_DWORD *)(a1 + 24);\n    if ( v3 )\n    {\n      if ( v3 == 2 )\n        v2 = *(_DWORD *)(a1 + 28);\n    }\n    else\n    {\n      v4 = strtol(*(const char **)(a1 + 32), &v6, 10);\n      if ( !*v6 && v6 != *(_BYTE **)(a1 + 32) && (unsigned __int64)(v4 + 0x80000000LL) <= 0xFFFFFFFF )\n        v2 = v4;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x1bb98L", 
            "funcEndAddr": "0x1bc1aL", 
            "funcName": "config_plugin_value_to_int32"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_feature_int(__int64 a1, const char *a2, unsigned int a3)\n{\n  __int64 v3; // r8\n  __int64 result; // rax\n  unsigned int v5; // ebx\n  __int64 v6; // rax\n\n  v3 = *(_QWORD *)(a1 + 248);\n  result = a3;\n  if ( v3 )\n  {\n    v5 = a3;\n    v6 = array_get_element_klen(v3, a2, strlen(a2));\n    result = config_plugin_value_to_int32(v6, v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1bc1aL", 
            "funcEndAddr": "0x1bc54L", 
            "funcName": "config_feature_int"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_plugin_values_init_block(__int64 a1, __int64 a2, _QWORD *a3, __int64 a4, __int64 a5)\n{\n  _QWORD *v5; // r13\n  __int64 v6; // r12\n  __int64 v7; // rbx\n  int v8; // er14\n  unsigned int v9; // ebp\n  __int64 v10; // rdi\n  __int64 v11; // rdi\n  int v12; // eax\n  int v13; // eax\n  int v14; // er9\n  _BYTE *v15; // r9\n  _BYTE *v16; // ST20_8\n  __int64 v17; // rax\n  int v18; // er9\n  _BYTE *v19; // r9\n  _BYTE *v20; // ST20_8\n  int v21; // eax\n  __int64 v23; // [rsp+8h] [rbp-70h]\n  __int64 v24; // [rsp+20h] [rbp-58h]\n  unsigned __int8 v25; // [rsp+2Fh] [rbp-49h]\n  _BYTE *v26; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v27; // [rsp+38h] [rbp-40h]\n\n  v5 = a3;\n  v6 = a5;\n  v7 = a1;\n  v8 = 0;\n  v9 = 1;\n  v27 = __readfsqword(0x28u);\n  v23 = a4;\n  while ( *((_BYTE *)v5 + 9) )\n  {\n    v25 = *((_BYTE *)v5 + 9);\n    v24 = *v5;\n    v10 = array_get_element_klen(a2, *v5, *((unsigned __int8 *)v5 + 8));\n    if ( v10 )\n    {\n      *(_DWORD *)v6 = v8;\n      *(_DWORD *)(v6 + 4) = v25;\n      switch ( v25 )\n      {\n        case 1u:\n          if ( !*(_DWORD *)(v10 + 24) )\n          {\n            *(_QWORD *)(v6 + 8) = v10 + 32;\n            goto LABEL_51;\n          }\n          v9 = 0;\n          log_error(\n            *(_DWORD **)(v7 + 112),\n            \"configfile-glue.c\",\n            186LL,\n            (__int64)\"%s should have been a string like ... = \\\"...\\\"\",\n            v24);\n          break;\n        case 2u:\n          v14 = *(_DWORD *)(v10 + 24);\n          if ( v14 )\n          {\n            if ( v14 == 2 )\n            {\n              *(_WORD *)(v6 + 8) = *(_DWORD *)(v10 + 28);\n              goto LABEL_51;\n            }\n            v9 = 0;\n            log_error(\n              *(_DWORD **)(v7 + 112),\n              \"configfile-glue.c\",\n              220LL,\n              (__int64)\"unexpected type for key: %s %d expected a short integer, range 0 ... 65535\",\n              v24);\n          }\n          else\n          {\n            v15 = *(_BYTE **)(v10 + 32);\n            if ( v15 )\n            {\n              if ( *v15 )\n              {\n                v16 = *(_BYTE **)(v10 + 32);\n                v17 = strtol(*(const char **)(v10 + 32), &v26, 10);\n                if ( v26 != v16 && !*v26 && (unsigned __int64)v17 <= 0xFFFF )\n                  goto LABEL_43;\n              }\n            }\n            v9 = 0;\n            log_error(\n              *(_DWORD **)(v7 + 112),\n              \"configfile-glue.c\",\n              214LL,\n              (__int64)\"got a string but expected a short: %s %s\",\n              *v5);\n          }\n          break;\n        case 3u:\n          v18 = *(_DWORD *)(v10 + 24);\n          if ( v18 )\n          {\n            if ( v18 == 2 )\n            {\n              *(_DWORD *)(v6 + 8) = *(_DWORD *)(v10 + 28);\n              goto LABEL_51;\n            }\n            v9 = 0;\n            log_error(\n              *(_DWORD **)(v7 + 112),\n              \"configfile-glue.c\",\n              248LL,\n              (__int64)\"unexpected type for key: %s %d expected an integer, range 0 ... 4294967295\",\n              v24);\n          }\n          else\n          {\n            v19 = *(_BYTE **)(v10 + 32);\n            if ( v19 )\n            {\n              if ( *v19 )\n              {\n                v20 = *(_BYTE **)(v10 + 32);\n                v17 = strtol(*(const char **)(v10 + 32), &v26, 10);\n                if ( v26 != v20 && !*v26 && v17 >= 0 )\n                {\nLABEL_43:\n                  *(_WORD *)(v6 + 8) = v17;\n                  goto LABEL_51;\n                }\n              }\n            }\n            v9 = 0;\n            log_error(\n              *(_DWORD **)(v7 + 112),\n              \"configfile-glue.c\",\n              242LL,\n              (__int64)\"got a string but expected an integer: %s %s\",\n              *v5);\n          }\n          break;\n        case 4u:\n          v21 = config_plugin_value_tobool(v10, -1);\n          if ( v21 != -1 )\n          {\n            *(_DWORD *)(v6 + 8) = v21;\n            goto LABEL_51;\n          }\n          v9 = 0;\n          log_error(\n            *(_DWORD **)(v7 + 112),\n            \"configfile-glue.c\",\n            259LL,\n            (__int64)\"ERROR: unexpected type for key: %s (string) \\\"(enable|disable)\\\"\",\n            v24);\n          break;\n        case 5u:\n        case 6u:\n        case 7u:\n        case 8u:\n        case 9u:\n          if ( *(_DWORD *)(v10 + 24) == 1 )\n          {\n            v11 = v10 + 32;\n            *(_QWORD *)(v6 + 8) = v11;\n            if ( v25 == 7 )\n            {\n              if ( (unsigned int)array_is_kvarray(v11) )\n                goto LABEL_51;\n              v9 = 0;\n              log_error(\n                *(_DWORD **)(v7 + 112),\n                \"configfile-glue.c\",\n                148LL,\n                (__int64)\"%s should have been a list of key => list like %s = ( \\\"...\\\" => ( \\\"...\\\" => \\\"...\\\" ) )\",\n                v24,\n                v24);\n            }\n            else if ( v25 > 7u )\n            {\n              if ( v25 == 8 )\n              {\n                if ( (unsigned int)array_is_kvstring(v11) )\n                  goto LABEL_51;\n                v9 = 0;\n                log_error(\n                  *(_DWORD **)(v7 + 112),\n                  \"configfile-glue.c\",\n                  158LL,\n                  (__int64)\"%s should have been a list of key => string values like %s = ( \\\"...\\\" => \\\"...\\\", \\\"...\\\" => \\\"...\\\" )\",\n                  v24,\n                  v24);\n              }\n              else\n              {\n                if ( v25 != 9 )\n                  goto LABEL_51;\n                v13 = array_is_vlist(v11);\n                if ( v13 )\n                  goto LABEL_51;\n                v9 = 0;\n                log_error(\n                  *(_DWORD **)(v7 + 112),\n                  \"configfile-glue.c\",\n                  168LL,\n                  (__int64)\"%s should have been a list of string values like %s = ( \\\"...\\\", \\\"...\\\" )\",\n                  v24,\n                  v24);\n              }\n            }\n            else\n            {\n              if ( v25 != 6 )\n                goto LABEL_51;\n              v12 = array_is_kvany(v11);\n              if ( v12 )\n                goto LABEL_51;\n              v9 = 0;\n              log_error(\n                *(_DWORD **)(v7 + 112),\n                \"configfile-glue.c\",\n                138LL,\n                (__int64)\"%s should have been a list of key => values like %s = ( \\\"...\\\" => \\\"...\\\", \\\"...\\\" => \\\"...\\\" )\",\n                v24,\n                v24);\n            }\n          }\n          else\n          {\n            v9 = 0;\n            log_error(\n              *(_DWORD **)(v7 + 112),\n              \"configfile-glue.c\",\n              129LL,\n              (__int64)\"%s should have been a list like %s = ( \\\"...\\\" )\",\n              v24,\n              v24);\n          }\n          break;\n        case 0xAu:\n          break;\n        case 0xBu:\n          log_error(\n            *(_DWORD **)(v7 + 112),\n            \"configfile-glue.c\",\n            277LL,\n            (__int64)\"ERROR: found deprecated key: %s (%s)\",\n            v24,\n            v23);\n          *(_BYTE *)(v7 + 196) = 1;\n          break;\n        case 0xCu:\n          log_error(\n            *(_DWORD **)(v7 + 112),\n            \"configfile-glue.c\",\n            272LL,\n            (__int64)\"ERROR: found unsupported key: %s (%s)\",\n            v24,\n            v23);\n          *(_BYTE *)(v7 + 197) = 1;\n          break;\n        default:\nLABEL_51:\n          v6 += 16LL;\n          break;\n      }\n    }\n    ++v8;\n    v5 += 2;\n  }\n  *(_DWORD *)v6 = -1;\n  return v9;\n}\n", 
            "funcStartAddr": "0x1bc54L", 
            "funcEndAddr": "0x1c0d1L", 
            "funcName": "config_plugin_values_init_block"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_plugin_values_init(__int64 a1, __int64 a2, _QWORD *a3, __int64 a4)\n{\n  _QWORD *v4; // r14\n  __int64 v5; // rdx\n  unsigned int v6; // eax\n  __int64 v7; // rdx\n  unsigned int v8; // er13\n  unsigned int v9; // ebx\n  __int64 v10; // r15\n  __int64 v11; // rdx\n  _QWORD *v12; // rbp\n  __int64 v13; // rax\n  __int64 v14; // r13\n  __int64 v15; // rax\n  int v16; // edx\n  int v17; // esi\n  char *v18; // rax\n  int v19; // ecx\n  unsigned int v20; // ebp\n  signed __int64 v21; // rdx\n  signed __int64 v22; // rax\n  __int64 v23; // rdx\n  int v24; // esi\n  int v25; // esi\n  __int16 *v26; // r10\n  __int64 v27; // r15\n  unsigned int v28; // er9\n  __int16 *v29; // ST00_8\n  unsigned int v30; // eax\n  __int64 v32; // [rsp+0h] [rbp-3078h]\n  __int64 v33; // [rsp+8h] [rbp-3070h]\n  unsigned int v34; // [rsp+8h] [rbp-3070h]\n  __int64 v35; // [rsp+10h] [rbp-3068h]\n  __int64 v36; // [rsp+18h] [rbp-3060h]\n  unsigned int v37; // [rsp+20h] [rbp-3058h]\n  char v38; // [rsp+27h] [rbp-3051h]\n  __int16 v39[4096]; // [rsp+30h] [rbp-3048h]\n  char v40[4104]; // [rsp+2030h] [rbp-1048h]\n  unsigned __int64 v41; // [rsp+3038h] [rbp-40h]\n\n  v4 = a3;\n  v5 = *(_QWORD *)(a1 + 8);\n  v41 = __readfsqword(0x28u);\n  v35 = a4;\n  v32 = *(_QWORD *)(a1 + 288);\n  v6 = *(_DWORD *)(v5 + 16);\n  if ( v6 > 0x1000 )\n    ck_assert_failed(\"configfile-glue.c\", 298LL, \"sizeof(matches) >= srv->config_context->used\");\n  v7 = *(_QWORD *)v5;\n  v8 = 0;\n  dword_2585F8 = v6;\n  v9 = 0;\n  v10 = a2;\n  qword_2585F0 = v7;\n  while ( 1 )\n  {\n    v11 = *(_QWORD *)(a1 + 8);\n    if ( *(_DWORD *)(v11 + 16) <= v8 )\n      break;\n    v12 = v4;\n    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8LL * v8) + 152LL);\n    v40[v9] = 0;\n    while ( *((_BYTE *)v12 + 9) )\n    {\n      v38 = v40[v9];\n      v36 = *v12;\n      v37 = *((unsigned __int8 *)v12 + 8);\n      if ( array_get_element_klen(v33, *v12, *((unsigned __int8 *)v12 + 8)) )\n      {\n        v40[v9] = v38 + 1;\n        v13 = array_get_buf_ptr(v32, v36, v37);\n        buffer_copy_string_len(v13, \"\", 0LL);\n        if ( *((_BYTE *)v12 + 10) == 1 )\n        {\n          if ( v8 )\n            log_error(\n              *(_DWORD **)(a1 + 112),\n              \"configfile-glue.c\",\n              323LL,\n              (__int64)\"DEPRECATED: do not set server options in conditionals, variable: %s\",\n              *v12,\n              v32);\n        }\n      }\n      v12 += 2;\n    }\n    if ( v40[v9] )\n      v39[v9++] = v8;\n    ++v8;\n  }\n  v14 = a2;\n  v15 = 0LL;\n  v16 = 0;\n  while ( v9 > (unsigned int)v15 )\n  {\n    v17 = (unsigned __int8)v40[v15++];\n    v16 += v17;\n  }\n  *(_DWORD *)(v10 + 4) = v9;\n  v18 = (char *)calloc(v16 + 2 * v9 + 1, 0x10uLL);\n  *(_QWORD *)(v10 + 8) = v18;\n  if ( !v18 )\n    ck_assert_failed(\"configfile-glue.c\", 338LL, \"p->cvlist\");\n  v19 = v9 + 1;\n  if ( v9 && v39[0] )\n  {\n    *(_DWORD *)(v10 + 4) = v19;\n    v20 = 1;\n    v21 = 1LL;\n  }\n  else\n  {\n    v20 = 0;\n    v21 = 0LL;\n  }\n  v22 = (signed __int64)&v18[16 * v21];\n  v23 = 0LL;\n  while ( v9 > (unsigned int)v23 )\n  {\n    v24 = (unsigned __int16)v39[v23];\n    *(_DWORD *)(v22 + 8) = v19;\n    ++v23;\n    v22 += 16LL;\n    *(_DWORD *)(v22 - 16) = v24;\n    v25 = (unsigned __int8)v40[v23 - 1];\n    *(_DWORD *)(v22 - 4) = v25;\n    v19 += v25 + 1;\n  }\n  v26 = v39;\n  v27 = 0LL;\n  v28 = 1;\n  while ( v9 > (unsigned int)v27 )\n  {\n    v34 = v28;\n    v29 = v26;\n    v30 = config_plugin_values_init_block(\n            a1,\n            *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8LL * (unsigned __int16)v26[v27]) + 152LL),\n            v4,\n            v35,\n            *(_QWORD *)(v14 + 8) + 16LL * *(unsigned int *)(*(_QWORD *)(v14 + 8) + 16 * (v27 + v20) + 8));\n    v26 = v29;\n    if ( v30 )\n      v30 = v34;\n    ++v27;\n    v28 = v30;\n  }\n  return v28;\n}\n", 
            "funcStartAddr": "0x1c0d1L", 
            "funcEndAddr": "0x1c39bL", 
            "funcName": "config_plugin_values_init"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_response_buffer_append_authority(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  unsigned int v3; // eax\n  __int64 v5; // rax\n  _DWORD *v6; // rdi\n  signed __int64 v7; // rdx\n  int v8; // er13\n  __int64 v9; // r13\n  unsigned __int64 v10; // rdx\n  __int64 v11; // rax\n  unsigned int v12; // edx\n  int v13; // er12\n  signed __int16 v14; // ax\n  socklen_t len; // [rsp+Ch] [rbp-ACh]\n  struct sockaddr addr; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v17; // [rsp+88h] [rbp-30h]\n\n  v2 = a1;\n  v17 = __readfsqword(0x28u);\n  v3 = *(_DWORD *)(a1 + 288);\n  if ( v3 > 1 )\n  {\n    buffer_append_string_len(a2, *(_QWORD *)(a1 + 280), v3 - 1);\n    return 0LL;\n  }\n  v5 = *(_QWORD *)(a1 + 48);\n  addr.sa_family = 0;\n  len = 112;\n  if ( getsockname(*(_DWORD *)(v5 + 816), &addr, &len) == -1 || len > 0x70 )\n  {\n    v6 = *(_DWORD **)(a1 + 128);\n    *(_DWORD *)(v2 + 4) = 500;\n    log_perror(v6, \"http-header-glue.c\", 49LL, (__int64)\"can't get sockname\");\n    return 0xFFFFFFFFLL;\n  }\n  if ( addr.sa_family != 2 || *(_DWORD *)&addr.sa_data[2] != 16777343 )\n  {\n    v11 = *(_QWORD *)(a1 + 448);\n    v12 = *(_DWORD *)(v11 + 8);\n    if ( v12 <= 1 )\n    {\n      if ( (unsigned int)sock_addr_nameinfo_append_buffer(a2, &addr, *(_QWORD *)(a1 + 128)) )\n      {\n        *(_DWORD *)(a1 + 4) = 500;\n        return 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      buffer_append_string_len(a2, *(_QWORD *)v11, v12 - 1);\n    }\n  }\n  else\n  {\n    v7 = qword_258640;\n    if ( !qword_258640 )\n    {\n      v8 = *(_DWORD *)(a2 + 8);\n      if ( !(unsigned int)sock_addr_nameinfo_append_buffer(a2, &addr, *(_QWORD *)(a1 + 128)) )\n      {\n        v9 = v8 - (unsigned int)(v8 != 0);\n        v10 = *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0) - v9;\n        qword_258640 = v10;\n        if ( v10 > 0x1F )\n          qword_258640 = 0LL;\n        else\n          __memcpy_chk(&qword_258620, v9 + *(_QWORD *)a2, v10 + 1, 32LL);\n        goto LABEL_19;\n      }\n      qword_258640 = 9LL;\n      word_258628 = 116;\n      qword_258620 = 8317981851476258668LL;\n      v7 = 9LL;\n    }\n    buffer_append_string_len(a2, &qword_258620, v7);\n  }\nLABEL_19:\n  LOWORD(v13) = sock_addr_get_port(&addr);\n  v14 = (unsigned int)buffer_eq_slen(a1 + 264, \"https\", 5LL) < 1 ? 80 : 443;\n  if ( !(_WORD)v13 )\n    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 912LL) + 172LL);\n  if ( (_WORD)v13 != v14 )\n  {\n    buffer_append_string_len(a2, \":\", 1LL);\n    buffer_append_int(a2, (unsigned __int16)v13);\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1c39bL", 
            "funcEndAddr": "0x1c5f2L", 
            "funcName": "http_response_buffer_append_authority"
        }, 
        {
            "decompiledFuncCode": "char *strftime_cache_reset()\n{\n  char *result; // rax\n  char *v1; // rdx\n\n  result = (char *)&unk_258840;\n  v1 = (char *)&unk_258660;\n  do\n  {\n    *((_QWORD *)result + 1) = v1;\n    *(_QWORD *)result = -1LL;\n    result += 24;\n    *((_DWORD *)result - 2) = 30;\n    *((_DWORD *)result - 1) = 30;\n    v1 += 30;\n  }\n  while ( result != (char *)&unk_258840 + 384 );\n  return result;\n}\n", 
            "funcStartAddr": "0x1c5f2L", 
            "funcEndAddr": "0x1c62eL", 
            "funcName": "strftime_cache_reset"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_response_reqbody_read_error(__int64 a1, int a2)\n{\n  bool v2; // zf\n\n  v2 = *(_DWORD *)(a1 + 520) == 0;\n  *(_BYTE *)(a1 + 566) = 0;\n  if ( !v2 )\n    return 4LL;\n  http_response_body_clear(a1, 0LL);\n  *(_DWORD *)(a1 + 4) = a2;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x1c62eL", 
            "funcEndAddr": "0x1c66aL", 
            "funcName": "http_response_reqbody_read_error"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_response_send_1xx_cb_set(__int64 a1, int a2)\n{\n  unsigned __int8 v2; // of\n  int v3; // esi\n\n  v2 = __OFSUB__(a2, 1);\n  v3 = a2 - 1;\n  if ( (unsigned __int8)((v3 < 0) ^ v2) | (v3 == 0) )\n  {\n    if ( !v3 )\n      qword_258650 = a1;\n  }\n  else\n  {\n    qword_258648 = a1;\n  }\n}\n", 
            "funcStartAddr": "0x1c66aL", 
            "funcEndAddr": "0x1c680L", 
            "funcName": "http_response_send_1xx_cb_set"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1C680(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4)\n{\n  int v4; // eax\n  __int64 v5; // r13\n  unsigned int v6; // ebx\n  _BYTE *v7; // rax\n\n  v4 = *(_DWORD *)(a1 + 4);\n  if ( !v4 || v4 == 101 )\n    return 0LL;\n  v5 = a4;\n  v6 = a4;\n  if ( a4 )\n    memmove(*(void **)a2, (const void *)(*(_QWORD *)a2 + a3), a4);\n  v7 = *(_BYTE **)a2;\n  *(_DWORD *)(a2 + 8) = v6 + 1;\n  v7[v5] = 0;\n  return http_response_send_1xx(a1);\n}\n", 
            "funcStartAddr": "0x1c680L", 
            "funcEndAddr": "0x1c6d8L", 
            "funcName": "sub_1C680"
        }, 
        {
            "decompiledFuncCode": "void sub_1C6D8()\n{\n  int v0; // ebx\n  int v1; // ebx\n  __pid_t v2; // eax\n\n  dword_2589D8 = 1;\n  if ( (unsigned int)sub_3C1A0(&word_2589D0) != 1 )\n  {\n    v1 = time(0LL);\n    v2 = getpid();\n    srand(v1 ^ v2);\n    word_2589D0 = rand();\n    word_2589D2 = rand();\n  }\n  v0 = (unsigned __int16)word_2589D2 | ((unsigned __int16)word_2589D0 << 16);\n  srand(v0);\n  srandom(v0);\n}\n", 
            "funcStartAddr": "0x1c6d8L", 
            "funcEndAddr": "0x1c75bL", 
            "funcName": "sub_1C6D8"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1C75B(__int64 a1, unsigned __int8 a2, __int64 a3)\n{\n  __int64 v3; // r9\n  _DWORD *v4; // rdi\n\n  if ( !*(_BYTE *)(a1 + 168) )\n    return 400LL;\n  v3 = (unsigned int)(char)a2;\n  v4 = *(_DWORD **)(a1 + 128);\n  if ( a2 <= 0x20u || a2 == 127 )\n    log_error(v4, \"request.c\", 291LL, (__int64)\"%s (0x%x)\", a3, v3);\n  else\n    log_error(v4, \"request.c\", 288LL, (__int64)\"%s ('%c')\", a3, v3);\n  return 400LL;\n}\n", 
            "funcStartAddr": "0x1c75bL", 
            "funcEndAddr": "0x1c7c5L", 
            "funcName": "sub_1C75B"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1C7C5(_DWORD *a1, char a2, unsigned int a3, __int64 a4)\n{\n  unsigned int v4; // ebx\n\n  v4 = a3;\n  if ( a4 && a2 )\n    log_error(a1, \"request.c\", 278LL, (__int64)&off_4987E, a4);\n  return v4;\n}\n", 
            "funcStartAddr": "0x1c7c5L", 
            "funcEndAddr": "0x1c7f3L", 
            "funcName": "sub_1C7C5"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1C7F3(__int64 a1, __int64 a2, signed int a3, int a4)\n{\n  __int64 i; // r9\n  char v5; // al\n  bool v7; // al\n\n  for ( i = 0LL; a3 > (signed int)i; ++i )\n  {\n    v5 = *(_BYTE *)(a2 + i);\n    if ( (unsigned int)((char)(*(_BYTE *)(a2 + i) | 0x20) - 97) > 0x19 && v5 != 45 )\n    {\n      if ( v5 == 44 )\n        return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n      if ( v5 > 44 )\n      {\n        if ( v5 > 93 )\n        {\n          if ( v5 == 123 || v5 == 125 )\n            return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n        }\n        else if ( v5 >= 91 || v5 == 47 || v5 >= 47 && (unsigned __int8)(v5 - 58) <= 6u )\n        {\n          return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n        }\n      }\n      else\n      {\n        if ( v5 == 32 )\n          return sub_1C7C5(*(_DWORD **)(a1 + 128), *(_BYTE *)(a1 + 168), 0x190u, (__int64)\"WS character in key -> 400\");\n        if ( v5 > 32 )\n        {\n          if ( v5 == 34 || v5 >= 34 && (unsigned __int8)(v5 - 40) <= 1u )\n            return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n        }\n        else\n        {\n          if ( v5 == 10 || v5 == 13 )\n            return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n          if ( v5 == 9 )\n            return sub_1C7C5(\n                     *(_DWORD **)(a1 + 128),\n                     *(_BYTE *)(a1 + 168),\n                     0x190u,\n                     (__int64)\"WS character in key -> 400\");\n        }\n      }\n      if ( a4 )\n        v7 = (unsigned __int8)(v5 - 32) > 0x5Eu;\n      else\n        v7 = v5 == 0;\n      if ( v7 )\n        return sub_1C75B(a1, *(_BYTE *)(a2 + i), (__int64)\"invalid character in header key -> 400\");\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1c7f3L", 
            "funcEndAddr": "0x1c8cbL", 
            "funcName": "sub_1C7F3"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1C8CB(__int64 a1, __int64 a2)\n{\n  int v2; // eax\n  int v3; // ebp\n  int v4; // ebx\n  int *v5; // rax\n  int v6; // er13\n  int *v7; // r12\n  const char *v9; // [rsp+0h] [rbp-58h]\n  const char *v10; // [rsp+8h] [rbp-50h]\n  __int64 v11; // [rsp+10h] [rbp-48h]\n  __int64 v12; // [rsp+18h] [rbp-40h]\n  unsigned __int64 v13; // [rsp+28h] [rbp-30h]\n\n  v13 = __readfsqword(0x28u);\n  v2 = fdevent_open_devnull(a1, a2);\n  v3 = v2;\n  if ( v2 != -1 )\n  {\n    v4 = v2;\n    v11 = a1;\n    v12 = 0LL;\n    v9 = \"/bin/sh\";\n    v10 = \"-c\";\n    v3 = fdevent_fork_execve(\"/bin/sh\", (char **)&v9, -1);\n    if ( v3 <= 0 )\n    {\n      v5 = __errno_location();\n      v6 = *v5;\n      v7 = v5;\n      close(v4);\n      *v7 = v6;\n    }\n    else\n    {\n      close(v4);\n    }\n  }\n  return (unsigned int)v3;\n}\n", 
            "funcStartAddr": "0x1c8cbL", 
            "funcEndAddr": "0x1c980L", 
            "funcName": "sub_1C8CB"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1C980(__int64 *a1, signed __int64 a2)\n{\n  __int64 v2; // rax\n\n  if ( a1[2] + 5 < a2 )\n  {\n    v2 = *a1;\n    a1[2] = a2;\n    *((_DWORD *)a1 + 2) = sub_1C8CB(*(_QWORD *)(v2 + 24), *((unsigned int *)a1 + 3));\n  }\n  return 2 * (unsigned int)(*((_DWORD *)a1 + 2) > 0) - 1;\n}\n", 
            "funcStartAddr": "0x1c980L", 
            "funcEndAddr": "0x1c9b6L", 
            "funcName": "sub_1C980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdlog_pipes_restart(signed __int64 a1)\n{\n  signed __int64 v1; // rbp\n  unsigned int i; // ebx\n  __int64 *v3; // rdi\n  __int64 v5; // [rsp+0h] [rbp-18h]\n\n  v1 = a1;\n  for ( i = 0; (unsigned int)qword_258A48 > i; ++i )\n  {\n    v3 = (__int64 *)((char *)qword_258A40 + 24 * i);\n    if ( *((_DWORD *)v3 + 2) <= 0 )\n      sub_1C980(v3, v1);\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x1c9b6L", 
            "funcEndAddr": "0x1c9ecL", 
            "funcName": "fdlog_pipes_restart"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdlog_pipes_waitpid_cb(int a1)\n{\n  char *v1; // rax\n  __int64 *v2; // rcx\n  signed __int64 v3; // rsi\n\n  v1 = (char *)qword_258A40;\n  while ( v1 != (char *)qword_258A40 + 24 * (unsigned int)qword_258A48 )\n  {\n    v2 = (__int64 *)v1;\n    v1 += 24;\n    if ( *((_DWORD *)v1 - 4) == a1 )\n    {\n      v3 = log_monotonic_secs;\n      *((_DWORD *)v2 + 2) = -1;\n      return sub_1C980(v2, v3);\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1c9ecL", 
            "funcEndAddr": "0x1ca2aL", 
            "funcName": "fdlog_pipes_waitpid_cb"
        }, 
        {
            "decompiledFuncCode": "__int64 fdlog_pipes_abandon_pids()\n{\n  unsigned int v0; // ecx\n  char *v1; // rdx\n  __int64 result; // rax\n  signed __int64 v3; // rsi\n\n  v0 = qword_258A48;\n  v1 = (char *)qword_258A40;\n  result = 0LL;\n  while ( v0 > (unsigned int)result )\n  {\n    v3 = 24 * result++;\n    *(_DWORD *)&v1[v3 + 8] = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1ca2aL", 
            "funcEndAddr": "0x1ca4fL", 
            "funcName": "fdlog_pipes_abandon_pids"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall fdlog_pipe_serrh(int a1)\n{\n  __int64 *v1; // rdx\n  char *result; // rax\n  __int64 v3; // rcx\n\n  v1 = (__int64 *)qword_258A40;\n  result = (char *)qword_258A40 + 24 * (unsigned int)qword_258A48;\n  while ( v1 != (__int64 *)result )\n  {\n    v3 = *v1;\n    v1 += 3;\n    if ( *(_DWORD *)(v3 + 4) == a1 )\n    {\n      *(_DWORD *)(v3 + 4) = 2;\n      return result;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1ca4fL", 
            "funcEndAddr": "0x1ca7dL", 
            "funcName": "fdlog_pipe_serrh"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdlog_open(char *s2, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 *v5; // rbx\n  __int64 *v6; // r13\n  __int64 v7; // rbp\n  unsigned int v8; // ebp\n  __int64 v9; // rbx\n  __int64 *v10; // rbx\n  __int64 *v11; // r13\n  const char *v12; // r12\n  __int64 *v13; // rbx\n  __int64 v14; // rsi\n  int v15; // ebp\n  __int64 v16; // rbx\n  int v17; // eax\n  __int64 v18; // rsi\n  char *v19; // rbx\n  __int64 v20; // rax\n  int *v21; // rax\n  int v22; // ebp\n  int *v23; // rbx\n  int fd; // [rsp+0h] [rbp-38h]\n  int v26; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v27; // [rsp+8h] [rbp-30h]\n\n  v27 = __readfsqword(0x28u);\n  if ( *s2 != 124 )\n  {\n    v5 = (__int64 *)qword_258A50;\n    v6 = (__int64 *)((char *)qword_258A50 + 8 * (unsigned int)qword_258A58);\n    while ( v6 != v5 )\n    {\n      v7 = *v5;\n      ++v5;\n      if ( !strcmp(*(const char **)(v7 + 24), s2) )\n        return v7;\n    }\n    v8 = fdevent_open_cloexec(s2, 1LL, 1089LL, 420LL, a5);\n    if ( v8 != -1 )\n    {\n      v9 = (unsigned int)qword_258A58;\n      if ( (_DWORD)qword_258A58 == HIDWORD(qword_258A58) )\n      {\n        HIDWORD(qword_258A58) = qword_258A58 + 4;\n        qword_258A50 = realloc(qword_258A50, 8LL * (unsigned int)(qword_258A58 + 4));\n        if ( !qword_258A50 )\n          ck_assert_failed(\"fdlog_maint.c\", 219LL, \"fdlog_files.ptr\");\n      }\n      LODWORD(qword_258A58) = v9 + 1;\n      v10 = (__int64 *)((char *)qword_258A50 + 8 * v9);\n      v7 = fdlog_init(s2, v8, 0LL);\n      *v10 = v7;\n      return v7;\n    }\n    return 0LL;\n  }\n  v11 = (__int64 *)qword_258A40;\n  v12 = s2 + 1;\n  v13 = (__int64 *)((char *)qword_258A40 + 24 * (unsigned int)qword_258A48);\n  while ( v11 != v13 )\n  {\n    v7 = *v11;\n    v11 += 3;\n    if ( !strcmp(*(const char **)(v7 + 24), v12) )\n      return v7;\n  }\n  if ( (unsigned int)fdevent_pipe_cloexec(&fd) )\n    return 0LL;\n  v14 = (unsigned int)fd;\n  v15 = sub_1C8CB((__int64)v12, (unsigned int)fd);\n  if ( v15 <= 0 )\n  {\n    v21 = __errno_location();\n    v22 = *v21;\n    v23 = v21;\n    close(fd);\n    close(v26);\n    *v23 = v22;\n    v7 = 0LL;\n  }\n  else\n  {\n    fdevent_fcntl_set_nb((unsigned int)v26, v14);\n    v16 = (unsigned int)qword_258A48;\n    if ( (_DWORD)qword_258A48 == HIDWORD(qword_258A48) )\n    {\n      HIDWORD(qword_258A48) = qword_258A48 + 4;\n      qword_258A40 = realloc(qword_258A40, 24LL * (unsigned int)(qword_258A48 + 4));\n      if ( !qword_258A40 )\n        ck_assert_failed(\"fdlog_maint.c\", 173LL, \"fdlog_pipes.ptr\");\n    }\n    v17 = v16 + 1;\n    v18 = (unsigned int)v26;\n    v19 = (char *)qword_258A40 + 24 * v16;\n    LODWORD(qword_258A48) = v17;\n    *((_DWORD *)v19 + 3) = fd;\n    v20 = log_monotonic_secs;\n    *((_DWORD *)v19 + 2) = v15;\n    *((_QWORD *)v19 + 2) = v20;\n    v7 = fdlog_init(v12, v18, 3LL);\n    *(_QWORD *)v19 = v7;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x1ca7dL", 
            "funcEndAddr": "0x1ccadL", 
            "funcName": "fdlog_open"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdlog_files_flush(_DWORD *a1, int a2)\n{\n  unsigned int i; // ebp\n  __int64 v3; // rbx\n  unsigned int v4; // eax\n  __int64 v5; // rax\n\n  for ( i = 0; (unsigned int)qword_258A58 > i; ++i )\n  {\n    v3 = *((_QWORD *)qword_258A50 + i);\n    v4 = *(_DWORD *)(v3 + 16);\n    if ( v4 > 1 )\n    {\n      v5 = write_all(*(_DWORD *)(v3 + 4), *(void **)(v3 + 8), v4 - 1);\n      *(_DWORD *)(v3 + 16) = 0;\n      if ( v5 == -1 )\n        log_perror(a1, \"fdlog_maint.c\", 266LL, (__int64)\"error flushing log %s\", *(_QWORD *)(v3 + 24));\n    }\n    if ( a2 )\n    {\n      if ( *(_QWORD *)(v3 + 8) )\n        buffer_free_ptr(v3 + 8);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x1ccadL", 
            "funcEndAddr": "0x1cd3bL", 
            "funcName": "fdlog_files_flush"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdlog_files_cycle(_DWORD *a1)\n{\n  unsigned int v1; // ebp\n  __int64 v2; // r8\n  __int64 v3; // rbx\n  int v4; // eax\n  int v5; // er12\n  int v6; // er13\n  __int64 v8; // [rsp+0h] [rbp-38h]\n\n  v1 = 0;\n  fdlog_files_flush(a1, 0);\n  while ( (unsigned int)qword_258A58 > v1 )\n  {\n    v3 = *((_QWORD *)qword_258A50 + v1);\n    v4 = fdevent_open_cloexec(*(_QWORD *)(v3 + 24), 1LL, 1089LL, 420LL, v2);\n    v5 = v4;\n    if ( v4 == -1 )\n    {\n      log_perror(a1, \"fdlog_maint.c\", 294LL, (__int64)\"error cycling log %s\", *(_QWORD *)(v3 + 24));\n    }\n    else\n    {\n      v6 = *(_DWORD *)(v3 + 4);\n      if ( v6 <= 2 )\n      {\n        if ( v6 != dup2(v4, v6) )\n          log_perror(\n            a1,\n            \"fdlog_maint.c\",\n            288LL,\n            (__int64)\"dup2() %s to %d\",\n            *(_QWORD *)(v3 + 24),\n            *(unsigned int *)(v3 + 4));\n        close(v5);\n      }\n      else\n      {\n        close(v6);\n        *(_DWORD *)(v3 + 4) = v5;\n      }\n    }\n    ++v1;\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x1cd3bL", 
            "funcEndAddr": "0x1ce1bL", 
            "funcName": "fdlog_files_cycle"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdlog_closeall(_DWORD *a1)\n{\n  unsigned int v1; // ebx\n  _DWORD *v2; // r12\n  _DWORD *v3; // rdi\n  unsigned int v4; // ebp\n  char *v5; // rbx\n  _DWORD *v6; // r13\n  __int64 v8; // [rsp+0h] [rbp-28h]\n\n  v1 = 0;\n  v2 = a1;\n  fdlog_files_flush(a1, 0);\n  while ( v1 < (unsigned int)qword_258A58 )\n  {\n    v3 = (_DWORD *)*((_QWORD *)qword_258A50 + v1);\n    if ( v2 != v3 )\n      fdlog_free(v3);\n    ++v1;\n  }\n  free(qword_258A50);\n  v4 = 0;\n  qword_258A50 = 0LL;\n  qword_258A58 = 0LL;\n  while ( v4 < (unsigned int)qword_258A48 )\n  {\n    v5 = (char *)qword_258A40 + 24 * v4;\n    v6 = *(_DWORD **)v5;\n    close(*((_DWORD *)v5 + 3));\n    *((_DWORD *)v5 + 3) = -1;\n    if ( v2 != v6 )\n      fdlog_free(v6);\n    ++v4;\n  }\n  free(qword_258A40);\n  qword_258A40 = 0LL;\n  qword_258A48 = 0LL;\n  return v8;\n}\n", 
            "funcStartAddr": "0x1ce1bL", 
            "funcEndAddr": "0x1cecfL", 
            "funcName": "fdlog_closeall"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdlog_flushall(__int64 a1)\n{\n  unsigned int v1; // ebp\n  char *v2; // rax\n\n  v1 = 0;\n  fdlog_files_flush((_DWORD *)a1, 1);\n  while ( (unsigned int)qword_258A48 > v1 )\n  {\n    v2 = (char *)qword_258A40 + 24 * v1;\n    if ( *(_QWORD *)(*(_QWORD *)v2 + 8LL) )\n      buffer_free_ptr(*(_QWORD *)v2 + 8LL);\n    ++v1;\n  }\n  if ( *(_QWORD *)(a1 + 8) )\n    buffer_free_ptr(a1 + 8);\n}\n", 
            "funcStartAddr": "0x1cecfL", 
            "funcEndAddr": "0x1cf27L", 
            "funcName": "fdlog_flushall"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall fdlog_init(__int64 a1, signed int a2, int a3)\n{\n  signed int v3; // ebx\n  int v4; // ebp\n  _QWORD *result; // rax\n\n  v3 = a2;\n  v4 = a3;\n  result = calloc(1uLL, 0x20uLL);\n  if ( !result )\n    ck_assert_failed(\"fdlog.c\", 13LL, \"fdlog\");\n  result[3] = a1;\n  if ( a2 < 0 )\n    v3 = 2;\n  *((_DWORD *)result + 1) = v3;\n  *(_DWORD *)result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x1cf27L", 
            "funcEndAddr": "0x1cf75L", 
            "funcName": "fdlog_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdlog_free(void *ptr)\n{\n  void **v1; // rbx\n  int v2; // edi\n\n  v1 = (void **)ptr;\n  v2 = *((_DWORD *)ptr + 1);\n  if ( v2 > 2 )\n    close(v2);\n  free(v1[1]);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x1cf75L", 
            "funcEndAddr": "0x1cf98L", 
            "funcName": "fdlog_free"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_1CF98(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __fprintf_chk(stderr, 1LL, a4, a1);\n  return fflush(stderr);\n}\n", 
            "funcStartAddr": "0x1cf98L", 
            "funcEndAddr": "0x1cfc8L", 
            "funcName": "sub_1CF98"
        }, 
        {
            "decompiledFuncCode": "int __fastcall ck_bt(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_1CF98(a1, a2, a3, (__int64)\"%s.%u: %s\\n\");\n}\n", 
            "funcStartAddr": "0x1cfc8L", 
            "funcEndAddr": "0x1cfd1L", 
            "funcName": "ck_bt"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn ck_bt_abort(__int64 a1, __int64 a2, __int64 a3)\n{\n  ck_bt(a1, a2, a3);\n  abort();\n}\n", 
            "funcStartAddr": "0x1cfd1L", 
            "funcEndAddr": "0x1cfdfL", 
            "funcName": "ck_bt_abort"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn ck_assert_failed(__int64 a1, __int64 a2, __int64 a3)\n{\n  sub_1CF98(a1, a2, a3, (__int64)\"%s.%u: assertion failed: %s\\n\");\n  abort();\n}\n", 
            "funcStartAddr": "0x1cfdfL", 
            "funcEndAddr": "0x1cff4L", 
            "funcName": "ck_assert_failed"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1D000(__int64 a1)\n{\n  __int64 v1; // r12\n  int v2; // eax\n  __int64 v3; // r13\n  __int64 *v4; // rsi\n  int v5; // eax\n  __int64 *v6; // rdi\n  __int64 *v7; // rbx\n  signed __int64 v8; // rsi\n  __int64 *v10; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-30h]\n\n  v1 = a1;\n  v11 = __readfsqword(0x28u);\n  v2 = clock_gettime(clock_id, (struct timespec *)&v10);\n  v3 = log_monotonic_secs;\n  if ( !v2 )\n    v3 = (__int64)v10;\n  log_epoch_secs = sub_1DBB0(a1, 0LL);\n  while ( !dword_25832C )\n  {\n    if ( dword_258324 )\n    {\n      dword_258324 = 0;\n      sub_C16F(v1);\n    }\n    v4 = (__int64 *)&v10;\n    if ( !clock_gettime(clock_id, (struct timespec *)&v10) )\n    {\n      v4 = v10;\n      if ( (__int64 *)log_monotonic_secs != v10 )\n        sub_1DC80(v1, v10, v3);\n    }\n    if ( dword_258328 )\n    {\n      dword_258328 = 0;\n      sub_1D980(v1, v4);\n    }\n    if ( dword_258330 )\n    {\n      sub_C4ED(v1);\n      if ( !*(_QWORD *)(v1 + 96) && dword_258330 )\n      {\n        dword_25832C = 1;\n        return __readfsqword(0x28u) ^ v11;\n      }\n    }\n    else\n    {\n      v5 = *(_DWORD *)(v1 + 84);\n      if ( *(_DWORD *)(v1 + 88) )\n      {\n        if ( v5 < *(_DWORD *)(v1 + 76) && *(_DWORD *)(v1 + 92) )\n          sub_C0A6(v1);\n      }\n      else if ( v5 > *(_DWORD *)(v1 + 80) || !*(_DWORD *)(v1 + 92) )\n      {\n        sub_C0DA(v1);\n      }\n    }\n    v6 = (__int64 *)log_con_jqueue;\n    log_con_jqueue = (__int64)&log_con_jqueue;\n    if ( v6 == &log_con_jqueue )\n      goto LABEL_32;\n    do\n    {\n      v7 = (__int64 *)v6[104];\n      v6[104] = 0LL;\n      connection_state_machine(v6);\n      v6 = v7;\n    }\n    while ( v7 != &log_con_jqueue );\n    v8 = 0LL;\n    if ( (__int64 *)log_con_jqueue == &log_con_jqueue )\nLABEL_32:\n      v8 = 1000LL;\n    if ( (signed int)fdevent_poll(*(_QWORD *)(v1 + 24), v8) > 0 )\n      v3 = log_monotonic_secs;\n  }\n  return __readfsqword(0x28u) ^ v11;\n}\n", 
            "funcStartAddr": "0x1d000L", 
            "funcEndAddr": "0x1d216L", 
            "funcName": "sub_1D000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_header_parse_hoff(void *s, int a2, unsigned __int16 *a3)\n{\n  unsigned __int16 *v3; // r13\n  void *v4; // r12\n  unsigned int i; // ebp\n  unsigned int v6; // edx\n  unsigned __int16 v7; // dx\n  char *v8; // rax\n\n  v3 = a3;\n  v4 = s;\n  for ( i = 0; ; v3[v7] = i )\n  {\n    v8 = (char *)memchr(v4, 10, a2 - i);\n    if ( !v8 )\n      return 0LL;\n    v6 = (_DWORD)v8 - (_DWORD)v4 + 1;\n    i += v6;\n    if ( v6 <= 2 && (v6 == 1 || *(v8 - 1) == 13) )\n      break;\n    v7 = *v3 + 1;\n    *v3 = v7;\n    if ( v7 > 0x1FFEu )\n      return 0LL;\n    v4 = v8 + 1;\n  }\n  v3[*v3 + 1] = i;\n  return i;\n}\n", 
            "funcStartAddr": "0x1d220L", 
            "funcEndAddr": "0x1d2c0L", 
            "funcName": "http_header_parse_hoff"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1D2C0(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // rbx\n  __int64 (__fastcall *v5)(__int64, _QWORD); // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 920LL);\n  v3 = *(unsigned __int16 *)(v2 + 2LL * a2);\n  if ( !(_WORD)v3 )\n    return 0LL;\n  v4 = v3 + v2;\n  v5 = *(__int64 (__fastcall **)(__int64, _QWORD))v4;\n  if ( !*(_QWORD *)v4 )\n    return 0LL;\n  while ( 1 )\n  {\n    result = v5(a1, *(_QWORD *)(v4 + 8));\n    if ( (_DWORD)result )\n      break;\n    v4 += 16LL;\n    v5 = *(__int64 (__fastcall **)(__int64, _QWORD))v4;\n    if ( !*(_QWORD *)v4 )\n      return 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d2c0L", 
            "funcEndAddr": "0x1d31aL", 
            "funcName": "sub_1D2C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1D320(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // rbx\n  __int64 (__fastcall *v5)(__int64, _QWORD); // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 920);\n  v3 = *(unsigned __int16 *)(v2 + 2LL * a2);\n  if ( !(_WORD)v3 )\n    return 0LL;\n  v4 = v3 + v2;\n  v5 = *(__int64 (__fastcall **)(__int64, _QWORD))v4;\n  if ( !*(_QWORD *)v4 )\n    return 0LL;\n  while ( 1 )\n  {\n    result = v5(a1, *(_QWORD *)(v4 + 8));\n    if ( (_DWORD)result )\n      break;\n    v4 += 16LL;\n    v5 = *(__int64 (__fastcall **)(__int64, _QWORD))v4;\n    if ( !*(_QWORD *)v4 )\n      return 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d320L", 
            "funcEndAddr": "0x1d372L", 
            "funcName": "sub_1D320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1D380(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  unsigned int v4; // ecx\n  __int64 v5; // rax\n  signed __int64 v6; // rsi\n  __int64 v7; // rax\n  __int64 v8; // rcx\n  _QWORD *v9; // rbx\n  __int64 v11; // [rsp+8h] [rbp-20h]\n\n  v3 = a2;\n  v4 = *(_DWORD *)(a1 + 16);\n  if ( v4 >= *(_DWORD *)(a1 + 20) )\n  {\n    v11 = a3;\n    sub_1B445((__int64 *)a1, 16);\n  }\n  else\n  {\n    v5 = v4;\n    v6 = *(_QWORD *)a1 + 8LL * v4;\n    if ( !*(_QWORD *)v6 )\n      goto LABEL_3;\n    v11 = a3;\n    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)v6 + 16LL) + 8LL))();\n  }\n  v5 = *(unsigned int *)(a1 + 16);\n  a3 = v11;\n  v4 = *(_DWORD *)(a1 + 16);\n  v6 = *(_QWORD *)a1 + 8 * v5;\nLABEL_3:\n  v7 = v5 - a3;\n  *(_DWORD *)(a1 + 16) = v4 + 1;\n  v8 = *(_QWORD *)(a1 + 8);\n  *(_QWORD *)v6 = v3;\n  v9 = (_QWORD *)(v8 + 8 * a3);\n  if ( v7 )\n    memmove(v9 + 1, v9, 8 * v7);\n  *v9 = v3;\n  return v3;\n}\n", 
            "funcStartAddr": "0x1d380L", 
            "funcEndAddr": "0x1d411L", 
            "funcName": "sub_1D380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1D420(__int64 a1, unsigned int a2, int a3, __int64 a4, unsigned int a5)\n{\n  signed __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  int v7; // er14\n  unsigned __int64 v8; // rbx\n  __int64 v9; // rax\n  int v10; // ebp\n  int v11; // eax\n  unsigned int v13; // edx\n  unsigned int v14; // ST0C_4\n  __int64 v15; // ST00_8\n\n  v5 = 0LL;\n  v6 = a2;\n  v7 = a3;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v8 = (v5 + v6) >> 1;\n      v9 = *(_QWORD *)(a1 + 8 * v8);\n      v10 = *(_DWORD *)(v9 + 28);\n      if ( v7 | *(_DWORD *)(v9 + 28) )\n      {\n        v11 = v7;\n      }\n      else\n      {\n        v13 = *(_DWORD *)(v9 + 8) - 1;\n        if ( a5 < v13 )\n          goto LABEL_3;\n        if ( a5 > v13 )\n          goto LABEL_8;\n        v14 = a5;\n        v15 = a4;\n        v11 = sub_358F0(a4, *(_QWORD *)v9);\n        a4 = v15;\n        a5 = v14;\n      }\n      if ( v10 > v11 )\n      {\nLABEL_3:\n        v6 = (v5 + v6) >> 1;\n        if ( v8 == v5 )\n          return (unsigned int)~(_DWORD)v8;\n      }\n      else\n      {\n        if ( v10 >= v11 )\n          return (unsigned int)v8;\nLABEL_8:\n        v5 = v8 + 1;\n        if ( v8 + 1 == v6 )\n          break;\n      }\n    }\n  }\n  LODWORD(v8) = v5;\n  return (unsigned int)~(_DWORD)v8;\n}\n", 
            "funcStartAddr": "0x1d420L", 
            "funcEndAddr": "0x1d4c3L", 
            "funcName": "sub_1D420"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1D4D0(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)\n{\n  signed __int64 result; // rax\n  unsigned __int64 v5; // rbp\n  unsigned int v6; // er15\n  __int64 v7; // r13\n  signed __int64 v8; // r12\n  int v9; // eax\n  unsigned __int64 v10; // rbx\n  __int64 v11; // rax\n  unsigned int v12; // edx\n\n  result = 0xFFFFFFFFLL;\n  v5 = a2;\n  if ( a2 )\n  {\n    v6 = a4;\n    v7 = a3;\n    v8 = 0LL;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v10 = (v8 + v5) >> 1;\n        v11 = *(_QWORD *)(a1 + 8 * v10);\n        v12 = *(_DWORD *)(v11 + 8) - 1;\n        if ( v12 > v6 )\n          goto LABEL_8;\n        if ( v12 >= v6 )\n          break;\nLABEL_6:\n        v8 = v10 + 1;\n        if ( v10 + 1 == v5 )\n          return (unsigned int)~(_DWORD)v8;\n      }\n      v9 = sub_358F0(v7, *(_QWORD *)v11);\n      if ( v9 >= 0 )\n      {\n        if ( !v9 )\n          return (unsigned int)v10;\n        goto LABEL_6;\n      }\nLABEL_8:\n      v5 = (v8 + v5) >> 1;\n      if ( v8 == v10 )\n        return (unsigned int)~(_DWORD)v8;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d4d0L", 
            "funcEndAddr": "0x1d555L", 
            "funcName": "sub_1D4D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1D560(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rax\n  __int64 *v4; // rdx\n\n  v2 = a2;\n  v3 = *(unsigned int *)(a1 + 16);\n  if ( (unsigned int)v3 >= *(_DWORD *)(a1 + 20)\n    || (v4 = (__int64 *)(*(_QWORD *)a1 + 8 * v3), (a2 = *v4) == 0)\n    || *(_DWORD *)(a2 + 24) )\n  {\n    a2 = array_data_string_init(a1, a2);\n  }\n  else\n  {\n    *v4 = 0LL;\n  }\n  return sub_1D380(a1, a2, v2);\n}\n", 
            "funcStartAddr": "0x1d560L", 
            "funcEndAddr": "0x1d5b1L", 
            "funcName": "sub_1D560"
        }, 
        {
            "decompiledFuncCode": "void __fastcall array_reset_data_strings(__int64 a1)\n{\n  int v1; // eax\n  __int64 *v2; // rbp\n  signed __int64 v3; // r12\n  __int64 v4; // rbx\n  bool v5; // cf\n  bool v6; // zf\n\n  if ( a1 )\n  {\n    v1 = *(_DWORD *)(a1 + 16);\n    v2 = *(__int64 **)a1;\n    *(_DWORD *)(a1 + 16) = 0;\n    if ( v1 )\n    {\n      v3 = (signed __int64)&v2[(unsigned int)(v1 - 1) + 1];\n      do\n      {\n        v4 = *v2;\n        v5 = *(_DWORD *)(*v2 + 12) < 0x1000u;\n        v6 = *(_DWORD *)(*v2 + 12) == 4096;\n        *(_DWORD *)(*v2 + 8) = 0;\n        if ( !v5 && !v6 )\n          buffer_free_ptr(v4);\n        v5 = *(_DWORD *)(v4 + 44) < 0x1000u;\n        v6 = *(_DWORD *)(v4 + 44) == 4096;\n        *(_DWORD *)(v4 + 40) = 0;\n        if ( !v5 && !v6 )\n          buffer_free_ptr(v4 + 32);\n        ++v2;\n      }\n      while ( v2 != (__int64 *)v3 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x1d5c0L", 
            "funcEndAddr": "0x1d637L", 
            "funcName": "array_reset_data_strings"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_get_element_klen(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // rbx\n  int v4; // eax\n  __int64 result; // rax\n\n  v3 = *(_QWORD *)(a1 + 8);\n  v4 = sub_1D4D0(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), a2, a3);\n  if ( v4 < 0 )\n    result = 0LL;\n  else\n    result = *(_QWORD *)(v3 + 8LL * v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x1d640L", 
            "funcEndAddr": "0x1d66cL", 
            "funcName": "array_get_element_klen"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_get_buf_ptr_ext(__int64 a1, int a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r12\n  unsigned int v6; // ebp\n  int v7; // eax\n  __int64 v9; // rax\n  __int64 v10; // rbx\n\n  v4 = *(_QWORD *)(a1 + 8);\n  v5 = a3;\n  v6 = a4;\n  v7 = sub_1D420(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), a2, a3, a4);\n  if ( v7 >= 0 )\n    return *(_QWORD *)(v4 + 8LL * v7) + 32LL;\n  v9 = sub_1D560(a1, (unsigned int)~v7);\n  v10 = v9;\n  *(_DWORD *)(v9 + 28) = a2;\n  buffer_copy_string_len(v9, v5, v6);\n  *(_DWORD *)(v10 + 40) = 0;\n  return v10 + 32;\n}\n", 
            "funcStartAddr": "0x1d670L", 
            "funcEndAddr": "0x1d6ecL", 
            "funcName": "array_get_buf_ptr_ext"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_1D720())(void)\n{\n  __int64 (**result)(void); // rax\n\n  result = (__int64 (**)(void))&_bss_start;\n  if ( &_bss_start != &_bss_start )\n  {\n    result = &ITM_deregisterTMCloneTable;\n    if ( &ITM_deregisterTMCloneTable )\n      result = (__int64 (**)(void))ITM_deregisterTMCloneTable();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d720L", 
            "funcEndAddr": "0x1d752L", 
            "funcName": "sub_1D720"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_1D760()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x1d760L", 
            "funcEndAddr": "0x1d7a2L", 
            "funcName": "sub_1D760"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_1D7B0())(void)\n{\n  __int64 (**result)(void); // rax\n\n  if ( !byte_258168 )\n  {\n    if ( &__cxa_finalize )\n      _cxa_finalize(off_258008);\n    result = sub_1D720();\n    byte_258168 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d7b0L", 
            "funcEndAddr": "0x1d7eaL", 
            "funcName": "sub_1D7B0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_1D7F0()\n{\n  return sub_1D760();\n}\n", 
            "funcStartAddr": "0x1d7f0L", 
            "funcEndAddr": "0x1d7faL", 
            "funcName": "sub_1D7F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1D800(int a1, const __m128i *a2)\n{\n  unsigned __int64 result; // rax\n  __m128i v3; // xmm0\n\n  result = (unsigned __int64)&unk_258180;\n  if ( !a2 )\n    a2 = (const __m128i *)&unk_258180;\n  switch ( a1 )\n  {\n    case 1:\n      v3 = _mm_loadu_si128(a2);\n      dword_258324 = 1;\n      xmmword_258220 = (__int128)v3;\n      xmmword_258230 = (__int128)_mm_loadu_si128(a2 + 1);\n      xmmword_258240 = (__int128)_mm_loadu_si128(a2 + 2);\n      xmmword_258250 = (__int128)_mm_loadu_si128(a2 + 3);\n      xmmword_258260 = (__int128)_mm_loadu_si128(a2 + 4);\n      xmmword_258270 = (__int128)_mm_loadu_si128(a2 + 5);\n      xmmword_258280 = (__int128)_mm_loadu_si128(a2 + 6);\n      xmmword_258290 = (__int128)_mm_loadu_si128(a2 + 7);\n      return result;\n    case 2:\n      result = (unsigned int)dword_258330;\n      if ( !dword_258330 )\n        goto LABEL_13;\n      result = (unsigned int)dword_258334;\n      if ( dword_258334 != 2 )\n        goto LABEL_8;\n      dword_258334 = 1;\n      goto LABEL_9;\n    case 10:\n      result = (unsigned int)dword_258330;\n      if ( dword_258330 )\n        return result;\n      dword_258334 = 1;\nLABEL_13:\n      dword_258330 = 1;\n      goto LABEL_9;\n    case 14:\n      dword_258010 = 1;\n      break;\n    case 15:\nLABEL_8:\n      dword_25832C = 1;\nLABEL_9:\n      xmmword_2582A0 = (__int128)_mm_loadu_si128(a2);\n      xmmword_2582B0 = (__int128)_mm_loadu_si128(a2 + 1);\n      xmmword_2582C0 = (__int128)_mm_loadu_si128(a2 + 2);\n      xmmword_2582D0 = (__int128)_mm_loadu_si128(a2 + 3);\n      xmmword_2582E0 = (__int128)_mm_loadu_si128(a2 + 4);\n      xmmword_2582F0 = (__int128)_mm_loadu_si128(a2 + 5);\n      xmmword_258300 = (__int128)_mm_loadu_si128(a2 + 6);\n      xmmword_258310 = (__int128)_mm_loadu_si128(a2 + 7);\n      break;\n    case 17:\n      dword_258328 = 1;\n      break;\n    default:\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1d800L", 
            "funcEndAddr": "0x1d97fL", 
            "funcName": "sub_1D800"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1D980(__int64 a1)\n{\n  int v1; // eax\n  int v2; // ebx\n  int stat_loc; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-30h]\n\n  v5 = __readfsqword(0x28u);\n  do\n  {\n    while ( 1 )\n    {\n      v1 = fdevent_waitpid(-1, &stat_loc);\n      v2 = v1;\n      if ( v1 <= 0 )\n        break;\n      if ( !(unsigned int)plugins_call_handle_waitpid(a1, (unsigned int)v1, (unsigned int)stat_loc)\n        && !*(_WORD *)(a1 + 166) )\n      {\n        fdlog_pipes_waitpid_cb(v2);\n      }\n    }\n  }\n  while ( v1 == -1 && *__errno_location() == 4 );\n  return __readfsqword(0x28u) ^ v5;\n}\n", 
            "funcStartAddr": "0x1d980L", 
            "funcEndAddr": "0x1da1bL", 
            "funcName": "sub_1D980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1DA20(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // rdx\n  __int64 v3; // rbx\n  __int64 v4; // rdi\n  __int64 (__fastcall **v5)(__int64, _QWORD); // rax\n  __int64 result; // rax\n  __int16 v7; // dx\n  __int64 (__fastcall **v8)(__int64, _QWORD); // rax\n  __int64 (__fastcall *v9)(__int64, _QWORD); // rax\n  __int64 (__fastcall *v10)(__int64, _QWORD); // rax\n\n  v2 = 0LL;\n  v3 = a1;\n  if ( qword_258368 )\n    v2 = *(unsigned int *)(qword_258368 + 20);\n  if ( a2 & 1 )\n    v2 = (unsigned int)v2 & 0xFFFFFFFE;\n  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 24LL);\n  if ( *(_DWORD *)v3 != 9 && a2 & 0x2010 )\n  {\n    fdevent_fdnode_event_set(v4, qword_258368, (unsigned int)v2 & 0xFFFFDFFE);\n    v5 = *(__int64 (__fastcall ***)(__int64, _QWORD))(v3 + 824);\n    if ( v5 && (v10 = *v5) != 0LL )\n      result = v10(v3, a2 & 0xFFFFDFEF);\n    else\n      result = 1LL;\n    v7 = *(_WORD *)(v3 + 148);\n    *(_BYTE *)(v3 + 840) = 1;\n    v7 &= 0x7FFDu;\n    HIBYTE(v7) |= 0x30u;\n    *(_WORD *)(v3 + 148) = v7;\n    if ( !**(_QWORD **)(v3 + 856) )\n      *(_BYTE *)(v3 + 566) = 0;\n    if ( *(_QWORD *)(v3 + 416) < -1LL )\n      *(_QWORD *)(v3 + 416) = *(_QWORD *)(v3 + 752);\n  }\n  else\n  {\n    fdevent_fdnode_event_set(v4, qword_258368, v2);\n    v8 = *(__int64 (__fastcall ***)(__int64, _QWORD))(v3 + 824);\n    if ( v8 && (v9 = *v8) != 0LL )\n      result = v9(v3, a2);\n    else\n      result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1da20L", 
            "funcEndAddr": "0x1db37L", 
            "funcName": "sub_1DA20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1DB40(__int64 a1)\n{\n  int v1; // er12\n  unsigned int v2; // eax\n  bool v3; // zf\n  bool v4; // sf\n  __int64 v5; // rsi\n  unsigned int v6; // ebp\n  __int64 v7; // rdx\n  unsigned int v8; // eax\n\n  v1 = *(_DWORD *)(a1 + 816);\n  *(_DWORD *)(a1 + 816) = *(_DWORD *)(qword_258368 + 16);\n  v2 = qword_258360();\n  v3 = *(_BYTE *)(a1 + 840) == 0;\n  v4 = *(_BYTE *)(a1 + 840) < 0;\n  v5 = qword_258368;\n  v6 = v2;\n  *(_DWORD *)(a1 + 816) = v1;\n  v7 = v4;\n  LOBYTE(v7) = v4 || v3;\n  if ( v5 )\n  {\n    v8 = v7;\n    BYTE1(v8) |= 0x20u;\n    if ( *(_BYTE *)(v5 + 21) & 0x20 )\n      v7 = v8;\n  }\n  fdevent_fdnode_event_set(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 24LL), v5, v7);\n  return v6;\n}\n", 
            "funcStartAddr": "0x1db40L", 
            "funcEndAddr": "0x1dba8L", 
            "funcName": "sub_1DB40"
        }, 
        {
            "decompiledFuncCode": "time_t __fastcall sub_1DBB0(__int64 a1, __int64 a2)\n{\n  time_t v2; // rbp\n  time_t v3; // r12\n  time_t v4; // rbx\n  signed __int64 v5; // r13\n  int v7; // eax\n\n  v2 = log_epoch_secs;\n  v3 = time(0LL);\n  v4 = v3 - a2;\n  v5 = v3 - a2 - v2;\n  if ( v2 > v3 - a2 || v5 > 300 )\n  {\n    log_error(*(_DWORD **)(a1 + 112), \"server.c\", 263LL, (__int64)\"warning: clock jumped %lld secs\", v5);\n    v7 = config_feature_int(a1, \"server.clock-jump-restart\", 0x708u);\n    if ( v7 )\n    {\n      if ( v2 >= v4 )\n        v5 = v2 - v4;\n      if ( v7 < v5 )\n      {\n        log_error(\n          *(_DWORD **)(a1 + 112),\n          \"server.c\",\n          271LL,\n          (__int64)\"attempting graceful restart in < ~5 seconds, else hard restart\");\n        *(_QWORD *)(a1 + 384) = log_monotonic_secs + 5;\n        raise(10);\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x1dbb0L", 
            "funcEndAddr": "0x1dc7fL", 
            "funcName": "sub_1DBB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1DC80(__int64 a1, signed __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n  const char *v6; // rsi\n  __int64 v8; // rdi\n\n  v3 = a3;\n  v4 = a1;\n  v5 = a2;\n  plugins_call_handle_trigger(a1);\n  v6 = 0LL;\n  log_monotonic_secs = v5;\n  log_epoch_secs = sub_1DBB0(a1, 0LL);\n  if ( dword_258320 )\n  {\n    if ( dword_258320 < v5 - v3 && !dword_258330 )\n    {\n      a1 = *(_QWORD *)(a1 + 112);\n      v6 = \"server.c\";\n      log_error(\n        (_DWORD *)a1,\n        \"server.c\",\n        1867LL,\n        (__int64)\"[note] idle timeout %ds exceeded, initiating graceful shutdown\");\n      dword_258330 = 2;\n      if ( dword_258334 )\n      {\n        dword_258334 = 0;\n        if ( fd < -2 )\n          fd = -fd;\n        a1 = v4;\n        sub_C48C(v4);\n      }\n    }\n  }\n  if ( *(_QWORD *)(v4 + 120) + 30LL < v5 )\n  {\n    a1 = v4 + 128;\n    v6 = (_BYTE *)(&size + 3);\n    if ( getloadavg((double *)(v4 + 128), 3) != -1 )\n      *(_QWORD *)(v4 + 120) = v5;\n  }\n  if ( !(v5 & 0x3F) )\n  {\n    v8 = *(_QWORD *)(v4 + 112);\n    fdlog_flushall(v8);\n    chunkqueue_chunk_pool_clear(v8, v6);\n    request_pool_free();\n    a1 = v4;\n    connections_pool_clear(v4);\n    if ( qword_258380 )\n    {\n      a1 = qword_258378;\n      qword_258380(qword_258378);\n    }\n    if ( !*(_WORD *)(v4 + 166) )\n    {\n      a1 = v5;\n      fdlog_pipes_restart(v5);\n    }\n  }\n  stat_cache_trigger_cleanup(a1, v6);\n  config_reset_config_bytes_sec(*(_QWORD *)(v4 + 320));\n  if ( dword_258330 && !dword_25832C )\n    sub_C1AE(v4);\n  return connection_periodic_maint(v4, v5);\n}\n", 
            "funcStartAddr": "0x1dc80L", 
            "funcEndAddr": "0x1de0bL", 
            "funcName": "sub_1DC80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1DE10(__int64 a1, char *a2)\n{\n  signed int v2; // eax\n  __int64 v3; // rax\n  __int64 v4; // rbp\n  int v5; // eax\n  int v7; // edx\n  int v8; // eax\n  __int64 v9; // rax\n  signed __int64 v10; // rbp\n  bool v11; // zf\n  __int64 v12; // rcx\n  signed __int64 v13; // r12\n  __int64 v14; // r13\n  unsigned int v15; // eax\n  signed int v16; // edx\n  char *v17; // rax\n  const char *i; // rbp\n  char *v19; // rax\n  char *v20; // r14\n  const char *v21; // rax\n  const char *v22; // r13\n  char v23; // dl\n  unsigned int v24; // er12\n  unsigned int v25; // eax\n\n  v2 = *(_DWORD *)(a1 + 4);\n  if ( v2 <= 205 )\n  {\n    if ( v2 < 204 )\n    {\n      if ( v2 == 200 )\n        goto LABEL_4;\n      goto LABEL_23;\n    }\nLABEL_28:\n    http_response_body_clear(a1, 1LL);\n    a2 = byte_9 + 5;\n    http_header_response_unset(a1, 14LL, \"Content-Length\", 14LL);\n    *(_BYTE *)(a1 + 560) = 1;\n    goto LABEL_4;\n  }\n  if ( v2 == 304 )\n    goto LABEL_28;\nLABEL_23:\n  if ( (unsigned int)(v2 - 400) <= 0xC7 )\n    sub_E768(a1);\nLABEL_4:\n  v3 = *(_QWORD *)(a1 + 576);\n  if ( v3 )\n  {\n    if ( *(_DWORD *)(v3 + 16) > 1u )\n    {\n      v16 = *(_DWORD *)(v3 + 24);\n      if ( v16 )\n      {\n        if ( v16 > 399 || *(_DWORD *)(a1 + 4) <= 399 )\n        {\n          a2 = byte_9 + 1;\n          v17 = strchr(*(const char **)(v3 + 8), 10);\n          if ( v17 )\n          {\n            for ( i = v17 + 1; ; i = v20 + 1 )\n            {\n              v19 = strchr(i, 10);\n              v20 = v19;\n              if ( !v19 )\n                break;\n              v21 = (const char *)memchr(i, 58, v19 - i);\n              if ( v21 && i != v21 && *i != 9 && *i != 32 )\n              {\n                v22 = v21;\n                do\n                {\n                  do\n                    v23 = *++v22;\n                  while ( *v22 == 32 );\n                }\n                while ( v23 == 9 );\n                if ( v23 != 13 && v23 != 10 )\n                {\n                  v24 = (_DWORD)v21 - (_DWORD)i;\n                  v25 = http_header_hkey_get(i, (unsigned int)((_DWORD)v21 - (_DWORD)i));\n                  http_header_response_insert(a1, v25, i, v24, v22, (unsigned int)((_DWORD)v20 - (_DWORD)v22));\n                }\n              }\n            }\n            a2 = 0LL;\n            http_header_response_unset(a1, 0LL, \"Trailer\", 7LL);\n            *(_DWORD *)(*(_QWORD *)(a1 + 576) + 16LL) = 0;\n          }\n        }\n      }\n    }\n  }\n  if ( (unsigned int)plugins_call_handle_response_start(a1) <= 1 )\n  {\n    if ( *(_BYTE *)(a1 + 560) )\n    {\n      if ( *(_BYTE *)(a1 + 158) && (signed int)http_range_rfc7233(a1) > 399 )\n        sub_E768(a1);\n      if ( !(*(_QWORD *)(a1 + 528) & 0x1000000004000LL) )\n      {\n        v4 = *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648);\n        if ( v4 <= 0 )\n        {\n          if ( *(_DWORD *)(a1 + 24) == 1 )\n          {\nLABEL_21:\n            http_response_body_clear(a1, 1LL);\n            *(_BYTE *)(a1 + 560) = 1;\n            return 0LL;\n          }\n          v5 = *(_DWORD *)(a1 + 4);\n          if ( v5 == 304 || v5 == 204 )\n            return 0LL;\n          http_header_response_set(a1, 14LL, \"Content-Length\", 14LL, \"0\", 1LL);\n          v8 = *(_DWORD *)(a1 + 24);\n          goto LABEL_20;\n        }\n        v9 = http_header_response_set_ptr(a1, 14LL, \"Content-Length\", 14LL);\n        buffer_append_int(v9, v4);\n      }\n      if ( *(_DWORD *)(a1 + 24) == 1 )\n        goto LABEL_21;\n      return 0LL;\n    }\n    v7 = *(_DWORD *)(a1 + 28);\n    v8 = *(_DWORD *)(a1 + 24);\n    if ( v7 == 2 || *(_QWORD *)(a1 + 528) & 0x3000000004000LL )\n    {\nLABEL_20:\n      if ( v8 == 1 )\n        goto LABEL_21;\n      return 0LL;\n    }\n    if ( v8 == 5 && *(_DWORD *)(a1 + 4) == 200 )\n      return 0LL;\n    if ( v7 != 1 )\n    {\n      *(_BYTE *)(a1 + 566) = 0;\n      goto LABEL_20;\n    }\n    v10 = *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648);\n    v11 = *(_BYTE *)(a1 + 563) == 0;\n    *(_BYTE *)(a1 + 562) = 1;\n    if ( v11 )\n    {\n      if ( !v10 )\n        goto LABEL_38;\n      v13 = a1 + 624;\n      a2 = \"\\r\\n\";\n      chunkqueue_append_mem(a1 + 624, \"\\r\\n\", 2LL, 844424930148352LL);\n    }\n    else\n    {\n      v12 = *(_QWORD *)(a1 + 576);\n      if ( *(_QWORD *)v12 <= 1LL )\n      {\n        if ( *(_QWORD *)v12 == 1LL )\n        {\n          a2 = \"\\r\";\n          chunkqueue_append_mem(a1 + 624, \"\\r\", 1LL, v12);\n        }\n        else\n        {\n          if ( v10 )\n          {\n            v13 = a1 + 624;\n            a2 = \"\\r\\n\";\n            chunkqueue_append_mem(a1 + 624, \"\\r\\n\", 2LL, v12);\n            v12 = *(_QWORD *)(a1 + 576);\n            v15 = *(_DWORD *)(v12 + 16);\n            if ( v15 <= 1 )\n              goto LABEL_41;\n          }\n          else\n          {\n            v15 = *(_DWORD *)(v12 + 16);\n            v13 = a1 + 624;\n            if ( v15 <= 1 )\n              goto LABEL_38;\n          }\n          a2 = *(char **)(v12 + 8);\n          chunkqueue_append_mem(v13, a2, v15 - 1, v12);\n        }\n      }\n      else\n      {\n        v10 = v10 + *(_QWORD *)v12 - 2;\n      }\n      if ( !v10 )\n      {\nLABEL_38:\n        http_header_response_append(a1, 48LL, \"Transfer-Encoding\", 17LL, \"chunked\", 7LL);\n        v8 = *(_DWORD *)(a1 + 24);\n        goto LABEL_20;\n      }\n      v13 = a1 + 624;\n    }\nLABEL_41:\n    v14 = chunkqueue_prepend_buffer_open(v13, a2);\n    buffer_append_uint_hex_lc(v14, v10);\n    buffer_append_string_len(v14, \"\\r\\n\", 2LL);\n    chunkqueue_prepend_buffer_commit(v13, \"\\r\\n\");\n    goto LABEL_38;\n  }\n  log_error(*(_DWORD **)(a1 + 128), \"response.c\", 746LL, (__int64)\"response_start plugin failed\");\n  return 4LL;\n}\n", 
            "funcStartAddr": "0x1de10L", 
            "funcEndAddr": "0x1e2b8L", 
            "funcName": "sub_1DE10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1E2C0(__int64 a1)\n{\n  signed __int64 v1; // rax\n  bool v2; // zf\n  signed __int64 v3; // r8\n  __int64 result; // rax\n  int v5; // eax\n  int v6; // edx\n  __int64 v7; // rbp\n  int v8; // eax\n  signed int v9; // eax\n  unsigned int v10; // eax\n  _BYTE *v11; // rax\n  int v12; // eax\n  unsigned int v13; // edx\n  __int64 v14; // rax\n  __int64 v15; // rdx\n  char *v16; // r14\n  __int64 v17; // r13\n  __int64 v18; // r15\n  int v19; // eax\n  char *v20; // rax\n  __int64 v21; // rax\n  unsigned __int64 v22; // r13\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  __int64 v25; // rax\n  char *v26; // rax\n  char *v27; // r8\n  char *v28; // [rsp+0h] [rbp-48h]\n  __int64 v29; // [rsp+8h] [rbp-40h]\n\n  if ( *(_DWORD *)(a1 + 4) > 200 )\n  {\n    if ( !*(_BYTE *)(a1 + 560) )\n    {\n      http_response_body_clear(a1, 0LL);\n      return 1LL;\n    }\n    return 1LL;\n  }\n  if ( *(_DWORD *)(a1 + 336) )\n  {\nLABEL_21:\n    if ( *(_QWORD *)(a1 + 32) )\n      return 0LL;\n    v7 = stat_cache_get_entry(a1 + 328);\n    if ( v7 )\n    {\nLABEL_25:\n      if ( !*(_BYTE *)(a1 + 154) && (unsigned int)stat_cache_path_contains_symlink(a1 + 328, *(_DWORD **)(a1 + 128)) )\n      {\n        v2 = *(_BYTE *)(a1 + 163) == 0;\n        *(_DWORD *)(a1 + 4) = 403;\n        if ( !v2 )\n        {\n          sub_E6CE((_QWORD *)a1, (__int64)\"-- access denied due to symlink restriction\");\n          return 1LL;\n        }\n        return 1LL;\n      }\n      v8 = *(_DWORD *)(v7 + 96);\n      *(_QWORD *)(a1 + 792) = v7;\n      if ( (v8 & 0xF000) == 0x4000 )\n      {\n        v10 = *(_DWORD *)(a1 + 304);\n        if ( v10 <= 1 || *(_BYTE *)(*(_QWORD *)(a1 + 296) + v10 - 2) != 47 )\n        {\n          http_response_redirect_to_directory(a1, 301LL);\n          return 1LL;\n        }\n      }\n      if ( *(_BYTE *)(a1 + 163) )\n      {\n        log_error(*(_DWORD **)(a1 + 128), \"response.c\", 517LL, (__int64)\"-- handling subrequest\", v28);\n        log_error(*(_DWORD **)(a1 + 128), \"response.c\", 519LL, (__int64)\"Path         : %s\", *(_QWORD *)(a1 + 328));\n        log_error(*(_DWORD **)(a1 + 128), \"response.c\", 521LL, (__int64)\"URI          : %s\", *(_QWORD *)(a1 + 296));\n        v27 = *(char **)(a1 + 488);\n        if ( !v27 )\n          v27 = \"\";\n        log_error(*(_DWORD **)(a1 + 128), \"response.c\", 523LL, (__int64)\"Pathinfo     : %s\", v27);\n      }\n      result = plugins_call_handle_subrequest_start(a1);\n      if ( !(_DWORD)result )\n      {\n        if ( *(_QWORD *)(a1 + 32) )\n          return 0LL;\n        if ( *(_DWORD *)(a1 + 4) )\n          return 1LL;\n        v9 = *(_DWORD *)(a1 + 24);\n        if ( v9 != 6 )\n        {\n          if ( v9 <= 2 )\n          {\n            *(_DWORD *)(a1 + 4) = 403;\n            return 1LL;\n          }\n          *(_DWORD *)(a1 + 4) = 501;\n          return 1LL;\n        }\n        http_response_body_clear(a1, 0LL);\n        goto LABEL_51;\n      }\n      return result;\n    }\n    v12 = *__errno_location();\n    if ( v12 == 13 )\n    {\n      *(_DWORD *)(a1 + 4) = 403;\n    }\n    else\n    {\n      if ( v12 <= 13 )\n      {\n        if ( v12 != 2 )\n        {\nLABEL_66:\n          v2 = *(_BYTE *)(a1 + 163) == 0;\n          *(_DWORD *)(a1 + 4) = 500;\n          if ( v2 )\n            return 1LL;\nLABEL_67:\n          sub_E6CE((_QWORD *)a1, 0LL);\n          return 1LL;\n        }\n      }\n      else\n      {\n        if ( v12 == 20 )\n        {\n          v13 = *(_DWORD *)(a1 + 352);\n          v14 = *(_DWORD *)(a1 + 352) - (unsigned int)(v13 != 0);\n          if ( v13 > 1 )\n            v14 = (unsigned int)v14 - (*(_BYTE *)(*(_QWORD *)(a1 + 344) + v13 - 2) == 47);\n          v15 = *(_QWORD *)(a1 + 328);\n          v16 = (char *)(v15 + v14);\n          if ( *(_BYTE *)(v15 + v14) == 47 )\n          {\n            if ( (char *)v15 == v16 )\n            {\n              v29 = *(_QWORD *)(a1 + 328);\n              v26 = strchr((const char *)(v15 + 1), 47);\n              v16 = v26;\n              v17 = *(unsigned int *)(a1 + 336);\n              if ( !v26 )\n                goto LABEL_58;\n              v28 = v26;\n              LODWORD(v15) = v29;\n            }\n            else\n            {\n              v17 = *(unsigned int *)(a1 + 336);\n              v28 = (char *)(v15 + v14);\n            }\n            v18 = 0LL;\n            while ( 1 )\n            {\n              *(_DWORD *)(a1 + 336) = (_DWORD)v16 - v15 + 1;\n              *v16 = 0;\n              v21 = stat_cache_get_entry(a1 + 328);\n              *v16 = 47;\n              v7 = v21;\n              *(_DWORD *)(a1 + 336) = v17;\n              if ( !v21 )\n                break;\n              v19 = *(_DWORD *)(v21 + 96) & 0xF000;\n              if ( v19 != 0x4000 )\n                goto LABEL_77;\n              v20 = strchr(v16 + 1, 47);\n              if ( !v20 )\n                goto LABEL_58;\n              v15 = *(_QWORD *)(a1 + 328);\n              v28 = v16;\n              v18 = v7;\n              v16 = v20;\n            }\n            if ( v28 == v16 )\n              goto LABEL_58;\n            v7 = v18;\n            v16 = v28;\n            v19 = *(_DWORD *)(v18 + 96) & 0xF000;\nLABEL_77:\n            if ( v19 == 0x8000 )\n            {\n              v22 = *(_QWORD *)(a1 + 328) + v17 - 1 - (_QWORD)v16;\n              if ( *(_BYTE *)(a1 + 156)\n                && (v23 = *(_DWORD *)(a1 + 464) - (unsigned int)(*(_DWORD *)(a1 + 464) != 0), v22 <= v23)\n                && (v28 = (char *)(*(_QWORD *)(a1 + 456) + v23 - v22), (unsigned int)buffer_eq_icase_ssn(v28, v16, v22)) )\n              {\n                buffer_copy_string_len(a1 + 488, v28, v22);\n              }\n              else\n              {\n                buffer_copy_string_len(a1 + 488, v16, v22);\n              }\n              v24 = *(_DWORD *)(a1 + 304) - (*(_DWORD *)(a1 + 304) != 0) - v22;\n              *(_BYTE *)(*(_QWORD *)(a1 + 296) + v24) = 0;\n              *(_DWORD *)(a1 + 304) = v24 + 1;\n              v25 = *(_QWORD *)(a1 + 328);\n              *(_BYTE *)(v25 + (unsigned int)((_DWORD)v16 - v25)) = 0;\n              *(_DWORD *)(a1 + 336) = (_DWORD)v16 - v25 + 1;\n              goto LABEL_25;\n            }\n          }\nLABEL_58:\n          v2 = *(_BYTE *)(a1 + 161) == 0;\n          *(_DWORD *)(a1 + 4) = 404;\n          if ( !v2 || *(_BYTE *)(a1 + 163) )\n          {\n            sub_E6CE((_QWORD *)a1, (__int64)\"-- file not found\");\n            return 1LL;\n          }\n          return 1LL;\n        }\n        if ( v12 != 36 )\n          goto LABEL_66;\n      }\n      if ( *(_DWORD *)(a1 + 24) == 6 && *(_BYTE *)(a1 + 528) < 0 )\n      {\n        *(_DWORD *)(a1 + 4) = 200;\n        return 1LL;\n      }\n      v2 = *(_BYTE *)(a1 + 161) == 0;\n      *(_DWORD *)(a1 + 4) = 404;\n      if ( !v2 )\n        goto LABEL_67;\n    }\n    if ( !*(_BYTE *)(a1 + 163) )\n      return 1LL;\n    goto LABEL_67;\n  }\n  if ( *(_BYTE *)(a1 + 567) )\n  {\n    *(_BYTE *)(a1 + 567) = 0;\n  }\n  else\n  {\n    config_cond_cache_reset(a1);\n    config_patch_config();\n    v1 = *(_QWORD *)(a1 + 112);\n    if ( !v1 )\n      v1 = a1 + 280;\n    v2 = *(_BYTE *)(a1 + 153) == 0;\n    *(_QWORD *)(a1 + 448) = v1;\n    if ( v2 && *(_DWORD *)(a1 + 28) == 1 )\n      *(_DWORD *)(a1 + 28) = 0;\n    v3 = *(_QWORD *)(a1 + 416);\n    if ( v3 > 0 )\n    {\n      if ( *(_DWORD *)(a1 + 136) )\n      {\n        if ( v3 > (signed __int64)((unsigned __int64)*(unsigned int *)(a1 + 136) << 10) )\n        {\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 359LL, (__int64)\"request-size too long: %lld -> 413\");\n          result = sub_E3C6(a1, 413);\n          if ( (_DWORD)result )\n            return result;\n        }\n      }\n    }\n  }\n  if ( *(_BYTE *)(a1 + 163) )\n  {\n    log_error(*(_DWORD **)(a1 + 128), \"response.c\", 402LL, (__int64)\"-- parsed Request-URI\");\n    log_error(*(_DWORD **)(a1 + 128), \"response.c\", 404LL, (__int64)\"Request-URI     : %s\", *(_QWORD *)(a1 + 456));\n    log_error(*(_DWORD **)(a1 + 128), \"response.c\", 406LL, (__int64)\"URI-scheme      : %s\", *(_QWORD *)(a1 + 264));\n    log_error(*(_DWORD **)(a1 + 128), \"response.c\", 408LL, (__int64)\"URI-authority   : %s\", *(_QWORD *)(a1 + 280));\n    log_error(*(_DWORD **)(a1 + 128), \"response.c\", 410LL, (__int64)\"URI-path (clean): %s\", *(_QWORD *)(a1 + 296));\n    log_error(\n      *(_DWORD **)(a1 + 128),\n      \"response.c\",\n      412LL,\n      (__int64)\"URI-query       : %.*s\",\n      *(_DWORD *)(a1 + 320) - (unsigned int)(*(_DWORD *)(a1 + 320) != 0),\n      *(_QWORD *)(a1 + 312));\n  }\n  result = plugins_call_handle_uri_clean(a1);\n  if ( !(_DWORD)result )\n  {\n    v5 = *(_DWORD *)(a1 + 24);\n    if ( v5 == 6 )\n    {\n      v11 = *(_BYTE **)(a1 + 296);\n      if ( *v11 == 42 && !v11[1] )\n      {\nLABEL_51:\n        *(_DWORD *)(a1 + 4) = 200;\n        *(_BYTE *)(a1 + 560) = 1;\n        http_header_response_append(a1, 7LL, \"Allow\", 5LL, \"OPTIONS, GET, HEAD, POST\", 24LL);\n        return 1LL;\n      }\n    }\n    else if ( v5 == 5 )\n    {\n      if ( !*(_QWORD *)(a1 + 32) )\n        return sub_E3C6(a1, 405);\n      return 0LL;\n    }\n    *(_DWORD *)(a1 + 368) = 0;\n    result = plugins_call_handle_docroot(a1);\n    if ( !(_DWORD)result )\n    {\n      buffer_copy_string_len(\n        a1 + 376,\n        *(_QWORD *)(a1 + 296),\n        *(_DWORD *)(a1 + 304) - (unsigned int)(*(_DWORD *)(a1 + 304) != 0));\n      if ( *(_BYTE *)(a1 + 156) )\n        buffer_to_lower(a1 + 376);\n      v6 = *(_DWORD *)(a1 + 368);\n      if ( !v6 )\n      {\n        buffer_copy_string_len(\n          a1 + 360,\n          **(_QWORD **)(a1 + 104),\n          *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(a1 + 104) + 8LL) != 0));\n        v6 = *(_DWORD *)(a1 + 368);\n      }\n      buffer_copy_string_len(a1 + 344, *(_QWORD *)(a1 + 360), v6 - (unsigned int)(v6 != 0));\n      buffer_copy_path_len2(\n        a1 + 328,\n        *(_QWORD *)(a1 + 360),\n        *(_DWORD *)(a1 + 368) - (unsigned int)(*(_DWORD *)(a1 + 368) != 0),\n        *(_QWORD *)(a1 + 376),\n        *(_DWORD *)(a1 + 384) - (unsigned int)(*(_DWORD *)(a1 + 384) != 0));\n      result = plugins_call_handle_physical(a1);\n      if ( !(_DWORD)result )\n      {\n        if ( *(_BYTE *)(a1 + 163) )\n        {\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 490LL, (__int64)\"-- logical -> physical\");\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 492LL, (__int64)\"Doc-Root     : %s\", *(_QWORD *)(a1 + 360));\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 494LL, (__int64)\"Basedir      : %s\", *(_QWORD *)(a1 + 344));\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 496LL, (__int64)\"Rel-Path     : %s\", *(_QWORD *)(a1 + 376));\n          log_error(*(_DWORD **)(a1 + 128), \"response.c\", 498LL, (__int64)\"Path         : %s\", *(_QWORD *)(a1 + 328));\n        }\n        goto LABEL_21;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1e2c0L", 
            "funcEndAddr": "0x1ec4cL", 
            "funcName": "sub_1E2C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall http_response_write_header(__int64 a1, signed __int64 a2)\n{\n  int v2; // ecx\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  const char *v5; // r8\n  signed __int64 v6; // r9\n  __int64 v7; // r12\n  __int64 v8; // rax\n  _QWORD *v9; // rbx\n  const char *v10; // rsi\n  __int64 v11; // r14\n  __int64 v12; // r13\n  unsigned int v13; // ebx\n  int v14; // er9\n  unsigned int n; // ST1C_4\n  _WORD *v16; // rax\n  _WORD *v17; // rbp\n  _WORD *v18; // rbp\n  __int64 v19; // rax\n  __int64 v20; // rax\n  const char *v21; // rsi\n  __int64 v22; // r8\n  bool v23; // zf\n  unsigned __int64 result; // rax\n  int v25; // ST1C_4\n  int v26; // eax\n  __int64 v27; // r13\n  __int64 v28; // r14\n  unsigned int v29; // ebp\n  __int64 v30; // rax\n  size_t n_4; // [rsp+10h] [rbp-48h]\n  signed __int64 v32; // [rsp+18h] [rbp-40h]\n\n  v2 = *(unsigned __int16 *)(a1 + 142);\n  v3 = *(_QWORD *)(a1 + 48);\n  *(_DWORD *)(v3 + 1116) = v2;\n  if ( !(_WORD)v2\n    || *(_DWORD *)(v3 + 1112) > (unsigned int)*(unsigned __int16 *)(a1 + 140)\n    || (v4 = *(_QWORD *)(a1 + 416)) != 0\n    && v4 != *(_QWORD *)(a1 + 752)\n    && (!*(_QWORD *)(a1 + 32) || !(*(_BYTE *)(a1 + 148) & 3)) )\n  {\n    v23 = (*(_BYTE *)(a1 + 534) & 2) == 0;\n    *(_BYTE *)(a1 + 566) = 0;\n    if ( !v23 && *(_DWORD *)(a1 + 28) == 1 )\n      goto LABEL_38;\n    goto LABEL_41;\n  }\n  if ( *(_BYTE *)(a1 + 534) & 2 && *(_DWORD *)(a1 + 28) == 1 )\n  {\nLABEL_38:\n    v6 = 7LL;\n    v5 = \"upgrade\";\n    goto LABEL_11;\n  }\n  if ( *(_BYTE *)(a1 + 566) <= 0 )\n  {\nLABEL_41:\n    v6 = 5LL;\n    v5 = \"close\";\n    goto LABEL_11;\n  }\n  if ( !*(_DWORD *)(a1 + 28) )\n  {\n    v5 = \"keep-alive\";\n    v6 = 10LL;\nLABEL_11:\n    a2 = 12LL;\n    http_header_response_set(a1, 12LL, \"Connection\", 10LL, v5, v6);\n  }\n  if ( *(_DWORD *)(a1 + 4) == 304 && *(_BYTE *)(a1 + 529) & 0x20 )\n  {\n    a2 = 13LL;\n    http_header_response_unset(a1, 13LL, \"Content-Encoding\", 16LL);\n  }\n  v32 = a1 + 624;\n  v7 = chunkqueue_prepend_buffer_open(a1 + 624, a2);\n  v8 = *(_QWORD *)(a1 + 48);\n  v9 = *(_QWORD **)(v8 + 848);\n  if ( v9 != (_QWORD *)(a1 + 624) )\n  {\n    v27 = v9[2] - v9[3];\n    v28 = *(_QWORD *)(a1 + 128);\n    *(_QWORD *)(v8 + 848) = v32;\n    v29 = v27;\n    v30 = buffer_string_prepare_append(v7, (unsigned int)v27);\n    if ( (signed int)chunkqueue_read_data(v9, v30, (unsigned int)v27, v28) < 0 )\n      v29 = 0;\n    *(_BYTE *)(*(_QWORD *)v7 + v29) = 0;\n    *(_DWORD *)(v7 + 8) = v29 + 1;\n    chunkqueue_free(v9);\n  }\n  v10 = \"HTTP/1.0 \";\n  if ( *(_DWORD *)(a1 + 28) == 1 )\n    v10 = \"HTTP/1.1 \";\n  buffer_append_string_len(v7, v10, 9LL);\n  http_status_append(v7, *(unsigned int *)(a1 + 4));\n  n_4 = *(unsigned int *)(a1 + 552);\n  if ( *(_DWORD *)(a1 + 552) )\n  {\n    v11 = 0LL;\n    do\n    {\n      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v11);\n      v13 = *(_DWORD *)(v12 + 8) - (*(_DWORD *)(v12 + 8) != 0);\n      v14 = *(_DWORD *)(v12 + 40) - (*(_DWORD *)(v12 + 40) != 0);\n      if ( *(_DWORD *)(v12 + 40) != (*(_DWORD *)(v12 + 40) != 0) && *(_DWORD *)(v12 + 8) != (*(_DWORD *)(v12 + 8) != 0) )\n      {\n        if ( (**(_BYTE **)v12 & 0xDF) != 88\n          || (v25 = *(_DWORD *)(v12 + 40) - (*(_DWORD *)(v12 + 40) != 0),\n              v26 = http_response_omit_header(a1, *(_QWORD **)(*(_QWORD *)(a1 + 536) + 8 * v11)),\n              v14 = v25,\n              !v26) )\n        {\n          n = v14;\n          v16 = (_WORD *)buffer_extend(v7, v14 + v13 + 4);\n          *v16 = 2573;\n          v17 = v16;\n          memcpy(v16 + 1, *(const void **)v12, v13);\n          v18 = (_WORD *)((char *)v17 + v13 + 2);\n          *v18 = 8250;\n          memcpy(v18 + 1, *(const void **)(v12 + 32), n);\n        }\n      }\n      ++v11;\n    }\n    while ( n_4 != v11 );\n  }\n  v19 = *(_QWORD *)(a1 + 528);\n  if ( !(v19 & 0x100000) )\n  {\n    if ( qword_258388 != log_epoch_secs )\n    {\n      qword_258388 = log_epoch_secs;\n      http_date_time_to_str(&aDate[8], 0x20uLL);\n    }\n    buffer_append_string_len(v7, aDate, 37LL);\n    v19 = *(_QWORD *)(a1 + 528);\n  }\n  if ( !_bittest64(&v19, 0x2Bu) )\n  {\n    v20 = *(_QWORD *)(a1 + 120);\n    if ( v20 )\n      buffer_append_str2(\n        v7,\n        \"\\r\\nServer: \",\n        10LL,\n        *(_QWORD *)v20,\n        *(_DWORD *)(v20 + 8) - (unsigned int)(*(_DWORD *)(v20 + 8) != 0));\n  }\n  v21 = \"\\r\\n\\r\\n\";\n  buffer_append_string_len(v7, \"\\r\\n\\r\\n\", 4LL);\n  v22 = *(_DWORD *)(v7 + 8) - (unsigned int)(*(_DWORD *)(v7 + 8) != 0);\n  v23 = *(_BYTE *)(a1 + 164) == 0;\n  *(_DWORD *)(a1 + 520) = v22;\n  if ( !v23 )\n  {\n    v21 = \"response.c\";\n    log_error_multiline(\n      *(_DWORD **)(a1 + 128),\n      \"response.c\",\n      164LL,\n      *(const char **)v7,\n      v22,\n      (__int64)\"fd:%d resp: \",\n      *(unsigned int *)(*(_QWORD *)(a1 + 48) + 816LL));\n  }\n  result = chunkqueue_prepend_buffer_commit(v32, v21);\n  if ( *(_BYTE *)(a1 + 560) && *(_BYTE *)(a1 + 529) & 0x40 )\n  {\n    result = *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) - *(unsigned int *)(a1 + 520) - 1LL;\n    if ( result <= 0x3FFE )\n      result = chunkqueue_small_resp_optim(v32);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1ec50L", 
            "funcEndAddr": "0x1f0afL", 
            "funcName": "http_response_write_header"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_response_handler(__int64 a1, char *a2)\n{\n  char **v2; // rax\n  signed int v3; // eax\n  signed int v4; // eax\n\n  while ( 1 )\n  {\n    v2 = *(char ***)(a1 + 32);\n    if ( v2 )\n      goto LABEL_2;\n    v3 = sub_1E2C0(a1);\n    if ( !v3 )\n    {\n      v2 = *(char ***)(a1 + 32);\n      if ( !v2 )\n        goto LABEL_6;\nLABEL_2:\n      a2 = *v2;\n      v3 = ((__int64 (__fastcall *)(__int64, char *))v2[8])(a1, *v2);\n    }\n    if ( v3 == 2 )\n      goto LABEL_18;\n    if ( v3 <= 2 )\n    {\n      if ( v3 < 0 )\n        return 4LL;\n      goto LABEL_6;\n    }\n    if ( v3 != 3 )\n      return 4LL;\n    if ( !*(_BYTE *)(a1 + 560) && (!*(_BYTE *)(a1 + 561) || !(*(_BYTE *)(a1 + 150) & 3)) )\n      return 3LL;\nLABEL_6:\n    v4 = *(_DWORD *)(a1 + 4);\n    if ( v4 )\n    {\n      if ( v4 > 399 )\n        goto LABEL_17;\n    }\n    else\n    {\n      *(_DWORD *)(a1 + 4) = 200;\n    }\n    if ( !*(_DWORD *)(a1 + 616) )\n      return sub_1DE10(a1, a2);\nLABEL_17:\n    if ( !(unsigned int)sub_E4BC(a1) )\n      return sub_1DE10(a1, a2);\nLABEL_18:\n    sub_E62C(a1);\n  }\n}\n", 
            "funcStartAddr": "0x1f0b0L", 
            "funcEndAddr": "0x1f192L", 
            "funcName": "http_response_handler"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1F1C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  _QWORD *v3; // rbp\n  __int64 v4; // r13\n  int v5; // eax\n  _QWORD *v6; // rcx\n  __int64 v7; // rdx\n  signed __int64 result; // rax\n  __int64 v9; // rax\n\n  v2 = a2;\n  v3 = *(_QWORD **)(a2 + 848);\n  v4 = v3[3];\n  v5 = (*(__int64 (__fastcall **)(__int64, _QWORD, signed __int64))(a2 + 888))(a2, *(_QWORD *)(a2 + 848), 0x40000LL);\n  v6 = *(_QWORD **)(a1 + 184);\n  v7 = v3[3] - v4;\n  *(_QWORD *)(v2 + 864) += v7;\n  *(_QWORD *)(v2 + 872) += v7;\n  if ( v6 )\n    *v6 += v7;\n  if ( v5 < 0 )\n  {\n    *(_DWORD *)a1 = 9;\n    result = 0LL;\n  }\n  else\n  {\n    if ( *v3 )\n    {\n      *(_BYTE *)(a2 + 841) = 0;\n      if ( v3 == (_QWORD *)(a1 + 624) )\n      {\n        v9 = chunkqueue_init(0LL);\n        *(_QWORD *)(a2 + 848) = v9;\n        chunkqueue_append_chunkqueue(v9, v3);\n      }\n    }\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1f1c0L", 
            "funcEndAddr": "0x1f267L", 
            "funcName": "sub_1F1C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1F270(void *ptr)\n{\n  char *v1; // rbx\n  char *v2; // rdi\n  char *v3; // rdi\n\n  v1 = (char *)ptr;\n  request_reset();\n  v2 = (char *)*((_QWORD *)ptr + 106);\n  *((_QWORD *)v1 + 74) = 0LL;\n  *((_QWORD *)v1 + 73) = 0LL;\n  v1[840] = 1;\n  *((_QWORD *)v1 + 108) = 0LL;\n  *((_QWORD *)v1 + 109) = 0LL;\n  *((_QWORD *)v1 + 110) = 0LL;\n  if ( v2 != v1 + 624 )\n    chunkqueue_free(v2);\n  v3 = (char *)*((_QWORD *)v1 + 107);\n  if ( v3 != v1 + 680 )\n    chunkqueue_free(v3);\n  request_free_data((__int64)v1);\n  free(*((void **)v1 + 116));\n  free(*((void **)v1 + 132));\n  free(v1);\n}\n", 
            "funcStartAddr": "0x1f270L", 
            "funcEndAddr": "0x1f314L", 
            "funcName": "sub_1F270"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_1F320(_QWORD *a1)\n{\n  _QWORD *v1; // rdx\n  signed __int64 result; // rax\n  __int64 v3; // r9\n  int v4; // ecx\n\n  v1 = (_QWORD *)*a1;\n  result = 0LL;\n  if ( *a1 )\n  {\n    v3 = v1[3];\n    v4 = *(_DWORD *)(v1[2] + 8LL);\n    while ( 1 )\n    {\n      v1 = (_QWORD *)*v1;\n      if ( !v1 )\n        break;\n      if ( *(_DWORD *)(v1[2] + 8LL) - (*(_DWORD *)(v1[2] + 8LL) != 0) != *((_DWORD *)v1 + 6) )\n      {\n        chunkqueue_compact_mem(\n          a1,\n          v4\n        - (_DWORD)v3\n        - (v4 != 0)\n        + *(_DWORD *)(v1[2] + 8LL)\n        - (unsigned int)(*(_DWORD *)(v1[2] + 8LL) != 0)\n        - *((_DWORD *)v1 + 6));\n        return 1LL;\n      }\n    }\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1f320L", 
            "funcEndAddr": "0x1f38bL", 
            "funcName": "sub_1F320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1FD80(__int64 a1)\n{\n  __int64 v1; // rbx\n  int v2; // eax\n  __int64 v3; // rbp\n  __int64 v4; // rdi\n  __int64 v5; // rsi\n  __int64 v6; // rdi\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = *(_DWORD *)(a1 + 816);\n  if ( v2 < 0 )\n    *(_DWORD *)(a1 + 816) = -v2;\n  plugins_call_handle_connection_close();\n  v3 = *(_QWORD *)(a1 + 912);\n  request_reset_ex(a1);\n  v4 = *(_QWORD *)(a1 + 856);\n  *(_DWORD *)v1 = 0;\n  chunkqueue_reset(v4);\n  *(_BYTE *)(v1 + 842) = 0;\n  v5 = *(_QWORD *)(v1 + 824);\n  v6 = *(_QWORD *)(v3 + 24);\n  *(_WORD *)(v1 + 844) = 0;\n  *(_DWORD *)(v1 + 1112) = 0;\n  fdevent_fdnode_event_del(v6);\n  fdevent_unregister(*(_QWORD *)(v3 + 24), *(unsigned int *)(v1 + 816));\n  LODWORD(v6) = *(_DWORD *)(v1 + 816);\n  *(_QWORD *)(v1 + 824) = 0LL;\n  if ( close(v6) )\n    log_perror(\n      *(_DWORD **)(v1 + 128),\n      \"connections.c\",\n      101LL,\n      (__int64)\"(warning) close: %d\",\n      *(unsigned int *)(v1 + 816));\n  else\n    --*(_DWORD *)(v3 + 84);\n  if ( *(_BYTE *)(v1 + 167) )\n    log_error(\n      *(_DWORD **)(v1 + 128),\n      \"connections.c\",\n      105LL,\n      (__int64)\"connection closed for fd %d\",\n      *(unsigned int *)(v1 + 816));\n  v7 = *(_QWORD *)(v1 + 1120);\n  *(_DWORD *)(v1 + 816) = -1;\n  v8 = *(_QWORD *)(v1 + 1128);\n  if ( v7 )\n  {\n    *(_QWORD *)(v7 + 1128) = v8;\n    v8 = *(_QWORD *)(v1 + 1128);\n  }\n  if ( v8 )\n    *(_QWORD *)(v8 + 1120) = v7;\n  else\n    *(_QWORD *)(v3 + 96) = v7;\n  result = *(_QWORD *)(v3 + 104);\n  *(_QWORD *)(v1 + 1128) = 0LL;\n  *(_QWORD *)(v1 + 1120) = result;\n  *(_QWORD *)(v3 + 104) = v1;\n  ++*(_DWORD *)(v3 + 92);\n  return result;\n}\n", 
            "funcStartAddr": "0x1fd80L", 
            "funcEndAddr": "0x1fee8L", 
            "funcName": "sub_1FD80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1FEF0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r14\n  _QWORD *v3; // r12\n  char v4; // r13\n  unsigned int v5; // er15\n  unsigned int v6; // ebp\n  __int64 v7; // rax\n  signed __int64 v8; // rdi\n  void *v9; // rdi\n  unsigned int v10; // eax\n  bool v11; // zf\n  signed __int64 v12; // rbp\n  __int64 result; // rax\n  __int64 v14; // r9\n  unsigned __int64 v15; // rsi\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  int v18; // edi\n  __int64 v19; // ST28_8\n  int v20; // eax\n  unsigned __int8 v21; // al\n  const char *v22; // r8\n  char v23; // [rsp+16h] [rbp-4052h]\n  char v24; // [rsp+17h] [rbp-4051h]\n  __int64 v25; // [rsp+18h] [rbp-4050h]\n  unsigned __int16 v26; // [rsp+20h] [rbp-4048h]\n  unsigned __int16 v27; // [rsp+22h] [rbp-4046h]\n  __int16 v28; // [rsp+24h] [rbp-4044h]\n  unsigned __int64 v29; // [rsp+4028h] [rbp-40h]\n\n  v1 = a1;\n  v2 = *(_QWORD *)(a1 + 856);\n  v29 = __readfsqword(0x28u);\n  v3 = *(_QWORD **)v2;\n  if ( *(_DWORD *)(a1 + 1112) <= 1u )\n  {\n    v24 = 0;\n    v23 = 0;\n    v4 = 0;\n  }\n  else if ( *(_QWORD *)(a1 + 880) == *(_QWORD *)(a1 + 592) )\n  {\n    if ( v3 )\n    {\n      *(_BYTE *)(a1 + 840) = 1;\n      v24 = 1;\n      v4 = 1;\n      v23 = 1;\n    }\n    else\n    {\n      v24 = 1;\n      v23 = 0;\n      v4 = 1;\n    }\n  }\n  else\n  {\n    v24 = 1;\n    v23 = 0;\n    v4 = 0;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( 1 )\n  {\n    if ( !v3 )\n    {\n      v14 = v6;\n      goto LABEL_49;\n    }\n    v7 = v3[2];\n    v8 = v3[3];\n    v6 = *(_DWORD *)(v7 + 8) - (*(_DWORD *)(v7 + 8) != 0) - v8;\n    if ( *(_DWORD *)(v7 + 8) - (*(_DWORD *)(v7 + 8) != 0) == (_DWORD)v8 )\n    {\n      v14 = 0LL;\n      goto LABEL_32;\n    }\n    if ( v8 > 0xFFFF )\n    {\n      chunkqueue_compact_mem_offset(v2);\n      v8 = v3[3];\n      v7 = v3[2];\n    }\n    v27 = v8;\n    v9 = (void *)(*(_QWORD *)v7 + v8);\n    v26 = 1;\n    v10 = http_header_parse_hoff(v9, v6, &v26);\n    v5 = v10;\n    if ( !v10 )\n      v10 = v6;\n    if ( v10 > *(_DWORD *)(v1 + 92) || v26 > 0x1FFEu )\n    {\n      v12 = 1LL;\n      log_error(\n        *(_DWORD **)(v1 + 128),\n        \"connections.c\",\n        689LL,\n        (__int64)&off_4987E,\n        \"oversized request-header -> sending Status 431\");\n      *(_DWORD *)(v1 + 4) = 431;\n      *(_BYTE *)(v1 + 566) = 0;\n      goto LABEL_27;\n    }\n    if ( !v5 )\n      break;\n    if ( v26 > 1u )\n    {\n      if ( v4 )\n      {\n        if ( *(_QWORD *)(v1 + 880) <= *(_QWORD *)(v1 + 592) )\n          goto LABEL_87;\n        v11 = *(_BYTE *)(v1 + 152) == 0;\n        *(_QWORD *)(v1 + 600) = log_epoch_secs;\n        if ( !v11 )\n          goto LABEL_68;\n        if ( v3 )\n        {\nLABEL_87:\n          if ( v23 )\nLABEL_20:\n            *(_QWORD *)(v1 + 1080) = log_monotonic_secs;\n        }\n      }\n      goto LABEL_21;\n    }\n    if ( !v24 )\n      break;\n    if ( v6 == v5 )\n    {\n      v14 = v6;\n      v5 = v6;\nLABEL_32:\n      if ( *v3 )\n        goto LABEL_33;\n      goto LABEL_49;\n    }\n    v16 = *(_QWORD *)v3[2];\n    v17 = v3[3];\n    v18 = *(char *)(v16 + v5 + v17);\n    if ( v18 == 13 || v18 == 10 )\n      goto LABEL_73;\n    v6 = 0;\n    chunkqueue_mark_written(v2, v5);\n    v3 = *(_QWORD **)v2;\n    v14 = 0LL;\n    v24 = 0;\n    if ( *(_QWORD *)v2 )\n      goto LABEL_32;\nLABEL_49:\n    if ( *(_BYTE *)(v1 + 840) > 0 )\n    {\n      v19 = v14;\n      *(_QWORD *)(v1 + 1080) = log_monotonic_secs;\n      v20 = (*(__int64 (__fastcall **)(__int64, __int64, signed __int64))(v1 + 896))(v1, v2, 0x40000LL);\n      v14 = v19;\n      if ( v20 )\n        *(_DWORD *)v1 = 9;\n      if ( *(_DWORD *)(v1 + 28) == 2 )\n      {\nLABEL_42:\n        if ( !v4\n          || *(_QWORD *)(v1 + 592) >= *(_QWORD *)(v1 + 880)\n          || (v11 = *(_BYTE *)(v1 + 152) == 0, *(_QWORD *)(v1 + 600) = log_epoch_secs, v11) )\n        {\n          v12 = 0LL;\n          goto LABEL_27;\n        }\n        v3 = 0LL;\nLABEL_68:\n        clock_gettime(0, (struct timespec *)(v1 + 600));\n        if ( v3 && v23 )\n          goto LABEL_20;\n        if ( !v3 )\n        {\n          v12 = 0LL;\n          goto LABEL_27;\n        }\nLABEL_21:\n        v12 = *(_QWORD *)v3[2] + v27;\n        if ( *(_DWORD *)(v1 + 1112) > 1u )\n        {\n          request_reset_ex(v1);\n        }\n        else if ( !*(_BYTE *)(v1 + 842)\n               && *(_BYTE *)(v1 + 160)\n               && v26 == 2\n               && v28 == 16\n               && *(_BYTE *)v12 == 80\n               && *(_BYTE *)(v12 + 1) == 82\n               && *(_BYTE *)(v12 + 2) == 73\n               && *(_BYTE *)(v12 + 3) == 32 )\n        {\n          *(_DWORD *)(v1 + 28) = 2;\n          v12 = 0LL;\n          goto LABEL_27;\n        }\n        v11 = *(_BYTE *)(v1 + 162) == 0;\n        *(_DWORD *)(v1 + 224) = v5;\n        if ( v11 )\n          goto LABEL_24;\n        goto LABEL_79;\n      }\n    }\nLABEL_33:\n    v3 = *(_QWORD **)v2;\n    if ( *(_QWORD *)(v2 + 8) != *(_QWORD *)v2 && v14 )\n    {\n      v25 = v14;\n      v15 = (v14 + 0x3FFF) & 0xFFFFFFFFFFFFC000LL;\n      if ( v15 - v14 < 0x401 )\n        v15 += 0x4000LL;\n      if ( *(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 24) <= v15 )\n        v15 = *(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 24);\n      chunkqueue_compact_mem(v2, v15);\n      v3 = *(_QWORD **)v2;\n      v14 = v25;\n    }\n    if ( !v3\n      || v3[3] + v14 >= (unsigned __int64)(*(_DWORD *)(v3[2] + 8LL) - (unsigned int)(*(_DWORD *)(v3[2] + 8LL) != 0)) )\n    {\n      goto LABEL_42;\n    }\n  }\n  v16 = *(_QWORD *)v3[2];\n  v17 = v3[3];\nLABEL_73:\n  v21 = *(_BYTE *)(v16 + v17);\n  if ( v21 > 0x1Fu )\n  {\n    v14 = v6;\n    goto LABEL_32;\n  }\n  v22 = \"invalid request-line -> sending Status 400\";\n  v12 = 1LL;\n  if ( v21 == 22 )\n    v22 = \"unexpected TLS ClientHello on clear port\";\n  log_error(*(_DWORD **)(v1 + 128), \"connections.c\", 717LL, (__int64)\"%s (%s)\", v22, *(_QWORD *)(v1 + 1056));\n  *(_DWORD *)(v1 + 4) = 400;\n  *(_BYTE *)(v1 + 566) = 0;\nLABEL_27:\n  while ( 1 )\n  {\n    result = (unsigned int)v12;\n    if ( __readfsqword(0x28u) == v29 )\n      break;\nLABEL_79:\n    log_error_multiline(\n      *(_DWORD **)(v1 + 128),\n      \"connections.c\",\n      770LL,\n      (const char *)v12,\n      v5,\n      (__int64)\"fd:%d rqst: \",\n      *(unsigned int *)(v1 + 816));\nLABEL_24:\n    http_request_headers_process(v1, v12, &v26, *(unsigned __int16 *)(v1 + 846));\n    chunkqueue_mark_written(v2, *(unsigned int *)(v1 + 224));\n    if ( *(_BYTE *)(v1 + 238) & 2\n      && (v12 = *(unsigned int *)(v1 + 4), !(_DWORD)v12)\n      && (unsigned int)h2_check_con_upgrade_h2c(v1) )\n    {\n      *(_DWORD *)(v1 + 56) = 258;\n    }\n    else\n    {\n      v12 = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1fef0L", 
            "funcEndAddr": "0x204a4L", 
            "funcName": "sub_1FEF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_204B0(__int64 a1)\n{\n  __int64 v1; // r12\n  __int64 v2; // rax\n  int v3; // eax\n  __int64 _0; // [rsp+0h] [rbp+0h]\n  unsigned __int64 vars4008; // [rsp+4008h] [rbp+4008h]\n\n  v1 = *(unsigned __int16 *)(a1 + 944);\n  vars4008 = __readfsqword(0x28u);\n  while ( 1 )\n  {\n    do\n      v2 = fdevent_socket_read_discard(*(_DWORD *)(a1 + 816), &_0, 0x4000uLL);\n    while ( v2 > 0 );\n    if ( !v2 )\n      break;\n    v3 = *__errno_location();\n    if ( v3 != 4 )\n    {\n      if ( v3 == 11 )\n        return __readfsqword(0x28u) ^ vars4008;\n      break;\n    }\n  }\n  *(_QWORD *)(a1 + 1088) = log_monotonic_secs - 6;\n  return __readfsqword(0x28u) ^ vars4008;\n}\n", 
            "funcStartAddr": "0x204b0L", 
            "funcEndAddr": "0x2054bL", 
            "funcName": "sub_204B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_205D0(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rdx\n  signed __int64 result; // rax\n  signed __int64 v4; // rdx\n\n  v1 = *(unsigned int *)(a1 + 176);\n  v2 = *(unsigned int *)(a1 + 172);\n  if ( (_DWORD)v1 )\n  {\n    result = v1 - **(_QWORD **)(a1 + 184);\n    if ( result >= 0x40000 )\n      result = 0x40000LL;\n    if ( !(_DWORD)v2 )\n    {\n      if ( result < 0 )\n        result = 0LL;\n      return result;\n    }\n  }\n  else\n  {\n    result = 0x40000LL;\n    if ( !(_DWORD)v2 )\n      return result;\n  }\n  v4 = v2 - *(_QWORD *)(a1 + 872);\n  if ( result > v4 )\n    result = v4;\n  if ( result < 0 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x205d0L", 
            "funcEndAddr": "0x20635L", 
            "funcName": "sub_205D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __usercall sub_20640@<rax>(__int64 a1@<rbx>, __int64 a2@<rdi>, __int64 a3@<rsi>, __int64 a4@<r12>)\n{\n  __int64 ***v4; // rbp\n  signed __int64 v5; // r14\n  signed __int64 result; // rax\n  __int64 **v7; // rdx\n  __int64 **v8; // r13\n  __int64 *v9; // rax\n  signed int v10; // er14\n  _QWORD *v11; // rdx\n  __int64 v12; // rax\n  int v13; // edi\n  int v14; // edi\n  int optval; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v16; // [rsp+8h] [rbp-30h]\n\n  v16 = __readfsqword(0x28u);\n  if ( *(_BYTE *)(a3 + 841) <= 0 )\n    goto LABEL_6;\n  a4 = a2;\n  a1 = a3;\n  v4 = *(__int64 ****)(a3 + 848);\n  *(_QWORD *)(a3 + 1096) = log_monotonic_secs;\n  v5 = sub_205D0(a3);\n  if ( !v5 )\n  {\n    *(_BYTE *)(a3 + 843) = 1;\n    goto LABEL_4;\n  }\n  v7 = *v4;\n  v8 = v4[3];\n  optval = 0;\n  v9 = *v7;\n  if ( *v7 && !*((_DWORD *)v7 + 2) )\n  {\n    while ( !*((_DWORD *)v9 + 2) )\n    {\n      v9 = (__int64 *)*v9;\n      if ( !v9 )\n      {\n        if ( v5 <= 0x4000 || !*(_BYTE *)(a3 + 842) )\n          goto LABEL_17;\n        break;\n      }\n    }\n    if ( (**(_WORD **)(a3 + 1072) & 0xFFF7) == 2 )\n    {\n      v14 = *(_DWORD *)(a3 + 816);\n      optval = 1;\n      setsockopt(v14, 6, 3, &optval, 4u);\n    }\n  }\nLABEL_17:\n  v10 = (*(__int64 (__fastcall **)(__int64, __int64 ***, signed __int64))(a3 + 888))(a3, v4, v5);\n  if ( v10 >= 0 )\n    v10 = *v4 != 0LL;\n  if ( optval )\n  {\n    v13 = *(_DWORD *)(a3 + 816);\n    optval = 0;\n    setsockopt(v13, 6, 3, &optval, 4u);\n  }\n  v11 = *(_QWORD **)(a3 + 184);\n  v12 = (char *)v4[3] - (char *)v8;\n  *(_QWORD *)(a3 + 864) += v12;\n  *(_QWORD *)(a3 + 872) += v12;\n  if ( v11 )\n    *v11 += v12;\n  if ( v10 == -1 )\n    goto LABEL_32;\n  if ( v10 <= -1 )\n  {\n    if ( v10 == -2 )\n      goto LABEL_31;\n    goto LABEL_6;\n  }\n  if ( v10 )\n  {\n    if ( v10 == 1 )\n    {\n      v4 = *(__int64 ****)(a3 + 848);\nLABEL_4:\n      if ( v4[3] )\n        *(_BYTE *)(a3 + 841) = 0;\n    }\nLABEL_6:\n    result = 7LL;\n    goto LABEL_7;\n  }\n  if ( !*(_BYTE *)(a4 + 560) )\n    goto LABEL_6;\n  *(_DWORD *)a4 = 8;\n  result = 8LL;\nLABEL_7:\n  while ( __readfsqword(0x28u) != v16 )\n  {\nLABEL_32:\n    log_error(\n      *(_DWORD **)(a4 + 128),\n      \"connections.c\",\n      437LL,\n      (__int64)\"connection closed: write failed on fd %d\",\n      *(unsigned int *)(a1 + 816));\nLABEL_31:\n    *(_DWORD *)a4 = 9;\n    result = 9LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x20640L", 
            "funcEndAddr": "0x2087dL", 
            "funcName": "sub_20640"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall connection_send_1xx(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  unsigned int v3; // er15\n  __int64 v4; // rbp\n  unsigned int v5; // er14\n  signed __int64 result; // rax\n  __int64 v7; // [rsp+8h] [rbp-40h]\n\n  v7 = *(_QWORD *)(a2 + 848);\n  v2 = chunkqueue_append_buffer_open(*(_QWORD *)(a2 + 848));\n  buffer_copy_string_len(v2, \"HTTP/1.1 \", 9LL);\n  http_status_append(v2, *(unsigned int *)(a1 + 4));\n  if ( *(_DWORD *)(a1 + 552) )\n  {\n    v3 = 0;\n    do\n    {\n      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + 8LL * v3);\n      v5 = *(_DWORD *)(v4 + 40) - (*(_DWORD *)(v4 + 40) != 0);\n      if ( *(_DWORD *)(v4 + 8) != (*(_DWORD *)(v4 + 8) != 0) && *(_DWORD *)(v4 + 40) != (*(_DWORD *)(v4 + 40) != 0) )\n      {\n        buffer_append_str2(\n          v2,\n          \"\\r\\n\",\n          2LL,\n          *(_QWORD *)v4,\n          *(_DWORD *)(v4 + 8) - (unsigned int)(*(_DWORD *)(v4 + 8) != 0));\n        buffer_append_str2(v2, \": \", 2LL, *(_QWORD *)(v4 + 32), v5);\n      }\n      ++v3;\n    }\n    while ( *(_DWORD *)(a1 + 552) > v3 );\n  }\n  buffer_append_string_len(v2, \"\\r\\n\\r\\n\", 4LL);\n  chunkqueue_append_buffer_commit(v7, \"\\r\\n\\r\\n\");\n  if ( *(_BYTE *)(a2 + 843) )\n    result = 1LL;\n  else\n    result = sub_1F1C0(a1, a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x20880L", 
            "funcEndAddr": "0x209b1L", 
            "funcName": "connection_send_1xx"
        }, 
        {
            "decompiledFuncCode": "void __fastcall connections_pool_clear(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *i; // rdi\n\n  v1 = a1;\n  for ( i = *(_QWORD **)(a1 + 104); i; i = *(_QWORD **)(v1 + 104) )\n  {\n    *(_QWORD *)(v1 + 104) = i[140];\n    sub_1F270(i);\n  }\n}\n", 
            "funcStartAddr": "0x209c0L", 
            "funcEndAddr": "0x209ebL", 
            "funcName": "connections_pool_clear"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall connection_accepted(__int64 a1, __int64 a2, const __m128i *a3, unsigned __int32 a4)\n{\n  unsigned __int32 v4; // er14\n  __m128i *v5; // rbx\n  __int64 v6; // rbp\n  const __m128i *v7; // r12\n  __int64 v8; // rax\n  __int64 v9; // rdi\n  __int64 v10; // rax\n  __m128i v11; // xmm0\n  __m128i v12; // xmm0\n  __m128i v13; // xmm0\n  __int8 v14; // al\n  __int64 v16; // rdi\n  __m128i *v17; // rax\n  void *v18; // rax\n\n  v4 = a4;\n  v5 = *(__m128i **)(a1 + 104);\n  v6 = a1;\n  ++*(_DWORD *)(a1 + 84);\n  ++*(_DWORD *)(a1 + 56);\n  v7 = a3;\n  --*(_DWORD *)(a1 + 92);\n  if ( v5 )\n  {\n    *(_QWORD *)(a1 + 104) = v5[70].m128i_i64[0];\n  }\n  else\n  {\n    v17 = (__m128i *)calloc(1uLL, 0x470uLL);\n    v5 = v17;\n    if ( !v17 )\n      ck_assert_failed((__int64)\"connections.c\", 500LL, (__int64)\"((void *)0) != con\");\n    v17[57].m128i_i64[0] = a1;\n    v17[57].m128i_i64[1] = *(_QWORD *)a1;\n    v17[58].m128i_i64[1] = *(_QWORD *)(a1 + 320);\n    request_init_data(v17, v17, a1);\n    v5[53].m128i_i64[0] = (__int64)v5[39].m128i_i64;\n    v5[53].m128i_i64[1] = (__int64)&v5[42].m128i_i64[1];\n    v18 = calloc(1uLL, 8LL * (unsigned int)(*(_DWORD *)(a1 + 368) + 1));\n    v5[58].m128i_i64[0] = (__int64)v18;\n    if ( !v18 )\n      ck_assert_failed((__int64)\"connections.c\", 513LL, (__int64)\"((void *)0) != con->plugin_ctx\");\n    request_reset(v5);\n    v5[37].m128i_i64[0] = 0LL;\n    v5[36].m128i_i64[1] = 0LL;\n    v5[52].m128i_i8[8] = 1;\n    v5[54].m128i_i64[0] = 0LL;\n    v5[54].m128i_i64[1] = 0LL;\n    v5[55].m128i_i64[0] = 0LL;\n  }\n  v8 = *(_QWORD *)(a1 + 96);\n  v5[70].m128i_i64[0] = v8;\n  if ( v8 )\n    *(_QWORD *)(v8 + 1128) = v5;\n  v9 = *(_QWORD *)(a1 + 24);\n  *(_QWORD *)(v6 + 96) = v5;\n  v5[51].m128i_i32[0] = v4;\n  v10 = fdevent_register(v9, v4, sub_20550, v5);\n  v11 = _mm_loadu_si128(v7);\n  v5[51].m128i_i64[1] = v10;\n  v5[59] = v11;\n  v5[56].m128i_i64[0] = (__int64)sub_1FC00;\n  LODWORD(v5->m128i_i64[0]) = 1;\n  v12 = _mm_loadu_si128(v7 + 1);\n  v5[55].m128i_i64[1] = (__int64)sub_1F1A0;\n  v5[60] = v12;\n  v5[56].m128i_i64[1] = (__int64)sub_1F390;\n  v13 = _mm_loadu_si128(v7 + 2);\n  v5[69].m128i_i64[0] = log_monotonic_secs;\n  v5[61] = v13;\n  v5[62] = _mm_loadu_si128(v7 + 3);\n  v5[63] = _mm_loadu_si128(v7 + 4);\n  v5[64] = _mm_loadu_si128(v7 + 5);\n  v5[65] = _mm_loadu_si128(v7 + 6);\n  sock_addr_cache_inet_ntop_copy_buffer(&v5[66], &v5[59]);\n  v5[67].m128i_i64[0] = a2;\n  v14 = *(_BYTE *)(a2 + 116);\n  v5[52].m128i_i16[7] = 80;\n  v5[52].m128i_i8[10] = v14;\n  config_cond_cache_reset(v5);\n  v5[3].m128i_i32[2] = 258;\n  if ( (unsigned int)plugins_call_handle_connection_accept(v5) )\n  {\n    request_reset(v5);\n    v5[37].m128i_i64[0] = 0LL;\n    v5[36].m128i_i64[1] = 0LL;\n    v16 = (__int64)v5;\n    v5[52].m128i_i8[8] = 1;\n    v5[54].m128i_i64[0] = 0LL;\n    v5[54].m128i_i64[1] = 0LL;\n    v5[55].m128i_i64[0] = 0LL;\n    v5 = 0LL;\n    sub_1FD80(v16);\n  }\n  else if ( v5->m128i_i64[0] < 0 )\n  {\n    LODWORD(v5->m128i_i64[0]) = 7;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x209f0L", 
            "funcEndAddr": "0x20cc5L", 
            "funcName": "connection_accepted"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall connection_state_machine@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, int *a3@<rdi>, __int64 a4@<r13>, __int64 a5@<r14>, __int64 a6@<r15>)\n{\n  int *v6; // rsi\n  int *v7; // rsi\n  const char *v8; // rax\n  const char *v9; // rax\n  __int64 result; // rax\n  __int16 v11; // r8\n  signed int v12; // edx\n  int v13; // ecx\n  int v14; // edi\n  __int64 v15; // rdx\n  __int16 v16; // ax\n  signed int v17; // ecx\n  bool v18; // zf\n  __int64 v19; // rax\n  int v20; // edx\n  __int64 v21; // rdx\n  __int16 v22; // ax\n  _QWORD *v23; // rax\n  __int64 v24; // rax\n  __int64 v25; // rbp\n  int *v26; // r13\n  __int64 v27; // r14\n  __int64 v28; // rsi\n  char *v29; // rax\n  char *v30; // r14\n  signed __int64 v31; // rdx\n  char *v32; // rax\n  unsigned int v33; // er15\n  char v34; // ST07_1\n  __int64 v35; // r14\n  signed __int64 v36; // rcx\n  unsigned int v37; // eax\n  __int64 v38; // rax\n  signed __int64 v39; // [rsp+2h] [rbp-40h]\n  __int64 v40; // [rsp+1Ah] [rbp-28h]\n  unsigned int v41; // [rsp+26h] [rbp-1Ch]\n  __int64 v42; // [rsp+2Ah] [rbp-18h]\n  __int64 v43; // [rsp+32h] [rbp-10h]\n  __int64 v44; // [rsp+3Ah] [rbp-8h]\n  __int64 v45; // [rsp+3Ah] [rbp-8h]\n\n  while ( 2 )\n  {\n    if ( a3[7] != 2 )\n    {\n      v44 = a1;\n      if ( *((_BYTE *)a3 + 167) )\n      {\n        v8 = sub_E9B8(*a3);\n        log_error(\n          *((_DWORD **)a3 + 16),\n          \"connections.c\",\n          1368LL,\n          (__int64)\"state at enter %d %s\",\n          (unsigned int)a3[204],\n          v8,\n          a1);\n        sub_21490(a3, a3);\n        v9 = sub_E9B8(*a3);\n        log_error(\n          *((_DWORD **)a3 + 16),\n          \"connections.c\",\n          1375LL,\n          (__int64)\"state at exit: %d %s\",\n          (unsigned int)a3[204],\n          v9);\n      }\n      else\n      {\n        sub_21490(a3, a3);\n      }\n      v6 = a3;\n      a1 = v44;\n      goto LABEL_7;\n    }\n    v7 = a3;\n    v45 = a6;\n    v43 = a5;\n    v42 = a4;\n    LOBYTE(a4) = 0;\n    v40 = a2;\n    v25 = *((_QWORD *)a3 + 101);\n    if ( *(_DWORD *)(v25 + 76) > 0 )\n      goto LABEL_60;\n    v26 = (int *)*((_QWORD *)a3 + 107);\n    if ( *(_QWORD *)v26 )\n    {\n      if ( !(unsigned int)((__int64 (*)(void))h2_parse_frames)() || *((_BYTE *)a3 + 840) <= 0 )\n        goto LABEL_71;\n      v26 = (int *)*((_QWORD *)a3 + 107);\n    }\n    else if ( *((_BYTE *)a3 + 840) <= 0 )\n    {\n      goto LABEL_72;\n    }\n    v27 = *((_QWORD *)v26 + 2);\n    v7 = v26;\n    if ( (*((unsigned int (__fastcall **)(int *, int *, signed __int64))a3 + 112))(a3, v26, 0x40000LL) )\n    {\n      *(_DWORD *)(v25 + 76) = 10;\n      LOBYTE(a4) = 0;\n      *a3 = 9;\n      goto LABEL_60;\n    }\n    if ( *((_QWORD *)v26 + 2) > v27 )\n      h2_parse_frames(a3);\nLABEL_71:\n    if ( *(_DWORD *)(v25 + 76) > 0 )\n    {\n      LOBYTE(a4) = 0;\n      goto LABEL_60;\n    }\nLABEL_72:\n    LOBYTE(a4) = 0;\n    if ( !*(_DWORD *)(v25 + 64) )\n      goto LABEL_61;\n    v28 = *((_QWORD *)a3 + 106);\n    if ( *((_BYTE *)a3 + 841) > 0 )\n    {\n      v29 = (char *)sub_205D0((__int64)a3);\n      v30 = v29;\n      if ( v29 )\n      {\n        v31 = *(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 24);\n        if ( v31 > 0x2000 && (signed __int64)v29 > (signed __int64)&loc_10000 )\n          v30 = (char *)&loc_10000;\n        goto LABEL_77;\n      }\n      *((_BYTE *)a3 + 843) = 1;\n    }\n    v31 = *(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 24);\n    v30 = 0LL;\nLABEL_77:\n    v32 = 0LL;\n    if ( (signed __int64)&v30[-v31] >= 0 )\n      v32 = &v30[-v31];\n    v33 = 0;\n    LODWORD(a4) = 0;\n    v39 = (signed __int64)v32;\n    do\n    {\n      v35 = *(_QWORD *)(v25 + 8LL * v33);\n      sub_21490(*(_QWORD *)(v25 + 8LL * v33), a3);\n      if ( *(_DWORD *)v35 <= 6u )\n        goto LABEL_84;\n      if ( *(_DWORD *)v35 == 7 )\n      {\n        if ( *(_QWORD *)(v35 + 624) )\n        {\n          if ( !v39 || !*(_BYTE *)(v35 + 560) && !(*(_BYTE *)(v35 + 150) & 3) )\n            goto LABEL_84;\n          v36 = 0x8000LL;\n          if ( v39 <= 0x8000 )\n            v36 = v39;\n          v37 = h2_send_cqdata(v35, a3, v35 + 624, v36);\n          if ( v37 )\n          {\n            v39 -= v37;\n            if ( *(_QWORD *)(v35 + 624) )\n            {\n              LODWORD(a4) = a4 | 1;\n              goto LABEL_84;\n            }\n          }\n          else if ( *(_QWORD *)(v35 + 624) )\n          {\n            goto LABEL_84;\n          }\n        }\n        if ( !*(_BYTE *)(v35 + 560) )\n          goto LABEL_84;\n        v18 = *(_BYTE *)(v35 + 167) == 0;\n        *(_DWORD *)v35 = 8;\n        if ( !v18 )\n          sub_21490(v35, a3);\n      }\n      if ( *(_DWORD *)(v25 + 64) == 8 && **((_QWORD **)a3 + 107) )\n        LODWORD(a4) = a4 | 2;\n      --v33;\n      h2_send_end_stream(v35, a3);\n      v34 = *(_BYTE *)(v35 + 566);\n      h2_retire_stream(v35, a3);\n      if ( v34 < 0 )\n      {\n        if ( *((_BYTE *)a3 + 566) < 0 )\n        {\n          h2_send_goaway(a3, 11LL);\n        }\n        else\n        {\n          *((_BYTE *)a3 + 566) = -1;\n          h2_send_goaway(a3, 0LL);\n        }\n      }\nLABEL_84:\n      ++v33;\n    }\n    while ( *(_DWORD *)(v25 + 64) > v33 );\n    v7 = (int *)*(unsigned int *)(v25 + 76);\n    if ( !v39 )\n      LOBYTE(a4) = a4 | 1;\n    if ( (signed int)v7 > 0 )\n    {\nLABEL_60:\n      while ( *(_DWORD *)(v25 + 64) )\n      {\n        v7 = a3;\n        h2_retire_stream(*(_QWORD *)v25, a3);\n      }\n    }\nLABEL_61:\n    if ( *a3 != 7 )\n    {\nLABEL_62:\n      sub_21490(a3, a3);\n      goto LABEL_63;\n    }\n    if ( **((_QWORD **)a3 + 106) )\n    {\n      v7 = a3;\n      sub_20640((__int64)a3, (__int64)a3, (__int64)a3, (__int64)a3);\n      if ( **((_QWORD **)a3 + 106) || *(_DWORD *)(v25 + 64) )\n        goto LABEL_98;\n      goto LABEL_109;\n    }\n    if ( !*(_DWORD *)(v25 + 64) )\n    {\nLABEL_109:\n      if ( *(_DWORD *)(v25 + 76) )\n      {\n        *a3 = 8;\n        goto LABEL_62;\n      }\nLABEL_98:\n      if ( *a3 != 7 )\n        goto LABEL_62;\n    }\n    if ( a4 & 1 && *((_BYTE *)a3 + 841) > 0 && !*((_BYTE *)a3 + 843) || a4 & 2 )\n    {\n      if ( !*((_QWORD *)a3 + 104) )\n      {\n        v38 = log_con_jqueue;\n        log_con_jqueue = (__int64)a3;\n        *((_QWORD *)a3 + 104) = v38;\n      }\n      if ( (unsigned int)h2_want_read(a3, v7) )\n        goto LABEL_105;\nLABEL_113:\n      *((_WORD *)a3 + 74) &= 0x7FFFu;\n    }\n    else\n    {\n      if ( !(unsigned int)h2_want_read(a3, v7) )\n        goto LABEL_113;\nLABEL_105:\n      *((_WORD *)a3 + 74) |= 0x8000u;\n    }\nLABEL_63:\n    v6 = a3;\n    a2 = v40;\n    a4 = v42;\n    a5 = v43;\n    a6 = v45;\nLABEL_7:\n    result = (unsigned int)v6[204];\n    if ( (signed int)result < 0 )\n      return result;\n    v11 = *((_WORD *)v6 + 422);\n    result = (unsigned int)*a3;\n    if ( v11 )\n    {\n      if ( (_DWORD)result == 9 )\n        goto LABEL_12;\n      *((_WORD *)v6 + 422) = 0;\n      if ( (_DWORD)result == 10 )\n      {\n        *((_QWORD *)v6 + 136) = log_monotonic_secs - 6;\n        goto LABEL_50;\n      }\n      if ( !(v11 & 0x10) )\n      {\n        if ( v11 & 0x2000 )\n        {\n          v19 = *((_QWORD *)v6 + 103);\n          if ( v19 )\n            v20 = *(_DWORD *)(v19 + 20);\n          else\n            v20 = 0;\n          v21 = v20 & 0xFFFFDFFE;\n          v22 = a3[37] & 0x7FFD;\n          HIBYTE(v22) |= 0x10u;\n          *((_WORD *)a3 + 74) = v22;\n          v23 = (_QWORD *)*((_QWORD *)v6 + 107);\n          *((_BYTE *)v6 + 840) = 1;\n          if ( !*v23 )\n            *((_BYTE *)a3 + 566) = 0;\n          if ( *((_QWORD *)a3 + 52) < -1LL )\n            *((_QWORD *)a3 + 52) = *((_QWORD *)a3 + 94);\n          if ( *((_WORD *)v6 + 472) == 1 )\n          {\n            fdevent_fdnode_event_set(*(_QWORD *)(*((_QWORD *)v6 + 114) + 24LL), *((_QWORD *)v6 + 103), v21);\n            goto LABEL_50;\n          }\n          v41 = v21;\n          if ( (unsigned int)fdevent_is_tcp_half_closed((unsigned int)v6[204]) )\n          {\n            v24 = *((_QWORD *)v6 + 114);\n            *((_WORD *)a3 + 74) |= 0x2000u;\n            fdevent_fdnode_event_set(*(_QWORD *)(v24 + 24), *((_QWORD *)v6 + 103), v41);\nLABEL_50:\n            a3 = v6;\n            continue;\n          }\n        }\n        else if ( !(v11 & 8) )\n        {\n          log_error(*((_DWORD **)a3 + 16), \"connections.c\", 1123LL, (__int64)\"connection closed: poll() -> ??? %d\");\n          goto LABEL_50;\n        }\n      }\n      *a3 = 9;\n      goto LABEL_50;\n    }\n    break;\n  }\n  switch ( (_DWORD)result )\n  {\n    case 0:\n      return result;\n    case 2:\n      v12 = (a3[37] & 0x1000u) < 1 ? 8193 : 1;\n      goto LABEL_13;\n    case 4:\n      v12 = 0;\n      goto LABEL_29;\n    case 7:\n      v12 = 0;\n      if ( **((_QWORD **)v6 + 106) )\n        v12 = 4 * ((v6[210] & 0xFF00FF00) == 0);\nLABEL_29:\n      v16 = *((_WORD *)a3 + 74);\n      if ( v16 < 0 )\n        v12 |= 1u;\n      v17 = v12;\n      BYTE1(v17) |= 0x20u;\n      v18 = (v16 & 0x1000) == 0;\n      result = *((_QWORD *)v6 + 103);\n      if ( v18 )\n        v12 = v17;\n      if ( !result )\n        goto LABEL_34;\n      goto LABEL_14;\n    case 0xA:\n      v12 = 1;\n      goto LABEL_13;\n    default:\n      break;\n  }\nLABEL_12:\n  v12 = 0;\nLABEL_13:\n  result = *((_QWORD *)v6 + 103);\n  if ( result )\n  {\nLABEL_14:\n    v13 = *(_DWORD *)(result + 20);\n    v14 = *(_DWORD *)(result + 20) & 0x2000;\n  }\n  else\n  {\nLABEL_34:\n    v14 = 0;\n    v13 = 0;\n  }\n  if ( *((_BYTE *)v6 + 840) < 0 )\n  {\n    *((_BYTE *)v6 + 840) = 0;\n    v12 |= 1u;\n  }\n  if ( *((_BYTE *)v6 + 841) < 0 )\n  {\n    *((_BYTE *)v6 + 841) = 0;\n    v12 |= 4u;\n  }\n  v15 = v14 | (unsigned int)v12;\n  if ( v13 != (_DWORD)v15 )\n  {\n    if ( v15 & 1 && !(v13 & 1) )\n      *((_QWORD *)v6 + 135) = log_monotonic_secs;\n    if ( v15 & 4 )\n    {\n      if ( !(v13 & 4) )\n        *((_QWORD *)v6 + 137) = log_monotonic_secs;\n    }\n    result = fdevent_fdnode_event_set(*(_QWORD *)(*((_QWORD *)v6 + 114) + 24LL), result, v15);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x20cd0L", 
            "funcEndAddr": "0x21484L", 
            "funcName": "connection_state_machine"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21490(unsigned int *a1, char *a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rbx\n  unsigned int v4; // er13\n  __int64 result; // rax\n  __int64 v6; // rax\n  bool v7; // zf\n  __int64 v8; // rax\n  void *v9; // rdi\n  __int64 v10; // rax\n  int v11; // edi\n  __int64 v12; // rax\n  bool v13; // sf\n  unsigned __int8 v14; // of\n  __int64 v15; // rdi\n  const char *v16; // rax\n  char *v17; // [rsp-8h] [rbp-30h]\n\n  v2 = (__int64)a2;\n  v3 = (__int64)a1;\n  v4 = *a1;\nLABEL_2:\n  if ( *(_BYTE *)(v3 + 167) )\n    goto LABEL_72;\nLABEL_3:\n  result = v4;\n  switch ( v4 )\n  {\n    case 0u:\n      return result;\n    case 1u:\n      goto LABEL_7;\n    case 2u:\n      goto LABEL_10;\n    case 3u:\n      goto LABEL_28;\n    case 4u:\n    case 5u:\n      goto LABEL_29;\n    case 7u:\n      goto LABEL_35;\n    case 8u:\n    case 9u:\n      break;\n    case 0xAu:\n      if ( *(_BYTE *)(v2 + 842) )\n      {\n        a2 = *(char **)(v2 + 856);\n        if ( (*(signed int (__fastcall **)(__int64, char *, signed __int64))(v2 + 896))(v2, a2, 0x40000LL) < 0 )\n        {\n          v15 = *(_QWORD *)(v2 + 856);\n          *(_QWORD *)(v2 + 1088) = log_monotonic_secs - 6;\n          chunkqueue_reset(v15);\n        }\n        else\n        {\n          chunkqueue_reset(*(_QWORD *)(v2 + 856));\n        }\n      }\n      else\n      {\n        sub_204B0(v2);\n      }\n      if ( log_monotonic_secs - *(_QWORD *)(v2 + 1088) > 5 )\n        sub_1FD80(v2);\n      v4 = *(_DWORD *)v3;\n      result = 10LL;\n      goto LABEL_13;\n    default:\n      a2 = \"connections.c\";\n      log_error(\n        *(_DWORD **)(v3 + 128),\n        \"connections.c\",\n        1064LL,\n        (__int64)\"unknown state: %d %d\",\n        *(unsigned int *)(v2 + 816),\n        v4);\n      goto LABEL_12;\n  }\nLABEL_17:\n  if ( *(_DWORD *)(v3 + 28) > 1 )\n    goto LABEL_18;\n  while ( 1 )\n  {\n    if ( *(_DWORD *)(v3 + 4) )\n      goto LABEL_20;\nLABEL_21:\n    if ( *(_DWORD *)v3 == 9\n      || (++*(_DWORD *)(*(_QWORD *)(v2 + 912) + 64LL), *(_QWORD *)(v3 + 416) != *(_QWORD *)(v3 + 752)) )\n    {\n      *(_BYTE *)(v3 + 566) = 0;\n      v9 = *(void **)(v2 + 848);\n      if ( (void *)(v3 + 624) == v9 )\n      {\nLABEL_24:\n        plugins_call_handle_connection_shut_wr(v2);\n        request_reset(v2);\n        v10 = *(_QWORD *)(v2 + 912);\n        v11 = *(_DWORD *)(v2 + 816);\n        *(_QWORD *)(v2 + 592) = 0LL;\n        *(_QWORD *)(v2 + 584) = 0LL;\n        *(_BYTE *)(v2 + 840) = 1;\n        *(_QWORD *)(v2 + 864) = 0LL;\n        *(_QWORD *)(v2 + 872) = 0LL;\n        *(_QWORD *)(v2 + 880) = 0LL;\n        ++*(_DWORD *)(v10 + 68);\n        if ( v11 >= 0 && (*(_BYTE *)(v2 + 842) || (a2 = (_BYTE *)(&size + 1), !shutdown(v11, 1))) )\n        {\n          v7 = *(_BYTE *)(v2 + 167) == 0;\n          v12 = log_monotonic_secs;\n          *(_DWORD *)v2 = 10;\n          *(_QWORD *)(v2 + 1088) = v12;\n          if ( !v7 )\n          {\n            a2 = \"connections.c\";\n            log_error(\n              *(_DWORD **)(v2 + 128),\n              \"connections.c\",\n              170LL,\n              (__int64)\"shutdown for fd %d\",\n              *(unsigned int *)(v2 + 816));\n            v4 = *(_DWORD *)v3;\n            result = 8LL;\nLABEL_13:\n            if ( (_DWORD)result == v4 )\n              return result;\n            goto LABEL_2;\n          }\n        }\n        else\n        {\n          sub_1FD80(v2);\n        }\n        v4 = *(_DWORD *)v3;\n        result = 8LL;\n        goto LABEL_13;\n      }\n      chunkqueue_free(v9);\n      *(_QWORD *)(v2 + 848) = v3 + 624;\n    }\n    if ( *(_BYTE *)(v3 + 566) <= 0 )\n      goto LABEL_24;\n    v4 = 1;\n    request_reset(v3);\n    v6 = *(_QWORD *)(v2 + 880);\n    *(_BYTE *)(v2 + 840) = 1;\n    v7 = *(_BYTE *)(v3 + 167) == 0;\n    *(_QWORD *)(v3 + 592) = v6;\n    v8 = *(_QWORD *)(v2 + 864);\n    *(_DWORD *)v3 = 1;\n    *(_QWORD *)(v3 + 584) = v8;\n    if ( !v7 )\n      goto LABEL_72;\nLABEL_7:\n    *(_QWORD *)(v3 + 600) = log_epoch_secs;\n    *(_QWORD *)(v2 + 1080) = log_monotonic_secs;\n    if ( *(_BYTE *)(v3 + 152) )\n    {\n      a2 = (char *)(v3 + 600);\n      clock_gettime(0, (struct timespec *)(v3 + 600));\n    }\n    ++*(_DWORD *)(v2 + 1112);\n    v4 = 1;\n    *(_BYTE *)(v3 + 565) = 0;\n    *(_DWORD *)v3 = 2;\nLABEL_10:\n    if ( !(unsigned int)sub_1FEF0(v2) )\n    {\n      if ( *(_DWORD *)(v3 + 28) == 2 )\n      {\n        buffer_copy_string_len(v3 + 456, \"*\", 1LL);\n        buffer_copy_string_len(v3 + 472, \"*\", 1LL);\n        buffer_copy_string_len(v3 + 296, \"*\", 1LL);\n        *(_WORD *)(v3 + 148) |= 0x8000u;\n        v7 = *(_DWORD *)v3 == 9;\n        *(_DWORD *)(v3 + 24) = -2;\n        *(_QWORD *)(v3 + 416) = -1LL;\n        if ( !v7 )\n          *(_DWORD *)v3 = 7;\n        if ( !*(_QWORD *)(v2 + 808) )\n          h2_init_con(v3, v2, 0LL);\n        JUMPOUT(&loc_21040);\n      }\nLABEL_12:\n      result = v4;\n      v4 = *(_DWORD *)v3;\n      goto LABEL_13;\n    }\nLABEL_28:\n    *(_DWORD *)v3 = (*(_QWORD *)(v3 + 416) == 0LL) + 4;\nLABEL_29:\n    result = http_response_handler(v3, a2);\n    if ( (unsigned int)result > 1 )\n    {\n      if ( (_DWORD)result == 3 )\n        return result;\n      v7 = *(_BYTE *)(v3 + 167) == 0;\n      *(_DWORD *)v3 = 9;\n      v4 = 9;\n      if ( !v7 )\n      {\nLABEL_72:\n        v16 = sub_E9B8(v4);\n        log_error(\n          *(_DWORD **)(v3 + 128),\n          \"connections.c\",\n          987LL,\n          (__int64)\"state for fd:%d id:%d %s\",\n          *(unsigned int *)(v2 + 816),\n          *(unsigned int *)(v3 + 12),\n          v16);\n        v4 = *(_DWORD *)v3;\n        a2 = v17;\n        goto LABEL_3;\n      }\n      goto LABEL_17;\n    }\n    if ( *(_DWORD *)(v3 + 28) <= 1 )\n    {\n      http_response_write_header(v3, (signed __int64)a2);\n    }\n    else\n    {\n      a2 = (char *)v2;\n      h2_send_headers(v3, v2);\n    }\n    *(_DWORD *)v3 = 7;\nLABEL_35:\n    result = *(_QWORD *)(v3 + 624);\n    if ( result )\n    {\nLABEL_36:\n      if ( *(_DWORD *)(v3 + 28) <= 1 )\n      {\n        a2 = (char *)v2;\n        result = sub_20640(v3, v3, v2, (__int64)off_40D18);\n        if ( (_DWORD)result != 7 )\n          goto LABEL_17;\n        result = *(_QWORD *)(v3 + 32);\n        if ( !result )\n          goto LABEL_42;\n      }\n      else\n      {\n        result = *(_QWORD *)(v3 + 32);\n        if ( !result )\n          return result;\n      }\n      if ( *(_BYTE *)(v3 + 560) )\n        goto LABEL_42;\nLABEL_39:\n      a2 = *(char **)result;\n      result = (*(__int64 (__fastcall **)(__int64, char *))(result + 64))(v3, *(char **)result);\n      if ( (_DWORD)result == 3 )\n        goto LABEL_42;\n      if ( (unsigned int)result > 3 )\n      {\n        if ( (_DWORD)result != 4 )\n          goto LABEL_69;\n      }\n      else\n      {\n        if ( (unsigned int)result <= 1 )\n          goto LABEL_42;\nLABEL_69:\n        a2 = \"connections.c\";\n        result = log_error(\n                   *(_DWORD **)(v3 + 128),\n                   \"connections.c\",\n                   479LL,\n                   (__int64)\"unexpected subrequest handler ret-value: %d %d\",\n                   *(unsigned int *)(v2 + 816),\n                   (unsigned int)result);\n      }\n      *(_DWORD *)v3 = 9;\n      goto LABEL_17;\n    }\nLABEL_47:\n    if ( !*(_BYTE *)(v3 + 560) )\n      break;\nLABEL_55:\n    v14 = __OFSUB__(*(_DWORD *)(v3 + 28), 1);\n    v7 = *(_DWORD *)(v3 + 28) == 1;\n    v13 = *(_DWORD *)(v3 + 28) - 1 < 0;\n    *(_DWORD *)v3 = 8;\n    if ( !((unsigned __int8)(v13 ^ v14) | v7) )\n    {\nLABEL_18:\n      if ( v2 != v3 )\n        return result;\n      a2 = (char *)v2;\n      h2_retire_con(v2, v2);\n      *(_BYTE *)(v2 + 566) = 0;\n      *(_DWORD *)(v2 + 4) = 100;\nLABEL_20:\n      plugins_call_handle_request_done(v3);\n      goto LABEL_21;\n    }\n  }\n  while ( 1 )\n  {\n    result = *(_QWORD *)(v3 + 32);\n    if ( result )\n      goto LABEL_39;\nLABEL_42:\n    if ( *(_DWORD *)(v3 + 28) > 1 )\n      return result;\n    result = *(_QWORD *)(v3 + 624);\n    if ( result )\n    {\n      if ( *(_BYTE *)(v2 + 841) <= 0 || *(_BYTE *)(v2 + 843) )\n        return result;\n      if ( result )\n        goto LABEL_36;\n      goto LABEL_47;\n    }\n    if ( !*(_BYTE *)(v3 + 560) )\n      return result;\n    if ( *(_BYTE *)(v3 + 560) )\n      goto LABEL_55;\n  }\n}\n", 
            "funcStartAddr": "0x21490L", 
            "funcEndAddr": "0x21a92L", 
            "funcName": "sub_21490"
        }, 
        {
            "decompiledFuncCode": "void __fastcall connection_periodic_maint(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  int *v6; // rdi\n  __int64 v7; // rax\n  int v8; // edx\n  __int64 v9; // r14\n  int v10; // eax\n  __int64 v11; // r15\n  unsigned int v12; // edx\n  __int64 v13; // r15\n  signed __int64 v14; // rdx\n  signed int v15; // eax\n  signed __int64 v16; // rax\n  __int64 v17; // rax\n  signed __int64 v18; // r10\n  signed int v19; // esi\n  __int64 v20; // rax\n  __int64 v21; // rdx\n  unsigned int v22; // eax\n  int *v23; // r9\n  int v24; // eax\n  unsigned int v25; // eax\n  signed __int64 v26; // ST20_8\n  signed __int64 v27; // ST28_8\n  int *v28; // ST20_8\n\n  v2 = *(_QWORD *)(a1 + 96);\n  if ( v2 )\n  {\n    v3 = a2;\n    v4 = (unsigned int)a2;\n    while ( 1 )\n    {\n      v7 = *(_QWORD *)(v2 + 824);\n      LOBYTE(v8) = 0;\n      v9 = *(_QWORD *)(v2 + 1120);\n      if ( v7 )\n        v8 = *(_DWORD *)(v7 + 20);\n      v10 = *(_DWORD *)v2;\n      if ( *(_DWORD *)v2 != 10 )\n        break;\n      v16 = v3 - *(_QWORD *)(v2 + 1088);\n      v13 = v16 < 5;\n      LOBYTE(v13) = v16 > 5;\nLABEL_18:\n      v15 = v4 - *(_DWORD *)(v2 + 1104);\n      if ( (_DWORD)v4 == *(_DWORD *)(v2 + 1104) )\n        v15 = 1;\n      if ( !*(_BYTE *)(v2 + 843) || (v5 = *(unsigned int *)(v2 + 172), (_DWORD)v5) && *(_QWORD *)(v2 + 864) >= v5 * v15 )\n      {\n        *(_QWORD *)(v2 + 872) = 0LL;\n        if ( (_DWORD)v13 )\n          goto LABEL_6;\n        v2 = v9;\n        if ( !v9 )\n          return;\n      }\n      else\n      {\n        *(_BYTE *)(v2 + 843) = 0;\n        *(_QWORD *)(v2 + 872) = 0LL;\nLABEL_6:\n        v6 = (int *)v2;\n        v2 = v9;\n        connection_state_machine(v9, v4, v6, 1LL, v9, v13);\n        if ( !v9 )\n          return;\n      }\n    }\n    v11 = *(_QWORD *)(v2 + 808);\n    if ( v10 == 7 && v11 )\n    {\n      if ( *(_DWORD *)(v11 + 64) )\n      {\n        v18 = 1LL;\n        v19 = 0;\n        do\n        {\n          while ( 1 )\n          {\n            v23 = *(int **)(v11 + 8 * v18 - 8);\n            v24 = *v23;\n            if ( *v23 != 9 )\n              break;\n            v25 = v18++;\n            v19 = 1;\n            if ( v25 >= *(_DWORD *)(v11 + 64) )\n              goto LABEL_41;\n          }\n          if ( *((_QWORD *)v23 + 52) != *((_QWORD *)v23 + 94)\n            && v3 - *(_QWORD *)(v2 + 1080) > *((unsigned __int16 *)v23 + 72) )\n          {\n            if ( *((_BYTE *)v23 + 163) )\n            {\n              v27 = v18;\n              log_error(\n                *((_DWORD **)v23 + 16),\n                \"connections.c\",\n                1423LL,\n                (__int64)\"request aborted - read timeout: %d\",\n                *(unsigned int *)(v2 + 816),\n                v23);\n              v18 = v27;\n              v23 = v28;\n            }\n            *(_DWORD *)v2 = 9;\n            v19 = 1;\n            v24 = *v23;\n          }\n          if ( v24 != 4 )\n          {\n            v20 = *(_QWORD *)(v2 + 1096);\n            if ( v20 )\n            {\n              v21 = *(unsigned __int16 *)(v2 + 146);\n              if ( v3 - v20 > (unsigned __int16)v21 )\n              {\n                if ( *(_BYTE *)(v2 + 166) )\n                {\n                  v26 = v18;\n                  log_error(\n                    *(_DWORD **)(v2 + 128),\n                    \"connections.c\",\n                    1441LL,\n                    (__int64)\"NOTE: a request from %s for %.*s timed out after writing %lld bytes. We waited %d seconds. \"\n                             \"If this is a problem, increase server.max-write-idle\",\n                    *(_QWORD *)(v2 + 1056),\n                    *(_DWORD *)(v2 + 464) - (unsigned int)(*(_DWORD *)(v2 + 464) != 0),\n                    *(_QWORD *)(v2 + 456),\n                    *(_QWORD *)(v2 + 648),\n                    v21);\n                  v18 = v26;\n                }\n                *(_DWORD *)v2 = 9;\n                v19 = 1;\n              }\n            }\n          }\n          v22 = v18++;\n        }\n        while ( v22 < *(_DWORD *)(v11 + 64) );\nLABEL_41:\n        if ( !v19 )\n          goto LABEL_16;\n      }\n      else\n      {\n        if ( v3 - *(_QWORD *)(v2 + 1080) <= *(signed int *)(v2 + 1116) )\n          goto LABEL_16;\n        if ( *(_BYTE *)(v2 + 163) )\n          log_error(\n            *(_DWORD **)(v2 + 128),\n            \"connections.c\",\n            1461LL,\n            (__int64)\"connection closed - keep-alive timeout: %d\",\n            *(unsigned int *)(v2 + 816));\n        *(_DWORD *)v2 = 8;\n      }\n      *(_BYTE *)(v2 + 840) = 0;\n      v13 = 1LL;\n      goto LABEL_17;\n    }\n    v12 = v8 & 1;\n    v13 = v12;\n    if ( v12 )\n    {\n      v14 = v3 - *(_QWORD *)(v2 + 1080);\n      if ( *(_DWORD *)(v2 + 1112) != 1 && v10 == 2 )\n      {\n        if ( *(signed int *)(v2 + 1116) >= v14 )\n          goto LABEL_16;\n        if ( *(_BYTE *)(v2 + 163) )\n          log_error(\n            *(_DWORD **)(v2 + 128),\n            \"connections.c\",\n            1490LL,\n            (__int64)\"connection closed - keep-alive timeout: %d\",\n            *(unsigned int *)(v2 + 816));\n      }\n      else\n      {\n        if ( *(unsigned __int16 *)(v2 + 144) >= v14 )\n          goto LABEL_16;\n        if ( *(_BYTE *)(v2 + 163) )\n          log_error(\n            *(_DWORD **)(v2 + 128),\n            \"connections.c\",\n            1479LL,\n            (__int64)\"connection closed - read timeout: %d\",\n            *(unsigned int *)(v2 + 816));\n      }\n      *(_DWORD *)v2 = 9;\n      goto LABEL_17;\n    }\nLABEL_16:\n    v13 = 0LL;\nLABEL_17:\n    if ( *(_DWORD *)(v2 + 28) <= 1 && *(_DWORD *)v2 == 7 )\n    {\n      v17 = *(_QWORD *)(v2 + 1096);\n      if ( v17 )\n      {\n        if ( v3 - v17 > *(unsigned __int16 *)(v2 + 146) )\n        {\n          if ( *(_BYTE *)(v2 + 166) )\n            log_error(\n              *(_DWORD **)(v2 + 128),\n              \"connections.c\",\n              1526LL,\n              (__int64)\"NOTE: a request from %s for %.*s timed out after writing %lld bytes. We waited %d seconds. If thi\"\n                       \"s is a problem, increase server.max-write-idle\",\n              *(_QWORD *)(v2 + 1056),\n              *(_DWORD *)(v2 + 464) - (unsigned int)(*(_DWORD *)(v2 + 464) != 0),\n              *(_QWORD *)(v2 + 456),\n              *(_QWORD *)(v2 + 864),\n              *(unsigned __int16 *)(v2 + 146));\n          *(_DWORD *)v2 = 9;\n          v13 = 1LL;\n        }\n      }\n    }\n    goto LABEL_18;\n  }\n}\n", 
            "funcStartAddr": "0x21aa0L", 
            "funcEndAddr": "0x21f01L", 
            "funcName": "connection_periodic_maint"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21F10(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // r12\n  void *v7; // rdi\n  const void *v8; // rsi\n  __int64 v9; // rdx\n  __int64 v10; // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a2 + 808);\n  ++*(_DWORD *)(a2 + 1112);\n  if ( *(_DWORD *)(v2 + 64) > 7u )\n    ck_assert_failed((__int64)\"h2.c\", 2558LL, (__int64)\"h2c->rused < sizeof(h2c->r)/sizeof(*h2c->r)\");\n  v3 = a1;\n  v4 = request_acquire(a2);\n  v5 = *(unsigned int *)(v2 + 64);\n  v6 = *(_QWORD *)(a2 + 912);\n  v7 = *(void **)(v4 + 64);\n  v8 = *(const void **)(v3 + 64);\n  *(_DWORD *)(v2 + 64) = v5 + 1;\n  *(_QWORD *)(v2 + 8 * v5) = v4;\n  LODWORD(v5) = *(_DWORD *)(v2 + 100);\n  *(_DWORD *)(v4 + 16) = 0xFFFF;\n  *(_DWORD *)(v4 + 28) = 2;\n  *(_DWORD *)(v4 + 20) = v5;\n  v9 = *(unsigned int *)(*(_QWORD *)(v6 + 8) + 16LL);\n  *(_DWORD *)(v4 + 56) = *(_DWORD *)(v3 + 56);\n  memcpy(v7, v8, 2 * v9);\n  v10 = *(signed int *)(v6 + 16);\n  if ( (_DWORD)v10 )\n    memcpy(*(void **)(v4 + 72), *(const void **)(v3 + 72), 8 * v10);\n  *(_QWORD *)(v4 + 448) = *(_QWORD *)(v3 + 448);\n  result = v4;\n  *(__m128i *)(v4 + 88) = _mm_loadu_si128((const __m128i *)(v3 + 88));\n  *(__m128i *)(v4 + 104) = _mm_loadu_si128((const __m128i *)(v3 + 104));\n  *(__m128i *)(v4 + 120) = _mm_loadu_si128((const __m128i *)(v3 + 120));\n  *(__m128i *)(v4 + 136) = _mm_loadu_si128((const __m128i *)(v3 + 136));\n  *(__m128i *)(v4 + 152) = _mm_loadu_si128((const __m128i *)(v3 + 152));\n  *(__m128i *)(v4 + 168) = _mm_loadu_si128((const __m128i *)(v3 + 168));\n  *(__m128i *)(v4 + 184) = _mm_loadu_si128((const __m128i *)(v3 + 184));\n  *(__m128i *)(v4 + 200) = _mm_loadu_si128((const __m128i *)(v3 + 200));\n  *(_QWORD *)(v4 + 216) = *(_QWORD *)(v3 + 216);\n  return result;\n}\n", 
            "funcStartAddr": "0x21f10L", 
            "funcEndAddr": "0x22051L", 
            "funcName": "sub_21F10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22060(__int64 *a1, unsigned int a2, unsigned int a3, __int64 a4)\n{\n  __int64 v5; // rdi\n  __int64 v6; // [rsp+0h] [rbp-28h]\n  unsigned __int32 v7; // [rsp+8h] [rbp-20h]\n  unsigned __int32 v8; // [rsp+Ch] [rbp-1Ch]\n  unsigned __int64 v9; // [rsp+18h] [rbp-10h]\n\n  v9 = __readfsqword(0x28u);\n  if ( a3 )\n  {\n    v5 = *a1;\n    v7 = _byteswap_ulong(a2);\n    v8 = _byteswap_ulong(a3);\n    v6 = 0LL;\n    *(_WORD *)((char *)&v6 + 5) = 2052;\n    chunkqueue_append_mem(v5, (char *)&v6 + 3, 13LL, a4);\n  }\n  return __readfsqword(0x28u) ^ v9;\n}\n", 
            "funcStartAddr": "0x22060L", 
            "funcEndAddr": "0x220c7L", 
            "funcName": "sub_22060"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_220D0(_DWORD *a1, unsigned int *a2, __int64 a3, __int64 a4)\n{\n  unsigned int *v4; // r12\n  _DWORD *v5; // rbx\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  unsigned int v8; // eax\n  unsigned __int64 result; // rax\n  __int64 v10; // rsi\n  unsigned int v11; // edi\n  __int64 v12; // [rsp+Ch] [rbp-2Ch]\n  unsigned __int32 v13; // [rsp+14h] [rbp-24h]\n  unsigned __int64 v14; // [rsp+18h] [rbp-20h]\n\n  v4 = a2;\n  v5 = a1;\n  v6 = a3;\n  v7 = *(_QWORD *)(a3 + 848);\n  v14 = __readfsqword(0x28u);\n  v8 = *a2;\n  v12 = 0LL;\n  HIBYTE(v12) = 1;\n  v13 = _byteswap_ulong(v8);\n  chunkqueue_append_mem(v7, (char *)&v12 + 3, 9LL, a4);\n  if ( *v5 != 5 )\n  {\n    v10 = *(_QWORD *)(v6 + 848);\n    v11 = *v4;\n    *(_QWORD *)(*(_QWORD *)(v6 + 808) + 224LL) = log_monotonic_secs;\n    sub_EBE0(v11, v10, 0);\n  }\n  result = __readfsqword(0x28u) ^ v14;\n  *v5 = 6;\n  return result;\n}\n", 
            "funcStartAddr": "0x220d0L", 
            "funcEndAddr": "0x2216fL", 
            "funcName": "sub_220D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_22170@<rax>(_QWORD *a1@<rdx>, char *a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<rbp>, unsigned int a5@<edi>, __int64 a6@<rsi>, unsigned int a7@<r8d>, char a8@<r9b>, __int64 a9@<r12>, __int64 a10@<r13>)\n{\n  unsigned int v10; // ebp\n  __int64 v11; // rdi\n  char *src; // ST08_8\n  __int64 v13; // r12\n  char *v14; // rcx\n  unsigned int v15; // er13\n  unsigned int v16; // ebx\n  void *v17; // rdi\n  char *v18; // ST08_8\n  unsigned int v19; // er12\n  __int64 result; // rax\n  unsigned __int64 v21; // rt1\n  unsigned __int64 *v22; // [rsp+8h] [rbp-68h]\n  _QWORD *v23; // [rsp+10h] [rbp-60h]\n  int v24; // [rsp+24h] [rbp-4Ch]\n  char v25; // [rsp+28h] [rbp-48h]\n  char v26; // [rsp+29h] [rbp-47h]\n  __int16 v27; // [rsp+2Ah] [rbp-46h]\n  unsigned __int32 v28; // [rsp+2Ch] [rbp-44h]\n  unsigned __int64 v29; // [rsp+30h] [rbp-40h]\n  __int64 v30; // [rsp+40h] [rbp-30h]\n  __int64 v31; // [rsp+48h] [rbp-28h]\n  __int64 v32; // [rsp+50h] [rbp-20h]\n  __int64 v33; // [rsp+58h] [rbp-18h]\n\n  v33 = a10;\n  v32 = a9;\n  v31 = a4;\n  v30 = a3;\n  v10 = a7;\n  v29 = __readfsqword(0x28u);\n  v28 = _byteswap_ulong(a5);\n  v11 = *a1;\n  src = a2;\n  v23 = a1;\n  v24 = 0;\n  LOBYTE(v27) = 1;\n  HIBYTE(v27) = a8;\n  v22 = (unsigned __int64 *)chunkqueue_append_buffer_open_sz(v11, a7 + (a7 >> 10) + 9);\n  v13 = *v22;\n  v14 = src;\n  v15 = *(_DWORD *)(*(_QWORD *)a6 + 104LL);\n  do\n  {\n    v16 = v10;\n    if ( v15 <= v10 )\n      v16 = v15;\n    v25 = BYTE1(v16);\n    v26 = v16;\n    HIBYTE(v24) = BYTE2(v16);\n    if ( v15 >= v10 )\n      HIBYTE(v27) |= 4u;\n    v17 = (void *)(v13 + 9);\n    v18 = v14;\n    *(_QWORD *)v13 = *(_QWORD *)((char *)&v24 + 3);\n    *(_BYTE *)(v13 + 8) = HIBYTE(v28);\n    v13 += v16 + 9LL;\n    memcpy(v17, v14, v16);\n    v27 = 9;\n    v14 = &v18[v16];\n    v10 -= v16;\n  }\n  while ( v10 );\n  v19 = v13 - *v22;\n  *(_BYTE *)(*v22 + v19) = 0;\n  *((_DWORD *)v22 + 2) = v19 + 1;\n  v21 = __readfsqword(0x28u);\n  result = v21 ^ v29;\n  if ( v21 == v29 )\n    result = chunkqueue_append_buffer_commit(*v23, v22);\n  return result;\n}\n", 
            "funcStartAddr": "0x22170L", 
            "funcEndAddr": "0x2229bL", 
            "funcName": "sub_22170"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_222A0(__int64 a1)\n{\n  if ( *(_DWORD *)(a1 + 4) )\n    plugins_call_handle_request_done(a1);\n  return request_release();\n}\n", 
            "funcStartAddr": "0x222a0L", 
            "funcEndAddr": "0x222b9L", 
            "funcName": "sub_222A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_222C0(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // rcx\n  __int64 v4; // rdx\n  signed __int64 result; // rax\n\n  v3 = *(_QWORD *)(a1 + 416);\n  v4 = *(_QWORD *)(a1 + 752) + a3;\n  *(_DWORD *)(a1 + 8) = (*(_DWORD *)(a1 + 8) != 3) + 5;\n  if ( v3 == -1 )\n  {\n    *(_QWORD *)(a1 + 416) = v4;\n    result = 1LL;\n  }\n  else\n  {\n    result = 1LL;\n    if ( v3 != v4 && !*(_QWORD *)(a1 + 760) )\n    {\n      sub_EC3E((_DWORD *)a1, a2, 1u);\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x222c0L", 
            "funcEndAddr": "0x2231fL", 
            "funcName": "sub_222C0"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__usercall h2_send_goaway@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rdi>, unsigned int a4@<esi>, __int64 a5@<r14>, signed __int64 a6@<r15>)\n{\n  __int64 v6; // r13\n  unsigned int v7; // ebx\n  __int64 v8; // rbp\n  int v9; // er12\n  signed int v10; // eax\n  _DWORD *result; // rax\n  unsigned __int64 v12; // rt1\n  int v13; // eax\n  unsigned int v14; // eax\n  __int64 v15; // rdi\n  __int64 v16; // [rsp+0h] [rbp-58h]\n  int v17; // [rsp+8h] [rbp-50h]\n  unsigned __int32 v18; // [rsp+Ch] [rbp-4Ch]\n  unsigned int v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+18h] [rbp-40h]\n\n  v6 = a3;\n  v7 = a4;\n  v8 = *(_QWORD *)(a3 + 808);\n  v20 = __readfsqword(0x28u);\n  v9 = *(_DWORD *)(v8 + 76);\n  if ( a4 )\n  {\n    v13 = *(_DWORD *)(v8 + 64);\n    if ( v13 )\n    {\n      a5 = v8;\n      a6 = v8 + 8LL * (unsigned int)(v13 - 1) + 8;\n      goto LABEL_7;\n    }\n    goto LABEL_10;\n  }\n  v10 = -1;\n  if ( !v9 )\n    goto LABEL_12;\n  while ( 1 )\n  {\n    v12 = __readfsqword(0x28u);\n    result = (_DWORD *)(v12 ^ v20);\n    if ( v12 == v20 )\n      return result;\nLABEL_13:\n    a1 -= 5;\n    if ( a1 > 1 )\n    {\n      a1 = log_monotonic_secs;\n      *(_QWORD *)(v8 + 224) = log_monotonic_secs;\n    }\n    *result = 9;\n    result[2] = 6;\n    if ( v9 )\n      sub_EBE0(result[3], *(_QWORD *)(v6 + 848), 1u);\n    while ( 1 )\n    {\n      a5 += 8LL;\n      if ( a6 == a5 )\n        break;\nLABEL_7:\n      result = *(_DWORD **)a5;\n      a1 = *(_DWORD *)(*(_QWORD *)a5 + 8LL);\n      if ( a1 != 6 )\n        goto LABEL_13;\n    }\n    v8 = *(_QWORD *)(v6 + 808);\nLABEL_10:\n    if ( *(_DWORD *)(v8 + 76) <= 0 )\n    {\n      v10 = v7;\nLABEL_12:\n      *(_DWORD *)(v8 + 76) = v10;\n      v16 = 0LL;\n      *(_WORD *)((char *)&v16 + 5) = 1800;\n      v14 = *(_DWORD *)(v8 + 68);\n      v15 = *(_QWORD *)(v6 + 848);\n      v7 = _byteswap_ulong(v7);\n      v17 = 0;\n      v19 = v7;\n      v18 = _byteswap_ulong(v14);\n      chunkqueue_append_mem(v15, (char *)&v16 + 3, 17LL, a2);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x22320L", 
            "funcEndAddr": "0x22445L", 
            "funcName": "h2_send_goaway"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_22450(unsigned int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rdi>, unsigned __int8 *a4@<rsi>, __int64 a5@<r14>)\n{\n  unsigned int v5; // er12\n  _DWORD *v6; // r15\n  unsigned __int8 *v7; // rbp\n  unsigned __int32 v8; // ebx\n  signed int v9; // esi\n  _DWORD *v10; // rax\n  signed __int64 v11; // r8\n  int v12; // er10\n  int v13; // er9\n  bool v14; // si\n  _DWORD *v15; // rdi\n  int v16; // edx\n  unsigned int v17; // esi\n  int v18; // ST2C_4\n  int v19; // ST28_4\n  signed __int64 v20; // ST20_8\n  unsigned int v21; // ST1C_4\n  _DWORD *v22; // ST10_8\n  __int64 v23; // [rsp+8h] [rbp-60h]\n\n  v5 = a1;\n  v6 = *(_DWORD **)(a3 + 808);\n  v23 = a3;\n  if ( a1 > 5 )\n  {\n    a5 = (__int64)(v6 + 2);\n    v7 = a4;\n    while ( 1 )\n    {\n      v8 = _byteswap_ulong(*(_DWORD *)(v7 + 2));\n      a1 = *v7 << 8;\n      switch ( _byteswap_ushort(*(_WORD *)v7) )\n      {\n        case 1u:\n          v9 = 4096;\n          if ( v8 <= 0x1000 )\n            v9 = v8;\n          if ( v6[22] != v9 )\n          {\n            v6[22] = v9;\n            lshpack_enc_set_max_capacity(v6 + 38);\n          }\n          goto LABEL_5;\n        case 2u:\n          if ( (v8 | 1) != 1 )\n            goto LABEL_28;\n          v6[23] = v8;\n          goto LABEL_5;\n        case 3u:\n          v6[24] = v8;\n          goto LABEL_5;\n        case 4u:\n          if ( (v8 & 0x80000000) != 0 )\n          {\n            v17 = 3;\n            goto LABEL_29;\n          }\n          a1 = v6[16];\n          if ( a1 )\n          {\n            a2 = v8 - v6[25];\n            v10 = v6;\n            v11 = a5 + 8LL * (a1 - 1);\n            v12 = 2147483648 - a2;\n            v13 = 0x7FFFFFFF - a2;\n            do\n            {\n              v15 = *(_DWORD **)v10;\n              a1 = *(_DWORD *)(*(_QWORD *)v10 + 8LL) & 0xFFFFFFFD;\n              if ( a1 != 4 )\n              {\n                v16 = v15[5];\n                if ( (signed int)a2 >= 0 )\n                  v14 = v13 < v16;\n                else\n                  v14 = v12 > v16;\n                if ( v14 )\n                {\n                  v18 = v13;\n                  v19 = v12;\n                  v20 = v11;\n                  v21 = a2;\n                  v22 = v10;\n                  sub_EC3E(v15, v23, 3u);\n                  v10 = v22;\n                  a2 = v21;\n                  v11 = v20;\n                  v12 = v19;\n                  v13 = v18;\n                }\n                else\n                {\n                  a1 = a2 + v16;\n                  v15[5] = a1;\n                }\n              }\n              v10 += 2;\n            }\n            while ( v10 != (_DWORD *)v11 );\n          }\n          v6[25] = v8;\nLABEL_5:\n          v5 -= 6;\n          v7 += 6;\n          if ( v5 <= 5 )\n            goto LABEL_6;\n          break;\n        case 5u:\n          if ( v8 - 0x4000 > 0xFFBFFF )\n          {\nLABEL_28:\n            v17 = 1;\n            goto LABEL_29;\n          }\n          v6[26] = v8;\n          goto LABEL_5;\n        case 6u:\n          v6[27] = v8;\n          goto LABEL_5;\n        default:\n          goto LABEL_5;\n      }\n    }\n  }\nLABEL_6:\n  if ( v5 )\n  {\n    v17 = 6;\nLABEL_29:\n    h2_send_goaway(a1, a2, v23, v17, a5, (signed __int64)v6);\n  }\n}\n", 
            "funcStartAddr": "0x22450L", 
            "funcEndAddr": "0x22643L", 
            "funcName": "sub_22450"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __usercall sub_22650@<rax>(__int64 a1@<rdi>, __int64 a2@<r14>, signed __int64 a3@<r15>)\n{\n  _QWORD *v3; // rbx\n  __int64 v4; // rdx\n  signed __int64 result; // rax\n  __int64 v6; // rsi\n  __int64 v7; // rdx\n  __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // rdx\n  _QWORD *v12; // rax\n\n  v3 = *(_QWORD **)(a1 + 856);\n  v4 = *v3;\n  if ( v3[2] - v3[3] > 23LL )\n  {\n    v10 = *(_QWORD *)(v4 + 16);\n    v11 = *(_QWORD *)(v4 + 24);\n    if ( *(_DWORD *)(v10 + 8) - (*(_DWORD *)(v10 + 8) != 0) - (unsigned int)v11 <= 0x17 )\n    {\n      sub_EBBD(*(_QWORD *)(a1 + 856), 0x18u);\n      v10 = *(_QWORD *)(*v3 + 16LL);\n      v11 = *(_QWORD *)(*v3 + 24LL);\n    }\n    v12 = (_QWORD *)(v11 + *(_QWORD *)v10);\n    v9 = *v12 ^ 0x5448202A20495250LL;\n    v8 = v9 | v12[1] ^ 0xA0D302E322F5054LL;\n    if ( !(v9 | v12[1] ^ 0xA0D302E322F5054LL) )\n    {\n      LODWORD(v9) = 1297287693;\n      if ( v12[2] == 724246167324658189LL )\n      {\n        chunkqueue_mark_written(v3, 24LL);\n        return 1LL;\n      }\n    }\nLABEL_12:\n    h2_send_goaway(v9, v8, a1, 1u, a2, a3);\n    return 1LL;\n  }\n  result = 0LL;\n  if ( v4 )\n  {\n    v6 = *(_QWORD *)(v4 + 16);\n    v7 = *(_QWORD *)(v4 + 24);\n    v8 = *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0) - v7;\n    if ( v8 > 3 )\n    {\n      v9 = *(_QWORD *)v6 + v7;\n      if ( *(_BYTE *)v9 != 80 || *(_BYTE *)(v9 + 1) != 82 || *(_BYTE *)(v9 + 2) != 73 || *(_BYTE *)(v9 + 3) != 32 )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x22650L", 
            "funcEndAddr": "0x22764L", 
            "funcName": "sub_22650"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall h2_want_read(__int64 a1)\n{\n  _QWORD *v1; // r12\n  __int64 v2; // rdx\n  signed __int64 v3; // rbp\n  __int64 v4; // rcx\n  __int64 v5; // rdx\n  unsigned int v6; // eax\n  __int64 v7; // rdx\n  unsigned __int32 v8; // ebx\n  unsigned int v10; // esi\n  signed __int64 v11; // rcx\n\n  v1 = *(_QWORD **)(a1 + 856);\n  v2 = *v1;\n  if ( !*v1 )\n    return 1LL;\n  v3 = v1[2] - v1[3];\n  if ( v3 <= 8 )\n    return 1LL;\n  v4 = *(_QWORD *)(v2 + 16);\n  v5 = *(_QWORD *)(v2 + 24);\n  v6 = *(_DWORD *)(v4 + 8) - (*(_DWORD *)(v4 + 8) != 0) - v5;\n  if ( v6 <= 8 )\n  {\n    v6 = sub_EBBD(*(_QWORD *)(a1 + 856), 9u);\n    v4 = *(_QWORD *)(*v1 + 16LL);\n    v5 = *(_QWORD *)(*v1 + 24LL);\n  }\n  v7 = *(_QWORD *)v4 + v5;\n  v8 = (_byteswap_ulong(*(_DWORD *)v7) >> 8) + 9;\n  if ( v8 > v6 )\n    return 1LL;\n  if ( *(_BYTE *)(v7 + 3) == 1 )\n  {\n    while ( !(*(_BYTE *)(v7 + 4) & 4) )\n    {\n      v10 = v8 + 9;\n      if ( v8 + 9 <= v3 )\n      {\n        if ( v10 > v6 )\n        {\n          v6 = sub_EBBD((__int64)v1, v10);\n          v7 = **(_QWORD **)(*v1 + 16LL) + *(_QWORD *)(*v1 + 24LL);\n        }\n        v11 = v8 + (_byteswap_ulong(*(_DWORD *)(v7 + v8)) >> 8) + 9;\n        v8 = v11;\n        if ( v11 <= v3 )\n          continue;\n      }\n      return 1LL;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x22770L", 
            "funcEndAddr": "0x22841L", 
            "funcName": "h2_want_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall h2_init_con@<rax>(__int64 a1@<rdx>, __int64 a2@<rdi>, __int64 a3@<rsi>, __int64 a4@<r14>, signed __int64 a5@<r15>)\n{\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rax\n  int v8; // edx\n  _QWORD *v9; // rbx\n  __int64 v10; // rax\n  signed __int64 v11; // rdi\n  __int64 v12; // rcx\n\n  v5 = a2;\n  v6 = a1;\n  v7 = calloc(1uLL, 0xE8uLL);\n  if ( !v7 )\n    ck_assert_failed((__int64)\"h2.c\", 1740LL, (__int64)\"h2c\");\n  v8 = *(unsigned __int16 *)(a2 + 142);\n  v9 = v7;\n  *(_QWORD *)(a3 + 808) = v7;\n  v10 = log_monotonic_secs;\n  *(_QWORD *)(a2 + 16) = 281470681808895LL;\n  v11 = (signed __int64)(v9 + 14);\n  v9[11] = 4294971392LL;\n  v9[13] = -4294950912LL;\n  v9[12] = 0xFFFFFFFFFFFFLL;\n  v9[10] = v10;\n  v9 += 19;\n  *(_DWORD *)(a3 + 1116) = v8;\n  *(_QWORD *)(a3 + 1080) = v10;\n  lshpack_dec_init(v11);\n  lshpack_enc_init(v9);\n  lshpack_enc_use_hist(v9, 1LL);\n  if ( v6 )\n    sub_22450(*(_DWORD *)(v6 + 8) - (*(_DWORD *)(v6 + 8) != 0), v12, a3, *(unsigned __int8 **)v6, a4);\n  chunkqueue_append_mem(*(_QWORD *)(a3 + 848), &unk_41250, 21LL, v12);\n  if ( !(unsigned int)sub_22650(a3, a4, a5) )\n  {\n    **(_QWORD **)(a3 + 928) = *(_QWORD *)(a3 + 896);\n    *(_QWORD *)(a3 + 896) = sub_F0A1;\n  }\n  return buffer_string_prepare_copy(*(_QWORD *)(v5 + 568), 0xFFFFLL);\n}\n", 
            "funcStartAddr": "0x22850L", 
            "funcEndAddr": "0x22999L", 
            "funcName": "h2_init_con"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall h2_send_headers@<rax>(__int64 a1@<rbp>, __int128 a2@<rsi:rdi>, char **a3@<r12>)\n{\n  bool v3; // zf\n  __int128 v4; // kr00_16\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rbx\n  unsigned __int64 v8; // rsi\n  signed int v9; // ecx\n  signed __int64 v10; // rdi\n  __int64 v11; // r15\n  int v12; // eax\n  unsigned int v13; // eax\n  int v14; // edx\n  int v15; // eax\n  void *v16; // rax\n  char *v17; // rsi\n  unsigned __int16 v18; // cx\n  __int64 v19; // rax\n  signed __int64 v20; // rax\n  __int64 v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // rdx\n  __int64 v24; // rax\n  __int64 v25; // rax\n  __int64 v26; // rsi\n  __int64 v27; // rax\n  bool v28; // r9\n  __int64 result; // rax\n  unsigned __int64 v30; // rt1\n  char *v31; // r8\n  int v32; // ecx\n  char v33; // al\n  __int64 i; // rdx\n  __int64 v35; // rax\n  __int64 v36; // rdx\n  __int64 v37; // [rsp+0h] [rbp-D8h]\n  char *v38; // [rsp+0h] [rbp-D8h]\n  char *v39; // [rsp+10h] [rbp-C8h]\n  signed __int64 v40; // [rsp+18h] [rbp-C0h]\n  int v41; // [rsp+24h] [rbp-B4h]\n  int v42; // [rsp+28h] [rbp-B0h]\n  unsigned int n; // [rsp+2Ch] [rbp-ACh]\n  size_t n_4; // [rsp+30h] [rbp-A8h]\n  char v45; // [rsp+39h] [rbp-9Fh]\n  unsigned int v46; // [rsp+3Ch] [rbp-9Ch]\n  signed __int64 v47; // [rsp+40h] [rbp-98h]\n  char **v48; // [rsp+50h] [rbp-88h]\n  char v49[24]; // [rsp+60h] [rbp-78h]\n  __int64 v50; // [rsp+78h] [rbp-60h]\n  __int64 v51; // [rsp+8Ch] [rbp-4Ch]\n  int v52; // [rsp+94h] [rbp-44h]\n  unsigned __int64 v53; // [rsp+98h] [rbp-40h]\n\n  v53 = __readfsqword(0x28u);\n  v3 = *(_DWORD *)(a2 + 4) == 304;\n  v4 = a2;\n  *(_DWORD *)(*((_QWORD *)&a2 + 1) + 1116LL) = *(unsigned __int16 *)(a2 + 142);\n  if ( v3 && *(_BYTE *)(a2 + 529) & 0x20 )\n    http_header_response_unset(a2, 13LL, \"Content-Encoding\", 16LL);\n  v5 = *(_QWORD *)(a2 + 568);\n  v48 = (char **)v5;\n  v6 = *(unsigned int *)(v5 + 12);\n  if ( (unsigned int)v6 <= 0xFFFF )\n    ck_assert_failed((__int64)\"h2.c\", 1916LL, (__int64)\"tb->size >= 65536\");\n  v7 = (__int64)&v51;\n  v8 = (unsigned __int64)*v48;\n  v52 = 808464928;\n  *(_OWORD *)&v49[8] = 0LL;\n  *(_QWORD *)v49 = &v51;\n  v50 = 0LL;\n  v39 = (char *)(v8 + v6);\n  *(_DWORD *)&v49[18] = 589831;\n  *(_WORD *)&v49[22] = 3;\n  v40 = *(_QWORD *)(*((_QWORD *)&v4 + 1) + 808LL) + 152LL;\n  v41 = *(unsigned __int8 *)(v4 + 164);\n  v45 = *(_BYTE *)(v4 + 564);\n  v51 = 4211839219233223482LL;\n  v9 = *(_DWORD *)(v4 + 4);\n  if ( v9 == 200 )\n  {\n    BYTE2(v50) = 8;\n  }\n  else\n  {\n    if ( v9 == 304 )\n    {\n      BYTE2(v50) = 11;\n    }\n    else if ( v9 <= 304 )\n    {\n      if ( v9 == 204 )\n      {\n        BYTE2(v50) = 9;\n      }\n      else if ( v9 == 206 )\n      {\n        BYTE2(v50) = 10;\n      }\n    }\n    else\n    {\n      switch ( v9 )\n      {\n        case 404:\n          BYTE2(v50) = 13;\n          break;\n        case 500:\n          BYTE2(v50) = 14;\n          break;\n        case 400:\n          BYTE2(v50) = 12;\n          break;\n      }\n    }\n    HIBYTE(v52) = v9 % 10 + 48;\n    BYTE1(v52) = v9 / 100 + 48;\n    BYTE2(v52) = v9 / 10 - 10 * (v9 / 100) + 48;\n  }\n  v10 = v40;\n  v11 = lshpack_enc_encode(v40, v8, v39, v49);\n  if ( *v48 == (char *)v11 )\n    goto LABEL_63;\n  if ( v41 )\n  {\n    v10 = v4;\n    v8 = 12LL;\n    sub_EB7F(v4);\n  }\n  v12 = *(_DWORD *)(v4 + 552);\n  if ( v12 )\n  {\n    n_4 = *(_QWORD *)(v4 + 536);\n    a1 = 14LL;\n    v47 = *(_QWORD *)(v4 + 536) + 8LL * (unsigned int)(v12 - 1) + 8;\n    while ( 1 )\n    {\n      a3 = *(char ***)n_4;\n      v13 = *(_DWORD *)(*(_QWORD *)n_4 + 40LL);\n      v10 = *(_DWORD *)(*(_QWORD *)n_4 + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)n_4 + 8LL) != 0);\n      n = *(_DWORD *)(*(_QWORD *)n_4 + 8LL) - (*(_DWORD *)(*(_QWORD *)n_4 + 8LL) != 0);\n      v8 = *(_DWORD *)(*(_QWORD *)n_4 + 40LL) - (unsigned int)(v13 != 0);\n      v42 = *(_DWORD *)(*(_QWORD *)n_4 + 40LL) - (v13 != 0);\n      if ( *(_DWORD *)(*(_QWORD *)n_4 + 40LL) != (v13 != 0) )\n      {\n        if ( (_DWORD)v10 )\n        {\n          v46 = a1 + v10 + v8 + 4;\n          if ( v46 > 0xFFFF )\n            goto LABEL_63;\n          v14 = *((_DWORD *)a3 + 11);\n          if ( v14 && (unsigned int)v10 <= v14 - ((v13 == 0) | v13) )\n          {\n            v7 = (__int64)&a3[4][(unsigned int)v8 + 1];\n            v15 = *((_DWORD *)a3 + 7);\n            if ( v15 )\n            {\nLABEL_15:\n              memcpy((void *)v7, (char *)&unk_41300 + 32 * v15, n);\n              goto LABEL_16;\n            }\n          }\n          else\n          {\n            v7 = buffer_string_prepare_append(a3 + 4, n) + 1;\n            v15 = *((_DWORD *)a3 + 7);\n            if ( v15 )\n              goto LABEL_15;\n          }\n          v31 = *a3;\n          v32 = **a3;\n          v33 = **a3;\n          if ( (**a3 & 0xDF) != 88 )\n            goto LABEL_43;\n          v10 = v4;\n          v8 = (unsigned __int64)a3;\n          v38 = *a3;\n          if ( !(unsigned int)http_response_omit_header(v4, a3) )\n            break;\n        }\n      }\nLABEL_28:\n      n_4 += 8LL;\n      if ( v47 == n_4 )\n        goto LABEL_29;\n    }\n    v31 = v38;\n    v32 = *v38;\n    v33 = *v38;\nLABEL_43:\n    for ( i = 0LL; ; v33 = v31[i] )\n    {\n      if ( (unsigned int)(v32 - 65) < 0x1A )\n        v33 |= 0x20u;\n      *(_BYTE *)(v7 + i++) = v33;\n      if ( n <= (unsigned int)i )\n        break;\n      v32 = v31[i];\n    }\nLABEL_16:\n    v37 = v11;\n    v7 = 0LL;\n    *(_QWORD *)v49 = a3[4];\n    while ( 1 )\n    {\n      v18 = v7;\n      if ( v45 )\n      {\n        v16 = memchr((const void *)(*(_QWORD *)v49 + (unsigned int)v7), 10, (unsigned int)(v42 - v7));\n        v50 = 0LL;\n        a1 = (__int64)v16;\n        v17 = a3[4];\n        v18 = v7;\n        v3 = v16 == 0LL;\n        *(_OWORD *)&v49[8] = 0LL;\n        v19 = *((signed int *)a3 + 7);\n        *(_QWORD *)v49 = v17;\n        *(_WORD *)&v49[20] = v7;\n        *(_DWORD *)((char *)&v50 + 2) = byte_412C0[v19];\n        *(_WORD *)&v49[16] = v42 + 1;\n        *(_WORD *)&v49[18] = n;\n        if ( !v3 )\n        {\n          v20 = a1 + 1 - (_QWORD)v17;\n          v7 = n + (unsigned int)v20 + 2;\n          *(_WORD *)&v49[22] = v20 + -2 - v18;\n          goto LABEL_19;\n        }\n      }\n      else\n      {\n        v50 = 0LL;\n        v17 = a3[4];\n        *(_OWORD *)&v49[8] = 0LL;\n        v22 = *((signed int *)a3 + 7);\n        *(_QWORD *)v49 = v17;\n        *(_WORD *)&v49[20] = v7;\n        *(_DWORD *)((char *)&v50 + 2) = byte_412C0[v22];\n        *(_WORD *)&v49[16] = v42 + 1;\n        *(_WORD *)&v49[18] = n;\n      }\n      a1 = 0LL;\n      *(_WORD *)&v49[22] = v42 - v18;\nLABEL_19:\n      if ( v41 )\n        log_error(\n          *(_DWORD **)(v4 + 128),\n          \"h2.c\",\n          1883LL,\n          (__int64)\"fd:%d id:%u resp: %.*s: %.*s\",\n          *(unsigned int *)(*(_QWORD *)(v4 + 48) + 816LL),\n          *(unsigned int *)(v4 + 12),\n          (unsigned __int16)n,\n          &v17[(unsigned __int16)(v42 + 1)],\n          *(unsigned __int16 *)&v49[22],\n          &v17[v18]);\n      v10 = v40;\n      v8 = v11;\n      v21 = lshpack_enc_encode(v40, v11, v39, v49);\n      v11 = v21;\n      if ( v37 == v21 )\n        goto LABEL_63;\n      if ( !a1 )\n      {\n        a1 = v46;\n        goto LABEL_28;\n      }\n      v37 = v21;\n    }\n  }\n  a1 = 14LL;\nLABEL_29:\n  v23 = *(_QWORD *)(v4 + 528);\n  if ( !(v23 & 0x100000) )\n  {\n    *(_QWORD *)v49 = aDate_0;\n    *(_OWORD *)&v49[8] = 0LL;\n    v50 = 0LL;\n    *(_DWORD *)&v49[18] = 393220;\n    *(_WORD *)&v49[22] = 29;\n    BYTE2(v50) = 33;\n    if ( qword_258390 != log_epoch_secs )\n    {\n      qword_258390 = log_epoch_secs;\n      http_date_time_to_str(&aDate_0[6], 0x1EuLL);\n    }\n    a1 = (unsigned int)(a1 + 37);\n    if ( v41 )\n      sub_EB7F(v4);\n    v10 = v40;\n    v8 = v11;\n    v35 = lshpack_enc_encode(v40, v11, v39, v49);\n    if ( v11 == v35 )\n      goto LABEL_63;\n    v11 = v35;\n    v23 = *(_QWORD *)(v4 + 528);\n  }\n  if ( _bittest64(&v23, 0x2Bu) || !*(_QWORD *)(v4 + 120) )\n    goto LABEL_35;\n  v7 = chunk_buffer_acquire(v10, v8);\n  v24 = *(_QWORD *)(v4 + 120);\n  LODWORD(a3) = *(_DWORD *)(v24 + 8) - (*(_DWORD *)(v24 + 8) != 0);\n  a1 = (unsigned int)(a1 + (_DWORD)a3 + 10);\n  buffer_append_str2(v7, \"server: \", 8LL, *(_QWORD *)v24, (unsigned int)a3);\n  if ( v41 )\n    goto LABEL_76;\n  while ( 1 )\n  {\n    *(_OWORD *)&v49[16] = 0LL;\n    *(_OWORD *)v49 = 0LL;\n    v25 = *(_QWORD *)v7;\n    *(_WORD *)&v49[22] = (_WORD)a3;\n    *(_DWORD *)&v49[18] = 524294;\n    BYTE2(v50) = 54;\n    *(_QWORD *)v49 = v25;\n    a3 = (char **)lshpack_enc_encode(v40, v11, v39, v49);\n    chunk_buffer_release(v7, v11);\n    if ( (char **)v11 == a3 )\n    {\nLABEL_63:\n      sub_EC3E((_DWORD *)v4, *((__int64 *)&v4 + 1), 2u);\n    }\n    else\n    {\n      v11 = (__int64)a3;\nLABEL_35:\n      v26 = v4;\n      v27 = (unsigned int)(a1 + 2);\n      v28 = 0;\n      *(_QWORD *)(v26 + 640) += v27;\n      *(_QWORD *)(v26 + 648) += v27;\n      *(_DWORD *)(v4 + 520) = v27;\n      if ( *(_BYTE *)(v4 + 560) )\n        v28 = *(_QWORD *)(v4 + 624) == 0LL;\n      sub_22170(\n        (_QWORD *)(*((_QWORD *)&v4 + 1) + 848LL),\n        *v48,\n        v7,\n        a1,\n        *(_DWORD *)(v4 + 12),\n        *((_QWORD *)&v4 + 1) + 808LL,\n        v11 - *(_DWORD *)v48,\n        v28,\n        (__int64)a3,\n        (__int64)v49);\n    }\n    v30 = __readfsqword(0x28u);\n    result = v30 ^ v53;\n    if ( v30 == v53 )\n      break;\nLABEL_76:\n    v36 = *(_QWORD *)v7;\n    sub_EB7F(v4);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x229a0L", 
            "funcEndAddr": "0x231ccL", 
            "funcName": "h2_send_headers"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall h2_send_1xx(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  unsigned int v3; // ebx\n  __int64 v4; // r15\n  unsigned int v5; // er13\n\n  v2 = chunk_buffer_acquire(a1, a2);\n  buffer_copy_string_len(v2, \":status: \", 9LL);\n  buffer_append_int(v2, *(signed int *)(a1 + 4));\n  if ( *(_DWORD *)(a1 + 552) )\n  {\n    v3 = 0;\n    do\n    {\n      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + 8LL * v3);\n      v5 = *(_DWORD *)(v4 + 40) - (*(_DWORD *)(v4 + 40) != 0);\n      if ( *(_DWORD *)(v4 + 8) != (*(_DWORD *)(v4 + 8) != 0) && *(_DWORD *)(v4 + 40) != (*(_DWORD *)(v4 + 40) != 0) )\n      {\n        buffer_append_str2(\n          v2,\n          \"\\r\\n\",\n          2LL,\n          *(_QWORD *)v4,\n          *(_DWORD *)(v4 + 8) - (unsigned int)(*(_DWORD *)(v4 + 8) != 0));\n        buffer_append_str2(v2, \": \", 2LL, *(_QWORD *)(v4 + 32), v5);\n      }\n      ++v3;\n    }\n    while ( *(_DWORD *)(a1 + 552) > v3 );\n  }\n  buffer_append_string_len(v2, \"\\r\\n\\r\\n\", 4LL);\n  sub_EC7A(a1, a2, *(_BYTE **)v2, *(_DWORD *)(v2 + 8) - (unsigned int)(*(_DWORD *)(v2 + 8) != 0), 0);\n  chunk_buffer_release(v2, a2);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x231d0L", 
            "funcEndAddr": "0x232e7L", 
            "funcName": "h2_send_1xx"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall h2_send_100_continue(__int64 a1, __int64 a2)\n{\n  return sub_EC7A(a1, a2, &unk_4112D, 16LL, 0);\n}\n", 
            "funcStartAddr": "0x232f0L", 
            "funcEndAddr": "0x23304L", 
            "funcName": "h2_send_100_continue"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall h2_send_cqdata(__int64 a1, __int64 a2, _DWORD *a3, unsigned int a4)\n{\n  unsigned int v4; // er15\n  unsigned int v5; // eax\n  signed int v6; // eax\n  _DWORD *v7; // rbp\n  signed int v8; // edx\n  __int64 v9; // r13\n  signed int v10; // esi\n  char *v11; // rcx\n  unsigned int v12; // er14\n  size_t v13; // r12\n  size_t v14; // rbx\n  __int64 v15; // rdi\n  __int64 v16; // r9\n  __int64 v17; // rax\n  void *v18; // rsi\n  void *v19; // rdi\n  __int64 v20; // rdi\n  unsigned int v21; // ebx\n  __int64 v23; // [rsp+0h] [rbp-98h]\n  __int64 v24; // [rsp+8h] [rbp-90h]\n  __int64 v25; // [rsp+10h] [rbp-88h]\n  unsigned int v26; // [rsp+18h] [rbp-80h]\n  int v27; // [rsp+3Ch] [rbp-5Ch]\n  void *src; // [rsp+40h] [rbp-58h]\n  __int64 v29; // [rsp+4Ch] [rbp-4Ch]\n  unsigned __int32 v30; // [rsp+54h] [rbp-44h]\n  unsigned __int64 v31; // [rsp+58h] [rbp-40h]\n\n  v4 = 0;\n  v31 = __readfsqword(0x28u);\n  v5 = *(_DWORD *)(a1 + 12);\n  v29 = 0LL;\n  v30 = _byteswap_ulong(v5);\n  v6 = *(_DWORD *)(a1 + 20);\n  if ( v6 >= 0 )\n  {\n    v7 = a3;\n    v8 = *(_DWORD *)(a2 + 20);\n    v9 = a2;\n    if ( v8 >= 0 )\n    {\n      v10 = a4;\n      if ( v6 < (signed int)a4 )\n      {\n        a4 = *(_DWORD *)(a1 + 20);\n        v10 = *(_DWORD *)(a1 + 20);\n      }\n      if ( v8 < v10 )\n        a4 = v8;\n      v4 = v7[4] - v7[6];\n      if ( a4 < v4 )\n        v4 = a4;\n      if ( v4 )\n      {\n        v11 = (char *)&v29 + 3;\n        v12 = v4;\n        v25 = a1;\n        v4 = 0;\n        v13 = v12;\n        v26 = *(_DWORD *)(*(_QWORD *)(v9 + 808) + 104LL);\n        while ( 1 )\n        {\n          while ( *(_DWORD *)(*(_QWORD *)v7 + 8LL) != 1 )\n          {\nLABEL_19:\n            v20 = *(_QWORD *)(v9 + 848);\n            v21 = v26;\n            if ( (unsigned int)v13 <= v26 )\n              v21 = v13;\n            BYTE4(v29) = BYTE1(v21);\n            BYTE5(v29) = v21;\n            v13 = (unsigned int)v13 - v21;\n            v4 += v21;\n            BYTE3(v29) = BYTE2(v21);\n            chunkqueue_append_mem(v20, (char *)&v29 + 3, 9LL, v11);\n            chunkqueue_steal(*(_QWORD *)(v9 + 848), v7, v21);\n            if ( !(_DWORD)v13 )\n              goto LABEL_22;\n          }\n          v14 = v26 - 9;\n          v15 = *(_QWORD *)(v9 + 848);\n          if ( (unsigned int)v13 < v26 )\n            v14 = v13;\n          v27 = v14;\n          v23 = (unsigned int)(v14 + 9);\n          v24 = chunkqueue_append_buffer_open_sz(v15, v23);\n          src = (void *)(*(_QWORD *)v24 + 9LL);\n          if ( (unsigned int)chunkqueue_peek_data(v7, &src, &v27, *(_QWORD *)(v25 + 128)) || v27 != (_DWORD)v14 )\n          {\n            chunkqueue_remove_empty_chunks((_QWORD **)v7);\n            goto LABEL_19;\n          }\n          v16 = v24;\n          BYTE4(v29) = BYTE1(v14);\n          BYTE5(v29) = v14;\n          v13 = (unsigned int)(v13 - v14);\n          BYTE3(v29) = BYTE2(v14);\n          v4 += v14;\n          v17 = *(_QWORD *)v24;\n          *(_QWORD *)v17 = *(__int64 *)((char *)&v29 + 3);\n          v18 = src;\n          *(_BYTE *)(v17 + 8) = HIBYTE(v30);\n          v19 = (void *)(*(_QWORD *)v24 + 9LL);\n          if ( v19 != v18 )\n          {\n            memcpy(v19, v18, v14);\n            v16 = v24;\n          }\n          buffer_commit(v16, v23);\n          chunkqueue_append_buffer_commit(*(_QWORD *)(v9 + 848), v23);\n          chunkqueue_mark_written(v7, v14);\n          if ( !(_DWORD)v13 )\n          {\nLABEL_22:\n            *(_DWORD *)(v25 + 20) -= v4;\n            *(_DWORD *)(v9 + 20) -= v4;\n            return v4;\n          }\n        }\n      }\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x23310L", 
            "funcEndAddr": "0x2354cL", 
            "funcName": "h2_send_cqdata"
        }, 
        {
            "decompiledFuncCode": "void __fastcall h2_send_end_stream(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  __int64 v4; // r12\n  int v5; // esi\n  void *v6; // rdi\n  int v7; // eax\n  _BYTE *v8; // rcx\n  signed __int64 i; // rbp\n  __int64 v10; // rax\n  _BYTE *v11; // rbx\n  _BYTE *v12; // rax\n  int v13; // edx\n  __int64 v14; // rax\n  _BYTE *v15; // [rsp+0h] [rbp-4050h]\n  int v16; // [rsp+8h] [rbp-4048h]\n  unsigned __int64 v17; // [rsp+4010h] [rbp-40h]\n\n  if ( *(_DWORD *)(a1 + 8) != 6 )\n  {\n    if ( *(_DWORD *)a1 != 9 && *(_BYTE *)(a1 + 560) )\n    {\n      v14 = *(_QWORD *)(a1 + 576);\n      if ( v14 && *(_DWORD *)(v14 + 24) && *(_DWORD *)(v14 + 16) )\n      {\n        v2 = a2;\n        v3 = v14 + 8;\n        v4 = a1;\n        v5 = *(_DWORD *)(v14 + 16);\n        v6 = *(void **)(v14 + 8);\n        v17 = __readfsqword(0x28u);\n        v16 = 1;\n        v7 = http_header_parse_hoff(v6, v5 - (unsigned int)(v5 != 0), (unsigned __int16 *)&v16);\n        if ( (unsigned int)(v7 - 1) <= 0xFFFE && (_WORD)v16 != 1 && (unsigned __int16)v16 <= 0x1FFEu )\n        {\n          v8 = *(_BYTE **)v3;\n          for ( i = 1LL; (unsigned __int16)v16 > (signed int)i; ++i )\n          {\n            v10 = 0LL;\n            if ( (_DWORD)i != 1 )\n              v10 = *((unsigned __int16 *)&v16 + i);\n            v11 = &v8[v10];\n            v15 = v8;\n            if ( v8[v10] == 58 )\n              goto LABEL_14;\n            v12 = memchr(&v8[v10], 58, *((unsigned __int16 *)&v16 + i + 1) - v10);\n            v8 = v15;\n            if ( v12 )\n            {\n              do\n              {\n                v13 = (char)*v11;\n                if ( (unsigned int)(v13 - 65) <= 0x19 )\n                  *v11 = v13 | 0x20;\n                ++v11;\n              }\n              while ( v12 != v11 );\n            }\n          }\n          sub_EC7A(v4, v2, *(_BYTE **)v3, *(_DWORD *)(v3 + 8) - (unsigned int)(*(_DWORD *)(v3 + 8) != 0), 1u);\n        }\n        else\n        {\nLABEL_14:\n          sub_220D0((_DWORD *)(v4 + 8), (unsigned int *)(v4 + 12), v2, (__int64)v8);\n        }\n      }\n      else\n      {\n        sub_220D0((_DWORD *)(a1 + 8), (unsigned int *)(a1 + 12), a2, a2);\n      }\n    }\n    else\n    {\n      sub_EC3E((_DWORD *)a1, a2, 2u);\n    }\n  }\n}\n\nvoid __fastcall h2_send_end_stream(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  __int64 v4; // r12\n  int v5; // esi\n  void *v6; // rdi\n  int v7; // eax\n  _BYTE *v8; // rcx\n  signed __int64 i; // rbp\n  __int64 v10; // rax\n  _BYTE *v11; // rbx\n  _BYTE *v12; // rax\n  int v13; // edx\n  __int64 v14; // rax\n  _BYTE *v15; // [rsp+0h] [rbp-4050h]\n  int v16; // [rsp+8h] [rbp-4048h]\n  unsigned __int64 v17; // [rsp+4010h] [rbp-40h]\n\n  if ( *(_DWORD *)(a1 + 8) != 6 )\n  {\n    if ( *(_DWORD *)a1 != 9 && *(_BYTE *)(a1 + 560) )\n    {\n      v14 = *(_QWORD *)(a1 + 576);\n      if ( v14 && *(_DWORD *)(v14 + 24) && *(_DWORD *)(v14 + 16) )\n      {\n        v2 = a2;\n        v3 = v14 + 8;\n        v4 = a1;\n        v5 = *(_DWORD *)(v14 + 16);\n        v6 = *(void **)(v14 + 8);\n        v17 = __readfsqword(0x28u);\n        v16 = 1;\n        v7 = http_header_parse_hoff(v6, v5 - (unsigned int)(v5 != 0), (unsigned __int16 *)&v16);\n        if ( (unsigned int)(v7 - 1) <= 0xFFFE && (_WORD)v16 != 1 && (unsigned __int16)v16 <= 0x1FFEu )\n        {\n          v8 = *(_BYTE **)v3;\n          for ( i = 1LL; (unsigned __int16)v16 > (signed int)i; ++i )\n          {\n            v10 = 0LL;\n            if ( (_DWORD)i != 1 )\n              v10 = *((unsigned __int16 *)&v16 + i);\n            v11 = &v8[v10];\n            v15 = v8;\n            if ( v8[v10] == 58 )\n              goto LABEL_14;\n            v12 = memchr(&v8[v10], 58, *((unsigned __int16 *)&v16 + i + 1) - v10);\n            v8 = v15;\n            if ( v12 )\n            {\n              do\n              {\n                v13 = (char)*v11;\n                if ( (unsigned int)(v13 - 65) <= 0x19 )\n                  *v11 = v13 | 0x20;\n                ++v11;\n              }\n              while ( v12 != v11 );\n            }\n          }\n          sub_EC7A(v4, v2, *(_BYTE **)v3, *(_DWORD *)(v3 + 8) - (unsigned int)(*(_DWORD *)(v3 + 8) != 0), 1u);\n        }\n        else\n        {\nLABEL_14:\n          sub_220D0((_DWORD *)(v4 + 8), (unsigned int *)(v4 + 12), v2, (__int64)v8);\n        }\n      }\n      else\n      {\n        sub_220D0((_DWORD *)(a1 + 8), (unsigned int *)(a1 + 12), a2, a2);\n      }\n    }\n    else\n    {\n      sub_EC3E((_DWORD *)a1, a2, 2u);\n    }\n  }\n}\n", 
            "funcStartAddr": "0xef68L", 
            "funcEndAddr": "0xf0a1L", 
            "funcName": "h2_send_end_stream"
        }, 
        {
            "decompiledFuncCode": "void __fastcall h2_send_end_stream(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  __int64 v4; // r12\n  int v5; // esi\n  void *v6; // rdi\n  int v7; // eax\n  _BYTE *v8; // rcx\n  signed __int64 i; // rbp\n  __int64 v10; // rax\n  _BYTE *v11; // rbx\n  _BYTE *v12; // rax\n  int v13; // edx\n  __int64 v14; // rax\n  _BYTE *v15; // [rsp+0h] [rbp-4050h]\n  int v16; // [rsp+8h] [rbp-4048h]\n  unsigned __int64 v17; // [rsp+4010h] [rbp-40h]\n\n  if ( *(_DWORD *)(a1 + 8) != 6 )\n  {\n    if ( *(_DWORD *)a1 != 9 && *(_BYTE *)(a1 + 560) )\n    {\n      v14 = *(_QWORD *)(a1 + 576);\n      if ( v14 && *(_DWORD *)(v14 + 24) && *(_DWORD *)(v14 + 16) )\n      {\n        v2 = a2;\n        v3 = v14 + 8;\n        v4 = a1;\n        v5 = *(_DWORD *)(v14 + 16);\n        v6 = *(void **)(v14 + 8);\n        v17 = __readfsqword(0x28u);\n        v16 = 1;\n        v7 = http_header_parse_hoff(v6, v5 - (unsigned int)(v5 != 0), (unsigned __int16 *)&v16);\n        if ( (unsigned int)(v7 - 1) <= 0xFFFE && (_WORD)v16 != 1 && (unsigned __int16)v16 <= 0x1FFEu )\n        {\n          v8 = *(_BYTE **)v3;\n          for ( i = 1LL; (unsigned __int16)v16 > (signed int)i; ++i )\n          {\n            v10 = 0LL;\n            if ( (_DWORD)i != 1 )\n              v10 = *((unsigned __int16 *)&v16 + i);\n            v11 = &v8[v10];\n            v15 = v8;\n            if ( v8[v10] == 58 )\n              goto LABEL_14;\n            v12 = memchr(&v8[v10], 58, *((unsigned __int16 *)&v16 + i + 1) - v10);\n            v8 = v15;\n            if ( v12 )\n            {\n              do\n              {\n                v13 = (char)*v11;\n                if ( (unsigned int)(v13 - 65) <= 0x19 )\n                  *v11 = v13 | 0x20;\n                ++v11;\n              }\n              while ( v12 != v11 );\n            }\n          }\n          sub_EC7A(v4, v2, *(_BYTE **)v3, *(_DWORD *)(v3 + 8) - (unsigned int)(*(_DWORD *)(v3 + 8) != 0), 1u);\n        }\n        else\n        {\nLABEL_14:\n          sub_220D0((_DWORD *)(v4 + 8), (unsigned int *)(v4 + 12), v2, (__int64)v8);\n        }\n      }\n      else\n      {\n        sub_220D0((_DWORD *)(a1 + 8), (unsigned int *)(a1 + 12), a2, a2);\n      }\n    }\n    else\n    {\n      sub_EC3E((_DWORD *)a1, a2, 2u);\n    }\n  }\n}\n\nvoid __fastcall h2_send_end_stream(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  __int64 v4; // r12\n  int v5; // esi\n  void *v6; // rdi\n  int v7; // eax\n  _BYTE *v8; // rcx\n  signed __int64 i; // rbp\n  __int64 v10; // rax\n  _BYTE *v11; // rbx\n  _BYTE *v12; // rax\n  int v13; // edx\n  __int64 v14; // rax\n  _BYTE *v15; // [rsp+0h] [rbp-4050h]\n  int v16; // [rsp+8h] [rbp-4048h]\n  unsigned __int64 v17; // [rsp+4010h] [rbp-40h]\n\n  if ( *(_DWORD *)(a1 + 8) != 6 )\n  {\n    if ( *(_DWORD *)a1 != 9 && *(_BYTE *)(a1 + 560) )\n    {\n      v14 = *(_QWORD *)(a1 + 576);\n      if ( v14 && *(_DWORD *)(v14 + 24) && *(_DWORD *)(v14 + 16) )\n      {\n        v2 = a2;\n        v3 = v14 + 8;\n        v4 = a1;\n        v5 = *(_DWORD *)(v14 + 16);\n        v6 = *(void **)(v14 + 8);\n        v17 = __readfsqword(0x28u);\n        v16 = 1;\n        v7 = http_header_parse_hoff(v6, v5 - (unsigned int)(v5 != 0), (unsigned __int16 *)&v16);\n        if ( (unsigned int)(v7 - 1) <= 0xFFFE && (_WORD)v16 != 1 && (unsigned __int16)v16 <= 0x1FFEu )\n        {\n          v8 = *(_BYTE **)v3;\n          for ( i = 1LL; (unsigned __int16)v16 > (signed int)i; ++i )\n          {\n            v10 = 0LL;\n            if ( (_DWORD)i != 1 )\n              v10 = *((unsigned __int16 *)&v16 + i);\n            v11 = &v8[v10];\n            v15 = v8;\n            if ( v8[v10] == 58 )\n              goto LABEL_14;\n            v12 = memchr(&v8[v10], 58, *((unsigned __int16 *)&v16 + i + 1) - v10);\n            v8 = v15;\n            if ( v12 )\n            {\n              do\n              {\n                v13 = (char)*v11;\n                if ( (unsigned int)(v13 - 65) <= 0x19 )\n                  *v11 = v13 | 0x20;\n                ++v11;\n              }\n              while ( v12 != v11 );\n            }\n          }\n          sub_EC7A(v4, v2, *(_BYTE **)v3, *(_DWORD *)(v3 + 8) - (unsigned int)(*(_DWORD *)(v3 + 8) != 0), 1u);\n        }\n        else\n        {\nLABEL_14:\n          sub_220D0((_DWORD *)(v4 + 8), (unsigned int *)(v4 + 12), v2, (__int64)v8);\n        }\n      }\n      else\n      {\n        sub_220D0((_DWORD *)(a1 + 8), (unsigned int *)(a1 + 12), a2, a2);\n      }\n    }\n    else\n    {\n      sub_EC3E((_DWORD *)a1, a2, 2u);\n    }\n  }\n}\n", 
            "funcStartAddr": "0xef68L", 
            "funcEndAddr": "0xf0a1L", 
            "funcName": "h2_send_end_stream"
        }, 
        {
            "decompiledFuncCode": "void __fastcall h2_retire_stream(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  int v3; // ecx\n  signed __int64 v4; // rdx\n  unsigned int v5; // eax\n  unsigned int v6; // ebx\n\n  if ( a1 )\n  {\n    v2 = *(_QWORD *)(a2 + 808);\n    v3 = *(_DWORD *)(v2 + 64);\n    if ( v3 )\n    {\n      if ( a1 == *(_QWORD *)v2 )\n      {\n        v5 = 0;\nLABEL_9:\n        v6 = v3 - 1;\n        if ( v3 - 1 != v5 )\n          memmove((void *)(v2 + 8LL * v5), (const void *)(v2 + 8LL * v5 + 8), 8LL * (v6 - v5));\n        *(_DWORD *)(v2 + 64) = v6;\n        *(_QWORD *)(v2 + 8LL * v6) = 0LL;\n        sub_222A0(a1);\n      }\n      else\n      {\n        v4 = v2 + 8;\n        v5 = 0;\n        while ( v3 != ++v5 )\n        {\n          v4 += 8LL;\n          if ( *(_QWORD *)(v4 - 8) == a1 )\n            goto LABEL_9;\n        }\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x235c0L", 
            "funcEndAddr": "0x2366aL", 
            "funcName": "h2_retire_stream"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall h2_parse_frames@<rax>(signed __int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rdi>, __int64 a4@<r12>, __int64 *a5@<r13>, __int64 a6@<r14>, __int64 a7@<r15>)\n{\n  _QWORD *v7; // rax\n  __int64 v8; // r8\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  unsigned int v11; // ebp\n  __int64 v12; // rbx\n  unsigned __int32 v13; // eax\n  __int64 v14; // rbp\n  unsigned __int32 v15; // eax\n  __int64 v16; // rcx\n  bool v17; // r8\n  int v18; // esi\n  __int64 *v19; // rdx\n  signed __int64 v20; // rsi\n  __int64 v21; // rbp\n  signed __int64 v22; // rdx\n  __int64 v23; // r9\n  __int64 v24; // rcx\n  int v25; // edx\n  int v26; // edx\n  signed __int64 v27; // rsi\n  __int64 v28; // rax\n  unsigned __int64 v29; // rt1\n  __int64 result; // rax\n  unsigned __int32 v31; // eax\n  int v32; // eax\n  char v33; // al\n  bool v34; // zf\n  __int64 v35; // rcx\n  unsigned int *v36; // rax\n  __int64 v37; // rbp\n  __int64 v38; // rdx\n  unsigned __int64 v39; // rbp\n  char v40; // si\n  __int64 v41; // rdi\n  __int64 v42; // rdx\n  char v43; // di\n  int v44; // eax\n  int v45; // edx\n  __int64 v46; // rax\n  __int64 v47; // rbp\n  __int64 v48; // rdi\n  unsigned int v49; // esi\n  unsigned __int32 v50; // eax\n  int v51; // eax\n  _DWORD *v52; // rdi\n  int v53; // eax\n  int v54; // edx\n  __int64 v55; // rbp\n  unsigned __int32 v56; // eax\n  _DWORD *v57; // rsi\n  int v58; // edi\n  unsigned __int32 v59; // eax\n  _DWORD *v60; // rdx\n  unsigned __int32 v61; // ecx\n  int v62; // esi\n  int v63; // esi\n  unsigned int v64; // edx\n  int v65; // eax\n  __int64 v66; // rcx\n  signed __int64 v67; // rsi\n  _DWORD *v68; // rsi\n  int v69; // er8\n  unsigned int v70; // edx\n  _DWORD **v71; // rdx\n  signed __int64 v72; // rsi\n  signed __int64 v73; // rdi\n  __int64 v74; // rcx\n  int v75; // eax\n  signed __int64 v76; // r8\n  unsigned int v77; // esi\n  int v78; // edx\n  _DWORD *v79; // rdi\n  unsigned int v80; // eax\n  signed __int64 *v81; // rax\n  unsigned int v82; // ebx\n  _BYTE *v83; // r9\n  unsigned int v84; // eax\n  char v85; // bp\n  __int64 v86; // rcx\n  __int64 v87; // rcx\n  signed __int64 v88; // rax\n  __int64 v89; // rsi\n  int v90; // ebx\n  unsigned int v91; // eax\n  __int64 v92; // rsi\n  unsigned int v93; // ebp\n  unsigned int v94; // ebx\n  __int64 v95; // rax\n  unsigned int v96; // er13\n  unsigned int v97; // ebp\n  __int64 v98; // rbx\n  _BYTE *v99; // rdi\n  char v100; // si\n  __int64 v101; // r8\n  unsigned int v102; // ebp\n  int v103; // eax\n  unsigned int v104; // ebp\n  __int64 v105; // ST40_8\n  unsigned int v106; // eax\n  signed __int64 v107; // [rsp+8h] [rbp-100h]\n  __int64 v108; // [rsp+10h] [rbp-F8h]\n  _QWORD *v109; // [rsp+18h] [rbp-F0h]\n  unsigned int v110; // [rsp+20h] [rbp-E8h]\n  signed __int64 v111; // [rsp+20h] [rbp-E8h]\n  bool v112; // [rsp+20h] [rbp-E8h]\n  unsigned int v113; // [rsp+20h] [rbp-E8h]\n  unsigned int v114; // [rsp+28h] [rbp-E0h]\n  __int64 v115; // [rsp+28h] [rbp-E0h]\n  __int64 v116; // [rsp+28h] [rbp-E0h]\n  unsigned __int32 v117; // [rsp+28h] [rbp-E0h]\n  _BYTE *v118; // [rsp+28h] [rbp-E0h]\n  unsigned int v119; // [rsp+30h] [rbp-D8h]\n  unsigned int v120; // [rsp+4Ch] [rbp-BCh]\n  __int64 v121; // [rsp+50h] [rbp-B8h]\n  unsigned int v122; // [rsp+58h] [rbp-B0h]\n  unsigned __int32 v123; // [rsp+5Ch] [rbp-ACh]\n  __int64 v124; // [rsp+60h] [rbp-A8h]\n  __int64 v125; // [rsp+68h] [rbp-A0h]\n  unsigned __int64 v126; // [rsp+78h] [rbp-90h]\n  __int64 v127; // [rsp+80h] [rbp-88h]\n  unsigned __int16 v128; // [rsp+90h] [rbp-78h]\n  unsigned __int16 v129; // [rsp+92h] [rbp-76h]\n  unsigned __int16 v130; // [rsp+94h] [rbp-74h]\n  unsigned __int16 v131; // [rsp+96h] [rbp-72h]\n  unsigned __int8 v132; // [rsp+9Ah] [rbp-6Eh]\n  __int64 v133; // [rsp+A0h] [rbp-68h]\n  __int64 v134; // [rsp+A8h] [rbp-60h]\n  int v135; // [rsp+B0h] [rbp-58h]\n  int v136; // [rsp+B4h] [rbp-54h]\n  int v137; // [rsp+B8h] [rbp-50h]\n  __int16 v138; // [rsp+BCh] [rbp-4Ch]\n  char v139; // [rsp+BEh] [rbp-4Ah]\n  char v140; // [rsp+BFh] [rbp-49h]\n  int v141; // [rsp+C0h] [rbp-48h]\n  unsigned int v142; // [rsp+C4h] [rbp-44h]\n  unsigned __int64 v143; // [rsp+C8h] [rbp-40h]\n\n  v7 = *(_QWORD **)(a3 + 856);\n  v143 = __readfsqword(0x28u);\n  v108 = a3;\n  v109 = v7;\n  v124 = *(_QWORD *)(a3 + 808);\n  v123 = *(_DWORD *)(v124 + 104);\n  v107 = v7[2] - v7[3];\n  if ( v107 > 8 )\n  {\n    a5 = &v127;\n    goto LABEL_3;\n  }\nLABEL_42:\n  v122 = 1;\nLABEL_43:\n  while ( 1 )\n  {\n    v29 = __readfsqword(0x28u);\n    v12 = v29 ^ v143;\n    result = v122;\n    if ( v29 == v143 )\n      return result;\nLABEL_228:\n    v48 = *(_QWORD *)(a7 + 48);\n    v49 = 9;\n    if ( (_DWORD)a4 != -1 )\n    {\n      sub_EC3E((_DWORD *)a7, *(_QWORD *)(a7 + 48), 1u);\n      v49 = 1;\n      v48 = *(_QWORD *)(a7 + 48);\n    }\nLABEL_75:\n    if ( *(_DWORD *)(v125 + 76) )\n    {\n      h2_send_goaway(a1, v125, v48, v49, a6, a7);\n      if ( v122 )\n        goto LABEL_124;\n    }\n    else\n    {\n      if ( v122 )\n      {\n        h2_send_goaway(a1, v125, v48, v49, a6, a7);\nLABEL_124:\n        *(_DWORD *)a7 = 9;\n        *(_DWORD *)(a7 + 8) = 6;\n        v45 = *(_DWORD *)(a7 + 4);\n        goto LABEL_68;\n      }\n      *(_DWORD *)(v125 + 68) = *(_DWORD *)(a7 + 12);\n      h2_send_goaway(a1, v125, v48, v49, a6, a7);\n    }\n    h2_retire_stream(a7, *(_QWORD *)(a7 + 48));\nLABEL_69:\n    v47 = (unsigned int)(a6 + 9);\n    v107 -= v47;\n    a6 = *(unsigned int *)(v121 + 76);\n    if ( (_DWORD)a6 )\n    {\n      if ( v120 > *(_DWORD *)(v121 + 68) )\n      {\n        *(_DWORD *)(a7 + 4) = 0;\n        h2_retire_stream(a7, v108);\n        chunkqueue_mark_written(v109, v47);\n        goto LABEL_72;\n      }\nLABEL_114:\n      chunkqueue_mark_written(v109, v47);\n      goto LABEL_72;\n    }\n    v34 = (*(_BYTE *)(a7 + 233) & 0x40) == 0;\n    *(_DWORD *)(v121 + 68) = v120;\n    if ( !v34 )\n      goto LABEL_114;\n    *(_QWORD *)(a7 + 416) = -(signed __int64)(~*(_BYTE *)(v12 + 4) & 1);\n    chunkqueue_mark_written(v109, v47);\nLABEL_72:\n    *(_QWORD *)(v108 + 1080) = log_monotonic_secs;\n    if ( *(_DWORD *)(v124 + 76) > 0 )\n      goto LABEL_73;\n    while ( 1 )\n    {\n      if ( v107 <= 8 )\n        goto LABEL_42;\nLABEL_3:\n      v8 = *v109;\n      v9 = *(_QWORD *)(*v109 + 16LL);\n      v10 = *(_QWORD *)(*v109 + 24LL);\n      v11 = *(_DWORD *)(v9 + 8) - (*(_DWORD *)(v9 + 8) != 0) - v10;\n      if ( v11 <= 8 )\n      {\n        v80 = sub_EBBD((__int64)v109, 9u);\n        v8 = *v109;\n        v11 = v80;\n        v10 = *(_QWORD *)(*v109 + 24LL);\n        v9 = *(_QWORD *)(*v109 + 16LL);\n      }\n      v12 = *(_QWORD *)v9 + v10;\n      LODWORD(a1) = *(unsigned __int8 *)(v12 + 3);\n      v13 = _byteswap_ulong(*(_DWORD *)v12) >> 8;\n      a6 = v13;\n      if ( v123 < v13 )\n      {\nLABEL_181:\n        h2_send_goaway(a1, a2, v108, 6u, a6, a7);\n        v122 = 0;\n        goto LABEL_43;\n      }\n      a7 = v13 + 9;\n      LODWORD(a4) = v13 + 9;\n      if ( (_BYTE)a1 == 1 )\n        break;\n      if ( !(_BYTE)a1 )\n      {\n        if ( a7 > v107 )\n          goto LABEL_42;\n        a2 = v108;\n        *(_QWORD *)(v108 + 1080) = log_monotonic_secs;\n        v14 = *(_QWORD *)(v108 + 808);\n        v15 = _byteswap_ulong(*(_DWORD *)(v12 + 5)) & 0x7FFFFFFF;\n        if ( !v15 || v15 > *(_DWORD *)(v14 + 68) )\n          goto LABEL_180;\n        if ( *(_BYTE *)(v12 + 4) & 8 )\n        {\n          a2 = *(unsigned __int8 *)(v12 + 9);\n          v110 = *(unsigned __int8 *)(v12 + 9);\n          if ( (unsigned int)a6 <= (unsigned int)a2 )\n            goto LABEL_180;\n          v16 = (unsigned int)(a6 + ~(_DWORD)a2);\n        }\n        else\n        {\n          v16 = (unsigned int)a6;\n          v110 = 0;\n        }\n        v17 = (_DWORD)v16 != 0;\n        LODWORD(a4) = *(_DWORD *)(v108 + 16);\n        if ( (signed int)a4 <= 0 && v17 )\n          goto LABEL_73;\n        v18 = *(_DWORD *)(v14 + 64);\n        if ( !v18 )\n        {\nLABEL_130:\n          v112 = (_DWORD)v16 != 0;\n          chunkqueue_mark_written(*(_QWORD *)(v108 + 856), a7);\n          if ( *(_QWORD *)(v14 + 224) + 2LL < log_monotonic_secs )\n          {\n            if ( *(_DWORD *)(v14 + 76) || !v112 )\n              goto LABEL_73;\n            h2_send_goaway(a1, v66, v108, 0, a6, a7);\n            v122 = 0;\n            goto LABEL_43;\n          }\n          sub_22060((__int64 *)(v108 + 848), 0, a6, v66);\n          goto LABEL_39;\n        }\n        a4 = *(_QWORD *)v14;\n        if ( v15 != *(_DWORD *)(*(_QWORD *)v14 + 12LL) )\n        {\n          v19 = (__int64 *)(v14 + 8);\n          v20 = v14 + 8 + 8LL * (unsigned int)(v18 - 1);\n          while ( (__int64 *)v20 != v19 )\n          {\n            a4 = *v19;\n            ++v19;\n            if ( v15 == *(_DWORD *)(a4 + 12) )\n              goto LABEL_21;\n          }\n          goto LABEL_130;\n        }\nLABEL_21:\n        LODWORD(a1) = *(_DWORD *)(a4 + 8) - 5;\n        v21 = *(_QWORD *)(v108 + 856);\n        if ( (unsigned int)a1 <= 1 )\n        {\n          sub_EBE0(v15, *(_QWORD *)(v108 + 848), 5u);\n          chunkqueue_mark_written(v21, a7);\n          sub_22060((__int64 *)(v108 + 848), 0, a6, v86);\n          goto LABEL_39;\n        }\n        if ( *(_DWORD *)(a4 + 16) <= 0 && v17 && *(_BYTE *)(a4 + 148) & 2 )\n        {\n          v122 = 0;\n          goto LABEL_43;\n        }\n        v114 = v15;\n        v119 = v16;\n        sub_22060((__int64 *)(v108 + 848), 0, a6, v16);\n        v22 = *(_QWORD *)(a4 + 416);\n        v23 = v119;\n        v24 = v119;\n        if ( v22 >= 0 && v22 < v119 + *(_QWORD *)(a4 + 752) )\n        {\n          sub_EC3E((_DWORD *)a4, v108, 1u);\n          chunkqueue_mark_written(v21, a7);\n          goto LABEL_39;\n        }\n        *(_QWORD *)(a4 + 696) += v119;\n        *(_QWORD *)(a4 + 704) += v119;\n        if ( *(_BYTE *)(v12 + 4) & 1 )\n        {\n          v65 = sub_222C0(a4, v108, v119);\n          v23 = v119;\n          if ( !v65 )\n          {\nLABEL_126:\n            chunkqueue_mark_written(v21, a7);\n            goto LABEL_39;\n          }\n        }\n        else\n        {\n          v25 = *(_DWORD *)(a4 + 136);\n          if ( !v25 )\n            goto LABEL_33;\n          v24 = *(_QWORD *)(a4 + 752);\n          v26 = *(_DWORD *)(a4 + 16) - a6;\n          if ( v26 < 0 )\n            v26 = 0;\n          v27 = ((unsigned __int64)*(unsigned int *)(a4 + 136) << 10) - v24 - v119;\n          if ( v27 >= 0 )\n          {\n            if ( v27 < v26 )\n              goto LABEL_32;\n            v67 = v27 - v26;\n            if ( v67 <= (unsigned int)a6 )\n              a6 = (unsigned int)(v67 + 8);\nLABEL_33:\n            v115 = v23;\n            sub_22060((__int64 *)(v108 + 848), *(_DWORD *)(a4 + 12), a6, v24);\n            chunkqueue_mark_written(v21, (((signed int)*(unsigned __int8 *)(v12 + 4) >> 3) & 1) + 9);\n            v28 = *(_QWORD *)(a4 + 744);\n            if ( v28 && *(_DWORD *)(v28 + 8) == 1 && *(_DWORD *)(v28 + 44)\n              || v115 + *(_QWORD *)(a4 + 752) - *(_QWORD *)(a4 + 760) > (signed __int64)&loc_10000 )\n            {\n              if ( (unsigned int)chunkqueue_steal_with_tempfiles(a4 + 736, v21, v115, *(_QWORD *)(a4 + 128)) )\n              {\n                sub_EC3E((_DWORD *)a4, v108, 2u);\n                v122 = 0;\n                goto LABEL_43;\n              }\n            }\n            else\n            {\n              chunkqueue_steal(a4 + 736, v21, v115);\n            }\n            if ( v110 )\n              chunkqueue_mark_written(v21, v110);\nLABEL_39:\n            v107 -= a7;\n            goto LABEL_40;\n          }\n          v78 = *(_DWORD *)(a4 + 4);\n          if ( v27 < -65536 )\n          {\n            if ( v78 )\n            {\n              sub_EBE0(v114, *(_QWORD *)(v108 + 848), 5u);\n              goto LABEL_126;\n            }\nLABEL_179:\n            v79 = *(_DWORD **)(a4 + 128);\n            *(_DWORD *)(a4 + 4) = 413;\n            *(_QWORD *)(a4 + 32) = 0LL;\n            log_error(v79, \"h2.c\", 967LL, (__int64)\"request-size too long: %lld -> 413\", v119 + v24);\n            goto LABEL_126;\n          }\n          if ( !v78 )\n            goto LABEL_179;\n        }\nLABEL_32:\n        a6 = 0LL;\n        goto LABEL_33;\n      }\n      if ( a7 > v107 )\n        goto LABEL_42;\n      if ( v11 < (unsigned int)a7 )\n      {\n        sub_EBBD((__int64)v109, a7);\n        v12 = **(_QWORD **)(*v109 + 16LL) + *(_QWORD *)(*v109 + 24LL);\n        LODWORD(a1) = *(unsigned __int8 *)(v12 + 3);\n      }\n      switch ( (_BYTE)a1 )\n      {\n        case 2:\n          if ( (_DWORD)a6 != 5 )\n            goto LABEL_222;\n          v59 = _byteswap_ulong(*(_DWORD *)(v12 + 5)) & 0x7FFFFFFF;\n          if ( !v59 )\n            goto LABEL_169;\n          v60 = *(_DWORD **)(v108 + 808);\n          v61 = _byteswap_ulong(*(_DWORD *)(v12 + 9)) & 0x7FFFFFFF;\n          v62 = v60[16];\n          if ( !v62 )\n            goto LABEL_175;\n          v52 = *(_DWORD **)v60;\n          if ( *(_DWORD *)(*(_QWORD *)v60 + 12LL) == v59 )\n          {\n            if ( v59 != v61 )\n              goto LABEL_88;\n          }\n          else\n          {\n            v71 = (_DWORD **)(v60 + 2);\n            v72 = (signed __int64)&v71[v62 - 1];\n            do\n            {\n              if ( v71 == (_DWORD **)v72 )\n              {\nLABEL_175:\n                if ( v59 == v61 )\n                  sub_EBE0(v59, *(_QWORD *)(v108 + 848), 1u);\n                goto LABEL_88;\n              }\n              v52 = *v71;\n              ++v71;\n            }\n            while ( v59 != v52[3] );\n            if ( v59 != v61 )\n              goto LABEL_88;\n          }\n          goto LABEL_144;\n        case 3:\n          if ( (_DWORD)a6 != 4 )\n            goto LABEL_222;\n          v56 = _byteswap_ulong(*(_DWORD *)(v12 + 5)) & 0x7FFFFFFF;\n          if ( !v56 )\n            goto LABEL_169;\n          v57 = *(_DWORD **)(v108 + 808);\n          v58 = v57[16];\n          if ( !v58 )\n            goto LABEL_173;\n          a1 = *(_QWORD *)v57;\n          if ( v56 == *(_DWORD *)(*(_QWORD *)v57 + 12LL) )\n            goto LABEL_105;\n          a2 = (__int64)(v57 + 2);\n          a1 = (unsigned int)(v58 - 1);\n          v73 = (signed __int64)&v57[2 * a1 + 2];\n          while ( v73 != a2 )\n          {\n            a1 = *(_QWORD *)a2;\n            a2 += 8LL;\n            if ( v56 == *(_DWORD *)(a1 + 12) )\n            {\nLABEL_105:\n              if ( !*(_DWORD *)(a1 + 8) )\n                goto LABEL_169;\n              *(_DWORD *)a1 = 9;\n              *(_DWORD *)(a1 + 8) = 6;\n              goto LABEL_88;\n            }\n          }\nLABEL_173:\n          if ( v56 <= v57[17] )\n            goto LABEL_88;\n          goto LABEL_169;\n        case 4:\n          if ( *(_DWORD *)(v12 + 5) & 0xFFFFFF7F )\n            goto LABEL_169;\n          v55 = *(_QWORD *)(v108 + 808);\n          if ( *(_BYTE *)(v12 + 4) & 1 )\n          {\n            if ( (_DWORD)a6 )\n            {\nLABEL_222:\n              h2_send_goaway(a1, a2, v108, 6u, a6, a7);\n            }\n            else\n            {\n              if ( !*(_QWORD *)(v55 + 80) )\n                goto LABEL_169;\n              *(_QWORD *)(v55 + 80) = 0LL;\n            }\n          }\n          else\n          {\n            sub_22450(a6, a2, v108, (unsigned __int8 *)(v12 + 9), a6);\n            if ( *(_DWORD *)(v55 + 76) <= 0 )\n              chunkqueue_append_mem(*(_QWORD *)(v108 + 848), &unk_41268, 9LL, v74);\n          }\n          goto LABEL_88;\n        case 5:\n        case 9:\n          goto LABEL_180;\n        case 6:\n          if ( (_DWORD)a6 != 8 )\n            goto LABEL_222;\n          v53 = (*(unsigned __int8 *)(v12 + 7) << 8) | (*(unsigned __int8 *)(v12 + 6) << 16);\n          a2 = *(unsigned __int8 *)(v12 + 8);\n          v54 = *(_BYTE *)(v12 + 5) & 0x7F;\n          *(_BYTE *)(v12 + 5) = v54;\n          LODWORD(a1) = v54 << 24;\n          if ( (unsigned int)a1 | (unsigned int)a2 | v53 )\n            goto LABEL_169;\n          if ( !(*(_BYTE *)(v12 + 4) & 1) )\n          {\n            *(_BYTE *)(v12 + 4) = 1;\n            chunkqueue_append_mem(*(_QWORD *)(v108 + 848), v12, 17LL, a2);\n          }\n          goto LABEL_88;\n        case 7:\n          if ( *(_DWORD *)(v12 + 5) & 0xFFFFFF7F )\n            goto LABEL_180;\n          h2_send_goaway(*(_DWORD *)(v12 + 13), a2, v108, *(_DWORD *)(v12 + 13) != 0, a6, a7);\n          if ( !*(_DWORD *)(*(_QWORD *)(v108 + 808) + 64LL) )\n            goto LABEL_73;\n          goto LABEL_88;\n        case 8:\n          if ( (_DWORD)a6 != 4 )\n            goto LABEL_222;\n          v50 = _byteswap_ulong(*(_DWORD *)(v12 + 9));\n          LODWORD(a1) = _byteswap_ulong(*(_DWORD *)(v12 + 5)) & 0x7FFFFFFF;\n          if ( !(_DWORD)a1 )\n          {\n            v51 = v50 & 0x7FFFFFFF;\n            v52 = (_DWORD *)v108;\n            if ( v51 )\n            {\n              LODWORD(a1) = 0x7FFFFFFF - v51;\n              a2 = *(unsigned int *)(v108 + 20);\n              if ( 0x7FFFFFFF - v51 >= (signed int)a2 )\n                goto LABEL_87;\n              goto LABEL_165;\n            }\n            v77 = 1;\nLABEL_166:\n            h2_send_goaway(a1, a2, v108, v77, a6, a7);\n            goto LABEL_88;\n          }\n          v68 = *(_DWORD **)(v108 + 808);\n          v69 = v68[16];\n          if ( v69 )\n          {\n            v52 = *(_DWORD **)v68;\n            if ( (_DWORD)a1 == *(_DWORD *)(*(_QWORD *)v68 + 12LL) )\n            {\n              if ( (v52[2] & 0xFFFFFFFD) == 4 )\n                goto LABEL_88;\nLABEL_143:\n              v51 = v50 & 0x7FFFFFFF;\n              if ( !v51 )\n              {\nLABEL_144:\n                v70 = 1;\nLABEL_145:\n                sub_EC3E(v52, v108, v70);\n                goto LABEL_88;\n              }\n              a2 = (unsigned int)v52[5];\n              if ( (signed int)a2 <= 0x7FFFFFFF - v51 )\n              {\nLABEL_87:\n                v52[5] = a2 + v51;\n                goto LABEL_88;\n              }\n              if ( (_DWORD)a1 )\n              {\n                v70 = 3;\n                goto LABEL_145;\n              }\nLABEL_165:\n              v77 = 3;\n              goto LABEL_166;\n            }\n            a2 = (__int64)(v68 + 2);\n            v76 = (signed __int64)&v68[2 * (v69 - 1) + 2];\n            do\n            {\n              if ( a2 == v76 )\n                goto LABEL_167;\n              v52 = *(_DWORD **)a2;\n              a2 += 8LL;\n            }\n            while ( (_DWORD)a1 != v52[3] );\n            if ( (v52[2] & 0xFFFFFFFD) != 4 )\n              goto LABEL_143;\n          }\n          else\n          {\nLABEL_167:\n            if ( (unsigned int)a1 > v68[17] && !v68[19] )\nLABEL_169:\n              h2_send_goaway(a1, a2, v108, 1u, a6, a7);\n          }\nLABEL_88:\n          v107 -= a7;\n          chunkqueue_mark_written(v109, a7);\n          break;\n        default:\n          goto LABEL_88;\n      }\nLABEL_40:\n      if ( *(_DWORD *)(v124 + 76) > 0 )\n        goto LABEL_73;\n    }\n    if ( a7 > v107 )\n      goto LABEL_42;\n    if ( v11 < (unsigned int)a7 )\n    {\n      v91 = sub_EBBD((__int64)v109, a7);\n      v8 = *v109;\n      v11 = v91;\n      v12 = **(_QWORD **)(*v109 + 16LL) + *(_QWORD *)(*v109 + 24LL);\n    }\n    if ( *(_BYTE *)(v12 + 4) & 4 )\n    {\nLABEL_49:\n      v121 = *(_QWORD *)(v108 + 808);\n      v31 = _byteswap_ulong(*(_DWORD *)(v12 + 5));\n      v120 = v31 & 0x7FFFFFFF;\n      if ( !(v31 & 1) )\n      {\n        h2_send_goaway(a1, v31 & 0x7FFFFFFF, v108, 1u, a6, a7);\n        chunkqueue_mark_written(v109, (unsigned int)(a6 + 9));\n        v122 = 0;\n        continue;\n      }\n      v32 = *(_DWORD *)(v121 + 64);\n      if ( v120 > *(_DWORD *)(v121 + 68) )\n      {\n        if ( v32 != 8 )\n        {\n          a7 = sub_21F10(v108, v108);\n          v122 = 0;\n          *(_DWORD *)(a7 + 12) = v120;\n          v33 = *(_BYTE *)(v12 + 4);\n          *(_DWORD *)a7 = 3;\n          v34 = *(_BYTE *)(a7 + 152) == 0;\n          *(_DWORD *)(a7 + 8) = (v33 & 1u) < 1 ? 3 : 5;\n          *(_QWORD *)(a7 + 600) = log_epoch_secs;\n          if ( !v34 )\n            clock_gettime(0, (struct timespec *)(a7 + 600));\n          goto LABEL_54;\n        }\n        v81 = *(signed __int64 **)(v108 + 808);\n        if ( *(_QWORD *)(v121 + 80) )\n        {\n          do\n          {\n            a1 = *v81;\n            if ( *(_QWORD *)(*v81 + 416) == *(_QWORD *)(*v81 + 752) )\n              goto LABEL_73;\n            ++v81;\n          }\n          while ( v81 != (signed __int64 *)(v121 + 64) );\n        }\n        *(_DWORD *)(v121 + 68) = v120;\n        sub_EBE0(v120, *(_QWORD *)(v108 + 848), 7u);\n        v92 = (unsigned int)(a6 + 9);\n        v107 -= v92;\n        chunkqueue_mark_written(v109, v92);\n        goto LABEL_72;\n      }\n      v87 = *(unsigned __int8 *)(v12 + 4);\n      if ( !v32 )\n        goto LABEL_215;\n      a7 = *(_QWORD *)v121;\n      if ( v120 != *(_DWORD *)(*(_QWORD *)v121 + 12LL) )\n      {\n        a1 = v121 + 8;\n        v88 = v121 + 8 + 8LL * (unsigned int)(v32 - 1);\n        while ( v88 != a1 )\n        {\n          a7 = *(_QWORD *)a1;\n          a1 += 8LL;\n          if ( v120 == *(_DWORD *)(a7 + 12) )\n            goto LABEL_209;\n        }\nLABEL_215:\n        h2_send_goaway(a1, v87, v108, 1u, a6, a7);\nLABEL_212:\n        v89 = (unsigned int)(a6 + 9);\n        v107 -= v89;\n        v90 = *(_DWORD *)(v121 + 76);\n        chunkqueue_mark_written(v109, v89);\n        if ( v90 > 0 )\n          goto LABEL_73;\n        goto LABEL_72;\n      }\nLABEL_209:\n      if ( (unsigned int)(*(_DWORD *)(a7 + 8) - 3) > 1 )\n      {\n        sub_EC3E((_DWORD *)a7, v108, 5u);\n        goto LABEL_212;\n      }\n      if ( !(v87 & 1) )\n      {\n        sub_EC3E((_DWORD *)a7, v108, 1u);\n        goto LABEL_212;\n      }\n      v122 = 1;\n      if ( !(unsigned int)sub_222C0(a7, v108, 0) )\n        goto LABEL_212;\nLABEL_54:\n      v35 = *(_BYTE *)(v12 + 4) & 0x20;\n      if ( *(_BYTE *)(v12 + 4) & 8 )\n      {\n        v63 = *(unsigned __int8 *)(v12 + 9);\n        v36 = (unsigned int *)(v12 + 10);\n        v64 = v63 + ((unsigned __int8)v35 >= 1u ? 5 : 0) + 1;\n        if ( (unsigned int)a6 < v64 )\n        {\n          h2_send_goaway(v64, v35, v108, 1u, a6, a7);\n          if ( v122 )\n          {\n            *(_DWORD *)a7 = 9;\n            *(_DWORD *)(a7 + 8) = 6;\n            chunkqueue_mark_written(v109, (unsigned int)(a6 + 9));\n            v122 = 0;\n          }\n          else\n          {\n            h2_retire_stream(a7, v108);\n            chunkqueue_mark_written(v109, (unsigned int)(a6 + 9));\n          }\n          continue;\n        }\n        v37 = (unsigned int)(a6 - 1 - v63);\n      }\n      else\n      {\n        v36 = (unsigned int *)(v12 + 9);\n        v37 = (unsigned int)a6;\n      }\n      if ( (_BYTE)v35 )\n      {\n        if ( v120 == (_byteswap_ulong(*v36) & 0x7FFFFFFF) )\n        {\n          sub_EC3E((_DWORD *)a7, v108, 1u);\n          v107 -= (unsigned int)(a6 + 9);\n          if ( !v122 )\n            h2_retire_stream(a7, v108);\n          chunkqueue_mark_written(v109, (unsigned int)(a6 + 9));\n          goto LABEL_72;\n        }\n        v36 = (unsigned int *)((char *)v36 + 5);\n        v37 = (unsigned int)(v37 - 5);\n      }\n      v38 = *(_QWORD *)(a7 + 48);\n      v39 = (unsigned __int64)v36 + v37;\n      v137 = 0;\n      v40 = *(_BYTE *)(a7 + 162);\n      v126 = (unsigned __int64)v36;\n      v41 = *(_QWORD *)(v38 + 808);\n      v138 = 1;\n      v125 = v41;\n      v141 = *(_DWORD *)(a7 + 92);\n      v111 = v41 + 112;\n      v142 = *(_DWORD *)(a7 + 88);\n      v42 = *(_QWORD *)(a7 + 568);\n      v139 = v122;\n      if ( *(_DWORD *)(v42 + 12) <= 0xFFFFu )\n        ck_assert_failed((__int64)\"h2.c\", 1234LL, (__int64)\"tb->size >= 65536\");\n      v116 = *(_QWORD *)v42;\n      if ( (unsigned __int64)v36 >= v39 )\n      {\nLABEL_67:\n        v45 = *(_DWORD *)(a7 + 4);\n        LODWORD(a4) = 0;\n      }\n      else\n      {\n        while ( 1 )\n        {\n          a5[3] = 0LL;\n          *(_OWORD *)(a5 + 1) = 0LL;\n          v127 = v116;\n          v131 = -1;\n          LODWORD(a4) = lshpack_dec_decode(v111, &v126, v39, a5);\n          if ( !v129 )\n          {\n            v48 = *(_QWORD *)(a7 + 48);\n            LODWORD(a4) = -1;\n            v49 = 9;\n            goto LABEL_75;\n          }\n          if ( (_DWORD)a4 )\n            goto LABEL_228;\n          v135 = v129;\n          v43 = byte_41280[v132];\n          v133 = v127 + v128;\n          v134 = v130 + v127;\n          v136 = v131;\n          v140 = v43;\n          if ( v40 )\n            log_error(\n              *(_DWORD **)(a7 + 128),\n              \"h2.c\",\n              1264LL,\n              (__int64)\"fd:%d id:%u rqst: %.*s: %.*s\",\n              *(unsigned int *)(*(_QWORD *)(a7 + 48) + 816LL),\n              *(unsigned int *)(a7 + 12),\n              v129,\n              v127 + v128,\n              v131,\n              v130 + v127);\n          v44 = http_request_parse_header(a7, &v133);\n          if ( v44 )\n            break;\n          if ( v126 >= v39 )\n            goto LABEL_67;\n        }\n        v45 = *(_DWORD *)(a7 + 4);\n        if ( !v45 )\n        {\n          *(_DWORD *)(a7 + 4) = v44;\n          LODWORD(a4) = 0;\n          v45 = v44;\n        }\n      }\nLABEL_68:\n      v46 = (unsigned int)(v137 + 2);\n      *(_DWORD *)(a7 + 224) += v46;\n      *(_QWORD *)(a7 + 696) += v46;\n      v137 = v46;\n      *(_QWORD *)(a7 + 704) += v46;\n      if ( !(v45 | (unsigned int)a4 | v122) )\n      {\n        if ( !(_BYTE)v138\n          || (v75 = http_request_validate_pseudohdrs(a7, HIBYTE(v138), v142), (*(_DWORD *)(a7 + 4) = v75) == 0) )\n        {\n          http_request_headers_process_h2(a7, *(unsigned __int16 *)(*(_QWORD *)(a7 + 48) + 846LL));\n        }\n      }\n      goto LABEL_69;\n    }\n    v82 = a4;\n    v83 = (_BYTE *)(**(_QWORD **)(v8 + 16) + *(_QWORD *)(v8 + 24));\n    v113 = *(_DWORD *)(*(_QWORD *)(v108 + 808) + 104LL);\n    v117 = _byteswap_ulong(*(_DWORD *)(v83 + 5)) & 0x7FFFFFFF;\n    v84 = v11;\n    do\n    {\n      a1 = v82 + 9;\n      if ( a1 > v107 )\n      {\n        if ( v82 == -9 )\n          goto LABEL_73;\n        goto LABEL_42;\n      }\n      if ( (unsigned int)a1 > v84 )\n      {\n        v84 = sub_EBBD((__int64)v109, v82 + 9);\n        v8 = *v109;\n        v83 = (_BYTE *)(**(_QWORD **)(v8 + 16) + *(_QWORD *)(v8 + 24));\n      }\n      a1 = v82 + 3;\n      if ( v83[a1] != 9 )\n        goto LABEL_180;\n      v85 = v83[v82 + 4];\n      LODWORD(a1) = _byteswap_ulong(*(_DWORD *)&v83[v82]) >> 8;\n      a2 = _byteswap_ulong(*(_DWORD *)&v83[v82 + 5]);\n      if ( v117 != (_DWORD)a2 )\n        goto LABEL_180;\n      if ( v113 < (unsigned int)a1 )\n        goto LABEL_181;\n      v82 += a1 + 9;\n      if ( v82 > 0xFFFF )\n        goto LABEL_181;\n      if ( v82 > v84 )\n      {\n        v84 = sub_EBBD((__int64)v109, v82);\n        if ( v82 > v84 )\n          goto LABEL_239;\n        v8 = *v109;\n        v83 = (_BYTE *)(**(_QWORD **)(*v109 + 16LL) + *(_QWORD *)(*v109 + 24LL));\n      }\n    }\n    while ( !(v85 & 4) );\n    v93 = v84;\n    if ( !(v83[4] & 8) )\n    {\n      v94 = a4;\nLABEL_233:\n      v95 = a7;\n      a7 = (__int64)a5;\n      v96 = v93;\n      v97 = v94;\n      v98 = v8;\n      while ( 1 )\n      {\n        v99 = &v83[v97];\n        v118 = v83;\n        v100 = v83[(unsigned int)(a4 + 4)];\n        a6 = _byteswap_ulong(*(_DWORD *)&v83[v95]) >> 8;\n        v97 += a6;\n        LODWORD(a4) = a4 + a6 + 9;\n        memmove(v99, &v83[v95 + 9], (unsigned int)a6);\n        v83 = v118;\n        v109[3] += 9LL;\n        if ( v100 & 4 )\n          break;\n        v95 = (unsigned int)a4;\n      }\n      v101 = v98;\n      v82 = v97;\n      v102 = v96;\n      a5 = (__int64 *)a7;\n      v118[2] = v82 - 9;\n      v118[1] = (unsigned __int16)(v82 - 9) >> 8;\n      *v118 = (v82 - 9) >> 16;\n      v103 = v82;\n      if ( (unsigned int)a4 < v102 )\n      {\n        v104 = v102 - a4;\n        v105 = v101;\n        memmove(&v118[v82], &v118[(unsigned int)a4], v104);\n        v101 = v105;\n        v103 = v82 + v104;\n      }\n      a1 = *(_QWORD *)(v101 + 16);\n      v106 = *(_DWORD *)(v101 + 24) + v103;\n      *(_BYTE *)(*(_QWORD *)a1 + v106) = 0;\n      *(_DWORD *)(a1 + 8) = v106 + 1;\nLABEL_239:\n      if ( !v82 )\n        goto LABEL_73;\n      if ( v82 <= v107 )\n      {\n        a1 = *(_QWORD *)(*v109 + 16LL);\n        v12 = *(_QWORD *)a1 + *(_QWORD *)(*v109 + 24LL);\n        a6 = _byteswap_ulong(*(_DWORD *)v12) >> 8;\n        v107 = v109[2] - v109[3];\n        goto LABEL_49;\n      }\n      goto LABEL_42;\n    }\n    a2 = (unsigned __int8)v83[9];\n    LODWORD(a1) = _byteswap_ulong(*(_DWORD *)v83) >> 8;\n    if ( (unsigned int)a1 >= (unsigned int)a2 + (((unsigned __int8)v83[(unsigned int)(a6 + 13)] << 26 >> 31) & 5) + 1 )\n    {\n      v83[9] = 0;\n      v94 = a4 - a2;\n      v109[3] += a2;\n      goto LABEL_233;\n    }\nLABEL_180:\n    h2_send_goaway(a1, a2, v108, 1u, a6, a7);\nLABEL_73:\n    v122 = 0;\n  }\n}\n", 
            "funcStartAddr": "0x23670L", 
            "funcEndAddr": "0x24af0L", 
            "funcName": "h2_parse_frames"
        }, 
        {
            "decompiledFuncCode": "void __usercall h2_retire_con(unsigned int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rdi>, __int64 a4@<rsi>, __int64 a5@<r14>, signed __int64 a6@<r15>)\n{\n  _DWORD *v6; // r12\n  int v7; // eax\n  __int64 *v8; // rbx\n  signed __int64 v9; // r13\n  __int64 v10; // rdi\n  int v11; // eax\n  _QWORD *v12; // r13\n  __int64 v13; // r14\n  _QWORD *v14; // rdx\n  __int64 v15; // rax\n  _DWORD **v16; // r13\n  signed __int64 v17; // r15\n  _DWORD *v18; // r14\n\n  v6 = *(_DWORD **)(a4 + 808);\n  if ( v6 )\n  {\n    if ( *(_DWORD *)a3 == 9 )\n    {\n      v7 = v6[16];\n      if ( v7 )\n      {\n        v8 = *(__int64 **)(a4 + 808);\n        v9 = (signed __int64)&v6[2 * (v7 - 1) + 2];\n        do\n        {\n          v10 = *v8;\n          ++v8;\n          sub_222A0(v10);\n        }\n        while ( v8 != (__int64 *)v9 );\n      }\n    }\n    else\n    {\n      h2_send_goaway(a1, a2, a4, 0, a5, a6);\n      v11 = v6[16];\n      if ( v11 )\n      {\n        v16 = (_DWORD **)v6;\n        v17 = (signed __int64)&v6[2 * (v11 - 1) + 2];\n        do\n        {\n          v18 = *v16;\n          ++v16;\n          sub_EC3E(v18, a4, 2u);\n          sub_222A0((__int64)v18);\n        }\n        while ( v16 != (_DWORD **)v17 );\n      }\n      v12 = *(_QWORD **)(a4 + 848);\n      if ( *v12 )\n      {\n        v13 = v12[3];\n        (*(void (__fastcall **)(__int64, _QWORD, __int64))(a4 + 888))(a4, *(_QWORD *)(a4 + 848), v12[2] - v13);\n        v14 = *(_QWORD **)(a3 + 184);\n        v15 = v12[3] - v13;\n        *(_QWORD *)(a4 + 864) += v15;\n        *(_QWORD *)(a4 + 872) += v15;\n        if ( v14 )\n          *v14 += v15;\n      }\n    }\n    *(_QWORD *)(a4 + 808) = 0LL;\n    lshpack_enc_cleanup(v6 + 38);\n    lshpack_dec_cleanup(v6 + 28);\n    free(v6);\n  }\n}\n", 
            "funcStartAddr": "0x24af0L", 
            "funcEndAddr": "0x24c35L", 
            "funcName": "h2_retire_con"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall request_config_reset(__int64 a1)\n{\n  const __m128i *v1; // rax\n  const __m128i *v2; // roff\n  __int64 result; // rax\n\n  v1 = (const __m128i *)qword_2583A0;\n  v2 = (const __m128i *)qword_2583A0;\n  *(__m128i *)(a1 + 88) = _mm_loadu_si128((const __m128i *)qword_2583A0);\n  *(__m128i *)(a1 + 104) = _mm_loadu_si128(v2 + 1);\n  *(__m128i *)(a1 + 120) = _mm_loadu_si128(v1 + 2);\n  *(__m128i *)(a1 + 136) = _mm_loadu_si128(v1 + 3);\n  *(__m128i *)(a1 + 152) = _mm_loadu_si128(v1 + 4);\n  *(__m128i *)(a1 + 168) = _mm_loadu_si128(v1 + 5);\n  *(__m128i *)(a1 + 184) = _mm_loadu_si128(v1 + 6);\n  *(__m128i *)(a1 + 200) = _mm_loadu_si128(v1 + 7);\n  result = v1[8].m128i_i64[0];\n  *(_QWORD *)(a1 + 216) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x24c40L", 
            "funcEndAddr": "0x24cacL", 
            "funcName": "request_config_reset"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall request_init_data(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  void *v6; // rax\n  void *v7; // rax\n  int v8; // edi\n  void *v9; // rax\n  void *v10; // rax\n\n  v3 = a1;\n  v4 = a3;\n  chunkqueue_init(a1 + 624);\n  chunkqueue_init(a1 + 680);\n  chunkqueue_init(a1 + 736);\n  *(_BYTE *)(a1 + 565) = 0;\n  v5 = *(_QWORD *)(v4 + 48);\n  *(_DWORD *)(a1 + 24) = -1;\n  *(_DWORD *)(a1 + 28) = -1;\n  *(_DWORD *)(a1 + 520) = 0;\n  *(_QWORD *)(a1 + 48) = a2;\n  *(_QWORD *)(a1 + 568) = v5;\n  *(_QWORD *)(a1 + 432) = -1LL;\n  *(_QWORD *)(v3 + 448) = v3 + 280;\n  v6 = calloc(1uLL, 8LL * (unsigned int)(*(_DWORD *)(v4 + 368) + 1));\n  *(_QWORD *)(a1 + 40) = v6;\n  if ( !v6 )\n    ck_assert_failed((__int64)\"reqpool.c\", 63LL, (__int64)\"((void *)0) != r->plugin_ctx\");\n  v7 = calloc(*(unsigned int *)(*(_QWORD *)(v4 + 8) + 16LL), 2uLL);\n  *(_QWORD *)(a1 + 64) = v7;\n  if ( !v7 )\n    ck_assert_failed((__int64)\"reqpool.c\", 66LL, (__int64)\"((void *)0) != r->cond_cache\");\n  v8 = *(_DWORD *)(v4 + 16);\n  if ( v8 )\n  {\n    *(_DWORD *)(v3 + 800) = v8;\n    v9 = calloc(v8, 8uLL);\n    *(_QWORD *)(v3 + 72) = v9;\n    if ( !v9 )\n      ck_assert_failed((__int64)\"reqpool.c\", 72LL, (__int64)\"((void *)0) != r->cond_match\");\n    v10 = calloc(v8, 0x20uLL);\n    *(_QWORD *)(v3 + 80) = v10;\n    if ( !v10 )\n      ck_assert_failed((__int64)\"reqpool.c\", 74LL, (__int64)\"((void *)0) != r->cond_match_data\");\n  }\n  return request_config_reset(v3);\n}\n", 
            "funcStartAddr": "0x24cb0L", 
            "funcEndAddr": "0x24e0aL", 
            "funcName": "request_init_data"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall request_reset(__int64 a1, __int64 a2)\n{\n  bool v2; // cf\n  bool v3; // zf\n  int v4; // eax\n\n  plugins_call_handle_request_reset(a1, a2);\n  http_response_reset();\n  v2 = *(_DWORD *)(a1 + 224) < 0x1000u;\n  v3 = *(_DWORD *)(a1 + 224) == 4096;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_DWORD *)(a1 + 24) = -1;\n  *(_DWORD *)(a1 + 28) = -1;\n  *(_QWORD *)(a1 + 440) = 0LL;\n  *(_QWORD *)(a1 + 416) = 0LL;\n  *(_QWORD *)(a1 + 424) = 0LL;\n  *(_QWORD *)(a1 + 432) = -1LL;\n  *(_QWORD *)(a1 + 232) = 0LL;\n  *(_WORD *)(a1 + 565) = 0;\n  *(_BYTE *)(a1 + 567) = 0;\n  *(_DWORD *)(a1 + 616) = 0;\n  *(_DWORD *)(a1 + 272) = 0;\n  if ( v2 || v3 )\n  {\n    *(_DWORD *)(a1 + 256) = 0;\n    *(_DWORD *)(a1 + 464) = 0;\n    *(_DWORD *)(a1 + 496) = 0;\n  }\n  else\n  {\n    v2 = *(_DWORD *)(a1 + 468) < 0x1000u;\n    v3 = *(_DWORD *)(a1 + 468) == 4096;\n    *(_DWORD *)(a1 + 464) = 0;\n    if ( !v2 && !v3 )\n      buffer_free_ptr(a1 + 456);\n    v2 = *(_DWORD *)(a1 + 500) < 0x1000u;\n    v3 = *(_DWORD *)(a1 + 500) == 4096;\n    *(_DWORD *)(a1 + 496) = 0;\n    if ( !v2 && !v3 )\n      buffer_free_ptr(a1 + 488);\n    array_reset_data_strings(a1 + 240);\n  }\n  v4 = *(_DWORD *)(a1 + 408);\n  *(_DWORD *)(a1 + 224) = 0;\n  if ( v4 )\n    array_reset_data_strings(a1 + 392);\n  chunkqueue_reset(a1 + 736);\n  return request_config_reset(a1);\n}\n", 
            "funcStartAddr": "0x24e10L", 
            "funcEndAddr": "0x24f4eL", 
            "funcName": "request_reset"
        }, 
        {
            "decompiledFuncCode": "void __fastcall request_reset_ex(__int64 a1)\n{\n  bool v1; // cf\n  bool v2; // zf\n\n  v1 = *(_DWORD *)(a1 + 308) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 308) == 4096;\n  *(_DWORD *)(a1 + 288) = 0;\n  *(_DWORD *)(a1 + 304) = 0;\n  *(_QWORD *)(a1 + 448) = a1 + 280;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 296);\n  v1 = *(_DWORD *)(a1 + 324) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 324) == 4096;\n  *(_DWORD *)(a1 + 320) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 312);\n  v1 = *(_DWORD *)(a1 + 340) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 340) == 4096;\n  *(_DWORD *)(a1 + 336) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 328);\n  v1 = *(_DWORD *)(a1 + 388) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 388) == 4096;\n  *(_DWORD *)(a1 + 384) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 376);\n  v1 = *(_DWORD *)(a1 + 484) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 484) == 4096;\n  *(_DWORD *)(a1 + 480) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 472);\n  v1 = *(_DWORD *)(a1 + 468) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 468) == 4096;\n  *(_DWORD *)(a1 + 464) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 456);\n  v1 = *(_DWORD *)(a1 + 500) < 0x1000u;\n  v2 = *(_DWORD *)(a1 + 500) == 4096;\n  *(_DWORD *)(a1 + 496) = 0;\n  if ( !v1 && !v2 )\n    buffer_free_ptr(a1 + 488);\n}\n", 
            "funcStartAddr": "0x24f50L", 
            "funcEndAddr": "0x25081L", 
            "funcName": "request_reset_ex"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall request_release(_QWORD *a1, __int64 a2)\n{\n  void *result; // rax\n\n  chunkqueue_reset(a1 + 85);\n  request_reset((__int64)a1, a2);\n  request_reset_ex((__int64)a1);\n  result = ptr;\n  *(_DWORD *)a1 = 0;\n  ptr = a1;\n  a1[6] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x25090L", 
            "funcEndAddr": "0x250caL", 
            "funcName": "request_release"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall request_acquire(__int64 a1)\n{\n  _QWORD *result; // rax\n  __int64 v2; // rdx\n  _QWORD *v3; // rax\n  _QWORD *v4; // ST08_8\n\n  result = ptr;\n  if ( ptr )\n  {\n    ptr = (void *)*((_QWORD *)ptr + 6);\n  }\n  else\n  {\n    v3 = calloc(1uLL, 0x328uLL);\n    if ( !v3 )\n      ck_assert_failed((__int64)\"reqpool.c\", 300LL, (__int64)\"r\");\n    v4 = v3;\n    request_init_data((__int64)v3, a1, *(_QWORD *)(a1 + 912));\n    result = v4;\n  }\n  v2 = *(_QWORD *)(a1 + 912);\n  result[6] = a1;\n  result[71] = *(_QWORD *)(v2 + 48);\n  return result;\n}\n", 
            "funcStartAddr": "0x250d0L", 
            "funcEndAddr": "0x2515aL", 
            "funcName": "request_acquire"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sock_addr_cache_inet_ntop_copy_buffer(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rbx\n  __m128i *v4; // rdx\n  __int64 v5; // rax\n  __int64 result; // rax\n  __int64 v7; // rax\n  unsigned int v8; // er12\n  __int64 v9; // rax\n  _BYTE *v10; // rsi\n  signed __int64 v11; // rdi\n  int v12; // er13\n  int v13; // er13\n  __int64 v14; // rax\n  _BYTE *v15; // rsi\n  int v16; // er13\n\n  v2 = a1;\n  v3 = a2;\n  if ( *(_WORD *)a2 == 2 )\n  {\n    v7 = 0LL;\n    while ( dword_258530[v7] != *(_DWORD *)(a2 + 4) )\n    {\n      if ( ++v7 == 4 )\n        goto LABEL_9;\n    }\n    v8 = 0;\n    buffer_copy_string(a1, &byte_2584E0[17 * (signed int)v7]);\n    return v8;\n  }\n  if ( *(_WORD *)a2 != 10 )\n  {\nLABEL_9:\n    v8 = sock_addr_inet_ntop_copy_buffer(a1, a2);\n    if ( v8 )\n    {\n      if ( *(_QWORD *)a1 )\n      {\n        **(_BYTE **)a1 = 0;\n        v8 = -1;\n        *(_DWORD *)(a1 + 8) = 1;\n      }\n      else\n      {\n        v8 = -1;\n        buffer_extend(a1, 0LL);\n      }\n    }\n    else\n    {\n      if ( *(_WORD *)a2 == 2 )\n      {\n        v14 = dword_2583C4;\n        v15 = *(_BYTE **)a1;\n        dword_258530[v14] = *(_DWORD *)(v3 + 4);\n        v16 = v14 + 1;\n        memcpy(&byte_2584E0[17 * v14], v15, (unsigned int)(*(_DWORD *)(a1 + 8) == 0) + *(_DWORD *)(a1 + 8));\n        result = 0LL;\n        if ( v16 == 4 )\n          v16 = 0;\n        dword_2583C4 = v16;\n        return result;\n      }\n      if ( *(_WORD *)a2 == 10 )\n      {\n        v9 = dword_2583C0;\n        v10 = *(_BYTE **)a1;\n        v11 = 3LL * dword_2583C0;\n        v12 = dword_2583C0;\n        stru_2584A0[dword_2583C0] = _mm_loadu_si128((const __m128i *)(v3 + 8));\n        v13 = v12 + 1;\n        memcpy(&byte_2583E0[16 * v11 - v9], v10, (unsigned int)(*(_DWORD *)(v2 + 8) == 0) + *(_DWORD *)(v2 + 8));\n        result = 0LL;\n        if ( v13 == 4 )\n          v13 = 0;\n        dword_2583C0 = v13;\n        return result;\n      }\n    }\n    return v8;\n  }\n  v4 = stru_2584A0;\n  v5 = 0LL;\n  while ( (*(_OWORD *)(a2 + 8) ^ *(_OWORD *)v4) != 0LL )\n  {\n    ++v5;\n    ++v4;\n    if ( v5 == 4 )\n      goto LABEL_9;\n  }\n  buffer_copy_string(a1, &byte_2583E0[47 * v5]);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x25160L", 
            "funcEndAddr": "0x25385L", 
            "funcName": "sock_addr_cache_inet_ntop_copy_buffer"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall network_accept_tcp_nagle_disable(int fd)\n{\n  int v2; // [rsp+0h] [rbp-28h]\n  socklen_t optlen; // [rsp+4h] [rbp-24h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-20h]\n\n  v4 = __readfsqword(0x28u);\n  if ( dword_258084 )\n  {\n    if ( dword_258084 >= 0 || (optlen = 4, getsockopt(fd, 6, 1, &v2, &optlen)) || (dword_258084 = v2 == 0, !v2) )\n    {\n      v2 = 1;\n      setsockopt(fd, 6, 1, &v2, 4u);\n    }\n  }\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x25390L", 
            "funcEndAddr": "0x2542cL", 
            "funcName": "network_accept_tcp_nagle_disable"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_25430(unsigned __int16 *a1, struct sockaddr *a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // r13\n  __int64 v4; // rbx\n  __int64 v5; // r15\n  int v6; // edi\n  unsigned __int32 v7; // eax\n  unsigned __int32 v8; // ST0C_4\n  __m128i *v9; // rax\n  signed __int64 result; // rax\n  int v11; // eax\n  __int64 v12; // r9\n  __int64 v13; // [rsp+18h] [rbp-C0h]\n  struct sockaddr addr; // [rsp+20h] [rbp-B8h]\n  unsigned __int64 v15; // [rsp+98h] [rbp-40h]\n\n  v2 = (__int64)a1;\n  v3 = *((_QWORD *)a1 + 16);\n  v15 = __readfsqword(0x28u);\n  if ( !((unsigned __int8)a2 & 1) )\n    goto LABEL_21;\n  v4 = *(unsigned int *)(v3 + 92);\n  if ( (signed int)v4 > 100 )\n  {\n    v4 = 100LL;\n  }\n  else if ( (signed int)v4 <= 0 )\n  {\n    goto LABEL_10;\n  }\n  v5 = *a1;\n  while ( 1 )\n  {\n    v6 = *(_DWORD *)(v2 + 112);\n    a2 = &addr;\n    v13 = 112LL;\n    v7 = fdevent_accept_listenfd(v6, &addr);\n    if ( v7 == -1 )\n      break;\n    if ( (_WORD)v5 != 1 )\n    {\n      v8 = v7;\n      network_accept_tcp_nagle_disable(v7);\n      v7 = v8;\n    }\n    LODWORD(a2) = v2;\n    v9 = connection_accepted(v3, v2, (const __m128i *)&addr, v7);\n    if ( v9 )\n    {\n      connection_state_machine(v4, v2, (int *)v9->m128i_i64, v3, (__int64)&v13, v5);\n      v4 = (unsigned int)(v4 - 1);\n      if ( (_DWORD)v4 )\n        continue;\n    }\n    goto LABEL_10;\n  }\n  v11 = *__errno_location();\n  if ( v11 != 11 )\n  {\n    if ( v11 <= 11 )\n    {\n      if ( v11 == 4 )\n        goto LABEL_10;\n    }\n    else if ( v11 == 24 || v11 == 103 )\n    {\n      goto LABEL_10;\n    }\n    a2 = (struct sockaddr *)\"network.c\";\n    log_perror(*(_DWORD **)(v3 + 112), \"network.c\", 94LL, (__int64)\"accept()\");\n  }\nLABEL_10:\n  result = 0LL;\n  while ( __readfsqword(0x28u) != v15 )\n  {\nLABEL_21:\n    v12 = (unsigned int)a2;\n    a2 = (struct sockaddr *)\"network.c\";\n    log_error(\n      *(_DWORD **)(v3 + 112),\n      \"network.c\",\n      51LL,\n      (__int64)\"strange event for server socket %d %d\",\n      *(unsigned int *)(v2 + 112),\n      v12);\n    result = 4LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x25430L", 
            "funcEndAddr": "0x2559dL", 
            "funcName": "sub_25430"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_255A0(int fd, _QWORD *a2, _QWORD *a3, char a4)\n{\n  _QWORD *v4; // r13\n  char v5; // bp\n  __int64 *v6; // rcx\n  _QWORD *v7; // r12\n  unsigned int v8; // ebx\n  __int64 v9; // r14\n  __int64 v10; // rdx\n  __int64 v11; // rsi\n  __int64 v12; // r8\n  __int64 v13; // rdi\n  __int64 v14; // rsi\n  __int64 v15; // rax\n  ssize_t v16; // rax\n  ssize_t v17; // rdx\n  bool v18; // zf\n  unsigned int v19; // ebx\n  __int64 result; // rax\n  unsigned __int64 v21; // rt1\n  __int64 v22; // [rsp+0h] [rbp-238h]\n  __int64 v23; // [rsp+8h] [rbp-230h]\n  unsigned __int64 v24; // [rsp+208h] [rbp-30h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = (__int64 *)*a2;\n  v24 = __readfsqword(0x28u);\n  if ( !v6 || *((_DWORD *)v6 + 2) )\n  {\nLABEL_20:\n    v19 = 0;\n    chunkqueue_remove_finished_chunks(v4);\n    goto LABEL_17;\n  }\n  v7 = a3;\n  v8 = fd;\n  v9 = 0LL;\n  v10 = 0LL;\n  while ( 1 )\n  {\n    v13 = v6[2];\n    v14 = v6[3];\n    v15 = *(_DWORD *)(v13 + 8) - (unsigned int)(*(_DWORD *)(v13 + 8) != 0) - v14;\n    if ( v15 > 0 )\n      break;\n    if ( *(_DWORD *)(v13 + 8) - (*(_DWORD *)(v13 + 8) != 0) != v14 )\n      ck_assert_failed((__int64)\"network_write.c\", 104LL, (__int64)\"len >= 0\");\nLABEL_6:\n    v6 = (__int64 *)*v6;\n    if ( !v6 || *((_DWORD *)v6 + 2) )\n      goto LABEL_11;\n  }\n  v11 = *(_QWORD *)v13 + v14;\n  v12 = v10++;\n  v12 *= 16LL;\n  v9 += v15;\n  *(__int64 *)((char *)&v23 + v12) = v15;\n  *(__int64 *)((char *)&v22 + v12) = v11;\n  if ( v10 == 32 )\n  {\n    LODWORD(v10) = 32;\n    goto LABEL_12;\n  }\n  if ( *v7 > v9 )\n    goto LABEL_6;\nLABEL_11:\n  if ( !v10 )\n    goto LABEL_20;\nLABEL_12:\n  v16 = writev(v8, (const struct iovec *)&v22, v10);\n  if ( v16 < 0 )\n    goto LABEL_21;\n  v17 = *v7 - v16;\n  v18 = *v7 == v16;\n  *v7 = v17;\n  if ( v17 < 0 || v18 || (v19 = 0, v16 != v9) )\n    v19 = -3;\n  chunkqueue_mark_written(v4, v16);\nLABEL_17:\n  while ( 1 )\n  {\n    result = v19;\n    v21 = __readfsqword(0x28u);\n    v8 = v21 ^ v24;\n    if ( v21 == v24 )\n      break;\nLABEL_21:\n    v19 = sub_10861(v8, v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x255a0L", 
            "funcEndAddr": "0x256f6L", 
            "funcName": "sub_255A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_25700@<rax>(signed __int64 *a1@<rdx>, _DWORD *a2@<rcx>, unsigned int a3@<edi>, __int64 *a4@<rsi>, unsigned int a5@<r12d>)\n{\n  _DWORD *v5; // r13\n  __int64 v6; // r15\n  __int64 v7; // rcx\n  signed __int64 v8; // rbx\n  __int64 v9; // rdi\n  signed __int64 *v10; // r14\n  signed __int64 v11; // rdx\n  signed __int64 v12; // rax\n  signed __int64 v13; // rbx\n  ssize_t v14; // rax\n  ssize_t v15; // rdx\n  unsigned int v16; // ebx\n  __int64 result; // rax\n  __int64 v18; // [rsp+38h] [rbp-4050h]\n  char buf; // [rsp+40h] [rbp-4048h]\n  unsigned __int64 v20; // [rsp+4048h] [rbp-40h]\n\n  v5 = a2;\n  v6 = *a4;\n  v20 = __readfsqword(0x28u);\n  v7 = *(_QWORD *)(v6 + 24);\n  v8 = *(_QWORD *)(v6 + 32) - v7;\n  if ( *a1 <= v8 )\n    v8 = *a1;\n  if ( v8 <= 0 )\n  {\n    if ( v8 )\n      ck_assert_failed((__int64)\"network_write.c\", 104LL, (__int64)\"len >= 0\");\n    v16 = 0;\n    chunkqueue_remove_finished_chunks(a4);\n  }\n  else\n  {\n    a5 = a3;\n    v9 = *(unsigned int *)(v6 + 40);\n    v10 = a1;\n    if ( (signed int)v9 >= 0 )\n      goto LABEL_5;\n    v18 = *(_QWORD *)(v6 + 24);\n    if ( !(unsigned int)chunkqueue_open_file_chunk(a4, v5) )\n    {\n      v9 = *(unsigned int *)(v6 + 40);\n      v7 = v18;\nLABEL_5:\n      v11 = 0x4000LL;\n      if ( v8 <= 0x4000 )\n        v11 = v8;\n      v12 = __pread64_chk(v9, &buf, v11, v7, 0x4000LL);\n      v13 = v12;\n      if ( v12 <= 0 )\n      {\n        v16 = -1;\n        log_perror(v5, \"network_write.c\", 176LL, (__int64)\"read\");\n      }\n      else\n      {\n        v14 = write(a5, &buf, v12);\n        if ( v14 < 0 )\n          goto LABEL_20;\n        v15 = *v10 - v14;\n        *v10 = v15;\n        if ( v13 != v14 || (v16 = 0, v15 <= 0) )\n          v16 = -3;\n        chunkqueue_mark_written(a4, v14);\n      }\n      goto LABEL_13;\n    }\n    v16 = -1;\n  }\nLABEL_13:\n  while ( 1 )\n  {\n    result = v16;\n    if ( __readfsqword(0x28u) == v20 )\n      break;\nLABEL_20:\n    v16 = sub_10861(a5, (char)v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x25700L", 
            "funcEndAddr": "0x25908L", 
            "funcName": "sub_25700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_25910(unsigned int a1, __int64 *a2, __int64 a3, _DWORD *a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, unsigned __int64 a9)\n{\n  _DWORD *v9; // r13\n  __int64 *v10; // rbp\n  __int64 v11; // rdx\n  int v12; // eax\n  signed __int64 v13; // rbx\n  int v14; // esi\n  ssize_t v15; // rax\n  __int64 result; // rax\n  int v17; // eax\n  ssize_t retaddr; // [rsp+58h] [rbp+0h]\n\n  v9 = a4;\n  v10 = a2;\n  a9 = __readfsqword(0x28u);\n  a7 = a3;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v11 = *v10;\n        if ( !*v10 )\n          goto LABEL_12;\n        v12 = *(_DWORD *)(v11 + 8);\n        if ( v12 )\n          break;\n        result = sub_255A0(a1, v10, &a7, (char)v9);\nLABEL_17:\n        if ( (_DWORD)result )\n        {\n          if ( (_DWORD)result == -3 )\n            result = 0LL;\n          goto LABEL_14;\n        }\n      }\n      if ( v12 != 1 )\n        goto LABEL_13;\n      v13 = *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24);\n      a8 = *(_QWORD *)(v11 + 24);\n      if ( a7 <= v13 )\n        v13 = a7;\n      if ( v13 > 0 )\n        break;\n      if ( v13 )\n        goto LABEL_43;\n      chunkqueue_remove_finished_chunks(v10);\n    }\n    v14 = *(_DWORD *)(v11 + 40);\n    if ( v14 < 0 )\n    {\n      retaddr = v11;\n      if ( (unsigned int)chunkqueue_open_file_chunk(v10, v9) )\n      {\nLABEL_13:\n        result = 0xFFFFFFFFLL;\n        goto LABEL_14;\n      }\n      v14 = *(_DWORD *)(retaddr + 40);\n    }\n    v15 = sendfile64(a1, v14, &a8, v13);\n    if ( v15 <= 0 )\n      break;\n    retaddr = v15;\n    chunkqueue_mark_written(v10, v15);\n    a7 -= retaddr;\n    if ( a7 <= 0 || retaddr != v13 )\n      goto LABEL_12;\n  }\n  if ( v15 == -1 )\n  {\n    v17 = *__errno_location();\n    if ( v17 != 38 )\n    {\n      if ( v17 > 38 )\n      {\n        if ( v17 != 97 )\n        {\n          if ( v17 > 97 )\n          {\n            if ( v17 != 104 && v17 != 107 )\n              goto LABEL_29;\n            goto LABEL_36;\n          }\n          if ( (unsigned int)(v17 - 94) > 1 )\n            goto LABEL_29;\n        }\n      }\n      else\n      {\n        if ( v17 == 11 )\n          goto LABEL_12;\n        if ( v17 <= 11 )\n        {\n          if ( v17 == 4 )\n          {\n            result = 0LL;\n            goto LABEL_14;\n          }\nLABEL_29:\n          log_perror(v9, \"network_write.c\", 479LL, (__int64)\"sendfile(): fd: %d\", a1);\n          result = 0xFFFFFFFFLL;\n          goto LABEL_14;\n        }\n        if ( v17 != 22 )\n        {\n          if ( v17 != 32 )\n            goto LABEL_29;\nLABEL_36:\n          result = 4294967294LL;\n          goto LABEL_14;\n        }\n      }\n    }\n    result = sub_25700(&a7, v9, a1, v10, a1);\n    goto LABEL_17;\n  }\n  if ( v15 )\n  {\nLABEL_12:\n    result = 0LL;\n    goto LABEL_14;\n  }\n  log_error(v9, \"network_write.c\", 490LL, (__int64)\"sendfile(): fd: %d file truncated\", a1);\n  result = 0xFFFFFFFFLL;\nLABEL_14:\n  if ( __readfsqword(0x28u) != a9 )\nLABEL_43:\n    ck_assert_failed((__int64)\"network_write.c\", 104LL, (__int64)\"len >= 0\");\n  return result;\n}\n", 
            "funcStartAddr": "0x25910L", 
            "funcEndAddr": "0x25b7cL", 
            "funcName": "sub_25910"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_25B80(char *a1, char *a2, unsigned int a3, char a4)\n{\n  char v4; // r8\n  signed int v5; // ecx\n  char *result; // rax\n  unsigned int v7; // edx\n  char v8; // cl\n\n  v4 = *a1;\n  v5 = 1 << a4;\n  result = a1 + 1;\n  if ( v5 - 1 <= a3 )\n  {\n    v7 = a3 + 1 - v5;\n    *a1 = (v5 - 1) | v4;\n    if ( v7 > 0x7F )\n    {\n      if ( a2 <= result )\n        return a1;\n      while ( 1 )\n      {\n        v8 = v7;\n        v7 >>= 7;\n        *(++result - 1) = v8 | 0x80;\n        if ( v7 <= 0x7F )\n          break;\n        if ( a2 == result )\n          return a1;\n      }\n    }\n    if ( a2 > result )\n    {\n      *result++ = v7;\n      return result;\n    }\n    return a1;\n  }\n  *a1 = v4 | a3;\n  return result;\n}\n", 
            "funcStartAddr": "0x25b80L", 
            "funcEndAddr": "0x25beeL", 
            "funcName": "sub_25B80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_25BF0(unsigned __int64 *a1, unsigned __int64 a2, char a3, unsigned int *a4)\n{\n  _BYTE *v4; // r11\n  unsigned int *v5; // r10\n  unsigned int v6; // edx\n  unsigned __int64 v7; // rax\n  unsigned int v8; // ecx\n  unsigned int v9; // er9\n  unsigned int v10; // ecx\n  unsigned __int8 v11; // r8\n  int v12; // edx\n\n  v4 = (_BYTE *)*a1;\n  v5 = a4;\n  v6 = (1 << a3) - 1;\n  v7 = *a1 + 1;\n  v8 = v6 & *(_BYTE *)*a1;\n  if ( v6 > v8 )\n  {\n    *a1 = v7;\n    *v5 = v8;\n    return 0LL;\n  }\n  if ( v7 >= a2 )\n    return (unsigned int)((signed __int64)(v7 - (_QWORD)v4) < 6) - 2;\n  v7 = (unsigned __int64)(v4 + 2);\n  v9 = v8 + (v4[1] & 0x7F);\n  v10 = 7;\n  if ( v4[1] < 0 )\n  {\n    while ( a2 > v7 )\n    {\n      v11 = *(_BYTE *)(++v7 - 1);\n      v12 = (*(_BYTE *)(v7 - 1) & 0x7F) << v10;\n      v10 += 7;\n      v9 += v12;\n      if ( (v11 & 0x80u) == 0 )\n      {\n        if ( v10 > 0x1C && (v10 != 35 || v11 > 0xFu || v9 - (*(unsigned __int8 *)(v7 - 1) << 28) >= v9) )\n          return 4294967294LL;\n        goto LABEL_13;\n      }\n    }\n    return (unsigned int)((signed __int64)(v7 - (_QWORD)v4) < 6) - 2;\n  }\nLABEL_13:\n  *a1 = v7;\n  *v5 = v9;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x25bf0L", 
            "funcEndAddr": "0x25cb6L", 
            "funcName": "sub_25BF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_25CC0(__int64 a1)\n{\n  __int64 v1; // rdx\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 v4; // rsi\n  int v5; // eax\n  signed __int64 v6; // rcx\n  __int64 v7; // r8\n  _QWORD *v8; // rax\n  int v9; // eax\n  __int64 v10; // rcx\n\n  v1 = a1;\n  v2 = *(_QWORD *)(a1 + 24);\n  v3 = *(_QWORD *)(v2 + 16);\n  *(_QWORD *)(v1 + 24) = v3;\n  if ( !v3 )\n    *(_QWORD *)(v1 + 32) = v1 + 24;\n  v4 = *(_QWORD *)(v1 + 40);\n  v5 = ~(-1 << *(_DWORD *)(v1 + 16));\n  v6 = v4 + 32LL * (*(_DWORD *)(v2 + 28) & (unsigned int)v5);\n  v7 = **(_QWORD **)(v6 + 16);\n  *(_QWORD *)(v6 + 16) = v7;\n  if ( !v7 )\n    *(_QWORD *)(v6 + 24) = v6 + 16;\n  v8 = (_QWORD *)(v4 + 32LL * (*(_DWORD *)(v2 + 32) & (unsigned int)v5));\n  if ( *v8 == v2 )\n  {\n    v10 = *(_QWORD *)(v2 + 8);\n    *v8 = v10;\n    if ( !v10 )\n      v8[1] = v8;\n  }\n  v9 = *(_DWORD *)v1 - 32 - *(_DWORD *)(v2 + 36) - *(_DWORD *)(v2 + 40);\n  --*(_DWORD *)(v1 + 12);\n  *(_DWORD *)v1 = v9;\n  free((void *)v2);\n}\n", 
            "funcStartAddr": "0x25cc0L", 
            "funcEndAddr": "0x25d5dL", 
            "funcName": "sub_25CC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_25D60(__int64 a1)\n{\n  __int64 v1; // rdx\n  __int64 v2; // rcx\n  __int64 v3; // rax\n  _DWORD *v4; // rdi\n\n  v1 = *(unsigned int *)(a1 + 8);\n  v2 = *(_QWORD *)(a1 + 16);\n  v3 = a1;\n  --*(_DWORD *)(a1 + 4);\n  *(_DWORD *)(a1 + 8) = v1 + 1;\n  v4 = *(_DWORD **)(v2 + 8 * v1);\n  LODWORD(v1) = *(_DWORD *)(v3 + 32) - 32 - *v4 - v4[1];\n  ++*(_DWORD *)(v3 + 36);\n  *(_DWORD *)(v3 + 32) = v1;\n  free(v4);\n}\n", 
            "funcStartAddr": "0x25d60L", 
            "funcEndAddr": "0x25d8fL", 
            "funcName": "sub_25D60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_25D90(__int64 a1)\n{\n  int v1; // eax\n  __int64 v2; // rbx\n  __int64 v3; // rsi\n  __int64 v4; // rdi\n  __int64 result; // rax\n\n  v1 = *(unsigned __int8 *)(a1 + 29);\n  v2 = a1;\n  if ( !(v1 & 8) )\n  {\n    v3 = *(unsigned __int16 *)(a1 + 18);\n    v4 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 16);\n    if ( !(_WORD)v3 )\n      v4 = 0LL;\n    *(_DWORD *)(v2 + 8) = XXH32(v4, v3, 39378473LL);\n    v1 = *(unsigned __int8 *)(v2 + 29);\n  }\n  if ( !(v1 & 0x10) )\n  {\n    *(_DWORD *)(v2 + 12) = XXH32(\n                             *(_QWORD *)v2 + *(unsigned __int16 *)(v2 + 20),\n                             *(unsigned __int16 *)(v2 + 22),\n                             *(unsigned int *)(v2 + 8));\n    v1 = *(unsigned __int8 *)(v2 + 29);\n  }\n  result = v1 | 0x18u;\n  *(_BYTE *)(v2 + 29) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x25d90L", 
            "funcEndAddr": "0x25deaL", 
            "funcName": "sub_25D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_25DF0@<rax>(void *dest@<rdi>, char *a2@<rdx>, unsigned int a3@<ecx>, unsigned __int64 a4@<rsi>, __int64 a5@<r10>)\n{\n  char *v5; // r15\n  _BYTE *v6; // r13\n  unsigned int v7; // ebx\n  size_t v8; // rdx\n  char v9; // al\n  unsigned int v10; // eax\n  char *v11; // rdx\n  char v12; // di\n  __int64 *v13; // rcx\n  __int64 result; // rax\n  char *v15; // rax\n  char *v16; // r12\n  char *v17; // rbp\n  char *v18; // r8\n  int v19; // ecx\n  __int64 v20; // r10\n  unsigned __int64 v21; // r10\n  char v22; // r9^1\n  void **v23; // r9\n  int v24; // er11\n  __int64 v25; // rdi\n  int v26; // er9\n  int v27; // edi\n  __int64 v28; // r11\n  char *v29; // r9\n  unsigned __int64 v30; // r10\n  char *v31; // rcx\n  signed int v32; // eax\n  signed __int64 v33; // rdi\n  char v34; // dl\n  char *v35; // rdx\n  signed __int64 v36; // rdx\n  unsigned int v37; // ebp\n  size_t v38; // r12\n  char *v39; // [rsp+0h] [rbp-58h]\n  char src; // [rsp+14h] [rbp-44h]\n  char v41; // [rsp+15h] [rbp-43h]\n  __int16 v42; // [rsp+16h] [rbp-42h]\n  unsigned __int64 v43; // [rsp+18h] [rbp-40h]\n\n  v5 = a2;\n  v6 = dest;\n  v7 = a3;\n  v43 = __readfsqword(0x28u);\n  if ( a4 <= 1 )\n  {\n    v8 = a3;\n    if ( a4 != 1 )\n      return 0xFFFFFFFFLL;\n    goto LABEL_3;\n  }\n  v8 = a3;\n  v15 = (char *)dest + 1;\n  v16 = &v5[a3];\n  v39 = (char *)dest + 1;\n  v17 = (char *)dest + (signed int)a4;\n  if ( v16 == v5 )\n  {\n    LODWORD(v15) = (_DWORD)dest + 1;\n    v29 = (char *)dest + 1;\nLABEL_21:\n    if ( v17 < v29 )\n      goto LABEL_3;\n    v32 = (_DWORD)v15 - (_DWORD)v39;\n    goto LABEL_23;\n  }\n  v18 = v5;\n  v19 = 0;\n  do\n  {\n    while ( 1 )\n    {\n      v23 = &off_45660 + (unsigned __int8)*(++v18 - 1);\n      v24 = *((_DWORD *)v23 + 1);\n      v25 = *(unsigned int *)v23;\n      v26 = v24 + v19;\n      if ( (unsigned int)(v24 + v19) > 0x3F )\n        break;\n      v19 += v24;\n      a5 = v25 | (a5 << v24);\n      if ( v16 == v18 )\n        goto LABEL_15;\n    }\n    if ( v17 < v15 + 8 )\n      goto LABEL_3;\n    v20 = a5 << (64 - (unsigned __int8)v19);\n    v19 = v26 - 64;\n    v21 = ((unsigned int)v25 >> (v26 - 64)) | (unsigned __int64)v20;\n    v15[7] = v21;\n    *v15 = HIBYTE(v21);\n    v15[1] = BYTE6(v21);\n    v15[2] = BYTE5(v21);\n    v15[3] = BYTE4(v21);\n    v15[4] = BYTE3(v21);\n    v15[5] = BYTE2(v21);\n    v22 = BYTE1(v21);\n    a5 = (unsigned int)v25;\n    v15[6] = v22;\n    v15 += 8;\n  }\n  while ( v16 != v18 );\nLABEL_15:\n  v27 = -v19 & 7;\n  v28 = (unsigned int)(v27 + v19) >> 3;\n  v29 = &v15[v28];\n  if ( !v19 )\n    goto LABEL_21;\n  if ( v17 < v29 )\n    goto LABEL_3;\n  v30 = ((1 << v27) - 1) | (unsigned __int64)(a5 << v27);\n  v31 = v15 + 1;\n  switch ( (_DWORD)v28 )\n  {\n    case 2:\n      v31 = v15++;\n      goto LABEL_33;\n    case 3:\n      goto LABEL_32;\n    case 4:\n      v31 = v15++;\n      goto LABEL_31;\n    case 5:\n      goto LABEL_30;\n    case 6:\n      v31 = v15++;\n      goto LABEL_29;\n    case 7:\n      goto LABEL_28;\n    case 8:\n      *v15 = HIBYTE(v30);\n      v33 = (signed __int64)(v15++ + 2);\n      v31 = (char *)v33;\nLABEL_28:\n      *v15 = BYTE6(v30);\n      v15 = v31 + 1;\nLABEL_29:\n      *v31 = BYTE5(v30);\n      v31 = v15 + 1;\nLABEL_30:\n      *v15 = BYTE4(v30);\n      v15 = v31 + 1;\nLABEL_31:\n      *v31 = BYTE3(v30);\n      v31 = v15 + 1;\nLABEL_32:\n      *v15 = BYTE2(v30);\n      v15 = v31 + 1;\nLABEL_33:\n      *v31 = BYTE1(v30);\n      LODWORD(v31) = (_DWORD)v15 + 1;\n      break;\n    default:\n      break;\n  }\n  *v15 = v30;\n  v32 = (_DWORD)v31 - (_DWORD)v39;\nLABEL_23:\n  if ( v32 > 0 && v8 >= v32 )\n  {\n    if ( v32 <= 126 )\n    {\n      v34 = v32;\n      result = (unsigned int)(v32 + 1);\n      *v6 = v34 | 0x80;\n      return result;\n    }\n    v7 = v32;\n    v5 = v39;\n    v9 = -1;\n    goto LABEL_5;\n  }\nLABEL_3:\n  if ( a4 - 1 < v8 )\n    return 0xFFFFFFFFLL;\n  v9 = 127;\n  if ( v7 <= 0x7E )\n  {\n    *v6 = v7;\n    memcpy(v6 + 1, v5, v8);\n    return v7 + 1;\n  }\nLABEL_5:\n  src = v9;\n  v10 = v7 - 127;\n  v11 = &v41;\n  if ( v7 - 127 <= 0x7F )\n  {\n    v35 = (char *)&v42;\n    v41 = v10;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v12 = v10;\n      v13 = (__int64 *)(v11 + 1);\n      v10 >>= 7;\n      *v11 = v12 | 0x80;\n      if ( v10 <= 0x7F )\n        break;\n      ++v11;\n      if ( v13 == (__int64 *)&v43 )\n        return 0xFFFFFFFFLL;\n    }\n    if ( v13 >= (__int64 *)&v43 )\n      return 0xFFFFFFFFLL;\n    v35 = v11 + 2;\n    *(_BYTE *)v13 = v10;\n    if ( v35 == &src )\n      return 0xFFFFFFFFLL;\n  }\n  v36 = v35 - &src;\n  v37 = v7 + v36;\n  if ( v7 + (unsigned int)v36 > a4 )\n    return 0xFFFFFFFFLL;\n  v38 = (unsigned int)v36;\n  memmove(&v6[(unsigned int)v36], v5, v7);\n  memcpy(v6, &src, v38);\n  return v37;\n}\n", 
            "funcStartAddr": "0x25df0L", 
            "funcEndAddr": "0x26172L", 
            "funcName": "sub_25DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_26180(void *dest, unsigned __int64 a2, unsigned __int64 *a3, unsigned __int64 a4)\n{\n  unsigned __int64 *v4; // rbx\n  char *v5; // rdx\n  __int64 result; // rax\n  int v7; // er13\n  char v8; // r14\n  int v9; // ebp\n  unsigned __int64 v10; // r15\n  unsigned __int8 *v11; // rsi\n  unsigned int v12; // er12\n  char *v13; // r8\n  unsigned __int8 *v14; // r10\n  char *v15; // rax\n  char v16; // dl\n  unsigned __int8 v17; // r11\n  char v18; // al\n  unsigned __int8 *v19; // rcx\n  unsigned __int8 v20; // al\n  char *v21; // rax\n  char *v22; // rax\n  char v23; // dl\n  unsigned __int8 v24; // si\n  int v25; // edi\n  unsigned int n[17]; // [rsp+4h] [rbp-44h]\n\n  v4 = a3;\n  v5 = (char *)*a3;\n  *(_QWORD *)&n[1] = __readfsqword(0x28u);\n  result = 0LL;\n  if ( v5 != (char *)a4 )\n  {\n    v7 = a4;\n    v8 = *v5;\n    v9 = (signed int)dest;\n    v10 = a2;\n    result = sub_25BF0(v4, a4, 7, n);\n    if ( !(_DWORD)result )\n    {\n      v11 = (unsigned __int8 *)*v4;\n      v12 = n[0];\n      if ( n[0] <= v7 - *(_DWORD *)v4 )\n      {\n        if ( v8 >= 0 )\n        {\n          if ( n[0] <= v10 )\n          {\n            memcpy(dest, v11, n[0]);\n            *v4 += v12;\n            result = v12;\n          }\n          else\n          {\n            result = (unsigned int)(v10 - n[0]);\n            if ( (signed int)result > -3 )\n              result = 4294967293LL;\n          }\n          return result;\n        }\n        v13 = (char *)dest + v10;\n        v14 = &v11[n[0]];\n        if ( v11 == v14 )\n        {\nLABEL_26:\n          *v4 += v12;\n          return result;\n        }\n        if ( dest == v13 )\n          return 4294967293LL;\n        v15 = (char *)&unk_42660 + 3 * (*v11 >> 4);\n        v16 = v15[1];\n        v17 = *v15;\n        v18 = v15[2];\n        if ( !(v16 & 4) )\n        {\n          v19 = v11 + 1;\n          do\n          {\n            if ( v16 & 2 )\n            {\n              *(_BYTE *)dest = v18;\n              dest = (char *)dest + 1;\n            }\n            if ( !dest )\n              break;\n            if ( v13 == dest )\n              return 4294967293LL;\n            v22 = (char *)&unk_42660 + 48 * v17 + 3 * (*(v19 - 1) & 0xF);\n            v23 = v22[1];\n            v24 = *v22;\n            if ( v23 & 4 )\n              break;\n            if ( v23 & 2 )\n            {\n              *(_BYTE *)dest = v22[2];\n              dest = (char *)dest + 1;\n              if ( !dest )\n                break;\n              if ( v14 == v19 )\n              {\nLABEL_24:\n                if ( !(v23 & 1) )\n                  break;\n                v25 = (_DWORD)dest - v9;\n                result = (unsigned int)v25;\n                if ( v25 < 0 )\n                  return result;\n                goto LABEL_26;\n              }\n              if ( v13 == dest )\n                return 4294967293LL;\n            }\n            else if ( v14 == v19 )\n            {\n              goto LABEL_24;\n            }\n            v20 = *v19++;\n            v21 = (char *)&unk_42660 + 48 * v24 + 3 * (v20 >> 4);\n            v16 = v21[1];\n            v17 = *v21;\n            v18 = v21[2];\n          }\n          while ( !(v16 & 4) );\n        }\n      }\n    }\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x26180L", 
            "funcEndAddr": "0x2638fL", 
            "funcName": "sub_26180"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall lshpack_enc_init(__int64 a1)\n{\n  _QWORD *v1; // rax\n  _QWORD *v2; // rdx\n  signed __int64 v3; // rcx\n\n  v1 = malloc(0x80uLL);\n  if ( !v1 )\n    return 0xFFFFFFFFLL;\n  v2 = v1;\n  do\n  {\n    v3 = (signed __int64)(v2 + 2);\n    *v2 = 0LL;\n    v2[2] = 0LL;\n    v2[1] = v2;\n    v2 += 4;\n    *(v2 - 1) = v3;\n  }\n  while ( v2 != v1 + 16 );\n  *(_QWORD *)(a1 + 40) = v1;\n  *(_QWORD *)(a1 + 64) = 0LL;\n  *(_QWORD *)(a1 + 32) = a1 + 24;\n  *(_OWORD *)a1 = 0LL;\n  *(_QWORD *)(a1 + 4) = -17179865088LL;\n  *(_OWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)(a1 + 48) = 0LL;\n  *(_QWORD *)(a1 + 12) = 0x200000000LL;\n  *(_QWORD *)(a1 + 24) = 0LL;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x26390L", 
            "funcEndAddr": "0x26423L", 
            "funcName": "lshpack_enc_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall lshpack_enc_cleanup(__int64 a1)\n{\n  __int64 v1; // rbp\n  _QWORD *v2; // rdi\n  _QWORD *v3; // rbx\n\n  v1 = a1;\n  v2 = *(_QWORD **)(a1 + 24);\n  if ( v2 )\n  {\n    do\n    {\n      v3 = (_QWORD *)v2[2];\n      free(v2);\n      v2 = v3;\n    }\n    while ( v3 );\n  }\n  free(*(void **)(v1 + 48));\n  free(*(void **)(v1 + 40));\n}\n", 
            "funcStartAddr": "0x26430L", 
            "funcEndAddr": "0x26471L", 
            "funcName": "lshpack_enc_cleanup"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall lshpack_enc_use_hist(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  void *v3; // rdi\n  unsigned int v4; // ebp\n  void *v6; // rax\n\n  v2 = a1;\n  v3 = *(void **)(a1 + 48);\n  if ( a2 )\n  {\n    v4 = 0;\n    if ( !v3 )\n    {\n      v6 = malloc(0xACuLL);\n      *(_QWORD *)(v2 + 48) = v6;\n      if ( v6 )\n      {\n        *(_DWORD *)(v2 + 56) = 42;\n        *(_DWORD *)(v2 + 68) |= 1u;\n      }\n      else\n      {\n        v4 = -1;\n      }\n    }\n  }\n  else\n  {\n    *(_DWORD *)(v2 + 68) &= 0xFFFFFFFE;\n    v4 = 0;\n    free(v3);\n    *(_QWORD *)(v2 + 48) = 0LL;\n    *(_QWORD *)(v2 + 56) = 0LL;\n    *(_DWORD *)(v2 + 64) = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x26480L", 
            "funcEndAddr": "0x264ecL", 
            "funcName": "lshpack_enc_use_hist"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall lshpack_enc_hist_used(__int64 a1)\n{\n  return *(_DWORD *)(a1 + 68) & 1;\n}\n", 
            "funcStartAddr": "0x264f0L", 
            "funcEndAddr": "0x264f7L", 
            "funcName": "lshpack_enc_hist_used"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall lshpack_enc_get_stx_tab_id(__int64 a1)\n{\n  unsigned __int8 v1; // al\n  __int64 v2; // rbx\n  size_t v3; // rdx\n  char *v4; // rax\n  unsigned int v5; // ebp\n  int v6; // eax\n  __int64 v7; // rax\n  size_t v8; // rdx\n  int v9; // ebx\n  const void **v10; // rax\n  unsigned __int16 v12; // r14\n  __int64 v13; // r15\n\n  sub_25D90(a1);\n  v1 = byte_42260[*(_DWORD *)(a1 + 12) & 0x1FF];\n  if ( !v1\n    || (v2 = (unsigned int)v1 - 1,\n        v3 = *(unsigned __int16 *)(a1 + 18),\n        v4 = (char *)&unk_256280 + 24 * v2,\n        *(_DWORD *)v4 != (_DWORD)v3)\n    || (v12 = *(_WORD *)(a1 + 22), *((_DWORD *)v4 + 1) != *(unsigned __int16 *)(a1 + 22))\n    || (v13 = *(_QWORD *)a1, (_WORD)v3)\n    && memcmp((const void *)(v13 + *(unsigned __int16 *)(a1 + 16)), *((const void **)v4 + 1), v3)\n    || (v5 = v2 + 1,\n        memcmp((const void *)(v13 + *(unsigned __int16 *)(a1 + 20)), *((const void **)&unk_256280 + 3 * v2 + 2), v12)) )\n  {\n    v5 = 0;\n    v6 = byte_42060[*(_DWORD *)(a1 + 8) & 0x1FF];\n    if ( (_BYTE)v6 )\n    {\n      v7 = (unsigned int)(v6 - 1);\n      v8 = *(unsigned __int16 *)(a1 + 18);\n      v9 = v7;\n      v10 = (const void **)((char *)&unk_256280 + 24 * v7);\n      if ( *(_DWORD *)v10 == (unsigned __int16)v8\n        && (!(_WORD)v8 || !memcmp((const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 16)), v10[1], v8)) )\n      {\n        v5 = v9 + 1;\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x26500L", 
            "funcEndAddr": "0x26633L", 
            "funcName": "lshpack_enc_get_stx_tab_id"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall lshpack_enc_encode@<rax>(char *a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rdi>, char *a4@<rsi>, __int64 a5@<r10>)\n{\n  char *v5; // r14\n  char v6; // bl\n  char *v7; // r15\n  __int64 v8; // r12\n  __int64 v9; // rbp\n  unsigned __int8 v10; // dl\n  unsigned int v11; // ebx\n  bool v12; // zf\n  __int64 result; // rax\n  unsigned __int64 v14; // rt1\n  const void **v15; // rax\n  unsigned int v16; // ST28_4\n  unsigned int v17; // ST20_4\n  unsigned __int16 v18; // ST18_2\n  int v19; // eax\n  unsigned __int16 v20; // r9\n  unsigned int v21; // er8\n  __int64 v22; // rcx\n  char *v23; // rax\n  int v24; // er13\n  _DWORD *v25; // r9\n  __int64 *v26; // rbx\n  unsigned int v27; // er14\n  __int64 v28; // r12\n  unsigned __int16 v29; // bp\n  int v30; // eax\n  int v31; // eax\n  int v32; // eax\n  signed int v33; // esi\n  int v34; // edx\n  signed __int64 v35; // rbx\n  unsigned int v36; // ecx\n  char *v37; // rdx\n  int v38; // eax\n  __int64 v39; // r10\n  char *v40; // rbx\n  __int64 v41; // rsi\n  const void *v42; // rcx\n  unsigned int v43; // er13\n  int v44; // eax\n  int v45; // er13\n  unsigned int v46; // er15\n  unsigned int v47; // er15\n  const void *v48; // rsi\n  _DWORD *v49; // rax\n  _DWORD *v50; // r13\n  unsigned int v51; // er11\n  void *v52; // rdi\n  unsigned int v53; // er14\n  int v54; // eax\n  int v55; // ecx\n  _QWORD *v56; // rax\n  signed int v57; // edx\n  __int64 v58; // rcx\n  int v59; // edx\n  signed __int64 v60; // rax\n  signed __int64 v61; // rcx\n  int v62; // eax\n  unsigned int v63; // er9\n  bool v64; // cf\n  unsigned int v65; // ST18_4\n  int v66; // ebx\n  __int64 v67; // rcx\n  unsigned int v68; // ebx\n  const void **v69; // rax\n  unsigned __int16 v70; // dx\n  unsigned __int8 v71; // dl\n  int v72; // ecx\n  int v73; // ebx\n  size_t v74; // rdx\n  unsigned int v75; // ebx\n  const void **v76; // rax\n  __int64 v77; // r12\n  __int64 v78; // rbp\n  int v79; // ebx\n  __int64 v80; // rbx\n  int v81; // eax\n  int v82; // edx\n  int v83; // eax\n  _DWORD *v84; // rcx\n  _DWORD *v85; // rdi\n  unsigned int v86; // edx\n  _BOOL4 v87; // eax\n  size_t v88; // ST30_8\n  int v89; // eax\n  unsigned int v90; // ST18_4\n  int v91; // eax\n  char *v92; // rax\n  _QWORD *v93; // rax\n  __int64 *v94; // rsi\n  signed __int64 v95; // r9\n  _QWORD *v96; // r8\n  signed __int64 v97; // r10\n  int v98; // edi\n  _QWORD *v99; // rdx\n  __int64 i; // rdx\n  unsigned int v101; // er11\n  _QWORD *v102; // r11\n  __int64 v103; // r11\n  unsigned int v104; // er11\n  _QWORD *v105; // r11\n  __int64 v106; // rdx\n  _QWORD *v107; // ST18_8\n  int v108; // esi\n  unsigned __int16 v109; // r11\n  size_t v110; // ST30_8\n  unsigned int v111; // ST20_4\n  int v112; // eax\n  unsigned int v113; // ST20_4\n  int v114; // eax\n  const void *v115; // [rsp+8h] [rbp-A0h]\n  int v116; // [rsp+8h] [rbp-A0h]\n  void *s1; // [rsp+10h] [rbp-98h]\n  size_t s1a; // [rsp+10h] [rbp-98h]\n  size_t s1b; // [rsp+10h] [rbp-98h]\n  unsigned int s1c; // [rsp+10h] [rbp-98h]\n  void *s1d; // [rsp+10h] [rbp-98h]\n  char *v122; // [rsp+18h] [rbp-90h]\n  unsigned __int16 v123; // [rsp+18h] [rbp-90h]\n  _DWORD *v124; // [rsp+18h] [rbp-90h]\n  __int64 v125; // [rsp+18h] [rbp-90h]\n  __int64 v126; // [rsp+18h] [rbp-90h]\n  _DWORD *src; // [rsp+20h] [rbp-88h]\n  int srca; // [rsp+20h] [rbp-88h]\n  int v129; // [rsp+28h] [rbp-80h]\n  unsigned int v130; // [rsp+28h] [rbp-80h]\n  _DWORD *v131; // [rsp+28h] [rbp-80h]\n  size_t n; // [rsp+30h] [rbp-78h]\n  signed __int64 v133; // [rsp+38h] [rbp-70h]\n  __int64 v134; // [rsp+40h] [rbp-68h]\n  _DWORD *v135; // [rsp+48h] [rbp-60h]\n  _QWORD *v136; // [rsp+50h] [rbp-58h]\n  char *v137; // [rsp+58h] [rbp-50h]\n  unsigned __int64 v138; // [rsp+68h] [rbp-40h]\n\n  v5 = a4;\n  v138 = __readfsqword(0x28u);\n  if ( a4 >= a1 )\n    return (__int64)v5;\n  v6 = *(_BYTE *)(a2 + 29);\n  v7 = a1;\n  v8 = a3;\n  v9 = a2;\n  v10 = *(_BYTE *)(a2 + 26);\n  if ( v6 & 1 )\n  {\n    v11 = v10;\n    if ( v10 )\n      goto LABEL_4;\n    goto LABEL_25;\n  }\n  if ( v6 & 0x40 )\n    *(_BYTE *)(a2 + 30) = 2;\n  v21 = *(unsigned __int16 *)(a2 + 18);\n  v41 = *(unsigned __int16 *)(a2 + 16);\n  v42 = 0LL;\n  if ( (_WORD)v21 )\n    v42 = (const void *)(v41 + *(_QWORD *)v9);\n  s1 = (void *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 20));\n  v115 = v42;\n  if ( v10 )\n  {\n    v43 = v10;\n    v20 = *(_WORD *)(v9 + 22);\n    v22 = (unsigned int)v10 - 1;\n    if ( (signed int)v22 <= 16 )\n    {\n      v15 = (const void **)((char *)&unk_256280 + 24 * (unsigned int)v22);\n      if ( *((_DWORD *)v15 + 1) == v20 )\n      {\n        v16 = v10 - 1;\n        v17 = v21;\n        v18 = *(_WORD *)(v9 + 22);\n        v19 = memcmp(s1, v15[2], v20);\n        v20 = v18;\n        v21 = v17;\n        v22 = v16;\n        if ( !v19 )\n          goto LABEL_38;\n      }\n    }\n    else if ( !v20 && !*((_DWORD *)&unk_256280 + 6 * (unsigned int)v22 + 1) )\n    {\nLABEL_38:\n      v25 = *(_DWORD **)(a3 + 48);\n      *(_BYTE *)(v9 + 29) = v6 | 1;\n      v11 = v43;\n      if ( !v25 )\n        goto LABEL_4;\n      v24 = *(_DWORD *)(v9 + 12);\n      v33 = 1;\n      goto LABEL_72;\n    }\n    if ( !v21 )\n    {\n      v23 = (char *)&unk_256280 + 24 * (unsigned int)v22;\n      v21 = *(_DWORD *)v23;\n      v115 = (const void *)*((_QWORD *)v23 + 1);\n    }\n    if ( !(v6 & 8) )\n      *(_DWORD *)(v9 + 8) = dword_42560[v22];\n    if ( v6 & 0x10 )\n    {\n      v24 = *(_DWORD *)(v9 + 12);\n    }\n    else\n    {\n      v90 = v21;\n      v91 = XXH32(s1, v20, *(unsigned int *)(v9 + 8));\n      v6 = *(_BYTE *)(v9 + 29);\n      v24 = v91;\n      *(_DWORD *)(v9 + 12) = v91;\n      v21 = v90;\n    }\n    v25 = *(_DWORD **)(a3 + 48);\n    *(_BYTE *)(v9 + 29) = v6 | 0x18;\n  }\n  else\n  {\n    v65 = v21;\n    sub_25D90(v9);\n    v24 = *(_DWORD *)(v9 + 12);\n    v21 = v65;\n    v66 = (unsigned __int8)byte_42260[*(_DWORD *)(v9 + 12) & 0x1FF];\n    if ( (_BYTE)v66 )\n    {\n      v25 = *(_DWORD **)(a3 + 48);\n      v68 = v66 - 1;\n      v67 = v68;\n      v69 = (const void **)((char *)&unk_256280 + 24 * v68);\n      v70 = *(_WORD *)(v9 + 18);\n      if ( *(_DWORD *)v69 == *(unsigned __int16 *)(v9 + 18) )\n      {\n        v108 = *(unsigned __int16 *)(v9 + 22);\n        v109 = *(_WORD *)(v9 + 22);\n        if ( *((_DWORD *)v69 + 1) == v108 )\n        {\n          v126 = *(_QWORD *)v9;\n          if ( !v70\n            || (v110 = *(_QWORD *)(a3 + 48),\n                v111 = v21,\n                v112 = memcmp((const void *)(*(unsigned __int16 *)(v9 + 16) + *(_QWORD *)v9), v69[1], v70),\n                v21 = v111,\n                v109 = v108,\n                v25 = (_DWORD *)v110,\n                v67 = v68,\n                !v112) )\n          {\n            v131 = v25;\n            v113 = v21;\n            v114 = memcmp(\n                     (const void *)(v126 + *(unsigned __int16 *)(v9 + 20)),\n                     *((const void **)&unk_256280 + 3 * v67 + 2),\n                     v109);\n            v21 = v113;\n            v25 = v131;\n            if ( !v114 )\n            {\n              v11 = v68 + 1;\n              *(_BYTE *)(v9 + 29) |= 1u;\n              *(_BYTE *)(v9 + 26) = v11;\n              v33 = 1;\n              if ( !v131 )\n                goto LABEL_4;\n              goto LABEL_72;\n            }\n          }\n        }\n      }\n    }\n    else\n    {\n      v25 = *(_DWORD **)(a3 + 48);\n    }\n    *(_BYTE *)(v9 + 26) = 0;\n  }\n  a5 = *(_QWORD *)(a3 + 40);\n  v129 = ~(-1 << *(_DWORD *)(a3 + 16));\n  v26 = *(__int64 **)(a5 + 32LL * (v24 & (unsigned int)v129) + 16);\n  if ( v26 )\n  {\n    v122 = v5;\n    v27 = v21;\n    v28 = v9;\n    n = v21;\n    v133 = v21 + 44LL;\n    while ( 1 )\n    {\n      if ( *((_DWORD *)v26 + 7) == v24 && *((_DWORD *)v26 + 9) == v27 )\n      {\n        v29 = *(_WORD *)(v28 + 22);\n        if ( *(unsigned __int16 *)(v28 + 22) == *((_DWORD *)v26 + 10) )\n        {\n          v135 = v25;\n          v134 = a5;\n          v30 = memcmp(v115, (char *)v26 + 44, n);\n          a5 = v134;\n          v25 = v135;\n          if ( !v30 )\n          {\n            v31 = memcmp(s1, (char *)v26 + v133, v29);\n            a5 = v134;\n            v25 = v135;\n            if ( !v31 )\n              break;\n          }\n        }\n      }\n      v26 = (__int64 *)*v26;\n      if ( !v26 )\n      {\n        v21 = v27;\n        v9 = v28;\n        v5 = v122;\n        v8 = a3;\n        goto LABEL_57;\n      }\n    }\n    v9 = v28;\n    v8 = a3;\n    v5 = v122;\n    v32 = *(_DWORD *)(a3 + 8);\n    v33 = 1;\n    v34 = v32 + 61 - *((_DWORD *)v26 + 6);\n    v11 = v32 + 61 - *((_DWORD *)v26 + 6);\n    if ( v135 )\n      goto LABEL_72;\n    if ( v34 )\n      goto LABEL_4;\n    goto LABEL_25;\n  }\nLABEL_57:\n  v71 = *(_BYTE *)(v9 + 26);\n  if ( v71 )\n  {\nLABEL_85:\n    *(_BYTE *)(v9 + 29) &= 0xFEu;\n    v33 = 0;\n    v11 = v71;\n    if ( v25 )\n      goto LABEL_72;\nLABEL_80:\n    *v5 = byte_42044[*(unsigned __int8 *)(v9 + 30)];\n    v40 = sub_25B80(v5, v7, v11, *(_BYTE *)(v9 + 30) < 1u ? 6 : 4);\n    if ( v5 == v40 )\n      return (__int64)v40;\n    goto LABEL_41;\n  }\n  v72 = *(_DWORD *)(v9 + 8);\n  v73 = byte_42060[*(_DWORD *)(v9 + 8) & 0x1FF];\n  if ( (_BYTE)v73 )\n  {\n    v74 = *(unsigned __int16 *)(v9 + 18);\n    v75 = v73 - 1;\n    v76 = (const void **)((char *)&unk_256280 + 24 * v75);\n    if ( *(_DWORD *)v76 == (unsigned __int16)v74 )\n    {\n      srca = *(_DWORD *)(v9 + 8);\n      v125 = a5;\n      s1c = v21;\n      if ( !(_WORD)v74\n        || (v88 = (size_t)v25,\n            v89 = memcmp((const void *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 16)), v76[1], v74),\n            v25 = (_DWORD *)v88,\n            v21 = s1c,\n            a5 = v125,\n            v72 = srca,\n            !v89) )\n      {\n        v71 = v75 + 1;\n        *(_BYTE *)(v9 + 26) = v75 + 1;\n        goto LABEL_85;\n      }\n    }\n  }\n  if ( *(_QWORD *)(a5 + 32LL * (v72 & (unsigned int)v129)) )\n  {\n    src = (_DWORD *)v8;\n    v124 = v25;\n    v77 = v9;\n    s1b = v21;\n    v78 = *(_QWORD *)(a5 + 32LL * (v72 & (unsigned int)v129));\n    v79 = v72;\n    while ( *(_DWORD *)(v78 + 32) != v79\n         || *(unsigned __int16 *)(v77 + 18) != *(_DWORD *)(v78 + 36)\n         || memcmp(v115, (const void *)(v78 + 44), s1b) )\n    {\n      v78 = *(_QWORD *)(v78 + 8);\n      if ( !v78 )\n      {\n        v9 = v77;\n        v25 = v124;\n        v8 = (__int64)src;\n        goto LABEL_70;\n      }\n    }\n    v80 = v78;\n    v9 = v77;\n    v8 = (__int64)src;\n    *(_BYTE *)(v9 + 29) &= 0xFEu;\n    v33 = 0;\n    v25 = v124;\n    v81 = src[2];\n    v82 = v81 + 61 - *(_DWORD *)(v80 + 24);\n    v11 = v81 + 61 - *(_DWORD *)(v80 + 24);\n    if ( v124 )\n      goto LABEL_72;\n    if ( !v82 )\n      goto LABEL_25;\n    goto LABEL_80;\n  }\nLABEL_70:\n  if ( !v25 )\n  {\nLABEL_25:\n    v35 = (signed __int64)(v5 + 1);\n    *v5 = byte_42044[*(unsigned __int8 *)(v9 + 30)];\n    v36 = *(unsigned __int16 *)(v9 + 18);\n    v37 = (char *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 16));\n    if ( !(_WORD)v36 )\n      v37 = 0LL;\n    v38 = sub_25DF0(v5 + 1, v37, v36, (unsigned __int64)&v7[-v35], a5);\n    if ( v38 < 0 )\n      return (__int64)v5;\n    v40 = (char *)(v38 + v35);\nLABEL_41:\n    v44 = sub_25DF0(\n            v40,\n            (char *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 20)),\n            *(unsigned __int16 *)(v9 + 22),\n            v7 - v40,\n            v39);\n    if ( v44 >= 0 )\n    {\n      v40 += v44;\n      if ( *(_BYTE *)(v9 + 30) )\n        return (__int64)v40;\n      v45 = *(_DWORD *)(v8 + 16);\n      v46 = 1 << *(_DWORD *)(v8 + 16);\n      if ( *(_DWORD *)(v8 + 12) < v46 >> 1 )\n        goto LABEL_44;\n      v116 = v45 + 1;\n      v93 = malloc(32LL * (unsigned int)(1 << (v45 + 1)));\n      if ( v93 )\n      {\n        v94 = *(__int64 **)(v8 + 40);\n        s1d = *(void **)(v8 + 40);\n        if ( v46 )\n        {\n          v95 = (signed __int64)(v94 + 2);\n          v96 = v93;\n          v97 = (signed __int64)&v93[4 * (v46 - 1) + 4];\n          v98 = ~(-1 << v116);\n          do\n          {\n            *v96 = 0LL;\n            v96[1] = v96;\n            v136 = v96;\n            v99 = &v93[4 * v46];\n            *v99 = 0LL;\n            v99[1] = v99;\n            v96[3] = v96 + 2;\n            v96[2] = 0LL;\n            v137 = (char *)&v93[4 * v46];\n            v99[2] = 0LL;\n            v99[3] = v99 + 2;\n            for ( i = *v94; *v94; i = *v94 )\n            {\n              v103 = *(_QWORD *)(i + 8);\n              *v94 = v103;\n              if ( !v103 )\n                v94[1] = (__int64)v94;\n              v101 = *(_DWORD *)(i + 32);\n              *(_QWORD *)(i + 8) = 0LL;\n              v102 = (&v136)[((v98 & v101) >> v45) & 1];\n              *(_QWORD *)v102[1] = i;\n              v102[1] = i + 8;\n            }\n            while ( 1 )\n            {\n              v106 = v94[2];\n              if ( !v106 )\n                break;\n              v12 = *(_QWORD *)v106 == 0LL;\n              v94[2] = *(_QWORD *)v106;\n              if ( v12 )\n                v94[3] = v95;\n              v104 = *(_DWORD *)(v106 + 28);\n              *(_QWORD *)v106 = 0LL;\n              v105 = (&v136)[((v98 & v104) >> v45) & 1];\n              *(_QWORD *)v105[3] = v106;\n              v105[3] = v106;\n            }\n            v96 += 4;\n            ++v46;\n            v94 += 4;\n            v95 += 32LL;\n          }\n          while ( v96 != (_QWORD *)v97 );\n        }\n        v107 = v93;\n        free(s1d);\n        *(_DWORD *)(v8 + 16) = v116;\n        *(_QWORD *)(v8 + 40) = v107;\nLABEL_44:\n        v47 = *(unsigned __int16 *)(v9 + 18);\n        if ( *(_WORD *)(v9 + 18) )\n        {\n          v48 = (const void *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 16));\n          if ( !(_WORD)v47 )\n            v48 = 0LL;\n        }\n        else\n        {\n          v92 = (char *)&unk_256280 + 24 * (*(unsigned __int8 *)(v9 + 26) - 1);\n          v48 = (const void *)*((_QWORD *)v92 + 1);\n          v47 = *(_DWORD *)v92;\n        }\n        v123 = *(_WORD *)(v9 + 22);\n        s1a = *(unsigned __int16 *)(v9 + 22);\n        v49 = malloc(v47 + s1a + 48);\n        v50 = v49;\n        if ( v49 )\n        {\n          v51 = *(_DWORD *)(v9 + 8);\n          v52 = v49 + 11;\n          v53 = *(_DWORD *)(v9 + 12);\n          v49[9] = v47;\n          v49[8] = v51;\n          v130 = v51;\n          v49[10] = v123;\n          v49[7] = v53;\n          v54 = *(_DWORD *)(v8 + 8);\n          v50[6] = v54;\n          *(_DWORD *)(v8 + 8) = v54 + 1;\n          memcpy(v52, v48, v47);\n          memcpy((char *)v50 + v47 + 44, (const void *)(*(_QWORD *)v9 + *(unsigned __int16 *)(v9 + 20)), s1a);\n          v55 = *(_DWORD *)(v8 + 16);\n          v56 = *(_QWORD **)(v8 + 32);\n          *((_QWORD *)v50 + 2) = 0LL;\n          v57 = -1 << v55;\n          v58 = *(_QWORD *)(v8 + 40);\n          *v56 = v50;\n          v59 = ~v57;\n          *(_QWORD *)v50 = 0LL;\n          *(_QWORD *)(v8 + 32) = v50 + 4;\n          v60 = v58 + 32LL * (v59 & v53);\n          **(_QWORD **)(v60 + 24) = v50;\n          *(_QWORD *)(v60 + 24) = v50;\n          if ( !*(_BYTE *)(v9 + 26) )\n          {\n            *((_QWORD *)v50 + 1) = 0LL;\n            v61 = 32LL * (v59 & v130) + v58;\n            **(_QWORD **)(v61 + 8) = v50;\n            *(_QWORD *)(v61 + 8) = v50 + 2;\n          }\n          v62 = *(_DWORD *)v8;\n          ++*(_DWORD *)(v8 + 12);\n          v63 = v123 + v62 + 32 + v47;\n          v64 = *(_DWORD *)(v8 + 4) < v63;\n          *(_DWORD *)v8 = v63;\n          if ( v64 )\n          {\n            do\n              sub_25CC0(v8);\n            while ( *(_DWORD *)v8 > *(_DWORD *)(v8 + 4) );\n          }\n          return (__int64)v40;\n        }\n        return (__int64)v5;\n      }\n    }\n    return (__int64)v5;\n  }\n  v33 = 0;\n  v11 = 0;\nLABEL_72:\n  v83 = *(_DWORD *)(v8 + 60);\n  v84 = v25;\n  if ( *(_DWORD *)(v8 + 64) )\n    v83 = *(_DWORD *)(v8 + 56);\n  v85 = &v25[v83];\n  *v85 = v24;\n  if ( v24 != *v25 )\n  {\n    do\n      ++v84;\n    while ( *v84 != v24 );\n  }\n  v25[*(unsigned int *)(v8 + 60)] = v24;\n  v86 = (unsigned int)(*(_DWORD *)(v8 + 60) + 1) % *(_DWORD *)(v8 + 56);\n  *(_DWORD *)(v8 + 60) = v86;\n  v87 = v86 == 0;\n  v12 = (v87 | *(_DWORD *)(v8 + 64)) == 0;\n  *(_DWORD *)(v8 + 64) |= v87;\n  if ( !v12 && v85 <= v84 && !*(_BYTE *)(v9 + 30) )\n    *(_BYTE *)(v9 + 30) = 1;\n  if ( !v11 )\n    goto LABEL_25;\n  if ( !v33 )\n    goto LABEL_80;\nLABEL_4:\n  v14 = __readfsqword(0x28u);\n  result = v14 ^ v138;\n  v12 = v14 == v138;\n  *v5 = -128;\n  if ( v12 )\n    result = (__int64)sub_25B80(v5, v7, v11, 7);\n  return result;\n}\n", 
            "funcStartAddr": "0x26640L", 
            "funcEndAddr": "0x270ceL", 
            "funcName": "lshpack_enc_encode"
        }, 
        {
            "decompiledFuncCode": "void __fastcall lshpack_enc_set_max_capacity(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // rbx\n  bool v3; // cf\n  unsigned int v4; // er12\n  unsigned int v5; // edx\n  unsigned int v6; // ebp\n  _DWORD *v7; // r13\n  int v8; // er8\n  int v9; // esi\n  unsigned int v10; // eax\n  _DWORD *v11; // rdi\n  unsigned int v12; // ecx\n  unsigned int v13; // edx\n  __int64 v14; // rax\n  _BOOL4 v15; // eax\n\n  v2 = a1;\n  v3 = a2 < *(_DWORD *)a1;\n  *(_DWORD *)(a1 + 4) = a2;\n  if ( v3 )\n  {\n    do\n    {\n      sub_25CC0(a1);\n      a2 = *(_DWORD *)(a1 + 4);\n    }\n    while ( *(_DWORD *)a1 > a2 );\n  }\n  if ( *(_BYTE *)(a1 + 68) & 1 )\n  {\n    v4 = *(_DWORD *)(a1 + 56);\n    v5 = a2 / 0x60;\n    v6 = a2 / 0x60;\n    if ( a2 / 0x60 != v4 )\n    {\n      if ( v5 )\n      {\n        v7 = malloc(4LL * (v5 + 1));\n        if ( v7 )\n        {\n          v8 = 0;\n          v9 = *(_DWORD *)(a1 + 60);\n          if ( *(_DWORD *)(a1 + 64) )\n          {\n            v10 = v9 + 1;\n            v9 = v4;\n            v8 = v10 % v4;\n          }\n          v11 = *(_DWORD **)(a1 + 48);\n          if ( v9 )\n          {\n            v12 = 0;\n            do\n            {\n              v13 = (v12 + v8) % v4;\n              v14 = v12++;\n              v7[v14] = v11[v13];\n            }\n            while ( v12 != v9 && v6 > v12 );\n            v9 = v12 % v6;\n            v15 = v12 % v6 == 0;\n          }\n          else\n          {\n            v15 = 1;\n          }\n          *(_DWORD *)(v2 + 56) = v6;\n          *(_DWORD *)(v2 + 60) = v9;\n          *(_DWORD *)(v2 + 64) = v15;\n          free(v11);\n          *(_QWORD *)(v2 + 48) = v7;\n        }\n      }\n      else\n      {\n        free(*(void **)(a1 + 48));\n        *(_QWORD *)(a1 + 48) = 0LL;\n        *(_QWORD *)(a1 + 56) = 0LL;\n        *(_DWORD *)(a1 + 64) = 0;\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x270d0L", 
            "funcEndAddr": "0x271f2L", 
            "funcName": "lshpack_enc_set_max_capacity"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall lshpack_dec_init(__int64 a1)\n{\n  signed __int64 result; // rax\n\n  result = 17592186048512LL;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  *(_QWORD *)(a1 + 24) = 17592186048512LL;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)a1 = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x27200L", 
            "funcEndAddr": "0x27226L", 
            "funcName": "lshpack_dec_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall lshpack_dec_cleanup(__int64 a1)\n{\n  int i; // eax\n  int v2; // eax\n  __int64 v3; // rdx\n\n  for ( i = *(_DWORD *)(a1 + 4); i; i = *(_DWORD *)(a1 + 4) )\n  {\n    v2 = i - 1;\n    v3 = *(_QWORD *)(a1 + 16);\n    *(_DWORD *)(a1 + 4) = v2;\n    free(*(void **)(v3 + 8LL * (unsigned int)(*(_DWORD *)(a1 + 8) + v2)));\n  }\n  free(*(void **)(a1 + 16));\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)a1 = 0LL;\n}\n", 
            "funcStartAddr": "0x27230L", 
            "funcEndAddr": "0x27277L", 
            "funcName": "lshpack_dec_cleanup"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall lshpack_dec_set_max_capacity(_DWORD *a1, unsigned int a2)\n{\n  bool v2; // cf\n  __int64 result; // rax\n\n  v2 = a2 < a1[8];\n  a1[6] = a2;\n  a1[7] = a2;\n  if ( v2 )\n  {\n    do\n    {\n      sub_25D60((__int64)a1);\n      result = (unsigned int)a1[7];\n    }\n    while ( a1[8] > (unsigned int)result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x27280L", 
            "funcEndAddr": "0x272aaL", 
            "funcName": "lshpack_dec_set_max_capacity"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall lshpack_dec_decode@<rax>(unsigned __int8 *a1@<rdx>, __int64 *a2@<rcx>, __int64 a3@<rdi>, unsigned __int8 **a4@<rsi>, signed __int64 a5@<r12>)\n{\n  unsigned __int8 *v5; // rax\n  __int64 v6; // r15\n  unsigned __int8 **v7; // r14\n  unsigned __int64 v8; // rbx\n  __int64 *v9; // r13\n  unsigned __int8 v10; // dl\n  bool v11; // cf\n  size_t v12; // rcx\n  __int64 result; // rax\n  void *v14; // r9\n  signed int v15; // eax\n  char *v16; // rdi\n  unsigned int v17; // eax\n  unsigned int v18; // eax\n  __int64 v19; // rdx\n  unsigned int *v20; // rdx\n  const void *v21; // rsi\n  __int16 v22; // dx\n  size_t v23; // ST10_8\n  char *v24; // rax\n  __int64 v25; // rax\n  signed int v26; // eax\n  unsigned __int16 v27; // bx\n  unsigned __int16 v28; // r10\n  unsigned int v29; // edx\n  unsigned int v30; // eax\n  __int64 v31; // rdx\n  __int64 v32; // rax\n  unsigned int *v33; // r10\n  __int16 v34; // dx\n  unsigned int v35; // edx\n  char *v36; // rsi\n  __int16 v37; // ax\n  size_t v38; // rbp\n  __int64 v39; // rsi\n  __int64 v40; // rdx\n  unsigned int v41; // eax\n  signed int v42; // ecx\n  __int64 v43; // rdi\n  int v44; // ebx\n  size_t v45; // rdi\n  _QWORD *v46; // rax\n  __int64 v47; // rdx\n  _QWORD *v48; // ST18_8\n  char *v49; // ST20_8\n  __int64 v50; // rdx\n  unsigned __int16 v51; // r10\n  int v52; // eax\n  int v53; // er11\n  __int64 v54; // rcx\n  const void *v55; // rsi\n  char *v56; // rdx\n  const void *v57; // rsi\n  __int16 v58; // dx\n  int v59; // eax\n  __int64 v60; // rsi\n  __int64 v61; // rdx\n  __int16 v62; // [rsp+8h] [rbp-80h]\n  int v63; // [rsp+8h] [rbp-80h]\n  __int64 v64; // [rsp+8h] [rbp-80h]\n  size_t n; // [rsp+10h] [rbp-78h]\n  unsigned int *na; // [rsp+10h] [rbp-78h]\n  size_t nb; // [rsp+10h] [rbp-78h]\n  signed int v68; // [rsp+18h] [rbp-70h]\n  unsigned int v69; // [rsp+18h] [rbp-70h]\n  unsigned __int16 ptr; // [rsp+20h] [rbp-68h]\n  unsigned int ptra[3]; // [rsp+20h] [rbp-68h]\n  signed int v72; // [rsp+2Ch] [rbp-5Ch]\n  unsigned int v73; // [rsp+38h] [rbp-50h]\n  unsigned int v74; // [rsp+3Ch] [rbp-4Ch]\n  unsigned __int8 *v75; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v76; // [rsp+48h] [rbp-40h]\n\n  v76 = __readfsqword(0x28u);\n  v62 = *((_WORD *)a2 + 11);\n  v5 = *a4;\n  if ( *a4 == a1 )\n    goto LABEL_9;\n  a5 = (signed __int64)&v74;\n  v6 = a3;\n  v7 = a4;\n  v8 = (unsigned __int64)a1;\n  v9 = a2;\n  v75 = *a4;\n  while ( 1 )\n  {\n    v10 = *v5;\n    if ( (*v5 & 0xE0) != 32 )\n      break;\n    if ( !(unsigned int)sub_25BF0((unsigned __int64 *)&v75, v8, 5, &v74) && *(_DWORD *)(a3 + 24) >= v74 )\n    {\n      v11 = v74 < *(_DWORD *)(a3 + 32);\n      *(_DWORD *)(a3 + 28) = v74;\n      if ( v11 )\n      {\n        do\n          sub_25D60(a3);\n        while ( *(_DWORD *)(a3 + 32) > *(_DWORD *)(a3 + 28) );\n      }\n      v5 = v75;\n      if ( v75 != (unsigned __int8 *)v8 )\n        continue;\n    }\n    goto LABEL_9;\n  }\n  if ( (v10 & 0x80u) != 0 )\n  {\n    if ( (unsigned int)sub_25BF0((unsigned __int64 *)&v75, v8, 7, &v73) )\n      goto LABEL_9;\n    v18 = v73;\n    if ( !v73 )\n      goto LABEL_9;\n    v19 = v73 - 1;\n    a5 = 3LL;\n    v14 = (void *)(*v9 + *((unsigned __int16 *)v9 + 8));\n    if ( (unsigned int)v19 <= 0x3C )\n      goto LABEL_25;\n    goto LABEL_39;\n  }\n  if ( v10 > 0x40u )\n  {\n    v17 = sub_25BF0((unsigned __int64 *)&v75, v8, 6, &v73);\n    a5 = v17;\n    if ( v17 )\n      goto LABEL_9;\n    goto LABEL_24;\n  }\n  if ( v10 == 64 )\n  {\n    v73 = 0;\n    a5 = 0LL;\n    v75 = v5 + 1;\n    goto LABEL_19;\n  }\n  if ( v10 == 16 )\n  {\n    *((_BYTE *)v9 + 29) |= 0x40u;\n    v73 = 0;\n    v75 = v5 + 1;\n    a5 = 2LL;\n    goto LABEL_19;\n  }\n  if ( (v10 & 0xF0) == 16 )\n  {\n    if ( (unsigned int)sub_25BF0((unsigned __int64 *)&v75, v8, 4, &v73) )\n      goto LABEL_9;\n    *((_BYTE *)v9 + 29) |= 0x40u;\n    a5 = 2LL;\n    goto LABEL_24;\n  }\n  if ( v10 )\n  {\n    if ( (unsigned int)sub_25BF0((unsigned __int64 *)&v75, v8, 4, &v73) )\n      goto LABEL_9;\n    a5 = 1LL;\nLABEL_24:\n    v18 = v73;\n    v14 = (void *)(*v9 + *((unsigned __int16 *)v9 + 8));\n    v19 = v73 - 1;\n    if ( (unsigned int)v19 <= 0x3C )\n    {\nLABEL_25:\n      *((_BYTE *)v9 + 26) = v18;\n      goto LABEL_26;\n    }\n    if ( !v73 )\n      goto LABEL_20;\nLABEL_39:\n    if ( v18 > 0x3D )\n    {\n      v29 = *(_DWORD *)(a3 + 4);\n      v30 = v18 - 61;\n      if ( v30 > v29 )\n        goto LABEL_9;\n      v31 = *(_DWORD *)(a3 + 8) + v29 - v30;\n      v32 = *(_QWORD *)(a3 + 16);\n      v33 = *(unsigned int **)(v32 + 8 * v31);\n      if ( !v33 )\n        goto LABEL_9;\n      v12 = *v33;\n      na = *(unsigned int **)(v32 + 8 * v31);\n      v34 = *((_WORD *)v9 + 11);\n      if ( (unsigned int)v12 <= *((unsigned __int16 *)v9 + 11) )\n      {\n        *((_WORD *)v9 + 9) = v12;\n        *((_WORD *)v9 + 11) = v34 - v12;\n        v16 = (char *)memcpy(v14, (char *)v33 + 9, v12) + v12;\n        *((_BYTE *)v9 + 26) = *((_BYTE *)na + 8);\n        v15 = *((unsigned __int16 *)v9 + 11);\n        if ( (_DWORD)a5 != 3 )\n          goto LABEL_29;\n        v35 = na[1];\n        v36 = (char *)na + *na + 9;\n        v12 = na[1];\n        if ( v35 <= v15 )\n        {\n          v37 = *((_WORD *)v9 + 9);\n          *((_WORD *)v9 + 11) = v35;\n          *((_WORD *)v9 + 10) = *((_WORD *)v9 + 8) + v37;\n          memcpy(v16, v36, v12);\n          goto LABEL_32;\n        }\n      }\nLABEL_35:\n      *((_WORD *)v9 + 11) = v62 + v12;\n      LODWORD(v12) = -3;\n      goto LABEL_10;\n    }\nLABEL_26:\n    v20 = (unsigned int *)((char *)&unk_256280 + 24 * v19);\n    v12 = *v20;\n    v21 = (const void *)*((_QWORD *)v20 + 1);\n    v22 = *((_WORD *)v9 + 11);\n    if ( (unsigned int)v12 <= *((unsigned __int16 *)v9 + 11) )\n    {\n      *((_WORD *)v9 + 9) = v12;\n      *((_WORD *)v9 + 11) = v22 - v12;\n      v23 = v12;\n      v24 = (char *)memcpy(v14, v21, v12);\n      *((_BYTE *)v9 + 29) |= 8u;\n      v16 = &v24[v23];\n      v25 = v73 - 1;\n      *((_DWORD *)v9 + 2) = dword_42560[v25];\n      if ( (_DWORD)a5 != 3 )\n      {\n        LOWORD(v15) = *((_WORD *)v9 + 11);\n        goto LABEL_29;\n      }\n      v56 = (char *)&unk_256280 + 24 * v25;\n      v12 = *((unsigned int *)v56 + 1);\n      v57 = (const void *)*((_QWORD *)v56 + 2);\n      if ( (unsigned int)v12 <= *((unsigned __int16 *)v9 + 11) )\n      {\n        v58 = *((_WORD *)v9 + 9);\n        *((_WORD *)v9 + 11) = v12;\n        *((_WORD *)v9 + 10) = *((_WORD *)v9 + 8) + v58;\n        memcpy(v16, v57, v12);\n        v59 = v73;\n        *((_BYTE *)v9 + 29) |= 0x10u;\n        *((_DWORD *)v9 + 3) = dword_42460[v59 - 1];\n        goto LABEL_32;\n      }\n    }\n    goto LABEL_35;\n  }\n  v73 = 0;\n  a5 = 1LL;\n  v75 = v5 + 1;\nLABEL_19:\n  v14 = (void *)(*v9 + *((unsigned __int16 *)v9 + 8));\nLABEL_20:\n  n = (size_t)v14;\n  v15 = sub_26180(v14, *((unsigned __int16 *)v9 + 11), (unsigned __int64 *)&v75, v8);\n  LODWORD(v12) = v15;\n  if ( v15 < 0 )\n  {\nLABEL_33:\n    if ( (signed int)v12 >= -2 )\n      goto LABEL_10;\n    LODWORD(v12) = -(signed int)v12;\n    goto LABEL_35;\n  }\n  if ( v15 > 0xFFFF )\n  {\nLABEL_70:\n    LODWORD(v12) = -2;\n    goto LABEL_10;\n  }\n  *((_WORD *)v9 + 9) = v15;\n  v16 = (char *)(n + v15);\n  LOWORD(v15) = *((_WORD *)v9 + 11) - v15;\n  *((_WORD *)v9 + 11) = v15;\nLABEL_29:\n  v26 = sub_26180(v16, (unsigned __int16)v15, (unsigned __int64 *)&v75, v8);\n  LODWORD(v12) = v26;\n  if ( v26 < 0 )\n    goto LABEL_33;\n  if ( v26 > 0xFFFF )\n    goto LABEL_70;\n  v27 = *((_WORD *)v9 + 8);\n  v28 = *((_WORD *)v9 + 9);\n  *((_WORD *)v9 + 11) = v26;\n  *((_WORD *)v9 + 10) = v27 + v28;\n  if ( (_DWORD)a5 )\n  {\nLABEL_32:\n    LODWORD(v12) = 0;\n    *v7 = v75;\n    goto LABEL_10;\n  }\n  v38 = v28;\n  ptr = v28;\n  v63 = v28;\n  v68 = v26;\n  nb = v26;\n  a5 = (signed __int64)malloc(v28 + (signed __int64)v26 + 12);\n  if ( a5 )\n  {\n    v39 = *(unsigned int *)(v6 + 8);\n    v40 = *(unsigned int *)(v6 + 4);\n    v41 = *(_DWORD *)v6;\n    v42 = v68;\n    v43 = (unsigned int)(v39 + v40);\n    if ( (unsigned int)v43 < *(_DWORD *)v6 )\n    {\n      v51 = ptr;\n      *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v43) = a5;\n      *(_DWORD *)(v6 + 4) = v40 + 1;\n    }\n    else if ( (unsigned int)v39 > v41 >> 1 )\n    {\n      memmove(*(void **)(v6 + 16), (const void *)(*(_QWORD *)(v6 + 16) + 8 * v39), 8 * v40);\n      v60 = *(unsigned int *)(v6 + 4);\n      v61 = *(_QWORD *)(v6 + 16);\n      *(_DWORD *)(v6 + 8) = 0;\n      v27 = *((_WORD *)v9 + 8);\n      v51 = *((_WORD *)v9 + 9);\n      v42 = v68;\n      *(_QWORD *)(v61 + 8 * v60) = a5;\n      *(_DWORD *)(v6 + 4) = v60 + 1;\n    }\n    else\n    {\n      if ( v41 )\n      {\n        v44 = 2 * v41;\n        v45 = 16LL * v41;\n      }\n      else\n      {\n        v45 = 512LL;\n        v44 = 64;\n      }\n      v72 = v68;\n      ptra[0] = *(_DWORD *)(v6 + 4);\n      v46 = malloc(v45);\n      if ( !v46 )\n        goto LABEL_72;\n      v47 = ptra[0];\n      v48 = v46;\n      v49 = *(char **)(v6 + 16);\n      memcpy(v46, &v49[8 * (unsigned int)v39], 8 * v47);\n      free(v49);\n      v50 = *(unsigned int *)(v6 + 4);\n      *(_DWORD *)v6 = v44;\n      v27 = *((_WORD *)v9 + 8);\n      v42 = v72;\n      *(_DWORD *)(v6 + 8) = 0;\n      *(_QWORD *)(v6 + 16) = v48;\n      v48[v50] = a5;\n      v51 = *((_WORD *)v9 + 9);\n      *(_DWORD *)(v6 + 4) = v50 + 1;\n    }\n    v52 = *(_DWORD *)(v6 + 32);\n    ++*(_DWORD *)(v6 + 36);\n    *(_DWORD *)(a5 + 4) = v42;\n    *(_DWORD *)a5 = v63;\n    v53 = v42 + v63 + v52 + 32;\n    v54 = *v9;\n    *(_DWORD *)(v6 + 32) = v53;\n    v69 = v53;\n    v55 = (const void *)(v54 + v27);\n    v64 = v54;\n    *(_BYTE *)(a5 + 8) = *((_BYTE *)v9 + 26);\n    if ( !v51 )\n      v55 = 0LL;\n    memcpy((void *)(a5 + 9), v55, v38);\n    memcpy((void *)(a5 + v38 + 9), (const void *)(v64 + *((unsigned __int16 *)v9 + 10)), nb);\n    if ( v69 > *(_DWORD *)(v6 + 28) )\n    {\n      do\n        sub_25D60(v6);\n      while ( *(_DWORD *)(v6 + 32) > *(_DWORD *)(v6 + 28) );\n    }\n    goto LABEL_32;\n  }\nLABEL_9:\n  while ( 1 )\n  {\n    LODWORD(v12) = -1;\nLABEL_10:\n    result = (unsigned int)v12;\n    if ( __readfsqword(0x28u) == v76 )\n      break;\nLABEL_72:\n    free((void *)a5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x272b0L", 
            "funcEndAddr": "0x27964L", 
            "funcName": "lshpack_dec_decode"
        }, 
        {
            "decompiledFuncCode": "signed __int64 XXH_versionNumber()\n{\n  return 801LL;\n}\n", 
            "funcStartAddr": "0x27a00L", 
            "funcEndAddr": "0x27a06L", 
            "funcName": "XXH_versionNumber"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n\n__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n", 
            "funcStartAddr": "0x27970L", 
            "funcEndAddr": "0x279faL", 
            "funcName": "XXH32"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n\n__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n", 
            "funcStartAddr": "0x27970L", 
            "funcEndAddr": "0x279faL", 
            "funcName": "XXH32"
        }, 
        {
            "decompiledFuncCode": "void *XXH32_createState()\n{\n  return malloc(0x30uLL);\n}\n", 
            "funcStartAddr": "0x27ad0L", 
            "funcEndAddr": "0x27adaL", 
            "funcName": "XXH32_createState"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_freeState(void *a1)\n{\n  free(a1);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x27ae0L", 
            "funcEndAddr": "0x27af0L", 
            "funcName": "XXH32_freeState"
        }, 
        {
            "decompiledFuncCode": "void __fastcall XXH32_copyState(__m128i *a1, const __m128i *a2)\n{\n  *a1 = _mm_loadu_si128(a2);\n  a1[1] = _mm_loadu_si128(a2 + 1);\n  a1[2] = _mm_loadu_si128(a2 + 2);\n}\n", 
            "funcStartAddr": "0x27af0L", 
            "funcEndAddr": "0x27b0aL", 
            "funcName": "XXH32_copyState"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_reset(__m128i *a1, int a2)\n{\n  __m128i v2; // xmm0\n  __int64 result; // rax\n  bool v4; // zf\n  __m128i v5; // xmm0\n  __int128 v6; // [rsp+0h] [rbp-48h]\n  __int128 v7; // [rsp+10h] [rbp-38h]\n  __int128 v8; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v9; // [rsp+38h] [rbp-10h]\n\n  v9 = __readfsqword(0x28u);\n  a1[2].m128i_i64[0] = 0LL;\n  v6 = 0LL;\n  DWORD2(v6) = a2 + 606290984;\n  v7 = 0LL;\n  v8 = 0LL;\n  HIDWORD(v6) = a2 - 2048144777;\n  LODWORD(v7) = a2;\n  v2 = _mm_load_si128((const __m128i *)&v6);\n  DWORD1(v7) = a2 + 1640531535;\n  result = (unsigned int)(0LL >> 63);\n  *a1 = v2;\n  v4 = __readfsqword(0x28u) == v9;\n  v5 = _mm_load_si128((const __m128i *)&v7);\n  a1[2].m128i_i32[2] = result;\n  a1[1] = v5;\n  if ( v4 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x27b10L", 
            "funcEndAddr": "0x27b95L", 
            "funcName": "XXH32_reset"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_update(unsigned int *a1, char *a2, size_t a3)\n{\n  char *v3; // r12\n  size_t v4; // rbp\n  unsigned int v5; // edx\n  bool v6; // al\n  __int64 v7; // rdx\n  char *v8; // rdx\n  unsigned __int64 v9; // r11\n  int v10; // er10\n  int v11; // er8\n  _DWORD *v12; // rax\n  int v13; // ebp\n  int v14; // er9\n  int v15; // ecx\n  int v17; // ebp\n  int v18; // eax\n  __int64 v19; // r13\n\n  if ( !a2 )\n    return 0LL;\n  v3 = a2;\n  v4 = a3;\n  v5 = a3 + *a1;\n  *a1 = v5;\n  v6 = v5 > 0xF || v4 > 0xF;\n  v7 = a1[10];\n  a1[1] |= v6;\n  if ( v7 + v4 <= 0xF )\n  {\n    memcpy((char *)a1 + v7 + 24, a2, v4);\n    a1[10] += v4;\n    return 0LL;\n  }\n  if ( (_DWORD)v7 )\n  {\n    memcpy((char *)a1 + v7 + 24, a2, (unsigned int)(16 - v7));\n    v18 = -2048144777 * a1[6];\n    v19 = 16 - a1[10];\n    v8 = &a2[v4];\n    a1[10] = 0;\n    v9 = (unsigned __int64)&a2[v4 - 16];\n    a2 += v19;\n    a1[2] = -1640531535 * __ROL4__(a1[2] + v18, 13);\n    a1[3] = -1640531535 * __ROL4__(a1[3] - 2048144777 * a1[7], 13);\n    a1[4] = -1640531535 * __ROL4__(a1[4] - 2048144777 * a1[8], 13);\n    a1[5] = -1640531535 * __ROL4__(a1[5] - 2048144777 * a1[9], 13);\n    if ( v9 < (unsigned __int64)&v3[v19] )\n      goto LABEL_8;\n  }\n  else\n  {\n    v8 = &a2[v4];\n    v9 = (unsigned __int64)&a2[v4 - 16];\n    if ( v9 < (unsigned __int64)a2 )\n      goto LABEL_8;\n  }\n  v10 = a1[2];\n  v11 = a1[3];\n  v12 = a2;\n  v13 = a1[4];\n  v14 = a1[5];\n  do\n  {\n    v15 = -2048144777 * *v12;\n    v12 += 4;\n    v10 = -1640531535 * __ROL4__(v15 + v10, 13);\n    a1[2] = v10;\n    v11 = -1640531535 * __ROL4__(-2048144777 * *(v12 - 3) + v11, 13);\n    a1[3] = v11;\n    v13 = -1640531535 * __ROL4__(v13 - 2048144777 * *(v12 - 2), 13);\n    a1[4] = v13;\n    v14 = -1640531535 * __ROL4__(v14 - 2048144777 * *(v12 - 1), 13);\n    a1[5] = v14;\n  }\n  while ( v9 >= (unsigned __int64)v12 );\n  a2 += ((v8 - (a2 + 16)) & 0xFFFFFFFFFFFFFFF0LL) + 16;\nLABEL_8:\n  if ( a2 < v8 )\n  {\n    v17 = (_DWORD)v8 - (_DWORD)a2;\n    memcpy(a1 + 6, a2, v8 - a2);\n    a1[10] = v17;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x27ba0L", 
            "funcEndAddr": "0x27d92L", 
            "funcName": "XXH32_update"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_digest(_DWORD *a1)\n{\n  unsigned __int64 v1; // rax\n  _DWORD *v2; // rcx\n  unsigned __int64 v3; // r8\n  int v4; // eax\n  unsigned __int64 v5; // rdx\n  unsigned int v6; // edi\n  int v8; // ecx\n  int v9; // eax\n  int v10; // edx\n  signed __int64 v11; // rsi\n  unsigned int v12; // edi\n\n  v8 = a1[4];\n  v9 = v8 + 374761393;\n  if ( a1[1] )\n    v9 = __ROR4__(a1[5], 14) + __ROL4__(a1[3], 7) + __ROL4__(a1[2], 1) + __ROL4__(v8, 12);\n  v10 = a1[10];\n  v11 = (signed __int64)(a1 + 6);\n  v12 = *a1 + v9;\n  v1 = v10 & 0xF;\n  if ( v1 > 3 )\n  {\n    v2 = (_DWORD *)v11;\n    v3 = (v1 - 4) >> 2;\n    do\n    {\n      v4 = -1028477379 * *v2;\n      ++v2;\n      v12 = 668265263 * __ROR4__(v4 + v12, 15);\n    }\n    while ( (_DWORD *)(v11 + 4 * v3 + 4) != v2 );\n    v11 += 4 * v3 + 4;\n    v1 = v10 & 3;\n  }\n  if ( v1 )\n  {\n    v5 = v11 + v1;\n    do\n      v12 = -1640531535 * __ROL4__(374761393 * *(unsigned __int8 *)(++v11 - 1) + v12, 11);\n    while ( v11 != v5 );\n  }\n  v6 = (-2048144777 * ((v12 >> 15) ^ v12) >> 13) ^ -2048144777 * ((v12 >> 15) ^ v12);\n  return (-1028477379 * v6 >> 16) ^ -1028477379 * v6;\n}\n\n__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n", 
            "funcStartAddr": "0x27970L", 
            "funcEndAddr": "0x279faL", 
            "funcName": "XXH32_digest"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_digest(_DWORD *a1)\n{\n  unsigned __int64 v1; // rax\n  _DWORD *v2; // rcx\n  unsigned __int64 v3; // r8\n  int v4; // eax\n  unsigned __int64 v5; // rdx\n  unsigned int v6; // edi\n  int v8; // ecx\n  int v9; // eax\n  int v10; // edx\n  signed __int64 v11; // rsi\n  unsigned int v12; // edi\n\n  v8 = a1[4];\n  v9 = v8 + 374761393;\n  if ( a1[1] )\n    v9 = __ROR4__(a1[5], 14) + __ROL4__(a1[3], 7) + __ROL4__(a1[2], 1) + __ROL4__(v8, 12);\n  v10 = a1[10];\n  v11 = (signed __int64)(a1 + 6);\n  v12 = *a1 + v9;\n  v1 = v10 & 0xF;\n  if ( v1 > 3 )\n  {\n    v2 = (_DWORD *)v11;\n    v3 = (v1 - 4) >> 2;\n    do\n    {\n      v4 = -1028477379 * *v2;\n      ++v2;\n      v12 = 668265263 * __ROR4__(v4 + v12, 15);\n    }\n    while ( (_DWORD *)(v11 + 4 * v3 + 4) != v2 );\n    v11 += 4 * v3 + 4;\n    v1 = v10 & 3;\n  }\n  if ( v1 )\n  {\n    v5 = v11 + v1;\n    do\n      v12 = -1640531535 * __ROL4__(374761393 * *(unsigned __int8 *)(++v11 - 1) + v12, 11);\n    while ( v11 != v5 );\n  }\n  v6 = (-2048144777 * ((v12 >> 15) ^ v12) >> 13) ^ -2048144777 * ((v12 >> 15) ^ v12);\n  return (-1028477379 * v6 >> 16) ^ -1028477379 * v6;\n}\n\n__int64 __fastcall XXH32(_DWORD *a1, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rax\n  _DWORD *v4; // rcx\n  unsigned __int64 v5; // r8\n  int v6; // eax\n  unsigned __int64 v7; // rdx\n  unsigned int v8; // edi\n  _DWORD *v10; // rax\n  int v11; // edi\n  unsigned __int64 v12; // r10\n  int v13; // er9\n  int v14; // er11\n  int v15; // edi\n  int v16; // er8\n  int v17; // ecx\n  unsigned int v18; // edi\n  char v19; // dl\n  _DWORD *v20; // rsi\n\n  v10 = a1;\n  v11 = a3 + 374761393;\n  if ( a2 > 0xF )\n  {\n    v12 = (unsigned __int64)v10 + a2 - 15;\n    v13 = a3 + 606290984;\n    v14 = a3 - 2048144777;\n    v15 = a3 + 1640531535;\n    do\n    {\n      v16 = -2048144777 * v10[1];\n      v17 = -2048144777 * *v10;\n      v10 += 4;\n      v14 = -1640531535 * __ROL4__(v14 + v16, 13);\n      v13 = -1640531535 * __ROL4__(v17 + v13, 13);\n      a3 = -1640531535 * __ROL4__(-2048144777 * *(v10 - 2) + a3, 13);\n      v15 = -1640531535 * __ROL4__(v15 - 2048144777 * *(v10 - 1), 13);\n    }\n    while ( v12 > (unsigned __int64)v10 );\n    v11 = __ROL4__(v14, 7) + __ROL4__(v13, 1) + __ROL4__(a3, 12) + __ROR4__(v15, 14);\n  }\n  v18 = a2 + v11;\n  v19 = a2 & 0xF;\n  v20 = v10;\n  v3 = v19 & 0xF;\n  if ( v3 > 3 )\n  {\n    v4 = v20;\n    v5 = (v3 - 4) >> 2;\n    do\n    {\n      v6 = -1028477379 * *v4;\n      ++v4;\n      v18 = 668265263 * __ROR4__(v6 + v18, 15);\n    }\n    while ( &v20[v5 + 1] != v4 );\n    v20 += v5 + 1;\n    v3 = v19 & 3;\n  }\n  if ( v3 )\n  {\n    v7 = (unsigned __int64)v20 + v3;\n    do\n    {\n      v20 = (_DWORD *)((char *)v20 + 1);\n      v18 = -1640531535 * __ROL4__(374761393 * *((unsigned __int8 *)v20 - 1) + v18, 11);\n    }\n    while ( v20 != (_DWORD *)v7 );\n  }\n  v8 = (-2048144777 * ((v18 >> 15) ^ v18) >> 13) ^ -2048144777 * ((v18 >> 15) ^ v18);\n  return (-1028477379 * v8 >> 16) ^ -1028477379 * v8;\n}\n", 
            "funcStartAddr": "0x27970L", 
            "funcEndAddr": "0x279faL", 
            "funcName": "XXH32_digest"
        }, 
        {
            "decompiledFuncCode": "void __fastcall XXH32_canonicalFromHash(_DWORD *a1, unsigned int a2)\n{\n  *a1 = _byteswap_ulong(a2);\n}\n", 
            "funcStartAddr": "0x27de0L", 
            "funcEndAddr": "0x27de5L", 
            "funcName": "XXH32_canonicalFromHash"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall XXH32_hashFromCanonical(unsigned int *a1)\n{\n  return _byteswap_ulong(*a1);\n}\n", 
            "funcStartAddr": "0x27df0L", 
            "funcEndAddr": "0x27df5L", 
            "funcName": "XXH32_hashFromCanonical"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_27E00(__int64 *a1, int a2)\n{\n  signed int *v2; // rbx\n  __int64 v3; // rbp\n  int v4; // er13\n  int v5; // er12\n  __int64 v6; // rax\n\n  v2 = (signed int *)a1[9];\n  v3 = *a1;\n  v4 = poll((struct pollfd *)a1[9], *((unsigned int *)a1 + 21), a2);\n  if ( v4 > 0 )\n  {\n    v5 = 0;\n    do\n    {\n      if ( *((_WORD *)v2 + 3) )\n      {\n        v6 = *(_QWORD *)(v3 + 8LL * *v2);\n        if ( !(v6 & 3) )\n          (*(void (__fastcall **)(_QWORD))v6)(*(_QWORD *)(v6 + 8));\n        ++v5;\n      }\n      v2 += 2;\n    }\n    while ( v5 < v4 );\n  }\n  return (unsigned int)v4;\n}\n", 
            "funcStartAddr": "0x27e00L", 
            "funcEndAddr": "0x27e66L", 
            "funcName": "sub_27E00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_27E70(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // ebp\n  _DWORD *v3; // rax\n  __int64 v4; // rdx\n  void *v5; // rax\n  signed __int64 result; // rax\n  __int64 v7; // rdx\n\n  v2 = *(_DWORD *)(a2 + 24);\n  if ( *(_DWORD *)(a1 + 84) <= v2\n    || (v3 = (_DWORD *)(*(_QWORD *)(a1 + 72) + 8LL * (signed int)v2), *v3 != *(_DWORD *)(a2 + 16)) )\n  {\n    *__errno_location() = 22;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v4 = *(unsigned int *)(a1 + 96);\n    *v3 = -1;\n    v5 = *(void **)(a1 + 88);\n    if ( *(_DWORD *)(a1 + 100) == (_DWORD)v4 )\n    {\n      v7 = (unsigned int)(v4 + 16);\n      *(_DWORD *)(a1 + 100) = v7;\n      v5 = realloc(v5, 4 * v7);\n      *(_QWORD *)(a1 + 88) = v5;\n      if ( !v5 )\n        ck_assert_failed((__int64)\"fdevent_impl.c\", 918LL, (__int64)\"((void *)0) != ev->unused.ptr\");\n      v4 = *(unsigned int *)(a1 + 96);\n    }\n    *(_DWORD *)(a1 + 96) = v4 + 1;\n    *((_DWORD *)v5 + v4) = v2;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x27e70L", 
            "funcEndAddr": "0x28054L", 
            "funcName": "sub_27E70"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_28060(__int64 a1, __int64 a2)\n{\n  return epoll_ctl(*(_DWORD *)(a1 + 60), 2, *(_DWORD *)(a2 + 16), 0LL);\n}\n", 
            "funcStartAddr": "0x28060L", 
            "funcEndAddr": "0x28072L", 
            "funcName": "sub_28060"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_28080(__int64 a1, epoll_data_t a2, int a3)\n{\n  int v3; // ecx\n  bool v4; // zf\n  int v5; // edx\n  int v6; // edi\n  struct epoll_event event; // [rsp+Ch] [rbp-1Ch]\n  unsigned __int64 v9; // [rsp+18h] [rbp-10h]\n\n  v3 = a3;\n  v9 = __readfsqword(0x28u);\n  v4 = *(_DWORD *)(a2.u64 + 24) == -1;\n  v5 = *(_DWORD *)(a2.u64 + 16);\n  v6 = *(_DWORD *)(a1 + 60);\n  event.data = a2;\n  *(_DWORD *)(a2.u64 + 24) = v5;\n  event.events = v3 | 0x18;\n  return epoll_ctl(v6, 2 * !v4 + 1, v5, &event);\n}\n", 
            "funcStartAddr": "0x28080L", 
            "funcEndAddr": "0x280e2L", 
            "funcName": "sub_28080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_poll(__int64 a1)\n{\n  unsigned int v1; // er13\n  __int64 i; // r15\n  unsigned __int64 v4; // r15\n  __int64 v5; // rbx\n  void *v6; // r12\n\n  *(_QWORD *)(a1 + 8);\n  v1 = (*(__int64 (**)(void))(a1 + 32))();\n  if ( (v1 & 0x80000000) == 0 )\n  {\n    for ( i = *(_QWORD *)(a1 + 8); i; *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = 0LL )\n    {\n      v4 = i & 0xFFFFFFFFFFFFFFFCLL;\n      v5 = *(signed int *)(v4 + 16);\n      v6 = (void *)v4;\n      if ( close(*(_DWORD *)(v4 + 16)) )\n        log_perror(*(_DWORD **)(a1 + 40), \"fdevent_impl.c\", 323LL, (__int64)\"close failed %d\", (unsigned int)v5);\n      else\n        --**(_DWORD **)(a1 + 48);\n      i = *(_QWORD *)(v4 + 8);\n      free(v6);\n    }\n    *(_QWORD *)(a1 + 8) = 0LL;\n  }\n  else if ( *__errno_location() != 4 )\n  {\n    log_perror(*(_DWORD **)(a1 + 40), \"fdevent_impl.c\", 346LL, (__int64)\"fdevent_poll failed\");\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x280f0L", 
            "funcEndAddr": "0x281d7L", 
            "funcName": "fdevent_poll"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_281E0(__int64 a1, signed int a2)\n{\n  signed int v2; // ebx\n  __int64 v3; // rbp\n  int v4; // er11\n  int v5; // edx\n  __int64 *v6; // r10\n  __int64 v7; // rsi\n  signed __int64 v8; // r8\n  __int64 v9; // rax\n  __int64 *v10; // rdi\n  unsigned __int64 v11; // r13\n  __int64 v12; // rdx\n  int v13; // er12\n  bool v14; // cl\n  signed __int64 v16; // rax\n  signed int v17; // edx\n\n  v2 = a2;\n  if ( a2 > 2 )\n  {\n    v3 = a1;\n    v4 = 0;\n    v5 = 2;\n    do\n    {\n      v6 = (__int64 *)(v3 + 8LL * v4);\n      v7 = *v6;\n      v8 = v6[1];\n      if ( v5 >= v2 )\n      {\nLABEL_9:\n        v5 = v4 + 4;\n        v4 += 2;\n      }\n      else\n      {\n        v9 = v5;\n        v10 = (__int64 *)(v3 + 8LL * v5);\n        v11 = v5 + (unsigned __int64)((v2 - 1 - v5) & 0xFFFFFFFE) + 2;\n        while ( 1 )\n        {\n          v12 = *v10;\n          v13 = v9;\n          v14 = *v10 < v7 ? v10[1] < v7 - 80 : v12 - 80 > v8;\n          if ( !v14 )\n            break;\n          v9 += 2LL;\n          v10 += 2;\n          if ( v11 == v9 )\n            goto LABEL_9;\n        }\n        if ( v12 > v7 )\n          v12 = *v6;\n        v16 = v9 + 1;\n        *v6 = v12;\n        v17 = v2;\n        if ( *(_QWORD *)(v3 + 8 * v16) >= v8 )\n          v8 = *(_QWORD *)(v3 + 8 * v16);\n        v2 -= 2;\n        v6[1] = v8;\n        memmove(v10, (const void *)(v3 + 8 * v16 + 8), 8LL * (v17 - v13 - 2));\n        v4 = 0;\n        v5 = 2;\n      }\n    }\n    while ( v2 > v5 );\n  }\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0x281e0L", 
            "funcEndAddr": "0x282d4L", 
            "funcName": "sub_281E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_282E0(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbx\n  __int64 v4; // r12\n  signed __int64 v6; // rax\n  signed int v7; // er12\n  const char *v8; // rbp\n  unsigned __int64 v9; // r15\n  __int64 v10; // rax\n  const char *v11; // rdx\n  __int64 *v12; // r13\n  char v13; // si\n  bool v14; // di\n  char *v15; // rax\n  char v16; // al\n  __int64 *v17; // r15\n  signed int v18; // ebp\n  int v19; // eax\n  signed __int64 v20; // rbp\n  __int64 v21; // rax\n  const char *v22; // rax\n  char v23; // cl\n  __int64 v24; // rsi\n  __int64 v25; // rax\n  __int64 v26; // rbx\n  __int64 v27; // rax\n  signed __int64 v28; // r12\n  unsigned int v29; // er13\n  __int64 v30; // r14\n  int v31; // eax\n  __int64 v32; // rdi\n  __int64 *v33; // r13\n  unsigned int v34; // eax\n  signed __int64 v35; // rbp\n  __int64 v36; // rdx\n  __int64 v37; // rcx\n  int v38; // eax\n  __int64 v39; // rsi\n  int v40; // edx\n  __int64 v41; // rsi\n  _BOOL8 v42; // rcx\n  __int64 v43; // rdx\n  signed __int64 v44; // rax\n  __int64 v45; // rsi\n  __int64 v46; // rbx\n  __int64 v47; // rax\n  __int64 v48; // rbp\n  __int64 v49; // rbp\n  int v50; // eax\n  __int64 v51; // rbx\n  int v52; // eax\n  __int64 v53; // rax\n  __m128i v54; // xmm0\n  __int64 v55; // rdx\n  __int64 v56; // rsi\n  __int64 v57; // rcx\n  bool v58; // zf\n  __int64 v59; // rdi\n  __int64 v60; // rsi\n  char **endptr; // [rsp+8h] [rbp-190h]\n  __int128 v62; // [rsp+10h] [rbp-188h]\n  __int64 *v63; // [rsp+20h] [rbp-178h]\n  __int64 *v64; // [rsp+28h] [rbp-170h]\n  __m128i v65; // [rsp+30h] [rbp-168h]\n  __m128i v66; // [rsp+40h] [rbp-158h]\n  __m128i v67; // [rsp+50h] [rbp-148h]\n  __int64 v68; // [rsp+60h] [rbp-138h]\n  __int64 v69; // [rsp+70h] [rbp-128h]\n  __int64 v70[19]; // [rsp+78h] [rbp-120h]\n  __int64 v71; // [rsp+110h] [rbp-88h]\n  __int64 v72; // [rsp+118h] [rbp-80h]\n  __int128 v73; // [rsp+120h] [rbp-78h]\n  __int128 v74; // [rsp+130h] [rbp-68h]\n  __int128 v75; // [rsp+140h] [rbp-58h]\n  __int64 v76; // [rsp+150h] [rbp-48h]\n  unsigned __int64 v77; // [rsp+158h] [rbp-40h]\n\n  v2 = *(_QWORD *)(a1 + 640);\n  v77 = __readfsqword(0x28u);\n  v3 = v2 - *(_QWORD *)(a1 + 648);\n  if ( !v3 )\n    return *(unsigned int *)(a1 + 4);\n  if ( *((_DWORD *)a2 + 2) - (unsigned int)(*((_DWORD *)a2 + 2) != 0) <= 5 )\n    return *(unsigned int *)(a1 + 4);\n  v4 = *a2;\n  if ( !(unsigned int)buffer_eq_icase_ssn(*a2, \"bytes=\", 6LL) )\n    return *(unsigned int *)(a1 + 4);\n  *(_QWORD *)&v62 = a1;\n  v64 = &v69;\n  v63 = (__int64 *)(v3 - 1);\n  v6 = v4 + 6;\n  v7 = 0;\n  v8 = (const char *)v6;\n  while ( 1 )\n  {\n    v9 = 8LL * v7;\n    v10 = strtoll(v8, (char **)&v65, 10);\n    v11 = (const char *)v65.m128i_i64[0];\n    v12 = (__int64 *)((char *)&v69 + v9);\n    *(__int64 *)((char *)&v69 + v9 + 8) = -1LL;\n    v13 = *v11;\n    if ( v10 < 0 )\n    {\n      v14 = v13 == 9 || v13 == 32;\n      if ( v10 != 0x8000000000000000LL )\n      {\n        v24 = v10;\n        v25 = v3 + v10;\n        if ( v3 <= -v24 )\n          v25 = 0LL;\n        *v12 = v25;\n        v12[1] = (__int64)v63;\n      }\n    }\n    else\n    {\n      v14 = v13 == 32 || v13 == 9;\n      if ( v10 != 0x7FFFFFFFFFFFFFFFLL && v3 > v10 && v8 != v11 )\n      {\n        *v12 = v10;\n        if ( v14 )\n        {\n          v15 = (char *)(v11 + 1);\n          do\n          {\n            do\n            {\n              v65.m128i_i64[0] = (__int64)v15;\n              v13 = *v15;\n              v11 = v15++;\n            }\n            while ( v13 == 32 );\n          }\n          while ( v13 == 9 );\n        }\n        if ( v13 != 45 )\n        {\n          v11 = (const char *)v65.m128i_i64[0];\nLABEL_17:\n          v16 = *v11;\n          if ( *v11 )\n            goto LABEL_18;\n          goto LABEL_40;\n        }\n        v20 = (signed __int64)(v11 + 1);\n        v21 = strtoll(v11 + 1, (char **)&v65, 10);\n        v11 = (const char *)v65.m128i_i64[0];\n        if ( v20 != v65.m128i_i64[0] && (v21 || *(_BYTE *)(v65.m128i_i64[0] - 1) == 48) )\n        {\n          v14 = *(_BYTE *)v65.m128i_i64[0] == 9 || *(_BYTE *)v65.m128i_i64[0] == 32;\n          if ( v21 >= *v12 && v21 != 0x7FFFFFFFFFFFFFFFLL )\n          {\n            if ( v3 <= v21 )\n              v21 = (__int64)v63;\n            v12[1] = v21;\n          }\n        }\n        else\n        {\n          v12[1] = (__int64)v63;\n          v14 = *v11 == 9 || *v11 == 32;\n        }\n      }\n    }\n    if ( !v14 )\n      goto LABEL_17;\n    v22 = v11 + 1;\n    do\n    {\n      do\n      {\n        v65.m128i_i64[0] = (__int64)v22;\n        v23 = *v22;\n        v11 = v22++;\n      }\n      while ( v23 == 32 );\n    }\n    while ( v23 == 9 );\n    v16 = *v11;\n    if ( *v11 )\n    {\nLABEL_18:\n      if ( v16 != 44 )\n        goto LABEL_19;\n    }\nLABEL_40:\n    if ( v70[v9 / 8] != -1 )\n    {\n      v7 += 2;\n      goto LABEL_24;\n    }\nLABEL_19:\n    if ( v16 != 44 && v16 )\n    {\n      do\n        v16 = *++v11;\n      while ( *v11 && v16 != 44 );\n    }\nLABEL_24:\n    v8 = v11 + 1;\n    if ( !v16 )\n      break;\n    if ( v7 > 19 )\n    {\n      v17 = (__int64 *)v62;\n      v18 = v7;\nLABEL_27:\n      v18 = sub_281E0((__int64)v64, v18);\n      goto LABEL_28;\n    }\n  }\n  v18 = v7;\n  v17 = (__int64 *)v62;\n  if ( v7 > 2 )\n    goto LABEL_27;\nLABEL_28:\n  if ( v18 == 2 )\n  {\n    v72 = 0LL;\n    v48 = v17[80];\n    v73 = 0LL;\n    v49 = v48 - v17[81];\n    v71 = 35679995459938LL;\n    v74 = 0LL;\n    v75 = 0LL;\n    v62 = 0LL;\n    v76 = 0LL;\n    v50 = li_itostrn((char *)&v71 + 6, 66LL);\n    *((_BYTE *)&v71 + (unsigned int)(v50 + 6)) = 45;\n    v63 = &qword_48;\n    v51 = (unsigned int)li_itostrn((char *)&v71 + (unsigned int)(v50 + 7), 72LL - (unsigned int)(v50 + 7)) + v50 + 7;\n    *((_BYTE *)&v71 + v51) = 47;\n    v52 = li_itostrn((char *)&v71 + (unsigned int)(v51 + 1), 72LL - (unsigned int)(v51 + 1));\n    http_header_response_set(v17, 16LL, \"Content-Range\", 13LL, &v71, (unsigned int)(v51 + 1 + v52));\n    v53 = v17[78];\n    v54 = _mm_load_si128((const __m128i *)&v62);\n    if ( v53 == v17[79] )\n    {\n      v55 = v69;\n      if ( v69 )\n      {\n        chunkqueue_mark_written(v17 + 78, v69);\n        v55 = v69;\n        v60 = v17[80];\n        v17[81] -= v69;\n        v53 = v17[78];\n        v56 = v60 - v55;\n      }\n      else\n      {\n        v56 = v17[80];\n      }\n      v57 = v70[0];\n      v58 = *(_DWORD *)(v53 + 8) == 1;\n      v45 = v70[0] - v49 + v56 + 1;\n      v59 = *(_QWORD *)(v53 + 24);\n      v17[80] = v45;\n      if ( v58 )\n      {\n        *(_QWORD *)(v53 + 32) = v57 - v55 + v59 + 1;\n        v45 = v17[80];\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(v53 + 16) + 8LL) = v57 + v59 + 2 - v55;\n      }\n    }\n    else\n    {\n      v65 = v54;\n      v68 = 0LL;\n      v66 = v54;\n      v67 = v54;\n      chunkqueue_steal(&v65, v17 + 78, v49);\n      v17[81] -= v49;\n      v17[80] -= v49;\n      chunkqueue_mark_written(&v65, v69);\n      chunkqueue_steal(v17 + 78, &v65, v70[0] - v69 + 1);\n      chunkqueue_reset(&v65);\n      v45 = v17[80];\n    }\n    v44 = v17[81];\n  }\n  else\n  {\n    if ( !v18 )\n    {\n      v72 = 0LL;\n      v71 = 3398564548799920482LL;\n      v73 = 0LL;\n      v19 = li_itostrn(&v72, 24LL);\n      http_header_response_set(v17, 16LL, \"Content-Range\", 13LL, &v71, (unsigned int)(v19 + 8));\n      v17[4] = 0LL;\n      *((_DWORD *)v17 + 1) = 416;\n      return 416LL;\n    }\n    v26 = v17[71];\n    buffer_copy_string_len(v17[71], \"\\r\\n--fkj49sn38dcn3\", 17LL);\n    v27 = http_header_response_get(v17, 18LL, \"Content-Type\", 12LL);\n    if ( v27 )\n      buffer_append_str2(\n        v26,\n        \"\\r\\nContent-Type: \",\n        16LL,\n        *(_QWORD *)v27,\n        *(_DWORD *)(v27 + 8) - (unsigned int)(*(_DWORD *)(v27 + 8) != 0));\n    v28 = (signed __int64)(v17 + 78);\n    buffer_append_string_len(v26, \"\\r\\nContent-Range: bytes \", 23LL);\n    v29 = *(_DWORD *)(v26 + 8) - (*(_DWORD *)(v26 + 8) != 0);\n    http_header_response_set(v17, 18LL, \"Content-Type\", 12LL, \"multipart/byteranges; boundary=fkj49sn38dcn3\", 44LL);\n    v30 = v17[78];\n    endptr = (char **)(v17[80] - v17[81]);\n    if ( v30 == v17[79] )\n    {\n      if ( *(_DWORD *)(v30 + 8) )\n        v30 = 0LL;\n    }\n    else\n    {\n      v30 = 0LL;\n    }\n    if ( v18 > 0 )\n    {\n      v31 = v29 + 1;\n      v32 = v29;\n      v33 = v64;\n      v64 = v17;\n      LODWORD(v62) = v31;\n      v34 = v18 - 1;\n      v35 = (signed __int64)(v33 + 2);\n      v63 = &v33[2 * (v34 >> 1) + 2];\n      while ( 1 )\n      {\n        v38 = v62;\n        *(_BYTE *)(*(_QWORD *)v26 + v32) = 0;\n        v39 = *v33;\n        *(_DWORD *)(v26 + 8) = v38;\n        buffer_append_int(v26, v39);\n        buffer_append_string_len(v26, \"-\", 1LL);\n        buffer_append_int(v26, v33[1]);\n        buffer_append_string_len(v26, \"/\", 1LL);\n        buffer_append_int(v26, endptr);\n        buffer_append_string_len(v26, \"\\r\\n\\r\\n\", 4LL);\n        v40 = *(_DWORD *)(v26 + 8);\n        v41 = *(_QWORD *)v26;\n        v42 = v40 != 0;\n        v43 = (unsigned int)(v40 - v42);\n        if ( v30 )\n          chunkqueue_append_mem(v28, v41, v43, v42);\n        else\n          chunkqueue_append_mem_min(v28, v41, v43);\n        v36 = *v33;\n        v37 = v33[1];\n        v33 = (__int64 *)v35;\n        chunkqueue_append_cq_range(v28, v28, v36, v37 - v36 + 1);\n        if ( v63 == (__int64 *)v35 )\n          break;\n        v35 += 16LL;\n      }\n      v17 = v64;\n    }\n    chunkqueue_append_mem_min(v28, \"\\r\\n--fkj49sn38dcn3--\\r\\n\", 21LL);\n    chunkqueue_mark_written(v28, (char *)endptr + 2);\n    v44 = v17[81] - ((_QWORD)endptr + 2);\n    v45 = v17[80] - ((_QWORD)endptr + 2);\n    v17[81] = v44;\n    v17[80] = v45;\n  }\n  v46 = v45 - v44;\n  v47 = http_header_response_set_ptr(v17, 14LL, \"Content-Length\", 14LL);\n  buffer_append_int(v47, v46);\n  *((_DWORD *)v17 + 1) = 206;\n  return 206LL;\n}\n", 
            "funcStartAddr": "0x282e0L", 
            "funcEndAddr": "0x28b26L", 
            "funcName": "sub_282E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_range_rfc7233(__int64 a1)\n{\n  signed __int64 result; // rax\n  signed int v2; // ebp\n  __int64 v3; // rax\n  __int64 v4; // rax\n  __int64 *v5; // rbp\n  _BYTE **v6; // r12\n  __int64 v7; // rax\n\n  result = *(unsigned int *)(a1 + 4);\n  if ( *(_BYTE *)(a1 + 560) && (_DWORD)result == 200 )\n  {\n    v2 = *(_DWORD *)(a1 + 24);\n    if ( v2 <= 1 && *(_DWORD *)(a1 + 28) > 0 )\n    {\n      v3 = *(_QWORD *)(a1 + 528);\n      if ( !(v3 & 0x1000000002000LL) )\n      {\n        if ( !(v3 & 0x10) )\n        {\n          http_header_response_set(a1, 4LL, \"Accept-Ranges\", 13LL, \"bytes\", 5LL);\n          v2 = *(_DWORD *)(a1 + 24);\nLABEL_9:\n          if ( !v2 )\n          {\n            v5 = (__int64 *)http_header_request_get(a1, 40LL, \"Range\", 5LL);\n            if ( v5 )\n            {\n              if ( !(*(_BYTE *)(a1 + 236) & 1) )\n                return sub_282E0(a1, v5);\n              v6 = (_BYTE **)http_header_request_get(a1, 32LL, &unk_46336, 8LL);\n              v7 = **v6 == 34 ? http_header_response_get(a1, 22LL, \"ETag\", 4LL) : http_header_response_get(\n                                                                                    a1,\n                                                                                    34LL,\n                                                                                    \"Last-Modified\",\n                                                                                    13LL);\n              if ( v7 && (unsigned int)buffer_is_equal(v6, v7) )\n                return sub_282E0(a1, v5);\n            }\n          }\n          goto LABEL_17;\n        }\n        v4 = http_header_response_get(a1, 4LL, \"Accept-Ranges\", 13LL);\n        if ( !(unsigned int)buffer_eq_slen(v4, \"none\", 4LL) )\n          goto LABEL_9;\n      }\n    }\nLABEL_17:\n    result = 200LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x28b30L", 
            "funcEndAddr": "0x28ca9L", 
            "funcName": "http_range_rfc7233"
        }, 
        {
            "decompiledFuncCode": "void vector_free(void *ptr)\n{\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x28cb0L", 
            "funcEndAddr": "0x28cb5L", 
            "funcName": "vector_free"
        }, 
        {
            "decompiledFuncCode": "void *vector_malloc(size_t size)\n{\n  return malloc(size);\n}\n", 
            "funcStartAddr": "0x28cc0L", 
            "funcEndAddr": "0x28cc5L", 
            "funcName": "vector_malloc"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall vector_realloc(void *a1, unsigned __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  size_t v4; // rbp\n  unsigned __int64 v5; // rbx\n  char *v6; // rax\n  char *v7; // r12\n\n  v4 = a3 * a2;\n  v5 = a2 * a4;\n  if ( !is_mul_ok(a2, a3) )\n    ck_assert_failed((__int64)\"vector.c\", 15LL, (__int64)\"size <= SIZE_MAX / elem_size\");\n  v6 = (char *)realloc(a1, v4);\n  v7 = v6;\n  if ( !v6 )\n    ck_assert_failed((__int64)\"vector.c\", 17LL, (__int64)\"NULL != data\");\n  memset(&v6[v5], 0, v4 - v5);\n  return v7;\n}\n", 
            "funcStartAddr": "0x28cd0L", 
            "funcEndAddr": "0x28d43L", 
            "funcName": "vector_realloc"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_28D50(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n  int v3; // eax\n  int v4; // eax\n  int v5; // eax\n  __int64 v6; // rdx\n\n  result = *a2;\n  switch ( (_DWORD)result )\n  {\n    case 0:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 16) = result;\n      break;\n    case 1:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 24) = result;\n      break;\n    case 2:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 32) = result;\n      break;\n    case 3:\n      result = a2[2];\n      *(_DWORD *)(a1 + 48) = result;\n      break;\n    case 4:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 52) = result;\n      break;\n    case 5:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 54) = result;\n      break;\n    case 6:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 56) = result;\n      break;\n    case 7:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 58) = result;\n      break;\n    case 8:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 120) = result;\n      break;\n    case 9:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 104) = result;\n      break;\n    case 0xA:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 112) = result;\n      break;\n    case 0xB:\n      result = a2[2];\n      *(_BYTE *)(a1 + 71) = (_DWORD)result != 0;\n      break;\n    case 0xC:\n      *(_BYTE *)(a1 + 68) = a2[2] != 0;\n      break;\n    case 0xD:\n      *(_BYTE *)(a1 + 66) = a2[2] != 0;\n      break;\n    case 0xE:\n      *(_BYTE *)(a1 + 65) = a2[2] != 0;\n      break;\n    case 0xF:\n      *(_BYTE *)(a1 + 70) = a2[2] != 0;\n      break;\n    case 0x10:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 60) = result;\n      break;\n    case 0x11:\n      result = *((unsigned __int16 *)a2 + 4);\n      *(_WORD *)(a1 + 62) = result;\n      break;\n    case 0x12:\n      result = *((_QWORD *)a2 + 1);\n      v6 = *(_QWORD *)(result + 8);\n      *(_QWORD *)(a1 + 96) = result;\n      *(_DWORD *)(a1 + 88) = v6;\n      break;\n    case 0x13:\n      result = (unsigned int)*((unsigned __int16 *)a2 + 4) << 10;\n      *(_DWORD *)(a1 + 84) = result;\n      break;\n    case 0x14:\n      result = *((_QWORD *)a2 + 1);\n      *(_QWORD *)(a1 + 8) = result;\n      break;\n    case 0x15:\n      *(_BYTE *)(a1 + 69) = a2[2] != 0;\n      break;\n    case 0x16:\n      v5 = *(unsigned __int8 *)(a1 + 67);\n      if ( a2[2] )\n        result = v5 | 1u;\n      else\n        result = v5 & 0xFFFFFFFE;\n      *(_BYTE *)(a1 + 67) = result;\n      break;\n    case 0x17:\n      v4 = *(unsigned __int8 *)(a1 + 67);\n      if ( a2[2] )\n        result = v4 | 2u;\n      else\n        result = v4 & 0xFFFFFFFD;\n      *(_BYTE *)(a1 + 67) = result;\n      break;\n    case 0x18:\n      v3 = *(unsigned __int8 *)(a1 + 67);\n      if ( a2[2] )\n        result = v3 | 4u;\n      else\n        result = v3 & 0xFFFFFFFB;\n      *(_BYTE *)(a1 + 67) = result;\n      break;\n    case 0x19:\n      *(_BYTE *)(a1 + 77) = a2[2] != 0;\n      break;\n    case 0x1A:\n      *(_BYTE *)(a1 + 73) = a2[2] != 0;\n      break;\n    case 0x1B:\n      *(_BYTE *)(a1 + 75) = a2[2] != 0;\n      break;\n    case 0x1C:\n      *(_BYTE *)(a1 + 74) = a2[2] != 0;\n      break;\n    case 0x1D:\n      *(_BYTE *)(a1 + 76) = a2[2] != 0;\n      break;\n    case 0x1E:\n      *(_BYTE *)(a1 + 78) = a2[2] != 0;\n      break;\n    case 0x1F:\n      result = a2[2];\n      *(_BYTE *)(a1 + 79) = (_DWORD)result != 0;\n      break;\n    case 0x20:\n      if ( a2[1] == 10 )\n      {\n        result = *((_QWORD *)a2 + 1);\n        *(_QWORD *)(a1 + 40) = result;\n      }\n      break;\n    case 0x21:\n      if ( a2[1] == 10 )\n      {\n        result = *((_QWORD *)a2 + 1);\n        *(_QWORD *)(a1 + 128) = result;\n      }\n      break;\n    default:\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x28d50L", 
            "funcEndAddr": "0x28ff7L", 
            "funcName": "sub_28D50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall config_reset_config_bytes_sec(__int64 a1)\n{\n  __int64 v1; // rsi\n  signed int v2; // eax\n  bool v3; // dl\n  unsigned int *v4; // rcx\n  unsigned __int64 v5; // rdi\n  signed __int64 v6; // rax\n  int i; // edx\n\n  v1 = *(_QWORD *)(a1 + 8);\n  if ( v1 )\n  {\n    v2 = *(_DWORD *)(a1 + 4);\n    v3 = *(_DWORD *)(v1 + 12) == 0;\n    if ( v3 < v2 )\n    {\n      v4 = (unsigned int *)(v1 + 16LL * v3 + 8);\n      v5 = v1 + 16 * (v3 + (unsigned __int64)(v2 - 1 - (unsigned int)v3)) + 24;\n      do\n      {\n        v6 = v1 + 16LL * *v4;\n        for ( i = *(_DWORD *)v6; *(_DWORD *)v6 != -1; i = *(_DWORD *)v6 )\n        {\n          if ( i == 18 && *(_DWORD *)(v6 + 4) == 10 )\n            **(_QWORD **)(v6 + 8) = 0LL;\n          v6 += 16LL;\n        }\n        v4 += 4;\n      }\n      while ( v4 != (unsigned int *)v5 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x29000L", 
            "funcEndAddr": "0x29086L", 
            "funcName": "config_reset_config_bytes_sec"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall config_patch_config(__int64 a1)\n{\n  __int64 v1; // r15\n  __int64 result; // rax\n  signed __int64 v3; // rbp\n  signed __int64 v4; // r14\n  unsigned int *v5; // rbx\n  unsigned int *v6; // rsi\n\n  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 936LL);\n  result = *(unsigned int *)(v1 + 4);\n  if ( (signed int)result > 1 )\n  {\n    v3 = 16LL;\n    v4 = 16 * ((unsigned int)(result - 2) + 2LL);\n    do\n    {\n      while ( 1 )\n      {\n        result = config_check_cond(a1, *(unsigned int *)(*(_QWORD *)(v1 + 8) + v3));\n        if ( (_DWORD)result )\n          break;\n        v3 += 16LL;\n        if ( v3 == v4 )\n          return result;\n      }\n      v5 = (unsigned int *)(*(_QWORD *)(v1 + 8) + 16LL * *(unsigned int *)(*(_QWORD *)(v1 + 8) + v3 + 8));\n      do\n      {\n        v6 = v5;\n        v5 += 4;\n        result = sub_28D50(a1 + 88, v6);\n      }\n      while ( *v5 != -1 );\n      v3 += 16LL;\n    }\n    while ( v3 != v4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x29090L", 
            "funcEndAddr": "0x2912cL", 
            "funcName": "config_patch_config"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall li_base64_dec(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, __int64 a4, int a5)\n{\n  char *v5; // rbp\n  unsigned __int64 v6; // rax\n  unsigned __int8 *v7; // r10\n  unsigned __int64 v8; // r11\n  __int64 v9; // r8\n  __int64 v10; // r9\n  unsigned __int8 *v11; // rbx\n  __int64 v12; // rax\n  char v13; // ah\n  __int64 v14; // r9\n  unsigned __int64 result; // rax\n  __int64 v16; // rax\n\n  v5 = (char *)&unk_481C0;\n  if ( a5 )\n    v5 = (char *)&unk_480E0;\n  if ( !a4 )\n    return 0LL;\n  v6 = *a3;\n  if ( v6 > 0x7F )\n  {\n    v11 = a3;\n    v8 = 0LL;\n    v9 = 0LL;\n    LOBYTE(v10) = 0;\n    goto LABEL_13;\n  }\n  v7 = a3 + 1;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  while ( 1 )\n  {\n    v12 = v5[v6];\n    if ( v12 < 0 )\n      break;\n    v9 = v12 | (v9 << 6);\n    if ( (v10 & 3) == 3 )\n    {\n      *(_BYTE *)(a1 + v8 + 2) = v9;\n      *(_BYTE *)(a1 + v8) = BYTE2(v9);\n      v13 = BYTE1(v9);\n      v9 = 0LL;\n      *(_BYTE *)(a1 + v8 + 1) = v13;\n      v8 += 3LL;\n    }\nLABEL_10:\n    if ( a4 == ++v10 )\n      goto LABEL_11;\n    v6 = *v7;\n    v11 = v7++;\n    if ( v6 > 0x7F )\n      goto LABEL_13;\n  }\n  if ( v12 == -2 )\n    goto LABEL_10;\n  if ( a4 == v10 || v12 == -3 )\n  {\n    LOBYTE(a4) = v10;\nLABEL_11:\n    v14 = a4 & 3;\n    goto LABEL_15;\n  }\n  v11 = &a3[v10];\nLABEL_13:\n  if ( !*v11 )\n    return 0LL;\n  v14 = v10 & 3;\nLABEL_15:\n  if ( v14 == 2 )\n  {\nLABEL_21:\n    result = v8 + 1;\n    *(_BYTE *)(a1 + v8) = v9 >> 4;\n    goto LABEL_22;\n  }\n  if ( v14 == 3 )\n  {\n    v16 = v9;\n    v9 *= 4LL;\n    *(_BYTE *)(a1 + v8++) = v16 >> 10;\n    goto LABEL_21;\n  }\n  if ( v14 )\n    return 0LL;\n  result = v8;\nLABEL_22:\n  if ( result > a2 )\n    ck_assert_failed((__int64)\"base64.c\", 81LL, (__int64)\"out_pos <= out_length\");\n  return result;\n}\n", 
            "funcStartAddr": "0x29130L", 
            "funcEndAddr": "0x29283L", 
            "funcName": "li_base64_dec"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall li_base64_enc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, int a5, int a6)\n{\n  bool v6; // zf\n  const char *v7; // r8\n  __int64 v8; // r10\n  signed __int64 result; // rax\n  unsigned __int64 v10; // rbx\n  int v11; // edx\n  int v12; // esi\n  int v13; // edx\n  char v14; // bp\n  char v15; // bp\n  int v16; // edx\n  char v17; // si\n  char v18; // cl\n  signed __int64 v19; // rdx\n  int v20; // edx\n  char v21; // cl\n\n  v6 = a5 == 0;\n  v7 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  if ( !v6 )\n    v7 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\n  if ( a4 > 0xBFFFFFFD )\n    ck_assert_failed((__int64)\"base64.c\", 101LL, (__int64)\"in_length <= 3221225469\");\n  v8 = a3;\n  if ( 4 * ((unsigned __int64)(0xAAAAAAAAAAAAAAABLL * (unsigned __int128)(a4 + 2) >> 64) >> 1) > a2 )\n    ck_assert_failed((__int64)\"base64.c\", 102LL, (__int64)\"(in_length+2)/3*4 <= out_length\");\n  result = 0LL;\n  v10 = 2LL;\n  if ( a4 > 2 )\n  {\n    do\n    {\n      v11 = (*(unsigned __int8 *)(v8 + v10 - 1) << 8) | (*(unsigned __int8 *)(v8 + v10 - 2) << 16);\n      v12 = *(unsigned __int8 *)(v8 + v10);\n      v10 += 3LL;\n      v13 = v12 | v11;\n      v14 = v7[(unsigned __int64)v13 >> 18];\n      *(_BYTE *)(a1 + result + 3) = v7[v13 & 0x3F];\n      *(_BYTE *)(a1 + result) = v14;\n      v15 = v7[((unsigned __int64)v13 >> 12) & 0x3F];\n      *(_BYTE *)(a1 + result + 2) = v7[((unsigned __int64)v13 >> 6) & 0x3F];\n      *(_BYTE *)(a1 + result + 1) = v15;\n      result += 4LL;\n    }\n    while ( a4 > v10 );\n    a4 = a4 + 2 - v10;\n  }\n  if ( a4 == 1 )\n  {\n    v20 = 16 * *(unsigned __int8 *)(v8 + v10 - 2);\n    v21 = v7[(unsigned __int64)v20 >> 6];\n    *(_BYTE *)(a1 + result + 1) = v7[v20 & 0x30];\n    v19 = result + 2;\n    *(_BYTE *)(a1 + result) = v21;\n    if ( a6 )\n    {\n      *(_BYTE *)(a1 + result + 3) = 61;\n      *(_BYTE *)(a1 + result + 2) = 61;\n      result += 4LL;\n      return result;\n    }\n  }\n  else\n  {\n    if ( a4 != 2 )\n      return result;\n    v16 = 4 * *(unsigned __int8 *)(v8 + v10 - 1) | (*(unsigned __int8 *)(v8 + v10 - 2) << 10);\n    v17 = v7[(unsigned __int64)v16 >> 12];\n    v18 = v7[((unsigned __int64)v16 >> 6) & 0x3F];\n    *(_BYTE *)(a1 + result + 2) = v7[4 * *(_BYTE *)(v8 + v10 - 1) & 0x3C];\n    v19 = result + 3;\n    *(_BYTE *)(a1 + result) = v17;\n    *(_BYTE *)(a1 + result + 1) = v18;\n    if ( a6 )\n    {\n      *(_BYTE *)(a1 + result + 3) = 61;\n      result += 4LL;\n      return result;\n    }\n  }\n  return v19;\n}\n", 
            "funcStartAddr": "0x29290L", 
            "funcEndAddr": "0x29450L", 
            "funcName": "li_base64_enc"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall buffer_append_base64_enc(__int64 a1, __int64 a2, unsigned __int64 a3, int a4, int a5)\n{\n  int v5; // er15\n  unsigned __int64 v6; // r12\n  int v7; // er14\n  unsigned __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // r13\n  signed __int64 v11; // rax\n\n  v5 = a5;\n  v6 = a3;\n  v7 = a4;\n  v8 = 4 * ((unsigned __int64)(0xAAAAAAAAAAAAAAABLL * (unsigned __int128)(a3 + 2) >> 64) >> 1);\n  v9 = buffer_string_prepare_append(a1, v8);\n  v10 = v9;\n  v11 = li_base64_enc(v9, v8, a2, v6, v7, v5);\n  buffer_commit(a1, v11);\n  return v10;\n}\n", 
            "funcStartAddr": "0x29450L", 
            "funcEndAddr": "0x294cfL", 
            "funcName": "buffer_append_base64_enc"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall buffer_append_base64_decode(__int64 a1, unsigned __int8 *a2, unsigned __int64 a3, int a4)\n{\n  unsigned __int64 v4; // r12\n  __int64 v5; // rbp\n  int v6; // er15\n  __int64 v7; // rbx\n  unsigned __int64 v8; // r12\n\n  v4 = 3 * (a3 >> 2) + 3;\n  v5 = a3;\n  v6 = a4;\n  v7 = buffer_string_prepare_append(a1, v4);\n  v8 = li_base64_dec(v7, v4, a2, v5, v6);\n  buffer_commit(a1, v8);\n  if ( !v8 && v5 )\n    v7 = 0LL;\n  return v7;\n}\n", 
            "funcStartAddr": "0x294d0L", 
            "funcEndAddr": "0x29546L", 
            "funcName": "buffer_append_base64_decode"
        }, 
        {
            "decompiledFuncCode": "void *buffer_init()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x10uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"buffer.c\", 16LL, (__int64)\"b\");\n  return result;\n}\n", 
            "funcStartAddr": "0x29550L", 
            "funcEndAddr": "0x29585L", 
            "funcName": "buffer_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall buffer_free(void *ptr)\n{\n  if ( ptr )\n  {\n    free(*(void **)ptr);\n    free(ptr);\n  }\n}\n", 
            "funcStartAddr": "0x29590L", 
            "funcEndAddr": "0x295b2L", 
            "funcName": "buffer_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall buffer_move(__m128i *a1, __int64 a2)\n{\n  int v2; // edx\n  __int64 result; // rax\n  __m128i v4; // xmm0\n\n  LODWORD(a1->m128i_i64[1]) = 0;\n  v2 = *(_DWORD *)(a2 + 8);\n  result = *(unsigned int *)(a2 + 12);\n  v4 = _mm_loadu_si128(a1);\n  a1->m128i_i64[0] = *(_QWORD *)a2;\n  *(__m128i *)a2 = v4;\n  LODWORD(a1->m128i_i64[1]) = v2;\n  HIDWORD(a1->m128i_i64[1]) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x295c0L", 
            "funcEndAddr": "0x295e1L", 
            "funcName": "buffer_move"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_string_prepare_copy(void **a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rax\n  void *result; // rax\n\n  v2 = *((unsigned int *)a1 + 3);\n  *((_DWORD *)a1 + 2) = 0;\n  if ( v2 <= a2 )\n    result = sub_16780(a1, a2);\n  else\n    result = *a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x295f0L", 
            "funcEndAddr": "0x29608L", 
            "funcName": "buffer_string_prepare_copy"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_string_prepare_append(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  _BYTE *result; // rax\n\n  v2 = (unsigned int)(*(_DWORD *)(a1 + 8) < 1u) + *(_DWORD *)(a1 + 8) - 1;\n  if ( (unsigned int)(*(_DWORD *)(a1 + 12) - v2) < a2 + 1 )\n    result = sub_167C1(a1, a2);\n  else\n    result = (_BYTE *)(*(_QWORD *)a1 + v2);\n  return result;\n}\n", 
            "funcStartAddr": "0x29610L", 
            "funcEndAddr": "0x29630L", 
            "funcName": "buffer_string_prepare_append"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_extend(__int64 a1, unsigned __int64 a2)\n{\n  unsigned int v2; // ebx\n  _BYTE *result; // rax\n\n  v2 = (*(_DWORD *)(a1 + 8) < 1u) + *(_DWORD *)(a1 + 8) - 1;\n  if ( *(_DWORD *)(a1 + 12) - v2 < a2 + 1 )\n    result = sub_167C1(a1, a2);\n  else\n    result = (_BYTE *)(*(_QWORD *)a1 + v2);\n  *(_DWORD *)(a1 + 8) = v2 + a2 + 1;\n  result[a2] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x29630L", 
            "funcEndAddr": "0x2966fL", 
            "funcName": "buffer_extend"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall buffer_commit(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = *((unsigned int *)a1 + 2);\n  if ( !*((_DWORD *)a1 + 2) )\n    result = 1LL;\n  if ( a2 )\n  {\n    result += a2;\n    if ( a2 >= result )\n      ck_assert_failed((__int64)\"buffer.c\", 149LL, (__int64)\"sz > size\");\n  }\n  v3 = *a1;\n  *((_DWORD *)a1 + 2) = result;\n  *(_BYTE *)(v3 + result - 1) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x29670L", 
            "funcEndAddr": "0x296b4L", 
            "funcName": "buffer_commit"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_copy_string_len(__int64 a1, const void *a2, unsigned __int64 a3)\n{\n  _BYTE *v3; // rdi\n  unsigned __int64 v5; // ST08_8\n  _BYTE *v6; // rax\n\n  *(_DWORD *)(a1 + 8) = a3 + 1;\n  if ( *(unsigned int *)(a1 + 12) <= a3 )\n  {\n    v5 = a3;\n    v6 = sub_16780((void **)a1, a3);\n    a3 = v5;\n    v3 = v6;\n  }\n  else\n  {\n    v3 = *(_BYTE **)a1;\n  }\n  v3[a3] = 0;\n  return memcpy(v3, a2, a3);\n}\n", 
            "funcStartAddr": "0x296c0L", 
            "funcEndAddr": "0x29701L", 
            "funcName": "buffer_copy_string_len"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_append_string_len(__int64 a1, const void *a2, unsigned __int64 a3)\n{\n  size_t v3; // rbx\n  _BYTE *v4; // rax\n\n  v3 = a3;\n  v4 = buffer_extend(a1, a3);\n  return memcpy(v4, a2, v3);\n}\n", 
            "funcStartAddr": "0x29710L", 
            "funcEndAddr": "0x29738L", 
            "funcName": "buffer_append_string_len"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_append_str2(__int64 a1, const void *a2, size_t a3, const void *a4, size_t a5)\n{\n  size_t v5; // rbp\n  const void *v6; // r12\n  size_t v7; // rbx\n  _BYTE *v8; // rax\n  void *v9; // rax\n\n  v5 = a3;\n  v6 = a4;\n  v7 = a5;\n  v8 = buffer_extend(a1, a3 + a5);\n  v9 = mempcpy(v8, a2, v5);\n  return memcpy(v9, v6, v7);\n}\n", 
            "funcStartAddr": "0x29740L", 
            "funcEndAddr": "0x29786L", 
            "funcName": "buffer_append_str2"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_append_str3(__int64 a1, const void *a2, size_t a3, const void *a4, size_t a5, const void *a6, size_t n)\n{\n  size_t v7; // r15\n  const void *v8; // r14\n  size_t v9; // rbp\n  const void *v10; // r12\n  _BYTE *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n\n  v7 = a3;\n  v8 = a4;\n  v9 = a5;\n  v10 = a6;\n  v11 = buffer_extend(a1, a3 + a5 + n);\n  v12 = mempcpy(v11, a2, v7);\n  v13 = mempcpy(v12, v8, v9);\n  return memcpy(v13, v10, n);\n}\n", 
            "funcStartAddr": "0x29790L", 
            "funcEndAddr": "0x297f7L", 
            "funcName": "buffer_append_str3"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_iovec(__int64 a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // rax\n  signed __int64 v4; // rdx\n  __int64 v5; // rbp\n  signed __int64 v6; // r8\n  __int64 v7; // rbx\n  unsigned __int64 v8; // rsi\n  signed __int64 v9; // rbp\n  _BYTE *result; // rax\n  size_t v11; // rdx\n\n  if ( !a3 )\n    return buffer_extend(a1, 0LL);\n  v3 = (_QWORD *)(a2 + 8);\n  v4 = 16 * a3;\n  v5 = a2;\n  v6 = a2 + 8 + v4;\n  v7 = a2;\n  v8 = 0LL;\n  do\n  {\n    v8 += *v3;\n    v3 += 2;\n  }\n  while ( v3 != (_QWORD *)v6 );\n  v9 = v4 + v5;\n  result = buffer_extend(a1, v8);\n  do\n  {\n    v11 = *(_QWORD *)(v7 + 8);\n    if ( v11 )\n      result = mempcpy(result, *(const void **)v7, v11);\n    v7 += 16LL;\n  }\n  while ( v7 != v9 );\n  return result;\n}\n", 
            "funcStartAddr": "0x29800L", 
            "funcEndAddr": "0x29867L", 
            "funcName": "buffer_append_iovec"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_append_path_len(__int64 a1, _BYTE *a2, size_t a3)\n{\n  const void *v3; // r12\n  size_t v4; // rbx\n  _BYTE *v5; // rax\n  unsigned int v6; // ecx\n\n  v3 = a2;\n  v4 = a3;\n  v5 = buffer_string_prepare_append(a1, a3 + 1);\n  v6 = *(_DWORD *)(a1 + 8);\n  if ( v4 && *a2 == 47 )\n  {\n    if ( v6 <= 1 )\n    {\n      v6 = 1;\n    }\n    else if ( *(v5 - 1) == 47 )\n    {\n      v3 = a2 + 1;\n      --v4;\n    }\n  }\n  else\n  {\n    if ( v6 <= 1 )\n    {\n      if ( !v6 )\n      {\n        *(_DWORD *)(a1 + 8) = 1;\n        *v5++ = 47;\n        v6 = *(_DWORD *)(a1 + 8) + 1;\n        goto LABEL_6;\n      }\n      goto LABEL_5;\n    }\n    if ( *(v5 - 1) != 47 )\n    {\nLABEL_5:\n      *v5++ = 47;\n      v6 = *(_DWORD *)(a1 + 8) + 1;\n      goto LABEL_6;\n    }\n  }\nLABEL_6:\n  *(_DWORD *)(a1 + 8) = v4 + v6;\n  v5[v4] = 0;\n  return memcpy(v5, v3, v4);\n}\n", 
            "funcStartAddr": "0x29870L", 
            "funcEndAddr": "0x2990fL", 
            "funcName": "buffer_append_path_len"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall buffer_copy_path_len2(__int64 a1, const void *a2, size_t a3, _BYTE *a4, size_t a5)\n{\n  const void *v5; // r14\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  __int64 v8; // rbx\n  size_t v9; // rbp\n  _BYTE *v10; // r13\n  size_t v11; // r12\n  void *v12; // rdi\n\n  v5 = a2;\n  v6 = a3 + a5 + 1;\n  v7 = *(unsigned int *)(a1 + 12);\n  v8 = a1;\n  v9 = a3;\n  v10 = a4;\n  v11 = a5;\n  *(_DWORD *)(a1 + 8) = 0;\n  if ( v6 >= v7 )\n    v12 = sub_16780((void **)a1, v6);\n  else\n    v12 = *(void **)a1;\n  memcpy(v12, v5, v9);\n  *(_DWORD *)(v8 + 8) = v9 + 1;\n  return buffer_append_path_len(v8, v10, v11);\n}\n", 
            "funcStartAddr": "0x29910L", 
            "funcEndAddr": "0x2996fL", 
            "funcName": "buffer_copy_path_len2"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_copy_string_len_lc(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v3; // rbx\n  unsigned __int64 v4; // rax\n  _BYTE *result; // rax\n  __int64 v6; // rsi\n  int v7; // ecx\n  unsigned __int64 v8; // ST08_8\n\n  v3 = a2;\n  v4 = *(unsigned int *)(a1 + 12);\n  *(_DWORD *)(a1 + 8) = 0;\n  if ( a3 >= v4 )\n  {\n    v8 = a3;\n    result = sub_16780((void **)a1, a3);\n    a3 = v8;\n  }\n  else\n  {\n    result = *(_BYTE **)a1;\n  }\n  *(_DWORD *)(a1 + 8) = a3 + 1;\n  result[a3] = 0;\n  if ( a3 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = *(char *)(v3 + v6);\n      if ( (unsigned int)(v7 - 65) < 0x1A )\n        LOBYTE(v7) = v7 | 0x20;\n      result[v6++] = v7;\n    }\n    while ( a3 != v6 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x29970L", 
            "funcEndAddr": "0x299deL", 
            "funcName": "buffer_copy_string_len_lc"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_uint_hex_lc(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned int v3; // ecx\n  unsigned int v4; // ST0C_4\n  _BYTE *result; // rax\n  unsigned int i; // ecx\n\n  v2 = a2;\n  v3 = 0;\n  do\n  {\n    v2 >>= 8;\n    v3 += 8;\n  }\n  while ( v2 );\n  v4 = v3;\n  result = buffer_extend(a1, v3 >> 2);\n  for ( i = v4; i; *(result - 1) = a0123456789abcd_0[(a2 >> i) & 0xF] )\n  {\n    i -= 4;\n    ++result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x299e0L", 
            "funcEndAddr": "0x29a41L", 
            "funcName": "buffer_append_uint_hex_lc"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall buffer_append_int(__int64 a1, __int64 a2)\n{\n  __int16 *v2; // r8\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  __int16 *v5; // r9\n  __int16 v7; // [rsp+16h] [rbp-12h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  v2 = &v7;\n  v3 = abs(a2);\n  while ( 1 )\n  {\n    v4 = v3;\n    v5 = (__int16 *)((char *)v2 - 1);\n    v3 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v3 >> 64) >> 3;\n    *((_BYTE *)v2 - 1) = v4 + 48 - 10 * v3;\n    if ( !v3 )\n      break;\n    v2 = (__int16 *)((char *)v2 - 1);\n  }\n  if ( a2 < 0 )\n  {\n    *((_BYTE *)v2 - 2) = 45;\n    v5 = v2 - 1;\n  }\n  buffer_append_string_len(a1, v5, (char *)&v7 - (char *)v5);\n  return __readfsqword(0x28u) ^ v8;\n}\n", 
            "funcStartAddr": "0x29a50L", 
            "funcEndAddr": "0x29aedL", 
            "funcName": "buffer_append_int"
        }, 
        {
            "decompiledFuncCode": "void __fastcall buffer_append_strftime(__int64 a1, const char *a2, const struct tm *a3)\n{\n  const struct tm *v3; // rbp\n  char *v4; // rax\n  size_t v5; // rax\n  char *v6; // rax\n\n  if ( a3 )\n  {\n    v3 = a3;\n    v4 = buffer_string_prepare_append(a1, 0x3FuLL);\n    v5 = strftime(v4, 0x40uLL, a2, v3);\n    if ( v5 - 1 <= 0x3E\n      || (v6 = buffer_string_prepare_append(a1, 0xFFFuLL), v5 = strftime(v6, 0x1000uLL, a2, v3), v5 <= 0xFFF) )\n    {\n      *(_DWORD *)(a1 + 8) += (*(_DWORD *)(a1 + 8) == 0) + (_DWORD)v5;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x29af0L", 
            "funcEndAddr": "0x29b72L", 
            "funcName": "buffer_append_strftime"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall li_itostrn(void *a1, unsigned __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  unsigned __int64 v4; // rbp\n  __int16 *v5; // r9\n  unsigned __int64 v6; // rdx\n  char v7; // cl\n  __int16 *v8; // rsi\n  __int16 v10; // [rsp+16h] [rbp-22h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-20h]\n\n  v3 = a3;\n  v4 = a2;\n  v11 = __readfsqword(0x28u);\n  v5 = &v10;\n  v6 = abs(a3);\n  while ( 1 )\n  {\n    v7 = v6;\n    v8 = (__int16 *)((char *)v5 - 1);\n    v6 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v6 >> 64) >> 3;\n    *((_BYTE *)v5 - 1) = v7 + 48 - 10 * v6;\n    if ( !v6 )\n      break;\n    v5 = (__int16 *)((char *)v5 - 1);\n  }\n  if ( v3 < 0 )\n  {\n    *((_BYTE *)v5 - 2) = 45;\n    v8 = v5 - 1;\n  }\n  if ( (char *)&v10 - (char *)v8 > v4 )\n    ck_assert_failed((__int64)\"buffer.c\", 347LL, (__int64)\"len <= buf_len\");\n  memcpy(a1, v8, (char *)&v10 - (char *)v8);\n  return (char *)((char *)&v10 - (char *)v8);\n}\n", 
            "funcStartAddr": "0x29b80L", 
            "funcEndAddr": "0x29c41L", 
            "funcName": "li_itostrn"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall li_utostrn(void *a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  __int16 *v3; // r9\n  char v4; // cl\n  char *v5; // rbx\n  __int16 v7; // [rsp+16h] [rbp-12h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  v3 = &v7;\n  do\n  {\n    v4 = a3;\n    v3 = (__int16 *)((char *)v3 - 1);\n    a3 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)a3 >> 64) >> 3;\n    *(_BYTE *)v3 = v4 + 48 - 10 * a3;\n  }\n  while ( a3 );\n  v5 = (char *)((char *)&v7 - (char *)v3);\n  if ( (char *)&v7 - (char *)v3 > a2 )\n    ck_assert_failed((__int64)\"buffer.c\", 356LL, (__int64)\"len <= buf_len\");\n  memcpy(a1, v3, (size_t)v5);\n  return v5;\n}\n", 
            "funcStartAddr": "0x29c50L", 
            "funcEndAddr": "0x29cf2L", 
            "funcName": "li_utostrn"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall hex2int(int a1)\n{\n  signed __int64 result; // rax\n  unsigned int v2; // edi\n\n  result = (unsigned int)(a1 - 48);\n  if ( (unsigned __int8)(a1 - 48) > 9u )\n  {\n    v2 = a1 & 0xFFFFFFDF;\n    if ( (unsigned __int8)(v2 - 65) > 5u )\n      result = 0xFFFFFFFFLL;\n    else\n      result = v2 - 55;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x29d00L", 
            "funcEndAddr": "0x29d1cL", 
            "funcName": "hex2int"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall li_hex2bin(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  __int64 v4; // rsi\n  signed __int64 v5; // r9\n  int v6; // er8\n  char v7; // r11\n  unsigned int v8; // eax\n  unsigned int v9; // ecx\n\n  if ( 2 * a2 < a4 )\n    return 0xFFFFFFFFLL;\n  if ( (signed int)a4 > 0 )\n  {\n    v4 = 0LL;\n    v5 = 2LL * ((unsigned int)(a4 - 1) >> 1) + 2;\n    do\n    {\n      v6 = v4;\n      v7 = *(_BYTE *)(a3 + v4 + 1);\n      v8 = *(char *)(a3 + v4) - 48;\n      if ( v8 > 9 )\n      {\n        v8 = (char)(*(_BYTE *)(a3 + v4) | 0x20);\n        if ( v8 - 97 > 5 )\n          return 0xFFFFFFFFLL;\n        LOBYTE(v8) = v8 - 87;\n      }\n      v9 = v7 - 48;\n      if ( v9 > 9 )\n      {\n        v9 = (char)(v7 | 0x20);\n        if ( v9 - 97 > 5 )\n          return 0xFFFFFFFFLL;\n        LOBYTE(v9) = v9 - 87;\n      }\n      v4 += 2LL;\n      *(_BYTE *)(a1 + (v6 >> 1)) = v9 | 16 * v8;\n    }\n    while ( v5 != v4 );\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x29d20L", 
            "funcEndAddr": "0x29db6L", 
            "funcName": "li_hex2bin"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall buffer_eq_icase_ssn(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rax\n  char v4; // cl\n  unsigned __int8 v5; // r8\n  unsigned __int8 v6; // cl\n\n  if ( !a3 )\n    return 1LL;\n  v3 = 0LL;\n  while ( 1 )\n  {\n    v4 = *(_BYTE *)(a1 + v3);\n    v5 = *(_BYTE *)(a2 + v3);\n    if ( v4 != v5 )\n    {\n      v6 = v4 | 0x20;\n      if ( (v5 | 0x20) != v6 || (unsigned int)v6 - 97 > 0x19 )\n        break;\n    }\n    if ( a3 == ++v3 )\n      return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x29dc0L", 
            "funcEndAddr": "0x29e13L", 
            "funcName": "buffer_eq_icase_ssn"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall buffer_eq_icase_ss(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  signed __int64 result; // rax\n\n  if ( a2 == a4 )\n    result = buffer_eq_icase_ssn(a1, a3, a2);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x29e20L", 
            "funcEndAddr": "0x29e38L", 
            "funcName": "buffer_eq_icase_ss"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall buffer_eq_icase_slen(__int64 a1, __int64 a2, __int64 a3)\n{\n  signed __int64 result; // rax\n\n  if ( *(_DWORD *)(a1 + 8) == a3 + 1 )\n    result = buffer_eq_icase_ssn(*(_QWORD *)a1, a2, a3);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x29e40L", 
            "funcEndAddr": "0x29e58L", 
            "funcName": "buffer_eq_icase_slen"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall buffer_eq_slen(__int64 a1, const void *a2, size_t a3)\n{\n  _BOOL8 result; // rax\n\n  if ( *(_DWORD *)(a1 + 8) == a3 + 1 )\n    result = memcmp(*(const void **)a1, a2, a3) == 0;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x29e60L", 
            "funcEndAddr": "0x29e89L", 
            "funcName": "buffer_eq_slen"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall buffer_is_equal(__int64 a1, __int64 a2)\n{\n  size_t v2; // rdx\n  _BOOL8 result; // rax\n\n  v2 = *(unsigned int *)(a1 + 8);\n  if ( (_DWORD)v2 == *(_DWORD *)(a2 + 8) )\n    result = memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x29e90L", 
            "funcEndAddr": "0x29ebcL", 
            "funcName": "buffer_is_equal"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall li_tohex_lc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  __int64 result; // rax\n  char v5; // r8\n\n  if ( 2 * a4 <= a4 )\n    ck_assert_failed((__int64)\"buffer.c\", 440LL, (__int64)\"2 * s_len > s_len\");\n  if ( 2 * a4 >= a2 )\n    ck_assert_failed((__int64)\"buffer.c\", 441LL, (__int64)\"2 * s_len < buf_len\");\n  result = 0LL;\n  if ( a4 )\n  {\n    do\n    {\n      v5 = a0123456789abcd_0[(*(_BYTE *)(a3 + result) >> 4) & 0xF];\n      *(_BYTE *)(a1 + 2 * result + 1) = a0123456789abcd_0[*(_BYTE *)(a3 + result) & 0xF];\n      *(_BYTE *)(a1 + 2 * result++) = v5;\n    }\n    while ( a4 != result );\n  }\n  *(_BYTE *)(a1 + 2 * a4) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x29ec0L", 
            "funcEndAddr": "0x29f47L", 
            "funcName": "li_tohex_lc"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall li_tohex_uc(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  __int64 result; // rax\n  char v5; // r8\n\n  if ( 2 * a4 <= a4 )\n    ck_assert_failed((__int64)\"buffer.c\", 451LL, (__int64)\"2 * s_len > s_len\");\n  if ( 2 * a4 >= a2 )\n    ck_assert_failed((__int64)\"buffer.c\", 452LL, (__int64)\"2 * s_len < buf_len\");\n  result = 0LL;\n  if ( a4 )\n  {\n    do\n    {\n      v5 = a0123456789abcd_1[(*(_BYTE *)(a3 + result) >> 4) & 0xF];\n      *(_BYTE *)(a1 + 2 * result + 1) = a0123456789abcd_1[*(_BYTE *)(a3 + result) & 0xF];\n      *(_BYTE *)(a1 + 2 * result++) = v5;\n    }\n    while ( a4 != result );\n  }\n  *(_BYTE *)(a1 + 2 * a4) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x29f50L", 
            "funcEndAddr": "0x29fd7L", 
            "funcName": "li_tohex_uc"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall buffer_substr_replace(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r12\n  unsigned int v5; // er13\n  unsigned int v6; // ebx\n  unsigned __int64 result; // rax\n  unsigned int v8; // ebx\n  __int64 v9; // ST08_8\n\n  v4 = a3;\n  v5 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n  v6 = *(_DWORD *)(a4 + 8) - (*(_DWORD *)(a4 + 8) != 0);\n  if ( v6 > a3 )\n  {\n    v9 = a4;\n    buffer_extend(a1, *(_DWORD *)(a1 + 8) - (unsigned int)(*(_DWORD *)(a1 + 8) != 0) + v6 - a3);\n    memmove((void *)(v6 + a2 + *(_QWORD *)a1), (const void *)(*(_QWORD *)a1 + v4 + a2), v5 - a2 - v4);\n    a4 = v9;\n  }\n  result = (unsigned __int64)memcpy((void *)(a2 + *(_QWORD *)a1), *(const void **)a4, v6);\n  if ( v6 < v4 )\n  {\n    memmove((void *)(a2 + v6 + *(_QWORD *)a1), (const void *)(*(_QWORD *)a1 + v4 + a2), v5 - a2 - v4);\n    v8 = v6 - v4 + v5;\n    result = v8;\n    *(_BYTE *)(*(_QWORD *)a1 + v8) = 0;\n    *(_DWORD *)(a1 + 8) = v8 + 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x29fe0L", 
            "funcEndAddr": "0x2a0beL", 
            "funcName": "buffer_substr_replace"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_string_encoded_hex_lc(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _BYTE *result; // rax\n  __int64 v5; // rcx\n  char v6; // di\n\n  v3 = a3;\n  result = buffer_extend(a1, 2 * a3);\n  if ( v3 )\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = a0123456789abcd_0[(*(_BYTE *)(a2 + v5) >> 4) & 0xF];\n      result[2 * v5 + 1] = a0123456789abcd_0[*(_BYTE *)(a2 + v5) & 0xF];\n      result[2 * v5++] = v6;\n    }\n    while ( v3 != v5 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2a0c0L", 
            "funcEndAddr": "0x2a11cL", 
            "funcName": "buffer_append_string_encoded_hex_lc"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_string_encoded_hex_uc(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _BYTE *result; // rax\n  __int64 v5; // rcx\n  char v6; // di\n\n  v3 = a3;\n  result = buffer_extend(a1, 2 * a3);\n  if ( v3 )\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = a0123456789abcd_1[(*(_BYTE *)(a2 + v5) >> 4) & 0xF];\n      result[2 * v5 + 1] = a0123456789abcd_1[*(_BYTE *)(a2 + v5) & 0xF];\n      result[2 * v5++] = v6;\n    }\n    while ( v3 != v5 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2a120L", 
            "funcEndAddr": "0x2a17cL", 
            "funcName": "buffer_append_string_encoded_hex_uc"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_string_encoded(__int64 a1, unsigned __int8 *a2, size_t a3, unsigned int a4)\n{\n  size_t v4; // r15\n  unsigned int v5; // er13\n  _BYTE *v6; // r12\n  unsigned __int8 *v7; // rbx\n  unsigned __int8 *v8; // r14\n  unsigned __int8 *v9; // rax\n  unsigned __int64 v10; // rbp\n  _BYTE *result; // rax\n  __int64 v12; // rsi\n  char v13; // dl\n  char v14; // cl\n  signed __int64 v15; // rcx\n  __int64 v16; // rcx\n  unsigned __int8 v17; // dl\n  signed __int64 v18; // r8\n  char v19; // dl\n\n  v4 = a3;\n  v5 = a4;\n  v6 = &unk_48600;\n  v7 = a2;\n  if ( a4 != 1 )\n  {\n    v6 = &unk_48500;\n    if ( a4 >= 1 )\n    {\n      v6 = &unk_48400;\n      if ( a4 != 2 )\n      {\n        v6 = &unk_48300;\n        if ( a4 != 3 )\n          v6 = 0LL;\n      }\n    }\n  }\n  if ( !a3 )\n  {\n    result = buffer_extend(a1, 0LL);\n    return memcpy(result, v7, v4);\n  }\n  v8 = &a2[a3];\n  v9 = a2;\n  v10 = 0LL;\n  do\n  {\n    while ( !v6[*v9] )\n    {\n      ++v9;\n      ++v10;\n      if ( v9 == v8 )\n        goto LABEL_14;\n    }\n    if ( a4 <= 1 )\n    {\n      v10 += 3LL;\n    }\n    else if ( a4 < 4 )\n    {\n      v10 += 6LL;\n    }\n    ++v9;\n  }\n  while ( v9 != v8 );\nLABEL_14:\n  result = buffer_extend(a1, v10);\n  v12 = 0LL;\n  if ( v10 == v4 )\n    return memcpy(result, v7, v4);\n  do\n  {\n    while ( 1 )\n    {\n      v16 = *v7;\n      v17 = *v7;\n      if ( v6[v16] )\n        break;\n      ++v7;\n      result[v12++] = v16;\n      if ( v7 == v8 )\n        return result;\n    }\n    if ( v5 <= 1 )\n    {\n      v18 = v12 + 2;\n      v19 = a0123456789abcd_1[*v7 & 0xF];\n      result[v12] = 37;\n      result[v12 + 1] = a0123456789abcd_1[(unsigned __int8)v16 >> 4];\n      v12 += 3LL;\n      result[v18] = v19;\n    }\n    else if ( v5 <= 3 )\n    {\n      result[v12] = 38;\n      v13 = a0123456789abcd_1[v17 & 0xF];\n      result[v12 + 1] = 35;\n      v14 = a0123456789abcd_1[(unsigned __int8)v16 >> 4];\n      result[v12 + 2] = 120;\n      result[v12 + 4] = v13;\n      result[v12 + 3] = v14;\n      v15 = v12 + 5;\n      v12 += 6LL;\n      result[v15] = 59;\n    }\n    ++v7;\n  }\n  while ( v7 != v8 );\n  return result;\n}\n", 
            "funcStartAddr": "0x2a180L", 
            "funcEndAddr": "0x2a313L", 
            "funcName": "buffer_append_string_encoded"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_string_encoded_json(__int64 a1, unsigned __int8 *a2, __int64 a3)\n{\n  unsigned __int8 *v3; // r12\n  unsigned __int8 *v4; // r14\n  __int64 v5; // r13\n  unsigned __int8 *v6; // rsi\n  unsigned __int8 *v7; // rbx\n  size_t v8; // rbp\n  signed int v9; // ecx\n  unsigned __int8 v10; // al\n  _BYTE *result; // rax\n  __int64 v12; // rcx\n  signed int v13; // esi\n  _BYTE *v14; // r8\n  unsigned __int8 v15; // dl\n  _BYTE *v16; // rdi\n  char v17; // dl\n  char v18; // si\n\n  v3 = a2;\n  if ( !a3 )\n  {\n    v8 = 0LL;\n    result = buffer_extend(a1, 0LL);\n    return memcpy(result, v3, v8);\n  }\n  v4 = a2;\n  v5 = a3;\n  v6 = &a2[a3];\n  v7 = v3;\n  v8 = 0LL;\n  do\n  {\n    while ( 1 )\n    {\n      v9 = *v7;\n      v10 = *v7;\n      if ( v9 == 34 || v9 == 92 || v9 <= 31 || v9 == 127 )\n        break;\n      ++v8;\nLABEL_7:\n      if ( v6 == ++v7 )\n        goto LABEL_13;\n    }\n    if ( v10 > 0xDu )\n    {\n      if ( v10 == 34 || v10 == 92 )\n      {\nLABEL_17:\n        v8 += 2LL;\n        goto LABEL_7;\n      }\n    }\n    else if ( v10 >= 0xCu || (unsigned __int8)(v10 - 8) <= 2u )\n    {\n      goto LABEL_17;\n    }\n    ++v7;\n    v8 += 6LL;\n  }\n  while ( v6 != v7 );\nLABEL_13:\n  result = buffer_extend(a1, v8);\n  if ( v8 != v5 )\n  {\n    v12 = 0LL;\n    while ( 1 )\n    {\n      v13 = *v4;\n      v14 = &result[v12];\n      v15 = *v4;\n      if ( v13 == 34 || v13 == 92 || v13 <= 31 || v13 == 127 )\n      {\n        v16 = &result[v12 + 1];\n        *v14 = 92;\n        if ( v15 == 12 )\n        {\n          *v16 = 102;\n          v12 += 2LL;\n          goto LABEL_24;\n        }\n        if ( v15 > 0xCu )\n        {\n          switch ( v15 )\n          {\n            case 0x22u:\n              *v16 = 34;\n              v12 += 2LL;\n              goto LABEL_24;\n            case 0x5Cu:\n              *v16 = 92;\n              v12 += 2LL;\n              goto LABEL_24;\n            case 0xDu:\n              *v16 = 114;\n              v12 += 2LL;\n              goto LABEL_24;\n          }\n        }\n        else\n        {\n          switch ( v15 )\n          {\n            case 9u:\n              *v16 = 116;\n              v12 += 2LL;\n              goto LABEL_24;\n            case 0xAu:\n              *v16 = 110;\n              v12 += 2LL;\n              goto LABEL_24;\n            case 8u:\n              *v16 = 98;\n              v12 += 2LL;\n              goto LABEL_24;\n          }\n        }\n        *v16 = 117;\n        v17 = a0123456789abcd_0[v15 & 0xF];\n        result[v12 + 2] = 48;\n        v18 = a0123456789abcd_0[v13 >> 4];\n        result[v12 + 3] = 48;\n        result[v12 + 5] = v17;\n        result[v12 + 4] = v18;\n        v12 += 6LL;\n      }\n      else\n      {\n        *v14 = v13;\n        ++v12;\n      }\nLABEL_24:\n      if ( v7 == ++v4 )\n        return result;\n    }\n  }\n  return memcpy(result, v3, v8);\n}\n", 
            "funcStartAddr": "0x2a320L", 
            "funcEndAddr": "0x2a4d8L", 
            "funcName": "buffer_append_string_encoded_json"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_append_string_c_escaped(__int64 a1, unsigned __int8 *a2, size_t a3)\n{\n  size_t v3; // r13\n  unsigned __int8 *v4; // rbx\n  unsigned __int8 *v5; // r12\n  unsigned __int8 *v6; // rax\n  unsigned __int64 v7; // rbp\n  signed __int64 v8; // rdx\n  unsigned __int8 v9; // cl\n  _BYTE *result; // rax\n  __int64 v11; // rcx\n  _BYTE *v12; // rsi\n  signed __int64 v13; // rdi\n  unsigned __int8 v14; // si\n  char v15; // dl\n  signed __int64 v16; // r8\n  unsigned __int8 v17; // dl\n  unsigned __int8 *v18; // rdi\n\n  v3 = a3;\n  v4 = a2;\n  if ( !a3 )\n  {\n    result = buffer_extend(a1, 0LL);\n    return memcpy(result, a2, v3);\n  }\n  v5 = &a2[a3];\n  v6 = a2;\n  v7 = 0LL;\n  do\n  {\n    while ( 1 )\n    {\n      v9 = *v6;\n      if ( (unsigned __int8)(*v6 - 32) > 0x5Eu )\n        break;\n      ++v6;\n      ++v7;\n      if ( v6 == v5 )\n        goto LABEL_9;\n    }\n    if ( v9 <= 0xDu && (v8 = 1LL << v9, BYTE1(v8) & 0x26) )\n      v7 += 2LL;\n    else\n      v7 += 4LL;\n    ++v6;\n  }\n  while ( v6 != v5 );\nLABEL_9:\n  result = buffer_extend(a1, v7);\n  v11 = 0LL;\n  if ( v7 == v3 )\n    return memcpy(result, a2, v3);\n  do\n  {\n    while ( 1 )\n    {\n      v17 = *v4;\n      v18 = &result[v11];\n      if ( (unsigned __int8)(*v4 - 32) > 0x5Eu )\n        break;\n      ++v4;\n      *v18 = v17;\n      ++v11;\n      if ( v4 == v5 )\n        return result;\n    }\n    v12 = &result[v11 + 1];\n    *v18 = 92;\n    v13 = v11 + 2;\n    switch ( v17 )\n    {\n      case 0xAu:\n        *v12 = 110;\n        v11 += 2LL;\n        break;\n      case 0xDu:\n        *v12 = 114;\n        v11 += 2LL;\n        break;\n      case 9u:\n        *v12 = 116;\n        v11 += 2LL;\n        break;\n      default:\n        *v12 = 120;\n        v14 = v17;\n        v15 = a0123456789abcd_0[v17 & 0xF];\n        v16 = v11 + 3;\n        v11 += 4LL;\n        result[v13] = a0123456789abcd_0[v14 >> 4];\n        result[v16] = v15;\n        break;\n    }\n    ++v4;\n  }\n  while ( v4 != v5 );\n  return result;\n}\n", 
            "funcStartAddr": "0x2a4e0L", 
            "funcEndAddr": "0x2a64fL", 
            "funcName": "buffer_append_string_c_escaped"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_urldecode_path(_DWORD *a1)\n{\n  int v1; // edx\n  _BYTE *result; // rax\n  unsigned int v3; // edx\n  _DWORD *v4; // rbx\n  _BYTE *v5; // rdx\n  int v6; // esi\n  int v7; // ecx\n  int v8; // edi\n  unsigned int v9; // ecx\n  int v10; // ecx\n  signed int v11; // er8\n  int v12; // ecx\n  char v13; // cl\n  unsigned int v14; // esi\n\n  v1 = a1[2];\n  result = (_BYTE *)(v1 != 0);\n  v3 = v1 - (_DWORD)result;\n  if ( v3 )\n  {\n    v4 = a1;\n    result = memchr(*(const void **)a1, 37, v3);\n    if ( result )\n    {\n      v5 = result;\n      while ( 1 )\n      {\n        v6 = (unsigned __int8)result[1];\n        if ( !(_BYTE)v6 )\n          goto LABEL_13;\n        v7 = (unsigned __int8)result[2];\n        v8 = v7 - 48;\n        if ( (unsigned __int8)(v7 - 48) <= 9u )\n          goto LABEL_8;\n        v9 = v7 & 0xFFFFFFDF;\n        if ( (unsigned __int8)(v9 - 65) <= 5u )\n          break;\n        if ( (unsigned __int8)(v6 - 48) <= 9u )\n          goto LABEL_13;\n        LOBYTE(v8) = -1;\n        v11 = -1;\nLABEL_21:\n        v14 = v6 & 0xFFFFFFDF;\n        if ( (unsigned __int8)(v14 - 65) > 5u )\n          goto LABEL_13;\n        v10 = v14 - 55;\n        if ( (_BYTE)v8 == -1 )\n          goto LABEL_13;\nLABEL_9:\n        v12 = v11 | 16 * v10;\n        if ( (unsigned __int8)v12 <= 0x1Fu || (_BYTE)v12 == 127 )\n          LOBYTE(v12) = 95;\n        *v5 = v12;\n        result += 2;\nLABEL_13:\n        while ( 1 )\n        {\n          v13 = *++result;\n          *++v5 = *result;\n          if ( v13 == 37 )\n            break;\n          if ( !*result )\n            goto LABEL_15;\n        }\n        if ( !*result )\n        {\nLABEL_15:\n          v4[2] = (_DWORD)v5 - *v4 + 1;\n          return result;\n        }\n      }\n      v8 = v9 - 55;\nLABEL_8:\n      v10 = v6 - 48;\n      v11 = v8;\n      if ( (unsigned __int8)(v6 - 48) <= 9u )\n        goto LABEL_9;\n      goto LABEL_21;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2a650L", 
            "funcEndAddr": "0x2a740L", 
            "funcName": "buffer_urldecode_path"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall buffer_is_valid_UTF8(char **a1)\n{\n  char *v1; // rax\n  char v2; // dl\n  unsigned __int8 v4; // dl\n\n  v1 = *a1;\n  while ( 1 )\n  {\n    v2 = *v1;\n    if ( !*v1 )\n      return 1LL;\n    if ( v2 >= 0 )\n    {\n      ++v1;\n    }\n    else if ( (unsigned __int8)(v2 + 62) > 0x1Du )\n    {\n      if ( v2 == -32 )\n      {\n        if ( (unsigned __int8)(v1[1] + 96) > 0x1Fu )\n          return 0LL;\n        if ( (unsigned __int8)(v1[2] + -128) > 0x3Fu )\n          goto LABEL_15;\nLABEL_23:\n        v1 += 3;\n      }\n      else\n      {\n        if ( (unsigned __int8)(v2 + 31) > 0xEu || v2 == -19 || (unsigned __int8)(v1[1] + -128) > 0x3Fu )\n        {\n          if ( v2 == -19 )\n          {\n            if ( (unsigned __int8)(v1[1] + -128) > 0x1Fu || (unsigned __int8)(v1[2] + -128) > 0x3Fu )\n              return 0LL;\n            goto LABEL_23;\n          }\n        }\n        else if ( (unsigned __int8)(v1[2] + -128) <= 0x3Fu )\n        {\n          goto LABEL_23;\n        }\nLABEL_6:\n        if ( v2 == -16 )\n        {\n          if ( (unsigned __int8)(v1[1] + 112) > 0x2Fu )\n            return 0LL;\n          goto LABEL_8;\n        }\nLABEL_15:\n        if ( (unsigned __int8)(v2 + 15) > 2u )\n        {\n          if ( v2 != -12 || (unsigned __int8)(v1[1] + -128) > 0xFu )\n            return 0LL;\n        }\n        else\n        {\n          v4 = v1[1];\n          if ( (v4 & 0x80u) == 0 )\n            return 0LL;\n          if ( v4 > 0xBFu )\n            return 0LL;\n        }\nLABEL_8:\n        if ( (unsigned __int8)(v1[2] + -128) > 0x3Fu || (unsigned __int8)(v1[3] + -128) > 0x3Fu )\n          return 0LL;\n        v1 += 4;\n      }\n    }\n    else\n    {\n      if ( (unsigned __int8)(v1[1] + -128) > 0x3Fu )\n        goto LABEL_6;\n      v1 += 2;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2a740L", 
            "funcEndAddr": "0x2a8a4L", 
            "funcName": "buffer_is_valid_UTF8"
        }, 
        {
            "decompiledFuncCode": "void __fastcall buffer_path_simplify(__int64 a1)\n{\n  __int64 v1; // rcx\n  _BYTE *v2; // rdx\n  _BYTE *v3; // rsi\n  _BYTE *v4; // rax\n  char v5; // cl\n  char v6; // cl\n  signed __int64 i; // rax\n  char v8; // cl\n  _BYTE *v9; // rdx\n  char v10; // cl\n\n  v1 = *(unsigned int *)(a1 + 8);\n  v2 = *(_BYTE **)a1;\n  v3 = (_BYTE *)(*(_QWORD *)a1 + v1 - 1);\n  if ( (unsigned int)v1 > 1 )\n  {\n    *v3 = 47;\n    if ( *v2 == 47 )\n    {\n      v4 = v2 + 1;\n      if ( (unsigned __int8)(v2[1] - 46) > 1u )\n      {\n        while ( 1 )\n        {\n          do\n            ++v4;\n          while ( *v4 != 47 );\n          if ( v3 == v4 )\n            break;\n          v2 = v4;\n          v5 = (v4++)[1];\n          if ( (unsigned __int8)(v5 - 46) <= 1u )\n            goto LABEL_7;\n        }\nLABEL_8:\n        *v3 = 0;\n        return;\n      }\nLABEL_7:\n      if ( v3 == v4 )\n        goto LABEL_8;\n      goto LABEL_15;\n    }\n    v6 = v2[1];\n    if ( *v2 != 46 )\n      goto LABEL_10;\n    if ( v6 == 47 )\n    {\n      i = (signed __int64)(v2 + 1);\n      *v2 = 47;\n    }\n    else\n    {\n      if ( v6 != 46 || v2[2] != 47 )\n      {\nLABEL_10:\n        for ( i = (signed __int64)v2; ; v6 = *(_BYTE *)(i + 1) )\n        {\n          ++i;\n          if ( v6 == 47 )\n            break;\n        }\n        v2 = (_BYTE *)i;\n        goto LABEL_14;\n      }\n      i = (signed __int64)(v2 + 2);\n      *v2 = 47;\n    }\nLABEL_14:\n    v4 = (_BYTE *)(i + 1);\nLABEL_15:\n    if ( v4 > v3 )\n    {\nLABEL_22:\n      *v3 = 0;\n      *v2 = 0;\n      *(_DWORD *)(a1 + 8) = (_DWORD)v2 - *(_DWORD *)a1 + 1;\n      return;\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v8 = *v4;\n            if ( *v4 != 47 )\n              break;\n            if ( v3 <= ++v4 )\n              goto LABEL_24;\n          }\n          if ( v8 == 46 )\n            break;\nLABEL_20:\n          while ( 1 )\n          {\n            ++v2;\n            ++v4;\n            *v2 = v8;\n            if ( v8 == 47 )\n              break;\n            v8 = *v4;\n          }\n          if ( v3 < v4 )\n            goto LABEL_22;\n        }\n        v10 = v4[1];\n        if ( v10 == 46 )\n          break;\n        if ( v10 != 47 )\n          goto LABEL_31;\n        v4 += 2;\n        if ( v3 <= v4 )\n          goto LABEL_24;\n      }\n      if ( v4[2] != 47 )\n      {\nLABEL_31:\n        v2[1] = 46;\n        v8 = *++v4;\n        ++v2;\n        goto LABEL_20;\n      }\n      do\n      {\n        if ( *(_QWORD *)a1 >= (unsigned __int64)v2 )\n          break;\n        --v2;\n      }\n      while ( *v2 != 47 );\n      v4 += 3;\n      *v2 = 47;\n      if ( v3 <= v4 )\n      {\nLABEL_24:\n        v9 = v2 + 1;\n        *v3 = 0;\n        *v9 = 0;\n        *(_DWORD *)(a1 + 8) = (_DWORD)v9 - *(_DWORD *)a1 + 1;\n        return;\n      }\n    }\n  }\n  if ( v2 )\n  {\n    *v2 = 0;\n    *(_DWORD *)(a1 + 8) = 1;\n  }\n  else\n  {\n    buffer_extend(a1, 0LL);\n  }\n}\n", 
            "funcStartAddr": "0x2a8b0L", 
            "funcEndAddr": "0x2aa2fL", 
            "funcName": "buffer_path_simplify"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_to_lower(__int64 a1)\n{\n  _BYTE *result; // rax\n  _BYTE *v2; // rsi\n\n  result = *(_BYTE **)a1;\n  if ( *(_DWORD *)(a1 + 8) )\n  {\n    v2 = &result[*(unsigned int *)(a1 + 8)];\n    do\n    {\n      if ( (unsigned int)(unsigned __int8)*result - 65 <= 0x19 )\n        *result |= 0x20u;\n      ++result;\n    }\n    while ( result != v2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2aa30L", 
            "funcEndAddr": "0x2aa5dL", 
            "funcName": "buffer_to_lower"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall buffer_to_upper(__int64 a1)\n{\n  _BYTE *result; // rax\n  _BYTE *v2; // rsi\n\n  result = *(_BYTE **)a1;\n  if ( *(_DWORD *)(a1 + 8) )\n  {\n    v2 = &result[*(unsigned int *)(a1 + 8)];\n    do\n    {\n      if ( (unsigned int)(unsigned __int8)*result - 97 <= 0x19 )\n        *result &= 0xDFu;\n      ++result;\n    }\n    while ( result != v2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2aa60L", 
            "funcEndAddr": "0x2aa8dL", 
            "funcName": "buffer_to_upper"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_2AA90(int a1)\n{\n  _BOOL8 result; // rax\n  unsigned __int64 v2; // rdx\n  signed __int64 v3; // rcx\n\n  result = 1LL;\n  if ( (a1 | 0x20u) - 97 > 0x19 )\n  {\n    v2 = (unsigned int)(a1 - 45);\n    if ( (unsigned int)v2 > 0x32 || (v3 = 1125899906850811LL, !_bittest64(&v3, v2)) )\n      result = a1 == 126;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2aa90L", 
            "funcEndAddr": "0x2aac9L", 
            "funcName": "sub_2AA90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall burl_normalize(__int64 a1, __int64 a2, __int16 a3)\n{\n  __int64 v3; // r15\n  char *v4; // r12\n  int v5; // er8\n  int v6; // ebx\n  int v7; // ebp\n  unsigned __int64 v8; // r13\n  __int64 v9; // rdx\n  char v10; // si\n  unsigned int v11; // eax\n  unsigned int v12; // eax\n  char *v13; // r10\n  unsigned __int8 v14; // dl\n  unsigned int v15; // er11\n  unsigned int v16; // er11\n  unsigned __int64 v17; // rax\n  char *v18; // r12\n  void *v19; // rax\n  void *v20; // rcx\n  unsigned __int64 v21; // r9\n  int v22; // eax\n  char *v23; // rsi\n  __int64 v24; // r9\n  int v25; // edi\n  char *v27; // rax\n  int v28; // edx\n  signed __int64 v29; // rdx\n  char v30; // cl\n  __int64 v31; // rsi\n  unsigned int v32; // esi\n  unsigned int v33; // esi\n  int v34; // er9\n  int v35; // eax\n  unsigned int v36; // eax\n  unsigned int v37; // esi\n  unsigned __int8 *v38; // r8\n  unsigned __int8 v39; // r9\n  __int64 v40; // r10\n  unsigned __int8 v41; // r11\n  int v42; // edx\n  char *v43; // r8\n  int v44; // esi\n  char *v45; // rax\n  char v46; // cl\n  __int64 v47; // rax\n  signed __int64 v48; // r9\n  __int64 v49; // rdi\n  unsigned int v50; // eax\n  signed __int64 v51; // r11\n  char *v52; // r12\n  int v53; // er8\n  char *v54; // rax\n  char v55; // dl\n  char *v56; // rdi\n  int v57; // ecx\n  int v58; // er13\n  __int64 v59; // rsi\n  signed __int64 v60; // rdi\n  __int64 v61; // rax\n  int v62; // ebp\n  char *v63; // r9\n  int v64; // edi\n  int v65; // edx\n  __int64 i; // rax\n  char v67; // cl\n  char v68; // cl\n  __int64 v69; // rdx\n  unsigned int v70; // edx\n  __int64 v71; // rdi\n  unsigned int v72; // edi\n  unsigned __int64 v73; // rsi\n  int v74; // ST18_4\n  void *v75; // rax\n  char *v76; // rax\n  int v77; // er11\n  const void *v78; // rcx\n  int v79; // esi\n  const char *v80; // r10\n  char *v81; // r8\n  __int64 v82; // rdx\n  unsigned __int64 v83; // rdx\n  char *v84; // rdx\n  __int64 v85; // rcx\n  int v86; // eax\n  unsigned __int8 v87; // al\n  unsigned int v88; // er9\n  unsigned int v89; // er9\n  int v90; // er13\n  char v91; // al\n  __int64 v92; // r13\n  unsigned int v93; // er13\n  unsigned int v94; // er15\n  _BOOL4 v95; // eax\n  __int64 v96; // r9\n  char *v97; // rcx\n  signed __int64 v98; // r9\n  char v99; // dl\n  int v100; // er9\n  char v101; // di\n  char v102; // al\n  int v103; // eax\n  int v104; // er13\n  __int64 v105; // rsi\n  int v106; // [rsp+8h] [rbp-60h]\n  int v107; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v108; // [rsp+8h] [rbp-60h]\n  __int16 v109; // [rsp+14h] [rbp-54h]\n  __int64 v110; // [rsp+18h] [rbp-50h]\n  __int64 v111; // [rsp+28h] [rbp-40h]\n\n  v3 = a1;\n  v4 = *(char **)a1;\n  v109 = a3;\n  v111 = a2;\n  v5 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n  if ( !(a3 & 0x20) )\n  {\n    if ( v5 <= 0 )\n    {\n      v6 = -1;\nLABEL_37:\n      if ( a3 & 0x40 )\n        goto LABEL_43;\n      goto LABEL_38;\n    }\n    v7 = 0;\n    v6 = -1;\n    v107 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v8 = v7;\n        v31 = (unsigned __int8)v4[v7];\n        if ( byte_48740[v31] )\n          break;\n        if ( v6 == -1 && (_BYTE)v31 == 63 )\n          v6 = v7;\n        if ( ++v7 >= v107 )\n        {\nLABEL_73:\n          v3 = a1;\nLABEL_74:\n          if ( v6 == -2 )\n            goto LABEL_50;\n          goto LABEL_75;\n        }\n      }\n      if ( (_BYTE)v31 != 37 )\n        break;\n      v32 = (unsigned __int8)v4[v7 + 1] - 48;\n      if ( v32 > 9 )\n      {\n        v33 = (unsigned __int8)(v4[v7 + 1] & 0xDF) - 65;\n        if ( v33 > 5 )\n          goto LABEL_163;\n        v32 = v33 + 10;\n      }\n      v34 = (unsigned __int8)v4[v7 + 2];\n      v35 = v34 - 48;\n      if ( (unsigned int)(v34 - 48) > 9 )\n      {\n        v36 = (unsigned __int8)(v34 & 0xDF) - 65;\n        if ( v36 > 5 )\n          goto LABEL_163;\n        v35 = v36 + 10;\n      }\n      v37 = v35 | 16 * v32;\n      if ( (unsigned int)sub_2AA90(v37) )\n      {\nLABEL_163:\n        v108 = v7;\n        v3 = a1;\n        v18 = *(char **)a1;\n        goto LABEL_164;\n      }\n      if ( v37 > 0xF4 )\n      {\n        v6 = -2;\n      }\n      else if ( (v37 | 1) == 193 )\n      {\n        v6 = -2;\n      }\n      if ( v41 > 0x60u )\n      {\n        *(_BYTE *)(*(_QWORD *)a1 + v7 + 1LL) &= 0xDFu;\n        v39 = *v38;\n      }\n      if ( v39 > 0x60u )\n        *(_BYTE *)(*(_QWORD *)a1 + v40) &= 0xDFu;\n      v7 += 3;\n      if ( v7 >= v107 )\n        goto LABEL_73;\n    }\n    v3 = a1;\n    v108 = v7;\n    v18 = *(char **)a1;\n    if ( (_BYTE)v31 == 35 )\n      goto LABEL_194;\nLABEL_164:\n    v74 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n    v75 = buffer_string_prepare_copy((void **)v111, v74 + 2 * (v74 - v7) + 1);\n    v76 = (char *)memcpy(v75, v18, v7);\n    v77 = v74;\n    v78 = v76;\n    if ( v74 <= v7 )\n    {\nLABEL_190:\n      buffer_copy_string_len(v3, v78, v108);\nLABEL_191:\n      if ( v6 == -2 )\n        goto LABEL_50;\n      goto LABEL_75;\n    }\n    v79 = v7;\n    v80 = \"0123456789ABCDEF\";\n    v81 = v76;\n    v110 = v3;\n    while ( 1 )\n    {\n      v84 = &v18[v8];\n      v85 = (unsigned __int8)v18[v8];\n      if ( byte_48740[v85] )\n      {\n        if ( (_BYTE)v85 != 37 )\n        {\n          if ( (_BYTE)v85 == 35 )\n          {\n            v3 = v110;\n            buffer_copy_string_len(v110, v81, v79);\n            goto LABEL_191;\n          }\nLABEL_175:\n          v81[v79] = 37;\n          v81[v79 + 1] = v80[((unsigned __int8)*v84 >> 4) & 0xF];\n          v86 = v79 + 2;\n          v79 += 3;\n          v81[v86] = v80[*v84 & 0xF];\n          v87 = *v84;\n          v83 = v79;\n          if ( v87 > 0xF4u )\n          {\n            v6 = -2;\n          }\n          else if ( (v87 | 1) == -63 )\n          {\n            v6 = -2;\n          }\n          goto LABEL_170;\n        }\n        v88 = (unsigned __int8)v18[v8 + 1] - 48;\n        if ( v88 > 9 )\n        {\n          v89 = (unsigned __int8)(v18[v8 + 1] & 0xDF) - 65;\n          if ( v89 > 5 )\n            goto LABEL_175;\n          v88 = v89 + 10;\n        }\n        v90 = (unsigned __int8)v18[v8 + 2];\n        v91 = v90;\n        v92 = (unsigned int)(v90 - 48);\n        if ( (unsigned int)v92 > 9 )\n        {\n          v93 = (unsigned __int8)(v91 & 0xDF) - 65;\n          if ( v93 > 5 )\n            goto LABEL_175;\n          v92 = v93 + 10;\n        }\n        v94 = v92 | 16 * v88;\n        v95 = sub_2AA90((unsigned int)v92 | 16 * v88);\n        v97 = &v81[v79];\n        v83 = v79 + 1;\n        if ( v95 )\n        {\n          *v97 = v94;\n          ++v79;\n        }\n        else\n        {\n          v102 = v80[v96];\n          *v97 = 37;\n          v81[v79 + 1] = v102;\n          v103 = v79 + 2;\n          v79 += 3;\n          v81[v103] = v80[v92];\n          v83 = v79;\n          if ( v94 <= 0xF4 )\n          {\n            if ( (v94 | 1) == 193 )\n              v6 = -2;\n          }\n          else\n          {\n            v6 = -2;\n          }\n        }\n        v7 += 2;\n      }\n      else\n      {\n        if ( (_BYTE)v85 == 63 && v6 == -1 )\n          v6 = v79;\n        v82 = v79++;\n        v81[v82] = v18[v8];\n        v83 = v79;\n      }\nLABEL_170:\n      if ( v77 <= ++v7 )\n      {\n        v3 = v110;\n        v78 = v81;\n        v108 = v83;\n        goto LABEL_190;\n      }\n      v8 = v7;\n    }\n  }\n  v6 = -1;\n  if ( v5 <= 0 )\n    goto LABEL_37;\n  v7 = 0;\n  while ( 1 )\n  {\n    v8 = v7;\n    v9 = (unsigned __int8)v4[v7];\n    if ( !byte_48740[v9] )\n    {\n      if ( v6 == -1 && (_BYTE)v9 == 63 )\n        v6 = v7;\n      goto LABEL_7;\n    }\n    if ( (_BYTE)v9 != 37 )\n      break;\n    v10 = v4[v7 + 1];\n    v11 = (unsigned __int8)v4[v7 + 1] - 48;\n    if ( v11 > 9 )\n    {\n      v12 = (unsigned __int8)(v10 & 0xDF) - 65;\n      if ( v12 > 5 )\n        goto LABEL_19;\n      v11 = v12 + 10;\n    }\n    v13 = &v4[v7 + 2];\n    v14 = *v13;\n    v15 = (unsigned __int8)*v13 - 48;\n    if ( v15 > 9 )\n    {\n      v16 = (unsigned __int8)(v14 & 0xDF) - 65;\n      if ( v16 > 5 )\n        goto LABEL_19;\n      v15 = v16 + 10;\n    }\n    v17 = v15 | 16 * v11;\n    if ( !byte_48740[(unsigned int)v17] )\n    {\n      if ( v6 >= 0 )\n      {\n        if ( (unsigned int)v17 > 0x3D || (v51 = 2882312832488046592LL, !_bittest64(&v51, v17)) )\n        {\nLABEL_19:\n          v18 = *(char **)a1;\n          goto LABEL_20;\n        }\n        if ( ((unsigned int)v17 | 1) == 193 )\n          v6 = -2;\n        goto LABEL_93;\n      }\n      if ( (v17 & 0xFFFFFFEF) != 47 )\n        goto LABEL_19;\nLABEL_99:\n      if ( ((unsigned int)v17 | 1) == 193 )\n        v6 = -2;\n      goto LABEL_93;\n    }\n    if ( (unsigned int)v17 <= 0xF4 )\n      goto LABEL_99;\n    v6 = -2;\nLABEL_93:\n    if ( (unsigned __int8)v10 > 0x60u )\n    {\n      *(_BYTE *)(*(_QWORD *)a1 + v7 + 1LL) &= 0xDFu;\n      v14 = *v13;\n    }\n    if ( v14 > 0x60u )\n      *(_BYTE *)(*(_QWORD *)a1 + v7 + 2LL) &= 0xDFu;\n    v7 += 2;\nLABEL_7:\n    if ( ++v7 >= v5 )\n      goto LABEL_74;\n  }\n  v18 = *(char **)a1;\n  if ( (_BYTE)v9 != 35 )\n  {\nLABEL_20:\n    v106 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n    v19 = buffer_string_prepare_copy((void **)v111, v106 + 2 * (v106 - v7) + 1);\n    v20 = memcpy(v19, v18, v7);\n    v21 = v7;\n    if ( v106 <= v7 )\n    {\nLABEL_150:\n      buffer_copy_string_len(v3, v20, v21);\n      if ( v6 == -2 )\n        goto LABEL_50;\n      goto LABEL_75;\n    }\n    v22 = v7;\n    while ( 2 )\n    {\n      v23 = &v18[v22];\n      v24 = (unsigned __int8)*v23;\n      if ( !byte_48740[v24] )\n      {\n        if ( v6 == -1 && (_BYTE)v24 == 63 )\n          v6 = v7;\n        *((_BYTE *)v20 + v8) = *v23;\n        goto LABEL_26;\n      }\n      if ( (_BYTE)v24 != 37 )\n      {\n        if ( (_BYTE)v24 == 35 )\n        {\n          v21 = v8;\n          goto LABEL_150;\n        }\nLABEL_31:\n        *((_BYTE *)v20 + v8) = 37;\n        v25 = v7 + 1;\n        v7 += 2;\n        *((_BYTE *)v20 + v25) = a0123456789abcd_2[((unsigned __int8)*v23 >> 4) & 0xF];\n        *((_BYTE *)v20 + v7) = a0123456789abcd_2[*v23 & 0xF];\n        if ( (unsigned __int8)*v23 > 0xF4u )\n        {\n          v6 = -2;\n        }\n        else if ( ((unsigned __int8)*v23 | 1) == -63 )\n        {\n          v6 = -2;\n        }\nLABEL_26:\n        ++v22;\n        ++v7;\n        if ( v106 <= v22 )\n        {\n          v21 = v7;\n          goto LABEL_150;\n        }\n        v8 = v7;\n        continue;\n      }\n      break;\n    }\n    v69 = (unsigned int)(unsigned __int8)v18[v22 + 1] - 48;\n    if ( (unsigned int)v69 > 9 )\n    {\n      v70 = (unsigned __int8)(v18[v22 + 1] & 0xDF) - 65;\n      if ( v70 > 5 )\n        goto LABEL_31;\n      v69 = v70 + 10;\n    }\n    v71 = (unsigned int)(unsigned __int8)v18[v22 + 2] - 48;\n    if ( (unsigned int)v71 > 9 )\n    {\n      v72 = (unsigned __int8)(v18[v22 + 2] & 0xDF) - 65;\n      if ( v72 > 5 )\n        goto LABEL_31;\n      v71 = v72 + 10;\n    }\n    v73 = (unsigned int)v71 | 16 * (_DWORD)v69;\n    if ( !byte_48740[v73] )\n    {\n      if ( v6 >= 0 )\n      {\n        if ( (unsigned int)v73 <= 0x3D )\n        {\n          v98 = 2882312832488046592LL;\n          if ( _bittest64(&v98, v73) )\n            goto LABEL_199;\n        }\nLABEL_162:\n        *((_BYTE *)v20 + v8) = v73;\nLABEL_202:\n        v22 += 2;\n        goto LABEL_26;\n      }\n      if ( (v73 & 0xFFFFFFEF) != 47 )\n        goto LABEL_162;\n    }\nLABEL_199:\n    v99 = a0123456789abcd_2[v69];\n    v100 = v7 + 1;\n    v101 = a0123456789abcd_2[v71];\n    v7 += 2;\n    *((_BYTE *)v20 + v8) = 37;\n    *((_BYTE *)v20 + v100) = v99;\n    *((_BYTE *)v20 + v7) = v101;\n    if ( (unsigned int)v73 > 0xF4 )\n    {\n      v6 = -2;\n    }\n    else if ( ((unsigned int)v73 | 1) == 193 )\n    {\n      v6 = -2;\n    }\n    goto LABEL_202;\n  }\nLABEL_194:\n  v18[v8] = 0;\n  *(_DWORD *)(v3 + 8) = v7 + 1;\n  if ( v6 == -2 )\n    goto LABEL_50;\nLABEL_75:\n  if ( v109 & 0x40 )\n  {\nLABEL_43:\n    v27 = *(char **)v3;\n    v28 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n    if ( v28 > 0 )\n    {\n      v29 = (signed __int64)&v27[v28 - 1 + 1];\n      do\n      {\n        if ( *v27 == 37 )\n        {\n          v30 = v27[1];\n          if ( v30 <= 49 || v30 == 55 && v27[2] == 70 )\n            goto LABEL_50;\n        }\n        ++v27;\n      }\n      while ( (char *)v29 != v27 );\n    }\n  }\nLABEL_38:\n  if ( v109 & 0x300 )\n  {\n    v52 = *(char **)v3;\n    v53 = v6;\n    if ( v6 < 0 )\n      v53 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n    if ( v53 > 0 )\n    {\n      v54 = *(char **)v3;\n      while ( 1 )\n      {\n        v55 = *v54;\n        v56 = v54;\n        v57 = (_DWORD)v54 - (_DWORD)v52;\n        if ( *v54 == 37 && v54[1] == 50 && v54[2] == 70 )\n          break;\n        if ( &v52[v53 - 1 + 1] == ++v54 )\n          goto LABEL_39;\n      }\n      if ( !(v109 & 0x100) )\n        goto LABEL_50;\n      v58 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n      if ( v6 < 0 )\n      {\n        if ( v58 > v57 )\n          goto LABEL_118;\n        v62 = (_DWORD)v54 - (_DWORD)v52;\nLABEL_217:\n        v52[v62] = 0;\n        *(_DWORD *)(v3 + 8) = v62 + 1;\n      }\n      else\n      {\n        if ( v57 >= v6 )\n        {\n          v62 = (_DWORD)v54 - (_DWORD)v52;\n        }\n        else\n        {\nLABEL_118:\n          v59 = v57;\n          v60 = (signed __int64)(v52 - 1);\n          v61 = v57 + 1;\n          while ( 1 )\n          {\n            *(_BYTE *)(v60 + v61) = v55;\n            if ( v52[v59] == 37 && v52[v59 + 1] == 50 && v52[v59 + 2] == 70 )\n            {\n              *(_BYTE *)(v60 + v61) = 47;\n              v57 += 2;\n            }\n            ++v57;\n            v62 = v61++;\n            if ( v53 <= v57 )\n              break;\n            v59 = v57;\n            v55 = v52[v57];\n          }\n          if ( v6 < 0 )\n          {\n            v52 = *(char **)v3;\n            goto LABEL_217;\n          }\n          v56 = &v52[v62];\n        }\n        v104 = v58 - v6;\n        v105 = v6;\n        v6 = v62;\n        memmove(v56, &v52[v105], v104);\n        *(_BYTE *)(*(_QWORD *)v3 + (unsigned int)(v104 + v62)) = 0;\n        *(_DWORD *)(v3 + 8) = v104 + v62 + 1;\n        if ( v62 == -2 )\n          goto LABEL_50;\n      }\n    }\n  }\nLABEL_39:\n  if ( !(v109 & 0xC00) )\n    goto LABEL_40;\n  v63 = *(char **)v3;\n  v64 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n  if ( v6 >= 0 )\n    v64 = v6;\n  if ( v64 <= 0 )\n    goto LABEL_40;\n  v65 = 0;\n  i = 0LL;\n  v67 = *v63;\n  if ( *v63 == 46 )\n    goto LABEL_138;\nLABEL_129:\n  while ( 2 )\n  {\n    if ( v64 <= v65 )\n      goto LABEL_135;\n    while ( 1 )\n    {\n      if ( v67 == 47 )\n        goto LABEL_142;\n      for ( i = v65 + 1; ; ++i )\n      {\n        v65 = i;\n        v67 = v63[i];\n        if ( (signed int)i >= v64 )\n          break;\n        if ( v67 == 47 )\n          goto LABEL_142;\n      }\nLABEL_135:\n      if ( v67 == 47 )\n      {\nLABEL_142:\n        if ( v63[i + 1] == 47 )\n          goto LABEL_143;\n      }\n      if ( v64 <= ++v65 )\n        goto LABEL_40;\n      i = v65;\n      v67 = v63[v65];\n      if ( v67 != 46 )\n        goto LABEL_129;\nLABEL_138:\n      v68 = v63[i + 1];\n      if ( v68 != 46 )\n        goto LABEL_139;\n      if ( ++v65 )\n        break;\n      v67 = *v63;\n      i = 0LL;\n    }\n    i = v65;\n    v68 = v63[v65 + 1];\nLABEL_139:\n    if ( (v68 & 0xEF) != 47 && v68 )\n    {\n      v67 = v63[i];\n      continue;\n    }\n    break;\n  }\nLABEL_143:\n  if ( v109 & 0x800 )\n    goto LABEL_50;\n  if ( v6 < 0 )\n  {\n    buffer_path_simplify(v3);\n    return (unsigned int)v6;\n  }\n  buffer_copy_string_len(v111, &v63[v6], *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0) - v6);\n  *(_BYTE *)(*(_QWORD *)v3 + v6) = 0;\n  *(_DWORD *)(v3 + 8) = v6 + 1;\n  buffer_path_simplify(v3);\n  v6 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n  buffer_append_string_len(v3, *(const void **)v111, *(_DWORD *)(v111 + 8) - (unsigned int)(*(_DWORD *)(v111 + 8) != 0));\n  if ( v6 == -2 )\nLABEL_50:\n    return (unsigned int)-2;\nLABEL_40:\n  if ( v109 & 0x1000 && v6 >= 0 )\n  {\n    v42 = v6 + 1;\n    v43 = *(char **)v3;\n    v44 = *(_DWORD *)(v3 + 8) - (*(_DWORD *)(v3 + 8) != 0);\n    if ( v44 <= v6 + 1 )\n    {\n      v50 = v6 + 1;\n      if ( v44 == v42 )\n        return (unsigned int)v6;\n    }\n    else\n    {\n      v45 = &v43[v42];\n      while ( 1 )\n      {\n        v46 = *v45;\n        if ( *v45 == 37 && v45[1] == 50 && v45[2] == 48 )\n          break;\n        ++v42;\n        ++v45;\n        if ( v44 == v42 )\n          return (unsigned int)v6;\n      }\n      if ( v42 >= v44 )\n      {\n        v50 = v42;\n      }\n      else\n      {\n        v47 = v42;\n        v48 = (signed __int64)(v43 - 1);\n        v49 = v42 + 1;\n        while ( 1 )\n        {\n          *(_BYTE *)(v48 + v49) = v46;\n          if ( v43[v47] == 37 && v43[v47 + 1] == 50 && v43[v47 + 2] == 48 )\n          {\n            *(_BYTE *)(v48 + v49) = 43;\n            v42 += 2;\n          }\n          ++v42;\n          v50 = v49++;\n          if ( v44 <= v42 )\n            break;\n          v47 = v42;\n          v46 = v43[v42];\n        }\n        v43 = *(char **)v3;\n      }\n    }\n    v43[v50] = 0;\n    *(_DWORD *)(v3 + 8) = v50 + 1;\n  }\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x2aad0L", 
            "funcEndAddr": "0x2b682L", 
            "funcName": "burl_normalize"
        }, 
        {
            "decompiledFuncCode": "void __fastcall burl_append(__int64 a1, char *a2, unsigned __int64 a3, int a4)\n{\n  char v4; // bl\n  unsigned __int64 v5; // rbp\n  int v6; // er14\n  char *v7; // r12\n  __int64 *v8; // r15\n  int v9; // er13\n  int v10; // er14\n  char *v11; // rdx\n  char v12; // al\n  char v13; // si\n  unsigned __int64 v14; // r8\n  int v15; // edi\n  _BOOL4 v16; // eax\n  _BYTE *v17; // r8\n  int v18; // er9\n  __int64 v19; // r10\n  _BYTE *v20; // rdx\n  unsigned __int64 v21; // rsi\n  int v22; // eax\n  char v23; // si\n  _BYTE *v24; // rax\n  int v25; // er10\n  unsigned __int64 v26; // r8\n  _BYTE *v27; // r14\n  char *v28; // r11\n  __int64 v29; // r8\n  char v30; // si\n  _BOOL4 v31; // eax\n  int v32; // er9\n  _BYTE *v33; // r11\n  _BYTE *v34; // rdx\n  unsigned __int64 v35; // rcx\n  int v36; // eax\n  char *v37; // rbx\n  int v38; // ecx\n  int v39; // eax\n  unsigned int v40; // eax\n  char *v41; // r15\n  int v42; // ecx\n  int v43; // edi\n  unsigned int v44; // edi\n  int v45; // eax\n  char v46; // si\n  _BOOL4 v47; // eax\n  int v48; // er10\n  _BYTE *v49; // rdi\n  int v50; // eax\n  _BYTE *v51; // rax\n  int v52; // er11\n  unsigned __int64 v53; // r9\n  _BYTE *v54; // r13\n  _BOOL4 v55; // eax\n  int v56; // er8\n  _BYTE *v57; // r10\n  _BYTE *v58; // rdx\n  int v59; // eax\n  char *v60; // r10\n  __int64 v61; // r9\n  char v62; // si\n  char *v63; // rbx\n  int v64; // ecx\n  int v65; // eax\n  unsigned int v66; // eax\n  char *v67; // r15\n  int v68; // ecx\n  int v69; // edi\n  unsigned int v70; // edi\n  int v71; // eax\n  char v72; // si\n  _BOOL4 v73; // eax\n  int v74; // er11\n  _BYTE *v75; // rdi\n  int v76; // eax\n  __int64 v77; // [rsp+0h] [rbp-50h]\n  __int64 *v78; // [rsp+8h] [rbp-48h]\n  int v79; // [rsp+10h] [rbp-40h]\n  char v80; // [rsp+14h] [rbp-3Ch]\n\n  if ( !a3 )\n    return;\n  if ( !a4 )\n  {\n    buffer_append_string_len(a1, a2, a3);\n    return;\n  }\n  v77 = 0LL;\n  v79 = a4 & 3;\n  if ( a4 & 3 )\n    v77 = *(_DWORD *)(a1 + 8) - (unsigned int)(*(_DWORD *)(a1 + 8) != 0);\n  v4 = a4;\n  v5 = a3;\n  v6 = a4 & 4;\n  v7 = a2;\n  v8 = (__int64 *)a1;\n  if ( !(a4 & 4) )\n  {\n    v9 = a4 & 8;\n    if ( a4 & 8 )\n    {\n      buffer_string_prepare_append(a1, 3 * a3);\n      v14 = 0LL;\n      do\n      {\n        v15 = v7[v14];\n        v16 = sub_2AA90(v15);\n        v20 = (_BYTE *)(v19 + v6);\n        v21 = v6 + 1;\n        if ( v16 )\n        {\n          *v20 = v15;\n          ++v6;\n        }\n        else\n        {\n          *v20 = 37;\n          *(_BYTE *)(v19 + v6 + 1) = a0123456789abcd_2[(*v17 >> 4) & 0xF];\n          v22 = v6 + 2;\n          v6 += 3;\n          v21 = v6;\n          *(_BYTE *)(v19 + v22) = a0123456789abcd_2[*v17 & 0xF];\n        }\n        v14 = (unsigned int)(v18 + 1);\n      }\n      while ( v5 > v14 );\nLABEL_30:\n      buffer_commit(v8, v21);\n      goto LABEL_12;\n    }\n    v10 = a4 & 0x10;\n    if ( !(a4 & 0x10) )\n    {\n      if ( !(a4 & 0x20) )\n      {\n        if ( a4 & 0x40 )\n        {\n          buffer_append_base64_enc(a1, (__int64)a2, a3, 1, 0);\n        }\n        else if ( (a4 & 0x80u) != 0 )\n        {\n          buffer_append_base64_decode(a1, (unsigned __int8 *)a2, a3, 1);\n        }\n        goto LABEL_12;\n      }\n      v51 = buffer_string_prepare_append(a1, 3 * a3);\n      v52 = 0;\n      v53 = 0LL;\n      v54 = v51;\n      v78 = (__int64 *)a1;\n      v80 = v4;\n      while ( 1 )\n      {\n        v60 = &v7[v53];\n        v61 = (unsigned int)(v52 + 1);\n        v62 = *v60;\n        if ( *v60 != 37 )\n          break;\n        v63 = &v7[v61];\n        v64 = v7[v61];\n        v65 = v64 - 48;\n        if ( (unsigned int)(v64 - 48) > 9 )\n        {\n          v66 = (unsigned __int8)(v64 & 0xDF) - 65;\n          if ( v66 > 5 )\n            break;\n          v65 = v66 + 10;\n        }\n        v67 = &v7[v52 + 2];\n        v68 = *v67;\n        v69 = v68 - 48;\n        if ( (unsigned int)(v68 - 48) > 9 )\n        {\n          v70 = (unsigned __int8)(v68 & 0xDF) - 65;\n          if ( v70 > 5 )\n            break;\n          v69 = v70 + 10;\n        }\n        v71 = v69 | 16 * v65;\n        v72 = v71;\n        v73 = sub_2AA90(v71);\n        v53 = (unsigned int)(v74 + 3);\n        v75 = &v54[v10];\n        v35 = v10 + 1;\n        v52 = v74 + 3;\n        if ( v73 )\n        {\n          *v75 = v72;\n          ++v10;\n        }\n        else\n        {\n          *v75 = 37;\n          v54[v10 + 1] = *v63;\n          v76 = v10 + 2;\n          v10 += 3;\n          v35 = v10;\n          v54[v76] = *v67;\n        }\nLABEL_71:\n        if ( v5 <= v53 )\n          goto LABEL_29;\n      }\n      v55 = sub_2AA90(v62);\n      v58 = &v54[v10];\n      v35 = v10 + 1;\n      if ( v62 == 47 || v55 )\n      {\n        *v58 = v62;\n        ++v10;\n        v52 = v56;\n      }\n      else\n      {\n        *v58 = 37;\n        v52 = v56;\n        v54[v10 + 1] = a0123456789abcd_2[(*v57 >> 4) & 0xF];\n        v59 = v10 + 2;\n        v10 += 3;\n        v35 = v10;\n        v54[v59] = a0123456789abcd_2[*v57 & 0xF];\n      }\n      goto LABEL_71;\n    }\n    v24 = buffer_string_prepare_append(a1, 3 * a3);\n    v25 = 0;\n    v26 = 0LL;\n    v27 = v24;\n    v78 = (__int64 *)a1;\n    v80 = v4;\n    while ( 1 )\n    {\n      v28 = &v7[v26];\n      v29 = (unsigned int)(v25 + 1);\n      v30 = *v28;\n      if ( *v28 != 37 )\n        goto LABEL_50;\n      v37 = &v7[v29];\n      v38 = v7[v29];\n      v39 = v38 - 48;\n      if ( (unsigned int)(v38 - 48) > 9 )\n      {\n        v40 = (unsigned __int8)(v38 & 0xDF) - 65;\n        if ( v40 > 5 )\n          goto LABEL_50;\n        v39 = v40 + 10;\n      }\n      v41 = &v7[v25 + 2];\n      v42 = *v41;\n      v43 = v42 - 48;\n      if ( (unsigned int)(v42 - 48) <= 9 )\n        goto LABEL_58;\n      v44 = (unsigned __int8)(v42 & 0xDF) - 65;\n      if ( v44 <= 5 )\n      {\n        v43 = v44 + 10;\nLABEL_58:\n        v45 = v43 | 16 * v39;\n        v46 = v45;\n        v47 = sub_2AA90(v45);\n        v26 = (unsigned int)(v48 + 3);\n        v49 = &v27[v9];\n        v25 = v48 + 3;\n        v35 = v9 + 1;\n        if ( v47 )\n        {\n          *v49 = v46;\n          ++v9;\n        }\n        else\n        {\n          *v49 = 37;\n          v27[v9 + 1] = *v37;\n          v50 = v9 + 2;\n          v9 += 3;\n          v35 = v9;\n          v27[v50] = *v41;\n        }\n        goto LABEL_48;\n      }\nLABEL_50:\n      v31 = sub_2AA90(v30);\n      v34 = &v27[v9];\n      v35 = v9 + 1;\n      if ( v31 )\n      {\n        *v34 = v30;\n        ++v9;\n        v25 = v32;\n      }\n      else\n      {\n        *v34 = 37;\n        v25 = v32;\n        v27[v9 + 1] = a0123456789abcd_2[(*v33 >> 4) & 0xF];\n        v36 = v9 + 2;\n        v9 += 3;\n        v35 = v9;\n        v27[v36] = a0123456789abcd_2[*v33 & 0xF];\n      }\nLABEL_48:\n      if ( v5 <= v26 )\n      {\nLABEL_29:\n        v8 = v78;\n        v4 = v80;\n        v21 = v35;\n        goto LABEL_30;\n      }\n    }\n  }\n  buffer_append_string_len(a1, a2, a3);\nLABEL_12:\n  if ( v79 )\n  {\n    v11 = (char *)(*v8 + v77);\n    v12 = *v11;\n    if ( v4 & 1 )\n    {\n      for ( ; v12; ++v11 )\n      {\n        v23 = v11[1];\n        if ( (unsigned int)(v12 - 65) <= 0x19 )\n        {\n          *v11 = v12 | 0x20;\n          v12 = v23;\n        }\n        else if ( v12 == 37 )\n        {\n          if ( (unsigned int)(v23 - 48) <= 9 || (v12 = v11[1], (unsigned int)((char)(v23 | 0x20) - 97) <= 5) )\n          {\n            if ( (unsigned int)(v11[2] - 48) <= 9 || (v12 = v11[1], (unsigned int)((char)(v11[2] | 0x20) - 97) <= 5) )\n            {\n              v12 = v11[3];\n              v11 += 2;\n            }\n          }\n        }\n        else\n        {\n          v12 = v11[1];\n        }\n      }\n    }\n    else\n    {\n      while ( v12 )\n      {\n        v13 = v11[1];\n        if ( (unsigned int)(v12 - 97) <= 0x19 )\n        {\n          *v11 = v12 & 0xDF;\n          v12 = v13;\n        }\n        else if ( v12 == 37 )\n        {\n          if ( (unsigned int)(v13 - 48) <= 9 || (v12 = v11[1], (unsigned int)((char)(v13 | 0x20) - 97) <= 5) )\n          {\n            if ( (unsigned int)(v11[2] - 48) <= 9 || (v12 = v11[1], (unsigned int)((char)(v11[2] | 0x20) - 97) <= 5) )\n            {\n              v12 = v11[3];\n              v11 += 2;\n            }\n          }\n        }\n        else\n        {\n          v12 = v11[1];\n        }\n        ++v11;\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2b690L", 
            "funcEndAddr": "0x2bc6eL", 
            "funcName": "burl_append"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall write_all(int fd, void *buf, size_t n)\n{\n  char *v3; // r12\n  signed __int64 v4; // rbp\n  size_t v5; // rbx\n  ssize_t v6; // rax\n\n  v3 = (char *)buf;\n  v4 = 0LL;\n  v5 = n;\n  do\n  {\n    while ( 1 )\n    {\n      v6 = write(fd, v3, v5);\n      if ( v6 <= 0 )\n        break;\n      v4 += v6;\n      v5 -= v6;\n      if ( !v5 )\n        return v4;\n      v3 = (char *)buf + v4;\n    }\n    if ( !v6 )\n    {\n      if ( v5 )\n      {\n        v4 = -1LL;\n        *__errno_location() = 5;\n      }\n      return v4;\n    }\n  }\n  while ( *__errno_location() == 4 );\n  if ( v5 )\n    v4 = -1LL;\n  return v4;\n}\n", 
            "funcStartAddr": "0x2bc70L", 
            "funcEndAddr": "0x2bd04L", 
            "funcName": "write_all"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_header_hkey_get(_BYTE *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  char v3; // r12\n  void **v4; // rbx\n\n  if ( a2 > 0x1B )\n    return 0LL;\n  v2 = byte_48FE0[a2];\n  v3 = *a1 | 0x20;\n  v4 = &off_48880 + 4 * v2;\n  if ( (_BYTE)v2 == -1 )\n    return 0LL;\n  while ( v3 != *((_BYTE *)v4 + 4) || !(unsigned int)buffer_eq_icase_ssn((__int64)(a1 + 1), (__int64)v4 + 5, a2 - 1) )\n  {\n    v4 += 4;\n    if ( *((unsigned __int16 *)v4 + 1) != a2 )\n      return 0LL;\n  }\n  return (unsigned int)*(signed __int16 *)v4;\n}\n", 
            "funcStartAddr": "0x2bd10L", 
            "funcEndAddr": "0x2bda3L", 
            "funcName": "http_header_hkey_get"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_header_hkey_get_lc(char *a1, unsigned __int64 a2)\n{\n  char v2; // r12\n  __int64 v3; // rax\n  void **v4; // rbx\n\n  if ( a2 > 0x1B )\n    return 0LL;\n  v2 = *a1;\n  v3 = byte_48FE0[a2];\n  v4 = &off_48880 + 4 * v3;\n  if ( (_BYTE)v3 == -1 )\n    return 0LL;\n  while ( v2 != *((_BYTE *)v4 + 4) || memcmp(a1 + 1, (char *)v4 + 5, a2 - 1) )\n  {\n    v4 += 4;\n    if ( *((unsigned __int16 *)v4 + 1) != a2 )\n      return 0LL;\n  }\n  return (unsigned int)*(signed __int16 *)v4;\n}\n", 
            "funcStartAddr": "0x2bdb0L", 
            "funcEndAddr": "0x2be33L", 
            "funcName": "http_header_hkey_get_lc"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_str_to_code(char *a1)\n{\n  unsigned int v1; // edx\n  unsigned int v2; // ecx\n  unsigned int v3; // eax\n  char v4; // si\n  signed __int64 result; // rax\n\n  v1 = *a1 - 48;\n  if ( v1 > 9 || (v2 = a1[1] - 48, v2 > 9) || (v3 = a1[2] - 48, v3 > 9) || (v4 = a1[3], v4 & 0xDF) && v4 != 9 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = 100 * v1 + 10 * v2 + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x2be40L", 
            "funcEndAddr": "0x2be86L", 
            "funcName": "http_header_str_to_code"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_str_contains_token(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // ebx\n  unsigned int v5; // er15\n  signed __int64 v6; // r13\n  unsigned __int64 v7; // rax\n  __int64 v8; // r12\n  unsigned __int64 v9; // rax\n  signed __int64 v10; // rcx\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  __int64 v14; // [rsp+0h] [rbp-48h]\n  __int64 v15; // [rsp+8h] [rbp-40h]\n\n  v4 = a4;\n  v5 = 0;\n  v6 = 17596481012224LL;\n  v14 = a3;\n  v15 = a4;\n  while ( 1 )\n  {\nLABEL_2:\n    while ( v5 < a2 )\n    {\n      v7 = *(unsigned __int8 *)(a1 + v5);\n      if ( (unsigned __int8)v7 > 0x2Cu )\n        break;\n      if ( !_bittest64(&v6, v7) )\n        break;\n      ++v5;\n    }\n    if ( a2 - v5 < v4 )\n      return 0LL;\n    v8 = v5;\n    if ( (unsigned int)buffer_eq_icase_ssn(a1 + v5, v14, v15) )\n    {\n      v5 += v4;\n      if ( a2 == v5 )\n        return 1LL;\n      v8 = v5;\n      v9 = *(unsigned __int8 *)(a1 + v5);\n      if ( (unsigned __int8)v9 <= 0x3Bu )\n      {\n        v10 = 576478348784435712LL;\n        if ( _bittest64(&v10, v9) )\n          return 1LL;\n      }\n    }\n    if ( a2 <= v5 )\n      return 0LL;\n    v11 = v5 + 1;\n    v12 = a1 + v11;\n    if ( *(_BYTE *)(a1 + v8) != 44 )\n    {\n      while ( 1 )\n      {\n        v5 = v11;\n        if ( a2 == (_DWORD)v11 )\n          return 0LL;\n        if ( *(_BYTE *)(++v12 - 1) == 44 )\n          goto LABEL_2;\n        LODWORD(v11) = v11 + 1;\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2be90L", 
            "funcEndAddr": "0x2bf8cL", 
            "funcName": "http_header_str_contains_token"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_header_remove_token(__int64 a1, const char *a2, unsigned int a3)\n{\n  char *v3; // rbx\n  size_t v4; // rbp\n  unsigned int v5; // er14\n  signed __int64 v6; // r13\n  signed __int64 v7; // r15\n  unsigned __int64 i; // rax\n  unsigned __int64 v9; // rax\n  char *v11; // rcx\n  char v12; // al\n  char *v13; // rcx\n  char *v14; // rdx\n  int v15; // eax\n  unsigned int v16; // ecx\n\n  v3 = *(char **)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0;\n  v4 = a3;\n  v5 = 0;\n  v6 = 17596481012224LL;\n  v7 = 576478348784435713LL;\n  while ( 1 )\n  {\n    for ( i = (unsigned __int8)*v3; (unsigned __int8)i <= 0x2Cu; i = (unsigned __int8)*++v3 )\n    {\n      if ( !_bittest64(&v6, i) )\n        break;\n    }\n    if ( strncasecmp(v3, a2, v4) )\n      goto LABEL_7;\n    v9 = (unsigned __int8)v3[v4];\n    if ( (unsigned __int8)v9 <= 0x3Bu )\n    {\n      if ( _bittest64(&v7, v9) )\n        break;\n    }\n    v3 += v4;\nLABEL_7:\n    v3 = strchr(v3, 44);\nLABEL_8:\n    if ( !v3 )\n      return v5;\n  }\n  memset(v3, 32, v4);\n  v11 = &v3[v4];\n  v12 = v3[v4];\n  if ( v3[v4] != 44 && v12 )\n  {\n    do\n      v12 = *++v11;\n    while ( *v11 && v12 != 44 );\n  }\n  if ( v12 == 44 )\n  {\n    v3 = v11 + 1;\n    *v11 = 32;\n    v5 = 1;\n    goto LABEL_8;\n  }\n  v13 = &v11[-v4];\n  v14 = *(char **)a1;\n  if ( *v13 == 44 )\n  {\nLABEL_26:\n    v16 = (_DWORD)v13 - (_DWORD)v14;\n    v14 += v16;\n    v15 = v16 + 1;\n  }\n  else\n  {\n    while ( v13 != v14 )\n    {\n      if ( *--v13 == 44 )\n        goto LABEL_26;\n    }\n    v15 = 1;\n  }\n  *v14 = 0;\n  v5 = 1;\n  *(_DWORD *)(a1 + 8) = v15;\n  return v5;\n}\n", 
            "funcStartAddr": "0x2bf90L", 
            "funcEndAddr": "0x2c0dfL", 
            "funcName": "http_header_remove_token"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_response_get(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rax\n  signed __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 528);\n  if ( !_bittest64(&v2, a2) )\n    return 0LL;\n  v3 = array_get_element_klen_ext(a1 + 536);\n  if ( v3 && *(_DWORD *)(v3 + 40) > 1u )\n    result = v3 + 32;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c0e0L", 
            "funcEndAddr": "0x2c124L", 
            "funcName": "http_header_response_get"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_response_set_ptr(__int64 a1, int a2, __int64 a3, unsigned int a4)\n{\n  signed __int64 result; // rax\n\n  *(_QWORD *)(a1 + 528) |= 1LL << a2;\n  result = array_get_buf_ptr_ext(a1 + 536, a2, a3, a4);\n  *(_DWORD *)(result + 8) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c130L", 
            "funcEndAddr": "0x2c163L", 
            "funcName": "http_header_response_set_ptr"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_header_response_unset(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r8\n  __int64 v5; // rax\n\n  v4 = *(_QWORD *)(a1 + 528);\n  if ( _bittest64(&v4, a2) )\n  {\n    if ( (_DWORD)a2 )\n      *(_QWORD *)(a1 + 528) = __ROL8__(-2LL, a2) & v4;\n    v5 = array_get_buf_ptr_ext(a1 + 536, a2, a3, a4);\n    buffer_copy_string_len(v5, \"\", 0LL);\n  }\n}\n", 
            "funcStartAddr": "0x2c170L", 
            "funcEndAddr": "0x2c1c2L", 
            "funcName": "http_header_response_unset"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall http_header_response_set(__int64 a1, int a2, __int64 a3, unsigned int a4, const void *a5, unsigned int a6)\n{\n  const void *v6; // rbp\n  unsigned int v7; // ebx\n  __int64 v8; // rax\n\n  v6 = a5;\n  v7 = a6;\n  if ( a6 )\n  {\n    *(_QWORD *)(a1 + 528) |= 1LL << a2;\n  }\n  else if ( a2 )\n  {\n    *(_QWORD *)(a1 + 528) &= __ROL8__(-2LL, a2);\n  }\n  v8 = array_get_buf_ptr_ext(a1 + 536, a2, a3, a4);\n  return buffer_copy_string_len(v8, v6, v7);\n}\n", 
            "funcStartAddr": "0x2c1d0L", 
            "funcEndAddr": "0x2c234L", 
            "funcName": "http_header_response_set"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_header_response_append(__int64 a1, int a2, __int64 a3, unsigned int a4, const void *a5, unsigned int a6)\n{\n  const void *v6; // rbp\n  unsigned int v7; // ebx\n  __int64 v8; // rax\n  __int64 v9; // r12\n\n  if ( a6 )\n  {\n    v6 = a5;\n    *(_QWORD *)(a1 + 528) |= 1LL << a2;\n    v7 = a6;\n    v8 = array_get_buf_ptr_ext(a1 + 536, a2, a3, a4);\n    v9 = v8;\n    if ( *(_DWORD *)(v8 + 8) > 1u )\n      buffer_append_string_len(v8, \", \", 2uLL);\n    buffer_append_string_len(v9, v6, v7);\n  }\n}\n", 
            "funcStartAddr": "0x2c240L", 
            "funcEndAddr": "0x2c2aaL", 
            "funcName": "http_header_response_append"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_header_response_insert(__int64 a1, int a2, __int64 a3, unsigned int a4, const void *a5, unsigned int a6)\n{\n  unsigned int v6; // ebp\n  unsigned int v7; // ebx\n  const void *v8; // r13\n  const void *v9; // r12\n  __int64 v10; // rax\n  __int64 v11; // r15\n  __int64 i; // rdx\n  int v13; // ecx\n  _BYTE *v14; // [rsp+0h] [rbp-40h]\n\n  if ( a6 )\n  {\n    v6 = a4;\n    v7 = a6;\n    v8 = a5;\n    *(_QWORD *)(a1 + 528) |= 1LL << a2;\n    v9 = (const void *)a3;\n    v10 = array_get_buf_ptr_ext(a1 + 536, a2, a3, a4);\n    v11 = v10;\n    if ( *(_DWORD *)(v10 + 8) > 1u )\n    {\n      v14 = buffer_string_prepare_append(v10, v6 + v7 + 4);\n      buffer_append_str3(v11, \"\\r\\n\", 2uLL, v9, v6, \": \", 2uLL);\n      if ( *(_DWORD *)(a1 + 28) > 1 )\n      {\n        *(_BYTE *)(a1 + 564) = 1;\n        for ( i = 0LL; v6 > (unsigned int)i; ++i )\n        {\n          v13 = (char)v14[i + 2];\n          if ( (unsigned int)(v13 - 65) <= 0x19 )\n            v14[i + 2] = v13 | 0x20;\n        }\n      }\n    }\n    buffer_append_string_len(v11, v8, v7);\n  }\n}\n", 
            "funcStartAddr": "0x2c2b0L", 
            "funcEndAddr": "0x2c394L", 
            "funcName": "http_header_response_insert"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_request_get(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rax\n  signed __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 232);\n  if ( !_bittest64(&v2, a2) )\n    return 0LL;\n  v3 = array_get_element_klen_ext(a1 + 240);\n  if ( v3 && *(_DWORD *)(v3 + 40) > 1u )\n    result = v3 + 32;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c3a0L", 
            "funcEndAddr": "0x2c3e4L", 
            "funcName": "http_header_request_get"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_request_set_ptr(__int64 a1, int a2, __int64 a3, unsigned int a4)\n{\n  signed __int64 result; // rax\n\n  *(_QWORD *)(a1 + 232) |= 1LL << a2;\n  result = array_get_buf_ptr_ext(a1 + 240, a2, a3, a4);\n  *(_DWORD *)(result + 8) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c3f0L", 
            "funcEndAddr": "0x2c423L", 
            "funcName": "http_header_request_set_ptr"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_header_request_unset(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r8\n  __int64 v5; // rax\n\n  v4 = *(_QWORD *)(a1 + 232);\n  if ( _bittest64(&v4, a2) )\n  {\n    if ( (_DWORD)a2 )\n      *(_QWORD *)(a1 + 232) = __ROL8__(-2LL, a2) & v4;\n    v5 = array_get_buf_ptr_ext(a1 + 240, a2, a3, a4);\n    buffer_copy_string_len(v5, \"\", 0LL);\n  }\n}\n", 
            "funcStartAddr": "0x2c430L", 
            "funcEndAddr": "0x2c482L", 
            "funcName": "http_header_request_unset"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall http_header_request_set(__int64 a1, int a2, __int64 a3, unsigned int a4, const void *a5, unsigned int a6)\n{\n  const void *v6; // rbp\n  unsigned int v7; // ebx\n  __int64 v8; // rax\n\n  v6 = a5;\n  v7 = a6;\n  if ( a6 )\n  {\n    *(_QWORD *)(a1 + 232) |= 1LL << a2;\n  }\n  else if ( a2 )\n  {\n    *(_QWORD *)(a1 + 232) &= __ROL8__(-2LL, a2);\n  }\n  v8 = array_get_buf_ptr_ext(a1 + 240, a2, a3, a4);\n  return buffer_copy_string_len(v8, v6, v7);\n}\n", 
            "funcStartAddr": "0x2c490L", 
            "funcEndAddr": "0x2c4f4L", 
            "funcName": "http_header_request_set"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_header_request_append(__int64 a1, int a2, __int64 a3, unsigned int a4, const void *a5, unsigned int a6)\n{\n  unsigned int v6; // ebp\n  const void *v7; // r12\n  __int64 v8; // rax\n  __int64 v9; // r13\n\n  if ( a6 )\n  {\n    v6 = a6;\n    *(_QWORD *)(a1 + 232) |= 1LL << a2;\n    v7 = a5;\n    v8 = array_get_buf_ptr_ext(a1 + 240, a2, a3, a4);\n    v9 = v8;\n    if ( a2 == 19 )\n    {\n      if ( *(_DWORD *)(v8 + 8) > 1u )\n        buffer_append_string_len(v8, &off_48867, 2uLL);\n    }\n    else if ( *(_DWORD *)(v8 + 8) > 1u )\n    {\n      buffer_append_string_len(v8, \", \", 2uLL);\n    }\n    buffer_append_string_len(v9, v7, v6);\n  }\n}\n", 
            "funcStartAddr": "0x2c500L", 
            "funcEndAddr": "0x2c59aL", 
            "funcName": "http_header_request_append"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_header_env_get(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // rax\n  signed __int64 result; // rax\n\n  v3 = array_get_element_klen(a1 + 392, a2, a3);\n  if ( v3 && *(_DWORD *)(v3 + 40) > 1u )\n    result = v3 + 32;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c5a0L", 
            "funcEndAddr": "0x2c5ccL", 
            "funcName": "http_header_env_get"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_header_env_set_ptr(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 result; // rax\n\n  result = array_get_buf_ptr(a1 + 392, a2, a3);\n  *(_DWORD *)(result + 8) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c5d0L", 
            "funcEndAddr": "0x2c5ecL", 
            "funcName": "http_header_env_set_ptr"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall http_header_env_set(__int64 a1, __int64 a2, __int64 a3, const void *a4, unsigned int a5)\n{\n  const void *v5; // rbp\n  unsigned int v6; // ebx\n  __int64 v7; // rax\n\n  v5 = a4;\n  v6 = a5;\n  v7 = array_get_buf_ptr(a1 + 392, a2, a3);\n  return buffer_copy_string_len(v7, v5, v6);\n}\n", 
            "funcStartAddr": "0x2c5f0L", 
            "funcEndAddr": "0x2c61bL", 
            "funcName": "http_header_env_set"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall http_header_env_append(__int64 a1, __int64 a2, __int64 a3, const void *a4, unsigned int a5)\n{\n  unsigned int v5; // ebx\n  const void *v6; // rbp\n  _DWORD *result; // rax\n  _DWORD *v8; // ST08_8\n\n  v5 = a5;\n  v6 = a4;\n  result = (_DWORD *)array_get_buf_ptr(a1 + 392, a2, a3);\n  if ( v5 )\n  {\n    if ( result[2] > 1u )\n    {\n      v8 = result;\n      buffer_append_string_len((__int64)result, \", \", 2uLL);\n      result = v8;\n    }\n    result = buffer_append_string_len((__int64)result, v6, v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2c620L", 
            "funcEndAddr": "0x2c67fL", 
            "funcName": "http_header_env_append"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_2C680(_DWORD *a1, int a2)\n{\n  _DWORD *result; // rax\n\n  for ( result = a1; *result != -1 && *result != a2; result += 4 )\n    ;\n  return result;\n}\n", 
            "funcStartAddr": "0x2c680L", 
            "funcEndAddr": "0x2c6a1L", 
            "funcName": "sub_2C680"
        }, 
        {
            "decompiledFuncCode": "char **__fastcall http_method_buf(signed int a1)\n{\n  signed __int64 v1; // rax\n\n  v1 = a1;\n  if ( (unsigned int)a1 > 0x25 )\n    v1 = a1 + 40LL;\n  return &(&off_257320)[2 * v1];\n}\n", 
            "funcStartAddr": "0x2c6b0L", 
            "funcEndAddr": "0x2c6cbL", 
            "funcName": "http_method_buf"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall get_http_version_name(int a1)\n{\n  return *((_QWORD *)sub_2C680(&unk_2575A0, a1) + 1);\n}\n", 
            "funcStartAddr": "0x2c6d0L", 
            "funcEndAddr": "0x2c6e3L", 
            "funcName": "get_http_version_name"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall get_http_method_key(void *s2, size_t n)\n{\n  signed int v2; // edx\n  char **v3; // rbx\n  unsigned __int64 v4; // rbx\n  __int64 result; // rax\n\n  v2 = 5;\n  v3 = &off_257330;\n  if ( n != 3 || *(_BYTE *)s2 != 71 || *((_BYTE *)s2 + 1) != 69 || (result = 0LL, *((_BYTE *)s2 + 2) != 84) )\n  {\n    do\n    {\n      if ( v2 - 1 == n && !memcmp(*v3, s2, n) )\n        break;\n      v3 += 2;\n      v2 = *((_DWORD *)v3 + 2);\n    }\n    while ( v2 );\n    v4 = ((char *)v3 - (char *)&off_257320) >> 4;\n    result = (unsigned int)v4;\n    if ( v4 > 0x25 )\n      result = (unsigned int)(v4 != 38) - 2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2c6f0L", 
            "funcEndAddr": "0x2c775L", 
            "funcName": "get_http_method_key"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall http_status_append(__int64 a1, int a2)\n{\n  const void **v2; // rax\n  unsigned __int64 v3; // rdx\n\n  if ( a2 == 200 )\n    return buffer_append_string_len(a1, \"200 OK\", 6uLL);\n  v2 = (const void **)sub_2C680(&off_256F40, a2);\n  v3 = *((unsigned int *)v2 + 1);\n  if ( (_DWORD)v3 )\n    return buffer_append_string_len(a1, v2[1], v3);\n  buffer_append_int(a1, a2);\n  return buffer_append_string_len(a1, \" \", 1uLL);\n}\n", 
            "funcStartAddr": "0x2c780L", 
            "funcEndAddr": "0x2c7e8L", 
            "funcName": "http_status_append"
        }, 
        {
            "decompiledFuncCode": "const void **__fastcall http_version_append(__int64 a1, int a2)\n{\n  const void **result; // rax\n  __int64 v3; // rcx\n  unsigned __int64 v4; // rdx\n\n  result = (const void **)sub_2C680(&unk_2575A0, a2);\n  v4 = *((unsigned int *)result + 1);\n  if ( (_DWORD)v4 )\n    result = (const void **)buffer_append_string_len(v3, result[1], v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x2c7f0L", 
            "funcEndAddr": "0x2c825L", 
            "funcName": "http_version_append"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2C830(__int64 a1, __int64 a2, int a3, int a4)\n{\n  __int64 v4; // r8\n  __int64 v5; // rax\n\n  v4 = *(_QWORD *)(a2 + 24);\n  v5 = *(_QWORD *)(v4 + 8LL * (unsigned int)(2 * a3));\n  burl_append(a1, (char *)(*(_QWORD *)(a2 + 32) + v5), *(_QWORD *)(v4 + 8LL * (unsigned int)(2 * a3 + 1)) - v5, a4);\n}\n", 
            "funcStartAddr": "0x2c830L", 
            "funcEndAddr": "0x2c854L", 
            "funcName": "sub_2C830"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2C860(__int64 a1, __int64 a2, unsigned int a3, int a4)\n{\n  __int64 v4; // r8\n  __int64 v5; // rax\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 16) > a3 )\n    {\n      v4 = *(_QWORD *)(a2 + 24);\n      v5 = *(_QWORD *)(v4 + 16LL * a3);\n      burl_append(a1, (char *)(**(_QWORD **)a2 + v5), *(_QWORD *)(v4 + 8LL * (2 * a3 + 1)) - v5, a4);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2c860L", 
            "funcEndAddr": "0x2c896L", 
            "funcName": "sub_2C860"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall pcre_keyvalue_buffer_process(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  int v4; // ebp\n  __int64 v5; // rbx\n  __int64 v6; // r13\n  int v7; // er12\n  int v8; // eax\n  __int64 v10; // rdi\n  int v11; // eax\n  char *v12; // r12\n  unsigned int v13; // eax\n  unsigned __int64 v14; // r14\n  unsigned __int64 v15; // rbp\n  signed __int64 v16; // rdi\n  __int64 v17; // rbx\n  char *v18; // rsi\n  _BYTE *v19; // r15\n  char *v20; // r12\n  const void *v21; // rcx\n  __int64 v22; // rdx\n  unsigned __int8 v23; // al\n  char v24; // cl\n  unsigned int v25; // edx\n  int v26; // ecx\n  char *v27; // rbp\n  const char *v28; // rdx\n  int v29; // er13\n  unsigned __int8 v30; // al\n  bool v31; // cf\n  bool v32; // zf\n  bool v33; // cf\n  bool v34; // zf\n  _BYTE *v35; // rsi\n  const char *v36; // rdi\n  signed __int64 v37; // rcx\n  bool v38; // cf\n  bool v39; // zf\n  const char *v40; // r8\n  const char *v41; // rdi\n  signed __int64 v42; // rcx\n  _BYTE *v43; // rsi\n  char v44; // al\n  bool v45; // cf\n  bool v46; // zf\n  const char *v47; // rdi\n  signed __int64 v48; // rcx\n  _BYTE *v49; // rsi\n  char *v50; // rax\n  bool v51; // cf\n  bool v52; // zf\n  const char *v53; // rdi\n  signed __int64 v54; // rcx\n  _BYTE *v55; // rsi\n  char v56; // al\n  bool v57; // cf\n  bool v58; // zf\n  signed __int64 v59; // rcx\n  const char *v60; // rdi\n  _BYTE *v61; // rsi\n  char v62; // al\n  bool v63; // cf\n  bool v64; // zf\n  __int64 v65; // rax\n  __int64 v66; // r10\n  char *v67; // rax\n  char **v68; // r10\n  unsigned int v69; // edx\n  char *v70; // rax\n  unsigned int v71; // er8\n  unsigned __int8 v72; // cl\n  unsigned int v73; // edx\n  unsigned int v74; // ST20_4\n  int v75; // ST20_4\n  int v76; // eax\n  _BYTE *v77; // rdi\n  signed __int64 v78; // rcx\n  _BYTE *v79; // rsi\n  int v80; // ST20_4\n  const char *v81; // rdi\n  signed __int64 v82; // rcx\n  _BYTE *v83; // rsi\n  char v84; // al\n  bool v85; // cf\n  bool v86; // zf\n  _BYTE *v87; // rdi\n  signed __int64 v88; // rcx\n  _BYTE *v89; // rsi\n  const char *v90; // ST20_8\n  char *v91; // rax\n  __int64 v92; // rsi\n  __int64 v93; // rax\n  size_t v94; // ST28_8\n  void *v95; // rax\n  unsigned __int64 v96; // r8\n  __int64 v97; // rsi\n  char *v98; // rax\n  bool v99; // cf\n  bool v100; // zf\n  _BYTE *v101; // rsi\n  const char *v102; // rdi\n  signed __int64 v103; // rcx\n  __int64 v104; // [rsp+0h] [rbp-58h]\n  __int64 v105; // [rsp+8h] [rbp-50h]\n  const char *v106; // [rsp+10h] [rbp-48h]\n  unsigned int v107; // [rsp+10h] [rbp-48h]\n  __int64 v108; // [rsp+10h] [rbp-48h]\n  char *v109; // [rsp+10h] [rbp-48h]\n  char *s1; // [rsp+18h] [rbp-40h]\n  char *s1a; // [rsp+18h] [rbp-40h]\n\n  v4 = *((_DWORD *)a1 + 2);\n  v5 = *a1;\n  if ( v4 <= 0 )\n    return 0LL;\n  v104 = a4;\n  v6 = a3;\n  v7 = 0;\n  while ( 1 )\n  {\n    v8 = pcre2_match_8(\n           *(_QWORD *)v5,\n           *(_QWORD *)v6,\n           *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0),\n           0LL,\n           0LL,\n           *(_QWORD *)(v5 + 8),\n           0LL);\n    if ( v8 >= 0 )\n      break;\n    if ( v8 != -1 )\n      return 4LL;\n    ++v7;\n    v5 += 32LL;\n    if ( v4 == v7 )\n      return 0LL;\n  }\n  v31 = *(_DWORD *)(v5 + 24) < 1u;\n  v32 = *(_DWORD *)(v5 + 24) == 1;\n  *(_DWORD *)(a2 + 16) = v7;\n  if ( v31 || v32 )\n    return 0LL;\n  *(_DWORD *)(a2 + 20) = v8;\n  v10 = *(_QWORD *)(v5 + 8);\n  *(_QWORD *)(a2 + 32) = *(_QWORD *)v6;\n  *(_QWORD *)(a2 + 24) = pcre2_get_ovector_pointer_8(v10);\n  v11 = *(_DWORD *)(v5 + 24);\n  v12 = *(char **)(v5 + 16);\n  *(_DWORD *)(v104 + 8) = 0;\n  v13 = v11 - (v11 != 0);\n  v14 = v13;\n  if ( v13 <= 1 )\n  {\n    v21 = v12;\n    goto LABEL_20;\n  }\n  v105 = a2;\n  v15 = 1LL;\n  v16 = 0LL;\n  v17 = 0LL;\n  v18 = v12;\n  v19 = v12;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v20 = &v19[v17];\n      v21 = v18;\n      v22 = v17;\n      if ( (unsigned __int8)(v19[v17] - 36) <= 1u )\n        break;\n      v15 = v17++ + 2;\n      if ( v14 <= v22 + 2 )\n        goto LABEL_19;\n    }\n    buffer_append_string_len(v104, v18, v17 - v16);\n    v23 = v19[v15];\n    if ( v23 == 123 )\n      break;\n    v24 = *v20;\n    if ( (unsigned int)v23 - 48 > 9 )\n    {\n      buffer_append_string_len(v104, &v19[v17], (v23 != v24) + 1LL);\n    }\n    else\n    {\n      v25 = (char)v23 - 48;\n      if ( v24 == 36 )\n      {\n        if ( v25 < *(_DWORD *)(v105 + 20) )\n          sub_2C830(v104, v105, v25, 0);\n      }\n      else\n      {\n        sub_2C860(v104, *(_QWORD *)v105, v25, 0);\n      }\n    }\nLABEL_18:\n    v16 = v17 + 2;\n    v15 = v17 + 3;\n    v18 = &v19[v17 + 2];\n    v17 += 2LL;\n    v21 = v18;\n    if ( v14 <= v15 )\n    {\nLABEL_19:\n      v14 -= v16;\nLABEL_20:\n      buffer_append_string_len(v104, v21, v14);\n      return 1LL;\n    }\n  }\n  v26 = (unsigned __int8)v20[2];\n  v27 = v20 + 2;\n  v28 = \"esc:\";\n  v29 = 0;\n  while ( (_BYTE)v26 != 125 && (_BYTE)v26 != 0 && (unsigned int)(unsigned __int8)v26 - 48 > 9 )\n  {\n    v30 = v27[1];\n    switch ( (_BYTE)v26 )\n    {\n      case 0x65:\n        if ( v30 == 115 )\n        {\n          if ( v27[2] != 99 )\n            goto LABEL_29;\n          v51 = (unsigned __int8)v27[3] < 0x3Au;\n          v52 = v27[3] == 58;\n          if ( v27[3] == 58 )\n          {\n            v26 = (unsigned __int8)v27[4];\n            v29 |= 8u;\n            v27 += 4;\n          }\n          else\n          {\n            v53 = \"ape:\";\n            v54 = 4LL;\n            v55 = v27 + 3;\n            do\n            {\n              if ( !v54 )\n                break;\n              v51 = *v55 < (const unsigned __int8)*v53;\n              v52 = *v55++ == *v53++;\n              --v54;\n            }\n            while ( v52 );\n            v56 = (!v51 && !v52) - v51;\n            v57 = 0;\n            v58 = v56 == 0;\n            if ( v56 )\n            {\n              v81 = \"nde:\";\n              v82 = 4LL;\n              v83 = v27 + 3;\n              do\n              {\n                if ( !v82 )\n                  break;\n                v57 = *v83 < (const unsigned __int8)*v81;\n                v58 = *v83++ == *v81++;\n                --v82;\n              }\n              while ( v58 );\n              v84 = (!v57 && !v58) - v57;\n              v85 = 0;\n              v86 = v84 == 0;\n              if ( v84 )\n              {\n                v87 = &unk_4965D;\n                v88 = 6LL;\n                v89 = v27 + 3;\n                do\n                {\n                  if ( !v88 )\n                    break;\n                  v85 = *v89 < *v87;\n                  v86 = *v89++ == *v87++;\n                  --v88;\n                }\n                while ( v86 );\n                if ( (!v85 && !v86) == v85 )\n                {\n                  v26 = (unsigned __int8)v27[9];\n                  v29 |= 0x20u;\n                  v27 += 9;\n                }\n                else\n                {\n                  v90 = v28;\n                  v91 = strchr(v27 + 3, 58);\n                  v28 = v90;\n                  if ( !v91 )\n                    return 1LL;\n                  v27 = v91 + 1;\n                  v26 = (unsigned __int8)v91[1];\n                }\n              }\n              else\n              {\n                v26 = (unsigned __int8)v27[7];\n                v29 |= 0x10u;\n                v27 += 7;\n              }\n            }\n            else\n            {\n              v26 = (unsigned __int8)v27[7];\n              v29 |= 8u;\n              v27 += 7;\n            }\n          }\n        }\n        else\n        {\n          if ( v30 != 110 )\n            goto LABEL_29;\n          v33 = (unsigned __int8)v27[2] < 0x63u;\n          v34 = v27[2] == 99;\n          if ( v27[2] != 99 )\n            goto LABEL_29;\n          v35 = v27 + 3;\n          v36 = \"b64u:\";\n          v37 = 5LL;\n          do\n          {\n            if ( !v37 )\n              break;\n            v33 = *v35 < (const unsigned __int8)*v36;\n            v34 = *v35++ == *v36++;\n            --v37;\n          }\n          while ( v34 );\n          if ( (!v33 && !v34) != v33 )\n            goto LABEL_29;\n          v26 = (unsigned __int8)v27[8];\n          v29 |= 0x40u;\n          v27 += 8;\n        }\n        break;\n      case 0x6E:\n        v31 = v30 < 0x6Fu;\n        v32 = v30 == 111;\n        if ( v30 != 111 )\n          goto LABEL_29;\n        v40 = v27 + 2;\n        v59 = 4LL;\n        v60 = v28;\n        v61 = v27 + 2;\n        do\n        {\n          if ( !v59 )\n            break;\n          v31 = *v61 < (const unsigned __int8)*v60;\n          v32 = *v61++ == *v60++;\n          --v59;\n        }\n        while ( v32 );\n        v62 = (!v31 && !v32) - v31;\n        v63 = 0;\n        v64 = v62 == 0;\n        if ( v62 )\n        {\n          v77 = &unk_49669;\n          v78 = 7LL;\n          v79 = v27 + 2;\n          do\n          {\n            if ( !v78 )\n              break;\n            v63 = *v79 < *v77;\n            v64 = *v79++ == *v77++;\n            --v78;\n          }\n          while ( v64 );\n          if ( (!v63 && !v64) != v63 )\n            goto LABEL_48;\n          v26 = (unsigned __int8)v27[9];\n          v29 |= 4u;\n          v27 += 9;\n        }\n        else\n        {\n          v26 = (unsigned __int8)v27[6];\n          v29 |= 4u;\n          v27 += 6;\n        }\n        break;\n      case 0x74:\n        v38 = v30 < 0x6Fu;\n        v39 = v30 == 111;\n        if ( v30 != 111 )\n          goto LABEL_29;\n        v40 = v27 + 2;\n        v41 = \"lower:\";\n        v42 = 6LL;\n        v43 = v27 + 2;\n        do\n        {\n          if ( !v42 )\n            break;\n          v38 = *v43 < (const unsigned __int8)*v41;\n          v39 = *v43++ == *v41++;\n          --v42;\n        }\n        while ( v39 );\n        v44 = (!v38 && !v39) - v38;\n        v45 = 0;\n        v46 = v44 == 0;\n        if ( !v44 )\n          goto LABEL_143;\n        v47 = \"upper:\";\n        v48 = 6LL;\n        v49 = v27 + 2;\n        do\n        {\n          if ( !v48 )\n            break;\n          v45 = *v49 < (const unsigned __int8)*v47;\n          v46 = *v49++ == *v47++;\n          --v48;\n        }\n        while ( v46 );\n        if ( (!v45 && !v46) != v45 )\n        {\nLABEL_48:\n          v106 = v28;\n          v50 = strchr(v40, 58);\n          if ( !v50 )\n            return 1LL;\n          v27 = v50 + 1;\n          v26 = (unsigned __int8)v50[1];\n          v28 = v106;\n        }\n        else\n        {\nLABEL_143:\n          v26 = (unsigned __int8)v27[8];\n          v29 |= 1u;\n          v27 += 8;\n        }\n        break;\n      case 0x75:\n        if ( v30 == 114 && v27[2] == 108 && v27[3] == 46 )\n        {\n          s1a = v27 + 4;\n          v108 = *(_QWORD *)(v105 + 8);\n          if ( !strncmp(v27 + 4, \"scheme}\", 7uLL) )\n          {\n            if ( *(_QWORD *)v108 )\n              burl_append(\n                v104,\n                **(char ***)v108,\n                *(_DWORD *)(*(_QWORD *)v108 + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)v108 + 8LL) != 0),\n                v29);\n            v26 = (unsigned __int8)v27[10];\n            v27 += 10;\n          }\n          else if ( !strncmp(s1a, \"authority}\", 0xAuLL) )\n          {\n            v92 = *(_QWORD *)(v108 + 8);\n            if ( v92 )\n              burl_append(v104, *(char **)v92, *(_DWORD *)(v92 + 8) - (unsigned int)(*(_DWORD *)(v92 + 8) != 0), v29);\n            v26 = (unsigned __int8)v27[13];\n            v27 += 13;\n          }\n          else if ( !strncmp(s1a, \"port}\", 5uLL) )\n          {\n            v27 += 8;\n            buffer_append_int(v104, *(unsigned __int16 *)(v108 + 16));\n            v26 = (unsigned __int8)*v27;\n          }\n          else if ( !strncmp(s1a, \"path}\", 5uLL) )\n          {\n            v93 = *(_QWORD *)(v108 + 24);\n            v109 = *(char **)v93;\n            v94 = *(_DWORD *)(v93 + 8) - (unsigned int)(*(_DWORD *)(v93 + 8) != 0);\n            v95 = memchr(*(const void **)v93, 63, v94);\n            v96 = v94;\n            if ( v95 )\n              v96 = (unsigned int)((_DWORD)v95 - (_DWORD)v109);\n            v27 += 8;\n            burl_append(v104, v109, v96, v29);\n            v26 = (unsigned __int8)*v27;\n          }\n          else if ( !strncmp(s1a, \"query}\", 6uLL) )\n          {\n            v97 = *(_QWORD *)(v108 + 32);\n            if ( v97 )\n              burl_append(v104, *(char **)v97, *(_DWORD *)(v97 + 8) - (unsigned int)(*(_DWORD *)(v97 + 8) != 0), v29);\n            v26 = (unsigned __int8)v27[9];\n            v27 += 9;\n          }\n          else\n          {\n            v98 = strchr(s1a, 125);\n            v27 = v98;\n            if ( !v98 )\n              return 1LL;\n            v26 = (unsigned __int8)*v98;\n          }\n          goto LABEL_75;\n        }\nLABEL_29:\n        ++v27;\n        v26 = v30;\n        break;\n      case 0x71:\n        if ( v30 == 115 && v27[2] == 97 && v27[3] == 125 )\n        {\n          v65 = *(_QWORD *)(v105 + 8);\n          v66 = *(_QWORD *)(v65 + 32);\n          if ( v66 )\n          {\n            s1 = *(char **)(v65 + 32);\n            v107 = *(_DWORD *)(v66 + 8);\n            if ( *(_DWORD *)(v66 + 8) )\n            {\n              v67 = strchr(*(const char **)v104, 63);\n              v68 = (char **)s1;\n              if ( v67 )\n              {\n                v69 = v107;\n                if ( v107 > 1 )\n                {\n                  buffer_append_string_len(v104, \"&\", 1uLL);\n                  v68 = (char **)s1;\n                  v69 = *((_DWORD *)s1 + 2);\n                }\n              }\n              else\n              {\n                buffer_append_string_len(v104, \"?\", 1uLL);\n                v68 = (char **)s1;\n                v69 = *((_DWORD *)s1 + 2);\n              }\n              burl_append(v104, *v68, v69 - (v69 != 0), v29);\n            }\n          }\n          v26 = (unsigned __int8)v27[3];\n          v27 += 3;\n          goto LABEL_75;\n        }\n        goto LABEL_29;\n      case 0x64:\n        if ( v30 != 101 )\n          goto LABEL_29;\n        v99 = (unsigned __int8)v27[2] < 0x63u;\n        v100 = v27[2] == 99;\n        if ( v27[2] != 99 )\n          goto LABEL_29;\n        v101 = v27 + 3;\n        v102 = \"b64u:\";\n        v103 = 5LL;\n        do\n        {\n          if ( !v103 )\n            break;\n          v99 = *v101 < (const unsigned __int8)*v102;\n          v100 = *v101++ == *v102++;\n          --v103;\n        }\n        while ( v100 );\n        if ( (!v99 && !v100) != v99 )\n          goto LABEL_29;\n        v26 = (unsigned __int8)v27[8];\n        LOBYTE(v29) = v29 | 0x80;\n        v27 += 8;\n        break;\n      default:\n        goto LABEL_29;\n    }\n  }\nLABEL_75:\n  if ( !(_BYTE)v26 )\n    return 1LL;\n  v70 = v27 + 1;\n  if ( (_BYTE)v26 == 125 )\n  {\nLABEL_86:\n    v76 = (_DWORD)v70 - (_DWORD)v20 - 2;\n    if ( v76 < 0 )\n      return 1LL;\n    v17 += v76;\n    goto LABEL_18;\n  }\n  v71 = v26 - 48;\n  v72 = v27[1];\n  v73 = (unsigned __int8)v27[1] - 48;\n  if ( v73 <= 9 )\n  {\n    v70 = v27 + 2;\n    v71 = v73 + 10 * v71;\n    v72 = v27[2];\n  }\n  if ( v72 == 125 || (v74 = v71, v70 = strchr(v70, 125), v71 = v74, v70) )\n  {\n    if ( !v29 )\n      v29 = 32;\n    LODWORD(v70) = (_DWORD)v70 + 1;\n    if ( *v20 == 36 )\n    {\n      if ( *(_DWORD *)(v105 + 20) > v71 )\n      {\n        v75 = (signed int)v70;\n        sub_2C830(v104, v105, v71, v29);\n        LODWORD(v70) = v75;\n      }\n    }\n    else\n    {\n      v80 = (signed int)v70;\n      sub_2C860(v104, *(_QWORD *)v105, v71, v29);\n      LODWORD(v70) = v80;\n    }\n    goto LABEL_86;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x2c8a0L", 
            "funcEndAddr": "0x2d15fL", 
            "funcName": "pcre_keyvalue_buffer_process"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_2D160(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  __int64 (__fastcall *v3)(_QWORD, signed __int64); // rax\n  void *v4; // rdi\n  int v5; // edi\n\n  v1 = a1;\n  if ( *(_DWORD *)(a1 + 44) )\n  {\n    v2 = *(_QWORD *)(a1 + 16);\n    *(_DWORD *)(a1 + 44) = 0;\n    if ( *(_DWORD *)(v2 + 8) > 1u )\n      unlink(*(const char **)v2);\n  }\n  v3 = *(__int64 (__fastcall **)(_QWORD, signed __int64))(a1 + 80);\n  if ( v3 )\n  {\n    LODWORD(v3) = v3(*(_QWORD *)(a1 + 72), 0xFFFFFFFFLL);\n    *(_QWORD *)(a1 + 80) = 0LL;\n    *(_QWORD *)(a1 + 72) = 0LL;\n  }\n  else\n  {\n    v5 = *(_DWORD *)(a1 + 40);\n    if ( v5 != -1 )\n      LODWORD(v3) = close(v5);\n  }\n  v4 = *(void **)(v1 + 48);\n  if ( v4 != (void *)-1LL )\n  {\n    LODWORD(v3) = munmap(v4, *(_QWORD *)(v1 + 56));\n    *(_QWORD *)(v1 + 48) = -1LL;\n    *(_QWORD *)(v1 + 64) = 0LL;\n    *(_QWORD *)(v1 + 56) = 0LL;\n  }\n  *(_DWORD *)(v1 + 40) = -1;\n  *(_QWORD *)(v1 + 32) = 0LL;\n  *(_DWORD *)(v1 + 8) = 0;\n  return (signed int)v3;\n}\n", 
            "funcStartAddr": "0x2d160L", 
            "funcEndAddr": "0x2d207L", 
            "funcName": "sub_2D160"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2D210(void *ptr)\n{\n  if ( *((_DWORD *)ptr + 2) == 1 )\n    sub_2D160((__int64)ptr);\n  buffer_free(*((void **)ptr + 2));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x2d210L", 
            "funcEndAddr": "0x2d237L", 
            "funcName": "sub_2D210"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2D240(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // edi\n  void (__fastcall *v4)(__int64, signed __int64); // rdx\n  __int64 v5; // rdi\n\n  v2 = a1;\n  v3 = *(_DWORD *)(a2 + 40);\n  if ( v3 >= 0 )\n  {\n    v4 = *(void (__fastcall **)(__int64, signed __int64))(a2 + 80);\n    if ( v4 )\n    {\n      *(_DWORD *)(v2 + 40) = v3;\n      v5 = *(_QWORD *)(a2 + 72);\n      *(_QWORD *)(v2 + 80) = v4;\n      *(_QWORD *)(v2 + 72) = v5;\n      v4(v5, 1LL);\n    }\n    else\n    {\n      *(_DWORD *)(v2 + 40) = fdevent_dup_cloexec();\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2d240L", 
            "funcEndAddr": "0x2d27aL", 
            "funcName": "sub_2D240"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_2D280(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // rbx\n  char *v3; // rax\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  size_t v6; // rdi\n  signed __int64 v7; // r9\n  __int64 v8; // rax\n  __int64 v9; // rsi\n  __off64_t v10; // r9\n  int v11; // er8\n  size_t v12; // rsi\n\n  v2 = a1;\n  v3 = (char *)a1[6];\n  v4 = a1[3];\n  if ( v3 != (char *)-1LL )\n  {\n    v5 = a1[8];\n    v6 = a1[7];\n    if ( v5 <= v4 )\n    {\n      if ( a2 + v4 <= (signed __int64)(v5 + v6) )\n        return &v3[v4 - v5];\n      munmap(v3, v6);\n      v4 = v2[3];\n    }\n    else\n    {\n      munmap(v3, v6);\n      v4 = v2[3];\n    }\n  }\n  v7 = qword_258588;\n  if ( !qword_258588 )\n  {\n    v8 = sysconf(30);\n    v7 = -v8;\n    if ( v8 == -1 )\n      v7 = -4096LL;\n    qword_258588 = v7;\n  }\n  v9 = v2[4];\n  v10 = v4 & v7;\n  v11 = *((_DWORD *)v2 + 10);\n  v2[8] = v10;\n  v12 = v9 - v10;\n  v2[7] = v12;\n  v3 = (char *)mmap64(0LL, v12, 1, 2, v11, v10);\n  v2[6] = v3;\n  if ( v3 != (char *)-1LL )\n  {\n    v4 = v2[3];\n    v5 = v2[8];\n    return &v3[v4 - v5];\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x2d280L", 
            "funcEndAddr": "0x2d35cL", 
            "funcName": "sub_2D280"
        }, 
        {
            "decompiledFuncCode": "_DWORD *sub_2D360()\n{\n  _DWORD *v0; // rax\n  _DWORD *v1; // rbx\n\n  v0 = calloc(1uLL, 0x58uLL);\n  if ( !v0 )\n    ck_assert_failed((__int64)\"chunk.c\", 67LL, (__int64)\"((void *)0) != c\");\n  v1 = v0;\n  v0[10] = -1;\n  *((_QWORD *)v0 + 6) = -1LL;\n  *((_QWORD *)v0 + 2) = buffer_init();\n  return v1;\n}\n", 
            "funcStartAddr": "0x2d360L", 
            "funcEndAddr": "0x2d3adL", 
            "funcName": "sub_2D360"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall sub_2D3B0(unsigned __int64 a1)\n{\n  unsigned __int64 v1; // rbp\n  void ***v2; // rbx\n  void **result; // rax\n  void **v4; // rdx\n  void *v5; // rdx\n\n  v1 = qword_2580D8;\n  if ( (qword_2580D8 | 1uLL) < a1 )\n  {\n    v2 = (void ***)qword_2585B0;\n    if ( qword_2585B0 )\n    {\n      result = (void **)*((_QWORD *)qword_2585B0 + 2);\n      if ( a1 <= *((unsigned int *)result + 3) )\n      {\n        v5 = *(void **)qword_2585B0;\n        --dword_258598;\n        qword_2585B0 = v5;\n        goto LABEL_8;\n      }\n    }\n    v1 = (qword_2580D8 + (a1 & 0xFFFFFFFFFFFFFFFELL) - 1) & -qword_2580D8;\n    goto LABEL_7;\n  }\n  v2 = (void ***)qword_2585B8;\n  if ( !qword_2585B8 )\n  {\nLABEL_7:\n    v2 = (void ***)sub_2D360();\n    buffer_string_prepare_copy(v2[2], v1 - 1);\n    result = v2[2];\n    goto LABEL_8;\n  }\n  qword_2585B8 = *(void **)qword_2585B8;\n  result = v2[2];\nLABEL_8:\n  v4 = (void **)qword_2585A0;\n  v2[2] = 0LL;\n  qword_2585A0 = v2;\n  *v2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x2d3b0L", 
            "funcEndAddr": "0x2d463L", 
            "funcName": "sub_2D3B0"
        }, 
        {
            "decompiledFuncCode": "void ***__fastcall sub_2D470(unsigned __int64 a1)\n{\n  unsigned __int64 v1; // rbx\n  void *v2; // rbp\n  void *v4; // rbp\n  void ***v5; // rbp\n  void *v6; // rax\n\n  v1 = qword_2580D8;\n  if ( (qword_2580D8 | 1uLL) >= a1 )\n  {\n    v2 = qword_2585B8;\n    if ( qword_2585B8 )\n    {\n      qword_2585B8 = *(void **)qword_2585B8;\n      return (void ***)v2;\n    }\n    goto LABEL_6;\n  }\n  v4 = qword_2585B0;\n  v1 = (qword_2580D8 + a1 - 1) & -qword_2580D8;\n  if ( !qword_2585B0 || v1 > *(unsigned int *)(*((_QWORD *)qword_2585B0 + 2) + 12LL) )\n  {\nLABEL_6:\n    v5 = (void ***)sub_2D360();\n    buffer_string_prepare_copy(v5[2], v1 - 1);\n    return v5;\n  }\n  v6 = *(void **)qword_2585B0;\n  --dword_258598;\n  qword_2585B0 = v6;\n  return (void ***)v4;\n}\n", 
            "funcStartAddr": "0x2d470L", 
            "funcEndAddr": "0x2d514L", 
            "funcName": "sub_2D470"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_2D520(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rax\n  int v6; // edx\n  __int64 v7; // rdi\n  const void *v8; // rsi\n  __int64 v10; // ST18_8\n  __int64 v11; // ST10_8\n  _DWORD *v12; // rax\n\n  v4 = qword_2585A8;\n  if ( qword_2585A8 )\n  {\n    qword_2585A8 = *(void **)qword_2585A8;\n  }\n  else\n  {\n    v10 = a4;\n    v11 = a3;\n    v12 = sub_2D360();\n    a4 = v10;\n    v4 = v12;\n    a3 = v11;\n  }\n  v5 = (_QWORD *)a1[1];\n  *v4 = 0LL;\n  if ( !v5 )\n    v5 = a1;\n  *v5 = v4;\n  a1[1] = v4;\n  v4[3] = a3;\n  a1[2] += a4;\n  v4[4] = a4 + a3;\n  v6 = *(_DWORD *)(a2 + 8);\n  v7 = v4[2];\n  v8 = *(const void **)a2;\n  *((_DWORD *)v4 + 2) = 1;\n  buffer_copy_string_len(v7, v8, v6 - (unsigned int)(v6 != 0));\n  return v4;\n}\n", 
            "funcStartAddr": "0x2d520L", 
            "funcEndAddr": "0x2d5c3L", 
            "funcName": "sub_2D520"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2D5D0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  if ( a3 > 0 )\n    sub_2D520(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);\n  sub_2D240(a1[1], a2);\n}\n", 
            "funcStartAddr": "0x2d5d0L", 
            "funcEndAddr": "0x2d603L", 
            "funcName": "sub_2D5D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2D610(void ***a1, unsigned __int64 a2)\n{\n  void **v2; // rax\n  void **v3; // rcx\n  __int64 v4; // rdx\n\n  v2 = (void **)qword_2585B0;\n  if ( dword_258598 > 63 || (unsigned __int64)qword_2580D8 <= 0xFFF )\n  {\n    if ( qword_2585B0 )\n    {\n      v4 = *((_QWORD *)qword_2585B0 + 2);\n      if ( v4 )\n      {\n        if ( *(unsigned int *)(v4 + 12) < a2 )\n        {\n          *((_QWORD *)qword_2585B0 + 2) = a1[2];\n          a1[2] = (void **)v4;\n        }\n      }\n    }\n    sub_2D210(a1);\n  }\n  else\n  {\n    ++dword_258598;\n    if ( qword_2585B0 && a2 < *(unsigned int *)(*((_QWORD *)qword_2585B0 + 2) + 12LL) )\n    {\n      do\n      {\n        v3 = v2;\n        v2 = (void **)*v2;\n      }\n      while ( v2 && a2 < *((unsigned int *)v2[2] + 3) );\n    }\n    else\n    {\n      v3 = &qword_2585B0;\n    }\n    *a1 = v2;\n    *v3 = a1;\n  }\n}\n", 
            "funcStartAddr": "0x2d610L", 
            "funcEndAddr": "0x2d6a9L", 
            "funcName": "sub_2D610"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2D6B0(void *ptr)\n{\n  __int64 v1; // rax\n  int v2; // ecx\n  unsigned __int64 v3; // rsi\n  __int64 v4; // r8\n  void *v5; // rax\n  void *v6; // rax\n  unsigned __int64 v7; // ST08_8\n\n  v1 = *((_QWORD *)ptr + 2);\n  v2 = *((_DWORD *)ptr + 2);\n  v3 = *(unsigned int *)(v1 + 12);\n  if ( (qword_2580D8 | 1) == v3 )\n  {\n    if ( v2 == 1 )\n    {\n      sub_2D160((__int64)ptr);\n      v1 = *((_QWORD *)ptr + 2);\n    }\n    *(_DWORD *)(v1 + 8) = 0;\n    v5 = qword_2585B8;\n    *((_QWORD *)ptr + 3) = 0LL;\n    qword_2585B8 = ptr;\n    *(_QWORD *)ptr = v5;\n  }\n  else if ( qword_2580D8 >= v3 )\n  {\n    if ( v2 == 1 )\n    {\n      sub_2D160((__int64)ptr);\n      *(_DWORD *)(*((_QWORD *)ptr + 2) + 8LL) = 0;\n      v6 = qword_2585A8;\n      *((_QWORD *)ptr + 3) = 0LL;\n      qword_2585A8 = ptr;\n      *(_QWORD *)ptr = v6;\n    }\n    else\n    {\n      sub_2D210(ptr);\n    }\n  }\n  else\n  {\n    v4 = *((_QWORD *)ptr + 2);\n    if ( v2 == 1 )\n    {\n      v7 = *(unsigned int *)(v1 + 12);\n      sub_2D160((__int64)ptr);\n      v4 = *((_QWORD *)ptr + 2);\n      v3 = v7;\n    }\n    *(_DWORD *)(v4 + 8) = 0;\n    *((_QWORD *)ptr + 3) = 0LL;\n    sub_2D610((void ***)ptr, v3);\n  }\n}\n", 
            "funcStartAddr": "0x2d6b0L", 
            "funcEndAddr": "0x2d7abL", 
            "funcName": "sub_2D6B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_2D7B0(__int64 a1, _QWORD *a2, const void *a3, unsigned __int64 a4)\n{\n  signed __int64 result; // rax\n  unsigned __int64 v5; // r8\n  __int64 v6; // rdi\n  int v7; // eax\n  unsigned __int64 v8; // rbx\n\n  result = 1LL;\n  if ( a4 )\n  {\n    result = 0LL;\n    if ( a1 )\n    {\n      if ( !*(_DWORD *)(a1 + 8) )\n      {\n        v5 = 0LL;\n        v6 = *(_QWORD *)(a1 + 16);\n        v7 = *(_DWORD *)(v6 + 12);\n        if ( v7 )\n          v5 = v7 - (*(_DWORD *)(v6 + 8) | (unsigned int)(*(_DWORD *)(v6 + 8) == 0));\n        result = 0LL;\n        if ( a4 <= v5 )\n        {\n          v8 = a4;\n          buffer_append_string_len(v6, a3, a4);\n          *a2 += v8;\n          result = 1LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2d7b0L", 
            "funcEndAddr": "0x2d82fL", 
            "funcName": "sub_2D7B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_2D830@<rax>(__int64 a1@<rdi>, _DWORD *a2@<rsi>, __int64 a3@<r8>, int a4@<r13d>)\n{\n  unsigned int v4; // ebp\n  __int64 result; // rax\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  __int64 v8; // [rsp+0h] [rbp-C8h]\n  __int64 v9; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v10; // [rsp+98h] [rbp-30h]\n\n  v10 = __readfsqword(0x28u);\n  if ( *(_DWORD *)(a1 + 40) != -1\n    || (v4 = fdevent_open_cloexec(**(_QWORD **)(a1 + 16), 1LL, 0LL, 0LL, a3), *(_DWORD *)(a1 + 40) = v4, v4 != -1) )\n  {\n    v4 = *(_DWORD *)(a1 + 44);\n    if ( v4 )\n    {\n      v4 = 0;\n    }\n    else\n    {\n      a4 = __fxstat64(1, *(_DWORD *)(a1 + 40), (struct stat64 *)&v8);\n      if ( a4 == -1 )\n        goto LABEL_13;\n      v6 = *(_QWORD *)(a1 + 24);\n      v7 = *(_QWORD *)(a1 + 32) - v6;\n      if ( v6 < 0 || v7 < 0 )\n        ck_assert_failed((__int64)\"chunk.c\", 1268LL, (__int64)&unk_496DF);\n      if ( v6 > v9 - v7 )\n      {\n        v4 = -1;\n        log_error(a2, \"chunk.c\", 1270LL, (__int64)\"file shrunk: %s\", **(_QWORD **)(a1 + 16));\n      }\n    }\n  }\n  else\n  {\n    log_perror(a2, \"chunk.c\", 1252LL, (__int64)\"open failed: %s\", **(_QWORD **)(a1 + 16));\n  }\n  while ( 1 )\n  {\n    result = v4;\n    if ( __readfsqword(0x28u) == v10 )\n      break;\nLABEL_13:\n    v4 = a4;\n    log_perror(a2, \"chunk.c\", 1262LL, (__int64)\"fstat failed\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2d830L", 
            "funcEndAddr": "0x2d996L", 
            "funcName": "sub_2D830"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_2D9A0(__int64 a1, _DWORD *a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  int v4; // edi\n  int v5; // eax\n  _QWORD *v6; // rax\n  __int64 v7; // rdx\n  _DWORD *v8; // rbp\n  _QWORD *v9; // rbx\n  int *v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  int v13; // eax\n  bool v14; // cf\n  void *v15; // rdi\n  int v16; // eax\n  __int64 v18; // [rsp+8h] [rbp-40h]\n\n  v2 = a1;\n  v3 = *(_QWORD *)(a1 + 8);\n  if ( v3 )\n  {\n    if ( *(_DWORD *)(v3 + 44) )\n    {\n      v4 = *(_DWORD *)(v3 + 40);\n      if ( v4 >= 0 )\n      {\n        if ( *(_QWORD *)(v3 + 32) < *(_QWORD *)(v2 + 40) )\n          return (_DWORD *)v3;\n        if ( *(_QWORD *)(v3 + 80) )\n          ck_assert_failed((__int64)\"chunk.c\", 696LL, (__int64)\"0 == c->file.refchg\");\n        v5 = close(v4);\n        *(_DWORD *)(v3 + 40) = -1;\n        if ( v5 )\n        {\n          v8 = 0LL;\n          log_perror(a2, \"chunk.c\", 700LL, (__int64)\"close() temp-file %s failed\", **(_QWORD **)(v3 + 16));\n          return v8;\n        }\n        v3 = *(_QWORD *)(v2 + 8);\n      }\n    }\n  }\n  v6 = sub_2D520((_QWORD *)v2, (__int64)&off_2575E0, 0LL, 0LL);\n  v7 = *(_QWORD *)(v2 + 32);\n  v8 = v6;\n  v9 = (_QWORD *)v6[2];\n  *((_DWORD *)v6 + 11) = 1;\n  if ( !v7 || (v18 = v7, !*(_DWORD *)(v7 + 16)) )\n  {\n    buffer_copy_path_len2((__int64)v9, \"/var/tmp\", 8uLL, \"lighttpd-upload-XXXXXX\", 0x16uLL);\n    v16 = fdevent_mkostemp(*v9, 0LL);\n    v8[10] = v16;\n    if ( v16 != -1 )\n      return v8;\n    goto LABEL_13;\n  }\n  v10 = __errno_location();\n  v11 = v18;\n  *v10 = 5;\n  v12 = *(unsigned int *)(v2 + 48);\n  if ( *(_DWORD *)(v18 + 16) <= (unsigned int)v12 )\n  {\nLABEL_13:\n    log_perror(a2, \"chunk.c\", 668LL, (__int64)\"opening temp-file failed: %s\", *v9);\n    v8[11] = 0;\n    *(_QWORD *)(v2 + 8) = v3;\n    if ( v3 )\n      *(_QWORD *)v3 = 0LL;\n    else\n      *(_QWORD *)v2 = 0LL;\n    v15 = v8;\n    v8 = 0LL;\n    sub_2D6B0(v15);\n    return v8;\n  }\n  while ( 1 )\n  {\n    buffer_copy_path_len2(\n      (__int64)v9,\n      *(const void **)(*(_QWORD *)(*(_QWORD *)v11 + 8 * v12) + 32LL),\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8 * v12) + 40LL)\n    - (unsigned int)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8 * v12) + 40LL) != 0),\n      \"lighttpd-upload-XXXXXX\",\n      0x16uLL);\n    v13 = fdevent_mkostemp(*v9, 0LL);\n    v8[10] = v13;\n    if ( v13 != -1 )\n      return v8;\n    v11 = *(_QWORD *)(v2 + 32);\n    v12 = (unsigned int)(*(_DWORD *)(v2 + 48) + 1);\n    v14 = (unsigned int)v12 < *(_DWORD *)(v11 + 16);\n    *(_DWORD *)(v2 + 48) = v12;\n    if ( !v14 )\n      goto LABEL_13;\n  }\n}\n", 
            "funcStartAddr": "0x2d9a0L", 
            "funcEndAddr": "0x2db9eL", 
            "funcName": "sub_2D9A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall chunkqueue_init(_QWORD *a1)\n{\n  _QWORD *result; // rax\n  __int64 v2; // rdx\n\n  result = a1;\n  if ( !a1 )\n  {\n    result = calloc(1uLL, 0x38uLL);\n    if ( !result )\n      ck_assert_failed((__int64)\"chunk.c\", 52LL, (__int64)\"((void *)0) != cq\");\n  }\n  v2 = qword_258590;\n  *result = 0LL;\n  result[1] = 0LL;\n  result[4] = v2;\n  result[5] = qword_2580D0;\n  return result;\n}\n", 
            "funcStartAddr": "0x2dba0L", 
            "funcEndAddr": "0x2dc0cL", 
            "funcName": "chunkqueue_init"
        }, 
        {
            "decompiledFuncCode": "void **chunk_buffer_acquire()\n{\n  return sub_2D3B0(qword_2580D8);\n}\n", 
            "funcStartAddr": "0x2dc10L", 
            "funcEndAddr": "0x2dc1cL", 
            "funcName": "chunk_buffer_acquire"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunk_buffer_release(_DWORD *a1)\n{\n  _QWORD *v1; // rax\n  void *v2; // rdx\n  unsigned __int64 v3; // rsi\n  void *v4; // rdx\n\n  if ( a1 )\n  {\n    v1 = qword_2585A0;\n    if ( qword_2585A0 )\n    {\n      v2 = *(void **)qword_2585A0;\n      v3 = (unsigned int)a1[3];\n      *((_QWORD *)qword_2585A0 + 2) = a1;\n      a1[2] = 0;\n      qword_2585A0 = v2;\n      if ( v3 == (qword_2580D8 | 1) )\n      {\n        v4 = qword_2585B8;\n        qword_2585B8 = v1;\n        *v1 = v4;\n      }\n      else if ( v3 <= qword_2580D8 )\n      {\n        sub_2D210(v1);\n      }\n      else\n      {\n        sub_2D610((void ***)v1, v3);\n      }\n    }\n    else\n    {\n      buffer_free(a1);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2dc20L", 
            "funcEndAddr": "0x2dc9dL", 
            "funcName": "chunk_buffer_release"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunk_buffer_yield(__int64 a1)\n{\n  __m128i *v1; // rax\n  __int64 v2; // rsi\n  int v3; // ecx\n  int v4; // edx\n\n  if ( *(_DWORD *)(a1 + 12) != (qword_2580D8 | 1) )\n  {\n    v1 = (__m128i *)sub_2D3B0(qword_2580D8);\n    v2 = *(_QWORD *)a1;\n    v3 = *(_DWORD *)(a1 + 8);\n    v4 = *(_DWORD *)(a1 + 12);\n    *(__m128i *)a1 = _mm_loadu_si128(v1);\n    v1->m128i_i64[0] = v2;\n    LODWORD(v1->m128i_i64[1]) = v3;\n    HIDWORD(v1->m128i_i64[1]) = v4;\n    chunk_buffer_release(v1);\n  }\n}\n", 
            "funcStartAddr": "0x2dca0L", 
            "funcEndAddr": "0x2dceaL", 
            "funcName": "chunk_buffer_yield"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall chunk_buffer_prepare_append(__int64 a1, unsigned __int64 a2)\n{\n  int v2; // eax\n  signed __int64 v3; // rdx\n  unsigned __int64 result; // rax\n  void **v5; // rax\n  size_t v6; // rdx\n  __m128i *v7; // rbp\n  const void *v8; // rsi\n  int v9; // eax\n\n  v2 = *(_DWORD *)(a1 + 12);\n  if ( v2 )\n  {\n    v3 = *(unsigned int *)(a1 + 8);\n    result = v2 - ((unsigned int)v3 | ((_DWORD)v3 == 0));\n    if ( a2 <= result )\n      return result;\n  }\n  else\n  {\n    result = 0LL;\n    if ( !a2 )\n      return result;\n    v3 = *(unsigned int *)(a1 + 8);\n  }\n  if ( !(_DWORD)v3 )\n    v3 = 1LL;\n  v5 = sub_2D3B0(v3 + a2);\n  v6 = *(unsigned int *)(a1 + 8);\n  v7 = (__m128i *)v5;\n  v8 = *(const void **)a1;\n  LODWORD(v5) = *(_DWORD *)(a1 + 12);\n  *(__m128i *)a1 = _mm_loadu_si128(v7);\n  v7->m128i_i64[0] = (__int64)v8;\n  LODWORD(v7->m128i_i64[1]) = v6;\n  HIDWORD(v7->m128i_i64[1]) = (_DWORD)v5;\n  *(_DWORD *)(a1 + 8) = v6;\n  if ( (_DWORD)v6 )\n    memcpy(*(void **)a1, v8, v6);\n  chunk_buffer_release(v7);\n  v9 = *(_DWORD *)(a1 + 12);\n  if ( v9 )\n    result = v9 - (*(_DWORD *)(a1 + 8) | (unsigned int)(*(_DWORD *)(a1 + 8) == 0));\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x2dcf0L", 
            "funcEndAddr": "0x2dda0L", 
            "funcName": "chunk_buffer_prepare_append"
        }, 
        {
            "decompiledFuncCode": "void chunkqueue_chunk_pool_clear()\n{\n  _QWORD *v0; // rdi\n  _QWORD *v1; // rbx\n  _QWORD *v2; // rdi\n  _QWORD *v3; // rbx\n  _QWORD *v4; // rdi\n  _QWORD *v5; // rbx\n\n  v0 = qword_2585B8;\n  if ( qword_2585B8 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*v0;\n      sub_2D210(v0);\n      v0 = v1;\n    }\n    while ( v1 );\n  }\n  v2 = qword_2585B0;\n  qword_2585B8 = 0LL;\n  if ( qword_2585B0 )\n  {\n    do\n    {\n      v3 = (_QWORD *)*v2;\n      sub_2D210(v2);\n      v2 = v3;\n    }\n    while ( v3 );\n  }\n  v4 = qword_2585A8;\n  qword_2585B0 = 0LL;\n  dword_258598 = 0;\n  if ( qword_2585A8 )\n  {\n    do\n    {\n      v5 = (_QWORD *)*v4;\n      sub_2D210(v4);\n      v4 = v5;\n    }\n    while ( v5 );\n  }\n  qword_2585A8 = 0LL;\n}\n", 
            "funcStartAddr": "0x2dda0L", 
            "funcEndAddr": "0x2de35L", 
            "funcName": "chunkqueue_chunk_pool_clear"
        }, 
        {
            "decompiledFuncCode": "void chunkqueue_chunk_pool_free()\n{\n  _QWORD *v0; // rdi\n  _QWORD *v1; // rbx\n\n  chunkqueue_chunk_pool_clear();\n  v0 = qword_2585A0;\n  if ( qword_2585A0 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*v0;\n      free(v0);\n      v0 = v1;\n    }\n    while ( v1 );\n  }\n  qword_2585A0 = 0LL;\n}\n", 
            "funcStartAddr": "0x2de40L", 
            "funcEndAddr": "0x2de75L", 
            "funcName": "chunkqueue_chunk_pool_free"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_reset(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rdi\n\n  v1 = a1;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  v2 = *(_QWORD **)a1;\n  if ( v2 )\n  {\n    do\n    {\n      *(_QWORD *)v1 = *v2;\n      sub_2D6B0(v2);\n      v2 = *(_QWORD **)v1;\n    }\n    while ( *(_QWORD *)v1 );\n  }\n  *(_QWORD *)(v1 + 16) = 0LL;\n  *(_QWORD *)(v1 + 24) = 0LL;\n  *(_DWORD *)(v1 + 48) = 0;\n}\n", 
            "funcStartAddr": "0x2de80L", 
            "funcEndAddr": "0x2dec4L", 
            "funcName": "chunkqueue_reset"
        }, 
        {
            "decompiledFuncCode": "int __fastcall chunkqueue_append_file_fd(_QWORD *a1, __int64 a2, int a3, __int64 a4, __int64 a5)\n{\n  int v5; // ebx\n  _QWORD *v6; // rax\n\n  v5 = a3;\n  if ( a5 <= 0 )\n  {\n    LODWORD(v6) = close(a3);\n  }\n  else\n  {\n    v6 = sub_2D520(a1, a2, a4, a5);\n    *((_DWORD *)v6 + 10) = v5;\n  }\n  return (signed int)v6;\n}\n", 
            "funcStartAddr": "0x2ded0L", 
            "funcEndAddr": "0x2def8L", 
            "funcName": "chunkqueue_append_file_fd"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall chunkqueue_append_file(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  _QWORD *result; // rax\n\n  if ( a4 > 0 )\n    result = sub_2D520(a1, a2, a3, a4);\n  return result;\n}\n", 
            "funcStartAddr": "0x2df00L", 
            "funcEndAddr": "0x2df12L", 
            "funcName": "chunkqueue_append_file"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_append_buffer(__int64 a1, __int64 a2)\n{\n  void ****v2; // rbx\n  unsigned int v3; // eax\n  __int64 v4; // rbp\n  __int64 result; // rax\n  void ***v6; // rax\n  void ****v7; // rdx\n  __m128i *v8; // rdi\n\n  v2 = (void ****)a1;\n  v3 = *(_DWORD *)(a2 + 8) - (*(_DWORD *)(a2 + 8) != 0);\n  v4 = v3;\n  if ( v3 <= 0x3FF\n    && (result = sub_2D7B0(*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), *(const void **)a2, v3), (_DWORD)result) )\n  {\n    *(_DWORD *)(a2 + 8) = 0;\n  }\n  else\n  {\n    v6 = sub_2D470(qword_2580D8);\n    v7 = *(void *****)(a1 + 8);\n    *v6 = 0LL;\n    v8 = (__m128i *)v6[2];\n    if ( !v7 )\n      v7 = v2;\n    *v7 = v6;\n    v2[2] = (void ***)((char *)v2[2] + v4);\n    v2[1] = v6;\n    result = buffer_move(v8, a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2df20L", 
            "funcEndAddr": "0x2df9eL", 
            "funcName": "chunkqueue_append_buffer"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_append_mem(__int64 a1, const void *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n  void ****v4; // rbx\n  signed __int64 result; // rax\n  void ***v6; // rax\n  void ****v7; // rdx\n  __int64 v8; // rdi\n\n  v3 = a3;\n  v4 = (void ****)a1;\n  if ( qword_2580D8 <= a3 || (result = sub_2D7B0(*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), a2, a3), !(_DWORD)result) )\n  {\n    v6 = sub_2D470(v3 + 1);\n    v7 = *(void *****)(a1 + 8);\n    *v6 = 0LL;\n    v8 = (__int64)v6[2];\n    if ( !v7 )\n      v7 = v4;\n    *v7 = v6;\n    v4[2] = (void ***)((char *)v4[2] + v3);\n    v4[1] = v6;\n    result = (signed __int64)buffer_copy_string_len(v8, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2dfa0L", 
            "funcEndAddr": "0x2e015L", 
            "funcName": "chunkqueue_append_mem"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_append_mem_min(void ****a1, const void *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n  void ****v4; // rbx\n  signed __int64 result; // rax\n  void ***v6; // r12\n  void ****v7; // rax\n  __int64 v8; // rdi\n\n  v3 = a3;\n  v4 = a1;\n  if ( qword_2580D8 <= a3 || (result = sub_2D7B0((__int64)a1[1], a1 + 2, a2, a3), !(_DWORD)result) )\n  {\n    v6 = (void ***)sub_2D360();\n    buffer_string_prepare_copy(v6[2], v3);\n    v7 = (void ****)a1[1];\n    *v6 = 0LL;\n    v8 = (__int64)v6[2];\n    if ( !v7 )\n      v7 = v4;\n    *v7 = v6;\n    v4[1] = v6;\n    v4[2] = (void ***)((char *)v4[2] + v3);\n    result = (signed __int64)buffer_copy_string_len(v8, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2e020L", 
            "funcEndAddr": "0x2e0abL", 
            "funcName": "chunkqueue_append_mem_min"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_append_chunkqueue(__int64 a1, __int64 *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rax\n  __int64 v4; // rdx\n\n  result = *a2;\n  if ( *a2 )\n  {\n    if ( *(_QWORD *)a1 )\n      **(_QWORD **)(a1 + 8) = result;\n    else\n      *(_QWORD *)a1 = result;\n    v3 = a2[1];\n    *a2 = 0LL;\n    a2[1] = 0LL;\n    *(_QWORD *)(a1 + 8) = v3;\n    result = a2[2];\n    v4 = a2[2] - a2[3];\n    a2[3] = result;\n    *(_QWORD *)(a1 + 16) += v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2e0b0L", 
            "funcEndAddr": "0x2e0fdL", 
            "funcName": "chunkqueue_append_chunkqueue"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall chunkqueue_prepend_buffer_open_sz(void ***a1, unsigned __int64 a2)\n{\n  void ***v2; // rax\n  bool v3; // zf\n\n  v2 = sub_2D470(a2);\n  v3 = *a1 == 0LL;\n  *v2 = *a1;\n  if ( v3 )\n    a1[1] = (void **)v2;\n  *a1 = (void **)v2;\n  return v2[2];\n}\n", 
            "funcStartAddr": "0x2e100L", 
            "funcEndAddr": "0x2e124L", 
            "funcName": "chunkqueue_prepend_buffer_open_sz"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall chunkqueue_prepend_buffer_open(void ***a1)\n{\n  void ***v1; // rax\n  bool v2; // zf\n\n  v1 = sub_2D470(qword_2580D8);\n  v2 = *a1 == 0LL;\n  *v1 = *a1;\n  if ( v2 )\n    a1[1] = (void **)v1;\n  *a1 = (void **)v1;\n  return v1[2];\n}\n", 
            "funcStartAddr": "0x2e130L", 
            "funcEndAddr": "0x2e158L", 
            "funcName": "chunkqueue_prepend_buffer_open"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_prepend_buffer_commit(_QWORD *a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  v1 = *(_DWORD *)(*(_QWORD *)(*a1 + 16LL) + 8LL);\n  result = v1 - (unsigned int)(v1 != 0);\n  a1[2] += result;\n  return result;\n}\n", 
            "funcStartAddr": "0x2e160L", 
            "funcEndAddr": "0x2e178L", 
            "funcName": "chunkqueue_prepend_buffer_commit"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall chunkqueue_append_buffer_open_sz(void ****a1, unsigned __int64 a2)\n{\n  void ***v2; // rax\n  void ****v3; // rdx\n\n  v2 = sub_2D470(a2);\n  v3 = (void ****)a1[1];\n  *v2 = 0LL;\n  if ( !v3 )\n    v3 = a1;\n  *v3 = v2;\n  a1[1] = v2;\n  return v2[2];\n}\n", 
            "funcStartAddr": "0x2e180L", 
            "funcEndAddr": "0x2e1abL", 
            "funcName": "chunkqueue_append_buffer_open_sz"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall chunkqueue_append_buffer_open(void ****a1)\n{\n  void ***v1; // rax\n  void ****v2; // rdx\n\n  v1 = sub_2D470(qword_2580D8);\n  v2 = (void ****)a1[1];\n  *v1 = 0LL;\n  if ( !v2 )\n    v2 = a1;\n  *v2 = v1;\n  a1[1] = v1;\n  return v1[2];\n}\n", 
            "funcStartAddr": "0x2e1b0L", 
            "funcEndAddr": "0x2e1dfL", 
            "funcName": "chunkqueue_append_buffer_open"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_append_buffer_commit(__int64 a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16LL) + 8LL);\n  result = v1 - (unsigned int)(v1 != 0);\n  *(_QWORD *)(a1 + 16) += result;\n  return result;\n}\n", 
            "funcStartAddr": "0x2e1e0L", 
            "funcEndAddr": "0x2e1f9L", 
            "funcName": "chunkqueue_append_buffer_commit"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall chunkqueue_get_memory(void ****a1, unsigned __int64 *a2)\n{\n  void ****v2; // rbx\n  unsigned __int64 v3; // rdi\n  void ***v4; // rax\n  void **v5; // rdx\n  unsigned __int64 v6; // rax\n  int v7; // ecx\n  void ***v8; // rax\n  void ****v9; // rdx\n  unsigned __int64 v10; // rdx\n  void **v11; // rax\n  int v12; // ecx\n  char *result; // rax\n\n  v2 = a1;\n  v3 = *a2;\n  if ( !*a2 )\n    v3 = (unsigned __int64)qword_2580D8 >> 1;\n  v4 = v2[1];\n  if ( !v4 || *((_DWORD *)v4 + 2) )\n    goto LABEL_16;\n  v5 = v4[2];\n  v6 = 0LL;\n  v7 = *((_DWORD *)v5 + 3);\n  if ( v7 )\n    v6 = v7 - (*((_DWORD *)v5 + 2) | (unsigned int)(*((_DWORD *)v5 + 2) == 0));\n  if ( v3 <= v6 )\n  {\n    *a2 = v6;\n    result = (char *)*v5 + *((_DWORD *)v5 + 2) - (unsigned int)(*((_DWORD *)v5 + 2) != 0);\n  }\n  else\n  {\nLABEL_16:\n    v8 = sub_2D470(v3);\n    v9 = (void ****)v2[1];\n    *v8 = 0LL;\n    if ( !v9 )\n      v9 = v2;\n    *v9 = v8;\n    v2[1] = v8;\n    v10 = 0LL;\n    v11 = v8[2];\n    v12 = *((_DWORD *)v11 + 3);\n    if ( v12 )\n      v10 = v12 - (*((_DWORD *)v11 + 2) | (unsigned int)(*((_DWORD *)v11 + 2) == 0));\n    *a2 = v10;\n    result = (char *)*v11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2e200L", 
            "funcEndAddr": "0x2e2c9L", 
            "funcName": "chunkqueue_get_memory"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_use_memory(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  _QWORD *v3; // rbx\n  __int64 **v4; // rdi\n  __int64 *v5; // r12\n  __int64 v6; // rdi\n  unsigned __int64 v7; // rax\n  int v8; // ecx\n  unsigned __int64 v9; // [rsp+8h] [rbp-20h]\n\n  v3 = (_QWORD *)a1;\n  v4 = *(__int64 ***)(a1 + 8);\n  v5 = v4[2];\n  if ( !a3 )\n  {\n    if ( *((_DWORD *)v5 + 2) > 1u )\n      return;\n    goto LABEL_11;\n  }\n  v9 = a3;\n  buffer_commit(v4[2], a3);\n  v3[2] += v9;\n  if ( v3[1] != a2 && a2 && !*(_DWORD *)(a2 + 8) )\n  {\n    v6 = *(_QWORD *)(a2 + 16);\n    v7 = 0LL;\n    v8 = *(_DWORD *)(v6 + 12);\n    if ( v8 )\n      v7 = v8 - (*(_DWORD *)(v6 + 8) | (unsigned int)(*(_DWORD *)(v6 + 8) == 0));\n    if ( v9 <= v7 )\n    {\n      buffer_append_string_len(v6, (const void *)*v5, *((_DWORD *)v5 + 2) - (unsigned int)(*((_DWORD *)v5 + 2) != 0));\n      v4 = (__int64 **)v3[1];\nLABEL_11:\n      sub_2D6B0(v4);\n      v3[1] = a2;\n      if ( a2 )\n        v3 = (_QWORD *)a2;\n      *v3 = 0LL;\n      return;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2e2d0L", 
            "funcEndAddr": "0x2e38bL", 
            "funcName": "chunkqueue_use_memory"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_set_tempdirs(__int64 a1, __int64 a2, __int64 a3)\n{\n  if ( !a3 )\n    a3 = qword_2580D0;\n  *(_QWORD *)(a1 + 32) = a2;\n  *(_DWORD *)(a1 + 48) = 0;\n  *(_QWORD *)(a1 + 40) = a3;\n}\n", 
            "funcStartAddr": "0x2e390L", 
            "funcEndAddr": "0x2e3abL", 
            "funcName": "chunkqueue_set_tempdirs"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_steal(_QWORD *a1, _QWORD **a2, signed __int64 a3)\n{\n  _QWORD *v3; // rbp\n  signed __int64 v4; // r12\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  signed __int64 v7; // rax\n  bool v8; // zf\n  _QWORD *v9; // rdx\n  int v10; // edx\n  __int64 v11; // rsi\n\n  if ( a3 <= 0 )\n    return;\n  v3 = a2;\n  v4 = a3;\n  v5 = *a2;\n  if ( !*a2 )\n    return;\n  while ( 1 )\n  {\n    v10 = *((_DWORD *)v5 + 2);\n    v11 = v5[3];\n    if ( v10 )\n      break;\n    v6 = v5[2];\n    v7 = *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0) - v11;\n    if ( v7 > v4 )\n    {\n      chunkqueue_append_mem((__int64)a1, (const void *)(*(_QWORD *)v6 + v11), v4);\n      v11 = v5[3];\n      goto LABEL_15;\n    }\nLABEL_5:\n    v8 = v3[1] == (_QWORD)v5;\n    *v3 = *v5;\n    if ( v8 )\n    {\n      v3[1] = 0LL;\n      if ( !v7 )\n      {\nLABEL_19:\n        sub_2D6B0(v5);\n        goto LABEL_10;\n      }\n    }\n    else if ( !v7 )\n    {\n      goto LABEL_19;\n    }\n    v9 = (_QWORD *)a1[1];\n    *v5 = 0LL;\n    if ( !v9 )\n      v9 = a1;\n    v4 -= v7;\n    *v9 = v5;\n    a1[2] += v7;\n    v3[3] += v7;\n    a1[1] = v5;\n    if ( v4 <= 0 )\n      return;\nLABEL_10:\n    v5 = (_QWORD *)*v3;\n    if ( !*v3 )\n      return;\n  }\n  v7 = v5[4] - v11;\n  if ( v4 >= v7 )\n    goto LABEL_5;\n  if ( v10 == 1 )\n  {\n    sub_2D5D0(a1, (__int64)v5, v4);\n    v11 = v5[3];\n  }\nLABEL_15:\n  v5[3] = v4 + v11;\n  v3[3] += v4;\n}\n", 
            "funcStartAddr": "0x2e3b0L", 
            "funcEndAddr": "0x2e4d2L", 
            "funcName": "chunkqueue_steal"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_append_cq_range(_QWORD *a1, __int64 *a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  _QWORD *v5; // rbx\n  __int64 v6; // r12\n  __int64 v7; // rsi\n  __int64 v8; // rax\n  signed __int64 v9; // rax\n  unsigned __int64 v10; // rcx\n  int v11; // er8\n  __int64 v12; // rdi\n  __int64 v13; // rax\n\n  v4 = *a2;\n  if ( a4 > 0 )\n  {\n    v5 = a1;\n    v6 = a4;\n    while ( 1 )\n    {\n      if ( !v4 )\n        return;\n      v11 = *(_DWORD *)(v4 + 8);\n      v12 = *(_QWORD *)(v4 + 24);\n      if ( !v11 )\n        break;\n      v8 = *(_QWORD *)(v4 + 32) - v12;\n      if ( v8 <= a3 )\n      {\nLABEL_17:\n        a3 -= v8;\n        goto LABEL_8;\n      }\n      v13 = v8 - a3;\n      v7 = *(_QWORD *)(v4 + 16);\n      if ( v13 > v6 )\n        v13 = v6;\n      v6 -= v13;\n      v10 = v13;\n      if ( v11 == 1 )\n      {\n        sub_2D520(v5, v7, v12 + a3, v13);\n        sub_2D240(v5[1], v4);\n        a3 = 0LL;\n        v4 = *(_QWORD *)v4;\n        if ( v6 <= 0 )\n          return;\n      }\n      else\n      {\nLABEL_7:\n        chunkqueue_append_mem((__int64)v5, (const void *)(*(_QWORD *)v7 + a3 + v12), v10);\n        a3 = 0LL;\nLABEL_8:\n        v4 = *(_QWORD *)v4;\n        if ( v6 <= 0 )\n          return;\n      }\n    }\n    v7 = *(_QWORD *)(v4 + 16);\n    v8 = *(_DWORD *)(v7 + 8) - (unsigned int)(*(_DWORD *)(v7 + 8) != 0) - v12;\n    if ( v8 <= a3 )\n      goto LABEL_17;\n    v9 = v8 - a3;\n    if ( v9 > v6 )\n      v9 = v6;\n    v10 = v9;\n    v6 -= v9;\n    goto LABEL_7;\n  }\n}\n", 
            "funcStartAddr": "0x2e4e0L", 
            "funcEndAddr": "0x2e5b5L", 
            "funcName": "chunkqueue_append_cq_range"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_mark_written(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // rbp\n  __int64 v3; // rbx\n  _QWORD *v4; // rdi\n  __int64 v5; // rsi\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n\n  v2 = a1;\n  a1[3] += a2;\n  v3 = a2;\n  v4 = (_QWORD *)*a1;\n  if ( v4 )\n  {\n    while ( 1 )\n    {\n      if ( *((_DWORD *)v4 + 2) )\n      {\n        v5 = v4[3];\n        v6 = v4[4] - v5;\n        if ( v6 > v3 )\n        {\nLABEL_8:\n          v4[3] = v3 + v5;\n          *v2 = v4;\n          return;\n        }\n      }\n      else\n      {\n        v5 = v4[3];\n        v6 = *(_DWORD *)(v4[2] + 8LL) - (unsigned int)(*(_DWORD *)(v4[2] + 8LL) != 0) - v5;\n        if ( v6 > v3 )\n          goto LABEL_8;\n      }\n      v7 = (_QWORD *)*v4;\n      v3 -= v6;\n      sub_2D6B0(v4);\n      if ( !v7 )\n        break;\n      v4 = v7;\n    }\n  }\n  v2[1] = 0LL;\n  *v2 = 0LL;\n}\n", 
            "funcStartAddr": "0x2e5c0L", 
            "funcEndAddr": "0x2e655L", 
            "funcName": "chunkqueue_mark_written"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_steal_with_tempfiles(__int64 **a1, _QWORD *a2, signed __int64 a3, _DWORD *a4)\n{\n  _QWORD *v4; // rax\n  _QWORD **v5; // rbx\n  __int64 **v6; // rbp\n  signed __int64 v7; // r15\n  signed __int64 v8; // r14\n  __int64 *v9; // rcx\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  __int64 *v12; // rdi\n  signed __int64 v13; // r14\n  void *v14; // rax\n  unsigned int v15; // edx\n  __int64 v16; // r8\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  __int64 v19; // rsi\n  _QWORD *v20; // rcx\n  __int64 v21; // rax\n  __int64 v22; // rdi\n  __int64 v23; // rsi\n  signed __int64 v24; // r8\n  signed __int64 v25; // rax\n  void *v26; // rsi\n  __int64 v27; // rax\n  _DWORD *v28; // rax\n  _QWORD *v29; // r13\n  __int64 *v30; // rdx\n  __int64 v31; // rdx\n  __int64 v32; // ST10_8\n  void *v34; // rsi\n  __int64 v35; // r9\n  _DWORD *v36; // [rsp+8h] [rbp-160h]\n  int count; // [rsp+10h] [rbp-158h]\n  struct iovec iovec; // [rsp+20h] [rbp-148h]\n  __int64 v39; // [rsp+30h] [rbp-138h]\n  unsigned __int64 v40; // [rsp+128h] [rbp-40h]\n\n  v40 = __readfsqword(0x28u);\n  v36 = a4;\n  if ( a3 <= 0 )\n    return 0LL;\n  v4 = (_QWORD *)*a2;\n  v5 = (_QWORD **)a2;\n  if ( !*a2 )\n    return 0LL;\n  v6 = a1;\n  v7 = a3;\n  while ( *((_DWORD *)v4 + 2) )\n  {\n    v8 = v4[4] - v4[3];\n    if ( v8 > v7 )\n      v8 = v7;\n    v7 -= v8;\n    chunkqueue_steal(v6, v5, v8);\n    if ( v7 <= 0 )\n      return 0LL;\nLABEL_7:\n    v4 = *v5;\n    if ( !*v5 )\n      return 0LL;\n  }\n  v9 = *v6;\n  if ( !*v6 || *((_DWORD *)v9 + 2) )\n  {\nLABEL_16:\n    v20 = *v5;\n    if ( !*v5 || (v13 = 0LL, v15 = 0, *((_DWORD *)v20 + 2)) )\n    {\nLABEL_18:\n      v21 = 0LL;\nLABEL_30:\n      chunkqueue_mark_written(v5, v21);\n      if ( v7 <= 0 )\n        return 0LL;\n      goto LABEL_7;\n    }\n  }\n  else\n  {\n    v10 = v9[2];\n    v11 = v9[3];\n    v12 = &v39;\n    v13 = *(_DWORD *)(v10 + 8) - (unsigned int)(*(_DWORD *)(v10 + 8) != 0) - v11;\n    v14 = (void *)(*(_QWORD *)v10 + v11);\n    v15 = 1;\n    iovec.iov_len = v13;\n    iovec.iov_base = v14;\n    while ( 1 )\n    {\n      v9 = (__int64 *)*v9;\n      if ( !v9 )\n        break;\n      if ( !*((_DWORD *)v9 + 2) )\n      {\n        v16 = v9[2];\n        v17 = v9[3];\n        ++v15;\n        v12 += 2;\n        v18 = *(_DWORD *)(v16 + 8) - (unsigned int)(*(_DWORD *)(v16 + 8) != 0) - v17;\n        v19 = *(_QWORD *)v16 + v17;\n        v13 += v18;\n        *(v12 - 1) = v18;\n        *(v12 - 2) = v19;\n        if ( v15 != 16 )\n          continue;\n      }\n      if ( (unsigned int)sub_17819(v6, (__int64)v36) )\n        return 0xFFFFFFFFLL;\n      goto LABEL_16;\n    }\n    v20 = *v5;\n    if ( !*v5 || *((_DWORD *)v20 + 2) )\n      goto LABEL_24;\n  }\n  v22 = v20[2];\n  v23 = v20[3];\n  v24 = v7;\n  v25 = *(_DWORD *)(v22 + 8) - (unsigned int)(*(_DWORD *)(v22 + 8) != 0) - v23;\n  if ( v25 <= v7 )\n  {\n    while ( 1 )\n    {\n      v34 = (void *)(*(_QWORD *)v22 + v23);\n      v35 = v15++;\n      v35 *= 16LL;\n      v24 -= v25;\n      *(size_t *)((char *)&iovec.iov_len + v35) = v25;\n      *(void **)((char *)&iovec.iov_base + v35) = v34;\n      if ( !v24 )\n        break;\n      if ( v15 == 16 )\n        goto LABEL_24;\n      v20 = (_QWORD *)*v20;\n      if ( !v20 || *((_DWORD *)v20 + 2) )\n        break;\n      v22 = v20[2];\n      v23 = v20[3];\n      v25 = *(_DWORD *)(v22 + 8) - (unsigned int)(*(_DWORD *)(v22 + 8) != 0) - v23;\n      if ( v25 > v24 )\n        goto LABEL_22;\n    }\n  }\n  else\n  {\nLABEL_22:\n    v26 = (void *)(*(_QWORD *)v22 + v23);\n    v27 = v15++;\n    v27 *= 16LL;\n    *(size_t *)((char *)&iovec.iov_len + v27) = v24;\n    *(void **)((char *)&iovec.iov_base + v27) = v26;\n  }\n  if ( !v15 )\n    goto LABEL_18;\nLABEL_24:\n  count = v15;\n  v28 = sub_2D9A0((__int64)v6, v36);\n  v29 = v28;\n  if ( v28 )\n  {\n    v21 = pwritev64(v28[10], &iovec, count, *((_QWORD *)v28 + 4));\n    if ( v21 >= 0 )\n    {\n      v30 = v6[2];\n      v29[4] += v21;\n      v31 = (__int64)v30 + v21;\n      v6[2] = (__int64 *)v31;\n      if ( v13 )\n      {\n        if ( v21 < v13 )\n        {\n          v21 = sub_178B7(v6, v29, v21, (__int64)v36);\n          if ( v21 < 0 )\n            return 0xFFFFFFFFLL;\n        }\n        else\n        {\n          v6[3] = (__int64 *)((char *)v6[3] - v13);\n          v6[2] = (__int64 *)(v31 - v13);\n          v32 = v21 - v13;\n          chunkqueue_mark_written(v6, v13);\n          v21 = v32;\n        }\n      }\n      v7 -= v21;\n      goto LABEL_30;\n    }\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x2e660L", 
            "funcEndAddr": "0x2e977L", 
            "funcName": "chunkqueue_steal_with_tempfiles"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_remove_finished_chunks(void **a1)\n{\n  void **v1; // rbx\n  _QWORD *v2; // rdi\n  bool v3; // zf\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 )\n  {\n    do\n    {\n      if ( *((_DWORD *)v2 + 2) )\n      {\n        if ( v2[3] != v2[4] )\n          return;\n      }\n      else if ( v2[3] != *(_DWORD *)(v2[2] + 8LL) - (*(_DWORD *)(v2[2] + 8LL) != 0) )\n      {\n        return;\n      }\n      v3 = *v2 == 0LL;\n      *v1 = (void *)*v2;\n      if ( v3 )\n        v1[1] = 0LL;\n      sub_2D6B0(v2);\n      v2 = *v1;\n    }\n    while ( *v1 );\n  }\n}\n", 
            "funcStartAddr": "0x2e980L", 
            "funcEndAddr": "0x2e9e2L", 
            "funcName": "chunkqueue_remove_finished_chunks"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_update_file(_QWORD **a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // edx\n\n  v3 = *(_QWORD *)(a2 + 32);\n  a1[2] = (_QWORD *)((char *)a1[2] + a3);\n  result = a3 + v3;\n  v5 = *(_DWORD *)(a2 + 8);\n  *(_QWORD *)(a2 + 32) = result;\n  if ( !v5 )\n    result = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(a2 + 16) + 8LL) != 0);\n  if ( *(_QWORD *)(a2 + 24) == result )\n    result = chunkqueue_remove_empty_chunks(a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x2e9f0L", 
            "funcEndAddr": "0x2ea23L", 
            "funcName": "chunkqueue_update_file"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_append_mem_to_tempfile(_QWORD *a1, char *a2, size_t a3, __int64 a4)\n{\n  _DWORD *v4; // r14\n  char *v5; // r13\n  size_t v6; // rbp\n  ssize_t v7; // rax\n  _DWORD *v8; // rax\n  __int64 v9; // rbx\n  signed __int64 result; // rax\n  int v11; // eax\n  int v12; // eax\n\n  v4 = (_DWORD *)a4;\n  v5 = a2;\n  v6 = a3;\n  if ( !*a1 || *(_DWORD *)(*a1 + 8LL) || (v12 = sub_17819(a1, a4)) == 0 )\n  {\n    while ( 1 )\n    {\n      v8 = sub_2D9A0((__int64)a1, v4);\n      v9 = (__int64)v8;\n      if ( !v8 )\n        break;\n      v7 = pwrite64(v8[10], v5, v6, *((_QWORD *)v8 + 4));\n      if ( v7 == v6 )\n      {\n        *(_QWORD *)(v9 + 32) += v6;\n        result = 0LL;\n        a1[2] += v6;\n        return result;\n      }\n      if ( v7 < 0 )\n      {\n        v11 = sub_17976((__int64)a1, v4, v9);\n        if ( !v6 || !v11 )\n          return 0xFFFFFFFFLL;\n      }\n      else\n      {\n        a1[2] += v7;\n        *(_QWORD *)(v9 + 32) += v7;\n        v5 += v7;\n        v6 -= v7;\n      }\n    }\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x2ea30L", 
            "funcEndAddr": "0x2eaebL", 
            "funcName": "chunkqueue_append_mem_to_tempfile"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_append_splice_pipe_tempfile(_QWORD *a1, unsigned int a2, unsigned int a3, __int64 a4)\n{\n  __int64 v4; // r14\n  _DWORD *v5; // r13\n  unsigned int v6; // er12\n  signed __int64 v7; // rbp\n  _DWORD *v8; // rax\n  __int64 v9; // rbx\n  int v10; // edx\n  ssize_t v11; // rax\n  unsigned __int64 v12; // rt1\n  signed __int64 result; // rax\n  int *v14; // rax\n  __int64 v15; // rax\n  int v16; // eax\n  __int64 v17; // rax\n  int v18; // [rsp+Ch] [rbp-4Ch]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+18h] [rbp-40h]\n\n  v4 = (__int64)a1;\n  v5 = (_DWORD *)a4;\n  v6 = a3;\n  v20 = __readfsqword(0x28u);\n  if ( *a1 && !*(_DWORD *)(*a1 + 8LL) )\n    goto LABEL_20;\nLABEL_3:\n  v7 = 0LL;\n  while ( 1 )\n  {\n    a1 = (_QWORD *)v4;\n    v8 = sub_2D9A0(v4, v5);\n    v9 = (__int64)v8;\n    if ( !v8 )\n    {\n      v7 = -*__errno_location();\n      goto LABEL_7;\n    }\n    v10 = v8[10];\n    a1 = (_QWORD *)a2;\n    v19 = *((_QWORD *)v8 + 4);\n    v11 = splice(a2, 0LL, v10, &v19, v6, 3u);\n    if ( v6 == v11 )\n    {\n      *(_QWORD *)(v9 + 32) += v6;\n      *(_QWORD *)(v4 + 16) += v6;\n      v7 += v6;\n      goto LABEL_7;\n    }\n    if ( v11 >= 0 )\n    {\n      *(_QWORD *)(v4 + 16) += v11;\n      *(_QWORD *)(v9 + 32) += v11;\n      v7 += v11;\n      v6 -= v11;\n      goto LABEL_12;\n    }\n    v14 = __errno_location();\n    if ( *v14 == 11 )\n    {\n      if ( *(_DWORD *)(v9 + 8) )\n        v15 = *(_QWORD *)(v9 + 32);\n      else\n        v15 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v9 + 16) + 8LL) != 0);\n      if ( *(_QWORD *)(v9 + 24) == v15 )\n      {\n        a1 = (_QWORD *)v4;\n        chunkqueue_remove_empty_chunks((_QWORD **)v4);\n      }\n      goto LABEL_7;\n    }\n    if ( *v14 == 22 )\n      break;\n    a1 = (_QWORD *)v4;\n    v18 = *v14;\n    if ( !(unsigned int)sub_17976(v4, v5, v9) )\n    {\n      v7 = -v18;\n      goto LABEL_7;\n    }\nLABEL_12:\n    if ( !v6 )\n    {\n      v7 = -5LL;\n      goto LABEL_7;\n    }\n  }\n  a1 = (_QWORD *)v4;\n  v7 += v6;\n  v17 = sub_17A7B(v4, a2, v6, (__int64)v5);\n  if ( v17 )\n    v7 = v17;\nLABEL_7:\n  while ( 1 )\n  {\n    v12 = __readfsqword(0x28u);\n    a4 = v12 ^ v20;\n    result = v7;\n    if ( v12 == v20 )\n      return result;\nLABEL_20:\n    v16 = sub_17819(a1, a4);\n    v7 = v16;\n    if ( !v16 )\n      goto LABEL_3;\n  }\n}\n", 
            "funcStartAddr": "0x2eaf0L", 
            "funcEndAddr": "0x2ec9eL", 
            "funcName": "chunkqueue_append_splice_pipe_tempfile"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_append_splice_sock_tempfile(_QWORD *a1, int a2, unsigned int a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  ssize_t v5; // rax\n  signed __int64 result; // rax\n  signed __int64 v7; // ST08_8\n\n  if ( fdout == -1 )\n    return -22LL;\n  v4 = a4;\n  v5 = splice(a2, 0LL, fdout, 0LL, a3, 3u);\n  if ( v5 <= 0 )\n    return -22LL;\n  result = chunkqueue_append_splice_pipe_tempfile(a1, pipedes[0], v5, v4);\n  if ( result < 0 )\n  {\n    v7 = result;\n    sub_177A4();\n    result = v7;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2eca0L", 
            "funcEndAddr": "0x2ed29L", 
            "funcName": "chunkqueue_append_splice_sock_tempfile"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall chunkqueue_compact_mem_offset(__int64 *a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rsi\n  __int64 result; // rax\n  __int64 v4; // r12\n  size_t v5; // rbp\n  _BYTE *v6; // rdx\n\n  v1 = *a1;\n  v2 = *(_QWORD *)(*a1 + 24);\n  if ( v2 )\n  {\n    result = *(unsigned int *)(v1 + 8);\n    if ( !(_DWORD)result )\n    {\n      v4 = *(_QWORD *)(v1 + 16);\n      v5 = *(_DWORD *)(v4 + 8) - (unsigned int)(*(_DWORD *)(v4 + 8) != 0) - v2;\n      memmove(*(void **)v4, (const void *)(*(_QWORD *)v4 + v2), v5);\n      v6 = *(_BYTE **)v4;\n      result = (unsigned int)v5;\n      *(_QWORD *)(v1 + 24) = 0LL;\n      v6[(unsigned int)v5] = 0;\n      *(_DWORD *)(v4 + 8) = v5 + 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2ed30L", 
            "funcEndAddr": "0x2ed93L", 
            "funcName": "chunkqueue_compact_mem_offset"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_compact_mem(__int64 *a1, unsigned __int64 a2)\n{\n  _QWORD **v2; // r13\n  __int64 v3; // r14\n  unsigned int v4; // eax\n  unsigned __int64 v5; // rbx\n  int v6; // edx\n  unsigned __int64 v7; // r12\n  _QWORD *v8; // rbp\n  __int64 v9; // rax\n  __int64 v10; // rsi\n  unsigned __int64 i; // rbx\n  void ***v12; // rax\n  bool v13; // zf\n  __int64 v14; // rax\n\n  v2 = (_QWORD **)*a1;\n  v3 = *(_QWORD *)(*a1 + 16);\n  v4 = *(_DWORD *)(v3 + 8);\n  v5 = *(_DWORD *)(v3 + 8) - (unsigned int)(v4 != 0) - *(_QWORD *)(*a1 + 24);\n  if ( v5 >= a2 )\n    return;\n  v6 = *(_DWORD *)(v3 + 12);\n  if ( *(unsigned int *)(v3 + 12) <= a2 )\n  {\n    v12 = sub_2D470(a2 + 1);\n    v13 = *a1 == 0;\n    *v12 = (void **)*a1;\n    if ( v13 )\n      a1[1] = (__int64)v12;\n    v3 = (__int64)v12[2];\n    *a1 = (__int64)v12;\n    buffer_append_string_len(v3, (char *)v2[3] + *v2[2], v5);\n    v14 = *a1;\n    *(_QWORD *)*a1 = *v2;\n    if ( !*v2 )\n      a1[1] = v14;\n    v7 = a2 - v5;\n    sub_2D6B0(v2);\n    v2 = (_QWORD **)*a1;\n    goto LABEL_5;\n  }\n  if ( v6 )\n  {\n    v7 = a2 - v5;\n    if ( a2 - v5 > v6 - ((v4 == 0) | v4) )\n      goto LABEL_16;\nLABEL_5:\n    if ( !v7 )\n      return;\n    goto LABEL_6;\n  }\n  v7 = a2 - v5;\n  if ( a2 - v5 <= 0 )\n    goto LABEL_5;\nLABEL_16:\n  chunkqueue_compact_mem_offset(a1);\nLABEL_6:\n  v8 = *v2;\n  if ( *v2 )\n  {\n    v9 = v8[2];\n    v10 = v8[3];\n    for ( i = *(_DWORD *)(v9 + 8) - (unsigned int)(*(_DWORD *)(v9 + 8) != 0) - v10;\n          v7 >= i;\n          i = *(_DWORD *)(v9 + 8) - (unsigned int)(*(_DWORD *)(v9 + 8) != 0) - v10 )\n    {\n      buffer_append_string_len(v3, (const void *)(*(_QWORD *)v9 + v10), i);\n      *v2 = (_QWORD *)*v8;\n      if ( *v8 )\n      {\n        sub_2D6B0(v8);\n        v7 -= i;\n        if ( !v7 )\n          return;\n      }\n      else\n      {\n        a1[1] = (__int64)v2;\n        sub_2D6B0(v8);\n        v7 -= i;\n        if ( !v7 )\n          return;\n      }\n      v8 = *v2;\n      if ( !*v2 )\n        return;\n      v9 = v8[2];\n      v10 = v8[3];\n    }\n    buffer_append_string_len(v3, (const void *)(*(_QWORD *)v9 + v10), v7);\n    v8[3] += v7;\n  }\n}\n", 
            "funcStartAddr": "0x2eda0L", 
            "funcEndAddr": "0x2ef79L", 
            "funcName": "chunkqueue_compact_mem"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall chunkqueue_open_file_chunk@<rax>(__int64 *a1@<rdi>, _DWORD *a2@<rsi>, __int64 a3@<r8>, int a4@<r13d>)\n{\n  return sub_2D830(*a1, a2, a3, a4);\n}\n", 
            "funcStartAddr": "0x2ef80L", 
            "funcEndAddr": "0x2ef88L", 
            "funcName": "chunkqueue_open_file_chunk"
        }, 
        {
            "decompiledFuncCode": "void __fastcall chunkqueue_small_resp_optim(__int64 a1)\n{\n  _QWORD *v1; // r12\n  __int64 v2; // rbx\n  __int64 v3; // rdx\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // r13\n  int v6; // ecx\n  __int64 v7; // r15\n  _BYTE *v8; // r14\n  bool v9; // al\n  ssize_t v10; // rax\n  void *v11; // rdi\n  void ***v12; // rax\n  unsigned __int64 *v13; // rax\n  unsigned int v14; // er14\n\n  v1 = *(_QWORD **)a1;\n  v2 = *(_QWORD *)(a1 + 8);\n  if ( v2 == **(_QWORD **)a1 && *(_DWORD *)(v2 + 8) == 1 && *(_DWORD *)(v2 + 40) >= 0 )\n  {\n    v3 = v1[2];\n    v4 = 0LL;\n    v5 = *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24);\n    v6 = *(_DWORD *)(v3 + 12);\n    if ( v6 )\n      v4 = v6 - (*(_DWORD *)(v3 + 8) | (unsigned int)(*(_DWORD *)(v3 + 8) == 0));\n    if ( v5 > v4 )\n    {\n      v12 = sub_2D470(v5 + 1);\n      *v1 = v12;\n      v3 = (__int64)v12[2];\n      v1 = v12;\n    }\n    *v1 = 0LL;\n    *(_QWORD *)(a1 + 8) = v1;\n    v7 = 0LL;\n    v8 = buffer_extend(v3, v5);\n    do\n    {\n      v10 = pread64(*(_DWORD *)(v2 + 40), &v8[v7], v5, v7 + *(_QWORD *)(v2 + 24));\n      if ( v10 > 0 )\n      {\n        v7 += v10;\n        v5 -= v10;\n        v9 = v5 != 0;\n      }\n      else\n      {\n        v9 = *__errno_location() == 4;\n      }\n    }\n    while ( v9 );\n    if ( !v5 )\n    {\n      v11 = (void *)v2;\nLABEL_16:\n      sub_2D6B0(v11);\n      return;\n    }\n    v13 = (unsigned __int64 *)v1[2];\n    *(_QWORD *)(a1 + 8) = v2;\n    v14 = v7 + (_DWORD)v8 - *v13;\n    *(_BYTE *)(*v13 + v14) = 0;\n    *((_DWORD *)v13 + 2) = v14 + 1;\n    *v1 = v2;\n    if ( v7 )\n    {\n      *(_QWORD *)(v2 + 24) += v7;\n    }\n    else if ( *(_QWORD **)a1 != v1 )\n    {\n      **(_QWORD **)a1 = v2;\n      v11 = v1;\n      goto LABEL_16;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x2ef90L", 
            "funcEndAddr": "0x2f0f4L", 
            "funcName": "chunkqueue_small_resp_optim"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_peek_data(__int64 *a1, void **a2, int *a3, _DWORD *a4, __int64 a5)\n{\n  __int64 v5; // r12\n  char *v6; // r14\n  int v7; // er13\n  int *v8; // rbp\n  size_t v9; // rdx\n  int v10; // eax\n  signed __int64 i; // rbx\n  __off64_t v12; // r15\n  __int64 v13; // rcx\n  __int64 v14; // rsi\n  const void *v15; // rsi\n  ssize_t v16; // rax\n  const void **v18; // [rsp+0h] [rbp-48h]\n  _DWORD *v19; // [rsp+8h] [rbp-40h]\n\n  v5 = *a1;\n  v6 = (char *)*a2;\n  v7 = *a3;\n  *a3 = 0;\n  if ( !v5 )\n    return 0LL;\n  v8 = a3;\n  v19 = a4;\n  v18 = (const void **)a2;\n  v9 = 0LL;\nLABEL_3:\n  v10 = *(_DWORD *)(v5 + 8);\n  for ( i = (unsigned int)(v7 - v9); !v10; i = (unsigned int)(v7 - v9) )\n  {\n    v13 = *(_QWORD *)(v5 + 16);\n    v14 = *(_QWORD *)(v5 + 24);\n    if ( (unsigned int)i > *(_DWORD *)(v13 + 8) - (*(_DWORD *)(v13 + 8) != 0) - (unsigned int)v14 )\n      LODWORD(i) = *(_DWORD *)(v13 + 8) - (*(_DWORD *)(v13 + 8) != 0) - v14;\n    v15 = (const void *)(*(_QWORD *)v13 + v14);\n    if ( (_DWORD)v9 )\n    {\n      memcpy(&v6[v9], v15, (unsigned int)i);\n      LODWORD(v9) = *v8;\n    }\n    else\n    {\n      *v18 = v15;\n    }\n    v9 = (unsigned int)(i + v9);\n    *v8 = v9;\nLABEL_9:\n    if ( v7 == (_DWORD)v9 )\n      return 0LL;\n    v5 = *(_QWORD *)v5;\n    if ( !v5 )\n      return 0LL;\n    if ( !(_DWORD)v9 || *v18 == v6 )\n      goto LABEL_3;\n    memcpy(v6, *v18, v9);\n    v9 = (unsigned int)*v8;\n    v10 = *(_DWORD *)(v5 + 8);\n    *v18 = v6;\n  }\n  if ( v10 != 1 )\n    return 0xFFFFFFFFLL;\n  if ( *(_DWORD *)(v5 + 40) < 0 )\n  {\n    if ( !(unsigned int)sub_2D830(v5, v19, a5, v7) )\n    {\n      v9 = (unsigned int)*v8;\n      goto LABEL_6;\n    }\n    return 0xFFFFFFFFLL;\n  }\nLABEL_6:\n  v12 = *(_QWORD *)(v5 + 24);\n  if ( i > *(_QWORD *)(v5 + 32) - v12 )\n    i = *(_QWORD *)(v5 + 32) - v12;\n  if ( !i )\n    goto LABEL_9;\n  while ( 1 )\n  {\n    v16 = pread64(*(_DWORD *)(v5 + 40), &v6[v9], i, v12);\n    if ( v16 != -1 )\n      break;\n    if ( *__errno_location() != 4 )\n      goto LABEL_30;\n    v9 = (unsigned int)*v8;\n  }\n  if ( v16 > 0 )\n  {\n    v9 = (unsigned int)(*v8 + v16);\n    *v8 = v9;\n    goto LABEL_9;\n  }\nLABEL_30:\n  log_perror(v19, \"chunk.c\", 1604LL, (__int64)\"read(\\\"%s\\\")\", **(_QWORD **)(v5 + 16), v18);\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x2f100L", 
            "funcEndAddr": "0x2f2c0L", 
            "funcName": "chunkqueue_peek_data"
        }, 
        {
            "decompiledFuncCode": "ssize_t __usercall chunkqueue_write_chunk@<rax>(int fd@<edi>, _DWORD *a2@<rdx>, size_t *a3@<rsi>, __int64 a4@<r8>, int a5@<r13d>, __int64 a6@<r15>)\n{\n  size_t v6; // rbp\n  int v7; // eax\n  ssize_t v8; // rbx\n  ssize_t result; // rax\n  signed __int64 v10; // r13\n  int v11; // esi\n  size_t v12; // rcx\n  int *v13; // r14\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  const void *v16; // r13\n  char *buf; // [rsp+8h] [rbp-50h]\n  __off64_t offset; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+18h] [rbp-40h]\n\n  v6 = *a3;\n  v19 = __readfsqword(0x28u);\n  v7 = *(_DWORD *)(v6 + 8);\n  if ( v7 )\n  {\n    if ( v7 != 1 )\n    {\n      *__errno_location() = 22;\nLABEL_4:\n      v8 = -1LL;\n      goto LABEL_5;\n    }\n    a6 = (__int64)a2;\n    if ( (unsigned int)sub_2D830(v6, a2, a4, a5) )\n      goto LABEL_4;\n    v8 = 0LL;\n    v10 = *(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24);\n    if ( *(_QWORD *)(v6 + 32) != *(_QWORD *)(v6 + 24) )\n    {\n      v11 = *(_DWORD *)(v6 + 40);\n      v12 = 0x7FFFFFFFLL;\n      if ( v10 <= 0x7FFFFFFF )\n        v12 = *(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24);\n      offset = *(_QWORD *)(v6 + 24);\n      v8 = sendfile64(fd, v11, &offset, v12);\n      if ( v8 < 0 )\n      {\n        v13 = __errno_location();\n        if ( !((*v13 - 22) & 0xFFFFFFEF) )\n        {\n          buf = sub_2D280((_QWORD *)v6, v10);\n          if ( !buf )\n            goto LABEL_22;\n          while ( 1 )\n          {\n            v8 = write(fd, buf, v10);\n            if ( v8 != -1 )\n              break;\n            if ( *v13 != 4 )\n              goto LABEL_4;\n          }\n        }\n      }\n    }\n  }\n  else\n  {\n    v14 = *(_QWORD *)(v6 + 16);\n    v15 = *(_QWORD *)(v6 + 24);\n    v16 = (const void *)(v15 + *(_QWORD *)v14);\n    v6 = *(_DWORD *)(v14 + 8) - (unsigned int)(*(_DWORD *)(v14 + 8) != 0) - v15;\n    do\n      v8 = write(fd, v16, v6);\n    while ( v8 == -1 && *__errno_location() == 4 );\n  }\nLABEL_5:\n  while ( 1 )\n  {\n    result = v8;\n    if ( __readfsqword(0x28u) == v19 )\n      break;\nLABEL_22:\n    v8 = sub_17B5C(fd, v6, a6);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2f2c0L", 
            "funcEndAddr": "0x2f445L", 
            "funcName": "chunkqueue_write_chunk"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall chunkqueue_write_chunk_to_pipe@<rax>(int fdout@<edi>, _DWORD *a2@<rdx>, size_t *a3@<rsi>, __int64 a4@<r8>, int a5@<r13d>, __int64 a6@<r15>)\n{\n  __int64 v6; // rbx\n  __int64 result; // rax\n  int v8; // edx\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v10; // [rsp+8h] [rbp-20h]\n\n  v6 = *a3;\n  v10 = __readfsqword(0x28u);\n  if ( *(_DWORD *)(v6 + 8) != 1 )\n    return chunkqueue_write_chunk(fdout, a2, a3, a4, a5, a6);\n  v9 = *(_QWORD *)(v6 + 24);\n  v8 = sub_2D830(v6, a2, a4, a5);\n  result = -1LL;\n  if ( !v8 )\n    result = splice(*(_DWORD *)(v6 + 40), &v9, fdout, 0LL, *(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24), 2u);\n  return result;\n}\n", 
            "funcStartAddr": "0x2f450L", 
            "funcEndAddr": "0x2f4d4L", 
            "funcName": "chunkqueue_write_chunk_to_pipe"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall chunkqueue_read_data(__int64 *a1, void *a2, int a3, _DWORD *a4, __int64 a5)\n{\n  int v5; // ebx\n  __int64 v6; // rbx\n  char n[12]; // [rsp+Ch] [rbp-2Ch]\n  unsigned __int64 v9; // [rsp+18h] [rbp-20h]\n\n  v5 = a3;\n  *(_QWORD *)&n[4] = a2;\n  *(_DWORD *)n = a3;\n  v9 = __readfsqword(0x28u);\n  if ( (signed int)chunkqueue_peek_data(a1, (void **)&n[4], (int *)n, a4, a5) < 0 || *(_DWORD *)n != v5 )\n    return 0xFFFFFFFFLL;\n  v6 = *(unsigned int *)n;\n  if ( *(void **)&n[4] != a2 )\n    memcpy(a2, *(const void **)&n[4], *(unsigned int *)n);\n  chunkqueue_mark_written(a1, v6);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x2f4e0L", 
            "funcEndAddr": "0x2f574L", 
            "funcName": "chunkqueue_read_data"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall chunkqueue_read_squash(__int64 *a1, _DWORD *a2)\n{\n  signed __int64 v2; // rbp\n  __int64 v3; // rax\n  __int64 *v4; // rbx\n  void ***v5; // rax\n  void ***v6; // r12\n  __int64 v7; // rax\n  __int64 v8; // r8\n  void **v9; // rdx\n  int v10; // eax\n  __int64 *v11; // rdi\n  _QWORD *v12; // rax\n  void **result; // rax\n  unsigned int v14; // [rsp+Ch] [rbp-3Ch]\n  __int64 v15; // [rsp+10h] [rbp-38h]\n  unsigned __int64 v16; // [rsp+18h] [rbp-30h]\n\n  v2 = a1[2] - a1[3];\n  v16 = __readfsqword(0x28u);\n  if ( v2 > 4294967294LL )\n    return 0LL;\n  v3 = *a1;\n  v4 = a1;\n  if ( *a1 && !*(_QWORD *)v3 && !*(_DWORD *)(v3 + 8) )\n    return *(void ***)(v3 + 16);\n  v5 = sub_2D470((unsigned int)(v2 + 1));\n  v6 = v5;\n  v7 = (__int64)*v5[2];\n  v14 = v2;\n  v15 = v7;\n  if ( (signed int)chunkqueue_peek_data(a1, (void **)&v15, (int *)&v14, a2, v8) >= 0 )\n  {\n    v9 = v6[2];\n    v10 = v14 + 1;\n    *((_BYTE *)*v9 + v14) = 0;\n    v11 = (__int64 *)*a1;\n    *((_DWORD *)v9 + 2) = v10;\n    v4[1] = 0LL;\n    if ( v11 )\n    {\n      do\n      {\n        *v4 = *v11;\n        sub_2D6B0(v11);\n        v11 = (__int64 *)*v4;\n      }\n      while ( *v4 );\n      v12 = (_QWORD *)v4[1];\n      *v6 = 0LL;\n      if ( v12 )\n        goto LABEL_8;\n    }\n    else\n    {\n      *v6 = 0LL;\n    }\n    v12 = v4;\nLABEL_8:\n    *v12 = v6;\n    result = v6[2];\n    v4[1] = (__int64)v6;\n    return result;\n  }\n  sub_2D6B0(v6);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x2f580L", 
            "funcEndAddr": "0x2f6bdL", 
            "funcName": "chunkqueue_read_squash"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_2F6C0(__int64 a1, unsigned __int64 a2)\n{\n  signed __int64 v2; // rax\n  char v3; // dl\n  int v4; // er8\n  __int64 v6; // [rsp+0h] [rbp-28h]\n  __int16 v7; // [rsp+16h] [rbp-12h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  v7 = 2573;\n  v2 = 21LL;\n  do\n  {\n    v3 = a2;\n    a2 >>= 4;\n    v4 = v2;\n    *((_BYTE *)&v6 + v2--) = a0123456789abcd_3[v3 & 0xF];\n  }\n  while ( a2 );\n  chunkqueue_append_mem(a1, (char *)&v6 + v4, 24LL - v4);\n  return __readfsqword(0x28u) ^ v8;\n}\n", 
            "funcStartAddr": "0x2f6c0L", 
            "funcEndAddr": "0x2f73bL", 
            "funcName": "sub_2F6C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_2F740(_QWORD *a1, unsigned __int64 a2, __int64 a3)\n{\n  signed __int64 v3; // rax\n  char v4; // r8\n  int v5; // er10\n  __int64 v7; // [rsp+0h] [rbp-28h]\n  __int16 v8; // [rsp+16h] [rbp-12h]\n  unsigned __int64 v9; // [rsp+18h] [rbp-10h]\n\n  v9 = __readfsqword(0x28u);\n  v8 = 2573;\n  v3 = 21LL;\n  do\n  {\n    v4 = a2;\n    a2 >>= 4;\n    v5 = v3;\n    *((_BYTE *)&v7 + v3--) = a0123456789abcd_3[v4 & 0xF];\n  }\n  while ( a2 );\n  return chunkqueue_append_mem_to_tempfile(a1, (char *)&v7 + v5, 24LL - v5, a3);\n}\n", 
            "funcStartAddr": "0x2f740L", 
            "funcEndAddr": "0x2f7c3L", 
            "funcName": "sub_2F740"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_2F7D0(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  size_t v3; // r13\n  _QWORD *v4; // rbp\n  __int64 v5; // r12\n  signed __int64 result; // rax\n\n  v3 = a3;\n  v4 = (_QWORD *)(a1 + 624);\n  v5 = *(_QWORD *)(a1 + 128);\n  if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128)) )\n    return 0xFFFFFFFFLL;\n  result = chunkqueue_append_mem_to_tempfile(v4, a2, v3, v5);\n  if ( (_DWORD)result )\n    return 0xFFFFFFFFLL;\n  if ( *(_BYTE *)(a1 + 562) )\n    result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, v5) != 0);\n  return result;\n}\n", 
            "funcStartAddr": "0x2f7d0L", 
            "funcEndAddr": "0x2f85fL", 
            "funcName": "sub_2F7D0"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_2F8F0(__int64 a1, int a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n  unsigned __int64 v4; // rbx\n  __int64 *v5; // r12\n  ssize_t v6; // rax\n  ssize_t v7; // r15\n\n  v3 = a3;\n  if ( *(_BYTE *)(a1 + 562) )\n    sub_2F6C0(a1 + 624, a3);\n  v4 = 0LL;\n  v5 = (__int64 *)chunkqueue_append_buffer_open_sz((void ****)(a1 + 624), v3 + 3);\n  do\n  {\n    while ( 1 )\n    {\n      v6 = pread64(a2, (void *)(v4 + *v5), v3 - v4, v4);\n      v7 = v6;\n      if ( v6 <= 0 )\n        break;\n      v4 += v6;\n      if ( v3 == v4 )\n        goto LABEL_7;\n    }\n  }\n  while ( *__errno_location() == 4 );\nLABEL_7:\n  buffer_commit(v5, v4);\n  if ( *(_BYTE *)(a1 + 562) )\n    buffer_append_string_len((__int64)v5, \"\\r\\n\", 2uLL);\n  chunkqueue_append_buffer_commit(a1 + 624);\n  return v7 >> 63;\n}\n", 
            "funcStartAddr": "0x2f8f0L", 
            "funcEndAddr": "0x2f9e6L", 
            "funcName": "sub_2F8F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall http_chunk_append_file_ref_range(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4)\n{\n  signed __int64 v4; // r8\n  __int64 v5; // rcx\n  _QWORD *v6; // r13\n  int v7; // er12\n  int result; // eax\n  __int64 v9; // rax\n  signed __int64 v10; // ST00_8\n  __int64 v11; // ST08_8\n\n  v4 = *(_QWORD *)(a2 + 120) - a3;\n  if ( v4 > a4 )\n    v4 = a4;\n  if ( v4 > 0 )\n  {\n    v5 = a3;\n    v6 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v10 = v4;\n      v11 = a3;\n      sub_2F6C0(a1 + 624, v4);\n      v5 = v11;\n      v4 = v10;\n    }\n    v7 = *(_DWORD *)(a2 + 24);\n    result = chunkqueue_append_file_fd(v6, a2, *(_DWORD *)(a2 + 24), v5, v4);\n    if ( v7 < 0 )\n    {\n      if ( !*(_BYTE *)(a1 + 562) )\n        return result;\n      return chunkqueue_append_mem((__int64)v6, \"\\r\\n\", 2uLL);\n    }\n    v9 = *(_QWORD *)(a1 + 632);\n    *(_QWORD *)(v9 + 72) = a2;\n    *(_QWORD *)(v9 + 80) = stat_cache_entry_refchg;\n    result = stat_cache_entry_refchg(a2, 1LL);\n    if ( *(_BYTE *)(a1 + 562) )\n      return chunkqueue_append_mem((__int64)v6, \"\\r\\n\", 2uLL);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2f9f0L", 
            "funcEndAddr": "0x2fad2L", 
            "funcName": "http_chunk_append_file_ref_range"
        }, 
        {
            "decompiledFuncCode": "int __fastcall http_chunk_append_file_fd_range(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned __int64 a5)\n{\n  _QWORD *v5; // rbp\n  int result; // eax\n  __int64 v7; // ST18_8\n  int v8; // ST14_4\n  unsigned __int64 v9; // ST08_8\n\n  v5 = (_QWORD *)(a1 + 624);\n  if ( *(_BYTE *)(a1 + 562) )\n  {\n    v7 = a4;\n    v8 = a3;\n    v9 = a5;\n    sub_2F6C0(a1 + 624, a5);\n    a4 = v7;\n    a3 = v8;\n    a5 = v9;\n  }\n  result = chunkqueue_append_file_fd(v5, a2, a3, a4, a5);\n  if ( *(_BYTE *)(a1 + 562) )\n    result = chunkqueue_append_mem((__int64)v5, \"\\r\\n\", 2uLL);\n  return result;\n}\n", 
            "funcStartAddr": "0x2fae0L", 
            "funcEndAddr": "0x2fb69L", 
            "funcName": "http_chunk_append_file_fd_range"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_chunk_append_file_fd(__int64 a1, __int64 a2, int a3, signed __int64 a4)\n{\n  int v4; // ebp\n  unsigned int v5; // ebx\n  __int64 result; // rax\n\n  v4 = a3;\n  if ( a4 <= 0x8000 && *(_BYTE *)(a1 + 562) )\n  {\n    v5 = 0;\n    if ( a4 )\n      v5 = sub_2F8F0(a1, a3, a4);\n    close(v4);\n    result = v5;\n  }\n  else\n  {\n    http_chunk_append_file_fd_range(a1, a2, a3, 0LL, a4);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2fb70L", 
            "funcEndAddr": "0x2fbceL", 
            "funcName": "http_chunk_append_file_fd"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall http_chunk_append_file_ref(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rcx\n  ssize_t result; // rax\n\n  v2 = *(_QWORD *)(a2 + 120);\n  if ( v2 <= 0x8000 && *(_BYTE *)(a1 + 562) )\n  {\n    if ( v2 )\n      result = sub_2F8F0(a1, *(_DWORD *)(a2 + 24), v2);\n    else\n      result = 0LL;\n  }\n  else\n  {\n    http_chunk_append_file_ref_range(a1, a2, 0LL, v2);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2fbd0L", 
            "funcEndAddr": "0x2fc13L", 
            "funcName": "http_chunk_append_file_ref"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_chunk_append_buffer(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rdx\n  __int64 v3; // rax\n  signed __int64 result; // rax\n\n  if ( !a2 || *(_DWORD *)(a2 + 8) == (*(_DWORD *)(a2 + 8) != 0) )\n    return 0LL;\n  v2 = *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0);\n  v3 = *(_QWORD *)(a1 + 632);\n  if ( v3 && *(_DWORD *)(v3 + 8) == 1 && *(_DWORD *)(v3 + 44)\n    || v2 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    result = sub_2F7D0(a1, *(char **)a2, v2);\n    *(_DWORD *)(a2 + 8) = 0;\n  }\n  else\n  {\n    if ( *(_BYTE *)(a1 + 562) )\n      sub_2F6C0(a1 + 624, v2);\n    chunkqueue_append_buffer(a1 + 624, a2);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem(a1 + 624, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2fc20L", 
            "funcEndAddr": "0x2fcedL", 
            "funcName": "http_chunk_append_buffer"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_chunk_append_mem(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  __int64 v3; // rax\n  unsigned __int64 v5; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  if ( !a2 )\n    ck_assert_failed((__int64)&unk_497C8, 246LL, (__int64)\"((void *)0) != mem\");\n  v3 = *(_QWORD *)(a1 + 632);\n  if ( v3 && *(_DWORD *)(v3 + 8) == 1 && *(_DWORD *)(v3 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    return sub_2F7D0(a1, a2, a3);\n  }\n  if ( *(_BYTE *)(a1 + 562) )\n  {\n    v5 = a3;\n    sub_2F6C0(a1 + 624, a3);\n    a3 = v5;\n  }\n  chunkqueue_append_mem(a1 + 624, a2, a3);\n  if ( *(_BYTE *)(a1 + 562) )\n    chunkqueue_append_mem(a1 + 624, \"\\r\\n\", 2uLL);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x2fcf0L", 
            "funcEndAddr": "0x2fddfL", 
            "funcName": "http_chunk_append_mem"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_2FDE0(__int64 a1, char *a2, signed __int64 a3)\n{\n  __int64 v3; // r13\n  signed __int64 i; // r15\n  char *v5; // rbp\n  unsigned int v6; // er14\n  char *v7; // r12\n  char *v8; // rax\n  char v9; // r14\n  unsigned __int8 v10; // al\n  signed __int64 v11; // r8\n  unsigned __int64 v12; // r14\n  int v13; // edx\n  size_t v15; // ST00_8\n  int v16; // eax\n  char *v17; // rax\n  signed __int64 v18; // rdx\n  signed __int64 v19; // rax\n  signed __int64 v20; // r14\n  char *v21; // rax\n  unsigned int v22; // edx\n  unsigned int v23; // eax\n  unsigned int v24; // eax\n  signed __int64 v25; // rdx\n  __int64 v26; // rbx\n  char *v27; // rax\n  unsigned int v28; // edx\n  char *v29; // rax\n  unsigned __int64 v30; // rdx\n  signed __int64 n; // [rsp+0h] [rbp-68h]\n  signed __int64 v32; // [rsp+8h] [rbp-60h]\n  char *v33; // [rsp+18h] [rbp-50h]\n  __int64 v34; // [rsp+20h] [rbp-48h]\n  unsigned int v35; // [rsp+2Ch] [rbp-3Ch]\n\n  v3 = *(_QWORD *)(a1 + 576);\n  n = a3;\n  v35 = *(_DWORD *)(v3 + 24);\n  if ( *(_DWORD *)(v3 + 24) )\n    return (unsigned int)-1;\n  i = *(_QWORD *)v3;\n  v34 = v3 + 8;\n  if ( !a3 )\n    goto LABEL_34;\n  v5 = a2;\n  do\n  {\nLABEL_4:\n    if ( !i )\n      goto LABEL_9;\n    if ( i > 1 )\n    {\n      while ( 1 )\n      {\n        v11 = n;\nLABEL_26:\n        v12 = i - 2;\n        if ( i - 2 > v11 )\n          v12 = v11;\n        if ( !*(_BYTE *)(a1 + 562) )\n        {\n          v15 = v11;\n          v16 = http_chunk_append_mem(a1, v5, v12);\n          v11 = v15;\n          if ( v16 )\n            return (unsigned int)-1;\n        }\n        i -= v12;\n        v5 += v12;\n        n = v11 - v12;\n        if ( i != 2 )\n        {\n          if ( v11 != v12 )\n            goto LABEL_4;\n          goto LABEL_31;\n        }\n        if ( n > 1 )\n        {\n          if ( *v5 != 13 || v5[1] != 10 )\n            return (unsigned int)-1;\n          v5 += 2;\n          n -= 2LL;\n          if ( n )\n            goto LABEL_9;\n          goto LABEL_40;\n        }\n        if ( n == 1 )\n        {\n          if ( *v5 != 13 )\n            return (unsigned int)-1;\n          i = 1LL;\n          v3 = *(_QWORD *)(a1 + 576);\n          v13 = *(_DWORD *)(v3 + 24);\n          goto LABEL_32;\n        }\n        if ( v11 == v12 )\n          goto LABEL_31;\n      }\n    }\n  }\n  while ( i != 1 );\n  if ( *v5 != 10 )\n    return (unsigned int)-1;\n  ++v5;\n  if ( !--n )\n    goto LABEL_40;\nLABEL_9:\n  v6 = *(_DWORD *)(v3 + 16);\n  if ( v6 <= 1 )\n  {\n    v21 = (char *)memchr(v5, 10, n);\n    if ( v21 )\n    {\n      v7 = v5;\n      v33 = v21 + 1;\n      v32 = v21 + 1 - v5;\n      goto LABEL_12;\n    }\n    if ( n > 1023 )\n    {\n      log_error(*(_DWORD **)(a1 + 128), (const char *)&unk_497C8, 313LL, (__int64)\"chunked header line too long\", n);\n      return (unsigned int)-1;\n    }\n    v30 = (unsigned int)n;\n  }\n  else\n  {\n    v7 = *(char **)(v3 + 8);\n    v8 = strchr(*(const char **)(v3 + 8), 10);\n    if ( v8 )\n    {\n      v33 = v8 + 1;\n      v32 = v8 + 1 - v7;\nLABEL_12:\n      for ( i = 0LL; ; i = 16 * i | v10 )\n      {\n        v9 = *v7;\n        v10 = hex2int((unsigned __int8)*v7);\n        if ( v10 == -1 )\n          break;\n        if ( i > 576460752303423485LL )\n        {\n          log_error(*(_DWORD **)(a1 + 128), (const char *)&unk_497C8, 345LL, (__int64)\"chunked data size too large\", n);\n          return (unsigned int)-1;\n        }\n        ++v7;\n      }\n      if ( v7 == v5 || *(char **)(v3 + 8) == v7 )\n        return (unsigned int)-1;\n      while ( v9 == 32 || v9 == 9 )\n        v9 = *++v7;\n      if ( v9 != 13 && v9 != 59 )\n      {\n        log_error(*(_DWORD **)(a1 + 128), (const char *)&unk_497C8, 355LL, (__int64)\"chunked header invalid chars\", n);\n        return (unsigned int)-1;\n      }\n      v11 = n - v32;\n      if ( i )\n      {\n        v5 += v32;\n        i += 2LL;\n        *(_DWORD *)(v3 + 16) = 0;\n        if ( n != v32 )\n          goto LABEL_26;\nLABEL_31:\n        v3 = *(_QWORD *)(a1 + 576);\n        v13 = *(_DWORD *)(v3 + 24);\n      }\n      else if ( v11 <= 1 || *v33 != 13 || v33[1] != 10 )\n      {\n        v22 = *(_DWORD *)(v3 + 16) - (*(_DWORD *)(v3 + 16) != 0);\n        v23 = *(_DWORD *)(a1 + 92);\n        if ( v23 <= v22 )\n        {\n          v25 = 0LL;\n          v24 = 0;\n        }\n        else\n        {\n          v24 = v23 - v22;\n          v25 = v24;\n        }\n        if ( n <= v25 )\n        {\n          buffer_append_string_len(v34, v5, (unsigned int)n);\n          v29 = strstr(*(const char **)(v3 + 8), \"\\r\\n\\r\\n\");\n          if ( !v29 )\n            goto LABEL_31;\n          v3 = *(_QWORD *)(a1 + 576);\n          v13 = *(_DWORD *)(a1 + 4);\n          *(_DWORD *)(v3 + 24) = v13;\n          if ( v29[4] )\n            return (unsigned int)-1;\n        }\n        else\n        {\n          if ( *(_BYTE *)(a1 + 562) )\n            *(_BYTE *)(a1 + 566) = 0;\n          *(_DWORD *)(*(_QWORD *)(a1 + 576) + 24LL) = *(_DWORD *)(a1 + 4);\n          buffer_append_string_len(v34, v5, v24);\n          v26 = *(_QWORD *)(v3 + 8);\n          v27 = strrchr(*(const char **)(v3 + 8), 10);\n          if ( v27 )\n          {\n            v28 = (_DWORD)v27 + 1 - v26;\n            *(_BYTE *)(v26 + v28) = 0;\n            *(_DWORD *)(v3 + 16) = v28 + 1;\n            if ( *(v27 - 1) != 13 )\n              buffer_append_string_len(v34, \"\\r\\n\", 2uLL);\n          }\n          else\n          {\n            *(_DWORD *)(v3 + 16) = 0;\n            buffer_append_string_len(v34, \"0\\r\\n\", 3uLL);\n          }\n          buffer_append_string_len(v34, \"\\r\\n\", 2uLL);\n          v3 = *(_QWORD *)(a1 + 576);\n          v13 = *(_DWORD *)(v3 + 24);\n        }\n      }\n      else\n      {\n        if ( v11 != 2 )\n          return (unsigned int)-1;\n        *(_DWORD *)(v3 + 16) = 0;\n        v13 = *(_DWORD *)(a1 + 4);\n        v3 = *(_QWORD *)(a1 + 576);\n        *(_DWORD *)(v3 + 24) = v13;\n      }\n      goto LABEL_32;\n    }\n    v17 = (char *)memchr(v5, 10, n);\n    v18 = 1025 - v6;\n    if ( v17 )\n    {\n      v19 = (signed __int64)(v17 + 1);\n      v33 = (char *)v19;\n      v20 = v19 - (_QWORD)v5;\n      if ( v19 - (signed __int64)v5 <= v18 )\n      {\n        buffer_append_string_len(v34, v5, v19 - (_QWORD)v5);\n        v5 = v33;\n        if ( v33 )\n        {\n          n -= v20;\n          v7 = *(char **)(v3 + 8);\n          v32 = 0LL;\n          goto LABEL_12;\n        }\nLABEL_40:\n        i = 0LL;\n        v3 = *(_QWORD *)(a1 + 576);\n        v13 = *(_DWORD *)(v3 + 24);\n        goto LABEL_32;\n      }\nLABEL_53:\n      log_error(*(_DWORD **)(a1 + 128), (const char *)&unk_497C8, 330LL, (__int64)\"chunked header line too long\", n);\n      return (unsigned int)-1;\n    }\n    if ( n > v18 )\n      goto LABEL_53;\n    v30 = n;\n  }\n  i = 0LL;\n  buffer_append_string_len(v34, v5, v30);\n  v3 = *(_QWORD *)(a1 + 576);\n  v13 = *(_DWORD *)(v3 + 24);\nLABEL_32:\n  if ( v13 )\n    *(_BYTE *)(a1 + 560) = 1;\nLABEL_34:\n  *(_QWORD *)v3 = i;\n  return v35;\n}\n", 
            "funcStartAddr": "0x2fde0L", 
            "funcEndAddr": "0x303b5L", 
            "funcName": "sub_2FDE0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2f8e8L", 
            "funcEndAddr": "0x2f8efL", 
            "funcName": "http_chunk_transfer_cqlen"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2f8e8L", 
            "funcEndAddr": "0x2f8efL", 
            "funcName": "http_chunk_transfer_cqlen"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n\nsigned __int64 __fastcall http_chunk_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // r13\n  __int64 **v4; // rbp\n  _DWORD *v5; // r12\n  __int64 v6; // rax\n  _QWORD *v7; // r12\n  signed __int64 result; // rax\n  unsigned __int64 v9; // ST08_8\n\n  if ( !a3 )\n    return 0LL;\n  v6 = *(_QWORD *)(a1 + 632);\n  if ( v6 && *(_DWORD *)(v6 + 8) == 1 && *(_DWORD *)(v6 + 44)\n    || a3 + *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > (unsigned __int64)&loc_10000 )\n  {\n    v3 = a3;\n    v4 = (__int64 **)(a1 + 624);\n    v5 = *(_DWORD **)(a1 + 128);\n    if ( *(_BYTE *)(a1 + 562) && (unsigned int)sub_2F740((_QWORD *)(a1 + 624), a3, *(_QWORD *)(a1 + 128))\n      || (result = chunkqueue_steal_with_tempfiles(v4, a2, v3, v5), (_DWORD)result) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else if ( *(_BYTE *)(a1 + 562) )\n    {\n      result = (unsigned int)-((unsigned int)chunkqueue_append_mem_to_tempfile(v4, \"\\r\\n\", 2uLL, (__int64)v5) != 0);\n    }\n  }\n  else\n  {\n    v7 = (_QWORD *)(a1 + 624);\n    if ( *(_BYTE *)(a1 + 562) )\n    {\n      v9 = a3;\n      sub_2F6C0(a1 + 624, a3);\n      a3 = v9;\n    }\n    chunkqueue_steal(v7, (_QWORD **)a2, a3);\n    if ( *(_BYTE *)(a1 + 562) )\n      chunkqueue_append_mem((__int64)v7, \"\\r\\n\", 2uLL);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x2f8e8L", 
            "funcEndAddr": "0x2f8efL", 
            "funcName": "http_chunk_transfer_cqlen"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_chunk_close(__int64 a1)\n{\n  __int64 v1; // rax\n\n  if ( *(_BYTE *)(a1 + 562) )\n  {\n    v1 = *(_QWORD *)(a1 + 576);\n    if ( v1 )\n    {\n      if ( !*(_DWORD *)(v1 + 24) )\n        *(_BYTE *)(a1 + 566) = 0;\n    }\n    else\n    {\n      chunkqueue_append_mem(a1 + 624, &unk_41138, 5uLL);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x30480L", 
            "funcEndAddr": "0x304c8L", 
            "funcName": "http_chunk_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_chunk_decode_append_buffer(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  result = sub_2FDE0(a1, *(char **)a2, *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0));\n  if ( (_DWORD)result )\n    return 0xFFFFFFFFLL;\n  if ( *(_BYTE *)(a1 + 562) )\n  {\n    *(_BYTE *)(a1 + 562) = 0;\n    result = http_chunk_append_buffer(a1, a2);\n    *(_BYTE *)(a1 + 562) = 1;\n  }\n  else\n  {\n    *(_DWORD *)(a2 + 8) = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x304d0L", 
            "funcEndAddr": "0x30537L", 
            "funcName": "http_chunk_decode_append_buffer"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_chunk_decode_append_mem(__int64 a1, char *a2, signed __int64 a3)\n{\n  unsigned __int64 v3; // r12\n  __int64 result; // rax\n\n  v3 = a3;\n  result = sub_2FDE0(a1, a2, a3);\n  if ( (_DWORD)result )\n    return 0xFFFFFFFFLL;\n  if ( *(_BYTE *)(a1 + 562) )\n  {\n    *(_BYTE *)(a1 + 562) = 0;\n    result = http_chunk_append_mem(a1, a2, v3);\n    *(_BYTE *)(a1 + 562) = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x30540L", 
            "funcEndAddr": "0x30587L", 
            "funcName": "http_chunk_decode_append_mem"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_setfd_cloexec(int a1)\n{\n  if ( a1 >= 0 && fcntl(a1, 2, 1LL) == -1 )\n    ck_assert_failed((__int64)\"fdevent.c\", 60LL, (__int64)\"-1 != fcntl(fd, 2, 1)\");\n}\n", 
            "funcStartAddr": "0x30590L", 
            "funcEndAddr": "0x305d2L", 
            "funcName": "fdevent_setfd_cloexec"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_clrfd_cloexec(int a1)\n{\n  if ( a1 >= 0 && fcntl(a1, 2, 0LL) == -1 )\n    ck_assert_failed((__int64)\"fdevent.c\", 68LL, (__int64)\"-1 != fcntl(fd, 2, 0)\");\n}\n", 
            "funcStartAddr": "0x305e0L", 
            "funcEndAddr": "0x3061aL", 
            "funcName": "fdevent_clrfd_cloexec"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_30620(int a1, unsigned int a2)\n{\n  signed __int64 result; // rax\n\n  if ( a1 < 0 )\n    goto LABEL_12;\n  if ( a1 == a2 )\n  {\n    fdevent_clrfd_cloexec(a1);\n    return (unsigned int)a1;\n  }\n  if ( a1 <= 2 )\n    ck_assert_failed((__int64)\"fdevent.c\", 348LL, (__int64)\"oldfd > 2\");\n  if ( dup2(a1, a2) != a2 )\n    result = 0xFFFFFFFFLL;\n  else\nLABEL_12:\n    result = a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x30620L", 
            "funcEndAddr": "0x3067fL", 
            "funcName": "sub_30620"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_fcntl_set_nb(int a1)\n{\n  return fcntl(a1, 4, 2050LL);\n}\n", 
            "funcStartAddr": "0x30680L", 
            "funcEndAddr": "0x30691L", 
            "funcName": "fdevent_fcntl_set_nb"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_fcntl_set_nb_cloexec(int fd)\n{\n  fdevent_setfd_cloexec(fd);\n  return fcntl(fd, 4, 2050LL);\n}\n", 
            "funcStartAddr": "0x306a0L", 
            "funcEndAddr": "0x306bcL", 
            "funcName": "fdevent_fcntl_set_nb_cloexec"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_fcntl_set_nb_cloexec_sock(int fd)\n{\n  if ( dword_2585C4 && dword_2585C0 )\n    return 0;\n  fdevent_setfd_cloexec(fd);\n  return fcntl(fd, 4, 2050LL);\n}\n", 
            "funcStartAddr": "0x306c0L", 
            "funcEndAddr": "0x306f3L", 
            "funcName": "fdevent_fcntl_set_nb_cloexec_sock"
        }, 
        {
            "decompiledFuncCode": "int __usercall fdevent_socket_cloexec@<eax>(int a1@<edx>, __int64 a2@<rbx>, int a3@<edi>, int a4@<esi>)\n{\n  int v4; // eax\n  int v5; // ebx\n  __int64 v7; // [rsp-8h] [rbp-8h]\n\n  if ( dword_2585C4 )\n    return socket(a3, a4 | 0x80000, a1);\n  v7 = a2;\n  v4 = socket(a3, a4, a1);\n  v5 = v4;\n  if ( v4 != -1 && fcntl(v4, 2, 1LL, v7) == -1 )\n    ck_assert_failed((__int64)\"fdevent.c\", 104LL, (__int64)\"-1 != fcntl(fd, 2, 1)\");\n  return v5;\n}\n", 
            "funcStartAddr": "0x30700L", 
            "funcEndAddr": "0x3075bL", 
            "funcName": "fdevent_socket_cloexec"
        }, 
        {
            "decompiledFuncCode": "int __usercall fdevent_socket_nb_cloexec@<eax>(int a1@<edx>, __int64 a2@<rbx>, int a3@<edi>, int a4@<esi>)\n{\n  int v4; // eax\n  int v5; // ebx\n  __int64 v7; // [rsp-8h] [rbp-8h]\n\n  if ( dword_2585C4 && dword_2585C0 )\n    return socket(a3, a4 | 0x80800, a1);\n  v7 = a2;\n  v4 = socket(a3, a4, a1);\n  v5 = v4;\n  if ( v4 != -1 )\n  {\n    if ( fcntl(v4, 2, 1LL, v7) == -1 )\n      ck_assert_failed((__int64)\"fdevent.c\", 128LL, (__int64)\"-1 != fcntl(fd, 2, 1)\");\n    if ( fcntl(v5, 4, 2050LL) == -1 )\n      ck_assert_failed((__int64)\"fdevent.c\", 131LL, (__int64)\"-1 != fcntl(fd, 4, 04000 | 02)\");\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x30760L", 
            "funcEndAddr": "0x307f3L", 
            "funcName": "fdevent_socket_nb_cloexec"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_dup_cloexec(int a1)\n{\n  return fcntl(a1, 1030, 3LL);\n}\n", 
            "funcStartAddr": "0x30800L", 
            "funcEndAddr": "0x30811L", 
            "funcName": "fdevent_dup_cloexec"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_open_cloexec(const char *a1, int a2, int a3, unsigned int a4)\n{\n  int v4; // eax\n\n  v4 = a3;\n  if ( !a2 )\n    v4 = a3 | 0x20000;\n  return open64(a1, v4 | 0x80900, a4);\n}\n", 
            "funcStartAddr": "0x30820L", 
            "funcEndAddr": "0x3083fL", 
            "funcName": "fdevent_open_cloexec"
        }, 
        {
            "decompiledFuncCode": "int fdevent_open_devnull()\n{\n  return fdevent_open_cloexec(\"/dev/null\", 0, 2, 0);\n}\n", 
            "funcStartAddr": "0x30840L", 
            "funcEndAddr": "0x30852L", 
            "funcName": "fdevent_open_devnull"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_open_dirname(const char *a1, int a2)\n{\n  const char *v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  int result; // eax\n\n  v2 = a1;\n  v3 = strrchr(a1, 47);\n  if ( !v3 )\n    return fdevent_open_cloexec(\".\", a2, (unsigned __int64)&loc_10000, 0);\n  v4 = v3;\n  *v3 = 0;\n  if ( a1 == v3 )\n    v2 = \"/\";\n  result = fdevent_open_cloexec(v2, a2, (unsigned __int64)&loc_10000, 0);\n  *v4 = 47;\n  return result;\n}\n", 
            "funcStartAddr": "0x30860L", 
            "funcEndAddr": "0x308caL", 
            "funcName": "fdevent_open_dirname"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_pipe_cloexec(int pipedes[2], unsigned int a2)\n{\n  if ( pipe2(pipedes, 0x80000) && (pipe(pipedes) || fcntl(*pipedes, 2, 1LL) || fcntl(pipedes[1], 2, 1LL)) )\n    return 0xFFFFFFFFLL;\n  if ( a2 > (unsigned int)&loc_10000 )\n    fcntl(pipedes[1], 1031, a2);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x308d0L", 
            "funcEndAddr": "0x3095fL", 
            "funcName": "fdevent_pipe_cloexec"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_mkostemp(char *a1, int a2)\n{\n  return mkostemp64(a1, a2 | 0x80000);\n}\n", 
            "funcStartAddr": "0x30960L", 
            "funcEndAddr": "0x3096bL", 
            "funcName": "fdevent_mkostemp"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_accept_listenfd(int fd, struct sockaddr *addr, _QWORD *a3)\n{\n  _QWORD *v3; // rbp\n  unsigned int v4; // ebx\n  int v6; // edi\n  int v7; // eax\n  socklen_t addr_len; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v9 = __readfsqword(0x28u);\n  addr_len = *a3;\n  if ( !dword_2585C4 )\n  {\nLABEL_6:\n    v4 = accept(fd, addr, &addr_len);\n    if ( (v4 & 0x80000000) == 0 )\n    {\n      *v3 = addr_len;\n      fdevent_setfd_cloexec(v4);\n      if ( fcntl(v4, 4, 2050LL) )\n        goto LABEL_8;\n    }\n    return v4;\n  }\n  v4 = accept4(fd, addr, &addr_len, 526336);\n  if ( (v4 & 0x80000000) != 0 )\n  {\n    v7 = *__errno_location();\n    if ( v7 != 38 && v7 != 95 && v7 != 1 )\n      return v4;\n    goto LABEL_6;\n  }\n  if ( !dword_2585C0 && fcntl(v4, 4, 2050LL) )\n  {\nLABEL_8:\n    v6 = v4;\n    v4 = -1;\n    close(v6);\n    return v4;\n  }\n  *v3 = addr_len;\n  return v4;\n}\n", 
            "funcStartAddr": "0x30970L", 
            "funcEndAddr": "0x30a92L", 
            "funcName": "fdevent_accept_listenfd"
        }, 
        {
            "decompiledFuncCode": "char **fdevent_environ()\n{\n  return environ;\n}\n", 
            "funcStartAddr": "0x30aa0L", 
            "funcEndAddr": "0x30aa8L", 
            "funcName": "fdevent_environ"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall fdevent_set_stdin_stdout_stderr(int a1, int a2, int a3)\n{\n  int v3; // ebp\n  signed __int64 result; // rax\n\n  v3 = a3;\n  if ( (unsigned int)sub_30620(a1, 0) || (unsigned int)sub_30620(a2, 1u) != 1 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = (unsigned int)-((unsigned int)sub_30620(v3, 2u) != 2);\n  return result;\n}\n", 
            "funcStartAddr": "0x30ab0L", 
            "funcEndAddr": "0x30b04L", 
            "funcName": "fdevent_set_stdin_stdout_stderr"
        }, 
        {
            "decompiledFuncCode": "int fdevent_rename(const char *old, const char *a2)\n{\n  return rename(old, a2);\n}\n", 
            "funcStartAddr": "0x30b10L", 
            "funcEndAddr": "0x30b15L", 
            "funcName": "fdevent_rename"
        }, 
        {
            "decompiledFuncCode": "__pid_t __usercall fdevent_fork_execve@<eax>(char *path@<rdi>, char **argv@<rsi>, char **a3@<rdx>, int a4@<ecx>, int a5@<r8d>, int a6@<r9d>, int fd)\n{\n  int v7; // er13\n  char **v8; // rbp\n  char **v9; // rbx\n  int v10; // er12\n  int v11; // er14\n  __pid_t result; // eax\n  bool v13; // cf\n  bool v14; // zf\n  char *v15; // rdx\n  const char *v16; // rdi\n  signed __int64 v17; // rcx\n  char *v18; // rsi\n  int v19; // ebx\n  char *v20; // rsi\n  bool v21; // cf\n  bool v22; // zf\n  const char *v23; // rdi\n  signed __int64 v24; // rcx\n  int *v25; // [rsp+8h] [rbp-40h]\n\n  v7 = a5;\n  v8 = argv;\n  v9 = a3;\n  v10 = a4;\n  v11 = a6;\n  result = fork();\n  if ( !result )\n  {\n    v25 = __errno_location();\n    if ( fd != -1 )\n    {\n      if ( fchdir(fd) )\n        goto LABEL_6;\n      close(fd);\n    }\n    if ( !(unsigned int)fdevent_set_stdin_stdout_stderr(v10, v7, v11) )\n    {\n      signal(22, 0LL);\n      signal(21, 0LL);\n      signal(20, 0LL);\n      signal(13, 0LL);\n      if ( !v9 )\n        v9 = environ;\n      execve(path, argv, v9);\n      v15 = *argv;\n      v16 = \"/bin/sh\";\n      v17 = 8LL;\n      v18 = *argv;\n      v19 = *v25;\n      do\n      {\n        if ( !v17 )\n          break;\n        v13 = (unsigned __int8)*v18 < *v16;\n        v14 = *v18++ == *v16++;\n        --v17;\n      }\n      while ( v14 );\n      if ( (!v13 && !v14) == v13 )\n      {\n        v20 = v8[1];\n        v21 = 0;\n        v22 = v20 == 0LL;\n        if ( v20 )\n        {\n          v23 = \"-c\";\n          v24 = 3LL;\n          do\n          {\n            if ( !v24 )\n              break;\n            v21 = (unsigned __int8)*v20 < *v23;\n            v22 = *v20++ == *v23++;\n            --v24;\n          }\n          while ( v22 );\n          if ( (!v21 && !v22) == v21 )\n            v15 = v8[2];\n        }\n      }\n      perror(v15);\n      _exit(v19);\n    }\nLABEL_6:\n    _exit(*v25);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x30b20L", 
            "funcEndAddr": "0x30c47L", 
            "funcName": "fdevent_fork_execve"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_waitpid(__pid_t pid, int *stat_loc, int a3)\n{\n  int v3; // ebp\n  unsigned int v4; // ebx\n\n  v3 = a3 != 0;\n  do\n    v4 = waitpid(pid, stat_loc, v3);\n  while ( v4 == -1 && *__errno_location() == 4 );\n  return v4;\n}\n", 
            "funcStartAddr": "0x30c50L", 
            "funcEndAddr": "0x30c9bL", 
            "funcName": "fdevent_waitpid"
        }, 
        {
            "decompiledFuncCode": "__pid_t __fastcall fdevent_waitpid_intr(__pid_t a1, int *a2)\n{\n  return waitpid(a1, a2, 0);\n}\n", 
            "funcStartAddr": "0x30ca0L", 
            "funcEndAddr": "0x30ca7L", 
            "funcName": "fdevent_waitpid_intr"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall fdevent_socket_read_discard(int fd, void *buf, size_t n, int a4, int a5)\n{\n  size_t v5; // r12\n  ssize_t result; // rax\n  ssize_t v7; // r13\n\n  v5 = n;\n  if ( (a4 & 0xFFFFFFF7) == 2 && a5 == 1 && ((v7 = recv(fd, buf, n, 16480), v7 >= 0) || *__errno_location() != 22) )\n    result = v7;\n  else\n    result = read(fd, buf, v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x30cb0L", 
            "funcEndAddr": "0x30d1cL", 
            "funcName": "fdevent_socket_read_discard"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_ioctl_fionread(int a1)\n{\n  return ioctl(a1, 0x541BuLL);\n}\n", 
            "funcStartAddr": "0x30d20L", 
            "funcEndAddr": "0x30d2cL", 
            "funcName": "fdevent_ioctl_fionread"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_connect_status(int a1)\n{\n  __int64 result; // rax\n  unsigned int v2; // [rsp+0h] [rbp-18h]\n  socklen_t optlen; // [rsp+4h] [rbp-14h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\n  optlen = 4;\n  v4 = __readfsqword(0x28u);\n  if ( getsockopt(a1, 1, 4, &v2, &optlen) )\n    result = (unsigned int)*__errno_location();\n  else\n    result = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x30d30L", 
            "funcEndAddr": "0x30d8eL", 
            "funcName": "fdevent_connect_status"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_is_tcp_half_closed(int a1)\n{\n  int v1; // eax\n  _BOOL4 v2; // edx\n  socklen_t optlen; // [rsp+Ch] [rbp-7Ch]\n  char optval; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v6; // [rsp+78h] [rbp-10h]\n\n  optlen = 104;\n  v6 = __readfsqword(0x28u);\n  v1 = getsockopt(a1, 6, 11, &optval, &optlen);\n  v2 = 0;\n  if ( !v1 )\n    v2 = optval == 8;\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0x30d90L", 
            "funcEndAddr": "0x30df7L", 
            "funcName": "fdevent_is_tcp_half_closed"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_set_tcp_nodelay(int a1, int a2)\n{\n  int optval; // [rsp+Ch] [rbp-Ch]\n\n  optval = a2;\n  return setsockopt(a1, 6, 1, &optval, 4u);\n}\n", 
            "funcStartAddr": "0x30e00L", 
            "funcEndAddr": "0x30e27L", 
            "funcName": "fdevent_set_tcp_nodelay"
        }, 
        {
            "decompiledFuncCode": "int __fastcall fdevent_set_so_reuseaddr(int a1, int a2)\n{\n  int optval; // [rsp+Ch] [rbp-Ch]\n\n  optval = a2;\n  return setsockopt(a1, 1, 2, &optval, 4u);\n}\n", 
            "funcStartAddr": "0x30e30L", 
            "funcEndAddr": "0x30e57L", 
            "funcName": "fdevent_set_so_reuseaddr"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fdevent_load_file_bytes(void *buf, __int64 a2, __off64_t a3, const char *a4, _DWORD *a5)\n{\n  const char *v5; // r14\n  __off64_t v6; // rbp\n  int v7; // eax\n  int v8; // er12\n  __int64 v9; // r15\n  char *v10; // rbp\n  ssize_t v11; // rax\n  int *v13; // rbp\n  signed int v14; // er15\n  _DWORD *v15; // [rsp+8h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a3;\n  v15 = a5;\n  v7 = fdevent_open_cloexec(a4, 1, 0, 0);\n  if ( v7 < 0 )\n  {\n    v13 = __errno_location();\n    v14 = *v13;\n    if ( v15 )\n      log_perror(v15, \"fdevent.c\", 660LL, (__int64)&unk_49879, \"fdevent_load_file_bytes\", v5);\n  }\n  else\n  {\n    v8 = v7;\n    if ( v6 && lseek64(v7, v6, 0) == -1 )\n    {\nLABEL_13:\n      v13 = __errno_location();\n      v14 = *v13;\n    }\n    else\n    {\n      v9 = 0LL;\n      v10 = (char *)buf;\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v11 = read(v8, v10, a2 - v9);\n          if ( v11 <= 0 )\n            break;\n          v9 += v11;\n          if ( a2 == v9 )\n            goto LABEL_9;\n          v10 = (char *)buf + v9;\n        }\n        if ( !v11 )\n          break;\n        if ( *__errno_location() != 4 )\n        {\n          if ( v9 != a2 )\n            goto LABEL_13;\nLABEL_9:\n          close(v8);\n          return 0LL;\n        }\n      }\n      if ( v9 == a2 )\n        goto LABEL_9;\n      v14 = 5;\n      v13 = __errno_location();\n      *v13 = 5;\n    }\n    if ( v15 )\n      log_perror(v15, \"fdevent.c\", 660LL, (__int64)&unk_49879, \"fdevent_load_file_bytes\", v5);\n    close(v8);\n  }\n  ck_memclear_s(buf, a2, a2);\n  *v13 = v14;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x30e60L", 
            "funcEndAddr": "0x30fecL", 
            "funcName": "fdevent_load_file_bytes"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall fdevent_register(_QWORD *a1, int a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r12\n  __int64 v5; // rbp\n  _QWORD *v6; // r13\n  char *result; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = (_QWORD *)(*a1 + 8LL * a2);\n  result = (char *)calloc(1uLL, 0x20uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"fdevent_fdnode.c\", 17LL, (__int64)\"((void *)0) != fdn\");\n  *v6 = result;\n  *(_QWORD *)result = v4;\n  *((_DWORD *)result + 4) = a2;\n  *((_QWORD *)result + 1) = v5;\n  *(_QWORD *)(result + 20) = -4294967296LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x31030L", 
            "funcEndAddr": "0x310a0L", 
            "funcName": "fdevent_register"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_unregister(_QWORD *a1, int a2)\n{\n  void **v2; // rax\n  void *v3; // rdi\n\n  v2 = (void **)(*a1 + 8LL * a2);\n  v3 = *v2;\n  if ( !((unsigned __int64)*v2 & 3) )\n  {\n    *v2 = 0LL;\n    free(v3);\n  }\n}\n", 
            "funcStartAddr": "0x310a0L", 
            "funcEndAddr": "0x310c4L", 
            "funcName": "fdevent_unregister"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall fdevent_sched_close(_QWORD *a1, int a2, int a3)\n{\n  unsigned __int64 *v3; // rcx\n  unsigned __int64 result; // rax\n  __int64 v5; // rdx\n\n  v3 = (unsigned __int64 *)(*a1 + 8LL * a2);\n  result = *v3;\n  if ( !(*v3 & 3) )\n  {\n    *v3 = result | ((a3 == 0) + 1LL);\n    v5 = a1[1];\n    *(_QWORD *)result = 0LL;\n    *(_QWORD *)(result + 8) = v5;\n    a1[1] = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x310d0L", 
            "funcEndAddr": "0x31108L", 
            "funcName": "fdevent_sched_close"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_fdnode_event_del(__int64 a1, __int64 a2)\n{\n  if ( a2 && *(_DWORD *)(a2 + 24) != -1 )\n  {\n    if ( (*(unsigned int (**)(void))(a1 + 24))() )\n      sub_17E57(a1, a2);\n    *(_QWORD *)(a2 + 20) = -4294967296LL;\n  }\n}\n", 
            "funcStartAddr": "0x31110L", 
            "funcEndAddr": "0x31157L", 
            "funcName": "fdevent_fdnode_event_del"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_fdnode_event_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 20) != a3 )\n    {\n      v3 = a3;\n      if ( !(*(unsigned int (**)(void))(a1 + 16))() || (unsigned int)sub_17EB4(a1, a2, v3) )\n        *(_DWORD *)(a2 + 20) = v3;\n    }\n  }\n}\n\nvoid __fastcall fdevent_fdnode_event_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 20) != a3 )\n    {\n      v3 = a3;\n      if ( !(*(unsigned int (**)(void))(a1 + 16))() || (unsigned int)sub_17EB4(a1, a2, v3) )\n        *(_DWORD *)(a2 + 20) = v3;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x30ff0L", 
            "funcEndAddr": "0x31025L", 
            "funcName": "fdevent_fdnode_event_set"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_fdnode_event_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 20) != a3 )\n    {\n      v3 = a3;\n      if ( !(*(unsigned int (**)(void))(a1 + 16))() || (unsigned int)sub_17EB4(a1, a2, v3) )\n        *(_DWORD *)(a2 + 20) = v3;\n    }\n  }\n}\n\nvoid __fastcall fdevent_fdnode_event_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 20) != a3 )\n    {\n      v3 = a3;\n      if ( !(*(unsigned int (**)(void))(a1 + 16))() || (unsigned int)sub_17EB4(a1, a2, v3) )\n        *(_DWORD *)(a2 + 20) = v3;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x30ff0L", 
            "funcEndAddr": "0x31025L", 
            "funcName": "fdevent_fdnode_event_set"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_fdnode_event_add(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // edx\n\n  if ( a2 )\n  {\n    v3 = *(_DWORD *)(a2 + 20) | a3;\n    JUMPOUT(&loc_30FF0);\n  }\n}\n", 
            "funcStartAddr": "0x31180L", 
            "funcEndAddr": "0x31192L", 
            "funcName": "fdevent_fdnode_event_add"
        }, 
        {
            "decompiledFuncCode": "void __fastcall fdevent_fdnode_event_clr(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // edx\n\n  if ( a2 )\n  {\n    v3 = *(_DWORD *)(a2 + 20) & ~a3;\n    JUMPOUT(&loc_30FF0);\n  }\n}\n", 
            "funcStartAddr": "0x311a0L", 
            "funcEndAddr": "0x311b2L", 
            "funcName": "fdevent_fdnode_event_clr"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_311C0(__int64 a1, int a2, unsigned int a3)\n{\n  signed __int64 v3; // rcx\n  __int64 result; // rax\n\n  if ( !a2 )\n    return a3;\n  v3 = a1 + (unsigned int)(a2 - 1) + 1;\n  LODWORD(result) = a3;\n  do\n    result = *(unsigned __int8 *)(++a1 - 1) ^ (unsigned int)(33 * result);\n  while ( v3 != a1 );\n  return result;\n}\n", 
            "funcStartAddr": "0x311c0L", 
            "funcEndAddr": "0x311f3L", 
            "funcName": "sub_311C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_31240(void **a1, __int64 a2, __int64 a3)\n{\n  void **v3; // rbx\n  void *v4; // rdi\n\n  v3 = a1;\n  v4 = *a1;\n  if ( v4 )\n    sub_31240(v4, a2, a3);\n  buffer_free(v3[11]);\n  buffer_free(v3[10]);\n  free(v3[7]);\n  free(v3);\n}\n", 
            "funcStartAddr": "0x31240L", 
            "funcEndAddr": "0x31277L", 
            "funcName": "sub_31240"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_31280(__int64 *a1, _DWORD *a2, int a3, int a4)\n{\n  __int64 v4; // rbx\n  int v5; // er14\n  int v6; // ebp\n  __int64 v7; // r9\n  int result; // eax\n\n  v4 = *a1;\n  if ( *a1 )\n  {\n    v5 = a4;\n    v6 = a3;\n    do\n    {\n      v7 = *(unsigned int *)(v4 + 8);\n      if ( v6 > 2 )\n      {\n        result = log_error(\n                   a2,\n                   \"gw_backend.c\",\n                   1096LL,\n                   (__int64)\"proc: %s %d %d %d %d\",\n                   **(_QWORD **)(v4 + 80),\n                   v7,\n                   *(unsigned int *)(v4 + 44),\n                   *(unsigned int *)(v4 + 12),\n                   *(unsigned int *)(v4 + 40));\n        LODWORD(v7) = *(_DWORD *)(v4 + 8);\n      }\n      if ( (_DWORD)v7 )\n        result = sub_18DD5((__int64)a1, a2, v6, v5, v4);\n      v4 = *(_QWORD *)v4;\n    }\n    while ( v4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x31280L", 
            "funcEndAddr": "0x31324L", 
            "funcName": "sub_31280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31330(__int64 *a1, _DWORD **a2)\n{\n  _DWORD **v2; // rbp\n  _QWORD *v3; // rbx\n  __int64 result; // rax\n  __int64 v5; // rdx\n  int v6; // er8\n  _DWORD *v7; // rsi\n  int *v8; // r9\n  _DWORD *v9; // rdi\n  int v10; // ecx\n  int *v11; // rcx\n  int v12; // edx\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n\n  v2 = a2;\n  v3 = a1;\n  if ( *((_DWORD *)a1 + 34) >= 0 )\n  {\n    fdevent_fdnode_event_del(a1[15], a1[16]);\n    fdevent_sched_close((_QWORD *)a1[15], *((_DWORD *)a1 + 34), 1);\n    v13 = a1[40];\n    a1[16] = 0LL;\n    *((_DWORD *)a1 + 34) = -1;\n    if ( v13 )\n    {\n      *(_QWORD *)(v13 + 328) = a1[41];\n      result = a1[1];\n      v14 = a1[41];\n    }\n    else\n    {\n      result = a1[1];\n      v14 = a1[41];\n      *(_QWORD *)(result + 96) = v14;\n    }\n    if ( v14 )\n      *(_QWORD *)(v14 + 320) = v13;\n    a1[41] = 0LL;\n    a1[40] = 0LL;\n  }\n  else\n  {\n    result = a1[1];\n  }\n  if ( result )\n  {\n    v5 = *a1;\n    if ( *a1 )\n    {\n      v6 = *((_DWORD *)a1 + 64);\n      v7 = *(_DWORD **)(result + 32);\n      v8 = *(int **)(v5 + 24);\n      v9 = *v2;\n      v10 = *(_DWORD *)(v5 + 12) - 1;\n      *(_DWORD *)(v5 + 12) = v10;\n      *v8 = v10;\n      --*v7;\n      if ( v6 )\n      {\n        log_error(\n          v9,\n          \"gw_backend.c\",\n          349LL,\n          (__int64)\"released proc: pid: %d socket: %s load: %u\",\n          *(unsigned int *)(v5 + 40),\n          **(_QWORD **)(v5 + 80),\n          *(unsigned int *)(v5 + 12));\n        result = v3[1];\n      }\n      *v3 = 0LL;\n    }\n    v11 = *(int **)(result + 24);\n    v12 = *(_DWORD *)(result + 16) - 1;\n    *(_DWORD *)(result + 16) = v12;\n    *v11 = v12;\n    v3[1] = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x31330L", 
            "funcEndAddr": "0x31481L", 
            "funcName": "sub_31330"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31490(void *ptr, __int64 a2)\n{\n  void *v2; // rbx\n  signed int *v3; // r12\n  void (*v4)(void); // rax\n  void *v5; // rdi\n  __int64 result; // rax\n\n  v2 = ptr;\n  v3 = (signed int *)*((_QWORD *)ptr + 35);\n  sub_31330((__int64 *)ptr, (_DWORD **)(a2 + 128));\n  v4 = (void (*)(void))*((_QWORD *)ptr + 43);\n  if ( v4 )\n    v4();\n  chunk_buffer_release(*((_DWORD **)ptr + 14));\n  v5 = (void *)*((_QWORD *)ptr + 5);\n  if ( v5 )\n    chunkqueue_free(v5);\n  chunkqueue_reset((__int64)v2 + 56);\n  free(v2);\n  *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8LL * *v3) = 0LL;\n  result = *((_QWORD *)v3 + 2);\n  if ( *(_QWORD *)(a2 + 32) == result )\n    result = http_response_backend_done(a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x31490L", 
            "funcEndAddr": "0x31513L", 
            "funcName": "sub_31490"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31520(__int64 a1, __int64 a2, signed int a3, int a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // rbp\n  signed int v6; // er12\n  int v7; // ST1C_4\n  int v8; // eax\n  __int64 v9; // rsi\n  unsigned int v10; // er10\n  __int64 v11; // rdx\n  signed __int64 v12; // rdi\n  __int64 v13; // r8\n  unsigned int v14; // er8\n  __int64 v15; // rbx\n  __int64 *v17; // rax\n  __int64 v18; // r14\n  int v19; // ecx\n  __int64 v20; // rax\n  signed int v21; // er9\n  __int64 v22; // rdx\n  signed int v23; // edx\n  int v24; // ST1C_4\n  unsigned int v25; // eax\n  int v26; // eax\n  unsigned int v27; // er9\n  __int64 v28; // rdx\n  __int64 v29; // r8\n  unsigned int v30; // er8\n  signed int v31; // er10\n  __int64 *v32; // r9\n  __int64 v33; // r8\n  int v34; // edx\n  __int64 v35; // rax\n  __int64 v36; // rsi\n  signed __int64 v37; // rdi\n  signed __int64 v38; // rax\n  char **v39; // rax\n  char *v40; // r8\n  int v41; // ST1C_4\n  int v42; // er9\n  _DWORD *v43; // rdi\n  __int64 v44; // r8\n\n  v4 = a1;\n  v5 = a2;\n  v6 = *(_DWORD *)(a2 + 32);\n  if ( v6 > 1 )\n  {\n    if ( a3 != 1 )\n    {\n      if ( a3 <= 1 )\n      {\n        if ( a3 )\n          goto LABEL_16;\n        v9 = *(_QWORD *)(a2 + 24);\n        v20 = 0LL;\n        v21 = 0x7FFFFFFF;\n        v12 = -1LL;\n        do\n        {\n          v22 = *(_QWORD *)(v9 + 8 * v20);\n          if ( *(_DWORD *)(v22 + 8) )\n          {\n            v23 = *(_DWORD *)(v22 + 16);\n            if ( v23 < v21 )\n            {\n              v21 = v23;\n              v12 = (signed int)v20;\n            }\n          }\n          ++v20;\n        }\n        while ( (unsigned int)(v6 - 1) + 1LL != v20 );\n      }\n      else if ( a3 == 2 )\n      {\n        v24 = a4;\n        v25 = sub_311C0(\n                *(_QWORD *)(a1 + 296),\n                *(_DWORD *)(a1 + 304) - (unsigned int)(*(_DWORD *)(a1 + 304) != 0),\n                0x1505u);\n        v26 = sub_311C0(*(_QWORD *)(a1 + 280), *(_DWORD *)(a1 + 288) - (unsigned int)(*(_DWORD *)(a1 + 288) != 0), v25);\n        v9 = *(_QWORD *)(a2 + 24);\n        a4 = v24;\n        v27 = -1;\n        v28 = 0LL;\n        v12 = -1LL;\n        do\n        {\n          v29 = *(_QWORD *)(v9 + 8 * v28);\n          if ( *(_DWORD *)(v29 + 8) )\n          {\n            v30 = v26 ^ *(_DWORD *)(v29 + 12);\n            if ( v30 > v27 || v27 == -1 )\n            {\n              v27 = v30;\n              v12 = (signed int)v28;\n            }\n          }\n          ++v28;\n        }\n        while ( (unsigned int)(v6 - 1) + 1LL != v28 );\n      }\n      else\n      {\n        if ( a3 != 3 )\n          goto LABEL_16;\n        v7 = a4;\n        v8 = sub_311C0(\n               *(_QWORD *)(*(_QWORD *)(a1 + 48) + 1056LL),\n               *(_DWORD *)(*(_QWORD *)(a1 + 48) + 1064LL)\n             - (unsigned int)(*(_DWORD *)(*(_QWORD *)(a1 + 48) + 1064LL) != 0),\n               0x1505u);\n        v9 = *(_QWORD *)(a2 + 24);\n        a4 = v7;\n        v10 = -1;\n        v11 = 0LL;\n        v12 = -1LL;\n        do\n        {\n          v13 = *(_QWORD *)(v9 + 8 * v11);\n          if ( *(_DWORD *)(v13 + 8) )\n          {\n            v14 = v8 ^ *(_DWORD *)(v13 + 12) ^ *(unsigned __int16 *)(v13 + 40);\n            if ( v14 > v10 || v10 == -1 )\n            {\n              v10 = v14;\n              v12 = (signed int)v11;\n            }\n          }\n          ++v11;\n        }\n        while ( (unsigned int)(v6 - 1) + 1LL != v11 );\n      }\n      if ( (_DWORD)v12 != -1 )\n      {\n        v15 = *(_QWORD *)(v9 + 8 * v12);\n        goto LABEL_13;\n      }\nLABEL_16:\n      if ( !*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 912LL) + 166LL) && v6 > 0 )\n      {\n        v17 = *(__int64 **)(v5 + 24);\n        goto LABEL_19;\n      }\nLABEL_24:\n      v19 = *(_DWORD *)(v5 + 16);\n      *(_DWORD *)(v4 + 4) = 503;\n      *(_QWORD *)(v4 + 32) = 0LL;\n      if ( v19 )\n        return 0LL;\n      v42 = *(_DWORD *)(v4 + 320);\n      v43 = *(_DWORD **)(v4 + 128);\n      v44 = *(_QWORD *)(v4 + 296);\n      *(_DWORD *)(v5 + 16) = 1;\n      v15 = 0LL;\n      log_error(\n        v43,\n        \"gw_backend.c\",\n        995LL,\n        (__int64)\"all handlers for %s?%.*s on %s are down.\",\n        v44,\n        v42 - (unsigned int)(v42 != 0),\n        *(_QWORD *)(v4 + 312),\n        *(_QWORD *)v5);\n      return v15;\n    }\n    v31 = *(_DWORD *)(a2 + 20);\n    v32 = *(__int64 **)(a2 + 24);\n    v33 = *v32;\n    v34 = *(_DWORD *)(a2 + 20) + 1;\n    if ( v34 < 0 )\n      v34 = 0;\n    if ( v6 <= v34 )\n    {\n      v15 = *v32;\n    }\n    else\n    {\n      v15 = v32[v34];\n      if ( *(_DWORD *)(v15 + 8) )\n        goto LABEL_59;\n      v35 = v34 + 1;\n      v36 = v35 + (unsigned int)(v6 - 1 - v34);\n      v37 = (signed __int64)v32 + 8LL * v34 - 8LL * (unsigned int)(v34 + 1);\n      while ( 1 )\n      {\n        v34 = v35;\n        if ( v36 == v35 )\n          break;\n        v15 = *(_QWORD *)(v37 + 8 * v35++ + 8);\n        if ( *(_DWORD *)(v15 + 8) )\n          goto LABEL_59;\n      }\n    }\n    if ( v31 < 0 )\n    {\n      v33 = v15;\n      v34 = 0;\nLABEL_53:\n      if ( !*(_DWORD *)(v33 + 8) )\n      {\n        *(_DWORD *)(v5 + 20) = -1;\n        goto LABEL_16;\n      }\n      v15 = v32[v34];\n      goto LABEL_59;\n    }\n    if ( !*(_DWORD *)(v33 + 8) )\n    {\n      v38 = 1LL;\n      while ( 1 )\n      {\n        v34 = v38;\n        if ( v31 < (signed int)v38 )\n          goto LABEL_53;\n        v33 = v32[v38++];\n        if ( *(_DWORD *)(v33 + 8) )\n          goto LABEL_61;\n      }\n    }\n    v34 = 0;\nLABEL_61:\n    v15 = v33;\nLABEL_59:\n    *(_DWORD *)(v5 + 20) = v34;\n    goto LABEL_13;\n  }\n  if ( v6 != 1 )\n    goto LABEL_16;\n  v17 = *(__int64 **)(a2 + 24);\n  v15 = *v17;\n  if ( *(_DWORD *)(*v17 + 8) )\n  {\nLABEL_13:\n    if ( a4 )\n    {\n      v39 = *(char ***)(v15 + 48);\n      v40 = \"\";\n      if ( v39 )\n        v40 = *v39;\n      log_error(\n        *(_DWORD **)(v4 + 128),\n        \"gw_backend.c\",\n        969LL,\n        (__int64)\"gw - found a host %s %hu\",\n        v40,\n        *(unsigned __int16 *)(v15 + 40));\n    }\n    return v15;\n  }\n  if ( *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 912LL) + 166LL) )\n    goto LABEL_24;\nLABEL_19:\n  v18 = 0LL;\n  while ( 1 )\n  {\n    v15 = v17[v18];\n    if ( !(*(_QWORD *)(v15 + 72) & 0xFFFFFFFF0000FFFFLL) )\n    {\n      if ( *(_QWORD *)(v15 + 112) )\n      {\n        v41 = a4;\n        sub_19292(v15, *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 912LL) + 112LL), a4);\n        a4 = v41;\n        if ( *(_DWORD *)(v15 + 76) )\n          return v15;\n      }\n    }\n    if ( v6 <= (signed int)++v18 )\n      goto LABEL_24;\n    v17 = *(__int64 **)(v5 + 24);\n  }\n}\n", 
            "funcStartAddr": "0x31520L", 
            "funcEndAddr": "0x31986L", 
            "funcName": "sub_31520"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31990(void *ptr, __int64 a2)\n{\n  __int64 v2; // r12\n  _DWORD *v3; // rbx\n  void **v4; // r13\n  __int64 v5; // r14\n  unsigned int v6; // ebp\n  __int64 v7; // r13\n  __int64 v8; // rax\n  bool v10; // zf\n  int v11; // eax\n  __int64 v12; // r14\n  __int64 v13; // r13\n  __int64 v14; // rax\n  signed __int64 v15; // rsi\n  __int64 v16; // rdi\n  __int64 v17; // rax\n  bool v18; // sf\n  unsigned __int8 v19; // of\n  __int64 v20; // rdx\n  __int64 v21; // rcx\n  __int64 v22; // r9\n  _DWORD *v23; // rdi\n  __int64 v24; // rax\n  __int64 v25; // r8\n  signed int v26; // esi\n  __int64 v27; // rax\n  _DWORD *v28; // rbp\n  __int64 v29; // r14\n\n  v2 = a2;\n  v3 = ptr;\n  if ( (*((_DWORD *)ptr + 42) - 2) & 0xFFFFFFFD )\n    v4 = (void **)*((_QWORD *)ptr + 14);\n  else\n    v4 = chunk_buffer_acquire();\n  v5 = *(_QWORD *)(a2 + 640);\n  v6 = http_response_read(a2, (char *)ptr + 160, v4, *((_QWORD *)ptr + 16));\n  if ( *((void ***)ptr + 14) != v4 )\n    chunk_buffer_release(v4);\n  v7 = *(_QWORD *)ptr;\n  if ( v6 == 2 || v6 == 4 )\n  {\n    if ( *(_DWORD *)(v7 + 44) )\n    {\n      if ( *(_DWORD *)(v7 + 12) == 1 && *(_DWORD *)(v7 + 40) == *((_DWORD *)ptr + 36) && *(_DWORD *)(v7 + 8) != 3 )\n      {\n        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 912LL);\n        if ( !*(_WORD *)(v27 + 166) )\n        {\n          v28 = *(_DWORD **)(v27 + 112);\n          v29 = *((_QWORD *)ptr + 1);\n          if ( *(_QWORD *)(v7 + 64) < log_monotonic_secs )\n          {\n            if ( (unsigned int)sub_1872C(*((_QWORD *)ptr + 1), *(_QWORD *)ptr, v28) )\n            {\n              if ( *((_DWORD *)ptr + 64) )\n                log_error(\n                  v28,\n                  \"gw_backend.c\",\n                  2373LL,\n                  (__int64)\"--- gw spawning\\n\\tsocket %s\\n\\tcurrent: 1/%d\",\n                  **(_QWORD **)(v7 + 80),\n                  *(unsigned int *)(v29 + 76));\n              if ( (unsigned int)sub_1880E(v29, v7, v28, *((_DWORD *)ptr + 64)) )\n                log_error(v28, \"gw_backend.c\", 2379LL, (__int64)\"respawning failed, will retry later\");\n            }\n          }\n        }\n      }\n    }\n    if ( *(_BYTE *)(a2 + 561) )\n    {\n      if ( !(*(_BYTE *)(a2 + 534) & 2) )\n        log_error(\n          *(_DWORD **)(a2 + 128),\n          \"gw_backend.c\",\n          2404LL,\n          (__int64)\"response already sent out, but backend returned error on socket: %s for %s?%.*s, terminating connection\",\n          **(_QWORD **)(v7 + 80),\n          *(_QWORD *)(a2 + 296),\n          *(_DWORD *)(a2 + 320) - (unsigned int)(*(_DWORD *)(a2 + 320) != 0),\n          *(_QWORD *)(a2 + 312));\n    }\n    else\n    {\n      v20 = *((_QWORD *)ptr + 10);\n      v21 = *(_QWORD *)(a2 + 312);\n      v22 = *(_QWORD *)(a2 + 296);\n      v23 = *(_DWORD **)(a2 + 128);\n      v24 = *(_DWORD *)(a2 + 320) - (unsigned int)(*(_DWORD *)(a2 + 320) != 0);\n      v25 = **(_QWORD **)(v7 + 80);\n      if ( !v20 )\n      {\n        v26 = v3[37];\n        v3[37] = v26 + 1;\n        if ( v26 <= 4 )\n        {\n          log_error(\n            v23,\n            \"gw_backend.c\",\n            2389LL,\n            (__int64)\"response not received, request not sent on socket: %s for %s?%.*s, reconnecting\",\n            v25,\n            v22,\n            v24);\n          return sub_193E2((__int64)v3, v2);\n        }\n      }\n      log_error(\n        v23,\n        \"gw_backend.c\",\n        2398LL,\n        (__int64)\"response not received, request sent: %lld on socket: %s for %s?%.*s, closing connection\",\n        v20,\n        v25,\n        v22,\n        v24,\n        v21);\n    }\n    return sub_190DD(v3, v2);\n  }\n  if ( v6 != 1 )\n  {\n    v6 = 0;\n    if ( *(_QWORD *)(a2 + 640) > v5 )\n    {\n      v8 = log_monotonic_secs;\n      *(_QWORD *)(v7 + 16) = log_monotonic_secs;\n      *((_QWORD *)ptr + 36) = v8;\n    }\n    return v6;\n  }\n  v10 = *((_WORD *)ptr + 16) == 2;\n  *(_QWORD *)(v7 + 16) = log_monotonic_secs;\n  if ( v10 )\n  {\n    v11 = *(_DWORD *)(a2 + 4);\n    if ( v11 == 200 || !v11 )\n    {\n      v12 = *((_QWORD *)ptr + 1);\n      v13 = 0LL;\n      v14 = *(_QWORD *)(v12 + 136);\n      if ( v14 )\n      {\n        buffer_copy_string_len(\n          a2 + 360,\n          *(const void **)v14,\n          *(_DWORD *)(v14 + 8) - (unsigned int)(*(_DWORD *)(v14 + 8) != 0));\n        buffer_copy_string_len(\n          a2 + 344,\n          **(const void ***)(v12 + 136),\n          *(_DWORD *)(*(_QWORD *)(v12 + 136) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v12 + 136) + 8LL) != 0));\n        buffer_copy_path_len2(\n          a2 + 328,\n          **(const void ***)(v12 + 136),\n          *(_DWORD *)(*(_QWORD *)(v12 + 136) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v12 + 136) + 8LL) != 0),\n          *(_BYTE **)(a2 + 296),\n          *(_DWORD *)(a2 + 304) - (unsigned int)(*(_DWORD *)(a2 + 304) != 0));\n        v13 = *(_QWORD *)(a2 + 328);\n      }\n      v15 = a2 + 128;\n      *(_WORD *)(v2 + 150) |= *((_DWORD *)ptr + 43) >> 1;\n      sub_31330((__int64 *)ptr, (_DWORD **)(v2 + 128));\n      *(_QWORD *)ptr = 0LL;\n      *((_QWORD *)ptr + 1) = 0LL;\n      *((_WORD *)ptr + 16) = 1;\n      v16 = *((_QWORD *)ptr + 5);\n      *((_QWORD *)v3 + 2) = 0LL;\n      v3[9] = 0;\n      if ( v16 )\n        chunkqueue_reset(v16);\n      chunkqueue_reset((__int64)(v3 + 14));\n      v17 = *((_QWORD *)v3 + 14);\n      *((_QWORD *)v3 + 6) = 0LL;\n      if ( v17 )\n        *(_DWORD *)(v17 + 8) = 0;\n      v3[34] = -1;\n      *(_QWORD *)(v3 + 37) = 0LL;\n      v3[39] = 1;\n      v19 = __OFSUB__(*(_BYTE *)(v2 + 565) + 1, 5);\n      v10 = *(_BYTE *)(v2 + 565) == 4;\n      v18 = (char)((*(_BYTE *)(v2 + 565))++ - 4) < 0;\n      if ( (unsigned __int8)(v18 ^ v19) | v10 )\n      {\n        if ( v13 )\n        {\n          *(_QWORD *)(v2 + 328) = 0LL;\n          http_response_reset(v2, v15);\n          *(_QWORD *)(v2 + 328) = v13;\n        }\n        else\n        {\n          http_response_reset(v2, v15);\n        }\n        *(_QWORD *)(v2 + 32) = 0LL;\n        v6 = 2;\n      }\n      else\n      {\n        log_error(\n          *(_DWORD **)(v2 + 128),\n          \"gw_backend.c\",\n          2292LL,\n          (__int64)\"too many loops while processing request: %s\",\n          *(_QWORD *)(v2 + 472));\n        *(_DWORD *)(v2 + 4) = 500;\n        *(_QWORD *)(v2 + 32) = 0LL;\n      }\n      return v6;\n    }\n  }\n  sub_31490(ptr, a2);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x31990L", 
            "funcEndAddr": "0x31e68L", 
            "funcName": "sub_31990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31E70(void *ptr, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 *v3; // rbx\n  int v4; // eax\n  __int64 v5; // rcx\n  __int64 v6; // rax\n  unsigned int v7; // esi\n  __int64 result; // rax\n  unsigned int v9; // ST1C_4\n  __int64 v10; // rsi\n  __int64 v11; // rdi\n  __int64 v12; // r13\n  _DWORD *v13; // r12\n  __int64 v14; // rax\n  __int64 (__fastcall *v15)(__int64 *); // rcx\n  __int64 v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rsi\n  signed __int64 v19; // rax\n  __int16 v20; // dx\n  __int64 **v21; // rdi\n  __int64 *v22; // rax\n  __int64 *v23; // rdx\n  unsigned int i; // ecx\n  unsigned int v25; // esi\n  __int64 *v26; // rdx\n  int *v27; // rsi\n  int v28; // ecx\n  int v29; // edi\n  int v30; // eax\n  _QWORD *v31; // rdi\n  char *v32; // rax\n  __int64 v33; // r12\n  __int64 v34; // rax\n  __int64 v35; // r14\n  __int64 v36; // rax\n  unsigned int v37; // er15\n  socklen_t v38; // edx\n  const struct sockaddr *v39; // rsi\n  int v40; // er13\n  bool v41; // zf\n  int v42; // eax\n  __int64 v43; // rdi\n  int v44; // er8\n  int v45; // [rsp+Ch] [rbp-3Ch]\n\n  v2 = a2;\n  v3 = (__int64 *)ptr;\n  switch ( *((_DWORD *)ptr + 9) )\n  {\n    case 0:\n      *(_QWORD *)ptr = 0LL;\n      v21 = (__int64 **)*((_QWORD *)ptr + 1);\n      v22 = *v21;\n      if ( !*v21 )\n        return sub_19463(v3, v2);\n      while ( *((_DWORD *)v22 + 2) )\n      {\n        v22 = (__int64 *)*v22;\n        if ( !v22 )\n          return sub_19463(v3, v2);\n      }\n      v23 = (__int64 *)*v22;\n      *v3 = (__int64)v22;\n      for ( i = *((_DWORD *)v22 + 3); v23; v23 = (__int64 *)*v23 )\n      {\n        if ( !*((_DWORD *)v23 + 2) )\n        {\n          v25 = *((_DWORD *)v23 + 3);\n          if ( v25 < i )\n          {\n            *v3 = (__int64)v23;\n            i = v25;\n            v22 = v23;\n          }\n        }\n      }\n      v26 = v21[4];\n      v27 = (int *)v22[3];\n      v28 = i + 1;\n      *((_DWORD *)v22 + 3) = v28;\n      v29 = *((unsigned __int16 *)v21 + 21);\n      *v27 = v28;\n      ++*(_DWORD *)v26;\n      v30 = fdevent_socket_nb_cloexec(0, (__int64)v3, v29, 1);\n      *((_DWORD *)v3 + 34) = v30;\n      if ( v30 == -1 )\n      {\n        log_perror(\n          *(_DWORD **)(v2 + 128),\n          \"gw_backend.c\",\n          1944LL,\n          (__int64)\"socket() failed (cur_fds:%d) (max_fds:%d)\",\n          *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 912LL) + 84LL),\n          *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 912LL) + 72LL));\n        return sub_19463(v3, v2);\n      }\n      v31 = (_QWORD *)v3[15];\n      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 912LL) + 84LL);\n      v32 = fdevent_register(v31, v30, (__int64)sub_31200, (__int64)v3);\n      v33 = *v3;\n      v3[16] = (__int64)v32;\n      if ( *(_DWORD *)(v33 + 44) )\n      {\n        v45 = *(_DWORD *)(v33 + 40);\n        *((_DWORD *)v3 + 36) = v45;\n      }\n      else\n      {\n        v45 = *((_DWORD *)v3 + 36);\n      }\n      v34 = log_monotonic_secs;\n      v35 = v3[1];\n      v3[40] = 0LL;\n      v3[37] = v34;\n      v36 = *(_QWORD *)(v35 + 96);\n      v3[41] = v36;\n      if ( v36 )\n        *(_QWORD *)(v36 + 320) = v3;\n      v37 = *((_DWORD *)v3 + 34);\n      v38 = *(_DWORD *)(v33 + 52);\n      v39 = *(const struct sockaddr **)(v33 + 56);\n      *(_QWORD *)(v35 + 96) = v3;\n      v40 = *((_DWORD *)v3 + 64);\n      if ( connect(v37, v39, v38) != -1 )\n      {\n        if ( v40 > 1 )\n          log_error(*(_DWORD **)(v2 + 128), \"gw_backend.c\", 1023LL, (__int64)\"connect succeeded: %d\", v37);\n        v41 = *((_DWORD *)v3 + 9) == 1;\n        *((_DWORD *)v3 + 37) = 0;\n        if ( !v41 )\n        {\n          v5 = log_monotonic_secs;\n          goto LABEL_4;\n        }\n        goto LABEL_2;\n      }\n      v44 = *__errno_location();\n      if ( (unsigned int)(v44 - 114) > 1 && v44 != 4 && (v44 != 11 || !*(_QWORD *)(v35 + 104)) )\n      {\n        sub_1857F(*(_DWORD **)(v2 + 128), v35, v33, v45, v44, v40);\n        return sub_19463(v3, v2);\n      }\n      if ( v40 > 2 )\n        log_error(\n          *(_DWORD **)(v2 + 128),\n          \"gw_backend.c\",\n          1010LL,\n          (__int64)\"connect delayed; will continue later: %s\",\n          **(_QWORD **)(v33 + 80));\n      fdevent_fdnode_event_set(v3[15], v3[16], 4u);\n      *((_DWORD *)v3 + 9) = 1;\n      return 3LL;\n    case 1:\nLABEL_2:\n      v4 = fdevent_connect_status(*((_DWORD *)v3 + 34));\n      if ( v4 )\n      {\n        sub_1857F(*(_DWORD **)(v2 + 128), v3[1], *v3, *((_DWORD *)v3 + 36), v4, *((_DWORD *)v3 + 64));\n        return sub_19463(v3, v2);\n      }\n      v5 = log_monotonic_secs;\n      v3[37] = log_monotonic_secs;\nLABEL_4:\n      v6 = *v3;\n      v7 = *((_DWORD *)v3 + 64);\n      ++**(_DWORD **)(*v3 + 32);\n      *(_QWORD *)(v6 + 16) = v5;\n      if ( v7 )\n        log_error(\n          *(_DWORD **)(v2 + 128),\n          \"gw_backend.c\",\n          274LL,\n          (__int64)\"got proc: pid: %d socket: %s load: %d\",\n          *(unsigned int *)(v6 + 40),\n          **(_QWORD **)(v6 + 80),\n          *(unsigned int *)(v6 + 12));\n      *((_DWORD *)v3 + 9) = 2;\n      goto LABEL_7;\n    case 2:\nLABEL_7:\n      result = ((__int64 (__fastcall *)(__int64 *))v3[39])(v3);\n      if ( (_DWORD)result )\n      {\n        if ( (_DWORD)result != 1 && (_DWORD)result != 4 )\n        {\n          v9 = result;\n          fdevent_fdnode_event_clr(v3[15], v3[16], 4);\n          result = v9;\n        }\nLABEL_11:\n        if ( (_DWORD)result != 4 )\n          return result;\n        return sub_19463(v3, v2);\n      }\n      if ( *(_WORD *)(v3[1] + 42) != 1 && *(_QWORD *)(v2 + 416) < 0 )\n        fdevent_set_tcp_nodelay(*((_DWORD *)v3 + 34), 1);\n      v10 = v3[16];\n      v11 = v3[15];\n      v3[36] = log_monotonic_secs;\n      fdevent_fdnode_event_add(v11, v10, 8193);\n      *((_DWORD *)v3 + 9) = 3;\nLABEL_17:\n      v12 = v3[10];\n      if ( v3[7] )\n      {\n        v13 = *(_DWORD **)(v2 + 128);\n        if ( (*(signed int (__fastcall **)(_QWORD, unsigned int *, signed __int64, _QWORD))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 912LL)\n                                                                                          + 32LL))(\n               *((unsigned int *)v3 + 34),\n               (unsigned int *)v3 + 14,\n               0x40000LL,\n               *(_QWORD *)(v2 + 128)) < 0 )\n        {\n          v42 = *__errno_location();\n          if ( v42 == 104 || v42 == 107 || v42 == 32 )\n            log_error(\n              v13,\n              \"gw_backend.c\",\n              2035LL,\n              (__int64)\"connection was dropped after accept() (perhaps the gw process died), write-offset: %lld socket: %s\",\n              v3[10],\n              **(_QWORD **)(*v3 + 80));\n          else\n            log_perror(v13, \"gw_backend.c\", 2043LL, (__int64)\"write failed\");\n          return sub_19463(v3, v2);\n        }\n        v14 = v3[10];\n        if ( v14 > v12 )\n        {\n          v15 = (__int64 (__fastcall *)(__int64 *))v3[38];\n          v16 = log_monotonic_secs;\n          *(_QWORD *)(*v3 + 16) = log_monotonic_secs;\n          v3[37] = v16;\n          v14 = v3[10];\n          if ( v15 )\n          {\n            if ( v3[9] - v14 <= 49151 && *(_QWORD *)(v2 + 736) )\n            {\n              result = v15(v3);\n              if ( (_DWORD)result )\n                goto LABEL_11;\n              v14 = v3[10];\n            }\n          }\n        }\n      }\n      else\n      {\n        v14 = v3[10];\n      }\n      v17 = v3[6];\n      v18 = v3[16];\n      if ( v17 == v14 )\n      {\n        fdevent_fdnode_event_clr(v3[15], v18, 4);\n        *((_DWORD *)v3 + 9) = 4;\n        goto LABEL_33;\n      }\n      v19 = v3[9] - v14;\n      if ( v17 >= 0 && v17 <= v3[9] )\n        goto LABEL_31;\n      if ( v19 <= 49151 )\n      {\n        v20 = *(_WORD *)(v2 + 148);\n        if ( v20 >= 0 )\n        {\n          *(_WORD *)(v2 + 148) = v20 | 0x8000;\n          *(_BYTE *)(*(_QWORD *)(v2 + 48) + 840LL) = 1;\n        }\nLABEL_31:\n        if ( !v19 )\n        {\n          fdevent_fdnode_event_clr(v3[15], v18, 4);\n          goto LABEL_33;\n        }\n      }\n      if ( !v18 || !(*(_BYTE *)(v18 + 20) & 4) )\n      {\n        v43 = v3[15];\n        v3[37] = log_monotonic_secs;\n        fdevent_fdnode_event_add(v43, v18, 4);\n      }\nLABEL_33:\n      if ( !(*(_BYTE *)(v2 + 149) & 0x20) )\n        return 3LL;\n      sub_19113((__int64)v3, v2 + 48, (_WORD *)(v2 + 148));\n      return 3LL;\n    case 3:\n      goto LABEL_17;\n    case 4:\n      return 3LL;\n    default:\n      log_error(*(_DWORD **)(a2 + 128), \"gw_backend.c\", 2091LL, (__int64)\"(debug) unknown state\");\n      return sub_19463(v3, v2);\n  }\n}\n", 
            "funcStartAddr": "0x31e70L", 
            "funcEndAddr": "0x32501L", 
            "funcName": "sub_31E70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_32510(unsigned __int16 a1, unsigned __int16 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r12\n  __int64 v5; // rax\n  int v6; // eax\n  __int64 v7; // rbx\n  __int64 v8; // ST08_8\n  __int64 v9; // ST08_8\n  __int64 v10; // ST08_8\n\n  if ( a4 && a1 | (unsigned __int16)(a3 | a2) )\n  {\n    a3 = (unsigned __int16)a3;\n    v4 = log_monotonic_secs;\n    do\n    {\n      v7 = *(_QWORD *)(a4 + 328);\n      if ( *(_DWORD *)(a4 + 36) == 1 )\n      {\n        if ( a3 < v4 - *(_QWORD *)(a4 + 296) )\n        {\n          if ( a3 )\n          {\n            v8 = a3;\n            sub_1950E((void *)a4, \"connect\");\n            a3 = v8;\n          }\n        }\n      }\n      else\n      {\n        v5 = *(_QWORD *)(a4 + 128);\n        if ( v5 )\n        {\n          v6 = *(_DWORD *)(v5 + 20);\n          if ( v6 & 1 && a1 < v4 - *(_QWORD *)(a4 + 288) && a1 )\n          {\n            v9 = a3;\n            sub_1950E((void *)a4, \"read\");\n            a3 = v9;\n          }\n          else if ( v6 & 4 && a2 < v4 - *(_QWORD *)(a4 + 296) && a2 )\n          {\n            v10 = a3;\n            sub_1950E((void *)a4, \"write\");\n            a3 = v10;\n          }\n        }\n      }\n      a4 = v7;\n    }\n    while ( v7 );\n  }\n}\n", 
            "funcStartAddr": "0x32510L", 
            "funcEndAddr": "0x32622L", 
            "funcName": "sub_32510"
        }, 
        {
            "decompiledFuncCode": "int __fastcall gw_set_transparent(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = *(_QWORD *)(a1 + 8);\n  if ( *(_WORD *)(v1 + 42) != 1 )\n    LODWORD(v1) = fdevent_set_tcp_nodelay(*(_DWORD *)(a1 + 136), 1);\n  *(_QWORD *)(a1 + 48) = -1LL;\n  *(_DWORD *)(a1 + 36) = 3;\n  return v1;\n}\n", 
            "funcStartAddr": "0x32630L", 
            "funcEndAddr": "0x32660L", 
            "funcName": "gw_set_transparent"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_handle_request_reset(__int64 a1, signed int *a2)\n{\n  __int64 v2; // rdx\n\n  v2 = *a2;\n  if ( *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2) )\n    sub_31490(*(void **)(*(_QWORD *)(a1 + 40) + 8 * v2), a1);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x32660L", 
            "funcEndAddr": "0x32693L", 
            "funcName": "gw_handle_request_reset"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall gw_handle_subrequest(__int64 a1, signed int *a2)\n{\n  __int64 v2; // rbx\n  int v3; // er13\n  __int64 v4; // rbp\n  __int64 v5; // rsi\n  unsigned int v6; // er12\n  __int64 v7; // rsi\n  __int64 v8; // rdi\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  signed __int64 v12; // rdx\n  __int64 v13; // rax\n  __int16 v15; // r13\n  unsigned int v16; // er12\n  unsigned int v17; // er12\n  __int64 (__fastcall *v18)(__int64); // rdx\n  unsigned int v19; // eax\n  __int64 v20; // rax\n  __int64 (__fastcall *v21)(__int64); // rax\n  __int16 v22; // dx\n\n  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8LL * *a2);\n  if ( !v2 )\n    return 0LL;\n  v3 = *(_DWORD *)(v2 + 140);\n  v4 = a1;\n  if ( !v3 )\n    goto LABEL_3;\n  *(_DWORD *)(v2 + 140) = 0;\n  if ( !(v3 & 1) || (v16 = sub_31990((void *)v2, a1)) == 0 )\n  {\n    if ( v3 & 4 )\n      goto LABEL_76;\n    if ( !(v3 & 0x2010) )\n    {\n      if ( !(v3 & 8) )\n        goto LABEL_3;\n      log_error(*(_DWORD **)(a1 + 128), \"gw_backend.c\", 2463LL, (__int64)\"gw: got a FDEVENT_ERR. Don't know why.\");\n      v16 = sub_190DD((void *)v2, a1);\n      goto LABEL_48;\n    }\n    if ( *(_DWORD *)(v2 + 36) == 1 )\n    {\nLABEL_76:\n      v16 = sub_31E70((void *)v2, a1);\n    }\n    else\n    {\n      if ( !*(_BYTE *)(a1 + 561) )\n      {\n        v6 = 1;\n        log_error(\n          *(_DWORD **)(a1 + 128),\n          \"gw_backend.c\",\n          2453LL,\n          (__int64)\"error: unexpected close of gw connection for %s?%.*s (no gw process on socket: %s ?) %d\",\n          *(_QWORD *)(a1 + 296),\n          *(_DWORD *)(a1 + 320) - (unsigned int)(*(_DWORD *)(a1 + 320) != 0),\n          *(_QWORD *)(a1 + 312),\n          **(_QWORD **)(*(_QWORD *)v2 + 80LL),\n          *(unsigned int *)(v2 + 36));\n        sub_31490((void *)v2, a1);\n        return v6;\n      }\n      v15 = *(_WORD *)(a1 + 150);\n      *(_WORD *)(a1 + 150) = *(_WORD *)(a1 + 150) & 0xFFFD | 0x8000;\n      do\n        v16 = sub_31990((void *)v2, a1);\n      while ( !v16 );\n      *(_WORD *)(a1 + 150) = v15;\n    }\n  }\nLABEL_48:\n  if ( v16 && v16 != 3 )\n    return v16;\nLABEL_3:\n  if ( *(_BYTE *)(a1 + 150) & 2 && *(_BYTE *)(a1 + 561) )\n  {\n    v5 = *(_QWORD *)(v2 + 128);\n    if ( *(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 648) > 61440LL )\n    {\n      fdevent_fdnode_event_clr(*(_QWORD *)(v2 + 120), v5, 1);\n    }\n    else if ( !v5 || !(*(_BYTE *)(v5 + 20) & 1) )\n    {\n      v6 = sub_31990((void *)v2, a1);\n      if ( v6 )\n        return v6;\n      v7 = *(_QWORD *)(v2 + 128);\n      v8 = *(_QWORD *)(v2 + 120);\n      *(_QWORD *)(v2 + 288) = log_monotonic_secs;\n      fdevent_fdnode_event_add(v8, v7, 1);\n    }\n  }\n  v9 = *(_QWORD *)(v2 + 72);\n  if ( *(_WORD *)(v2 + 32) == 2 )\n    goto LABEL_36;\n  if ( !v9 )\n  {\n    if ( *(_DWORD *)v4 != 4 && *(_QWORD *)(v2 + 48) != -1LL )\n      goto LABEL_21;\n    goto LABEL_14;\n  }\n  v10 = *(_QWORD *)(v2 + 48);\n  if ( v10 < 0 || v10 > v9 )\n  {\nLABEL_14:\n    if ( v9 - *(_QWORD *)(v2 + 80) > 61440 )\n    {\n      v22 = *(_WORD *)(v4 + 148);\n      if ( v22 & 2 )\n        *(_WORD *)(v4 + 148) = v22 & 0x7FFF;\n      if ( v9 )\n        return 3;\n      goto LABEL_21;\n    }\n    v6 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)(v4 + 48) + 904LL))(v4);\n    v11 = *(_QWORD *)(v4 + 416);\n    if ( v11 == -1 )\n    {\n      if ( *(_DWORD *)(v2 + 168) )\n      {\n        if ( !(*(_BYTE *)(v4 + 148) & 1) )\n          return 3;\n        return http_response_reqbody_read_error(v4, 411);\n      }\n    }\n    else\n    {\n      v12 = *(_QWORD *)(v2 + 48);\n      if ( v12 < -1 && v11 >= 0 )\n      {\n        v21 = *(__int64 (__fastcall **)(__int64))(v2 + 304);\n        *(_QWORD *)(v2 + 48) = -v12;\n        if ( v21 )\n        {\n          v19 = v21(v2);\n          if ( v19 )\n            return v19;\n        }\n      }\n    }\n    v13 = *(_QWORD *)(v2 + 72);\n    if ( !v13 && *(_QWORD *)(v2 + 48) != -1LL )\n    {\n      if ( !v6 )\n        goto LABEL_21;\n      return v6;\n    }\n    if ( *(_QWORD *)(v4 + 736) )\n    {\n      v18 = *(__int64 (__fastcall **)(__int64))(v2 + 304);\n      if ( v18 )\n      {\n        if ( v13 - *(_QWORD *)(v2 + 80) <= 49151 )\n        {\n          v19 = v18(v2);\n          if ( v19 )\n            return v19;\n        }\n      }\n      else\n      {\n        chunkqueue_append_chunkqueue(v2 + 56, (__int64 *)(v4 + 736));\n      }\n      v20 = *(_QWORD *)(v2 + 128);\n      if ( v20 )\n      {\n        if ( *(_BYTE *)(v20 + 20) & 4 )\n        {\n          if ( v6 )\n            return v6;\n          return 3;\n        }\n      }\n    }\n    if ( v6 )\n      return v6;\n    v9 = *(_QWORD *)(v2 + 72);\nLABEL_36:\n    if ( v9 )\n      goto LABEL_37;\nLABEL_21:\n    if ( *(_DWORD *)(v2 + 36) == 1 )\n      goto LABEL_22;\n    goto LABEL_39;\n  }\nLABEL_37:\n  if ( !*(_QWORD *)(v2 + 56) || *(_DWORD *)(v2 + 36) == 1 )\n    goto LABEL_22;\nLABEL_39:\n  v17 = sub_31E70((void *)v2, v4);\n  if ( v17 == 3 )\n  {\nLABEL_22:\n    if ( *(_BYTE *)(v4 + 149) & 0x20 )\n      sub_19113(v2, v4 + 48, (_WORD *)(v4 + 148));\n    return 3;\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x326a0L", 
            "funcEndAddr": "0x32b46L", 
            "funcName": "gw_handle_subrequest"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall gw_check_extension(__int64 a1, signed int *a2, int a3, size_t a4)\n{\n  signed __int64 v4; // rax\n  signed int *v5; // r14\n  __int64 v6; // rdx\n  __int64 v7; // r15\n  __int64 v8; // rax\n  __int64 v9; // rax\n  unsigned int v10; // ebp\n  __int64 v11; // rdi\n  __int64 v12; // r13\n  __int64 v13; // rax\n  __int64 v14; // r12\n  unsigned int v15; // er14\n  __int64 v16; // rbx\n  __int64 v17; // r12\n  unsigned int v18; // ebx\n  __int64 v19; // rax\n  __int64 v20; // rbx\n  __int64 v21; // rax\n  __int64 v22; // rdx\n  _DWORD *v23; // rdx\n  __int16 v24; // dx\n  signed int v25; // eax\n  __int64 v26; // rdx\n  bool v27; // zf\n  __int64 v28; // rax\n  __int64 v30; // rbx\n  unsigned int v31; // er14\n  _BYTE *v32; // rsi\n  size_t v33; // rdx\n  __int64 v34; // rax\n  __int64 v35; // rbp\n  char *v36; // rax\n  __int64 v37; // rbp\n  size_t v38; // rax\n  _QWORD *v39; // [rsp+8h] [rbp-80h]\n  signed __int16 v40; // [rsp+16h] [rbp-72h]\n  signed int *v41; // [rsp+18h] [rbp-70h]\n  unsigned int v42; // [rsp+18h] [rbp-70h]\n  __int64 v43; // [rsp+20h] [rbp-68h]\n  signed int *v44; // [rsp+20h] [rbp-68h]\n  __int64 v45; // [rsp+28h] [rbp-60h]\n  char *v46; // [rsp+38h] [rbp-50h]\n  size_t size; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+48h] [rbp-40h]\n  unsigned int v49; // [rsp+4Ch] [rbp-3Ch]\n\n  v4 = a1 + 296;\n  v5 = a2;\n  v48 = a3;\n  size = a4;\n  if ( !a3 )\n    v4 = a1 + 328;\n  v39 = (_QWORD *)v4;\n  v49 = *(_DWORD *)(v4 + 8) - (*(_DWORD *)(v4 + 8) != 0);\n  if ( *(_DWORD *)(v4 + 8) == (*(_DWORD *)(v4 + 8) != 0) )\n    return 0LL;\n  v6 = *a2;\n  v7 = a1;\n  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);\n  v45 = *((_QWORD *)a2 + 6);\n  v46 = *(char **)(*(_QWORD *)(a1 + 40) + 8 * v6);\n  if ( v8 && *(_QWORD *)(v8 + 24) )\n    goto LABEL_6;\n  v9 = *((_QWORD *)a2 + 5);\n  v40 = 2;\n  v10 = *(_DWORD *)(v9 + 8);\n  if ( !v10 )\n    goto LABEL_6;\n  while ( 1 )\n  {\n    v11 = *((_QWORD *)v5 + 7);\n    v12 = *(_QWORD *)v9;\n    v43 = *(_QWORD *)v9;\n    if ( v11 )\n    {\n      v13 = array_match_key_suffix(v11, v39);\n      if ( v13 )\n      {\n        v41 = v5;\n        v14 = v13 + 32;\n        v15 = 0;\n        do\n        {\n          v16 = v12;\n          if ( (unsigned int)buffer_is_equal(v14, v12) )\n            break;\n          ++v15;\n          v12 += 40LL;\n        }\n        while ( v15 < v10 );\n        v17 = v16;\n        v18 = v15;\n        v5 = v41;\n        if ( v18 != v10 )\n          break;\n      }\n    }\n    v30 = v43;\n    v44 = v5;\n    v42 = *(_DWORD *)(v7 + 304) - (*(_DWORD *)(v7 + 304) != 0);\n    v31 = 0;\n    do\n    {\n      v32 = *(_BYTE **)v30;\n      v33 = *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0);\n      if ( **(_BYTE **)v30 == 47 )\n      {\n        if ( v42 >= *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0)\n          && !memcmp(*(const void **)(v7 + 296), v32, v33) )\n        {\n          goto LABEL_32;\n        }\n      }\n      else if ( v49 >= v33 && !memcmp((const void *)(*v39 + v49 - v33), v32, v33) )\n      {\nLABEL_32:\n        v17 = v30;\n        v5 = v44;\n        goto LABEL_15;\n      }\n      ++v31;\n      v30 += 40LL;\n    }\n    while ( v31 < v10 );\n    v5 = v44;\n    if ( v40 == 1 )\n      return 0LL;\nLABEL_6:\n    v9 = v45;\n    v10 = *(_DWORD *)(v45 + 8);\n    if ( !v10 )\n      return 0LL;\n    v40 = 1;\n  }\nLABEL_15:\n  v19 = sub_31520(v7, v17, v5[16], v5[18]);\n  v20 = v19;\n  if ( v19 )\n  {\n    *(_DWORD *)(v17 + 16) = 0;\n    if ( v48 )\n    {\n      if ( *(_WORD *)(v19 + 146) )\n        return 0LL;\n      if ( **(_BYTE **)v17 == 47 && v40 != 2 )\n      {\n        v34 = *(_DWORD *)(v17 + 8) - (unsigned int)(*(_DWORD *)(v17 + 8) != 0);\n        if ( (_DWORD)v34 == 1 && *(_WORD *)(v20 + 148) )\n        {\n          buffer_copy_string_len(\n            v7 + 488,\n            *(const void **)(v7 + 296),\n            *(_DWORD *)(v7 + 304) - (unsigned int)(*(_DWORD *)(v7 + 304) != 0));\n          **(_BYTE **)(v7 + 296) = 0;\n          *(_DWORD *)(v7 + 304) = 1;\n        }\n        else if ( v49 > (unsigned int)v34 )\n        {\n          v35 = *(_QWORD *)(v7 + 296);\n          v36 = strchr((const char *)(v35 + v34), 47);\n          if ( v36 )\n          {\n            v37 = v49 + v35 - (_QWORD)v36;\n            buffer_copy_string_len(v7 + 488, v36, (unsigned int)v37);\n            *(_BYTE *)(*(_QWORD *)(v7 + 296) + v49 - (unsigned int)v37) = 0;\n            *(_DWORD *)(v7 + 304) = v49 - v37 + 1;\n          }\n        }\n      }\n    }\n    if ( !v46 )\n    {\n      v38 = 352LL;\n      if ( size )\n        v38 = size;\n      v46 = (char *)calloc(1uLL, v38);\n      if ( !v46 )\n        ck_assert_failed((__int64)\"gw_backend.c\", 1120LL, (__int64)\"hctx\");\n      *((_WORD *)v46 + 16) = 1;\n      *((_DWORD *)v46 + 9) = 0;\n      *(_QWORD *)v46 = 0LL;\n      *((_DWORD *)v46 + 34) = -1;\n      *(_QWORD *)(v46 + 148) = 0LL;\n      *((_DWORD *)v46 + 39) = 1;\n      chunkqueue_init((_QWORD *)v46 + 7);\n      *((_QWORD *)v46 + 6) = 0LL;\n    }\n    v21 = *(_QWORD *)(v7 + 48);\n    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 912) + 24LL);\n    *((_QWORD *)v46 + 34) = v21;\n    LODWORD(v21) = *(_DWORD *)(v20 + 16);\n    *((_QWORD *)v46 + 33) = v7;\n    *((_QWORD *)v46 + 35) = v5;\n    *((_QWORD *)v46 + 1) = v20;\n    *((_QWORD *)v46 + 15) = v22;\n    v23 = *(_DWORD **)(v20 + 24);\n    LODWORD(v21) = v21 + 1;\n    *(_QWORD *)v46 = 0LL;\n    *((_QWORD *)v46 + 2) = v17;\n    *(_DWORD *)(v20 + 16) = v21;\n    *v23 = v21;\n    *((_WORD *)v46 + 16) = v40;\n    if ( v40 == 2 )\n      *((_QWORD *)v46 + 3) = v17;\n    v24 = *(_WORD *)(v7 + 150);\n    *((_DWORD *)v46 + 62) = v5[16];\n    *((_DWORD *)v46 + 63) = v5[17];\n    *((_DWORD *)v46 + 64) = v5[18];\n    v25 = 0x40000;\n    if ( v24 & 3 )\n      v25 = (v24 & 2u) < 1 ? 0x10000 : 0x4000;\n    *((_DWORD *)v46 + 40) = v25;\n    v46[177] = 0;\n    *((_DWORD *)v46 + 41) = 49152;\n    *((_DWORD *)v46 + 43) = v40 == 2;\n    v46[178] = *(_WORD *)(v20 + 150);\n    v26 = *v5;\n    *((_QWORD *)v46 + 23) = *(_QWORD *)(v20 + 152);\n    *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v26) = v46;\n    v27 = *(_BYTE *)(v7 + 163) == 0;\n    v28 = *((_QWORD *)v5 + 2);\n    *(_QWORD *)(v7 + 32) = v28;\n    if ( !v27 )\n      log_error(\n        *(_DWORD **)(v7 + 128),\n        \"gw_backend.c\",\n        2682LL,\n        (__int64)\"handling the request using %s\",\n        *(_QWORD *)(v28 + 176));\n    return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x32b50L", 
            "funcEndAddr": "0x33060L", 
            "funcName": "gw_check_extension"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall gw_handle_trigger(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  int v3; // er9\n  int v4; // er12\n  _DWORD *v5; // rax\n  int v6; // edx\n  int v7; // esi\n  __int64 *v8; // rcx\n  __int64 v9; // r14\n  int v10; // eax\n  signed __int64 v11; // r14\n  unsigned int v12; // er15\n  __int64 v13; // rbp\n  unsigned int v14; // ecx\n  unsigned int v15; // esi\n  __int64 v16; // rbx\n  unsigned int v17; // edx\n  __int64 v18; // rax\n  unsigned int v19; // eax\n  __int64 v20; // rax\n  unsigned int v21; // edx\n  __pid_t v22; // er9\n  unsigned int v23; // ebx\n  signed __int64 v24; // r15\n  unsigned int v25; // er13\n  __int64 v26; // r12\n  __int64 i; // rbp\n  __int64 v29; // rax\n  __int64 *v30; // rcx\n  __int64 v31; // rax\n  int v32; // esi\n  char **v33; // rax\n  char *v34; // r8\n  unsigned int v35; // [rsp+Ch] [rbp-6Ch]\n  __int64 v36; // [rsp+10h] [rbp-68h]\n  signed __int64 v37; // [rsp+18h] [rbp-60h]\n  int v38; // [rsp+20h] [rbp-58h]\n  int v39; // [rsp+24h] [rbp-54h]\n  int v40; // [rsp+28h] [rbp-50h]\n  _BOOL4 v41; // [rsp+2Ch] [rbp-4Ch]\n  __int64 v42; // [rsp+30h] [rbp-48h]\n  _DWORD *v43; // [rsp+38h] [rbp-40h]\n\n  v41 = 0;\n  if ( *(_WORD *)(a1 + 166) )\n    v41 = *(_DWORD *)(a2 + 24) != *(_DWORD *)(a1 + 400);\n  v2 = *(_QWORD *)(a2 + 8);\n  if ( !v2 )\n    return 0LL;\n  v3 = *(_DWORD *)(v2 + 12);\n  v40 = *(_DWORD *)(a2 + 4);\n  v38 = v3 == 0;\n  if ( v38 >= v40 )\n    return 0LL;\n  v42 = a2;\n  v4 = 0;\n  v37 = 16LL * (v3 == 0);\n  v43 = *(_DWORD **)(a1 + 112);\n  while ( 2 )\n  {\n    v5 = (_DWORD *)(v2 + 16LL * *(unsigned int *)(v2 + v37 + 8));\n    v6 = *v5;\n    if ( *v5 == -1 )\n    {\n      v39 = v4;\n      goto LABEL_40;\n    }\n    v7 = v4;\n    v8 = 0LL;\n    do\n    {\n      while ( 1 )\n      {\n        if ( v6 )\n        {\n          if ( v6 == 2 )\n          {\n            v4 = v5[2];\n            if ( !v38 )\n              v7 = v5[2];\n          }\n          goto LABEL_11;\n        }\n        if ( v5[1] == 10 )\n          break;\nLABEL_11:\n        v5 += 4;\n        v6 = *v5;\n        if ( *v5 == -1 )\n          goto LABEL_15;\n      }\n      v8 = (__int64 *)*((_QWORD *)v5 + 1);\n      v5 += 4;\n      v6 = *v5;\n    }\n    while ( *v5 != -1 );\nLABEL_15:\n    v39 = v7;\n    if ( v8 )\n    {\n      v9 = *v8;\n      if ( *v8 )\n      {\n        v10 = *(_DWORD *)(v9 + 8);\n        if ( v41 )\n        {\n          if ( v10 )\n          {\n            v23 = 0;\n            do\n            {\n              v24 = *(_QWORD *)v9 + 40LL * v23;\n              if ( *(_DWORD *)(v24 + 32) )\n              {\n                v25 = 0;\n                do\n                {\n                  v26 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8LL * v25);\n                  sub_32510(\n                    *(_WORD *)(v26 + 86),\n                    *(_WORD *)(v26 + 88),\n                    *(unsigned __int16 *)(v26 + 90),\n                    *(_QWORD *)(v26 + 96));\n                  for ( i = *(_QWORD *)v26; i; i = *(_QWORD *)i )\n                  {\n                    if ( *(_DWORD *)(i + 8) == 1 )\n                      sub_183AC(v26, i);\n                  }\n                  ++v25;\n                }\n                while ( v25 < *(_DWORD *)(v24 + 32) );\n              }\n              ++v23;\n            }\n            while ( v23 < *(_DWORD *)(v9 + 8) );\n          }\n        }\n        else\n        {\n          v35 = 0;\n          if ( v10 )\n          {\n            v36 = *v8;\n            while ( 1 )\n            {\n              v11 = *(_QWORD *)v36 + 40LL * v35;\n              if ( *(_DWORD *)(v11 + 32) )\n                break;\nLABEL_39:\n              if ( ++v35 >= *(_DWORD *)(v36 + 8) )\n                goto LABEL_40;\n            }\n            v12 = 0;\n            while ( 2 )\n            {\n              v13 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8LL * v12);\n              sub_32510(\n                *(_WORD *)(v13 + 86),\n                *(_WORD *)(v13 + 88),\n                *(unsigned __int16 *)(v13 + 90),\n                *(_QWORD *)(v13 + 96));\n              sub_31280((__int64 *)v13, v43, v4, 1);\n              v14 = *(unsigned __int16 *)(v13 + 72);\n              v15 = *(unsigned __int16 *)(v13 + 74);\n              if ( (_WORD)v14 != (_WORD)v15 && *(_QWORD *)(v13 + 112) )\n              {\n                v16 = *(_QWORD *)v13;\n                if ( !*(_QWORD *)v13 )\n                  goto LABEL_29;\n                v17 = *(unsigned __int16 *)(v13 + 80);\n                if ( *(_DWORD *)(v16 + 12) <= v17 )\n                {\nLABEL_42:\n                  v20 = log_monotonic_secs - *(unsigned __int16 *)(v13 + 82);\n                  goto LABEL_33;\n                }\n                v18 = *(_QWORD *)v13;\n                while ( 1 )\n                {\n                  v18 = *(_QWORD *)v18;\n                  if ( !v18 )\n                    break;\n                  if ( *(_DWORD *)(v18 + 12) <= v17 )\n                    goto LABEL_42;\n                }\nLABEL_29:\n                v19 = *(_DWORD *)(v13 + 76);\n                if ( v19 )\n                {\n                  if ( v19 < v15 )\n                  {\n                    if ( v4 )\n                      log_error(v43, \"gw_backend.c\", 2798LL, (__int64)\"overload detected, spawning a new child\");\n                    sub_19292(v13, v43, v4);\n                    v16 = *(_QWORD *)v13;\n                  }\n                  v20 = log_monotonic_secs - *(unsigned __int16 *)(v13 + 82);\n                  if ( v16 )\n                  {\n                    v14 = *(unsigned __int16 *)(v13 + 72);\nLABEL_33:\n                    v21 = *(_DWORD *)(v13 + 76);\n                    if ( v14 < v21 )\n                    {\n                      while ( 1 )\n                      {\n                        if ( !*(_DWORD *)(v16 + 12) )\n                        {\n                          v22 = *(_DWORD *)(v16 + 40);\n                          if ( v22 > 0 && *(_QWORD *)(v16 + 16) < v20 )\n                            break;\n                        }\n                        v16 = *(_QWORD *)v16;\n                        if ( !v16 )\n                          goto LABEL_38;\n                      }\n                      if ( v4 )\n                      {\n                        v33 = *(char ***)(v16 + 88);\n                        v34 = \"\";\n                        if ( v33 )\n                          v34 = *v33;\n                        log_error(\n                          v43,\n                          \"gw_backend.c\",\n                          2814LL,\n                          (__int64)\"idle-timeout reached, terminating child: socket: %s pid %d\",\n                          v34);\n                        v21 = *(_DWORD *)(v13 + 76);\n                        v22 = *(_DWORD *)(v16 + 40);\n                      }\n                      v29 = *(_QWORD *)v16;\n                      v30 = *(__int64 **)(v16 + 72);\n                      if ( *(_QWORD *)v16 )\n                      {\n                        *(_QWORD *)(v29 + 72) = v30;\n                        v30 = *(__int64 **)(v16 + 72);\n                      }\n                      if ( v30 )\n                        *v30 = v29;\n                      else\n                        *(_QWORD *)v13 = v29;\n                      v31 = *(_QWORD *)(v13 + 64);\n                      *(_DWORD *)(v13 + 76) = v21 - 1;\n                      *(_QWORD *)(v16 + 72) = 0LL;\n                      *(_QWORD *)(v16 + 64) = 0LL;\n                      *(_QWORD *)v16 = v31;\n                      if ( v31 )\n                        *(_QWORD *)(v31 + 72) = v16;\n                      v32 = *(unsigned __int16 *)(v13 + 178);\n                      *(_QWORD *)(v13 + 64) = v16;\n                      kill(v22, v32);\n                      sub_1823E((_DWORD *)(v13 + 8), (_DWORD *)(v16 + 8), 4);\n                    }\n                  }\n                }\n              }\nLABEL_38:\n              if ( ++v12 >= *(_DWORD *)(v11 + 32) )\n                goto LABEL_39;\n              continue;\n            }\n          }\n        }\n      }\n    }\nLABEL_40:\n    ++v38;\n    v37 += 16LL;\n    if ( v40 != v38 )\n    {\n      v4 = v39;\n      v2 = *(_QWORD *)(v42 + 8);\n      continue;\n    }\n    return 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x33060L", 
            "funcEndAddr": "0x33497L", 
            "funcName": "gw_handle_trigger"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall gw_handle_waitpid_cb(__int64 a1, __int64 a2, int a3, unsigned int a4)\n{\n  signed __int64 result; // rax\n  __int64 v5; // r10\n  int v6; // er8\n  int v7; // er9\n  int v8; // eax\n  _DWORD *v9; // r13\n  signed __int64 v10; // rdx\n  __int64 v11; // r14\n  __int64 v12; // r8\n  unsigned int *v13; // r15\n  int v14; // er12\n  _DWORD *v15; // rdx\n  int v16; // ecx\n  int v17; // edi\n  __int64 **v18; // rsi\n  __int64 *v19; // rdx\n  int v20; // ecx\n  __int64 v21; // rdx\n  signed __int64 v22; // rsi\n  signed __int64 v23; // r11\n  int v24; // ecx\n  __int64 **v25; // rdx\n  signed __int64 v26; // rcx\n  __int64 *v27; // rbp\n  __int64 v28; // rbx\n  __int64 v29; // rbx\n  bool v30; // sf\n  unsigned __int8 v31; // of\n  int v32; // [rsp+Ch] [rbp-3Ch]\n\n  if ( *(_WORD *)(a1 + 166) )\n  {\n    result = 0LL;\n    if ( *(_DWORD *)(a2 + 24) != *(_DWORD *)(a1 + 400) )\n      return result;\n  }\n  v5 = *(_QWORD *)(a2 + 8);\n  result = 0LL;\n  if ( !v5 )\n    return result;\n  v6 = *(_DWORD *)(v5 + 12);\n  v32 = *(_DWORD *)(a2 + 4);\n  v7 = v6 == 0;\n  if ( v7 >= v32 )\n    return result;\n  v8 = a3;\n  v9 = *(_DWORD **)(a1 + 112);\n  v10 = 16LL * (v6 == 0);\n  v11 = log_monotonic_secs;\n  v12 = a4;\n  v13 = (unsigned int *)(v5 + v10 + 8);\n  v14 = 0;\n  while ( 1 )\n  {\n    v15 = (_DWORD *)(v5 + 16LL * *v13);\n    v16 = *v15;\n    if ( *v15 != -1 )\n      break;\nLABEL_33:\n    ++v7;\n    v13 += 4;\n    if ( v32 == v7 )\n      return 0LL;\n  }\n  v17 = v14;\n  v18 = 0LL;\n  do\n  {\n    while ( 1 )\n    {\n      if ( v16 )\n      {\n        if ( v16 == 2 )\n        {\n          v14 = v15[2];\n          if ( !v7 )\n            v17 = v15[2];\n        }\n        goto LABEL_12;\n      }\n      if ( v15[1] == 10 )\n        break;\nLABEL_12:\n      v15 += 4;\n      v16 = *v15;\n      if ( *v15 == -1 )\n        goto LABEL_16;\n    }\n    v18 = (__int64 **)*((_QWORD *)v15 + 1);\n    v15 += 4;\n    v16 = *v15;\n  }\n  while ( *v15 != -1 );\nLABEL_16:\n  if ( !v18 || (v19 = *v18) == 0LL || (v20 = *((_DWORD *)v19 + 2)) == 0 )\n  {\nLABEL_32:\n    v14 = v17;\n    goto LABEL_33;\n  }\n  v21 = *v19;\n  v22 = v21 + 24;\n  v23 = v21 + 40LL * (unsigned int)(v20 - 1) + 64;\n  while ( 1 )\n  {\n    v24 = *(_DWORD *)(v22 + 8);\n    if ( v24 )\n      break;\nLABEL_31:\n    v22 += 40LL;\n    if ( v23 == v22 )\n      goto LABEL_32;\n  }\n  v25 = *(__int64 ***)v22;\n  v26 = *(_QWORD *)v22 + 8LL * (unsigned int)(v24 - 1) + 8;\n  while ( 1 )\n  {\n    v27 = *v25;\n    v28 = **v25;\n    if ( v28 )\n      break;\nLABEL_26:\n    v29 = v27[8];\n    if ( v29 )\n    {\n      while ( !*(_DWORD *)(v29 + 44) || *(_DWORD *)(v29 + 40) != v8 )\n      {\n        v29 = *(_QWORD *)v29;\n        if ( !v29 )\n          goto LABEL_30;\n      }\n      sub_1831F((unsigned __int16 *)v27 + 89, (_DWORD *)(v29 + 8), (_QWORD **)(v29 + 80), v9, v12);\n      if ( *(_DWORD *)(v29 + 8) != 4 )\n        *(_QWORD *)(v29 + 64) = v11;\n      sub_1823E((_DWORD *)v27 + 2, (_DWORD *)(v29 + 8), 3);\n      *(_DWORD *)(v29 + 40) = 0;\n      return 1LL;\n    }\nLABEL_30:\n    ++v25;\n    if ( (__int64 **)v26 == v25 )\n      goto LABEL_31;\n  }\n  while ( !*(_DWORD *)(v28 + 44) || *(_DWORD *)(v28 + 40) != v8 )\n  {\n    v28 = *(_QWORD *)v28;\n    if ( !v28 )\n      goto LABEL_26;\n  }\n  sub_1831F((unsigned __int16 *)v27 + 89, (_DWORD *)(v28 + 8), (_QWORD **)(v28 + 80), v9, v12);\n  sub_1823E((_DWORD *)v27 + 2, (_DWORD *)(v28 + 8), 3);\n  v31 = __OFSUB__(*(_QWORD *)(v28 + 64), v11);\n  v30 = *(_QWORD *)(v28 + 64) - v11 < 0;\n  *(_DWORD *)(v28 + 40) = 0;\n  if ( v30 ^ v31 )\n  {\n    if ( *(_DWORD *)(v28 + 8) != 4 )\n      *(_QWORD *)(v28 + 64) = v11;\n    if ( (unsigned int)sub_1880E((__int64)v27, v28, v9, v14) )\n      log_error(v9, \"gw_backend.c\", 2947LL, (__int64)\"ERROR: spawning gw failed.\");\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x334a0L", 
            "funcEndAddr": "0x33711L", 
            "funcName": "gw_handle_waitpid_cb"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_33720(_QWORD *a1, __int64 a2, signed int *a3)\n{\n  _QWORD *v3; // rbp\n  signed int *v4; // rbx\n  __int64 v5; // rdi\n  __int64 v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n\n  if ( *a3 == 512 )\n    return;\n  v3 = a1;\n  v4 = a3;\n  if ( *a1 )\n  {\n    ((void (*)(void))sub_33720)();\n    v5 = a1[1];\n    if ( !v5 )\n      goto LABEL_12;\n    goto LABEL_11;\n  }\n  v5 = a1[1];\n  if ( v5 )\n  {\nLABEL_11:\n    sub_33720(v5, a2, v4);\nLABEL_12:\n    if ( *v4 == 512 )\n      return;\n  }\n  v6 = v3[3];\n  if ( !*(_DWORD *)(v6 + 16) )\n  {\n    v7 = *(_QWORD *)(v6 + 48);\n    *(_QWORD *)(v6 + 24) = 0LL;\n    if ( v7 )\n    {\n      --*(_DWORD *)(v7 + 16);\n      *(_QWORD *)(v6 + 48) = 0LL;\n    }\n    v8 = *v4;\n    *v4 = v8 + 1;\n    *(_DWORD *)(a2 + 4 * v8) = *((_DWORD *)v3 + 4);\n  }\n}\n", 
            "funcStartAddr": "0x33720L", 
            "funcEndAddr": "0x337b6L", 
            "funcName": "sub_33720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_337C0(_QWORD *a1, __int64 a2, signed int *a3, __int64 a4, __int64 a5)\n{\n  __int64 result; // rax\n  __int64 v6; // r14\n  __int64 v7; // r13\n  _QWORD *v8; // rbx\n  signed int *v9; // rbp\n  __int64 v10; // rdi\n\n  result = *a3;\n  if ( (_DWORD)result != 0x2000 )\n  {\n    v6 = a5;\n    v7 = a4;\n    v8 = a1;\n    v9 = a3;\n    if ( *a1 )\n    {\n      ((void (*)(void))sub_337C0)();\n      v10 = a1[1];\n      if ( !v10 )\n        goto LABEL_10;\n    }\n    else\n    {\n      v10 = a1[1];\n      if ( !v10 )\n      {\nLABEL_4:\n        if ( v6 - *(_QWORD *)(v8[3] + 16LL) > v7 )\n        {\n          *v9 = result + 1;\n          *(_DWORD *)(a2 + 4 * result) = *((_DWORD *)v8 + 4);\n        }\n        return result;\n      }\n    }\n    sub_337C0(v10, a2, v9, v7, v6);\nLABEL_10:\n    result = *v9;\n    if ( (_DWORD)result == 0x2000 )\n      return result;\n    goto LABEL_4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x337c0L", 
            "funcEndAddr": "0x33853L", 
            "funcName": "sub_337C0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_33860()\n{\n  _QWORD *result; // rax\n\n  result = calloc(1uLL, 0xD8uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"stat_cache.c\", 797LL, (__int64)\"((void *)0) != sce\");\n  result[3] = 0x1FFFFFFFFLL;\n  return result;\n}\n", 
            "funcStartAddr": "0x33860L", 
            "funcEndAddr": "0x338a3L", 
            "funcName": "sub_33860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_338B0(__int64 *a1, __int64 a2, int a3)\n{\n  signed __int64 v3; // rcx\n  int v4; // eax\n  unsigned int v5; // ebx\n  __int64 v6; // rax\n  __int64 result; // rax\n\n  if ( a3 )\n  {\n    v3 = a2 + (unsigned int)(a3 - 1) + 1;\n    v4 = 5381;\n    do\n      v4 = *(unsigned __int8 *)(++a2 - 1) ^ 33 * v4;\n    while ( v3 != a2 );\n    v5 = v4 & 0x7FFFFFFF;\n  }\n  else\n  {\n    v5 = 5381;\n  }\n  v6 = splaytree_splay(*a1, v5);\n  *a1 = v6;\n  if ( v6 && *(_DWORD *)(v6 + 16) == v5 )\n    result = *(_QWORD *)(v6 + 24);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x338b0L", 
            "funcEndAddr": "0x3392fL", 
            "funcName": "sub_338B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_33930(_QWORD *a1, const void *a2, size_t a3, __int64 a4, signed int *a5)\n{\n  __int64 v5; // r13\n  _QWORD *v6; // rbx\n  signed int *v7; // rbp\n  __int64 v8; // r14\n  size_t v9; // r12\n  __int64 v10; // rdi\n  __int64 v11; // rdx\n\n  v5 = *a5;\n  if ( (_DWORD)v5 == 0x2000 )\n    return;\n  v6 = a1;\n  v7 = a5;\n  v8 = a4;\n  v9 = a3;\n  if ( *a1 )\n  {\n    ((void (*)(void))sub_33930)();\n    v10 = a1[1];\n    if ( !v10 )\n      goto LABEL_9;\n    goto LABEL_8;\n  }\n  v10 = a1[1];\n  if ( v10 )\n  {\nLABEL_8:\n    sub_33930(v10, a2, v9, v8, v7);\nLABEL_9:\n    v5 = *v7;\n    if ( (_DWORD)v5 == 0x2000 )\n      return;\n  }\n  v11 = v6[3];\n  if ( v9 < *(_DWORD *)(v11 + 8) - (unsigned int)(*(_DWORD *)(v11 + 8) != 0)\n    && *(_BYTE *)(*(_QWORD *)v11 + v9) == 47\n    && !memcmp(*(const void **)v11, a2, v9) )\n  {\n    *v7 = v5 + 1;\n    *(_DWORD *)(v8 + 4 * v5) = *((_DWORD *)v6 + 4);\n  }\n}\n", 
            "funcStartAddr": "0x33930L", 
            "funcEndAddr": "0x339ffL", 
            "funcName": "sub_33930"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_33A00(_QWORD *a1, const void *a2, size_t a3)\n{\n  _QWORD *v3; // rbx\n  size_t v4; // rbp\n  __int64 v5; // rdi\n  __int64 v6; // rbx\n  size_t v7; // rax\n\n  v3 = a1;\n  v4 = a3;\n  if ( *a1 )\n    ((void (*)(void))sub_33A00)();\n  v5 = a1[1];\n  if ( v5 )\n    sub_33A00(v5, a2, v4);\n  v6 = v3[3];\n  v7 = *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0);\n  if ( v4 < v7 && *(_BYTE *)(*(_QWORD *)v6 + v4) == 47 )\n  {\n    LODWORD(v7) = memcmp(*(const void **)v6, a2, v4);\n    if ( !(_DWORD)v7 )\n    {\n      v7 = *(_QWORD *)(v6 + 48);\n      *(_QWORD *)(v6 + 24) = 0LL;\n      if ( v7 )\n      {\n        --*(_DWORD *)(v7 + 16);\n        *(_QWORD *)(v6 + 48) = 0LL;\n      }\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x33a00L", 
            "funcEndAddr": "0x33a9aL", 
            "funcName": "sub_33A00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_33AA0(_QWORD *a1, const void *a2, size_t a3)\n{\n  _QWORD *v3; // rbx\n  size_t v4; // rbp\n  __int64 v5; // rdi\n  __int64 v6; // rbx\n  size_t v7; // rax\n\n  v3 = a1;\n  v4 = a3;\n  if ( *a1 )\n    ((void (*)(void))sub_33AA0)();\n  v5 = a1[1];\n  if ( v5 )\n    sub_33AA0(v5, a2, v4);\n  v6 = v3[3];\n  v7 = *(_DWORD *)(v6 + 8) - (unsigned int)(*(_DWORD *)(v6 + 8) != 0);\n  if ( v4 < v7 && *(_BYTE *)(*(_QWORD *)v6 + v4) == 47 )\n  {\n    LODWORD(v7) = memcmp(*(const void **)v6, a2, v4);\n    if ( !(_DWORD)v7 )\n    {\n      v7 = *(_QWORD *)(v6 + 32);\n      *(_QWORD *)(v6 + 16) = 0LL;\n      if ( v7 )\n      {\n        --*(_DWORD *)(v7 + 16);\n        *(_QWORD *)(v6 + 32) = 0LL;\n      }\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x33aa0L", 
            "funcEndAddr": "0x33b3aL", 
            "funcName": "sub_33AA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_33B40(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x33b40L", 
            "funcEndAddr": "0x33b55L", 
            "funcName": "sub_33B40"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_33B60()\n{\n  __int64 *v0; // rbp\n  _QWORD *v1; // rdi\n  signed __int64 v2; // rbx\n  unsigned int v3; // er15\n  __int64 v4; // rax\n  int v5; // edx\n  unsigned int *v7; // r13\n  __int64 v8; // rax\n  __int64 v9; // rdi\n  __int64 v10; // rax\n  int v11; // esi\n  int v12; // [rsp+Ch] [rbp-84Ch]\n  char v13[2056]; // [rsp+10h] [rbp-848h]\n  unsigned __int64 v14; // [rsp+818h] [rbp-40h]\n\n  v0 = (__int64 *)qword_2585E0;\n  v14 = __readfsqword(0x28u);\n  do\n  {\n    v1 = (_QWORD *)*v0;\n    if ( !*v0 )\n      break;\n    v12 = 0;\n    sub_33720(v1, (__int64)v13, &v12);\n    if ( v12 <= 0 )\n      break;\n    v2 = 1LL;\n    do\n    {\n      v3 = *(_DWORD *)&v13[4 * v2 - 4];\n      v4 = splaytree_splay(*v0, *(unsigned int *)&v13[4 * v2 - 4]);\n      *v0 = v4;\n      if ( v4 && *(_DWORD *)(v4 + 16) == v3 )\n      {\n        v7 = *(unsigned int **)(v4 + 24);\n        v8 = splaytree_delete(v4, v3);\n        v9 = v0[1];\n        *v0 = v8;\n        v10 = splaytree_delete(v9, v7[5]);\n        LODWORD(v9) = *((_DWORD *)v0 + 10);\n        v11 = v7[5];\n        v0[1] = v10;\n        inotify_rm_watch(v9, v11);\n        sub_33B40(v7);\n      }\n      v5 = v2++;\n    }\n    while ( v12 > v5 );\n  }\n  while ( v12 == 512 );\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0x33b60L", 
            "funcEndAddr": "0x33c67L", 
            "funcName": "sub_33B60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_33C70(void *ptr)\n{\n  __int64 v1; // rax\n  void *v2; // rbx\n  int v3; // edi\n\n  v1 = *((_QWORD *)ptr + 4);\n  v2 = ptr;\n  if ( v1 )\n    --*(_DWORD *)(v1 + 16);\n  free(*(void **)ptr);\n  free(*((void **)ptr + 5));\n  if ( *((_DWORD *)ptr + 17) )\n    free(*((void **)ptr + 7));\n  v3 = *((_DWORD *)ptr + 6);\n  if ( v3 >= 0 )\n    close(v3);\n  free(v2);\n}\n", 
            "funcStartAddr": "0x33c70L", 
            "funcEndAddr": "0x33cbbL", 
            "funcName": "sub_33C70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_33CC0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // r14\n  __int64 v4; // ST08_8\n  signed __int64 v5; // rbx\n  int v6; // edx\n  int v7; // ecx\n  unsigned int v8; // er15\n  _DWORD *v9; // rdi\n  bool v10; // zf\n  int v11; // ecx\n  __int64 v13; // ST08_8\n  int v14; // [rsp+1Ch] [rbp-804Ch]\n  char v15[32776]; // [rsp+20h] [rbp-8048h]\n  unsigned __int64 v16; // [rsp+8028h] [rbp-40h]\n\n  v16 = __readfsqword(0x28u);\n  v2 = qword_2585D8;\n  if ( qword_2585D8 )\n  {\n    v3 = a1;\n    while ( 1 )\n    {\n      v4 = v2;\n      v14 = 0;\n      sub_337C0((_QWORD *)v2, (__int64)v15, &v14, v3, a2);\n      v2 = v4;\n      if ( v14 <= 0 )\n        break;\n      v5 = 1LL;\n      do\n      {\n        while ( 1 )\n        {\n          v8 = *(_DWORD *)&v15[4 * v5 - 4];\n          v2 = splaytree_splay(v2, *(unsigned int *)&v15[4 * v5 - 4]);\n          if ( v2 )\n          {\n            if ( *(_DWORD *)(v2 + 16) == v8 )\n              break;\n          }\n          v6 = v14;\n          v7 = v5++;\n          if ( v14 <= v7 )\n            goto LABEL_12;\n        }\n        v9 = *(_DWORD **)(v2 + 24);\n        if ( v9 )\n        {\n          v10 = v9[7]-- == 1;\n          if ( v10 )\n          {\n            v13 = v2;\n            sub_33C70(v9);\n            v2 = v13;\n          }\n        }\n        v2 = splaytree_delete(v2, v8);\n        v6 = v14;\n        v11 = v5++;\n      }\n      while ( v14 > v11 );\nLABEL_12:\n      if ( v6 != 0x2000 )\n        break;\n      if ( !v2 )\n        goto LABEL_14;\n    }\n  }\n  else\n  {\nLABEL_14:\n    v2 = 0LL;\n  }\n  qword_2585D8 = v2;\n  return __readfsqword(0x28u) ^ v16;\n}\n", 
            "funcStartAddr": "0x33cc0L", 
            "funcEndAddr": "0x33de6L", 
            "funcName": "sub_33CC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_33DF0(const void *a1, size_t a2)\n{\n  __int64 v2; // rax\n  const void *v3; // r14\n  __int64 v4; // ST08_8\n  signed __int64 v5; // rbx\n  int v6; // edx\n  int v7; // ecx\n  unsigned int v8; // er15\n  _DWORD *v9; // rdi\n  bool v10; // zf\n  int v11; // ecx\n  __int64 v13; // ST08_8\n  int v14; // [rsp+1Ch] [rbp-804Ch]\n  char v15[32776]; // [rsp+20h] [rbp-8048h]\n  unsigned __int64 v16; // [rsp+8028h] [rbp-40h]\n\n  v16 = __readfsqword(0x28u);\n  v2 = qword_2585D8;\n  if ( qword_2585D8 )\n  {\n    v3 = a1;\n    while ( 1 )\n    {\n      v4 = v2;\n      v14 = 0;\n      sub_33930((_QWORD *)v2, v3, a2, (__int64)v15, &v14);\n      v2 = v4;\n      if ( v14 <= 0 )\n        break;\n      v5 = 1LL;\n      do\n      {\n        while ( 1 )\n        {\n          v8 = *(_DWORD *)&v15[4 * v5 - 4];\n          v2 = splaytree_splay(v2, *(unsigned int *)&v15[4 * v5 - 4]);\n          if ( v2 )\n          {\n            if ( *(_DWORD *)(v2 + 16) == v8 )\n              break;\n          }\n          v6 = v14;\n          v7 = v5++;\n          if ( v14 <= v7 )\n            goto LABEL_12;\n        }\n        v9 = *(_DWORD **)(v2 + 24);\n        if ( v9 )\n        {\n          v10 = v9[7]-- == 1;\n          if ( v10 )\n          {\n            v13 = v2;\n            sub_33C70(v9);\n            v2 = v13;\n          }\n        }\n        v2 = splaytree_delete(v2, v8);\n        v6 = v14;\n        v11 = v5++;\n      }\n      while ( v14 > v11 );\nLABEL_12:\n      if ( v6 != 0x2000 )\n        break;\n      if ( !v2 )\n        goto LABEL_14;\n    }\n  }\n  else\n  {\nLABEL_14:\n    v2 = 0LL;\n  }\n  qword_2585D8 = v2;\n  return __readfsqword(0x28u) ^ v16;\n}\n", 
            "funcStartAddr": "0x33df0L", 
            "funcEndAddr": "0x33f16L", 
            "funcName": "sub_33DF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall stat_cache_entry_refchg(_DWORD *a1, int a2)\n{\n  int v2; // eax\n\n  v2 = a1[7];\n  if ( a2 >= 0 || v2 != 1 )\n  {\n    a1[7] = v2 + a2;\n  }\n  else\n  {\n    a1[7] = 0;\n    sub_33C70(a1);\n  }\n}\n", 
            "funcStartAddr": "0x33f20L", 
            "funcEndAddr": "0x33f41L", 
            "funcName": "stat_cache_entry_refchg"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall stat_cache_mimetype_by_ext(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v4; // er14\n  unsigned __int64 v5; // rbp\n  __int64 **v6; // r13\n  signed __int64 v7; // r12\n  __int64 *v8; // rbx\n  __int64 v9; // rdx\n  signed __int64 result; // rax\n  __int64 v11; // r13\n  signed __int64 v12; // rax\n  char v13; // cl\n  signed __int64 v14; // rdx\n  __int64 v15; // rax\n  _BYTE *v16; // rbx\n  __int64 v17; // rax\n  signed __int64 v18; // rbx\n  bool v19; // zf\n\n  v3 = *(_DWORD *)(a1 + 16);\n  v4 = a3;\n  v5 = a2 + a3;\n  if ( v3 <= 0xF )\n  {\n    if ( !v3 )\n      return 0LL;\n    v6 = *(__int64 ***)a1;\n    v7 = *(_QWORD *)a1 + 8LL * (v3 - 1) + 8;\n    while ( 1 )\n    {\n      v8 = *v6;\n      v9 = *((_DWORD *)*v6 + 2) - (unsigned int)(*((_DWORD *)*v6 + 2) != 0);\n      if ( v4 >= (unsigned int)v9 )\n      {\n        if ( (unsigned int)buffer_eq_icase_ssn(v5 - v9, *v8, v9) )\n          break;\n      }\n      ++v6;\n      if ( (__int64 **)v7 == v6 )\n        return 0LL;\n    }\n    return (signed __int64)(v8 + 4);\n  }\n  v11 = a2;\n  if ( a3 )\n  {\n    v12 = v5 - 1;\n    v13 = *(_BYTE *)(v5 - 1);\n    if ( a2 == v5 - 1 )\n    {\n      v14 = a2;\n    }\n    else\n    {\n      if ( v13 == 47 )\n      {\n        v12 = a2 + a3;\n        v4 = 0;\nLABEL_34:\n        v11 = v12;\n        goto LABEL_17;\n      }\n      while ( 1 )\n      {\n        v14 = v12 - 1;\n        v13 = *(_BYTE *)(v12 - 1);\n        if ( a2 == v12 - 1 )\n          break;\n        if ( v13 == 47 )\n          goto LABEL_33;\n        --v12;\n      }\n    }\n    if ( v13 != 47 )\n    {\n      v11 = v14;\n      v4 = v5 - v14;\n      goto LABEL_17;\n    }\n    v12 = v14 + 1;\nLABEL_33:\n    v4 = v5 - v12;\n    goto LABEL_34;\n  }\nLABEL_17:\n  v15 = array_get_element_klen(a1, v11, v4);\n  if ( v15 )\n    return v15 + 32;\n  while ( 1 )\n  {\n    v16 = (_BYTE *)(v11 + 1);\n    if ( v5 <= v11 + 1 )\n      break;\n    while ( *v16 != 46 )\n    {\n      if ( (_BYTE *)v5 == ++v16 )\n        goto LABEL_35;\n    }\n    if ( v16 == (_BYTE *)v5 )\n      break;\n    v15 = array_get_element_klen(a1, (__int64)v16, (signed int)v5 - (signed int)v16);\n    if ( v15 )\n      return v15 + 32;\n    v11 = (__int64)(v16 + 1);\n    if ( v5 > (unsigned __int64)(v16 + 1) )\n    {\n      if ( v16[1] == 46 )\n      {\n        v11 = (__int64)v16;\n      }\n      else\n      {\n        v15 = array_get_element_klen(a1, (__int64)(v16 + 1), (signed int)v5 - (signed int)v11);\n        if ( v15 )\n          return v15 + 32;\n      }\n    }\n  }\nLABEL_35:\n  v17 = array_get_element_klen(a1, (__int64)\"\", 0);\n  v18 = v17 + 32;\n  v19 = v17 == 0;\n  result = 0LL;\n  if ( !v19 )\n    result = v18;\n  return result;\n}\n", 
            "funcStartAddr": "0x33f50L", 
            "funcEndAddr": "0x3411aL", 
            "funcName": "stat_cache_mimetype_by_ext"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall stat_cache_content_type_get_by_ext(__int64 a1, __int64 a2)\n{\n  signed __int64 v3; // rax\n  __int64 v4; // rdx\n  int v5; // eax\n\n  if ( *(_DWORD *)(a1 + 64) > 1u )\n    return a1 + 56;\n  if ( (*(_DWORD *)(a1 + 96) & 0xF000) == 0x8000 )\n  {\n    v3 = stat_cache_mimetype_by_ext(a2, *(_QWORD *)a1, *(_DWORD *)(a1 + 8) - (unsigned int)(*(_DWORD *)(a1 + 8) != 0));\n    if ( v3 )\n    {\n      v4 = *(_QWORD *)v3;\n      v5 = *(_DWORD *)(v3 + 8);\n      *(_QWORD *)(a1 + 56) = v4;\n      *(_DWORD *)(a1 + 64) = v5;\n    }\n    else\n    {\n      *(_DWORD *)(a1 + 64) = 0;\n    }\n    return a1 + 56;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x34120L", 
            "funcEndAddr": "0x34184L", 
            "funcName": "stat_cache_content_type_get_by_ext"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall stat_cache_etag_get(__int64 a1, unsigned int a2)\n{\n  if ( *(_DWORD *)(a1 + 48) > 1u )\n    return a1 + 40;\n  if ( ((*(_DWORD *)(a1 + 96) & 0xF000) - 0x4000) & 0xFFFFB000 || !a2 )\n    return 0LL;\n  http_etag_create(a1 + 40, a1 + 72, a2);\n  return a1 + 40;\n}\n", 
            "funcStartAddr": "0x34190L", 
            "funcEndAddr": "0x341e3L", 
            "funcName": "stat_cache_etag_get"
        }, 
        {
            "decompiledFuncCode": "void __fastcall stat_cache_update_entry(const void *a1, unsigned int a2, const __m128i *a3, __int64 a4)\n{\n  signed __int64 v4; // rbp\n  const __m128i *v5; // r12\n  __int64 v6; // rdx\n  const void *v7; // r13\n  __int64 v8; // r14\n  __int64 v9; // rax\n  _QWORD *v10; // rbx\n  int v11; // edi\n  int v12; // eax\n\n  if ( dword_2585D0 != 1 )\n  {\n    v4 = a2;\n    if ( !a2 )\n      ck_assert_failed((__int64)\"stat_cache.c\", 1095LL, (__int64)\"0 != len\");\n    v5 = a3;\n    v6 = a2 - 1;\n    v7 = a1;\n    v8 = a4;\n    if ( *((_BYTE *)a1 + v6) == 47 )\n    {\n      v4 = 1LL;\n      if ( (_DWORD)v6 )\n        v4 = a2 - 1;\n    }\n    v9 = sub_338B0(&qword_2585D8, (__int64)a1, v4);\n    v10 = (_QWORD *)v9;\n    if ( v9 && (unsigned int)buffer_eq_slen(v9, a1, v4) )\n    {\n      if ( v10[21] != v5[6].m128i_i64[0]\n        || v10[20] != v5[5].m128i_i64[1]\n        || v10[15] != v5[3].m128i_i64[0]\n        || v10[10] != v5->m128i_i64[1]\n        || v10[9] != v5->m128i_i64[0] )\n      {\n        *((_DWORD *)v10 + 12) = 0;\n        if ( v8 )\n          buffer_copy_string_len(\n            (__int64)(v10 + 5),\n            *(const void **)v8,\n            *(_DWORD *)(v8 + 8) - (unsigned int)(*(_DWORD *)(v8 + 8) != 0));\n        v11 = *((_DWORD *)v10 + 6);\n        if ( v11 >= 0 )\n        {\n          v12 = *((_DWORD *)v10 + 7);\n          if ( v12 == 1 )\n          {\n            close(v11);\n            *((_DWORD *)v10 + 6) = -1;\n          }\n          else\n          {\n            *((_DWORD *)v10 + 7) = v12 - 1;\n            v10 = sub_33860();\n            *(_QWORD *)(qword_2585D8 + 24) = v10;\n            buffer_copy_string_len((__int64)v10, v7, v4);\n          }\n        }\n        *(__m128i *)(v10 + 9) = _mm_loadu_si128(v5);\n        *(__m128i *)(v10 + 11) = _mm_loadu_si128(v5 + 1);\n        *(__m128i *)(v10 + 13) = _mm_loadu_si128(v5 + 2);\n        *(__m128i *)(v10 + 15) = _mm_loadu_si128(v5 + 3);\n        *(__m128i *)(v10 + 17) = _mm_loadu_si128(v5 + 4);\n        *(__m128i *)(v10 + 19) = _mm_loadu_si128(v5 + 5);\n        *(__m128i *)(v10 + 21) = _mm_loadu_si128(v5 + 6);\n        *(__m128i *)(v10 + 23) = _mm_loadu_si128(v5 + 7);\n        *(__m128i *)(v10 + 25) = _mm_loadu_si128(v5 + 8);\n      }\n      v10[2] = log_monotonic_secs;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x341f0L", 
            "funcEndAddr": "0x343e9L", 
            "funcName": "stat_cache_update_entry"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__usercall sub_343F0@<rax>(int a1@<edx>, __m128i *a2@<rcx>, __int64 a3@<rdi>, unsigned __int8 *a4@<rsi>, unsigned __int8 *a5@<r12>, __int64 a6@<r13>)\n{\n  __m128i *v6; // r14\n  __int64 v7; // rbp\n  int v8; // ecx\n  size_t v9; // rbx\n  int v10; // esi\n  __int64 v11; // rsi\n  __int64 v12; // rax\n  _QWORD *v13; // r15\n  int v14; // eax\n  unsigned __int8 *v15; // rcx\n  bool v16; // al\n  _QWORD *v17; // rdi\n  __int64 v18; // rax\n  int v19; // esi\n  int v20; // edi\n  int v21; // eax\n  __int64 v22; // rdi\n  __int64 v23; // rax\n  _QWORD *result; // rax\n  __int64 v25; // rax\n  int v26; // edx\n  _QWORD *v27; // rax\n  int v28; // edi\n  const char *v29; // rsi\n  int v30; // eax\n  __int64 v31; // rax\n  __int64 v32; // rsi\n  __int64 v33; // rdi\n  unsigned __int8 *v34; // rbx\n  unsigned __int8 v35; // r14\n  int v36; // eax\n  int v37; // eax\n  void *v38; // rdi\n  __int64 v39; // [rsp+0h] [rbp-F8h]\n  __int64 v40; // [rsp+8h] [rbp-F0h]\n  struct stat64 stat_buf; // [rsp+20h] [rbp-D8h]\n  unsigned __int64 v42; // [rsp+B8h] [rbp-40h]\n\n  v42 = __readfsqword(0x28u);\n  if ( !*(_QWORD *)(a3 + 32) )\n    goto LABEL_56;\n  v6 = a2;\n  a6 = a3;\n  a5 = a4;\n  v7 = (unsigned int)(a1 - 1);\n  v8 = a2[1].m128i_i32[2] & 0xF000;\n  LODWORD(v39) = v8;\n  if ( a4[v7] != 47 )\n    LODWORD(v7) = a1;\n  if ( (_DWORD)v7 )\n  {\n    if ( v8 == 0x4000 )\n    {\n      v9 = (unsigned int)v7;\n      goto LABEL_39;\n    }\n  }\n  else\n  {\n    LODWORD(v7) = 1;\n    if ( v8 == 0x4000 )\n    {\nLABEL_8:\n      v9 = 1LL;\n      LODWORD(v7) = 1;\n      v10 = *a4 ^ 0x2B5A5;\n      goto LABEL_9;\n    }\n  }\n  do\n  {\n    LODWORD(v7) = v7 - 1;\n    v9 = (unsigned int)v7;\n  }\n  while ( a4[(unsigned int)v7] != 47 );\n  if ( !(_DWORD)v9 )\n    goto LABEL_8;\nLABEL_39:\n  v25 = 0LL;\n  v10 = 5381;\n  do\n  {\n    v26 = a5[v25++];\n    v10 = v26 ^ 33 * v10;\n  }\n  while ( (unsigned int)v7 > (unsigned int)v25 );\nLABEL_9:\n  v11 = v10 & 0x7FFFFFFF;\n  HIDWORD(v39) = v11;\n  v12 = splaytree_splay(*(_QWORD *)a3, v11);\n  *(_QWORD *)a3 = v12;\n  if ( v12 && *(_DWORD *)(v12 + 16) == (_DWORD)v11 )\n  {\n    v13 = *(_QWORD **)(v12 + 24);\n    if ( !(unsigned int)buffer_eq_slen(*(_QWORD *)(v12 + 24), a5, v9) )\n    {\nLABEL_56:\n      v13 = 0LL;\n      goto LABEL_34;\n    }\n    v40 = log_monotonic_secs;\n    v16 = (_DWORD)v39 == 0x4000;\n    if ( (_DWORD)v39 == 0x4000 )\n      goto LABEL_16;\n    if ( v13 && log_monotonic_secs - v13[3] <= 15 )\n      goto LABEL_33;\n  }\n  else\n  {\n    v13 = 0LL;\n    v40 = log_monotonic_secs;\n    if ( (_DWORD)v39 == 0x4000 )\n      goto LABEL_51;\n  }\n  a5[v9] = 0;\n  v14 = __lxstat64(1, (const char *)a5, &stat_buf);\n  v15 = &a5[v9];\n  if ( !v14 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 40960 )\n    {\n      v6 = (__m128i *)&stat_buf;\nLABEL_15:\n      *v15 = 47;\n      v16 = 1;\nLABEL_16:\n      if ( v13 && v16 )\n      {\n        if ( v6->m128i_i64[0] != v13[4] || v6->m128i_i64[1] != v13[5] )\n        {\n          v17 = *(_QWORD **)a3;\n          if ( *(_QWORD *)a6 )\n            sub_33A00(v17, a5, v9);\n          if ( (_DWORD)v39 != 0x4000 )\n            stat_cache_update_entry(a5, v7, v6, 0LL);\n          if ( qword_2585D8 )\n            sub_33AA0((_QWORD *)qword_2585D8, a5, v9);\n          v18 = splaytree_delete(*(_QWORD *)(a6 + 8), *((unsigned int *)v13 + 5));\n          v19 = *((_DWORD *)v13 + 5);\n          v20 = *(_DWORD *)(a6 + 40);\n          *(_QWORD *)(a6 + 8) = v18;\n          if ( inotify_rm_watch(v20, v19)\n            || (v21 = inotify_add_watch(*(_DWORD *)(a6 + 40), (const char *)*v13, 0x5000F46u),\n                *((_DWORD *)v13 + 5) = v21,\n                v21 < 0) )\n          {\n            v13[3] = 0LL;\n            v13 = 0LL;\n            goto LABEL_34;\n          }\n          v22 = *(_QWORD *)(a6 + 8);\n          v13[4] = v6->m128i_i64[0];\n          v13[5] = v6->m128i_i64[1];\n          *(_QWORD *)(a6 + 8) = splaytree_insert(v22, (unsigned int)v21, v13);\n          v13[3] = v40;\n        }\n        else\n        {\n          v13[3] = v40;\n          if ( v13 != 0LL )\n            goto LABEL_33;\n        }\nLABEL_28:\n        if ( (_DWORD)v39 == 0x4000 )\n        {\n          v34 = &a5[v9];\n          v35 = *v34;\n          *v34 = 0;\n          v36 = __lxstat64(1, (const char *)a5, &stat_buf);\n          *v34 = v35;\n          if ( v36 )\n            goto LABEL_56;\n        }\n        v23 = v13[6];\n        if ( v23 )\n        {\n          --*(_DWORD *)(v23 + 16);\n          v13[6] = 0LL;\n        }\n        if ( (stat_buf.st_mode & 0xF000) == 40960 )\n          v13[6] = sub_343F0(a6, a5, (unsigned int)v7, &stat_buf);\nLABEL_33:\n        ++*((_DWORD *)v13 + 4);\n        goto LABEL_34;\n      }\n      if ( v13 )\n        goto LABEL_33;\nLABEL_51:\n      v27 = calloc(1uLL, 0x38uLL);\n      v13 = v27;\n      if ( !v27 )\n        ck_assert_failed((__int64)\"stat_cache.c\", 244LL, (__int64)\"((void *)0) != fam_dir\");\n      buffer_copy_string_len((__int64)v27, a5, v9);\n      v28 = *(_DWORD *)(a3 + 40);\n      v29 = (const char *)*v13;\n      *((_DWORD *)v13 + 4) = 0;\n      v30 = inotify_add_watch(v28, v29, 0x5000F46u);\n      *((_DWORD *)v13 + 5) = v30;\n      if ( v30 < 0 )\n        goto LABEL_59;\n      v31 = splaytree_insert(*(_QWORD *)a6, HIDWORD(v39), v13);\n      v32 = *((unsigned int *)v13 + 5);\n      v33 = *(_QWORD *)(a6 + 8);\n      *(_QWORD *)a6 = v31;\n      *(_QWORD *)(a6 + 8) = splaytree_insert(v33, v32, v13);\n      v13[3] = v40;\n      v13[4] = v6->m128i_i64[0];\n      v13[5] = v6->m128i_i64[1];\n      goto LABEL_28;\n    }\n    v37 = __xstat64(1, (const char *)a5, (struct stat64 *)v6);\n    v15 = &a5[v9];\n    if ( !v37 )\n      goto LABEL_15;\n  }\n  *v15 = 47;\n  v13 = 0LL;\nLABEL_34:\n  while ( 1 )\n  {\n    result = v13;\n    if ( __readfsqword(0x28u) == v42 )\n      break;\nLABEL_59:\n    log_perror(\n      *(_DWORD **)(a6 + 16),\n      \"stat_cache.c\",\n      745LL,\n      (__int64)\"monitoring dir failed: %s file: %s\",\n      *v13,\n      a5,\n      v39);\n    v38 = v13;\n    v13 = 0LL;\n    sub_33B40(v38);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x343f0L", 
            "funcEndAddr": "0x348c9L", 
            "funcName": "sub_343F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall stat_cache_delete_entry(_BYTE *a1, unsigned int a2)\n{\n  unsigned int v2; // ebx\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  _DWORD *v5; // r12\n  bool v6; // zf\n\n  if ( dword_2585D0 != 1 )\n  {\n    v2 = a2;\n    if ( !a2 )\n      ck_assert_failed((__int64)\"stat_cache.c\", 1129LL, (__int64)\"0 != len\");\n    v3 = a2 - 1;\n    if ( a1[v3] == 47 )\n    {\n      v2 = 1;\n      if ( a2 != 1 )\n        v2 = a2 - 1;\n    }\n    v4 = sub_338B0(&qword_2585D8, (__int64)a1, v2);\n    v5 = (_DWORD *)v4;\n    if ( v4 && (unsigned int)buffer_eq_slen(v4, a1, v2) )\n    {\n      v6 = v5[7]-- == 1;\n      if ( v6 )\n        sub_33C70(v5);\n      qword_2585D8 = splaytree_delete(qword_2585D8, *(unsigned int *)(qword_2585D8 + 16));\n    }\n  }\n}\n", 
            "funcStartAddr": "0x348d0L", 
            "funcEndAddr": "0x3497aL", 
            "funcName": "stat_cache_delete_entry"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall stat_cache_invalidate_entry(const void *a1, unsigned int a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rbp\n\n  result = sub_338B0(&qword_2585D8, (__int64)a1, a2);\n  if ( result )\n  {\n    v3 = result;\n    result = buffer_eq_slen(result, a1, a2);\n    if ( (_DWORD)result )\n    {\n      result = *(_QWORD *)(v3 + 32);\n      *(_QWORD *)(v3 + 16) = 0LL;\n      if ( result )\n      {\n        --*(_DWORD *)(result + 16);\n        *(_QWORD *)(v3 + 32) = 0LL;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x34980L", 
            "funcEndAddr": "0x349d5L", 
            "funcName": "stat_cache_invalidate_entry"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_349E0(__int64 a1)\n{\n  __int64 v1; // r14\n  int v2; // eax\n  int v3; // er15\n  int v4; // ebp\n  char *v5; // rbx\n  unsigned int v6; // er13\n  unsigned int v7; // eax\n  __int64 v8; // rax\n  int v9; // ecx\n  __int64 v10; // r11\n  unsigned int v11; // eax\n  _BYTE *v12; // r13\n  unsigned int v13; // ebx\n  __int64 v14; // rax\n  signed int v16; // ecx\n  __int64 v17; // rsi\n  unsigned int v18; // eax\n  __int64 v19; // rax\n  __int64 v20; // rsi\n  _BOOL4 v21; // eax\n  int v22; // ecx\n  _BYTE *v23; // rbx\n  int v24; // eax\n  const void *v25; // rdi\n  char *buf; // [rsp+0h] [rbp-1078h]\n  int v27; // [rsp+8h] [rbp-1070h]\n  __int64 v28; // [rsp+10h] [rbp-1068h]\n  unsigned int v29; // [rsp+10h] [rbp-1068h]\n  __int64 v30; // [rsp+18h] [rbp-1060h]\n  __int64 v31; // [rsp+18h] [rbp-1060h]\n  __int64 v32; // [rsp+20h] [rbp-1058h]\n  char v33; // [rsp+30h] [rbp-1048h]\n  unsigned __int64 v34; // [rsp+1038h] [rbp-40h]\n\n  v1 = a1;\n  v34 = __readfsqword(0x28u);\n  buf = &v33;\n  while ( 1 )\n  {\n    v2 = read(*(_DWORD *)(v1 + 40), buf, 0x1000uLL);\n    v27 = v2;\n    v3 = v2;\n    if ( v2 <= 0 )\n      break;\n    v4 = 0;\n    do\n    {\n      v5 = &buf[v4];\n      v6 = *((_DWORD *)v5 + 3);\n      if ( v6 > 0x1000 )\n        break;\n      v4 += v6 + 16;\n      if ( v3 < v4 )\n        break;\n      v7 = *((_DWORD *)v5 + 1);\n      if ( !(v7 & 0x100) )\n      {\n        if ( v7 & 0x4000 )\n        {\n          log_error(*(_DWORD **)(v1 + 16), \"stat_cache.c\", 385LL, (__int64)\"inotify queue overflow\", buf);\n        }\n        else\n        {\n          v8 = splaytree_splay(*(_QWORD *)(v1 + 8), *(unsigned int *)v5);\n          *(_QWORD *)(v1 + 8) = v8;\n          if ( v8 )\n          {\n            v9 = *(_DWORD *)(v8 + 16);\n            if ( v9 == *(_DWORD *)v5 )\n            {\n              v10 = *(_QWORD *)(v8 + 24);\n              if ( v10 )\n              {\n                if ( v9 == *(_DWORD *)(v10 + 20) )\n                {\n                  v11 = *((_DWORD *)v5 + 1);\n                  if ( v11 & 6 )\n                  {\n                    v16 = 1;\n                    if ( v6 )\n                      goto LABEL_27;\n                  }\n                  else\n                  {\n                    if ( v11 & 0x2600 )\n                    {\n                      if ( v6 )\n                      {\n                        v16 = 2;\n                        goto LABEL_27;\n                      }\nLABEL_16:\n                      v12 = *(_BYTE **)v10;\n                      v28 = v10;\n                      v13 = *(_DWORD *)(v10 + 8) - (*(_DWORD *)(v10 + 8) != 0);\n                      stat_cache_delete_entry(*(_BYTE **)v10, v13);\n                      sub_33DF0(v12, v13);\n                      v14 = *(_QWORD *)(v28 + 48);\n                      *(_QWORD *)(v28 + 24) = 0LL;\n                      if ( v14 )\n                      {\n                        --*(_DWORD *)(v14 + 16);\n                        *(_QWORD *)(v28 + 48) = 0LL;\n                      }\n                      if ( *(_QWORD *)v1 )\n                        sub_33A00(\n                          *(_QWORD **)v1,\n                          *(const void **)v28,\n                          *(_DWORD *)(v28 + 8) - (unsigned int)(*(_DWORD *)(v28 + 8) != 0));\n                      sub_33B60();\n                      continue;\n                    }\n                    if ( !(v11 & 0x840) )\n                    {\n                      if ( v6 )\n                      {\n                        v16 = 0;\n                        goto LABEL_27;\n                      }\n                      continue;\n                    }\n                    if ( !v6 )\n                      goto LABEL_16;\n                    v16 = 6;\nLABEL_27:\n                    while ( v6 != 1 )\n                    {\n                      v17 = v6 - 2;\n                      v18 = v6-- - 1;\n                      if ( v5[v17 + 16] )\n                      {\n                        if ( !((1LL << v16) & 0x46) )\n                          goto LABEL_21;\n                        v30 = v10;\n                        v29 = *(_DWORD *)(v10 + 8) - (*(_DWORD *)(v10 + 8) != 0);\n                        buffer_append_path_len(v10, v5 + 16, v18);\n                        stat_cache_invalidate_entry(\n                          *(const void **)v30,\n                          *(_DWORD *)(v30 + 8) - (*(_DWORD *)(v30 + 8) != 0));\n                        v19 = sub_338B0(\n                                (__int64 *)v1,\n                                *(_QWORD *)v30,\n                                *(_DWORD *)(v30 + 8) - (unsigned int)(*(_DWORD *)(v30 + 8) != 0));\n                        if ( !v19 )\n                        {\n                          *(_BYTE *)(*(_QWORD *)v30 + v29) = 0;\n                          *(_DWORD *)(v30 + 8) = v29 + 1;\n                          goto LABEL_21;\n                        }\n                        v20 = v30;\n                        v32 = v30;\n                        v31 = v19;\n                        v21 = buffer_is_equal(v19, v20);\n                        v22 = v29 + 1;\n                        v23 = (_BYTE *)(*(_QWORD *)v32 + v29);\n                        if ( !v21 )\n                        {\n                          *v23 = 0;\n                          *(_DWORD *)(v32 + 8) = v22;\n                          goto LABEL_21;\n                        }\n                        *v23 = 0;\n                        v25 = *(const void **)v32;\n                        *(_DWORD *)(v32 + 8) = v22;\n                        stat_cache_invalidate_entry(v25, v29);\n                        v10 = v31;\n                        goto LABEL_16;\n                      }\n                    }\n                    if ( v16 == 2 || v16 == 6 )\n                      goto LABEL_16;\n                    if ( v16 != 1 )\n                      continue;\n                  }\n                  stat_cache_invalidate_entry(*(const void **)v10, *(_DWORD *)(v10 + 8) - (*(_DWORD *)(v10 + 8) != 0));\n                }\n              }\n            }\n          }\n        }\n      }\nLABEL_21:\n      ;\n    }\n    while ( v3 > v4 );\n    if ( (unsigned __int64)(v27 + 272LL) <= 0x1000 )\n      return __readfsqword(0x28u) ^ v34;\n  }\n  if ( v2 == -1 )\n  {\n    v24 = *__errno_location();\n    if ( v24 != 4 && v24 != 11 )\n      log_perror(*(_DWORD **)(v1 + 16), \"stat_cache.c\", 370LL, (__int64)&unk_4AAC7, buf);\n  }\n  return __readfsqword(0x28u) ^ v34;\n}\n", 
            "funcStartAddr": "0x349e0L", 
            "funcEndAddr": "0x34d9fL", 
            "funcName": "sub_349E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_34DA0(__int64 a1, __int16 a2)\n{\n  __int64 v2; // rbx\n  int v4; // edi\n\n  v2 = a1;\n  if ( a2 & 1 )\n    sub_349E0(a1);\n  if ( a2 & 0x2010 )\n  {\n    log_error(*(_DWORD **)(a1 + 16), \"stat_cache.c\", 556LL, (__int64)\"FAM connection closed; disabling stat_cache.\");\n    fdevent_fdnode_event_del(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));\n    fdevent_unregister(*(_QWORD **)(a1 + 24), *(_DWORD *)(a1 + 40));\n    v4 = *(_DWORD *)(a1 + 40);\n    *(_QWORD *)(v2 + 32) = 0LL;\n    close(v4);\n    *(_DWORD *)(v2 + 40) = -1;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x34da0L", 
            "funcEndAddr": "0x34e1fL", 
            "funcName": "sub_34DA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall stat_cache_delete_dir(_BYTE *a1, unsigned int a2)\n{\n  size_t v2; // rbp\n  int v3; // ebx\n  unsigned __int64 result; // rax\n  _QWORD **v5; // r13\n  __int64 v6; // rax\n  __int64 v7; // rbx\n  __int64 v8; // rax\n\n  if ( !a2 )\n    ck_assert_failed((__int64)\"stat_cache.c\", 1231LL, (__int64)\"0 != len\");\n  v2 = a2 - 1;\n  v3 = a2;\n  if ( a1[v2] == 47 )\n  {\n    v3 = 1;\n    if ( a2 != 1 )\n      v3 = a2 - 1;\n    if ( a2 == 1 )\n      v2 = 1LL;\n  }\n  else\n  {\n    v2 = a2;\n  }\n  stat_cache_delete_entry(a1, v3);\n  result = sub_33DF0(a1, v2);\n  if ( dword_2585D0 == 2 )\n  {\n    v5 = (_QWORD **)qword_2585E0;\n    v6 = sub_338B0((__int64 *)qword_2585E0, (__int64)a1, v3);\n    v7 = v6;\n    if ( v6 )\n    {\n      if ( (unsigned int)buffer_eq_slen(v6, a1, v2) )\n      {\n        v8 = *(_QWORD *)(v7 + 48);\n        *(_QWORD *)(v7 + 24) = 0LL;\n        if ( v8 )\n        {\n          --*(_DWORD *)(v8 + 16);\n          *(_QWORD *)(v7 + 48) = 0LL;\n        }\n      }\n    }\n    if ( *v5 )\n      sub_33A00(*v5, a1, v2);\n    result = sub_33B60();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x34e20L", 
            "funcEndAddr": "0x34f10L", 
            "funcName": "stat_cache_delete_dir"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall stat_cache_get_entry(__int64 a1)\n{\n  unsigned int v1; // eax\n  unsigned __int8 *v2; // rcx\n  size_t v3; // r12\n  unsigned __int8 **v4; // r13\n  signed __int64 v5; // rax\n  int v6; // ebx\n  __int64 v7; // rax\n  int v8; // edx\n  unsigned int v9; // ebx\n  __int64 v10; // rax\n  __int64 v11; // r15\n  const char *v12; // r9\n  _QWORD *v13; // r14\n  _BOOL4 v15; // eax\n  int v16; // edi\n  int v17; // eax\n  _QWORD *v18; // rax\n  unsigned __int8 *v19; // rsi\n  bool v20; // zf\n  __int64 v21; // rax\n  _DWORD *v22; // rdi\n  __int64 v23; // [rsp+8h] [rbp-F0h]\n  signed int v24; // [rsp+14h] [rbp-E4h]\n  char *filename; // [rsp+18h] [rbp-E0h]\n  struct stat64 stat_buf; // [rsp+20h] [rbp-D8h]\n  unsigned __int64 v27; // [rsp+B8h] [rbp-40h]\n\n  v27 = __readfsqword(0x28u);\n  v1 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n  if ( *(_DWORD *)(a1 + 8) == (*(_DWORD *)(a1 + 8) != 0) )\n    ck_assert_failed((__int64)\"stat_cache.c\", 1262LL, (__int64)\"0 != len\");\n  v2 = *(unsigned __int8 **)a1;\n  v3 = v1;\n  v4 = (unsigned __int8 **)a1;\n  v5 = v1 - 1LL;\n  v24 = 0;\n  if ( *(_BYTE *)(*(_QWORD *)a1 + v3 - 1) == 47 )\n  {\n    v3 = 1LL;\n    v24 = 1;\n    if ( v5 )\n      v3 = v5;\n  }\n  if ( *v2 != 47 )\n  {\n    v13 = 0LL;\n    *__errno_location() = 22;\n    return v13;\n  }\n  v6 = 5381;\n  v23 = log_monotonic_secs;\n  v7 = 0LL;\n  do\n  {\n    v8 = v2[v7++];\n    v6 = v8 ^ 33 * v6;\n  }\n  while ( (unsigned int)v3 > (unsigned int)v7 );\n  v9 = v6 & 0x7FFFFFFF;\n  v10 = splaytree_splay(qword_2585D8, v9);\n  v11 = v10;\n  qword_2585D8 = v10;\n  v12 = *(const char **)a1;\n  if ( v10 )\n  {\n    if ( *(_DWORD *)(v10 + 16) == v9 )\n    {\n      v13 = *(_QWORD **)(v10 + 24);\n      filename = *(char **)a1;\n      v15 = buffer_eq_slen(*(_QWORD *)(v10 + 24), *(const void **)a1, v3);\n      v12 = filename;\n      if ( v15 )\n      {\n        if ( !dword_2585D0 )\n        {\n          if ( v13[2] != v23 )\n            goto LABEL_16;\nLABEL_50:\n          if ( !v24 || (v13[12] & 0xF000) == 0x4000 )\n            return v13;\n          goto LABEL_52;\n        }\n        if ( dword_2585D0 == 2 )\n        {\n          if ( !v13[4] || v23 - v13[2] > 15 )\n          {\nLABEL_16:\n            if ( __xstat64(1, filename, &stat_buf) != -1 )\n            {\nLABEL_17:\n              v16 = *((_DWORD *)v13 + 6);\n              *((_DWORD *)v13 + 12) = 0;\n              if ( v16 >= 0\n                && (v13[21] != stat_buf.st_mtim.tv_nsec\n                 || v13[20] != stat_buf.st_mtim.tv_sec\n                 || v13[15] != stat_buf.st_size\n                 || v13[10] != stat_buf.st_ino\n                 || v13[9] != stat_buf.st_dev) )\n              {\n                v17 = *((_DWORD *)v13 + 7);\n                if ( v17 == 1 )\n                {\n                  close(v16);\n                  *((_DWORD *)v13 + 6) = -1;\n                }\n                else\n                {\n                  *((_DWORD *)v13 + 7) = v17 - 1;\n                  v18 = sub_33860();\n                  v19 = *v4;\n                  *(_QWORD *)(v11 + 24) = v18;\n                  v13 = v18;\n                  buffer_copy_string_len((__int64)v18, v19, v3);\n                }\n              }\n              goto LABEL_26;\n            }\n            return 0LL;\n          }\n          goto LABEL_50;\n        }\n        if ( __xstat64(1, filename, &stat_buf) == -1 )\n          return 0LL;\n        if ( v13 )\n          goto LABEL_17;\n        if ( !v24 || (stat_buf.st_mode & 0xF000) != 0x8000 )\n        {\n          v13 = sub_33860();\n          buffer_copy_string_len((__int64)v13, *(const void **)a1, v3);\nLABEL_24:\n          if ( *(_DWORD *)(v11 + 16) == v9 )\n          {\n            v22 = *(_DWORD **)(v11 + 24);\n            if ( v22 )\n            {\n              v20 = v22[7]-- == 1;\n              if ( v20 )\n                sub_33C70(v22);\n            }\n            *(_QWORD *)(v11 + 24) = v13;\n            goto LABEL_26;\n          }\n          goto LABEL_25;\n        }\nLABEL_52:\n        *__errno_location() = 20;\n        return 0LL;\n      }\n    }\n  }\n  if ( __xstat64(1, v12, &stat_buf) == -1 )\n    return 0LL;\n  if ( v24 && (stat_buf.st_mode & 0xF000) == 0x8000 )\n    goto LABEL_52;\n  v13 = sub_33860();\n  buffer_copy_string_len((__int64)v13, *(const void **)a1, v3);\n  if ( v11 )\n    goto LABEL_24;\nLABEL_25:\n  qword_2585D8 = splaytree_insert(v11, v9, v13);\nLABEL_26:\n  v20 = dword_2585D0 == 2;\n  *(__m128i *)(v13 + 9) = _mm_load_si128((const __m128i *)&stat_buf);\n  *(__m128i *)(v13 + 11) = _mm_load_si128((const __m128i *)&stat_buf.st_nlink);\n  *(__m128i *)(v13 + 13) = _mm_load_si128((const __m128i *)&stat_buf.st_gid);\n  *(__m128i *)(v13 + 15) = _mm_load_si128((const __m128i *)&stat_buf.st_size);\n  *(__m128i *)(v13 + 17) = _mm_load_si128((const __m128i *)&stat_buf.st_blocks);\n  *(__m128i *)(v13 + 19) = _mm_load_si128((const __m128i *)&stat_buf.st_atim.tv_nsec);\n  *(__m128i *)(v13 + 21) = _mm_load_si128((const __m128i *)&stat_buf.st_mtim.tv_nsec);\n  *(__m128i *)(v13 + 23) = _mm_load_si128((const __m128i *)&stat_buf.st_ctim.tv_nsec);\n  *(__m128i *)(v13 + 25) = _mm_load_si128((const __m128i *)&stat_buf.__unused[1]);\n  if ( v20 )\n  {\n    v21 = v13[4];\n    if ( v21 )\n      --*(_DWORD *)(v21 + 16);\n    v13[4] = sub_343F0(v3, (__m128i *)&stat_buf, (__int64)qword_2585E0, *v4, (unsigned __int8 *)v3, (__int64)v4);\n  }\n  v13[2] = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x34f10L", 
            "funcEndAddr": "0x3537bL", 
            "funcName": "stat_cache_get_entry"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall stat_cache_path_stat(__int64 a1)\n{\n  _QWORD *v1; // rax\n  signed __int64 v2; // rdx\n  bool v3; // zf\n  signed __int64 result; // rax\n\n  v1 = stat_cache_get_entry(a1);\n  v2 = (signed __int64)(v1 + 9);\n  v3 = v1 == 0LL;\n  result = 0LL;\n  if ( !v3 )\n    result = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x35380L", 
            "funcEndAddr": "0x3539eL", 
            "funcName": "stat_cache_path_stat"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall stat_cache_path_isdir(__int64 a1)\n{\n  _QWORD *v1; // rax\n  unsigned int v2; // edx\n  int *v3; // rax\n\n  v1 = stat_cache_get_entry(a1);\n  v2 = 0;\n  if ( v1 )\n  {\n    v2 = 1;\n    if ( (v1[12] & 0xF000) != 0x4000 )\n    {\n      v3 = __errno_location();\n      v2 = 0;\n      *v3 = 20;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x353a0L", 
            "funcEndAddr": "0x353d8L", 
            "funcName": "stat_cache_path_isdir"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall stat_cache_open_rdonly_fstat(const char **a1, struct stat64 *a2, int a3)\n{\n  int v3; // eax\n  unsigned int v4; // ebx\n  int *v6; // rax\n  int v7; // er12\n  int *v8; // rbp\n\n  v3 = fdevent_open_cloexec(*a1, a3, 0, 0);\n  if ( v3 < 0 )\n  {\n    v4 = -1;\n  }\n  else\n  {\n    v4 = v3;\n    if ( __fxstat64(1, v3, a2) )\n    {\n      v6 = __errno_location();\n      v7 = *v6;\n      v8 = v6;\n      close(v4);\n      v4 = -1;\n      *v8 = v7;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x353e0L", 
            "funcEndAddr": "0x3543cL", 
            "funcName": "stat_cache_open_rdonly_fstat"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall stat_cache_get_entry_open(const char **a1, int a2)\n{\n  _QWORD *result; // rax\n  _QWORD *v3; // rbx\n  int v4; // eax\n\n  result = stat_cache_get_entry((__int64)a1);\n  v3 = result;\n  if ( result && *((_DWORD *)result + 6) < 0 && result[15] > 0LL )\n  {\n    v4 = stat_cache_open_rdonly_fstat(a1, (struct stat64 *)(result + 9), a2);\n    *((_DWORD *)v3 + 12) = 0;\n    *((_DWORD *)v3 + 6) = v4;\n    result = v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x35440L", 
            "funcEndAddr": "0x35498L", 
            "funcName": "stat_cache_get_entry_open"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 stat_cache_trigger_cleanup()\n{\n  unsigned __int64 result; // rax\n\n  if ( dword_2585D0 != 2 )\n    return sub_33CC0(2LL, log_monotonic_secs);\n  if ( !(log_monotonic_secs & 0x1F) )\n  {\n    sub_33B60();\n    result = sub_33CC0(32LL, log_monotonic_secs);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x354a0L", 
            "funcEndAddr": "0x354f0L", 
            "funcName": "stat_cache_trigger_cleanup"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_uri_clean(__int64 a1)\n{\n  return sub_1D2C0(a1, 0);\n}\n", 
            "funcStartAddr": "0x354f0L", 
            "funcEndAddr": "0x354f7L", 
            "funcName": "plugins_call_handle_uri_clean"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_docroot(__int64 a1)\n{\n  return sub_1D2C0(a1, 1);\n}\n", 
            "funcStartAddr": "0x35500L", 
            "funcEndAddr": "0x3550aL", 
            "funcName": "plugins_call_handle_docroot"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_physical(__int64 a1)\n{\n  return sub_1D2C0(a1, 2);\n}\n", 
            "funcStartAddr": "0x35510L", 
            "funcEndAddr": "0x3551aL", 
            "funcName": "plugins_call_handle_physical"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_subrequest_start(__int64 a1)\n{\n  return sub_1D2C0(a1, 3);\n}\n", 
            "funcStartAddr": "0x35520L", 
            "funcEndAddr": "0x3552aL", 
            "funcName": "plugins_call_handle_subrequest_start"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_response_start(__int64 a1)\n{\n  return sub_1D2C0(a1, 4);\n}\n", 
            "funcStartAddr": "0x35530L", 
            "funcEndAddr": "0x3553aL", 
            "funcName": "plugins_call_handle_response_start"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_request_done(__int64 a1)\n{\n  return sub_1D2C0(a1, 5);\n}\n", 
            "funcStartAddr": "0x35540L", 
            "funcEndAddr": "0x3554aL", 
            "funcName": "plugins_call_handle_request_done"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_request_reset(__int64 a1)\n{\n  return sub_1D2C0(a1, 6);\n}\n", 
            "funcStartAddr": "0x35550L", 
            "funcEndAddr": "0x3555aL", 
            "funcName": "plugins_call_handle_request_reset"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_request_env(__int64 a1)\n{\n  return sub_1D2C0(a1, 7);\n}\n", 
            "funcStartAddr": "0x35560L", 
            "funcEndAddr": "0x3556aL", 
            "funcName": "plugins_call_handle_request_env"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_connection_accept(__int64 a1)\n{\n  return sub_1D320(a1, 8);\n}\n", 
            "funcStartAddr": "0x35570L", 
            "funcEndAddr": "0x3557aL", 
            "funcName": "plugins_call_handle_connection_accept"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_connection_shut_wr(__int64 a1)\n{\n  return sub_1D320(a1, 9);\n}\n", 
            "funcStartAddr": "0x35580L", 
            "funcEndAddr": "0x3558aL", 
            "funcName": "plugins_call_handle_connection_shut_wr"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_connection_close(__int64 a1)\n{\n  return sub_1D320(a1, 10);\n}\n", 
            "funcStartAddr": "0x35590L", 
            "funcEndAddr": "0x3559aL", 
            "funcName": "plugins_call_handle_connection_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_trigger(__int64 a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rbx\n  __int64 (__fastcall *i)(__int64, __int64); // rdx\n  __int64 v4; // rsi\n\n  result = *(unsigned __int16 *)(*(_QWORD *)a1 + 22LL);\n  if ( (_WORD)result )\n  {\n    v2 = result + *(_QWORD *)a1;\n    for ( i = *(__int64 (__fastcall **)(__int64, __int64))v2;\n          *(_QWORD *)v2;\n          i = *(__int64 (__fastcall **)(__int64, __int64))v2 )\n    {\n      v4 = *(_QWORD *)(v2 + 8);\n      v2 += 16LL;\n      result = i(a1, v4);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x355a0L", 
            "funcEndAddr": "0x355deL", 
            "funcName": "plugins_call_handle_trigger"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall plugins_call_handle_waitpid(__int64 a1, unsigned int a2, unsigned int a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // rbx\n  unsigned int v5; // er13\n  __int64 (__fastcall *v6)(__int64, _QWORD, _QWORD, _QWORD); // r8\n  __int64 result; // rax\n\n  v3 = *(unsigned __int16 *)(*(_QWORD *)a1 + 24LL);\n  if ( !(_WORD)v3 )\n    return 0LL;\n  v4 = v3 + *(_QWORD *)a1;\n  v5 = a3;\n  v6 = *(__int64 (__fastcall **)(__int64, _QWORD, _QWORD, _QWORD))v4;\n  if ( !*(_QWORD *)v4 )\n    return 0LL;\n  while ( 1 )\n  {\n    result = v6(a1, *(_QWORD *)(v4 + 8), a2, v5);\n    if ( (_DWORD)result )\n      break;\n    v4 += 16LL;\n    v6 = *(__int64 (__fastcall **)(__int64, _QWORD, _QWORD, _QWORD))v4;\n    if ( !*(_QWORD *)v4 )\n      return 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x355e0L", 
            "funcEndAddr": "0x3564dL", 
            "funcName": "plugins_call_handle_waitpid"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_etag_matches(__int64 a1, const char *a2, int a3)\n{\n  const char *v3; // r14\n  unsigned __int64 v4; // rbx\n  unsigned int v5; // edx\n  signed __int64 result; // rax\n  const char *v7; // rbp\n  unsigned int v8; // er12\n  signed __int64 v9; // r15\n  signed __int64 v10; // r13\n  signed __int64 v11; // rax\n  int v12; // [rsp+Ch] [rbp-3Ch]\n\n  v3 = a2;\n  v4 = *(unsigned __int8 *)a2;\n  v12 = a3;\n  if ( (_BYTE)v4 != 42 || (result = 1LL, a2[1]) )\n  {\n    v5 = *(_DWORD *)(a1 + 8);\n    result = 0LL;\n    if ( v5 > 1 )\n    {\n      v7 = *(const char **)a1;\n      v8 = v5 - 1;\n      if ( **(_BYTE **)a1 != 87 || v7[1] != 47 )\n        goto LABEL_4;\n      if ( v12 )\n      {\n        v7 += 2;\n        v8 = v5 - 3;\nLABEL_4:\n        v9 = 17596481012224LL;\n        while ( 1 )\n        {\n          if ( !(_BYTE)v4 )\n            return 0LL;\n          if ( (unsigned __int8)v4 <= 0x2Cu )\n          {\n            while ( _bittest64(&v9, v4) )\n            {\n              v4 = *(unsigned __int8 *)++v3;\n              if ( (unsigned __int8)v4 > 0x2Cu )\n              {\n                if ( (_BYTE)v4 != 87 )\n                  break;\n                goto LABEL_17;\n              }\n            }\n          }\n          else if ( (_BYTE)v4 == 87 )\n          {\nLABEL_17:\n            if ( v3[1] == 47 )\n            {\n              v4 = *((unsigned __int8 *)v3 + 2);\n              v3 += 2;\n              if ( !v12 )\n                goto LABEL_11;\n              goto LABEL_9;\n            }\n          }\n          v4 = *(unsigned __int8 *)v3;\nLABEL_9:\n          v10 = v8;\n          if ( !strncmp(v3, v7, v8) )\n          {\n            if ( (_BYTE)v4 == 42 )\n              v10 = 1LL;\n          }\n          else\n          {\n            if ( (_BYTE)v4 != 42 )\n              goto LABEL_11;\n            v10 = 1LL;\n          }\n          v3 += v10;\n          v4 = *(unsigned __int8 *)v3;\n          if ( (unsigned __int8)v4 <= 0x2Cu )\n          {\n            v11 = 17596481012225LL;\n            if ( _bittest64(&v11, v4) )\n              return 1LL;\n          }\nLABEL_11:\n          while ( (_BYTE)v4 && (_BYTE)v4 != 44 )\n            v4 = *(unsigned __int8 *)++v3;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x35650L", 
            "funcEndAddr": "0x357cfL", 
            "funcName": "http_etag_matches"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall http_etag_create(__int64 a1, _QWORD *a2, int a3)\n{\n  unsigned int v3; // eax\n  __int64 v4; // rcx\n  __int64 v5; // rcx\n  __int64 v6; // rdx\n  unsigned int v7; // esi\n  __int64 *v8; // rdx\n  __int64 *v9; // rax\n  char *v10; // rcx\n  __int64 v11; // rbx\n  unsigned __int64 result; // rax\n  unsigned __int64 v13; // rt1\n  __int64 v14[5]; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v15; // [rsp+28h] [rbp-20h]\n\n  v15 = __readfsqword(0x28u);\n  v3 = 0;\n  if ( !a3 )\n    return __readfsqword(0x28u) ^ v15;\n  if ( a3 & 1 )\n  {\n    v14[0] = a2[1];\n    v3 = 1;\n  }\n  if ( a3 & 4 )\n  {\n    v4 = v3++;\n    v14[v4] = a2[6];\n  }\n  if ( a3 & 2 )\n  {\n    v5 = v3;\n    v6 = v3 + 1;\n    v3 += 2;\n    v14[v5] = a2[11];\n    v14[v6] = a2[12];\n  }\n  v7 = 8 * v3;\n  *(_DWORD *)(a1 + 8) = 0;\n  if ( 8 * v3 )\n  {\n    v8 = v14;\n    v9 = (__int64 *)((char *)v14 + 1);\n    v10 = (char *)v14 + v7;\n    while ( 1 )\n    {\n      v7 = *(unsigned __int8 *)v8 ^ __ROL4__(v7, 5);\n      v8 = v9;\n      if ( v10 == (char *)v9 )\n        break;\n      v9 = (__int64 *)((char *)v9 + 1);\n    }\n    v11 = v7;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  buffer_copy_string_len(a1, \"\\\"\", 1uLL);\n  buffer_append_int(a1, v11);\n  v13 = __readfsqword(0x28u);\n  result = v13 ^ v15;\n  if ( v13 == v15 )\n    result = (unsigned __int64)buffer_append_string_len(a1, \"\\\"\", 1uLL);\n  return result;\n}\n", 
            "funcStartAddr": "0x357d0L", 
            "funcEndAddr": "0x358e9L", 
            "funcName": "http_etag_create"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_358F0(__int64 a1, __int64 a2, int a3)\n{\n  __int64 v3; // rcx\n  signed __int64 v4; // r10\n  int v5; // eax\n  int v6; // edx\n  unsigned __int8 v7; // r8\n  unsigned int v8; // ebx\n\n  if ( !a3 )\n    return 0LL;\n  v3 = 0LL;\n  v4 = (unsigned int)(a3 - 1) + 1LL;\n  do\n  {\n    v5 = *(unsigned __int8 *)(a1 + v3);\n    v6 = *(unsigned __int8 *)(a2 + v3);\n    v7 = *(_BYTE *)(a2 + v3);\n    if ( v5 != v6 )\n    {\n      v8 = v6 - 65;\n      if ( (unsigned int)(v5 - 65) > 0x19 )\n      {\n        if ( v8 > 0x19 )\n          return (unsigned int)(v5 - v6);\n        v6 = v7 | 0x20;\n      }\n      else\n      {\n        v5 = *(_BYTE *)(a1 + v3) | 0x20;\n        if ( v8 <= 0x19 )\n          v6 = v7 | 0x20;\n      }\n      if ( v6 != v5 )\n        return (unsigned int)(v5 - v6);\n    }\n    ++v3;\n  }\n  while ( v4 != v3 );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x358f0L", 
            "funcEndAddr": "0x35963L", 
            "funcName": "sub_358F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35970(void *ptr)\n{\n  free(*(void **)ptr);\n  free(*((void **)ptr + 4));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x35970L", 
            "funcEndAddr": "0x3598eL", 
            "funcName": "sub_35970"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35990(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x35990L", 
            "funcEndAddr": "0x359a5L", 
            "funcName": "sub_35990"
        }, 
        {
            "decompiledFuncCode": "_DWORD *array_data_string_init()\n{\n  _DWORD *result; // rax\n\n  result = calloc(1uLL, 0x30uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"array.c\", 46LL, (__int64)\"((void *)0) != ds\");\n  result[6] = 0;\n  *((_QWORD *)result + 2) = &off_257810;\n  return result;\n}\n", 
            "funcStartAddr": "0x359b0L", 
            "funcEndAddr": "0x359f7L", 
            "funcName": "array_data_string_init"
        }, 
        {
            "decompiledFuncCode": "_DWORD *array_data_integer_init()\n{\n  _DWORD *result; // rax\n\n  result = calloc(1uLL, 0x20uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"array.c\", 76LL, (__int64)\"((void *)0) != di\");\n  result[6] = 2;\n  *((_QWORD *)result + 2) = &off_2577F0;\n  return result;\n}\n", 
            "funcStartAddr": "0x35a00L", 
            "funcEndAddr": "0x35a47L", 
            "funcName": "array_data_integer_init"
        }, 
        {
            "decompiledFuncCode": "_DWORD *array_data_array_init()\n{\n  _DWORD *result; // rax\n\n  result = calloc(1uLL, 0x38uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"array.c\", 107LL, (__int64)\"((void *)0) != da\");\n  result[6] = 1;\n  *((_QWORD *)result + 2) = &off_2577D0;\n  return result;\n}\n", 
            "funcStartAddr": "0x35a50L", 
            "funcEndAddr": "0x35a97L", 
            "funcName": "array_data_array_init"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall array_init(int a1)\n{\n  __int64 *result; // rax\n  __int64 *v2; // ST08_8\n\n  result = (__int64 *)calloc(1uLL, 0x18uLL);\n  if ( !result )\n    ck_assert_failed((__int64)\"array.c\", 130LL, (__int64)\"a\");\n  if ( a1 )\n  {\n    v2 = result;\n    sub_1B445(result, a1);\n    result = v2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x35aa0L", 
            "funcEndAddr": "0x35af3L", 
            "funcName": "array_init"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35B00(void *ptr)\n{\n  free(*(void **)ptr);\n  array_free_data((__int64)ptr + 32);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x35b00L", 
            "funcEndAddr": "0x35b1eL", 
            "funcName": "sub_35B00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall array_free(void *ptr)\n{\n  if ( ptr )\n  {\n    array_free_data((__int64)ptr);\n    free(ptr);\n  }\n}\n", 
            "funcStartAddr": "0x35b20L", 
            "funcEndAddr": "0x35b39L", 
            "funcName": "array_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall array_get_element_klen_ext(__int64 a1, int a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // rbx\n  int v5; // eax\n  __int64 result; // rax\n\n  v4 = *(_QWORD *)(a1 + 8);\n  v5 = sub_1D420(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), a2, a3, a4);\n  if ( v5 < 0 )\n    result = 0LL;\n  else\n    result = *(_QWORD *)(v4 + 8LL * v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x35b40L", 
            "funcEndAddr": "0x35b74L", 
            "funcName": "array_get_element_klen_ext"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_get_int_ptr(__int64 a1, const void *a2, unsigned int a3)\n{\n  __int64 v3; // r14\n  unsigned int v4; // er12\n  int v5; // eax\n  int v6; // ebx\n  _DWORD *v8; // rax\n  __int64 v9; // rbx\n\n  v3 = *(_QWORD *)(a1 + 8);\n  v4 = a3;\n  v5 = sub_1D4D0(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), (__int64)a2, a3);\n  v6 = v5;\n  if ( v5 >= 0 )\n    return *(_QWORD *)(v3 + 8LL * v5) + 28LL;\n  v8 = array_data_integer_init();\n  v9 = sub_1D380(a1, (__int64)v8, (unsigned int)~v6);\n  buffer_copy_string_len(v9, a2, v4);\n  *(_DWORD *)(v9 + 28) = 0;\n  return v9 + 28;\n}\n", 
            "funcStartAddr": "0x35b80L", 
            "funcEndAddr": "0x35bf9L", 
            "funcName": "array_get_int_ptr"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_get_buf_ptr(__int64 a1, const void *a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n  __int64 v4; // r13\n  int v5; // eax\n  __int64 v7; // rbx\n\n  v3 = a3;\n  v4 = *(_QWORD *)(a1 + 8);\n  v5 = sub_1D4D0(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), (__int64)a2, a3);\n  if ( v5 >= 0 )\n    return *(_QWORD *)(v4 + 8LL * v5) + 32LL;\n  v7 = sub_1D560(a1, (unsigned int)~v5);\n  buffer_copy_string_len(v7, a2, v3);\n  *(_DWORD *)(v7 + 40) = 0;\n  return v7 + 32;\n}\n", 
            "funcStartAddr": "0x35c00L", 
            "funcEndAddr": "0x35c72L", 
            "funcName": "array_get_buf_ptr"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall array_insert_value(__int64 a1, const void *a2, unsigned int a3)\n{\n  unsigned int v3; // ebx\n  __int64 v4; // rax\n\n  v3 = a3;\n  v4 = sub_1D560(a1, *(unsigned int *)(a1 + 16));\n  *(_DWORD *)(v4 + 8) = 0;\n  return buffer_copy_string_len(v4 + 32, a2, v3);\n}\n", 
            "funcStartAddr": "0x35c80L", 
            "funcEndAddr": "0x35caeL", 
            "funcName": "array_insert_value"
        }, 
        {
            "decompiledFuncCode": "const void **__fastcall array_match_key_prefix_klen(__int64 a1, const void *a2, unsigned int a3)\n{\n  int v3; // eax\n  const void ***v4; // r13\n  unsigned int v5; // ebx\n  signed __int64 v6; // rbp\n  const void **v7; // r14\n  size_t v8; // rdx\n\n  v3 = *(_DWORD *)(a1 + 16);\n  if ( !v3 )\n    return 0LL;\n  v4 = *(const void ****)a1;\n  v5 = a3;\n  v6 = *(_QWORD *)a1 + 8LL * (unsigned int)(v3 - 1) + 8;\n  while ( 1 )\n  {\n    v7 = *v4;\n    v8 = *((_DWORD *)*v4 + 2) - (unsigned int)(*((_DWORD *)*v4 + 2) != 0);\n    if ( v5 >= (unsigned int)v8 && !memcmp(a2, *v7, v8) )\n      break;\n    ++v4;\n    if ( (const void ***)v6 == v4 )\n      return 0LL;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x35cb0L", 
            "funcEndAddr": "0x35d0cL", 
            "funcName": "array_match_key_prefix_klen"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall array_match_key_prefix_nc_klen(__int64 a1, __int64 a2, unsigned int a3)\n{\n  int v3; // eax\n  __int64 **v4; // r13\n  unsigned int v5; // ebx\n  signed __int64 v6; // rbp\n  __int64 *v7; // r14\n  __int64 v8; // rdx\n\n  v3 = *(_DWORD *)(a1 + 16);\n  if ( !v3 )\n    return 0LL;\n  v4 = *(__int64 ***)a1;\n  v5 = a3;\n  v6 = *(_QWORD *)a1 + 8LL * (unsigned int)(v3 - 1) + 8;\n  while ( 1 )\n  {\n    v7 = *v4;\n    v8 = *((_DWORD *)*v4 + 2) - (unsigned int)(*((_DWORD *)*v4 + 2) != 0);\n    if ( v5 >= (unsigned int)v8 )\n    {\n      if ( (unsigned int)buffer_eq_icase_ssn(a2, *v7, v8) )\n        break;\n    }\n    ++v4;\n    if ( (__int64 **)v6 == v4 )\n      return 0LL;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x35d10L", 
            "funcEndAddr": "0x35d6cL", 
            "funcName": "array_match_key_prefix_nc_klen"
        }, 
        {
            "decompiledFuncCode": "const void **__fastcall array_match_key_prefix(__int64 a1, __int64 a2)\n{\n  return array_match_key_prefix_klen(\n           a1,\n           *(const void **)a2,\n           *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0));\n}\n", 
            "funcStartAddr": "0x35d70L", 
            "funcEndAddr": "0x35d84L", 
            "funcName": "array_match_key_prefix"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall array_match_key_prefix_nc(__int64 a1, __int64 a2)\n{\n  return array_match_key_prefix_nc_klen(\n           a1,\n           *(_QWORD *)a2,\n           *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0));\n}\n", 
            "funcStartAddr": "0x35d90L", 
            "funcEndAddr": "0x35da4L", 
            "funcName": "array_match_key_prefix_nc"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_match_value_prefix(__int64 **a1, __int64 a2)\n{\n  unsigned int v2; // ebx\n  int v3; // eax\n  __int64 *v4; // r13\n  signed __int64 v5; // rbp\n  __int64 v6; // r14\n  size_t v7; // rdx\n\n  v2 = *(_DWORD *)(a2 + 8) - (*(_DWORD *)(a2 + 8) != 0);\n  v3 = *((_DWORD *)a1 + 4);\n  if ( !v3 )\n    return 0LL;\n  v4 = *a1;\n  v5 = (signed __int64)&(*a1)[(unsigned int)(v3 - 1) + 1];\n  while ( 1 )\n  {\n    v6 = *v4;\n    v7 = *(_DWORD *)(*v4 + 40) - (unsigned int)(*(_DWORD *)(*v4 + 40) != 0);\n    if ( v2 >= (unsigned int)v7 && !memcmp(*(const void **)a2, *(const void **)(v6 + 32), v7) )\n      break;\n    ++v4;\n    if ( (__int64 *)v5 == v4 )\n      return 0LL;\n  }\n  return v6 + 32;\n}\n", 
            "funcStartAddr": "0x35db0L", 
            "funcEndAddr": "0x35e2dL", 
            "funcName": "array_match_value_prefix"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_match_value_prefix_nc(__int64 **a1, __int64 a2)\n{\n  unsigned int v2; // ebx\n  int v3; // eax\n  __int64 *v4; // r13\n  signed __int64 v5; // rbp\n  __int64 v6; // r14\n  __int64 v7; // rdx\n\n  v2 = *(_DWORD *)(a2 + 8) - (*(_DWORD *)(a2 + 8) != 0);\n  v3 = *((_DWORD *)a1 + 4);\n  if ( !v3 )\n    return 0LL;\n  v4 = *a1;\n  v5 = (signed __int64)&(*a1)[(unsigned int)(v3 - 1) + 1];\n  while ( 1 )\n  {\n    v6 = *v4;\n    v7 = *(_DWORD *)(*v4 + 40) - (unsigned int)(*(_DWORD *)(*v4 + 40) != 0);\n    if ( v2 >= (unsigned int)v7 )\n    {\n      if ( (unsigned int)buffer_eq_icase_ssn(*(_QWORD *)a2, *(_QWORD *)(v6 + 32), v7) )\n        break;\n    }\n    ++v4;\n    if ( (__int64 *)v5 == v4 )\n      return 0LL;\n  }\n  return v6 + 32;\n}\n", 
            "funcStartAddr": "0x35e30L", 
            "funcEndAddr": "0x35eadL", 
            "funcName": "array_match_value_prefix_nc"
        }, 
        {
            "decompiledFuncCode": "const void **__fastcall array_match_key_suffix(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // r12\n  unsigned int v3; // ebx\n  int v4; // eax\n  const void ***v5; // r14\n  signed __int64 v6; // rbp\n  const void **v7; // r15\n  size_t v8; // rdx\n\n  v2 = *a2;\n  v3 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  v4 = *(_DWORD *)(a1 + 16);\n  if ( !v4 )\n    return 0LL;\n  v5 = *(const void ****)a1;\n  v6 = *(_QWORD *)a1 + 8LL * (unsigned int)(v4 - 1) + 8;\n  while ( 1 )\n  {\n    v7 = *v5;\n    v8 = *((_DWORD *)*v5 + 2) - (unsigned int)(*((_DWORD *)*v5 + 2) != 0);\n    if ( v3 >= (unsigned int)v8 && !memcmp((const void *)(v2 + v3 - v8), *v7, v8) )\n      break;\n    ++v5;\n    if ( (const void ***)v6 == v5 )\n      return 0LL;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x35eb0L", 
            "funcEndAddr": "0x35f2fL", 
            "funcName": "array_match_key_suffix"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall array_match_key_suffix_nc(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // r12\n  unsigned int v3; // ebx\n  int v4; // eax\n  __int64 **v5; // r14\n  signed __int64 v6; // rbp\n  __int64 *v7; // r15\n  __int64 v8; // rdx\n\n  v2 = *a2;\n  v3 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  v4 = *(_DWORD *)(a1 + 16);\n  if ( !v4 )\n    return 0LL;\n  v5 = *(__int64 ***)a1;\n  v6 = *(_QWORD *)a1 + 8LL * (unsigned int)(v4 - 1) + 8;\n  while ( 1 )\n  {\n    v7 = *v5;\n    v8 = *((_DWORD *)*v5 + 2) - (unsigned int)(*((_DWORD *)*v5 + 2) != 0);\n    if ( v3 >= (unsigned int)v8 )\n    {\n      if ( (unsigned int)buffer_eq_icase_ssn(v2 + v3 - v8, *v7, v8) )\n        break;\n    }\n    ++v5;\n    if ( (__int64 **)v6 == v5 )\n      return 0LL;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x35f30L", 
            "funcEndAddr": "0x35fafL", 
            "funcName": "array_match_key_suffix_nc"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_match_value_suffix(__int64 **a1, __int64 *a2)\n{\n  __int64 v2; // r12\n  unsigned int v3; // ebx\n  int v4; // eax\n  __int64 *v5; // r14\n  signed __int64 v6; // rbp\n  __int64 v7; // r15\n  size_t v8; // rdx\n\n  v2 = *a2;\n  v3 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  v4 = *((_DWORD *)a1 + 4);\n  if ( !v4 )\n    return 0LL;\n  v5 = *a1;\n  v6 = (signed __int64)&(*a1)[(unsigned int)(v4 - 1) + 1];\n  while ( 1 )\n  {\n    v7 = *v5;\n    v8 = *(_DWORD *)(*v5 + 40) - (unsigned int)(*(_DWORD *)(*v5 + 40) != 0);\n    if ( v3 >= (unsigned int)v8 && !memcmp((const void *)(v2 + v3 - v8), *(const void **)(v7 + 32), v8) )\n      break;\n    ++v5;\n    if ( (__int64 *)v6 == v5 )\n      return 0LL;\n  }\n  return v7 + 32;\n}\n", 
            "funcStartAddr": "0x35fb0L", 
            "funcEndAddr": "0x36043L", 
            "funcName": "array_match_value_suffix"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall array_match_value_suffix_nc(__int64 **a1, __int64 *a2)\n{\n  __int64 v2; // r12\n  unsigned int v3; // ebx\n  int v4; // eax\n  __int64 *v5; // r14\n  signed __int64 v6; // rbp\n  __int64 v7; // r15\n  __int64 v8; // rdx\n\n  v2 = *a2;\n  v3 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  v4 = *((_DWORD *)a1 + 4);\n  if ( !v4 )\n    return 0LL;\n  v5 = *a1;\n  v6 = (signed __int64)&(*a1)[(unsigned int)(v4 - 1) + 1];\n  while ( 1 )\n  {\n    v7 = *v5;\n    v8 = *(_DWORD *)(*v5 + 40) - (unsigned int)(*(_DWORD *)(*v5 + 40) != 0);\n    if ( v3 >= (unsigned int)v8 )\n    {\n      if ( (unsigned int)buffer_eq_icase_ssn(v2 + v3 - v8, *(_QWORD *)(v7 + 32), v8) )\n        break;\n    }\n    ++v5;\n    if ( (__int64 *)v6 == v5 )\n      return 0LL;\n  }\n  return v7 + 32;\n}\n", 
            "funcStartAddr": "0x36050L", 
            "funcEndAddr": "0x360e3L", 
            "funcName": "array_match_value_suffix_nc"
        }, 
        {
            "decompiledFuncCode": "const void **__fastcall array_match_path_or_ext(__int64 a1, char **a2)\n{\n  unsigned int v2; // ebx\n  int v3; // eax\n  const void ***v4; // r14\n  signed __int64 v5; // rbp\n  const void **v6; // r15\n  size_t v7; // rdx\n  char *v8; // rdi\n\n  v2 = *((_DWORD *)a2 + 2) - (*((_DWORD *)a2 + 2) != 0);\n  v3 = *(_DWORD *)(a1 + 16);\n  if ( !v3 )\n    return 0LL;\n  v4 = *(const void ****)a1;\n  v5 = *(_QWORD *)a1 + 8LL * (unsigned int)(v3 - 1) + 8;\n  while ( 1 )\n  {\n    v6 = *v4;\n    v7 = *((_DWORD *)*v4 + 2) - (unsigned int)(*((_DWORD *)*v4 + 2) != 0);\n    if ( v2 >= (unsigned int)v7 )\n    {\n      v8 = *a2;\n      if ( *(_BYTE *)*v6 != 47 )\n        v8 += v2 - v7;\n      if ( !memcmp(v8, *v6, v7) )\n        break;\n    }\n    ++v4;\n    if ( (const void ***)v5 == v4 )\n      return 0LL;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x360f0L", 
            "funcEndAddr": "0x36178L", 
            "funcName": "array_match_path_or_ext"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_36180(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 result; // rax\n  unsigned int v4; // er9\n  __int64 v5; // rcx\n  int *v6; // rcx\n  int v7; // ebx\n\n  result = 0LL;\n  v4 = 0;\n  do\n  {\n    v5 = v4++;\n    v6 = (int *)(a2 + 4 * v5);\n    *(_BYTE *)(a1 + (unsigned int)result) = *v6;\n    v7 = *v6;\n    *(_BYTE *)(a1 + result + 1) = BYTE1(v7);\n    *(_BYTE *)(a1 + result + 2) = (unsigned int)*v6 >> 16;\n    *(_BYTE *)(a1 + result + 3) = (unsigned int)*v6 >> 24;\n    result += 4LL;\n  }\n  while ( a3 > (unsigned int)result );\n  return result;\n}\n", 
            "funcStartAddr": "0x36180L", 
            "funcEndAddr": "0x361caL", 
            "funcName": "sub_36180"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_361D0(int *a1, __int64 a2)\n{\n  int v2; // er9\n  int v3; // er10\n  int v4; // er11\n  char *v5; // r8\n  int v6; // eax\n  int v7; // edx\n  int v8; // eax\n  int v9; // edx\n  int v10; // ecx\n  int v11; // esi\n  int v12; // eax\n  int v13; // edx\n  int v14; // ecx\n  int v15; // esi\n  int v16; // eax\n  int v17; // edx\n  int v18; // ecx\n  int v19; // esi\n  int v20; // eax\n  int v21; // edx\n  int v22; // ecx\n  int v23; // esi\n  int v24; // eax\n  int v25; // edx\n  int v26; // ecx\n  int v27; // esi\n  int v28; // eax\n  int v29; // edx\n  int v30; // ecx\n  int v31; // esi\n  int v32; // eax\n  int v33; // edx\n  int v34; // ecx\n  int v35; // er8\n  int v36; // eax\n  int v37; // edx\n  int v38; // esi\n  int v39; // er8\n  int v40; // eax\n  int v41; // edx\n  int v42; // esi\n  int v43; // ecx\n  int v44; // eax\n  int v45; // er8\n  int v46; // edx\n  int v47; // ecx\n  int v48; // esi\n  int v49; // eax\n  int v50; // er8\n  int v51; // ecx\n  int v52; // edx\n  int v53; // esi\n  int v54; // er8\n  int v55; // eax\n  int v56; // edx\n  int v57; // ecx\n  int v58; // esi\n  int v59; // eax\n  int v60; // edx\n  int v61; // ecx\n  int v62; // esi\n  int v63; // eax\n  int v64; // edx\n  int v65; // ecx\n  int v66; // esi\n  int v67; // er8\n  int v68; // eax\n  int v69; // edx\n  int v70; // ecx\n  int v71; // er8\n  int v72; // ecx\n  int v73; // er9\n  unsigned __int64 result; // rax\n  int v75; // [rsp+8h] [rbp-90h]\n  int v76; // [rsp+10h] [rbp-88h]\n  int v77; // [rsp+14h] [rbp-84h]\n  int v78; // [rsp+18h] [rbp-80h]\n  int v79; // [rsp+1Ch] [rbp-7Ch]\n  int v80; // [rsp+20h] [rbp-78h]\n  int v81; // [rsp+24h] [rbp-74h]\n  int v82; // [rsp+28h] [rbp-70h]\n  int v83; // [rsp+2Ch] [rbp-6Ch]\n  int v84; // [rsp+30h] [rbp-68h]\n  int v85; // [rsp+34h] [rbp-64h]\n  int v86; // [rsp+38h] [rbp-60h]\n  int v87; // [rsp+3Ch] [rbp-5Ch]\n  int v88; // [rsp+40h] [rbp-58h]\n  int v89; // [rsp+44h] [rbp-54h]\n  int v90; // [rsp+48h] [rbp-50h]\n  int v91; // [rsp+4Ch] [rbp-4Ch]\n  char v92; // [rsp+50h] [rbp-48h]\n  unsigned __int64 v93; // [rsp+58h] [rbp-40h]\n\n  v2 = a1[1];\n  v3 = a1[2];\n  v93 = __readfsqword(0x28u);\n  v4 = a1[3];\n  v5 = (char *)&v76;\n  v75 = *a1;\n  do\n  {\n    v6 = *(unsigned __int8 *)(a2 + 1);\n    v7 = *(unsigned __int8 *)(a2 + 2);\n    v5 += 4;\n    a2 += 4LL;\n    *((_DWORD *)v5 - 1) = (*(unsigned __int8 *)(a2 - 1) << 24) | *(unsigned __int8 *)(a2 - 4) | (v7 << 16) | (v6 << 8);\n  }\n  while ( &v92 != v5 );\n  v8 = v2 + __ROL4__(v76 + v75 - 680876936 + (v4 ^ v2 & (v4 ^ v3)), 7);\n  v9 = v8 + __ROL4__(v77 + v4 - 389564586 + (v3 ^ v8 & (v3 ^ v2)), 12);\n  v10 = v9 + __ROR4__(v78 + v3 + 606105819 + (v2 ^ v9 & (v8 ^ v2)), 15);\n  v11 = v10\n      + __ROR4__(\n          v79 + v2 - 1044525330 + (v8 ^ v10 & (v9 ^ (v2 + __ROL4__(v76 + v75 - 680876936 + (v4 ^ v2 & (v4 ^ v3)), 7)))),\n          10);\n  v12 = v11\n      + __ROL4__(\n          v80 + v8 - 176418897 + (v9 ^ v11 & (v10 ^ (v8 + __ROL4__(v77 + v4 - 389564586 + (v3 ^ v8 & (v3 ^ v2)), 12)))),\n          7);\n  v13 = v12 + __ROL4__(v81 + v9 + 1200080426 + (v10 ^ v12 & (v11 ^ v10)), 12);\n  v14 = v13 + __ROR4__(v82 + v10 - 1473231341 + (v11 ^ v13 & (v12 ^ v11)), 15);\n  v15 = v14 + __ROR4__(v83 + v11 - 45705983 + (v12 ^ v14 & (v13 ^ v12)), 10);\n  v16 = v15 + __ROL4__(v84 + v12 + 1770035416 + (v13 ^ v15 & (v14 ^ v13)), 7);\n  v17 = v16 + __ROL4__(v85 + v13 - 1958414417 + (v14 ^ v16 & (v15 ^ v14)), 12);\n  v18 = v17 + __ROR4__(v86 + v14 - 42063 + (v15 ^ v17 & (v16 ^ v15)), 15);\n  v19 = v18 + __ROR4__(v87 + v15 - 1990404162 + (v16 ^ v18 & (v17 ^ v16)), 10);\n  v20 = v19 + __ROL4__(v88 + v16 + 1804603682 + (v17 ^ v19 & (v18 ^ v17)), 7);\n  v21 = v20 + __ROL4__(v89 + v17 - 40341101 + (v18 ^ v20 & (v19 ^ v18)), 12);\n  v22 = v21 + __ROR4__(v90 + v18 - 1502002290 + (v19 ^ v21 & (v20 ^ v19)), 15);\n  v23 = v22 + __ROR4__(v91 + v19 + 1236535329 + (v20 ^ v22 & (v21 ^ v20)), 10);\n  v24 = v23 + __ROL4__(v77 + v20 - 165796510 + (v22 ^ v21 & (v23 ^ v22)), 5);\n  v25 = v24 + __ROL4__(v82 + v21 - 1069501632 + (v23 ^ v22 & (v24 ^ v23)), 9);\n  v26 = v25 + __ROL4__(v87 + v22 + 643717713 + (v24 ^ v23 & (v25 ^ v24)), 14);\n  v27 = v26 + __ROR4__(v76 + v23 - 373897302 + (v25 ^ v24 & (v26 ^ v25)), 12);\n  v28 = v27 + __ROL4__(v81 + v24 - 701558691 + (v26 ^ v25 & (v27 ^ v26)), 5);\n  v29 = v28 + __ROL4__(v86 + v25 + 38016083 + (v27 ^ v26 & (v28 ^ v27)), 9);\n  v30 = v29 + __ROL4__(v91 + v26 - 660478335 + (v28 ^ v27 & (v29 ^ v28)), 14);\n  v31 = v30 + __ROR4__(v80 + v27 - 405537848 + (v29 ^ v28 & (v30 ^ v29)), 12);\n  v32 = v31 + __ROL4__(v85 + v28 + 568446438 + (v30 ^ v29 & (v31 ^ v30)), 5);\n  v33 = v32 + __ROL4__(v90 + v29 - 1019803690 + (v31 ^ v30 & (v32 ^ v31)), 9);\n  v34 = v33 + __ROL4__(v79 + v30 - 187363961 + (v32 ^ v31 & (v33 ^ v32)), 14);\n  v35 = v34 + __ROR4__(v84 + v31 + 1163531501 + (v33 ^ v32 & (v34 ^ v33)), 12);\n  v36 = v35 + __ROL4__(v89 + v32 - 1444681467 + (v34 ^ v33 & (v35 ^ v34)), 5);\n  v37 = v36 + __ROL4__(v78 + v33 - 51403784 + (v35 ^ v34 & (v36 ^ v35)), 9);\n  v38 = v37 + __ROL4__(v83 + v34 + 1735328473 + (v36 ^ v35 & (v37 ^ v36)), 14);\n  v39 = v38 + __ROR4__(v88 + v35 - 1926607734 + (v37 ^ v36 & (v38 ^ v37)), 12);\n  v40 = v39 + __ROL4__((v39 ^ v38 ^ v37) + v81 + v36 - 378558, 4);\n  v41 = v40 + __ROL4__(v84 + v37 - 2022574463 + (v40 ^ v39 ^ v38), 11);\n  v42 = v41 + __ROL4__(v87 + v38 + 1839030562 + (v41 ^ v40 ^ v39), 16);\n  v43 = v42 + __ROR4__(v90 + v39 - 35309556 + (v42 ^ v41 ^ v40), 9);\n  v44 = v43 + __ROL4__(v77 + v40 - 1530992060 + (v43 ^ v42 ^ v41), 4);\n  v45 = v44 + __ROL4__(v80 + v41 + 1272893353 + (v44 ^ v43 ^ v42), 11);\n  v46 = v45 + __ROL4__(v83 + v42 - 155497632 + (v45 ^ v44 ^ v43), 16);\n  v47 = v46 + __ROR4__(v86 + v43 - 1094730640 + (v46 ^ v45 ^ v44), 9);\n  v48 = v47 + __ROL4__(v89 + v44 + 681279174 + (v47 ^ v46 ^ v45), 4);\n  v49 = v48 + __ROL4__(v76 + v45 - 358537222 + (v48 ^ v47 ^ v46), 11);\n  v50 = v49 + __ROL4__(v79 + v46 - 722521979 + (v49 ^ v48 ^ v47), 16);\n  v51 = v50 + __ROR4__(v82 + v47 + 76029189 + (v50 ^ v49 ^ v48), 9);\n  v52 = v51 + __ROL4__(v85 + v48 - 640364487 + (v51 ^ v50 ^ v49), 4);\n  v53 = v52 + __ROL4__(v88 + v49 - 421815835 + (v52 ^ v51 ^ v50), 11);\n  v54 = v53 + __ROL4__(v91 + v50 + 530742520 + (v53 ^ v52 ^ v51), 16);\n  v55 = v54 + __ROR4__(v78 + v51 - 995338651 + (v54 ^ v53 ^ v52), 9);\n  v56 = v55 + __ROL4__(v76 + v52 - 198630844 + (v54 ^ (v55 | ~v53)), 6);\n  v57 = v56 + __ROL4__(v83 + v53 + 1126891415 + (v55 ^ (v56 | ~v54)), 10);\n  v58 = v57 + __ROL4__(v90 + v54 - 1416354905 + (v56 ^ (v57 | ~v55)), 15);\n  v59 = v58 + __ROR4__(v81 + v55 - 57434055 + (v57 ^ (v58 | ~v56)), 11);\n  v60 = v59 + __ROL4__(v88 + v56 + 1700485571 + (v58 ^ (v59 | ~v57)), 6);\n  v61 = v60 + __ROL4__(v79 + v57 - 1894986606 + (v59 ^ (v60 | ~v58)), 10);\n  v62 = v61 + __ROL4__(v86 + v58 - 1051523 + (v60 ^ (v61 | ~v59)), 15);\n  v63 = v62 + __ROR4__(v77 + v59 - 2054922799 + (v61 ^ (v62 | ~v60)), 11);\n  v64 = v63 + __ROL4__(v84 + v60 + 1873313359 + (v62 ^ (v63 | ~v61)), 6);\n  v65 = v64 + __ROL4__(v91 + v61 - 30611744 + (v63 ^ (v64 | ~v62)), 10);\n  v66 = v65 + __ROL4__(v82 + v62 - 1560198380 + (v64 ^ (v65 | ~v63)), 15);\n  v67 = v66 + __ROR4__(v89 + v63 + 1309151649 + (v65 ^ (v66 | ~v64)), 11);\n  v68 = v67 + __ROL4__(v80 + v64 - 145523070 + (v66 ^ (v67 | ~v65)), 6);\n  v69 = v68 + __ROL4__(v87 + v65 - 1120210379 + (v67 ^ (v68 | ~v66)), 10);\n  v70 = v67;\n  v71 = v85 + v67 - 343485551;\n  v72 = v69 + __ROL4__(v78 + v66 + 718787259 + (v68 ^ (v69 | ~v70)), 15);\n  *a1 = v75 + v68;\n  v73 = __ROR4__(v71 + (v69 ^ (v72 | ~v68)), 11) + v72 + v2;\n  result = __readfsqword(0x28u) ^ v93;\n  a1[1] = v73;\n  a1[2] = v72 + v3;\n  a1[3] = v69 + v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x361d0L", 
            "funcEndAddr": "0x36969L", 
            "funcName": "sub_361D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall MD5_Init(_QWORD *a1)\n{\n  signed __int64 result; // rax\n\n  a1[2] = 0LL;\n  *a1 = -1167088121787636991LL;\n  result = 1167088121787636990LL;\n  a1[1] = 1167088121787636990LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x36970L", 
            "funcEndAddr": "0x36994L", 
            "funcName": "MD5_Init"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall MD5_Update(int *a1, char *a2, unsigned int a3)\n{\n  char *v3; // r15\n  unsigned int v4; // ebp\n  int v5; // ecx\n  int v6; // eax\n  unsigned int v7; // edx\n  unsigned __int8 v8; // cf\n  int v9; // eax\n  int v10; // ecx\n  unsigned int v11; // ebx\n  _QWORD *v12; // r13\n  int *v14; // r14\n  __int64 v15; // r12\n  unsigned int v16; // ST0C_4\n  unsigned int v17; // eax\n  unsigned __int64 v18; // rax\n  char *v19; // r13\n  char *v20; // rdi\n  unsigned int v21; // er13\n  unsigned int v22; // er13\n  unsigned int v23; // ecx\n  __int64 v24; // rsi\n\n  v3 = a2;\n  v4 = a3;\n  v5 = 8 * a3;\n  v6 = a1[4];\n  v7 = ((unsigned int)a1[4] >> 3) & 0x3F;\n  v8 = __CFADD__(v5, v6);\n  v9 = v5 + v6;\n  v10 = a1[5];\n  a1[4] = v9;\n  v11 = 64 - v7;\n  a1[5] = v10 - ((v8 < 1u) - 1) + (v4 >> 29);\n  v12 = (_QWORD *)((char *)a1 + v7 + 24);\n  if ( v4 >= 64 - v7 )\n  {\n    v14 = a1;\n    v15 = v11;\n    if ( v11 >= 8 )\n    {\n      *v12 = *(_QWORD *)a2;\n      *(_QWORD *)((char *)v12 + v11 - 8) = *(_QWORD *)&a2[v11 - 8];\n      v18 = ((unsigned __int64)a1 + v7 + 32) & 0xFFFFFFFFFFFFFFF8LL;\n      v19 = (char *)v12 - v18;\n      v20 = (char *)(a2 - v19);\n      v21 = (v11 + (_DWORD)v19) & 0xFFFFFFF8;\n      if ( v21 >= 8 )\n      {\n        v22 = v21 & 0xFFFFFFF8;\n        v23 = 0;\n        do\n        {\n          v24 = v23;\n          v23 += 8;\n          *(_QWORD *)(v18 + v24) = *(_QWORD *)&v20[v24];\n        }\n        while ( v23 < v22 );\n      }\n    }\n    else if ( v11 & 4 )\n    {\n      *(_DWORD *)v12 = *(_DWORD *)a2;\n      *(_DWORD *)((char *)v12 + v11 - 4) = *(_DWORD *)&a2[v11 - 4];\n    }\n    else if ( 64 != v7 )\n    {\n      *(_BYTE *)v12 = *a2;\n      if ( v11 & 2 )\n        *(_WORD *)((char *)v12 + v11 - 2) = *(_WORD *)&a2[v11 - 2];\n    }\n    v12 = v14 + 6;\n    v16 = v7;\n    sub_361D0(v14, (__int64)(v14 + 6));\n    if ( v4 > 127 - v16 )\n    {\n      while ( 1 )\n      {\n        sub_361D0(v14, (__int64)&v3[v15]);\n        v17 = v11 + 127;\n        v11 += 64;\n        if ( v17 >= v4 )\n          break;\n        v15 = v11;\n      }\n      v4 -= v11;\n      v3 += v11;\n    }\n    else\n    {\n      v3 += v11;\n      v4 -= v11;\n    }\n  }\n  return memcpy(v12, v3, v4);\n}\n", 
            "funcStartAddr": "0x369a0L", 
            "funcEndAddr": "0x36b09L", 
            "funcName": "MD5_Update"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall MD5_Final(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // eax\n  unsigned int v3; // edx\n  __int64 _0; // [rsp+0h] [rbp+0h]\n  unsigned __int64 vars8; // [rsp+8h] [rbp+8h]\n\n  vars8 = __readfsqword(0x28u);\n  sub_36180((__int64)&_0, a2 + 16, 8u);\n  v2 = (*(_DWORD *)(a2 + 16) >> 3) & 0x3F;\n  if ( v2 <= 0x37 )\n    v3 = 56 - v2;\n  else\n    v3 = 120 - v2;\n  MD5_Update((int *)a2, (char *)&off_2580E0, v3);\n  MD5_Update((int *)a2, (char *)&_0, 8u);\n  sub_36180(a1, a2, 0x10u);\n  *(_QWORD *)a2 = 0LL;\n  *(_QWORD *)(a2 + 80) = 0LL;\n  memset(\n    (void *)((a2 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)a2 - (((_DWORD)a2 + 8) & 0xFFFFFFF8) + 88) >> 3));\n  return __readfsqword(0x28u) ^ vars8;\n}\n", 
            "funcStartAddr": "0x36b10L", 
            "funcEndAddr": "0x36bd6L", 
            "funcName": "MD5_Final"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_36BE0(_DWORD *a1, unsigned int *a2)\n{\n  unsigned __int32 v2; // ST0C_4\n  unsigned __int32 v3; // ST18_4\n  unsigned __int32 v4; // er8\n  unsigned __int32 v5; // ST20_4\n  unsigned __int32 v6; // ST1C_4\n  unsigned __int32 v7; // ST10_4\n  unsigned __int32 v8; // ST14_4\n  unsigned __int32 v9; // ecx\n  unsigned __int32 v10; // edx\n  unsigned __int32 v11; // eax\n  unsigned __int32 v12; // er14\n  unsigned __int32 v13; // er12\n  unsigned __int32 v14; // er15\n  unsigned __int32 v15; // ST04_4\n  unsigned __int32 v16; // ST08_4\n  _DWORD *v17; // ST50_8\n  unsigned __int32 v18; // ST24_4\n  int v19; // ST48_4\n  int v20; // ST3C_4\n  int v21; // ST4C_4\n  int v22; // ST44_4\n  int v23; // ST40_4\n  int v24; // esi\n  int v25; // ebp\n  int v26; // ebx\n  int v27; // ebx\n  int v28; // er11\n  int v29; // er11\n  int v30; // er10\n  int v31; // er10\n  int v32; // er9\n  int v33; // er9\n  int v34; // edi\n  int v35; // edi\n  int v36; // esi\n  int v37; // esi\n  int v38; // ebx\n  int v39; // ebx\n  int v40; // er11\n  int v41; // er11\n  int v42; // er10\n  int v43; // er10\n  int v44; // er9\n  int v45; // er9\n  int v46; // edi\n  int v47; // edi\n  int v48; // esi\n  int v49; // ebx\n  int v50; // er8\n  int v51; // ebx\n  int v52; // er11\n  int v53; // er11\n  int v54; // er10\n  int v55; // er10\n  int v56; // edi\n  int v57; // ST18_4\n  int v58; // er9\n  int v59; // er9\n  int v60; // ecx\n  int v61; // edi\n  int v62; // edi\n  int v63; // edx\n  int v64; // eax\n  int v65; // esi\n  int v66; // esi\n  int v67; // ebx\n  int v68; // ebx\n  int v69; // ebp\n  int v70; // ST20_4\n  int v71; // ebp\n  int v72; // er10\n  int v73; // er14\n  int v74; // er14\n  int v75; // er9\n  int v76; // er13\n  int v77; // er13\n  int v78; // edi\n  int v79; // er12\n  int v80; // edi\n  int v81; // er12\n  int v82; // esi\n  int v83; // er15\n  int v84; // er15\n  int v85; // ST1C_4\n  int v86; // ebx\n  int v87; // ST0C_4\n  int v88; // ebp\n  int v89; // er14\n  int v90; // ebp\n  int v91; // ST10_4\n  int v92; // er13\n  int v93; // ST14_4\n  int v94; // ebp\n  int v95; // er12\n  int v96; // ST04_4\n  int v97; // ebp\n  int v98; // ebp\n  int v99; // ST24_4\n  int v100; // er15\n  int v101; // ebx\n  int v102; // er15\n  int v103; // er8\n  int v104; // er8\n  int v105; // ST08_4\n  int v106; // er13\n  int v107; // er13\n  int v108; // er14\n  int v109; // ecx\n  int v110; // ecx\n  int v111; // er12\n  int v112; // edx\n  int v113; // edx\n  int v114; // ebp\n  int v115; // eax\n  int v116; // eax\n  int v117; // er10\n  int v118; // ST18_4\n  int v119; // er11\n  int v120; // er8\n  int v121; // ST20_4\n  int v122; // er10\n  int v123; // er10\n  int v124; // er13\n  int v125; // ST24_4\n  int v126; // ebx\n  int v127; // ecx\n  int v128; // ecx\n  int v129; // ST1C_4\n  int v130; // er9\n  int v131; // edi\n  int v132; // er11\n  int v133; // edi\n  int v134; // edx\n  int v135; // er9\n  int v136; // esi\n  int v137; // ST0C_4\n  int v138; // edx\n  int v139; // esi\n  int v140; // er9\n  int v141; // edx\n  int v142; // ST10_4\n  int v143; // esi\n  int v144; // eax\n  int v145; // ebx\n  int v146; // eax\n  int v147; // esi\n  int v148; // er8\n  int v149; // ST14_4\n  int v150; // er8\n  int v151; // ecx\n  int v152; // ST28_4\n  int v153; // er9\n  int v154; // esi\n  int v155; // er10\n  int v156; // ecx\n  int v157; // er11\n  int v158; // ST2C_4\n  int v159; // er9\n  int v160; // er13\n  int v161; // er8\n  int v162; // edi\n  int v163; // er13\n  int v164; // esi\n  int v165; // edi\n  int v166; // ST34_4\n  int v167; // ST30_4\n  int v168; // esi\n  int v169; // edx\n  int v170; // er11\n  int v171; // eax\n  int v172; // er10\n  int v173; // eax\n  int v174; // er9\n  int v175; // edx\n  int v176; // ST04_4\n  int v177; // er9\n  int v178; // ecx\n  int v179; // edx\n  int v180; // ebx\n  int v181; // eax\n  int v182; // ebx\n  int v183; // edx\n  int v184; // ST18_4\n  int v185; // ebx\n  int v186; // er8\n  int v187; // er12\n  int v188; // er13\n  int v189; // er8\n  int v190; // ST38_4\n  int v191; // er12\n  int v192; // eax\n  int v193; // er14\n  int v194; // er8\n  int v195; // eax\n  int v196; // er15\n  int v197; // edi\n  int v198; // er11\n  int v199; // esi\n  int v200; // edx\n  int v201; // ecx\n  int v202; // edi\n  int v203; // ST1C_4\n  int v204; // er13\n  int v205; // edx\n  int v206; // esi\n  int v207; // er12\n  int v208; // ST20_4\n  int v209; // er12\n  int v210; // eax\n  int v211; // esi\n  int v212; // ST24_4\n  int v213; // eax\n  int v214; // ST08_4\n  int v215; // esi\n  int v216; // er8\n  int v217; // er8\n  int v218; // esi\n  int v219; // edx\n  int v220; // ST0C_4\n  int v221; // edx\n  int v222; // esi\n  int v223; // ST10_4\n  int v224; // esi\n  int v225; // ebx\n  int v226; // ST14_4\n  int v227; // ebx\n  int v228; // edi\n  int v229; // er11\n  int v230; // er13\n  int v231; // ST18_4\n  int v232; // edi\n  int v233; // eax\n  int v234; // edi\n  int v235; // ST28_4\n  int v236; // eax\n  int v237; // er13\n  int v238; // er12\n  int v239; // er12\n  int v240; // edx\n  int v241; // ebp\n  int v242; // er12\n  int v243; // ST04_4\n  int v244; // er8\n  int v245; // ebp\n  int v246; // er9\n  int v247; // er11\n  int v248; // er11\n  int v249; // er10\n  int v250; // er10\n  int v251; // ebx\n  int v252; // edi\n  int v253; // ebx\n  int v254; // esi\n  int v255; // er15\n  int v256; // er15\n  int v257; // ecx\n  int v258; // er14\n  int v259; // er13\n  int v260; // edx\n  int v261; // er13\n  int v262; // er12\n  int v263; // er11\n  int v264; // er12\n  int v265; // er10\n  int v266; // ebp\n  int v267; // ebp\n  int v268; // er9\n  int v269; // ebx\n  int v270; // ebx\n  int v271; // er11\n  int v272; // er8\n  int v273; // er14\n  int v274; // er10\n  int v275; // edi\n  int v276; // er13\n  int v277; // edi\n  int v278; // esi\n  int v279; // esi\n  int v280; // er10\n  int v281; // edi\n  int v282; // ecx\n  _DWORD *result; // rax\n  int v284; // ecx\n\n  v2 = _byteswap_ulong(a2[11]);\n  v3 = _byteswap_ulong(a2[1]);\n  v4 = _byteswap_ulong(*a2);\n  v5 = _byteswap_ulong(a2[5]);\n  v6 = _byteswap_ulong(a2[7]);\n  v7 = _byteswap_ulong(a2[12]);\n  v8 = _byteswap_ulong(a2[13]);\n  v9 = _byteswap_ulong(a2[2]);\n  v10 = _byteswap_ulong(a2[3]);\n  v11 = _byteswap_ulong(a2[4]);\n  v12 = _byteswap_ulong(a2[6]);\n  v13 = _byteswap_ulong(a2[8]);\n  v14 = _byteswap_ulong(a2[9]);\n  v15 = _byteswap_ulong(a2[14]);\n  v16 = _byteswap_ulong(a2[15]);\n  v17 = a1;\n  v18 = _byteswap_ulong(a2[10]);\n  v19 = a1[2];\n  v20 = a1[4];\n  v21 = a1[3];\n  v22 = a1[1];\n  v23 = *a1;\n  v24 = v4 + v20 + __ROL4__(*a1, 5) + 1518500249 + (v21 ^ v22 & (v21 ^ v19));\n  v25 = __ROL4__(v24, 5) + v3 + v21 + (v19 ^ *a1 & (__ROR4__(v22, 2) ^ v19)) + 1518500249;\n  v26 = v24 & (__ROR4__(*a1, 2) ^ __ROR4__(v22, 2));\n  v24 = __ROR4__(v24, 2);\n  v27 = __ROL4__(v25, 5) + v9 + v19 + 1518500249 + (__ROR4__(v22, 2) ^ v26);\n  v28 = v25 & (v24 ^ __ROR4__(*a1, 2));\n  v25 = __ROR4__(v25, 2);\n  v29 = __ROL4__(v27, 5) + v10 + __ROR4__(v22, 2) + 1518500249 + (__ROR4__(*a1, 2) ^ v28);\n  v30 = v11 + __ROR4__(*a1, 2) + 1518500249 + (v24 ^ v27 & (v25 ^ v24));\n  v27 = __ROR4__(v27, 2);\n  v31 = __ROL4__(v29, 5) + v30;\n  v32 = v29 & (v27 ^ v25);\n  v29 = __ROR4__(v29, 2);\n  v33 = __ROL4__(v31, 5) + v5 + v24 + 1518500249 + (v25 ^ v32);\n  v34 = v31 & (v29 ^ v27);\n  v31 = __ROR4__(v31, 2);\n  v35 = __ROL4__(v33, 5) + v12 + v25 + 1518500249 + (v27 ^ v34);\n  v36 = v33 & (v31 ^ v29);\n  v33 = __ROR4__(v33, 2);\n  v37 = __ROL4__(v35, 5) + v6 + v27 + 1518500249 + (v29 ^ v36);\n  v38 = v35 & (v33 ^ v31);\n  v35 = __ROR4__(v35, 2);\n  v39 = __ROL4__(v37, 5) + v13 + v29 + 1518500249 + (v31 ^ v38);\n  v40 = v37 & (v35 ^ v33);\n  v37 = __ROR4__(v37, 2);\n  v41 = __ROL4__(v39, 5) + v14 + v31 + 1518500249 + (v33 ^ v40);\n  v42 = v39 & (v37 ^ v35);\n  v39 = __ROR4__(v39, 2);\n  v43 = __ROL4__(v41, 5) + v18 + v33 + 1518500249 + (v35 ^ v42);\n  v44 = v41 & (v39 ^ v37);\n  v41 = __ROR4__(v41, 2);\n  v45 = __ROL4__(v43, 5) + v2 + v35 + 1518500249 + (v37 ^ v44);\n  v46 = v43 & (v41 ^ v39);\n  v43 = __ROR4__(v43, 2);\n  v47 = __ROL4__(v45, 5) + v7 + v37 + 1518500249 + (v39 ^ v46);\n  v48 = __ROL4__(v47, 5) + v8 + v39 + 1518500249 + (v41 ^ v45 & (v43 ^ v41));\n  v45 = __ROR4__(v45, 2);\n  v49 = v47 & (v45 ^ v43);\n  v47 = __ROR4__(v47, 2);\n  v50 = __ROL4__(v8 ^ v13 ^ v9 ^ v4, 1);\n  v51 = __ROL4__(v48, 5) + v15 + v41 + 1518500249 + (v43 ^ v49);\n  v52 = v48 & (v47 ^ v45);\n  v48 = __ROR4__(v48, 2);\n  v53 = __ROL4__(v51, 5) + v16 + v43 + 1518500249 + (v45 ^ v52);\n  v54 = v51 & (v48 ^ v47);\n  v51 = __ROR4__(v51, 2);\n  v55 = __ROL4__(v53, 5) + v50 + v45 + 1518500249 + (v47 ^ v54);\n  v56 = __ROL4__(v15 ^ v14 ^ v10 ^ v3, 1) + v47 + 1518500249;\n  v57 = __ROL4__(v15 ^ v14 ^ v10 ^ v3, 1);\n  v58 = v56 + (v48 ^ v53 & (v51 ^ v48));\n  v53 = __ROR4__(v53, 2);\n  v59 = __ROL4__(v55, 5) + v58;\n  v60 = __ROL4__(v16 ^ v18 ^ v11 ^ v9, 1);\n  v61 = v55 & (v53 ^ v51);\n  v55 = __ROR4__(v55, 2);\n  v62 = __ROL4__(v59, 5) + v60 + v48 + 1518500249 + (v51 ^ v61);\n  v63 = __ROL4__(v50 ^ v2 ^ v5 ^ v10, 1);\n  v64 = __ROL4__(v57 ^ v7 ^ v12 ^ v11, 1);\n  v65 = v59 & (v55 ^ v53);\n  v59 = __ROR4__(v59, 2);\n  v66 = __ROL4__(v62, 5) + v63 + v51 + 1518500249 + (v53 ^ v65);\n  v67 = v62 ^ v59 ^ v55;\n  v62 = __ROR4__(v62, 2);\n  v68 = __ROL4__(v66, 5) + v64 + v53 + 1859775393 + v67;\n  v69 = v66 ^ v62 ^ v59;\n  v66 = __ROR4__(v66, 2);\n  v70 = __ROL4__(v60 ^ v8 ^ v6 ^ v5, 1);\n  v71 = __ROL4__(v68, 5) + v70 + v55 + 1859775393 + v69;\n  v72 = __ROL4__(v63 ^ v13 ^ v12 ^ v15, 1);\n  v73 = v68 ^ v66 ^ v62;\n  v68 = __ROR4__(v68, 2);\n  v74 = __ROL4__(v71, 5) + v72 + v59 + 1859775393 + v73;\n  v75 = __ROL4__(v64 ^ v16 ^ v14 ^ v6, 1);\n  v76 = v75 + v62 + 1859775393 + (v71 ^ v68 ^ v66);\n  v71 = __ROR4__(v71, 2);\n  v77 = __ROL4__(v74, 5) + v76;\n  v78 = v18 ^ v13;\n  v79 = v74 ^ v71 ^ v68;\n  v74 = __ROR4__(v74, 2);\n  v80 = __ROL4__(v70 ^ v50 ^ v78, 1);\n  v81 = __ROL4__(v77, 5) + v80 + v66 + 1859775393 + v79;\n  v82 = __ROL4__(v72 ^ v2 ^ v14 ^ v57, 1);\n  v83 = v77 ^ v74 ^ v71;\n  v77 = __ROR4__(v77, 2);\n  v84 = __ROL4__(v81, 5) + v82 + v68 + 1859775393 + v83;\n  v85 = __ROL4__(v75 ^ v60 ^ v18 ^ v7, 1);\n  v86 = __ROL4__(v84, 5) + v85 + v71 + 1859775393 + (v81 ^ v77 ^ v74);\n  v81 = __ROR4__(v81, 2);\n  v87 = __ROL4__(v80 ^ v63 ^ v8 ^ v2, 1);\n  v88 = v84 ^ v81 ^ v77;\n  v84 = __ROR4__(v84, 2);\n  v89 = __ROL4__(v86, 5) + v88 + v87 + v74 + 1859775393;\n  v90 = v86 ^ v84 ^ v81;\n  v91 = __ROL4__(v82 ^ v64 ^ v15 ^ v7, 1);\n  v86 = __ROR4__(v86, 2);\n  v92 = __ROL4__(v89, 5) + v90 + v91 + v77 + 1859775393;\n  v93 = __ROL4__(v85 ^ v70 ^ v16 ^ v8, 1);\n  v94 = v89 ^ v86 ^ v84;\n  v89 = __ROR4__(v89, 2);\n  v95 = v93 + v81 + 1859775393 + v94 + __ROL4__(v92, 5);\n  v96 = __ROL4__(v87 ^ v72 ^ v50 ^ v15, 1);\n  v97 = v92 ^ v89 ^ v86;\n  v92 = __ROR4__(v92, 2);\n  v98 = __ROL4__(v95, 5) + v96 + v84 + 1859775393 + v97;\n  v99 = __ROL4__(v91 ^ v75 ^ v57 ^ v16, 1);\n  v100 = v95 ^ v92 ^ v89;\n  v95 = __ROR4__(v95, 2);\n  v101 = __ROL4__(v98, 5) + v100 + v99 + v86 + 1859775393;\n  v102 = __ROL4__(v93 ^ v80 ^ v60 ^ v50, 1);\n  v103 = v98 ^ v95 ^ v92;\n  v98 = __ROR4__(v98, 2);\n  v104 = __ROL4__(v101, 5) + v102 + v89 + 1859775393 + v103;\n  v105 = __ROL4__(v96 ^ v82 ^ v63 ^ v57, 1);\n  v106 = (v101 ^ v98 ^ v95) + v105 + v92 + 1859775393;\n  v101 = __ROR4__(v101, 2);\n  v107 = __ROL4__(v104, 5) + v106;\n  v108 = __ROL4__(v99 ^ v85 ^ v64 ^ v60, 1);\n  v109 = v104 ^ v101 ^ v98;\n  v104 = __ROR4__(v104, 2);\n  v110 = __ROL4__(v107, 5) + v108 + v95 + 1859775393 + v109;\n  v111 = __ROL4__(v102 ^ v87 ^ v70 ^ v63, 1);\n  v112 = v107 ^ v104 ^ v101;\n  v107 = __ROR4__(v107, 2);\n  v113 = __ROL4__(v110, 5) + v111 + v98 + 1859775393 + v112;\n  v114 = __ROL4__(v105 ^ v91 ^ v72 ^ v64, 1);\n  v115 = v110 ^ v107 ^ v104;\n  v110 = __ROR4__(v110, 2);\n  v116 = __ROL4__(v113, 5) + v114 + v101 + 1859775393 + v115;\n  v117 = v111 ^ v96 ^ v80 ^ v72;\n  v118 = __ROL4__(v108 ^ v93 ^ v75 ^ v70, 1);\n  v119 = v113 ^ v110 ^ v107;\n  v113 = __ROR4__(v113, 2);\n  v120 = __ROL4__(v116, 5) + v119 + v118 + v104 + 1859775393;\n  v121 = __ROL4__(v117, 1);\n  v122 = __ROL4__(v117, 1) + v107 + 1859775393 + (v116 ^ v113 ^ v110);\n  v116 = __ROR4__(v116, 2);\n  v123 = __ROL4__(v120, 5) + v122;\n  v124 = v99;\n  v125 = __ROL4__(v114 ^ v99 ^ v82 ^ v75, 1);\n  v126 = v85;\n  v127 = (v120 ^ v116 ^ v113) + v125 + v110 + 1859775393;\n  v120 = __ROR4__(v120, 2);\n  v128 = __ROL4__(v123, 5) + v127;\n  v129 = __ROL4__(v118 ^ v102 ^ v85 ^ v80, 1);\n  v130 = v120 | v123;\n  v131 = v123;\n  v123 = __ROR4__(v123, 2);\n  v132 = v87;\n  v133 = __ROL4__(v128, 5) + v129 + v113 - 1894007588 + (v116 & v130 | v120 & v131);\n  v134 = v123 & v128;\n  v135 = __ROL4__(v121 ^ v105 ^ v87 ^ v82, 1);\n  v136 = v128;\n  v128 = __ROR4__(v128, 2);\n  v137 = v135;\n  v138 = v120 & (v123 | v136) | v134;\n  v139 = v135 + v116 - 1894007588;\n  v140 = v91;\n  v141 = __ROL4__(v133, 5) + v139 + v138;\n  v142 = __ROL4__(v125 ^ v108 ^ v91 ^ v126, 1);\n  v143 = v128 | v133;\n  v144 = v133;\n  v133 = __ROR4__(v133, 2);\n  v145 = v93;\n  v146 = __ROL4__(v141, 5) + v142 + v120 - 1894007588 + (v123 & v143 | v128 & v144);\n  v147 = v133 & v141;\n  v148 = v141;\n  v141 = __ROR4__(v141, 2);\n  v149 = __ROL4__(v129 ^ v111 ^ v93 ^ v132, 1);\n  v150 = v149 + v123 - 1894007588 + (v128 & (v133 | v148) | v147) + __ROL4__(v146, 5);\n  v151 = __ROL4__(v137 ^ v114 ^ v96 ^ v140, 1) + v128 - 1894007588;\n  v152 = __ROL4__(v137 ^ v114 ^ v96 ^ v140, 1);\n  v153 = v141 | v146;\n  v154 = v146;\n  v146 = __ROR4__(v146, 2);\n  v155 = v124;\n  v156 = v151 + (v133 & v153 | v141 & v154) + __ROL4__(v150, 5);\n  v157 = v149 ^ v121 ^ v102 ^ v96;\n  v158 = __ROL4__(v142 ^ v124 ^ v145 ^ v118, 1);\n  v159 = __ROR4__(v150, 2);\n  v160 = v158 + v133 - 1894007588 + (v141 & (v146 | v150) | v146 & v150);\n  v161 = __ROL4__(v157, 1);\n  v162 = v159 & v156;\n  v163 = __ROL4__(v156, 5) + v160;\n  v164 = v156;\n  v156 = __ROR4__(v156, 2);\n  v165 = __ROL4__(v163, 5) + __ROL4__(v157, 1) + v141 - 1894007588 + (v146 & (v159 | v164) | v162);\n  v166 = __ROL4__(v157, 1);\n  v167 = __ROL4__(v152 ^ v125 ^ v105 ^ v155, 1);\n  v168 = __ROL4__(v165, 5) + v167 + v146 - 1894007588 + (v159 & (v156 | v163) | v156 & v163);\n  v163 = __ROR4__(v163, 2);\n  v169 = v156 & (v163 | v165);\n  v170 = __ROL4__(v158 ^ v108 ^ v102 ^ v129, 1);\n  v171 = v165;\n  v165 = __ROR4__(v165, 2);\n  v172 = __ROL4__(v167 ^ v114 ^ v108 ^ v142, 1);\n  v173 = __ROL4__(v168, 5) + v170 + v159 - 1894007588 + (v169 | v163 & v171);\n  v174 = v165 & v168;\n  v175 = v165 | v168;\n  v168 = __ROR4__(v168, 2);\n  v176 = __ROL4__(v161 ^ v137 ^ v111 ^ v105, 1);\n  v177 = __ROL4__(v173, 5) + v176 + v156 - 1894007588 + (v163 & v175 | v174);\n  v178 = __ROR4__(v173, 2);\n  v179 = v165 & (v168 | v173);\n  v180 = v168 & v173;\n  v181 = __ROR4__(v173, 2) & v177;\n  v182 = v172 + v163 - 1894007588 + (v179 | v180);\n  v183 = v118;\n  v184 = __ROL4__(v158 ^ v108 ^ v102 ^ v129, 1);\n  v185 = __ROL4__(v177, 5) + v182;\n  v186 = v183 ^ v111 ^ v149;\n  v187 = v177;\n  v177 = __ROR4__(v177, 2);\n  v188 = __ROL4__(v170 ^ v186, 1);\n  v189 = v177 & v185;\n  v190 = v188;\n  v191 = v188 + v165 - 1894007588 + (v168 & (v178 | v187) | v181) + __ROL4__(v185, 5);\n  v192 = v185;\n  v185 = __ROR4__(v185, 2);\n  v193 = __ROL4__(v176 ^ v121 ^ v114 ^ v152, 1);\n  v194 = __ROL4__(v191, 5) + v193 + v168 - 1894007588 + (v178 & (v177 | v192) | v189);\n  v195 = __ROR4__(v191, 2);\n  v196 = __ROL4__(v172 ^ v158 ^ v125 ^ v183, 1);\n  v197 = __ROR4__(v191, 2) & v194;\n  v198 = v129;\n  v199 = v196 + v178 - 1894007588 + (v177 & (v185 | v191) | v185 & v191) + __ROL4__(v194, 5);\n  v200 = v194;\n  v194 = __ROR4__(v194, 2);\n  v201 = __ROL4__(v188 ^ v166 ^ v129 ^ v121, 1);\n  v202 = __ROL4__(v199, 5) + v201 + v177 - 1894007588 + (v185 & (__ROR4__(v191, 2) | v200) | v197);\n  v203 = __ROL4__(v193 ^ v167 ^ v137 ^ v125, 1);\n  v204 = __ROL4__(v202, 5) + v203 + v185 - 1894007588 + (__ROR4__(v191, 2) & (v194 | v199) | v194 & v199);\n  v205 = __ROR4__(v199, 2);\n  v206 = __ROR4__(v199, 2) | v202;\n  v207 = v205 & v202;\n  v202 = __ROR4__(v202, 2);\n  v208 = __ROL4__(v196 ^ v184 ^ v142 ^ v198, 1);\n  v209 = __ROL4__(v204, 5) + v208 + v195 - 1894007588 + (v194 & v206 | v207);\n  v210 = v202 & v204;\n  v211 = v204;\n  v204 = __ROR4__(v204, 2);\n  v212 = __ROL4__(v201 ^ v176 ^ v149 ^ v137, 1);\n  v213 = __ROL4__(v209, 5) + v212 + v194 - 1894007588 + (v205 & (v202 | v211) | v210);\n  v214 = __ROL4__(v203 ^ v172 ^ v152 ^ v142, 1);\n  v215 = v202 & (v204 | v209);\n  v216 = v204 & v209;\n  v209 = __ROR4__(v209, 2);\n  v217 = __ROL4__(v213, 5) + v214 + v205 - 1894007588 + (v215 | v216);\n  v218 = v209 | v213;\n  v219 = v213;\n  v213 = __ROR4__(v213, 2);\n  v220 = __ROL4__(v208 ^ v158 ^ v149 ^ v190, 1);\n  v221 = __ROL4__(v217, 5) + v220 + v202 - 1894007588 + (v204 & v218 | v209 & v219);\n  v222 = v217 ^ v213 ^ v209;\n  v223 = __ROL4__(v212 ^ v193 ^ v166 ^ v152, 1);\n  v217 = __ROR4__(v217, 2);\n  v224 = __ROL4__(v221, 5) + v223 + v204 - 899497514 + v222;\n  v225 = v221 ^ v217 ^ v213;\n  v221 = __ROR4__(v221, 2);\n  v226 = __ROL4__(v214 ^ v196 ^ v167 ^ v158, 1);\n  v227 = __ROL4__(v224, 5) + v226 + v209 - 899497514 + v225;\n  v228 = v224 ^ v221 ^ v217;\n  v224 = __ROR4__(v224, 2);\n  v229 = v226 ^ v208 ^ v172 ^ v184;\n  v230 = v227 ^ v224 ^ v221;\n  v231 = __ROL4__(v220 ^ v201 ^ v184 ^ v166, 1);\n  v232 = v231 + v213 - 899497514 + v228;\n  v233 = v227;\n  v227 = __ROR4__(v227, 2);\n  v234 = __ROL4__(v233, 5) + v232;\n  v235 = __ROL4__(v229, 1);\n  v236 = __ROL4__(v223 ^ v176 ^ v167 ^ v203, 1);\n  v237 = __ROL4__(v234, 5) + v236 + v217 - 899497514 + v230;\n  v238 = v234 ^ v227 ^ v224;\n  v234 = __ROR4__(v234, 2);\n  v239 = __ROL4__(v229, 1) + v221 - 899497514 + v238;\n  v240 = __ROL4__(v237, 5);\n  v241 = v237 ^ v234 ^ v227;\n  v237 = __ROR4__(v237, 2);\n  v242 = v240 + v239;\n  v243 = __ROL4__(v231 ^ v212 ^ v190 ^ v176, 1);\n  v244 = __ROL4__(__ROL4__(v229, 1) ^ v220 ^ v196 ^ v190, 1);\n  v245 = __ROL4__(v242, 5) + v243 + v224 - 899497514 + v241;\n  v246 = __ROL4__(v236 ^ v193 ^ v172 ^ v214, 1);\n  v247 = v242 ^ v237 ^ v234;\n  v242 = __ROR4__(v242, 2);\n  v248 = __ROL4__(v245, 5) + v246 + v227 - 899497514 + v247;\n  v249 = v244 + v234 - 899497514 + (v245 ^ v242 ^ v237);\n  v245 = __ROR4__(v245, 2);\n  v250 = __ROL4__(v248, 5) + v249;\n  v251 = v248 ^ v245 ^ v242;\n  v248 = __ROR4__(v248, 2);\n  v252 = __ROL4__(v243 ^ v201 ^ v193 ^ v223, 1);\n  v253 = __ROL4__(v250, 5) + v252 + v237 - 899497514 + v251;\n  v254 = __ROL4__(v246 ^ v203 ^ v196 ^ v226, 1);\n  v255 = v250 ^ v248 ^ v245;\n  v250 = __ROR4__(v250, 2);\n  v256 = __ROL4__(v253, 5) + v254 + v242 - 899497514 + v255;\n  v257 = __ROL4__(v244 ^ v231 ^ v208 ^ v201, 1);\n  v258 = __ROL4__(v256, 5) + v257 + v245 - 899497514 + (v253 ^ v250 ^ v248);\n  v253 = __ROR4__(v253, 2);\n  v259 = v256 ^ v253 ^ v250;\n  v256 = __ROR4__(v256, 2);\n  v260 = __ROL4__(v252 ^ v236 ^ v212 ^ v203, 1);\n  v261 = __ROL4__(v258, 5) + v260 + v248 - 899497514 + v259;\n  v262 = v258 ^ v256 ^ v253;\n  v258 = __ROR4__(v258, 2);\n  v263 = __ROL4__(v254 ^ v235 ^ v208 ^ v214, 1);\n  v264 = v262 + v263 + v250 - 899497514 + __ROL4__(v261, 5);\n  v265 = __ROL4__(v257 ^ v220 ^ v212 ^ v243, 1);\n  v266 = v261 ^ v258 ^ v256;\n  v261 = __ROR4__(v261, 2);\n  v267 = v266 + v265 + v253 - 899497514 + __ROL4__(v264, 5);\n  v268 = __ROL4__(v260 ^ v223 ^ v214 ^ v246, 1);\n  v269 = v264 ^ v261 ^ v258;\n  v264 = __ROR4__(v264, 2);\n  v270 = __ROL4__(v267, 5) + v268 + v256 - 899497514 + v269;\n  v271 = __ROL4__(v226 ^ v220 ^ v244 ^ v263, 1);\n  v272 = v267 ^ v264 ^ v261;\n  v267 = __ROR4__(v267, 2);\n  v273 = __ROL4__(v270, 5) + v272 + v271 + v258 - 899497514;\n  v274 = __ROL4__(v231 ^ v223 ^ v252 ^ v265, 1);\n  v275 = v270 ^ v267 ^ v264;\n  v270 = __ROR4__(v270, 2);\n  v276 = __ROL4__(v273, 5) + v275 + v274 + v261 - 899497514;\n  v277 = v264 + __ROL4__(v268 ^ v236 ^ v226 ^ v254, 1) - 899497514;\n  v278 = v273 ^ v270 ^ v267;\n  v273 = __ROR4__(v273, 2);\n  v279 = __ROL4__(v276, 5) + v277 + v278;\n  v280 = v243 ^ v236 ^ v260 ^ v274;\n  v281 = v267 + __ROL4__(v271 ^ v235 ^ v231 ^ v257, 1) - 899497514;\n  v282 = v276 ^ v273 ^ v270;\n  v276 = __ROR4__(v276, 2);\n  result = v17;\n  v284 = __ROL4__(v279, 5) + v281 + v282;\n  v17[1] = v22 + v284;\n  *v17 = __ROL4__(v284, 5) + v270 + v23 + __ROL4__(v280, 1) - 899497514 + (v279 ^ v276 ^ v273);\n  v17[3] = v21 + v276;\n  v17[2] = v19 + __ROR4__(v279, 2);\n  v17[4] = v20 + v273;\n  return result;\n}\n", 
            "funcStartAddr": "0x36be0L", 
            "funcEndAddr": "0x37d3cL", 
            "funcName": "sub_36BE0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall SHA1_Init(__int64 a1)\n{\n  signed __int64 result; // rax\n\n  *(_DWORD *)(a1 + 24) = 0;\n  *(_QWORD *)a1 = -1167088121787636991LL;\n  *(_QWORD *)(a1 + 8) = 1167088121787636990LL;\n  result = 3285377520LL;\n  *(_QWORD *)(a1 + 16) = 3285377520LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x37d40L", 
            "funcEndAddr": "0x37d6cL", 
            "funcName": "SHA1_Init"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall SHA1_Update(_DWORD *a1, char *a2, unsigned int a3)\n{\n  char *v3; // r12\n  unsigned int v4; // ebp\n  int v5; // edx\n  int v6; // eax\n  unsigned int v7; // er15\n  unsigned __int8 v8; // cf\n  int v9; // eax\n  int v10; // edx\n  _QWORD *v11; // r13\n  _DWORD *v13; // r14\n  unsigned int v14; // ebx\n  __int64 v15; // rcx\n  __int64 v16; // rcx\n  unsigned int v17; // eax\n  unsigned __int64 v18; // rax\n  char *v19; // r13\n  char *v20; // rdi\n  unsigned int v21; // er13\n  unsigned int v22; // er13\n  unsigned int v23; // edx\n  __int64 v24; // rsi\n\n  v3 = a2;\n  v4 = a3;\n  v5 = 8 * a3;\n  v6 = a1[5];\n  v7 = (a1[5] >> 3) & 0x3F;\n  v8 = __CFADD__(v5, v6);\n  v9 = v5 + v6;\n  v10 = a1[6];\n  a1[5] = v9;\n  a1[6] = v10 - ((v8 < 1u) - 1) + (v4 >> 29);\n  v11 = (_QWORD *)((char *)a1 + v7 + 28);\n  if ( v7 + v4 > 0x3F )\n  {\n    v13 = a1;\n    v14 = 64 - v7;\n    v15 = 64 - v7;\n    if ( 64 - v7 >= 8 )\n    {\n      *v11 = *(_QWORD *)a2;\n      *(_QWORD *)((char *)v11 + v15 - 8) = *(_QWORD *)&a2[v15 - 8];\n      v18 = ((unsigned __int64)a1 + v7 + 36) & 0xFFFFFFFFFFFFFFF8LL;\n      v19 = (char *)v11 - v18;\n      v20 = (char *)(a2 - v19);\n      v21 = (v14 + (_DWORD)v19) & 0xFFFFFFF8;\n      if ( v21 >= 8 )\n      {\n        v22 = v21 & 0xFFFFFFF8;\n        v23 = 0;\n        do\n        {\n          v24 = v23;\n          v23 += 8;\n          *(_QWORD *)(v18 + v24) = *(_QWORD *)&v20[v24];\n        }\n        while ( v23 < v22 );\n      }\n    }\n    else if ( v14 & 4 )\n    {\n      *(_DWORD *)v11 = *(_DWORD *)a2;\n      *(_DWORD *)((char *)v11 + v15 - 4) = *(_DWORD *)&a2[v15 - 4];\n    }\n    else if ( 64 != v7 )\n    {\n      *(_BYTE *)v11 = *a2;\n      if ( v14 & 2 )\n        *(_WORD *)((char *)v11 + v15 - 2) = *(_WORD *)&a2[v15 - 2];\n    }\n    v11 = v13 + 7;\n    sub_36BE0(v13, v13 + 7);\n    v16 = 64 - v7;\n    if ( v4 > 127 - v7 )\n    {\n      while ( 1 )\n      {\n        sub_36BE0(v13, (unsigned int *)&v3[v16]);\n        v17 = v14 + 127;\n        v14 += 64;\n        if ( v17 >= v4 )\n          break;\n        v16 = v14;\n      }\n      v4 -= v14;\n      v3 += v14;\n    }\n    else\n    {\n      v3 += 64 - v7;\n      v4 -= v14;\n    }\n  }\n  return memcpy(v11, v3, v4);\n}\n", 
            "funcStartAddr": "0x37d70L", 
            "funcEndAddr": "0x37ef2L", 
            "funcName": "SHA1_Update"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall SHA1_Final(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rax\n  unsigned __int64 result; // rax\n  __int64 v5; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v6; // [rsp+8h] [rbp-30h]\n\n  v6 = __readfsqword(0x28u);\n  v2 = 0LL;\n  do\n  {\n    *((_BYTE *)&v5 + v2) = *(_DWORD *)(a2 + 4 * (((unsigned int)v2 <= 3) + 4LL) + 4) >> 8 * (~(_BYTE)v2 & 3);\n    ++v2;\n  }\n  while ( v2 != 8 );\n  SHA1_Update((_DWORD *)a2, (char *)&off_4ADE8, 1u);\n  while ( (*(_DWORD *)(a2 + 20) & 0x1F8) != 448 )\n    SHA1_Update((_DWORD *)a2, (char *)&off_4ADE8 + 2, 1u);\n  SHA1_Update((_DWORD *)a2, (char *)&v5, 8u);\n  v3 = 0LL;\n  do\n  {\n    *(_BYTE *)(a1 + v3) = *(_DWORD *)(a2 + 4LL * ((unsigned int)v3 >> 2)) >> 8 * (~(_BYTE)v3 & 3);\n    ++v3;\n  }\n  while ( v3 != 20 );\n  *(_DWORD *)(a2 + 16) = 0;\n  result = __readfsqword(0x28u) ^ v6;\n  *(_QWORD *)(a2 + 20) = 0LL;\n  *(_OWORD *)(a2 + 28) = 0LL;\n  *(_OWORD *)(a2 + 44) = 0LL;\n  *(_OWORD *)(a2 + 60) = 0LL;\n  *(_OWORD *)(a2 + 76) = 0LL;\n  *(_OWORD *)a2 = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x37f00L", 
            "funcEndAddr": "0x38020L", 
            "funcName": "SHA1_Final"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall splaytree_splay(__int64 a1, int a2)\n{\n  __int64 result; // rax\n  __int64 *v3; // r8\n  __int64 *v4; // rdx\n  bool v5; // zf\n  __int64 v6; // [rsp+0h] [rbp-38h]\n  __int64 v7; // [rsp+8h] [rbp-30h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  result = 0LL;\n  if ( a1 )\n  {\n    v3 = &v6;\n    v7 = 0LL;\n    v6 = 0LL;\n    v4 = &v6;\n    while ( 1 )\n    {\n      v5 = a2 == *(_DWORD *)(a1 + 16);\n      if ( a2 - *(_DWORD *)(a1 + 16) >= 0 )\n        break;\nLABEL_9:\n      result = *(_QWORD *)a1;\n      if ( !*(_QWORD *)a1 )\n      {\n        result = a1;\n        a1 = 0LL;\n        goto LABEL_16;\n      }\n      if ( a2 - *(_DWORD *)(result + 16) < 0 )\n      {\n        *(_QWORD *)a1 = *(_QWORD *)(result + 8);\n        *(_QWORD *)(result + 8) = a1;\n        a1 = *(_QWORD *)result;\n        if ( !*(_QWORD *)result )\n          goto LABEL_16;\n        a1 = result;\n      }\n      *v3 = a1;\n      v3 = (__int64 *)a1;\n      a1 = *(_QWORD *)a1;\n    }\n    while ( !v5 )\n    {\n      result = *(_QWORD *)(a1 + 8);\n      if ( !result )\n        break;\n      if ( a2 - *(_DWORD *)(result + 16) <= 0 )\n      {\n        result = a1;\n      }\n      else\n      {\n        *(_QWORD *)(a1 + 8) = *(_QWORD *)result;\n        v5 = *(_QWORD *)(result + 8) == 0LL;\n        *(_QWORD *)result = a1;\n        if ( v5 )\n          goto LABEL_16;\n      }\n      v4[1] = result;\n      a1 = *(_QWORD *)(result + 8);\n      v4 = (__int64 *)result;\n      v5 = a2 == *(_DWORD *)(a1 + 16);\n      if ( a2 - *(_DWORD *)(a1 + 16) < 0 )\n        goto LABEL_9;\n    }\n    result = a1;\n    a1 = *(_QWORD *)a1;\nLABEL_16:\n    v4[1] = a1;\n    *v3 = *(_QWORD *)(result + 8);\n    *(_QWORD *)result = v7;\n    *(_QWORD *)(result + 8) = v6;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x38020L", 
            "funcEndAddr": "0x3812dL", 
            "funcName": "splaytree_splay"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall splaytree_insert(__int64 a1, int a2, __int64 a3)\n{\n  __int64 v3; // r13\n  __int64 result; // rax\n  int v5; // er12\n  __int64 *v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rdx\n\n  v3 = a3;\n  if ( a1 )\n  {\n    result = splaytree_splay(a1, a2);\n    v5 = *(_DWORD *)(result + 16);\n    v6 = (__int64 *)result;\n    if ( v5 == a2 )\n      return result;\n    result = (__int64)malloc(0x20uLL);\n    if ( result )\n    {\n      if ( a2 - v5 < 0 )\n      {\n        v8 = *v6;\n        *(_QWORD *)(result + 8) = v6;\n        *(_QWORD *)result = v8;\n        *v6 = 0LL;\n      }\n      else\n      {\n        v7 = v6[1];\n        *(_QWORD *)result = v6;\n        *(_QWORD *)(result + 8) = v7;\n        v6[1] = 0LL;\n      }\n      goto LABEL_6;\n    }\nLABEL_11:\n    __assert_fail(\"new\", (const char *)&off_4ADE8 + 4, 0x79u, \"splaytree_insert\");\n  }\n  result = (__int64)malloc(0x20uLL);\n  if ( !result )\n    goto LABEL_11;\n  *(_QWORD *)(result + 8) = 0LL;\n  *(_QWORD *)result = 0LL;\nLABEL_6:\n  *(_DWORD *)(result + 16) = a2;\n  *(_QWORD *)(result + 24) = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x38130L", 
            "funcEndAddr": "0x381e7L", 
            "funcName": "splaytree_insert"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall splaytree_delete(__int64 a1, int a2)\n{\n  __int64 v2; // rax\n  _QWORD *v3; // rbp\n  __int64 v5; // rbx\n\n  if ( !a1 )\n    return 0LL;\n  v2 = splaytree_splay(a1, a2);\n  v3 = (_QWORD *)v2;\n  if ( *(_DWORD *)(v2 + 16) != a2 )\n    return v3;\n  if ( *(_QWORD *)v2 )\n  {\n    v5 = splaytree_splay(*(_QWORD *)v2, a2);\n    *(_QWORD *)(v5 + 8) = v3[1];\n  }\n  else\n  {\n    v5 = *(_QWORD *)(v2 + 8);\n  }\n  free(v3);\n  return (_QWORD *)v5;\n}\n", 
            "funcStartAddr": "0x381f0L", 
            "funcEndAddr": "0x38264L", 
            "funcName": "splaytree_delete"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_38270(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  signed __int64 result; // rax\n  unsigned int v4; // ebp\n\n  v2 = a2;\n  do\n  {\n    result = a1 + 2LL * *(signed int *)(v2 + 28);\n    if ( !*(_BYTE *)result )\n      break;\n    *(_BYTE *)result = 0;\n    if ( *(_QWORD *)(v2 + 136) )\n    {\n      v4 = 0;\n      result = 0LL;\n      do\n      {\n        if ( !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8 * result) + 48LL) )\n          sub_38270(a1);\n        result = ++v4;\n      }\n      while ( (unsigned __int64)v4 < *(_QWORD *)(v2 + 136) );\n    }\n    v2 = *(_QWORD *)(v2 + 56);\n  }\n  while ( v2 );\n  return result;\n}\n", 
            "funcStartAddr": "0x38270L", 
            "funcEndAddr": "0x382daL", 
            "funcName": "sub_38270"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_382E0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // rbx\n  unsigned int v6; // ebp\n  __int64 v7; // r12\n  __int64 v8; // rsi\n  unsigned int v9; // eax\n  _QWORD *v10; // rsi\n  unsigned int v11; // eax\n  unsigned int v12; // ecx\n  signed __int64 result; // rax\n  unsigned int v14; // er14\n  int v15; // ecx\n  __int64 v16; // rdx\n  void **v17; // r15\n  int v18; // eax\n  bool v19; // bp\n  int v20; // eax\n  unsigned int v21; // ebp\n  char v22; // dl\n  int v23; // eax\n  _BYTE *v24; // rsi\n  unsigned __int64 v25; // rax\n  size_t v26; // rdx\n  _BYTE *v27; // rax\n  __int64 v28; // rdx\n  unsigned __int64 v29; // rdi\n  signed __int64 v30; // rsi\n  __int64 v31; // rax\n  signed __int64 v32; // r14\n  __int64 v33; // r9\n  int v34; // edx\n  __int64 v35; // rdi\n  void *v36; // rsi\n  __int64 v37; // rax\n  __int64 v38; // ST18_8\n  __int64 v39; // rax\n\n  v4 = a1;\n  v5 = a2;\n  v6 = a3;\n  v7 = a4;\n  v8 = *(_QWORD *)(a2 + 40);\n  if ( v8 && *(_DWORD *)(v8 + 28) )\n  {\n    if ( a3 )\n    {\n      log_error(*(_DWORD **)(a1 + 128), \"configfile-glue.c\", 409LL, (__int64)\"go parent %s\", *(_QWORD *)v8);\n      v8 = *(_QWORD *)(v5 + 40);\n    }\n    v9 = sub_38790(a1, v8, v6);\n    if ( !v9 )\n      return 0LL;\n    if ( v9 <= 2 )\n      return 1LL;\n  }\n  v10 = *(_QWORD **)(v5 + 48);\n  if ( v10 )\n  {\n    if ( v6 )\n    {\n      log_error(*(_DWORD **)(a1 + 128), \"configfile-glue.c\", 432LL, (__int64)\"go prev %s\", *v10);\n      v10 = *(_QWORD **)(v5 + 48);\n    }\n    v11 = sub_38790(a1, v10, v6);\n    if ( v11 == 1 )\n      return 1LL;\n    if ( v11 < 1 )\n      return 0LL;\n    if ( v11 == 3 )\n      return 1LL;\n  }\n  v12 = *(_DWORD *)(v5 + 32);\n  if ( (1 << v12) & *(_DWORD *)(a1 + 56) )\n  {\n    result = (unsigned int)*(char *)(v7 + 1);\n    if ( (unsigned __int8)(*(_BYTE *)(v7 + 1) - 2) <= 1u )\n      return result;\n    v14 = *(_DWORD *)(v5 + 36);\n    if ( v14 == 5 )\n    {\n      *(_BYTE *)(v7 + 1) = 3;\n      return 3LL;\n    }\n    switch ( v12 )\n    {\n      case 1u:\n        v17 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 1072LL) + 136LL);\n        goto LABEL_23;\n      case 2u:\n        v17 = (void **)(a1 + 296);\n        goto LABEL_23;\n      case 3u:\n        v17 = (void **)(a1 + 280);\n        goto LABEL_23;\n      case 8u:\n        v17 = (void **)(*(_QWORD *)(a1 + 48) + 1056LL);\n        goto LABEL_23;\n      case 9u:\n        v17 = (void **)(a1 + 312);\n        goto LABEL_23;\n      case 0xAu:\n        v17 = (void **)(a1 + 264);\n        goto LABEL_23;\n      case 0xBu:\n        v17 = (void **)http_method_buf(*(_DWORD *)(a1 + 24));\n        goto LABEL_23;\n      case 0xCu:\n        v15 = *(_DWORD *)(v5 + 112);\n        v16 = *(_QWORD *)(v5 + 104);\n        v17 = (void **)http_header_request_get(a1, *(unsigned int *)(v5 + 100));\n        if ( !v17 )\n          v17 = &off_258120;\nLABEL_23:\n        if ( *((_DWORD *)v17 + 2) <= 1u )\n          v17 = &off_258120;\n        if ( v6 )\n        {\n          log_error(\n            *(_DWORD **)(a1 + 128),\n            \"configfile-glue.c\",\n            519LL,\n            (__int64)\"%s compare to %s\",\n            *(_QWORD *)(v5 + 120),\n            *v17);\n          v14 = *(_DWORD *)(v5 + 36);\n        }\n        if ( v14 == 2 )\n          goto LABEL_31;\n        if ( v14 <= 2 )\n        {\n          if ( v14 != 1 )\n            goto LABEL_47;\n        }\n        else if ( v14 != 3 )\n        {\n          if ( v14 == 4 )\n          {\nLABEL_31:\n            v18 = *(_DWORD *)(v5 + 96);\n            v19 = v14 == 2;\n            if ( v18 )\n            {\n              v31 = v18 - 1;\n              v32 = *(_QWORD *)(a1 + 80) + 32 * v31;\n              v33 = *(_QWORD *)(v32 + 8);\n              *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v31) = v32;\n              if ( !v33 )\n              {\n                v37 = pcre2_match_data_create_from_pattern_8(*(_QWORD *)(v5 + 80), 0LL);\n                *(_QWORD *)(v32 + 8) = v37;\n                if ( !v37 )\n                  ck_assert_failed((__int64)\"configfile-glue.c\", 674LL, (__int64)\"match_data\");\n                v38 = v37;\n                v39 = pcre2_get_ovector_pointer_8(v37);\n                v33 = v38;\n                *(_QWORD *)(v32 + 24) = v39;\n              }\n              v34 = *((_DWORD *)v17 + 2);\n              v35 = *(_QWORD *)(v5 + 80);\n              v36 = *v17;\n              *(_QWORD *)v32 = v17;\n              v20 = pcre2_match_8(v35, v36, v34 - (unsigned int)(v34 != 0), 0LL, 0LL, v33, 0LL);\n              *(_DWORD *)(v32 + 16) = v20;\n            }\n            else\n            {\n              v20 = pcre2_match_8(\n                      *(_QWORD *)(v5 + 80),\n                      *v17,\n                      *((_DWORD *)v17 + 2) - (unsigned int)(*((_DWORD *)v17 + 2) != 0),\n                      0LL,\n                      0LL,\n                      *(_QWORD *)(v5 + 88),\n                      0LL);\n            }\n            v21 = (unsigned __int8)((v20 > 0) ^ v19);\n            goto LABEL_34;\n          }\nLABEL_47:\n          result = 2LL;\n          v22 = 2;\nLABEL_35:\n          *(_BYTE *)(v7 + 1) = v22;\n          return result;\n        }\n        v23 = *(_DWORD *)(v5 + 32);\n        v21 = v14 == 1;\n        if ( v23 == 3 )\n        {\n          v24 = *(_BYTE **)(v5 + 64);\n          if ( *v24 != 47 )\n          {\n            v25 = *((_DWORD *)v17 + 2) - (unsigned int)(*((_DWORD *)v17 + 2) != 0);\n            v26 = *(_DWORD *)(v5 + 72) - (unsigned int)(*(_DWORD *)(v5 + 72) != 0);\n            if ( *((_DWORD *)v17 + 2) != (*((_DWORD *)v17 + 2) != 0) && v25 != v26 )\n            {\n              if ( v25 <= v26 )\n              {\n                if ( v24[v25] != 58 )\n                  goto LABEL_34;\n                v26 = *((_DWORD *)v17 + 2) - (unsigned int)(*((_DWORD *)v17 + 2) != 0);\n              }\n              else if ( *((_BYTE *)*v17 + v26) != 58 || v25 - v26 > 6 )\n              {\n                goto LABEL_34;\n              }\n              if ( !memcmp(*v17, v24, v26) )\n                v21 = v14 != 1;\n              goto LABEL_34;\n            }\n          }\n        }\n        else if ( v23 == 8 )\n        {\n          v27 = *(_BYTE **)(v5 + 64);\n          if ( *v27 != 47 )\n          {\n            v28 = *(unsigned int *)(v5 + 72);\n            v29 = (unsigned __int64)&v27[v28 + 8] & 0xFFFFFFFFFFFFFFF8LL;\n            v30 = *(_QWORD *)(v4 + 48) + 944LL;\n            if ( v27[v28] )\n              v21 ^= sock_addr_is_addr_eq_bits(v29, v30);\n            else\n              v21 ^= sock_addr_is_addr_eq(v29, v30);\n            goto LABEL_34;\n          }\n        }\n        v21 ^= buffer_is_equal((__int64)v17, v5 + 64);\nLABEL_34:\n        result = 3 - (unsigned int)(v21 >= 1);\n        v22 = 3 - (v21 >= 1);\n        goto LABEL_35;\n      default:\n        *(_BYTE *)(v7 + 1) = 2;\n        return 2LL;\n    }\n  }\n  if ( !v6 )\n    return 0LL;\n  log_error(*(_DWORD **)(a1 + 128), \"configfile-glue.c\", 452LL, (__int64)\"%d %s not available yet\", v12, *(_QWORD *)v5);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x382e0L", 
            "funcEndAddr": "0x3878fL", 
            "funcName": "sub_382E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_38790(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r12\n  unsigned int v4; // er13\n  __int64 v5; // rdi\n  char *v6; // rbx\n  __int64 result; // rax\n  char v8; // dl\n\n  v3 = a1;\n  v4 = a3;\n  v5 = *(_QWORD *)(a1 + 64);\n  v6 = (char *)(v5 + 2LL * *(signed int *)(a2 + 28));\n  result = (unsigned int)*v6;\n  if ( *v6 )\n  {\n    if ( a3 )\n    {\n      sub_1B97F(v5, *(_DWORD **)(v3 + 128), *(_QWORD *)a2, *(_DWORD *)(a2 + 28), 1u);\n      result = (unsigned int)*v6;\n    }\n  }\n  else\n  {\n    v8 = sub_382E0(v3, a2, a3, v5 + 2LL * *(signed int *)(a2 + 28));\n    *v6 = v8;\n    if ( v4 )\n    {\n      sub_1B97F(*(_QWORD *)(v3 + 64), *(_DWORD **)(v3 + 128), *(_QWORD *)a2, *(_DWORD *)(a2 + 28), 0);\n      v8 = *v6;\n    }\n    result = (unsigned int)v8;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x38790L", 
            "funcEndAddr": "0x3882fL", 
            "funcName": "sub_38790"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_38830(__int64 a1, int a2, __int64 a3)\n{\n  char *v3; // rbp\n  unsigned int v4; // er13\n  __int64 v5; // r12\n  char v6; // dl\n\n  v3 = (char *)a3;\n  v4 = *(unsigned __int8 *)(a1 + 165);\n  v5 = *(_QWORD *)(qword_2585F0 + 8LL * a2);\n  if ( *(_BYTE *)(a1 + 165) )\n  {\n    log_error(*(_DWORD **)(a1 + 128), \"configfile-glue.c\", 576LL, (__int64)\"=== start of condition block ===\");\n    *v3 = sub_382E0(a1, v5, v4, (__int64)v3);\n    sub_1B97F(*(_QWORD *)(a1 + 64), *(_DWORD **)(a1 + 128), *(_QWORD *)v5, *(_DWORD *)(v5 + 28), 0);\n    v6 = *v3;\n  }\n  else\n  {\n    v6 = sub_382E0(a1, *(_QWORD *)(qword_2585F0 + 8LL * a2), 0, a3);\n    *v3 = v6;\n  }\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x38830L", 
            "funcEndAddr": "0x388d2L", 
            "funcName": "sub_38830"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall config_check_cond(__int64 a1, int a2)\n{\n  _BYTE *v2; // rdx\n  _BOOL8 result; // rax\n\n  v2 = (_BYTE *)(*(_QWORD *)(a1 + 64) + 2LL * a2);\n  if ( *v2 )\n    result = *v2 == 3;\n  else\n    result = (unsigned int)sub_38830(a1, a2, (__int64)v2) == 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x388e0L", 
            "funcEndAddr": "0x38917L", 
            "funcName": "config_check_cond"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall config_cond_cache_reset_item(__int64 a1, int a2)\n{\n  signed __int64 result; // rax\n  __int64 v3; // r11\n  int v4; // er8\n  signed __int64 v5; // rcx\n  __int64 v6; // rsi\n  int v7; // er8\n  __int64 v8; // r9\n  __int64 v9; // r10\n  __int64 v10; // rcx\n\n  result = (unsigned int)dword_2585F8;\n  v3 = *(_QWORD *)(a1 + 64);\n  if ( dword_2585F8 )\n  {\n    result = (unsigned int)(result - 1);\n    v4 = a2;\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v6 = *(_QWORD *)(qword_2585F0 + 4 * v5);\n      if ( *(_DWORD *)(v6 + 32) == v4 )\n        break;\n      v5 += 2LL;\n      if ( 2 * result + 2 == v5 )\n        return result;\n    }\n    while ( 1 )\n    {\n      *(_BYTE *)(v3 + v5 + 1) = 0;\n      result = sub_38270(v3, v6);\n      v5 = v10 + 2;\n      if ( v9 == v5 )\n        break;\n      while ( 1 )\n      {\n        v6 = *(_QWORD *)(v8 + 4 * v5);\n        if ( *(_DWORD *)(v6 + 32) == v7 )\n          break;\n        v5 += 2LL;\n        if ( v9 == v5 )\n          return result;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x38920L", 
            "funcEndAddr": "0x3899aL", 
            "funcName": "config_cond_cache_reset_item"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall config_cond_cache_reset(__int64 a1)\n{\n  void *result; // rax\n\n  if ( (unsigned int)dword_2585F8 > 1 )\n    result = memset(*(void **)(a1 + 64), 0, 2LL * (unsigned int)dword_2585F8);\n  return result;\n}\n", 
            "funcStartAddr": "0x389a0L", 
            "funcEndAddr": "0x389c2L", 
            "funcName": "config_cond_cache_reset"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_389D0(__int64 a1, __int64 a2, int a3)\n{\n  __int64 v3; // rcx\n  unsigned int v4; // eax\n  __int64 v5; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n\n  if ( *(_BYTE *)(a1 + 563) )\n    return http_chunk_decode_append_buffer(a1, a2);\n  v3 = *(_QWORD *)(a1 + 432);\n  if ( v3 <= 0 )\n  {\n    if ( v3 )\n    {\n      if ( !a3 )\n        return http_chunk_append_buffer(a1, a2);\n      if ( *(_DWORD *)(a2 + 8) - (unsigned int)(*(_DWORD *)(a2 + 8) != 0) > 0x7FFF )\n        return http_chunk_append_buffer(a1, a2);\n      v7 = *(_QWORD *)(a1 + 632);\n      if ( !v7 || !*(_DWORD *)(v7 + 44) )\n        return http_chunk_append_buffer(a1, a2);\n    }\n    else\n    {\n      *(_DWORD *)(a2 + 8) = 0;\n    }\n  }\n  else\n  {\n    v4 = *(_DWORD *)(a2 + 8) - (*(_DWORD *)(a2 + 8) != 0);\n    *(_QWORD *)(a1 + 432) = v3 - v4;\n    if ( v3 - v4 <= 0 )\n    {\n      *(_BYTE *)(a1 + 560) = 1;\n      if ( v3 != v4 )\n      {\n        v8 = *(_QWORD *)a2;\n        *(_QWORD *)(a1 + 432) = 0LL;\n        *(_BYTE *)(v8 + (unsigned int)v3) = 0;\n        *(_DWORD *)(a2 + 8) = v3 + 1;\n      }\n      return http_chunk_append_buffer(a1, a2);\n    }\n    if ( v4 > 0x7FFF )\n      return http_chunk_append_buffer(a1, a2);\n    if ( !(a3 & 1) )\n      return http_chunk_append_buffer(a1, a2);\n    v5 = *(_QWORD *)(a1 + 632);\n    if ( !v5 || !*(_DWORD *)(v5 + 44) )\n      return http_chunk_append_buffer(a1, a2);\n    *(_QWORD *)(a1 + 432) = v3;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x389d0L", 
            "funcEndAddr": "0x38ab9L", 
            "funcName": "sub_389D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_redirect_to_directory(__int64 a1, signed int a2)\n{\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __int64 v4; // rbp\n  unsigned int v5; // er12\n  unsigned int v6; // edx\n\n  v2 = *(_QWORD *)(a1 + 568);\n  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 912LL);\n  *(_DWORD *)(v2 + 8) = 0;\n  if ( *(_BYTE *)(v3 + 163)\n    && (buffer_append_str2(\n          v2,\n          *(const void **)(a1 + 264),\n          *(_DWORD *)(a1 + 272) - (unsigned int)(*(_DWORD *)(a1 + 272) != 0),\n          \"://\",\n          3uLL),\n        (unsigned int)http_response_buffer_append_authority(a1, v2)) )\n  {\n    v5 = -1;\n  }\n  else\n  {\n    if ( a2 <= 299 )\n    {\n      v4 = http_header_response_set_ptr(a1, 15, (__int64)&unk_4B35A, 0x10u);\n    }\n    else\n    {\n      *(_DWORD *)(a1 + 4) = a2;\n      *(_BYTE *)(a1 + 560) = 1;\n      v4 = http_header_response_set_ptr(a1, 36, (__int64)\"Location\", 8u);\n    }\n    buffer_copy_string_len(v4, *(const void **)v2, *(_DWORD *)(v2 + 8) - (unsigned int)(*(_DWORD *)(v2 + 8) != 0));\n    v5 = 0;\n    buffer_append_string_encoded(\n      v4,\n      *(unsigned __int8 **)(a1 + 296),\n      *(_DWORD *)(a1 + 304) - (unsigned int)(*(_DWORD *)(a1 + 304) != 0),\n      0);\n    buffer_append_string_len(v4, \"/\", 1uLL);\n    v6 = *(_DWORD *)(a1 + 320);\n    if ( v6 > 1 )\n      buffer_append_str2(v4, \"?\", 1uLL, *(const void **)(a1 + 312), v6 - 1);\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x38ac0L", 
            "funcEndAddr": "0x38c1aL", 
            "funcName": "http_response_redirect_to_directory"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_set_last_modified(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rax\n  _QWORD *v3; // rdx\n  __int64 v4; // r12\n  int v5; // eax\n  char *v6; // rbp\n  __int64 v8; // rax\n  signed __int64 v9; // r13\n  _QWORD *v10; // rax\n  char *v11; // rdi\n\n  v2 = http_header_response_set_ptr(a1, 34, (__int64)\"Last-Modified\", 0xDu);\n  v3 = &unk_258840;\n  v4 = v2;\n  v5 = 0;\n  do\n  {\n    if ( a2 == *v3 )\n    {\n      v6 = (char *)&unk_258840 + 24 * v5 + 8;\n      goto LABEL_5;\n    }\n    ++v5;\n    v3 += 3;\n  }\n  while ( v5 != 16 );\n  LODWORD(v8) = dword_258600 + 1;\n  if ( dword_258600 == 15 )\n  {\n    dword_258600 = 0;\n    v9 = 8LL;\n    v8 = 0LL;\n  }\n  else\n  {\n    ++dword_258600;\n    v8 = (signed int)v8;\n    v9 = 24LL * (signed int)v8 + 8;\n  }\n  v10 = (_QWORD *)((char *)&unk_258840 + 24 * v8);\n  v6 = (char *)&unk_258840 + v9;\n  v11 = (char *)v10[1];\n  *v10 = a2;\n  http_date_time_to_str(v11, 0x1EuLL);\nLABEL_5:\n  buffer_copy_string_len(v4, *(const void **)v6, *((_DWORD *)v6 + 2) - (unsigned int)(*((_DWORD *)v6 + 2) != 0));\n  return v4;\n}\n", 
            "funcStartAddr": "0x38c20L", 
            "funcEndAddr": "0x38cfcL", 
            "funcName": "http_response_set_last_modified"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_response_handle_cachable(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // r14\n  __int64 v5; // r13\n  const char **v6; // r12\n  __int64 v7; // rax\n  __int64 v9; // rbx\n\n  v3 = *(_QWORD *)(a1 + 232);\n  if ( v3 & 0xC0000000 )\n  {\n    v4 = a3;\n    v5 = a2;\n    v6 = (const char **)http_header_request_get(a1, 0x1FuLL);\n    if ( v6 && (v7 = http_header_response_get(a1, 0x16uLL)) != 0 )\n    {\n      if ( (unsigned int)http_etag_matches(v7, *v6, (BYTE5(v3) ^ 1) & 1) )\n      {\n        if ( *(_DWORD *)(a1 + 24) > 1 )\n        {\n          *(_DWORD *)(a1 + 4) = 412;\n          *(_QWORD *)(a1 + 32) = 0LL;\n          return 1LL;\n        }\nLABEL_13:\n        *(_DWORD *)(a1 + 4) = 304;\n        return 1LL;\n      }\n    }\n    else if ( *(_DWORD *)(a1 + 24) <= 1 )\n    {\n      v9 = http_header_request_get(a1, 0x1EuLL);\n      if ( v9 )\n      {\n        if ( a2 || (v5 = http_header_response_get(a1, 0x22uLL)) != 0 )\n        {\n          if ( (unsigned int)buffer_is_equal(v5, v9)\n            || !(unsigned int)http_date_if_modified_since(\n                                *(_QWORD *)v9,\n                                *(_DWORD *)(v9 + 8) - (unsigned int)(*(_DWORD *)(v9 + 8) != 0),\n                                v4) )\n          {\n            goto LABEL_13;\n          }\n        }\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x38d00L", 
            "funcEndAddr": "0x38e4eL", 
            "funcName": "http_response_handle_cachable"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_response_body_clear(__int64 a1, int a2)\n{\n  bool v2; // zf\n  __int64 v3; // rax\n\n  v2 = (*(_BYTE *)(a1 + 534) & 1) == 0;\n  *(_BYTE *)(a1 + 562) = 0;\n  *(_QWORD *)(a1 + 432) = -1LL;\n  if ( !v2 )\n    http_header_response_unset(a1, 0x30uLL, (__int64)\"Transfer-Encoding\", 0x11u);\n  if ( !a2 )\n  {\n    if ( *(_BYTE *)(a1 + 529) & 0x40 )\n      http_header_response_unset(a1, 0xEuLL, (__int64)\"Content-Length\", 0xEu);\n    v3 = *(_QWORD *)(a1 + 576);\n    *(_BYTE *)(a1 + 563) = 0;\n    if ( v3 )\n    {\n      free(*(void **)(v3 + 8));\n      free(*(void **)(a1 + 576));\n      *(_QWORD *)(a1 + 576) = 0LL;\n    }\n  }\n  chunkqueue_reset(a1 + 624);\n}\n", 
            "funcStartAddr": "0x38e50L", 
            "funcEndAddr": "0x38f0eL", 
            "funcName": "http_response_body_clear"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_response_reset(__int64 a1)\n{\n  __int64 v1; // rax\n  bool v2; // zf\n  bool v3; // cf\n\n  v1 = *(_QWORD *)(a1 + 48);\n  *(_DWORD *)(a1 + 4) = 0;\n  *(_BYTE *)(v1 + 841) = 1;\n  v2 = *(_QWORD *)(a1 + 328) == 0LL;\n  *(_WORD *)(a1 + 560) = 0;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  if ( !v2 )\n  {\n    v3 = *(_DWORD *)(a1 + 340) < 0x1000u;\n    v2 = *(_DWORD *)(a1 + 340) == 4096;\n    *(_DWORD *)(a1 + 368) = 0;\n    *(_DWORD *)(a1 + 352) = 0;\n    *(_DWORD *)(a1 + 336) = 0;\n    if ( !v3 && !v2 )\n      buffer_free_ptr(a1 + 328);\n    v3 = *(_DWORD *)(a1 + 388) < 0x1000u;\n    v2 = *(_DWORD *)(a1 + 388) == 4096;\n    *(_DWORD *)(a1 + 384) = 0;\n    if ( !v3 && !v2 )\n      buffer_free_ptr(a1 + 376);\n  }\n  *(_QWORD *)(a1 + 528) = 0LL;\n  *(_DWORD *)(a1 + 520) = 0;\n  *(_BYTE *)(a1 + 564) = 0;\n  array_reset_data_strings(a1 + 536);\n  http_response_body_clear(a1, 0);\n}\n", 
            "funcStartAddr": "0x38f10L", 
            "funcEndAddr": "0x38fd0L", 
            "funcName": "http_response_reset"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall http_response_send_file(__int64 a1, const char **a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  unsigned __int64 result; // rax\n  signed __int64 v6; // rax\n  char **v7; // r12\n  unsigned int v8; // er9\n  int v9; // eax\n  __int64 v10; // rax\n  unsigned int v11; // esi\n  __int64 v12; // rax\n  __int64 v13; // r12\n  __int64 v14; // rax\n  signed __int64 v15; // rax\n  unsigned int v16; // er9\n  _QWORD *v17; // rax\n  bool v18; // zf\n  _DWORD *v19; // rdi\n  const char *v20; // r9\n  __int64 v21; // r8\n  __int64 v22; // rdx\n  int *v23; // rax\n\n  v3 = a1;\n  if ( !a3 || (v4 = a3, *(_DWORD *)(a3 + 24) < 0) && *(_QWORD *)(a3 + 120) )\n  {\n    v17 = stat_cache_get_entry_open(a2, *(unsigned __int8 *)(a1 + 154));\n    v4 = (__int64)v17;\n    if ( !v17 )\n    {\n      v23 = __errno_location();\n      v19 = *(_DWORD **)(a1 + 128);\n      v20 = *a2;\n      v21 = *(_QWORD *)(v3 + 296);\n      v22 = 326LL;\n      *(_DWORD *)(v3 + 4) = (*v23 == 2) + 403;\n      return log_error(v19, \"http-header-glue.c\", v22, (__int64)\"not a regular file: %s -> %s\", v21, v20);\n    }\n    if ( *((_DWORD *)v17 + 6) < 0 && v17[15] )\n    {\n      result = (unsigned int)(*__errno_location() == 2) + 403;\n      v18 = *(_BYTE *)(a1 + 163) == 0;\n      *(_DWORD *)(a1 + 4) = result;\n      if ( !v18 )\n        result = log_perror(*(_DWORD **)(a1 + 128), \"http-header-glue.c\", 333LL, (__int64)&unk_4B3A8, *a2);\n      return result;\n    }\n  }\n  if ( !*(_BYTE *)(a1 + 154) )\n  {\n    result = stat_cache_path_contains_symlink((__int64)a2, *(_DWORD **)(a1 + 128));\n    if ( (_DWORD)result )\n    {\n      v18 = *(_BYTE *)(a1 + 163) == 0;\n      *(_DWORD *)(a1 + 4) = 403;\n      if ( !v18 )\n      {\n        log_error(\n          *(_DWORD **)(a1 + 128),\n          \"http-header-glue.c\",\n          344LL,\n          (__int64)\"-- access denied due symlink restriction\");\n        result = log_error(*(_DWORD **)(a1 + 128), \"http-header-glue.c\", 346LL, (__int64)\"Path         : %s\", *a2);\n      }\n      return result;\n    }\n  }\n  result = *(_DWORD *)(v4 + 96) & 0xF000;\n  if ( (_DWORD)result != 0x8000 )\n  {\n    v18 = *(_BYTE *)(a1 + 161) == 0;\n    *(_DWORD *)(a1 + 4) = 403;\n    if ( v18 )\n      return result;\n    v19 = *(_DWORD **)(a1 + 128);\n    v20 = *a2;\n    v21 = *(_QWORD *)(v3 + 296);\n    v22 = 356LL;\n    return log_error(v19, \"http-header-glue.c\", v22, (__int64)\"not a regular file: %s -> %s\", v21, v20);\n  }\n  if ( !(*(_BYTE *)(a1 + 530) & 4) )\n  {\n    v6 = stat_cache_content_type_get_by_ext(v4, *(_QWORD *)(a1 + 96));\n    v7 = (char **)v6;\n    if ( !v6 || (v8 = *(_DWORD *)(v6 + 8), v8 <= 1) )\n    {\n      http_header_response_set(a1, 18, (__int64)\"Content-Type\", 0xCu, \"application/octet-stream\", 0x18u);\n      goto LABEL_16;\n    }\n    http_header_response_set(a1, 18, (__int64)\"Content-Type\", 0xCu, *(const void **)v6, v8 - 1);\n    if ( v7 == &off_257830 )\n      goto LABEL_16;\n  }\n  v9 = *(_DWORD *)(a1 + 4);\n  if ( v9 && v9 != 200 )\n    goto LABEL_16;\n  v10 = *(_QWORD *)(a1 + 528);\n  if ( !(v10 & 0x400000) )\n  {\n    v11 = *(unsigned __int8 *)(a1 + 155);\n    if ( (_BYTE)v11 )\n    {\n      v15 = stat_cache_etag_get(v4, v11);\n      if ( v15 )\n      {\n        v16 = *(_DWORD *)(v15 + 8);\n        if ( v16 > 1 )\n          http_header_response_set(a1, 22, (__int64)\"ETag\", 4u, *(const void **)v15, v16 - 1);\n      }\n      v10 = *(_QWORD *)(a1 + 528);\n    }\n  }\n  v12 = _bittest64(&v10, 0x22u) ? 0LL : http_response_set_last_modified(a1, *(_QWORD *)(v4 + 160));\n  if ( !(*(_DWORD *)(a1 + 232) & 0xC0000000)\n    || (result = http_response_handle_cachable(a1, v12, *(_QWORD *)(v4 + 160)), (_DWORD)result != 1) )\n  {\nLABEL_16:\n    v13 = *(_QWORD *)(v4 + 120);\n    if ( v13 )\n    {\n      result = http_chunk_append_file_ref(a1, v4);\n      if ( (_DWORD)result )\n      {\n        *(_DWORD *)(a1 + 4) = 500;\n        return result;\n      }\n      v13 = *(_QWORD *)(v4 + 120);\n    }\n    *(_DWORD *)(a1 + 4) = 200;\n    *(_BYTE *)(a1 + 560) = 1;\n    v14 = http_header_response_set_ptr(a1, 14, (__int64)\"Content-Length\", 0xEu);\n    result = buffer_append_int(v14, v13);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x38fd0L", 
            "funcEndAddr": "0x3935dL", 
            "funcName": "http_response_send_file"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_response_backend_error(__int64 a1)\n{\n  if ( *(_BYTE *)(a1 + 561) )\n  {\n    *(_QWORD *)(a1 + 32) = 0LL;\n    *(_BYTE *)(a1 + 566) = 0;\n    *(_BYTE *)(a1 + 560) = 1;\n  }\n}\n", 
            "funcStartAddr": "0x39360L", 
            "funcEndAddr": "0x39381L", 
            "funcName": "http_response_backend_error"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_response_backend_done(__int64 a1)\n{\n  unsigned int v1; // eax\n  signed int v2; // eax\n\n  v1 = *(_DWORD *)a1;\n  if ( *(_DWORD *)a1 < 4u )\n    return;\n  if ( v1 > 5 )\n  {\n    if ( v1 != 7 )\n      return;\n    goto LABEL_4;\n  }\n  if ( *(_BYTE *)(a1 + 561) )\n  {\nLABEL_4:\n    if ( !*(_BYTE *)(a1 + 560) )\n    {\n      if ( *(_DWORD *)(a1 + 28) == 1 )\n        http_chunk_close(a1);\n      *(_BYTE *)(a1 + 560) = 1;\n    }\n    return;\n  }\n  v2 = *(_DWORD *)(a1 + 4);\n  if ( v2 <= 499 && v2 != 400 )\n    *(_DWORD *)(a1 + 4) = 500;\n  *(_QWORD *)(a1 + 32) = 0LL;\n}\n", 
            "funcStartAddr": "0x39390L", 
            "funcEndAddr": "0x39407L", 
            "funcName": "http_response_backend_done"
        }, 
        {
            "decompiledFuncCode": "__int16 __fastcall http_response_upgrade_read_body_unknown(__int64 a1)\n{\n  __int16 v1; // ax\n  __int16 v2; // dx\n  __int16 result; // ax\n\n  v1 = *(_WORD *)(a1 + 148);\n  if ( !(v1 & 1) )\n  {\n    v1 |= 3u;\n    *(_WORD *)(a1 + 148) = v1;\n  }\n  v2 = *(_WORD *)(a1 + 150);\n  if ( !(v2 & 1) )\n    *(_WORD *)(a1 + 150) = v2 | 3;\n  result = v1 | 0x8000;\n  *(_QWORD *)(a1 + 416) = -2LL;\n  *(_QWORD *)(a1 + 432) = -1LL;\n  *(_WORD *)(a1 + 148) = result;\n  *(_BYTE *)(a1 + 566) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x39410L", 
            "funcEndAddr": "0x39464L", 
            "funcName": "http_response_upgrade_read_body_unknown"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_response_transfer_cqlen(__int64 a1, _QWORD *a2, unsigned __int64 a3)\n{\n  __int64 v3; // r13\n  _QWORD *v4; // r12\n  signed __int64 v5; // rbp\n  unsigned int v7; // er15\n  _QWORD *v8; // r14\n  __int64 v9; // rcx\n  __int64 v10; // rsi\n  unsigned int v11; // eax\n  unsigned int v12; // ebp\n\n  if ( !a3 )\n    return 0LL;\n  v3 = a3;\n  v4 = a2;\n  if ( *(_BYTE *)(a1 + 563) )\n  {\n    v7 = a3;\n    v8 = (_QWORD *)*a2;\n    if ( !(_DWORD)a3 || !v8 )\n    {\nLABEL_21:\n      chunkqueue_mark_written(v4, v3);\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      v9 = v8[2];\n      v10 = v8[3];\n      v11 = *(_DWORD *)(v9 + 8) - (*(_DWORD *)(v9 + 8) != 0) - v10;\n      if ( v7 <= v11 )\n        v11 = v7;\n      v12 = v11;\n      if ( (unsigned int)http_chunk_decode_append_mem(a1, (char *)(*(_QWORD *)v9 + v10), v11) )\n        return 0xFFFFFFFFLL;\n      v8 = (_QWORD *)*v8;\n      v7 -= v12;\n      if ( !v8 || !v7 )\n        goto LABEL_21;\n    }\n  }\n  v5 = *(_QWORD *)(a1 + 432);\n  if ( v5 < 0 || (*(_QWORD *)(a1 + 432) = v5 - a3, (signed __int64)(v5 - a3) >= 0) )\n  {\n    if ( !(unsigned int)http_chunk_transfer_cqlen(a1, a2, a3) )\n      return 0LL;\n    return 0xFFFFFFFFLL;\n  }\n  *(_QWORD *)(a1 + 432) = 0LL;\n  if ( (unsigned int)http_chunk_transfer_cqlen(a1, a2, v5) )\n    return 0xFFFFFFFFLL;\n  if ( v3 == v5 )\n    return 0LL;\n  chunkqueue_mark_written(a2, v3 - v5);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x39470L", 
            "funcEndAddr": "0x395a0L", 
            "funcName": "http_response_transfer_cqlen"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_send_1xx(__int64 a1)\n{\n  __int64 (__fastcall *v1)(__int64, _QWORD); // rax\n  __int64 result; // rax\n  __int64 v3; // rax\n\n  if ( *(_DWORD *)(a1 + 28) > 1 )\n  {\n    v1 = (__int64 (__fastcall *)(__int64, _QWORD))qword_258648;\nLABEL_3:\n    if ( v1 )\n    {\n      result = v1(a1, *(_QWORD *)(a1 + 48));\n      if ( !(_DWORD)result )\n        return result;\n    }\n    goto LABEL_5;\n  }\n  if ( *(_DWORD *)(a1 + 28) == 1 )\n  {\n    v1 = (__int64 (__fastcall *)(__int64, _QWORD))qword_258650;\n    goto LABEL_3;\n  }\nLABEL_5:\n  *(_DWORD *)(a1 + 4) = 0;\n  *(_QWORD *)(a1 + 528) = 0LL;\n  *(_DWORD *)(a1 + 520) = 0;\n  *(_BYTE *)(a1 + 564) = 0;\n  array_reset_data_strings(a1 + 536);\n  *(_QWORD *)(a1 + 432) = -1LL;\n  *(_WORD *)(a1 + 562) = 0;\n  v3 = *(_QWORD *)(a1 + 576);\n  if ( v3 )\n  {\n    free(*(void **)(v3 + 8));\n    free(*(void **)(a1 + 576));\n    *(_QWORD *)(a1 + 576) = 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x395a0L", 
            "funcEndAddr": "0x3964eL", 
            "funcName": "http_response_send_1xx"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_parse_headers(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 v3; // rbx\n  unsigned int v4; // eax\n  unsigned int v5; // ebp\n  bool v6; // al\n  unsigned __int16 v7; // r12\n  _BYTE *v8; // r14\n  __int64 result; // rax\n  signed int v10; // eax\n  __int64 v11; // r12\n  __int64 v12; // rax\n  _BYTE *v13; // r13\n  signed __int64 v14; // rbp\n  char **v15; // rax\n  int v16; // eax\n  char **v17; // rdx\n  int v18; // er11\n  unsigned int v19; // er10\n  char v20; // al\n  char *v21; // rbp\n  int v22; // ecx\n  signed int v23; // eax\n  int v24; // eax\n  __int64 v25; // rbp\n  signed int v26; // er12\n  signed int v27; // er13\n  signed __int64 v28; // rax\n  signed int v29; // eax\n  void *v30; // rax\n  int v31; // eax\n  signed __int64 v32; // rdx\n  char v33; // al\n  signed __int64 v34; // rax\n  int v35; // ecx\n  char v36; // dl\n  int v37; // ST28_4\n  unsigned int v38; // ST10_4\n  unsigned int v39; // ST08_4\n  __int64 v40; // rax\n  char v41; // al\n  int v42; // eax\n  char v43; // al\n  __int64 v44; // rax\n  __int64 (__fastcall *v45)(__int64, __int64); // rax\n  const char **v46; // rax\n  const char *v47; // r14\n  char **v48; // rbp\n  char v49; // al\n  char *v50; // rax\n  char *v51; // rbx\n  const char *v52; // r12\n  char v53; // al\n  signed __int64 v54; // rax\n  _QWORD *v55; // rax\n  __int64 v56; // r15\n  __int64 v57; // rax\n  int *v58; // rax\n  int *v59; // r13\n  __int64 v60; // rax\n  __int64 v61; // r10\n  __int64 v62; // rax\n  __int64 v63; // r12\n  __int64 v64; // rax\n  char v65; // dl\n  __int64 v66; // rax\n  unsigned __int64 v67; // rdx\n  signed __int64 v68; // rax\n  int v69; // eax\n  int v70; // eax\n  __int64 v71; // rax\n  int v72; // edx\n  char **endptr; // [rsp+8h] [rbp-40A0h]\n  unsigned int endptra; // [rsp+8h] [rbp-40A0h]\n  signed int v75; // [rsp+10h] [rbp-4098h]\n  __int64 v76; // [rsp+10h] [rbp-4098h]\n  __int64 v77; // [rsp+10h] [rbp-4098h]\n  __int64 v78; // [rsp+20h] [rbp-4088h]\n  unsigned int v79; // [rsp+28h] [rbp-4080h]\n  int v80; // [rsp+28h] [rbp-4080h]\n  const char **v81; // [rsp+28h] [rbp-4080h]\n  __int64 v82; // [rsp+30h] [rbp-4078h]\n  signed int v83; // [rsp+30h] [rbp-4078h]\n  unsigned int v84; // [rsp+3Ch] [rbp-406Ch]\n  char *v85; // [rsp+40h] [rbp-4068h]\n  const char *v86; // [rsp+58h] [rbp-4050h]\n  int v87; // [rsp+60h] [rbp-4048h]\n  unsigned __int16 v88; // [rsp+64h] [rbp-4044h]\n  unsigned __int64 v89; // [rsp+4068h] [rbp-40h]\n\n  v89 = __readfsqword(0x28u);\n  v82 = a3;\n  while ( 1 )\n  {\n    v87 = 1;\n    v88 = 0;\n    v3 = *(_DWORD *)(v82 + 8) - (unsigned int)(*(_DWORD *)(v82 + 8) != 0);\n    v4 = http_header_parse_hoff(*(void **)v82, v3, (unsigned __int16 *)&v87);\n    v5 = v4;\n    if ( v4 )\n      v6 = v4 > 0xFFFF;\n    else\n      v6 = (unsigned int)v3 > 0xFFFF;\n    if ( v6 )\n    {\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        1118LL,\n        (__int64)\"response headers too large for %s\",\n        *(_QWORD *)(a1 + 296));\n      *(_DWORD *)(a1 + 4) = 502;\n      *(_QWORD *)(a1 + 32) = 0LL;\n      result = 1LL;\n      goto LABEL_10;\n    }\n    v7 = v88;\n    if ( !v88 )\n    {\n      if ( !v5 )\n        goto LABEL_9;\n      v8 = *(_BYTE **)v82;\nLABEL_15:\n      v3 = (unsigned int)v3 - v5;\n      v84 = v3;\n      v85 = &v8[v5];\n      if ( !*(_DWORD *)(a2 + 8) )\n      {\n        *(_DWORD *)(a1 + 4) = 502;\n        *(_QWORD *)(a1 + 32) = 0LL;\n        goto LABEL_40;\n      }\n      goto LABEL_16;\n    }\n    v8 = *(_BYTE **)v82;\n    if ( v88 <= 0xBu || *(_DWORD *)v8 != 1347703880 || v8[4] != 47 )\n    {\n      if ( !memchr(*(const void **)v82, 58, v88 - 1) && (v7 > 2u || v7 != 1 && *v8 != 13) )\n      {\n        if ( *(_DWORD *)(a2 + 8) == 1 )\n        {\n          v3 = a1;\n          v72 = http_chunk_append_buffer(a1, v82);\n          result = 4LL;\n          if ( !v72 )\n          {\n            *(_DWORD *)(a1 + 4) = 200;\n            *(_BYTE *)(a1 + 561) = 1;\n            result = 0LL;\n          }\n        }\n        else\n        {\n          *(_DWORD *)(a1 + 4) = 502;\n          *(_QWORD *)(a1 + 32) = 0LL;\n          result = 1LL;\n        }\n        goto LABEL_10;\n      }\n      if ( !v5 )\n        goto LABEL_9;\n      goto LABEL_15;\n    }\n    if ( !v5 )\n      goto LABEL_9;\n    v3 = (unsigned int)v3 - v5;\n    v84 = v3;\n    v85 = &v8[v5];\n    v43 = v8[12];\n    if ( v43 == 13 || v43 == 10 )\n      v8[12] = 0;\n    if ( v8[5] != 49 && !*(_DWORD *)(a2 + 8) )\n      break;\n    if ( v8[6] != 46 )\n      break;\n    if ( (unsigned __int8)(v8[7] - 48) > 1u )\n      break;\n    if ( v8[8] != 32 )\n      break;\n    v70 = http_header_str_to_code(v8 + 9);\n    if ( (unsigned int)(v70 - 100) > 0x383 )\n      break;\n    *(_DWORD *)(a1 + 4) = v70;\n    *(_BYTE *)(a2 + 17) = 0;\n    v10 = 2;\nLABEL_17:\n    v11 = v10;\n    v75 = (unsigned __int16)v87;\n    if ( (unsigned __int16)v87 > v10 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v12 = *((unsigned __int16 *)&v87 + v11);\n          v13 = &v8[v12];\n          v14 = *((unsigned __int16 *)&v87 + v11 + 1) - 1LL;\n          v15 = (char **)memchr(&v8[v12], 58, v14 - v12);\n          if ( v15 )\n          {\n            endptr = v15;\n            if ( (_DWORD)v15 != (_DWORD)v13 )\n              break;\n          }\nLABEL_36:\n          if ( v75 <= (signed int)++v11 )\n            goto LABEL_37;\n        }\n        v79 = (_DWORD)v15 - (_DWORD)v13;\n        v16 = http_header_hkey_get(v13, (unsigned int)((_DWORD)v15 - (_DWORD)v13));\n        v17 = endptr;\n        v18 = v16;\n        v19 = v79;\n        while ( 1 )\n        {\n          v20 = *((_BYTE *)v17 + 1);\n          v3 = (unsigned __int64)v17 + 1;\n          if ( v20 != 32 && v20 != 9 )\n            break;\n          v17 = (char **)((char *)v17 + 1);\n        }\n        v21 = &v8[v14];\n        if ( (unsigned __int64)v21 > v3 && *(v21 - 1) == 13 )\n          --v21;\n        if ( !*(_DWORD *)(a2 + 12) || (v22 = *(_DWORD *)(a1 + 4)) != 0 && v22 != 200 )\n        {\n          switch ( v18 )\n          {\n            case 0:\n              v41 = v13[v79 - 1];\n              if ( v41 == 32 || v41 == 9 )\n                goto LABEL_36;\n              goto LABEL_33;\n            case 12:\n              v80 = v18;\n              endptra = v19;\n              if ( !*(_DWORD *)(a2 + 8) )\n                goto LABEL_36;\n              v42 = http_header_str_contains_token(v3, (signed int)v21 - (signed int)v3, (__int64)\"close\", 5u);\n              v19 = endptra;\n              v18 = v80;\n              if ( v42 )\n                *(_BYTE *)(a1 + 566) = 0;\n              goto LABEL_32;\n            case 14:\n              v32 = (signed __int64)v17 + 2;\n              if ( v20 == 43 )\n                v3 = v32;\n              if ( *(_BYTE *)(a1 + 563) )\n                goto LABEL_36;\n              if ( *(_BYTE *)(a1 + 529) & 0x40 )\n                goto LABEL_36;\n              v86 = v21;\n              if ( (unsigned __int64)v21 <= v3 )\n                goto LABEL_36;\n              v33 = *(v21 - 1);\n              if ( v33 != 32 && v33 != 9 )\n              {\n                v35 = (signed int)v21;\n              }\n              else\n              {\n                v34 = (signed __int64)(v21 - 1);\n                do\n                {\n                  v35 = v34;\n                  v86 = (const char *)v34;\n                  if ( v3 == v34 )\n                    goto LABEL_36;\n                  v36 = *(_BYTE *)(v34-- - 1);\n                }\n                while ( v36 == 32 || v36 == 9 );\n              }\n              v37 = v18;\n              v38 = v19;\n              v39 = v35 - v3;\n              v40 = li_restricted_strtoint64(v3, (unsigned int)(v35 - v3), &v86);\n              v19 = v38;\n              v18 = v37;\n              *(_QWORD *)(a1 + 432) = v40;\n              if ( v86 != (const char *)(v3 + v39) )\n                *(_QWORD *)(a1 + 432) = -1LL;\nLABEL_33:\n              if ( v21 != (char *)v3 )\n                http_header_response_insert(a1, v18, (__int64)v13, v19, (const void *)v3, (_DWORD)v21 - v3);\nLABEL_35:\n              v75 = (unsigned __int16)v87;\n              break;\n            case 28:\n              goto LABEL_36;\n            case 45:\n              if ( !*(_DWORD *)(a2 + 8) )\n                goto LABEL_33;\n              *v21 = 0;\n              v31 = http_header_str_to_code((char *)v17 + 1);\n              if ( (unsigned int)(v31 - 100) <= 0x383 )\n                goto LABEL_118;\n              *(_DWORD *)(a1 + 4) = 502;\n              *(_QWORD *)(a1 + 32) = 0LL;\n              v75 = (unsigned __int16)v87;\n              goto LABEL_36;\n            case 48:\n              if ( *(_BYTE *)(a1 + 529) & 0x40 )\n              {\n                *(_QWORD *)(a1 + 432) = -1LL;\n                http_header_response_unset(a1, 0xEuLL, (__int64)\"Content-Length\", 0xEu);\n              }\n              v3 = a1;\n              *(_BYTE *)(a1 + 563) = 1;\n              v30 = calloc(1uLL, 0x20uLL);\n              *(_QWORD *)(a1 + 576) = v30;\n              if ( !v30 )\n                ck_assert_failed((__int64)\"http-header-glue.c\", 999LL, (__int64)\"r->gw_dechunk\");\n              goto LABEL_35;\n            case 49:\n              if ( *(_DWORD *)(a2 + 8) > 1u )\n                goto LABEL_36;\nLABEL_32:\n              if ( *(_DWORD *)(a1 + 28) <= 1 )\n                goto LABEL_33;\n              goto LABEL_36;\n            default:\n              goto LABEL_33;\n          }\n          goto LABEL_36;\n        }\n        if ( v18 != 45 )\n        {\n          if ( !v18\n            && v79 > 9\n            && (*v13 & 0xDF) == 86\n            && (unsigned int)buffer_eq_icase_ssn((__int64)v13, (__int64)\"Variable-\", 9LL) )\n          {\n            http_header_env_append(a1, (__int64)(v13 + 9), v79 - 9, (const void *)v3, (_DWORD)v21 - v3);\n            v75 = (unsigned __int16)v87;\n          }\n          goto LABEL_36;\n        }\n        *v21 = 0;\n        v31 = http_header_str_to_code((char *)v17 + 1);\n        if ( (unsigned int)(v31 - 100) > 0x383 )\n        {\n          *(_DWORD *)(a1 + 4) = 502;\n          goto LABEL_40;\n        }\nLABEL_118:\n        *(_DWORD *)(a1 + 4) = v31;\n        *(_BYTE *)(a2 + 17) = 0;\n        v75 = (unsigned __int16)v87;\n        ++v11;\n      }\n      while ( (unsigned __int16)v87 > (signed int)v11 );\n    }\nLABEL_37:\n    v23 = *(_DWORD *)(a1 + 4);\n    if ( v23 )\n    {\n      if ( v23 > 199 )\n        goto LABEL_40;\n    }\n    else if ( *(_BYTE *)(a1 + 532) & 0x10 )\n    {\n      *(_DWORD *)(a1 + 4) = 302;\n      goto LABEL_40;\n    }\n    if ( !(unsigned int)sub_1C680(a1, v82, (signed int)v85 - *(_DWORD *)v82, v84) )\n      goto LABEL_40;\n  }\n  if ( *(_DWORD *)(a1 + 4) )\n  {\nLABEL_16:\n    v10 = 1;\n    goto LABEL_17;\n  }\n  v3 = a1;\n  log_error(*(_DWORD **)(a1 + 128), \"http-header-glue.c\", 874LL, (__int64)\"invalid HTTP status line: %s\", v8);\n  *(_DWORD *)(a1 + 4) = 502;\n  *(_QWORD *)(a1 + 32) = 0LL;\nLABEL_40:\n  *(_BYTE *)(a1 + 561) = 1;\n  if ( *(_DWORD *)(a2 + 12) )\n  {\n    v24 = *(_DWORD *)(a1 + 4);\n    if ( !v24 || v24 == 200 )\n      goto LABEL_9;\n  }\n  if ( !*(_QWORD *)(a1 + 32) )\n    goto LABEL_112;\n  if ( !*(_BYTE *)(a2 + 17) || (unsigned int)(*(_DWORD *)(a1 + 4) - 300) > 0x63 )\n  {\n    if ( *(_BYTE *)(a2 + 18) )\n      goto LABEL_47;\nLABEL_115:\n    if ( !v84 )\n      goto LABEL_116;\n    goto LABEL_166;\n  }\n  if ( v84 )\n  {\n    if ( !*(_BYTE *)(a2 + 18) )\n    {\nLABEL_166:\n      v67 = v84;\n      if ( *(_BYTE *)(a1 + 563) )\n      {\n        v69 = http_chunk_decode_append_mem(a1, v85, v84);\n      }\n      else\n      {\n        v68 = *(_QWORD *)(a1 + 432);\n        if ( v68 <= 0 )\n        {\n          if ( !v68 )\n            goto LABEL_116;\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 432) = v68 - v84;\n          if ( v68 - v84 <= 0 )\n          {\n            *(_BYTE *)(a1 + 560) = 1;\n            if ( v68 != v84 )\n            {\n              v67 = v68;\n              *(_QWORD *)(a1 + 432) = 0LL;\n            }\n          }\n        }\n        v69 = http_chunk_append_mem(a1, v85, v67);\n      }\n      if ( v69 )\n      {\n        result = 4LL;\n        goto LABEL_10;\n      }\nLABEL_116:\n      v45 = *(__int64 (__fastcall **)(__int64, __int64))(a2 + 48);\n      if ( v45 )\n      {\n        result = v45(a1, a2);\n        goto LABEL_10;\n      }\nLABEL_9:\n      result = 0LL;\n      goto LABEL_10;\n    }\n  }\n  else\n  {\n    result = http_cgi_local_redir(a1);\n    if ( (_DWORD)result )\n      goto LABEL_10;\n    if ( !*(_BYTE *)(a2 + 18) )\n      goto LABEL_116;\n  }\nLABEL_47:\n  if ( *(_DWORD *)(a2 + 8) != 2 )\n  {\n    v3 = http_header_response_get(a1, 0LL);\n    if ( !v3 )\n      goto LABEL_115;\n    goto LABEL_49;\n  }\n  v3 = a1;\n  v46 = (const char **)http_header_response_get(a1, 0LL);\n  v81 = v46;\n  if ( !v46 )\n  {\n    v3 = http_header_response_get(a1, 0LL);\n    if ( !v3 )\n    {\n      v3 = http_header_response_get(a1, 0LL);\n      if ( !v3 )\n        goto LABEL_115;\n    }\nLABEL_49:\n    v25 = *(_QWORD *)(a2 + 24);\n    v26 = *(_DWORD *)(a1 + 4);\n    if ( *(_BYTE *)(a1 + 529) & 0x40 )\n      http_header_response_unset(a1, 0xEuLL, (__int64)\"Content-Length\", 0xEu);\n    buffer_urldecode_path((_DWORD *)v3);\n    if ( !(unsigned int)buffer_is_valid_UTF8((char **)v3) )\n    {\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        440LL,\n        (__int64)\"X-Sendfile invalid UTF-8 after url-decode: %s\",\n        *(_QWORD *)v3);\n      if ( *(_DWORD *)(a1 + 4) <= 399 )\n        goto LABEL_228;\n      v44 = *(_QWORD *)(a1 + 32);\nLABEL_110:\n      *(_DWORD *)(v3 + 8) = 0;\n      if ( v44 )\n        goto LABEL_112;\n      goto LABEL_111;\n    }\n    buffer_path_simplify(v3);\n    if ( *(_BYTE *)(a1 + 156) )\n      buffer_to_lower(v3);\n    if ( *(_DWORD *)(v3 + 8) <= 1u )\n    {\n      *(_DWORD *)(a1 + 4) = 502;\n      if ( !v25 || !*(_DWORD *)(v25 + 16) )\n        goto LABEL_173;\n      v27 = 0;\n    }\n    else\n    {\n      if ( !v25 )\n        goto LABEL_106;\n      v27 = 1;\n      if ( !*(_DWORD *)(v25 + 16) )\n        goto LABEL_106;\n    }\n    if ( *(_BYTE *)(a1 + 156) )\n      v28 = array_match_value_prefix_nc((__int64 **)v25, v3);\n    else\n      v28 = array_match_value_prefix((__int64 **)v25, v3);\n    if ( !v28 )\n    {\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        466LL,\n        (__int64)\"X-Sendfile (%s) not under configured x-sendfile-docroot(s)\",\n        *(_QWORD *)v3);\n      *(_DWORD *)(a1 + 4) = 403;\n      goto LABEL_173;\n    }\n    if ( !v27 )\n    {\n      v29 = *(_DWORD *)(a1 + 4);\n      goto LABEL_107;\n    }\nLABEL_106:\n    http_response_send_file(a1, (const char **)v3, 0LL);\n    v29 = *(_DWORD *)(a1 + 4);\nLABEL_107:\n    if ( v29 <= 399 )\n    {\n      v44 = *(_QWORD *)(a1 + 32);\n      if ( !v26 || v26 == 200 )\n        goto LABEL_110;\nLABEL_175:\n      *(_DWORD *)(a1 + 4) = v26;\n      goto LABEL_110;\n    }\nLABEL_173:\n    if ( v26 <= 299 )\n    {\n      *(_QWORD *)(a1 + 32) = 0LL;\n      *(_DWORD *)(v3 + 8) = 0;\n      goto LABEL_111;\n    }\n    v44 = *(_QWORD *)(a1 + 32);\n    goto LABEL_175;\n  }\n  v47 = *v46;\n  v48 = *(char ***)(a1 + 568);\n  v83 = *(_DWORD *)(a1 + 4);\n  v78 = *(_QWORD *)(a2 + 24);\n  if ( *(_BYTE *)(a1 + 529) & 0x40 )\n    http_header_response_unset(a1, 0xEuLL, (__int64)\"Content-Length\", 0xEu);\n  v49 = *v47;\n  while ( v49 )\n  {\n    if ( v49 == 32 )\n    {\n      do\n        ++v47;\n      while ( *v47 == 32 );\n      if ( !*v47 )\n        break;\n    }\n    v50 = strchr(v47, 32);\n    v51 = v50;\n    if ( !v50 )\n    {\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        505LL,\n        (__int64)\"Couldn't find range after filename: %s\",\n        v47);\n      *(_DWORD *)(a1 + 4) = 502;\n      goto LABEL_200;\n    }\n    v52 = v50 + 1;\n    buffer_copy_string_len((__int64)v48, v47, v50 - v47);\n    v53 = v51[1];\n    v3 = (unsigned __int64)(v51 + 1);\n    if ( v53 & 0xDF )\n    {\n      do\n      {\n        if ( v53 == 44 )\n          break;\n        v53 = *(_BYTE *)++v3;\n      }\n      while ( *(_BYTE *)v3 & 0xDF );\n    }\n    buffer_urldecode_path(v48);\n    if ( !(unsigned int)buffer_is_valid_UTF8(v48) )\n    {\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        517LL,\n        (__int64)\"X-Sendfile2 invalid UTF-8 after url-decode: %s\",\n        *v48);\n      *(_DWORD *)(a1 + 4) = 502;\n      goto LABEL_200;\n    }\n    buffer_path_simplify((__int64)v48);\n    if ( *(_BYTE *)(a1 + 156) )\n      buffer_to_lower((__int64)v48);\n    if ( *((_DWORD *)v48 + 2) <= 1u )\n      goto LABEL_199;\n    if ( v78 && *(_DWORD *)(v78 + 16) )\n    {\n      v54 = *(_BYTE *)(a1 + 156) ? array_match_value_prefix_nc((__int64 **)v78, (__int64)v48) : array_match_value_prefix(\n                                                                                                  (__int64 **)v78,\n                                                                                                  (__int64)v48);\n      if ( !v54 )\n      {\n        v3 = a1;\n        log_error(\n          *(_DWORD **)(a1 + 128),\n          \"http-header-glue.c\",\n          535LL,\n          (__int64)\"X-Sendfile2 (%s) not under configured x-sendfile-docroot(s)\",\n          *v48);\n        *(_DWORD *)(a1 + 4) = 403;\n        goto LABEL_200;\n      }\n    }\n    v55 = stat_cache_get_entry_open((const char **)v48, *(unsigned __int8 *)(a1 + 154));\n    v56 = (__int64)v55;\n    if ( !v55 )\n    {\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        545LL,\n        (__int64)\"send-file error: couldn't get stat_cache entry for X-Sendfile2: %s\",\n        *v48);\n      *(_DWORD *)(a1 + 4) = 404;\n      goto LABEL_200;\n    }\n    if ( (v55[12] & 0xF000) != 0x8000 )\n    {\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        551LL,\n        (__int64)\"send-file error: wrong filetype for X-Sendfile2: %s\",\n        *v48);\n      *(_DWORD *)(a1 + 4) = 502;\nLABEL_200:\n      if ( v83 <= 299 )\n      {\n        *(_QWORD *)(a1 + 32) = 0LL;\n        *((_DWORD *)v81 + 2) = 0;\n        goto LABEL_111;\n      }\n      v71 = *(_QWORD *)(a1 + 32);\nLABEL_202:\n      *(_DWORD *)(a1 + 4) = v83;\n      goto LABEL_203;\n    }\n    v57 = v55[15];\n    v86 = 0LL;\n    v76 = v57;\n    v58 = __errno_location();\n    v59 = v58;\n    *v58 = 0;\n    v60 = strtoll(v52, (char **)&v86, 10);\n    v61 = v60;\n    if ( *v59 || v60 < 0 || (v62 = (__int64)v86, v52 == v86) || (v63 = (__int64)(v86 + 1), ++v86, *(_BYTE *)v62 != 45) )\n    {\nLABEL_222:\n      v3 = a1;\n      log_error(\n        *(_DWORD **)(a1 + 128),\n        \"http-header-glue.c\",\n        578LL,\n        (__int64)\"Couldn't decode range after filename: %s\",\n        v47);\n      *(_DWORD *)(a1 + 4) = 502;\n      goto LABEL_200;\n    }\n    if ( v63 == v3 )\n    {\n      v64 = v76 - 1;\n    }\n    else\n    {\n      v77 = v61;\n      v64 = strtoll((const char *)(v62 + 1), (char **)&v86, 10);\n      if ( *v59 )\n        goto LABEL_222;\n      if ( v64 < 0 )\n        goto LABEL_222;\n      if ( (const char *)v63 == v86 )\n        goto LABEL_222;\n      v61 = v77;\n      if ( v86 != (const char *)v3 )\n        goto LABEL_222;\n    }\n    while ( 1 )\n    {\n      v65 = *(_BYTE *)v3;\n      if ( *(_BYTE *)v3 != 32 )\n        break;\n      ++v3;\n    }\n    if ( v65 && v65 != 44 || (v66 = v64 - v61, v66 + 1 < 0) )\n    {\nLABEL_199:\n      *(_DWORD *)(a1 + 4) = 502;\n      goto LABEL_200;\n    }\n    if ( v66 != -1 )\n      http_chunk_append_file_ref_range(a1, v56, v61, v66 + 1);\n    v49 = *(_BYTE *)v3;\n    if ( *(_BYTE *)v3 == 44 )\n      v49 = *(_BYTE *)(v3++ + 1);\n    v47 = (const char *)v3;\n  }\n  if ( *(_DWORD *)(a1 + 4) > 399 )\n    goto LABEL_200;\n  v71 = *(_QWORD *)(a1 + 32);\n  if ( v83 && v83 != 200 )\n    goto LABEL_202;\nLABEL_203:\n  *((_DWORD *)v81 + 2) = 0;\n  if ( v71 )\n    goto LABEL_112;\nLABEL_111:\n  while ( 1 )\n  {\n    *(_BYTE *)(a1 + 561) = 0;\nLABEL_112:\n    result = 1LL;\nLABEL_10:\n    if ( __readfsqword(0x28u) == v89 )\n      break;\nLABEL_228:\n    *(_DWORD *)(a1 + 4) = 502;\n    *(_QWORD *)(a1 + 32) = 0LL;\n    *(_DWORD *)(v3 + 8) = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x39650L", 
            "funcEndAddr": "0x3a72dL", 
            "funcName": "http_response_parse_headers"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_response_read(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r12\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n  unsigned int v7; // er13\n  unsigned __int64 v8; // r15\n  unsigned int v9; // er14\n  __int16 v10; // ax\n  unsigned int v11; // er9\n  signed __int64 v12; // rdx\n  signed __int64 v13; // rax\n  __int64 v14; // rdx\n  signed __int64 v15; // rax\n  signed __int64 v16; // r14\n  __int64 (__fastcall *v17)(__int64, __int64, __int64, signed __int64); // r8\n  __int64 result; // rax\n  __int16 v19; // ax\n  int v20; // er10\n  __int64 v21; // rsi\n  bool v22; // zf\n  unsigned __int64 v23; // rsi\n  int v24; // edx\n  __int16 v25; // ax\n  __int64 v26; // rax\n  _QWORD *v27; // rdi\n  __int64 v28; // rcx\n  signed __int64 v29; // rax\n  unsigned int v30; // edx\n  signed __int64 v31; // ST10_8\n  int v32; // edx\n  unsigned int v33; // ST1C_4\n  int v34; // ST10_4\n  int v35; // eax\n  __int64 v36; // rax\n  int v37; // ebx\n  __int64 v38; // [rsp+8h] [rbp-60h]\n  unsigned int v39; // [rsp+24h] [rbp-44h]\n  unsigned __int64 v40; // [rsp+28h] [rbp-40h]\n\n  v4 = a2;\n  v5 = a3;\n  v6 = a1;\n  v7 = *(_DWORD *)(a4 + 16);\n  v38 = a4;\n  v40 = __readfsqword(0x28u);\n  while ( 1 )\n  {\n    v20 = *(_DWORD *)(v5 + 12);\n    v39 = 0;\n    v21 = *(unsigned int *)(v4 + 4);\n    if ( v20 )\n    {\n      v8 = v20 - (*(_DWORD *)(v5 + 8) | (unsigned int)(*(_DWORD *)(v5 + 8) == 0));\n      v9 = v20 - (*(_DWORD *)(v5 + 8) | (*(_DWORD *)(v5 + 8) == 0));\n      if ( fdevent_ioctl_fionread(v7) )\n      {\n        if ( (unsigned int)v8 <= 0x3FF )\n        {\n          v11 = 4095 - v8;\nLABEL_23:\n          v22 = (*(_BYTE *)(v6 + 150) & 2) == 0;\n          v39 = v11;\n          if ( v22 )\n          {\nLABEL_24:\n            v23 = v11;\n            if ( v11 < *(_DWORD *)v4 )\n            {\n              v23 = v11 + v8 - 1;\n              if ( !v9 )\n                v23 = v11;\n            }\n            goto LABEL_27;\n          }\nLABEL_6:\n          v12 = v11;\nLABEL_7:\n          v13 = *(_QWORD *)(v6 + 640) - *(_QWORD *)(v6 + 648);\n          if ( v13 + v12 > 61440 )\n          {\n            v14 = *(_QWORD *)(v6 + 48);\n            if ( !*(_BYTE *)(v14 + 841) )\n            {\n              v31 = *(_QWORD *)(v6 + 640) - *(_QWORD *)(v6 + 648);\n              fdevent_fdnode_event_clr(*(_QWORD *)(*(_QWORD *)(v14 + 912) + 24LL), v38, 1);\n              v13 = v31;\n            }\n            if ( v13 > 65534 )\n              goto LABEL_74;\n            v11 = 0xFFFF - v13;\n            v39 = 0xFFFF - v13;\n          }\nLABEL_12:\n          if ( v11 <= v9 )\n            goto LABEL_13;\n          goto LABEL_24;\n        }\n        v10 = *(_WORD *)(v6 + 150);\n        v11 = v39;\nLABEL_5:\n        if ( !(v10 & 2) )\n          goto LABEL_12;\n        goto LABEL_6;\n      }\n    }\n    else\n    {\n      if ( fdevent_ioctl_fionread(v7) )\n      {\n        v11 = 4095;\n        v9 = 0;\n        v8 = 0LL;\n        goto LABEL_23;\n      }\n      v9 = 0;\n      v8 = 0LL;\n    }\n    if ( !*(_BYTE *)(v4 + 16) )\n      goto LABEL_30;\n    v11 = v39;\n    if ( *(_QWORD *)(v6 + 432) >= (signed __int64)v39 )\n    {\n      if ( v39 > 0x8000 || v39 > 0x1FFF && (v26 = *(_QWORD *)(v6 + 632)) != 0 && *(_DWORD *)(v26 + 44) )\n      {\n        if ( *(_DWORD *)(v5 + 8) > 1u )\n        {\n          v33 = v39;\n          v34 = sub_389D0(v6, v5, 0);\n          chunk_buffer_yield(v5);\n          v11 = v33;\n          if ( v34 )\n            return 4LL;\n        }\n        v27 = (_QWORD *)(v6 + 624);\n        v28 = *(_QWORD *)(v6 + 128);\n        if ( *(_DWORD *)(v4 + 4) == 49152 )\n          v29 = chunkqueue_append_splice_sock_tempfile(v27, v7, v11, v28);\n        else\n          v29 = chunkqueue_append_splice_pipe_tempfile(v27, v7, v11, v28);\n        if ( v29 >= 0 )\n        {\n          v22 = *(_QWORD *)(v6 + 432) == v29;\n          *(_QWORD *)(v6 + 432) -= v29;\n          if ( v22 )\n            *(_BYTE *)(v6 + 560) = 1;\n          goto LABEL_57;\n        }\n        if ( v29 != -22 )\n          return 4LL;\nLABEL_30:\n        v11 = v39;\n        goto LABEL_31;\n      }\n    }\nLABEL_31:\n    v10 = *(_WORD *)(v6 + 150);\n    if ( v11 > v9 )\n    {\n      v24 = *(_DWORD *)(v5 + 8) - (*(_DWORD *)(v5 + 8) != 0);\n      if ( v11 + v24 > 0xFFF )\n      {\n        v30 = *(_DWORD *)v4;\n        if ( *(_DWORD *)v4 < v11 )\n        {\n          v39 = *(_DWORD *)v4;\n          v11 = v30;\n        }\n      }\n      else\n      {\n        v11 = 4095 - v24;\n        v39 = 4095 - v24;\n      }\n      if ( v11 > 0x2000 && !*(_BYTE *)(v6 + 561) )\n      {\n        v39 = 0x2000;\n        v11 = 0x2000;\n      }\n      goto LABEL_5;\n    }\n    if ( v11 )\n    {\n      v25 = *(_WORD *)(v6 + 150) & 2;\n    }\n    else\n    {\n      if ( !(*(_BYTE *)(v38 + 20) & 1) && v10 >= 0 )\n        return 0LL;\n      v25 = *(_WORD *)(v6 + 150) & 2;\n      if ( !v9 )\n      {\n        v39 = 1024;\n        v23 = 1024LL;\n        if ( !v25 )\n        {\nLABEL_27:\n          v8 = chunk_buffer_prepare_append(v5, v23);\n          goto LABEL_13;\n        }\n        v12 = 1024LL;\n        v11 = 1024;\n        goto LABEL_7;\n      }\n    }\n    if ( v25 )\n      goto LABEL_6;\nLABEL_13:\n    v15 = read(v7, (void *)(*(_QWORD *)v5 + *(_DWORD *)(v5 + 8) - (unsigned int)(*(_DWORD *)(v5 + 8) != 0)), v8);\n    v16 = v15;\n    if ( v15 < 0 )\n      break;\n    buffer_commit((__int64 *)v5, v15);\n    v17 = *(__int64 (__fastcall **)(__int64, __int64, __int64, signed __int64))(v4 + 40);\n    if ( v17 )\n    {\n      result = v17(v6, v4, v5, v16);\n      if ( (_DWORD)result )\n        return result;\nLABEL_16:\n      v19 = *(_WORD *)(v6 + 150) & 2;\n      goto LABEL_17;\n    }\n    if ( !v16 )\n    {\n      if ( *(_DWORD *)(v5 + 8) <= 1u )\n      {\n        chunk_buffer_yield(v5);\n        result = 1LL;\n      }\n      else\n      {\n        if ( *(_BYTE *)(v4 + 16) )\n        {\n          v37 = sub_389D0(v6, v5, 0);\n          chunk_buffer_yield(v5);\n          if ( v37 )\n            return 4LL;\n        }\n        result = 1LL;\n      }\n      return result;\n    }\n    if ( *(_BYTE *)(v6 + 561) )\n    {\n      v32 = 0;\n      if ( *(_BYTE *)(v4 + 16) && (v32 = 1, *(_BYTE *)(v6 + 150) & 1) )\n      {\n        if ( (unsigned int)sub_389D0(v6, v5, *(_BYTE *)(*(_QWORD *)(v6 + 48) + 841LL) == 0) )\n          return 4LL;\n      }\n      else if ( (unsigned int)sub_389D0(v6, v5, v32) )\n      {\n        return 4LL;\n      }\n      goto LABEL_16;\n    }\n    result = http_response_parse_headers(v6, v4, v5);\n    if ( (_DWORD)result )\n      return result;\n    v19 = *(_WORD *)(v6 + 150) & 2;\n    if ( !*(_BYTE *)(v6 + 561) )\n      goto LABEL_17;\n    v22 = *(_QWORD *)(v6 + 432) == 0LL;\n    *(_DWORD *)(v5 + 8) = 0;\n    if ( v22 )\n    {\n      *(_BYTE *)(v6 + 560) = 1;\nLABEL_17:\n      if ( !v19 )\n        goto LABEL_19;\n      goto LABEL_18;\n    }\n    if ( *(_BYTE *)(v6 + 563) )\n      goto LABEL_17;\n    if ( !v19 )\n    {\n      *(_BYTE *)(v4 + 16) = 1;\n      goto LABEL_19;\n    }\nLABEL_18:\n    if ( *(_QWORD *)(v6 + 640) - *(_QWORD *)(v6 + 648) > 61440LL )\n    {\n      v36 = *(_QWORD *)(v6 + 48);\n      if ( !*(_BYTE *)(v36 + 841) )\n        fdevent_fdnode_event_clr(*(_QWORD *)(*(_QWORD *)(v36 + 912) + 24LL), v38, 1);\nLABEL_57:\n      if ( *(_DWORD *)(v5 + 8) <= 1u )\n        chunk_buffer_yield(v5);\n      return *(_BYTE *)(v6 + 560) != 0;\n    }\nLABEL_19:\n    if ( *(_BYTE *)(v6 + 561) )\n      goto LABEL_57;\n  }\n  v35 = *__errno_location();\n  if ( v35 != 4 && v35 != 11 )\n  {\n    log_perror(\n      *(_DWORD **)(v6 + 128),\n      \"http-header-glue.c\",\n      1331LL,\n      (__int64)\"read() %d %d\",\n      *(unsigned int *)(*(_QWORD *)(v6 + 48) + 816LL),\n      v7,\n      &v39);\n    return 4LL;\n  }\nLABEL_74:\n  if ( *(_DWORD *)(v5 + 8) <= 1u )\n    chunk_buffer_yield(v5);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3a730L", 
            "funcEndAddr": "0x3ad86L", 
            "funcName": "http_response_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3AD90(void **a1, __int64 a2, __int64 a3, int a4)\n{\n  int v4; // er13\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n  void **v7; // r12\n  char *v8; // rax\n  signed __int64 v9; // rdx\n  __int64 v10; // rsi\n  char *v11; // rdi\n  unsigned __int8 v12; // cl\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = a2;\n  v6 = a3;\n  v7 = a1;\n  v8 = (char *)buffer_string_prepare_copy(a1, a3 + 5);\n  v9 = 0LL;\n  if ( v4 )\n  {\n    *(_DWORD *)v8 = 1347703880;\n    v8[4] = 95;\n    v9 = 5LL;\n  }\n  if ( v6 )\n  {\n    v10 = 0LL;\n    v11 = &v8[v9];\n    do\n    {\n      while ( 1 )\n      {\n        v12 = *(_BYTE *)(v5 + v10);\n        if ( (*(_BYTE *)(v5 + v10) | 0x20u) - 97 > 0x19 )\n          break;\n        v11[v10++] = v12 & 0xDF;\n        if ( v6 == v10 )\n          goto LABEL_10;\n      }\n      if ( (unsigned int)v12 - 48 >= 0xA )\n        v12 = 95;\n      v11[v10++] = v12;\n    }\n    while ( v6 != v10 );\nLABEL_10:\n    LODWORD(v9) = v6 + v9;\n  }\n  result = (unsigned int)v9;\n  *((_BYTE *)*v7 + (unsigned int)v9) = 0;\n  *((_DWORD *)v7 + 2) = v9 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x3ad90L", 
            "funcEndAddr": "0x3ae44L", 
            "funcName": "sub_3AD90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_cgi_local_redir(__int64 a1)\n{\n  signed __int64 v1; // rbp\n  signed __int64 result; // rax\n  _BYTE *v3; // r12\n  unsigned int v4; // er13\n  bool v5; // zf\n  bool v6; // sf\n  unsigned __int8 v7; // of\n  __int64 v8; // rax\n\n  v1 = http_header_response_get(a1, 0x24uLL);\n  result = 0LL;\n  if ( v1 )\n  {\n    v3 = *(_BYTE **)v1;\n    if ( **(_BYTE **)v1 == 47 )\n    {\n      v4 = *(_DWORD *)(a1 + 304) - (*(_DWORD *)(a1 + 304) != 0);\n      if ( strncmp(*(const char **)v1, *(const char **)(a1 + 296), v4) || (v3[v4] & 0xEF) != 47 && v3[v4] )\n      {\n        result = 0LL;\n        if ( *(_DWORD *)(a1 + 552) == 1 && (unsigned int)(*(_DWORD *)(a1 + 4) - 300) <= 0x63 )\n        {\n          v7 = __OFSUB__(*(_BYTE *)(a1 + 565) + 1, 5);\n          v5 = *(_BYTE *)(a1 + 565) == 4;\n          v6 = (char)((*(_BYTE *)(a1 + 565))++ - 4) < 0;\n          if ( (unsigned __int8)(v6 ^ v7) | v5 )\n          {\n            buffer_copy_string_len(\n              a1 + 456,\n              *(const void **)v1,\n              *(_DWORD *)(v1 + 8) - (unsigned int)(*(_DWORD *)(v1 + 8) != 0));\n            v8 = *(_QWORD *)(a1 + 416);\n            if ( v8 )\n            {\n              if ( v8 != *(_QWORD *)(a1 + 752) )\n                *(_BYTE *)(a1 + 566) = 0;\n              *(_QWORD *)(a1 + 416) = 0LL;\n              chunkqueue_reset(a1 + 736);\n            }\n            result = 2LL;\n            if ( (unsigned int)(*(_DWORD *)(a1 + 4) - 307) > 1 )\n              *(_DWORD *)(a1 + 24) = 0;\n          }\n          else\n          {\n            log_error(\n              *(_DWORD **)(a1 + 128),\n              \"http_cgi.c\",\n              58LL,\n              (__int64)\"too many internal loops while processing request: %s\",\n              *(_QWORD *)(a1 + 472));\n            *(_DWORD *)(a1 + 4) = 500;\n            *(_BYTE *)(a1 + 561) = 0;\n            result = 1LL;\n            *(_QWORD *)(a1 + 32) = 0LL;\n          }\n        }\n      }\n      else\n      {\n        result = 0LL;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3ae50L", 
            "funcEndAddr": "0x3afd6L", 
            "funcName": "http_cgi_local_redir"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_cgi_headers(__int64 a1, int *a2, __int64 (__fastcall *a3)(__int64, const char *, signed __int64, char *, char *), __int64 a4)\n{\n  int *v4; // r14\n  int v5; // er12\n  __int64 v6; // r13\n  __int64 (__fastcall *v7)(__int64, const char *, signed __int64, char *, char *); // rbx\n  __int64 v8; // rbp\n  int v9; // er10\n  char *v10; // rcx\n  int v11; // er12\n  __int64 v12; // rsi\n  __int64 v13; // rcx\n  unsigned int v14; // eax\n  __int64 v15; // r8\n  unsigned int v16; // edx\n  int v17; // er12\n  unsigned int v18; // eax\n  int v19; // er12\n  signed __int64 v20; // rax\n  __int64 v21; // rax\n  int v22; // er15\n  int v23; // er12\n  char **v24; // rax\n  int v25; // er12\n  const char *v26; // rax\n  const char *v27; // r14\n  size_t v28; // rax\n  int v29; // er12\n  char **v30; // rax\n  char *v31; // rcx\n  int v32; // er12\n  int v33; // er12\n  int v34; // er12\n  __int64 v35; // r14\n  signed __int64 v36; // r8\n  char *v37; // rcx\n  __int64 v38; // r15\n  __int64 v39; // rsi\n  unsigned __int64 v40; // rax\n  unsigned __int64 v41; // rdx\n  int v42; // er12\n  char *v43; // r10\n  size_t v44; // r8\n  char *v45; // ST10_8\n  int v46; // eax\n  __int64 v47; // rdx\n  int v48; // er12\n  char *v49; // r10\n  const char *v50; // r10\n  char *v51; // rax\n  signed __int64 v52; // rdx\n  signed __int64 v53; // r8\n  signed __int64 v54; // rdx\n  int v55; // er12\n  int v56; // er12\n  unsigned __int16 v57; // ax\n  char *v58; // rax\n  unsigned int v59; // er12\n  __int64 v60; // r15\n  int v61; // ST18_4\n  __int64 v62; // ST10_8\n  int v63; // eax\n  __int64 v64; // r11\n  int v65; // ecx\n  __int64 v66; // ST10_8\n  __int64 v67; // r11\n  int v68; // eax\n  __int64 v69; // ST10_8\n  unsigned __int64 v70; // r14\n  __int64 v71; // r15\n  int v72; // eax\n  __int64 result; // rax\n  __int64 v74; // r15\n  int v75; // eax\n  char *v76; // rcx\n  char *v77; // r8\n  int v78; // er12\n  char *v79; // rax\n  int v80; // edi\n  const char *v81; // rax\n  char *v82; // ST10_8\n  size_t v83; // rax\n  _QWORD *v84; // [rsp+8h] [rbp-110h]\n  const char *v85; // [rsp+10h] [rbp-108h]\n  __int64 v86; // [rsp+10h] [rbp-108h]\n  signed __int64 v87; // [rsp+18h] [rbp-100h]\n  __int64 v88; // [rsp+18h] [rbp-100h]\n  socklen_t len; // [rsp+2Ch] [rbp-ECh]\n  struct sockaddr addr; // [rsp+30h] [rbp-E8h]\n  char v91; // [rsp+A0h] [rbp-78h]\n  unsigned __int64 v92; // [rsp+D8h] [rbp-40h]\n\n  v4 = a2;\n  v5 = 0;\n  v6 = a1;\n  v7 = a3;\n  v8 = a4;\n  v9 = *a2;\n  v92 = __readfsqword(0x28u);\n  v84 = *(_QWORD **)(a1 + 568);\n  if ( !v9 )\n  {\n    v79 = li_itostrn(&v91, 0x2FuLL, *(_QWORD *)(a1 + 416));\n    v5 = v7(v8, \"CONTENT_LENGTH\", 14LL, &v91, v79);\n  }\n  v10 = \"\";\n  if ( *(_DWORD *)(a1 + 320) != (*(_DWORD *)(a1 + 320) != 0) )\n    v10 = *(char **)(a1 + 312);\n  v11 = (unsigned __int64)v7(\n                            v8,\n                            \"QUERY_STRING\",\n                            12LL,\n                            v10,\n                            (char *)(*(_DWORD *)(a1 + 320) - (unsigned int)(*(_DWORD *)(a1 + 320) != 0))) | v5;\n  v12 = *((_QWORD *)a2 + 2);\n  v13 = *(_QWORD *)(a1 + 472);\n  v14 = *(_DWORD *)(a1 + 480) - (*(_DWORD *)(a1 + 480) != 0);\n  v15 = v14;\n  if ( v12 )\n  {\n    v16 = *(_DWORD *)(v12 + 8) - (*(_DWORD *)(v12 + 8) != 0);\n    if ( *(_DWORD *)(v12 + 8) != (*(_DWORD *)(v12 + 8) != 0) && v14 >= v16 )\n    {\n      v74 = v16;\n      v88 = v14;\n      v86 = *(_QWORD *)(a1 + 472);\n      v75 = memcmp(*(const void **)(a1 + 472), *(const void **)v12, v16);\n      v13 = v86;\n      v15 = v88;\n      if ( !v75 && *(_BYTE *)(v86 + v74) == 47 )\n      {\n        v15 = v88 - v74;\n        v13 = v86 + v74;\n      }\n    }\n  }\n  v17 = (unsigned __int64)v7(v8, \"REQUEST_URI\", 11LL, (char *)v13, (char *)v15) | v11;\n  if ( !(unsigned int)buffer_is_equal(a1 + 456, a1 + 472) )\n    v17 |= v7(\n             v8,\n             \"REDIRECT_URI\",\n             12LL,\n             *(char **)(a1 + 456),\n             (char *)(*(_DWORD *)(a1 + 464) - (unsigned int)(*(_DWORD *)(a1 + 464) != 0)));\n  if ( !*(_DWORD *)(a1 + 616) )\n    v17 |= v7(v8, \"REDIRECT_STATUS\", 15LL, \"200\", (_BYTE *)&size + 3);\n  if ( !*v4 )\n  {\n    v17 |= v7(\n             v8,\n             \"SCRIPT_NAME\",\n             11LL,\n             *(char **)(a1 + 296),\n             (char *)(*(_DWORD *)(a1 + 304) - (unsigned int)(*(_DWORD *)(a1 + 304) != 0)));\n    v18 = *(_DWORD *)(a1 + 496);\n    if ( v18 > 1 )\n    {\n      v19 = (unsigned __int64)v7(v8, \"PATH_INFO\", 9LL, *(char **)(a1 + 488), (char *)(v18 - 1)) | v17;\n      v20 = *((_QWORD *)v4 + 1);\n      if ( !v20 )\n        v20 = a1 + 344;\n      buffer_copy_path_len2(\n        (__int64)v84,\n        *(const void **)v20,\n        *(_DWORD *)(v20 + 8) - (unsigned int)(*(_DWORD *)(v20 + 8) != 0),\n        *(_BYTE **)(a1 + 488),\n        *(_DWORD *)(a1 + 496) - (unsigned int)(*(_DWORD *)(a1 + 496) != 0));\n      v17 = (unsigned __int64)v7(\n                                v8,\n                                \"PATH_TRANSLATED\",\n                                15LL,\n                                (char *)*v84,\n                                (char *)(*((_DWORD *)v84 + 2) - (unsigned int)(*((_DWORD *)v84 + 2) != 0))) | v19;\n    }\n  }\n  v21 = *((_QWORD *)v4 + 1);\n  if ( v21 )\n  {\n    buffer_copy_path_len2(\n      (__int64)v84,\n      *(const void **)v21,\n      *(_DWORD *)(v21 + 8) - (unsigned int)(*(_DWORD *)(v21 + 8) != 0),\n      *(_BYTE **)(a1 + 296),\n      *(_DWORD *)(a1 + 304) - (unsigned int)(*(_DWORD *)(a1 + 304) != 0));\n    v22 = v7(\n            v8,\n            \"SCRIPT_FILENAME\",\n            15LL,\n            (char *)*v84,\n            (char *)(*((_DWORD *)v84 + 2) - (unsigned int)(*((_DWORD *)v84 + 2) != 0)));\n    v23 = v22 | (unsigned __int64)v7(\n                                    v8,\n                                    \"DOCUMENT_ROOT\",\n                                    13LL,\n                                    **((char ***)v4 + 1),\n                                    (char *)(*(_DWORD *)(*((_QWORD *)v4 + 1) + 8LL)\n                                           - (unsigned int)(*(_DWORD *)(*((_QWORD *)v4 + 1) + 8LL) != 0))) | v17;\n  }\n  else\n  {\n    v76 = *(char **)(a1 + 328);\n    v77 = (char *)(*(_DWORD *)(a1 + 336) - (unsigned int)(*(_DWORD *)(a1 + 336) != 0));\n    if ( v4[1] )\n    {\n      buffer_copy_path_len2(\n        (__int64)v84,\n        *(const void **)(a1 + 328),\n        *(_DWORD *)(a1 + 336) - (unsigned int)(*(_DWORD *)(a1 + 336) != 0),\n        *(_BYTE **)(a1 + 488),\n        *(_DWORD *)(a1 + 496) - (unsigned int)(*(_DWORD *)(a1 + 496) != 0));\n      v76 = (char *)*v84;\n      v77 = (char *)(*((_DWORD *)v84 + 2) - (unsigned int)(*((_DWORD *)v84 + 2) != 0));\n    }\n    v78 = (unsigned __int64)v7(v8, \"SCRIPT_FILENAME\", 15LL, v76, v77) | v17;\n    v23 = (unsigned __int64)v7(\n                              v8,\n                              \"DOCUMENT_ROOT\",\n                              13LL,\n                              *(char **)(a1 + 344),\n                              (char *)(*(_DWORD *)(a1 + 352) - (unsigned int)(*(_DWORD *)(a1 + 352) != 0))) | v78;\n  }\n  v24 = http_method_buf(*(_DWORD *)(a1 + 24));\n  v25 = (unsigned __int64)v7(\n                            v8,\n                            \"REQUEST_METHOD\",\n                            14LL,\n                            *v24,\n                            (char *)(*((_DWORD *)v24 + 2) - (unsigned int)(*((_DWORD *)v24 + 2) != 0))) | v23;\n  v26 = (const char *)get_http_version_name(*(_DWORD *)(a1 + 28));\n  v27 = v26;\n  if ( !v26 )\n    goto LABEL_72;\n  v28 = strlen(v26);\n  v29 = (unsigned __int64)v7(v8, \"SERVER_PROTOCOL\", 15LL, (char *)v27, (char *)v28) | v25;\n  v30 = *(char ***)(a1 + 120);\n  if ( v30 )\n    v31 = *v30;\n  else\n    v31 = \"\";\n  v32 = (unsigned __int64)((__int64 (__fastcall *)(__int64, const char *, signed __int64, char *))v7)(\n                            v8,\n                            \"SERVER_SOFTWARE\",\n                            15LL,\n                            v31) | v29;\n  v33 = (unsigned __int64)v7(v8, \"GATEWAY_INTERFACE\", 17LL, \"CGI/1.1\", &byte_7) | v32;\n  v34 = (unsigned __int64)v7(\n                            v8,\n                            \"REQUEST_SCHEME\",\n                            14LL,\n                            *(char **)(a1 + 264),\n                            (char *)(*(_DWORD *)(a1 + 272) - (unsigned int)(*(_DWORD *)(a1 + 272) != 0))) | v33;\n  if ( (unsigned int)buffer_eq_slen(a1 + 264, \"https\", 5uLL) )\n    v34 |= v7(v8, \"HTTPS\", 5LL, \"on\", (_BYTE *)&size + 2);\n  v35 = *(_QWORD *)(a1 + 48);\n  v36 = 1LL;\n  v37 = \"0\";\n  v38 = *(_QWORD *)(v35 + 1072);\n  v39 = *(_QWORD *)(v38 + 136);\n  v40 = *(_DWORD *)(v39 + 8) - (unsigned int)(*(_DWORD *)(v39 + 8) != 0);\n  v41 = *(unsigned __int8 *)(v38 + 117);\n  if ( v40 > v41 )\n  {\n    v37 = (char *)(*(_QWORD *)v39 + v41 + 1);\n    v36 = ~v41 + v40;\n  }\n  v42 = (unsigned __int64)v7(v8, \"SERVER_PORT\", 11LL, v37, (char *)v36) | v34;\n  if ( *(_WORD *)v38 == 2 || *(_WORD *)v38 == 10 )\n  {\n    if ( (unsigned int)sock_addr_is_addr_wildcard(v38) )\n    {\n      v80 = *(_DWORD *)(v35 + 816);\n      len = 112;\n      if ( getsockname(v80, &addr, &len) || (v81 = (const char *)sock_addr_inet_ntop(&addr, &v91, 47LL)) == 0LL )\n      {\n        v44 = 0LL;\n        v43 = \"\";\n      }\n      else\n      {\n        v82 = (char *)v81;\n        v83 = strlen(v81);\n        v43 = v82;\n        v44 = v83;\n      }\n    }\n    else\n    {\n      v44 = *(unsigned __int8 *)(v38 + 117);\n      v43 = **(char ***)(v38 + 136);\n    }\n  }\n  else\n  {\n    v43 = \"\";\n    v44 = 0LL;\n  }\n  v45 = v43;\n  v46 = v7(v8, \"SERVER_ADDR\", 11LL, v43, (char *)v44);\n  v47 = *(_QWORD *)(v6 + 448);\n  v48 = v46 | v42;\n  v49 = v45;\n  if ( *(_DWORD *)(v47 + 8) == (*(_DWORD *)(v47 + 8) != 0) )\n  {\n    v53 = 0LL;\n  }\n  else\n  {\n    v50 = *(const char **)v47;\n    v87 = *(_DWORD *)(v47 + 8) - (unsigned int)(*(_DWORD *)(v47 + 8) != 0);\n    if ( **(_BYTE **)v47 == 91 )\n    {\n      v85 = *(const char **)v47;\n      v51 = strstr(v50, \"]:\");\n      v52 = (signed __int64)(v51 + 1);\n    }\n    else\n    {\n      v85 = *(const char **)v47;\n      v51 = strchr(v50, 58);\n      v52 = (signed __int64)v51;\n    }\n    v49 = (char *)v85;\n    v53 = v87;\n    v54 = v52 - (_QWORD)v85;\n    if ( v51 )\n      v53 = v54;\n  }\n  v55 = (unsigned __int64)v7(v8, \"SERVER_NAME\", 11LL, v49, (char *)v53) | v48;\n  v56 = (unsigned __int64)v7(\n                            v8,\n                            \"REMOTE_ADDR\",\n                            11LL,\n                            *(char **)(v35 + 1056),\n                            (char *)(*(_DWORD *)(v35 + 1064) - (unsigned int)(*(_DWORD *)(v35 + 1064) != 0))) | v55;\n  v57 = sock_addr_get_port(v35 + 944);\n  v58 = li_utostrn(&v91, 0x2FuLL, v57);\n  v59 = (unsigned __int64)v7(v8, \"REMOTE_PORT\", 11LL, &v91, v58) | v56;\n  if ( *(_DWORD *)(v6 + 256) )\n  {\n    v60 = 0LL;\n    while ( 1 )\n    {\n      v64 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 8 * v60);\n      if ( *(_DWORD *)(v64 + 40) <= 1u )\n        goto LABEL_42;\n      v65 = *(_DWORD *)(v64 + 8);\n      if ( !v65 )\n        goto LABEL_42;\n      v68 = *(_DWORD *)(v64 + 28);\n      if ( v68 )\n        break;\n      v61 = *(_DWORD *)(v64 + 8);\n      v62 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 8 * v60);\n      v63 = buffer_eq_icase_slen(v64, (__int64)\"Proxy\", 5LL);\n      v64 = v62;\n      v65 = v61;\n      if ( !v63 )\n        goto LABEL_40;\nLABEL_42:\n      if ( *(unsigned int *)(v6 + 256) <= (unsigned __int64)++v60 )\n        goto LABEL_48;\n    }\n    if ( v68 == 18 )\n    {\n      v69 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 8 * v60);\n      buffer_copy_string_len((__int64)v84, \"CONTENT_TYPE\", 0xCuLL);\n      v67 = v69;\n    }\n    else\n    {\nLABEL_40:\n      v66 = v64;\n      sub_3AD90((void **)v84, *(_QWORD *)v64, (unsigned int)(v65 - 1), 1);\n      v67 = v66;\n    }\n    v59 |= v7(\n             v8,\n             (const char *)*v84,\n             *((_DWORD *)v84 + 2) - (unsigned int)(*((_DWORD *)v84 + 2) != 0),\n             *(char **)(v67 + 32),\n             (char *)(*(_DWORD *)(v67 + 40) - (unsigned int)(*(_DWORD *)(v67 + 40) != 0)));\n    goto LABEL_42;\n  }\nLABEL_48:\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)(v35 + 912) + 40LL))(v6);\n  if ( *(_DWORD *)(v6 + 408) )\n  {\n    v70 = 0LL;\n    do\n    {\n      while ( 1 )\n      {\n        v71 = *(_QWORD *)(*(_QWORD *)(v6 + 392) + 8 * v70);\n        if ( *(_DWORD *)(v71 + 40) )\n        {\n          v72 = *(_DWORD *)(v71 + 8);\n          if ( v72 )\n            break;\n        }\n        if ( *(unsigned int *)(v6 + 408) <= ++v70 )\n          goto LABEL_54;\n      }\n      sub_3AD90((void **)v84, *(_QWORD *)v71, (unsigned int)(v72 - 1), 0);\n      ++v70;\n      v59 |= v7(\n               v8,\n               (const char *)*v84,\n               *((_DWORD *)v84 + 2) - (unsigned int)(*((_DWORD *)v84 + 2) != 0),\n               *(char **)(v71 + 32),\n               (char *)(*(_DWORD *)(v71 + 40) - (unsigned int)(*(_DWORD *)(v71 + 40) != 0)));\n    }\n    while ( *(unsigned int *)(v6 + 408) > v70 );\n  }\nLABEL_54:\n  result = v59;\n  if ( __readfsqword(0x28u) != v92 )\nLABEL_72:\n    ck_assert_failed((__int64)\"http_cgi.c\", 227LL, (__int64)&off_4987E + 1);\n  return result;\n}\n", 
            "funcStartAddr": "0x3afe0L", 
            "funcEndAddr": "0x3b92fL", 
            "funcName": "http_cgi_headers"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall http_date_time_to_str(char *s, size_t maxsize, time_t a3)\n{\n  size_t result; // rax\n  time_t timer; // [rsp+8h] [rbp-80h]\n  struct tm tp; // [rsp+10h] [rbp-78h]\n  char format[16]; // [rsp+50h] [rbp-38h]\n  int v7; // [rsp+60h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+68h] [rbp-20h]\n\n  timer = a3;\n  v7 = 5524807;\n  v8 = __readfsqword(0x28u);\n  *(__m128i *)format = _mm_load_si128((const __m128i *)&xmmword_4B8B0);\n  if ( gmtime_r(&timer, &tp) )\n    result = strftime(s, maxsize, format, &tp);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x3b930L", 
            "funcEndAddr": "0x3b9b9L", 
            "funcName": "http_date_time_to_str"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall http_date_if_modified_since(_BYTE *a1, unsigned int a2, time_t a3)\n{\n  time_t v3; // rbp\n  _BYTE *v4; // rbx\n  char v5; // si\n  char v6; // cl\n  char v7; // di\n  int v8; // edx\n  const char *v9; // rax\n  char v10; // cl\n  char v11; // di\n  int v12; // edx\n  char *v13; // rax\n  __int64 v14; // rdx\n  unsigned int v15; // eax\n  int v16; // edx\n  bool v17; // zf\n  __int64 v18; // rax\n  unsigned int v19; // edx\n  __int64 v20; // rdx\n  unsigned int v21; // eax\n  __int64 v22; // rax\n  unsigned int v23; // edx\n  __int64 v24; // rcx\n  unsigned int v25; // edx\n  __int64 v26; // rdi\n  unsigned int v27; // esi\n  signed __int64 v28; // rbx\n  char v30; // cl\n  char v31; // si\n  char v32; // di\n  int v33; // edx\n  const char *v34; // rax\n  char v35; // dl\n  _BYTE *v36; // rax\n  __int64 v37; // rcx\n  unsigned int v38; // edx\n  char v39; // si\n  char v40; // r8\n  int v41; // ecx\n  char *v42; // rdx\n  __int64 v43; // rcx\n  unsigned int v44; // esi\n  int v45; // edx\n  __int64 v46; // rdx\n  unsigned int v47; // ecx\n  __int64 v48; // rcx\n  unsigned int v49; // edx\n  __int64 v50; // rcx\n  unsigned int v51; // edx\n  char v52; // si\n  char v53; // cl\n  char v54; // di\n  int v55; // edx\n  const char *v56; // rax\n  __int64 v57; // rdx\n  unsigned int v58; // eax\n  char v59; // cl\n  char v60; // di\n  int v61; // edx\n  char *v62; // rax\n  __int64 v63; // rcx\n  unsigned int v64; // edx\n  __int64 v65; // rdi\n  unsigned int v66; // esi\n  __int64 v67; // rdx\n  unsigned int v68; // eax\n  __int64 v69; // rdx\n  unsigned int v70; // eax\n  __int64 v71; // rdx\n  unsigned int v72; // eax\n  unsigned int v73; // [rsp+0h] [rbp-58h]\n  unsigned int v74; // [rsp+4h] [rbp-54h]\n  unsigned int v75; // [rsp+8h] [rbp-50h]\n  unsigned int v76; // [rsp+Ch] [rbp-4Ch]\n  int v77; // [rsp+10h] [rbp-48h]\n  int v78; // [rsp+14h] [rbp-44h]\n  __int64 v79; // [rsp+18h] [rbp-40h]\n  int v80; // [rsp+20h] [rbp-38h]\n  unsigned __int64 v81; // [rsp+38h] [rbp-20h]\n\n  v3 = a3;\n  v4 = a1;\n  v81 = __readfsqword(0x28u);\n  if ( a2 == 29 )\n  {\n    v52 = *a1;\n    v79 = 0LL;\n    v53 = 83;\n    v80 = 0;\n    v77 = 0;\n    v54 = 0;\n    v55 = 0;\n    v56 = \"SunMonTueWedThuFriSatJanFebMarAprMayJunJulAugSepOctNovDec\";\n    while ( v52 != v53 || v4[1] != v56[1] || v4[2] != v56[2] )\n    {\n      ++v55;\n      v56 += 3;\n      if ( v55 == 7 )\n        return 1LL;\n      v53 = *v56;\n      v54 = 1;\n    }\n    if ( v54 )\n      LODWORD(v79) = v55;\n    if ( v4[3] != 44 )\n      return 1LL;\n    if ( v4[4] != 32 )\n      return 1LL;\n    v57 = (char)v4[5];\n    if ( (unsigned int)(v57 - 48) > 9 )\n      return 1LL;\n    v58 = (char)v4[6] - 48;\n    if ( v58 > 9 )\n      return 1LL;\n    v17 = v4[7] == 32;\n    v76 = aTooManyInterna[v57 + 8] + v58;\n    if ( !v17 )\n      return 1LL;\n    v59 = 74;\n    v60 = 0;\n    v61 = 0;\n    v62 = &aTooManyInterna[87];\n    while ( v4[8] != v59 || v4[9] != v62[1] || v4[10] != v62[2] )\n    {\n      ++v61;\n      v62 += 3;\n      if ( v61 == 12 )\n        return 1LL;\n      v59 = *v62;\n      v60 = 1;\n    }\n    if ( v60 )\n      v77 = v61;\n    if ( v4[11] != 32 )\n      return 1LL;\n    v63 = (char)v4[12];\n    if ( (unsigned int)(v63 - 48) > 9 )\n      return 1LL;\n    v64 = (char)v4[13] - 48;\n    if ( v64 > 9 )\n      return 1LL;\n    v65 = (char)v4[14];\n    if ( (unsigned int)(v65 - 48) > 9 )\n      return 1LL;\n    v66 = (char)v4[15] - 48;\n    if ( v66 > 9 )\n      return 1LL;\n    v17 = v4[16] == 32;\n    v78 = v66 + aTooManyInterna[v65 + 8] + 100 * (v64 + aTooManyInterna[v63 + 8]) - 1900;\n    if ( !v17 )\n      return 1LL;\n    v67 = (char)v4[17];\n    if ( (unsigned int)(v67 - 48) > 9 )\n      return 1LL;\n    v68 = (char)v4[18] - 48;\n    if ( v68 > 9 )\n      return 1LL;\n    v17 = v4[19] == 58;\n    v75 = aTooManyInterna[v67 + 8] + v68;\n    if ( !v17 )\n      return 1LL;\n    v69 = (char)v4[20];\n    if ( (unsigned int)(v69 - 48) > 9 )\n      return 1LL;\n    v70 = (char)v4[21] - 48;\n    if ( v70 > 9 )\n      return 1LL;\n    v17 = v4[22] == 58;\n    v74 = aTooManyInterna[v69 + 8] + v70;\n    if ( !v17 )\n      return 1LL;\n    v71 = (char)v4[23];\n    if ( (unsigned int)(v71 - 48) > 9 )\n      return 1LL;\n    v72 = (char)v4[24] - 48;\n    if ( v72 > 9 )\n      return 1LL;\n    v17 = v4[25] == 32;\n    v73 = aTooManyInterna[v71 + 8] + v72;\n    if ( !v17 || v4[26] != 71 || v4[27] != 77 || v4[28] != 84 )\n      return 1LL;\n    v28 = (signed __int64)(v4 + 29);\n  }\n  else if ( a2 > 0x1D )\n  {\n    if ( qword_2589C8 + 59 < log_epoch_secs )\n    {\n      if ( gmtime_r(&log_epoch_secs, (struct tm *)&v73) )\n      {\n        qword_2589C8 = log_epoch_secs;\n        if ( v78 != dword_2589C4 )\n        {\n          dword_2589C4 = v78;\n          dword_2589C0 = 100 * (v78 / 100);\n        }\n      }\n    }\n    v79 = 0LL;\n    v80 = 0;\n    v30 = 83;\n    v77 = 0;\n    v31 = *a1;\n    v32 = 0;\n    v33 = 0;\n    v34 = \"SunMonTueWedThuFriSatJanFebMarAprMayJunJulAugSepOctNovDec\";\n    while ( v31 != v30 || v4[1] != v34[1] || v4[2] != v34[2] )\n    {\n      ++v33;\n      v34 += 3;\n      if ( v33 == 7 )\n        return 1LL;\n      v30 = *v34;\n      v32 = 1;\n    }\n    if ( v32 )\n      LODWORD(v79) = v33;\n    v35 = v4[3];\n    v36 = v4 + 3;\n    if ( v35 != 44 )\n    {\n      do\n      {\n        if ( !v35 )\n          break;\n        v35 = *++v36;\n      }\n      while ( *v36 != 44 );\n    }\n    if ( v35 != 44 )\n      return 1LL;\n    if ( v36[1] != 32 )\n      return 1LL;\n    v37 = (char)v36[2];\n    if ( (unsigned int)(v37 - 48) > 9 )\n      return 1LL;\n    v38 = (char)v36[3] - 48;\n    if ( v38 > 9 )\n      return 1LL;\n    v17 = v36[4] == 45;\n    v76 = aTooManyInterna[v37 + 8] + v38;\n    if ( !v17 )\n      return 1LL;\n    v39 = 74;\n    v40 = 0;\n    v41 = 0;\n    v42 = &aTooManyInterna[87];\n    while ( v36[5] != v39 || v36[6] != v42[1] || v36[7] != v42[2] )\n    {\n      ++v41;\n      v42 += 3;\n      if ( v41 == 12 )\n        return 1LL;\n      v39 = *v42;\n      v40 = 1;\n    }\n    if ( v40 )\n      v77 = v41;\n    if ( v36[8] != 45 )\n      return 1LL;\n    v43 = (char)v36[9];\n    if ( (unsigned int)(v43 - 48) > 9 )\n      return 1LL;\n    v44 = (char)v36[10] - 48;\n    if ( v44 > 9 )\n      return 1LL;\n    v45 = dword_2589C0 + v44 + aTooManyInterna[v43 + 8];\n    v78 = v45;\n    if ( v45 > dword_2589C4 + 50 )\n      v78 = v45 - 100;\n    if ( v36[11] != 32 )\n      return 1LL;\n    v46 = (char)v36[12];\n    if ( (unsigned int)(v46 - 48) > 9 )\n      return 1LL;\n    v47 = (char)v36[13] - 48;\n    if ( v47 > 9 )\n      return 1LL;\n    v17 = v36[14] == 58;\n    v75 = aTooManyInterna[v46 + 8] + v47;\n    if ( !v17 )\n      return 1LL;\n    v48 = (char)v36[15];\n    if ( (unsigned int)(v48 - 48) > 9 )\n      return 1LL;\n    v49 = (char)v36[16] - 48;\n    if ( v49 > 9 )\n      return 1LL;\n    v17 = v36[17] == 58;\n    v74 = aTooManyInterna[v48 + 8] + v49;\n    if ( !v17 )\n      return 1LL;\n    v50 = (char)v36[18];\n    if ( (unsigned int)(v50 - 48) > 9 )\n      return 1LL;\n    v51 = (char)v36[19] - 48;\n    if ( v51 > 9 )\n      return 1LL;\n    v17 = v36[20] == 32;\n    v73 = aTooManyInterna[v50 + 8] + v51;\n    if ( !v17 || v36[21] != 71 || v36[22] != 77 || v36[23] != 84 )\n      return 1LL;\n    v28 = (signed __int64)(v36 + 24);\n  }\n  else\n  {\n    v5 = *a1;\n    v79 = 0LL;\n    v6 = 83;\n    v80 = 0;\n    v77 = 0;\n    v7 = 0;\n    v8 = 0;\n    v9 = \"SunMonTueWedThuFriSatJanFebMarAprMayJunJulAugSepOctNovDec\";\n    while ( v5 != v6 || v4[1] != v9[1] || v4[2] != v9[2] )\n    {\n      ++v8;\n      v9 += 3;\n      if ( v8 == 7 )\n        return 1LL;\n      v6 = *v9;\n      v7 = 1;\n    }\n    if ( v7 )\n      LODWORD(v79) = v8;\n    if ( v4[3] != 32 )\n      return 1LL;\n    v10 = 74;\n    v11 = 0;\n    v12 = 0;\n    v13 = \"JanFebMarAprMayJunJulAugSepOctNovDec\";\n    while ( v4[4] != v10 || v4[5] != v13[1] || v4[6] != v13[2] )\n    {\n      ++v12;\n      v13 += 3;\n      if ( v12 == 12 )\n        return 1LL;\n      v10 = *v13;\n      v11 = 1;\n    }\n    if ( v11 )\n      v77 = v12;\n    if ( v4[7] != 32 )\n      return 1LL;\n    v14 = (char)v4[8];\n    if ( (_BYTE)v14 == 32 )\n    {\n      v15 = (char)v4[9] - 48;\n      if ( v15 > 9 )\n        return 1LL;\n      v16 = 0;\n    }\n    else\n    {\n      if ( (unsigned int)((char)v14 - 48) > 9 )\n        return 1LL;\n      v15 = (char)v4[9] - 48;\n      if ( v15 > 9 )\n        return 1LL;\n      v16 = aTooManyInterna[v14 + 8];\n    }\n    v17 = v4[10] == 32;\n    v76 = v16 + v15;\n    if ( !v17 )\n      return 1LL;\n    v18 = (char)v4[11];\n    if ( (unsigned int)(v18 - 48) > 9 )\n      return 1LL;\n    v19 = (char)v4[12] - 48;\n    if ( v19 > 9 )\n      return 1LL;\n    v17 = v4[13] == 58;\n    v75 = aTooManyInterna[v18 + 8] + v19;\n    if ( !v17 )\n      return 1LL;\n    v20 = (char)v4[14];\n    if ( (unsigned int)(v20 - 48) > 9 )\n      return 1LL;\n    v21 = (char)v4[15] - 48;\n    if ( v21 > 9 )\n      return 1LL;\n    v17 = v4[16] == 58;\n    v74 = aTooManyInterna[v20 + 8] + v21;\n    if ( !v17 )\n      return 1LL;\n    v22 = (char)v4[17];\n    if ( (unsigned int)(v22 - 48) > 9 )\n      return 1LL;\n    v23 = (char)v4[18] - 48;\n    if ( v23 > 9 )\n      return 1LL;\n    v17 = v4[19] == 32;\n    v73 = aTooManyInterna[v22 + 8] + v23;\n    if ( !v17 )\n      return 1LL;\n    v24 = (char)v4[20];\n    if ( (unsigned int)(v24 - 48) > 9 )\n      return 1LL;\n    v25 = (char)v4[21] - 48;\n    if ( v25 > 9 )\n      return 1LL;\n    v26 = (char)v4[22];\n    if ( (unsigned int)(v26 - 48) > 9 )\n      return 1LL;\n    v27 = (char)v4[23] - 48;\n    if ( v27 > 9 )\n      return 1LL;\n    v28 = (signed __int64)(v4 + 24);\n    v78 = v27 + aTooManyInterna[v26 + 8] + 100 * (v25 + aTooManyInterna[v24 + 8]) - 1900;\n  }\n  if ( v28 )\n    return timegm((struct tm *)&v73) < v3;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x3b9c0L", 
            "funcEndAddr": "0x3c194L", 
            "funcName": "http_date_if_modified_since"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C1A0(void *buf, int a2)\n{\n  void *v2; // r12\n  int v3; // eax\n  unsigned int v4; // edx\n  const char *v5; // rdi\n  __int64 v6; // rbx\n  int v7; // eax\n  int v8; // er14\n  ssize_t v10; // r13\n  int *v11; // [rsp+0h] [rbp-58h]\n  int v12; // [rsp+14h] [rbp-44h]\n  unsigned __int64 v13; // [rsp+18h] [rbp-40h]\n\n  v2 = buf;\n  v13 = __readfsqword(0x28u);\n  v3 = getentropy(buf, a2);\n  v4 = 1;\n  if ( v3 )\n  {\n    v5 = \"/dev/urandom\";\n    v6 = 0LL;\n    v11 = &v12;\n    while ( 1 )\n    {\n      v7 = fdevent_open_cloexec(v5, 1, 0, 0);\n      v8 = v7;\n      if ( v7 >= 0 )\n      {\n        v10 = 0LL;\n        if ( !ioctl(v7, 0x80045200uLL, v11, v11) && 8 * a2 <= v12 )\n          v10 = read(v8, v2, a2);\n        close(v8);\n        if ( a2 == v10 )\n          break;\n      }\n      ++v6;\n      if ( v6 == 2 )\n        return 0;\n      v5 = off_257840[v6];\n    }\n    v4 = 1;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x3c1a0L", 
            "funcEndAddr": "0x3c29eL", 
            "funcName": "sub_3C1A0"
        }, 
        {
            "decompiledFuncCode": "void li_rand_reseed()\n{\n  if ( dword_2589D8 )\n    sub_1C6D8();\n}\n", 
            "funcStartAddr": "0x3c2a0L", 
            "funcEndAddr": "0x3c2b1L", 
            "funcName": "li_rand_reseed"
        }, 
        {
            "decompiledFuncCode": "__int64 li_rand_pseudo()\n{\n  if ( !dword_2589D8 )\n    sub_1C6D8();\n  return random();\n}\n", 
            "funcStartAddr": "0x3c2c0L", 
            "funcEndAddr": "0x3c2dfL", 
            "funcName": "li_rand_pseudo"
        }, 
        {
            "decompiledFuncCode": "void __fastcall li_rand_pseudo_bytes(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n\n  if ( !dword_2589D8 )\n    sub_1C6D8();\n  if ( a2 > 0 )\n  {\n    v2 = a1;\n    do\n    {\n      if ( !dword_2589D8 )\n        sub_1C6D8();\n      *(_BYTE *)(++v2 - 1) = random();\n    }\n    while ( v2 != a1 + (unsigned int)(a2 - 1) + 1 );\n  }\n}\n", 
            "funcStartAddr": "0x3c2e0L", 
            "funcEndAddr": "0x3c340L", 
            "funcName": "li_rand_pseudo_bytes"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall li_rand_bytes(void *a1, int a2)\n{\n  __int64 result; // rax\n\n  result = sub_3C1A0(a1, a2);\n  if ( (_DWORD)result != 1 )\n  {\n    li_rand_pseudo_bytes((__int64)a1, a2);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3c340L", 
            "funcEndAddr": "0x3c368L", 
            "funcName": "li_rand_bytes"
        }, 
        {
            "decompiledFuncCode": "__int64 li_rand_cleanup()\n{\n  return ck_memclear_s(&word_2589D0, 6LL, 6LL);\n}\n", 
            "funcStartAddr": "0x3c370L", 
            "funcEndAddr": "0x3c386L", 
            "funcName": "li_rand_cleanup"
        }, 
        {
            "decompiledFuncCode": "unsigned __int8 *__fastcall sub_3C390(_BYTE *a1, __int64 a2)\n{\n  unsigned __int8 *v2; // rdx\n  unsigned __int8 *v3; // rdi\n  unsigned __int8 v4; // cl\n  unsigned __int8 *result; // rax\n\n  if ( a2 )\n  {\n    if ( (*a1 & 0x7F) == 127 || *a1 <= 0x20u )\n      return a1;\n    v2 = a1 + 1;\n    v3 = &a1[a2];\n    while ( v2 != v3 )\n    {\n      v4 = *v2;\n      result = v2++;\n      if ( (v4 & 0x7F) == 127 || v4 <= 0x20u )\n        return result;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3c390L", 
            "funcEndAddr": "0x3c3dbL", 
            "funcName": "sub_3C390"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_3C3E0(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r12\n  __int64 v4; // rax\n\n  v3 = a3;\n  v4 = http_header_request_set_ptr(a1, 27, (__int64)\"Host\", 4u);\n  *(_QWORD *)(a1 + 440) = v4;\n  return buffer_copy_string_len_lc(v4, a2, v3);\n}\n", 
            "funcStartAddr": "0x3c3e0L", 
            "funcEndAddr": "0x3c41cL", 
            "funcName": "sub_3C3E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C420(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, _BYTE *a5, unsigned __int64 a6)\n{\n  __int64 v6; // r13\n  int v7; // er12\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  int v10; // eax\n  __int64 result; // rax\n  unsigned int v12; // er14\n  int v13; // eax\n  int v14; // eax\n  _BYTE *v15; // rsi\n  signed __int64 v16; // rax\n  unsigned int v17; // edi\n  __int64 v18; // rdx\n  __int64 v19; // r15\n  _BYTE *v20; // ST00_8\n  int v21; // eax\n  __int64 v22; // rdi\n  unsigned int v23; // ST08_4\n  _BYTE *v24; // ST00_8\n  _BOOL4 v25; // eax\n  char v26; // si\n  _DWORD *v27; // rdi\n  const char *v28; // rcx\n  unsigned int v29; // edx\n  __int64 v30; // rax\n  __int64 v31; // [rsp+0h] [rbp-48h]\n  __int64 v32; // [rsp+0h] [rbp-48h]\n  int v33; // [rsp+8h] [rbp-40h]\n\n  v6 = a3;\n  v7 = a2;\n  v8 = a1;\n  v9 = a6;\n  switch ( a2 )\n  {\n    case 0xCu:\n      v12 = a4;\n      if ( a6 == 5 )\n      {\n        v20 = a5;\n        v21 = buffer_eq_icase_ssn((__int64)a5, (__int64)\"close\", 5LL);\n        a5 = v20;\n        LODWORD(a6) = 5;\n        if ( v21 )\n          goto LABEL_51;\n      }\n      v33 = a6;\n      v31 = (__int64)a5;\n      v13 = http_header_str_contains_token((__int64)a5, v9, (__int64)\"close\", 5u);\n      a5 = (_BYTE *)v31;\n      LODWORD(a6) = v33;\n      if ( v13 )\n      {\nLABEL_51:\n        *(_BYTE *)(a1 + 566) = 0;\n      }\n      else\n      {\n        v14 = http_header_str_contains_token(v31, v9, (__int64)\"keep-alive\", 0xAu);\n        a5 = (_BYTE *)v31;\n        LODWORD(a6) = v33;\n        if ( v14 )\n          *(_BYTE *)(a1 + 566) = 1;\n      }\n      goto LABEL_23;\n    case 0xEu:\n      if ( *(_BYTE *)(a1 + 233) & 0x40 )\n      {\n        v26 = *(_BYTE *)(a1 + 168);\n        v27 = *(_DWORD **)(a1 + 128);\n        v28 = \"duplicate Content-Length header -> 400\";\n        v29 = 400;\n        goto LABEL_34;\n      }\n      v15 = a5;\n      v16 = 0LL;\n      v17 = 0;\n      break;\n    case 0x12u:\n    case 0x1Cu:\n    case 0x1Eu:\n    case 0x1Fu:\n      v19 = *(_QWORD *)(a1 + 232);\n      goto LABEL_21;\n    case 0x1Bu:\n      v19 = *(_QWORD *)(a1 + 232);\n      if ( !(v19 & 0x8000000) )\n      {\n        if ( a6 <= 0x3FF )\n        {\n          sub_3C3E0(a1, (__int64)a5, a6);\n          goto LABEL_5;\n        }\n        v26 = *(_BYTE *)(a1 + 168);\n        v28 = \"uri-authority too long -> 400\";\n        v27 = *(_DWORD **)(a1 + 128);\n        v29 = 400;\n        goto LABEL_34;\n      }\n      v22 = *(_QWORD *)(a1 + 440);\n      if ( v22 )\n      {\n        v23 = a4;\n        v24 = a5;\n        v25 = buffer_eq_slen(v22, a5, a6);\n        a5 = v24;\n        a4 = v23;\n        if ( v25 )\n          goto LABEL_5;\n      }\nLABEL_21:\n      v12 = a4;\n      if ( !_bittest64(&v19, a2) )\n      {\n        LODWORD(a6) = v9;\n        goto LABEL_23;\n      }\n      v32 = (__int64)a5;\n      v30 = http_header_request_get(v8, a2);\n      if ( !v30 || !(unsigned int)buffer_eq_icase_slen(v30, v32, v9) )\n      {\n        switch ( a2 )\n        {\n          case 0x12u:\n            v28 = \"duplicate Content-Type header -> 400\";\n            goto LABEL_38;\n          case 0x1Bu:\n            v28 = \"duplicate Host header -> 400\";\n            goto LABEL_38;\n          case 0x1Cu:\n            v28 = \"duplicate HTTP2-Settings header -> 400\";\n            goto LABEL_38;\n          case 0x1Eu:\n            v28 = \"duplicate If-Modified-Since header -> 400\";\n            goto LABEL_38;\n          case 0x1Fu:\n            goto LABEL_5;\n          default:\n            v28 = \"duplicate header -> 400\";\n            break;\n        }\n        goto LABEL_38;\n      }\n      goto LABEL_5;\n    case 0x30u:\n      v10 = *(_DWORD *)(a1 + 28);\n      if ( v10 == 1 )\n      {\n        if ( (unsigned int)buffer_eq_icase_ss((__int64)a5, a6, (__int64)\"chunked\", 7LL) )\n        {\n          *(_QWORD *)(a1 + 416) = -1LL;\n          goto LABEL_5;\n        }\n        v26 = *(_BYTE *)(a1 + 168);\n        v27 = *(_DWORD **)(a1 + 128);\n        v28 = 0LL;\n        v29 = 501;\n      }\n      else\n      {\n        v28 = \"HTTP/2 with Transfer-Encoding is invalid -> 400\";\n        if ( !v10 )\n          v28 = \"HTTP/1.0 with Transfer-Encoding (bad HTTP/1.0 proxy?) -> 400\";\nLABEL_38:\n        v26 = *(_BYTE *)(v8 + 168);\n        v27 = *(_DWORD **)(v8 + 128);\n        v29 = 400;\n      }\n      goto LABEL_34;\n    default:\n      v12 = a4;\n      goto LABEL_23;\n  }\n  while ( 1 )\n  {\n    LOBYTE(v18) = *v15 - 48;\n    if ( v16 > 922337203685477580LL )\n      break;\n    if ( (unsigned __int8)v18 > 9u )\n      break;\n    v18 = (unsigned __int8)v18;\n    v16 *= 10LL;\n    if ( v16 > 0x7FFFFFFFFFFFFFFFLL - (unsigned __int8)v18 )\n      break;\n    ++v17;\n    v16 += v18;\n    ++v15;\n    if ( (unsigned int)a6 <= v17 )\n    {\n      v15 = &a5[v17];\n      break;\n    }\n  }\n  if ( v15 == &a5[a6] )\n  {\n    v12 = a4;\n    if ( !*(_QWORD *)(v8 + 416) )\n      *(_QWORD *)(v8 + 416) = v16;\nLABEL_23:\n    http_header_request_append(v8, v7, v6, v12, a5, a6);\nLABEL_5:\n    result = 0LL;\n  }\n  else\n  {\n    v26 = *(_BYTE *)(v8 + 168);\n    v27 = *(_DWORD **)(v8 + 128);\n    v28 = \"invalid Content-Length header -> 400\";\n    v29 = 400;\nLABEL_34:\n    result = sub_1C7C5(v27, v26, v29, (__int64)v28);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3c420L", 
            "funcEndAddr": "0x3c7d9L", 
            "funcName": "sub_3C420"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_request_host_normalize(_DWORD *a1, int a2)\n{\n  const char *v2; // rbx\n  int v3; // er14\n  unsigned int v4; // eax\n  size_t v5; // r15\n  void *v6; // rbp\n  __int64 v7; // r14\n  const char *v8; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rsi\n  unsigned int v12; // ebp\n  size_t v13; // r14\n  char *v14; // r13\n  char *v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rax\n  int v18; // eax\n  char *v19; // kr00_8\n  unsigned __int64 v20; // rbx\n  size_t v21; // r8\n  size_t v22; // r13\n  void *s; // ST08_8\n  int v24; // eax\n  int v25; // [rsp+4h] [rbp-114h]\n  char *endptr; // [rsp+18h] [rbp-100h]\n  char v27; // [rsp+20h] [rbp-F8h]\n  char v28[72]; // [rsp+90h] [rbp-88h]\n  unsigned __int64 v29; // [rsp+D8h] [rbp-40h]\n\n  v2 = *(const char **)a1;\n  v29 = __readfsqword(0x28u);\n  v25 = a2;\n  v3 = *v2;\n  v4 = a1[2] - (a1[2] != 0);\n  v5 = v4;\n  if ( *v2 == 91 )\n  {\n    v12 = a1[2] - (a1[2] != 0);\n    v13 = v4 - 1LL;\n    v14 = (char *)&v2[v13];\n    v15 = strchr(v2 + 1, 37);\n    if ( v12 <= 2 )\n      return 0xFFFFFFFFLL;\n    v16 = v2 + 1;\n    if ( *v14 == 93 )\n    {\n      v7 = 0LL;\n    }\n    else\n    {\n      v17 = memchr(v2 + 1, 93, v13);\n      v14 = (char *)v17;\n      if ( !v17 || *((_BYTE *)v17 + 1) != 58 || (_BYTE *)v17 - v2 == 1 )\n        return 0xFFFFFFFFLL;\n      v7 = 0LL;\n      v16 = v2 + 1;\n      if ( *((_BYTE *)v17 + 2) )\n      {\n        v7 = strtol((const char *)v17 + 2, &endptr, 0);\n        if ( (unsigned __int64)(v7 - 1) > 0xFFFE || *endptr )\n          return 0xFFFFFFFFLL;\n        v2 = *(const char **)a1;\n        v16 = (_BYTE *)(*(_QWORD *)a1 + 1LL);\n      }\n    }\n    if ( v15 )\n    {\n      if ( n != v15 - v16 )\n      {\n        *v14 = 0;\nLABEL_25:\n        *v15 = 0;\n        v18 = sock_addr_inet_pton(&v27, *(_QWORD *)a1 + 1LL, 10LL, 0LL);\n        *v15 = 37;\n        *v14 = 93;\n        if ( v18 != 1 )\n          return 0xFFFFFFFFLL;\n        sock_addr_inet_ntop(&v27, v28, 62LL);\n        v19 = &v28[strlen(v28)];\n        v20 = v19 - v28;\n        if ( v14 < v15 )\n          return 0xFFFFFFFFLL;\n        v21 = v14 - v15;\n        v22 = v14 - v15 + v20;\n        if ( v22 > 0x3D )\n          return 0xFFFFFFFFLL;\n        if ( v20 <= 0x2D )\n        {\n          s = (void *)v21;\n          n = v19 - v28;\n          __memcpy_chk(&unk_2589E0, v28, v20, 56LL);\n          v21 = (size_t)s;\n        }\n        memcpy(v19, v15, v21);\n        goto LABEL_31;\n      }\n    }\n    else if ( n != v14 - v16 )\n    {\n      *v14 = 0;\n      goto LABEL_45;\n    }\n    if ( !memcmp(&unk_2589E0, v16, n) )\n    {\n      v2[(_DWORD)v14 - (_DWORD)v2 + 1] = 0;\n      a1[2] = (_DWORD)v14 - (_DWORD)v2 + 2;\n      goto LABEL_8;\n    }\n    *v14 = 0;\n    if ( v15 )\n      goto LABEL_25;\nLABEL_45:\n    v24 = sock_addr_inet_pton(&v27, *(_QWORD *)a1 + 1LL, 10LL, 0LL);\n    *v14 = 93;\n    if ( v24 != 1 )\n      return 0xFFFFFFFFLL;\n    sock_addr_inet_ntop(&v27, v28, 62LL);\n    v22 = strlen(v28);\nLABEL_31:\n    *(_BYTE *)(*(_QWORD *)a1 + 1LL) = 0;\n    a1[2] = 2;\n    buffer_append_str2((__int64)a1, v28, v22, \"]\", 1uLL);\n    goto LABEL_8;\n  }\n  v6 = memchr(v2, 58, v4);\n  if ( !v6 )\n  {\n    if ( (unsigned int)(v3 - 48) > 9 )\n      return 0LL;\n    v7 = 0LL;\n    goto LABEL_6;\n  }\n  if ( (_BYTE)v3 != 58 )\n  {\n    v7 = 0LL;\n    v8 = v2;\n    if ( !*((_BYTE *)v6 + 1) )\n      goto LABEL_5;\n    v7 = strtol((const char *)v6 + 1, &endptr, 0);\n    if ( (unsigned __int64)(v7 - 1) <= 0xFFFE && !*endptr )\n    {\n      v8 = *(const char **)a1;\nLABEL_5:\n      v5 = (_BYTE *)v6 - v2;\n      v8[(_DWORD)v6 - (_DWORD)v2] = 0;\n      a1[2] = (_DWORD)v6 - (_DWORD)v2 + 1;\n      if ( (unsigned int)(*v2 - 48) <= 9 )\n      {\nLABEL_6:\n        if ( (qword_258A30 != v5 || memcmp(v2, &unk_258A20, v5))\n          && (unsigned int)sock_addr_inet_pton(&v27, v2, 2LL, 0LL) == 1 )\n        {\n          sock_addr_inet_ntop_copy_buffer(a1, &v27);\n          v10 = a1[2] - (unsigned int)(a1[2] != 0);\n          if ( (unsigned int)v10 <= 0xF )\n          {\n            v11 = *(_QWORD *)a1;\n            qword_258A30 = a1[2] - (unsigned int)(a1[2] != 0);\n            __memcpy_chk(&unk_258A20, v11, v10, 24LL);\n          }\n        }\n      }\nLABEL_8:\n      if ( v7 )\n      {\n        if ( v25 != v7 )\n        {\n          buffer_append_string_len((__int64)a1, \":\", 1uLL);\n          buffer_append_int((__int64)a1, v7);\n        }\n      }\n      return 0LL;\n    }\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x3c7e0L", 
            "funcEndAddr": "0x3ccbfL", 
            "funcName": "http_request_host_normalize"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall http_request_host_policy(_DWORD *a1, char a2, int a3)\n{\n  char v3; // r12\n  _DWORD *v4; // rbp\n  int v5; // er13\n  _BYTE *v6; // r14\n  char *v7; // rdx\n  char v8; // cl\n  _BOOL8 result; // rax\n  char *v10; // rax\n  char v11; // cl\n  char v12; // bl\n  unsigned int v13; // er15\n  void *v14; // rax\n  unsigned int v15; // edx\n  int v16; // ecx\n  _BYTE *v17; // rdi\n  __int64 v18; // rax\n  int v19; // er9\n  signed int v20; // edi\n  signed int v21; // er8\n  int v22; // esi\n  unsigned int v23; // ecx\n  char *v24; // rax\n  int v25; // esi\n  char v26; // cl\n  __int64 v27; // rbx\n  _BYTE *v28; // rdx\n  int v29; // ST0C_4\n  unsigned int v30; // edx\n\n  v3 = a2;\n  v4 = a1;\n  v5 = a3;\n  v6 = *(_BYTE **)a1;\n  if ( !(a2 & 2) )\n  {\n    if ( a1[2] == (a1[2] != 0) )\n      goto LABEL_17;\n    if ( *v6 && *v6 != 10 )\n    {\n      v7 = v6 + 1;\n      while ( &v6[a1[2] - (a1[2] != 0)] != v7 )\n      {\n        v8 = *v7++;\n        if ( v8 == 10 || !v8 )\n          return 1LL;\n      }\n      goto LABEL_17;\n    }\n    return 1LL;\n  }\n  v12 = *v6;\n  if ( *v6 != 91 )\n  {\n    v13 = a1[2] - (a1[2] != 0);\n    v14 = memchr(*(const void **)a1, 58, v13);\n    v15 = (_DWORD)v14 - (_DWORD)v6;\n    if ( !v14 )\n      v15 = v13;\n    if ( v15 )\n    {\n      v16 = v15 - 1;\n      v17 = &v6[v15 - 1];\n      if ( *v17 != 46 )\n      {\nLABEL_24:\n        v18 = 0LL;\n        v19 = 0;\n        v20 = 1;\n        v21 = 1;\n        v22 = 0;\n        while ( 1 )\n        {\n          ++v22;\n          if ( (unsigned int)(v12 - 48) <= 9 )\n          {\n            v23 = v18 + 1;\n          }\n          else if ( (unsigned int)((char)(v12 | 0x20) - 97) <= 0x19 )\n          {\n            v23 = v18 + 1;\n            v20 = 0;\n          }\n          else if ( v12 == 45 && (_DWORD)v18 )\n          {\n            v23 = v18 + 1;\n            v20 = 0;\n          }\n          else\n          {\n            if ( v12 != 46 )\n              return 1LL;\n            if ( v22 == 1 )\n              return 1LL;\n            v23 = v18 + 1;\n            if ( v6[v18 + 1] == 45 )\n              return 1LL;\n            v21 &= v20;\n            ++v19;\n            v20 = 1;\n            v22 = 0;\n          }\n          ++v18;\n          if ( v15 <= v23 )\n            break;\n          v12 = v6[v18];\n        }\n        if ( v22 && (!v20 || v19 == 3 && v21) )\n        {\n          v10 = &v6[v15];\n          goto LABEL_15;\n        }\n        return 1LL;\n      }\n      if ( v15 != 1 )\n      {\n        v27 = v13 - 1;\n        v28 = v6;\n        if ( v14 )\n        {\n          v29 = v16;\n          memmove(v17, v14, (unsigned int)(v27 - v16));\n          v28 = *(_BYTE **)v4;\n          v16 = v29;\n        }\n        v28[v27] = 0;\n        v4[2] = v13;\n        v15 = v16;\n        v12 = *v6;\n        goto LABEL_24;\n      }\n    }\n    return 1LL;\n  }\n  v24 = v6 + 1;\n  v25 = 0;\n  while ( 1 )\n  {\n    v26 = *v24;\n    if ( (unsigned int)(*v24 - 48) <= 9 || (unsigned int)((char)(v26 | 0x20) - 97) <= 5 || v26 == 46 )\n      goto LABEL_41;\n    if ( v26 != 58 )\n      break;\n    if ( ++v25 > 7 )\n      return 1LL;\nLABEL_41:\n    ++v24;\n  }\n  if ( v26 != 93 || v24 - v6 == 1 )\n    return 1LL;\n  v10 = v24 + 1;\nLABEL_15:\n  v11 = *v10;\n  if ( *v10 == 58 )\n  {\n    v11 = v10[1];\n    if ( v11 )\n      goto LABEL_52;\n    v30 = (_DWORD)v10 - *(unsigned __int64 *)v4;\n    *(_BYTE *)(*(_QWORD *)v4 + v30) = 0;\n    v4[2] = v30 + 1;\n    do\n    {\n      v11 = v10[1];\nLABEL_52:\n      ++v10;\n    }\n    while ( (unsigned int)(v11 - 48) <= 9 );\n  }\n  if ( v11 )\n    return 1LL;\nLABEL_17:\n  if ( v3 & 4 )\n    result = (unsigned int)http_request_host_normalize(v4, v5) != 0;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x3ccc0L", 
            "funcEndAddr": "0x3cf8fL", 
            "funcName": "http_request_host_policy"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3CF90(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  int v3; // ebp\n  _DWORD *v4; // rdi\n  __int64 v5; // rax\n  char v7; // si\n  _DWORD *v8; // rdi\n  const char *v9; // rcx\n\n  v2 = a1;\n  v3 = *(_DWORD *)(a1 + 88);\n  v4 = *(_DWORD **)(a1 + 440);\n  if ( !v4 )\n  {\n    buffer_copy_string_len(v2 + 280, \"\", 0LL);\n    if ( *(_DWORD *)(v2 + 28) > 0 )\n    {\n      v7 = *(_BYTE *)(v2 + 168);\n      v8 = *(_DWORD **)(v2 + 128);\n      v9 = \"HTTP/1.1 but Host missing -> 400\";\n      return sub_1C7C5(v8, v7, 0x190u, (__int64)v9);\n    }\n    goto LABEL_4;\n  }\n  if ( (unsigned int)http_request_host_policy(v4, v3, a2) )\n  {\n    v7 = *(_BYTE *)(v2 + 168);\n    v8 = *(_DWORD **)(v2 + 128);\n    v9 = \"Invalid Hostname -> 400\";\n    return sub_1C7C5(v8, v7, 0x190u, (__int64)v9);\n  }\n  buffer_copy_string_len(\n    v2 + 280,\n    **(const void ***)(v2 + 440),\n    *(_DWORD *)(*(_QWORD *)(v2 + 440) + 8LL) - (unsigned int)(*(_DWORD *)(*(_QWORD *)(v2 + 440) + 8LL) != 0));\n  if ( *(_DWORD *)(v2 + 28) != 1 )\n  {\nLABEL_4:\n    if ( *(_QWORD *)(v2 + 232) & 0x2000010000000LL )\n    {\n      v7 = *(_BYTE *)(v2 + 168);\n      v8 = *(_DWORD **)(v2 + 128);\n      v9 = \"invalid hop-by-hop header w/o HTTP/1.1 -> 400\";\n      return sub_1C7C5(v8, v7, 0x190u, (__int64)v9);\n    }\n  }\n  v5 = *(_QWORD *)(v2 + 416);\n  if ( !v5 )\n  {\n    if ( *(_DWORD *)(v2 + 24) == 2 && !(*(_BYTE *)(v2 + 233) & 0x40) )\n      return sub_1C7C5(\n               *(_DWORD **)(v2 + 128),\n               *(_BYTE *)(v2 + 168),\n               0x19Bu,\n               (__int64)\"POST-request, but content-length missing -> 411\");\n    return 0LL;\n  }\n  if ( v5 == -1 && *(_BYTE *)(v2 + 233) & 0x40 )\n  {\n    if ( v3 & 1 )\n    {\n      v7 = *(_BYTE *)(v2 + 168);\n      v8 = *(_DWORD **)(v2 + 128);\n      v9 = \"invalid Transfer-Encoding + Content-Length -> 400\";\n      return sub_1C7C5(v8, v7, 0x190u, (__int64)v9);\n    }\n    http_header_request_unset(v2, 0xEuLL, (__int64)\"Content-Length\", 0xEu);\n  }\n  if ( *(_DWORD *)(v2 + 24) > 1 || v3 & 0x8000 )\n    return 0LL;\n  v7 = *(_BYTE *)(v2 + 168);\n  v8 = *(_DWORD **)(v2 + 128);\n  v9 = \"GET/HEAD with content-length -> 400\";\n  return sub_1C7C5(v8, v7, 0x190u, (__int64)v9);\n}\n", 
            "funcStartAddr": "0x3cf90L", 
            "funcEndAddr": "0x3d14aL", 
            "funcName": "sub_3CF90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall li_restricted_strtoint64(_BYTE *a1, int a2, _QWORD *a3)\n{\n  __int64 v3; // rcx\n  _BYTE *v4; // r8\n  signed __int64 result; // rax\n  signed __int64 v6; // r9\n  _BYTE *v7; // rdi\n\n  if ( a2 && (LOBYTE(v3) = *a1 - 48, (unsigned __int8)v3 <= 9u) )\n  {\n    v4 = a1 + 1;\n    v3 = (unsigned __int8)v3;\n    result = 0LL;\n    v6 = (signed __int64)&a1[a2 - 1 + 1];\n    do\n    {\n      result += v3;\n      v7 = v4;\n      if ( (_BYTE *)v6 == v4 )\n        break;\n      LOBYTE(v3) = *v4 - 48;\n      if ( result > 922337203685477580LL )\n        break;\n      if ( (unsigned __int8)v3 > 9u )\n        break;\n      v3 = (unsigned __int8)v3;\n      ++v4;\n      result *= 10LL;\n    }\n    while ( 0x7FFFFFFFFFFFFFFFLL - (unsigned __int8)v3 >= result );\n    *a3 = v7;\n  }\n  else\n  {\n    result = 0LL;\n    *a3 = a1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3d150L", 
            "funcEndAddr": "0x3d1ceL", 
            "funcName": "li_restricted_strtoint64"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_request_validate_pseudohdrs(__int64 a1, int a2, char a3)\n{\n  int v3; // eax\n  char v4; // bp\n  unsigned int v5; // edx\n  _BYTE *v6; // rsi\n  __int64 v7; // rsi\n  unsigned __int8 *v8; // rax\n  unsigned __int8 *v10; // rcx\n  unsigned __int8 v11; // dl\n  unsigned __int8 *v12; // rax\n  unsigned __int8 *v13; // rcx\n  __int64 v14; // rax\n  char v15; // si\n  _DWORD *v16; // rdi\n  const char *v17; // rcx\n\n  v3 = *(_DWORD *)(a1 + 24);\n  if ( v3 == -1 )\n    return sub_1C7C5(\n             *(_DWORD **)(a1 + 128),\n             *(_BYTE *)(a1 + 168),\n             0x190u,\n             (__int64)\"missing pseudo-header method -> 400\");\n  v4 = a3;\n  if ( v3 != 5 )\n  {\n    if ( a2 )\n    {\n      v5 = *(_DWORD *)(a1 + 464);\n      if ( v5 <= 1 )\n      {\n        v15 = *(_BYTE *)(a1 + 168);\n        v17 = \"missing pseudo-header path -> 400\";\n        v16 = *(_DWORD **)(a1 + 128);\n      }\n      else\n      {\n        v6 = *(_BYTE **)(a1 + 456);\n        if ( *v6 == 47 || *v6 == 42 && !v6[1] && v3 == 6 )\n          goto LABEL_9;\n        v15 = *(_BYTE *)(a1 + 168);\n        v16 = *(_DWORD **)(a1 + 128);\n        v17 = \"invalid pseudo-header path -> 400\";\n      }\n    }\n    else\n    {\n      v15 = *(_BYTE *)(a1 + 168);\n      v17 = \"missing pseudo-header scheme -> 400\";\n      v16 = *(_DWORD **)(a1 + 128);\n    }\n    return sub_1C7C5(v16, v15, 0x190u, (__int64)v17);\n  }\n  v14 = *(_QWORD *)(a1 + 440);\n  if ( !v14 )\n  {\n    v15 = *(_BYTE *)(a1 + 168);\n    v17 = \"missing pseudo-header authority -> 400\";\n    v16 = *(_DWORD **)(a1 + 128);\n    return sub_1C7C5(v16, v15, 0x190u, (__int64)v17);\n  }\n  if ( *(_DWORD *)(a1 + 464) > 1u || a2 )\n  {\n    v15 = *(_BYTE *)(a1 + 168);\n    v16 = *(_DWORD **)(a1 + 128);\n    v17 = \"invalid pseudo-header with CONNECT -> 400\";\n    return sub_1C7C5(v16, v15, 0x190u, (__int64)v17);\n  }\n  buffer_copy_string_len(\n    a1 + 456,\n    *(const void **)v14,\n    *(_DWORD *)(v14 + 8) - (unsigned int)(*(_DWORD *)(v14 + 8) != 0));\n  v5 = *(_DWORD *)(a1 + 464);\n  v6 = *(_BYTE **)(a1 + 456);\nLABEL_9:\n  buffer_copy_string_len(a1 + 472, v6, v5 - (v5 != 0));\n  v7 = *(_DWORD *)(a1 + 464) - (unsigned int)(*(_DWORD *)(a1 + 464) != 0);\n  if ( v4 & 1 )\n  {\n    if ( v4 & 0x40 )\n      return 0LL;\n    v8 = sub_3C390(*(_BYTE **)(a1 + 456), v7);\n    if ( !v8 )\n      return 0LL;\n    v11 = *v8;\n  }\n  else\n  {\n    v10 = *(unsigned __int8 **)(a1 + 456);\n    if ( *(_DWORD *)(a1 + 464) == (*(_DWORD *)(a1 + 464) != 0) )\n      return 0LL;\n    v11 = *v10;\n    if ( *v10 && v11 != 10 )\n    {\n      v12 = v10 + 1;\n      v13 = &v10[(unsigned int)v7];\n      while ( v13 != v12 )\n      {\n        v11 = *v12++;\n        if ( v11 == 10 || !v11 )\n          return sub_1C75B(a1, v11, (__int64)\"invalid character in URI -> 400\");\n      }\n      return 0LL;\n    }\n  }\n  return sub_1C75B(a1, v11, (__int64)\"invalid character in URI -> 400\");\n}\n", 
            "funcStartAddr": "0x3d1d0L", 
            "funcEndAddr": "0x3d3cdL", 
            "funcName": "http_request_validate_pseudohdrs"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall http_request_parse_header(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // er12\n  __int64 v3; // r14\n  char *v4; // r15\n  unsigned int v5; // er13\n  unsigned int v6; // eax\n  __int64 v7; // rbx\n  bool v8; // cf\n  bool v9; // zf\n  __int64 v10; // rbp\n  char v11; // al\n  char v12; // dl\n  unsigned __int64 v13; // r9\n  unsigned __int8 *v14; // rax\n  unsigned __int8 *v15; // rdi\n  int v16; // ecx\n  unsigned __int8 *v17; // rsi\n  char v18; // si\n  signed __int64 result; // rax\n  unsigned __int8 v20; // dl\n  char v21; // al\n  int v22; // eax\n  char v23; // si\n  _DWORD *v24; // rdi\n  const char *v25; // rcx\n  unsigned int v26; // edx\n  int v27; // er12\n  char v28; // di\n  char *v29; // rax\n  int v30; // edx\n  __int64 v31; // rsi\n  unsigned __int64 v32; // ST08_8\n  int v33; // eax\n  int v34; // eax\n  unsigned __int64 v35; // ST08_8\n  char v36; // al\n\n  v2 = *(_DWORD *)(a2 + 16);\n  v3 = *(_QWORD *)a2;\n  v4 = *(char **)(a2 + 8);\n  v5 = *(_DWORD *)(a2 + 20);\n  if ( !v2 )\n  {\n    v23 = *(_BYTE *)(a1 + 168);\n    v25 = \"invalid header key -> 400\";\n    v24 = *(_DWORD **)(a1 + 128);\n    goto LABEL_51;\n  }\n  v6 = *(_DWORD *)(a2 + 24) + v2 + v5 + 4;\n  v7 = a2;\n  v8 = v6 < *(_DWORD *)(a2 + 32);\n  v9 = v6 == *(_DWORD *)(a2 + 32);\n  v10 = a1;\n  *(_DWORD *)(a2 + 24) = v6;\n  if ( !v8 && !v9 )\n  {\n    log_error(*(_DWORD **)(a1 + 128), \"request.c\", 604LL, (__int64)\"oversized request header -> 431\");\n    return 431LL;\n  }\n  v11 = *(_BYTE *)v3;\n  if ( *(_BYTE *)(a2 + 30) )\n  {\n    if ( v11 != 58 )\n      return 0LL;\n    v23 = *(_BYTE *)(a1 + 168);\n    v24 = *(_DWORD **)(a1 + 128);\n    v25 = \"invalid pseudo-header in trailers -> 400\";\nLABEL_51:\n    v26 = 400;\n    return sub_1C7C5(v24, v23, v26, (__int64)v25);\n  }\n  v12 = *(_BYTE *)(a2 + 28);\n  if ( v11 == 58 )\n  {\n    if ( v12 )\n    {\n      if ( !v5 )\n      {\n        v23 = *(_BYTE *)(a1 + 168);\n        v25 = \"invalid header value -> 400\";\n        v24 = *(_DWORD **)(a1 + 128);\n        goto LABEL_51;\n      }\n      v21 = *(_BYTE *)(a2 + 31);\n      if ( v21 != -1 )\n      {\n        switch ( v21 + 8 )\n        {\n          case 0:\n          case 1:\n            goto LABEL_32;\n          case 2:\n          case 3:\n            goto LABEL_48;\n          case 4:\n          case 5:\n            goto LABEL_42;\n          case 6:\n            goto LABEL_37;\n          default:\n            goto LABEL_55;\n        }\n        goto LABEL_55;\n      }\n      v27 = v2 - 1;\n      if ( v27 == 6 )\n      {\n        if ( *(_DWORD *)(v3 + 1) == 1752458605 && *(_WORD *)(v3 + 5) == 25711 )\n        {\n          *(_BYTE *)(a2 + 31) = -3;\nLABEL_42:\n          if ( *(_DWORD *)(a1 + 24) == -1 )\n          {\n            v22 = get_http_method_key(v4, v5);\n            *(_DWORD *)(a1 + 24) = v22;\n            if ( v22 < 0 )\n            {\n              v23 = *(_BYTE *)(a1 + 168);\n              v24 = *(_DWORD **)(a1 + 128);\n              v25 = \"unknown http-method -> 501\";\n              v26 = 501;\n              return sub_1C7C5(v24, v23, v26, (__int64)v25);\n            }\n            return 0LL;\n          }\n          goto LABEL_56;\n        }\n        if ( *(_DWORD *)(v3 + 1) == 1701340019 && *(_WORD *)(v3 + 5) == 25965 )\n        {\n          *(_BYTE *)(a2 + 31) = -7;\nLABEL_32:\n          if ( !*(_BYTE *)(a2 + 29) )\n          {\n            *(_BYTE *)(a2 + 29) = 1;\n            return 0LL;\n          }\n          goto LABEL_56;\n        }\n      }\n      else if ( v27 == 9 )\n      {\n        if ( *(_QWORD *)(v3 + 1) == 8388361603773658465LL && *(_BYTE *)(v3 + 9) == 121 )\n        {\n          *(_BYTE *)(a2 + 31) = -2;\nLABEL_37:\n          if ( !*(_QWORD *)(a1 + 440) )\n          {\n            if ( v5 <= 0x3FF )\n            {\n              sub_3C3E0(a1, (__int64)v4, v5);\n              return 0LL;\n            }\n            v23 = *(_BYTE *)(a1 + 168);\n            v24 = *(_DWORD **)(a1 + 128);\n            v25 = \"invalid pseudo-header authority too long -> 400\";\n            goto LABEL_51;\n          }\n          goto LABEL_56;\n        }\n      }\n      else if ( v27 == 4 && *(_DWORD *)(v3 + 1) == 1752457584 )\n      {\n        *(_BYTE *)(a2 + 31) = -5;\nLABEL_48:\n        if ( *(_DWORD *)(a1 + 464) <= 1u )\n        {\n          buffer_copy_string_len(a1 + 456, v4, v5);\n          return 0LL;\n        }\nLABEL_56:\n        v23 = *(_BYTE *)(a1 + 168);\n        v24 = *(_DWORD **)(a1 + 128);\n        v25 = \"repeated pseudo-header -> 400\";\n        goto LABEL_51;\n      }\n    }\nLABEL_55:\n    v23 = *(_BYTE *)(a1 + 168);\n    v24 = *(_DWORD **)(a1 + 128);\n    v25 = \"invalid pseudo-header -> 400\";\n    goto LABEL_51;\n  }\n  if ( v12 )\n  {\n    *(_BYTE *)(a2 + 28) = 0;\n    result = http_request_validate_pseudohdrs(a1, *(unsigned __int8 *)(a2 + 29), *(_DWORD *)(a2 + 36));\n    if ( (_DWORD)result )\n      return result;\n  }\n  if ( !v5 )\n    return 0LL;\n  v13 = v5;\n  v14 = (unsigned __int8 *)v4;\n  v15 = (unsigned __int8 *)&v4[v5];\n  v16 = *(_DWORD *)(a2 + 36) & 1;\n  if ( v16 )\n  {\n    do\n    {\n      v20 = *v14;\n      v17 = v14;\n      if ( *v14 > 0x1Fu )\n      {\n        if ( v20 == 127 )\n          return sub_1C75B(v10, *v17, (__int64)\"invalid character in header -> 400\");\n      }\n      else if ( v20 != 9 )\n      {\n        return sub_1C75B(v10, *v17, (__int64)\"invalid character in header -> 400\");\n      }\n      ++v14;\n    }\n    while ( v15 != v14 );\nLABEL_11:\n    v18 = *(_BYTE *)(v7 + 31);\n    if ( v18 == -1 )\n    {\n      v28 = *(_BYTE *)v3;\n      if ( (unsigned __int8)(*(_BYTE *)v3 - 97) > 0x19u && v28 != 45 )\n      {\n        v31 = v3;\n        v30 = 0;\nLABEL_63:\n        if ( (unsigned int)(v28 - 65) <= 0x19 )\n          return 400LL;\n        v34 = sub_1C7F3(v10, v31, v2 - v30, v16);\n        v13 = v5;\n        if ( v34 )\n          return 400LL;\n      }\n      else\n      {\n        v29 = (char *)(v3 + 1);\n        v30 = 0;\n        while ( v2 != ++v30 )\n        {\n          v28 = *v29;\n          v31 = (__int64)v29++;\n          if ( (unsigned __int8)(v28 - 97) > 0x19u && v28 != 45 )\n            goto LABEL_63;\n        }\n      }\n      v35 = v13;\n      v36 = http_header_hkey_get_lc((char *)v3, v2);\n      v13 = v35;\n      v18 = v36;\n      *(_BYTE *)(v7 + 31) = v36;\n    }\n    if ( v18 != 47 )\n      return sub_3C420(v10, v18, v3, v2, v4, v13);\n    v32 = v13;\n    v33 = buffer_eq_icase_ss((__int64)v4, v13, (__int64)\"trailers\", 8LL);\n    v13 = v32;\n    if ( v33 )\n      return sub_3C420(v10, v18, v3, v2, v4, v13);\n    v23 = *(_BYTE *)(v10 + 168);\n    v24 = *(_DWORD **)(v10 + 128);\n    v25 = \"invalid TE header value with HTTP/2 -> 400\";\n    goto LABEL_51;\n  }\n  while ( 1 )\n  {\n    v17 = v14;\n    if ( !*v14 || *v14 == 10 )\n      return sub_1C75B(v10, *v17, (__int64)\"invalid character in header -> 400\");\n    if ( v15 == ++v14 )\n      goto LABEL_11;\n  }\n}\n", 
            "funcStartAddr": "0x3d3d0L", 
            "funcEndAddr": "0x3d892L", 
            "funcName": "http_request_parse_header"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall http_request_parse_target(__int64 a1, int a2)\n{\n  int v2; // eax\n  int v3; // edx\n  _BYTE *v4; // r12\n  unsigned int v5; // ebp\n  size_t v6; // r13\n  _BYTE *v7; // rax\n  char *v8; // rax\n  unsigned int v9; // er13\n  int v11; // eax\n  _BYTE *v12; // rsi\n  char v13; // si\n  _DWORD *v14; // rdi\n  const char *v15; // rcx\n\n  buffer_copy_string_len(a1 + 264, \"https\", (a2 == 443) + 4LL);\n  v2 = *(_DWORD *)(a1 + 24);\n  if ( v2 == 5 )\n  {\n    v12 = *(_BYTE **)(a1 + 456);\nLABEL_16:\n    buffer_copy_string_len(a1 + 296, v12, *(_DWORD *)(a1 + 464) - (unsigned int)(*(_DWORD *)(a1 + 464) != 0));\n    *(_DWORD *)(a1 + 320) = 0;\n    return 0LL;\n  }\n  if ( v2 == 6 )\n  {\n    v12 = *(_BYTE **)(a1 + 456);\n    if ( *v12 == 42 && !v12[1] )\n      goto LABEL_16;\n  }\n  v3 = *(_DWORD *)(a1 + 88);\n  if ( !(v3 & 8) )\n  {\n    v4 = *(_BYTE **)(a1 + 456);\n    v5 = *(_DWORD *)(a1 + 464) - (*(_DWORD *)(a1 + 464) != 0);\n    v6 = v5;\n    v7 = memchr(*(const void **)(a1 + 456), 35, v5);\n    if ( v7 )\n    {\n      v6 = v7 - v4;\n      v4[(unsigned int)v6] = 0;\n      v4 = *(_BYTE **)(a1 + 456);\n      *(_DWORD *)(a1 + 464) = v6 + 1;\n      v5 = v6 + 1 - ((_DWORD)v6 != -1);\n    }\n    v8 = (char *)memchr(v4, 63, v6);\n    goto LABEL_7;\n  }\n  v11 = burl_normalize(a1 + 456, *(_QWORD *)(a1 + 568), v3);\n  if ( v11 != -2 )\n  {\n    v4 = *(_BYTE **)(a1 + 456);\n    v5 = *(_DWORD *)(a1 + 464) - (*(_DWORD *)(a1 + 464) != 0);\n    if ( v11 == -1 )\n      goto LABEL_13;\n    v8 = &v4[v11];\nLABEL_7:\n    if ( v8 )\n    {\n      v9 = (_DWORD)v8 - (_DWORD)v4;\n      buffer_copy_string_len(a1 + 312, v8 + 1, v5 - 1 - ((_DWORD)v8 - (_DWORD)v4));\nLABEL_9:\n      buffer_copy_string_len(a1 + 296, v4, v9);\n      buffer_urldecode_path((_DWORD *)(a1 + 296));\n      buffer_path_simplify(a1 + 296);\n      if ( **(_BYTE **)(a1 + 296) == 47 )\n        return 0LL;\n      v13 = *(_BYTE *)(a1 + 168);\n      v14 = *(_DWORD **)(a1 + 128);\n      v15 = \"uri-path does not begin with '/' -> 400\";\n      return sub_1C7C5(v14, v13, 0x190u, (__int64)v15);\n    }\nLABEL_13:\n    *(_DWORD *)(a1 + 320) = 0;\n    v9 = v5;\n    goto LABEL_9;\n  }\n  v13 = *(_BYTE *)(a1 + 168);\n  v14 = *(_DWORD **)(a1 + 128);\n  v15 = \"invalid character in URI -> 400\";\n  return sub_1C7C5(v14, v13, 0x190u, (__int64)v15);\n}\n", 
            "funcStartAddr": "0x3d8a0L", 
            "funcEndAddr": "0x3dab6L", 
            "funcName": "http_request_parse_target"
        }, 
        {
            "decompiledFuncCode": "unsigned __int8 *__usercall http_request_headers_process@<rax>(_WORD *a1@<rdx>, int a2@<ecx>, __int64 a3@<rdi>, char *a4@<rsi>, unsigned __int8 *i@<r12>, __int64 a6@<r13>)\n{\n  char *v6; // r15\n  _WORD *v7; // r14\n  unsigned __int64 v8; // rax\n  int v9; // ebp\n  size_t v10; // rbx\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  _BYTE *v14; // rax\n  char v15; // al\n  bool v16; // al\n  size_t v17; // rbx\n  int v18; // er9\n  char v19; // r8\n  unsigned __int64 v20; // rbx\n  unsigned __int8 *result; // rax\n  __int64 v22; // rax\n  char *v23; // rbp\n  char *v24; // rax\n  char *v25; // r8\n  unsigned __int8 *v26; // rbx\n  char v27; // al\n  char *v28; // rcx\n  signed int v29; // ecx\n  unsigned int v30; // er10\n  char *v31; // r8\n  char v32; // al\n  signed int v33; // esi\n  unsigned __int64 v34; // r9\n  __int64 v35; // rax\n  __int64 v36; // rcx\n  signed __int64 v37; // rdi\n  __int64 v38; // r9\n  char v39; // al\n  unsigned __int8 *v40; // rax\n  unsigned __int8 v41; // si\n  signed int v42; // eax\n  unsigned __int64 v43; // rt1\n  int v44; // eax\n  char v45; // al\n  char *v46; // rdx\n  int v47; // edi\n  char v48; // r11\n  __int64 v49; // rsi\n  int v50; // eax\n  int v51; // eax\n  char *v52; // rax\n  __int64 v53; // rsi\n  __int64 v54; // ST08_8\n  int v55; // eax\n  unsigned __int64 v56; // rt1\n  signed int v57; // [rsp+8h] [rbp-90h]\n  int v58; // [rsp+8h] [rbp-90h]\n  int v59; // [rsp+8h] [rbp-90h]\n  char *v60; // [rsp+10h] [rbp-88h]\n  char v61; // [rsp+10h] [rbp-88h]\n  char v62; // [rsp+10h] [rbp-88h]\n  signed int v63; // [rsp+18h] [rbp-80h]\n  unsigned __int16 *v64; // [rsp+20h] [rbp-78h]\n  unsigned int v65; // [rsp+30h] [rbp-68h]\n  __int64 v66; // [rsp+38h] [rbp-60h]\n  __int64 v67; // [rsp+40h] [rbp-58h]\n  int v68; // [rsp+4Ch] [rbp-4Ch]\n  unsigned __int64 v69; // [rsp+58h] [rbp-40h]\n\n  v6 = a4;\n  v7 = a1;\n  v8 = (unsigned __int16)a1[2];\n  v9 = *(_DWORD *)(a3 + 88);\n  v69 = __readfsqword(0x28u);\n  v66 = a3;\n  v68 = a2;\n  if ( v8 <= 0xC )\n  {\n    v42 = sub_1C7C5(\n            *(_DWORD **)(a3 + 128),\n            *(_BYTE *)(a3 + 168),\n            0x190u,\n            (__int64)\"invalid request line (too short) -> 400\");\n    goto LABEL_106;\n  }\n  v10 = v8 - 2;\n  if ( a4[v8 - 2] != 13 )\n  {\n    if ( v9 & 1 )\n    {\n      v42 = sub_1C7C5(\n              *(_DWORD **)(a3 + 128),\n              *(_BYTE *)(a3 + 168),\n              0x190u,\n              (__int64)\"missing CR before LF in header -> 400\");\n      goto LABEL_106;\n    }\n    v10 = v8 - 1;\n  }\n  i = (unsigned __int8 *)&a4[v10 - 8];\n  v11 = *i;\n  BYTE1(v11) = i[1];\n  v12 = ((unsigned __int64)i[7] << 56) | (((unsigned __int64)i[6] << 48) | (((unsigned __int64)i[5] << 40) | (((unsigned __int64)i[4] << 32) | (((unsigned __int64)i[3] << 24) | (((unsigned __int64)i[2] << 16) | v11 & 0xFFFFFFFFFF00FFFFLL) & 0xFFFFFFFF00FFFFFFLL) & 0xFFFFFF00FFFFFFFFLL) & 0xFFFF00FFFFFFFFFFLL) & 0xFF00FFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFFFLL;\n  if ( a4[v10 - 9] == 32 )\n  {\n    if ( v12 == 3543824036068086856LL )\n    {\n      *(_DWORD *)(a3 + 28) = 1;\n      *(_BYTE *)(a3 + 566) = 1;\n      goto LABEL_21;\n    }\n    if ( v12 == 3471766442030158920LL )\n    {\n      *(_DWORD *)(a3 + 28) = 0;\n      *(_BYTE *)(a3 + 566) = 0;\n      goto LABEL_21;\n    }\n  }\n  v13 = (char *)memchr(a4, 32, v10);\n  if ( !v13 )\n    goto LABEL_100;\n  v14 = memchr(v13 + 1, 32, v10 - (v13 + 1 - a4));\n  if ( !v14 )\n    goto LABEL_100;\n  if ( v14[1] != 72 || v14[2] != 84 || v14[3] != 84 || v14[4] != 80 || v14[5] != 47 )\n  {\n    v42 = sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x190u, (__int64)\"unknown protocol -> 400\");\nLABEL_101:\n    if ( v42 )\n      goto LABEL_65;\n    goto LABEL_102;\n  }\n  if ( v14[6] != 49 || v14[7] != 46 || (v15 = v14[8], (unsigned __int8)(v15 - 48) > 1u) )\n  {\n    v42 = sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x1F9u, (__int64)\"unknown HTTP version -> 505\");\n    goto LABEL_101;\n  }\n  if ( v9 & 1 )\n  {\nLABEL_100:\n    v42 = sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x190u, (__int64)\"incomplete request line -> 400\");\n    goto LABEL_101;\n  }\n  v16 = v15 == 49;\n  *(_DWORD *)(a3 + 28) = v16;\n  *(_BYTE *)(a3 + 566) = v16;\nLABEL_102:\n  for ( i = (unsigned __int8 *)&a4[v10 - 9]; *(i - 1) != 32; --i )\n    ;\nLABEL_21:\n  v17 = 0LL;\n  if ( *a4 != 32 )\n  {\n    do\n      ++v17;\n    while ( a4[v17] != 32 );\n  }\n  v18 = get_http_method_key(a4, v17);\n  *(_DWORD *)(a3 + 24) = v18;\n  if ( v18 < 0 )\n  {\n    v42 = sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x1F5u, (__int64)\"unknown http-method -> 501\");\n    goto LABEL_106;\n  }\n  a6 = (__int64)&a4[v17 + 1];\n  if ( (unsigned __int8 *)a6 == i )\n  {\nLABEL_105:\n    v42 = sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x190u, (__int64)\"no uri specified -> 400\");\nLABEL_106:\n    if ( v42 )\n      goto LABEL_65;\n    LODWORD(i) = v9 & 1;\n    goto LABEL_32;\n  }\n  v19 = *(_BYTE *)a6;\n  v20 = (unsigned __int64)&i[-a6 - 1];\n  if ( *(_BYTE *)a6 != 47 )\n  {\n    if ( v20 <= 7 )\n      goto LABEL_135;\n    v61 = *(_BYTE *)a6;\n    v58 = v18;\n    v51 = buffer_eq_icase_ssn(a6, (__int64)\"http://\", 7LL);\n    v18 = v58;\n    v19 = v61;\n    if ( v51 )\n    {\n      v52 = (char *)memchr((const void *)(a6 + 7), 47, (size_t)&i[-a6 - 8]);\n      v18 = v58;\n      v19 = v61;\n      if ( v52 )\n        goto LABEL_136;\n    }\n    if ( v20 == 8 )\n      goto LABEL_135;\n    v62 = v19;\n    v59 = v18;\n    v55 = buffer_eq_icase_ssn(a6, (__int64)\"https://\", 8LL);\n    v18 = v59;\n    v19 = v62;\n    if ( !v55 )\n      goto LABEL_135;\n    v52 = (char *)memchr((const void *)(a6 + 8), 47, (size_t)&i[-a6 - 9]);\n    v18 = v59;\n    v19 = v62;\n    if ( v52 )\n    {\nLABEL_136:\n      v53 = a6 + (*(_BYTE *)(a6 + 4) != 58) + 7;\n      if ( (unsigned __int64)&v52[-v53 - 1] > 0x3FE )\n      {\n        sub_1C7C5(\n          *(_DWORD **)(a3 + 128),\n          *(_BYTE *)(a3 + 168),\n          0x190u,\n          (__int64)\"uri-authority empty or too long -> 400\");\nLABEL_109:\n        *(_DWORD *)(a3 + 4) = 400;\n        *(_BYTE *)(a3 + 566) = 0;\n        *(_QWORD *)(a3 + 416) = 0LL;\n        goto LABEL_66;\n      }\n      v54 = (__int64)v52;\n      sub_3C3E0(a3, v53, (unsigned __int64)&v52[-v53]);\n      a6 = v54;\n    }\n    else\n    {\nLABEL_135:\n      if ( v9 & 1 )\n      {\n        if ( v18 == 5 )\n        {\n          if ( (unsigned __int8)(v19 - 48) > 0xAu )\n          {\nLABEL_117:\n            sub_1C7C5(*(_DWORD **)(a3 + 128), *(_BYTE *)(a3 + 168), 0x190u, (__int64)\"request-URI parse error -> 400\");\n            goto LABEL_109;\n          }\n        }\n        else\n        {\n          if ( v19 != 42 || v18 != 6 )\n            goto LABEL_117;\n          v20 = (unsigned __int64)&i[-a6 - 2];\n          if ( &i[-a6] != (_BYTE *)&size + 2 )\n            goto LABEL_117;\n        }\n      }\n    }\n    v20 = (unsigned __int64)&i[-a6 - 1];\n  }\n  if ( !v20 )\n    goto LABEL_105;\n  LODWORD(i) = v9 & 1;\n  if ( v9 & 1 )\n  {\n    if ( v9 & 0x40 )\n      goto LABEL_31;\n    result = sub_3C390((_BYTE *)a6, v20);\n  }\n  else\n  {\n    result = (unsigned __int8 *)memchr(v6, 0, (unsigned __int16)v7[(unsigned __int16)*v7]);\n  }\n  if ( result )\n    goto LABEL_124;\nLABEL_31:\n  buffer_copy_string_len(v66 + 456, (const void *)a6, v20);\n  buffer_copy_string_len(v66 + 472, (const void *)a6, v20);\nLABEL_32:\n  if ( *v7 > 2u )\n  {\n    a6 = 2LL;\n    do\n    {\n      v22 = (unsigned __int16)v7[(signed int)a6];\n      v64 = &v7[(signed int)a6 + 1];\n      v23 = &v6[v22];\n      v67 = *v64;\n      v24 = (char *)memchr(&v6[v22], 58, v67 - v22);\n      v25 = v24;\n      if ( !v24 )\n      {\n        v42 = sub_1C7C5(\n                *(_DWORD **)(v66 + 128),\n                *(_BYTE *)(v66 + 168),\n                0x190u,\n                (__int64)\"invalid header missing ':' -> 400\");\n        goto LABEL_64;\n      }\n      v26 = (unsigned __int8 *)(v24 + 1);\n      v27 = *(v24 - 1);\n      if ( v27 == 32 || (LODWORD(v28) = (_DWORD)v25, v27 == 9) )\n      {\n        if ( (_DWORD)i )\n        {\n          v42 = sub_1C7C5(\n                  *(_DWORD **)(v66 + 128),\n                  *(_BYTE *)(v66 + 168),\n                  0x190u,\n                  (__int64)\"invalid whitespace between field-name and colon -> 400\");\nLABEL_64:\n          if ( !v42 )\n            break;\nLABEL_65:\n          v20 = v66;\n          *(_DWORD *)(v66 + 4) = v42;\n          *(_BYTE *)(v66 + 566) = 0;\n          *(_QWORD *)(v66 + 416) = 0LL;\nLABEL_66:\n          if ( !*(_BYTE *)(v66 + 168) )\n            goto LABEL_67;\n          v56 = __readfsqword(0x28u);\n          result = (unsigned __int8 *)(v56 ^ v69);\n          if ( v56 == v69 )\n            return (unsigned __int8 *)log_error_multiline(\n                                        *(_DWORD **)(v66 + 128),\n                                        \"request.c\",\n                                        1277LL,\n                                        v6,\n                                        *(unsigned int *)(v66 + 224),\n                                        (__int64)\"rqst: \");\nLABEL_124:\n          sub_1C75B(v66, *result, (__int64)\"invalid character in URI -> 400\");\n          goto LABEL_31;\n        }\n        v28 = v25;\n        do\n        {\n          do\n            v45 = *(--v28 - 1);\n          while ( v45 == 32 );\n        }\n        while ( v45 == 9 );\n      }\n      v29 = (_DWORD)v28 - (_DWORD)v23;\n      if ( !v29 )\n      {\n        v42 = sub_1C7C5(*(_DWORD **)(v66 + 128), *(_BYTE *)(v66 + 168), 0x190u, (__int64)\"invalid header key -> 400\");\n        goto LABEL_64;\n      }\n      v63 = v29;\n      v60 = v25;\n      v57 = v29;\n      v65 = v29;\n      v30 = http_header_hkey_get(v23, v29);\n      v31 = v60;\n      if ( !v30 && v57 > 0 )\n      {\n        if ( (unsigned int)((char)(*v23 | 0x20) - 97) > 0x19 && *v23 != 45 )\n        {\n          v49 = (__int64)v23;\n          v47 = 0;\nLABEL_89:\n          v50 = sub_1C7F3(v66, v49, v57 - v47, (int)i);\n          v31 = v60;\n          v30 = 0;\n          if ( v50 )\n          {\n            v42 = 400;\n            goto LABEL_65;\n          }\n        }\n        else\n        {\n          v46 = v23 + 1;\n          v47 = 0;\n          while ( v63 != ++v47 )\n          {\n            v48 = *v46;\n            v49 = (__int64)v46++;\n            if ( (unsigned int)((char)(v48 | 0x20) - 97) > 0x19 && v48 != 45 )\n              goto LABEL_89;\n          }\n        }\n      }\n      v32 = v31[1];\n      if ( v32 == 9 || v32 == 32 )\n      {\n        do\n        {\n          do\n            ++v26;\n          while ( *v26 == 32 );\n        }\n        while ( *v26 == 9 );\n      }\n      v33 = (unsigned __int16)*v7;\n      v34 = (unsigned __int64)&v6[v67];\n      if ( (signed int)a6 < v33 )\n      {\n        v34 = (unsigned __int64)&v6[*v64];\n        if ( *(_BYTE *)v34 == 32 || *(_BYTE *)v34 == 9 )\n        {\n          v35 = (signed int)a6 + 1;\n          v36 = v35 + (unsigned __int16)*v7 - 1 - (unsigned int)a6;\n          v37 = (signed __int64)v7 + 2LL * (signed int)a6 - 2LL * (unsigned int)(a6 + 1);\n          do\n          {\n            if ( *(_BYTE *)(v34 - 2) == 13 )\n            {\n              *(_BYTE *)(v34 - 2) = 32;\n            }\n            else if ( (_DWORD)i )\n            {\n              goto LABEL_93;\n            }\n            *(_BYTE *)(v34 - 1) = 32;\n            a6 = (unsigned int)v35;\n            if ( v36 == v35 )\n              break;\n            v38 = *(unsigned __int16 *)(v37 + 2 * v35++ + 4);\n            v34 = (unsigned __int64)&v6[v38];\n          }\n          while ( *(_BYTE *)v34 == 32 || *(_BYTE *)v34 == 9 );\n        }\n      }\n      if ( *(_BYTE *)(v34 - 2) == 13 )\n      {\n        --v34;\n      }\n      else if ( (_DWORD)i )\n      {\nLABEL_93:\n        v42 = sub_1C7C5(\n                *(_DWORD **)(v66 + 128),\n                *(_BYTE *)(v66 + 168),\n                0x190u,\n                (__int64)\"missing CR before LF in header -> 400\");\n        goto LABEL_64;\n      }\n      do\n      {\n        do\n          v39 = *(_BYTE *)(--v34 - 1);\n        while ( v39 == 32 );\n      }\n      while ( v39 == 9 );\n      LODWORD(v34) = v34 - (_DWORD)v26;\n      if ( (signed int)v34 > 0 )\n      {\n        v34 = (signed int)v34;\n        if ( (_DWORD)i )\n        {\n          v40 = v26;\n          do\n          {\n            v41 = *v40;\n            if ( *v40 > 0x1Fu )\n            {\n              if ( v41 == 127 )\n                goto LABEL_63;\n            }\n            else if ( v41 != 9 )\n            {\nLABEL_63:\n              v42 = sub_1C75B(v66, v41, (__int64)\"invalid character in header -> 400\");\n              goto LABEL_64;\n            }\n            ++v40;\n          }\n          while ( &v26[v34] != v40 );\n        }\n        v42 = sub_3C420(v66, v30, (__int64)v23, v65, v26, v34);\n        if ( v42 )\n          goto LABEL_65;\n        v33 = (unsigned __int16)*v7;\n      }\n      a6 = (unsigned int)(a6 + 1);\n    }\n    while ( (signed int)a6 < v33 );\n  }\n  v42 = http_request_parse_target(v66, v68);\n  if ( v42 )\n    goto LABEL_65;\n  v20 = v66;\n  v44 = sub_3CF90(v66, v68);\n  *(_DWORD *)(v66 + 4) = v44;\n  if ( v44 )\n  {\n    *(_BYTE *)(v66 + 566) = 0;\n    *(_QWORD *)(v66 + 416) = 0LL;\n    goto LABEL_66;\n  }\n  *(_DWORD *)(v66 + 56) = -1;\nLABEL_67:\n  v43 = __readfsqword(0x28u);\n  result = (unsigned __int8 *)(v43 ^ v69);\n  if ( v43 != v69 )\n    goto LABEL_124;\n  return result;\n}\n", 
            "funcStartAddr": "0x3dac0L", 
            "funcEndAddr": "0x3e56cL", 
            "funcName": "http_request_headers_process"
        }, 
        {
            "decompiledFuncCode": "void __fastcall http_request_headers_process_h2(__int64 a1, int a2)\n{\n  bool v2; // zf\n  int v3; // eax\n  int v4; // eax\n  char *v5; // rbp\n  char *v6; // r9\n  char **v7; // rax\n  char *v8; // r8\n  int v9; // eax\n\n  if ( !*(_DWORD *)(a1 + 4) )\n  {\n    v3 = http_request_parse_target(a1, a2);\n    if ( v3 )\n    {\n      *(_DWORD *)(a1 + 4) = v3;\n    }\n    else\n    {\n      v4 = sub_3CF90(a1, a2);\n      *(_DWORD *)(a1 + 4) = v4;\n      if ( !v4 )\n      {\n        if ( !(*(_BYTE *)(a1 + 233) & 0x10)\n          || (v9 = sub_1C7C5(\n                     *(_DWORD **)(a1 + 128),\n                     *(_BYTE *)(a1 + 168),\n                     0x190u,\n                     (__int64)\"invalid Connection header with HTTP/2 -> 400\"),\n              (*(_DWORD *)(a1 + 4) = v9) == 0) )\n        {\n          *(_DWORD *)(a1 + 56) = -1;\n          goto LABEL_3;\n        }\n      }\n    }\n  }\n  v2 = *(_BYTE *)(a1 + 168) == 0;\n  *(_BYTE *)(a1 + 566) = 0;\n  *(_QWORD *)(a1 + 416) = 0LL;\n  if ( !v2 )\n  {\n    v5 = \"\";\n    if ( *(_DWORD *)(a1 + 464) > 1u )\n      v5 = *(char **)(a1 + 456);\n    v6 = *http_method_buf(*(_DWORD *)(a1 + 24));\n    v7 = *(char ***)(a1 + 440);\n    v8 = \"\";\n    if ( v7 )\n      v8 = *v7;\n    log_error(\n      *(_DWORD **)(a1 + 128),\n      \"request.c\",\n      1301LL,\n      (__int64)\"request-header:\\n:authority: %s\\n:method: %s\\n:path: %s\",\n      v8,\n      v6,\n      v5);\n  }\nLABEL_3:\n  if ( *(_BYTE *)(a1 + 238) & 2 )\n    http_header_request_unset(a1, 0x31uLL, (__int64)\"upgrade\", 7u);\n}\n", 
            "funcStartAddr": "0x3e570L", 
            "funcEndAddr": "0x3e69cL", 
            "funcName": "http_request_headers_process_h2"
        }, 
        {
            "decompiledFuncCode": "__int16 __fastcall sock_addr_get_port(_WORD *a1)\n{\n  __int16 result; // ax\n\n  if ( *a1 != 2 && *a1 != 10 )\n    result = 0;\n  else\n    result = __ROR2__(a1[1], 8);\n  return result;\n}\n", 
            "funcStartAddr": "0x3e6a0L", 
            "funcEndAddr": "0x3e6c3L", 
            "funcName": "sock_addr_get_port"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sock_addr_is_addr_wildcard(__int64 a1)\n{\n  if ( *(_WORD *)a1 == 2 )\n    return *(_DWORD *)(a1 + 4) == 0;\n  if ( *(_WORD *)a1 == 10 )\n    return ((unsigned __int64)&size ^ *(_QWORD *)(a1 + 8) | *((_QWORD *)&in6addr_any + 1) ^ *(_QWORD *)(a1 + 16)) == 0;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3e6d0L", 
            "funcEndAddr": "0x3e713L", 
            "funcName": "sock_addr_is_addr_wildcard"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sock_addr_is_family_eq(_WORD *a1, _WORD *a2)\n{\n  return *a1 == *a2;\n}\n", 
            "funcStartAddr": "0x3e720L", 
            "funcEndAddr": "0x3e72dL", 
            "funcName": "sock_addr_is_family_eq"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sock_addr_is_port_eq(__int16 *a1, _WORD *a2)\n{\n  __int16 v2; // dx\n  _BOOL8 result; // rax\n\n  v2 = *a1;\n  result = 0LL;\n  if ( *a1 == *a2 )\n  {\n    if ( v2 == 2 || v2 == 10 )\n      result = a1[1] == a2[1];\n    else\n      result = v2 == 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3e730L", 
            "funcEndAddr": "0x3e76fL", 
            "funcName": "sock_addr_is_port_eq"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sock_addr_is_addr_eq(__int16 *a1, __int64 a2)\n{\n  __int16 v2; // dx\n  _BOOL8 result; // rax\n\n  v2 = *a1;\n  result = 0LL;\n  if ( *a1 == *(_WORD *)a2 )\n  {\n    switch ( v2 )\n    {\n      case 2:\n        result = *((_DWORD *)a1 + 1) == *(_DWORD *)(a2 + 4);\n        break;\n      case 10:\n        result = (*(_OWORD *)(a2 + 8) ^ *(_OWORD *)(a1 + 4)) == 0LL;\n        break;\n      case 1:\n        result = strcmp((const char *)a1 + 2, (const char *)(a2 + 2)) == 0;\n        break;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3e770L", 
            "funcEndAddr": "0x3e7ddL", 
            "funcName": "sock_addr_is_addr_eq"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sock_addr_is_addr_eq_bits(__int64 a1, __int16 *a2, signed int a3)\n{\n  __int16 v3; // cx\n  signed int v4; // er8\n  _BOOL8 result; // rax\n  unsigned __int32 v6; // ecx\n  unsigned __int32 v7; // eax\n  char v8; // cl\n  unsigned __int8 *v9; // rdi\n  unsigned __int8 *v10; // rsi\n  int v11; // edx\n  int v12; // eax\n\n  if ( *(_WORD *)a1 == 2 )\n  {\n    v6 = -1;\n    if ( a3 <= 32 && a3 )\n      v6 = _byteswap_ulong(-1 << (32 - a3));\n    if ( *a2 == 2 )\n    {\n      result = (v6 & (*((_DWORD *)a2 + 1) ^ *(_DWORD *)(a1 + 4))) == 0;\n    }\n    else\n    {\n      result = 0LL;\n      if ( *a2 == 10 && !*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && *((_DWORD *)a2 + 4) == -65536 )\n        result = (v6 & (*((_DWORD *)a2 + 5) ^ *(_DWORD *)(a1 + 4))) == 0;\n    }\n  }\n  else if ( *(_WORD *)a1 == 10 )\n  {\n    v3 = *a2;\n    v4 = 128;\n    if ( a3 <= 128 )\n      v4 = a3;\n    if ( v3 == 10 )\n    {\n      v9 = (unsigned __int8 *)(a1 + 8);\n      v10 = (unsigned __int8 *)(a2 + 4);\n      do\n      {\n        v11 = *v9;\n        v12 = *v10;\n        if ( v4 <= 7 )\n        {\n          result = v11 >> (8 - v4) == v12 >> (8 - v4);\n        }\n        else\n        {\n          ++v9;\n          ++v10;\n          result = (_BYTE)v12 == (_BYTE)v11;\n        }\n        if ( !(_DWORD)result )\n          break;\n        v4 -= 8;\n      }\n      while ( v4 > 0 );\n    }\n    else\n    {\n      result = 0LL;\n      if ( v3 == 2 && !*(_DWORD *)(a1 + 8) && !*(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16) == -65536 )\n      {\n        v7 = -1;\n        if ( a3 <= 127 )\n        {\n          v8 = 96;\n          if ( v4 >= 96 )\n            v8 = v4;\n          v7 = _byteswap_ulong(~(0xFFFFFFFF >> (v8 - 96)));\n        }\n        result = (v7 & (*(_DWORD *)(a1 + 20) ^ *((_DWORD *)a2 + 1))) == 0;\n      }\n    }\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3e7e0L", 
            "funcEndAddr": "0x3e95cL", 
            "funcName": "sock_addr_is_addr_eq_bits"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sock_addr_set_port(unsigned __int16 *a1, __int16 a2)\n{\n  __int64 result; // rax\n\n  result = *a1;\n  if ( (_WORD)result == 2 || (_WORD)result == 10 )\n    a1[1] = __ROR2__(a2, 8);\n  return result;\n}\n", 
            "funcStartAddr": "0x3e960L", 
            "funcEndAddr": "0x3e982L", 
            "funcName": "sock_addr_set_port"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sock_addr_assign(__int64 a1, int a2, __int16 a3, const __m128i *a4)\n{\n  const __m128i *v4; // rbp\n  signed __int64 result; // rax\n  size_t v6; // rdx\n  int v7; // eax\n\n  if ( a2 == 2 )\n  {\n    v7 = a4->m128i_i64[0];\n    *(_QWORD *)(a1 + 8) = 0LL;\n    *(_WORD *)a1 = 2;\n    *(_WORD *)(a1 + 2) = a3;\n    *(_DWORD *)(a1 + 4) = v7;\n    result = 0LL;\n  }\n  else if ( a2 == 10 )\n  {\n    *(_QWORD *)(a1 + 20) = 0LL;\n    *(_WORD *)a1 = 10;\n    result = 0LL;\n    *(_WORD *)(a1 + 2) = a3;\n    *(_OWORD *)(a1 + 4) = 0LL;\n    *(__m128i *)(a1 + 8) = _mm_loadu_si128(a4);\n  }\n  else\n  {\n    v4 = a4;\n    if ( a2 == 1 )\n    {\n      v6 = strlen((const char *)a4->m128i_i64) + 1;\n      if ( v6 > 0x6C )\n      {\n        *__errno_location() = 36;\n        result = 0xFFFFFFFFLL;\n      }\n      else\n      {\n        *(_QWORD *)(a1 + 2) = 0LL;\n        *(_QWORD *)(a1 + 102) = 0LL;\n        memset(\n          (void *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8LL),\n          0,\n          8LL * (((_DWORD)a1 + 2 - (((_DWORD)a1 + 10) & 0xFFFFFFF8) + 108) >> 3));\n        *(_WORD *)a1 = 1;\n        memcpy((void *)(a1 + 2), v4, v6);\n        result = 0LL;\n      }\n    }\n    else\n    {\n      *__errno_location() = 97;\n      result = 0xFFFFFFFFLL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3e990L", 
            "funcEndAddr": "0x3ea93L", 
            "funcName": "sock_addr_assign"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sock_addr_inet_pton(__int64 a1, const char *a2, int a3, __int16 a4)\n{\n  int result; // eax\n\n  if ( a3 == 2 )\n  {\n    *(_QWORD *)(a1 + 4) = 0LL;\n    *(_DWORD *)(a1 + 12) = 0;\n    *(_WORD *)a1 = 2;\n    *(_WORD *)(a1 + 2) = __ROR2__(a4, 8);\n    result = inet_pton(2, a2, (void *)(a1 + 4));\n  }\n  else if ( a3 == 10 )\n  {\n    *(_QWORD *)(a1 + 20) = 0LL;\n    *(_WORD *)a1 = 10;\n    *(_OWORD *)(a1 + 4) = 0LL;\n    *(_WORD *)(a1 + 2) = __ROR2__(a4, 8);\n    result = inet_pton(10, a2, (void *)(a1 + 8));\n  }\n  else\n  {\n    *__errno_location() = 97;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3eaa0L", 
            "funcEndAddr": "0x3eb2fL", 
            "funcName": "sock_addr_inet_pton"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sock_addr_inet_ntop(const char *a1, char *a2, socklen_t a3)\n{\n  __int16 v3; // r8\n  const char *result; // rax\n\n  v3 = *(_WORD *)a1;\n  if ( *(_WORD *)a1 == 2 )\n    return inet_ntop(2, a1 + 4, a2, a3);\n  if ( v3 == 10 )\n    return inet_ntop(10, a1 + 8, a2, a3);\n  result = a1 + 2;\n  if ( v3 != 1 )\n  {\n    *__errno_location() = 97;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3eb30L", 
            "funcEndAddr": "0x3eba2L", 
            "funcName": "sock_addr_inet_ntop"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sock_addr_inet_ntop_copy_buffer(__int64 a1, const char *a2)\n{\n  const char *v2; // rax\n  __int64 v4; // [rsp+0h] [rbp-88h]\n  unsigned __int64 v5; // [rsp+78h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v2 = sock_addr_inet_ntop(a2, (char *)&v4, 0x6Cu);\n  if ( !v2 )\n    return 0xFFFFFFFFLL;\n  buffer_copy_string(a1, v2);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3ebb0L", 
            "funcEndAddr": "0x3ec0cL", 
            "funcName": "sock_addr_inet_ntop_copy_buffer"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sock_addr_inet_ntop_append_buffer(__int64 a1, const char *a2)\n{\n  const char *v2; // rax\n  __int64 v4; // [rsp+0h] [rbp-88h]\n  unsigned __int64 v5; // [rsp+78h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v2 = sock_addr_inet_ntop(a2, (char *)&v4, 0x6Cu);\n  if ( !v2 )\n    return 0xFFFFFFFFLL;\n  buffer_append_string(a1, v2);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3ec10L", 
            "funcEndAddr": "0x3ec6cL", 
            "funcName": "sock_addr_inet_ntop_append_buffer"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sock_addr_stringify_append_buffer(__int64 a1, const char *a2)\n{\n  const char *v2; // rbx\n  __int16 v3; // ax\n  char *v5; // rsi\n  unsigned __int64 v6; // rdx\n  int v7; // eax\n\n  v2 = a2;\n  v3 = *(_WORD *)a2;\n  if ( *(_WORD *)a2 == 2 )\n  {\n    if ( (unsigned int)sock_addr_inet_ntop_append_buffer(a1, a2) )\n      return 0xFFFFFFFFLL;\n    v6 = 1LL;\n    v5 = \":\";\n    goto LABEL_9;\n  }\n  if ( v3 == 10 )\n  {\n    buffer_append_string_len(a1, \"[\", 1uLL);\n    if ( (unsigned int)sock_addr_inet_ntop_append_buffer(a1, a2) )\n    {\n      v7 = *(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 8) != 0);\n      *(_BYTE *)(*(_QWORD *)a1 + (unsigned int)(v7 - 1)) = 0;\n      *(_DWORD *)(a1 + 8) = v7;\n      return 0xFFFFFFFFLL;\n    }\n    v5 = \"]:\";\n    v6 = 2LL;\nLABEL_9:\n    buffer_append_string_len(a1, v5, v6);\n    buffer_append_int(a1, (unsigned __int16)__ROR2__(*((_WORD *)v2 + 1), 8));\n    return 0LL;\n  }\n  if ( v3 != 1 )\n    return 0LL;\n  buffer_append_string(a1, a2 + 2);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3ec70L", 
            "funcEndAddr": "0x3ed59L", 
            "funcName": "sock_addr_stringify_append_buffer"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sock_addr_nameinfo_append_buffer(__int64 a1, const struct sockaddr *a2, _DWORD *a3)\n{\n  _DWORD *v3; // r13\n  int v4; // eax\n  int v6; // eax\n  const char *v7; // rax\n  const char *v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-138h]\n  unsigned __int64 v10; // [rsp+108h] [rbp-30h]\n\n  v3 = a3;\n  v10 = __readfsqword(0x28u);\n  if ( a2->sa_family == 2 )\n  {\n    v6 = getnameinfo(a2, 0x10u, (char *)&v9, 0x100u, 0LL, 0, 0);\n    if ( v6 )\n    {\n      v7 = gai_strerror(v6);\n      log_error(v3, \"sock_addr.c\", 393LL, (__int64)\"NOTICE: getnameinfo failed; using ip-address instead: %s\", v7);\n      sock_addr_inet_ntop_append_buffer(a1, (const char *)a2);\n      return 0LL;\n    }\nLABEL_4:\n    buffer_append_string(a1, (const char *)&v9);\n    return 0LL;\n  }\n  if ( a2->sa_family == 10 )\n  {\n    v4 = getnameinfo(a2, 0x1Cu, (char *)&v9, 0x100u, 0LL, 0, 0);\n    if ( v4 )\n    {\n      v8 = gai_strerror(v4);\n      log_error(v3, \"sock_addr.c\", 410LL, (__int64)\"NOTICE: getnameinfo failed; using ip-address instead: %s\", v8);\n      buffer_append_string_len(a1, \"[\", 1uLL);\n      sock_addr_inet_ntop_append_buffer(a1, (const char *)a2);\n      buffer_append_string_len(a1, \"]\", 1uLL);\n      return 0LL;\n    }\n    goto LABEL_4;\n  }\n  log_error(a3, \"sock_addr.c\", 424LL, (__int64)\"ERROR: unsupported address-type\");\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x3ed60L", 
            "funcEndAddr": "0x3eeeaL", 
            "funcName": "sock_addr_nameinfo_append_buffer"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sock_addr_from_str_hints(void *dest, _DWORD *a2, const char *a3, signed __int64 a4, __int16 a5, _DWORD *a6)\n{\n  _DWORD *v6; // r13\n  _DWORD *v7; // r12\n  char *v8; // rbx\n  const char *v9; // rbp\n  const char *v10; // rsi\n  bool v11; // cf\n  bool v12; // zf\n  const char *v13; // rdi\n  char v14; // al\n  bool v15; // cf\n  bool v16; // zf\n  __int64 result; // rax\n  bool v18; // cf\n  bool v19; // zf\n  const char *v20; // rdi\n  const char *v21; // rsi\n  char v22; // al\n  bool v23; // cf\n  bool v24; // zf\n  const char *v25; // rdi\n  const char *v26; // rsi\n  bool v27; // cf\n  bool v28; // zf\n  _BYTE *v29; // rdi\n  const char *v30; // rsi\n  int v31; // eax\n  struct addrinfo *v32; // rbp\n  size_t v33; // rax\n  int v34; // ebx\n  const char *v35; // rdi\n  const char *v36; // rsi\n  int v37; // eax\n  struct addrinfo *v38; // rbp\n  int v39; // eax\n  int v40; // er14\n  struct addrinfo *v41; // rbp\n  struct addrinfo *v42; // rbp\n  const char *v43; // r8\n  const char *v44; // r9\n  __int64 v45; // rdx\n  const char *v46; // rax\n  const char *v47; // rax\n  __int16 v48; // [rsp+4h] [rbp-94h]\n  __int16 v49; // [rsp+4h] [rbp-94h]\n  __int16 v50; // [rsp+4h] [rbp-94h]\n  struct addrinfo *pai; // [rsp+18h] [rbp-80h]\n  struct addrinfo req; // [rsp+20h] [rbp-78h]\n  unsigned __int64 v53; // [rsp+58h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a2;\n  v8 = (char *)dest;\n  v9 = a3;\n  v53 = __readfsqword(0x28u);\n  if ( (_DWORD)a4 != 1 )\n  {\n    if ( (signed int)a4 <= 1 )\n    {\n      v27 = 0;\n      v28 = (_DWORD)a4 == 0;\n      if ( (_DWORD)a4 )\n        goto LABEL_46;\n      v29 = &unk_4C164;\n      a4 = 10LL;\n      v30 = a3;\n      do\n      {\n        if ( !a4 )\n          break;\n        v27 = (const unsigned __int8)*v30 < *v29;\n        v28 = *v30++ == *v29++;\n        --a4;\n      }\n      while ( v28 );\n      if ( (!v27 && !v28) == v27 )\n      {\n        *((_QWORD *)v8 + 1) = 0LL;\n        *((_DWORD *)v8 + 1) = 16777343;\n        *(_WORD *)v8 = 2;\n        *((_WORD *)v8 + 1) = __ROR2__(a5, 8);\n        result = 1LL;\n        *v7 = 16;\n        goto LABEL_30;\n      }\n      v48 = a5;\n      *(_OWORD *)&req.ai_flags = 0LL;\n      *(_QWORD *)&req.ai_socktype = 25769803777LL;\n      *(_OWORD *)&req.ai_addrlen = 0LL;\n      *(_OWORD *)&req.ai_canonname = 0LL;\n      v31 = getaddrinfo(a3, 0LL, &req, &pai);\n      if ( !v31 )\n      {\n        v32 = pai;\n        memcpy(v8, pai->ai_addr, pai->ai_addrlen);\n        freeaddrinfo(v32);\n        a5 = v48;\n        if ( *(_WORD *)v8 == 10 )\n          goto LABEL_10;\n        goto LABEL_27;\n      }\n      v46 = gai_strerror(v31);\n      v44 = v9;\n      v43 = v46;\n      v45 = 454LL;\n    }\n    else\n    {\n      if ( (_DWORD)a4 != 2 )\n      {\n        if ( (_DWORD)a4 != 10 )\n          goto LABEL_46;\n        *(_QWORD *)((char *)dest + 18) = 0LL;\n        a4 = 3LL;\n        v10 = a3;\n        *(_OWORD *)((char *)dest + 2) = 0LL;\n        v11 = 0;\n        v12 = 1;\n        *(_WORD *)dest = 10;\n        *((_WORD *)dest + 13) = 0;\n        v13 = \"::\";\n        do\n        {\n          if ( !a4 )\n            break;\n          v11 = (const unsigned __int8)*v10 < *v13;\n          v12 = *v10++ == *v13++;\n          --a4;\n        }\n        while ( v12 );\n        v14 = (!v11 && !v12) - v11;\n        v15 = 0;\n        v16 = v14 == 0;\n        if ( !v14 )\n        {\n          *(__m128i *)(v8 + 8) = _mm_loadu_si128((const __m128i *)&in6addr_any);\nLABEL_10:\n          result = 1LL;\n          *((_WORD *)v8 + 1) = __ROR2__(a5, 8);\n          *v7 = 28;\n          goto LABEL_30;\n        }\n        v35 = \"::1\";\n        a4 = 4LL;\n        v36 = a3;\n        do\n        {\n          if ( !a4 )\n            break;\n          v15 = (const unsigned __int8)*v36 < *v35;\n          v16 = *v36++ == *v35++;\n          --a4;\n        }\n        while ( v16 );\n        if ( (!v15 && !v16) == v15 )\n        {\n          *(__m128i *)(v8 + 8) = _mm_loadu_si128((const __m128i *)&in6addr_loopback);\n          goto LABEL_10;\n        }\n        v50 = a5;\n        *(_OWORD *)&req.ai_flags = 0LL;\n        *(_QWORD *)&req.ai_family = 4294967306LL;\n        req.ai_protocol = 6;\n        *(_OWORD *)&req.ai_addrlen = 0LL;\n        *(_OWORD *)&req.ai_canonname = 0LL;\n        v39 = getaddrinfo(a3, 0LL, &req, &pai);\n        v40 = v39;\n        if ( !v39 )\n        {\n          v42 = pai;\n          memcpy(v8, pai->ai_addr, pai->ai_addrlen);\n          freeaddrinfo(v42);\n          a5 = v50;\n          goto LABEL_10;\n        }\n        req.ai_family = 2;\n        if ( v39 == -9 && !getaddrinfo(v9, 0LL, &req, &pai) )\n        {\n          v41 = pai;\n          memcpy(v8, pai->ai_addr, pai->ai_addrlen);\n          *v7 = 16;\n          *(_WORD *)v8 = 2;\n          *((_WORD *)v8 + 1) = __ROR2__(v50, 8);\n          freeaddrinfo(v41);\n          result = 1LL;\n          goto LABEL_30;\n        }\n        v47 = gai_strerror(v40);\n        v44 = v9;\n        v43 = v47;\n        v45 = 510LL;\n        goto LABEL_49;\n      }\n      v18 = 0;\n      v19 = 1;\n      *(_QWORD *)((char *)dest + 2) = 0LL;\n      *(_WORD *)dest = 2;\n      *(_DWORD *)((char *)dest + 10) = 0;\n      a4 = 8LL;\n      *((_WORD *)dest + 7) = 0;\n      v20 = \"0.0.0.0\";\n      v21 = a3;\n      do\n      {\n        if ( !a4 )\n          break;\n        v18 = (const unsigned __int8)*v21 < *v20;\n        v19 = *v21++ == *v20++;\n        --a4;\n      }\n      while ( v19 );\n      v22 = (!v18 && !v19) - v18;\n      v23 = 0;\n      v24 = v22 == 0;\n      if ( !v22 )\n      {\n        *((_DWORD *)v8 + 1) = 0;\n        goto LABEL_27;\n      }\n      v25 = \"127.0.0.1\";\n      a4 = 10LL;\n      v26 = a3;\n      do\n      {\n        if ( !a4 )\n          break;\n        v23 = (const unsigned __int8)*v26 < *v25;\n        v24 = *v26++ == *v25++;\n        --a4;\n      }\n      while ( v24 );\n      if ( (!v23 && !v24) == v23 )\n      {\n        *((_DWORD *)v8 + 1) = 16777343;\nLABEL_27:\n        result = 1LL;\n        *((_WORD *)v8 + 1) = __ROR2__(a5, 8);\n        *v7 = 16;\n        goto LABEL_30;\n      }\n      v49 = a5;\n      *(_OWORD *)&req.ai_flags = 0LL;\n      *(_QWORD *)&req.ai_family = 4294967298LL;\n      req.ai_protocol = 6;\n      *(_OWORD *)&req.ai_addrlen = 0LL;\n      *(_OWORD *)&req.ai_canonname = 0LL;\n      v37 = getaddrinfo(a3, 0LL, &req, &pai);\n      if ( !v37 )\n      {\n        v38 = pai;\n        memcpy(v8, pai->ai_addr, pai->ai_addrlen);\n        freeaddrinfo(v38);\n        a5 = v49;\n        goto LABEL_27;\n      }\n      v43 = gai_strerror(v37);\n      v44 = v9;\n      v45 = 543LL;\n    }\nLABEL_49:\n    log_error(v6, \"sock_addr.c\", v45, (__int64)\"getaddrinfo failed: %s '%s'\", v43, v44);\n    result = 0LL;\n    goto LABEL_30;\n  }\n  *(_QWORD *)((char *)dest + 2) = 0LL;\n  *(_QWORD *)((char *)dest + 102) = 0LL;\n  memset(\n    (void *)(((unsigned __int64)dest + 10) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((_DWORD)dest + 2 - (((_DWORD)dest + 10) & 0xFFFFFFF8) + 108) >> 3));\n  *(_WORD *)dest = 1;\n  v33 = strlen(a3);\n  if ( v33 + 1 > 0x6C )\n  {\n    log_error(v6, \"sock_addr.c\", 584LL, (__int64)\"unix socket filename too long: %s\", v9);\n    result = 0LL;\n  }\n  else\n  {\n    v34 = v33 + 3;\n    memcpy((char *)dest + 2, v9, v33 + 1);\n    *a2 = v34;\n    result = 1LL;\n  }\nLABEL_30:\n  while ( __readfsqword(0x28u) != v53 )\n  {\nLABEL_46:\n    log_error(v6, \"sock_addr.c\", 604LL, (__int64)\"address family unsupported: %d\", (unsigned int)a4);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3eef0L", 
            "funcEndAddr": "0x3f406L", 
            "funcName": "sock_addr_from_str_hints"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sock_addr_from_str_numeric(__m128i *a1, const char *a2, _DWORD *a3)\n{\n  _DWORD *v3; // r13\n  __m128i *v4; // rbp\n  int v5; // eax\n  unsigned int v6; // ebx\n  struct addrinfo *v7; // rdi\n  int v8; // eax\n  const __m128i *v9; // rax\n  bool v10; // zf\n  __int64 result; // rax\n  const char *v12; // rax\n  struct addrinfo *pai; // [rsp+0h] [rbp-70h]\n  struct addrinfo req; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v15; // [rsp+40h] [rbp-30h]\n\n  v3 = a3;\n  v4 = a1;\n  pai = 0LL;\n  *(char **)((char *)&req.ai_canonname + 4) = 0LL;\n  v15 = __readfsqword(0x28u);\n  *(_OWORD *)&req.ai_family = 0LL;\n  HIDWORD(req.ai_next) = 0;\n  req.ai_flags = 1028;\n  *(_OWORD *)(&req.ai_addrlen + 1) = 0LL;\n  *__errno_location() = 0;\n  v5 = getaddrinfo(a2, 0LL, &req, &pai);\n  v6 = v5;\n  if ( v5 )\n  {\n    v12 = gai_strerror(v5);\n    log_perror(v3, \"sock_addr.c\", 638LL, (__int64)\"could not parse ip address %s because %s\", a2, v12);\n  }\n  else\n  {\n    v7 = pai;\n    if ( pai )\n    {\n      v8 = pai->ai_family;\n      if ( v8 == 2 )\n      {\n        *v4 = _mm_loadu_si128((const __m128i *)pai->ai_addr);\n        if ( LOWORD(v4->m128i_i64[0]) != 2 )\n          ck_assert_failed((__int64)\"sock_addr.c\", 650LL, (__int64)\"2 == saddr->plain.sa_family\");\n      }\n      else\n      {\n        if ( v8 != 10 )\n        {\n          log_error(\n            v3,\n            \"sock_addr.c\",\n            657LL,\n            (__int64)\"Problem in parsing ip address %s:succeeded, but unknown family\",\n            a2);\n          v7 = pai;\n          goto LABEL_7;\n        }\n        v9 = (const __m128i *)pai->ai_addr;\n        *v4 = _mm_loadu_si128(v9);\n        v10 = LOWORD(v4->m128i_i64[0]) == 10;\n        v4[1].m128i_i64[0] = v9[1].m128i_i64[0];\n        v4[1].m128i_i32[2] = v9[1].m128i_i32[2];\n        if ( !v10 )\n          goto LABEL_15;\n      }\n      v6 = 1;\nLABEL_7:\n      freeaddrinfo(v7);\n      goto LABEL_8;\n    }\n    log_error(\n      v3,\n      \"sock_addr.c\",\n      643LL,\n      (__int64)\"Problem in parsing ip address %s:succeeded, but no information returned\",\n      a2);\n    v6 = -1;\n  }\nLABEL_8:\n  result = v6;\n  if ( __readfsqword(0x28u) != v15 )\nLABEL_15:\n    ck_assert_failed((__int64)\"sock_addr.c\", 654LL, (__int64)\"10 == saddr->plain.sa_family\");\n  return result;\n}\n", 
            "funcStartAddr": "0x3f410L", 
            "funcEndAddr": "0x3f5c9L", 
            "funcName": "sock_addr_from_str_numeric"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall ck_memclear_s(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned int v3; // ebx\n\n  if ( !a1 )\n    return 22LL;\n  if ( (a2 & 0x8000000000000000LL) != 0LL )\n    return 7LL;\n  v3 = 22;\n  if ( (a3 & 0x8000000000000000LL) == 0LL )\n  {\n    v3 = 75;\n    if ( a2 >= a3 )\n    {\n      a2 = a3;\n      v3 = 0;\n    }\n  }\n  __explicit_bzero_chk(a1, a2, -1LL);\n  return v3;\n}\n", 
            "funcStartAddr": "0x3f5d0L", 
            "funcEndAddr": "0x3f629L", 
            "funcName": "ck_memclear_s"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall ck_strerror_s(void *dest, unsigned __int64 a2, int a3)\n{\n  unsigned int v3; // er13\n  char *v4; // rax\n  char *v5; // r12\n  size_t v6; // rax\n  __int64 result; // rax\n  char *v8; // rdx\n  unsigned __int64 v9; // rdx\n  __int64 v10; // [rsp+0h] [rbp-438h]\n  unsigned __int64 v11; // [rsp+408h] [rbp-30h]\n\n  v11 = __readfsqword(0x28u);\n  if ( !dest || (signed __int64)a2 <= 0 )\n    return 22LL;\n  v3 = a3;\n  v4 = strerror_r(a3, (char *)&v10, 0x400uLL);\n  v5 = v4;\n  if ( v4 )\n  {\n    v6 = strlen(v4);\n    if ( a2 > v6 )\n    {\n      memcpy(dest, v5, v6 + 1);\n      return 0LL;\n    }\n    memcpy(dest, v5, a2 - 1);\n    *((char *)dest + a2 - 1) = 0;\n  }\n  else\n  {\n    v9 = (signed int)__snprintf_chk(dest, a2, 1LL, -1LL, \"Unknown error %d\", v3);\n    result = 0LL;\n    if ( v9 < a2 )\n      return result;\n  }\n  result = 34LL;\n  if ( a2 > 3 )\n  {\n    v8 = (char *)dest + a2 - 4;\n    *(_WORD *)v8 = 11822;\n    v8[2] = 46;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3f630L", 
            "funcEndAddr": "0x3f74bL", 
            "funcName": "ck_strerror_s"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall ck_memeq_const_time(char *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4)\n{\n  unsigned __int64 v4; // r10\n  int v5; // er11\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rcx\n  unsigned __int64 v8; // r10\n  unsigned __int64 v9; // r9\n  unsigned __int64 v10; // r8\n\n  v4 = a4;\n  if ( !a2 )\n    a1 = \"\";\n  if ( !a4 )\n    a3 = \"\";\n  if ( a2 >= a4 )\n    v4 = a2;\n  v5 = a2 != a4;\n  v6 = a2 - (a2 != 0);\n  v7 = a4 - (a4 != 0);\n  v8 = (v4 + 63) & 0xFFFFFFFFFFFFFFC0LL;\n  if ( !v8 )\n    return v5 == 0;\n  v9 = 0LL;\n  v10 = 0LL;\n  do\n  {\n    v5 |= (unsigned __int8)(a3[v9] ^ a1[v10]);\n    v10 += v6 > v10;\n    v9 += v7 > v9;\n    --v8;\n  }\n  while ( v8 );\n  return v5 == 0;\n}\n", 
            "funcStartAddr": "0x3f750L", 
            "funcEndAddr": "0x3f7e9L", 
            "funcName": "ck_memeq_const_time"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall ck_memeq_const_time_fixed_len(char *a1, char *a2, __int64 a3)\n{\n  char *v3; // rdx\n  int v4; // ecx\n  char v5; // al\n  char v6; // r8\n\n  if ( !a3 )\n    return 1LL;\n  v3 = &a1[a3];\n  v4 = 0;\n  do\n  {\n    v5 = *a1;\n    v6 = *a2;\n    ++a1;\n    ++a2;\n    v4 |= (unsigned __int8)(v6 ^ v5);\n  }\n  while ( a1 != v3 );\n  return v4 == 0;\n}\n", 
            "funcStartAddr": "0x3f7f0L", 
            "funcEndAddr": "0x3f82eL", 
            "funcName": "ck_memeq_const_time_fixed_len"
        }, 
        {
            "decompiledFuncCode": "void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = &off_2561B8 - off_2561B0;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_2561B0[v5++])(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x3f830L", 
            "funcEndAddr": "0x3f895L", 
            "funcName": "__libc_csu_init"
        }, 
        {
            "decompiledFuncCode": "void _libc_csu_fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x3f8a0L", 
            "funcEndAddr": "0x3f8a2L", 
            "funcName": "__libc_csu_fini"
        }
    ], 
    "failedCount": 0, 
    "binaryInfo": {
        "binaryName": "lighttpd_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "683", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }, 
    "recognizedCount": 0
}