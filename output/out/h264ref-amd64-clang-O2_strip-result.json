{
    "decompileResult": [
        {
            "decompiledFuncCode": "void *sub_401150()\n{\n  void *result; // rax\n\n  result = &unk_49F968;\n  if ( &unk_49F968 != &unk_49F968 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x401150L", 
            "funcEndAddr": "0x401171L", 
            "funcName": "sub_401150"
        }, 
        {
            "decompiledFuncCode": "void *sub_4011C0()\n{\n  void *result; // rax\n\n  if ( !byte_49F980 )\n  {\n    result = sub_401150();\n    byte_49F980 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4011c0L", 
            "funcEndAddr": "0x4011e1L", 
            "funcName": "sub_4011C0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4011F0()\n{\n  return 0LL;\n}\n\n__int64 sub_4011F0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401180L", 
            "funcEndAddr": "0x4011b1L", 
            "funcName": "sub_4011F0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4011F0()\n{\n  return 0LL;\n}\n\n__int64 sub_4011F0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401180L", 
            "funcEndAddr": "0x4011b1L", 
            "funcName": "sub_4011F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401200(__int64 a1)\n{\n  int v1; // ecx\n\n  v1 = 8 * (*(_DWORD *)a1 > 3);\n  **(_BYTE **)(a1 + 24) = *(_BYTE *)(a1 + 12) | (*(_BYTE *)(a1 + 20) << 7) | 32 * *(_BYTE *)(a1 + 16);\n  return (unsigned int)(v1 + 8 * *(_DWORD *)(a1 + 4) + 24);\n}\n", 
            "funcStartAddr": "0x401200L", 
            "funcEndAddr": "0x40122cL", 
            "funcName": "sub_401200"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_401230(const char *a1)\n{\n  FILE *result; // rax\n\n  result = fopen(a1, \"wb\");\n  stream = result;\n  if ( !result )\n  {\n    printf(\"Fatal: cannot open Annex B bytestream file '%s', exit (-1)\\n\", a1);\n    exit(-1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401230L", 
            "funcEndAddr": "0x401265L", 
            "funcName": "sub_401230"
        }, 
        {
            "decompiledFuncCode": "void sub_401270()\n{\n  if ( fclose(stream) )\n  {\n    puts(\"Fatal: cannot close Annex B bytestream file, exit (-1)\");\n    exit(-1);\n  }\n}\n", 
            "funcStartAddr": "0x401270L", 
            "funcEndAddr": "0x401297L", 
            "funcName": "sub_401270"
        }, 
        {
            "decompiledFuncCode": "void *sub_4012A0()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x68uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"arienco_create_encoding_environment: eep\");\n  return result;\n}\n", 
            "funcStartAddr": "0x4012a0L", 
            "funcEndAddr": "0x4012c7L", 
            "funcName": "sub_4012A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401310(__int64 a1, __int64 a2, unsigned int *a3)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)(a1 + 16) = 0;\n  *(_QWORD *)(a1 + 24) = a2;\n  *(_QWORD *)(a1 + 32) = a3;\n  *(_OWORD *)a1 = xmmword_489570;\n  *(_DWORD *)(a1 + 80) = 0;\n  result = *a3;\n  *(_DWORD *)(a1 + 96) = result;\n  *(_DWORD *)(a1 + 88) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x401310L", 
            "funcEndAddr": "0x40133dL", 
            "funcName": "sub_401310"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401340(__int64 a1)\n{\n  return (unsigned int)(*(_DWORD *)(a1 + 16) + 8 * **(_DWORD **)(a1 + 32) + 8 - *(_DWORD *)(a1 + 12));\n}\n", 
            "funcStartAddr": "0x401340L", 
            "funcEndAddr": "0x401353L", 
            "funcName": "sub_401340"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_401360(__int64 a1)\n{\n  int v1; // ecx\n  int v2; // eax\n  bool v3; // zf\n  int v4; // eax\n  __int64 v5; // r8\n  signed int *v6; // rdx\n  __int64 v7; // rsi\n  signed int v8; // ecx\n  int v9; // er8\n  int v10; // edx\n  unsigned int v11; // edx\n  int i; // edx\n  int v13; // edx\n  __int64 v14; // r9\n  signed int *v15; // rsi\n  __int64 v16; // rcx\n  signed int v17; // edx\n  int v18; // er9\n  int v19; // esi\n  unsigned int v20; // esi\n  int v21; // ecx\n  int v22; // eax\n  __int64 v23; // r8\n  signed int *v24; // rdx\n  __int64 v25; // rsi\n  signed int v26; // ecx\n  int v27; // er8\n  int v28; // edx\n  unsigned int v29; // edx\n  int v30; // ecx\n  int v31; // eax\n  __int64 v32; // r8\n  signed int *v33; // rdx\n  __int64 v34; // rsi\n  signed int v35; // ecx\n  int v36; // er8\n  int v37; // edx\n  unsigned int v38; // edx\n  int v39; // ecx\n  _QWORD *result; // rax\n  int v41; // ecx\n  int v42; // eax\n  int v43; // edx\n  __int64 v44; // r8\n  signed int *v45; // rdx\n  __int64 v46; // rsi\n  signed int v47; // eax\n  int v48; // ecx\n  int v49; // esi\n  int v50; // ecx\n  int v51; // edx\n\n  v1 = ((*(_DWORD *)a1 >> 9) & 1) + 2 * *(_DWORD *)(a1 + 8);\n  *(_DWORD *)(a1 + 8) = v1;\n  v2 = *(_DWORD *)(a1 + 12);\n  v3 = v2 == 1;\n  v4 = v2 - 1;\n  *(_DWORD *)(a1 + 12) = v4;\n  if ( v3 )\n  {\n    v5 = *(_QWORD *)(a1 + 24);\n    v6 = *(signed int **)(a1 + 32);\n    v7 = *v6;\n    *v6 = v7 + 1;\n    *(_BYTE *)(v5 + v7) = v1;\n    *(_DWORD *)(a1 + 12) = 8;\n    v8 = *(_DWORD *)(a1 + 80);\n    v4 = 8;\n    if ( v8 >= 8 )\n    {\n      v9 = *(_DWORD *)(a1 + 88);\n      v10 = -16;\n      if ( ~v8 > -17 )\n        v10 = ~v8;\n      v11 = v8 + v10 + 8;\n      *(_DWORD *)(a1 + 80) = v8 - (v11 & 0xFFFFFFF8) - 8;\n      *(_DWORD *)(a1 + 88) = v9 + (v11 >> 3) + 1;\n    }\n  }\n  for ( i = *(_DWORD *)(a1 + 16); i; i = *(_DWORD *)(a1 + 16) )\n  {\n    *(_DWORD *)(a1 + 16) = i - 1;\n    v13 = (((*(_DWORD *)a1 >> 9) & 1) + 2 * *(_DWORD *)(a1 + 8)) ^ 1;\n    *(_DWORD *)(a1 + 8) = v13;\n    v3 = v4-- == 1;\n    *(_DWORD *)(a1 + 12) = v4;\n    if ( v3 )\n    {\n      v14 = *(_QWORD *)(a1 + 24);\n      v15 = *(signed int **)(a1 + 32);\n      v16 = *v15;\n      *v15 = v16 + 1;\n      *(_BYTE *)(v14 + v16) = v13;\n      *(_DWORD *)(a1 + 12) = 8;\n      v17 = *(_DWORD *)(a1 + 80);\n      v4 = 8;\n      if ( v17 >= 8 )\n      {\n        v18 = *(_DWORD *)(a1 + 88);\n        v19 = ~v17;\n        if ( ~v17 <= -17 )\n          v19 = -16;\n        v20 = v17 + v19 + 8;\n        *(_DWORD *)(a1 + 80) = v17 - (v20 & 0xFFFFFFF8) - 8;\n        *(_DWORD *)(a1 + 88) = v18 + (v20 >> 3) + 1;\n      }\n    }\n  }\n  v21 = ((*(_DWORD *)a1 >> 8) & 1) + 2 * *(_DWORD *)(a1 + 8);\n  *(_DWORD *)(a1 + 8) = v21;\n  v3 = v4 == 1;\n  v22 = v4 - 1;\n  *(_DWORD *)(a1 + 12) = v22;\n  if ( v3 )\n  {\n    v23 = *(_QWORD *)(a1 + 24);\n    v24 = *(signed int **)(a1 + 32);\n    v25 = *v24;\n    *v24 = v25 + 1;\n    *(_BYTE *)(v23 + v25) = v21;\n    *(_DWORD *)(a1 + 12) = 8;\n    v26 = *(_DWORD *)(a1 + 80);\n    v22 = 8;\n    if ( v26 >= 8 )\n    {\n      v27 = *(_DWORD *)(a1 + 88);\n      v28 = -16;\n      if ( ~v26 > -17 )\n        v28 = ~v26;\n      v29 = v26 + v28 + 8;\n      *(_DWORD *)(a1 + 80) = v26 - (v29 & 0xFFFFFFF8) - 8;\n      *(_DWORD *)(a1 + 88) = v27 + (v29 >> 3) + 1;\n    }\n  }\n  v30 = 2 * *(_DWORD *)(a1 + 8) + 1;\n  *(_DWORD *)(a1 + 8) = v30;\n  v3 = v22 == 1;\n  v31 = v22 - 1;\n  *(_DWORD *)(a1 + 12) = v31;\n  if ( v3 )\n  {\n    v32 = *(_QWORD *)(a1 + 24);\n    v33 = *(signed int **)(a1 + 32);\n    v34 = *v33;\n    *v33 = v34 + 1;\n    *(_BYTE *)(v32 + v34) = v30;\n    *(_DWORD *)(a1 + 12) = 8;\n    v35 = *(_DWORD *)(a1 + 80);\n    v31 = 8;\n    if ( v35 >= 8 )\n    {\n      v36 = *(_DWORD *)(a1 + 88);\n      v37 = -16;\n      if ( ~v35 > -17 )\n        v37 = ~v35;\n      v38 = v35 + v37 + 8;\n      *(_DWORD *)(a1 + 80) = v35 - (v38 & 0xFFFFFFF8) - 8;\n      *(_DWORD *)(a1 + 88) = v36 + (v38 >> 3) + 1;\n    }\n  }\n  v39 = 8 - v31;\n  result = off_49F6D0;\n  *((_DWORD *)off_49F6D8 + *((signed int *)off_49F6D0 + 6) + 332) += v39;\n  v41 = *(_DWORD *)(a1 + 12);\n  if ( v41 != 8 )\n  {\n    v42 = *(_DWORD *)(a1 + 8);\n    do\n    {\n      v42 *= 2;\n      v43 = v41 - 1;\n      if ( v41 == 9 )\n      {\n        *(_DWORD *)(a1 + 8) = v42;\n        *(_DWORD *)(a1 + 12) = v43;\n        goto LABEL_32;\n      }\n      --v41;\n    }\n    while ( v41 );\n    *(_DWORD *)(a1 + 8) = v42;\n    *(_DWORD *)(a1 + 12) = v43;\n    v44 = *(_QWORD *)(a1 + 24);\n    v45 = *(signed int **)(a1 + 32);\n    v46 = *v45;\n    *v45 = v46 + 1;\n    *(_BYTE *)(v44 + v46) = v42;\n    *(_DWORD *)(a1 + 12) = 8;\n    v47 = *(_DWORD *)(a1 + 80);\n    if ( v47 >= 8 )\n    {\n      v48 = *(_DWORD *)(a1 + 88);\n      v49 = -16;\n      if ( ~v47 > -17 )\n        v49 = ~v47;\n      *(_DWORD *)(a1 + 80) = v47 - ((v47 + v49 + 8) & 0xFFFFFFF8) - 8;\n      *(_DWORD *)(a1 + 88) = v48 + ((unsigned int)(v47 + v49 + 8) >> 3) + 1;\n    }\nLABEL_32:\n    result = off_49F6D0;\n  }\n  v50 = *(_DWORD *)(a1 + 88);\n  v51 = *(_DWORD *)(a1 + 80);\n  *(_DWORD *)(a1 + 88) = v51 + 8 * v50;\n  *(_DWORD *)(a1 + 96) = **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 96);\n  *(_DWORD *)(a1 + 88) = (*(_DWORD *)(result[1770] + 12LL) + v51 + 8 * v50 + 31 - *((_DWORD *)result + 3)) >> 5;\n  return result;\n}\n", 
            "funcStartAddr": "0x401360L", 
            "funcEndAddr": "0x40164fL", 
            "funcName": "sub_401360"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_401650(__int64 a1, __int16 a2, unsigned __int16 *a3)\n{\n  unsigned int v3; // ebp\n  int v4; // er10\n  __int64 v5; // r8\n  unsigned int v6; // er9\n  _BOOL4 v7; // ecx\n  unsigned int v8; // er10\n  int v9; // esi\n  int v10; // esi\n  int v11; // edx\n  bool v12; // zf\n  int v13; // esi\n  __int64 v14; // r9\n  signed int *v15; // rsi\n  __int64 v16; // r11\n  signed int v17; // ecx\n  int v18; // er9\n  int v19; // edx\n  unsigned int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  unsigned int v23; // ecx\n  int v24; // edx\n  int v25; // edx\n  __int64 v26; // rcx\n  signed int *v27; // rsi\n  __int64 v28; // rax\n  signed int v29; // edx\n  signed int v30; // esi\n  int i; // edx\n  __int64 v32; // rax\n  signed int *v33; // rcx\n  __int64 v34; // rsi\n  signed int v35; // edx\n  int v36; // eax\n  int v37; // ecx\n  unsigned int v38; // ecx\n  int v39; // edx\n\n  v3 = *(_DWORD *)a1;\n  v4 = *(_DWORD *)(a1 + 4);\n  v5 = *a3;\n  v6 = (unsigned __int8)byte_489870[4 * v5 + ((*(_DWORD *)(a1 + 4) >> 6) & 3)];\n  if ( dword_49FB94 )\n    ++*((_QWORD *)a3 + 1);\n  v7 = a2 != 0;\n  v8 = v4 - v6;\n  v9 = *((unsigned __int8 *)a3 + 2);\n  if ( v7 == v9 )\n  {\n    *a3 = word_489970[v5];\n    if ( v8 >= 0x100 )\n      goto LABEL_35;\n  }\n  else\n  {\n    if ( !(_WORD)v5 )\n      *((_BYTE *)a3 + 2) = v9 ^ 1;\n    v3 += v8;\n    *a3 = word_4899F0[v5];\n    v8 = v6;\n  }\n  do\n  {\n    if ( v3 < 0x200 )\n    {\n      if ( v3 > 0xFF )\n      {\n        ++*(_DWORD *)(a1 + 16);\n        v3 -= 256;\n      }\n      else\n      {\n        v30 = *(_DWORD *)(a1 + 12);\n        for ( i = 2 * *(_DWORD *)(a1 + 8); ; i = 2 * *(_DWORD *)(a1 + 8) + 1 )\n        {\n          *(_DWORD *)(a1 + 8) = i;\n          v12 = v30-- == 1;\n          *(_DWORD *)(a1 + 12) = v30;\n          if ( v12 )\n          {\n            v32 = *(_QWORD *)(a1 + 24);\n            v33 = *(signed int **)(a1 + 32);\n            v34 = *v33;\n            *v33 = v34 + 1;\n            *(_BYTE *)(v32 + v34) = i;\n            *(_DWORD *)(a1 + 12) = 8;\n            v35 = *(_DWORD *)(a1 + 80);\n            v30 = 8;\n            if ( v35 >= 8 )\n            {\n              v36 = *(_DWORD *)(a1 + 88);\n              v37 = ~v35;\n              if ( ~v35 <= -17 )\n                v37 = -16;\n              v38 = v35 + v37 + 8;\n              *(_DWORD *)(a1 + 80) = v35 - (v38 & 0xFFFFFFF8) - 8;\n              *(_DWORD *)(a1 + 88) = v36 + (v38 >> 3) + 1;\n            }\n          }\n          v39 = *(_DWORD *)(a1 + 16);\n          if ( !v39 )\n            break;\n          *(_DWORD *)(a1 + 16) = v39 - 1;\n        }\n      }\n    }\n    else\n    {\n      v10 = *(_DWORD *)(a1 + 12);\n      v11 = 2 * *(_DWORD *)(a1 + 8) + 1;\n      *(_DWORD *)(a1 + 8) = v11;\n      v12 = v10 == 1;\n      v13 = v10 - 1;\n      *(_DWORD *)(a1 + 12) = v13;\n      if ( v12 )\n      {\n        v14 = *(_QWORD *)(a1 + 24);\n        v15 = *(signed int **)(a1 + 32);\n        v16 = *v15;\n        *v15 = v16 + 1;\n        *(_BYTE *)(v14 + v16) = v11;\n        *(_DWORD *)(a1 + 12) = 8;\n        v17 = *(_DWORD *)(a1 + 80);\n        v13 = 8;\n        if ( v17 >= 8 )\n        {\n          v18 = *(_DWORD *)(a1 + 88);\n          v19 = ~v17;\n          if ( ~v17 <= -17 )\n            v19 = -16;\n          v20 = v17 + v19 + 8;\n          *(_DWORD *)(a1 + 80) = v17 - (v20 & 0xFFFFFFF8) - 8;\n          *(_DWORD *)(a1 + 88) = v18 + (v20 >> 3) + 1;\n        }\n      }\n      while ( 1 )\n      {\n        v24 = *(_DWORD *)(a1 + 16);\n        if ( !v24 )\n          break;\n        *(_DWORD *)(a1 + 16) = v24 - 1;\n        v25 = 2 * *(_DWORD *)(a1 + 8);\n        *(_DWORD *)(a1 + 8) = v25;\n        v12 = v13-- == 1;\n        *(_DWORD *)(a1 + 12) = v13;\n        if ( v12 )\n        {\n          v26 = *(_QWORD *)(a1 + 24);\n          v27 = *(signed int **)(a1 + 32);\n          v28 = *v27;\n          *v27 = v28 + 1;\n          *(_BYTE *)(v26 + v28) = v25;\n          *(_DWORD *)(a1 + 12) = 8;\n          v29 = *(_DWORD *)(a1 + 80);\n          v13 = 8;\n          if ( v29 >= 8 )\n          {\n            v21 = *(_DWORD *)(a1 + 88);\n            v22 = ~v29;\n            if ( ~v29 <= -17 )\n              v22 = -16;\n            v23 = v29 + v22 + 8;\n            *(_DWORD *)(a1 + 80) = v29 - (v23 & 0xFFFFFFF8) - 8;\n            *(_DWORD *)(a1 + 88) = v21 + (v23 >> 3) + 1;\n          }\n        }\n      }\n      v3 -= 512;\n    }\n    v3 *= 2;\n    v8 *= 2;\n  }\n  while ( v8 < 0x100 );\nLABEL_35:\n  *(_DWORD *)(a1 + 4) = v8;\n  *(_DWORD *)a1 = v3;\n  ++*(_DWORD *)(a1 + 80);\n}\n", 
            "funcStartAddr": "0x401650L", 
            "funcEndAddr": "0x4018c9L", 
            "funcName": "sub_401650"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4018D0(__int64 a1, __int16 a2)\n{\n  unsigned int v2; // er10\n  int v3; // ecx\n  int v4; // edx\n  bool v5; // zf\n  int v6; // ecx\n  __int64 v7; // r8\n  signed int *v8; // rsi\n  __int64 v9; // r9\n  signed int v10; // er9\n  int v11; // er8\n  int v12; // edx\n  unsigned int v13; // edx\n  int j; // esi\n  int v15; // esi\n  __int64 v16; // r9\n  signed int *v17; // rdx\n  __int64 v18; // rax\n  signed int v19; // esi\n  int v20; // er9\n  int v21; // edx\n  unsigned int v22; // edx\n  int v23; // ecx\n  int v24; // edx\n  int v25; // ecx\n  __int64 v26; // r8\n  signed int *v27; // rcx\n  __int64 v28; // rsi\n  signed int v29; // edx\n  int v30; // er8\n  int v31; // eax\n  unsigned int v32; // eax\n  int i; // esi\n  int v34; // esi\n  __int64 v35; // r9\n  signed int *v36; // rcx\n  __int64 v37; // rdx\n  signed int v38; // esi\n  int v39; // er9\n  int v40; // edx\n  unsigned int v41; // edx\n\n  v2 = 2 * *(_DWORD *)a1;\n  if ( a2 )\n    v2 += *(_DWORD *)(a1 + 4);\n  if ( v2 < 0x400 )\n  {\n    if ( v2 > 0x1FF )\n    {\n      ++*(_DWORD *)(a1 + 16);\n      v2 -= 512;\n    }\n    else\n    {\n      v23 = *(_DWORD *)(a1 + 12);\n      v24 = 2 * *(_DWORD *)(a1 + 8);\n      *(_DWORD *)(a1 + 8) = v24;\n      v5 = v23 == 1;\n      v25 = v23 - 1;\n      *(_DWORD *)(a1 + 12) = v25;\n      if ( v5 )\n      {\n        v26 = *(_QWORD *)(a1 + 24);\n        v27 = *(signed int **)(a1 + 32);\n        v28 = *v27;\n        *v27 = v28 + 1;\n        *(_BYTE *)(v26 + v28) = v24;\n        *(_DWORD *)(a1 + 12) = 8;\n        v29 = *(_DWORD *)(a1 + 80);\n        v25 = 8;\n        if ( v29 >= 8 )\n        {\n          v30 = *(_DWORD *)(a1 + 88);\n          v31 = -16;\n          if ( ~v29 > -17 )\n            v31 = ~v29;\n          v32 = v29 + v31 + 8;\n          *(_DWORD *)(a1 + 80) = v29 - (v32 & 0xFFFFFFF8) - 8;\n          *(_DWORD *)(a1 + 88) = v30 + (v32 >> 3) + 1;\n        }\n      }\n      for ( i = *(_DWORD *)(a1 + 16); i; i = *(_DWORD *)(a1 + 16) )\n      {\n        *(_DWORD *)(a1 + 16) = i - 1;\n        v34 = 2 * *(_DWORD *)(a1 + 8) + 1;\n        *(_DWORD *)(a1 + 8) = v34;\n        v5 = v25-- == 1;\n        *(_DWORD *)(a1 + 12) = v25;\n        if ( v5 )\n        {\n          v35 = *(_QWORD *)(a1 + 24);\n          v36 = *(signed int **)(a1 + 32);\n          v37 = *v36;\n          *v36 = v37 + 1;\n          *(_BYTE *)(v35 + v37) = v34;\n          *(_DWORD *)(a1 + 12) = 8;\n          v38 = *(_DWORD *)(a1 + 80);\n          v25 = 8;\n          if ( v38 >= 8 )\n          {\n            v39 = *(_DWORD *)(a1 + 88);\n            v40 = ~v38;\n            if ( ~v38 <= -17 )\n              v40 = -16;\n            v41 = v38 + v40 + 8;\n            *(_DWORD *)(a1 + 80) = v38 - (v41 & 0xFFFFFFF8) - 8;\n            *(_DWORD *)(a1 + 88) = v39 + (v41 >> 3) + 1;\n          }\n        }\n      }\n    }\n  }\n  else\n  {\n    v3 = *(_DWORD *)(a1 + 12);\n    v4 = 2 * *(_DWORD *)(a1 + 8) + 1;\n    *(_DWORD *)(a1 + 8) = v4;\n    v5 = v3 == 1;\n    v6 = v3 - 1;\n    *(_DWORD *)(a1 + 12) = v6;\n    if ( v5 )\n    {\n      v7 = *(_QWORD *)(a1 + 24);\n      v8 = *(signed int **)(a1 + 32);\n      v9 = *v8;\n      *v8 = v9 + 1;\n      *(_BYTE *)(v7 + v9) = v4;\n      *(_DWORD *)(a1 + 12) = 8;\n      v10 = *(_DWORD *)(a1 + 80);\n      v6 = 8;\n      if ( v10 >= 8 )\n      {\n        v11 = *(_DWORD *)(a1 + 88);\n        v12 = -16;\n        if ( ~v10 > -17 )\n          v12 = ~v10;\n        v13 = v10 + v12 + 8;\n        *(_DWORD *)(a1 + 80) = v10 - (v13 & 0xFFFFFFF8) - 8;\n        *(_DWORD *)(a1 + 88) = v11 + (v13 >> 3) + 1;\n      }\n    }\n    for ( j = *(_DWORD *)(a1 + 16); j; j = *(_DWORD *)(a1 + 16) )\n    {\n      *(_DWORD *)(a1 + 16) = j - 1;\n      v15 = 2 * *(_DWORD *)(a1 + 8);\n      *(_DWORD *)(a1 + 8) = v15;\n      v5 = v6-- == 1;\n      *(_DWORD *)(a1 + 12) = v6;\n      if ( v5 )\n      {\n        v16 = *(_QWORD *)(a1 + 24);\n        v17 = *(signed int **)(a1 + 32);\n        v18 = *v17;\n        *v17 = v18 + 1;\n        *(_BYTE *)(v16 + v18) = v15;\n        *(_DWORD *)(a1 + 12) = 8;\n        v19 = *(_DWORD *)(a1 + 80);\n        v6 = 8;\n        if ( v19 >= 8 )\n        {\n          v20 = *(_DWORD *)(a1 + 88);\n          v21 = ~v19;\n          if ( ~v19 <= -17 )\n            v21 = -16;\n          v22 = v19 + v21 + 8;\n          *(_DWORD *)(a1 + 80) = v19 - (v22 & 0xFFFFFFF8) - 8;\n          *(_DWORD *)(a1 + 88) = v20 + (v22 >> 3) + 1;\n        }\n      }\n    }\n    v2 -= 1024;\n  }\n  *(_DWORD *)a1 = v2;\n  ++*(_DWORD *)(a1 + 80);\n}\n", 
            "funcStartAddr": "0x4018d0L", 
            "funcEndAddr": "0x401b40L", 
            "funcName": "sub_4018D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401B40(__int64 a1, __int16 a2)\n{\n  int v2; // eax\n  unsigned int v3; // er14\n  __int64 result; // rax\n  int v5; // esi\n  int v6; // edx\n  bool v7; // zf\n  int v8; // esi\n  __int64 v9; // r9\n  signed int *v10; // r11\n  __int64 v11; // r10\n  signed int v12; // er10\n  int v13; // er9\n  int v14; // edx\n  unsigned int v15; // edx\n  int v16; // ecx\n  int v17; // edx\n  unsigned int v18; // edx\n  int v19; // edx\n  int v20; // edx\n  __int64 v21; // rsi\n  signed int *v22; // rcx\n  __int64 v23; // rbx\n  signed int v24; // ebp\n  signed int v25; // esi\n  int i; // edx\n  __int64 v27; // rcx\n  signed int *v28; // rsi\n  __int64 v29; // rbp\n  signed int v30; // ebp\n  int v31; // ecx\n  int v32; // edx\n  unsigned int v33; // edx\n  int v34; // edx\n\n  v2 = 0;\n  v3 = 2;\n  if ( !a2 )\n    v3 = *(_DWORD *)(a1 + 4) - 2;\n  if ( a2 )\n    v2 = *(_DWORD *)(a1 + 4) - 2;\n  result = (unsigned int)(*(_DWORD *)a1 + v2);\n  if ( v3 >= 0x100 )\n  {\n    v3 = *(_DWORD *)(a1 + 4) - 2;\n  }\n  else\n  {\n    do\n    {\n      if ( (unsigned int)result < 0x200 )\n      {\n        if ( (unsigned int)result > 0xFF )\n        {\n          ++*(_DWORD *)(a1 + 16);\n          LODWORD(result) = result - 256;\n        }\n        else\n        {\n          v25 = *(_DWORD *)(a1 + 12);\n          for ( i = 2 * *(_DWORD *)(a1 + 8); ; i = 2 * *(_DWORD *)(a1 + 8) + 1 )\n          {\n            *(_DWORD *)(a1 + 8) = i;\n            v7 = v25-- == 1;\n            *(_DWORD *)(a1 + 12) = v25;\n            if ( v7 )\n            {\n              v27 = *(_QWORD *)(a1 + 24);\n              v28 = *(signed int **)(a1 + 32);\n              v29 = *v28;\n              *v28 = v29 + 1;\n              *(_BYTE *)(v27 + v29) = i;\n              *(_DWORD *)(a1 + 12) = 8;\n              v30 = *(_DWORD *)(a1 + 80);\n              v25 = 8;\n              if ( v30 >= 8 )\n              {\n                v31 = *(_DWORD *)(a1 + 88);\n                v32 = ~v30;\n                if ( ~v30 <= -17 )\n                  v32 = -16;\n                v33 = v32 + v30 + 8;\n                *(_DWORD *)(a1 + 80) = v30 - (v33 & 0xFFFFFFF8) - 8;\n                *(_DWORD *)(a1 + 88) = v31 + (v33 >> 3) + 1;\n              }\n            }\n            v34 = *(_DWORD *)(a1 + 16);\n            if ( !v34 )\n              break;\n            *(_DWORD *)(a1 + 16) = v34 - 1;\n          }\n        }\n      }\n      else\n      {\n        v5 = *(_DWORD *)(a1 + 12);\n        v6 = 2 * *(_DWORD *)(a1 + 8) + 1;\n        *(_DWORD *)(a1 + 8) = v6;\n        v7 = v5 == 1;\n        v8 = v5 - 1;\n        *(_DWORD *)(a1 + 12) = v8;\n        if ( v7 )\n        {\n          v9 = *(_QWORD *)(a1 + 24);\n          v10 = *(signed int **)(a1 + 32);\n          v11 = *v10;\n          *v10 = v11 + 1;\n          *(_BYTE *)(v9 + v11) = v6;\n          *(_DWORD *)(a1 + 12) = 8;\n          v12 = *(_DWORD *)(a1 + 80);\n          v8 = 8;\n          if ( v12 >= 8 )\n          {\n            v13 = *(_DWORD *)(a1 + 88);\n            v14 = ~v12;\n            if ( ~v12 <= -17 )\n              v14 = -16;\n            v15 = v12 + v14 + 8;\n            *(_DWORD *)(a1 + 80) = v12 - (v15 & 0xFFFFFFF8) - 8;\n            *(_DWORD *)(a1 + 88) = v13 + (v15 >> 3) + 1;\n          }\n        }\n        while ( 1 )\n        {\n          v19 = *(_DWORD *)(a1 + 16);\n          if ( !v19 )\n            break;\n          *(_DWORD *)(a1 + 16) = v19 - 1;\n          v20 = 2 * *(_DWORD *)(a1 + 8);\n          *(_DWORD *)(a1 + 8) = v20;\n          v7 = v8-- == 1;\n          *(_DWORD *)(a1 + 12) = v8;\n          if ( v7 )\n          {\n            v21 = *(_QWORD *)(a1 + 24);\n            v22 = *(signed int **)(a1 + 32);\n            v23 = *v22;\n            *v22 = v23 + 1;\n            *(_BYTE *)(v21 + v23) = v20;\n            *(_DWORD *)(a1 + 12) = 8;\n            v24 = *(_DWORD *)(a1 + 80);\n            v8 = 8;\n            if ( v24 >= 8 )\n            {\n              v16 = *(_DWORD *)(a1 + 88);\n              v17 = ~v24;\n              if ( ~v24 <= -17 )\n                v17 = -16;\n              v18 = v17 + v24 + 8;\n              *(_DWORD *)(a1 + 80) = v24 - (v18 & 0xFFFFFFF8) - 8;\n              *(_DWORD *)(a1 + 88) = v16 + (v18 >> 3) + 1;\n            }\n          }\n        }\n        LODWORD(result) = result - 512;\n      }\n      result = (unsigned int)(2 * result);\n      v3 *= 2;\n    }\n    while ( v3 < 0x100 );\n  }\n  *(_DWORD *)(a1 + 4) = v3;\n  *(_DWORD *)a1 = result;\n  ++*(_DWORD *)(a1 + 80);\n  return result;\n}\n", 
            "funcStartAddr": "0x401b40L", 
            "funcEndAddr": "0x401d7fL", 
            "funcName": "sub_401B40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401D80(__int64 a1, _DWORD *a2)\n{\n  int v2; // ecx\n  int v3; // ecx\n  signed int v4; // eax\n  unsigned int v5; // ecx\n  __int64 result; // rax\n  __int16 v7; // dx\n\n  v2 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 10) >= 0 )\n    v2 = *((_DWORD *)off_49F6D0 + 10);\n  v3 = a2[1] + (*a2 * v2 >> 4);\n  v4 = 1;\n  if ( v3 > 0 )\n    v4 = v3;\n  v5 = 126;\n  if ( v4 < 127 )\n    v5 = v4;\n  result = 63 - v5;\n  v7 = v5 - 64;\n  if ( v5 <= 0x3F )\n    v7 = result;\n  *(_WORD *)a1 = v7;\n  *(_BYTE *)(a1 + 2) = v5 > 0x3F;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x401d80L", 
            "funcEndAddr": "0x401dd0L", 
            "funcName": "sub_401D80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_401DD0(char a1, char a2, int *a3, int *a4, _DWORD *a5)\n{\n  int v5; // er13\n  int v6; // ebx\n  signed int v7; // ebp\n  int *v8; // r15\n  bool v9; // al\n  _BOOL4 v10; // edx\n  int v11; // esi\n  int v12; // eax\n  int v13; // er8\n  int v14; // edi\n  int v15; // eax\n  int v16; // esi\n  int v17; // er12\n  int v18; // er10\n  int v19; // edi\n  int v20; // er8\n  __int64 v21; // rdi\n  bool v22; // r13\n  bool v23; // bl\n  bool v24; // r9\n  __int64 v25; // rax\n  int v26; // er15\n  int v27; // er14\n  int v28; // er11\n  int v29; // esi\n  int v30; // eax\n  int v31; // ebp\n  int v32; // edx\n  int v33; // ecx\n  __int64 v34; // rax\n  int v35; // edx\n  int v36; // ebp\n  int v37; // er12\n  int v38; // eax\n  int v39; // ecx\n  void *v40; // rdi\n  int v41; // ecx\n  signed int v42; // eax\n  unsigned __int64 result; // rax\n  _BOOL4 v44; // esi\n  _WORD *v45; // rdx\n  int v46; // er12\n  unsigned int v47; // ecx\n  int v48; // er13\n  unsigned int v49; // ebp\n  int v50; // kr18_4\n  unsigned int v51; // er14\n  int v52; // er9\n  int v53; // er11\n  int v54; // er8\n  int v55; // ecx\n  unsigned int v56; // ecx\n  int v57; // edi\n  int v58; // esi\n  unsigned int v59; // ecx\n  unsigned int v60; // ecx\n  unsigned int v61; // eax\n  int v62; // edi\n  int v63; // ebx\n  unsigned int v64; // edx\n  int v65; // ecx\n  unsigned int v66; // edx\n  unsigned int v67; // er11\n  int v68; // edx\n  unsigned int v69; // ST08_4\n  unsigned int v70; // er13\n  int v71; // er15\n  unsigned int v72; // edx\n  int v73; // edi\n  unsigned int v74; // ecx\n  int v75; // ebp\n  unsigned int v76; // er12\n  int v77; // er8\n  unsigned int v78; // esi\n  __int16 v79; // ST6C_2\n  unsigned int v80; // er10\n  unsigned int v81; // ebx\n  unsigned int v82; // edi\n  unsigned int v83; // edi\n  unsigned int v84; // edi\n  unsigned int v85; // edx\n  __int64 v86; // [rsp+8h] [rbp-140h]\n  int *v87; // [rsp+10h] [rbp-138h]\n  _DWORD *v88; // [rsp+18h] [rbp-130h]\n  int v89; // [rsp+20h] [rbp-128h]\n  int v90; // [rsp+24h] [rbp-124h]\n  int v91; // [rsp+28h] [rbp-120h]\n  int v92; // [rsp+2Ch] [rbp-11Ch]\n  int v93; // [rsp+30h] [rbp-118h]\n  int v94; // [rsp+34h] [rbp-114h]\n  int v95; // [rsp+38h] [rbp-110h]\n  int v96; // [rsp+3Ch] [rbp-10Ch]\n  int v97; // [rsp+40h] [rbp-108h]\n  int v98; // [rsp+44h] [rbp-104h]\n  int v99; // [rsp+48h] [rbp-100h]\n  int v100; // [rsp+4Ch] [rbp-FCh]\n  int v101; // [rsp+50h] [rbp-F8h]\n  int *v102; // [rsp+60h] [rbp-E8h]\n  _BOOL4 v103; // [rsp+70h] [rbp-D8h]\n  int v104; // [rsp+74h] [rbp-D4h]\n  int v105; // [rsp+80h] [rbp-C8h]\n  int v106; // [rsp+84h] [rbp-C4h]\n  int v107; // [rsp+88h] [rbp-C0h]\n  int v108; // [rsp+8Ch] [rbp-BCh]\n  int v109; // [rsp+98h] [rbp-B0h]\n  int v110; // [rsp+9Ch] [rbp-ACh]\n  int v111; // [rsp+A0h] [rbp-A8h]\n  int v112; // [rsp+A4h] [rbp-A4h]\n  int v113; // [rsp+B0h] [rbp-98h]\n  int v114; // [rsp+B4h] [rbp-94h]\n  int v115; // [rsp+B8h] [rbp-90h]\n  int v116; // [rsp+BCh] [rbp-8Ch]\n  int v117; // [rsp+C8h] [rbp-80h]\n  int v118; // [rsp+CCh] [rbp-7Ch]\n  int v119; // [rsp+D0h] [rbp-78h]\n  int v120; // [rsp+D4h] [rbp-74h]\n  int v121; // [rsp+E0h] [rbp-68h]\n  int v122; // [rsp+E4h] [rbp-64h]\n  int v123; // [rsp+E8h] [rbp-60h]\n  int v124; // [rsp+ECh] [rbp-5Ch]\n  int v125; // [rsp+F8h] [rbp-50h]\n  int v126; // [rsp+FCh] [rbp-4Ch]\n  int v127; // [rsp+100h] [rbp-48h]\n  int v128; // [rsp+104h] [rbp-44h]\n  int v129; // [rsp+110h] [rbp-38h]\n  int v130; // [rsp+114h] [rbp-34h]\n\n  v88 = a5;\n  v87 = a4;\n  v102 = a3;\n  v86 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v5 = a1 & 0xF;\n  v6 = a2 & 0xF;\n  v7 = *((_DWORD *)off_49F6D0 + 3);\n  sub_437200(*((_DWORD *)off_49F6D0 + 3), v5 - 1, v6, 1, &v111);\n  sub_437200(v7, v5 - 1, v6 + 1, 1, &v115);\n  sub_437200(v7, v5 - 1, v6 + 2, 1, &v119);\n  sub_437200(v7, v5 - 1, v6 + 3, 1, &v123);\n  sub_437200(v7, v5, v6 - 1, 1, &v107);\n  sub_437200(v7, v5 + 4, v6 - 1, 1, &v103);\n  v8 = &v127;\n  sub_437200(v7, v5 - 1, v6 - 1, 1, &v127);\n  if ( v103 )\n    v9 = ((v5 | 8) ^ 0xC | (v6 | 8) ^ 0xC) != 0;\n  else\n    v9 = 0;\n  v10 = v9;\n  v103 = v9;\n  if ( !*((_DWORD *)dest + 54) )\n  {\n    v20 = v111;\n    v18 = v107;\n    v17 = v9;\n    goto LABEL_20;\n  }\n  v11 = 0;\n  LOBYTE(v12) = 0;\n  if ( v111 )\n    v12 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v112);\n  if ( v115 )\n    v11 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v116);\n  v13 = 0;\n  v14 = 0;\n  if ( v119 )\n    v14 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v120);\n  v15 = v12 & 1;\n  if ( v123 )\n    v13 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v124);\n  v16 = v15 & v11;\n  v17 = 0;\n  v18 = 0;\n  if ( v107 )\n    v18 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v108);\n  v19 = v16 & v14;\n  if ( v10 )\n    v17 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v104);\n  v20 = v19 & v13;\n  if ( v127 )\n  {\n    v8 = (int *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v128);\nLABEL_20:\n    v21 = v86;\n    v22 = *v8 != 0;\n    goto LABEL_22;\n  }\n  v22 = 0;\n  v21 = v86;\nLABEL_22:\n  v23 = v18 != 0 && v20 != 0;\n  v24 = v22 && v23;\n  *v102 = v20;\n  *v87 = v18;\n  *v88 = v22 && v23;\n  if ( v18 )\n  {\n    v25 = *(_QWORD *)(v21 + 8LL * v110);\n    v26 = *(unsigned __int16 *)(v25 + 2LL * v109);\n    v27 = *(unsigned __int16 *)(v25 + 2LL * v109 + 2);\n    v28 = *(unsigned __int16 *)(v25 + 2LL * v109 + 4);\n    v29 = *(unsigned __int16 *)(v25 + 2LL * v109 + 6);\n  }\n  else\n  {\n    v29 = *((_DWORD *)off_49F6D0 + 18170);\n    v28 = *((_DWORD *)off_49F6D0 + 18170);\n    v27 = *((_DWORD *)off_49F6D0 + 18170);\n    v26 = *((_DWORD *)off_49F6D0 + 18170);\n  }\n  v93 = v29;\n  v92 = v28;\n  v91 = v27;\n  v90 = v26;\n  v30 = v29;\n  v31 = v29;\n  v32 = v29;\n  v33 = v29;\n  if ( v17 )\n  {\n    v34 = *(_QWORD *)(v21 + 8LL * v106);\n    v33 = *(unsigned __int16 *)(v34 + 2LL * v105);\n    v32 = *(unsigned __int16 *)(v34 + 2LL * v105 + 2);\n    v31 = *(unsigned __int16 *)(v34 + 2LL * v105 + 4);\n    v30 = *(unsigned __int16 *)(v34 + 2LL * v105 + 6);\n    v21 = v86;\n  }\n  v97 = v30;\n  v96 = v31;\n  v95 = v32;\n  v94 = v33;\n  if ( v20 )\n  {\n    v35 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 8LL * v114) + 2LL * v113);\n    v36 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 8LL * v118) + 2LL * v117);\n    v37 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 8LL * v122) + 2LL * v121);\n    v38 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 8LL * v126) + 2LL * v125);\n  }\n  else\n  {\n    v38 = *((_DWORD *)off_49F6D0 + 18170);\n    v37 = *((_DWORD *)off_49F6D0 + 18170);\n    v36 = *((_DWORD *)off_49F6D0 + 18170);\n    v35 = *((_DWORD *)off_49F6D0 + 18170);\n  }\n  v101 = v38;\n  v100 = v37;\n  v99 = v36;\n  v98 = v35;\n  if ( v22 )\n  {\n    v39 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 8LL * v130) + 2LL * v129);\n    v40 = off_49F6D0;\n  }\n  else\n  {\n    v40 = off_49F6D0;\n    v39 = *((_DWORD *)off_49F6D0 + 18170);\n  }\n  v89 = v39;\n  *((_WORD *)v40 + 92) = -1;\n  *((_WORD *)v40 + 348) = -1;\n  *((_WORD *)v40 + 604) = -1;\n  *((_WORD *)v40 + 860) = -1;\n  *((_WORD *)v40 + 1116) = -1;\n  *((_WORD *)v40 + 1372) = -1;\n  *((_WORD *)v40 + 1628) = -1;\n  *((_WORD *)v40 + 1884) = -1;\n  *((_WORD *)v40 + 2140) = -1;\n  if ( v23 )\n  {\n    v41 = v37 + v36 + v35 + v29 + v28 + v26 + v27;\n    v42 = (signed int)(((unsigned int)((v38 + v41 + 4) >> 31) >> 29) + v41 + v38 + 4) >> 3;\n  }\n  else if ( v18 || !v20 )\n  {\n    if ( !v18 || v20 )\n      v42 = *((_DWORD *)v40 + 18170);\n    else\n      v42 = (signed int)(((unsigned int)((v29 + v28 + v26 + v27 + 2) >> 31) >> 30) + v28 + v26 + v27 + v29 + 2) >> 2;\n  }\n  else\n  {\n    v42 = (signed int)(((unsigned int)((v38 + v37 + v35 + v36 + 2) >> 31) >> 30) + v37 + v35 + v36 + v38 + 2) >> 2;\n  }\n  *((_WORD *)v40 + 604) = v42;\n  *((_WORD *)v40 + 620) = v42;\n  *((_WORD *)v40 + 636) = v42;\n  *((_WORD *)v40 + 652) = v42;\n  *((_WORD *)v40 + 605) = v42;\n  *((_WORD *)v40 + 621) = v42;\n  *((_WORD *)v40 + 637) = v42;\n  *((_WORD *)v40 + 653) = v42;\n  *((_WORD *)v40 + 606) = v42;\n  *((_WORD *)v40 + 622) = v42;\n  *((_WORD *)v40 + 638) = v42;\n  *((_WORD *)v40 + 654) = v42;\n  *((_WORD *)v40 + 607) = v42;\n  *((_WORD *)v40 + 623) = v42;\n  *((_WORD *)v40 + 639) = v42;\n  *((_WORD *)v40 + 655) = v42;\n  *((_WORD *)v40 + 140) = v26;\n  *((_WORD *)v40 + 124) = v26;\n  *((_WORD *)v40 + 108) = v26;\n  *((_WORD *)v40 + 92) = v26;\n  *((_WORD *)v40 + 351) = v35;\n  *((_WORD *)v40 + 350) = v35;\n  *((_WORD *)v40 + 349) = v35;\n  *((_WORD *)v40 + 348) = v35;\n  *((_WORD *)v40 + 141) = v27;\n  *((_WORD *)v40 + 125) = v27;\n  *((_WORD *)v40 + 109) = v27;\n  *((_WORD *)v40 + 93) = v27;\n  *((_WORD *)v40 + 367) = v36;\n  *((_WORD *)v40 + 366) = v36;\n  *((_WORD *)v40 + 365) = v36;\n  *((_WORD *)v40 + 364) = v36;\n  *((_WORD *)v40 + 142) = v28;\n  *((_WORD *)v40 + 126) = v28;\n  *((_WORD *)v40 + 110) = v28;\n  *((_WORD *)v40 + 94) = v28;\n  *((_WORD *)v40 + 383) = v37;\n  *((_WORD *)v40 + 382) = v37;\n  *((_WORD *)v40 + 381) = v37;\n  *((_WORD *)v40 + 380) = v37;\n  *((_WORD *)v40 + 143) = v29;\n  *((_WORD *)v40 + 127) = v29;\n  *((_WORD *)v40 + 111) = v29;\n  *((_WORD *)v40 + 95) = v29;\n  result = (unsigned __int16)v101;\n  *((_WORD *)v40 + 399) = v101;\n  *((_WORD *)v40 + 398) = v101;\n  *((_WORD *)v40 + 397) = v101;\n  *((_WORD *)v40 + 396) = v101;\n  if ( v18 )\n  {\n    if ( v20 )\n      goto LABEL_44;\n  }\n  else\n  {\n    result = (unsigned __int64)off_49F6D0;\n    *((_WORD *)off_49F6D0 + 92) = -1;\n    if ( v20 )\n    {\nLABEL_44:\n      if ( !v18 )\n        goto LABEL_46;\n      goto LABEL_45;\n    }\n  }\n  result = (unsigned __int64)off_49F6D0;\n  *((_WORD *)off_49F6D0 + 348) = -1;\n  if ( v18 )\n  {\nLABEL_45:\n    v44 = v28;\n    v45 = off_49F6D0;\n    *((_WORD *)off_49F6D0 + 860) = (v28 + v26 + 2 + 2 * v27) / 4;\n    v46 = v93;\n    v47 = (v93 + v27 + 2 + 2 * v44 + ((unsigned int)((v93 + v27 + 2 + 2 * v44) >> 31) >> 30)) >> 2;\n    v45[876] = v47;\n    v45[861] = v47;\n    v48 = v94;\n    v49 = (v94 + v44 + 2 * v46 + 2 + ((unsigned int)((v94 + v44 + 2 * v46 + 2) >> 31) >> 30)) >> 2;\n    v45[892] = (v94 + v28 + 2 * v93 + 2) / 4;\n    v45[877] = (v94 + v28 + 2 * v93 + 2) / 4;\n    v45[862] = (v94 + v28 + 2 * v93 + 2) / 4;\n    v45[908] = (v95 + v93 + 2 * v94 + 2) / 4;\n    v50 = v95 + v93 + 2 * v94 + 2;\n    v45[893] = (v95 + v93 + 2 * v94 + 2) / 4;\n    v45[878] = v50 / 4;\n    v45[863] = v50 / 4;\n    v51 = (((unsigned int)((v96 + v48 + 2 * v95 + 2) >> 31) >> 30) + v48 + 2 * v95 + v96 + 2) >> 2;\n    v45[909] = v51;\n    v45[894] = v51;\n    v45[879] = v51;\n    LOBYTE(v44) = v24;\n    v52 = v95 + 2 * v96;\n    v53 = v20;\n    v54 = v52 + v97;\n    v55 = v97 + v52 + 2;\n    v24 = v44;\n    v56 = ((unsigned int)(v55 >> 31) >> 30) + v54 + 2;\n    v20 = v53;\n    v56 >>= 2;\n    v45[910] = v56;\n    v45[895] = v56;\n    v45[911] = (((unsigned int)((v96 + 3 * v97 + 2) >> 31) >> 30) + 3 * v97 + v96 + 2) >> 2;\n    v57 = v91;\n    v45[1884] = (((unsigned int)(v57 + v26 + 1) >> 31) + v57 + v26 + 1) >> 1;\n    v58 = v92;\n    v59 = (v58 + v57 + 1 + ((unsigned int)(v58 + v57 + 1) >> 31)) >> 1;\n    v45[1916] = v59;\n    v45[1885] = v59;\n    v60 = (v58 + v46 + 1 + ((unsigned int)(v58 + v46 + 1) >> 31)) >> 1;\n    v45[1917] = v60;\n    v45[1886] = v60;\n    v61 = (((unsigned int)(v46 + v48 + 1) >> 31) + v48 + v46 + 1) >> 1;\n    v45[1918] = v61;\n    v45[1887] = v61;\n    v45[1919] = (((unsigned int)(v95 + v94 + 1) >> 31) + v95 + v94 + 1) >> 1;\n    v45[1900] = (v92 + v26 + 2 + 2 * v91) / 4;\n    result = (unsigned int)(v91 + v93 + 2 * v92 + 2);\n    v45[1932] = (signed int)result / 4;\n    v45[1901] = (signed int)result / 4;\n    v45[1933] = v49;\n    v45[1902] = v49;\n    v45[1934] = (v95 + v93 + 2 * v94 + 2) / 4;\n    v45[1903] = (v95 + v93 + 2 * v94 + 2) / 4;\n    v45[1935] = v51;\n  }\nLABEL_46:\n  if ( v20 )\n  {\n    v62 = v99;\n    result = (unsigned __int64)off_49F6D0;\n    *((_WORD *)off_49F6D0 + 2140) = (v99 + v98 + 1) / 2;\n    v63 = v100;\n    *(_WORD *)(result + 4282) = (v100 + v98 + 2 + 2 * v99) / 4;\n    v64 = (v62 + v63 + 1 + ((unsigned int)(v62 + v63 + 1) >> 31)) >> 1;\n    *(_WORD *)(result + 4312) = v64;\n    *(_WORD *)(result + 4284) = v64;\n    v65 = v101;\n    v66 = (((unsigned int)((v101 + v62 + 2 * v63 + 2) >> 31) >> 30) + v101 + v62 + 2 * v63 + 2) >> 2;\n    *(_WORD *)(result + 4314) = v66;\n    *(_WORD *)(result + 4286) = v66;\n    v67 = (v63 + v65 + 1 + ((unsigned int)(v63 + v65 + 1) >> 31)) >> 1;\n    *(_WORD *)(result + 4344) = (v100 + v101 + 1) / 2;\n    *(_WORD *)(result + 4316) = (v100 + v101 + 1) / 2;\n    v68 = v100 + v65 + 2 + 2 * v65;\n    *(_WORD *)(result + 4346) = v68 / 4;\n    *(_WORD *)(result + 4318) = v68 / 4;\n    *(_WORD *)(result + 4382) = v101;\n    *(_WORD *)(result + 4380) = v101;\n    *(_WORD *)(result + 4378) = v101;\n    *(_WORD *)(result + 4350) = v101;\n    *(_WORD *)(result + 4348) = v101;\n    *(_WORD *)(result + 4376) = v101;\n    if ( v24 )\n    {\n      v69 = (2 * v100 + v99 + v101 + 2 + ((unsigned int)((2 * v100 + v99 + v101 + 2) >> 31) >> 30)) >> 2;\n      *(_WORD *)(result + 2328) = v69;\n      v70 = (2 * v99 + v98 + v100 + 2 + ((unsigned int)((2 * v99 + v98 + v100 + 2) >> 31) >> 30)) >> 2;\n      *(_WORD *)(result + 2330) = (2 * v99 + v98 + v100 + 2) / 4;\n      *(_WORD *)(result + 2296) = (2 * v99 + v98 + v100 + 2) / 4;\n      v71 = v89;\n      v72 = (v89 + v99 + 2 * v98 + 2 + ((unsigned int)((v89 + v99 + 2 * v98 + 2) >> 31) >> 30)) >> 2;\n      *(_WORD *)(result + 2332) = v72;\n      *(_WORD *)(result + 2298) = v72;\n      *(_WORD *)(result + 2264) = v72;\n      v73 = v90;\n      v74 = (v90 + v98 + 2 * v71 + 2 + ((unsigned int)((v90 + v98 + 2 * v71 + 2) >> 31) >> 30)) >> 2;\n      *(_WORD *)(result + 2334) = v74;\n      *(_WORD *)(result + 2300) = v74;\n      *(_WORD *)(result + 2266) = v74;\n      *(_WORD *)(result + 2232) = v74;\n      v75 = v91;\n      v76 = (((unsigned int)((v71 + 2 * v73 + v91 + 2) >> 31) >> 30) + v71 + 2 * v73 + v91 + 2) >> 2;\n      *(_WORD *)(result + 2302) = v76;\n      *(_WORD *)(result + 2268) = v76;\n      *(_WORD *)(result + 2234) = v76;\n      v77 = v92;\n      v78 = (((unsigned int)((v92 + v73 + 2 * v75 + 2) >> 31) >> 30) + v73 + 2 * v75 + v92 + 2) >> 2;\n      *(_WORD *)(result + 2270) = v78;\n      *(_WORD *)(result + 2236) = v78;\n      v79 = (v99 + v98 + 1) / 2;\n      v80 = (((unsigned int)((v93 + v75 + 2 * v77 + 2) >> 31) >> 30) + v75 + 2 * v77 + v93 + 2) >> 2;\n      *(_WORD *)(result + 2238) = v80;\n      v81 = (((unsigned int)(v89 + v90 + 1) >> 31) + v89 + v90 + 1) >> 1;\n      *(_WORD *)(result + 2810) = v81;\n      *(_WORD *)(result + 2744) = v81;\n      v82 = (((unsigned int)(v73 + v75 + 1) >> 31) + v75 + v73 + 1) >> 1;\n      *(_WORD *)(result + 2812) = v82;\n      *(_WORD *)(result + 2746) = v82;\n      v83 = (((unsigned int)(v77 + v75 + 1) >> 31) + v77 + v75 + 1) >> 1;\n      *(_WORD *)(result + 2814) = v83;\n      *(_WORD *)(result + 2748) = v83;\n      *(_WORD *)(result + 2750) = (((unsigned int)(v92 + v93 + 1) >> 31) + v93 + v92 + 1) >> 1;\n      *(_WORD *)(result + 2842) = v74;\n      *(_WORD *)(result + 2776) = v74;\n      *(_WORD *)(result + 2844) = v76;\n      *(_WORD *)(result + 2778) = v76;\n      *(_WORD *)(result + 2846) = v78;\n      *(_WORD *)(result + 2780) = v78;\n      *(_WORD *)(result + 2782) = v80;\n      *(_WORD *)(result + 2808) = v72;\n      *(_WORD *)(result + 2840) = v70;\n      v84 = (v89 + v98 + ((unsigned int)(v98 + v89 + 1) >> 31) + 1) >> 1;\n      *(_WORD *)(result + 3292) = v84;\n      *(_WORD *)(result + 3256) = v84;\n      *(_WORD *)(result + 3294) = v74;\n      *(_WORD *)(result + 3258) = v74;\n      *(_WORD *)(result + 3260) = v76;\n      *(_WORD *)(result + 3262) = v78;\n      *(_WORD *)(result + 3324) = v79;\n      *(_WORD *)(result + 3288) = v79;\n      *(_WORD *)(result + 3326) = v72;\n      *(_WORD *)(result + 3290) = v72;\n      v85 = (v99 + v100 + 1 + ((unsigned int)(v99 + v100 + 1) >> 31)) >> 1;\n      *(_WORD *)(result + 3356) = v85;\n      *(_WORD *)(result + 3320) = v85;\n      *(_WORD *)(result + 3358) = v70;\n      *(_WORD *)(result + 3322) = v70;\n      *(_WORD *)(result + 3352) = v67;\n      *(_WORD *)(result + 3354) = v69;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401dd0L", 
            "funcEndAddr": "0x402ac5L", 
            "funcName": "sub_401DD0"
        }, 
        {
            "decompiledFuncCode": "char *sub_402AD0()\n{\n  __int64 v0; // r15\n  signed int v1; // er14\n  int v2; // ebp\n  int *v3; // rbx\n  signed __int64 v4; // r12\n  int v5; // ebx\n  int v6; // er14\n  int v7; // eax\n  signed __int64 v8; // rdx\n  int v9; // esi\n  int v10; // edi\n  int v11; // eax\n  int v12; // er8\n  __int64 v13; // r11\n  __int64 v14; // r10\n  signed __int64 v15; // rcx\n  int v16; // edx\n  signed __int64 v17; // rsi\n  int v18; // ebx\n  bool v19; // r9\n  signed int v20; // ebp\n  bool v21; // cl\n  signed int v22; // ebp\n  signed __int64 v23; // rcx\n  int *v24; // rdx\n  signed __int64 v25; // rsi\n  char *result; // rax\n  __m128i v27; // xmm4\n  __int16 v28; // r14\n  __int16 v29; // di\n  __int16 v30; // bx\n  __int16 v31; // cx\n  signed __int64 v32; // rsi\n  __m128i v33; // xmm0\n  __m128i v34; // xmm1\n  __m128i v35; // xmm2\n  __m128i v36; // xmm3\n  unsigned int v37; // edx\n  __m128i v38; // xmm4\n  __int64 v39; // rdx\n  int v40; // esi\n  int v41; // ebp\n  int v42; // ebx\n  int v43; // esi\n  int v44; // ecx\n  int v45; // edi\n  int v46; // ecx\n  int v47; // esi\n  int v48; // edi\n  int v49; // edx\n  __m128i v50; // xmm0\n  __m128i v51; // xmm1\n  __m128i v52; // xmm8\n  __m128i v53; // xmm1\n  __m128i v54; // xmm9\n  __m128i v55; // xmm4\n  __m128i v56; // xmm1\n  __m128i v57; // xmm10\n  __m128i v58; // xmm1\n  __m128i v59; // xmm11\n  unsigned int v60; // ecx\n  signed __int64 v61; // rsi\n  __m128i v62; // xmm1\n  __m128i v63; // xmm7\n  __m128i v64; // xmm0\n  __m128i v65; // xmm6\n  __m128i v66; // xmm0\n  __m128i v67; // xmm7\n  __m128i v68; // xmm3\n  __m128i v69; // xmm3\n  __m128i v70; // xmm7\n  __m128i v71; // xmm0\n  __m128i v72; // xmm1\n  __m128i v73; // xmm2\n  __m128i v74; // xmm1\n  __m128i v75; // xmm0\n  __m128i v76; // xmm3\n  __m128i v77; // xmm3\n  __m128i v78; // xmm0\n  int v79; // [rsp+8h] [rbp-260h]\n  int v80; // [rsp+Ch] [rbp-25Ch]\n  int v81; // [rsp+18h] [rbp-250h]\n  int v82; // [rsp+1Ch] [rbp-24Ch]\n  int v83; // [rsp+20h] [rbp-248h]\n  int v84; // [rsp+24h] [rbp-244h]\n  int v85; // [rsp+30h] [rbp-238h]\n  int v86; // [rsp+34h] [rbp-234h]\n  int v87; // [rsp+38h] [rbp-230h]\n  int v88; // [rsp+48h] [rbp-220h]\n  int v89; // [rsp+4Ch] [rbp-21Ch]\n  int v90; // [rsp+60h] [rbp-208h]\n  int v91; // [rsp+64h] [rbp-204h]\n  int v92; // [rsp+78h] [rbp-1F0h]\n  int v93; // [rsp+7Ch] [rbp-1ECh]\n  int v94; // [rsp+90h] [rbp-1D8h]\n  int v95; // [rsp+94h] [rbp-1D4h]\n  int v96; // [rsp+A8h] [rbp-1C0h]\n  int v97; // [rsp+ACh] [rbp-1BCh]\n  int v98; // [rsp+C0h] [rbp-1A8h]\n  int v99; // [rsp+C4h] [rbp-1A4h]\n  int v100; // [rsp+D8h] [rbp-190h]\n  int v101; // [rsp+DCh] [rbp-18Ch]\n  int v102; // [rsp+108h] [rbp-160h]\n  int v103; // [rsp+10Ch] [rbp-15Ch]\n  int v104; // [rsp+120h] [rbp-148h]\n  int v105; // [rsp+124h] [rbp-144h]\n  int v106; // [rsp+138h] [rbp-130h]\n  int v107; // [rsp+13Ch] [rbp-12Ch]\n  int v108; // [rsp+150h] [rbp-118h]\n  int v109; // [rsp+154h] [rbp-114h]\n  int v110; // [rsp+168h] [rbp-100h]\n  int v111; // [rsp+16Ch] [rbp-FCh]\n  int v112; // [rsp+180h] [rbp-E8h]\n  int v113; // [rsp+184h] [rbp-E4h]\n  int v114; // [rsp+198h] [rbp-D0h]\n  int v115; // [rsp+19Ch] [rbp-CCh]\n  int v116; // [rsp+1B0h] [rbp-B8h]\n  int v117; // [rsp+1B4h] [rbp-B4h]\n  int v118; // [rsp+1B8h] [rbp-B0h]\n  int v119; // [rsp+1BCh] [rbp-ACh]\n  __m128 v120; // [rsp+1C0h] [rbp-A8h]\n  __m128 v121; // [rsp+1D0h] [rbp-98h]\n  __m128 v122; // [rsp+1E0h] [rbp-88h]\n  __m128 v123; // [rsp+1F0h] [rbp-78h]\n  __m128 v124; // [rsp+200h] [rbp-68h]\n  __m128 v125; // [rsp+210h] [rbp-58h]\n  __int16 v126; // [rsp+220h] [rbp-48h]\n  __int16 v127; // [rsp+228h] [rbp-40h]\n  __int16 v128; // [rsp+230h] [rbp-38h]\n  __int16 v129; // [rsp+238h] [rbp-30h]\n  int v130; // [rsp+240h] [rbp-28h]\n  int v131[9]; // [rsp+244h] [rbp-24h]\n\n  v0 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v1 = *((_DWORD *)off_49F6D0 + 3);\n  v2 = -1;\n  v3 = &v83;\n  v4 = 17LL;\n  do\n  {\n    sub_437200(v1, -1, v2++, 1, v3);\n    v3 += 6;\n    --v4;\n  }\n  while ( v4 );\n  v5 = 0;\n  sub_437200(v1, 0, -1, 1, &v79);\n  v6 = v79;\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( v79 )\n      v5 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v80);\n    v7 = 1;\n    v8 = 4611686018427387808LL;\n    do\n    {\n      v9 = 0;\n      v10 = 0;\n      if ( *(int *)((char *)&v118 + v8 * 4) )\n        v10 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *(int *)((char *)&v119 + v8 * 4));\n      v11 = v10 & v7;\n      if ( v121.m128_i32[v8] )\n        v9 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v121.m128_i32[v8 + 1]);\n      v7 = v9 & v11;\n      v8 += 12LL;\n    }\n    while ( v8 * 4 );\n    if ( v83 )\n      v12 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v84);\n    else\n      v12 = 0;\n    v6 = v5;\n  }\n  else\n  {\n    v12 = v83;\n    v7 = v87;\n  }\n  v13 = v82;\n  v14 = v81;\n  v15 = 2LL * v81;\n  v16 = 0;\n  v17 = 9223372036854775712LL;\n  v18 = 0;\n  do\n  {\n    if ( v6 )\n      v16 += *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v82) + v15);\n    if ( v7 )\n      v18 += *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v120.m128_i32[v17 + 3]) + 2LL * v120.m128_i32[v17 + 2]);\n    v15 += 2LL;\n    v17 += 6LL;\n  }\n  while ( v17 * 2 );\n  v19 = v6 != 0 && v7 != 0;\n  if ( v19 == 1 )\n  {\n    v20 = (signed int)(((unsigned int)((v18 + v16 + 16) >> 31) >> 27) + v18 + v16 + 16) >> 5;\n    v21 = 0;\n  }\n  else\n  {\n    v20 = 0;\n    v21 = v6 == 0;\n    if ( !v6 && v7 )\n    {\n      v22 = v18 + ((unsigned int)((v18 + 8) >> 31) >> 28) + 8;\nLABEL_31:\n      v20 = v22 >> 4;\n      goto LABEL_32;\n    }\n  }\n  if ( !v7 && !v21 )\n  {\n    v22 = v16 + ((unsigned int)((v16 + 8) >> 31) >> 28) + 8;\n    goto LABEL_31;\n  }\nLABEL_32:\n  if ( !(v6 | v7) )\n    v20 = *((_DWORD *)off_49F6D0 + 18170);\n  v23 = 2LL * v81;\n  v24 = &v89;\n  v25 = -16LL;\n  do\n  {\n    if ( v6 )\n      *(&v130 + 2 * v25) = *(unsigned __int16 *)(v23 + *(_QWORD *)(v0 + 8 * v13) + 2 * v25 + 32);\n    if ( v7 )\n      v131[2 * v25] = *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * *v24) + 2LL * *(v24 - 1));\n    v24 += 6;\n    ++v25;\n  }\n  while ( v25 );\n  result = (char *)off_49F6D0;\n  v27 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v20), 0);\n  v28 = v126;\n  v29 = v127;\n  v30 = v128;\n  v31 = v129;\n  v32 = 4611686018427387872LL;\n  v33 = _mm_shuffle_epi32(\n          _mm_shufflehi_epi16(_mm_shufflelo_epi16((__m128i)_mm_shuffle_ps(v120, v121, 136), 232), 232),\n          232);\n  v34 = _mm_shufflehi_epi16(\n          _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_shufflehi_epi16(_mm_shufflelo_epi16(v27, 40), 40), 108), 180),\n          75);\n  v35 = _mm_unpacklo_epi64(\n          _mm_shuffle_epi32(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16((__m128i)_mm_shuffle_ps(v122, v123, 136), 232), 232),\n            232),\n          _mm_shuffle_epi32(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16((__m128i)_mm_shuffle_ps(v124, v125, 136), 232), 232),\n            232));\n  v36 = _mm_shuffle_epi32(_mm_shufflehi_epi16(_mm_shufflelo_epi16(v27, 232), 232), 232);\n  do\n  {\n    v37 = v131[v32];\n    v38 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v37), 0);\n    _mm_storel_epi64((__m128i *)&result[1 * v32 + 5304], v33);\n    _mm_storel_epi64(\n      (__m128i *)&result[1 * v32 + 5816],\n      _mm_shuffle_epi32(_mm_shufflehi_epi16(_mm_shufflelo_epi16(v38, 232), 232), 232));\n    _mm_storeu_si128((__m128i *)&result[1 * v32 + 6328], v34);\n    _mm_storeu_si128((__m128i *)&result[1 * v32 + 5312], v35);\n    _mm_storeu_si128(\n      (__m128i *)&result[1 * v32 + 5824],\n      _mm_shufflehi_epi16(\n        _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_shufflehi_epi16(_mm_shufflelo_epi16(v38, 40), 40), 108), 180),\n        75));\n    _mm_storel_epi64((__m128i *)&result[1 * v32 + 6344], v36);\n    *(_WORD *)&result[1 * v32 + 5328] = v28;\n    *(_WORD *)&result[1 * v32 + 5840] = v37;\n    *(_WORD *)&result[1 * v32 + 6352] = v20;\n    *(_WORD *)&result[1 * v32 + 5330] = v29;\n    *(_WORD *)&result[1 * v32 + 5842] = v37;\n    *(_WORD *)&result[1 * v32 + 6354] = v20;\n    *(_WORD *)&result[1 * v32 + 5332] = v30;\n    *(_WORD *)&result[1 * v32 + 5844] = v37;\n    *(_WORD *)&result[1 * v32 + 6356] = v20;\n    *(_WORD *)&result[1 * v32 + 5334] = v31;\n    *(_WORD *)&result[1 * v32 + 5846] = v37;\n    *(_WORD *)&result[1 * v32 + 6358] = v20;\n    v32 += 2LL;\n  }\n  while ( v32 * 4 );\n  if ( v12 != 0 && v19 )\n  {\n    v39 = *(_QWORD *)(v0 + 8 * v13);\n    v40 = *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v103) + 2LL * v102)\n        - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v101) + 2LL * v100)\n        + 2\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v105) + 2LL * v104)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v99) + 2LL * v98))\n        + 3\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v107) + 2LL * v106)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v97) + 2LL * v96))\n        + 4\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v109) + 2LL * v108)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v95) + 2LL * v94))\n        + 5\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v111) + 2LL * v110)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v93) + 2LL * v92))\n        + 6\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v113) + 2LL * v112)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v91) + 2LL * v90));\n    v41 = *(unsigned __int16 *)(v39 + 2 * v14 + 16)\n        - *(unsigned __int16 *)(v39 + 2 * v14 + 12)\n        + 2 * (*(unsigned __int16 *)(v39 + 2 * v14 + 18) - *(unsigned __int16 *)(v39 + 2 * v14 + 10))\n        + 3 * (*(unsigned __int16 *)(v39 + 2 * v14 + 20) - *(unsigned __int16 *)(v39 + 2 * v14 + 8))\n        + 4 * (*(unsigned __int16 *)(v39 + 2 * v14 + 22) - *(unsigned __int16 *)(v39 + 2 * v14 + 6))\n        + 5 * (*(unsigned __int16 *)(v39 + 2 * v14 + 24) - *(unsigned __int16 *)(v39 + 2 * v14 + 4))\n        + 6 * (*(unsigned __int16 *)(v39 + 2 * v14 + 26) - *(unsigned __int16 *)(v39 + 2 * v14 + 2))\n        + 7 * (*(unsigned __int16 *)(v39 + 2 * v14 + 28) - *(unsigned __int16 *)(v39 + 2 * v14));\n    v42 = v40\n        + 7\n        * (*(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v115) + 2LL * v114)\n         - *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v89) + 2LL * v88));\n    LODWORD(v39) = *(unsigned __int16 *)(v39 + 2 * v14 + 30);\n    v43 = *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v86) + 2LL * v85);\n    v44 = *(unsigned __int16 *)(*(_QWORD *)(v0 + 8LL * v117) + 2LL * v116);\n    v45 = v44;\n    v46 = v39 + v44;\n    LODWORD(v39) = v41 + 8 * (v39 - v43);\n    v47 = v42 + 8 * (v45 - v43);\n    v48 = (5 * (signed int)v39 + 32) >> 6;\n    v49 = (5 * v47 + 32) >> 6;\n    v50 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v48), 0);\n    v51 = _mm_load_si128((const __m128i *)&xmmword_489580);\n    v52 = _mm_unpacklo_epi32(\n            _mm_shuffle_epi32(_mm_mul_epu32(v51, v50), 232),\n            _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v51, 245), v50), 232));\n    v53 = _mm_load_si128((const __m128i *)&xmmword_489590);\n    v54 = _mm_unpacklo_epi32(\n            _mm_shuffle_epi32(_mm_mul_epu32(v53, v50), 232),\n            _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v53, 245), v50), 232));\n    v55 = _mm_shuffle_epi32(_mm_cvtsi32_si128(*((_DWORD *)result + 18171)), 0);\n    v56 = _mm_load_si128((const __m128i *)&xmmword_4895A0);\n    v57 = _mm_unpacklo_epi32(\n            _mm_shuffle_epi32(_mm_mul_epu32(v56, v50), 232),\n            _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v56, 245), v50), 232));\n    v58 = _mm_load_si128((const __m128i *)&xmmword_4895B0);\n    v59 = _mm_unpacklo_epi32(\n            _mm_shuffle_epi32(_mm_mul_epu32(v50, v58), 232),\n            _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v58, 245), v50), 232));\n    v60 = 16 * v46 + 16 - 7 * v49;\n    v61 = -512LL;\n    do\n    {\n      v62 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v60), 0);\n      v63 = _mm_add_epi32(v62, v52);\n      v64 = _mm_add_epi32(v62, v54);\n      v65 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v64, 0x1Fu), 0x1Bu), v64), 5u);\n      v66 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v63, 0x1Fu), 0x1Bu), v63), 5u);\n      v67 = _mm_cmpgt_epi32(v66, v55);\n      v68 = _mm_cmpgt_epi32(v65, v55);\n      v69 = _mm_or_si128(_mm_andnot_si128(v68, v65), _mm_and_si128(v55, v68));\n      v70 = _mm_or_si128(_mm_andnot_si128(v67, v66), _mm_and_si128(v55, v67));\n      _mm_storeu_si128(\n        (__m128i *)&result[v61 + 6840],\n        _mm_packs_epi32(\n          _mm_srai_epi32(_mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v69, (__m128i)0LL), v69), 0x10u), 0x10u),\n          _mm_srai_epi32(_mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v70, (__m128i)0LL), v70), 0x10u), 0x10u)));\n      v71 = _mm_add_epi32(v62, v57);\n      v72 = _mm_add_epi32(v62, v59);\n      v73 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v72, 0x1Fu), 0x1Bu), v72), 5u);\n      v74 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v71, 0x1Fu), 0x1Bu), v71), 5u);\n      v75 = _mm_cmpgt_epi32(v74, v55);\n      v76 = _mm_cmpgt_epi32(v73, v55);\n      v77 = _mm_or_si128(_mm_andnot_si128(v76, v73), _mm_and_si128(v55, v76));\n      v78 = _mm_or_si128(_mm_andnot_si128(v75, v74), _mm_and_si128(v55, v75));\n      _mm_storeu_si128(\n        (__m128i *)&result[v61 + 6856],\n        _mm_packs_epi32(\n          _mm_srai_epi32(_mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v77, (__m128i)0LL), v77), 0x10u), 0x10u),\n          _mm_srai_epi32(_mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v78, (__m128i)0LL), v78), 0x10u), 0x10u)));\n      v60 += v49;\n      v61 += 32LL;\n    }\n    while ( v61 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402ad0L", 
            "funcEndAddr": "0x403363L", 
            "funcName": "sub_402AD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403370(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  _DWORD *v5; // r12\n  __int64 v6; // rdx\n  __int64 v7; // rsi\n  __int64 *v8; // rax\n  __int64 v9; // r13\n  __int64 v10; // r9\n  char *v11; // r10\n  char *v12; // r14\n  int *v13; // r15\n  __int64 v14; // r11\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  int v17; // esi\n  bool v18; // si\n  char *v19; // rcx\n  _DWORD *v20; // rsi\n  signed __int64 v21; // rsi\n  int v22; // edx\n  int v23; // edi\n  int v24; // eax\n  int v25; // ebp\n  int v26; // edi\n  int v27; // edx\n  int v28; // er10\n  int v29; // er13\n  int v30; // edx\n  int v31; // edx\n  int v32; // ebp\n  int v33; // eax\n  int v34; // ebx\n  int v35; // edx\n  int v36; // er10\n  int v37; // ebx\n  int v38; // edi\n  int v39; // er10\n  int v40; // er11\n  int v41; // eax\n  int v42; // er14\n  int v43; // er11\n  int v44; // eax\n  int v45; // ebx\n  int v46; // ebp\n  int v47; // eax\n  int v48; // er12\n  int v49; // er14\n  int v50; // er11\n  int v51; // er9\n  int v52; // ebx\n  int v53; // er15\n  int v54; // er9\n  int v55; // ebp\n  int v56; // ebx\n  int v57; // er8\n  int v58; // ebp\n  int v59; // ebx\n  int v60; // er15\n  int v61; // er8\n  int v62; // er13\n  int v63; // ebx\n  int v64; // edi\n  int v65; // er12\n  int v66; // edi\n  int v67; // ebx\n  int v68; // er8\n  int v69; // edx\n  int v70; // edi\n  int v71; // er10\n  int v72; // er9\n  int v73; // eax\n  int v74; // edx\n  int v75; // edi\n  int v76; // eax\n  int v77; // edx\n  int v78; // edi\n  int v79; // edx\n  int v80; // ebp\n  int v81; // edi\n  int v82; // eax\n  int v83; // edx\n  __m128i v84; // xmm2\n  __int64 v85; // kr00_8\n  int v86; // ebp\n  int v87; // er9\n  int v88; // edi\n  int v89; // edx\n  int v90; // ecx\n  int v91; // edi\n  int v92; // eax\n  int v93; // edx\n  int v94; // ebp\n  int v95; // eax\n  int v96; // edi\n  int v97; // er8\n  int v98; // eax\n  int v99; // edi\n  int v100; // ebx\n  int v101; // eax\n  int v102; // er10\n  int v103; // ebp\n  int v104; // edi\n  int v105; // eax\n  unsigned int v106; // edx\n  int v107; // ecx\n  signed int v108; // ebp\n  signed __int64 v109; // r14\n  char *v110; // rcx\n  __int64 v111; // r15\n  __int128 *v112; // r12\n  int v113; // ebx\n  int v114; // edx\n  unsigned int v115; // er13\n  int v116; // eax\n  __int64 v117; // rdx\n  __int64 v118; // kr08_8\n  int v119; // ebp\n  int v120; // ebx\n  int v121; // edi\n  int v122; // ebp\n  int v123; // eax\n  int v124; // edi\n  int v125; // ebp\n  int v126; // eax\n  unsigned int v127; // eax\n  unsigned int v128; // esi\n  int v129; // edi\n  int v130; // edx\n  int v131; // er11\n  signed int v132; // er8\n  char v133; // r10\n  char v134; // r9\n  unsigned __int64 v135; // r14\n  __int64 v136; // rbx\n  int v137; // eax\n  int v138; // edi\n  int v139; // edx\n  int v140; // ebp\n  int v141; // esi\n  int v142; // esi\n  int v143; // edi\n  _DWORD *v144; // rdi\n  bool v145; // r10\n  __int64 v146; // rbp\n  _DWORD *v147; // rax\n  __int64 v148; // rcx\n  signed int v149; // edx\n  signed __int64 v150; // r13\n  char *v151; // rax\n  __int64 v152; // r12\n  __int64 v153; // r14\n  __int64 v154; // rbp\n  char *v155; // rbp\n  int v156; // ebx\n  signed int v157; // er15\n  int v158; // eax\n  __int64 v159; // rdx\n  int *v160; // rbp\n  unsigned int v161; // edi\n  signed int v162; // ebx\n  int v163; // eax\n  int v164; // eax\n  int v165; // edx\n  int v166; // eax\n  char *v167; // rax\n  int v168; // er8\n  int v169; // ecx\n  int v170; // ebp\n  int v171; // er9\n  int v172; // esi\n  int v173; // ecx\n  int v174; // ebp\n  int v175; // esi\n  int v176; // ecx\n  int v177; // ebx\n  int v178; // ecx\n  int v179; // er9\n  int v180; // ecx\n  int v181; // er8\n  int v182; // esi\n  int v183; // ebx\n  int v184; // esi\n  int v185; // ecx\n  int v186; // edx\n  int v187; // er8\n  int v188; // esi\n  int v189; // ebx\n  int v190; // esi\n  int v191; // edx\n  int v192; // er9\n  int v193; // edx\n  int v194; // er8\n  int v195; // ebp\n  int v196; // ecx\n  int v197; // ebp\n  int v198; // edx\n  int v199; // edx\n  int v200; // ecx\n  int v201; // ebx\n  int v202; // er9\n  int v203; // edx\n  int v204; // ecx\n  int v205; // er8\n  int v206; // esi\n  int v207; // ebx\n  int v208; // esi\n  int v209; // ecx\n  int v210; // edx\n  signed int v211; // ebp\n  __int64 v212; // rsi\n  signed int v213; // er8\n  int v214; // ecx\n  int v215; // edx\n  int v216; // ebx\n  _DWORD *v217; // r8\n  char *v218; // r14\n  __int64 v219; // r9\n  __int64 v220; // r11\n  __int64 v221; // r15\n  signed __int64 v222; // rbx\n  signed __int64 v223; // rax\n  signed __int64 v224; // rsi\n  int v225; // ecx\n  int v226; // ecx\n  int v227; // esi\n  __int64 v228; // rax\n  __int64 v229; // rcx\n  __int128 *v230; // rdx\n  __int64 v231; // r9\n  __int64 v232; // r10\n  int v233; // er11\n  __int64 v234; // r12\n  int *v235; // r14\n  __int64 v236; // r15\n  __int64 v237; // rax\n  signed __int64 v238; // rcx\n  int *v239; // rbp\n  __int64 v240; // rsi\n  signed __int64 v241; // rdx\n  unsigned __int64 v242; // rdi\n  signed __int64 v243; // rdx\n  bool v244; // sf\n  unsigned __int8 v245; // of\n  signed __int64 v246; // rdi\n  bool v248; // [rsp+Ch] [rbp-91Ch]\n  __int128 v249; // [rsp+10h] [rbp-918h]\n  __int128 v250; // [rsp+20h] [rbp-908h]\n  __int128 v251; // [rsp+30h] [rbp-8F8h]\n  __int128 v252; // [rsp+40h] [rbp-8E8h]\n  __int128 v253; // [rsp+50h] [rbp-8D8h]\n  __int64 v254; // [rsp+60h] [rbp-8C8h]\n  int v255; // [rsp+6Ch] [rbp-8BCh]\n  _DWORD *v256; // [rsp+70h] [rbp-8B8h]\n  __int64 v257; // [rsp+78h] [rbp-8B0h]\n  __int64 v258; // [rsp+80h] [rbp-8A8h]\n  __int64 v259; // [rsp+88h] [rbp-8A0h]\n  unsigned int v260; // [rsp+94h] [rbp-894h]\n  unsigned int v261; // [rsp+98h] [rbp-890h]\n  unsigned int v262; // [rsp+9Ch] [rbp-88Ch]\n  _DWORD *v263; // [rsp+A0h] [rbp-888h]\n  __int64 v264; // [rsp+A8h] [rbp-880h]\n  __int64 v265; // [rsp+B0h] [rbp-878h]\n  unsigned int v266; // [rsp+B8h] [rbp-870h]\n  int v267; // [rsp+BCh] [rbp-86Ch]\n  int v268; // [rsp+C0h] [rbp-868h]\n  int v269; // [rsp+C4h] [rbp-864h]\n  __int64 v270; // [rsp+C8h] [rbp-860h]\n  __int64 v271; // [rsp+D0h] [rbp-858h]\n  __int64 v272; // [rsp+D8h] [rbp-850h]\n  __int64 v273; // [rsp+E0h] [rbp-848h]\n  __int64 v274; // [rsp+E8h] [rbp-840h]\n  int v275[16]; // [rsp+F0h] [rbp-838h]\n  int v276[16]; // [rsp+130h] [rbp-7F8h]\n  int v277[16]; // [rsp+170h] [rbp-7B8h]\n  int v278[16]; // [rsp+1B0h] [rbp-778h]\n  int v279[16]; // [rsp+1F0h] [rbp-738h]\n  int v280[16]; // [rsp+230h] [rbp-6F8h]\n  int v281[16]; // [rsp+270h] [rbp-6B8h]\n  int v282[16]; // [rsp+2B0h] [rbp-678h]\n  int v283[16]; // [rsp+2F0h] [rbp-638h]\n  int v284[16]; // [rsp+330h] [rbp-5F8h]\n  int v285[16]; // [rsp+370h] [rbp-5B8h]\n  int v286[16]; // [rsp+3B0h] [rbp-578h]\n  int v287[16]; // [rsp+3F0h] [rbp-538h]\n  int v288[16]; // [rsp+430h] [rbp-4F8h]\n  int v289[16]; // [rsp+470h] [rbp-4B8h]\n  int v290[16]; // [rsp+4B0h] [rbp-478h]\n  __int128 v291[4]; // [rsp+4F0h] [rbp-438h]\n  __int128 v292; // [rsp+530h] [rbp-3F8h]\n  __int128 v293; // [rsp+570h] [rbp-3B8h]\n  __int128 v294; // [rsp+5B0h] [rbp-378h]\n  char v295; // [rsp+820h] [rbp-108h]\n\n  v5 = off_49F6D0;\n  v6 = *((_QWORD *)off_49F6D0 + 1771);\n  v7 = *((signed int *)off_49F6D0 + 3);\n  v8 = (__int64 *)**((_QWORD **)off_49F6D0 + 1768);\n  v259 = *v8;\n  v265 = v8[1];\n  v255 = *(_DWORD *)(v6 + 632 * v7 + 12) + *((_DWORD *)off_49F6D0 + 18167);\n  if ( v255 )\n    v248 = 0;\n  else\n    v248 = *((_DWORD *)off_49F6D0 + 18176) == 1;\n  v257 = (unsigned int)(((unsigned __int64)(715827883LL * v255) >> 63) + ((unsigned __int64)(715827883LL * v255) >> 32));\n  v9 = (unsigned int)(v255 - 6 * v257);\n  v10 = qword_4F9EB0;\n  v272 = (signed __int64)a1 << 9;\n  v11 = (char *)off_49F6D0 + v272 + 4792;\n  v12 = (char *)off_49F6D0 + 13112;\n  v13 = v275;\n  v14 = 0LL;\n  do\n  {\n    v15 = 0LL;\n    v16 = 0LL;\n    do\n    {\n      if ( v5[18181] )\n        v17 = *(_DWORD *)&v12[v15 * 4];\n      else\n        v17 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 8 * ((signed int)v5[43] + (signed __int64)(signed int)v14))\n                                  + 2LL * ((signed int)v16 + v5[42]))\n            - *(unsigned __int16 *)&v11[2 * v16];\n      v13[v15] = v17;\n      *((_DWORD *)&v291[16 * (unsigned __int64)(v16 & 3) + 4 * (unsigned __int64)((unsigned int)v16 >> 2) + (v14 & 3)]\n      + ((unsigned int)v14 >> 2)) = v17;\n      ++v16;\n      v15 += 16LL;\n    }\n    while ( v16 != 16 );\n    ++v14;\n    ++v13;\n    v11 += 32;\n    v12 += 4;\n  }\n  while ( v14 != 16 );\n  v18 = v248;\n  if ( !v248 )\n  {\n    v258 = v9;\n    v19 = &v295;\n    v20 = 0LL;\n    do\n    {\n      v256 = v20;\n      v21 = -256LL;\n      do\n      {\n        v22 = *(_DWORD *)&v19[v21 + 208];\n        v23 = *(_DWORD *)&v19[v21 - 560];\n        v24 = *(_DWORD *)&v19[v21 - 544];\n        v25 = v22 + v23;\n        v26 = v23 - v22;\n        v27 = *(_DWORD *)&v19[v21 - 304];\n        v28 = *(_DWORD *)&v19[v21 - 48];\n        v29 = v28 + v27 + v25;\n        *(_DWORD *)&v19[v21 - 48] = v25 - (v28 + v27);\n        v30 = v27 - v28;\n        *(_DWORD *)&v19[v21 - 304] = v30 + 2 * v26;\n        *(_DWORD *)&v19[v21 + 208] = v26 - 2 * v30;\n        v31 = *(_DWORD *)&v19[v21 + 224];\n        v32 = v31 + v24;\n        v33 = v24 - v31;\n        v34 = *(_DWORD *)&v19[v21 - 288];\n        v35 = *(_DWORD *)&v19[v21 - 32];\n        v36 = v35 + v34;\n        v37 = v34 - v35;\n        v38 = v36 + v32;\n        *(_DWORD *)&v19[v21 - 32] = v32 - v36;\n        v39 = v37 + 2 * v33;\n        *(_DWORD *)&v19[v21 + 224] = v33 - 2 * v37;\n        v40 = *(_DWORD *)&v19[v21 - 528];\n        v41 = *(_DWORD *)&v19[v21 + 240];\n        v42 = v41 + v40;\n        v43 = v40 - v41;\n        v44 = *(_DWORD *)&v19[v21 - 272];\n        v45 = *(_DWORD *)&v19[v21 - 16];\n        v46 = v45 + v44;\n        v47 = v44 - v45;\n        v48 = v42 + v46;\n        v49 = v42 - v46;\n        v254 = (unsigned int)(v47 + 2 * v43);\n        v50 = v43 - 2 * v47;\n        v51 = *(_DWORD *)&v19[v21 - 512];\n        v52 = *(_DWORD *)&v19[v21 + 256];\n        v53 = v52 + v51;\n        v54 = v51 - v52;\n        v55 = *(_DWORD *)&v19[v21 - 256];\n        v56 = *(_DWORD *)&v19[v21];\n        v57 = v56 + v55;\n        v58 = v55 - v56;\n        v59 = v57 + v53;\n        v60 = v53 - v57;\n        v61 = v59 + v29;\n        v62 = v29 - v59;\n        v63 = v48 + v38;\n        v64 = v38 - v48;\n        *(_DWORD *)&v19[v21 - 560] = v63 + v61;\n        v65 = v58 + 2 * v54;\n        *(_DWORD *)&v19[v21 - 528] = v61 - v63;\n        *(_DWORD *)&v19[v21 - 544] = v64 + 2 * v62;\n        *(_DWORD *)&v19[v21 - 512] = v62 - 2 * v64;\n        v66 = *(_DWORD *)&v19[v21 - 304];\n        v67 = v65 + v66;\n        v68 = v254;\n        v69 = v254 + v39;\n        *(_DWORD *)&v19[v21 - 304] = v254 + v39 + v65 + v66;\n        v70 = v66 - v65;\n        *(_DWORD *)&v19[v21 - 272] = v67 - v69;\n        v71 = v39 - v68;\n        *(_DWORD *)&v19[v21 - 288] = v71 + 2 * v70;\n        *(_DWORD *)&v19[v21 - 256] = v70 - 2 * v71;\n        v72 = v54 - 2 * v58;\n        v73 = *(_DWORD *)&v19[v21 - 48];\n        v74 = *(_DWORD *)&v19[v21 - 32];\n        v75 = v60 + v73;\n        *(_DWORD *)&v19[v21 - 48] = v60 + v73 + v49 + v74;\n        v76 = v73 - v60;\n        *(_DWORD *)&v19[v21 - 16] = v75 - (v49 + v74);\n        v77 = v74 - v49;\n        *(_DWORD *)&v19[v21 - 32] = v77 + 2 * v76;\n        *(_DWORD *)&v19[v21] = v76 - 2 * v77;\n        v78 = *(_DWORD *)&v19[v21 + 208];\n        v79 = *(_DWORD *)&v19[v21 + 224];\n        v80 = v72 + v78;\n        v81 = v78 - v72;\n        v82 = v50 + v79;\n        *(_DWORD *)&v19[v21 + 208] = v50 + v79 + v80;\n        v83 = v79 - v50;\n        *(_DWORD *)&v19[v21 + 240] = v80 - v82;\n        *(_DWORD *)&v19[v21 + 224] = v83 + 2 * v81;\n        *(_DWORD *)&v19[v21 + 256] = v81 - 2 * v83;\n        v21 += 64LL;\n      }\n      while ( v21 );\n      v19 += 4;\n      v20 = (_DWORD *)((char *)v256 + 1);\n    }\n    while ( (unsigned __int64)v256 < 3 );\n    *(_QWORD *)&v249 = __PAIR__(v82, v80);\n    *((_QWORD *)&v249 + 1) = __PAIR__(v81, v83);\n    v18 = v248;\n    LODWORD(v9) = v258;\n  }\n  v84 = _mm_load_si128((const __m128i *)&v293);\n  v250 = v291[0];\n  _mm_store_si128((__m128i *)&v251, _mm_load_si128((const __m128i *)&v292));\n  _mm_store_si128((__m128i *)&v252, v84);\n  _mm_store_si128((__m128i *)&v253, _mm_load_si128((const __m128i *)&v294));\n  if ( !v18 )\n  {\n    v85 = v250;\n    v86 = v253 + v250;\n    v87 = v252;\n    LODWORD(v250) = v252 + v251 + v253 + v250;\n    LODWORD(v252) = v86 - (v252 + v251);\n    v88 = v251 - v87;\n    LODWORD(v251) = v251 - v87 + v85 - v253;\n    LODWORD(v253) = v85 - v253 - v88;\n    v89 = DWORD1(v253) + DWORD1(v250);\n    v90 = DWORD1(v252);\n    DWORD1(v250) += DWORD1(v253) + DWORD1(v252) + DWORD1(v251);\n    DWORD1(v252) = v89 - (DWORD1(v252) + DWORD1(v251));\n    v91 = DWORD1(v251) - v90;\n    DWORD1(v251) = DWORD1(v251) - v90 + HIDWORD(v85) - DWORD1(v253);\n    DWORD1(v253) = HIDWORD(v85) - DWORD1(v253) - v91;\n    v92 = DWORD2(v250);\n    v93 = DWORD2(v253) + DWORD2(v250);\n    v94 = DWORD2(v252);\n    DWORD2(v250) += DWORD2(v251) + DWORD2(v252) + DWORD2(v253);\n    v95 = v92 - DWORD2(v253);\n    DWORD2(v252) = v93 - (DWORD2(v251) + DWORD2(v252));\n    v96 = DWORD2(v251) - v94;\n    DWORD2(v251) = DWORD2(v251) - v94 + v95;\n    v97 = DWORD2(v251);\n    DWORD2(v253) = v95 - v96;\n    v98 = HIDWORD(v250);\n    v99 = HIDWORD(v253) + HIDWORD(v250);\n    v100 = HIDWORD(v252);\n    HIDWORD(v250) += HIDWORD(v252) + HIDWORD(v251) + HIDWORD(v253);\n    v101 = v98 - HIDWORD(v253);\n    HIDWORD(v252) = v99 - (HIDWORD(v252) + HIDWORD(v251));\n    v102 = HIDWORD(v252);\n    v103 = HIDWORD(v251) - v100;\n    HIDWORD(v251) = v101 + HIDWORD(v251) - v100;\n    v104 = HIDWORD(v251);\n    v105 = v101 - v103;\n    HIDWORD(v253) = v105;\n    _mm_store_si128(\n      (__m128i *)&v250,\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v250) + DWORD1(v250) + HIDWORD(v250) + (signed int)v250),\n            _mm_cvtsi32_si128((signed int)v250 - HIDWORD(v250) + DWORD1(v250) - DWORD2(v250))),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(HIDWORD(v250) + (signed int)v250 - (DWORD2(v250) + DWORD1(v250))),\n            _mm_cvtsi32_si128((signed int)v250 - HIDWORD(v250) - (DWORD1(v250) - DWORD2(v250))))),\n        1u));\n    _mm_store_si128(\n      (__m128i *)&v251,\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(v97 + DWORD1(v251) + v104 + (signed int)v251),\n            _mm_cvtsi32_si128(DWORD1(v251) - v97 + (signed int)v251 - v104)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(v104 + (signed int)v251 - (v97 + DWORD1(v251))),\n            _mm_cvtsi32_si128((signed int)v251 - v104 - (DWORD1(v251) - v97)))),\n        1u));\n    _mm_store_si128(\n      (__m128i *)&v252,\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(v102 + (signed int)v252 + DWORD2(v252) + DWORD1(v252)),\n            _mm_cvtsi32_si128(DWORD1(v252) - DWORD2(v252) + (signed int)v252 - v102)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(v102 + (signed int)v252 - (DWORD2(v252) + DWORD1(v252))),\n            _mm_cvtsi32_si128((signed int)v252 - v102 - (DWORD1(v252) - DWORD2(v252))))),\n        1u));\n    v106 = v253 - v105;\n    v107 = DWORD1(v253) - DWORD2(v253);\n    *(_QWORD *)&v249 = __PAIR__(DWORD2(v253) + DWORD1(v253), v105 + (signed int)v253);\n    _mm_store_si128(\n      (__m128i *)&v253,\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v253) + DWORD1(v253) + v105 + (signed int)v253),\n            _mm_cvtsi32_si128(DWORD1(v253) - DWORD2(v253) + v106)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(v105 + (signed int)v253 - (DWORD2(v253) + DWORD1(v253))),\n            _mm_cvtsi32_si128(v106 - (DWORD1(v253) - DWORD2(v253))))),\n        1u));\n    *((_QWORD *)&v249 + 1) = __PAIR__(v106, v107);\n  }\n  v269 = v257 + 15;\n  v258 = (signed __int64)(signed int)v9 << 6;\n  v256 = (_DWORD *)((char *)xmmword_4F7DD0 + v258);\n  v274 = (signed __int64)(signed int)v257 << 6;\n  v263 = (int *)((char *)dword_4F5610 + v274);\n  LODWORD(v264) = v257 + 16;\n  v254 = 0LL;\n  v108 = -1;\n  v109 = -16LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 18111) || dword_4FA108 && *((_DWORD *)off_49F6D0 + 18002) )\n      v110 = byte_489CB0;\n    else\n      v110 = byte_489C90;\n    v111 = (unsigned __int8)v110[2 * v109 + 33];\n    v112 = &v250 + (unsigned __int8)v110[2 * v109 + 32];\n    v113 = *((_DWORD *)v112 + v111);\n    v114 = -*((_DWORD *)v112 + v111);\n    if ( v114 < 1 )\n      v114 = *((_DWORD *)v112 + v111);\n    if ( !v18 )\n      v114 = (*v256 * v114 + 2 * *v263) >> v264;\n    ++v108;\n    if ( !*((_DWORD *)dest + 589) && v114 >= 2064 && (v115 = 2063, *((_DWORD *)off_49F6D0 + 10) < 10)\n      || (v115 = v114) != 0 )\n    {\n      v116 = sub_452340(v115, v113);\n      v18 = v248;\n      v117 = (signed int)v254;\n      *(_DWORD *)(v259 + 4 * v117) = v116;\n      *(_DWORD *)(v265 + 4 * v117) = v108;\n      v254 = (unsigned int)(v117 + 1);\n      v108 = -1;\n      if ( v248 )\n        goto LABEL_37;\nLABEL_36:\n      v18 = v248;\n      *((_DWORD *)v112 + v111) = sub_452340(v115, v113);\n      goto LABEL_37;\n    }\n    v115 = 0;\n    if ( !v18 )\n      goto LABEL_36;\nLABEL_37:\n    ++v109;\n  }\n  while ( v109 );\n  *(_DWORD *)(v259 + 4LL * (signed int)v254) = 0;\n  if ( !v18 )\n  {\n    v118 = v250;\n    v119 = v252 + v250;\n    v120 = v251 - v253;\n    LODWORD(v250) = v251 + v253 + v252 + v250;\n    LODWORD(v253) = v119 - (v251 + v253);\n    LODWORD(v251) = v120 + v118 - v252;\n    LODWORD(v252) = v118 - v252 - v120;\n    v121 = DWORD1(v252) + DWORD1(v250);\n    v122 = DWORD1(v251) - DWORD1(v253);\n    DWORD1(v250) += DWORD1(v251) + DWORD1(v253) + DWORD1(v252);\n    DWORD1(v253) = v121 - (DWORD1(v251) + DWORD1(v253));\n    DWORD1(v251) = HIDWORD(v118) - DWORD1(v252) + v122;\n    DWORD1(v252) = HIDWORD(v118) - DWORD1(v252) - v122;\n    v123 = DWORD2(v250);\n    v124 = DWORD2(v252) + DWORD2(v250);\n    v125 = DWORD2(v251) - DWORD2(v253);\n    DWORD2(v250) += DWORD2(v251) + DWORD2(v253) + DWORD2(v252);\n    DWORD2(v253) = v124 - (DWORD2(v251) + DWORD2(v253));\n    v126 = v123 - DWORD2(v252);\n    DWORD2(v251) = v126 + v125;\n    DWORD2(v252) = v126 - v125;\n    v127 = HIDWORD(v252);\n    v128 = HIDWORD(v253);\n    v129 = HIDWORD(v252) + HIDWORD(v250);\n    *(_QWORD *)&v249 = __PAIR__(HIDWORD(v251), HIDWORD(v250));\n    HIDWORD(v250) += HIDWORD(v252) + HIDWORD(v253) + HIDWORD(v251);\n    HIDWORD(v253) = v129 - (HIDWORD(v253) + HIDWORD(v251));\n    v130 = HIDWORD(v251) - v128;\n    HIDWORD(v251) = HIDWORD(v251) - v128 + v249 - HIDWORD(v252);\n    HIDWORD(v252) = v249 - HIDWORD(v252) - v130;\n    *((_QWORD *)&v249 + 1) = __PAIR__(v128, v127);\n    v131 = *(_DWORD *)((char *)xmmword_4F7AD0 + v258);\n    v132 = 1 << (5 - v257);\n    v133 = 6 - v257;\n    v134 = v257 - 6;\n    v135 = -1LL;\n    v136 = 0LL;\n    do\n    {\n      _mm_store_si128((__m128i *)&v249, _mm_load_si128((const __m128i *)((char *)&v250 + v136 * 4)));\n      v137 = DWORD2(v249) + v249;\n      v138 = v249 - DWORD2(v249);\n      v139 = DWORD1(v249) - HIDWORD(v249);\n      v140 = DWORD1(v249) + HIDWORD(v249);\n      v141 = v131 * (DWORD2(v249) + v249 + DWORD1(v249) + HIDWORD(v249));\n      if ( v255 >= 36 )\n      {\n        LODWORD(v291[v136]) = v141 << v134;\n        HIDWORD(v291[v136]) = v131 * (v137 - v140) << v134;\n        v142 = v131 * (v139 + v138) << v134;\n        v143 = v131 * (v138 - v139) << v134;\n      }\n      else\n      {\n        LODWORD(v291[v136]) = (v132 + v141) >> v133;\n        v142 = (v132 + v131 * (v139 + v138)) >> v133;\n        HIDWORD(v291[v136]) = (v132 + v131 * (v137 - v140)) >> v133;\n        v143 = (v132 + v131 * (v138 - v139)) >> v133;\n      }\n      DWORD1(v291[v136]) = v142;\n      DWORD2(v291[v136]) = v143;\n      v136 += 4LL;\n      ++v135;\n    }\n    while ( v135 <= 2 );\n  }\n  v268 = 1 << (3 - v257);\n  v267 = 4 - v257;\n  v257 = (unsigned int)(v257 - 4);\n  v271 = (unsigned int)v249;\n  v261 = DWORD1(v249);\n  v270 = DWORD2(v249);\n  v144 = 0LL;\n  v260 = HIDWORD(v249);\n  v262 = 0;\n  v145 = v248;\n  do\n  {\n    v266 = (unsigned int)v144 & 0x7FFFFFFE;\n    v273 = 2 * (_BYTE)v144 & 2;\n    v146 = 0LL;\n    v256 = v144;\n    do\n    {\n      v147 = off_49F6D0;\n      v148 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * (v266 + ((unsigned int)v146 >> 1)))\n                       + 8 * (v273 | v146 & 1));\n      v263 = *(_DWORD **)v148;\n      v264 = *(_QWORD *)(v148 + 8);\n      v254 = 0LL;\n      v149 = -1;\n      v150 = -14LL;\n      v259 = v146;\n      if ( *((_DWORD *)off_49F6D0 + 18111) )\n        goto LABEL_49;\nLABEL_50:\n      if ( !dword_4FA108 || !v147[18002] )\n      {\n        v151 = byte_489C90;\n        goto LABEL_53;\n      }\nLABEL_49:\n      while ( 1 )\n      {\n        v151 = byte_489CB0;\nLABEL_53:\n        v152 = (unsigned __int8)v151[2 * v150 + 30];\n        v153 = (unsigned __int8)v151[2 * v150 + 31];\n        v154 = v146 << 6;\n        v265 = v154;\n        v155 = (char *)&v291[16 * v152 + v153] + v154;\n        v156 = -*(_DWORD *)&v155[4 * (_QWORD)v144];\n        if ( v156 < 1 )\n          v156 = *(_DWORD *)&v155[4 * (_QWORD)v144];\n        if ( !v145 )\n          v156 = (*(int *)((char *)&dword_4F5610[4 * v152 + v153] + v274)\n                + *(_DWORD *)((char *)&xmmword_4F7DD0[v152] + 4 * v153 + v258) * v156) >> v269;\n        ++v149;\n        if ( v156 )\n        {\n          v157 = v149;\n          v158 = sub_452340(v156, *(_DWORD *)&v155[4 * (_QWORD)v144]);\n          v144 = v256;\n          v145 = v248;\n          v159 = (signed int)v254;\n          v263[v159] = v158;\n          *(_DWORD *)(v264 + 4 * v159) = v157;\n          v254 = (unsigned int)(v159 + 1);\n          v149 = -1;\n          v262 = 15;\n        }\n        if ( !v145 )\n        {\n          v160 = (int *)&v155[4 * (_QWORD)v144];\n          v161 = v156;\n          v162 = v149;\n          v163 = sub_452340(v161, *v160);\n          v144 = v256;\n          v145 = v248;\n          v164 = *(_DWORD *)((char *)&xmmword_4F7AD0[v152] + 4 * v153 + v258) * v163;\n          v165 = v164 << v257;\n          v166 = (v268 + v164) >> v267;\n          if ( v255 >= 24 )\n            v166 = v165;\n          v149 = v162;\n          *v160 = v166;\n        }\n        if ( !v150 )\n          break;\n        v147 = off_49F6D0;\n        ++v150;\n        v146 = v259;\n        if ( !*((_DWORD *)off_49F6D0 + 18111) )\n          goto LABEL_50;\n      }\n      v263[(signed int)v254] = 0;\n      if ( !v145 )\n      {\n        v167 = (char *)v291 + v265;\n        v168 = *(_DWORD *)((char *)&v291[32] + 4 * (_QWORD)v144 + v265);\n        v169 = *(_DWORD *)((char *)&v291[48] + 4 * (_QWORD)v144 + v265);\n        v170 = *(_DWORD *)((char *)v291 + 4 * (_QWORD)v144 + v265);\n        v171 = *(_DWORD *)((char *)&v291[1] + 4 * (_QWORD)v144 + v265);\n        v172 = (*(_DWORD *)((char *)&v291[16] + 4 * (_QWORD)v144 + v265) >> 1) - v169;\n        v173 = *(_DWORD *)((char *)&v291[16] + 4 * (_QWORD)v144 + v265) + (v169 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144] = v173 + v168 + v170;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 768] = v168 + v170 - v173;\n        v174 = v170 - v168;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 256] = v172 + v174;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 512] = v174 - v172;\n        v175 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 528];\n        v176 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 784];\n        v177 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 272] >> 1) - v176;\n        v178 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 272] + (v176 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 16] = v178 + v175 + v171;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 784] = v175 + v171 - v178;\n        v179 = v171 - v175;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 272] = v177 + v179;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 528] = v179 - v177;\n        v180 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 32];\n        v181 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 544];\n        v182 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 800];\n        v183 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 288] >> 1) - v182;\n        v184 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 288] + (v182 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 32] = v184 + v181 + v180;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 800] = v181 + v180 - v184;\n        v185 = v180 - v181;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 288] = v183 + v185;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 544] = v185 - v183;\n        v186 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 48];\n        v187 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 560];\n        v188 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 816];\n        v189 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 304] >> 1) - v188;\n        v190 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 304] + (v188 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 48] = v190 + v187 + v186;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 816] = v187 + v186 - v190;\n        v191 = v186 - v187;\n        v192 = v189 + v191;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 304] = v189 + v191;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 560] = v191 - v189;\n        v193 = *(_DWORD *)&v167[4 * (_QWORD)v144];\n        v194 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 32];\n        v195 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 48];\n        v196 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 16] >> 1) - v195;\n        v197 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 16] + (v195 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144] = v194 + v193 + v197;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 48] = v194 + v193 - v197;\n        v198 = v193 - v194;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 16] = v196 + v198;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 32] = v198 - v196;\n        v199 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 256];\n        v200 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 288];\n        v201 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 272] >> 1) - v192;\n        v202 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 272] + (v192 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 256] = v202 + v200 + v199;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 304] = v200 + v199 - v202;\n        v203 = v199 - v200;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 272] = v201 + v203;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 288] = v203 - v201;\n        v204 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 512];\n        v205 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 544];\n        v206 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 560];\n        v207 = (*(_DWORD *)&v167[4 * (_QWORD)v144 + 528] >> 1) - v206;\n        v208 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 528] + (v206 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 512] = v208 + v205 + v204;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 560] = v205 + v204 - v208;\n        v209 = v204 - v205;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 528] = v207 + v209;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 544] = v209 - v207;\n        v210 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 768];\n        v211 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 784];\n        v212 = *(unsigned int *)&v167[4 * (_QWORD)v144 + 800];\n        v213 = *(_DWORD *)&v167[4 * (_QWORD)v144 + 816];\n        v214 = v212 + v210;\n        v271 = *(unsigned int *)&v167[4 * (_QWORD)v144 + 768];\n        v270 = v212;\n        v215 = v210 - v212;\n        v261 = v211;\n        v216 = v211 + (v213 >> 1);\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 768] = v216 + v214;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 816] = v214 - v216;\n        v260 = v213;\n        LODWORD(v212) = (v211 >> 1) - v213;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 784] = v212 + v215;\n        *(_DWORD *)&v167[4 * (_QWORD)v144 + 800] = v215 - v212;\n      }\n      v146 = v259 + 1;\n    }\n    while ( v259 != 3 );\n    v144 = (_DWORD *)((char *)v144 + 1);\n  }\n  while ( v144 != (_DWORD *)4 );\n  *(_QWORD *)&v249 = __PAIR__(v261, (unsigned int)v271);\n  *((_QWORD *)&v249 + 1) = __PAIR__(v260, (unsigned int)v270);\n  v217 = off_49F6D0;\n  if ( !*((_DWORD *)off_49F6D0 + 18181) )\n  {\n    v228 = 0LL;\n    do\n    {\n      v229 = (unsigned int)v228 & 0xFFFFFFFC;\n      v230 = &v291[v228 & 3];\n      v275[v228] = *(_DWORD *)((char *)v230 + v229);\n      v276[v228] = *(_DWORD *)((char *)v230 + v229 + 256);\n      v277[v228] = *(_DWORD *)((char *)v230 + v229 + 512);\n      v278[v228] = *(_DWORD *)((char *)v230 + v229 + 768);\n      v279[v228] = *(_DWORD *)((char *)v230 + v229 + 64);\n      v280[v228] = *(_DWORD *)((char *)v230 + v229 + 320);\n      v281[v228] = *(_DWORD *)((char *)v230 + v229 + 576);\n      v282[v228] = *(_DWORD *)((char *)v230 + v229 + 832);\n      v283[v228] = *(_DWORD *)((char *)v230 + v229 + 128);\n      v284[v228] = *(_DWORD *)((char *)v230 + v229 + 384);\n      v285[v228] = *(_DWORD *)((char *)v230 + v229 + 640);\n      v286[v228] = *(_DWORD *)((char *)v230 + v229 + 896);\n      v287[v228] = *(_DWORD *)((char *)v230 + v229 + 192);\n      v288[v228] = *(_DWORD *)((char *)v230 + v229 + 448);\n      v289[v228] = *(_DWORD *)((char *)v230 + v229 + 704);\n      v290[v228++] = *(_DWORD *)((char *)v230 + v229 + 960);\n    }\n    while ( v228 != 16 );\n    goto LABEL_81;\n  }\n  v218 = (char *)off_49F6D0 + 13176;\n  v219 = 0LL;\n  do\n  {\n    v220 = v219 & 3;\n    v221 = (unsigned int)v219 >> 2;\n    v222 = -1024LL;\n    v223 = 1LL;\n    do\n    {\n      v224 = 16 * (v223 - 1) & 0xFFFFFFFC0LL;\n      v225 = (*(_DWORD *)((char *)&v291[16 * (unsigned __int64)(((_BYTE)v223 - 1) & 2) + v220] + 4 * v221 + v224) + 32) >> 6;\n      if ( v248 )\n        v225 = *(_DWORD *)((char *)&v291[16 * (unsigned __int64)(((_BYTE)v223 - 1) & 2) + v220] + 4 * v221 + v224);\n      *(_DWORD *)&v218[v222 + 960] = v225;\n      v226 = *(_DWORD *)((char *)&v291[16 * (unsigned __int64)(v223 & 3) + v220] + 4 * v221 + v224);\n      v227 = (v226 + 32) >> 6;\n      if ( v248 )\n        v227 = v226;\n      *(_DWORD *)&v218[v222 + 1024] = v227;\n      v223 += 2LL;\n      v222 += 128LL;\n    }\n    while ( v222 );\n    ++v219;\n    v218 += 4;\n  }\n  while ( v219 != 16 );\n  if ( !v217[18181] )\n  {\nLABEL_81:\n    v231 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v232 = (signed int)v217[39];\n    v233 = v217[38];\n    v234 = (__int64)v217 + v272 + 4792;\n    v235 = v275;\n    v236 = 0LL;\n    do\n    {\n      v237 = *(_QWORD *)(v231 + 8 * (v232 + (signed int)v236));\n      v238 = -16LL;\n      v239 = v235;\n      LODWORD(v240) = v233;\n      do\n      {\n        if ( v248 )\n        {\n          LOWORD(v241) = *(_WORD *)v239 + *(_WORD *)(v234 + 2 * v238 + 32);\n        }\n        else\n        {\n          v242 = ((unsigned __int64)*(unsigned __int16 *)(v234 + 2 * v238 + 32) << 6) + *v239;\n          v243 = (signed __int64)(v242 + 32) >> 6;\n          v245 = __OFSUB__(v242, -32LL);\n          v244 = (signed __int64)(v242 + 32) < 0;\n          v246 = 0LL;\n          if ( !(v244 ^ v245) )\n            v246 = v243;\n          v241 = (signed int)v217[18171];\n          if ( v246 <= v241 )\n            LOWORD(v241) = v246;\n        }\n        v240 = (signed int)v240;\n        *(_WORD *)(v237 + 2 * v240) = v241;\n        LODWORD(v240) = v240 + 1;\n        v239 += 16;\n        ++v238;\n      }\n      while ( v238 );\n      ++v236;\n      ++v235;\n      v234 += 32LL;\n    }\n    while ( v236 != 16 );\n  }\n  return v262;\n}\n", 
            "funcStartAddr": "0x403370L", 
            "funcEndAddr": "0x4045ebL", 
            "funcName": "sub_403370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4045F0(int a1, int a2, _DWORD *a3, int a4)\n{\n  _DWORD *v4; // rdx\n  __int64 v5; // r8\n  __int64 *v6; // rcx\n  signed __int64 v7; // r9\n  int v8; // eax\n  int v9; // esi\n  int v10; // ebp\n  int v11; // er11\n  int v12; // er10\n  char v13; // si\n  int v14; // eax\n  int v15; // ecx\n  int v16; // ebp\n  int v17; // ebx\n  int v18; // ecx\n  int v19; // eax\n  int v20; // esi\n  int v21; // edi\n  int v22; // eax\n  int v23; // eax\n  int v24; // ecx\n  int v25; // ebp\n  int v26; // eax\n  int v27; // esi\n  int v28; // edi\n  int v29; // eax\n  int v30; // eax\n  int v31; // ecx\n  int v32; // esi\n  int v33; // eax\n  int v34; // ecx\n  int v35; // edi\n  int v36; // ebx\n  int v37; // ecx\n  int v38; // er14\n  int v39; // ebx\n  int v40; // ebp\n  int v41; // ecx\n  int v42; // esi\n  int v43; // ebx\n  int v44; // ebp\n  int v45; // eax\n  int v46; // ecx\n  int v47; // esi\n  int v48; // edi\n  int v49; // ecx\n  int v50; // eax\n  int v51; // ebx\n  int v52; // esi\n  int v53; // eax\n  int v54; // ecx\n  int v55; // esi\n  int v56; // eax\n  int v57; // ecx\n  int v58; // edi\n  int v59; // ebx\n  int v60; // ecx\n  int v61; // eax\n  int v62; // er14\n  int v63; // esi\n  int v64; // edi\n  int v65; // ebx\n  int v66; // eax\n  int v67; // edi\n  int v68; // eax\n  int v69; // ebx\n  int v70; // ebp\n  int v71; // ecx\n  int v72; // ebx\n  int v73; // eax\n  int v74; // esi\n  int v75; // ebp\n  __int128 *v76; // rcx\n  int *v77; // rcx\n  signed int v78; // er12\n  signed __int64 v79; // r13\n  signed int v80; // edi\n  int v81; // edx\n  int v82; // edx\n  int v83; // edx\n  char *i; // rax\n  __int64 v85; // r14\n  __int64 v86; // rbx\n  __int64 v87; // rbp\n  _DWORD *v88; // rdx\n  int v89; // er15\n  signed int v90; // ecx\n  int v91; // eax\n  __int64 v92; // rdx\n  int v93; // edx\n  _DWORD *v94; // r11\n  int v95; // edx\n  int v96; // esi\n  int v97; // edi\n  int v98; // ecx\n  int v99; // ebx\n  int v100; // esi\n  int v101; // edi\n  int v102; // edx\n  int v103; // esi\n  int v104; // ebp\n  int v105; // esi\n  int v106; // ecx\n  int v107; // eax\n  int v108; // edx\n  int v109; // esi\n  int v110; // ebp\n  int v111; // esi\n  int v112; // eax\n  int v113; // ebp\n  int v114; // er8\n  int v115; // er9\n  int v116; // esi\n  int v117; // ecx\n  int v118; // eax\n  int v119; // ebx\n  signed __int64 v120; // r14\n  int v121; // er8\n  signed __int64 v122; // r9\n  unsigned __int64 v123; // r12\n  unsigned __int64 v124; // rbx\n  __int128 v125; // ST00_16\n  int v126; // ecx\n  int v127; // esi\n  int v128; // edi\n  int v129; // edx\n  signed __int64 v130; // rcx\n  signed __int64 v131; // r15\n  __int64 v132; // r13\n  unsigned __int64 v133; // r8\n  signed __int64 v134; // r10\n  signed __int64 v135; // rbp\n  int v136; // eax\n  __int64 v137; // rdx\n  unsigned __int64 v138; // rbp\n  signed __int64 v139; // rcx\n  __int64 v140; // r8\n  unsigned __int64 v141; // rax\n  signed __int64 v142; // rdx\n  int v143; // eax\n  __int64 v144; // rdx\n  unsigned __int64 v145; // rax\n  __int64 v146; // r8\n  int v147; // er9\n  int v148; // er10\n  signed __int64 v149; // r12\n  __int64 v150; // rsi\n  int v151; // ecx\n  __int64 v152; // rax\n  __int64 v153; // rdx\n  int v154; // edi\n  _QWORD *v155; // r13\n  __int16 v156; // cx\n  __int64 v158; // [rsp+18h] [rbp-A0h]\n  unsigned int v159[3]; // [rsp+18h] [rbp-A0h]\n  int v160; // [rsp+24h] [rbp-94h]\n  int v161; // [rsp+28h] [rbp-90h]\n  int v162; // [rsp+28h] [rbp-90h]\n  int v163; // [rsp+34h] [rbp-84h]\n  char v164; // [rsp+38h] [rbp-80h]\n  char v165; // [rsp+3Ch] [rbp-7Ch]\n  signed int v166; // [rsp+40h] [rbp-78h]\n  int v167; // [rsp+44h] [rbp-74h]\n  char v168; // [rsp+48h] [rbp-70h]\n  char v169; // [rsp+4Ch] [rbp-6Ch]\n  int v170; // [rsp+50h] [rbp-68h]\n  __int64 v171; // [rsp+58h] [rbp-60h]\n  _DWORD *v172; // [rsp+60h] [rbp-58h]\n  __int128 *v173; // [rsp+68h] [rbp-50h]\n  signed __int64 v174; // [rsp+70h] [rbp-48h]\n  __int64 v175; // [rsp+78h] [rbp-40h]\n  _DWORD *v176; // [rsp+80h] [rbp-38h]\n\n  v160 = a4;\n  v176 = a3;\n  v163 = a2;\n  v170 = a1;\n  v4 = off_49F6D0;\n  v5 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * (a1 / 8 + 2 * (a2 / 8)))\n                   + 8LL\n                   * (signed int)(a1 / 4\n                                - ((a1 / 4 + ((a1 + ((unsigned int)(a1 >> 31) >> 30)) >> 31)) & 0xFFFFFFFE)\n                                + 2\n                                * (a2 / 4 - ((a2 / 4 + ((a2 + ((unsigned int)(a2 >> 31) >> 30)) >> 31)) & 0x7FFFFFFE))));\n  v171 = *v6;\n  v175 = v6[1];\n  v7 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v8 = *(_DWORD *)(v5 + v7 + 12);\n  v9 = *((_DWORD *)off_49F6D0 + 18167);\n  v10 = v9 + *(_DWORD *)(v5 + v7 + 12);\n  if ( v10 )\n  {\n    v11 = ((unsigned __int64)(715827883LL * v10) >> 32) + ((unsigned __int64)(715827883LL * v10) >> 63);\n    v12 = v10 - 6 * v11;\n    v168 = ((unsigned __int64)(715827883LL * v10) >> 32) + (715827883LL * v10 < 0) + 15;\n    v167 = v9 + *(_DWORD *)(v5 + v7 + 12);\n  }\n  else\n  {\n    v167 = v9 + v8;\n    v11 = ((unsigned __int64)(715827883LL * (v9 + v8)) >> 32) + ((unsigned __int64)(715827883LL * (v9 + v8)) >> 63);\n    v12 = v9 + v8 - 6 * v11;\n    v168 = ((unsigned __int64)(715827883LL * (v9 + v8)) >> 32) + (715827883LL * (v9 + v8) < 0) + 15;\n    v13 = 1;\n    if ( *((_DWORD *)off_49F6D0 + 18176) == 1 )\n      goto LABEL_6;\n  }\n  v14 = *((_DWORD *)off_49F6D0 + 3326);\n  v15 = *((_DWORD *)off_49F6D0 + 3278);\n  v16 = *((_DWORD *)off_49F6D0 + 3279);\n  v17 = v14 + v15;\n  v18 = v15 - v14;\n  v19 = *((_DWORD *)off_49F6D0 + 3294);\n  v20 = *((_DWORD *)off_49F6D0 + 3310);\n  v21 = v20 + v19;\n  v22 = v19 - v20;\n  *((_DWORD *)off_49F6D0 + 3278) = v21 + v17;\n  v4[3310] = v17 - v21;\n  v4[3294] = v22 + 2 * v18;\n  v4[3326] = v18 - 2 * v22;\n  v23 = v4[3327];\n  v24 = v23 + v16;\n  v25 = v16 - v23;\n  v26 = v4[3295];\n  v27 = v4[3311];\n  v28 = v27 + v26;\n  v29 = v26 - v27;\n  v4[3279] = v28 + v24;\n  v4[3311] = v24 - v28;\n  v4[3295] = v29 + 2 * v25;\n  v4[3327] = v25 - 2 * v29;\n  v30 = v4[3280];\n  v31 = v4[3328];\n  v32 = v31 + v30;\n  v33 = v30 - v31;\n  v34 = v4[3296];\n  v35 = v4[3312];\n  v36 = v35 + v34;\n  v4[3280] = v35 + v34 + v32;\n  v37 = v34 - v35;\n  v4[3312] = v32 - v36;\n  v4[3296] = v37 + 2 * v33;\n  v4[3328] = v33 - 2 * v37;\n  v38 = v4[3329];\n  v39 = v4[3281];\n  v40 = v4[3297];\n  v41 = v38 + v39;\n  v42 = v4[3313];\n  v4[3281] = v42 + v40 + v38 + v39;\n  v43 = v39 - v38;\n  v4[3313] = v41 - (v42 + v40);\n  v44 = v40 - v42;\n  v4[3297] = v44 + 2 * v43;\n  v4[3329] = v43 - 2 * v44;\n  v45 = v4[3281];\n  v46 = v4[3278];\n  v47 = v4[3279];\n  v48 = v45 + v46;\n  v49 = v46 - v45;\n  v50 = v4[3280];\n  v51 = v50 + v47;\n  v52 = v47 - v50;\n  v4[3278] = v51 + v48;\n  v4[3280] = v48 - v51;\n  v4[3279] = v52 + 2 * v49;\n  v4[3281] = v49 - 2 * v52;\n  v53 = v4[3294];\n  v54 = v4[3297];\n  v55 = v54 + v53;\n  v56 = v53 - v54;\n  v57 = v4[3295];\n  v58 = v4[3296];\n  v59 = v58 + v57;\n  v4[3294] = v58 + v57 + v55;\n  v60 = v57 - v58;\n  v4[3296] = v55 - v59;\n  v4[3295] = v60 + 2 * v56;\n  v4[3297] = v56 - 2 * v60;\n  v61 = v4[3310];\n  v62 = v4[3313];\n  v63 = v62 + v61;\n  v64 = v4[3311];\n  v65 = v4[3312];\n  v4[3310] = v62 + v61 + v65 + v64;\n  v66 = v61 - v62;\n  v4[3312] = v63 - (v65 + v64);\n  v67 = v64 - v65;\n  v4[3311] = v67 + 2 * v66;\n  v4[3313] = v66 - 2 * v67;\n  v68 = v4[3329];\n  v69 = v4[3326];\n  v70 = v4[3327];\n  v71 = v68 + v69;\n  v72 = v69 - v68;\n  v73 = v4[3328];\n  v74 = v73 + v70;\n  v75 = v70 - v73;\n  v4[3326] = v74 + v71;\n  v4[3328] = v71 - v74;\n  v4[3327] = v75 + 2 * v72;\n  v4[3329] = v72 - 2 * v75;\n  v13 = 0;\nLABEL_6:\n  v172 = (_DWORD *)(v5 + v7 + 532);\n  v166 = 1 << (3 - v11);\n  v165 = 4 - v11;\n  v164 = v11 - 4;\n  v158 = v12;\n  v76 = &xmmword_4F7C50;\n  if ( v160 == 1 )\n    v76 = xmmword_4F7DD0;\n  v173 = v76;\n  v77 = dword_4F52D0;\n  if ( v160 == 1 )\n    v77 = dword_4F5610;\n  v78 = -1;\n  v161 = 0;\n  v79 = -15LL;\n  v174 = (signed __int64)&v77[16 * (signed __int64)v11];\n  v80 = 0;\n  v169 = v13;\n  if ( !v4[18111] )\n    goto LABEL_25;\nLABEL_24:\n  for ( i = byte_489CB0; ; i = byte_489C90 )\n  {\n    v85 = (unsigned __int8)i[2 * v79 + 30];\n    v86 = (unsigned __int8)i[2 * v79 + 31];\n    v87 = v85 << 6;\n    v88 = &v4[16 * v85];\n    v89 = -v88[v86 + 3278];\n    if ( v89 < 1 )\n      v89 = v88[v86 + 3278];\n    if ( !v13 )\n      v89 = (*(_DWORD *)(v174 + 16 * v85 + 4 * v86) + *((_DWORD *)&v173[4 * v158 + v85] + v86) * v89) >> v168;\n    ++v78;\n    if ( !v89 )\n      break;\n    v90 = 999999;\n    if ( !((unsigned __int8)v13 | (v89 > 1)) )\n      v90 = (unsigned __int8)byte_489CD0[16 * *((signed int *)dest + 617) + v78];\n    *v176 += v90;\n    v91 = sub_452340(v89, v88[v86 + 3278]);\n    v92 = v161;\n    *(_DWORD *)(v171 + 4 * v92) = v91;\n    *(_DWORD *)(v175 + 4 * v92) = v78;\n    ++v161;\n    v93 = sub_452340(v89, *(_DWORD *)((char *)off_49F6D0 + 4 * v86 + v87 + 13112));\n    v13 = v169;\n    if ( !v169 )\n    {\n      if ( v167 > 23 )\n      {\n        if ( v160 == 1 )\n          v82 = *((_DWORD *)&xmmword_4F7AD0[4 * v158 + v85] + v86) * v93;\n        else\n          v82 = *((_DWORD *)&xmmword_4F7950[4 * v158 + v85] + v86) * v93;\n        v83 = v82 << v164;\n      }\n      else\n      {\n        if ( v160 == 1 )\n          v81 = *((_DWORD *)&xmmword_4F7AD0[4 * v158 + v85] + v86) * v93;\n        else\n          v81 = *((_DWORD *)&xmmword_4F7950[4 * v158 + v85] + v86) * v93;\n        v83 = (v166 + v81) >> v165;\n      }\n      v80 = 1;\n      v78 = -1;\nLABEL_22:\n      *(_DWORD *)((char *)off_49F6D0 + 4 * v86 + v87 + 13112) = v83;\n      if ( !v79 )\n        goto LABEL_40;\n      goto LABEL_23;\n    }\n    v80 = 1;\n    v78 = -1;\n    if ( !v79 )\n      goto LABEL_40;\nLABEL_23:\n    v4 = off_49F6D0;\n    ++v79;\n    if ( *((_DWORD *)off_49F6D0 + 18111) )\n      goto LABEL_24;\nLABEL_25:\n    if ( v4[18100] && *v172 )\n      goto LABEL_24;\n  }\n  v83 = 0;\n  if ( !v13 )\n    goto LABEL_22;\n  if ( v79 )\n    goto LABEL_23;\nLABEL_40:\n  v159[0] = v80;\n  *(_DWORD *)(v171 + 4LL * v161) = 0;\n  v94 = off_49F6D0;\n  if ( !v13 )\n  {\n    v95 = *((_DWORD *)off_49F6D0 + 3310);\n    v96 = *((_DWORD *)off_49F6D0 + 3326);\n    v97 = *((_DWORD *)off_49F6D0 + 3278);\n    v98 = *((_DWORD *)off_49F6D0 + 3279);\n    v99 = (*((_DWORD *)off_49F6D0 + 3294) >> 1) - v96;\n    v100 = *((_DWORD *)off_49F6D0 + 3294) + (v96 >> 1);\n    *((_DWORD *)off_49F6D0 + 3278) = v100 + v95 + v97;\n    v94[3326] = v95 + v97 - v100;\n    v101 = v97 - v95;\n    v94[3294] = v99 + v101;\n    v94[3310] = v101 - v99;\n    v102 = v94[3311];\n    v103 = v94[3327];\n    v104 = (v94[3295] >> 1) - v103;\n    v105 = v94[3295] + (v103 >> 1);\n    v94[3279] = v105 + v102 + v98;\n    v94[3327] = v102 + v98 - v105;\n    v106 = v98 - v102;\n    v94[3295] = v106 + v104;\n    v94[3311] = v106 - v104;\n    v107 = v94[3280];\n    v108 = v94[3312];\n    v109 = v94[3328];\n    v110 = (v94[3296] >> 1) - v109;\n    v111 = v94[3296] + (v109 >> 1);\n    v94[3280] = v111 + v108 + v107;\n    v94[3328] = v108 + v107 - v111;\n    v112 = v107 - v108;\n    v94[3296] = v112 + v110;\n    v94[3312] = v112 - v110;\n    v113 = v94[3281];\n    v114 = v94[3297];\n    v115 = v94[3313];\n    v116 = v94[3329];\n    v117 = v94[3281] - v115;\n    v118 = v114 + (v94[3329] >> 1);\n    v94[3281] = v118 + v115 + v113;\n    v94[3329] = v115 + v113 - v118;\n    v119 = (v114 >> 1) - v116;\n    v94[3297] = v119 + v117;\n    v120 = (signed __int64)(v94 + 3278);\n    v94[3313] = v117 - v119;\n    v121 = v94[18181];\n    v122 = (signed __int64)&v94[8 * v170 + 3151] + 2 * v163 + 2;\n    v123 = -1LL;\n    v124 = 0LL;\n    v162 = v94[18181];\n    do\n    {\n      v125 = *(_OWORD *)(v120 + 2 * v124);\n      v126 = DWORD2(v125) + v125;\n      v127 = v125 - DWORD2(v125);\n      v128 = (SDWORD1(v125) >> 1) - HIDWORD(v125);\n      v129 = DWORD1(v125) + (SHIDWORD(v125) >> 1);\n      if ( v121 )\n      {\n        *(_DWORD *)(v120 + 2 * v124) = (v129 + v126 + 32) >> 6;\n        *(_DWORD *)(v120 + 2 * v124 + 12) = (v126 + 32 - v129) >> 6;\n        *(_DWORD *)(v120 + 2 * v124 + 4) = (v128 + v127 + 32) >> 6;\n        LODWORD(v130) = (v127 + 32 - v128) >> 6;\n      }\n      else\n      {\n        v131 = (signed int)v94[18171];\n        v132 = v129 + v126;\n        v133 = (unsigned __int64)*(unsigned __int16 *)(v122 + v124 - 6) << 6;\n        v134 = 0LL;\n        v135 = 0LL;\n        if ( (signed __int64)(v133 + v132) >= -32 )\n          v135 = (signed __int64)(v133 + v132 + 32) >> 6;\n        v136 = v94[18171];\n        if ( v135 <= v131 )\n          v136 = v135;\n        v94[v124 / 2 + 3278] = v136;\n        v137 = v126 - v129;\n        v138 = (unsigned __int64)*(unsigned __int16 *)(v122 + v124) << 6;\n        v139 = 0LL;\n        if ( (signed __int64)(v137 + v138) >= -32 )\n          v139 = (signed __int64)(v137 + v138 + 32) >> 6;\n        if ( v139 <= v131 )\n          LODWORD(v131) = v139;\n        v94[v124 / 2 + 3281] = v131;\n        v130 = (signed int)v94[18171];\n        v140 = v128 + v127;\n        v141 = (unsigned __int64)*(unsigned __int16 *)(v122 + v124 - 4) << 6;\n        v142 = 0LL;\n        if ( (signed __int64)(v141 + v140) >= -32 )\n          v142 = (signed __int64)(v141 + v140 + 32) >> 6;\n        v143 = v94[18171];\n        if ( v142 <= v130 )\n          v143 = v142;\n        v94[v124 / 2 + 3279] = v143;\n        v144 = v127 - v128;\n        v145 = (unsigned __int64)*(unsigned __int16 *)(v122 + v124 - 2) << 6;\n        v121 = v162;\n        if ( (signed __int64)(v145 + v144) >= -32 )\n          v134 = (signed __int64)(v145 + v144 + 32) >> 6;\n        if ( v134 <= v130 )\n          LODWORD(v130) = v134;\n      }\n      *(_DWORD *)(v120 + 2 * v124 + 8) = v130;\n      v124 += 32LL;\n      ++v123;\n    }\n    while ( v123 <= 2 );\n  }\n  if ( !v94[18181] )\n  {\n    v146 = qword_4F9E30;\n    v147 = v170 + 1;\n    v148 = v170 + 2;\n    v149 = (signed __int64)&v94[8 * v170 + 3174] + 2 * v163;\n    v150 = 0LL;\n    do\n    {\n      v151 = v94[v150 + 3278];\n      if ( v169 )\n      {\n        v152 = *(_QWORD *)(v146 + 6424);\n        v153 = v94[39] + v163 + (signed int)v150;\n        v154 = v94[38];\n        *(_WORD *)(*(_QWORD *)(v152 + 8 * v153) + 2LL * (v154 + v170)) = *(_WORD *)(v149 + 2 * v150 - 96) + v151;\n        *(_WORD *)(*(_QWORD *)(v152 + 8 * v153) + 2LL * (v147 + v154)) = LOWORD(v94[v150 + 3294])\n                                                                       + *(_WORD *)(v149 + 2 * v150 - 64);\n        *(_WORD *)(*(_QWORD *)(v152 + 8 * v153) + 2LL * (v148 + v154)) = LOWORD(v94[v150 + 3310])\n                                                                       + *(_WORD *)(v149 + 2 * v150 - 32);\n        v155 = (_QWORD *)(v152 + 8 * v153);\n        v156 = LOWORD(v94[v150 + 3326]) + *(_WORD *)(v149 + 2 * v150);\n      }\n      else\n      {\n        v155 = (_QWORD *)(*(_QWORD *)(v146 + 6424) + 8LL * (v94[39] + v163 + (signed int)v150));\n        v154 = v94[38];\n        *(_WORD *)(*v155 + 2LL * (v154 + v170)) = v151;\n        *(_WORD *)(*v155 + 2LL * (v147 + v154)) = v94[v150 + 3294];\n        *(_WORD *)(*v155 + 2LL * (v148 + v154)) = v94[v150 + 3310];\n        v156 = v94[v150 + 3326];\n      }\n      *(_WORD *)(*v155 + 2LL * (v170 + 3 + v154)) = v156;\n      ++v150;\n    }\n    while ( v150 != 4 );\n  }\n  return v159[0];\n}\n", 
            "funcStartAddr": "0x4045f0L", 
            "funcEndAddr": "0x40513eL", 
            "funcName": "sub_4045F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405140@<rax>(__int64 a1@<rdi>, int a2@<esi>, int a3@<r8d>, __int64 a4@<r9>, signed __int64 a5@<r11>)\n{\n  _DWORD *v5; // r12\n  __int64 v6; // rcx\n  __int64 v7; // rsi\n  __int64 v8; // rdx\n  __int64 *v9; // rcx\n  unsigned int v10; // er10\n  __int64 v11; // rbp\n  int v12; // ecx\n  int v13; // ecx\n  int v14; // edi\n  __int64 v15; // rdi\n  __int64 v16; // rsi\n  __int64 v17; // rdx\n  signed int v18; // er14\n  int v19; // er8\n  int v20; // ecx\n  __int64 v21; // rbp\n  char *v22; // r10\n  __int64 v23; // r15\n  int v24; // edx\n  int v25; // ebx\n  int v26; // ebp\n  int v27; // edi\n  int v28; // ebx\n  int v29; // edx\n  int v30; // er13\n  int v31; // ecx\n  int v32; // edx\n  int v33; // eax\n  int v34; // ecx\n  int v35; // ebp\n  int v36; // eax\n  int v37; // edx\n  int v38; // edi\n  int v39; // eax\n  int v40; // eax\n  int v41; // er13\n  int v42; // edx\n  int v43; // edi\n  int v44; // ebx\n  int v45; // eax\n  int v46; // edi\n  int v47; // edx\n  int v48; // ebp\n  int v49; // ecx\n  int v50; // edx\n  int v51; // eax\n  int v52; // edi\n  int v53; // ebp\n  int v54; // er13\n  int v55; // ecx\n  int v56; // edx\n  int v57; // edi\n  int v58; // ebx\n  int v59; // ecx\n  int v60; // edx\n  int v61; // eax\n  int v62; // ecx\n  int v63; // edx\n  int v64; // eax\n  int v65; // ecx\n  int v66; // edi\n  int v67; // ebx\n  int v68; // ecx\n  int v69; // eax\n  int v70; // ecx\n  int v71; // edx\n  int v72; // eax\n  int v73; // ecx\n  int v74; // edi\n  int v75; // ebx\n  int v76; // ecx\n  int v77; // er13\n  int v78; // edx\n  int v79; // ebp\n  int v80; // ecx\n  int v81; // edi\n  int v82; // ebx\n  int v83; // edx\n  int v84; // ebp\n  int v85; // er15\n  int v86; // eax\n  int v87; // er10\n  int v88; // ebp\n  __int64 v89; // rbx\n  int v90; // eax\n  int v91; // ecx\n  int v92; // edx\n  int v93; // esi\n  int v94; // edi\n  int v95; // ebx\n  int v96; // ecx\n  signed __int64 v97; // rax\n  __int64 v98; // r8\n  signed __int64 v99; // rdx\n  __int64 v100; // rax\n  _DWORD *v101; // r14\n  signed int v102; // er13\n  signed __int64 v103; // r12\n  __int64 v104; // r15\n  int v105; // eax\n  int v106; // eax\n  unsigned int v107; // ebp\n  int v108; // eax\n  signed int v109; // eax\n  int v110; // esi\n  int v111; // edi\n  int v112; // edx\n  int v113; // eax\n  int *v114; // rbp\n  int *v115; // rbx\n  char v116; // cl\n  int v117; // ebx\n  int v118; // esi\n  int v119; // edi\n  int v120; // ebp\n  __int64 v121; // rbp\n  signed __int64 v122; // rdx\n  __int128 *v123; // rsi\n  signed __int64 v124; // rdi\n  _DWORD *v125; // rcx\n  unsigned __int64 v126; // rbx\n  __int64 v127; // kr00_8\n  int v128; // esi\n  int v129; // ebp\n  int v130; // edi\n  __int32 v131; // edx\n  int v132; // edi\n  int v133; // esi\n  int v134; // eax\n  __int32 v135; // edx\n  int v136; // ebp\n  __int32 v137; // eax\n  int v138; // edi\n  int v139; // er8\n  int v140; // eax\n  __int32 v141; // edi\n  int v142; // ebx\n  __int32 v143; // eax\n  int v144; // edx\n  int v145; // ebp\n  int v146; // edi\n  int v147; // eax\n  __int32 v148; // edx\n  __int32 v149; // ecx\n  signed __int64 v150; // rbp\n  signed __int64 v151; // rcx\n  __int64 v152; // rsi\n  char *v153; // rdi\n  __int64 v154; // rcx\n  signed int v155; // er14\n  signed __int64 v156; // r12\n  __int64 v157; // r13\n  __int64 v158; // r15\n  __int128 *v159; // rbx\n  int v160; // esi\n  int v161; // ebp\n  signed int v162; // eax\n  int v163; // eax\n  int *v164; // rbx\n  int v165; // eax\n  int v166; // er15\n  __int64 v167; // r11\n  unsigned __int64 v168; // r10\n  signed __int64 v169; // rdx\n  int *v170; // rbx\n  unsigned __int64 v171; // rdi\n  __int64 v172; // rsi\n  signed __int64 v173; // rcx\n  int *v174; // rbp\n  char v175; // cl\n  int v176; // ebx\n  int v177; // ebp\n  __int64 v178; // kr08_8\n  int v179; // ebp\n  int v180; // ebx\n  int v181; // edi\n  __int32 v182; // ebp\n  int v183; // eax\n  int v184; // edi\n  __int32 v185; // ebp\n  int v186; // eax\n  unsigned int v187; // eax\n  __int32 v188; // ecx\n  int v189; // edi\n  __int32 v190; // ebp\n  int v191; // edx\n  signed int v192; // er9\n  _DWORD *v193; // r10\n  char v194; // r11\n  _DWORD *v195; // rbp\n  _DWORD *v196; // r14\n  char v197; // r15\n  unsigned __int64 v198; // r8\n  signed int v199; // edx\n  int v200; // eax\n  __int64 v201; // rsi\n  signed __int64 v202; // rdi\n  int v203; // eax\n  int v204; // eax\n  int v205; // eax\n  int v206; // eax\n  bool v207; // cf\n  int v208; // er13\n  int v209; // edi\n  int v210; // esi\n  int v211; // ebp\n  int v212; // ebx\n  int v213; // ecx\n  int v214; // er12\n  int v215; // eax\n  int v216; // er15\n  int v217; // esi\n  int v218; // eax\n  __int64 v219; // rax\n  signed __int64 v220; // rdx\n  char *v221; // rbx\n  __int64 v222; // rsi\n  signed int v223; // er13\n  signed __int64 v224; // r12\n  __int64 v225; // r15\n  signed __int64 v226; // rbp\n  int v227; // esi\n  int v228; // ecx\n  int v229; // ebx\n  signed int v230; // eax\n  int v231; // eax\n  __int64 v232; // rdx\n  signed int v233; // er9\n  _DWORD *v234; // r10\n  char v235; // r11\n  _DWORD *v236; // rbx\n  _DWORD *v237; // rbp\n  char v238; // dl\n  __int64 v239; // r8\n  int v240; // eax\n  __int64 v241; // rsi\n  signed __int64 v242; // rdi\n  int v243; // eax\n  int v244; // eax\n  int v245; // eax\n  int v246; // eax\n  int v247; // ebp\n  int v248; // edx\n  int v249; // eax\n  int v250; // ebp\n  _DWORD *v251; // rcx\n  int v252; // eax\n  char *v253; // r9\n  signed int v254; // ecx\n  __int64 v255; // rsi\n  __int128 *v256; // rcx\n  int *v257; // rcx\n  __int64 v258; // rdi\n  signed int v259; // edx\n  signed int v260; // er15\n  __int64 v261; // rsi\n  signed __int64 v262; // rax\n  __int64 *v263; // rax\n  signed int v264; // er14\n  signed __int64 v265; // r8\n  int v266; // eax\n  int v267; // eax\n  int v268; // eax\n  char *v269; // rax\n  __int64 v270; // r13\n  __int64 v271; // r12\n  __int64 v272; // rbx\n  int v273; // esi\n  int v274; // ebp\n  signed int v275; // eax\n  int v276; // eax\n  __int64 v277; // rdx\n  int v278; // eax\n  _DWORD *v279; // r8\n  signed int v280; // eax\n  int v281; // er13\n  __int64 v282; // r12\n  __int64 v283; // r15\n  signed __int64 v284; // r11\n  signed __int64 v285; // r10\n  __int64 v286; // r14\n  __int64 v287; // rdi\n  signed __int64 v288; // rax\n  __int64 v289; // rbx\n  __int64 v290; // rbp\n  _DWORD *v291; // rsi\n  signed __int64 v292; // rcx\n  char *v293; // rax\n  signed int v294; // edx\n  char *v295; // r11\n  __int64 v296; // rdi\n  signed __int64 v297; // r15\n  signed __int64 v298; // rcx\n  __int64 v299; // r12\n  __int64 v300; // r13\n  unsigned __int64 v301; // r14\n  __int64 v302; // rax\n  __int64 v303; // rax\n  signed __int64 v304; // r8\n  __int64 v305; // rdi\n  int v306; // ecx\n  char *v307; // rdx\n  signed __int64 v308; // r11\n  int v309; // er13\n  signed __int64 v310; // rax\n  int v311; // ebp\n  int v312; // esi\n  int v313; // ebp\n  int v314; // ebx\n  signed __int64 v315; // rbp\n  int v316; // ecx\n  char *v317; // rbx\n  __int64 v318; // rax\n  signed __int64 v319; // rdi\n  int v320; // ecx\n  char *v321; // r10\n  int v322; // er13\n  signed __int64 v323; // r8\n  int v324; // esi\n  int v325; // ecx\n  char *v326; // rbp\n  int v327; // ecx\n  int v328; // er13\n  int v329; // esi\n  int v330; // ecx\n  signed int v331; // er13\n  char *v332; // rcx\n  __int64 v333; // rbx\n  unsigned int v334; // er12\n  __int64 v335; // rdi\n  int v336; // ebp\n  int v337; // ebx\n  int v338; // er8\n  int v339; // ecx\n  signed __int64 v340; // rsi\n  __int64 v341; // r14\n  __int64 v342; // r11\n  signed __int64 v343; // rax\n  __int64 v344; // r12\n  unsigned __int64 v345; // r13\n  signed __int64 v346; // rdx\n  signed __int64 v347; // rsi\n  __int64 v348; // rax\n  unsigned __int64 v349; // rcx\n  signed __int64 v350; // rdx\n  signed __int64 v351; // rdx\n  __int64 v352; // rsi\n  unsigned __int64 v353; // rbp\n  signed __int64 v354; // r10\n  signed __int64 v355; // rax\n  int v356; // ebx\n  unsigned __int64 v357; // rsi\n  __int64 v358; // r8\n  __int64 v359; // rsi\n  __int64 v360; // r14\n  __int64 v361; // r10\n  __int64 v362; // r11\n  __int64 v363; // rbx\n  int v364; // ecx\n  __int64 v365; // rdi\n  __int64 v366; // rdx\n  int v367; // ebp\n  int v369; // [rsp+0h] [rbp-E86h]\n  char v370; // [rsp+CB5h] [rbp-1D1h]\n  int v371; // [rsp+CB6h] [rbp-1D0h]\n  int v372; // [rsp+CBAh] [rbp-1CCh]\n  __int128 v373; // [rsp+CBEh] [rbp-1C8h]\n  int v374; // [rsp+CCEh] [rbp-1B8h]\n  int v375; // [rsp+CD2h] [rbp-1B4h]\n  int v376; // [rsp+CD6h] [rbp-1B0h]\n  int v377; // [rsp+CDAh] [rbp-1ACh]\n  int v378; // [rsp+CE2h] [rbp-1A4h]\n  __int64 v379; // [rsp+CE6h] [rbp-1A0h]\n  __int64 v380; // [rsp+CEEh] [rbp-198h]\n  __int64 v381; // [rsp+CF6h] [rbp-190h]\n  __int64 v382; // [rsp+CFEh] [rbp-188h]\n  __int64 v383; // [rsp+D06h] [rbp-180h]\n  __int128 v384; // [rsp+D0Eh] [rbp-178h]\n  __int128 v385; // [rsp+D1Eh] [rbp-168h]\n  __int128 v386; // [rsp+D2Eh] [rbp-158h]\n  __m128i v387; // [rsp+D3Eh] [rbp-148h]\n  __int64 v388; // [rsp+D56h] [rbp-130h]\n  __int128 *v389; // [rsp+D5Eh] [rbp-128h]\n  __int64 v390; // [rsp+D66h] [rbp-120h]\n  char *v391; // [rsp+D6Eh] [rbp-118h]\n  __int64 v392; // [rsp+D76h] [rbp-110h]\n  char *v393; // [rsp+D7Eh] [rbp-108h]\n  __int64 v394; // [rsp+D86h] [rbp-100h]\n  __int64 v395; // [rsp+D8Eh] [rbp-F8h]\n  __int64 v396; // [rsp+D96h] [rbp-F0h]\n  __int64 v397; // [rsp+D9Eh] [rbp-E8h]\n  __int64 v398; // [rsp+DA6h] [rbp-E0h]\n  __int64 v399; // [rsp+DAEh] [rbp-D8h]\n  unsigned __int64 v400; // [rsp+DB6h] [rbp-D0h]\n  unsigned __int64 v401; // [rsp+DBEh] [rbp-C8h]\n  int v402; // [rsp+DC6h] [rbp-C0h]\n  int v403; // [rsp+DCAh] [rbp-BCh]\n  int v404; // [rsp+DCEh] [rbp-B8h]\n  int v405; // [rsp+DD2h] [rbp-B4h]\n  int v406; // [rsp+DD6h] [rbp-B0h]\n  int v407; // [rsp+DDAh] [rbp-ACh]\n  int v408; // [rsp+DDEh] [rbp-A8h]\n  int v409; // [rsp+DE2h] [rbp-A4h]\n  unsigned int v410; // [rsp+DE6h] [rbp-A0h]\n  int v411; // [rsp+DEAh] [rbp-9Ch]\n  __int64 v412; // [rsp+E0Eh] [rbp-78h]\n  __int64 v413; // [rsp+E16h] [rbp-70h]\n  int *v414; // [rsp+E1Eh] [rbp-68h]\n  __int64 v415; // [rsp+E26h] [rbp-60h]\n  __int64 v416; // [rsp+E2Eh] [rbp-58h]\n  __int64 v417; // [rsp+E36h] [rbp-50h]\n  __int64 v418; // [rsp+E3Eh] [rbp-48h]\n  __int64 v419; // [rsp+E46h] [rbp-40h]\n  __int64 v420; // [rsp+E4Eh] [rbp-38h]\n\n  v378 = a2;\n  v5 = off_49F6D0;\n  v6 = *((_QWORD *)off_49F6D0 + 1768);\n  v7 = *((_QWORD *)off_49F6D0 + 1771);\n  v8 = *((signed int *)off_49F6D0 + 3);\n  v412 = a1;\n  v390 = (signed int)a1;\n  v9 = *(__int64 **)(v6 + 8LL * (signed int)a1 + 8);\n  v380 = *v9;\n  v393 = (char *)v9[1];\n  LODWORD(v9) = *(_DWORD *)(v7 + 632 * v8 + 72) - 9;\n  v370 = (unsigned int)v9 < 5;\n  LOBYTE(a4) = 0x13u >> (char)v9;\n  v10 = *((_DWORD *)off_49F6D0 + 18173);\n  v11 = *((signed int *)off_49F6D0 + 18175);\n  v399 = v7;\n  v398 = 632 * v8;\n  v12 = *(_DWORD *)(v7 + 632 * v8 + 12);\n  if ( v12 + *((_DWORD *)off_49F6D0 + 18167) )\n    a3 = 0;\n  else\n    LOBYTE(a3) = *((_DWORD *)off_49F6D0 + 18176) == 1;\n  v13 = *((_DWORD *)off_49F6D0 + v390 + 18179) + v12;\n  v14 = 51;\n  if ( v13 < 52 )\n    v14 = v13;\n  if ( v13 < -*((_DWORD *)off_49F6D0 + 18168) )\n    v14 = -*((_DWORD *)off_49F6D0 + 18168);\n  if ( v14 >= 0 )\n    v14 = (unsigned __int8)byte_489C50[v14];\n  v15 = (unsigned int)(*((_DWORD *)off_49F6D0 + 18168) + v14);\n  v401 = (unsigned __int64)(715827883LL * (signed int)v15) >> 32;\n  v400 = (unsigned __int64)(715827883LL * (signed int)v15) >> 63;\n  v394 = (unsigned int)(v401 + v400);\n  v16 = (unsigned int)(2 * v394);\n  v388 = v11;\n  if ( (_DWORD)v11 == 2 )\n  {\n    v17 = (signed int)v15 + 3;\n    v18 = ((unsigned __int64)(715827883 * v17) >> 32) + ((unsigned __int64)(715827883 * v17) >> 63);\n    v395 = (signed int)v17 - 6 * v18;\n    LODWORD(v392) = v18 + 16;\n  }\n  else\n  {\n    LODWORD(v392) = 1;\n    v18 = 0;\n    v395 = 0LL;\n  }\n  v372 = a3;\n  v396 = (v10 >> 31) + v10;\n  v19 = 6 * v394;\n  v20 = *((_DWORD *)off_49F6D0 + 18178);\n  v413 = v15;\n  if ( v20 > 0 )\n  {\n    LODWORD(v21) = *((_DWORD *)off_49F6D0 + 18177);\n    v22 = (char *)off_49F6D0 + 13316;\n    a5 = 0LL;\n    do\n    {\n      if ( (signed int)v21 > 0 )\n      {\n        v16 = (__int64)v22;\n        v23 = 0LL;\n        do\n        {\n          if ( !(_BYTE)v372 )\n          {\n            v24 = *(_DWORD *)(v16 - 12);\n            v25 = *(_DWORD *)(v16 - 204);\n            v26 = *(_DWORD *)(v16 - 200);\n            v27 = v24 + v25;\n            v28 = v25 - v24;\n            v29 = *(_DWORD *)(v16 - 140);\n            v30 = *(_DWORD *)(v16 - 76);\n            v31 = v29 + v30;\n            *(_DWORD *)(v16 - 204) = v29 + v30 + v27;\n            v32 = v29 - v30;\n            *(_DWORD *)(v16 - 76) = v27 - v31;\n            *(_DWORD *)(v16 - 140) = v32 + 2 * v28;\n            *(_DWORD *)(v16 - 12) = v28 - 2 * v32;\n            v33 = *(_DWORD *)(v16 - 8);\n            v34 = v33 + v26;\n            v35 = v26 - v33;\n            v36 = *(_DWORD *)(v16 - 136);\n            v37 = *(_DWORD *)(v16 - 72);\n            v38 = v37 + v36;\n            *(_DWORD *)(v16 - 200) = v37 + v36 + v34;\n            v39 = v36 - v37;\n            *(_DWORD *)(v16 - 72) = v34 - v38;\n            *(_DWORD *)(v16 - 136) = v39 + 2 * v35;\n            *(_DWORD *)(v16 - 8) = v35 - 2 * v39;\n            v40 = *(_DWORD *)(v16 - 196);\n            v41 = *(_DWORD *)(v16 - 4);\n            v42 = v40 + v41;\n            v43 = *(_DWORD *)(v16 - 132);\n            v44 = *(_DWORD *)(v16 - 68);\n            *(_DWORD *)(v16 - 196) = v40 + v41 + v44 + v43;\n            v45 = v40 - v41;\n            *(_DWORD *)(v16 - 68) = v42 - (v44 + v43);\n            v46 = v43 - v44;\n            *(_DWORD *)(v16 - 132) = v46 + 2 * v45;\n            *(_DWORD *)(v16 - 4) = v45 - 2 * v46;\n            v47 = *(_DWORD *)(v16 - 192);\n            v48 = *(_DWORD *)(v16 - 128);\n            v49 = *(_DWORD *)v16 + v47;\n            v50 = v47 - *(_DWORD *)v16;\n            v51 = *(_DWORD *)(v16 - 64);\n            v52 = v51 + v48;\n            v53 = v48 - v51;\n            *(_DWORD *)(v16 - 192) = v52 + v49;\n            *(_DWORD *)(v16 - 64) = v49 - v52;\n            *(_DWORD *)(v16 - 128) = v53 + 2 * v50;\n            *(_DWORD *)v16 = v50 - 2 * v53;\n            *(_QWORD *)&v373 = __PAIR__(v52, v49);\n            *((_QWORD *)&v373 + 1) = __PAIR__(v50, v53);\n            v54 = *(_DWORD *)(v16 - 192);\n            v55 = *(_DWORD *)(v16 - 204);\n            v56 = *(_DWORD *)(v16 - 200);\n            v57 = v54 + v55;\n            v58 = *(_DWORD *)(v16 - 196);\n            *(_DWORD *)(v16 - 204) = v54 + v55 + v58 + v56;\n            v59 = v55 - v54;\n            *(_DWORD *)(v16 - 196) = v57 - (v58 + v56);\n            v60 = v56 - v58;\n            *(_DWORD *)(v16 - 200) = v60 + 2 * v59;\n            *(_DWORD *)(v16 - 192) = v59 - 2 * v60;\n            v61 = *(_DWORD *)(v16 - 140);\n            v62 = *(_DWORD *)(v16 - 128);\n            v63 = v62 + v61;\n            v64 = v61 - v62;\n            v65 = *(_DWORD *)(v16 - 136);\n            v66 = *(_DWORD *)(v16 - 132);\n            v67 = v66 + v65;\n            v68 = v65 - v66;\n            *(_DWORD *)(v16 - 140) = v67 + v63;\n            *(_DWORD *)(v16 - 132) = v63 - v67;\n            *(_DWORD *)(v16 - 136) = v68 + 2 * v64;\n            *(_DWORD *)(v16 - 128) = v64 - 2 * v68;\n            v69 = *(_DWORD *)(v16 - 76);\n            v70 = *(_DWORD *)(v16 - 64);\n            v71 = v70 + v69;\n            v72 = v69 - v70;\n            v73 = *(_DWORD *)(v16 - 72);\n            v74 = *(_DWORD *)(v16 - 68);\n            v75 = v74 + v73;\n            *(_DWORD *)(v16 - 76) = v74 + v73 + v71;\n            v76 = v73 - v74;\n            *(_DWORD *)(v16 - 68) = v71 - v75;\n            *(_DWORD *)(v16 - 72) = v76 + 2 * v72;\n            *(_DWORD *)(v16 - 64) = v72 - 2 * v76;\n            v77 = *(_DWORD *)v16;\n            v78 = *(_DWORD *)(v16 - 12);\n            v79 = *(_DWORD *)(v16 - 8);\n            v80 = *(_DWORD *)v16 + v78;\n            v81 = *(_DWORD *)(v16 - 4);\n            v82 = v81 + v79;\n            *(_DWORD *)(v16 - 12) = v81 + v79 + v80;\n            v83 = v78 - v77;\n            *(_DWORD *)(v16 - 4) = v80 - (v81 + v79);\n            v84 = v79 - v81;\n            *(_DWORD *)(v16 - 8) = v84 + 2 * v83;\n            *(_DWORD *)v16 = v83 - 2 * v84;\n            *(_QWORD *)&v373 = __PAIR__(v82, v80);\n            *((_QWORD *)&v373 + 1) = __PAIR__(v83, v84);\n          }\n          v23 += 4LL;\n          v21 = (signed int)v5[18177];\n          v16 += 256LL;\n        }\n        while ( v23 < v21 );\n        v20 = v5[18178];\n        LODWORD(v15) = v413;\n      }\n      a5 += 4LL;\n      v22 += 16;\n    }\n    while ( a5 < v20 );\n  }\n  v396 = (unsigned int)((signed int)v396 >> 1);\n  v370 &= a4;\n  v85 = v15 - v19;\n  v86 = v388;\n  if ( (_DWORD)v388 == 3 )\n  {\n    LOBYTE(v87) = v372;\n    if ( v20 > 0 )\n    {\n      LODWORD(v121) = v5[18177];\n      v122 = (signed __int64)(v5 + 3278);\n      v123 = &v384;\n      v124 = 0LL;\n      do\n      {\n        if ( (signed int)v121 > 0 )\n        {\n          v125 = (_DWORD *)v122;\n          v126 = 0LL;\n          do\n          {\n            LODWORD(v123[v126]) = *v125;\n            ++v126;\n            v121 = (signed int)v5[18177];\n            v125 += 64;\n          }\n          while ( (signed __int64)(v126 * 4) < v121 );\n          v20 = v5[18178];\n        }\n        v124 += 4LL;\n        v122 += 16LL;\n        v123 = (__int128 *)((char *)v123 + 4);\n      }\n      while ( v124 < v20 );\n    }\n    if ( !(_BYTE)v87 )\n    {\n      v127 = v384;\n      v128 = v387.m128i_i32[0] + v384;\n      v129 = v386;\n      LODWORD(v384) = v385 + v386 + v387.m128i_i32[0] + v384;\n      LODWORD(v386) = v128 - (v385 + v386);\n      v130 = v385 - v129;\n      LODWORD(v385) = v385 - v129 + v127 - v387.m128i_i32[0];\n      v387.m128i_i32[0] = v127 - v387.m128i_i32[0] - v130;\n      v131 = v387.m128i_i32[1] + DWORD1(v384);\n      v132 = DWORD1(v386);\n      DWORD1(v384) += v387.m128i_i32[1] + DWORD1(v386) + DWORD1(v385);\n      DWORD1(v386) = v131 - (DWORD1(v386) + DWORD1(v385));\n      v133 = DWORD1(v385) - v132;\n      DWORD1(v385) = DWORD1(v385) - v132 + HIDWORD(v127) - v387.m128i_i32[1];\n      v387.m128i_i32[1] = HIDWORD(v127) - v387.m128i_i32[1] - v133;\n      v134 = DWORD2(v384);\n      v135 = v387.m128i_i32[2] + DWORD2(v384);\n      v136 = DWORD2(v386);\n      DWORD2(v384) += DWORD2(v385) + DWORD2(v386) + v387.m128i_i32[2];\n      v137 = v134 - v387.m128i_i32[2];\n      DWORD2(v386) = v135 - (DWORD2(v385) + DWORD2(v386));\n      v138 = DWORD2(v385) - v136;\n      DWORD2(v385) = DWORD2(v385) - v136 + v137;\n      v139 = DWORD2(v385);\n      v387.m128i_i32[2] = v137 - v138;\n      v140 = HIDWORD(v384);\n      v141 = v387.m128i_i32[3] + HIDWORD(v384);\n      v142 = HIDWORD(v386);\n      HIDWORD(v384) += HIDWORD(v386) + HIDWORD(v385) + v387.m128i_i32[3];\n      v143 = v140 - v387.m128i_i32[3];\n      HIDWORD(v386) = v141 - (HIDWORD(v386) + HIDWORD(v385));\n      v144 = HIDWORD(v386);\n      v145 = HIDWORD(v385) - v142;\n      HIDWORD(v385) = v143 + HIDWORD(v385) - v142;\n      v146 = HIDWORD(v385);\n      v147 = v143 - v145;\n      v387.m128i_i32[3] = v147;\n      _mm_store_si128(\n        (__m128i *)&v384,\n        _mm_srai_epi32(\n          _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(DWORD2(v384) + DWORD1(v384) + HIDWORD(v384) + (signed int)v384),\n              _mm_cvtsi32_si128((signed int)v384 - HIDWORD(v384) + DWORD1(v384) - DWORD2(v384))),\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(HIDWORD(v384) + (signed int)v384 - (DWORD2(v384) + DWORD1(v384))),\n              _mm_cvtsi32_si128((signed int)v384 - HIDWORD(v384) - (DWORD1(v384) - DWORD2(v384))))),\n          1u));\n      _mm_store_si128(\n        (__m128i *)&v385,\n        _mm_srai_epi32(\n          _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v139 + DWORD1(v385) + v146 + (signed int)v385),\n              _mm_cvtsi32_si128(DWORD1(v385) - v139 + (signed int)v385 - v146)),\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v146 + (signed int)v385 - (v139 + DWORD1(v385))),\n              _mm_cvtsi32_si128((signed int)v385 - v146 - (DWORD1(v385) - v139)))),\n          1u));\n      _mm_store_si128(\n        (__m128i *)&v386,\n        _mm_srai_epi32(\n          _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v144 + (signed int)v386 + DWORD2(v386) + DWORD1(v386)),\n              _mm_cvtsi32_si128(DWORD1(v386) - DWORD2(v386) + (signed int)v386 - v144)),\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v144 + (signed int)v386 - (DWORD2(v386) + DWORD1(v386))),\n              _mm_cvtsi32_si128((signed int)v386 - v144 - (DWORD1(v386) - DWORD2(v386))))),\n          1u));\n      v148 = v387.m128i_i32[0] - v147;\n      v149 = v387.m128i_i32[1] - v387.m128i_i32[2];\n      *(_QWORD *)&v373 = __PAIR__(v387.m128i_i32[2] + v387.m128i_i32[1], v147 + v387.m128i_i32[0]);\n      _mm_store_si128(\n        &v387,\n        _mm_srai_epi32(\n          _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v387.m128i_i32[2] + v387.m128i_i32[1] + v147 + v387.m128i_i32[0]),\n              _mm_cvtsi32_si128(v387.m128i_i32[1] - v387.m128i_i32[2] + v148)),\n            _mm_unpacklo_epi32(\n              _mm_cvtsi32_si128(v147 + v387.m128i_i32[0] - (v387.m128i_i32[2] + v387.m128i_i32[1])),\n              _mm_cvtsi32_si128(v148 - (v387.m128i_i32[1] - v387.m128i_i32[2])))),\n          1u));\n      *((_QWORD *)&v373 + 1) = __PAIR__(v148, v149);\n    }\n    LODWORD(v389) = v85;\n    v381 = 4294901760LL << 16 * (unsigned __int8)v390;\n    v379 = v398 + v399 + 464;\n    v150 = (signed __int64)v85 << 6;\n    v151 = (signed __int64)(signed int)v394 << 6;\n    v152 = 832 * v390 + v151 + 5171696;\n    LODWORD(v392) = v394 + 16;\n    v382 = (signed __int64)v85 << 6;\n    v397 = 384 * v390;\n    v153 = (char *)(384 * v390 + v150 + 5201744);\n    v154 = 832 * v390 + v151 + 5170032;\n    if ( v370 )\n      v153 = (char *)(384 * v390 + v150 + 5202512);\n    v391 = v153;\n    if ( v370 )\n      v154 = v152;\n    v383 = v154;\n    v155 = -1;\n    v371 = 0;\n    v156 = -32LL;\n    LODWORD(v157) = 0;\n    do\n    {\n      v158 = (unsigned __int8)byte_489CB1[v156];\n      v159 = &v384 + (unsigned __int8)byte_489CB0[v156];\n      v160 = *((_DWORD *)v159 + v158);\n      v161 = -*((_DWORD *)v159 + v158);\n      if ( v161 < 1 )\n        v161 = *((_DWORD *)v159 + v158);\n      if ( !(_BYTE)v87 )\n        v161 = (*(_DWORD *)v391 * v161 + 2 * *(_DWORD *)v383) >> v392;\n      ++v155;\n      if ( v161 )\n      {\n        *(_QWORD *)v379 |= v381;\n        v162 = v378;\n        v371 = 1;\n        if ( v378 <= 0 )\n          v162 = 1;\n        v378 = v162;\n        v163 = sub_452340(v161, v160);\n        LOBYTE(v87) = v372;\n        v157 = (signed int)v157;\n        *(_DWORD *)(v380 + 4 * v157) = v163;\n        *(_DWORD *)&v393[4 * v157] = v155;\n        LODWORD(v157) = v157 + 1;\n        v155 = -1;\n      }\n      if ( !(_BYTE)v87 )\n      {\n        v164 = (int *)((char *)v159 + 4 * v158);\n        v165 = sub_452340(v161, *v164);\n        LOBYTE(v87) = v372;\n        *v164 = v165;\n      }\n      v156 += 2LL;\n    }\n    while ( v156 );\n    *(_DWORD *)(v380 + 4LL * (signed int)v157) = 0;\n    if ( (_BYTE)v87 )\n    {\n      v89 = v388;\n    }\n    else\n    {\n      v178 = v384;\n      v179 = v386 + v384;\n      v180 = v385 - v387.m128i_i32[0];\n      LODWORD(v384) = v385 + v387.m128i_i32[0] + v386 + v384;\n      v387.m128i_i32[0] = v179 - (v385 + v387.m128i_i32[0]);\n      LODWORD(v385) = v180 + v178 - v386;\n      LODWORD(v386) = v178 - v386 - v180;\n      v181 = DWORD1(v386) + DWORD1(v384);\n      v182 = DWORD1(v385) - v387.m128i_i32[1];\n      DWORD1(v384) += DWORD1(v385) + v387.m128i_i32[1] + DWORD1(v386);\n      v387.m128i_i32[1] = v181 - (DWORD1(v385) + v387.m128i_i32[1]);\n      DWORD1(v385) = HIDWORD(v178) - DWORD1(v386) + v182;\n      DWORD1(v386) = HIDWORD(v178) - DWORD1(v386) - v182;\n      v183 = DWORD2(v384);\n      v184 = DWORD2(v386) + DWORD2(v384);\n      v185 = DWORD2(v385) - v387.m128i_i32[2];\n      DWORD2(v384) += DWORD2(v385) + v387.m128i_i32[2] + DWORD2(v386);\n      v387.m128i_i32[2] = v184 - (DWORD2(v385) + v387.m128i_i32[2]);\n      v186 = v183 - DWORD2(v386);\n      DWORD2(v385) = v186 + v185;\n      DWORD2(v386) = v186 - v185;\n      v187 = HIDWORD(v386);\n      v188 = v387.m128i_i32[3];\n      v189 = HIDWORD(v386) + HIDWORD(v384);\n      *(_QWORD *)&v373 = __PAIR__(HIDWORD(v385), HIDWORD(v384));\n      v190 = v387.m128i_i32[3] + HIDWORD(v385);\n      HIDWORD(v384) += v387.m128i_i32[3] + HIDWORD(v385) + HIDWORD(v386);\n      v374 = v189;\n      v387.m128i_i32[3] = v189 - (v387.m128i_i32[3] + HIDWORD(v385));\n      v191 = HIDWORD(v385) - v188;\n      HIDWORD(v385) = HIDWORD(v385) - v188 + v373 - HIDWORD(v386);\n      v375 = v373 - HIDWORD(v386);\n      HIDWORD(v386) = v373 - HIDWORD(v386) - v191;\n      *((_QWORD *)&v373 + 1) = __PAIR__(v188, v187);\n      v376 = v191;\n      v377 = v190;\n      v192 = 1 << (3 - v394);\n      v193 = (_DWORD *)(v397 + v382 + 5200976);\n      v194 = 4 - v394;\n      v195 = off_49F6D0;\n      v196 = (_DWORD *)(v397 + v382 + 5200208);\n      v197 = v394 - 4;\n      v198 = 0LL;\n      v89 = v388;\n      v199 = v413;\n      do\n      {\n        _mm_store_si128((__m128i *)&v373, _mm_load_si128((const __m128i *)&v384 + v198));\n        v200 = DWORD2(v373) + v373;\n        v374 = DWORD2(v373) + v373;\n        v375 = v373 - DWORD2(v373);\n        v376 = DWORD1(v373) - HIDWORD(v373);\n        v377 = DWORD1(v373) + HIDWORD(v373);\n        v201 = 0LL;\n        v202 = 3290LL;\n        while ( 1 )\n        {\n          v203 = *(int *)((char *)&v369 + v202) + v200;\n          if ( v199 > 23 )\n          {\n            if ( v370 )\n            {\n              v195[v201 + 3278] = ((*v193 * v203 << v197) + 2) >> 2;\n              v205 = *v193 * (*(int *)((char *)&v374 + v201) - *(int *)((char *)&v369 + v202));\n            }\n            else\n            {\n              v195[v201 + 3278] = ((*v196 * v203 << v197) + 2) >> 2;\n              v205 = *v196 * (*(int *)((char *)&v374 + v201) - *(int *)((char *)&v369 + v202));\n            }\n            v206 = v205 << v197;\n          }\n          else\n          {\n            if ( v370 )\n            {\n              v195[v201 + 3278] = (((v192 + *v193 * v203) >> v194) + 2) >> 2;\n              v204 = *v193 * (*(int *)((char *)&v374 + v201) - *(int *)((char *)&v369 + v202));\n            }\n            else\n            {\n              v195[v201 + 3278] = (((v192 + *v196 * v203) >> v194) + 2) >> 2;\n              v204 = *v196 * (*(int *)((char *)&v374 + v201) - *(int *)((char *)&v369 + v202));\n            }\n            v206 = (v192 + v204) >> v194;\n          }\n          v195[v202] = (v206 + 2) >> 2;\n          if ( v201 == 4 )\n            break;\n          v200 = *(int *)((char *)&v375 + v201);\n          v202 -= 4LL;\n          v201 += 4LL;\n        }\n        v195 += 64;\n        v207 = v198++ < 3;\n      }\n      while ( v207 );\n      LOBYTE(v87) = v372;\n    }\n    v85 = (signed int)v389;\n    goto LABEL_129;\n  }\n  v87 = v372;\n  if ( (_DWORD)v388 != 2 )\n  {\n    v88 = 0;\n    v89 = v388;\n    if ( (_DWORD)v388 == 1 )\n    {\n      v90 = v5[3342];\n      v91 = v5[3278];\n      v92 = v5[3282];\n      v93 = v90 + v91;\n      v94 = v5[3346];\n      v95 = v94 + v90 + v91 + v92;\n      v404 = v94 + v90 + v91 + v92;\n      v96 = v91 - v90;\n      v405 = v96 + v92 - v94;\n      v406 = v93 - v92 - v94;\n      v407 = v94 + v96 - v92;\n      LODWORD(v389) = v85;\n      v97 = (signed __int64)v85 << 6;\n      v98 = 384 * v390 + v97 + 5202512;\n      v99 = (signed __int64)(signed int)v394 << 6;\n      LODWORD(v381) = v394 + 16;\n      v383 = (signed __int64)v85 << 6;\n      v382 = 384 * v390;\n      v100 = 384 * v390 + v97 + 5201744;\n      v101 = (_DWORD *)(832 * v390 + v99 + 5170032);\n      v392 = 983040 << 4 * v390;\n      v391 = (char *)(v398 + v399 + 464);\n      if ( v370 )\n        v100 = v98;\n      v379 = v100;\n      if ( v370 )\n        v101 = (_DWORD *)(832 * v390 + v99 + 5171696);\n      v102 = -1;\n      v371 = 0;\n      v103 = -3LL;\n      LODWORD(v104) = 0;\n      while ( 1 )\n      {\n        ++v102;\n        v105 = -v95;\n        if ( -v95 < 1 )\n          v105 = v95;\n        if ( (v106 = (*(_DWORD *)v379 * v105 + 2 * *v101) >> v381, !*((_DWORD *)dest + 589))\n          && v106 >= 2064\n          && (v107 = 2063, *((_DWORD *)off_49F6D0 + 10) < 4)\n          || (v107 = v106) != 0 )\n        {\n          *(_QWORD *)v391 |= v392;\n          v109 = v378;\n          v371 = 1;\n          if ( v378 <= 0 )\n            v109 = 1;\n          v378 = v109;\n          v104 = (signed int)v104;\n          *(_DWORD *)(v380 + 4 * v104) = sub_452340(v107, v95);\n          *(_DWORD *)&v393[4 * v104] = v102;\n          LODWORD(v104) = v104 + 1;\n          v108 = sub_452340(v107, v95);\n          LOBYTE(v87) = v372;\n          v102 = -1;\n        }\n        else\n        {\n          v108 = 0;\n        }\n        *(&v407 + v103) = v108;\n        if ( !v103 )\n          break;\n        v95 = *(&v408 + v103++);\n      }\n      *(_DWORD *)(v380 + 4LL * (signed int)v104) = 0;\n      v110 = v407 + v405 + v404 + v406;\n      LODWORD(v373) = v407 + v405 + v404 + v406;\n      v111 = v404 - v405 + v406 - v407;\n      DWORD1(v373) = v404 - v405 + v406 - v407;\n      v112 = v405 + v404 - v406 - v407;\n      DWORD2(v373) = v405 + v404 - v406 - v407;\n      v113 = v407 + v404 - v405 - v406;\n      HIDWORD(v373) = v407 + v404 - v405 - v406;\n      v114 = (int *)(v382 + v383 + 5200976);\n      v115 = (int *)(v383 + v382 + 5200208);\n      if ( (signed int)v413 > 29 )\n      {\n        v175 = v394 - 5;\n        if ( v370 )\n        {\n          v176 = *v114;\n          v118 = *v114 * v110 << v175;\n          v404 = v118;\n          v119 = v176 * v111 << v175;\n          v177 = *v114;\n        }\n        else\n        {\n          v250 = *v115;\n          v118 = *v115 * v110 << v175;\n          v404 = v118;\n          v119 = v250 * v111 << v175;\n          v177 = *v115;\n        }\n        v248 = v177 * v112 << v175;\n        v405 = v119;\n        v406 = v248;\n        v249 = v177 * v113 << v175;\n      }\n      else\n      {\n        v116 = 5 - v394;\n        if ( v370 )\n        {\n          v117 = *v114;\n          v118 = *v114 * v110 >> v116;\n          v404 = v118;\n          v119 = v117 * v111 >> v116;\n          v120 = *v114;\n        }\n        else\n        {\n          v247 = *v115;\n          v118 = *v115 * v110 >> v116;\n          v404 = v118;\n          v119 = v247 * v111 >> v116;\n          v120 = *v115;\n        }\n        v248 = v120 * v112 >> v116;\n        v405 = v119;\n        v406 = v248;\n        v249 = v120 * v113 >> v116;\n      }\n      v89 = v388;\n      v85 = (signed int)v389;\n      v88 = v371;\n      v407 = v249;\n      v251 = off_49F6D0;\n      *((_DWORD *)off_49F6D0 + 3278) = v118;\n      v251[3342] = v119;\n      v251[3282] = v248;\n      v251[3346] = v249;\n    }\n    goto LABEL_135;\n  }\n  LODWORD(v389) = v15 - v19;\n  if ( v20 <= 0 )\n    goto LABEL_102;\n  v166 = v5[18177];\n  v167 = v20;\n  v168 = (unsigned __int64)((signed int)v5[18177] - 1LL) >> 2;\n  v169 = (signed __int64)(v5 + 3342);\n  v170 = &v408;\n  v171 = 0LL;\n  do\n  {\n    if ( v166 <= 0 )\n      goto LABEL_82;\n    if ( v168 )\n    {\n      v173 = (((_BYTE)v168 + 1) & 1) - 1LL - v168;\n      v174 = (int *)v169;\n      v172 = 0LL;\n      do\n      {\n        v170[v172 - 4] = *(v174 - 64);\n        v170[v172] = *v174;\n        v172 += 8LL;\n        v174 += 128;\n        v173 += 2LL;\n      }\n      while ( v173 );\n      if ( ((_BYTE)v168 + 1) & 1 )\n      {\nLABEL_81:\n        *(&v404 + v172 + (v171 >> 2)) = v5[16 * v172 + 3278 + v171];\n        goto LABEL_82;\n      }\n    }\n    else\n    {\n      v172 = 0LL;\n      if ( ((_BYTE)v168 + 1) & 1 )\n        goto LABEL_81;\n    }\nLABEL_82:\n    v171 += 4LL;\n    v169 += 16LL;\n    ++v170;\n  }\n  while ( (signed __int64)v171 < v167 );\n  v20 = v404;\n  v86 = v405;\n  LODWORD(a4) = v408;\n  v87 = v409;\n  v85 = v406;\n  v16 = v410;\n  LODWORD(v5) = v407;\n  LODWORD(a5) = v411;\nLABEL_102:\n  v381 = v16;\n  v208 = v16 + v85;\n  v209 = a5 + (_DWORD)v5 + a4 + v20;\n  v210 = v87 + v86 + v16 + v85;\n  LODWORD(v384) = v210 + v209;\n  v211 = a4 + v20 - (a5 + (_DWORD)v5);\n  DWORD2(v384) = v209 - v210;\n  v212 = v87 + v86 - v208;\n  DWORD1(v384) = v212 + v211;\n  v213 = v20 - a4;\n  HIDWORD(v384) = v211 - v212;\n  v214 = (_DWORD)v5 - a5;\n  LODWORD(v373) = v214 + v213;\n  v215 = v86 - v87;\n  HIDWORD(v373) = v213 - v214;\n  v216 = v85 - v381;\n  v217 = v216 + v215;\n  DWORD1(v373) = v217;\n  v218 = v215 - v216;\n  DWORD2(v373) = v218;\n  LODWORD(v385) = v217 + v214 + v213;\n  DWORD2(v385) = v214 + v213 - v217;\n  DWORD1(v385) = v218 + v213 - v214;\n  HIDWORD(v385) = v213 - v214 - v218;\n  v219 = 384 * v390 + (v395 << 6) + 5202512;\n  v220 = (signed __int64)v18 << 6;\n  v395 <<= 6;\n  v414 = (int *)(384 * v390);\n  v221 = (char *)(v395 + 384 * v390 + 5201744);\n  v222 = v220 + 832 * v390 + 5170032;\n  v382 = 16711680 << 8 * v390;\n  v397 = v398 + v399 + 464;\n  if ( v370 )\n    v221 = (char *)v219;\n  v391 = v221;\n  if ( v370 )\n    v222 = 832 * v390 + v220 + 5171696;\n  v383 = v222;\n  v223 = -1;\n  v371 = 0;\n  v224 = -16LL;\n  v381 = 0LL;\n  do\n  {\n    ++v223;\n    v225 = (unsigned __int8)byte_48A001[v224];\n    v226 = 16LL * (unsigned __int8)byte_48A000[v224];\n    v227 = *(_DWORD *)((char *)&v384 + 4 * v225 + v226);\n    v228 = -*(_DWORD *)((char *)&v384 + 4 * v225 + v226);\n    if ( v228 < 1 )\n      v228 = *(_DWORD *)((char *)&v384 + 4 * v225 + v226);\n    v229 = (*(_DWORD *)v391 * v228 + 2 * *(_DWORD *)v383) >> v392;\n    if ( v229 )\n    {\n      v379 = (__int64)&v384 + 4 * v225 + v226;\n      *(_QWORD *)v397 |= v382;\n      v230 = v378;\n      v371 = 1;\n      if ( v378 <= 0 )\n        v230 = 1;\n      v378 = v230;\n      v231 = sub_452340(v229, v227);\n      v232 = (signed int)v381;\n      *(_DWORD *)(v380 + 4 * v232) = v231;\n      *(_DWORD *)&v393[4 * v232] = v223;\n      v381 = (unsigned int)(v232 + 1);\n      v227 = *(_DWORD *)v379;\n      v223 = -1;\n    }\n    *(int *)((char *)&v404 + 4 * v225 + v226) = sub_452340(v229, v227);\n    v224 += 2LL;\n  }\n  while ( v224 );\n  *(_DWORD *)(v380 + 4LL * (signed int)v381) = 0;\n  LODWORD(v384) = v408 + v404;\n  DWORD1(v384) = v409 + v405;\n  DWORD2(v384) = v410 + v406;\n  HIDWORD(v384) = v411 + v407;\n  LODWORD(v385) = v404 - v408;\n  DWORD1(v385) = v405 - v409;\n  DWORD2(v385) = v406 - v410;\n  HIDWORD(v385) = v407 - v411;\n  v233 = 1 << (3 - v18);\n  v234 = (int *)((char *)v414 + v395 + 5200976);\n  v235 = 4 - v18;\n  v236 = off_49F6D0;\n  v237 = (int *)((char *)v414 + v395 + 5200208);\n  v238 = v18 - 4;\n  v239 = 0LL;\n  v85 = (signed int)v389;\n  do\n  {\n    _mm_store_si128((__m128i *)&v373, _mm_load_si128((const __m128i *)&v384 + v239));\n    v240 = DWORD2(v373) + v373;\n    v374 = DWORD2(v373) + v373;\n    v375 = v373 - DWORD2(v373);\n    v376 = DWORD1(v373) - HIDWORD(v373);\n    v377 = DWORD1(v373) + HIDWORD(v373);\n    v241 = 0LL;\n    v242 = 3290LL;\n    while ( 1 )\n    {\n      v243 = *(int *)((char *)&v369 + v242) + v240;\n      if ( v18 > 3 )\n      {\n        if ( v370 )\n        {\n          v236[v241 + 3278] = ((*v234 * v243 << v238) + 2) >> 2;\n          v245 = *v234 * (*(int *)((char *)&v374 + v241) - *(int *)((char *)&v369 + v242));\n        }\n        else\n        {\n          v236[v241 + 3278] = ((*v237 * v243 << v238) + 2) >> 2;\n          v245 = *v237 * (*(int *)((char *)&v374 + v241) - *(int *)((char *)&v369 + v242));\n        }\n        v246 = v245 << v238;\n      }\n      else\n      {\n        if ( v370 )\n        {\n          v236[v241 + 3278] = (((v233 + *v234 * v243) >> v235) + 2) >> 2;\n          v244 = *v234 * (*(int *)((char *)&v374 + v241) - *(int *)((char *)&v369 + v242));\n        }\n        else\n        {\n          v236[v241 + 3278] = (((v233 + *v237 * v243) >> v235) + 2) >> 2;\n          v244 = *v237 * (*(int *)((char *)&v374 + v241) - *(int *)((char *)&v369 + v242));\n        }\n        v246 = (v233 + v244) >> v235;\n      }\n      v236[v242] = (v246 + 2) >> 2;\n      if ( v241 == 4 )\n        break;\n      v240 = *(int *)((char *)&v375 + v241);\n      v242 -= 4LL;\n      v241 += 4LL;\n    }\n    ++v239;\n    v236 += 64;\n  }\n  while ( v239 != 2 );\n  LOBYTE(v87) = v372;\n  v89 = v388;\nLABEL_129:\n  v88 = v371;\nLABEL_135:\n  v252 = v412 * v396;\n  v253 = (char *)off_49F6D0;\n  v254 = *((_DWORD *)off_49F6D0 + 18173);\n  v396 = (unsigned int)(v412 * v396);\n  if ( v254 >= 2 )\n  {\n    v371 = v88;\n    LODWORD(v401) = v401 + v400 + 15;\n    v417 = (unsigned int)(v252 + 4);\n    v391 = (char *)(v399 + v398 + 532);\n    v383 = v85;\n    v255 = (signed int)v394;\n    v403 = 1 << (3 - v394);\n    v402 = 4 - v394;\n    v394 = (unsigned int)(v394 - 4);\n    v416 = v252;\n    v256 = xmmword_4F5F50;\n    if ( v370 )\n      v256 = xmmword_4F6250;\n    v389 = v256;\n    v257 = dword_4EE370;\n    if ( v370 )\n      v257 = dword_4EE9F0;\n    v414 = v257;\n    v258 = 0LL;\n    v400 = v255 << 6;\n    v259 = 0;\n    v260 = 0;\n    while ( 1 )\n    {\n      v419 = (signed int)v417 + (signed int)v258;\n      v418 = v258 + v416;\n      v261 = 0LL;\n      v415 = v258;\n      while ( 2 )\n      {\n        v262 = 16 * v89 + 4 * v258;\n        v379 = (unsigned __int8)byte_48A000[v261 + v262];\n        v392 = (unsigned __int8)byte_48A040[v261 + v262];\n        v263 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)v253 + 1767) + 8 * v419) + 8 * v261);\n        v382 = *v263;\n        v397 = v263[1];\n        v420 = v261;\n        v395 = v261 + 4 * v418 + 4760544;\n        v393 = 0LL;\n        v264 = -1;\n        v265 = -14LL;\n        if ( *((_DWORD *)v253 + 18111) )\n          goto LABEL_157;\nLABEL_158:\n        if ( !*((_DWORD *)v253 + 18100) || !*(_DWORD *)v391 )\n        {\n          v269 = byte_489C90;\n          goto LABEL_161;\n        }\nLABEL_157:\n        while ( 1 )\n        {\n          v269 = byte_489CB0;\nLABEL_161:\n          v270 = (unsigned __int8)v269[2 * v265 + 30];\n          v271 = (unsigned __int8)v269[2 * v265 + 31];\n          v272 = (v379 + v270) << 6;\n          v380 = v271 + v392;\n          v273 = *(_DWORD *)&v253[4 * (v271 + v392) + 13112 + v272];\n          v274 = -v273;\n          if ( -v273 < 1 )\n            v274 = *(_DWORD *)&v253[4 * (v271 + v392) + 13112 + v272];\n          if ( !(_BYTE)v87 )\n            v274 = (*(int *)((char *)&v414[208 * v390 + 4 * v270 + v271] + v400)\n                  + *((_DWORD *)&v389[24 * v390 + 4 * v383 + v270] + v271) * v274) >> v401;\n          ++v264;\n          if ( !v274 )\n            break;\n          v381 = v265;\n          *(_QWORD *)(v391 - 68) |= 1LL << *(_BYTE *)v395;\n          v275 = 999999;\n          if ( !((unsigned __int8)v87 | (v274 > 1)) )\n            v275 = (unsigned __int8)byte_489CD0[16 * *((signed int *)dest + 617) + v264];\n          v260 += v275;\n          v276 = sub_452340(v274, v273);\n          v277 = (signed int)v393;\n          *(_DWORD *)(v382 + 4 * v277) = v276;\n          *(_DWORD *)(v397 + 4 * v277) = v264;\n          v393 = (char *)(unsigned int)(v277 + 1);\n          v278 = sub_452340(v274, *(_DWORD *)((char *)off_49F6D0 + 4 * v380 + v272 + 13112));\n          LOBYTE(v87) = v372;\n          if ( !(_BYTE)v372 )\n          {\n            v265 = v381;\n            if ( (signed int)v413 > 23 )\n            {\n              if ( v370 )\n                v267 = *((_DWORD *)&xmmword_4F5C50[24 * v390 + 4 * v383 + v270] + v271) * v278;\n              else\n                v267 = *((_DWORD *)&xmmword_4F5950[24 * v390 + 4 * v383 + v270] + v271) * v278;\n              v268 = v267 << v394;\n            }\n            else\n            {\n              if ( v370 )\n                v266 = *((_DWORD *)&xmmword_4F5C50[24 * v390 + 4 * v383 + v270] + v271) * v278;\n              else\n                v266 = *((_DWORD *)&xmmword_4F5950[24 * v390 + 4 * v383 + v270] + v271) * v278;\n              v268 = (v403 + v266) >> v402;\n            }\n            v264 = -1;\n            v259 = 2;\nLABEL_155:\n            *(_DWORD *)((char *)off_49F6D0 + 4 * v380 + v272 + 13112) = v268;\n            if ( !v265 )\n              goto LABEL_173;\n            goto LABEL_156;\n          }\n          v264 = -1;\n          v259 = 2;\n          v265 = v381;\n          if ( !v381 )\n            goto LABEL_173;\nLABEL_156:\n          v253 = (char *)off_49F6D0;\n          ++v265;\n          if ( !*((_DWORD *)off_49F6D0 + 18111) )\n            goto LABEL_158;\n        }\n        v268 = 0;\n        if ( !(_BYTE)v87 )\n          goto LABEL_155;\n        if ( v265 )\n          goto LABEL_156;\nLABEL_173:\n        *(_DWORD *)(v382 + 4LL * (signed int)v393) = 0;\n        v261 = v420 + 1;\n        if ( v420 != 3 )\n        {\n          v253 = (char *)off_49F6D0;\n          v89 = v388;\n          v258 = v415;\n          continue;\n        }\n        break;\n      }\n      v258 = v415 + 1;\n      v253 = (char *)off_49F6D0;\n      v254 = *((_DWORD *)off_49F6D0 + 18173);\n      v89 = v388;\n      if ( v415 + 1 >= v254 / 2 )\n      {\n        v279 = (char *)off_49F6D0 + 72692;\n        v88 = v371;\n        goto LABEL_177;\n      }\n    }\n  }\n  v279 = (char *)off_49F6D0 + 72692;\n  v260 = 0;\n  v259 = 0;\nLABEL_177:\n  if ( (unsigned __int8)v87 | (v260 > 3) )\n  {\n    v280 = v378;\n    if ( v259 == 2 )\n      v280 = 2;\n    v378 = v280;\n  }\n  else if ( v254 >= 2 )\n  {\n    v281 = v88;\n    v396 = (unsigned int)(v396 + 4);\n    v412 = (unsigned int)((_DWORD)v412 << (v89 + 1));\n    v282 = v399 + v398 + 464;\n    v283 = *((_QWORD *)v253 + 1767);\n    v284 = 0LL;\n    v285 = 16 * v89;\n    do\n    {\n      v286 = *(_QWORD *)(v283 + 8LL * ((signed int)v396 + (signed int)v284));\n      v287 = 0LL;\n      do\n      {\n        v288 = v285 + 4 * v284;\n        v289 = (unsigned __int8)byte_48A000[v287 + v288];\n        v290 = (unsigned __int8)byte_48A040[v287 + v288];\n        v291 = **(_DWORD ***)(v286 + 8 * v287);\n        if ( !v281 )\n          *(_QWORD *)v282 &= ~(qword_48A3C0[v388] << v412);\n        *v291 = 0;\n        v292 = -15LL;\n        do\n        {\n          if ( *((_DWORD *)v253 + 18111) || *((_DWORD *)v253 + 18100) && *(_DWORD *)(v282 + 68) )\n            v293 = byte_489CB0;\n          else\n            v293 = byte_489C90;\n          *(_DWORD *)&v253[64 * (v289 + (unsigned __int8)v293[2 * v292 + 32])\n                         + 13112\n                         + 4 * (v290 + (unsigned __int8)v293[2 * v292 + 33])] = 0;\n          v291[v292++ + 16] = 0;\n        }\n        while ( v292 );\n        ++v287;\n      }\n      while ( v287 != 4 );\n      ++v284;\n    }\n    while ( v284 < *v279 / 2 );\n    LOBYTE(v87) = v372;\n  }\n  v294 = *((_DWORD *)v253 + 18178);\n  v295 = v253 + 72724;\n  if ( ((unsigned __int8)v87 | (v294 <= 0)) != 1 )\n  {\n    LODWORD(v296) = *((_DWORD *)v253 + 18177);\n    v297 = (signed __int64)(v253 + 13112);\n    v298 = (signed __int64)(v253 + 12606);\n    v382 = 0LL;\n    v400 = (unsigned __int64)(v253 + 13112);\n    v393 = v253 + 72724;\n    do\n    {\n      if ( (signed int)v296 > 0 )\n      {\n        v299 = v382 | 3;\n        v300 = v382 | 2;\n        v397 = v382 | 1;\n        v395 = v298;\n        v380 = v298;\n        v401 = v297;\n        v301 = v400;\n        v302 = 0LL;\n        do\n        {\n          v379 = v300;\n          v392 = v302;\n          v303 = v302 << 6;\n          v304 = (signed __int64)&v253[v303 + 13112];\n          v305 = v382;\n          v306 = *(_DWORD *)(v304 + 4 * v382);\n          v307 = &v253[(v303 | 0x40) + 13112];\n          v391 = v307;\n          LODWORD(v307) = *(_DWORD *)&v307[4 * v382];\n          v308 = (signed __int64)&v253[(v303 | 0x80) + 13112];\n          v309 = *(_DWORD *)(v308 + 4 * v382);\n          v310 = (signed __int64)&v253[(v303 | 0xC0) + 13112];\n          v311 = *(_DWORD *)(v310 + 4 * v382);\n          v312 = ((signed int)v307 >> 1) - v311;\n          v313 = (_DWORD)v307 + (v311 >> 1);\n          *(_DWORD *)(v304 + 4 * v382) = v306 + v309 + v313;\n          v314 = v306 + v309 - v313;\n          v315 = v310;\n          *(_DWORD *)(v310 + 4 * v305) = v314;\n          v316 = v306 - v309;\n          v317 = v391;\n          *(_DWORD *)&v391[4 * v305] = v312 + v316;\n          *(_DWORD *)(v308 + 4 * v305) = v316 - v312;\n          v318 = v397;\n          v319 = v304;\n          v320 = *(_DWORD *)(v304 + 4 * v397);\n          LODWORD(v307) = *(_DWORD *)&v317[4 * v397];\n          v321 = v317;\n          v322 = *(_DWORD *)(v308 + 4 * v397);\n          LODWORD(v317) = *(_DWORD *)(v315 + 4 * v397);\n          v323 = v315;\n          v324 = ((signed int)v307 >> 1) - (_DWORD)v317;\n          LODWORD(v317) = (_DWORD)v307 + ((signed int)v317 >> 1);\n          *(_DWORD *)(v319 + 4 * v397) = (_DWORD)v317 + v320 + v322;\n          *(_DWORD *)(v315 + 4 * v318) = v320 + v322 - (_DWORD)v317;\n          v325 = v320 - v322;\n          v326 = v321;\n          *(_DWORD *)&v321[4 * v318] = v324 + v325;\n          *(_DWORD *)(v308 + 4 * v318) = v325 - v324;\n          v327 = *(_DWORD *)(v319 + 4 * v379);\n          LODWORD(v307) = *(_DWORD *)&v321[4 * v379];\n          v328 = *(_DWORD *)(v308 + 4 * v379);\n          LODWORD(v317) = *(_DWORD *)(v323 + 4 * v379);\n          v329 = ((signed int)v307 >> 1) - (_DWORD)v317;\n          LODWORD(v317) = (_DWORD)v307 + ((signed int)v317 >> 1);\n          *(_DWORD *)(v319 + 4 * v379) = (_DWORD)v317 + v327 + v328;\n          *(_DWORD *)(v323 + 4 * v379) = v327 + v328 - (_DWORD)v317;\n          v330 = v327 - v328;\n          *(_DWORD *)&v321[4 * v379] = v329 + v330;\n          v383 = v308;\n          *(_DWORD *)(v308 + 4 * v379) = v330 - v329;\n          LODWORD(v321) = *(_DWORD *)(v319 + 4 * v299);\n          v331 = *(_DWORD *)&v326[4 * v299];\n          v332 = v326;\n          v333 = v299;\n          v334 = *(_DWORD *)(v308 + 4 * v299);\n          LODWORD(v308) = *(_DWORD *)(v323 + 4 * v333);\n          LODWORD(v326) = v334 + (_DWORD)v321;\n          LODWORD(v307) = v331 + (*(_DWORD *)(v323 + 4 * v333) >> 1);\n          *(_DWORD *)(v319 + 4 * v333) = (_DWORD)v307 + v334 + (_DWORD)v321;\n          LODWORD(v319) = (_DWORD)v321 - v334;\n          *(_DWORD *)(v323 + 4 * v333) = v334 + (_DWORD)v321 - (_DWORD)v307;\n          LODWORD(v318) = (v331 >> 1) - v308;\n          *(_DWORD *)&v332[4 * v333] = v318 + (_DWORD)v321 - v334;\n          *(_DWORD *)(v383 + 4 * v333) = (_DWORD)v321 - v334 - v318;\n          *(_QWORD *)&v373 = __PAIR__(v331, (unsigned int)v321);\n          v300 = v379;\n          *((_QWORD *)&v373 + 1) = __PAIR__(v308, v334);\n          v299 = v333;\n          v295 = v393;\n          v374 = (signed int)v326;\n          v375 = v319;\n          v376 = v318;\n          v377 = (signed int)v307;\n          v335 = 0LL;\n          v381 = v301;\n          do\n          {\n            _mm_store_si128((__m128i *)&v373, _mm_loadu_si128((const __m128i *)(v297 + 2 * v335)));\n            v336 = DWORD2(v373) + v373;\n            v374 = DWORD2(v373) + v373;\n            v337 = v373 - DWORD2(v373);\n            v375 = v373 - DWORD2(v373);\n            v338 = (SDWORD1(v373) >> 1) - HIDWORD(v373);\n            v376 = (SDWORD1(v373) >> 1) - HIDWORD(v373);\n            v339 = DWORD1(v373) + (SHIDWORD(v373) >> 1);\n            v377 = DWORD1(v373) + (SHIDWORD(v373) >> 1);\n            if ( *(_DWORD *)v295 )\n            {\n              *(_DWORD *)(v297 + 2 * v335) = (v339 + v336 + 32) >> 6;\n              LODWORD(v340) = (v336 + 32 - v339) >> 6;\n            }\n            else\n            {\n              v341 = v300;\n              v342 = v299;\n              v343 = *((signed int *)v253 + 18172);\n              v344 = v339 + v336;\n              v345 = (unsigned __int64)*(unsigned __int16 *)(v380 + v335 - 6) << 6;\n              v346 = 0LL;\n              v347 = 0LL;\n              if ( (signed __int64)(v344 + v345) >= -32 )\n                v347 = (signed __int64)(v344 + v345 + 32) >> 6;\n              if ( v347 <= v343 )\n                LODWORD(v343) = v347;\n              *(_DWORD *)(v297 + 2 * v335) = v343;\n              v340 = *((signed int *)v253 + 18172);\n              v348 = v336 - v339;\n              v349 = (unsigned __int64)*(unsigned __int16 *)(v380 + v335) << 6;\n              v299 = v342;\n              v300 = v341;\n              if ( (signed __int64)(v349 + v348) >= -32 )\n                v346 = (signed __int64)(v349 + v348 + 32) >> 6;\n              v295 = v393;\n              v301 = v381;\n              if ( v346 <= v340 )\n                LODWORD(v340) = v346;\n            }\n            *(_DWORD *)(v301 + 4 * v299 + 2 * v335) = v340;\n            if ( *(_DWORD *)v295 )\n            {\n              *(_DWORD *)(v297 + 2 * v335 + 4) = (v338 + v337 + 32) >> 6;\n              LODWORD(v350) = (v337 + 32 - v338) >> 6;\n            }\n            else\n            {\n              v351 = *((signed int *)v253 + 18172);\n              v352 = v338 + v337;\n              v353 = (unsigned __int64)*(unsigned __int16 *)(v380 + v335 - 4) << 6;\n              v354 = 0LL;\n              v355 = 0LL;\n              if ( (signed __int64)(v352 + v353) >= -32 )\n                v355 = (signed __int64)(v352 + v353 + 32) >> 6;\n              if ( v355 <= v351 )\n                LODWORD(v351) = v355;\n              *(_DWORD *)(v297 + 2 * v335 + 4) = v351;\n              v350 = *((signed int *)v253 + 18172);\n              v356 = v337 - v338;\n              v357 = (unsigned __int64)*(unsigned __int16 *)(v380 + v335 - 2) << 6;\n              if ( (signed __int64)(v357 + v356) >= -32 )\n                v354 = (signed __int64)(v357 + v356 + 32) >> 6;\n              if ( v354 <= v350 )\n                LODWORD(v350) = v354;\n            }\n            *(_DWORD *)(v301 + 4 * v300 + 2 * v335) = v350;\n            v335 += 32LL;\n          }\n          while ( v335 != 128 );\n          v302 = v392 + 4;\n          v296 = *((signed int *)v253 + 18177);\n          v301 += 256LL;\n          v297 += 256LL;\n          v380 += 128LL;\n        }\n        while ( v392 + 4 < v296 );\n        v294 = *((_DWORD *)v253 + 18178);\n        v298 = v395;\n        v297 = v401;\n      }\n      v297 += 16LL;\n      v298 += 8LL;\n      v382 += 4LL;\n    }\n    while ( v294 > (signed int)v382 );\n  }\n  if ( !*(_DWORD *)v295 && v294 > 0 )\n  {\n    v358 = qword_4F9E30;\n    v359 = *((signed int *)v253 + 18177);\n    v360 = (unsigned int)v294;\n    v361 = 0LL;\n    v362 = 0LL;\n    do\n    {\n      if ( (signed int)v359 > 0 )\n      {\n        v363 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v358 + 6464) + 8 * v390)\n                         + 8 * (*((signed int *)v253 + 41) + (signed __int64)(signed int)v362));\n        v364 = *((_DWORD *)v253 + 40);\n        v365 = v361;\n        v366 = 0LL;\n        do\n        {\n          v367 = *(_DWORD *)&v253[2 * v365 + 13112];\n          if ( (_BYTE)v372 )\n            LOWORD(v367) = *(_WORD *)&v253[v365 + 12600] + v367;\n          *(_WORD *)(v363 + 2LL * (v364 + (signed int)v366++)) = v367;\n          v365 += 32LL;\n        }\n        while ( v366 < v359 );\n      }\n      ++v362;\n      v361 += 2LL;\n    }\n    while ( v362 != v360 );\n  }\n  return (unsigned int)v378;\n}\n", 
            "funcStartAddr": "0x405140L", 
            "funcEndAddr": "0x407351L", 
            "funcName": "sub_405140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407360(int a1, int a2, int a3)\n{\n  char *v3; // r9\n  __int64 v4; // r8\n  signed __int64 v5; // rbp\n  unsigned int v6; // ecx\n  char v7; // bl\n  int v8; // er14\n  int v9; // er15\n  __int64 *v10; // rcx\n  bool v11; // al\n  __int64 v12; // r10\n  signed __int64 v13; // r12\n  signed int v14; // er12\n  int v15; // er13\n  int v16; // er8\n  int v17; // esi\n  signed int v18; // ebp\n  __m128i v19; // xmm1\n  __m128i v20; // xmm3\n  __m128i v21; // xmm0\n  __m128i v22; // xmm2\n  int v23; // edx\n  int v24; // esi\n  int v25; // ecx\n  int v26; // esi\n  int v27; // edi\n  int v28; // edx\n  int v29; // ebp\n  int v30; // ebx\n  int v31; // edi\n  __m128i v32; // xmm4\n  __m128i v33; // xmm1\n  int v34; // ST10_4\n  int v35; // esi\n  __m128i v36; // xmm3\n  int v37; // ebp\n  signed __int64 i; // rsi\n  int v39; // ebx\n  int v40; // ecx\n  int v41; // ebp\n  int v42; // edx\n  int v43; // ebp\n  int v44; // ebp\n  int v45; // er15\n  __int64 v46; // rdi\n  int v47; // eax\n  _DWORD *v48; // rdx\n  signed __int64 v49; // rdx\n  signed int v50; // edi\n  int v51; // ebp\n  int v52; // ebp\n  signed __int64 v53; // rdx\n  int v54; // edi\n  int v55; // esi\n  int v56; // eax\n  __int128 *v57; // rsi\n  int *v58; // rsi\n  signed int v59; // er12\n  unsigned int v60; // er11\n  unsigned __int64 v61; // r14\n  bool v62; // di\n  __int64 v63; // r8\n  __int64 v64; // r15\n  __int64 v65; // r13\n  __int64 v66; // rbx\n  int v67; // esi\n  int v68; // ebp\n  signed __int64 v69; // rax\n  int v70; // eax\n  __int64 v71; // rdx\n  int v72; // eax\n  int v73; // eax\n  int v74; // eax\n  int v75; // eax\n  char *v76; // rax\n  int v77; // er8\n  int v78; // edi\n  int v79; // ebp\n  int v80; // ecx\n  int v81; // esi\n  int v82; // edi\n  int v83; // ebp\n  int v84; // esi\n  int v85; // edi\n  int v86; // ebx\n  int v87; // edi\n  int v88; // ecx\n  int v89; // ecx\n  int v90; // esi\n  int v91; // edi\n  int v92; // ebx\n  int v93; // edi\n  int v94; // ecx\n  int v95; // ebx\n  int v96; // er8\n  int v97; // er9\n  int v98; // er10\n  int v99; // ecx\n  int v100; // esi\n  int v101; // edx\n  __int128 v102; // ST10_16\n  __int128 v103; // ST10_16\n  __int128 v104; // ST10_16\n  __int128 v105; // ST10_16\n  bool v107; // [rsp+Fh] [rbp-A9h]\n  char v108; // [rsp+Fh] [rbp-A9h]\n  unsigned int v109; // [rsp+24h] [rbp-94h]\n  __int64 v110; // [rsp+28h] [rbp-90h]\n  __int64 v111; // [rsp+30h] [rbp-88h]\n  char v112; // [rsp+38h] [rbp-80h]\n  bool v113; // [rsp+3Ch] [rbp-7Ch]\n  int v114; // [rsp+40h] [rbp-78h]\n  int v115; // [rsp+40h] [rbp-78h]\n  char v116; // [rsp+48h] [rbp-70h]\n  signed int v117; // [rsp+4Ch] [rbp-6Ch]\n  char v118; // [rsp+50h] [rbp-68h]\n  __int64 v119; // [rsp+58h] [rbp-60h]\n  signed int v120; // [rsp+60h] [rbp-58h]\n  int *v121; // [rsp+68h] [rbp-50h]\n  __int128 *v122; // [rsp+70h] [rbp-48h]\n  signed __int64 v123; // [rsp+78h] [rbp-40h]\n  __int64 v124; // [rsp+80h] [rbp-38h]\n\n  v3 = (char *)off_49F6D0;\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v6 = *(_DWORD *)(v4 + v5 + 72) - 9;\n  v107 = v6 < 5;\n  v7 = 0x13u >> v6;\n  v8 = a3;\n  v9 = a2;\n  v10 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a2) + 8LL * a3);\n  v119 = *v10;\n  v124 = v10[1];\n  if ( *((_DWORD *)off_49F6D0 + 18167) + *((_DWORD *)off_49F6D0 + 10) )\n    v11 = 0;\n  else\n    v11 = *((_DWORD *)off_49F6D0 + 18176) == 1;\n  v12 = a1;\n  v13 = *((signed int *)off_49F6D0 + a1 + 18179) + (signed __int64)*(signed int *)(v4 + v5 + 12);\n  if ( (signed int)v13 >= 0 )\n    LODWORD(v13) = (unsigned __int8)byte_489C50[v13];\n  v108 = v7 & v107;\n  v14 = *((_DWORD *)off_49F6D0 + 18168) + v13;\n  v15 = ((unsigned __int64)(715827883LL * v14) >> 32) + ((unsigned __int64)(715827883LL * v14) >> 63);\n  v16 = v14 - 6 * v15;\n  v112 = ((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0) + 15;\n  v113 = v11;\n  v114 = v14 - 6 * v15;\n  if ( v11 )\n  {\n    v17 = *((_DWORD *)off_49F6D0 + 3278);\n    v18 = -*((_DWORD *)off_49F6D0 + 3278);\n    if ( v18 < 1 )\n      v18 = *((_DWORD *)off_49F6D0 + 3278);\n  }\n  else\n  {\n    v19 = _mm_loadu_si128((const __m128i *)((char *)off_49F6D0 + 13112));\n    v20 = _mm_loadu_si128((const __m128i *)((char *)off_49F6D0 + 13176));\n    v21 = _mm_loadu_si128((const __m128i *)((char *)off_49F6D0 + 13240));\n    v22 = _mm_loadu_si128((const __m128i *)((char *)off_49F6D0 + 13304));\n    v23 = _mm_cvtsi128_si32(v19) + _mm_cvtsi128_si32(v22);\n    v24 = _mm_cvtsi128_si32(v20) + _mm_cvtsi128_si32(v21);\n    v25 = v24 + v23;\n    *((_DWORD *)off_49F6D0 + 3278) = v24 + v23;\n    *((_DWORD *)v3 + 3310) = v23 - v24;\n    v26 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v19, 229)) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v22, 229));\n    v27 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v20, 229)) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v21, 229));\n    v28 = v27 + v26;\n    *((_DWORD *)v3 + 3279) = v27 + v26;\n    *((_DWORD *)v3 + 3311) = v26 - v27;\n    v29 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v19, 78)) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v22, 78));\n    v30 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v20, 78)) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v21, 78));\n    v31 = v30 + v29;\n    *((_DWORD *)v3 + 3280) = v30 + v29;\n    v32 = _mm_shuffle_epi32(v19, 231);\n    *((_DWORD *)v3 + 3312) = v29 - v30;\n    v33 = _mm_sub_epi32(v19, v22);\n    v34 = _mm_cvtsi128_si32(v32) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v22, 231));\n    v35 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v20, 231)) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v21, 231));\n    v36 = _mm_sub_epi32(v20, v21);\n    v37 = v35 + v34;\n    *((_DWORD *)v3 + 3281) = v35 + v34;\n    *((_DWORD *)v3 + 3313) = v34 - v35;\n    _mm_storeu_si128((__m128i *)(v3 + 13176), _mm_add_epi32(_mm_add_epi32(v33, v33), v36));\n    _mm_storeu_si128((__m128i *)(v3 + 13304), _mm_sub_epi32(v33, _mm_add_epi32(v36, v36)));\n    for ( i = -192LL; ; i += 64LL )\n    {\n      v39 = v25 + v37;\n      v40 = v25 - v37;\n      v41 = v31 + v28;\n      *(_DWORD *)&v3[i + 13304] = v39 + v31 + v28;\n      v42 = v28 - v31;\n      *(_DWORD *)&v3[i + 13312] = v39 - v41;\n      *(_DWORD *)&v3[i + 13308] = v42 + 2 * v40;\n      *(_DWORD *)&v3[i + 13316] = v40 - 2 * v42;\n      if ( !i )\n        break;\n      v25 = *(_DWORD *)&v3[i + 13368];\n      v28 = *(_DWORD *)&v3[i + 13372];\n      v37 = *(_DWORD *)&v3[i + 13380];\n      v31 = *(_DWORD *)&v3[i + 13376];\n    }\n    v17 = *((_DWORD *)v3 + 3278);\n    v43 = -*((_DWORD *)v3 + 3278);\n    if ( v43 < 1 )\n      v43 = *((_DWORD *)v3 + 3278);\n    if ( v108 )\n      v44 = dword_4EE9F0[208 * v12 + 16 * (signed __int64)v15]\n          + LODWORD(xmmword_4F6250[24 * v12 + 4 * (signed __int64)v16]) * v43;\n    else\n      v44 = dword_4EE370[208 * v12 + 16 * (signed __int64)v15]\n          + LODWORD(xmmword_4F5F50[24 * v12 + 4 * (signed __int64)v16]) * v43;\n    v18 = v44 >> v112;\n  }\n  v45 = v9 - 4 * v12;\n  v111 = v12;\n  v46 = v12;\n  dword_4F9290[16 * v12\n             + 4 * (signed int)(v8 % 2 + 2 * (v45 - 4 - ((v45 + ((unsigned int)(v45 - 4) >> 31) - 4) & 0xFFFFFFFE)))\n             + (signed int)(((v45 + ((unsigned int)(v45 - 4) >> 31) - 4) & 0xFFFFFFFE) + v8 / 2)] = sub_452340(v18, v17);\n  v120 = v14;\n  if ( v113 )\n  {\n    v47 = sub_452340(v18, *((_DWORD *)off_49F6D0 + 3278));\n    v48 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 3278) = v47;\n    v110 = v114;\n  }\n  else\n  {\n    v110 = v114;\n    if ( v14 > 23 )\n    {\n      if ( v108 )\n        v52 = LODWORD(xmmword_4F5C50[24 * v46 + 4 * (signed __int64)v114]) * v18;\n      else\n        v52 = LODWORD(xmmword_4F5950[24 * v46 + 4 * (signed __int64)v114]) * v18;\n      v55 = *((_DWORD *)off_49F6D0 + 3278);\n      v54 = v52 << (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0) - 4);\n    }\n    else\n    {\n      if ( v108 )\n      {\n        v49 = 3 * v46;\n        v50 = 1 << (3 - (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0)));\n        v51 = LODWORD(xmmword_4F5C50[8 * v49 + 4 * (signed __int64)v114]) * v18;\n      }\n      else\n      {\n        v53 = 3 * v46;\n        v50 = 1 << (3 - (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0)));\n        v51 = LODWORD(xmmword_4F5950[8 * v53 + 4 * (signed __int64)v114]) * v18;\n      }\n      v54 = (v51 + v50) >> (4 - (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0)));\n      v55 = *((_DWORD *)off_49F6D0 + 3278);\n    }\n    v56 = sub_452340(v54, v55);\n    v48 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 3278) = v56;\n  }\n  v117 = 1 << (3 - (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0)));\n  v116 = 4 - (((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0));\n  v118 = ((unsigned __int64)(715827883LL * v14) >> 32) + (715827883LL * v14 < 0) - 4;\n  v57 = xmmword_4F5F50;\n  if ( v108 )\n    v57 = xmmword_4F6250;\n  v122 = v57;\n  v58 = dword_4EE370;\n  if ( v108 )\n    v58 = dword_4EE9F0;\n  v121 = v58;\n  v59 = -1;\n  v60 = 0;\n  v61 = 1LL;\n  v123 = (signed __int64)v15 << 6;\n  v115 = 0;\n  v62 = v113;\n  v63 = v111;\n  while ( 1 )\n  {\n    v64 = (unsigned __int8)byte_489C90[2 * v61];\n    v65 = (unsigned __int8)byte_489C91[2 * v61];\n    v66 = v64 << 6;\n    v67 = v48[16 * v64 + 3278 + v65];\n    v68 = -v67;\n    if ( -v67 < 1 )\n      v68 = *(_DWORD *)((char *)&v48[v65 + 3278] + v66);\n    if ( !v62 )\n      v68 = (*(int *)((char *)&v121[208 * v63 + 4 * v64 + v65] + v123)\n           + *((_DWORD *)&v122[24 * v63 + 4 * v110 + v64] + v65) * v68) >> v112;\n    ++v59;\n    if ( v68 )\n      break;\n    v73 = 0;\n    if ( !v62 )\n      goto LABEL_60;\n    if ( v61 == 15 )\n      goto LABEL_61;\nLABEL_36:\n    ++v61;\n    v48 = off_49F6D0;\n  }\n  v69 = 65534LL;\n  if ( _bittest64(&v69, v61) )\n    v60 = 1;\n  v109 = v60;\n  v70 = sub_452340(v68, v67);\n  v71 = v115;\n  *(_DWORD *)(v119 + 4 * v71) = v70;\n  *(_DWORD *)(v124 + 4 * v71) = v59;\n  ++v115;\n  v72 = sub_452340(v68, *(_DWORD *)((char *)off_49F6D0 + 4 * v65 + v66 + 13112));\n  v62 = v113;\n  v59 = -1;\n  if ( v113 )\n  {\n    v63 = v111;\n    v60 = v109;\n    if ( v61 == 15 )\n      goto LABEL_61;\n    goto LABEL_36;\n  }\n  if ( v120 > 23 )\n  {\n    if ( v108 )\n    {\n      v63 = v111;\n      v75 = *((_DWORD *)&xmmword_4F5C50[24 * v111 + 4 * v110 + v64] + v65) * v72;\n    }\n    else\n    {\n      v63 = v111;\n      v75 = *((_DWORD *)&xmmword_4F5950[24 * v111 + 4 * v110 + v64] + v65) * v72;\n    }\n    v73 = v75 << v118;\n  }\n  else\n  {\n    if ( v108 )\n    {\n      v63 = v111;\n      v74 = *((_DWORD *)&xmmword_4F5C50[24 * v111 + 4 * v110 + v64] + v65) * v72;\n    }\n    else\n    {\n      v63 = v111;\n      v74 = *((_DWORD *)&xmmword_4F5950[24 * v111 + 4 * v110 + v64] + v65) * v72;\n    }\n    v73 = (v117 + v74) >> v116;\n  }\n  v59 = -1;\n  v60 = v109;\nLABEL_60:\n  *(_DWORD *)((char *)off_49F6D0 + 4 * v65 + v66 + 13112) = v73;\n  if ( v61 != 15 )\n    goto LABEL_36;\nLABEL_61:\n  *(_DWORD *)(v119 + 4LL * v115) = 0;\n  if ( !v62 )\n  {\n    v76 = (char *)off_49F6D0;\n    v77 = *((_DWORD *)off_49F6D0 + 3310);\n    v78 = *((_DWORD *)off_49F6D0 + 3326);\n    v79 = *((_DWORD *)off_49F6D0 + 3278);\n    v80 = *((_DWORD *)off_49F6D0 + 3279);\n    v81 = (*((_DWORD *)off_49F6D0 + 3294) >> 1) - v78;\n    v82 = *((_DWORD *)off_49F6D0 + 3294) + (v78 >> 1);\n    *((_DWORD *)off_49F6D0 + 3278) = v82 + v77 + v79;\n    *((_DWORD *)v76 + 3326) = v77 + v79 - v82;\n    v83 = v79 - v77;\n    *((_DWORD *)v76 + 3294) = v81 + v83;\n    *((_DWORD *)v76 + 3310) = v83 - v81;\n    v84 = *((_DWORD *)v76 + 3311);\n    v85 = *((_DWORD *)v76 + 3327);\n    v86 = (*((_DWORD *)v76 + 3295) >> 1) - v85;\n    v87 = *((_DWORD *)v76 + 3295) + (v85 >> 1);\n    *((_DWORD *)v76 + 3279) = v87 + v84 + v80;\n    *((_DWORD *)v76 + 3327) = v84 + v80 - v87;\n    v88 = v80 - v84;\n    *((_DWORD *)v76 + 3295) = v86 + v88;\n    *((_DWORD *)v76 + 3311) = v88 - v86;\n    v89 = *((_DWORD *)v76 + 3280);\n    v90 = *((_DWORD *)v76 + 3312);\n    v91 = *((_DWORD *)v76 + 3328);\n    v92 = (*((_DWORD *)v76 + 3296) >> 1) - v91;\n    v93 = *((_DWORD *)v76 + 3296) + (v91 >> 1);\n    *((_DWORD *)v76 + 3280) = v93 + v90 + v89;\n    *((_DWORD *)v76 + 3328) = v90 + v89 - v93;\n    v94 = v89 - v90;\n    *((_DWORD *)v76 + 3296) = v92 + v94;\n    *((_DWORD *)v76 + 3312) = v94 - v92;\n    v95 = *((_DWORD *)v76 + 3281);\n    v96 = *((_DWORD *)v76 + 3297);\n    v97 = *((_DWORD *)v76 + 3313);\n    v98 = *((_DWORD *)v76 + 3329);\n    v99 = *((_DWORD *)v76 + 3281) - v97;\n    v100 = v96 + (*((_DWORD *)v76 + 3329) >> 1);\n    *((_DWORD *)v76 + 3281) = v100 + v97 + v95;\n    *((_DWORD *)v76 + 3329) = v97 + v95 - v100;\n    v101 = (v96 >> 1) - v98;\n    *((_DWORD *)v76 + 3297) = v101 + v99;\n    *((_DWORD *)v76 + 3313) = v99 - v101;\n    v102 = *(_OWORD *)(v76 + 13112);\n    _mm_storeu_si128(\n      (__m128i *)(v76 + 13112),\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v102) + (signed int)v102 + 32 + DWORD1(v102) + (SHIDWORD(v102) >> 1)),\n            _mm_cvtsi32_si128((signed int)v102 - DWORD2(v102) + (SDWORD1(v102) >> 1) - HIDWORD(v102) + 32)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v102 - DWORD2(v102) + 32 - ((SDWORD1(v102) >> 1) - HIDWORD(v102))),\n            _mm_cvtsi32_si128(DWORD2(v102) + (signed int)v102 + 32 - (DWORD1(v102) + (SHIDWORD(v102) >> 1))))),\n        6u));\n    v103 = *(_OWORD *)(v76 + 13176);\n    _mm_storeu_si128(\n      (__m128i *)(v76 + 13176),\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v103) + (signed int)v103 + 32 + DWORD1(v103) + (SHIDWORD(v103) >> 1)),\n            _mm_cvtsi32_si128((signed int)v103 - DWORD2(v103) + (SDWORD1(v103) >> 1) - HIDWORD(v103) + 32)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v103 - DWORD2(v103) + 32 - ((SDWORD1(v103) >> 1) - HIDWORD(v103))),\n            _mm_cvtsi32_si128(DWORD2(v103) + (signed int)v103 + 32 - (DWORD1(v103) + (SHIDWORD(v103) >> 1))))),\n        6u));\n    v104 = *(_OWORD *)(v76 + 13240);\n    _mm_storeu_si128(\n      (__m128i *)(v76 + 13240),\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v104) + (signed int)v104 + 32 + DWORD1(v104) + (SHIDWORD(v104) >> 1)),\n            _mm_cvtsi32_si128((signed int)v104 - DWORD2(v104) + (SDWORD1(v104) >> 1) - HIDWORD(v104) + 32)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v104 - DWORD2(v104) + 32 - ((SDWORD1(v104) >> 1) - HIDWORD(v104))),\n            _mm_cvtsi32_si128(DWORD2(v104) + (signed int)v104 + 32 - (DWORD1(v104) + (SHIDWORD(v104) >> 1))))),\n        6u));\n    v105 = *(_OWORD *)(v76 + 13304);\n    _mm_storeu_si128(\n      (__m128i *)(v76 + 13304),\n      _mm_srai_epi32(\n        _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v105) + (signed int)v105 + 32 + DWORD1(v105) + (SHIDWORD(v105) >> 1)),\n            _mm_cvtsi32_si128((signed int)v105 - DWORD2(v105) + (SDWORD1(v105) >> 1) - HIDWORD(v105) + 32)),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v105 - DWORD2(v105) + 32 - ((SDWORD1(v105) >> 1) - HIDWORD(v105))),\n            _mm_cvtsi32_si128(DWORD2(v105) + (signed int)v105 + 32 - (DWORD1(v105) + (SHIDWORD(v105) >> 1))))),\n        6u));\n  }\n  return v60;\n}\n", 
            "funcStartAddr": "0x407360L", 
            "funcEndAddr": "0x407dedL", 
            "funcName": "sub_407360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407DF0(int a1, signed int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  signed int v6; // er13\n  __int64 *v7; // rax\n  __int64 v8; // r14\n  __int64 v9; // rbx\n  signed int v10; // er12\n  signed __int64 v11; // rbp\n  signed __int64 v12; // r15\n  int v13; // esi\n  unsigned int v14; // edi\n  __int64 v16; // [rsp+0h] [rbp-38h]\n\n  v6 = a2;\n  v7 = *(__int64 **)(*((_QWORD *)off_49F6D0 + 1768) + 8LL * a1 + 8);\n  v8 = *v7;\n  v16 = v7[1];\n  LODWORD(v9) = 0;\n  v10 = -1;\n  v11 = -32LL;\n  v12 = (signed __int64)a1 << 6;\n  do\n  {\n    ++v10;\n    v13 = *(int *)((char *)&dword_4F9210[4 * (unsigned __int8)byte_489CB0[v11] + (unsigned __int8)byte_489CB1[v11]] + v12);\n    if ( v13 )\n    {\n      v14 = -v13;\n      if ( -v13 < 1 )\n        v14 = *(int *)((char *)&dword_4F9210[4 * (unsigned __int8)byte_489CB0[v11] + (unsigned __int8)byte_489CB1[v11]]\n                     + v12);\n      if ( v6 <= 0 )\n        v6 = 1;\n      v9 = (signed int)v9;\n      *(_DWORD *)(v8 + 4 * v9) = sub_452340(v14, v13);\n      *(_DWORD *)(v16 + 4 * v9) = v10;\n      LODWORD(v9) = v9 + 1;\n      v10 = -1;\n    }\n    v11 += 2LL;\n  }\n  while ( v11 );\n  *(_DWORD *)(v8 + 4LL * (signed int)v9) = 0;\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x407df0L", 
            "funcEndAddr": "0x407eb7L", 
            "funcName": "sub_407DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407EC0(signed int a1, signed int a2, __int64 a3)\n{\n  char *v3; // r13\n  __int64 v4; // r15\n  __int64 *v5; // rax\n  signed __int64 v6; // rbx\n  __int64 v7; // rbp\n  double v8; // xmm0_8\n  __int64 v9; // r11\n  signed __int64 v10; // rax\n  __m128i v11; // xmm1\n  __m128i v12; // xmm3\n  __m128i v13; // xmm4\n  __m128i v14; // xmm2\n  int v15; // er9\n  unsigned __int64 v16; // rdi\n  unsigned __int64 v17; // rcx\n  __int64 v18; // rbp\n  unsigned __int64 v19; // rbx\n  unsigned __int64 v20; // rdi\n  __int64 v21; // r8\n  signed int v22; // er12\n  __m128i v23; // xmm1\n  __m128i v24; // xmm3\n  int v25; // er10\n  int v26; // er14\n  int v27; // esi\n  int v28; // edx\n  int v29; // esi\n  int v30; // edx\n  int v31; // edx\n  int v32; // eax\n  int v33; // edx\n  int v34; // er9\n  int v35; // edx\n  int v36; // er8\n  unsigned __int64 v37; // rdi\n  unsigned __int64 v38; // rbp\n  int v39; // er12\n  int v40; // edi\n  signed __int64 i; // rcx\n  int v42; // ebx\n  int v43; // esi\n  int v44; // edi\n  int v45; // eax\n  int v46; // edi\n  int v47; // ebp\n  int v48; // er11\n  int v49; // eax\n  int v50; // er10\n  int v51; // ebx\n  int v52; // er12\n  int v53; // er15\n  int v54; // er9\n  int v55; // edx\n  int v56; // edi\n  int v57; // er8\n  int v58; // er14\n  int v59; // ebp\n  int v60; // esi\n  int v61; // er8\n  int v62; // eax\n  int v63; // er8\n  int v64; // er9\n  int v65; // esi\n  int v66; // eax\n  int v67; // er11\n  int v68; // esi\n  int v69; // ebx\n  int v70; // ebp\n  int v71; // esi\n  int v72; // ebx\n  int v73; // er10\n  int v74; // edx\n  int v75; // ST00_4\n  int v76; // er12\n  int v77; // eax\n  int v78; // edx\n  signed int v79; // ebx\n  signed __int64 v80; // rbp\n  char *v81; // rsi\n  char v82; // r13\n  int v83; // esi\n  __int64 v84; // rbp\n  __int64 v85; // r14\n  __int64 v86; // r12\n  int v87; // eax\n  int v88; // er15\n  char *v89; // rax\n  __int64 v90; // r15\n  __int64 v91; // rbx\n  signed __int64 v92; // r12\n  __int128 *v93; // rax\n  int v94; // er14\n  int v95; // eax\n  __int64 v96; // r15\n  int v97; // ebp\n  int v98; // eax\n  int v99; // esi\n  int v100; // ebp\n  __int64 v101; // rax\n  int v102; // eax\n  int v103; // ebp\n  int v104; // er13\n  int v105; // er13\n  int v106; // er14\n  int v107; // er14\n  int v108; // eax\n  __int64 v109; // rbx\n  int v110; // er12\n  int v111; // eax\n  __int64 v112; // rax\n  double v113; // xmm0_8\n  int v114; // eax\n  int v115; // ecx\n  bool v116; // al\n  signed int v117; // er15\n  bool v118; // zf\n  int v119; // eax\n  signed int v120; // eax\n  int v121; // eax\n  __int64 v122; // rdx\n  int v123; // eax\n  int v124; // esi\n  int v125; // edi\n  int v126; // eax\n  int v127; // er8\n  int v128; // edi\n  int v129; // ebp\n  int v130; // eax\n  int v131; // edx\n  int v132; // edi\n  int v133; // ebp\n  int v134; // edx\n  int v135; // edi\n  int v136; // ebx\n  int v137; // edi\n  int v138; // eax\n  int v139; // eax\n  int v140; // edx\n  int v141; // edi\n  int v142; // ebx\n  int v143; // edi\n  int v144; // eax\n  int v145; // ebx\n  int v146; // er9\n  int v147; // er10\n  int v148; // eax\n  int v149; // ecx\n  int v150; // edx\n  int v151; // ecx\n  __m128i v152; // xmm0\n  __int128 v153; // ST00_16\n  __m128i v154; // xmm3\n  __m128i v155; // xmm1\n  __m128i v156; // xmm2\n  __m128i v157; // xmm4\n  __m128i v158; // xmm3\n  __int128 v159; // ST00_16\n  __m128i v160; // xmm5\n  __m128i v161; // xmm3\n  __m128i v162; // xmm4\n  __int128 v163; // ST00_16\n  __m128i v164; // xmm5\n  __m128i v165; // xmm3\n  __m128i v166; // xmm4\n  __int128 v167; // ST00_16\n  __m128i v168; // xmm5\n  __m128i v169; // xmm1\n  __m128i v170; // xmm2\n  __int64 v171; // r8\n  int v172; // ebx\n  int v173; // er9\n  int v174; // er10\n  __int64 v175; // rax\n  int v176; // ecx\n  __int64 v177; // rdx\n  __int64 v178; // rdi\n  __int64 v179; // rbp\n  __int64 v180; // rbx\n  __int64 v181; // rax\n  __int64 v182; // rax\n  __int64 v183; // rax\n  int v185; // [rsp+1Ch] [rbp-13Ch]\n  unsigned int v186; // [rsp+20h] [rbp-138h]\n  int v187; // [rsp+28h] [rbp-130h]\n  int v188; // [rsp+28h] [rbp-130h]\n  int v189; // [rsp+30h] [rbp-128h]\n  int v190; // [rsp+34h] [rbp-124h]\n  __int64 v191; // [rsp+38h] [rbp-120h]\n  __int128 v192; // [rsp+40h] [rbp-118h]\n  __int128 v193; // [rsp+50h] [rbp-108h]\n  __int128 v194; // [rsp+60h] [rbp-F8h]\n  __int128 v195; // [rsp+70h] [rbp-E8h]\n  __int64 v196; // [rsp+80h] [rbp-D8h]\n  __int64 v197; // [rsp+88h] [rbp-D0h]\n  double v198; // [rsp+90h] [rbp-C8h]\n  __int64 v199; // [rsp+98h] [rbp-C0h]\n  __int64 v200; // [rsp+A0h] [rbp-B8h]\n  __int64 v201; // [rsp+A8h] [rbp-B0h]\n  int v202; // [rsp+B0h] [rbp-A8h]\n  char v203; // [rsp+B4h] [rbp-A4h]\n  __int64 v204; // [rsp+B8h] [rbp-A0h]\n  double v205; // [rsp+C0h] [rbp-98h]\n  __int64 v206; // [rsp+C8h] [rbp-90h]\n  __int64 v207; // [rsp+D0h] [rbp-88h]\n  __int64 v208; // [rsp+D8h] [rbp-80h]\n  __int64 v209; // [rsp+E0h] [rbp-78h]\n  __int64 v210; // [rsp+E8h] [rbp-70h]\n  _DWORD *v211; // [rsp+F0h] [rbp-68h]\n  double v212; // [rsp+F8h] [rbp-60h]\n  __int64 v213; // [rsp+100h] [rbp-58h]\n  __int64 v214; // [rsp+108h] [rbp-50h]\n  __int64 v215; // [rsp+110h] [rbp-48h]\n  __int64 v216; // [rsp+118h] [rbp-40h]\n  __int64 v217; // [rsp+120h] [rbp-38h]\n\n  v211 = (_DWORD *)a3;\n  v3 = (char *)off_49F6D0;\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * (a1 / 8 + 2 * (a2 / 8)))\n                   + 8LL\n                   * (signed int)(a1 / 4\n                                - ((a1 / 4 + ((a1 + ((unsigned int)(a1 >> 31) >> 30)) >> 31)) & 0xFFFFFFFE)\n                                + 2\n                                * (a2 / 4 - ((a2 / 4 + ((a2 + ((unsigned int)(a2 >> 31) >> 30)) >> 31)) & 0x7FFFFFFE))));\n  v204 = *v5;\n  v210 = v5[1];\n  v6 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v7 = *(signed int *)(v4 + v6 + 12);\n  v8 = exp2((double)(*(_DWORD *)(v4 + v6 + 12) - 12) / 3.0);\n  v9 = *(signed int *)(v4 + v6 + 16);\n  v208 = (unsigned int)a1;\n  v209 = (unsigned int)a2;\n  v10 = (signed __int64)&v3[32 * a1];\n  v11 = _mm_loadl_epi64((const __m128i *)(v10 + 2LL * a2 + 12600));\n  v12 = _mm_loadl_epi64((const __m128i *)(v10 + 2LL * a2 + 12632));\n  v13 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v10 + 2LL * a2 + 12664)), (__m128i)0LL);\n  *((_DWORD *)v3 + 3310) += _mm_cvtsi128_si32(v13);\n  v14 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v10 + 2LL * a2 + 12696)), (__m128i)0LL);\n  v15 = v7;\n  v16 = (unsigned __int64)(715827883 * v7) >> 63;\n  v17 = (unsigned __int64)(715827883 * v7) >> 32;\n  v18 = (unsigned int)(v17 + v16);\n  LODWORD(v17) = v17 + v16 + 15;\n  v19 = (unsigned __int64)(715827883 * v9) >> 63;\n  v20 = (unsigned __int64)(715827883 * v9) >> 32;\n  v21 = (unsigned int)(v20 + v19);\n  v185 = v20 + v19 + 15;\n  v202 = v17;\n  v22 = 1 << v17;\n  *((_DWORD *)v3 + 3326) += _mm_cvtsi128_si32(v14);\n  *((_DWORD *)v3 + 3311) += _mm_cvtsi128_si32(_mm_shuffle_epi32(v13, 229));\n  *((_DWORD *)v3 + 3327) += _mm_cvtsi128_si32(_mm_shuffle_epi32(v14, 229));\n  *((_DWORD *)v3 + 3312) += _mm_cvtsi128_si32(_mm_shuffle_epi32(v13, 78));\n  v23 = _mm_unpacklo_epi16(v11, (__m128i)0LL);\n  v24 = _mm_unpacklo_epi16(v12, (__m128i)0LL);\n  v25 = *((_DWORD *)v3 + 3328) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v14, 78));\n  *((_DWORD *)v3 + 3328) = v25;\n  _mm_storeu_si128((__m128i *)(v3 + 13112), _mm_add_epi32(_mm_loadu_si128((const __m128i *)(v3 + 13112)), v23));\n  _mm_store_si128((__m128i *)&v192, v23);\n  _mm_storeu_si128((__m128i *)(v3 + 13176), _mm_add_epi32(_mm_loadu_si128((const __m128i *)(v3 + 13176)), v24));\n  _mm_store_si128((__m128i *)&v193, v24);\n  v26 = *((_DWORD *)v3 + 3313) + _mm_cvtsi128_si32(_mm_shuffle_epi32(v13, 231));\n  _mm_store_si128((__m128i *)&v194, v13);\n  LODWORD(v4) = *((_DWORD *)v3 + 3329);\n  _mm_store_si128((__m128i *)&v195, v14);\n  v200 = v18;\n  v187 = v15 - 6 * v18;\n  v216 = v21;\n  v197 = (unsigned int)(v9 - 6 * v21);\n  LODWORD(v10) = *((_DWORD *)v3 + 3326);\n  LODWORD(v19) = *((_DWORD *)v3 + 3278);\n  LODWORD(v20) = *((_DWORD *)v3 + 3279);\n  LODWORD(v17) = v10 + v19;\n  LODWORD(v19) = v19 - v10;\n  LODWORD(v10) = *((_DWORD *)v3 + 3294);\n  v27 = *((_DWORD *)v3 + 3310);\n  v28 = v27 + v10;\n  LODWORD(v10) = v10 - v27;\n  v29 = v28 + v17;\n  *((_DWORD *)v3 + 3278) = v28 + v17;\n  *((_DWORD *)v3 + 3310) = v17 - v28;\n  *((_DWORD *)v3 + 3294) = v10 + 2 * v19;\n  *((_DWORD *)v3 + 3326) = v19 - 2 * v10;\n  LODWORD(v10) = *((_DWORD *)v3 + 3327);\n  LODWORD(v17) = v10 + v20;\n  LODWORD(v20) = v20 - v10;\n  v30 = *((_DWORD *)v3 + 3295);\n  LODWORD(v10) = *((_DWORD *)v3 + 3311);\n  LODWORD(v19) = v10 + v30;\n  v31 = v30 - v10;\n  v32 = v19 + v17;\n  *((_DWORD *)v3 + 3279) = v19 + v17;\n  *((_DWORD *)v3 + 3311) = v17 - v19;\n  *((_DWORD *)v3 + 3295) = v31 + 2 * v20;\n  *((_DWORD *)v3 + 3327) = v20 - 2 * v31;\n  LODWORD(v17) = *((_DWORD *)v3 + 3280);\n  LODWORD(v20) = v25 + v17;\n  LODWORD(v17) = v17 - v25;\n  LODWORD(v19) = *((_DWORD *)v3 + 3296);\n  v33 = *((_DWORD *)v3 + 3312);\n  v34 = v33 + v19;\n  LODWORD(v19) = v19 - v33;\n  v35 = v34 + v20;\n  v36 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v14, 231));\n  LODWORD(v4) = v36 + v4;\n  *((_DWORD *)v3 + 3280) = v34 + v20;\n  *((_DWORD *)v3 + 3312) = v20 - v34;\n  *((_DWORD *)v3 + 3296) = v19 + 2 * v17;\n  v37 = (unsigned __int64)(715827883LL * v22) >> 63;\n  v38 = (unsigned __int64)(715827883LL * v22) >> 32;\n  *((_DWORD *)v3 + 3328) = v17 - 2 * v19;\n  v39 = *((_DWORD *)v3 + 3281);\n  v215 = (unsigned int)(v37 + v38);\n  LODWORD(v19) = *((_DWORD *)v3 + 3297);\n  v40 = v26 + v19 + v4 + v39;\n  *((_DWORD *)v3 + 3281) = v40;\n  *((_DWORD *)v3 + 3313) = v4 + v39 - (v26 + v19);\n  *((_DWORD *)v3 + 3297) = v19 - v26 + 2 * (v39 - v4);\n  v205 = v8 * 0.85 * 4.0;\n  *((_DWORD *)v3 + 3329) = v39 - v4 - 2 * (v19 - v26);\n  for ( i = -192LL; ; i += 64LL )\n  {\n    v42 = v40 + v29;\n    v43 = v29 - v40;\n    v44 = v35 + v32;\n    *(_DWORD *)&v3[i + 13304] = v35 + v32 + v42;\n    v45 = v32 - v35;\n    *(_DWORD *)&v3[i + 13312] = v42 - v44;\n    *(_DWORD *)&v3[i + 13308] = v45 + 2 * v43;\n    *(_DWORD *)&v3[i + 13316] = v43 - 2 * v45;\n    if ( !i )\n      break;\n    v29 = *(_DWORD *)&v3[i + 13368];\n    v32 = *(_DWORD *)&v3[i + 13372];\n    v40 = *(_DWORD *)&v3[i + 13380];\n    v35 = *(_DWORD *)&v3[i + 13376];\n  }\n  v46 = v194;\n  v47 = v194 + v193 + v195 + v192;\n  LODWORD(v194) = v195 + v192 - (v194 + v193);\n  v48 = v193 - v46 + 2 * (v192 - v195);\n  LODWORD(v195) = v192 - v195 - 2 * (v193 - v46);\n  v49 = DWORD1(v194) + DWORD1(v193) + DWORD1(v195) + DWORD1(v192);\n  v50 = DWORD1(v195) + DWORD1(v192) - (DWORD1(v194) + DWORD1(v193));\n  v51 = DWORD1(v193) - DWORD1(v194) + 2 * (DWORD1(v192) - DWORD1(v195));\n  DWORD1(v195) = DWORD1(v192) - DWORD1(v195) - 2 * (DWORD1(v193) - DWORD1(v194));\n  v52 = DWORD2(v192) - DWORD2(v195);\n  v53 = DWORD2(v193) - DWORD2(v194);\n  v191 = (unsigned int)(DWORD2(v195) + DWORD2(v192) - (DWORD2(v194) + DWORD2(v193)));\n  v54 = HIDWORD(v192) + v36;\n  v55 = HIDWORD(v192) - v36;\n  v56 = HIDWORD(v193) - HIDWORD(v194);\n  v57 = HIDWORD(v194) + HIDWORD(v193) + HIDWORD(v192) + v36;\n  v58 = v57 + v47;\n  v59 = v47 - v57;\n  v60 = DWORD2(v194) + DWORD2(v193) + DWORD2(v195) + DWORD2(v192);\n  v61 = v60 + v49;\n  LODWORD(v192) = v60 + v49 + v58;\n  v62 = v49 - v60;\n  DWORD2(v192) = v58 - v61;\n  DWORD1(v192) = v62 + 2 * v59;\n  v63 = DWORD2(v193) - DWORD2(v194) + 2 * v52;\n  v64 = v54 - (HIDWORD(v194) + HIDWORD(v193));\n  v65 = HIDWORD(v193) - HIDWORD(v194) + 2 * v55;\n  HIDWORD(v192) = v59 - 2 * v62;\n  v66 = v65 + v48;\n  v67 = v48 - v65;\n  v68 = v63 + v51;\n  LODWORD(v193) = v63 + v51 + v66;\n  v69 = v51 - v63;\n  DWORD2(v193) = v66 - v68;\n  DWORD1(v193) = v69 + 2 * v67;\n  HIDWORD(v193) = v67 - 2 * v69;\n  v70 = v64 + v194;\n  v71 = v194 - v64;\n  v72 = v191 + v50;\n  v73 = v50 - v191;\n  LODWORD(v194) = v72 + v64 + v194;\n  DWORD2(v194) = v70 - v72;\n  DWORD1(v194) = v73 + 2 * v71;\n  HIDWORD(v194) = v71 - 2 * v73;\n  v74 = v55 - 2 * v56;\n  v75 = v74 + v195;\n  v76 = v52 - 2 * v53;\n  v77 = v195 - v74;\n  v78 = DWORD1(v195) - v76;\n  LODWORD(v195) = v76 + DWORD1(v195) + v75;\n  DWORD2(v195) = v75 - (v76 + DWORD1(v195));\n  DWORD1(v195) = DWORD1(v195) - v76 + 2 * v77;\n  HIDWORD(v195) = v77 - 2 * v78;\n  v214 = (signed int)v197;\n  v213 = v187;\n  v79 = -1;\n  v199 = 0LL;\n  v80 = -16LL;\n  v81 = (char *)off_49F6D0;\n  v186 = 0;\n  v82 = v185;\n  do\n  {\n    if ( *((_DWORD *)v81 + 18111) || dword_4FA108 && *((_DWORD *)v81 + 18002) )\n      v89 = byte_489CB0;\n    else\n      v89 = byte_489C90;\n    v188 = v79 + 1;\n    v90 = (unsigned __int8)v89[2 * v80 + 32];\n    v201 = v80;\n    v91 = (unsigned __int8)v89[2 * v80 + 33];\n    v92 = 16 * v90;\n    v93 = &v192 + v90;\n    v94 = *((_DWORD *)v93 + v91);\n    v95 = -*((_DWORD *)v93 + v91);\n    if ( v95 < 1 )\n      v95 = v94;\n    v196 = v92 + (v214 << 6);\n    v189 = *(_DWORD *)((char *)&xmmword_48A080 + 4 * v91 + v196);\n    v96 = v90 << 6;\n    v97 = *(_DWORD *)&v81[4 * v91 + 13112 + v96];\n    v98 = sub_452340(\n            (((1 << v185) / 2 + *(_DWORD *)((char *)&xmmword_48A080 + 4 * v91 + v196) * v95) >> v82 << v82)\n          / *(_DWORD *)((char *)&xmmword_48A080 + 4 * v91 + v196),\n            v94);\n    v99 = v97 - v98;\n    v100 = v98 - v97;\n    if ( v100 < 1 )\n      v100 = v99;\n    v207 = v92;\n    v101 = v92 + (v213 << 6);\n    v206 = v101;\n    v102 = *(_DWORD *)((char *)&xmmword_48A080 + 4 * v91 + v101);\n    v103 = ((signed int)v215 + v102 * v100) >> v202;\n    v191 = v91;\n    v104 = *(_DWORD *)((char *)off_49F6D0 + 4 * v91 + v96 + 13112);\n    LODWORD(v197) = v94;\n    v105 = v104 - v94;\n    v106 = -v105;\n    if ( -v105 < 1 )\n      v106 = v105;\n    v107 = ((signed int)v215 + v102 * v106) >> v202;\n    v217 = v96;\n    if ( v107 && v103 && v103 != v107 )\n    {\n      v108 = sub_452340(v103, v99);\n      v109 = v191;\n      v110 = *(_DWORD *)((char *)&xmmword_48A200 + 4 * v191 + v206) * *(int *)((char *)&dword_48A380[v191] + v207);\n      v198 = (double)(v105 - (v110 * v108 << v200 >> 6));\n      sub_4800F0((__int64)&v203, &v190, &v203, v103, v188);\n      v198 = (double)v190 * v205 + v198 * v198;\n      LODWORD(v109) = *(_DWORD *)((char *)off_49F6D0 + 4 * v109 + v96 + 13112);\n      v111 = sub_452340(v107, v105);\n      v112 = (unsigned int)(v110 * v111 << v200 >> 6);\n      v212 = (double)((signed int)v109 - (signed int)v197 - (signed int)v112);\n      sub_4800F0(v112, &v190, &v203, v107, v188);\n      v113 = (double)v190 * v205 + v212 * v212;\n      if ( v198 == v113 )\n      {\n        v114 = -v103;\n        if ( -v103 < 1 )\n          v114 = v103;\n        v115 = -v107;\n        if ( -v107 < 1 )\n          v115 = v107;\n        v116 = v114 < v115;\n      }\n      else\n      {\n        v116 = v113 > v198;\n      }\n      v86 = v196;\n      v117 = v103;\n      v118 = v116 == 0;\n      v119 = v99;\n      if ( v118 )\n        v117 = v107;\n      if ( v117 != v103 )\n        v119 = v105;\n      v105 = v119;\n      v84 = v201;\n      v79 = v188;\n      v85 = v191;\nLABEL_37:\n      v120 = 999999;\n      if ( v117 <= 1 )\n        v120 = (unsigned __int8)byte_489CD0[16 * *((signed int *)dest + 617) + v79];\n      *v211 += v120;\n      v121 = sub_452340(v117, v105);\n      v122 = (signed int)v199;\n      *(_DWORD *)(v204 + 4 * v122) = v121;\n      *(_DWORD *)(v210 + 4 * v122) = v79;\n      v199 = (unsigned int)(v122 + 1);\n      v123 = sub_452340(v117, v105);\n      v83 = *(int *)((char *)&dword_48A380[v85] + v207) * *(_DWORD *)((char *)&xmmword_48A200 + 4 * v85 + v206) * v123 << v200 >> 6;\n      v79 = -1;\n      v186 = 1;\n      goto LABEL_40;\n    }\n    if ( v103 == v107 )\n    {\n      v105 = v99;\n      v107 = v103;\n    }\n    else if ( !v103 )\n    {\n      v83 = 0;\n      v84 = v201;\n      v79 = v188;\n      v85 = v191;\n      v86 = v196;\n      v87 = v189;\n      v82 = v185;\n      v88 = (1 << v185) / 2;\n      goto LABEL_41;\n    }\n    v117 = v107;\n    v118 = v107 == 0;\n    v84 = v201;\n    v79 = v188;\n    v85 = v191;\n    v86 = v196;\n    if ( !v118 )\n      goto LABEL_37;\n    v83 = 0;\nLABEL_40:\n    v88 = (1 << v185) / 2;\n    v87 = v189;\n    v82 = v185;\nLABEL_41:\n    v124 = v197 + v83;\n    v125 = -v124;\n    if ( -v124 < 1 )\n      v125 = v124;\n    v126 = sub_452340((v88 + v87 * v125) >> v82, v124);\n    v81 = (char *)off_49F6D0;\n    *(_DWORD *)((char *)off_49F6D0 + 4 * v85 + v217 + 13112) = *(_DWORD *)((char *)&xmmword_48A200 + 4 * v85 + v86)\n                                                             * v126 << v216;\n    v80 = v84 + 1;\n  }\n  while ( v80 );\n  *(_DWORD *)(v204 + 4LL * (signed int)v199) = 0;\n  v127 = *((_DWORD *)v81 + 3310);\n  v128 = *((_DWORD *)v81 + 3326);\n  v129 = *((_DWORD *)v81 + 3278);\n  v130 = *((_DWORD *)v81 + 3279);\n  v131 = (*((_DWORD *)v81 + 3294) >> 1) - v128;\n  v132 = *((_DWORD *)v81 + 3294) + (v128 >> 1);\n  *((_DWORD *)v81 + 3278) = v132 + v127 + v129;\n  *((_DWORD *)v81 + 3326) = v127 + v129 - v132;\n  v133 = v129 - v127;\n  *((_DWORD *)v81 + 3294) = v131 + v133;\n  *((_DWORD *)v81 + 3310) = v133 - v131;\n  v134 = *((_DWORD *)v81 + 3311);\n  v135 = *((_DWORD *)v81 + 3327);\n  v136 = (*((_DWORD *)v81 + 3295) >> 1) - v135;\n  v137 = *((_DWORD *)v81 + 3295) + (v135 >> 1);\n  *((_DWORD *)v81 + 3279) = v137 + v134 + v130;\n  *((_DWORD *)v81 + 3327) = v134 + v130 - v137;\n  v138 = v130 - v134;\n  *((_DWORD *)v81 + 3295) = v136 + v138;\n  *((_DWORD *)v81 + 3311) = v138 - v136;\n  v139 = *((_DWORD *)v81 + 3280);\n  v140 = *((_DWORD *)v81 + 3312);\n  v141 = *((_DWORD *)v81 + 3328);\n  v142 = (*((_DWORD *)v81 + 3296) >> 1) - v141;\n  v143 = *((_DWORD *)v81 + 3296) + (v141 >> 1);\n  *((_DWORD *)v81 + 3280) = v143 + v140 + v139;\n  *((_DWORD *)v81 + 3328) = v140 + v139 - v143;\n  v144 = v139 - v140;\n  *((_DWORD *)v81 + 3296) = v142 + v144;\n  *((_DWORD *)v81 + 3312) = v144 - v142;\n  v145 = *((_DWORD *)v81 + 3281);\n  v146 = *((_DWORD *)v81 + 3313);\n  v147 = *((_DWORD *)v81 + 3329);\n  v148 = *((_DWORD *)v81 + 3281) - v146;\n  v149 = *((_DWORD *)v81 + 3297) >> 1;\n  v150 = *((_DWORD *)v81 + 3297) + (*((_DWORD *)v81 + 3329) >> 1);\n  *((_DWORD *)v81 + 3281) = v150 + v146 + v145;\n  v151 = v149 - v147;\n  *((_DWORD *)v81 + 3329) = v146 + v145 - v150;\n  *((_DWORD *)v81 + 3297) = v151 + v148;\n  *((_DWORD *)v81 + 3313) = v148 - v151;\n  v152 = _mm_shuffle_epi32(_mm_cvtsi32_si128(*((_DWORD *)v81 + 18171)), 0);\n  v153 = *(_OWORD *)(v81 + 13112);\n  v154 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128(DWORD2(v153) + (signed int)v153 + DWORD1(v153) + (SHIDWORD(v153) >> 1)),\n             _mm_cvtsi32_si128((SDWORD1(v153) >> 1) - HIDWORD(v153) + (signed int)v153 - DWORD2(v153))),\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128((signed int)v153 - DWORD2(v153) - ((SDWORD1(v153) >> 1) - HIDWORD(v153))),\n             _mm_cvtsi32_si128(DWORD2(v153) + (signed int)v153 - (DWORD1(v153) + (SHIDWORD(v153) >> 1)))));\n  v155 = _mm_load_si128((const __m128i *)&xmmword_4895C0);\n  v156 = _mm_load_si128((const __m128i *)&xmmword_4895D0);\n  v157 = _mm_andnot_si128(_mm_cmpgt_epi32(v155, v154), _mm_srai_epi32(_mm_add_epi32(v154, v156), 6u));\n  v158 = _mm_cmpgt_epi32(v157, v152);\n  _mm_storeu_si128((__m128i *)(v81 + 13112), _mm_or_si128(_mm_andnot_si128(v158, v157), _mm_and_si128(v152, v158)));\n  v159 = *(_OWORD *)(v81 + 13176);\n  v160 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128(DWORD2(v159) + (signed int)v159 + DWORD1(v159) + (SHIDWORD(v159) >> 1)),\n             _mm_cvtsi32_si128((SDWORD1(v159) >> 1) - HIDWORD(v159) + (signed int)v159 - DWORD2(v159))),\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128((signed int)v159 - DWORD2(v159) - ((SDWORD1(v159) >> 1) - HIDWORD(v159))),\n             _mm_cvtsi32_si128(DWORD2(v159) + (signed int)v159 - (DWORD1(v159) + (SHIDWORD(v159) >> 1)))));\n  v161 = _mm_andnot_si128(_mm_cmpgt_epi32(v155, v160), _mm_srai_epi32(_mm_add_epi32(v160, v156), 6u));\n  v162 = _mm_cmpgt_epi32(v161, v152);\n  _mm_storeu_si128((__m128i *)(v81 + 13176), _mm_or_si128(_mm_andnot_si128(v162, v161), _mm_and_si128(v152, v162)));\n  v163 = *(_OWORD *)(v81 + 13240);\n  v164 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128(DWORD2(v163) + (signed int)v163 + DWORD1(v163) + (SHIDWORD(v163) >> 1)),\n             _mm_cvtsi32_si128((SDWORD1(v163) >> 1) - HIDWORD(v163) + (signed int)v163 - DWORD2(v163))),\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128((signed int)v163 - DWORD2(v163) - ((SDWORD1(v163) >> 1) - HIDWORD(v163))),\n             _mm_cvtsi32_si128(DWORD2(v163) + (signed int)v163 - (DWORD1(v163) + (SHIDWORD(v163) >> 1)))));\n  v165 = _mm_andnot_si128(_mm_cmpgt_epi32(v155, v164), _mm_srai_epi32(_mm_add_epi32(v164, v156), 6u));\n  v166 = _mm_cmpgt_epi32(v165, v152);\n  _mm_storeu_si128((__m128i *)(v81 + 13240), _mm_or_si128(_mm_andnot_si128(v166, v165), _mm_and_si128(v152, v166)));\n  v167 = *(_OWORD *)(v81 + 13304);\n  v168 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128(DWORD2(v167) + (signed int)v167 + DWORD1(v167) + (SHIDWORD(v167) >> 1)),\n             _mm_cvtsi32_si128((SDWORD1(v167) >> 1) - HIDWORD(v167) + (signed int)v167 - DWORD2(v167))),\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128((signed int)v167 - DWORD2(v167) - ((SDWORD1(v167) >> 1) - HIDWORD(v167))),\n             _mm_cvtsi32_si128(DWORD2(v167) + (signed int)v167 - (DWORD1(v167) + (SHIDWORD(v167) >> 1)))));\n  v169 = _mm_andnot_si128(_mm_cmpgt_epi32(v155, v168), _mm_srai_epi32(_mm_add_epi32(v156, v168), 6u));\n  v170 = _mm_cmpgt_epi32(v169, v152);\n  _mm_storeu_si128((__m128i *)(v81 + 13304), _mm_or_si128(_mm_andnot_si128(v170, v169), _mm_and_si128(v152, v170)));\n  v171 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v172 = *((_DWORD *)v81 + 38);\n  v173 = *((_DWORD *)v81 + 39);\n  v174 = v209;\n  v175 = *(_QWORD *)(v171 + 8LL * (v173 + (signed int)v209));\n  v176 = v208;\n  v177 = v172 + (signed int)v208;\n  *(_WORD *)(v175 + 2 * v177) = *((_WORD *)v81 + 6556);\n  v178 = v172 + v176 + 1;\n  *(_WORD *)(v175 + 2 * v178) = *((_WORD *)v81 + 6588);\n  v179 = v172 + v176 + 2;\n  *(_WORD *)(v175 + 2 * v179) = *((_WORD *)v81 + 6620);\n  v180 = v172 + v176 + 3;\n  *(_WORD *)(v175 + 2 * v180) = *((_WORD *)v81 + 6652);\n  v181 = *(_QWORD *)(v171 + 8LL * (v173 + v174 + 1));\n  *(_WORD *)(v181 + 2 * v177) = *((_WORD *)v81 + 6558);\n  *(_WORD *)(v181 + 2 * v178) = *((_WORD *)v81 + 6590);\n  *(_WORD *)(v181 + 2 * v179) = *((_WORD *)v81 + 6622);\n  *(_WORD *)(v181 + 2 * v180) = *((_WORD *)v81 + 6654);\n  v182 = *(_QWORD *)(v171 + 8LL * (v173 + v174 + 2));\n  *(_WORD *)(v182 + 2 * v177) = *((_WORD *)v81 + 6560);\n  *(_WORD *)(v182 + 2 * v178) = *((_WORD *)v81 + 6592);\n  *(_WORD *)(v182 + 2 * v179) = *((_WORD *)v81 + 6624);\n  *(_WORD *)(v182 + 2 * v180) = *((_WORD *)v81 + 6656);\n  v183 = *(_QWORD *)(v171 + 8LL * (v173 + v174 + 3));\n  *(_WORD *)(v183 + 2 * v177) = *((_WORD *)v81 + 6562);\n  *(_WORD *)(v183 + 2 * v178) = *((_WORD *)v81 + 6594);\n  *(_WORD *)(v183 + 2 * v179) = *((_WORD *)v81 + 6626);\n  *(_WORD *)(v183 + 2 * v180) = *((_WORD *)v81 + 6658);\n  return v186;\n}\n", 
            "funcStartAddr": "0x407ec0L", 
            "funcEndAddr": "0x408e2cL", 
            "funcName": "sub_407EC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408E30(__int64 a1, unsigned int a2)\n{\n  _DWORD *v2; // r14\n  __int64 v3; // rax\n  __int64 v4; // rbp\n  __int64 v5; // rcx\n  __int64 *v6; // rax\n  signed __int64 v7; // r12\n  int v8; // ebx\n  int v9; // edx\n  signed __int64 v10; // rbx\n  signed __int64 v11; // rdx\n  char v12; // r8\n  __int64 v13; // rax\n  signed int v14; // ebp\n  unsigned __int8 v15; // r8\n  unsigned __int8 v16; // r9\n  signed int v17; // edi\n  signed __int64 v18; // rax\n  int v19; // ecx\n  int v20; // ecx\n  int v21; // ecx\n  int v22; // ecx\n  int v23; // ecx\n  int v24; // ecx\n  int v25; // ecx\n  int v26; // ecx\n  signed __int64 v27; // r11\n  unsigned __int64 v28; // r10\n  __m128i *v29; // rdi\n  unsigned __int64 v30; // r13\n  __m128i v31; // xmm0\n  __m128i v32; // xmm1\n  __m128i v33; // xmm2\n  __m128i v34; // xmm3\n  __m128i v35; // xmm4\n  __m128i v36; // xmm0\n  __m128i v37; // xmm3\n  __m128i v38; // xmm1\n  int v39; // ecx\n  int v40; // edx\n  int v41; // esi\n  int v42; // ebx\n  int v43; // eax\n  int v44; // edx\n  int v45; // esi\n  __int32 v46; // eax\n  __int32 v47; // ecx\n  __int32 v48; // edx\n  int v49; // esi\n  int v50; // ecx\n  __int32 v51; // eax\n  int v52; // ebx\n  int v53; // edx\n  __int32 v54; // eax\n  __int32 v55; // ecx\n  __int32 v56; // edx\n  int v57; // esi\n  int v58; // ecx\n  __int32 v59; // eax\n  int v60; // ebx\n  int v61; // edx\n  __int32 v62; // eax\n  __int32 v63; // esi\n  __int32 v64; // edx\n  int v65; // er15\n  __int32 v66; // ebp\n  int v67; // ecx\n  int v68; // esi\n  int v69; // edx\n  int *v70; // r11\n  unsigned __int64 v71; // r10\n  __m128i *v72; // rdi\n  unsigned __int64 v73; // r15\n  __m128i v74; // xmm0\n  __m128i v75; // xmm1\n  __m128i v76; // xmm2\n  __m128i v77; // xmm3\n  __m128i v78; // xmm4\n  __m128i v79; // xmm0\n  __m128i v80; // xmm3\n  __m128i v81; // xmm1\n  int v82; // er13\n  int v83; // edx\n  int v84; // esi\n  int v85; // ebx\n  int v86; // eax\n  int v87; // edx\n  int v88; // esi\n  __int32 v89; // eax\n  __int32 v90; // ecx\n  __int32 v91; // edx\n  int v92; // esi\n  int v93; // ecx\n  __int32 v94; // eax\n  int v95; // ebx\n  int v96; // edx\n  __int32 v97; // eax\n  __int32 v98; // ecx\n  __int32 v99; // edx\n  int v100; // esi\n  int v101; // ecx\n  __int32 v102; // eax\n  int v103; // ebx\n  int v104; // edx\n  __int32 v105; // eax\n  __int32 v106; // esi\n  __int32 v107; // edx\n  int v108; // er13\n  __int32 v109; // ebp\n  int v110; // ecx\n  int v111; // esi\n  int v112; // edx\n  int v113; // eax\n  int v114; // ecx\n  int v115; // edx\n  int v116; // esi\n  int v117; // edi\n  int v118; // er13\n  int v119; // ecx\n  unsigned __int64 v120; // rsi\n  int v121; // er14\n  char v122; // bl\n  unsigned __int64 v123; // rdx\n  _QWORD *v124; // rcx\n  int v125; // er12\n  int v126; // ebp\n  int v127; // eax\n  int v128; // eax\n  int v129; // er15\n  int v130; // ebp\n  int v131; // ebp\n  int v132; // er13\n  int v133; // ebx\n  int v134; // ebx\n  int v135; // eax\n  char v136; // r12\n  int v137; // er14\n  int v138; // eax\n  double v139; // xmm0_8\n  int v140; // eax\n  int v141; // ecx\n  bool v142; // cl\n  signed int v143; // eax\n  unsigned int v144; // ebx\n  int v145; // esi\n  signed int v146; // eax\n  int v147; // eax\n  __int64 v148; // rdx\n  int v149; // eax\n  int v150; // esi\n  int v151; // edi\n  int v152; // eax\n  __int64 v153; // rcx\n  int v154; // eax\n  int v155; // ebp\n  int v156; // edi\n  int v157; // ecx\n  int v158; // edx\n  _DWORD *v159; // rsi\n  int v160; // eax\n  double v161; // rdi\n  unsigned __int64 v162; // r15\n  __int64 v163; // rcx\n  __int64 *v164; // rax\n  signed int v165; // ebp\n  signed __int64 v166; // rbx\n  int v167; // esi\n  __int64 v168; // rbx\n  __int64 v169; // r12\n  int v170; // er13\n  char *v171; // rax\n  __int64 v172; // r13\n  __int64 v173; // rax\n  __int64 v174; // r14\n  __int64 v175; // rbx\n  __int64 v176; // r12\n  int *v177; // rax\n  int v178; // er15\n  int v179; // eax\n  signed __int64 v180; // r13\n  __int64 v181; // r14\n  int v182; // ebp\n  int v183; // eax\n  int v184; // esi\n  int v185; // ebp\n  int v186; // eax\n  int v187; // ebp\n  int v188; // er13\n  int v189; // er13\n  int v190; // ebx\n  int v191; // ebx\n  int v192; // eax\n  int v193; // er15\n  int v194; // er12\n  int v195; // eax\n  __int64 v196; // rax\n  double v197; // xmm0_8\n  int v198; // eax\n  int v199; // ecx\n  bool v200; // al\n  unsigned int v201; // er15\n  bool v202; // zf\n  int v203; // eax\n  int v204; // eax\n  __int64 v205; // rdx\n  int v206; // eax\n  int v207; // esi\n  int v208; // edi\n  int v209; // eax\n  __int64 v210; // r15\n  __int64 v211; // rcx\n  __int64 v212; // rdx\n  signed __int64 v213; // r13\n  __int64 v214; // rax\n  __int64 v215; // rcx\n  __int64 v216; // rax\n  signed __int64 v217; // r11\n  __int64 v218; // r12\n  int v219; // ebp\n  signed __int64 v220; // r8\n  signed __int64 v221; // r9\n  int v222; // er10\n  signed __int64 v223; // r14\n  int v224; // edi\n  int v225; // ebp\n  __int64 v226; // rcx\n  int v227; // er10\n  int v228; // ebp\n  int v229; // edi\n  int v230; // ebp\n  __int64 v231; // rcx\n  int v232; // er10\n  int v233; // ebp\n  int v234; // edi\n  int v235; // ebp\n  unsigned int v236; // ebp\n  signed int v237; // er10\n  unsigned int v238; // edx\n  unsigned int v239; // edi\n  signed __int64 v240; // rcx\n  int v241; // ebp\n  int v242; // er9\n  int v243; // er11\n  int v244; // ebx\n  int v245; // edx\n  int v246; // edi\n  int v247; // eax\n  int v248; // ebp\n  int v249; // ebx\n  int v250; // ebx\n  int v251; // ebp\n  int v252; // ebp\n  int v253; // edx\n  int v254; // eax\n  __int64 result; // rax\n  __int64 v256; // rbx\n  signed __int64 v257; // rcx\n  signed __int64 v258; // rdx\n  __int64 v259; // rdi\n  int v260; // [rsp+Ch] [rbp-27Ch]\n  __int64 v261; // [rsp+10h] [rbp-278h]\n  int v262; // [rsp+1Ch] [rbp-26Ch]\n  __int64 v263; // [rsp+20h] [rbp-268h]\n  double v264; // [rsp+28h] [rbp-260h]\n  __int128 v265; // [rsp+30h] [rbp-258h]\n  __int64 v266; // [rsp+40h] [rbp-248h]\n  __int64 v267; // [rsp+48h] [rbp-240h]\n  __int64 v268; // [rsp+50h] [rbp-238h]\n  __int64 v269; // [rsp+58h] [rbp-230h]\n  __int64 v270; // [rsp+60h] [rbp-228h]\n  unsigned int v271; // [rsp+68h] [rbp-220h]\n  char v272; // [rsp+6Ch] [rbp-21Ch]\n  double v273; // [rsp+70h] [rbp-218h]\n  double v274; // [rsp+78h] [rbp-210h]\n  unsigned __int64 v275; // [rsp+80h] [rbp-208h]\n  double v276; // [rsp+88h] [rbp-200h]\n  unsigned __int64 v277; // [rsp+90h] [rbp-1F8h]\n  __int64 v278; // [rsp+98h] [rbp-1F0h]\n  __int64 v279; // [rsp+A0h] [rbp-1E8h]\n  int v280; // [rsp+ACh] [rbp-1DCh]\n  int v281; // [rsp+B0h] [rbp-1D8h]\n  int v282; // [rsp+B4h] [rbp-1D4h]\n  int v283; // [rsp+B8h] [rbp-1D0h]\n  int v284; // [rsp+BCh] [rbp-1CCh]\n  __int64 v285; // [rsp+C0h] [rbp-1C8h]\n  __int64 v286; // [rsp+C8h] [rbp-1C0h]\n  __int64 v287; // [rsp+D0h] [rbp-1B8h]\n  __int64 v288; // [rsp+D8h] [rbp-1B0h]\n  __int64 v289; // [rsp+E0h] [rbp-1A8h]\n  double v290; // [rsp+E8h] [rbp-1A0h]\n  unsigned __int64 v291; // [rsp+F0h] [rbp-198h]\n  int v292; // [rsp+FCh] [rbp-18Ch]\n  _QWORD *v293; // [rsp+100h] [rbp-188h]\n  __int64 v294; // [rsp+108h] [rbp-180h]\n  int v295; // [rsp+110h] [rbp-178h]\n  int v296; // [rsp+114h] [rbp-174h]\n  int v297; // [rsp+118h] [rbp-170h]\n  int v298; // [rsp+11Ch] [rbp-16Ch]\n  int v299[2]; // [rsp+120h] [rbp-168h]\n  __int64 v300; // [rsp+128h] [rbp-160h]\n  __int64 v301; // [rsp+130h] [rbp-158h]\n  __int64 v302; // [rsp+138h] [rbp-150h]\n  unsigned __int64 v303; // [rsp+140h] [rbp-148h]\n  unsigned __int64 v304; // [rsp+148h] [rbp-140h]\n  int v305[4]; // [rsp+150h] [rbp-138h]\n  int v306; // [rsp+160h] [rbp-128h]\n  int v307[8]; // [rsp+170h] [rbp-118h]\n  int v308[8]; // [rsp+190h] [rbp-F8h]\n  int v309[8]; // [rsp+1B0h] [rbp-D8h]\n  int v310[4]; // [rsp+1D0h] [rbp-B8h]\n  int v311; // [rsp+1E0h] [rbp-A8h]\n  int v312[8]; // [rsp+1F0h] [rbp-98h]\n  int v313[8]; // [rsp+210h] [rbp-78h]\n  int v314[8]; // [rsp+230h] [rbp-58h]\n  int v315[14]; // [rsp+250h] [rbp-38h]\n\n  v271 = a2;\n  v2 = off_49F6D0;\n  v3 = *((_QWORD *)off_49F6D0 + 1768);\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = *((signed int *)off_49F6D0 + 3);\n  v285 = a1;\n  v300 = (signed int)a1;\n  v6 = *(__int64 **)(v3 + 8LL * (signed int)a1 + 8);\n  v273 = *(double *)v6;\n  v290 = *((double *)v6 + 1);\n  v7 = 632 * v5;\n  v8 = *(_DWORD *)(v4 + 632 * v5 + 12);\n  v274 = exp2((double)(v8 - 12) / 3.0) * 0.85;\n  v9 = *(_DWORD *)(qword_4F9DB8 + 208);\n  v10 = (unsigned int)(v9 + v8);\n  if ( (signed int)v10 >= 52 )\n    v10 = 51LL;\n  if ( (signed int)v10 < 0 )\n    v10 = 0LL;\n  v261 = v4;\n  v11 = (unsigned int)(*(_DWORD *)(v4 + v7 + 16) + v9);\n  if ( (signed int)v11 >= 52 )\n    v11 = 51LL;\n  if ( (signed int)v11 < 0 )\n    v11 = 0LL;\n  v12 = byte_489C50[v10];\n  v13 = (unsigned __int8)byte_489C50[v10] / 6u;\n  v14 = 0x8000 << (unsigned __int8)byte_489C50[v10] / 6u;\n  v267 = v13;\n  v15 = v12 - 6 * v13;\n  v16 = (unsigned __int8)byte_489C50[v11] % 6u;\n  v287 = (unsigned __int8)byte_489C50[v11] / 6u;\n  v17 = 0x8000 << v287;\n  v18 = -8LL;\n  do\n  {\n    v19 = *((unsigned __int16 *)v2 + v18 + 6308);\n    v2[v18 + 3286] += v19;\n    v307[v18] = v19;\n    v20 = *((unsigned __int16 *)v2 + v18 + 6324);\n    v2[v18 + 3302] += v20;\n    v308[v18] = v20;\n    v21 = *((unsigned __int16 *)v2 + v18 + 6340);\n    v2[v18 + 3318] += v21;\n    v309[v18] = v21;\n    v22 = *((unsigned __int16 *)v2 + v18 + 6356);\n    v2[v18 + 3334] += v22;\n    v310[v18] = v22;\n    v23 = *((unsigned __int16 *)v2 + v18 + 6372);\n    v2[v18 + 3350] += v23;\n    v312[v18] = v23;\n    v24 = *((unsigned __int16 *)v2 + v18 + 6388);\n    v2[v18 + 3366] += v24;\n    v313[v18] = v24;\n    v25 = *((unsigned __int16 *)v2 + v18 + 6404);\n    v2[v18 + 3382] += v25;\n    v314[v18] = v25;\n    v26 = *((unsigned __int16 *)v2 + v18 + 6420);\n    v2[v18 + 3398] += v26;\n    v315[v18++] = v26;\n  }\n  while ( v18 );\n  v274 = v274 * 4.0;\n  v292 = v267 + 15;\n  v294 = (unsigned int)(((unsigned __int64)(715827883LL * v14) >> 63) + ((unsigned __int64)(715827883LL * v14) >> 32));\n  LODWORD(v288) = v287 + 15;\n  v268 = v17 / 2;\n  v27 = (signed __int64)(v2 + 3278);\n  v28 = 0LL;\n  do\n  {\n    v29 = (__m128i *)v27;\n    v30 = 0LL;\n    do\n    {\n      v31 = _mm_loadu_si128(v29);\n      v32 = _mm_loadu_si128(v29 + 4);\n      v33 = _mm_loadu_si128(v29 + 8);\n      v34 = _mm_loadu_si128(v29 + 12);\n      v35 = _mm_add_epi32(v34, v31);\n      v36 = _mm_sub_epi32(v31, v34);\n      v37 = _mm_add_epi32(v33, v32);\n      v38 = _mm_sub_epi32(v32, v33);\n      _mm_storeu_si128(v29, _mm_add_epi32(v37, v35));\n      _mm_storeu_si128(v29 + 8, _mm_sub_epi32(v35, v37));\n      _mm_storeu_si128(v29 + 4, _mm_add_epi32(_mm_add_epi32(v36, v36), v38));\n      _mm_storeu_si128(v29 + 12, _mm_sub_epi32(v36, _mm_add_epi32(v38, v38)));\n      v39 = HIDWORD(v29->m128i_i64[1]);\n      v40 = v29->m128i_i64[0];\n      v41 = HIDWORD(v29->m128i_i64[0]);\n      v42 = v39 + LODWORD(v29->m128i_i64[0]);\n      v43 = v29->m128i_i64[1];\n      LODWORD(v29->m128i_i64[0]) = v42 + v43 + v41;\n      v44 = v40 - v39;\n      LODWORD(v29->m128i_i64[1]) = v42 - (v43 + v41);\n      v45 = v41 - v43;\n      HIDWORD(v29->m128i_i64[0]) = v45 + 2 * v44;\n      HIDWORD(v29->m128i_i64[1]) = v44 - 2 * v45;\n      v46 = v29[4].m128i_i32[3];\n      v47 = v29[4].m128i_i32[0];\n      v48 = v29[4].m128i_i32[1];\n      v49 = v46 + v47;\n      v50 = v47 - v46;\n      v51 = v29[4].m128i_i32[2];\n      v52 = v51 + v48;\n      v53 = v48 - v51;\n      v29[4].m128i_i32[0] = v52 + v49;\n      v29[4].m128i_i32[2] = v49 - v52;\n      v29[4].m128i_i32[1] = v53 + 2 * v50;\n      v29[4].m128i_i32[3] = v50 - 2 * v53;\n      v54 = v29[8].m128i_i32[3];\n      v55 = v29[8].m128i_i32[0];\n      v56 = v29[8].m128i_i32[1];\n      v57 = v54 + v55;\n      v58 = v55 - v54;\n      v59 = v29[8].m128i_i32[2];\n      v60 = v59 + v56;\n      v29[8].m128i_i32[0] = v59 + v56 + v57;\n      v61 = v56 - v59;\n      v29[8].m128i_i32[2] = v57 - v60;\n      v29[8].m128i_i32[1] = v61 + 2 * v58;\n      v29[8].m128i_i32[3] = v58 - 2 * v61;\n      v62 = v29[12].m128i_i32[3];\n      v63 = v29[12].m128i_i32[0];\n      v64 = v29[12].m128i_i32[1];\n      v65 = v62 + v63;\n      v66 = v29[12].m128i_i32[2];\n      v67 = v64 + v66;\n      v29[12].m128i_i32[0] = v64 + v66 + v62 + v63;\n      v68 = v63 - v62;\n      v29[12].m128i_i32[2] = v65 - (v64 + v66);\n      v69 = v64 - v66;\n      v29[12].m128i_i32[1] = v69 + 2 * v68;\n      v29[12].m128i_i32[3] = v68 - 2 * v69;\n      v30 += 4LL;\n      v29 += 16;\n    }\n    while ( v30 < 5 );\n    v28 += 4LL;\n    v27 += 16LL;\n  }\n  while ( v28 < 5 );\n  *(_QWORD *)&v265 = __PAIR__(v67, v65);\n  *((_QWORD *)&v265 + 1) = __PAIR__(v68, v69);\n  v70 = v305;\n  v71 = 0LL;\n  do\n  {\n    v72 = (__m128i *)v70;\n    v73 = 0LL;\n    do\n    {\n      v74 = _mm_load_si128(v72);\n      v75 = _mm_load_si128(v72 + 2);\n      v76 = _mm_load_si128(v72 + 4);\n      v77 = _mm_load_si128(v72 + 6);\n      v78 = _mm_add_epi32(v77, v74);\n      v79 = _mm_sub_epi32(v74, v77);\n      v80 = _mm_add_epi32(v76, v75);\n      v81 = _mm_sub_epi32(v75, v76);\n      _mm_store_si128(v72, _mm_add_epi32(v80, v78));\n      _mm_store_si128(v72 + 4, _mm_sub_epi32(v78, v80));\n      _mm_store_si128(v72 + 2, _mm_add_epi32(_mm_add_epi32(v79, v79), v81));\n      _mm_store_si128(v72 + 6, _mm_sub_epi32(v79, _mm_add_epi32(v81, v81)));\n      v82 = HIDWORD(v72->m128i_i64[1]);\n      v83 = v72->m128i_i64[0];\n      v84 = HIDWORD(v72->m128i_i64[0]);\n      v85 = v82 + LODWORD(v72->m128i_i64[0]);\n      v86 = v72->m128i_i64[1];\n      LODWORD(v72->m128i_i64[0]) = v85 + v86 + v84;\n      v87 = v83 - v82;\n      LODWORD(v72->m128i_i64[1]) = v85 - (v86 + v84);\n      v88 = v84 - v86;\n      HIDWORD(v72->m128i_i64[0]) = v88 + 2 * v87;\n      HIDWORD(v72->m128i_i64[1]) = v87 - 2 * v88;\n      v89 = v72[2].m128i_i32[3];\n      v90 = v72[2].m128i_i32[0];\n      v91 = v72[2].m128i_i32[1];\n      v92 = v89 + v90;\n      v93 = v90 - v89;\n      v94 = v72[2].m128i_i32[2];\n      v95 = v94 + v91;\n      v96 = v91 - v94;\n      v72[2].m128i_i32[0] = v95 + v92;\n      v72[2].m128i_i32[2] = v92 - v95;\n      v72[2].m128i_i32[1] = v96 + 2 * v93;\n      v72[2].m128i_i32[3] = v93 - 2 * v96;\n      v97 = v72[4].m128i_i32[3];\n      v98 = v72[4].m128i_i32[0];\n      v99 = v72[4].m128i_i32[1];\n      v100 = v97 + v98;\n      v101 = v98 - v97;\n      v102 = v72[4].m128i_i32[2];\n      v103 = v102 + v99;\n      v72[4].m128i_i32[0] = v102 + v99 + v100;\n      v104 = v99 - v102;\n      v72[4].m128i_i32[2] = v100 - v103;\n      v72[4].m128i_i32[1] = v104 + 2 * v101;\n      v72[4].m128i_i32[3] = v101 - 2 * v104;\n      v105 = v72[6].m128i_i32[3];\n      v106 = v72[6].m128i_i32[0];\n      v107 = v72[6].m128i_i32[1];\n      v108 = v105 + v106;\n      v109 = v72[6].m128i_i32[2];\n      v110 = v107 + v109;\n      v72[6].m128i_i32[0] = v107 + v109 + v105 + v106;\n      v111 = v106 - v105;\n      v72[6].m128i_i32[2] = v108 - (v107 + v109);\n      v112 = v107 - v109;\n      v72[6].m128i_i32[1] = v112 + 2 * v111;\n      v72[6].m128i_i32[3] = v111 - 2 * v112;\n      v73 += 4LL;\n      v72 += 8;\n    }\n    while ( v73 < 5 );\n    v71 += 4LL;\n    v70 += 4;\n  }\n  while ( v71 < 5 );\n  *(_QWORD *)&v265 = __PAIR__(v110, v108);\n  *((_QWORD *)&v265 + 1) = __PAIR__(v111, v112);\n  v113 = v2[3342];\n  v114 = v2[3278];\n  v115 = v2[3282];\n  v116 = v113 + v114;\n  v117 = v2[3346];\n  v118 = v117 + v113 + v114 + v115;\n  v281 = v117 + v113 + v114 + v115;\n  v119 = v114 - v113;\n  v282 = v119 + v115 - v117;\n  v283 = v116 - v115 - v117;\n  v284 = v117 + v119 - v115;\n  v295 = v311 + v310[0] + v305[0] + v306;\n  v296 = v305[0] - v310[0] + v306 - v311;\n  v297 = v310[0] + v305[0] - v306 - v311;\n  v298 = v311 + v305[0] - v310[0] - v306;\n  v120 = (unsigned __int64)v16 << 6;\n  v121 = 2 * v268;\n  v122 = v287 + 16;\n  v123 = (unsigned __int64)v15 << 6;\n  LODWORD(v291) = 2 * v294;\n  LODWORD(v279) = v267 + 16;\n  v303 = (unsigned __int64)v15 << 6;\n  v269 = (__int64)&xmmword_48A200 + v123;\n  v280 = 4 * v285;\n  v286 = 983040 << 4 * v285;\n  v124 = (_QWORD *)(v7 + v261 + 464);\n  v125 = v311 + v310[0] + v305[0] + v306;\n  v293 = v124;\n  v304 = (unsigned __int64)v16 << 6;\n  v126 = *(_DWORD *)((char *)&xmmword_48A080 + v120);\n  LODWORD(v278) = *(_DWORD *)((char *)&xmmword_48A080 + v123);\n  v262 = *(_DWORD *)((char *)&xmmword_48A200 + v120);\n  LODWORD(v261) = -1;\n  v263 = 0LL;\n  v270 = -3LL;\n  LODWORD(v289) = 2 * v268;\n  LODWORD(v275) = v287 + 16;\n  LODWORD(v266) = v126;\n  while ( 1 )\n  {\n    LODWORD(v261) = v261 + 1;\n    v127 = -v125;\n    if ( -v125 < 1 )\n      v127 = v125;\n    v128 = sub_452340(((v121 + v126 * v127) >> v122 << v122) / v126, v125);\n    v129 = v118 - v128;\n    v130 = v128 - v118;\n    if ( v128 - v118 < 1 )\n      v130 = v118 - v128;\n    v131 = ((signed int)v291 + (signed int)v278 * v130) >> v279;\n    v132 = v118 - v125;\n    v133 = -v132;\n    if ( -v132 < 1 )\n      v133 = v132;\n    v134 = ((signed int)v291 + (signed int)v278 * v133) >> v279;\n    if ( v134 && v131 != v134 && v131 )\n    {\n      LODWORD(v277) = v125;\n      v135 = sub_452340(v131, v129);\n      LODWORD(v276) = *(_DWORD *)v269;\n      v136 = v267;\n      v264 = (double)(v132 - (16 * LODWORD(v276) * v135 << v267 >> 5));\n      v137 = v261;\n      sub_480050(v131, v261, &v260, &v272);\n      v264 = (double)v260 * v274 + v264 * v264;\n      v138 = sub_452340(v134, v132);\n      v276 = (double)(v132 - (16 * LODWORD(v276) * v138 << v136 >> 5));\n      sub_480050(v134, v137, &v260, &v272);\n      v139 = (double)v260 * v274 + v276 * v276;\n      if ( v264 == v139 )\n      {\n        v140 = -v131;\n        if ( -v131 < 1 )\n          v140 = v131;\n        v141 = -v134;\n        if ( -v134 < 1 )\n          v141 = v134;\n        v142 = v140 < v141;\n      }\n      else\n      {\n        v142 = v139 > v264;\n      }\n      v143 = v131;\n      v121 = v289;\n      v125 = v277;\n      if ( !v142 )\n        v143 = v134;\n      if ( v143 != v131 )\n        v129 = v132;\n    }\n    else\n    {\n      if ( v131 != v134 && v131 )\n      {\n        v131 = v134;\n        v129 = v132;\n      }\n      v143 = v131;\n    }\n    if ( (v126 = v266, !*((_DWORD *)dest + 589)) && v143 >= 2064 && (v144 = 2063, *((_DWORD *)off_49F6D0 + 10) < 4)\n      || (v144 = v143) != 0 )\n    {\n      *v293 |= v286;\n      v146 = v271;\n      if ( (signed int)v271 <= 0 )\n        v146 = 1;\n      v271 = v146;\n      v147 = sub_452340(v144, v129);\n      v148 = (signed int)v263;\n      *(_DWORD *)(*(_QWORD *)&v273 + 4 * v148) = v147;\n      *(_DWORD *)(*(_QWORD *)&v290 + 4 * v148) = v261;\n      v263 = (unsigned int)(v148 + 1);\n      v149 = sub_452340(v144, v129);\n      v145 = 16 * *(_DWORD *)v269 * v149 << v267 >> 5;\n      LODWORD(v261) = -1;\n    }\n    else\n    {\n      v145 = 0;\n    }\n    v150 = v125 + v145;\n    v151 = -v150;\n    if ( -v150 < 1 )\n      v151 = v150;\n    v122 = v275;\n    v152 = sub_452340((v121 + v126 * v151) >> v275, v150);\n    v153 = v270;\n    *(&v284 + v270) = v262 * v152 << v287;\n    if ( !v153 )\n      break;\n    v125 = v299[v153];\n    v118 = *((_DWORD *)&v285 + v153);\n    v270 = v153 + 1;\n  }\n  *(_DWORD *)(*(_QWORD *)&v273 + 4LL * (signed int)v263) = 0;\n  v154 = v281;\n  v155 = v282;\n  v156 = v282 + v281;\n  v157 = v283;\n  v158 = v284;\n  v159 = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 3278) = (v284 + v282 + v281 + v283) / 2;\n  v160 = v154 - v155;\n  v159[3342] = (v160 + v157 - v158) / 2;\n  v159[3282] = (v156 - v157 - v158) / 2;\n  v159[3346] = (v158 + v160 - v157) / 2;\n  v301 = (signed int)v285 + 4;\n  v280 += 16;\n  v161 = 0.0;\n  LODWORD(v264) = 0;\n  do\n  {\n    v302 = *(_QWORD *)&v161 >> 1;\n    v162 = 0LL;\n    v276 = v161;\n    do\n    {\n      v163 = v302 + (v162 >> 2);\n      v164 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)v159 + 1767) + 8 * v301) + 8 * v163);\n      v286 = *v164;\n      v289 = v164[1];\n      v285 = 1 << (v280 + v163);\n      v165 = -1;\n      v266 = 0LL;\n      v166 = -15LL;\n      v277 = v162;\n      do\n      {\n        if ( v159[18111] || dword_4FA108 && v159[18002] )\n          v171 = byte_489CB0;\n        else\n          v171 = byte_489C90;\n        v172 = (unsigned __int8)v171[2 * v166 + 32];\n        v279 = v166;\n        v173 = (unsigned __int8)v171[2 * v166 + 33];\n        LODWORD(v261) = v165 + 1;\n        v174 = (unsigned int)(v162 + v172);\n        v175 = (unsigned int)(LODWORD(v161) + v173);\n        v176 = v173;\n        v177 = &v305[8 * v174];\n        v178 = v177[v175];\n        v179 = -v177[v175];\n        if ( v179 < 1 )\n          v179 = v178;\n        v180 = 16 * v172;\n        v291 = v304 + v180;\n        v262 = *(_DWORD *)((char *)&xmmword_48A080 + 4 * v176 + v304 + v180);\n        v181 = v174 << 6;\n        v182 = *(_DWORD *)((char *)&v159[v175 + 3278] + v181);\n        v183 = sub_452340((((signed int)v268 + v262 * v179) >> v288 << v288) / v262, v178);\n        v184 = v182 - v183;\n        v185 = v183 - v182;\n        if ( v185 < 1 )\n          v185 = v184;\n        v269 = v180;\n        v275 = v303 + v180;\n        v186 = *(_DWORD *)((char *)&xmmword_48A080 + 4 * v176 + v303 + v180);\n        v187 = ((signed int)v294 + v186 * v185) >> v292;\n        v270 = v175;\n        v188 = *(_DWORD *)((char *)off_49F6D0 + 4 * v175 + v181 + 13112);\n        LODWORD(v263) = v178;\n        v189 = v188 - v178;\n        v190 = -v189;\n        if ( -v189 < 1 )\n          v190 = v189;\n        v191 = ((signed int)v294 + v186 * v190) >> v292;\n        v278 = v176;\n        if ( v191 && v187 && v187 != v191 )\n        {\n          LODWORD(v264) = v184;\n          v192 = sub_452340(v187, v184);\n          v193 = *(_DWORD *)((char *)&xmmword_48A200 + 4 * v176 + v275) * *(int *)((char *)&dword_48A380[v176] + v269);\n          v273 = (double)(v189 - (v193 * v192 << v267 >> 6));\n          sub_4800F0((__int64)&v272, &v260, &v272, v187, v261);\n          v273 = (double)v260 * v274 + v273 * v273;\n          v194 = *(_DWORD *)((char *)off_49F6D0 + 4 * v270 + v181 + 13112);\n          v195 = sub_452340(v191, v189);\n          v196 = (unsigned int)(v193 * v195 << v267 >> 6);\n          v290 = (double)(v194 - (signed int)v263 - (signed int)v196);\n          sub_4800F0(v196, &v260, &v272, v191, v261);\n          v197 = (double)v260 * v274 + v290 * v290;\n          if ( v273 == v197 )\n          {\n            v198 = -v187;\n            if ( -v187 < 1 )\n              v198 = v187;\n            v199 = -v191;\n            if ( -v191 < 1 )\n              v199 = v191;\n            v200 = v198 < v199;\n          }\n          else\n          {\n            v200 = v197 > v273;\n          }\n          v201 = v187;\n          v202 = v200 == 0;\n          v203 = LODWORD(v264);\n          if ( v202 )\n            v201 = v191;\n          if ( v201 != v187 )\n            v203 = v189;\n          v189 = v203;\n        }\n        else\n        {\n          if ( v187 == v191 )\n          {\n            v191 = v187;\n            v189 = v184;\n          }\n          else if ( !v187 )\n          {\n            v167 = 0;\n            v162 = v277;\n            v168 = v279;\n            v165 = v261;\n            v169 = v278;\n            v170 = v268;\n            goto LABEL_92;\n          }\n          v201 = v191;\n          if ( !v191 )\n          {\n            v167 = 0;\n            v170 = v268;\n            v162 = v277;\n            v168 = v279;\n            v165 = v261;\n            v169 = v278;\n            goto LABEL_92;\n          }\n        }\n        *v293 |= v285;\n        v204 = sub_452340(v201, v189);\n        v205 = (signed int)v266;\n        *(_DWORD *)(v286 + 4 * v205) = v204;\n        *(_DWORD *)(v289 + 4 * v205) = v261;\n        v266 = (unsigned int)(v205 + 1);\n        v206 = sub_452340(v201, v189);\n        v169 = v278;\n        v167 = *(int *)((char *)&dword_48A380[v278] + v269)\n             * *(_DWORD *)((char *)&xmmword_48A200 + 4 * v278 + v275)\n             * v206 << v267 >> 6;\n        v165 = -1;\n        LODWORD(v264) = 2;\n        v170 = v268;\n        v162 = v277;\n        v168 = v279;\nLABEL_92:\n        v207 = v263 + v167;\n        v208 = -v207;\n        if ( -v207 < 1 )\n          v208 = v207;\n        v209 = sub_452340((v170 + v262 * v208) >> v288, v207);\n        v159 = off_49F6D0;\n        *(_DWORD *)((char *)off_49F6D0 + 4 * v270 + v181 + 13112) = *(_DWORD *)((char *)&xmmword_48A200 + 4 * v169 + v291)\n                                                                  * v209 << v287;\n        v202 = v168 == -1;\n        v166 = v168 + 1;\n        v161 = v276;\n      }\n      while ( !v202 );\n      *(_DWORD *)(v286 + 4LL * (signed int)v266) = 0;\n      v162 += 4LL;\n    }\n    while ( v162 < 5 );\n    *(_QWORD *)&v161 += 4LL;\n  }\n  while ( *(_QWORD *)&v161 < 5uLL );\n  v210 = (__int64)(v159 + 3281);\n  v211 = 0LL;\n  v212 = 0LL;\n  do\n  {\n    v288 = v212;\n    v269 = v211 | 1;\n    v275 = v211 | 2;\n    v263 = v211;\n    v213 = v211 | 3;\n    v268 = v210;\n    v214 = 0LL;\n    v215 = 0LL;\n    do\n    {\n      v270 = v215;\n      v261 = v214;\n      v216 = v214 << 6;\n      v217 = (signed __int64)v159 + v216 + 13112;\n      v218 = v263;\n      v219 = *(_DWORD *)(v217 + 4 * v263);\n      v220 = (signed __int64)v159 + (v216 | 0x40) + 13112;\n      v221 = (signed __int64)v159 + (v216 | 0x80) + 13112;\n      v222 = *(_DWORD *)(v221 + 4 * v263);\n      v223 = (signed __int64)v159 + (v216 | 0xC0) + 13112;\n      LODWORD(v216) = *(_DWORD *)(v223 + 4 * v263);\n      v224 = (*(_DWORD *)(v220 + 4 * v263) >> 1) - v216;\n      LODWORD(v216) = *(_DWORD *)(v220 + 4 * v263) + ((signed int)v216 >> 1);\n      *(_DWORD *)(v217 + 4 * v263) = v216 + v222 + v219;\n      *(_DWORD *)(v223 + 4 * v218) = v222 + v219 - v216;\n      v225 = v219 - v222;\n      *(_DWORD *)(v220 + 4 * v218) = v224 + v225;\n      *(_DWORD *)(v221 + 4 * v218) = v225 - v224;\n      v226 = v269;\n      LODWORD(v216) = *(_DWORD *)(v217 + 4 * v269);\n      v227 = *(_DWORD *)(v221 + 4 * v269);\n      v228 = *(_DWORD *)(v223 + 4 * v269);\n      v229 = (*(_DWORD *)(v220 + 4 * v269) >> 1) - v228;\n      v230 = *(_DWORD *)(v220 + 4 * v269) + (v228 >> 1);\n      *(_DWORD *)(v217 + 4 * v269) = v227 + v216 + v230;\n      *(_DWORD *)(v223 + 4 * v226) = v227 + v216 - v230;\n      LODWORD(v216) = v216 - v227;\n      *(_DWORD *)(v220 + 4 * v226) = v229 + v216;\n      *(_DWORD *)(v221 + 4 * v226) = v216 - v229;\n      v231 = v275;\n      LODWORD(v216) = *(_DWORD *)(v217 + 4 * v275);\n      v232 = *(_DWORD *)(v221 + 4 * v275);\n      v233 = *(_DWORD *)(v223 + 4 * v275);\n      v234 = (*(_DWORD *)(v220 + 4 * v275) >> 1) - v233;\n      v235 = *(_DWORD *)(v220 + 4 * v275) + (v233 >> 1);\n      *(_DWORD *)(v217 + 4 * v275) = v232 + v216 + v235;\n      *(_DWORD *)(v223 + 4 * v231) = v232 + v216 - v235;\n      LODWORD(v216) = v216 - v232;\n      *(_DWORD *)(v220 + 4 * v231) = v234 + v216;\n      *(_DWORD *)(v221 + 4 * v231) = v216 - v234;\n      v236 = *(_DWORD *)(v217 + 4 * v213);\n      v237 = *(_DWORD *)(v220 + 4 * v213);\n      v238 = *(_DWORD *)(v221 + 4 * v213);\n      v239 = *(_DWORD *)(v223 + 4 * v213);\n      LODWORD(v231) = v237 + (*(_DWORD *)(v223 + 4 * v213) >> 1);\n      *(_DWORD *)(v217 + 4 * v213) = v231 + v238 + v236;\n      *(_DWORD *)(v223 + 4 * v213) = v238 + v236 - v231;\n      LODWORD(v231) = (v237 >> 1) - v239;\n      *(_DWORD *)(v220 + 4 * v213) = v231 + v236 - v238;\n      *(_DWORD *)(v221 + 4 * v213) = v236 - v238 - v231;\n      *(_QWORD *)&v265 = __PAIR__(v237, v236);\n      *((_QWORD *)&v265 + 1) = __PAIR__(v239, v238);\n      v240 = -256LL;\n      do\n      {\n        v265 = *(_OWORD *)(v210 + v240 + 244);\n        v241 = DWORD2(v265) + v265;\n        v242 = DWORD1(v265) + (SHIDWORD(v265) >> 1);\n        v243 = v159[18172];\n        v244 = 0;\n        if ( v242 + DWORD2(v265) + (signed int)v265 >= -32 )\n          v244 = (v242 + v241 + 32) >> 6;\n        if ( v243 > v244 )\n          v243 = v244;\n        v245 = v265 - DWORD2(v265);\n        v246 = (SDWORD1(v265) >> 1) - HIDWORD(v265);\n        *(_DWORD *)(v210 + v240 + 244) = v243;\n        v247 = v159[18172];\n        v248 = v241 - v242;\n        v249 = (v248 + 32) >> 6;\n        if ( v248 < -32 )\n          v249 = 0;\n        if ( v247 > v249 )\n          v247 = v249;\n        *(_DWORD *)(v210 + v240 + 256) = v247;\n        v250 = v159[18172];\n        v251 = 0;\n        if ( v246 + v245 >= -32 )\n          v251 = (v246 + v245 + 32) >> 6;\n        if ( v250 > v251 )\n          v250 = v251;\n        *(_DWORD *)(v210 + v240 + 248) = v250;\n        v252 = v159[18172];\n        v253 = v245 - v246;\n        v254 = (v253 + 32) >> 6;\n        if ( v253 < -32 )\n          v254 = 0;\n        if ( v252 > v254 )\n          v252 = v254;\n        *(_DWORD *)(v210 + v240 + 252) = v252;\n        v240 += 64LL;\n      }\n      while ( v240 );\n      v214 = v261 + 4;\n      v215 = v270 + 1;\n      v210 += 256LL;\n    }\n    while ( v270 != 1 );\n    v211 = v263 + 4;\n    v212 = v288 + 1;\n    v210 = v268 + 16;\n  }\n  while ( v288 != 1 );\n  result = v271;\n  if ( LODWORD(v264) == 2 )\n    result = LODWORD(v264);\n  v256 = (signed int)v159[40];\n  v257 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6464) + 8 * v300) + 8LL * (signed int)v159[41];\n  v258 = 9223372036854775800LL;\n  do\n  {\n    v259 = *(_QWORD *)(v257 + 2 * v258 + 64);\n    *(_WORD *)(v259 + 2 * v256) = v159[v258 + 3286];\n    *(_WORD *)(v259 + 2 * v256 + 2) = v159[v258 + 3302];\n    *(_WORD *)(v259 + 2 * v256 + 4) = v159[v258 + 3318];\n    *(_WORD *)(v259 + 2 * v256 + 6) = v159[v258 + 3334];\n    *(_WORD *)(v259 + 2 * v256 + 8) = v159[v258 + 3350];\n    *(_WORD *)(v259 + 2 * v256 + 10) = v159[v258 + 3366];\n    *(_WORD *)(v259 + 2 * v256 + 12) = v159[v258 + 3382];\n    *(_WORD *)(v259 + 2 * v256 + 14) = v159[v258 + 3398];\n    ++v258;\n  }\n  while ( v258 * 2 );\n  return result;\n}\n", 
            "funcStartAddr": "0x408e30L", 
            "funcEndAddr": "0x40a184L", 
            "funcName": "sub_408E30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A190(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  int v3; // er11\n  int v4; // er12\n  char v5; // r14\n  char *v6; // rcx\n  int v7; // er13\n  int v8; // edi\n  int v9; // er8\n  int v10; // eax\n  int v11; // er10\n  int v12; // ebx\n  int v13; // er9\n  int v14; // ST28_4\n  int v15; // ST18_4\n  int v16; // ST20_4\n  int v17; // er13\n  int v18; // eax\n  int v19; // edi\n  int v20; // ebp\n  int v21; // er13\n  int v22; // er8\n  int v23; // er10\n  int v24; // esi\n  int v25; // ebx\n  int v26; // er8\n  int v27; // er9\n  int v28; // er10\n  int v29; // eax\n  int v30; // esi\n  int v31; // ebx\n  int v32; // ST18_4\n  int v33; // ST28_4\n  int v34; // er11\n  int v35; // ST20_4\n  int v36; // er11\n  int v37; // eax\n  int v38; // ebp\n  int v39; // esi\n  int v40; // eax\n  int v41; // ebp\n  int v42; // edi\n  int v43; // eax\n  int v44; // er9\n  int v45; // er8\n  int v46; // er10\n  int v47; // er15\n  signed __int64 v48; // rbp\n  __int64 i; // rbx\n  int v50; // edi\n  int v51; // eax\n  int v52; // edi\n  int v53; // eax\n  int v54; // edi\n  int v55; // eax\n  int v56; // edi\n  int v57; // eax\n  char *v58; // rcx\n  int v59; // er8\n  int v60; // edi\n  int v61; // ebp\n  int v62; // eax\n  int v63; // esi\n  int v64; // edi\n  int v65; // ebp\n  int v66; // esi\n  int v67; // edi\n  int v68; // ebx\n  int v69; // edi\n  int v70; // eax\n  int v71; // eax\n  int v72; // esi\n  int v73; // edi\n  int v74; // ebx\n  int v75; // edi\n  int v76; // eax\n  int v77; // ebx\n  int v78; // er9\n  int v79; // er10\n  int v80; // eax\n  int v81; // edx\n  int v82; // esi\n  int v83; // edx\n  __m128i v84; // xmm0\n  __int128 v85; // ST00_16\n  __m128i v86; // xmm3\n  __m128i v87; // xmm1\n  __m128i v88; // xmm2\n  __m128i v89; // xmm4\n  __m128i v90; // xmm3\n  __int128 v91; // ST00_16\n  __m128i v92; // xmm5\n  __m128i v93; // xmm3\n  __m128i v94; // xmm4\n  __int128 v95; // ST00_16\n  __m128i v96; // xmm5\n  __m128i v97; // xmm3\n  __m128i v98; // xmm4\n  __int128 v99; // ST00_16\n  __m128i v100; // xmm5\n  __m128i v101; // xmm1\n  __m128i v102; // xmm2\n  __int64 v103; // r8\n  int v104; // ebx\n  int v105; // er9\n  int v106; // er10\n  __int64 v107; // rax\n  int v108; // edx\n  __int64 v109; // rsi\n  __int64 v110; // rdi\n  __int64 v111; // rbp\n  __int64 v112; // rbx\n  __int64 v113; // rax\n  __int64 v114; // rax\n  __int64 result; // rax\n  int v116; // [rsp+34h] [rbp-C4h]\n  int v117; // [rsp+38h] [rbp-C0h]\n  int v118; // [rsp+3Ch] [rbp-BCh]\n  int v119; // [rsp+40h] [rbp-B8h]\n  int v120; // [rsp+44h] [rbp-B4h]\n  int v121; // [rsp+48h] [rbp-B0h]\n  int v122; // [rsp+4Ch] [rbp-ACh]\n  int v123; // [rsp+50h] [rbp-A8h]\n  int v124; // [rsp+54h] [rbp-A4h]\n  int v125; // [rsp+58h] [rbp-A0h]\n  int v126; // [rsp+5Ch] [rbp-9Ch]\n  int v127; // [rsp+60h] [rbp-98h]\n  int v128; // [rsp+64h] [rbp-94h]\n  int v129; // [rsp+68h] [rbp-90h]\n  int v130; // [rsp+6Ch] [rbp-8Ch]\n  __int64 v131; // [rsp+78h] [rbp-80h]\n  __int64 v132; // [rsp+80h] [rbp-78h]\n  __int64 v133; // [rsp+88h] [rbp-70h]\n  __int64 v134; // [rsp+90h] [rbp-68h]\n  __int64 v135; // [rsp+98h] [rbp-60h]\n  __int64 v136; // [rsp+A0h] [rbp-58h]\n  __int64 v137; // [rsp+A8h] [rbp-50h]\n  __int64 v138; // [rsp+B0h] [rbp-48h]\n  __int64 v139; // [rsp+B8h] [rbp-40h]\n  __int64 v140; // [rsp+C0h] [rbp-38h]\n\n  v2 = *(signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 16);\n  v3 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 16);\n  v4 = ((unsigned __int64)(715827883 * v2) >> 32) + ((unsigned __int64)(715827883 * v2) >> 63);\n  v5 = ((unsigned __int64)(715827883 * v2) >> 32) + (715827883 * v2 < 0) + 15;\n  v139 = a1;\n  v140 = a2;\n  v6 = (char *)off_49F6D0 + 32 * (signed int)a1;\n  v7 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12600];\n  v8 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12632];\n  v9 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12664];\n  v10 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12696];\n  v11 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12602];\n  v12 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12634];\n  v131 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12666];\n  v13 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12698];\n  v14 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12604];\n  LODWORD(v2) = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12636];\n  v15 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12668];\n  v132 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12700];\n  v16 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12606];\n  v135 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12638];\n  v134 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12670];\n  v133 = *(unsigned __int16 *)&v6[2 * (signed int)a2 + 12702];\n  v138 = (unsigned int)(v3 - 6 * v4);\n  LODWORD(v6) = v10 + v7;\n  v17 = v7 - v10;\n  v18 = v9 + v8;\n  v19 = v8 - v9;\n  v20 = v18 + (_DWORD)v6;\n  v137 = (unsigned int)((_DWORD)v6 - v18);\n  v136 = (unsigned int)(v19 + 2 * v17);\n  v21 = v17 - 2 * v19;\n  v22 = v13 + v11;\n  v23 = v11 - v13;\n  v24 = v131 + v12;\n  v25 = v12 - v131;\n  LODWORD(v6) = v24 + v22;\n  v26 = v22 - v24;\n  v27 = v25 + 2 * v23;\n  v28 = v23 - 2 * v25;\n  v29 = v15 + v2;\n  LODWORD(v2) = v2 - v15;\n  v30 = v29 + v132 + v14;\n  v31 = v132 + v14 - v29;\n  v32 = v2 + 2 * (v14 - v132);\n  v33 = v14 - v132 - 2 * v2;\n  v34 = v133 + v16;\n  v35 = v16 - v133;\n  LODWORD(v2) = v134 + v135 + v34;\n  v36 = v34 - (v134 + v135);\n  v37 = v2 + v20;\n  v38 = v20 - v2;\n  LODWORD(v2) = v30 + (_DWORD)v6;\n  LODWORD(v6) = (_DWORD)v6 - v30;\n  v39 = v2 + v37;\n  v117 = v37 - v2;\n  v116 = (_DWORD)v6 + 2 * v38;\n  v118 = v38 - 2 * (_DWORD)v6;\n  v40 = v135 - v134 + 2 * v35;\n  v41 = v35 - 2 * (v135 - v134);\n  LODWORD(v6) = v40 + v136;\n  v42 = v136 - v40;\n  v43 = v32 + v27;\n  v44 = v27 - v32;\n  v119 = v43 + (_DWORD)v6;\n  v121 = (_DWORD)v6 - v43;\n  v120 = v44 + 2 * v42;\n  v122 = v42 - 2 * v44;\n  LODWORD(v6) = v31 + v26;\n  v123 = v31 + v26 + v36 + v137;\n  v45 = v26 - v31;\n  v125 = v36 + v137 - (_DWORD)v6;\n  v124 = v45 + 2 * (v137 - v36);\n  v126 = v137 - v36 - 2 * v45;\n  LODWORD(v6) = v33 + v28;\n  v46 = v28 - v33;\n  v127 = (_DWORD)v6 + v41 + v21;\n  v129 = v41 + v21 - (_DWORD)v6;\n  v128 = v46 + 2 * (v21 - v41);\n  v130 = v21 - v41 - 2 * v46;\n  v47 = (1 << (v4 + 15)) / 2;\n  v48 = (signed __int64)(signed int)v138 << 6;\n  for ( i = 0LL; ; i += 4LL )\n  {\n    v50 = -v39;\n    if ( -v39 < 1 )\n      v50 = v39;\n    v51 = sub_452340((v47 + *(_DWORD *)((char *)&xmmword_48A080 + v48 + i) * v50) >> v5, v39);\n    *(_DWORD *)((char *)off_49F6D0 + i + 13112) = *(_DWORD *)((char *)&xmmword_48A200 + v48 + i) * v51 << v4;\n    v52 = -*(int *)((char *)&v119 + i);\n    if ( v52 < 1 )\n      v52 = *(int *)((char *)&v119 + i);\n    v53 = sub_452340((v47 + *(_DWORD *)((char *)&xmmword_48A090 + v48 + i) * v52) >> v5, *(int *)((char *)&v119 + i));\n    *(_DWORD *)((char *)off_49F6D0 + i + 13176) = *(_DWORD *)((char *)&xmmword_48A210 + v48 + i) * v53 << v4;\n    v54 = -*(int *)((char *)&v123 + i);\n    if ( v54 < 1 )\n      v54 = *(int *)((char *)&v123 + i);\n    v55 = sub_452340((v47 + *(_DWORD *)((char *)&xmmword_48A0A0 + v48 + i) * v54) >> v5, *(int *)((char *)&v123 + i));\n    *(_DWORD *)((char *)off_49F6D0 + i + 13240) = *(_DWORD *)((char *)&xmmword_48A220 + v48 + i) * v55 << v4;\n    v56 = -*(int *)((char *)&v127 + i);\n    if ( v56 < 1 )\n      v56 = *(int *)((char *)&v127 + i);\n    v57 = sub_452340((v47 + *(_DWORD *)((char *)&xmmword_48A0B0 + v48 + i) * v56) >> v5, *(int *)((char *)&v127 + i));\n    v58 = (char *)off_49F6D0;\n    *(_DWORD *)((char *)off_49F6D0 + i + 13304) = *(_DWORD *)((char *)&xmmword_48A230 + v48 + i) * v57 << v4;\n    if ( i == 12 )\n      break;\n    v39 = *(int *)((char *)&v116 + i);\n  }\n  v59 = *((_DWORD *)v58 + 3310);\n  v60 = *((_DWORD *)v58 + 3326);\n  v61 = *((_DWORD *)v58 + 3278);\n  v62 = *((_DWORD *)v58 + 3279);\n  v63 = (*((_DWORD *)v58 + 3294) >> 1) - v60;\n  v64 = *((_DWORD *)v58 + 3294) + (v60 >> 1);\n  *((_DWORD *)v58 + 3278) = v64 + v59 + v61;\n  *((_DWORD *)v58 + 3326) = v59 + v61 - v64;\n  v65 = v61 - v59;\n  *((_DWORD *)v58 + 3294) = v63 + v65;\n  *((_DWORD *)v58 + 3310) = v65 - v63;\n  v66 = *((_DWORD *)v58 + 3311);\n  v67 = *((_DWORD *)v58 + 3327);\n  v68 = (*((_DWORD *)v58 + 3295) >> 1) - v67;\n  v69 = *((_DWORD *)v58 + 3295) + (v67 >> 1);\n  *((_DWORD *)v58 + 3279) = v69 + v66 + v62;\n  *((_DWORD *)v58 + 3327) = v66 + v62 - v69;\n  v70 = v62 - v66;\n  *((_DWORD *)v58 + 3295) = v68 + v70;\n  *((_DWORD *)v58 + 3311) = v70 - v68;\n  v71 = *((_DWORD *)v58 + 3280);\n  v72 = *((_DWORD *)v58 + 3312);\n  v73 = *((_DWORD *)v58 + 3328);\n  v74 = (*((_DWORD *)v58 + 3296) >> 1) - v73;\n  v75 = *((_DWORD *)v58 + 3296) + (v73 >> 1);\n  *((_DWORD *)v58 + 3280) = v75 + v72 + v71;\n  *((_DWORD *)v58 + 3328) = v72 + v71 - v75;\n  v76 = v71 - v72;\n  *((_DWORD *)v58 + 3296) = v74 + v76;\n  *((_DWORD *)v58 + 3312) = v76 - v74;\n  v77 = *((_DWORD *)v58 + 3281);\n  v78 = *((_DWORD *)v58 + 3313);\n  v79 = *((_DWORD *)v58 + 3329);\n  v80 = *((_DWORD *)v58 + 3281) - v78;\n  v81 = *((_DWORD *)v58 + 3297) >> 1;\n  v82 = *((_DWORD *)v58 + 3297) + (*((_DWORD *)v58 + 3329) >> 1);\n  *((_DWORD *)v58 + 3281) = v82 + v78 + v77;\n  v83 = v81 - v79;\n  *((_DWORD *)v58 + 3329) = v78 + v77 - v82;\n  *((_DWORD *)v58 + 3297) = v83 + v80;\n  *((_DWORD *)v58 + 3313) = v80 - v83;\n  v84 = _mm_shuffle_epi32(_mm_cvtsi32_si128(*((_DWORD *)v58 + 18171)), 0);\n  v85 = *(_OWORD *)(v58 + 13112);\n  v86 = _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v85) + (signed int)v85 + DWORD1(v85) + (SHIDWORD(v85) >> 1)),\n            _mm_cvtsi32_si128((SDWORD1(v85) >> 1) - HIDWORD(v85) + (signed int)v85 - DWORD2(v85))),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v85 - DWORD2(v85) - ((SDWORD1(v85) >> 1) - HIDWORD(v85))),\n            _mm_cvtsi32_si128(DWORD2(v85) + (signed int)v85 - (DWORD1(v85) + (SHIDWORD(v85) >> 1)))));\n  v87 = _mm_load_si128((const __m128i *)&xmmword_4895C0);\n  v88 = _mm_load_si128((const __m128i *)&xmmword_4895D0);\n  v89 = _mm_andnot_si128(_mm_cmpgt_epi32(v87, v86), _mm_srai_epi32(_mm_add_epi32(v86, v88), 6u));\n  v90 = _mm_cmpgt_epi32(v89, v84);\n  _mm_storeu_si128((__m128i *)(v58 + 13112), _mm_or_si128(_mm_andnot_si128(v90, v89), _mm_and_si128(v84, v90)));\n  v91 = *(_OWORD *)(v58 + 13176);\n  v92 = _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v91) + (signed int)v91 + DWORD1(v91) + (SHIDWORD(v91) >> 1)),\n            _mm_cvtsi32_si128((SDWORD1(v91) >> 1) - HIDWORD(v91) + (signed int)v91 - DWORD2(v91))),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v91 - DWORD2(v91) - ((SDWORD1(v91) >> 1) - HIDWORD(v91))),\n            _mm_cvtsi32_si128(DWORD2(v91) + (signed int)v91 - (DWORD1(v91) + (SHIDWORD(v91) >> 1)))));\n  v93 = _mm_andnot_si128(_mm_cmpgt_epi32(v87, v92), _mm_srai_epi32(_mm_add_epi32(v92, v88), 6u));\n  v94 = _mm_cmpgt_epi32(v93, v84);\n  _mm_storeu_si128((__m128i *)(v58 + 13176), _mm_or_si128(_mm_andnot_si128(v94, v93), _mm_and_si128(v84, v94)));\n  v95 = *(_OWORD *)(v58 + 13240);\n  v96 = _mm_unpacklo_epi64(\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128(DWORD2(v95) + (signed int)v95 + DWORD1(v95) + (SHIDWORD(v95) >> 1)),\n            _mm_cvtsi32_si128((SDWORD1(v95) >> 1) - HIDWORD(v95) + (signed int)v95 - DWORD2(v95))),\n          _mm_unpacklo_epi32(\n            _mm_cvtsi32_si128((signed int)v95 - DWORD2(v95) - ((SDWORD1(v95) >> 1) - HIDWORD(v95))),\n            _mm_cvtsi32_si128(DWORD2(v95) + (signed int)v95 - (DWORD1(v95) + (SHIDWORD(v95) >> 1)))));\n  v97 = _mm_andnot_si128(_mm_cmpgt_epi32(v87, v96), _mm_srai_epi32(_mm_add_epi32(v96, v88), 6u));\n  v98 = _mm_cmpgt_epi32(v97, v84);\n  _mm_storeu_si128((__m128i *)(v58 + 13240), _mm_or_si128(_mm_andnot_si128(v98, v97), _mm_and_si128(v84, v98)));\n  v99 = *(_OWORD *)(v58 + 13304);\n  v100 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128(DWORD2(v99) + (signed int)v99 + DWORD1(v99) + (SHIDWORD(v99) >> 1)),\n             _mm_cvtsi32_si128((SDWORD1(v99) >> 1) - HIDWORD(v99) + (signed int)v99 - DWORD2(v99))),\n           _mm_unpacklo_epi32(\n             _mm_cvtsi32_si128((signed int)v99 - DWORD2(v99) - ((SDWORD1(v99) >> 1) - HIDWORD(v99))),\n             _mm_cvtsi32_si128(DWORD2(v99) + (signed int)v99 - (DWORD1(v99) + (SHIDWORD(v99) >> 1)))));\n  v101 = _mm_andnot_si128(_mm_cmpgt_epi32(v87, v100), _mm_srai_epi32(_mm_add_epi32(v88, v100), 6u));\n  v102 = _mm_cmpgt_epi32(v101, v84);\n  _mm_storeu_si128((__m128i *)(v58 + 13304), _mm_or_si128(_mm_andnot_si128(v102, v101), _mm_and_si128(v84, v102)));\n  v103 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v104 = *((_DWORD *)v58 + 38);\n  v105 = *((_DWORD *)v58 + 39);\n  v106 = v140;\n  v107 = *(_QWORD *)(v103 + 8LL * (v105 + (signed int)v140));\n  v108 = v139;\n  v109 = v104 + (signed int)v139;\n  *(_WORD *)(v107 + 2 * v109) = *((_WORD *)v58 + 6556);\n  v110 = v104 + v108 + 1;\n  *(_WORD *)(v107 + 2 * v110) = *((_WORD *)v58 + 6588);\n  v111 = v104 + v108 + 2;\n  *(_WORD *)(v107 + 2 * v111) = *((_WORD *)v58 + 6620);\n  v112 = v104 + v108 + 3;\n  *(_WORD *)(v107 + 2 * v112) = *((_WORD *)v58 + 6652);\n  v113 = *(_QWORD *)(v103 + 8LL * (v105 + v106 + 1));\n  *(_WORD *)(v113 + 2 * v109) = *((_WORD *)v58 + 6558);\n  *(_WORD *)(v113 + 2 * v110) = *((_WORD *)v58 + 6590);\n  *(_WORD *)(v113 + 2 * v111) = *((_WORD *)v58 + 6622);\n  *(_WORD *)(v113 + 2 * v112) = *((_WORD *)v58 + 6654);\n  v114 = *(_QWORD *)(v103 + 8LL * (v105 + v106 + 2));\n  *(_WORD *)(v114 + 2 * v109) = *((_WORD *)v58 + 6560);\n  *(_WORD *)(v114 + 2 * v110) = *((_WORD *)v58 + 6592);\n  *(_WORD *)(v114 + 2 * v111) = *((_WORD *)v58 + 6624);\n  *(_WORD *)(v114 + 2 * v112) = *((_WORD *)v58 + 6656);\n  result = *(_QWORD *)(v103 + 8LL * (v105 + v106 + 3));\n  *(_WORD *)(result + 2 * v109) = *((_WORD *)v58 + 6562);\n  *(_WORD *)(result + 2 * v110) = *((_WORD *)v58 + 6594);\n  *(_WORD *)(result + 2 * v111) = *((_WORD *)v58 + 6626);\n  *(_WORD *)(result + 2 * v112) = *((_WORD *)v58 + 6658);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a190L", 
            "funcEndAddr": "0x40aa3dL", 
            "funcName": "sub_40A190"
        }, 
        {
            "decompiledFuncCode": "void sub_40AA40()\n{\n  dword_49F9A0 = 0;\n}\n", 
            "funcStartAddr": "0x40aa40L", 
            "funcEndAddr": "0x40aa4bL", 
            "funcName": "sub_40AA40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_40AA50()\n{\n  __int64 v0; // r14\n  __int64 v1; // r15\n  signed __int64 v2; // rbx\n  signed __int64 result; // rax\n  signed __int64 v4; // rcx\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  int v7; // [rsp+18h] [rbp-30h]\n  int v8; // [rsp+1Ch] [rbp-2Ch]\n\n  v0 = *((_QWORD *)off_49F6D0 + 1771);\n  v1 = *((signed int *)off_49F6D0 + 3);\n  v2 = 0LL;\n  sub_437200(*((_DWORD *)off_49F6D0 + 3), -1, 0, 1, &v5);\n  sub_437200(*((_DWORD *)off_49F6D0 + 3), 0, -1, 1, &v7);\n  if ( v7 )\n    v2 = *((_QWORD *)off_49F6D0 + 1771) + 632LL * v8;\n  result = 632 * v1;\n  *(_QWORD *)(v0 + 632 * v1 + 56) = v2;\n  if ( v5 )\n    v4 = *((_QWORD *)off_49F6D0 + 1771) + 632LL * v6;\n  else\n    v4 = 0LL;\n  *(_QWORD *)(v0 + result + 64) = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40aa50L", 
            "funcEndAddr": "0x40ab06L", 
            "funcName": "sub_40AA50"
        }, 
        {
            "decompiledFuncCode": "void *sub_40AB10()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x5E0uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"create_contexts_MotionInfo: enco_ctx\");\n  return result;\n}\n", 
            "funcStartAddr": "0x40ab10L", 
            "funcEndAddr": "0x40ab37L", 
            "funcName": "sub_40AB10"
        }, 
        {
            "decompiledFuncCode": "void *sub_40AB40()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x2F60uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"create_contexts_TextureInfo: enco_ctx\");\n  return result;\n}\n", 
            "funcStartAddr": "0x40ab40L", 
            "funcEndAddr": "0x40ab67L", 
            "funcName": "sub_40AB40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AB70(void *a1)\n{\n  if ( a1 )\n    free(a1);\n}\n", 
            "funcStartAddr": "0x40ab70L", 
            "funcEndAddr": "0x40ab7bL", 
            "funcName": "sub_40AB70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AB80(void *a1)\n{\n  if ( a1 )\n    free(a1);\n}\n", 
            "funcStartAddr": "0x40ab80L", 
            "funcEndAddr": "0x40ab8bL", 
            "funcName": "sub_40AB80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AB90(__int64 a1, __int64 a2)\n{\n  int v2; // er15\n  __int64 result; // rax\n\n  v2 = sub_401340(a2 + 8);\n  (*(void (__fastcall **)(__int64, __int64))(a1 + 40))(a1, a2 + 8);\n  if ( *(_DWORD *)a1 )\n    *(_DWORD *)(*(_QWORD *)a2 + 40LL) = 1;\n  result = (unsigned int)sub_401340(a2 + 8) - v2;\n  *(_DWORD *)(a1 + 12) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ab90L", 
            "funcEndAddr": "0x40abdeL", 
            "funcName": "sub_40AB90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40ABE0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r8\n  __int64 v3; // rbx\n  __int64 v4; // rdx\n  int v5; // esi\n  signed __int64 v6; // rax\n  int v7; // ebp\n  int v8; // edi\n  int v9; // ebp\n\n  v2 = a2;\n  v3 = a1;\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = *(_DWORD *)(a1 + 4);\n  v6 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v7 = 0;\n  v8 = 0;\n  if ( *(_DWORD *)(v4 + v6 + 552) )\n    v8 = *(_DWORD *)(v4 + 632LL * *(signed int *)(v4 + v6 + 536) + 532);\n  if ( *(_DWORD *)(v4 + v6 + 556) )\n    v7 = *(_DWORD *)(v4 + 632LL * *(signed int *)(v4 + v6 + 540) + 532);\n  v9 = v8 + v7;\n  sub_401650(v2, v5 != 0, (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL) + 16LL * v9 + 1392));\n  *(_DWORD *)(v3 + 24) = v9;\n}\n", 
            "funcStartAddr": "0x40abe0L", 
            "funcEndAddr": "0x40ac8aL", 
            "funcName": "sub_40ABE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AC90(_DWORD *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  signed __int64 v3; // r15\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  int v6; // ebp\n  __int64 v7; // rsi\n  int v8; // edx\n  __int64 v9; // rsi\n  int v10; // ebx\n  _BOOL4 v11; // ebx\n  _BOOL4 v12; // edx\n  __int64 v13; // rsi\n  __int64 v14; // rbx\n  unsigned __int16 *v15; // rdx\n  __int16 v16; // si\n  __int64 result; // rax\n  bool v18; // zf\n\n  v2 = a2;\n  v3 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v4 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v5 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = a1[1];\n  v7 = *(_QWORD *)(v5 + v3 + 56);\n  if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n  {\n    v11 = 0;\n    v12 = 0;\n    if ( v7 )\n      v12 = *(_DWORD *)(v7 + 624) != 0;\n    v13 = *(_QWORD *)(v5 + v3 + 64);\n    if ( v13 )\n      v11 = *(_DWORD *)(v13 + 624) != 0;\n    v14 = (unsigned int)(v12 + v11);\n    sub_401650(v2, v6 == 0, (unsigned __int16 *)(v4 + 16 * v14 + 176));\n    v18 = v6 == 0;\n    goto LABEL_17;\n  }\n  v8 = 0;\n  if ( v7 )\n    LOBYTE(v8) = *(_DWORD *)(v7 + 624) != 0;\n  v9 = *(_QWORD *)(v5 + v3 + 64);\n  if ( v9 )\n    v10 = 8 - (*(_DWORD *)(v9 + 624) < 1u);\n  else\n    v10 = 7;\n  LODWORD(v14) = v8 + v10;\n  if ( v6 || a1[2] )\n  {\n    v15 = (unsigned __int16 *)(v4 + 16LL * (unsigned int)v14 + 352);\n    v16 = 0;\n  }\n  else\n  {\n    v15 = (unsigned __int16 *)(v4 + 16LL * (unsigned int)v14 + 352);\n    v16 = 1;\n  }\n  sub_401650(v2, v16, v15);\n  LOBYTE(result) = 1;\n  if ( !a1[1] )\n  {\n    v18 = a1[2] == 0;\nLABEL_17:\n    LOBYTE(result) = !v18;\n  }\n  result = (unsigned __int8)result;\n  *(_DWORD *)(v5 + v3 + 624) = (unsigned __int8)result;\n  a1[6] = v14;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ac90L", 
            "funcEndAddr": "0x40adc3L", 
            "funcName": "sub_40AC90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40ADD0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r8\n  __int64 v3; // rdx\n  __int64 v4; // r9\n  signed __int64 v5; // rsi\n  __int64 v6; // rcx\n  int v7; // eax\n  int v8; // er10\n  __int64 v9; // rcx\n  __int64 v10; // rax\n  bool v11; // zf\n  unsigned __int16 *v12; // rdx\n\n  v2 = a2;\n  v3 = *((_QWORD *)off_49F6D0 + 1771);\n  v4 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v5 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v6 = *(_QWORD *)(v3 + v5 + 56);\n  v7 = 0;\n  v8 = 0;\n  if ( v6 )\n    v8 = *(_DWORD *)(v6 + 572);\n  v9 = *(_QWORD *)(v3 + v5 + 64);\n  if ( v9 )\n    v7 = *(_DWORD *)(v9 + 572);\n  v10 = v8 + v7;\n  v11 = *(_DWORD *)(v3 + v5 + 572) == 0;\n  *(_DWORD *)(a1 + 24) = v10;\n  v12 = (unsigned __int16 *)(v4 + 16 * v10 + 1456);\n  if ( v11 )\n    sub_401650(v2, 0, v12);\n  else\n    sub_401650(v2, 1, v12);\n}\n", 
            "funcStartAddr": "0x40add0L", 
            "funcEndAddr": "0x40ae58L", 
            "funcName": "sub_40ADD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AE60(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  int v3; // edx\n  unsigned __int16 *v4; // r13\n  __int64 v5; // rcx\n  __int64 v6; // rax\n  signed int v7; // ebx\n  signed __int64 v8; // rsi\n  __int64 v9; // rbp\n  _BOOL4 v10; // eax\n  _BOOL4 v11; // edx\n  __int64 v12; // rcx\n  unsigned int v13; // eax\n  __int64 v14; // rbx\n  int v15; // ebx\n  unsigned __int16 *v16; // rdx\n  __int16 v17; // si\n  signed __int64 v18; // rsi\n  __int64 v19; // rbp\n  _BOOL4 v20; // eax\n  _BOOL4 v21; // edx\n  __int64 v22; // rcx\n  __int64 v23; // rax\n  int v24; // er12\n  signed int v25; // ebp\n  unsigned __int16 *v26; // rdx\n  __int16 v27; // si\n  __int64 v28; // rdi\n  signed int v29; // eax\n  unsigned __int16 *v30; // r13\n  __int16 v31; // si\n  __int64 v32; // rdi\n  char v33; // bp\n  signed __int64 v34; // r15\n  unsigned __int16 *v35; // rdx\n  int v36; // ebx\n  __int16 v37; // si\n  int v38; // ebx\n  int v39; // ebx\n  int v40; // ebx\n  int v41; // ebp\n\n  v2 = a2;\n  v3 = *((_DWORD *)off_49F6D0 + 6);\n  v4 = *(unsigned __int16 **)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v5 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = *((signed int *)off_49F6D0 + 3);\n  v7 = *(_DWORD *)(a1 + 4);\n  if ( v3 != 1 )\n  {\n    if ( v3 == 2 )\n    {\n      v8 = 632 * v6;\n      v9 = *(_QWORD *)(v5 + 632 * v6 + 56);\n      v10 = 0;\n      v11 = 0;\n      if ( v9 )\n        v11 = (*(_DWORD *)(v9 + 72) | 4) != 13;\n      v12 = *(_QWORD *)(v5 + v8 + 64);\n      if ( v12 )\n        v10 = (*(_DWORD *)(v12 + 72) | 4) != 13;\n      v13 = v11 + v10;\n      *(_DWORD *)(a1 + 24) = v13;\n      if ( !v7 )\n      {\n        v30 = &v4[8 * v13];\nLABEL_48:\n        v31 = 0;\n        goto LABEL_61;\n      }\n      sub_401650(v2, 1, &v4[8 * v13]);\n      if ( v7 != 25 )\n      {\n        sub_401B40(v2, 0);\n        v14 = v7 - 1;\n        sub_401650(v2, (unsigned __int8)((715827883 * v14 < 0) + (unsigned __int64)(715827883 * v14 >> 33)), v4 + 32);\n        v15 = v14 - 12 * (((unsigned __int64)(715827883 * v14) >> 63) + (715827883 * v14 >> 33));\n        v16 = v4 + 40;\n        v17 = 0;\n        if ( (unsigned int)(v15 + 3) > 6 )\n        {\n          sub_401650(v2, 1, v16);\n          v16 = v4 + 48;\n          if ( (v15 & 0xFFFFFFFC) != 4 )\n            v17 = 1;\n        }\n        sub_401650(v2, v17, v16);\n        v38 = v15 % 4;\n        sub_401650(v2, (unsigned __int8)(v38 / 2), v4 + 56);\n        v30 = v4 + 64;\n        v31 = (unsigned __int8)(v38 - ((v38 + (v38 < 0)) & 0xFE));\nLABEL_61:\n        v32 = v2;\n        v26 = v30;\n        goto LABEL_62;\n      }\n    }\n    else\n    {\n      v29 = 7;\n      if ( v7 < 8 )\n        v29 = *(_DWORD *)(a1 + 4);\n      switch ( v29 )\n      {\n        case 0:\n          return;\n        case 1:\n          sub_401650(a2, 0, v4 + 120);\n          sub_401650(a2, 0, v4 + 128);\n          v30 = v4 + 136;\n          goto LABEL_48;\n        case 2:\n          sub_401650(a2, 0, v4 + 120);\n          sub_401650(a2, 1, v4 + 128);\n          v30 = v4 + 144;\n          v31 = 1;\n          goto LABEL_61;\n        case 3:\n          sub_401650(a2, 0, v4 + 120);\n          v35 = v4 + 128;\n          goto LABEL_47;\n        case 4:\n        case 5:\n          sub_401650(a2, 0, v4 + 120);\n          sub_401650(a2, 0, v4 + 128);\n          v30 = v4 + 136;\n          v31 = 1;\n          goto LABEL_61;\n        case 6:\n          v35 = v4 + 120;\nLABEL_47:\n          sub_401650(a2, 1, v35);\n          v30 = v4 + 144;\n          goto LABEL_48;\n        case 7:\n          v24 = 0;\n          if ( v7 >= 7 )\n            v24 = v7 - 7;\n          sub_401650(a2, 1, v4 + 120);\n          sub_401650(a2, 1, v4 + 144);\n          if ( v24 != 25 )\n            goto LABEL_43;\n          break;\n        default:\n          puts(\"Unsupported MB-MODE in writeMB_typeInfo_CABAC!\");\n          exit(1);\n          return;\n      }\n    }\n    goto LABEL_57;\n  }\n  v18 = 632 * v6;\n  v19 = *(_QWORD *)(v5 + 632 * v6 + 56);\n  v20 = 0;\n  v21 = 0;\n  if ( v19 )\n    v21 = *(_DWORD *)(v19 + 72) != 0;\n  v22 = *(_QWORD *)(v5 + v18 + 64);\n  if ( v22 )\n    v20 = *(_DWORD *)(v22 + 72) != 0;\n  v23 = (unsigned int)(v21 + v20);\n  *(_DWORD *)(a1 + 24) = v23;\n  v24 = 0;\n  if ( v7 >= 24 )\n    v24 = v7 - 24;\n  v25 = 24;\n  if ( v7 < 25 )\n    v25 = v7;\n  if ( !v25 )\n  {\n    v26 = &v4[8 * v23 + 176];\nLABEL_30:\n    v31 = 0;\n    v32 = v2;\nLABEL_62:\n    sub_401650(v32, v31, v26);\n    return;\n  }\n  if ( v25 <= 2 )\n  {\n    sub_401650(v2, 1, &v4[8 * v23 + 176]);\n    sub_401650(v2, 0, v4 + 208);\n    v26 = v4 + 224;\n    if ( v25 != 1 )\n    {\n      v27 = 1;\n      v28 = v2;\n      goto LABEL_55;\n    }\n    goto LABEL_30;\n  }\n  if ( v25 <= 10 )\n  {\n    sub_401650(v2, 1, &v4[8 * v23 + 176]);\n    sub_401650(v2, 1, v4 + 208);\n    sub_401650(v2, 0, v4 + 216);\n    v33 = v25 - 3;\n    v34 = (signed __int64)(v4 + 224);\n    sub_401650(v2, (v33 & 4) != 0, v4 + 224);\n    sub_401650(v2, (v33 & 2) != 0, v4 + 224);\n    if ( !(v33 & 1) )\n    {\n      v27 = 0;\nLABEL_54:\n      v28 = v2;\n      v26 = (unsigned __int16 *)v34;\nLABEL_55:\n      sub_401650(v28, v27, v26);\n      if ( v7 == 24 )\n        goto LABEL_56;\n      return;\n    }\nLABEL_53:\n    v27 = 1;\n    goto LABEL_54;\n  }\n  if ( v25 == 22 || v25 == 11 )\n  {\n    sub_401650(v2, 1, &v4[8 * v23 + 176]);\n    sub_401650(v2, 1, v4 + 208);\n    sub_401650(v2, 1, v4 + 216);\n    v34 = (signed __int64)(v4 + 224);\n    sub_401650(v2, 1, v4 + 224);\n    sub_401650(v2, 1, v4 + 224);\n    if ( v25 == 11 )\n    {\n      v31 = 0;\n      v32 = v2;\n      v26 = v4 + 224;\n      goto LABEL_62;\n    }\n    goto LABEL_53;\n  }\n  sub_401650(v2, 1, &v4[8 * v23 + 176]);\n  sub_401650(v2, 1, v4 + 208);\n  sub_401650(v2, 1, v4 + 216);\n  v39 = v25 - (v25 > 22) - 12;\n  sub_401650(v2, (v39 & 8) != 0, v4 + 224);\n  sub_401650(v2, (v39 & 4) != 0, v4 + 224);\n  sub_401650(v2, (v39 & 2) != 0, v4 + 224);\n  v41 = v25 - (v25 > 22);\n  sub_401650(v2, (v39 & 1) != 0, v4 + 224);\n  if ( v41 + (v41 > 21) == 24 )\n  {\nLABEL_56:\n    if ( v24 != 25 )\n    {\nLABEL_43:\n      sub_401B40(v2, 0);\n      sub_401650(v2, (unsigned __int8)((715827883LL * v24 < 0) + (unsigned __int64)(715827883LL * v24 >> 33)), v4 + 152);\n      v36 = v24 - 12 * (((unsigned __int64)(715827883LL * v24) >> 63) + (715827883LL * v24 >> 33));\n      v37 = 0;\n      if ( (unsigned int)(v36 + 3) > 6 )\n      {\n        sub_401650(v2, 1, v4 + 160);\n        if ( (v36 & 0xFFFFFFFC) != 4 )\n          v37 = 1;\n      }\n      sub_401650(v2, v37, v4 + 160);\n      v40 = v36 % 4;\n      v30 = v4 + 168;\n      sub_401650(v2, (unsigned __int8)(v40 / 2), v30);\n      v31 = (unsigned __int8)(v40 - ((v40 + (v40 < 0)) & 0xFE));\n      goto LABEL_61;\n    }\nLABEL_57:\n    sub_401B40(v2, 1);\n  }\n}\n", 
            "funcStartAddr": "0x40ae60L", 
            "funcEndAddr": "0x40b501L", 
            "funcName": "sub_40AE60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B510(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  unsigned __int16 *v3; // rbx\n  signed int v4; // ebp\n  unsigned __int16 *v5; // rdx\n  unsigned __int16 *v6; // rdx\n  unsigned __int16 *v7; // rbx\n  __int16 v8; // si\n  __int64 v9; // rdi\n  unsigned __int16 *v10; // rdx\n  char v11; // bp\n  __int16 v12; // si\n\n  v2 = a2;\n  v3 = *(unsigned __int16 **)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v4 = *(_DWORD *)(a1 + 4);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n  {\n    v5 = v3 + 336;\n    if ( !v4 )\n    {\n      v8 = 0;\n      v9 = v2;\nLABEL_23:\n      sub_401650(v9, v8, v5);\n      return;\n    }\n    sub_401650(a2, 1, v5);\n    v6 = v3 + 344;\n    if ( v4 <= 2 )\n    {\n      sub_401650(a2, 0, v6);\n      v7 = v3 + 360;\n      if ( v4 != 1 )\n        goto LABEL_21;\n      goto LABEL_20;\n    }\n    sub_401650(a2, 1, v6);\n    v10 = v3 + 352;\n    if ( v4 > 6 )\n    {\n      sub_401650(a2, 1, v10);\n      v11 = v4 - 7;\n      v7 = v3 + 360;\n      if ( v11 & 4 )\n        goto LABEL_18;\n      sub_401650(a2, 0, v7);\n      if ( v11 & 2 )\n        goto LABEL_18;\n    }\n    else\n    {\n      sub_401650(a2, 0, v10);\n      v11 = v4 - 3;\n      v7 = v3 + 360;\n      if ( v11 & 2 )\n      {\nLABEL_18:\n        v12 = 1;\nLABEL_19:\n        sub_401650(v2, v12, v7);\n        if ( v11 & 1 )\n        {\nLABEL_21:\n          v8 = 1;\n          goto LABEL_22;\n        }\nLABEL_20:\n        v8 = 0;\nLABEL_22:\n        v9 = v2;\n        v5 = v7;\n        goto LABEL_23;\n      }\n    }\n    v12 = 0;\n    goto LABEL_19;\n  }\n  switch ( v4 )\n  {\n    case 0:\n      v7 = v3 + 272;\n      goto LABEL_21;\n    case 1:\n      sub_401650(a2, 0, v3 + 272);\n      v7 = v3 + 288;\n      goto LABEL_20;\n    case 2:\n      sub_401650(a2, 0, v3 + 272);\n      sub_401650(a2, 1, v3 + 288);\n      v7 = v3 + 296;\n      goto LABEL_21;\n    case 3:\n      sub_401650(a2, 0, v3 + 272);\n      sub_401650(a2, 1, v3 + 288);\n      v7 = v3 + 296;\n      goto LABEL_20;\n    default:\n      return;\n  }\n}\n", 
            "funcStartAddr": "0x40b510L", 
            "funcEndAddr": "0x40b6b9L", 
            "funcName": "sub_40B510"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B6C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // rax\n  unsigned __int16 *v4; // rbx\n  int v5; // esi\n\n  v2 = a2;\n  v3 = *((_QWORD *)off_49F6D0 + 1770);\n  v4 = *(unsigned __int16 **)(v3 + 40);\n  if ( *(_DWORD *)(a1 + 4) == -1 )\n  {\n    LOWORD(v5) = 1;\n  }\n  else\n  {\n    sub_401650(a2, 0, *(unsigned __int16 **)(v3 + 40));\n    v4 += 8;\n    sub_401650(a2, *(_WORD *)(a1 + 4) & 1, v4);\n    sub_401650(a2, (*(_DWORD *)(a1 + 4) >> 1) & 1, v4);\n    v5 = (*(_DWORD *)(a1 + 4) >> 2) & 1;\n  }\n  sub_401650(v2, v5, v4);\n}\n", 
            "funcStartAddr": "0x40b6c0L", 
            "funcEndAddr": "0x40b73cL", 
            "funcName": "sub_40B6C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B740(_DWORD *a1, __int64 a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // r13\n  int v4; // er12\n  int v5; // ebx\n  __int64 v6; // rdx\n  signed __int64 v7; // rsi\n  int v8; // eax\n  int v9; // ebx\n  bool v10; // zf\n  bool v11; // sf\n  unsigned __int8 v12; // of\n  __int64 v13; // rax\n  __int64 v14; // r10\n  signed __int64 v15; // rsi\n  bool v16; // al\n  int v17; // eax\n  bool v18; // zf\n  bool v19; // sf\n  unsigned __int8 v20; // of\n  __int64 v21; // rax\n  __int64 v22; // rbx\n  int v23; // ebp\n  unsigned __int16 *v24; // rdx\n  __int64 v25; // rdi\n  unsigned __int16 *v26; // r13\n  int v27; // ebx\n  __int64 v28; // [rsp+0h] [rbp-78h]\n  __int64 v29; // [rsp+8h] [rbp-70h]\n  __int64 v30; // [rsp+10h] [rbp-68h]\n  int v31; // [rsp+18h] [rbp-60h]\n  int v32; // [rsp+1Ch] [rbp-5Ch]\n  unsigned int v33; // [rsp+20h] [rbp-58h]\n  unsigned int v34; // [rsp+24h] [rbp-54h]\n  int v35; // [rsp+28h] [rbp-50h]\n  int v36; // [rsp+2Ch] [rbp-4Ch]\n  int v37; // [rsp+30h] [rbp-48h]\n  int v38; // [rsp+34h] [rbp-44h]\n  unsigned int v39; // [rsp+38h] [rbp-40h]\n  unsigned int v40; // [rsp+3Ch] [rbp-3Ch]\n  int v41; // [rsp+40h] [rbp-38h]\n  int v42; // [rsp+44h] [rbp-34h]\n\n  v2 = a2;\n  v3 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v30 = *((_QWORD *)off_49F6D0 + 1771);\n  v4 = *((_DWORD *)off_49F6D0 + 6);\n  v28 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL * (signed int)a1[2]);\n  v5 = 0;\n  v29 = *((signed int *)off_49F6D0 + 3);\n  sub_437270(v29, *((_DWORD *)off_49F6D0 + 18), *((_DWORD *)off_49F6D0 + 19), -1, 0, &v37);\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), *((_DWORD *)off_49F6D0 + 18), *((_DWORD *)off_49F6D0 + 19), 0, -1, &v31);\n  if ( v31\n    && ((v6 = *((_QWORD *)off_49F6D0 + 1771), v7 = 632LL * v32, *(_DWORD *)(v6 + v7 + 72))\n     || *((_DWORD *)off_49F6D0 + 6) != 1)\n    && (v4 != 1\n     || *(_DWORD *)(v6\n                  + v7\n                  + 4LL\n                  * (signed int)((signed int)v33 / 2\n                               - (((signed int)v33 / 2 + ((v33 + (v33 >> 31)) >> 31)) & 0xFFFFFFFE)\n                               + 2\n                               * ((signed int)v34 / 2\n                                - (((signed int)v34 / 2 + ((v34 + (v34 >> 31)) >> 31)) & 0x7FFFFFFE)))\n                  + 472)) )\n  {\n    if ( !*((_DWORD *)off_49F6D0 + 18100) || *(_DWORD *)(v30 + 632 * v29 + 532) || *(_DWORD *)(v6 + v7 + 532) != 1 )\n    {\n      v13 = *(_QWORD *)(v28 + 8LL * v35);\n      v9 = 0;\n      v12 = 0;\n      v10 = *(_WORD *)(v13 + 2LL * v36) == 0;\n      v11 = *(_WORD *)(v13 + 2LL * v36) < 0;\n    }\n    else\n    {\n      v8 = *(signed __int16 *)(*(_QWORD *)(v28 + 8LL * v35) + 2LL * v36);\n      v9 = 0;\n      v12 = __OFSUB__(v8, 1);\n      v10 = v8 == 1;\n      v11 = v8 - 1 < 0;\n    }\n    LOBYTE(v9) = !((unsigned __int8)(v11 ^ v12) | v10);\n    v5 = 2 * v9;\n    if ( !v37 )\n      goto LABEL_18;\n  }\n  else if ( !v37 )\n  {\n    goto LABEL_18;\n  }\n  v14 = *((_QWORD *)off_49F6D0 + 1771);\n  v15 = 632LL * v38;\n  if ( (*(_DWORD *)(v14 + v15 + 72) || *((_DWORD *)off_49F6D0 + 6) != 1)\n    && (v4 != 1\n     || *(_DWORD *)(v14\n                  + v15\n                  + 4LL\n                  * (signed int)((signed int)v39 / 2\n                               - (((signed int)v39 / 2 + ((v39 + (v39 >> 31)) >> 31)) & 0xFFFFFFFE)\n                               + 2\n                               * ((signed int)v40 / 2\n                                - (((signed int)v40 / 2 + ((v40 + (v40 >> 31)) >> 31)) & 0x7FFFFFFE)))\n                  + 472)) )\n  {\n    if ( !*((_DWORD *)off_49F6D0 + 18100) || *(_DWORD *)(v30 + 632 * v29 + 532) || *(_DWORD *)(v14 + v15 + 532) != 1 )\n    {\n      v21 = *(_QWORD *)(v28 + 8LL * v41);\n      v20 = 0;\n      v18 = *(_WORD *)(v21 + 2LL * v42) == 0;\n      v19 = *(_WORD *)(v21 + 2LL * v42) < 0;\n    }\n    else\n    {\n      v17 = *(signed __int16 *)(*(_QWORD *)(v28 + 8LL * v41) + 2LL * v42);\n      v20 = __OFSUB__(v17, 1);\n      v18 = v17 == 1;\n      v19 = v17 - 1 < 0;\n    }\n    v16 = !((unsigned __int8)(v19 ^ v20) | v18);\n    goto LABEL_25;\n  }\nLABEL_18:\n  v16 = 0;\nLABEL_25:\n  v22 = v16 | (unsigned int)v5;\n  a1[6] = v22;\n  v23 = a1[1];\n  v24 = (unsigned __int16 *)(16 * v22 + v3 + 1136);\n  if ( v23 && (sub_401650(v2, 1, v24), v24 = (unsigned __int16 *)(v3 + 1200), v23 != 1) )\n  {\n    sub_401650(v2, 1, v24);\n    v26 = (unsigned __int16 *)(v3 + 1216);\n    if ( v23 != 2 )\n    {\n      v27 = 2 - v23;\n      do\n      {\n        sub_401650(v2, 1, v26);\n        ++v27;\n      }\n      while ( v27 );\n    }\n    v25 = v2;\n    v24 = v26;\n  }\n  else\n  {\n    v25 = v2;\n  }\n  sub_401650(v25, 0, v24);\n}\n", 
            "funcStartAddr": "0x40b740L", 
            "funcEndAddr": "0x40ba41L", 
            "funcName": "sub_40B740"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BA50(__int64 a1, int a2, unsigned __int16 *a3, int a4)\n{\n  int v4; // ebx\n  unsigned __int16 *v5; // r15\n  unsigned __int16 *v6; // rbx\n  int v7; // ebp\n\n  v4 = a4;\n  v5 = a3;\n  if ( a2 )\n  {\n    sub_401650(a1, 1, a3);\n    v6 = &v5[8 * v4];\n    if ( a2 != 1 )\n    {\n      v7 = 1 - a2;\n      do\n      {\n        sub_401650(a1, 1, v6);\n        ++v7;\n      }\n      while ( v7 );\n    }\n    a3 = v6;\n  }\n  sub_401650(a1, 0, a3);\n}\n", 
            "funcStartAddr": "0x40ba50L", 
            "funcEndAddr": "0x40bac4L", 
            "funcName": "sub_40BA50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BAD0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  int v3; // esi\n  int v4; // edi\n  __int64 v5; // rbx\n  int v6; // er15\n  unsigned __int16 *v7; // rdx\n  __int64 v8; // rdi\n  unsigned __int16 *v9; // rbx\n  int v10; // ebp\n\n  v2 = a2;\n  v3 = *(_DWORD *)(a1 + 4);\n  v4 = -*(_DWORD *)(a1 + 4);\n  if ( v4 < 1 )\n    v4 = v3;\n  v5 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  dword_49F9A0 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 596);\n  v6 = (v3 <= 0) + 2 * v4;\n  v7 = (unsigned __int16 *)(v5 + 16LL * (dword_49F9A0 != 0) + 1328);\n  if ( v6 != 1 && (sub_401650(v2, 1, v7), v7 = (unsigned __int16 *)(v5 + 1360), v6 != 2) )\n  {\n    sub_401650(v2, 1, v7);\n    v9 = (unsigned __int16 *)(v5 + 1376);\n    if ( v6 != 3 )\n    {\n      v10 = 3 - v6;\n      do\n      {\n        sub_401650(v2, 1, v9);\n        ++v10;\n      }\n      while ( v10 );\n    }\n    v8 = v2;\n    v7 = v9;\n  }\n  else\n  {\n    v8 = v2;\n  }\n  sub_401650(v8, 0, v7);\n}\n", 
            "funcStartAddr": "0x40bad0L", 
            "funcEndAddr": "0x40bbacL", 
            "funcName": "sub_40BAD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BBB0(_DWORD *a1, __int64 a2)\n{\n  int v2; // ebx\n  int v3; // ebp\n  unsigned int v4; // er15\n  int v5; // er13\n  signed int v6; // eax\n  int v7; // er14\n  int v8; // eax\n  __int64 v9; // r8\n  signed __int64 v10; // rdx\n  int v11; // esi\n  __int64 v12; // r8\n  signed __int64 v13; // r9\n  int v14; // esi\n  int v15; // er14\n  int v16; // eax\n  __int64 v17; // r15\n  unsigned int v18; // ebp\n  int v19; // ebx\n  unsigned __int16 *v20; // rdx\n  __int64 v21; // [rsp+8h] [rbp-80h]\n  __int64 v22; // [rsp+10h] [rbp-78h]\n  __int64 v23; // [rsp+18h] [rbp-70h]\n  __int64 v24; // [rsp+20h] [rbp-68h]\n  int v25; // [rsp+28h] [rbp-60h]\n  int v26; // [rsp+2Ch] [rbp-5Ch]\n  int v27; // [rsp+30h] [rbp-58h]\n  int v28; // [rsp+34h] [rbp-54h]\n  int v29; // [rsp+40h] [rbp-48h]\n  int v30; // [rsp+44h] [rbp-44h]\n  int v31; // [rsp+48h] [rbp-40h]\n  int v32; // [rsp+4Ch] [rbp-3Ch]\n\n  v23 = a2;\n  v2 = *((_DWORD *)off_49F6D0 + 18);\n  v3 = *((_DWORD *)off_49F6D0 + 19);\n  v4 = a1[2] & 1;\n  v5 = a1[2] >> 1;\n  v24 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 32LL);\n  v22 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = *((_DWORD *)off_49F6D0 + 3);\n  v7 = 0;\n  v21 = v6;\n  sub_437270(v6, v2, *((_DWORD *)off_49F6D0 + 19), -1, 0, &v29);\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), v2, v3, 0, -1, &v25);\n  v8 = 0;\n  if ( v25 )\n  {\n    v9 = *((_QWORD *)off_49F6D0 + 1771);\n    v10 = 632LL * v26;\n    v8 = -*(_DWORD *)(v9 + v10 + ((unsigned __int64)v4 << 7) + 32LL * v28 + 8LL * v27 + 4LL * v5 + 76);\n    if ( v8 < 1 )\n      v8 = *(_DWORD *)(v9 + v10 + ((unsigned __int64)v4 << 7) + 32LL * v28 + 8LL * v27 + 4LL * v5 + 76);\n    if ( v5 == 1 && *((_DWORD *)off_49F6D0 + 18100) )\n    {\n      v11 = *(_DWORD *)(v22 + 632 * v21 + 532);\n      if ( v11 == 1 )\n      {\n        if ( !*(_DWORD *)(v9 + v10 + 532) )\n          v8 /= 2;\n      }\n      else if ( !v11 )\n      {\n        v8 <<= *(_DWORD *)(v9 + v10 + 532) == 1;\n        if ( !v29 )\n          goto LABEL_22;\n        goto LABEL_13;\n      }\n    }\n  }\n  if ( !v29 )\n    goto LABEL_22;\nLABEL_13:\n  v12 = *((_QWORD *)off_49F6D0 + 1771);\n  v13 = 632LL * v30;\n  v7 = -*(_DWORD *)(v12 + v13 + ((unsigned __int64)v4 << 7) + 32LL * v32 + 8LL * v31 + 4LL * v5 + 76);\n  if ( v7 < 1 )\n    v7 = *(_DWORD *)(v12 + v13 + ((unsigned __int64)v4 << 7) + 32LL * v32 + 8LL * v31 + 4LL * v5 + 76);\n  if ( v5 == 1 && *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v14 = *(_DWORD *)(v22 + 632 * v21 + 532);\n    if ( v14 == 1 )\n    {\n      if ( !*(_DWORD *)(v12 + v13 + 532) )\n        v7 /= 2;\n    }\n    else if ( !v14 )\n    {\n      v7 <<= *(_DWORD *)(v12 + v13 + 532) == 1;\n    }\n  }\nLABEL_22:\n  v15 = v8 + v7;\n  v16 = 5 * v5;\n  if ( v15 > 2 )\n  {\n    v17 = v24;\n    if ( v15 < 33 )\n      v16 += 2;\n    else\n      v16 += 3;\n  }\n  else\n  {\n    v17 = v24;\n  }\n  v18 = a1[1];\n  v19 = -a1[1];\n  if ( v19 < 1 )\n    v19 = a1[1];\n  a1[6] = v16;\n  v20 = (unsigned __int16 *)(v17 + 16LL * v16 + 816);\n  if ( v19 )\n  {\n    sub_401650(v23, 1, v20);\n    sub_40BE70(v23, v19 - 1, (unsigned __int16 *)(v17 + 80LL * v5 + 976), 3);\n    sub_4018D0(v23, v18 >> 31);\n  }\n  else\n  {\n    sub_401650(v23, 0, v20);\n  }\n}\n", 
            "funcStartAddr": "0x40bbb0L", 
            "funcEndAddr": "0x40be6bL", 
            "funcName": "sub_40BBB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BE70(__int64 a1, unsigned int a2, unsigned __int16 *a3, int a4)\n{\n  int v4; // er12\n  unsigned __int16 *v5; // rbx\n  int v6; // er12\n  int v7; // ebp\n  signed __int64 v8; // rax\n  unsigned int v9; // er15\n  int v10; // ebx\n  signed int v11; // ebp\n  unsigned int v12; // eax\n  int v13; // ebx\n\n  v4 = a4;\n  v5 = a3;\n  if ( !a2 )\n    goto LABEL_19;\n  sub_401650(a1, 1, a3);\n  v5 += 8;\n  if ( a2 == 1 )\n    goto LABEL_19;\n  v6 = v4 - 2;\n  v7 = 0;\n  do\n  {\n    if ( (unsigned int)(v7 + 2) > 8 )\n      break;\n    sub_401650(a1, 1, v5);\n    v8 = (signed __int64)(v5 + 8);\n    if ( v7 )\n      v8 = (signed __int64)v5;\n    v5 = (unsigned __int16 *)(v8 + 16);\n    if ( v6 != v7 )\n      v5 = (unsigned __int16 *)v8;\n    ++v7;\n  }\n  while ( a2 - 1 != v7 );\n  if ( a2 > 7 )\n  {\n    v9 = a2 - 8;\n    v10 = 3;\n    if ( a2 - 8 >= 8 )\n    {\n      v11 = 3;\n      v12 = 8;\n      do\n      {\n        v9 -= v12;\n        sub_4018D0(a1, 1);\n        v10 = v11 + 1;\n        v12 = 2 << v11++;\n      }\n      while ( v9 >= v12 );\n    }\n    sub_4018D0(a1, 0);\n    v13 = v10 - 1;\n    do\n      sub_4018D0(a1, (v9 >> v13--) & 1);\n    while ( v13 != -1 );\n  }\n  else\n  {\nLABEL_19:\n    sub_401650(a1, 0, v5);\n  }\n}\n", 
            "funcStartAddr": "0x40be70L", 
            "funcEndAddr": "0x40bf79L", 
            "funcName": "sub_40BE70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BF80(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // rcx\n  __int64 v4; // rbx\n  int v5; // er15\n  signed __int64 v6; // rdx\n  __int64 v7; // rsi\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rcx\n  unsigned __int16 *v11; // rdx\n  unsigned __int16 *v12; // rbx\n  int v13; // ebp\n  __int64 v14; // rdi\n\n  v2 = a2;\n  v3 = *((_QWORD *)off_49F6D0 + 1771);\n  v4 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL);\n  v5 = *(_DWORD *)(a1 + 4);\n  v6 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v7 = *(_QWORD *)(v3 + v6 + 56);\n  v8 = 0LL;\n  if ( v7 )\n    LOBYTE(v8) = *(_DWORD *)(v7 + 524) != 0;\n  v9 = *(_QWORD *)(v3 + v6 + 64);\n  v10 = 0LL;\n  if ( v9 )\n    LOBYTE(v10) = *(_DWORD *)(v9 + 524) != 0;\n  v11 = (unsigned __int16 *)(v4 + 16 * (v8 + v10) + 32);\n  if ( !v5 )\n  {\n    v14 = v2;\n    goto LABEL_13;\n  }\n  sub_401650(v2, 1, v11);\n  v12 = (unsigned __int16 *)(v4 + 80);\n  if ( v5 == 1 )\n    goto LABEL_16;\n  sub_401650(v2, 1, v12);\n  if ( v5 == 2 )\n    goto LABEL_16;\n  v13 = 2 - v5;\n  do\n  {\n    sub_401650(v2, 1, v12);\n    ++v13;\n  }\n  while ( v13 );\n  if ( (unsigned int)(v5 - 1) <= 1 )\n  {\nLABEL_16:\n    v14 = v2;\n    v11 = v12;\nLABEL_13:\n    sub_401650(v14, 0, v11);\n  }\n}\n", 
            "funcStartAddr": "0x40bf80L", 
            "funcEndAddr": "0x40c070L", 
            "funcName": "sub_40BF80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C070(__int64 a1, unsigned int a2, unsigned __int16 *a3, int a4, unsigned int a5)\n{\n  unsigned int v5; // er14\n  int v6; // ebp\n  unsigned __int16 *v7; // r12\n  unsigned __int16 *v8; // rbp\n  int v9; // ebx\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  if ( !a2 )\n    goto LABEL_7;\n  sub_401650(a1, 1, a3);\n  v8 = &v7[8 * v6];\n  if ( a2 != 1 )\n  {\n    v9 = 1 - a2;\n    do\n    {\n      sub_401650(a1, 1, v8);\n      ++v9;\n    }\n    while ( v9 );\n  }\n  if ( a2 < v5 )\n  {\n    a3 = v8;\nLABEL_7:\n    sub_401650(a1, 0, a3);\n  }\n}\n", 
            "funcStartAddr": "0x40c070L", 
            "funcEndAddr": "0x40c10eL", 
            "funcName": "sub_40C070"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C110(unsigned int a1, unsigned __int8 a2, int a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r14\n  int v7; // eax\n  unsigned __int8 v8; // r15\n  unsigned int v9; // edx\n  int v10; // esi\n  __int64 v11; // rcx\n  bool v12; // cl\n  unsigned __int8 v13; // cf\n  int v14; // ecx\n  _BOOL8 v15; // rbx\n  bool v16; // bp\n  __int64 v17; // rax\n  signed __int64 v18; // rcx\n  int v19; // [rsp+0h] [rbp-38h]\n  int v20; // [rsp+4h] [rbp-34h]\n  unsigned int v21; // [rsp+Ch] [rbp-2Ch]\n\n  v6 = a6;\n  v7 = a3;\n  v8 = a2;\n  v9 = (a1 + (a1 >> 31)) & 0xFFFFFFFE;\n  v10 = (signed int)a1 % 2;\n  if ( a1 + 1 > 2 )\n  {\n    v13 = _bittest(&v7, v10);\n  }\n  else\n  {\n    v11 = *(_QWORD *)(a4 + 56);\n    if ( !v11 || *(_DWORD *)(v11 + 72) == 14 )\n    {\n      v12 = 0;\n      goto LABEL_8;\n    }\n    v14 = *(_DWORD *)(v11 + 460);\n    v13 = _bittest(&v14, v10 + 2);\n  }\n  v12 = !v13;\nLABEL_8:\n  v15 = v12;\n  if ( !v10 )\n  {\n    v16 = 0;\n    sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, v9, -1, 0, &v19);\n    if ( !v19 )\n      goto LABEL_10;\n    v17 = *((_QWORD *)off_49F6D0 + 1771);\n    v18 = 632LL * v20;\n    if ( *(_DWORD *)(v17 + v18 + 72) == 14 )\n    {\n      v16 = 0;\n      goto LABEL_10;\n    }\n    v7 = *(_DWORD *)(v17 + v18 + 460);\n    v9 = (v21 + (v21 >> 31)) | 1;\n  }\n  v16 = !_bittest(&v7, v9);\nLABEL_10:\n  sub_401650(\n    v6,\n    v8,\n    (unsigned __int16 *)(32 * v15 + *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL) + 16LL * v16 + 96));\n}\n", 
            "funcStartAddr": "0x40c110L", 
            "funcEndAddr": "0x40c210L", 
            "funcName": "sub_40C110"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C210(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  __int64 v6; // r15\n  signed __int64 v7; // r13\n  int v8; // ebp\n  __int64 v9; // r8\n  __int64 v10; // r8\n  __int64 v11; // r8\n  __int64 v12; // rcx\n  signed __int64 v13; // rax\n  __int64 v14; // rdx\n  _BOOL8 v15; // rcx\n  __int64 v16; // rax\n  signed __int64 v17; // rax\n  signed int v18; // edx\n  __int64 v19; // rcx\n  _BOOL8 v20; // rcx\n  signed int v21; // edx\n\n  v5 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL);\n  v7 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v8 = *(_DWORD *)(a1 + 4);\n  sub_40C110(0, *(_BYTE *)(a1 + 4) & 1, v8, v5 + v7, a5, a2);\n  sub_40C110(1u, v8 & 2, v8, v5 + v7, v9, a2);\n  sub_40C110(2u, v8 & 4, v8, v5 + v7, v10, a2);\n  sub_40C110(3u, v8 & 8, v8, v5 + v7, v11, a2);\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n  {\n    v12 = *(_QWORD *)(v5 + v7 + 56);\n    if ( v12 )\n      v13 = *(_DWORD *)(v12 + 72) == 14 ? 2LL : 2LL * (*(_DWORD *)(v12 + 460) > 15);\n    else\n      v13 = 0LL;\n    v14 = *(_QWORD *)(v5 + v7 + 64);\n    if ( v14 )\n    {\n      if ( *(_DWORD *)(v14 + 72) == 14 )\n      {\n        v15 = 1LL;\n      }\n      else\n      {\n        v15 = *(_DWORD *)(v14 + 460) < 15;\n        LOBYTE(v15) = *(_DWORD *)(v14 + 460) > 15;\n      }\n    }\n    else\n    {\n      v15 = 0LL;\n    }\n    sub_401650(a2, v8 > 15, (unsigned __int16 *)(v6 + 16 * (v13 | v15) + 160));\n    if ( v8 >= 16 )\n    {\n      v16 = *(_QWORD *)(v5 + v7 + 56);\n      if ( !v16 )\n        goto LABEL_29;\n      if ( *(_DWORD *)(v16 + 72) == 14 )\n      {\n        v17 = 2LL;\n        goto LABEL_20;\n      }\n      v18 = *(_DWORD *)(v16 + 460);\n      if ( v18 >= 16 )\n        v17 = 2LL * ((v18 & 0xFFFFFFF0) == 32);\n      else\nLABEL_29:\n        v17 = 0LL;\nLABEL_20:\n      v19 = *(_QWORD *)(v5 + v7 + 64);\n      if ( v19 )\n      {\n        if ( *(_DWORD *)(v19 + 72) == 14 )\n        {\n          v20 = 1LL;\nLABEL_26:\n          sub_401650(a2, (v8 & 0xFFFFFFF0) == 32, (unsigned __int16 *)(v6 + 16 * (v17 | v20) + 224));\n          return;\n        }\n        v21 = *(_DWORD *)(v19 + 460);\n        if ( v21 >= 16 )\n        {\n          v20 = (v21 & 0xFFFFFFF0) == 32;\n          goto LABEL_26;\n        }\n      }\n      v20 = 0LL;\n      goto LABEL_26;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40c210L", 
            "funcEndAddr": "0x40c3dcL", 
            "funcName": "sub_40C210"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C3E0(__int64 a1, __int64 a2, unsigned int a3, int a4)\n{\n  unsigned int v4; // er15\n  bool v5; // bl\n  bool v6; // r12\n  unsigned int v7; // er14\n  __int64 v8; // rbp\n  __int64 v9; // rsi\n  signed int v10; // edi\n  char v11; // r9\n  bool v12; // r11\n  bool v13; // bl\n  char v14; // r9\n  bool v15; // bl\n  bool v16; // r10\n  int v17; // edx\n  int v18; // er8\n  __int64 v19; // r14\n  bool v20; // al\n  bool v21; // al\n  char v22; // si\n  char v23; // dl\n  __int64 v24; // rsi\n  __int64 *v25; // r14\n  int v26; // edi\n  char v27; // si\n  unsigned __int64 v28; // rsi\n  unsigned __int64 v29; // rdi\n  __int64 v30; // rbx\n  signed __int64 v31; // rbp\n  __int64 v32; // r9\n  signed __int64 v33; // rbp\n  bool v34; // [rsp+3h] [rbp-95h]\n  int v35; // [rsp+4h] [rbp-94h]\n  bool v36; // [rsp+8h] [rbp-90h]\n  bool v37; // [rsp+Ch] [rbp-8Ch]\n  int v38; // [rsp+10h] [rbp-88h]\n  bool v39; // [rsp+14h] [rbp-84h]\n  __int64 v40; // [rsp+18h] [rbp-80h]\n  int v41; // [rsp+20h] [rbp-78h]\n  int v42; // [rsp+24h] [rbp-74h]\n  int v43; // [rsp+28h] [rbp-70h]\n  int v44; // [rsp+2Ch] [rbp-6Ch]\n  int v45; // [rsp+38h] [rbp-60h]\n  int v46; // [rsp+3Ch] [rbp-5Ch]\n  int v47; // [rsp+40h] [rbp-58h]\n  int v48; // [rsp+44h] [rbp-54h]\n  __int64 v49; // [rsp+50h] [rbp-48h]\n  __int64 v50; // [rsp+58h] [rbp-40h]\n  __int64 v51; // [rsp+60h] [rbp-38h]\n\n  v4 = a3;\n  v51 = a2;\n  v38 = a4;\n  v40 = a1;\n  if ( a3 - 8 < 2 || a3 == 6 )\n  {\n    v37 = *((_DWORD *)off_49F6D0 + 21) == 0;\n    v36 = *((_DWORD *)off_49F6D0 + 21) != 0;\n    v6 = 0;\n    v5 = 0;\n  }\n  else\n  {\n    if ( a3 == 7 )\n    {\n      v5 = *((_DWORD *)off_49F6D0 + 21) == 0;\n      v6 = *((_DWORD *)off_49F6D0 + 21) != 0;\n      v37 = 0;\n    }\n    else\n    {\n      v37 = 0;\n      v6 = 0;\n      v5 = 0;\n    }\n    v36 = 0;\n  }\n  v7 = a3 - 1;\n  if ( v6 || v7 < 5 || (v8 = 0LL, v9 = 0LL, v5) )\n  {\n    v9 = *((unsigned int *)off_49F6D0 + 18);\n    v8 = *((unsigned int *)off_49F6D0 + 19);\n  }\n  v39 = v5;\n  v34 = *((_DWORD *)off_49F6D0 + 20) != 0;\n  v10 = *((_DWORD *)off_49F6D0 + 3);\n  v50 = v8;\n  v49 = v9;\n  if ( a3 > 5 )\n  {\n    sub_437320(v10, v9, v8, -1, 0, &v45);\n    sub_437320(*((_DWORD *)off_49F6D0 + 3), v9, v8, 0, -1, &v41);\n    v12 = v5;\n    v11 = 0;\n    LOBYTE(v35) = 0;\n    v13 = v4 == 0;\n    if ( (v39 || v6) == 1 )\n    {\n      v11 = 0;\n      LOBYTE(v35) = 0;\n      if ( v45 )\n        v35 = v47 + 2 * v48;\n      if ( v41 )\n      {\n        v14 = 2 * v44;\n        goto LABEL_23;\n      }\n    }\n  }\n  else\n  {\n    LOBYTE(v35) = 0;\n    sub_437270(v10, v9, v8, -1, 0, &v45);\n    sub_437270(*((_DWORD *)off_49F6D0 + 3), v9, v8, 0, -1, &v41);\n    v11 = 0;\n    v12 = v5;\n    v13 = v4 == 0;\n    if ( v7 <= 4 )\n    {\n      v11 = 0;\n      LOBYTE(v35) = 0;\n      if ( v45 )\n        v35 = v47 + 4 * v48;\n      if ( v41 )\n      {\n        v14 = 4 * v44;\nLABEL_23:\n        v11 = v43 + v14;\n        goto LABEL_24;\n      }\n    }\n  }\nLABEL_24:\n  v15 = v7 < 5 || v13;\n  if ( !v4 )\n  {\n    v16 = v36;\n    LOBYTE(v17) = 0;\n    goto LABEL_28;\n  }\n  if ( v7 <= 4 )\n  {\n    v16 = v36;\n    v17 = v49 + 4 * v50 + 1;\nLABEL_28:\n    v18 = v38;\n    v19 = v40;\n    v20 = v37;\n    goto LABEL_29;\n  }\n  v20 = v37;\n  v16 = v36;\n  v18 = v38;\n  v19 = v40;\n  if ( v36 || v37 )\n  {\n    LOBYTE(v17) = 18 - v37;\n  }\n  else\n  {\n    v17 = v49 + 2 * v50;\n    if ( v12 )\n      LOBYTE(v17) = v17 + 19;\n    else\n      LOBYTE(v17) = v17 + 23;\n  }\nLABEL_29:\n  v21 = v15 || v20;\n  if ( v18 )\n  {\n    if ( v4 == 3 )\n    {\n      v24 = *(_QWORD *)(v19 + 504);\n      v25 = (__int64 *)(v19 + 504);\n      v26 = (1 << v17) | (1 << (v17 + 1));\n    }\n    else\n    {\n      if ( v4 == 2 )\n      {\n        *(_QWORD *)(v19 + 504) |= (1 << v17) | (1 << (v17 + 1)) | (1 << (v17 + 4)) | (1 << (v17 + 5));\n        return;\n      }\n      v24 = *(_QWORD *)(v19 + 504) | (1 << v17);\n      *(_QWORD *)(v19 + 504) = v24;\n      if ( v4 != 4 )\n        goto LABEL_47;\n      v25 = (__int64 *)(v19 + 504);\n      v26 = 1 << (v17 + 4);\n    }\n    *v25 = v24 | v26;\nLABEL_47:\n    v27 = 17;\n    if ( v15 )\n      v27 = v4 != 0;\n    v23 = 18;\n    if ( !v16 )\n      v23 = 4 * !v12 + 19;\n    if ( v21 )\n      v23 = v27;\nLABEL_53:\n    LODWORD(v28) = v34;\n    LODWORD(v29) = v34;\n    if ( v41 )\n    {\n      v30 = *((_QWORD *)off_49F6D0 + 1771);\n      v31 = 632LL * v42;\n      LODWORD(v29) = 1;\n      if ( *(_DWORD *)(v30 + v31 + 72) != 14 )\n        v29 = (*(_QWORD *)(v30 + v31 + 504) & (unsigned __int64)(1 << (v23 + v11))) >> (v23 + v11);\n    }\n    if ( v45 )\n    {\n      v32 = *((_QWORD *)off_49F6D0 + 1771);\n      v33 = 632LL * v46;\n      LODWORD(v28) = 1;\n      if ( *(_DWORD *)(v32 + v33 + 72) != 14 )\n        v28 = (*(_QWORD *)(v32 + v33 + 504) & (unsigned __int64)(1 << (v35 + v23))) >> ((unsigned __int8)v35 + v23);\n    }\n    sub_401650(\n      v51,\n      v18,\n      (unsigned __int16 *)(16LL * ((signed int)v28 + 2 * (signed int)v29)\n                         + *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL)\n                         + ((signed __int64)dword_48A560[v4] << 6)\n                         + 288));\n    return;\n  }\n  v22 = 17;\n  if ( v15 )\n    v22 = v4 != 0;\n  v23 = 18;\n  if ( !v16 )\n    v23 = 4 * !v12 + 19;\n  if ( v21 )\n    v23 = v22;\n  if ( v4 != 2 )\n    goto LABEL_53;\n}\n", 
            "funcStartAddr": "0x40c3e0L", 
            "funcEndAddr": "0x40c897L", 
            "funcName": "sub_40C3E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C8A0(__int64 a1, __int64 a2, int a3, __int64 a4, int a5)\n{\n  int v5; // ebx\n  __int64 v6; // r15\n  __int64 v7; // r13\n  int v8; // eax\n  bool v9; // r8\n  __int64 v10; // rsi\n  signed __int64 v11; // rdi\n  signed __int64 v12; // r12\n  signed __int64 v13; // rcx\n  signed __int64 v14; // rsi\n  __int64 v15; // r14\n  int v16; // ebp\n  __int64 v17; // rax\n  signed int v18; // [rsp+Ch] [rbp-4Ch]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+18h] [rbp-40h]\n\n  v5 = a5;\n  v20 = a4;\n  v6 = a2;\n  v19 = a1;\n  v7 = a3;\n  v8 = *((_DWORD *)off_49F6D0 + 7);\n  v9 = 1;\n  if ( !v8 )\n    v9 = *(_DWORD *)(a1 + 532) != 0;\n  v18 = dword_48A590[a3];\n  v10 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL);\n  v11 = 240LL * dword_48A5C0[a3];\n  v12 = v10 + v11 + 928;\n  v13 = v10 + v11 + 9728;\n  if ( v9 )\n    v12 = v10 + v11 + 7328;\n  v14 = v10 + v11 + 3328;\n  if ( v9 )\n    v14 = v13;\n  if ( a3 != 7 && a3 != 1 )\n  {\n    --v18;\n    LOWORD(v15) = 0;\n  }\n  else\n  {\n    v20 -= 4LL;\n    LOWORD(v15) = 1;\n  }\n  if ( v18 > (unsigned __int16)v15 )\n  {\n    while ( 1 )\n    {\n      v15 = (signed __int16)v15;\n      v16 = *(_DWORD *)(v20 + 4LL * (signed __int16)v15);\n      if ( v8 || *(_DWORD *)(v19 + 532) )\n        v17 = (__int64)*(&off_48A5F0 + v7);\n      else\n        v17 = (__int64)*(&off_48A640 + v7);\n      sub_401650(v6, v16 != 0, (unsigned __int16 *)(v12 + 16LL * *(signed int *)(v17 + 4 * v15)));\n      if ( v16 )\n      {\n        sub_401650(v6, v5-- == 1, (unsigned __int16 *)(v14 + 16LL * *((signed int *)*(&off_48A690 + v7) + v15)));\n        if ( !v5 )\n          break;\n      }\n      LOWORD(v15) = v15 + 1;\n      if ( v18 <= (signed __int16)v15 )\n        break;\n      v8 = *((_DWORD *)off_49F6D0 + 7);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40c8a0L", 
            "funcEndAddr": "0x40ca1cL", 
            "funcName": "sub_40C8A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CA20(__int64 a1, __int64 a2, int a3, __int64 a4)\n{\n  __int64 v4; // r13\n  signed __int64 v5; // rbx\n  signed int v6; // er15\n  int v7; // eax\n  int v8; // ebp\n  __int16 v9; // r14\n  signed int v10; // eax\n  signed __int64 v11; // r13\n  int v12; // eax\n  int v13; // eax\n  int v14; // [rsp+4h] [rbp-44h]\n  __int64 v15; // [rsp+8h] [rbp-40h]\n  __int64 v16; // [rsp+10h] [rbp-38h]\n\n  v16 = a4;\n  v4 = a3;\n  v5 = dword_48A590[a3] + 1LL;\n  v6 = 1;\n  v14 = 0;\n  v15 = a3;\n  do\n  {\n    v7 = *(_DWORD *)(v16 + 4 * v5 - 8);\n    if ( v7 )\n    {\n      v8 = -v7;\n      if ( -v7 < 1 )\n        v8 = *(_DWORD *)(v16 + 4 * v5 - 8);\n      v9 = v7 < 0;\n      LOBYTE(v9) = v7 <= 0;\n      v10 = 4;\n      if ( v6 < 5 )\n        v10 = v6;\n      v11 = 80LL * dword_48A710[v4];\n      sub_401650(\n        a2,\n        v8 < 1,\n        (unsigned __int16 *)(16LL * v10 + v11 + *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL) + 5728));\n      if ( v8 < 2 )\n      {\n        v13 = v6 + 1;\n        if ( !v6 )\n          v13 = 0;\n        v6 = v13;\n      }\n      else\n      {\n        v12 = dword_48A6E0[v15];\n        if ( v14 <= v12 )\n          v12 = v14;\n        sub_40CB70(\n          a2,\n          v8 - 2,\n          (unsigned __int16 *)(16LL * v12 + *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 40LL) + v11 + 6528));\n        ++v14;\n        v6 = 0;\n      }\n      v4 = v15;\n      sub_4018D0(a2, v9);\n    }\n    --v5;\n  }\n  while ( v5 > 1 );\n}\n", 
            "funcStartAddr": "0x40ca20L", 
            "funcEndAddr": "0x40cb6cL", 
            "funcName": "sub_40CA20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CB70(__int64 a1, unsigned int a2, unsigned __int16 *a3)\n{\n  unsigned __int16 *v3; // r15\n  unsigned int v4; // ebx\n  int v5; // eax\n  unsigned int v6; // ebp\n  signed int v7; // eax\n  signed int v8; // ebx\n\n  v3 = a3;\n  if ( !a2 )\n    goto LABEL_17;\n  sub_401650(a1, 1, a3);\n  if ( a2 == 1 )\n    goto LABEL_17;\n  v4 = 2;\n  do\n  {\n    if ( v4 > 0xD )\n      break;\n    sub_401650(a1, 1, v3);\n    v5 = 1 - a2 + v4++ + 1;\n  }\n  while ( v5 != 2 );\n  if ( a2 > 0xC )\n  {\n    v6 = a2 - 13;\n    if ( a2 == 13 )\n    {\n      sub_4018D0(a1, 0);\n    }\n    else\n    {\n      v7 = 1;\n      v8 = -1;\n      do\n      {\n        v6 -= v7;\n        ++v8;\n        sub_4018D0(a1, 1);\n        v7 = 2 << v8;\n      }\n      while ( v6 >= 2 << v8 );\n      sub_4018D0(a1, 0);\n      do\n        sub_4018D0(a1, (v6 >> v8--) & 1);\n      while ( v8 != -1 );\n    }\n  }\n  else\n  {\nLABEL_17:\n    sub_401650(a1, 0, v3);\n  }\n}\n", 
            "funcStartAddr": "0x40cb70L", 
            "funcEndAddr": "0x40cc64L", 
            "funcName": "sub_40CB70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CC70(_DWORD *a1, __int64 a2)\n{\n  int v2; // edx\n  int v3; // eax\n  __int64 v4; // rcx\n  __int64 v5; // r15\n  __int64 v6; // rbx\n  signed __int64 v7; // rax\n\n  v2 = a1[1];\n  if ( v2 )\n  {\n    v3 = dword_49FAB4;\n    if ( a1[2] > 0 )\n    {\n      v4 = 0LL;\n      do\n        dword_49F9B0[v3 + v4++] = 0;\n      while ( (signed int)v4 < a1[2] );\n      dword_49FAB4 = v3 + v4;\n      v2 = a1[1];\n      v3 += v4;\n    }\n    dword_49FAB4 = v3 + 1;\n    dword_49F9B0[v3] = v2;\n    ++dword_49FAB0;\n  }\n  else\n  {\n    v5 = *((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3);\n    v6 = dword_49FAB4;\n    if ( dword_49FAB4 <= 63LL )\n    {\n      memset(&dword_49F9B0[dword_49FAB4], 0, 4LL * (unsigned int)(63 - dword_49FAB4) + 4);\n      v7 = v6 - 1;\n      do\n      {\n        ++v7;\n        LODWORD(v6) = v6 + 1;\n      }\n      while ( v7 < 63 );\n      dword_49FAB4 = v6;\n    }\n    sub_40C3E0(v5, a2, a1[6], dword_49FAB0 > 0);\n    if ( dword_49FAB0 > 0 )\n    {\n      sub_40C8A0(v5, a2, a1[6], (__int64)dword_49F9B0, dword_49FAB0);\n      sub_40CA20(v5, a2, a1[6], (__int64)dword_49F9B0);\n    }\n    dword_49FAB0 = 0;\n    dword_49FAB4 = 0;\n  }\n}\n", 
            "funcStartAddr": "0x40cc70L", 
            "funcEndAddr": "0x40cdc2L", 
            "funcName": "sub_40CC70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CDD0(__int64 a1, unsigned int a2, int a3)\n{\n  int v3; // ebx\n  unsigned int v4; // ebp\n  signed int i; // eax\n  int v6; // ebx\n\n  v3 = a3;\n  v4 = a2;\n  for ( i = 1 << a3; v4 >= 1 << v3; i = 1 << v3 )\n  {\n    v4 -= i;\n    sub_4018D0(a1, 1);\n    ++v3;\n  }\n  sub_4018D0(a1, 0);\n  if ( v3 )\n  {\n    v6 = v3 - 1;\n    do\n      sub_4018D0(a1, (v4 >> v6--) & 1);\n    while ( v6 != -1 );\n  }\n}\n", 
            "funcStartAddr": "0x40cdd0L", 
            "funcEndAddr": "0x40ce3eL", 
            "funcName": "sub_40CDD0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_40CE40()\n{\n  fwrite(\n    \"\\n\"\n    \"   lencod [-h] [-p defenc.cfg] {[-f curenc1.cfg]...[-f curencN.cfg]} {[-p EncParam1=EncValue1]..[-p EncParamM=EncVal\"\n    \"ueM]}\\n\"\n    \"\\n\"\n    \"## Parameters\\n\"\n    \"\\n\"\n    \"## Options\\n\"\n    \"   -h :  prints function usage\\n\"\n    \"   -d :  use <defenc.cfg> as default file for parameter initializations.\\n\"\n    \"         If not used then file defaults to encoder.cfg in local directory.\\n\"\n    \"   -f :  read <curencM.cfg> for reseting selected encoder parameters.\\n\"\n    \"         Multiple files could be used that set different parameters\\n\"\n    \"   -p :  Set parameter <EncParamM> to <EncValueM>.\\n\"\n    \"         See default encoder.cfg file for description of all parameters.\\n\"\n    \"\\n\"\n    \"## Supported video file formats\\n\"\n    \"   RAW:  .yuv -> YUV 4:2:0\\n\"\n    \"\\n\"\n    \"## Examples of usage:\\n\"\n    \"   lencod\\n\"\n    \"   lencod  -h\\n\"\n    \"   lencod  -d default.cfg\\n\"\n    \"   lencod  -f curenc1.cfg\\n\"\n    \"   lencod  -f curenc1.cfg -p InputFile=\\\"e:\\\\data\\\\container_qcif_30.yuv\\\" -p SourceWidth=176 -p SourceHeight=144\\n\"\n    \"   lencod  -f curenc1.cfg -p FramesToBeEncoded=30 -p QPISlice=28 -p QPPSlice=28 -p QPBSlice=30\\n\",\n    0x3BBuLL,\n    1uLL,\n    stderr);\n  exit(-1);\n}\n", 
            "funcStartAddr": "0x40ce40L", 
            "funcEndAddr": "0x40ce66L", 
            "funcName": "sub_40CE40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CE70(signed int a1, __int64 a2)\n{\n  signed int v2; // er14\n  void **v3; // rax\n  int v4; // ecx\n  bool v5; // zf\n  const char *v6; // r12\n  const char *v7; // rbp\n  signed int v8; // er15\n  __int64 v9; // rax\n  const char *v10; // rax\n  char *v11; // rbp\n  int v12; // eax\n  const char *v13; // rbp\n  __int64 v14; // rax\n  char *v15; // rbp\n  int v16; // eax\n  int v17; // ebp\n  __int64 v18; // r12\n  const char *v19; // rdi\n  char *v20; // rax\n  char *v21; // r14\n  __int64 v22; // rbp\n  char *v23; // rbx\n  char *v24; // rax\n  char v25; // cl\n  int v26; // eax\n  __m128i *v27; // rdi\n  int v28; // eax\n  char *v29; // rcx\n  void **v30; // rbx\n  int v31; // eax\n  int v32; // eax\n  signed int v33; // eax\n  __int64 v34; // r8\n  int v35; // eax\n  __int64 v36; // r9\n  double v37; // xmm2_8\n  double v38; // xmm0_8\n  double v39; // xmm1_8\n  int v40; // ebp\n  signed int v41; // ecx\n  int v42; // eax\n  int v43; // ecx\n  unsigned int v44; // ebp\n  unsigned int v45; // esi\n  unsigned int v46; // edx\n  __int32 v47; // edx\n  unsigned int v48; // eax\n  unsigned int v49; // esi\n  unsigned int v50; // ecx\n  signed int v51; // ecx\n  __int32 v52; // ecx\n  __int32 v53; // eax\n  const char *v54; // rbx\n  const char *v55; // rbx\n  const char *v56; // r12\n  int v57; // eax\n  int v58; // edx\n  _DWORD *v59; // rcx\n  signed int v60; // eax\n  __int64 v61; // rdx\n  int v62; // esi\n  unsigned int v63; // ebx\n  signed int v64; // eax\n  FILE *v65; // r15\n  void *v66; // rax\n  signed __int64 v67; // rbx\n  __int64 v68; // rbp\n  __int64 v69; // rdx\n  bool v70; // cl\n  int v71; // ebx\n  int v72; // er14\n  void *v73; // rax\n  int v74; // er14\n  __int64 v75; // rbp\n  __int64 v76; // rdx\n  int v77; // esi\n  void *v78; // rax\n  __int64 v79; // rbp\n  signed __int64 v80; // rbx\n  __int64 v81; // rdx\n  __int64 v82; // rdx\n  const __m128i *v83; // rsi\n  signed int v84; // eax\n  __int64 v85; // rcx\n  __int64 v86; // r8\n  __m128i v87; // xmm1\n  __int32 v88; // eax\n  int result; // eax\n  unsigned __int64 v90; // rcx\n  signed __int64 v91; // rdx\n  char *v92; // rsi\n  unsigned int **v93; // rbx\n  int v94; // eax\n  __int64 v95; // [rsp+8h] [rbp-40h]\n  double v96; // [rsp+8h] [rbp-40h]\n  signed int v97; // [rsp+10h] [rbp-38h]\n  char v98; // [rsp+14h] [rbp-34h]\n\n  v2 = a1;\n  memset(&unk_4E54E0, 0, 0xE08uLL);\n  puts(\"Setting Default Parameters...\");\n  if ( s1 )\n  {\n    v3 = &off_49D168;\n    do\n    {\n      v4 = *((_DWORD *)v3 + 2);\n      if ( v4 == 2 )\n      {\n        *(_QWORD *)*v3 = v3[2];\n      }\n      else if ( !v4 )\n      {\n        *(_DWORD *)*v3 = (signed int)*((double *)v3 + 2);\n      }\n      v5 = v3[6] == 0LL;\n      v3 += 7;\n    }\n    while ( !v5 );\n  }\n  if ( a1 == 2 )\n  {\n    if ( !strncmp(*(const char **)(a2 + 8), \"-h\", 2uLL) )\n      goto LABEL_321;\n  }\n  else if ( a1 >= 3 )\n  {\n    v6 = *(const char **)(a2 + 8);\n    if ( !strncmp(*(const char **)(a2 + 8), \"-d\", 2uLL) )\n    {\n      v7 = *(const char **)(a2 + 16);\n      v8 = 3;\n    }\n    else\n    {\n      v7 = \"encoder.cfg\";\n      v8 = 1;\n    }\n    if ( !strncmp(v6, \"-h\", 2uLL) )\n      goto LABEL_321;\n    goto LABEL_17;\n  }\n  v7 = \"encoder.cfg\";\n  v8 = 1;\nLABEL_17:\n  LODWORD(v9) = printf(\"Parsing Configfile %s\", v7);\n  v10 = sub_40E590(v9, v7);\n  v11 = (char *)v10;\n  if ( !v10 )\n    error((__int64)byte_4F8250, 300);\n  v12 = strlen(v10);\n  sub_40E690(v11, v12);\n  putchar(10);\n  free(v11);\n  if ( v8 < a1 )\n  {\n    v95 = a1;\n    v97 = a1;\n    while ( 1 )\n    {\n      v13 = *(const char **)(a2 + 8LL * v8);\n      if ( !strncmp(*(const char **)(a2 + 8LL * v8), \"-h\", 2uLL) )\n        break;\n      LODWORD(v14) = strncmp(v13, \"-f\", 2uLL);\n      if ( (_DWORD)v14 )\n      {\n        if ( strncmp(v13, \"-p\", 2uLL) )\n        {\n          snprintf(\n            byte_4F8250,\n            0x12CuLL,\n            \"Error in command line, ac %d, around string '%s', missing -f or -p parameters?\",\n            (unsigned int)v8,\n            v13);\n          error((__int64)byte_4F8250, 300);\n        }\n        ++v8;\n        v17 = 0;\n        LODWORD(v18) = v8;\n        if ( v8 < v2 )\n        {\n          v18 = v8;\n          v17 = 0;\n          do\n          {\n            v19 = *(const char **)(a2 + 8 * v18);\n            if ( *v19 == 45 )\n              break;\n            ++v18;\n            v17 += strlen(v19);\n          }\n          while ( v18 < v95 );\n        }\n        v20 = (char *)malloc(v17 + 1000);\n        v21 = v20;\n        if ( !v20 )\n          sub_43EF40(0LL, (__int64)\"Configure: content\");\n        *v20 = 0;\n        if ( v8 < (signed int)v18 )\n        {\n          v22 = v8;\n          do\n          {\n            v23 = *(char **)(a2 + 8 * v22);\n            v24 = &v21[strlen(v21)];\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                v25 = *v23;\n                if ( *v23 != 61 )\n                  break;\n                *(_WORD *)v24 = 15648;\n                v24[2] = 32;\n                v24 += 3;\n                ++v23;\n              }\n              if ( !v25 )\n                break;\n              *v24++ = v25;\n              ++v23;\n            }\n            *v24 = 0;\n            ++v22;\n          }\n          while ( (_DWORD)v18 != (_DWORD)v22 );\n          v8 = v18;\n        }\n        printf(\"Parsing command line string '%s'\", v21);\n        v26 = strlen(v21);\n        sub_40E690(v21, v26);\n        free(v21);\n        putchar(10);\n        v2 = v97;\n        if ( v8 >= v97 )\n          goto LABEL_47;\n      }\n      else\n      {\n        v15 = sub_40E590(v14, *(const char **)(a2 + 8LL * v8 + 8));\n        if ( !v15 )\n          error((__int64)byte_4F8250, 300);\n        printf(\"Parsing Configfile %s\", *(_QWORD *)(a2 + 8 * (v8 + 1LL)));\n        v16 = strlen(v15);\n        sub_40E690(v15, v16);\n        putchar(10);\n        free(v15);\n        v8 += 2;\n        if ( v8 >= v2 )\n          goto LABEL_47;\n      }\n    }\nLABEL_321:\n    sub_40CE40();\n  }\nLABEL_47:\n  putchar(10);\n  v27 = (__m128i *)dest;\n  v28 = *((_DWORD *)dest + 824);\n  *((_DWORD *)dest + 806) = 1;\n  v29 = s1;\n  if ( !s1 )\n    goto LABEL_72;\n  v96 = (double)(6 * v28 - 48);\n  v30 = &off_49D168;\n  do\n  {\n    v31 = *((_DWORD *)v30 + 6);\n    switch ( v31 )\n    {\n      case 3:\n        if ( *((_DWORD *)v30 + 2) )\n          break;\n        v33 = *(_DWORD *)*v30;\n        v34 = (unsigned int)(signed int)(*((double *)v30 + 4) - v96);\n        goto LABEL_61;\n      case 2:\n        v35 = *((_DWORD *)v30 + 2);\n        if ( v35 == 2 )\n        {\n          if ( *((double *)v30 + 4) > *(double *)*v30 )\n          {\n            snprintf(\n              byte_4F8250,\n              0x12CuLL,\n              \"Error in input parameter %s. Check configuration file. Value should not be smaller than %2.f.\");\n            goto LABEL_69;\n          }\n        }\n        else if ( !v35 && *(_DWORD *)*v30 < (signed int)*((double *)v30 + 4) )\n        {\n          snprintf(\n            byte_4F8250,\n            0x12CuLL,\n            \"Error in input parameter %s. Check configuration file. Value should not be smaller than %d.\");\n          goto LABEL_69;\n        }\n        break;\n      case 1:\n        v32 = *((_DWORD *)v30 + 2);\n        if ( v32 != 2 )\n        {\n          if ( v32 )\n            break;\n          v33 = *(_DWORD *)*v30;\n          v34 = (unsigned int)(signed int)*((double *)v30 + 4);\nLABEL_61:\n          v36 = (unsigned int)(signed int)*((double *)v30 + 5);\n          if ( v33 < (signed int)v34 || v33 > (signed int)v36 )\n          {\n            snprintf(\n              byte_4F8250,\n              0x12CuLL,\n              \"Error in input parameter %s. Check configuration file. Value should be in [%d, %d] range.\",\n              v29,\n              v34,\n              v36);\n            goto LABEL_69;\n          }\n          break;\n        }\n        v37 = *(double *)*v30;\n        v38 = *((double *)v30 + 4);\n        v39 = *((double *)v30 + 5);\n        if ( v38 > v37 || v37 > v39 )\n        {\n          snprintf(\n            byte_4F8250,\n            0x12CuLL,\n            \"Error in input parameter %s. Check configuration file. Value should be in [%.2f, %.2f] range.\",\n            v38,\n            v39);\nLABEL_69:\n          error((__int64)byte_4F8250, 400);\n        }\n        break;\n      default:\n        break;\n    }\n    v29 = (char *)v30[6];\n    v30 += 7;\n  }\n  while ( v29 );\n  v27 = (__m128i *)dest;\nLABEL_72:\n  if ( *(double *)&v27[151].m128i_i64[1] == 0.0 )\n    v27[151].m128i_i64[1] = 4629137466983448576LL;\n  v27[5] = (__m128i)xmmword_4895E0;\n  v27[6] = (__m128i)xmmword_4895F0;\n  v27[7] = (__m128i)xmmword_489600;\n  v27[8] = (__m128i)xmmword_489610;\n  v27[9] = (__m128i)xmmword_489620;\n  v27[10] = (__m128i)xmmword_489630;\n  v27[11] = (__m128i)xmmword_489640;\n  _mm_storeu_si128(v27 + 12, _mm_load_si128((const __m128i *)&xmmword_489650));\n  if ( v27[82].m128i_i32[1] )\n    v40 = v27[77].m128i_i32[1] + 1;\n  else\n    v40 = 1;\n  v41 = v27[3].m128i_i32[1];\n  if ( v41 > 3 )\n  {\n    v43 = v41 - 4;\n    v42 = v27->m128i_i64[1];\n  }\n  else\n  {\n    v42 = v27->m128i_i64[1];\n    v43 = 0;\n    v44 = v42 * v40 - 1;\n    if ( v44 )\n    {\n      v45 = -1;\n      v46 = v44;\n      do\n      {\n        v46 >>= 1;\n        ++v45;\n      }\n      while ( v46 );\n      if ( v45 >= 4 )\n      {\n        v43 = -4;\n        do\n        {\n          v44 >>= 1;\n          ++v43;\n        }\n        while ( v44 );\n      }\n    }\n  }\n  dword_4FA0E4 = v43;\n  v47 = v27[1].m128i_i32[1];\n  v48 = 2 * v42 * (v47 + 1) - 1;\n  v49 = -1;\n  v50 = v48;\n  do\n  {\n    v50 >>= 1;\n    ++v49;\n  }\n  while ( v50 );\n  v51 = 0;\n  if ( v49 >= 4 )\n  {\n    v51 = -4;\n    do\n    {\n      v48 >>= 1;\n      ++v51;\n    }\n    while ( v48 );\n  }\n  dword_4FA0E8 = v51;\n  v52 = v27[77].m128i_i32[1];\n  if ( v52 > v47 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Number of B-frames %d can not exceed the number of frames skipped\");\n    error((__int64)byte_4F8250, 400);\n  }\n  if ( v52 && v27[78].m128i_i32[0] >= 2u )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Unsupported direct mode=%d, use TEMPORAL=0 or SPATIAL=1\");\n    error((__int64)byte_4F8250, 400);\n  }\n  v53 = v27[180].m128i_i32[0];\n  if ( v53 > 0 || v27[180].m128i_i32[1] > 0 )\n  {\n    if ( !v27[78].m128i_i32[1] )\n    {\n      printf(\"\\nDirectInferenceFlag set to 1 due to interlace coding.\");\n      v27 = (__m128i *)dest;\n      v53 = *((_DWORD *)dest + 720);\n    }\n    v27[78].m128i_i32[1] = 1;\n    if ( v53 > 0 && v27[180].m128i_i32[2] >= 2u )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Incorrect value %d for IntraBottom. Use 0 (disable) or 1 (enable).\");\n      error((__int64)byte_4F8250, 400);\n    }\n  }\n  if ( v27[147].m128i_i32[1] >= 2u )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Unsupported symbol mode=%d, use UVLC=0 or CABAC=1\");\n    error((__int64)byte_4F8250, 400);\n  }\n  fd = open(v27[14].m128i_i8, 0);\n  if ( fd == -1 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Input file %s does not exist\", (char *)dest + 224);\n    error((__int64)byte_4F8250, 500);\n  }\n  v54 = (char *)dest + 624;\n  if ( strlen((const char *)dest + 624) )\n  {\n    dword_4FA124 = open(v54, 577, 384LL);\n    if ( dword_4FA124 == -1 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s\", (char *)dest + 624);\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  v55 = (char *)dest + 824;\n  if ( strlen((const char *)dest + 824) )\n  {\n    qword_4F9F38 = fopen(v55, \"w\");\n    if ( !qword_4F9F38 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s\", (char *)dest + 824);\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  v56 = (const char *)dest;\n  v57 = *((_DWORD *)dest + 16) % 16;\n  v58 = 16 - v57;\n  v59 = off_49F6D0;\n  if ( !v57 )\n    v58 = 0;\n  *((_DWORD *)off_49F6D0 + 18182) = v58;\n  if ( *((_DWORD *)v56 + 720) || *((_DWORD *)v56 + 721) )\n  {\n    v60 = *((_DWORD *)v56 + 17);\n    if ( v60 & 1 )\n      error((__int64)\"even number of lines required for interlaced coding\", 500);\n    if ( v60 % 32 )\n    {\n      LODWORD(v61) = 32 - v60 % 32;\n      v59 = off_49F6D0;\n      goto LABEL_128;\n    }\n    v59 = off_49F6D0;\nLABEL_131:\n    v59[18183] = 0;\n    goto LABEL_132;\n  }\n  v60 = *((_DWORD *)v56 + 17);\n  v77 = *((_DWORD *)v56 + 17) % 16;\n  if ( !v77 )\n    goto LABEL_131;\n  LODWORD(v61) = 16 - v77;\nLABEL_128:\n  v59[18183] = v61;\n  if ( (_DWORD)v61 )\n  {\n    v62 = v59[18182];\n    goto LABEL_133;\n  }\nLABEL_132:\n  v62 = v59[18182];\n  v61 = 0LL;\n  if ( v62 )\n  {\nLABEL_133:\n    printf(\n      \"Warning: Automatical cropping activated: Coded frame Size: %dx%d\\n\",\n      (unsigned int)(*((_DWORD *)v56 + 16) + v62),\n      (unsigned int)(v60 + v61));\n    v56 = (const char *)dest;\n  }\n  if ( *((_DWORD *)v56 + 788) )\n  {\n    v63 = *((_DWORD *)v56 + 789);\n    if ( v63 <= 6 )\n    {\n      v64 = 69;\n      if ( _bittest(&v64, v63) )\n      {\n        if ( strlen(v56 + 2952) )\n        {\n          v65 = fopen(v56 + 2952, \"r\");\n          v56 = (const char *)dest;\n          if ( !v65 )\n          {\n            snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s\", (char *)dest + 2952);\n            error((__int64)byte_4F8250, 500);\n          }\n          v63 = *((_DWORD *)dest + 789);\n          if ( v63 != 6 )\n          {\nLABEL_140:\n            if ( v63 == 2 )\n            {\n              *((_QWORD *)v56 + 395) = malloc(4LL * *((signed int *)v56 + 788));\n              v78 = malloc(4LL * *((signed int *)v56 + 788));\n              *((_QWORD *)v56 + 396) = v78;\n              if ( !*((_QWORD *)v56 + 395) )\n                sub_43EF40((__int64)v78, (__int64)\"PatchInp: input->top_left\");\n              if ( !v78 )\n                sub_43EF40(0LL, (__int64)\"PatchInp: input->bottom_right\");\n              if ( *((_DWORD *)v56 + 788) > 0 )\n              {\n                v79 = 0LL;\n                v80 = 0LL;\n                do\n                {\n                  __isoc99_fscanf(v65, \"%d\", v79 + *((_QWORD *)v56 + 395));\n                  __isoc99_fscanf(v65, \"%*[^\\n]\", v81);\n                  __isoc99_fscanf(v65, \"%d\", v79 + *((_QWORD *)dest + 396));\n                  __isoc99_fscanf(v65, \"%*[^\\n]\", v82);\n                  ++v80;\n                  v56 = (const char *)dest;\n                  v79 += 4LL;\n                }\n                while ( v80 < *((signed int *)dest + 788) );\n              }\n            }\n            else if ( !v63 )\n            {\n              v66 = malloc(4LL * *((signed int *)v56 + 788) + 4);\n              *((_QWORD *)v56 + 398) = v66;\n              if ( !v66 )\n                sub_43EF40(0LL, (__int64)\"PatchInp: input->run_length_minus1\");\n              if ( *((_DWORD *)v56 + 788) >= 0 )\n              {\n                v67 = -1LL;\n                v68 = 0LL;\n                do\n                {\n                  __isoc99_fscanf(v65, \"%d\", v68 + *((_QWORD *)v56 + 398));\n                  __isoc99_fscanf(v65, \"%*[^\\n]\", v69);\n                  v56 = (const char *)dest;\n                  ++v67;\n                  v68 += 4LL;\n                }\n                while ( v67 < *((signed int *)dest + 788) );\n              }\n            }\n            goto LABEL_172;\n          }\n        }\n        else\n        {\n          v65 = 0LL;\n          if ( v63 != 6 )\n            goto LABEL_140;\n        }\n        v70 = 1;\n        if ( !*((_DWORD *)v56 + 720) )\n          v70 = *((_DWORD *)v56 + 721) != 0;\n        v71 = (*((_DWORD *)v56 + 16) + *((_DWORD *)off_49F6D0 + 18182)) / 16;\n        v72 = (*((_DWORD *)v56 + 17) + *((_DWORD *)off_49F6D0 + 18183)) / 16 / (v70 + 1);\n        v73 = malloc(v72 * (signed __int64)v71);\n        *((_QWORD *)v56 + 397) = v73;\n        if ( !v73 )\n          sub_43EF40(0LL, (__int64)\"PatchInp: input->slice_group_id\");\n        v74 = v71 * v72;\n        if ( v74 > 0 )\n        {\n          v75 = 0LL;\n          do\n          {\n            __isoc99_fscanf(v65, \"%d\", &v98);\n            *(_BYTE *)(*((_QWORD *)dest + 397) + v75) = v98;\n            if ( *((_DWORD *)dest + 788) < (signed int)*(unsigned __int8 *)(*((_QWORD *)dest + 397) + v75) )\n            {\n              snprintf(byte_4F8250, 0x12CuLL, \"Error read slice group information from file %s\", (char *)dest + 2952);\n              error((__int64)byte_4F8250, 500);\n            }\n            __isoc99_fscanf(v65, \"%*[^\\n]\", v76);\n            ++v75;\n          }\n          while ( v74 != v75 );\n        }\nLABEL_172:\n        fclose(v65);\n      }\n    }\n  }\n  v83 = (const __m128i *)dest;\n  if ( *((_DWORD *)dest + 587) && *((_DWORD *)dest + 330) && (*((_DWORD *)dest + 720) || *((_DWORD *)dest + 721)) )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"PyramidRefReorder Not supported with Interlace encoding methods\\n\");\n    error((__int64)byte_4F8250, 400);\n  }\n  if ( *((_DWORD *)dest + 588) && *((_DWORD *)dest + 330) && (*((_DWORD *)dest + 720) || *((_DWORD *)dest + 721)) )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"PocMemoryManagement not supported with Interlace encoding methods\\n\");\n    error((__int64)byte_4F8250, 400);\n  }\n  if ( *((_DWORD *)dest + 720) >= 3u )\n  {\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"Unsupported PicInterlace=%d, use frame based coding=0 or field based coding=1 or adaptive=2\");\n    error((__int64)byte_4F8250, 400);\n  }\n  if ( *((_DWORD *)dest + 721) >= 3u )\n  {\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"Unsupported MbInterlace=%d, use frame based coding=0 or field based coding=1 or adaptive=2\");\n    error((__int64)byte_4F8250, 400);\n  }\n  v84 = *((_DWORD *)dest + 616);\n  if ( v84 )\n  {\n    if ( v84 >= 2 )\n    {\n      snprintf(\n        byte_4F8250,\n        0x12CuLL,\n        \"RDOptimization=2 mode has been deactivated do to diverging of real and simulated decoders.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  else if ( *((_DWORD *)dest + 721) )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"MB AFF is not compatible with non-rd-optimized coding.\");\n    error((__int64)byte_4F8250, 500);\n  }\n  v85 = *((unsigned int *)dest + 728);\n  v86 = *((unsigned int *)dest + 9);\n  if ( (signed int)v85 < 0 || (signed int)v85 >= (signed int)v86 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"NumFramesInELSubSeq (%d) is out of range [0,%d).\", v85, v86);\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( (signed int)v85 > 0 && !*((_DWORD *)dest + 590) )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Enhanced GOP is not supported in bitstream mode and RTP mode yet.\");\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( (*((_DWORD *)dest + 720) || *((_DWORD *)dest + 721)) && *((_DWORD *)dest + 735) == 1 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"AFF is not compatible with spare picture.\");\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( *((_DWORD *)dest + 590) != 1 && *((_DWORD *)dest + 735) == 1 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Only RTP output mode is compatible with spare picture features.\");\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( (*((_DWORD *)dest + 321) > 0 || *((_DWORD *)dest + 322) > 0) && *((_DWORD *)dest + 721) )\n  {\n    printf(\"Weighted prediction coding is not supported for MB AFF currently.\", dest, v61);\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( *((_DWORD *)dest + 728) > 0 && *((_DWORD *)dest + 321) > 0 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Enhanced GOP is not supported in weighted prediction coding mode yet.\");\n    error((__int64)byte_4F8250, 500);\n  }\n  if ( *((_DWORD *)dest + 788) > 0 && (unsigned int)(*((_DWORD *)dest + 789) - 3) <= 2 )\n    *((_DWORD *)dest + 788) = 1;\n  if ( v83[202].m128i_i32[1] )\n  {\n    v87 = _mm_add_epi64(\n            _mm_shuffle_epi32(_mm_loadl_epi64((const __m128i *)((char *)off_49F6D0 + 72728)), 212),\n            _mm_shuffle_epi32(_mm_loadl_epi64(v83 + 4), 212));\n    if ( _mm_cvtsi128_si32(v87) * _mm_cvtsi128_si32(_mm_shuffle_epi32(v87, 78)) / 256 % v83[203].m128i_i32[0] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Basic unit is not defined correctly.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( v83[77].m128i_i32[1]\n    && v83[82].m128i_i32[1]\n    && v83[76].m128i_i32[3]\n    && v83[76].m128i_i32[2]\n    && v83[200].m128i_i32[2] )\n  {\n    error((__int64)\"Stored B pictures combined with IDR pictures only supported in Picture Order Count type 0\\n\", -1000);\n  }\n  if ( !v83[78].m128i_i32[0] && v83[2].m128i_i32[1] <= 1 && v83[77].m128i_i32[1] > 0 )\n    error((__int64)\"temporal direct needs at least 2 ref frames\\n\", -1000);\n  if ( v83[201].m128i_i32[1] )\n  {\n    if ( v83[79].m128i_i32[2] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"\\nThe new 8x8 mode is not implemented for sp-frames.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( (unsigned int)(LODWORD(v83->m128i_i64[0]) - 100) >= 0x2D )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"\\nAllowTransform8x8 may be used only with ProfileIDC %d to %d.\", 100LL, 144LL);\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( v83[203].m128i_i32[2] && (unsigned int)(LODWORD(v83->m128i_i64[0]) - 100) >= 0x2D )\n  {\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"\\nScalingMatrixPresentFlag may be used only with ProfileIDC %d to %d.\",\n      100LL,\n      144LL);\n    error((__int64)byte_4F8250, 500);\n  }\n  v88 = v83[4].m128i_i32[2];\n  if ( v88 == 2 )\n  {\n    if ( SLODWORD(v83->m128i_i64[0]) <= 121 )\n    {\n      snprintf(\n        byte_4F8250,\n        0x12CuLL,\n        \"\\nFRExt Profile(YUV Format) Error!\\nYUV422 can be used only with ProfileIDC %d or %d\\n\",\n        122LL,\n        144LL);\n      error((__int64)byte_4F8250, 500);\n    }\nLABEL_262:\n    if ( v83[208].m128i_i32[0] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"\\nResidue color transform is supported only in YUV444.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  else\n  {\n    if ( v88 != 3 )\n      goto LABEL_262;\n    if ( SLODWORD(v83->m128i_i64[0]) <= 143 )\n    {\n      snprintf(\n        byte_4F8250,\n        0x12CuLL,\n        \"\\nFRExt Profile(YUV Format) Error!\\nYUV444 can be used only with ProfileIDC %d.\\n\",\n        144LL);\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  result = v83->m128i_i64[0];\n  v90 = (unsigned int)(LODWORD(v83->m128i_i64[0]) - 66);\n  if ( (unsigned int)v90 > 0x38 || (v91 = 72075203408037889LL, !_bittest64(&v91, v90)) )\n  {\n    if ( result != 144 )\n    {\n      snprintf(\n        byte_4F8250,\n        0x12CuLL,\n        \"Profile must be baseline(66)/main(77)/extended(88) or FRExt (%d to %d).\",\n        100LL,\n        144LL);\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( result == 66 )\n  {\n    if ( v83[77].m128i_i32[1] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"B pictures are not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[79].m128i_i32[2] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"SP pictures are not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[147].m128i_i32[3] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Data partitioning is not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[80].m128i_i32[1] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Weighted prediction is not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[80].m128i_i32[2] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Weighted prediction is not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[147].m128i_i32[1] == 1 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"CABAC is not allowed in baseline.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( LODWORD(v83->m128i_i64[0]) == 77 )\n  {\n    if ( v83[79].m128i_i32[2] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"SP pictures are not allowed in main.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[147].m128i_i32[3] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Data partitioning is not allowed in main.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[197].m128i_i32[0] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"num_slice_groups_minus1>0 (FMO) is not allowed in main.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[200].m128i_i32[1] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Redundant pictures are not allowed in main.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( LODWORD(v83->m128i_i64[0]) == 88 )\n  {\n    if ( !v83[78].m128i_i32[1] )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"direct_8x8_inference flag must be equal to 1 in extended.\");\n      error((__int64)byte_4F8250, 500);\n    }\n    if ( v83[147].m128i_i32[1] == 1 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"CABAC is not allowed in extended.\");\n      error((__int64)byte_4F8250, 500);\n    }\n  }\n  if ( v83[202].m128i_i32[0] )\n  {\n    puts(\"******************************************************\");\n    puts(\"*               Encoder Parameters                   *\");\n    puts(\"******************************************************\");\n    v92 = s1;\n    if ( s1 )\n    {\n      v93 = (unsigned int **)&off_49D168;\n      do\n      {\n        v94 = *((_DWORD *)v93 + 2);\n        switch ( v94 )\n        {\n          case 2:\n            printf(\"Parameter %s = %.2f\\n\", *(double *)*v93);\n            break;\n          case 1:\n            printf(\"Parameter %s = %s\\n\", v92, *v93);\n            break;\n          case 0:\n            printf(\"Parameter %s = %d\\n\", v92, **v93);\n            break;\n        }\n        v92 = (char *)v93[6];\n        v93 += 7;\n      }\n      while ( v92 );\n    }\n    result = puts(\"******************************************************\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ce70L", 
            "funcEndAddr": "0x40e58cL", 
            "funcName": "sub_40CE70"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__usercall sub_40E590@<rax>(__int64 a1@<rax>, const char *a2@<rdi>)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  _BYTE *v4; // r14\n  const char *v5; // rdx\n  unsigned __int64 v7; // r12\n  _BYTE *v8; // rax\n  __int64 v9; // [rsp-8h] [rbp-28h]\n\n  v9 = a1;\n  v2 = fopen(a2, \"r\");\n  v3 = v2;\n  if ( !v2 )\n  {\n    v4 = 0LL;\n    v5 = \"Cannot open configuration file %s.\";\n    goto LABEL_5;\n  }\n  if ( fseek(v2, 0LL, 2) )\n    goto LABEL_15;\n  v7 = ftell(v3);\n  if ( v7 >= 0xEA61 )\n  {\n    v4 = 0LL;\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"Unreasonable Filesize %ld reported by ftell for configuration file %s.\",\n      v7,\n      a2,\n      v9);\n    return v4;\n  }\n  if ( fseek(v3, 0LL, 0) )\n  {\nLABEL_15:\n    v4 = 0LL;\n    v5 = \"Cannot fseek in configuration file %s.\";\nLABEL_5:\n    snprintf(byte_4F8250, 0x12CuLL, v5, a2, v9);\n    return v4;\n  }\n  v8 = malloc(v7 + 1);\n  v4 = v8;\n  if ( !v8 )\n    sub_43EF40(0LL, (__int64)\"GetConfigFileContent: buf\");\n  v8[fread(v8, 1uLL, v7, v3)] = 0;\n  fclose(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x40e590L", 
            "funcEndAddr": "0x40e68bL", 
            "funcName": "sub_40E590"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40E690(char *a1, int a2)\n{\n  char *v2; // rax\n  signed int v3; // er13\n  int v4; // edx\n  int v5; // ecx\n  char *v6; // rsi\n  __int64 v7; // rdx\n  char *v8; // rdx\n  signed __int64 v9; // rdi\n  __int64 v11; // rsi\n  int v12; // er13\n  __int64 v13; // r14\n  const char *v14; // r15\n  const char *v15; // rdi\n  const char **v16; // rbx\n  int v17; // ebp\n  unsigned __int64 v18; // rbp\n  int v19; // eax\n  char *v20; // r12\n  char *v21; // r12\n  int v23; // [rsp+4h] [rbp-138C4h]\n  __int64 v24; // [rsp+8h] [rbp-138C0h]\n  char *s2; // [rsp+10h] [rbp-138B8h]\n  char *v26; // [rsp+18h] [rbp-138B0h]\n  char *src[10005]; // [rsp+20h] [rbp-138A8h]\n\n  if ( a2 <= 0 )\n    return memcpy(dest, &unk_4E54E0, 0xE08uLL);\n  v2 = &a1[a2];\n  v3 = 0;\n  v4 = 0;\n  v5 = 0;\n  while ( 2 )\n  {\n    switch ( *a1 )\n    {\n      case 9:\n      case 32:\n        v6 = a1 + 1;\n        if ( v5 )\n        {\n          ++a1;\n          if ( v6 < v2 )\n            continue;\n        }\n        else\n        {\n          *a1 = 0;\n          v5 = 0;\n          v4 = 0;\n          ++a1;\n          if ( v6 < v2 )\n            continue;\n        }\n        goto LABEL_26;\n      case 10:\n        *a1++ = 0;\n        v5 = 0;\n        v4 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_26;\n      case 13:\n        goto LABEL_11;\n      case 34:\n        *a1++ = 0;\n        if ( v5 )\n        {\n          v4 = 0;\n          v5 = ~v5;\n          if ( a1 >= v2 )\n            goto LABEL_26;\n          continue;\n        }\n        v11 = v3++;\n        (&s2)[v11] = a1;\n        v4 = ~v4;\n        v5 = -1;\n        if ( a1 < v2 )\n          continue;\nLABEL_26:\n        if ( v3 >= 2 )\n        {\n          v12 = v3 - 1;\n          v13 = 0LL;\n          while ( 1 )\n          {\n            v14 = (&s2)[v13];\n            v15 = s1;\n            if ( !s1 )\n              goto LABEL_32;\n            v16 = (const char **)&off_49D198;\n            v17 = 0;\n            while ( strcmp(v15, v14) )\n            {\n              ++v17;\n              v15 = *v16;\n              v16 += 7;\n              if ( !v15 )\n                goto LABEL_32;\n            }\n            if ( v17 < 0 )\n            {\nLABEL_32:\n              snprintf(byte_4F8250, 0x12CuLL, \" Parsing error in config file: Parameter Name '%s' not recognized.\", v14);\n              error((__int64)byte_4F8250, 300);\n            }\n            if ( strcmp(\"=\", (&v26)[v13]) )\n            {\n              snprintf(\n                byte_4F8250,\n                0x12CuLL,\n                \" Parsing error in config file: '=' expected as the second token in each line.\");\n              error((__int64)byte_4F8250, 300);\n            }\n            v18 = 56LL * v17;\n            v19 = dword_49D170[v18 / 4];\n            if ( v19 == 2 )\n            {\n              v21 = src[v13];\n              if ( (unsigned int)__isoc99_sscanf(src[v13], \"%lf\", &v24) != 1 )\n              {\n                snprintf(\n                  byte_4F8250,\n                  0x12CuLL,\n                  \" Parsing error: Expected numerical value for Parameter of %s, found '%s'.\",\n                  v14,\n                  v21);\n                error((__int64)byte_4F8250, 300);\n              }\n              **(_QWORD **)((char *)&off_49D168 + v18) = v24;\n              goto LABEL_51;\n            }\n            if ( v19 == 1 )\n              break;\n            if ( !v19 )\n            {\n              v20 = src[v13];\n              if ( (unsigned int)__isoc99_sscanf(src[v13], \"%d\", &v23) != 1 )\n              {\n                snprintf(\n                  byte_4F8250,\n                  0x12CuLL,\n                  \" Parsing error: Expected numerical value for Parameter of %s, found '%s'.\",\n                  v14,\n                  v20);\n                error((__int64)byte_4F8250, 300);\n              }\n              **(_DWORD **)((char *)&off_49D168 + v18) = v23;\n              goto LABEL_51;\n            }\nLABEL_52:\n            v13 += 3LL;\n            if ( v12 <= (signed int)v13 )\n              return memcpy(dest, &unk_4E54E0, 0xE08uLL);\n          }\n          strncpy(*(char **)((char *)&off_49D168 + v18), src[v13], 0xC8uLL);\nLABEL_51:\n          putchar(46);\n          goto LABEL_52;\n        }\n        return memcpy(dest, &unk_4E54E0, 0xE08uLL);\n      case 35:\n        *a1 = 0;\n        v5 = 0;\n        if ( a1 < v2 )\n        {\n          v8 = a1 + 1;\n          do\n          {\n            v9 = (signed __int64)(v8 + 1);\n            if ( v8 >= v2 )\n              break;\n          }\n          while ( *v8++ != 10 );\n          a1 = (char *)(v9 - 1);\n        }\n        v4 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_26;\n      default:\n        if ( !v4 )\n        {\n          v7 = v3++;\n          (&s2)[v7] = a1;\n          v4 = -1;\n        }\nLABEL_11:\n        if ( ++a1 >= v2 )\n          goto LABEL_26;\n        continue;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40e690L", 
            "funcEndAddr": "0x40e9c7L", 
            "funcName": "sub_40E690"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40E9F0()\n{\n  _DWORD *v0; // rcx\n  int v1; // edx\n  __int64 result; // rax\n  int v3; // esi\n\n  v0 = dest;\n  v1 = *((_DWORD *)dest + 728) + 1;\n  result = (unsigned int)(v1 * (*((_DWORD *)dest + 2) - 1) + 1);\n  *((_DWORD *)dest + 2) = result;\n  v3 = v0[729];\n  if ( v3 )\n    v0[729] = v1 * (v3 - 1) + 1;\n  dword_49FB90 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e9f0L", 
            "funcEndAddr": "0x40ea2fL", 
            "funcName": "sub_40E9F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40EA30(__int64 a1, __int64 a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  __int64 v4; // r14\n  void *v5; // rax\n  void *v6; // rax\n  size_t v7; // rbx\n  void *v8; // rax\n  void *v9; // rax\n  void *v10; // rax\n  void *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  _QWORD **v16; // rax\n  int v17; // ecx\n  __int64 v18; // rdx\n  signed __int64 v19; // rsi\n  __int64 v20; // rdx\n  signed __int64 v21; // rsi\n  __int64 v22; // rdx\n  signed __int64 v23; // rsi\n  __int64 v24; // rdx\n  signed __int64 v25; // rsi\n  __int64 v26; // rdx\n  signed __int64 v27; // rsi\n  __int64 v28; // rdx\n  signed __int64 v29; // rsi\n  __int64 v30; // rdx\n  signed __int64 v31; // rsi\n  __int64 v32; // rdx\n  signed __int64 v33; // rsi\n  __int64 v34; // rcx\n  signed __int64 v35; // rdx\n  __int64 v36; // rcx\n  signed __int64 v37; // rdx\n  __int64 v38; // rcx\n  signed __int64 v39; // rdx\n  __int64 v40; // rax\n  signed __int64 v41; // rcx\n  signed __int64 v42; // r14\n  __int64 v43; // rbx\n  double v44; // xmm0_8\n\n  v2 = *((_DWORD *)off_49F6D0 + 18122);\n  v3 = *((_DWORD *)off_49F6D0 + 18122);\n  if ( *((_DWORD *)dest + 52) == 1 )\n    v3 = *((_DWORD *)dest + 53);\n  dword_4FA11C = v3;\n  dword_4FA120 = (v2 + v3 - 1) / v3;\n  ptr = malloc(0x18uLL);\n  if ( !ptr )\n    sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n  qword_4F9F08 = malloc(0x18uLL);\n  if ( !qword_4F9F08 )\n    sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n  v4 = 0LL;\n  do\n  {\n    v5 = malloc(0x20uLL);\n    *(_QWORD *)((char *)ptr + v4) = v5;\n    if ( !v5 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n    v6 = malloc(0x20uLL);\n    *(_QWORD *)((char *)qword_4F9F08 + v4) = v6;\n    if ( !v6 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n    v7 = 4LL * dword_4FA120;\n    v8 = malloc(4LL * dword_4FA120);\n    **(_QWORD **)((char *)ptr + v4) = v8;\n    if ( !v8 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n    v9 = malloc(v7);\n    **(_QWORD **)((char *)qword_4F9F08 + v4) = v9;\n    if ( !v9 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n    v10 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)ptr + v4) + 8LL) = v10;\n    if ( !v10 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n    v11 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)qword_4F9F08 + v4) + 8LL) = v11;\n    if ( !v11 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n    v12 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)ptr + v4) + 16LL) = v12;\n    if ( !v12 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n    v13 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)qword_4F9F08 + v4) + 16LL) = v13;\n    if ( !v13 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n    v14 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)ptr + v4) + 24LL) = v14;\n    if ( !v14 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: initialized\");\n    v15 = malloc(v7);\n    *(_QWORD *)(*(_QWORD *)((char *)qword_4F9F08 + v4) + 24LL) = v15;\n    if ( !v15 )\n      sub_43EF40(0LL, (__int64)\"create_context_memory: model_number\");\n    v4 += 8LL;\n  }\n  while ( v4 != 24 );\n  v16 = (_QWORD **)ptr;\n  v17 = dword_4FA120;\n  if ( dword_4FA120 > 0 )\n  {\n    v18 = **(_QWORD **)ptr;\n    v19 = 0LL;\n    do\n    {\n      *(_DWORD *)(v18 + 4 * v19++) = 0;\n      v17 = dword_4FA120;\n    }\n    while ( v19 < dword_4FA120 );\n    if ( dword_4FA120 > 0 )\n    {\n      v20 = (*v16)[1];\n      v21 = 0LL;\n      do\n      {\n        *(_DWORD *)(v20 + 4 * v21++) = 0;\n        v17 = dword_4FA120;\n      }\n      while ( v21 < dword_4FA120 );\n      if ( dword_4FA120 > 0 )\n      {\n        v22 = (*v16)[2];\n        v23 = 0LL;\n        do\n        {\n          *(_DWORD *)(v22 + 4 * v23++) = 0;\n          v17 = dword_4FA120;\n        }\n        while ( v23 < dword_4FA120 );\n        if ( dword_4FA120 > 0 )\n        {\n          v24 = (*v16)[3];\n          v25 = 0LL;\n          do\n          {\n            *(_DWORD *)(v24 + 4 * v25++) = 0;\n            v17 = dword_4FA120;\n          }\n          while ( v25 < dword_4FA120 );\n        }\n      }\n    }\n  }\n  if ( v17 > 0 )\n  {\n    v26 = *v16[1];\n    v27 = 0LL;\n    do\n    {\n      *(_DWORD *)(v26 + 4 * v27++) = 0;\n      v17 = dword_4FA120;\n    }\n    while ( v27 < dword_4FA120 );\n    if ( dword_4FA120 > 0 )\n    {\n      v28 = v16[1][1];\n      v29 = 0LL;\n      do\n      {\n        *(_DWORD *)(v28 + 4 * v29++) = 0;\n        v17 = dword_4FA120;\n      }\n      while ( v29 < dword_4FA120 );\n      if ( dword_4FA120 > 0 )\n      {\n        v30 = v16[1][2];\n        v31 = 0LL;\n        do\n        {\n          *(_DWORD *)(v30 + 4 * v31++) = 0;\n          v17 = dword_4FA120;\n        }\n        while ( v31 < dword_4FA120 );\n        if ( dword_4FA120 > 0 )\n        {\n          v32 = v16[1][3];\n          v33 = 0LL;\n          do\n          {\n            *(_DWORD *)(v32 + 4 * v33++) = 0;\n            v17 = dword_4FA120;\n          }\n          while ( v33 < dword_4FA120 );\n        }\n      }\n    }\n  }\n  if ( v17 > 0 )\n  {\n    v34 = *v16[2];\n    v35 = 0LL;\n    do\n      *(_DWORD *)(v34 + 4 * v35++) = 0;\n    while ( v35 < dword_4FA120 );\n    if ( dword_4FA120 > 0 )\n    {\n      v36 = v16[2][1];\n      v37 = 0LL;\n      do\n        *(_DWORD *)(v36 + 4 * v37++) = 0;\n      while ( v37 < dword_4FA120 );\n      if ( dword_4FA120 > 0 )\n      {\n        v38 = v16[2][2];\n        v39 = 0LL;\n        do\n          *(_DWORD *)(v38 + 4 * v39++) = 0;\n        while ( v39 < dword_4FA120 );\n        if ( dword_4FA120 > 0 )\n        {\n          v40 = v16[2][3];\n          v41 = 0LL;\n          do\n            *(_DWORD *)(v40 + 4 * v41++) = 0;\n          while ( v41 < dword_4FA120 );\n        }\n      }\n    }\n  }\n  v42 = 2305843009213693888LL;\n  v43 = 0LL;\n  do\n  {\n    v44 = 1.0 - *(double *)&qword_49F668[v43];\n    *(double *)&qword_49F470[v42] = v44;\n    *(double *)&qword_4F20D0[v42] = log10(v44) / 0.3010299956639812;\n    *(double *)&qword_4F22C8[v43] = log10(*(double *)&qword_49F668[v43]) / 0.3010299956639812;\n    --v43;\n    ++v42;\n  }\n  while ( v42 * 8 );\n}\n", 
            "funcStartAddr": "0x40ea30L", 
            "funcEndAddr": "0x40ef52L", 
            "funcName": "sub_40EA30"
        }, 
        {
            "decompiledFuncCode": "void sub_40EF60()\n{\n  free(**(void ***)ptr);\n  free(**(void ***)qword_4F9F08);\n  free(*(void **)(*(_QWORD *)ptr + 8LL));\n  free(*(void **)(*(_QWORD *)qword_4F9F08 + 8LL));\n  free(*(void **)(*(_QWORD *)ptr + 16LL));\n  free(*(void **)(*(_QWORD *)qword_4F9F08 + 16LL));\n  free(*(void **)(*(_QWORD *)ptr + 24LL));\n  free(*(void **)(*(_QWORD *)qword_4F9F08 + 24LL));\n  free(*(void **)ptr);\n  free(*(void **)qword_4F9F08);\n  free(**((void ***)ptr + 1));\n  free(**((void ***)qword_4F9F08 + 1));\n  free(*(void **)(*((_QWORD *)ptr + 1) + 8LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 1) + 8LL));\n  free(*(void **)(*((_QWORD *)ptr + 1) + 16LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 1) + 16LL));\n  free(*(void **)(*((_QWORD *)ptr + 1) + 24LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 1) + 24LL));\n  free(*((void **)ptr + 1));\n  free(*((void **)qword_4F9F08 + 1));\n  free(**((void ***)ptr + 2));\n  free(**((void ***)qword_4F9F08 + 2));\n  free(*(void **)(*((_QWORD *)ptr + 2) + 8LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 2) + 8LL));\n  free(*(void **)(*((_QWORD *)ptr + 2) + 16LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 2) + 16LL));\n  free(*(void **)(*((_QWORD *)ptr + 2) + 24LL));\n  free(*(void **)(*((_QWORD *)qword_4F9F08 + 2) + 24LL));\n  free(*((void **)ptr + 2));\n  free(*((void **)qword_4F9F08 + 2));\n  free(ptr);\n  free(qword_4F9F08);\n}\n", 
            "funcStartAddr": "0x40ef60L", 
            "funcEndAddr": "0x40f1aaL", 
            "funcName": "sub_40EF60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40F1B0()\n{\n  __int64 v0; // rsi\n  __int64 result; // rax\n  int v2; // edx\n  __int64 v3; // r8\n  __int64 v4; // r9\n  signed __int64 v5; // rdi\n\n  v0 = *((signed int *)off_49F6D0 + 6);\n  result = (unsigned int)(*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 12LL) / dword_4FA11C);\n  v2 = 0;\n  if ( v0 == 2 )\n    goto LABEL_8;\n  if ( *((_DWORD *)dest + 803) )\n  {\n    v3 = *((signed int *)off_49F6D0 + 18111);\n    v4 = *(_QWORD *)(*((_QWORD *)ptr + v3) + 8 * v0);\n    v5 = (signed int)result;\n    if ( !*(_DWORD *)(v4 + 4LL * (signed int)result) )\n    {\n      if ( !(_DWORD)result || !*(_DWORD *)(v4 + 4LL * (signed int)result - 4) )\n        goto LABEL_8;\n      v5 = (signed int)result - 1LL;\n    }\n    result = *(_QWORD *)(*((_QWORD *)qword_4F9F08 + v3) + 8 * v0);\n    v2 = *(_DWORD *)(result + 4 * v5);\nLABEL_8:\n    *((_DWORD *)off_49F6D0 + 18130) = v2;\n    return result;\n  }\n  *((_DWORD *)off_49F6D0 + 18130) = *((_DWORD *)dest + 804);\n  return result;\n}\n", 
            "funcStartAddr": "0x40f1b0L", 
            "funcEndAddr": "0x40f23aL", 
            "funcName": "sub_40F1B0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40F240()\n{\n  signed int *v0; // rax\n  __int64 v1; // rcx\n  __int64 v2; // r14\n  char *v3; // r12\n  char *v4; // r13\n  signed __int64 v5; // rbp\n  __int64 v6; // rbx\n  bool v7; // zf\n  __int64 v8; // rax\n  char *v9; // rsi\n  __int64 v10; // rbx\n  signed __int64 v11; // r12\n  char *v12; // r13\n  char *v13; // rbp\n  __int64 v14; // rax\n  char *v15; // rsi\n  __int64 v16; // rbx\n  signed __int64 v17; // r12\n  char *v18; // r13\n  char *v19; // rbp\n  __int64 v20; // rax\n  char *v21; // rsi\n  __int64 v22; // rbx\n  char *v23; // r12\n  int *v24; // rbp\n  signed __int64 v25; // r13\n  __int64 v26; // rax\n  int *v27; // rsi\n  __int64 v28; // rbx\n  signed __int64 v29; // r12\n  int *v30; // r13\n  char *v31; // rbp\n  __int64 v32; // rax\n  int *v33; // rsi\n  __int64 v34; // rbx\n  char *v35; // r12\n  int *v36; // rbp\n  signed __int64 v37; // r13\n  __int64 v38; // rax\n  int *v39; // rsi\n  __int64 v40; // rbx\n  signed __int64 v41; // r12\n  int *v42; // r13\n  char *v43; // rbp\n  __int64 v44; // rax\n  int *v45; // rsi\n  __int64 v46; // r12\n  __int64 v47; // rbx\n  _DWORD *v48; // rsi\n  _DWORD *v49; // rsi\n  _DWORD *v50; // rsi\n  _DWORD *v51; // rsi\n  _DWORD *v52; // rsi\n  _DWORD *v53; // rsi\n  __int64 v54; // rax\n  int *v55; // rsi\n  __int64 v56; // rax\n  char *v57; // rsi\n  __int64 v58; // rax\n  char *v59; // rsi\n  __int64 v60; // rax\n  char *v61; // rsi\n  __int64 v62; // rax\n  int *v63; // rsi\n  __int64 v64; // rax\n  char *v65; // rsi\n  __int64 v66; // rax\n  char *v67; // rsi\n  __int64 v68; // rax\n  char *v69; // rsi\n  int *v70; // rsi\n  int *v71; // rsi\n  __int64 v72; // r14\n  int *v73; // rsi\n  __int64 v74; // rax\n  int *v75; // rsi\n  __int64 v76; // rax\n  int *v77; // rsi\n  __int64 v78; // rax\n  int *v79; // rsi\n  __int64 v80; // rax\n  char *v81; // rsi\n  __int64 v82; // rax\n  char *v83; // rsi\n  __int64 v84; // rax\n  char *v85; // rsi\n  __int64 v86; // r14\n  __int64 v87; // rbx\n  _DWORD *v88; // rsi\n  _DWORD *v89; // rsi\n  _DWORD *v90; // rsi\n  _DWORD *v91; // rsi\n  __int64 v92; // r14\n  __int64 v93; // rbx\n  __int64 v94; // rax\n  _DWORD *v95; // rsi\n  __int64 v96; // rax\n  _DWORD *v97; // rsi\n  __int64 v98; // rax\n  _DWORD *v99; // rsi\n  __int64 v100; // rax\n  _DWORD *v101; // rsi\n  __int64 v102; // rbx\n  char *v103; // r12\n  char *v104; // r14\n  __int64 v105; // rbp\n  signed __int64 v106; // r15\n  char *v107; // r13\n  __int64 v108; // rax\n  char *v109; // rsi\n  __int64 v110; // rbx\n  char *v111; // r12\n  char *v112; // r14\n  __int64 v113; // r15\n  signed __int64 v114; // rbp\n  char *v115; // r13\n  __int64 v116; // rax\n  char *v117; // rsi\n  __int64 v118; // r14\n  __int64 v119; // rbx\n  _DWORD *v120; // rsi\n  _DWORD *v121; // rsi\n  _DWORD *v122; // rsi\n  _DWORD *v123; // rsi\n  _DWORD *v124; // rsi\n  __int64 v125; // r14\n  __int64 v126; // rbx\n  _DWORD *v127; // rsi\n  _DWORD *v128; // rsi\n  _DWORD *v129; // rsi\n  _DWORD *v130; // rsi\n  _DWORD *v131; // rsi\n  __int64 v132; // rbx\n  char *v133; // r12\n  char *v134; // r14\n  __int64 v135; // r15\n  signed __int64 v136; // rbp\n  char *v137; // r13\n  __int64 v138; // rax\n  char *v139; // rsi\n  __int64 v140; // rbx\n  char *v141; // r14\n  char *v142; // r12\n  __int64 v143; // r15\n  signed __int64 v144; // r13\n  char *v145; // rbp\n  __int64 v146; // rax\n  char *v147; // rsi\n  __int64 result; // rax\n  __int64 v149; // [rsp+0h] [rbp-48h]\n  __int64 v150; // [rsp+0h] [rbp-48h]\n  __int64 v151; // [rsp+8h] [rbp-40h]\n  __int64 v152; // [rsp+8h] [rbp-40h]\n  __int64 v153; // [rsp+8h] [rbp-40h]\n  char *v154; // [rsp+8h] [rbp-40h]\n  char *v155; // [rsp+10h] [rbp-38h]\n  char *v156; // [rsp+10h] [rbp-38h]\n  char *v157; // [rsp+10h] [rbp-38h]\n\n  v0 = (signed int *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1770);\n  v2 = *(_QWORD *)(v1 + 32);\n  v149 = *(_QWORD *)(v1 + 40);\n  v3 = (char *)&unk_48AFB0;\n  v4 = (char *)&unk_48AEA0;\n  v5 = 10LL;\n  v6 = *(_QWORD *)(v1 + 32);\n  while ( 1 )\n  {\n    v7 = v0[6] == 2;\n    v8 = v0[18130];\n    v9 = v7 ? &v4[264 * v8] : &v3[264 * v8];\n    sub_401D80(v6, v9);\n    if ( !v5 )\n      break;\n    v0 = (signed int *)off_49F6D0;\n    v6 += 16LL;\n    v3 += 8;\n    v4 += 8;\n    --v5;\n  }\n  v10 = v2 + 176;\n  v11 = 11LL;\n  v12 = (char *)&unk_48AEF8;\n  v13 = (char *)&unk_48B008;\n  do\n  {\n    v14 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v15 = &v12[264 * v14];\n    else\n      v15 = &v13[264 * v14];\n    sub_401D80(v10, v15);\n    v12 += 8;\n    v13 += 8;\n    v10 += 16LL;\n    --v11;\n  }\n  while ( v11 );\n  v16 = v2 + 352;\n  v17 = 11LL;\n  v18 = (char *)&unk_48AF50;\n  v19 = (char *)&unk_48B060;\n  do\n  {\n    v20 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v21 = &v18[264 * v20];\n    else\n      v21 = &v19[264 * v20];\n    sub_401D80(v16, v21);\n    v18 += 8;\n    v19 += 8;\n    v16 += 16LL;\n    --v17;\n  }\n  while ( v17 );\n  v22 = v2 + 528;\n  v23 = (char *)&unk_48B360;\n  v24 = dword_48B2D0;\n  v25 = 9LL;\n  do\n  {\n    v26 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v27 = &v24[36 * v26];\n    else\n      v27 = (int *)&v23[144 * v26];\n    sub_401D80(v22, v27);\n    v22 += 16LL;\n    v23 += 8;\n    v24 += 2;\n    --v25;\n  }\n  while ( v25 );\n  v28 = v2 + 672;\n  v29 = 9LL;\n  v30 = dword_48B318;\n  v31 = (char *)&unk_48B3A8;\n  do\n  {\n    v32 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v33 = &v30[36 * v32];\n    else\n      v33 = (int *)&v31[144 * v32];\n    sub_401D80(v28, v33);\n    v30 += 2;\n    v31 += 8;\n    v28 += 16LL;\n    --v29;\n  }\n  while ( v29 );\n  v34 = v2 + 816;\n  v35 = (char *)&unk_48B5B0;\n  v36 = dword_48B510;\n  v37 = 10LL;\n  do\n  {\n    v38 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v39 = &v36[40 * v38];\n    else\n      v39 = (int *)&v35[160 * v38];\n    sub_401D80(v34, v39);\n    v34 += 16LL;\n    v35 += 8;\n    v36 += 2;\n    --v37;\n  }\n  while ( v37 );\n  v40 = v2 + 976;\n  v41 = 10LL;\n  v42 = dword_48B560;\n  v43 = (char *)&unk_48B600;\n  do\n  {\n    v44 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v45 = &v42[40 * v44];\n    else\n      v45 = (int *)&v43[160 * v44];\n    sub_401D80(v40, v45);\n    v42 += 2;\n    v43 += 8;\n    v40 += 16LL;\n    --v41;\n  }\n  while ( v41 );\n  v46 = v2 + 1136;\n  v47 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v48 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765584);\n    else\n      v48 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765680);\n    sub_401D80(v46, v48);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v49 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765592);\n    else\n      v49 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765688);\n    sub_401D80(v46 + 16, v49);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v50 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765600);\n    else\n      v50 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765696);\n    sub_401D80(v46 + 32, v50);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v51 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765608);\n    else\n      v51 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765704);\n    sub_401D80(v46 + 48, v51);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v52 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765616);\n    else\n      v52 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765712);\n    sub_401D80(v46 + 64, v52);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v53 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765624);\n    else\n      v53 = (_DWORD *)(v47 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4765720);\n    sub_401D80(v46 + 80, v53);\n    v46 += 96LL;\n    v47 += 48LL;\n  }\n  while ( v47 != 96 );\n  v54 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v55 = &dword_48B910[8 * v54];\n  else\n    v55 = (int *)((char *)&unk_48B930 + 32 * v54);\n  sub_401D80(v2 + 1328, v55);\n  v56 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v57 = (char *)&unk_48B918 + 32 * v56;\n  else\n    v57 = (char *)&unk_48B938 + 32 * v56;\n  sub_401D80(v2 + 1344, v57);\n  v58 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v59 = (char *)&unk_48B920 + 32 * v58;\n  else\n    v59 = (char *)&unk_48B940 + 32 * v58;\n  sub_401D80(v2 + 1360, v59);\n  v60 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v61 = (char *)&unk_48B928 + 32 * v60;\n  else\n    v61 = (char *)&unk_48B948 + 32 * v60;\n  sub_401D80(v2 + 1376, v61);\n  v62 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v63 = &dword_48B990[8 * v62];\n  else\n    v63 = (int *)((char *)&unk_48B9B0 + 32 * v62);\n  sub_401D80(v2 + 1392, v63);\n  v64 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v65 = (char *)&unk_48B998 + 32 * v64;\n  else\n    v65 = (char *)&unk_48B9B8 + 32 * v64;\n  sub_401D80(v2 + 1408, v65);\n  v66 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v67 = (char *)&unk_48B9A0 + 32 * v66;\n  else\n    v67 = (char *)&unk_48B9C0 + 32 * v66;\n  sub_401D80(v2 + 1424, v67);\n  v68 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v69 = (char *)&unk_48B9A8 + 32 * v68;\n  else\n    v69 = (char *)&unk_48B9C8 + 32 * v68;\n  sub_401D80(v2 + 1440, v69);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v70 = (int *)((char *)&unk_48BA10 + 24 * *((signed int *)off_49F6D0 + 18130));\n  else\n    v70 = &dword_48BA30[6 * *((signed int *)off_49F6D0 + 18130)];\n  sub_401D80(v2 + 1456, v70);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v71 = (int *)((char *)&unk_48BA18 + 24 * *((signed int *)off_49F6D0 + 18130));\n  else\n    v71 = &dword_48BA38[6 * *((signed int *)off_49F6D0 + 18130)];\n  sub_401D80(v2 + 1472, v71);\n  v72 = v2 + 1488;\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v73 = (int *)((char *)&unk_48BA20 + 24 * *((signed int *)off_49F6D0 + 18130));\n  else\n    v73 = &dword_48BA40[6 * *((signed int *)off_49F6D0 + 18130)];\n  sub_401D80(v72, v73);\n  v74 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v75 = (int *)((char *)&unk_48BA80 + 16 * v74);\n  else\n    v75 = &dword_48BA90[4 * v74];\n  sub_401D80(v149, v75);\n  v76 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v77 = (int *)((char *)&unk_48BA88 + 16 * v76);\n  else\n    v77 = &dword_48BA98[4 * v76];\n  sub_401D80(v149 + 16, v77);\n  v78 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v79 = &dword_48BAC0[8 * v78];\n  else\n    v79 = (int *)((char *)&unk_48BAE0 + 32 * v78);\n  sub_401D80(v149 + 32, v79);\n  v80 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v81 = (char *)&unk_48BAC8 + 32 * v80;\n  else\n    v81 = (char *)&unk_48BAE8 + 32 * v80;\n  sub_401D80(v149 + 48, v81);\n  v82 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v83 = (char *)&unk_48BAD0 + 32 * v82;\n  else\n    v83 = (char *)&unk_48BAF0 + 32 * v82;\n  sub_401D80(v149 + 64, v83);\n  v84 = *((signed int *)off_49F6D0 + 18130);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n    v85 = (char *)&unk_48BAD8 + 32 * v84;\n  else\n    v85 = (char *)&unk_48BAF8 + 32 * v84;\n  sub_401D80(v149 + 80, v85);\n  v86 = v149 + 96;\n  v87 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v88 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766528);\n    else\n      v88 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766624);\n    sub_401D80(v86, v88);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v89 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766536);\n    else\n      v89 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766632);\n    sub_401D80(v86 + 16, v89);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v90 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766544);\n    else\n      v90 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766640);\n    sub_401D80(v86 + 32, v90);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v91 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766552);\n    else\n      v91 = (_DWORD *)(v87 + 96LL * *((signed int *)off_49F6D0 + 18130) + 4766648);\n    sub_401D80(v86 + 48, v91);\n    v86 += 64LL;\n    v87 += 32LL;\n  }\n  while ( v87 != 96 );\n  v92 = v149 + 288;\n  v93 = 0LL;\n  do\n  {\n    v94 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v95 = (_DWORD *)(v93 + (v94 << 8) + 4766912);\n    else\n      v95 = (_DWORD *)(v93 + (v94 << 8) + 4767168);\n    sub_401D80(v92, v95);\n    v96 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v97 = (_DWORD *)(v93 + (v96 << 8) + 4766920);\n    else\n      v97 = (_DWORD *)(v93 + (v96 << 8) + 4767176);\n    sub_401D80(v92 + 16, v97);\n    v98 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v99 = (_DWORD *)(v93 + (v98 << 8) + 4766928);\n    else\n      v99 = (_DWORD *)(v93 + (v98 << 8) + 4767184);\n    sub_401D80(v92 + 32, v99);\n    v100 = *((signed int *)off_49F6D0 + 18130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v101 = (_DWORD *)(v93 + (v100 << 8) + 4766936);\n    else\n      v101 = (_DWORD *)(v93 + (v100 << 8) + 4767192);\n    sub_401D80(v92 + 48, v101);\n    v92 += 64LL;\n    v93 += 32LL;\n  }\n  while ( v93 != 320 );\n  v102 = v149 + 928;\n  v103 = (char *)&unk_48C480;\n  v104 = (char *)&unk_48C0C0;\n  v105 = 0LL;\n  do\n  {\n    v106 = 15LL;\n    v107 = v104;\n    v155 = v103;\n    v151 = v102;\n    do\n    {\n      v108 = *((signed int *)off_49F6D0 + 18130);\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n        v109 = &v107[960 * v108];\n      else\n        v109 = &v103[960 * v108];\n      sub_401D80(v102, v109);\n      v102 += 16LL;\n      v103 += 8;\n      v107 += 8;\n      --v106;\n    }\n    while ( v106 );\n    ++v105;\n    v102 = v151 + 240;\n    v103 = v155 + 120;\n    v104 += 120;\n  }\n  while ( v105 != 10 );\n  v110 = v149 + 3328;\n  v111 = (char *)&unk_48D380;\n  v112 = (char *)&unk_48CFC0;\n  v113 = 0LL;\n  do\n  {\n    v114 = 15LL;\n    v115 = v112;\n    v156 = v111;\n    v152 = v110;\n    do\n    {\n      v116 = *((signed int *)off_49F6D0 + 18130);\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n        v117 = &v115[960 * v116];\n      else\n        v117 = &v111[960 * v116];\n      sub_401D80(v110, v117);\n      v110 += 16LL;\n      v111 += 8;\n      v115 += 8;\n      --v114;\n    }\n    while ( v114 );\n    ++v113;\n    v110 = v152 + 240;\n    v111 = v156 + 120;\n    v112 += 120;\n  }\n  while ( v113 != 10 );\n  v118 = v149 + 5728;\n  v119 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v120 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775616);\n    else\n      v120 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775936);\n    sub_401D80(v118, v120);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v121 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775624);\n    else\n      v121 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775944);\n    sub_401D80(v118 + 16, v121);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v122 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775632);\n    else\n      v122 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775952);\n    sub_401D80(v118 + 32, v122);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v123 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775640);\n    else\n      v123 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775960);\n    sub_401D80(v118 + 48, v123);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v124 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775648);\n    else\n      v124 = (_DWORD *)(v119 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4775968);\n    sub_401D80(v118 + 64, v124);\n    v118 += 80LL;\n    v119 += 40LL;\n  }\n  while ( v119 != 400 );\n  v125 = v149 + 6528;\n  v126 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v127 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4776896);\n    else\n      v127 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4777216);\n    sub_401D80(v125, v127);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v128 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4776904);\n    else\n      v128 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4777224);\n    sub_401D80(v125 + 16, v128);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v129 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4776912);\n    else\n      v129 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4777232);\n    sub_401D80(v125 + 32, v129);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v130 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4776920);\n    else\n      v130 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4777240);\n    sub_401D80(v125 + 48, v130);\n    if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      v131 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4776928);\n    else\n      v131 = (_DWORD *)(v126 + 320LL * *((signed int *)off_49F6D0 + 18130) + 4777248);\n    sub_401D80(v125 + 64, v131);\n    v125 += 80LL;\n    v126 += 40LL;\n  }\n  while ( v126 != 400 );\n  v132 = v149 + 7328;\n  v133 = (char *)&unk_48EC80;\n  v134 = (char *)&unk_48E8C0;\n  v135 = 0LL;\n  do\n  {\n    v136 = 15LL;\n    v137 = v134;\n    v157 = v133;\n    v153 = v132;\n    do\n    {\n      v138 = *((signed int *)off_49F6D0 + 18130);\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n        v139 = &v137[960 * v138];\n      else\n        v139 = &v133[960 * v138];\n      sub_401D80(v132, v139);\n      v132 += 16LL;\n      v133 += 8;\n      v137 += 8;\n      --v136;\n    }\n    while ( v136 );\n    ++v135;\n    v132 = v153 + 240;\n    v133 = v157 + 120;\n    v134 += 120;\n  }\n  while ( v135 != 10 );\n  v140 = v149 + 9728;\n  v141 = (char *)&unk_48FB80;\n  v142 = (char *)&unk_48F7C0;\n  v143 = 0LL;\n  do\n  {\n    v144 = 15LL;\n    v145 = v142;\n    v154 = v141;\n    v150 = v140;\n    do\n    {\n      v146 = *((signed int *)off_49F6D0 + 18130);\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n        v147 = &v145[960 * v146];\n      else\n        v147 = &v141[960 * v146];\n      result = sub_401D80(v140, v147);\n      v140 += 16LL;\n      v141 += 8;\n      v145 += 8;\n      --v144;\n    }\n    while ( v144 );\n    ++v143;\n    v140 = v150 + 240;\n    v141 = v154 + 120;\n    v142 += 120;\n  }\n  while ( v143 != 10 );\n  return result;\n}\n", 
            "funcStartAddr": "0x40f240L", 
            "funcEndAddr": "0x410399L", 
            "funcName": "sub_40F240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410450(_DWORD *a1, __int64 a2, unsigned __int16 *a3)\n{\n  int v3; // er10\n  char *v4; // rcx\n  double v5; // xmm8_8\n  char *v6; // r13\n  char *v7; // r15\n  signed __int64 v8; // rcx\n  __int64 v9; // r9\n  double v10; // xmm5_8\n  __int64 v11; // rbp\n  __int64 v12; // rdi\n  int v13; // er12\n  int v14; // ebx\n  __m128i v15; // xmm6\n  double v16; // xmm6_8\n  int v17; // ebx\n  char *v18; // rax\n  int v19; // ebx\n  __m128i v20; // xmm6\n  signed __int64 v21; // rbx\n  int v22; // eax\n  int v23; // edx\n  int v24; // eax\n  int v25; // edi\n  unsigned __int64 v26; // rax\n  __int64 v27; // rcx\n  __m128i v28; // xmm0\n  double v29; // xmm6_8\n  int v30; // ebp\n  char *v31; // rbx\n  __m128i v32; // xmm0\n  signed __int64 v33; // rbp\n  int v34; // edx\n  int v35; // ebx\n  int v36; // edx\n  unsigned __int64 v37; // rax\n  __int64 v38; // rcx\n  __m128i v39; // xmm0\n  double v40; // xmm6_8\n  int v41; // ebp\n  _DWORD *v42; // rdx\n  __m128i v43; // xmm0\n  signed __int64 v44; // rbp\n  int v45; // edx\n  int v46; // esi\n  int v47; // edx\n  int v48; // edi\n  unsigned __int64 v49; // rax\n  __int64 v50; // rcx\n  __m128i v51; // xmm0\n  double v52; // xmm6_8\n  int v53; // ebp\n  char *v54; // rbx\n  __m128i v55; // xmm0\n  signed __int64 v56; // rbp\n  int v57; // edx\n  int v58; // ebx\n  int v59; // edx\n  unsigned __int64 v60; // rax\n  __int64 v61; // rcx\n  __m128i v62; // xmm0\n  double v63; // xmm6_8\n  int v64; // ebp\n  _DWORD *v65; // rdx\n  __m128i v66; // xmm0\n  signed __int64 v67; // rbp\n  int v68; // edx\n  int v69; // esi\n  int v70; // edx\n  int v71; // edi\n  unsigned __int64 v72; // rax\n  __int64 v73; // rcx\n  __m128i v74; // xmm0\n  double v75; // xmm6_8\n  int v76; // ebp\n  char *v77; // rbx\n  __m128i v78; // xmm0\n  signed __int64 v79; // rbp\n  int v80; // edx\n  int v81; // ebx\n  int v82; // edx\n  unsigned __int64 v83; // rax\n  __int64 v84; // rcx\n  __m128i v85; // xmm0\n  double v86; // xmm6_8\n  int v87; // ebp\n  _DWORD *v88; // rdx\n  __m128i v89; // xmm0\n  signed __int64 v90; // rbp\n  int v91; // edx\n  int v92; // esi\n  int v93; // edx\n  int v94; // eax\n  unsigned __int64 v95; // rcx\n  __int64 v96; // rdi\n  __m128i v97; // xmm0\n  double v98; // xmm6_8\n  int v99; // ebp\n  char *v100; // rbx\n  __m128i v101; // xmm0\n  signed __int64 v102; // rbp\n  int v103; // edx\n  int v104; // ebx\n  int v105; // edx\n  int v106; // eax\n  unsigned __int64 v107; // rcx\n  __int64 v108; // rdi\n  __m128i v109; // xmm0\n  double v110; // xmm6_8\n  int v111; // ebp\n  char *v112; // rbx\n  __m128i v113; // xmm0\n  signed __int64 v114; // rbp\n  int v115; // edx\n  int v116; // ebx\n  int v117; // edx\n  int v118; // er13\n  __m128i v119; // xmm0\n  double v120; // xmm6_8\n  int v121; // eax\n  _DWORD *v122; // rcx\n  __m128i v123; // xmm0\n  signed __int64 v124; // rax\n  int v125; // ecx\n  int v126; // edx\n  int v127; // ecx\n  double v128; // xmm5_8\n  __m128i v129; // xmm0\n  double v130; // xmm6_8\n  int v131; // eax\n  _DWORD *v132; // rcx\n  __m128i v133; // xmm0\n  signed __int64 v134; // rax\n  int v135; // ecx\n  int v136; // edx\n  int v137; // ecx\n  double v138; // xmm5_8\n  __m128i v139; // xmm0\n  double v140; // xmm6_8\n  int v141; // er13\n  _DWORD *v142; // rax\n  __m128i v143; // xmm0\n  signed __int64 v144; // r13\n  int v145; // eax\n  int v146; // ecx\n  int v147; // eax\n  int v148; // edi\n  double v149; // xmm5_8\n  unsigned __int16 *v150; // rsi\n  __m128i v151; // xmm0\n  double v152; // xmm6_8\n  int v153; // eax\n  _DWORD *v154; // rcx\n  __m128i v155; // xmm0\n  signed __int64 v156; // rax\n  int v157; // ecx\n  int v158; // edx\n  int v159; // ecx\n  double v160; // xmm5_8\n  __m128i v161; // xmm0\n  double v162; // xmm6_8\n  int v163; // edi\n  _DWORD *v164; // rax\n  __m128i v165; // xmm0\n  signed __int64 v166; // rdi\n  int v167; // eax\n  int v168; // ecx\n  int v169; // eax\n  double v170; // xmm5_8\n  int v171; // eax\n  unsigned __int64 v172; // rcx\n  __int64 v173; // rdi\n  __m128i v174; // xmm0\n  double v175; // xmm6_8\n  int v176; // ebp\n  char *v177; // rbx\n  __m128i v178; // xmm0\n  signed __int64 v179; // rbp\n  int v180; // edx\n  int v181; // ebx\n  int v182; // edx\n  int v183; // eax\n  char *v184; // r13\n  char *v185; // rdi\n  signed __int64 v186; // rbx\n  __int64 v187; // rbp\n  __int64 v188; // rcx\n  __int64 v189; // r9\n  __m128i v190; // xmm0\n  double v191; // xmm6_8\n  int v192; // er15\n  char *v193; // r11\n  __m128i v194; // xmm0\n  signed __int64 v195; // r15\n  int v196; // edx\n  int v197; // esi\n  int v198; // edx\n  int v199; // er15\n  char *v200; // r13\n  char *v201; // rdi\n  signed __int64 v202; // rbx\n  __int64 v203; // r9\n  __int64 v204; // rcx\n  __int64 v205; // rbp\n  __m128i v206; // xmm0\n  double v207; // xmm6_8\n  int v208; // eax\n  char *v209; // rdx\n  __m128i v210; // xmm0\n  signed __int64 v211; // rax\n  int v212; // edx\n  int v213; // esi\n  int v214; // edx\n  int v215; // er15\n  char *v216; // r9\n  char *v217; // rdi\n  signed __int64 v218; // rbx\n  __int64 v219; // r13\n  __int64 v220; // rcx\n  __int64 v221; // rbp\n  __m128i v222; // xmm0\n  double v223; // xmm6_8\n  int v224; // eax\n  char *v225; // rdx\n  __m128i v226; // xmm0\n  signed __int64 v227; // rax\n  int v228; // edx\n  int v229; // esi\n  int v230; // edx\n  int v231; // er15\n  char *v232; // r9\n  char *v233; // rdi\n  signed __int64 v234; // rbx\n  __int64 v235; // r13\n  __int64 v236; // rcx\n  __int64 v237; // rbp\n  __m128i v238; // xmm0\n  double v239; // xmm6_8\n  int v240; // eax\n  char *v241; // rdx\n  __m128i v242; // xmm0\n  signed __int64 v243; // rax\n  int v244; // edx\n  int v245; // esi\n  int v246; // edx\n  int v247; // er15\n  char *v248; // r13\n  char *v249; // rdi\n  signed __int64 v250; // rbx\n  __int64 v251; // r9\n  __int64 v252; // rcx\n  __int64 v253; // rbp\n  __m128i v254; // xmm0\n  double v255; // xmm6_8\n  int v256; // eax\n  char *v257; // rdx\n  __m128i v258; // xmm0\n  signed __int64 v259; // rax\n  int v260; // edx\n  int v261; // esi\n  int v262; // edx\n  int v263; // er15\n  char *v264; // r13\n  char *v265; // rdi\n  signed __int64 v266; // rbx\n  __int64 v267; // r9\n  __int64 v268; // rcx\n  __int64 v269; // rbp\n  __m128i v270; // xmm0\n  double v271; // xmm6_8\n  int v272; // eax\n  char *v273; // rdx\n  __m128i v274; // xmm0\n  signed __int64 v275; // rax\n  int v276; // edx\n  int v277; // esi\n  int v278; // edx\n  int v279; // er15\n  char *v280; // r9\n  char *v281; // rdi\n  signed __int64 v282; // rbx\n  __int64 v283; // r13\n  __int64 v284; // rcx\n  __int64 v285; // rbp\n  __m128i v286; // xmm0\n  double v287; // xmm6_8\n  int v288; // eax\n  char *v289; // rdx\n  __m128i v290; // xmm0\n  signed __int64 v291; // rax\n  int v292; // edx\n  int v293; // esi\n  int v294; // edx\n  char *v295; // r9\n  char *v296; // rcx\n  signed __int64 v297; // rdi\n  __int64 v298; // r15\n  __int64 v299; // rbp\n  __int64 v300; // rax\n  __m128i v301; // xmm0\n  double v302; // xmm6_8\n  int v303; // ebx\n  char *v304; // rdx\n  __m128i v305; // xmm0\n  signed __int64 v306; // rbx\n  int v307; // edx\n  int v308; // esi\n  int v309; // edx\n  __int64 result; // rax\n  __int64 v311; // [rsp+0h] [rbp-120h]\n  char *v312; // [rsp+8h] [rbp-118h]\n  char *v313; // [rsp+10h] [rbp-110h]\n  char *v314; // [rsp+18h] [rbp-108h]\n  _DWORD *v315; // [rsp+20h] [rbp-100h]\n  unsigned __int16 *v316; // [rsp+28h] [rbp-F8h]\n  char *v317; // [rsp+30h] [rbp-F0h]\n  char *v318; // [rsp+38h] [rbp-E8h]\n  char *v319; // [rsp+40h] [rbp-E0h]\n  char *v320; // [rsp+48h] [rbp-D8h]\n  char *v321; // [rsp+50h] [rbp-D0h]\n  char *v322; // [rsp+58h] [rbp-C8h]\n  char *v323; // [rsp+60h] [rbp-C0h]\n  char *v324; // [rsp+68h] [rbp-B8h]\n  char *v325; // [rsp+70h] [rbp-B0h]\n  char *v326; // [rsp+78h] [rbp-A8h]\n  char *v327; // [rsp+80h] [rbp-A0h]\n  _DWORD *v328; // [rsp+88h] [rbp-98h]\n  signed __int64 v329; // [rsp+90h] [rbp-90h]\n  signed __int64 v330; // [rsp+98h] [rbp-88h]\n  signed __int64 v331; // [rsp+A0h] [rbp-80h]\n  signed __int64 v332; // [rsp+A8h] [rbp-78h]\n  signed __int64 v333; // [rsp+B0h] [rbp-70h]\n  signed __int64 v334; // [rsp+B8h] [rbp-68h]\n  signed __int64 v335; // [rsp+C0h] [rbp-60h]\n  signed __int64 v336; // [rsp+C8h] [rbp-58h]\n  signed __int64 v337; // [rsp+D0h] [rbp-50h]\n  signed __int64 v338; // [rsp+D8h] [rbp-48h]\n  __int64 v339; // [rsp+E0h] [rbp-40h]\n  char *v340; // [rsp+E8h] [rbp-38h]\n\n  v328 = a1;\n  v315 = off_49F6D0;\n  v3 = *((_DWORD *)off_49F6D0 + 6);\n  v338 = 2LL * (v3 != 2) + 1;\n  v339 = a2;\n  v337 = a2 + 8;\n  v336 = (signed __int64)(a3 + 52);\n  v335 = (signed __int64)(a3 + 148);\n  v334 = (signed __int64)(a3 + 468);\n  v333 = (signed __int64)(a3 + 1668);\n  v332 = (signed __int64)(a3 + 2868);\n  v331 = (signed __int64)(a3 + 3268);\n  v330 = (signed __int64)(a3 + 3668);\n  v4 = (char *)&unk_48AFB0;\n  v5 = 1.0e30;\n  v314 = (char *)&unk_48B360;\n  v313 = (char *)&unk_48B5B0;\n  v327 = (char *)&unk_48B7F0;\n  v326 = (char *)&unk_48B930;\n  v325 = (char *)&unk_48B9B0;\n  v312 = (char *)&unk_48BAE0;\n  v324 = (char *)&unk_48BBA0;\n  v323 = (char *)&unk_48BDC0;\n  v322 = (char *)&unk_48C480;\n  v321 = (char *)&unk_48D380;\n  v320 = (char *)&unk_48E000;\n  v319 = (char *)&unk_48E500;\n  v318 = (char *)&unk_48EC80;\n  v317 = (char *)&unk_48FB80;\n  v316 = a3;\n  v329 = (signed __int64)(a3 + 4868);\n  v311 = 0LL;\n  while ( 1 )\n  {\n    v6 = (char *)&unk_48AEA0;\n    v340 = v4;\n    v7 = v4;\n    v8 = v337;\n    v9 = 0LL;\n    v10 = 0.0;\n    do\n    {\n      v11 = 0LL;\n      v12 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v13 = v315[10];\n          v14 = 0;\n          if ( v13 >= 0 )\n            v14 = v315[10];\n          v15 = (__m128i)_mm_sub_pd(\n                           (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v8 + 2 * v11), (__m128)xmmword_489660),\n                           (__m128d)xmmword_489670);\n          v16 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v15, 78)) + *(double *)v15.m128i_i64) * 0.03125);\n          v17 = *(_DWORD *)&v6[v11] * v14;\n          v18 = (char *)(88 * v9 + 8 * v12 + 4763300);\n        }\n        else\n        {\n          v13 = v315[10];\n          v19 = 0;\n          if ( v13 >= 0 )\n            v19 = v315[10];\n          v20 = (__m128i)_mm_sub_pd(\n                           (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v8 + 2 * v11), (__m128)xmmword_489660),\n                           (__m128d)xmmword_489670);\n          v16 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v20, 78)) + *(double *)v20.m128i_i64) * 0.03125);\n          v17 = *(_DWORD *)&v7[v11] * v19;\n          v18 = &v7[v11 + 4];\n        }\n        v21 = (unsigned int)(*(_DWORD *)v18 + (v17 >> 4));\n        if ( (signed int)v21 < 0 )\n          v21 = 0LL;\n        if ( (signed int)v21 >= 128 )\n          v21 = 127LL;\n        v22 = *(unsigned __int16 *)(v8 + 2 * v11 - 8);\n        v23 = 63 - v22;\n        v24 = v22 + 64;\n        if ( !*(_BYTE *)(v8 + 2 * v11 - 6) )\n          v24 = v23;\n        v10 = v10\n            + 0.0\n            - qword_49F270[v24] * v16 * qword_4F1ED0[v21]\n            - v16 * qword_49F270[127 - v24] * qword_4F1ED0[(unsigned int)v21 ^ 0x7F];\n        ++v12;\n        v11 += 8LL;\n      }\n      while ( v11 != 88 );\n      ++v9;\n      v8 += 176LL;\n      v7 += 88;\n      v6 += 88;\n    }\n    while ( v9 != 3 );\n    v25 = 0;\n    if ( v13 >= 0 )\n      v25 = v13;\n    v26 = 0LL;\n    v27 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v28 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v26 + 536),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v29 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v28, 78)) + *(double *)v28.m128i_i64) * 0.03125);\n        v30 = v25 * dword_48B2D0[v26 / 4];\n        v31 = (char *)&unk_48B2D4 + 8 * v27;\n      }\n      else\n      {\n        v32 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v26 + 536),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v29 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v32, 78)) + *(double *)v32.m128i_i64) * 0.03125);\n        v30 = v25 * *(_DWORD *)&v314[v26];\n        v31 = &v314[v26 + 4];\n      }\n      v33 = (unsigned int)(*(_DWORD *)v31 + (v30 >> 4));\n      if ( (signed int)v33 < 0 )\n        v33 = 0LL;\n      if ( (signed int)v33 >= 128 )\n        v33 = 127LL;\n      v34 = *(unsigned __int16 *)(v339 + 2 * v26 + 528);\n      v35 = 63 - v34;\n      v36 = v34 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v26 + 530) )\n        v36 = v35;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v36] * v29 * qword_4F1ED0[v33]\n          - v29 * qword_49F270[127 - v36] * qword_4F1ED0[(unsigned int)v33 ^ 0x7F];\n      ++v27;\n      v26 += 8LL;\n    }\n    while ( v26 != 72 );\n    v37 = 0LL;\n    v38 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v39 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v37 + 680),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v40 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v39, 78)) + *(double *)v39.m128i_i64) * 0.03125);\n        v41 = v25 * dword_48B318[v37 / 4];\n        v42 = (_DWORD *)((char *)&unk_48B31C + v37);\n      }\n      else\n      {\n        v43 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v37 + 680),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v40 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v43, 78)) + *(double *)v43.m128i_i64) * 0.03125);\n        v41 = v25 * *(_DWORD *)&v314[v37 + 72];\n        v42 = (_DWORD *)(144 * v311 + 8 * v38 + 4764588);\n      }\n      v44 = (unsigned int)(*v42 + (v41 >> 4));\n      if ( (signed int)v44 < 0 )\n        v44 = 0LL;\n      if ( (signed int)v44 >= 128 )\n        v44 = 127LL;\n      v45 = *(unsigned __int16 *)(v339 + 2 * v37 + 672);\n      v46 = 63 - v45;\n      v47 = v45 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v37 + 674) )\n        v47 = v46;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v47] * v40 * qword_4F1ED0[v44]\n          - v40 * qword_49F270[127 - v47] * qword_4F1ED0[(unsigned int)v44 ^ 0x7F];\n      ++v38;\n      v37 += 8LL;\n    }\n    while ( v37 != 72 );\n    v48 = 0;\n    if ( v13 >= 0 )\n      v48 = v13;\n    v49 = 0LL;\n    v50 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v51 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v49 + 824),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v52 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v51, 78)) + *(double *)v51.m128i_i64) * 0.03125);\n        v53 = v48 * dword_48B510[v49 / 4];\n        v54 = (char *)&unk_48B514 + 8 * v50;\n      }\n      else\n      {\n        v55 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v49 + 824),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v52 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v55, 78)) + *(double *)v55.m128i_i64) * 0.03125);\n        v53 = v48 * *(_DWORD *)&v313[v49];\n        v54 = &v313[v49 + 4];\n      }\n      v56 = (unsigned int)(*(_DWORD *)v54 + (v53 >> 4));\n      if ( (signed int)v56 < 0 )\n        v56 = 0LL;\n      if ( (signed int)v56 >= 128 )\n        v56 = 127LL;\n      v57 = *(unsigned __int16 *)(v339 + 2 * v49 + 816);\n      v58 = 63 - v57;\n      v59 = v57 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v49 + 818) )\n        v59 = v58;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v59] * v52 * qword_4F1ED0[v56]\n          - v52 * qword_49F270[127 - v59] * qword_4F1ED0[(unsigned int)v56 ^ 0x7F];\n      ++v50;\n      v49 += 8LL;\n    }\n    while ( v49 != 80 );\n    v60 = 0LL;\n    v61 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v62 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v60 + 984),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v63 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v62, 78)) + *(double *)v62.m128i_i64) * 0.03125);\n        v64 = v48 * dword_48B560[v60 / 4];\n        v65 = (_DWORD *)((char *)&unk_48B564 + v60);\n      }\n      else\n      {\n        v66 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v60 + 984),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v63 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v66, 78)) + *(double *)v66.m128i_i64) * 0.03125);\n        v64 = v48 * *(_DWORD *)&v313[v60 + 80];\n        v65 = (_DWORD *)(160 * v311 + 8 * v61 + 4765188);\n      }\n      v67 = (unsigned int)(*v65 + (v64 >> 4));\n      if ( (signed int)v67 < 0 )\n        v67 = 0LL;\n      if ( (signed int)v67 >= 128 )\n        v67 = 127LL;\n      v68 = *(unsigned __int16 *)(v339 + 2 * v60 + 976);\n      v69 = 63 - v68;\n      v70 = v68 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v60 + 978) )\n        v70 = v69;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v70] * v63 * qword_4F1ED0[v67]\n          - v63 * qword_49F270[127 - v70] * qword_4F1ED0[(unsigned int)v67 ^ 0x7F];\n      ++v61;\n      v60 += 8LL;\n    }\n    while ( v60 != 80 );\n    v71 = 0;\n    if ( v13 >= 0 )\n      v71 = v13;\n    v72 = 0LL;\n    v73 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v74 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v72 + 1144),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v75 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v74, 78)) + *(double *)v74.m128i_i64) * 0.03125);\n        v76 = v71 * dword_48B790[v72 / 4];\n        v77 = (char *)&unk_48B794 + 8 * v73;\n      }\n      else\n      {\n        v78 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v72 + 1144),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v75 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v78, 78)) + *(double *)v78.m128i_i64) * 0.03125);\n        v76 = v71 * *(_DWORD *)&v327[v72];\n        v77 = &v327[v72 + 4];\n      }\n      v79 = (unsigned int)(*(_DWORD *)v77 + (v76 >> 4));\n      if ( (signed int)v79 < 0 )\n        v79 = 0LL;\n      if ( (signed int)v79 >= 128 )\n        v79 = 127LL;\n      v80 = *(unsigned __int16 *)(v339 + 2 * v72 + 1136);\n      v81 = 63 - v80;\n      v82 = v80 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v72 + 1138) )\n        v82 = v81;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v82] * v75 * qword_4F1ED0[v79]\n          - v75 * qword_49F270[127 - v82] * qword_4F1ED0[(unsigned int)v79 ^ 0x7F];\n      ++v73;\n      v72 += 8LL;\n    }\n    while ( v72 != 48 );\n    v83 = 0LL;\n    v84 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v85 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v83 + 1240),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v86 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v85, 78)) + *(double *)v85.m128i_i64) * 0.03125);\n        v87 = v71 * dword_48B7C0[v83 / 4];\n        v88 = (_DWORD *)((char *)&unk_48B7C4 + v83);\n      }\n      else\n      {\n        v89 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v83 + 1240),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v86 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v89, 78)) + *(double *)v89.m128i_i64) * 0.03125);\n        v87 = v71 * *(_DWORD *)&v327[v83 + 48];\n        v88 = (_DWORD *)(96 * v311 + 8 * v84 + 4765732);\n      }\n      v90 = (unsigned int)(*v88 + (v87 >> 4));\n      if ( (signed int)v90 < 0 )\n        v90 = 0LL;\n      if ( (signed int)v90 >= 128 )\n        v90 = 127LL;\n      v91 = *(unsigned __int16 *)(v339 + 2 * v83 + 1232);\n      v92 = 63 - v91;\n      v93 = v91 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v83 + 1234) )\n        v93 = v92;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v93] * v86 * qword_4F1ED0[v90]\n          - v86 * qword_49F270[127 - v93] * qword_4F1ED0[(unsigned int)v90 ^ 0x7F];\n      ++v84;\n      v83 += 8LL;\n    }\n    while ( v83 != 48 );\n    v94 = 0;\n    if ( v13 >= 0 )\n      v94 = v13;\n    v95 = 0LL;\n    v96 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v97 = (__m128i)_mm_sub_pd(\n                         (__m128d)_mm_unpacklo_ps(\n                                    (__m128)*(unsigned __int64 *)(v339 + 2 * v95 + 1336),\n                                    (__m128)xmmword_489660),\n                         (__m128d)xmmword_489670);\n        v98 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v97, 78)) + *(double *)v97.m128i_i64) * 0.03125);\n        v99 = v94 * dword_48B910[v95 / 4];\n        v100 = (char *)&unk_48B914 + 8 * v96;\n      }\n      else\n      {\n        v101 = (__m128i)_mm_sub_pd(\n                          (__m128d)_mm_unpacklo_ps(\n                                     (__m128)*(unsigned __int64 *)(v339 + 2 * v95 + 1336),\n                                     (__m128)xmmword_489660),\n                          (__m128d)xmmword_489670);\n        v98 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v101, 78)) + *(double *)v101.m128i_i64) * 0.03125);\n        v99 = v94 * *(_DWORD *)&v326[v95];\n        v100 = &v326[v95 + 4];\n      }\n      v102 = (unsigned int)(*(_DWORD *)v100 + (v99 >> 4));\n      if ( (signed int)v102 < 0 )\n        v102 = 0LL;\n      if ( (signed int)v102 >= 128 )\n        v102 = 127LL;\n      v103 = *(unsigned __int16 *)(v339 + 2 * v95 + 1328);\n      v104 = 63 - v103;\n      v105 = v103 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v95 + 1330) )\n        v105 = v104;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v105] * v98 * qword_4F1ED0[v102]\n          - v98 * qword_49F270[127 - v105] * qword_4F1ED0[(unsigned int)v102 ^ 0x7F];\n      ++v96;\n      v95 += 8LL;\n    }\n    while ( v95 != 32 );\n    v106 = 0;\n    if ( v13 >= 0 )\n      v106 = v13;\n    v107 = 0LL;\n    v108 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v109 = (__m128i)_mm_sub_pd(\n                          (__m128d)_mm_unpacklo_ps(\n                                     (__m128)*(unsigned __int64 *)(v339 + 2 * v107 + 1400),\n                                     (__m128)xmmword_489660),\n                          (__m128d)xmmword_489670);\n        v110 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v109, 78)) + *(double *)v109.m128i_i64) * 0.03125);\n        v111 = v106 * dword_48B990[v107 / 4];\n        v112 = (char *)&unk_48B994 + 8 * v108;\n      }\n      else\n      {\n        v113 = (__m128i)_mm_sub_pd(\n                          (__m128d)_mm_unpacklo_ps(\n                                     (__m128)*(unsigned __int64 *)(v339 + 2 * v107 + 1400),\n                                     (__m128)xmmword_489660),\n                          (__m128d)xmmword_489670);\n        v110 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v113, 78)) + *(double *)v113.m128i_i64) * 0.03125);\n        v111 = v106 * *(_DWORD *)&v325[v107];\n        v112 = &v325[v107 + 4];\n      }\n      v114 = (unsigned int)(*(_DWORD *)v112 + (v111 >> 4));\n      if ( (signed int)v114 < 0 )\n        v114 = 0LL;\n      if ( (signed int)v114 >= 128 )\n        v114 = 127LL;\n      v115 = *(unsigned __int16 *)(v339 + 2 * v107 + 1392);\n      v116 = 63 - v115;\n      v117 = v115 + 64;\n      if ( !*(_BYTE *)(v339 + 2 * v107 + 1394) )\n        v117 = v116;\n      v10 = v10\n          + 0.0\n          - qword_49F270[v117] * v110 * qword_4F1ED0[v114]\n          - v110 * qword_49F270[127 - v117] * qword_4F1ED0[(unsigned int)v114 ^ 0x7F];\n      ++v108;\n      v107 += 8LL;\n    }\n    while ( v107 != 32 );\n    v118 = 0;\n    if ( v13 >= 0 )\n      v118 = v13;\n    if ( v3 == 2 )\n    {\n      v119 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1464), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v120 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v119, 78)) + *(double *)v119.m128i_i64) * 0.03125);\n      v121 = 31 * v118;\n      v122 = &unk_48BA14;\n    }\n    else\n    {\n      v123 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1464), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v120 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v123, 78)) + *(double *)v123.m128i_i64) * 0.03125);\n      v121 = v118 * dword_48BA30[6 * v311];\n      v122 = (_DWORD *)(24 * v311 + 4766260);\n    }\n    v124 = (unsigned int)(*v122 + (v121 >> 4));\n    if ( (signed int)v124 < 0 )\n      v124 = 0LL;\n    if ( (signed int)v124 >= 128 )\n      v124 = 127LL;\n    v125 = *(unsigned __int16 *)(v339 + 1456);\n    v126 = 63 - v125;\n    v127 = v125 + 64;\n    if ( !*(_BYTE *)(v339 + 1458) )\n      v127 = v126;\n    v128 = v10\n         + 0.0\n         - qword_49F270[v127] * v120 * qword_4F1ED0[v124]\n         - v120 * qword_49F270[127 - v127] * qword_4F1ED0[(unsigned int)v124 ^ 0x7F];\n    if ( v3 == 2 )\n    {\n      v129 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1480), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v130 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v129, 78)) + *(double *)v129.m128i_i64) * 0.03125);\n      v131 = 31 * v118;\n      v132 = &unk_48BA1C;\n    }\n    else\n    {\n      v133 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1480), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v130 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v133, 78)) + *(double *)v133.m128i_i64) * 0.03125);\n      v131 = v118 * dword_48BA38[6 * v311];\n      v132 = (_DWORD *)(24 * v311 + 4766268);\n    }\n    v134 = (unsigned int)(*v132 + (v131 >> 4));\n    if ( (signed int)v134 < 0 )\n      v134 = 0LL;\n    if ( (signed int)v134 >= 128 )\n      v134 = 127LL;\n    v135 = *(unsigned __int16 *)(v339 + 1472);\n    v136 = 63 - v135;\n    v137 = v135 + 64;\n    if ( !*(_BYTE *)(v339 + 1474) )\n      v137 = v136;\n    v138 = v128\n         + 0.0\n         - qword_49F270[v137] * v130 * qword_4F1ED0[v134]\n         - v130 * qword_49F270[127 - v137] * qword_4F1ED0[(unsigned int)v134 ^ 0x7F];\n    if ( v3 == 2 )\n    {\n      v139 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1496), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v140 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v139, 78)) + *(double *)v139.m128i_i64) * 0.03125);\n      v141 = 25 * v118;\n      v142 = &unk_48BA24;\n    }\n    else\n    {\n      v143 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*(unsigned __int64 *)(v339 + 1496), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v140 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v143, 78)) + *(double *)v143.m128i_i64) * 0.03125);\n      v141 = dword_48BA40[6 * v311] * v118;\n      v142 = (_DWORD *)(24 * v311 + 4766276);\n    }\n    v144 = (unsigned int)(*v142 + (v141 >> 4));\n    if ( (signed int)v144 < 0 )\n      v144 = 0LL;\n    if ( (signed int)v144 >= 128 )\n      v144 = 127LL;\n    v145 = *(unsigned __int16 *)(v339 + 1488);\n    v146 = 63 - v145;\n    v147 = v145 + 64;\n    if ( !*(_BYTE *)(v339 + 1490) )\n      v147 = v146;\n    v148 = 0;\n    if ( v13 >= 0 )\n      v148 = v13;\n    v149 = v138\n         + 0.0\n         - qword_49F270[v147] * v140 * qword_4F1ED0[v144]\n         - v140 * qword_49F270[127 - v147] * qword_4F1ED0[(unsigned int)v144 ^ 0x7F];\n    if ( v3 == 2 )\n    {\n      v150 = v316;\n      v151 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*((unsigned __int64 *)v316 + 1), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v152 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v151, 78)) + *(double *)v151.m128i_i64) * 0.03125);\n      v153 = 13 * v148;\n      v154 = &unk_48BA84;\n    }\n    else\n    {\n      v150 = v316;\n      v155 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*((unsigned __int64 *)v316 + 1), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v152 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v155, 78)) + *(double *)v155.m128i_i64) * 0.03125);\n      v153 = v148 * dword_48BA90[4 * v311];\n      v154 = (_DWORD *)((char *)&unk_48BA94 + 16 * v311);\n    }\n    v156 = (unsigned int)(*v154 + (v153 >> 4));\n    if ( (signed int)v156 < 0 )\n      v156 = 0LL;\n    if ( (signed int)v156 >= 128 )\n      v156 = 127LL;\n    v157 = *v150;\n    v158 = 63 - v157;\n    v159 = v157 + 64;\n    if ( !*((_BYTE *)v150 + 2) )\n      v159 = v158;\n    v160 = v149\n         + 0.0\n         - qword_49F270[v159] * v152 * qword_4F1ED0[v156]\n         - v152 * qword_49F270[127 - v159] * qword_4F1ED0[(unsigned int)v156 ^ 0x7F];\n    if ( v3 == 2 )\n    {\n      v161 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*((unsigned __int64 *)v150 + 3), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v162 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v161, 78)) + *(double *)v161.m128i_i64) * 0.03125);\n      v163 = 3 * v148;\n      v164 = &unk_48BA8C;\n    }\n    else\n    {\n      v165 = (__m128i)_mm_sub_pd(\n                        (__m128d)_mm_unpacklo_ps((__m128)*((unsigned __int64 *)v150 + 3), (__m128)xmmword_489660),\n                        (__m128d)xmmword_489670);\n      v162 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v165, 78)) + *(double *)v165.m128i_i64) * 0.03125);\n      v163 = dword_48BA98[4 * v311] * v148;\n      v164 = (_DWORD *)((char *)&unk_48BA9C + 16 * v311);\n    }\n    v166 = (unsigned int)(*v164 + (v163 >> 4));\n    if ( (signed int)v166 < 0 )\n      v166 = 0LL;\n    if ( (signed int)v166 >= 128 )\n      v166 = 127LL;\n    v167 = v150[8];\n    v168 = 63 - v167;\n    v169 = v167 + 64;\n    if ( !*((_BYTE *)v150 + 18) )\n      v169 = v168;\n    v170 = v160\n         + 0.0\n         - qword_49F270[v169] * v162 * qword_4F1ED0[v166]\n         - v162 * qword_49F270[127 - v169] * qword_4F1ED0[(unsigned int)v166 ^ 0x7F];\n    v171 = 0;\n    if ( v13 >= 0 )\n      v171 = v13;\n    v172 = 0LL;\n    v173 = 0LL;\n    do\n    {\n      if ( v3 == 2 )\n      {\n        v174 = (__m128i)_mm_sub_pd(\n                          (__m128d)_mm_unpacklo_ps(\n                                     (__m128)*(unsigned __int64 *)&v150[v172 + 20],\n                                     (__m128)xmmword_489660),\n                          (__m128d)xmmword_489670);\n        v175 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v174, 78)) + *(double *)v174.m128i_i64) * 0.03125);\n        v176 = v171 * dword_48BAC0[v172 / 4];\n        v177 = (char *)&unk_48BAC4 + 8 * v173;\n      }\n      else\n      {\n        v178 = (__m128i)_mm_sub_pd(\n                          (__m128d)_mm_unpacklo_ps(\n                                     (__m128)*(unsigned __int64 *)&v150[v172 + 20],\n                                     (__m128)xmmword_489660),\n                          (__m128d)xmmword_489670);\n        v175 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v178, 78)) + *(double *)v178.m128i_i64) * 0.03125);\n        v176 = v171 * *(_DWORD *)&v312[v172];\n        v177 = &v312[v172 + 4];\n      }\n      v179 = (unsigned int)(*(_DWORD *)v177 + (v176 >> 4));\n      if ( (signed int)v179 < 0 )\n        v179 = 0LL;\n      if ( (signed int)v179 >= 128 )\n        v179 = 127LL;\n      v180 = v150[v172 + 16];\n      v181 = 63 - v180;\n      v182 = v180 + 64;\n      if ( !LOBYTE(v150[v172 + 17]) )\n        v182 = v181;\n      v170 = v170\n           + 0.0\n           - qword_49F270[v182] * v175 * qword_4F1ED0[v179]\n           - v175 * qword_49F270[127 - v182] * qword_4F1ED0[(unsigned int)v179 ^ 0x7F];\n      ++v173;\n      v172 += 8LL;\n    }\n    while ( v172 != 32 );\n    v183 = 0;\n    if ( v13 >= 0 )\n      v183 = v13;\n    v184 = (char *)&unk_48BB40;\n    v185 = v324;\n    v186 = v336;\n    v187 = 0LL;\n    do\n    {\n      v188 = 0LL;\n      v189 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v190 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v186 + 2 * v188),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v191 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v190, 78)) + *(double *)v190.m128i_i64) * 0.03125);\n          v192 = v183 * *(_DWORD *)&v184[v188];\n          v193 = (char *)(32 * v187 + 8 * v189 + 4766532);\n        }\n        else\n        {\n          v194 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v186 + 2 * v188),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v191 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v194, 78)) + *(double *)v194.m128i_i64) * 0.03125);\n          v192 = v183 * *(_DWORD *)&v185[v188];\n          v193 = &v185[v188 + 4];\n        }\n        v195 = (unsigned int)(*(_DWORD *)v193 + (v192 >> 4));\n        if ( (signed int)v195 < 0 )\n          v195 = 0LL;\n        if ( (signed int)v195 >= 128 )\n          v195 = 127LL;\n        v196 = *(unsigned __int16 *)(v186 + 2 * v188 - 8);\n        v197 = 63 - v196;\n        v198 = v196 + 64;\n        if ( !*(_BYTE *)(v186 + 2 * v188 - 6) )\n          v198 = v197;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v198] * v191 * qword_4F1ED0[v195]\n             - v191 * qword_49F270[127 - v198] * qword_4F1ED0[(unsigned int)v195 ^ 0x7F];\n        ++v189;\n        v188 += 8LL;\n      }\n      while ( v188 != 32 );\n      ++v187;\n      v186 += 64LL;\n      v185 += 32;\n      v184 += 32;\n    }\n    while ( v187 != 3 );\n    v199 = 0;\n    if ( v13 >= 0 )\n      v199 = v13;\n    v200 = (char *)&unk_48BCC0;\n    v201 = v323;\n    v202 = v335;\n    v203 = 0LL;\n    do\n    {\n      v204 = 0LL;\n      v205 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v206 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v202 + 2 * v204),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v207 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v206, 78)) + *(double *)v206.m128i_i64) * 0.03125);\n          v208 = v199 * *(_DWORD *)&v200[v204];\n          v209 = (char *)(32 * v203 + 8 * v205 + 4766916);\n        }\n        else\n        {\n          v210 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v202 + 2 * v204),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v207 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v210, 78)) + *(double *)v210.m128i_i64) * 0.03125);\n          v208 = v199 * *(_DWORD *)&v201[v204];\n          v209 = &v201[v204 + 4];\n        }\n        v211 = (unsigned int)(*(_DWORD *)v209 + (v208 >> 4));\n        if ( (signed int)v211 < 0 )\n          v211 = 0LL;\n        if ( (signed int)v211 >= 128 )\n          v211 = 127LL;\n        v212 = *(unsigned __int16 *)(v202 + 2 * v204 - 8);\n        v213 = 63 - v212;\n        v214 = v212 + 64;\n        if ( !*(_BYTE *)(v202 + 2 * v204 - 6) )\n          v214 = v213;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v214] * v207 * qword_4F1ED0[v211]\n             - v207 * qword_49F270[127 - v214] * qword_4F1ED0[(unsigned int)v211 ^ 0x7F];\n        ++v205;\n        v204 += 8LL;\n      }\n      while ( v204 != 32 );\n      ++v203;\n      v202 += 64LL;\n      v201 += 32;\n      v200 += 32;\n    }\n    while ( v203 != 10 );\n    v215 = 0;\n    if ( v13 >= 0 )\n      v215 = v13;\n    v216 = (char *)&unk_48C0C0;\n    v217 = v322;\n    v218 = v334;\n    v219 = 0LL;\n    do\n    {\n      v220 = 0LL;\n      v221 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v222 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v218 + 2 * v220),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v223 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v222, 78)) + *(double *)v222.m128i_i64) * 0.03125);\n          v224 = v215 * *(_DWORD *)&v216[v220];\n          v225 = (char *)(120 * v219 + 8 * v221 + 4767940);\n        }\n        else\n        {\n          v226 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v218 + 2 * v220),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v223 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v226, 78)) + *(double *)v226.m128i_i64) * 0.03125);\n          v224 = v215 * *(_DWORD *)&v217[v220];\n          v225 = &v217[v220 + 4];\n        }\n        v227 = (unsigned int)(*(_DWORD *)v225 + (v224 >> 4));\n        if ( (signed int)v227 < 0 )\n          v227 = 0LL;\n        if ( (signed int)v227 >= 128 )\n          v227 = 127LL;\n        v228 = *(unsigned __int16 *)(v218 + 2 * v220 - 8);\n        v229 = 63 - v228;\n        v230 = v228 + 64;\n        if ( !*(_BYTE *)(v218 + 2 * v220 - 6) )\n          v230 = v229;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v230] * v223 * qword_4F1ED0[v227]\n             - v223 * qword_49F270[127 - v230] * qword_4F1ED0[(unsigned int)v227 ^ 0x7F];\n        ++v221;\n        v220 += 8LL;\n      }\n      while ( v220 != 120 );\n      ++v219;\n      v218 += 240LL;\n      v217 += 120;\n      v216 += 120;\n    }\n    while ( v219 != 10 );\n    v231 = 0;\n    if ( v13 >= 0 )\n      v231 = v13;\n    v232 = (char *)&unk_48CFC0;\n    v233 = v321;\n    v234 = v333;\n    v235 = 0LL;\n    do\n    {\n      v236 = 0LL;\n      v237 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v238 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v234 + 2 * v236),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v239 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v238, 78)) + *(double *)v238.m128i_i64) * 0.03125);\n          v240 = v231 * *(_DWORD *)&v232[v236];\n          v241 = (char *)(120 * v235 + 8 * v237 + 4771780);\n        }\n        else\n        {\n          v242 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v234 + 2 * v236),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v239 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v242, 78)) + *(double *)v242.m128i_i64) * 0.03125);\n          v240 = v231 * *(_DWORD *)&v233[v236];\n          v241 = &v233[v236 + 4];\n        }\n        v243 = (unsigned int)(*(_DWORD *)v241 + (v240 >> 4));\n        if ( (signed int)v243 < 0 )\n          v243 = 0LL;\n        if ( (signed int)v243 >= 128 )\n          v243 = 127LL;\n        v244 = *(unsigned __int16 *)(v234 + 2 * v236 - 8);\n        v245 = 63 - v244;\n        v246 = v244 + 64;\n        if ( !*(_BYTE *)(v234 + 2 * v236 - 6) )\n          v246 = v245;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v246] * v239 * qword_4F1ED0[v243]\n             - v239 * qword_49F270[127 - v246] * qword_4F1ED0[(unsigned int)v243 ^ 0x7F];\n        ++v237;\n        v236 += 8LL;\n      }\n      while ( v236 != 120 );\n      ++v235;\n      v234 += 240LL;\n      v233 += 120;\n      v232 += 120;\n    }\n    while ( v235 != 10 );\n    v247 = 0;\n    if ( v13 >= 0 )\n      v247 = v13;\n    v248 = (char *)&unk_48DEC0;\n    v249 = v320;\n    v250 = v332;\n    v251 = 0LL;\n    do\n    {\n      v252 = 0LL;\n      v253 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v254 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v250 + 2 * v252),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v255 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v254, 78)) + *(double *)v254.m128i_i64) * 0.03125);\n          v256 = v247 * *(_DWORD *)&v248[v252];\n          v257 = (char *)(8 * v253 + 40 * v251 + 4775620);\n        }\n        else\n        {\n          v258 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v250 + 2 * v252),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v255 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v258, 78)) + *(double *)v258.m128i_i64) * 0.03125);\n          v256 = v247 * *(_DWORD *)&v249[v252];\n          v257 = &v249[v252 + 4];\n        }\n        v259 = (unsigned int)(*(_DWORD *)v257 + (v256 >> 4));\n        if ( (signed int)v259 < 0 )\n          v259 = 0LL;\n        if ( (signed int)v259 >= 128 )\n          v259 = 127LL;\n        v260 = *(unsigned __int16 *)(v250 + 2 * v252 - 8);\n        v261 = 63 - v260;\n        v262 = v260 + 64;\n        if ( !*(_BYTE *)(v250 + 2 * v252 - 6) )\n          v262 = v261;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v262] * v255 * qword_4F1ED0[v259]\n             - v255 * qword_49F270[127 - v262] * qword_4F1ED0[(unsigned int)v259 ^ 0x7F];\n        ++v253;\n        v252 += 8LL;\n      }\n      while ( v252 != 40 );\n      ++v251;\n      v250 += 80LL;\n      v249 += 40;\n      v248 += 40;\n    }\n    while ( v251 != 10 );\n    v263 = 0;\n    if ( v13 >= 0 )\n      v263 = v13;\n    v264 = (char *)&unk_48E3C0;\n    v265 = v319;\n    v266 = v331;\n    v267 = 0LL;\n    do\n    {\n      v268 = 0LL;\n      v269 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v270 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v266 + 2 * v268),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v271 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v270, 78)) + *(double *)v270.m128i_i64) * 0.03125);\n          v272 = v263 * *(_DWORD *)&v264[v268];\n          v273 = (char *)(8 * v269 + 40 * v267 + 4776900);\n        }\n        else\n        {\n          v274 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v266 + 2 * v268),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v271 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v274, 78)) + *(double *)v274.m128i_i64) * 0.03125);\n          v272 = v263 * *(_DWORD *)&v265[v268];\n          v273 = &v265[v268 + 4];\n        }\n        v275 = (unsigned int)(*(_DWORD *)v273 + (v272 >> 4));\n        if ( (signed int)v275 < 0 )\n          v275 = 0LL;\n        if ( (signed int)v275 >= 128 )\n          v275 = 127LL;\n        v276 = *(unsigned __int16 *)(v266 + 2 * v268 - 8);\n        v277 = 63 - v276;\n        v278 = v276 + 64;\n        if ( !*(_BYTE *)(v266 + 2 * v268 - 6) )\n          v278 = v277;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v278] * v271 * qword_4F1ED0[v275]\n             - v271 * qword_49F270[127 - v278] * qword_4F1ED0[(unsigned int)v275 ^ 0x7F];\n        ++v269;\n        v268 += 8LL;\n      }\n      while ( v268 != 40 );\n      ++v267;\n      v266 += 80LL;\n      v265 += 40;\n      v264 += 40;\n    }\n    while ( v267 != 10 );\n    v279 = 0;\n    if ( v13 >= 0 )\n      v279 = v13;\n    v280 = (char *)&unk_48E8C0;\n    v281 = v318;\n    v282 = v330;\n    v283 = 0LL;\n    do\n    {\n      v284 = 0LL;\n      v285 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v286 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v282 + 2 * v284),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v287 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v286, 78)) + *(double *)v286.m128i_i64) * 0.03125);\n          v288 = v279 * *(_DWORD *)&v280[v284];\n          v289 = (char *)(120 * v283 + 8 * v285 + 4778180);\n        }\n        else\n        {\n          v290 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v282 + 2 * v284),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v287 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v290, 78)) + *(double *)v290.m128i_i64) * 0.03125);\n          v288 = v279 * *(_DWORD *)&v281[v284];\n          v289 = &v281[v284 + 4];\n        }\n        v291 = (unsigned int)(*(_DWORD *)v289 + (v288 >> 4));\n        if ( (signed int)v291 < 0 )\n          v291 = 0LL;\n        if ( (signed int)v291 >= 128 )\n          v291 = 127LL;\n        v292 = *(unsigned __int16 *)(v282 + 2 * v284 - 8);\n        v293 = 63 - v292;\n        v294 = v292 + 64;\n        if ( !*(_BYTE *)(v282 + 2 * v284 - 6) )\n          v294 = v293;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v294] * v287 * qword_4F1ED0[v291]\n             - v287 * qword_49F270[127 - v294] * qword_4F1ED0[(unsigned int)v291 ^ 0x7F];\n        ++v285;\n        v284 += 8LL;\n      }\n      while ( v284 != 120 );\n      ++v283;\n      v282 += 240LL;\n      v281 += 120;\n      v280 += 120;\n    }\n    while ( v283 != 10 );\n    if ( v13 < 0 )\n      v13 = 0;\n    v295 = (char *)&unk_48F7C0;\n    v296 = v317;\n    v297 = v329;\n    v298 = 0LL;\n    do\n    {\n      v299 = 0LL;\n      v300 = 0LL;\n      do\n      {\n        if ( v3 == 2 )\n        {\n          v301 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v297 + 2 * v299),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v302 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v301, 78)) + *(double *)v301.m128i_i64) * 0.03125);\n          v303 = v13 * *(_DWORD *)&v295[v299];\n          v304 = (char *)(120 * v298 + 8 * v300 + 4782020);\n        }\n        else\n        {\n          v305 = (__m128i)_mm_sub_pd(\n                            (__m128d)_mm_unpacklo_ps(\n                                       (__m128)*(unsigned __int64 *)(v297 + 2 * v299),\n                                       (__m128)xmmword_489660),\n                            (__m128d)xmmword_489670);\n          v302 = fmin(1.0, (COERCE_DOUBLE(_mm_shuffle_epi32(v305, 78)) + *(double *)v305.m128i_i64) * 0.03125);\n          v303 = v13 * *(_DWORD *)&v296[v299];\n          v304 = &v296[v299 + 4];\n        }\n        v306 = (unsigned int)(*(_DWORD *)v304 + (v303 >> 4));\n        if ( (signed int)v306 < 0 )\n          v306 = 0LL;\n        if ( (signed int)v306 >= 128 )\n          v306 = 127LL;\n        v307 = *(unsigned __int16 *)(v297 + 2 * v299 - 8);\n        v308 = 63 - v307;\n        v309 = v307 + 64;\n        if ( !*(_BYTE *)(v297 + 2 * v299 - 6) )\n          v309 = v308;\n        v170 = v170\n             + 0.0\n             - qword_49F270[v309] * v302 * qword_4F1ED0[v306]\n             - v302 * qword_49F270[127 - v309] * qword_4F1ED0[(unsigned int)v306 ^ 0x7F];\n        ++v300;\n        v299 += 8LL;\n      }\n      while ( v299 != 120 );\n      ++v298;\n      v297 += 240LL;\n      v296 += 120;\n      v295 += 120;\n    }\n    while ( v298 != 10 );\n    if ( v5 > v170 )\n    {\n      *v328 = v311;\n      v5 = v170;\n    }\n    result = ++v311;\n    if ( v311 == v338 )\n      break;\n    v3 = v315[6];\n    v4 = v340 + 264;\n    v314 += 144;\n    v313 += 160;\n    v327 += 96;\n    v326 += 32;\n    v325 += 32;\n    v312 += 32;\n    v324 += 96;\n    v323 += 256;\n    v322 += 960;\n    v321 += 960;\n    v320 += 320;\n    v319 += 320;\n    v318 += 960;\n    v317 += 960;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410450L", 
            "funcEndAddr": "0x41217cL", 
            "funcName": "sub_410450"
        }, 
        {
            "decompiledFuncCode": "void *sub_412180()\n{\n  void *result; // rax\n  __int64 v1; // r8\n  __int64 v2; // rsi\n  __int64 v3; // rcx\n  __int64 v4; // rdi\n\n  result = dest;\n  if ( *((_DWORD *)dest + 803) )\n  {\n    v1 = *((_QWORD *)off_49F6D0 + 1770);\n    v2 = *((signed int *)off_49F6D0 + 18111);\n    v3 = *((signed int *)off_49F6D0 + 6);\n    v4 = *(_DWORD *)(v1 + 12) / dword_4FA11C;\n    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 4 * v4) = 1;\n    result = (void *)sub_410450(\n                       (_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F08 + v2) + 8 * v3) + 4 * v4),\n                       *(_QWORD *)(v1 + 32),\n                       *(unsigned __int16 **)(v1 + 40));\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412180L", 
            "funcEndAddr": "0x4121eeL", 
            "funcName": "sub_412180"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4121F0(int a1)\n{\n  _QWORD *v1; // r9\n  _QWORD *v2; // r8\n  __int64 result; // rax\n  __int64 v4; // r11\n  __int64 v5; // rdi\n  __int64 v6; // rcx\n  signed __int64 v7; // rdx\n  signed __int64 v8; // rsi\n  __int64 v9; // r11\n  __int64 v10; // rdi\n  __int64 v11; // rcx\n  signed __int64 v12; // rdx\n  signed __int64 v13; // rsi\n  __int64 v14; // r11\n  __int64 v15; // rdi\n  __int64 v16; // rcx\n  signed __int64 v17; // rdx\n  signed __int64 v18; // rsi\n  __int64 v19; // rax\n  __int64 v20; // r9\n  __int64 v21; // rsi\n  __int64 v22; // rdi\n  signed __int64 v23; // rdx\n  signed __int64 v24; // rbx\n  __int64 v25; // r10\n  __int64 v26; // rsi\n  __int64 v27; // rdi\n  signed __int64 v28; // rcx\n  __int64 v29; // r10\n  __int64 v30; // rsi\n  __int64 v31; // rdi\n  signed __int64 v32; // rcx\n  __int64 v33; // r10\n  __int64 v34; // rsi\n  __int64 v35; // rdi\n  signed __int64 v36; // rcx\n  __int64 v37; // rcx\n  __int64 v38; // rdx\n  __int64 v39; // rsi\n  signed __int64 v40; // rdi\n\n  v1 = ptr;\n  v2 = qword_4F9F08;\n  result = (unsigned int)dword_4FA120;\n  if ( a1 )\n  {\n    if ( dword_4FA120 > 0 )\n    {\n      v4 = **((_QWORD **)ptr + 1);\n      v5 = **(_QWORD **)ptr;\n      result = **((_QWORD **)qword_4F9F08 + 1);\n      v6 = **(_QWORD **)qword_4F9F08;\n      v7 = 0LL;\n      do\n      {\n        v8 = 2 * v7 & 0x1FFFFFFFCLL;\n        *(_DWORD *)(v5 + 4 * v7) = *(_DWORD *)(v4 + v8);\n        *(_DWORD *)(v6 + 4 * v7++) = *(_DWORD *)(result + v8);\n      }\n      while ( v7 < dword_4FA120 );\n      if ( dword_4FA120 > 0 )\n      {\n        v9 = *(_QWORD *)(v1[1] + 8LL);\n        v10 = *(_QWORD *)(*v1 + 8LL);\n        result = *(_QWORD *)(v2[1] + 8LL);\n        v11 = *(_QWORD *)(*v2 + 8LL);\n        v12 = 0LL;\n        do\n        {\n          v13 = 2 * v12 & 0x1FFFFFFFCLL;\n          *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)(v9 + v13);\n          *(_DWORD *)(v11 + 4 * v12++) = *(_DWORD *)(result + v13);\n        }\n        while ( v12 < dword_4FA120 );\n        if ( dword_4FA120 > 0 )\n        {\n          v14 = *(_QWORD *)(v1[1] + 16LL);\n          v15 = *(_QWORD *)(*v1 + 16LL);\n          result = *(_QWORD *)(v2[1] + 16LL);\n          v16 = *(_QWORD *)(*v2 + 16LL);\n          v17 = 0LL;\n          do\n          {\n            v18 = 2 * v17 & 0x1FFFFFFFCLL;\n            *(_DWORD *)(v15 + 4 * v17) = *(_DWORD *)(v14 + v18);\n            *(_DWORD *)(v16 + 4 * v17++) = *(_DWORD *)(result + v18);\n          }\n          while ( v17 < dword_4FA120 );\n          if ( dword_4FA120 > 0 )\n          {\n            v19 = *v1;\n            v20 = *(_QWORD *)(v1[1] + 24LL);\n            v21 = *(_QWORD *)(v19 + 24);\n            result = *(_QWORD *)(v2[1] + 24LL);\n            v22 = *(_QWORD *)(*v2 + 24LL);\n            v23 = 0LL;\n            do\n            {\n              v24 = 2 * v23 & 0x1FFFFFFFCLL;\n              *(_DWORD *)(v21 + 4 * v23) = *(_DWORD *)(v20 + v24);\n              *(_DWORD *)(v22 + 4 * v23++) = *(_DWORD *)(result + v24);\n            }\n            while ( v23 < dword_4FA120 );\n          }\n        }\n      }\n    }\n  }\n  else if ( dword_4FA120 > 0 )\n  {\n    v25 = **(_QWORD **)ptr;\n    v26 = **((_QWORD **)ptr + 1);\n    v27 = **(_QWORD **)qword_4F9F08;\n    result = **((_QWORD **)qword_4F9F08 + 1);\n    v28 = 0LL;\n    do\n    {\n      *(_DWORD *)(v26 + 4 * v28) = *(_DWORD *)(v25 + 8 * v28);\n      *(_DWORD *)(result + 4 * v28) = *(_DWORD *)(v27 + 8 * v28);\n      ++v28;\n    }\n    while ( v28 < (dword_4FA120 + 1) >> 1 );\n    if ( dword_4FA120 > 0 )\n    {\n      v29 = *(_QWORD *)(*v1 + 8LL);\n      v30 = *(_QWORD *)(v1[1] + 8LL);\n      v31 = *(_QWORD *)(*v2 + 8LL);\n      result = *(_QWORD *)(v2[1] + 8LL);\n      v32 = 0LL;\n      do\n      {\n        *(_DWORD *)(v30 + 4 * v32) = *(_DWORD *)(v29 + 8 * v32);\n        *(_DWORD *)(result + 4 * v32) = *(_DWORD *)(v31 + 8 * v32);\n        ++v32;\n      }\n      while ( v32 < (dword_4FA120 + 1) >> 1 );\n      if ( dword_4FA120 > 0 )\n      {\n        v33 = *(_QWORD *)(*v1 + 16LL);\n        v34 = *(_QWORD *)(v1[1] + 16LL);\n        v35 = *(_QWORD *)(*v2 + 16LL);\n        result = *(_QWORD *)(v2[1] + 16LL);\n        v36 = 0LL;\n        do\n        {\n          *(_DWORD *)(v34 + 4 * v36) = *(_DWORD *)(v33 + 8 * v36);\n          *(_DWORD *)(result + 4 * v36) = *(_DWORD *)(v35 + 8 * v36);\n          ++v36;\n        }\n        while ( v36 < (dword_4FA120 + 1) >> 1 );\n        if ( dword_4FA120 > 0 )\n        {\n          v37 = *(_QWORD *)(*v1 + 24LL);\n          v38 = *(_QWORD *)(v1[1] + 24LL);\n          result = *(_QWORD *)(*v2 + 24LL);\n          v39 = *(_QWORD *)(v2[1] + 24LL);\n          v40 = 0LL;\n          do\n          {\n            *(_DWORD *)(v38 + 4 * v40) = *(_DWORD *)(v37 + 8 * v40);\n            *(_DWORD *)(v39 + 4 * v40) = *(_DWORD *)(result + 8 * v40);\n            ++v40;\n          }\n          while ( v40 < (dword_4FA120 + 1) >> 1 );\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4121f0L", 
            "funcEndAddr": "0x412495L", 
            "funcName": "sub_4121F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4124A0(int a1, int a2, int a3, __int64 a4, int a5)\n{\n  int v5; // er9\n  signed int *v6; // r12\n  int v7; // edx\n  int v8; // kr00_4\n  int v9; // er9\n  int v10; // er14\n  int v11; // eax\n  int v12; // er15\n  __int64 v13; // rbx\n  int v14; // ebp\n  int v15; // er11\n  int v16; // er10\n  __int64 result; // rax\n  __int64 v18; // rcx\n  __int64 v19; // r10\n  __int64 v20; // r13\n  signed __int64 v21; // rdx\n  __int64 v22; // rdi\n  __int64 v23; // rbp\n  __int64 v24; // rsi\n  __int64 v25; // r8\n  signed __int64 v26; // r11\n  signed __int64 v27; // r12\n  signed __int64 v28; // r10\n  signed __int64 v29; // r13\n  signed __int64 v30; // rbp\n  signed __int64 v31; // r14\n  signed __int64 v32; // r8\n  __int64 v33; // r15\n  int v34; // er9\n  int v35; // er13\n  int v36; // eax\n  unsigned int v37; // er11\n  __int64 v38; // r10\n  __int64 v39; // r14\n  __int64 v40; // r8\n  __int64 v41; // rdx\n  __int64 v42; // r15\n  __int64 v43; // rbx\n  signed __int16 *v44; // rdi\n  char *v45; // rsi\n  signed __int64 v46; // rdi\n  signed __int16 *v47; // rdx\n  signed __int64 v48; // r15\n  int v49; // ebp\n  signed __int16 *v50; // rdx\n  char *v51; // rsi\n  signed __int16 *v52; // rax\n  __int64 v53; // rcx\n  signed __int64 v54; // r8\n  __int64 v55; // rdx\n  signed __int64 v56; // rdi\n  char *v57; // rbx\n  signed __int64 v58; // rax\n  signed __int64 v59; // rdx\n  char *v60; // rdx\n  __int64 v61; // rax\n  signed __int64 v62; // r15\n  __int64 v63; // rdx\n  __int64 v64; // r10\n  __int64 v65; // rbx\n  signed __int64 v66; // rcx\n  signed __int64 v67; // rbp\n  signed __int64 v68; // r8\n  char *v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rsi\n  int v72; // ebx\n  int v73; // eax\n  __int64 v74; // r12\n  __int64 v75; // rdx\n  char *v76; // r15\n  char *v77; // r14\n  __int64 v78; // r13\n  unsigned int v79; // ebp\n  int v80; // ebx\n  int v81; // edx\n  _QWORD *v82; // r9\n  __int64 v83; // rax\n  _QWORD *v84; // rdx\n  __int64 v85; // rcx\n  __int64 v86; // rsi\n  _WORD *v87; // rdi\n  __int64 v88; // rbx\n  _WORD *v89; // rdi\n  __int64 v90; // rbx\n  _WORD *v91; // rdi\n  __int64 v92; // rbx\n  __int64 v93; // rcx\n  __int64 v94; // rcx\n  __int64 v95; // r13\n  __int64 v96; // rdi\n  __int64 v97; // rbp\n  __int64 v98; // r8\n  signed __int64 v99; // r11\n  signed __int64 v100; // r9\n  signed __int64 v101; // r12\n  signed __int64 v102; // r10\n  signed __int64 v103; // r13\n  signed __int64 v104; // rbp\n  signed __int64 v105; // r14\n  signed __int64 v106; // r8\n  __int64 v107; // r15\n  signed __int64 v108; // rdx\n  signed __int64 v109; // rbx\n  char *v110; // rbp\n  __int64 v111; // rax\n  signed __int64 v112; // r10\n  __int64 v113; // rsi\n  signed __int64 v114; // rbp\n  char *v115; // rdx\n  signed __int64 v116; // rbx\n  signed __int64 v117; // rsi\n  char *v118; // rsi\n  __int64 v119; // [rsp+8h] [rbp-510h]\n  __int64 v120; // [rsp+10h] [rbp-508h]\n  __int64 v121; // [rsp+18h] [rbp-500h]\n  __int64 v122; // [rsp+20h] [rbp-4F8h]\n  char *v123; // [rsp+28h] [rbp-4F0h]\n  __int64 v124; // [rsp+30h] [rbp-4E8h]\n  int v125; // [rsp+38h] [rbp-4E0h]\n  int v126; // [rsp+3Ch] [rbp-4DCh]\n  __int64 v127; // [rsp+40h] [rbp-4D8h]\n  int v128; // [rsp+4Ch] [rbp-4CCh]\n  int v129; // [rsp+50h] [rbp-4C8h]\n  int v130; // [rsp+54h] [rbp-4C4h]\n  __int64 v131; // [rsp+58h] [rbp-4C0h]\n  char v132[1208]; // [rsp+60h] [rbp-4B8h]\n\n  v5 = a3;\n  v6 = (signed int *)off_49F6D0;\n  v7 = (*(_DWORD *)off_49F6D0 - 1 - dword_49FB88) % *((_DWORD *)off_49F6D0 + 8);\n  v8 = v5;\n  v9 = v5 % 2;\n  v10 = 8 * v9;\n  v11 = v9;\n  v12 = 8 * v9 + 8;\n  v13 = v8 / 2;\n  v14 = 8 * v13;\n  v15 = 8 * v13 + 8;\n  v16 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v16 == 2 )\n  {\n    result = *(_QWORD *)(qword_4F9E30 + 6424);\n    v18 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 1) + 8LL * a1);\n    v19 = v14;\n    v20 = *((signed int *)off_49F6D0 + 39);\n    v21 = v15;\n    v22 = v10;\n    v23 = *((signed int *)off_49F6D0 + 38);\n    v24 = v12;\n    v25 = v19 + v20;\n    v26 = v19 | 1;\n    v122 = (v19 | 1) + v20;\n    v121 = (v19 | 3) + v20 + 1;\n    v120 = (v19 | 3) + v20 + 2;\n    v119 = (v19 | 3) + v20 + 3;\n    v27 = (v19 | 3) + v20;\n    v28 = v20 + (v19 | 7);\n    v29 = v26 + v20 + 1;\n    v30 = 2 * v23;\n    v31 = v30 + *(_QWORD *)(result + 8 * v25);\n    v32 = v30 + *(_QWORD *)(v18 + 8 * v25);\n    v33 = v122;\n    do\n    {\n      *(_WORD *)(v32 + 2 * v22) = *(_WORD *)(v31 + 2 * v22);\n      if ( v26 < v21 )\n      {\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v33) + 2 * v22) = *(_WORD *)(v30 + *(_QWORD *)(result + 8 * v33) + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v29) + 2 * v22) = *(_WORD *)(v30 + *(_QWORD *)(result + 8 * v29) + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v27) + 2 * v22) = *(_WORD *)(v30 + *(_QWORD *)(result + 8 * v27) + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v121) + 2 * v22) = *(_WORD *)(v30\n                                                                           + *(_QWORD *)(result + 8 * v121)\n                                                                           + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v120) + 2 * v22) = *(_WORD *)(v30\n                                                                           + *(_QWORD *)(result + 8 * v120)\n                                                                           + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v119) + 2 * v22) = *(_WORD *)(v30\n                                                                           + *(_QWORD *)(result + 8 * v119)\n                                                                           + 2 * v22);\n        *(_WORD *)(v30 + *(_QWORD *)(v18 + 8 * v28) + 2 * v22) = *(_WORD *)(v30 + *(_QWORD *)(result + 8 * v28) + 2 * v22);\n      }\n      ++v22;\n    }\n    while ( v22 < v24 );\n  }\n  else\n  {\n    v34 = 2 * v9;\n    LODWORD(v123) = 2 * v11 + 2;\n    LODWORD(v124) = 8 * v13;\n    v35 = v14 >> 2;\n    v36 = (v14 >> 2) + 2;\n    LODWORD(v119) = 8 * v13 + 8;\n    v121 = v8 / 2;\n    LODWORD(v122) = v7;\n    LODWORD(v120) = v12;\n    v125 = (v14 >> 2) + 2;\n    LODWORD(v127) = v16;\n    if ( a2 || v16 && (v16 != 1 || *((_DWORD *)off_49F6D0 + 18124) <= 0) )\n    {\n      v37 = a4 - 1;\n      v126 = v10;\n      v130 = a1;\n      v129 = a5;\n      v128 = a2;\n      if ( (unsigned int)(a4 - 1) > 6 )\n      {\n        v53 = v34;\n        v54 = (signed int)v123;\n        v55 = v13 << 35 >> 34;\n        v56 = v36;\n        v57 = &v132[16 * v55];\n        *(_DWORD *)&v57[4 * v53 + 64] = 0;\n        *(_DWORD *)&v57[4 * v53] = 0;\n        v58 = v34 | 1LL;\n        if ( v58 < v54 )\n        {\n          *(_DWORD *)&v57[4 * v58 + 64] = 0;\n          *(_DWORD *)&v57[4 * v58] = 0;\n        }\n        v59 = v55 | 1;\n        v49 = v119;\n        if ( v59 < v56 )\n        {\n          v60 = &v132[16 * v59];\n          *(_DWORD *)&v60[4 * v34 + 64] = 0;\n          *(_DWORD *)&v60[4 * v34] = 0;\n          if ( v58 < v54 )\n          {\n            *(_DWORD *)&v60[4 * v58 + 64] = 0;\n            *(_DWORD *)&v60[4 * v58] = 0;\n          }\n        }\n      }\n      else\n      {\n        v38 = *((_QWORD *)off_49F6D0 + 8991);\n        v39 = a5;\n        a4 = (signed int)a4;\n        v40 = v34;\n        v41 = (signed int)v123;\n        v42 = v13 << 35 >> 34;\n        v43 = *(_QWORD *)(v38 + 8LL * v34);\n        v44 = *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(v43 + 8 * v42) + 8 * v39) + 8LL * (signed int)a4);\n        v45 = &v132[16 * v42];\n        *(_DWORD *)&v45[4 * v40] = *v44;\n        *(_DWORD *)&v45[4 * v40 + 64] = v44[1];\n        v46 = v34 | 1LL;\n        v131 = v41;\n        if ( v46 < v41 )\n        {\n          v47 = *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v38 + 8 * v46) + 8 * v42) + 8 * v39) + 8 * a4);\n          *(_DWORD *)&v45[4 * v46] = *v47;\n          *(_DWORD *)&v45[4 * v46 + 64] = v47[1];\n        }\n        v48 = v42 | 1;\n        v49 = v119;\n        if ( v48 < v36 )\n        {\n          v50 = *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(v43 + 8 * v48) + 8 * v39) + 8 * a4);\n          v51 = &v132[16 * v48];\n          *(_DWORD *)&v51[4 * v34] = *v50;\n          *(_DWORD *)&v51[4 * v34 + 64] = v50[1];\n          if ( v46 < v131 )\n          {\n            v52 = *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v38 + 8 * v46) + 8 * v48) + 8 * v39)\n                                     + 8 * a4);\n            *(_DWORD *)&v51[4 * v46] = *v52;\n            *(_DWORD *)&v51[4 * v46 + 64] = v52[1];\n          }\n        }\n      }\n      v61 = *(_QWORD *)off_49F6E8;\n      v62 = v49;\n      v63 = v126;\n      v64 = (signed int)v120;\n      v65 = *(_QWORD *)(*(_QWORD *)off_49F6E8 + 8LL * (signed int)v124);\n      v66 = (signed int)v124 | 1LL;\n      v67 = (signed int)v124 | 3LL;\n      v68 = (signed int)v124 | 7LL;\n      v69 = &v132[64 * v68 + 128];\n      do\n      {\n        *(_DWORD *)&v69[4 * v63 - 448] = *(_DWORD *)(v65 + 4 * v63);\n        if ( v66 < v62 )\n        {\n          *(_DWORD *)&v69[4 * v63 - 384] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v66) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63 - 320] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v66 + 8) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63 - 256] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v67) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63 - 192] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v67 + 8) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63 - 128] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v67 + 16) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63 - 64] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v67 + 24) + 4 * v63);\n          *(_DWORD *)&v69[4 * v63] = *(_DWORD *)(*(_QWORD *)(v61 + 8 * v68) + 4 * v63);\n        }\n        ++v63;\n      }\n      while ( v63 < v64 );\n      v70 = v121;\n      v10 = v126;\n      a1 = v130;\n      a5 = v129;\n      LODWORD(v71) = v120;\n      v72 = v119;\n      v73 = v128;\n    }\n    else\n    {\n      v108 = v10;\n      v109 = (signed int)v124 | 1LL;\n      v110 = &v132[64 * ((signed int)v124 | 7LL) + 128];\n      do\n      {\n        *(_DWORD *)&v110[4 * v108 - 448] = 0;\n        if ( v109 < v15 )\n        {\n          *(_DWORD *)&v110[4 * v108 - 384] = 0;\n          *(_DWORD *)&v110[4 * v108 - 320] = 0;\n          *(_DWORD *)&v110[4 * v108 - 256] = 0;\n          *(_DWORD *)&v110[4 * v108 - 192] = 0;\n          *(_DWORD *)&v110[4 * v108 - 128] = 0;\n          *(_DWORD *)&v110[4 * v108 - 64] = 0;\n          *(_DWORD *)&v110[4 * v108] = 0;\n        }\n        ++v108;\n      }\n      while ( v108 < v12 );\n      v111 = v34;\n      v112 = (signed int)v123;\n      v113 = v121 << 35 >> 34;\n      v114 = v125;\n      v115 = &v132[16 * v113];\n      *(_DWORD *)&v115[4 * v111 + 64] = 0;\n      *(_DWORD *)&v115[4 * v111] = 0;\n      v116 = v34 | 1LL;\n      if ( v116 < v112 )\n      {\n        *(_DWORD *)&v115[4 * v116 + 64] = 0;\n        *(_DWORD *)&v115[4 * v116] = 0;\n      }\n      v117 = v113 | 1;\n      if ( v117 < v114 )\n      {\n        v118 = &v132[16 * v117];\n        *(_DWORD *)&v118[4 * v34 + 64] = 0;\n        *(_DWORD *)&v118[4 * v34] = 0;\n        if ( v116 < v112 )\n        {\n          *(_DWORD *)&v118[4 * v116 + 64] = 0;\n          *(_DWORD *)&v118[4 * v116] = 0;\n        }\n      }\n      v37 = a4 - 1;\n      v70 = v121;\n      LODWORD(v71) = v120;\n      v72 = v119;\n      v73 = 0;\n    }\n    if ( v37 >= 7 && (v73 || (_DWORD)v127 && ((_DWORD)v127 != 1 || v6[18124] <= 0)) )\n    {\n      result = *(_QWORD *)(qword_4F9E30 + 6424);\n      v94 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 1) + 8LL * a1);\n      v95 = v6[39];\n      v96 = v10;\n      v97 = v6[38];\n      v71 = (signed int)v71;\n      v98 = (signed int)v124 + v95;\n      v99 = (signed int)v124 | 1LL;\n      v122 = v99 + v95;\n      v100 = (signed int)v124 | 3LL;\n      v121 = v100 + v95 + 1;\n      v120 = v100 + v95 + 2;\n      v119 = v100 + v95 + 3;\n      v101 = v100 + v95;\n      v102 = v95 + ((signed int)v124 | 7LL);\n      v103 = v99 + v95 + 1;\n      v104 = 2 * v97;\n      v105 = v104 + *(_QWORD *)(result + 8 * v98);\n      v106 = v104 + *(_QWORD *)(v94 + 8 * v98);\n      v107 = v122;\n      do\n      {\n        *(_WORD *)(v106 + 2 * v96) = *(_WORD *)(v105 + 2 * v96);\n        if ( v99 < v72 )\n        {\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v107) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v107)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v103) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v103)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v101) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v101)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v121) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v121)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v120) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v120)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v119) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v119)\n                                                                              + 2 * v96);\n          *(_WORD *)(v104 + *(_QWORD *)(v94 + 8 * v102) + 2 * v96) = *(_WORD *)(v104\n                                                                              + *(_QWORD *)(result + 8 * v102)\n                                                                              + 2 * v96);\n        }\n        ++v96;\n      }\n      while ( v96 < v71 );\n    }\n    else\n    {\n      v74 = a1;\n      LODWORD(v119) = -2 - a5;\n      v124 = v34;\n      v120 = (signed int)v123;\n      v75 = v70 << 35 >> 34;\n      v127 = v125;\n      v76 = &v132[16 * v75 + 64];\n      v77 = &v132[64 * (signed __int64)(4 * v35) + 332 + 4 * v10];\n      do\n      {\n        v123 = v77;\n        v78 = v124;\n        v121 = v75;\n        do\n        {\n          v79 = v78 + *((_DWORD *)off_49F6D0 + 36);\n          v80 = v75 + *((_DWORD *)off_49F6D0 + 37);\n          if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n          {\n            v81 = v122;\n            if ( (void *)qword_4F9E30 != qword_4F9E18 )\n              v81 = ((signed int)v119 + *(_DWORD *)off_49F6D0 - dword_49FB88) % *((_DWORD *)off_49F6D0 + 8);\n          }\n          else\n          {\n            v81 = v122;\n          }\n          v82 = (_QWORD *)*((_QWORD *)off_49F6E8 + 4);\n          v83 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 2) + 8 * v74);\n          LODWORD(v122) = v81;\n          sub_412EE0(\n            *(_QWORD *)(v83 + 8LL * v81),\n            v80,\n            v79,\n            *(unsigned int *)&v76[4 * v78 - 64],\n            *(_DWORD *)&v76[4 * v78],\n            v82);\n          v84 = (_QWORD *)*((_QWORD *)off_49F6E8 + 4);\n          v85 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 1) + 8 * v74);\n          result = (signed int)(4 * v79);\n          v86 = 4 * v80;\n          v87 = (_WORD *)*v84;\n          v88 = *(_QWORD *)(v85 + 8 * v86);\n          *(_WORD *)(v88 + 2 * result) = *((_WORD *)v77 - 102) + *(_WORD *)*v84;\n          *(_WORD *)(v88 + 2 * result + 2) = *((_WORD *)v77 - 100) + v87[1];\n          *(_WORD *)(v88 + 2 * result + 4) = *((_WORD *)v77 - 98) + v87[2];\n          *(_WORD *)(v88 + 2 * result + 6) = *((_WORD *)v77 - 96) + v87[3];\n          v89 = (_WORD *)v84[1];\n          v90 = *(_QWORD *)(v85 + 8 * v86 + 8);\n          *(_WORD *)(v90 + 2 * result) = *((_WORD *)v77 - 70) + *v89;\n          *(_WORD *)(v90 + 2 * result + 2) = *((_WORD *)v77 - 68) + v89[1];\n          *(_WORD *)(v90 + 2 * result + 4) = *((_WORD *)v77 - 66) + v89[2];\n          *(_WORD *)(v90 + 2 * result + 6) = *((_WORD *)v77 - 64) + v89[3];\n          v91 = (_WORD *)v84[2];\n          v92 = *(_QWORD *)(v85 + 8 * v86 + 16);\n          *(_WORD *)(v92 + 2 * result) = *((_WORD *)v77 - 38) + *v91;\n          *(_WORD *)(v92 + 2 * result + 2) = *((_WORD *)v77 - 36) + v91[1];\n          *(_WORD *)(v92 + 2 * result + 4) = *((_WORD *)v77 - 34) + v91[2];\n          *(_WORD *)(v92 + 2 * result + 6) = *((_WORD *)v77 - 32) + v91[3];\n          v75 = v84[3];\n          v93 = *(_QWORD *)(v85 + 8 * v86 + 24);\n          *(_WORD *)(v93 + 2 * result) = *((_WORD *)v77 - 6) + *(_WORD *)v75;\n          *(_WORD *)(v93 + 2 * result + 2) = *((_WORD *)v77 - 4) + *(_WORD *)(v75 + 2);\n          *(_WORD *)(v93 + 2 * result + 4) = *((_WORD *)v77 - 2) + *(_WORD *)(v75 + 4);\n          *(_WORD *)(v93 + 2 * result + 6) = *(_WORD *)v77 + *(_WORD *)(v75 + 6);\n          ++v78;\n          v77 += 16;\n          LODWORD(v75) = v121;\n        }\n        while ( v78 < v120 );\n        v75 = v121 + 1;\n        v76 += 16;\n        v77 = v123 + 256;\n      }\n      while ( v121 + 1 < v127 );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4124a0L", 
            "funcEndAddr": "0x412ed9L", 
            "funcName": "sub_4124A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412EE0(__int64 a1, int a2, __int64 a3, __int64 a4, int a5, _QWORD *a6)\n{\n  _QWORD *v6; // rbx\n  int v7; // ST10_4\n  int v8; // er15\n  int v9; // er13\n  int v10; // ebp\n  int v11; // ST04_4\n  unsigned __int8 v12; // al\n  _WORD *v13; // r14\n  int v14; // ST0C_4\n  int v15; // ST08_4\n  int v16; // ST00_4\n  int v17; // ebp\n  unsigned __int8 v18; // al\n  _QWORD *v19; // r14\n  _QWORD *v20; // ST20_8\n  _WORD *v21; // rbx\n  int v22; // ebp\n  unsigned __int8 v23; // al\n  _WORD *v24; // rbx\n  int v25; // ebp\n  unsigned __int8 v26; // al\n  _WORD *v27; // rbx\n  __int64 result; // rax\n\n  v6 = a6;\n  v7 = a5;\n  v8 = a4;\n  v9 = 16 * a2 + a5;\n  v10 = 16 * a3;\n  v11 = a4 + 16 * a3;\n  v12 = sub_4130E0(a1, v9, (signed int)a4 + 16 * (signed int)a3);\n  v13 = (_WORD *)*v6;\n  *(_WORD *)*v6 = v12;\n  v14 = v8 + v10 + 4;\n  v13[1] = (unsigned __int8)sub_4130E0(a1, v9, v14);\n  v15 = v8 + v10 + 8;\n  v13[2] = (unsigned __int8)sub_4130E0(a1, v9, v15);\n  v16 = v8 + v10 + 12;\n  v13[3] = (unsigned __int8)sub_4130E0(a1, v9, v16);\n  v17 = 16 * a2 + v7 + 4;\n  v18 = sub_4130E0(a1, v17, v11);\n  v19 = v6;\n  v20 = v6;\n  v21 = (_WORD *)v6[1];\n  *v21 = v18;\n  v21[1] = (unsigned __int8)sub_4130E0(a1, v17, v14);\n  v21[2] = (unsigned __int8)sub_4130E0(a1, v17, v15);\n  v21[3] = (unsigned __int8)sub_4130E0(a1, v17, v16);\n  v22 = v7 + 16 * a2 + 8;\n  v23 = sub_4130E0(a1, v22, v11);\n  v24 = (_WORD *)v19[2];\n  *v24 = v23;\n  v24[1] = (unsigned __int8)sub_4130E0(a1, v22, v14);\n  v24[2] = (unsigned __int8)sub_4130E0(a1, v22, v15);\n  v24[3] = (unsigned __int8)sub_4130E0(a1, v22, v16);\n  v25 = 16 * a2 + v7 + 12;\n  v26 = sub_4130E0(a1, v25, v11);\n  v27 = (_WORD *)v20[3];\n  *v27 = v26;\n  v27[1] = (unsigned __int8)sub_4130E0(a1, v25, v14);\n  v27[2] = (unsigned __int8)sub_4130E0(a1, v25, v15);\n  result = (unsigned __int8)sub_4130E0(a1, v25, v16);\n  v27[3] = (unsigned __int8)result;\n  return result;\n}\n", 
            "funcStartAddr": "0x412ee0L", 
            "funcEndAddr": "0x4130cbL", 
            "funcName": "sub_412EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4130E0(__int64 a1, int a2, int a3)\n{\n  int v3; // er13\n  int v4; // eax\n  __int64 v5; // r8\n  __int64 v6; // rbx\n  signed __int64 v7; // r14\n  unsigned int v8; // er11\n  signed __int64 v9; // r10\n  unsigned int v10; // er9\n  char v11; // dl\n  __int64 v12; // r14\n  signed __int64 v13; // rbp\n  __int64 v14; // r11\n  __int64 v15; // rbp\n  int v16; // er15\n  __int64 v17; // rbp\n  int v18; // er11\n  signed __int64 v19; // rbp\n  int v20; // er11\n  int v21; // ebp\n  signed __int64 v22; // rdx\n  int v23; // ebp\n  int v24; // ebp\n  signed __int64 v25; // rax\n  int v26; // eax\n  signed int v27; // edx\n  __int64 result; // rax\n  char v29; // si\n  __int64 v30; // rdx\n  __int64 v31; // rdx\n  __int64 v32; // rbp\n  __int64 v33; // r10\n  signed __int64 v34; // rdi\n  int v35; // edi\n  __int64 v36; // rbx\n  int v37; // edi\n  __int64 v38; // rbx\n  int v39; // er9\n  signed __int64 v40; // rbx\n  int v41; // ebx\n  signed __int64 v42; // rdi\n  int v43; // ebx\n  int v44; // ebx\n  signed __int64 v45; // rax\n  signed int v46; // esi\n  char v47; // dl\n  __int64 v48; // rcx\n  unsigned int v49; // eax\n  __int64 v50; // rax\n  signed __int64 v51; // r13\n  __int64 v52; // r12\n  signed __int64 v53; // r15\n  signed __int64 v54; // rbp\n  signed __int64 v55; // rax\n  __int64 v56; // r11\n  signed __int64 v57; // rcx\n  __int64 v58; // rcx\n  __int64 v59; // rcx\n  __int64 v60; // rcx\n  __int64 v61; // rcx\n  signed __int64 v62; // rcx\n  __int64 v63; // rcx\n  int v64; // er10\n  signed __int64 v65; // rcx\n  __int64 v66; // rcx\n  int v67; // ebx\n  signed __int64 v68; // r11\n  __int64 v69; // rcx\n  int v70; // eax\n  int v71; // edx\n  signed int v72; // eax\n  signed int v73; // edi\n  signed int v74; // edx\n  char v75; // si\n  signed int v76; // ecx\n  signed int v77; // edx\n  __int64 v78; // rsi\n  signed __int64 v79; // r15\n  int v80; // eax\n  __int64 v81; // r12\n  signed __int64 v82; // rcx\n  __int64 v83; // rdx\n  signed __int64 v84; // rdi\n  signed __int64 v85; // rsi\n  bool v86; // sf\n  unsigned __int8 v87; // of\n  __int64 v88; // r10\n  __int64 v89; // rbp\n  __int64 v90; // r15\n  __int64 v91; // rbx\n  __int64 v92; // r12\n  signed __int64 v93; // rsi\n  __int64 v94; // rsi\n  signed __int64 v95; // rcx\n  int v96; // er8\n  signed __int64 v97; // rsi\n  int v98; // esi\n  signed __int64 v99; // r10\n  int v100; // edx\n  int v101; // ecx\n  signed int v102; // esi\n  signed int v103; // edx\n  unsigned int v104; // ecx\n  signed int v105; // er8\n  __int64 v106; // rcx\n  __int64 v107; // rax\n  signed __int64 v108; // rcx\n  int v109; // ecx\n  __int64 v110; // rdx\n  __int64 v111; // rdi\n  int v112; // ecx\n  __int64 v113; // rdi\n  int v114; // ecx\n  signed __int64 v115; // rdi\n  int v116; // edi\n  signed __int64 v117; // rbp\n  int v118; // edi\n  int v119; // ecx\n  signed __int64 v120; // rsi\n  signed int v121; // er14\n  signed int v122; // esi\n  __int64 v123; // rax\n  __int64 v124; // rcx\n  signed __int64 v125; // rdi\n  __int64 v126; // rdi\n  __int64 v127; // rbp\n  int v128; // edi\n  int v129; // edi\n  int v130; // ebp\n  signed __int64 v131; // rbx\n  int v132; // ebp\n  int v133; // edi\n  int v134; // ebp\n  signed __int64 v135; // rbx\n  int v136; // edi\n  int v137; // edi\n  signed __int64 v138; // rcx\n  int v139; // eax\n  signed int v140; // eax\n  signed int v141; // ebx\n  signed int v142; // ecx\n  int v143; // ecx\n  int v144; // [rsp+0h] [rbp-68h]\n  int v145; // [rsp+0h] [rbp-68h]\n  int v146; // [rsp+4h] [rbp-64h]\n  int v147; // [rsp+4h] [rbp-64h]\n  int v148; // [rsp+8h] [rbp-60h]\n  int v149; // [rsp+8h] [rbp-60h]\n  __int64 v150; // [rsp+28h] [rbp-40h]\n  __int64 v151; // [rsp+30h] [rbp-38h]\n\n  v3 = a3 & 3;\n  v4 = a2 & 3;\n  v5 = (a3 - v3) / 4;\n  v6 = (a2 - v4) / 4;\n  v7 = *((signed int *)off_49F6D0 + 13);\n  v8 = v7 - 1;\n  v9 = *((signed int *)off_49F6D0 + 15);\n  v10 = v9 - 1;\n  if ( ((unsigned __int8)a2 | (unsigned __int8)a3) & 3 )\n  {\n    if ( !(a2 & 3) )\n    {\n      if ( (signed int)v10 <= (signed int)v6 )\n        v6 = v10;\n      v32 = 0LL;\n      if ( (signed int)v6 < 0 )\n        v6 = 0LL;\n      v33 = *(_QWORD *)(a1 + 8 * v6);\n      v34 = (signed int)v5 - 2LL;\n      if ( v34 >= v7 )\n        v34 = v8;\n      if ( (signed int)v34 < 0 )\n        v34 = 0LL;\n      v35 = *(unsigned __int16 *)(v33 + 2 * v34);\n      v36 = (unsigned int)(v5 - 1);\n      if ( (signed int)v5 > (signed int)v7 )\n        v36 = v8;\n      if ( (signed int)v36 < 0 )\n        v36 = 0LL;\n      v37 = v35 - 5 * *(unsigned __int16 *)(v33 + 2 * v36);\n      v38 = v8;\n      if ( (signed int)v7 > (signed int)v5 )\n        v38 = (unsigned int)v5;\n      if ( (signed int)v38 < 0 )\n        v38 = 0LL;\n      v39 = v37 + 20 * *(unsigned __int16 *)(v33 + 2 * v38);\n      v40 = (signed int)v5 + 1LL;\n      if ( v40 >= v7 )\n        v40 = v8;\n      if ( (signed int)v40 < 0 )\n        v40 = 0LL;\n      v41 = *(unsigned __int16 *)(v33 + 2 * v40);\n      v42 = (signed int)v5 + 2LL;\n      if ( v42 >= v7 )\n        v42 = v8;\n      v43 = 5 * v41;\n      if ( (signed int)v42 < 0 )\n        v42 = 0LL;\n      v44 = v39 + 4 * v43 - 5 * *(unsigned __int16 *)(v33 + 2 * v42);\n      v45 = (signed int)v5 + 3LL;\n      if ( v45 >= v7 )\n        v45 = v8;\n      if ( (signed int)v45 < 0 )\n        v45 = 0LL;\n      v46 = *((_DWORD *)off_49F6D0 + 18171);\n      result = (unsigned int)((signed int)(((unsigned int)((v44 + *(unsigned __int16 *)(v33 + 2 * v45) + 16) >> 31) >> 27)\n                                         + v44\n                                         + *(unsigned __int16 *)(v33 + 2 * v45)\n                                         + 16) >> 5);\n      if ( v46 <= (signed int)result )\n        result = (unsigned int)v46;\n      if ( (signed int)result < 0 )\n        result = 0LL;\n      v47 = a3 & 3;\n      if ( v47 == 3 )\n      {\n        v105 = v5 + 1;\n        if ( (signed int)v8 <= v105 )\n          v105 = v7 - 1;\n        if ( v105 >= 0 )\n          v32 = (unsigned int)v105;\n        v49 = *(unsigned __int16 *)(v33 + 2 * v32) + (_DWORD)result;\n      }\n      else\n      {\n        if ( v47 != 1 )\n          return result;\n        if ( (signed int)v8 > (signed int)v5 )\n          v8 = v5;\n        v48 = 0LL;\n        if ( (v8 & 0x80000000) == 0 )\n          v48 = v8;\n        v49 = *(unsigned __int16 *)(v33 + 2 * v48) + (_DWORD)result;\n      }\n      return v49 >> 1;\n    }\n    v11 = a3 & 3;\n    if ( v11 != 2 )\n    {\n      if ( v11 )\n      {\n        if ( v4 == 2 )\n        {\n          v78 = (signed int)v6;\n          v79 = (signed int)v6 - 2LL;\n          if ( v79 >= v9 )\n            v79 = v10;\n          v80 = 0;\n          if ( (signed int)v79 < 0 )\n            v79 = 0LL;\n          v81 = (unsigned int)(v6 - 1);\n          if ( (signed int)v6 > (signed int)v9 )\n            v81 = v10;\n          if ( (signed int)v81 < 0 )\n            v81 = 0LL;\n          if ( (signed int)v9 <= (signed int)v6 )\n            v6 = v10;\n          if ( (signed int)v6 < 0 )\n            v6 = 0LL;\n          v82 = v78 + 1;\n          if ( v78 + 1 >= v9 )\n            v82 = v10;\n          if ( (signed int)v82 < 0 )\n            v82 = 0LL;\n          v83 = a1;\n          v84 = v78 + 2;\n          if ( v78 + 2 >= v9 )\n            v84 = v10;\n          if ( (signed int)v84 < 0 )\n            v84 = 0LL;\n          v85 = v78 + 3;\n          v87 = __OFSUB__(v85, v9);\n          v86 = v85 - v9 < 0;\n          v88 = (signed int)v5;\n          v89 = *(_QWORD *)(v83 + 8 * v79);\n          v90 = *(_QWORD *)(v83 + 8 * v81);\n          v91 = *(_QWORD *)(v83 + 8 * v6);\n          v150 = *(_QWORD *)(v83 + 8 * v82);\n          v151 = *(_QWORD *)(v83 + 8 * v84);\n          if ( !(v86 ^ v87) )\n            v85 = v10;\n          if ( (signed int)v85 < 0 )\n            v85 = 0LL;\n          v92 = *(_QWORD *)(v83 + 8 * v85);\n          v93 = (signed int)v5 - 2LL;\n          if ( v93 >= v7 )\n            v93 = v8;\n          if ( (signed int)v93 < 0 )\n            v93 = 0LL;\n          v145 = *(unsigned __int16 *)(v89 + 2 * v93)\n               - 5 * *(unsigned __int16 *)(v90 + 2 * v93)\n               + 20 * *(unsigned __int16 *)(v91 + 2 * v93)\n               + 20 * *(unsigned __int16 *)(v150 + 2 * v93)\n               - 5 * *(unsigned __int16 *)(v151 + 2 * v93)\n               + *(unsigned __int16 *)(v92 + 2 * v93);\n          v94 = (unsigned int)(v5 - 1);\n          if ( (signed int)v5 > (signed int)v7 )\n            v94 = v8;\n          if ( (signed int)v94 < 0 )\n            v94 = 0LL;\n          v147 = *(unsigned __int16 *)(v89 + 2 * v94)\n               - 5 * *(unsigned __int16 *)(v90 + 2 * v94)\n               + 20 * *(unsigned __int16 *)(v91 + 2 * v94)\n               + 20 * *(unsigned __int16 *)(v150 + 2 * v94)\n               - 5 * *(unsigned __int16 *)(v151 + 2 * v94)\n               + *(unsigned __int16 *)(v92 + 2 * v94);\n          if ( (signed int)v5 >= (signed int)v7 )\n            v5 = v8;\n          if ( (signed int)v5 < 0 )\n            v5 = 0LL;\n          v149 = *(unsigned __int16 *)(v89 + 2 * v5)\n               - 5 * *(unsigned __int16 *)(v90 + 2 * v5)\n               + 20 * *(unsigned __int16 *)(v91 + 2 * v5)\n               + 20 * *(unsigned __int16 *)(v150 + 2 * v5)\n               - 5 * *(unsigned __int16 *)(v151 + 2 * v5)\n               + *(unsigned __int16 *)(v92 + 2 * v5);\n          v95 = v88 + 1;\n          if ( v88 + 1 >= v7 )\n            v95 = v8;\n          if ( (signed int)v95 < 0 )\n            v95 = 0LL;\n          v96 = *(unsigned __int16 *)(v89 + 2 * v95)\n              - 5 * *(unsigned __int16 *)(v90 + 2 * v95)\n              + 20 * *(unsigned __int16 *)(v91 + 2 * v95)\n              + 20 * *(unsigned __int16 *)(v150 + 2 * v95)\n              - 5 * *(unsigned __int16 *)(v151 + 2 * v95)\n              + *(unsigned __int16 *)(v92 + 2 * v95);\n          v97 = v88 + 2;\n          if ( v88 + 2 >= v7 )\n            v97 = v8;\n          if ( (signed int)v97 < 0 )\n            v97 = 0LL;\n          v98 = *(unsigned __int16 *)(v89 + 2 * v97)\n              - 5 * *(unsigned __int16 *)(v90 + 2 * v97)\n              + 20 * *(unsigned __int16 *)(v91 + 2 * v97)\n              + 20 * *(unsigned __int16 *)(v150 + 2 * v97)\n              - 5 * *(unsigned __int16 *)(v151 + 2 * v97)\n              + *(unsigned __int16 *)(v92 + 2 * v97);\n          v99 = v88 + 3;\n          if ( v99 >= v7 )\n            v99 = v8;\n          if ( (signed int)v99 < 0 )\n            v99 = 0LL;\n          v100 = *(unsigned __int16 *)(v89 + 2 * v99)\n               - 5 * *(unsigned __int16 *)(v90 + 2 * v99)\n               + 20 * *(unsigned __int16 *)(v91 + 2 * v99)\n               + 20 * *(unsigned __int16 *)(v150 + 2 * v99)\n               - 5 * *(unsigned __int16 *)(v151 + 2 * v99)\n               + *(unsigned __int16 *)(v92 + 2 * v99);\n          v101 = v145 - 5 * v147 + 20 * v149 + 20 * v96 - 5 * v98;\n          v102 = *((_DWORD *)off_49F6D0 + 18171);\n          v103 = (signed int)(((unsigned int)((v101 + v100 + 512) >> 31) >> 22) + v100 + v101 + 512) >> 10;\n          if ( v102 <= v103 )\n            v103 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v103 < 0 )\n            v103 = 0;\n          if ( v3 == 1 )\n            v104 = v149 + ((unsigned int)((v149 + 16) >> 31) >> 27);\n          else\n            v104 = v96 + ((unsigned int)((v96 + 16) >> 31) >> 27);\n          v143 = (signed int)(v104 + 16) >> 5;\n          if ( v102 <= v143 )\n            v143 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v143 >= 0 )\n            v80 = v143;\n          v49 = v103 + v80;\n        }\n        else\n        {\n          v106 = (unsigned int)v6 + (v4 != 1);\n          if ( (signed int)v10 <= (signed int)v106 )\n            v106 = v10;\n          if ( (signed int)v106 < 0 )\n            v106 = 0LL;\n          v107 = *(_QWORD *)(a1 + 8 * v106);\n          v108 = (signed int)v5 - 2LL;\n          if ( v108 >= v7 )\n            v108 = v8;\n          if ( (signed int)v108 < 0 )\n            v108 = 0LL;\n          v109 = *(unsigned __int16 *)(v107 + 2 * v108);\n          v110 = a1;\n          v111 = (unsigned int)(v5 - 1);\n          if ( (signed int)v5 > (signed int)v7 )\n            v111 = v8;\n          if ( (signed int)v111 < 0 )\n            v111 = 0LL;\n          v112 = v109 - 5 * *(unsigned __int16 *)(v107 + 2 * v111);\n          v113 = v8;\n          if ( (signed int)v7 > (signed int)v5 )\n            v113 = (unsigned int)v5;\n          if ( (signed int)v113 < 0 )\n            v113 = 0LL;\n          v114 = v112 + 20 * *(unsigned __int16 *)(v107 + 2 * v113);\n          v115 = (signed int)v5 + 1LL;\n          if ( v115 >= v7 )\n            v115 = v8;\n          if ( (signed int)v115 < 0 )\n            v115 = 0LL;\n          v116 = *(unsigned __int16 *)(v107 + 2 * v115);\n          v117 = (signed int)v5 + 2LL;\n          if ( v117 >= v7 )\n            v117 = v8;\n          v118 = 5 * v116;\n          if ( (signed int)v117 < 0 )\n            v117 = 0LL;\n          v119 = v114 + 4 * v118 - 5 * *(unsigned __int16 *)(v107 + 2 * v117);\n          v120 = (signed int)v5 + 3LL;\n          if ( v120 >= v7 )\n            v120 = v8;\n          if ( (signed int)v120 < 0 )\n            v120 = 0LL;\n          v121 = *((_DWORD *)off_49F6D0 + 18171);\n          v122 = (signed int)(((unsigned int)((v119 + *(unsigned __int16 *)(v107 + 2 * v120) + 16) >> 31) >> 27)\n                            + v119\n                            + *(unsigned __int16 *)(v107 + 2 * v120)\n                            + 16) >> 5;\n          if ( v121 <= v122 )\n            v122 = *((_DWORD *)off_49F6D0 + 18171);\n          v123 = (unsigned int)v5 + (v3 != 1);\n          if ( (signed int)v8 <= (signed int)v123 )\n            v123 = v8;\n          if ( (signed int)v123 < 0 )\n            v123 = 0LL;\n          v124 = (signed int)v6;\n          v125 = (signed int)v6 - 2LL;\n          if ( v125 >= v9 )\n            v125 = v10;\n          if ( (signed int)v125 < 0 )\n            v125 = 0LL;\n          v126 = *(_QWORD *)(v110 + 8 * v125);\n          v127 = (unsigned int)(v6 - 1);\n          if ( (signed int)v6 > (signed int)v9 )\n            v127 = v10;\n          v128 = *(unsigned __int16 *)(v126 + 2 * v123);\n          if ( (signed int)v127 < 0 )\n            v127 = 0LL;\n          v129 = v128 - 5 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * v127) + 2 * v123);\n          if ( (signed int)v9 <= (signed int)v6 )\n            v6 = v10;\n          if ( (signed int)v6 < 0 )\n            v6 = 0LL;\n          v130 = *(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * v6) + 2 * v123);\n          v131 = v124 + 1;\n          if ( v124 + 1 >= v9 )\n            v131 = v10;\n          v132 = 5 * v130;\n          if ( (signed int)v131 < 0 )\n            v131 = 0LL;\n          v133 = v129 + 4 * v132;\n          v134 = 5 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * v131) + 2 * v123);\n          v135 = v124 + 2;\n          if ( v124 + 2 >= v9 )\n            v135 = v10;\n          v136 = v133 + 4 * v134;\n          if ( (signed int)v135 < 0 )\n            v135 = 0LL;\n          v137 = v136 - 5 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * v135) + 2 * v123);\n          v138 = v124 + 3;\n          if ( v138 >= v9 )\n            v138 = v10;\n          if ( (signed int)v138 < 0 )\n            v138 = 0LL;\n          v139 = *(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * v138) + 2 * v123);\n          if ( v122 < 0 )\n            v122 = 0;\n          v140 = (signed int)(((unsigned int)((v137 + v139 + 16) >> 31) >> 27) + v137 + v139 + 16) >> 5;\n          if ( v121 <= v140 )\n            v140 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v140 < 0 )\n            v140 = 0;\n          v49 = v122 + v140;\n        }\n      }\n      else\n      {\n        if ( (signed int)v8 <= (signed int)v5 )\n          v5 = v8;\n        v12 = 0LL;\n        if ( (signed int)v5 < 0 )\n          v5 = 0LL;\n        v13 = (signed int)v6 - 2LL;\n        if ( v13 >= v9 )\n          v13 = v10;\n        if ( (signed int)v13 < 0 )\n          v13 = 0LL;\n        v14 = *(_QWORD *)(a1 + 8 * v13);\n        v15 = (unsigned int)(v6 - 1);\n        if ( (signed int)v6 > (signed int)v9 )\n          v15 = v10;\n        if ( (signed int)v15 < 0 )\n          v15 = 0LL;\n        v16 = *(unsigned __int16 *)(v14 + 2 * v5) - 5 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v15) + 2 * v5);\n        v17 = v10;\n        if ( (signed int)v9 > (signed int)v6 )\n          v17 = (unsigned int)v6;\n        if ( (signed int)v17 < 0 )\n          v17 = 0LL;\n        v18 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v17) + 2 * v5);\n        v19 = (signed int)v6 + 1LL;\n        if ( v19 >= v9 )\n          v19 = v10;\n        if ( (signed int)v19 < 0 )\n          v19 = 0LL;\n        v20 = v16 + 20 * v18;\n        v21 = 5 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v19) + 2 * v5);\n        v22 = (signed int)v6 + 2LL;\n        if ( v22 >= v9 )\n          v22 = v10;\n        v23 = v20 + 4 * v21;\n        if ( (signed int)v22 < 0 )\n          v22 = 0LL;\n        v24 = v23 - 5 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v22) + 2 * v5);\n        v25 = (signed int)v6 + 3LL;\n        if ( v25 >= v9 )\n          v25 = v10;\n        if ( (signed int)v25 < 0 )\n          v25 = 0LL;\n        v26 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v25) + 2 * v5);\n        v27 = *((_DWORD *)off_49F6D0 + 18171);\n        result = (unsigned int)((signed int)(((unsigned int)((v26 + v24 + 16) >> 31) >> 27) + v26 + v24 + 16) >> 5);\n        if ( v27 <= (signed int)result )\n          result = (unsigned int)v27;\n        if ( (signed int)result < 0 )\n          result = 0LL;\n        v29 = a2 & 3;\n        if ( v29 == 3 )\n        {\n          v141 = v6 + 1;\n          if ( (signed int)v10 <= v141 )\n            v141 = v9 - 1;\n          if ( v141 >= 0 )\n            v12 = (unsigned int)v141;\n          v31 = *(_QWORD *)(a1 + 8 * v12);\n        }\n        else\n        {\n          if ( v29 != 1 )\n            return result;\n          if ( (signed int)v10 > (signed int)v6 )\n            v10 = v6;\n          v30 = 0LL;\n          if ( (v10 & 0x80000000) == 0 )\n            v30 = v10;\n          v31 = *(_QWORD *)(a1 + 8 * v30);\n        }\n        v49 = *(unsigned __int16 *)(v31 + 2 * v5) + (_DWORD)result;\n      }\n      return v49 >> 1;\n    }\n    v50 = (signed int)v5;\n    v51 = (signed int)v5 - 2LL;\n    if ( v51 >= v7 )\n      v51 = v8;\n    if ( (signed int)v51 < 0 )\n      v51 = 0LL;\n    v52 = (unsigned int)(v5 - 1);\n    if ( (signed int)v5 > (signed int)v7 )\n      v52 = v8;\n    if ( (signed int)v52 < 0 )\n      v52 = 0LL;\n    if ( (signed int)v7 <= (signed int)v5 )\n      v5 = v8;\n    if ( (signed int)v5 < 0 )\n      v5 = 0LL;\n    v53 = v50 + 1;\n    if ( v50 + 1 >= v7 )\n      v53 = v8;\n    if ( (signed int)v53 < 0 )\n      v53 = 0LL;\n    v54 = v50 + 2;\n    if ( v50 + 2 >= v7 )\n      v54 = v8;\n    if ( (signed int)v54 < 0 )\n      v54 = 0LL;\n    v55 = v50 + 3;\n    if ( v55 >= v7 )\n      v55 = v8;\n    v56 = (signed int)v6;\n    if ( (signed int)v55 < 0 )\n      v55 = 0LL;\n    v57 = (signed int)v6 - 2LL;\n    if ( v57 >= v9 )\n      v57 = v10;\n    if ( (signed int)v57 < 0 )\n      v57 = 0LL;\n    v58 = *(_QWORD *)(a1 + 8 * v57);\n    v144 = *(unsigned __int16 *)(v58 + 2 * v51)\n         - 5 * *(unsigned __int16 *)(v58 + 2 * v52)\n         + 20 * *(unsigned __int16 *)(v58 + 2 * v5)\n         + 20 * *(unsigned __int16 *)(v58 + 2 * v53)\n         - 5 * *(unsigned __int16 *)(v58 + 2 * v54)\n         + *(unsigned __int16 *)(v58 + 2 * v55);\n    v59 = (unsigned int)(v6 - 1);\n    if ( (signed int)v6 > (signed int)v9 )\n      v59 = v10;\n    if ( (signed int)v59 < 0 )\n      v59 = 0LL;\n    v60 = *(_QWORD *)(a1 + 8 * v59);\n    v146 = *(unsigned __int16 *)(v60 + 2 * v51)\n         - 5 * *(unsigned __int16 *)(v60 + 2 * v52)\n         + 20 * *(unsigned __int16 *)(v60 + 2 * v5)\n         + 20 * *(unsigned __int16 *)(v60 + 2 * v53)\n         - 5 * *(unsigned __int16 *)(v60 + 2 * v54)\n         + *(unsigned __int16 *)(v60 + 2 * v55);\n    if ( (signed int)v6 >= (signed int)v9 )\n      v6 = v10;\n    if ( (signed int)v6 < 0 )\n      v6 = 0LL;\n    v61 = *(_QWORD *)(a1 + 8 * v6);\n    v148 = *(unsigned __int16 *)(v61 + 2 * v51)\n         - 5 * *(unsigned __int16 *)(v61 + 2 * v52)\n         + 20 * *(unsigned __int16 *)(v61 + 2 * v5)\n         + 20 * *(unsigned __int16 *)(v61 + 2 * v53)\n         - 5 * *(unsigned __int16 *)(v61 + 2 * v54)\n         + *(unsigned __int16 *)(v61 + 2 * v55);\n    v62 = v56 + 1;\n    if ( v56 + 1 >= v9 )\n      v62 = v10;\n    if ( (signed int)v62 < 0 )\n      v62 = 0LL;\n    v63 = *(_QWORD *)(a1 + 8 * v62);\n    v64 = *(unsigned __int16 *)(v63 + 2 * v51)\n        - 5 * *(unsigned __int16 *)(v63 + 2 * v52)\n        + 20 * *(unsigned __int16 *)(v63 + 2 * v5)\n        + 20 * *(unsigned __int16 *)(v63 + 2 * v53)\n        - 5 * *(unsigned __int16 *)(v63 + 2 * v54)\n        + *(unsigned __int16 *)(v63 + 2 * v55);\n    v65 = v56 + 2;\n    if ( v56 + 2 >= *((signed int *)off_49F6D0 + 15) )\n      v65 = v10;\n    if ( (signed int)v65 < 0 )\n      v65 = 0LL;\n    v66 = *(_QWORD *)(a1 + 8 * v65);\n    v67 = *(unsigned __int16 *)(v66 + 2 * v51)\n        - 5 * *(unsigned __int16 *)(v66 + 2 * v52)\n        + 20 * *(unsigned __int16 *)(v66 + 2 * v5)\n        + 20 * *(unsigned __int16 *)(v66 + 2 * v53)\n        - 5 * *(unsigned __int16 *)(v66 + 2 * v54)\n        + *(unsigned __int16 *)(v66 + 2 * v55);\n    v68 = v56 + 3;\n    if ( v68 >= *((signed int *)off_49F6D0 + 15) )\n      v68 = v10;\n    if ( (signed int)v68 < 0 )\n      v68 = 0LL;\n    v69 = *(_QWORD *)(a1 + 8 * v68);\n    v70 = *(unsigned __int16 *)(v69 + 2 * v51)\n        - 5 * *(unsigned __int16 *)(v69 + 2 * v52)\n        + 20 * *(unsigned __int16 *)(v69 + 2 * v5)\n        + 20 * *(unsigned __int16 *)(v69 + 2 * v53)\n        - 5 * *(unsigned __int16 *)(v69 + 2 * v54)\n        + *(unsigned __int16 *)(v69 + 2 * v55);\n    v71 = v144 - 5 * v146 + 20 * v148 + 20 * v64 - 5 * v67;\n    v72 = ((unsigned int)((v71 + v70 + 512) >> 31) >> 22) + v70 + v71 + 512;\n    v73 = 0;\n    v74 = *((_DWORD *)off_49F6D0 + 18171);\n    result = (unsigned int)(v72 >> 10);\n    if ( v74 <= (signed int)result )\n      result = (unsigned int)v74;\n    if ( (signed int)result < 0 )\n      result = 0LL;\n    v75 = a2 & 3;\n    if ( v75 == 3 )\n    {\n      v142 = (signed int)(v64 + ((unsigned int)((v64 + 16) >> 31) >> 27) + 16) >> 5;\n      if ( v74 <= v142 )\n        v142 = *((_DWORD *)off_49F6D0 + 18171);\n      if ( v142 >= 0 )\n        v73 = v142;\n      result = (unsigned int)(result + v73) >> 1;\n    }\n    else if ( v75 == 1 )\n    {\n      v76 = (signed int)(v148 + ((unsigned int)((v148 + 16) >> 31) >> 27) + 16) >> 5;\n      if ( v74 <= v76 )\n        v76 = *((_DWORD *)off_49F6D0 + 18171);\n      v77 = 0;\n      if ( v76 >= 0 )\n        v77 = v76;\n      result = (unsigned int)(result + v77) >> 1;\n    }\n  }\n  else\n  {\n    if ( (signed int)v10 <= (signed int)v6 )\n      v6 = v10;\n    if ( (signed int)v6 < 0 )\n      v6 = 0LL;\n    if ( (signed int)v8 <= (signed int)v5 )\n      v5 = v8;\n    if ( (signed int)v5 < 0 )\n      v5 = 0LL;\n    result = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v6) + 2 * v5);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4130e0L", 
            "funcEndAddr": "0x413bf5L", 
            "funcName": "sub_4130E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_413C00(double a1)\n{\n  signed __int64 result; // rax\n  signed __int64 v2; // r13\n  _QWORD *v3; // rax\n  __int64 v4; // r14\n  _DWORD *v5; // rcx\n  signed int v6; // esi\n  __int64 v7; // r12\n  __int64 v8; // r15\n  __int64 v9; // r13\n  __int64 v10; // rbx\n  __int64 v11; // r15\n  __int64 v12; // rbp\n  signed __int64 v13; // rbx\n  signed int v14; // [rsp+4h] [rbp-44h]\n  signed __int64 v15; // [rsp+8h] [rbp-40h]\n\n  result = (signed __int64)dest;\n  if ( *((_DWORD *)dest + 726) > 0 )\n  {\n    v2 = 0LL;\n    do\n    {\n      sub_413D90(*((_QWORD *)off_49F6E8 + 5), a1);\n      v3 = off_49F6E8;\n      v4 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 3) + 8 * v2);\n      v5 = off_49F6D0;\n      v6 = *((_DWORD *)off_49F6D0 + 15);\n      if ( v6 >= 16 )\n      {\n        v7 = *((_QWORD *)off_49F6E8 + 5);\n        v15 = v2;\n        v8 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 2) + 8 * v2);\n        v14 = *((_DWORD *)off_49F6D0 + 13);\n        v9 = 0LL;\n        do\n        {\n          if ( v14 >= 16 )\n          {\n            v10 = 0LL;\n            do\n            {\n              if ( *(_BYTE *)(*(_QWORD *)(v7 + 8 * v9) + v10) )\n                sub_414640(v4, v9, v10, v8, v7);\n              ++v10;\n            }\n            while ( v14 / 16 != v10 );\n          }\n          ++v9;\n        }\n        while ( v9 != (unsigned int)v6 >> 4 );\n        v3 = off_49F6E8;\n        v2 = v15;\n        v4 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 3) + 8 * v15);\n        v5 = off_49F6D0;\n        v6 = *((_DWORD *)off_49F6D0 + 15);\n      }\n      if ( v6 > 0 )\n      {\n        v11 = *(_QWORD *)(v3[2] + 8 * v2);\n        v12 = (*v5 - dword_49FB88) % v5[18094];\n        v13 = 0LL;\n        do\n        {\n          memcpy(\n            *(void **)(*(_QWORD *)(v11 + 8 * v12) + 8 * v13),\n            *(const void **)(v4 + 8 * v13),\n            2LL * (signed int)v5[13]);\n          ++v13;\n          v5 = off_49F6D0;\n        }\n        while ( v13 < *((signed int *)off_49F6D0 + 15) );\n      }\n      ++v2;\n      result = *((signed int *)dest + 726);\n    }\n    while ( v2 < result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413c00L", 
            "funcEndAddr": "0x413d86L", 
            "funcName": "sub_413C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413D90(__int64 a1, double a2)\n{\n  __int64 result; // rax\n  signed int v3; // ecx\n  __int64 v4; // rsi\n  signed int v5; // ebp\n  __int64 v6; // rdi\n  int v7; // er13\n  signed __int64 v8; // r12\n  __int64 v9; // r15\n  int v10; // er14\n  double v11; // xmm0_8\n  signed int v12; // eax\n  char v13; // cl\n  int v14; // [rsp+Ch] [rbp-5Ch]\n  signed int v15; // [rsp+10h] [rbp-58h]\n  int v16; // [rsp+14h] [rbp-54h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n\n  v17 = a1;\n  result = *((unsigned int *)off_49F6D0 + 15);\n  if ( (signed int)result < 16 )\n    return result;\n  v3 = *((_DWORD *)off_49F6D0 + 13);\n  v4 = (signed int)result / 16;\n  v14 = v3 / 16;\n  v20 = v3 / 16;\n  v5 = -1;\n  v6 = 0LL;\n  v7 = 0;\n  result = 0LL;\n  v15 = *((_DWORD *)off_49F6D0 + 13);\n  v18 = v4;\n  do\n  {\n    if ( v3 < 16 )\n      goto LABEL_18;\n    v16 = result;\n    v8 = 632LL * (signed int)result | 4;\n    v9 = 0LL;\n    v19 = v6;\n    do\n    {\n      if ( *((_DWORD *)dest + 52) && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + v8) == v5 )\n        goto LABEL_21;\n      v10 = 3 * ((double)*((signed int *)dest + 725) > sub_483460() * 2147483647.0 / 2147483647.0 * 100.0);\n      v7 = v10 + 2;\n      if ( (double)*((signed int *)dest + 724) <= sub_483460() * 2147483647.0 / 2147483647.0 * 100.0 )\n        v7 = v10;\n      v11 = sub_483460();\n      v6 = v19;\n      ++v5;\n      v12 = 1;\n      if ( (double)*((signed int *)dest + 723) <= v11 * 2147483647.0 / 2147483647.0 * 100.0 )\n      {\nLABEL_21:\n        if ( !v7 )\n        {\n          v13 = 0;\n          v12 = 0;\n          goto LABEL_15;\n        }\n        v12 = v7;\n      }\n      *(_BYTE *)(*(_QWORD *)(v17 + 8 * v6) + v9) = v12;\n      if ( *((_DWORD *)dest + 591) )\n        goto LABEL_16;\n      v13 = 1;\nLABEL_15:\n      *(_BYTE *)(*(_QWORD *)(v17 + 8 * v6) + v9) = v13;\nLABEL_16:\n      v7 = v12;\n      ++v9;\n      v8 += 632LL;\n    }\n    while ( v20 != v9 );\n    result = (unsigned int)(v14 + v16);\n    v3 = v15;\n    v4 = v18;\nLABEL_18:\n    ++v6;\n  }\n  while ( v6 != v4 );\n  return result;\n}\n", 
            "funcStartAddr": "0x413d90L", 
            "funcEndAddr": "0x413f97L", 
            "funcName": "sub_413D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413FA0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r14\n  __int64 result; // rax\n  __int64 v5; // r13\n  __int64 v6; // rbx\n  signed int v7; // [rsp+Ch] [rbp-3Ch]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n\n  v3 = a3;\n  result = *((unsigned int *)off_49F6D0 + 15);\n  if ( (signed int)result >= 16 )\n  {\n    v7 = *((_DWORD *)off_49F6D0 + 13);\n    v8 = (signed int)result / 16;\n    v5 = 0LL;\n    do\n    {\n      if ( v7 >= 16 )\n      {\n        v6 = 0LL;\n        do\n        {\n          result = *(_QWORD *)(a2 + 8 * v5);\n          if ( *(_BYTE *)(result + v6) )\n            result = sub_414640(a1, v5, v6, v3, a2);\n          ++v6;\n        }\n        while ( v7 / 16 != v6 );\n      }\n      ++v5;\n    }\n    while ( v5 != v8 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413fa0L", 
            "funcEndAddr": "0x414040L", 
            "funcName": "sub_413FA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414040(__int64 a1, __int64 a2)\n{\n  signed int *v2; // rcx\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  __int64 result; // rax\n\n  v2 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 15) > 0 )\n  {\n    v3 = (*(_DWORD *)off_49F6D0 - dword_49FB88) % *((_DWORD *)off_49F6D0 + 18094);\n    v4 = 0LL;\n    do\n    {\n      memcpy(*(void **)(*(_QWORD *)(a2 + 8 * v3) + 8 * v4), *(const void **)(a1 + 8 * v4), 2LL * v2[13]);\n      ++v4;\n      v2 = (signed int *)off_49F6D0;\n      result = *((signed int *)off_49F6D0 + 15);\n    }\n    while ( v4 < result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414040L", 
            "funcEndAddr": "0x4140a8L", 
            "funcName": "sub_414040"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4140B0(unsigned int a1, int a2)\n{\n  int v2; // ebx\n  int v3; // er13\n  int v4; // edi\n  signed int v5; // ebx\n  int v6; // ebp\n  __int64 result; // rax\n  signed int *v8; // rcx\n  __int64 v9; // rdx\n  __int64 v10; // r9\n  __int64 v11; // r10\n  signed __int64 v12; // r12\n  signed __int64 v13; // r11\n  signed __int64 v14; // r14\n  signed __int64 v15; // rbx\n  signed __int64 v16; // r15\n  char *v17; // rsi\n  int v18; // er8\n  __int64 v19; // r13\n  signed __int64 v20; // rdi\n  __int64 v21; // r9\n  __int64 v22; // r8\n  signed __int64 v23; // r12\n  signed __int64 v24; // r11\n  signed __int64 v25; // rdx\n  signed __int64 v26; // rbx\n  signed __int64 v27; // r15\n  unsigned __int16 *v28; // rsi\n  __int64 v29; // rbp\n  signed __int64 v30; // rdx\n  signed __int64 v31; // [rsp+8h] [rbp-68h]\n  __int64 v32; // [rsp+10h] [rbp-60h]\n  signed __int64 v33; // [rsp+30h] [rbp-40h]\n  signed __int64 v34; // [rsp+38h] [rbp-38h]\n\n  v2 = a1 + (a1 >> 31);\n  v3 = 8 * (a1 - ((a1 + (a1 >> 31)) & 0x1FFFFFFE));\n  v4 = v3 + 8;\n  v5 = 4 * v2 & 0xFFFFFFF8;\n  v6 = v5 + 8;\n  result = *(_QWORD *)(qword_4F9E30 + 6424);\n  v8 = (signed int *)off_49F6D0;\n  if ( a2 < 0 )\n  {\n    v21 = *(_QWORD *)off_49F6E8;\n    v22 = v5;\n    v34 = v6;\n    v23 = v5 | 1LL;\n    v24 = v5 | 3LL;\n    v25 = v5 | 7LL;\n    v26 = 4LL * v3;\n    v27 = 4LL * v3 + *(_QWORD *)(*(_QWORD *)off_49F6E8 + 8 * v22);\n    v28 = (unsigned __int16 *)((char *)off_49F6D0 + 32 * v3 + 2 * v22 + 12614);\n    v29 = 0LL;\n    v31 = v25;\n    v32 = (signed int)v25;\n    do\n    {\n      *(_DWORD *)(v27 + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * (v22 + v8[39]))\n                                                       + 2LL * (v8[38] + v3 + (signed int)v29))\n                                 - *(v28 - 7);\n      if ( v23 < v34 )\n      {\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v23) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                  + 8 * (v8[39] + (signed __int64)(signed int)v23))\n                                                                                      + 2LL\n                                                                                      * (v3 + (signed int)v29 + v8[38]))\n                                                                - *(v28 - 6);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v23 + 8) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v23 + 1 + (signed __int64)v8[39]))\n                                                                                          + 2LL\n                                                                                          * (v3\n                                                                                           + (signed int)v29\n                                                                                           + v8[38]))\n                                                                    - *(v28 - 5);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v24) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                  + 8 * (v8[39] + (signed __int64)(signed int)v24))\n                                                                                      + 2LL\n                                                                                      * (v3 + (signed int)v29 + v8[38]))\n                                                                - *(v28 - 4);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v24 + 8) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v24 + 1 + (signed __int64)v8[39]))\n                                                                                          + 2LL\n                                                                                          * (v3\n                                                                                           + (signed int)v29\n                                                                                           + v8[38]))\n                                                                    - *(v28 - 3);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v24 + 16) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v24 + 2 + (signed __int64)v8[39]))\n                                                                                           + 2LL\n                                                                                           * (v3\n                                                                                            + (signed int)v29\n                                                                                            + v8[38]))\n                                                                     - *(v28 - 2);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v24 + 24) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v24 + 3 + (signed __int64)v8[39]))\n                                                                                           + 2LL\n                                                                                           * (v3\n                                                                                            + (signed int)v29\n                                                                                            + v8[38]))\n                                                                     - *(v28 - 1);\n        *(_DWORD *)(v26 + *(_QWORD *)(v21 + 8 * v31) + 4 * v29) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                  + 8 * (v32 + v8[39]))\n                                                                                      + 2LL\n                                                                                      * (v8[38] + v3 + (signed int)v29))\n                                                                - *v28;\n      }\n      v28 += 16;\n      v30 = v3 + v29++ + 1;\n    }\n    while ( v30 < v4 );\n  }\n  else\n  {\n    v9 = *(_QWORD *)off_49F6E8;\n    v10 = v5;\n    v11 = v3;\n    v33 = v4;\n    v12 = v5 | 1LL;\n    v13 = v5 | 3LL;\n    v14 = v5 | 7LL;\n    v15 = 4LL * v3;\n    v16 = v15 + *(_QWORD *)(*(_QWORD *)off_49F6E8 + 8 * v10);\n    v17 = (char *)off_49F6D0 + 512 * (signed __int64)a2 + 32 * v10 + 2 * v3 + 5016;\n    v18 = v3;\n    v19 = 0LL;\n    do\n    {\n      *(_DWORD *)(v16 + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * (v10 + v8[39]))\n                                                       + 2LL * (v8[38] + v18 + (signed int)v19))\n                                 - *(unsigned __int16 *)&v17[2 * v19 - 224];\n      if ( v12 < v6 )\n      {\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v12) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                 + 8\n                                                                                                 * (v8[39]\n                                                                                                  + (signed __int64)(signed int)v12))\n                                                                                     + 2LL\n                                                                                     * (v18 + (signed int)v19 + v8[38]))\n                                                               - *(unsigned __int16 *)&v17[2 * v19 - 192];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v12 + 8) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v12 + 1 + (signed __int64)v8[39]))\n                                                                                         + 2LL\n                                                                                         * (v18\n                                                                                          + (signed int)v19\n                                                                                          + v8[38]))\n                                                                   - *(unsigned __int16 *)&v17[2 * v19 - 160];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v13) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                 + 8\n                                                                                                 * (v8[39]\n                                                                                                  + (signed __int64)(signed int)v13))\n                                                                                     + 2LL\n                                                                                     * (v18 + (signed int)v19 + v8[38]))\n                                                               - *(unsigned __int16 *)&v17[2 * v19 - 128];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v13 + 8) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v13 + 1 + (signed __int64)v8[39]))\n                                                                                         + 2LL\n                                                                                         * (v18\n                                                                                          + (signed int)v19\n                                                                                          + v8[38]))\n                                                                   - *(unsigned __int16 *)&v17[2 * v19 - 96];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v13 + 16) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v13 + 2 + (signed __int64)v8[39]))\n                                                                                          + 2LL\n                                                                                          * (v18\n                                                                                           + (signed int)v19\n                                                                                           + v8[38]))\n                                                                    - *(unsigned __int16 *)&v17[2 * v19 - 64];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v13 + 24) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result + 8 * ((signed int)v13 + 3 + (signed __int64)v8[39]))\n                                                                                          + 2LL\n                                                                                          * (v18\n                                                                                           + (signed int)v19\n                                                                                           + v8[38]))\n                                                                    - *(unsigned __int16 *)&v17[2 * v19 - 32];\n        *(_DWORD *)(v15 + *(_QWORD *)(v9 + 8 * v14) + 4 * v19) = *(unsigned __int16 *)(*(_QWORD *)(result\n                                                                                                 + 8\n                                                                                                 * ((signed int)v14\n                                                                                                  + (signed __int64)v8[39]))\n                                                                                     + 2LL\n                                                                                     * (v8[38] + v18 + (signed int)v19))\n                                                               - *(unsigned __int16 *)&v17[2 * v19];\n      }\n      v20 = v11 + v19++ + 1;\n    }\n    while ( v20 < v33 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4140b0L", 
            "funcEndAddr": "0x4145f8L", 
            "funcName": "sub_4140B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414600(int a1)\n{\n  sub_4140B0(0, a1);\n  sub_4140B0(1u, a1);\n  sub_4140B0(2u, a1);\n  return sub_4140B0(3u, a1);\n}\n", 
            "funcStartAddr": "0x414600L", 
            "funcEndAddr": "0x414631L", 
            "funcName": "sub_414600"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_414640(__int64 a1, int a2, int a3, __int64 a4, __int64 a5)\n{\n  int v5; // er12\n  int v6; // edx\n  char v7; // al\n  int v8; // ebx\n  bool v9; // r10\n  int v10; // ebx\n  bool v11; // r9\n  char v12; // bl\n  signed __int64 result; // rax\n  int v14; // er8\n  __int64 v15; // rbp\n  __int64 v16; // rbx\n  __int64 v17; // rdi\n  __int64 v18; // r11\n  signed __int64 v19; // r13\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rsi\n  signed __int64 v22; // rdi\n  signed __int64 v23; // rbp\n  signed __int64 v24; // rbx\n  signed __int64 v25; // r8\n  signed __int64 v26; // r12\n  signed __int64 v27; // r9\n  __int64 v28; // r10\n  __int64 v29; // r14\n  __int64 v30; // rcx\n  int v31; // esi\n  __int64 v32; // rbx\n  __int64 v33; // rdi\n  __int64 v34; // r15\n  __int64 v35; // r14\n  __int64 v36; // r11\n  signed __int16 *v37; // rcx\n  signed __int16 *v38; // rcx\n  signed __int16 *v39; // rcx\n  signed __int16 *v40; // rcx\n  signed __int16 *v41; // rcx\n  signed __int16 *v42; // rcx\n  signed __int16 *v43; // rcx\n  signed __int16 *v44; // rcx\n  signed __int16 *v45; // rcx\n  signed __int16 *v46; // rcx\n  signed __int16 *v47; // rcx\n  signed __int16 *v48; // rcx\n  signed __int16 *v49; // rcx\n  signed __int16 *v50; // rcx\n  signed __int16 *v51; // rcx\n  signed __int16 *v52; // rcx\n  __int64 v53; // r11\n  signed __int64 v54; // r13\n  signed __int64 v55; // rcx\n  signed __int64 v56; // rsi\n  signed __int64 v57; // rdi\n  signed __int64 v58; // rbp\n  signed __int64 v59; // rbx\n  signed __int64 v60; // r8\n  signed __int64 v61; // r12\n  signed __int64 v62; // r9\n  __int64 v63; // r10\n  __int64 v64; // r14\n  int v65; // esi\n  __int64 v66; // rbx\n  __int64 v67; // r15\n  __int64 v68; // r14\n  __int64 v69; // r11\n  signed __int16 *v70; // rcx\n  signed __int16 *v71; // rcx\n  signed __int16 *v72; // rcx\n  signed __int16 *v73; // rcx\n  signed __int16 *v74; // rcx\n  signed __int16 *v75; // rcx\n  signed __int16 *v76; // rcx\n  signed __int16 *v77; // rcx\n  signed __int16 *v78; // rcx\n  signed __int16 *v79; // rcx\n  signed __int16 *v80; // rcx\n  signed __int16 *v81; // rcx\n  signed __int16 *v82; // rcx\n  signed __int16 *v83; // rcx\n  signed __int16 *v84; // rcx\n  signed __int16 *v85; // rcx\n  __int64 v86; // r11\n  __int64 v87; // rsi\n  signed __int64 v88; // rax\n  signed __int64 v89; // rdx\n  __int64 v90; // rsi\n  __int64 v91; // rsi\n  __int64 v92; // rsi\n  __int64 v93; // rsi\n  __int64 v94; // rsi\n  __int64 v95; // rsi\n  __int64 v96; // rsi\n  __int64 v97; // rsi\n  __int64 v98; // rsi\n  __int64 v99; // rsi\n  __int64 v100; // rsi\n  __int64 v101; // rsi\n  __int64 v102; // rsi\n  __int64 v103; // rsi\n  __int64 v104; // rbx\n  __int64 v105; // rdi\n  __int64 v106; // r11\n  signed __int64 v107; // r13\n  signed __int64 v108; // rcx\n  signed __int64 v109; // rsi\n  signed __int64 v110; // rdi\n  signed __int64 v111; // rbp\n  signed __int64 v112; // rbx\n  signed __int64 v113; // r8\n  signed __int64 v114; // r12\n  signed __int64 v115; // r9\n  __int64 v116; // r10\n  __int64 v117; // r14\n  __int64 v118; // r14\n  __int64 v119; // r11\n  signed __int64 v120; // r13\n  signed __int64 v121; // rcx\n  signed __int64 v122; // rsi\n  signed __int64 v123; // rdi\n  signed __int64 v124; // rbp\n  signed __int64 v125; // rbx\n  signed __int64 v126; // r8\n  signed __int64 v127; // r12\n  signed __int64 v128; // r9\n  __int64 v129; // r10\n  __int64 v130; // r14\n  bool v131; // zf\n  __int64 v132; // r9\n  __int64 v133; // rcx\n  int v134; // ebp\n  signed __int64 v135; // r13\n  signed __int64 v136; // r15\n  int *v137; // rdx\n  signed __int64 v138; // r12\n  __int64 v139; // rsi\n  __int64 v140; // r14\n  __int64 v141; // rax\n  _WORD *v142; // rcx\n  signed __int64 v143; // rsi\n  _WORD *v144; // rcx\n  signed __int64 v145; // rsi\n  _WORD *v146; // rcx\n  signed __int64 v147; // rsi\n  _WORD *v148; // rax\n  signed __int64 v149; // rdx\n  bool v150; // sf\n  unsigned __int8 v151; // of\n  int v152; // er13\n  signed __int64 v153; // rdx\n  int *v154; // r12\n  signed __int64 v155; // r15\n  __int64 v156; // rbx\n  __int64 v157; // rcx\n  __int64 v158; // rbp\n  __int64 v159; // rdi\n  __int64 v160; // rbx\n  __int64 v161; // rax\n  _WORD *v162; // rcx\n  signed __int64 v163; // rsi\n  _WORD *v164; // rcx\n  signed __int64 v165; // rsi\n  _WORD *v166; // rcx\n  signed __int64 v167; // rsi\n  _WORD *v168; // rax\n  signed __int64 v169; // rdx\n  __int64 v170; // r11\n  signed __int64 v171; // r13\n  signed __int64 v172; // rcx\n  signed __int64 v173; // rsi\n  signed __int64 v174; // rdi\n  signed __int64 v175; // rbp\n  signed __int64 v176; // rbx\n  signed __int64 v177; // r8\n  signed __int64 v178; // r12\n  signed __int64 v179; // r9\n  __int64 v180; // r10\n  __int64 v181; // r14\n  __int64 v182; // [rsp+8h] [rbp-100h]\n  signed __int64 v183; // [rsp+8h] [rbp-100h]\n  signed __int64 v184; // [rsp+8h] [rbp-100h]\n  signed __int64 v185; // [rsp+8h] [rbp-100h]\n  signed __int64 v186; // [rsp+8h] [rbp-100h]\n  signed __int64 v187; // [rsp+8h] [rbp-100h]\n  __int64 v188; // [rsp+10h] [rbp-F8h]\n  signed __int64 v189; // [rsp+10h] [rbp-F8h]\n  signed __int64 v190; // [rsp+10h] [rbp-F8h]\n  signed __int64 v191; // [rsp+10h] [rbp-F8h]\n  signed __int64 v192; // [rsp+10h] [rbp-F8h]\n  signed __int64 v193; // [rsp+10h] [rbp-F8h]\n  signed __int64 v194; // [rsp+18h] [rbp-F0h]\n  signed __int64 v195; // [rsp+18h] [rbp-F0h]\n  signed __int64 v196; // [rsp+18h] [rbp-F0h]\n  signed __int64 v197; // [rsp+18h] [rbp-F0h]\n  __int64 v198; // [rsp+18h] [rbp-F0h]\n  __int64 v199; // [rsp+18h] [rbp-F0h]\n  signed __int64 v200; // [rsp+18h] [rbp-F0h]\n  signed __int64 v201; // [rsp+20h] [rbp-E8h]\n  signed __int64 v202; // [rsp+20h] [rbp-E8h]\n  signed __int64 v203; // [rsp+20h] [rbp-E8h]\n  signed __int64 v204; // [rsp+20h] [rbp-E8h]\n  __int64 v205; // [rsp+20h] [rbp-E8h]\n  signed __int64 v206; // [rsp+20h] [rbp-E8h]\n  signed __int64 v207; // [rsp+20h] [rbp-E8h]\n  signed __int64 v208; // [rsp+28h] [rbp-E0h]\n  signed __int64 v209; // [rsp+28h] [rbp-E0h]\n  signed __int64 v210; // [rsp+28h] [rbp-E0h]\n  signed __int64 v211; // [rsp+28h] [rbp-E0h]\n  signed __int64 v212; // [rsp+28h] [rbp-E0h]\n  signed __int64 v213; // [rsp+28h] [rbp-E0h]\n  signed __int64 v214; // [rsp+28h] [rbp-E0h]\n  signed __int64 v215; // [rsp+30h] [rbp-D8h]\n  signed __int64 v216; // [rsp+30h] [rbp-D8h]\n  signed __int64 v217; // [rsp+30h] [rbp-D8h]\n  signed __int64 v218; // [rsp+30h] [rbp-D8h]\n  signed __int64 v219; // [rsp+30h] [rbp-D8h]\n  signed __int64 v220; // [rsp+30h] [rbp-D8h]\n  signed __int64 v221; // [rsp+30h] [rbp-D8h]\n  signed __int64 v222; // [rsp+38h] [rbp-D0h]\n  signed __int64 v223; // [rsp+38h] [rbp-D0h]\n  signed __int64 v224; // [rsp+38h] [rbp-D0h]\n  signed __int64 v225; // [rsp+38h] [rbp-D0h]\n  signed __int64 v226; // [rsp+38h] [rbp-D0h]\n  signed __int64 v227; // [rsp+38h] [rbp-D0h]\n  signed __int64 v228; // [rsp+38h] [rbp-D0h]\n  signed __int64 v229; // [rsp+40h] [rbp-C8h]\n  signed __int64 v230; // [rsp+40h] [rbp-C8h]\n  signed __int64 v231; // [rsp+40h] [rbp-C8h]\n  signed __int64 v232; // [rsp+40h] [rbp-C8h]\n  signed __int64 v233; // [rsp+40h] [rbp-C8h]\n  signed __int64 v234; // [rsp+40h] [rbp-C8h]\n  signed __int64 v235; // [rsp+48h] [rbp-C0h]\n  signed __int64 v236; // [rsp+48h] [rbp-C0h]\n  signed __int64 v237; // [rsp+48h] [rbp-C0h]\n  signed __int64 v238; // [rsp+48h] [rbp-C0h]\n  int *v239; // [rsp+48h] [rbp-C0h]\n  __int64 v240; // [rsp+48h] [rbp-C0h]\n  signed __int64 v241; // [rsp+48h] [rbp-C0h]\n  int v242; // [rsp+50h] [rbp-B8h]\n  int v243; // [rsp+54h] [rbp-B4h]\n  int v244; // [rsp+58h] [rbp-B0h]\n  int v245; // [rsp+5Ch] [rbp-ACh]\n  int v246; // [rsp+60h] [rbp-A8h]\n  int v247; // [rsp+64h] [rbp-A4h]\n  int v248; // [rsp+68h] [rbp-A0h]\n  int v249; // [rsp+6Ch] [rbp-9Ch]\n  int v250; // [rsp+70h] [rbp-98h]\n  int v251; // [rsp+74h] [rbp-94h]\n  int v252; // [rsp+78h] [rbp-90h]\n  int v253; // [rsp+7Ch] [rbp-8Ch]\n  int v254; // [rsp+80h] [rbp-88h]\n  int v255; // [rsp+84h] [rbp-84h]\n  int v256; // [rsp+88h] [rbp-80h]\n  int v257; // [rsp+8Ch] [rbp-7Ch]\n  int v258; // [rsp+90h] [rbp-78h]\n  int v259; // [rsp+94h] [rbp-74h]\n  int v260; // [rsp+98h] [rbp-70h]\n  int v261; // [rsp+9Ch] [rbp-6Ch]\n  int v262; // [rsp+A0h] [rbp-68h]\n  int v263; // [rsp+A4h] [rbp-64h]\n  int v264; // [rsp+A8h] [rbp-60h]\n  int v265; // [rsp+ACh] [rbp-5Ch]\n  int v266; // [rsp+B0h] [rbp-58h]\n  int v267; // [rsp+B4h] [rbp-54h]\n  int v268; // [rsp+B8h] [rbp-50h]\n  int v269; // [rsp+BCh] [rbp-4Ch]\n  int v270; // [rsp+C0h] [rbp-48h]\n  int v271; // [rsp+C4h] [rbp-44h]\n  int v272; // [rsp+C8h] [rbp-40h]\n  int v273; // [rsp+CCh] [rbp-3Ch]\n\n  v5 = a3;\n  v6 = (*(_DWORD *)off_49F6D0 - 1 - dword_49FB88) % *((_DWORD *)off_49F6D0 + 8);\n  v7 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)off_49F6E8 + 6) + 8LL * v5) + a2);\n  if ( (unsigned __int8)(v7 - 1) >= 3u && v7 != 8 )\n  {\n    if ( !v7 )\n    {\n      v8 = *((_DWORD *)off_49F6D0 + 6);\n      if ( !v8 )\n      {\n        v9 = 1;\n        goto LABEL_11;\n      }\n      if ( v8 == 1 )\n      {\n        v9 = *((_DWORD *)off_49F6D0 + 18124) > 0;\nLABEL_11:\n        v11 = 0;\n        goto LABEL_14;\n      }\n    }\nLABEL_10:\n    v9 = 0;\n    goto LABEL_11;\n  }\n  v10 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v10 )\n  {\n    if ( v10 != 1 )\n      goto LABEL_10;\n    v11 = *((_DWORD *)off_49F6D0 + 18124) > 0;\n  }\n  else\n  {\n    v11 = 1;\n  }\n  v9 = 0;\nLABEL_14:\n  v12 = *(_BYTE *)(*(_QWORD *)(a5 + 8LL * a2) + v5) - 1;\n  result = (unsigned int)(16 * a2);\n  v14 = 16 * v5;\n  v15 = **(_QWORD **)(qword_4F9E30 + 6504);\n  v188 = a1;\n  v182 = a4;\n  switch ( v12 )\n  {\n    case 0:\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n        goto LABEL_20;\n      v16 = a1;\n      v17 = a4;\n      v18 = v14;\n      v189 = v14 | 1LL;\n      v183 = v14 | 2LL;\n      v235 = v14 | 3LL;\n      v229 = v14 | 4LL;\n      v222 = v14 | 5LL;\n      v215 = v14 | 6LL;\n      v208 = v14 | 7LL;\n      v19 = v14 | 8LL;\n      v20 = v14 | 9LL;\n      v201 = *(_QWORD *)(v17 + 8LL * v6) + 8LL * (signed int)result;\n      v21 = v14 | 0xALL;\n      v22 = v14 | 0xBLL;\n      v194 = v16 + 8LL * (signed int)result;\n      v23 = v14 | 0xCLL;\n      v24 = v14 | 0xDLL;\n      v25 = v14 | 0xELL;\n      v26 = v18 | 0xF;\n      v27 = -128LL;\n      do\n      {\n        v28 = *(_QWORD *)(v201 + v27 + 128);\n        v29 = *(_QWORD *)(v194 + v27 + 128);\n        *(_WORD *)(v29 + 2 * v18) = *(_WORD *)(v28 + 2 * v18);\n        *(_WORD *)(v29 + 2 * v189) = *(_WORD *)(v28 + 2 * v189);\n        *(_WORD *)(v29 + 2 * v183) = *(_WORD *)(v28 + 2 * v183);\n        *(_WORD *)(v29 + 2 * v235) = *(_WORD *)(v28 + 2 * v235);\n        *(_WORD *)(v29 + 2 * v229) = *(_WORD *)(v28 + 2 * v229);\n        *(_WORD *)(v29 + 2 * v222) = *(_WORD *)(v28 + 2 * v222);\n        *(_WORD *)(v29 + 2 * v215) = *(_WORD *)(v28 + 2 * v215);\n        *(_WORD *)(v29 + 2 * v208) = *(_WORD *)(v28 + 2 * v208);\n        *(_WORD *)(v29 + 2 * v19) = *(_WORD *)(v28 + 2 * v19);\n        *(_WORD *)(v29 + 2 * v20) = *(_WORD *)(v28 + 2 * v20);\n        *(_WORD *)(v29 + 2 * v21) = *(_WORD *)(v28 + 2 * v21);\n        *(_WORD *)(v29 + 2 * v22) = *(_WORD *)(v28 + 2 * v22);\n        *(_WORD *)(v29 + 2 * v23) = *(_WORD *)(v28 + 2 * v23);\n        *(_WORD *)(v29 + 2 * v24) = *(_WORD *)(v28 + 2 * v24);\n        *(_WORD *)(v29 + 2 * v25) = *(_WORD *)(v28 + 2 * v25);\n        result = *(unsigned __int16 *)(v28 + 2 * v26);\n        *(_WORD *)(v29 + 2 * v26) = result;\n        v27 += 8LL;\n      }\n      while ( v27 );\n      break;\n    case 1:\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      {\nLABEL_20:\n        v30 = v14;\n        result = (signed int)result;\n        goto LABEL_28;\n      }\n      if ( !v11 )\n      {\n        v104 = a1;\n        v105 = a4;\n        v106 = v14;\n        v191 = v14 | 1LL;\n        v185 = v14 | 2LL;\n        v237 = v14 | 3LL;\n        v231 = v14 | 4LL;\n        v224 = v14 | 5LL;\n        v217 = v14 | 6LL;\n        v210 = v14 | 7LL;\n        v107 = v14 | 8LL;\n        v108 = v14 | 9LL;\n        v203 = *(_QWORD *)(v105 + 8LL * v6) + 8LL * (signed int)result;\n        v109 = v14 | 0xALL;\n        v110 = v14 | 0xBLL;\n        v196 = v104 + 8LL * (signed int)result;\n        v111 = v14 | 0xCLL;\n        v112 = v14 | 0xDLL;\n        v113 = v14 | 0xELL;\n        v114 = v106 | 0xF;\n        v115 = -128LL;\n        do\n        {\n          v116 = *(_QWORD *)(v203 + v115 + 128);\n          v117 = *(_QWORD *)(v196 + v115 + 128);\n          *(_WORD *)(v117 + 2 * v106) = *(_WORD *)(v116 + 2 * v106);\n          *(_WORD *)(v117 + 2 * v191) = *(_WORD *)(v116 + 2 * v191);\n          *(_WORD *)(v117 + 2 * v185) = *(_WORD *)(v116 + 2 * v185);\n          *(_WORD *)(v117 + 2 * v237) = *(_WORD *)(v116 + 2 * v237);\n          *(_WORD *)(v117 + 2 * v231) = *(_WORD *)(v116 + 2 * v231);\n          *(_WORD *)(v117 + 2 * v224) = *(_WORD *)(v116 + 2 * v224);\n          *(_WORD *)(v117 + 2 * v217) = *(_WORD *)(v116 + 2 * v217);\n          *(_WORD *)(v117 + 2 * v210) = *(_WORD *)(v116 + 2 * v210);\n          *(_WORD *)(v117 + 2 * v107) = *(_WORD *)(v116 + 2 * v107);\n          *(_WORD *)(v117 + 2 * v108) = *(_WORD *)(v116 + 2 * v108);\n          *(_WORD *)(v117 + 2 * v109) = *(_WORD *)(v116 + 2 * v109);\n          *(_WORD *)(v117 + 2 * v110) = *(_WORD *)(v116 + 2 * v110);\n          *(_WORD *)(v117 + 2 * v111) = *(_WORD *)(v116 + 2 * v111);\n          *(_WORD *)(v117 + 2 * v112) = *(_WORD *)(v116 + 2 * v112);\n          *(_WORD *)(v117 + 2 * v113) = *(_WORD *)(v116 + 2 * v113);\n          result = *(unsigned __int16 *)(v116 + 2 * v114);\n          *(_WORD *)(v117 + 2 * v114) = result;\n          v115 += 8LL;\n        }\n        while ( v115 );\n      }\n      break;\n    case 2:\n      if ( *((_DWORD *)off_49F6D0 + 6) != 2 )\n      {\n        v31 = 4 * a2;\n        v32 = v31;\n        v33 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 4));\n        v34 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 5));\n        v35 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 6));\n        v36 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 7));\n        v37 = *(signed __int16 **)(v33 + 8LL * v31);\n        v242 = *v37;\n        v258 = v37[1];\n        v38 = *(signed __int16 **)(v34 + 8LL * v31);\n        v243 = *v38;\n        v259 = v38[1];\n        v39 = *(signed __int16 **)(v35 + 8LL * v31);\n        v244 = *v39;\n        v260 = v39[1];\n        v40 = *(signed __int16 **)(v36 + 8LL * v31);\n        v245 = *v40;\n        v261 = v40[1];\n        v41 = *(signed __int16 **)(v33 + 8LL * v31 + 8);\n        v246 = *v41;\n        v262 = v41[1];\n        v42 = *(signed __int16 **)(v34 + 8LL * v31 + 8);\n        v247 = *v42;\n        v263 = v42[1];\n        v43 = *(signed __int16 **)(v35 + 8LL * v31 + 8);\n        v248 = *v43;\n        v264 = v43[1];\n        v44 = *(signed __int16 **)(v36 + 8LL * v31 + 8);\n        v249 = *v44;\n        v265 = v44[1];\n        v45 = *(signed __int16 **)(v33 + 8LL * v31 + 16);\n        v250 = *v45;\n        v266 = v45[1];\n        v46 = *(signed __int16 **)(v34 + 8LL * v31 + 16);\n        v251 = *v46;\n        v267 = v46[1];\n        v47 = *(signed __int16 **)(v35 + 8LL * v31 + 16);\n        v252 = *v47;\n        v268 = v47[1];\n        v48 = *(signed __int16 **)(v36 + 8LL * v31 + 16);\n        v253 = *v48;\n        v269 = v48[1];\n        v49 = *(signed __int16 **)(v33 + 8LL * v31 + 24);\n        v254 = *v49;\n        v270 = v49[1];\n        v50 = *(signed __int16 **)(v34 + 8LL * v31 + 24);\n        v255 = *v50;\n        v271 = v50[1];\n        v51 = *(signed __int16 **)(v35 + 8LL * v31 + 24);\n        v256 = *v51;\n        v272 = v51[1];\n        v52 = *(signed __int16 **)(v36 + 8LL * v31 + 24);\n        v257 = *v52;\n        v273 = v52[1];\n        if ( v9 )\n        {\n          v53 = v14;\n          v236 = v14 | 1LL;\n          v230 = v14 | 2LL;\n          v223 = v14 | 3LL;\n          v216 = v14 | 4LL;\n          v209 = v14 | 5LL;\n          v202 = v14 | 6LL;\n          v195 = v14 | 7LL;\n          v54 = v14 | 8LL;\n          v55 = v14 | 9LL;\n          v184 = *(_QWORD *)(v182 + 8LL * v6) + 8LL * (signed int)result;\n          v56 = v14 | 0xALL;\n          v57 = v14 | 0xBLL;\n          v190 = v188 + 8LL * (signed int)result;\n          v58 = v14 | 0xCLL;\n          v59 = v14 | 0xDLL;\n          v60 = v14 | 0xELL;\n          v61 = v53 | 0xF;\n          v62 = -128LL;\n          do\n          {\n            v63 = *(_QWORD *)(v184 + v62 + 128);\n            v64 = *(_QWORD *)(v190 + v62 + 128);\n            *(_WORD *)(v64 + 2 * v53) = *(_WORD *)(v63 + 2 * v53);\n            *(_WORD *)(v64 + 2 * v236) = *(_WORD *)(v63 + 2 * v236);\n            *(_WORD *)(v64 + 2 * v230) = *(_WORD *)(v63 + 2 * v230);\n            *(_WORD *)(v64 + 2 * v223) = *(_WORD *)(v63 + 2 * v223);\n            *(_WORD *)(v64 + 2 * v216) = *(_WORD *)(v63 + 2 * v216);\n            *(_WORD *)(v64 + 2 * v209) = *(_WORD *)(v63 + 2 * v209);\n            *(_WORD *)(v64 + 2 * v202) = *(_WORD *)(v63 + 2 * v202);\n            *(_WORD *)(v64 + 2 * v195) = *(_WORD *)(v63 + 2 * v195);\n            *(_WORD *)(v64 + 2 * v54) = *(_WORD *)(v63 + 2 * v54);\n            *(_WORD *)(v64 + 2 * v55) = *(_WORD *)(v63 + 2 * v55);\n            *(_WORD *)(v64 + 2 * v56) = *(_WORD *)(v63 + 2 * v56);\n            *(_WORD *)(v64 + 2 * v57) = *(_WORD *)(v63 + 2 * v57);\n            *(_WORD *)(v64 + 2 * v58) = *(_WORD *)(v63 + 2 * v58);\n            *(_WORD *)(v64 + 2 * v59) = *(_WORD *)(v63 + 2 * v59);\n            *(_WORD *)(v64 + 2 * v60) = *(_WORD *)(v63 + 2 * v60);\n            result = *(unsigned __int16 *)(v63 + 2 * v61);\n            *(_WORD *)(v64 + 2 * v61) = result;\n            v62 += 8LL;\n          }\n          while ( v62 );\n        }\n        else\n        {\n          v131 = v11 == 0;\n          v132 = v182;\n          if ( !v131 )\n          {\n            v133 = v6;\n            v134 = 4 * v5;\n            v135 = 4 * v5 | 3;\n            v198 = v31 | 3;\n            v136 = 4 * v5 - 1LL;\n            v137 = &v258;\n            v138 = 2LL * v14 + 6;\n            v205 = v133;\n            do\n            {\n              v139 = 4 * (signed int)v32;\n              v226 = v139 + 1;\n              v219 = v139 + 2;\n              v212 = v139 + 3;\n              v140 = 0LL;\n              v239 = v137;\n              do\n              {\n                sub_412EE0(\n                  *(_QWORD *)(v132 + 8 * v133),\n                  v32,\n                  (unsigned int)(v140 + v134),\n                  (unsigned int)v137[v140 - 16],\n                  v137[v140],\n                  *((_QWORD **)off_49F6E8 + 4));\n                v132 = v182;\n                v141 = *((_QWORD *)off_49F6E8 + 4);\n                v142 = *(_WORD **)v141;\n                v143 = v138 + *(_QWORD *)(v188 + 32LL * (_DWORD)v32);\n                *(_WORD *)(v143 + 8 * v140 - 6) = **(_WORD **)v141;\n                *(_WORD *)(v143 + 8 * v140 - 4) = v142[1];\n                *(_WORD *)(v143 + 8 * v140 - 2) = v142[2];\n                *(_WORD *)(v143 + 8 * v140) = v142[3];\n                v144 = *(_WORD **)(v141 + 8);\n                v145 = v138 + *(_QWORD *)(v188 + 8 * v226);\n                *(_WORD *)(v145 + 8 * v140 - 6) = *v144;\n                *(_WORD *)(v145 + 8 * v140 - 4) = v144[1];\n                *(_WORD *)(v145 + 8 * v140 - 2) = v144[2];\n                *(_WORD *)(v145 + 8 * v140) = v144[3];\n                v146 = *(_WORD **)(v141 + 16);\n                v147 = v138 + *(_QWORD *)(v188 + 8 * v219);\n                *(_WORD *)(v147 + 8 * v140 - 6) = *v146;\n                *(_WORD *)(v147 + 8 * v140 - 4) = v146[1];\n                *(_WORD *)(v147 + 8 * v140 - 2) = v146[2];\n                *(_WORD *)(v147 + 8 * v140) = v146[3];\n                v148 = *(_WORD **)(v141 + 24);\n                v149 = v138 + *(_QWORD *)(v188 + 8 * v212);\n                *(_WORD *)(v149 + 8 * v140 - 6) = *v148;\n                *(_WORD *)(v149 + 8 * v140 - 4) = v148[1];\n                *(_WORD *)(v149 + 8 * v140 - 2) = v148[2];\n                v133 = v205;\n                *(_WORD *)(v149 + 8 * v140) = v148[3];\n                v137 = v239;\n                result = v136 + v140++ + 1;\n              }\n              while ( result < v135 );\n              v137 = v239 + 4;\n              v151 = __OFSUB__(v32, v198);\n              v150 = v32++ - v198 < 0;\n            }\n            while ( v150 ^ v151 );\n          }\n        }\n      }\n      break;\n    case 4:\n      v65 = 4 * a2;\n      v66 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 4));\n      v67 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 5));\n      v68 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 6));\n      v69 = *(_QWORD *)(v15 + 8LL * (4 * v5 + 7));\n      v70 = *(signed __int16 **)(v66 + 8LL * v65);\n      v242 = *v70;\n      v258 = v70[1];\n      v71 = *(signed __int16 **)(v67 + 8LL * v65);\n      v243 = *v71;\n      v259 = v71[1];\n      v72 = *(signed __int16 **)(v68 + 8LL * v65);\n      v244 = *v72;\n      v260 = v72[1];\n      v73 = *(signed __int16 **)(v69 + 8LL * v65);\n      v245 = *v73;\n      v261 = v73[1];\n      v74 = *(signed __int16 **)(v66 + 8LL * v65 + 8);\n      v246 = *v74;\n      v262 = v74[1];\n      v75 = *(signed __int16 **)(v67 + 8LL * v65 + 8);\n      v247 = *v75;\n      v263 = v75[1];\n      v76 = *(signed __int16 **)(v68 + 8LL * v65 + 8);\n      v248 = *v76;\n      v264 = v76[1];\n      v77 = *(signed __int16 **)(v69 + 8LL * v65 + 8);\n      v249 = *v77;\n      v265 = v77[1];\n      v78 = *(signed __int16 **)(v66 + 8LL * v65 + 16);\n      v250 = *v78;\n      v266 = v78[1];\n      v79 = *(signed __int16 **)(v67 + 8LL * v65 + 16);\n      v251 = *v79;\n      v267 = v79[1];\n      v80 = *(signed __int16 **)(v68 + 8LL * v65 + 16);\n      v252 = *v80;\n      v268 = v80[1];\n      v81 = *(signed __int16 **)(v69 + 8LL * v65 + 16);\n      v253 = *v81;\n      v269 = v81[1];\n      v82 = *(signed __int16 **)(v66 + 8LL * v65 + 24);\n      v254 = *v82;\n      v270 = v82[1];\n      v83 = *(signed __int16 **)(v67 + 8LL * v65 + 24);\n      v255 = *v83;\n      v271 = v83[1];\n      v84 = *(signed __int16 **)(v68 + 8LL * v65 + 24);\n      v256 = *v84;\n      v272 = v84[1];\n      v85 = *(signed __int16 **)(v69 + 8LL * v65 + 24);\n      v86 = v65;\n      v257 = *v85;\n      v273 = v85[1];\n      if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n      {\n        v30 = v14;\n        result = (signed int)result;\nLABEL_28:\n        v87 = *(_QWORD *)(a1 + 8 * result);\n        v88 = 8 * result;\n        *(_OWORD *)(v87 + 2 * v30) = xmmword_489680;\n        v89 = 2 * v30 | 0x10;\n        *(_OWORD *)(v87 + v89) = xmmword_489680;\n        v90 = *(_QWORD *)(a1 + (v88 | 8));\n        *(_OWORD *)(v90 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v90 + v89) = xmmword_489680;\n        v91 = *(_QWORD *)(a1 + (v88 | 0x10));\n        *(_OWORD *)(v91 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v91 + v89) = xmmword_489680;\n        v92 = *(_QWORD *)(a1 + (v88 | 0x18));\n        *(_OWORD *)(v92 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v92 + v89) = xmmword_489680;\n        v93 = *(_QWORD *)(a1 + (v88 | 0x20));\n        *(_OWORD *)(v93 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v93 + v89) = xmmword_489680;\n        v94 = *(_QWORD *)(a1 + (v88 | 0x28));\n        *(_OWORD *)(v94 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v94 + v89) = xmmword_489680;\n        v95 = *(_QWORD *)(a1 + (v88 | 0x30));\n        *(_OWORD *)(v95 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v95 + v89) = xmmword_489680;\n        v96 = *(_QWORD *)(a1 + (v88 | 0x38));\n        *(_OWORD *)(v96 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v96 + v89) = xmmword_489680;\n        v97 = *(_QWORD *)(a1 + (v88 | 0x40));\n        *(_OWORD *)(v97 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v97 + v89) = xmmword_489680;\n        v98 = *(_QWORD *)(a1 + (v88 | 0x48));\n        *(_OWORD *)(v98 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v98 + v89) = xmmword_489680;\n        v99 = *(_QWORD *)(a1 + (v88 | 0x50));\n        *(_OWORD *)(v99 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v99 + v89) = xmmword_489680;\n        v100 = *(_QWORD *)(a1 + (v88 | 0x58));\n        *(_OWORD *)(v100 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v100 + v89) = xmmword_489680;\n        v101 = *(_QWORD *)(a1 + (v88 | 0x60));\n        *(_OWORD *)(v101 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v101 + v89) = xmmword_489680;\n        v102 = *(_QWORD *)(a1 + (v88 | 0x68));\n        *(_OWORD *)(v102 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v102 + v89) = xmmword_489680;\n        v103 = *(_QWORD *)(a1 + (v88 | 0x70));\n        *(_OWORD *)(v103 + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(v103 + v89) = xmmword_489680;\n        result = *(_QWORD *)(a1 + (v88 | 0x78));\n        *(_OWORD *)(result + 2 * v30) = xmmword_489680;\n        *(_OWORD *)(result + v89) = xmmword_489680;\n      }\n      else\n      {\n        v118 = v6;\n        if ( v9 )\n        {\n          v119 = v14;\n          v238 = v14 | 1LL;\n          v232 = v14 | 2LL;\n          v225 = v14 | 3LL;\n          v218 = v14 | 4LL;\n          v211 = v14 | 5LL;\n          v204 = v14 | 6LL;\n          v197 = v14 | 7LL;\n          v120 = v14 | 8LL;\n          v121 = v14 | 9LL;\n          v186 = *(_QWORD *)(v182 + 8LL * v6) + 8LL * (signed int)result;\n          v122 = v14 | 0xALL;\n          v123 = v14 | 0xBLL;\n          v192 = v188 + 8LL * (signed int)result;\n          v124 = v14 | 0xCLL;\n          v125 = v14 | 0xDLL;\n          v126 = v14 | 0xELL;\n          v127 = v119 | 0xF;\n          v128 = -128LL;\n          do\n          {\n            v129 = *(_QWORD *)(v186 + v128 + 128);\n            v130 = *(_QWORD *)(v192 + v128 + 128);\n            *(_WORD *)(v130 + 2 * v119) = *(_WORD *)(v129 + 2 * v119);\n            *(_WORD *)(v130 + 2 * v238) = *(_WORD *)(v129 + 2 * v238);\n            *(_WORD *)(v130 + 2 * v232) = *(_WORD *)(v129 + 2 * v232);\n            *(_WORD *)(v130 + 2 * v225) = *(_WORD *)(v129 + 2 * v225);\n            *(_WORD *)(v130 + 2 * v218) = *(_WORD *)(v129 + 2 * v218);\n            *(_WORD *)(v130 + 2 * v211) = *(_WORD *)(v129 + 2 * v211);\n            *(_WORD *)(v130 + 2 * v204) = *(_WORD *)(v129 + 2 * v204);\n            *(_WORD *)(v130 + 2 * v197) = *(_WORD *)(v129 + 2 * v197);\n            *(_WORD *)(v130 + 2 * v120) = *(_WORD *)(v129 + 2 * v120);\n            *(_WORD *)(v130 + 2 * v121) = *(_WORD *)(v129 + 2 * v121);\n            *(_WORD *)(v130 + 2 * v122) = *(_WORD *)(v129 + 2 * v122);\n            *(_WORD *)(v130 + 2 * v123) = *(_WORD *)(v129 + 2 * v123);\n            *(_WORD *)(v130 + 2 * v124) = *(_WORD *)(v129 + 2 * v124);\n            *(_WORD *)(v130 + 2 * v125) = *(_WORD *)(v129 + 2 * v125);\n            *(_WORD *)(v130 + 2 * v126) = *(_WORD *)(v129 + 2 * v126);\n            result = *(unsigned __int16 *)(v129 + 2 * v127);\n            *(_WORD *)(v130 + 2 * v127) = result;\n            v128 += 8LL;\n          }\n          while ( v128 );\n        }\n        else if ( v11 )\n        {\n          v152 = 4 * v5;\n          v153 = 4 * v5 | 3;\n          v199 = v65 | 3;\n          v213 = 4 * v5 - 1LL;\n          v154 = &v258;\n          v155 = 2LL * v14 + 6;\n          v156 = v182;\n          v206 = v153;\n          do\n          {\n            v157 = 4 * (signed int)v86;\n            v233 = v157 + 1;\n            v227 = v157 + 2;\n            v240 = 4 * (signed int)v86;\n            v220 = v157 + 3;\n            v158 = 0LL;\n            do\n            {\n              v159 = *(_QWORD *)(v156 + 8 * v118);\n              v160 = v86;\n              sub_412EE0(\n                v159,\n                v86,\n                (unsigned int)(v152 + v158),\n                (unsigned int)v154[v158 - 16],\n                v154[v158],\n                *((_QWORD **)off_49F6E8 + 4));\n              v86 = v160;\n              v156 = v182;\n              v161 = *((_QWORD *)off_49F6E8 + 4);\n              v162 = *(_WORD **)v161;\n              v163 = v155 + *(_QWORD *)(v188 + 8 * v240);\n              *(_WORD *)(v163 + 8 * v158 - 6) = **(_WORD **)v161;\n              *(_WORD *)(v163 + 8 * v158 - 4) = v162[1];\n              *(_WORD *)(v163 + 8 * v158 - 2) = v162[2];\n              *(_WORD *)(v163 + 8 * v158) = v162[3];\n              v164 = *(_WORD **)(v161 + 8);\n              v165 = v155 + *(_QWORD *)(v188 + 8 * v233);\n              *(_WORD *)(v165 + 8 * v158 - 6) = *v164;\n              *(_WORD *)(v165 + 8 * v158 - 4) = v164[1];\n              *(_WORD *)(v165 + 8 * v158 - 2) = v164[2];\n              *(_WORD *)(v165 + 8 * v158) = v164[3];\n              v166 = *(_WORD **)(v161 + 16);\n              v167 = v155 + *(_QWORD *)(v188 + 8 * v227);\n              *(_WORD *)(v167 + 8 * v158 - 6) = *v166;\n              *(_WORD *)(v167 + 8 * v158 - 4) = v166[1];\n              *(_WORD *)(v167 + 8 * v158 - 2) = v166[2];\n              *(_WORD *)(v167 + 8 * v158) = v166[3];\n              v168 = *(_WORD **)(v161 + 24);\n              v169 = v155 + *(_QWORD *)(v188 + 8 * v220);\n              *(_WORD *)(v169 + 8 * v158 - 6) = *v168;\n              *(_WORD *)(v169 + 8 * v158 - 4) = v168[1];\n              *(_WORD *)(v169 + 8 * v158 - 2) = v168[2];\n              *(_WORD *)(v169 + 8 * v158) = v168[3];\n              result = v158++ + v213 + 1;\n            }\n            while ( result < v206 );\n            v154 += 4;\n            v151 = __OFSUB__(v86, v199);\n            v150 = v86++ - v199 < 0;\n          }\n          while ( v150 ^ v151 );\n        }\n        else\n        {\n          v170 = v14;\n          v241 = v14 | 1LL;\n          v234 = v14 | 2LL;\n          v228 = v14 | 3LL;\n          v221 = v14 | 4LL;\n          v214 = v14 | 5LL;\n          v207 = v14 | 6LL;\n          v200 = v14 | 7LL;\n          v171 = v14 | 8LL;\n          v172 = v14 | 9LL;\n          v187 = *(_QWORD *)(v182 + 8LL * v6) + 8LL * (signed int)result;\n          v173 = v14 | 0xALL;\n          v174 = v14 | 0xBLL;\n          v193 = v188 + 8LL * (signed int)result;\n          v175 = v14 | 0xCLL;\n          v176 = v14 | 0xDLL;\n          v177 = v14 | 0xELL;\n          v178 = v170 | 0xF;\n          v179 = -128LL;\n          do\n          {\n            v180 = *(_QWORD *)(v187 + v179 + 128);\n            v181 = *(_QWORD *)(v193 + v179 + 128);\n            *(_WORD *)(v181 + 2 * v170) = *(_WORD *)(v180 + 2 * v170);\n            *(_WORD *)(v181 + 2 * v241) = *(_WORD *)(v180 + 2 * v241);\n            *(_WORD *)(v181 + 2 * v234) = *(_WORD *)(v180 + 2 * v234);\n            *(_WORD *)(v181 + 2 * v228) = *(_WORD *)(v180 + 2 * v228);\n            *(_WORD *)(v181 + 2 * v221) = *(_WORD *)(v180 + 2 * v221);\n            *(_WORD *)(v181 + 2 * v214) = *(_WORD *)(v180 + 2 * v214);\n            *(_WORD *)(v181 + 2 * v207) = *(_WORD *)(v180 + 2 * v207);\n            *(_WORD *)(v181 + 2 * v200) = *(_WORD *)(v180 + 2 * v200);\n            *(_WORD *)(v181 + 2 * v171) = *(_WORD *)(v180 + 2 * v171);\n            *(_WORD *)(v181 + 2 * v172) = *(_WORD *)(v180 + 2 * v172);\n            *(_WORD *)(v181 + 2 * v173) = *(_WORD *)(v180 + 2 * v173);\n            *(_WORD *)(v181 + 2 * v174) = *(_WORD *)(v180 + 2 * v174);\n            *(_WORD *)(v181 + 2 * v175) = *(_WORD *)(v180 + 2 * v175);\n            *(_WORD *)(v181 + 2 * v176) = *(_WORD *)(v180 + 2 * v176);\n            *(_WORD *)(v181 + 2 * v177) = *(_WORD *)(v180 + 2 * v177);\n            result = *(unsigned __int16 *)(v180 + 2 * v178);\n            *(_WORD *)(v181 + 2 * v178) = result;\n            v179 += 8LL;\n          }\n          while ( v179 );\n        }\n      }\n      break;\n    default:\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414640L", 
            "funcEndAddr": "0x41585cL", 
            "funcName": "sub_414640"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_415860(__int64 a1, __int64 a2)\n{\n  signed __int64 result; // rax\n  __int64 v3; // r13\n  __int64 v4; // r8\n  int v5; // ebp\n  signed int v6; // esi\n  __int64 v7; // rdi\n  int v8; // edx\n  unsigned int v9; // er12\n  unsigned int v10; // ecx\n  unsigned int v11; // eax\n  bool v12; // cf\n  bool v13; // zf\n  _DWORD *v14; // r14\n  _QWORD *v15; // rcx\n  __int64 v16; // rsi\n  char *v17; // rbx\n  _DWORD *v18; // rcx\n  unsigned int v19; // ebx\n  int v20; // er15\n  unsigned int v21; // er14\n  int v22; // ebp\n  _DWORD *v23; // r9\n  char *v24; // r8\n  signed __int64 v25; // rsi\n  int v26; // ebx\n  signed __int64 v27; // rdi\n  _DWORD *v28; // rdx\n  int v29; // ebp\n  __int128 v30; // xmm0\n  __int128 v31; // xmm1\n  int v32; // ebp\n  bool v33; // sf\n  unsigned __int8 v34; // of\n\n  result = (signed __int64)dest;\n  v3 = *((unsigned int *)dest + 309);\n  if ( *((_DWORD *)dest + 330) == 1 )\n  {\n    if ( (signed int)v3 > 0 )\n    {\n      v4 = (signed int)v3 / 2;\n      v5 = -2 * ((signed int)v3 / 2);\n      result = (signed __int64)qword_4F9E70 + 16;\n      v6 = 1;\n      v7 = 0LL;\n      do\n      {\n        *(_DWORD *)(result - 16) = 1;\n        v8 = v5;\n        if ( v7 < v4 )\n          v8 = v6;\n        *(_DWORD *)(result - 12) = v8;\n        *(_DWORD *)result = v7 < v4;\n        *(_DWORD *)(result - 8) = 2 * (v7++ < v4);\n        v5 += 2;\n        v6 += 2;\n        result += 24LL;\n      }\n      while ( v3 != v7 );\n    }\n    return result;\n  }\n  v9 = 0;\n  if ( (signed int)v3 >= 3 )\n  {\n    v9 = 0;\n    v10 = *((_DWORD *)dest + 309);\n    v11 = *((_DWORD *)dest + 309);\n    do\n    {\n      v11 >>= 1;\n      ++v9;\n      v12 = v10 < 5;\n      v13 = v10 == 5;\n      v10 = v11;\n    }\n    while ( !v12 && !v13 );\n  }\n  v14 = malloc(4LL * v9 + 4);\n  result = (unsigned int)v3;\n  if ( !v14 )\n    sub_43EF40((unsigned int)v3, (__int64)\"create_pyramid:curGOPLeveldist\");\n  if ( (signed int)v3 > 0 )\n  {\n    v15 = qword_4F9E70;\n    if ( (_DWORD)v3 == 1 )\n    {\n      v16 = 0LL;\nLABEL_20:\n      v15[3 * v16] = 1LL;\n      goto LABEL_21;\n    }\n    v17 = (char *)qword_4F9E70 + 28;\n    v16 = 0LL;\n    do\n    {\n      *(_QWORD *)(v17 - 28) = 1LL;\n      *(_QWORD *)(v17 - 4) = 1LL;\n      v16 += 2LL;\n      v17 += 48;\n    }\n    while ( (signed int)v3 - (unsigned __int64)(v3 & 1) != v16 );\n    if ( v3 & 1 )\n      goto LABEL_20;\n  }\nLABEL_21:\n  if ( (signed int)v3 < 3 )\n  {\n    v19 = v3;\n  }\n  else\n  {\n    v18 = v14;\n    v19 = v3;\n    do\n    {\n      v19 >>= 1;\n      *v18 = v19 + (v19 & 1);\n      ++v18;\n      v12 = (unsigned int)v3 < 5;\n      v13 = (_DWORD)v3 == 5;\n      LODWORD(v3) = v19;\n    }\n    while ( !v12 && !v13 );\n  }\n  v14[v9] = v19 + (signed int)v19 % 2;\n  if ( (signed int)v19 > 0 )\n  {\n    v20 = *v14;\n    v21 = *v14 - 1;\n    v22 = v20 - 1;\n    do\n    {\n      sub_415AB0(v9, v22, v21, (__int64)qword_4F9E70);\n      v22 += v20;\n      --v19;\n    }\n    while ( v19 );\n    result = *((unsigned int *)dest + 309);\n  }\n  if ( (signed int)result > 0 )\n  {\n    v23 = qword_4F9E70;\n    result = (unsigned int)result;\n    v24 = (char *)qword_4F9E70 + 44;\n    v25 = (unsigned int)result - 1LL;\n    do\n    {\n      if ( result < 2 )\n        break;\n      v26 = v23[4];\n      v27 = v25;\n      v28 = v24;\n      do\n      {\n        v29 = *(v28 - 1);\n        if ( v29 <= v26 )\n        {\n          v26 = *(v28 - 1);\n        }\n        else\n        {\n          v30 = *(_OWORD *)(v28 - 5);\n          *(v28 - 7) = v29;\n          *(v28 - 1) = v26;\n          v31 = *(_OWORD *)(v28 - 11);\n          *(_OWORD *)(v28 - 11) = v30;\n          *(_OWORD *)(v28 - 5) = v31;\n          v32 = *(v28 - 6);\n          *(v28 - 6) = *v28;\n          *v28 = v32;\n        }\n        v28 += 6;\n        --v27;\n      }\n      while ( v27 );\n      --v25;\n      v34 = __OFSUB__(result, 1LL);\n      v13 = result == 1;\n      v33 = result-- - 1 < 0;\n    }\n    while ( !((unsigned __int8)(v33 ^ v34) | v13) );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415860L", 
            "funcEndAddr": "0x415aa9L", 
            "funcName": "sub_415860"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_415AB0(int a1, int a2, unsigned int a3, __int64 a4)\n{\n  __int64 v4; // r14\n  unsigned int v5; // ebx\n  int v6; // er15\n  int v7; // ebp\n  char result; // al\n  signed __int64 v9; // rcx\n  bool v10; // sf\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  for ( result = a2 >= 0; v7; --v7 )\n  {\n    if ( result & 1 && *((_DWORD *)dest + 309) > v6 )\n    {\n      v9 = 3LL * v6;\n      *(_DWORD *)(v4 + 8 * v9) = 1;\n      *(_DWORD *)(v4 + 8 * v9 + 4) = v6;\n      *(_DWORD *)(v4 + 8 * v9 + 16) = v7;\n      *(_DWORD *)(v4 + 8 * v9 + 8) = 2;\n    }\n    v5 = (signed int)(v5 + ((v5 + 1) >> 31) + 1) >> 1;\n    sub_415AB0((unsigned int)(v7 - 1), v6 - v5, v5, v4);\n    v10 = (signed int)(v5 + v6) < 0;\n    v6 += v5;\n    result = !v10;\n  }\n  if ( result )\n  {\n    result = (char)dest;\n    if ( *((_DWORD *)dest + 309) > v6 )\n    {\n      result = 3 * v6;\n      if ( !*(_DWORD *)(v4 + 24LL * v6 + 4) )\n      {\n        *(_DWORD *)(v4 + 24LL * v6) = 1;\n        *(_DWORD *)(v4 + 24LL * v6 + 4) = v6;\n        *(_DWORD *)(v4 + 24LL * v6 + 16) = 0;\n        *(_DWORD *)(v4 + 24LL * v6 + 8) = 0;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415ab0L", 
            "funcEndAddr": "0x415b84L", 
            "funcName": "sub_415AB0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_415B90(__int64 a1@<rax>)\n{\n  _DWORD *v1; // rcx\n  size_t v2; // rdi\n  __int64 v3; // [rsp-8h] [rbp-8h]\n\n  v3 = a1;\n  v1 = (char *)dest + 1236;\n  if ( *((_DWORD *)dest + 330) == 3 )\n    v1 = (char *)dest + 20;\n  v2 = 10LL;\n  if ( *v1 > 9 )\n    v2 = (unsigned int)*v1;\n  qword_4F9E70 = calloc(v2, 0x18uLL);\n  if ( !qword_4F9E70 )\n    sub_43EF40(v3, (__int64)\"init_gop_structure: gop_structure\");\n}\n", 
            "funcStartAddr": "0x415b90L", 
            "funcEndAddr": "0x415bdeL", 
            "funcName": "sub_415B90"
        }, 
        {
            "decompiledFuncCode": "void sub_415BE0()\n{\n  if ( qword_4F9E70 )\n    free(qword_4F9E70);\n}\n", 
            "funcStartAddr": "0x415be0L", 
            "funcEndAddr": "0x415bf2L", 
            "funcName": "sub_415BE0"
        }, 
        {
            "decompiledFuncCode": "void *sub_415C00()\n{\n  int v0; // er14\n  signed __int64 v1; // r12\n  __int64 v2; // r13\n  signed int v3; // ebx\n  signed int v4; // ebp\n  int v5; // er15\n  const char *v6; // rdx\n  unsigned __int64 v7; // rax\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rcx\n  int v10; // eax\n  int v11; // ecx\n  signed __int64 v12; // r12\n  __int64 v13; // rbx\n  __int64 v14; // rcx\n  const unsigned __int16 *v15; // rcx\n  __int64 v16; // rax\n  const unsigned __int16 **v17; // rax\n  unsigned int v18; // eax\n  void *result; // rax\n  signed int v20; // [rsp+4h] [rbp-44h]\n  signed int v21; // [rsp+8h] [rbp-40h]\n  int v22; // [rsp+Ch] [rbp-3Ch]\n  int v23; // [rsp+10h] [rbp-38h]\n  unsigned int v24; // [rsp+14h] [rbp-34h]\n\n  v0 = strlen((const char *)dest + 1324);\n  if ( v0 <= 0 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"ExplicitPyramidFormat is empty. Please check configuration file.\");\n    error((__int64)byte_4F8250, 400);\n  }\n  v23 = v0 - 2;\n  v1 = 4294967297LL;\n  LODWORD(v2) = 0;\n  v21 = 0;\n  v20 = 0;\n  v3 = 0;\n  v4 = 0;\n  v5 = 0;\n  do\n  {\n    v2 = (unsigned int)v2;\n    if ( v4 )\n    {\n      if ( v3 )\n      {\n        if ( v3 != 1 )\n          goto LABEL_64;\n        if ( !v20 )\n        {\n          v15 = *__ctype_b_loc();\n          v16 = *((char *)dest + v5 + 1324);\n          if ( v15[v16] & 0x800 )\n          {\n            v20 = 0;\nLABEL_53:\n            v3 = 1;\n            goto LABEL_64;\n          }\n          if ( (signed int)v16 > 100 )\n          {\n            if ( (_DWORD)v16 == 114 )\n              goto LABEL_62;\n            if ( (_DWORD)v16 != 101 )\n            {\nLABEL_5:\n              v6 = \"Reference_IDC invalid in ExplicitPyramidFormat param. Please check configuration file.\";\nLABEL_14:\n              snprintf(byte_4F8250, 0x12CuLL, v6);\n              error((__int64)byte_4F8250, 400);\n            }\n          }\n          else if ( (_DWORD)v16 != 69 )\n          {\n            if ( (_DWORD)v16 != 82 )\n              goto LABEL_5;\nLABEL_62:\n            *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2 + 2) = 2;\nLABEL_63:\n            v3 = 1;\n            v20 = 1;\n            goto LABEL_64;\n          }\n          *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2 + 2) = 0;\n          goto LABEL_63;\n        }\n        if ( v20 != 1 || v21 )\n        {\n          if ( v21 != 1 || v20 != 1 )\n            goto LABEL_53;\n          v17 = __ctype_b_loc();\n          if ( v5 >= v23 || (*v17)[*((char *)dest + v5 + 1324)] & 0x800 )\n          {\n            v3 = 1;\n            v21 = 1;\n          }\n          else\n          {\n            --v5;\n            LODWORD(v2) = v2 + 1;\n            v4 = 0;\n            if ( (signed int)v2 >= *((_DWORD *)dest + 5) )\n            {\n              snprintf(\n                byte_4F8250,\n                0x12CuLL,\n                \"Total number of frames in Enhancement GOP need to be fewer or equal to FrameSkip parameter.\");\n              error((__int64)byte_4F8250, 400);\n            }\n            v3 = 0;\n            v20 = 0;\n            v21 = 0;\n          }\n        }\n        else\n        {\n          if ( !((*__ctype_b_loc())[*((char *)dest + v5 + 1324)] & 0x800) )\n          {\n            v6 = \"Reference_IDC needs to be followed by QP. Please check configuration file.\";\n            goto LABEL_14;\n          }\n          __isoc99_sscanf((char *)dest + v5 + 1324, \"%d\", &v24);\n          v18 = v24;\n          *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2 + 3) = v24;\n          if ( v18 > 0x33 )\n          {\n            snprintf(byte_4F8250, 0x12CuLL, \"Invalid QP value. Please check configuration file.\");\n            error((__int64)byte_4F8250, 400);\n          }\n          v3 = 1;\n          v20 = 1;\n          v21 = 1;\n        }\n      }\n      else\n      {\n        if ( !((*__ctype_b_loc())[*((char *)dest + v5 + 1324)] & 0x800) )\n        {\n          snprintf(\n            byte_4F8250,\n            0x12CuLL,\n            \"Slice Type needs to be followed by Display Order. Please check configuration file.\");\n          error((__int64)byte_4F8250, 400);\n        }\n        __isoc99_sscanf((char *)dest + v5 + 1324, \"%d\", &v22);\n        v10 = v22;\n        *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2 + 1) = v22;\n        v11 = *((_DWORD *)dest + 5);\n        if ( v10 < 0 || v10 >= v11 )\n        {\n          snprintf(\n            byte_4F8250,\n            0x12CuLL,\n            \"Invalid Frame Order value. Frame position needs to be in [0,%d] range.\",\n            (unsigned int)(v11 - 1));\n          error((__int64)byte_4F8250, 400);\n        }\n        if ( (signed int)v2 > 0 )\n        {\n          v12 = 4LL;\n          v13 = 0LL;\n          do\n          {\n            v14 = *(unsigned int *)((char *)qword_4F9E70 + v12);\n            if ( (_DWORD)v14 == v22 )\n            {\n              snprintf(\n                byte_4F8250,\n                0x12CuLL,\n                \"Frame Order value %d in frame %d already used for enhancement frame %d.\",\n                v14,\n                (unsigned int)v2,\n                (unsigned int)v13);\n              error((__int64)byte_4F8250, 400);\n            }\n            ++v13;\n            v12 += 24LL;\n          }\n          while ( v2 != v13 );\n        }\n        v3 = 1;\n        v1 = 4294967297LL;\n      }\n    }\n    else\n    {\n      v7 = (unsigned int)(*((char *)dest + v5 + 1324) - 66);\n      if ( (unsigned int)v7 > 0x2E )\n        goto LABEL_50;\n      if ( _bittest64(&v1, v7) )\n      {\n        *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2) = 1;\n        v4 = 1;\n      }\n      else\n      {\n        v8 = 549755814016LL;\n        if ( _bittest64(&v8, v7) )\n        {\n          *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2) = 2;\n          v4 = 1;\n        }\n        else\n        {\n          v9 = 70368744194048LL;\n          if ( !_bittest64(&v9, v7) )\n          {\nLABEL_50:\n            snprintf(\n              byte_4F8250,\n              0x12CuLL,\n              \"Slice Type invalid in ExplicitPyramidFormat param. Please check configuration file.\");\n            error((__int64)byte_4F8250, 400);\n          }\n          *((_DWORD *)qword_4F9E70 + 6 * (signed int)v2) = 0;\n          v4 = 1;\n        }\n      }\n    }\nLABEL_64:\n    ++v5;\n  }\n  while ( v5 < v0 );\n  result = dest;\n  *((_DWORD *)dest + 309) = v2 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x415c00L", 
            "funcEndAddr": "0x41613eL", 
            "funcName": "sub_415C00"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_416140()\n{\n  _DWORD *v0; // r9\n  __int64 result; // rax\n  double *v2; // rsi\n  int v3; // er8\n  int v4; // ecx\n  int v5; // ebx\n  _DWORD *v6; // r8\n  int v7; // ebp\n  double v8; // xmm0_8\n  int v9; // edi\n  int v10; // ecx\n  int v11; // eax\n  int v12; // ecx\n  int v13; // edx\n  int v14; // ecx\n  int v15; // ecx\n  signed int v16; // ecx\n  int v17; // ebx\n  int v18; // ecx\n  double v19; // xmm0_8\n  int v20; // edi\n  int v21; // edx\n  int v22; // eax\n  int v23; // ecx\n  int v24; // eax\n  signed int v25; // ecx\n\n  v0 = dest;\n  result = *((unsigned int *)dest + 309);\n  v2 = (double *)off_49F6D0;\n  if ( (_DWORD)result && *(_DWORD *)off_49F6D0 > dword_49FB88 )\n  {\n    *((_DWORD *)off_49F6D0 + 6) = 1;\n    *((_DWORD *)v2 + 18096) = v0[728] != 0;\n    v3 = v0[329];\n    v4 = v0[330];\n    if ( v3 )\n    {\n      *((_DWORD *)v2 + 18124) = 0;\n      *((_DWORD *)v2 + 17977) = 1;\n      if ( v4 )\n      {\n        if ( (signed int)result <= 0 )\n          goto LABEL_29;\n        goto LABEL_9;\n      }\n    }\n    else\n    {\n      if ( v4 )\n      {\n        *((_DWORD *)v2 + 18124) = 0;\n        *((_DWORD *)v2 + 17977) = 1;\n        if ( (signed int)result <= 0 )\n        {\nLABEL_29:\n          *((_DWORD *)v2 + 17977) = 0;\n          goto LABEL_52;\n        }\nLABEL_9:\n        v5 = 1;\n        do\n        {\n          *((_DWORD *)v2 + 18124) = 0;\n          v6 = qword_4F9E70;\n          *((_DWORD *)v2 + 6) = *((_DWORD *)qword_4F9E70 + 6 * (v5 - 1));\n          if ( v6[6 * (v5 - 1) + 2] == 2 )\n          {\n            *((_DWORD *)v2 + 18124) = 1;\n            *((_DWORD *)v2 + 18116) = (*((_DWORD *)v2 + 18116) + 1) & ((1 << (dword_4FA0E4 + 4)) - 1);\n          }\n          v7 = v0[5] + 1;\n          v2[8987] = (double)v7 / ((double)(signed int)result + 1.0);\n          v8 = 1.0;\n          if ( v0[330] != 3 )\n            v8 = (double)v7 / ((double)(signed int)result + 1.0);\n          v2[8987] = v8;\n          v9 = v0[306];\n          if ( v9 && v0[307] )\n          {\n            v10 = *(_DWORD *)v2 - dword_49FB88;\n            v11 = 2 * (v7 * (v10 % v9 - 1) + (signed int)((double)(v6[6 * (v5 - 1) + 1] + 1) * v8));\n            *((_DWORD *)v2 + 18112) = v11;\n          }\n          else\n          {\n            v12 = *(_DWORD *)v2;\n            v13 = dword_49FB88;\n            v11 = 2 * (v7 * (*(_DWORD *)v2 - 1 - dword_49FB88) + (signed int)((double)(v6[6 * (v5 - 1) + 1] + 1) * v8));\n            *((_DWORD *)v2 + 18112) = v11;\n            v10 = v12 - v13;\n          }\n          if ( v5 == 1 )\n            v14 = dword_49FB8C + v7 * v10;\n          else\n            v14 = dword_49FB8C + v7 * (v10 - 1) + (signed int)((double)(v6[6 * (v5 - 2) + 1] + 1) * (v8 + v8));\n          *((_DWORD *)v2 + 18109) = v11 - 2 * v14;\n          if ( v0[720] || (v15 = v11, v0[721]) )\n            v15 = v11 | 1;\n          *((_DWORD *)v2 + 18113) = v15;\n          if ( v11 <= v15 )\n            v15 = v11;\n          *((_DWORD *)v2 + 18114) = v15;\n          *((_DWORD *)v2 + 18110) = 0;\n          sub_41D500();\n          v0 = dest;\n          if ( *((_DWORD *)dest + 807) )\n          {\n            sub_426CC0();\n            v0 = dest;\n          }\n          v2 = (double *)off_49F6D0;\n          v16 = *((_DWORD *)off_49F6D0 + 17977);\n          v5 = v16 + 1;\n          *((_DWORD *)off_49F6D0 + 17977) = v16 + 1;\n          result = (unsigned int)v0[309];\n        }\n        while ( v16 < (signed int)result );\n        goto LABEL_29;\n      }\n      *((_DWORD *)v2 + 18116) = (*((_DWORD *)v2 + 18116) + 1) & ((1 << (dword_4FA0E4 + 4)) - 1);\n      *((_DWORD *)v2 + 18124) = 0;\n      *((_DWORD *)v2 + 17977) = 1;\n    }\n    if ( (signed int)result > 0 )\n    {\n      v17 = 1;\n      while ( 1 )\n      {\n        *((_DWORD *)v2 + 18124) = 0;\n        if ( v3 == 1 )\n        {\n          *((_DWORD *)v2 + 18124) = 1;\n          *((_DWORD *)v2 + 18116) = (*((_DWORD *)v2 + 18116) + 1) & ((1 << (dword_4FA0E4 + 4)) - 1);\n        }\n        v18 = v0[5] + 1;\n        v2[8987] = (double)v18 / ((double)(signed int)result + 1.0);\n        v19 = 1.0;\n        if ( v0[330] != 3 )\n          v19 = (double)v18 / ((double)(signed int)result + 1.0);\n        v2[8987] = v19;\n        v20 = v0[306];\n        if ( v20 && v0[307] )\n          v21 = (*(_DWORD *)v2 - dword_49FB88) % v20 - 1;\n        else\n          v21 = *(_DWORD *)v2 - 1 - dword_49FB88;\n        v22 = 2 * (v18 * v21 + (signed int)(v19 * (double)v17));\n        *((_DWORD *)v2 + 18112) = v22;\n        if ( v0[720] || (v23 = 2 * (v18 * v21 + (signed int)(v19 * (double)v17)), v0[721]) )\n          v23 = v22 | 1;\n        *((_DWORD *)v2 + 18113) = v23;\n        if ( v22 <= v23 )\n          v23 = v22;\n        *((_DWORD *)v2 + 18114) = v23;\n        v24 = 2 * v17 - 2;\n        if ( v3 )\n          v24 = -2;\n        *((_DWORD *)v2 + 18109) = v24;\n        *((_DWORD *)v2 + 18110) = 0;\n        sub_41D500();\n        v0 = dest;\n        if ( *((_DWORD *)dest + 807) )\n        {\n          sub_426CC0();\n          v0 = dest;\n        }\n        v2 = (double *)off_49F6D0;\n        v25 = *((_DWORD *)off_49F6D0 + 17977);\n        v17 = v25 + 1;\n        *((_DWORD *)off_49F6D0 + 17977) = v25 + 1;\n        result = (unsigned int)v0[309];\n        if ( v25 >= (signed int)result )\n          break;\n        v3 = v0[329];\n      }\n    }\n  }\nLABEL_52:\n  *((_DWORD *)v2 + 17977) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x416140L", 
            "funcEndAddr": "0x4165d9L", 
            "funcName": "sub_416140"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4165E0(int a1)\n{\n  int v1; // er14\n  unsigned __int64 result; // rax\n  signed int v3; // esi\n  unsigned __int64 v4; // rcx\n  int v5; // er15\n  __int64 v6; // rdi\n  __int64 v7; // rdi\n  _QWORD *v8; // rax\n  _QWORD *v9; // rbx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbp\n\n  v1 = a1;\n  result = (unsigned __int64)off_49F6D0;\n  if ( !*((_QWORD *)off_49F6D0 + 9064) )\n  {\n    result = (unsigned int)(dword_4F99F4 + HIDWORD(qword_4F99EC));\n    if ( dword_4F99F4 + HIDWORD(qword_4F99EC) )\n    {\n      if ( (_DWORD)qword_4F99EC )\n      {\n        v3 = 0x7FFFFFFF;\n        v4 = 0LL;\n        v5 = 0;\n        do\n        {\n          v6 = *((_QWORD *)qword_4F99D0 + v4);\n          if ( *(_DWORD *)(v6 + 4) && !*(_DWORD *)(v6 + 8) && *(_DWORD *)(v6 + 36) < v3 )\n          {\n            v7 = *(_QWORD *)(v6 + 40);\n            v3 = *(_DWORD *)(v7 + 4);\n            v5 = *(_DWORD *)(v7 + 6364);\n          }\n          ++v4;\n        }\n        while ( v4 < (unsigned int)qword_4F99EC );\n      }\n      else\n      {\n        v5 = 0;\n      }\n      v8 = calloc(1uLL, 0x20uLL);\n      v9 = v8;\n      if ( !v8 )\n        sub_43EF40(0LL, (__int64)\"poc_based_ref_management: tmp_drpm\");\n      v8[3] = 0LL;\n      *(_DWORD *)v8 = 0;\n      v10 = calloc(1uLL, 0x20uLL);\n      v11 = v10;\n      if ( !v10 )\n        sub_43EF40(0LL, (__int64)\"poc_based_ref_management: tmp_drpm2\");\n      v10[3] = v9;\n      *(_DWORD *)v10 = 1;\n      *((_DWORD *)v10 + 1) = v1 - 1 - v5;\n      result = (unsigned __int64)off_49F6D0;\n      *((_QWORD *)off_49F6D0 + 9064) = v11;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4165e0L", 
            "funcEndAddr": "0x4166edL", 
            "funcName": "sub_4165E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4166F0()\n{\n  __int64 v0; // rdi\n  __int64 result; // rax\n\n  xmmword_4F9B04 = xmmword_489690;\n  qword_4F9B14 = 4392630932028637839LL;\n  xmmword_4F9B24 = xmmword_4896A0;\n  dword_4F9B1C = 1025758986;\n  qword_4F9B34 = 4458923919762899599LL;\n  dword_4F9B3C = 1041865114;\n  v0 = *((signed int *)dest + 4);\n  result = (unsigned int)(((1 << (((unsigned __int64)(715827883 * v0) >> 32) + (715827883 * v0 < 0) + 15))\n                         - (1 << (((unsigned __int64)(715827883 * v0) >> 32) + (715827883 * v0 < 0) + 15))\n                         / (3 * (*((_DWORD *)off_49F6D0 + 6) != 2) + 3))\n                        / dword_4906F0[16\n                                     * (signed __int64)(signed int)(v0\n                                                                  - 6\n                                                                  * (((unsigned __int64)(715827883 * v0) >> 32)\n                                                                   + ((unsigned __int64)(715827883 * v0) >> 63)))]);\n  *(float *)&dword_4FA078 = (float)(signed int)result / 22.440001;\n  *(float *)&dword_4F9B5C = *(float *)&dword_4FA078 * 256.0;\n  *(float *)&dword_4F9B58 = (float)(*(float *)&dword_4FA078 * 256.0) * 4.0;\n  *(float *)&dword_4F9B54 = (float)(*(float *)&dword_4FA078 * 256.0) * 4.0;\n  *(float *)&dword_4F9B50 = (float)((float)(*(float *)&dword_4FA078 * 256.0) * 4.0) * 4.0;\n  *(float *)&dword_4F9B4C = *(float *)&dword_4F9B50 * 4.0;\n  *(float *)&dword_4F9B48 = *(float *)&dword_4F9B50 * 4.0;\n  *(float *)&dword_4F9B44 = (float)(*(float *)&dword_4F9B50 * 4.0) * 4.0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4166f0L", 
            "funcEndAddr": "0x416813L", 
            "funcName": "sub_4166F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4168F0(_QWORD *a1)\n{\n  void *v1; // rax\n  signed int *v2; // rax\n  signed int v3; // esi\n  signed int v4; // ecx\n  signed __int64 v5; // r15\n  void *v6; // rax\n  signed __int64 v7; // r12\n  void *v8; // rax\n  signed __int64 v9; // rbx\n  void *v10; // rax\n  void *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  void *v17; // rax\n  void *v18; // rax\n  void *v19; // rax\n  int v20; // edx\n\n  v1 = calloc(*((_DWORD *)off_49F6D0 + 13) / 4, 8uLL);\n  *a1 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n  v2 = (signed int *)off_49F6D0;\n  v3 = *((_DWORD *)off_49F6D0 + 13);\n  v4 = *((_DWORD *)off_49F6D0 + 15);\n  if ( v3 < 4 )\n  {\n    v20 = v3 / 4;\n  }\n  else\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = calloc(v4 / 4, 8uLL);\n      *(_QWORD *)(*a1 + 8 * v5) = v6;\n      if ( !v6 )\n        sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n      v2 = (signed int *)off_49F6D0;\n      v4 = *((_DWORD *)off_49F6D0 + 15);\n      if ( v4 >= 4 )\n      {\n        v7 = 0LL;\n        do\n        {\n          v8 = calloc(v2[9], 8uLL);\n          *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) = v8;\n          if ( !v8 )\n            sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n          v2 = (signed int *)off_49F6D0;\n          if ( *((_DWORD *)off_49F6D0 + 9) > 0 )\n          {\n            v9 = 0LL;\n            do\n            {\n              v10 = calloc(9uLL, 8uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) = v10;\n              if ( !v10 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v11 = calloc(3uLL, 4uLL);\n              **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) = v11;\n              if ( !v11 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v12 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 8LL) = v12;\n              if ( !v12 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v13 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 16LL) = v13;\n              if ( !v13 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v14 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 24LL) = v14;\n              if ( !v14 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v15 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 32LL) = v15;\n              if ( !v15 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v16 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 40LL) = v16;\n              if ( !v16 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v17 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 48LL) = v17;\n              if ( !v17 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v18 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 56LL) = v18;\n              if ( !v18 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v19 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 64LL) = v19;\n              if ( !v19 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              ++v9;\n              v2 = (signed int *)off_49F6D0;\n            }\n            while ( v9 < *((signed int *)off_49F6D0 + 9) );\n          }\n          ++v7;\n          v4 = v2[15];\n        }\n        while ( v7 < v4 / 4 );\n      }\n      ++v5;\n      v20 = v2[13] / 4;\n    }\n    while ( v5 < v20 );\n  }\n  return (unsigned int)(108 * v2[9] * (v4 * v20 / 4));\n}\n", 
            "funcStartAddr": "0x4168f0L", 
            "funcEndAddr": "0x416c4fL", 
            "funcName": "sub_4168F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416C50(_QWORD *a1)\n{\n  void *v1; // rax\n  signed int *v2; // rax\n  signed int v3; // esi\n  signed int v4; // ecx\n  signed __int64 v5; // r15\n  void *v6; // rax\n  signed __int64 v7; // r12\n  void *v8; // rax\n  signed __int64 v9; // rbx\n  void *v10; // rax\n  void *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  void *v17; // rax\n  void *v18; // rax\n  void *v19; // rax\n  int v20; // edx\n\n  v1 = calloc(*((_DWORD *)off_49F6D0 + 13) / 4, 8uLL);\n  *a1 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n  v2 = (signed int *)off_49F6D0;\n  v3 = *((_DWORD *)off_49F6D0 + 13);\n  v4 = *((_DWORD *)off_49F6D0 + 15);\n  if ( v3 < 4 )\n  {\n    v20 = v3 / 4;\n  }\n  else\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = calloc(v4 / 4, 8uLL);\n      *(_QWORD *)(*a1 + 8 * v5) = v6;\n      if ( !v6 )\n        sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n      v2 = (signed int *)off_49F6D0;\n      v4 = *((_DWORD *)off_49F6D0 + 15);\n      if ( v4 >= 4 )\n      {\n        v7 = 0LL;\n        do\n        {\n          v8 = calloc(v2[9], 8uLL);\n          *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) = v8;\n          if ( !v8 )\n            sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n          v2 = (signed int *)off_49F6D0;\n          if ( *((_DWORD *)off_49F6D0 + 9) > 0 )\n          {\n            v9 = 0LL;\n            do\n            {\n              v10 = calloc(9uLL, 8uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) = v10;\n              if ( !v10 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v11 = calloc(3uLL, 4uLL);\n              **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) = v11;\n              if ( !v11 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v12 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 8LL) = v12;\n              if ( !v12 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v13 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 16LL) = v13;\n              if ( !v13 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v14 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 24LL) = v14;\n              if ( !v14 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v15 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 32LL) = v15;\n              if ( !v15 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v16 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 40LL) = v16;\n              if ( !v16 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v17 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 48LL) = v17;\n              if ( !v17 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v18 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 56LL) = v18;\n              if ( !v18 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              v19 = calloc(3uLL, 4uLL);\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v5) + 8 * v7) + 8 * v9) + 64LL) = v19;\n              if ( !v19 )\n                sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n              ++v9;\n              v2 = (signed int *)off_49F6D0;\n            }\n            while ( v9 < *((signed int *)off_49F6D0 + 9) );\n          }\n          ++v7;\n          v4 = v2[15];\n        }\n        while ( v7 < v4 / 4 );\n      }\n      ++v5;\n      v20 = v2[13] / 4;\n    }\n    while ( v5 < v20 );\n  }\n  return (unsigned int)(108 * v2[9] * (v4 * v20 / 4));\n}\n", 
            "funcStartAddr": "0x416c50L", 
            "funcEndAddr": "0x416fafL", 
            "funcName": "sub_416C50"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_416FB0()\n{\n  int v0; // ebx\n  int v1; // ebp\n  __int64 v2; // rax\n\n  qword_4F9E48 = calloc((*((_DWORD *)off_49F6D0 + 13) >> 4) + 1, 4uLL);\n  if ( !qword_4F9E48 )\n    sub_43EF40(0LL, (__int64)\"get_mem_FME: flag_intra\");\n  v0 = sub_43F410(&qword_4F9D28, 2 * *((_DWORD *)dest + 8) + 1, 2 * *((_DWORD *)dest + 8) + 1);\n  v1 = v0 + (unsigned __int64)sub_4168F0(&qword_4F9DD0);\n  v2 = sub_416C50(&qword_4F9DC8);\n  return v1 + (_DWORD)v2 + (unsigned int)sub_43F2A0(v2, 7, &qword_4F9D68, 7);\n}\n", 
            "funcStartAddr": "0x416fb0L", 
            "funcEndAddr": "0x41703dL", 
            "funcName": "sub_416FB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_417040(void *ptr)\n{\n  _DWORD *v1; // rax\n  signed __int64 v2; // r15\n  signed __int64 v3; // r12\n  signed __int64 v4; // rbx\n\n  v1 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 13) >= 4 )\n  {\n    v2 = 0LL;\n    do\n    {\n      if ( v1[15] >= 4 )\n      {\n        v3 = 0LL;\n        do\n        {\n          if ( v1[9] > 0 )\n          {\n            v4 = 0LL;\n            do\n            {\n              free(**(void ***)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 8LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 16LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 24LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 32LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 40LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 48LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 56LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 64LL));\n              free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4++));\n            }\n            while ( v4 < *((signed int *)off_49F6D0 + 9) );\n          }\n          free(*(void **)(*((_QWORD *)ptr + v2) + 8 * v3++));\n          v1 = off_49F6D0;\n        }\n        while ( v3 < *((_DWORD *)off_49F6D0 + 15) / 4 );\n      }\n      free(*((void **)ptr + v2++));\n      v1 = off_49F6D0;\n    }\n    while ( v2 < *((_DWORD *)off_49F6D0 + 13) / 4 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x417040L", 
            "funcEndAddr": "0x4171dcL", 
            "funcName": "sub_417040"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4171E0(void *ptr)\n{\n  _DWORD *v1; // rax\n  signed __int64 v2; // r15\n  signed __int64 v3; // r12\n  signed __int64 v4; // rbx\n\n  v1 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 13) >= 4 )\n  {\n    v2 = 0LL;\n    do\n    {\n      if ( v1[15] >= 4 )\n      {\n        v3 = 0LL;\n        do\n        {\n          if ( v1[9] > 0 )\n          {\n            v4 = 0LL;\n            do\n            {\n              free(**(void ***)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 8LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 16LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 24LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 32LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 40LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 48LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 56LL));\n              free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4) + 64LL));\n              free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v2) + 8 * v3) + 8 * v4++));\n            }\n            while ( v4 < *((signed int *)off_49F6D0 + 9) );\n          }\n          free(*(void **)(*((_QWORD *)ptr + v2) + 8 * v3++));\n          v1 = off_49F6D0;\n        }\n        while ( v3 < *((_DWORD *)off_49F6D0 + 15) / 4 );\n      }\n      free(*((void **)ptr + v2++));\n      v1 = off_49F6D0;\n    }\n    while ( v2 < *((_DWORD *)off_49F6D0 + 13) / 4 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x4171e0L", 
            "funcEndAddr": "0x41737cL", 
            "funcName": "sub_4171E0"
        }, 
        {
            "decompiledFuncCode": "void sub_417380()\n{\n  sub_43FA90(qword_4F9D28);\n  sub_417040(qword_4F9DD0);\n  sub_4171E0(qword_4F9DC8);\n  sub_43FA50(qword_4F9D68);\n  free(qword_4F9E48);\n}\n", 
            "funcStartAddr": "0x417380L", 
            "funcEndAddr": "0x4173beL", 
            "funcName": "sub_417380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4173C0(__int64 a1, __int64 a2, __int64 (__fastcall *a3)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD), int a4, unsigned int a5, int a6, unsigned int a7, int a8, unsigned int a9, int a10)\n{\n  unsigned int *v10; // rax\n  unsigned int v11; // ebx\n  unsigned int v12; // er15\n  __int64 v13; // r14\n  int v14; // er12\n  __int64 v15; // r13\n  __int64 v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // rsi\n  int v20; // [rsp+8h] [rbp-50h]\n  unsigned int v21; // [rsp+Ch] [rbp-4Ch]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  __int64 (__fastcall *v23)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD); // [rsp+20h] [rbp-38h]\n\n  v20 = a6;\n  v21 = a5;\n  v23 = a3;\n  v22 = a2;\n  v10 = (unsigned int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n  {\n    v11 = *((_DWORD *)off_49F6D0 + 15) / 2;\n  }\n  else\n  {\n    v11 = *((_DWORD *)off_49F6D0 + 15);\n  }\n  v12 = a7;\n  if ( a4 > 0 )\n  {\n    v13 = a4;\n    v14 = a6;\n    v15 = 0LL;\n    while ( 1 )\n    {\n      v16 = v23(v21, a1, (unsigned int)(a10 + v15), a9, v11, v10[13]);\n      if ( v20 > 0 )\n      {\n        v18 = 0LL;\n        do\n        {\n          v17 = *(_QWORD *)(v22 + 8 * v15);\n          v12 += *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v17 + 8 * v18 + 6)\n                 - (unsigned __int64)*(unsigned __int16 *)(v16 + 8 * v18 + 6))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v17 + 8 * v18 + 4)\n                 - (unsigned __int64)*(unsigned __int16 *)(v16 + 8 * v18 + 4))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v17 + 8 * v18 + 2)\n                 - (unsigned __int64)*(unsigned __int16 *)(v16 + 8 * v18 + 2))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v17 + 8 * v18)\n                 - (unsigned __int64)*(unsigned __int16 *)(v16 + 8 * v18));\n          ++v18;\n        }\n        while ( v14 != (_DWORD)v18 );\n      }\n      if ( (signed int)v12 >= a8 )\n        break;\n      if ( ++v15 >= v13 )\n        break;\n      v10 = (unsigned int *)off_49F6D0;\n    }\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x4173c0L", 
            "funcEndAddr": "0x4174f1L", 
            "funcName": "sub_4173C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417500(__int64 a1, unsigned __int16 a2, int a3, __int64 a4, int a5, signed int a6, double a7, __int16 a8, __int16 a9, _WORD *a10, _WORD *a11, signed int a12, int a13)\n{\n  int v13; // er14\n  int v14; // esi\n  int v15; // edi\n  __int64 v16; // rbp\n  signed int v17; // er13\n  int v18; // er12\n  double v19; // xmm0_8\n  __int64 v20; // rbp\n  int v21; // ecx\n  double v22; // xmm0_8\n  void *v23; // rax\n  int v24; // eax\n  float v25; // xmm1_4\n  unsigned int *v26; // rax\n  unsigned int v27; // er15\n  int v28; // er14\n  int v29; // ebx\n  __int64 v30; // r12\n  __int64 v31; // rax\n  __int64 v32; // rcx\n  __int64 v33; // rsi\n  _QWORD *v34; // rcx\n  __int64 v35; // r12\n  unsigned int v36; // ebp\n  signed int v37; // edi\n  unsigned int v38; // er8\n  int v39; // er9\n  unsigned int v40; // er10\n  unsigned int v41; // er14\n  int v42; // edx\n  int v43; // edx\n  int v44; // edx\n  int v45; // esi\n  __int64 v46; // rsi\n  __int64 v47; // rbx\n  unsigned int *v48; // rax\n  int v49; // er13\n  __int64 v50; // r15\n  __int64 v51; // rax\n  __int64 v52; // rcx\n  __int64 v53; // rsi\n  int v54; // eax\n  int v55; // eax\n  int v56; // eax\n  __int64 v57; // r15\n  __int64 v58; // rdx\n  __int64 v59; // r14\n  int v60; // ebp\n  unsigned int *v61; // rsi\n  unsigned int v62; // er15\n  signed int v63; // eax\n  int v64; // er12\n  int v65; // edi\n  __int64 v66; // r10\n  __int64 v67; // r9\n  __int64 v68; // rax\n  unsigned int v69; // er13\n  unsigned int *v70; // rax\n  unsigned int v71; // er13\n  int v72; // ebp\n  __int64 v73; // r12\n  __int64 v74; // rax\n  __int64 v75; // rcx\n  __int64 v76; // rsi\n  int *v77; // r14\n  int v78; // ebx\n  __int64 v79; // r14\n  __int64 v80; // rax\n  __int64 v81; // rcx\n  __int64 v82; // rsi\n  int *v83; // rax\n  int v84; // eax\n  __int64 v85; // r14\n  unsigned int v86; // er12\n  int v87; // edx\n  int v88; // edx\n  int v89; // edx\n  int v90; // esi\n  __int64 v91; // rsi\n  __int64 v92; // rdi\n  unsigned int *v93; // rax\n  int v94; // er13\n  __int64 v95; // r15\n  __int64 v96; // rax\n  __int64 v97; // rcx\n  __int64 v98; // rsi\n  int v99; // eax\n  unsigned int v100; // edx\n  int v101; // edx\n  unsigned int v102; // er15\n  signed int v103; // eax\n  int v104; // er12\n  int v105; // esi\n  __int64 v106; // r10\n  __int64 v107; // r9\n  __int64 v108; // rax\n  unsigned int *v109; // rsi\n  unsigned int v110; // er13\n  int v111; // ebx\n  __int64 v112; // r14\n  __int64 v113; // rax\n  __int64 v114; // rcx\n  __int64 v115; // rsi\n  int *v116; // rax\n  int v117; // eax\n  unsigned int v118; // edx\n  int v119; // edx\n  float v120; // xmm0_4\n  __int64 v121; // rdi\n  int v122; // eax\n  unsigned int v123; // edx\n  int v124; // edx\n  bool v125; // al\n  unsigned int v126; // er15\n  signed int v127; // eax\n  int v128; // er12\n  int v129; // esi\n  __int64 v130; // rax\n  __int64 v131; // r9\n  __int64 v132; // rbp\n  unsigned int *v133; // rsi\n  unsigned int v134; // er13\n  signed int v135; // eax\n  int v136; // esi\n  __int64 v137; // rax\n  unsigned int *v138; // rsi\n  unsigned int v139; // er13\n  int v140; // ebx\n  __int64 v141; // r14\n  __int64 v142; // rax\n  __int64 v143; // rcx\n  __int64 v144; // rsi\n  __int64 v145; // r14\n  __int64 v146; // rax\n  __int64 v147; // rcx\n  __int64 v148; // rsi\n  int *v149; // rbp\n  int v150; // eax\n  unsigned int v151; // edx\n  int v152; // edx\n  __int64 v153; // r15\n  unsigned int *v154; // rax\n  int v155; // er13\n  __int64 v156; // r14\n  __int64 v157; // rax\n  __int64 v158; // rcx\n  __int64 v159; // rsi\n  __int64 v160; // rsi\n  int v161; // eax\n  __int64 v162; // rdx\n  __int64 v163; // rdx\n  unsigned int v164; // er12\n  int v165; // edx\n  int v166; // edx\n  int v167; // edx\n  int v168; // esi\n  __int64 v169; // rdi\n  signed int v170; // eax\n  float v171; // xmm0_4\n  float v172; // xmm1_4\n  int v173; // esi\n  char v174; // bl\n  signed int v175; // eax\n  signed int v176; // ebp\n  signed __int64 v177; // rsi\n  signed int v178; // edx\n  signed __int64 v179; // rdi\n  signed __int64 v180; // r15\n  signed int v181; // eax\n  signed __int64 v182; // r12\n  unsigned int *v183; // rax\n  unsigned int v184; // er13\n  int v185; // ebx\n  __int64 v186; // r14\n  __int64 v187; // rax\n  __int64 v188; // rcx\n  __int64 v189; // rsi\n  int v190; // eax\n  unsigned int v191; // edx\n  int v192; // edx\n  unsigned int v193; // er15\n  signed __int64 v194; // r14\n  signed int v195; // eax\n  int v196; // edi\n  signed __int64 v197; // r14\n  unsigned int *v198; // rax\n  int v199; // ebp\n  __int64 v200; // r12\n  __int64 v201; // rax\n  __int64 v202; // rcx\n  __int64 v203; // rsi\n  int v204; // eax\n  unsigned int v205; // edx\n  int v206; // edx\n  int v207; // eax\n  int v208; // ebp\n  __int64 v209; // r9\n  __int64 v210; // r10\n  __int64 v211; // rbx\n  __int64 v212; // rsi\n  signed __int64 v213; // r15\n  unsigned int *v214; // rax\n  int v215; // ebp\n  __int64 v216; // r14\n  __int64 v217; // rax\n  __int64 v218; // rcx\n  __int64 v219; // rsi\n  int v220; // eax\n  unsigned int v221; // edx\n  int v222; // edx\n  signed __int64 v223; // rdi\n  signed __int64 v224; // r12\n  signed int v225; // eax\n  signed __int64 v226; // r12\n  unsigned int *v227; // rax\n  unsigned int v228; // er13\n  int v229; // ebx\n  __int64 v230; // r14\n  __int64 v231; // rax\n  __int64 v232; // rcx\n  __int64 v233; // rsi\n  int v234; // eax\n  unsigned int v235; // edx\n  int v236; // edx\n  int v237; // er12\n  signed __int64 v238; // r13\n  signed int v239; // eax\n  signed __int64 v240; // r13\n  float v241; // xmm0_4\n  int v242; // edx\n  signed int v243; // ebp\n  __int64 v244; // r15\n  unsigned int *v245; // rax\n  int v246; // er13\n  __int64 v247; // r14\n  __int64 v248; // rax\n  __int64 v249; // rcx\n  __int64 v250; // rsi\n  __int64 v251; // rsi\n  int v252; // eax\n  __int64 v253; // rdx\n  __int64 v254; // rdx\n  unsigned int v255; // er12\n  int v256; // edx\n  int v257; // edx\n  int v258; // edx\n  int v259; // esi\n  __int64 v260; // rdi\n  int v261; // edx\n  signed int v262; // ebp\n  __int64 v263; // r15\n  unsigned int v264; // er14\n  signed int v265; // edx\n  unsigned int v266; // edx\n  int v267; // edx\n  int v268; // esi\n  __int64 v269; // rsi\n  __int64 v270; // rbx\n  unsigned int *v271; // rax\n  int v272; // er13\n  __int64 v273; // r12\n  __int64 v274; // rax\n  __int64 v275; // rcx\n  __int64 v276; // rsi\n  int v277; // eax\n  unsigned int v278; // edx\n  unsigned int v279; // edx\n  signed __int64 v281; // r15\n  unsigned int v282; // er12\n  int v283; // edx\n  unsigned int v284; // edx\n  int v285; // edx\n  int v286; // esi\n  __int64 v287; // rsi\n  __int64 v288; // rdi\n  unsigned int *v289; // rax\n  int v290; // er13\n  __int64 v291; // r14\n  __int64 v292; // rax\n  __int64 v293; // rcx\n  __int64 v294; // rsi\n  int v295; // eax\n  unsigned int v296; // edx\n  unsigned int v297; // edx\n  float v298; // xmm0_4\n  signed int v299; // eax\n  float v300; // xmm0_4\n  signed int v301; // edi\n  __int64 v302; // r12\n  signed int v303; // ebp\n  unsigned int v304; // er15\n  int v305; // edx\n  unsigned int v306; // edx\n  int v307; // edx\n  int v308; // esi\n  __int64 v309; // rsi\n  __int64 v310; // rbx\n  unsigned int *v311; // rax\n  int v312; // er13\n  __int64 v313; // r14\n  __int64 v314; // rax\n  __int64 v315; // rcx\n  __int64 v316; // rsi\n  int v317; // eax\n  unsigned int v318; // edx\n  unsigned int v319; // edx\n  signed int v320; // eax\n  float v321; // xmm0_4\n  bool v322; // sf\n  unsigned __int8 v323; // of\n  int v324; // [rsp+4h] [rbp-124h]\n  __int64 v325; // [rsp+8h] [rbp-120h]\n  unsigned int v326; // [rsp+8h] [rbp-120h]\n  __int64 v327; // [rsp+8h] [rbp-120h]\n  unsigned int v328; // [rsp+10h] [rbp-118h]\n  signed __int64 v329; // [rsp+10h] [rbp-118h]\n  int v330; // [rsp+10h] [rbp-118h]\n  int v331; // [rsp+18h] [rbp-110h]\n  __int64 v332; // [rsp+18h] [rbp-110h]\n  int v333; // [rsp+18h] [rbp-110h]\n  __int64 v334; // [rsp+18h] [rbp-110h]\n  __int64 v335; // [rsp+18h] [rbp-110h]\n  unsigned int v336; // [rsp+18h] [rbp-110h]\n  signed __int64 v337; // [rsp+18h] [rbp-110h]\n  unsigned int v338; // [rsp+18h] [rbp-110h]\n  unsigned int v339; // [rsp+18h] [rbp-110h]\n  int v340; // [rsp+18h] [rbp-110h]\n  unsigned int v341; // [rsp+18h] [rbp-110h]\n  unsigned int v342; // [rsp+18h] [rbp-110h]\n  unsigned int v343; // [rsp+18h] [rbp-110h]\n  unsigned int v344; // [rsp+18h] [rbp-110h]\n  unsigned int v345; // [rsp+20h] [rbp-108h]\n  unsigned int v346; // [rsp+20h] [rbp-108h]\n  unsigned int v347; // [rsp+20h] [rbp-108h]\n  __int64 v348; // [rsp+20h] [rbp-108h]\n  signed int v349; // [rsp+2Ch] [rbp-FCh]\n  float v350; // [rsp+30h] [rbp-F8h]\n  float v351; // [rsp+34h] [rbp-F4h]\n  __int64 v352; // [rsp+38h] [rbp-F0h]\n  signed __int16 v353; // [rsp+40h] [rbp-E8h]\n  signed int v354; // [rsp+44h] [rbp-E4h]\n  unsigned int v355; // [rsp+48h] [rbp-E0h]\n  __int64 v356; // [rsp+48h] [rbp-E0h]\n  unsigned int v357; // [rsp+48h] [rbp-E0h]\n  __int64 v358; // [rsp+48h] [rbp-E0h]\n  __int64 v359; // [rsp+48h] [rbp-E0h]\n  unsigned int v360; // [rsp+48h] [rbp-E0h]\n  __int64 v361; // [rsp+48h] [rbp-E0h]\n  __int64 v362; // [rsp+48h] [rbp-E0h]\n  unsigned int v363; // [rsp+48h] [rbp-E0h]\n  unsigned int v364; // [rsp+48h] [rbp-E0h]\n  unsigned int v365; // [rsp+48h] [rbp-E0h]\n  unsigned int v366; // [rsp+48h] [rbp-E0h]\n  int v367; // [rsp+50h] [rbp-D8h]\n  int v368; // [rsp+50h] [rbp-D8h]\n  int v369; // [rsp+50h] [rbp-D8h]\n  __int64 v370; // [rsp+50h] [rbp-D8h]\n  __int64 v371; // [rsp+50h] [rbp-D8h]\n  __int64 v372; // [rsp+50h] [rbp-D8h]\n  int v373; // [rsp+50h] [rbp-D8h]\n  int v374; // [rsp+50h] [rbp-D8h]\n  int v375; // [rsp+58h] [rbp-D0h]\n  int v376; // [rsp+5Ch] [rbp-CCh]\n  unsigned int v377; // [rsp+60h] [rbp-C8h]\n  __int64 v378; // [rsp+60h] [rbp-C8h]\n  __int64 v379; // [rsp+60h] [rbp-C8h]\n  __int64 v380; // [rsp+60h] [rbp-C8h]\n  __int64 v381; // [rsp+60h] [rbp-C8h]\n  int v382; // [rsp+60h] [rbp-C8h]\n  int v383; // [rsp+60h] [rbp-C8h]\n  __int64 v384; // [rsp+60h] [rbp-C8h]\n  unsigned int v385; // [rsp+68h] [rbp-C0h]\n  int v386; // [rsp+70h] [rbp-B8h]\n  int v387; // [rsp+70h] [rbp-B8h]\n  signed int v388; // [rsp+70h] [rbp-B8h]\n  signed int v389; // [rsp+78h] [rbp-B0h]\n  __int64 v390; // [rsp+78h] [rbp-B0h]\n  __int64 v391; // [rsp+78h] [rbp-B0h]\n  signed int v392; // [rsp+80h] [rbp-A8h]\n  __int64 (__fastcall *v393)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD); // [rsp+88h] [rbp-A0h]\n  __int64 v394; // [rsp+90h] [rbp-98h]\n  __int64 v395; // [rsp+98h] [rbp-90h]\n  __int64 v396; // [rsp+A0h] [rbp-88h]\n  __int64 v397; // [rsp+A0h] [rbp-88h]\n  __int64 v398; // [rsp+A0h] [rbp-88h]\n  __int64 v399; // [rsp+A0h] [rbp-88h]\n  signed int v400; // [rsp+A8h] [rbp-80h]\n  signed int v401; // [rsp+B0h] [rbp-78h]\n  int v402; // [rsp+B8h] [rbp-70h]\n  unsigned int v403; // [rsp+B8h] [rbp-70h]\n  __int64 v404; // [rsp+C0h] [rbp-68h]\n  bool v405; // [rsp+C0h] [rbp-68h]\n  int v406; // [rsp+C8h] [rbp-60h]\n  __int64 v407; // [rsp+D0h] [rbp-58h]\n  int v408; // [rsp+D8h] [rbp-50h]\n  signed int v409; // [rsp+D8h] [rbp-50h]\n  int v410; // [rsp+D8h] [rbp-50h]\n  int v411; // [rsp+D8h] [rbp-50h]\n  int v412; // [rsp+E0h] [rbp-48h]\n\n  v401 = a6;\n  v406 = a5;\n  v407 = a4;\n  v13 = a3;\n  v353 = a2;\n  v394 = a1;\n  v14 = *((_DWORD *)off_49F6D0 + 18100);\n  v15 = 0;\n  if ( v14 )\n  {\n    v16 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v16 + 532) )\n      v15 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v17 = a12;\n  v349 = *((_DWORD *)dest + 2 * a6 + 20);\n  v18 = (signed __int16)*a11;\n  v395 = *(_QWORD *)(*((_QWORD *)*(&base + a3 + v15) + v353) + 6432LL);\n  v19 = a7 * 65536.0;\n  v352 = *((signed int *)dest + 2 * a6 + 21);\n  v412 = *((_DWORD *)dest + 309);\n  v402 = (signed __int16)*a10;\n  v20 = (unsigned int)(v402 + a4);\n  if ( v14 && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n    v21 = *((_DWORD *)off_49F6D0 + 15) / 2;\n  else\n    v21 = *((_DWORD *)off_49F6D0 + 15);\n  v22 = v19 + 0.5;\n  v392 = v18 + a5;\n  if ( (signed int)v20 <= a12\n    || v392 <= a12\n    || (signed int)v20 >= *((_DWORD *)off_49F6D0 + 13) + ~a12 - v349\n    || v392 >= v21 + ~a12 - (signed int)v352 )\n  {\n    v23 = sub_475AB0;\n  }\n  else\n  {\n    v23 = sub_475A90;\n  }\n  v393 = (__int64 (__fastcall *)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD))v23;\n  v354 = (signed int)v22;\n  v376 = a8 + 4 * v407;\n  v375 = a9 + 4 * a5;\n  memset(*(void **)qword_4F9D28, 0, (unsigned int)(4 * (2 * a12 + 1) * (2 * a12 + 1)));\n  if ( v353 <= 0 )\n  {\n    if ( v401 == 1 )\n    {\n      v24 = dword_4FA130;\n      if ( dword_4FA130 )\n        goto LABEL_16;\n    }\n    else\n    {\n      v24 = dword_4FA138;\n      if ( dword_4FA138 )\n        goto LABEL_16;\n    }\nLABEL_21:\n    v350 = 0.0;\n    v351 = 0.0;\n    goto LABEL_22;\n  }\n  v24 = dword_4FA12C;\n  if ( !dword_4FA12C )\n    goto LABEL_21;\nLABEL_16:\n  v25 = *(float *)&dword_4F9B40[v401] / (float)(v24 * v24);\n  v350 = v25 - *(float *)&dword_4F9B00[v401];\n  v351 = v25 - *(float *)&dword_4F9B20[v401];\nLABEL_22:\n  v26 = (unsigned int *)off_49F6D0;\n  v385 = v20;\n  v386 = v13;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n  {\n    v27 = *((_DWORD *)off_49F6D0 + 15) / 2;\n  }\n  else\n  {\n    v27 = *((_DWORD *)off_49F6D0 + 15);\n  }\n  v408 = v18;\n  v28 = a13;\n  v29 = v354 * (*((_DWORD *)qword_4F9F18 + 4 * (signed int)v20 - v376) + *((_DWORD *)qword_4F9F18 + 4 * v392 - v375)) >> 16;\n  if ( (signed int)v352 > 0 )\n  {\n    v30 = 0LL;\n    while ( 1 )\n    {\n      v31 = v393((unsigned int)v349, v395, (unsigned int)(v392 + v30), v20, v27, v26[13]);\n      if ( v349 >= 4 )\n      {\n        v33 = 0LL;\n        do\n        {\n          v32 = *(_QWORD *)(v394 + 8 * v30);\n          v29 += *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v32 + 8 * v33 + 6)\n                 - (unsigned __int64)*(unsigned __int16 *)(v31 + 8 * v33 + 6))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v32 + 8 * v33 + 4)\n                 - (unsigned __int64)*(unsigned __int16 *)(v31 + 8 * v33 + 4))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v32 + 8 * v33 + 2)\n                 - (unsigned __int64)*(unsigned __int16 *)(v31 + 8 * v33 + 2))\n               + *((_DWORD *)qword_4F9DE8\n                 + *(unsigned __int16 *)(v32 + 8 * v33)\n                 - (unsigned __int64)*(unsigned __int16 *)(v31 + 8 * v33));\n          ++v33;\n        }\n        while ( v349 >> 2 != (_DWORD)v33 );\n      }\n      if ( ++v30 >= v352 || v29 >= a13 )\n        break;\n      v26 = (unsigned int *)off_49F6D0;\n    }\n    v17 = a12;\n  }\n  v34 = qword_4F9D28;\n  v396 = v17;\n  *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v17) + 4LL * v17) = v29;\n  v35 = 0LL;\n  v36 = 0;\n  if ( v29 < a13 )\n    v36 = v385;\n  v37 = 0;\n  if ( v29 < a13 )\n    v37 = v392;\n  if ( v29 <= a13 )\n    v28 = v29;\n  v324 = v28;\n  v400 = v349 >> 2;\n  v38 = v385;\n  v39 = v37;\n  v40 = v36;\n  v377 = v36;\n  v389 = v37;\n  do\n  {\n    v41 = v36 + dword_4896B0[v35];\n    v42 = v38 - (v36 + dword_4896B0[v35]);\n    if ( (signed int)(v38 - (v36 + dword_4896B0[v35])) < 1 )\n      v42 = v36 + dword_4896B0[v35] - v38;\n    if ( v42 <= v17 )\n    {\n      v43 = v37 + dword_4896C0[v35];\n      v331 = v43;\n      v44 = v43 - v392;\n      v45 = -v44;\n      if ( -v44 < 1 )\n        v45 = v44;\n      if ( v45 <= v17 )\n      {\n        v46 = v17 + v44;\n        v47 = (signed int)(v17 + v36 + dword_4896B0[v35] - v38);\n        if ( !*(_DWORD *)(v34[v46] + 4 * v47) )\n        {\n          v48 = (unsigned int *)off_49F6D0;\n          v367 = v39;\n          if ( *((_DWORD *)off_49F6D0 + 18100)\n            && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n          {\n            v355 = *((_DWORD *)off_49F6D0 + 15) / 2;\n          }\n          else\n          {\n            v355 = *((_DWORD *)off_49F6D0 + 15);\n          }\n          v49 = v354\n              * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v41 - v376)) + *((_DWORD *)qword_4F9F18 + 4 * v331 - v375)) >> 16;\n          if ( (signed int)v352 > 0 )\n          {\n            v325 = v46;\n            v345 = v40;\n            v50 = 0LL;\n            while ( 1 )\n            {\n              v51 = v393((unsigned int)v349, v395, (unsigned int)(v331 + v50), v41, v355, v48[13]);\n              if ( v349 >= 4 )\n              {\n                v53 = 0LL;\n                do\n                {\n                  v52 = *(_QWORD *)(v394 + 8 * v50);\n                  v49 += *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v52 + 8 * v53 + 6)\n                         - (unsigned __int64)*(unsigned __int16 *)(v51 + 8 * v53 + 6))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v52 + 8 * v53 + 4)\n                         - (unsigned __int64)*(unsigned __int16 *)(v51 + 8 * v53 + 4))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v52 + 8 * v53 + 2)\n                         - (unsigned __int64)*(unsigned __int16 *)(v51 + 8 * v53 + 2))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v52 + 8 * v53)\n                         - (unsigned __int64)*(unsigned __int16 *)(v51 + 8 * v53));\n                  ++v53;\n                }\n                while ( v400 != (_DWORD)v53 );\n              }\n              if ( ++v50 >= v352 || v49 >= v324 )\n                break;\n              v48 = (unsigned int *)off_49F6D0;\n            }\n            v40 = v345;\n            v36 = v377;\n            v37 = v389;\n            v46 = v325;\n          }\n          v34 = qword_4F9D28;\n          *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v46) + 4 * v47) = v49;\n          v54 = v324;\n          if ( v49 < v324 )\n            v40 = v41;\n          v39 = v367;\n          if ( v49 < v324 )\n            v39 = v331;\n          if ( v49 <= v324 )\n            v54 = v49;\n          v324 = v54;\n          v17 = a12;\n        }\n      }\n      v38 = v385;\n    }\n    ++v35;\n  }\n  while ( v35 != 4 );\n  if ( !((unsigned __int16)v402 | (unsigned __int16)v408) )\n  {\n    v326 = v40;\n    v328 = v39;\n    if ( v401 >= 2 )\n      goto LABEL_159;\nLABEL_81:\n    v60 = v386;\n    goto LABEL_82;\n  }\n  v55 = -v402;\n  if ( -v402 < 1 )\n    v55 = v402;\n  if ( v55 <= v17 )\n  {\n    v56 = -v408;\n    if ( -v408 < 1 )\n      v56 = v408;\n    if ( v56 <= v17 )\n    {\n      v346 = v40;\n      v368 = v39;\n      v57 = v17 - v408;\n      v58 = v34[v57];\n      v59 = v17 - v402;\n      if ( *(_DWORD *)(v58 + 4 * v59) )\n      {\n        v38 = v385;\n      }\n      else\n      {\n        v70 = (unsigned int *)off_49F6D0;\n        if ( *((_DWORD *)off_49F6D0 + 18100)\n          && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n        {\n          v71 = *((_DWORD *)off_49F6D0 + 15) / 2;\n        }\n        else\n        {\n          v71 = *((_DWORD *)off_49F6D0 + 15);\n        }\n        v72 = v354 * (*((_DWORD *)qword_4F9F18 - a8) + *((_DWORD *)qword_4F9F18 - a9)) >> 16;\n        if ( (signed int)v352 <= 0 )\n        {\n          v77 = (int *)(v58 + 4 * v59);\n        }\n        else\n        {\n          v73 = 0LL;\n          while ( 1 )\n          {\n            v74 = v393((unsigned int)v349, v395, (unsigned int)(v73 + v406), v407, v71, v70[13]);\n            if ( v349 >= 4 )\n            {\n              v76 = 0LL;\n              do\n              {\n                v75 = *(_QWORD *)(v394 + 8 * v73);\n                v72 += *((_DWORD *)qword_4F9DE8\n                       + *(unsigned __int16 *)(v75 + 8 * v76 + 6)\n                       - (unsigned __int64)*(unsigned __int16 *)(v74 + 8 * v76 + 6))\n                     + *((_DWORD *)qword_4F9DE8\n                       + *(unsigned __int16 *)(v75 + 8 * v76 + 4)\n                       - (unsigned __int64)*(unsigned __int16 *)(v74 + 8 * v76 + 4))\n                     + *((_DWORD *)qword_4F9DE8\n                       + *(unsigned __int16 *)(v75 + 8 * v76 + 2)\n                       - (unsigned __int64)*(unsigned __int16 *)(v74 + 8 * v76 + 2))\n                     + *((_DWORD *)qword_4F9DE8\n                       + *(unsigned __int16 *)(v75 + 8 * v76)\n                       - (unsigned __int64)*(unsigned __int16 *)(v74 + 8 * v76));\n                ++v76;\n              }\n              while ( v400 != (_DWORD)v76 );\n            }\n            if ( ++v73 >= v352 || v72 >= v324 )\n              break;\n            v70 = (unsigned int *)off_49F6D0;\n          }\n          v34 = qword_4F9D28;\n          v77 = (int *)(*((_QWORD *)qword_4F9D28 + v57) + 4 * v59);\n        }\n        *v77 = v72;\n        v84 = v324;\n        v40 = v346;\n        if ( v72 < v324 )\n          v40 = v407;\n        v39 = v368;\n        if ( v72 < v324 )\n          v39 = v406;\n        if ( v72 <= v324 )\n          v84 = v72;\n        v324 = v84;\n        v17 = a12;\n        v38 = v385;\n      }\n    }\n  }\n  v85 = 0LL;\n  v328 = v39;\n  v326 = v40;\n  v369 = v39;\n  v347 = v40;\n  do\n  {\n    v86 = v40 + dword_4896B0[v85];\n    v87 = v38 - (v40 + dword_4896B0[v85]);\n    if ( (signed int)(v38 - (v40 + dword_4896B0[v85])) < 1 )\n      v87 = v40 + dword_4896B0[v85] - v38;\n    if ( v87 <= v17 )\n    {\n      v88 = v39 + dword_4896C0[v85];\n      v333 = v88;\n      v89 = v88 - v392;\n      v90 = -v89;\n      if ( -v89 < 1 )\n        v90 = v89;\n      if ( v90 <= v17 )\n      {\n        v91 = v17 + v89;\n        v92 = (signed int)(v17 + v40 + dword_4896B0[v85] - v38);\n        if ( !*(_DWORD *)(v34[v91] + 4 * v92) )\n        {\n          v93 = (unsigned int *)off_49F6D0;\n          if ( *((_DWORD *)off_49F6D0 + 18100)\n            && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n          {\n            v357 = *((_DWORD *)off_49F6D0 + 15) / 2;\n          }\n          else\n          {\n            v357 = *((_DWORD *)off_49F6D0 + 15);\n          }\n          v94 = v354\n              * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v86 - v376)) + *((_DWORD *)qword_4F9F18 + 4 * v333 - v375)) >> 16;\n          if ( (signed int)v352 > 0 )\n          {\n            v378 = v91;\n            v95 = 0LL;\n            while ( 1 )\n            {\n              v96 = v393((unsigned int)v349, v395, (unsigned int)(v333 + v95), v86, v357, v93[13]);\n              if ( v349 >= 4 )\n              {\n                v98 = 0LL;\n                do\n                {\n                  v97 = *(_QWORD *)(v394 + 8 * v95);\n                  v94 += *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v97 + 8 * v98 + 6)\n                         - (unsigned __int64)*(unsigned __int16 *)(v96 + 8 * v98 + 6))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v97 + 8 * v98 + 4)\n                         - (unsigned __int64)*(unsigned __int16 *)(v96 + 8 * v98 + 4))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v97 + 8 * v98 + 2)\n                         - (unsigned __int64)*(unsigned __int16 *)(v96 + 8 * v98 + 2))\n                       + *((_DWORD *)qword_4F9DE8\n                         + *(unsigned __int16 *)(v97 + 8 * v98)\n                         - (unsigned __int64)*(unsigned __int16 *)(v96 + 8 * v98));\n                  ++v98;\n                }\n                while ( v400 != (_DWORD)v98 );\n              }\n              if ( ++v95 >= v352 || v94 >= v324 )\n                break;\n              v93 = (unsigned int *)off_49F6D0;\n            }\n            v39 = v369;\n            v40 = v347;\n            v91 = v378;\n          }\n          v34 = qword_4F9D28;\n          *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v91) + 4 * v92) = v94;\n          v99 = v324;\n          v100 = v326;\n          if ( v94 < v324 )\n            v100 = v86;\n          v326 = v100;\n          v101 = v328;\n          if ( v94 < v324 )\n            v101 = v333;\n          v328 = v101;\n          if ( v94 <= v324 )\n            v99 = v94;\n          v324 = v99;\n          v17 = a12;\n        }\n      }\n      v38 = v385;\n    }\n    ++v85;\n  }\n  while ( v85 != 4 );\n  if ( v401 < 2 )\n    goto LABEL_81;\nLABEL_159:\n  v102 = v407 + dword_4F9FA0 / 4;\n  v103 = v38 - (v407 + dword_4F9FA0 / 4);\n  if ( (signed int)(v38 - (v407 + dword_4F9FA0 / 4)) < 1 )\n    v103 = v407 + dword_4F9FA0 / 4 - v38;\n  v60 = v386;\n  if ( v103 <= v17 )\n  {\n    v104 = v406 + dword_4F9FA4 / 4;\n    v105 = v392 - (v406 + dword_4F9FA4 / 4);\n    if ( v392 - (v406 + dword_4F9FA4 / 4) < 1 )\n      v105 = v406 + dword_4F9FA4 / 4 - v392;\n    if ( v105 <= v17 )\n    {\n      v106 = v17 + v406 + dword_4F9FA4 / 4 - v392;\n      v107 = v34[v106];\n      v108 = (signed int)(v17 + v407 + dword_4F9FA0 / 4 - v38);\n      if ( !*(_DWORD *)(v107 + 4 * v108) )\n      {\n        v109 = (unsigned int *)off_49F6D0;\n        if ( *((_DWORD *)off_49F6D0 + 18100)\n          && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n        {\n          v110 = *((_DWORD *)off_49F6D0 + 15) / 2;\n        }\n        else\n        {\n          v110 = *((_DWORD *)off_49F6D0 + 15);\n        }\n        v111 = v354\n             * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v102 - v376)) + *((_DWORD *)qword_4F9F18 + 4 * v104 - v375)) >> 16;\n        if ( (signed int)v352 <= 0 )\n        {\n          v116 = (int *)(v107 + 4 * v108);\n        }\n        else\n        {\n          v358 = v106;\n          v334 = v108;\n          v112 = 0LL;\n          while ( 1 )\n          {\n            v113 = v393((unsigned int)v349, v395, (unsigned int)(v104 + v112), v102, v110, v109[13]);\n            if ( v349 >= 4 )\n            {\n              v115 = 0LL;\n              do\n              {\n                v114 = *(_QWORD *)(v394 + 8 * v112);\n                v111 += *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v114 + 8 * v115 + 6)\n                        - (unsigned __int64)*(unsigned __int16 *)(v113 + 8 * v115 + 6))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v114 + 8 * v115 + 4)\n                        - (unsigned __int64)*(unsigned __int16 *)(v113 + 8 * v115 + 4))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v114 + 8 * v115 + 2)\n                        - (unsigned __int64)*(unsigned __int16 *)(v113 + 8 * v115 + 2))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v114 + 8 * v115)\n                        - (unsigned __int64)*(unsigned __int16 *)(v113 + 8 * v115));\n                ++v115;\n              }\n              while ( v400 != (_DWORD)v115 );\n            }\n            if ( ++v112 >= v352 || v111 >= v324 )\n              break;\n            v109 = (unsigned int *)off_49F6D0;\n          }\n          v34 = qword_4F9D28;\n          v116 = (int *)(*((_QWORD *)qword_4F9D28 + v358) + 4 * v334);\n        }\n        *v116 = v111;\n        v117 = v324;\n        v118 = v326;\n        if ( v111 < v324 )\n          v118 = v102;\n        v326 = v118;\n        v119 = v328;\n        if ( v111 < v324 )\n          v119 = v104;\n        v328 = v119;\n        if ( v111 <= v324 )\n          v117 = v111;\n        v324 = v117;\n        v17 = a12;\n        v38 = v385;\n        v60 = v386;\n      }\n    }\n  }\n  v120 = (float)(v324 - dword_4FA138);\n  if ( (float)(v351 * (float)dword_4FA138) <= v120 )\n  {\n    if ( (float)((float)dword_4FA138 * v350) > v120 )\n      goto LABEL_417;\nLABEL_82:\n    v61 = (unsigned int *)off_49F6D0;\n    if ( (unsigned __int16)v353 != 0xFFFF && *(_DWORD *)off_49F6D0 > v353 + 1 || v60 == 1 && dword_4F9FD8 % v412 >= 2 )\n    {\n      v62 = v407 + dword_4F9F98 / 4;\n      v63 = v38 - (v407 + dword_4F9F98 / 4);\n      if ( (signed int)(v38 - (v407 + dword_4F9F98 / 4)) < 1 )\n        v63 = v407 + dword_4F9F98 / 4 - v38;\n      if ( v63 <= v17 )\n      {\n        v64 = v406 + dword_4F9F9C / 4;\n        v65 = v392 - (v406 + dword_4F9F9C / 4);\n        if ( v392 - (v406 + dword_4F9F9C / 4) < 1 )\n          v65 = v406 + dword_4F9F9C / 4 - v392;\n        if ( v65 <= v17 )\n        {\n          v66 = v17 + v406 + dword_4F9F9C / 4 - v392;\n          v67 = v34[v66];\n          v68 = (signed int)(v17 + v407 + dword_4F9F98 / 4 - v38);\n          if ( !*(_DWORD *)(v67 + 4 * v68) )\n          {\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v69 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v69 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v78 = v354\n                * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v62 - v376)) + *((_DWORD *)qword_4F9F18 + 4 * v64 - v375)) >> 16;\n            if ( (signed int)v352 <= 0 )\n            {\n              v83 = (int *)(v67 + 4 * v68);\n            }\n            else\n            {\n              v356 = v66;\n              v332 = v68;\n              v79 = 0LL;\n              while ( 1 )\n              {\n                v80 = v393((unsigned int)v349, v395, (unsigned int)(v64 + v79), v62, v69, v61[13]);\n                if ( v349 >= 4 )\n                {\n                  v82 = 0LL;\n                  do\n                  {\n                    v81 = *(_QWORD *)(v394 + 8 * v79);\n                    v78 += *((_DWORD *)qword_4F9DE8\n                           + *(unsigned __int16 *)(v81 + 8 * v82 + 6)\n                           - (unsigned __int64)*(unsigned __int16 *)(v80 + 8 * v82 + 6))\n                         + *((_DWORD *)qword_4F9DE8\n                           + *(unsigned __int16 *)(v81 + 8 * v82 + 4)\n                           - (unsigned __int64)*(unsigned __int16 *)(v80 + 8 * v82 + 4))\n                         + *((_DWORD *)qword_4F9DE8\n                           + *(unsigned __int16 *)(v81 + 8 * v82 + 2)\n                           - (unsigned __int64)*(unsigned __int16 *)(v80 + 8 * v82 + 2))\n                         + *((_DWORD *)qword_4F9DE8\n                           + *(unsigned __int16 *)(v81 + 8 * v82)\n                           - (unsigned __int64)*(unsigned __int16 *)(v80 + 8 * v82));\n                    ++v82;\n                  }\n                  while ( v400 != (_DWORD)v82 );\n                }\n                if ( ++v79 >= v352 || v78 >= v324 )\n                  break;\n                v61 = (unsigned int *)off_49F6D0;\n              }\n              v34 = qword_4F9D28;\n              v83 = (int *)(*((_QWORD *)qword_4F9D28 + v356) + 4 * v332);\n              v38 = v385;\n              v60 = v386;\n            }\n            *v83 = v78;\n            v122 = v324;\n            v123 = v326;\n            if ( v78 < v324 )\n              v123 = v62;\n            v326 = v123;\n            v124 = v328;\n            if ( v78 < v324 )\n              v124 = v64;\n            v328 = v124;\n            if ( v78 <= v324 )\n              v122 = v78;\n            v324 = v122;\n            v17 = a12;\n          }\n        }\n      }\n    }\n    v125 = v353 > 0 && v60 == 0;\n    if ( *((_DWORD *)dest + 720) == 1 )\n    {\n      if ( v125 || !v60 && *((_DWORD *)off_49F6D0 + 6) == 1 && (unsigned __int16)(v353 | 2) == 2 )\n      {\n        v126 = v407 + dword_4F9F90 / 4;\n        v127 = v38 - (v407 + dword_4F9F90 / 4);\n        if ( (signed int)(v38 - (v407 + dword_4F9F90 / 4)) < 1 )\n          v127 = v407 + dword_4F9F90 / 4 - v38;\n        if ( v127 <= v17 )\n        {\n          v128 = v406 + dword_4F9F94 / 4;\n          v129 = v392 - (v406 + dword_4F9F94 / 4);\n          if ( v392 - (v406 + dword_4F9F94 / 4) < 1 )\n            v129 = v406 + dword_4F9F94 / 4 - v392;\n          if ( v129 <= v17 )\n          {\n            v130 = v17 + v406 + dword_4F9F94 / 4 - v392;\n            v131 = v34[v130];\n            v132 = (signed int)(v17 + v407 + dword_4F9F90 / 4 - v38);\n            if ( !*(_DWORD *)(v131 + 4 * v132) )\n            {\n              v133 = (unsigned int *)off_49F6D0;\n              if ( *((_DWORD *)off_49F6D0 + 18100)\n                && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n              {\n                v134 = *((_DWORD *)off_49F6D0 + 15) / 2;\n              }\n              else\n              {\n                v134 = *((_DWORD *)off_49F6D0 + 15);\n              }\n              v140 = v354\n                   * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v126 - v376))\n                    + *((_DWORD *)qword_4F9F18 + 4 * v128 - v375)) >> 16;\n              if ( (signed int)v352 > 0 )\n              {\n                v359 = v130;\n                v335 = v132;\n                v145 = 0LL;\n                while ( 1 )\n                {\n                  v146 = v393((unsigned int)v349, v395, (unsigned int)(v128 + v145), v126, v134, v133[13]);\n                  if ( v349 >= 4 )\n                  {\n                    v148 = 0LL;\n                    do\n                    {\n                      v147 = *(_QWORD *)(v394 + 8 * v145);\n                      v140 += *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v147 + 8 * v148 + 6)\n                              - (unsigned __int64)*(unsigned __int16 *)(v146 + 8 * v148 + 6))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v147 + 8 * v148 + 4)\n                              - (unsigned __int64)*(unsigned __int16 *)(v146 + 8 * v148 + 4))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v147 + 8 * v148 + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(v146 + 8 * v148 + 2))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v147 + 8 * v148)\n                              - (unsigned __int64)*(unsigned __int16 *)(v146 + 8 * v148));\n                      ++v148;\n                    }\n                    while ( v400 != (_DWORD)v148 );\n                  }\n                  if ( ++v145 >= v352 || v140 >= v324 )\n                    break;\n                  v133 = (unsigned int *)off_49F6D0;\n                }\nLABEL_248:\n                v34 = qword_4F9D28;\n                v149 = (int *)(*((_QWORD *)qword_4F9D28 + v359) + 4 * v335);\nLABEL_250:\n                *v149 = v140;\n                v150 = v324;\n                v151 = v326;\n                if ( v140 < v324 )\n                  v151 = v126;\n                v326 = v151;\n                v152 = v328;\n                if ( v140 < v324 )\n                  v152 = v128;\n                v328 = v152;\n                if ( v140 <= v324 )\n                  v150 = v140;\n                v324 = v150;\n                v17 = a12;\n                v38 = v385;\n                goto LABEL_257;\n              }\n              goto LABEL_249;\n            }\n          }\n        }\n      }\n    }\n    else if ( v125 || !v353 && !v60 && *((_DWORD *)off_49F6D0 + 6) == 1 )\n    {\n      v126 = v407 + dword_4F9F90 / 4;\n      v135 = v38 - (v407 + dword_4F9F90 / 4);\n      if ( (signed int)(v38 - (v407 + dword_4F9F90 / 4)) < 1 )\n        v135 = v407 + dword_4F9F90 / 4 - v38;\n      if ( v135 <= v17 )\n      {\n        v128 = v406 + dword_4F9F94 / 4;\n        v136 = v392 - (v406 + dword_4F9F94 / 4);\n        if ( v392 - (v406 + dword_4F9F94 / 4) < 1 )\n          v136 = v406 + dword_4F9F94 / 4 - v392;\n        if ( v136 <= v17 )\n        {\n          v137 = v17 + v406 + dword_4F9F94 / 4 - v392;\n          v131 = v34[v137];\n          v132 = (signed int)(v17 + v407 + dword_4F9F90 / 4 - v38);\n          if ( !*(_DWORD *)(v131 + 4 * v132) )\n          {\n            v138 = (unsigned int *)off_49F6D0;\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v139 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v139 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v140 = v354\n                 * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v126 - v376))\n                  + *((_DWORD *)qword_4F9F18 + 4 * v128 - v375)) >> 16;\n            if ( (signed int)v352 > 0 )\n            {\n              v359 = v137;\n              v335 = v132;\n              v141 = 0LL;\n              while ( 1 )\n              {\n                v142 = v393((unsigned int)v349, v395, (unsigned int)(v128 + v141), v126, v139, v138[13]);\n                if ( v349 >= 4 )\n                {\n                  v144 = 0LL;\n                  do\n                  {\n                    v143 = *(_QWORD *)(v394 + 8 * v141);\n                    v140 += *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v143 + 8 * v144 + 6)\n                            - (unsigned __int64)*(unsigned __int16 *)(v142 + 8 * v144 + 6))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v143 + 8 * v144 + 4)\n                            - (unsigned __int64)*(unsigned __int16 *)(v142 + 8 * v144 + 4))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v143 + 8 * v144 + 2)\n                            - (unsigned __int64)*(unsigned __int16 *)(v142 + 8 * v144 + 2))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v143 + 8 * v144)\n                            - (unsigned __int64)*(unsigned __int16 *)(v142 + 8 * v144));\n                    ++v144;\n                  }\n                  while ( v400 != (_DWORD)v144 );\n                }\n                if ( ++v141 >= v352 || v140 >= v324 )\n                  break;\n                v138 = (unsigned int *)off_49F6D0;\n              }\n              goto LABEL_248;\n            }\nLABEL_249:\n            v149 = (int *)(v131 + 4 * v132);\n            goto LABEL_250;\n          }\n        }\n      }\n    }\nLABEL_257:\n    v153 = 0LL;\n    v348 = v328;\n    v121 = v326;\n    do\n    {\n      v370 = v121;\n      v164 = v326 + dword_4896B0[v153];\n      v165 = v38 - (v326 + dword_4896B0[v153]);\n      if ( (signed int)(v38 - (v326 + dword_4896B0[v153])) < 1 )\n        v165 = v326 + dword_4896B0[v153] - v38;\n      if ( v165 > v17 )\n        goto LABEL_572;\n      v166 = v328 + dword_4896C0[v153];\n      v336 = v166;\n      v167 = v166 - v392;\n      v168 = -v167;\n      if ( -v167 < 1 )\n        v168 = v167;\n      if ( v168 > v17\n        || (v160 = v17 + v167,\n            v169 = (signed int)(v17 + v326 + dword_4896B0[v153] - v38),\n            *(_DWORD *)(v34[v160] + 4 * v169)) )\n      {\nLABEL_572:\n        v121 = v370;\n      }\n      else\n      {\n        v154 = (unsigned int *)off_49F6D0;\n        if ( *((_DWORD *)off_49F6D0 + 18100)\n          && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n        {\n          v360 = *((_DWORD *)off_49F6D0 + 15) / 2;\n        }\n        else\n        {\n          v360 = *((_DWORD *)off_49F6D0 + 15);\n        }\n        v155 = v354\n             * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v164 - v376))\n              + *((_DWORD *)qword_4F9F18 + (signed int)(4 * v336 - v375))) >> 16;\n        if ( (signed int)v352 > 0 )\n        {\n          v379 = v160;\n          v156 = 0LL;\n          while ( 1 )\n          {\n            v157 = v393((unsigned int)v349, v395, v336 + (unsigned int)v156, v164, v360, v154[13]);\n            if ( v349 >= 4 )\n            {\n              v159 = 0LL;\n              do\n              {\n                v158 = *(_QWORD *)(v394 + 8 * v156);\n                v155 += *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v158 + 8 * v159 + 6)\n                        - (unsigned __int64)*(unsigned __int16 *)(v157 + 8 * v159 + 6))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v158 + 8 * v159 + 4)\n                        - (unsigned __int64)*(unsigned __int16 *)(v157 + 8 * v159 + 4))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v158 + 8 * v159 + 2)\n                        - (unsigned __int64)*(unsigned __int16 *)(v157 + 8 * v159 + 2))\n                      + *((_DWORD *)qword_4F9DE8\n                        + *(unsigned __int16 *)(v158 + 8 * v159)\n                        - (unsigned __int64)*(unsigned __int16 *)(v157 + 8 * v159));\n                ++v159;\n              }\n              while ( v400 != (_DWORD)v159 );\n            }\n            if ( ++v156 >= v352 || v155 >= v324 )\n              break;\n            v154 = (unsigned int *)off_49F6D0;\n          }\n          v160 = v379;\n        }\n        v34 = qword_4F9D28;\n        *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v160) + 4 * v169) = v155;\n        v161 = v324;\n        v162 = v370;\n        if ( v155 < v324 )\n          v162 = v164;\n        v121 = v162;\n        v163 = v348;\n        if ( v155 < v324 )\n          v163 = v336;\n        v348 = v163;\n        if ( v155 <= v324 )\n          v161 = v155;\n        v324 = v161;\n        v17 = a12;\n        v38 = v385;\n      }\n      ++v153;\n    }\n    while ( v153 != 4 );\n    if ( v353 <= 0 )\n    {\n      if ( v401 < 2 )\n      {\n        v171 = (float)(v324 - dword_4FA130);\n        v172 = (float)dword_4FA130;\n        if ( (float)(v351 * (float)dword_4FA130) > v171 )\n          goto LABEL_453;\n        goto LABEL_295;\n      }\n      v170 = dword_4FA138;\n    }\n    else\n    {\n      v170 = dword_4FA12C;\n    }\n    v171 = (float)(v324 - v170);\n    v172 = (float)v170;\n    if ( (float)(v351 * (float)v170) > v171 )\n      goto LABEL_453;\n    if ( v401 > 6 )\n      goto LABEL_416;\nLABEL_295:\n    if ( (float)(v172 * v350) > v171 )\n    {\nLABEL_416:\n      v326 = v121;\n      v328 = v348;\nLABEL_417:\n      if ( v17 <= 0 )\n        goto LABEL_489;\n      v242 = 0;\n      v348 = v328;\n      v121 = v326;\n      do\n      {\n        v382 = v242;\n        v243 = 1;\n        v244 = 0LL;\n        do\n        {\n          v372 = v121;\n          v255 = v326 + dword_490870[v244];\n          v256 = v38 - (v326 + dword_490870[v244]);\n          if ( (signed int)(v38 - (v326 + dword_490870[v244])) < 1 )\n            v256 = v326 + dword_490870[v244] - v38;\n          if ( v256 > v17 )\n            goto LABEL_573;\n          v257 = v328 + dword_490890[v244];\n          v341 = v257;\n          v258 = v257 - v392;\n          v259 = -v258;\n          if ( -v258 < 1 )\n            v259 = v258;\n          if ( v259 > v17\n            || (v251 = v17 + v258,\n                v260 = (signed int)(v17 + v326 + dword_490870[v244] - v38),\n                *(_DWORD *)(v34[v251] + 4 * v260)) )\n          {\nLABEL_573:\n            v121 = v372;\n          }\n          else\n          {\n            v245 = (unsigned int *)off_49F6D0;\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v363 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v363 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v246 = v354\n                 * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v255 - v376))\n                  + *((_DWORD *)qword_4F9F18 + (signed int)(4 * v341 - v375))) >> 16;\n            if ( (signed int)v352 > 0 )\n            {\n              v397 = v251;\n              v247 = 0LL;\n              while ( 1 )\n              {\n                v248 = v393((unsigned int)v349, v395, v341 + (unsigned int)v247, v255, v363, v245[13]);\n                if ( v349 >= 4 )\n                {\n                  v250 = 0LL;\n                  do\n                  {\n                    v249 = *(_QWORD *)(v394 + 8 * v247);\n                    v246 += *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v249 + 8 * v250 + 6)\n                            - (unsigned __int64)*(unsigned __int16 *)(v248 + 8 * v250 + 6))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v249 + 8 * v250 + 4)\n                            - (unsigned __int64)*(unsigned __int16 *)(v248 + 8 * v250 + 4))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v249 + 8 * v250 + 2)\n                            - (unsigned __int64)*(unsigned __int16 *)(v248 + 8 * v250 + 2))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v249 + 8 * v250)\n                            - (unsigned __int64)*(unsigned __int16 *)(v248 + 8 * v250));\n                    ++v250;\n                  }\n                  while ( v400 != (_DWORD)v250 );\n                }\n                if ( ++v247 >= v352 || v246 >= v324 )\n                  break;\n                v245 = (unsigned int *)off_49F6D0;\n              }\n              v251 = v397;\n            }\n            v34 = qword_4F9D28;\n            *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v251) + 4 * v260) = v246;\n            v252 = v324;\n            v253 = v372;\n            if ( v246 < v324 )\n              v253 = v255;\n            v121 = v253;\n            v254 = v348;\n            if ( v246 < v324 )\n              v254 = v341;\n            v348 = v254;\n            if ( v246 < v324 )\n              v243 = 0;\n            if ( v246 <= v324 )\n              v252 = v246;\n            v324 = v252;\n            v17 = a12;\n            v38 = v385;\n          }\n          ++v244;\n        }\n        while ( v244 != 6 );\n        if ( v243 )\n          break;\n        v242 = v382 + 1;\n        v328 = v348;\n        v326 = v121;\n      }\n      while ( v382 + 1 < v17 );\nLABEL_453:\n      if ( v17 <= 0 )\n        goto LABEL_189;\n      goto LABEL_454;\n    }\n    if ( v17 > 1 )\n    {\n      v176 = v392 - v348;\n      if ( v392 - (signed int)v348 < 1 )\n        v176 = v348 - v392;\n      v380 = v17 + (signed int)v348 - v392;\n      v404 = 4 * (signed int)v348 - v375;\n      v361 = (signed int)v121;\n      v327 = (signed int)v38;\n      v390 = ((unsigned int)v17 >> 1) + 1;\n      v177 = 1LL;\n      v178 = v176;\n      v387 = v348;\n      v403 = v121;\n      v409 = v176;\n      v371 = v121;\n      do\n      {\n        v179 = 2 * v177 - 1;\n        v180 = v361 + 2 * v177 - 1;\n        v181 = v327 - (v361 + 2 * v177 - 1);\n        if ( v180 - v327 >= 0 )\n          v181 = v180 - v327;\n        v329 = v177;\n        if ( v181 <= v17 && v178 <= v17 )\n        {\n          v182 = v396 + v180 - v327;\n          if ( !*(_DWORD *)(v34[v380] + 4 * v182) )\n          {\n            v183 = (unsigned int *)off_49F6D0;\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v184 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v184 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v185 = v354 * (*((_DWORD *)qword_4F9F18 + 4 * (signed int)v180 - v376) + *((_DWORD *)qword_4F9F18 + v404)) >> 16;\n            if ( (signed int)v352 > 0 )\n            {\n              v337 = 2 * v177 - 1;\n              v186 = 0LL;\n              while ( 1 )\n              {\n                v187 = v393((unsigned int)v349, v395, (unsigned int)(v348 + v186), (unsigned int)v180, v184, v183[13]);\n                if ( v349 >= 4 )\n                {\n                  v189 = 0LL;\n                  do\n                  {\n                    v188 = *(_QWORD *)(v394 + 8 * v186);\n                    v185 += *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v188 + 8 * v189 + 6)\n                            - (unsigned __int64)*(unsigned __int16 *)(v187 + 8 * v189 + 6))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v188 + 8 * v189 + 4)\n                            - (unsigned __int64)*(unsigned __int16 *)(v187 + 8 * v189 + 4))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v188 + 8 * v189 + 2)\n                            - (unsigned __int64)*(unsigned __int16 *)(v187 + 8 * v189 + 2))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v188 + 8 * v189)\n                            - (unsigned __int64)*(unsigned __int16 *)(v187 + 8 * v189));\n                    ++v189;\n                  }\n                  while ( v400 != (_DWORD)v189 );\n                }\n                if ( ++v186 >= v352 || v185 >= v324 )\n                  break;\n                v183 = (unsigned int *)off_49F6D0;\n              }\n              v179 = v337;\n            }\n            v34 = qword_4F9D28;\n            *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v380) + 4 * v182) = v185;\n            v190 = v324;\n            v191 = v403;\n            if ( v185 < v324 )\n              v191 = v180;\n            v403 = v191;\n            v192 = v387;\n            if ( v185 < v324 )\n              v192 = v348;\n            v387 = v192;\n            if ( v185 <= v324 )\n              v190 = v185;\n            v324 = v190;\n            v17 = a12;\n            v178 = v409;\n          }\n        }\n        v193 = v361 - v179;\n        v194 = v361 - v179 - v327;\n        v195 = v327 - (v361 - v179);\n        if ( v194 >= 0 )\n          v195 = v361 - v179 - v327;\n        v196 = v371;\n        if ( v195 <= v17 && v178 <= v17 )\n        {\n          v197 = v396 + v194;\n          if ( !*(_DWORD *)(v34[v380] + 4 * v197) )\n          {\n            v198 = (unsigned int *)off_49F6D0;\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v338 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v338 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v199 = v354 * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v193 - v376)) + *((_DWORD *)qword_4F9F18 + v404)) >> 16;\n            if ( (signed int)v352 > 0 )\n            {\n              v200 = 0LL;\n              while ( 1 )\n              {\n                v201 = v393((unsigned int)v349, v395, (unsigned int)(v348 + v200), v193, v338, v198[13]);\n                if ( v349 >= 4 )\n                {\n                  v203 = 0LL;\n                  do\n                  {\n                    v202 = *(_QWORD *)(v394 + 8 * v200);\n                    v199 += *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v202 + 8 * v203 + 6)\n                            - (unsigned __int64)*(unsigned __int16 *)(v201 + 8 * v203 + 6))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v202 + 8 * v203 + 4)\n                            - (unsigned __int64)*(unsigned __int16 *)(v201 + 8 * v203 + 4))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v202 + 8 * v203 + 2)\n                            - (unsigned __int64)*(unsigned __int16 *)(v201 + 8 * v203 + 2))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v202 + 8 * v203)\n                            - (unsigned __int64)*(unsigned __int16 *)(v201 + 8 * v203));\n                    ++v203;\n                  }\n                  while ( v400 != (_DWORD)v203 );\n                }\n                if ( ++v200 >= v352 || v199 >= v324 )\n                  break;\n                v198 = (unsigned int *)off_49F6D0;\n              }\n              v196 = v371;\n            }\n            v34 = qword_4F9D28;\n            *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v380) + 4 * v197) = v199;\n            v204 = v324;\n            v205 = v403;\n            if ( v199 < v324 )\n              v205 = v193;\n            v403 = v205;\n            v206 = v387;\n            if ( v199 < v324 )\n              v206 = v348;\n            v387 = v206;\n            if ( v199 <= v324 )\n              v204 = v199;\n            v324 = v204;\n            v178 = v409;\n          }\n        }\n        v177 = v329 + 1;\n        v38 = v385;\n      }\n      while ( v329 + 1 != v390 );\n      v173 = v17 / 4;\n      if ( v17 >= 4 )\n      {\n        v405 = v17 < 4;\n        v207 = v196 - v385;\n        v208 = v385 - v196;\n        if ( (signed int)(v385 - v196) < 1 )\n          v208 = v196 - v385;\n        v209 = v17 + v207;\n        v362 = 4 * v196 - v376;\n        v210 = (signed int)v348;\n        v211 = v392;\n        v410 = v17 / 4;\n        v212 = (unsigned int)(v173 + 1);\n        v213 = 1LL;\n        v330 = v208;\n        v391 = v17 + v207;\n        v381 = v212;\n        do\n        {\n          if ( v208 <= v17 )\n          {\n            v223 = 2 * v213 - 1;\n            v340 = v210 + 2 * v213 - 1;\n            v224 = v210 + 2 * v213 - 1 - v211;\n            v225 = v211 - v340;\n            if ( v224 >= 0 )\n              v225 = v210 + 2 * v213 - 1 - v211;\n            if ( v225 <= v17 )\n            {\n              v226 = v396 + v224;\n              if ( !*(_DWORD *)(v34[v226] + 4 * v209) )\n              {\n                v227 = (unsigned int *)off_49F6D0;\n                if ( *((_DWORD *)off_49F6D0 + 18100)\n                  && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n                {\n                  v228 = *((_DWORD *)off_49F6D0 + 15) / 2;\n                }\n                else\n                {\n                  v228 = *((_DWORD *)off_49F6D0 + 15);\n                }\n                v229 = v354 * (*((_DWORD *)qword_4F9F18 + v362) + *((_DWORD *)qword_4F9F18 + 4 * v340 - v375)) >> 16;\n                if ( (signed int)v352 > 0 )\n                {\n                  v230 = 0LL;\n                  while ( 1 )\n                  {\n                    v231 = v393((unsigned int)v349, v395, (unsigned int)(v340 + v230), v371, v228, v227[13]);\n                    if ( v349 >= 4 )\n                    {\n                      v233 = 0LL;\n                      do\n                      {\n                        v232 = *(_QWORD *)(v394 + 8 * v230);\n                        v229 += *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v232 + 8 * v233 + 6)\n                                - (unsigned __int64)*(unsigned __int16 *)(v231 + 8 * v233 + 6))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v232 + 8 * v233 + 4)\n                                - (unsigned __int64)*(unsigned __int16 *)(v231 + 8 * v233 + 4))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v232 + 8 * v233 + 2)\n                                - (unsigned __int64)*(unsigned __int16 *)(v231 + 8 * v233 + 2))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v232 + 8 * v233)\n                                - (unsigned __int64)*(unsigned __int16 *)(v231 + 8 * v233));\n                        ++v233;\n                      }\n                      while ( v400 != (_DWORD)v233 );\n                    }\n                    if ( ++v230 >= v352 || v229 >= v324 )\n                      break;\n                    v227 = (unsigned int *)off_49F6D0;\n                  }\n                  v38 = v385;\n                  v208 = v330;\n                  v209 = v391;\n                  v212 = v381;\n                  v223 = 2 * v213 - 1;\n                }\n                v34 = qword_4F9D28;\n                *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v226) + 4 * v209) = v229;\n                v234 = v324;\n                v235 = v403;\n                if ( v229 < v324 )\n                  v235 = v371;\n                v403 = v235;\n                v236 = v387;\n                if ( v229 < v324 )\n                  v236 = v340;\n                v387 = v236;\n                if ( v229 <= v324 )\n                  v234 = v229;\n                v324 = v234;\n                v210 = (signed int)v348;\n                v211 = v392;\n              }\n            }\n            v237 = v210 - v223;\n            v238 = v210 - v223 - v211;\n            v239 = v211 - (v210 - v223);\n            if ( v238 >= 0 )\n              v239 = v210 - v223 - v211;\n            if ( v239 > a12 || (v240 = v396 + v238, *(_DWORD *)(v34[v240] + 4 * v209)) )\n            {\n              v17 = a12;\n            }\n            else\n            {\n              v214 = (unsigned int *)off_49F6D0;\n              if ( *((_DWORD *)off_49F6D0 + 18100)\n                && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n              {\n                v339 = *((_DWORD *)off_49F6D0 + 15) / 2;\n              }\n              else\n              {\n                v339 = *((_DWORD *)off_49F6D0 + 15);\n              }\n              v215 = v354 * (*((_DWORD *)qword_4F9F18 + v362) + *((_DWORD *)qword_4F9F18 + 4 * v237 - v375)) >> 16;\n              if ( (signed int)v352 > 0 )\n              {\n                v216 = 0LL;\n                while ( 1 )\n                {\n                  v217 = v393((unsigned int)v349, v395, (unsigned int)(v237 + v216), v371, v339, v214[13]);\n                  if ( v349 >= 4 )\n                  {\n                    v219 = 0LL;\n                    do\n                    {\n                      v218 = *(_QWORD *)(v394 + 8 * v216);\n                      v215 += *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v218 + 8 * v219 + 6)\n                              - (unsigned __int64)*(unsigned __int16 *)(v217 + 8 * v219 + 6))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v218 + 8 * v219 + 4)\n                              - (unsigned __int64)*(unsigned __int16 *)(v217 + 8 * v219 + 4))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v218 + 8 * v219 + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(v217 + 8 * v219 + 2))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v218 + 8 * v219)\n                              - (unsigned __int64)*(unsigned __int16 *)(v217 + 8 * v219));\n                      ++v219;\n                    }\n                    while ( v400 != (_DWORD)v219 );\n                  }\n                  if ( ++v216 >= v352 || v215 >= v324 )\n                    break;\n                  v214 = (unsigned int *)off_49F6D0;\n                }\n                v38 = v385;\n                v209 = v391;\n                v210 = (signed int)v348;\n                v211 = v392;\n              }\n              v34 = qword_4F9D28;\n              *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v240) + 4 * v209) = v215;\n              v220 = v324;\n              v221 = v403;\n              if ( v215 < v324 )\n                v221 = v371;\n              v403 = v221;\n              v222 = v387;\n              if ( v215 < v324 )\n                v222 = v237;\n              v387 = v222;\n              if ( v215 <= v324 )\n                v220 = v215;\n              v324 = v220;\n              v17 = a12;\n              v208 = v330;\n              v212 = v381;\n            }\n          }\n          ++v213;\n        }\n        while ( v213 != v212 );\n        LODWORD(v121) = v403;\n        LODWORD(v348) = v387;\n        v173 = v410;\n        v174 = v405;\n        if ( v353 > 0 )\n          goto LABEL_298;\n      }\n      else\n      {\n        v174 = 1;\n        LODWORD(v121) = v403;\n        LODWORD(v348) = v387;\n        if ( v353 > 0 )\n          goto LABEL_298;\n      }\n    }\n    else\n    {\n      v173 = v17 / 4;\n      v174 = 1;\n      if ( v353 > 0 )\n      {\nLABEL_298:\n        v175 = dword_4FA12C;\n        goto LABEL_414;\n      }\n    }\n    if ( v401 < 2 )\n      v175 = dword_4FA130;\n    else\n      v175 = dword_4FA138;\nLABEL_414:\n    v241 = (float)(v324 - v175);\n    if ( (float)(v351 * (float)v175) > v241 )\n      goto LABEL_453;\n    if ( (float)((float)v175 * v350) <= v241 )\n    {\n      v411 = v173;\n      v281 = 1LL;\n      v328 = v348;\n      v374 = v121;\n      v326 = v121;\n      do\n      {\n        v282 = v374 + *((_DWORD *)qword_4F9F60 + v281);\n        v283 = v38 - (v374 + *((_DWORD *)qword_4F9F60 + v281));\n        if ( (signed int)(v38 - (v374 + *((_DWORD *)qword_4F9F60 + v281))) < 1 )\n          v283 = v374 + *((_DWORD *)qword_4F9F60 + v281) - v38;\n        if ( v283 <= v17 )\n        {\n          v284 = v348 + *((_DWORD *)qword_4F9F68 + v281);\n          v343 = v284;\n          v285 = v284 - v392;\n          v286 = -v285;\n          if ( -v285 < 1 )\n            v286 = v285;\n          if ( v286 <= v17 )\n          {\n            v287 = v17 + v285;\n            v288 = (signed int)(v17 + v374 + *((_DWORD *)qword_4F9F60 + v281) - v38);\n            if ( !*(_DWORD *)(v34[v287] + 4 * v288) )\n            {\n              v289 = (unsigned int *)off_49F6D0;\n              if ( *((_DWORD *)off_49F6D0 + 18100)\n                && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n              {\n                v365 = *((_DWORD *)off_49F6D0 + 15) / 2;\n              }\n              else\n              {\n                v365 = *((_DWORD *)off_49F6D0 + 15);\n              }\n              v290 = v354\n                   * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v282 - v376))\n                    + *((_DWORD *)qword_4F9F18 + (signed int)(4 * v343 - v375))) >> 16;\n              if ( (signed int)v352 > 0 )\n              {\n                v399 = v287;\n                v291 = 0LL;\n                while ( 1 )\n                {\n                  v292 = v393((unsigned int)v349, v395, v343 + (unsigned int)v291, v282, v365, v289[13]);\n                  if ( v349 >= 4 )\n                  {\n                    v294 = 0LL;\n                    do\n                    {\n                      v293 = *(_QWORD *)(v394 + 8 * v291);\n                      v290 += *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v293 + 8 * v294 + 6)\n                              - (unsigned __int64)*(unsigned __int16 *)(v292 + 8 * v294 + 6))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v293 + 8 * v294 + 4)\n                              - (unsigned __int64)*(unsigned __int16 *)(v292 + 8 * v294 + 4))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v293 + 8 * v294 + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(v292 + 8 * v294 + 2))\n                            + *((_DWORD *)qword_4F9DE8\n                              + *(unsigned __int16 *)(v293 + 8 * v294)\n                              - (unsigned __int64)*(unsigned __int16 *)(v292 + 8 * v294));\n                      ++v294;\n                    }\n                    while ( v400 != (_DWORD)v294 );\n                  }\n                  if ( ++v291 >= v352 || v290 >= v324 )\n                    break;\n                  v289 = (unsigned int *)off_49F6D0;\n                }\n                v38 = v385;\n                v287 = v399;\n              }\n              v34 = qword_4F9D28;\n              *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v287) + 4 * v288) = v290;\n              v295 = v324;\n              v296 = v326;\n              if ( v290 < v324 )\n                v296 = v282;\n              v326 = v296;\n              v297 = v328;\n              if ( v290 < v324 )\n                v297 = v343;\n              v328 = v297;\n              if ( v290 <= v324 )\n                v295 = v290;\n              v324 = v295;\n              v17 = a12;\n            }\n          }\n        }\n        ++v281;\n      }\n      while ( v281 != 25 );\n      if ( v353 <= 0 )\n      {\n        if ( v401 < 2 )\n          v299 = dword_4FA130;\n        else\n          v299 = dword_4FA138;\n        v300 = (float)(v324 - v299);\n        if ( (float)(v351 * (float)v299) > v300 )\n          goto LABEL_188;\n        if ( (unsigned __int8)v174 | ((float)((float)v299 * v350) > v300) )\n          goto LABEL_417;\n      }\n      else\n      {\n        v298 = (float)(v324 - dword_4FA12C);\n        if ( (float)(v351 * (float)dword_4FA12C) > v298 )\n          goto LABEL_188;\n        if ( (unsigned __int8)v174 | ((float)((float)dword_4FA12C * v350) > v298) )\n          goto LABEL_417;\n      }\n      v301 = 1;\n      while ( 1 )\n      {\n        v302 = 0LL;\n        v303 = 0;\n        v388 = v301;\n        do\n        {\n          v304 = v374 + v301 * dword_4908B0[v302];\n          v305 = v38 - (v374 + v301 * dword_4908B0[v302]);\n          if ( (signed int)(v38 - (v374 + v301 * dword_4908B0[v302])) < 1 )\n            v305 = v374 + v301 * dword_4908B0[v302] - v38;\n          if ( v305 <= v17 )\n          {\n            v306 = v348 + v301 * dword_4908F0[v302];\n            v344 = v306;\n            v307 = v306 - v392;\n            v308 = -v307;\n            if ( -v307 < 1 )\n              v308 = v307;\n            if ( v308 <= v17 )\n            {\n              v309 = v17 + v307;\n              v310 = (signed int)(v17 + v374 + v301 * dword_4908B0[v302] - v38);\n              if ( !*(_DWORD *)(v34[v309] + 4 * v310) )\n              {\n                v311 = (unsigned int *)off_49F6D0;\n                if ( *((_DWORD *)off_49F6D0 + 18100)\n                  && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n                {\n                  v366 = *((_DWORD *)off_49F6D0 + 15) / 2;\n                }\n                else\n                {\n                  v366 = *((_DWORD *)off_49F6D0 + 15);\n                }\n                v312 = v354\n                     * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v304 - v376))\n                      + *((_DWORD *)qword_4F9F18 + (signed int)(4 * v344 - v375))) >> 16;\n                if ( (signed int)v352 > 0 )\n                {\n                  v384 = v309;\n                  v313 = 0LL;\n                  while ( 1 )\n                  {\n                    v314 = v393((unsigned int)v349, v395, v344 + (unsigned int)v313, v304, v366, v311[13]);\n                    if ( v349 >= 4 )\n                    {\n                      v316 = 0LL;\n                      do\n                      {\n                        v315 = *(_QWORD *)(v394 + 8 * v313);\n                        v312 += *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v315 + 8 * v316 + 6)\n                                - (unsigned __int64)*(unsigned __int16 *)(v314 + 8 * v316 + 6))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v315 + 8 * v316 + 4)\n                                - (unsigned __int64)*(unsigned __int16 *)(v314 + 8 * v316 + 4))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v315 + 8 * v316 + 2)\n                                - (unsigned __int64)*(unsigned __int16 *)(v314 + 8 * v316 + 2))\n                              + *((_DWORD *)qword_4F9DE8\n                                + *(unsigned __int16 *)(v315 + 8 * v316)\n                                - (unsigned __int64)*(unsigned __int16 *)(v314 + 8 * v316));\n                        ++v316;\n                      }\n                      while ( v400 != (_DWORD)v316 );\n                    }\n                    if ( ++v313 >= v352 || v312 >= v324 )\n                      break;\n                    v311 = (unsigned int *)off_49F6D0;\n                  }\n                  v301 = v388;\n                  v309 = v384;\n                }\n                v34 = qword_4F9D28;\n                *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v309) + 4 * v310) = v312;\n                v317 = v324;\n                v318 = v326;\n                if ( v312 < v324 )\n                  v318 = v304;\n                v326 = v318;\n                v319 = v328;\n                if ( v312 < v324 )\n                  v319 = v344;\n                v328 = v319;\n                if ( v312 < v324 )\n                  v303 = 1;\n                if ( v312 <= v324 )\n                  v317 = v312;\n                v324 = v317;\n                v17 = a12;\n                v38 = v385;\n              }\n            }\n          }\n          ++v302;\n        }\n        while ( v302 != 16 );\n        if ( v303 )\n        {\n          if ( v353 <= 0 )\n          {\n            if ( v401 < 2 )\n              v320 = dword_4FA130;\n            else\n              v320 = dword_4FA138;\n          }\n          else\n          {\n            v320 = dword_4FA12C;\n          }\n          v321 = (float)(v324 - v320);\n          if ( (float)(v351 * (float)v320) > v321 )\n            goto LABEL_188;\n          if ( (float)((float)v320 * v350) > v321 )\n            goto LABEL_417;\n        }\n        v323 = __OFSUB__(v301, v411);\n        v322 = v301++ - v411 < 0;\n        if ( !(v322 ^ v323) )\n          goto LABEL_417;\n      }\n    }\n    goto LABEL_416;\n  }\nLABEL_188:\n  LODWORD(v121) = v326;\n  LODWORD(v348) = v328;\n  if ( v17 <= 0 )\n  {\nLABEL_189:\n    LOWORD(v326) = v121;\n    LOWORD(v328) = v348;\n    goto LABEL_489;\n  }\nLABEL_454:\n  v261 = 0;\n  v328 = v348;\n  v326 = v121;\n  do\n  {\n    v383 = v261;\n    v262 = 1;\n    v263 = 0LL;\n    v373 = v121;\n    do\n    {\n      v264 = v121 + dword_4896B0[v263];\n      v265 = v38 - (v121 + dword_4896B0[v263]);\n      if ( (signed int)(v38 - (v121 + dword_4896B0[v263])) < 1 )\n        v265 = v121 + dword_4896B0[v263] - v38;\n      if ( v265 <= v17 )\n      {\n        v266 = v348 + dword_4896C0[v263];\n        v342 = v266;\n        v267 = v266 - v392;\n        v268 = -v267;\n        if ( -v267 < 1 )\n          v268 = v267;\n        if ( v268 <= v17 )\n        {\n          v269 = v17 + v267;\n          v270 = (signed int)(v17 + v121 + dword_4896B0[v263] - v38);\n          if ( !*(_DWORD *)(v34[v269] + 4 * v270) )\n          {\n            v271 = (unsigned int *)off_49F6D0;\n            if ( *((_DWORD *)off_49F6D0 + 18100)\n              && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n            {\n              v364 = *((_DWORD *)off_49F6D0 + 15) / 2;\n            }\n            else\n            {\n              v364 = *((_DWORD *)off_49F6D0 + 15);\n            }\n            v272 = v354\n                 * (*((_DWORD *)qword_4F9F18 + (signed int)(4 * v264 - v376))\n                  + *((_DWORD *)qword_4F9F18 + (signed int)(4 * v342 - v375))) >> 16;\n            if ( (signed int)v352 > 0 )\n            {\n              v398 = v269;\n              v273 = 0LL;\n              while ( 1 )\n              {\n                v274 = v393((unsigned int)v349, v395, v342 + (unsigned int)v273, v264, v364, v271[13]);\n                if ( v349 >= 4 )\n                {\n                  v276 = 0LL;\n                  do\n                  {\n                    v275 = *(_QWORD *)(v394 + 8 * v273);\n                    v272 += *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v275 + 8 * v276 + 6)\n                            - (unsigned __int64)*(unsigned __int16 *)(v274 + 8 * v276 + 6))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v275 + 8 * v276 + 4)\n                            - (unsigned __int64)*(unsigned __int16 *)(v274 + 8 * v276 + 4))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v275 + 8 * v276 + 2)\n                            - (unsigned __int64)*(unsigned __int16 *)(v274 + 8 * v276 + 2))\n                          + *((_DWORD *)qword_4F9DE8\n                            + *(unsigned __int16 *)(v275 + 8 * v276)\n                            - (unsigned __int64)*(unsigned __int16 *)(v274 + 8 * v276));\n                    ++v276;\n                  }\n                  while ( v400 != (_DWORD)v276 );\n                }\n                if ( ++v273 >= v352 || v272 >= v324 )\n                  break;\n                v271 = (unsigned int *)off_49F6D0;\n              }\n              LODWORD(v121) = v373;\n              v269 = v398;\n            }\n            v34 = qword_4F9D28;\n            *(_DWORD *)(*((_QWORD *)qword_4F9D28 + v269) + 4 * v270) = v272;\n            v277 = v324;\n            v278 = v326;\n            if ( v272 < v324 )\n              v278 = v264;\n            v326 = v278;\n            v279 = v328;\n            if ( v272 < v324 )\n              v279 = v342;\n            v328 = v279;\n            if ( v272 < v324 )\n              v262 = 0;\n            if ( v272 <= v324 )\n              v277 = v272;\n            v324 = v277;\n            v17 = a12;\n          }\n        }\n        v38 = v385;\n      }\n      ++v263;\n    }\n    while ( v263 != 4 );\n    if ( v262 )\n      break;\n    v261 = v383 + 1;\n    LODWORD(v348) = v328;\n    LODWORD(v121) = v326;\n  }\n  while ( v383 + 1 < v17 );\nLABEL_489:\n  *a10 = v326 - v407;\n  *a11 = v328 - v406;\n  return (unsigned int)v324;\n}\n", 
            "funcStartAddr": "0x417500L", 
            "funcEndAddr": "0x41a19aL", 
            "funcName": "sub_417500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41A1A0(int a1, __int64 a2, int a3, signed int a4, int a5, __int64 a6, __int64 a7, __int64 a8, unsigned int a9, int a10, int a11)\n{\n  unsigned int v11; // er13\n  int v12; // eax\n  __int64 v13; // rcx\n  signed __int64 v14; // rbp\n  __int64 v15; // rbx\n  int v16; // er15\n  __int64 v17; // ST20_8\n  __int64 v18; // rbp\n  __int64 v19; // ST48_8\n  __int64 v20; // r15\n  __int64 v21; // r15\n  __int64 v22; // r15\n  signed __int64 v24; // [rsp+8h] [rbp-100h]\n  unsigned int v25; // [rsp+14h] [rbp-F4h]\n  int v26; // [rsp+28h] [rbp-E0h]\n  unsigned int v27; // [rsp+2Ch] [rbp-DCh]\n  __int64 v28; // [rsp+30h] [rbp-D8h]\n  int v29; // [rsp+38h] [rbp-D0h]\n  __int64 v30; // [rsp+40h] [rbp-C8h]\n  unsigned int v31; // [rsp+50h] [rbp-B8h]\n  signed int v32; // [rsp+54h] [rbp-B4h]\n  unsigned int v33; // [rsp+5Ch] [rbp-ACh]\n  unsigned int v34; // [rsp+60h] [rbp-A8h]\n  unsigned int v35; // [rsp+64h] [rbp-A4h]\n  __int64 v36; // [rsp+68h] [rbp-A0h]\n  int v37; // [rsp+70h] [rbp-98h]\n  int v38; // [rsp+74h] [rbp-94h]\n  int v39; // [rsp+78h] [rbp-90h]\n  int v40; // [rsp+7Ch] [rbp-8Ch]\n  int v41; // [rsp+80h] [rbp-88h]\n  int v42; // [rsp+84h] [rbp-84h]\n  int v43; // [rsp+88h] [rbp-80h]\n  int v44; // [rsp+8Ch] [rbp-7Ch]\n  int v45; // [rsp+90h] [rbp-78h]\n  int v46; // [rsp+94h] [rbp-74h]\n  int v47; // [rsp+98h] [rbp-70h]\n  int v48; // [rsp+9Ch] [rbp-6Ch]\n  int v49; // [rsp+A0h] [rbp-68h]\n  int v50; // [rsp+A4h] [rbp-64h]\n  int v51; // [rsp+A8h] [rbp-60h]\n  int v52; // [rsp+ACh] [rbp-5Ch]\n  __int64 v53; // [rsp+B0h] [rbp-58h]\n  __int64 v54; // [rsp+B8h] [rbp-50h]\n  __int64 v55; // [rsp+C0h] [rbp-48h]\n  __int64 v56; // [rsp+C8h] [rbp-40h]\n  __int64 v57; // [rsp+D0h] [rbp-38h]\n\n  v54 = a6;\n  v26 = a3;\n  v53 = a2;\n  v25 = a9;\n  v32 = a4;\n  if ( a4 > 0 )\n  {\n    v36 = *(_QWORD *)(a7 + 6448);\n    v27 = *(_DWORD *)(a7 + 6392);\n    v31 = a5 + 4 * a1;\n    v28 = 0LL;\n    v11 = *(_DWORD *)(a7 + 6396);\n    while ( v26 <= 0 )\n    {\nLABEL_8:\n      v28 += 4LL;\n      if ( (signed int)v28 >= v32 )\n        return v25;\n    }\n    v12 = v54 + 4 * (v28 + v53);\n    v57 = v28 | 1;\n    v35 = v12 + 4;\n    v56 = (unsigned int)v28 & 0xFFFFFFFC | 2LL;\n    v34 = v12 + 8;\n    v55 = v28 | 3;\n    v30 = (unsigned int)(v54 + 4 * (v28 + v53));\n    v33 = v12 + 12;\n    v13 = v31;\n    v14 = 0LL;\n    while ( 1 )\n    {\n      v24 = v14;\n      v15 = *(_QWORD *)(a8 + 8 * v28);\n      v16 = *(unsigned __int16 *)(v15 + 2 * v14);\n      v17 = *(_QWORD *)(a8 + 8 * v28);\n      v18 = v13;\n      v37 = v16 - (unsigned __int16)qword_49FAB8(v36, v30, (unsigned int)v13, v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v15 + 2 * v24 + 2);\n      v38 = v15 - (unsigned __int16)qword_49FAB8(v36, (unsigned int)v30, (unsigned int)(v18 + 4), v11, v27);\n      v19 = (unsigned int)v24 & 0xFFFFFFFC;\n      LODWORD(v15) = *(unsigned __int16 *)(v17 + 2 * v19 + 4);\n      v29 = v18;\n      v39 = v15 - (unsigned __int16)qword_49FAB8(v36, (unsigned int)v30, (unsigned int)(v18 + 8), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v17 + 2 * v24 + 6);\n      v40 = v15 - (unsigned __int16)qword_49FAB8(v36, v30, (unsigned int)(v18 + 12), v11, v27);\n      v20 = *(_QWORD *)(a8 + 8 * v57);\n      LODWORD(v15) = *(unsigned __int16 *)(v20 + 2 * v24);\n      v41 = v15 - (unsigned __int16)qword_49FAB8(v36, v35, v18, v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v20 + 2 * v24 + 2);\n      v42 = v15 - (unsigned __int16)qword_49FAB8(v36, v35, (unsigned int)(v18 + 4), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v20 + 2 * v19 + 4);\n      v43 = v15 - (unsigned __int16)qword_49FAB8(v36, v35, (unsigned int)(v18 + 8), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v20 + 2 * v24 + 6);\n      v44 = v15 - (unsigned __int16)qword_49FAB8(v36, v35, (unsigned int)(v18 + 12), v11, v27);\n      v21 = *(_QWORD *)(a8 + 8 * v56);\n      LODWORD(v15) = *(unsigned __int16 *)(v21 + 2 * v24);\n      v45 = v15 - (unsigned __int16)qword_49FAB8(v36, v34, v18, v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v21 + 2 * v24 + 2);\n      v46 = v15 - (unsigned __int16)qword_49FAB8(v36, v34, (unsigned int)(v18 + 4), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v21 + 2 * v19 + 4);\n      v47 = v15 - (unsigned __int16)qword_49FAB8(v36, v34, (unsigned int)(v18 + 8), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v21 + 2 * v24 + 6);\n      v48 = v15 - (unsigned __int16)qword_49FAB8(v36, v34, (unsigned int)(v18 + 12), v11, v27);\n      v22 = *(_QWORD *)(a8 + 8 * v55);\n      LODWORD(v15) = *(unsigned __int16 *)(v22 + 2 * v24);\n      v49 = v15 - (unsigned __int16)qword_49FAB8(v36, v33, v18, v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v22 + 2 * v24 + 2);\n      v50 = v15 - (unsigned __int16)qword_49FAB8(v36, v33, (unsigned int)(v18 + 4), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v22 + 2 * v19 + 4);\n      v51 = v15 - (unsigned __int16)qword_49FAB8(v36, v33, (unsigned int)(v18 + 8), v11, v27);\n      LODWORD(v15) = *(unsigned __int16 *)(v22 + 2 * v24 + 6);\n      v52 = v15 - (unsigned __int16)qword_49FAB8(v36, v33, (unsigned int)(v18 + 12), v11, v27);\n      if ( !a11 )\n      {\n        v25 += sub_445CD0(&v37, *((_DWORD *)dest + 6));\n        if ( (signed int)v25 > a10 )\n          break;\n      }\n      v14 = v24 + 4;\n      v13 = (unsigned int)(v29 + 16);\n      if ( (signed int)v24 + 4 >= v26 )\n        goto LABEL_8;\n    }\n  }\n  return v25;\n}\n", 
            "funcStartAddr": "0x41a1a0L", 
            "funcEndAddr": "0x41a68fL", 
            "funcName": "sub_41A1A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41A690(__int64 a1, __int16 a2, int a3, int a4, __int64 a5, int a6, double a7, __int16 a8, __int16 a9, _WORD *a10, _WORD *a11, int a12, int a13, int a14, int a15)\n{\n  int v15; // ecx\n  __int64 v16; // rax\n  __int64 v17; // rdi\n  double v18; // xmm0_8\n  int v19; // esi\n  int v20; // ebp\n  __int16 v21; // di\n  int v22; // ecx\n  int v23; // ebx\n  int v24; // esi\n  int v25; // ebx\n  void *v26; // rbp\n  signed int v27; // edi\n  int v28; // ebx\n  int v29; // er9\n  __int64 v30; // rax\n  __int64 v31; // r12\n  int v32; // ebp\n  int v33; // er14\n  unsigned int v34; // er15\n  int v35; // eax\n  signed int v36; // er13\n  __int64 v37; // r10\n  __int64 v38; // rax\n  __int64 v39; // ST80_8\n  __int64 v40; // ST78_8\n  int v41; // er15\n  __int64 v42; // rax\n  __int64 v43; // ST48_8\n  __int64 v44; // ST70_8\n  signed int v45; // er12\n  __int64 v46; // rbx\n  signed int v47; // eax\n  _WORD *v48; // rbp\n  _WORD *v49; // rdi\n  unsigned int v50; // esi\n  int v51; // er8\n  signed int v52; // er9\n  signed __int64 v53; // rbx\n  int v54; // er15\n  int v55; // ecx\n  unsigned int v56; // er12\n  int v57; // edx\n  int v58; // ST78_4\n  int v59; // er13\n  signed int v60; // er14\n  __int64 v61; // rbp\n  signed int v62; // eax\n  signed int v64; // [rsp+4h] [rbp-84h]\n  int v65; // [rsp+8h] [rbp-80h]\n  int v66; // [rsp+Ch] [rbp-7Ch]\n  unsigned int v67; // [rsp+18h] [rbp-70h]\n  __int64 v68; // [rsp+20h] [rbp-68h]\n  int v69; // [rsp+28h] [rbp-60h]\n  __int64 v70; // [rsp+30h] [rbp-58h]\n  __int64 v71; // [rsp+38h] [rbp-50h]\n  signed int v72; // [rsp+40h] [rbp-48h]\n\n  v68 = a5;\n  v69 = a4;\n  v71 = a1;\n  v15 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v16 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v16 + 532) )\n      v15 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v17 = *((_QWORD *)*(&base + a3 + v15) + a2);\n  v18 = a7 * 65536.0 + 0.5;\n  v65 = *((_DWORD *)dest + 2 * a6 + 20);\n  v64 = *((_DWORD *)dest + 2 * a6 + 21);\n  v19 = *(_DWORD *)(v17 + 6392);\n  v70 = v17;\n  v20 = *(_DWORD *)(v17 + 6396);\n  *a10 *= 4;\n  v21 = 4 * *a11;\n  *a11 *= 4;\n  v22 = (signed __int16)*a10;\n  v23 = v22 + 4 * v69;\n  if ( v23 < 2 || v23 >= 4 * (v19 - v65) + 2 || (v24 = v21, v25 = v21 + 4 * a5, v25 < 2) || v25 >= (4 * (v20 - v64) | 2) )\n  {\n    v26 = sub_476120;\n    v24 = v21;\n  }\n  else\n  {\n    v26 = sub_4761C0;\n  }\n  v27 = (signed int)v18;\n  qword_49FAB8 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v26;\n  v28 = (a8 - v22) % 4;\n  v29 = a9;\n  v30 = *(_QWORD *)qword_4F9D68;\n  *(_OWORD *)(v30 + 32) = 0LL;\n  *(_OWORD *)(v30 + 16) = 0LL;\n  *(_OWORD *)v30 = 0LL;\n  v31 = (unsigned int)a14;\n  *(_BYTE *)(v30 + 48) = 0;\n  v32 = (a9 - v24) % 4;\n  if ( *((_DWORD *)dest + 6) )\n  {\n    v33 = (signed __int16)*a10;\n    v34 = (signed __int16)*a11;\n    v35 = sub_41A1A0(\n            v69,\n            a5,\n            v65,\n            v64,\n            v33,\n            v34,\n            v70,\n            v71,\n            v27 * (*((_DWORD *)qword_4F9F18 + v33 - a8) + *((_DWORD *)qword_4F9F18 + (signed int)(v34 - a9))) >> 16,\n            a14,\n            a15);\n    v29 = a9;\n    *(_BYTE *)(*((_QWORD *)qword_4F9D68 + 3) + 3LL) = 1;\n    v36 = 0;\n    if ( v35 >= a14 )\n      v33 = 0;\n    if ( v35 < a14 )\n      v36 = v34;\n    if ( v35 <= a14 )\n      v31 = (unsigned int)v35;\n  }\n  else\n  {\n    *(_BYTE *)(*((_QWORD *)qword_4F9D68 + 3) + 3LL) = 1;\n    v33 = (signed __int16)*a10;\n    v36 = (signed __int16)*a11;\n  }\n  v37 = v31;\n  v66 = v29;\n  if ( v32 | v28 )\n  {\n    v38 = (signed __int16)*a10;\n    v39 = v38;\n    v40 = v28;\n    v41 = v28 + v38;\n    v42 = (signed __int16)*a11;\n    v43 = v42;\n    v44 = v32;\n    v45 = v32 + v42;\n    v46 = v37;\n    v47 = sub_41A1A0(\n            v69,\n            v68,\n            v65,\n            v64,\n            v41,\n            (unsigned int)(v32 + v42),\n            v70,\n            v71,\n            v27 * (*((_DWORD *)qword_4F9F18 + v41 - a8) + *((_DWORD *)qword_4F9F18 + v32 + (signed int)v42 - v29)) >> 16,\n            v37,\n            a15);\n    v37 = v46;\n    v48 = a10;\n    v49 = a11;\n    *(_BYTE *)(*((_QWORD *)qword_4F9D68 + v43 + v44 + 3 - (signed __int16)*a11) + v40 + v39 + 3 - (signed __int16)*a10) = 1;\n    if ( v47 < (signed int)v46 )\n      v33 = v41;\n    if ( v47 < (signed int)v46 )\n      v36 = v45;\n    if ( v47 <= (signed int)v46 )\n      v37 = (unsigned int)v47;\n  }\n  else\n  {\n    v49 = a11;\n    v48 = a10;\n  }\n  v67 = 0;\n  v50 = v36;\n  v51 = v33;\n  do\n  {\n    v52 = 1;\n    v53 = 4611686018427387900LL;\n    v72 = v36;\n    do\n    {\n      while ( 1 )\n      {\n        v54 = dword_4896C0[v53] + v33;\n        v55 = (signed __int16)*v48 - v54;\n        if ( v55 < 1 )\n          v55 = dword_4896C0[v53] + v33 - (signed __int16)*v48;\n        if ( v55 <= 3 )\n        {\n          v56 = *(_DWORD *)((char *)qword_4896D0 + v53 * 4) + v36;\n          v57 = (signed __int16)*v49 - v56;\n          if ( v57 < 1 )\n            v57 = *(_DWORD *)((char *)qword_4896D0 + v53 * 4) + v36 - (signed __int16)*v49;\n          if ( v57 <= 3\n            && !*(_BYTE *)(*((_QWORD *)qword_4F9D68\n                           + *(signed int *)((char *)qword_4896D0 + v53 * 4)\n                           + (signed __int64)v36\n                           - (signed __int16)*v49\n                           + 3)\n                         + dword_4896C0[v53]\n                         + (signed __int64)v33\n                         - (signed __int16)*v48\n                         + 3) )\n          {\n            break;\n          }\n        }\n        ++v53;\n        if ( !(v53 * 4) )\n          goto LABEL_48;\n      }\n      v58 = v51;\n      v59 = v33;\n      v60 = v52;\n      v61 = v37;\n      v62 = sub_41A1A0(\n              v69,\n              v68,\n              v65,\n              v64,\n              v54,\n              v56,\n              v70,\n              v71,\n              (signed int)v18\n            * (*((_DWORD *)qword_4F9F18 + v54 - a8) + *((_DWORD *)qword_4F9F18 + (signed int)(v56 - v66))) >> 16,\n              v37,\n              a15);\n      v52 = v60;\n      v33 = v59;\n      v51 = v58;\n      v37 = v61;\n      v48 = a10;\n      v49 = a11;\n      v36 = v72;\n      *(_BYTE *)(*((_QWORD *)qword_4F9D68 + (signed int)(v56 + 3 - (signed __int16)*a11))\n               + v54\n               + 3\n               - (signed __int16)*a10) = 1;\n      if ( v62 < (signed int)v37 )\n        v51 = v54;\n      if ( v62 < (signed int)v37 )\n        v50 = v56;\n      if ( v62 < (signed int)v37 )\n        v52 = 0;\n      if ( v62 <= (signed int)v37 )\n        v37 = (unsigned int)v62;\n      ++v53;\n    }\n    while ( v53 * 4 );\nLABEL_48:\n    if ( v52 )\n      break;\n    v33 = v51;\n    v36 = v50;\n    ++v67;\n  }\n  while ( v67 < 7 );\n  *v48 = v51;\n  *v49 = v50;\n  return (unsigned int)v37;\n}\n", 
            "funcStartAddr": "0x41a690L", 
            "funcEndAddr": "0x41abb9L", 
            "funcName": "sub_41A690"
        }, 
        {
            "decompiledFuncCode": "void sub_41ABC0()\n{\n  int v0; // eax\n  int v1; // edx\n  int v2; // eax\n  __int64 v3; // rdx\n  signed int v4; // eax\n\n  if ( *((_DWORD *)off_49F6D0 + 6) )\n  {\n    v0 = *((_DWORD *)off_49F6D0 + 38);\n    v1 = *((_DWORD *)off_49F6D0 + 39);\n    if ( v0 )\n    {\n      v2 = v0 >> 4;\n      if ( v1 )\n      {\n        v3 = v2;\n        v4 = 1;\n        if ( !*((_DWORD *)qword_4F9E48 + v3) && !*((_DWORD *)qword_4F9E48 + v3 - 1) )\n          v4 = *((_DWORD *)qword_4F9E48 + v3 + 1) != 0;\n      }\n      else\n      {\n        v4 = *((_DWORD *)qword_4F9E48 + v2 - 1);\n      }\n    }\n    else if ( v1 )\n    {\n      v4 = *(_DWORD *)qword_4F9E48;\n    }\n    else\n    {\n      v4 = 0;\n    }\n    dword_4FA0D4 = v4;\n  }\n}\n", 
            "funcStartAddr": "0x41abc0L", 
            "funcEndAddr": "0x41ac2cL", 
            "funcName": "sub_41ABC0"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_41AC30(int a1, int a2)\n{\n  _DWORD *result; // rax\n  unsigned int v3; // edi\n  _QWORD *v4; // r8\n  int v5; // er10\n  int v6; // er11\n  __int64 v7; // rdx\n  __int64 v8; // rdx\n  __int64 v9; // rdx\n  __int64 v10; // rdx\n  __int64 v11; // rdx\n  __int64 v12; // rdx\n  __int64 v13; // rdx\n\n  result = off_49F6D0;\n  v3 = a1 - 9;\n  if ( *(_DWORD *)off_49F6D0 > 0 )\n    *((_DWORD *)qword_4F9E48 + (signed int)(*((_DWORD *)off_49F6D0 + 38) >> 4)) = v3 < 2;\n  if ( v3 <= 1 && result[6] )\n  {\n    v4 = qword_4F9DD0;\n    v5 = 0;\n    do\n    {\n      v6 = 0;\n      do\n      {\n        if ( a2 > 0 )\n        {\n          v7 = 0LL;\n          do\n            **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2))) + 8 * v7++)\n                        + 8LL) = 0;\n          while ( a2 != v7 );\n          if ( a2 > 0 )\n          {\n            v8 = 0LL;\n            do\n              **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2)))\n                                      + 8 * v8++)\n                          + 16LL) = 0;\n            while ( a2 != v8 );\n            if ( a2 > 0 )\n            {\n              v9 = 0LL;\n              do\n                **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2)))\n                                        + 8 * v9++)\n                            + 24LL) = 0;\n              while ( a2 != v9 );\n              if ( a2 > 0 )\n              {\n                v10 = 0LL;\n                do\n                  **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2)))\n                                          + 8 * v10++)\n                              + 32LL) = 0;\n                while ( a2 != v10 );\n                if ( a2 > 0 )\n                {\n                  v11 = 0LL;\n                  do\n                    **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2)))\n                                            + 8 * v11++)\n                                + 40LL) = 0;\n                  while ( a2 != v11 );\n                  if ( a2 > 0 )\n                  {\n                    v12 = 0LL;\n                    do\n                      **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL * (v6 + (result[39] >> 2)))\n                                              + 8 * v12++)\n                                  + 48LL) = 0;\n                    while ( a2 != v12 );\n                    if ( a2 > 0 )\n                    {\n                      v13 = 0LL;\n                      do\n                        **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4[v5 + (result[38] >> 2)] + 8LL\n                                                                                         * (v6 + (result[39] >> 2)))\n                                                + 8 * v13++)\n                                    + 56LL) = 0;\n                      while ( a2 != v13 );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ++v6;\n      }\n      while ( v6 != 4 );\n      ++v5;\n    }\n    while ( v5 != 4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41ac30L", 
            "funcEndAddr": "0x41aeddL", 
            "funcName": "sub_41AC30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn error(__int64 a1, int a2)\n{\n  __int64 v2; // rcx\n  FILE *v3; // rdi\n\n  v2 = a1;\n  v3 = stderr;\n  fprintf(stderr, \"%s\\n\", v2);\n  sub_43C5F0((__int64)v3, (__int64)\"%s\\n\");\n  exit(a2);\n}\n", 
            "funcStartAddr": "0x41aee0L", 
            "funcEndAddr": "0x41af0aL", 
            "funcName": "error"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41AF10(int a1, unsigned int a2)\n{\n  _DWORD *v2; // rbx\n  unsigned int v3; // ebp\n\n  v2 = sub_4550B0(a2);\n  v3 = a1 + (unsigned __int64)qword_4F9DB0(v2);\n  sub_452760(v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x41af10L", 
            "funcEndAddr": "0x41af3eL", 
            "funcName": "sub_41AF10"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_41AF40@<rax>(__int64 a1@<rax>)\n{\n  int v1; // ebx\n  bool v2; // bp\n  int v3; // ecx\n  __int64 (__fastcall *v4)(__int64); // rax\n  int v5; // er15\n  int v6; // ebx\n  _DWORD *v7; // r14\n  int v8; // ebp\n  _DWORD *v9; // r14\n\n  v1 = 0;\n  v2 = *((_DWORD *)dest + 15) != 0;\n  v3 = *((_DWORD *)dest + 590);\n  if ( v3 == 1 )\n  {\n    sub_476500((const char *)dest + 424);\n    v4 = sub_4762E0;\n  }\n  else\n  {\n    if ( v3 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Output File Mode %d not supported\", a1);\n      error((__int64)byte_4F8250, 1);\n    }\n    sub_401230((const char *)dest + 424);\n    v4 = sub_401200;\n  }\n  LOBYTE(v1) = v2;\n  v5 = 2 * v1 + 1;\n  qword_4F9DB0 = v4;\n  v6 = 0;\n  v7 = sub_454990();\n  v8 = qword_4F9DB0(v7);\n  sub_452760(v7);\n  do\n  {\n    v9 = sub_4550B0(v6);\n    v8 += qword_4F9DB0(v9);\n    sub_452760(v9);\n    ++v6;\n  }\n  while ( v5 != v6 );\n  *((_DWORD *)off_49F6D8 + 373) = v8;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41af40L", 
            "funcEndAddr": "0x41b024L", 
            "funcName": "sub_41AF40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41B030()\n{\n  int v0; // ecx\n  unsigned int v1; // ebx\n\n  v0 = *((_DWORD *)dest + 590);\n  if ( v0 == 1 )\n  {\n    v1 = 0;\n    sub_476540();\n  }\n  else\n  {\n    if ( v0 )\n    {\n      snprintf(byte_4F8250, 0x12CuLL, \"Output File Mode %d not supported\");\n      error((__int64)byte_4F8250, 1);\n    }\n    sub_401270();\n    v1 = 1;\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x41b030L", 
            "funcEndAddr": "0x41b087L", 
            "funcName": "sub_41B030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41B090(_DWORD *a1, _DWORD *a2, __int64 a3, __m128i a4)\n{\n  _DWORD *v4; // r12\n  _DWORD *v5; // r15\n  __m128i v6; // xmm0\n  int v7; // eax\n  size_t v8; // rbx\n  _BYTE *v9; // rax\n  _BYTE *v10; // rcx\n  int v11; // edi\n  __int64 v12; // rsi\n  int v13; // eax\n  int v14; // edx\n  int v15; // ebp\n  unsigned int v16; // edi\n  unsigned __int64 v17; // rcx\n  unsigned int v18; // esi\n  _BYTE *v19; // rcx\n  _BYTE *v20; // rax\n  unsigned __int64 v21; // rax\n  __int64 result; // rax\n  _BYTE *v23; // rax\n  unsigned __int64 v24; // rax\n  unsigned int v25; // eax\n  int v26; // ecx\n  unsigned __int64 v27; // rbx\n  unsigned __int64 v28; // rax\n  unsigned __int64 v29; // rax\n  int v30; // edi\n  __int64 v31; // rbp\n  unsigned int v32; // ebx\n  unsigned int v33; // ett\n  unsigned int v34; // ecx\n  unsigned int v35; // er8\n  unsigned int v36; // eax\n  unsigned int v37; // edx\n  unsigned int v38; // edi\n  __int64 v39; // rsi\n  unsigned int v40; // er10\n  signed int v41; // eax\n  unsigned __int64 v42; // rcx\n  unsigned int v43; // eax\n  unsigned int v44; // ebx\n  unsigned int v45; // edx\n  unsigned int v46; // esi\n  int v47; // ebp\n  unsigned int v48; // ecx\n  unsigned int v49; // edi\n  char v50; // al\n  _BYTE *v51; // rax\n  unsigned __int64 v52; // rax\n  __int64 v53; // rsi\n  int v54; // ebx\n  int v55; // eax\n  unsigned int v56; // esi\n  unsigned int v57; // ecx\n  int v58; // edi\n  unsigned int v59; // edx\n  signed int v60; // er8\n  signed int v61; // er13\n  unsigned int v62; // er11\n  __int64 v63; // rbx\n  int v64; // ebp\n  bool v65; // r14\n  int v66; // esi\n  int v67; // ecx\n  const char *v68; // rdi\n  unsigned int v69; // [rsp+Ch] [rbp-3Ch]\n  __int64 v70; // [rsp+10h] [rbp-38h]\n\n  v70 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = _mm_cmpeq_epi32(a4, a4);\n  _mm_store_si128((__m128i *)&xmmword_49FAE0, v6);\n  _mm_store_si128((__m128i *)&xmmword_49FAD0, v6);\n  v7 = a1[18118] * a1[18117];\n  LODWORD(n) = a1[18118] * a1[18117];\n  if ( a2[16] == 6 && a2[43] + 1 != v7 )\n    error((__int64)\"wrong pps->pic_size_in_map_units_minus1 for used SPS and FMO type 6\", 500);\n  if ( qword_49FAC8 )\n    free(qword_49FAC8);\n  v8 = (unsigned int)n;\n  v9 = malloc((unsigned int)n);\n  v10 = v9;\n  qword_49FAC8 = v9;\n  if ( !v9 )\n  {\n    v68 = \"cannot allocated %d bytes for MapUnitToSliceGroupMap, exit\\n\";\nLABEL_137:\n    printf(v68, v8);\n    exit(-1);\n  }\n  v11 = a2[15];\n  if ( v11 )\n  {\n    v12 = (unsigned int)a2[16];\n    switch ( v12 )\n    {\n      case 0LL:\n        goto LABEL_9;\n      case 1LL:\n        if ( (_DWORD)v8 )\n        {\n          v39 = 0LL;\n          while ( 1 )\n          {\n            v10[v39] = ((unsigned int)v39 % v5[18117] + ((v11 + 1) * ((unsigned int)v39 / v5[18117]) >> 1)) % (v11 + 1);\n            if ( ++v39 >= (unsigned __int64)(unsigned int)n )\n              break;\n            v11 = v4[15];\n            v10 = qword_49FAC8;\n          }\n        }\n        goto LABEL_23;\n      case 2LL:\n        if ( (_DWORD)v8 )\n        {\n          *v9 = v11;\n          if ( (_DWORD)v8 != 1 )\n          {\n            v9[1] = v11;\n            v11 = v4[15];\n            if ( (unsigned int)n >= 3 )\n            {\n              v29 = 2LL;\n              do\n              {\n                *((_BYTE *)qword_49FAC8 + v29++) = v11;\n                v11 = v4[15];\n              }\n              while ( v29 < (unsigned int)n );\n            }\n          }\n        }\n        v30 = v11 - 1;\n        if ( v30 >= 0 )\n        {\n          v31 = v30;\n          do\n          {\n            v32 = v5[18117];\n            v33 = v4[v31 + 25];\n            v34 = v33 / v32;\n            v35 = v33 % v32;\n            v37 = v4[v31 + 33] % v32;\n            v36 = v4[v31 + 33] / v32;\n            if ( v33 / v32 <= v36 )\n            {\n              do\n              {\n                if ( v35 <= v37 )\n                {\n                  v38 = v35;\n                  do\n                    *((_BYTE *)qword_49FAC8 + v38++ + v34 * v5[18117]) = v31;\n                  while ( v38 <= v37 );\n                }\n                ++v34;\n              }\n              while ( v34 <= v36 );\n            }\n            --v31;\n          }\n          while ( (signed int)v31 >= 0 );\n        }\n        goto LABEL_23;\n      case 3LL:\n        v40 = v5[18163] * (v4[42] + 1);\n        if ( v40 >= (unsigned int)v8 )\n          v40 = v8;\n        if ( (_DWORD)v8 )\n        {\n          *v9 = 2;\n          v41 = 1;\n          if ( (_DWORD)v8 != 1 )\n          {\n            v10[1] = 2;\n            v41 = n;\n            if ( (unsigned int)n >= 3 )\n            {\n              v42 = 2LL;\n              do\n              {\n                *((_BYTE *)qword_49FAC8 + v42++) = 2;\n                v41 = n;\n              }\n              while ( v42 < (unsigned int)n );\n            }\n          }\n          if ( v41 != 0 )\n          {\n            v54 = v5[18117];\n            v55 = v4[41];\n            v56 = (unsigned int)(v5[18117] - v55) >> 1;\n            v57 = (unsigned int)(v5[18118] - v55) >> 1;\n            v58 = v55 - 1;\n            v59 = 0;\n            v60 = (unsigned int)(v5[18118] - v55) >> 1;\n            v61 = (unsigned int)(v5[18117] - v55) >> 1;\n            v69 = (unsigned int)(v5[18118] - v55) >> 1;\n            v62 = (unsigned int)(v5[18117] - v55) >> 1;\n            while ( 1 )\n            {\n              v63 = v56 + v57 * v54;\n              v64 = 0;\n              v65 = *((_BYTE *)qword_49FAC8 + v63) == 2;\n              if ( *((_BYTE *)qword_49FAC8 + v63) == 2 )\n                *((_BYTE *)qword_49FAC8 + v63) = v59 >= v40;\n              LOBYTE(v64) = v65;\n              if ( v58 != -1 || v56 != v62 )\n              {\n                if ( v58 != 1 || v56 != v61 )\n                {\n                  if ( v55 != -1 || v57 != v69 )\n                  {\n                    if ( v55 != 1 || v57 != v60 )\n                    {\n                      v56 += v58;\n                      v57 += v55;\n                    }\n                    else\n                    {\n                      v67 = v57 + 1;\n                      v60 = v5[18118] - 1;\n                      if ( v67 <= v60 )\n                        v60 = v67;\n                      v58 = 2 * v4[41] - 1;\n                      v55 = 0;\n                      v57 = v60;\n                    }\n                  }\n                  else\n                  {\n                    v55 = 0;\n                    if ( (--v57 & 0x80000000) != 0 )\n                      v57 = 0;\n                    v58 = 1 - 2 * v4[41];\n                    v69 = v57;\n                  }\n                }\n                else\n                {\n                  v66 = v56 + 1;\n                  v61 = v5[18117] - 1;\n                  if ( v66 <= v61 )\n                    v61 = v66;\n                  v55 = 1 - 2 * v4[41];\n                  v58 = 0;\n                  v56 = v61;\n                }\n              }\n              else\n              {\n                v58 = 0;\n                if ( (--v56 & 0x80000000) != 0 )\n                  v56 = 0;\n                v55 = 2 * v4[41] - 1;\n                v62 = v56;\n              }\n              v59 += v64;\n              if ( v59 >= (unsigned int)n )\n                break;\n              v54 = v5[18117];\n            }\n          }\n        }\n        goto LABEL_23;\n      case 4LL:\n        v25 = v5[18163] * (v4[42] + 1);\n        if ( v25 >= (unsigned int)v8 )\n          v25 = v8;\n        if ( !(_DWORD)v8 )\n          goto LABEL_23;\n        v26 = v4[41];\n        v27 = (unsigned int)v8 - v25;\n        if ( !v26 )\n          v27 = v25;\n        v28 = 0LL;\n        if ( v27 <= 0 )\n          goto LABEL_49;\n        while ( 1 )\n        {\n          *((_BYTE *)qword_49FAC8 + v28++) = v26;\n          if ( v28 >= (unsigned int)n )\n            break;\n          v26 = v4[41];\n          if ( v28 >= v27 )\nLABEL_49:\n            LOBYTE(v26) = 1 - v26;\n        }\n        goto LABEL_23;\n      case 5LL:\n        v43 = v5[18163] * (v4[42] + 1);\n        if ( v43 >= (unsigned int)v8 )\n          v43 = v8;\n        v44 = v8 - v43;\n        if ( !v4[41] )\n          v44 = v43;\n        v45 = v5[18117];\n        if ( v45 )\n        {\n          v46 = v5[18118];\n          v47 = 0;\n          v48 = 0;\n          do\n          {\n            if ( v46 )\n            {\n              v49 = 0;\n              do\n              {\n                v50 = *((_BYTE *)v4 + 164);\n                if ( v49 + v47 < v44 )\n                  v50 = 1 - v50;\n                *((_BYTE *)qword_49FAC8 + v48 + v49++ * v5[18117]) = v50;\n                v46 = v5[18118];\n              }\n              while ( v49 < v46 );\n              v45 = v5[18117];\n              v47 += v49;\n            }\n            else\n            {\n              v46 = 0;\n            }\n            ++v48;\n          }\n          while ( v48 < v45 );\n        }\n        goto LABEL_23;\n      case 6LL:\n        if ( (_DWORD)v8 )\n        {\n          v51 = (_BYTE *)*((_QWORD *)v4 + 22);\n          *v10 = *v51;\n          if ( (_DWORD)v8 != 1 )\n          {\n            v10[1] = v51[1];\n            if ( (unsigned int)n >= 3 )\n            {\n              v52 = 2LL;\n              do\n              {\n                *((_BYTE *)qword_49FAC8 + v52) = *(_BYTE *)(*((_QWORD *)v4 + 22) + v52);\n                ++v52;\n              }\n              while ( v52 < (unsigned int)n );\n            }\n          }\n        }\n        goto LABEL_23;\n      default:\n        printf(\"Illegal slice_group_map_type %d , exit \\n\");\n        exit(-1);\n        return result;\n    }\n    do\n    {\nLABEL_9:\n      if ( (unsigned int)v12 >= (unsigned int)v8 )\n        break;\n      v13 = 0;\n      do\n      {\n        v14 = v13;\n        v15 = v12;\n        if ( (unsigned int)v12 >= (unsigned int)v8 )\n        {\n          v18 = v4[v13 + 17];\n        }\n        else\n        {\n          v16 = 1;\n          v17 = (unsigned int)v12;\n          while ( 1 )\n          {\n            *((_BYTE *)qword_49FAC8 + v17) = v13;\n            v18 = v4[v13 + 17];\n            if ( v16 > v18 )\n              break;\n            LODWORD(v8) = n;\n            ++v17;\n            ++v16;\n            if ( v17 >= (unsigned int)n )\n              goto LABEL_18;\n          }\n          LODWORD(v8) = n;\n        }\nLABEL_18:\n        ++v13;\n        LODWORD(v12) = v18 + v15 + 1;\n      }\n      while ( (unsigned int)(v14 + 1) <= v4[15] && (unsigned int)v12 < (unsigned int)v8 );\n    }\n    while ( (unsigned int)v12 < (unsigned int)v8 );\n  }\n  else\n  {\n    memset(v9, 0, v8);\n  }\nLABEL_23:\n  if ( qword_49FAC0 )\n    free(qword_49FAC0);\n  v8 = (unsigned int)v5[18121];\n  v19 = malloc(v8);\n  qword_49FAC0 = v19;\n  if ( !v19 )\n  {\n    v68 = \"cannot allocated %d bytes for MBAmap, exit\\n\";\n    goto LABEL_137;\n  }\n  if ( *(_DWORD *)(v70 + 1148) || v5[18111] )\n  {\n    if ( (_DWORD)v8 )\n    {\n      v20 = qword_49FAC8;\n      *v19 = *(_BYTE *)qword_49FAC8;\n      if ( (_DWORD)v8 != 1 )\n      {\n        v19[1] = v20[1];\n        if ( v5[18121] >= 3u )\n        {\n          v21 = 2LL;\n          do\n          {\n            *((_BYTE *)qword_49FAC0 + v21) = *((_BYTE *)qword_49FAC8 + v21);\n            ++v21;\n          }\n          while ( v21 < (unsigned int)v5[18121] );\n        }\n      }\n    }\n  }\n  else if ( *(_DWORD *)(v70 + 1152) )\n  {\n    if ( (_DWORD)v8 )\n    {\n      v23 = qword_49FAC8;\n      *v19 = *(_BYTE *)qword_49FAC8;\n      if ( (_DWORD)v8 != 1 )\n      {\n        v19[1] = *v23;\n        if ( v5[18121] >= 3u )\n        {\n          v24 = 2LL;\n          do\n          {\n            *((_BYTE *)qword_49FAC0 + v24) = *((_BYTE *)qword_49FAC8 + ((unsigned int)v24 >> 1));\n            ++v24;\n          }\n          while ( v24 < (unsigned int)v5[18121] );\n        }\n      }\n    }\n  }\n  else if ( (_DWORD)v8 )\n  {\n    v53 = 0LL;\n    while ( 1 )\n    {\n      v19[v53] = *((_BYTE *)qword_49FAC8\n                 + v5[18117] * ((unsigned int)v53 / (2 * v5[18117]))\n                 + (unsigned int)v53 % v5[18117]);\n      if ( ++v53 >= (unsigned __int64)(unsigned int)v5[18121] )\n        break;\n      v19 = qword_49FAC0;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41b090L", 
            "funcEndAddr": "0x41b819L", 
            "funcName": "sub_41B090"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_41B820()\n{\n  if ( qword_49FAC0 )\n  {\n    free(qword_49FAC0);\n    qword_49FAC0 = 0LL;\n  }\n  if ( qword_49FAC8 )\n  {\n    free(qword_49FAC8);\n    qword_49FAC8 = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x41b820L", 
            "funcEndAddr": "0x41b85bL", 
            "funcName": "sub_41B820"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41B860()\n{\n  __int64 v0; // rax\n  __int64 v1; // rdx\n  __int64 v2; // rdx\n  __int64 v3; // rdx\n  __int64 v4; // rdx\n  __int64 v5; // rdx\n  __int64 v6; // rdx\n  __int64 v7; // rdx\n  signed int v8; // edx\n  __int64 v9; // rsi\n\n  v0 = *((signed int *)off_49F6D0 + 18121);\n  if ( v0 <= 0 )\n  {\n    LODWORD(xmmword_49FAD0) = -1;\nLABEL_42:\n    DWORD1(xmmword_49FAD0) = -1;\nLABEL_43:\n    DWORD2(xmmword_49FAD0) = -1;\nLABEL_44:\n    HIDWORD(xmmword_49FAD0) = -1;\nLABEL_45:\n    LODWORD(xmmword_49FAE0) = -1;\nLABEL_46:\n    DWORD1(xmmword_49FAE0) = -1;\nLABEL_47:\n    DWORD2(xmmword_49FAE0) = -1;\n    v8 = -1;\n    goto LABEL_48;\n  }\n  v1 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v1) )\n  {\n    if ( ++v1 >= v0 )\n    {\n      LODWORD(v1) = -1;\n      break;\n    }\n  }\n  LODWORD(xmmword_49FAD0) = v1;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_42;\n  v2 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v2) != 1 )\n  {\n    if ( ++v2 >= v0 )\n    {\n      LODWORD(v2) = -1;\n      break;\n    }\n  }\n  DWORD1(xmmword_49FAD0) = v2;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_43;\n  v3 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v3) != 2 )\n  {\n    if ( ++v3 >= v0 )\n    {\n      LODWORD(v3) = -1;\n      break;\n    }\n  }\n  DWORD2(xmmword_49FAD0) = v3;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_44;\n  v4 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v4) != 3 )\n  {\n    if ( ++v4 >= v0 )\n    {\n      LODWORD(v4) = -1;\n      break;\n    }\n  }\n  HIDWORD(xmmword_49FAD0) = v4;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_45;\n  v5 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v5) != 4 )\n  {\n    if ( ++v5 >= v0 )\n    {\n      LODWORD(v5) = -1;\n      break;\n    }\n  }\n  LODWORD(xmmword_49FAE0) = v5;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_46;\n  v6 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v6) != 5 )\n  {\n    if ( ++v6 >= v0 )\n    {\n      LODWORD(v6) = -1;\n      break;\n    }\n  }\n  DWORD1(xmmword_49FAE0) = v6;\n  if ( (signed int)v0 <= 0 )\n    goto LABEL_47;\n  v7 = 0LL;\n  while ( *((_BYTE *)qword_49FAC0 + v7) != 6 )\n  {\n    if ( ++v7 >= v0 )\n    {\n      LODWORD(v7) = -1;\n      break;\n    }\n  }\n  DWORD2(xmmword_49FAE0) = v7;\n  v8 = -1;\n  if ( (signed int)v0 > 0 )\n  {\n    v9 = 0LL;\n    while ( *((_BYTE *)qword_49FAC0 + v9) != 7 )\n    {\n      if ( ++v9 >= v0 )\n        goto LABEL_48;\n    }\n    v8 = v9;\n  }\nLABEL_48:\n  HIDWORD(xmmword_49FAE0) = v8;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41b860L", 
            "funcEndAddr": "0x41ba29L", 
            "funcName": "sub_41B860"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41BA80()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41ba80L", 
            "funcEndAddr": "0x41ba83L", 
            "funcName": "sub_41BA80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41BA90(int a1)\n{\n  return *((unsigned __int8 *)qword_49FAC0 + a1);\n}\n", 
            "funcStartAddr": "0x41ba90L", 
            "funcEndAddr": "0x41ba9fL", 
            "funcName": "sub_41BA90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41BAA0(int a1)\n{\n  __int64 v1; // rsi\n  __int64 v2; // r8\n  signed __int64 result; // rax\n\n  LODWORD(v1) = a1 + 1;\n  v2 = *((signed int *)off_49F6D0 + 18121);\n  result = 0xFFFFFFFFLL;\n  if ( a1 + 1 < (signed int)v2 )\n  {\n    v1 = (signed int)v1;\n    while ( *((_BYTE *)qword_49FAC0 + a1) != *((_BYTE *)qword_49FAC0 + v1) )\n    {\n      if ( ++v1 >= v2 )\n        return result;\n    }\n    result = (unsigned int)v1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41baa0L", 
            "funcEndAddr": "0x41bae2L", 
            "funcName": "sub_41BAA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41BAF0(__int64 a1)\n{\n  unsigned int v1; // ecx\n  char v2; // dl\n  signed __int64 result; // rax\n\n  v1 = a1 - 1;\n  if ( (signed int)a1 > 0 )\n  {\n    a1 = (signed int)a1;\n    v2 = *((_BYTE *)qword_49FAC0 + (signed int)a1);\n    do\n    {\n      if ( v2 == *((char *)qword_49FAC0 + a1 - 1) )\n        break;\n      --a1;\n      --v1;\n    }\n    while ( a1 > 0 );\n  }\n  result = 0xFFFFFFFFLL;\n  if ( (signed int)a1 > 0 )\n    result = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x41baf0L", 
            "funcEndAddr": "0x41bb2dL", 
            "funcName": "sub_41BAF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41BB30(int a1)\n{\n  __int64 v1; // r8\n  __int64 v2; // r10\n  signed __int64 result; // rax\n  __int64 v4; // rsi\n  __int64 v5; // r8\n  unsigned int v6; // edx\n  unsigned int v7; // ecx\n  __int64 v8; // r10\n\n  v1 = *((signed int *)off_49F6D0 + 18121);\n  if ( v1 <= 0 )\n    return 0xFFFFFFFFLL;\n  v2 = v1 & 3;\n  if ( (unsigned __int64)(v1 - 1) < 3 )\n  {\n    result = 0xFFFFFFFFLL;\n    v4 = 0LL;\n    if ( !(v1 & 3) )\n      return result;\n    goto LABEL_17;\n  }\n  v5 = v1 - v2;\n  LODWORD(result) = -1;\n  v4 = 0LL;\n  do\n  {\n    if ( *((unsigned __int8 *)qword_49FAC0 + v4) == a1 )\n      LODWORD(result) = v4;\n    v6 = v4 + 1;\n    if ( *((unsigned __int8 *)qword_49FAC0 + v4 + 1) != a1 )\n      v6 = result;\n    v7 = v4 + 2;\n    if ( *((unsigned __int8 *)qword_49FAC0 + v4 + 2) != a1 )\n      v7 = v6;\n    result = (unsigned int)(v4 + 3);\n    if ( *((unsigned __int8 *)qword_49FAC0 + v4 + 3) != a1 )\n      result = v7;\n    v4 += 4LL;\n  }\n  while ( v5 != v4 );\n  if ( v2 )\n  {\nLABEL_17:\n    v8 = -v2;\n    do\n    {\n      if ( *((unsigned __int8 *)qword_49FAC0 + v4) == a1 )\n        result = (unsigned int)v4;\n      ++v4;\n      ++v8;\n    }\n    while ( v8 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41bb30L", 
            "funcEndAddr": "0x41bbe5L", 
            "funcName": "sub_41BB30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41BBF0(int a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rdi\n  __int64 v3; // rsi\n\n  result = *((unsigned __int8 *)qword_49FAC0 + a1);\n  LODWORD(v2) = a1 + 1;\n  v3 = *((signed int *)off_49F6D0 + 18121);\n  if ( (signed int)v2 >= (signed int)v3 )\n  {\nLABEL_5:\n    *((_DWORD *)&xmmword_49FAD0 + result) = -1;\n  }\n  else\n  {\n    v2 = (signed int)v2;\n    while ( (_BYTE)result != *((_BYTE *)qword_49FAC0 + v2) )\n    {\n      if ( ++v2 >= v3 )\n        goto LABEL_5;\n    }\n    *((_DWORD *)&xmmword_49FAD0 + result) = v2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41bbf0L", 
            "funcEndAddr": "0x41bc40L", 
            "funcName": "sub_41BBF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41BC40(int a1)\n{\n  return *((unsigned int *)&xmmword_49FAD0 + a1);\n}\n", 
            "funcStartAddr": "0x41bc40L", 
            "funcEndAddr": "0x41bc4bL", 
            "funcName": "sub_41BC40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41BC50(int a1)\n{\n  return (unsigned int)(*((_DWORD *)&xmmword_49FAD0 + a1) >> 31);\n}\n", 
            "funcStartAddr": "0x41bc50L", 
            "funcEndAddr": "0x41bc5eL", 
            "funcName": "sub_41BC50"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41BC60()\n{\n  signed int **v0; // r15\n  int v1; // ebx\n  unsigned int v2; // esi\n  int v3; // ebp\n  int v4; // ebx\n  int v5; // eax\n  int v6; // er12\n  signed int v7; // ebx\n  unsigned int v8; // ebp\n  _DWORD *v9; // rax\n  unsigned int v10; // edi\n  int v11; // edx\n  _DWORD *v12; // rax\n  int v13; // ecx\n  int v14; // er14\n  int v15; // ebx\n  int v16; // ebx\n  int v17; // eax\n  int v18; // ebp\n  int v19; // ecx\n  __int64 v20; // rbp\n  __int64 v21; // rax\n  int v22; // er15\n  signed int **v23; // r13\n  int v24; // ebx\n  __int64 v25; // rax\n  __int64 v26; // r12\n  __int64 v27; // rax\n  _QWORD *v28; // rax\n  const char *v29; // rdi\n  bool v30; // zf\n  int v31; // ebx\n  __int64 v32; // rax\n  __int64 v33; // r12\n  __int64 v34; // rax\n  _QWORD *v35; // rax\n  const char *v36; // rdi\n  int v37; // er15\n  _DWORD *v38; // rax\n  int v39; // ecx\n  signed int **v40; // r12\n  int v41; // ebx\n  int v42; // ebp\n  signed __int64 v43; // r13\n  int v44; // eax\n  int v45; // eax\n  int v46; // ebx\n  int v47; // ebx\n  __int64 v48; // rax\n  int v49; // edx\n  __int64 v50; // rcx\n  int v51; // ebp\n  int v52; // ebx\n  int v53; // ebp\n  signed __int64 v54; // r13\n  int v55; // eax\n  int v56; // eax\n  int v57; // ebx\n  int v58; // ebx\n  __int64 v59; // rax\n  int v60; // edx\n  __int64 v61; // rcx\n  int v62; // ebp\n  int v63; // ebx\n  int v64; // ebp\n  signed int **v65; // r14\n  signed int **v66; // r12\n  int v67; // ebx\n  int v68; // ebp\n  _BOOL4 v69; // esi\n  int v70; // er13\n  int **v71; // r14\n  int *v72; // r14\n  int v73; // ebx\n  int *v74; // rax\n  const char *v75; // rdi\n  unsigned int v76; // ebx\n  int v77; // ebp\n  int v78; // ebp\n  double v79; // xmm0_8\n  double v80; // xmm0_8\n  signed int **v82; // [rsp+8h] [rbp-50h]\n  __int64 v83; // [rsp+10h] [rbp-48h]\n  int v84; // [rsp+24h] [rbp-34h]\n\n  v83 = *((_QWORD *)off_49F6D0 + 1770);\n  v0 = (signed int **)(*(_QWORD *)(v83 + 24) + 120LL * *(signed int *)qword_4F9C40[*((signed int *)dest + 591)]);\n  v1 = sub_47FA90(\n         (__int64)\"SH: first_mb_in_slice\",\n         *((_DWORD *)off_49F6D0 + 3) >> (*((_DWORD *)off_49F6D0 + 18100) != 0),\n         v0);\n  v2 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v2 >= 4 )\n    error((__int64)\"Picture Type not supported!\", 1);\n  v3 = v1 + (unsigned __int64)sub_47FA90((__int64)\"SH: slice_type\", v2 + 5, v0);\n  v4 = v3 + (unsigned __int64)sub_47FA90((__int64)\"SH: pic_parameter_set_id\", *(_DWORD *)(qword_4F9DB8 + 4), v0);\n  v5 = sub_47FEE0(dword_4FA0E4 + 4, (__int64)\"SH: frame_num\", *((_DWORD *)off_49F6D0 + 18116), v0);\n  v6 = v4 + v5;\n  v7 = 0;\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    v8 = *((_DWORD *)off_49F6D0 + 7) - 1;\n    v6 += sub_47FE20((__int64)\"SH: field_pic_flag\", v8 < 2, v0);\n    if ( v8 <= 1 )\n    {\n      v6 += sub_47FE20((__int64)\"SH: bottom_field_flag\", *((_DWORD *)off_49F6D0 + 7) == 2, v0);\n      v7 = 1;\n    }\n  }\n  v9 = off_49F6D0;\n  if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1769) + 4LL) )\n  {\n    v6 += sub_47FA90((__int64)\"SH: idr_pic_id\", *(_DWORD *)off_49F6D0 % 2, v0);\n    v9 = off_49F6D0;\n  }\n  if ( !v9[18101] )\n  {\n    if ( *((_DWORD *)qword_4F9DC0 + 287) || !v7 || (v19 = v9[7], v19 == 1) )\n    {\n      v10 = dword_4FA0E8 + 4;\n      v11 = v9[18112] & ~(-1 << (dword_4FA0E8 + 4));\n    }\n    else\n    {\n      if ( v19 != 2 )\n      {\n        v11 = v9[18107];\n        v10 = dword_4FA0E8 + 4;\n        goto LABEL_13;\n      }\n      v10 = dword_4FA0E8 + 4;\n      v11 = v9[18113] & ~(-1 << (dword_4FA0E8 + 4));\n    }\n    v9[18107] = v11;\nLABEL_13:\n    v6 += sub_47FEE0(v10, (__int64)\"SH: pic_order_cnt_lsb\", v11, v0);\n    v9 = off_49F6D0;\n    if ( !v7 && *((_DWORD *)off_49F6D0 + 18123) )\n    {\n      v6 += sub_47FCC0((__int64)\"SH: delta_pic_order_cnt_bottom\", *((_DWORD *)off_49F6D0 + 18108), v0);\n      v9 = off_49F6D0;\n    }\n  }\n  if ( v9[18101] == 1 && !v9[18102] )\n  {\n    v6 += sub_47FCC0((__int64)\"SH: delta_pic_order_cnt[0]\", v9[18109], v0);\n    if ( !v7 )\n    {\n      if ( *((_DWORD *)off_49F6D0 + 18123) )\n        v6 += sub_47FCC0((__int64)\"SH: delta_pic_order_cnt[1]\", *((_DWORD *)off_49F6D0 + 18110), v0);\n    }\n  }\n  if ( *((_DWORD *)dest + 801) )\n    v6 += sub_47FA90((__int64)\"SH: redundant_pic_cnt\", *((_DWORD *)off_49F6D0 + 18099), v0);\n  v12 = off_49F6D0;\n  v13 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v13 == 1 )\n  {\n    v6 += sub_47FE20((__int64)\"SH: direct_spatial_mv_pred_flag\", *((_DWORD *)off_49F6D0 + 17999), v0);\n    v12 = off_49F6D0;\n    v13 = *((_DWORD *)off_49F6D0 + 6);\n  }\n  if ( v13 == 3 )\n  {\nLABEL_28:\n    v14 = v12[18000];\n    v15 = *(_DWORD *)(qword_4F9DB8 + 184);\n    goto LABEL_31;\n  }\n  if ( v13 != 1 )\n  {\n    if ( v13 )\n      goto LABEL_40;\n    goto LABEL_28;\n  }\n  if ( v12[18000] == *(_DWORD *)(qword_4F9DB8 + 184) + 1 )\n  {\n    v14 = v12[18001];\n    v15 = *(_DWORD *)(qword_4F9DB8 + 188);\nLABEL_31:\n    v16 = v15 + 1;\n    v17 = sub_47FE20((__int64)\"SH: num_ref_idx_active_override_flag\", v14 != v16, v0);\n    v18 = v6 + v17;\n    v6 += v17;\n    if ( v14 == v16 )\n      goto LABEL_40;\n    goto LABEL_38;\n  }\n  v18 = v6 + (unsigned __int64)sub_47FE20((__int64)\"SH: num_ref_idx_active_override_flag\", 1, v0);\nLABEL_38:\n  v6 = v18\n     + (unsigned __int64)sub_47FA90(\n                           (__int64)\"SH: num_ref_idx_l0_active_minus1\",\n                           *((_DWORD *)off_49F6D0 + 18000) - 1,\n                           v0);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n    v6 += sub_47FA90((__int64)\"SH: num_ref_idx_l1_active_minus1\", *((_DWORD *)off_49F6D0 + 18001) - 1, v0);\nLABEL_40:\n  v84 = v6;\n  v82 = v0;\n  v20 = *((_QWORD *)off_49F6D0 + 1770);\n  v21 = *(signed int *)qword_4F9C40[*((signed int *)dest + 591)];\n  v22 = 0;\n  v23 = (signed int **)(*(_QWORD *)(v20 + 24) + 120 * v21);\n  if ( *((_DWORD *)off_49F6D0 + 6) != 2 )\n  {\n    v24 = sub_47FE20(\n            (__int64)\"SH: ref_pic_list_reordering_flag_l0\",\n            *(_DWORD *)(v20 + 56),\n            (signed int **)(*(_QWORD *)(v20 + 24) + 120 * v21));\n    if ( *(_DWORD *)(v20 + 56) )\n    {\n      v25 = *(_QWORD *)(v20 + 64);\n      v26 = 0LL;\n      while ( 1 )\n      {\n        v22 = v24 + (unsigned __int64)sub_47FA90((__int64)\"SH: remapping_of_pic_num_idc\", *(_DWORD *)(v25 + v26), v23);\n        v27 = *(_QWORD *)(v20 + 64);\n        if ( *(_DWORD *)(v27 + v26) < 2u )\n          break;\n        if ( *(_DWORD *)(v27 + v26) == 2 )\n        {\n          v28 = (_QWORD *)(v20 + 80);\n          v29 = \"SH: long_term_pic_idx_l0\";\n          goto LABEL_47;\n        }\nLABEL_48:\n        v25 = *(_QWORD *)(v20 + 64);\n        v30 = *(_DWORD *)(v25 + v26) == 3;\n        v26 += 4LL;\n        v24 = v22;\n        if ( v30 )\n          goto LABEL_51;\n      }\n      v28 = (_QWORD *)(v20 + 72);\n      v29 = \"SH: abs_diff_pic_num_minus1_l0\";\nLABEL_47:\n      v22 += sub_47FA90((__int64)v29, *(_DWORD *)(*v28 + v26), v23);\n      goto LABEL_48;\n    }\n    v22 = v24;\n  }\nLABEL_51:\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n  {\n    v31 = v22 + (unsigned __int64)sub_47FE20((__int64)\"SH: ref_pic_list_reordering_flag_l1\", *(_DWORD *)(v20 + 88), v23);\n    if ( *(_DWORD *)(v20 + 88) )\n    {\n      v32 = *(_QWORD *)(v20 + 96);\n      v33 = 0LL;\n      while ( 1 )\n      {\n        v22 = v31 + (unsigned __int64)sub_47FA90((__int64)\"SH: remapping_of_pic_num_idc\", *(_DWORD *)(v32 + v33), v23);\n        v34 = *(_QWORD *)(v20 + 96);\n        if ( *(_DWORD *)(v34 + v33) < 2u )\n          break;\n        if ( *(_DWORD *)(v34 + v33) == 2 )\n        {\n          v35 = (_QWORD *)(v20 + 112);\n          v36 = \"SH: long_term_pic_idx_l1\";\n          goto LABEL_58;\n        }\nLABEL_59:\n        v32 = *(_QWORD *)(v20 + 96);\n        v30 = *(_DWORD *)(v32 + v33) == 3;\n        v33 += 4LL;\n        v31 = v22;\n        if ( v30 )\n          goto LABEL_62;\n      }\n      v35 = (_QWORD *)(v20 + 104);\n      v36 = \"SH: abs_diff_pic_num_minus1_l1\";\nLABEL_58:\n      v22 += sub_47FA90((__int64)v36, *(_DWORD *)(*v35 + v33), v23);\n      goto LABEL_59;\n    }\n    v22 = v31;\n  }\nLABEL_62:\n  v37 = v84 + v22;\n  v38 = off_49F6D0;\n  v39 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v39 && v39 != 3 )\n  {\n    if ( v39 != 1 || *(_DWORD *)(qword_4F9DB8 + 196) != 1 )\n      goto LABEL_98;\n  }\n  else if ( !*(_DWORD *)(qword_4F9DB8 + 192) && (v39 != 1 || *(_DWORD *)(qword_4F9DB8 + 196) != 1) )\n  {\n    goto LABEL_98;\n  }\n  v40 = (signed int **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL)\n                      + 120LL * *(signed int *)qword_4F9C40[*((signed int *)dest + 591)]);\n  v41 = sub_47FA90((__int64)\"SH: luma_log_weight_denom\", dword_4FA0EC, v40);\n  v42 = v41 + (unsigned __int64)sub_47FA90((__int64)\"SH: chroma_log_weight_denom\", dword_4FA0C0, v40);\n  v38 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18000) > 0 )\n  {\n    v43 = 0LL;\n    do\n    {\n      if ( **(_DWORD **)(*(_QWORD *)qword_4F9F88 + 8 * v43) != 1 << dword_4FA0EC\n        || **(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8 * v43) )\n      {\n        v46 = v42 + (unsigned __int64)sub_47FE20((__int64)\"SH: luma_weight_flag_l0\", 1, v40);\n        v42 = v46\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"SH: luma_weight_l0\",\n                                  **(_DWORD **)(*(_QWORD *)qword_4F9F88 + 8 * v43),\n                                  v40);\n        v44 = sub_47FCC0((__int64)\"SH: luma_offset_l0\", **(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8 * v43), v40);\n      }\n      else\n      {\n        v44 = sub_47FE20((__int64)\"SH: luma_weight_flag_l0\", 0, v40);\n      }\n      v47 = v42 + v44;\n      v48 = *(_QWORD *)(*(_QWORD *)qword_4F9F88 + 8 * v43);\n      v49 = *(_DWORD *)(v48 + 4);\n      if ( v49 != 1 << dword_4FA0C0\n        || (v50 = *(_QWORD *)(*(_QWORD *)qword_4F9F80 + 8 * v43), *(_DWORD *)(v50 + 4))\n        || *(_DWORD *)(v48 + 8) != v49\n        || *(_DWORD *)(v50 + 8) )\n      {\n        v51 = v47 + (unsigned __int64)sub_47FE20((__int64)\"chroma_weight_flag_l0\", 1, v40);\n        v52 = v51\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_weight_l0\",\n                                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F88 + 8 * v43) + 4LL),\n                                  v40);\n        v53 = v52\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_offset_l0\",\n                                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F80 + 8 * v43) + 4LL),\n                                  v40);\n        v47 = v53\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_weight_l0\",\n                                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F88 + 8 * v43) + 8LL),\n                                  v40);\n        v45 = sub_47FCC0(\n                (__int64)\"chroma_offset_l0\",\n                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F80 + 8 * v43) + 8LL),\n                v40);\n      }\n      else\n      {\n        v45 = sub_47FE20((__int64)\"chroma_weight_flag_l0\", 0, v40);\n      }\n      v42 = v47 + v45;\n      ++v43;\n      v38 = off_49F6D0;\n    }\n    while ( v43 < *((signed int *)off_49F6D0 + 18000) );\n  }\n  if ( v38[6] == 1 && v38[18001] > 0 )\n  {\n    v54 = 0LL;\n    do\n    {\n      if ( **(_DWORD **)(*((_QWORD *)qword_4F9F88 + 1) + 8 * v54) != 1 << dword_4FA0EC\n        || **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v54) )\n      {\n        v57 = v42 + (unsigned __int64)sub_47FE20((__int64)\"SH: luma_weight_flag_l1\", 1, v40);\n        v42 = v57\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"SH: luma_weight_l1\",\n                                  **(_DWORD **)(*((_QWORD *)qword_4F9F88 + 1) + 8 * v54),\n                                  v40);\n        v55 = sub_47FCC0((__int64)\"SH: luma_offset_l1\", **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v54), v40);\n      }\n      else\n      {\n        v55 = sub_47FE20((__int64)\"SH: luma_weight_flag_l1\", 0, v40);\n      }\n      v58 = v42 + v55;\n      v59 = *(_QWORD *)(*((_QWORD *)qword_4F9F88 + 1) + 8 * v54);\n      v60 = *(_DWORD *)(v59 + 4);\n      if ( v60 != 1 << dword_4FA0C0\n        || (v61 = *(_QWORD *)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v54), *(_DWORD *)(v61 + 4))\n        || *(_DWORD *)(v59 + 8) != v60\n        || *(_DWORD *)(v61 + 8) )\n      {\n        v62 = v58 + (unsigned __int64)sub_47FE20((__int64)\"chroma_weight_flag_l1\", 1, v40);\n        v63 = v62\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_weight_l1\",\n                                  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F88 + 1) + 8 * v54) + 4LL),\n                                  v40);\n        v64 = v63\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_offset_l1\",\n                                  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v54) + 4LL),\n                                  v40);\n        v58 = v64\n            + (unsigned __int64)sub_47FCC0(\n                                  (__int64)\"chroma_weight_l1\",\n                                  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F88 + 1) + 8 * v54) + 8LL),\n                                  v40);\n        v56 = sub_47FCC0(\n                (__int64)\"chroma_offset_l1\",\n                *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v54) + 8LL),\n                v40);\n      }\n      else\n      {\n        v56 = sub_47FE20((__int64)\"chroma_weight_flag_l1\", 0, v40);\n      }\n      v42 = v58 + v56;\n      ++v54;\n      v38 = off_49F6D0;\n    }\n    while ( v54 < *((signed int *)off_49F6D0 + 18001) );\n  }\n  v37 += v42;\nLABEL_98:\n  v65 = v82;\n  if ( v38[18124] )\n  {\n    v66 = (signed int **)(*(_QWORD *)(*((_QWORD *)v38 + 1770) + 24LL)\n                        + 120LL * *(signed int *)qword_4F9C40[*((signed int *)dest + 591)]);\n    if ( *(_DWORD *)(*((_QWORD *)v38 + 1769) + 4LL) )\n    {\n      v67 = sub_47FE20((__int64)\"SH: no_output_of_prior_pics_flag\", v38[18126], v66);\n      v68 = v67\n          + (unsigned __int64)sub_47FE20((__int64)\"SH: long_term_reference_flag\", *((_DWORD *)off_49F6D0 + 18127), v66);\nLABEL_118:\n      v37 += v68;\n      v65 = v82;\n      goto LABEL_119;\n    }\n    v69 = *((_QWORD *)v38 + 9064) != 0LL;\n    v38[18125] = v69;\n    v70 = sub_47FE20((__int64)\"SH: adaptive_ref_pic_buffering_flag\", v69, v66);\n    if ( !*((_DWORD *)off_49F6D0 + 18125) )\n    {\n      v68 = v70;\n      goto LABEL_118;\n    }\n    v71 = (int **)((char *)off_49F6D0 + 72512);\n    while ( 1 )\n    {\n      v72 = *v71;\n      if ( !v72 )\n        error((__int64)\"Error encoding MMCO commands\", 500);\n      v73 = *v72;\n      v68 = v70 + (unsigned __int64)sub_47FA90((__int64)\"SH: memory_management_control_operation\", *v72, v66);\n      if ( (v73 | 2) == 3 )\n        v68 += (unsigned __int64)sub_47FA90((__int64)\"SH: difference_of_pic_nums_minus1\", v72[1], v66) + 1;\n      switch ( v73 )\n      {\n        case 6:\n        case 3:\n          v68 += sub_47FA90((__int64)\"SH: long_term_frame_idx\", v72[3], v66);\n          break;\n        case 2:\n          v74 = v72 + 2;\n          v75 = \"SH: long_term_pic_num\";\nLABEL_114:\n          v68 += sub_47FA90((__int64)v75, *v74, v66);\n          break;\n        case 4:\n          v74 = v72 + 4;\n          v75 = \"SH: max_long_term_pic_idx_plus1\";\n          goto LABEL_114;\n      }\n      v71 = (int **)(v72 + 6);\n      v70 = v68;\n      if ( !v73 )\n        goto LABEL_118;\n    }\n  }\nLABEL_119:\n  if ( *((_DWORD *)dest + 589) == 1 && *((_DWORD *)off_49F6D0 + 6) != 2 )\n    v37 += sub_47FA90((__int64)\"SH: cabac_init_idc\", *((_DWORD *)off_49F6D0 + 18130), v65);\n  v76 = v37\n      + (unsigned __int64)sub_47FCC0(\n                            (__int64)\"SH: slice_qp_delta\",\n                            *(_DWORD *)(v83 + 4) - 26 - *(_DWORD *)(qword_4F9DB8 + 200),\n                            v65);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 3 )\n  {\n    v77 = v76 + (unsigned __int64)sub_47FE20((__int64)\"SH: sp_for_switch_flag\", 0, v65);\n    v76 = v77 + (unsigned __int64)sub_47FCC0((__int64)\"SH: slice_qs_delta\", *((_DWORD *)off_49F6D0 + 11) - 26, v65);\n  }\n  if ( *(_DWORD *)(qword_4F9DB8 + 220) )\n  {\n    v76 += sub_47FA90((__int64)\"SH: disable_deblocking_filter_idc\", *((_DWORD *)off_49F6D0 + 17996), v65);\n    if ( *((_DWORD *)off_49F6D0 + 17996) != 1 )\n    {\n      v78 = v76\n          + (unsigned __int64)sub_47FCC0(\n                                (__int64)\"SH: slice_alpha_c0_offset_div2\",\n                                *((_DWORD *)off_49F6D0 + 17997) / 2,\n                                v65);\n      v76 = v78\n          + (unsigned __int64)sub_47FCC0(\n                                (__int64)\"SH: slice_beta_offset_div2\",\n                                *((_DWORD *)off_49F6D0 + 17998) / 2,\n                                v65);\n    }\n  }\n  if ( *(_DWORD *)(qword_4F9DB8 + 60) && (unsigned int)(*(_DWORD *)(qword_4F9DB8 + 64) - 3) <= 2 )\n  {\n    v79 = log((float)((float)((float)(*((_DWORD *)off_49F6D0 + 18118) * *((_DWORD *)off_49F6D0 + 18117))\n                            / (float)(*(_DWORD *)(qword_4F9DB8 + 168) + 1))\n                    + 1.0));\n    v80 = ceil(v79 / 0.6931471805599453);\n    v76 += sub_47FEE0((signed int)v80, (__int64)\"SH: slice_group_change_cycle\", *((_DWORD *)off_49F6D0 + 18163), v65);\n  }\n  if ( *((_DWORD *)dest + 591) && !*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1769) + 4LL) )\n    v76 += sub_47FA90((__int64)\"DPA: slice_id\", *((_DWORD *)off_49F6D0 + 5), v65);\n  return v76;\n}\n", 
            "funcStartAddr": "0x41bc60L", 
            "funcEndAddr": "0x41c99aL", 
            "funcName": "sub_41BC60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41C9D0(int a1)\n{\n  signed int **v1; // rbx\n  unsigned int v2; // ebp\n  int v4; // [rsp+8h] [rbp-40h]\n  int v5; // [rsp+Ch] [rbp-3Ch]\n  int v6; // [rsp+10h] [rbp-38h]\n  __int64 (__fastcall *v7)(int, __int64, _DWORD *, _DWORD *); // [rsp+28h] [rbp-20h]\n\n  v1 = (signed int **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL) + 120LL * a1);\n  v4 = 0;\n  v7 = sub_47FB70;\n  v6 = 0;\n  v5 = *((_DWORD *)off_49F6D0 + 5);\n  v2 = sub_47FBD0((unsigned int *)&v4, v1);\n  if ( *(_DWORD *)(qword_4F9DB8 + 228) )\n  {\n    v5 = **((_DWORD **)off_49F6D0 + 1770);\n    v2 += sub_47FBD0((unsigned int *)&v4, v1);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x41c9d0L", 
            "funcEndAddr": "0x41ca5aL", 
            "funcName": "sub_41C9D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41CA60()\n{\n  __int64 result; // rax\n  __int64 v1; // r13\n  _DWORD *v2; // r11\n  int v3; // ecx\n  __int64 v4; // r14\n  __int64 v5; // rsi\n  __int64 v6; // r8\n  signed __int64 v7; // rax\n  signed __int64 v8; // rdx\n  __int64 v9; // rcx\n  char *v10; // r9\n  __int64 v11; // rdx\n  signed __int64 v12; // rdi\n  signed __int64 v13; // rbp\n  signed __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // r15\n  int v17; // er9\n  __int64 v18; // rsi\n  __int64 v19; // r10\n  char *v20; // r8\n  __int16 *v21; // rdi\n  __int64 v22; // rcx\n  __int64 v23; // r12\n  __int64 v24; // rdx\n  signed __int64 v25; // rbp\n  __int64 v26; // rax\n  char *v27; // rdx\n  __int64 v28; // rbx\n  __int64 v29; // rdx\n  __int16 *v30; // rdi\n  __int64 v31; // rbp\n  __int64 v32; // rbx\n  __int64 v33; // r14\n  __int64 v34; // r11\n  char *v35; // rax\n  __int64 v36; // rbx\n  char *v37; // r11\n  __int16 *v38; // r9\n  __int64 v39; // rdx\n  __int64 v40; // r8\n  __int64 v41; // rbx\n  __int16 *v42; // rcx\n  __int64 v43; // rax\n  char *v44; // rbx\n  __int64 v45; // rcx\n  __int16 *v46; // r14\n  __int64 v47; // r12\n  __int64 v48; // rbx\n  __int64 v49; // r9\n  __int64 v50; // r11\n  __int16 *v51; // rdi\n  char *v52; // rax\n  __int64 v53; // rbx\n  __int64 v54; // r12\n  __int64 v55; // r8\n  signed __int64 v56; // rdx\n  signed __int64 v57; // rsi\n  __int64 v58; // rcx\n  char *v59; // r9\n  __int64 v60; // rsi\n  __int64 v61; // rdi\n  __int64 v62; // rbx\n  signed __int64 v63; // rbp\n  char *v64; // rdx\n  int v65; // [rsp+8h] [rbp-490h]\n  int v66; // [rsp+Ch] [rbp-48Ch]\n  __int64 v67; // [rsp+10h] [rbp-488h]\n  __int64 v68; // [rsp+18h] [rbp-480h]\n  __int64 *v69; // [rsp+20h] [rbp-478h]\n  unsigned __int64 v70; // [rsp+28h] [rbp-470h]\n  _DWORD *v71; // [rsp+30h] [rbp-468h]\n  __int64 v72; // [rsp+38h] [rbp-460h]\n  __int64 v73; // [rsp+40h] [rbp-458h]\n  __int64 v74; // [rsp+48h] [rbp-450h]\n  __int64 v75; // [rsp+50h] [rbp-448h]\n  __int64 v76; // [rsp+58h] [rbp-440h]\n  char v77[64]; // [rsp+60h] [rbp-438h]\n  __int16 v78[16]; // [rsp+A0h] [rbp-3F8h]\n  char v79; // [rsp+C0h] [rbp-3D8h]\n  __int16 v80[32]; // [rsp+E0h] [rbp-3B8h]\n  __int16 v81[32]; // [rsp+120h] [rbp-378h]\n  __int16 v82[32]; // [rsp+160h] [rbp-338h]\n  __int16 v83[32]; // [rsp+1A0h] [rbp-2F8h]\n  __int16 v84[32]; // [rsp+1E0h] [rbp-2B8h]\n  __int16 v85[32]; // [rsp+220h] [rbp-278h]\n  __int16 v86[32]; // [rsp+260h] [rbp-238h]\n  __int16 v87[32]; // [rsp+2A0h] [rbp-1F8h]\n  __int16 v88[32]; // [rsp+2E0h] [rbp-1B8h]\n  __int16 v89[32]; // [rsp+320h] [rbp-178h]\n  __int16 v90[32]; // [rsp+360h] [rbp-138h]\n  __int16 v91[32]; // [rsp+3A0h] [rbp-F8h]\n  __int16 v92[32]; // [rsp+3E0h] [rbp-B8h]\n  __int16 v93[32]; // [rsp+420h] [rbp-78h]\n  __int16 v94[28]; // [rsp+460h] [rbp-38h]\n\n  result = qword_4F9E30;\n  v1 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v2 = off_49F6D0;\n  v3 = *((_DWORD *)off_49F6D0 + 18121);\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n  {\n    if ( v3 > 0 )\n    {\n      v69 = *(__int64 **)(qword_4F9E30 + 6464);\n      v4 = 0LL;\nLABEL_5:\n      result = *(_QWORD *)(result + 6472);\n      if ( !*(_BYTE *)(result + v4) )\n        goto LABEL_60;\n      sub_436A80(v4, (unsigned int *)&v66, &v65);\n      v5 = v66;\n      v6 = v65;\n      v7 = v1 + 8LL * v65;\n      v8 = -32LL;\n      do\n      {\n        v9 = *(_QWORD *)(v7 + 8 * v8 + 256);\n        v78[v8] = *(_WORD *)(v9 + 2 * v5);\n        v80[v8] = *(_WORD *)(v9 + 2 * v5 + 2);\n        v81[v8] = *(_WORD *)(v9 + 2 * v5 + 4);\n        v82[v8] = *(_WORD *)(v9 + 2 * v5 + 6);\n        v83[v8] = *(_WORD *)(v9 + 2 * v5 + 8);\n        v84[v8] = *(_WORD *)(v9 + 2 * v5 + 10);\n        v85[v8] = *(_WORD *)(v9 + 2 * v5 + 12);\n        v86[v8] = *(_WORD *)(v9 + 2 * v5 + 14);\n        v87[v8] = *(_WORD *)(v9 + 2 * v5 + 16);\n        v88[v8] = *(_WORD *)(v9 + 2 * v5 + 18);\n        v89[v8] = *(_WORD *)(v9 + 2 * v5 + 20);\n        v90[v8] = *(_WORD *)(v9 + 2 * v5 + 22);\n        v91[v8] = *(_WORD *)(v9 + 2 * v5 + 24);\n        v92[v8] = *(_WORD *)(v9 + 2 * v5 + 26);\n        v93[v8] = *(_WORD *)(v9 + 2 * v5 + 28);\n        v94[v8++] = *(_WORD *)(v9 + 2 * v5 + 30);\n      }\n      while ( v8 );\n      v10 = &v79;\n      v11 = 0LL;\n      do\n      {\n        v12 = *(_QWORD *)(v1 + 8 * (v6 + 2 * v11 + 1)) + 2 * v5 + 2;\n        v13 = *(_QWORD *)(v1 + 8 * (v6 + 2 * v11)) + 2 * v5 + 2;\n        v14 = -16LL;\n        v15 = v10;\n        do\n        {\n          *(_WORD *)(v13 + 2 * v14 + 30) = *((_WORD *)v15 - 48);\n          *(_WORD *)(v12 + 2 * v14 + 30) = *((_WORD *)v15 - 32);\n          *(_WORD *)(v13 + 2 * v14 + 32) = *((_WORD *)v15 - 16);\n          *(_WORD *)(v12 + 2 * v14 + 32) = *(_WORD *)v15;\n          v15 += 128;\n          v14 += 2LL;\n        }\n        while ( v14 );\n        ++v11;\n        v10 += 2;\n      }\n      while ( v11 != 16 );\n      v2 = off_49F6D0;\n      v16 = *((unsigned int *)off_49F6D0 + 18177);\n      v17 = (signed int)v5 / (16 / (signed int)v16);\n      v66 = (signed int)v5 / (16 / (signed int)v16);\n      v18 = *((signed int *)off_49F6D0 + 18178);\n      result = (unsigned int)((signed int)v6 / (16 / (signed int)v18));\n      v65 = (signed int)v6 / (16 / (signed int)v18);\n      if ( v18 <= 0 )\n        goto LABEL_60;\n      v67 = v4;\n      v68 = (unsigned int)v18;\n      v75 = 2 * v18;\n      v19 = v17;\n      v73 = (unsigned int)((signed int)v6 / (16 / (signed int)v18));\n      v74 = (signed int)result;\n      v70 = v16 - 1;\n      result = -(v16 & 3);\n      v72 = -(v16 & 3);\n      v20 = v77;\n      v21 = v81;\n      v22 = 0LL;\n      while ( 1 )\n      {\n        if ( (signed int)v16 > 0 )\n        {\n          result = v22 + v74;\n          v23 = *(_QWORD *)(*v69 + 8 * (v22 + v74));\n          if ( v70 >= 3 )\n          {\n            v25 = v23 + 2LL * v17 + 6;\n            result = (__int64)v21;\n            v24 = 0LL;\n            do\n            {\n              *(_WORD *)(result - 192) = *(_WORD *)(v23 + 2LL * v17 + 2 * v24);\n              *(_WORD *)(result - 128) = *(_WORD *)(v25 + 2 * v24 - 4);\n              *(_WORD *)(result - 64) = *(_WORD *)(v25 + 2 * v24 - 2);\n              *(_WORD *)result = *(_WORD *)(v25 + 2 * v24);\n              v24 += 4LL;\n              result += 256LL;\n            }\n            while ( v16 - (v16 & 3) != v24 );\n            if ( !(v16 & 3) )\n              goto LABEL_23;\nLABEL_21:\n            v26 = v17 + v24;\n            v27 = &v20[64 * v24];\n            result = v23 + 2 * v26;\n            v28 = v72;\n            do\n            {\n              *(_WORD *)v27 = *(_WORD *)result;\n              v27 += 64;\n              result += 2LL;\n              ++v28;\n            }\n            while ( v28 );\n            goto LABEL_23;\n          }\n          v24 = 0LL;\n          if ( v16 & 3 )\n            goto LABEL_21;\n        }\nLABEL_23:\n        ++v22;\n        ++v21;\n        v20 += 2;\n        if ( v22 >= v75 )\n        {\n          if ( (signed int)v68 <= 0 )\n          {\n            v4 = v67;\n            goto LABEL_60;\n          }\n          v71 = v2;\n          result = v16 & 1;\n          v76 = result;\n          v29 = v16 - result;\n          v30 = v78;\n          v31 = 0LL;\n          while ( 2 )\n          {\n            if ( (signed int)v16 > 0 )\n            {\n              result = *v69;\n              v33 = *(_QWORD *)(*v69 + 8LL * ((signed int)v73 + 2 * (signed int)v31));\n              v34 = *(_QWORD *)(*v69 + 8LL * ((signed int)v73 + 2 * (signed int)v31 + 1));\n              if ( v70 )\n              {\n                result = (__int64)v30;\n                v32 = 0LL;\n                do\n                {\n                  *(_WORD *)(v33 + 2LL * v17 + 2 * v32) = *(_WORD *)(result - 64);\n                  *(_WORD *)(v34 + 2LL * v17 + 2 * v32) = *(_WORD *)(result + 2 * v18 - 64);\n                  *(_WORD *)(v33 + 2LL * v17 + 2 + 2 * v32) = *(_WORD *)result;\n                  *(_WORD *)(v34 + 2LL * v17 + 2 + 2 * v32) = *(_WORD *)(result + 2 * v18);\n                  v32 += 2LL;\n                  result += 128LL;\n                }\n                while ( v29 != v32 );\n                if ( v76 )\n                {\nLABEL_33:\n                  v35 = &v77[64 * v32];\n                  v36 = v17 + v32;\n                  *(_WORD *)(v33 + 2 * v36) = *(_WORD *)&v35[2 * v31];\n                  result = *(unsigned __int16 *)&v35[2 * (v18 + v31)];\n                  *(_WORD *)(v34 + 2 * v36) = result;\n                }\n              }\n              else\n              {\n                v32 = 0LL;\n                if ( v76 )\n                  goto LABEL_33;\n              }\n            }\n            ++v31;\n            ++v30;\n            if ( v31 != v68 )\n              continue;\n            break;\n          }\n          if ( (signed int)v18 <= 0 )\n            goto LABEL_58;\n          v37 = v77;\n          v38 = v81;\n          v39 = 0LL;\n          while ( 2 )\n          {\n            if ( (signed int)v16 > 0 )\n            {\n              result = v39 + v74;\n              v40 = *(_QWORD *)(v69[1] + 8 * (v39 + v74));\n              if ( v70 >= 3 )\n              {\n                result = v40 + 2 * v19 + 6;\n                v42 = v38;\n                v41 = 0LL;\n                do\n                {\n                  *(v42 - 96) = *(_WORD *)(v40 + 2 * v19 + 2 * v41);\n                  *(v42 - 64) = *(_WORD *)(result + 2 * v41 - 4);\n                  *(v42 - 32) = *(_WORD *)(result + 2 * v41 - 2);\n                  *v42 = *(_WORD *)(result + 2 * v41);\n                  v41 += 4LL;\n                  v42 += 128;\n                }\n                while ( v16 - (v16 & 3) != v41 );\n                if ( v16 & 3 )\n                  goto LABEL_44;\n              }\n              else\n              {\n                v41 = 0LL;\n                if ( !(v16 & 3) )\n                  goto LABEL_46;\nLABEL_44:\n                v43 = v19 + v41;\n                v44 = &v37[64 * v41];\n                result = v40 + 2 * v43;\n                v45 = v72;\n                do\n                {\n                  *(_WORD *)v44 = *(_WORD *)result;\n                  v44 += 64;\n                  result += 2LL;\n                  ++v45;\n                }\n                while ( v45 );\n              }\n            }\nLABEL_46:\n            ++v39;\n            ++v38;\n            v37 += 2;\n            if ( v39 >= v75 )\n            {\n              if ( (signed int)v68 > 0 )\n              {\n                v46 = v78;\n                v47 = 0LL;\n                do\n                {\n                  if ( (signed int)v16 > 0 )\n                  {\n                    result = v69[1];\n                    v49 = *(_QWORD *)(result + 8LL * ((signed int)v73 + 2 * (signed int)v47));\n                    v50 = *(_QWORD *)(result + 8LL * ((signed int)v73 + 2 * (signed int)v47 + 1));\n                    if ( v70 )\n                    {\n                      result = v49 + 2 * v19 + 2;\n                      v51 = v46;\n                      v48 = 0LL;\n                      do\n                      {\n                        *(_WORD *)(v49 + 2 * v19 + 2 * v48) = *(v51 - 32);\n                        *(_WORD *)(v50 + 2 * v19 + 2 * v48) = v51[v18 - 32];\n                        *(_WORD *)(result + 2 * v48) = *v51;\n                        *(_WORD *)(v50 + 2 * v19 + 2 + 2 * v48) = v51[v18];\n                        v48 += 2LL;\n                        v51 += 64;\n                      }\n                      while ( v16 - (v16 & 1) != v48 );\n                      if ( !(v16 & 1) )\n                        goto LABEL_57;\n                    }\n                    else\n                    {\n                      v48 = 0LL;\n                      if ( !(v16 & 1) )\n                        goto LABEL_57;\n                    }\n                    v52 = &v77[64 * v48];\n                    v53 = v19 + v48;\n                    *(_WORD *)(v49 + 2 * v53) = *(_WORD *)&v52[2 * v47];\n                    result = *(unsigned __int16 *)&v52[2 * (v47 + v18)];\n                    *(_WORD *)(v50 + 2 * v53) = result;\n                  }\nLABEL_57:\n                  ++v47;\n                  ++v46;\n                }\n                while ( v47 != v68 );\n              }\nLABEL_58:\n              v4 = v67;\n              v2 = v71;\nLABEL_60:\n              v4 += 2LL;\n              if ( v2[18121] <= (signed int)v4 )\n                return result;\n              result = qword_4F9E30;\n              goto LABEL_5;\n            }\n            continue;\n          }\n        }\n      }\n    }\n  }\n  else if ( v3 > 0 )\n  {\n    v54 = 0LL;\n    while ( 1 )\n    {\n      result = *(_QWORD *)(result + 6472);\n      if ( *(_BYTE *)(result + v54) )\n      {\n        sub_436A80(v54, (unsigned int *)&v66, &v65);\n        result = v66;\n        v55 = v65;\n        v56 = v1 + 8LL * v65;\n        v57 = -32LL;\n        do\n        {\n          v58 = *(_QWORD *)(v56 + 8 * v57 + 256);\n          v78[v57] = *(_WORD *)(v58 + 2 * result);\n          v80[v57] = *(_WORD *)(v58 + 2 * result + 2);\n          v81[v57] = *(_WORD *)(v58 + 2 * result + 4);\n          v82[v57] = *(_WORD *)(v58 + 2 * result + 6);\n          v83[v57] = *(_WORD *)(v58 + 2 * result + 8);\n          v84[v57] = *(_WORD *)(v58 + 2 * result + 10);\n          v85[v57] = *(_WORD *)(v58 + 2 * result + 12);\n          v86[v57] = *(_WORD *)(v58 + 2 * result + 14);\n          v87[v57] = *(_WORD *)(v58 + 2 * result + 16);\n          v88[v57] = *(_WORD *)(v58 + 2 * result + 18);\n          v89[v57] = *(_WORD *)(v58 + 2 * result + 20);\n          v90[v57] = *(_WORD *)(v58 + 2 * result + 22);\n          v91[v57] = *(_WORD *)(v58 + 2 * result + 24);\n          v92[v57] = *(_WORD *)(v58 + 2 * result + 26);\n          v93[v57] = *(_WORD *)(v58 + 2 * result + 28);\n          v94[v57++] = *(_WORD *)(v58 + 2 * result + 30);\n        }\n        while ( v57 );\n        v59 = &v79;\n        v60 = 0LL;\n        do\n        {\n          v61 = *(_QWORD *)(v1 + 8 * (v55 + 2 * v60 + 1)) + 2 * result + 2;\n          v62 = *(_QWORD *)(v1 + 8 * (v55 + 2 * v60)) + 2 * result + 2;\n          v63 = -16LL;\n          v64 = v59;\n          do\n          {\n            *(_WORD *)(v62 + 2 * v63 + 30) = *((_WORD *)v64 - 48);\n            *(_WORD *)(v61 + 2 * v63 + 30) = *((_WORD *)v64 - 32);\n            *(_WORD *)(v62 + 2 * v63 + 32) = *((_WORD *)v64 - 16);\n            *(_WORD *)(v61 + 2 * v63 + 32) = *(_WORD *)v64;\n            v64 += 128;\n            v63 += 2LL;\n          }\n          while ( v63 );\n          ++v60;\n          v59 += 2;\n        }\n        while ( v60 != 16 );\n        v2 = off_49F6D0;\n      }\n      v54 += 2LL;\n      if ( v2[18121] <= (signed int)v54 )\n        break;\n      result = qword_4F9E30;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41ca60L", 
            "funcEndAddr": "0x41d2d5L", 
            "funcName": "sub_41CA60"
        }, 
        {
            "decompiledFuncCode": "void *__usercall sub_41D2E0@<rax>(__int64 a1@<rdi>, __m128i a2@<xmm0>, double a3@<xmm1>, __m128i a4@<xmm12>)\n{\n  _DWORD *v4; // rax\n  _BOOL4 v5; // ecx\n  _DWORD *v6; // rdi\n  int v7; // ebp\n  int v8; // ebx\n  signed __int64 v9; // rbx\n  void *result; // rax\n\n  v4 = off_49F6D0;\n  *((_QWORD *)off_49F6D0 + 1769) = a1;\n  if ( *v4 != dword_49FB88 || (v5 = 1, v4[7] == 2) )\n  {\n    v5 = 0;\n    if ( *((_DWORD *)dest + 307) )\n    {\n      if ( (unsigned int)(v4[6] - 2) <= 2 )\n        v5 = v4[7] != 2;\n    }\n  }\n  *(_DWORD *)(a1 + 4) = v5;\n  *(_DWORD *)a1 = 0;\n  *(_QWORD *)(a1 + 812) = 0LL;\n  *(_DWORD *)(a1 + 820) = 0;\n  sub_424150();\n  v6 = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18163) = 1;\n  sub_41B090(v6, (_DWORD *)qword_4F9DB8, (__int64)qword_4F9DC0, a2);\n  sub_41B860();\n  sub_455FA0();\n  sub_456E20();\n  if ( *((_DWORD *)dest + 805) )\n  {\n    sub_4564F0();\n    sub_457230();\n  }\n  if ( *((_DWORD *)off_49F6D0 + 4) > 0 )\n  {\n    v7 = 0;\n    v8 = 0;\n    do\n    {\n      while ( !(unsigned int)sub_41BC50(v7) )\n      {\n        v8 += sub_478A10(v7, a3, a4);\n        sub_41BBF0(*((_DWORD *)off_49F6D0 + 3));\n        ++*((_DWORD *)off_49F6D0 + 5);\n        *((_DWORD *)off_49F6D8 + 6) = 0;\n      }\n      ++v7;\n    }\n    while ( v8 < *((_DWORD *)off_49F6D0 + 4) );\n  }\n  sub_41BA80();\n  if ( *((_DWORD *)dest + 616) == 2 && *((_DWORD *)off_49F6D0 + 6) != 1 && *((_DWORD *)dest + 726) > 0 )\n  {\n    sub_428FA0((__int64)off_49F6D0, **((_QWORD **)off_49F6E8 + 3), 0LL);\n    if ( *((_DWORD *)dest + 726) >= 2 )\n    {\n      v9 = 1LL;\n      do\n        sub_428FA0((__int64)off_49F6D0, *(_QWORD *)(*((_QWORD *)off_49F6E8 + 3) + 8 * v9++), 0LL);\n      while ( v9 < *((signed int *)dest + 726) );\n    }\n  }\n  sub_428FA0((__int64)off_49F6D0, *(_QWORD *)(qword_4F9E30 + 6424), *(_QWORD *)(qword_4F9E30 + 6464));\n  result = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n    result = (void *)sub_41CA60();\n  return result;\n}\n", 
            "funcStartAddr": "0x41d2e0L", 
            "funcEndAddr": "0x41d4f3L", 
            "funcName": "sub_41D2E0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 sub_41D500()\n{\n  char *v0; // rcx\n  int v1; // eax\n  __int128 *v2; // rcx\n  int *v3; // rdx\n  int v4; // esi\n  int v5; // eax\n  __int64 v6; // r8\n  __int64 v7; // rbp\n  unsigned __int64 v8; // rdi\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rbp\n  _DWORD *v12; // rdi\n  _DWORD *v13; // rdi\n  __int64 v14; // rax\n  _DWORD *v15; // r8\n  int v16; // esi\n  int v17; // er9\n  int v18; // edi\n  int v19; // eax\n  int v20; // edi\n  signed __int64 v21; // rbx\n  int v22; // esi\n  int v23; // edi\n  int v24; // edx\n  double v25; // xmm0_8\n  int v26; // edx\n  int v27; // ebp\n  int v28; // er8\n  _DWORD *v29; // rax\n  int v30; // edi\n  int v31; // ebx\n  int v32; // edi\n  __int64 v33; // rbp\n  signed int v34; // esi\n  int v35; // eax\n  int v36; // edi\n  signed int v37; // eax\n  char *v38; // rax\n  __int64 v39; // rdx\n  _DWORD *v40; // rcx\n  double v41; // xmm0_8\n  int v42; // esi\n  int v43; // edx\n  int v44; // er14\n  __off_t v45; // r15\n  int v46; // ebp\n  unsigned int v47; // eax\n  int v48; // er12\n  __int64 v49; // rbx\n  _DWORD *v50; // r13\n  __int64 v51; // r11\n  __int64 v52; // rdi\n  __int64 v53; // r15\n  signed __int64 v54; // r8\n  __int64 v55; // r13\n  __int64 v56; // rcx\n  _QWORD *v57; // r10\n  __int64 v58; // rsi\n  __int64 v59; // rbx\n  __int16 v60; // bp\n  __int64 v61; // rdx\n  signed __int64 v62; // rax\n  __int64 v63; // rax\n  _WORD *v64; // rdx\n  __int64 v65; // r12\n  _QWORD *v66; // rdx\n  __int64 v67; // rcx\n  unsigned __int64 v68; // rax\n  signed __int64 v69; // r11\n  __int64 v70; // r10\n  __int64 v71; // rsi\n  unsigned __int64 v72; // r14\n  unsigned __int64 v73; // r9\n  unsigned __int64 v74; // rbp\n  unsigned __int64 v75; // rbx\n  __int64 v76; // rax\n  __int64 v77; // rax\n  signed __int64 v78; // rbx\n  signed __int64 v79; // rbp\n  __int64 v80; // rdi\n  __int64 v81; // rbp\n  signed __int64 v82; // rbx\n  __int128 v83; // xmm1\n  __int128 v84; // xmm1\n  __int128 v85; // xmm1\n  __int128 v86; // xmm1\n  signed __int64 v87; // rax\n  __int64 v88; // rbx\n  __int128 v89; // xmm1\n  _QWORD *v90; // rax\n  signed __int64 v91; // r9\n  __int64 v92; // rbx\n  __int64 v93; // rdx\n  __int64 v94; // rsi\n  signed __int64 v95; // rcx\n  __int16 v96; // bp\n  __int16 v97; // cx\n  signed __int64 v98; // r11\n  signed __int64 v99; // rdi\n  signed __int64 v100; // rsi\n  signed __int64 v101; // rdx\n  __int64 v102; // rdi\n  __int64 v103; // r8\n  __int64 v104; // r15\n  _QWORD *v105; // r9\n  __int64 v106; // r12\n  unsigned __int64 v107; // rax\n  signed __int64 v108; // rdi\n  __int64 v109; // rbp\n  __int64 v110; // rdi\n  unsigned __int64 v111; // rcx\n  unsigned __int64 v112; // rdx\n  unsigned __int64 v113; // rbx\n  unsigned __int64 v114; // rax\n  signed __int64 v115; // rbp\n  signed __int64 v116; // rdi\n  signed __int64 v117; // rax\n  signed __int64 v118; // rbx\n  signed __int64 v119; // rdx\n  signed __int64 v120; // rcx\n  __int64 v121; // rbp\n  unsigned __int64 v122; // rdi\n  unsigned __int64 v123; // rbp\n  unsigned __int64 v124; // r11\n  unsigned __int64 v125; // r14\n  bool v126; // si\n  bool v127; // r10\n  bool v128; // r8\n  bool v129; // r9\n  bool v130; // r13\n  bool v131; // di\n  bool v132; // r11\n  bool v133; // r14\n  bool v134; // bp\n  signed __int64 v135; // rdi\n  __int128 v136; // xmm1\n  __int128 v137; // xmm1\n  __int128 v138; // xmm1\n  __int128 v139; // xmm1\n  __int128 v140; // xmm1\n  __int128 v141; // xmm1\n  _DWORD *v142; // rsi\n  int v143; // eax\n  int *v144; // rdx\n  int *v145; // rcx\n  _QWORD *v146; // rax\n  signed int v147; // ecx\n  int v148; // ecx\n  int v149; // eax\n  int v150; // eax\n  int v151; // eax\n  _DWORD *v152; // rax\n  int v153; // er13\n  int v154; // ebx\n  int v155; // er14\n  void *v156; // r12\n  int v157; // er15\n  int v158; // eax\n  _DWORD *v159; // rcx\n  int v160; // eax\n  int v161; // ebp\n  int v162; // ebp\n  bool v163; // bl\n  int v164; // edx\n  bool v165; // al\n  _DWORD *v166; // rsi\n  int v167; // eax\n  _DWORD *v168; // rdi\n  _DWORD *v169; // rcx\n  int v170; // eax\n  int v171; // eax\n  signed int v172; // edx\n  float *v173; // r14\n  float *v174; // rbp\n  _BOOL8 v175; // rbx\n  _DWORD *v176; // r15\n  double v177; // xmm0_8\n  int v178; // eax\n  __int128 *v179; // rdx\n  char v180; // si\n  __int128 *v181; // rdi\n  void *v182; // rcx\n  void *v183; // rdx\n  _DWORD *v184; // rsi\n  int v185; // edi\n  int v186; // ebp\n  int v187; // ebx\n  _DWORD *v188; // rdi\n  int v189; // eax\n  unsigned int *v190; // rdi\n  _DWORD *v191; // rax\n  unsigned int *v192; // rax\n  __int64 v193; // r11\n  __int64 v194; // r8\n  __int64 v195; // r13\n  __int64 v196; // rbx\n  __int64 v197; // rsi\n  __int64 v198; // rdi\n  __int64 v199; // rdx\n  __int64 v200; // r14\n  __int64 v201; // r15\n  __int64 v202; // rdi\n  __int64 v203; // rdx\n  __int64 v204; // rdx\n  __int64 v205; // rbp\n  __int64 v206; // rbx\n  __int64 v207; // r12\n  __int64 v208; // rax\n  __int64 v209; // rcx\n  __int64 v210; // r11\n  _QWORD *v211; // rax\n  __int64 v212; // rdi\n  signed int v213; // eax\n  signed int v214; // ecx\n  signed int v215; // edx\n  float v216; // xmm0_4\n  char *v217; // rcx\n  int *v218; // rax\n  float v219; // xmm0_4\n  double v220; // xmm1_8\n  float v221; // xmm0_4\n  int v222; // edx\n  int v223; // edi\n  float v224; // xmm2_4\n  float v225; // xmm1_4\n  float v226; // xmm5_4\n  float v227; // edx\n  unsigned int v228; // esi\n  unsigned int v229; // edi\n  int v230; // edx\n  unsigned __int64 v231; // rsi\n  float v232; // xmm3_4\n  float v233; // xmm4_4\n  float *v234; // rcx\n  int v235; // ecx\n  void *v236; // rdi\n  int v237; // eax\n  void *v238; // rdi\n  __int128 *v239; // rax\n  __int64 v240; // rdx\n  int v241; // esi\n  _DWORD *v242; // rax\n  void **v243; // rbx\n  __int128 *v244; // rax\n  int v245; // ecx\n  __int64 v246; // rdx\n  void **v247; // rbx\n  __int64 v248; // r8\n  double v249; // xmm0_8\n  double v250; // xmm1_8\n  double v251; // xmm2_8\n  __int64 v252; // rdx\n  void **v253; // rbx\n  __int64 v254; // rdx\n  void **v255; // rbx\n  __int64 v256; // rcx\n  __int64 v257; // r8\n  double v258; // xmm0_8\n  double v259; // xmm1_8\n  double v260; // xmm2_8\n  __int64 v261; // rbp\n  __int64 v262; // rdx\n  void **v263; // rbx\n  int v265; // ecx\n  bool v266; // [rsp+8h] [rbp-80h]\n  __int64 v267; // [rsp+8h] [rbp-80h]\n  bool v268; // [rsp+8h] [rbp-80h]\n  double v269; // [rsp+8h] [rbp-80h]\n  __int64 v270; // [rsp+10h] [rbp-78h]\n  signed __int64 v271; // [rsp+10h] [rbp-78h]\n  __int64 v272; // [rsp+10h] [rbp-78h]\n  double v273; // [rsp+10h] [rbp-78h]\n  int v274; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v275; // [rsp+18h] [rbp-70h]\n  _QWORD *v276; // [rsp+18h] [rbp-70h]\n  __int64 v277; // [rsp+20h] [rbp-68h]\n  unsigned __int64 v278; // [rsp+20h] [rbp-68h]\n  int v279; // [rsp+20h] [rbp-68h]\n  unsigned int v280; // [rsp+28h] [rbp-60h]\n  __int64 v281; // [rsp+28h] [rbp-60h]\n  __int64 v282; // [rsp+28h] [rbp-60h]\n  int v283; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v284; // [rsp+30h] [rbp-58h]\n  signed __int64 v285; // [rsp+30h] [rbp-58h]\n  signed int v286; // [rsp+30h] [rbp-58h]\n  unsigned int v287; // [rsp+38h] [rbp-50h]\n  _DWORD *v288; // [rsp+38h] [rbp-50h]\n  int v289; // [rsp+38h] [rbp-50h]\n  __int64 v290; // [rsp+40h] [rbp-48h]\n  _DWORD *v291; // [rsp+48h] [rbp-40h]\n  int v292; // [rsp+48h] [rbp-40h]\n  signed __int64 v293; // [rsp+50h] [rbp-38h]\n  signed __int64 v294; // [rsp+50h] [rbp-38h]\n\n  dword_4FA10C = 0;\n  v0 = (char *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 17951) = 0;\n  qword_4F9E18 = 0LL;\n  qword_4F9E20 = 0LL;\n  qword_4F9E28 = 0LL;\n  *((_DWORD *)v0 + 18156) = 0;\n  if ( *((_DWORD *)dest + 14) && *(_DWORD *)v0 )\n  {\n    v1 = sub_41AF10(0, 0);\n    v2 = off_49F6D8;\n    *((_DWORD *)off_49F6D8 + 373) = v1;\n    *((_DWORD *)v2 + 372) += v1;\n    v0 = (char *)off_49F6D0;\n  }\n  qword_4F9EB0 = (__int64)qword_4F9EC0;\n  qword_4F9E88 = (__int64)qword_4F9E98;\n  v3 = (int *)qword_4F9EE8;\n  qword_4F9ED8 = (__int64)qword_4F9EE8;\n  *((_DWORD *)v0 + 3) = 0;\n  *((_DWORD *)v0 + 5) = 0;\n  *((_DWORD *)off_49F6D8 + 6) = 0;\n  *((_DWORD *)v0 + 24) = 0;\n  *(_OWORD *)(v0 + 152) = 0LL;\n  *(_OWORD *)(v0 + 136) = 0LL;\n  v4 = *((_DWORD *)v0 + 15) / 16;\n  v5 = v4 * (*((_DWORD *)v0 + 13) / 16);\n  if ( v5 > 0 )\n  {\n    v6 = *((_QWORD *)v0 + 1771);\n    v7 = v5;\n    v8 = v5 - 1LL;\n    v9 = v5 & 3;\n    if ( v8 < 3 )\n    {\n      v10 = 0LL;\n      if ( !v9 )\n        goto LABEL_13;\n      goto LABEL_11;\n    }\n    v11 = v7 - v9;\n    v12 = (_DWORD *)(v6 + 1900);\n    v10 = 0LL;\n    do\n    {\n      *(v12 - 474) = -1;\n      *(v12 - 316) = -1;\n      *(v12 - 158) = -1;\n      *v12 = -1;\n      v10 += 4LL;\n      v12 += 632;\n    }\n    while ( v11 != v10 );\n    if ( v9 )\n    {\nLABEL_11:\n      v13 = (_DWORD *)(v6 + 632 * v10 + 4);\n      v14 = -v9;\n      do\n      {\n        *v13 = -1;\n        v13 += 158;\n        ++v14;\n      }\n      while ( v14 );\n      goto LABEL_13;\n    }\n  }\nLABEL_13:\n  if ( !*((_DWORD *)v0 + 17977) )\n  {\n    v27 = *(_DWORD *)v0;\n    v28 = dword_49FB88;\n    v29 = dest;\n    v30 = dword_49FB8C + (*(_DWORD *)v0 - dword_49FB88) * (*((_DWORD *)dest + 5) + 1);\n    *((_DWORD *)v0 + 17948) = v30;\n    *((_DWORD *)v0 + 17970) = *((_DWORD *)v0 + 17969);\n    *((_DWORD *)v0 + 17969) = v30;\n    v31 = v29[610];\n    if ( v31 && v27 + 1 == v29[2] )\n    {\n      *((_DWORD *)v0 + 17948) = v31;\n      v30 = v31;\n    }\n    if ( v27 != v28 && v29[309] )\n      dword_4FA118 = v30;\n    if ( !v29[809] )\n    {\n      v162 = *((_DWORD *)v0 + 6);\n      v163 = v29[613] <= 0 || v30 < v29[613];\n      if ( v162 == 2 )\n      {\n        if ( v163 )\n          v164 = v29[3];\n        else\n          v164 = v29[614];\n        *((_DWORD *)v0 + 10) = v164;\n      }\n      else\n      {\n        v168 = v29 + 611;\n        if ( v163 )\n          v168 = v29 + 4;\n        *((_DWORD *)v0 + 10) = *v168;\n        if ( v162 == 3 )\n        {\n          *((_DWORD *)v0 + 10) = v29[319];\n          *((_DWORD *)v0 + 11) = v29[320];\n        }\n      }\n    }\n    *((_DWORD *)v0 + 23) = *((_DWORD *)v0 + 22);\n    v32 = v29[19];\n    if ( v32 > 0 )\n      *((_DWORD *)v0 + 22) = (*(_DWORD *)v0 - v28) / v32 % v4;\n    goto LABEL_41;\n  }\n  v15 = dest;\n  v16 = *((_DWORD *)dest + 5) + 1;\n  *((_DWORD *)v0 + 17976) = v16;\n  v17 = dword_49FB8C;\n  v18 = *(_DWORD *)v0 - dword_49FB88;\n  v19 = dword_49FB8C + v16 * (v18 - 1);\n  v20 = v16 * v18;\n  *v3 = v19;\n  if ( *((_DWORD *)v0 + 18094) >= 2 )\n  {\n    v21 = 1LL;\n    v22 = v19;\n    do\n    {\n      v22 -= *((_DWORD *)v0 + 17976);\n      v3[v21++] = v22;\n    }\n    while ( v21 < *((signed int *)v0 + 18094) );\n  }\n  v23 = v17 + v20;\n  v24 = v15[610];\n  if ( v24 && *(_DWORD *)v0 + 1 == v15[2] )\n  {\n    *((_DWORD *)v0 + 17976) = v24 - v19;\n    v23 = v24;\n  }\n  v25 = (double)(v15[5] + 1) / ((double)(signed int)v15[309] + 1.0);\n  *((double *)v0 + 8987) = v25;\n  v26 = v15[330];\n  if ( v26 == 3 )\n  {\n    *((_QWORD *)v0 + 8987) = 4607182418800017408LL;\n    v25 = 1.0;\n  }\n  else if ( !v26 )\n  {\n    LODWORD(v33) = *((_DWORD *)v0 + 17977);\n    v34 = (signed int)(v25 * (double)(signed int)v33);\n    goto LABEL_33;\n  }\n  v33 = *((signed int *)v0 + 17977);\n  v34 = (signed int)((double)(*((_DWORD *)qword_4F9E70 + 6 * v33 - 5) + 1) * v25);\nLABEL_33:\n  v35 = v34 + v19;\n  *((_DWORD *)v0 + 17948) = v35;\n  if ( v35 >= v23 )\n  {\n    v36 = v23 - 1;\n    *((_DWORD *)v0 + 17948) = v36;\n    v35 = v36;\n  }\n  if ( v15[809] )\n  {\n    if ( v26 != 3 )\n      goto LABEL_41;\n    goto LABEL_39;\n  }\n  if ( v26 == 3 )\n  {\nLABEL_39:\n    v37 = *((_DWORD *)qword_4F9E70 + 6 * ((signed int)v33 - 1) + 3);\nLABEL_40:\n    *((_DWORD *)v0 + 10) = v37;\n    goto LABEL_41;\n  }\n  v165 = v15[613] <= 0 || v35 < v15[613];\n  v166 = v15 + 612;\n  if ( v165 )\n    v166 = v15 + 310;\n  *((_DWORD *)v0 + 10) = *v166;\n  if ( *((_DWORD *)v0 + 18124) )\n  {\n    if ( v165 )\n      v167 = v15[310] + v15[311];\n    else\n      v167 = v15[612] + v15[615];\n    v172 = 51;\n    if ( v167 < 52 )\n      v172 = v167;\n    v37 = 0;\n    if ( v172 >= 0 )\n      v37 = v172;\n    goto LABEL_40;\n  }\nLABEL_41:\n  sub_4774D0(*((_DWORD *)v0 + 18096));\n  sub_477D00(0, 0, 0, -1);\n  v38 = (char *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 4) = *((_DWORD *)off_49F6D0 + 13) * *((_DWORD *)off_49F6D0 + 15) / 256;\n  *(_OWORD *)(v38 + 72504) = 0LL;\n  v39 = *((signed int *)v38 + 17977);\n  if ( *((_DWORD *)v38 + 17977) )\n  {\n    v40 = dest;\n    v41 = *((double *)v38 + 8987);\n    if ( *((_DWORD *)dest + 330) )\n      LODWORD(v39) = *((_DWORD *)qword_4F9E70 + 6 * v39 - 5) + 1;\n    v44 = (signed int)(v41 * (double)(signed int)v39)\n        + dword_49FB8C\n        + (*(_DWORD *)v38 - 1 - dword_49FB88) * (*((_DWORD *)dest + 5) + 1);\n    goto LABEL_48;\n  }\n  v42 = *(_DWORD *)v38 - dword_49FB88;\n  v40 = dest;\n  v43 = dword_49FB8C + v42 * (*((_DWORD *)dest + 5) + 1);\n  dword_4FA0D8 = dword_49FB8C + v42 * (*((_DWORD *)dest + 5) + 1);\n  v44 = *((_DWORD *)dest + 610);\n  if ( v44 && *(_DWORD *)v38 + 1 == *((_DWORD *)dest + 2) )\n  {\nLABEL_48:\n    dword_4FA0D8 = v44;\n    goto LABEL_49;\n  }\n  v44 = v43;\nLABEL_49:\n  v45 = (signed int)v40[55];\n  v46 = *((_DWORD *)v38 + 18164) / 8;\n  v274 = v40[17];\n  v280 = v40[16];\n  v283 = v40[826];\n  v287 = v40[827];\n  v47 = v46 * v280 * v274;\n  v48 = v46 * v287 * v283;\n  if ( v40[828] == 1 )\n    v266 = v40[18] == 3;\n  else\n    v266 = 0;\n  LODWORD(v49) = v47 + 2 * v48;\n  v270 = v46 * v280 * v274;\n  v50 = malloc(v47);\n  if ( !v50 )\n    sub_43EF40(0LL, (__int64)\"ReadOneFrame: buf\");\n  v49 = (signed int)v49;\n  if ( lseek(fd, v45, 0) != v45 )\n    error((__int64)\"ReadOneFrame: cannot fseek to (Header size) in p_in\", -1);\n  if ( lseek(fd, v49 * *((signed int *)dest + 308), 1) == -1 )\n  {\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\\n\",\n      *((unsigned int *)dest + 308));\n    error((__int64)byte_4F8250, -1);\n  }\n  if ( lseek(fd, v49 * v44, 1) == -1 )\n  {\n    snprintf(\n      byte_4F8250,\n      0x12CuLL,\n      \"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\\n\",\n      (unsigned int)(*((_DWORD *)dest + 308) + v44));\n    error((__int64)byte_4F8250, -1);\n  }\n  if ( *((_BYTE *)off_49F6D0 + 72656) & 7 )\n  {\n    printf(\"ReadOneFrame (NOT IMPLEMENTED): pic unit size on disk must be divided by 8\");\n    exit(-1);\n  }\n  if ( v266 )\n    lseek(\n      fd,\n      ((unsigned __int64)((unsigned __int128)(6148914691236517206LL * (signed __int128)v49) >> 64) >> 63)\n    + ((unsigned __int128)(6148914691236517206LL * (signed __int128)v49) >> 64),\n      1);\n  if ( read(fd, v50, (signed int)v270) != (signed int)v270 )\n    goto LABEL_405;\n  sub_422D80((__int64)qword_4F9EC0, v50, v280, v274, v46);\n  if ( !*((_DWORD *)off_49F6D0 + 18175) )\n    goto LABEL_73;\n  if ( read(fd, v50, v48) != v48 )\n    goto LABEL_405;\n  sub_422D80(*(_QWORD *)qword_4F9E98, v50, v287, v283, v46);\n  if ( v266 )\n    lseek(fd, -v49, 1);\n  if ( read(fd, v50, v48) != v48 )\n  {\nLABEL_405:\n    printf(\"ReadOneFrame: cannot read %d bytes from input file, unexpected EOF?, exiting\", v270);\n    sub_425490();\n    exit(-1);\n  }\n  sub_422D80(*((_QWORD *)qword_4F9E98 + 1), v50, v287, v283, v46);\n  if ( v266 )\n    lseek(\n      fd,\n      ((unsigned __int64)((unsigned __int128)(6148914691236517206LL * (signed __int128)(2 * v49)) >> 64) >> 63)\n    + ((unsigned __int128)(6148914691236517206LL * (signed __int128)(2 * v49)) >> 64),\n      1);\nLABEL_73:\n  free(v50);\n  v51 = *((unsigned int *)dest + 17);\n  v52 = *((signed int *)off_49F6D0 + 13);\n  v53 = *((signed int *)off_49F6D0 + 15);\n  v54 = *((signed int *)dest + 827);\n  v291 = dest;\n  v267 = *((unsigned int *)dest + 826);\n  v55 = *((signed int *)off_49F6D0 + 14);\n  v288 = off_49F6D0;\n  v281 = *((signed int *)off_49F6D0 + 16);\n  if ( (signed int)v51 > 0 )\n  {\n    v56 = *((signed int *)dest + 16);\n    v57 = qword_4F9EC0;\n    v58 = 0LL;\n    do\n    {\n      if ( (signed int)v56 < (signed int)v52 )\n      {\n        v59 = v57[v58];\n        v60 = *(_WORD *)(v59 + 2 * v56 - 2);\n        v61 = v56;\n        if ( ((_BYTE)v52 - (_BYTE)v56) & 7 )\n        {\n          v62 = -(signed __int64)(((_BYTE)v52 - (_BYTE)v56) & 7);\n          v61 = v56;\n          do\n          {\n            *(_WORD *)(v59 + 2 * v61++) = v60;\n            ++v62;\n          }\n          while ( v62 );\n        }\n        if ( (unsigned __int64)(v52 - 1 - v56) >= 7 )\n        {\n          v63 = v52 - v61;\n          v64 = (_WORD *)(v59 + 2 * v61 + 14);\n          do\n          {\n            *(v64 - 7) = v60;\n            *(v64 - 6) = v60;\n            *(v64 - 5) = v60;\n            *(v64 - 4) = v60;\n            *(v64 - 3) = v60;\n            *(v64 - 2) = v60;\n            *(v64 - 1) = v60;\n            *v64 = v60;\n            v64 += 8;\n            v63 -= 8LL;\n          }\n          while ( v63 );\n        }\n      }\n      ++v58;\n    }\n    while ( v58 != v51 );\n  }\n  if ( (signed int)v51 < (signed int)v53 )\n  {\n    v65 = (unsigned int)v52;\n    v66 = qword_4F9EC0;\n    v67 = (signed int)v51;\n    v68 = (unsigned int)v52 & 0xFFFFFFF0;\n    v275 = v68;\n    v68 -= 16LL;\n    v284 = v68;\n    v68 >>= 4;\n    v69 = (unsigned int)v52 - 1LL;\n    v70 = v52 & 3;\n    v71 = ((_BYTE)v68 + 1) & 3;\n    v293 = v71 - 1 - v68;\n    v277 = ((_BYTE)v68 + 1) & 3;\n    while ( 1 )\n    {\n      if ( (signed int)v65 <= 0 )\n        goto LABEL_106;\n      v72 = v66[v67 - 1];\n      v73 = v66[v67];\n      if ( (unsigned int)v65 < 0x10 || v73 < v72 + 2 * v65 && v72 < v73 + 2 * v65 )\n      {\n        v74 = 0LL;\nLABEL_90:\n        v75 = v69 - v74;\n        if ( v70 )\n        {\n          v76 = -v70;\n          do\n          {\n            *(_WORD *)(v73 + 2 * v74) = *(_WORD *)(v72 + 2 * v74);\n            ++v74;\n            ++v76;\n          }\n          while ( v76 );\n        }\n        if ( v75 >= 3 )\n        {\n          v77 = v65 - v74;\n          v78 = v73 + 2 * v74 + 6;\n          v79 = v72 + 2 * v74 + 6;\n          v80 = 0LL;\n          do\n          {\n            *(_WORD *)(v78 + 2 * v80 - 6) = *(_WORD *)(v79 + 2 * v80 - 6);\n            *(_WORD *)(v78 + 2 * v80 - 4) = *(_WORD *)(v79 + 2 * v80 - 4);\n            *(_WORD *)(v78 + 2 * v80 - 2) = *(_WORD *)(v79 + 2 * v80 - 2);\n            *(_WORD *)(v78 + 2 * v80) = *(_WORD *)(v79 + 2 * v80);\n            v80 += 4LL;\n          }\n          while ( v77 != v80 );\n        }\n        goto LABEL_106;\n      }\n      if ( v284 < 0x30 )\n        break;\n      v82 = v293;\n      v81 = 0LL;\n      do\n      {\n        v83 = *(_OWORD *)(v72 + 2 * v81 + 16);\n        *(_OWORD *)(v73 + 2 * v81) = *(_OWORD *)(v72 + 2 * v81);\n        *(_OWORD *)(v73 + 2 * v81 + 16) = v83;\n        v84 = *(_OWORD *)(v72 + 2 * v81 + 48);\n        *(_OWORD *)(v73 + 2 * v81 + 32) = *(_OWORD *)(v72 + 2 * v81 + 32);\n        *(_OWORD *)(v73 + 2 * v81 + 48) = v84;\n        v85 = *(_OWORD *)(v72 + 2 * v81 + 80);\n        *(_OWORD *)(v73 + 2 * v81 + 64) = *(_OWORD *)(v72 + 2 * v81 + 64);\n        *(_OWORD *)(v73 + 2 * v81 + 80) = v85;\n        v86 = *(_OWORD *)(v72 + 2 * v81 + 112);\n        *(_OWORD *)(v73 + 2 * v81 + 96) = *(_OWORD *)(v72 + 2 * v81 + 96);\n        *(_OWORD *)(v73 + 2 * v81 + 112) = v86;\n        v81 += 64LL;\n        v82 += 4LL;\n      }\n      while ( v82 );\n      if ( v277 )\n        goto LABEL_103;\nLABEL_105:\n      v74 = v275;\n      if ( v275 != v65 )\n        goto LABEL_90;\nLABEL_106:\n      if ( ++v67 == v53 )\n        goto LABEL_107;\n    }\n    v81 = 0LL;\n    if ( !v277 )\n      goto LABEL_105;\nLABEL_103:\n    v87 = v81 + v81 + 16;\n    v88 = -v71;\n    do\n    {\n      v89 = *(_OWORD *)(v72 + v87);\n      *(_OWORD *)(v73 + v87 - 16) = *(_OWORD *)(v72 + v87 - 16);\n      *(_OWORD *)(v73 + v87) = v89;\n      v87 += 32LL;\n      ++v88;\n    }\n    while ( v88 );\n    goto LABEL_105;\n  }\nLABEL_107:\n  if ( v288[18175] )\n  {\n    if ( (signed int)v267 > 0 )\n    {\n      v90 = qword_4F9E98;\n      v91 = v54 - 1;\n      v92 = 0LL;\n      do\n      {\n        if ( (signed int)v54 < (signed int)v55 )\n        {\n          v93 = *(_QWORD *)(*v90 + 8 * v92);\n          v94 = *(_QWORD *)(v90[1] + 8 * v92);\n          if ( v93 + 2 * v91 >= (unsigned __int64)(v94 + 2 * v55) || v94 + 2 * v91 >= (unsigned __int64)(v93 + 2 * v55) )\n          {\n            v96 = *(_WORD *)(v93 + 2 * v54 - 2);\n            v97 = *(_WORD *)(v94 + 2 * v54 - 2);\n            v98 = v54;\n            if ( ((_BYTE)v55 - (_BYTE)v54) & 3 )\n            {\n              v99 = -(signed __int64)(((_BYTE)v55 - (_BYTE)v54) & 3);\n              v98 = v54;\n              do\n              {\n                *(_WORD *)(v93 + 2 * v98) = v96;\n                *(_WORD *)(v94 + 2 * v98++) = v97;\n                ++v99;\n              }\n              while ( v99 );\n            }\n            if ( (unsigned __int64)(v55 - 1 - v54) >= 3 )\n            {\n              v100 = v94 + 2 * v98 + 6;\n              v101 = v93 + 2 * v98 + 6;\n              v102 = 0LL;\n              do\n              {\n                *(_WORD *)(v101 + 2 * v102 - 6) = v96;\n                *(_WORD *)(v100 + 2 * v102 - 6) = v97;\n                *(_WORD *)(v101 + 2 * v102 - 4) = v96;\n                *(_WORD *)(v100 + 2 * v102 - 4) = v97;\n                *(_WORD *)(v101 + 2 * v102 - 2) = v96;\n                *(_WORD *)(v100 + 2 * v102 - 2) = v97;\n                *(_WORD *)(v101 + 2 * v102) = v96;\n                *(_WORD *)(v100 + 2 * v102) = v97;\n                v102 += 4LL;\n              }\n              while ( v55 - v98 != v102 );\n            }\n          }\n          else\n          {\n            v95 = v54;\n            if ( ((_BYTE)v55 - (_BYTE)v54) & 1 )\n            {\n              *(_WORD *)(v93 + 2 * v54) = *(_WORD *)(v93 + 2 * v54 - 2);\n              *(_WORD *)(v94 + 2 * v54) = *(_WORD *)(v94 + 2 * v54 - 2);\n              v95 = v54 + 1;\n            }\n            if ( v55 - 1 != v54 )\n            {\n              do\n              {\n                *(_WORD *)(v93 + 2 * v95) = *(_WORD *)(v93 + 2 * v95 - 2);\n                *(_WORD *)(v94 + 2 * v95) = *(_WORD *)(v94 + 2 * v95 - 2);\n                *(_WORD *)(v93 + 2 * v95 + 2) = *(_WORD *)(v93 + 2 * v95);\n                *(_WORD *)(v94 + 2 * v95 + 2) = *(_WORD *)(v94 + 2 * v95);\n                v95 += 2LL;\n              }\n              while ( v55 != v95 );\n            }\n          }\n        }\n        ++v92;\n      }\n      while ( v92 != v267 );\n    }\n    v103 = v281;\n    if ( (signed int)v267 < (signed int)v281 )\n    {\n      v104 = (unsigned int)v55;\n      v105 = qword_4F9E98;\n      v106 = (signed int)v267;\n      v107 = (unsigned int)v55 & 0xFFFFFFF0;\n      v285 = v107;\n      v107 -= 16LL;\n      v278 = v107;\n      v107 >>= 4;\n      v271 = (unsigned int)v55 - 1LL;\n      v290 = ((_BYTE)v107 + 1) & 1;\n      v294 = v290 - 1 - v107;\n      v276 = qword_4F9E98;\n      do\n      {\n        if ( (signed int)v104 <= 0 )\n          goto LABEL_150;\n        v110 = v105[1];\n        v111 = *(_QWORD *)(*v105 + 8 * v106 - 8);\n        v112 = *(_QWORD *)(*v105 + 8 * v106);\n        v113 = *(_QWORD *)(v110 + 8 * v106 - 8);\n        v114 = *(_QWORD *)(v110 + 8 * v106);\n        if ( (unsigned int)v104 < 0x10 )\n        {\n          v108 = 0LL;\n          goto LABEL_133;\n        }\n        v122 = v112 + 2 * v104;\n        v123 = v114 + 2 * v104;\n        v124 = v111 + 2 * v104;\n        v125 = v113 + 2 * v104;\n        v126 = v112 < v123;\n        v127 = v114 < v122;\n        v128 = v112 < v124;\n        v129 = v111 < v122;\n        v130 = v112 < v125;\n        v131 = v113 < v122;\n        v132 = v114 < v124;\n        v268 = v111 < v123;\n        v133 = v114 < v125;\n        v134 = v113 < v123;\n        if ( v127 && v126 || v129 && v128 || v131 && v130 || v268 && v132 )\n        {\n          v108 = 0LL;\n          v103 = v281;\n          v105 = v276;\nLABEL_133:\n          v115 = v108;\n          if ( v104 & 1 )\n          {\n            *(_WORD *)(v112 + 2 * v108) = *(_WORD *)(v111 + 2 * v108);\n            *(_WORD *)(v114 + 2 * v108) = *(_WORD *)(v113 + 2 * v108);\n            v115 = v108 | 1;\n          }\n          if ( v271 != v108 )\n          {\n            v116 = v104 - v115;\n            v117 = v114 + 2 * v115 + 2;\n            v118 = v113 + 2 * v115 + 2;\n            v119 = v112 + 2 * v115 + 2;\n            v120 = v111 + 2 * v115 + 2;\n            v121 = 0LL;\n            do\n            {\n              *(_WORD *)(v119 + 2 * v121 - 2) = *(_WORD *)(v120 + 2 * v121 - 2);\n              *(_WORD *)(v117 + 2 * v121 - 2) = *(_WORD *)(v118 + 2 * v121 - 2);\n              *(_WORD *)(v119 + 2 * v121) = *(_WORD *)(v120 + 2 * v121);\n              *(_WORD *)(v117 + 2 * v121) = *(_WORD *)(v118 + 2 * v121);\n              v121 += 2LL;\n            }\n            while ( v116 != v121 );\n          }\n          goto LABEL_150;\n        }\n        v108 = 0LL;\n        v103 = v281;\n        v105 = v276;\n        if ( v134 && v133 )\n          goto LABEL_133;\n        if ( v278 )\n        {\n          v135 = v294;\n          v109 = 0LL;\n          do\n          {\n            v136 = *(_OWORD *)(v111 + 2 * v109 + 16);\n            *(_OWORD *)(v112 + 2 * v109) = *(_OWORD *)(v111 + 2 * v109);\n            *(_OWORD *)(v112 + 2 * v109 + 16) = v136;\n            v137 = *(_OWORD *)(v113 + 2 * v109 + 16);\n            *(_OWORD *)(v114 + 2 * v109) = *(_OWORD *)(v113 + 2 * v109);\n            *(_OWORD *)(v114 + 2 * v109 + 16) = v137;\n            v138 = *(_OWORD *)(v111 + 2 * v109 + 48);\n            *(_OWORD *)(v112 + 2 * v109 + 32) = *(_OWORD *)(v111 + 2 * v109 + 32);\n            *(_OWORD *)(v112 + 2 * v109 + 48) = v138;\n            v139 = *(_OWORD *)(v113 + 2 * v109 + 48);\n            *(_OWORD *)(v114 + 2 * v109 + 32) = *(_OWORD *)(v113 + 2 * v109 + 32);\n            *(_OWORD *)(v114 + 2 * v109 + 48) = v139;\n            v109 += 32LL;\n            v135 += 2LL;\n          }\n          while ( v135 );\n          if ( v290 )\n          {\nLABEL_148:\n            v140 = *(_OWORD *)(v111 + 2 * v109 + 16);\n            *(_OWORD *)(v112 + 2 * v109) = *(_OWORD *)(v111 + 2 * v109);\n            *(_OWORD *)(v112 + 2 * v109 + 16) = v140;\n            v141 = *(_OWORD *)(v113 + 2 * v109 + 16);\n            *(_OWORD *)(v114 + 2 * v109) = *(_OWORD *)(v113 + 2 * v109);\n            *(_OWORD *)(v114 + 2 * v109 + 16) = v141;\n            goto LABEL_149;\n          }\n        }\n        else\n        {\n          v109 = 0LL;\n          if ( v290 )\n            goto LABEL_148;\n        }\nLABEL_149:\n        v108 = v285;\n        if ( v285 != v104 )\n          goto LABEL_133;\nLABEL_150:\n        ++v106;\n      }\n      while ( v106 != v103 );\n    }\n  }\n  v142 = v288;\n  v288[17999] = v291[312];\n  v288[17996] = v291[732];\n  v288[17997] = v291[733];\n  v288[17998] = v291[734];\n  v143 = v288[6];\n  v144 = &dword_4FA04C;\n  if ( v143 == 2 )\n    v144 = &dword_4FA010;\n  v145 = &dword_4F9FD8;\n  if ( v143 != 1 )\n    v145 = v144;\n  ++*v145;\n  if ( v291[720] == 1 )\n  {\n    v288[18150] = 1;\n    v288[18111] = 1;\n    sub_41FA10(qword_4F9F70, (__int64)qword_4F9DE0);\n    v146 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 17950) = 1;\n    v147 = 1;\nLABEL_233:\n    v179 = off_49F6D8;\n    v180 = 0;\n    v181 = off_49F6D8 + 92;\n    goto LABEL_237;\n  }\n  v288[18150] = 0;\n  v148 = v291[721];\n  if ( v148 )\n    dword_4FA108 = 1;\n  v288[18111] = 0;\n  if ( v291[809] )\n  {\n    if ( !v148 || v143 || (v149 = v291[812], v149 >= v288[18152]) || v288[18153] )\n      v150 = v291[812];\n    else\n      v150 = 2 * v149;\n    v288[18155] = v150;\n    sub_457DA0(1, 0, 1);\n    v151 = sub_458DD0(0);\n    v142 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 10) = v151;\n    dword_4FA068 = 0;\n  }\n  if ( *((_DWORD *)qword_4F9DC0 + 287) )\n    v142[18149] = 0;\n  if ( *((_DWORD *)dest + 15) )\n    qword_4F9DB8 = (__int64)&unk_4D64E0;\n  sub_41FE80(qword_4F9E50, 0);\n  if ( (*((_DWORD *)dest + 325) || *((_DWORD *)off_49F6D0 + 6) != 2) && *((_DWORD *)dest + 324) )\n  {\n    v152 = off_49F6D0;\n    v153 = *((_DWORD *)off_49F6D0 + 6);\n    v154 = *((_DWORD *)off_49F6D0 + 10);\n    v155 = dword_4FA0E0;\n    if ( v153 != 2 && *((_DWORD *)dest + 15) )\n    {\n      if ( v153 )\n      {\n        qword_4F9DB8 = (__int64)&unk_4D66C0;\n        v156 = &unk_4D66C0;\n        *((_DWORD *)off_49F6D0 + 18156) = 0;\n        v157 = v154;\n        goto LABEL_179;\n      }\n      if ( (unsigned int)sub_4825F0(0) != 1 )\n      {\n        v161 = *((_DWORD *)dest + 326);\n        qword_4F9DB8 = (__int64)&unk_4D64E0;\n        v159 = off_49F6D0;\n        v157 = *((_DWORD *)off_49F6D0 + 10) - 1;\n        *((_DWORD *)off_49F6D0 + 10) = v157;\n        v159[18156] = 0;\n        if ( v161 )\n        {\n          v159[17951] = 0;\n          qword_4F9E20 = 0LL;\n          v156 = &unk_4D64E0;\n          goto LABEL_193;\n        }\n        v156 = &unk_4D64E0;\nLABEL_179:\n        sub_41FE80(qword_4F9E58, 1);\n        v158 = sub_475340((__int64)qword_4F9E50, (__int64)qword_4F9E58, v154);\n        v159 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 17951) = v158;\n        if ( v158 )\n        {\n          v155 = dword_4FA0E0;\n          v160 = v159[6];\n          v161 = 0;\n          if ( v160 == 2 )\n            goto LABEL_206;\n          goto LABEL_202;\n        }\n        v161 = 0;\nLABEL_193:\n        qword_4F9E30 = (__int64)qword_4F9E18;\n        v160 = v159[6];\n        if ( v160 != 2 && *((_DWORD *)dest + 15) )\n        {\n          v159[10] = v154;\n          qword_4F9DB8 = (__int64)&unk_4D64E0;\n        }\n        else\n        {\n          v159[10] = v154;\n        }\n        dword_4FA0E0 = v155;\n        if ( v160 == 2 )\n          goto LABEL_206;\nLABEL_202:\n        if ( *((_DWORD *)dest + 15) )\n        {\n          v159[10] = v154;\n          if ( v160 )\n          {\n            v161 = 0;\n            if ( (unsigned int)sub_482B00(0) == 1 )\n            {\n              qword_4F9DB8 = (__int64)&unk_4D65D0;\n            }\n            else\n            {\n              v161 = *((_DWORD *)dest + 327);\n              if ( *((_DWORD *)off_49F6D0 + 18124) )\n                v265 = v154 - 1;\n              else\n                v265 = v154 + 1;\n              *((_DWORD *)off_49F6D0 + 10) = v265;\n            }\n          }\n          else if ( (unsigned int)sub_4825F0(1) == 1 )\n          {\n            qword_4F9DB8 = (__int64)&unk_4D65D0;\n            v161 = 0;\n          }\n          else\n          {\n            v161 = *((_DWORD *)dest + 326);\n            qword_4F9DB8 = (__int64)&unk_4D64E0;\n            ++*((_DWORD *)off_49F6D0 + 10);\n          }\nLABEL_207:\n          v169 = off_49F6D0;\n          if ( !*((_DWORD *)off_49F6D0 + 6)\n            && *((_DWORD *)dest + 15)\n            && (unsigned int)(100 * dword_4FA0E0) / *((_DWORD *)off_49F6D0 + 18122) >= 0x4B )\n          {\n            *((_DWORD *)off_49F6D0 + 6) = 2;\n            qword_4F9DB8 = (__int64)&unk_4D64E0;\n          }\n          v169[18156] = 0;\n          if ( v161 )\n          {\n            qword_4F9E28 = 0LL;\n            v169[10] = v154;\n            v170 = v169[17951];\n            if ( v170 != 1 )\n            {\nLABEL_210:\n              if ( v170 )\n                goto LABEL_228;\n              qword_4F9E30 = (__int64)qword_4F9E18;\n              v169[6] = v153;\n              qword_4F9DB8 = (__int64)&unk_4D64E0;\n              v169[10] = v154;\n              goto LABEL_227;\n            }\n          }\n          else\n          {\n            sub_41FE80(qword_4F9E60, 2);\n            if ( *((_DWORD *)off_49F6D0 + 17951) )\n            {\n              v171 = sub_475340((__int64)qword_4F9E58, (__int64)qword_4F9E60, v154);\n              v169 = off_49F6D0;\n              v170 = *((_DWORD *)off_49F6D0 + 17951) + v171;\n            }\n            else\n            {\n              v170 = 2 * (unsigned __int64)sub_475340((__int64)qword_4F9E50, (__int64)qword_4F9E60, v154);\n              v169 = off_49F6D0;\n            }\n            v169[17951] = v170;\n            if ( v170 != 1 )\n              goto LABEL_210;\n          }\n          qword_4F9E30 = (__int64)qword_4F9E20;\n          v169[6] = v153;\n          qword_4F9DB8 = (__int64)v156;\n          v169[10] = v157;\nLABEL_227:\n          dword_4FA0E0 = v155;\n          goto LABEL_228;\n        }\nLABEL_206:\n        qword_4F9DB8 = (__int64)&unk_4D64E0;\n        v159[10] = v154 + 1;\n        goto LABEL_207;\n      }\n      qword_4F9DB8 = (__int64)&unk_4D65D0;\n      v152 = off_49F6D0;\n      v157 = *((_DWORD *)off_49F6D0 + 10);\n      v156 = &unk_4D65D0;\n    }\n    else\n    {\n      v157 = v154 - 1;\n      *((_DWORD *)off_49F6D0 + 10) = v154 - 1;\n      v156 = (void *)qword_4F9DB8;\n    }\n    v152[18156] = 0;\n    goto LABEL_179;\n  }\nLABEL_228:\n  if ( *((_DWORD *)dest + 721) )\n    dword_4FA108 = 0;\n  v146 = off_49F6D0;\n  if ( *((_DWORD *)dest + 720) == 2 )\n  {\n    *((_DWORD *)off_49F6D0 + 18150) = 1;\n    v146[9078] = 0LL;\n    *((_DWORD *)v146 + 18111) = 1;\n    sub_41FA10(qword_4F9F70, (__int64)qword_4F9DE0);\n    v173 = (float *)qword_4F9F70;\n    v174 = (float *)qword_4F9E50;\n    v175 = *((_DWORD *)off_49F6D0 + 6) == 1;\n    v176 = qword_4F9DE0;\n    v177 = exp2((double)(*((_DWORD *)off_49F6D0 + 10) - 12) / 3.0 + (double)*((signed int *)off_49F6D0 + 18169));\n    v178 = sub_428EA0(\n             *((_DWORD *)v173 + 202) + v176[202],\n             *((_DWORD *)v174 + 202),\n             (float)(v174[203] + v174[204]) + v174[205],\n             (float)(v173[203] + v173[204]) + v173[205],\n             v177 * 0.85 * qword_4896D0[v175]);\n    *((_DWORD *)off_49F6D0 + 17950) = v178;\n    sub_4121F0(v178);\n    v146 = off_49F6D0;\n    v147 = *((_DWORD *)off_49F6D0 + 17950);\n    if ( v147 )\n    {\n      *((_DWORD *)off_49F6D0 + 18151) = 0;\n      goto LABEL_233;\n    }\n    *((_DWORD *)off_49F6D0 + 18151) = 1;\n  }\n  else\n  {\n    *((_DWORD *)off_49F6D0 + 17950) = 0;\n  }\n  v179 = off_49F6D8;\n  v147 = 0;\n  v180 = 1;\n  v181 = (__int128 *)((char *)off_49F6D8 + 1468);\nLABEL_237:\n  *((_DWORD *)v179 + 7) += *(_DWORD *)v181;\n  if ( *((_DWORD *)v146 + 6) != 1 )\n    *((_DWORD *)v146 + 17968) = v147;\n  v182 = qword_4F9EC0;\n  qword_4F9EB0 = (__int64)qword_4F9EC0;\n  v183 = qword_4F9E98;\n  qword_4F9E88 = (__int64)qword_4F9E98;\n  if ( !v180 )\n  {\n    v191 = off_49F6E0;\n    *(_QWORD *)off_49F6E0 = 0LL;\n    v191[2] = 0;\n    sub_420020((unsigned int *)qword_4F9F70);\n    v190 = (unsigned int *)qword_4F9DE0;\n    goto LABEL_250;\n  }\n  v184 = dest;\n  if ( *((_DWORD *)dest + 720) || *((_DWORD *)dest + 721) )\n  {\n    v185 = *(_DWORD *)v146;\n    v186 = *((_DWORD *)v146 + 17);\n    *((_DWORD *)v146 + 17949) = 1;\n    *(_DWORD *)v146 = (signed int)(((unsigned int)(2 * v185 + 1) >> 31) + 2 * v185 + 1) >> 1;\n    v187 = *((_DWORD *)v146 + 18183) + v184[17];\n    *((_DWORD *)v146 + 15) = v187;\n    *((_DWORD *)v146 + 16) = v186;\n    *((_DWORD *)v146 + 4) = *((_DWORD *)v146 + 13) * v187 / 256;\n    v188 = off_49F6E0;\n    *(_QWORD *)off_49F6E0 = 0LL;\n    v188[2] = 0;\n    qword_4F9EB0 = (__int64)v182;\n    qword_4F9E88 = (__int64)v183;\n  }\n  if ( !v184[324] )\n    goto LABEL_248;\n  v189 = *((_DWORD *)v146 + 17951);\n  if ( v189 != 1 )\n  {\n    if ( v189 == 2 )\n    {\n      v190 = (unsigned int *)qword_4F9E60;\n      goto LABEL_250;\n    }\nLABEL_248:\n    v190 = (unsigned int *)qword_4F9E50;\n    goto LABEL_250;\n  }\n  v190 = (unsigned int *)qword_4F9E58;\nLABEL_250:\n  sub_420020(v190);\n  if ( qword_4F9E60 )\n    sub_4796E0((unsigned int *)qword_4F9E60);\n  if ( qword_4F9E58 )\n    sub_4796E0((unsigned int *)qword_4F9E58);\n  if ( qword_4F9E50 )\n    sub_4796E0((unsigned int *)qword_4F9E50);\n  if ( qword_4F9F70 )\n    sub_4796E0((unsigned int *)qword_4F9F70);\n  if ( qword_4F9DE0 )\n    sub_4796E0((unsigned int *)qword_4F9DE0);\n  v192 = (unsigned int *)dest;\n  if ( *((_DWORD *)dest + 809) )\n  {\n    v279 = *((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5);\n    sub_458C60(v279);\n    v192 = (unsigned int *)dest;\n  }\n  else\n  {\n    v279 = 0;\n  }\n  v289 = *((_DWORD *)off_49F6D0 + 18171) * *((_DWORD *)off_49F6D0 + 18171);\n  v193 = v192[16];\n  v194 = v192[17];\n  v286 = v194 * v192[16];\n  v195 = v192[826];\n  v272 = v192[827];\n  v282 = v192[16];\n  v292 = *((_DWORD *)off_49F6D0 + 18172);\n  if ( *((_DWORD *)off_49F6D0 + 17950) )\n  {\n    if ( (signed int)v193 <= 0 )\n    {\n      v197 = 0LL;\n    }\n    else\n    {\n      v196 = 0LL;\n      v197 = 0LL;\n      do\n      {\n        if ( (signed int)v194 > 0 )\n        {\n          v198 = *((_QWORD *)off_49F6D0 + 8972);\n          v199 = 0LL;\n          if ( (_DWORD)v194 != 1 )\n          {\n            do\n            {\n              v197 += *(signed int *)(v198\n                                    + 4\n                                    * (*(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v199) + 2 * v196)\n                                     - (unsigned __int64)*(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v199)\n                                                                             + 2 * v196)))\n                    + (signed __int64)*(signed int *)(v198\n                                                    + 4\n                                                    * (*(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v199 + 8)\n                                                                           + 2 * v196)\n                                                     - (unsigned __int64)*(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8\n                                                                                               + v199\n                                                                                               + 1)\n                                                                                             + 2 * v196)));\n              v199 += 2LL;\n            }\n            while ( v194 - (v194 & 1) != v199 );\n          }\n          v193 = v192[16];\n          if ( v194 & 1 )\n            v197 += *(signed int *)(v198\n                                  + 4\n                                  * (*(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v199) + 2 * v196)\n                                   - (unsigned __int64)*(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v199) + 2 * v196)));\n        }\n        ++v196;\n      }\n      while ( v196 != v193 );\n    }\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      if ( (signed int)v272 > 0 )\n      {\n        v204 = 0LL;\n        v205 = 0LL;\n        v206 = 0LL;\n        do\n        {\n          if ( (signed int)v195 > 0 )\n          {\n            v207 = *((_QWORD *)off_49F6D0 + 8972);\n            v208 = 0LL;\n            do\n            {\n              v205 += *(signed int *)(v207\n                                    + 4\n                                    * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E88 + 8 * v208) + 2 * v204)\n                                     - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E80\n                                                                                         + 8 * v208)\n                                                                             + 2 * v204)));\n              v206 += *(signed int *)(v207\n                                    + 4\n                                    * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E88 + 8) + 8 * v208)\n                                                           + 2 * v204)\n                                     - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)qword_4F9E80 + 1)\n                                                                                         + 8 * v208)\n                                                                             + 2 * v204)));\n              ++v208;\n            }\n            while ( v195 != v208 );\n          }\n          ++v204;\n        }\n        while ( v204 != v272 );\n        goto LABEL_301;\n      }\nLABEL_308:\n      v213 = 1;\n      if ( v197 )\n        v213 = v197;\n      v206 = 0LL;\n      v214 = v289;\n      v215 = v286;\n      goto LABEL_311;\n    }\nLABEL_305:\n    v214 = v289;\n    v215 = v286;\n    v213 = 1;\n    if ( v197 )\n      v213 = v197;\n    v206 = 0LL;\n    goto LABEL_311;\n  }\n  qword_4F9EB0 = (__int64)qword_4F9EC0;\n  qword_4F9E88 = (__int64)qword_4F9E98;\n  if ( v192[720] == 2 )\n    qword_4F9E30 = (__int64)qword_4F9E18;\n  if ( (signed int)v193 <= 0 )\n  {\n    v197 = 0LL;\n  }\n  else\n  {\n    v200 = 0LL;\n    v197 = 0LL;\n    do\n    {\n      if ( (signed int)v194 > 0 )\n      {\n        v201 = *((_QWORD *)off_49F6D0 + 8972);\n        v202 = *(_QWORD *)(qword_4F9E30 + 6424);\n        v203 = 0LL;\n        if ( (_DWORD)v194 != 1 )\n        {\n          do\n          {\n            v197 += *(signed int *)(v201\n                                  + 4\n                                  * (*(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v203) + 2 * v200)\n                                   - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v202 + 8 * v203) + 2 * v200)))\n                  + (signed __int64)*(signed int *)(v201\n                                                  + 4\n                                                  * (*(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v203 + 1)\n                                                                         + 2 * v200)\n                                                   - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v202 + 8 * v203 + 8)\n                                                                                           + 2 * v200)));\n            v203 += 2LL;\n          }\n          while ( v194 - (v194 & 1) != v203 );\n        }\n        v193 = v282;\n        if ( v194 & 1 )\n          v197 += *(signed int *)(v201\n                                + 4\n                                * (*(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v203) + 2 * v200)\n                                 - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v202 + 8 * v203) + 2 * v200)));\n      }\n      ++v200;\n    }\n    while ( v200 != v193 );\n  }\n  if ( !*((_DWORD *)off_49F6D0 + 18175) )\n    goto LABEL_305;\n  if ( (signed int)v272 <= 0 )\n    goto LABEL_308;\n  v209 = 0LL;\n  v205 = 0LL;\n  v206 = 0LL;\n  do\n  {\n    if ( (signed int)v195 > 0 )\n    {\n      v210 = *((_QWORD *)off_49F6D0 + 8972);\n      v211 = *(_QWORD **)(qword_4F9E30 + 6464);\n      v212 = 0LL;\n      do\n      {\n        v205 += *(signed int *)(v210\n                              + 4\n                              * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E98 + 8 * v212) + 2 * v209)\n                               - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(*v211 + 8 * v212) + 2 * v209)));\n        v206 += *(signed int *)(v210\n                              + 4\n                              * (*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)qword_4F9E98 + 1) + 8 * v212) + 2 * v209)\n                               - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v211[1] + 8 * v212) + 2 * v209)));\n        ++v212;\n      }\n      while ( v195 != v212 );\n    }\n    ++v209;\n  }\n  while ( v209 != v272 );\nLABEL_301:\n  v213 = 1;\n  if ( v197 )\n    v213 = v197;\n  v214 = v289;\n  v215 = v286;\n  if ( !v205 )\nLABEL_311:\n    LODWORD(v205) = 1;\n  v216 = log10((double)v215 / (double)v213 * (double)v214) * 10.0;\n  v217 = (char *)off_49F6E0;\n  *(float *)off_49F6E0 = v216;\n  v218 = (int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n  {\n    v269 = (double)((signed int)v195 * (signed int)v272);\n    v273 = (double)(v292 * v292);\n    v219 = log10(v269 / (double)(signed int)v205 * v273) * 10.0;\n    *((float *)off_49F6E0 + 1) = v219;\n    if ( v206 )\n      v220 = (double)(signed int)v206;\n    else\n      v220 = 1.0;\n    v221 = log10(v269 / v220 * v273) * 10.0;\n    v217 = (char *)off_49F6E0;\n    *((float *)off_49F6E0 + 2) = v221;\n    v218 = (int *)off_49F6D0;\n  }\n  else\n  {\n    *(_QWORD *)(v217 + 4) = 0LL;\n    v221 = 0.0;\n  }\n  v222 = *v218;\n  if ( *v218 )\n  {\n    v223 = dword_4F9FD8 + v222;\n    v224 = *(float *)v217;\n    v225 = *((float *)v217 + 1);\n    v226 = (float)(dword_4F9FD8 + v222 + 1);\n    *((float *)v217 + 15) = (float)((float)(*((float *)v217 + 15) * (float)(dword_4F9FD8 + v222)) + *(float *)v217)\n                          / v226;\n    *((float *)v217 + 16) = (float)((float)(*((float *)v217 + 16) * (float)v223) + v225) / v226;\n    *((float *)v217 + 17) = (float)((float)((float)v223 * *((float *)v217 + 17)) + v221) / v226;\n  }\n  else\n  {\n    v227 = *(float *)v217;\n    v228 = *((_DWORD *)v217 + 1);\n    *((_DWORD *)v217 + 3) = *(_DWORD *)v217;\n    *((_DWORD *)v217 + 4) = v228;\n    v229 = *((_DWORD *)v217 + 2);\n    *((_DWORD *)v217 + 5) = v229;\n    *((float *)v217 + 15) = v227;\n    *((_DWORD *)v217 + 16) = v228;\n    *((_DWORD *)v217 + 17) = v229;\n    LODWORD(v224) = (unsigned __int128)_mm_cvtsi32_si128(LODWORD(v227));\n    LODWORD(v225) = (unsigned __int128)_mm_cvtsi32_si128(v228);\n    *(_OWORD *)(v217 + 40) = 0LL;\n    LODWORD(v221) = (unsigned __int128)_mm_cvtsi32_si128(v229);\n    *(_OWORD *)(v217 + 24) = 0LL;\n    *((_DWORD *)v217 + 14) = 0;\n  }\n  v230 = v218[6];\n  if ( v230 == 1 )\n  {\n    v231 = (unsigned int)(dword_4F9FD8 - 1);\n    v232 = (float)(signed int)v231;\n    v233 = (float)dword_4F9FD8;\n    *((float *)v217 + 7) = (float)(v224 + (float)(*((float *)v217 + 7) * (float)(signed int)v231)) / (float)dword_4F9FD8;\n    *((float *)v217 + 10) = (float)(v225 + (float)(*((float *)v217 + 10) * (float)(signed int)v231)) / v233;\n    v234 = (float *)(v217 + 52);\n  }\n  else if ( v230 == 2 )\n  {\n    v231 = (unsigned int)(dword_4FA010 - 1);\n    v232 = (float)(signed int)v231;\n    v233 = (float)dword_4FA010;\n    *((float *)v217 + 8) = (float)(v224 + (float)(*((float *)v217 + 8) * (float)(signed int)v231)) / (float)dword_4FA010;\n    *((float *)v217 + 11) = (float)(v225 + (float)(*((float *)v217 + 11) * (float)(signed int)v231)) / v233;\n    v234 = (float *)(v217 + 56);\n  }\n  else\n  {\n    v231 = (unsigned int)(dword_4FA04C - 1);\n    v232 = (float)(signed int)v231;\n    v233 = (float)dword_4FA04C;\n    *((float *)v217 + 6) = (float)(v224 + (float)(*((float *)v217 + 6) * (float)(signed int)v231)) / (float)dword_4FA04C;\n    *((float *)v217 + 9) = (float)(v225 + (float)(*((float *)v217 + 9) * (float)(signed int)v231)) / v233;\n    v234 = (float *)(v217 + 48);\n  }\n  *v234 = (float)(v221 + (float)(v232 * *v234)) / v233;\n  v235 = v218[17950];\n  if ( *((_DWORD *)dest + 720) == 2 )\n  {\n    if ( v235 )\n    {\n      sub_43A380(qword_4F9E10, v231);\n      v236 = qword_4F9E18;\n    }\n    else\n    {\n      sub_43B6D0((__int64)qword_4F9E18, v231);\n      v236 = (void *)qword_4F9E10;\n    }\n    goto LABEL_338;\n  }\n  if ( v235 )\n  {\n    sub_43A380(qword_4F9E10, v231);\n    goto LABEL_339;\n  }\n  v237 = v218[17951];\n  if ( v237 == 1 )\n  {\n    sub_43A380((signed __int64)qword_4F9E20, v231);\n    v238 = qword_4F9E18;\nLABEL_337:\n    sub_437D90(v238);\n    v236 = qword_4F9E28;\n    goto LABEL_338;\n  }\n  if ( v237 != 2 )\n  {\n    sub_43A380((signed __int64)qword_4F9E18, v231);\n    v238 = qword_4F9E20;\n    goto LABEL_337;\n  }\n  sub_43A380((signed __int64)qword_4F9E28, v231);\n  sub_437D90(qword_4F9E18);\n  v236 = qword_4F9E20;\nLABEL_338:\n  sub_437D90(v236);\nLABEL_339:\n  v239 = off_49F6D8;\n  v240 = qword_49FB70;\n  *((_QWORD *)xmmword_4A05C0 + qword_49FB70) = *((signed int *)off_49F6D8 + 4)\n                                             - (signed __int64)*((signed int *)off_49F6D8 + 5);\n  qword_49FB70 = v240 + 1;\n  if ( *((_DWORD *)off_49F6D0 + 18101) == 2 )\n  {\n    v241 = 0;\n    if ( !*((_DWORD *)off_49F6D0 + 18124) )\n      v241 = dword_49FB48 + 1;\n    dword_49FB48 = v241;\n    if ( v241 > 1 || dword_4FA0D8 < dword_49FB44 )\n      error(\n        (__int64)\"POC type 2 cannot be applied for the coding pattern where the encoding /decoding order of pictures are \"\n                 \"different from the output order.\\n\",\n        -1);\n    dword_49FB44 = dword_4FA0D8;\n  }\n  if ( *((_DWORD *)v239 + 373) )\n    printf(\"%04d(NVB)%8d \\n\", (unsigned int)dword_4FA0D8);\n  v242 = off_49F6D0;\n  if ( *(_DWORD *)off_49F6D0 == dword_49FB88 )\n  {\n    v243 = &off_485E24;\n    if ( !*((_DWORD *)off_49F6D0 + 17950) )\n      v243 = &off_485E28;\n    printf(\n      \"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\\n\",\n      (unsigned int)dword_4FA0D8,\n      (unsigned int)(*((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5)),\n      0LL,\n      *((unsigned int *)off_49F6D0 + 10),\n      0LL,\n      *(float *)off_49F6E0,\n      *((float *)off_49F6E0 + 1),\n      *((float *)off_49F6E0 + 2),\n      (unsigned int)dword_4FA10C,\n      v243,\n      (unsigned int)dword_4FA0E0);\n    if ( *((_DWORD *)dest + 809) && (*((_DWORD *)dest + 720) || *((_DWORD *)dest + 721)) )\n      dword_4A00B0 = *((_DWORD *)off_49F6D8 + 4);\n    v244 = off_49F6D8;\n    *((_DWORD *)off_49F6D8 + 176) = *((_DWORD *)off_49F6D8 + 4);\n    *((_DWORD *)v244 + 4) = 0;\n  }\n  else\n  {\n    if ( *((_DWORD *)dest + 809) )\n    {\n      if ( *((_DWORD *)dest + 720) || *((_DWORD *)dest + 721) )\n      {\n        v279 = *((_DWORD *)off_49F6D8 + 4) - dword_4A00B4;\n        dword_4A00B4 = *((_DWORD *)off_49F6D8 + 4);\n      }\n      else\n      {\n        v279 = *((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5);\n      }\n    }\n    v245 = *((_DWORD *)off_49F6D0 + 6);\n    switch ( v245 )\n    {\n      case 1:\n        v254 = (unsigned int)(*((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5));\n        *((_DWORD *)off_49F6D8 + 178) += v254;\n        v255 = &off_485E24;\n        if ( !v242[17950] )\n          v255 = &off_485E28;\n        v256 = *(unsigned int *)(qword_4F9DB8 + 196);\n        v257 = (unsigned int)v242[10];\n        v258 = *(float *)off_49F6E0;\n        v259 = *((float *)off_49F6E0 + 1);\n        v260 = *((float *)off_49F6E0 + 2);\n        v261 = (unsigned int)v242[17999];\n        if ( v242[18124] <= 0 )\n          printf(\n            \"%04d(B)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\\n\",\n            (unsigned int)dword_4FA0D8,\n            v254,\n            v256,\n            v257,\n            0LL,\n            v258,\n            v259,\n            v260,\n            (unsigned int)dword_4FA10C,\n            v255,\n            (unsigned int)dword_4FA0E0,\n            v261);\n        else\n          printf(\n            \"%04d(RB) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\\n\",\n            (unsigned int)dword_4FA0D8,\n            v254,\n            v256,\n            v257,\n            0LL,\n            v258,\n            v259,\n            v260,\n            (unsigned int)dword_4FA10C,\n            v255,\n            (unsigned int)dword_4FA0E0,\n            v261);\n        break;\n      case 3:\n        v252 = (unsigned int)(*((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5));\n        *((_DWORD *)off_49F6D8 + 177) += v252;\n        v253 = &off_485E24;\n        if ( !v242[17950] )\n          v253 = &off_485E28;\n        printf(\n          \"%04d(SP) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\\n\",\n          (unsigned int)dword_4FA0D8,\n          v252,\n          *(unsigned int *)(qword_4F9DB8 + 192),\n          (unsigned int)v242[10],\n          0LL,\n          *(float *)off_49F6E0,\n          *((float *)off_49F6E0 + 1),\n          *((float *)off_49F6E0 + 2),\n          (unsigned int)dword_4FA10C,\n          v253,\n          (unsigned int)dword_4FA0E0);\n        break;\n      case 2:\n        v246 = (unsigned int)(*((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5));\n        *((_DWORD *)off_49F6D8 + 176) += v246;\n        v247 = &off_485E24;\n        if ( !v242[17950] )\n          v247 = &off_485E28;\n        v248 = (unsigned int)v242[10];\n        v249 = *(float *)off_49F6E0;\n        v250 = *((float *)off_49F6E0 + 1);\n        v251 = *((float *)off_49F6E0 + 2);\n        if ( *(_DWORD *)(*((_QWORD *)v242 + 1769) + 4LL) == 1 )\n          printf(\n            \"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\\n\",\n            (unsigned int)dword_4FA0D8,\n            v246,\n            0LL,\n            v248,\n            0LL,\n            v249,\n            v250,\n            v251,\n            (unsigned int)dword_4FA10C,\n            v247,\n            (unsigned int)dword_4FA0E0);\n        else\n          printf(\n            (const char *)&off_485E28 + 4,\n            (unsigned int)dword_4FA0D8,\n            v246,\n            0LL,\n            v248,\n            0LL,\n            v249,\n            v250,\n            v251,\n            (unsigned int)dword_4FA10C,\n            v247,\n            (unsigned int)dword_4FA0E0);\n        break;\n      default:\n        v262 = (unsigned int)(*((_DWORD *)off_49F6D8 + 4) - *((_DWORD *)off_49F6D8 + 5));\n        *((_DWORD *)off_49F6D8 + 177) += v262;\n        v263 = &off_485E24;\n        if ( !v242[17950] )\n          v263 = &off_485E28;\n        printf(\n          \"%04d(P)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\\n\",\n          (unsigned int)dword_4FA0D8,\n          v262,\n          *(unsigned int *)(qword_4F9DB8 + 192),\n          (unsigned int)v242[10],\n          0LL,\n          *(float *)off_49F6E0,\n          *((float *)off_49F6E0 + 1),\n          *((float *)off_49F6E0 + 2),\n          (unsigned int)dword_4FA10C,\n          v263,\n          (unsigned int)dword_4FA0E0);\n        break;\n    }\n  }\n  *((_DWORD *)off_49F6D8 + 5) = *((_DWORD *)off_49F6D8 + 4);\n  if ( *((_DWORD *)dest + 809) )\n  {\n    sub_458BF0(v279);\n    if ( !*((_DWORD *)off_49F6D0 + 6) && (*((_DWORD *)qword_4F9DC0 + 287) || !*((_DWORD *)off_49F6D0 + 18153)) )\n      sub_459E60();\n  }\n  *((_DWORD *)off_49F6D8 + 373) = 0;\n  return *(_DWORD *)off_49F6D0 != dword_49FB88;\n}\n", 
            "funcStartAddr": "0x41d500L", 
            "funcEndAddr": "0x41fa0cL", 
            "funcName": "sub_41D500"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_41FA10@<rax>(_DWORD *a1@<rdi>, __int64 a2@<rsi>, double a3@<xmm1>, __m128i a4@<xmm12>)\n{\n  __int128 *v4; // rax\n  __int128 *v5; // rcx\n  _DWORD *v6; // rax\n  int v7; // edx\n  int v8; // er8\n  __int64 v9; // r14\n  char *v10; // rax\n  _DWORD *v11; // rcx\n  int v12; // edx\n  int v13; // esi\n  unsigned int *v14; // rdx\n  unsigned __int64 v15; // rsi\n  __m128i v16; // xmm0\n  _DWORD *v17; // rcx\n  _DWORD *v18; // rax\n  int v19; // edx\n  int v20; // eax\n  _DWORD *v21; // rax\n  int v22; // ebp\n  char *v23; // rax\n  _DWORD *v24; // rcx\n  int v25; // edx\n  int v26; // esi\n  char *v27; // rdx\n  int v28; // esi\n  __m128i v29; // xmm0\n  _DWORD *v30; // rax\n  int v31; // ecx\n  int v32; // eax\n  _DWORD *v33; // rcx\n  _DWORD *v34; // rax\n  int v35; // edx\n  int v36; // esi\n  _DWORD *v37; // rax\n  __int64 result; // rax\n\n  v4 = off_49F6D8;\n  v5 = off_49F6D8 + 92;\n  *(_DWORD *)v5 = 0;\n  *((_QWORD *)v4 + 185) = v5;\n  v6 = off_49F6D0;\n  *v6 *= 2;\n  v6[18094] *= 2;\n  v7 = (*((_DWORD *)dest + 17) + v6[18183]) / 2;\n  v6[15] = v7;\n  v8 = v6[17] / 2;\n  v6[16] = v8;\n  v6[17950] = 1;\n  v6[18121] = v6[18122] >> 1;\n  v9 = a2;\n  v10 = sub_437B80(v6[7], v6[13], v7, v6[14], v8);\n  qword_4F9E38 = (__int64)v10;\n  v11 = off_49F6D0;\n  v12 = *((_DWORD *)off_49F6D0 + 18112);\n  *((_DWORD *)v10 + 1) = v12;\n  *((_DWORD *)v10 + 4) = v12;\n  v13 = v11[18116];\n  *((_DWORD *)v10 + 1591) = v13;\n  *((_DWORD *)v10 + 1590) = v13;\n  *((_DWORD *)v10 + 1603) = 0;\n  v11[18100] = 0;\n  *((_DWORD *)v10 + 1604) = 0;\n  v11[18115] = v12;\n  v11[7] = 1;\n  qword_4F9E30 = (__int64)v10;\n  v14 = (unsigned int *)qword_4F9DC0;\n  *((_DWORD *)v10 + 1639) = *((_DWORD *)qword_4F9DC0 + 287);\n  v15 = v14[290];\n  *((_DWORD *)v10 + 1640) = v15;\n  *((_DWORD *)v10 + 1638) = v14[8];\n  if ( (_DWORD)v15 )\n    v16 = *(__m128i *)(v14 + 291);\n  else\n    v16 = 0LL;\n  *(__m128i *)(v10 + 6564) = v16;\n  v11[17949] = 0;\n  qword_4F9EB0 = qword_4F9EC8;\n  qword_4F9E88 = (__int64)qword_4F9EA0;\n  sub_4237A0();\n  v17 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n    --dword_4FA114;\n  *((_DWORD *)off_49F6D0 + 17950) = 1;\n  v18 = dest;\n  if ( *((_DWORD *)dest + 809) )\n  {\n    v17[18155] = *((_DWORD *)dest + 812);\n    if ( v18[720] == 1 )\n    {\n      v15 = 1LL;\n      v19 = 1;\n    }\n    else\n    {\n      v15 = 1LL;\n      v19 = 0;\n    }\n    sub_457DA0(0, 1, v19);\n    v20 = sub_458DD0(1);\n    v17 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 10) = v20;\n  }\n  v17[18149] = 1;\n  sub_41D2E0((__int64)qword_4F9F70, v16, a3, a4);\n  *(_DWORD *)qword_4F9E30 = 1;\n  sub_43A380(qword_4F9E38, v15);\n  v21 = off_49F6D0;\n  v22 = 8 * ***(_DWORD ***)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n  a1[202] = v22;\n  v23 = sub_437B80(v21[7], v21[13], v21[15], v21[14], v21[16]);\n  qword_4F9E10 = (__int64)v23;\n  v24 = off_49F6D0;\n  v25 = *((_DWORD *)off_49F6D0 + 18113);\n  *((_DWORD *)v23 + 1) = v25;\n  *((_DWORD *)v23 + 4) = v25;\n  v26 = v24[18116];\n  *((_DWORD *)v23 + 1591) = v26;\n  *((_DWORD *)v23 + 1590) = v26;\n  *((_DWORD *)v23 + 1603) = 0;\n  v24[18100] = 0;\n  *((_DWORD *)v23 + 1604) = 0;\n  v24[18115] = v25;\n  v24[7] = 2;\n  qword_4F9E30 = (__int64)v23;\n  v27 = (char *)qword_4F9DC0;\n  *((_DWORD *)v23 + 1639) = *((_DWORD *)qword_4F9DC0 + 287);\n  v28 = *((_DWORD *)v27 + 290);\n  *((_DWORD *)v23 + 1640) = v28;\n  *((_DWORD *)v23 + 1638) = *((_DWORD *)v27 + 8);\n  if ( v28 )\n    v29 = *(__m128i *)(v27 + 1164);\n  else\n    v29 = 0LL;\n  *(__m128i *)(v23 + 6564) = v29;\n  v24[17949] = 1;\n  qword_4F9EB0 = qword_4F9EB8;\n  qword_4F9E88 = (__int64)qword_4F9E90;\n  ++*v24;\n  sub_4237A0();\n  v30 = off_49F6D0;\n  v31 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v31 == 2 )\n  {\n    if ( *((_DWORD *)dest + 722) != 1 )\n      *((_DWORD *)off_49F6D0 + 6) = 0;\n  }\n  else if ( v31 == 1 )\n  {\n    ++dword_4FA114;\n  }\n  v30[17950] = 1;\n  if ( *((_DWORD *)dest + 809) && (sub_458DC0(v22), *((_DWORD *)dest + 809)) )\n  {\n    sub_457DA0(0, 0, 0);\n    v32 = sub_458DD0(0);\n    v33 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 10) = v32;\n  }\n  else\n  {\n    v33 = off_49F6D0;\n  }\n  v33[18149] = 0;\n  *(_DWORD *)qword_4F9E30 = 2;\n  sub_41D2E0((__int64)qword_4F9DE0, v29, a3, a4);\n  v34 = off_49F6D0;\n  *(_DWORD *)(v9 + 808) = 8 * ***(_DWORD ***)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n  v35 = v34[17];\n  *v34 /= 2;\n  v34[18094] /= 2;\n  v36 = *((_DWORD *)dest + 17) + v34[18183];\n  v34[15] = v36;\n  v34[16] = v35;\n  v34[4] = v34[13] * v36 / 256;\n  sub_428CD0();\n  qword_4F9EB0 = (__int64)qword_4F9EC0;\n  qword_4F9E88 = (__int64)qword_4F9E98;\n  sub_423BF0();\n  v37 = off_49F6E0;\n  a1[203] = *(_DWORD *)off_49F6E0;\n  a1[204] = v37[1];\n  result = (unsigned int)v37[2];\n  a1[205] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x41fa10L", 
            "funcEndAddr": "0x41fe73L", 
            "funcName": "sub_41FA10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_41FE80@<rax>(_DWORD *a1@<rdi>, int a2@<esi>, double a3@<xmm1>, __m128i a4@<xmm12>)\n{\n  _DWORD *v4; // rax\n  char *v5; // rax\n  _DWORD *v6; // rcx\n  int v7; // edx\n  int v8; // edx\n  _BOOL4 v9; // esi\n  char *v10; // rdx\n  int v11; // esi\n  __m128i v12; // xmm0\n  __int128 *v13; // rax\n  _DWORD *v14; // rdx\n  unsigned __int64 result; // rax\n  _DWORD *v16; // rax\n\n  v4 = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 7) = 0;\n  v4[18121] = v4[18122];\n  if ( a2 == 2 )\n  {\n    v5 = sub_437B80(0, v4[13], v4[15], v4[14], v4[16]);\n    qword_4F9E28 = v5;\n  }\n  else\n  {\n    v5 = sub_437B80(0, v4[13], v4[15], v4[14], v4[16]);\n    if ( a2 == 1 )\n      qword_4F9E20 = v5;\n    else\n      qword_4F9E18 = v5;\n  }\n  v6 = off_49F6D0;\n  v7 = *((_DWORD *)off_49F6D0 + 18114);\n  *((_DWORD *)v5 + 1) = v7;\n  v6[18115] = v7;\n  *((_DWORD *)v5 + 2) = v6[18112];\n  *((_DWORD *)v5 + 3) = v6[18113];\n  *((_DWORD *)v5 + 4) = v7;\n  v8 = v6[18116];\n  *((_DWORD *)v5 + 1591) = v8;\n  *((_DWORD *)v5 + 1590) = v8;\n  *((_DWORD *)v5 + 1603) = 1;\n  v9 = *((_DWORD *)dest + 721) != 0;\n  v6[18100] = v9;\n  *((_DWORD *)v5 + 1604) = v9;\n  qword_4F9E30 = (__int64)v5;\n  v10 = (char *)qword_4F9DC0;\n  *((_DWORD *)v5 + 1639) = *((_DWORD *)qword_4F9DC0 + 287);\n  v11 = *((_DWORD *)v10 + 290);\n  *((_DWORD *)v5 + 1640) = v11;\n  *((_DWORD *)v5 + 1638) = *((_DWORD *)v10 + 8);\n  if ( v11 )\n    v12 = *(__m128i *)(v10 + 1164);\n  else\n    v12 = 0LL;\n  *(__m128i *)(v5 + 6564) = v12;\n  v13 = off_49F6D8;\n  v14 = (_DWORD *)((char *)off_49F6D8 + 1468);\n  *v14 = 0;\n  *((_QWORD *)v13 + 185) = v14;\n  v6[17950] = 0;\n  sub_41D2E0((__int64)a1, v12, a3, a4);\n  result = (unsigned __int64)off_49F6D0;\n  a1[202] = 8 * ***(_DWORD ***)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n  if ( !*(_DWORD *)(result + 28) )\n  {\n    sub_423BF0();\n    v16 = off_49F6E0;\n    a1[203] = *(_DWORD *)off_49F6E0;\n    a1[204] = v16[1];\n    result = (unsigned int)v16[2];\n    a1[205] = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41fe80L", 
            "funcEndAddr": "0x42001eL", 
            "funcName": "sub_41FE80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_420020(unsigned int *a1)\n{\n  __int64 result; // rax\n  signed __int64 v2; // r13\n  __int64 v3; // rbp\n  __int64 v4; // r14\n  signed __int64 v5; // r15\n  const void **v6; // r12\n  _DWORD *v7; // rax\n  _DWORD *v8; // rbx\n  size_t v9; // rdx\n  _DWORD *v10; // rax\n  signed int v11; // edx\n  int v12; // et0\n  int v13; // eax\n  unsigned int *v14; // [rsp+0h] [rbp-38h]\n\n  *((_QWORD *)off_49F6D0 + 1769) = a1;\n  result = *a1;\n  if ( (signed int)result > 0 )\n  {\n    v2 = 0LL;\n    v14 = a1;\n    do\n    {\n      v3 = *(_QWORD *)&a1[2 * v2 + 2];\n      if ( *(_DWORD *)(v3 + 16) > 0 )\n      {\n        v4 = 0LL;\n        v5 = 0LL;\n        do\n        {\n          v6 = *(const void ***)(*(_QWORD *)(v3 + 24) + v4);\n          v7 = sub_452700(4 * *((_DWORD *)off_49F6D0 + 15) * *((_DWORD *)off_49F6D0 + 13));\n          v8 = v7;\n          *v7 = (*((_DWORD *)off_49F6D0 + 3) == 0) | 4;\n          v9 = *(unsigned int *)v6;\n          v7[1] = v9 + 1;\n          memcpy((void *)(*((_QWORD *)v7 + 3) + 1LL), v6[4], v9);\n          v10 = off_49F6D0;\n          if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1769) + 4LL) )\n          {\n            *(_QWORD *)(v8 + 3) = 12884901893LL;\n          }\n          else\n          {\n            v11 = v5 + 2;\n            if ( !*((_DWORD *)dest + 591) )\n              v11 = 1;\n            v12 = *((_DWORD *)off_49F6D0 + 6);\n            v8[3] = v11;\n            if ( v10[18124] )\n              v8[4] = 2;\n            else\n              v8[4] = 0;\n          }\n          v8[5] = 0;\n          v13 = qword_4F9DB0(v8);\n          *((_DWORD *)off_49F6D8 + 4) += v13;\n          sub_452760(v8);\n          ++v5;\n          v4 += 120LL;\n        }\n        while ( v5 < *(signed int *)(v3 + 16) );\n        a1 = v14;\n        result = *v14;\n      }\n      ++v2;\n    }\n    while ( v2 < (signed int)result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x420020L", 
            "funcEndAddr": "0x42018cL", 
            "funcName": "sub_420020"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4201E0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r13\n  int v3; // er15\n  int v4; // er12\n  void *v5; // rax\n  int v6; // er14\n  int v7; // ebp\n  void *v8; // rax\n  signed int v9; // ecx\n  __int64 v10; // rsi\n  signed __int64 v11; // r10\n  __int64 v12; // r9\n  signed __int64 v13; // r15\n  unsigned int v14; // er13\n  __int64 v15; // rbx\n  __int64 v16; // rdx\n  signed __int64 v17; // r12\n  unsigned int v18; // esi\n  __int64 v19; // rdi\n  __int64 v20; // rax\n  __int64 v21; // rcx\n  __int64 v22; // rbp\n  int v23; // edx\n  int v24; // edi\n  int v25; // eax\n  signed __int64 v26; // rcx\n  int v27; // ecx\n  signed __int64 v28; // rax\n  signed __int64 v29; // r14\n  int v30; // eax\n  int v31; // esi\n  bool v32; // sf\n  unsigned __int8 v33; // of\n  __int64 v34; // rax\n  signed __int64 v35; // r12\n  __int64 v36; // r13\n  int v37; // er14\n  unsigned __int64 v38; // r15\n  signed int v39; // ebx\n  int v40; // ebx\n  int v41; // eax\n  int v42; // edx\n  int v43; // edx\n  __int64 v44; // rdi\n  int v45; // ebp\n  int v46; // edi\n  __int64 v47; // rbp\n  int v48; // edx\n  signed int v49; // ecx\n  signed int v50; // eax\n  int v51; // ebp\n  signed int v52; // eax\n  signed __int64 v53; // rax\n  __int64 v54; // rax\n  int v55; // er15\n  int v56; // er14\n  int v57; // ebp\n  int v58; // ebx\n  int v59; // er15\n  int v60; // er15\n  signed int v61; // eax\n  int v62; // ebp\n  unsigned int v63; // eax\n  signed int v64; // ST18_4\n  int v65; // ebx\n  int v66; // ebx\n  __int64 v67; // rax\n  int v68; // er14\n  int v69; // ebx\n  int v70; // er14\n  int v71; // er12\n  int v72; // ebp\n  __int64 v73; // r12\n  int v74; // er13\n  int v75; // ebp\n  int v76; // ebx\n  int v77; // ebx\n  signed int v78; // eax\n  int v79; // esi\n  unsigned int v80; // eax\n  __int64 v81; // r14\n  int v82; // esi\n  unsigned __int16 v83; // ax\n  int v84; // ecx\n  __int64 v85; // r14\n  int v86; // er13\n  int v87; // ebx\n  int v88; // ebx\n  signed int v89; // eax\n  int v90; // ebp\n  unsigned int v91; // eax\n  signed int v92; // ST28_4\n  int v93; // ebp\n  int v94; // er14\n  int v95; // ebx\n  int v96; // ebx\n  signed int v97; // eax\n  unsigned int v98; // eax\n  int v99; // ebp\n  signed int v100; // ST28_4\n  unsigned __int16 v101; // ax\n  signed int v102; // ST28_4\n  unsigned __int16 v103; // ax\n  int v104; // ebp\n  __int64 v105; // ST10_8\n  int v106; // ecx\n  int v107; // er13\n  int v108; // ebp\n  int v109; // er12\n  int v110; // ebx\n  int v111; // er14\n  __int16 v112; // ax\n  int v113; // [rsp+10h] [rbp-B8h]\n  int v114; // [rsp+10h] [rbp-B8h]\n  int v115; // [rsp+10h] [rbp-B8h]\n  _QWORD *v116; // [rsp+18h] [rbp-B0h]\n  signed int v117; // [rsp+18h] [rbp-B0h]\n  int v118; // [rsp+18h] [rbp-B0h]\n  int v119; // [rsp+24h] [rbp-A4h]\n  int v120; // [rsp+24h] [rbp-A4h]\n  int v121; // [rsp+28h] [rbp-A0h]\n  signed int v122; // [rsp+28h] [rbp-A0h]\n  signed int v123; // [rsp+28h] [rbp-A0h]\n  __int64 v124; // [rsp+30h] [rbp-98h]\n  int v125; // [rsp+30h] [rbp-98h]\n  int v126; // [rsp+30h] [rbp-98h]\n  int v127; // [rsp+30h] [rbp-98h]\n  int v128; // [rsp+38h] [rbp-90h]\n  int v129; // [rsp+38h] [rbp-90h]\n  int v130; // [rsp+3Ch] [rbp-8Ch]\n  int v131; // [rsp+3Ch] [rbp-8Ch]\n  __int64 v132; // [rsp+40h] [rbp-88h]\n  int v133; // [rsp+40h] [rbp-88h]\n  __int64 v134; // [rsp+48h] [rbp-80h]\n  int v135; // [rsp+48h] [rbp-80h]\n  int v136; // [rsp+48h] [rbp-80h]\n  signed int v137; // [rsp+50h] [rbp-78h]\n  int v138; // [rsp+50h] [rbp-78h]\n  int v139; // [rsp+58h] [rbp-70h]\n  int v140; // [rsp+58h] [rbp-70h]\n  int v141; // [rsp+64h] [rbp-64h]\n  __int64 v142; // [rsp+68h] [rbp-60h]\n  __int64 v143; // [rsp+70h] [rbp-58h]\n  int v144[3]; // [rsp+78h] [rbp-50h]\n  __int64 v145; // [rsp+78h] [rbp-50h]\n  int v146; // [rsp+84h] [rbp-44h]\n  int v147; // [rsp+8Ch] [rbp-3Ch]\n  __int64 v148; // [rsp+90h] [rbp-38h]\n\n  if ( !*(_QWORD *)(a1 + 6448) && !*(_QWORD *)(a1 + 6432) )\n  {\n    v2 = *(_QWORD *)(a1 + 6424);\n    v3 = *(_DWORD *)(a1 + 6392);\n    v4 = *(_DWORD *)(a1 + 6396);\n    v5 = malloc(2LL * v3 * *(_DWORD *)(a1 + 6396));\n    *(_QWORD *)(a1 + 6432) = v5;\n    if ( !v5 )\n      sub_43EF40(0LL, (__int64)\"alloc_storable_picture: s->imgY_11\");\n    sub_43EF90((_QWORD *)(a1 + 6448), 4 * v4 + 32, 4 * v3 + 32);\n    if ( *((_DWORD *)dest + 321) || *((_DWORD *)dest + 322) || *((_DWORD *)dest + 15) )\n    {\n      v6 = *(_DWORD *)(a1 + 6392);\n      v7 = *(_DWORD *)(a1 + 6396);\n      v8 = malloc(2LL * v6 * *(_DWORD *)(a1 + 6396));\n      *(_QWORD *)(a1 + 6440) = v8;\n      if ( !v8 )\n        sub_43EF40(0LL, (__int64)\"alloc_storable_picture: s->imgY_11_w\");\n      sub_43EF90((_QWORD *)(a1 + 6456), 4 * v7 + 32, 4 * v6 + 32);\n    }\n    v141 = v3;\n    v142 = *(_QWORD *)(a1 + 6448);\n    v148 = *(_QWORD *)(a1 + 6432);\n    v9 = *(_DWORD *)(a1 + 6396);\n    v143 = a1;\n    if ( v9 <= -8 )\n    {\n      v10 = *(unsigned int *)(a1 + 6392);\n    }\n    else\n    {\n      v124 = v2;\n      v116 = qword_4F9E78;\n      v10 = *(unsigned int *)(a1 + 6392);\n      v11 = -4LL;\n      do\n      {\n        if ( (signed int)v10 >= -7 )\n        {\n          v12 = v116[v11 + 4];\n          v13 = -4LL;\n          v14 = -5;\n          LODWORD(v15) = 1;\n          do\n          {\n            v16 = (unsigned int)(v9 - 1);\n            if ( v11 < v9 )\n              v16 = (unsigned int)v11;\n            if ( (signed int)v16 < 0 )\n              v16 = 0LL;\n            v17 = (signed int)v10;\n            v18 = v10 - 1;\n            v19 = (unsigned int)v13;\n            if ( v13 >= v17 )\n              v19 = v18;\n            v20 = v14;\n            if ( v13 > v17 )\n              v20 = v18;\n            if ( (signed int)v19 < 0 )\n              v19 = 0LL;\n            v21 = (unsigned int)(v13 + 1);\n            if ( v13 + 1 >= v17 )\n              v21 = v18;\n            v22 = *(_QWORD *)(v124 + 8 * v16);\n            if ( (signed int)v21 < 0 )\n              v21 = 0LL;\n            v23 = *(unsigned __int16 *)(v22 + 2 * v19);\n            v24 = v23 + *(unsigned __int16 *)(v22 + 2 * v21);\n            if ( (signed int)v20 < 0 )\n              v20 = 0LL;\n            v25 = *(unsigned __int16 *)(v22 + 2 * v20);\n            v26 = v13 + 2;\n            if ( v13 + 2 >= v17 )\n              v26 = v18;\n            if ( (signed int)v26 < 0 )\n              v26 = 0LL;\n            v27 = v25 + *(unsigned __int16 *)(v22 + 2 * v26);\n            v28 = v13 - 2;\n            if ( v13 - 2 >= v17 )\n              v28 = v18;\n            if ( (signed int)v28 < 0 )\n              v28 = 0LL;\n            v29 = v13 + 3;\n            if ( v13 + 3 >= v17 )\n              v29 = v18;\n            v30 = *(unsigned __int16 *)(v22 + 2 * v28);\n            if ( (signed int)v29 < 0 )\n              v29 = 0LL;\n            v31 = *(unsigned __int16 *)(v22 + 2 * v29);\n            *(_DWORD *)(v12 + 4LL * ((signed int)v15 - 1)) = v23 << 10;\n            v15 = (signed int)v15;\n            *(_DWORD *)(v12 + 4 * v15) = 32 * (v31 + v30 + 20 * v24 - 5 * v27);\n            v10 = *(signed int *)(v143 + 6392);\n            v9 = *(_DWORD *)(v143 + 6396);\n            ++v14;\n            LODWORD(v15) = v15 + 2;\n            v33 = __OFSUB__(v13, v10 + 3);\n            v32 = v13++ - (v10 + 3) < 0;\n          }\n          while ( v32 ^ v33 );\n        }\n        v34 = v9 + 3;\n        v33 = __OFSUB__(v11, v34);\n        v32 = v11++ - v34 < 0;\n      }\n      while ( v32 ^ v33 );\n    }\n    v137 = v9;\n    v134 = v10;\n    if ( 2 * (signed int)v10 + 16 <= 0 )\n    {\n      v36 = v142;\n    }\n    else\n    {\n      v35 = 0LL;\n      v36 = v142;\n      do\n      {\n        if ( v137 < -7 )\n        {\n          v54 = v134;\n        }\n        else\n        {\n          v125 = 2 * v35 - 16;\n          v37 = -16;\n          v38 = 0LL;\n          v39 = v137;\n          do\n          {\n            v40 = v39 + 7;\n            v41 = *(_DWORD *)(*((_QWORD *)qword_4F9E78 + v38) + 4 * v35);\n            v42 = v38 + 1;\n            if ( v40 <= (signed int)v38 + 1 )\n              v42 = v40;\n            v43 = 20 * (v41 + *(_DWORD *)(*((_QWORD *)qword_4F9E78 + v42) + 4 * v35));\n            v44 = (unsigned int)(v38 - 1);\n            if ( v38 <= 1 )\n              v44 = 0LL;\n            v45 = v38 + 2;\n            if ( v40 <= (signed int)v38 + 2 )\n              v45 = v40;\n            v46 = 5\n                * (*(_DWORD *)(*((_QWORD *)qword_4F9E78 + v44) + 4 * v35)\n                 + *(_DWORD *)(*((_QWORD *)qword_4F9E78 + v45) + 4 * v35));\n            v47 = (unsigned int)(v38 - 2);\n            if ( v38 <= 2 )\n              v47 = 0LL;\n            if ( v40 > (signed int)v38 + 3 )\n              v40 = v38 + 3;\n            v48 = *(_DWORD *)(*((_QWORD *)qword_4F9E78 + v40) + 4 * v35)\n                + *(_DWORD *)(*((_QWORD *)qword_4F9E78 + v47) + 4 * v35)\n                + v43\n                - v46;\n            v49 = *((_DWORD *)off_49F6D0 + 18171);\n            v50 = (signed int)(v41 + ((unsigned int)((v41 + 512) >> 31) >> 22) + 512) >> 10;\n            if ( v49 > v50 )\n              v49 = v50;\n            v51 = v48 / 32;\n            if ( v49 < 0 )\n              LOWORD(v49) = 0;\n            sub_475420(v142, v37, v125, v49);\n            v52 = *((_DWORD *)off_49F6D0 + 18171);\n            if ( v52 > (signed int)(((unsigned int)((v51 + 512) >> 31) >> 22) + v51 + 512) >> 10 )\n              v52 = (signed int)(((unsigned int)((v51 + 512) >> 31) >> 22) + v51 + 512) >> 10;\n            if ( v52 < 0 )\n              LOWORD(v52) = 0;\n            sub_475420(v142, v37 + 2, v125, v52);\n            v39 = *(_DWORD *)(v143 + 6396);\n            v53 = *(signed int *)(v143 + 6396) + 7LL;\n            v37 += 4;\n            v33 = __OFSUB__(v38, v53);\n            v32 = (signed __int64)(v38++ - v53) < 0;\n          }\n          while ( v32 ^ v33 );\n          v137 = *(_DWORD *)(v143 + 6396);\n          v54 = *(unsigned int *)(v143 + 6392);\n        }\n        ++v35;\n        v134 = v54;\n      }\n      while ( v35 < 2 * (signed int)v54 + 16 );\n    }\n    v135 = 4 * v134;\n    v144[0] = 4 * v137 + 32;\n    v55 = v141;\n    if ( v144[0] > 0 )\n    {\n      v130 = v135 + 31;\n      v121 = 0;\n      while ( v130 <= 0 )\n      {\nLABEL_90:\n        v121 += 2;\n        if ( v121 >= v144[0] )\n          goto LABEL_91;\n      }\n      v56 = v121 - 16;\n      v57 = 0;\n      v119 = v121 - 16;\n      while ( 1 )\n      {\n        v139 = v57 - 15;\n        v117 = *((_DWORD *)off_49F6D0 + 18171);\n        v126 = v57 - 16;\n        v58 = v55;\n        v132 = (unsigned __int16)sub_4761C0(v36, v56, v57 - 16);\n        v113 = v57 + 2;\n        v59 = v57 + 2;\n        if ( v135 + 30 <= v57 + 2 )\n          v59 = v135 + 30;\n        v60 = v59 - 16;\n        if ( v117 >= (signed int)(((unsigned int)v132 + (unsigned __int16)sub_4761C0(v36, v56, v60) + 1) >> 1) )\n          break;\n        v61 = *((_DWORD *)off_49F6D0 + 18171);\n        v62 = v58;\n        if ( v61 >= 0 )\n          goto LABEL_85;\n        LOWORD(v63) = 0;\n        v55 = v58;\n        v56 = v121 - 16;\nLABEL_89:\n        v57 = v113;\n        sub_475420(v36, v56, v139, v63);\n        if ( v113 >= v130 )\n          goto LABEL_90;\n      }\n      sub_4761C0(v36, v56, v126);\n      sub_4761C0(v36, v56, v60);\n      v61 = *((_DWORD *)off_49F6D0 + 18171);\n      v62 = v58;\nLABEL_85:\n      v64 = v61;\n      v56 = v121 - 16;\n      v65 = (unsigned __int16)sub_4761C0(v36, v119, v126);\n      if ( v64 >= (signed int)((v65 + (unsigned int)(unsigned __int16)sub_4761C0(v36, v119, v60) + 1) >> 1) )\n      {\n        v66 = (unsigned __int16)sub_4761C0(v36, v119, v126);\n        v63 = (v66 + (unsigned int)(unsigned __int16)sub_4761C0(v36, v119, v60) + 1) >> 1;\n      }\n      else\n      {\n        v63 = *((_DWORD *)off_49F6D0 + 18171);\n      }\n      v55 = v62;\n      goto LABEL_89;\n    }\nLABEL_91:\n    v146 = v135 + 32;\n    v67 = v143;\n    if ( v135 + 32 > 0 )\n    {\n      v131 = 4 * v137 + 31;\n      v138 = 4 * v137 + 30;\n      v136 = v135 + 30;\n      v140 = 0;\n      while ( v131 <= 0 )\n      {\n        v106 = v140 + 1;\nLABEL_136:\n        v140 = v106;\n        if ( v106 == v146 )\n          goto LABEL_137;\n      }\n      v147 = v140 & 3;\n      v68 = v140 + 1;\n      if ( v136 <= v140 + 1 )\n        v68 = v136;\n      v69 = v140 - 16;\n      v70 = v68 - 16;\n      v71 = v140 - 17;\n      v72 = 0;\n      v133 = v70;\n      v120 = v140 - 16;\n      v118 = v140 - 17;\n      while ( 1 )\n      {\n        if ( v140 & 1 )\n        {\n          v82 = v72 - 16;\n          v129 = v72 - 15;\n          v115 = v72 - 16;\n          v123 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( !(v72 & 2 | v147 ^ 1) || ((unsigned __int8)(v72 & 2) >> 1) & (v147 == 3) )\n          {\n            v94 = (unsigned __int16)sub_4761C0(v36, v82, v70);\n            v95 = v72 + 2;\n            v127 = v72 + 2;\n            if ( v138 <= v72 + 2 )\n              v95 = v138;\n            v96 = v95 - 16;\n            if ( v123 >= (signed int)((v94 + (unsigned int)(unsigned __int16)sub_4761C0(v36, v96, v71) + 1) >> 1) )\n            {\n              v70 = v133;\n              sub_4761C0(v36, v115, v133);\n              sub_4761C0(v36, v96, v71);\n              v97 = *((_DWORD *)off_49F6D0 + 18171);\n            }\n            else\n            {\n              v97 = *((_DWORD *)off_49F6D0 + 18171);\n              v70 = v133;\n              if ( v97 < 0 )\n              {\n                LOWORD(v98) = 0;\nLABEL_132:\n                v69 = v140 - 16;\n                sub_475420(v36, v129, v120, v98);\n                goto LABEL_133;\n              }\n            }\n            v102 = v97;\n            v103 = sub_4761C0(v36, v115, v70);\n            if ( v102 >= (signed int)((v103 + (unsigned int)(unsigned __int16)sub_4761C0(v36, v96, v118) + 1) >> 1) )\n            {\n              v105 = (unsigned __int16)sub_4761C0(v36, v115, v133);\n              v98 = ((unsigned int)v105 + (unsigned __int16)sub_4761C0(v36, v96, v118) + 1) >> 1;\n            }\n            else\n            {\n              v98 = *((_DWORD *)off_49F6D0 + 18171);\n            }\n            v70 = v133;\n            goto LABEL_132;\n          }\n          v83 = sub_4761C0(v36, v82, v71);\n          v84 = v70;\n          v85 = v36;\n          v86 = v84;\n          v87 = v72 + 2;\n          v127 = v72 + 2;\n          if ( v138 <= v72 + 2 )\n            v87 = v138;\n          v88 = v87 - 16;\n          if ( v123 >= (signed int)((v83 + (unsigned int)(unsigned __int16)sub_4761C0(v85, v88, v84) + 1) >> 1) )\n          {\n            sub_4761C0(v85, v115, v118);\n            sub_4761C0(v85, v88, v86);\n            v89 = *((_DWORD *)off_49F6D0 + 18171);\n            v36 = v85;\n            v90 = v72 - 16;\n          }\n          else\n          {\n            v89 = *((_DWORD *)off_49F6D0 + 18171);\n            v36 = v85;\n            v90 = v72 - 16;\n            if ( v89 < 0 )\n            {\n              LOWORD(v91) = 0;\nLABEL_129:\n              v69 = v140 - 16;\n              sub_475420(v36, v129, v120, v91);\n              goto LABEL_130;\n            }\n          }\n          v100 = v89;\n          v101 = sub_4761C0(v36, v90, v118);\n          if ( v100 >= (signed int)(((unsigned __int16)sub_4761C0(v36, v88, v133) + (unsigned int)v101 + 1) >> 1) )\n          {\n            v104 = (unsigned __int16)sub_4761C0(v36, v90, v118);\n            v91 = ((unsigned int)(unsigned __int16)sub_4761C0(v36, v88, v133) + v104 + 1) >> 1;\n          }\n          else\n          {\n            v91 = *((_DWORD *)off_49F6D0 + 18171);\n          }\n          goto LABEL_129;\n        }\n        v128 = v72 - 15;\n        v73 = v36;\n        v122 = *((_DWORD *)off_49F6D0 + 18171);\n        v114 = v72 - 16;\n        v145 = (unsigned __int16)sub_4761C0(v36, v72 - 16, v69);\n        v74 = v72 + 2;\n        v75 = v69;\n        v127 = v74;\n        v76 = v74;\n        if ( v138 <= v74 )\n          v76 = v138;\n        v77 = v76 - 16;\n        if ( v122 >= (signed int)(((unsigned int)v145 + (unsigned __int16)sub_4761C0(v73, v77, v75) + 1) >> 1) )\n          break;\n        v78 = *((_DWORD *)off_49F6D0 + 18171);\n        v79 = v114;\n        if ( v78 >= 0 )\n          goto LABEL_111;\n        LOWORD(v80) = 0;\n        v81 = v142;\n        v69 = v140 - 16;\nLABEL_120:\n        sub_475420(v81, v128, v69, v80);\n        v36 = v81;\nLABEL_130:\n        v70 = v133;\nLABEL_133:\n        v71 = v140 - 17;\n        v72 = v127;\n        if ( v127 >= v131 )\n        {\n          v67 = v143;\n          v106 = v140 + 1;\n          goto LABEL_136;\n        }\n      }\n      sub_4761C0(v73, v114, v75);\n      sub_4761C0(v73, v77, v75);\n      v78 = *((_DWORD *)off_49F6D0 + 18171);\n      v79 = v114;\nLABEL_111:\n      v92 = v78;\n      v81 = v142;\n      v93 = (unsigned __int16)sub_4761C0(v142, v79, v120);\n      if ( v92 >= (signed int)(((unsigned int)(unsigned __int16)sub_4761C0(v142, v77, v120) + v93 + 1) >> 1) )\n      {\n        v99 = (unsigned __int16)sub_4761C0(v142, v114, v120);\n        v80 = ((unsigned int)(unsigned __int16)sub_4761C0(v142, v77, v120) + v99 + 1) >> 1;\n      }\n      else\n      {\n        v80 = *((_DWORD *)off_49F6D0 + 18171);\n      }\n      v69 = v140 - 16;\n      goto LABEL_120;\n    }\nLABEL_137:\n    v107 = *(_DWORD *)(v67 + 6396);\n    if ( v107 > 0 )\n    {\n      v108 = *(_DWORD *)(v67 + 6392);\n      v109 = 0;\n      do\n      {\n        if ( v108 > 0 )\n        {\n          v110 = 0;\n          v111 = 0;\n          do\n          {\n            v112 = sub_4761C0(v142, 4 * v109, v110);\n            sub_475440(v148, v109, v111++, v112, v108);\n            v110 += 4;\n          }\n          while ( v108 != v111 );\n        }\n        ++v109;\n      }\n      while ( v109 != v107 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x4201e0L", 
            "funcEndAddr": "0x420f34L", 
            "funcName": "sub_4201E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_420F40()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x420f40L", 
            "funcEndAddr": "0x420f43L", 
            "funcName": "sub_420F40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_420F50()\n{\n  signed int *v0; // r12\n  __int64 v1; // r10\n  __int64 v2; // rax\n  __int64 v3; // r13\n  signed __int64 v4; // rdx\n  __int64 v5; // r14\n  __int64 v6; // r15\n  unsigned __int64 **v7; // r9\n  __int64 v8; // r8\n  unsigned __int64 *v9; // r13\n  unsigned __int64 *v10; // rdx\n  unsigned __int64 v11; // rbp\n  unsigned __int64 v12; // rax\n  signed __int64 v13; // r11\n  signed __int64 v14; // rcx\n  signed __int64 v15; // rdi\n  signed __int64 v16; // rbx\n  signed __int64 v17; // rsi\n  unsigned __int64 v18; // rax\n  unsigned __int64 v19; // rcx\n  signed __int64 v20; // rbp\n  signed __int64 v21; // rbx\n  signed __int64 v22; // rdi\n  signed __int64 v23; // rsi\n  signed __int64 v24; // rdx\n  unsigned __int64 *v25; // r13\n  __int64 *v26; // r11\n  unsigned __int64 v27; // rbp\n  __int64 v28; // rax\n  signed __int64 v29; // rdx\n  signed __int64 v30; // rcx\n  signed __int64 v31; // rdi\n  signed __int64 v32; // rbx\n  signed __int64 v33; // rsi\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  signed __int64 v36; // rbp\n  signed __int64 v37; // rbx\n  signed __int64 v38; // rdi\n  signed __int64 v39; // rsi\n  signed __int64 v40; // rdx\n  unsigned __int64 *v41; // r13\n  __int64 *v42; // r11\n  unsigned __int64 v43; // rbp\n  __int64 v44; // rax\n  signed __int64 v45; // rdx\n  signed __int64 v46; // rcx\n  signed __int64 v47; // rdi\n  signed __int64 v48; // rbx\n  signed __int64 v49; // rsi\n  unsigned __int64 v50; // rcx\n  unsigned __int64 v51; // rax\n  signed __int64 v52; // rbp\n  signed __int64 v53; // rbx\n  signed __int64 v54; // rdi\n  signed __int64 v55; // rsi\n  signed __int64 v56; // rdx\n  unsigned __int64 *v57; // r9\n  __int64 *v58; // r8\n  unsigned __int64 v59; // rdx\n  __int64 v60; // rsi\n  signed __int64 v61; // rcx\n  signed __int64 v62; // rax\n  signed __int64 v63; // rdi\n  signed __int64 v64; // rbx\n  signed __int64 v65; // rbp\n  unsigned __int64 v66; // rcx\n  unsigned __int64 v67; // rax\n  signed __int64 v68; // rbx\n  signed __int64 v69; // rbp\n  signed __int64 v70; // rdi\n  signed __int64 v71; // rsi\n  signed __int64 v72; // rdx\n  signed __int64 v73; // rax\n  bool v74; // sf\n  unsigned __int8 v75; // of\n  __int64 v76; // r8\n  __int64 v77; // rcx\n  signed __int64 v78; // rdx\n  __int64 v79; // rsi\n  __int64 v80; // rbp\n  _DWORD *v81; // rbx\n  _DWORD *v82; // rax\n  _DWORD *v83; // rax\n  _DWORD *v84; // rsi\n  bool v85; // zf\n  __int64 v86; // r15\n  _QWORD *v87; // rcx\n  __int64 v88; // r10\n  __int64 v89; // rsi\n  signed __int64 v90; // r14\n  signed __int64 v91; // rbp\n  __int64 v92; // rcx\n  __int64 v93; // r9\n  int v94; // ecx\n  signed __int64 v95; // r8\n  signed __int64 v96; // r11\n  __int64 v97; // rsi\n  __int64 v98; // rsi\n  signed __int64 v99; // rdi\n  __int64 v100; // rsi\n  __int64 v101; // rsi\n  _QWORD *v102; // r15\n  __int64 v103; // rdi\n  __int64 v104; // r13\n  __int64 v105; // rsi\n  __int64 v106; // rsi\n  __int64 v107; // rsi\n  signed __int64 v108; // rdi\n  __int64 v109; // rsi\n  __int64 v110; // rsi\n  _QWORD *v111; // rsi\n  __int64 v112; // rdi\n  __int64 v113; // rsi\n  __int64 v114; // rax\n  signed __int64 v115; // rcx\n  signed __int64 v116; // rdx\n  __int64 v117; // rsi\n  __int64 v118; // rsi\n  __int64 v119; // r9\n  __int64 v120; // r14\n  signed __int64 v121; // rbx\n  unsigned __int64 v122; // rax\n  __int64 v123; // rcx\n  signed __int64 v124; // rbp\n  signed __int64 v125; // r8\n  __int64 v126; // rcx\n  signed __int64 v127; // r13\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  signed __int64 v130; // rdx\n  signed __int64 v131; // rdx\n  _QWORD *v132; // rax\n  unsigned __int64 v133; // r11\n  unsigned __int64 v134; // rsi\n  __int64 v135; // rax\n  signed __int64 v136; // rdi\n  signed __int64 v137; // rax\n  __int64 result; // rax\n  __int64 v139; // r8\n  __int64 v140; // r9\n  signed __int64 v141; // r13\n  int v142; // er14\n  __int64 v143; // rcx\n  signed __int64 v144; // rsi\n  signed __int64 v145; // rdi\n  signed __int64 v146; // rbp\n  __int64 v147; // rcx\n  signed __int64 v148; // rbx\n  signed __int64 v149; // rdx\n  __int64 v150; // r8\n  __int64 v151; // r9\n  signed __int64 v152; // r13\n  int v153; // er14\n  __int64 v154; // rcx\n  signed __int64 v155; // rsi\n  signed __int64 v156; // rdi\n  signed __int64 v157; // rbp\n  __int64 v158; // rcx\n  signed __int64 v159; // rbx\n  signed __int64 v160; // rdx\n  __int64 v161; // rcx\n  __int64 v162; // rsi\n  signed __int64 v163; // rbp\n  signed __int64 v164; // rdi\n  signed int *v165; // rbp\n  __int64 *v166; // rsi\n  __int64 *v167; // rdx\n  __int64 *v168; // rsi\n  __int64 *v169; // rdx\n  signed __int64 v170; // rcx\n  __int64 v171; // r9\n  __int64 v172; // r12\n  __int64 v173; // rsi\n  __int64 v174; // r14\n  bool v175; // r15\n  __int64 v176; // r13\n  __int64 v177; // r10\n  __int64 v178; // r11\n  __int64 v179; // rdi\n  _WORD *v180; // rcx\n  _WORD *v181; // r8\n  _WORD *v182; // rax\n  _WORD *v183; // rbx\n  _QWORD *v184; // rax\n  _WORD *v185; // rcx\n  _QWORD *v186; // rbp\n  _WORD *v187; // rdx\n  _WORD *v188; // rax\n  _WORD *v189; // rdx\n  _QWORD *v190; // rax\n  _WORD *v191; // rcx\n  _QWORD *v192; // rbp\n  _WORD *v193; // rbx\n  _WORD *v194; // rax\n  __int64 v195; // rdx\n  _WORD *v196; // rdx\n  _WORD *v197; // rax\n  _WORD *v198; // rdx\n  _WORD *v199; // rax\n  _WORD *v200; // rdx\n  signed int v201; // eax\n  _QWORD *v202; // rcx\n  __int64 v203; // rdx\n  __int64 v204; // rax\n  __int64 v205; // r9\n  __int64 v206; // r10\n  __int64 v207; // r8\n  __int64 v208; // rbp\n  __int64 v209; // rbx\n  bool v210; // r14\n  bool v211; // di\n  __int64 v212; // rsi\n  __int64 v213; // rsi\n  bool v214; // di\n  __int64 v215; // rsi\n  __int64 v216; // rsi\n  bool v217; // di\n  __int64 v218; // rsi\n  __int64 v219; // r8\n  signed __int64 v220; // r10\n  __int64 v221; // r11\n  __int64 v222; // rbp\n  __int64 v223; // rax\n  __int64 v224; // r14\n  int v225; // er15\n  _QWORD *v226; // r12\n  int v227; // edi\n  int v228; // edx\n  _WORD *v229; // rbx\n  __int16 v230; // si\n  __int64 v231; // rax\n  __int64 v232; // rax\n  _WORD *v233; // rdx\n  __int16 v234; // si\n  __int64 v235; // [rsp+0h] [rbp-F0h]\n  _QWORD *v236; // [rsp+0h] [rbp-F0h]\n  __int64 v237; // [rsp+0h] [rbp-F0h]\n  signed int *v238; // [rsp+0h] [rbp-F0h]\n  __int64 v239; // [rsp+8h] [rbp-E8h]\n  signed __int64 v240; // [rsp+8h] [rbp-E8h]\n  _QWORD *v241; // [rsp+8h] [rbp-E8h]\n  unsigned int v242; // [rsp+10h] [rbp-E0h]\n  __int64 v243; // [rsp+10h] [rbp-E0h]\n  __int64 v244; // [rsp+10h] [rbp-E0h]\n  __int64 v245; // [rsp+10h] [rbp-E0h]\n  int v246; // [rsp+1Ch] [rbp-D4h]\n  __int64 v247; // [rsp+20h] [rbp-D0h]\n  __int64 v248; // [rsp+20h] [rbp-D0h]\n  signed __int64 v249; // [rsp+28h] [rbp-C8h]\n  __int64 v250; // [rsp+28h] [rbp-C8h]\n  signed __int64 v251; // [rsp+30h] [rbp-C0h]\n  __int64 v252; // [rsp+30h] [rbp-C0h]\n  __int64 v253; // [rsp+30h] [rbp-C0h]\n  _QWORD *v254; // [rsp+38h] [rbp-B8h]\n  __int64 v255; // [rsp+38h] [rbp-B8h]\n  __int64 v256; // [rsp+40h] [rbp-B0h]\n  int v257; // [rsp+40h] [rbp-B0h]\n  signed __int64 v258; // [rsp+50h] [rbp-A0h]\n  __int64 v259; // [rsp+50h] [rbp-A0h]\n  signed __int64 v260; // [rsp+58h] [rbp-98h]\n  __int64 v261; // [rsp+60h] [rbp-90h]\n  signed __int64 v262; // [rsp+60h] [rbp-90h]\n  int v263; // [rsp+68h] [rbp-88h]\n  __int64 v264; // [rsp+68h] [rbp-88h]\n  signed __int64 v265; // [rsp+70h] [rbp-80h]\n  __int64 v266; // [rsp+70h] [rbp-80h]\n  signed __int64 v267; // [rsp+78h] [rbp-78h]\n  __int64 v268; // [rsp+78h] [rbp-78h]\n  __int64 v269; // [rsp+80h] [rbp-70h]\n  __int64 v270; // [rsp+80h] [rbp-70h]\n  __int64 v271; // [rsp+88h] [rbp-68h]\n  __int64 v272; // [rsp+88h] [rbp-68h]\n  signed __int64 v273; // [rsp+90h] [rbp-60h]\n  __int64 v274; // [rsp+90h] [rbp-60h]\n  signed __int64 v275; // [rsp+98h] [rbp-58h]\n  __int64 v276; // [rsp+98h] [rbp-58h]\n  signed __int64 v277; // [rsp+A0h] [rbp-50h]\n  signed __int64 v278; // [rsp+A0h] [rbp-50h]\n  unsigned int *v279; // [rsp+A8h] [rbp-48h]\n  _DWORD *v280; // [rsp+B0h] [rbp-40h]\n  __int64 v281; // [rsp+B8h] [rbp-38h]\n\n  v0 = (signed int *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  v246 = *((_DWORD *)off_49F6D0 + 6);\n  v242 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) && *(_DWORD *)(v1 + 632 * v2 + 532) )\n    v242 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  v3 = qword_4F9F48;\n  v263 = *(_DWORD *)(qword_4F9F48 + 3224);\n  v4 = 632 * v2;\n  *(_DWORD *)(v1 + v4 + 72) = *(_DWORD *)(qword_4F9F48 + 3096);\n  *(_DWORD *)(v1 + v4 + 460) = *(_DWORD *)(v3 + 3208);\n  *(_QWORD *)(v1 + v4 + 464) = *(_QWORD *)(v3 + 3216);\n  *(_DWORD *)(v1 + v4 + 580) = *(_DWORD *)(v3 + 3100);\n  v0[18095] = *(_DWORD *)(v3 + 3328);\n  *(_DWORD *)(v1 + v4 + 592) = *(_DWORD *)(v3 + 3348);\n  *(_DWORD *)(v1 + v4 + 596) = *(_DWORD *)(v3 + 3352);\n  *(_DWORD *)(v1 + v4 + 12) = *(_DWORD *)(v3 + 3344);\n  v260 = 632 * v2;\n  *(_DWORD *)(v1 + v4 + 524) = *(_DWORD *)(v3 + 3332);\n  v256 = v3;\n  if ( v0[18173] >= -3 )\n  {\n    v235 = *(_QWORD *)(v3 + 3080);\n    v5 = *((_QWORD *)v0 + 1767);\n    v6 = 0LL;\n    do\n    {\n      v7 = *(unsigned __int64 ***)(v235 + 8 * v6);\n      v8 = *(_QWORD *)(v5 + 8 * v6);\n      v9 = *v7;\n      v10 = *(unsigned __int64 **)v8;\n      v11 = **v7;\n      v12 = **(_QWORD **)v8;\n      if ( v12 >= v11 + 260 || v11 >= v12 + 260 )\n      {\n        *(_OWORD *)v12 = *(_OWORD *)v11;\n        *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);\n        *(_OWORD *)(v12 + 32) = *(_OWORD *)(v11 + 32);\n        *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);\n        *(_OWORD *)(v12 + 64) = *(_OWORD *)(v11 + 64);\n        *(_OWORD *)(v12 + 80) = *(_OWORD *)(v11 + 80);\n        *(_OWORD *)(v12 + 96) = *(_OWORD *)(v11 + 96);\n        *(_OWORD *)(v12 + 112) = *(_OWORD *)(v11 + 112);\n        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v11 + 128);\n        *(_OWORD *)(v12 + 144) = *(_OWORD *)(v11 + 144);\n        *(_OWORD *)(v12 + 160) = *(_OWORD *)(v11 + 160);\n        *(_OWORD *)(v12 + 176) = *(_OWORD *)(v11 + 176);\n        *(_OWORD *)(v12 + 192) = *(_OWORD *)(v11 + 192);\n        *(_OWORD *)(v12 + 208) = *(_OWORD *)(v11 + 208);\n        *(_OWORD *)(v12 + 224) = *(_OWORD *)(v11 + 224);\n        _mm_storeu_si128((__m128i *)(v12 + 240), _mm_loadu_si128((const __m128i *)(v11 + 240)));\n        v13 = 64LL;\n      }\n      else\n      {\n        v13 = 0LL;\n      }\n      v14 = v13 - 64;\n      v15 = -1LL;\n      v16 = v13;\n      do\n      {\n        *(_DWORD *)(v12 + 4 * v16) = *(_DWORD *)(v11 + 4 * v16);\n        v17 = v14;\n        ++v16;\n        ++v14;\n        ++v15;\n      }\n      while ( v15 );\n      if ( v13 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v12 + 4 * v17 + 260) = *(_DWORD *)(v11 + 4 * v17 + 260);\n          *(_DWORD *)(v12 + 4 * v17 + 264) = *(_DWORD *)(v11 + 4 * v17 + 264);\n          *(_DWORD *)(v12 + 4 * v17 + 268) = *(_DWORD *)(v11 + 4 * v17 + 268);\n          *(_DWORD *)(v12 + 4 * v17 + 272) = *(_DWORD *)(v11 + 4 * v17 + 272);\n          v17 += 4LL;\n        }\n        while ( v17 );\n      }\n      v18 = v9[1];\n      v19 = v10[1];\n      if ( v19 >= v18 + 260 || v18 >= v19 + 260 )\n      {\n        *(_OWORD *)v19 = *(_OWORD *)v18;\n        *(_OWORD *)(v19 + 16) = *(_OWORD *)(v18 + 16);\n        *(_OWORD *)(v19 + 32) = *(_OWORD *)(v18 + 32);\n        *(_OWORD *)(v19 + 48) = *(_OWORD *)(v18 + 48);\n        *(_OWORD *)(v19 + 64) = *(_OWORD *)(v18 + 64);\n        *(_OWORD *)(v19 + 80) = *(_OWORD *)(v18 + 80);\n        *(_OWORD *)(v19 + 96) = *(_OWORD *)(v18 + 96);\n        *(_OWORD *)(v19 + 112) = *(_OWORD *)(v18 + 112);\n        *(_OWORD *)(v19 + 128) = *(_OWORD *)(v18 + 128);\n        *(_OWORD *)(v19 + 144) = *(_OWORD *)(v18 + 144);\n        *(_OWORD *)(v19 + 160) = *(_OWORD *)(v18 + 160);\n        *(_OWORD *)(v19 + 176) = *(_OWORD *)(v18 + 176);\n        *(_OWORD *)(v19 + 192) = *(_OWORD *)(v18 + 192);\n        *(_OWORD *)(v19 + 208) = *(_OWORD *)(v18 + 208);\n        *(_OWORD *)(v19 + 224) = *(_OWORD *)(v18 + 224);\n        _mm_storeu_si128((__m128i *)(v19 + 240), _mm_loadu_si128((const __m128i *)(v18 + 240)));\n        v20 = 64LL;\n      }\n      else\n      {\n        v20 = 0LL;\n      }\n      v21 = v20 - 64;\n      v22 = -1LL;\n      v23 = v20;\n      do\n      {\n        *(_DWORD *)(v19 + 4 * v23) = *(_DWORD *)(v18 + 4 * v23);\n        v24 = v21;\n        ++v23;\n        ++v21;\n        ++v22;\n      }\n      while ( v22 );\n      if ( v20 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v19 + 4 * v24 + 260) = *(_DWORD *)(v18 + 4 * v24 + 260);\n          *(_DWORD *)(v19 + 4 * v24 + 264) = *(_DWORD *)(v18 + 4 * v24 + 264);\n          *(_DWORD *)(v19 + 4 * v24 + 268) = *(_DWORD *)(v18 + 4 * v24 + 268);\n          *(_DWORD *)(v19 + 4 * v24 + 272) = *(_DWORD *)(v18 + 4 * v24 + 272);\n          v24 += 4LL;\n        }\n        while ( v24 );\n      }\n      v25 = v7[1];\n      v26 = *(__int64 **)(v8 + 8);\n      v27 = *v25;\n      v28 = *v26;\n      if ( *v26 >= *v25 + 260 || v27 >= v28 + 260 )\n      {\n        *(_OWORD *)v28 = *(_OWORD *)v27;\n        *(_OWORD *)(v28 + 16) = *(_OWORD *)(v27 + 16);\n        *(_OWORD *)(v28 + 32) = *(_OWORD *)(v27 + 32);\n        *(_OWORD *)(v28 + 48) = *(_OWORD *)(v27 + 48);\n        *(_OWORD *)(v28 + 64) = *(_OWORD *)(v27 + 64);\n        *(_OWORD *)(v28 + 80) = *(_OWORD *)(v27 + 80);\n        *(_OWORD *)(v28 + 96) = *(_OWORD *)(v27 + 96);\n        *(_OWORD *)(v28 + 112) = *(_OWORD *)(v27 + 112);\n        *(_OWORD *)(v28 + 128) = *(_OWORD *)(v27 + 128);\n        *(_OWORD *)(v28 + 144) = *(_OWORD *)(v27 + 144);\n        *(_OWORD *)(v28 + 160) = *(_OWORD *)(v27 + 160);\n        *(_OWORD *)(v28 + 176) = *(_OWORD *)(v27 + 176);\n        *(_OWORD *)(v28 + 192) = *(_OWORD *)(v27 + 192);\n        *(_OWORD *)(v28 + 208) = *(_OWORD *)(v27 + 208);\n        *(_OWORD *)(v28 + 224) = *(_OWORD *)(v27 + 224);\n        _mm_storeu_si128((__m128i *)(v28 + 240), _mm_loadu_si128((const __m128i *)(v27 + 240)));\n        v29 = 64LL;\n      }\n      else\n      {\n        v29 = 0LL;\n      }\n      v30 = v29 - 64;\n      v31 = -1LL;\n      v32 = v29;\n      do\n      {\n        *(_DWORD *)(v28 + 4 * v32) = *(_DWORD *)(v27 + 4 * v32);\n        v33 = v30;\n        ++v32;\n        ++v30;\n        ++v31;\n      }\n      while ( v31 );\n      if ( v29 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v28 + 4 * v33 + 260) = *(_DWORD *)(v27 + 4 * v33 + 260);\n          *(_DWORD *)(v28 + 4 * v33 + 264) = *(_DWORD *)(v27 + 4 * v33 + 264);\n          *(_DWORD *)(v28 + 4 * v33 + 268) = *(_DWORD *)(v27 + 4 * v33 + 268);\n          *(_DWORD *)(v28 + 4 * v33 + 272) = *(_DWORD *)(v27 + 4 * v33 + 272);\n          v33 += 4LL;\n        }\n        while ( v33 );\n      }\n      v34 = v25[1];\n      v35 = v26[1];\n      if ( v35 >= v34 + 260 || v34 >= v35 + 260 )\n      {\n        *(_OWORD *)v35 = *(_OWORD *)v34;\n        *(_OWORD *)(v35 + 16) = *(_OWORD *)(v34 + 16);\n        *(_OWORD *)(v35 + 32) = *(_OWORD *)(v34 + 32);\n        *(_OWORD *)(v35 + 48) = *(_OWORD *)(v34 + 48);\n        *(_OWORD *)(v35 + 64) = *(_OWORD *)(v34 + 64);\n        *(_OWORD *)(v35 + 80) = *(_OWORD *)(v34 + 80);\n        *(_OWORD *)(v35 + 96) = *(_OWORD *)(v34 + 96);\n        *(_OWORD *)(v35 + 112) = *(_OWORD *)(v34 + 112);\n        *(_OWORD *)(v35 + 128) = *(_OWORD *)(v34 + 128);\n        *(_OWORD *)(v35 + 144) = *(_OWORD *)(v34 + 144);\n        *(_OWORD *)(v35 + 160) = *(_OWORD *)(v34 + 160);\n        *(_OWORD *)(v35 + 176) = *(_OWORD *)(v34 + 176);\n        *(_OWORD *)(v35 + 192) = *(_OWORD *)(v34 + 192);\n        *(_OWORD *)(v35 + 208) = *(_OWORD *)(v34 + 208);\n        *(_OWORD *)(v35 + 224) = *(_OWORD *)(v34 + 224);\n        _mm_storeu_si128((__m128i *)(v35 + 240), _mm_loadu_si128((const __m128i *)(v34 + 240)));\n        v36 = 64LL;\n      }\n      else\n      {\n        v36 = 0LL;\n      }\n      v37 = v36 - 64;\n      v38 = -1LL;\n      v39 = v36;\n      do\n      {\n        *(_DWORD *)(v35 + 4 * v39) = *(_DWORD *)(v34 + 4 * v39);\n        v40 = v37;\n        ++v39;\n        ++v37;\n        ++v38;\n      }\n      while ( v38 );\n      if ( v36 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v35 + 4 * v40 + 260) = *(_DWORD *)(v34 + 4 * v40 + 260);\n          *(_DWORD *)(v35 + 4 * v40 + 264) = *(_DWORD *)(v34 + 4 * v40 + 264);\n          *(_DWORD *)(v35 + 4 * v40 + 268) = *(_DWORD *)(v34 + 4 * v40 + 268);\n          *(_DWORD *)(v35 + 4 * v40 + 272) = *(_DWORD *)(v34 + 4 * v40 + 272);\n          v40 += 4LL;\n        }\n        while ( v40 );\n      }\n      v41 = v7[2];\n      v42 = *(__int64 **)(v8 + 16);\n      v43 = *v41;\n      v44 = *v42;\n      if ( *v42 >= *v41 + 260 || v43 >= v44 + 260 )\n      {\n        *(_OWORD *)v44 = *(_OWORD *)v43;\n        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v43 + 16);\n        *(_OWORD *)(v44 + 32) = *(_OWORD *)(v43 + 32);\n        *(_OWORD *)(v44 + 48) = *(_OWORD *)(v43 + 48);\n        *(_OWORD *)(v44 + 64) = *(_OWORD *)(v43 + 64);\n        *(_OWORD *)(v44 + 80) = *(_OWORD *)(v43 + 80);\n        *(_OWORD *)(v44 + 96) = *(_OWORD *)(v43 + 96);\n        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v43 + 112);\n        *(_OWORD *)(v44 + 128) = *(_OWORD *)(v43 + 128);\n        *(_OWORD *)(v44 + 144) = *(_OWORD *)(v43 + 144);\n        *(_OWORD *)(v44 + 160) = *(_OWORD *)(v43 + 160);\n        *(_OWORD *)(v44 + 176) = *(_OWORD *)(v43 + 176);\n        *(_OWORD *)(v44 + 192) = *(_OWORD *)(v43 + 192);\n        *(_OWORD *)(v44 + 208) = *(_OWORD *)(v43 + 208);\n        *(_OWORD *)(v44 + 224) = *(_OWORD *)(v43 + 224);\n        _mm_storeu_si128((__m128i *)(v44 + 240), _mm_loadu_si128((const __m128i *)(v43 + 240)));\n        v45 = 64LL;\n      }\n      else\n      {\n        v45 = 0LL;\n      }\n      v46 = v45 - 64;\n      v47 = -1LL;\n      v48 = v45;\n      do\n      {\n        *(_DWORD *)(v44 + 4 * v48) = *(_DWORD *)(v43 + 4 * v48);\n        v49 = v46;\n        ++v48;\n        ++v46;\n        ++v47;\n      }\n      while ( v47 );\n      if ( v45 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v44 + 4 * v49 + 260) = *(_DWORD *)(v43 + 4 * v49 + 260);\n          *(_DWORD *)(v44 + 4 * v49 + 264) = *(_DWORD *)(v43 + 4 * v49 + 264);\n          *(_DWORD *)(v44 + 4 * v49 + 268) = *(_DWORD *)(v43 + 4 * v49 + 268);\n          *(_DWORD *)(v44 + 4 * v49 + 272) = *(_DWORD *)(v43 + 4 * v49 + 272);\n          v49 += 4LL;\n        }\n        while ( v49 );\n      }\n      v50 = v41[1];\n      v51 = v42[1];\n      if ( v51 >= v50 + 260 || v50 >= v51 + 260 )\n      {\n        *(_OWORD *)v51 = *(_OWORD *)v50;\n        *(_OWORD *)(v51 + 16) = *(_OWORD *)(v50 + 16);\n        *(_OWORD *)(v51 + 32) = *(_OWORD *)(v50 + 32);\n        *(_OWORD *)(v51 + 48) = *(_OWORD *)(v50 + 48);\n        *(_OWORD *)(v51 + 64) = *(_OWORD *)(v50 + 64);\n        *(_OWORD *)(v51 + 80) = *(_OWORD *)(v50 + 80);\n        *(_OWORD *)(v51 + 96) = *(_OWORD *)(v50 + 96);\n        *(_OWORD *)(v51 + 112) = *(_OWORD *)(v50 + 112);\n        *(_OWORD *)(v51 + 128) = *(_OWORD *)(v50 + 128);\n        *(_OWORD *)(v51 + 144) = *(_OWORD *)(v50 + 144);\n        *(_OWORD *)(v51 + 160) = *(_OWORD *)(v50 + 160);\n        *(_OWORD *)(v51 + 176) = *(_OWORD *)(v50 + 176);\n        *(_OWORD *)(v51 + 192) = *(_OWORD *)(v50 + 192);\n        *(_OWORD *)(v51 + 208) = *(_OWORD *)(v50 + 208);\n        *(_OWORD *)(v51 + 224) = *(_OWORD *)(v50 + 224);\n        _mm_storeu_si128((__m128i *)(v51 + 240), _mm_loadu_si128((const __m128i *)(v50 + 240)));\n        v52 = 64LL;\n      }\n      else\n      {\n        v52 = 0LL;\n      }\n      v3 = v256;\n      v53 = v52 - 64;\n      v54 = -1LL;\n      v55 = v52;\n      do\n      {\n        *(_DWORD *)(v51 + 4 * v55) = *(_DWORD *)(v50 + 4 * v55);\n        v56 = v53;\n        ++v55;\n        ++v53;\n        ++v54;\n      }\n      while ( v54 );\n      if ( v52 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v51 + 4 * v56 + 260) = *(_DWORD *)(v50 + 4 * v56 + 260);\n          *(_DWORD *)(v51 + 4 * v56 + 264) = *(_DWORD *)(v50 + 4 * v56 + 264);\n          *(_DWORD *)(v51 + 4 * v56 + 268) = *(_DWORD *)(v50 + 4 * v56 + 268);\n          *(_DWORD *)(v51 + 4 * v56 + 272) = *(_DWORD *)(v50 + 4 * v56 + 272);\n          v56 += 4LL;\n        }\n        while ( v56 );\n      }\n      v57 = v7[3];\n      v58 = *(__int64 **)(v8 + 24);\n      v59 = *v57;\n      v60 = *v58;\n      if ( *v58 >= *v57 + 260 || v59 >= v60 + 260 )\n      {\n        *(_OWORD *)v60 = *(_OWORD *)v59;\n        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v59 + 16);\n        *(_OWORD *)(v60 + 32) = *(_OWORD *)(v59 + 32);\n        *(_OWORD *)(v60 + 48) = *(_OWORD *)(v59 + 48);\n        *(_OWORD *)(v60 + 64) = *(_OWORD *)(v59 + 64);\n        *(_OWORD *)(v60 + 80) = *(_OWORD *)(v59 + 80);\n        *(_OWORD *)(v60 + 96) = *(_OWORD *)(v59 + 96);\n        *(_OWORD *)(v60 + 112) = *(_OWORD *)(v59 + 112);\n        *(_OWORD *)(v60 + 128) = *(_OWORD *)(v59 + 128);\n        *(_OWORD *)(v60 + 144) = *(_OWORD *)(v59 + 144);\n        *(_OWORD *)(v60 + 160) = *(_OWORD *)(v59 + 160);\n        *(_OWORD *)(v60 + 176) = *(_OWORD *)(v59 + 176);\n        *(_OWORD *)(v60 + 192) = *(_OWORD *)(v59 + 192);\n        *(_OWORD *)(v60 + 208) = *(_OWORD *)(v59 + 208);\n        *(_OWORD *)(v60 + 224) = *(_OWORD *)(v59 + 224);\n        _mm_storeu_si128((__m128i *)(v60 + 240), _mm_loadu_si128((const __m128i *)(v59 + 240)));\n        v61 = 64LL;\n      }\n      else\n      {\n        v61 = 0LL;\n      }\n      v62 = v61 - 64;\n      v63 = -1LL;\n      v64 = v61;\n      do\n      {\n        *(_DWORD *)(v60 + 4 * v64) = *(_DWORD *)(v59 + 4 * v64);\n        v65 = v62;\n        ++v64;\n        ++v62;\n        ++v63;\n      }\n      while ( v63 );\n      if ( v61 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v60 + 4 * v65 + 260) = *(_DWORD *)(v59 + 4 * v65 + 260);\n          *(_DWORD *)(v60 + 4 * v65 + 264) = *(_DWORD *)(v59 + 4 * v65 + 264);\n          *(_DWORD *)(v60 + 4 * v65 + 268) = *(_DWORD *)(v59 + 4 * v65 + 268);\n          *(_DWORD *)(v60 + 4 * v65 + 272) = *(_DWORD *)(v59 + 4 * v65 + 272);\n          v65 += 4LL;\n        }\n        while ( v65 );\n      }\n      v66 = v57[1];\n      v67 = v58[1];\n      if ( v67 >= v66 + 260 || v66 >= v67 + 260 )\n      {\n        *(_OWORD *)v67 = *(_OWORD *)v66;\n        *(_OWORD *)(v67 + 16) = *(_OWORD *)(v66 + 16);\n        *(_OWORD *)(v67 + 32) = *(_OWORD *)(v66 + 32);\n        *(_OWORD *)(v67 + 48) = *(_OWORD *)(v66 + 48);\n        *(_OWORD *)(v67 + 64) = *(_OWORD *)(v66 + 64);\n        *(_OWORD *)(v67 + 80) = *(_OWORD *)(v66 + 80);\n        *(_OWORD *)(v67 + 96) = *(_OWORD *)(v66 + 96);\n        *(_OWORD *)(v67 + 112) = *(_OWORD *)(v66 + 112);\n        *(_OWORD *)(v67 + 128) = *(_OWORD *)(v66 + 128);\n        *(_OWORD *)(v67 + 144) = *(_OWORD *)(v66 + 144);\n        *(_OWORD *)(v67 + 160) = *(_OWORD *)(v66 + 160);\n        *(_OWORD *)(v67 + 176) = *(_OWORD *)(v66 + 176);\n        *(_OWORD *)(v67 + 192) = *(_OWORD *)(v66 + 192);\n        *(_OWORD *)(v67 + 208) = *(_OWORD *)(v66 + 208);\n        *(_OWORD *)(v67 + 224) = *(_OWORD *)(v66 + 224);\n        _mm_storeu_si128((__m128i *)(v67 + 240), _mm_loadu_si128((const __m128i *)(v66 + 240)));\n        v68 = 64LL;\n      }\n      else\n      {\n        v68 = 0LL;\n      }\n      v69 = v68 - 64;\n      v70 = -1LL;\n      v71 = v68;\n      do\n      {\n        *(_DWORD *)(v67 + 4 * v71) = *(_DWORD *)(v66 + 4 * v71);\n        v72 = v69;\n        ++v71;\n        ++v69;\n        ++v70;\n      }\n      while ( v70 );\n      if ( v68 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v67 + 4 * v72 + 260) = *(_DWORD *)(v66 + 4 * v72 + 260);\n          *(_DWORD *)(v67 + 4 * v72 + 264) = *(_DWORD *)(v66 + 4 * v72 + 264);\n          *(_DWORD *)(v67 + 4 * v72 + 268) = *(_DWORD *)(v66 + 4 * v72 + 268);\n          *(_DWORD *)(v67 + 4 * v72 + 272) = *(_DWORD *)(v66 + 4 * v72 + 272);\n          v72 += 4LL;\n        }\n        while ( v72 );\n      }\n      v73 = v0[18173] + 3LL;\n      v75 = __OFSUB__(v6, v73);\n      v74 = v6++ - v73 < 0;\n    }\n    while ( v74 ^ v75 );\n  }\n  v261 = v1;\n  v279 = (unsigned int *)(v1 + v260 + 72);\n  v76 = *(_QWORD *)(v3 + 3088);\n  v77 = *((_QWORD *)v0 + 1768);\n  v78 = -24LL;\n  do\n  {\n    v79 = *(_QWORD *)(v76 + v78 + 24);\n    v80 = *(_QWORD *)(v77 + v78 + 24);\n    v81 = *(_DWORD **)v79;\n    v82 = *(_DWORD **)v80;\n    *v82 = **(_DWORD **)v79;\n    v82[1] = v81[1];\n    v82[2] = v81[2];\n    v82[3] = v81[3];\n    v82[4] = v81[4];\n    v82[5] = v81[5];\n    v82[6] = v81[6];\n    v82[7] = v81[7];\n    v82[8] = v81[8];\n    v82[9] = v81[9];\n    v82[10] = v81[10];\n    v82[11] = v81[11];\n    v82[12] = v81[12];\n    v82[13] = v81[13];\n    v82[14] = v81[14];\n    v82[15] = v81[15];\n    v82[16] = v81[16];\n    v82[17] = v81[17];\n    v83 = *(_DWORD **)(v79 + 8);\n    v84 = *(_DWORD **)(v80 + 8);\n    *v84 = *v83;\n    v84[1] = v83[1];\n    v84[2] = v83[2];\n    v84[3] = v83[3];\n    v84[4] = v83[4];\n    v84[5] = v83[5];\n    v84[6] = v83[6];\n    v84[7] = v83[7];\n    v84[8] = v83[8];\n    v84[9] = v83[9];\n    v84[10] = v83[10];\n    v84[11] = v83[11];\n    v84[12] = v83[12];\n    v84[13] = v83[13];\n    v84[14] = v83[14];\n    v84[15] = v83[15];\n    v84[16] = v83[16];\n    v85 = v78 == -8;\n    v78 += 8LL;\n    v84[17] = v83[17];\n  }\n  while ( !v85 );\n  v86 = qword_4F9E30;\n  v87 = *(_QWORD **)(qword_4F9E30 + 6480);\n  v236 = v87;\n  v247 = v242;\n  v254 = *(_QWORD **)(qword_4F9E30 + 6488);\n  v243 = v242 | 1;\n  v88 = v0[36];\n  v89 = v0[37];\n  v90 = 8 * v89;\n  v249 = 2 * v89 + *(_QWORD *)(*v87 + 8 * v88 + 24);\n  v91 = 2 * v89 + *(_QWORD *)(*v87 + 8 * v88 + 8);\n  v277 = 2 * v89 + *(_QWORD *)(*v87 + 8 * v88);\n  v258 = 8 * v89 + *(_QWORD *)(*v254 + 8 * v88);\n  v251 = 2 * v89;\n  v275 = 2 * v89 + *(_QWORD *)(*v87 + 8 * v88 + 16);\n  v92 = *(_QWORD *)(*v254 + 8 * v88 + 24);\n  v273 = 8 * v89 + *(_QWORD *)(*v254 + 8 * v88 + 16);\n  v271 = *(_QWORD *)(*v254 + 8 * v88 + 8);\n  v267 = v271 + 8 * v89;\n  v269 = v92;\n  v265 = v92 + 8 * v89;\n  v93 = 0LL;\n  v94 = v246;\n  v239 = qword_4F9E30;\n  do\n  {\n    v95 = 264 * v247;\n    v96 = v86 + 264 * v247;\n    v97 = *(signed __int16 *)(v3 + 4 * v93 + 3264);\n    *(_WORD *)(v277 + v93) = v97;\n    *(_QWORD *)(v258 + 4 * v93) = *(_QWORD *)(v86 + 264 * v247 + 8 * v97 + 24);\n    if ( v94 == 1 )\n    {\n      v98 = *(signed __int16 *)(v3 + 4 * v93 + 3296);\n      *(_WORD *)(v93 + v251 + *(_QWORD *)(v236[1] + 8 * v88)) = v98;\n      v99 = v86 + 264 * v243 + 24;\n      *(_QWORD *)(v90 + *(_QWORD *)(v254[1] + 8 * v88) + 4 * v93) = *(_QWORD *)(v99 + 8 * v98);\n      v100 = *(signed __int16 *)(v3 + 4 * v93 + 3266);\n      *(_WORD *)(v91 + v93) = v100;\n      *(_QWORD *)(v267 + 4 * v93) = *(_QWORD *)(v86 + v95 + 24 + 8 * v100);\n      v101 = *(signed __int16 *)(v3 + 4 * v93 + 3298);\n      *(_WORD *)(v93 + v251 + *(_QWORD *)(v236[1] + 8 * v88 + 8)) = v101;\n      v102 = (_QWORD *)(v99 + 8 * v101);\n      v103 = v3;\n      v104 = *(_QWORD *)(v254[1] + 8 * v88 + 8);\n    }\n    else\n    {\n      v105 = *(signed __int16 *)(v3 + 4 * v93 + 3266);\n      *(_WORD *)(v91 + v93) = v105;\n      v102 = (_QWORD *)(v96 + 8 * v105 + 24);\n      v103 = v3;\n      v104 = v271;\n    }\n    *(_QWORD *)(v90 + v104 + 4 * v93) = *v102;\n    v106 = *(signed __int16 *)(v103 + 4 * v93 + 3268);\n    *(_WORD *)(v275 + v93) = v106;\n    *(_QWORD *)(v273 + 4 * v93) = *(_QWORD *)(v96 + 8 * v106 + 24);\n    v94 = v246;\n    v3 = v103;\n    if ( v246 == 1 )\n    {\n      v107 = *(signed __int16 *)(v103 + 4 * v93 + 3300);\n      *(_WORD *)(v93 + v251 + *(_QWORD *)(v236[1] + 8 * v88 + 16)) = v107;\n      v86 = v239;\n      v108 = v239 + 264 * v243 + 24;\n      *(_QWORD *)(v90 + *(_QWORD *)(v254[1] + 8 * v88 + 16) + 4 * v93) = *(_QWORD *)(v108 + 8 * v107);\n      v109 = *(signed __int16 *)(v3 + 4 * v93 + 3270);\n      *(_WORD *)(v249 + v93) = v109;\n      *(_QWORD *)(v265 + 4 * v93) = *(_QWORD *)(v239 + v95 + 24 + 8 * v109);\n      v110 = *(signed __int16 *)(v3 + 4 * v93 + 3302);\n      *(_WORD *)(v93 + v251 + *(_QWORD *)(v236[1] + 8 * v88 + 24)) = v110;\n      v111 = (_QWORD *)(v108 + 8 * v110);\n      v112 = *(_QWORD *)(v254[1] + 8 * v88 + 24);\n    }\n    else\n    {\n      v113 = *(signed __int16 *)(v103 + 4 * v93 + 3270);\n      *(_WORD *)(v249 + v93) = v113;\n      v111 = (_QWORD *)(v96 + 8 * v113 + 24);\n      v112 = v269;\n      v86 = v239;\n    }\n    *(_QWORD *)(v90 + v112 + 4 * v93) = *v111;\n    v93 += 2LL;\n  }\n  while ( v93 != 8 );\n  v114 = v0[38];\n  v115 = *(_QWORD *)(v86 + 6424) + 8LL * v0[39] + 8;\n  v116 = -128LL;\n  do\n  {\n    v117 = *(_QWORD *)(v115 + v116 + 120);\n    _mm_storeu_si128(\n      (__m128i *)(v117 + 2 * v114),\n      _mm_packs_epi32(\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1032)), 0x10u), 0x10u),\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1048)), 0x10u), 0x10u)));\n    _mm_storeu_si128(\n      (__m128i *)(v117 + 2 * v114 + 16),\n      _mm_packs_epi32(\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1064)), 0x10u), 0x10u),\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1080)), 0x10u), 0x10u)));\n    v118 = *(_QWORD *)(v115 + v116 + 128);\n    _mm_storeu_si128(\n      (__m128i *)(v118 + 2 * v114),\n      _mm_packs_epi32(\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1096)), 0x10u), 0x10u),\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1112)), 0x10u), 0x10u)));\n    _mm_storeu_si128(\n      (__m128i *)(v118 + 2 * v114 + 16),\n      _mm_packs_epi32(\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1128)), 0x10u), 0x10u),\n        _mm_srai_epi32(_mm_slli_epi32(_mm_loadu_si128((const __m128i *)(v3 + 8 * v116 + 1144)), 0x10u), 0x10u)));\n    v116 += 16LL;\n  }\n  while ( v116 );\n  if ( v0[18175] )\n  {\n    v119 = v0[18178];\n    if ( v119 > 0 )\n    {\n      v120 = qword_4F9E30;\n      v121 = v0[18177];\n      v122 = (unsigned __int64)(v121 - 4) >> 2;\n      v123 = ((_BYTE)v122 + 1) & 1;\n      v124 = v3 + 2072;\n      v125 = v3 + 2056;\n      v252 = v123;\n      v240 = v123 - 1 - v122;\n      v126 = 0LL;\n      v244 = v0[18178];\n      v237 = qword_4F9E30;\n      do\n      {\n        if ( (signed int)v121 > 0 )\n        {\n          v131 = v0[41] + (signed __int64)(signed int)v126;\n          v132 = *(_QWORD **)(v120 + 6464);\n          v133 = *(_QWORD *)(*v132 + 8 * v131);\n          v134 = *(_QWORD *)(v132[1] + 8 * v131);\n          v135 = v0[40];\n          if ( (unsigned int)v121 >= 4 && (v133 >= v134 + 2 * v121 || v134 >= v133 + 2 * v121) )\n          {\n            if ( (unsigned __int64)(v121 - 4) >> 2 )\n            {\n              v127 = v240;\n              v128 = 0LL;\n              do\n              {\n                _mm_storel_epi64(\n                  (__m128i *)(v133 + 2 * v135 + 2 * v128),\n                  _mm_shuffle_epi32(\n                    _mm_shufflehi_epi16(\n                      _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v124 + 4 * v128 - 1040)), 232),\n                      232),\n                    232));\n                _mm_storel_epi64(\n                  (__m128i *)(v134 + 2 * v135 + 2 * v128),\n                  _mm_shuffle_epi32(\n                    _mm_shufflehi_epi16(\n                      _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v124 + 4 * v128 - 16)), 232),\n                      232),\n                    232));\n                _mm_storel_epi64(\n                  (__m128i *)(v133 + 2 * v135 + 8 + 2 * v128),\n                  _mm_shuffle_epi32(\n                    _mm_shufflehi_epi16(\n                      _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v124 + 4 * v128 - 1024)), 232),\n                      232),\n                    232));\n                _mm_storel_epi64(\n                  (__m128i *)(v134 + 2 * v135 + 8 + 2 * v128),\n                  _mm_shuffle_epi32(\n                    _mm_shufflehi_epi16(\n                      _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v124 + 4 * v128)), 232),\n                      232),\n                    232));\n                v128 += 8LL;\n                v127 += 2LL;\n              }\n              while ( v127 );\n            }\n            else\n            {\n              v128 = 0LL;\n            }\n            v3 = v256;\n            if ( v252 )\n            {\n              v129 = v256 + (v126 << 6);\n              _mm_storel_epi64(\n                (__m128i *)(v133 + 2 * (v128 + v135)),\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(\n                    _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v129 + 4 * v128 + 1032)), 232),\n                    232),\n                  232));\n              _mm_storel_epi64(\n                (__m128i *)(v134 + 2 * (v128 + v135)),\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(\n                    _mm_shufflelo_epi16(_mm_loadu_si128((const __m128i *)(v129 + 4 * v128 + 2056)), 232),\n                    232),\n                  232));\n            }\n            v130 = v121 & 0xFFFFFFFFFFFFFFFCLL;\n            v119 = v244;\n            v120 = v237;\n            if ( (v121 & 0xFFFFFFFFFFFFFFFCLL) == v121 )\n              goto LABEL_102;\n          }\n          else\n          {\n            v130 = 0LL;\n          }\n          v136 = v133 + 2 * v135;\n          v137 = v134 + 2 * v135;\n          do\n          {\n            *(_WORD *)(v136 + 2 * v130) = *(_WORD *)(v125 + 4 * v130 - 1024);\n            *(_WORD *)(v137 + 2 * v130) = *(_WORD *)(v125 + 4 * v130);\n            ++v130;\n          }\n          while ( v130 < v121 );\n        }\nLABEL_102:\n        ++v126;\n        v124 += 64LL;\n        v125 += 64LL;\n      }\n      while ( v126 < v119 );\n    }\n  }\n  *(_DWORD *)(v261 + v260 + 472) = *(_DWORD *)(v3 + 3104);\n  *(_DWORD *)(v261 + v260 + 488) = *(_DWORD *)(v3 + 3120);\n  *(_DWORD *)(v261 + v260 + 476) = *(_DWORD *)(v3 + 3108);\n  *(_DWORD *)(v261 + v260 + 492) = *(_DWORD *)(v3 + 3124);\n  *(_DWORD *)(v261 + v260 + 480) = *(_DWORD *)(v3 + 3112);\n  *(_DWORD *)(v261 + v260 + 496) = *(_DWORD *)(v3 + 3128);\n  *(_DWORD *)(v261 + v260 + 484) = *(_DWORD *)(v3 + 3116);\n  *(_DWORD *)(v261 + v260 + 500) = *(_DWORD *)(v3 + 3132);\n  *(_DWORD *)(v261 + v260 + 572) = *(_DWORD *)(v3 + 3336);\n  if ( v263 == 8 )\n  {\n    result = v0[37];\n    v139 = *(_QWORD *)(v3 + 3136);\n    v140 = *((_QWORD *)v0 + 13);\n    v141 = v3 + 3144;\n    v142 = 0;\n    do\n    {\n      v143 = v0[36];\n      v144 = v139 + 8 * v143;\n      v145 = v140 + 8 * v143;\n      v146 = v143 - 1;\n      v147 = 0LL;\n      do\n      {\n        *(_DWORD *)(*(_QWORD *)(v145 + 8 * v147) + 4 * result) = *(_DWORD *)(*(_QWORD *)(v144 + 8 * v147) + 4 * result);\n        *(_DWORD *)(v261 + v260 + 332 + 4LL * v142 + 4 * v147) = *(_DWORD *)(v141 + 4LL * v142 + 4 * v147);\n        v148 = v147++ + v146 + 1;\n      }\n      while ( v148 < v0[36] + 3LL );\n      v149 = v0[37] + 3LL;\n      v142 += v147;\n      v75 = __OFSUB__(result, v149);\n      v74 = result++ - v149 < 0;\n    }\n    while ( v74 ^ v75 );\n  }\n  else\n  {\n    result = v0[37];\n    if ( (v263 | 4) == 13 )\n    {\n      v150 = *(_QWORD *)(v3 + 3136);\n      v151 = *((_QWORD *)v0 + 13);\n      v152 = v3 + 3144;\n      v153 = 0;\n      do\n      {\n        v154 = v0[36];\n        v155 = v150 + 8 * v154;\n        v156 = v151 + 8 * v154;\n        v157 = v154 - 1;\n        v158 = 0LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(v156 + 8 * v158) + 4 * result) = *(_DWORD *)(*(_QWORD *)(v155 + 8 * v158) + 4 * result);\n          *(_DWORD *)(v261 + v260 + 332 + 4LL * v153 + 4 * v158) = *(_DWORD *)(v152 + 4LL * v153 + 4 * v158);\n          v159 = v158++ + v157 + 1;\n        }\n        while ( v159 < v0[36] + 3LL );\n        v160 = v0[37] + 3LL;\n        v153 += v158;\n        v75 = __OFSUB__(result, v160);\n        v74 = result++ - v160 < 0;\n      }\n      while ( v74 ^ v75 );\n    }\n    else\n    {\n      v161 = *((_QWORD *)v0 + 13);\n      LODWORD(v162) = 0;\n      do\n      {\n        v162 = (signed int)v162;\n        v163 = v0[36] - 1LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(v161 + 8 * v163 + 8) + 4 * result) = 2;\n          *(_DWORD *)(v261 + v260 + 332 + 4 * v162++) = 2;\n          ++v163;\n        }\n        while ( v163 < v0[36] + 3LL );\n        v164 = v0[37] + 3LL;\n        v75 = __OFSUB__(result, v164);\n        v74 = result++ - v164 < 0;\n      }\n      while ( v74 ^ v75 );\n    }\n  }\n  if ( v0[18100] )\n  {\n    v165 = (signed int *)off_49F6D0;\n    v241 = (_QWORD *)qword_4F9F48;\n    v280 = dest;\n    v259 = *((signed int *)off_49F6D0 + 9);\n    v250 = 0LL;\n    v238 = (signed int *)off_49F6D0;\n    do\n    {\n      v248 = 0LL;\n      do\n      {\n        if ( (signed int)v259 > 0 )\n        {\n          v166 = *(__int64 **)(*(_QWORD *)(v241[405] + 8 * v250) + 8 * v248);\n          v276 = *v166;\n          v274 = v166[1];\n          v257 = v280[314];\n          v167 = *(__int64 **)(*(_QWORD *)(v241[404] + 8 * v250) + 8 * v248);\n          v272 = *v167;\n          v270 = v167[1];\n          v168 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)v165 + 8991) + 8 * v250) + 8 * v248);\n          v268 = *v168;\n          v266 = v168[1];\n          v169 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)v165 + 8990) + 8 * v250) + 8 * v248);\n          v264 = *v169;\n          v281 = v169[1];\n          v170 = 0LL;\n          do\n          {\n            v171 = *(_QWORD *)(v276 + 8 * v170);\n            v172 = *(_QWORD *)(v268 + 8 * v170);\n            v173 = *(_QWORD *)(v274 + 8 * v170);\n            v174 = *(_QWORD *)(v266 + 8 * v170);\n            v175 = v257 != 0 && v170 == 1;\n            v176 = *(_QWORD *)(v272 + 8 * v170);\n            v177 = *(_QWORD *)(v264 + 8 * v170);\n            v245 = *(_QWORD *)(v270 + 8 * v170);\n            v278 = v170;\n            v178 = *(_QWORD *)(v281 + 8 * v170);\n            v179 = 0LL;\n            v255 = *(_QWORD *)(v274 + 8 * v170);\n            v253 = *(_QWORD *)(v264 + 8 * v170);\n            do\n            {\n              v180 = *(_WORD **)(v171 + v179);\n              v181 = *(_WORD **)(v172 + v179);\n              *v181 = *v180;\n              v181[1] = v180[1];\n              v182 = *(_WORD **)(v173 + v179);\n              v183 = *(_WORD **)(v174 + v179);\n              *v183 = *v182;\n              v183[1] = v182[1];\n              if ( v175 && v165[6] == 1 )\n              {\n                v184 = *(_QWORD **)(*(_QWORD *)(v241[406] + 8 * v250) + 8 * v248);\n                v185 = *(_WORD **)(*(_QWORD *)(*v184 + 8LL) + v179);\n                v186 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v238 + 8992) + 8 * v250) + 8 * v248);\n                v187 = *(_WORD **)(*(_QWORD *)(*v186 + 8LL) + v179);\n                *v187 = *v185;\n                v187[1] = v185[1];\n                v188 = *(_WORD **)(*(_QWORD *)(v184[1] + 8LL) + v179);\n                v189 = *(_WORD **)(*(_QWORD *)(v186[1] + 8LL) + v179);\n                *v189 = *v188;\n                v189[1] = v188[1];\n                v190 = *(_QWORD **)(*(_QWORD *)(v241[407] + 8 * v250) + 8 * v248);\n                v191 = *(_WORD **)(*(_QWORD *)(*v190 + 8LL) + v179);\n                v173 = v255;\n                v192 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v238 + 8993) + 8 * v250) + 8 * v248);\n                v177 = v253;\n                v193 = *(_WORD **)(*(_QWORD *)(*v192 + 8LL) + v179);\n                *v193 = *v191;\n                v193[1] = v191[1];\n                v194 = *(_WORD **)(*(_QWORD *)(v190[1] + 8LL) + v179);\n                v195 = v192[1];\n                v165 = v238;\n                v196 = *(_WORD **)(*(_QWORD *)(v195 + 8) + v179);\n                *v196 = *v194;\n                v196[1] = v194[1];\n              }\n              v197 = *(_WORD **)(v176 + v179);\n              v198 = *(_WORD **)(v177 + v179);\n              *v198 = *v197;\n              v198[1] = v197[1];\n              v199 = *(_WORD **)(v245 + v179);\n              v200 = *(_WORD **)(v178 + v179);\n              *v200 = *v199;\n              v200[1] = v199[1];\n              v179 += 8LL;\n            }\n            while ( v179 != 72 );\n            v170 = v278 + 1;\n          }\n          while ( v278 + 1 != v259 );\n        }\n        ++v248;\n      }\n      while ( v248 != 4 );\n      ++v250;\n    }\n    while ( v250 != 4 );\n    if ( *v279 <= 0xD && (v201 = 9728, _bittest(&v201, *v279)) )\n    {\n      v202 = *(_QWORD **)(qword_4F9E30 + 6504);\n      v203 = v165[36];\n      v204 = v165[37];\n      v205 = *(_QWORD *)(*v202 + 8 * v203);\n      v206 = *(_QWORD *)(*v202 + 8 * v203 + 8);\n      v207 = *(_QWORD *)(*v202 + 8 * v203 + 16);\n      v208 = *(_QWORD *)(*v202 + 8 * v203 + 24);\n      **(_DWORD **)(v205 + 8 * v204) = 0;\n      if ( v246 == 1 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203) + 8 * v204) = 0;\n        **(_DWORD **)(v206 + 8 * v204) = 0;\n        v209 = *(_QWORD *)(v202[1] + 8 * v203 + 8);\n        v210 = v246 == 1;\n        v211 = v246 == 1;\n      }\n      else\n      {\n        v211 = 0;\n        v209 = v206;\n        v210 = v246 == 1;\n      }\n      **(_DWORD **)(v209 + 8 * v204) = 0;\n      **(_DWORD **)(v207 + 8 * v204) = 0;\n      v212 = v208;\n      if ( v211 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203 + 16) + 8 * v204) = 0;\n        **(_DWORD **)(v208 + 8 * v204) = 0;\n        v212 = *(_QWORD *)(v202[1] + 8 * v203 + 24);\n      }\n      **(_DWORD **)(v212 + 8 * v204) = 0;\n      **(_DWORD **)(v205 + 8 * v204 + 8) = 0;\n      if ( v246 == 1 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203) + 8 * v204 + 8) = 0;\n        **(_DWORD **)(v206 + 8 * v204 + 8) = 0;\n        v213 = *(_QWORD *)(v202[1] + 8 * v203 + 8);\n        v214 = v210;\n      }\n      else\n      {\n        v214 = 0;\n        v213 = v206;\n      }\n      **(_DWORD **)(v213 + 8 * v204 + 8) = 0;\n      **(_DWORD **)(v207 + 8 * v204 + 8) = 0;\n      v215 = v208;\n      if ( v214 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203 + 16) + 8 * v204 + 8) = 0;\n        **(_DWORD **)(v208 + 8 * v204 + 8) = 0;\n        v215 = *(_QWORD *)(v202[1] + 8 * v203 + 24);\n      }\n      **(_DWORD **)(v215 + 8 * v204 + 8) = 0;\n      **(_DWORD **)(v205 + 8 * v204 + 16) = 0;\n      if ( v246 == 1 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203) + 8 * v204 + 16) = 0;\n        **(_DWORD **)(v206 + 8 * v204 + 16) = 0;\n        v216 = *(_QWORD *)(v202[1] + 8 * v203 + 8);\n        v217 = v210;\n      }\n      else\n      {\n        v217 = 0;\n        v216 = v206;\n      }\n      **(_DWORD **)(v216 + 8 * v204 + 16) = 0;\n      **(_DWORD **)(v207 + 8 * v204 + 16) = 0;\n      v218 = v208;\n      if ( v217 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203 + 16) + 8 * v204 + 16) = 0;\n        **(_DWORD **)(v208 + 8 * v204 + 16) = 0;\n        v218 = *(_QWORD *)(v202[1] + 8 * v203 + 24);\n      }\n      **(_DWORD **)(v218 + 8 * v204 + 16) = 0;\n      **(_DWORD **)(v205 + 8 * v204 + 24) = 0;\n      if ( v246 == 1 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203) + 8 * v204 + 24) = 0;\n        **(_DWORD **)(v206 + 8 * v204 + 24) = 0;\n        v206 = *(_QWORD *)(v202[1] + 8 * v203 + 8);\n      }\n      else\n      {\n        v210 = 0;\n      }\n      **(_DWORD **)(v206 + 8 * v204 + 24) = 0;\n      **(_DWORD **)(v207 + 8 * v204 + 24) = 0;\n      if ( v210 )\n      {\n        **(_DWORD **)(*(_QWORD *)(v202[1] + 8 * v203 + 16) + 8 * v204 + 24) = 0;\n        **(_DWORD **)(v208 + 8 * v204 + 24) = 0;\n        v208 = *(_QWORD *)(v202[1] + 8 * v203 + 24);\n      }\n      result = *(_QWORD *)(v208 + 8 * v204 + 24);\n      *(_DWORD *)result = 0;\n    }\n    else\n    {\n      v219 = qword_4F9E30;\n      v220 = (signed __int64)(v241 + 412);\n      v221 = 0LL;\n      v262 = v260 + v261;\n      do\n      {\n        v222 = 0LL;\n        do\n        {\n          v223 = (v221 & 0x7FFFFFFE) + ((unsigned int)v222 >> 1);\n          v224 = *(signed int *)(v262 + 4 * v223 + 472);\n          v225 = *(_DWORD *)(v262 + 4 * v223 + 488);\n          if ( v225 == 1 )\n          {\n            v226 = *(_QWORD **)(v219 + 6504);\n            v227 = v238[36];\n            v228 = v238[37];\n            result = *(_QWORD *)(*v226 + 8LL * ((signed int)v222 + v227));\n            v229 = *(_WORD **)(result + 8LL * (v228 + (signed int)v221));\n            *v229 = 0;\n            v230 = 0;\n          }\n          else\n          {\n            v231 = **(_QWORD **)(*(_QWORD *)(v241[405] + 8 * v222) + 8 * v221);\n            v226 = *(_QWORD **)(v219 + 6504);\n            v227 = v238[36];\n            v228 = v238[37];\n            v229 = *(_WORD **)(*(_QWORD *)(*v226 + 8LL * ((signed int)v222 + v227)) + 8LL * (v228 + (signed int)v221));\n            *v229 = **(_WORD **)(*(_QWORD *)(v231 + 8LL * *(signed __int16 *)(v220 + 2 * v222 - 32)) + 8 * v224);\n            result = *(_QWORD *)(*(_QWORD *)(v231 + 8LL * *(signed __int16 *)(v220 + 2 * v222 - 32)) + 8 * v224);\n            v230 = *(_WORD *)(result + 2);\n          }\n          v229[1] = v230;\n          if ( v246 == 1 )\n          {\n            if ( v225 )\n            {\n              v232 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v241[405] + 8 * v222) + 8 * v221) + 8LL);\n              v233 = *(_WORD **)(*(_QWORD *)(v226[1] + 8LL * ((signed int)v222 + v227)) + 8LL\n                                                                                        * ((signed int)v221 + v228));\n              *v233 = **(_WORD **)(*(_QWORD *)(v232 + 8LL * *(signed __int16 *)(v220 + 2 * v222)) + 8 * v224);\n              result = *(_QWORD *)(*(_QWORD *)(v232 + 8LL * *(signed __int16 *)(v220 + 2 * v222)) + 8 * v224);\n              v234 = *(_WORD *)(result + 2);\n            }\n            else\n            {\n              result = *(_QWORD *)(v226[1] + 8LL * ((signed int)v222 + v227));\n              v233 = *(_WORD **)(result + 8LL * ((signed int)v221 + v228));\n              *v233 = 0;\n              v234 = 0;\n            }\n            v233[1] = v234;\n          }\n          ++v222;\n        }\n        while ( v222 != 4 );\n        ++v221;\n        v220 += 8LL;\n      }\n      while ( v221 != 4 );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x420f50L", 
            "funcEndAddr": "0x422d76L", 
            "funcName": "sub_420F50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_422D80(__int64 a1, _DWORD *a2, signed __int64 a3, int a4, unsigned int a5)\n{\n  size_t v5; // rbx\n  int v6; // ebp\n  unsigned __int64 result; // rax\n  signed int v8; // edi\n  __int64 v9; // r13\n  __int64 v10; // r11\n  unsigned __int64 v11; // rdx\n  __int64 v12; // rsi\n  _DWORD *v13; // r15\n  signed __int64 v14; // rbp\n  __int64 v15; // rsi\n  __int64 v16; // r13\n  _DWORD *v17; // rbp\n  __int64 v18; // r12\n  __int64 v19; // rax\n  __int64 v20; // rax\n  _WORD *v21; // rdi\n  __int64 v22; // rdi\n  unsigned __int64 v23; // r8\n  __int64 v24; // rbx\n  __int64 v25; // rbx\n  unsigned __int64 v26; // rdx\n  signed __int64 v27; // rdi\n  signed __int64 v28; // rdx\n  __m128i v29; // xmm2\n  __m128i v30; // xmm2\n  __int64 v31; // rbx\n  __m128i v32; // xmm2\n  __int64 v33; // r11\n  int v34; // er15\n  unsigned __int64 v35; // rax\n  signed int v36; // er14\n  signed int v37; // er12\n  int v38; // er13\n  __m128i v39; // xmm1\n  __int64 v40; // r9\n  __int64 v41; // r11\n  int v42; // er10\n  unsigned __int64 v43; // r8\n  __int64 v44; // rax\n  signed __int64 v45; // rax\n  int v46; // ecx\n  signed __int64 v47; // rdx\n  signed __int64 v48; // rdi\n  signed __int64 v49; // rax\n  _DWORD *v50; // rdx\n  _DWORD *v51; // rcx\n  __int64 v52; // rbx\n  __int64 v53; // rsi\n  signed __int64 v54; // rdi\n  signed int v55; // ecx\n  __m128i v56; // xmm2\n  __m128i v57; // xmm3\n  __m128i v58; // xmm2\n  __m128i v59; // xmm2\n  __m128i v60; // xmm3\n  __m128i v61; // xmm2\n  __m128i v62; // xmm2\n  __m128i v63; // xmm3\n  __m128i v64; // xmm2\n  __int64 v65; // r11\n  int v66; // er15\n  unsigned __int64 v67; // rax\n  signed int v68; // er14\n  signed int v69; // er12\n  int v70; // ebp\n  __int64 v71; // r9\n  __int64 v72; // r11\n  int v73; // er10\n  unsigned __int64 v74; // r8\n  __int64 v75; // rax\n  signed __int64 v76; // rdi\n  int v77; // ecx\n  signed __int64 v78; // rdi\n  char *v79; // rdx\n  char *v80; // rcx\n  __int64 v81; // rbx\n  __int64 v82; // rsi\n  signed __int64 v83; // rdi\n  signed int v84; // ecx\n  __int64 v85; // rax\n  __m128i v86; // xmm1\n  __m128i v87; // xmm2\n  __m128i v88; // xmm1\n  __m128i v89; // xmm2\n  __int64 v90; // rax\n  __m128i v91; // xmm1\n  __m128i v92; // xmm2\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  signed __int64 v94; // [rsp+10h] [rbp-78h]\n  signed __int64 v95; // [rsp+18h] [rbp-70h]\n  __int64 v96; // [rsp+18h] [rbp-70h]\n  _DWORD *v97; // [rsp+18h] [rbp-70h]\n  signed __int64 v98; // [rsp+18h] [rbp-70h]\n  __int64 v99; // [rsp+20h] [rbp-68h]\n  _DWORD *v100; // [rsp+20h] [rbp-68h]\n  signed __int64 v101; // [rsp+20h] [rbp-68h]\n  char *v102; // [rsp+20h] [rbp-68h]\n  signed __int64 v103; // [rsp+28h] [rbp-60h]\n  __int64 v104; // [rsp+30h] [rbp-58h]\n  signed __int64 v105; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v106; // [rsp+38h] [rbp-50h]\n  __int64 v107; // [rsp+38h] [rbp-50h]\n  signed __int64 v108; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v109; // [rsp+40h] [rbp-48h]\n  __int64 v110; // [rsp+48h] [rbp-40h]\n  signed __int64 v111; // [rsp+50h] [rbp-38h]\n\n  LODWORD(v5) = a5;\n  v6 = a4;\n  v94 = a3;\n  src = a2;\n  v110 = a1;\n  if ( a5 >= 3 )\n    error(\n      (__int64)\"Source picture has higher bit depth than imgpel data type. Please recompile with larger data type for imgpel.\",\n      500);\n  result = sub_452790();\n  if ( !(_DWORD)result )\n  {\n    result = v94;\n    if ( v6 > 0 )\n    {\n      v5 = (signed int)v5;\n      v96 = (unsigned int)v6;\n      v16 = 0LL;\n      v17 = a2;\n      do\n      {\n        if ( (signed int)result > 0 )\n        {\n          v100 = v17;\n          if ( (_DWORD)result == 1 )\n          {\n            v18 = 0LL;\n          }\n          else\n          {\n            v18 = 0LL;\n            do\n            {\n              v19 = *(_QWORD *)(v110 + 8 * v16);\n              *(_WORD *)(v19 + 2 * v18) = 0;\n              memcpy((void *)(v19 + 2 * v18), v17, v5);\n              v20 = *(_QWORD *)(v110 + 8 * v16);\n              *(_WORD *)(v20 + 2 * v18 + 2) = 0;\n              memcpy((void *)(v20 + 2 * v18 + 2), (char *)v17 + v5, v5);\n              v18 += 2LL;\n              v17 = (_DWORD *)((char *)v17 + 2 * (signed int)v5);\n            }\n            while ( (unsigned int)v94 - (unsigned __int64)(v94 & 1) != v18 );\n          }\n          result = v94;\n          v17 = v100;\n          if ( v94 & 1 )\n          {\n            v21 = (_WORD *)(*(_QWORD *)(v110 + 8 * v16) + 2 * v18);\n            *v21 = 0;\n            memcpy(v21, (char *)a2 + v5 * (v18 + (signed int)v94 * v16), v5);\n            result = v94;\n          }\n        }\n        ++v16;\n        v17 = (_DWORD *)((char *)v17 + (signed int)v94 * (signed __int64)(signed int)v5);\n      }\n      while ( v16 != v96 );\n    }\n    return result;\n  }\n  v8 = v94;\n  if ( (_DWORD)v5 == 4 )\n  {\n    if ( v6 <= 0 )\nLABEL_64:\n      error((__int64)\"reading only from formats of 8, 16 or 32 bit allowed on big endian architecture\", 500);\n    v33 = (unsigned int)v94;\n    v34 = 4 * v94;\n    v97 = &a2[(unsigned int)v94];\n    v35 = (unsigned int)v94 & 0xFFFFFFFC;\n    v108 = v35;\n    v35 -= 4LL;\n    v106 = v35;\n    v35 >>= 2;\n    v101 = (unsigned int)v94 - 1LL;\n    v104 = ((_BYTE)v35 + 1) & 1;\n    v111 = v104 - 1 - v35;\n    v36 = 16;\n    v37 = 1;\n    v38 = 0;\n    v39 = _mm_load_si128((const __m128i *)&xmmword_4896E0);\n    v40 = 0LL;\n    while ( 1 )\n    {\n      if ( v8 <= 0 )\n        goto LABEL_63;\n      v42 = v94 * v40;\n      v43 = *(_QWORD *)(v110 + 8 * v40);\n      if ( (unsigned int)v94 >= 4 )\n      {\n        v44 = (signed int)v40 * v34;\n        if ( (unsigned __int64)v97 + v44 <= v43 || (unsigned __int64)src + v44 >= v43 + 2 * v33 )\n          break;\n      }\n      v45 = 0LL;\n      v46 = 0;\nLABEL_50:\n      if ( v33 & 1 )\n      {\n        *(_WORD *)(v43 + 2 * v45) = (src[v46 + v42] >> 8) & 0xFF00 | ((unsigned __int64)(unsigned int)src[v46 + v42] >> 24);\n        v47 = v45 | 1;\n        ++v46;\n        if ( v101 != v45 )\n        {\nLABEL_54:\n          v48 = v33 - v47;\n          v49 = v43 + 2 * v47 + 2;\n          v50 = &src[v46 + v37];\n          v51 = &src[v38 + v46];\n          v52 = 0LL;\n          do\n          {\n            *(_WORD *)(v49 + 2 * v52 - 2) = (v51[v52] >> 8) & 0xFF00 | ((unsigned __int64)(unsigned int)v51[v52] >> 24);\n            *(_WORD *)(v49 + 2 * v52) = (v50[v52] >> 8) & 0xFF00 | (v50[v52] >> 24);\n            v52 += 2LL;\n          }\n          while ( v48 != v52 );\n          goto LABEL_63;\n        }\n      }\n      else\n      {\n        v47 = v45;\n        if ( v101 != v45 )\n          goto LABEL_54;\n      }\nLABEL_63:\n      ++v40;\n      v36 += v34;\n      v8 = v94;\n      v37 += v94;\n      v38 += v94;\n      if ( v40 == v6 )\n        goto LABEL_64;\n    }\n    v53 = v33;\n    if ( v106 )\n    {\n      v54 = v111;\n      v55 = v36;\n      v41 = 0LL;\n      do\n      {\n        v56 = _mm_loadu_si128((const __m128i *)((char *)src + v55 - 16));\n        v57 = _mm_unpacklo_epi32(v56, (__m128i)0LL);\n        v58 = _mm_unpackhi_epi32(v56, (__m128i)0LL);\n        _mm_storel_epi64(\n          (__m128i *)(v43 + 2 * v41),\n          _mm_shuffle_epi32(\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(\n                (__m128i)_mm_shuffle_ps(\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v57, 0x18u), _mm_and_si128(_mm_srli_epi64(v57, 8u), v39)),\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v58, 0x18u), _mm_and_si128(_mm_srli_epi64(v58, 8u), v39)),\n                           136),\n                232),\n              232),\n            232));\n        v59 = _mm_loadu_si128((const __m128i *)((char *)src + v55));\n        v60 = _mm_unpacklo_epi32(v59, (__m128i)0LL);\n        v61 = _mm_unpackhi_epi32(v59, (__m128i)0LL);\n        _mm_storel_epi64(\n          (__m128i *)(v43 + 2 * v41 + 8),\n          _mm_shuffle_epi32(\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(\n                (__m128i)_mm_shuffle_ps(\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v60, 0x18u), _mm_and_si128(_mm_srli_epi64(v60, 8u), v39)),\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v61, 0x18u), _mm_and_si128(_mm_srli_epi64(v61, 8u), v39)),\n                           136),\n                232),\n              232),\n            232));\n        v41 += 8LL;\n        v55 += 32;\n        v54 += 2LL;\n      }\n      while ( v54 );\n      if ( v104 )\n        goto LABEL_61;\n    }\n    else\n    {\n      v41 = 0LL;\n      if ( v104 )\n      {\nLABEL_61:\n        v62 = _mm_loadu_si128((const __m128i *)&src[v42 + (signed int)v41]);\n        v63 = _mm_unpacklo_epi32(v62, (__m128i)0LL);\n        v64 = _mm_unpackhi_epi32(v62, (__m128i)0LL);\n        _mm_storel_epi64(\n          (__m128i *)(v43 + 2 * v41),\n          _mm_shuffle_epi32(\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(\n                (__m128i)_mm_shuffle_ps(\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v63, 0x18u), _mm_and_si128(_mm_srli_epi64(v63, 8u), v39)),\n                           (__m128)_mm_or_si128(_mm_srli_epi64(v64, 0x18u), _mm_and_si128(_mm_srli_epi64(v64, 8u), v39)),\n                           136),\n                232),\n              232),\n            232));\n        goto LABEL_62;\n      }\n    }\nLABEL_62:\n    v45 = v108;\n    v46 = v108;\n    v33 = v53;\n    if ( v108 == v53 )\n      goto LABEL_63;\n    goto LABEL_50;\n  }\n  if ( (_DWORD)v5 == 2 )\n  {\n    if ( v6 <= 0 )\n      return result;\n    v65 = (unsigned int)v6;\n    v66 = 2 * v94;\n    v102 = (char *)a2 + 2 * (unsigned int)v94;\n    v67 = (unsigned int)v94 & 0xFFFFFFF0;\n    v98 = v67;\n    v67 -= 16LL;\n    v109 = v67;\n    result = v67 >> 4;\n    v103 = (unsigned int)v94 - 1LL;\n    v107 = ((_BYTE)result + 1) & 1;\n    v105 = v107 - 1 - result;\n    v68 = 32;\n    v69 = 1;\n    v70 = 0;\n    v71 = 0LL;\n    while ( 1 )\n    {\n      if ( v8 <= 0 )\n        goto LABEL_87;\n      v73 = v94 * v71;\n      v74 = *(_QWORD *)(v110 + 8 * v71);\n      if ( (unsigned int)v94 >= 0x10 )\n      {\n        v75 = (signed int)v71 * v66;\n        if ( (unsigned __int64)&v102[v75] <= v74 || (unsigned __int64)src + v75 >= v74 + 2LL * (unsigned int)v94 )\n          break;\n      }\n      v76 = 0LL;\n      v77 = 0;\nLABEL_74:\n      if ( v94 & 1 )\n      {\n        *(_WORD *)(v74 + 2 * v76) = __ROL2__(*((_WORD *)src + v77 + v73), 8);\n        result = v76 | 1;\n        ++v77;\n        if ( v103 != v76 )\n        {\nLABEL_78:\n          v78 = (unsigned int)v94 - result;\n          result = v74 + 2 * result + 2;\n          v79 = (char *)src + 2 * (v77 + v69);\n          v80 = (char *)src + 2 * (v70 + v77);\n          v81 = 0LL;\n          do\n          {\n            *(_WORD *)(result + 2 * v81 - 2) = __ROL2__(*(_WORD *)&v80[2 * v81], 8);\n            *(_WORD *)(result + 2 * v81) = __ROL2__(*(_WORD *)&v79[2 * v81], 8);\n            v81 += 2LL;\n          }\n          while ( v78 != v81 );\n          goto LABEL_87;\n        }\n      }\n      else\n      {\n        result = v76;\n        if ( v103 != v76 )\n          goto LABEL_78;\n      }\nLABEL_87:\n      ++v71;\n      v68 += v66;\n      v8 = v94;\n      v69 += v94;\n      v70 += v94;\n      if ( v71 == v65 )\n        return result;\n    }\n    v82 = v65;\n    if ( v109 )\n    {\n      v83 = v105;\n      v84 = v68;\n      v72 = 0LL;\n      do\n      {\n        v85 = v84 - 32;\n        v86 = _mm_loadu_si128((const __m128i *)((char *)src + v85));\n        v87 = _mm_loadu_si128((const __m128i *)((char *)src + v85 + 16));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v86, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v86, (__m128i)0LL), 177), 177)));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72 + 16),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v87, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v87, (__m128i)0LL), 177), 177)));\n        v88 = _mm_loadu_si128((const __m128i *)((char *)src + v84));\n        v89 = _mm_loadu_si128((const __m128i *)((char *)src + v84 + 16));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72 + 32),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v88, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v88, (__m128i)0LL), 177), 177)));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72 + 48),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v89, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v89, (__m128i)0LL), 177), 177)));\n        v72 += 32LL;\n        v84 += 64;\n        v83 += 2LL;\n      }\n      while ( v83 );\n      if ( v107 )\n        goto LABEL_85;\n    }\n    else\n    {\n      v72 = 0LL;\n      if ( v107 )\n      {\nLABEL_85:\n        v90 = v73 + (signed int)v72;\n        v91 = _mm_loadu_si128((const __m128i *)((char *)src + 2 * v90));\n        v92 = _mm_loadu_si128((const __m128i *)((char *)src + 2 * v90 + 16));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v91, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v91, (__m128i)0LL), 177), 177)));\n        _mm_storeu_si128(\n          (__m128i *)(v74 + 2 * v72 + 16),\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpacklo_epi8(v92, (__m128i)0LL), 177), 177),\n            _mm_shufflehi_epi16(_mm_shufflelo_epi16(_mm_unpackhi_epi8(v92, (__m128i)0LL), 177), 177)));\n        goto LABEL_86;\n      }\n    }\nLABEL_86:\n    result = v98;\n    v76 = v98;\n    v77 = v98;\n    v65 = v82;\n    if ( v98 == (unsigned int)v94 )\n      goto LABEL_87;\n    goto LABEL_74;\n  }\n  if ( (_DWORD)v5 != 1 )\n    goto LABEL_64;\n  if ( v6 > 0 )\n  {\n    result = (signed int)v94;\n    v9 = (unsigned int)v6;\n    v10 = (unsigned int)v94 & 0xFFFFFFF0;\n    v11 = (unsigned __int64)(v10 - 16) >> 4;\n    v12 = ((_BYTE)v11 + 1) & 1;\n    v13 = src;\n    v14 = (signed __int64)(src + 6);\n    v99 = v12;\n    v95 = v12 - 1 - v11;\n    v15 = 0LL;\n    do\n    {\n      if ( v8 <= 0 )\n        goto LABEL_39;\n      v23 = *(_QWORD *)(v110 + 8 * v15);\n      if ( (unsigned int)v8 < 0x10\n        || (v24 = (signed int)v94 * v15, (unsigned __int64)src + v24 + (unsigned int)v94 > v23)\n        && (unsigned __int64)src + v24 < v23 + 2LL * (unsigned int)v94 )\n      {\n        v25 = 0LL;\nLABEL_27:\n        v26 = (unsigned int)v94 - 1LL - v25;\n        if ( v94 & 3 )\n        {\n          v27 = -(v94 & 3);\n          do\n          {\n            *(_WORD *)(v23 + 2 * v25) = *((unsigned __int8 *)v13 + v25);\n            ++v25;\n            ++v27;\n          }\n          while ( v27 );\n        }\n        v8 = v94;\n        if ( v26 >= 3 )\n        {\n          do\n          {\n            *(_WORD *)(v23 + 2 * v25) = *((unsigned __int8 *)v13 + v25);\n            *(_WORD *)(v23 + 2 * v25 + 2) = *((unsigned __int8 *)v13 + v25 + 1);\n            *(_WORD *)(v23 + 2 * v25 + 4) = *((unsigned __int8 *)v13 + v25 + 2);\n            *(_WORD *)(v23 + 2 * v25 + 6) = *((unsigned __int8 *)v13 + v25 + 3);\n            v25 += 4LL;\n          }\n          while ( (unsigned int)v94 != v25 );\n        }\n        goto LABEL_39;\n      }\n      if ( v10 == 16 )\n      {\n        v22 = 0LL;\n        if ( v99 )\n          goto LABEL_37;\n      }\n      else\n      {\n        v28 = v95;\n        v22 = 0LL;\n        do\n        {\n          v29 = _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)(v14 + v22 - 16)), (__m128i)0LL);\n          _mm_storeu_si128(\n            (__m128i *)(v23 + 2 * v22),\n            _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)(v14 + v22 - 24)), (__m128i)0LL));\n          _mm_storeu_si128((__m128i *)(v23 + 2 * v22 + 16), v29);\n          v30 = _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)(v14 + v22)), (__m128i)0LL);\n          _mm_storeu_si128(\n            (__m128i *)(v23 + 2 * v22 + 32),\n            _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)(v14 + v22 - 8)), (__m128i)0LL));\n          _mm_storeu_si128((__m128i *)(v23 + 2 * v22 + 48), v30);\n          v22 += 32LL;\n          v28 += 2LL;\n        }\n        while ( v28 );\n        if ( v99 )\n        {\nLABEL_37:\n          v31 = v22 + v24;\n          v32 = _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)((char *)src + v31 + 8)), (__m128i)0LL);\n          _mm_storeu_si128(\n            (__m128i *)(v23 + 2 * v22),\n            _mm_unpacklo_epi8(_mm_loadl_epi64((const __m128i *)((char *)src + v31)), (__m128i)0LL));\n          _mm_storeu_si128((__m128i *)(v23 + 2 * v22 + 16), v32);\n          goto LABEL_38;\n        }\n      }\nLABEL_38:\n      v25 = (unsigned int)v94 & 0xFFFFFFF0;\n      v8 = v94;\n      if ( v10 != (unsigned int)v94 )\n        goto LABEL_27;\nLABEL_39:\n      ++v15;\n      v14 += (signed int)v94;\n      v13 = (_DWORD *)((char *)v13 + (signed int)v94);\n    }\n    while ( v15 != v9 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x422d80L", 
            "funcEndAddr": "0x423799L", 
            "funcName": "sub_422D80"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4237A0()\n{\n  _DWORD *v0; // rsi\n  char *v1; // rcx\n  _DWORD *v2; // r10\n  int v3; // er8\n  int v4; // ebx\n  int v5; // er9\n  int v6; // er11\n  int v7; // eax\n  __int64 v8; // rdi\n  int v9; // edx\n  int v10; // edi\n  int v11; // er11\n  int v12; // eax\n  __int64 v13; // rdx\n  int v14; // ebp\n  int v15; // esi\n  int v16; // edx\n  int v17; // esi\n  int v18; // esi\n  __int64 v19; // rdx\n  int v20; // ebp\n  int v21; // edx\n  double v22; // xmm0_8\n  int v23; // esi\n  double v24; // xmm0_8\n  __int64 v25; // rdx\n  signed int v26; // ebx\n  int v27; // er11\n  int v28; // eax\n  signed int v29; // eax\n  int v30; // edx\n  __int64 result; // rax\n  int v32; // eax\n  bool v33; // dl\n  int v34; // eax\n  int v35; // eax\n  _DWORD *v36; // rsi\n  int v37; // eax\n  _DWORD *v38; // rbp\n  signed int v39; // edx\n\n  v0 = qword_4F9EE0;\n  qword_4F9ED8 = (__int64)qword_4F9EE0;\n  v1 = (char *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 3) = 0;\n  *((_DWORD *)v1 + 5) = 0;\n  *((_DWORD *)off_49F6D8 + 6) = 0;\n  v2 = dest;\n  v3 = 2 * *((_DWORD *)dest + 5);\n  *((_DWORD *)dest + 5) = v3;\n  v4 = v2[309];\n  v5 = 2 * v4;\n  v2[309] = 2 * v4;\n  v6 = *(_DWORD *)v1;\n  v7 = *(_DWORD *)v1 / 2;\n  *(_DWORD *)v1 = v7;\n  LODWORD(v8) = *((_DWORD *)v1 + 18094) / 2;\n  *((_DWORD *)v1 + 18094) = v8;\n  *((_DWORD *)v1 + 24) = 0;\n  *(_OWORD *)(v1 + 152) = 0LL;\n  *(_OWORD *)(v1 + 136) = 0LL;\n  v9 = v3 + 2;\n  if ( !*((_DWORD *)v1 + 17977) )\n  {\n    v15 = *((_DWORD *)v1 + 17949);\n    v16 = v15 + v7 * v9;\n    *((_DWORD *)v1 + 17948) = v16;\n    if ( !v15 )\n    {\n      *((_DWORD *)v1 + 17972) = *((_DWORD *)v1 + 17971);\n      *((_DWORD *)v1 + 17971) = v16;\n    }\n    v17 = v2[610];\n    if ( v17 && v7 + 1 == v2[2] )\n    {\n      *((_DWORD *)v1 + 17948) = v17;\n      v16 = v17;\n    }\n    if ( v4 && (unsigned int)(v6 + 1) >= 3 )\n      dword_4FA114 = v16;\n    if ( !v2[809] )\n    {\n      v32 = *((_DWORD *)v1 + 6);\n      v33 = v2[613] <= 0 || v16 < v2[613];\n      if ( v32 == 2 )\n      {\n        if ( v33 )\n          v34 = v2[3];\n        else\n          v34 = v2[614];\n        *((_DWORD *)v1 + 10) = v34;\n      }\n      else\n      {\n        v38 = v2 + 611;\n        if ( v33 )\n          v38 = v2 + 4;\n        *((_DWORD *)v1 + 10) = *v38;\n        if ( v32 == 3 )\n        {\n          *((_DWORD *)v1 + 10) = v2[319];\n          *((_DWORD *)v1 + 11) = v2[320];\n        }\n      }\n    }\n    *((_DWORD *)v1 + 23) = *((_DWORD *)v1 + 22);\n    v18 = v2[19];\n    if ( v18 > 0 )\n      *((_DWORD *)v1 + 22) = *(_DWORD *)v1 / v18 % (*((_DWORD *)v1 + 13) / 16);\n    goto LABEL_36;\n  }\n  *((_DWORD *)v1 + 17976) = v9;\n  v10 = *((_DWORD *)v1 + 17949);\n  v11 = v10 + v9 * (v7 - 1);\n  v12 = v10 + v9 * v7;\n  if ( v10 )\n  {\n    *v0 = v12 - 1;\n    v0[1] = v11;\n    LODWORD(v8) = *((_DWORD *)v1 + 18094);\n    if ( (signed int)v8 > 0 )\n    {\n      v13 = 0LL;\n      do\n      {\n        v14 = v0[2 * v13 + 1];\n        v0[2 * v13 + 2] = v0[2 * v13] - *((_DWORD *)v1 + 17976);\n        v0[2 * v13 + 3] = v14 - *((_DWORD *)v1 + 17976);\n        v8 = *((signed int *)v1 + 18094);\n        ++v13;\n      }\n      while ( v13 < v8 );\n    }\n  }\n  else\n  {\n    *v0 = v11 + 1;\n    v0[1] = v11;\n    LODWORD(v8) = *((_DWORD *)v1 + 18094);\n    if ( (signed int)v8 > 0 )\n    {\n      v19 = 0LL;\n      do\n      {\n        v20 = v0[2 * v19 + 1];\n        v0[2 * v19 + 2] = v0[2 * v19] - *((_DWORD *)v1 + 17976);\n        v0[2 * v19 + 3] = v20 - *((_DWORD *)v1 + 17976);\n        v8 = *((signed int *)v1 + 18094);\n        ++v19;\n      }\n      while ( v19 < v8 );\n    }\n  }\n  v21 = v2[610];\n  if ( v21 && *(_DWORD *)v1 + 1 == v2[2] )\n  {\n    *((_DWORD *)v1 + 17976) = v21 - v11;\n    v12 = v21;\n  }\n  v3 = v2[5];\n  v5 = v2[309];\n  v22 = (double)(v3 + 1) / ((double)v5 + 1.0);\n  *((double *)v1 + 8987) = v22;\n  v23 = v2[330];\n  if ( v23 == 3 )\n  {\n    *((_QWORD *)v1 + 8987) = 4607182418800017408LL;\n    v24 = 2.0;\n  }\n  else\n  {\n    v24 = v22 + 1.0;\n    if ( !v23 )\n    {\n      LODWORD(v25) = *((_DWORD *)v1 + 17977);\n      v26 = (signed int)(v24 * (double)(signed int)v25);\n      goto LABEL_28;\n    }\n  }\n  v25 = *((signed int *)v1 + 17977);\n  v26 = (signed int)((double)(*((_DWORD *)qword_4F9E70 + 6 * v25 - 5) + 1) * v24);\nLABEL_28:\n  v27 = v26 + v11;\n  *((_DWORD *)v1 + 17948) = v27;\n  if ( v27 >= v12 )\n  {\n    v28 = v12 - 1;\n    *((_DWORD *)v1 + 17948) = v28;\n    v27 = v28;\n  }\n  if ( v2[809] )\n  {\n    if ( v23 != 3 )\n      goto LABEL_36;\n    goto LABEL_34;\n  }\n  if ( v23 == 3 )\n  {\nLABEL_34:\n    v29 = *((_DWORD *)qword_4F9E70 + 6 * ((signed int)v25 - 1) + 3);\nLABEL_35:\n    *((_DWORD *)v1 + 10) = v29;\n    goto LABEL_36;\n  }\n  v35 = v2[613];\n  v36 = v2 + 612;\n  if ( v35 <= 0 )\n    v36 = v2 + 310;\n  if ( v27 < v35 )\n    v36 = v2 + 310;\n  *((_DWORD *)v1 + 10) = *v36;\n  if ( *((_DWORD *)v1 + 18124) )\n  {\n    if ( v27 < v35 || v35 <= 0 )\n      v37 = v2[310] + v2[311];\n    else\n      v37 = v2[612] + v2[615];\n    v39 = 51;\n    if ( v37 < 52 )\n      v39 = v37;\n    v29 = 0;\n    if ( v39 >= 0 )\n      v29 = v39;\n    goto LABEL_35;\n  }\nLABEL_36:\n  v2[5] = v3 / 2;\n  v2[309] = v5 / 2;\n  *((_DWORD *)v1 + 18094) = 2 * v8;\n  v30 = *((_DWORD *)v1 + 15);\n  *(_DWORD *)v1 = *((_DWORD *)v1 + 17949) + 2 * *(_DWORD *)v1;\n  result = *((_DWORD *)v1 + 13) * v30 / 256;\n  *((_DWORD *)v1 + 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4237a0L", 
            "funcEndAddr": "0x423beeL", 
            "funcName": "sub_4237A0"
        }, 
        {
            "decompiledFuncCode": "float *sub_423BF0()\n{\n  __int64 v0; // r10\n  int v1; // er11\n  __int64 v2; // rsi\n  __int64 v3; // r14\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // r8\n  int v8; // edx\n  __int64 v9; // rdx\n  int v10; // ecx\n  int v11; // edi\n  int v12; // edx\n  int v13; // eax\n  __int64 v14; // r15\n  __int64 v15; // r12\n  __int64 v16; // rax\n  __int64 v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // r11\n  __int64 v20; // rdx\n  __int64 v21; // rbx\n  __int64 v22; // rcx\n  __int64 v23; // r8\n  int v24; // edi\n  __int64 v25; // rdi\n  int v26; // ebp\n  int v27; // esi\n  int v28; // ecx\n  int v29; // ecx\n  int v30; // edx\n  __int64 v31; // r8\n  __int64 v32; // rdx\n  signed int v33; // edi\n  signed int v34; // esi\n  __int64 v35; // r10\n  __int64 v36; // r12\n  __int64 v37; // r9\n  __int64 v38; // rbp\n  __int64 v39; // r11\n  int v40; // ebx\n  int v41; // eax\n  int v42; // ecx\n  __int64 v43; // r9\n  __int64 v44; // r8\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r12\n  __int64 *v49; // rbp\n  __int64 v50; // r13\n  __int64 v51; // r11\n  __int64 v52; // rbp\n  int v53; // ebx\n  int v54; // ebx\n  float *result; // rax\n  __int64 v56; // [rsp+18h] [rbp-40h]\n  __int64 v57; // [rsp+20h] [rbp-38h]\n\n  if ( *((_DWORD *)off_49F6D0 + 7) )\n  {\n    v0 = *((signed int *)dest + 16);\n    if ( v0 <= 0 )\n    {\n      LODWORD(v3) = 0;\n    }\n    else\n    {\n      v1 = *((_DWORD *)dest + 17);\n      v2 = 0LL;\n      v3 = 0LL;\n      do\n      {\n        if ( v1 > 0 )\n        {\n          v4 = *((_QWORD *)off_49F6D0 + 8972);\n          v5 = 0LL;\n          if ( v1 != 1 )\n          {\n            do\n            {\n              v6 = *(_QWORD *)(qword_4F9EB0 + 8 * v5 + 8);\n              v7 = *((_QWORD *)qword_4F9EA8 + v5 + 1);\n              v8 = *(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v5) + 2 * v2)\n                 - *(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v5) + 2 * v2);\n              if ( v8 < 1 )\n                v8 = *(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v5) + 2 * v2)\n                   - *(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v5) + 2 * v2);\n              v9 = v3 + *(signed int *)(v4 + 4LL * v8);\n              v10 = *(unsigned __int16 *)(v6 + 2 * v2) - *(unsigned __int16 *)(v7 + 2 * v2);\n              v11 = *(unsigned __int16 *)(v7 + 2 * v2) - *(unsigned __int16 *)(v6 + 2 * v2);\n              if ( v11 < 1 )\n                v11 = v10;\n              v3 = v9 + *(signed int *)(v4 + 4LL * v11);\n              v5 += 2LL;\n            }\n            while ( *((signed int *)dest + 17) - (unsigned __int64)(*((_DWORD *)dest + 17) & 1) != v5 );\n          }\n          if ( *((_DWORD *)dest + 17) & 1 )\n          {\n            v12 = *(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v5) + 2 * v2)\n                - *(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v5) + 2 * v2);\n            v13 = *(unsigned __int16 *)(*((_QWORD *)qword_4F9EA8 + v5) + 2 * v2)\n                - *(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * v5) + 2 * v2);\n            if ( v13 < 1 )\n              v13 = v12;\n            v3 += *(signed int *)(v4 + 4LL * v13);\n          }\n        }\n        ++v2;\n      }\n      while ( v2 < v0 );\n    }\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      v57 = *((signed int *)dest + 827);\n      if ( v57 > 0 )\n      {\n        v31 = *((signed int *)dest + 826);\n        v32 = 0LL;\n        v33 = 0;\n        v34 = 0;\n        do\n        {\n          if ( (signed int)v31 > 0 )\n          {\n            v35 = *((_QWORD *)off_49F6D0 + 8972);\n            v36 = *(_QWORD *)(qword_4F9E88 + 8);\n            v37 = *((_QWORD *)qword_4F9E80 + 1);\n            v38 = 0LL;\n            do\n            {\n              v39 = *(_QWORD *)(*(_QWORD *)qword_4F9E88 + 8 * v38);\n              v40 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E80 + 8 * v38) + 2 * v32);\n              v41 = v40 - *(unsigned __int16 *)(v39 + 2 * v32);\n              if ( v40 - *(unsigned __int16 *)(v39 + 2 * v32) < 1 )\n                v41 = *(unsigned __int16 *)(v39 + 2 * v32) - v40;\n              v34 += *(_DWORD *)(v35 + 4LL * v41);\n              v42 = *(unsigned __int16 *)(*(_QWORD *)(v37 + 8 * v38) + 2 * v32)\n                  - *(unsigned __int16 *)(*(_QWORD *)(v36 + 8 * v38) + 2 * v32);\n              if ( v42 < 1 )\n                v42 = *(unsigned __int16 *)(*(_QWORD *)(v36 + 8 * v38) + 2 * v32)\n                    - *(unsigned __int16 *)(*(_QWORD *)(v37 + 8 * v38) + 2 * v32);\n              v33 += *(_DWORD *)(v35 + 4LL * v42);\n              ++v38;\n            }\n            while ( v38 < v31 );\n          }\n          ++v32;\n        }\n        while ( v32 < v57 );\n        goto LABEL_59;\n      }\n    }\nLABEL_58:\n    v34 = 0;\n    v33 = 0;\n    goto LABEL_59;\n  }\n  qword_4F9EB0 = (__int64)qword_4F9EC0;\n  qword_4F9E88 = (__int64)qword_4F9E98;\n  v14 = *((signed int *)dest + 16);\n  if ( v14 <= 0 )\n  {\n    LODWORD(v3) = 0;\n  }\n  else\n  {\n    v15 = *((signed int *)dest + 17);\n    v16 = *((_DWORD *)dest + 17) & 1;\n    v56 = v16;\n    v17 = v15 - v16;\n    v18 = 0LL;\n    v3 = 0LL;\n    do\n    {\n      if ( (signed int)v15 > 0 )\n      {\n        v19 = *((_QWORD *)off_49F6D0 + 8972);\n        v20 = *(_QWORD *)(qword_4F9E30 + 6424);\n        v21 = 0LL;\n        if ( (_DWORD)v15 != 1 )\n        {\n          do\n          {\n            v22 = *((_QWORD *)qword_4F9EC0 + v21 + 1);\n            v23 = *(_QWORD *)(v20 + 8 * v21);\n            v24 = *(unsigned __int16 *)(v23 + 2 * v18)\n                - *(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v21) + 2 * v18);\n            if ( v24 < 1 )\n              v24 = *(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v21) + 2 * v18)\n                  - *(unsigned __int16 *)(v23 + 2 * v18);\n            v25 = v3 + *(signed int *)(v19 + 4LL * v24);\n            v26 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * v21 + 8) + 2 * v18);\n            v27 = *(unsigned __int16 *)(v22 + 2 * v18) - v26;\n            v28 = v26 - *(unsigned __int16 *)(v22 + 2 * v18);\n            if ( v28 < 1 )\n              v28 = v27;\n            v3 = v25 + *(signed int *)(v19 + 4LL * v28);\n            v21 += 2LL;\n          }\n          while ( v17 != v21 );\n        }\n        if ( v56 )\n        {\n          v29 = *(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v21) + 2 * v18)\n              - *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * v21) + 2 * v18);\n          v30 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * v21) + 2 * v18)\n              - *(unsigned __int16 *)(*((_QWORD *)qword_4F9EC0 + v21) + 2 * v18);\n          if ( v30 < 1 )\n            v30 = v29;\n          v3 += *(signed int *)(v19 + 4LL * v30);\n        }\n      }\n      ++v18;\n    }\n    while ( v18 < v14 );\n  }\n  if ( !*((_DWORD *)off_49F6D0 + 18175) )\n    goto LABEL_58;\n  v43 = *((signed int *)dest + 827);\n  if ( v43 <= 0 )\n    goto LABEL_58;\n  v44 = *((signed int *)dest + 826);\n  v45 = 0LL;\n  v33 = 0;\n  v34 = 0;\n  do\n  {\n    if ( (signed int)v44 > 0 )\n    {\n      v46 = *((_QWORD *)off_49F6D0 + 8972);\n      v47 = *(_QWORD *)qword_4F9E98;\n      v48 = *((_QWORD *)qword_4F9E98 + 1);\n      v49 = *(__int64 **)(qword_4F9E30 + 6464);\n      v50 = *v49;\n      v51 = v49[1];\n      v52 = 0LL;\n      do\n      {\n        v53 = *(unsigned __int16 *)(*(_QWORD *)(v50 + 8 * v52) + 2 * v45)\n            - *(unsigned __int16 *)(*(_QWORD *)(v47 + 8 * v52) + 2 * v45);\n        if ( v53 < 1 )\n          v53 = *(unsigned __int16 *)(*(_QWORD *)(v47 + 8 * v52) + 2 * v45)\n              - *(unsigned __int16 *)(*(_QWORD *)(v50 + 8 * v52) + 2 * v45);\n        v34 += *(_DWORD *)(v46 + 4LL * v53);\n        v54 = *(unsigned __int16 *)(*(_QWORD *)(v51 + 8 * v52) + 2 * v45)\n            - *(unsigned __int16 *)(*(_QWORD *)(v48 + 8 * v52) + 2 * v45);\n        if ( v54 < 1 )\n          v54 = *(unsigned __int16 *)(*(_QWORD *)(v48 + 8 * v52) + 2 * v45)\n              - *(unsigned __int16 *)(*(_QWORD *)(v51 + 8 * v52) + 2 * v45);\n        v33 += *(_DWORD *)(v46 + 4LL * v54);\n        ++v52;\n      }\n      while ( v52 < v44 );\n    }\n    ++v45;\n  }\n  while ( v45 < v43 );\nLABEL_59:\n  result = (float *)off_49F6E0;\n  *(float *)off_49F6E0 = (float)(signed int)v3;\n  result[1] = (float)v34;\n  result[2] = (float)v33;\n  return result;\n}\n", 
            "funcStartAddr": "0x423bf0L", 
            "funcEndAddr": "0x424025L", 
            "funcName": "sub_423BF0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_424030(int a1, __int64 a2, int a3, double a4)\n{\n  int v4; // er14\n  void *result; // rax\n  int v6; // ebx\n  double v7; // xmm0_8\n  int v8; // ecx\n  __int64 v9; // rdx\n\n  v4 = a3;\n  sub_483450(1);\n  dword_49FB50 = a2 * a1;\n  dword_49FB54 = v4;\n  qword_49FB58 = malloc(4LL * (signed int)a2 * a1 + 4);\n  if ( !qword_49FB58 )\n    sub_43EF40(0LL, (__int64)\"RandomIntraInit: RefreshPattern\");\n  result = malloc(4LL * v4 + 4);\n  qword_49FB60 = result;\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"RandomIntraInit: IntraMBs\");\n  if ( dword_49FB50 > 0 )\n  {\n    memset(qword_49FB58, 255, 4LL * (unsigned int)dword_49FB50);\n    v6 = 0;\n    do\n    {\n      do\n      {\n        v7 = sub_483460();\n        v8 = dword_49FB50;\n        result = qword_49FB58;\n        v9 = (signed int)(v7 * 2147483647.0) % dword_49FB50;\n      }\n      while ( *((_DWORD *)qword_49FB58 + v9) != -1 );\n      *((_DWORD *)qword_49FB58 + v9) = v6++;\n    }\n    while ( v6 < v8 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x424030L", 
            "funcEndAddr": "0x42410dL", 
            "funcName": "sub_424030"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_424110(int a1)\n{\n  __int64 v1; // rdx\n\n  if ( dword_49FB54 <= 0LL )\n    return 0LL;\n  v1 = 0LL;\n  while ( *((_DWORD *)qword_49FB60 + v1) != a1 )\n  {\n    if ( ++v1 >= dword_49FB54 )\n      return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x424110L", 
            "funcEndAddr": "0x42414aL", 
            "funcName": "sub_424110"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_424150()\n{\n  int v0; // er8\n  _DWORD *v1; // r11\n  int v2; // ecx\n  _DWORD *v3; // rdi\n  __int64 v4; // r9\n  __int64 v5; // rsi\n  __int64 v6; // r10\n  __int64 result; // rax\n\n  v0 = dword_49FB54 + dword_49FB68;\n  dword_49FB68 += dword_49FB54;\n  if ( dword_49FB54 > 0 )\n  {\n    v1 = qword_49FB58;\n    v2 = dword_49FB50;\n    v3 = qword_49FB60;\n    v4 = dword_49FB54 & 1;\n    if ( dword_49FB54 == 1 )\n    {\n      v5 = 0LL;\n      if ( !(dword_49FB54 & 1) )\n        return result;\nLABEL_8:\n      result = (unsigned int)v1[v0 % v2];\n      v3[v5] = result;\n      return result;\n    }\n    v6 = (unsigned int)dword_49FB54 - v4;\n    v5 = 0LL;\n    do\n    {\n      v3[v5] = v1[(v0 + (signed int)v5) % v2];\n      result = (unsigned int)v1[(v0 + (signed int)v5 + 1) % v2];\n      v3[v5 + 1] = result;\n      v5 += 2LL;\n    }\n    while ( v6 != v5 );\n    v0 += v5;\n    if ( v4 )\n      goto LABEL_8;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x424150L", 
            "funcEndAddr": "0x4241e7L", 
            "funcName": "sub_424150"
        }, 
        {
            "decompiledFuncCode": "void sub_4241F0()\n{\n  free(qword_49FB58);\n  free(qword_49FB60);\n}\n", 
            "funcStartAddr": "0x4241f0L", 
            "funcEndAddr": "0x42420aL", 
            "funcName": "sub_4241F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_424210(unsigned __int64 a1, __int64 a2)\n{\n  FILE *v2; // r13\n  unsigned __int64 v3; // rbx\n  __int64 v5; // [rsp+8h] [rbp-30h]\n\n  v2 = fopen((const char *)dest + 2480, \"r\");\n  if ( v2 )\n  {\n    if ( !a1 )\n    {\nLABEL_6:\n      fclose(v2);\n      return 1LL;\n    }\n    v3 = 0LL;\n    while ( (unsigned int)__isoc99_fscanf(v2, \"%ld\", &v5) == 1 )\n    {\n      *(_QWORD *)(a2 + 8 * v3++) = v5;\n      if ( v3 >= a1 )\n        goto LABEL_6;\n    }\n    puts(\" Leaky BucketRateFile does not have valid entries;\\n using rate calculated from avg. rate \");\n    fclose(v2);\n  }\n  else\n  {\n    puts(\" LeakyBucketRate File does not exist; using rate calculated from avg. rate \");\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x424210L", 
            "funcEndAddr": "0x4242b6L", 
            "funcName": "sub_424210"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_424310(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  FILE *v5; // r13\n  __int64 v6; // rbp\n  int v7; // ebx\n  int v8; // ebx\n  int v9; // ebx\n  int v10; // edi\n  __int64 v11; // rbx\n  __int64 v13; // [rsp+0h] [rbp-48h]\n  __int64 v14; // [rsp+10h] [rbp-38h]\n\n  v14 = a4;\n  v4 = a3;\n  v5 = fopen((const char *)dest + 2680, \"wb\");\n  if ( !v5 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s  \\n\", (char *)dest + 2680);\n    error((__int64)byte_4F8250, 1);\n  }\n  fputc((unsigned int)a1 >> 24, v5);\n  fputc(BYTE2(a1), v5);\n  fputc(BYTE1(a1), v5);\n  fputc((unsigned __int8)a1, v5);\n  printf(\" Number Leaky Buckets: %ld \\n     Rmin     Bmin     Fmin \\n\", a1);\n  if ( a1 )\n  {\n    v6 = 0LL;\n    v13 = a1;\n    do\n    {\n      v7 = *(_DWORD *)(a2 + 8 * v6);\n      fputc(*(_DWORD *)(a2 + 8 * v6) >> 24, v5);\n      fputc(BYTE2(v7), v5);\n      fputc(BYTE1(v7), v5);\n      fputc((unsigned __int8)v7, v5);\n      v8 = *(_DWORD *)(v4 + 8 * v6);\n      fputc(*(_DWORD *)(v4 + 8 * v6) >> 24, v5);\n      fputc(BYTE2(v8), v5);\n      fputc(BYTE1(v8), v5);\n      fputc((unsigned __int8)v8, v5);\n      v9 = *(_DWORD *)(v14 + 8 * v6);\n      fputc(*(_DWORD *)(v14 + 8 * v6) >> 24, v5);\n      fputc(BYTE2(v9), v5);\n      fputc(BYTE1(v9), v5);\n      v10 = (unsigned __int8)v9;\n      v11 = v13;\n      fputc(v10, v5);\n      printf(\" %8ld %8ld %8ld \\n\", *(_QWORD *)(a2 + 8 * v6), *(_QWORD *)(v4 + 8 * v6), *(_QWORD *)(v14 + 8 * v6), v13);\n      ++v6;\n    }\n    while ( v11 != v6 );\n  }\n  return fclose(v5);\n}\n", 
            "funcStartAddr": "0x424310L", 
            "funcEndAddr": "0x4244caL", 
            "funcName": "sub_424310"
        }, 
        {
            "decompiledFuncCode": "void sub_424580()\n{\n  size_t v0; // r14\n  _QWORD *v1; // r13\n  unsigned __int64 v2; // rdx\n  unsigned __int64 v3; // rcx\n  float v4; // xmm0_4\n  float v5; // xmm1_4\n  unsigned __int64 v6; // rsi\n  __int64 v7; // rdx\n  __m128i v8; // xmm0\n  __int64 v9; // rsi\n  __m128i v10; // xmm1\n  signed __int64 v11; // rdi\n  __m128i *v12; // rsi\n  __int64 v13; // rdx\n  __m128i v14; // xmm0\n  float v15; // xmm0_4\n  unsigned __int64 v16; // r15\n  float v17; // xmm0_4\n  float *v18; // rcx\n  signed int *v19; // rsi\n  size_t v20; // rdi\n  __int64 v21; // rax\n  float v22; // xmm2_4\n  float v23; // xmm2_4\n  unsigned __int64 v24; // rax\n  unsigned __int64 v25; // rax\n  signed __int64 v26; // rax\n  float v27; // xmm3_4\n  signed __int64 v28; // rax\n  unsigned __int64 v29; // rsi\n  unsigned __int64 v30; // rdi\n  signed __int64 v31; // rbx\n  unsigned __int64 v32; // rbp\n  unsigned __int64 v33; // rdx\n  size_t v34; // rbp\n  unsigned __int64 *v35; // rbx\n  unsigned __int64 v36; // rdx\n  unsigned __int64 v37; // rcx\n  unsigned __int64 v38; // rdx\n  signed __int64 v39; // r15\n  float v40; // xmm0_4\n  __int64 v41; // r10\n  __int64 v42; // r11\n  __int64 v43; // rdx\n  size_t v44; // r9\n  signed __int64 v45; // rdi\n  unsigned __int64 v46; // rax\n  float v47; // xmm1_4\n  __int64 v48; // rsi\n  signed __int64 v49; // rbp\n  signed __int64 v50; // rax\n  unsigned __int64 v51; // rbx\n  signed __int64 v52; // rbp\n  signed __int64 v53; // rbp\n  signed __int64 v54; // rcx\n  signed __int64 v55; // rcx\n  signed __int64 v56; // rcx\n  signed __int64 v57; // rbp\n  bool v58; // sf\n  unsigned __int8 v59; // of\n  signed __int64 v60; // rbx\n  __int64 v61; // rbp\n  unsigned __int64 v62; // r12\n  __int64 v63; // rcx\n  __int64 v64; // rcx\n  __int64 v65; // r14\n  bool v66; // cf\n  _QWORD *v67; // [rsp+0h] [rbp-58h]\n  _QWORD *ptr; // [rsp+8h] [rbp-50h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  signed __int64 v70; // [rsp+18h] [rbp-40h]\n  size_t v71; // [rsp+20h] [rbp-38h]\n\n  fwrite(\"-------------------------------------------------------------------------------\\n\", 0x50uLL, 1uLL, stdout);\n  printf(\" Total Frames:  %ld (%d) \\n\", qword_49FB70, *((unsigned int *)dest + 2));\n  v0 = *((signed int *)dest + 619);\n  v1 = calloc(v0, 8uLL);\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"init_buffer: Rmin\");\n  ptr = calloc(v0, 8uLL);\n  if ( !ptr )\n    sub_43EF40(0LL, (__int64)\"init_buffer: Bmin\");\n  v67 = calloc(v0, 8uLL);\n  if ( !v67 )\n    sub_43EF40(0LL, (__int64)\"init_buffer: Fmin\");\n  if ( !qword_49FB70 )\n  {\n    v4 = 0.0;\n    v5 = 0.0;\n    goto LABEL_26;\n  }\n  if ( (unsigned __int64)qword_49FB70 >= 4 )\n  {\n    v3 = qword_49FB70 & 0xFFFFFFFFFFFFFFFCLL;\n    v6 = ((qword_49FB70 & 0xFFFFFFFFFFFFFFFCLL) - 4) >> 2;\n    v7 = ((_BYTE)v6 + 1) & 3;\n    if ( (qword_49FB70 & 0xFFFFFFFFFFFFFFFCLL) - 4 >= 0xC )\n    {\n      v11 = v7 - 1 - v6;\n      v8 = 0LL;\n      v9 = 0LL;\n      v10 = 0LL;\n      do\n      {\n        v8 = _mm_add_epi64(\n               _mm_add_epi64(\n                 _mm_add_epi64(_mm_add_epi64(v8, (__m128i)xmmword_4A05C0[v9]), (__m128i)xmmword_4A05E0[v9]),\n                 (__m128i)xmmword_4A0600[v9]),\n               (__m128i)xmmword_4A0620[v9]);\n        v10 = _mm_add_epi64(\n                _mm_add_epi64(\n                  _mm_add_epi64(_mm_add_epi64(v10, (__m128i)xmmword_4A05D0[v9]), (__m128i)xmmword_4A05F0[v9]),\n                  (__m128i)xmmword_4A0610[v9]),\n                (__m128i)xmmword_4A0630[v9]);\n        v9 += 8LL;\n        v11 += 4LL;\n      }\n      while ( v11 );\n      if ( !v7 )\n      {\nLABEL_19:\n        v14 = _mm_add_epi64(v8, v10);\n        v2 = (unsigned __int128)_mm_add_epi64(_mm_shuffle_epi32(v14, 78), v14);\n        if ( qword_49FB70 == v3 )\n          goto LABEL_21;\n        goto LABEL_20;\n      }\n    }\n    else\n    {\n      v8 = 0LL;\n      v9 = 0LL;\n      v10 = 0LL;\n      if ( !v7 )\n        goto LABEL_19;\n    }\n    v12 = (__m128i *)&xmmword_4A05D0[v9];\n    v13 = -v7;\n    do\n    {\n      v8 = _mm_add_epi64(v8, v12[-1]);\n      v10 = _mm_add_epi64(v10, *v12);\n      v12 += 2;\n      ++v13;\n    }\n    while ( v13 );\n    goto LABEL_19;\n  }\n  v2 = 0LL;\n  v3 = 0LL;\n  do\nLABEL_20:\n    v2 += *((_QWORD *)xmmword_4A05C0 + v3++);\n  while ( v3 < qword_49FB70 );\nLABEL_21:\n  if ( (v2 & 0x8000000000000000LL) != 0LL )\n  {\n    v4 = (float)(signed int)((v2 >> 1) | v2 & 1) + (float)(signed int)((v2 >> 1) | v2 & 1);\n    if ( qword_49FB70 < 0 )\n      goto LABEL_23;\n  }\n  else\n  {\n    v4 = (float)(signed int)v2;\n    if ( qword_49FB70 < 0 )\n    {\nLABEL_23:\n      v5 = (float)(signed int)(((unsigned __int64)qword_49FB70 >> 1) | qword_49FB70 & 1)\n         + (float)(signed int)(((unsigned __int64)qword_49FB70 >> 1) | qword_49FB70 & 1);\n      goto LABEL_26;\n    }\n  }\n  v5 = (float)(signed int)qword_49FB70;\nLABEL_26:\n  v15 = v4 / v5;\n  v16 = (unsigned int)(signed int)v15;\n  if ( v15 >= 9.223372e18 )\n    v16 = (unsigned int)(signed int)(float)(v15 - 9.223372e18) ^ 0x8000000000000000LL;\n  if ( (unsigned int)sub_424210(v0, (__int64)v1) != 1 && (_DWORD)v0 )\n  {\n    if ( (v16 & 0x8000000000000000LL) != 0LL )\n      v17 = (float)(signed int)((v16 >> 1) | v16 & 1) + (float)(signed int)((v16 >> 1) | v16 & 1);\n    else\n      v17 = (float)(signed int)v16;\n    v18 = (float *)off_49F6D0;\n    v19 = (signed int *)dest;\n    v20 = 0LL;\n    do\n    {\n      if ( v20 )\n      {\n        v21 = v1[v20 - 1];\n        if ( v21 < 0 )\n        {\n          v26 = (v1[v20 - 1] >> 1) | v1[v20 - 1] & 1LL;\n          v22 = (float)(signed int)v26 + (float)(signed int)v26;\n        }\n        else\n        {\n          v22 = (float)(signed int)v21;\n        }\n        v27 = (float)((float)(v18[12] * (float)(signed int)(v16 >> 2)) / (float)(v19[5] + 1)) + v22;\n        v25 = (unsigned int)(signed int)v27;\n        if ( v27 >= 9.223372e18 )\n          v25 = (unsigned int)(signed int)(float)(v27 - 9.223372e18) ^ 0x8000000000000000LL;\n      }\n      else\n      {\n        v23 = v18[12] * v17;\n        v24 = (unsigned int)(signed int)v23;\n        if ( v23 >= 9.223372e18 )\n          v24 = (unsigned int)(signed int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n        v25 = v24 / (v19[5] + 1LL);\n      }\n      v1[v20++] = v25;\n    }\n    while ( v20 < v0 );\n  }\n  v28 = v0 - 1;\n  if ( v0 != 1 )\n  {\n    v29 = 0LL;\n    do\n    {\n      v30 = v29++;\n      if ( v29 < v0 )\n      {\n        v31 = v29;\n        if ( ((_BYTE)v28 - (_BYTE)v30) & 1 )\n        {\n          v32 = v1[v30];\n          v33 = v1[v30 + 1];\n          if ( v32 > v33 )\n          {\n            v1[v30] = v33;\n            v1[v30 + 1] = v32;\n          }\n          v31 = v30 + 2;\n        }\n        if ( v0 - 2 != v30 )\n        {\n          v34 = v0 - v31;\n          v35 = &v1[v31 + 1];\n          do\n          {\n            v36 = v1[v30];\n            v37 = *(v35 - 1);\n            if ( v36 > v37 )\n            {\n              v1[v30] = v37;\n              *(v35 - 1) = v36;\n            }\n            v38 = v1[v30];\n            if ( v38 > *v35 )\n            {\n              v1[v30] = *v35;\n              *v35 = v38;\n            }\n            v35 += 2;\n            v34 -= 2LL;\n          }\n          while ( v34 );\n        }\n      }\n    }\n    while ( v29 != v28 );\n  }\n  if ( (_DWORD)v0 )\n  {\n    v39 = 20 * v16;\n    v70 = *((signed int *)dest + 5) + 1LL;\n    v40 = *((float *)off_49F6D0 + 12);\n    v41 = qword_49FB70;\n    v42 = *(_QWORD *)&xmmword_4A05C0[0];\n    v69 = qword_49FB70 & 1;\n    v43 = qword_49FB70 - v69;\n    v44 = 0LL;\n    v45 = 0LL;\n    v71 = v0;\n    do\n    {\n      v46 = v70 * v1[v44];\n      if ( (v46 & 0x8000000000000000LL) != 0LL )\n        v47 = (float)(signed int)((v46 >> 1) | v46 & 1) + (float)(signed int)((v46 >> 1) | v46 & 1);\n      else\n        v47 = (float)(signed int)v46;\n      v48 = (unsigned int)(signed int)(float)(v47 / v40);\n      if ( v41 )\n      {\n        v49 = v39;\n        v50 = v39;\n        v51 = 0LL;\n        if ( v41 != 1 )\n        {\n          do\n          {\n            v52 = v49 - *(_QWORD *)&xmmword_4A05C0[v51 / 2];\n            if ( v52 < v50 )\n              v45 = v51;\n            if ( v52 <= v50 )\n              v50 = v52;\n            v53 = v48 + v52;\n            v54 = v39;\n            if ( v53 <= v39 )\n              v54 = v53;\n            v55 = v54 - *((_QWORD *)&xmmword_4A05C0[v51 / 2] + 1);\n            if ( v55 < v50 )\n              v45 = v51 + 1;\n            if ( v55 <= v50 )\n              v50 = v55;\n            v56 = v48 + v55;\n            v51 += 2LL;\n            v49 = v39;\n            if ( v56 <= v39 )\n              v49 = v56;\n          }\n          while ( v43 != v51 );\n        }\n        if ( v69 )\n        {\n          v57 = v49 - *(_QWORD *)&xmmword_4A05C0[v51 / 2];\n          v59 = __OFSUB__(v57, v50);\n          v58 = v57 - v50 < 0;\n          if ( v57 <= v50 )\n            v50 = v57;\n          if ( v58 ^ v59 )\n            v45 = v51;\n        }\n      }\n      else\n      {\n        v50 = v39;\n      }\n      v60 = v39 - v50;\n      v61 = v42;\n      if ( v45 != -1 )\n      {\n        v62 = 1LL;\n        v63 = v42;\n        v61 = v42;\n        do\n        {\n          v64 = v63 - *((_QWORD *)xmmword_4A05B0 + v62 + 1);\n          v65 = 0LL;\n          if ( v64 >= 0 )\n            v65 = v64;\n          v61 -= v64 & (v64 >> 63);\n          v63 = v48 + v65;\n          if ( v48 + v65 > v60 )\n            break;\n          v66 = v62++ < v45 + 1;\n        }\n        while ( v66 );\n      }\n      ptr[v44] = v60;\n      v67[v44++] = v61;\n      v0 = v71;\n    }\n    while ( v44 < v71 );\n  }\n  sub_424310(v0, (__int64)v1, (__int64)ptr, (__int64)v67);\n  free(v1);\n  free(ptr);\n  free(v67);\n}\n", 
            "funcStartAddr": "0x424580L", 
            "funcEndAddr": "0x424bb7L", 
            "funcName": "sub_424580"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(__int64 a1@<rdi>, char **a2@<rsi>, char **a3@<rdx>, __int64 a4@<rbx>)\n{\n  int v4; // ebx\n  _DWORD *v5; // rcx\n  _DWORD *v6; // rax\n  int v7; // edx\n  int v8; // edx\n  bool v9; // zf\n  signed int v10; // ecx\n  __int64 v11; // rsi\n  void *v12; // rax\n  _DWORD *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  void *v17; // rax\n  void *v18; // rdi\n  _DWORD *v19; // rcx\n  int v20; // eax\n  int v21; // esi\n  int v22; // eax\n  int v23; // eax\n  __int128 *v24; // rcx\n  int *v25; // rdi\n  _DWORD *v26; // rbx\n  int *v27; // r8\n  int v28; // ecx\n  int v29; // er9\n  int v30; // edx\n  int v31; // er10\n  int v32; // er11\n  int v33; // eax\n  int v34; // ebp\n  int v35; // esi\n  int v36; // ebp\n  int v37; // esi\n  int v38; // ecx\n  int v39; // ebp\n  signed int v40; // er14\n  signed int v41; // edx\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // ebp\n  int v46; // esi\n  int v47; // er9\n  int v48; // ecx\n  int v49; // ebx\n  int v50; // edi\n  int v51; // ebp\n  int v52; // edi\n  int v53; // esi\n  int v54; // edi\n  int v55; // eax\n  int v56; // ecx\n  signed int v57; // eax\n  int v58; // ecx\n  int v59; // ecx\n  void *v60; // rbx\n  void *v61; // rbx\n  void *v62; // rbx\n  void *v63; // rbx\n  void *v64; // rbx\n  _DWORD *v65; // rax\n\n  fd = -1;\n  dword_4FA124 = -1;\n  qword_4F9F38 = 0LL;\n  qword_4F9F28 = 0LL;\n  qword_4F9F30 = 0LL;\n  dword_4FA0DC = 1;\n  sub_40CE70(a1, (__int64)a2);\n  sub_455F00(a4);\n  v4 = 0;\n  sub_456D90(0LL);\n  sub_452600();\n  v5 = dest;\n  v6 = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18101) = *((_DWORD *)dest + 802);\n  v6[18102] = 0;\n  v6[18105] = 1;\n  v7 = 2;\n  if ( !v5[329] )\n  {\n    v8 = v5[309];\n    v4 = -2 * v8;\n    v7 = 2 * v8 + 2;\n  }\n  v6[18103] = v4;\n  v6[18106] = v7;\n  if ( v5[720] )\n  {\n    v6[18104] = 1;\nLABEL_6:\n    v10 = 1;\n    goto LABEL_7;\n  }\n  v9 = v5[721] == 0;\n  v6[18104] = v5[721] != 0;\n  if ( !v9 )\n    goto LABEL_6;\n  v10 = 0;\nLABEL_7:\n  v6[18123] = v10;\n  v6[18108] = v10;\n  sub_453F90(a1);\n  sub_425790();\n  v11 = 824LL;\n  v12 = calloc(1uLL, 0x338uLL);\n  if ( !v12 )\n    sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n  qword_4F9E50 = v12;\n  v13 = dest;\n  if ( *((_DWORD *)dest + 324) )\n  {\n    v14 = calloc(1uLL, 0x338uLL);\n    if ( !v14 )\n      sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n    qword_4F9E58 = v14;\n    v11 = 824LL;\n    v15 = calloc(1uLL, 0x338uLL);\n    if ( !v15 )\n      sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n    qword_4F9E60 = v15;\n    v13 = dest;\n  }\n  if ( v13[720] )\n  {\n    v16 = calloc(1uLL, 0x338uLL);\n    if ( !v16 )\n      sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n    qword_4F9F70 = v16;\n    v11 = 824LL;\n    v17 = calloc(1uLL, 0x338uLL);\n    if ( !v17 )\n      sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n    qword_4F9DE0 = v17;\n  }\n  sub_45B470();\n  if ( *((_DWORD *)dest + 330) )\n  {\n    sub_415B90(0LL);\n    if ( *((_DWORD *)dest + 330) == 3 )\n      sub_415C00();\n    else\n      sub_415860(1LL, 824LL);\n  }\n  v18 = dest;\n  sub_437480((__int64)dest);\n  sub_4538A0();\n  qword_4F9E10 = 0LL;\n  qword_4F9E38 = 0LL;\n  qword_4F9E18 = 0LL;\n  qword_4F9E30 = 0LL;\n  sub_428400((__int64)v18, 824LL);\n  sub_40EA30((__int64)v18, 824LL);\n  sub_444FB0();\n  sub_428180();\n  v19 = dest;\n  if ( *((_DWORD *)dest + 809) )\n  {\n    sub_4577D0();\n    v19 = dest;\n  }\n  if ( v19[823] )\n  {\n    sub_4166F0();\n    v19 = dest;\n  }\n  dword_4FA010 = 0;\n  dword_4FA04C = 0;\n  dword_4F9FD8 = 0;\n  dword_4FA154 = 0;\n  v20 = v19[610];\n  if ( v20 > 0 )\n  {\n    v21 = v19[5];\n    v22 = v21 + v20;\n    v11 = (unsigned int)(v21 + 1);\n    v19[2] = v22 / (signed int)v11 + 1;\n  }\n  dword_49FB80 = v19[309];\n  sub_40E9F0();\n  *((_DWORD *)off_49F6D8 + 372) = 0;\n  v23 = sub_41AF40(0LL);\n  v24 = off_49F6D8;\n  *((_DWORD *)off_49F6D8 + 6) = v23;\n  *((_DWORD *)v24 + 372) += *((_DWORD *)v24 + 373);\n  dword_49FB88 = 0;\n  v25 = (int *)off_49F6D0;\n  *(_DWORD *)off_49F6D0 = 0;\n  v26 = dest;\n  if ( *((_DWORD *)dest + 2) > 0 )\n  {\n    v27 = (int *)((char *)dest + 8);\n    LODWORD(v11) = 0;\n    do\n    {\n      v25[18124] = 1;\n      v28 = v26[306];\n      if ( v28 && v26[307] )\n      {\n        v29 = dword_49FB88;\n        v30 = ((signed int)v11 - dword_49FB88) % v28;\n      }\n      else\n      {\n        v29 = dword_49FB88;\n        v30 = v11 - dword_49FB88;\n      }\n      v31 = v30 * (2 * v26[5] + 2);\n      v25[18112] = v31;\n      if ( v26[720] || v26[721] )\n      {\n        v32 = v31 | 1;\n        v25[18113] = v31 | 1;\n      }\n      else\n      {\n        v25[18113] = v31;\n        v32 = v31;\n      }\n      v33 = v32;\n      if ( v31 <= v32 )\n        v33 = v31;\n      v25[18114] = v33;\n      if ( (v26[329] || v26[330]) && (signed int)v11 >= 2 && v26[309] )\n      {\n        v34 = v25[18116] + 1;\n        v25[18116] = v34;\n        if ( v28 && v26[307] && !((signed int)v11 % v28) )\n        {\n          v25[18116] = 0;\n          v34 = 0;\n        }\n        v25[18116] = v34 & ((1 << (dword_4FA0E4 + 4)) - 1);\n      }\n      else\n      {\n        if ( v28 && v26[307] )\n          v35 = ((signed int)v11 - v29) % v28;\n        else\n          v35 = v11 - v29;\n        v25[18116] = v35 % (1 << (dword_4FA0E4 + 4));\n      }\n      v25[18109] = 0;\n      if ( v26[329] && *v25 )\n        v25[18109] = 2 * v26[309];\n      v36 = v26[306];\n      v37 = *v25;\n      v38 = *v25 - v29;\n      if ( v36 )\n      {\n        if ( v38 % v36 )\n          goto LABEL_61;\n      }\n      else if ( *v25 != v29 )\n      {\nLABEL_61:\n        v25[6] = 0;\n        v39 = v26[318];\n        v40 = 0;\n        if ( v39 && !(v38 % v39) )\n        {\n          v25[6] = 3;\n          v40 = 3;\n        }\n        goto LABEL_66;\n      }\n      v25[6] = 2;\n      v40 = 2;\nLABEL_66:\n      v41 = v26[309];\n      if ( v41 )\n      {\n        v42 = v26[610];\n        if ( v42 )\n        {\n          if ( v38 + 1 == *v27 )\n          {\n            v43 = (v42 - (v26[5] + 1) * (v37 - 1)) / (signed int)((float)(v26[5] + 1) / ((double)v41 + 1.0) + 0.499999)\n                - 1;\n            v26[309] = v43;\n            v44 = v43 - dword_49FB80;\n            v25[18109] = 2 * v44;\n            v25[18112] = v31 + 2 * v44;\n            v25[18113] = v32 + 2 * v44;\n          }\n        }\n      }\n      if ( v40 == 2 && v26[809] )\n      {\n        v45 = v26[306];\n        if ( v45 )\n        {\n          v46 = v26[309];\n          v47 = v46 + 1;\n          v48 = *v25;\n          v49 = 0;\n          if ( !*v25 )\n            v49 = v46;\n          v50 = *v27;\n          if ( v48 / v45 >= *v27 / v45 )\n          {\n            if ( v48 )\n              v51 = v46 * (v50 - v48 - 1) + v46 + v50 - v48;\n            else\n              v51 = v50 + v46 * (v50 - 1);\n          }\n          else\n          {\n            v51 = v47 * v45 - v49;\n          }\n          v54 = (v51 + (v46 << (v48 == 0))) / v47;\n          v55 = 1 - v54;\n          v52 = v54 - 1;\n          v53 = v55 + v51 - 1;\n        }\n        else\n        {\n          v52 = *v27 - 1;\n          v53 = v52 * v26[309];\n        }\n        sub_457B70(v52, v53);\n        v25 = (int *)off_49F6D0;\n        v29 = dword_49FB88;\n        v26 = dest;\n      }\n      v25[18096] = (*v25 - v29) % (v26[728] + 1) != 0;\n      sub_41D500();\n      if ( *((_DWORD *)dest + 807) )\n        sub_426CC0();\n      v56 = *((_DWORD *)off_49F6D0 + 2) + 1;\n      if ( v56 > *((_DWORD *)off_49F6D0 + 18094) )\n        v56 = *((_DWORD *)off_49F6D0 + 18094);\n      *((_DWORD *)off_49F6D0 + 2) = v56;\n      sub_416140();\n      v25 = (int *)off_49F6D0;\n      v26 = dest;\n      v57 = *((_DWORD *)dest + 2);\n      v58 = *((_DWORD *)dest + 729);\n      if ( v58 && *(_DWORD *)off_49F6D0 == v57 - 1 && !dword_49FB84 )\n      {\n        dword_49FB84 = 1;\n        dword_49FB88 = v57;\n        dword_49FB8C = (v57 - 1) * (*((_DWORD *)dest + 5) + 1) + 1;\n        v59 = v57 + v58;\n        *((_DWORD *)dest + 2) = v59;\n        v25[2] = 0;\n        v57 = v59;\n      }\n      v27 = v26 + 2;\n      v11 = (unsigned int)(*v25 + 1);\n      *v25 = v11;\n    }\n    while ( (signed int)v11 < v57 );\n  }\n  sub_41B030();\n  sub_43C5F0((__int64)v25, v11);\n  close(fd);\n  if ( dword_4FA124 != -1 )\n    close(dword_4FA124);\n  if ( qword_4F9F38 )\n    fclose(qword_4F9F38);\n  sub_445620();\n  sub_4241F0();\n  sub_41B820();\n  if ( *((_DWORD *)dest + 330) )\n    sub_415BE0();\n  sub_45B3C0();\n  sub_424580();\n  sub_427770();\n  v60 = qword_4F9E50;\n  if ( qword_4F9E50 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9E50);\n    free(v60);\n  }\n  if ( *((_DWORD *)dest + 324) )\n  {\n    v61 = qword_4F9E58;\n    if ( qword_4F9E58 )\n    {\n      sub_4796E0((unsigned int *)qword_4F9E58);\n      free(v61);\n    }\n    v62 = qword_4F9E60;\n    if ( qword_4F9E60 )\n    {\n      sub_4796E0((unsigned int *)qword_4F9E60);\n      free(v62);\n    }\n  }\n  v63 = qword_4F9F70;\n  if ( qword_4F9F70 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9F70);\n    free(v63);\n  }\n  v64 = qword_4F9DE0;\n  if ( qword_4F9DE0 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9DE0);\n    free(v64);\n  }\n  sub_437970();\n  sub_43D4A0(qword_49FE00);\n  sub_4538C0();\n  v65 = sub_428900();\n  sub_4266F0((__int64)v65);\n  sub_40EF60();\n  sub_452660();\n  sub_454980();\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x424bc0L", 
            "funcEndAddr": "0x425462L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_425470(void *ptr)\n{\n  if ( ptr )\n  {\n    sub_4796E0((unsigned int *)ptr);\n    free(ptr);\n  }\n}\n", 
            "funcStartAddr": "0x425470L", 
            "funcEndAddr": "0x42548cL", 
            "funcName": "sub_425470"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_425490(__int64 a1, __int64 a2)\n{\n  void *v2; // rbx\n  void *v3; // rbx\n  void *v4; // rbx\n  _DWORD *v5; // rax\n\n  *((_DWORD *)dest + 2) = *(_DWORD *)off_49F6D0 - 1;\n  sub_41B030();\n  sub_43C5F0(a1, a2);\n  close(fd);\n  if ( dword_4FA124 != -1 )\n    close(dword_4FA124);\n  if ( qword_4F9F38 )\n    fclose(qword_4F9F38);\n  sub_445620();\n  sub_4241F0();\n  sub_41B820();\n  if ( *((_DWORD *)dest + 330) )\n    sub_415BE0();\n  sub_45B3C0();\n  sub_424580();\n  if ( *((_DWORD *)dest + 807) )\n    sub_426CC0();\n  sub_427770();\n  v2 = qword_4F9E50;\n  if ( qword_4F9E50 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9E50);\n    free(v2);\n  }\n  v3 = qword_4F9F70;\n  if ( qword_4F9F70 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9F70);\n    free(v3);\n  }\n  v4 = qword_4F9DE0;\n  if ( qword_4F9DE0 )\n  {\n    sub_4796E0((unsigned int *)qword_4F9DE0);\n    free(v4);\n  }\n  sub_437970();\n  sub_43D4A0(qword_49FE00);\n  sub_4538C0();\n  v5 = sub_428900();\n  sub_4266F0((__int64)v5);\n  sub_40EF60();\n  sub_452660();\n  sub_454980();\n}\n", 
            "funcStartAddr": "0x425490L", 
            "funcEndAddr": "0x4255c3L", 
            "funcName": "sub_425490"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_425670()\n{\n  unsigned int *v0; // r9\n  signed int v1; // edx\n  unsigned __int64 v2; // r8\n  __int64 v3; // rsi\n  unsigned __int64 v4; // rdi\n  signed int v5; // ecx\n  __int64 v6; // rsi\n  unsigned __int64 v7; // rdi\n  unsigned int v8; // ecx\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rdi\n  unsigned int v11; // ecx\n  __int64 v12; // rsi\n  unsigned __int64 v13; // rdi\n  unsigned __int64 result; // rax\n\n  v0 = (unsigned int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18121) )\n  {\n    v1 = *((_DWORD *)off_49F6D0 + 18173);\n    v2 = 0LL;\n    do\n    {\n      if ( v1 != -4 )\n      {\n        v3 = **(_QWORD **)(*((_QWORD *)v0 + 16) + 8 * v2);\n        v4 = 0LL;\n        do\n        {\n          *(_DWORD *)(v3 + 4 * v4++) = 0;\n          v1 = v0[18173];\n        }\n        while ( v4 < (unsigned int)(v1 + 4) );\n      }\n      v5 = v1;\n      v1 = -4;\n      if ( v5 != -4 )\n      {\n        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v0 + 16) + 8 * v2) + 8LL);\n        v7 = 0LL;\n        do\n        {\n          *(_DWORD *)(v6 + 4 * v7++) = 0;\n          v8 = v0[18173];\n        }\n        while ( v7 < v8 + 4 );\n        if ( v8 != -4 )\n        {\n          v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v0 + 16) + 8 * v2) + 16LL);\n          v10 = 0LL;\n          do\n          {\n            *(_DWORD *)(v9 + 4 * v10++) = 0;\n            v11 = v0[18173];\n          }\n          while ( v10 < v11 + 4 );\n          if ( v11 != -4 )\n          {\n            v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v0 + 16) + 8 * v2) + 24LL);\n            v13 = 0LL;\n            do\n            {\n              *(_DWORD *)(v12 + 4 * v13++) = 0;\n              v1 = v0[18173];\n            }\n            while ( v13 < (unsigned int)(v1 + 4) );\n          }\n        }\n      }\n      ++v2;\n      result = v0[18121];\n    }\n    while ( v2 < result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x425670L", 
            "funcEndAddr": "0x425785L", 
            "funcName": "sub_425670"
        }, 
        {
            "decompiledFuncCode": "_DWORD *sub_425790()\n{\n  void *v0; // r8\n  int v1; // er9\n  char *v2; // rdi\n  signed int v3; // edx\n  signed int v4; // ecx\n  int v5; // ebp\n  int v6; // edx\n  unsigned int v7; // ebp\n  int v8; // edx\n  __int64 v9; // rax\n  _DWORD *v10; // rax\n  int v11; // edx\n  double v12; // xmm0_8\n  signed int *v13; // rbx\n  int v14; // ebp\n  int v15; // er14\n  char *v16; // rax\n  unsigned int v17; // ecx\n  signed __int64 v18; // rax\n  __int64 v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // rsi\n  __int64 v22; // rdi\n  __int64 v23; // rdx\n  int v24; // ebp\n  _DWORD *v25; // r14\n  int v26; // edi\n  int v27; // esi\n  int v28; // er9\n  int v29; // ecx\n  __int64 v30; // rbp\n  int v31; // er11\n  int v32; // er8\n  int v33; // ebp\n  int v34; // er10\n  int v35; // edi\n  int v36; // eax\n  size_t v37; // rdi\n  void *v38; // rax\n  _QWORD *v39; // rbx\n  void *v40; // rax\n  void *v41; // rax\n  void *v42; // rax\n  signed int v43; // esi\n  signed int v44; // ebx\n  signed __int64 v45; // rdx\n  __int64 v46; // rsi\n  __int64 v47; // rdi\n  signed __int64 v48; // rbp\n  _DWORD *result; // rax\n\n  v0 = dest;\n  v1 = *((_DWORD *)dest + 18);\n  v2 = (char *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18175) = v1;\n  v3 = *((_DWORD *)v0 + 824);\n  *((_DWORD *)v2 + 18165) = v3;\n  v4 = *((_DWORD *)v2 + 18166);\n  v5 = 8 * (v4 > 8) + 8;\n  if ( v3 > v4 )\n    v5 = 8 * (v3 > 8) + 8;\n  if ( !v1 )\n    v5 = 8 * (v3 > 8) + 8;\n  *((_DWORD *)v2 + 18164) = v5;\n  *((_DWORD *)v2 + 18167) = 6 * v3 - 48;\n  *((_DWORD *)v2 + 18169) = 2 * v3 - 16;\n  *((_DWORD *)v2 + 18170) = 1 << (v3 - 1);\n  *((_DWORD *)v2 + 18171) = (1 << v3) - 1;\n  if ( v1 )\n  {\n    v6 = *((_DWORD *)v0 + 825);\n    *((_DWORD *)v2 + 18166) = v6;\n    *((_DWORD *)v2 + 18172) = (1 << v6) - 1;\n    v7 = (1 << v1) & 0xFFFFFFFE;\n    *((_DWORD *)v2 + 18173) = v7;\n    *((_DWORD *)v2 + 18174) = 2 * v7;\n    *((_DWORD *)v2 + 18177) = 8 * ((unsigned int)(v1 - 1) > 1) + 8;\n    *((_DWORD *)v2 + 18178) = 8 * ((v1 | 1) == 3) + 8;\n    v8 = 2 * v6;\n    *((_DWORD *)v2 + 18168) = 3 * v8 - 48;\n    if ( *((_DWORD *)v2 + 18181) )\n      *((_DWORD *)v2 + 18168) = 3 * v8 - 42;\n    v9 = qword_4F9DB8;\n    *((_DWORD *)v2 + 18179) = *(_DWORD *)(qword_4F9DB8 + 212);\n    *((_DWORD *)v2 + 18180) = *(_DWORD *)(v9 + 216);\n  }\n  else\n  {\n    *((_DWORD *)v2 + 18166) = 0;\n    *((_QWORD *)v2 + 9086) = 0LL;\n    *((_DWORD *)v2 + 18174) = 0;\n    *((_DWORD *)v2 + 18168) = 0;\n    *(_OWORD *)(v2 + 72708) = 0LL;\n  }\n  v10 = qword_4F9DC0;\n  v11 = *((_DWORD *)qword_4F9DC0 + 283);\n  *((_DWORD *)v2 + 8) = v11;\n  *((_DWORD *)v2 + 9) = v11 << (v10[287] == 0);\n  *((_DWORD *)v2 + 18094) = *((_DWORD *)v0 + 9);\n  *((_DWORD *)v2 + 18159) = 0;\n  v12 = *((double *)v0 + 303);\n  *(float *)&v12 = v12;\n  *((_DWORD *)v2 + 12) = LODWORD(v12);\n  sub_425F70((_QWORD *)v2 + 8990);\n  sub_425F70((_QWORD *)off_49F6D0 + 8991);\n  if ( *((_DWORD *)dest + 314) )\n  {\n    sub_425F70((_QWORD *)off_49F6D0 + 8992);\n    sub_425F70((_QWORD *)off_49F6D0 + 8993);\n  }\n  sub_4262B0((_QWORD *)off_49F6D0 + 1767);\n  sub_426560((__int64)off_49F6D0 + 14144);\n  if ( *((_DWORD *)dest + 721) )\n  {\n    sub_425F70(&qword_4EA4F0);\n    sub_425F70(&qword_4EA4F8);\n    sub_425F70(&qword_4E8AB0);\n    sub_425F70(&qword_4E8AB8);\n    sub_425F70(&qword_4E97D0);\n    sub_425F70(&qword_4E97D8);\n    sub_425F70(&qword_4E7D90);\n    sub_425F70(&qword_4E7D98);\n    if ( *((_DWORD *)dest + 314) )\n    {\n      sub_425F70(&qword_4EA500);\n      sub_425F70(&qword_4EA508);\n      sub_425F70(&qword_4E8AC0);\n      sub_425F70(&qword_4E8AC8);\n      sub_425F70(&qword_4E97E0);\n      sub_425F70(&qword_4E97E8);\n      sub_425F70(&qword_4E7DA0);\n      sub_425F70(&qword_4E7DA8);\n    }\n    sub_4262B0(&qword_4EA458);\n    sub_426560((__int64)&qword_4EA460);\n    sub_4262B0(&qword_4E8A18);\n    sub_426560((__int64)&qword_4E8A20);\n    sub_4262B0(&qword_4E9738);\n    sub_426560((__int64)&qword_4E9740);\n    sub_4262B0(&qword_4E7CF8);\n    sub_426560((__int64)&qword_4E7D00);\n  }\n  v13 = (signed int *)off_49F6D0;\n  v14 = *((_DWORD *)off_49F6D0 + 18172);\n  if ( *((_DWORD *)off_49F6D0 + 18171) >= v14 )\n    v14 = *((_DWORD *)off_49F6D0 + 18171);\n  v15 = 2 * v14 + 2;\n  v16 = (char *)calloc(v15, 4uLL);\n  *((_QWORD *)v13 + 8972) = v16;\n  if ( !v16 )\n    sub_43EF40(0LL, (__int64)\"init_img: img->quad\");\n  v17 = v15 / 2;\n  v18 = (signed __int64)&v16[4 * (v15 / 2)];\n  *((_QWORD *)v13 + 8972) = v18;\n  if ( v15 >= 2 )\n  {\n    v19 = v17;\n    v20 = v17 & 1;\n    if ( 2 * v14 )\n    {\n      v21 = v19 - v20;\n      v22 = 0LL;\n      v23 = 0LL;\n      do\n      {\n        *(_DWORD *)(v18 + v22) = v23 * v23;\n        *(_DWORD *)(v18 + 4 * v23) = v23 * v23;\n        v24 = (v23 + 1) * (v23 + 1);\n        *(_DWORD *)(v18 + v22 - 4) = v24;\n        *(_DWORD *)(v18 + 4 * v23 + 4) = v24;\n        v23 += 2LL;\n        v22 -= 8LL;\n      }\n      while ( v21 != v23 );\n      if ( !v20 )\n        goto LABEL_26;\n      goto LABEL_25;\n    }\n    v23 = 0LL;\n    if ( v20 )\n    {\nLABEL_25:\n      *(_DWORD *)(v18 - 4 * v23) = v23 * v23;\n      *(_DWORD *)(v18 + 4 * v23) = v23 * v23;\n      goto LABEL_26;\n    }\n  }\nLABEL_26:\n  v25 = dest;\n  v26 = *((_DWORD *)dest + 16);\n  v27 = v26 + v13[18182];\n  v13[13] = v27;\n  v28 = v25[17];\n  v29 = v28 + v13[18183];\n  v13[15] = v29;\n  v30 = v13[18175];\n  if ( v13[18175] )\n  {\n    v31 = 16 / dword_4896F0[v30];\n    v32 = v27 / v31;\n    v33 = 16 / dword_489700[v30];\n    v34 = v29 / v33;\n    v35 = v26 / v31;\n    v36 = v28 / v33;\n  }\n  else\n  {\n    v32 = 0;\n    v34 = 0;\n    v35 = 0;\n    v36 = 0;\n  }\n  v13[14] = v32;\n  v13[16] = v34;\n  v25[827] = v35;\n  v25[826] = v36;\n  v13[17] = v13[16];\n  v13[18117] = v27 / 16;\n  v13[18119] = v29 / 16;\n  v37 = (unsigned int)(v29 / 16 * (v27 / 16));\n  v13[18122] = v37;\n  v13[18118] = (unsigned int)(v29 / 16) >> (*((_DWORD *)qword_4F9DC0 + 287) == 0);\n  v38 = calloc(v37, 0x278uLL);\n  *((_QWORD *)v13 + 1771) = v38;\n  if ( !v38 )\n    sub_43EF40(0LL, (__int64)\"init_img: img->mb_data\");\n  if ( v25[54] )\n  {\n    v39 = off_49F6D0;\n    v40 = calloc(*((unsigned int *)off_49F6D0 + 18122), 4uLL);\n    v39[8973] = v40;\n    if ( !v40 )\n      sub_43EF40(0LL, (__int64)\"init_img: img->intra_block\");\n  }\n  sub_43F410((_QWORD *)off_49F6D0 + 13, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n  sub_43F410((_QWORD *)off_49F6D0 + 14, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n  sub_43F410(&qword_4EA490, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n  v41 = dest;\n  if ( *((_DWORD *)dest + 721) )\n  {\n    sub_43F410(&qword_4E8A50, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n    sub_43F410(&qword_4E9770, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n    v41 = (void *)sub_43F410(&qword_4E7D30, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n  }\n  sub_43F7A0(\n    (__int64)v41,\n    4,\n    *((_DWORD *)off_49F6D0 + 18173) + 4,\n    (_QWORD *)off_49F6D0 + 16,\n    *((_DWORD *)off_49F6D0 + 18122));\n  sub_425670();\n  v42 = off_49F6D0;\n  v43 = *((_DWORD *)off_49F6D0 + 13);\n  v44 = *((_DWORD *)off_49F6D0 + 15);\n  if ( v43 >= 4 )\n  {\n    v45 = 0LL;\n    do\n    {\n      if ( v44 >= 4 )\n      {\n        v46 = *(_QWORD *)(*((_QWORD *)v42 + 13) + 8 * v45);\n        v47 = *(_QWORD *)(*((_QWORD *)v42 + 14) + 8 * v45);\n        v48 = 0LL;\n        do\n        {\n          *(_DWORD *)(v46 + 4 * v48) = -1;\n          *(_DWORD *)(v47 + 4 * v48++) = -1;\n          v44 = *((_DWORD *)v42 + 15);\n        }\n        while ( v48 < v44 / 4 );\n        v43 = *((_DWORD *)v42 + 13);\n      }\n      ++v45;\n    }\n    while ( v45 < v43 / 4 );\n  }\n  *((_DWORD *)v42 + 22) = 0;\n  sub_424030(v43 / 16, v44 / 16, *((_DWORD *)dest + 730), v12);\n  sub_476550();\n  result = dest;\n  if ( *((_DWORD *)dest + 731) )\n  {\n    *((_DWORD *)dest + 733) *= 2;\n    result[734] *= 2;\n  }\n  else\n  {\n    *((_QWORD *)dest + 366) = 0LL;\n    result[734] = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x425790L", 
            "funcEndAddr": "0x425f68L", 
            "funcName": "sub_425790"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_425F70(_QWORD *a1)\n{\n  void *v1; // rax\n  __int64 v2; // r15\n  void *v3; // rax\n  __int64 v4; // r12\n  void *v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // r13\n  void *v8; // rax\n  __int64 v9; // rbx\n  void *v10; // rax\n  void *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  void *v17; // rax\n  void *v18; // rax\n  void *v19; // rax\n\n  v1 = calloc(4uLL, 8uLL);\n  *a1 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n  v2 = 0LL;\n  do\n  {\n    v3 = calloc(4uLL, 8uLL);\n    *(_QWORD *)(*a1 + 8 * v2) = v3;\n    if ( !v3 )\n      sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n    v4 = 0LL;\n    do\n    {\n      v5 = calloc(2uLL, 8uLL);\n      *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) = v5;\n      if ( !v5 )\n        sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n      LODWORD(v6) = *((_DWORD *)off_49F6D0 + 9);\n      v7 = 0LL;\n      do\n      {\n        v8 = calloc((signed int)v6, 8uLL);\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) = v8;\n        if ( !v8 )\n          sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n        LODWORD(v6) = *((_DWORD *)off_49F6D0 + 9);\n        if ( (signed int)v6 > 0 )\n        {\n          v9 = 0LL;\n          do\n          {\n            v10 = calloc(9uLL, 8uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9) = v10;\n            if ( !v10 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v11 = calloc(2uLL, 2uLL);\n            **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9) = v11;\n            if ( !v11 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v12 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9) + 8LL) = v12;\n            if ( !v12 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v13 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 16LL) = v13;\n            if ( !v13 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v14 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 24LL) = v14;\n            if ( !v14 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v15 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 32LL) = v15;\n            if ( !v15 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v16 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 40LL) = v16;\n            if ( !v16 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v17 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 48LL) = v17;\n            if ( !v17 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v18 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 56LL) = v18;\n            if ( !v18 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            v19 = calloc(2uLL, 2uLL);\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v2) + 8 * v4) + 8 * v7) + 8 * v9)\n                      + 64LL) = v19;\n            if ( !v19 )\n              sub_43EF40(0LL, (__int64)\"get_mem_mv: mv\");\n            ++v9;\n            v6 = *((signed int *)off_49F6D0 + 9);\n          }\n          while ( v9 < v6 );\n        }\n        ++v7;\n      }\n      while ( v7 != 2 );\n      ++v4;\n    }\n    while ( v4 != 4 );\n    ++v2;\n  }\n  while ( v2 != 4 );\n  return (unsigned int)(576 * v6);\n}\n", 
            "funcStartAddr": "0x425f70L", 
            "funcEndAddr": "0x4262afL", 
            "funcName": "sub_425F70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4262B0(_QWORD *a1)\n{\n  signed int v1; // ebx\n  signed __int64 v2; // r14\n  void *v3; // rax\n  signed __int64 v4; // rbx\n  void *v5; // rax\n  void *v6; // rax\n  void *v7; // rax\n  void *v8; // rax\n  void *v9; // rax\n  void *v10; // rax\n  void *v11; // rax\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  void *v17; // rax\n\n  v1 = *((_DWORD *)off_49F6D0 + 18173);\n  v2 = *((signed int *)off_49F6D0 + 18173) + 4LL;\n  v3 = calloc(v2, 8uLL);\n  *a1 = v3;\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n  if ( v1 >= -3 )\n  {\n    v4 = 0LL;\n    do\n    {\n      v5 = calloc(4uLL, 8uLL);\n      *(_QWORD *)(*a1 + 8 * v4) = v5;\n      if ( !v5 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v6 = calloc(2uLL, 8uLL);\n      **(_QWORD **)(*a1 + 8 * v4) = v6;\n      if ( !v6 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v7 = calloc(0x41uLL, 4uLL);\n      ***(_QWORD ***)(*a1 + 8 * v4) = v7;\n      if ( !v7 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v8 = calloc(0x41uLL, 4uLL);\n      *(_QWORD *)(**(_QWORD **)(*a1 + 8 * v4) + 8LL) = v8;\n      if ( !v8 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v9 = calloc(2uLL, 8uLL);\n      *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 8LL) = v9;\n      if ( !v9 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v10 = calloc(0x41uLL, 4uLL);\n      **(_QWORD **)(*(_QWORD *)(*a1 + 8 * v4) + 8LL) = v10;\n      if ( !v10 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v11 = calloc(0x41uLL, 4uLL);\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 8LL) + 8LL) = v11;\n      if ( !v11 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v12 = calloc(2uLL, 8uLL);\n      *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 16LL) = v12;\n      if ( !v12 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v13 = calloc(0x41uLL, 4uLL);\n      **(_QWORD **)(*(_QWORD *)(*a1 + 8 * v4) + 16LL) = v13;\n      if ( !v13 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v14 = calloc(0x41uLL, 4uLL);\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 16LL) + 8LL) = v14;\n      if ( !v14 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v15 = calloc(2uLL, 8uLL);\n      *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 24LL) = v15;\n      if ( !v15 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v16 = calloc(0x41uLL, 4uLL);\n      **(_QWORD **)(*(_QWORD *)(*a1 + 8 * v4) + 24LL) = v16;\n      if ( !v16 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      v17 = calloc(0x41uLL, 4uLL);\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v4) + 24LL) + 8LL) = v17;\n      if ( !v17 )\n        sub_43EF40(0LL, (__int64)\"get_mem_ACcoeff: cofAC\");\n      ++v4;\n    }\n    while ( v4 < v2 );\n  }\n  return (unsigned int)(2080 * v2);\n}\n", 
            "funcStartAddr": "0x4262b0L", 
            "funcEndAddr": "0x426554L", 
            "funcName": "sub_4262B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_426560(__int64 a1)\n{\n  void *v1; // rax\n  void *v2; // rax\n  void *v3; // rax\n  void *v4; // rax\n  void *v5; // rax\n  void *v6; // rax\n  void *v7; // rax\n  void *v8; // rax\n  void *v9; // rax\n  void *v10; // rax\n\n  v1 = calloc(3uLL, 8uLL);\n  *(_QWORD *)a1 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v2 = calloc(2uLL, 8uLL);\n  **(_QWORD **)a1 = v2;\n  if ( !v2 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v3 = calloc(0x41uLL, 4uLL);\n  ***(_QWORD ***)a1 = v3;\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v4 = calloc(0x41uLL, 4uLL);\n  *(_QWORD *)(**(_QWORD **)a1 + 8LL) = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v5 = calloc(2uLL, 8uLL);\n  *(_QWORD *)(*(_QWORD *)a1 + 8LL) = v5;\n  if ( !v5 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v6 = calloc(0x41uLL, 4uLL);\n  **(_QWORD **)(*(_QWORD *)a1 + 8LL) = v6;\n  if ( !v6 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v7 = calloc(0x41uLL, 4uLL);\n  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8LL) + 8LL) = v7;\n  if ( !v7 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v8 = calloc(2uLL, 8uLL);\n  *(_QWORD *)(*(_QWORD *)a1 + 16LL) = v8;\n  if ( !v8 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v9 = calloc(0x41uLL, 4uLL);\n  **(_QWORD **)(*(_QWORD *)a1 + 16LL) = v9;\n  if ( !v9 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  v10 = calloc(0x41uLL, 4uLL);\n  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16LL) + 8LL) = v10;\n  if ( !v10 )\n    sub_43EF40(0LL, (__int64)\"get_mem_DCcoeff: cofDC\");\n  return 1560LL;\n}\n", 
            "funcStartAddr": "0x426560L", 
            "funcEndAddr": "0x4266ebL", 
            "funcName": "sub_426560"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_4266F0(__int64 a1@<rax>)\n{\n  __int64 v1; // rax\n  __int64 v2; // rcx\n  signed __int64 v3; // rax\n\n  sub_476820();\n  sub_426930(*((void **)off_49F6D0 + 8990));\n  sub_426930(*((void **)off_49F6D0 + 8991));\n  if ( *((_DWORD *)dest + 314) )\n  {\n    sub_426930(*((void **)off_49F6D0 + 8992));\n    sub_426930(*((void **)off_49F6D0 + 8993));\n  }\n  sub_426AF0(*((void **)off_49F6D0 + 1767));\n  sub_426C20(*((void **)off_49F6D0 + 1768));\n  if ( *((_DWORD *)dest + 721) )\n  {\n    sub_426930(qword_4EA4F0);\n    sub_426930(qword_4EA4F8);\n    sub_426930(qword_4E8AB0);\n    sub_426930(qword_4E8AB8);\n    sub_426930(qword_4E97D0);\n    sub_426930(qword_4E97D8);\n    sub_426930(qword_4E7D90);\n    sub_426930(qword_4E7D98);\n    if ( *((_DWORD *)dest + 314) )\n    {\n      sub_426930(qword_4EA500);\n      sub_426930(qword_4EA508);\n      sub_426930(qword_4E8AC0);\n      sub_426930(qword_4E8AC8);\n      sub_426930(qword_4E97E0);\n      sub_426930(qword_4E97E8);\n      sub_426930(qword_4E7DA0);\n      sub_426930(qword_4E7DA8);\n    }\n    sub_426AF0(qword_4EA458);\n    sub_426C20(qword_4EA460);\n    sub_426AF0(qword_4E8A18);\n    sub_426C20(qword_4E8A20);\n    sub_426AF0(qword_4E9738);\n    sub_426C20(qword_4E9740);\n    sub_426AF0(qword_4E7CF8);\n    sub_426C20(qword_4E7D00);\n  }\n  v1 = *((signed int *)off_49F6D0 + 18171);\n  v2 = *((signed int *)off_49F6D0 + 18172);\n  if ( (signed int)v1 <= (signed int)v2 )\n    v3 = 4 * v2 + 4;\n  else\n    v3 = 4 * v1 + 4;\n  free((void *)(*((_QWORD *)off_49F6D0 + 8972) - v3));\n  if ( *((_DWORD *)dest + 721) )\n  {\n    sub_43FA90(qword_4E8A50);\n    sub_43FA90(qword_4E9770);\n    sub_43FA90(qword_4E7D30);\n  }\n}\n", 
            "funcStartAddr": "0x4266f0L", 
            "funcEndAddr": "0x42692fL", 
            "funcName": "sub_4266F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_426930(void *ptr)\n{\n  __int64 v1; // r15\n  __int64 v2; // r12\n  __int64 v3; // r13\n  signed __int64 v4; // rbx\n\n  v1 = 0LL;\n  do\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = 0LL;\n      do\n      {\n        if ( *((_DWORD *)off_49F6D0 + 9) > 0 )\n        {\n          v4 = 0LL;\n          do\n          {\n            free(**(void ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4) + 8LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 16LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 24LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 32LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 40LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 48LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 56LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4)\n                          + 64LL));\n            free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3) + 8 * v4++));\n          }\n          while ( v4 < *((signed int *)off_49F6D0 + 9) );\n        }\n        free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v1) + 8 * v2) + 8 * v3++));\n      }\n      while ( v3 != 2 );\n      free(*(void **)(*((_QWORD *)ptr + v1) + 8 * v2++));\n    }\n    while ( v2 != 4 );\n    free(*((void **)ptr + v1++));\n  }\n  while ( v1 != 4 );\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x426930L", 
            "funcEndAddr": "0x426aefL", 
            "funcName": "sub_426930"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_426AF0(void *ptr)\n{\n  signed __int64 v1; // rbx\n\n  if ( *((_DWORD *)off_49F6D0 + 18173) >= -3 )\n  {\n    v1 = -1LL;\n    do\n    {\n      free(***((void ****)ptr + v1 + 1));\n      free(*(void **)(**((_QWORD **)ptr + v1 + 1) + 8LL));\n      free(**((void ***)ptr + v1 + 1));\n      free(**(void ***)(*((_QWORD *)ptr + v1 + 1) + 8LL));\n      free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v1 + 1) + 8LL) + 8LL));\n      free(*(void **)(*((_QWORD *)ptr + v1 + 1) + 8LL));\n      free(**(void ***)(*((_QWORD *)ptr + v1 + 1) + 16LL));\n      free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v1 + 1) + 16LL) + 8LL));\n      free(*(void **)(*((_QWORD *)ptr + v1 + 1) + 16LL));\n      free(**(void ***)(*((_QWORD *)ptr + v1 + 1) + 24LL));\n      free(*(void **)(*(_QWORD *)(*((_QWORD *)ptr + v1 + 1) + 24LL) + 8LL));\n      free(*(void **)(*((_QWORD *)ptr + v1 + 1) + 24LL));\n      free(*((void **)ptr + v1++ + 1));\n    }\n    while ( v1 < *((signed int *)off_49F6D0 + 18173) + 3LL );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x426af0L", 
            "funcEndAddr": "0x426c19L", 
            "funcName": "sub_426AF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_426C20(void *ptr)\n{\n  free(**(void ***)ptr);\n  free(*(void **)(*(_QWORD *)ptr + 8LL));\n  free(*(void **)ptr);\n  free(**((void ***)ptr + 1));\n  free(*(void **)(*((_QWORD *)ptr + 1) + 8LL));\n  free(*((void **)ptr + 1));\n  free(**((void ***)ptr + 2));\n  free(*(void **)(*((_QWORD *)ptr + 2) + 8LL));\n  free(*((void **)ptr + 2));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x426c20L", 
            "funcEndAddr": "0x426c90L", 
            "funcName": "sub_426C20"
        }, 
        {
            "decompiledFuncCode": "void *sub_426C90()\n{\n  void *result; // rax\n\n  result = calloc(1uLL, 0x338uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"malloc_picture: Picture structure\");\n  return result;\n}\n", 
            "funcStartAddr": "0x426c90L", 
            "funcEndAddr": "0x426cb7L", 
            "funcName": "sub_426C90"
        }, 
        {
            "decompiledFuncCode": "int sub_426CC0()\n{\n  FILE *v0; // rax\n  FILE *v1; // r14\n  __int64 v2; // rbx\n  struct tm *v3; // r12\n  _BYTE *v4; // r12\n  const char *v5; // r15\n  int v6; // eax\n  __int64 v7; // rdx\n  FILE *v8; // rax\n  __int128 *v9; // rax\n  __int128 v10; // xmm0\n  __int128 v11; // xmm1\n  __int128 v12; // xmm3\n  __int128 v13; // xmm0\n  __int128 v14; // xmm1\n  __int128 v15; // xmm2\n  time_t timer; // [rsp+8h] [rbp-430h]\n  char v18[32]; // [rsp+10h] [rbp-428h]\n  char s; // [rsp+30h] [rbp-408h]\n\n  v0 = fopen(\"stat_frame.dat\", \"r\");\n  if ( !v0 )\n  {\n    v8 = fopen(\"stat_frame.dat\", \"a\");\n    v1 = v8;\n    if ( v8 )\n    {\n      fwrite(\n        \" ---------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"------------------ \\n\",\n        0x1D4uLL,\n        1uLL,\n        v8);\n      fwrite(\n        \"|            Encoder statistics. This file is generated during first encoding session, new sessions will be appe\"\n        \"nded                                                                                                            \"\n        \"                                                                                                                \"\n        \"                                                                                                                \"\n        \"                  |\\n\",\n        0x1D4uLL,\n        1uLL,\n        v1);\n      fwrite(\n        \" ---------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"------------------ \\n\",\n        0x1D4uLL,\n        1uLL,\n        v1);\n      if ( !dword_4FA0DC )\n        goto LABEL_5;\n      goto LABEL_4;\n    }\nLABEL_16:\n    snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s  \\n\", \"stat_frame.dat.dat\");\n    error((__int64)byte_4F8250, 500);\n  }\n  fclose(v0);\n  v1 = fopen(\"stat_frame.dat\", \"a\");\n  if ( !v1 )\n    goto LABEL_16;\n  if ( dword_4FA0DC )\n  {\nLABEL_4:\n    fwrite(\n      \"|  ver   | Date  | Time  |    Sequence        |Frm | QP |P/MbInt|   Bits   |  SNRY  |  SNRU  |  SNRV  |  I4  |  I8\"\n      \"  | I16  | IC0  | IC1  | IC2  | IC3  | PI4  | PI8  | PI16 |  P0  |  P1  |  P2  |  P3  | P1*8*| P1*4*| P2*8*| P2*4*\"\n      \"| P3*8*| P3*4*|  P8  | P8:4 | P4*8*| P4*4*| P8:5 | P8:6 | P8:7 | BI4  | BI8  | BI16 |  B0  |  B1  |  B2  |  B3  | \"\n      \"B0*8*| B0*4*| B1*8*| B1*4*| B2*8*| B2*4*| B3*8*| B3*4*|  B8  | B8:0 |B80*8*|B80*4*| B8:4 | B4*8*| B4*4*| B8:5 | B8:6 | B8:7 |\\n\",\n      0x1D4uLL,\n      1uLL,\n      v1);\n    fwrite(\n      \" -----------------------------------------------------------------------------------------------------------------\"\n      \"------------------------------------------------------------------------------------------------------------------\"\n      \"------------------------------------------------------------------------------------------------------------------\"\n      \"---------------------------------------------------------------------------------------------------------------------------- \\n\",\n      0x1D4uLL,\n      1uLL,\n      v1);\n  }\nLABEL_5:\n  v2 = 0LL;\n  fprintf(v1, \"|%4s/%s\", \"9.3\", \"(FRExt)\");\n  timer = time(0LL);\n  time(&timer);\n  v3 = localtime(&timer);\n  strftime(&s, 0x3E8uLL, \"%d-%b-%Y\", v3);\n  fprintf(v1, \"| %1.5s |\", &s);\n  strftime(&s, 0x3E8uLL, \"%H:%M:%S\", v3);\n  fprintf(v1, \" %1.5s |\", &s);\n  v4 = dest;\n  v5 = (char *)dest + 224;\n  do\n  {\n    v6 = strlen(v5) - 20;\n    if ( v6 < 0 )\n      v6 = 0;\n    v18[v2] = v4[(unsigned int)(v2 + v6) + 224];\n    ++v2;\n  }\n  while ( v2 != 20 );\n  fprintf(v1, \"%20.20s|\", v18);\n  fprintf(v1, \"%3d |\", (unsigned int)dword_4FA0D8);\n  fprintf(v1, \"%3d |\", *((unsigned int *)off_49F6D0 + 10));\n  fprintf(v1, \"  %d/%d  |\", *((unsigned int *)dest + 720), *((unsigned int *)dest + 721));\n  if ( *((_DWORD *)off_49F6D0 + 18116) )\n  {\n    v7 = (unsigned int)(*((_DWORD *)off_49F6D8 + 5) - dword_49FBB0);\n    dword_49FBB0 = *((_DWORD *)off_49F6D8 + 5);\n  }\n  else\n  {\n    v7 = *((unsigned int *)off_49F6D8 + 176);\n  }\n  fprintf(v1, \" %9d|\", v7);\n  fprintf(v1, \" %2.4f| %2.4f| %2.4f|\", *(float *)off_49F6E0, *((float *)off_49F6E0 + 1), *((float *)off_49F6E0 + 2));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 221) - dword_49FC40));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 225) - dword_49FC50));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 222) - dword_49FC48));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 168) - xmmword_49FBA0));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 169) - DWORD1(xmmword_49FBA0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 170) - DWORD2(xmmword_49FBA0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 171) - HIDWORD(xmmword_49FBA0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 191) - DWORD1(xmmword_49FBE0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 195) - dword_49FBF4));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 192) - DWORD2(xmmword_49FBE0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 182) - xmmword_49FBC0));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 183) - DWORD1(xmmword_49FBC0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 184) - DWORD2(xmmword_49FBC0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 185) - HIDWORD(xmmword_49FBC0)));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 19));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 94));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 20));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 95));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 21));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 96));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 190) - xmmword_49FBE0));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 186) - xmmword_49FBD0));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 22));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 97));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 187) - DWORD1(xmmword_49FBD0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 188) - DWORD2(xmmword_49FBD0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 189) - HIDWORD(xmmword_49FBD0)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 206) - DWORD1(xmmword_49FC20)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 210) - dword_49FC34));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 207) - DWORD2(xmmword_49FC20)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 197) - xmmword_49FC00));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 198) - DWORD1(xmmword_49FC00)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 199) - DWORD2(xmmword_49FC00)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 200) - HIDWORD(xmmword_49FC00)));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 33));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 108));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 34));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 109));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 35));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 110));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 36));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 111));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 205) - xmmword_49FC20));\n  fprintf(\n    v1,\n    \" %5d|\",\n    (unsigned int)(*((_DWORD *)off_49F6D8 + 10) + *((_DWORD *)off_49F6D8 + 11) - dword_49FC58 - dword_49FC60));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 11) - dword_49FC60));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 10) - dword_49FC58));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 201) - xmmword_49FC10));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 37));\n  fprintf(v1, \" %5d|\", *((unsigned int *)off_49F6D8 + 112));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 202) - DWORD1(xmmword_49FC10)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 203) - DWORD2(xmmword_49FC10)));\n  fprintf(v1, \" %5d|\", (unsigned int)(*((_DWORD *)off_49F6D8 + 204) - HIDWORD(xmmword_49FC10)));\n  fputc(10, v1);\n  v9 = off_49F6D8;\n  dword_49FC40 = *((_DWORD *)off_49F6D8 + 221);\n  dword_49FC50 = *((_DWORD *)off_49F6D8 + 225);\n  dword_49FC48 = *((_DWORD *)off_49F6D8 + 222);\n  *(__int128 *)((char *)off_49F6D8 + 168) = 0LL;\n  *(__int128 *)((char *)v9 + 152) = 0LL;\n  *(__int128 *)((char *)v9 + 136) = 0LL;\n  *(__int128 *)((char *)v9 + 120) = 0LL;\n  *(__int128 *)((char *)v9 + 104) = 0LL;\n  *(__int128 *)((char *)v9 + 88) = 0LL;\n  *(__int128 *)((char *)v9 + 72) = 0LL;\n  *((_QWORD *)v9 + 23) = 0LL;\n  *(__int128 *)((char *)v9 + 468) = 0LL;\n  *(__int128 *)((char *)v9 + 452) = 0LL;\n  *(__int128 *)((char *)v9 + 436) = 0LL;\n  *(__int128 *)((char *)v9 + 420) = 0LL;\n  *(__int128 *)((char *)v9 + 404) = 0LL;\n  *(__int128 *)((char *)v9 + 388) = 0LL;\n  *(__int128 *)((char *)v9 + 372) = 0LL;\n  *(_QWORD *)((char *)v9 + 484) = 0LL;\n  v10 = *(__int128 *)((char *)v9 + 728);\n  v11 = *(__int128 *)((char *)v9 + 744);\n  v12 = *(__int128 *)((char *)v9 + 772);\n  xmmword_49FBE0 = *(__int128 *)((char *)v9 + 760);\n  xmmword_49FBD0 = v11;\n  xmmword_49FBC0 = v10;\n  *(__int128 *)((char *)&xmmword_49FBE0 + 12) = v12;\n  v13 = *(__int128 *)((char *)v9 + 788);\n  v14 = *(__int128 *)((char *)v9 + 804);\n  v15 = *(__int128 *)((char *)v9 + 820);\n  *(__int128 *)((char *)&xmmword_49FC20 + 12) = v9[52];\n  xmmword_49FC20 = v15;\n  xmmword_49FC10 = v14;\n  xmmword_49FC00 = v13;\n  dword_49FC58 = *((_DWORD *)v9 + 10);\n  dword_49FC60 = *((_DWORD *)v9 + 11);\n  xmmword_49FBA0 = v9[42];\n  dword_4FA0DC = 0;\n  return fclose(v1);\n}\n", 
            "funcStartAddr": "0x426cc0L", 
            "funcEndAddr": "0x427756L", 
            "funcName": "sub_426CC0"
        }, 
        {
            "decompiledFuncCode": "int sub_427770()\n{\n  int v0; // ecx\n  __int128 *v1; // rax\n  _DWORD *v2; // rdx\n  int v3; // edi\n  signed __int64 i; // rsi\n  float v5; // xmm0_4\n  float v6; // xmm1_4\n  FILE *v7; // rcx\n  const char *v8; // rdi\n  size_t v9; // rsi\n  const char *v10; // rdi\n  size_t v11; // rsi\n  __int64 v12; // rdx\n  __int64 v13; // rdx\n  __int64 v14; // rdx\n  _DWORD *v15; // rax\n  int v16; // ecx\n  int v17; // ebp\n  int v18; // ebx\n  int v19; // eax\n  size_t v20; // rdx\n  const char *v21; // rsi\n  int v22; // eax\n  size_t v23; // r14\n  size_t v24; // rdx\n  _DWORD *v25; // rax\n  int v26; // ebp\n  int v27; // ebx\n  int v28; // eax\n  size_t v29; // rdx\n  const char *v30; // rsi\n  unsigned int v31; // er15\n  __int64 v32; // rcx\n  __int64 v33; // r8\n  __int64 v34; // r9\n  signed int v35; // er9\n  signed int v36; // ebx\n  const char *v37; // rdi\n  int v38; // eax\n  FILE *v39; // rcx\n  const char *v40; // rdi\n  size_t v41; // rsi\n  const char *v42; // rdi\n  size_t v43; // rsi\n  int v44; // eax\n  FILE *v45; // rcx\n  const char *v46; // rdi\n  size_t v47; // rsi\n  int v48; // eax\n  FILE *v49; // rcx\n  const char *v50; // rdi\n  size_t v51; // rsi\n  const char *v52; // rdi\n  size_t v53; // rsi\n  int v54; // ebx\n  int v55; // ebx\n  float v56; // xmm0_4\n  float v57; // xmm1_4\n  float v58; // xmm2_4\n  int v59; // ebx\n  float v60; // xmm1_4\n  int result; // eax\n  FILE *v62; // rax\n  __int64 v63[2]; // [rsp+0h] [rbp-B8h]\n  int v64[2]; // [rsp+34h] [rbp-84h]\n  int v65; // [rsp+3Ch] [rbp-7Ch]\n  char s[2]; // [rsp+40h] [rbp-78h]\n\n  v0 = dword_4F9FD8;\n  v64[0] = 0;\n  v1 = off_49F6D8;\n  v2 = (_DWORD *)((char *)off_49F6D8 + 1084);\n  v3 = 0;\n  for ( i = -8LL; ; i += 2LL )\n  {\n    v64[i] = *(_DWORD *)((char *)v1 + 2 * i + 1344)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1464)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1444)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1424)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1404)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1364)\n           + *(_DWORD *)((char *)v1 + 2 * i + 1384)\n           + *v2\n           + *(v2 - 1)\n           + *(v2 - 2)\n           + *(v2 - 3)\n           + *(v2 - 4)\n           + *(v2 - 5)\n           + *(v2 - 6)\n           + *(v2 - 7)\n           + *(v2 - 8)\n           + *(v2 - 9)\n           + *(v2 - 10)\n           + *(v2 - 11)\n           + *(v2 - 12)\n           + *(v2 - 13)\n           + *(v2 - 14)\n           + v3;\n    if ( !i )\n      break;\n    v3 = *(&v65 + i);\n    v2 += 15;\n  }\n  v5 = (float)((float)(*((_DWORD *)dest + 309) + 1) * *((float *)off_49F6D0 + 12)) / (float)(*((_DWORD *)dest + 5) + 1);\n  v6 = (float)(*((_DWORD *)dest + 2) + v0);\n  *((float *)v1 + 179) = (float)((float)*((signed int *)v1 + 176) * v5) / v6;\n  *((float *)v1 + 180) = (float)((float)*((signed int *)v1 + 177) * v5) / v6;\n  *((float *)v1 + 181) = (float)((float)*((signed int *)v1 + 178) * v5) / v6;\n  fwrite(\"-------------------------------------------------------------------------------\\n\", 0x50uLL, 1uLL, stdout);\n  fprintf(\n    stdout,\n    \" Freq. for encoded bitstream       : %1.0f\\n\",\n    (float)(*((float *)off_49F6D0 + 12) / (float)(*((_DWORD *)dest + 5) + 1)));\n  if ( *((_DWORD *)dest + 6) )\n  {\n    v7 = stdout;\n    if ( *((_DWORD *)dest + 7) )\n    {\n      v8 = \" Hadamard transform                : Used for QPel\\n\";\n      v9 = 51LL;\n    }\n    else\n    {\n      v8 = \" Hadamard transform                : Used\\n\";\n      v9 = 42LL;\n    }\n  }\n  else\n  {\n    v7 = stdout;\n    v8 = \" Hadamard transform                : Not used\\n\";\n    v9 = 46LL;\n  }\n  fwrite(v8, v9, 1uLL, v7);\n  fprintf(\n    stdout,\n    \" Image format                      : %dx%d\\n\",\n    *((unsigned int *)dest + 16),\n    *((unsigned int *)dest + 17));\n  if ( *((_DWORD *)dest + 19) )\n  {\n    v10 = \" Error robustness                  : On\\n\";\n    v11 = 40LL;\n  }\n  else\n  {\n    v10 = \" Error robustness                  : Off\\n\";\n    v11 = 41LL;\n  }\n  fwrite(v10, v11, 1uLL, stdout);\n  fprintf(stdout, \" Search range                      : %d\\n\", *((unsigned int *)dest + 8));\n  fprintf(stdout, \" Total number of references        : %d\\n\", *((unsigned int *)dest + 9));\n  v12 = *((unsigned int *)dest + 10);\n  if ( !(_DWORD)v12 )\n    v12 = *((unsigned int *)dest + 9);\n  fprintf(stdout, \" References for P slices           : %d\\n\", v12);\n  if ( *((_DWORD *)dest + 309) )\n  {\n    v13 = *((unsigned int *)dest + 11);\n    if ( !(_DWORD)v13 )\n      v13 = *((unsigned int *)dest + 9);\n    fprintf(stdout, \" List0 references for B slices     : %d\\n\", v13);\n    v14 = *((unsigned int *)dest + 12);\n    if ( !(_DWORD)v14 )\n      v14 = *((unsigned int *)dest + 9);\n    fprintf(stdout, \" List1 references for B slices     : %d\\n\", v14);\n  }\n  fprintf(stdout, \" Total encoding time for the seq.  : %.3f sec \\n\", (double)dword_4FA154 * 0.001);\n  fprintf(stdout, \" Total ME time for sequence        : %.3f sec \\n\", (double)dword_4FA110 * 0.001);\n  fwrite(\" Sequence type                     :\", 0x24uLL, 1uLL, stdout);\n  v15 = dest;\n  v16 = *((_DWORD *)dest + 309);\n  if ( v16 <= 0 )\n  {\n    if ( v16 || *((_DWORD *)dest + 318) )\n      fprintf(\n        stdout,\n        \" I-P-P-SP-P (QP: I %d, P %d, SP (%d, %d)) \\n\",\n        *((unsigned int *)dest + 3),\n        *((unsigned int *)dest + 4),\n        *((unsigned int *)dest + 319),\n        *((unsigned int *)dest + 320));\n    else\n      fprintf(stdout, \" IPPP (QP: I %d, P %d) \\n\", *((unsigned int *)dest + 3), *((unsigned int *)dest + 4));\n  }\n  else if ( *((_DWORD *)dest + 330) )\n  {\n    fprintf(\n      stdout,\n      \" Pyramid (QP: I %d, P %d, B %d) \\n\",\n      *((unsigned int *)dest + 3),\n      *((unsigned int *)dest + 4),\n      *((unsigned int *)dest + 310));\n  }\n  else\n  {\n    strcpy(s, \"I\");\n    v17 = 0;\n    do\n    {\n      v18 = v15[329];\n      v19 = strlen(s);\n      v20 = (unsigned int)(79 - v19);\n      if ( 79 - v19 < 0 )\n        v20 = 0LL;\n      if ( v18 )\n        v21 = (const char *)&off_486B09;\n      else\n        v21 = \"-B\";\n      strncat(s, v21, v20);\n      ++v17;\n      v15 = dest;\n    }\n    while ( v17 < *((_DWORD *)dest + 309) );\n    v22 = strlen(s);\n    v23 = 0LL;\n    v24 = (unsigned int)(79 - v22);\n    if ( 79 - v22 < 0 )\n      v24 = 0LL;\n    strncat(s, \"-P\", v24);\n    v25 = dest;\n    if ( *((_DWORD *)dest + 309) > 0 )\n    {\n      v26 = 0;\n      do\n      {\n        v27 = v25[329];\n        v28 = strlen(s);\n        v29 = (unsigned int)(79 - v28);\n        if ( 79 - v28 < 0 )\n          v29 = 0LL;\n        if ( v27 )\n          v30 = (const char *)&off_486B09;\n        else\n          v30 = \"-B\";\n        strncat(s, v30, v29);\n        ++v26;\n        v25 = dest;\n      }\n      while ( v26 < *((_DWORD *)dest + 309) );\n    }\n    v31 = 79 - strlen(s);\n    if ( (v31 & 0x80000000) == 0 )\n      v23 = v31;\n    strncat(s, \"-P\", v23);\n    v32 = *((unsigned int *)dest + 3);\n    v33 = *((unsigned int *)dest + 4);\n    v34 = *((unsigned int *)dest + 310);\n    if ( *((_DWORD *)dest + 329) )\n    {\n      v35 = *((_DWORD *)dest + 311) + v34;\n      v36 = 51;\n      if ( v35 < 52 )\n        v36 = v35;\n      if ( v36 < 0 )\n        v36 = 0;\n      fprintf(stdout, \" %s (QP: I %d, P %d, RB %d) \\n\", s, v32, v33, (unsigned int)v36);\n    }\n    else\n    {\n      fprintf(stdout, \" %s (QP: I %d, P %d, B %d) \\n\", s, v32, v33, v34);\n    }\n  }\n  if ( *((_DWORD *)dest + 589) )\n    v37 = \" Entropy coding method             : CABAC\\n\";\n  else\n    v37 = \" Entropy coding method             : CAVLC\\n\";\n  fwrite(v37, 0x2BuLL, 1uLL, stdout);\n  fprintf(stdout, \" Profile/Level IDC                 : (%d,%d)\\n\", *(unsigned int *)dest, *((unsigned int *)dest + 1));\n  v38 = *((_DWORD *)dest + 609);\n  if ( v38 == 2 )\n  {\n    v39 = stdout;\n    v40 = \" Search range restrictions         : none\\n\";\n    v41 = 42LL;\n  }\n  else\n  {\n    v39 = stdout;\n    if ( v38 == 1 )\n    {\n      v40 = \" Search range restrictions         : older reference frames\\n\";\n      v41 = 60LL;\n    }\n    else\n    {\n      v40 = \" Search range restrictions         : smaller blocks and older reference frames\\n\";\n      v41 = 79LL;\n    }\n  }\n  fwrite(v40, v41, 1uLL, v39);\n  if ( *((_DWORD *)dest + 616) )\n  {\n    v42 = \" RD-optimized mode decision        : used\\n\";\n    v43 = 42LL;\n  }\n  else\n  {\n    v42 = \" RD-optimized mode decision        : not used\\n\";\n    v43 = 46LL;\n  }\n  fwrite(v42, v43, 1uLL, stdout);\n  v44 = *((_DWORD *)dest + 591);\n  if ( v44 == 1 )\n  {\n    v45 = stdout;\n    v46 = \" Data Partitioning Mode            : 3 partitions \\n\";\n  }\n  else\n  {\n    if ( !v44 )\n    {\n      v45 = stdout;\n      v46 = \" Data Partitioning Mode            : 1 partition \\n\";\n      v47 = 50LL;\n      goto LABEL_70;\n    }\n    v45 = stdout;\n    v46 = \" Data Partitioning Mode            : not supported\\n\";\n  }\n  v47 = 51LL;\nLABEL_70:\n  fwrite(v46, v47, 1uLL, v45);\n  v48 = *((_DWORD *)dest + 590);\n  if ( v48 == 1 )\n  {\n    v49 = stdout;\n    v50 = \" Output File Format                : RTP Packet File Format \\n\";\n    v51 = 61LL;\n  }\n  else if ( v48 )\n  {\n    v49 = stdout;\n    v50 = \" Output File Format                : not supported\\n\";\n    v51 = 51LL;\n  }\n  else\n  {\n    v49 = stdout;\n    v50 = \" Output File Format                : H.264 Bit Stream File Format \\n\";\n    v51 = 67LL;\n  }\n  fwrite(v50, v51, 1uLL, v49);\n  if ( *((_DWORD *)dest + 832) )\n  {\n    v52 = \" Residue Color Transform           : used\\n\";\n    v53 = 42LL;\n  }\n  else\n  {\n    v52 = \" Residue Color Transform           : not used\\n\";\n    v53 = 46LL;\n  }\n  fwrite(v52, v53, 1uLL, stdout);\n  fwrite(\"------------------ Average data all frames  -----------------------------------\\n\", 0x50uLL, 1uLL, stdout);\n  fprintf(stdout, \" SNR Y(dB)                         : %5.2f\\n\", *((float *)off_49F6E0 + 15));\n  fprintf(stdout, \" SNR U(dB)                         : %5.2f\\n\", *((float *)off_49F6E0 + 16));\n  fprintf(stdout, \" SNR V(dB)                         : %5.2f\\n\", *((float *)off_49F6E0 + 17));\n  v54 = *((_DWORD *)off_49F6D8 + 176) + *((_DWORD *)off_49F6D8 + 177);\n  if ( dword_4F9FD8 )\n  {\n    v55 = *((_DWORD *)off_49F6D8 + 372) + *((_DWORD *)off_49F6D8 + 178) + v54;\n    LODWORD(v63[0]) = *((_DWORD *)off_49F6D8 + 372);\n    fprintf(stdout, \" Total bits                        : %d (I %5d, P %5d, B %d NVB %d) \\n\", (unsigned int)v55, v63[0]);\n    v56 = (float)((float)(*((_DWORD *)dest + 309) + 1) * *((float *)off_49F6D0 + 12))\n        / (float)(*((_DWORD *)dest + 5) + 1);\n    v57 = (float)v55 * v56;\n    v58 = (float)(*((_DWORD *)dest + 2) + dword_4F9FD8);\n  }\n  else\n  {\n    v59 = *((_DWORD *)off_49F6D8 + 372) + v54;\n    fprintf(stdout, \" Total bits                        : %d (I %5d, P %5d, NVB %d) \\n\", (unsigned int)v59);\n    v56 = *((float *)off_49F6D0 + 12) / (float)(*((_DWORD *)dest + 5) + 1);\n    v57 = (float)v59 * v56;\n    v58 = (float)*((signed int *)dest + 2);\n  }\n  v60 = v57 / v58;\n  *((float *)off_49F6D8 + 3) = v60;\n  fprintf(stdout, \" Bit rate (kbit/s)  @ %2.2f Hz     : %5.2f\\n\", v56, (float)(v60 / 1000.0));\n  fprintf(stdout, \" Bits to avoid Startcode Emulation : %d \\n\", *((unsigned int *)off_49F6D8 + 7));\n  fprintf(stdout, \" Bits for parameter sets           : %d \\n\", *((unsigned int *)off_49F6D8 + 372));\n  fwrite(\"-------------------------------------------------------------------------------\\n\", 0x50uLL, 1uLL, stdout);\n  fprintf(stdout, \"Exit JM %s encoder ver %s \", \"9 (FRExt)\", \"9.3\");\n  fputc(10, stdout);\n  result = (signed int)dest;\n  if ( *((_DWORD *)dest + 807) )\n  {\n    v62 = fopen(\"stat_frame.dat\", \"a\");\n    qword_4F9F28 = v62;\n    if ( v62 )\n    {\n      fwrite(\n        \" ---------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"----------------------------------------------------------------------------------------------------------------\"\n        \"------------------ \\n\",\n        0x1D4uLL,\n        1uLL,\n        v62);\n      result = fclose(qword_4F9F28);\n    }\n    else\n    {\n      result = snprintf(byte_4F8250, 0x12CuLL, \"Error open file %s  \\n\", \"stat_frame.dat.dat\");\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x427770L", 
            "funcEndAddr": "0x428175L", 
            "funcName": "sub_427770"
        }, 
        {
            "decompiledFuncCode": "int sub_428180()\n{\n  __int128 v1; // [rsp+0h] [rbp-28h]\n  __int128 v2; // [rsp+10h] [rbp-18h]\n  __int64 v3; // [rsp+20h] [rbp-8h]\n\n  v3 = 14700694778159190LL;\n  v2 = xmmword_4909A0;\n  v1 = xmmword_490990;\n  printf(\n    \"------------------------------- JM %s %s --------------------------------\\n\",\n    \"9.3\",\n    \"(FRExt)\",\n    xmmword_490990,\n    xmmword_4909A0,\n    14700694778159190LL);\n  printf(\" Input YUV file                    : %s \\n\", (char *)dest + 224);\n  printf(\" Output H.264 bitstream            : %s \\n\", (char *)dest + 424);\n  if ( dword_4FA124 != -1 )\n    printf(\" Output YUV file                   : %s \\n\", (char *)dest + 624);\n  printf(\" YUV Format                        : %s \\n\", (char *)&v1 + 10 * *((signed int *)off_49F6D0 + 18175));\n  printf(\n    \" Frames to be encoded I-P/B        : %d/%d\\n\",\n    *((unsigned int *)dest + 2),\n    (unsigned int)(*((_DWORD *)dest + 309) * (*((_DWORD *)dest + 2) - 1)));\n  printf(\" PicInterlace / MbInterlace        : %d/%d\\n\", *((unsigned int *)dest + 720), *((unsigned int *)dest + 721));\n  printf(\" Transform8x8Mode                  : %d\\n\", *((unsigned int *)dest + 805));\n  puts(\"-------------------------------------------------------------------------------\");\n  puts(\"  Frame  Bit/pic WP QP   SnrY    SnrU    SnrV    Time(ms) MET(ms) Frm/Fld   I D\");\n  return puts(\"-------------------------------------------------------------------------------\");\n}\n", 
            "funcStartAddr": "0x428180L", 
            "funcEndAddr": "0x4282adL", 
            "funcName": "sub_428180"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4282B0()\n{\n  unsigned int v0; // ebx\n  __int64 v1; // rdx\n  _QWORD *v2; // rax\n  __int64 v3; // rdx\n  int v4; // ebx\n  __int64 v5; // rdx\n\n  v0 = sub_43EF90(&qword_4F9EC0, *((_DWORD *)off_49F6D0 + 15), *((_DWORD *)off_49F6D0 + 13));\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n    v0 += sub_43F100((__int64)off_49F6D0, *((_DWORD *)off_49F6D0 + 16), *((_DWORD *)off_49F6D0 + 14), &qword_4F9E98, 2u);\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    v1 = *((unsigned int *)off_49F6D0 + 13);\n    sub_43EDD0((__int64)off_49F6D0, &qword_4F9EC8, (__int64)qword_4F9EC0, *((_DWORD *)off_49F6D0 + 15), &qword_4F9EB8);\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      qword_4F9EA0 = calloc(2uLL, 8uLL);\n      if ( !qword_4F9EA0 )\n        sub_43EF40(0LL, (__int64)\"init_global_buffers: imgUV_org_top\");\n      v2 = calloc(2uLL, 8uLL);\n      qword_4F9E90 = v2;\n      if ( !v2 )\n        sub_43EF40(0LL, (__int64)\"init_global_buffers: imgUV_org_bot\");\n      v3 = *((unsigned int *)off_49F6D0 + 14);\n      v4 = (unsigned __int64)sub_43EDD0(\n                               (__int64)v2,\n                               qword_4F9EA0,\n                               *(_QWORD *)qword_4F9E98,\n                               *((_DWORD *)off_49F6D0 + 16),\n                               v2)\n         + v0;\n      v5 = *((unsigned int *)off_49F6D0 + 14);\n      v0 = (unsigned __int64)sub_43EDD0(\n                               (__int64)off_49F6D0,\n                               (_QWORD *)qword_4F9EA0 + 1,\n                               *((_QWORD *)qword_4F9E98 + 1),\n                               *((_DWORD *)off_49F6D0 + 16),\n                               (_QWORD *)qword_4F9E90 + 1)\n         + v4\n         + 32;\n    }\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x4282b0L", 
            "funcEndAddr": "0x4283f5L", 
            "funcName": "sub_4282B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_428400(__int64 a1, __int64 a2)\n{\n  int v2; // er14\n  _DWORD *v3; // rax\n  __int64 v4; // rax\n  int v5; // ebp\n  int v6; // ebx\n  unsigned int v7; // ebx\n  _DWORD *v8; // rax\n  int v9; // er14\n  char *v10; // rbp\n  void *v11; // rax\n  _QWORD *v12; // rdi\n  _DWORD *v13; // rbp\n  int v14; // er14\n  __int64 v15; // rbx\n  signed __int64 v16; // rbp\n  int v17; // ebx\n  int v18; // ebp\n  int v19; // ebx\n  int v20; // ebp\n  int v21; // ebp\n  _DWORD *v22; // rax\n\n  qword_4F9EE8 = malloc(8LL * *((signed int *)off_49F6D0 + 9));\n  if ( !qword_4F9EE8 )\n    sub_43EF40(0LL, (__int64)\"init_global_buffers: last_P_no\");\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    qword_4F9EE0 = malloc(16LL * *((signed int *)off_49F6D0 + 9));\n    if ( !qword_4F9EE0 )\n      sub_43EF40(0LL, (__int64)\"init_global_buffers: last_P_no\");\n  }\n  v2 = sub_4282B0();\n  v3 = dest;\n  if ( *((_DWORD *)dest + 321) || *((_DWORD *)dest + 322) || *((_DWORD *)dest + 15) )\n  {\n    v4 = sub_43F7A0((__int64)dest, 15, 3, &qword_4F9F88, 6u);\n    v5 = v2 + v4 + sub_43F7A0(v4, 15, 3, &qword_4F9F80, 6u);\n    v2 = v5 + (unsigned __int64)sub_43F900((__int64 *)&qword_4F9F78, 6, 15, 15, 3);\n    v3 = dest;\n  }\n  if ( v3[309] || v3[329] > 0 )\n  {\n    v6 = v2\n       + (unsigned __int64)sub_43FF00(\n                             *((unsigned int *)off_49F6D0 + 15),\n                             *((_DWORD *)off_49F6D0 + 13) / 4,\n                             *((_DWORD *)off_49F6D0 + 15) / 4,\n                             &qword_4F9E08,\n                             2u);\n    v2 = v6\n       + (unsigned __int64)sub_43FD90(&qword_4F9E00, *((_DWORD *)off_49F6D0 + 13) / 4, *((_DWORD *)off_49F6D0 + 15) / 4);\n  }\n  v7 = v2\n     + (unsigned __int64)sub_43F410(\n                           &qword_4F9E78,\n                           *((_DWORD *)off_49F6D0 + 15) + 8,\n                           4 * *((_DWORD *)off_49F6D0 + 13) + 32);\n  v8 = dest;\n  if ( *((_DWORD *)dest + 616) == 2 )\n  {\n    v9 = sub_43F410(off_49F6E8, 16, 16);\n    v10 = (char *)dest;\n    v11 = calloc(*((signed int *)dest + 726), 8uLL);\n    v12 = off_49F6E8;\n    *((_QWORD *)off_49F6E8 + 2) = v11;\n    if ( !v11 )\n      sub_43EF40(0LL, (__int64)\"init_global_buffers: decref\");\n    v13 = v10 + 2904;\n    v14 = v7 + v9;\n    if ( *v13 > 0 )\n    {\n      v15 = 0LL;\n      v16 = 0LL;\n      do\n      {\n        v14 += sub_43F100(\n                 (__int64)off_49F6D0,\n                 *((_DWORD *)off_49F6D0 + 15),\n                 *((_DWORD *)off_49F6D0 + 13),\n                 (_QWORD *)(v15 + v12[2]),\n                 *((_DWORD *)off_49F6D0 + 9) + 1);\n        ++v16;\n        v12 = off_49F6E8;\n        v15 += 8LL;\n      }\n      while ( v16 < *((signed int *)dest + 726) );\n    }\n    v17 = v14 + (unsigned __int64)sub_43EF90(v12 + 4, 4, 4);\n    v18 = v17\n        + (unsigned __int64)sub_43F100(\n                              (__int64)off_49F6D0,\n                              *((_DWORD *)off_49F6D0 + 15),\n                              *((_DWORD *)off_49F6D0 + 13),\n                              (_QWORD *)off_49F6E8 + 1,\n                              *((_DWORD *)dest + 726));\n    v19 = v18\n        + (unsigned __int64)sub_43F100(\n                              (__int64)off_49F6D0,\n                              *((_DWORD *)off_49F6D0 + 15),\n                              *((_DWORD *)off_49F6D0 + 13),\n                              (_QWORD *)off_49F6E8 + 3,\n                              *((_DWORD *)dest + 726));\n    v20 = v19\n        + (unsigned __int64)sub_43F2A0(\n                              *((unsigned int *)off_49F6D0 + 15),\n                              *((_DWORD *)off_49F6D0 + 13) / 16,\n                              (_QWORD *)off_49F6E8 + 5,\n                              *((_DWORD *)off_49F6D0 + 15) / 16);\n    v7 = v20\n       + (unsigned __int64)sub_43F2A0(\n                             *((unsigned int *)off_49F6D0 + 15),\n                             *((_DWORD *)off_49F6D0 + 15) / 16,\n                             (_QWORD *)off_49F6E8 + 6,\n                             *((_DWORD *)off_49F6D0 + 13) / 16);\n    v8 = dest;\n  }\n  if ( v8[727] )\n  {\n    v21 = v7\n        + (unsigned __int64)sub_43F2A0(\n                              (__int64)off_49F6D0,\n                              *((_DWORD *)off_49F6D0 + 13),\n                              &qword_4F9F40,\n                              *((_DWORD *)off_49F6D0 + 15));\n    v7 = v21\n       + (unsigned __int64)sub_43F2A0(\n                             *((unsigned int *)off_49F6D0 + 15),\n                             *((_DWORD *)off_49F6D0 + 13) / 8,\n                             &qword_4F9F58,\n                             *((_DWORD *)off_49F6D0 + 15) / 8);\n  }\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    v7 += sub_43EF90(&qword_4F9EA8, *((_DWORD *)off_49F6D0 + 15), *((_DWORD *)off_49F6D0 + 13));\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n      v7 += sub_43F100(\n              (__int64)off_49F6D0,\n              *((_DWORD *)off_49F6D0 + 16),\n              *((_DWORD *)off_49F6D0 + 14),\n              &qword_4F9E80,\n              2u);\n  }\n  v22 = dest;\n  if ( *((_DWORD *)dest + 823) )\n  {\n    v7 += sub_416FB0();\n    v22 = dest;\n  }\n  if ( v22[809] )\n    sub_4575D0();\n  return v7;\n}\n", 
            "funcStartAddr": "0x428400L", 
            "funcEndAddr": "0x428845L", 
            "funcName": "sub_428400"
        }, 
        {
            "decompiledFuncCode": "void sub_428850()\n{\n  sub_43F1B0(qword_4F9EC0);\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n    sub_43F1F0(qword_4F9E98, 2u);\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    sub_43EF70((void *)qword_4F9EC8, (void *)qword_4F9EB8);\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      sub_43EF70(*(void **)qword_4F9EA0, *(void **)qword_4F9E90);\n      sub_43EF70(*((void **)qword_4F9EA0 + 1), *((void **)qword_4F9E90 + 1));\n      free(qword_4F9EA0);\n      free(qword_4F9E90);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x428850L", 
            "funcEndAddr": "0x428900L", 
            "funcName": "sub_428850"
        }, 
        {
            "decompiledFuncCode": "_DWORD *sub_428900()\n{\n  _DWORD *v0; // rax\n  _DWORD *v1; // rax\n  void ***v2; // rdi\n  signed __int64 v3; // r14\n  void ***v4; // rdi\n  signed __int64 v5; // rbx\n  _DWORD *result; // rax\n\n  free(qword_4F9EE8);\n  free(qword_4F9EE0);\n  sub_428850();\n  v0 = dest;\n  if ( *((_DWORD *)dest + 321) || *((_DWORD *)dest + 322) || *((_DWORD *)dest + 15) )\n  {\n    sub_43FBC0(qword_4F9F88, 6u);\n    sub_43FBC0(qword_4F9F80, 6u);\n    sub_43FD20(qword_4F9F78, 6u, 0xFu);\n    v0 = dest;\n  }\n  if ( v0[309] || v0[329] > 0 )\n  {\n    sub_440140(qword_4F9E08, 2u);\n    sub_440100(qword_4F9E00);\n  }\n  sub_43FA90(qword_4F9E78);\n  sub_43FA90(*((void **)off_49F6D0 + 13));\n  sub_43FA90(*((void **)off_49F6D0 + 14));\n  free(*((void **)off_49F6D0 + 1771));\n  sub_43FA90(qword_4EA490);\n  v1 = dest;\n  if ( *((_DWORD *)dest + 54) )\n  {\n    free(*((void **)off_49F6D0 + 8973));\n    v1 = dest;\n  }\n  if ( v1[616] == 2 )\n  {\n    free(**(void ***)off_49F6E8);\n    free(*(void **)off_49F6E8);\n    free(**((void ***)off_49F6E8 + 4));\n    free(*((void **)off_49F6E8 + 4));\n    v2 = (void ***)*((_QWORD *)off_49F6E8 + 1);\n    if ( *((_DWORD *)dest + 726) > 0 )\n    {\n      v3 = 0LL;\n      do\n      {\n        free(*v2[v3]);\n        free(*(void **)(*((_QWORD *)off_49F6E8 + 1) + 8 * v3));\n        free(**(void ***)(*((_QWORD *)off_49F6E8 + 3) + 8 * v3));\n        free(*(void **)(*((_QWORD *)off_49F6E8 + 3) + 8 * v3));\n        v4 = *(void ****)(*((_QWORD *)off_49F6E8 + 2) + 8 * v3);\n        if ( *((_DWORD *)off_49F6D0 + 9) >= 0 )\n        {\n          v5 = -1LL;\n          do\n          {\n            free(*v4[v5 + 1]);\n            free(*(void **)(*(_QWORD *)(*((_QWORD *)off_49F6E8 + 2) + 8 * v3) + 8 * v5 + 8));\n            v4 = *(void ****)(*((_QWORD *)off_49F6E8 + 2) + 8 * v3);\n            ++v5;\n          }\n          while ( v5 < *((signed int *)off_49F6D0 + 9) );\n        }\n        free(v4);\n        ++v3;\n        v2 = (void ***)*((_QWORD *)off_49F6E8 + 1);\n      }\n      while ( v3 < *((signed int *)dest + 726) );\n    }\n    free(v2);\n    free(*((void **)off_49F6E8 + 3));\n    free(*((void **)off_49F6E8 + 2));\n    free(**((void ***)off_49F6E8 + 5));\n    free(*((void **)off_49F6E8 + 5));\n    free(**((void ***)off_49F6E8 + 6));\n    free(*((void **)off_49F6E8 + 6));\n    v1 = dest;\n  }\n  if ( v1[727] )\n  {\n    free(*(void **)qword_4F9F40);\n    free(qword_4F9F40);\n    free(*(void **)qword_4F9F58);\n    free(qword_4F9F58);\n  }\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    sub_43F1B0(qword_4F9EA8);\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n      sub_43F1F0(qword_4F9E80, 2u);\n  }\n  sub_43FBC0(*((void **)off_49F6D0 + 16), *((_DWORD *)off_49F6D0 + 18122));\n  result = dest;\n  if ( *((_DWORD *)dest + 823) )\n  {\n    sub_417380();\n    result = dest;\n  }\n  if ( result[809] )\n  {\n    result = 0LL;\n    sub_457730();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428900L", 
            "funcEndAddr": "0x428cc8L", 
            "funcName": "sub_428900"
        }, 
        {
            "decompiledFuncCode": "signed int *sub_428CD0()\n{\n  signed int *result; // rax\n  __int64 v1; // r14\n  signed __int64 v2; // rbx\n  __int64 v3; // rbx\n  signed __int64 v4; // r14\n\n  result = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 15) >= 2 )\n  {\n    v1 = 0LL;\n    v2 = 0LL;\n    do\n    {\n      memcpy(\n        *(void **)((char *)qword_4F9EA8 + v1),\n        *(const void **)(*(_QWORD *)(qword_4F9E38 + 6424) + 8 * v2),\n        2LL * result[13]);\n      memcpy(\n        *(void **)((char *)qword_4F9EA8 + v1 + 8),\n        *(const void **)(*(_QWORD *)(qword_4F9E10 + 6424) + 8 * v2++),\n        2LL * *((signed int *)off_49F6D0 + 13));\n      result = (signed int *)off_49F6D0;\n      v1 += 16LL;\n    }\n    while ( v2 < *((_DWORD *)off_49F6D0 + 15) / 2 );\n  }\n  if ( result[18175] && result[16] >= 2 )\n  {\n    v3 = 0LL;\n    v4 = 0LL;\n    do\n    {\n      memcpy(\n        *(void **)(*(_QWORD *)qword_4F9E80 + 2 * v3),\n        *(const void **)(**(_QWORD **)(qword_4F9E38 + 6464) + v3),\n        2LL * result[14]);\n      memcpy(\n        *(void **)(*(_QWORD *)qword_4F9E80 + 2 * v3 + 8),\n        *(const void **)(**(_QWORD **)(qword_4F9E10 + 6464) + v3),\n        2LL * *((signed int *)off_49F6D0 + 14));\n      memcpy(\n        *(void **)(*((_QWORD *)qword_4F9E80 + 1) + 2 * v3),\n        *(const void **)(*(_QWORD *)(*(_QWORD *)(qword_4F9E38 + 6464) + 8LL) + v3),\n        2LL * *((signed int *)off_49F6D0 + 14));\n      memcpy(\n        *(void **)(*((_QWORD *)qword_4F9E80 + 1) + 2 * v3 + 8),\n        *(const void **)(*(_QWORD *)(*(_QWORD *)(qword_4F9E10 + 6464) + 8LL) + v3),\n        2LL * *((signed int *)off_49F6D0 + 14));\n      ++v4;\n      result = (signed int *)off_49F6D0;\n      v3 += 8LL;\n    }\n    while ( v4 < *((_DWORD *)off_49F6D0 + 16) / 2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428cd0L", 
            "funcEndAddr": "0x428e96L", 
            "funcName": "sub_428CD0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_428EA0(signed int a1, signed int a2, float a3, float a4, double a5)\n{\n  return a4 + (double)a1 * a5 <= a3 + (double)a2 * a5;\n}\n", 
            "funcStartAddr": "0x428ea0L", 
            "funcEndAddr": "0x428ecdL", 
            "funcName": "sub_428EA0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_428FA0(__int64 a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // r14\n  unsigned int v4; // ebp\n  char result; // al\n\n  v3 = (_QWORD *)a3;\n  if ( *(_DWORD *)(a1 + 72484) )\n  {\n    v4 = 0;\n    do\n      result = sub_428FF0(a1, a2, v3, v4++);\n    while ( v4 < *(_DWORD *)(a1 + 72484) );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428fa0L", 
            "funcEndAddr": "0x428fe6L", 
            "funcName": "sub_428FA0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_428FF0(__int64 a1, __int64 a2, _QWORD *a3, unsigned int a4)\n{\n  signed int v4; // ebp\n  signed int *v5; // rbx\n  int v6; // eax\n  bool v7; // cl\n  __int64 v8; // r14\n  signed __int64 v9; // r15\n  _BOOL4 v10; // edx\n  int v11; // edx\n  int v12; // er12\n  int v13; // esi\n  int v14; // eax\n  int v15; // eax\n  int v16; // eax\n  __int64 v17; // rbp\n  char *v18; // r15\n  __int64 v19; // r14\n  __int64 *v20; // r12\n  _DWORD *v21; // r13\n  __int64 v22; // rdx\n  signed int v23; // ST10_4\n  signed int *v24; // rbp\n  signed int v25; // ebx\n  __int64 v26; // rdi\n  __int64 v27; // rdx\n  signed int v28; // ST10_4\n  signed int v29; // ST08_4\n  __int64 *v30; // r12\n  _DWORD *v31; // r13\n  __int64 v32; // rdi\n  bool v34; // [rsp+Bh] [rbp-ADh]\n  unsigned int v35; // [rsp+Ch] [rbp-ACh]\n  int v36; // [rsp+10h] [rbp-A8h]\n  unsigned __int8 v37; // [rsp+14h] [rbp-A4h]\n  unsigned __int8 v38; // [rsp+15h] [rbp-A3h]\n  unsigned __int8 v39; // [rsp+16h] [rbp-A2h]\n  unsigned __int8 v40; // [rsp+17h] [rbp-A1h]\n  unsigned __int8 v41; // [rsp+18h] [rbp-A0h]\n  unsigned __int8 v42; // [rsp+19h] [rbp-9Fh]\n  unsigned __int8 v43; // [rsp+1Ah] [rbp-9Eh]\n  unsigned __int8 v44; // [rsp+1Bh] [rbp-9Dh]\n  unsigned __int8 v45; // [rsp+1Ch] [rbp-9Ch]\n  unsigned __int8 v46; // [rsp+1Dh] [rbp-9Bh]\n  unsigned __int8 v47; // [rsp+1Eh] [rbp-9Ah]\n  unsigned __int8 v48; // [rsp+1Fh] [rbp-99h]\n  int v49; // [rsp+28h] [rbp-90h]\n  int v50; // [rsp+2Ch] [rbp-8Ch]\n  _DWORD *v51; // [rsp+30h] [rbp-88h]\n  int v52; // [rsp+3Ch] [rbp-7Ch]\n  __int64 *v53; // [rsp+40h] [rbp-78h]\n  __int64 v54; // [rsp+48h] [rbp-70h]\n  int v55; // [rsp+50h] [rbp-68h]\n  int v56; // [rsp+54h] [rbp-64h]\n  char *v57; // [rsp+58h] [rbp-60h]\n  __int64 v58; // [rsp+60h] [rbp-58h]\n  __int64 v59; // [rsp+68h] [rbp-50h]\n  __int128 v60; // [rsp+70h] [rbp-48h]\n\n  v4 = a4;\n  v53 = a3;\n  v58 = a2;\n  v5 = (signed int *)a1;\n  v60 = xmmword_489710;\n  *(_DWORD *)(a1 + 72636) = 1;\n  LOBYTE(v6) = sub_436A80(a4, (unsigned int *)&v56, &v55);\n  v49 = 0;\n  v7 = v55 != 0;\n  v8 = *(_QWORD *)(a1 + 14168);\n  v35 = v4;\n  v9 = 632LL * v4;\n  v10 = *(_DWORD *)(v8 + v9 + 572) == 0;\n  HIDWORD(v60) = v10;\n  DWORD1(v60) = v10;\n  v11 = *(_DWORD *)(a1 + 72400);\n  if ( v55 == 16 && v11 )\n  {\n    LOBYTE(v6) = v55 != 0;\n    v7 = v55 != 0 && *(_DWORD *)(v8 + v9 + 532) == 0;\n  }\n  if ( *(_DWORD *)(a1 + 28) || (v12 = 4, v11) && *(_DWORD *)(v8 + v9 + 532) )\n    v12 = 2;\n  v13 = *(_DWORD *)(v8 + v9 + 612);\n  if ( v13 != 1 )\n  {\n    if ( v13 == 2 )\n    {\n      v49 = *(_DWORD *)(v8 + v9 + 552);\n      if ( v11 )\n      {\n        if ( v4 & 1 )\n        {\n          v14 = *(_DWORD *)(v8 + v9 + 532);\n          v50 = 1;\n          if ( !v14 )\n          {\nLABEL_17:\n            *(_DWORD *)(a1 + 12) = v4;\n            v17 = 0LL;\n            sub_436700();\n            v51 = (_DWORD *)(v8 + v9 + 532);\n            v18 = (char *)&unk_49F880;\n            v52 = v12;\n            do\n            {\n              if ( !v50 || (v34 = 1, !v17) )\n                v34 = v17 == 0 && v49 != 0;\n              v19 = 0LL;\n              v57 = v18;\n              v59 = v17;\n              do\n              {\n                LOBYTE(v6) = v34 || v19 != 0;\n                if ( (_BYTE)v6 == 1 )\n                {\n                  v54 = (unsigned int)v18[4 * v19 + v5[18175]];\n                  sub_4294A0((__int64)&v36, (__int64)v5, v35, (unsigned int)v17, (unsigned int)v19, v12);\n                  v6 = (unsigned __int8)v36\n                     + BYTE1(v36)\n                     + BYTE2(v36)\n                     + HIBYTE(v36)\n                     + v37\n                     + v38\n                     + v39\n                     + v40\n                     + v41\n                     + v42\n                     + v43\n                     + v44\n                     + v45\n                     + v46\n                     + v47;\n                  if ( v6 + v48 )\n                  {\n                    if ( *((_DWORD *)&v60 + v19) )\n                      LOBYTE(v6) = sub_429A50(\n                                     v58,\n                                     (__int64)&v36,\n                                     (__int64)v5,\n                                     v35,\n                                     v51[21],\n                                     v51[22],\n                                     v17,\n                                     v19,\n                                     v5[13],\n                                     0,\n                                     0);\n                    if ( v53 && (v54 & 0x80u) == 0LL )\n                    {\n                      v20 = v53;\n                      v21 = v51;\n                      v22 = (__int64)v5;\n                      v23 = v5[14];\n                      v24 = v5;\n                      v25 = v54;\n                      sub_429A50(*v53, (__int64)&v36, v22, v35, v51[21], v51[22], v59, v54, v23, 1, 0);\n                      v26 = v20[1];\n                      v12 = v52;\n                      v27 = (__int64)v24;\n                      v18 = v57;\n                      v28 = v24[14];\n                      v29 = v25;\n                      v5 = v24;\n                      v17 = v59;\n                      LOBYTE(v6) = sub_429A50(v26, (__int64)&v36, v27, v35, v21[21], v21[22], v59, v29, v28, 1, 1);\n                    }\n                  }\n                  if ( v17 )\n                  {\n                    if ( !v19 )\n                    {\n                      LOBYTE(v6) = (_BYTE)v51;\n                      if ( !*v51 )\n                      {\n                        LOBYTE(v6) = byte_4FA165;\n                        if ( byte_4FA165 )\n                        {\n                          v5[18159] = 2;\n                          LOBYTE(v6) = sub_4294A0((__int64)&v36, (__int64)v5, v35, (unsigned int)v17, 4LL, v12);\n                          if ( v36 )\n                          {\n                            LOBYTE(v6) = sub_429A50(\n                                           v58,\n                                           (__int64)&v36,\n                                           (__int64)v5,\n                                           v35,\n                                           v51[21],\n                                           v51[22],\n                                           v17,\n                                           4,\n                                           v5[13],\n                                           0,\n                                           0);\n                            if ( v53 )\n                            {\n                              if ( (v54 & 0x80u) == 0LL )\n                              {\n                                v30 = v53;\n                                v31 = v51;\n                                sub_429A50(\n                                  *v53,\n                                  (__int64)&v36,\n                                  (__int64)v5,\n                                  v35,\n                                  v51[21],\n                                  v51[22],\n                                  v17,\n                                  4,\n                                  v5[14],\n                                  1,\n                                  0);\n                                v32 = v30[1];\n                                v12 = v52;\n                                v18 = v57;\n                                LOBYTE(v6) = sub_429A50(\n                                               v32,\n                                               (__int64)&v36,\n                                               (__int64)v5,\n                                               v35,\n                                               v31[21],\n                                               v31[22],\n                                               v17,\n                                               4,\n                                               v5[14],\n                                               1,\n                                               1);\n                              }\n                            }\n                          }\n                          v5[18159] = 1;\n                        }\n                      }\n                    }\n                  }\n                }\n                ++v19;\n              }\n              while ( v19 != 4 );\n              ++v17;\n              v18 += 16;\n            }\n            while ( v17 != 2 );\n            goto LABEL_40;\n          }\n        }\n      }\n      v15 = *(_DWORD *)(v8 + v9 + 556);\n    }\n    else\n    {\n      v16 = v49;\n      LOBYTE(v16) = v56 != 0;\n      v49 = v16;\n      v15 = v7;\n    }\n    v50 = v15;\n    goto LABEL_17;\n  }\nLABEL_40:\n  v5[18159] = 0;\n  return v6;\n}\n", 
            "funcStartAddr": "0x428ff0L", 
            "funcEndAddr": "0x42949cL", 
            "funcName": "sub_428FF0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_4294A0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, int a6)\n{\n  __int64 v6; // r13\n  __int64 *v7; // rsi\n  __int64 *v8; // rdi\n  __int64 *v9; // rax\n  __int64 v10; // rbp\n  signed int v11; // ebx\n  __int64 v12; // r12\n  unsigned int v13; // ecx\n  signed int v14; // ebp\n  signed int v15; // er14\n  int v16; // eax\n  int v17; // eax\n  int v18; // ecx\n  int v19; // edx\n  __int64 v20; // r14\n  __int64 v21; // r11\n  signed __int64 v22; // rdi\n  bool v23; // sf\n  signed __int64 v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // r15\n  signed __int64 v27; // rdx\n  signed __int64 v28; // rcx\n  __int64 v29; // rbp\n  signed __int16 *v30; // r9\n  int v31; // er10\n  signed __int16 *v32; // rcx\n  int v33; // er8\n  int v34; // eax\n  int v35; // er9\n  int v36; // ebx\n  signed __int16 *v37; // rdx\n  int v38; // ecx\n  signed __int16 *v39; // rsi\n  int v40; // er11\n  int v41; // ebp\n  int v42; // edi\n  int v43; // er14\n  int v44; // esi\n  signed __int16 *v45; // rax\n  int v46; // er10\n  int v47; // ecx\n  bool v48; // cl\n  int v49; // edx\n  int v50; // eax\n  int v51; // ebp\n  bool v52; // al\n  __int64 v53; // rdi\n  __int64 v54; // rcx\n  int v55; // er10\n  int v56; // edx\n  bool v57; // dl\n  int v58; // eax\n  int v59; // esi\n  int v60; // ecx\n  int v61; // eax\n  bool v62; // cl\n  int v63; // edi\n  signed __int16 *v64; // rax\n  int v65; // er10\n  int v66; // ecx\n  bool v67; // cl\n  int v68; // edx\n  int v69; // eax\n  signed __int16 *v70; // rcx\n  signed __int16 *v71; // rsi\n  int v72; // edi\n  int v73; // ecx\n  int v74; // esi\n  bool v75; // cl\n  int v76; // er14\n  signed int v77; // er15\n  __int64 v78; // rdx\n  int v79; // ebp\n  signed __int64 v80; // rsi\n  int v81; // ebx\n  char v82; // di\n  char v83; // cl\n  unsigned int v84; // ecx\n  signed int v85; // ebp\n  bool v87; // [rsp+3h] [rbp-C5h]\n  int v88; // [rsp+4h] [rbp-C4h]\n  __int64 v89; // [rsp+8h] [rbp-C0h]\n  unsigned int v90; // [rsp+14h] [rbp-B4h]\n  __int64 v91; // [rsp+18h] [rbp-B0h]\n  int *v92; // [rsp+20h] [rbp-A8h]\n  int v93; // [rsp+2Ch] [rbp-9Ch]\n  signed int v94; // [rsp+30h] [rbp-98h]\n  int v95; // [rsp+34h] [rbp-94h]\n  int v96; // [rsp+38h] [rbp-90h]\n  int v97; // [rsp+3Ch] [rbp-8Ch]\n  __int64 v98; // [rsp+40h] [rbp-88h]\n  __int64 v99; // [rsp+48h] [rbp-80h]\n  __int64 v100; // [rsp+50h] [rbp-78h]\n  __int64 v101; // [rsp+58h] [rbp-70h]\n  __int64 v102; // [rsp+60h] [rbp-68h]\n  __int64 v103; // [rsp+68h] [rbp-60h]\n  __int64 v104; // [rsp+70h] [rbp-58h]\n  __int64 v105; // [rsp+78h] [rbp-50h]\n  char v106; // [rsp+80h] [rbp-48h]\n  int v107; // [rsp+84h] [rbp-44h]\n  int v108; // [rsp+88h] [rbp-40h]\n  int v109; // [rsp+8Ch] [rbp-3Ch]\n  int v110; // [rsp+90h] [rbp-38h]\n  int v111; // [rsp+94h] [rbp-34h]\n\n  v88 = a6;\n  v6 = a2;\n  v89 = a1;\n  v7 = *(__int64 **)(qword_4F9E30 + 6504);\n  v103 = *v7;\n  v91 = v7[1];\n  v8 = *(__int64 **)(qword_4F9E30 + 6480);\n  v9 = *(__int64 **)(qword_4F9E30 + 6488);\n  v10 = *(_QWORD *)(v6 + 14168);\n  v90 = a3;\n  v87 = (_DWORD)a4 == 0;\n  v102 = a5;\n  v11 = 1;\n  v95 = 4 * a5;\n  if ( (signed int)a5 < 4 )\n    v11 = 4 * a5;\n  v94 = v11;\n  v92 = (int *)(632LL * (signed int)a3 + v10 + 532);\n  v101 = *v8;\n  v100 = v8[1];\n  v99 = *v9;\n  v98 = v9[1];\n  v105 = a4;\n  v104 = (unsigned int)(a4 - 1);\n  v12 = 0LL;\n  do\n  {\n    v76 = v95;\n    if ( (_DWORD)v105 )\n      v76 = v12;\n    v77 = v12;\n    if ( (_DWORD)v105 )\n      v77 = v94;\n    sub_437200(v90, v104 + v76, v77 - v105, 1, &v106);\n    v16 = v108;\n    v78 = *(_QWORD *)(v6 + 14168);\n    v79 = *v92;\n    v80 = 632LL * v107;\n    v81 = *(_DWORD *)(v78 + v80 + 532);\n    byte_4FA165 = *v92 != v81;\n    v82 = v109;\n    if ( (unsigned int)(*(_DWORD *)(v6 + 24) - 3) <= 1 )\n    {\n      LOBYTE(v16) = 3;\n      if ( !(_DWORD)v102 )\n      {\n        if ( !*(_DWORD *)(v6 + 72400) )\n        {\n          if ( !v87 && *(_DWORD *)(v6 + 28) != 0 )\n            goto LABEL_76;\n          goto LABEL_75;\n        }\n        if ( (v87 || (v79 | v81) == 0) == 1 )\n        {\nLABEL_75:\n          LOBYTE(v16) = 4;\n          goto LABEL_76;\n        }\n      }\nLABEL_76:\n      *(_BYTE *)(v89 + v12) = v16;\n      goto LABEL_83;\n    }\n    v83 = 3;\n    if ( !(_DWORD)v102 )\n    {\n      if ( *(_DWORD *)(v6 + 72400) )\n      {\n        if ( (v87 || (v79 | v81) == 0) != 1 )\n          goto LABEL_81;\nLABEL_80:\n        v83 = 4;\n        goto LABEL_81;\n      }\n      if ( v87 || *(_DWORD *)(v6 + 28) == 0 )\n        goto LABEL_80;\n    }\nLABEL_81:\n    *(_BYTE *)(v89 + v12) = v83;\n    v84 = *(_DWORD *)(v78 + v80 + 72);\n    if ( v84 > 0xE || (v85 = 26112, !_bittest(&v85, v84)) )\n    {\n      v13 = *(v92 - 115);\n      if ( v13 > 0xE || (v14 = 26112, !_bittest(&v14, v13)) )\n      {\n        v15 = (v77 & 0xFFFFFFFC) + (v76 >> 2);\n        if ( (1 << v15) & *(_QWORD *)(v92 - 17) || (1 << ((v82 & 0xFC) + (v16 >> 2))) & *(_QWORD *)(v78 + v80 + 464) )\n        {\n          LOBYTE(v16) = v89;\n          *(_BYTE *)(v89 + v12) = 2;\n        }\n        else\n        {\n          if ( byte_4FA165 )\n            goto LABEL_87;\n          sub_436A10(v90, (unsigned int *)&v97, &v96);\n          v17 = (v15 >> 2) + 4 * v96;\n          v18 = v111 >> 2;\n          v19 = v110 >> 2;\n          v20 = (v15 & 3) + 4 * v97;\n          v21 = v17;\n          v22 = -1LL;\n          v23 = *(_WORD *)(*(_QWORD *)(v101 + 8 * v20) + 2LL * v17) < 0;\n          v24 = -1LL;\n          if ( !v23 )\n            v24 = *(_QWORD *)(*(_QWORD *)(v99 + 8 * v20) + 8 * v21);\n          v25 = v19;\n          v26 = v18;\n          if ( *(_WORD *)(*(_QWORD *)(v101 + 8LL * v19) + 2LL * v18) >= 0 )\n            v22 = *(_QWORD *)(*(_QWORD *)(v99 + 8LL * v19) + 8LL * v18);\n          v27 = -1LL;\n          v28 = -1LL;\n          if ( *(_WORD *)(*(_QWORD *)(v100 + 8 * v20) + 2 * v21) >= 0 )\n            v28 = *(_QWORD *)(*(_QWORD *)(v98 + 8 * v20) + 8 * v21);\n          if ( *(_WORD *)(*(_QWORD *)(v100 + 8 * v25) + 2 * v26) >= 0 )\n            v27 = *(_QWORD *)(*(_QWORD *)(v98 + 8 * v25) + 8 * v26);\n          if ( ((v29 = v103, v24 != v22) || v28 != v27) && (v28 != v22 || v24 != v27) )\n          {\nLABEL_87:\n            LOBYTE(v16) = v89;\n            *(_BYTE *)(v89 + v12) = 1;\n          }\n          else\n          {\n            *(_BYTE *)(v89 + v12) = 0;\n            v30 = *(signed __int16 **)(*(_QWORD *)(v29 + 8 * v20) + 8 * v21);\n            v31 = *v30;\n            if ( v24 == v28 )\n            {\n              v32 = *(signed __int16 **)(*(_QWORD *)(v29 + 8 * v25) + 8 * v26);\n              v93 = *v32;\n              v33 = v93 - v31;\n              if ( v93 - v31 < 1 )\n                v33 = v31 - v93;\n              v34 = v30[1];\n              v35 = v32[1];\n              v36 = v35 - v34;\n              if ( v35 - v34 < 1 )\n                v36 = v34 - v35;\n              v37 = *(signed __int16 **)(*(_QWORD *)(v91 + 8 * v20) + 8 * v21);\n              v38 = *v37;\n              v39 = *(signed __int16 **)(*(_QWORD *)(v91 + 8 * v25) + 8 * v26);\n              v40 = *v39;\n              v41 = v40 - v38;\n              if ( v40 - v38 < 1 )\n                v41 = *v37 - v40;\n              v42 = v37[1];\n              v43 = v39[1];\n              v44 = v43 - v42;\n              if ( v43 - v42 < 1 )\n                v44 = v42 - v43;\n              if ( v33 > 3 || v36 >= v88 || v41 > 3 || v44 >= v88 )\n              {\n                v55 = v31 - v40;\n                v56 = -v55;\n                if ( -v55 < 1 )\n                  v56 = v55;\n                v57 = v56 > 3;\n                v58 = v34 - v43;\n                v59 = -v58;\n                if ( -v58 < 1 )\n                  v59 = v58;\n                v60 = v38 - v93;\n                v61 = -v60;\n                if ( -v60 < 1 )\n                  v61 = v60;\n                v62 = v61 > 3;\n                v63 = v42 - v35;\n                v16 = -v63;\n                if ( -v63 < 1 )\n                  v16 = v63;\n                LOBYTE(v16) = v57 || v59 >= v88 || v62 || v16 >= v88;\n              }\n              else\n              {\n                LOBYTE(v16) = 0;\n              }\n              *(_BYTE *)(v89 + v12) = v16;\n            }\n            else\n            {\n              if ( v24 == v22 )\n              {\n                v45 = *(signed __int16 **)(*(_QWORD *)(v29 + 8 * v25) + 8 * v26);\n                v46 = v31 - *v45;\n                v47 = -v46;\n                if ( -v46 < 1 )\n                  v47 = v46;\n                v48 = v47 > 3;\n                v49 = v30[1] - v45[1];\n                v50 = v45[1] - v30[1];\n                if ( v50 < 1 )\n                  v50 = v49;\n                v51 = v88;\n                v52 = v48 || v50 >= v88;\n                v53 = v91;\n                v54 = *(_QWORD *)(v91 + 8 * v20);\n              }\n              else\n              {\n                v64 = *(signed __int16 **)(*(_QWORD *)(v91 + 8 * v25) + 8 * v26);\n                v65 = v31 - *v64;\n                v66 = -v65;\n                if ( -v65 < 1 )\n                  v66 = v65;\n                v67 = v66 > 3;\n                v68 = v30[1] - v64[1];\n                v69 = v64[1] - v30[1];\n                if ( v69 < 1 )\n                  v69 = v68;\n                v53 = v29;\n                v51 = v88;\n                v52 = v67 || v69 >= v88;\n                v54 = *(_QWORD *)(v91 + 8 * v20);\n              }\n              v70 = *(signed __int16 **)(v54 + 8 * v21);\n              v71 = *(signed __int16 **)(*(_QWORD *)(v53 + 8 * v25) + 8 * v26);\n              v72 = *v71 - *v70;\n              if ( v72 < 1 )\n                v72 = *v70 - *v71;\n              v73 = v70[1] - v71[1];\n              v74 = -v73;\n              if ( -v73 < 1 )\n                v74 = v73;\n              v75 = v52 || v72 > 3 || v74 >= v51;\n              LOBYTE(v16) = v89;\n              *(_BYTE *)(v89 + v12) = v75;\n            }\n          }\n        }\n      }\n    }\nLABEL_83:\n    ++v12;\n  }\n  while ( v12 != 16 );\n  return v16;\n}\n", 
            "funcStartAddr": "0x4294a0L", 
            "funcEndAddr": "0x429a45L", 
            "funcName": "sub_4294A0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_429A50(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6, int a7, signed int a8, signed int a9, int a10, int a11)\n{\n  unsigned int *v11; // rbx\n  __int64 v12; // rax\n  int v13; // ebp\n  signed int v14; // eax\n  int v15; // ebx\n  signed int v16; // er15\n  signed int v17; // er12\n  int v18; // er13\n  __int64 v19; // rbx\n  signed __int64 v20; // r10\n  int v21; // ecx\n  int v22; // er9\n  signed int v23; // er11\n  signed int v24; // er8\n  unsigned __int16 *v25; // rbp\n  unsigned __int16 *v26; // rsi\n  int v27; // edx\n  int v28; // eax\n  signed __int64 v29; // rdx\n  signed __int64 v30; // rax\n  int v31; // edx\n  int v32; // edx\n  signed __int64 v33; // r13\n  signed __int64 v34; // rdx\n  int v35; // er10\n  int v36; // er12\n  __int64 v37; // rcx\n  int v38; // er14\n  int v39; // er11\n  int v40; // er9\n  int v41; // ebx\n  int v42; // edi\n  signed __int64 v43; // r8\n  unsigned int v44; // edx\n  int v45; // ebp\n  int v46; // ecx\n  unsigned int v47; // er13\n  int v48; // ecx\n  int v49; // esi\n  int v50; // edi\n  int v51; // er8\n  int v52; // edx\n  int v53; // edx\n  int v54; // er12\n  int v55; // ebx\n  int v56; // ecx\n  int v57; // eax\n  int v58; // er14\n  int v59; // ecx\n  int v60; // edi\n  _BOOL4 v61; // eax\n  int v62; // eax\n  int v63; // edx\n  char v64; // cl\n  int v65; // ebx\n  int v66; // eax\n  __int16 v67; // dx\n  signed int v68; // ebx\n  int v69; // eax\n  __int16 v70; // cx\n  signed int v71; // er12\n  _WORD *v72; // r9\n  unsigned int v73; // eax\n  int v74; // er14\n  char v75; // cl\n  unsigned int v76; // edx\n  unsigned int v77; // ebx\n  int v79; // [rsp+8h] [rbp-120h]\n  unsigned int v80; // [rsp+10h] [rbp-118h]\n  _WORD *v81; // [rsp+18h] [rbp-110h]\n  int v82; // [rsp+20h] [rbp-108h]\n  signed int v83; // [rsp+2Ch] [rbp-FCh]\n  char v84; // [rsp+30h] [rbp-F8h]\n  int v85; // [rsp+34h] [rbp-F4h]\n  unsigned int v86; // [rsp+38h] [rbp-F0h]\n  __int64 v87; // [rsp+40h] [rbp-E8h]\n  signed int v88; // [rsp+48h] [rbp-E0h]\n  int v89; // [rsp+48h] [rbp-E0h]\n  int v90; // [rsp+50h] [rbp-D8h]\n  __int64 v91; // [rsp+58h] [rbp-D0h]\n  signed int v92; // [rsp+60h] [rbp-C8h]\n  int v93; // [rsp+64h] [rbp-C4h]\n  int v94; // [rsp+68h] [rbp-C0h]\n  int v95; // [rsp+6Ch] [rbp-BCh]\n  int v96; // [rsp+70h] [rbp-B8h]\n  __int64 v97; // [rsp+78h] [rbp-B0h]\n  __int64 v98; // [rsp+80h] [rbp-A8h]\n  __int64 v99; // [rsp+88h] [rbp-A0h]\n  _WORD *v100; // [rsp+98h] [rbp-90h]\n  __int64 v101; // [rsp+A8h] [rbp-80h]\n  __int64 v102; // [rsp+B0h] [rbp-78h]\n  int v103; // [rsp+B8h] [rbp-70h]\n  __int64 v104; // [rsp+C0h] [rbp-68h]\n  int v105; // [rsp+C8h] [rbp-60h]\n  int v106; // [rsp+CCh] [rbp-5Ch]\n  int v107; // [rsp+D8h] [rbp-50h]\n  int v108; // [rsp+DCh] [rbp-4Ch]\n  char v109; // [rsp+E0h] [rbp-48h]\n  int v110; // [rsp+F0h] [rbp-38h]\n  int v111; // [rsp+F4h] [rbp-34h]\n\n  v11 = (unsigned int *)(a3 + 72660);\n  if ( a10 )\n    v11 = (unsigned int *)(a3 + 72664);\n  v93 = a6;\n  v103 = a5;\n  v102 = a2;\n  v101 = a1;\n  v91 = a3;\n  if ( !a10 )\n  {\n    v83 = 16;\n    v13 = a7;\n    goto LABEL_7;\n  }\n  LODWORD(v12) = dword_48A400[4 * a7 + *(signed int *)(a3 + 72700)];\n  v83 = v12;\n  v13 = a7;\n  if ( (signed int)v12 > 0 )\n  {\nLABEL_7:\n    v84 = *v11 - 8;\n    v14 = 1;\n    v15 = 1;\n    if ( a8 < 4 )\n      v15 = 4 * a8;\n    v96 = v15;\n    v95 = 1 - a10;\n    v94 = v13 - 1;\n    v104 = a4;\n    if ( v13 )\n      v14 = a9;\n    v92 = v14;\n    v85 = 0;\n    v16 = 0;\n    v79 = 0;\n    v82 = 0;\n    while ( 1 )\n    {\n      v17 = 4 * a8;\n      if ( v13 )\n        v17 = v16;\n      v18 = v16;\n      if ( v13 )\n        v18 = v96;\n      sub_437200(v104, v17, v18, v95, &v109);\n      sub_437200(v104, v94 + v17, v18 - v13, v95, &v105);\n      v19 = *(_QWORD *)(v91 + 14168);\n      v20 = 632 * v104;\n      v21 = *(_DWORD *)(v19 + 632 * v104 + 532);\n      LOBYTE(v12) = 1;\n      if ( !v21 )\n        LOBYTE(v12) = *(_DWORD *)(v19 + 632LL * v106 + 532) != 0;\n      byte_4FA164 = v12;\n      v22 = v16;\n      if ( a10 != 0 && v83 == 8 )\n      {\n        if ( !v21 || (v22 = v85, *(_DWORD *)(v19 + 632LL * v106 + 532)) )\n        {\n          v22 = (v16 & 1) + 2 * (v16 & 0x7FFFFFFE);\n          v13 = a7;\n        }\n      }\n      if ( !v105 && *(_DWORD *)(v19 + v20 + 612) )\n        goto LABEL_114;\n      v23 = v92;\n      v24 = v92;\n      if ( ((unsigned __int8)v12 & (v13 != 0)) == 1 )\n      {\n        v23 = a9 << (v21 == 0);\n        v24 = a9 << (*(_DWORD *)(v19 + 632LL * v106 + 532) == 0);\n      }\n      v25 = (unsigned __int16 *)(*(_QWORD *)(v101 + 8LL * v111) + 2LL * v110);\n      v26 = (unsigned __int16 *)(*(_QWORD *)(v101 + 8LL * v108) + 2LL * v107);\n      v27 = *(_DWORD *)(v19 + 632LL * v106 + 12);\n      if ( a10 )\n      {\n        v28 = *(_DWORD *)(v91 + 4LL * a11 + 72716);\n        v29 = (unsigned int)(v28 + v27);\n        if ( (signed int)v29 >= 52 )\n          v29 = 51LL;\n        if ( (signed int)v29 < 0 )\n          v29 = 0LL;\n        v30 = (unsigned int)(*(_DWORD *)(v19 + v20 + 12) + v28);\n        if ( (signed int)v30 >= 52 )\n          v30 = 51LL;\n        if ( (signed int)v30 < 0 )\n          v30 = 0LL;\n        v31 = (unsigned __int8)byte_489C50[v29] + (unsigned __int8)byte_489C50[v30];\n      }\n      else\n      {\n        v31 = *(_DWORD *)(v19 + v20 + 12) + v27;\n      }\n      v32 = (v31 + 1) >> 1;\n      v33 = (unsigned int)(v32 + v103);\n      if ( (signed int)v33 >= 52 )\n        v33 = 51LL;\n      if ( (signed int)v33 < 0 )\n        v33 = 0LL;\n      v34 = (unsigned int)(v93 + v32);\n      if ( (signed int)v34 >= 52 )\n        v34 = 51LL;\n      if ( (signed int)v34 < 0 )\n        v34 = 0LL;\n      v35 = (unsigned __int8)byte_49F6F0[v33] << v84;\n      v36 = (unsigned __int8)byte_49F730[v34] << v84;\n      v12 = *(unsigned __int8 *)(v102 + v22);\n      if ( !*(_BYTE *)(v102 + v22) )\n        goto LABEL_113;\n      LODWORD(v37) = v23;\n      v38 = *v26;\n      v39 = *v25;\n      v40 = v39 - v38;\n      v41 = v38 - v39;\n      if ( v38 - v39 < 1 )\n        v41 = *v25 - v38;\n      if ( v41 >= v35 )\n        goto LABEL_113;\n      v42 = -v24;\n      v88 = v24;\n      v43 = *(_QWORD *)(v101 + 8LL * v108) + 2LL * v107;\n      v90 = v37;\n      v37 = (signed int)v37;\n      v100 = (_WORD *)(*(_QWORD *)(v101 + 8LL * v111) + 2LL * v110);\n      v87 = v37;\n      v44 = v25[(signed int)v37];\n      v45 = (unsigned __int8)byte_49F770[5 * v33 + v12] << v84;\n      v80 = v44;\n      v46 = v44 - v39;\n      if ( (signed int)(v44 - v39) < 1 )\n        v46 = v39 - v44;\n      v81 = (_WORD *)(*(_QWORD *)(v101 + 8LL * v108) + 2LL * v107);\n      v47 = v26[v42];\n      v48 = v46 - v36;\n      v49 = v47 - v38;\n      if ( (signed int)(v47 - v38) < 1 )\n        v49 = v38 - v47;\n      if ( ((v49 - v36) & v48) < 0 )\n        break;\n      v13 = a7;\nLABEL_114:\n      ++v16;\n      v85 += 2;\n      if ( v83 == v16 )\n        return v12;\n    }\n    v99 = v42;\n    v98 = 2 * v42;\n    v86 = *(unsigned __int16 *)(v43 + 2 * v98);\n    v97 = 2 * v90;\n    v50 = (unsigned __int16)v100[v97];\n    v89 = *(unsigned __int16 *)(v43 + -6LL * v88);\n    v51 = (unsigned __int16)v100[3 * v90];\n    if ( !a10 )\n    {\n      v52 = v50 - v39;\n      if ( v50 - v39 < 1 )\n        v52 = v39 - v50;\n      v82 = v52 < v36;\n      v53 = v86 - v38;\n      if ( (signed int)(v86 - v38) < 1 )\n        v53 = v38 - v86;\n      v79 = v53 < v36;\n    }\n    v54 = v39 + v38;\n    if ( (_BYTE)v12 == 4 )\n    {\n      if ( a10 )\n      {\n        *v100 = (v47 + v39 + 2 * v80 + 2) >> 2;\n        LODWORD(v12) = (v80 + v38 + 2 * v47 + 2) >> 2;\n        *v81 = v12;\n      }\n      else\n      {\n        v61 = v41 < (v35 >> 2) + 2;\n        v79 &= v61;\n        v82 &= v61;\n        if ( v82 )\n        {\n          v62 = 2 * (v54 + v80);\n          v63 = v47 + 4;\n          v64 = 3;\n          v65 = (unsigned __int16)v100[v97];\n        }\n        else\n        {\n          v65 = 2 * v80;\n          v63 = v39 + 2;\n          v64 = 2;\n          v62 = v47;\n        }\n        *v100 = (unsigned int)(v65 + v63 + v62) >> v64;\n        if ( v79 )\n        {\n          v72 = v100;\n          v73 = v54 + v47;\n          v74 = v80 + 4;\n          v75 = 3;\n          v76 = v86;\n        }\n        else\n        {\n          v72 = v100;\n          v74 = v38 + 2;\n          v75 = 2;\n          v73 = v47;\n          v76 = v80;\n        }\n        *v81 = (v76 + v74 + 2 * v73) >> v75;\n        LOWORD(v73) = v80;\n        LOWORD(v76) = v50;\n        if ( v82 )\n          v73 = (v50 + v54 + v80 + 2) >> 2;\n        v72[v87] = v73;\n        LOWORD(v73) = v47;\n        LOWORD(v77) = v86;\n        if ( v79 )\n          v73 = (v86 + v54 + v47 + 2) >> 2;\n        v81[v99] = v73;\n        if ( v82 )\n          v76 = (v50 + v54 + v80 + 2 * (v50 + v51) + 4) >> 3;\n        LOBYTE(v12) = v98;\n        v72[v97] = v76;\n        if ( v79 )\n          v77 = (v86 + v47 + v54 + 2 * (v86 + v89) + 4) >> 3;\n        v81[v98] = v77;\n      }\n    }\n    else\n    {\n      v55 = v79 + v82 + v45;\n      if ( a10 )\n        v55 = v45 + 1;\n      v56 = (signed int)(v47 + 4 - v80 + 4 * v40) >> 3;\n      v57 = -v55;\n      if ( v56 <= v55 )\n        v55 = (signed int)(v47 + 4 - v80 + 4 * v40) >> 3;\n      if ( v56 < v57 )\n        v55 = v57;\n      v58 = v55 + v38;\n      LOWORD(v59) = 0;\n      if ( a10 )\n      {\n        LOWORD(v60) = 0;\n        if ( v58 >= 0 )\n        {\n          v60 = *(_DWORD *)(v91 + 72688);\n          if ( v58 <= v60 )\n            LOWORD(v60) = v58;\n        }\n        LOBYTE(v12) = *(_BYTE *)(v101 + 8LL * v111) + 2 * v110;\n        *v81 = v60;\n        v13 = a7;\n        if ( v39 - v55 >= 0 )\n        {\n          v59 = *(_DWORD *)(v91 + 72688);\n          if ( v39 - v55 <= v59 )\n            LOWORD(v59) = v39 - v55;\n        }\n        *v100 = v59;\n        goto LABEL_114;\n      }\n      LOWORD(v66) = 0;\n      if ( v58 >= 0 )\n      {\n        v66 = *(_DWORD *)(v91 + 72684);\n        if ( v58 <= v66 )\n          LOWORD(v66) = v58;\n      }\n      *v81 = v66;\n      if ( v39 - v55 >= 0 )\n      {\n        v59 = *(_DWORD *)(v91 + 72684);\n        if ( v39 - v55 <= v59 )\n          LOWORD(v59) = v39 - v55;\n      }\n      *v100 = v59;\n      v67 = v45;\n      if ( v79 )\n      {\n        v68 = (signed int)(((unsigned int)(v54 + 1) >> 1) + v86 - 2 * v47) >> 1;\n        v69 = -v45;\n        v70 = v45;\n        if ( v68 <= v45 )\n          v70 = (signed int)(((unsigned int)(v54 + 1) >> 1) + v86 - 2 * v47) >> 1;\n        if ( v68 >= v69 )\n          LOWORD(v69) = v70;\n        v81[v99] += v69;\n      }\n      if ( v82 )\n      {\n        v71 = (signed int)(v50 + ((unsigned int)(v54 + 1) >> 1) - 2 * v80) >> 1;\n        LODWORD(v12) = -v45;\n        if ( v71 <= v45 )\n          v67 = v71;\n        if ( v71 >= (signed int)v12 )\n          LOWORD(v12) = v67;\n        v100[v87] += v12;\n      }\n      else\n      {\n        LOBYTE(v12) = 0;\n        v82 = 0;\n      }\n    }\nLABEL_113:\n    v13 = a7;\n    goto LABEL_114;\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x429a50L", 
            "funcEndAddr": "0x42a28dL", 
            "funcName": "sub_429A50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_42A290(__int64 a1)\n{\n  int v1; // ebx\n  unsigned int *v2; // rdx\n  _DWORD *v3; // rdi\n  int v4; // ecx\n  unsigned __int64 result; // rax\n  int v6; // ecx\n  int v7; // esi\n  int v8; // er8\n  __int64 *v9; // rdx\n  bool v10; // zf\n  void **v11; // rbx\n  int v12; // ecx\n  int v13; // ebx\n\n  v1 = a1;\n  v2 = (unsigned int *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 3) = a1;\n  sub_436A10(a1, v2 + 34, v2 + 35);\n  v3 = off_49F6D0;\n  v4 = *((_DWORD *)off_49F6D0 + 34);\n  result = *((unsigned int *)off_49F6D0 + 35);\n  *((_DWORD *)off_49F6D0 + 36) = 4 * v4;\n  v3[37] = 4 * result;\n  v6 = 16 * v4;\n  v3[38] = v6;\n  v7 = 16 * result;\n  v3[39] = 16 * result;\n  v3[42] = v6;\n  v8 = 16 * result;\n  if ( v3[18100] )\n  {\n    if ( *(_DWORD *)(*((_QWORD *)v3 + 1771) + 632LL * v1 + 532) )\n    {\n      v9 = &qword_4F9EC8;\n      v10 = (v1 & 1) == 0;\n      if ( v1 & 1 )\n        v9 = &qword_4F9EB8;\n      qword_4F9EB0 = *v9;\n      v11 = &qword_4F9EA0;\n      if ( !v10 )\n        v11 = &qword_4F9E90;\n      qword_4F9E88 = (__int64)*v11;\n      result = 8 * (_DWORD)result & 0xFFFFFFF0;\n      v8 = result;\n    }\n    else\n    {\n      qword_4F9EB0 = (__int64)qword_4F9EC0;\n      result = (unsigned __int64)qword_4F9E98;\n      qword_4F9E88 = (__int64)qword_4F9E98;\n      v8 = v7;\n    }\n  }\n  v3[43] = v8;\n  if ( v3[18175] )\n  {\n    v12 = v6 / (16 / v3[18177]);\n    v3[40] = v12;\n    v13 = 16 / v3[18178];\n    v3[41] = v7 / v13;\n    v3[44] = v12;\n    result = (unsigned int)(v8 / v13);\n    v3[45] = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42a290L", 
            "funcEndAddr": "0x42a3d7L", 
            "funcName": "sub_42A290"
        }, 
        {
            "decompiledFuncCode": "unsigned int *sub_42A420()\n{\n  signed int *v0; // rsi\n  __int64 v1; // r9\n  signed __int64 v2; // r10\n  __int128 *v3; // r11\n  unsigned int *result; // rax\n  signed int v5; // edx\n  __int64 v6; // rdx\n  __int64 v7; // rcx\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // rax\n  signed int *v12; // rdi\n  _DWORD *v13; // r8\n  signed __int64 i; // rax\n  __int64 v15; // rdx\n  _DWORD *v16; // rcx\n  _DWORD *v17; // rcx\n\n  v0 = (signed int *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v3 = off_49F6D8;\n  *((_DWORD *)v3 + *((signed int *)off_49F6D0 + 6) + 337) += *(_DWORD *)(v1 + v2 + 28);\n  *((_DWORD *)v3 + v0[6] + 352) += *(_DWORD *)(v1 + v2 + 40);\n  *((_DWORD *)v3 + v0[6] + 347) += *(_DWORD *)(v1 + v2 + 36);\n  *((_DWORD *)v3 + v0[6] + 357) += *(_DWORD *)(v1 + v2 + 44);\n  *((_DWORD *)v3 + v0[6] + 362) += *(_DWORD *)(v1 + v2 + 48);\n  result = (unsigned int *)(v1 + v2 + 72);\n  if ( *result <= 0xD )\n  {\n    v5 = 9728;\n    if ( _bittest(&v5, *result) )\n    {\n      ++*((_DWORD *)v3 + *(signed int *)(v1 + v2 + 524) + 168);\n      if ( *(_BYTE *)(v1 + v2 + 460) & 0xF )\n      {\n        v6 = v0[6];\n        v7 = (signed int)*result;\n        if ( *(_DWORD *)(v1 + v2 + 572) )\n          ++*((_DWORD *)v3 + 15 * v6 + v7 + 18);\n        else\n          ++*((_DWORD *)v3 + 15 * v6 + v7 + 93);\n      }\n    }\n  }\n  v8 = (signed __int64)v3 + 60 * v0[6];\n  ++*(_DWORD *)(v8 + 4LL * (signed int)*result + 728);\n  v9 = (signed __int64)v3 + 60 * v0[6];\n  *(_DWORD *)(v9 + 4LL * (signed int)*result + 1028) += *(_DWORD *)(v1 + v2 + 32);\n  v10 = v0[6];\n  if ( v10 != 2 )\n  {\n    v11 = (signed int)*result;\n    if ( v11 == 8 )\n    {\n      v12 = (signed int *)(v1 + v2 + 572);\n      v13 = dest;\n      for ( i = -3LL; ; ++i )\n      {\n        v15 = v12[i - 22];\n        v10 = (signed int)v10;\n        if ( v15 <= 0 )\n          v16 = (_DWORD *)((char *)v3 + 8 * v10 + 4 * *v12 + 32);\n        else\n          v16 = (_DWORD *)((char *)v3 + 60 * v10 + 4 * v15 + 728);\n        ++*v16;\n        if ( v12[i - 22] == 4 )\n        {\n          if ( *v12 && *(_BYTE *)(v1 + v2 + 460) & 0xF || v13[805] == 2 )\n            v17 = (_DWORD *)((char *)v3 + 60 * v0[6] + 88);\n          else\n            v17 = (_DWORD *)((char *)v3 + 60 * v0[6] + 388);\n          ++*v17;\n        }\n        if ( !i )\n          break;\n        LODWORD(v10) = v0[6];\n      }\n    }\n    else if ( (unsigned int)v11 <= 3 && *(_BYTE *)(v1 + v2 + 460) & 0xF )\n    {\n      if ( *(_DWORD *)(v1 + v2 + 572) )\n        ++*((_DWORD *)v3 + 15 * v10 + v11 + 18);\n      else\n        ++*((_DWORD *)v3 + 15 * v10 + v11 + 93);\n    }\n    result = (unsigned int *)(unsigned int)v0[6];\n    if ( (_DWORD)result == 3 || !(_DWORD)result )\n    {\n      ++*(_DWORD *)v3;\n      result = (unsigned int *)*(unsigned int *)(v1 + v2 + 12);\n      *((_DWORD *)v3 + 1) += (_DWORD)result;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42a420L", 
            "funcEndAddr": "0x42a651L", 
            "funcName": "sub_42A420"
        }, 
        {
            "decompiledFuncCode": "signed int *__fastcall sub_42A660(__int64 a1, unsigned __int64 a2)\n{\n  int v2; // ebx\n  __int64 v3; // r14\n  __int64 v4; // r13\n  int v5; // er12\n  signed __int64 v6; // r15\n  _DWORD *v7; // r8\n  __int64 v8; // rcx\n  int v9; // esi\n  _DWORD *v10; // rdx\n  __int64 v11; // rdi\n  __int64 v12; // rbx\n  int v13; // eax\n  signed int *v14; // rcx\n  __int64 v15; // rdx\n  signed __int64 v16; // rax\n  _DWORD *v17; // r14\n  int v18; // eax\n  __int64 v19; // rbx\n  int v20; // eax\n  __int64 v21; // rdx\n  signed __int64 v22; // rax\n  int *v23; // rcx\n  int v24; // eax\n  int *v25; // rbx\n  _DWORD *v26; // rsi\n  signed int v27; // eax\n  _DWORD *v28; // rax\n  int v29; // edx\n  int v30; // ecx\n  int v31; // eax\n  int v32; // eax\n  int v33; // ecx\n  int v34; // edx\n  __int64 *v35; // rdx\n  __int64 v36; // rax\n  __int64 v37; // rcx\n  __int64 v38; // rsi\n  __int64 v39; // rdx\n  __int64 *v40; // rcx\n  __int64 *v41; // rsi\n  __int64 v42; // rdi\n  __int64 v43; // rax\n  __int64 v44; // r12\n  __int64 v45; // rcx\n  __int64 v46; // rdx\n  __int64 v47; // ST38_8\n  __int64 v48; // ST18_8\n  __int64 v49; // r10\n  __int64 v50; // ST10_8\n  __int64 v51; // rbx\n  __int64 v52; // r11\n  __int64 v53; // ST30_8\n  __int64 v54; // rsi\n  __int64 v55; // ST50_8\n  __int64 v56; // ST20_8\n  __int64 v57; // r9\n  __int64 v58; // ST40_8\n  __int64 v59; // ST28_8\n  __int64 v60; // rcx\n  __int64 v61; // ST48_8\n  __int64 v62; // r14\n  __int64 v63; // r15\n  __int64 v64; // r13\n  __int64 v65; // r12\n  __int64 v66; // rdx\n  signed int *result; // rax\n  signed int *v68; // rcx\n  int v69; // edx\n  __int64 v70; // rbp\n  signed __int64 v71; // rbx\n  int v72; // edx\n  int v73; // edi\n  int v74; // edi\n  int v75; // er15\n  signed int v76; // eax\n  int v77; // eax\n  int v78; // er8\n  int v79; // edi\n  int *v80; // rdx\n  int v81; // ebp\n  int v82; // eax\n  int v83; // esi\n  int v84; // edi\n  int v85; // edx\n  int v86; // ebx\n  int v87; // eax\n  signed __int64 v88; // [rsp+8h] [rbp-90h]\n  __int64 v89; // [rsp+60h] [rbp-38h]\n\n  v2 = *((_DWORD *)dest + 52) | 1;\n  v3 = *((_QWORD *)off_49F6D0 + 1770);\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  a1 = (signed int)a1;\n  v5 = *((_DWORD *)off_49F6D0 + 18167);\n  v6 = 632LL * (signed int)a1;\n  *(_DWORD *)(v4 + v6 + 532) = a2;\n  *(_BYTE *)(*(_QWORD *)(qword_4F9E30 + 6472) + a1) = a2;\n  sub_42A290((signed int)a1);\n  v7 = off_49F6D0;\n  if ( v2 == 3 && !*((_DWORD *)off_49F6D0 + 30) )\n  {\n    v8 = *(signed int *)(v3 + 16);\n    if ( v8 > 0 )\n    {\n      v9 = *((_DWORD *)dest + 589);\n      v10 = (_DWORD *)(*(_QWORD *)(v3 + 24) + 108LL);\n      v11 = 0LL;\n      do\n      {\n        v12 = *(_QWORD *)(v10 - 27);\n        *(_QWORD *)(v12 + 12) = *(_QWORD *)v12;\n        *(_BYTE *)(v12 + 20) = *(_BYTE *)(v12 + 8);\n        if ( v9 == 1 )\n        {\n          *(_OWORD *)(v10 - 15) = *(_OWORD *)(v10 - 25);\n          *(v10 - 11) = *(v10 - 21);\n          *(_OWORD *)(v10 - 9) = *(_OWORD *)(v10 - 19);\n          *(v10 - 4) = *(v10 - 5);\n          *v10 = *(v10 - 1);\n          *(v10 - 2) = *(v10 - 3);\n        }\n        ++v11;\n        v10 += 30;\n      }\n      while ( v11 < v8 );\n    }\n  }\n  *(_DWORD *)(v4 + v6 + 4) = v7[5];\n  *(_DWORD *)(v4 + v6 + 16) = v7[11];\n  v88 = v6;\n  if ( !*((_DWORD *)dest + 809) )\n  {\n    v19 = *((_QWORD *)v7 + 1770);\n    v20 = sub_41BAF0((unsigned int)v7[3]);\n    if ( v20 < 0 )\n    {\n      v25 = (int *)(v19 + 4);\n      v24 = 0;\n      v23 = v25;\n    }\n    else\n    {\n      v21 = *((_QWORD *)off_49F6D0 + 1771);\n      v22 = 632LL * v20;\n      v23 = (int *)(v21 + v22 + 12);\n      v24 = *(_DWORD *)(v21 + v22 + 8);\n      v25 = (int *)(v19 + 4);\n    }\n    v30 = *v23;\n    *(_DWORD *)(v4 + v6 + 592) = v30;\n    *(_DWORD *)(v4 + v6 + 596) = v24;\n    v31 = *v25;\n    *(_DWORD *)(v4 + v6 + 12) = *v25;\n    *(_DWORD *)(v4 + v6 + 8) = v31 - v30;\n    dword_4F9FF0 = v31 - v30;\n    dword_4F9FEC = v31 - v30;\n    dword_4FA06C = v31;\n    dword_4FA068 = v31;\n    goto LABEL_24;\n  }\n  v13 = sub_41BAF0((unsigned int)v7[3]);\n  if ( v13 < 0 )\n  {\n    v17 = (_DWORD *)(v3 + 4);\n    v18 = 0;\n    v14 = (signed int *)off_49F6D0;\n  }\n  else\n  {\n    v14 = (signed int *)off_49F6D0;\n    v15 = *((_QWORD *)off_49F6D0 + 1771);\n    v16 = 632LL * v13;\n    v17 = (_DWORD *)(v15 + v16 + 12);\n    v18 = *(_DWORD *)(v15 + v16 + 8);\n  }\n  *(_DWORD *)(v4 + v6 + 592) = *v17;\n  *(_DWORD *)(v4 + v6 + 596) = v18;\n  v26 = dest;\n  if ( *((_DWORD *)dest + 812) == v14[18152] || (v27 = v14[6], (unsigned int)(v27 - 1) < 2) )\n  {\n    *(_DWORD *)(v4 + v6 + 8) = 0;\n    *(_DWORD *)(v4 + v6 + 12) = v14[10];\n    goto LABEL_24;\n  }\n  if ( !v27 )\n  {\n    v28 = (_DWORD *)(v6 + v4 + 532);\n    if ( v14[18156] )\n    {\n      if ( !v14[18157] )\n      {\n        if ( v14[18158] )\n        {\n          *(_DWORD *)(v4 + v6 + 8) = dword_4F9FEC;\n          v69 = dword_4FA068;\n        }\n        else\n        {\n          *(_DWORD *)(v4 + v6 + 8) = dword_4F9FF0;\n          v69 = dword_4FA06C;\n        }\n        *(_DWORD *)(v4 + v6 + 12) = v69;\n        v14[10] = v69;\nLABEL_53:\n        v74 = v26[721];\n        if ( v74 && v14[18157] )\n        {\n          *(_DWORD *)(v6 + v4 + 592) = v14[10];\n          goto LABEL_24;\n        }\n        if ( *v28 )\n        {\n          dword_4FA13C = *(_DWORD *)(v4 + v6 + 608);\n          goto LABEL_24;\n        }\n        v75 = v5 / 2;\n        v76 = v14[18154];\n        if ( v76 <= 0 || v76 % v14[18155] )\n          goto LABEL_62;\n        if ( !*((_DWORD *)qword_4F9DC0 + 287) )\n        {\n          v87 = v26[720];\n          if ( v87 != 1 && v87 != 2 )\n          {\n            if ( !v74 )\n              goto LABEL_62;\n          }\n          else if ( !v74 )\n          {\n            if ( v14[18153] )\n              goto LABEL_62;\n            goto LABEL_61;\n          }\n          if ( v14[18153] || v14[18150] != 1 && v14[18150] )\n          {\nLABEL_62:\n            v78 = v75 + 25;\n            if ( v14[3] )\n            {\n              v79 = v14[18148];\n            }\n            else\n            {\n              v79 = v14[10];\n              v14[18148] = v79;\n            }\n            *(_DWORD *)(v4 + v88 + 604) = v79;\n            v80 = (int *)(v88 + v4 + 604);\n            v81 = *(_DWORD *)(v4 + v88 + 12);\n            v82 = v78 + v81;\n            if ( v79 <= v78 + v81 )\n            {\n              v83 = -26 - v75;\n              v82 = -26 - v75 + v81;\n              if ( v79 >= v82 )\n                v82 = v79;\n              else\n                *v80 = v82;\n            }\n            else\n            {\n              *v80 = v82;\n              v83 = -26 - v75;\n            }\n            v6 = v88;\n            v84 = *(_DWORD *)(v4 + v88 + 8);\n            v85 = v82 + *(_DWORD *)(v4 + v88 + 8) - v81;\n            dword_4FA0D0 = v85;\n            if ( v85 >= v83 )\n            {\n              if ( v85 <= v78 )\n              {\n                *(_DWORD *)(v88 + v4 + 8) = v85;\n                v86 = v82 - v81;\n                dword_4FA13C = v82 - v81;\n                v14[10] = v82;\n                v83 = v85;\n              }\n              else\n              {\n                dword_4FA0D0 = v78;\n                v86 = v78 - v84;\n                dword_4FA13C = v78 - v84;\n                v82 = v78 - v84 + v14[10];\n                v14[10] = v82;\n                *(_DWORD *)(v88 + v4 + 8) = v78;\n                v83 = v78;\n              }\n            }\n            else\n            {\n              dword_4FA0D0 = v83;\n              v86 = v83 - v84;\n              dword_4FA13C = v83 - v84;\n              v82 = v83 - v84 + v14[10];\n              v14[10] = v82;\n              *(_DWORD *)(v88 + v4 + 8) = v83;\n            }\n            *(_DWORD *)(v88 + v4 + 12) = v82;\n            if ( *((_DWORD *)dest + 721) )\n            {\n              dword_4F9FEC = v83;\n              dword_4FA06C = v82;\n              dword_4FA068 = v82;\n              dword_4F9FF0 = v83;\n            }\n            *(_DWORD *)(v4 + v88 + 608) = v86;\n            goto LABEL_24;\n          }\n        }\nLABEL_61:\n        sub_459E60();\n        v77 = sub_458DD0(*((_DWORD *)off_49F6D0 + 18149));\n        v14 = (signed int *)off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18148) = v77;\n        goto LABEL_62;\n      }\n      goto LABEL_20;\n    }\n    if ( *v28 )\n    {\n      if ( v14[18157] )\n      {\n        *(_DWORD *)(v4 + v6 + 12) = v14[10];\n        *(_DWORD *)(v4 + v6 + 8) = 0;\n        goto LABEL_53;\n      }\n      *(_DWORD *)(v4 + v6 + 8) = dword_4F9FF0;\n      v29 = dword_4FA06C;\n      v14[10] = dword_4FA06C;\n      goto LABEL_21;\n    }\n    if ( v14[3] )\n    {\n      if ( *((_DWORD *)dest + 721) && v14[18157] )\n      {\nLABEL_20:\n        *(_DWORD *)(v4 + v6 + 8) = 0;\n        v29 = v14[10];\nLABEL_21:\n        *(_DWORD *)(v4 + v6 + 12) = v29;\n        goto LABEL_53;\n      }\n      v70 = *((_QWORD *)v14 + 1771);\n      v71 = 632 * (v14[3] - 1LL);\n      if ( *(_DWORD *)(v70 + v71 + 600) == 1 )\n      {\n        v72 = v14[10];\n        *(_DWORD *)(v4 + v6 + 12) = v72;\n        v73 = 0;\n      }\n      else\n      {\n        v72 = *(_DWORD *)(v70 + v71 + 592);\n        *(_DWORD *)(v4 + v6 + 12) = v72;\n        v73 = v72 - *(_DWORD *)(v70 + v71 + 12);\n        v14[10] = v72;\n      }\n      *(_DWORD *)(v4 + v6 + 8) = v73;\n      dword_4F9FF0 = v73;\n      dword_4F9FEC = v73;\n    }\n    else\n    {\n      *(_DWORD *)(v4 + v6 + 8) = 0;\n      v72 = v14[10];\n      *(_DWORD *)(v4 + v6 + 12) = v72;\n      dword_4F9FF0 = 0;\n      dword_4F9FEC = 0;\n    }\n    dword_4FA06C = v72;\n    dword_4FA068 = v72;\n    goto LABEL_53;\n  }\nLABEL_24:\n  *(_DWORD *)(v4 + v6) = 0;\n  if ( *(_DWORD *)(qword_4F9DB8 + 220) )\n  {\n    v32 = *((_DWORD *)off_49F6D0 + 17996);\n    v33 = *((_DWORD *)off_49F6D0 + 17997);\n    v34 = *((_DWORD *)off_49F6D0 + 17998);\n  }\n  else\n  {\n    v32 = 0;\n    v33 = 0;\n    v34 = 0;\n  }\n  *(_DWORD *)(v4 + v6 + 612) = v32;\n  *(_DWORD *)(v4 + v6 + 616) = v33;\n  v89 = v4;\n  *(_DWORD *)(v4 + v6 + 620) = v34;\n  sub_436700();\n  if ( *((_DWORD *)dest + 589) == 1 )\n    sub_40AA50();\n  v35 = *(__int64 **)(qword_4F9E30 + 6504);\n  v36 = *((signed int *)off_49F6D0 + 36);\n  v37 = *((signed int *)off_49F6D0 + 37);\n  v38 = *v35;\n  **(_DWORD **)(*(_QWORD *)(*v35 + 8 * v36) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 8) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 16) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 24) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 8) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 16) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 24) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 8) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 16) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 24) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 8) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 16) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v38 + 8 * v36 + 24) + 8 * v37 + 24) = 0;\n  v39 = v35[1];\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 8) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 16) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 24) + 8 * v37) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 8) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 16) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 24) + 8 * v37 + 8) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 8) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 16) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 24) + 8 * v37 + 16) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 8) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 16) + 8 * v37 + 24) = 0;\n  **(_DWORD **)(*(_QWORD *)(v39 + 8 * v36 + 24) + 8 * v37 + 24) = 0;\n  v40 = *(__int64 **)(qword_4F9E30 + 6480);\n  v41 = *(__int64 **)(qword_4F9E30 + 6488);\n  v42 = *((signed int *)off_49F6D0 + 36);\n  v43 = *v40;\n  v44 = v40[1];\n  v45 = *v41;\n  v46 = v41[1];\n  v47 = *(_QWORD *)(v43 + 8 * v42);\n  v48 = *(_QWORD *)(v43 + 8 * v42 + 8);\n  v50 = *(_QWORD *)(*v41 + 8 * v42);\n  v49 = *(_QWORD *)(*v41 + 8 * v42);\n  v51 = *(_QWORD *)(*v41 + 8 * v42 + 8);\n  v52 = *(_QWORD *)(v44 + 8 * v42);\n  v53 = *(_QWORD *)(v44 + 8 * v42 + 8);\n  v54 = *(_QWORD *)(v43 + 8 * v42 + 16);\n  v55 = *(_QWORD *)(v45 + 8 * v42 + 16);\n  v56 = *(_QWORD *)(v44 + 8 * v42 + 16);\n  v58 = *(_QWORD *)(v43 + 8 * v42 + 24);\n  v57 = *(_QWORD *)(v43 + 8 * v42 + 24);\n  v59 = *(_QWORD *)(v45 + 8 * v42 + 24);\n  v61 = *(_QWORD *)(v44 + 8 * v42 + 24);\n  v60 = *(_QWORD *)(v44 + 8 * v42 + 24);\n  v62 = *(_QWORD *)(v46 + 8 * v42);\n  v63 = *(_QWORD *)(v46 + 8 * v42 + 8);\n  v64 = *(_QWORD *)(v46 + 8 * v42 + 16);\n  v65 = *(_QWORD *)(v46 + 8 * v42 + 24);\n  v66 = *((signed int *)off_49F6D0 + 37);\n  *(_WORD *)(v47 + 2 * v66) = -1;\n  *(_QWORD *)(v49 + 8 * v66) = -1LL;\n  *(_WORD *)(v52 + 2 * v66) = -1;\n  *(_QWORD *)(v62 + 8 * v66) = -1LL;\n  *(_WORD *)(v48 + 2 * v66) = -1;\n  *(_QWORD *)(v51 + 8 * v66) = -1LL;\n  *(_WORD *)(v53 + 2 * v66) = -1;\n  *(_QWORD *)(v63 + 8 * v66) = -1LL;\n  *(_WORD *)(v54 + 2 * v66) = -1;\n  *(_QWORD *)(v55 + 8 * v66) = -1LL;\n  *(_WORD *)(v56 + 2 * v66) = -1;\n  *(_QWORD *)(v64 + 8 * v66) = -1LL;\n  *(_WORD *)(v57 + 2 * v66) = -1;\n  *(_QWORD *)(v59 + 8 * v66) = -1LL;\n  *(_WORD *)(v60 + 2 * v66) = -1;\n  *(_QWORD *)(v65 + 8 * v66) = -1LL;\n  *(_WORD *)(v47 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v50 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v52 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v62 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v48 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v51 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v53 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v63 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v54 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v55 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v56 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v64 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v58 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v59 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v61 + 2 * v66 + 2) = -1;\n  *(_QWORD *)(v65 + 8 * v66 + 8) = -1LL;\n  *(_WORD *)(v47 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v50 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v52 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v62 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v48 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v51 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v53 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v63 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v54 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v55 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v56 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v64 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v58 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v59 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v61 + 2 * v66 + 4) = -1;\n  *(_QWORD *)(v65 + 8 * v66 + 16) = -1LL;\n  *(_WORD *)(v47 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v50 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v52 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v62 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v48 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v51 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v53 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v63 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v54 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v55 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v56 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v64 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v58 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v59 + 8 * v66 + 24) = -1LL;\n  *(_WORD *)(v61 + 2 * v66 + 6) = -1;\n  *(_QWORD *)(v65 + 8 * v66 + 24) = -1LL;\n  *(_QWORD *)(v89 + v88 + 464) = 0LL;\n  *(_DWORD *)(v89 + v88 + 460) = 0;\n  *(_QWORD *)(v89 + v88 + 504) = 0LL;\n  *(_DWORD *)(v89 + v88 + 524) = 0;\n  memset((void *)(v89 + v88 + 72), 0, 0x104uLL);\n  *(_OWORD *)(v89 + v88 + 332) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 348) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 364) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 380) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 396) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 412) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 428) = xmmword_489720;\n  *(_OWORD *)(v89 + v88 + 444) = xmmword_489720;\n  result = (signed int *)dest;\n  v68 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)dest + 54) )\n    *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *((signed int *)off_49F6D0 + 3)) = 1;\n  *(_DWORD *)(v89 + v88 + 512) = v68[17996];\n  *(_DWORD *)(v89 + v88 + 516) = v68[17997];\n  *(_DWORD *)(v89 + v88 + 520) = v68[17998];\n  if ( !v68[3] || *(_DWORD *)(v89 + v88 + 4) == *(_DWORD *)(*((_QWORD *)v68 + 1771) + 632LL * v68[3] - 628) )\n    *(_DWORD *)(v89 + v88 + 20) = 0;\n  *(_OWORD *)(v89 + v88 + 28) = 0LL;\n  *(_QWORD *)(v89 + v88 + 44) = 0LL;\n  if ( !result[823] )\n    result = sub_440C10();\n  return result;\n}\n", 
            "funcStartAddr": "0x42a660L", 
            "funcEndAddr": "0x42b2caL", 
            "funcName": "sub_42A660"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_42B2D0(_DWORD *a1, int *a2)\n{\n  int *v2; // rbx\n  char *v3; // r12\n  __int64 v4; // r14\n  __int64 v5; // rdi\n  signed __int64 v6; // r13\n  _BOOL4 v7; // er15\n  __int64 v8; // rbx\n  int v9; // eax\n  __int64 v10; // r15\n  _DWORD *v11; // rax\n  int v12; // ebp\n  int v13; // eax\n  int v14; // ebp\n  int v15; // eax\n  _BOOL8 v16; // rcx\n  int v17; // eax\n  __int64 v18; // rbx\n  signed __int64 v19; // rbp\n  int v20; // er9\n  __int64 v21; // rax\n  bool v22; // zf\n  int v23; // eax\n  int v24; // ebp\n  int v25; // eax\n  _DWORD *v26; // r8\n  __int64 v27; // rax\n  int v28; // ecx\n  __int64 v29; // rcx\n  __int64 v30; // rdx\n  __int64 v31; // rdi\n  __int64 v32; // r14\n  signed __int64 v33; // rbx\n  int v34; // ebp\n  __int64 v35; // r13\n  int v36; // eax\n  __int64 v37; // rax\n  bool v38; // sf\n  unsigned __int8 v39; // of\n  int v40; // ebp\n  int v41; // ebx\n  int v42; // eax\n  int v43; // eax\n  __int64 v44; // r14\n  int v45; // eax\n  __int64 v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // rsi\n  signed __int64 v49; // rbx\n  signed __int64 v50; // rbp\n  __int64 v51; // rax\n  int v52; // edx\n  _DWORD *v53; // rcx\n  __int64 v54; // rsi\n  __int64 v55; // rdi\n  unsigned __int64 result; // rax\n  _DWORD *v57; // rax\n  int v58; // ecx\n  int v59; // ecx\n  signed __int64 v60; // rsi\n  __int64 v61; // rcx\n  signed __int64 v62; // rsi\n  _DWORD *v63; // [rsp+0h] [rbp-78h]\n  int *v64; // [rsp+8h] [rbp-70h]\n  __int64 v65; // [rsp+10h] [rbp-68h]\n  signed __int64 v66; // [rsp+18h] [rbp-60h]\n  __int64 v67; // [rsp+20h] [rbp-58h]\n  char *v68; // [rsp+28h] [rbp-50h]\n  int v69; // [rsp+34h] [rbp-44h]\n  signed __int64 v70; // [rsp+38h] [rbp-40h]\n  __int64 v71; // [rsp+40h] [rbp-38h]\n\n  v2 = a2;\n  v63 = a1;\n  v3 = (char *)off_49F6D0;\n  v65 = *((_QWORD *)off_49F6D0 + 1770);\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = *((signed int *)off_49F6D0 + 3);\n  v70 = 632 * v5;\n  v6 = 48LL * *(signed int *)(v4 + 632 * v5);\n  v69 = *((_DWORD *)dest + 52);\n  v67 = qword_4F9C40[*((signed int *)dest + 591)];\n  v7 = 1;\n  v64 = a2;\n  if ( *((_DWORD *)off_49F6D0 + 3) && (signed int)sub_41BAF0(v5) >= 0 )\n  {\n    v8 = *((_QWORD *)off_49F6D0 + 1771);\n    v9 = *(_DWORD *)(v8 + 632LL * (signed int)sub_41BAF0(*((unsigned int *)off_49F6D0 + 3)) + 4);\n    v2 = a2;\n    v7 = v9 != *((_DWORD *)off_49F6D0 + 5);\n  }\n  v68 = &v3[v6 + 14176];\n  *v2 = 0;\n  switch ( (unsigned __int64)*((unsigned int *)dest + 52) )\n  {\n    case 0uLL:\n      v10 = v65;\n      ++*(_DWORD *)(v10 + 20);\n      *v2 = 0;\n      v11 = off_49F6D0;\n      if ( *(_DWORD *)(v65 + 20) == *((_DWORD *)off_49F6D0 + 4) )\n      {\n        *v63 = 1;\n        v11 = off_49F6D0;\n      }\n      v12 = v11[3];\n      v13 = sub_41BA90(v11[3]);\n      *v63 |= v12 == (unsigned int)sub_41BB30(v13);\n      goto LABEL_60;\n    case 1uLL:\n      v10 = v65;\n      ++*(_DWORD *)(v10 + 20);\n      *v2 = 0;\n      v14 = *((_DWORD *)off_49F6D0 + 3);\n      v15 = sub_41BA90(*((_DWORD *)off_49F6D0 + 3));\n      v16 = v14 == (unsigned int)sub_41BB30(v15);\n      *v63 = v16;\n      *v63 = *(_DWORD *)(v65 + 20) >= *((_DWORD *)dest + 53) || v16;\n      goto LABEL_60;\n    case 2uLL:\n      v17 = *((_DWORD *)off_49F6D0 + 30);\n      if ( v17 )\n      {\n        *(_DWORD *)&v3[v6 + 14180] = v17;\n        *(_DWORD *)&v3[v6 + 14184] = 0;\n        *(_QWORD *)&v3[v6 + 14208] = sub_47FB70;\n        *(_DWORD *)v68 = 2;\n        v18 = *(_QWORD *)(v65 + 24);\n        v19 = 120LL * *(signed int *)(v67 + 8);\n        (*(void (__fastcall **)(char *, __int64))(v18 + v19 + 112))(v68, v18 + v19);\n        v20 = *(_DWORD *)&v3[v6 + 14188];\n        v21 = *(_QWORD *)(v18 + v19);\n        v2 = a2;\n        *(_QWORD *)(v21 + 24) = *(_QWORD *)v21;\n        *(_BYTE *)(v21 + 21) = *(_BYTE *)(v21 + 8);\n        *(_QWORD *)v21 = *(_QWORD *)(v21 + 12);\n        *(_BYTE *)(v21 + 8) = *(_BYTE *)(v21 + 20);\n        byte_49FC70 = 1;\n      }\n      else\n      {\n        v20 = 0;\n      }\n      v71 = v4;\n      if ( v7 )\n        goto LABEL_39;\n      v26 = off_49F6D0;\n      v27 = *((_QWORD *)off_49F6D0 + 1770);\n      v28 = *((_DWORD *)dest + 589);\n      if ( v28 == 1 )\n      {\n        if ( *(_DWORD *)(v27 + 16) > 0 )\n        {\n          v66 = v6;\n          v32 = 0LL;\n          v33 = 8LL;\n          do\n          {\n            v34 = v20;\n            v35 = v27;\n            v36 = sub_401340(v33 + *(_QWORD *)(v27 + 24));\n            v20 = v34;\n            if ( v36 > 8 * *((_DWORD *)dest + 53) )\n              goto LABEL_38;\n            ++v32;\n            v37 = *(signed int *)(v35 + 16);\n            v33 += 120LL;\n            v39 = __OFSUB__(v32, v37);\n            v38 = v32 - v37 < 0;\n            v27 = v35;\n          }\n          while ( v38 ^ v39 );\n          v26 = off_49F6D0;\nLABEL_34:\n          v2 = a2;\n          v6 = v66;\n        }\n      }\n      else if ( !v28 )\n      {\n        v29 = *(signed int *)(v27 + 16);\n        if ( v29 > 0 )\n        {\n          v66 = v6;\n          v30 = *(_QWORD *)(v27 + 24);\n          v31 = 0LL;\n          while ( **(_DWORD **)v30 + (*(_DWORD *)(*(_QWORD *)v30 + 4LL) < 8) + (*(_DWORD *)(*(_QWORD *)v30 + 4LL) < v20) <= *((_DWORD *)dest + 53) )\n          {\n            ++v31;\n            v30 += 120LL;\n            if ( v31 >= v29 )\n              goto LABEL_34;\n          }\nLABEL_38:\n          v2 = a2;\n          *a2 = 1;\n          *v63 = 1;\n          v6 = v66;\n          goto LABEL_39;\n        }\n      }\n      if ( !v26[30] )\n      {\n        byte_49FC70 = 0;\n        if ( *v2 )\n          goto LABEL_43;\n        goto LABEL_40;\n      }\nLABEL_39:\n      if ( *v2 )\n        goto LABEL_43;\nLABEL_40:\n      v40 = *((_DWORD *)off_49F6D0 + 3);\n      v41 = v20;\n      v42 = sub_41BA90(*((_DWORD *)off_49F6D0 + 3));\n      v43 = sub_41BB30(v42);\n      v20 = v41;\n      if ( v40 == v43 )\n      {\n        *v63 = 1;\n        if ( !*((_DWORD *)off_49F6D0 + 30) )\n          byte_49FC70 = 0;\n      }\nLABEL_43:\n      v22 = v7 == 0;\n      v10 = v65;\n      if ( v22 )\n        goto LABEL_58;\n      v44 = *((_QWORD *)off_49F6D0 + 1770);\n      v45 = *((_DWORD *)dest + 589);\n      if ( v45 == 1 )\n      {\n        if ( *(_DWORD *)(v44 + 16) <= 0 )\n          goto LABEL_58;\n        v49 = 0LL;\n        v50 = 8LL;\n        while ( (signed int)sub_401340(v50 + *(_QWORD *)(v44 + 24)) <= 8 * *((_DWORD *)dest + 53) )\n        {\n          ++v49;\n          v50 += 120LL;\n          if ( v49 >= *(signed int *)(v44 + 16) )\n            goto LABEL_58;\n        }\n      }\n      else\n      {\n        if ( v45 )\n          goto LABEL_58;\n        v46 = *(signed int *)(v44 + 16);\n        if ( v46 <= 0 )\n          goto LABEL_58;\n        v47 = *(_QWORD *)(v44 + 24);\n        v48 = 0LL;\n        while ( **(_DWORD **)v47 + (*(_DWORD *)(*(_QWORD *)v47 + 4LL) < 8) + (*(_DWORD *)(*(_QWORD *)v47 + 4LL) < v20) <= *((_DWORD *)dest + 53) )\n        {\n          ++v48;\n          v47 += 120LL;\n          if ( v48 >= v46 )\n            goto LABEL_58;\n        }\n      }\n      *v63 = 1;\n      if ( !*((_DWORD *)off_49F6D0 + 30) )\n        byte_49FC70 = 0;\nLABEL_58:\n      v2 = v64;\n      v23 = *v64;\n      v4 = v71;\n      if ( !*v64 )\n      {\n        ++*(_DWORD *)(v65 + 20);\nLABEL_60:\n        v23 = *v2;\n      }\nLABEL_61:\n      if ( v23 == 1 )\n      {\n        v51 = *(signed int *)(v10 + 16);\n        if ( v51 > 0 )\n        {\n          v52 = *((_DWORD *)dest + 589);\n          v53 = (_DWORD *)(*(_QWORD *)(v10 + 24) + 108LL);\n          v54 = 0LL;\n          do\n          {\n            v55 = *(_QWORD *)(v53 - 27);\n            *(_QWORD *)v55 = *(_QWORD *)(v55 + 12);\n            *(_BYTE *)(v55 + 8) = *(_BYTE *)(v55 + 20);\n            if ( v52 == 1 )\n            {\n              *(_OWORD *)(v53 - 25) = *(_OWORD *)(v53 - 15);\n              *(v53 - 21) = *(v53 - 11);\n              *(_OWORD *)(v53 - 19) = *(_OWORD *)(v53 - 9);\n              *(v53 - 5) = *(v53 - 4);\n              *(v53 - 1) = *v53;\n              *(v53 - 3) = *(v53 - 2);\n            }\n            ++v54;\n            v53 += 30;\n          }\n          while ( v54 < v51 );\n        }\n      }\n      result = (unsigned int)*v63;\n      if ( (_DWORD)result == 1 && byte_49FC70 & 1 )\n      {\n        v57 = off_49F6D0;\n        v58 = *((_DWORD *)off_49F6D0 + 30);\n        if ( v58 && *v64 == 1 )\n        {\n          v22 = v58 == 1;\n          v59 = v58 - 1;\n          *((_DWORD *)off_49F6D0 + 30) = v59;\n          if ( !v22 )\n          {\n            *(_DWORD *)&v3[v6 + 14180] = v59;\n            *(_DWORD *)&v3[v6 + 14184] = 0;\n            *(_QWORD *)&v3[v6 + 14208] = sub_47FB70;\n            *(_DWORD *)v68 = 2;\n            v60 = *(_QWORD *)(v10 + 24) + 120LL * *(signed int *)(v67 + 8);\n            (*(void (__fastcall **)(char *, signed __int64, int *))(v60 + 112))(v68, v60, v64);\n            *(_DWORD *)(v4 + v70 + 28) += *(_DWORD *)&v3[v6 + 14188];\n            *((_DWORD *)off_49F6D0 + 30) = 0;\n          }\n        }\n        else\n        {\n          v61 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 120LL * *(signed int *)(v67 + 8));\n          *(_QWORD *)v61 = *(_QWORD *)(v61 + 24);\n          *(_BYTE *)(v61 + 8) = *(_BYTE *)(v61 + 21);\n          v57[30] = 0;\n          byte_49FC70 = 0;\n        }\n        result = (unsigned int)*v63;\n      }\n      if ( (_DWORD)result == 1 )\n      {\n        result = v69 | 1u;\n        if ( (_DWORD)result != 3 )\n        {\n          result = *((unsigned int *)off_49F6D0 + 30);\n          if ( (_DWORD)result )\n          {\n            *(_QWORD *)&v3[v6 + 14180] = (unsigned int)result;\n            *(_QWORD *)&v3[v6 + 14208] = sub_47FB70;\n            *(_DWORD *)v68 = 2;\n            v62 = *(_QWORD *)(v10 + 24) + 120LL * *(signed int *)(v67 + 8);\n            (*(void (__fastcall **)(char *, signed __int64))(v62 + 112))(v68, v62);\n            ++*(_DWORD *)(v4 + v70);\n            *(_DWORD *)(v4 + v70 + 28) += *(_DWORD *)&v3[v6 + 14188];\n            result = (unsigned __int64)off_49F6D0;\n            *((_DWORD *)off_49F6D0 + 30) = 0;\n          }\n        }\n      }\n      return result;\n    case 3uLL:\n      v22 = v7 == 0;\n      v10 = v65;\n      if ( v22 && *((_DWORD *)off_49F6D0 + 3) > 0 && (*(unsigned int (__fastcall **)(_QWORD))(v65 + 120))(0LL) )\n      {\n        *v2 = 1;\n        *v63 = 1;\n      }\n      v23 = *v2;\n      if ( *v2 )\n        goto LABEL_61;\n      v24 = *((_DWORD *)off_49F6D0 + 3);\n      v25 = sub_41BA90(*((_DWORD *)off_49F6D0 + 3));\n      if ( v24 == (unsigned int)sub_41BB30(v25) )\n        *v63 = 1;\n      goto LABEL_60;\n    default:\n      snprintf(byte_4F8250, 0x12CuLL, \"Slice Mode %d not supported\", v63);\n      error((__int64)byte_4F8250, 600);\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x42b2d0L", 
            "funcEndAddr": "0x42b9f4L", 
            "funcName": "sub_42B2D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42BAD0(_DWORD *a1, int a2, int a3, signed __int16 *a4, int a5, __int64 a6)\n{\n  int v6; // eax\n  signed int v7; // er15\n  signed int v8; // ST1C_4\n  signed int v9; // ST20_4\n  signed int v10; // ST24_4\n  int v11; // eax\n  signed int v12; // edx\n  signed int v13; // ST14_4\n  signed int v14; // ebx\n  signed int v15; // ST18_4\n  signed int v16; // ST10_4\n  signed int v17; // ST0C_4\n  __int64 v18; // rax\n  int v19; // er13\n  int v20; // er14\n  __int64 v21; // rbp\n  __int64 result; // rax\n\n  v6 = a4[1];\n  v7 = v6 + 4 * a3;\n  v8 = v6 + 4 * a3 + 4;\n  v9 = v6 + 4 * a3 + 8;\n  v10 = v6 + 4 * a3 + 12;\n  v11 = *a4;\n  v12 = v11 + 4 * a2;\n  v13 = v11 + 4 * a2;\n  v14 = v11 + 4 * a2 + 4;\n  v15 = v11 + 4 * a2 + 4;\n  v16 = v11 + 4 * a2 + 8;\n  v17 = v11 + 4 * a2 + 12;\n  v18 = *(_QWORD *)(a6 + 8LL * a5);\n  v19 = *(_DWORD *)(v18 + 6392);\n  v20 = *(_DWORD *)(v18 + 6396);\n  v21 = *(_QWORD *)(v18 + 6448);\n  *a1 = (unsigned __int16)sub_476120(*(_QWORD *)(v18 + 6448), v7, v12, *(_DWORD *)(v18 + 6396), *(_DWORD *)(v18 + 6392));\n  a1[1] = (unsigned __int16)sub_476120(v21, v7, v14, v20, v19);\n  a1[2] = (unsigned __int16)sub_476120(v21, v7, v16, v20, v19);\n  a1[3] = (unsigned __int16)sub_476120(v21, v7, v17, v20, v19);\n  a1[4] = (unsigned __int16)sub_476120(v21, v8, v13, v20, v19);\n  a1[5] = (unsigned __int16)sub_476120(v21, v8, v15, v20, v19);\n  a1[6] = (unsigned __int16)sub_476120(v21, v8, v16, v20, v19);\n  a1[7] = (unsigned __int16)sub_476120(v21, v8, v17, v20, v19);\n  a1[8] = (unsigned __int16)sub_476120(v21, v9, v13, v20, v19);\n  a1[9] = (unsigned __int16)sub_476120(v21, v9, v15, v20, v19);\n  a1[10] = (unsigned __int16)sub_476120(v21, v9, v16, v20, v19);\n  a1[11] = (unsigned __int16)sub_476120(v21, v9, v17, v20, v19);\n  a1[12] = (unsigned __int16)sub_476120(v21, v10, v13, v20, v19);\n  a1[13] = (unsigned __int16)sub_476120(v21, v10, v15, v20, v19);\n  a1[14] = (unsigned __int16)sub_476120(v21, v10, v16, v20, v19);\n  result = (unsigned __int16)sub_476120(v21, v10, v17, v20, v19);\n  a1[15] = (unsigned __int16)result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42bad0L", 
            "funcEndAddr": "0x42bd1dL", 
            "funcName": "sub_42BAD0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_42BD80(int a1, int a2, int a3, int a4, int a5, __int16 a6, __int16 a7)\n{\n  __int16 v7; // r10\n  int v8; // er13\n  int v9; // er11\n  __int64 v10; // r9\n  __int64 v11; // r14\n  int v12; // ebp\n  __int64 v13; // r15\n  unsigned int v14; // ebx\n  __int16 v15; // bp\n  int v16; // edi\n  int v17; // edx\n  char *v18; // rax\n  bool v19; // r14\n  bool v20; // r12\n  int v21; // ST1C_4\n  __int64 v22; // r9\n  int v23; // ST18_4\n  bool v24; // r13\n  bool v25; // r14\n  unsigned int v26; // er12\n  __int16 v27; // bx\n  int v28; // ebp\n  __int64 v29; // r9\n  __int16 v30; // bx\n  signed __int64 v31; // r8\n  __int64 v32; // r9\n  int v33; // er11\n  int v34; // er13\n  char v35; // cl\n  int v36; // er14\n  int v37; // ebp\n  __int64 v38; // rbx\n  __int64 v39; // r10\n  signed __int64 v40; // r15\n  char *v41; // r12\n  __int16 *v42; // r9\n  __int16 *v43; // rsi\n  int v44; // edi\n  signed __int64 result; // rax\n  __int16 v46; // dx\n  int v47; // edi\n  __int16 v48; // ax\n  __int16 v49; // dx\n  int v50; // er15\n  int v51; // edi\n  __int16 v52; // ax\n  __int64 v53; // r11\n  __int16 v54; // dx\n  signed __int64 v55; // r10\n  int v56; // edi\n  __int16 v57; // r8\n  _WORD *v58; // rsi\n  signed __int64 v59; // r10\n  signed __int64 v60; // r11\n  char *v61; // rsi\n  __int16 *v62; // rbp\n  __int16 *v63; // rbx\n  int v64; // ecx\n  int v65; // edx\n  int v66; // er11\n  int v67; // er14\n  char v68; // cl\n  int v69; // er15\n  int v70; // edi\n  __int64 v71; // rbx\n  char *v72; // r12\n  int v73; // edx\n  __int16 v74; // si\n  __int16 v75; // bp\n  int v76; // edx\n  __int16 v77; // si\n  __int16 v78; // bp\n  int v79; // edx\n  __int16 v80; // si\n  __int16 v81; // bp\n  int v82; // edx\n  __int16 v83; // si\n  __int16 v84; // bp\n  signed __int64 v85; // rbx\n  char *v86; // r8\n  signed __int64 v87; // rbp\n  signed __int64 v88; // rcx\n  __int16 *v89; // r9\n  int v90; // er11\n  int v91; // er14\n  char v92; // cl\n  int v93; // er15\n  int v94; // edi\n  __int64 v95; // rbx\n  char *v96; // r12\n  int v97; // edx\n  __int16 v98; // si\n  __int16 v99; // bp\n  int v100; // edx\n  __int16 v101; // si\n  __int16 v102; // bp\n  int v103; // edx\n  __int16 v104; // si\n  __int16 v105; // bp\n  int v106; // edx\n  __int16 v107; // si\n  __int16 v108; // bp\n  signed __int64 v109; // rcx\n  signed __int64 v110; // rdi\n  signed __int64 v111; // rdx\n  signed __int64 v112; // rsi\n  bool v113; // [rsp+8h] [rbp-60h]\n  int v114; // [rsp+8h] [rbp-60h]\n  int v115; // [rsp+Ch] [rbp-5Ch]\n  int v116; // [rsp+10h] [rbp-58h]\n  int v117; // [rsp+28h] [rbp-40h]\n  int v118; // [rsp+30h] [rbp-38h]\n\n  v7 = a6;\n  v8 = a3;\n  v9 = a1 + *((_DWORD *)off_49F6D0 + 42);\n  v116 = a2 + *((_DWORD *)off_49F6D0 + 43);\n  v10 = *((_QWORD *)off_49F6D0 + 1771);\n  v11 = *((signed int *)off_49F6D0 + 3);\n  if ( !*(_DWORD *)(qword_4F9DB8 + 192) || (v12 = *((_DWORD *)off_49F6D0 + 6), v113 = 1, v12) && v12 != 3 )\n  {\n    if ( *(_DWORD *)(qword_4F9DB8 + 196) )\n      v113 = *((_DWORD *)off_49F6D0 + 6) == 1;\n    else\n      v113 = 0;\n  }\n  v13 = *((_QWORD *)off_49F6D0 + 8991);\n  v14 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) && *(_DWORD *)(v10 + 632 * v11 + 532) )\n    v14 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  v15 = a7;\n  v118 = a1;\n  v16 = a1 >> 2;\n  v117 = a2;\n  v115 = a2 >> 2;\n  if ( v7 || (v17 = *(_DWORD *)(v10 + 632 * v11 + 580)) == 0 || a5 != 1 || a4 != 1 || v8 != 2 || a7 )\n  {\n    v20 = v8 == 0;\n    v19 = v8 == 2;\n    if ( (v8 | 2) != 2 )\n      goto LABEL_21;\n  }\n  else\n  {\n    v18 = (char *)off_49F6D0 + 71944;\n    if ( v17 == 1 )\n      v18 = (char *)off_49F6D0 + 71936;\n    v13 = *(_QWORD *)v18;\n    v19 = 1;\n    v20 = 0;\n  }\n  v21 = a5;\n  v22 = (__int64)*(&base + v14);\n  v23 = v8;\n  v24 = v19;\n  v25 = v20;\n  v26 = v14;\n  v27 = v7;\n  v28 = v9;\n  sub_42BAD0(\n    &word_49FC80,\n    v9,\n    v116,\n    *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v13 + 8LL * v16) + 8LL * v115) + 8LL * v7) + 8LL * a4),\n    v7,\n    v22);\n  a5 = v21;\n  v9 = v28;\n  v15 = a7;\n  v7 = v27;\n  v14 = v26;\n  v20 = v25;\n  v19 = v24;\n  v8 = v23;\nLABEL_21:\n  if ( (unsigned int)(v8 - 1) <= 1 )\n  {\n    v29 = (__int64)*(&base + (v14 | 1));\n    v30 = v7;\n    sub_42BAD0(\n      &word_49FCC0,\n      v9,\n      v116,\n      *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8LL * v16) + 8LL * v115) + 8LL)\n                                     + 8LL * v15)\n                         + 8LL * a5),\n      v15,\n      v29);\n    v7 = v30;\n  }\n  LODWORD(v31) = v118 + 4;\n  LODWORD(v32) = a2 + 4;\n  if ( v113 )\n  {\n    if ( v19 )\n    {\n      v33 = **(_DWORD **)(*(_QWORD *)(*(_QWORD *)qword_4F9F78 + 8LL * v7) + 8LL * v15);\n      v114 = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)qword_4F9F78 + 1) + 8LL * v7) + 8LL * v15);\n      v34 = 2 * dword_4FA15C;\n      v35 = dword_4FA0EC + 1;\n      v36 = (**(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8LL * v7)\n           + **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8LL * v15)\n           + 1) >> 1;\n      v37 = *((_DWORD *)off_49F6D0 + 18171);\n      v31 = (signed int)v31;\n      v38 = a2;\n      v39 = (signed int)v32;\n      v40 = v118 + 1LL;\n      v41 = (char *)off_49F6D0 + 32 * v118 + 12696;\n      v42 = &word_49FCC0;\n      v43 = &word_49FC80;\n      do\n      {\n        v44 = v36 + ((v34 + v33 * *(_DWORD *)v43 + v114 * *(_DWORD *)v42) >> v35);\n        result = (unsigned int)v44;\n        if ( v44 <= 0 )\n          result = 0LL;\n        v46 = v37;\n        if ( v37 >= v44 )\n          v46 = result;\n        *(_WORD *)&v41[2 * v38 - 96] = v46;\n        if ( v40 >= v31 )\n        {\n          v43 += 2;\n          v42 += 2;\n        }\n        else\n        {\n          v47 = v36 + ((v34 + v33 * *((_DWORD *)v43 + 1) + v114 * *((_DWORD *)v42 + 1)) >> v35);\n          v48 = v36 + ((v34 + v33 * *((_DWORD *)v43 + 1) + v114 * *((_DWORD *)v42 + 1)) >> v35);\n          if ( v47 <= 0 )\n            v48 = 0;\n          v49 = v37;\n          if ( v37 >= v47 )\n            v49 = v48;\n          *(_WORD *)&v41[2 * v38 - 64] = v49;\n          v50 = v33;\n          v51 = v36 + ((v34 + v33 * *((_DWORD *)v43 + 2) + v114 * *((_DWORD *)v42 + 2)) >> v35);\n          v52 = v36 + ((v34 + v33 * *((_DWORD *)v43 + 2) + v114 * *((_DWORD *)v42 + 2)) >> v35);\n          if ( v51 <= 0 )\n            v52 = 0;\n          v53 = v39;\n          v54 = v37;\n          if ( v37 >= v51 )\n            v54 = v52;\n          v55 = v31;\n          *(_WORD *)&v41[2 * v38 - 32] = v54;\n          v56 = v36 + ((v34 + v50 * *((_DWORD *)v43 + 3) + v114 * *((_DWORD *)v42 + 3)) >> v35);\n          result = (unsigned int)v56;\n          if ( v56 <= 0 )\n            result = 0LL;\n          v57 = v37;\n          if ( v37 >= v56 )\n            v57 = result;\n          v43 += 8;\n          v42 += 8;\n          *(_WORD *)&v41[2 * v38] = v57;\n          v31 = v55;\n          v39 = v53;\n          v33 = v50;\n          v40 = v118 + 1LL;\n        }\n        ++v38;\n      }\n      while ( v38 < v39 );\n    }\n    else if ( v20 )\n    {\n      v66 = **(_DWORD **)(*(_QWORD *)qword_4F9F88 + 8LL * v7);\n      v67 = dword_4FA15C;\n      v68 = dword_4FA0EC;\n      v69 = **(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8LL * v7);\n      v70 = *((_DWORD *)off_49F6D0 + 18171);\n      v31 = (signed int)v31;\n      v71 = a2;\n      v32 = (signed int)v32;\n      v72 = (char *)off_49F6D0 + 32 * v118 + 12696;\n      result = (signed __int64)&word_49FC80;\n      do\n      {\n        v73 = v69 + ((v67 + v66 * *(_DWORD *)result) >> v68);\n        v74 = v69 + ((v67 + v66 * *(_DWORD *)result) >> v68);\n        if ( v73 <= 0 )\n          v74 = 0;\n        v75 = v70;\n        if ( v70 >= v73 )\n          v75 = v74;\n        *(_WORD *)&v72[2 * v71 - 96] = v75;\n        if ( v118 + 1LL >= v31 )\n        {\n          result += 4LL;\n        }\n        else\n        {\n          v76 = v69 + ((v67 + v66 * *(_DWORD *)(result + 4)) >> v68);\n          v77 = v69 + ((v67 + v66 * *(_DWORD *)(result + 4)) >> v68);\n          if ( v76 <= 0 )\n            v77 = 0;\n          v78 = v70;\n          if ( v70 >= v76 )\n            v78 = v77;\n          *(_WORD *)&v72[2 * v71 - 64] = v78;\n          v79 = v69 + ((v67 + v66 * *(_DWORD *)(result + 8)) >> v68);\n          v80 = v69 + ((v67 + v66 * *(_DWORD *)(result + 8)) >> v68);\n          if ( v79 <= 0 )\n            v80 = 0;\n          v81 = v70;\n          if ( v70 >= v79 )\n            v81 = v80;\n          *(_WORD *)&v72[2 * v71 - 32] = v81;\n          v82 = v69 + ((v67 + v66 * *(_DWORD *)(result + 12)) >> v68);\n          v83 = v69 + ((v67 + v66 * *(_DWORD *)(result + 12)) >> v68);\n          if ( v82 <= 0 )\n            v83 = 0;\n          v84 = v70;\n          if ( v70 >= v82 )\n            v84 = v83;\n          result += 16LL;\n          *(_WORD *)&v72[2 * v71] = v84;\n        }\n        ++v71;\n      }\n      while ( v71 < v32 );\n    }\n    else\n    {\n      v90 = **(_DWORD **)(*((_QWORD *)qword_4F9F88 + 1) + 8LL * v15);\n      v91 = dword_4FA15C;\n      v92 = dword_4FA0EC;\n      v93 = **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8LL * v15);\n      v94 = *((_DWORD *)off_49F6D0 + 18171);\n      v31 = (signed int)v31;\n      v95 = a2;\n      v32 = (signed int)v32;\n      v96 = (char *)off_49F6D0 + 32 * v118 + 12696;\n      result = (signed __int64)&word_49FCC0;\n      do\n      {\n        v97 = v93 + ((v91 + v90 * *(_DWORD *)result) >> v92);\n        v98 = v93 + ((v91 + v90 * *(_DWORD *)result) >> v92);\n        if ( v97 <= 0 )\n          v98 = 0;\n        v99 = v94;\n        if ( v94 >= v97 )\n          v99 = v98;\n        *(_WORD *)&v96[2 * v95 - 96] = v99;\n        if ( v118 + 1LL >= v31 )\n        {\n          result += 4LL;\n        }\n        else\n        {\n          v100 = v93 + ((v91 + v90 * *(_DWORD *)(result + 4)) >> v92);\n          v101 = v93 + ((v91 + v90 * *(_DWORD *)(result + 4)) >> v92);\n          if ( v100 <= 0 )\n            v101 = 0;\n          v102 = v94;\n          if ( v94 >= v100 )\n            v102 = v101;\n          *(_WORD *)&v96[2 * v95 - 64] = v102;\n          v103 = v93 + ((v91 + v90 * *(_DWORD *)(result + 8)) >> v92);\n          v104 = v93 + ((v91 + v90 * *(_DWORD *)(result + 8)) >> v92);\n          if ( v103 <= 0 )\n            v104 = 0;\n          v105 = v94;\n          if ( v94 >= v103 )\n            v105 = v104;\n          *(_WORD *)&v96[2 * v95 - 32] = v105;\n          v106 = v93 + ((v91 + v90 * *(_DWORD *)(result + 12)) >> v92);\n          v107 = v93 + ((v91 + v90 * *(_DWORD *)(result + 12)) >> v92);\n          if ( v106 <= 0 )\n            v107 = 0;\n          v108 = v94;\n          if ( v94 >= v106 )\n            v108 = v107;\n          result += 16LL;\n          *(_WORD *)&v96[2 * v95] = v108;\n        }\n        ++v95;\n      }\n      while ( v95 < v32 );\n    }\n  }\n  else\n  {\n    v58 = off_49F6D0;\n    v59 = (signed int)v31;\n    result = v117;\n    v60 = (signed int)v32;\n    if ( v19 )\n    {\n      v61 = (char *)off_49F6D0 + 32 * v118 + 12696;\n      v62 = &word_49FCC0;\n      v63 = &word_49FC80;\n      do\n      {\n        *(_WORD *)&v61[2 * result - 96] = (((unsigned int)(*(_DWORD *)v63 + *(_DWORD *)v62 + 1) >> 31)\n                                         + *(_DWORD *)v63\n                                         + *(_DWORD *)v62\n                                         + 1) >> 1;\n        if ( v118 + 1LL >= (signed int)v31 )\n        {\n          v63 += 2;\n          v62 += 2;\n        }\n        else\n        {\n          *(_WORD *)&v61[2 * result - 64] = (((unsigned int)(*((_DWORD *)v63 + 1) + *((_DWORD *)v62 + 1) + 1) >> 31)\n                                           + *((_DWORD *)v63 + 1)\n                                           + *((_DWORD *)v62 + 1)\n                                           + 1) >> 1;\n          *(_WORD *)&v61[2 * result - 32] = (((unsigned int)(*((_DWORD *)v63 + 2) + *((_DWORD *)v62 + 2) + 1) >> 31)\n                                           + *((_DWORD *)v63 + 2)\n                                           + *((_DWORD *)v62 + 2)\n                                           + 1) >> 1;\n          v64 = *((_DWORD *)v63 + 3);\n          v63 += 8;\n          v65 = *((_DWORD *)v62 + 3);\n          v62 += 8;\n          *(_WORD *)&v61[2 * result] = (((unsigned int)(v64 + v65 + 1) >> 31) + v64 + v65 + 1) >> 1;\n        }\n        ++result;\n      }\n      while ( result < (signed int)v32 );\n    }\n    else\n    {\n      if ( v20 )\n      {\n        v85 = 16LL * v118;\n        v86 = (char *)off_49F6D0 + 32 * v118;\n        *(_WORD *)&v86[2 * v117 + 12600] = word_49FC80;\n        v87 = v118 + 1LL;\n        if ( v87 >= v59 )\n        {\n          v89 = &word_49FC84;\n        }\n        else\n        {\n          v58[16 * v87 + 6300 + v117] = word_49FC84;\n          v88 = (signed __int64)&v58[v85 + 6300];\n          *(_WORD *)(v88 + 2LL * v117 + 64) = word_49FC88;\n          *(_WORD *)(v88 + 2LL * v117 + 96) = word_49FC8C;\n          v89 = (__int16 *)&unk_49FC90;\n        }\n      }\n      else\n      {\n        v85 = 16LL * v118;\n        v86 = (char *)off_49F6D0 + 32 * v118;\n        *(_WORD *)&v86[2 * v117 + 12600] = word_49FCC0;\n        v87 = v118 + 1LL;\n        if ( v87 >= v59 )\n        {\n          v89 = &word_49FCC4;\n        }\n        else\n        {\n          v58[16 * v87 + 6300 + v117] = word_49FCC4;\n          v109 = (signed __int64)&v58[v85 + 6300];\n          *(_WORD *)(v109 + 2LL * v117 + 64) = word_49FCC8;\n          *(_WORD *)(v109 + 2LL * v117 + 96) = word_49FCCC;\n          v89 = (__int16 *)&unk_49FCD0;\n        }\n      }\n      v110 = v117 + 1LL;\n      if ( v110 < v60 )\n      {\n        *(_WORD *)&v86[2 * v110 + 12600] = *v89;\n        if ( v87 >= v59 )\n        {\n          *(_WORD *)&v86[2 * v117 + 12604] = v89[2];\n          *(_WORD *)&v86[2 * v117 + 12606] = v89[4];\n        }\n        else\n        {\n          v111 = (signed __int64)&v58[16 * v87 + 6300];\n          *(_WORD *)(v111 + 2 * v110) = v89[2];\n          v112 = (signed __int64)&v58[v85 + 6300];\n          *(_WORD *)(v112 + 2 * v110 + 64) = v89[4];\n          *(_WORD *)(v112 + 2 * v110 + 96) = v89[6];\n          *(_WORD *)(v112 + 2LL * v117 + 4) = v89[8];\n          *(_WORD *)(v111 + 2LL * v117 + 4) = v89[10];\n          *(_WORD *)(v112 + 2LL * v117 + 68) = v89[12];\n          *(_WORD *)(v112 + 2LL * v117 + 100) = v89[14];\n          *(_WORD *)(v112 + 2LL * v117 + 6) = v89[16];\n          *(_WORD *)(v111 + 2LL * v117 + 6) = v89[18];\n          *(_WORD *)(v112 + 2LL * v117 + 70) = v89[20];\n          *(_WORD *)(v112 + 2LL * v117 + 102) = v89[22];\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42bd80L", 
            "funcEndAddr": "0x42c660L", 
            "funcName": "sub_42BD80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_42C660(int a1, int a2, int a3, int a4, int a5, __int16 a6, __int16 a7, int a8)\n{\n  int v8; // er10\n  int v9; // edx\n  int v10; // ebp\n  bool v11; // r15\n  unsigned int v12; // er12\n  int v13; // er14\n  int v14; // er15\n  char *v15; // rsi\n  __int64 v16; // r13\n  int v17; // esi\n  int v18; // ebx\n  int v19; // ebp\n  signed __int64 v20; // r8\n  __int64 v21; // r9\n  int v22; // er11\n  int v23; // er13\n  char v24; // cl\n  int v25; // er14\n  int v26; // ebp\n  __int64 v27; // rbx\n  __int64 v28; // r10\n  signed __int64 v29; // r12\n  char *v30; // r15\n  __int16 *v31; // r9\n  __int16 *v32; // rsi\n  int v33; // edi\n  signed __int64 result; // rax\n  __int16 v35; // dx\n  int v36; // edi\n  __int16 v37; // ax\n  __int16 v38; // dx\n  int v39; // er12\n  int v40; // edi\n  __int16 v41; // ax\n  __int64 v42; // r11\n  __int16 v43; // dx\n  signed __int64 v44; // r10\n  int v45; // edi\n  __int16 v46; // r8\n  _WORD *v47; // r10\n  signed __int64 v48; // r11\n  signed __int64 v49; // r14\n  char *v50; // rsi\n  __int16 *v51; // rbp\n  __int16 *v52; // rbx\n  int v53; // ecx\n  int v54; // edx\n  int v55; // er11\n  int v56; // er14\n  char v57; // cl\n  int v58; // er15\n  int v59; // edi\n  __int64 v60; // rbx\n  char *v61; // r12\n  int v62; // edx\n  __int16 v63; // si\n  __int16 v64; // bp\n  int v65; // edx\n  __int16 v66; // si\n  __int16 v67; // bp\n  int v68; // edx\n  __int16 v69; // si\n  __int16 v70; // bp\n  int v71; // edx\n  __int16 v72; // si\n  __int16 v73; // bp\n  signed __int64 v74; // rbx\n  char *v75; // r8\n  signed __int64 v76; // rbp\n  signed __int64 v77; // rcx\n  __int16 *v78; // rdi\n  int v79; // er11\n  int v80; // er14\n  char v81; // cl\n  int v82; // er15\n  int v83; // edi\n  __int64 v84; // rbx\n  char *v85; // r12\n  int v86; // edx\n  __int16 v87; // si\n  __int16 v88; // bp\n  int v89; // edx\n  __int16 v90; // si\n  __int16 v91; // bp\n  int v92; // edx\n  __int16 v93; // si\n  __int16 v94; // bp\n  int v95; // edx\n  __int16 v96; // si\n  __int16 v97; // bp\n  signed __int64 v98; // rbx\n  signed __int64 v99; // rbp\n  signed __int64 v100; // rcx\n  __int16 *v101; // r9\n  signed __int64 v102; // rsi\n  signed __int64 v103; // rdx\n  signed __int64 v104; // rbp\n  signed __int64 v105; // rdi\n  signed __int64 v106; // rdx\n  signed __int64 v107; // rsi\n  __int16 v108; // cx\n  int v109; // [rsp+0h] [rbp-58h]\n  int v110; // [rsp+0h] [rbp-58h]\n  __int16 v111; // [rsp+Ch] [rbp-4Ch]\n  int v112; // [rsp+10h] [rbp-48h]\n  signed __int64 v113; // [rsp+10h] [rbp-48h]\n  int v114; // [rsp+18h] [rbp-40h]\n  bool v115; // [rsp+1Ch] [rbp-3Ch]\n  int v116; // [rsp+20h] [rbp-38h]\n\n  v111 = a6;\n  v109 = a3;\n  v8 = a1 + *((_DWORD *)off_49F6D0 + 42);\n  v9 = a2 + *((_DWORD *)off_49F6D0 + 43);\n  if ( !*(_DWORD *)(qword_4F9DB8 + 192) || (v10 = *((_DWORD *)off_49F6D0 + 6), v11 = 1, v10) && v10 != 3 )\n  {\n    if ( *(_DWORD *)(qword_4F9DB8 + 196) )\n      v11 = *((_DWORD *)off_49F6D0 + 6) == 1;\n    else\n      v11 = 0;\n  }\n  v12 = 0;\n  v114 = a5;\n  v115 = v11;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n  {\n    v12 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v116 = a1;\n  v13 = a1 >> 2;\n  v112 = a2;\n  v14 = a2 >> 2;\n  v15 = (char *)off_49F6D0 + 71936;\n  if ( !a8 )\n    v15 = (char *)off_49F6D0 + 71944;\n  v16 = *(_QWORD *)v15;\n  v17 = v109;\n  if ( (v109 | 2) == 2 )\n  {\n    v18 = a1 + *((_DWORD *)off_49F6D0 + 42);\n    v19 = v9;\n    sub_42BAD0(\n      &word_49FD00,\n      v8,\n      v9,\n      *(signed __int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v16 + 8LL * v13) + 8LL * v14) + 8LL * a6) + 8LL * a4),\n      a6,\n      (__int64)*(&base + v12));\n    v9 = v19;\n    v8 = v18;\n    v17 = v109;\n  }\n  if ( (unsigned int)(v17 - 1) <= 1 )\n  {\n    sub_42BAD0(\n      &word_49FD40,\n      v8,\n      v9,\n      *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8LL * v13) + 8LL * v14) + 8LL)\n                                     + 8LL * a7)\n                         + 8LL * v114),\n      a7,\n      (__int64)*(&base + (v12 | 1)));\n    v17 = v109;\n  }\n  LODWORD(v20) = a1 + 4;\n  LODWORD(v21) = v112 + 4;\n  if ( v115 )\n  {\n    if ( v17 == 2 )\n    {\n      v22 = **(_DWORD **)(*(_QWORD *)(*(_QWORD *)qword_4F9F78 + 8LL * v111) + 8LL * a7);\n      v110 = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)qword_4F9F78 + 1) + 8LL * v111) + 8LL * a7);\n      v23 = 2 * dword_4FA15C;\n      v24 = dword_4FA0EC + 1;\n      v25 = (**(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8LL * v111)\n           + **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8LL * a7)\n           + 1) >> 1;\n      v26 = *((_DWORD *)off_49F6D0 + 18171);\n      v20 = (signed int)v20;\n      v27 = v112;\n      v28 = (signed int)v21;\n      v29 = a1 + 1LL;\n      v30 = (char *)off_49F6D0 + 32 * a1 + 12696;\n      v31 = &word_49FD40;\n      v32 = &word_49FD00;\n      v113 = a1 + 1LL;\n      do\n      {\n        v33 = v25 + ((v23 + v22 * *(_DWORD *)v32 + v110 * *(_DWORD *)v31) >> v24);\n        result = (unsigned int)v33;\n        if ( v33 <= 0 )\n          result = 0LL;\n        v35 = v26;\n        if ( v26 >= v33 )\n          v35 = result;\n        *(_WORD *)&v30[2 * v27 - 96] = v35;\n        if ( v29 >= v20 )\n        {\n          v32 += 2;\n          v31 += 2;\n        }\n        else\n        {\n          v36 = v25 + ((v23 + v22 * *((_DWORD *)v32 + 1) + v110 * *((_DWORD *)v31 + 1)) >> v24);\n          v37 = v25 + ((v23 + v22 * *((_DWORD *)v32 + 1) + v110 * *((_DWORD *)v31 + 1)) >> v24);\n          if ( v36 <= 0 )\n            v37 = 0;\n          v38 = v26;\n          if ( v26 >= v36 )\n            v38 = v37;\n          *(_WORD *)&v30[2 * v27 - 64] = v38;\n          v39 = v22;\n          v40 = v25 + ((v23 + v22 * *((_DWORD *)v32 + 2) + v110 * *((_DWORD *)v31 + 2)) >> v24);\n          v41 = v25 + ((v23 + v22 * *((_DWORD *)v32 + 2) + v110 * *((_DWORD *)v31 + 2)) >> v24);\n          if ( v40 <= 0 )\n            v41 = 0;\n          v42 = v28;\n          v43 = v26;\n          if ( v26 >= v40 )\n            v43 = v41;\n          v44 = v20;\n          *(_WORD *)&v30[2 * v27 - 32] = v43;\n          v45 = v25 + ((v23 + v39 * *((_DWORD *)v32 + 3) + v110 * *((_DWORD *)v31 + 3)) >> v24);\n          result = (unsigned int)v45;\n          if ( v45 <= 0 )\n            result = 0LL;\n          v46 = v26;\n          if ( v26 >= v45 )\n            v46 = result;\n          v32 += 8;\n          v31 += 8;\n          *(_WORD *)&v30[2 * v27] = v46;\n          v20 = v44;\n          v28 = v42;\n          v22 = v39;\n          v29 = v113;\n        }\n        ++v27;\n      }\n      while ( v27 < v28 );\n    }\n    else if ( v17 )\n    {\n      v55 = **(_DWORD **)(*((_QWORD *)qword_4F9F88 + 1) + 8LL * a7);\n      v56 = dword_4FA15C;\n      v57 = dword_4FA0EC;\n      v58 = **(_DWORD **)(*((_QWORD *)qword_4F9F80 + 1) + 8LL * a7);\n      v59 = *((_DWORD *)off_49F6D0 + 18171);\n      v20 = (signed int)v20;\n      v60 = v112;\n      v21 = (signed int)v21;\n      v61 = (char *)off_49F6D0 + 32 * v116 + 12696;\n      result = (signed __int64)&word_49FD40;\n      do\n      {\n        v62 = v58 + ((v56 + v55 * *(_DWORD *)result) >> v57);\n        v63 = v58 + ((v56 + v55 * *(_DWORD *)result) >> v57);\n        if ( v62 <= 0 )\n          v63 = 0;\n        v64 = v59;\n        if ( v59 >= v62 )\n          v64 = v63;\n        *(_WORD *)&v61[2 * v60 - 96] = v64;\n        if ( v116 + 1LL >= v20 )\n        {\n          result += 4LL;\n        }\n        else\n        {\n          v65 = v58 + ((v56 + v55 * *(_DWORD *)(result + 4)) >> v57);\n          v66 = v58 + ((v56 + v55 * *(_DWORD *)(result + 4)) >> v57);\n          if ( v65 <= 0 )\n            v66 = 0;\n          v67 = v59;\n          if ( v59 >= v65 )\n            v67 = v66;\n          *(_WORD *)&v61[2 * v60 - 64] = v67;\n          v68 = v58 + ((v56 + v55 * *(_DWORD *)(result + 8)) >> v57);\n          v69 = v58 + ((v56 + v55 * *(_DWORD *)(result + 8)) >> v57);\n          if ( v68 <= 0 )\n            v69 = 0;\n          v70 = v59;\n          if ( v59 >= v68 )\n            v70 = v69;\n          *(_WORD *)&v61[2 * v60 - 32] = v70;\n          v71 = v58 + ((v56 + v55 * *(_DWORD *)(result + 12)) >> v57);\n          v72 = v58 + ((v56 + v55 * *(_DWORD *)(result + 12)) >> v57);\n          if ( v71 <= 0 )\n            v72 = 0;\n          v73 = v59;\n          if ( v59 >= v71 )\n            v73 = v72;\n          result += 16LL;\n          *(_WORD *)&v61[2 * v60] = v73;\n        }\n        ++v60;\n      }\n      while ( v60 < v21 );\n    }\n    else\n    {\n      v79 = **(_DWORD **)(*(_QWORD *)qword_4F9F88 + 8LL * v111);\n      v80 = dword_4FA15C;\n      v81 = dword_4FA0EC;\n      v82 = **(_DWORD **)(*(_QWORD *)qword_4F9F80 + 8LL * v111);\n      v83 = *((_DWORD *)off_49F6D0 + 18171);\n      v20 = (signed int)v20;\n      v84 = v112;\n      v21 = (signed int)v21;\n      v85 = (char *)off_49F6D0 + 32 * v116 + 12696;\n      result = (signed __int64)&word_49FD00;\n      do\n      {\n        v86 = v82 + ((v80 + v79 * *(_DWORD *)result) >> v81);\n        v87 = v82 + ((v80 + v79 * *(_DWORD *)result) >> v81);\n        if ( v86 <= 0 )\n          v87 = 0;\n        v88 = v83;\n        if ( v83 >= v86 )\n          v88 = v87;\n        *(_WORD *)&v85[2 * v84 - 96] = v88;\n        if ( v116 + 1LL >= v20 )\n        {\n          result += 4LL;\n        }\n        else\n        {\n          v89 = v82 + ((v80 + v79 * *(_DWORD *)(result + 4)) >> v81);\n          v90 = v82 + ((v80 + v79 * *(_DWORD *)(result + 4)) >> v81);\n          if ( v89 <= 0 )\n            v90 = 0;\n          v91 = v83;\n          if ( v83 >= v89 )\n            v91 = v90;\n          *(_WORD *)&v85[2 * v84 - 64] = v91;\n          v92 = v82 + ((v80 + v79 * *(_DWORD *)(result + 8)) >> v81);\n          v93 = v82 + ((v80 + v79 * *(_DWORD *)(result + 8)) >> v81);\n          if ( v92 <= 0 )\n            v93 = 0;\n          v94 = v83;\n          if ( v83 >= v92 )\n            v94 = v93;\n          *(_WORD *)&v85[2 * v84 - 32] = v94;\n          v95 = v82 + ((v80 + v79 * *(_DWORD *)(result + 12)) >> v81);\n          v96 = v82 + ((v80 + v79 * *(_DWORD *)(result + 12)) >> v81);\n          if ( v95 <= 0 )\n            v96 = 0;\n          v97 = v83;\n          if ( v83 >= v95 )\n            v97 = v96;\n          result += 16LL;\n          *(_WORD *)&v85[2 * v84] = v97;\n        }\n        ++v84;\n      }\n      while ( v84 < v21 );\n    }\n  }\n  else\n  {\n    v47 = off_49F6D0;\n    v48 = (signed int)v20;\n    result = v112;\n    v49 = (signed int)v21;\n    if ( v17 != 2 )\n    {\n      if ( v17 )\n      {\n        v74 = 16LL * a1;\n        v75 = (char *)off_49F6D0 + 32 * a1;\n        *(_WORD *)&v75[2 * v112 + 12600] = word_49FD40;\n        v76 = a1 + 1LL;\n        if ( v76 >= v48 )\n        {\n          v78 = &word_49FD44;\n        }\n        else\n        {\n          v47[16 * v76 + 6300 + v112] = word_49FD44;\n          v77 = (signed __int64)&v47[v74 + 6300];\n          *(_WORD *)(v77 + 2LL * v112 + 64) = word_49FD48;\n          *(_WORD *)(v77 + 2LL * v112 + 96) = word_49FD4C;\n          v78 = (__int16 *)&unk_49FD50;\n        }\n        v102 = v112 + 1LL;\n        if ( v102 >= (signed int)v21 )\n          return result;\n        *(_WORD *)&v75[2 * v102 + 12600] = *v78;\n        if ( v76 < v48 )\n        {\n          v103 = (signed __int64)&v47[16 * v76 + 6300];\n          *(_WORD *)(v103 + 2 * v102) = v78[2];\n          v104 = (signed __int64)&v47[v74 + 6300];\n          *(_WORD *)(v104 + 2 * v102 + 64) = v78[4];\n          *(_WORD *)(v104 + 2 * v102 + 96) = v78[6];\n          *(_WORD *)(v104 + 2LL * v112 + 4) = v78[8];\n          *(_WORD *)(v103 + 2LL * v112 + 4) = v78[10];\n          *(_WORD *)(v104 + 2LL * v112 + 68) = v78[12];\n          *(_WORD *)(v104 + 2LL * v112 + 100) = v78[14];\n          *(_WORD *)(v104 + 2LL * v112 + 6) = v78[16];\n          *(_WORD *)(v103 + 2LL * v112 + 6) = v78[18];\n          *(_WORD *)(v104 + 2LL * v112 + 70) = v78[20];\n          *(_WORD *)(v104 + 2LL * v112 + 102) = v78[22];\n          return result;\n        }\n        *(_WORD *)&v75[2 * v112 + 12604] = v78[2];\n        v108 = v78[4];\n      }\n      else\n      {\n        v98 = 16LL * a1;\n        v75 = (char *)off_49F6D0 + 32 * a1;\n        *(_WORD *)&v75[2 * v112 + 12600] = word_49FD00;\n        v99 = a1 + 1LL;\n        if ( v99 >= v48 )\n        {\n          v101 = &word_49FD04;\n        }\n        else\n        {\n          v47[16 * v99 + 6300 + v112] = word_49FD04;\n          v100 = (signed __int64)&v47[v98 + 6300];\n          *(_WORD *)(v100 + 2LL * v112 + 64) = word_49FD08;\n          *(_WORD *)(v100 + 2LL * v112 + 96) = word_49FD0C;\n          v101 = (__int16 *)&unk_49FD10;\n        }\n        v105 = v112 + 1LL;\n        if ( v105 >= v49 )\n          return result;\n        *(_WORD *)&v75[2 * v105 + 12600] = *v101;\n        if ( v99 < v48 )\n        {\n          v106 = (signed __int64)&v47[16 * v99 + 6300];\n          *(_WORD *)(v106 + 2 * v105) = v101[2];\n          v107 = (signed __int64)&v47[v98 + 6300];\n          *(_WORD *)(v107 + 2 * v105 + 64) = v101[4];\n          *(_WORD *)(v107 + 2 * v105 + 96) = v101[6];\n          *(_WORD *)(v107 + 2LL * v112 + 4) = v101[8];\n          *(_WORD *)(v106 + 2LL * v112 + 4) = v101[10];\n          *(_WORD *)(v107 + 2LL * v112 + 68) = v101[12];\n          *(_WORD *)(v107 + 2LL * v112 + 100) = v101[14];\n          *(_WORD *)(v107 + 2LL * v112 + 6) = v101[16];\n          *(_WORD *)(v106 + 2LL * v112 + 6) = v101[18];\n          *(_WORD *)(v107 + 2LL * v112 + 70) = v101[20];\n          *(_WORD *)(v107 + 2LL * v112 + 102) = v101[22];\n          return result;\n        }\n        *(_WORD *)&v75[2 * v112 + 12604] = v101[2];\n        v108 = v101[4];\n      }\n      *(_WORD *)&v75[2 * v112 + 12606] = v108;\n      return result;\n    }\n    v50 = (char *)off_49F6D0 + 32 * a1 + 12696;\n    v51 = &word_49FD40;\n    v52 = &word_49FD00;\n    do\n    {\n      *(_WORD *)&v50[2 * result - 96] = (((unsigned int)(*(_DWORD *)v52 + *(_DWORD *)v51 + 1) >> 31)\n                                       + *(_DWORD *)v52\n                                       + *(_DWORD *)v51\n                                       + 1) >> 1;\n      if ( a1 + 1LL >= (signed int)v20 )\n      {\n        v52 += 2;\n        v51 += 2;\n      }\n      else\n      {\n        *(_WORD *)&v50[2 * result - 64] = (((unsigned int)(*((_DWORD *)v52 + 1) + *((_DWORD *)v51 + 1) + 1) >> 31)\n                                         + *((_DWORD *)v52 + 1)\n                                         + *((_DWORD *)v51 + 1)\n                                         + 1) >> 1;\n        *(_WORD *)&v50[2 * result - 32] = (((unsigned int)(*((_DWORD *)v52 + 2) + *((_DWORD *)v51 + 2) + 1) >> 31)\n                                         + *((_DWORD *)v52 + 2)\n                                         + *((_DWORD *)v51 + 2)\n                                         + 1) >> 1;\n        v53 = *((_DWORD *)v52 + 3);\n        v52 += 8;\n        v54 = *((_DWORD *)v51 + 3);\n        v51 += 8;\n        *(_WORD *)&v50[2 * result] = (((unsigned int)(v53 + v54 + 1) >> 31) + v53 + v54 + 1) >> 1;\n      }\n      ++result;\n    }\n    while ( result < (signed int)v21 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42c660L", 
            "funcEndAddr": "0x42cf67L", 
            "funcName": "sub_42C660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42CF70(_DWORD *a1, _QWORD *a2, __int64 a3, __int16 a4, int a5, int a6, __m128i xmm0_0, __int16 a7, __int16 a8)\n{\n  __int16 v9; // bx\n  __int64 v10; // rbp\n  int v11; // eax\n  signed int *v12; // rcx\n  __int64 v13; // rdx\n  __int16 v14; // r10\n  __int16 v15; // r9\n  int v16; // er8\n  __int64 v17; // r15\n  signed __int64 v18; // r12\n  __int64 v19; // r11\n  __int64 v20; // rsi\n  __int64 v21; // rbp\n  __int64 v22; // r13\n  signed int v23; // ebx\n  int v24; // er14\n  char *v25; // rcx\n  char *v26; // r8\n  signed __int64 v27; // rbx\n  __int64 v28; // rsi\n  char *v29; // rsi\n  __int64 v30; // rbp\n  __int64 v31; // r15\n  char *v32; // rax\n  __int64 v33; // r12\n  char *v34; // rdx\n  char *v35; // rsi\n  char *v36; // rax\n  int v37; // ebx\n  char *v38; // r9\n  char *v39; // r10\n  char *v40; // rdx\n  char *v41; // rsi\n  __int64 v42; // r13\n  int v43; // esi\n  unsigned __int64 v44; // rax\n  __int64 v45; // r15\n  __int64 v46; // rbx\n  int v47; // edi\n  __int64 v48; // r12\n  int v49; // ebp\n  __int64 v50; // r8\n  int v51; // ecx\n  int v52; // ecx\n  int v53; // ebp\n  int v54; // ebp\n  bool v55; // zf\n  char *v56; // rdx\n  signed __int64 v57; // rcx\n  __int64 v58; // r9\n  char *v59; // rdi\n  int v60; // er14\n  int *v61; // rbp\n  int *v62; // r10\n  int *v63; // r9\n  int v64; // ecx\n  int v65; // edi\n  int v66; // edi\n  int v67; // er14\n  int v68; // er14\n  int v69; // edi\n  int v70; // ecx\n  int v71; // ebp\n  int v72; // ebp\n  int v73; // edi\n  int v74; // edi\n  int v75; // edi\n  int v76; // ecx\n  int v77; // ebp\n  int v78; // ebp\n  int v79; // edi\n  int v80; // edi\n  __int64 v81; // rbx\n  __int64 v82; // rbp\n  __int64 v83; // r15\n  __int64 v84; // rax\n  __int64 v85; // rcx\n  __int64 v86; // r11\n  __int64 v87; // r14\n  __int64 v88; // r10\n  signed __int64 v89; // r13\n  int v90; // edx\n  __int64 v91; // rdi\n  char *v92; // rax\n  __int64 v93; // r8\n  int v94; // er9\n  int v95; // er9\n  int v96; // esi\n  int v97; // esi\n  int v98; // ebp\n  int v99; // ebp\n  signed __int64 v100; // r12\n  __int64 v101; // rbp\n  __int64 v102; // r15\n  int v103; // ebx\n  __int64 v104; // r11\n  __int64 v105; // rax\n  signed __int64 v106; // r8\n  __int64 v107; // rdi\n  __int64 v108; // rsi\n  __int64 v109; // r9\n  __int64 v110; // r10\n  __int64 v111; // r14\n  __int64 v112; // r13\n  __int64 v113; // rdx\n  __int64 v114; // rax\n  __int64 v115; // rdi\n  __int64 v116; // r15\n  __int64 v117; // rax\n  __int64 v118; // rbx\n  __int64 v119; // rdi\n  signed __int64 v120; // r15\n  __int64 v121; // rdi\n  __int64 v122; // rdx\n  __int64 v123; // r10\n  __int64 v124; // rbx\n  __int64 v125; // rax\n  __m128i v126; // xmm1\n  __m128i v127; // xmm2\n  __m128i v128; // xmm4\n  __m128i v129; // xmm0\n  __int64 v130; // rdi\n  __int64 v131; // r8\n  __int64 v132; // r9\n  __int64 v133; // r10\n  _DWORD *v134; // rdx\n  __int64 v135; // rsi\n  __int64 v136; // rsi\n  __int64 v137; // rsi\n  signed __int64 v138; // rbp\n  unsigned int v139; // er15\n  _DWORD *v140; // rax\n  int v141; // er14\n  int v142; // er12\n  unsigned int v143; // er13\n  __int64 v144; // r10\n  __int64 v145; // rax\n  signed __int64 v146; // rcx\n  signed __int64 v147; // rdx\n  __int64 v148; // r9\n  __int64 v149; // r8\n  signed __int64 v150; // rsi\n  __int64 v151; // rdi\n  int v152; // ebx\n  __int64 i; // [rsp+0h] [rbp-1B8h]\n  unsigned int v155; // [rsp+8h] [rbp-1B0h]\n  int v156; // [rsp+Ch] [rbp-1ACh]\n  __int64 v157; // [rsp+10h] [rbp-1A8h]\n  int v158; // [rsp+18h] [rbp-1A0h]\n  int v159; // [rsp+1Ch] [rbp-19Ch]\n  int v160; // [rsp+20h] [rbp-198h]\n  int v161; // [rsp+24h] [rbp-194h]\n  int v162; // [rsp+28h] [rbp-190h]\n  unsigned int v163; // [rsp+2Ch] [rbp-18Ch]\n  __int64 v164; // [rsp+30h] [rbp-188h]\n  __int64 v165; // [rsp+38h] [rbp-180h]\n  __int64 v166; // [rsp+40h] [rbp-178h]\n  __int64 v167; // [rsp+48h] [rbp-170h]\n  __int64 v168; // [rsp+50h] [rbp-168h]\n  __int64 v169; // [rsp+58h] [rbp-160h]\n  __int64 v170; // [rsp+60h] [rbp-158h]\n  __int64 v171; // [rsp+68h] [rbp-150h]\n  __int64 v172; // [rsp+70h] [rbp-148h]\n  __int64 v173; // [rsp+78h] [rbp-140h]\n  char *v174; // [rsp+80h] [rbp-138h]\n  __int64 v175; // [rsp+88h] [rbp-130h]\n  int v176; // [rsp+94h] [rbp-124h]\n  _DWORD *v177; // [rsp+98h] [rbp-120h]\n  _QWORD *v178; // [rsp+A0h] [rbp-118h]\n  __int64 v179; // [rsp+A8h] [rbp-110h]\n  __int64 v180; // [rsp+B0h] [rbp-108h]\n  __int64 v181; // [rsp+B8h] [rbp-100h]\n  char *v182; // [rsp+C0h] [rbp-F8h]\n  unsigned int v183; // [rsp+C8h] [rbp-F0h]\n  int v184; // [rsp+CCh] [rbp-ECh]\n  __int64 v185; // [rsp+D0h] [rbp-E8h]\n  __int64 v186; // [rsp+D8h] [rbp-E0h]\n  __int64 v187; // [rsp+E0h] [rbp-D8h]\n  __int64 v188; // [rsp+E8h] [rbp-D0h]\n  __int64 v189; // [rsp+F0h] [rbp-C8h]\n  __int64 v190; // [rsp+F8h] [rbp-C0h]\n  __int64 v191; // [rsp+100h] [rbp-B8h]\n  __int64 v192; // [rsp+108h] [rbp-B0h]\n  __int64 v193; // [rsp+110h] [rbp-A8h]\n  __int64 v194; // [rsp+118h] [rbp-A0h]\n  __int64 v195; // [rsp+120h] [rbp-98h]\n  __int64 v196; // [rsp+128h] [rbp-90h]\n  __int64 v197; // [rsp+130h] [rbp-88h]\n  __int64 v198; // [rsp+138h] [rbp-80h]\n  __int64 v199; // [rsp+140h] [rbp-78h]\n  __int64 v200; // [rsp+148h] [rbp-70h]\n  __int64 v201; // [rsp+150h] [rbp-68h]\n  __int64 v202; // [rsp+158h] [rbp-60h]\n  __int64 v203; // [rsp+160h] [rbp-58h]\n  __int64 v204; // [rsp+168h] [rbp-50h]\n  __int64 v205; // [rsp+170h] [rbp-48h]\n  __int64 v206; // [rsp+178h] [rbp-40h]\n  __int64 v207; // [rsp+180h] [rbp-38h]\n\n  v9 = a4;\n  v178 = a2;\n  v177 = a1;\n  v155 = 0;\n  v10 = 4 * ((_DWORD)a3 + ((unsigned int)a3 >> 31)) & 0xFFFFFFF8;\n  v185 = (unsigned int)((signed int)a3 % 2);\n  v11 = 8 * v185;\n  v180 = a3;\n  v158 = 1 << a3;\n  v164 = 0LL;\n  v176 = a6;\n  v163 = a5;\n  v12 = (signed int *)off_49F6D0;\n  v13 = 0LL;\n  v168 = 0LL;\n  if ( !(a5 | a6) )\n  {\n    LOBYTE(v13) = *((_DWORD *)off_49F6D0 + 6) != 1;\n    v168 = v13;\n  }\n  v14 = a8;\n  v15 = a7;\n  v160 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 572);\n  v16 = v9;\n  v183 = 8 * v185;\n  v17 = v11;\n  v161 = v11 | 4;\n  v181 = v10;\n  v18 = (signed int)v10;\n  v162 = v10 + 8;\n  v188 = (signed int)v10 + 8;\n  v189 = 4LL * (signed int)v10;\n  v187 = (signed __int64)v11 << 6;\n  v19 = ((signed __int64)v11 << 6) + 4LL * (signed int)v10;\n  v20 = 0LL;\n  v21 = 0LL;\n  v186 = v18;\n  v159 = v9;\n  v167 = v11;\n  while ( 2 )\n  {\n    v184 = v12[43] + v18;\n    v197 = v184;\n    v196 = v18 | 1;\n    v195 = v18 | 2;\n    v194 = v18 | 3;\n    v207 = v184 + 1;\n    v206 = v21 | 1;\n    v205 = v184 + 2;\n    v204 = v21 | 2;\n    v203 = v184 + 3;\n    v190 = v21;\n    v202 = v21 | 3;\n    v200 = v20;\n    v199 = v20;\n    v201 = v19;\n    v165 = v19;\n    v198 = 0LL;\n    v169 = 0LL;\n    for ( i = v18; ; v18 = i )\n    {\n      v22 = (signed int)v17;\n      v173 = (signed int)v17 + (signed __int64)v12[42];\n      v23 = (signed int)v17 >> 2;\n      v55 = v12[18181] == 0;\n      v157 = v17;\n      if ( !v55 )\n      {\n        v175 = (unsigned int)v14;\n        v166 = (unsigned int)v15;\n        v24 = v176;\n        sub_42E1B0(0, v17, (unsigned int)v18, v16, v163, v176, v15, v14);\n        v174 = (char *)(32 * v17);\n        v25 = (char *)off_49F6D0 + 32 * v17 + 12600;\n        v170 = v17 << 6;\n        v156 = (signed int)v17 >> 2;\n        v172 = 32 * (v17 | 1);\n        v26 = (char *)off_49F6D0 + v172 + 12600;\n        v27 = (v17 | 1) << 6;\n        v28 = 32 * (v157 | 2);\n        v171 = v28;\n        v29 = (char *)off_49F6D0 + v28 + 12600;\n        v30 = (v157 | 2) << 6;\n        v31 = 32 * (v157 | 3);\n        v32 = (char *)off_49F6D0 + v31 + 12600;\n        v33 = (v157 | 3) << 6;\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC370[i] + v170),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v25[2 * i]), (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC370[i] + v27),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v26[2 * i]), (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC370[i] + v30),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v29[2 * i]), (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC370[i] + v33),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v32[2 * i]), (__m128i)0LL));\n        sub_42E1B0(1u, v157, i, v159, v163, v24, v166, v175);\n        v34 = (char *)off_49F6D0 + v172 + 12600;\n        v35 = (char *)off_49F6D0 + v171 + 12600;\n        v36 = (char *)off_49F6D0 + v31 + 12600;\n        v16 = v159;\n        v15 = a7;\n        v14 = a8;\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC770[i] + v170),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v174[2 * i + 12600 + (_QWORD)off_49F6D0]), (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC770[i] + v27),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v34[2 * i]), (__m128i)0LL));\n        v23 = v156;\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EC770[i] + v30),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v35[2 * i]), (__m128i)0LL));\n        v17 = v157;\n        xmm0_0 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v36[2 * i]), (__m128i)0LL);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4EC770[i] + v33), xmm0_0);\n        v18 = i;\n      }\n      v37 = v18 + v23;\n      sub_42BD80(v17, v18, v16, v163, v176, v15, v14);\n      v38 = (char *)off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v39 = (char *)off_49F6D0 + 32 * (v17 | 1) + 12600;\n        v40 = (char *)off_49F6D0 + 32 * (v17 | 2) + 12600;\n        v41 = (char *)off_49F6D0 + 32 * (v17 | 3) + 12600;\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EBF70[4 * v17] + 4 * v18),\n          _mm_unpacklo_epi16(\n            _mm_loadl_epi64((const __m128i *)((char *)off_49F6D0 + 32 * v17 + 2 * v18 + 12600)),\n            (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EBF70[4 * (v17 | 1)] + 4 * v18),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v39[2 * v18]), (__m128i)0LL));\n        _mm_store_si128(\n          (__m128i *)((char *)&xmmword_4EBF70[4 * (v17 | 2)] + 4 * v18),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v40[2 * v18]), (__m128i)0LL));\n        xmm0_0 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v41[2 * v18]), (__m128i)0LL);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4EBF70[4 * (v17 | 3)] + 4 * v18), xmm0_0);\n        if ( *((_DWORD *)v38 + 18181) )\n        {\n          v191 = (v17 | 3) << 6;\n          v192 = (v17 | 2) << 6;\n          v193 = (v17 | 1) << 6;\n          v179 = v17 << 6;\n          v156 = v37;\n          v42 = v189 + (v22 << 6);\n          v166 = *(_QWORD *)qword_4F9E88;\n          v175 = *(_QWORD *)(qword_4F9E88 + 8);\n          v174 = (char *)qword_4F9EB0;\n          v172 = (signed int)v173 + 1;\n          v171 = (signed int)v173 + 2;\n          v173 = (signed int)v173;\n          v170 = (signed int)v173 + 3;\n          v182 = &v38[v199];\n          v43 = v184;\n          v44 = 0LL;\n          v45 = v165;\n          do\n          {\n            v46 = *(_QWORD *)(v166 + 8LL * v43);\n            v47 = *(unsigned __int16 *)(v46 + 2 * v173) - *(_DWORD *)((char *)xmmword_4EC370 + v45 + v44);\n            v48 = *(_QWORD *)&v174[8 * v43];\n            v49 = *(unsigned __int16 *)(v48 + 2 * v173) - *(__int32 *)((char *)xmmword_4EBF70[0].m128i_i32 + v45 + v44);\n            v50 = *(_QWORD *)(v175 + 8LL * v43);\n            v51 = *(unsigned __int16 *)(v50 + 2 * v173) - *(_DWORD *)((char *)xmmword_4EC770 + v45 + v44) - v47;\n            *(_DWORD *)((char *)xmmword_4F46D0 + v45 + v44) = v51;\n            v52 = v47 + (v51 >> 1);\n            v53 = v49 - v52;\n            *(_DWORD *)((char *)xmmword_4F36D0 + v45 + v44) = v53;\n            v54 = v52 + (v53 >> 1);\n            v55 = v160 == 0;\n            *(_DWORD *)((char *)xmmword_4F42D0 + v45 + v44) = v54;\n            v56 = v38;\n            v57 = (signed __int64)&v38[v44 + 13112];\n            v58 = (__int64)v182;\n            v59 = &v182[v44 + 13112];\n            if ( v55 )\n              v59 = (char *)v57;\n            *(_DWORD *)v59 = v54;\n            v60 = *(unsigned __int16 *)(v48 + 2 * v172);\n            v61 = (int *)(v58 + v44 + 13176);\n            if ( v55 )\n              v61 = (int *)&v56[v44 + 13176];\n            v62 = (int *)(v58 + v44 + 13240);\n            if ( v55 )\n              v62 = (int *)&v56[v44 + 13240];\n            v63 = (int *)(v58 + v44 + 13304);\n            if ( v55 )\n              v63 = (int *)&v56[v44 + 13304];\n            v64 = *(unsigned __int16 *)(v46 + 2 * v172) - *(int *)((char *)&dword_4EC3B0 + v42 + v44);\n            v65 = *(unsigned __int16 *)(v50 + 2 * v172) - *(int *)((char *)&dword_4EC7B0 + v42 + v44) - v64;\n            *(_DWORD *)((char *)xmmword_4F4710 + v42 + v44) = v65;\n            v66 = v64 + (v65 >> 1);\n            v67 = v60 - *(int *)((char *)&dword_4EBFB0 + v42 + v44) - v66;\n            *(_DWORD *)((char *)xmmword_4F3710 + v42 + v44) = v67;\n            v68 = v66 + (v67 >> 1);\n            *(_DWORD *)((char *)&xmmword_4F4310 + v42 + v44) = v68;\n            *v61 = v68;\n            v69 = *(unsigned __int16 *)(v48 + 2 * v171);\n            v70 = *(unsigned __int16 *)(v46 + 2 * v171) - *(int *)((char *)&dword_4EC3F0 + v42 + v44);\n            v71 = *(unsigned __int16 *)(v50 + 2 * v171) - *(int *)((char *)&dword_4EC7F0 + v42 + v44) - v70;\n            *(_DWORD *)((char *)xmmword_4F4750 + v42 + v44) = v71;\n            v72 = v70 + (v71 >> 1);\n            v73 = v69 - *(int *)((char *)&dword_4EBFF0 + v42 + v44) - v72;\n            *(_DWORD *)((char *)xmmword_4F3750 + v42 + v44) = v73;\n            v74 = v72 + (v73 >> 1);\n            *(_DWORD *)((char *)&xmmword_4F4350 + v42 + v44) = v74;\n            *v62 = v74;\n            v75 = *(unsigned __int16 *)(v48 + 2 * v170);\n            v76 = *(unsigned __int16 *)(v46 + 2 * v170) - *(int *)((char *)&dword_4EC430 + v42 + v44);\n            v77 = *(unsigned __int16 *)(v50 + 2 * v170) - *(int *)((char *)&dword_4EC830 + v42 + v44) - v76;\n            *(_DWORD *)((char *)xmmword_4F4790 + v42 + v44) = v77;\n            v78 = v76 + (v77 >> 1);\n            v79 = v75 - *(int *)((char *)&dword_4EC030 + v42 + v44) - v78;\n            *(_DWORD *)((char *)xmmword_4F3790 + v42 + v44) = v79;\n            v80 = v78 + (v79 >> 1);\n            *(_DWORD *)((char *)&xmmword_4F4390 + v42 + v44) = v80;\n            *v63 = v80;\n            v38 = v56;\n            v44 += 4LL;\n            ++v43;\n          }\n          while ( v44 != 16 );\n          if ( v160 )\n            goto LABEL_27;\n          v81 = v165;\n          v82 = v169;\n          if ( (unsigned __int8)v168 | (*((_DWORD *)v56 + 18098) == 1) )\n            goto LABEL_37;\n          if ( *((_DWORD *)v56 + 6) == 3 )\n          {\n            v83 = i;\n            v84 = sub_407EC0(v157, i, (__int64)&v155);\n          }\n          else\n          {\n            v83 = i;\n            v84 = sub_4045F0(v157, i, &v155, 0);\n          }\n          v130 = v179;\n          v131 = v193;\n          v132 = v192;\n          v133 = v191;\n          v134 = off_49F6D0;\n          *(_DWORD *)((char *)&xmmword_4F26D0[v83] + v179) = *((_DWORD *)off_49F6D0 + 3278);\n          *(_DWORD *)((char *)&xmmword_4F26D0[v83] + v131) = v134[3294];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v83] + v132) = v134[3310];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v83] + v133) = v134[3326];\n          v135 = v196;\n          *(_DWORD *)((char *)&xmmword_4F26D0[v196] + v130) = v134[3279];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v135] + v131) = v134[3295];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v135] + v132) = v134[3311];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v135] + v133) = v134[3327];\n          v136 = v195;\n          *(_DWORD *)((char *)&xmmword_4F26D0[v195] + v130) = v134[3280];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v136] + v131) = v134[3296];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v136] + v132) = v134[3312];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v136] + v133) = v134[3328];\n          v137 = v194;\n          *(_DWORD *)((char *)&xmmword_4F26D0[v194] + v130) = v134[3281];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v137] + v131) = v134[3297];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v137] + v132) = v134[3313];\n          *(_DWORD *)((char *)&xmmword_4F26D0[v137] + v133) = v134[3329];\n          if ( (_DWORD)v84 )\n          {\nLABEL_33:\n            v164 = v84;\n            *v178 |= 1 << v156;\n            *v177 |= v158;\n            goto LABEL_37;\n          }\n          goto LABEL_36;\n        }\n      }\n      if ( v160 )\n      {\n        v85 = (signed int)v173;\n        v86 = *(_QWORD *)(qword_4F9EB0 + 8 * v197);\n        v87 = qword_4F9EB0;\n        v88 = v173;\n        v89 = (signed __int64)&v38[32 * v17 + 12600];\n        v90 = *(unsigned __int16 *)(v86 + 2 * v173) - *(unsigned __int16 *)(v89 + 2 * v18);\n        v91 = v198 << 6;\n        v92 = v38;\n        v175 = (__int64)&v38[64 * v198 + 13112];\n        v93 = v190;\n        *(_DWORD *)(v175 + 4 * v190) = v90;\n        v94 = *(unsigned __int16 *)(v86 + 2 * v85 + 2);\n        v174 = &v92[(32LL * (signed int)v17 | 0x20) + 12600];\n        v95 = v94 - *(unsigned __int16 *)&v174[2 * v18];\n        v172 = (__int64)&v92[(v91 | 0x40) + 13112];\n        *(_DWORD *)(v172 + 4 * v93) = v95;\n        v96 = *(unsigned __int16 *)(v86 + 2 * v85 + 4);\n        v171 = (__int64)&v92[(32LL * (signed int)v17 | 0x40) + 12600];\n        v97 = v96 - *(unsigned __int16 *)(v171 + 2 * v18);\n        v170 = (__int64)&v92[(v91 | 0x80) + 13112];\n        *(_DWORD *)(v170 + 4 * v93) = v97;\n        v98 = *(unsigned __int16 *)(v86 + 2 * v85 + 6);\n        v166 = (__int64)&v92[(32LL * (signed int)v17 | 0x60) + 12600];\n        v99 = v98 - *(unsigned __int16 *)(v166 + 2 * v18);\n        v100 = (signed __int64)&v92[(v91 | 0xC0) + 13112];\n        *(_DWORD *)(v100 + 4 * v93) = v99;\n        v101 = *(_QWORD *)(v87 + 8 * v207);\n        v102 = v87;\n        v179 = v87;\n        v103 = *(unsigned __int16 *)(v101 + 2 * v88);\n        v104 = v88;\n        v105 = v196;\n        v106 = v89;\n        v182 = (char *)v89;\n        v107 = v206;\n        v108 = v175;\n        *(_DWORD *)(v175 + 4 * v206) = v103 - *(unsigned __int16 *)(v89 + 2 * v196);\n        v109 = (__int64)v174;\n        v110 = v172;\n        *(_DWORD *)(v172 + 4 * v107) = *(unsigned __int16 *)(v101 + 2 * v85 + 2) - *(unsigned __int16 *)&v174[2 * v105];\n        v111 = v171;\n        v112 = v170;\n        *(_DWORD *)(v170 + 4 * v107) = *(unsigned __int16 *)(v101 + 2 * v85 + 4)\n                                     - *(unsigned __int16 *)(v171 + 2 * v105);\n        *(_DWORD *)(v100 + 4 * v107) = *(unsigned __int16 *)(v101 + 2 * v85 + 6)\n                                     - *(unsigned __int16 *)(v166 + 2 * v105);\n        v113 = *(_QWORD *)(v102 + 8 * v205);\n        v114 = v195;\n        v115 = v204;\n        *(_DWORD *)(v108 + 4 * v204) = *(unsigned __int16 *)(v113 + 2 * v104) - *(unsigned __int16 *)(v106 + 2 * v195);\n        *(_DWORD *)(v110 + 4 * v115) = *(unsigned __int16 *)(v113 + 2 * v85 + 2)\n                                     - *(unsigned __int16 *)(v109 + 2 * v114);\n        *(_DWORD *)(v112 + 4 * v115) = *(unsigned __int16 *)(v113 + 2 * v85 + 4)\n                                     - *(unsigned __int16 *)(v111 + 2 * v114);\n        v116 = v166;\n        *(_DWORD *)(v100 + 4 * v115) = *(unsigned __int16 *)(v113 + 2 * v85 + 6)\n                                     - *(unsigned __int16 *)(v166 + 2 * v114);\n        v117 = *(_QWORD *)(v179 + 8 * v203);\n        v118 = v194;\n        v119 = v202;\n        *(_DWORD *)(v108 + 4 * v202) = *(unsigned __int16 *)(v117 + 2 * v104) - *(unsigned __int16 *)&v182[2 * v194];\n        *(_DWORD *)(v110 + 4 * v119) = *(unsigned __int16 *)(v117 + 2 * v85 + 2)\n                                     - *(unsigned __int16 *)(v109 + 2 * v118);\n        *(_DWORD *)(v112 + 4 * v119) = *(unsigned __int16 *)(v117 + 2 * v85 + 4)\n                                     - *(unsigned __int16 *)(v111 + 2 * v118);\n        *(_DWORD *)(v100 + 4 * v119) = *(unsigned __int16 *)(v117 + 2 * v85 + 6)\n                                     - *(unsigned __int16 *)(v116 + 2 * v118);\nLABEL_27:\n        v81 = v165;\n        v82 = v169;\n        goto LABEL_37;\n      }\n      v156 = v37;\n      v120 = 32 * v17;\n      v121 = *(_QWORD *)(qword_4F9EB0 + 8 * v197);\n      v122 = *(_QWORD *)(qword_4F9EB0 + 8 * v197 + 8);\n      v123 = *(_QWORD *)(qword_4F9EB0 + 8 * v197 + 16);\n      v124 = v173;\n      v125 = *(_QWORD *)(qword_4F9EB0 + 8 * v197 + 24);\n      v126 = _mm_insert_epi16(\n               _mm_insert_epi16(\n                 _mm_cvtsi32_si128(*(unsigned __int16 *)(v121 + 2 * v173 + 2)),\n                 *(unsigned __int16 *)(v122 + 2 * v173 + 2),\n                 1),\n               *(unsigned __int16 *)(v123 + 2 * v173 + 2),\n               2);\n      v127 = _mm_insert_epi16(\n               _mm_insert_epi16(\n                 _mm_cvtsi32_si128(*(unsigned __int16 *)(v121 + 2 * v173 + 4)),\n                 *(unsigned __int16 *)(v122 + 2 * v173 + 4),\n                 1),\n               *(unsigned __int16 *)(v123 + 2 * v173 + 4),\n               2);\n      v128 = _mm_insert_epi16(\n               _mm_cvtsi32_si128(*(unsigned __int16 *)(v121 + 2 * v173 + 6)),\n               *(unsigned __int16 *)(v122 + 2 * v173 + 6),\n               1);\n      v129 = _mm_sub_epi32(\n               _mm_unpacklo_epi16(\n                 _mm_insert_epi16(\n                   _mm_insert_epi16(\n                     _mm_insert_epi16(\n                       _mm_cvtsi32_si128(*(unsigned __int16 *)(v121 + 2 * v173)),\n                       *(unsigned __int16 *)(v122 + 2 * v173),\n                       1),\n                     *(unsigned __int16 *)(v123 + 2 * v173),\n                     2),\n                   *(unsigned __int16 *)(v125 + 2 * v173),\n                   3),\n                 (__m128i)0LL),\n               _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v38[2 * v18 + 12600 + v120]), (__m128i)0LL));\n      LODWORD(v122) = *(unsigned __int16 *)(v123 + 2 * v173 + 6);\n      _mm_storeu_si128((__m128i *)(v38 + 13112), v129);\n      _mm_storeu_si128(\n        (__m128i *)(v38 + 13176),\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_insert_epi16(v126, *(unsigned __int16 *)(v125 + 2 * v124 + 2), 3), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v38[2 * v18 + 12600 + (v120 | 0x20)]), (__m128i)0LL)));\n      _mm_storeu_si128(\n        (__m128i *)(v38 + 13240),\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_insert_epi16(v127, *(unsigned __int16 *)(v125 + 2 * v124 + 4), 3), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v38[2 * v18 + 12600 + (v120 | 0x40)]), (__m128i)0LL)));\n      xmm0_0 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v38[2 * v18 + 12600 + (v120 | 0x60)]), (__m128i)0LL);\n      _mm_storeu_si128(\n        (__m128i *)(v38 + 13304),\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(\n            _mm_insert_epi16(_mm_insert_epi16(v128, v122, 2), *(unsigned __int16 *)(v125 + 2 * v124 + 6), 3),\n            (__m128i)0LL),\n          xmm0_0));\n      v81 = v165;\n      v82 = v169;\n      if ( !((unsigned __int8)v168 | (*((_DWORD *)v38 + 18098) == 1)) )\n      {\n        if ( *((_DWORD *)v38 + 6) == 3 )\n          v84 = sub_407EC0(v157, i, (__int64)&v155);\n        else\n          v84 = sub_4045F0(v157, i, &v155, 0);\n        if ( (_DWORD)v84 )\n          goto LABEL_33;\nLABEL_36:\n        v164 = 0LL;\n      }\nLABEL_37:\n      v138 = v82 + 1;\n      if ( v138 == 2 )\n        break;\n      v169 = v138;\n      v17 = v157 + 4;\n      v198 += 4LL;\n      v12 = (signed int *)off_49F6D0;\n      v165 = v81 + 256;\n      v199 += 256LL;\n      v14 = a8;\n      v15 = a7;\n      v16 = v159;\n    }\n    v18 = i + 4;\n    v139 = v183;\n    if ( i + 4 < v188 )\n    {\n      v21 = v190 + 4;\n      v12 = (signed int *)off_49F6D0;\n      v19 = v201 + 16;\n      v20 = v200 + 16;\n      v189 += 16LL;\n      v17 = v167;\n      v14 = a8;\n      v15 = a7;\n      v16 = v159;\n      continue;\n    }\n    break;\n  }\n  v140 = off_49F6D0;\n  if ( v160 && !((unsigned __int8)v168 | (*((_DWORD *)off_49F6D0 + 18098) == 1)) )\n  {\n    v141 = v181;\n    v142 = v162;\n    v143 = v161;\n    v144 = v167;\n    if ( *((_DWORD *)off_49F6D0 + 6) != 3 )\n    {\n      v145 = sub_47EAF0(v180, &v155, 0, xmm0_0);\n      v144 = v167;\n      v164 = v145;\n      v140 = off_49F6D0;\n    }\n    if ( v140[18181] )\n    {\n      v146 = ((v144 | 7) << 6) + 4 * v186 + 5187280;\n      v147 = -8LL;\n      do\n      {\n        *(_DWORD *)(v146 + 4 * v147 - 416) = v140[v147 + 3286];\n        *(_DWORD *)(v146 + 4 * v147 - 352) = v140[v147 + 3302];\n        *(_DWORD *)(v146 + 4 * v147 - 288) = v140[v147 + 3318];\n        *(_DWORD *)(v146 + 4 * v147 - 224) = v140[v147 + 3334];\n        *(_DWORD *)(v146 + 4 * v147 - 160) = v140[v147 + 3350];\n        *(_DWORD *)(v146 + 4 * v147 - 96) = v140[v147 + 3366];\n        *(_DWORD *)(v146 + 4 * v147 - 32) = v140[v147 + 3382];\n        *(_DWORD *)(v146 + 4 * v147 + 32) = v140[v147 + 3398];\n        ++v147;\n      }\n      while ( v147 );\n    }\n    if ( (_DWORD)v164 )\n    {\n      *v178 |= 51 << (4 * v180 - 2 * v185);\n      *v177 |= v158;\n    }\n  }\n  else\n  {\n    v141 = v181;\n    v142 = v162;\n    v143 = v161;\n    v144 = v167;\n  }\n  if ( (signed int)v155 <= 4\n    && !((v140[18098] == 1) | (unsigned __int8)v168)\n    && (v140[18167] + v140[10] || !v140[18176]) )\n  {\n    v155 = 0;\n    *v177 &= 63 - v158;\n    *v178 &= ~(51 << (4 * v180 - 2 * v185));\n    v148 = qword_4F9E30;\n    v149 = (signed int)v144 + 8;\n    v150 = (signed __int64)&v140[8 * v144 + 3150];\n    do\n    {\n      v151 = v186;\n      do\n      {\n        if ( v140[18181] )\n          *(_DWORD *)((char *)&xmmword_4F26D0[v151] + v187) = 0;\n        else\n          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 6424) + 8LL * ((signed int)v151 + v140[39]))\n                   + 2 * ((signed int)v140[38] + (signed __int64)(signed int)v144)) = *(_WORD *)(v150 + 2 * v151);\n        ++v151;\n      }\n      while ( v151 < v188 );\n      ++v144;\n      v150 += 32LL;\n      v187 += 64LL;\n    }\n    while ( v144 < v149 );\n    if ( v140[6] == 3 )\n    {\n      v152 = v141;\n      do\n      {\n        sub_40A190(v139, (unsigned int)v152);\n        v152 += 4;\n      }\n      while ( v152 < v142 );\n      do\n      {\n        sub_40A190(v143, (unsigned int)v141);\n        v141 += 4;\n      }\n      while ( v141 < v142 );\n    }\n  }\n  return v155;\n}\n", 
            "funcStartAddr": "0x42cf70L", 
            "funcEndAddr": "0x42e1aaL", 
            "funcName": "sub_42CF70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_42E1B0(unsigned int a1, unsigned int a2, __int64 a3, int a4, __int64 a5, int a6, __int16 a7, __int16 a8)\n{\n  int v8; // er13\n  int v9; // er10\n  int v10; // ebp\n  int v11; // er14\n  int v12; // er11\n  __int16 v13; // r15\n  __int16 v14; // r12\n  int v15; // eax\n  bool v16; // r8\n  int v17; // esi\n  __int64 *v18; // rcx\n  int v19; // er15\n  int v20; // ebx\n  int v21; // ebp\n  int v22; // eax\n  __int64 v23; // r9\n  __int64 v24; // rbx\n  __int64 v25; // rbp\n  int v26; // er11\n  int v27; // er12\n  char v28; // cl\n  int v29; // er13\n  int v30; // ebp\n  signed __int64 v31; // r8\n  __int64 v32; // rbx\n  __int64 v33; // r10\n  signed __int64 v34; // r15\n  char *v35; // r14\n  __int16 *v36; // r9\n  __int16 *v37; // rsi\n  int v38; // edi\n  signed __int64 result; // rax\n  __int16 v40; // dx\n  int v41; // edi\n  __int16 v42; // ax\n  __int16 v43; // dx\n  int v44; // er15\n  int v45; // edi\n  __int16 v46; // ax\n  __int64 v47; // r11\n  __int16 v48; // dx\n  signed __int64 v49; // r10\n  int v50; // edi\n  __int16 v51; // r8\n  _WORD *v52; // rsi\n  signed __int64 v53; // r10\n  signed __int64 v54; // r11\n  char *v55; // rsi\n  __int16 *v56; // rbp\n  __int16 *v57; // rbx\n  int v58; // ecx\n  int v59; // edx\n  int v60; // ebp\n  __int64 v61; // rsi\n  int v62; // er11\n  int v63; // er15\n  char v64; // cl\n  int v65; // er12\n  int v66; // edi\n  signed __int64 v67; // r8\n  __int64 v68; // rbx\n  signed __int64 v69; // r10\n  char *v70; // r14\n  int v71; // edx\n  __int16 v72; // si\n  __int16 v73; // bp\n  int v74; // edx\n  __int16 v75; // si\n  __int16 v76; // bp\n  int v77; // edx\n  __int16 v78; // si\n  __int16 v79; // bp\n  int v80; // edx\n  __int16 v81; // si\n  __int16 v82; // bp\n  signed __int64 v83; // rbx\n  char *v84; // r8\n  signed __int64 v85; // rbp\n  signed __int64 v86; // rcx\n  __int16 *v87; // r9\n  __int64 v88; // rdx\n  __int64 v89; // rsi\n  int v90; // er11\n  int v91; // er15\n  char v92; // cl\n  int v93; // er12\n  int v94; // edi\n  signed __int64 v95; // r8\n  __int64 v96; // rbx\n  signed __int64 v97; // r10\n  char *v98; // r14\n  int v99; // edx\n  __int16 v100; // si\n  __int16 v101; // bp\n  int v102; // edx\n  __int16 v103; // si\n  __int16 v104; // bp\n  int v105; // edx\n  __int16 v106; // si\n  __int16 v107; // bp\n  int v108; // edx\n  __int16 v109; // si\n  __int16 v110; // bp\n  signed __int64 v111; // rcx\n  signed __int64 v112; // rdi\n  signed __int64 v113; // rdx\n  signed __int64 v114; // rsi\n  bool v115; // [rsp+Fh] [rbp-49h]\n  __int64 v116; // [rsp+10h] [rbp-48h]\n  int v117; // [rsp+10h] [rbp-48h]\n  bool v118; // [rsp+18h] [rbp-40h]\n  bool v119; // [rsp+20h] [rbp-38h]\n  signed __int64 v120; // [rsp+20h] [rbp-38h]\n\n  v8 = a6;\n  v9 = a5;\n  v10 = a4;\n  v11 = a2;\n  v12 = a1;\n  v13 = a8;\n  v14 = a7;\n  if ( !*(_DWORD *)(qword_4F9DB8 + 192) || (v15 = *((_DWORD *)off_49F6D0 + 6), v16 = 1, v15) && v15 != 3 )\n  {\n    if ( !*(_DWORD *)(qword_4F9DB8 + 196) )\n    {\n      v16 = 0;\n      if ( a7 )\n        goto LABEL_16;\n      goto LABEL_7;\n    }\n    v16 = *((_DWORD *)off_49F6D0 + 6) == 1;\n  }\n  if ( a7 )\n    goto LABEL_16;\nLABEL_7:\n  v17 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 580);\n  if ( v17 && a6 == 1 && v9 == 1 && a4 == 2 && !a8 )\n  {\n    v119 = v16;\n    v18 = (__int64 *)((char *)off_49F6D0 + 71944);\n    if ( v17 == 1 )\n      v18 = (__int64 *)((char *)off_49F6D0 + 71936);\n    v116 = *v18;\n    v115 = 1;\n    v118 = 0;\nLABEL_18:\n    v19 = a3;\n    sub_42F350((__int64)&word_49FD80, v11, a3, v116, 0, a7, v9, a1);\n    LODWORD(a3) = v19;\n    v13 = a8;\n    v14 = a7;\n    v12 = a1;\n    goto LABEL_19;\n  }\nLABEL_16:\n  if ( a4 == -1 )\n    return sub_42F650(a1, v11, a3);\n  v116 = *((_QWORD *)off_49F6D0 + 8991);\n  v119 = v16;\n  v118 = a4 == 0;\n  v115 = a4 == 2;\n  if ( (a4 | 2) == 2 )\n    goto LABEL_18;\nLABEL_19:\n  if ( (unsigned int)(v10 - 1) <= 1 )\n  {\n    v20 = v12;\n    v21 = a3;\n    sub_42F350((__int64)&word_49FDC0, v11, a3, v116, 1, v13, v8, v12);\n    LODWORD(a3) = v21;\n    v12 = v20;\n  }\n  v22 = v11 + 4;\n  LODWORD(v23) = a3 + 4;\n  if ( v119 )\n  {\n    if ( v115 )\n    {\n      v24 = v14;\n      v25 = v12;\n      v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F78 + 8LL * v14) + 8LL * v13) + 4LL * v12 + 4);\n      v117 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F78 + 1) + 8LL * v14) + 8LL * v13) + 4 * v25 + 4);\n      v27 = 2 * dword_4FA158;\n      v28 = dword_4FA0C0 + 1;\n      v29 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F80 + 8 * v24) + 4 * v25 + 4)\n           + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F80 + 1) + 8LL * v13) + 4 * v25 + 4)\n           + 1) >> 1;\n      v30 = *((_DWORD *)off_49F6D0 + 18172);\n      v31 = v22;\n      v32 = (signed int)a3;\n      v33 = (signed int)v23;\n      v34 = v11 + 1LL;\n      v35 = (char *)off_49F6D0 + 32 * v11 + 12696;\n      v36 = &word_49FD80;\n      v37 = &word_49FDC0;\n      v120 = v34;\n      do\n      {\n        v38 = v29 + ((v27 + v26 * *(_DWORD *)v36 + v117 * *(_DWORD *)v37) >> v28);\n        result = (unsigned int)v38;\n        if ( v38 <= 0 )\n          result = 0LL;\n        v40 = v30;\n        if ( v30 >= v38 )\n          v40 = result;\n        *(_WORD *)&v35[2 * v32 - 96] = v40;\n        if ( v34 >= v31 )\n        {\n          v36 += 2;\n          v37 += 2;\n        }\n        else\n        {\n          v41 = v29 + ((v27 + v26 * *((_DWORD *)v36 + 1) + v117 * *((_DWORD *)v37 + 1)) >> v28);\n          v42 = v29 + ((v27 + v26 * *((_DWORD *)v36 + 1) + v117 * *((_DWORD *)v37 + 1)) >> v28);\n          if ( v41 <= 0 )\n            v42 = 0;\n          v43 = v30;\n          if ( v30 >= v41 )\n            v43 = v42;\n          *(_WORD *)&v35[2 * v32 - 64] = v43;\n          v44 = v26;\n          v45 = v29 + ((v27 + v26 * *((_DWORD *)v36 + 2) + v117 * *((_DWORD *)v37 + 2)) >> v28);\n          v46 = v29 + ((v27 + v26 * *((_DWORD *)v36 + 2) + v117 * *((_DWORD *)v37 + 2)) >> v28);\n          if ( v45 <= 0 )\n            v46 = 0;\n          v47 = v33;\n          v48 = v30;\n          if ( v30 >= v45 )\n            v48 = v46;\n          v49 = v31;\n          *(_WORD *)&v35[2 * v32 - 32] = v48;\n          v50 = v29 + ((v27 + v44 * *((_DWORD *)v36 + 3) + v117 * *((_DWORD *)v37 + 3)) >> v28);\n          result = (unsigned int)v50;\n          if ( v50 <= 0 )\n            result = 0LL;\n          v51 = v30;\n          if ( v30 >= v50 )\n            v51 = result;\n          v36 += 8;\n          v37 += 8;\n          *(_WORD *)&v35[2 * v32] = v51;\n          v31 = v49;\n          v33 = v47;\n          v26 = v44;\n          v34 = v120;\n        }\n        ++v32;\n      }\n      while ( v32 < v33 );\n    }\n    else\n    {\n      v60 = a3;\n      if ( v118 )\n      {\n        v61 = v12;\n        v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F88 + 8LL * v14) + 4LL * v12 + 4);\n        v63 = dword_4FA158;\n        v64 = dword_4FA0C0;\n        v65 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9F80 + 8LL * v14) + 4 * v61 + 4);\n        v66 = *((_DWORD *)off_49F6D0 + 18172);\n        v67 = v22;\n        v68 = (signed int)a3;\n        v23 = (signed int)v23;\n        v69 = v11 + 1LL;\n        v70 = (char *)off_49F6D0 + 32 * v11 + 12696;\n        result = (signed __int64)&word_49FD80;\n        do\n        {\n          v71 = v65 + ((v63 + v62 * *(_DWORD *)result) >> v64);\n          v72 = v65 + ((v63 + v62 * *(_DWORD *)result) >> v64);\n          if ( v71 <= 0 )\n            v72 = 0;\n          v73 = v66;\n          if ( v66 >= v71 )\n            v73 = v72;\n          *(_WORD *)&v70[2 * v68 - 96] = v73;\n          if ( v69 >= v67 )\n          {\n            result += 4LL;\n          }\n          else\n          {\n            v74 = v65 + ((v63 + v62 * *(_DWORD *)(result + 4)) >> v64);\n            v75 = v65 + ((v63 + v62 * *(_DWORD *)(result + 4)) >> v64);\n            if ( v74 <= 0 )\n              v75 = 0;\n            v76 = v66;\n            if ( v66 >= v74 )\n              v76 = v75;\n            *(_WORD *)&v70[2 * v68 - 64] = v76;\n            v77 = v65 + ((v63 + v62 * *(_DWORD *)(result + 8)) >> v64);\n            v78 = v65 + ((v63 + v62 * *(_DWORD *)(result + 8)) >> v64);\n            if ( v77 <= 0 )\n              v78 = 0;\n            v79 = v66;\n            if ( v66 >= v77 )\n              v79 = v78;\n            *(_WORD *)&v70[2 * v68 - 32] = v79;\n            v80 = v65 + ((v63 + v62 * *(_DWORD *)(result + 12)) >> v64);\n            v81 = v65 + ((v63 + v62 * *(_DWORD *)(result + 12)) >> v64);\n            if ( v80 <= 0 )\n              v81 = 0;\n            v82 = v66;\n            if ( v66 >= v80 )\n              v82 = v81;\n            result += 16LL;\n            *(_WORD *)&v70[2 * v68] = v82;\n          }\n          ++v68;\n        }\n        while ( v68 < v23 );\n      }\n      else\n      {\n        v88 = v13;\n        v89 = v12;\n        v90 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F88 + 1) + 8LL * v13) + 4LL * v12 + 4);\n        v91 = dword_4FA158;\n        v92 = dword_4FA0C0;\n        v93 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F80 + 1) + 8 * v88) + 4 * v89 + 4);\n        v94 = *((_DWORD *)off_49F6D0 + 18172);\n        v95 = v22;\n        v96 = v60;\n        v23 = (signed int)v23;\n        v97 = v11 + 1LL;\n        v98 = (char *)off_49F6D0 + 32 * v11 + 12696;\n        result = (signed __int64)&word_49FDC0;\n        do\n        {\n          v99 = v93 + ((v91 + v90 * *(_DWORD *)result) >> v92);\n          v100 = v93 + ((v91 + v90 * *(_DWORD *)result) >> v92);\n          if ( v99 <= 0 )\n            v100 = 0;\n          v101 = v94;\n          if ( v94 >= v99 )\n            v101 = v100;\n          *(_WORD *)&v98[2 * v96 - 96] = v101;\n          if ( v97 >= v95 )\n          {\n            result += 4LL;\n          }\n          else\n          {\n            v102 = v93 + ((v91 + v90 * *(_DWORD *)(result + 4)) >> v92);\n            v103 = v93 + ((v91 + v90 * *(_DWORD *)(result + 4)) >> v92);\n            if ( v102 <= 0 )\n              v103 = 0;\n            v104 = v94;\n            if ( v94 >= v102 )\n              v104 = v103;\n            *(_WORD *)&v98[2 * v96 - 64] = v104;\n            v105 = v93 + ((v91 + v90 * *(_DWORD *)(result + 8)) >> v92);\n            v106 = v93 + ((v91 + v90 * *(_DWORD *)(result + 8)) >> v92);\n            if ( v105 <= 0 )\n              v106 = 0;\n            v107 = v94;\n            if ( v94 >= v105 )\n              v107 = v106;\n            *(_WORD *)&v98[2 * v96 - 32] = v107;\n            v108 = v93 + ((v91 + v90 * *(_DWORD *)(result + 12)) >> v92);\n            v109 = v93 + ((v91 + v90 * *(_DWORD *)(result + 12)) >> v92);\n            if ( v108 <= 0 )\n              v109 = 0;\n            v110 = v94;\n            if ( v94 >= v108 )\n              v110 = v109;\n            result += 16LL;\n            *(_WORD *)&v98[2 * v96] = v110;\n          }\n          ++v96;\n        }\n        while ( v96 < v23 );\n      }\n    }\n  }\n  else\n  {\n    v52 = off_49F6D0;\n    v53 = v22;\n    result = (signed int)a3;\n    v54 = (signed int)v23;\n    if ( v115 )\n    {\n      v55 = (char *)off_49F6D0 + 32 * v11 + 12696;\n      v56 = &word_49FD80;\n      v57 = &word_49FDC0;\n      do\n      {\n        *(_WORD *)&v55[2 * result - 96] = (((unsigned int)(*(_DWORD *)v56 + *(_DWORD *)v57 + 1) >> 31)\n                                         + *(_DWORD *)v56\n                                         + *(_DWORD *)v57\n                                         + 1) >> 1;\n        if ( v11 + 1LL >= v53 )\n        {\n          v56 += 2;\n          v57 += 2;\n        }\n        else\n        {\n          *(_WORD *)&v55[2 * result - 64] = (((unsigned int)(*((_DWORD *)v56 + 1) + *((_DWORD *)v57 + 1) + 1) >> 31)\n                                           + *((_DWORD *)v56 + 1)\n                                           + *((_DWORD *)v57 + 1)\n                                           + 1) >> 1;\n          *(_WORD *)&v55[2 * result - 32] = (((unsigned int)(*((_DWORD *)v56 + 2) + *((_DWORD *)v57 + 2) + 1) >> 31)\n                                           + *((_DWORD *)v56 + 2)\n                                           + *((_DWORD *)v57 + 2)\n                                           + 1) >> 1;\n          v58 = *((_DWORD *)v56 + 3);\n          v56 += 8;\n          v59 = *((_DWORD *)v57 + 3);\n          v57 += 8;\n          *(_WORD *)&v55[2 * result] = (((unsigned int)(v58 + v59 + 1) >> 31) + v58 + v59 + 1) >> 1;\n        }\n        ++result;\n      }\n      while ( result < (signed int)v23 );\n    }\n    else\n    {\n      if ( v118 )\n      {\n        v83 = 16LL * v11;\n        v84 = (char *)off_49F6D0 + 32 * v11;\n        *(_WORD *)&v84[2 * (signed int)a3 + 12600] = word_49FD80;\n        v85 = v11 + 1LL;\n        if ( v85 >= v53 )\n        {\n          v87 = &word_49FD84;\n        }\n        else\n        {\n          v52[16 * v85 + 6300 + (signed int)a3] = word_49FD84;\n          v86 = (signed __int64)&v52[v83 + 6300];\n          *(_WORD *)(v86 + 2LL * (signed int)a3 + 64) = word_49FD88;\n          *(_WORD *)(v86 + 2LL * (signed int)a3 + 96) = word_49FD8C;\n          v87 = (__int16 *)&unk_49FD90;\n        }\n      }\n      else\n      {\n        v83 = 16LL * v11;\n        v84 = (char *)off_49F6D0 + 32 * v11;\n        *(_WORD *)&v84[2 * (signed int)a3 + 12600] = word_49FDC0;\n        v85 = v11 + 1LL;\n        if ( v85 >= v53 )\n        {\n          v87 = &word_49FDC4;\n        }\n        else\n        {\n          v52[16 * v85 + 6300 + (signed int)a3] = word_49FDC4;\n          v111 = (signed __int64)&v52[v83 + 6300];\n          *(_WORD *)(v111 + 2LL * (signed int)a3 + 64) = word_49FDC8;\n          *(_WORD *)(v111 + 2LL * (signed int)a3 + 96) = word_49FDCC;\n          v87 = (__int16 *)&unk_49FDD0;\n        }\n      }\n      v112 = (signed int)a3 + 1LL;\n      if ( v112 < v54 )\n      {\n        *(_WORD *)&v84[2 * v112 + 12600] = *v87;\n        if ( v85 >= v53 )\n        {\n          *(_WORD *)&v84[2 * (signed int)a3 + 12604] = v87[2];\n          *(_WORD *)&v84[2 * (signed int)a3 + 12606] = v87[4];\n        }\n        else\n        {\n          v113 = (signed __int64)&v52[16 * v85 + 6300];\n          *(_WORD *)(v113 + 2 * v112) = v87[2];\n          v114 = (signed __int64)&v52[v83 + 6300];\n          *(_WORD *)(v114 + 2 * v112 + 64) = v87[4];\n          *(_WORD *)(v114 + 2 * v112 + 96) = v87[6];\n          *(_WORD *)(v114 + 2 * result + 4) = v87[8];\n          *(_WORD *)(v113 + 2 * result + 4) = v87[10];\n          *(_WORD *)(v114 + 2 * result + 68) = v87[12];\n          *(_WORD *)(v114 + 2 * result + 100) = v87[14];\n          *(_WORD *)(v114 + 2 * result + 6) = v87[16];\n          *(_WORD *)(v113 + 2 * result + 6) = v87[18];\n          *(_WORD *)(v114 + 2 * result + 70) = v87[20];\n          *(_WORD *)(v114 + 2 * result + 102) = v87[22];\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42e1b0L", 
            "funcEndAddr": "0x42ea40L", 
            "funcName": "sub_42E1B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42EA40(int a1, _WORD *a2, _DWORD *a3, _DWORD *a4, _WORD *a5, _WORD *a6)\n{\n  _DWORD *v6; // rax\n  __int64 v7; // r14\n  __int64 v8; // r15\n  signed __int64 v9; // r11\n  __int64 v10; // r10\n  signed __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ebp\n  __int64 result; // rax\n  __int16 v15; // ax\n  _QWORD *v16; // rsi\n  signed __int64 v17; // rbx\n  signed __int64 v18; // rbp\n\n  v6 = off_49F6D0;\n  v7 = *((_QWORD *)off_49F6D0 + 1771);\n  v8 = *((signed int *)off_49F6D0 + 3);\n  v9 = 2LL * (a1 / 2);\n  v10 = a1;\n  v11 = 2LL * (a1 % 2);\n  *a6 = -1;\n  *a5 = -1;\n  *a4 = -1;\n  *a3 = -1;\n  v12 = v7 + 632 * v8;\n  v13 = *(_DWORD *)(v12 + 4 * v10 + 488);\n  *a2 = v13;\n  if ( v6[6] != 1 )\n  {\n    v15 = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8 * (v11 + (signed int)v6[36]))\n                   + 2 * (v9 + (signed int)v6[37]));\nLABEL_9:\n    *a5 = v15;\n    *a6 = 0;\n    *a3 = *(_DWORD *)(v12 + 4 * v10 + 472);\n    result = 0LL;\n    goto LABEL_12;\n  }\n  if ( v13 == 1 )\n  {\n    *a5 = 0;\n    *a6 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL)\n                               + 8 * ((signed int)v6[36] + (signed __int64)(signed int)v11))\n                   + 2 * ((signed int)v6[37] + (signed __int64)(signed int)v9));\n    *a3 = 0;\nLABEL_11:\n    result = *(unsigned int *)(v12 + 4 * v10 + 472);\n    goto LABEL_12;\n  }\n  if ( !v13 )\n  {\n    v15 = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480)\n                               + 8 * ((signed int)v6[36] + (signed __int64)(signed int)v11))\n                   + 2 * ((signed int)v6[37] + (signed __int64)(signed int)v9));\n    goto LABEL_9;\n  }\n  if ( v13 != -1 )\n  {\n    v16 = *(_QWORD **)(qword_4F9E30 + 6480);\n    v17 = (signed int)v6[36] + (signed __int64)(signed int)v11;\n    v18 = (signed int)v6[37] + (signed __int64)(signed int)v9;\n    *a5 = *(_WORD *)(*(_QWORD *)(*v16 + 8 * v17) + 2 * v18);\n    *a6 = *(_WORD *)(*(_QWORD *)(v16[1] + 8 * v17) + 2 * v18);\n    *a3 = *(_DWORD *)(v12 + 4 * v10 + 472);\n    goto LABEL_11;\n  }\n  *a5 = -1;\n  *a6 = -1;\n  *a3 = 0;\n  result = 0LL;\nLABEL_12:\n  *a4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42ea40L", 
            "funcEndAddr": "0x42ebffL", 
            "funcName": "sub_42EA40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42EC00(__m128i a1)\n{\n  __int64 v1; // rcx\n  signed __int64 v2; // rax\n  _DWORD *v3; // r14\n  _QWORD *v4; // r12\n  int v5; // ebx\n  int v6; // ebp\n  int v7; // er15\n  __int64 result; // rax\n  __int64 v9; // r8\n  __int64 v10; // r9\n  _DWORD *v11; // rsi\n  __int64 v12; // r10\n  __int64 v13; // rbp\n  __int16 v14; // [rsp+Ah] [rbp-3Eh]\n  __int16 v15; // [rsp+Ch] [rbp-3Ch]\n  __int16 v16; // [rsp+Eh] [rbp-3Ah]\n  int v17; // [rsp+10h] [rbp-38h]\n  int v18; // [rsp+14h] [rbp-34h]\n\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v3 = (_DWORD *)(v1 + v2 + 460);\n  *v3 = 0;\n  v4 = (_QWORD *)(v1 + v2 + 464);\n  *v4 = 0LL;\n  sub_42EA40(0, &v16, &v18, &v17, &v15, &v14);\n  v5 = sub_42CF70(v3, v4, 0LL, v16, v18, v17, a1, v15, v14);\n  sub_42EA40(1, &v16, &v18, &v17, &v15, &v14);\n  v6 = v5 + (unsigned __int64)sub_42CF70(v3, v4, 1LL, v16, v18, v17, a1, v15, v14);\n  sub_42EA40(2, &v16, &v18, &v17, &v15, &v14);\n  v7 = v6 + (unsigned __int64)sub_42CF70(v3, v4, 2LL, v16, v18, v17, a1, v15, v14);\n  sub_42EA40(3, &v16, &v18, &v17, &v15, &v14);\n  result = v7 + (unsigned int)sub_42CF70(v3, v4, 3LL, v16, v18, v17, a1, v15, v14);\n  if ( (signed int)result <= 5 )\n  {\n    result = (__int64)off_49F6D0;\n    if ( *((_DWORD *)off_49F6D0 + 18167) + *((_DWORD *)off_49F6D0 + 10) || !*((_DWORD *)off_49F6D0 + 18176) )\n    {\n      *v3 &= 0xFFFFF0u;\n      *v4 &= 0xFF0000uLL;\n      v9 = qword_4F9E30;\n      v10 = result + 12600;\n      v11 = xmmword_4F26D0;\n      v12 = 0LL;\n      do\n      {\n        v13 = 0LL;\n        do\n        {\n          if ( *(_DWORD *)(result + 72724) )\n            v11[v13] = 0;\n          else\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 6424) + 8LL * ((signed int)v13 + *(_DWORD *)(result + 156)))\n                     + 2 * (*(signed int *)(result + 152) + (signed __int64)(signed int)v12)) = *(_WORD *)(v10 + 2 * v13);\n          ++v13;\n        }\n        while ( v13 != 16 );\n        ++v12;\n        v10 += 32LL;\n        v11 += 16;\n      }\n      while ( v12 != 16 );\n      if ( *(_DWORD *)(result + 24) == 3 )\n      {\n        sub_40A190(0LL, 0LL);\n        sub_40A190(0LL, 4LL);\n        sub_40A190(4LL, 0LL);\n        sub_40A190(4LL, 4LL);\n        sub_40A190(8LL, 0LL);\n        sub_40A190(8LL, 4LL);\n        sub_40A190(12LL, 0LL);\n        sub_40A190(12LL, 4LL);\n        sub_40A190(0LL, 8LL);\n        sub_40A190(0LL, 12LL);\n        sub_40A190(4LL, 8LL);\n        sub_40A190(4LL, 12LL);\n        sub_40A190(8LL, 8LL);\n        sub_40A190(8LL, 12LL);\n        sub_40A190(12LL, 8LL);\n        result = sub_40A190(12LL, 12LL);\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42ec00L", 
            "funcEndAddr": "0x42ef69L", 
            "funcName": "sub_42EC00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_42EF70(unsigned int a1, _DWORD *a2)\n{\n  __int64 v2; // rbx\n  int v3; // ecx\n  signed int v4; // edx\n  int v5; // er15\n  int v6; // eax\n  signed int v7; // ecx\n  int v8; // edx\n  __int64 v9; // rsi\n  __int64 v10; // r12\n  signed int *v11; // rbx\n  _DWORD *v12; // rax\n  int v13; // ecx\n  __int64 v14; // r13\n  int v15; // er15\n  int v16; // ebp\n  __int64 v17; // r14\n  __int64 v18; // r8\n  unsigned __int16 *v19; // rax\n  __int64 v20; // rdi\n  __int64 v21; // r10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 v24; // rbp\n  __int64 v25; // rcx\n  __int64 v26; // rcx\n  __int64 v27; // rcx\n  int v28; // eax\n  int v29; // eax\n  signed __int64 result; // rax\n  unsigned __int8 v31; // of\n  int v32; // er15\n  __int16 v33; // [rsp+Eh] [rbp-1CAh]\n  __int16 v34; // [rsp+10h] [rbp-1C8h]\n  __int16 v35; // [rsp+12h] [rbp-1C6h]\n  __int16 v36; // [rsp+14h] [rbp-1C4h]\n  __int16 v37; // [rsp+16h] [rbp-1C2h]\n  int v38; // [rsp+18h] [rbp-1C0h]\n  int v39; // [rsp+1Ch] [rbp-1BCh]\n  int v40; // [rsp+20h] [rbp-1B8h]\n  int v41; // [rsp+24h] [rbp-1B4h]\n  int v42; // [rsp+28h] [rbp-1B0h]\n  int v43; // [rsp+2Ch] [rbp-1ACh]\n  int v44; // [rsp+30h] [rbp-1A8h]\n  int v45; // [rsp+34h] [rbp-1A4h]\n  _DWORD *v46; // [rsp+38h] [rbp-1A0h]\n  __int64 v47; // [rsp+40h] [rbp-198h]\n  __int64 v48; // [rsp+48h] [rbp-190h]\n  signed int *v49; // [rsp+50h] [rbp-188h]\n  __int64 v50; // [rsp+58h] [rbp-180h]\n  __int64 v51; // [rsp+60h] [rbp-178h]\n  __int64 v52; // [rsp+68h] [rbp-170h]\n  __int64 v53; // [rsp+70h] [rbp-168h]\n  __int64 v54; // [rsp+78h] [rbp-160h]\n  __int64 v55; // [rsp+80h] [rbp-158h]\n  __int64 v56; // [rsp+88h] [rbp-150h]\n  __int64 v57; // [rsp+90h] [rbp-148h]\n  __int64 v58; // [rsp+98h] [rbp-140h]\n  char v59; // [rsp+A0h] [rbp-138h]\n\n  v46 = a2;\n  v2 = a1;\n  v3 = 0;\n  if ( a1 == -1 )\n    v2 = 0LL;\n  v4 = 4;\n  if ( a1 != -1 )\n    v4 = a1 + 1;\n  v5 = 0;\n  v38 = v4;\n  if ( (signed int)v2 < v4 )\n  {\n    v5 = 0;\n    v3 = 0;\n    do\n    {\n      v39 = v3;\n      sub_42EA40(v2, &v37, &v45, &v44, &v36, &v35);\n      v6 = v2 + ((unsigned int)v2 >> 31);\n      v7 = 4 * v6 & 0xFFFFFFF8;\n      v47 = v2;\n      v8 = v2 - (v6 & 0x1FFFFFFE);\n      v42 = v37;\n      v41 = v45;\n      v40 = v44;\n      v34 = v36;\n      v33 = v35;\n      v53 = (unsigned int)(8 * v8);\n      v9 = v7;\n      v51 = 8 * v8 + 4;\n      v48 = v7 + 4;\n      v52 = (signed int)v53;\n      v10 = 16LL * (signed int)v53 + v7 + 6351;\n      v11 = (signed int *)&v59;\n      do\n      {\n        v12 = off_49F6D0;\n        v13 = *((_DWORD *)off_49F6D0 + 43);\n        v57 = v13 + (signed int)v9;\n        v56 = (signed int)(v13 + (v9 | 1));\n        v55 = (signed int)(v13 + (v9 | 2));\n        v54 = (signed int)(v13 + (v9 | 3));\n        v49 = v11;\n        v14 = 0LL;\n        v50 = v10;\n        while ( 1 )\n        {\n          v43 = v5;\n          v58 = v52 + v14;\n          v15 = v53 + v14;\n          v16 = v12[42];\n          v17 = v9;\n          sub_42BD80(v53 + v14, v9, v42, v41, v40, v34, v33);\n          v18 = qword_4F9EB0;\n          v19 = (unsigned __int16 *)off_49F6D0;\n          v20 = v15 + v16;\n          v21 = (signed int)v20 + 1;\n          v22 = (signed int)v20 + 2;\n          v23 = *(_QWORD *)(qword_4F9EB0 + 8 * v57);\n          *v11 = *(unsigned __int16 *)(v23 + 2 * v20) - *((unsigned __int16 *)off_49F6D0 + v10 - 51);\n          v24 = (signed int)v20 + 3;\n          v11[1] = *(unsigned __int16 *)(v23 + 2 * v21) - v19[v10 - 35];\n          v11[2] = *(unsigned __int16 *)(v23 + 2 * v22) - v19[v10 - 19];\n          v11[3] = *(unsigned __int16 *)(v23 + 2 * v24) - v19[v10 - 3];\n          v25 = *(_QWORD *)(v18 + 8 * v56);\n          v11[4] = *(unsigned __int16 *)(v25 + 2 * v20) - v19[v10 - 50];\n          v11[5] = *(unsigned __int16 *)(v25 + 2 * v21) - v19[v10 - 34];\n          v11[6] = *(unsigned __int16 *)(v25 + 2 * v22) - v19[v10 - 18];\n          v11[7] = *(unsigned __int16 *)(v25 + 2 * v24) - v19[v10 - 2];\n          v26 = *(_QWORD *)(v18 + 8 * v55);\n          v11[8] = *(unsigned __int16 *)(v26 + 2 * v20) - v19[v10 - 49];\n          v11[9] = *(unsigned __int16 *)(v26 + 2 * v21) - v19[v10 - 33];\n          v11[10] = *(unsigned __int16 *)(v26 + 2 * v22) - v19[v10 - 17];\n          v11[11] = *(unsigned __int16 *)(v26 + 2 * v24) - v19[v10 - 1];\n          v27 = *(_QWORD *)(v18 + 8 * v54);\n          v11[12] = *(unsigned __int16 *)(v27 + 2 * v20) - v19[v10 - 48];\n          v11[13] = *(unsigned __int16 *)(v27 + 2 * v21) - v19[v10 - 32];\n          v11[14] = *(unsigned __int16 *)(v27 + 2 * v22) - v19[v10 - 16];\n          v11[15] = *(unsigned __int16 *)(v27 + 2 * v24) - v19[v10];\n          v28 = sub_445CD0(v11, *((_DWORD *)dest + 6));\n          v5 = v43 + v28;\n          if ( v58 >= v51 )\n            break;\n          v12 = off_49F6D0;\n          v10 += 64LL;\n          v14 += 4LL;\n          v11 += 16;\n        }\n        v10 = v50 + 4;\n        v11 = v49 + 32;\n        v9 += 4LL;\n      }\n      while ( v17 < v48 );\n      v29 = sub_445FC0((const __m128i *)&v59, *((_DWORD *)dest + 6));\n      v3 = v29 + v39;\n      v2 = (unsigned int)(v47 + 1);\n    }\n    while ( (_DWORD)v2 != v38 );\n  }\n  result = 1LL;\n  v31 = __OFSUB__(v5, v3);\n  v32 = v5 - v3;\n  if ( (unsigned __int8)((v32 < 0) ^ v31) | (v32 == 0) )\n  {\n    if ( *((_DWORD *)dest + 805) != 2 )\n    {\n      *v46 += v32;\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42ef70L", 
            "funcEndAddr": "0x42f345L", 
            "funcName": "sub_42EF70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42F350(__int64 a1, int a2, int a3, __int64 a4, int a5, __int16 a6, int a7, int a8)\n{\n  _DWORD *v8; // r12\n  int v9; // edi\n  int v10; // er10\n  __int64 v11; // rax\n  int v12; // er13\n  int v13; // ecx\n  int v14; // er14\n  __int64 v15; // rsi\n  signed __int16 *v16; // rax\n  int v17; // er8\n  int v18; // ebp\n  signed int v19; // edi\n  __int64 v20; // r15\n  unsigned int v21; // ecx\n  __int64 v22; // r9\n  __int64 v23; // rbx\n  __int64 v24; // rax\n  int v25; // er8\n  __int64 result; // rax\n  unsigned int v27; // [rsp+0h] [rbp-A8h]\n  int v28; // [rsp+8h] [rbp-A0h]\n  int v29; // [rsp+14h] [rbp-94h]\n  int v30; // [rsp+1Ch] [rbp-8Ch]\n  __int64 v31; // [rsp+20h] [rbp-88h]\n  int v32; // [rsp+28h] [rbp-80h]\n  int v33; // [rsp+38h] [rbp-70h]\n  __int64 v34; // [rsp+48h] [rbp-60h]\n  __int64 v35; // [rsp+50h] [rbp-58h]\n  __int64 v36; // [rsp+58h] [rbp-50h]\n  __int64 v37; // [rsp+60h] [rbp-48h]\n  int v38; // [rsp+68h] [rbp-40h]\n  __int64 v39; // [rsp+70h] [rbp-38h]\n\n  v39 = a4;\n  v29 = a2;\n  v31 = a1;\n  v8 = off_49F6D0;\n  v9 = 0;\n  v10 = 64 / *((_DWORD *)off_49F6D0 + 18178);\n  v28 = 64 / *((_DWORD *)off_49F6D0 + 18177);\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && (v11 = *((signed int *)off_49F6D0 + 3), *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v11 + 532)) )\n  {\n    v9 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n    v12 = *((_DWORD *)off_49F6D0 + 16) / 2;\n  }\n  else\n  {\n    v12 = *((_DWORD *)off_49F6D0 + 16);\n  }\n  v32 = v28 - 1;\n  v38 = v10 - 1;\n  v27 = v12 - 1;\n  v37 = a6;\n  v36 = *((_QWORD *)*(&base + a5 + v9) + a6);\n  v35 = *(_QWORD *)(*(_QWORD *)(v36 + 6464) + 8LL * a8);\n  v34 = a5;\n  v13 = 0;\n  do\n  {\n    v33 = v13;\n    v30 = v13 + a3;\n    v14 = v29;\n    v15 = 0LL;\n    do\n    {\n      v16 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8LL * (v14 / (v8[18177] / 4)))\n                                                                   + 8LL * (v30 / (v8[18178] / 4)))\n                                                       + 8 * v34)\n                                           + 8 * v37)\n                               + 8LL * a7);\n      v17 = v28 * (v14 + v8[44]) + *v16;\n      v18 = *(_DWORD *)(v36 + 6408) + v10 * (v30 + v8[45]) + v16[1];\n      v19 = v8[14];\n      v20 = (unsigned int)(v17 / v28);\n      v21 = v19 - 1;\n      if ( v19 <= (signed int)v20 )\n        v20 = v21;\n      if ( (signed int)v20 < 0 )\n        v20 = 0LL;\n      v22 = (unsigned int)(v18 / v10);\n      if ( v12 <= (signed int)v22 )\n        v22 = v27;\n      if ( (signed int)v22 < 0 )\n        v22 = 0LL;\n      v23 = (unsigned int)((v17 + v32) / v28);\n      if ( v19 <= (signed int)v23 )\n        v23 = v21;\n      if ( (signed int)v23 < 0 )\n        v23 = 0LL;\n      v24 = (unsigned int)((v38 + v18) / v10);\n      if ( v12 <= (signed int)v24 )\n        v24 = v27;\n      if ( (signed int)v24 < 0 )\n        v24 = 0LL;\n      v25 = v32 & v17;\n      result = (unsigned int)(((v28 * v10 >> 1)\n                             + (v10 - (v38 & v18))\n                             * ((v28 - v25) * *(unsigned __int16 *)(*(_QWORD *)(v35 + 8 * v22) + 2 * v20)\n                              + v25 * *(unsigned __int16 *)(*(_QWORD *)(v35 + 8 * v22) + 2 * v23))\n                             + (v38 & v18)\n                             * ((v28 - v25) * *(unsigned __int16 *)(*(_QWORD *)(v35 + 8 * v24) + 2 * v20)\n                              + v25 * *(unsigned __int16 *)(*(_QWORD *)(v35 + 8 * v24) + 2 * v23)))\n                            / (v28\n                             * v10));\n      *(_DWORD *)(v31 + v15) = result;\n      v15 += 4LL;\n      ++v14;\n    }\n    while ( (_DWORD)v15 != 16 );\n    v31 += 16LL;\n    v13 = v33 + 1;\n  }\n  while ( v33 != 3 );\n  return result;\n}\n", 
            "funcStartAddr": "0x42f350L", 
            "funcEndAddr": "0x42f645L", 
            "funcName": "sub_42F350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42F650(int a1, int a2, int a3)\n{\n  __int64 result; // rax\n  signed __int64 v4; // rsi\n  char *v5; // rcx\n  char *v6; // rsi\n\n  result = a3;\n  v4 = 32LL * a2;\n  v5 = (char *)off_49F6D0\n     + 2048 * (signed __int64)a1\n     + 512\n     * (signed __int64)*(signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 524)\n     + v4\n     + 8504;\n  v6 = (char *)off_49F6D0 + v4 + 12600;\n  *(_WORD *)&v6[2 * result] = *(_WORD *)&v5[2 * a3];\n  *(_WORD *)&v6[2 * result + 32] = *(_WORD *)&v5[2 * a3 + 32];\n  *(_WORD *)&v6[2 * result + 64] = *(_WORD *)&v5[2 * a3 + 64];\n  *(_WORD *)&v6[2 * result + 96] = *(_WORD *)&v5[2 * a3 + 96];\n  *(_WORD *)&v6[2 * result + 2] = *(_WORD *)&v5[2 * a3 + 2];\n  *(_WORD *)&v6[2 * result + 34] = *(_WORD *)&v5[2 * a3 + 34];\n  *(_WORD *)&v6[2 * result + 66] = *(_WORD *)&v5[2 * a3 + 66];\n  *(_WORD *)&v6[2 * result + 98] = *(_WORD *)&v5[2 * a3 + 98];\n  *(_WORD *)&v6[2 * result + 4] = *(_WORD *)&v5[2 * a3 + 4];\n  *(_WORD *)&v6[2 * result + 36] = *(_WORD *)&v5[2 * a3 + 36];\n  *(_WORD *)&v6[2 * result + 68] = *(_WORD *)&v5[2 * a3 + 68];\n  *(_WORD *)&v6[2 * result + 100] = *(_WORD *)&v5[2 * a3 + 100];\n  *(_WORD *)&v6[2 * result + 6] = *(_WORD *)&v5[2 * a3 + 6];\n  *(_WORD *)&v6[2 * result + 38] = *(_WORD *)&v5[2 * a3 + 38];\n  *(_WORD *)&v6[2 * result + 70] = *(_WORD *)&v5[2 * a3 + 70];\n  *(_WORD *)&v6[2 * result + 102] = *(_WORD *)&v5[2 * a3 + 102];\n  return result;\n}\n", 
            "funcStartAddr": "0x42f650L", 
            "funcEndAddr": "0x42f73dL", 
            "funcName": "sub_42F650"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_42F740@<rax>(unsigned int *a1@<rdi>, __int64 a2@<r9>, signed __int64 a3@<r11>)\n{\n  unsigned int *v3; // r14\n  char *v4; // rax\n  int v5; // ecx\n  signed __int64 v6; // r15\n  __int64 v7; // r12\n  int v8; // ecx\n  __int64 v9; // rdx\n  __int64 v10; // rsi\n  signed int v11; // er12\n  int v12; // er14\n  int *v13; // r8\n  __int64 v14; // r10\n  __int64 v15; // rdx\n  __int64 v16; // rdi\n  __int64 v17; // rbp\n  __int64 v18; // r10\n  __int64 v19; // rsi\n  signed __int64 v20; // rdi\n  __int64 v21; // rcx\n  __int64 v22; // rbp\n  int v23; // esi\n  __int64 v24; // r10\n  __int64 v25; // rdx\n  __int64 v26; // rdi\n  __int64 v27; // rbp\n  unsigned int v28; // eax\n  signed int v29; // ecx\n  unsigned int v30; // eax\n  signed int *v31; // rax\n  signed int v32; // ebp\n  __int64 v33; // rdi\n  __int128 *v34; // rcx\n  char *v35; // rdx\n  signed __int64 v36; // r8\n  __int64 v37; // rbp\n  __int64 v38; // rsi\n  __int64 result; // rax\n  _DWORD *v40; // rdx\n  int v41; // ecx\n  __int64 *v42; // rsi\n  __int64 v43; // rsi\n  __int64 v44; // rdx\n  __int64 v45; // r15\n  __int64 v46; // r12\n  __int64 v47; // r13\n  __int64 v48; // r14\n  __int64 v49; // rsi\n  __int64 v50; // rdi\n  int v51; // er9\n  int v52; // er8\n  int v53; // er11\n  int v54; // ebx\n  __int16 v55; // bp\n  __int32 v56; // ebx\n  int v57; // er8\n  __int16 v58; // bp\n  int v59; // er8\n  __int16 v60; // bp\n  __int16 v61; // [rsp+Ah] [rbp-6Eh]\n  __int16 v62; // [rsp+Ch] [rbp-6Ch]\n  __int16 v63; // [rsp+Eh] [rbp-6Ah]\n  __int64 v64; // [rsp+10h] [rbp-68h]\n  __int64 v65; // [rsp+18h] [rbp-60h]\n  int v66; // [rsp+20h] [rbp-58h]\n  unsigned int v67; // [rsp+24h] [rbp-54h]\n  __int64 v68; // [rsp+28h] [rbp-50h]\n  __int64 v69; // [rsp+30h] [rbp-48h]\n  __int64 v70; // [rsp+38h] [rbp-40h]\n  unsigned int *v71; // [rsp+40h] [rbp-38h]\n\n  v3 = a1;\n  v4 = (char *)off_49F6D0;\n  if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 72) )\n  {\n    LODWORD(v64) = 0;\n  }\n  else\n  {\n    v5 = *((_DWORD *)off_49F6D0 + 6);\n    LOBYTE(v5) = v5 == 0 || v5 == 3;\n    LODWORD(v64) = v5;\n  }\n  v6 = *((signed int *)off_49F6D0 + 18175) - 1LL;\n  *a1 = 0;\n  v7 = 0LL;\n  v71 = a1;\n  v69 = v6 << 6;\n  while ( 1 )\n  {\n    v8 = *((_DWORD *)v4 + 18178);\n    if ( v8 <= 0 )\n    {\n      v13 = (int *)(v4 + 72712);\n      if ( *((_DWORD *)v4 + 18098) )\n        goto LABEL_13;\n    }\n    else\n    {\n      v68 = v7;\n      v9 = 0LL;\n      do\n      {\n        v65 = v9;\n        v10 = v69;\n        if ( *((_DWORD *)v4 + 18177) > 0 )\n        {\n          v70 = (unsigned int)v65 >> 2;\n          v11 = 0;\n          v12 = 0;\n          do\n          {\n            sub_42EA40(\n              *(int *)((char *)&dword_490C10[4 * v70 + (v12 & 0x3FFFFFFF)] + v10),\n              &v63,\n              &v67,\n              &v66,\n              &v62,\n              &v61);\n            sub_42E1B0(v68, v11, v65, v63, v67, v66, v62, v61);\n            v10 = v69;\n            v4 = (char *)off_49F6D0;\n            ++v12;\n            v11 += 4;\n          }\n          while ( *((_DWORD *)off_49F6D0 + 18177) > v11 );\n        }\n        v9 = v65 + 4;\n        v8 = *((_DWORD *)v4 + 18178);\n      }\n      while ( v8 > (signed int)v65 + 4 );\n      v13 = (int *)(v4 + 72712);\n      v3 = v71;\n      v7 = v68;\n      if ( *((_DWORD *)v4 + 18098) )\n      {\nLABEL_13:\n        if ( v8 > 0 )\n        {\n          v14 = qword_4F9E30;\n          LODWORD(v15) = *((_DWORD *)v4 + 18177);\n          a2 = 12600LL;\n          a3 = 0LL;\n          do\n          {\n            if ( (signed int)v15 > 0 )\n            {\n              v16 = a2;\n              v17 = 0LL;\n              do\n              {\n                if ( *((_DWORD *)v4 + 18181) )\n                {\n                  if ( v7 )\n                    *(int *)((char *)&dword_4EC060 + 2 * v16) = 0;\n                  else\n                    *(int *)((char *)&dword_4ED060 + 2 * v16) = 0;\n                }\n                else\n                {\n                  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 6464) + 8 * v7)\n                                       + 8 * (*((signed int *)v4 + 41) + (signed __int64)(signed int)a3))\n                           + 2LL * ((signed int)v17 + *((_DWORD *)v4 + 40))) = *(_WORD *)&v4[v16];\n                }\n                ++v17;\n                v15 = *((signed int *)v4 + 18177);\n                v16 += 32LL;\n              }\n              while ( v17 < v15 );\n            }\n            ++a3;\n            a2 += 2LL;\n          }\n          while ( a3 < *v13 );\n        }\n        goto LABEL_54;\n      }\n    }\n    if ( (_BYTE)v64 )\n    {\n      if ( *((_DWORD *)v4 + 6) == 3 )\n      {\n        *(_OWORD *)(v4 + 13128) = 0LL;\n        *(_OWORD *)(v4 + 13112) = 0LL;\n        *(_OWORD *)(v4 + 13192) = 0LL;\n        *(_OWORD *)(v4 + 13176) = 0LL;\n        *(_OWORD *)(v4 + 13256) = 0LL;\n        *(_OWORD *)(v4 + 13240) = 0LL;\n        *(_OWORD *)(v4 + 13320) = 0LL;\n        *(_OWORD *)(v4 + 13304) = 0LL;\n        *(_OWORD *)(v4 + 13384) = 0LL;\n        *(_OWORD *)(v4 + 13368) = 0LL;\n        *(_OWORD *)(v4 + 13448) = 0LL;\n        *(_OWORD *)(v4 + 13432) = 0LL;\n        *(_OWORD *)(v4 + 13512) = 0LL;\n        *(_OWORD *)(v4 + 13496) = 0LL;\n        *(_OWORD *)(v4 + 13576) = 0LL;\n        *(_OWORD *)(v4 + 13560) = 0LL;\n        if ( *((_DWORD *)v4 + 6) == 3 )\n          goto LABEL_56;\n        goto LABEL_72;\n      }\n      if ( v8 <= 0 )\n        goto LABEL_55;\n      v24 = qword_4F9E30;\n      LODWORD(v25) = *((_DWORD *)v4 + 18177);\n      a2 = 12600LL;\n      a3 = 0LL;\n      do\n      {\n        if ( (signed int)v25 > 0 )\n        {\n          v26 = a2;\n          v27 = 0LL;\n          do\n          {\n            if ( *((_DWORD *)v4 + 18181) )\n            {\n              if ( v7 )\n                *(int *)((char *)&dword_4EC060 + 2 * v26) = 0;\n              else\n                *(int *)((char *)&dword_4ED060 + 2 * v26) = 0;\n            }\n            else\n            {\n              *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 6464) + 8 * v7)\n                                   + 8 * (*((signed int *)v4 + 41) + (signed __int64)(signed int)a3))\n                       + 2LL * ((signed int)v27 + *((_DWORD *)v4 + 40))) = *(_WORD *)&v4[v26];\n            }\n            ++v27;\n            v25 = *((signed int *)v4 + 18177);\n            v26 += 32LL;\n          }\n          while ( v27 < v25 );\n        }\n        ++a3;\n        a2 += 2LL;\n      }\n      while ( a3 < *v13 );\n    }\n    else\n    {\n      if ( v8 <= 0 )\n        goto LABEL_58;\n      v18 = qword_4F9E88;\n      LODWORD(v19) = *((_DWORD *)v4 + 18177);\n      a2 = 6556LL;\n      v20 = 0LL;\n      do\n      {\n        if ( (signed int)v19 > 0 )\n        {\n          v21 = a2;\n          v22 = 0LL;\n          do\n          {\n            if ( *((_DWORD *)v4 + 18181) )\n            {\n              if ( v7 )\n                v23 = *(int *)((char *)&dword_4F0398 + 2 * v21);\n              else\n                v23 = *(int *)((char *)&dword_4F1398 + 2 * v21);\n            }\n            else\n            {\n              v23 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v18 + 8 * v7)\n                                                    + 8 * (*((signed int *)v4 + 45) + (signed __int64)(signed int)v20))\n                                        + 2LL * ((signed int)v22 + *((_DWORD *)v4 + 44)))\n                  - *(unsigned __int16 *)&v4[v21 + 6044];\n            }\n            *(_DWORD *)&v4[2 * v21] = v23;\n            ++v22;\n            v19 = *((signed int *)v4 + 18177);\n            v21 += 32LL;\n          }\n          while ( v22 < v19 );\n          v8 = *v13;\n        }\n        ++v20;\n        a2 += 2LL;\n      }\n      while ( v20 < v8 );\n    }\nLABEL_54:\n    if ( (_BYTE)v64 )\n    {\nLABEL_55:\n      if ( *((_DWORD *)v4 + 6) != 3 )\n        goto LABEL_72;\nLABEL_56:\n      *v3 = sub_408E30((unsigned int)v7, *v3);\n      goto LABEL_72;\n    }\n    if ( !*((_DWORD *)v4 + 18098) )\n    {\nLABEL_58:\n      if ( *((_DWORD *)v4 + 6) != 3\n        || (v28 = *(_DWORD *)(*((_QWORD *)v4 + 1771) + 632LL * *((signed int *)v4 + 3) + 72), v28 <= 0xD)\n        && (v29 = 9728, _bittest(&v29, v28)) )\n      {\n        v30 = sub_405140((unsigned int)v7, *v3, (int)v13, a2, a3);\n      }\n      else\n      {\n        v30 = sub_408E30((unsigned int)v7, *v3);\n      }\n      *v3 = v30;\n      v31 = (signed int *)off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v32 = *((_DWORD *)off_49F6D0 + 18178);\n        if ( v32 > 0 )\n        {\n          LODWORD(v33) = *((_DWORD *)off_49F6D0 + 18177);\n          v34 = xmmword_4F22D0;\n          if ( !v7 )\n            v34 = (__int128 *)xmmword_4F32D0;\n          v35 = (char *)off_49F6D0 + 13112;\n          v36 = 0LL;\n          do\n          {\n            if ( (signed int)v33 > 0 )\n            {\n              v37 = 0LL;\n              v38 = 0LL;\n              do\n              {\n                LODWORD(v34[v37]) = *(_DWORD *)&v35[v37 * 16];\n                ++v38;\n                v33 = v31[18177];\n                v37 += 4LL;\n              }\n              while ( v38 < v33 );\n              v32 = v31[18178];\n            }\n            ++v36;\n            v34 = (__int128 *)((char *)v34 + 4);\n            v35 += 4;\n          }\n          while ( v36 < v32 );\n        }\n      }\n    }\nLABEL_72:\n    if ( ++v7 == 2 )\n      break;\n    v4 = (char *)off_49F6D0;\n  }\n  result = 16 * *v3;\n  v40 = off_49F6D0;\n  *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 460) += result;\n  if ( v40[18181] )\n  {\n    result = (unsigned int)v40[18171];\n    v41 = v40[18172];\n    v65 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v42 = *(__int64 **)(qword_4F9E30 + 6464);\n    v69 = *v42;\n    v70 = v42[1];\n    v43 = (signed int)v40[38];\n    v64 = (signed int)v40[39];\n    v68 = 2 * v43;\n    v44 = 0LL;\n    v45 = 0LL;\n    do\n    {\n      v46 = *(_QWORD *)(v69 + 8 * (v45 + v64));\n      v47 = *(_QWORD *)(v65 + 8 * (v45 + v64));\n      v48 = *(_QWORD *)(v70 + 8 * (v45 + v64));\n      v49 = 0LL;\n      v50 = v68;\n      do\n      {\n        v51 = xmmword_4F32D0[v44 + v49];\n        v52 = xmmword_4F26D0[v44 + v49]\n            - (*(_DWORD *)((char *)xmmword_4F22D0 + v44 * 4 + v49 * 4) >> 1)\n            - (xmmword_4F32D0[v44 + v49] >> 1);\n        v53 = v52 + xmmword_4EC370[v44 + v49];\n        if ( v53 < 0 )\n          v53 = 0;\n        v54 = *(_DWORD *)((char *)xmmword_4F22D0 + v44 * 4 + v49 * 4)\n            + xmmword_4F26D0[v44 + v49]\n            - (*(_DWORD *)((char *)xmmword_4F22D0 + v44 * 4 + v49 * 4) >> 1);\n        v55 = v41;\n        if ( v41 >= v53 )\n          v55 = v53;\n        *(_WORD *)(v46 + v50) = v55;\n        v56 = xmmword_4EBF70[0].m128i_i32[v44 + v49] + v54;\n        if ( v56 < 0 )\n          v56 = 0;\n        v57 = v51 + v52;\n        v58 = result;\n        if ( (signed int)result >= v56 )\n          v58 = v56;\n        *(_WORD *)(v47 + v50) = v58;\n        v59 = xmmword_4EC770[v44 + v49] + v57;\n        if ( v59 < 0 )\n          v59 = 0;\n        v60 = v41;\n        if ( v41 >= v59 )\n          v60 = v59;\n        *(_WORD *)(v48 + v50) = v60;\n        v50 += 2LL;\n        v49 += 16LL;\n      }\n      while ( v49 != 256 );\n      ++v45;\n      ++v44;\n    }\n    while ( v45 != 16 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42f740L", 
            "funcEndAddr": "0x42fea9L", 
            "funcName": "sub_42F740"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __usercall sub_42FEB0@<rax>(int *a1@<rdx>, int *a2@<rdi>, _DWORD *a3@<rsi>, __m128i a4@<xmm12>)\n{\n  __int64 v4; // r15\n  __int64 v5; // r12\n  __int64 v6; // r13\n  __int64 v7; // r14\n  int v8; // ebp\n  int *v9; // rbx\n  int v10; // er14\n  int v11; // er8\n  int v12; // ecx\n  __int64 v13; // rdi\n  char *v14; // rbx\n  int v15; // eax\n  int v16; // eax\n  signed __int64 v17; // rdi\n  int v18; // eax\n  __int64 v19; // rsi\n  __int64 v20; // r9\n  char *v21; // rcx\n  int v22; // ebx\n  int v23; // eax\n  signed __int64 v24; // rsi\n  int v25; // eax\n  bool v26; // bl\n  __int64 v27; // r8\n  __int64 v28; // r14\n  signed int v29; // esi\n  signed int v30; // ebp\n  int v31; // eax\n  int v32; // eax\n  signed __int64 v33; // rbx\n  signed __int64 v34; // rbp\n  __int64 v35; // rcx\n  unsigned __int64 v36; // rdx\n  __int64 v37; // rcx\n  __int64 v38; // rcx\n  unsigned __int64 v39; // rdx\n  __int64 v40; // rcx\n  unsigned __int64 v41; // rdx\n  __m128i v42; // xmm10\n  __m128i v43; // xmm12\n  __m128i v44; // xmm11\n  __m128i v45; // xmm13\n  __m128i v46; // xmm14\n  signed __int64 v47; // rcx\n  __int64 v48; // rdx\n  __int64 v49; // rdx\n  __m128 v50; // xmm3\n  __m128 v51; // xmm1\n  __int64 v52; // rcx\n  __m128 v53; // xmm3\n  __int64 v54; // rax\n  __int64 v55; // rbp\n  int v56; // er11\n  __int64 v57; // r10\n  signed __int64 v58; // rax\n  signed __int64 v59; // r14\n  __int64 v60; // r15\n  __int64 v61; // r13\n  int v62; // er9\n  int v63; // edx\n  int v64; // er9\n  __int64 v65; // rax\n  __int64 v66; // rax\n  __int64 v67; // rax\n  unsigned __int64 v68; // r8\n  signed __int64 v69; // rbp\n  __int64 v70; // rsi\n  char *v71; // rcx\n  signed __int64 v72; // rdx\n  signed __int64 v73; // r15\n  unsigned __int64 v74; // rdi\n  signed __int64 v75; // rbx\n  signed __int64 v76; // rbx\n  signed __int64 v77; // rax\n  signed __int64 v78; // rdx\n  signed __int64 v79; // rdi\n  bool v80; // zf\n  __int64 v81; // r12\n  __int64 v82; // r13\n  __int64 v83; // r10\n  unsigned __int64 v84; // r11\n  __int64 v85; // r14\n  __int64 v86; // rax\n  __int64 v87; // rcx\n  __int64 v88; // rdx\n  signed __int64 v89; // rsi\n  __int64 v90; // rdi\n  __m128i v91; // xmm3\n  __m128i v92; // xmm3\n  __m128i v93; // xmm3\n  signed __int64 v94; // rax\n  char *v95; // rax\n  char *v96; // r8\n  char *v97; // rdi\n  __int64 v98; // rbp\n  unsigned int v99; // ebx\n  __int64 v100; // rdx\n  __m128i v101; // xmm3\n  __int64 v102; // rcx\n  __int64 v103; // rsi\n  __int64 v104; // rsi\n  char *v105; // rdx\n  char *v106; // rcx\n  __int64 v107; // rsi\n  __int64 v108; // rbx\n  __int64 v109; // r8\n  __int64 v110; // r10\n  __int64 v111; // rbp\n  __int64 v112; // rax\n  char *v113; // rcx\n  __int64 v114; // rdi\n  char *v115; // rax\n  char *v116; // rdx\n  __int64 v117; // rdi\n  unsigned __int64 v118; // rcx\n  __int64 v119; // rcx\n  unsigned __int64 v120; // rsi\n  int v121; // er9\n  unsigned int v122; // ebp\n  __int64 v123; // rdx\n  __int64 v124; // r11\n  __m128i v125; // xmm6\n  __m128 v126; // xmm8\n  unsigned __int64 v127; // rsi\n  __int64 v128; // rdx\n  const __m128i *v129; // rdi\n  __m128i v130; // xmm5\n  __m128i v131; // xmm1\n  __m128i v132; // xmm7\n  __m128i v133; // xmm4\n  __m128i v134; // xmm1\n  __m128i v135; // xmm1\n  __m128i v136; // xmm8\n  __m128i v137; // xmm1\n  char *v138; // rsi\n  int v139; // edi\n  __int32 v140; // ebx\n  unsigned int v141; // er10\n  __int64 v142; // rcx\n  __m128i v143; // xmm6\n  __int64 v144; // rdx\n  __int64 v145; // rcx\n  const __m128i *v146; // rsi\n  __m128i v147; // xmm4\n  __m128i v148; // xmm7\n  __m128i v149; // xmm5\n  __m128i v150; // xmm2\n  __m128i v151; // xmm7\n  __m128i v152; // xmm0\n  __m128i v153; // xmm1\n  __m128i v154; // xmm0\n  _DWORD *v155; // rdx\n  int v156; // esi\n  __int32 v157; // ebx\n  int v158; // ebp\n  int v159; // er10\n  int v160; // edi\n  int v161; // er8\n  __m128i v162; // xmm8\n  int v163; // er11\n  char *v164; // r9\n  char *v165; // r14\n  __int64 v166; // rax\n  signed int v167; // edx\n  __int64 v168; // rdi\n  __m128i v169; // xmm9\n  __m128i v170; // xmm4\n  __int64 v171; // rcx\n  _WORD *v172; // rbx\n  __m128i v173; // xmm3\n  __m128i v174; // xmm5\n  __m128i v175; // xmm0\n  __m128i v176; // xmm1\n  __m128i v177; // xmm6\n  __m128i v178; // xmm7\n  __m128i v179; // xmm0\n  __m128i v180; // xmm6\n  __m128i v181; // xmm1\n  __m128i v182; // xmm1\n  __m128i v183; // xmm6\n  __m128i v184; // xmm2\n  __m128i v185; // xmm0\n  char *v186; // rcx\n  int v187; // esi\n  __int64 v188; // rbx\n  int v189; // edi\n  __int64 v190; // r15\n  signed __int64 result; // rax\n  int *v192; // rbx\n  __int64 v193; // rbp\n  signed __int64 v194; // rax\n  int v195; // esi\n  int v196; // edi\n  int v197; // eax\n  signed __int64 v198; // rax\n  __int64 v199; // r15\n  signed __int64 v200; // rax\n  signed __int64 v201; // r14\n  signed int v202; // er12\n  int *v203; // r13\n  int *v204; // rbp\n  signed __int64 v205; // rax\n  __int64 v206; // rdx\n  signed __int64 v207; // rsi\n  __int64 v208; // rdx\n  signed __int64 v209; // rsi\n  __int64 v210; // rdx\n  signed __int64 v211; // rsi\n  __int64 v212; // rdx\n  signed __int64 v213; // rsi\n  signed __int64 v214; // rbx\n  __int64 v215; // r13\n  signed __int64 v216; // rdx\n  signed __int64 v217; // rax\n  int *v218; // r14\n  int *v219; // r15\n  signed __int64 v220; // rbx\n  signed __int64 v221; // rax\n  __int64 v222; // rdx\n  signed __int64 v223; // rsi\n  __int64 v224; // rdx\n  signed __int64 v225; // rsi\n  __int64 v226; // rdx\n  signed __int64 v227; // rsi\n  __int64 v228; // rdx\n  signed __int64 v229; // rsi\n  signed __int64 v230; // rbp\n  signed int v231; // ecx\n  int v232; // edx\n  int v233; // [rsp+4h] [rbp-4E4h]\n  int v234; // [rsp+4h] [rbp-4E4h]\n  signed int v235; // [rsp+4h] [rbp-4E4h]\n  bool v236; // [rsp+Ah] [rbp-4DEh]\n  bool v237; // [rsp+Ah] [rbp-4DEh]\n  bool v238; // [rsp+Bh] [rbp-4DDh]\n  int v239; // [rsp+Ch] [rbp-4DCh]\n  int v240; // [rsp+10h] [rbp-4D8h]\n  int v241; // [rsp+10h] [rbp-4D8h]\n  signed __int64 v242; // [rsp+10h] [rbp-4D8h]\n  bool v243; // [rsp+1Eh] [rbp-4CAh]\n  bool v244; // [rsp+1Fh] [rbp-4C9h]\n  int *v245; // [rsp+20h] [rbp-4C8h]\n  signed __int64 v246; // [rsp+20h] [rbp-4C8h]\n  signed __int64 v247; // [rsp+20h] [rbp-4C8h]\n  int *v248; // [rsp+28h] [rbp-4C0h]\n  _DWORD *v249; // [rsp+28h] [rbp-4C0h]\n  signed __int64 v250; // [rsp+28h] [rbp-4C0h]\n  signed __int64 v251; // [rsp+28h] [rbp-4C0h]\n  _DWORD *v252; // [rsp+30h] [rbp-4B8h]\n  __int64 v253; // [rsp+30h] [rbp-4B8h]\n  signed __int64 v254; // [rsp+30h] [rbp-4B8h]\n  signed __int64 v255; // [rsp+30h] [rbp-4B8h]\n  __int64 v256; // [rsp+38h] [rbp-4B0h]\n  signed __int64 v257; // [rsp+38h] [rbp-4B0h]\n  __int64 v258; // [rsp+38h] [rbp-4B0h]\n  int *v259; // [rsp+38h] [rbp-4B0h]\n  int *v260; // [rsp+38h] [rbp-4B0h]\n  __int64 v261; // [rsp+48h] [rbp-4A0h]\n  int v262; // [rsp+48h] [rbp-4A0h]\n  __int64 v263; // [rsp+50h] [rbp-498h]\n  signed __int64 v264; // [rsp+50h] [rbp-498h]\n  __int64 v265; // [rsp+58h] [rbp-490h]\n  int v266; // [rsp+60h] [rbp-488h]\n  int v267; // [rsp+64h] [rbp-484h]\n  int v268; // [rsp+68h] [rbp-480h]\n  int v269; // [rsp+6Ch] [rbp-47Ch]\n  int v270; // [rsp+70h] [rbp-478h]\n  int v271; // [rsp+74h] [rbp-474h]\n  int v272; // [rsp+78h] [rbp-470h]\n  int v273; // [rsp+7Ch] [rbp-46Ch]\n  int v274; // [rsp+80h] [rbp-468h]\n  int v275; // [rsp+84h] [rbp-464h]\n  int v276; // [rsp+88h] [rbp-460h]\n  int v277; // [rsp+8Ch] [rbp-45Ch]\n  int v278; // [rsp+90h] [rbp-458h]\n  int v279; // [rsp+94h] [rbp-454h]\n  int v280; // [rsp+98h] [rbp-450h]\n  int v281; // [rsp+9Ch] [rbp-44Ch]\n  __int64 v282; // [rsp+A8h] [rbp-440h]\n  __int64 v283; // [rsp+B0h] [rbp-438h]\n  __int64 v284; // [rsp+B8h] [rbp-430h]\n  __int64 v285; // [rsp+C0h] [rbp-428h]\n  __int64 v286; // [rsp+C8h] [rbp-420h]\n  int v287; // [rsp+D4h] [rbp-414h]\n  int v288; // [rsp+D8h] [rbp-410h]\n  int v289; // [rsp+DCh] [rbp-40Ch]\n  int v290; // [rsp+E0h] [rbp-408h]\n  int v291; // [rsp+E4h] [rbp-404h]\n  int v292; // [rsp+E8h] [rbp-400h]\n  int v293; // [rsp+ECh] [rbp-3FCh]\n  int v294; // [rsp+F0h] [rbp-3F8h]\n  int v295; // [rsp+F4h] [rbp-3F4h]\n  unsigned __int64 v296; // [rsp+F8h] [rbp-3F0h]\n  unsigned __int64 v297; // [rsp+100h] [rbp-3E8h]\n  char *v298; // [rsp+108h] [rbp-3E0h]\n  char *v299; // [rsp+110h] [rbp-3D8h]\n  char *v300; // [rsp+118h] [rbp-3D0h]\n  char *v301; // [rsp+120h] [rbp-3C8h]\n  char *v302; // [rsp+128h] [rbp-3C0h]\n  char *v303; // [rsp+130h] [rbp-3B8h]\n  char *v304; // [rsp+138h] [rbp-3B0h]\n  __int64 v305; // [rsp+140h] [rbp-3A8h]\n  int v306; // [rsp+148h] [rbp-3A0h]\n  int v307; // [rsp+14Ch] [rbp-39Ch]\n  int v308; // [rsp+158h] [rbp-390h]\n  int v309; // [rsp+15Ch] [rbp-38Ch]\n  __int64 v310; // [rsp+160h] [rbp-388h]\n  _DWORD *v311; // [rsp+168h] [rbp-380h]\n  __int64 v312; // [rsp+170h] [rbp-378h]\n  __int64 v313; // [rsp+178h] [rbp-370h]\n  __int64 v314; // [rsp+180h] [rbp-368h]\n  __int64 v315; // [rsp+188h] [rbp-360h]\n  __int64 v316; // [rsp+190h] [rbp-358h]\n  unsigned __int64 v317; // [rsp+198h] [rbp-350h]\n  __int64 v318; // [rsp+1A0h] [rbp-348h]\n  unsigned __int64 v319; // [rsp+1A8h] [rbp-340h]\n  __int64 v320; // [rsp+1B0h] [rbp-338h]\n  unsigned __int64 v321; // [rsp+1B8h] [rbp-330h]\n  __int64 v322; // [rsp+1C0h] [rbp-328h]\n  __int64 v323; // [rsp+1C8h] [rbp-320h]\n  __int64 v324; // [rsp+1D0h] [rbp-318h]\n  __int64 v325; // [rsp+1D8h] [rbp-310h]\n  __int128 *v326; // [rsp+1E0h] [rbp-308h]\n  char *v327; // [rsp+1E8h] [rbp-300h]\n  const __m128i *v328; // [rsp+1F0h] [rbp-2F8h]\n  const __m128i *v329; // [rsp+1F8h] [rbp-2F0h]\n  __int64 v330; // [rsp+200h] [rbp-2E8h]\n  __int64 v331; // [rsp+208h] [rbp-2E0h]\n  __int64 v332; // [rsp+210h] [rbp-2D8h]\n  __int64 v333; // [rsp+218h] [rbp-2D0h]\n  __int64 v334; // [rsp+220h] [rbp-2C8h]\n  __int64 v335; // [rsp+228h] [rbp-2C0h]\n  __int64 v336; // [rsp+230h] [rbp-2B8h]\n  __int64 v337; // [rsp+238h] [rbp-2B0h]\n  __int64 v338; // [rsp+240h] [rbp-2A8h]\n  __int64 v339; // [rsp+248h] [rbp-2A0h]\n  __int64 v340; // [rsp+250h] [rbp-298h]\n  __int64 v341; // [rsp+258h] [rbp-290h]\n  unsigned __int64 v342; // [rsp+260h] [rbp-288h]\n  __int64 v343; // [rsp+268h] [rbp-280h]\n  __int64 v344; // [rsp+270h] [rbp-278h]\n  __int64 v345; // [rsp+278h] [rbp-270h]\n  unsigned __int64 v346; // [rsp+280h] [rbp-268h]\n  __int64 v347; // [rsp+288h] [rbp-260h]\n  __int128 v348; // [rsp+290h] [rbp-258h]\n  __int128 v349; // [rsp+2A0h] [rbp-248h]\n  __int128 v350; // [rsp+2B0h] [rbp-238h]\n  __int128 v351; // [rsp+2C0h] [rbp-228h]\n  __int64 v352; // [rsp+2D0h] [rbp-218h]\n  char v353[4]; // [rsp+2D8h] [rbp-210h]\n  int v354; // [rsp+2DCh] [rbp-20Ch]\n  __int128 v355; // [rsp+2E0h] [rbp-208h]\n  __int128 v356; // [rsp+2F0h] [rbp-1F8h]\n  __int128 v357; // [rsp+300h] [rbp-1E8h]\n  __int128 v358; // [rsp+310h] [rbp-1D8h]\n  int v359; // [rsp+320h] [rbp-1C8h]\n  int v360[3]; // [rsp+324h] [rbp-1C4h]\n  int v361; // [rsp+330h] [rbp-1B8h]\n  int v362; // [rsp+334h] [rbp-1B4h]\n  int v363; // [rsp+338h] [rbp-1B0h]\n  int v364; // [rsp+348h] [rbp-1A0h]\n  int v365[2]; // [rsp+34Ch] [rbp-19Ch]\n  char v366[16]; // [rsp+354h] [rbp-194h]\n  char v367; // [rsp+364h] [rbp-184h]\n  int v368; // [rsp+378h] [rbp-170h]\n  int v369[5]; // [rsp+37Ch] [rbp-16Ch]\n  int v370; // [rsp+390h] [rbp-158h]\n  int v371[85]; // [rsp+394h] [rbp-154h]\n\n  v248 = a1;\n  v252 = a3;\n  v245 = a2;\n  v310 = *((_QWORD *)off_49F6D0 + 1771);\n  v4 = *((signed int *)off_49F6D0 + 3);\n  v265 = *((signed int *)off_49F6D0 + 18177);\n  v5 = *((signed int *)off_49F6D0 + 18178);\n  v6 = *((unsigned int *)off_49F6D0 + 18178);\n  v256 = *((signed int *)off_49F6D0 + 18175);\n  if ( v5 >= 0 )\n  {\n    v7 = (unsigned int)(v5 + 1);\n    v8 = -1;\n    v9 = &v359;\n    do\n    {\n      sub_437200(v4, -1, v8++, 0, v9);\n      v9 += 6;\n      --v7;\n    }\n    while ( v7 );\n  }\n  v10 = 0;\n  sub_437200(v4, 0, -1, 0, &v306);\n  v11 = v359;\n  v311 = dest;\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( v306 )\n      v10 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v307);\n    v12 = (signed int)v6 / 2;\n    v240 = 1;\n    v233 = 1;\n    if ( (signed int)v6 >= 2 )\n    {\n      if ( (v5 & 0xFFFFFFFE) == 2 )\n      {\n        v233 = 1;\n        v13 = 0LL;\n        if ( !(v12 & 1) )\n          goto LABEL_24;\n        goto LABEL_20;\n      }\n      v14 = v366;\n      v233 = 1;\n      v13 = 0LL;\n      do\n      {\n        v15 = 0;\n        if ( *((_DWORD *)v14 - 7) )\n          v15 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *((signed int *)v14 - 6));\n        v234 = v15 & v233;\n        v13 += 2LL;\n        if ( *((_DWORD *)v14 - 1) )\n          v16 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *(signed int *)v14);\n        else\n          v16 = 0;\n        v233 = v16 & v234;\n        v14 += 48;\n      }\n      while ( (unsigned int)v12 - (unsigned __int64)(v12 & 1) != v13 );\n      if ( v12 & 1 )\n      {\nLABEL_20:\n        v17 = v13 + 1;\n        if ( *(&v359 + 6 * v17) )\n          v18 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v360[6 * v17]);\n        else\n          v18 = 0;\n        v233 &= v18;\n        goto LABEL_24;\n      }\n    }\nLABEL_24:\n    if ( v12 < (signed int)v6 )\n    {\n      v19 = v12;\n      v20 = ((_BYTE)v5 - (_BYTE)v12) & 1;\n      if ( v5 - 1 == v12 )\n      {\n        v240 = 1;\n        if ( !(((_BYTE)v5 - (_BYTE)v12) & 1) )\n          goto LABEL_39;\n      }\n      else\n      {\n        v21 = &v366[24 * v12];\n        v240 = 1;\n        do\n        {\n          v22 = 0;\n          v23 = 0;\n          if ( *((_DWORD *)v21 - 7) )\n            v23 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *((signed int *)v21 - 6));\n          v241 = v23 & v240;\n          v19 += 2LL;\n          if ( *((_DWORD *)v21 - 1) )\n            v22 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *(signed int *)v21);\n          v240 = v22 & v241;\n          v21 += 48;\n        }\n        while ( v5 - v20 != v19 );\n        if ( !v20 )\n          goto LABEL_39;\n      }\n      v24 = v19 + 1;\n      if ( *(&v359 + 6 * v24) )\n        v25 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v360[6 * v24]);\n      else\n        v25 = 0;\n      v240 &= v25;\n    }\nLABEL_39:\n    if ( v359 )\n      v11 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v360[0]);\n    else\n      v11 = 0;\n    v239 = v10;\n    goto LABEL_43;\n  }\n  v239 = v306;\n  v240 = v363;\n  v233 = v363;\nLABEL_43:\n  if ( v245 )\n    *v245 = v239;\n  if ( v252 )\n    *v252 = v233 != 0 && v240 != 0;\n  v257 = v256 - 1;\n  if ( v248 )\n    *v248 = v11;\n  v244 = v239 != 0 && v240 != 0;\n  v26 = v244 && v11 != 0;\n  v294 = (signed int)v265 / 2;\n  v27 = (signed int)v265 / 2;\n  v293 = (signed int)v5 / 2;\n  v28 = (signed int)v5 / 2;\n  v29 = 5;\n  v30 = 5;\n  if ( (_DWORD)v265 == 8 )\n    v30 = 17;\n  v291 = v30;\n  v289 = 6 - ((_DWORD)v265 == 8);\n  if ( (_DWORD)v5 == 8 )\n    v29 = 17;\n  v292 = v29;\n  v290 = 6 - ((_DWORD)v5 == 8);\n  v305 = (unsigned int)(1 - v28);\n  v31 = *((_DWORD *)off_49F6D0 + 18173) >> 31;\n  v295 = *((_DWORD *)off_49F6D0 + 18173);\n  v32 = (v295 + v31) >> 1;\n  v236 = v26;\n  v243 = v26 && v233 != 0;\n  v33 = 1LL;\n  v282 = v28 - 1;\n  if ( v28 - 1 > 0 )\n    v33 = v28 - 1;\n  v34 = 1LL;\n  v332 = v27 - 1;\n  if ( v27 - 1 > 0 )\n    v34 = v27 - 1;\n  v35 = (unsigned int)v265 & 0xFFFFFFF8;\n  v286 = v35;\n  v331 = v35 - 8;\n  v36 = (unsigned __int64)(v35 - 8) >> 3;\n  v37 = ((_BYTE)v36 + 1) & 1;\n  v330 = v37;\n  v325 = v37 - 1 - v36;\n  v38 = (unsigned int)v6 & 0xFFFFFFF0;\n  v343 = v38;\n  v342 = v38 - 16;\n  v39 = (unsigned __int64)(v38 - 16) >> 4;\n  v40 = ((_BYTE)v39 + 1) & 3;\n  v344 = v40 - 1 - v39;\n  v340 = (unsigned int)v6 & 0xFFFFFFF8;\n  v339 = v340 - 8;\n  v338 = ((unsigned __int8)((unsigned __int64)(v340 - 8) >> 3) + 1) & 1;\n  v346 = v338 - 1 - ((unsigned __int64)(v340 - 8) >> 3);\n  v296 = v34;\n  v322 = v34 & 0x7FFFFFFFFFFFFFFCLL;\n  v321 = (v34 & 0x7FFFFFFFFFFFFFFCLL) - 4;\n  v320 = ((unsigned __int8)(v321 >> 2) + 1) & 1;\n  v317 = v320 - 1 - (v321 >> 2);\n  v297 = v33;\n  v323 = v33 & 0x7FFFFFFFFFFFFFFCLL;\n  v41 = (v33 & 0x7FFFFFFFFFFFFFFCLL) - 4;\n  v319 = v41;\n  v41 >>= 2;\n  v318 = ((_BYTE)v41 + 1) & 1;\n  v316 = v318 - 1 - v41;\n  *(_QWORD *)&v348 = v32;\n  v333 = v6 & 1;\n  v324 = v6 - v333;\n  v347 = (unsigned int)(1 - v27);\n  v42 = _mm_shuffle_epi32(_mm_cvtsi32_si128(1 - (signed int)v27), 0);\n  v337 = 32 * v257;\n  v336 = (__int64)&unk_490CD0 + 64 * v257;\n  v341 = v40;\n  v345 = -v40;\n  v43 = _mm_cmpeq_epi32(a4, a4);\n  v44 = _mm_load_si128((const __m128i *)&xmmword_489740);\n  v45 = _mm_load_si128((const __m128i *)&xmmword_489750);\n  v46 = _mm_load_si128((const __m128i *)&xmmword_489780);\n  v335 = v362;\n  v334 = v361;\n  v313 = v27 - 2;\n  v288 = 2 * v265;\n  v287 = 2 * v5;\n  v312 = v28 - 2;\n  v304 = (char *)off_49F6D0 + 9640;\n  v303 = (char *)off_49F6D0 + 9528;\n  v302 = (char *)off_49F6D0 + 9544;\n  v301 = (char *)off_49F6D0 + 9040;\n  v300 = (char *)off_49F6D0 + 9016;\n  v329 = (const __m128i *)((char *)&v356 + 4 * v27);\n  v315 = (signed int)v265 / 2;\n  v327 = &v353[4 * v27];\n  v328 = (const __m128i *)((char *)&v350 + 4 * v28);\n  v314 = (signed int)v5 / 2;\n  v326 = (__int128 *)((char *)&v348 + 4 * v28 + 8);\n  v299 = (char *)off_49F6D0 + 10264;\n  v249 = off_49F6D0;\n  v298 = (char *)off_49F6D0 + 10040;\n  v47 = 0LL;\n  v283 = v4;\n  v284 = v5;\n  v285 = v6;\n  do\n  {\n    v54 = *(_QWORD *)(qword_4F9E30 + 6464);\n    v246 = v47;\n    v55 = *(_QWORD *)(v54 + 8 * v47);\n    v253 = *(_QWORD *)(v54 + 8 * v47);\n    if ( v295 >= 2 )\n    {\n      v263 = v309;\n      v261 = v308;\n      v56 = v249[18170];\n      v258 = v336;\n      v57 = v337;\n      v58 = 0LL;\n      do\n      {\n        *((_QWORD *)&v348 + 1) = v58;\n        v59 = -4LL;\n        do\n        {\n          v60 = (unsigned __int8)byte_490BB4[v57 + v59];\n          v61 = (unsigned __int8)byte_490B54[v57 + v59];\n          LOWORD(v62) = v56;\n          switch ( (unsigned __int64)*(unsigned int *)(v258 + 4 * v59 + 16) )\n          {\n            case 0uLL:\n              v63 = 0;\n              v64 = 0;\n              if ( v239 )\n              {\n                v65 = *(_QWORD *)(v55 + 8 * v263);\n                v64 = *(unsigned __int16 *)(v65 + 2 * (v261 + v61));\n                if ( v61 + 1 < (unsigned __int64)(v61 + 4) )\n                  v64 += *(unsigned __int16 *)(v65 + 2 * (v261 + v61 + 1))\n                       + *(unsigned __int16 *)(v65 + 2 * (v261 + v61) + 4)\n                       + *(unsigned __int16 *)(v65 + 2 * (v261 + v61) + 6);\n              }\n              if ( v233 )\n              {\n                v63 = *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 1)))\n                                          + 2LL * *(&v361 + 6 * (v60 + 1)));\n                if ( v60 + 1 < (unsigned __int64)(v60 + 4) )\n                  v63 += *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 2)))\n                                             + 2LL * *(&v361 + 6 * (v60 + 2)))\n                       + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v369[6 * v60]) + 2LL * *(&v368 + 6 * v60))\n                       + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v371[6 * v60]) + 2LL * *(&v370 + 6 * v60));\n                if ( v233 != 0 && v239 != 0 )\n                  goto LABEL_91;\n              }\n              if ( v239 )\n                goto LABEL_98;\n              LOWORD(v62) = v56;\n              if ( v233 )\n                goto LABEL_94;\n              break;\n            case 1uLL:\n              if ( v239 )\n                goto LABEL_96;\n              LOWORD(v62) = v56;\n              if ( v233 )\n                goto LABEL_82;\n              break;\n            case 2uLL:\n              if ( v240 )\n              {\nLABEL_82:\n                v64 = *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 1)))\n                                          + 2LL * *(&v361 + 6 * (v60 + 1)));\n                if ( v60 + 1 < (unsigned __int64)(v60 + 4) )\n                  v64 += *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 2)))\n                                             + 2LL * *(&v361 + 6 * (v60 + 2)))\n                       + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v369[6 * v60]) + 2LL * *(&v368 + 6 * v60))\n                       + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v371[6 * v60]) + 2LL * *(&v370 + 6 * v60));\n                goto LABEL_98;\n              }\n              LOWORD(v62) = v56;\n              if ( v239 )\n              {\nLABEL_96:\n                v67 = *(_QWORD *)(v55 + 8 * v263);\n                v64 = *(unsigned __int16 *)(v67 + 2 * (v261 + v61));\n                if ( v61 + 1 < (unsigned __int64)(v61 + 4) )\n                  v64 += *(unsigned __int16 *)(v67 + 2 * (v261 + v61 + 1))\n                       + *(unsigned __int16 *)(v67 + 2 * (v261 + v61) + 4)\n                       + *(unsigned __int16 *)(v67 + 2 * (v261 + v61) + 6);\n                goto LABEL_98;\n              }\n              break;\n            case 3uLL:\n              v63 = 0;\n              v64 = 0;\n              if ( v239 )\n              {\n                v66 = *(_QWORD *)(v55 + 8 * v263);\n                v64 = *(unsigned __int16 *)(v66 + 2 * (v261 + v61));\n                if ( v61 + 1 < (unsigned __int64)(v61 + 4) )\n                  v64 += *(unsigned __int16 *)(v66 + 2 * (v261 + v61 + 1))\n                       + *(unsigned __int16 *)(v66 + 2 * (v261 + v61) + 4)\n                       + *(unsigned __int16 *)(v66 + 2 * (v261 + v61) + 6);\n              }\n              if ( !v240 )\n                goto LABEL_235;\n              v63 = *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 1)))\n                                        + 2LL * *(&v361 + 6 * (v60 + 1)));\n              if ( v60 + 1 < (unsigned __int64)(v60 + 4) )\n                v63 += *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * *(&v362 + 6 * (v60 + 2)))\n                                           + 2LL * *(&v361 + 6 * (v60 + 2)))\n                     + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v369[6 * v60]) + 2LL * *(&v368 + 6 * v60))\n                     + *(unsigned __int16 *)(*(_QWORD *)(v55 + 8LL * v371[6 * v60]) + 2LL * *(&v370 + 6 * v60));\n              if ( v244 )\n              {\nLABEL_91:\n                v62 = (v64 + v63 + 4) >> 3;\n              }\n              else\n              {\nLABEL_235:\n                if ( v239 )\n                {\nLABEL_98:\n                  v62 = (v64 + 2) >> 2;\n                }\n                else\n                {\n                  LOWORD(v62) = v56;\n                  if ( v240 )\nLABEL_94:\n                    LOWORD(v62) = (v63 + 2) >> 2;\n                }\n              }\n              break;\n            default:\n              break;\n          }\n          v68 = v60 + 4;\n          v69 = (unsigned __int8)byte_490B54[v57 + v59];\n          v70 = (unsigned __int8)byte_490BB4[v57 + v59];\n          v71 = (char *)&v249[512 * v246];\n          v72 = 32 * v69;\n          v73 = (signed __int64)&v71[v72];\n          *(_WORD *)&v71[2 * v70 + 8504 + v72] = v62;\n          v74 = (unsigned int)v61 + 1LL;\n          if ( v74 < v61 + 4 )\n          {\n            v75 = (signed __int64)&v71[v72 + 8504];\n            *(_WORD *)&v71[32 * v74 + 8504 + 2 * v70] = v62;\n            *(_WORD *)(v75 + 2 * v70 + 64) = v62;\n            *(_WORD *)(v75 + 2 * v70 + 96) = v62;\n          }\n          v76 = v70 + 1;\n          if ( v70 + 1 < v68 )\n          {\n            *(_WORD *)(v73 + 2 * v76 + 8504) = v62;\n            if ( v74 >= v61 + 4 )\n            {\n              *(_WORD *)(v73 + 2 * v70 + 8508) = v62;\n            }\n            else\n            {\n              v77 = (signed __int64)&v71[32 * v74 + 8504];\n              *(_WORD *)(v77 + 2 * v76) = v62;\n              v78 = (signed __int64)&v71[v72 + 8504];\n              *(_WORD *)(v78 + 2 * v76 + 64) = v62;\n              v69 = (unsigned int)v61 + 3LL;\n              v79 = (signed __int64)&v71[32 * v69 + 8504];\n              *(_WORD *)(v79 + 2 * v76) = v62;\n              *(_WORD *)(v78 + 2 * v70 + 4) = v62;\n              *(_WORD *)(v77 + 2 * v70 + 4) = v62;\n              *(_WORD *)(v78 + 2 * v70 + 68) = v62;\n              *(_WORD *)(v79 + 2 * v70 + 4) = v62;\n              *(_WORD *)(v78 + 2 * v70 + 6) = v62;\n              *(_WORD *)(v77 + 2 * v70 + 6) = v62;\n              *(_WORD *)(v78 + 2 * v70 + 70) = v62;\n            }\n            *(_WORD *)&v71[32 * v69 + 8504 + 2 * (v70 + 3)] = v62;\n          }\n          v80 = v59++ == -1;\n          v55 = v253;\n        }\n        while ( !v80 );\n        v58 = *((_QWORD *)&v348 + 1) + 1LL;\n        v57 += 4LL;\n        v258 += 16LL;\n      }\n      while ( *((_QWORD *)&v348 + 1) + 1LL < (signed __int64)v348 );\n    }\n    v81 = v284;\n    v82 = v285;\n    v83 = v343;\n    v84 = v342;\n    v85 = v341;\n    if ( v239 == 0 || (signed int)v265 <= 0 )\n      goto LABEL_136;\n    v86 = *(_QWORD *)(v253 + 8LL * v309);\n    v87 = v308;\n    if ( (unsigned int)v265 >= 8 )\n    {\n      if ( v331 )\n      {\n        v89 = v86 + 2LL * v308 + 24;\n        v90 = v325;\n        v48 = 0LL;\n        do\n        {\n          v91 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v89 + 2 * v48 - 16)), (__m128i)0LL);\n          _mm_store_si128(\n            (__m128i *)((char *)&v355 + 4 * v48),\n            _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v86 + 2 * v87 + 2 * v48)), (__m128i)0LL));\n          _mm_store_si128((__m128i *)((char *)&v356 + 4 * v48), v91);\n          v92 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v89 + 2 * v48)), (__m128i)0LL);\n          _mm_store_si128(\n            (__m128i *)((char *)&v357 + 4 * v48),\n            _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v89 + 2 * v48 - 8)), (__m128i)0LL));\n          _mm_store_si128((__m128i *)((char *)&v358 + 4 * v48), v92);\n          v48 += 16LL;\n          v90 += 2LL;\n        }\n        while ( v90 );\n        if ( v330 )\n          goto LABEL_115;\n      }\n      else\n      {\n        v48 = 0LL;\n        if ( v330 )\n        {\nLABEL_115:\n          v93 = _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v86 + 2 * (v48 + v87) + 8)), (__m128i)0LL);\n          _mm_store_si128(\n            (__m128i *)((char *)&v355 + 4 * v48),\n            _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v86 + 2 * (v48 + v87))), (__m128i)0LL));\n          _mm_store_si128((__m128i *)((char *)&v356 + 4 * v48), v93);\n          goto LABEL_116;\n        }\n      }\nLABEL_116:\n      v88 = v286;\n      if ( v286 == (unsigned int)v265 )\n        goto LABEL_119;\n      goto LABEL_117;\n    }\n    v88 = 0LL;\nLABEL_117:\n    v94 = v86 + 2 * v87;\n    do\n    {\n      *((_DWORD *)&v355 + v88) = *(unsigned __int16 *)(v94 + 2 * v88);\n      ++v88;\n    }\n    while ( (unsigned int)v265 != v88 );\nLABEL_119:\n    if ( (signed int)v265 > 0 )\n    {\n      v95 = v303;\n      v96 = v302;\n      v97 = v304;\n      v98 = 0LL;\n      while ( 1 )\n      {\n        if ( (signed int)v81 <= 0 )\n          goto LABEL_135;\n        v99 = *((unsigned __int16 *)&v355 + 2 * v98);\n        if ( (unsigned int)v82 < 0x10 )\n        {\n          v100 = 0LL;\nLABEL_133:\n          v106 = &v95[2 * v100];\n          v107 = v82 - v100;\n          do\n          {\n            *(_WORD *)v106 = v99;\n            v106 += 2;\n            --v107;\n          }\n          while ( v107 );\n          goto LABEL_135;\n        }\n        v101 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128(v99), 224), 0);\n        if ( v84 < 0x30 )\n          break;\n        v103 = v344;\n        v102 = 0LL;\n        do\n        {\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 112], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 96], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 80], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 64], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 48], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 32], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102 - 16], v101);\n          _mm_storeu_si128((__m128i *)&v97[2 * v102], v101);\n          v102 += 64LL;\n          v103 += 4LL;\n        }\n        while ( v103 );\n        if ( v85 )\n          goto LABEL_130;\nLABEL_132:\n        v100 = v83;\n        if ( v83 != v82 )\n          goto LABEL_133;\nLABEL_135:\n        ++v98;\n        v97 += 32;\n        v96 += 32;\n        v95 += 32;\n        if ( v98 == (unsigned int)v265 )\n          goto LABEL_136;\n      }\n      v102 = 0LL;\n      if ( !v85 )\n        goto LABEL_132;\nLABEL_130:\n      v104 = v345;\n      v105 = v96;\n      do\n      {\n        _mm_storeu_si128((__m128i *)&v105[2 * v102 - 16], v101);\n        _mm_storeu_si128((__m128i *)&v105[2 * v102], v101);\n        v105 += 32;\n        ++v104;\n      }\n      while ( v104 );\n      goto LABEL_132;\n    }\nLABEL_136:\n    v108 = v340;\n    v109 = v339;\n    v110 = v338;\n    v111 = v253;\n    if ( v233 == 0 || v240 == 0 )\n      goto LABEL_160;\n    if ( (signed int)v81 > 0 )\n    {\n      if ( (_DWORD)v82 == 1 )\n      {\n        v112 = 0LL;\n        if ( v333 )\n          goto LABEL_144;\n      }\n      else\n      {\n        v113 = &v367;\n        v112 = 0LL;\n        v114 = v324;\n        do\n        {\n          *((_DWORD *)&v349 + v112) = *(unsigned __int16 *)(*(_QWORD *)(v253 + 8LL * *((signed int *)v113 - 6))\n                                                          + 2LL * *((signed int *)v113 - 7));\n          *((_DWORD *)&v349 + v112 + 1) = *(unsigned __int16 *)(*(_QWORD *)(v253 + 8LL * *(signed int *)v113)\n                                                              + 2LL * *((signed int *)v113 - 1));\n          v112 += 2LL;\n          v113 += 48;\n        }\n        while ( v114 != v112 );\n        if ( v333 )\n        {\nLABEL_144:\n          *((_DWORD *)&v349 + v112) = *(unsigned __int16 *)(*(_QWORD *)(v253 + 8LL * v365[6 * v112])\n                                                          + 2LL * *(&v364 + 6 * v112));\n          goto LABEL_145;\n        }\n      }\n    }\nLABEL_145:\n    if ( (signed int)v265 > 0 )\n    {\n      v115 = v300;\n      v116 = v301;\n      v117 = 0LL;\n      do\n      {\n        if ( (signed int)v81 <= 0 )\n          goto LABEL_159;\n        if ( (unsigned int)v82 < 8 )\n        {\n          v119 = 0LL;\n          do\n          {\nLABEL_158:\n            *(_WORD *)&v115[2 * v119] = *((_WORD *)&v349 + 2 * v119);\n            ++v119;\n          }\n          while ( v82 != v119 );\n          goto LABEL_159;\n        }\n        if ( v109 )\n        {\n          v120 = v346;\n          v118 = 0LL;\n          do\n          {\n            _mm_storeu_si128(\n              (__m128i *)&v116[2 * v118 - 24],\n              _mm_unpacklo_epi64(\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v349 + 4 * v118), 232), 232),\n                  232),\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v350 + 4 * v118), 232), 232),\n                  232)));\n            _mm_storeu_si128(\n              (__m128i *)&v116[2 * v118 - 8],\n              _mm_unpacklo_epi64(\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v351 + 4 * v118), 232), 232),\n                  232),\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v352 + 4 * v118), 232), 232),\n                  232)));\n            v118 += 16LL;\n            v120 += 2LL;\n          }\n          while ( v120 );\n          if ( v110 )\n          {\nLABEL_156:\n            _mm_storeu_si128(\n              (__m128i *)&v249[512 * v246 + 2254 + 8 * v117 + v118 / 2],\n              _mm_unpacklo_epi64(\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v349 + 4 * v118), 232), 232),\n                  232),\n                _mm_shuffle_epi32(\n                  _mm_shufflehi_epi16(_mm_shufflelo_epi16(*(__m128i *)((char *)&v350 + 4 * v118), 232), 232),\n                  232)));\n            v111 = v253;\n            goto LABEL_157;\n          }\n        }\n        else\n        {\n          v118 = 0LL;\n          if ( v110 )\n            goto LABEL_156;\n        }\nLABEL_157:\n        v119 = v108;\n        if ( v108 != v82 )\n          goto LABEL_158;\nLABEL_159:\n        ++v117;\n        v116 += 32;\n        v115 += 32;\n      }\n      while ( v117 != (unsigned int)v265 );\n    }\nLABEL_160:\n    if ( !v243 )\n      goto LABEL_199;\n    v121 = *(unsigned __int16 *)(*(_QWORD *)(v111 + 8 * v335) + 2 * v334);\n    v122 = v294 * (*(&v354 + v265) - v121);\n    if ( (signed int)v265 < 4 )\n    {\n      v124 = v282;\n      goto LABEL_173;\n    }\n    if ( v296 >= 4 )\n    {\n      v125 = _mm_cvtsi32_si128(v122);\n      v124 = v282;\n      v126 = (__m128)_mm_slli_si128((__m128i)1uLL, 8);\n      if ( v321 )\n      {\n        v127 = v317;\n        v128 = 0LL;\n        v129 = v329;\n        v50 = (__m128)xmmword_489730;\n        do\n        {\n          v130 = _mm_sub_epi32(\n                   _mm_loadu_si128(v129 - 1),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v329[v128 - 2] - 4)), 27));\n          v131 = (__m128i)_mm_shuffle_ps(v126, v50, 136);\n          v132 = _mm_sub_epi32(v131, v43);\n          v133 = _mm_sub_epi32(\n                   _mm_loadu_si128(v129),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v329[v128 - 3] - 4)), 27));\n          v134 = _mm_add_epi32(v131, v44);\n          v125 = _mm_add_epi32(\n                   _mm_unpacklo_epi32(\n                     _mm_shuffle_epi32(_mm_mul_epu32(v133, v134), 232),\n                     _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v134, 245), _mm_shuffle_epi32(v133, 245)), 232)),\n                   _mm_add_epi32(\n                     _mm_unpacklo_epi32(\n                       _mm_shuffle_epi32(_mm_mul_epu32(v130, v132), 232),\n                       _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v132, 245), _mm_shuffle_epi32(v130, 245)), 232)),\n                     v125));\n          v126 = (__m128)_mm_add_epi64((__m128i)v126, v45);\n          v50 = (__m128)_mm_add_epi64((__m128i)v50, v45);\n          v129 += 2;\n          v128 -= 2LL;\n          v127 += 2LL;\n        }\n        while ( v127 );\n        v49 = -(v128 * 4);\n        if ( v320 )\n          goto LABEL_169;\n      }\n      else\n      {\n        v49 = 0LL;\n        v50 = (__m128)_mm_load_si128((const __m128i *)&xmmword_489730);\n        if ( v320 )\n        {\nLABEL_169:\n          v135 = _mm_sub_epi32(\n                   _mm_loadu_si128((const __m128i *)((char *)&v355 + 4 * (v49 + v315))),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v352 + 4 * (v313 - v49) + 4)), 27));\n          v136 = _mm_sub_epi32((__m128i)_mm_shuffle_ps(v126, v50, 136), v43);\n          v125 = _mm_add_epi32(\n                   v125,\n                   _mm_unpacklo_epi32(\n                     _mm_shuffle_epi32(_mm_mul_epu32(v135, v136), 232),\n                     _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v136, 245), _mm_shuffle_epi32(v135, 245)), 232)));\n          goto LABEL_170;\n        }\n      }\nLABEL_170:\n      v137 = _mm_add_epi32(_mm_shuffle_epi32(v125, 78), v125);\n      v122 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v137, 229), v137));\n      v123 = v322;\n      if ( v296 == v322 )\n        goto LABEL_173;\n      goto LABEL_171;\n    }\n    v123 = 0LL;\n    v124 = v282;\nLABEL_171:\n    v138 = &v327[-4 * v123];\n    v139 = v123 + 1;\n    do\n    {\n      v140 = v329[-1].m128i_i32[v123++];\n      v122 += v139 * (v140 - *(_DWORD *)v138);\n      v138 -= 4;\n      ++v139;\n    }\n    while ( v123 < v332 );\nLABEL_173:\n    v141 = v293 * (*((_DWORD *)&v348 + v81 + 3) - v121);\n    if ( (signed int)v82 < 4 )\n      goto LABEL_184;\n    if ( v297 >= 4 )\n    {\n      v143 = _mm_cvtsi32_si128(v141);\n      if ( v319 )\n      {\n        v51 = (__m128)_mm_slli_si128((__m128i)1uLL, 8);\n        v144 = v316;\n        v145 = 0LL;\n        v146 = v328;\n        v53 = (__m128)xmmword_489730;\n        do\n        {\n          v147 = _mm_sub_epi32(\n                   _mm_loadu_si128(v146 - 1),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v328[v145 - 2] - 4)), 27));\n          v148 = (__m128i)_mm_shuffle_ps(v51, v53, 136);\n          v149 = _mm_sub_epi32(v148, v43);\n          v150 = _mm_sub_epi32(\n                   _mm_loadu_si128(v146),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v328[v145 - 3] - 4)), 27));\n          v151 = _mm_add_epi32(v148, v44);\n          v143 = _mm_add_epi32(\n                   _mm_unpacklo_epi32(\n                     _mm_shuffle_epi32(_mm_mul_epu32(v150, v151), 232),\n                     _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v151, 245), _mm_shuffle_epi32(v150, 245)), 232)),\n                   _mm_add_epi32(\n                     _mm_unpacklo_epi32(\n                       _mm_shuffle_epi32(_mm_mul_epu32(v147, v149), 232),\n                       _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v149, 245), _mm_shuffle_epi32(v147, 245)), 232)),\n                     v143));\n          v51 = (__m128)_mm_add_epi64((__m128i)v51, v45);\n          v53 = (__m128)_mm_add_epi64((__m128i)v53, v45);\n          v146 += 2;\n          v145 -= 2LL;\n          v144 += 2LL;\n        }\n        while ( v144 );\n        v52 = -(v145 * 4);\n        if ( v318 )\n          goto LABEL_180;\n      }\n      else\n      {\n        v51 = (__m128)_mm_slli_si128((__m128i)1uLL, 8);\n        v52 = 0LL;\n        v53 = (__m128)_mm_load_si128((const __m128i *)&xmmword_489730);\n        if ( v318 )\n        {\nLABEL_180:\n          v152 = _mm_sub_epi32(\n                   _mm_loadu_si128((const __m128i *)((char *)&v349 + 4 * (v52 + v314))),\n                   _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)((char *)&v348 + 4 * (v312 - v52) + 4)), 27));\n          v153 = _mm_sub_epi32((__m128i)_mm_shuffle_ps(v51, v53, 136), v43);\n          v143 = _mm_add_epi32(\n                   v143,\n                   _mm_unpacklo_epi32(\n                     _mm_shuffle_epi32(_mm_mul_epu32(v152, v153), 232),\n                     _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v153, 245), _mm_shuffle_epi32(v152, 245)), 232)));\n          goto LABEL_181;\n        }\n      }\nLABEL_181:\n      v154 = _mm_add_epi32(_mm_shuffle_epi32(v143, 78), v143);\n      v141 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v154, 229), v154));\n      v142 = v323;\n      if ( v297 == v323 )\n        goto LABEL_184;\n      goto LABEL_182;\n    }\n    v142 = 0LL;\nLABEL_182:\n    v155 = (_DWORD *)((char *)v326 - 4 * v142);\n    v156 = v142 + 1;\n    do\n    {\n      v157 = v328[-1].m128i_i32[v142++];\n      v141 += v156 * (v157 - *v155);\n      --v155;\n      ++v156;\n    }\n    while ( v142 < v124 );\nLABEL_184:\n    v158 = (signed int)(v288 + v291 * v122) >> v289;\n    v159 = (signed int)(v287 + v292 * v141) >> v290;\n    if ( (signed int)v82 > 0 )\n    {\n      v160 = 16 * (*(&v354 + v265) + *((_DWORD *)&v348 + v81 + 3));\n      v161 = v160 + 16;\n      v162 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v158), 0);\n      v163 = v159 * v305 + v160 + 16;\n      v164 = v298;\n      v165 = v299;\n      v166 = 0LL;\n      do\n      {\n        if ( (signed int)v265 > 0 )\n        {\n          v167 = v249[18172];\n          if ( (unsigned int)v265 < 8 )\n          {\n            v168 = 0LL;\nLABEL_192:\n            v186 = &v164[32 * v168];\n            v187 = v163 + v158 * (v347 + v168);\n            v188 = (unsigned int)v265 - v168;\n            do\n            {\n              v189 = v187 >> 5;\n              if ( v167 <= v187 >> 5 )\n                v189 = v167;\n              if ( v189 <= 0 )\n                LOWORD(v189) = 0;\n              *(_WORD *)v186 = v189;\n              v186 += 32;\n              v187 += v158;\n              --v188;\n            }\n            while ( v188 );\n            goto LABEL_198;\n          }\n          v169 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v161 + v159 * ((signed int)v305 + (signed int)v166)), 0);\n          v170 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v167), 0);\n          v171 = v286;\n          v172 = v165;\n          v173 = _mm_load_si128((const __m128i *)&xmmword_489770);\n          v174 = _mm_load_si128((const __m128i *)&xmmword_489760);\n          do\n          {\n            v175 = _mm_add_epi32(v42, v174);\n            v176 = _mm_add_epi32(v42, v173);\n            v177 = _mm_shuffle_epi32(v162, 245);\n            v178 = _mm_srai_epi32(\n                     _mm_add_epi32(\n                       _mm_unpacklo_epi32(\n                         _mm_shuffle_epi32(_mm_mul_epu32(v176, v162), 232),\n                         _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v176, 245), v177), 232)),\n                       v169),\n                     5u);\n            v179 = _mm_srai_epi32(\n                     _mm_add_epi32(\n                       _mm_unpacklo_epi32(\n                         _mm_shuffle_epi32(_mm_mul_epu32(v175, v162), 232),\n                         _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(v175, 245), v177), 232)),\n                       v169),\n                     5u);\n            v180 = _mm_cmpgt_epi32(v179, v170);\n            v181 = _mm_cmpgt_epi32(v178, v170);\n            v182 = _mm_or_si128(_mm_andnot_si128(v181, v178), _mm_and_si128(v170, v181));\n            v183 = _mm_or_si128(_mm_andnot_si128(v180, v179), _mm_and_si128(v170, v180));\n            v184 = _mm_srai_epi32(\n                     _mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v183, (__m128i)0LL), v183), 0x10u),\n                     0x10u);\n            v185 = _mm_srai_epi32(\n                     _mm_slli_epi32(_mm_and_si128(_mm_cmpgt_epi32(v182, (__m128i)0LL), v182), 0x10u),\n                     0x10u);\n            *(v172 - 112) = _mm_extract_epi16(v185, 0);\n            *(v172 - 96) = _mm_extract_epi16(v185, 2);\n            *(v172 - 80) = _mm_extract_epi16(v185, 4);\n            *(v172 - 64) = _mm_extract_epi16(v185, 6);\n            *(v172 - 48) = _mm_extract_epi16(v184, 0);\n            *(v172 - 32) = _mm_extract_epi16(v184, 2);\n            *(v172 - 16) = _mm_extract_epi16(v184, 4);\n            *v172 = _mm_extract_epi16(v184, 6);\n            v173 = _mm_add_epi32(v173, v46);\n            v174 = _mm_add_epi32(v174, v46);\n            v172 += 128;\n            v171 -= 8LL;\n          }\n          while ( v171 );\n          v168 = v286;\n          if ( v286 != (unsigned int)v265 )\n            goto LABEL_192;\n        }\nLABEL_198:\n        ++v166;\n        v165 += 2;\n        v164 += 2;\n        v163 += v159;\n      }\n      while ( v166 != v82 );\n    }\nLABEL_199:\n    v47 = v246 + 1;\n    v304 += 2048;\n    v302 += 2048;\n    v303 += 2048;\n    v301 += 2048;\n    v300 += 2048;\n    v299 += 2048;\n    v298 += 2048;\n    v190 = v283;\n  }\n  while ( v246 != 1 );\n  result = (signed __int64)v311;\n  if ( v311[616] )\n    return result;\n  if ( (signed int)v82 > 0 )\n  {\n    v192 = &v359;\n    v193 = 0LL;\n    do\n    {\n      sub_437200(v283, 0, v193++, 0, v192);\n      v192 += 6;\n    }\n    while ( v82 != v193 );\n  }\n  v238 = v233 == 0 || v240 == 0;\n  v237 = v233 == 0 || !v236;\n  v194 = 0LL;\n  v235 = 0x7FFFFFFF;\n  v242 = 8606LL;\n  v264 = 10654LL;\n  v262 = 0;\n  v195 = v239;\n  v196 = v265;\n  while ( 2 )\n  {\n    v247 = v194;\n    if ( (*((_DWORD *)dest + 605) != 1 || v194 == 0) == 1 && (v194 != 2 || v195 != 0) )\n    {\n      v197 = v194 & 0x7FFFFFFF;\n      if ( (v247 & 0x7FFFFFFF) == 3 )\n      {\n        if ( v237 )\n          goto LABEL_210;\n      }\n      else if ( v197 == 1 && v238 )\n      {\n        goto LABEL_210;\n      }\n      if ( (signed int)v81 <= 0 )\n      {\n        v202 = 0;\n      }\n      else\n      {\n        v199 = *(_QWORD *)qword_4F9E88;\n        v200 = 0LL;\n        v201 = v242;\n        v202 = 0;\n        do\n        {\n          v250 = v201;\n          v254 = v200 + 4;\n          if ( (signed int)v265 > 0 )\n          {\n            v259 = &v362 + 6 * v200;\n            v203 = &v362 + 6 * (v200 | 1);\n            v204 = &v362 + 6 * (v200 | 3);\n            v205 = 0LL;\n            do\n            {\n              v206 = *(_QWORD *)(v199 + 8LL * *v259);\n              v207 = v205 + *(v259 - 1);\n              v266 = *(unsigned __int16 *)(v206 + 2 * v207) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 102);\n              v267 = *(unsigned __int16 *)(v206 + 2 * v207 + 2) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 70);\n              v268 = *(unsigned __int16 *)(v206 + 2 * v207 + 4) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 38);\n              v269 = *(unsigned __int16 *)(v206 + 2 * v207 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 6);\n              v208 = *(_QWORD *)(v199 + 8LL * *v203);\n              v209 = v205 + *(v203 - 1);\n              v270 = *(unsigned __int16 *)(v208 + 2 * v209) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 100);\n              v271 = *(unsigned __int16 *)(v208 + 2 * v209 + 2) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 68);\n              v272 = *(unsigned __int16 *)(v208 + 2 * v209 + 4) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 36);\n              v273 = *(unsigned __int16 *)(v208 + 2 * v209 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 4);\n              v210 = *(_QWORD *)(v199 + 8LL * v203[6]);\n              v211 = v205 + v203[5];\n              v274 = *(unsigned __int16 *)(v210 + 2 * v211) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 98);\n              v275 = *(unsigned __int16 *)(v210 + 2 * v211 + 2) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 66);\n              v276 = *(unsigned __int16 *)(v210 + 2 * v211 + 4) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 34);\n              v277 = *(unsigned __int16 *)(v210 + 2 * v211 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 2);\n              v212 = *(_QWORD *)(v199 + 8LL * *v204);\n              v213 = v205 + *(v204 - 1);\n              v278 = *(unsigned __int16 *)(v212 + 2 * v213) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 96);\n              v279 = *(unsigned __int16 *)(v212 + 2 * v213 + 2) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 64);\n              v280 = *(unsigned __int16 *)(v212 + 2 * v213 + 4) - *(unsigned __int16 *)((char *)off_49F6D0 + v201 - 32);\n              v214 = v205 + 4;\n              v281 = *(unsigned __int16 *)(v212 + 2 * v213 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v201);\n              v196 = v265;\n              v202 += sub_445CD0(&v266, *((_DWORD *)dest + 6));\n              v201 += 128LL;\n              v205 = v214;\n            }\n            while ( (signed int)v265 > (signed int)v214 );\n          }\n          v201 = v250 + 8;\n          v200 = v254;\n        }\n        while ( (signed int)v285 > (signed int)v254 );\n        v190 = v283;\n        if ( (signed int)v284 > 0 )\n        {\n          v215 = *(_QWORD *)(qword_4F9E88 + 8);\n          v216 = v264;\n          v217 = 0LL;\n          do\n          {\n            v251 = v216;\n            v255 = v217 + 4;\n            if ( v196 > 0 )\n            {\n              v260 = &v362 + 6 * v217;\n              v218 = &v362 + 6 * (v217 | 1);\n              v219 = &v362 + 6 * (v217 | 3);\n              v220 = v216;\n              v221 = 0LL;\n              do\n              {\n                v222 = *(_QWORD *)(v215 + 8LL * *v260);\n                v223 = v221 + *(v260 - 1);\n                v266 = *(unsigned __int16 *)(v222 + 2 * v223) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 102);\n                v267 = *(unsigned __int16 *)(v222 + 2 * v223 + 2)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 70);\n                v268 = *(unsigned __int16 *)(v222 + 2 * v223 + 4)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 38);\n                v269 = *(unsigned __int16 *)(v222 + 2 * v223 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 6);\n                v224 = *(_QWORD *)(v215 + 8LL * *v218);\n                v225 = v221 + *(v218 - 1);\n                v270 = *(unsigned __int16 *)(v224 + 2 * v225) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 100);\n                v271 = *(unsigned __int16 *)(v224 + 2 * v225 + 2)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 68);\n                v272 = *(unsigned __int16 *)(v224 + 2 * v225 + 4)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 36);\n                v273 = *(unsigned __int16 *)(v224 + 2 * v225 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 4);\n                v226 = *(_QWORD *)(v215 + 8LL * v218[6]);\n                v227 = v221 + v218[5];\n                v274 = *(unsigned __int16 *)(v226 + 2 * v227) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 98);\n                v275 = *(unsigned __int16 *)(v226 + 2 * v227 + 2)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 66);\n                v276 = *(unsigned __int16 *)(v226 + 2 * v227 + 4)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 34);\n                v277 = *(unsigned __int16 *)(v226 + 2 * v227 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 2);\n                v228 = *(_QWORD *)(v215 + 8LL * *v219);\n                v229 = v221 + *(v219 - 1);\n                v278 = *(unsigned __int16 *)(v228 + 2 * v229) - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 96);\n                v279 = *(unsigned __int16 *)(v228 + 2 * v229 + 2)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 64);\n                v280 = *(unsigned __int16 *)(v228 + 2 * v229 + 4)\n                     - *(unsigned __int16 *)((char *)off_49F6D0 + v220 - 32);\n                v230 = v221 + 4;\n                v281 = *(unsigned __int16 *)(v228 + 2 * v229 + 6) - *(unsigned __int16 *)((char *)off_49F6D0 + v220);\n                v196 = v265;\n                v202 += sub_445CD0(&v266, *((_DWORD *)dest + 6));\n                v220 += 128LL;\n                v221 = v230;\n              }\n              while ( (signed int)v265 > (signed int)v230 );\n            }\n            v216 = v251 + 8;\n            v217 = v255;\n            v190 = v283;\n          }\n          while ( (signed int)v285 > (signed int)v255 );\n        }\n      }\n      v231 = v235;\n      v198 = v247;\n      v232 = v262;\n      if ( v202 < v235 )\n        v232 = v247;\n      v262 = v232;\n      if ( v202 <= v235 )\n        v231 = v202;\n      v235 = v231;\n      LODWORD(v81) = v284;\n      v195 = v239;\n    }\n    else\n    {\nLABEL_210:\n      v198 = v247;\n    }\n    v194 = v198 + 1;\n    v242 += 512LL;\n    v264 += 512LL;\n    if ( v194 != 4 )\n      continue;\n    break;\n  }\n  result = 632 * v190;\n  *(_DWORD *)(v310 + 632 * v190 + 524) = v262;\n  return result;\n}\n", 
            "funcStartAddr": "0x42feb0L", 
            "funcEndAddr": "0x431de0L", 
            "funcName": "sub_42FEB0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 sub_431DE0()\n{\n  __int64 v0; // rdi\n  __int64 v1; // rsi\n  __int64 v2; // rcx\n  __int64 v3; // rax\n  __int64 v4; // rdx\n  __int64 v5; // r8\n  __int64 v6; // rdi\n  _BOOL8 result; // rax\n\n  v0 = **(_QWORD **)(qword_4F9E30 + 6480);\n  v1 = *((signed int *)off_49F6D0 + 36);\n  v2 = *((signed int *)off_49F6D0 + 37);\n  v3 = *(_QWORD *)(v0 + 8 * v1);\n  if ( *(_WORD *)(v3 + 2 * v2)\n    || (v4 = *(_QWORD *)(v0 + 8 * v1 + 8), *(_WORD *)(v4 + 2 * v2))\n    || (v5 = *(_QWORD *)(v0 + 8 * v1 + 16), *(_WORD *)(v5 + 2 * v2))\n    || (v6 = *(_QWORD *)(v0 + 8 * v1 + 24), *(_WORD *)(v6 + 2 * v2))\n    || *(_WORD *)(v3 + 2 * v2 + 2)\n    || *(_WORD *)(v4 + 2 * v2 + 2)\n    || *(_WORD *)(v5 + 2 * v2 + 2)\n    || *(_WORD *)(v6 + 2 * v2 + 2)\n    || *(_WORD *)(v3 + 2 * v2 + 4)\n    || *(_WORD *)(v4 + 2 * v2 + 4)\n    || *(_WORD *)(v5 + 2 * v2 + 4)\n    || *(_WORD *)(v6 + 2 * v2 + 4)\n    || *(_WORD *)(v3 + 2 * v2 + 6)\n    || *(_WORD *)(v4 + 2 * v2 + 6)\n    || *(_WORD *)(v5 + 2 * v2 + 6) )\n  {\n    result = 0LL;\n  }\n  else\n  {\n    result = *(_WORD *)(v6 + 2 * v2 + 6) == 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x431de0L", 
            "funcEndAddr": "0x431ea4L", 
            "funcName": "sub_431DE0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_431EB0(_DWORD *a1)\n{\n  int v1; // esi\n  unsigned int v2; // edx\n  signed __int64 result; // rax\n  __int64 v4; // rax\n  signed int v5; // eax\n  int v6; // eax\n  _BOOL4 v7; // ecx\n\n  v1 = *((_DWORD *)off_49F6D0 + 6);\n  v2 = a1[18];\n  if ( v1 == 1 )\n  {\n    if ( v2 )\n    {\n      result = 23LL;\n      if ( (v2 | 4) != 13 )\n      {\n        v4 = (signed int)a1[122];\n        switch ( v2 )\n        {\n          case 1u:\n            result = (unsigned int)dword_490D90[v4];\n            break;\n          case 8u:\n            result = 22LL;\n            break;\n          case 0xAu:\n            result = (unsigned int)(*((_DWORD *)off_49F6D0 + 18095) + 23);\n            break;\n          default:\n            v6 = dword_490DA0[3 * v4 + (signed int)a1[125]];\n            if ( v2 == 2 )\n              result = (unsigned int)(v6 + 4);\n            else\n              result = (unsigned int)(v6 + 5);\n            break;\n        }\n      }\n    }\n    else\n    {\n      result = 0LL;\n    }\n  }\n  else\n  {\n    result = v2;\n    switch ( v2 )\n    {\n      case 8u:\n        if ( *((_DWORD *)dest + 589) || (v7 = sub_431DE0(), result = 5LL, !v7) )\n          result = 4LL;\n        break;\n      case 9u:\n      case 0xDu:\n        result = 6LL;\n        if ( v1 == 2 )\n          result = 0LL;\n        break;\n      case 0xAu:\n        v5 = 6;\n        if ( v1 == 2 )\n          v5 = 0;\n        result = (unsigned int)(*((_DWORD *)off_49F6D0 + 18095) + v5);\n        break;\n      default:\n        return result;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x431eb0L", 
            "funcEndAddr": "0x431f91L", 
            "funcName": "sub_431EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_431FA0(int a1)\n{\n  char *v1; // r9\n  __int64 v2; // r10\n  signed __int64 v3; // r11\n  _DWORD *v4; // r15\n  __int64 v5; // r8\n  _DWORD *v6; // rax\n  int v7; // ecx\n  __int64 v8; // rbp\n  unsigned int v9; // ebx\n  __int64 v10; // rcx\n  int v11; // ebx\n  int v12; // ecx\n  __int64 v13; // rdx\n  int v14; // ebx\n  int v15; // ecx\n  __int64 v16; // rdx\n  __int64 v17; // rsi\n  int v18; // ebx\n  int v19; // edi\n  __int64 v20; // rcx\n  signed __int64 v21; // rbx\n  _DWORD *v22; // r13\n  signed __int64 v23; // r14\n  __int64 v24; // r12\n  unsigned int v25; // ebp\n  signed __int64 v26; // rsi\n  __int64 v28; // [rsp+0h] [rbp-C8h]\n  __int64 v29; // [rsp+8h] [rbp-C0h]\n  int v30; // [rsp+10h] [rbp-B8h]\n  int v31; // [rsp+14h] [rbp-B4h]\n  unsigned int v32; // [rsp+18h] [rbp-B0h]\n  unsigned int v33; // [rsp+1Ch] [rbp-ACh]\n  int v34; // [rsp+50h] [rbp-78h]\n  int v35; // [rsp+54h] [rbp-74h]\n  int v36; // [rsp+58h] [rbp-70h]\n  int v37; // [rsp+5Ch] [rbp-6Ch]\n\n  v1 = (char *)off_49F6D0;\n  v29 = *((_QWORD *)off_49F6D0 + 1770);\n  v2 = *((_QWORD *)off_49F6D0 + 1771);\n  v3 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v4 = (_DWORD *)(v2 + v3);\n  v5 = *(signed int *)(v2 + v3);\n  v6 = dest;\n  v28 = qword_4F9C40[*((signed int *)dest + 591)];\n  v7 = *(_DWORD *)(v2 + v3 + 472);\n  LODWORD(v8) = 0;\n  if ( (v7 == 13 || v7 == 11) && a1 <= 0 )\n  {\n    v9 = (v7 == 13) + 1;\n    v34 = *(_DWORD *)(v2 + v3 + 332);\n    v30 = 0;\n    if ( v7 == 13 )\n    {\n      LODWORD(v8) = 1;\n    }\n    else\n    {\n      v35 = v4[v9 + 83];\n      v31 = (v7 == 13) + 1;\n      LODWORD(v8) = 2;\n      if ( v7 != 13 )\n      {\n        v10 = 2 * v9;\n        v36 = v4[v10 + 83];\n        v32 = 2 * v9;\n        v37 = v4[(v9 | (unsigned int)v10) + 83];\n        v33 = 3 * v9;\n        LODWORD(v8) = 4;\n      }\n    }\n  }\n  v11 = *(_DWORD *)(v2 + v3 + 476);\n  if ( (v11 == 11 || v11 == 13) && (a1 < 0 || a1 == 1) )\n  {\n    v12 = (v11 == 13) + 1;\n    v8 = (signed int)v8;\n    *(&v34 + v8) = *(_DWORD *)(v2 + v3 + 348);\n    *(&v30 + v8) = 4;\n    if ( v11 == 13 )\n    {\n      LODWORD(v8) = v8 + 1;\n    }\n    else\n    {\n      v13 = v12 | 4u;\n      *(&v35 + v8) = v4[v13 + 83];\n      *(&v31 + v8) = v13;\n      v8 += 2LL;\n      if ( v11 != 13 )\n      {\n        *(&v34 + v8) = v4[(2 * v12 | 4) + 83];\n        *(&v30 + v8) = 2 * v12 + 4;\n        *(&v35 + v8) = v4[(v12 | 2 * v12 | 4) + 83];\n        *(&v31 + v8) = 3 * v12 + 4;\n        LODWORD(v8) = v8 + 2;\n      }\n    }\n  }\n  v14 = *(_DWORD *)(v2 + v3 + 480);\n  if ( (v14 == 11 || v14 == 13) && (a1 < 0 || a1 == 2) )\n  {\n    v15 = (v14 == 13) + 1;\n    v8 = (signed int)v8;\n    *(&v34 + v8) = *(_DWORD *)(v2 + v3 + 364);\n    *(&v30 + v8) = 8;\n    if ( v14 == 13 )\n    {\n      LODWORD(v8) = v8 + 1;\n    }\n    else\n    {\n      v16 = v15 | 8u;\n      *(&v35 + v8) = v4[v16 + 83];\n      *(&v31 + v8) = v16;\n      LODWORD(v8) = v8 + 2;\n      if ( v14 != 13 )\n      {\n        v17 = 2 * v15 | 8u;\n        v8 = (signed int)v8;\n        *(&v34 + v8) = v4[v17 + 83];\n        *(&v30 + v8) = v17;\n        *(&v35 + v8) = v4[(v15 | 2 * v15 | 8) + 83];\n        *(&v31 + v8) = v15 + v17;\n        LODWORD(v8) = v8 + 2;\n      }\n    }\n  }\n  v18 = *(_DWORD *)(v2 + v3 + 484);\n  if ( (v18 == 11 || v18 == 13) && (a1 < 0 || a1 == 3) )\n  {\n    v19 = (v18 == 13) + 1;\n    v8 = (signed int)v8;\n    *(&v34 + v8) = *(_DWORD *)(v2 + v3 + 380);\n    *(&v30 + v8) = 12;\n    if ( v18 == 13 )\n    {\n      LODWORD(v8) = v8 + 1;\n    }\n    else\n    {\n      v20 = v19 | 0xCu;\n      *(&v35 + v8) = v4[v20 + 83];\n      *(&v31 + v8) = v20;\n      LODWORD(v8) = v8 + 2;\n      if ( v18 != 13 )\n      {\n        v8 = (signed int)v8;\n        *(&v34 + v8) = v4[(2 * v19 | 0xC) + 83];\n        *(&v30 + v8) = 2 * v19 + 12;\n        *(&v35 + v8) = v4[(v19 | 2 * v19 | 0xC) + 83];\n        *(&v31 + v8) = 3 * v19 + 12;\n        LODWORD(v8) = v8 + 2;\n      }\n    }\n  }\n  if ( (signed int)v8 <= 0 )\n  {\n    v25 = 0;\n  }\n  else\n  {\n    v21 = (signed __int64)&v1[48 * v5 + 14176];\n    v22 = (_DWORD *)(v2 + v3 + 528);\n    v23 = (unsigned int)v8 - 1LL;\n    v24 = 0LL;\n    v25 = 0;\n    while ( 1 )\n    {\n      *v22 = 1;\n      *(_DWORD *)(v21 + 24) = *(&v30 + v24);\n      *(_QWORD *)(v21 + 4) = (unsigned int)*(&v34 + v24);\n      if ( v6[589] )\n      {\n        *(_QWORD *)(v21 + 40) = sub_40B6C0;\n        *(_DWORD *)v21 = 4;\n        v26 = *(_QWORD *)(v29 + 24) + 120LL * *(signed int *)(v28 + 16);\n        (*(void (__fastcall **)(signed __int64, signed __int64))(v26 + 112))(v21, v26);\n      }\n      else\n      {\n        *(_DWORD *)v21 = 4;\n        sub_480310((_DWORD *)v21, (signed int **)(*(_QWORD *)(v29 + 24) + 120LL * *(signed int *)(v28 + 16)));\n      }\n      *(v22 - 122) += *(_DWORD *)(v21 + 12);\n      v25 += *(_DWORD *)(v21 + 12);\n      ++*v4;\n      if ( v23 == v24 )\n        break;\n      ++v24;\n      v21 += 48LL;\n      v6 = dest;\n    }\n  }\n  return v25;\n}\n", 
            "funcStartAddr": "0x431fa0L", 
            "funcEndAddr": "0x43239aL", 
            "funcName": "sub_431FA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4323A0(int a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n    result = (unsigned int)(dword_48A420[a1] + dword_48A440[a1] * a2);\n  else\n    result = (unsigned int)(a1 - 4);\n  return result;\n}\n", 
            "funcStartAddr": "0x4323a0L", 
            "funcEndAddr": "0x4323caL", 
            "funcName": "sub_4323A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4323D0(int a1)\n{\n  int v1; // er10\n  _DWORD *v2; // rbp\n  __int64 v3; // rax\n  __int64 v4; // r15\n  signed __int64 v5; // rsi\n  signed int *v6; // rdi\n  _BOOL4 v7; // ebx\n  signed __int64 v8; // r12\n  int v9; // er11\n  signed __int64 v10; // r14\n  int v11; // er9\n  int v12; // esi\n  signed int v13; // ecx\n  bool v14; // r13\n  signed int v15; // er10\n  signed __int64 v16; // rdx\n  int v17; // ebx\n  signed __int64 v18; // r14\n  char *v19; // r12\n  __int64 v20; // r8\n  __int64 v21; // rdx\n  signed __int64 v22; // r10\n  int v23; // esi\n  int v24; // er13\n  unsigned int v25; // eax\n  int *v26; // r15\n  int v27; // er15\n  int v28; // er13\n  char *v29; // rbp\n  signed __int64 v30; // r14\n  void (__fastcall **v31)(char *, signed __int64); // rbx\n  unsigned int v32; // eax\n  _DWORD *v33; // rbx\n  __int64 v34; // rbx\n  _DWORD *v35; // rdi\n  int v36; // er13\n  signed __int64 v37; // rbp\n  _DWORD *v38; // r14\n  int v39; // eax\n  int *v40; // r12\n  void (__fastcall **v41)(signed __int64, signed __int64); // rbx\n  int v42; // eax\n  signed __int64 v43; // r12\n  __int64 v44; // rcx\n  signed __int64 v45; // rdx\n  _DWORD *v46; // rbx\n  int v47; // eax\n  _DWORD *v48; // rbx\n  signed __int64 v49; // r15\n  __int64 v50; // rax\n  int v51; // eax\n  int v52; // eax\n  bool v53; // cl\n  _DWORD *v54; // rcx\n  int v55; // eax\n  _DWORD *v56; // rbx\n  _BOOL4 v57; // eax\n  unsigned int v58; // er15\n  char *v59; // rbp\n  __int64 v60; // rax\n  __int64 v61; // r14\n  signed __int64 v62; // r12\n  signed __int64 v63; // rbx\n  _DWORD *v64; // rdi\n  __int64 v65; // rcx\n  signed __int64 v66; // rsi\n  signed __int64 v68; // [rsp+8h] [rbp-A0h]\n  signed __int64 v69; // [rsp+10h] [rbp-98h]\n  signed int *v70; // [rsp+18h] [rbp-90h]\n  _DWORD *v71; // [rsp+20h] [rbp-88h]\n  _DWORD *v72; // [rsp+20h] [rbp-88h]\n  _DWORD *v73; // [rsp+20h] [rbp-88h]\n  signed __int64 v74; // [rsp+20h] [rbp-88h]\n  int *v75; // [rsp+28h] [rbp-80h]\n  signed int v76; // [rsp+34h] [rbp-74h]\n  __int64 v77; // [rsp+38h] [rbp-70h]\n  signed __int64 v78; // [rsp+40h] [rbp-68h]\n  __int64 v79; // [rsp+48h] [rbp-60h]\n  __int64 v80; // [rsp+48h] [rbp-60h]\n  void (__fastcall **v81)(signed __int64, signed __int64); // [rsp+50h] [rbp-58h]\n  _BOOL4 v82; // [rsp+58h] [rbp-50h]\n  unsigned int v83; // [rsp+60h] [rbp-48h]\n  int v84; // [rsp+64h] [rbp-44h]\n  __int64 v85; // [rsp+68h] [rbp-40h]\n  __int64 v86; // [rsp+70h] [rbp-38h]\n\n  v1 = a1;\n  v2 = off_49F6D0;\n  v3 = *((signed int *)off_49F6D0 + 3);\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = 632 * v3;\n  v6 = (signed int *)(v4 + 632 * v3);\n  v7 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 3) )\n    v8 = v4 + v5 - 632;\n  else\n    v8 = 0LL;\n  v86 = *((_QWORD *)off_49F6D0 + 1770);\n  v71 = dest;\n  v85 = qword_4F9C40[*((signed int *)dest + 591)];\n  v9 = *(_DWORD *)(v4 + v5 + 72);\n  if ( !v9 )\n  {\n    v7 = 1;\n    if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n      v7 = *(_DWORD *)(v4 + v5 + 460) == 0;\n  }\n  v68 = 632 * v3;\n  v10 = 3LL * *v6;\n  v11 = *((_DWORD *)off_49F6D0 + 18100);\n  v12 = 0;\n  v70 = (signed int *)(v4 + 632 * v3);\n  v84 = v1;\n  v82 = v7;\n  if ( !v11 )\n  {\n    v14 = 0;\n    v76 = 0;\n    goto LABEL_20;\n  }\n  v13 = 0;\n  if ( !(v3 & 1) )\n  {\n    v76 = 1;\n    v14 = 0;\n    goto LABEL_20;\n  }\n  if ( !*(_DWORD *)(v8 + 72) )\n  {\n    if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n    {\n      v15 = 1;\n      if ( *(_DWORD *)(v8 + 460) )\n        goto LABEL_16;\n    }\n    v13 = 1;\n  }\n  v15 = *((_DWORD *)off_49F6D0 + 6);\nLABEL_16:\n  v76 = v13;\n  v16 = 632 * (v3 - 1);\n  v17 = *(_DWORD *)(v4 + v16 + 72);\n  v14 = v15 != 1 && v17 == 0;\n  if ( v15 == 1 && !v17 )\n    v14 = *(_DWORD *)(v4 + v16 + 460) == 0;\n  v6 = (signed int *)(v4 + 632 * v3);\nLABEL_20:\n  v18 = 4 * v10;\n  if ( (unsigned int)(v9 - 9) <= 4 )\n    v12 = dword_490EC0[v9 - 9];\n  v19 = (char *)off_49F6D0 + v18 * 4 + 14176;\n  v75 = (int *)(v4 + v68 + 72);\n  *(_DWORD *)(v4 + v68 + 528) = v12;\n  v20 = *(_QWORD *)(v86 + 24);\n  v21 = *(signed int *)(v85 + 8);\n  v22 = 120 * v21;\n  v69 = v20 + 120 * v21;\n  v23 = v2[6];\n  v77 = v4;\n  v78 = 120 * v21;\n  if ( v23 == 2 )\n  {\n    v24 = 0;\n    v79 = *(_QWORD *)(v86 + 24);\n    if ( !v82 && v11 && v76 )\n    {\n      v25 = *(_DWORD *)(v4 + v68 + 532);\n      *(_QWORD *)&v2[v18 + 3545] = v25;\n      *(_DWORD *)v19 = 2;\n      if ( v71[589] )\n      {\n        *(_QWORD *)&v2[v18 + 3554] = sub_40ABE0;\n        (*(void (__fastcall **)(_DWORD *, signed __int64))(v20 + v22 + 112))(&v2[v18 + 3544], v69);\n        v26 = &v2[v18 + 3547];\n      }\n      else\n      {\n        *(_QWORD *)&v2[v18 + 3552] = sub_47FB70;\n        v2[v18 + 3549] = v25 != 0;\n        v26 = &v2[v18 + 3547];\n        *v26 = 1;\n        sub_480480((__int64)&v2[v18 + 3544], *(signed int **)v69);\n      }\n      v30 = v68;\n      *(_DWORD *)(v77 + v30 + 28) += *v26;\n      v24 = *v26;\n      v6 = v70;\n      ++*v6;\n      v19 += 48;\n      v33 = dest;\n    }\n    else\n    {\n      v30 = 632 * v3;\n      v33 = v71;\n    }\n    *(_QWORD *)(v19 + 4) = (unsigned int)sub_431EB0(v6);\n    *(_DWORD *)v19 = 2;\n    if ( v33[589] )\n      *((_QWORD *)v19 + 5) = sub_40AE60;\n    else\n      *((_QWORD *)v19 + 4) = sub_47FB70;\n    v4 = v77;\n    (*(void (__fastcall **)(char *, signed __int64))(v79 + v78 + 112))(v19, v69);\n    *(_DWORD *)(v4 + v30 + 28) += *((_DWORD *)v19 + 3);\n    v28 = *((_DWORD *)v19 + 3) + v24;\n    v43 = (signed __int64)(v19 + 48);\n    ++*v70;\n    goto LABEL_52;\n  }\n  if ( v71[589] == 1 )\n  {\n    v80 = *(_QWORD *)(v86 + 24);\n    if ( v11 && (v14 || (v3 & 1) == 0) == 1 )\n    {\n      v27 = *(_DWORD *)(v4 + v68 + 532);\n      *(_DWORD *)(v77 + v68 + 532) = sub_468440();\n      sub_40AA50();\n      v6 = v70;\n      *(_DWORD *)(v77 + v68 + 532) = v27;\n      v4 = v77;\n    }\n    v83 = sub_431EB0(v6);\n    v2[v18 + 3545] = v83;\n    v2[v18 + 3546] = *(_DWORD *)(v4 + v68 + 460);\n    *(_DWORD *)v19 = 2;\n    *(_QWORD *)&v2[v18 + 3554] = sub_40AC90;\n    v81 = (void (__fastcall **)(signed __int64, signed __int64))(v80 + v78 + 112);\n    (*v81)((signed __int64)&v2[v18 + 3544], v69);\n    *(_DWORD *)(v4 + v68 + 28) += v2[v18 + 3547];\n    v72 = (_DWORD *)(v4 + v68 + 28);\n    v28 = v2[v18 + 3547];\n    v29 = (char *)&v2[v18 + 3556];\n    ++*v6;\n    sub_40AA50();\n    if ( !v76 || v82 )\n    {\n      v30 = v68;\n      v40 = v75;\n      v31 = (void (__fastcall **)(char *, signed __int64))(v80 + v78 + 112);\n      if ( *v75 )\n      {\nLABEL_70:\n        *(_QWORD *)(v29 + 4) = v83;\n        *(_DWORD *)v29 = 2;\n        *((_QWORD *)v29 + 5) = sub_40AE60;\n        (*v31)(v29, v69);\n        *v72 += *((_DWORD *)v29 + 3);\n        v28 += *((_DWORD *)v29 + 3);\n        v29 += 48;\n        ++*v70;\n        goto LABEL_71;\n      }\n    }\n    else\n    {\n      v30 = v68;\n      v31 = (void (__fastcall **)(char *, signed __int64))(v80 + v78 + 112);\n      if ( *((_DWORD *)off_49F6D0 + 18100) )\n      {\n        v32 = *(_DWORD *)(v4 + v68 + 532);\n        *(_QWORD *)(v19 + 52) = v32;\n        *((_DWORD *)v19 + 12) = 2;\n        if ( *((_DWORD *)dest + 589) )\n        {\n          *((_QWORD *)v19 + 11) = sub_40ABE0;\n          (*v81)((signed __int64)(v19 + 48), v69);\n        }\n        else\n        {\n          *((_QWORD *)v19 + 10) = sub_47FB70;\n          *((_DWORD *)v19 + 17) = v32 != 0;\n          *((_DWORD *)v19 + 15) = 1;\n          sub_480480((__int64)(v19 + 48), *(signed int **)v69);\n        }\n        *v72 += *((_DWORD *)v19 + 15);\n        v28 += *((_DWORD *)v19 + 15);\n        ++*v70;\n        v29 = v19 + 96;\n      }\n      v40 = v75;\n      if ( *v75 )\n        goto LABEL_70;\n    }\n    if ( *((_DWORD *)off_49F6D0 + 6) == 1 && *(_DWORD *)(v4 + v30 + 460) )\n      goto LABEL_70;\n  }\n  else\n  {\n    if ( !v9 && (v23 != 1 || !*(_DWORD *)(v4 + v68 + 460)) )\n    {\n      ++v2[30];\n      if ( v2[18173] >= -3 )\n      {\n        v44 = *((_QWORD *)v2 + 16);\n        v45 = 0LL;\n        while ( 1 )\n        {\n          *(_DWORD *)(**(_QWORD **)(v44 + 8LL * (signed int)v3) + 4 * v45) = 0;\n          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8LL * (signed int)v2[3]) + 8LL) + 4 * v45) = 0;\n          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8LL * (signed int)v2[3]) + 16LL) + 4 * v45) = 0;\n          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8LL * (signed int)v2[3]) + 24LL) + 4 * v45) = 0;\n          if ( v45 >= (signed int)v2[18173] + 3LL )\n            break;\n          ++v45;\n          LODWORD(v3) = v2[3];\n        }\n        LODWORD(v3) = v2[3];\n      }\n      v28 = 0;\n      if ( (_DWORD)v3 != v2[4] )\n      {\n        v29 = (char *)&v2[v18 + 3544];\n        v30 = v68;\n        goto LABEL_53;\n      }\n      *(_QWORD *)&v2[v18 + 3545] = (unsigned int)v2[30];\n      *(_QWORD *)&v2[v18 + 3552] = sub_47FB70;\n      *(_DWORD *)v19 = 2;\n      (*(void (__fastcall **)(_DWORD *, signed __int64))(v20 + v22 + 112))(&v2[v18 + 3544], v69);\n      *(_DWORD *)(v4 + v68 + 28) += v2[v18 + 3547];\n      v28 = v2[v18 + 3547];\n      v30 = v68;\n      ++*v70;\n      v43 = (signed __int64)(v19 + 48);\n      *((_DWORD *)off_49F6D0 + 30) = 0;\nLABEL_52:\n      v29 = (char *)v43;\nLABEL_53:\n      v40 = v75;\n      goto LABEL_71;\n    }\n    *(_QWORD *)&v2[v18 + 3545] = (unsigned int)v2[30];\n    *(_QWORD *)&v2[v18 + 3552] = sub_47FB70;\n    *(_DWORD *)v19 = 2;\n    v34 = v20;\n    (*(void (__fastcall **)(_DWORD *, signed __int64))(v20 + v22 + 112))(&v2[v18 + 3544], v69);\n    v35 = v70;\n    *(_DWORD *)(v4 + v68 + 28) += v2[v18 + 3547];\n    v73 = (_DWORD *)(v4 + v68 + 28);\n    v36 = v2[v18 + 3547];\n    ++*v35;\n    v37 = (signed __int64)&v2[v18 + 3556];\n    v38 = off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 30) = 0;\n    if ( v76 && !v82 && v38[18100] )\n    {\n      v39 = *(_DWORD *)(v4 + v68 + 532);\n      *((_DWORD *)v19 + 13) = v39;\n      *((_DWORD *)v19 + 12) = 2;\n      *((_QWORD *)v19 + 10) = sub_47FB70;\n      *((_DWORD *)v19 + 17) = v39 != 0;\n      *((_DWORD *)v19 + 15) = 1;\n      sub_480480((__int64)(v19 + 48), *(signed int **)v69);\n      v35 = v70;\n      *v73 += *((_DWORD *)v19 + 15);\n      v36 += *((_DWORD *)v19 + 15);\n      ++*v35;\n      v38 = off_49F6D0;\n      v37 = (signed __int64)(v19 + 96);\n    }\n    v40 = (int *)(v4 + v68 + 72);\n    v41 = (void (__fastcall **)(signed __int64, signed __int64))(v78 + v34 + 112);\n    v42 = sub_431EB0(v35);\n    *(_DWORD *)(v37 + 4) = v42;\n    if ( v38[6] != 1 )\n      *(_DWORD *)(v37 + 4) = v42 - 1;\n    *(_QWORD *)(v37 + 32) = sub_47FB70;\n    *(_DWORD *)v37 = 2;\n    *(_DWORD *)(v37 + 8) = 0;\n    (*v41)(v37, v69);\n    *v73 += *(_DWORD *)(v37 + 12);\n    v28 = *(_DWORD *)(v37 + 12) + v36;\n    v29 = (char *)(v37 + 48);\n    ++*v70;\n    v30 = v68;\n  }\nLABEL_71:\n  v46 = (_DWORD *)(v4 + v30 + 528);\n  v47 = *v40;\n  if ( *v40 )\n  {\n    *(_DWORD *)(v4 + v30 + 576) = 1;\n    v74 = v4 + v30 + 528;\n    if ( v47 == 8 )\n    {\n      v48 = (_DWORD *)(v4 + v30 + 576);\n      v69 = *(_QWORD *)(v86 + 24) + 120LL * *(signed int *)(v85 + 8);\n      v49 = -4LL;\n      do\n      {\n        if ( *((_DWORD *)dest + 589) )\n          *((_QWORD *)v29 + 5) = sub_40B510;\n        else\n          *((_QWORD *)v29 + 4) = sub_47FB70;\n        v50 = (signed int)v48[v49 - 22];\n        if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n          v51 = dword_48A420[v50] + v48[v49 - 18] * dword_48A440[v50];\n        else\n          v51 = v50 - 4;\n        *((_DWORD *)v29 + 1) = v51;\n        *((_DWORD *)v29 + 2) = 0;\n        *(_DWORD *)v29 = 2;\n        (*(void (__fastcall **)(char *, signed __int64))(v69 + 112))(v29, v69);\n        *(v48 - 137) += *((_DWORD *)v29 + 3);\n        v28 += *((_DWORD *)v29 + 3);\n        ++*v70;\n        v52 = v48[v49 - 22];\n        if ( v52 || (v53 = 1, !*((_DWORD *)qword_4F9DC0 + 289)) )\n          v53 = v52 == 4;\n        *v48 &= v53;\n        v29 += 48;\n        ++v49;\n      }\n      while ( v49 );\n      v28 += sub_433B20();\n      v29 = (char *)off_49F6D0 + 48 * *v70 + 14176;\n      v47 = *v40;\n      v4 = v77;\n      v30 = v68;\n      v46 = (_DWORD *)v74;\n    }\n    if ( (v47 | 4) == 13 )\n    {\n      v54 = dest;\n      if ( *((_DWORD *)dest + 805) )\n      {\n        v55 = *(_DWORD *)(v4 + v30 + 572);\n        *((_DWORD *)v29 + 1) = v55;\n        *(_DWORD *)v29 = 20;\n        if ( v54[589] )\n        {\n          *((_QWORD *)v29 + 5) = sub_40ADD0;\n          (*(void (__fastcall **)(char *))(v69 + 112))(v29);\n          v56 = v29 + 12;\n        }\n        else\n        {\n          *((_QWORD *)v29 + 4) = sub_47FB70;\n          *((_DWORD *)v29 + 5) = v55;\n          v56 = v29 + 12;\n          *((_DWORD *)v29 + 3) = 1;\n          sub_480480((__int64)v29, *(signed int **)v69);\n        }\n        *(_DWORD *)(v4 + v30 + 28) += *v56;\n        v28 += *v56;\n        ++*v70;\n        v46 = (_DWORD *)v74;\n      }\n    }\n  }\n  else\n  {\n    v57 = 1;\n    if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n      v57 = *((_DWORD *)qword_4F9DC0 + 289) != 0;\n    *(_DWORD *)(v4 + v30 + 576) = v57;\n  }\n  v58 = v28 + (unsigned __int64)sub_431FA0(-1);\n  if ( *v46 && (v59 = (char *)off_49F6D0, *((_DWORD *)off_49F6D0 + 18175)) )\n  {\n    v60 = *((_QWORD *)off_49F6D0 + 1770);\n    v61 = *((_QWORD *)off_49F6D0 + 1771);\n    v62 = 632LL * *((signed int *)off_49F6D0 + 3);\n    v63 = 48LL * *(signed int *)(v61 + v62);\n    v64 = (char *)off_49F6D0 + v63 + 14176;\n    v65 = qword_4F9C40[*((signed int *)dest + 591)];\n    if ( *((_DWORD *)dest + 589) )\n      *(_QWORD *)((char *)off_49F6D0 + v63 + 14216) = sub_40BF80;\n    else\n      *(_QWORD *)((char *)off_49F6D0 + v63 + 14208) = sub_47FB70;\n    *(_QWORD *)&v59[v63 + 14180] = *(unsigned int *)(v61 + v62 + 524);\n    *v64 = 4;\n    v66 = *(_QWORD *)(v60 + 24) + 120LL * *(signed int *)(v65 + 16);\n    (*(void (__fastcall **)(_DWORD *, signed __int64))(v66 + 112))(v64, v66);\n    *(_DWORD *)(v61 + v62 + 44) += *(_DWORD *)&v59[v63 + 14188];\n    v58 += *(_DWORD *)&v59[v63 + 14188];\n    ++*(_DWORD *)(v61 + v62);\n    v30 = v68;\n    v40 = v75;\n  }\n  else if ( !v84 )\n  {\n    *(_DWORD *)(v77 + v30 + 524) = 0;\n  }\n  if ( (*v40 | 8) == 8 )\n  {\n    if ( !*v40 )\n      goto LABEL_106;\n  }\n  else\n  {\n    v58 += sub_433B20();\n    if ( !*v40 )\n    {\nLABEL_106:\n      if ( *((_DWORD *)off_49F6D0 + 6) != 1 || !*(_DWORD *)(v77 + v30 + 460) )\n        return v58;\n      goto LABEL_108;\n    }\n  }\nLABEL_108:\n  v58 += sub_435140();\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n    v58 += sub_433F10();\n  return v58;\n}\n", 
            "funcStartAddr": "0x4323d0L", 
            "funcEndAddr": "0x432fb8L", 
            "funcName": "sub_4323D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_432FC0(__int16 a1)\n{\n  __int64 v1; // rdx\n  signed __int64 v2; // rcx\n\n  v1 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n  v2 = 120LL * *(signed int *)(qword_4F9C40[*((signed int *)dest + 591)] + 8);\n  *(_DWORD *)(*(_QWORD *)(v1 + v2) + 40LL) = 1;\n  return sub_401B40(v1 + v2 + 8, a1);\n}\n", 
            "funcStartAddr": "0x432fc0L", 
            "funcEndAddr": "0x43300cL", 
            "funcName": "sub_432FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_433010()\n{\n  char *v0; // r13\n  __int64 v1; // rax\n  __int64 v2; // r14\n  signed __int64 v3; // r12\n  signed __int64 v4; // rbx\n  _DWORD *v5; // rdi\n  __int64 v6; // rcx\n  signed __int64 v7; // rsi\n  __int64 result; // rax\n\n  v0 = (char *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1770);\n  v2 = *((_QWORD *)off_49F6D0 + 1771);\n  v3 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v4 = 48LL * *(signed int *)(v2 + v3);\n  v5 = (char *)off_49F6D0 + v4 + 14176;\n  v6 = qword_4F9C40[*((signed int *)dest + 591)];\n  if ( *((_DWORD *)dest + 589) )\n    *(_QWORD *)((char *)off_49F6D0 + v4 + 14216) = sub_40BF80;\n  else\n    *(_QWORD *)((char *)off_49F6D0 + v4 + 14208) = sub_47FB70;\n  *(_QWORD *)&v0[v4 + 14180] = *(unsigned int *)(v2 + v3 + 524);\n  *v5 = 4;\n  v7 = *(_QWORD *)(v1 + 24) + 120LL * *(signed int *)(v6 + 16);\n  (*(void (__fastcall **)(_DWORD *, signed __int64))(v7 + 112))(v5, v7);\n  *(_DWORD *)(v2 + v3 + 44) += *(_DWORD *)&v0[v4 + 14188];\n  result = *(unsigned int *)&v0[v4 + 14188];\n  ++*(_DWORD *)(v2 + v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x433010L", 
            "funcEndAddr": "0x4330e6L", 
            "funcName": "sub_433010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_433140(int a1)\n{\n  __int64 v1; // r14\n  __int64 v2; // rcx\n  signed __int64 v3; // rbx\n  unsigned int v4; // edx\n  signed int v5; // esi\n  unsigned int *v6; // r15\n  __int64 v7; // rax\n  __int64 v8; // rax\n  signed __int64 v9; // rcx\n  signed int *v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rcx\n  signed __int64 v13; // rdi\n  int v14; // esi\n  __int64 v15; // rcx\n  signed __int64 v16; // rdx\n  signed int v17; // esi\n  int v18; // edx\n  int v19; // esi\n  int v20; // ecx\n  int v21; // ecx\n  int v22; // edx\n  __int64 result; // rax\n\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  if ( !*((_DWORD *)off_49F6D0 + 3) )\n    dword_4FA0E0 = 0;\n  v3 = 632 * v2;\n  v4 = *(_DWORD *)(v1 + 632 * v2 + 72);\n  if ( v4 <= 0xD )\n  {\n    v5 = 9728;\n    if ( _bittest(&v5, v4) )\n      ++dword_4FA0E0;\n  }\n  v6 = (unsigned int *)(v1 + v3 + 72);\n  if ( *((_DWORD *)dest + 589) == 1 )\n  {\n    if ( a1 )\n    {\n      v7 = *((_QWORD *)off_49F6D0 + 1770);\n      if ( (_DWORD)v2 != *(_DWORD *)(v7 + 12) )\n      {\n        v8 = *(_QWORD *)(v7 + 24);\n        v9 = 120LL * *(signed int *)(qword_4F9C40[*((signed int *)dest + 591)] + 8);\n        *(_DWORD *)(*(_QWORD *)(v8 + v9) + 40LL) = 1;\n        sub_401B40(v8 + v9 + 8, 0);\n      }\n    }\n  }\n  dword_49FB94 = 1;\n  sub_4323D0(0);\n  v10 = (signed int *)off_49F6D0;\n  if ( !*v6\n    && (*((_DWORD *)off_49F6D0 + 6) != 1 || !*(_DWORD *)(v1 + v3 + 460))\n    && *((_DWORD *)off_49F6D0 + 18173) >= -3 )\n  {\n    v15 = *((_QWORD *)off_49F6D0 + 16);\n    v16 = -1LL;\n    do\n    {\n      *(_DWORD *)(**(_QWORD **)(v15 + 8LL * v10[3]) + 4 * v16 + 4) = 0;\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8LL * v10[3]) + 8LL) + 4 * v16 + 4) = 0;\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8LL * v10[3]) + 16LL) + 4 * v16 + 4) = 0;\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8LL * v10[3]) + 24LL) + 4 * v16++ + 4) = 0;\n    }\n    while ( v16 < v10[18173] + 3LL );\n  }\n  v11 = *((_QWORD *)v10 + 1771);\n  v12 = v10[3];\n  v13 = 632 * v12;\n  if ( *(_DWORD *)(v11 + 632 * v12 + 72) || (v14 = 0, v10[6] == 1) && *(_DWORD *)(v11 + v13 + 460) )\n    v14 = *(_DWORD *)(v11 + v13 + 8);\n  dword_49F9A0 = v14;\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( (unsigned int)v10[6] <= 1 )\n    {\n      if ( *v6 > 0xD || (v17 = 9728, !_bittest(&v17, *v6)) )\n        *(_DWORD *)(*((_QWORD *)v10 + 8973) + 4 * v12) = 0;\n    }\n  }\n  v18 = *(_DWORD *)(v1 + v3 + 36);\n  v19 = *(_DWORD *)(v1 + v3 + 48);\n  v20 = *(_DWORD *)(v1 + v3 + 28) + *(_DWORD *)(v1 + v3 + 32);\n  *(_DWORD *)(v1 + v3 + 24) = *(_DWORD *)(v1 + v3 + 44) + v19 + v18 + v20 + *(_DWORD *)(v1 + v3 + 40);\n  v21 = v19 + v18 + v20;\n  v10[18139] = v21;\n  v22 = *(_DWORD *)(v1 + v3 + 40) + *(_DWORD *)(v1 + v3 + 44);\n  v10[18138] = v22;\n  v10[18132] += v22;\n  v10[18131] += v21;\n  if ( v10[18155] < v10[18152] )\n  {\n    v10[18133] += v21;\n    v10[18134] += v22;\n  }\n  ++v10[18154];\n  result = *(unsigned int *)(v1 + v3 + 24);\n  *((_DWORD *)off_49F6D8 + 6) += result;\n  dword_49FB94 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x433140L", 
            "funcEndAddr": "0x4333aeL", 
            "funcName": "sub_433140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4333C0(signed int a1, int a2, int a3, int a4, int a5)\n{\n  _DWORD *v5; // rbx\n  __int64 v6; // r13\n  __int64 v7; // r14\n  __int64 v8; // rdi\n  signed __int64 v9; // r15\n  _DWORD *v10; // r10\n  __int64 v11; // r9\n  __int64 result; // rax\n  int v13; // ebp\n  _BOOL4 v14; // er11\n  int v15; // ecx\n  signed __int64 v16; // r12\n  _DWORD *v17; // rdi\n  __int64 v18; // r13\n  signed __int64 v19; // rcx\n  signed int v20; // [rsp+0h] [rbp-34h]\n\n  v20 = a1;\n  v5 = off_49F6D0;\n  v6 = *((_QWORD *)off_49F6D0 + 1770);\n  v7 = *((_QWORD *)off_49F6D0 + 1771);\n  v8 = *((signed int *)off_49F6D0 + 3);\n  v9 = 632 * v8;\n  v10 = dest;\n  v11 = qword_4F9C40[*((signed int *)dest + 591)];\n  result = 0LL;\n  v13 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v13 = 0;\n    if ( *(_DWORD *)(v7 + v9 + 532) )\n      v13 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v14 = a4 == 0;\n  v15 = *((_DWORD *)qword_4F9BE0 + (v14 | (unsigned int)v13));\n  if ( v15 != 1 )\n  {\n    v16 = 12LL * *(signed int *)(v7 + 632 * v8);\n    v17 = (char *)off_49F6D0 + v16 * 4 + 14176;\n    if ( v15 == 2 )\n      LODWORD(result) = 1;\n    *(_DWORD *)((char *)off_49F6D0 + v16 * 4 + 14180) = a5;\n    v5[v16 + 3546] = 0;\n    *v17 = 3;\n    v18 = *(_QWORD *)(v6 + 24);\n    v19 = 120LL * *(signed int *)(v11 + 12);\n    if ( v10[589] )\n    {\n      v5[v16 + 3550] = v20 > 3;\n      v5[18] = a2;\n      v5[19] = a3;\n      *(_QWORD *)&v5[v16 + 3554] = sub_40B740;\n      v5[v16 + 3546] = v14;\n    }\n    else\n    {\n      if ( (_DWORD)result )\n      {\n        v5[v16 + 3549] = 1 - a5;\n        v5[v16 + 3547] = 1;\n        sub_480480((__int64)v17, *(signed int **)(v19 + v18));\n        goto LABEL_12;\n      }\n      *(_QWORD *)&v5[v16 + 3552] = sub_47FB70;\n    }\n    (*(void (__fastcall **)(_DWORD *, signed __int64))(v18 + v19 + 112))(v17, v19 + v18);\nLABEL_12:\n    *(_DWORD *)(v7 + v9 + 32) += v5[v16 + 3547];\n    result = (unsigned int)v5[v16 + 3547];\n    ++*(_DWORD *)(v7 + v9);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4333c0L", 
            "funcEndAddr": "0x43353cL", 
            "funcName": "sub_4333C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_433540(int a1, int a2, int a3, int a4, int a5, int a6, int a7)\n{\n  char *v7; // rbx\n  __int64 v8; // rax\n  signed __int64 v9; // rdi\n  int v10; // ebp\n  char *v11; // r11\n  unsigned int v12; // ebp\n  int v13; // er13\n  char *v14; // r10\n  __int64 v15; // r8\n  __int64 v16; // r11\n  __int64 v17; // r12\n  signed __int64 v18; // rdx\n  __int64 v19; // r9\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rdx\n  signed __int64 v22; // r14\n  int v23; // eax\n  signed __int64 v24; // rcx\n  signed __int64 v25; // rdx\n  __int64 v26; // rsi\n  __int64 v27; // rdi\n  int *v28; // rdi\n  __int64 v29; // rbp\n  _DWORD *v30; // rax\n  __int64 v31; // rbp\n  signed __int64 v32; // rsi\n  signed __int64 v33; // rcx\n  signed __int64 v34; // rdx\n  int v35; // eax\n  __int64 v36; // r8\n  __int64 v37; // rsi\n  __int64 v38; // rdi\n  int *v39; // rdi\n  __int64 v40; // rbp\n  _DWORD *v41; // rax\n  signed __int64 v42; // rsi\n  int v44; // [rsp+Ch] [rbp-11Ch]\n  int v45; // [rsp+10h] [rbp-118h]\n  int v46; // [rsp+14h] [rbp-114h]\n  unsigned int v47; // [rsp+18h] [rbp-110h]\n  int v48; // [rsp+18h] [rbp-110h]\n  __int64 v49; // [rsp+20h] [rbp-108h]\n  __int64 v50; // [rsp+28h] [rbp-100h]\n  signed __int64 v51; // [rsp+38h] [rbp-F0h]\n  signed __int64 v52; // [rsp+40h] [rbp-E8h]\n  signed __int64 v53; // [rsp+48h] [rbp-E0h]\n  signed __int64 v54; // [rsp+50h] [rbp-D8h]\n  __int64 v55; // [rsp+58h] [rbp-D0h]\n  _DWORD *v56; // [rsp+60h] [rbp-C8h]\n  __int64 v57; // [rsp+68h] [rbp-C0h]\n  _DWORD *v58; // [rsp+78h] [rbp-B0h]\n  __int64 v59; // [rsp+80h] [rbp-A8h]\n  __int64 v60; // [rsp+88h] [rbp-A0h]\n  __int64 v61; // [rsp+90h] [rbp-98h]\n  unsigned __int64 v62; // [rsp+A0h] [rbp-88h]\n  signed __int64 v63; // [rsp+B0h] [rbp-78h]\n  __int64 v64; // [rsp+B8h] [rbp-70h]\n  signed __int64 v65; // [rsp+C0h] [rbp-68h]\n  signed __int64 v66; // [rsp+C8h] [rbp-60h]\n  signed __int64 v67; // [rsp+D0h] [rbp-58h]\n  __int64 v68; // [rsp+E0h] [rbp-48h]\n  __int64 v69; // [rsp+E8h] [rbp-40h]\n  __int64 v70; // [rsp+F0h] [rbp-38h]\n\n  v46 = a6;\n  v45 = a3;\n  v44 = a1;\n  v7 = (char *)*((signed int *)dest + 2 * a7 + 36);\n  v49 = *((signed int *)dest + 2 * a7 + 37);\n  v61 = *((_QWORD *)off_49F6D0 + 1770);\n  v8 = *((_QWORD *)off_49F6D0 + 1771);\n  v9 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v60 = qword_4F9C40[*((signed int *)dest + 591)];\n  v50 = *((_QWORD *)off_49F6D0 + 8991);\n  v59 = *((_QWORD *)off_49F6D0 + 8990);\n  v10 = *(_DWORD *)(v8 + v9 + 580);\n  if ( v10 && !a5 && a7 == 1 && *(_DWORD *)(v8 + v9 + 488) == 2 )\n  {\n    v11 = (char *)off_49F6D0 + 71944;\n    if ( v10 == 1 )\n      v11 = (char *)off_49F6D0 + 71936;\n    v50 = *(_QWORD *)v11;\n  }\n  v12 = 0;\n  if ( a2 < a4 )\n  {\n    v13 = *((_DWORD *)dest + 2 * a7 + 36);\n    v14 = (char *)off_49F6D0 + 48 * *(signed int *)(v8 + v9) + 14176;\n    v57 = a5;\n    v56 = (_DWORD *)(v8 + v9 + 32);\n    v15 = a2;\n    v64 = a4;\n    v16 = (unsigned __int8)v7 & 3;\n    v17 = (unsigned int)v7 - v16;\n    v58 = (_DWORD *)(v8 + v9);\n    v18 = v8 + v9 + ((signed __int64)a6 << 7) + 32LL * a2;\n    v52 = v18 + 76;\n    v63 = 32 * v49;\n    v51 = v18 + 80;\n    v19 = -v16;\n    v20 = v18 + 8LL * v44 + 100;\n    v21 = v18 + 8LL * v44 + 104;\n    v62 = (unsigned int)v7 - 1LL;\n    v67 = 8LL * (_QWORD)v7;\n    v12 = 0;\n    v69 = *((signed int *)dest + 2 * a7 + 36);\n    v68 = (unsigned __int8)v7 & 3;\n    v55 = -v16;\n    while ( 1 )\n    {\n      v66 = v20;\n      v65 = v21;\n      if ( v44 < v45 )\n        break;\nLABEL_43:\n      v15 += v49;\n      v20 = v63 + v66;\n      v52 += v63;\n      v21 = v63 + v65;\n      v51 += v63;\n      if ( v15 >= v64 )\n        return v12;\n    }\n    v54 = v21;\n    v53 = v20;\n    v22 = v44;\n    v70 = v15;\n    while ( 1 )\n    {\n      v47 = v12;\n      v23 = **(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v22) + 8 * v15) + 8LL * v46)\n                                            + 8 * v57)\n                                + 8LL * a7)\n          - **(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 8 * v22) + 8 * v15) + 8LL * v46)\n                                            + 8 * v57)\n                                + 8LL * a7);\n      if ( (signed int)v49 > 0 )\n      {\n        v24 = v52;\n        v25 = v53;\n        v26 = 0LL;\n        do\n        {\n          if ( (signed int)v7 > 0 )\n          {\n            if ( v62 >= 3 )\n            {\n              v27 = 0LL;\n              do\n              {\n                *(_DWORD *)(v25 + 8 * v27 - 24) = v23;\n                *(_DWORD *)(v25 + 8 * v27 - 16) = v23;\n                *(_DWORD *)(v25 + 8 * v27 - 8) = v23;\n                *(_DWORD *)(v25 + 8 * v27) = v23;\n                v27 += 4LL;\n              }\n              while ( v17 != v27 );\n              if ( !v16 )\n                goto LABEL_23;\nLABEL_21:\n              v28 = (int *)(v24 + 8 * (v22 + v27));\n              v29 = v19;\n              do\n              {\n                *v28 = v23;\n                v28 += 2;\n                ++v29;\n              }\n              while ( v29 );\n              goto LABEL_23;\n            }\n            v27 = 0LL;\n            if ( v16 )\n              goto LABEL_21;\n          }\nLABEL_23:\n          ++v26;\n          v25 += 32LL;\n          v24 += 32LL;\n        }\n        while ( v26 != (unsigned int)v49 );\n      }\n      v7 = v14;\n      *((_DWORD *)v14 + 1) = v23;\n      *((_DWORD *)v14 + 2) = 0;\n      *(_DWORD *)v14 = 5;\n      if ( *((_DWORD *)dest + 589) )\n      {\n        v30 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18) = v22;\n        v30[19] = v15;\n        *((_DWORD *)v14 + 2) = v46;\n        *((_QWORD *)v14 + 5) = sub_40BBB0;\n      }\n      else\n      {\n        *((_QWORD *)v14 + 4) = sub_47FDB0;\n      }\n      v31 = v15;\n      v32 = *(_QWORD *)(v61 + 24) + 120LL * *(signed int *)(v60 + 20);\n      (*(void (__fastcall **)(char *, signed __int64))(v32 + 112))(v14, v32);\n      *v56 += *((_DWORD *)v7 + 3);\n      v48 = *((_DWORD *)v7 + 3) + v47;\n      ++*v58;\n      v34 = a7;\n      v35 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v22) + 8 * v31)\n                                                                  + 8LL * v46)\n                                                      + 8 * v57)\n                                          + 8LL * a7)\n                              + 2LL)\n          - *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 8 * v22) + 8 * v31)\n                                                                  + 8LL * v46)\n                                                      + 8 * v57)\n                                          + 8LL * a7)\n                              + 2LL);\n      v36 = v31;\n      if ( (signed int)v49 > 0 )\n        break;\nLABEL_39:\n      *((_DWORD *)v7 + 13) = v35;\n      *((_DWORD *)v7 + 14) = 0;\n      *((_DWORD *)v7 + 12) = 5;\n      if ( *((_DWORD *)dest + 589) )\n      {\n        v41 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18) = v22;\n        v41[19] = v36;\n        *((_DWORD *)v7 + 14) = v46 + 2;\n        *((_QWORD *)v7 + 11) = sub_40BBB0;\n      }\n      else\n      {\n        *((_QWORD *)v7 + 10) = sub_47FDB0;\n      }\n      v42 = *(_QWORD *)(v61 + 24) + 120LL * *(signed int *)(v60 + 20);\n      (*(void (__fastcall **)(char *, signed __int64, signed __int64, signed __int64, __int64, __int64))(v42 + 112))(\n        v7 + 48,\n        v42,\n        v34,\n        v33,\n        v36,\n        v55);\n      *v56 += *((_DWORD *)v7 + 15);\n      v12 = *((_DWORD *)v7 + 15) + v48;\n      ++*v58;\n      v14 = v7 + 96;\n      LODWORD(v7) = v69;\n      v22 += v69;\n      v53 += v67;\n      v54 += v67;\n      v15 = v70;\n      v16 = v68;\n      v19 = v55;\n      if ( v22 >= v45 )\n        goto LABEL_43;\n    }\n    v33 = v51;\n    v34 = v54;\n    v37 = 0LL;\n    while ( 1 )\n    {\n      if ( v13 > 0 )\n      {\n        if ( v62 >= 3 )\n        {\n          v38 = 0LL;\n          do\n          {\n            *(_DWORD *)(v34 + 8 * v38 - 24) = v35;\n            *(_DWORD *)(v34 + 8 * v38 - 16) = v35;\n            *(_DWORD *)(v34 + 8 * v38 - 8) = v35;\n            *(_DWORD *)(v34 + 8 * v38) = v35;\n            v38 += 4LL;\n          }\n          while ( v17 != v38 );\n          if ( !(v13 & 3) )\n            goto LABEL_38;\nLABEL_36:\n          v39 = (int *)(v33 + 8 * (v22 + v38));\n          v40 = v55;\n          do\n          {\n            *v39 = v35;\n            v39 += 2;\n            ++v40;\n          }\n          while ( v40 );\n          goto LABEL_38;\n        }\n        v38 = 0LL;\n        if ( v13 & 3 )\n          goto LABEL_36;\n      }\nLABEL_38:\n      ++v37;\n      v34 += 32LL;\n      v33 += 32LL;\n      if ( v37 == (unsigned int)v49 )\n        goto LABEL_39;\n    }\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x433540L", 
            "funcEndAddr": "0x433b1cL", 
            "funcName": "sub_433540"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_433B20()\n{\n  __int64 v0; // r15\n  int v1; // er14\n  _DWORD *v2; // rbx\n  signed __int64 v3; // rbp\n  unsigned __int64 v4; // rax\n  signed __int64 v5; // rcx\n  int v6; // er13\n  unsigned int v7; // er12\n  signed int v8; // ecx\n  int v9; // er14\n  signed __int64 v10; // rbx\n  int v11; // ebp\n  __int64 v12; // rax\n  signed int v13; // edi\n  int v14; // er14\n  int v15; // ebp\n  __int64 v16; // rax\n  signed int v17; // edi\n  signed int v18; // ecx\n  signed int v19; // ecx\n  __int64 v21; // rax\n  int v22; // er15\n  signed __int64 v23; // rbx\n  int v24; // er14\n  int v25; // ebp\n  __int64 v26; // rax\n  int v27; // eax\n  int v28; // ebx\n  signed __int64 v29; // r15\n  int v30; // er14\n  int v31; // ebp\n  __int64 v32; // rax\n  int v33; // eax\n  int v34; // [rsp+14h] [rbp-54h]\n  int v35; // [rsp+14h] [rbp-54h]\n  int v36; // [rsp+18h] [rbp-50h]\n  signed __int64 v37; // [rsp+20h] [rbp-48h]\n  signed __int64 v38; // [rsp+20h] [rbp-48h]\n  signed int *v39; // [rsp+28h] [rbp-40h]\n  __int64 v40; // [rsp+30h] [rbp-38h]\n\n  v0 = *((_QWORD *)off_49F6D0 + 1771);\n  v1 = *((_DWORD *)off_49F6D0 + 6);\n  v2 = dest;\n  v3 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v39 = (signed int *)(v0 + v3 + 72);\n  v4 = *v39;\n  v5 = 4LL;\n  if ( v4 != 8 )\n    v5 = *(signed int *)(v0 + v3 + 72);\n  v6 = *((_DWORD *)dest + 2 * v5 + 20) >> 2;\n  v36 = *((_DWORD *)dest + 2 * v5 + 21) >> 2;\n  if ( v4 <= 0xD )\n  {\n    v7 = 0;\n    v8 = 9729;\n    if ( _bittest(&v8, v4) )\n    {\n      if ( (unsigned int)v4 > 0xD )\n        goto LABEL_30;\n      goto LABEL_26;\n    }\n    if ( (_DWORD)v4 == 8 )\n    {\n      if ( (unsigned int)sub_431DE0() )\n      {\n        if ( v1 != 1 )\n        {\n          v7 = 0;\n          if ( v2[589] != 1 )\n            goto LABEL_30;\n        }\n      }\n    }\n  }\n  v34 = v1;\n  v9 = 0;\n  v37 = v3;\n  v10 = v0 + v3;\n  v7 = 0;\n  do\n  {\n    v11 = 0;\n    do\n    {\n      v12 = v9 + v11 / 2;\n      if ( (*(_DWORD *)(v10 + 4 * v12 + 488) | 2) == 2 )\n      {\n        v13 = *(_DWORD *)(v10 + 4 * v12 + 472);\n        if ( v13 )\n          v7 += sub_4333C0(\n                  v13,\n                  v11,\n                  v9,\n                  1,\n                  *(signed __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480)\n                                                + 8LL * (v11 + *((_DWORD *)off_49F6D0 + 36)))\n                                    + 2 * (v9 + (signed __int64)*((signed int *)off_49F6D0 + 37))));\n      }\n      v11 += v6;\n    }\n    while ( v11 < 4 );\n    v9 += v36;\n  }\n  while ( v9 < 4 );\n  v14 = 0;\n  do\n  {\n    v15 = 0;\n    do\n    {\n      v16 = v14 + v15 / 2;\n      if ( (unsigned int)(*(_DWORD *)(v10 + 4 * v16 + 488) - 1) <= 1 )\n      {\n        v17 = *(_DWORD *)(v10 + 4 * v16 + 472);\n        if ( v17 )\n          v7 += sub_4333C0(\n                  v17,\n                  v15,\n                  v14,\n                  0,\n                  *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL)\n                                                + 8LL * (v15 + *((_DWORD *)off_49F6D0 + 36)))\n                                    + 2 * (v14 + (signed __int64)*((signed int *)off_49F6D0 + 37))));\n      }\n      v15 += v6;\n    }\n    while ( v15 < 4 );\n    v14 += v36;\n  }\n  while ( v14 < 4 );\n  LODWORD(v4) = *v39;\n  v3 = v37;\n  v1 = v34;\n  if ( (unsigned int)*v39 > 0xD )\n  {\nLABEL_30:\n    v35 = v1;\n    v21 = v0;\n    v22 = 0;\n    v40 = v21;\n    v38 = v3;\n    v23 = v21 + v3;\n    do\n    {\n      v24 = v22 + v36;\n      v25 = 0;\n      do\n      {\n        v26 = v22 + v25 / 2;\n        if ( (*(_DWORD *)(v23 + 4 * v26 + 488) | 2) == 2 )\n        {\n          v27 = *(_DWORD *)(v23 + 4 * v26 + 472);\n          if ( v27 )\n            v7 += sub_433540(\n                    v25,\n                    v22,\n                    v6 + v25,\n                    v24,\n                    *(signed __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480)\n                                                  + 8LL * (v25 + *((_DWORD *)off_49F6D0 + 36)))\n                                      + 2 * (v22 + (signed __int64)*((signed int *)off_49F6D0 + 37))),\n                    0,\n                    v27);\n        }\n        v25 += v6;\n      }\n      while ( v25 < 4 );\n      v22 += v36;\n    }\n    while ( v24 < 4 );\n    LODWORD(v4) = *v39;\n    v0 = v40;\n    v3 = v38;\n    v1 = v35;\n    if ( (unsigned int)*v39 > 0xD )\n      goto LABEL_38;\nLABEL_28:\n    v19 = 9728;\n    if ( _bittest(&v19, v4) )\n      return v7;\n    goto LABEL_38;\n  }\nLABEL_26:\n  v18 = 9729;\n  if ( !_bittest(&v18, v4) )\n    goto LABEL_30;\n  if ( (unsigned int)v4 <= 0xD )\n    goto LABEL_28;\nLABEL_38:\n  if ( v1 == 1 && (_DWORD)v4 )\n  {\n    v28 = 0;\n    v29 = v3 + v0;\n    do\n    {\n      v30 = v28 + v36;\n      v31 = 0;\n      do\n      {\n        v32 = v28 + v31 / 2;\n        if ( (unsigned int)(*(_DWORD *)(v29 + 4 * v32 + 488) - 1) <= 1 )\n        {\n          v33 = *(_DWORD *)(v29 + 4 * v32 + 472);\n          if ( v33 )\n            v7 += sub_433540(\n                    v31,\n                    v28,\n                    v6 + v31,\n                    v30,\n                    *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL)\n                                                  + 8LL * (v31 + *((_DWORD *)off_49F6D0 + 36)))\n                                      + 2 * (v28 + (signed __int64)*((signed int *)off_49F6D0 + 37))),\n                    1,\n                    v33);\n        }\n        v31 += v6;\n      }\n      while ( v31 < 4 );\n      v28 += v36;\n    }\n    while ( v30 < 4 );\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x433b20L", 
            "funcEndAddr": "0x433f0cL", 
            "funcName": "sub_433B20"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_433F10()\n{\n  _DWORD *v0; // rax\n  __int64 v1; // r14\n  signed __int64 v2; // r12\n  char *v3; // rbx\n  signed int v4; // edx\n  __int64 v5; // r13\n  unsigned int v6; // ebp\n  _DWORD *v7; // r15\n  int v8; // ecx\n  __int64 *v9; // rdx\n  signed __int64 v10; // r13\n  int v11; // er14\n  int v12; // er12\n  unsigned int v13; // edx\n  unsigned int v14; // ecx\n  int v15; // esi\n  signed __int64 v16; // rsi\n  int v17; // ecx\n  _DWORD *v18; // rax\n  __int64 *v19; // rdx\n  __int64 v20; // rdx\n  signed __int64 v21; // r13\n  int v22; // er14\n  int v23; // er12\n  unsigned int v24; // edx\n  unsigned int v25; // ecx\n  int v26; // esi\n  signed __int64 v27; // rsi\n  _DWORD *v28; // r12\n  signed __int64 v29; // r14\n  __int64 v30; // r13\n  int v31; // eax\n  _DWORD *v32; // rsi\n  __int64 *v33; // rdx\n  __int64 v34; // r15\n  signed __int64 v35; // rdx\n  unsigned __int64 i; // r13\n  int v37; // er14\n  unsigned int v38; // ecx\n  unsigned int v39; // eax\n  int v40; // edx\n  _DWORD *v41; // rcx\n  signed __int64 v42; // rsi\n  signed __int64 v43; // rax\n  bool v44; // sf\n  unsigned __int8 v45; // of\n  signed __int64 v47; // [rsp+0h] [rbp-78h]\n  signed __int64 v48; // [rsp+0h] [rbp-78h]\n  __int64 v49; // [rsp+0h] [rbp-78h]\n  __int64 v50; // [rsp+8h] [rbp-70h]\n  __int64 v51; // [rsp+8h] [rbp-70h]\n  signed __int64 v52; // [rsp+8h] [rbp-70h]\n  __int64 v53; // [rsp+10h] [rbp-68h]\n  __int64 v54; // [rsp+10h] [rbp-68h]\n  int v55; // [rsp+10h] [rbp-68h]\n  __int64 v56; // [rsp+18h] [rbp-60h]\n  int v57; // [rsp+18h] [rbp-60h]\n  signed __int64 v58; // [rsp+18h] [rbp-60h]\n  signed int v59; // [rsp+20h] [rbp-58h]\n  __int64 v60; // [rsp+20h] [rbp-58h]\n  __int64 v61; // [rsp+28h] [rbp-50h]\n  __int64 v62; // [rsp+28h] [rbp-50h]\n  __int64 v63; // [rsp+28h] [rbp-50h]\n  __int64 v64; // [rsp+30h] [rbp-48h]\n  _DWORD *v65; // [rsp+38h] [rbp-40h]\n  __int64 v66; // [rsp+40h] [rbp-38h]\n\n  v0 = off_49F6D0;\n  v66 = *((_QWORD *)off_49F6D0 + 1770);\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v65 = (_DWORD *)(v1 + v2);\n  v3 = (char *)off_49F6D0 + 48 * *(signed int *)(v1 + v2) + 14176;\n  v64 = qword_4F9C40[*((signed int *)dest + 591)];\n  v4 = *(_DWORD *)(v1 + v2 + 460);\n  v5 = *((signed int *)off_49F6D0 + 18175);\n  v6 = 0;\n  if ( v4 >= 16 )\n  {\n    v7 = (_DWORD *)(v1 + v2 + 72);\n    v8 = *((_DWORD *)dest + 589);\n    v59 = *(_DWORD *)(v1 + v2 + 460);\n    if ( v8 )\n    {\n      if ( *((_DWORD *)off_49F6D0 + 18174) < 0 )\n      {\n        v6 = 0;\n      }\n      else\n      {\n        v47 = 632LL * *((signed int *)off_49F6D0 + 3);\n        v50 = *((_QWORD *)off_49F6D0 + 1771);\n        v9 = *(__int64 **)(*((_QWORD *)off_49F6D0 + 1768) + 8LL);\n        v53 = *v9;\n        v61 = v9[1];\n        v10 = 0LL;\n        v56 = *((signed int *)off_49F6D0 + 18175);\n        v11 = dword_490DC0[v56];\n        v6 = 0;\n        while ( 1 )\n        {\n          v12 = *(_DWORD *)(v53 + 4 * v10);\n          *((_DWORD *)v3 + 1) = v12;\n          *((_DWORD *)v3 + 2) = *(_DWORD *)(v61 + 4 * v10);\n          if ( v8 )\n            *((_QWORD *)v3 + 5) = sub_40CC70;\n          else\n            *((_QWORD *)v3 + 4) = sub_480050;\n          *((_DWORD *)v3 + 6) = v11;\n          v13 = *v7 - 9;\n          v14 = 13;\n          if ( v13 <= 4 )\n            v14 = dword_490EA0[v13];\n          *(_DWORD *)v3 = v14;\n          v15 = 0;\n          if ( v13 <= 4 )\n            v15 = dword_490EC0[v13];\n          v0[20] = v15;\n          v0[21] = 0;\n          v16 = *(_QWORD *)(v66 + 24) + 120LL * *(signed int *)(v64 + 4LL * v14);\n          (*(void (__fastcall **)(char *, signed __int64))(v16 + 112))(v3, v16);\n          *(v7 - 7) += *((_DWORD *)v3 + 3);\n          v6 += *((_DWORD *)v3 + 3);\n          ++*v65;\n          if ( !v12 )\n            break;\n          v0 = off_49F6D0;\n          if ( v10 >= *((signed int *)off_49F6D0 + 18174) )\n            break;\n          v3 += 48;\n          ++v10;\n          v8 = *((_DWORD *)dest + 589);\n        }\n        v3 += 48;\n        v1 = v50;\n        v2 = v47;\n        v5 = v56;\n      }\n    }\n    else\n    {\n      v6 = sub_4344D0(6, 0, 0, 0);\n    }\n    v17 = *((_DWORD *)dest + 589);\n    if ( v17 )\n    {\n      v18 = off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18174) >= 0 )\n      {\n        v48 = v2;\n        v51 = v1;\n        v19 = *(__int64 **)(*((_QWORD *)off_49F6D0 + 1768) + 16LL);\n        v54 = *v19;\n        v62 = v19[1];\n        v20 = v5;\n        v21 = 0LL;\n        v57 = v20;\n        v22 = dword_490DC0[v20];\n        while ( 1 )\n        {\n          v23 = *(_DWORD *)(v54 + 4 * v21);\n          *((_DWORD *)v3 + 1) = v23;\n          *((_DWORD *)v3 + 2) = *(_DWORD *)(v62 + 4 * v21);\n          if ( v17 )\n            *((_QWORD *)v3 + 5) = sub_40CC70;\n          else\n            *((_QWORD *)v3 + 4) = sub_480050;\n          *((_DWORD *)v3 + 6) = v22;\n          v24 = *v7 - 9;\n          v25 = 13;\n          if ( v24 <= 4 )\n            v25 = dword_490EA0[v24];\n          *(_DWORD *)v3 = v25;\n          v26 = 0;\n          if ( v24 <= 4 )\n            v26 = dword_490EC0[v24];\n          v18[20] = v26;\n          v18[21] = 1;\n          v27 = *(_QWORD *)(v66 + 24) + 120LL * *(signed int *)(v64 + 4LL * v25);\n          (*(void (__fastcall **)(char *, signed __int64))(v27 + 112))(v3, v27);\n          *(v7 - 7) += *((_DWORD *)v3 + 3);\n          v6 += *((_DWORD *)v3 + 3);\n          ++*v65;\n          if ( !v23 )\n            break;\n          v18 = off_49F6D0;\n          if ( v21 >= *((signed int *)off_49F6D0 + 18174) )\n            break;\n          v3 += 48;\n          ++v21;\n          v17 = *((_DWORD *)dest + 589);\n        }\n        v3 += 48;\n        v1 = v51;\n        v2 = v48;\n        LODWORD(v5) = v57;\n      }\n    }\n    else\n    {\n      v6 += sub_4344D0(6, 0, 0, 1);\n    }\n    v4 = v59;\n  }\n  if ( (v4 & 0xFFFFFFF0) == 32 && *((_DWORD *)off_49F6D0 + 18173) > 0 )\n  {\n    v49 = (signed int)v5 - 1;\n    v28 = (_DWORD *)(v1 + v2 + 72);\n    v55 = -1;\n    v29 = 4LL;\n    do\n    {\n      v52 = v29 - 4;\n      v30 = 0LL;\n      v58 = v29;\n      do\n      {\n        v31 = *((_DWORD *)dest + 589);\n        if ( v31 )\n        {\n          v32 = off_49F6D0;\n          v33 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v29) + 8 * v30);\n          v63 = *v33;\n          v34 = v33[1];\n          ++v55;\n          v35 = 32 * v49 + 4 * v52;\n          *((_DWORD *)off_49F6D0 + 19) = (unsigned __int8)byte_490BB0[v30 + v35] >> 2;\n          v60 = v30;\n          v32[18] = (unsigned __int8)byte_490B50[v30 + v35] >> 2;\n          for ( i = 1LL; ; ++i )\n          {\n            v37 = *(_DWORD *)(v63 + 4 * i - 4);\n            *((_DWORD *)v3 + 1) = v37;\n            *((_DWORD *)v3 + 2) = *(_DWORD *)(v34 + 4 * i - 4);\n            if ( v31 )\n              *((_QWORD *)v3 + 5) = sub_40CC70;\n            else\n              *((_QWORD *)v3 + 4) = sub_4800F0;\n            *((_DWORD *)v3 + 6) = 7;\n            v38 = *v28 - 9;\n            v39 = 15;\n            if ( v38 <= 4 )\n              v39 = dword_490E80[v38];\n            *(_DWORD *)v3 = v39;\n            v40 = 0;\n            if ( v38 <= 4 )\n              v40 = dword_490EC0[v38];\n            v41 = off_49F6D0;\n            *((_DWORD *)off_49F6D0 + 20) = v40;\n            v41[21] = v55 >= 2 * v41[18173];\n            v42 = *(_QWORD *)(v66 + 24) + 120LL * *(signed int *)(v64 + 4LL * v39);\n            (*(void (__fastcall **)(char *, signed __int64))(v42 + 112))(v3, v42);\n            *(v28 - 7) += *((_DWORD *)v3 + 3);\n            v6 += *((_DWORD *)v3 + 3);\n            ++*v65;\n            if ( i > 0xF || !v37 )\n              break;\n            v3 += 48;\n            v31 = *((_DWORD *)dest + 589);\n          }\n          v3 += 48;\n          v29 = v58;\n          v30 = v60;\n        }\n        else\n        {\n          v6 += sub_4344D0(7, v29, v30, (unsigned __int8)byte_490DD0[32 * v49 + 4 * v52 + v30]);\n        }\n        ++v30;\n      }\n      while ( v30 != 4 );\n      v43 = *((signed int *)off_49F6D0 + 18173) + 3LL;\n      v45 = __OFSUB__(v29, v43);\n      v44 = v29++ - v43 < 0;\n    }\n    while ( v44 ^ v45 );\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x433f10L", 
            "funcEndAddr": "0x4344caL", 
            "funcName": "sub_433F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4344D0(int a1, signed int a2, signed int a3, int a4)\n{\n  char *v4; // r14\n  __int64 v5; // rbp\n  signed __int64 v6; // r13\n  __m128i v7; // xmm0\n  unsigned int v8; // eax\n  signed int v9; // ecx\n  unsigned int v10; // er9\n  _DWORD *v11; // rcx\n  signed int v12; // er8\n  unsigned int v13; // ecx\n  signed int v14; // edx\n  unsigned int v15; // ecx\n  signed int v16; // edx\n  signed int *v17; // r13\n  __int64 v18; // r10\n  __int64 v19; // xmm0_8\n  signed __int64 v20; // rsi\n  signed int v21; // eax\n  signed int v22; // edi\n  signed int v23; // er12\n  signed int v24; // ebx\n  int v25; // ebp\n  int v26; // ebx\n  signed __int64 v27; // rbx\n  int v28; // ebp\n  __int64 v29; // rsi\n  signed int v30; // ebx\n  int v31; // er13\n  signed int v32; // eax\n  signed int **v33; // rsi\n  int *v34; // rbx\n  _DWORD *v35; // rbp\n  unsigned int v36; // er14\n  signed int v37; // er8\n  signed int *v38; // rbx\n  int v39; // er13\n  signed __int64 v40; // rcx\n  signed int v41; // eax\n  unsigned int v42; // er10\n  int v43; // edi\n  signed int *v44; // r15\n  __int64 v45; // rcx\n  int v46; // ebx\n  _BOOL4 v47; // ebp\n  signed int v48; // edx\n  int v49; // eax\n  int v50; // ebp\n  signed __int64 v51; // r13\n  signed int v52; // er12\n  int v53; // ebx\n  int v54; // eax\n  int v55; // edx\n  int v56; // ebp\n  signed int v57; // er12\n  signed __int64 v58; // rbp\n  signed int v59; // er13\n  signed int v60; // ebx\n  int v61; // eax\n  bool v62; // zf\n  bool v63; // sf\n  unsigned __int8 v64; // of\n  __int64 result; // rax\n  char v66; // [rsp+4h] [rbp-A4h]\n  signed int v67; // [rsp+8h] [rbp-A0h]\n  int v68; // [rsp+Ch] [rbp-9Ch]\n  __int64 v69; // [rsp+10h] [rbp-98h]\n  signed __int64 v70; // [rsp+18h] [rbp-90h]\n  unsigned int v71; // [rsp+20h] [rbp-88h]\n  signed __int64 v72; // [rsp+28h] [rbp-80h]\n  _DWORD *v73; // [rsp+28h] [rbp-80h]\n  signed int v74; // [rsp+30h] [rbp-78h]\n  _DWORD *v75; // [rsp+40h] [rbp-68h]\n  signed int v76; // [rsp+48h] [rbp-60h]\n  __int64 v77; // [rsp+50h] [rbp-58h]\n  signed int v78; // [rsp+5Ch] [rbp-4Ch]\n  signed int v79; // [rsp+60h] [rbp-48h]\n  int v80; // [rsp+64h] [rbp-44h]\n  signed __int64 v81; // [rsp+68h] [rbp-40h]\n  signed int *v82; // [rsp+70h] [rbp-38h]\n\n  v4 = (char *)off_49F6D0;\n  v5 = *((_QWORD *)off_49F6D0 + 1771);\n  v6 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v80 = a4;\n  v79 = a2;\n  v78 = a3;\n  switch ( a1 )\n  {\n    case 0:\n      v7 = _mm_loadu_si128((const __m128i *)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a2) + 8LL * a3));\n      v8 = *(_DWORD *)(v5 + v6 + 72);\n      if ( v8 <= 0xD && (v9 = 9728, _bittest(&v9, v8)) )\n      {\n        v67 = 16;\n        v66 = 0;\nLABEL_7:\n        v10 = 9;\n      }\n      else\n      {\n        v67 = 16;\n        v66 = 0;\n        v10 = 14;\n      }\nLABEL_8:\n      v70 = 5LL;\n      v11 = off_49F6D0;\n      v12 = 0;\n      goto LABEL_19;\n    case 1:\n      v7 = _mm_loadu_si128((const __m128i *)**((_QWORD **)off_49F6D0 + 1768));\n      v66 = 0;\n      v67 = 16;\n      v10 = 7;\n      goto LABEL_8;\n    case 2:\n      v7 = _mm_loadu_si128((const __m128i *)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a2) + 8LL * a3));\n      v66 = 0;\n      v67 = 15;\n      goto LABEL_7;\n    case 6:\n      v7 = _mm_loadu_si128((const __m128i *)*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1768) + 8LL * a4 + 8));\n      v13 = *(_DWORD *)(v5 + v6 + 72);\n      v12 = 0;\n      v66 = 1;\n      v67 = *((_DWORD *)off_49F6D0 + 18174);\n      if ( v13 <= 0xD && (v14 = 9728, _bittest(&v14, v13)) )\n        v10 = 8;\n      else\n        v10 = 13;\n      goto LABEL_18;\n    case 7:\n      v7 = _mm_loadu_si128((const __m128i *)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a2) + 8LL * a3));\n      v15 = *(_DWORD *)(v5 + v6 + 72);\n      v12 = 1;\n      if ( v15 <= 0xD && (v16 = 9728, _bittest(&v16, v15)) )\n      {\n        v67 = 15;\n        v10 = 10;\n        v66 = 0;\nLABEL_18:\n        v70 = 6LL;\n        v11 = off_49F6D0;\n      }\n      else\n      {\n        v10 = 15;\n        v66 = 0;\n        v70 = 6LL;\n        v11 = off_49F6D0;\n        v67 = 15;\n      }\nLABEL_19:\n      v75 = (_DWORD *)(v6 + v5);\n      v72 = 48LL * *(signed int *)(v5 + v6);\n      v17 = (signed int *)((char *)off_49F6D0 + 48 * *(signed int *)(v5 + v6) + 14176);\n      v69 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n      v18 = *(signed int *)(qword_4F9C40[*((signed int *)dest + 591)] + 4LL * v10);\n      v77 = v7.m128i_i64[0];\n      v19 = (unsigned __int128)_mm_shuffle_epi32(v7, 78);\n      v20 = 0LL;\n      v21 = 1;\n      v22 = 0;\n      v68 = 0;\n      v23 = 0;\n      v76 = 0;\n      while ( 1 )\n      {\n        v24 = 16;\n        if ( v66 )\n          v24 = v11[18174];\n        if ( !v21 || v20 > v24 )\n          break;\n        v21 = *(_DWORD *)(v77 + 4 * v20);\n        if ( v21 )\n        {\n          v76 += *(_DWORD *)(v19 + 4 * v20);\n          v25 = -v21;\n          if ( -v21 < 1 )\n            v25 = *(_DWORD *)(v77 + 4 * v20);\n          v26 = 0;\n          if ( v25 == 1 )\n          {\n            v26 = v23 + 1;\n            if ( v23 > 2 )\n              v26 = 3;\n          }\n          ++v22;\n          v68 = v20;\n          v23 = v26;\n        }\n        ++v20;\n      }\n      v27 = 120 * v18;\n      v28 = 0;\n      v71 = v10;\n      v74 = v22;\n      if ( v66 )\n      {\n        v29 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL);\n      }\n      else\n      {\n        v81 = 120 * v18;\n        v82 = v17;\n        if ( v12 )\n        {\n          v30 = v80 >> 4;\n          v31 = v80 & 0xF;\n          v32 = sub_435BB0(v80 >> 4, v31);\n        }\n        else\n        {\n          v30 = (v78 & 1) + 2 * (v79 & 1);\n          v31 = v78 < 1;\n          LOBYTE(v31) = v78 > 1;\n          if ( v79 >= 2 )\n            v31 = 3 - (v78 < 2);\n          v32 = sub_435A50(v30, v31);\n        }\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * *((signed int *)off_49F6D0 + 3))\n                              + 8LL * v30)\n                  + 4LL * v31) = v22;\n        v10 = v71;\n        v29 = v69;\n        v17 = v82;\n        v27 = v81;\n        if ( v32 >= 2 )\n        {\n          v28 = 1;\n          if ( v32 >= 4 )\n            v28 = 3 - (v32 < 8);\n        }\n      }\n      v33 = (signed int **)(v27 + v29);\n      *v17 = v10;\n      *(_DWORD *)&v4[v72 + 14180] = v22;\n      *(_DWORD *)&v4[v72 + 14184] = v23;\n      v34 = (int *)&v4[v72 + 14188];\n      *v34 = v28;\n      if ( v66 )\n        sub_480750(v17, v33);\n      else\n        sub_480600(v17, v33);\n      v35 = v75;\n      v35[v70 + 5] += *v34;\n      v36 = *v34;\n      ++*v35;\n      v37 = v22;\n      if ( !v22 )\n        return v36;\n      v38 = v17;\n      v39 = v68 - v23;\n      if ( v23 <= 0 )\n      {\n        v41 = 0;\n        v42 = v71;\n      }\n      else\n      {\n        v40 = v68;\n        v41 = 0;\n        v42 = v71;\n        do\n        {\n          v43 = -*(_DWORD *)(v77 + 4 * v40);\n          if ( v43 < 1 )\n            v43 = *(_DWORD *)(v77 + 4 * v40);\n          if ( v43 >= 2 )\n          {\n            puts(\"ERROR: level > 1\");\n            exit(-1);\n          }\n          v41 = __PAIR__((unsigned int)v41, *(_DWORD *)(v77 + 4 * v40--)) >> 31;\n        }\n        while ( v40 > v39 );\n      }\n      v73 = &v75[v70 + 5];\n      v44 = v38 + 12;\n      if ( v23 )\n      {\n        v38[12] = v42;\n        v38[14] = v23;\n        v38[13] = v41;\n        sub_480530(v38 + 12, v33);\n        v37 = v74;\n        *v73 += v38[15];\n        v36 += v38[15];\n        ++*v75;\n        v44 = v38 + 24;\n      }\n      v45 = v19;\n      if ( v39 < 0 )\n      {\n        v48 = v71;\n        if ( v37 < v67 )\n          goto LABEL_83;\n        goto LABEL_89;\n      }\n      v46 = *(_DWORD *)(v77 + 4LL * v39);\n      v44[1] = v46;\n      *v44 = v71;\n      if ( v23 != 3 || v37 <= 3 )\n        v44[1] = v46 + 2 * (v46 <= 0) - 1;\n      v47 = v37 > 10 && v23 < 3;\n      if ( v37 < 11 || v23 > 2 )\n        sub_480B50(v44, v33);\n      else\n        sub_480C90((__int64)v44, v37 > 10 && v23 < 3, v33);\n      v49 = -v46;\n      if ( -v46 < 1 )\n        v49 = v46;\n      *v73 += v44[3];\n      v36 += v44[3];\n      ++*v75;\n      v44 += 12;\n      v48 = v71;\n      v45 = v19;\n      if ( v39 <= 0 )\n      {\n        v37 = v74;\n        if ( v74 < v67 )\n          goto LABEL_83;\nLABEL_89:\n        v57 = v76;\n        v56 = v68;\n        if ( v68 < 0 )\n          return v36;\n        goto LABEL_90;\n      }\n      v50 = v47 + (v49 > dword_490E60[v47]);\n      if ( v49 > 3 )\n        v50 = 2;\n      v51 = v68 + 1LL - v23;\n      v52 = 1;\n      do\n      {\n        v53 = *(_DWORD *)(v77 + 4 * v51 - 8);\n        v44[1] = v53;\n        *v44 = v48;\n        if ( v50 )\n          sub_480C90((__int64)v44, v50, v33);\n        else\n          sub_480B50(v44, v33);\n        v54 = -v53;\n        if ( -v53 < 1 )\n          v54 = v53;\n        v55 = v50 + (v54 > dword_490E60[v50]);\n        v50 += v54 > dword_490E60[v50];\n        if ( v54 > 3 )\n          v50 = 2;\n        if ( v52 )\n          v50 = v55;\n        *v73 += v44[3];\n        v36 += v44[3];\n        ++*v75;\n        v44 += 12;\n        --v51;\n        ++v52;\n        v48 = v71;\n        v45 = v19;\n        v37 = v74;\n      }\n      while ( v51 > 1 );\n      if ( v74 >= v67 )\n        goto LABEL_89;\nLABEL_83:\n      *v44 = v48;\n      v44[1] = v76;\n      v44[3] = v37 - 1;\n      v56 = v68;\n      if ( v66 )\n        sub_480950(v44, v33);\n      else\n        sub_480860(v44, v33);\n      *v73 += v44[3];\n      v36 += v44[3];\n      v44 += 12;\n      ++*v75;\n      v48 = v71;\n      v45 = v19;\n      v37 = v74;\n      v57 = v76;\n      if ( v68 < 0 )\n        return v36;\nLABEL_90:\n      v58 = v56 + 1LL;\n      v59 = v37;\n      do\n      {\n        v60 = *(_DWORD *)(v45 + 4 * v58 - 4);\n        v44[1] = v60;\n        *v44 = v48;\n        if ( v37 < 2 || !v57 )\n          break;\n        if ( v59 >= 2 )\n        {\n          v61 = v57 - 1;\n          if ( v57 - 1 >= 7 )\n            v61 = 6;\n          v44[3] = v61;\n          sub_480A60(v44, v33);\n          v37 = v74;\n          v45 = v19;\n          v48 = v71;\n          *v73 += v44[3];\n          v36 += v44[3];\n          v57 -= v60;\n          --v59;\n          v44 += 12;\n          ++*v75;\n        }\n        v64 = __OFADD__(-1LL, v58);\n        v62 = v58 == 1;\n        v63 = v58-- - 1 < 0;\n      }\n      while ( !((unsigned __int8)(v63 ^ v64) | v62) );\n      return v36;\n    default:\n      error((__int64)\"writeCoeff4x4_CAVLC: Invalid block type\", 600);\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x4344d0L", 
            "funcEndAddr": "0x434cb2L", 
            "funcName": "sub_4344D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_434CC0(signed int a1, signed int a2, int a3)\n{\n  _DWORD *v3; // rax\n  __int64 v4; // r8\n  signed __int64 v5; // r9\n  char *v6; // rbx\n  signed int v7; // ebp\n  __int64 *v8; // rdi\n  _BOOL4 v9; // ecx\n  int v10; // esi\n  _BOOL4 v11; // ecx\n  unsigned int v12; // er13\n  _DWORD *v13; // r14\n  unsigned int v14; // ebp\n  unsigned __int64 i; // r15\n  int v16; // er12\n  __int64 v17; // rcx\n  signed __int64 v18; // rsi\n  unsigned int v20; // [rsp+8h] [rbp-60h]\n  int v21; // [rsp+Ch] [rbp-5Ch]\n  __int64 v22; // [rsp+10h] [rbp-58h]\n  __int64 v23; // [rsp+18h] [rbp-50h]\n  __int64 v24; // [rsp+20h] [rbp-48h]\n  __int64 v25; // [rsp+28h] [rbp-40h]\n  _DWORD *v26; // [rsp+30h] [rbp-38h]\n\n  v3 = off_49F6D0;\n  v4 = *((_QWORD *)off_49F6D0 + 1771);\n  v5 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v26 = (_DWORD *)(v4 + v5);\n  v6 = (char *)off_49F6D0 + 48 * *(signed int *)(v4 + v5) + 14176;\n  v25 = *((_QWORD *)off_49F6D0 + 1770);\n  v24 = qword_4F9C40[*((signed int *)dest + 591)];\n  v7 = a1;\n  v8 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a1) + 8LL * a2);\n  v23 = *v8;\n  v22 = v8[1];\n  *((_DWORD *)off_49F6D0 + 18) = (a2 & 1) + 2 * (v7 & 1);\n  v9 = a2 < 1;\n  LOBYTE(v9) = a2 > 1;\n  v10 = 3 - (a2 < 2);\n  if ( v7 >= 2 )\n    v9 = v10;\n  v3[19] = v9;\n  v21 = a3;\n  v11 = a3 == 0;\n  v20 = 5 * v11 + 7;\n  v12 = 5 * v11 + 9;\n  v13 = (_DWORD *)(v4 + v5 + 40);\n  v14 = 0;\n  for ( i = 1LL; ; ++i )\n  {\n    v16 = *(_DWORD *)(v23 + 4 * i - 4);\n    *((_DWORD *)v6 + 1) = v16;\n    *((_DWORD *)v6 + 2) = *(_DWORD *)(v22 + 4 * i - 4);\n    *((_QWORD *)v6 + 5) = sub_40CC70;\n    *((_DWORD *)v6 + 6) = 5;\n    v17 = v12;\n    if ( i == 1 )\n      v17 = v20;\n    *(_DWORD *)v6 = v17;\n    v3[20] = v21;\n    v18 = *(_QWORD *)(v25 + 24) + 120LL * *(signed int *)(v24 + 4 * v17);\n    (*(void (__fastcall **)(char *, signed __int64))(v18 + 112))(v6, v18);\n    *v13 += *((_DWORD *)v6 + 3);\n    v14 += *((_DWORD *)v6 + 3);\n    ++*v26;\n    if ( !v16 || i > 0x10 )\n      break;\n    v6 += 48;\n    v3 = off_49F6D0;\n  }\n  return v14;\n}\n", 
            "funcStartAddr": "0x434cc0L", 
            "funcEndAddr": "0x434e60L", 
            "funcName": "sub_434CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_434E60(signed int a1, int a2)\n{\n  _DWORD *v2; // rax\n  signed __int64 v3; // rcx\n  __int64 v4; // r9\n  __int64 *v5; // rbp\n  signed __int64 v6; // rbx\n  signed __int64 v7; // r13\n  unsigned int v8; // ebp\n  unsigned __int64 i; // r15\n  int v10; // er12\n  __int64 v11; // rcx\n  signed int *v12; // rdx\n  unsigned int v14; // [rsp+4h] [rbp-64h]\n  unsigned int v15; // [rsp+8h] [rbp-60h]\n  __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  signed int *v20; // [rsp+30h] [rbp-38h]\n\n  v2 = off_49F6D0;\n  v20 = (signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3));\n  v3 = 48LL * *v20;\n  v19 = *((_QWORD *)off_49F6D0 + 1770);\n  v4 = qword_4F9C40[*((signed int *)dest + 591)];\n  v5 = **(__int64 ***)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a1);\n  v18 = *v5;\n  v17 = v5[1];\n  *((_DWORD *)off_49F6D0 + 18) = 2 * (_BYTE)a1 & 2;\n  v6 = (signed __int64)v2 + v3 + 14176;\n  v2[19] = 2 * (a1 > 1);\n  LODWORD(v3) = a2 == 0;\n  v15 = 5 * v3 + 7;\n  v14 = 5 * v3 + 9;\n  v16 = v4;\n  v7 = v4 + 72;\n  v8 = 0;\n  for ( i = 1LL; ; ++i )\n  {\n    v10 = *(_DWORD *)(v18 + 4 * i - 4);\n    *(_DWORD *)(v6 + 4) = v10;\n    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v17 + 4 * i - 4);\n    *(_QWORD *)(v6 + 40) = sub_40CC70;\n    *(_DWORD *)(v6 + 24) = 2;\n    v11 = v14;\n    if ( i == 1 )\n      v11 = v15;\n    *(_DWORD *)v6 = v11;\n    v2[20] = a2;\n    v12 = (signed int *)v7;\n    if ( v2[6] != 1 )\n      v12 = (signed int *)(v16 + 4 * v11);\n    (*(void (__fastcall **)(signed __int64, signed __int64))(*(_QWORD *)(v19 + 24) + 120LL * *v12 + 112))(\n      v6,\n      *(_QWORD *)(v19 + 24) + 120LL * *v12);\n    v20[10] += *(_DWORD *)(v6 + 12);\n    v8 += *(_DWORD *)(v6 + 12);\n    ++*v20;\n    if ( !v10 || i > 0x40 )\n      break;\n    v6 += 48LL;\n    v2 = off_49F6D0;\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x434e60L", 
            "funcEndAddr": "0x434ffdL", 
            "funcName": "sub_434E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435000(signed int a1, int a2, int a3)\n{\n  int v3; // er12\n  int v4; // eax\n  int v5; // er14\n  int v6; // ebx\n  int v7; // eax\n  int v8; // ebp\n  int v9; // eax\n  int v10; // ebx\n  int v11; // eax\n\n  v3 = a2 == 11;\n  v4 = *((_DWORD *)dest + 589);\n  if ( a3 )\n  {\n    if ( v4 )\n      return sub_434E60(a1, a2 == 13);\n    v5 = a2 == 13;\n    goto LABEL_7;\n  }\n  v5 = a2 == 11;\n  if ( !v4 )\n  {\nLABEL_7:\n    v6 = sub_4344D0(0, a1, 0, v5);\n    goto LABEL_8;\n  }\n  v6 = sub_434CC0(a1, 0, v3);\n  v5 = a2 == 11;\nLABEL_8:\n  if ( *((_DWORD *)dest + 589) )\n    v7 = sub_434CC0(a1, 1, v3);\n  else\n    v7 = sub_4344D0(0, a1, 1, v5);\n  v8 = v6 + v7;\n  if ( *((_DWORD *)dest + 589) )\n    v9 = sub_434CC0(a1, 2, v3);\n  else\n    v9 = sub_4344D0(0, a1, 2, v5);\n  v10 = v8 + v9;\n  if ( *((_DWORD *)dest + 589) )\n    v11 = sub_434CC0(a1, 3, v3);\n  else\n    v11 = sub_4344D0(0, a1, 3, v5);\n  return (unsigned int)(v10 + v11);\n}\n", 
            "funcStartAddr": "0x435000L", 
            "funcEndAddr": "0x435134L", 
            "funcName": "sub_435000"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_435140()\n{\n  char *v0; // rbp\n  __int64 v1; // r13\n  signed __int64 v2; // rbx\n  signed __int64 v3; // rdi\n  char *v4; // r12\n  _DWORD *v5; // rax\n  unsigned int v6; // ecx\n  int v7; // er14\n  __int64 *v8; // rdx\n  unsigned int v9; // er15\n  _DWORD *v10; // rbp\n  signed int v11; // edx\n  int v12; // eax\n  signed int v13; // ecx\n  signed __int64 v14; // rdx\n  signed __int64 v15; // r14\n  __int64 v16; // rdi\n  int v17; // eax\n  unsigned int v18; // eax\n  int v19; // ecx\n  __int64 v20; // rax\n  signed __int64 v21; // rsi\n  signed int *v22; // rax\n  __int64 v23; // rcx\n  signed __int64 v24; // rdx\n  int v25; // eax\n  _DWORD *v26; // r14\n  unsigned __int64 i; // rbx\n  int v28; // ebp\n  signed __int64 v29; // rsi\n  int *v30; // rbp\n  unsigned __int64 v31; // rax\n  unsigned int v32; // er14\n  unsigned __int64 v33; // rbx\n  unsigned int v34; // ebp\n  __int64 v35; // r13\n  int v36; // eax\n  _DWORD *v37; // rcx\n  __int64 *v38; // rdx\n  int v39; // esi\n  __int64 v40; // rbx\n  __int64 v41; // r13\n  unsigned __int64 j; // r14\n  int v43; // ebp\n  signed __int64 v44; // rsi\n  unsigned int v45; // er13\n  int v46; // eax\n  _DWORD *v47; // rcx\n  __int64 *v48; // rdx\n  __int64 v49; // r14\n  __int64 v50; // r13\n  unsigned __int64 k; // rbp\n  int v52; // ebx\n  signed __int64 v53; // rsi\n  _DWORD *v55; // rcx\n  int v56; // eax\n  signed __int64 v57; // [rsp+8h] [rbp-90h]\n  unsigned int v58; // [rsp+8h] [rbp-90h]\n  int v59; // [rsp+10h] [rbp-88h]\n  char v60; // [rsp+10h] [rbp-88h]\n  int v61; // [rsp+10h] [rbp-88h]\n  _DWORD *v62; // [rsp+18h] [rbp-80h]\n  __int64 v63; // [rsp+20h] [rbp-78h]\n  __int64 v64; // [rsp+28h] [rbp-70h]\n  unsigned __int64 v65; // [rsp+28h] [rbp-70h]\n  signed __int64 v66; // [rsp+30h] [rbp-68h]\n  unsigned int v67; // [rsp+30h] [rbp-68h]\n  int *v68; // [rsp+38h] [rbp-60h]\n  unsigned int v69; // [rsp+38h] [rbp-60h]\n  __int64 v70; // [rsp+40h] [rbp-58h]\n  unsigned __int64 v71; // [rsp+40h] [rbp-58h]\n  __int64 v72; // [rsp+48h] [rbp-50h]\n  _DWORD *v73; // [rsp+48h] [rbp-50h]\n  __int64 v74; // [rsp+50h] [rbp-48h]\n  int v75; // [rsp+5Ch] [rbp-3Ch]\n  unsigned __int64 v76; // [rsp+60h] [rbp-38h]\n\n  v0 = (char *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v62 = (_DWORD *)(v2 + v1);\n  v3 = 48LL * *(signed int *)(v1 + v2);\n  v4 = (char *)off_49F6D0 + v3 + 14176;\n  v74 = *((_QWORD *)off_49F6D0 + 1770);\n  v5 = dest;\n  v63 = qword_4F9C40[*((signed int *)dest + 591)];\n  v6 = *(_DWORD *)(v1 + v2 + 72);\n  v7 = *(_DWORD *)(v1 + v2 + 460);\n  v8 = (__int64 *)**((_QWORD **)off_49F6D0 + 1768);\n  v72 = *v8;\n  v70 = v8[1];\n  v68 = (int *)(v2 + v1 + 72);\n  v9 = 0;\n  if ( v6 != 10 )\n  {\n    *(_DWORD *)((char *)off_49F6D0 + v3 + 14180) = v7;\n    if ( v6 <= 0xD && (v11 = 12800, _bittest(&v11, v6)) )\n    {\n      v12 = v5[589];\n      v13 = 6;\n      if ( !v12 )\n        *(_QWORD *)&v0[v3 + 14208] = sub_47FF50;\n      v14 = 6LL;\n    }\n    else\n    {\n      v12 = v5[589];\n      v13 = 11;\n      if ( !v12 )\n        *(_QWORD *)&v0[v3 + 14208] = sub_47FFD0;\n      v14 = 11LL;\n    }\n    v59 = v7;\n    *(_DWORD *)v4 = v13;\n    if ( v12 == 1 )\n      *(_QWORD *)&v0[v3 + 14216] = sub_40C210;\n    v15 = 120LL * *(signed int *)(v63 + 4 * v14);\n    v66 = *(_QWORD *)(v74 + 24) + v15;\n    v64 = *(_QWORD *)(v74 + 24);\n    (*(void (__fastcall **)(char *))(v66 + 112))(v4);\n    *(_DWORD *)(v1 + v2 + 36) += *(_DWORD *)&v0[v3 + 14188];\n    v9 = *(_DWORD *)&v0[v3 + 14188];\n    ++*v62;\n    v16 = (__int64)(v4 + 48);\n    v10 = (_DWORD *)(v2 + v1 + 72);\n    v17 = *v68;\n    if ( (unsigned int)(*v68 - 1) >= 3 )\n    {\n      if ( !v17 && *((_DWORD *)off_49F6D0 + 6) == 1 && *((_DWORD *)qword_4F9DC0 + 289) )\n      {\nLABEL_81:\n        if ( *(_BYTE *)(v1 + v2 + 460) & 0xF )\n        {\n          v55 = dest;\n          if ( *((_DWORD *)dest + 805) )\n          {\n            v56 = *(_DWORD *)(v1 + v2 + 572);\n            *((_DWORD *)v4 + 13) = v56;\n            *((_DWORD *)v4 + 12) = 20;\n            if ( v55[589] )\n            {\n              *((_QWORD *)v4 + 11) = sub_40ADD0;\n              (*(void (__fastcall **)(__int64, signed __int64))(v15 + v64 + 112))(v16, v66);\n            }\n            else\n            {\n              *((_QWORD *)v4 + 10) = sub_47FB70;\n              *((_DWORD *)v4 + 17) = v56;\n              *((_DWORD *)v4 + 15) = 1;\n              sub_480480(v16, *(signed int **)v66);\n            }\n            LOBYTE(v7) = v59;\n            *(_DWORD *)(v1 + v2 + 28) += *((_DWORD *)v4 + 15);\n            v9 += *((_DWORD *)v4 + 15);\n            v4 += 96;\n            ++*v62;\n            if ( v59 )\n              goto LABEL_22;\n            goto LABEL_3;\n          }\n        }\nLABEL_21:\n        v4 += 48;\n        LOBYTE(v7) = v59;\n        if ( v59 )\n          goto LABEL_22;\nLABEL_3:\n        if ( *v10 != 10 )\n          goto LABEL_29;\n        goto LABEL_22;\n      }\n      if ( !*(_DWORD *)(v1 + v2 + 576) )\n        goto LABEL_21;\n    }\n    if ( (v17 | 4) == 13 )\n      goto LABEL_21;\n    goto LABEL_81;\n  }\n  v10 = (_DWORD *)(v2 + v1 + 72);\n  if ( !v7 )\n    goto LABEL_3;\nLABEL_22:\n  *((_DWORD *)v4 + 1) = *(_DWORD *)(v1 + v2 + 8);\n  if ( *((_DWORD *)dest + 589) )\n    *((_QWORD *)v4 + 5) = sub_40BAD0;\n  else\n    *((_QWORD *)v4 + 4) = sub_47FDB0;\n  v18 = *v10 - 9;\n  if ( v18 > 4 )\n  {\n    v19 = 16;\n    v20 = 16LL;\n  }\n  else\n  {\n    v19 = dword_490EE0[v18];\n    v20 = qword_490F00[v18];\n  }\n  *(_DWORD *)v4 = v19;\n  v21 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1770) + 24LL) + 120LL * *(signed int *)(v63 + 4 * v20);\n  (*(void (__fastcall **)(char *, signed __int64))(v21 + 112))(v4, v21);\n  *(_DWORD *)(v1 + v2 + 48) += *((_DWORD *)v4 + 3);\n  v9 += *((_DWORD *)v4 + 3);\n  v4 += 48;\n  ++*v62;\nLABEL_29:\n  v22 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18173) >= -3 )\n  {\n    v23 = *((_QWORD *)off_49F6D0 + 16);\n    ***(_DWORD ***)(v23 + 8LL * *((signed int *)off_49F6D0 + 3)) = 0;\n    **(_DWORD **)(*(_QWORD *)(v23 + 8LL * v22[3]) + 8LL) = 0;\n    **(_DWORD **)(*(_QWORD *)(v23 + 8LL * v22[3]) + 16LL) = 0;\n    **(_DWORD **)(*(_QWORD *)(v23 + 8LL * v22[3]) + 24LL) = 0;\n    if ( v22[18173] >= -2 )\n    {\n      v24 = 0LL;\n      do\n      {\n        *(_DWORD *)(**(_QWORD **)(v23 + 8LL * v22[3]) + 4 * v24 + 4) = 0;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8LL * v22[3]) + 8LL) + 4 * v24 + 4) = 0;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8LL * v22[3]) + 16LL) + 4 * v24 + 4) = 0;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8LL * v22[3]) + 24LL) + 4 * v24++ + 4) = 0;\n      }\n      while ( v24 < v22[18173] + 3LL );\n    }\n  }\n  if ( *v10 != 10 )\n  {\n    v30 = (int *)(v2 + v1 + 572);\n    if ( v7 & 1 )\n    {\n      v9 += sub_435000(0, *(_DWORD *)(v1 + v2 + 472), *v30);\n      if ( !(v7 & 2) )\n      {\nLABEL_46:\n        if ( !(v7 & 4) )\n          goto LABEL_47;\n        goto LABEL_51;\n      }\n    }\n    else if ( !(v7 & 2) )\n    {\n      goto LABEL_46;\n    }\n    v9 += sub_435000(1, *(_DWORD *)(v1 + v2 + 476), *v30);\n    if ( !(v7 & 4) )\n    {\nLABEL_47:\n      if ( !(v7 & 8) )\n        return v9;\n      goto LABEL_52;\n    }\nLABEL_51:\n    v9 += sub_435000(2, *(_DWORD *)(v1 + v2 + 480), *v30);\n    if ( !(v7 & 8) )\n      return v9;\nLABEL_52:\n    v9 += sub_435000(3, *(_DWORD *)(v1 + v2 + 484), *v30);\n    return v9;\n  }\n  v25 = *((_DWORD *)dest + 589);\n  if ( v25 )\n  {\n    v60 = v7;\n    v57 = v2;\n    v26 = (_DWORD *)(v2 + v1 + 40);\n    for ( i = 1LL; ; ++i )\n    {\n      v28 = *(_DWORD *)(v72 + 4 * i - 4);\n      *((_DWORD *)v4 + 1) = v28;\n      *((_DWORD *)v4 + 2) = *(_DWORD *)(v70 + 4 * i - 4);\n      if ( v25 )\n        *((_QWORD *)v4 + 5) = sub_40CC70;\n      else\n        *((_QWORD *)v4 + 4) = sub_4800F0;\n      *((_DWORD *)v4 + 6) = 0;\n      *(_DWORD *)v4 = 7;\n      *((_DWORD *)off_49F6D0 + 20) = 1;\n      v29 = *(_QWORD *)(v74 + 24) + 120LL * *(signed int *)(v63 + 28);\n      (*(void (__fastcall **)(char *, signed __int64))(v29 + 112))(v4, v29);\n      *v26 += *((_DWORD *)v4 + 3);\n      v9 += *((_DWORD *)v4 + 3);\n      ++*v62;\n      if ( !v28 || i > 0x10 )\n        break;\n      v4 += 48;\n      v25 = *((_DWORD *)dest + 589);\n    }\n    v4 += 48;\n    v2 = v57;\n    if ( !(v60 & 0xF) )\n      return v9;\n  }\n  else\n  {\n    v9 += sub_4344D0(1, 0, 0, 0);\n    if ( !(v7 & 0xF) )\n      return v9;\n  }\n  v73 = (_DWORD *)(v2 + v1 + 40);\n  v31 = 0LL;\n  do\n  {\n    v65 = v31 + 2;\n    v32 = 0;\n    v76 = v31;\n    do\n    {\n      v67 = v32 >> 1;\n      v75 = v32 | 1;\n      v33 = v31;\n      v58 = v32;\n      do\n      {\n        v34 = v67 + (v33 & 0x7FFFFFFE);\n        v35 = 2 * (_BYTE)v33 & 2;\n        v36 = *((_DWORD *)dest + 589);\n        v71 = v33;\n        if ( v36 )\n        {\n          v37 = off_49F6D0;\n          v69 = v67 + (v33 & 0x7FFFFFFE);\n          v61 = 2 * (_BYTE)v33 & 2;\n          v38 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * v34) + 8 * v35);\n          v39 = v33;\n          v40 = *v38;\n          v41 = v38[1];\n          *((_DWORD *)off_49F6D0 + 19) = v39;\n          v37[18] = v32;\n          for ( j = 1LL; ; ++j )\n          {\n            v43 = *(_DWORD *)(v40 + 4 * j - 4);\n            *((_DWORD *)v4 + 1) = v43;\n            *((_DWORD *)v4 + 2) = *(_DWORD *)(v41 + 4 * j - 4);\n            if ( v36 )\n              *((_QWORD *)v4 + 5) = sub_40CC70;\n            else\n              *((_QWORD *)v4 + 4) = sub_4800F0;\n            *((_DWORD *)v4 + 6) = 1;\n            *(_DWORD *)v4 = 9;\n            *((_DWORD *)off_49F6D0 + 20) = 1;\n            v44 = *(_QWORD *)(v74 + 24) + 120LL * *(signed int *)(v63 + 36);\n            (*(void (__fastcall **)(char *, signed __int64))(v44 + 112))(v4, v44);\n            *v73 += *((_DWORD *)v4 + 3);\n            v9 += *((_DWORD *)v4 + 3);\n            ++*v62;\n            if ( !v43 || j > 0xF )\n              break;\n            v4 += 48;\n            v36 = *((_DWORD *)dest + 589);\n          }\n          v4 += 48;\n          v32 = v58;\n          v33 = v71;\n          v34 = v69;\n          LODWORD(v35) = v61;\n        }\n        else\n        {\n          v9 += sub_4344D0(2, v34, 2 * (_BYTE)v33 & 2, 0);\n        }\n        v45 = v35 | 1;\n        v46 = *((_DWORD *)dest + 589);\n        if ( v46 )\n        {\n          v47 = off_49F6D0;\n          v48 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * v34) + 8LL * v45);\n          v49 = *v48;\n          v50 = v48[1];\n          *((_DWORD *)off_49F6D0 + 19) = v33;\n          v47[18] = v75;\n          for ( k = 1LL; ; ++k )\n          {\n            v52 = *(_DWORD *)(v49 + 4 * k - 4);\n            *((_DWORD *)v4 + 1) = v52;\n            *((_DWORD *)v4 + 2) = *(_DWORD *)(v50 + 4 * k - 4);\n            if ( v46 )\n              *((_QWORD *)v4 + 5) = sub_40CC70;\n            else\n              *((_QWORD *)v4 + 4) = sub_4800F0;\n            *((_DWORD *)v4 + 6) = 1;\n            *(_DWORD *)v4 = 9;\n            *((_DWORD *)off_49F6D0 + 20) = 1;\n            v53 = *(_QWORD *)(v74 + 24) + 120LL * *(signed int *)(v63 + 36);\n            (*(void (__fastcall **)(char *, signed __int64))(v53 + 112))(v4, v53);\n            *v73 += *((_DWORD *)v4 + 3);\n            v9 += *((_DWORD *)v4 + 3);\n            ++*v62;\n            if ( !v52 || k > 0xF )\n              break;\n            v4 += 48;\n            v46 = *((_DWORD *)dest + 589);\n          }\n          v4 += 48;\n          v32 = v58;\n          v33 = v71;\n        }\n        else\n        {\n          v9 += sub_4344D0(2, v34, v45, 0);\n        }\n        ++v33;\n      }\n      while ( v33 < v65 );\n      v32 += 2;\n      v31 = v76;\n    }\n    while ( v32 < 4 );\n    v31 = v65;\n  }\n  while ( v65 < 4 );\n  return v9;\n}\n", 
            "funcStartAddr": "0x435140L", 
            "funcEndAddr": "0x435a4eL", 
            "funcName": "sub_435140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435A50(unsigned int a1, unsigned int a2)\n{\n  signed int v2; // ebp\n  unsigned int v3; // ebx\n  signed int v4; // er12\n  int v6; // [rsp+8h] [rbp-40h]\n  int v7; // [rsp+Ch] [rbp-3Ch]\n  int v8; // [rsp+10h] [rbp-38h]\n  int v9; // [rsp+14h] [rbp-34h]\n\n  v2 = *((_DWORD *)off_49F6D0 + 3);\n  v3 = 0;\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), a1, a2, -1, 0, &v6);\n  v4 = 1;\n  if ( v6 )\n  {\n    if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n      || !*((_DWORD *)dest + 591)\n      || (v6 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v7)) != 0 )\n    {\n      v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v7) + 8LL * v8) + 4LL * v9);\n      v4 = 2;\n    }\n  }\n  sub_437270(v2, a1, a2, 0, -1, &v6);\n  if ( v6 )\n  {\n    if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n      || !*((_DWORD *)dest + 591)\n      || (v6 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v7)) != 0 )\n    {\n      v3 += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v7) + 8LL * v8) + 4LL * v9);\n      if ( v4 == 2 )\n        v3 = (signed int)(v3 + ((v3 + 1) >> 31) + 1) >> 1;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x435a50L", 
            "funcEndAddr": "0x435ba9L", 
            "funcName": "sub_435A50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435BB0(signed int a1, int a2)\n{\n  signed int v2; // er15\n  int v3; // er12\n  int v4; // ebp\n  unsigned int v5; // er14\n  signed int v6; // esi\n  _QWORD *v7; // rax\n  int v8; // ebx\n  int v9; // ebx\n  int v10; // ebp\n  signed int v11; // esi\n  int v13; // [rsp+8h] [rbp-50h]\n  int v14; // [rsp+Ch] [rbp-4Ch]\n  int v15; // [rsp+10h] [rbp-48h]\n  int v16; // [rsp+14h] [rbp-44h]\n  int v17; // [rsp+24h] [rbp-34h]\n\n  v2 = *((_DWORD *)off_49F6D0 + 3);\n  if ( *((_DWORD *)off_49F6D0 + 18175) == 3 )\n  {\n    v3 = dword_490E30[a2];\n    v4 = a2 - v3;\n    v5 = 0;\n    sub_437320(v2, a1, a2 - v3, -1, 0, &v13);\n    v6 = 1;\n    if ( v13 )\n    {\n      if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n        || !*((_DWORD *)dest + 591)\n        || (v13 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v14)) != 0 )\n      {\n        v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v14) + 8LL * v15)\n                       + 4 * (v3 + (signed __int64)v16));\n        v6 = 2;\n      }\n    }\n    v17 = v6;\n    sub_437320(v2, a1, v4, 0, -1, &v13);\n    if ( v13 )\n    {\n      if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n        || !*((_DWORD *)dest + 591)\n        || (v13 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v14)) != 0 )\n      {\n        v7 = (_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v14);\n        v8 = v15;\n        goto LABEL_22;\n      }\n    }\n  }\n  else\n  {\n    v9 = a1 / 2;\n    v10 = a2 - 4;\n    v5 = 0;\n    sub_437320(v2, a1 % 2, a2 - 4, -1, 0, &v13);\n    v11 = 1;\n    if ( v13 )\n    {\n      if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n        || !*((_DWORD *)dest + 591)\n        || (v13 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v14)) != 0 )\n      {\n        v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v14) + 8 * (v15 + 2LL * v9))\n                       + 4LL * v16\n                       + 16);\n        v11 = 2;\n      }\n    }\n    v17 = v11;\n    sub_437320(v2, a1 % 2, v10, 0, -1, &v13);\n    if ( v13 )\n    {\n      if ( !*(_DWORD *)(qword_4F9DB8 + 224)\n        || !*((_DWORD *)dest + 591)\n        || (v13 &= *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v14)) != 0 )\n      {\n        v7 = (_QWORD *)(*((_QWORD *)off_49F6D0 + 16) + 8LL * v14);\n        v8 = v15 + 2 * v9;\n        v3 = 4;\nLABEL_22:\n        v5 += *(_DWORD *)(*(_QWORD *)(*v7 + 8LL * v8) + 4 * (v16 + (signed __int64)v3));\n        if ( v17 == 2 )\n          v5 = (signed int)(v5 + ((v5 + 1) >> 31) + 1) >> 1;\n        return v5;\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x435bb0L", 
            "funcEndAddr": "0x435e8eL", 
            "funcName": "sub_435BB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435E90(_DWORD *a1)\n{\n  signed int v1; // er15\n  int v2; // ebx\n  int *v3; // rbp\n  signed __int64 v4; // r14\n  int v5; // er14\n  _DWORD *v6; // rbp\n  int v7; // er8\n  int v8; // ebx\n  unsigned __int64 v9; // rcx\n  int v10; // edx\n  int v11; // esi\n  int v12; // ebx\n  int v13; // eax\n  _DWORD *v14; // rdi\n  char *v15; // r10\n  unsigned __int64 v16; // r9\n  signed __int64 v17; // r15\n  __int64 v18; // r8\n  __int64 v19; // r9\n  char *v20; // r14\n  __int64 v21; // r10\n  __int64 v22; // rax\n  __int64 v23; // r11\n  __int64 v24; // rbx\n  __int64 v25; // rcx\n  signed __int64 v26; // rdi\n  __int64 v27; // r14\n  char *v28; // rbx\n  int v29; // esi\n  signed __int64 v30; // rax\n  int *v31; // r11\n  int v32; // er10\n  int v33; // edi\n  int v34; // ecx\n  int v35; // edx\n  int v36; // er12\n  signed __int64 v37; // rax\n  int v38; // er15\n  int v39; // er8\n  int v40; // edx\n  int v41; // edi\n  int v42; // er15\n  int v43; // ebp\n  int v44; // er12\n  int v45; // edx\n  int v46; // er10\n  int v47; // ebp\n  int v48; // ecx\n  int v49; // er15\n  int v50; // edx\n  int v51; // edi\n  int v52; // ecx\n  int v53; // er13\n  int v54; // er12\n  int v55; // edi\n  int v56; // edx\n  int v57; // er15\n  int v58; // edx\n  int v59; // ebp\n  int v60; // er13\n  int v61; // er9\n  int v62; // edi\n  int v63; // ebp\n  int v64; // edx\n  __int64 i; // rcx\n  int v66; // eax\n  int v67; // edx\n  int v68; // er10\n  int v69; // ebp\n  int v70; // er8\n  int v71; // edi\n  int v72; // er8\n  int v73; // eax\n  int v74; // eax\n  int v75; // eax\n  int v76; // edx\n  int v77; // edx\n  int v78; // esi\n  __m128i v79; // xmm2\n  __m128i v80; // xmm0\n  __m128i v81; // xmm3\n  __m128i v82; // xmm1\n  __m128i v83; // xmm4\n  __m128i v84; // xmm3\n  __m128i v85; // xmm5\n  __m128i v86; // xmm4\n  __m128i v87; // xmm5\n  __m128i v88; // xmm6\n  __m128i v89; // xmm2\n  __m128i v90; // xmm1\n  __m128i v91; // xmm0\n  unsigned __int64 v92; // rax\n  __m128i v93; // xmm0\n  __m128i v94; // xmm1\n  __m128i v95; // xmm2\n  int v96; // edx\n  int v97; // edi\n  int v98; // ecx\n  int v99; // edx\n  int v100; // edi\n  __m128i v101; // xmm1\n  int v102; // edx\n  int v103; // er8\n  int v104; // ebx\n  int v105; // edx\n  int v106; // ebp\n  bool v108; // [rsp+3h] [rbp-685h]\n  signed int v109; // [rsp+4h] [rbp-684h]\n  int v110; // [rsp+8h] [rbp-680h]\n  int v111; // [rsp+Ch] [rbp-67Ch]\n  _DWORD *v112; // [rsp+10h] [rbp-678h]\n  _DWORD *v113; // [rsp+18h] [rbp-670h]\n  _DWORD *v114; // [rsp+20h] [rbp-668h]\n  unsigned __int64 v115; // [rsp+28h] [rbp-660h]\n  char *v116; // [rsp+30h] [rbp-658h]\n  __int64 v117; // [rsp+38h] [rbp-650h]\n  char *v118; // [rsp+40h] [rbp-648h]\n  signed __int64 v119; // [rsp+48h] [rbp-640h]\n  int v120; // [rsp+50h] [rbp-638h]\n  int v121; // [rsp+54h] [rbp-634h]\n  int v122; // [rsp+58h] [rbp-630h]\n  int v123; // [rsp+5Ch] [rbp-62Ch]\n  __int128 v124; // [rsp+60h] [rbp-628h]\n  __int128 v125; // [rsp+70h] [rbp-618h]\n  __int128 v126; // [rsp+80h] [rbp-608h]\n  int v127; // [rsp+90h] [rbp-5F8h]\n  int v128; // [rsp+94h] [rbp-5F4h]\n  int v129; // [rsp+98h] [rbp-5F0h]\n  int v130[5]; // [rsp+9Ch] [rbp-5ECh]\n  int v131; // [rsp+B0h] [rbp-5D8h]\n  int v132; // [rsp+B4h] [rbp-5D4h]\n  int v133; // [rsp+C8h] [rbp-5C0h]\n  int v134; // [rsp+248h] [rbp-440h]\n  int v135; // [rsp+24Ch] [rbp-43Ch]\n  unsigned int v136; // [rsp+250h] [rbp-438h]\n  unsigned int v137; // [rsp+254h] [rbp-434h]\n  unsigned int v138; // [rsp+258h] [rbp-430h]\n  unsigned int v139; // [rsp+25Ch] [rbp-42Ch]\n  int v140; // [rsp+260h] [rbp-428h]\n  int v141[11]; // [rsp+264h] [rbp-424h]\n  unsigned int v142; // [rsp+290h] [rbp-3F8h]\n  unsigned int v143; // [rsp+294h] [rbp-3F4h]\n  unsigned int v144; // [rsp+298h] [rbp-3F0h]\n  unsigned int v145; // [rsp+29Ch] [rbp-3ECh]\n  unsigned int v146; // [rsp+2D0h] [rbp-3B8h]\n  unsigned int v147; // [rsp+2D4h] [rbp-3B4h]\n  unsigned int v148; // [rsp+2D8h] [rbp-3B0h]\n  unsigned int v149; // [rsp+2DCh] [rbp-3ACh]\n  unsigned int v150; // [rsp+310h] [rbp-378h]\n  unsigned int v151; // [rsp+314h] [rbp-374h]\n  unsigned int v152; // [rsp+318h] [rbp-370h]\n  unsigned int v153; // [rsp+31Ch] [rbp-36Ch]\n  char v154; // [rsp+380h] [rbp-308h]\n\n  v112 = a1;\n  v1 = *((_DWORD *)off_49F6D0 + 3);\n  v2 = -1;\n  v3 = &v131;\n  v4 = 17LL;\n  do\n  {\n    sub_437200(v1, -1, v2++, 1, v3);\n    v3 += 6;\n    --v4;\n  }\n  while ( v4 );\n  v5 = 0;\n  sub_437200(v1, 0, -1, 1, &v129);\n  v6 = dest;\n  v7 = v129;\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( v129 )\n      v5 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v130[0]);\n    v8 = 1;\n    v9 = -384LL;\n    do\n    {\n      v10 = 0;\n      v11 = 0;\n      if ( *(int *)((char *)&v134 + v9) )\n        v11 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * *(int *)((char *)&v135 + v9));\n      v12 = v11 & v8;\n      if ( *(int *)((char *)&v140 + v9) )\n        v10 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v141[v9 / 4]);\n      v8 = v10 & v12;\n      v9 += 48LL;\n    }\n    while ( v9 );\n    if ( v131 )\n      v13 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v132);\n    else\n      v13 = 0;\n    v7 = v5;\n  }\n  else\n  {\n    v13 = v131;\n    v8 = v133;\n  }\n  *a1 = 2;\n  v14 = off_49F6D0;\n  v108 = v8 != 0 && v7 != 0 && v13 != 0;\n  v117 = qword_4F9EB0;\n  v15 = (char *)off_49F6D0 + 4794;\n  v109 = 999999;\n  v16 = 0LL;\n  v17 = 68719476672LL;\n  v114 = v6;\n  v111 = v8;\n  v110 = v7;\n  v113 = off_49F6D0;\n  while ( 1 )\n  {\n    if ( v6[599] && v14[6] == 2 )\n      goto LABEL_24;\n    if ( v16 > 1 || !v6[603] )\n      break;\nLABEL_61:\n    ++v16;\n    v15 += 512;\n    if ( v16 == 4 )\n      return v109 / 2;\n  }\n  if ( v16 != 3 || !v6[604] )\n  {\nLABEL_24:\n    if ( (unsigned int)v16 | v7 && (v16 != 1 || v8 != 0) )\n    {\n      if ( (v108 || v16 != 3) != 1 )\n        return v109 / 2;\n      v115 = v16;\n      v18 = (signed int)v14[42];\n      v19 = (signed int)v14[43];\n      v116 = v15;\n      v20 = v15;\n      v21 = 0LL;\n      do\n      {\n        v22 = *(_QWORD *)(v117 + 8 * (v21 + v19));\n        v23 = v21 & 3;\n        v24 = (unsigned int)v21 >> 2;\n        v25 = 0LL;\n        do\n        {\n          v26 = v17 & 16 * v25;\n          *(unsigned int *)((char *)&v136 + 256 * (unsigned __int64)(v25 & 2) + 16 * v23 + 4 * v24 + v26) = *(unsigned __int16 *)(v22 + 2 * v18 + 2 * v25) - *(unsigned __int16 *)&v20[2 * v25 - 2];\n          *(unsigned int *)((char *)&v136 + 256 * (unsigned __int64)(((_BYTE)v25 + 1) & 3) + 16 * v23 + 4 * v24 + v26) = *(unsigned __int16 *)(v22 + 2 * v18 + 2 + 2 * v25) - *(unsigned __int16 *)&v20[2 * v25];\n          v25 += 2LL;\n        }\n        while ( v25 != 16 );\n        ++v21;\n        v20 += 32;\n      }\n      while ( v21 != 16 );\n      v27 = 0LL;\n      v28 = &v154;\n      v29 = 0;\n      do\n      {\n        v118 = v28;\n        v30 = 0LL;\n        do\n        {\n          v119 = v30;\n          v31 = (int *)(&v136 + 16 * v30);\n          v32 = v31[v27 + 192];\n          v33 = v31[v27];\n          v34 = v31[v27 + 4];\n          v35 = v31[v27 + 64];\n          v36 = v31[v27 + 128];\n          v37 = v17;\n          v38 = v36 + v35;\n          v39 = v36 + v35 + v32 + v33;\n          v31[v27] = v39;\n          v40 = v35 - v36;\n          v31[v27 + 128] = v32 + v33 - v38;\n          v41 = v33 - v32;\n          v31[v27 + 64] = v40 + v41;\n          v31[v27 + 192] = v41 - v40;\n          v42 = v31[v27 + 196];\n          v43 = v31[v27 + 68];\n          v44 = v31[v27 + 132];\n          v45 = v44 + v43;\n          v46 = v44 + v43 + v42 + v34;\n          v31[v27 + 4] = v46;\n          v47 = v43 - v44;\n          v31[v27 + 132] = v42 + v34 - v45;\n          v48 = v34 - v42;\n          v31[v27 + 68] = v48 + v47;\n          v31[v27 + 196] = v48 - v47;\n          v49 = v31[v27 + 200];\n          v50 = v31[v27 + 8];\n          v51 = v31[v27 + 72];\n          v52 = v31[v27 + 136];\n          v53 = v52 + v51;\n          v54 = v52 + v51 + v49 + v50;\n          v31[v27 + 8] = v54;\n          v55 = v51 - v52;\n          v31[v27 + 136] = v49 + v50 - v53;\n          v56 = v50 - v49;\n          v31[v27 + 72] = v55 + v56;\n          v31[v27 + 200] = v56 - v55;\n          v57 = v31[v27 + 204];\n          v58 = v31[v27 + 12];\n          v59 = v31[v27 + 76];\n          v60 = v31[v27 + 140];\n          v61 = v60 + v59;\n          v62 = v60 + v59 + v57 + v58;\n          v31[v27 + 12] = v62;\n          v63 = v59 - v60;\n          v31[v27 + 140] = v57 + v58 - v61;\n          v64 = v58 - v57;\n          v17 = v37;\n          v31[v27 + 76] = v64 + v63;\n          v31[v27 + 204] = v64 - v63;\n          for ( i = 0LL; ; i += 256LL )\n          {\n            v66 = v54 + v46;\n            v67 = v54 + v46 + v62 + v39;\n            *(_DWORD *)&v28[i - 304] = v67;\n            v68 = v46 - v54;\n            v69 = v62 + v39 - v66;\n            *(_DWORD *)&v28[i - 272] = v69;\n            v70 = v39 - v62;\n            v71 = v68 + v70;\n            *(_DWORD *)&v28[i - 288] = v68 + v70;\n            v72 = v70 - v68;\n            *(_DWORD *)&v28[i - 256] = v72;\n            if ( i )\n            {\n              v73 = -v67;\n              if ( -v67 < 1 )\n                v73 = v67;\n              v29 += v73;\n            }\n            v74 = -v71;\n            if ( -v71 < 1 )\n              v74 = v71;\n            v75 = v29 + v74;\n            v76 = -v69;\n            if ( -v69 < 1 )\n              v76 = v69;\n            v77 = v75 + v76;\n            v78 = -v72;\n            if ( -v72 < 1 )\n              v78 = v72;\n            v29 = v77 + v78;\n            if ( i == 768 )\n              break;\n            v39 = *(_DWORD *)&v28[i - 48];\n            v46 = *(_DWORD *)&v28[i - 32];\n            v62 = *(_DWORD *)&v28[i];\n            v54 = *(_DWORD *)&v28[i - 16];\n          }\n          v30 = v119 + 1;\n          v28 += 64;\n        }\n        while ( v119 != 3 );\n        ++v27;\n        v28 = v118 + 4;\n      }\n      while ( v27 != 4 );\n      v79 = _mm_unpacklo_epi64(\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v138), _mm_cvtsi32_si128(v137)),\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v139), _mm_cvtsi32_si128(v136)));\n      v80 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v79, 0x1Fu), 0x1Eu), v79), 2u);\n      v81 = _mm_unpacklo_epi64(\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v144), _mm_cvtsi32_si128(v143)),\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v145), _mm_cvtsi32_si128(v142)));\n      v82 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v81, 0x1Fu), 0x1Eu), v81), 2u);\n      v83 = _mm_unpacklo_epi64(\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v148), _mm_cvtsi32_si128(v147)),\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v149), _mm_cvtsi32_si128(v146)));\n      v84 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v83, 0x1Fu), 0x1Eu), v83), 2u);\n      v85 = _mm_unpacklo_epi64(\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v152), _mm_cvtsi32_si128(v151)),\n              _mm_unpacklo_epi32(_mm_cvtsi32_si128(v153), _mm_cvtsi32_si128(v150)));\n      v86 = _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v85, 0x1Fu), 0x1Eu), v85), 2u);\n      v87 = _mm_add_epi32(v86, v80);\n      v88 = _mm_add_epi32(v84, v82);\n      v89 = _mm_add_epi32(v88, v87);\n      v120 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v89, 231));\n      v90 = _mm_sub_epi32(v82, v84);\n      v91 = _mm_sub_epi32(v80, v86);\n      v121 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v89, 229));\n      v122 = _mm_cvtsi128_si32(v89);\n      v123 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v89, 78));\n      _mm_store_si128((__m128i *)&v125, _mm_shuffle_epi32(_mm_sub_epi32(v87, v88), 135));\n      _mm_store_si128((__m128i *)&v124, _mm_shuffle_epi32(_mm_add_epi32(v90, v91), 135));\n      _mm_store_si128((__m128i *)&v126, _mm_shuffle_epi32(_mm_sub_epi32(v91, v90), 135));\n      v92 = -48LL;\n      v15 = v116;\n      v16 = v115;\n      while ( 1 )\n      {\n        v93 = _mm_shuffle_epi32(v89, 78);\n        v94 = _mm_shuffle_epi32(v89, 215);\n        v95 = _mm_add_epi64(v93, v94);\n        v96 = _mm_cvtsi128_si32(v95);\n        v97 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v95, 78));\n        v98 = -(v97 + v96);\n        if ( v98 < 1 )\n          v98 = v97 + v96;\n        *(_DWORD *)((char *)&v126 + v92) = v97 + v96;\n        v99 = v96 - v97;\n        v100 = -v99;\n        if ( -v99 < 1 )\n          v100 = v99;\n        v101 = _mm_sub_epi64(v94, v93);\n        *(_DWORD *)((char *)&v126 + v92 + 8) = v99;\n        v102 = _mm_cvtsi128_si32(v101);\n        v103 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v101, 78));\n        v104 = -(v103 + v102);\n        if ( v104 < 1 )\n          v104 = v103 + v102;\n        *(_DWORD *)((char *)&v126 + v92 + 4) = v103 + v102;\n        v105 = v102 - v103;\n        v106 = -v105;\n        if ( -v105 < 1 )\n          v106 = v105;\n        *(_DWORD *)((char *)&v126 + v92 + 12) = v105;\n        v29 += v106 + v100 + v104 + v98;\n        if ( !v92 )\n          break;\n        v89 = _mm_unpacklo_epi64(\n                _mm_unpacklo_epi32(\n                  _mm_cvtsi32_si128(*(int *)((char *)&v129 + v92)),\n                  _mm_cvtsi32_si128(*(int *)((char *)&v128 + v92))),\n                _mm_unpacklo_epi32(_mm_cvtsi32_si128(v130[v92 / 4]), _mm_cvtsi32_si128(*(int *)((char *)&v127 + v92))));\n        v92 += 16LL;\n      }\n      v6 = v114;\n      v8 = v111;\n      v7 = v110;\n      v14 = v113;\n      if ( v29 < v109 )\n      {\n        *v112 = v115;\n        v109 = v29;\n      }\n    }\n    goto LABEL_61;\n  }\n  return v109 / 2;\n}\n", 
            "funcStartAddr": "0x435e90L", 
            "funcEndAddr": "0x4366a4L", 
            "funcName": "sub_435E90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_436700()\n{\n  _DWORD *v0; // rbx\n  __int64 v1; // rcx\n  __int64 v2; // rsi\n  signed __int64 v3; // rdi\n  int v4; // er8\n  unsigned int v5; // er14\n  int v6; // er9\n  signed int v7; // er10\n  bool v8; // sf\n  signed __int64 v9; // r8\n  int v10; // ebp\n  int v11; // er15\n  _BOOL4 v12; // er11\n  _BOOL4 v13; // eax\n  int v14; // ebp\n  _BOOL4 v15; // eax\n  signed __int64 result; // rax\n\n  v0 = off_49F6D0;\n  v1 = *((signed int *)off_49F6D0 + 3);\n  v2 = *((_QWORD *)off_49F6D0 + 1771);\n  v3 = 632 * v1;\n  *(_OWORD *)(v2 + 632 * v1 + 56) = 0LL;\n  if ( !v0[18100] )\n  {\n    v9 = v1 - 1;\n    *(_DWORD *)(v2 + v3 + 536) = v1 - 1;\n    v5 = v0[18117];\n    v6 = v1 - v5;\n    *(_DWORD *)(v2 + v3 + 540) = v1 - v5;\n    v14 = v1 - v5 + 1;\n    *(_DWORD *)(v2 + v3 + 544) = v14;\n    v11 = v1 - v5 - 1;\n    *(_DWORD *)(v2 + v3 + 548) = v11;\n    v7 = 0;\n    v12 = 0;\n    if ( (signed int)v1 > 0 )\n    {\n      v12 = 0;\n      if ( v0[18121] >= (signed int)v1 )\n      {\n        if ( v0[18159] || (v12 = 0, *(_DWORD *)(v2 + 632 * v9 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n          v12 = (unsigned int)v1 % v5 != 0;\n      }\n    }\n    *(_DWORD *)(v2 + v3 + 552) = v12;\n    if ( v6 >= 0 && v0[18121] > v6 && (v0[18159] || *(_DWORD *)(v2 + 632LL * v6 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n      v7 = 1;\n    *(_DWORD *)(v2 + v3 + 556) = v7;\n    v15 = 0;\n    if ( v14 >= 0 && v0[18121] > v14 && (v0[18159] || *(_DWORD *)(v2 + 632LL * v14 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n      v15 = ((signed int)v1 + 1) % v5 != 0;\n    *(_DWORD *)(v2 + v3 + 560) = v15;\n    if ( v11 < 0 || v0[18121] <= v11 )\n      goto LABEL_41;\n    if ( !v0[18159] )\n      goto LABEL_39;\nLABEL_40:\n    LOBYTE(result) = (unsigned int)v1 % v5 != 0;\n    goto LABEL_42;\n  }\n  v4 = v1 + ((unsigned int)v1 >> 31);\n  LODWORD(v1) = (signed int)v1 / 2;\n  v4 &= 0xFFFFFFFE;\n  *(_DWORD *)(v2 + v3 + 536) = v4 - 2;\n  v5 = v0[18117];\n  v6 = 2 * (v1 - v5);\n  v7 = 0;\n  *(_DWORD *)(v2 + v3 + 540) = v6;\n  v8 = v4 - 2 < 0;\n  LODWORD(v9) = v4 - 2;\n  v10 = v6 + 2;\n  *(_DWORD *)(v2 + v3 + 544) = v6 + 2;\n  v11 = v6 - 2;\n  *(_DWORD *)(v2 + v3 + 548) = v6 - 2;\n  v12 = 0;\n  if ( !v8 )\n  {\n    v12 = 0;\n    if ( v0[18121] > (signed int)v9 )\n    {\n      if ( v0[18159] || (v12 = 0, *(_DWORD *)(v2 + 632LL * (signed int)v9 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n        v12 = (unsigned int)v1 % v5 != 0;\n    }\n  }\n  *(_DWORD *)(v2 + v3 + 552) = v12;\n  if ( !(((_DWORD)v1 - v5) & 0x40000000)\n    && v0[18121] > v6\n    && (v0[18159] || *(_DWORD *)(v2 + 632LL * v6 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n  {\n    v7 = 1;\n  }\n  *(_DWORD *)(v2 + v3 + 556) = v7;\n  v13 = 0;\n  if ( v10 >= 0 && v0[18121] > v10 && (v0[18159] || *(_DWORD *)(v2 + 632LL * v10 + 4) == *(_DWORD *)(v2 + v3 + 4)) )\n    v13 = ((signed int)v1 + 1) % v5 != 0;\n  *(_DWORD *)(v2 + v3 + 560) = v13;\n  if ( v11 < 0 || v0[18121] <= v11 )\n    goto LABEL_41;\n  if ( v0[18159] )\n    goto LABEL_40;\nLABEL_39:\n  if ( *(_DWORD *)(v2 + 632LL * v11 + 4) == *(_DWORD *)(v2 + v3 + 4) )\n    goto LABEL_40;\nLABEL_41:\n  LOBYTE(result) = 0;\nLABEL_42:\n  result = (unsigned __int8)result;\n  *(_DWORD *)(v2 + v3 + 564) = (unsigned __int8)result;\n  if ( v12 )\n  {\n    result = v2 + v3 + 64;\n    *(_QWORD *)result = v2 + 632LL * (signed int)v9;\n  }\n  if ( v7 )\n  {\n    result = v2 + v3 + 56;\n    *(_QWORD *)result = v2 + 632LL * v6;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x436700L", 
            "funcEndAddr": "0x436a08L", 
            "funcName": "sub_436700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436A10(unsigned int a1, unsigned int *a2, _DWORD *a3)\n{\n  _DWORD *v3; // r9\n  __int64 result; // rax\n\n  v3 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    *a2 = (unsigned int)((signed int)a1 / 2) % *((_DWORD *)off_49F6D0 + 18117);\n    result = (signed int)a1 % 2 + 2 * ((unsigned int)((signed int)a1 / 2) / v3[18117]);\n  }\n  else\n  {\n    *a2 = a1 % *((_DWORD *)off_49F6D0 + 18117);\n    result = a1 / v3[18117];\n  }\n  *a3 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x436a10L", 
            "funcEndAddr": "0x436a72L", 
            "funcName": "sub_436A10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436A80(unsigned int a1, unsigned int *a2, _DWORD *a3)\n{\n  _DWORD *v3; // r9\n  __int64 result; // rax\n\n  v3 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    *a2 = (unsigned int)((signed int)a1 / 2) % *((_DWORD *)off_49F6D0 + 18117);\n    result = (signed int)a1 % 2 + 2 * ((unsigned int)((signed int)a1 / 2) / v3[18117]);\n  }\n  else\n  {\n    *a2 = a1 % *((_DWORD *)off_49F6D0 + 18117);\n    result = a1 / v3[18117];\n  }\n  *a3 = result;\n  *a2 *= 16;\n  *a3 *= 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x436a80L", 
            "funcEndAddr": "0x436ae7L", 
            "funcName": "sub_436A80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436AF0(unsigned int a1, signed int a2, signed int a3, int a4, _DWORD *a5)\n{\n  signed int v5; // er9\n  _DWORD *v6; // rbx\n  __int64 result; // rax\n  signed int v8; // er10\n  signed int v9; // er11\n  signed __int64 v10; // rdx\n  unsigned int *v11; // rax\n  signed __int64 v12; // rdx\n  signed __int64 v13; // rdx\n  signed __int64 v14; // rdx\n  int v15; // er10\n  int v16; // er9\n  unsigned int v17; // er11\n  unsigned int v18; // edi\n  int v19; // esi\n  int v20; // edi\n  int v21; // esi\n  int v22; // ecx\n\n  v5 = a3;\n  v6 = off_49F6D0;\n  result = *((_QWORD *)off_49F6D0 + 1771);\n  v8 = 16;\n  v9 = 16;\n  if ( !a4 )\n  {\n    v8 = *((_DWORD *)off_49F6D0 + 18177);\n    v9 = *((_DWORD *)off_49F6D0 + 18178);\n    if ( (a2 & a3) >= 0 )\n      goto LABEL_3;\nLABEL_8:\n    v12 = 632LL * a1;\n    a5[1] = *(_DWORD *)(result + v12 + 548);\n    v11 = (unsigned int *)(v12 + result + 564);\n    goto LABEL_20;\n  }\n  if ( (a2 & a3) < 0 )\n    goto LABEL_8;\nLABEL_3:\n  if ( a2 < 0 && a3 >= 0 && v9 > a3 )\n  {\n    v10 = 632LL * a1;\n    a5[1] = *(_DWORD *)(result + v10 + 536);\n    v11 = (unsigned int *)(v10 + result + 552);\nLABEL_20:\n    result = *v11;\n    *a5 = result;\n    if ( !(_DWORD)result && !v6[18159] )\n      return result;\n    goto LABEL_22;\n  }\n  if ( a2 >= 0 && a3 < 0 && v8 > a2 )\n  {\n    v13 = 632LL * a1;\n    a5[1] = *(_DWORD *)(result + v13 + 540);\n    v11 = (unsigned int *)(v13 + result + 556);\n    goto LABEL_20;\n  }\n  if ( (a2 | a3) < 0 || v8 <= a2 || v9 <= a3 )\n  {\n    if ( a3 < 0 && v8 <= a2 )\n    {\n      v14 = 632LL * a1;\n      a5[1] = *(_DWORD *)(result + v14 + 544);\n      v11 = (unsigned int *)(v14 + result + 560);\n      goto LABEL_20;\n    }\n    *a5 = 0;\n    if ( !v6[18159] )\n      return result;\n  }\n  else\n  {\n    a5[1] = a1;\n    *a5 = 1;\n  }\nLABEL_22:\n  v15 = (v8 + a2) % v8;\n  a5[2] = v15;\n  v16 = (v9 + v5) % v9;\n  a5[3] = v16;\n  v17 = a5[1];\n  if ( v6[18100] )\n  {\n    v18 = (unsigned int)((signed int)v17 / 2) % v6[18117];\n    a5[4] = v18;\n    result = (unsigned int)((signed int)v17 / 2) / v6[18117];\n    v19 = (signed int)v17 % 2 + 2 * result;\n  }\n  else\n  {\n    v18 = v17 % v6[18117];\n    a5[4] = v18;\n    result = v17 / v6[18117];\n    v19 = v17 / v6[18117];\n  }\n  v20 = 16 * v18;\n  a5[4] = v20;\n  v21 = 16 * v19;\n  a5[5] = v21;\n  if ( a4 )\n  {\n    a5[4] = v15 + v20;\n  }\n  else\n  {\n    a5[4] = v15 + v20 / (16 / v6[18177]);\n    v22 = 16 / v6[18178];\n    result = (unsigned int)(v21 / v22);\n    v21 /= v22;\n  }\n  a5[5] = v16 + v21;\n  return result;\n}\n", 
            "funcStartAddr": "0x436af0L", 
            "funcEndAddr": "0x436cefL", 
            "funcName": "sub_436AF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436CF0(unsigned int a1, signed int a2, int a3, int a4, _DWORD *a5)\n{\n  int v5; // er9\n  _DWORD *v6; // rbx\n  __int64 result; // rax\n  signed int v8; // er10\n  signed int v9; // er11\n  signed __int64 v10; // rdx\n  int v11; // ebp\n  __int64 v12; // r14\n  int v13; // edx\n  signed int v14; // ebp\n  signed __int64 v15; // rdx\n  int v16; // er14\n  int v17; // edx\n  int v18; // ebp\n  int v19; // edx\n  signed __int64 v20; // rdx\n  int v21; // edi\n  __int64 v22; // rbp\n  __int64 v23; // rdi\n  int v24; // edx\n  int v25; // er10\n  int v26; // er9\n  unsigned int v27; // er11\n  unsigned int v28; // esi\n  int v29; // edi\n  int v30; // esi\n  int v31; // edi\n\n  v5 = a3;\n  v6 = off_49F6D0;\n  result = *((_QWORD *)off_49F6D0 + 1771);\n  v8 = 16;\n  v9 = 16;\n  if ( !a4 )\n  {\n    v8 = *((_DWORD *)off_49F6D0 + 18177);\n    v9 = *((_DWORD *)off_49F6D0 + 18178);\n  }\n  *a5 = 0;\n  if ( v9 > a3 && (a3 < 0 || v8 > a2) )\n  {\n    if ( a2 >= 0 )\n    {\n      if ( v8 <= a2 )\n      {\n        v14 = -1;\n        if ( a3 >= 0 )\n          goto LABEL_69;\n        v15 = 632LL * a1;\n        if ( *(_DWORD *)(result + v15 + 532) )\n        {\n          v16 = *(_DWORD *)(result + v15 + 544);\n          if ( !(a1 & 1) )\n          {\n            a5[1] = v16;\n            v17 = *(_DWORD *)(result + v15 + 560);\n            *a5 = v17;\n            if ( v17 )\n            {\n              if ( !*(_DWORD *)(result + 632LL * v16 + 532) )\n              {\n                a5[1] = v16 + 1;\n                v5 *= 2;\n              }\n              goto LABEL_74;\n            }\n            goto LABEL_69;\n          }\n          a5[1] = v16 + 1;\n        }\n        else\n        {\n          if ( a1 & 1 )\n          {\n            *a5 = 0;\n            goto LABEL_69;\n          }\n          a5[1] = *(_DWORD *)(result + v15 + 544) + 1;\n        }\n        v21 = *(_DWORD *)(result + v15 + 560);\n      }\n      else\n      {\n        if ( a3 >= 0 )\n        {\n          if ( !a3 && v6[18159] == 2 )\n          {\n            a5[1] = *(_DWORD *)(result + 632LL * a1 + 540) + 1;\n            *a5 = 1;\n            v5 = -1;\n            goto LABEL_74;\n          }\nLABEL_73:\n          a5[1] = a1;\n          *a5 = 1;\n          goto LABEL_74;\n        }\n        v20 = 632LL * a1;\n        if ( *(_DWORD *)(result + v20 + 532) )\n        {\n          v18 = *(_DWORD *)(result + v20 + 540);\n          if ( !(a1 & 1) )\n          {\n            a5[1] = v18;\n            v19 = *(_DWORD *)(result + v20 + 556);\nLABEL_31:\n            *a5 = v19;\n            if ( v19 )\n            {\n              if ( !*(_DWORD *)(result + 632LL * v18 + 532) )\n              {\n                a5[1] = v18 + 1;\n                v5 *= 2;\n              }\n              goto LABEL_74;\n            }\n            goto LABEL_68;\n          }\n          a5[1] = v18 + 1;\n          v21 = *(_DWORD *)(result + v20 + 556);\n        }\n        else\n        {\n          if ( a1 & 1 )\n          {\n            --a1;\n            goto LABEL_73;\n          }\n          v22 = *(signed int *)(result + v20 + 540);\n          a5[1] = v22;\n          v21 = *(_DWORD *)(result + v20 + 556);\n          if ( v21 && (v6[18159] != 1 || !*(_DWORD *)(result + 632 * v22 + 532)) )\n            a5[1] = v22 + 1;\n        }\n      }\nLABEL_62:\n      *a5 = v21;\n      v14 = v5;\n      if ( v21 )\n        goto LABEL_74;\nLABEL_69:\n      v5 = v14;\n      if ( !v6[18159] )\n        return result;\n      goto LABEL_74;\n    }\n    v10 = 632LL * a1;\n    v11 = *(_DWORD *)(result + v10 + 532);\n    if ( v5 < 0 )\n    {\n      if ( v11 )\n      {\n        v18 = *(_DWORD *)(result + v10 + 548);\n        if ( !(a1 & 1) )\n        {\n          a5[1] = v18;\n          v19 = *(_DWORD *)(result + v10 + 564);\n          goto LABEL_31;\n        }\n        a5[1] = v18 + 1;\n        v21 = *(_DWORD *)(result + v10 + 564);\n        goto LABEL_62;\n      }\n      if ( !(a1 & 1) )\n      {\n        a5[1] = *(_DWORD *)(result + v10 + 548) + 1;\n        v21 = *(_DWORD *)(result + v10 + 564);\n        goto LABEL_62;\n      }\n      v23 = *(signed int *)(result + v10 + 536);\n      a5[1] = v23;\n      v24 = *(_DWORD *)(result + v10 + 552);\n      *a5 = v24;\n      if ( !v24 )\n        goto LABEL_68;\n      if ( !*(_DWORD *)(result + 632 * v23 + 532) )\n        goto LABEL_74;\n      a5[1] = v23 + 1;\n    }\n    else\n    {\n      v12 = *(signed int *)(result + v10 + 536);\n      a5[1] = v12;\n      v13 = *(_DWORD *)(result + v10 + 552);\n      *a5 = v13;\n      if ( v11 )\n      {\n        if ( !(a1 & 1) )\n        {\n          if ( v13 )\n          {\n            if ( !*(_DWORD *)(result + 632 * v12 + 532) )\n            {\n              if ( v9 / 2 <= v5 )\n              {\n                a5[1] = v12 + 1;\n                v5 = 2 * v5 - v9;\n              }\n              else\n              {\n                v5 *= 2;\n              }\n            }\n            goto LABEL_74;\n          }\n          goto LABEL_68;\n        }\n        if ( v13 )\n        {\n          if ( !*(_DWORD *)(result + 632 * v12 + 532) )\n          {\n            if ( v9 / 2 <= v5 )\n            {\n              a5[1] = v12 + 1;\n              v5 = 2 * v5 + 1 - v9;\n            }\n            else\n            {\n              v5 = 2 * v5 + 1;\n            }\nLABEL_74:\n            v25 = (v8 + a2) % v8;\n            a5[2] = v25;\n            v26 = (v9 + v5) % v9;\n            a5[3] = v26;\n            v27 = a5[1];\n            if ( v6[18100] )\n            {\n              v28 = (unsigned int)((signed int)v27 / 2) % v6[18117];\n              a5[4] = v28;\n              result = (unsigned int)((signed int)v27 / 2) / v6[18117];\n              v29 = (signed int)v27 % 2 + 2 * result;\n            }\n            else\n            {\n              v28 = v27 % v6[18117];\n              a5[4] = v28;\n              result = v27 / v6[18117];\n              v29 = v27 / v6[18117];\n            }\n            v30 = 16 * v28;\n            a5[4] = v30;\n            v31 = 16 * v29;\n            a5[5] = v31;\n            if ( a4 )\n            {\n              a5[4] = v25 + v30;\n              a5[5] = v26 + v31;\n            }\n            else\n            {\n              a5[4] = v25 + v30 / (16 / v6[18177]);\n              result = (unsigned int)(v26 + v31 / (16 / v6[18178]));\n              a5[5] = result;\n            }\n            return result;\n          }\nLABEL_58:\n          a5[1] = v12 + 1;\n          goto LABEL_74;\n        }\n        goto LABEL_68;\n      }\n      if ( !(a1 & 1) )\n      {\n        if ( v13 )\n        {\n          if ( *(_DWORD *)(result + 632 * v12 + 532) )\n          {\n            if ( v5 & 1 )\n              a5[1] = v12 + 1;\n            v5 = (unsigned int)v5 >> 1;\n          }\n          goto LABEL_74;\n        }\n        goto LABEL_68;\n      }\n      if ( !v13 )\n      {\nLABEL_68:\n        v14 = -1;\n        goto LABEL_69;\n      }\n      if ( !*(_DWORD *)(result + 632 * v12 + 532) )\n        goto LABEL_58;\n      if ( v5 & 1 )\n        a5[1] = v12 + 1;\n    }\n    v5 = (v9 + v5) >> 1;\n    goto LABEL_74;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x436cf0L", 
            "funcEndAddr": "0x4371f5L", 
            "funcName": "sub_436CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437200(signed int a1, signed int a2, int a3, int a4, _DWORD *a5)\n{\n  __int64 result; // rax\n\n  if ( a1 < 0 )\n    error((__int64)\"getNeighbour: invalid macroblock number\", 100);\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n    result = sub_436CF0(a1, a2, a3, a4, a5);\n  else\n    result = sub_436AF0(a1, a2, a3, a4, a5);\n  return result;\n}\n", 
            "funcStartAddr": "0x437200L", 
            "funcEndAddr": "0x43726cL", 
            "funcName": "sub_437200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437270(signed int a1, int a2, int a3, int a4, int a5, _DWORD *a6)\n{\n  _DWORD *v6; // rbx\n  signed int v7; // esi\n  int v8; // edx\n  __int64 result; // rax\n  __m128i v10; // xmm0\n\n  v6 = a6;\n  if ( a1 < 0 )\n    error((__int64)\"getNeighbour: invalid macroblock number\", 100);\n  v7 = a4 + 4 * a2;\n  v8 = a5 + 4 * a3;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    result = sub_436CF0(a1, v7, v8, 1, a6);\n    if ( !*v6 )\n      return result;\n    goto LABEL_5;\n  }\n  result = sub_436AF0(a1, v7, v8, 1, a6);\n  if ( *v6 )\n  {\nLABEL_5:\n    v10 = _mm_loadu_si128((const __m128i *)(v6 + 2));\n    _mm_storeu_si128(\n      (__m128i *)(v6 + 2),\n      _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v10, 0x1Fu), 0x1Eu), v10), 2u));\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x437270L", 
            "funcEndAddr": "0x437311L", 
            "funcName": "sub_437270"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437320(signed int a1, int a2, int a3, int a4, int a5, _DWORD *a6)\n{\n  _DWORD *v6; // rbx\n  signed int v7; // esi\n  int v8; // edx\n  __int64 result; // rax\n  __m128i v10; // xmm0\n\n  v6 = a6;\n  if ( a1 < 0 )\n    error((__int64)\"getNeighbour: invalid macroblock number\", 100);\n  v7 = a4 + 4 * a2;\n  v8 = a5 + 4 * a3;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    result = sub_436CF0(a1, v7, v8, 0, a6);\n    if ( !*v6 )\n      return result;\n    goto LABEL_5;\n  }\n  result = sub_436AF0(a1, v7, v8, 0, a6);\n  if ( *v6 )\n  {\nLABEL_5:\n    v10 = _mm_loadu_si128((const __m128i *)(v6 + 2));\n    _mm_storeu_si128(\n      (__m128i *)(v6 + 2),\n      _mm_srai_epi32(_mm_add_epi32(_mm_srli_epi32(_mm_srai_epi32(v10, 0x1Fu), 0x1Eu), v10), 2u));\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x437320L", 
            "funcEndAddr": "0x4373bbL", 
            "funcName": "sub_437320"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_4373D0()\n{\n  signed int v0; // eax\n  signed __int64 result; // rax\n\n  v0 = 152064;\n  switch ( *((_DWORD *)qword_4F9DC0 + 6) )\n  {\n    case 0xA:\n      break;\n    case 0xB:\n      v0 = 345600;\n      break;\n    case 0xC:\n    case 0xD:\n    case 0x14:\n      v0 = 912384;\n      break;\n    case 0x15:\n      v0 = 1824768;\n      break;\n    case 0x16:\n    case 0x1E:\n      v0 = 3110400;\n      break;\n    case 0x1F:\n      v0 = 6912000;\n      break;\n    case 0x20:\n      v0 = 7864320;\n      break;\n    case 0x28:\n    case 0x29:\n    case 0x2A:\n      v0 = 12582912;\n      break;\n    case 0x32:\n      v0 = 42393600;\n      break;\n    case 0x33:\n      v0 = 70778880;\n      break;\n    default:\n      error((__int64)\"undefined level\", 500);\n      return result;\n  }\n  result = (unsigned int)(v0\n                        / (((*((_DWORD *)qword_4F9DC0 + 287) < 1u) + 1)\n                         * (*((_DWORD *)qword_4F9DC0 + 286) + 1)\n                         * (384 * *((_DWORD *)qword_4F9DC0 + 285) + 384)));\n  if ( (signed int)result >= 17 )\n    result = 16LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4373d0L", 
            "funcEndAddr": "0x43747fL", 
            "funcName": "sub_4373D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_437480(__int64 a1)\n{\n  unsigned int v1; // er15\n  unsigned __int64 v2; // rbp\n  char *v3; // rax\n  signed __int64 v4; // rax\n  void *result; // rax\n\n  if ( dword_4F9A00 )\n    sub_437970();\n  v1 = sub_4373D0();\n  LODWORD(nmemb) = v1;\n  if ( v1 < *((_DWORD *)dest + 9) )\n    error(\n      (__int64)\"DPB size at specified level is smaller than the specified number of reference frames. This is not allowed.\\n\",\n      1000);\n  qword_4F99EC = 0LL;\n  qword_4F9A08 = 0LL;\n  dword_4F99F4 = 0;\n  qword_4F99D0 = calloc(v1, 8uLL);\n  if ( !qword_4F99D0 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: dpb->fs\");\n  qword_4F99D8 = calloc(v1, 8uLL);\n  if ( !qword_4F99D8 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: dpb->fs_ref\");\n  qword_4F99E0 = calloc(v1, 8uLL);\n  if ( !qword_4F99E0 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: dpb->fs_ltref\");\n  if ( v1 )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = (char *)calloc(1uLL, 0x40uLL);\n      if ( !v3 )\n        sub_43EF40(0LL, (__int64)\"alloc_frame_store: f\");\n      *(_OWORD *)v3 = 0LL;\n      *(_OWORD *)(v3 + 40) = 0LL;\n      *((_QWORD *)v3 + 7) = 0LL;\n      *((_QWORD *)qword_4F99D0 + v2) = v3;\n      *((_QWORD *)qword_4F99D8 + v2) = 0LL;\n      *((_QWORD *)qword_4F99E0 + v2++) = 0LL;\n    }\n    while ( v2 < v1 );\n  }\n  base = calloc(0x21uLL, 8uLL);\n  if ( !base )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  qword_4F9A58 = calloc(0x21uLL, 8uLL);\n  if ( !qword_4F9A58 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  qword_4F9A60 = calloc(0x21uLL, 8uLL);\n  if ( !qword_4F9A60 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  qword_4F9A68 = calloc(0x21uLL, 8uLL);\n  if ( !qword_4F9A68 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  qword_4F9A70 = calloc(0x21uLL, 8uLL);\n  if ( !qword_4F9A70 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  qword_4F9A78 = calloc(0x21uLL, 8uLL);\n  if ( !qword_4F9A78 )\n    sub_43EF40(0LL, (__int64)\"init_dpb: listX[i]\");\n  v4 = 4611686018427387898LL;\n  do\n  {\n    *(_QWORD *)qword_4F9A80[v4] = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 8) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 16) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 24) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 32) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 40) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 48) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 56) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 64) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 72) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 80) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 88) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 96) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 104) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 112) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 120) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 128) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 136) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 144) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 152) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 160) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 168) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 176) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 184) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 192) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 200) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 208) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 216) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 224) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 232) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 240) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 248) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v4] + 256) = 0LL;\n    dword_4F9BF8[v4] = 0;\n    ++v4;\n  }\n  while ( v4 * 4 );\n  dword_4F99F8 = 2147483648;\n  result = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18161) = 0;\n  dword_4F9A00 = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x437480L", 
            "funcEndAddr": "0x437966L", 
            "funcName": "sub_437480"
        }, 
        {
            "decompiledFuncCode": "void sub_437970()\n{\n  _QWORD *v0; // rdi\n  unsigned int v1; // eax\n  unsigned __int64 v2; // rbx\n  _QWORD *v3; // r14\n  void *v4; // rdi\n  void *v5; // rdi\n  void *v6; // rdi\n\n  v0 = qword_4F99D0;\n  if ( qword_4F99D0 )\n  {\n    v1 = nmemb;\n    if ( (_DWORD)nmemb )\n    {\n      v2 = 0LL;\n      do\n      {\n        v3 = (_QWORD *)v0[v2];\n        if ( v3 )\n        {\n          v4 = (void *)v3[5];\n          if ( v4 )\n          {\n            sub_437D90(v4);\n            v3[5] = 0LL;\n          }\n          v5 = (void *)v3[6];\n          if ( v5 )\n          {\n            sub_437D90(v5);\n            v3[6] = 0LL;\n          }\n          v6 = (void *)v3[7];\n          if ( v6 )\n            sub_437D90(v6);\n          free(v3);\n          v1 = nmemb;\n          v0 = qword_4F99D0;\n        }\n        ++v2;\n      }\n      while ( v2 < v1 );\n    }\n    free(v0);\n    qword_4F99D0 = 0LL;\n  }\n  if ( qword_4F99D8 )\n    free(qword_4F99D8);\n  if ( qword_4F99E0 )\n    free(qword_4F99E0);\n  dword_4F99F8 = 2147483648;\n  if ( base )\n  {\n    free(base);\n    base = 0LL;\n  }\n  if ( qword_4F9A58 )\n  {\n    free(qword_4F9A58);\n    qword_4F9A58 = 0LL;\n  }\n  if ( qword_4F9A60 )\n  {\n    free(qword_4F9A60);\n    qword_4F9A60 = 0LL;\n  }\n  if ( qword_4F9A68 )\n  {\n    free(qword_4F9A68);\n    qword_4F9A68 = 0LL;\n  }\n  if ( qword_4F9A70 )\n  {\n    free(qword_4F9A70);\n    qword_4F9A70 = 0LL;\n  }\n  if ( qword_4F9A78 )\n  {\n    free(qword_4F9A78);\n    qword_4F9A78 = 0LL;\n  }\n  dword_4F9A00 = 0;\n}\n", 
            "funcStartAddr": "0x437970L", 
            "funcEndAddr": "0x437ae9L", 
            "funcName": "sub_437970"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_437AF0(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = (void *)*((_QWORD *)ptr + 5);\n    if ( v2 )\n    {\n      sub_437D90(v2);\n      v1[5] = 0LL;\n    }\n    v3 = (void *)v1[6];\n    if ( v3 )\n    {\n      sub_437D90(v3);\n      v1[6] = 0LL;\n    }\n    v4 = (void *)v1[7];\n    if ( v4 )\n      sub_437D90(v4);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x437af0L", 
            "funcEndAddr": "0x437b3eL", 
            "funcName": "sub_437AF0"
        }, 
        {
            "decompiledFuncCode": "char *sub_437B40()\n{\n  char *result; // rax\n\n  result = (char *)calloc(1uLL, 0x40uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"alloc_frame_store: f\");\n  *(_OWORD *)result = 0LL;\n  *(_OWORD *)(result + 40) = 0LL;\n  *((_QWORD *)result + 7) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x437b40L", 
            "funcEndAddr": "0x437b79L", 
            "funcName": "sub_437B40"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_437B80(int a1, signed int a2, int a3, unsigned int a4, unsigned int a5)\n{\n  signed int v5; // er14\n  int v6; // ebp\n  int v7; // er13\n  _QWORD *v8; // rax\n  _QWORD *v9; // rbx\n  unsigned int *v10; // rax\n  void *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rax\n  __int64 v15; // rax\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = calloc(1uLL, 0x19B8uLL);\n  v9 = v8;\n  if ( !v8 )\n    sub_43EF40(0LL, (__int64)\"alloc_storable_picture: s\");\n  sub_43EF90(v8 + 803, v7, a2);\n  v9[804] = 0LL;\n  v9[806] = 0LL;\n  v9[808] = 0LL;\n  if ( *((_DWORD *)dest + 321) || *((_DWORD *)dest + 322) || *((_DWORD *)dest + 15) )\n  {\n    v9[805] = 0LL;\n    v9[807] = 0LL;\n  }\n  v10 = (unsigned int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18175) )\n  {\n    sub_43F100((__int64)off_49F6D0, v5, v6, v9 + 808, 2u);\n    v10 = (unsigned int *)off_49F6D0;\n  }\n  v11 = calloc(v10[18121], 4uLL);\n  v9[809] = v11;\n  if ( !v11 )\n    sub_43EF40(0LL, (__int64)\"alloc_storable_picture: s->mb_field\");\n  v12 = sub_43FF00((__int64)v11, a2 / 4, v7 / 4, v9 + 810, 2u);\n  v13 = sub_43F850(v12, a2 / 4, v7 / 4, v9 + 811, 6u);\n  sub_43F850(v13, a2 / 4, v7 / 4, v9 + 812, 6u);\n  v14 = sub_43FFB0(v9 + 813, 2, a2 / 4, v7 / 4, 2);\n  v15 = sub_43F2A0(v14, v7 / 4, v9 + 814, a2 / 4);\n  sub_43F2A0(v15, v7 / 4, v9 + 815, a2 / 4);\n  *(_OWORD *)(v9 + 797) = 0LL;\n  *(_OWORD *)(v9 + 795) = 0LL;\n  *(_DWORD *)v9 = a1;\n  *((_DWORD *)v9 + 1598) = a2;\n  *((_DWORD *)v9 + 1599) = v7;\n  *((_DWORD *)v9 + 1600) = v6;\n  *((_DWORD *)v9 + 1601) = v5;\n  *(_QWORD *)((char *)v9 + 6412) = 0LL;\n  *((_OWORD *)v9 + 408) = 0LL;\n  v9[818] = 0LL;\n  return (char *)v9;\n}\n", 
            "funcStartAddr": "0x437b80L", 
            "funcEndAddr": "0x437d8aL", 
            "funcName": "sub_437B80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_437D90(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n  void *v5; // rdi\n  void *v6; // rdi\n  void *v7; // rdi\n  void *v8; // rdi\n  void *v9; // rdi\n  void *v10; // rdi\n  void *v11; // rdi\n  void *v12; // rdi\n  void *v13; // rdi\n  void *v14; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = (void *)*((_QWORD *)ptr + 810);\n    if ( v2 )\n    {\n      sub_440140(v2, 2u);\n      v1[810] = 0LL;\n    }\n    v3 = (void *)v1[811];\n    if ( v3 )\n    {\n      sub_43FC70(v3, 6u);\n      v1[811] = 0LL;\n    }\n    v4 = (void *)v1[812];\n    if ( v4 )\n    {\n      sub_43FC70(v4, 6u);\n      v1[812] = 0LL;\n    }\n    v5 = (void *)v1[813];\n    if ( v5 )\n    {\n      sub_4401F0(v5, 2u, *((_DWORD *)v1 + 1598) / 4);\n      v1[813] = 0LL;\n    }\n    v6 = (void *)v1[814];\n    if ( v6 )\n    {\n      sub_43FA50(v6);\n      v1[814] = 0LL;\n    }\n    v7 = (void *)v1[815];\n    if ( v7 )\n    {\n      sub_43FA50(v7);\n      v1[815] = 0LL;\n    }\n    v8 = (void *)v1[803];\n    if ( v8 )\n    {\n      sub_43F1B0(v8);\n      v1[803] = 0LL;\n    }\n    v9 = (void *)v1[804];\n    if ( v9 )\n    {\n      free(v9);\n      v1[804] = 0LL;\n    }\n    v10 = (void *)v1[806];\n    if ( v10 )\n    {\n      sub_43F1B0(v10);\n      v1[806] = 0LL;\n    }\n    v11 = (void *)v1[808];\n    if ( v11 )\n    {\n      sub_43F1F0(v11, 2u);\n      v1[808] = 0LL;\n    }\n    if ( *((_DWORD *)dest + 321) || *((_DWORD *)dest + 322) || *((_DWORD *)dest + 15) )\n    {\n      v12 = (void *)v1[805];\n      if ( v12 )\n      {\n        free(v12);\n        v1[805] = 0LL;\n      }\n      v13 = (void *)v1[807];\n      if ( v13 )\n      {\n        sub_43F1B0(v13);\n        v1[807] = 0LL;\n      }\n    }\n    v14 = (void *)v1[809];\n    if ( v14 )\n      free(v14);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x437d90L", 
            "funcEndAddr": "0x437f54L", 
            "funcName": "sub_437D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437FA0(unsigned int a1, int a2)\n{\n  int v2; // er13\n  signed int v3; // er8\n  _BOOL4 v4; // er15\n  _BOOL4 v5; // er14\n  unsigned __int64 v6; // r11\n  _QWORD *v7; // r10\n  _DWORD *v8; // r9\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rbx\n  int v11; // esi\n  unsigned int v12; // eax\n  signed int v13; // edx\n  int v14; // eax\n  __int64 result; // rax\n  size_t v16; // rbx\n  void *v17; // r15\n  _QWORD *v18; // r14\n  __int64 v19; // r12\n  signed int v20; // er13\n  _QWORD *v21; // rax\n  __int64 v22; // rcx\n  __int64 v23; // rsi\n  unsigned __int64 v24; // rcx\n  _QWORD *v25; // rdx\n  _DWORD *v26; // r9\n  unsigned __int64 v27; // rbp\n  __int64 v28; // rax\n  _DWORD *v29; // rbx\n  unsigned int v30; // esi\n  signed int v31; // er10\n  int v32; // esi\n  size_t v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // r15\n  _QWORD *v36; // r14\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // rcx\n  _QWORD *v39; // rdx\n  signed int v40; // ebp\n  _DWORD *v41; // rsi\n  __int64 v42; // rdi\n  unsigned __int64 v43; // rax\n  unsigned __int64 v44; // rcx\n  int v45; // ebp\n  __int64 v46; // rdx\n  __int64 v47; // rdx\n  __int64 v48; // rdi\n  __int64 v49; // rdx\n  __int64 v50; // rdi\n  __int64 v51; // rbp\n  __int64 v52; // rdi\n  __int64 v53; // rbp\n  __int64 v54; // rax\n  __int64 v55; // rcx\n  _QWORD *v56; // rax\n  __int64 v57; // rdx\n  __int64 v58; // rcx\n  __int64 v59; // rsi\n  __int64 v60; // rsi\n  __int64 v61; // rsi\n  __int64 v62; // rsi\n  __int64 v63; // rsi\n  __int64 v64; // rsi\n  __int64 v65; // rsi\n  __int64 v66; // rsi\n  unsigned __int64 v67; // r8\n  __int64 v68; // rbp\n  unsigned __int64 v69; // rcx\n  _QWORD *v70; // rdx\n  __int64 v71; // rdx\n  int v72; // esi\n  __int64 v73; // rbx\n  _QWORD *v74; // rax\n  __int64 v75; // rcx\n  __int64 v76; // rdx\n  __int64 v77; // rdx\n  __int64 v78; // rdx\n  __int64 v79; // rdx\n  __int64 v80; // rsi\n  __int64 v81; // rsi\n  __int64 v82; // rdx\n  __int64 v83; // rdx\n  __int64 v84; // rdx\n  __int64 v85; // rdx\n  __int64 v86; // rsi\n  __int64 v87; // rsi\n  unsigned __int64 v88; // rax\n  unsigned __int64 v89; // rcx\n  signed int v90; // er14\n  __int64 v91; // rdx\n  _DWORD *v92; // rdx\n  __int64 v93; // rdi\n  __int64 v94; // rbx\n  unsigned __int64 v95; // rax\n  unsigned __int64 v96; // rcx\n  __int64 v97; // rdx\n  _DWORD *v98; // rdx\n  __int64 v99; // rdi\n  signed int v100; // er14\n  unsigned __int64 v101; // rax\n  signed int v102; // er13\n  _QWORD *v103; // rcx\n  unsigned __int64 v104; // rdx\n  _DWORD *v105; // rsi\n  __int64 v106; // rdi\n  int v107; // ebx\n  __int64 v108; // rcx\n  unsigned int v109; // edx\n  unsigned __int64 v110; // r8\n  signed __int64 v111; // rdi\n  __int64 v112; // r9\n  signed __int64 v113; // rcx\n  int v114; // edx\n  __int64 v115; // rsi\n  __int64 v116; // rdi\n  unsigned __int64 v117; // rsi\n  __int64 v118; // r8\n  __int64 v119; // rdi\n  signed __int64 v120; // rdx\n  __int64 v121; // rsi\n  __int128 v122; // xmm1\n  __int64 v123; // rax\n  __int128 v124; // xmm1\n  unsigned __int64 v125; // rax\n  signed int v126; // er12\n  unsigned __int64 v127; // rcx\n  __int64 v128; // rdx\n  _DWORD *v129; // rdx\n  __int64 v130; // rdi\n  int v131; // er15\n  __int64 v132; // rcx\n  int v133; // edx\n  __int64 v134; // rcx\n  __int64 v135; // rcx\n  signed __int64 v136; // rbx\n  unsigned __int64 v137; // rax\n  unsigned __int64 v138; // rcx\n  __int64 v139; // rdx\n  _DWORD *v140; // rdx\n  __int64 v141; // rdi\n  __int64 v142; // rbp\n  __int128 v143; // xmm1\n  __int64 v144; // rax\n  _QWORD *v145; // rax\n  __int64 v146; // rcx\n  __int64 v147; // rsi\n  __int64 v148; // rdx\n  __int64 v149; // rbp\n  __int64 v150; // rbp\n  __int64 v151; // rbp\n  __int64 v152; // rbp\n  __int64 v153; // rbp\n  __int64 v154; // rbp\n  __int64 v155; // rbp\n  __int64 v156; // rbp\n  __int64 v157; // rcx\n  _QWORD *v158; // rax\n  __int64 v159; // rsi\n  __int64 v160; // rdx\n  __int64 v161; // rbp\n  __int64 v162; // rbp\n  __int64 v163; // rbp\n  __int64 v164; // rbp\n  __int64 v165; // rbp\n  __int64 v166; // rbp\n  __int64 v167; // rbp\n  __int64 v168; // rbp\n  unsigned __int64 v169; // r8\n  __int64 v170; // rbp\n  unsigned __int64 v171; // rcx\n  _QWORD *v172; // rdx\n  __int64 v173; // rdx\n  int v174; // esi\n  __int64 v175; // rbx\n  _QWORD *v176; // rax\n  __int64 v177; // rcx\n  __int64 v178; // rdx\n  __int64 v179; // rdx\n  __int64 v180; // rdx\n  __int64 v181; // rdx\n  __int64 v182; // rsi\n  __int64 v183; // rsi\n  __int64 v184; // rdx\n  __int64 v185; // rdx\n  __int64 v186; // rdx\n  __int64 v187; // rdx\n  __int64 v188; // rsi\n  __int64 v189; // rsi\n  __int64 v190; // rcx\n  _QWORD *v191; // rax\n  __int64 v192; // rdx\n  __int64 v193; // rsi\n  __int64 v194; // rsi\n  __int64 v195; // rsi\n  __int64 v196; // rsi\n  __int64 v197; // rdi\n  __int64 v198; // rdi\n  __int64 v199; // rsi\n  __int64 v200; // rsi\n  __int64 v201; // rsi\n  __int64 v202; // rsi\n  __int64 v203; // rdi\n  __int64 v204; // rdi\n  signed int v205; // er8\n  __int64 v206; // r10\n  __int64 v207; // rbp\n  signed int v208; // esi\n  __int64 v209; // rdx\n  __int64 v210; // rcx\n  __int64 v211; // rcx\n  int v212; // [rsp+4h] [rbp-54h]\n  int v213; // [rsp+4h] [rbp-54h]\n  _BOOL4 v214; // [rsp+8h] [rbp-50h]\n  _BOOL4 v215; // [rsp+8h] [rbp-50h]\n  _BOOL4 v216; // [rsp+10h] [rbp-48h]\n  _BOOL4 v217; // [rsp+10h] [rbp-48h]\n\n  v2 = a2;\n  v3 = 1 << (dword_4FA0E4 + 4);\n  if ( a2 )\n  {\n    v4 = a2 == 1;\n    v5 = a2 != 1;\n    v6 = HIDWORD(qword_4F99EC);\n    if ( HIDWORD(qword_4F99EC) )\n    {\n      v7 = qword_4F99D8;\n      v8 = off_49F6D0;\n      v9 = 0LL;\n      do\n      {\n        v10 = v7[v9];\n        v11 = *(_DWORD *)(v10 + 4);\n        if ( v11 )\n        {\n          v12 = *(_DWORD *)(v10 + 20);\n          v13 = v3;\n          if ( v12 <= v8[18116] )\n            v13 = 0;\n          v14 = v12 - v13;\n          *(_DWORD *)(v10 + 24) = v14;\n          if ( v11 & 1 )\n            *(_DWORD *)(*(_QWORD *)(v10 + 48) + 6364LL) = v4 + 2 * v14;\n          if ( v11 & 2 )\n            *(_DWORD *)(*(_QWORD *)(v10 + 56) + 6364LL) = v5 + 2 * v14;\n        }\n        ++v9;\n      }\n      while ( v9 < v6 );\n    }\n    goto LABEL_12;\n  }\n  v24 = HIDWORD(qword_4F99EC);\n  if ( HIDWORD(qword_4F99EC) )\n  {\n    v25 = qword_4F99D8;\n    v26 = off_49F6D0;\n    v27 = 0LL;\n    do\n    {\n      v28 = v25[v27];\n      if ( *(_DWORD *)v28 == 3 )\n      {\n        v29 = *(_DWORD **)(v28 + 40);\n        if ( v29[1595] )\n        {\n          if ( !v29[1594] )\n          {\n            v30 = *(_DWORD *)(v28 + 20);\n            v31 = v3;\n            if ( v30 <= v26[18116] )\n              v31 = 0;\n            v32 = v30 - v31;\n            *(_DWORD *)(v28 + 24) = v32;\n            v29[1591] = v32;\n            v29[5] = 0;\n          }\n        }\n      }\n      ++v27;\n    }\n    while ( v27 < v24 );\n  }\n  v5 = 0;\n  v4 = 0;\n  if ( a1 > 4 )\n  {\nLABEL_33:\n    if ( v2 )\n    {\n      v215 = v4;\n      v33 = (unsigned int)nmemb;\n      v34 = calloc((unsigned int)nmemb, 8uLL);\n      if ( !v34 )\n        sub_43EF40(0LL, (__int64)\"init_lists: fs_list0\");\n      v217 = v5;\n      v35 = calloc(v33, 8uLL);\n      if ( !v35 )\n        sub_43EF40(0LL, (__int64)\"init_lists: fs_list1\");\n      v36 = calloc(v33, 8uLL);\n      if ( !v36 )\n        sub_43EF40(0LL, (__int64)\"init_lists: fs_listlt\");\n      qword_4F9BE0[0] = 0x100000000LL;\n      v37 = HIDWORD(qword_4F99EC);\n      if ( HIDWORD(qword_4F99EC) )\n      {\n        v38 = 0LL;\n        v39 = qword_4F99D8;\n        v40 = 0;\n        do\n        {\n          v41 = (_DWORD *)v39[v38];\n          if ( *v41 && *((_DWORD *)off_49F6D0 + 18115) >= v41[9] )\n          {\n            v42 = v40++;\n            v34[v42] = v41;\n          }\n          ++v38;\n        }\n        while ( v38 < v37 );\n      }\n      else\n      {\n        v40 = 0;\n      }\n      v213 = v2;\n      qsort(v34, v40, 8uLL, (__compar_fn_t)sub_439830);\n      v101 = HIDWORD(qword_4F99EC);\n      v102 = v40;\n      if ( HIDWORD(qword_4F99EC) )\n      {\n        v103 = qword_4F99D8;\n        v104 = 0LL;\n        v102 = v40;\n        do\n        {\n          v105 = (_DWORD *)v103[v104];\n          if ( *v105 && *((_DWORD *)off_49F6D0 + 18115) < v105[9] )\n          {\n            v106 = v102++;\n            v34[v106] = v105;\n          }\n          ++v104;\n        }\n        while ( v104 < v101 );\n      }\n      v107 = v102 - v40;\n      qsort(&v34[v40], v102 - v40, 8uLL, (__compar_fn_t)sub_439850);\n      if ( v40 <= 0 )\n        goto LABEL_234;\n      if ( (unsigned int)v40 >= 4 )\n      {\n        v108 = 0LL;\n        if ( v102 - 1 >= v102 - v40 )\n        {\n          v109 = 0;\n          if ( !(((unsigned __int64)(unsigned int)v40 - 1) >> 32) )\n          {\n            v108 = v40 & 0xFFFFFFFC;\n            v117 = (unsigned __int64)(v108 - 4) >> 2;\n            v118 = ((_BYTE)v117 + 1) & 1;\n            if ( v108 == 4 )\n            {\n              v121 = 0LL;\n            }\n            else\n            {\n              LODWORD(v119) = v102 + 4 - v40;\n              v120 = v118 - 1 - v117;\n              v121 = 0LL;\n              do\n              {\n                v122 = *(_OWORD *)&v34[v121 + 2];\n                v123 = (signed int)v119 - 4;\n                *(_OWORD *)&v35[v123] = *(_OWORD *)&v34[v121];\n                *(_OWORD *)&v35[v123 + 2] = v122;\n                v124 = *(_OWORD *)&v34[v121 + 6];\n                v119 = (signed int)v119;\n                *(_OWORD *)&v35[v119] = *(_OWORD *)&v34[v121 + 4];\n                *(_OWORD *)&v35[v119 + 2] = v124;\n                v121 += 8LL;\n                LODWORD(v119) = v119 + 8;\n                v120 += 2LL;\n              }\n              while ( v120 );\n            }\n            if ( v118 )\n            {\n              v143 = *(_OWORD *)&v34[v121 + 2];\n              v144 = v107 + (signed int)v121;\n              *(_OWORD *)&v35[v144] = *(_OWORD *)&v34[v121];\n              *(_OWORD *)&v35[v144 + 2] = v143;\n            }\n            v109 = v40 & 0xFFFFFFFC;\n            if ( v108 == v40 )\n              goto LABEL_234;\n          }\n          goto LABEL_185;\n        }\n      }\n      else\n      {\n        v108 = 0LL;\n      }\n      v109 = 0;\nLABEL_185:\n      v110 = (unsigned int)v40 - v108 - 1;\n      if ( v40 & 3 )\n      {\n        v111 = -(signed __int64)(v40 & 3);\n        do\n        {\n          v35[v107 + v109++] = v34[v108++];\n          ++v111;\n        }\n        while ( v111 );\n      }\n      if ( v110 >= 3 )\n      {\n        v112 = (unsigned int)v40 - v108;\n        v113 = (signed __int64)&v34[v108 + 3];\n        v114 = v102 + v109 - v40;\n        v115 = 0LL;\n        do\n        {\n          v116 = v114 + (signed int)v115;\n          v35[v116] = *(_QWORD *)(v113 + 8 * v115 - 24);\n          v35[(signed int)v116 + 1] = *(_QWORD *)(v113 + 8 * v115 - 16);\n          v35[(signed int)v116 + 2] = *(_QWORD *)(v113 + 8 * v115 - 8);\n          v35[(signed int)v116 + 3] = *(_QWORD *)(v113 + 8 * v115);\n          v115 += 4LL;\n        }\n        while ( v112 != v115 );\n      }\nLABEL_234:\n      if ( v102 > v40 )\n        memcpy(v35, &v34[v40], 8LL * (unsigned int)(v102 - 1 - v40) + 8);\n      qword_4F9BE0[0] = 0LL;\n      v145 = base;\n      LODWORD(v146) = 0;\n      LODWORD(v147) = 0;\n      LODWORD(v148) = 0;\n      if ( v213 == 1 )\n      {\n        if ( v102 > 0 )\n        {\n          LODWORD(v146) = 0;\n          LODWORD(v148) = 0;\n          LODWORD(v147) = 0;\n          while ( (signed int)v147 >= v102 )\n          {\nLABEL_245:\n            if ( (signed int)v148 < v102 )\n              goto LABEL_246;\nLABEL_255:\n            if ( (signed int)v147 >= v102 && (signed int)v148 >= v102 )\n              goto LABEL_257;\n          }\n          v147 = (signed int)v147;\n          while ( 1 )\n          {\n            v149 = v34[v147];\n            if ( *(_BYTE *)v149 & 1 )\n            {\n              v150 = *(_QWORD *)(v149 + 48);\n              if ( *(_DWORD *)(v150 + 6380) )\n              {\n                if ( !*(_DWORD *)(v150 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v147 >= v102 )\n              goto LABEL_245;\n          }\n          v146 = (signed int)v146;\n          v145[v146] = v150;\n          LODWORD(v146) = v146 + 1;\n          LODWORD(qword_4F9BE0[0]) = v146;\n          LODWORD(v147) = v147 + 1;\n          if ( (signed int)v148 >= v102 )\n            goto LABEL_255;\nLABEL_246:\n          v148 = (signed int)v148;\n          while ( 1 )\n          {\n            v151 = v34[v148];\n            if ( *(_BYTE *)v151 & 2 )\n            {\n              v152 = *(_QWORD *)(v151 + 56);\n              if ( *(_DWORD *)(v152 + 6380) )\n              {\n                if ( !*(_DWORD *)(v152 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v148 >= v102 )\n              goto LABEL_255;\n          }\n          v146 = (signed int)v146;\n          v145[v146] = v152;\n          LODWORD(v146) = v146 + 1;\n          LODWORD(qword_4F9BE0[0]) = v146;\n          LODWORD(v148) = v148 + 1;\n          goto LABEL_255;\n        }\n        goto LABEL_320;\n      }\nLABEL_257:\n      if ( v213 == 2 && ((signed int)v147 < v102 || (signed int)v148 < v102) )\n      {\n        while ( (signed int)v148 >= v102 )\n        {\nLABEL_266:\n          if ( (signed int)v147 < v102 )\n            goto LABEL_267;\nLABEL_276:\n          if ( (signed int)v148 >= v102 && (signed int)v147 >= v102 )\n            goto LABEL_278;\n        }\n        v148 = (signed int)v148;\n        while ( 1 )\n        {\n          v153 = v34[v148];\n          if ( *(_BYTE *)v153 & 2 )\n          {\n            v154 = *(_QWORD *)(v153 + 56);\n            if ( *(_DWORD *)(v154 + 6380) )\n            {\n              if ( !*(_DWORD *)(v154 + 6376) )\n                break;\n            }\n          }\n          if ( ++v148 >= v102 )\n            goto LABEL_266;\n        }\n        v146 = (signed int)v146;\n        v145[v146] = v154;\n        LODWORD(v146) = v146 + 1;\n        LODWORD(qword_4F9BE0[0]) = v146;\n        LODWORD(v148) = v148 + 1;\n        if ( (signed int)v147 >= v102 )\n          goto LABEL_276;\nLABEL_267:\n        v147 = (signed int)v147;\n        while ( 1 )\n        {\n          v155 = v34[v147];\n          if ( *(_BYTE *)v155 & 1 )\n          {\n            v156 = *(_QWORD *)(v155 + 48);\n            if ( *(_DWORD *)(v156 + 6380) )\n            {\n              if ( !*(_DWORD *)(v156 + 6376) )\n                break;\n            }\n          }\n          if ( ++v147 >= v102 )\n            goto LABEL_276;\n        }\n        v146 = (signed int)v146;\n        v145[v146] = v156;\n        LODWORD(v146) = v146 + 1;\n        LODWORD(qword_4F9BE0[0]) = v146;\n        LODWORD(v147) = v147 + 1;\n        goto LABEL_276;\n      }\nLABEL_278:\n      LODWORD(v157) = 0;\n      v158 = qword_4F9A58;\n      LODWORD(v159) = 0;\n      LODWORD(v160) = 0;\n      if ( v213 == 1 )\n      {\n        if ( v102 > 0 )\n        {\n          LODWORD(v157) = 0;\n          LODWORD(v160) = 0;\n          LODWORD(v159) = 0;\n          while ( (signed int)v159 >= v102 )\n          {\nLABEL_287:\n            if ( (signed int)v160 < v102 )\n              goto LABEL_288;\nLABEL_297:\n            if ( (signed int)v159 >= v102 && (signed int)v160 >= v102 )\n              goto LABEL_299;\n          }\n          v159 = (signed int)v159;\n          while ( 1 )\n          {\n            v161 = v35[v159];\n            if ( *(_BYTE *)v161 & 1 )\n            {\n              v162 = *(_QWORD *)(v161 + 48);\n              if ( *(_DWORD *)(v162 + 6380) )\n              {\n                if ( !*(_DWORD *)(v162 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v159 >= v102 )\n              goto LABEL_287;\n          }\n          v157 = (signed int)v157;\n          v158[v157] = v162;\n          LODWORD(v157) = v157 + 1;\n          HIDWORD(qword_4F9BE0[0]) = v157;\n          LODWORD(v159) = v159 + 1;\n          if ( (signed int)v160 >= v102 )\n            goto LABEL_297;\nLABEL_288:\n          v160 = (signed int)v160;\n          while ( 1 )\n          {\n            v163 = v35[v160];\n            if ( *(_BYTE *)v163 & 2 )\n            {\n              v164 = *(_QWORD *)(v163 + 56);\n              if ( *(_DWORD *)(v164 + 6380) )\n              {\n                if ( !*(_DWORD *)(v164 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v160 >= v102 )\n              goto LABEL_297;\n          }\n          v157 = (signed int)v157;\n          v158[v157] = v164;\n          LODWORD(v157) = v157 + 1;\n          HIDWORD(qword_4F9BE0[0]) = v157;\n          LODWORD(v160) = v160 + 1;\n          goto LABEL_297;\n        }\nLABEL_320:\n        v169 = (unsigned int)dword_4F99F4;\n        LODWORD(v170) = 0;\n        LODWORD(v171) = 0;\n        if ( dword_4F99F4 )\n        {\n          v171 = 0LL;\n          do\n          {\n            v172 = qword_4F99E0;\n            v36[v171] = *((_QWORD *)qword_4F99E0 + v171);\n            v173 = v172[v171];\n            v174 = *(_DWORD *)(v173 + 8);\n            if ( v174 & 1 )\n              *(_DWORD *)(*(_QWORD *)(v173 + 48) + 6368LL) = v215 + 2 * *(_DWORD *)(*(_QWORD *)(v173 + 48) + 6372LL);\n            ++v171;\n            if ( v174 & 2 )\n              *(_DWORD *)(*(_QWORD *)(v173 + 56) + 6368LL) = v217 + 2 * *(_DWORD *)(*(_QWORD *)(v173 + 56) + 6372LL);\n          }\n          while ( v171 < v169 );\n        }\n        v175 = (unsigned int)v171;\n        qsort(v36, (unsigned int)v171, 8uLL, (__compar_fn_t)sub_4397D0);\n        v176 = base;\n        LODWORD(v177) = 0;\n        if ( v213 == 1 )\n        {\n          if ( (_DWORD)v175 )\n          {\n            LODWORD(v177) = 0;\n            LODWORD(v170) = 0;\n            while ( (signed int)v170 >= (signed int)v175 )\n            {\nLABEL_336:\n              if ( (signed int)v177 < (signed int)v175 )\n                goto LABEL_337;\nLABEL_346:\n              if ( (signed int)v170 >= (signed int)v175 && (signed int)v177 >= (signed int)v175 )\n                goto LABEL_348;\n            }\n            v170 = (signed int)v170;\n            while ( 1 )\n            {\n              v178 = v36[v170];\n              if ( *(_BYTE *)v178 & 1 )\n              {\n                v179 = *(_QWORD *)(v178 + 48);\n                if ( *(_DWORD *)(v179 + 6380) )\n                {\n                  if ( *(_DWORD *)(v179 + 6376) )\n                    break;\n                }\n              }\n              if ( ++v170 >= v175 )\n                goto LABEL_336;\n            }\n            v182 = SLODWORD(qword_4F9BE0[0]);\n            v176[v182] = v179;\n            LODWORD(qword_4F9BE0[0]) = v182 + 1;\n            LODWORD(v170) = v170 + 1;\n            if ( (signed int)v177 >= (signed int)v175 )\n              goto LABEL_346;\nLABEL_337:\n            v177 = (signed int)v177;\n            while ( 1 )\n            {\n              v180 = v36[v177];\n              if ( *(_BYTE *)v180 & 2 )\n              {\n                v181 = *(_QWORD *)(v180 + 56);\n                if ( *(_DWORD *)(v181 + 6380) )\n                {\n                  if ( *(_DWORD *)(v181 + 6376) )\n                    break;\n                }\n              }\n              if ( ++v177 >= v175 )\n                goto LABEL_346;\n            }\n            v183 = SLODWORD(qword_4F9BE0[0]);\n            v176[v183] = v181;\n            LODWORD(qword_4F9BE0[0]) = v183 + 1;\n            LODWORD(v177) = v177 + 1;\n            goto LABEL_346;\n          }\nLABEL_411:\n          free(v34);\n          free(v35);\n          free(v36);\n          v100 = HIDWORD(qword_4F9BE0[0]);\n          goto LABEL_412;\n        }\nLABEL_348:\n        if ( v213 == 2 && ((signed int)v170 < (signed int)v175 || (signed int)v177 < (signed int)v175) )\n        {\n          while ( (signed int)v177 >= (signed int)v175 )\n          {\nLABEL_357:\n            if ( (signed int)v170 < (signed int)v175 )\n              goto LABEL_358;\nLABEL_367:\n            if ( (signed int)v177 >= (signed int)v175 && (signed int)v170 >= (signed int)v175 )\n              goto LABEL_369;\n          }\n          v177 = (signed int)v177;\n          while ( 1 )\n          {\n            v184 = v36[v177];\n            if ( *(_BYTE *)v184 & 2 )\n            {\n              v185 = *(_QWORD *)(v184 + 56);\n              if ( *(_DWORD *)(v185 + 6380) )\n              {\n                if ( *(_DWORD *)(v185 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v177 >= v175 )\n              goto LABEL_357;\n          }\n          v188 = SLODWORD(qword_4F9BE0[0]);\n          v176[v188] = v185;\n          LODWORD(qword_4F9BE0[0]) = v188 + 1;\n          LODWORD(v177) = v177 + 1;\n          if ( (signed int)v170 >= (signed int)v175 )\n            goto LABEL_367;\nLABEL_358:\n          v170 = (signed int)v170;\n          while ( 1 )\n          {\n            v186 = v36[v170];\n            if ( *(_BYTE *)v186 & 1 )\n            {\n              v187 = *(_QWORD *)(v186 + 48);\n              if ( *(_DWORD *)(v187 + 6380) )\n              {\n                if ( *(_DWORD *)(v187 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v170 >= v175 )\n              goto LABEL_367;\n          }\n          v189 = SLODWORD(qword_4F9BE0[0]);\n          v176[v189] = v187;\n          LODWORD(qword_4F9BE0[0]) = v189 + 1;\n          LODWORD(v170) = v170 + 1;\n          goto LABEL_367;\n        }\nLABEL_369:\n        LODWORD(v190) = 0;\n        v191 = qword_4F9A58;\n        LODWORD(v192) = 0;\n        if ( v213 == 1 )\n        {\n          if ( !(_DWORD)v175 )\n            goto LABEL_411;\n          LODWORD(v192) = 0;\n          LODWORD(v190) = 0;\n          while ( (signed int)v190 >= (signed int)v175 )\n          {\nLABEL_378:\n            if ( (signed int)v192 < (signed int)v175 )\n              goto LABEL_379;\nLABEL_388:\n            if ( (signed int)v190 >= (signed int)v175 && (signed int)v192 >= (signed int)v175 )\n              goto LABEL_390;\n          }\n          v190 = (signed int)v190;\n          while ( 1 )\n          {\n            v193 = v36[v190];\n            if ( *(_BYTE *)v193 & 1 )\n            {\n              v194 = *(_QWORD *)(v193 + 48);\n              if ( *(_DWORD *)(v194 + 6380) )\n              {\n                if ( *(_DWORD *)(v194 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v190 >= v175 )\n              goto LABEL_378;\n          }\n          v197 = SHIDWORD(qword_4F9BE0[0]);\n          v191[v197] = v194;\n          HIDWORD(qword_4F9BE0[0]) = v197 + 1;\n          LODWORD(v190) = v190 + 1;\n          if ( (signed int)v192 >= (signed int)v175 )\n            goto LABEL_388;\nLABEL_379:\n          v192 = (signed int)v192;\n          while ( 1 )\n          {\n            v195 = v36[v192];\n            if ( *(_BYTE *)v195 & 2 )\n            {\n              v196 = *(_QWORD *)(v195 + 56);\n              if ( *(_DWORD *)(v196 + 6380) )\n              {\n                if ( *(_DWORD *)(v196 + 6376) )\n                  break;\n              }\n            }\n            if ( ++v192 >= v175 )\n              goto LABEL_388;\n          }\n          v198 = SHIDWORD(qword_4F9BE0[0]);\n          v191[v198] = v196;\n          HIDWORD(qword_4F9BE0[0]) = v198 + 1;\n          LODWORD(v192) = v192 + 1;\n          goto LABEL_388;\n        }\nLABEL_390:\n        if ( v213 != 2 || (signed int)v190 >= (signed int)v175 && (signed int)v192 >= (signed int)v175 )\n          goto LABEL_411;\n        while ( (signed int)v192 >= (signed int)v175 )\n        {\nLABEL_399:\n          if ( (signed int)v190 < (signed int)v175 )\n            goto LABEL_400;\nLABEL_409:\n          if ( (signed int)v192 >= (signed int)v175 && (signed int)v190 >= (signed int)v175 )\n            goto LABEL_411;\n        }\n        v192 = (signed int)v192;\n        while ( 1 )\n        {\n          v199 = v36[v192];\n          if ( *(_BYTE *)v199 & 2 )\n          {\n            v200 = *(_QWORD *)(v199 + 56);\n            if ( *(_DWORD *)(v200 + 6380) )\n            {\n              if ( *(_DWORD *)(v200 + 6376) )\n                break;\n            }\n          }\n          if ( ++v192 >= v175 )\n            goto LABEL_399;\n        }\n        v203 = SHIDWORD(qword_4F9BE0[0]);\n        v191[v203] = v200;\n        HIDWORD(qword_4F9BE0[0]) = v203 + 1;\n        LODWORD(v192) = v192 + 1;\n        if ( (signed int)v190 >= (signed int)v175 )\n          goto LABEL_409;\nLABEL_400:\n        v190 = (signed int)v190;\n        while ( 1 )\n        {\n          v201 = v36[v190];\n          if ( *(_BYTE *)v201 & 1 )\n          {\n            v202 = *(_QWORD *)(v201 + 48);\n            if ( *(_DWORD *)(v202 + 6380) )\n            {\n              if ( *(_DWORD *)(v202 + 6376) )\n                break;\n            }\n          }\n          if ( ++v190 >= v175 )\n            goto LABEL_409;\n        }\n        v204 = SHIDWORD(qword_4F9BE0[0]);\n        v191[v204] = v202;\n        HIDWORD(qword_4F9BE0[0]) = v204 + 1;\n        LODWORD(v190) = v190 + 1;\n        goto LABEL_409;\n      }\nLABEL_299:\n      if ( v213 != 2 || (signed int)v159 >= v102 && (signed int)v160 >= v102 )\n        goto LABEL_320;\n      while ( (signed int)v160 >= v102 )\n      {\nLABEL_308:\n        if ( (signed int)v159 < v102 )\n          goto LABEL_309;\nLABEL_318:\n        if ( (signed int)v160 >= v102 && (signed int)v159 >= v102 )\n          goto LABEL_320;\n      }\n      v160 = (signed int)v160;\n      while ( 1 )\n      {\n        v165 = v35[v160];\n        if ( *(_BYTE *)v165 & 2 )\n        {\n          v166 = *(_QWORD *)(v165 + 56);\n          if ( *(_DWORD *)(v166 + 6380) )\n          {\n            if ( !*(_DWORD *)(v166 + 6376) )\n              break;\n          }\n        }\n        if ( ++v160 >= v102 )\n          goto LABEL_308;\n      }\n      v157 = (signed int)v157;\n      v158[v157] = v166;\n      LODWORD(v157) = v157 + 1;\n      HIDWORD(qword_4F9BE0[0]) = v157;\n      LODWORD(v160) = v160 + 1;\n      if ( (signed int)v159 >= v102 )\n        goto LABEL_318;\nLABEL_309:\n      v159 = (signed int)v159;\n      while ( 1 )\n      {\n        v167 = v35[v159];\n        if ( *(_BYTE *)v167 & 1 )\n        {\n          v168 = *(_QWORD *)(v167 + 48);\n          if ( *(_DWORD *)(v168 + 6380) )\n          {\n            if ( !*(_DWORD *)(v168 + 6376) )\n              break;\n          }\n        }\n        if ( ++v159 >= v102 )\n          goto LABEL_318;\n      }\n      v157 = (signed int)v157;\n      v158[v157] = v168;\n      LODWORD(v157) = v157 + 1;\n      HIDWORD(qword_4F9BE0[0]) = v157;\n      LODWORD(v159) = v159 + 1;\n      goto LABEL_318;\n    }\n    v88 = HIDWORD(qword_4F99EC);\n    if ( HIDWORD(qword_4F99EC) )\n    {\n      v89 = 0LL;\n      v90 = 0;\n      do\n      {\n        v91 = *((_QWORD *)qword_4F99D8 + v89);\n        if ( *(_DWORD *)v91 == 3 )\n        {\n          v92 = *(_DWORD **)(v91 + 40);\n          if ( v92[1595] )\n          {\n            if ( !v92[1594] && *((_DWORD *)off_49F6D0 + 18114) > v92[1] )\n            {\n              v92[5] = v90;\n              v93 = v90++;\n              *((_QWORD *)base + v93) = v92;\n            }\n          }\n        }\n        ++v89;\n      }\n      while ( v89 < v88 );\n    }\n    else\n    {\n      v90 = 0;\n    }\n    qsort(base, v90, 8uLL, (__compar_fn_t)sub_4397F0);\n    v125 = HIDWORD(qword_4F99EC);\n    v126 = v90;\n    if ( HIDWORD(qword_4F99EC) )\n    {\n      v127 = 0LL;\n      v126 = v90;\n      do\n      {\n        v128 = *((_QWORD *)qword_4F99D8 + v127);\n        if ( *(_DWORD *)v128 == 3 )\n        {\n          v129 = *(_DWORD **)(v128 + 40);\n          if ( v129[1595] )\n          {\n            if ( !v129[1594] && *((_DWORD *)off_49F6D0 + 18114) < v129[1] )\n            {\n              v129[5] = v126;\n              v130 = v126++;\n              *((_QWORD *)base + v130) = v129;\n            }\n          }\n        }\n        ++v127;\n      }\n      while ( v127 < v125 );\n    }\n    v131 = v126 - v90;\n    qsort((char *)base + 8 * v90, v126 - v90, 8uLL, (__compar_fn_t)sub_439810);\n    if ( v90 > 0 )\n    {\n      if ( v90 == 1 )\n      {\n        v132 = 0LL;\n        v133 = 0;\n      }\n      else\n      {\n        v132 = 0LL;\n        do\n        {\n          v142 = v131 + (signed int)v132;\n          *((_QWORD *)qword_4F9A58 + v142) = *((_QWORD *)base + v132);\n          *((_QWORD *)qword_4F9A58 + (signed int)v142 + 1) = *((_QWORD *)base + v132 + 1);\n          v132 += 2LL;\n        }\n        while ( (unsigned int)v90 - (unsigned __int64)(v90 & 1) != v132 );\n        v133 = v132;\n        if ( !(v90 & 1) )\n          goto LABEL_211;\n      }\n      *((_QWORD *)qword_4F9A58 + v131 + v133) = *((_QWORD *)base + v132);\n    }\nLABEL_211:\n    if ( v126 > v90 )\n    {\n      v134 = v90;\n      if ( ((_BYTE)v126 - (_BYTE)v90) & 3 )\n      {\n        v135 = 0LL;\n        do\n        {\n          *((_QWORD *)qword_4F9A58 + v135) = *((_QWORD *)base + v90 + v135);\n          ++v135;\n        }\n        while ( (((_BYTE)v126 - (_BYTE)v90) & 3) != v135 );\n        v134 = v90 + v135;\n      }\n      if ( (unsigned __int64)(v126 - 1LL - v90) >= 3 )\n      {\n        v136 = -8LL * v90;\n        do\n        {\n          *(_QWORD *)((char *)qword_4F9A58 + 8 * v134 + v136) = *((_QWORD *)base + v134);\n          *(_QWORD *)((char *)qword_4F9A58 + 8 * v134 + v136 + 8) = *((_QWORD *)base + v134 + 1);\n          *(_QWORD *)((char *)qword_4F9A58 + 8 * v134 + v136 + 16) = *((_QWORD *)base + v134 + 2);\n          *(_QWORD *)((char *)qword_4F9A58 + 8 * v134 + v136 + 24) = *((_QWORD *)base + v134 + 3);\n          v134 += 4LL;\n        }\n        while ( v126 != v134 );\n      }\n    }\n    HIDWORD(qword_4F9BE0[0]) = v126;\n    LODWORD(qword_4F9BE0[0]) = v126;\n    v137 = (unsigned int)dword_4F99F4;\n    v100 = v126;\n    if ( dword_4F99F4 )\n    {\n      v138 = 0LL;\n      v100 = v126;\n      do\n      {\n        v139 = *((_QWORD *)qword_4F99E0 + v138);\n        if ( *(_DWORD *)v139 == 3 )\n        {\n          v140 = *(_DWORD **)(v139 + 40);\n          if ( v140[1594] )\n          {\n            v140[1592] = v140[1593];\n            v140[5] = v100;\n            v141 = v100;\n            *((_QWORD *)base + v141) = v140;\n            ++v100;\n            *((_QWORD *)qword_4F9A58 + v141) = *(_QWORD *)(*((_QWORD *)qword_4F99E0 + v138) + 40LL);\n          }\n        }\n        ++v138;\n      }\n      while ( v138 < v137 );\n    }\n    qsort((char *)base + 8 * v126, v100 - v126, 8uLL, (__compar_fn_t)sub_439790);\n    qsort(\n      (char *)qword_4F9A58 + 8 * SLODWORD(qword_4F9BE0[0]),\n      v100 - (signed __int64)SLODWORD(qword_4F9BE0[0]),\n      8uLL,\n      (__compar_fn_t)sub_439790);\n    HIDWORD(qword_4F9BE0[0]) = v100;\n    LODWORD(qword_4F9BE0[0]) = v100;\n    goto LABEL_412;\n  }\nLABEL_12:\n  result = a1;\n  switch ( a1 )\n  {\n    case 0u:\n    case 3u:\n      if ( v2 )\n      {\n        v214 = v4;\n        v216 = v5;\n        v16 = (unsigned int)nmemb;\n        v17 = calloc((unsigned int)nmemb, 8uLL);\n        if ( !v17 )\n          sub_43EF40(0LL, (__int64)\"init_lists: fs_list0\");\n        v212 = v2;\n        v18 = calloc(v16, 8uLL);\n        if ( !v18 )\n          sub_43EF40(0LL, (__int64)\"init_lists: fs_listlt\");\n        LODWORD(v19) = 0;\n        v20 = 0;\n        if ( !HIDWORD(qword_4F99EC) )\n          goto LABEL_64;\n        v21 = qword_4F99D8;\n        v22 = BYTE4(qword_4F99EC) & 1;\n        if ( HIDWORD(qword_4F99EC) == 1 )\n        {\n          v23 = 0LL;\n          v20 = 0;\n          if ( !(qword_4F99EC & 0x100000000LL) )\n          {\nLABEL_64:\n            qsort(v17, v20, 8uLL, (__compar_fn_t)compar);\n            LODWORD(qword_4F9BE0[0]) = 0;\n            v56 = base;\n            LODWORD(v57) = 0;\n            LODWORD(v58) = 0;\n            if ( v212 == 1 )\n            {\n              if ( v20 > 0 )\n              {\n                LODWORD(v19) = 0;\n                LODWORD(v58) = 0;\n                LODWORD(v57) = 0;\n                while ( (signed int)v57 >= v20 )\n                {\nLABEL_73:\n                  if ( (signed int)v58 < v20 )\n                    goto LABEL_74;\nLABEL_83:\n                  if ( (signed int)v57 >= v20 && (signed int)v58 >= v20 )\n                    goto LABEL_85;\n                }\n                v57 = (signed int)v57;\n                while ( 1 )\n                {\n                  v59 = *((_QWORD *)v17 + v57);\n                  if ( *(_BYTE *)v59 & 1 )\n                  {\n                    v60 = *(_QWORD *)(v59 + 48);\n                    if ( *(_DWORD *)(v60 + 6380) )\n                    {\n                      if ( !*(_DWORD *)(v60 + 6376) )\n                        break;\n                    }\n                  }\n                  if ( ++v57 >= v20 )\n                    goto LABEL_73;\n                }\n                v19 = (signed int)v19;\n                v56[v19] = v60;\n                LODWORD(v19) = v19 + 1;\n                LODWORD(qword_4F9BE0[0]) = v19;\n                LODWORD(v57) = v57 + 1;\n                if ( (signed int)v58 >= v20 )\n                  goto LABEL_83;\nLABEL_74:\n                v58 = (signed int)v58;\n                while ( 1 )\n                {\n                  v61 = *((_QWORD *)v17 + v58);\n                  if ( *(_BYTE *)v61 & 2 )\n                  {\n                    v62 = *(_QWORD *)(v61 + 56);\n                    if ( *(_DWORD *)(v62 + 6380) )\n                    {\n                      if ( !*(_DWORD *)(v62 + 6376) )\n                        break;\n                    }\n                  }\n                  if ( ++v58 >= v20 )\n                    goto LABEL_83;\n                }\n                v19 = (signed int)v19;\n                v56[v19] = v62;\n                LODWORD(v19) = v19 + 1;\n                LODWORD(qword_4F9BE0[0]) = v19;\n                LODWORD(v58) = v58 + 1;\n                goto LABEL_83;\n              }\n              goto LABEL_106;\n            }\nLABEL_85:\n            if ( v212 != 2 || (signed int)v57 >= v20 && (signed int)v58 >= v20 )\n            {\nLABEL_106:\n              v67 = (unsigned int)dword_4F99F4;\n              LODWORD(v68) = 0;\n              LODWORD(v69) = 0;\n              if ( dword_4F99F4 )\n              {\n                v69 = 0LL;\n                do\n                {\n                  v70 = qword_4F99E0;\n                  v18[v69] = *((_QWORD *)qword_4F99E0 + v69);\n                  v71 = v70[v69];\n                  v72 = *(_DWORD *)(v71 + 8);\n                  if ( v72 & 1 )\n                    *(_DWORD *)(*(_QWORD *)(v71 + 48) + 6368LL) = v214 + 2 * *(_DWORD *)(*(_QWORD *)(v71 + 48) + 6372LL);\n                  ++v69;\n                  if ( v72 & 2 )\n                    *(_DWORD *)(*(_QWORD *)(v71 + 56) + 6368LL) = v216 + 2 * *(_DWORD *)(*(_QWORD *)(v71 + 56) + 6372LL);\n                }\n                while ( v69 < v67 );\n              }\n              v73 = (unsigned int)v69;\n              qsort(v18, (unsigned int)v69, 8uLL, (__compar_fn_t)sub_4397D0);\n              v74 = base;\n              LODWORD(v75) = 0;\n              if ( v212 == 1 )\n              {\n                if ( (_DWORD)v73 )\n                {\n                  LODWORD(v75) = 0;\n                  LODWORD(v68) = 0;\n                  while ( (signed int)v68 >= (signed int)v73 )\n                  {\nLABEL_122:\n                    if ( (signed int)v75 < (signed int)v73 )\n                      goto LABEL_123;\nLABEL_132:\n                    if ( (signed int)v68 >= (signed int)v73 && (signed int)v75 >= (signed int)v73 )\n                      goto LABEL_134;\n                  }\n                  v68 = (signed int)v68;\n                  while ( 1 )\n                  {\n                    v76 = v18[v68];\n                    if ( *(_BYTE *)v76 & 1 )\n                    {\n                      v77 = *(_QWORD *)(v76 + 48);\n                      if ( *(_DWORD *)(v77 + 6380) )\n                      {\n                        if ( *(_DWORD *)(v77 + 6376) )\n                          break;\n                      }\n                    }\n                    if ( ++v68 >= v73 )\n                      goto LABEL_122;\n                  }\n                  v80 = SLODWORD(qword_4F9BE0[0]);\n                  v74[v80] = v77;\n                  LODWORD(qword_4F9BE0[0]) = v80 + 1;\n                  LODWORD(v68) = v68 + 1;\n                  if ( (signed int)v75 >= (signed int)v73 )\n                    goto LABEL_132;\nLABEL_123:\n                  v75 = (signed int)v75;\n                  while ( 1 )\n                  {\n                    v78 = v18[v75];\n                    if ( *(_BYTE *)v78 & 2 )\n                    {\n                      v79 = *(_QWORD *)(v78 + 56);\n                      if ( *(_DWORD *)(v79 + 6380) )\n                      {\n                        if ( *(_DWORD *)(v79 + 6376) )\n                          break;\n                      }\n                    }\n                    if ( ++v75 >= v73 )\n                      goto LABEL_132;\n                  }\n                  v81 = SLODWORD(qword_4F9BE0[0]);\n                  v74[v81] = v79;\n                  LODWORD(qword_4F9BE0[0]) = v81 + 1;\n                  LODWORD(v75) = v75 + 1;\n                  goto LABEL_132;\n                }\nLABEL_155:\n                free(v17);\n                free(v18);\n                goto LABEL_173;\n              }\nLABEL_134:\n              if ( v212 != 2 || (signed int)v68 >= (signed int)v73 && (signed int)v75 >= (signed int)v73 )\n                goto LABEL_155;\n              while ( (signed int)v75 >= (signed int)v73 )\n              {\nLABEL_143:\n                if ( (signed int)v68 < (signed int)v73 )\n                  goto LABEL_144;\nLABEL_153:\n                if ( (signed int)v75 >= (signed int)v73 && (signed int)v68 >= (signed int)v73 )\n                  goto LABEL_155;\n              }\n              v75 = (signed int)v75;\n              while ( 1 )\n              {\n                v82 = v18[v75];\n                if ( *(_BYTE *)v82 & 2 )\n                {\n                  v83 = *(_QWORD *)(v82 + 56);\n                  if ( *(_DWORD *)(v83 + 6380) )\n                  {\n                    if ( *(_DWORD *)(v83 + 6376) )\n                      break;\n                  }\n                }\n                if ( ++v75 >= v73 )\n                  goto LABEL_143;\n              }\n              v86 = SLODWORD(qword_4F9BE0[0]);\n              v74[v86] = v83;\n              LODWORD(qword_4F9BE0[0]) = v86 + 1;\n              LODWORD(v75) = v75 + 1;\n              if ( (signed int)v68 >= (signed int)v73 )\n                goto LABEL_153;\nLABEL_144:\n              v68 = (signed int)v68;\n              while ( 1 )\n              {\n                v84 = v18[v68];\n                if ( *(_BYTE *)v84 & 1 )\n                {\n                  v85 = *(_QWORD *)(v84 + 48);\n                  if ( *(_DWORD *)(v85 + 6380) )\n                  {\n                    if ( *(_DWORD *)(v85 + 6376) )\n                      break;\n                  }\n                }\n                if ( ++v68 >= v73 )\n                  goto LABEL_153;\n              }\n              v87 = SLODWORD(qword_4F9BE0[0]);\n              v74[v87] = v85;\n              LODWORD(qword_4F9BE0[0]) = v87 + 1;\n              LODWORD(v68) = v68 + 1;\n              goto LABEL_153;\n            }\n            while ( (signed int)v58 >= v20 )\n            {\nLABEL_94:\n              if ( (signed int)v57 < v20 )\n                goto LABEL_95;\nLABEL_104:\n              if ( (signed int)v58 >= v20 && (signed int)v57 >= v20 )\n                goto LABEL_106;\n            }\n            v58 = (signed int)v58;\n            while ( 1 )\n            {\n              v63 = *((_QWORD *)v17 + v58);\n              if ( *(_BYTE *)v63 & 2 )\n              {\n                v64 = *(_QWORD *)(v63 + 56);\n                if ( *(_DWORD *)(v64 + 6380) )\n                {\n                  if ( !*(_DWORD *)(v64 + 6376) )\n                    break;\n                }\n              }\n              if ( ++v58 >= v20 )\n                goto LABEL_94;\n            }\n            v19 = (signed int)v19;\n            v56[v19] = v64;\n            LODWORD(v19) = v19 + 1;\n            LODWORD(qword_4F9BE0[0]) = v19;\n            LODWORD(v58) = v58 + 1;\n            if ( (signed int)v57 >= v20 )\n              goto LABEL_104;\nLABEL_95:\n            v57 = (signed int)v57;\n            while ( 1 )\n            {\n              v65 = *((_QWORD *)v17 + v57);\n              if ( *(_BYTE *)v65 & 1 )\n              {\n                v66 = *(_QWORD *)(v65 + 48);\n                if ( *(_DWORD *)(v66 + 6380) )\n                {\n                  if ( !*(_DWORD *)(v66 + 6376) )\n                    break;\n                }\n              }\n              if ( ++v57 >= v20 )\n                goto LABEL_104;\n            }\n            v19 = (signed int)v19;\n            v56[v19] = v66;\n            LODWORD(v19) = v19 + 1;\n            LODWORD(qword_4F9BE0[0]) = v19;\n            LODWORD(v57) = v57 + 1;\n            goto LABEL_104;\n          }\n        }\n        else\n        {\n          v49 = HIDWORD(qword_4F99EC) - v22;\n          v23 = 0LL;\n          v20 = 0;\n          do\n          {\n            v50 = v21[v23];\n            if ( *(_DWORD *)(v50 + 4) )\n            {\n              v51 = v20++;\n              *((_QWORD *)v17 + v51) = v50;\n            }\n            v52 = v21[v23 + 1];\n            if ( *(_DWORD *)(v52 + 4) )\n            {\n              v53 = v20++;\n              *((_QWORD *)v17 + v53) = v52;\n            }\n            v23 += 2LL;\n          }\n          while ( v49 != v23 );\n          if ( !v22 )\n            goto LABEL_64;\n        }\n        v54 = v21[v23];\n        if ( *(_DWORD *)(v54 + 4) )\n        {\n          v55 = v20++;\n          *((_QWORD *)v17 + v55) = v54;\n        }\n        goto LABEL_64;\n      }\n      v43 = HIDWORD(qword_4F99EC);\n      if ( HIDWORD(qword_4F99EC) )\n      {\n        v44 = 0LL;\n        v45 = 0;\n        do\n        {\n          v46 = *((_QWORD *)qword_4F99D8 + v44);\n          if ( *(_DWORD *)v46 == 3 )\n          {\n            v47 = *(_QWORD *)(v46 + 40);\n            if ( *(_DWORD *)(v47 + 6380) )\n            {\n              if ( !*(_DWORD *)(v47 + 6376) )\n              {\n                v48 = v45++;\n                *((_QWORD *)base + v48) = v47;\n              }\n            }\n          }\n          ++v44;\n        }\n        while ( v44 < v43 );\n      }\n      else\n      {\n        v45 = 0;\n      }\n      v94 = v45;\n      qsort(base, v45, 8uLL, (__compar_fn_t)sub_439760);\n      LODWORD(qword_4F9BE0[0]) = v45;\n      v95 = (unsigned int)dword_4F99F4;\n      if ( dword_4F99F4 )\n      {\n        v96 = 0LL;\n        do\n        {\n          v97 = *((_QWORD *)qword_4F99E0 + v96);\n          if ( *(_DWORD *)v97 == 3 )\n          {\n            v98 = *(_DWORD **)(v97 + 40);\n            if ( v98[1594] )\n            {\n              v98[1592] = v98[1593];\n              v98[5] = v45;\n              v99 = v45++;\n              *((_QWORD *)base + v99) = v98;\n            }\n          }\n          ++v96;\n        }\n        while ( v96 < v95 );\n      }\n      qsort((char *)base + 8 * v94, v45 - (signed int)v94, 8uLL, (__compar_fn_t)sub_439790);\n      LODWORD(qword_4F9BE0[0]) = v45;\nLABEL_173:\n      HIDWORD(qword_4F9BE0[0]) = 0;\n      v100 = 0;\n      break;\n    case 2u:\n    case 4u:\n      qword_4F9BE0[0] = 0LL;\n      return result;\n    default:\n      goto LABEL_33;\n  }\nLABEL_412:\n  v205 = qword_4F9BE0[0];\n  if ( SLODWORD(qword_4F9BE0[0]) < 2 || LODWORD(qword_4F9BE0[0]) != v100 )\n    goto LABEL_429;\n  if ( v100 <= 0 )\n    goto LABEL_428;\n  v206 = v100 & 3;\n  if ( (unsigned __int64)(unsigned int)v100 - 1 < 3 )\n  {\n    v207 = 0LL;\n    v208 = 0;\n    if ( !(v100 & 3) )\n      goto LABEL_427;\n    goto LABEL_423;\n  }\n  v207 = 0LL;\n  v208 = 0;\n  do\n  {\n    if ( *((_QWORD *)qword_4F9A58 + v207) ^ *((_QWORD *)base + v207) | *((_QWORD *)qword_4F9A58 + v207 + 1) ^ *((_QWORD *)base + v207 + 1) | *((_QWORD *)qword_4F9A58 + v207 + 2) ^ *((_QWORD *)base + v207 + 2) | *((_QWORD *)qword_4F9A58 + v207 + 3) ^ *((_QWORD *)base + v207 + 3) )\n      v208 = 1;\n    v207 += 4LL;\n  }\n  while ( (unsigned int)v100 - v206 != v207 );\n  if ( v100 & 3 )\n  {\nLABEL_423:\n    v209 = 0LL;\n    do\n    {\n      if ( *((_QWORD *)base + v207 + v209) != *((_QWORD *)qword_4F9A58 + v207 + v209) )\n        v208 = 1;\n      ++v209;\n    }\n    while ( v206 != v209 );\n  }\nLABEL_427:\n  if ( !v208 )\n  {\nLABEL_428:\n    v210 = *(_QWORD *)qword_4F9A58;\n    *(_QWORD *)qword_4F9A58 = *((_QWORD *)qword_4F9A58 + 1);\n    *((_QWORD *)qword_4F9A58 + 1) = v210;\n  }\nLABEL_429:\n  LODWORD(v211) = *((_DWORD *)off_49F6D0 + 18000);\n  if ( v205 <= (signed int)v211 )\n    LODWORD(v211) = v205;\n  LODWORD(qword_4F9BE0[0]) = v211;\n  result = *((unsigned int *)off_49F6D0 + 18001);\n  if ( v100 <= (signed int)result )\n    result = (unsigned int)v100;\n  HIDWORD(qword_4F9BE0[0]) = result;\n  if ( (unsigned int)v211 <= 0x20 )\n  {\n    v211 = (unsigned int)v211;\n    do\n      *((_QWORD *)base + v211++) = 0LL;\n    while ( (unsigned int)v211 < 0x21 );\n  }\n  if ( (unsigned int)result <= 0x20 )\n  {\n    result = (unsigned int)result;\n    do\n      *((_QWORD *)qword_4F9A58 + result++) = 0LL;\n    while ( (unsigned int)result < 0x21 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x437fa0L", 
            "funcEndAddr": "0x439757L", 
            "funcName": "sub_437FA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439760(const void *a1, const void *a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  unsigned int v4; // edx\n  bool v5; // sf\n  unsigned __int8 v6; // of\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 6364LL);\n  v3 = *(_DWORD *)(*(_QWORD *)a2 + 6364LL);\n  v4 = -(v2 > v3);\n  v6 = __OFSUB__(v2, v3);\n  v5 = v2 - v3 < 0;\n  result = 1LL;\n  if ( !(v5 ^ v6) )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x439760L", 
            "funcEndAddr": "0x439786L", 
            "funcName": "sub_439760"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439790(const void *a1, const void *a2)\n{\n  int v2; // eax\n  bool v3; // sf\n  unsigned __int8 v4; // of\n  _BOOL4 v5; // edx\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 6368LL);\n  v4 = __OFSUB__(v2, *(_DWORD *)(*(_QWORD *)a2 + 6368LL));\n  v3 = v2 - *(_DWORD *)(*(_QWORD *)a2 + 6368LL) < 0;\n  v5 = v2 < *(_DWORD *)(*(_QWORD *)a2 + 6368LL);\n  LOBYTE(v5) = v2 > *(_DWORD *)(*(_QWORD *)a2 + 6368LL);\n  result = 0xFFFFFFFFLL;\n  if ( !(v3 ^ v4) )\n    result = (unsigned int)v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x439790L", 
            "funcEndAddr": "0x4397b0L", 
            "funcName": "sub_439790"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall compar(const void *a1, const void *a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  unsigned int v4; // edx\n  bool v5; // sf\n  unsigned __int8 v6; // of\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 24LL);\n  v3 = *(_DWORD *)(*(_QWORD *)a2 + 24LL);\n  v4 = -(v2 > v3);\n  v6 = __OFSUB__(v2, v3);\n  v5 = v2 - v3 < 0;\n  result = 1LL;\n  if ( !(v5 ^ v6) )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x4397b0L", 
            "funcEndAddr": "0x4397d0L", 
            "funcName": "compar"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4397D0(const void *a1, const void *a2)\n{\n  int v2; // eax\n  bool v3; // sf\n  unsigned __int8 v4; // of\n  _BOOL4 v5; // edx\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 28LL);\n  v4 = __OFSUB__(v2, *(_DWORD *)(*(_QWORD *)a2 + 28LL));\n  v3 = v2 - *(_DWORD *)(*(_QWORD *)a2 + 28LL) < 0;\n  v5 = v2 < *(_DWORD *)(*(_QWORD *)a2 + 28LL);\n  LOBYTE(v5) = v2 > *(_DWORD *)(*(_QWORD *)a2 + 28LL);\n  result = 0xFFFFFFFFLL;\n  if ( !(v3 ^ v4) )\n    result = (unsigned int)v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x4397d0L", 
            "funcEndAddr": "0x4397eaL", 
            "funcName": "sub_4397D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4397F0(const void *a1, const void *a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  unsigned int v4; // edx\n  bool v5; // sf\n  unsigned __int8 v6; // of\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 4LL);\n  v3 = *(_DWORD *)(*(_QWORD *)a2 + 4LL);\n  v4 = -(v2 > v3);\n  v6 = __OFSUB__(v2, v3);\n  v5 = v2 - v3 < 0;\n  result = 1LL;\n  if ( !(v5 ^ v6) )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x4397f0L", 
            "funcEndAddr": "0x439810L", 
            "funcName": "sub_4397F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439810(const void *a1, const void *a2)\n{\n  int v2; // eax\n  bool v3; // sf\n  unsigned __int8 v4; // of\n  _BOOL4 v5; // edx\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 4LL);\n  v4 = __OFSUB__(v2, *(_DWORD *)(*(_QWORD *)a2 + 4LL));\n  v3 = v2 - *(_DWORD *)(*(_QWORD *)a2 + 4LL) < 0;\n  v5 = v2 < *(_DWORD *)(*(_QWORD *)a2 + 4LL);\n  LOBYTE(v5) = v2 > *(_DWORD *)(*(_QWORD *)a2 + 4LL);\n  result = 0xFFFFFFFFLL;\n  if ( !(v3 ^ v4) )\n    result = (unsigned int)v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x439810L", 
            "funcEndAddr": "0x43982aL", 
            "funcName": "sub_439810"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439830(const void *a1, const void *a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  unsigned int v4; // edx\n  bool v5; // sf\n  unsigned __int8 v6; // of\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 36LL);\n  v3 = *(_DWORD *)(*(_QWORD *)a2 + 36LL);\n  v4 = -(v2 > v3);\n  v6 = __OFSUB__(v2, v3);\n  v5 = v2 - v3 < 0;\n  result = 1LL;\n  if ( !(v5 ^ v6) )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x439830L", 
            "funcEndAddr": "0x439850L", 
            "funcName": "sub_439830"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439850(const void *a1, const void *a2)\n{\n  int v2; // eax\n  bool v3; // sf\n  unsigned __int8 v4; // of\n  _BOOL4 v5; // edx\n  signed __int64 result; // rax\n\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 36LL);\n  v4 = __OFSUB__(v2, *(_DWORD *)(*(_QWORD *)a2 + 36LL));\n  v3 = v2 - *(_DWORD *)(*(_QWORD *)a2 + 36LL) < 0;\n  v5 = v2 < *(_DWORD *)(*(_QWORD *)a2 + 36LL);\n  LOBYTE(v5) = v2 > *(_DWORD *)(*(_QWORD *)a2 + 36LL);\n  result = 0xFFFFFFFFLL;\n  if ( !(v3 ^ v4) )\n    result = (unsigned int)v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x439850L", 
            "funcEndAddr": "0x43986aL", 
            "funcName": "sub_439850"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_439870()\n{\n  signed __int64 v0; // rax\n  __int64 v1; // rax\n  __int64 v2; // rcx\n  __int64 v3; // rdx\n  int v4; // eax\n  __int64 v5; // rax\n  __int64 v6; // rcx\n  __int64 v7; // rdx\n  __int64 result; // rax\n\n  v0 = 4611686018427387900LL;\n  do\n  {\n    *(_QWORD *)qword_4F9A80[v0] = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 8) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 16) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 24) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 32) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 40) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 48) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 56) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 64) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 72) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 80) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 88) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 96) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 104) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 112) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 120) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 128) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 136) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 144) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 152) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 160) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 168) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 176) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 184) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 192) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 200) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 208) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 216) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 224) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 232) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 240) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 248) = 0LL;\n    *(_QWORD *)(qword_4F9A80[v0] + 256) = 0LL;\n    dword_4F9BF8[v0] = 0;\n    ++v0;\n  }\n  while ( v0 * 4 );\n  v1 = SLODWORD(qword_4F9BE0[0]);\n  if ( SLODWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v2 = 0LL;\n    v3 = 0LL;\n    do\n    {\n      *(_QWORD *)((char *)qword_4F9A60 + 2 * v2) = *(_QWORD *)(*(_QWORD *)((char *)base + v2) + 6528LL);\n      *(_QWORD *)((char *)qword_4F9A60 + 2 * v2 + 8) = *(_QWORD *)(*(_QWORD *)((char *)base + v2) + 6536LL);\n      *(_QWORD *)((char *)qword_4F9A70 + 2 * v2) = *(_QWORD *)(*(_QWORD *)((char *)base + v2) + 6536LL);\n      *(_QWORD *)((char *)qword_4F9A70 + 2 * v2 + 8) = *(_QWORD *)(*(_QWORD *)((char *)base + v2) + 6528LL);\n      ++v3;\n      v2 += 8LL;\n    }\n    while ( v3 < v1 );\n  }\n  v4 = 2 * v1;\n  dword_4F9BF0 = v4;\n  dword_4F9BE8 = v4;\n  v5 = SHIDWORD(qword_4F9BE0[0]);\n  if ( SHIDWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v6 = 0LL;\n    v7 = 0LL;\n    do\n    {\n      *(_QWORD *)((char *)qword_4F9A68 + 2 * v6) = *(_QWORD *)(*(_QWORD *)((char *)qword_4F9A58 + v6) + 6528LL);\n      *(_QWORD *)((char *)qword_4F9A68 + 2 * v6 + 8) = *(_QWORD *)(*(_QWORD *)((char *)qword_4F9A58 + v6) + 6536LL);\n      *(_QWORD *)((char *)qword_4F9A78 + 2 * v6) = *(_QWORD *)(*(_QWORD *)((char *)qword_4F9A58 + v6) + 6536LL);\n      *(_QWORD *)((char *)qword_4F9A78 + 2 * v6 + 8) = *(_QWORD *)(*(_QWORD *)((char *)qword_4F9A58 + v6) + 6528LL);\n      ++v7;\n      v6 += 8LL;\n    }\n    while ( v7 < v5 );\n  }\n  result = (unsigned int)(2 * v5);\n  dword_4F9BF4 = result;\n  dword_4F9BEC = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x439870L", 
            "funcEndAddr": "0x439c36L", 
            "funcName": "sub_439870"
        }, 
        {
            "decompiledFuncCode": "int *__fastcall sub_439C40(__int64 a1, int *a2, int a3, signed int *a4, __int64 a5, __int64 a6)\n{\n  signed int *v6; // r10\n  __int64 v7; // rbp\n  int v8; // eax\n  signed int v9; // eax\n  __int64 v10; // r12\n  int v11; // er15\n  int v12; // er13\n  int v13; // ecx\n  int v14; // ecx\n  signed int v15; // eax\n  int v16; // er8\n  __int64 v17; // rdi\n  __int64 v18; // rax\n  int v19; // esi\n  __int64 v20; // rbx\n  signed __int64 v21; // rcx\n  signed __int64 v22; // rax\n  int v23; // eax\n  __int64 v24; // rdi\n  __int64 v25; // rsi\n  signed int v26; // eax\n  int v27; // er8\n  unsigned __int64 v28; // rdi\n  __int64 v29; // rax\n  int v30; // ecx\n  __int64 v31; // rbx\n  signed __int64 v32; // rcx\n  signed __int64 v33; // rax\n  int v34; // edi\n  __int64 v35; // rax\n  __int64 v36; // rsi\n  int *result; // rax\n  signed int v38; // [rsp+0h] [rbp-68h]\n  int v39; // [rsp+4h] [rbp-64h]\n  int v40; // [rsp+8h] [rbp-60h]\n  int *v41; // [rsp+18h] [rbp-50h]\n  __int64 v42; // [rsp+20h] [rbp-48h]\n\n  v6 = a4;\n  v38 = 1 << (dword_4FA0E4 + 4);\n  v42 = a5;\n  v41 = a2;\n  v7 = a1;\n  if ( *((_DWORD *)off_49F6D0 + 7) )\n  {\n    v38 *= 2;\n    v8 = 2 * *((_DWORD *)off_49F6D0 + 18116) + 1;\n  }\n  else\n  {\n    v8 = *((_DWORD *)off_49F6D0 + 18116);\n  }\n  v39 = v8;\n  v9 = *a4;\n  v40 = a3 + 1;\n  if ( *a4 != 3 )\n  {\n    v10 = 0LL;\n    v11 = v39;\n    v12 = 0;\n    while ( 1 )\n    {\n      if ( v9 >= 4 )\n        error((__int64)\"Invalid remapping_of_pic_nums_idc command\", 500);\n      if ( v9 > 1 )\n        break;\n      v13 = *(_DWORD *)(v42 + 4 * v10) + 1;\n      if ( v9 )\n      {\n        v14 = v11 + v13;\n        v15 = v38;\n        if ( v14 < v38 )\n          v15 = 0;\n        v11 = v14 - v15;\n      }\n      else\n      {\n        v11 = (v38 & ((v11 - v13) >> 31)) + v11 - v13;\n      }\n      v26 = 0;\n      if ( v11 > v39 )\n        v26 = v38;\n      v27 = v11 - v26;\n      if ( HIDWORD(qword_4F99EC) )\n      {\n        v28 = 0LL;\n        do\n        {\n          v29 = *((_QWORD *)qword_4F99D8 + v28);\n          v30 = *(_DWORD *)(v29 + 4);\n          if ( *((_DWORD *)off_49F6D0 + 7) )\n          {\n            if ( v30 & 1 )\n            {\n              v31 = *(_QWORD *)(v29 + 48);\n              if ( !*(_DWORD *)(v31 + 6376) && *(_DWORD *)(v31 + 6364) == v27 )\n                goto LABEL_53;\n            }\n            if ( v30 & 2 )\n            {\n              v31 = *(_QWORD *)(v29 + 56);\n              if ( !*(_DWORD *)(v31 + 6376) )\n              {\nLABEL_47:\n                if ( *(_DWORD *)(v31 + 6364) == v27 )\n                  goto LABEL_53;\n                goto LABEL_51;\n              }\n            }\n          }\n          else if ( v30 == 3 )\n          {\n            v31 = *(_QWORD *)(v29 + 40);\n            if ( !*(_DWORD *)(v31 + 6376) )\n              goto LABEL_47;\n          }\nLABEL_51:\n          ++v28;\n        }\n        while ( v28 < HIDWORD(qword_4F99EC) );\n      }\n      v31 = 0LL;\nLABEL_53:\n      v32 = v12;\n      v33 = v40;\n      if ( v12 <= a3 )\n      {\n        do\n        {\n          *(_QWORD *)(v7 + 8 * v33) = *(_QWORD *)(v7 + 8 * v33 - 8);\n          --v33;\n        }\n        while ( v33 > v12 );\n        ++v12;\n        *(_QWORD *)(v7 + 8 * v32) = v31;\n        v34 = v12;\n        do\n        {\n          v35 = *(_QWORD *)(v7 + 8 * v32 + 8);\n          if ( v35 && (*(_DWORD *)(v35 + 6376) || *(_DWORD *)(v35 + 6364) != v27) )\n          {\n            v36 = v34++;\n            *(_QWORD *)(v7 + 8 * v36) = v35;\n          }\n          ++v32;\n        }\n        while ( v32 <= a3 );\n      }\n      else\n      {\n        ++v12;\n        *(_QWORD *)(v7 + 8 * v32) = v31;\n      }\nLABEL_62:\n      v9 = v6[v10++ + 1];\n      if ( v9 == 3 )\n        goto LABEL_63;\n    }\n    v16 = *(_DWORD *)(a6 + 4 * v10);\n    if ( !dword_4F99F4 )\n    {\nLABEL_26:\n      v20 = 0LL;\nLABEL_27:\n      v21 = v12;\n      v22 = v40;\n      if ( v12 <= a3 )\n      {\n        do\n        {\n          *(_QWORD *)(v7 + 8 * v22) = *(_QWORD *)(v7 + 8 * v22 - 8);\n          --v22;\n        }\n        while ( v22 > v12 );\n        ++v12;\n        *(_QWORD *)(v7 + 8 * v21) = v20;\n        v23 = v21 + 1;\n        do\n        {\n          v24 = *(_QWORD *)(v7 + 8 * v21 + 8);\n          if ( !*(_DWORD *)(v24 + 6376) || *(_DWORD *)(v24 + 6368) != v16 )\n          {\n            v25 = v23++;\n            *(_QWORD *)(v7 + 8 * v25) = v24;\n          }\n          ++v21;\n        }\n        while ( v21 <= a3 );\n      }\n      else\n      {\n        ++v12;\n        *(_QWORD *)(v7 + 8 * v21) = v20;\n      }\n      goto LABEL_62;\n    }\n    v17 = 0LL;\n    while ( 1 )\n    {\n      v18 = *((_QWORD *)qword_4F99E0 + v17);\n      v19 = *(_DWORD *)(v18 + 4);\n      if ( *((_DWORD *)off_49F6D0 + 7) )\n      {\n        if ( v19 & 1 )\n        {\n          v20 = *(_QWORD *)(v18 + 48);\n          if ( *(_DWORD *)(v20 + 6376) )\n          {\n            if ( *(_DWORD *)(v20 + 6368) == v16 )\n              goto LABEL_27;\n          }\n        }\n        if ( v19 & 2 )\n        {\n          v20 = *(_QWORD *)(v18 + 56);\n          if ( *(_DWORD *)(v20 + 6376) )\n          {\nLABEL_21:\n            if ( *(_DWORD *)(v20 + 6368) == v16 )\n              goto LABEL_27;\n            goto LABEL_25;\n          }\n        }\n      }\n      else if ( v19 == 3 )\n      {\n        v20 = *(_QWORD *)(v18 + 40);\n        if ( *(_DWORD *)(v20 + 6376) )\n          goto LABEL_21;\n      }\nLABEL_25:\n      if ( ++v17 >= (unsigned __int64)(unsigned int)dword_4F99F4 )\n        goto LABEL_26;\n    }\n  }\nLABEL_63:\n  result = v41;\n  *v41 = v40;\n  return result;\n}\n", 
            "funcStartAddr": "0x439c40L", 
            "funcEndAddr": "0x439fe5L", 
            "funcName": "sub_439C40"
        }, 
        {
            "decompiledFuncCode": "void sub_439FF0()\n{\n  unsigned __int64 v0; // rcx\n  unsigned __int64 v1; // rdx\n  unsigned int v2; // er8\n  int *v3; // rsi\n  int v4; // edi\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdi\n  unsigned __int64 v9; // rcx\n  unsigned __int64 v10; // rdx\n  unsigned __int64 v11; // rax\n  signed __int64 v12; // rsi\n\n  v0 = (unsigned int)qword_4F99EC;\n  if ( (_DWORD)qword_4F99EC )\n  {\n    v1 = 0LL;\n    v2 = 0;\n    do\n    {\n      v3 = (int *)*((_QWORD *)qword_4F99D0 + v1);\n      v4 = *v3;\n      if ( *v3 == 3 && (v5 = *((_QWORD *)v3 + 5), *(_DWORD *)(v5 + 6380)) && !*(_DWORD *)(v5 + 6376)\n        || !*((_DWORD *)qword_4F9DC0 + 287)\n        && (v4 & 1 && (v6 = *((_QWORD *)v3 + 6), *(_DWORD *)(v6 + 6380)) && !*(_DWORD *)(v6 + 6376)\n         || v4 & 2 && (v7 = *((_QWORD *)v3 + 7), *(_DWORD *)(v7 + 6380)) && !*(_DWORD *)(v7 + 6376)) )\n      {\n        v8 = v2++;\n        *((_QWORD *)qword_4F99D8 + v8) = v3;\n      }\n      ++v1;\n    }\n    while ( v1 < v0 );\n  }\n  else\n  {\n    v2 = 0;\n  }\n  HIDWORD(qword_4F99EC) = v2;\n  v9 = (unsigned int)nmemb;\n  if ( v2 < (unsigned int)nmemb )\n  {\n    v10 = v2;\n    v11 = (unsigned int)nmemb - 1LL - v2;\n    if ( ((_BYTE)nmemb - (_BYTE)v2) & 3 )\n    {\n      v12 = -(signed __int64)(((_BYTE)nmemb - (_BYTE)v2) & 3);\n      do\n      {\n        *((_QWORD *)qword_4F99D8 + v10++) = 0LL;\n        ++v12;\n      }\n      while ( v12 );\n    }\n    if ( v11 >= 3 )\n    {\n      do\n      {\n        *((_QWORD *)qword_4F99D8 + v10) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v10 + 1) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v10 + 2) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v10 + 3) = 0LL;\n        v10 += 4LL;\n      }\n      while ( v10 < v9 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x439ff0L", 
            "funcEndAddr": "0x43a149L", 
            "funcName": "sub_439FF0"
        }, 
        {
            "decompiledFuncCode": "void sub_43A150()\n{\n  unsigned __int64 v0; // rcx\n  unsigned __int64 v1; // rdx\n  unsigned int v2; // er8\n  int *v3; // rsi\n  int v4; // edi\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdi\n  unsigned __int64 v9; // rcx\n  unsigned __int64 v10; // rdx\n  unsigned __int64 v11; // rax\n  signed __int64 v12; // rsi\n\n  v0 = (unsigned int)qword_4F99EC;\n  if ( (_DWORD)qword_4F99EC )\n  {\n    v1 = 0LL;\n    v2 = 0;\n    do\n    {\n      v3 = (int *)*((_QWORD *)qword_4F99D0 + v1);\n      v4 = *v3;\n      if ( *v3 == 3 && (v5 = *((_QWORD *)v3 + 5), *(_DWORD *)(v5 + 6380)) && *(_DWORD *)(v5 + 6376)\n        || !*((_DWORD *)qword_4F9DC0 + 287)\n        && (v4 & 1 && (v6 = *((_QWORD *)v3 + 6), *(_DWORD *)(v6 + 6380)) && *(_DWORD *)(v6 + 6376)\n         || v4 & 2 && (v7 = *((_QWORD *)v3 + 7), *(_DWORD *)(v7 + 6380)) && *(_DWORD *)(v7 + 6376)) )\n      {\n        v8 = v2++;\n        *((_QWORD *)qword_4F99E0 + v8) = v3;\n      }\n      ++v1;\n    }\n    while ( v1 < v0 );\n  }\n  else\n  {\n    v2 = 0;\n  }\n  dword_4F99F4 = v2;\n  v9 = (unsigned int)nmemb;\n  if ( v2 < (unsigned int)nmemb )\n  {\n    v10 = v2;\n    v11 = (unsigned int)nmemb - 1LL - v2;\n    if ( ((_BYTE)nmemb - (_BYTE)v2) & 3 )\n    {\n      v12 = -(signed __int64)(((_BYTE)nmemb - (_BYTE)v2) & 3);\n      do\n      {\n        *((_QWORD *)qword_4F99E0 + v10++) = 0LL;\n        ++v12;\n      }\n      while ( v12 );\n    }\n    if ( v11 >= 3 )\n    {\n      do\n      {\n        *((_QWORD *)qword_4F99E0 + v10) = 0LL;\n        *((_QWORD *)qword_4F99E0 + v10 + 1) = 0LL;\n        *((_QWORD *)qword_4F99E0 + v10 + 2) = 0LL;\n        *((_QWORD *)qword_4F99E0 + v10 + 3) = 0LL;\n        v10 += 4LL;\n      }\n      while ( v10 < v9 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43a150L", 
            "funcEndAddr": "0x43a2b9L", 
            "funcName": "sub_43A150"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43A380(signed __int64 a1, unsigned __int64 a2)\n{\n  _DWORD *v2; // r14\n  _DWORD *v3; // rax\n  int v4; // ecx\n  unsigned __int64 v5; // rbp\n  _QWORD *v6; // rbx\n  void *v7; // rdi\n  void *v8; // rdi\n  void *v9; // rdi\n  char *v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // rcx\n  unsigned int *v13; // r12\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  signed int v20; // eax\n  int v21; // eax\n  int v22; // ecx\n  int v23; // eax\n  unsigned int v24; // ecx\n  unsigned int v25; // esi\n  unsigned __int64 v26; // rdi\n  int *v27; // rsi\n  int v28; // ebp\n  bool v29; // dl\n  __int64 v30; // rdx\n  int *v31; // rdi\n  unsigned int v32; // er8\n  signed int v33; // edx\n  signed int v34; // ecx\n  unsigned int v35; // edi\n  unsigned __int64 v36; // rbp\n  __int64 v37; // rax\n  unsigned __int64 v38; // rbx\n  int v39; // eax\n  __int64 v40; // rcx\n  int v41; // edi\n  _DWORD *v42; // rax\n  _DWORD *v43; // rdx\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _DWORD *v46; // rcx\n  int v47; // ecx\n  _DWORD *v48; // rcx\n  _DWORD *v49; // rax\n  const char *v50; // rdi\n  int v51; // er8\n  int v52; // er8\n  __int64 v53; // rbp\n  __int64 v54; // rdi\n  int v55; // ebx\n  __int64 v56; // rax\n  __int64 v57; // rax\n  unsigned __int64 v58; // rax\n  unsigned int v59; // er10\n  int v60; // er11\n  _QWORD *v61; // r15\n  _DWORD *v62; // r8\n  __int64 v63; // rbp\n  int *v64; // rcx\n  int v65; // edx\n  int v66; // ebx\n  __int64 v67; // rdi\n  int v68; // edx\n  __int64 v69; // r9\n  int v70; // edx\n  int v71; // ebx\n  int v72; // edx\n  unsigned int v73; // er15\n  int v74; // er13\n  __int64 v75; // rdx\n  __int64 v76; // rsi\n  int v77; // edi\n  int v78; // ebx\n  __int64 v79; // rbp\n  __int64 v80; // rdx\n  __int64 v81; // rdi\n  const char *v82; // rdi\n  signed int v83; // eax\n  __int64 v84; // rcx\n  char *v85; // rdx\n  _DWORD *v86; // r8\n  int *v87; // rdi\n  int v88; // ebp\n  int v89; // ebx\n  unsigned __int64 v90; // rbx\n  __int64 v91; // rax\n  unsigned __int64 *v92; // rcx\n  _DWORD *v93; // rdx\n  int v94; // edi\n  int v95; // ebp\n  unsigned int v96; // ebp\n  __int64 v97; // rax\n  unsigned __int64 *v98; // rcx\n  _DWORD *v99; // rdx\n  int v100; // edi\n  int v101; // ebp\n  __int64 v102; // rcx\n  _DWORD *v103; // rdi\n  __int64 v104; // rax\n  unsigned __int64 *v105; // rcx\n  _DWORD *v106; // r8\n  int v107; // edi\n  int v108; // ebx\n  __int64 v109; // rdi\n  _DWORD *v110; // rax\n  int v111; // ecx\n\n  v2 = (_DWORD *)a1;\n  v3 = off_49F6D0;\n  v4 = *((_DWORD *)off_49F6D0 + 18124);\n  *(_DWORD *)(a1 + 6380) = v4 != 0;\n  v3[18161] = 0;\n  v3[18160] = v3[7] == 2;\n  if ( *(_DWORD *)(*((_QWORD *)v3 + 1769) + 4LL) )\n  {\n    if ( !v3[18126] )\n    {\n      sub_43C5F0(a1, a2);\nLABEL_40:\n      qword_4F9A08 = 0LL;\n      sub_439FF0();\n      sub_43A150();\n      dword_4F99F8 = 2147483648;\n      if ( *((_DWORD *)off_49F6D0 + 18127) )\n      {\n        dword_4F99FC = 0;\n        v2[1593] = 0;\n        v20 = 1;\n      }\n      else\n      {\n        dword_4F99FC = -1;\n        v20 = 0;\n      }\n      v2[1594] = v20;\n      goto LABEL_44;\n    }\n    if ( (_DWORD)qword_4F99EC )\n    {\n      v5 = 0LL;\n      do\n      {\n        v6 = (_QWORD *)*((_QWORD *)qword_4F99D0 + v5);\n        if ( v6 )\n        {\n          v7 = (void *)v6[5];\n          if ( v7 )\n          {\n            sub_437D90(v7);\n            v6[5] = 0LL;\n          }\n          v8 = (void *)v6[6];\n          if ( v8 )\n          {\n            sub_437D90(v8);\n            v6[6] = 0LL;\n          }\n          v9 = (void *)v6[7];\n          if ( v9 )\n            sub_437D90(v9);\n          free(v6);\n        }\n        v10 = (char *)calloc(1uLL, 0x40uLL);\n        if ( !v10 )\n          sub_43EF40(0LL, (__int64)\"alloc_frame_store: f\");\n        *(_OWORD *)v10 = 0LL;\n        *(_OWORD *)(v10 + 40) = 0LL;\n        *((_QWORD *)v10 + 7) = 0LL;\n        *((_QWORD *)qword_4F99D0 + v5++) = v10;\n      }\n      while ( v5 < (unsigned int)qword_4F99EC );\n    }\n    if ( HIDWORD(qword_4F99EC) )\n    {\n      v11 = BYTE4(qword_4F99EC) & 3;\n      if ( (unsigned __int64)HIDWORD(qword_4F99EC) - 1 < 3 )\n      {\n        v12 = 0LL;\n        if ( !(qword_4F99EC & 0x300000000LL) )\n          goto LABEL_30;\n        goto LABEL_28;\n      }\n      v14 = HIDWORD(qword_4F99EC) - v11;\n      v12 = 0LL;\n      do\n      {\n        *((_QWORD *)qword_4F99D8 + v12) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v12 + 1) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v12 + 2) = 0LL;\n        *((_QWORD *)qword_4F99D8 + v12 + 3) = 0LL;\n        v12 += 4LL;\n      }\n      while ( v14 != v12 );\n      if ( v11 )\n      {\nLABEL_28:\n        v15 = -v11;\n        do\n        {\n          *((_QWORD *)qword_4F99D8 + v12++) = 0LL;\n          ++v15;\n        }\n        while ( v15 );\n        goto LABEL_30;\n      }\n    }\nLABEL_30:\n    if ( dword_4F99F4 )\n    {\n      v16 = dword_4F99F4 & 3;\n      if ( (unsigned __int64)(unsigned int)dword_4F99F4 - 1 >= 3 )\n      {\n        v18 = (unsigned int)dword_4F99F4 - v16;\n        v17 = 0LL;\n        do\n        {\n          *((_QWORD *)qword_4F99E0 + v17) = 0LL;\n          *((_QWORD *)qword_4F99E0 + v17 + 1) = 0LL;\n          *((_QWORD *)qword_4F99E0 + v17 + 2) = 0LL;\n          *((_QWORD *)qword_4F99E0 + v17 + 3) = 0LL;\n          v17 += 4LL;\n        }\n        while ( v18 != v17 );\n        if ( !v16 )\n          goto LABEL_39;\n      }\n      else\n      {\n        v17 = 0LL;\n        if ( !(dword_4F99F4 & 3) )\n          goto LABEL_39;\n      }\n      v19 = -v16;\n      do\n      {\n        *((_QWORD *)qword_4F99E0 + v17++) = 0LL;\n        ++v19;\n      }\n      while ( v19 );\n    }\nLABEL_39:\n    LODWORD(qword_4F99EC) = 0;\n    goto LABEL_40;\n  }\n  if ( !v4 )\n    goto LABEL_44;\n  if ( !v3[18125] )\n    goto LABEL_44;\n  v3[18161] = 0;\n  v13 = (unsigned int *)*((_QWORD *)v3 + 9064);\n  if ( !v13 )\n    goto LABEL_44;\n  while ( 2 )\n  {\n    switch ( (unsigned __int64)*v13 )\n    {\n      case 0uLL:\n        if ( !*((_QWORD *)v13 + 3) )\n          goto LABEL_276;\n        v50 = \"memory_management_control_operation = 0 not last operation in buffer\";\n        goto LABEL_136;\n      case 1uLL:\n        v51 = 2 * v2[1590] + 1;\n        if ( !*v2 )\n          v51 = v2[1590];\n        if ( !HIDWORD(qword_4F99EC) )\n          goto LABEL_153;\n        v52 = ~v13[1] + v51;\n        a2 = (unsigned __int64)qword_4F99D8;\n        v53 = 0LL;\n        while ( 2 )\n        {\n          v54 = *((_QWORD *)qword_4F99D8 + v53);\n          v55 = *(_DWORD *)(v54 + 4);\n          if ( *v2 )\n          {\n            if ( v55 & 1 && !(*(_BYTE *)(v54 + 8) & 1) && (v56 = *(_QWORD *)(v54 + 48), *(_DWORD *)(v56 + 6364) == v52) )\n            {\n              *(_DWORD *)(v56 + 6380) = 0;\n              *(_DWORD *)(v54 + 4) = v55 & 2;\n              if ( *(_DWORD *)v54 == 3 )\n                goto LABEL_119;\n            }\n            else\n            {\n              if ( !(v55 & 2) )\n                goto LABEL_152;\n              if ( *(_BYTE *)(v54 + 8) & 2 )\n                goto LABEL_152;\n              v57 = *(_QWORD *)(v54 + 56);\n              if ( *(_DWORD *)(v57 + 6364) != v52 )\n                goto LABEL_152;\n              *(_DWORD *)(v57 + 6380) = 0;\n              *(_DWORD *)(v54 + 4) = v55 & 1;\n              if ( *(_DWORD *)v54 == 3 )\n              {\nLABEL_119:\n                *(_DWORD *)(*(_QWORD *)(v54 + 40) + 6380LL) = 0;\n                sub_439FF0();\n                goto LABEL_276;\n              }\n            }\nLABEL_153:\n            sub_439FF0();\n          }\n          else\n          {\n            if ( v55 != 3 || *(_DWORD *)(v54 + 8) || *(_DWORD *)(*(_QWORD *)(v54 + 40) + 6364LL) != v52 )\n            {\nLABEL_152:\n              if ( ++v53 >= (unsigned __int64)HIDWORD(qword_4F99EC) )\n                goto LABEL_153;\n              continue;\n            }\n            sub_43C6F0((int *)v54);\n            sub_439FF0();\n          }\n          goto LABEL_276;\n        }\n      case 2uLL:\n        v58 = (unsigned int)dword_4F99F4;\n        if ( !dword_4F99F4 )\n          goto LABEL_217;\n        v59 = v13[2];\n        v60 = *v2;\n        v61 = qword_4F99E0;\n        v62 = qword_4F9DC0;\n        v63 = 0LL;\n        while ( 2 )\n        {\n          v64 = (int *)v61[v63];\n          v65 = v64[1];\n          if ( !v60 )\n          {\n            if ( v65 == 3 && v64[2] == 3 )\n            {\n              v69 = *((_QWORD *)v64 + 5);\n              if ( *(_DWORD *)(v69 + 6368) == v59 )\n              {\n                v70 = v62[287];\n                v71 = *v64;\n                if ( !v70 )\n                {\n                  if ( v71 & 1 )\n                  {\n                    a2 = *((_QWORD *)v64 + 6);\n                    *(_QWORD *)(a2 + 6376) = 0LL;\n                  }\n                  if ( v71 & 2 )\n                  {\n                    a2 = *((_QWORD *)v64 + 7);\n                    *(_QWORD *)(a2 + 6376) = 0LL;\n                  }\n                }\n                if ( v71 == 3 )\n                {\n                  if ( !v70 )\n                  {\n                    *(_QWORD *)(*((_QWORD *)v64 + 6) + 6376LL) = 0LL;\n                    *(_QWORD *)(*((_QWORD *)v64 + 7) + 6376LL) = 0LL;\n                  }\n                  *(_QWORD *)(v69 + 6376) = 0LL;\n                }\n                *(_QWORD *)(v64 + 1) = 0LL;\n              }\n            }\nLABEL_177:\n            if ( ++v63 >= v58 )\n              goto LABEL_217;\n            continue;\n          }\n          break;\n        }\n        v66 = v64[1] & 1;\n        if ( v65 & 1 )\n        {\n          a2 = (unsigned int)v64[2];\n          if ( a2 & 1 )\n          {\n            v67 = *((_QWORD *)v64 + 6);\n            if ( *(_DWORD *)(v67 + 6368) == v59 )\n            {\n              *(_QWORD *)(v67 + 6376) = 0LL;\n              v64[1] = v65 & 2;\n              a2 &= 2u;\n              v64[2] = a2;\n              if ( *v64 != 3 )\n                goto LABEL_217;\nLABEL_115:\n              *(_QWORD *)(*((_QWORD *)v64 + 5) + 6376LL) = 0LL;\n              goto LABEL_217;\n            }\n          }\n        }\n        if ( !(v65 & 2) )\n          goto LABEL_177;\n        v68 = v64[2];\n        if ( !(v68 & 2) )\n          goto LABEL_177;\n        a2 = *((_QWORD *)v64 + 7);\n        if ( *(_DWORD *)(a2 + 6368) != v59 )\n          goto LABEL_177;\n        *(_QWORD *)(a2 + 6376) = 0LL;\n        v64[1] = v66;\n        v64[2] = v68 & 1;\n        if ( *v64 == 3 )\n          goto LABEL_115;\nLABEL_217:\n        sub_43A150();\n        goto LABEL_276;\n      case 3uLL:\n        v72 = 2 * v2[1590] + 1;\n        if ( !*v2 )\n          v72 = v2[1590];\n        v73 = v13[3];\n        v74 = v72 + ~v13[1];\n        if ( !*v2 )\n        {\n          v97 = (unsigned int)dword_4F99F4;\n          if ( dword_4F99F4 )\n          {\n            v98 = (unsigned __int64 *)qword_4F99E0;\n            v99 = qword_4F9DC0;\n            do\n            {\n              a2 = *v98;\n              if ( *(_DWORD *)(*v98 + 28) == v73 )\n              {\n                v100 = v99[287];\n                v101 = *(_DWORD *)a2;\n                if ( !v100 )\n                {\n                  if ( v101 & 1 )\n                    *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                  if ( v101 & 2 )\n                    *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n                }\n                if ( v101 == 3 )\n                {\n                  if ( !v100 )\n                  {\n                    *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                    *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n                  }\n                  *(_QWORD *)(*(_QWORD *)(a2 + 40) + 6376LL) = 0LL;\n                }\n                *(_QWORD *)(a2 + 4) = 0LL;\n              }\n              ++v98;\n              --v97;\n            }\n            while ( v97 );\n          }\nLABEL_252:\n          if ( HIDWORD(qword_4F99EC) )\n          {\n            a2 = 0LL;\n            while ( 1 )\n            {\n              v102 = *((_QWORD *)qword_4F99D8 + a2);\n              if ( *(_DWORD *)(v102 + 4) == 3 )\n              {\n                v103 = *(_DWORD **)(v102 + 40);\n                if ( !v103[1594] && v103[1591] == v74 )\n                  break;\n              }\n              if ( ++a2 >= HIDWORD(qword_4F99EC) )\n                goto LABEL_258;\n            }\n            v42 = *(_DWORD **)(v102 + 56);\n            v42[1593] = v73;\n            v43 = *(_DWORD **)(v102 + 48);\n            v43[1593] = v73;\n            v103[1593] = v73;\n            *(_DWORD *)(v102 + 28) = v73;\n            v42[1592] = v73;\n            v43[1592] = v73;\n            v103[1592] = v73;\n            v42[1594] = 1;\n            v43[1594] = 1;\n            v103[1594] = 1;\n            *(_DWORD *)(v102 + 8) = 3;\n            goto LABEL_260;\n          }\nLABEL_258:\n          v82 = \"Warning: reference frame for long term marking not found\";\nLABEL_259:\n          puts(v82);\n          goto LABEL_260;\n        }\n        if ( !HIDWORD(qword_4F99EC) )\nLABEL_189:\n          error((__int64)\"field for long term marking not found\", 200);\n        v75 = 0LL;\n        while ( 1 )\n        {\n          v76 = *((_QWORD *)qword_4F99D8 + v75);\n          v77 = *(_DWORD *)(v76 + 4);\n          if ( v77 & 1 && *(_DWORD *)(*(_QWORD *)(v76 + 48) + 6364LL) == v74 )\n          {\n            v41 = 1;\n            goto LABEL_190;\n          }\n          if ( v77 & 2 && *(_DWORD *)(*(_QWORD *)(v76 + 56) + 6364LL) == v74 )\n            break;\n          if ( ++v75 >= (unsigned __int64)HIDWORD(qword_4F99EC) )\n            goto LABEL_189;\n        }\n        v41 = 2;\nLABEL_190:\n        a2 = v73;\n        sub_43E9D0(v41, v73, 0, 0, v74);\n        v78 = *v2;\n        if ( *v2 != 1 )\n        {\n          if ( !v78 )\n            goto LABEL_252;\n          v78 = 0;\n        }\n        if ( !HIDWORD(qword_4F99EC) )\n        {\nLABEL_202:\n          v82 = \"Warning: reference field for long term marking not found\";\n          goto LABEL_259;\n        }\n        v44 = qword_4F99D8;\n        v79 = 0LL;\n        while ( 1 )\n        {\n          v80 = *((_QWORD *)qword_4F99D8 + v79);\n          a2 = *(unsigned int *)(v80 + 4);\n          if ( a2 & 1 )\n          {\n            v81 = *(_QWORD *)(v80 + 48);\n            if ( !*(_DWORD *)(v81 + 6376) && *(_DWORD *)(v81 + 6364) == v74 )\n              break;\n          }\n          if ( a2 & 2 )\n          {\n            a2 = *(_QWORD *)(v80 + 56);\n            if ( !*(_DWORD *)(a2 + 6376) && *(_DWORD *)(a2 + 6364) == v74 )\n            {\n              if ( *(_DWORD *)(v80 + 8) && *(_DWORD *)(v80 + 28) != v73 )\n              {\n                puts(\"Warning: assigning long_term_frame_idx different from other field\");\n                v44 = qword_4F99D8;\n              }\n              v45 = v44[v79];\n              v48 = *(_DWORD **)(v45 + 56);\n              v48[1593] = v73;\n              *(_DWORD *)(v45 + 28) = v73;\n              v48[1592] = 2 * v73 | v78;\n              v48[1594] = 1;\n              v47 = *(_DWORD *)(v45 + 8) | 2;\n              goto LABEL_129;\n            }\n          }\n          if ( ++v79 >= (unsigned __int64)HIDWORD(qword_4F99EC) )\n            goto LABEL_202;\n        }\n        if ( *(_DWORD *)(v80 + 8) && *(_DWORD *)(v80 + 28) != v73 )\n        {\n          puts(\"Warning: assigning long_term_frame_idx different from other field\");\n          v44 = qword_4F99D8;\n        }\n        v45 = v44[v79];\n        v46 = *(_DWORD **)(v45 + 48);\n        v46[1593] = v73;\n        *(_DWORD *)(v45 + 28) = v73;\n        v46[1592] = 2 * v73 | v78;\n        v46[1594] = 1;\n        v47 = *(_DWORD *)(v45 + 8) | 1;\nLABEL_129:\n        *(_DWORD *)(v45 + 8) = v47;\n        if ( v47 == 3 )\n        {\n          v49 = *(_DWORD **)(v45 + 40);\n          v49[1594] = 1;\n          v49[1592] = v73;\n          v49[1593] = v73;\n        }\nLABEL_260:\n        sub_439FF0();\n        sub_43A150();\nLABEL_276:\n        *((_QWORD *)off_49F6D0 + 9064) = *((_QWORD *)v13 + 3);\n        v109 = (__int64)v13;\n        free(v13);\n        v110 = off_49F6D0;\n        v13 = (unsigned int *)*((_QWORD *)off_49F6D0 + 9064);\n        if ( v13 )\n          continue;\n        if ( *((_DWORD *)off_49F6D0 + 18161) )\n        {\n          *((_QWORD *)v2 + 795) = 0LL;\n          v2[1] = 0;\n          v110[18115] = 0;\n          v111 = *v2;\n          if ( *v2 )\n          {\n            if ( v111 == 2 )\n            {\n              v110[18113] = 0;\n            }\n            else if ( v111 == 1 )\n            {\n              v110[18112] = 0;\n            }\n          }\n          else\n          {\n            v110[18114] = 0;\n          }\n          sub_43C5F0(v109, a2);\n        }\nLABEL_44:\n        v21 = *v2;\n        if ( *v2 != 1 && v21 != 2 || !qword_4F9A08 || *(_DWORD *)(qword_4F9A08 + 20) != v2[1591] )\n          goto LABEL_56;\n        v22 = *(_DWORD *)qword_4F9A08;\n        if ( v21 != 1 )\n        {\n          if ( v22 == 1 )\n            goto LABEL_52;\n          goto LABEL_56;\n        }\n        if ( v22 != 2 )\n          goto LABEL_56;\nLABEL_52:\n        v23 = *(_DWORD *)(qword_4F9A08 + 12);\n        if ( v2[1595] )\n        {\n          if ( v23 )\n            goto LABEL_54;\nLABEL_56:\n          if ( !*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1769) + 4LL) && v2[1595] && !*((_DWORD *)off_49F6D0 + 18125) )\n          {\n            if ( HIDWORD(qword_4F99EC) == *((_DWORD *)qword_4F9DC0 + 283) - dword_4F99F4 && (_DWORD)qword_4F99EC )\n            {\n              v30 = 0LL;\n              while ( 1 )\n              {\n                v31 = (int *)*((_QWORD *)qword_4F99D0 + v30);\n                if ( v31[1] )\n                {\n                  if ( !v31[2] )\n                    break;\n                }\n                if ( ++v30 >= (unsigned __int64)(unsigned int)qword_4F99EC )\n                  goto LABEL_283;\n              }\n              sub_43C6F0(v31);\n              sub_439FF0();\n            }\nLABEL_283:\n            v2[1594] = 0;\n          }\n          v24 = qword_4F99EC;\n          v25 = nmemb;\n          if ( (_DWORD)qword_4F99EC && (_DWORD)qword_4F99EC == (_DWORD)nmemb )\n          {\n            v26 = 0LL;\n            while ( 1 )\n            {\n              v27 = (int *)*((_QWORD *)qword_4F99D0 + v26);\n              if ( v27[8] )\n              {\n                if ( !v27[1] )\n                {\n                  v28 = *v27;\n                  if ( (*v27 != 3 || !*(_DWORD *)(*((_QWORD *)v27 + 5) + 6380LL))\n                    && (*((_DWORD *)qword_4F9DC0 + 287)\n                     || (!(v28 & 1) || !*(_DWORD *)(*((_QWORD *)v27 + 6) + 6380LL))\n                     && (!(v28 & 2) || !*(_DWORD *)(*((_QWORD *)v27 + 7) + 6380LL))) )\n                  {\n                    break;\n                  }\n                }\n              }\n              if ( ++v26 >= (unsigned int)qword_4F99EC )\n              {\n                v29 = v2[1595] != 0;\n                goto LABEL_82;\n              }\n            }\n            sub_43EB30(v26);\n            v24 = qword_4F99EC;\n            v25 = nmemb;\n          }\n          v32 = v24;\n          v29 = v2[1595] != 0;\n          v24 = v25;\n          if ( v32 == v25 )\n          {\nLABEL_82:\n            v32 = v24;\n            while ( 1 )\n            {\n              if ( !v29 )\n              {\n                if ( !v32 )\n                  error((__int64)\"Cannot determine smallest POC, DPB empty.\", 150);\n                v33 = -1;\n                v34 = 0x7FFFFFFF;\n                v35 = v32;\n                v36 = 0LL;\n                do\n                {\n                  v37 = *((_QWORD *)qword_4F99D0 + v36);\n                  if ( v34 > *(_DWORD *)(v37 + 36) )\n                  {\n                    if ( !*(_DWORD *)(v37 + 32) )\n                      v34 = *(_DWORD *)(v37 + 36);\n                    if ( !*(_DWORD *)(v37 + 32) )\n                    {\n                      v33 = v36;\n                      if ( !*(_DWORD *)(v37 + 32) )\n                        v35 = v32;\n                    }\n                  }\n                  ++v36;\n                }\n                while ( v36 < v35 );\n                if ( v33 == -1 || v2[1] < v34 )\n                  break;\n              }\n              sub_43EC70();\n              v32 = qword_4F99EC;\n              v29 = v2[1595] != 0;\n              if ( (_DWORD)qword_4F99EC != (_DWORD)nmemb )\n                goto LABEL_97;\n            }\n            sub_453D80(v2, dword_4FA124);\n          }\n          else\n          {\nLABEL_97:\n            if ( v29 && !v2[1594] && HIDWORD(qword_4F99EC) )\n            {\n              v38 = 0LL;\n              do\n              {\n                if ( *(_DWORD *)(*((_QWORD *)qword_4F99D8 + v38) + 20LL) == v2[1590] )\n                  error((__int64)\"duplicate frame_num im short-term reference picture buffer\", 500);\n                ++v38;\n              }\n              while ( v38 < HIDWORD(qword_4F99EC) );\n              v32 = qword_4F99EC;\n            }\n            sub_43B3B0(*((_QWORD *)qword_4F99D0 + v32), v2);\n            if ( *v2 )\n            {\n              v39 = qword_4F99EC;\n              v40 = *((_QWORD *)qword_4F99D0 + (unsigned int)qword_4F99EC);\n            }\n            else\n            {\n              v39 = qword_4F99EC;\n              v40 = 0LL;\n            }\n            qword_4F9A08 = v40;\n            LODWORD(qword_4F99EC) = v39 + 1;\n            sub_439FF0();\n            sub_43A150();\n          }\n        }\n        else\n        {\n          if ( v23 )\n            goto LABEL_56;\nLABEL_54:\n          sub_43B3B0(qword_4F9A08, v2);\n          sub_439FF0();\n          sub_43A150();\n          qword_4F9A08 = 0LL;\n        }\n        return;\n      case 4uLL:\n        v83 = v13[4];\n        dword_4F99FC = v83 - 1;\n        v84 = (unsigned int)dword_4F99F4;\n        if ( dword_4F99F4 )\n        {\n          v85 = (char *)qword_4F99E0;\n          v86 = qword_4F9DC0;\n          do\n          {\n            v87 = *(int **)v85;\n            if ( *(_DWORD *)(*(_QWORD *)v85 + 28LL) >= v83 )\n            {\n              v88 = v86[287];\n              v89 = *v87;\n              if ( !v88 )\n              {\n                if ( v89 & 1 )\n                {\n                  a2 = *((_QWORD *)v87 + 6);\n                  *(_QWORD *)(a2 + 6376) = 0LL;\n                }\n                if ( v89 & 2 )\n                {\n                  a2 = *((_QWORD *)v87 + 7);\n                  *(_QWORD *)(a2 + 6376) = 0LL;\n                }\n              }\n              if ( v89 == 3 )\n              {\n                if ( !v88 )\n                {\n                  *(_QWORD *)(*((_QWORD *)v87 + 6) + 6376LL) = 0LL;\n                  *(_QWORD *)(*((_QWORD *)v87 + 7) + 6376LL) = 0LL;\n                }\n                a2 = *((_QWORD *)v87 + 5);\n                *(_QWORD *)(a2 + 6376) = 0LL;\n              }\n              *(_QWORD *)(v87 + 1) = 0LL;\n            }\n            v85 += 8;\n            --v84;\n          }\n          while ( v84 );\n        }\n        goto LABEL_217;\n      case 5uLL:\n        if ( HIDWORD(qword_4F99EC) )\n        {\n          v90 = 0LL;\n          do\n            sub_43C6F0(*((int **)qword_4F99D8 + v90++));\n          while ( v90 < HIDWORD(qword_4F99EC) );\n        }\n        sub_439FF0();\n        dword_4F99FC = -1;\n        v91 = (unsigned int)dword_4F99F4;\n        if ( dword_4F99F4 )\n        {\n          v92 = (unsigned __int64 *)qword_4F99E0;\n          v93 = qword_4F9DC0;\n          do\n          {\n            a2 = *v92;\n            if ( *(_DWORD *)(*v92 + 28) >= 0 )\n            {\n              v94 = v93[287];\n              v95 = *(_DWORD *)a2;\n              if ( !v94 )\n              {\n                if ( v95 & 1 )\n                  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                if ( v95 & 2 )\n                  *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n              }\n              if ( v95 == 3 )\n              {\n                if ( !v94 )\n                {\n                  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                  *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n                }\n                *(_QWORD *)(*(_QWORD *)(a2 + 40) + 6376LL) = 0LL;\n              }\n              *(_QWORD *)(a2 + 4) = 0LL;\n            }\n            ++v92;\n            --v91;\n          }\n          while ( v91 );\n        }\n        *((_DWORD *)off_49F6D0 + 18161) = 1;\n        goto LABEL_276;\n      case 6uLL:\n        v96 = v13[3];\n        if ( *v2 )\n        {\n          a2 = v96;\n          sub_43E9D0(*v2, v96, 1, v2[1591], 0);\n        }\n        else\n        {\n          v104 = (unsigned int)dword_4F99F4;\n          if ( dword_4F99F4 )\n          {\n            v105 = (unsigned __int64 *)qword_4F99E0;\n            v106 = qword_4F9DC0;\n            do\n            {\n              a2 = *v105;\n              if ( *(_DWORD *)(*v105 + 28) == v96 )\n              {\n                v107 = v106[287];\n                v108 = *(_DWORD *)a2;\n                if ( !v107 )\n                {\n                  if ( v108 & 1 )\n                    *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                  if ( v108 & 2 )\n                    *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n                }\n                if ( v108 == 3 )\n                {\n                  if ( !v107 )\n                  {\n                    *(_QWORD *)(*(_QWORD *)(a2 + 48) + 6376LL) = 0LL;\n                    *(_QWORD *)(*(_QWORD *)(a2 + 56) + 6376LL) = 0LL;\n                  }\n                  *(_QWORD *)(*(_QWORD *)(a2 + 40) + 6376LL) = 0LL;\n                }\n                *(_QWORD *)(a2 + 4) = 0LL;\n              }\n              ++v105;\n              --v104;\n            }\n            while ( v104 );\n          }\n        }\n        v2[1594] = 1;\n        v2[1593] = v96;\n        goto LABEL_276;\n      default:\n        v50 = \"invalid memory_management_control_operation in buffer\";\nLABEL_136:\n        error((__int64)v50, 500);\n        return;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43a380L", 
            "funcEndAddr": "0x43b3a3L", 
            "funcName": "sub_43A380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43B3B0(__int64 a1, _DWORD *a2)\n{\n  _DWORD *v2; // r15\n  __int64 v3; // r14\n  int v4; // eax\n  int v5; // eax\n  signed int v6; // ecx\n  signed int v7; // edx\n  signed __int64 v8; // rax\n  signed __int64 v9; // rcx\n  _QWORD *v10; // rdx\n  __int64 v11; // rsi\n  __int64 v12; // rdx\n  __int64 v13; // rdi\n  _QWORD *v14; // rsi\n  __int64 v15; // rdx\n  int v16; // eax\n  __int64 result; // rax\n  signed int v18; // ecx\n  signed int v19; // edx\n  signed __int64 v20; // rax\n  signed __int64 v21; // rcx\n  _QWORD *v22; // rdx\n  __int64 v23; // rsi\n  __int64 v24; // rdx\n  __int64 v25; // rdi\n  _QWORD *v26; // rsi\n  __int64 v27; // rdx\n\n  v2 = a2;\n  v3 = a1;\n  if ( a2[1595] )\n    sub_4201E0((__int64)a2, (__int64)a2);\n  v4 = *a2;\n  if ( *a2 != 2 )\n  {\n    if ( v4 != 1 )\n    {\n      if ( !v4 )\n      {\n        *(_QWORD *)(a1 + 40) = a2;\n        *(_DWORD *)a1 = 3;\n        if ( a2[1595] )\n        {\n          *(_DWORD *)(a1 + 4) = 3;\n          *(_DWORD *)(a1 + 12) = 3;\n          if ( a2[1594] )\n            *(_DWORD *)(a1 + 8) = 3;\n        }\n        sub_43B7A0(a1);\n      }\n      goto LABEL_33;\n    }\n    *(_QWORD *)(a1 + 48) = a2;\n    v5 = *(_DWORD *)a1 | 1;\n    *(_DWORD *)a1 = v5;\n    if ( a2[1595] )\n    {\n      *(_BYTE *)(a1 + 4) |= 1u;\n      *(_BYTE *)(a1 + 12) |= 1u;\n      if ( a2[1594] )\n      {\n        *(_BYTE *)(a1 + 8) |= 1u;\n        *(_DWORD *)(a1 + 28) = a2[1593];\n      }\n    }\n    if ( v5 != 3 )\n    {\n      *(_DWORD *)(a1 + 36) = a2[1];\n      v6 = a2[1598];\n      if ( v6 >= 4 )\n      {\n        v7 = a2[1599];\n        v8 = 0LL;\n        do\n        {\n          if ( v7 >= 4 )\n          {\n            v9 = 0LL;\n            do\n            {\n              v10 = (_QWORD *)*((_QWORD *)v2 + 810);\n              v11 = *(signed __int16 *)(*(_QWORD *)(*v10 + 8 * v8) + 2 * v9);\n              v12 = *(signed __int16 *)(*(_QWORD *)(v10[1] + 8 * v8) + 2 * v9);\n              if ( v11 < 0 )\n                v13 = 0LL;\n              else\n                v13 = *(_QWORD *)&v2[2 * v11 + 6];\n              v14 = (_QWORD *)*((_QWORD *)v2 + 812);\n              *(_QWORD *)(*(_QWORD *)(*v14 + 8 * v8) + 8 * v9) = v13;\n              if ( (v12 & 0x8000u) != 0LL )\n                v15 = 0LL;\n              else\n                v15 = *(_QWORD *)&v2[2 * v12 + 72];\n              *(_QWORD *)(*(_QWORD *)(v14[1] + 8 * v8) + 8 * v9) = v15;\n              *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 + 815) + 8 * v8) + v9++) = 1;\n              v7 = v2[1599];\n            }\n            while ( v9 < v7 / 4 );\n            v6 = v2[1598];\n          }\n          ++v8;\n        }\n        while ( v8 < v6 / 4 );\n      }\n      goto LABEL_33;\n    }\nLABEL_32:\n    sub_43C8E0(a1);\n    goto LABEL_33;\n  }\n  *(_QWORD *)(a1 + 56) = a2;\n  v16 = *(_DWORD *)a1 | 2;\n  *(_DWORD *)a1 = v16;\n  if ( a2[1595] )\n  {\n    *(_BYTE *)(a1 + 4) |= 2u;\n    *(_BYTE *)(a1 + 12) |= 2u;\n    if ( a2[1594] )\n    {\n      *(_BYTE *)(a1 + 8) |= 2u;\n      *(_DWORD *)(a1 + 28) = a2[1593];\n    }\n  }\n  if ( v16 == 3 )\n    goto LABEL_32;\n  *(_DWORD *)(a1 + 36) = a2[1];\n  v18 = a2[1598];\n  if ( v18 >= 4 )\n  {\n    v19 = a2[1599];\n    v20 = 0LL;\n    do\n    {\n      if ( v19 >= 4 )\n      {\n        v21 = 0LL;\n        do\n        {\n          v22 = (_QWORD *)*((_QWORD *)v2 + 810);\n          v23 = *(signed __int16 *)(*(_QWORD *)(*v22 + 8 * v20) + 2 * v21);\n          v24 = *(signed __int16 *)(*(_QWORD *)(v22[1] + 8 * v20) + 2 * v21);\n          if ( v23 < 0 )\n            v25 = 0LL;\n          else\n            v25 = *(_QWORD *)&v2[2 * v23 + 6];\n          v26 = (_QWORD *)*((_QWORD *)v2 + 812);\n          *(_QWORD *)(*(_QWORD *)(*v26 + 8 * v20) + 8 * v21) = v25;\n          if ( (v24 & 0x8000u) != 0LL )\n            v27 = 0LL;\n          else\n            v27 = *(_QWORD *)&v2[2 * v24 + 72];\n          *(_QWORD *)(*(_QWORD *)(v26[1] + 8 * v20) + 8 * v21) = v27;\n          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 + 815) + 8 * v20) + v21++) = 1;\n          v19 = v2[1599];\n        }\n        while ( v21 < v19 / 4 );\n        v18 = v2[1598];\n      }\n      ++v20;\n    }\n    while ( v20 < v18 / 4 );\n  }\nLABEL_33:\n  *(_DWORD *)(v3 + 20) = v2[1591];\n  result = (unsigned int)v2[1596];\n  *(_DWORD *)(v3 + 32) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x43b3b0L", 
            "funcEndAddr": "0x43b6caL", 
            "funcName": "sub_43B3B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43B6D0(__int64 a1, __int64 a2)\n{\n  bool v2; // zf\n  __int64 v3; // rsi\n  __int64 v4; // rbx\n\n  v2 = *((_DWORD *)off_49F6D0 + 18124) == 0;\n  *(_DWORD *)(a1 + 6380) = *((_DWORD *)off_49F6D0 + 18124) != 0;\n  if ( !v2 )\n    sub_4201E0(a1, a2);\n  if ( !(_DWORD)qword_4F99EC )\nLABEL_8:\n    error((__int64)\"replace_top_pic_with_frame: error storing reference frame (top field not found)\", 500);\n  v3 = 0LL;\n  while ( 1 )\n  {\n    v4 = *((_QWORD *)qword_4F99D0 + v3);\n    if ( *(_DWORD *)(v4 + 20) == *((_DWORD *)off_49F6D0 + 18116) && *(_DWORD *)v4 == 1 )\n      break;\n    if ( ++v3 >= (unsigned __int64)(unsigned int)qword_4F99EC )\n      goto LABEL_8;\n  }\n  sub_437D90(*(void **)(v4 + 48));\n  *(_QWORD *)(v4 + 48) = 0LL;\n  *(_QWORD *)(v4 + 40) = a1;\n  *(_DWORD *)v4 = 3;\n  if ( *(_DWORD *)(a1 + 6380) )\n  {\n    *(_DWORD *)(v4 + 4) = 3;\n    if ( *(_DWORD *)(a1 + 6376) )\n      *(_DWORD *)(v4 + 8) = 3;\n  }\n  sub_43B7A0(v4);\n  sub_439FF0();\n  sub_43A150();\n}\n", 
            "funcStartAddr": "0x43b6d0L", 
            "funcEndAddr": "0x43b79eL", 
            "funcName": "sub_43B6D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43B7A0(__int64 a1)\n{\n  __int64 result; // rax\n  unsigned int *v2; // rax\n  __int64 v3; // rsi\n  __int64 v4; // rax\n  __int64 v5; // rbx\n  signed __int64 v6; // rbp\n  __int64 v7; // rbx\n  signed __int64 v8; // rbp\n  __int64 v9; // rax\n  signed __int64 v10; // rbx\n  signed __int64 v11; // rbp\n  signed __int64 v12; // rbx\n  signed __int64 v13; // rbp\n  __int64 v14; // rax\n  __int64 v15; // rbx\n  int v16; // edx\n  int v17; // esi\n  __int64 v18; // rcx\n  int v19; // edx\n  int v20; // edx\n  int v21; // edx\n  int v22; // edx\n  int v23; // edx\n  __int64 v24; // rdx\n  __int64 v25; // rsi\n  __int64 v26; // rdi\n  __int64 v27; // rdx\n  __int64 v28; // rsi\n  __int64 v29; // rdi\n  signed int v30; // edx\n  int v31; // esi\n  __int64 v32; // r14\n  signed __int64 v33; // rdi\n  unsigned int v34; // er13\n  __int64 v35; // r15\n  __int64 v36; // r13\n  int v37; // er12\n  __int64 v38; // r8\n  _QWORD *v39; // rcx\n  __int64 v40; // r11\n  __int64 v41; // r10\n  __int64 v42; // rsi\n  _QWORD *v43; // rcx\n  __int64 v44; // rbp\n  __int64 v45; // rbx\n  signed __int64 v46; // rsi\n  signed __int64 v47; // rcx\n  _QWORD *v48; // r9\n  __int64 v49; // rcx\n  __int64 v50; // rcx\n  _QWORD *v51; // r13\n  signed __int64 v52; // rsi\n  _QWORD *v53; // r9\n  signed __int64 v54; // rcx\n  _QWORD *v55; // r15\n  _QWORD *v56; // r14\n  _QWORD *v57; // r10\n  __int64 v58; // r9\n  __int64 v59; // r12\n  unsigned int v60; // edi\n  __int64 v61; // rdi\n  _WORD *v62; // rbx\n  _QWORD *v63; // rax\n  _WORD *v64; // rdx\n  __int64 v65; // r10\n  _WORD *v66; // rdx\n  _WORD *v67; // rax\n  _QWORD *v68; // rax\n  __int64 v69; // r11\n  _QWORD *v70; // rbp\n  __int64 v71; // r13\n  _QWORD *v72; // rbp\n  _QWORD *v73; // rdx\n  _WORD *v74; // rax\n  _QWORD *v75; // rdi\n  _WORD *v76; // rbx\n  _WORD *v77; // rax\n  _WORD *v78; // rdi\n  _QWORD *v79; // rdx\n  _QWORD *v80; // rdx\n  signed int v81; // ecx\n  signed __int64 v82; // r15\n  unsigned int v83; // esi\n  __int64 v84; // r9\n  signed __int64 v85; // rdi\n  __int64 v86; // r10\n  _QWORD *v87; // r14\n  int v88; // edx\n  signed __int64 v89; // rdx\n  __int16 *v90; // rbx\n  __int16 v91; // bp\n  _QWORD *v92; // r12\n  __int16 *v93; // rcx\n  __int64 v94; // r11\n  _QWORD *v95; // r13\n  _WORD *v96; // rsi\n  _WORD *v97; // rcx\n  _WORD *v98; // rbx\n  _WORD *v99; // rbp\n  _QWORD *v100; // r14\n  __int64 v101; // rsi\n  _QWORD *v102; // rbp\n  __int64 v103; // rbx\n  _QWORD *v104; // rbx\n  __int64 v105; // rsi\n  __int64 v106; // rdx\n  __int64 v107; // rsi\n  __int64 v108; // rdx\n  signed int v109; // edx\n  signed __int64 v110; // rcx\n  signed __int64 v111; // rdx\n  signed __int64 v112; // rcx\n  signed int v113; // ebx\n  signed __int64 v114; // rdx\n  char v115; // bp\n  __int64 v116; // [rsp+0h] [rbp-68h]\n  int v117; // [rsp+8h] [rbp-60h]\n  int v118; // [rsp+14h] [rbp-54h]\n  signed int v119; // [rsp+18h] [rbp-50h]\n  _QWORD *v120; // [rsp+20h] [rbp-48h]\n\n  result = *(_QWORD *)(a1 + 40);\n  *(_DWORD *)(a1 + 36) = *(_DWORD *)(result + 4);\n  v116 = a1;\n  if ( *(_DWORD *)(result + 6556) )\n  {\n    v117 = *(_DWORD *)(result + 6556);\n    *(_OWORD *)(a1 + 48) = 0LL;\n    *(_OWORD *)(result + 6528) = 0LL;\n    v120 = 0LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 48) = sub_437B80(\n                             1,\n                             *(_DWORD *)(result + 6392),\n                             *(_DWORD *)(result + 6396) / 2,\n                             *(_DWORD *)(result + 6400),\n                             *(_DWORD *)(result + 6404) / 2);\n    v2 = *(unsigned int **)(a1 + 40);\n    v3 = v2[1598];\n    *(_QWORD *)(a1 + 56) = sub_437B80(2, v3, (signed int)v2[1599] / 2, v2[1600], (signed int)v2[1601] / 2);\n    v4 = *(_QWORD *)(a1 + 40);\n    if ( *(_DWORD *)(v4 + 6396) >= 2 )\n    {\n      v5 = 0LL;\n      v6 = 0LL;\n      do\n      {\n        v3 = *(_QWORD *)(*(_QWORD *)(v4 + 6424) + 2 * v5);\n        memcpy(\n          *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 6424LL) + v5),\n          (const void *)v3,\n          2LL * *(signed int *)(v4 + 6392));\n        ++v6;\n        v4 = *(_QWORD *)(a1 + 40);\n        v5 += 8LL;\n      }\n      while ( v6 < *(_DWORD *)(v4 + 6396) / 2 );\n    }\n    if ( *(_DWORD *)(v4 + 6404) >= 2 )\n    {\n      v7 = 0LL;\n      v8 = 0LL;\n      do\n      {\n        memcpy(\n          *(void **)(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 6464LL) + v7),\n          *(const void **)(**(_QWORD **)(v4 + 6464) + 2 * v7),\n          2LL * *(signed int *)(v4 + 6400));\n        v9 = *(_QWORD *)(a1 + 40);\n        v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 6464) + 8LL) + 2 * v7);\n        memcpy(\n          *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 6464LL) + 8LL) + v7),\n          (const void *)v3,\n          2LL * *(signed int *)(v9 + 6400));\n        ++v8;\n        v4 = *(_QWORD *)(a1 + 40);\n        v7 += 8LL;\n      }\n      while ( v8 < *(_DWORD *)(v4 + 6404) / 2 );\n    }\n    if ( *(_DWORD *)(v4 + 6396) >= 2 )\n    {\n      v10 = 0LL;\n      v11 = 8LL;\n      do\n      {\n        v3 = *(_QWORD *)(*(_QWORD *)(v4 + 6424) + v11);\n        memcpy(\n          *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 6424LL) + 8 * v10++),\n          (const void *)v3,\n          2LL * *(signed int *)(v4 + 6392));\n        v4 = *(_QWORD *)(a1 + 40);\n        v11 += 16LL;\n      }\n      while ( v10 < *(_DWORD *)(v4 + 6396) / 2 );\n    }\n    if ( *(_DWORD *)(v4 + 6404) >= 2 )\n    {\n      v12 = 0LL;\n      v13 = 1LL;\n      do\n      {\n        memcpy(\n          *(void **)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 6464LL) + 8 * v12),\n          *(const void **)(**(_QWORD **)(v4 + 6464) + 8 * v13),\n          2LL * *(signed int *)(v4 + 6400));\n        v14 = *(_QWORD *)(a1 + 40);\n        v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 6464) + 8LL) + 8 * v13);\n        memcpy(\n          *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 6464LL) + 8LL) + 8 * v12++),\n          (const void *)v3,\n          2LL * *(signed int *)(v14 + 6400));\n        v4 = *(_QWORD *)(a1 + 40);\n        v13 += 2LL;\n      }\n      while ( v12 < *(_DWORD *)(v4 + 6404) / 2 );\n    }\n    sub_4201E0(*(_QWORD *)(a1 + 48), v3);\n    sub_4201E0(*(_QWORD *)(a1 + 56), v3);\n    result = *(_QWORD *)(a1 + 40);\n    v15 = *(_QWORD *)(a1 + 48);\n    v16 = *(_DWORD *)(result + 8);\n    *(_DWORD *)(v15 + 4) = v16;\n    v17 = *(_DWORD *)(result + 12);\n    v18 = *(_QWORD *)(a1 + 56);\n    *(_DWORD *)(v18 + 4) = v17;\n    *(_DWORD *)(v15 + 16) = *(_DWORD *)(result + 16);\n    *(_DWORD *)(v18 + 12) = v17;\n    *(_DWORD *)(v15 + 12) = v17;\n    *(_DWORD *)(v18 + 8) = v16;\n    *(_DWORD *)(v15 + 8) = v16;\n    *(_DWORD *)(v18 + 16) = *(_DWORD *)(result + 16);\n    v19 = *(_DWORD *)(result + 6380);\n    *(_DWORD *)(v18 + 6380) = v19;\n    *(_DWORD *)(v15 + 6380) = v19;\n    v20 = *(_DWORD *)(result + 6376);\n    *(_DWORD *)(v18 + 6376) = v20;\n    *(_DWORD *)(v15 + 6376) = v20;\n    v21 = *(_DWORD *)(result + 6372);\n    *(_DWORD *)(v18 + 6372) = v21;\n    *(_DWORD *)(v15 + 6372) = v21;\n    *(_DWORD *)(a1 + 28) = v21;\n    *(_DWORD *)(v18 + 6412) = 1;\n    *(_DWORD *)(v15 + 6412) = 1;\n    v22 = *(_DWORD *)(result + 6416);\n    *(_DWORD *)(v18 + 6416) = v22;\n    *(_DWORD *)(v15 + 6416) = v22;\n    *(_QWORD *)(result + 6528) = v15;\n    *(_QWORD *)(result + 6536) = v18;\n    *(_QWORD *)(v15 + 6536) = v18;\n    *(_QWORD *)(v15 + 6544) = result;\n    *(_QWORD *)(v18 + 6528) = v15;\n    *(_QWORD *)(v18 + 6544) = result;\n    v23 = *(_DWORD *)(result + 6552);\n    *(_DWORD *)(v18 + 6552) = v23;\n    *(_DWORD *)(v15 + 6552) = v23;\n    v120 = (_QWORD *)v15;\n    if ( *(_DWORD *)(result + 6556) )\n    {\n      v117 = *(_DWORD *)(result + 6556);\n    }\n    else\n    {\n      v24 = SHIDWORD(qword_4F9BE0[0]);\n      if ( SHIDWORD(qword_4F9BE0[0]) > 0LL )\n      {\n        v25 = 0LL;\n        v26 = 0LL;\n        do\n        {\n          *(_QWORD *)(v15 + v25 + 288) = *(_QWORD *)(result + v25 + 816);\n          *(_QWORD *)(v15 + v25 + 296) = *(_QWORD *)(result + v25 + 824);\n          *(_QWORD *)(v18 + v25 + 288) = *(_QWORD *)(result + v25 + 1344);\n          *(_QWORD *)(v18 + v25 + 296) = *(_QWORD *)(result + v25 + 1352);\n          ++v26;\n          v25 += 16LL;\n        }\n        while ( v26 < v24 );\n      }\n      v27 = SLODWORD(qword_4F9BE0[0]);\n      if ( SLODWORD(qword_4F9BE0[0]) <= 0LL )\n      {\n        v117 = 0;\n      }\n      else\n      {\n        v117 = 0;\n        v28 = 0LL;\n        v29 = 0LL;\n        do\n        {\n          *(_QWORD *)(v15 + v28 + 24) = *(_QWORD *)(result + v28 + 552);\n          *(_QWORD *)(v15 + v28 + 32) = *(_QWORD *)(result + v28 + 560);\n          *(_QWORD *)(v18 + v28 + 24) = *(_QWORD *)(result + v28 + 1080);\n          *(_QWORD *)(v18 + v28 + 32) = *(_QWORD *)(result + v28 + 1088);\n          ++v29;\n          v28 += 16LL;\n        }\n        while ( v29 < v27 );\n      }\n    }\n  }\n  v30 = *(_DWORD *)(result + 6396);\n  if ( v30 >= 4 )\n  {\n    v31 = *(_DWORD *)(result + 6392);\n    v32 = v31 / 4;\n    v119 = *(_DWORD *)(result + 6392);\n    v118 = v31 / 16;\n    v33 = 0LL;\n    do\n    {\n      if ( v119 >= 4 )\n      {\n        v34 = ((unsigned int)v33 >> 1) & 2;\n        v35 = v34 + 2;\n        v36 = v34 + 3;\n        v37 = *(_DWORD *)(result + 6416);\n        v38 = 0LL;\n        do\n        {\n          if ( v37\n            && *(_BYTE *)(*(_QWORD *)(result + 6472)\n                        + (signed int)((((unsigned int)v33 >> 2) & 1)\n                                     + 2 * (v118 * ((unsigned int)v33 >> 3) + ((unsigned int)v38 >> 2)))) )\n          {\n            v39 = *(_QWORD **)(result + 6480);\n            v40 = *(signed __int16 *)(*(_QWORD *)(*v39 + 8 * v38) + 2 * v33);\n            v41 = *(signed __int16 *)(*(_QWORD *)(v39[1] + 8 * v38) + 2 * v33);\n            if ( v40 < 0 )\n              v42 = 0LL;\n            else\n              v42 = *(_QWORD *)(result + 264 * v35 + 8 * v40 + 24);\n            v48 = *(_QWORD **)(result + 6496);\n            *(_QWORD *)(*(_QWORD *)(v48[v35] + 8 * v38) + 8 * v33) = v42;\n            if ( (v41 & 0x8000u) != 0LL )\n              v49 = 0LL;\n            else\n              v49 = *(_QWORD *)(result + 264 * v36 + 8 * v41 + 24);\n            *(_QWORD *)(*(_QWORD *)(v48[v36] + 8 * v38) + 8 * v33) = v49;\n            if ( (v40 & 0x8000u) != 0LL )\n              v50 = 0LL;\n            else\n              v50 = *(_QWORD *)(result + 264 * v35 + 8 * v40 + 1608);\n            *(_QWORD *)(*(_QWORD *)(*v48 + 8 * v38) + 8 * v33) = v50;\n            if ( (v41 & 0x8000u) != 0LL )\n              v46 = 0LL;\n            else\n              v46 = *(_QWORD *)(result + 264 * v36 + 8 * v41 + 1608);\n          }\n          else\n          {\n            v43 = *(_QWORD **)(result + 6480);\n            v44 = *(signed __int16 *)(*(_QWORD *)(*v43 + 8 * v38) + 2 * v33);\n            v45 = *(signed __int16 *)(*(_QWORD *)(v43[1] + 8 * v38) + 2 * v33);\n            v46 = -1LL;\n            v47 = -1LL;\n            if ( v44 >= 0 )\n              v47 = *(_QWORD *)(result + 8 * v44 + 24);\n            v48 = *(_QWORD **)(result + 6496);\n            *(_QWORD *)(*(_QWORD *)(*v48 + 8 * v38) + 8 * v33) = v47;\n            if ( (v45 & 0x8000u) == 0LL )\n              v46 = *(_QWORD *)(result + 8 * v45 + 288);\n          }\n          *(_QWORD *)(*(_QWORD *)(v48[1] + 8 * v38++) + 8 * v33) = v46;\n        }\n        while ( v38 < v32 );\n      }\n      ++v33;\n    }\n    while ( v33 < v30 / 4 );\n  }\n  if ( v117 && !*((_DWORD *)qword_4F9DC0 + 289) )\n  {\n    v51 = (_QWORD *)v116;\n    if ( *(_DWORD *)(result + 6392) < 4 )\n      goto LABEL_87;\n    goto LABEL_63;\n  }\n  v51 = (_QWORD *)v116;\n  if ( *(_DWORD *)(result + 6392) >= 4 )\n  {\n    v52 = 0LL;\n    v53 = v120;\n    do\n    {\n      if ( v30 >= 8 )\n      {\n        v54 = 0LL;\n        do\n        {\n          if ( *(_DWORD *)(result + 6416)\n            && *(_BYTE *)(*(_QWORD *)(result + 6472)\n                        + (signed int)((((unsigned int)v54 >> 1) & 1)\n                                     + 2\n                                     * (((unsigned int)v52 >> 2)\n                                      + ((unsigned int)v54 >> 2) * (*(_DWORD *)(result + 6392) / 16)))) )\n          {\n            *(_BYTE *)(*(_QWORD *)(v53[815] + 8 * v52) + v54) = 1;\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[7] + 6520LL) + 8 * v52) + v54) = 1;\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[5] + 6520LL) + 8 * v52) + 2 * v54 + 1) = 1;\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[5] + 6520LL) + 8 * v52) + 2 * v54) = 1;\n            v55 = (_QWORD *)v51[5];\n            v56 = (_QWORD *)v51[7];\n            v57 = (_QWORD *)v55[813];\n            v58 = *(_QWORD *)(*v57 + 8 * v52);\n            v60 = (v54 & 3) + 8 * ((unsigned int)v54 >> 2);\n            v59 = v60;\n            v61 = v60 + 4;\n            v62 = *(_WORD **)(v58 + 8 * v61);\n            v63 = (_QWORD *)v56[813];\n            v64 = *(_WORD **)(*(_QWORD *)(*v63 + 8 * v52) + 8 * v54);\n            *v64 = *v62;\n            v64[1] = v62[1];\n            v65 = *(_QWORD *)(v57[1] + 8 * v52);\n            v66 = *(_WORD **)(v65 + 8 * v61);\n            v67 = *(_WORD **)(*(_QWORD *)(v63[1] + 8 * v52) + 8 * v54);\n            *v67 = *v66;\n            v67[1] = v66[1];\n            v68 = (_QWORD *)v55[810];\n            v69 = *(_QWORD *)(*v68 + 8 * v52);\n            v70 = (_QWORD *)v56[810];\n            *(_WORD *)(*(_QWORD *)(*v70 + 8 * v52) + 2 * v54) = *(_WORD *)(v69 + 2 * v61);\n            v71 = *(_QWORD *)(v68[1] + 8 * v52);\n            *(_WORD *)(*(_QWORD *)(v70[1] + 8 * v52) + 2 * v54) = *(_WORD *)(v71 + 2 * v61);\n            v72 = (_QWORD *)v55[812];\n            v73 = (_QWORD *)v56[812];\n            *(_QWORD *)(*(_QWORD *)(*v73 + 8 * v52) + 8 * v54) = *(_QWORD *)(*(_QWORD *)(v72[4] + 8 * v52) + 8 * v61);\n            *(_QWORD *)(*(_QWORD *)(v73[1] + 8 * v52) + 8 * v54) = *(_QWORD *)(*(_QWORD *)(v72[5] + 8 * v52) + 8 * v61);\n            v74 = *(_WORD **)(v58 + 8 * v59);\n            v53 = *(_QWORD **)(v116 + 48);\n            v75 = (_QWORD *)v53[813];\n            v76 = *(_WORD **)(*(_QWORD *)(*v75 + 8 * v52) + 8 * v54);\n            *v76 = *v74;\n            v76[1] = v74[1];\n            v77 = *(_WORD **)(v65 + 8 * v59);\n            v78 = *(_WORD **)(*(_QWORD *)(v75[1] + 8 * v52) + 8 * v54);\n            *v78 = *v77;\n            v78[1] = v77[1];\n            v79 = (_QWORD *)v53[810];\n            *(_WORD *)(*(_QWORD *)(*v79 + 8 * v52) + 2 * v54) = *(_WORD *)(v69 + 2 * v59);\n            LOWORD(v77) = *(_WORD *)(v71 + 2 * v59);\n            v51 = (_QWORD *)v116;\n            *(_WORD *)(*(_QWORD *)(v79[1] + 8 * v52) + 2 * v54) = (_WORD)v77;\n            v80 = (_QWORD *)v53[812];\n            *(_QWORD *)(*(_QWORD *)(*v80 + 8 * v52) + 8 * v54) = *(_QWORD *)(*(_QWORD *)(v72[2] + 8 * v52) + 8 * v59);\n            *(_QWORD *)(*(_QWORD *)(v80[1] + 8 * v52) + 8 * v54) = *(_QWORD *)(*(_QWORD *)(v72[3] + 8 * v52) + 8 * v59);\n            result = *(_QWORD *)(v116 + 40);\n          }\n          ++v54;\n          v30 = *(_DWORD *)(result + 6396);\n        }\n        while ( v54 < v30 / 8 );\n      }\n      ++v52;\n      v81 = *(_DWORD *)(result + 6392);\n    }\n    while ( v52 < v81 / 4 );\n    if ( v81 >= 4 )\n    {\nLABEL_63:\n      v82 = 0LL;\n      do\n      {\n        if ( *(_DWORD *)(result + 6396) >= 8 )\n        {\n          v83 = v82 & 0x7FFFFFFE;\n          if ( v82 & 2 )\n            v83 = v82 | 1;\n          v84 = v83;\n          v85 = 0LL;\n          do\n          {\n            if ( !*(_DWORD *)(result + 6416)\n              || !*(_BYTE *)(*(_QWORD *)(result + 6472)\n                           + (signed int)((((unsigned int)v85 >> 1) & 1)\n                                        + 2\n                                        * (((unsigned int)v82 >> 2)\n                                         + *(_DWORD *)(result + 6392) / 16 * ((unsigned int)v85 >> 2)))) )\n            {\n              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 6520) + 8 * v82) + 2 * v85) = 0;\n              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[5] + 6520LL) + 8 * v82) + 2 * v85 + 1) = 0;\n              result = v51[5];\n              if ( !*(_DWORD *)(result + 6556) )\n              {\n                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[7] + 6520LL) + 8 * v82) + v85) = 0;\n                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51[6] + 6520LL) + 8 * v82) + v85) = 0;\n                result = v51[5];\n                v86 = v51[7];\n                v87 = *(_QWORD **)(result + 6504);\n                v88 = v85 & 0x7FFFFFFE;\n                if ( v85 & 2 )\n                  v88 = v85 | 1;\n                v89 = 2LL * (v88 & 0x7FFFFFFF);\n                v90 = *(__int16 **)(*(_QWORD *)(*v87 + 8 * v84) + 8 * v89);\n                v91 = *v90;\n                v92 = *(_QWORD **)(v86 + 6504);\n                v93 = *(__int16 **)(*(_QWORD *)(*v92 + 8 * v82) + 8 * v85);\n                *v93 = *v90;\n                v94 = v51[6];\n                v95 = *(_QWORD **)(v94 + 6504);\n                v96 = *(_WORD **)(*(_QWORD *)(*v95 + 8 * v82) + 8 * v85);\n                *v96 = v91;\n                LOWORD(v90) = v90[1];\n                v93[1] = (signed __int16)v90;\n                v96[1] = (_WORD)v90;\n                v97 = *(_WORD **)(*(_QWORD *)(v87[1] + 8 * v84) + 8 * v89);\n                LOWORD(v96) = *v97;\n                v98 = *(_WORD **)(*(_QWORD *)(v92[1] + 8 * v82) + 8 * v85);\n                *v98 = *v97;\n                v99 = *(_WORD **)(*(_QWORD *)(v95[1] + 8 * v82) + 8 * v85);\n                *v99 = (_WORD)v96;\n                LOWORD(v97) = v97[1];\n                v98[1] = (_WORD)v97;\n                v99[1] = (_WORD)v97;\n                v100 = *(_QWORD **)(result + 6480);\n                v101 = *(signed __int16 *)(*(_QWORD *)(*v100 + 8 * v84) + 2 * v89);\n                v102 = *(_QWORD **)(v86 + 6480);\n                v103 = *(_QWORD *)(*v102 + 8 * v82);\n                if ( v101 == -1 )\n                {\n                  *(_WORD *)(v103 + 2 * v85) = -1;\n                  v104 = *(_QWORD **)(v94 + 6480);\n                  *(_WORD *)(*(_QWORD *)(*v104 + 8 * v82) + 2 * v85) = -1;\n                  v51 = (_QWORD *)v116;\n                }\n                else\n                {\n                  *(_WORD *)(v103 + 2 * v85) = v101;\n                  v104 = *(_QWORD **)(v94 + 6480);\n                  *(_WORD *)(*(_QWORD *)(*v104 + 8 * v82) + 2 * v85) = v101;\n                  if ( (v101 & 0x8000u) != 0LL )\n                  {\n                    *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v94 + 6496) + 8 * v82) + 8 * v85) = 0LL;\n                    v105 = 0LL;\n                  }\n                  else\n                  {\n                    *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v94 + 6496) + 8 * v82) + 8 * v85) = *(_QWORD *)(result + 8 * v101 + 3192);\n                    v105 = *(_QWORD *)(result + 8 * v101 + 4776);\n                  }\n                  v51 = (_QWORD *)v116;\n                  *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v86 + 6496) + 8 * v82) + 8 * v85) = v105;\n                }\n                v106 = *(signed __int16 *)(*(_QWORD *)(v100[1] + 8 * v84) + 2 * v89);\n                v107 = *(_QWORD *)(v102[1] + 8 * v82);\n                if ( v106 == -1 )\n                {\n                  *(_WORD *)(v107 + 2 * v85) = -1;\n                  *(_WORD *)(*(_QWORD *)(v104[1] + 8 * v82) + 2 * v85) = -1;\n                }\n                else\n                {\n                  *(_WORD *)(v107 + 2 * v85) = v106;\n                  *(_WORD *)(*(_QWORD *)(v104[1] + 8 * v82) + 2 * v85) = v106;\n                  if ( (v106 & 0x8000u) != 0LL )\n                  {\n                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 6496) + 8LL) + 8 * v82) + 8 * v85) = 0LL;\n                    v108 = 0LL;\n                  }\n                  else\n                  {\n                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 6496) + 8LL) + 8 * v82) + 8 * v85) = *(_QWORD *)(result + 8 * v106 + 3456);\n                    v108 = *(_QWORD *)(result + 8 * v106 + 5040);\n                  }\n                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 6496) + 8LL) + 8 * v82) + 8 * v85) = v108;\n                }\n              }\n            }\n            ++v85;\n          }\n          while ( v85 < *(_DWORD *)(result + 6396) / 8 );\n        }\n        ++v82;\n      }\n      while ( v82 < *(_DWORD *)(result + 6392) / 4 );\n      goto LABEL_87;\n    }\n  }\nLABEL_87:\n  v109 = *(_DWORD *)(result + 6396);\n  if ( v109 >= 4 )\n  {\n    v110 = 0LL;\n    do\n    {\n      if ( *(_DWORD *)(result + 6392) >= 4 )\n      {\n        v111 = 0LL;\n        do\n        {\n          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 6520) + 8 * v111++) + v110) = 0;\n          result = v51[5];\n        }\n        while ( v111 < *(_DWORD *)(result + 6392) / 4 );\n      }\n      ++v110;\n      v109 = *(_DWORD *)(result + 6396);\n    }\n    while ( v110 < v109 / 4 );\n  }\n  if ( *((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    if ( !*((_DWORD *)qword_4F9DC0 + 289) || v109 <= 3 )\n      return result;\n  }\n  else if ( v109 < 4 )\n  {\n    return result;\n  }\n  v112 = 0LL;\n  do\n  {\n    v113 = *(_DWORD *)(result + 6392);\n    if ( v113 >= 4 )\n    {\n      v114 = 0LL;\n      do\n      {\n        if ( *(_DWORD *)(result + 6416) )\n          v115 = *(_BYTE *)(*(_QWORD *)(result + 6472)\n                          + (signed int)((((unsigned int)v112 >> 2) & 1)\n                                       + 2 * (((unsigned int)v112 >> 3) * (v113 / 16) + ((unsigned int)v114 >> 2))));\n        else\n          v115 = 0;\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 6520) + 8 * v114++) + v112) = v115;\n        result = v51[5];\n        v113 = *(_DWORD *)(result + 6392);\n      }\n      while ( v114 < v113 / 4 );\n    }\n    ++v112;\n  }\n  while ( v112 < *(_DWORD *)(result + 6396) / 4 );\n  return result;\n}\n", 
            "funcStartAddr": "0x43b7a0L", 
            "funcEndAddr": "0x43c5e6L", 
            "funcName": "sub_43B7A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43C5F0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rbx\n  unsigned int v3; // eax\n  unsigned __int64 v4; // rdi\n  int *v5; // rdx\n  int v6; // ecx\n\n  if ( (_DWORD)qword_4F99EC )\n  {\n    v2 = 0LL;\n    do\n    {\n      sub_43C6F0(*((int **)qword_4F99D0 + v2++));\n      v3 = qword_4F99EC;\n    }\n    while ( v2 < (unsigned int)qword_4F99EC );\n    if ( (_DWORD)qword_4F99EC )\n    {\n      do\n      {\n        v4 = 0LL;\n        while ( 1 )\n        {\n          v5 = (int *)*((_QWORD *)qword_4F99D0 + v4);\n          if ( v5[8] )\n          {\n            if ( !v5[1] )\n            {\n              v6 = *v5;\n              if ( (*v5 != 3 || !*(_DWORD *)(*((_QWORD *)v5 + 5) + 6380LL))\n                && (*((_DWORD *)qword_4F9DC0 + 287)\n                 || (!(v6 & 1) || !*(_DWORD *)(*((_QWORD *)v5 + 6) + 6380LL))\n                 && (!(v6 & 2) || !*(_DWORD *)(*((_QWORD *)v5 + 7) + 6380LL))) )\n              {\n                break;\n              }\n            }\n          }\n          if ( ++v4 >= v3 )\n            goto LABEL_20;\n        }\n        sub_43EB30(v4);\n        v3 = qword_4F99EC;\n      }\n      while ( (_DWORD)qword_4F99EC );\n    }\n    else\n    {\n      v3 = 0;\nLABEL_20:\n      if ( v3 )\n      {\n        do\n          sub_43EC70();\n        while ( (_DWORD)qword_4F99EC );\n      }\n    }\n  }\n  dword_4F99F8 = 2147483648;\n}\n", 
            "funcStartAddr": "0x43c5f0L", 
            "funcEndAddr": "0x43c6eaL", 
            "funcName": "sub_43C5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C6F0(int *a1)\n{\n  int v1; // eax\n  int v2; // ecx\n  int *v3; // rbx\n  __int64 result; // rax\n  void *v5; // rdi\n  void *v6; // rdi\n  void *v7; // rdi\n\n  v1 = *((_DWORD *)qword_4F9DC0 + 287);\n  v2 = *a1;\n  if ( !v1 )\n  {\n    if ( v2 & 1 )\n      *(_DWORD *)(*((_QWORD *)a1 + 6) + 6380LL) = 0;\n    if ( v2 & 2 )\n      *(_DWORD *)(*((_QWORD *)a1 + 7) + 6380LL) = 0;\n  }\n  if ( v2 == 3 )\n  {\n    if ( !v1 )\n    {\n      *(_DWORD *)(*((_QWORD *)a1 + 6) + 6380LL) = 0;\n      *(_DWORD *)(*((_QWORD *)a1 + 7) + 6380LL) = 0;\n    }\n    v3 = a1 + 10;\n    result = *((_QWORD *)a1 + 5);\n    *(_DWORD *)(result + 6380) = 0;\n  }\n  else\n  {\n    v3 = a1 + 10;\n    result = *((_QWORD *)a1 + 5);\n  }\n  a1[1] = 0;\n  v5 = *(void **)(result + 6456);\n  if ( v5 )\n  {\n    sub_43F1B0(v5);\n    result = *(_QWORD *)v3;\n    *(_QWORD *)(*(_QWORD *)v3 + 6456LL) = 0LL;\n  }\n  v6 = *(void **)(result + 6448);\n  if ( v6 )\n  {\n    sub_43F1B0(v6);\n    result = *(_QWORD *)v3;\n    *(_QWORD *)(*(_QWORD *)v3 + 6448LL) = 0LL;\n  }\n  v7 = *(void **)(result + 6440);\n  if ( v7 )\n  {\n    free(v7);\n    result = *(_QWORD *)v3;\n    *(_QWORD *)(*(_QWORD *)v3 + 6440LL) = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43c6f0L", 
            "funcEndAddr": "0x43c7d1L", 
            "funcName": "sub_43C6F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_43C8E0(__int64 a1)\n{\n  _QWORD *v1; // r12\n  unsigned int *v2; // rax\n  __int64 v3; // rsi\n  char *v4; // rax\n  __int64 v5; // rcx\n  __int64 v6; // r15\n  signed __int64 v7; // rbp\n  __int64 v8; // rcx\n  __int64 v9; // rbp\n  signed __int64 v10; // r15\n  __int64 v11; // rcx\n  _QWORD *v12; // rbx\n  __int64 v13; // r11\n  __int64 v14; // r8\n  int v15; // ecx\n  int v16; // eax\n  int v17; // eax\n  _BOOL4 v18; // eax\n  bool v19; // zf\n  int v20; // eax\n  __int64 v21; // rax\n  __int64 v22; // rcx\n  signed __int64 v23; // rsi\n  signed __int64 v24; // rbp\n  __int64 v25; // rax\n  __int64 v26; // rcx\n  signed __int64 v27; // rsi\n  signed __int64 v28; // rbp\n  signed __int64 result; // rax\n  signed __int64 v30; // rdx\n  signed __int64 v31; // rsi\n  int v32; // edi\n  __int64 v33; // r8\n  __int64 v34; // r9\n  _QWORD *v35; // r14\n  _QWORD *v36; // rax\n  _WORD *v37; // rcx\n  _QWORD *v38; // rbp\n  __int64 v39; // r13\n  _WORD *v40; // rbx\n  _WORD *v41; // rax\n  __int64 v42; // r10\n  _WORD *v43; // rdi\n  _QWORD *v44; // rax\n  __int64 v45; // rcx\n  _QWORD *v46; // rdi\n  __int64 v47; // r15\n  __int64 v48; // rax\n  __int64 v49; // r12\n  __int64 v50; // rdi\n  _QWORD *v51; // rbp\n  __int64 v52; // rdi\n  __int64 v53; // rbp\n  __int64 v54; // rdi\n  _QWORD *v55; // rcx\n  __int64 v56; // r13\n  __int64 v57; // rax\n  __int64 v58; // r14\n  _QWORD *v59; // rbx\n  _QWORD *v60; // rax\n  _WORD *v61; // rcx\n  _WORD *v62; // rbp\n  _WORD *v63; // rax\n  _WORD *v64; // rdi\n  _QWORD *v65; // rcx\n  __int64 v66; // rax\n  __int64 v67; // rcx\n  __int64 v68; // r9\n  _QWORD *v69; // rbp\n  __int64 v70; // rdi\n  signed __int64 v71; // rbp\n  signed __int64 v72; // rdi\n  signed __int64 v73; // rcx\n  __int64 v74; // [rsp+8h] [rbp-40h]\n  _QWORD *v75; // [rsp+10h] [rbp-38h]\n\n  v1 = (_QWORD *)a1;\n  v2 = *(unsigned int **)(a1 + 48);\n  v3 = v2[1598];\n  v4 = sub_437B80(0, v3, 2 * v2[1599], v2[1600], 2 * v2[1601]);\n  *(_QWORD *)(a1 + 40) = v4;\n  v5 = *(_QWORD *)(a1 + 48);\n  if ( *(_DWORD *)(v5 + 6396) > 0 )\n  {\n    v6 = 0LL;\n    v7 = 0LL;\n    do\n    {\n      memcpy(\n        *(void **)(*((_QWORD *)v4 + 803) + v6),\n        *(const void **)(*(_QWORD *)(v5 + 6424) + 8 * v7),\n        2LL * *(signed int *)(v5 + 6392));\n      v8 = *(_QWORD *)(a1 + 56);\n      v3 = *(_QWORD *)(*(_QWORD *)(v8 + 6424) + 8 * v7);\n      memcpy(\n        *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 6424LL) + v6 + 8),\n        (const void *)v3,\n        2LL * *(signed int *)(v8 + 6392));\n      ++v7;\n      v4 = *(char **)(a1 + 40);\n      v5 = *(_QWORD *)(a1 + 48);\n      v6 += 16LL;\n    }\n    while ( v7 < *(signed int *)(v5 + 6396) );\n  }\n  if ( *(_DWORD *)(v5 + 6404) > 0 )\n  {\n    v9 = 0LL;\n    v10 = 0LL;\n    do\n    {\n      memcpy(\n        *(void **)(**((_QWORD **)v4 + 808) + 2 * v9),\n        *(const void **)(**(_QWORD **)(v5 + 6464) + v9),\n        2LL * *(signed int *)(v5 + 6400));\n      memcpy(\n        *(void **)(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 6464LL) + 2 * v9 + 8),\n        *(const void **)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 6464LL) + v9),\n        2LL * *(signed int *)(*(_QWORD *)(a1 + 56) + 6400LL));\n      memcpy(\n        *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 6464LL) + 8LL) + 2 * v9),\n        *(const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 6464LL) + 8LL) + v9),\n        2LL * *(signed int *)(*(_QWORD *)(a1 + 48) + 6400LL));\n      v11 = *(_QWORD *)(a1 + 56);\n      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 6464) + 8LL) + v9);\n      memcpy(\n        *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 6464LL) + 8LL) + 2 * v9 + 8),\n        (const void *)v3,\n        2LL * *(signed int *)(v11 + 6400));\n      ++v10;\n      v4 = *(char **)(a1 + 40);\n      v5 = *(_QWORD *)(a1 + 48);\n      v9 += 8LL;\n    }\n    while ( v10 < *(signed int *)(v5 + 6404) );\n  }\n  sub_4201E0((__int64)v4, v3);\n  v12 = *(_QWORD **)(a1 + 40);\n  v13 = *(_QWORD *)(a1 + 48);\n  v14 = *(_QWORD *)(a1 + 56);\n  v15 = *(_DWORD *)(v14 + 4);\n  if ( *(_DWORD *)(v13 + 4) <= v15 )\n    v15 = *(_DWORD *)(v13 + 4);\n  *((_DWORD *)v12 + 1) = v15;\n  *(_DWORD *)(a1 + 36) = v15;\n  v16 = *(_DWORD *)(v13 + 4);\n  *((_DWORD *)v12 + 2) = v16;\n  *((_DWORD *)v12 + 4) = v16;\n  *(_DWORD *)(v14 + 8) = v16;\n  *(_DWORD *)(v13 + 16) = v16;\n  *(_DWORD *)(v14 + 16) = v16;\n  v17 = *(_DWORD *)(v14 + 4);\n  *(_DWORD *)(v13 + 12) = v17;\n  *((_DWORD *)v12 + 3) = v17;\n  if ( *(_DWORD *)(v13 + 6380) )\n    v18 = *(_DWORD *)(v14 + 6380) != 0;\n  else\n    v18 = 0;\n  *((_DWORD *)v12 + 1595) = v18;\n  if ( *(_DWORD *)(v13 + 6376) )\n  {\n    v19 = *(_DWORD *)(v14 + 6376) == 0;\n    *((_DWORD *)v12 + 1594) = *(_DWORD *)(v14 + 6376) != 0;\n    if ( !v19 )\n      *((_DWORD *)v12 + 1593) = *(_DWORD *)(a1 + 28);\n  }\n  else\n  {\n    *((_DWORD *)v12 + 1594) = 0;\n  }\n  v12[816] = v13;\n  v12[817] = v14;\n  *((_DWORD *)v12 + 1603) = 0;\n  *((_DWORD *)v12 + 1638) = *(_DWORD *)(v13 + 6552);\n  v20 = *(_DWORD *)(v13 + 6560);\n  *((_DWORD *)v12 + 1640) = v20;\n  if ( v20 )\n    *(_OWORD *)((char *)v12 + 6564) = *(_OWORD *)(v13 + 6564);\n  *(_QWORD *)(v14 + 6544) = v12;\n  *(_QWORD *)(v13 + 6544) = v12;\n  if ( SHIDWORD(qword_4F9BE0[0]) > 0 )\n  {\n    v21 = (signed int)(HIDWORD(qword_4F9BE0[0]) + ((unsigned int)(HIDWORD(qword_4F9BE0[0]) + 1) >> 31) + 1) >> 1;\n    v22 = 0LL;\n    v23 = 36LL;\n    do\n    {\n      v24 = (*(_QWORD *)(v14 + 8 * v23) + (*(_QWORD *)(v14 + 8 * v23) >> 63)) & 0xFFFFFFFFFFFFFFFELL;\n      if ( (signed __int64)((*(_QWORD *)(v13 + 8 * v23) + (*(_QWORD *)(v13 + 8 * v23) >> 63)) & 0xFFFFFFFFFFFFFFFELL) <= v24 )\n        v24 = (*(_QWORD *)(v13 + 8 * v23) + (*(_QWORD *)(v13 + 8 * v23) >> 63)) & 0xFFFFFFFFFFFFFFFELL;\n      v12[v22++ + 36] = v24;\n      v23 += 2LL;\n    }\n    while ( v22 < v21 );\n  }\n  if ( SLODWORD(qword_4F9BE0[0]) > 0 )\n  {\n    v25 = (signed int)(LODWORD(qword_4F9BE0[0]) + ((unsigned int)(LODWORD(qword_4F9BE0[0]) + 1) >> 31) + 1) >> 1;\n    v26 = 0LL;\n    v27 = 3LL;\n    do\n    {\n      v28 = (*(_QWORD *)(v14 + 8 * v27) + (*(_QWORD *)(v14 + 8 * v27) >> 63)) & 0xFFFFFFFFFFFFFFFELL;\n      if ( (signed __int64)((*(_QWORD *)(v13 + 8 * v27) + (*(_QWORD *)(v13 + 8 * v27) >> 63)) & 0xFFFFFFFFFFFFFFFELL) <= v28 )\n        v28 = (*(_QWORD *)(v13 + 8 * v27) + (*(_QWORD *)(v13 + 8 * v27) >> 63)) & 0xFFFFFFFFFFFFFFFELL;\n      v12[v26++ + 3] = v28;\n      v27 += 2LL;\n    }\n    while ( v26 < v25 );\n  }\n  result = *(unsigned int *)(v13 + 6392);\n  if ( (signed int)result >= 4 )\n  {\n    v30 = 0LL;\n    v74 = a1;\n    do\n    {\n      if ( *(_DWORD *)(v13 + 6396) >= 4 )\n      {\n        v31 = 0LL;\n        do\n        {\n          v32 = v31 & 3;\n          v33 = v32 + 2 * ((unsigned int)v31 & 0x7FFFFFFC) + 4;\n          *(_BYTE *)(*(_QWORD *)(v12[815] + 8 * v30) + v33) = 1;\n          v34 = v32 + 2 * ((unsigned int)v31 & 0x7FFFFFFC);\n          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1[5] + 6520LL) + 8 * v30) + v34) = 1;\n          v35 = (_QWORD *)v1[5];\n          v13 = v1[6];\n          v36 = *(_QWORD **)(v13 + 6504);\n          v37 = *(_WORD **)(*(_QWORD *)(*v36 + 8 * v30) + 8 * v31);\n          v38 = (_QWORD *)v35[813];\n          v39 = *(_QWORD *)(*v38 + 8 * v30);\n          v40 = *(_WORD **)(v39 + 8 * v34);\n          *v40 = *v37;\n          v40[1] = v37[1];\n          v41 = *(_WORD **)(*(_QWORD *)(v36[1] + 8 * v30) + 8 * v31);\n          v42 = *(_QWORD *)(v38[1] + 8 * v30);\n          v43 = *(_WORD **)(v42 + 8 * v34);\n          *v43 = *v41;\n          v43[1] = v41[1];\n          v44 = *(_QWORD **)(v13 + 6480);\n          v45 = *(signed __int16 *)(*(_QWORD *)(*v44 + 8 * v30) + 2 * v31);\n          v46 = (_QWORD *)v35[810];\n          v47 = *(_QWORD *)(*v46 + 8 * v30);\n          *(_WORD *)(v47 + 2 * v34) = v45;\n          v48 = *(signed __int16 *)(*(_QWORD *)(v44[1] + 8 * v30) + 2 * v31);\n          v49 = *(_QWORD *)(v46[1] + 8 * v30);\n          *(_WORD *)(v49 + 2 * v34) = v48;\n          if ( v45 < 0 )\n            v50 = 0LL;\n          else\n            v50 = *(_QWORD *)(v13 + 8 * v45 + 24);\n          v51 = *(_QWORD **)(v13 + 6496);\n          *(_QWORD *)(*(_QWORD *)(*v51 + 8 * v30) + 8 * v31) = v50;\n          if ( (v48 & 0x8000u) != 0LL )\n            v52 = 0LL;\n          else\n            v52 = *(_QWORD *)(v13 + 8 * v48 + 288);\n          *(_QWORD *)(*(_QWORD *)(v51[1] + 8 * v30) + 8 * v31) = v52;\n          v53 = v39;\n          if ( (v45 & 0x8000u) != 0LL )\n            v54 = 0LL;\n          else\n            v54 = *(_QWORD *)(v13 + 8 * v45 + 1608);\n          v55 = (_QWORD *)v35[812];\n          v56 = *(_QWORD *)(*v55 + 8 * v30);\n          *(_QWORD *)(v56 + 8 * v34) = v54;\n          v75 = v35;\n          if ( (v48 & 0x8000u) != 0LL )\n            v57 = 0LL;\n          else\n            v57 = *(_QWORD *)(v13 + 8 * v48 + 1872);\n          v58 = *(_QWORD *)(v55[1] + 8 * v30);\n          *(_QWORD *)(v58 + 8 * v34) = v57;\n          v59 = *(_QWORD **)(v74 + 56);\n          v60 = (_QWORD *)v59[813];\n          v61 = *(_WORD **)(*(_QWORD *)(*v60 + 8 * v30) + 8 * v31);\n          v62 = *(_WORD **)(v53 + 8 * v33);\n          *v62 = *v61;\n          v62[1] = v61[1];\n          v63 = *(_WORD **)(*(_QWORD *)(v60[1] + 8 * v30) + 8 * v31);\n          v64 = *(_WORD **)(v42 + 8 * v33);\n          *v64 = *v63;\n          v64[1] = v63[1];\n          v65 = (_QWORD *)v59[810];\n          v66 = *(signed __int16 *)(*(_QWORD *)(*v65 + 8 * v30) + 2 * v31);\n          *(_WORD *)(v47 + 2 * v33) = v66;\n          v67 = *(signed __int16 *)(*(_QWORD *)(v65[1] + 8 * v30) + 2 * v31);\n          *(_WORD *)(v49 + 2 * v33) = v67;\n          if ( v66 < 0 )\n            v68 = 0LL;\n          else\n            v68 = v59[v66 + 3];\n          v69 = (_QWORD *)v59[812];\n          *(_QWORD *)(*(_QWORD *)(*v69 + 8 * v30) + 8 * v31) = v68;\n          if ( (v67 & 0x8000u) != 0LL )\n            v70 = 0LL;\n          else\n            v70 = v59[v67 + 36];\n          *(_QWORD *)(*(_QWORD *)(v69[1] + 8 * v30) + 8 * v31) = v70;\n          v71 = -1LL;\n          v72 = -1LL;\n          if ( (v66 & 0x8000u) == 0LL )\n            v72 = v59[v66 + 201];\n          *(_QWORD *)(v56 + 8 * v33) = v72;\n          if ( (v67 & 0x8000u) == 0LL )\n            v71 = v59[v67 + 234];\n          *(_QWORD *)(v58 + 8 * v33) = v71;\n          ++v31;\n          v1 = (_QWORD *)v74;\n          v12 = v75;\n        }\n        while ( v31 < *(_DWORD *)(v13 + 6396) / 4 );\n      }\n      ++v30;\n      result = *(unsigned int *)(v13 + 6392);\n    }\n    while ( v30 < (signed int)result / 4 );\n  }\n  if ( *((_DWORD *)qword_4F9DC0 + 287) )\n  {\n    if ( !*((_DWORD *)qword_4F9DC0 + 289) || (signed int)result <= 3 )\n      return result;\n  }\n  else if ( (signed int)result < 4 )\n  {\n    return result;\n  }\n  result = 0LL;\n  do\n  {\n    if ( *(_DWORD *)(v13 + 6396) >= 4 )\n    {\n      v73 = 0LL;\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 6520) + 8 * result) + v73) = 1;\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1[7] + 6520LL) + 8 * result) + v73++) = 1;\n        v13 = v1[6];\n      }\n      while ( v73 < *(_DWORD *)(v13 + 6396) / 4 );\n    }\n    ++result;\n  }\n  while ( result < *(_DWORD *)(v13 + 6392) / 4 );\n  return result;\n}\n", 
            "funcStartAddr": "0x43c8e0L", 
            "funcEndAddr": "0x43d057L", 
            "funcName": "sub_43C8E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_43D060(_QWORD *a1)\n{\n  int v1; // ecx\n  size_t v2; // r14\n  void *v3; // rax\n  void *v4; // rax\n  void *v5; // rax\n  void *result; // rax\n  size_t v7; // rbx\n  void *v8; // rax\n  void *v9; // rax\n\n  v1 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v1 != 2 && v1 != 4 )\n  {\n    v2 = *((signed int *)off_49F6D0 + 18000) + 1LL;\n    v3 = calloc(v2, 4uLL);\n    a1[8] = v3;\n    if ( !v3 )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l0\");\n    v4 = calloc(v2, 4uLL);\n    a1[9] = v4;\n    if ( !v4 )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l0\");\n    v5 = calloc(v2, 4uLL);\n    a1[10] = v5;\n    if ( !v5 )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l0\");\n  }\n  else\n  {\n    *((_OWORD *)a1 + 4) = 0LL;\n    a1[10] = 0LL;\n  }\n  result = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n  {\n    v7 = *((signed int *)off_49F6D0 + 18001) + 1LL;\n    v8 = calloc(v7, 4uLL);\n    a1[12] = v8;\n    if ( !v8 )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l1\");\n    v9 = calloc(v7, 4uLL);\n    a1[13] = v9;\n    if ( !v9 )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l1\");\n    result = calloc(v7, 4uLL);\n    a1[14] = result;\n    if ( !result )\n      sub_43EF40(0LL, (__int64)\"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l1\");\n  }\n  else\n  {\n    *((_OWORD *)a1 + 6) = 0LL;\n    a1[14] = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43d060L", 
            "funcEndAddr": "0x43d18cL", 
            "funcName": "sub_43D060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43D220(_DWORD *a1)\n{\n  signed int v1; // er14\n  int v2; // er12\n  int v3; // er15\n  __int64 result; // rax\n  int i; // ebp\n  unsigned __int64 v6; // rsi\n  char *v7; // rax\n\n  v1 = 1 << (dword_4FA0E4 + 4);\n  v2 = a1[18116];\n  v3 = a1[18124];\n  a1[18124] = 1;\n  result = (unsigned int)((a1[18162] + 1) / v1);\n  for ( i = (a1[18162] + 1) % v1; v2 != i; i = (i + 1) % v1 )\n  {\n    v6 = (unsigned int)a1[13];\n    v7 = sub_437B80(0, v6, a1[15], a1[14], a1[16]);\n    *((_DWORD *)v7 + 1603) = 1;\n    *((_DWORD *)v7 + 1591) = i;\n    *((_QWORD *)v7 + 798) = 4294967297LL;\n    a1[18125] = 0;\n    sub_43A380((signed __int64)v7, v6);\n    result = (unsigned int)((i + 1) / v1);\n  }\n  a1[18124] = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x43d220L", 
            "funcEndAddr": "0x43d2e3L", 
            "funcName": "sub_43D220"
        }, 
        {
            "decompiledFuncCode": "int *__fastcall sub_43D2F0(int a1, int a2, int a3)\n{\n  int v3; // er14\n  int *v4; // rax\n  int *v5; // r12\n  int v6; // ebp\n  __int64 v7; // rax\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rax\n  __int64 v15; // rax\n\n  v3 = a3;\n  v4 = (int *)calloc(1uLL, 0x1310uLL);\n  v5 = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"alloc_colocated: s\");\n  v4[1] = a1;\n  v4[2] = a2;\n  v6 = a1 / 4;\n  v7 = sub_43FF00((__int64)v4, a1 / 4, a2 / 4, (_QWORD *)v4 + 200, 2u);\n  sub_43F850(v7, a1 / 4, a2 / 4, (_QWORD *)v5 + 201, 2u);\n  v8 = sub_43FFB0((__int64 *)v5 + 202, 2, a1 / 4, a2 / 4, 2);\n  v9 = sub_43F2A0(v8, a2 / 4, (_QWORD *)v5 + 203, a1 / 4);\n  v10 = sub_43F2A0(v9, a2 / 4, (_QWORD *)v5 + 609, a1 / 4);\n  if ( v3 )\n  {\n    v11 = sub_43FF00(v10, v6, a2 / 8, (_QWORD *)v5 + 402, 2u);\n    sub_43F850(v11, v6, a2 / 8, (_QWORD *)v5 + 403, 2u);\n    v12 = sub_43FFB0((__int64 *)v5 + 404, 2, v6, a2 / 8, 2);\n    v13 = sub_43F2A0(v12, a2 / 8, (_QWORD *)v5 + 405, v6);\n    v14 = sub_43FF00(v13, v6, a2 / 8, (_QWORD *)v5 + 604, 2u);\n    sub_43F850(v14, v6, a2 / 8, (_QWORD *)v5 + 605, 2u);\n    v15 = sub_43FFB0((__int64 *)v5 + 606, 2, v6, a2 / 8, 2);\n    sub_43F2A0(v15, a2 / 8, (_QWORD *)v5 + 607, v6);\n  }\n  *v5 = v3;\n  return v5;\n}\n", 
            "funcStartAddr": "0x43d2f0L", 
            "funcEndAddr": "0x43d49eL", 
            "funcName": "sub_43D2F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43D4A0(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n  void *v5; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    sub_440140(*((void **)ptr + 200), 2u);\n    sub_43FC70(*((void **)ptr + 201), 2u);\n    sub_4401F0(*((void **)ptr + 202), 2u, *((_DWORD *)ptr + 1) / 4);\n    v2 = (void *)*((_QWORD *)ptr + 203);\n    if ( v2 )\n    {\n      sub_43FA50(v2);\n      *((_QWORD *)v1 + 203) = 0LL;\n    }\n    v3 = (void *)*((_QWORD *)v1 + 609);\n    if ( v3 )\n    {\n      sub_43FA50(v3);\n      *((_QWORD *)v1 + 609) = 0LL;\n    }\n    if ( *(_DWORD *)v1 )\n    {\n      sub_440140(*((void **)v1 + 402), 2u);\n      sub_43FC70(*((void **)v1 + 403), 2u);\n      sub_4401F0(*((void **)v1 + 404), 2u, *((_DWORD *)v1 + 1) / 4);\n      v4 = (void *)*((_QWORD *)v1 + 405);\n      if ( v4 )\n      {\n        sub_43FA50(v4);\n        *((_QWORD *)v1 + 405) = 0LL;\n      }\n      sub_440140(*((void **)v1 + 604), 2u);\n      sub_43FC70(*((void **)v1 + 605), 2u);\n      sub_4401F0(*((void **)v1 + 606), 2u, *((_DWORD *)v1 + 1) / 4);\n      v5 = (void *)*((_QWORD *)v1 + 607);\n      if ( v5 )\n        sub_43FA50(v5);\n    }\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x43d4a0L", 
            "funcEndAddr": "0x43d5efL", 
            "funcName": "sub_43D4A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43D5F0(__int64 a1, _QWORD **a2)\n{\n  __int64 v2; // rcx\n  int v3; // er9\n  int v4; // eax\n  __int64 v5; // rax\n  signed int v6; // eax\n  __int64 v7; // r8\n  __int64 v8; // r15\n  unsigned int v9; // eax\n  signed __int64 v10; // r13\n  int v11; // esi\n  int v12; // eax\n  _QWORD *v13; // rax\n  _WORD *v14; // rsi\n  _QWORD *v15; // rbx\n  _WORD *v16; // rdx\n  _WORD *v17; // rbp\n  _WORD *v18; // r12\n  _QWORD *v19; // rbx\n  __int64 v20; // rsi\n  __int64 v21; // r11\n  _DWORD *v22; // rax\n  __int64 v23; // r10\n  _QWORD *v24; // rax\n  _WORD *v25; // rdx\n  _QWORD *v26; // rbx\n  _WORD *v27; // rbp\n  _QWORD *v28; // rax\n  _WORD *v29; // rdx\n  _QWORD *v30; // rbx\n  _WORD *v31; // rbp\n  _QWORD *v32; // rdx\n  _QWORD *v33; // rbp\n  _QWORD *v34; // rcx\n  _QWORD *v35; // rsi\n  signed int v36; // eax\n  int v37; // ecx\n  __int64 v38; // r12\n  signed int v39; // edx\n  signed __int64 v40; // rdi\n  unsigned int v41; // ecx\n  __int64 v42; // r11\n  signed __int64 v43; // r10\n  _DWORD *v44; // r9\n  _QWORD *v45; // r8\n  __int64 v46; // rax\n  unsigned int v47; // esi\n  __int64 v48; // rbp\n  __int64 v49; // r11\n  signed __int16 *v50; // rdx\n  _QWORD *v51; // r12\n  _QWORD *v52; // rax\n  signed __int16 *v53; // r14\n  signed __int16 *v54; // rcx\n  signed __int16 *v55; // r8\n  _QWORD *v56; // rax\n  _QWORD *v57; // rsi\n  __int64 v58; // r13\n  __int16 v59; // r15\n  _QWORD *v60; // rax\n  _QWORD *v61; // rcx\n  int v62; // er9\n  unsigned __int16 v63; // dx\n  int v64; // ecx\n  int v65; // ecx\n  bool v66; // si\n  _QWORD *v67; // r8\n  unsigned int v68; // eax\n  __int64 v69; // rdx\n  signed __int16 *v70; // rax\n  _QWORD *v71; // rbp\n  signed __int16 *v72; // r15\n  signed __int16 *v73; // rax\n  signed __int16 *v74; // r14\n  _QWORD *v75; // rax\n  int v76; // ecx\n  _QWORD *v77; // rbp\n  __int64 v78; // r8\n  signed __int64 v79; // rsi\n  int v80; // ecx\n  int v81; // ecx\n  _QWORD *v82; // rax\n  signed __int16 *v83; // rcx\n  _QWORD *v84; // rsi\n  signed __int16 *v85; // r8\n  signed __int16 *v86; // rax\n  signed __int16 *v87; // r14\n  _QWORD *v88; // rax\n  _QWORD *v89; // rsi\n  __int64 v90; // rcx\n  __int16 v91; // r15\n  _QWORD *v92; // rdx\n  _QWORD *v93; // rbx\n  unsigned __int16 v94; // si\n  int v95; // ecx\n  int v96; // edx\n  bool v97; // cl\n  int v98; // ecx\n  int v99; // ecx\n  _QWORD *v100; // rax\n  __int64 v101; // rcx\n  __int64 v102; // rax\n  _QWORD *v103; // rax\n  __int64 v104; // rcx\n  __int64 v105; // rax\n  _QWORD *v106; // r13\n  int v107; // eax\n  __int64 v108; // rsi\n  __int64 v109; // rsi\n  signed __int64 v110; // rdx\n  int v111; // edx\n  unsigned __int16 v112; // cx\n  int v113; // ecx\n  int v114; // edx\n  bool v115; // cl\n  int v116; // edx\n  int v117; // ecx\n  int v118; // ecx\n  signed int v119; // eax\n  __int64 v120; // r13\n  __int64 v121; // r11\n  unsigned int v122; // eax\n  __int64 v123; // r12\n  signed __int64 v124; // rax\n  __int64 v125; // r10\n  __int64 v126; // rbp\n  int v127; // esi\n  int v128; // edx\n  _QWORD *v129; // r9\n  _WORD *v130; // rdx\n  _QWORD *v131; // rsi\n  _WORD *v132; // rcx\n  _WORD *v133; // rcx\n  _WORD *v134; // rsi\n  _QWORD *v135; // rcx\n  _QWORD *v136; // rsi\n  _QWORD *v137; // rdx\n  __int64 v138; // rsi\n  _QWORD *v139; // rcx\n  _WORD *v140; // rdx\n  _QWORD *v141; // rbx\n  _WORD *v142; // rsi\n  _WORD *v143; // rcx\n  _WORD *v144; // rsi\n  _QWORD *v145; // rcx\n  _QWORD *v146; // rsi\n  _QWORD *v147; // rbp\n  __int64 v148; // r13\n  __int64 result; // rax\n  signed int v150; // er9\n  signed __int64 v151; // r10\n  unsigned int v152; // edx\n  __int64 v153; // r11\n  __int64 v154; // rbx\n  __int64 *v155; // rdx\n  __int64 v156; // rbp\n  __int64 v157; // rcx\n  signed __int64 v158; // rcx\n  signed __int16 *v159; // rsi\n  signed __int16 *v160; // r15\n  __int64 v161; // rax\n  signed __int16 *v162; // rdx\n  signed __int16 *v163; // r12\n  _QWORD *v164; // rax\n  __int64 v165; // rsi\n  __int64 v166; // rax\n  __int16 v167; // r14\n  _QWORD *v168; // rax\n  __int64 v169; // rbp\n  _QWORD *v170; // rdx\n  _QWORD *v171; // rax\n  signed __int16 *v172; // rcx\n  _QWORD *v173; // rbp\n  signed __int16 *v174; // rax\n  _QWORD *v175; // rax\n  _QWORD *v176; // rbp\n  _QWORD *v177; // rax\n  _QWORD *v178; // rbp\n  int v179; // ecx\n  unsigned __int16 v180; // dx\n  int v181; // ecx\n  int v182; // edx\n  bool v183; // cl\n  int v184; // ecx\n  int v185; // ecx\n  int v186; // ecx\n  _DWORD *v187; // r11\n  unsigned int *v188; // r8\n  signed int v189; // er9\n  __int64 v190; // r10\n  __int64 v191; // rbp\n  int v192; // er15\n  __int64 v193; // rax\n  _QWORD *v194; // rcx\n  __int64 v195; // rsi\n  __int64 v196; // rcx\n  _QWORD *v197; // rcx\n  __int64 v198; // rsi\n  __int64 v199; // rcx\n  _DWORD *v200; // r9\n  signed __int64 v201; // r11\n  unsigned __int64 v202; // rbp\n  __int64 v203; // r10\n  _QWORD *v204; // rbx\n  signed __int64 v205; // rdi\n  int v206; // eax\n  int v207; // eax\n  signed int v208; // ecx\n  int v209; // esi\n  int v210; // eax\n  int v211; // eax\n  int v212; // ecx\n  signed int v213; // edx\n  __int64 v214; // [rsp+0h] [rbp-C0h]\n  signed __int64 v215; // [rsp+8h] [rbp-B8h]\n  __int64 v216; // [rsp+8h] [rbp-B8h]\n  __int64 v217; // [rsp+10h] [rbp-B0h]\n  signed int v218; // [rsp+10h] [rbp-B0h]\n  __int64 v219; // [rsp+18h] [rbp-A8h]\n  __int64 v220; // [rsp+18h] [rbp-A8h]\n  __int64 v221; // [rsp+20h] [rbp-A0h]\n  __int64 v222; // [rsp+28h] [rbp-98h]\n  __int64 v223; // [rsp+28h] [rbp-98h]\n  int v224; // [rsp+34h] [rbp-8Ch]\n  _QWORD **v225; // [rsp+38h] [rbp-88h]\n  _DWORD *v226; // [rsp+40h] [rbp-80h]\n  signed int v227; // [rsp+4Ch] [rbp-74h]\n  _DWORD *v228; // [rsp+50h] [rbp-70h]\n  __int64 v229; // [rsp+58h] [rbp-68h]\n  __int64 v230; // [rsp+80h] [rbp-40h]\n  __int64 v231; // [rsp+88h] [rbp-38h]\n\n  v2 = *a2[1];\n  v3 = *((_DWORD *)off_49F6D0 + 18100);\n  v225 = a2;\n  v214 = *a2[1];\n  v228 = off_49F6D0;\n  if ( v3 )\n  {\n    v217 = *a2[3];\n    v219 = *a2[5];\n  }\n  else\n  {\n    v4 = *((_DWORD *)off_49F6D0 + 7);\n    if ( v4 && v4 != *(_DWORD *)v2 && *(_DWORD *)(v2 + 6412) )\n    {\n      if ( v4 == 1 )\n        v5 = *(_QWORD *)(v2 + 6528);\n      else\n        v5 = *(_QWORD *)(v2 + 6536);\n      v217 = v5;\n      v219 = v5;\n      v214 = v5;\n    }\n    else\n    {\n      v219 = *a2[1];\n      v217 = *a2[1];\n    }\n  }\n  v226 = qword_4F9DC0;\n  v224 = *((_DWORD *)qword_4F9DC0 + 287);\n  if ( !v224 || *((_DWORD *)qword_4F9DC0 + 289) )\n  {\n    v6 = *(_DWORD *)(v214 + 6396);\n    if ( v6 >= 4 )\n    {\n      v227 = *(_DWORD *)(v214 + 6392);\n      v229 = v6 / 4;\n      v7 = 0LL;\n      do\n      {\n        if ( v227 >= 4 )\n        {\n          v8 = (unsigned int)v7 >> 1;\n          v9 = ((unsigned int)v7 >> 1) & 0x7FFFFFFC;\n          v231 = v9 + ((unsigned int)v7 >> 1);\n          v230 = v9 + (unsigned int)v8 + 4;\n          v10 = 0LL;\n          do\n          {\n            if ( v3 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v214 + 6520) + 8 * v10) + v7) )\n            {\n              v11 = *(_DWORD *)(v219 + 4) - *(_DWORD *)(qword_4F9E30 + 4);\n              if ( v11 < 1 )\n                v11 = *(_DWORD *)(qword_4F9E30 + 4) - *(_DWORD *)(v219 + 4);\n              v12 = *(_DWORD *)(v217 + 4) - *(_DWORD *)(qword_4F9E30 + 4);\n              if ( v12 < 1 )\n                v12 = *(_DWORD *)(qword_4F9E30 + 4) - *(_DWORD *)(v217 + 4);\n              if ( v11 <= v12 )\n              {\n                v28 = *(_QWORD **)(v219 + 6504);\n                v29 = *(_WORD **)(*(_QWORD *)(*v28 + 8 * v10) + 8 * v8);\n                v30 = *(_QWORD **)(a1 + 1616);\n                v31 = *(_WORD **)(*(_QWORD *)(*v30 + 8 * v10) + 8 * v7);\n                *v31 = *v29;\n                v31[1] = v29[1];\n                v17 = *(_WORD **)(*(_QWORD *)(v28[1] + 8 * v10) + 8 * v8);\n                v18 = *(_WORD **)(*(_QWORD *)(v30[1] + 8 * v10) + 8 * v7);\n                *v18 = *v17;\n                v19 = (_QWORD *)(v219 + 6480);\n                v20 = (unsigned int)v7 >> 1;\n                v21 = v230;\n                v22 = (_DWORD *)(v219 + 6376);\n              }\n              else\n              {\n                v13 = *(_QWORD **)(v217 + 6504);\n                v14 = *(_WORD **)(*(_QWORD *)(*v13 + 8 * v10) + 8 * v8);\n                v15 = *(_QWORD **)(a1 + 1616);\n                v16 = *(_WORD **)(*(_QWORD *)(*v15 + 8 * v10) + 8 * v7);\n                *v16 = *v14;\n                v16[1] = v14[1];\n                v17 = *(_WORD **)(*(_QWORD *)(v13[1] + 8 * v10) + 8 * v8);\n                v18 = *(_WORD **)(*(_QWORD *)(v15[1] + 8 * v10) + 8 * v7);\n                *v18 = *v17;\n                v19 = (_QWORD *)(v217 + 6480);\n                v20 = (unsigned int)v7 >> 1;\n                v21 = v231;\n                v22 = (_DWORD *)(v217 + 6376);\n              }\n              v23 = v214;\n            }\n            else\n            {\n              v23 = v214;\n              v24 = *(_QWORD **)(v214 + 6504);\n              v25 = *(_WORD **)(*(_QWORD *)(*v24 + 8 * v10) + 8 * v7);\n              v26 = *(_QWORD **)(a1 + 1616);\n              v27 = *(_WORD **)(*(_QWORD *)(*v26 + 8 * v10) + 8 * v7);\n              *v27 = *v25;\n              v27[1] = v25[1];\n              v17 = *(_WORD **)(*(_QWORD *)(v24[1] + 8 * v10) + 8 * v7);\n              v18 = *(_WORD **)(*(_QWORD *)(v26[1] + 8 * v10) + 8 * v7);\n              *v18 = *v17;\n              v19 = (_QWORD *)(v214 + 6480);\n              v20 = v7;\n              v21 = v7;\n              v22 = (_DWORD *)(v214 + 6376);\n            }\n            v18[1] = v17[1];\n            v32 = (_QWORD *)*v19;\n            v33 = *(_QWORD **)(a1 + 1600);\n            *(_WORD *)(*(_QWORD *)(*v33 + 8 * v10) + 2 * v7) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)*v19 + 8 * v10)\n                                                                        + 2 * v20);\n            *(_WORD *)(*(_QWORD *)(v33[1] + 8 * v10) + 2 * v7) = *(_WORD *)(*(_QWORD *)(v32[1] + 8 * v10) + 2 * v20);\n            v34 = *(_QWORD **)(v23 + 6496);\n            v35 = *(_QWORD **)(a1 + 1608);\n            *(_QWORD *)(*(_QWORD *)(*v35 + 8 * v10) + 8 * v7) = *(_QWORD *)(*(_QWORD *)(*v34 + 8 * v10) + 8 * v21);\n            *(_QWORD *)(*(_QWORD *)(v35[1] + 8 * v10) + 8 * v7) = *(_QWORD *)(*(_QWORD *)(v34[1] + 8 * v10) + 8 * v21);\n            *(_DWORD *)(a1 + 4864) = *v22;\n            ++v10;\n          }\n          while ( v10 < v227 / 4 );\n        }\n        ++v7;\n      }\n      while ( v7 < v229 );\n    }\n  }\n  if ( !(v228[7] | v3) )\n  {\n    if ( !v224 )\n      goto LABEL_117;\n    goto LABEL_116;\n  }\n  v36 = *(_DWORD *)(v214 + 6392);\n  v37 = v224;\n  if ( v36 < 4 )\n    goto LABEL_113;\n  v38 = v214;\n  v39 = *(_DWORD *)(v214 + 6396);\n  v215 = 0LL;\n  v221 = a1;\n  do\n  {\n    if ( v39 < 8 )\n      goto LABEL_111;\n    v40 = v215;\n    v41 = v215 & 0x7FFFFFFE;\n    if ( v215 & 2 )\n      v41 = v215 | 1;\n    v42 = v41;\n    v43 = 0LL;\n    v222 = v41;\n    do\n    {\n      v44 = off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18100) )\n      {\n        v45 = *(_QWORD **)(v219 + 6504);\n        v46 = *(_QWORD *)(*v45 + 8 * v42);\n        v47 = v43 & 0x7FFFFFFE;\n        if ( v43 & 2 )\n          v47 = v43 | 1;\n        v48 = v42;\n        v49 = v47;\n        v50 = *(signed __int16 **)(v46 + 8LL * v47);\n        v51 = (_QWORD *)v221;\n        v52 = *(_QWORD **)(v221 + 4848);\n        v53 = *(signed __int16 **)(*(_QWORD *)(*v52 + 8 * v40) + 8 * v43);\n        *v53 = *v50;\n        v53[1] = v50[1];\n        v54 = *(signed __int16 **)(*(_QWORD *)(v45[1] + 8 * v48) + 8LL * v47);\n        v55 = *(signed __int16 **)(*(_QWORD *)(v52[1] + 8 * v40) + 8 * v43);\n        *v55 = *v54;\n        v55[1] = v54[1];\n        v56 = *(_QWORD **)(v219 + 6480);\n        LOWORD(v54) = *(_WORD *)(*(_QWORD *)(*v56 + 8 * v48) + 2LL * v47);\n        v57 = *(_QWORD **)(v221 + 4832);\n        v58 = *(_QWORD *)(*v57 + 8 * v40);\n        *(_WORD *)(v58 + 2 * v43) = (_WORD)v54;\n        v59 = *(_WORD *)(*(_QWORD *)(v56[1] + 8 * v48) + 2 * v49);\n        *(_WORD *)(*(_QWORD *)(v57[1] + 8 * v40) + 2 * v43) = v59;\n        v60 = *(_QWORD **)(v219 + 6496);\n        v61 = *(_QWORD **)(v221 + 4840);\n        *(_QWORD *)(*(_QWORD *)(*v61 + 8 * v40) + 8 * v43) = *(_QWORD *)(*(_QWORD *)(*v60 + 8 * v48) + 8 * v49);\n        *(_QWORD *)(*(_QWORD *)(v61[1] + 8 * v40) + 8 * v43) = *(_QWORD *)(*(_QWORD *)(v60[1] + 8 * v48) + 8 * v49);\n        v62 = v44[17999];\n        if ( v62 != 1 )\n        {\nLABEL_62:\n          v82 = *(_QWORD **)(v217 + 6504);\n          v83 = *(signed __int16 **)(*(_QWORD *)(*v82 + 8 * v222) + 8 * v49);\n          v84 = (_QWORD *)v51[404];\n          v85 = *(signed __int16 **)(*(_QWORD *)(*v84 + 8 * v215) + 8 * v43);\n          *v85 = *v83;\n          v85[1] = v83[1];\n          v86 = *(signed __int16 **)(*(_QWORD *)(v82[1] + 8 * v222) + 8 * v49);\n          v87 = *(signed __int16 **)(*(_QWORD *)(v84[1] + 8 * v215) + 8 * v43);\n          *v87 = *v86;\n          v87[1] = v86[1];\n          v88 = *(_QWORD **)(v217 + 6480);\n          v89 = (_QWORD *)v51[402];\n          v90 = *(_QWORD *)(*v89 + 8 * v215);\n          *(_WORD *)(v90 + 2 * v43) = *(_WORD *)(*(_QWORD *)(*v88 + 8 * v222) + 2 * v49);\n          v91 = *(_WORD *)(*(_QWORD *)(v88[1] + 8 * v222) + 2 * v49);\n          *(_WORD *)(*(_QWORD *)(v89[1] + 8 * v215) + 2 * v43) = v91;\n          v92 = *(_QWORD **)(v217 + 6496);\n          v93 = (_QWORD *)v51[403];\n          *(_QWORD *)(*(_QWORD *)(*v93 + 8 * v215) + 8 * v43) = *(_QWORD *)(*(_QWORD *)(*v92 + 8 * v222) + 8 * v49);\n          v40 = v215;\n          *(_QWORD *)(*(_QWORD *)(v93[1] + 8 * v215) + 8 * v43) = *(_QWORD *)(*(_QWORD *)(v92[1] + 8 * v222) + 8 * v49);\n          v38 = v214;\n          if ( v62 != 1 )\n          {\nLABEL_82:\n            v42 = v222;\n            if ( !v62 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v214 + 6520) + 8 * v215) + 2 * v43) )\n            {\n              v100 = *(_QWORD **)(v221 + 3232);\n              v101 = *(_QWORD *)(*(_QWORD *)(*v100 + 8 * v215) + 8 * v43);\n              *(_WORD *)(v101 + 2) /= 2;\n              v102 = *(_QWORD *)(*(_QWORD *)(v100[1] + 8 * v215) + 8 * v43);\n              *(_WORD *)(v102 + 2) /= 2;\n              v103 = *(_QWORD **)(v221 + 4848);\n              v40 = v215;\n              v104 = *(_QWORD *)(*(_QWORD *)(*v103 + 8 * v215) + 8 * v43);\n              *(_WORD *)(v104 + 2) /= 2;\n              v105 = *(_QWORD *)(*(_QWORD *)(v103[1] + 8 * v215) + 8 * v43);\n              *(_WORD *)(v105 + 2) /= 2;\n            }\n            goto LABEL_109;\n          }\n          v94 = *(_WORD *)(v90 + 2 * v43);\n          if ( *(_DWORD *)(v217 + 6376) || v94 )\n          {\n            v97 = 0;\n            if ( v91 || v94 != 0xFFFF )\n              goto LABEL_81;\n            v98 = -*v87;\n            if ( v98 < 1 )\n              v98 = *v87;\n            if ( (unsigned int)v98 <= 1 )\n            {\n              v99 = -v87[1];\n              if ( v99 < 1 )\n                v99 = v87[1];\n              v97 = (unsigned int)v99 < 2;\n              goto LABEL_81;\n            }\n          }\n          else\n          {\n            v95 = -*v85;\n            if ( v95 < 1 )\n              v95 = *v85;\n            if ( (unsigned int)v95 <= 1 )\n            {\n              v96 = -v85[1];\n              if ( v96 < 1 )\n                v96 = v85[1];\n              v97 = 1;\n              if ( (unsigned int)v96 < 2 )\n                goto LABEL_81;\n            }\n          }\n          v97 = 0;\nLABEL_81:\n          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v221 + 3240) + 8 * v215) + v43) = !v97;\n          v62 = *((_DWORD *)off_49F6D0 + 17999);\n          goto LABEL_82;\n        }\n        v63 = *(_WORD *)(v58 + 2 * v43);\n        if ( *(_DWORD *)(v219 + 6376) || v63 )\n        {\n          v66 = 0;\n          if ( v59 || v63 != 0xFFFF )\n            goto LABEL_61;\n          v80 = -*v55;\n          if ( v80 < 1 )\n            v80 = *v55;\n          if ( (unsigned int)v80 <= 1 )\n          {\n            v81 = -v55[1];\n            if ( v81 < 1 )\n              v81 = v55[1];\n            v66 = (unsigned int)v81 < 2;\n            goto LABEL_61;\n          }\n        }\n        else\n        {\n          v64 = -*v53;\n          if ( v64 < 1 )\n            v64 = *v53;\n          if ( (unsigned int)v64 <= 1 )\n          {\n            v65 = -v53[1];\n            if ( v65 < 1 )\n              v65 = v53[1];\n            v66 = 1;\n            if ( (unsigned int)v65 < 2 )\n              goto LABEL_61;\n          }\n        }\n        v66 = 0;\nLABEL_61:\n        v51 = (_QWORD *)v221;\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v221 + 4856) + 8 * v40) + v43) = !v66;\n        v62 = *((_DWORD *)off_49F6D0 + 17999);\n        goto LABEL_62;\n      }\n      v67 = *(_QWORD **)(v38 + 6504);\n      v68 = v43 & 0x7FFFFFFE;\n      if ( v43 & 2 )\n        v68 = v43 | 1;\n      v69 = v68;\n      v70 = *(signed __int16 **)(*(_QWORD *)(*v67 + 8 * v42) + 8LL * v68);\n      v71 = *(_QWORD **)(v221 + 1616);\n      v72 = *(signed __int16 **)(*(_QWORD *)(*v71 + 8 * v215) + 8 * v43);\n      *v72 = *v70;\n      v72[1] = v70[1];\n      v73 = *(signed __int16 **)(*(_QWORD *)(v67[1] + 8 * v42) + 8 * v69);\n      v74 = *(signed __int16 **)(*(_QWORD *)(v71[1] + 8 * v215) + 8 * v43);\n      *v74 = *v73;\n      v74[1] = v73[1];\n      v75 = *(_QWORD **)(v38 + 6480);\n      v76 = *(unsigned __int16 *)(*(_QWORD *)(*v75 + 8 * v42) + 2 * v69);\n      v77 = *(_QWORD **)(v221 + 1600);\n      v40 = v215;\n      v78 = *(_QWORD *)(*v77 + 8 * v215);\n      if ( v76 == 0xFFFF )\n      {\n        *(_WORD *)(v78 + 2 * v43) = -1;\n        v79 = -1LL;\n      }\n      else\n      {\n        *(_WORD *)(v78 + 2 * v43) = v76;\n        v79 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v38 + 6496) + 8 * v42) + 8 * v69);\n      }\n      v106 = *(_QWORD **)(v221 + 1608);\n      *(_QWORD *)(*(_QWORD *)(*v106 + 8 * v215) + 8 * v43) = v79;\n      v107 = *(unsigned __int16 *)(*(_QWORD *)(v75[1] + 8 * v42) + 2 * v69);\n      v108 = *(_QWORD *)(v77[1] + 8 * v215);\n      if ( v107 == 0xFFFF )\n      {\n        *(_WORD *)(v108 + 2 * v43) = -1;\n        LOWORD(v107) = -1;\n        v110 = -1LL;\n        v109 = v214;\n      }\n      else\n      {\n        *(_WORD *)(v108 + 2 * v43) = v107;\n        v109 = v214;\n        v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v214 + 6496) + 8LL) + 8 * v42) + 8 * v69);\n      }\n      *(_QWORD *)(*(_QWORD *)(v106[1] + 8 * v215) + 8 * v43) = v110;\n      v111 = *(_DWORD *)(v109 + 6376);\n      *(_DWORD *)(v221 + 4864) = v111;\n      v38 = v109;\n      if ( v44[17999] == 1 )\n      {\n        v112 = *(_WORD *)(v78 + 2 * v43);\n        if ( v111 || v112 )\n        {\n          v116 = v112;\n          v115 = 0;\n          if ( v116 == 0xFFFF && !(_WORD)v107 )\n          {\n            v117 = -*v74;\n            if ( v117 < 1 )\n              v117 = *v74;\n            if ( (unsigned int)v117 > 1 )\n            {\nLABEL_107:\n              v115 = 0;\n            }\n            else\n            {\n              v118 = -v74[1];\n              if ( v118 < 1 )\n                v118 = v74[1];\n              v115 = (unsigned int)v118 < 2;\n            }\n          }\n        }\n        else\n        {\n          v113 = -*v72;\n          if ( v113 < 1 )\n            v113 = *v72;\n          if ( (unsigned int)v113 > 1 )\n            goto LABEL_107;\n          v114 = -v72[1];\n          if ( v114 < 1 )\n            v114 = v72[1];\n          v115 = 1;\n          if ( (unsigned int)v114 >= 2 )\n            goto LABEL_107;\n        }\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v221 + 1624) + 8 * v215) + v43) = !v115;\n      }\nLABEL_109:\n      ++v43;\n      v39 = *(_DWORD *)(v38 + 6396);\n    }\n    while ( v43 < v39 / 8 );\n    v36 = *(_DWORD *)(v38 + 6392);\n    a1 = v221;\nLABEL_111:\n    ++v215;\n  }\n  while ( v215 < v36 / 4 );\n  v226 = qword_4F9DC0;\n  v37 = *((_DWORD *)qword_4F9DC0 + 287);\nLABEL_113:\n  if ( !v37 )\n  {\nLABEL_117:\n    if ( !*((_DWORD *)off_49F6D0 + 7) )\n    {\n      v119 = *(_DWORD *)(v214 + 6396);\n      if ( v119 >= 4 )\n      {\n        v218 = *(_DWORD *)(v214 + 6392);\n        v223 = v119 / 4;\n        v120 = 0LL;\n        do\n        {\n          if ( v218 >= 4 )\n          {\n            v121 = (unsigned int)v120 >> 1;\n            v122 = ((unsigned int)v120 >> 1) & 0x7FFFFFFC;\n            v216 = v122 + ((unsigned int)v120 >> 1);\n            v220 = v122 + (unsigned int)v121 + 4;\n            v123 = *(_QWORD *)(v214 + 6520);\n            v124 = 0LL;\n            do\n            {\n              if ( *(_BYTE *)(*(_QWORD *)(v123 + 8 * v124) + v120) )\n              {\n                v125 = *(_QWORD *)(v214 + 6528);\n                v126 = *(_QWORD *)(v214 + 6536);\n                v127 = *(_DWORD *)(v126 + 4) - *(_DWORD *)(qword_4F9E30 + 4);\n                if ( v127 < 1 )\n                  v127 = *(_DWORD *)(qword_4F9E30 + 4) - *(_DWORD *)(v126 + 4);\n                v128 = *(_DWORD *)(v125 + 4) - *(_DWORD *)(qword_4F9E30 + 4);\n                if ( v128 < 1 )\n                  v128 = *(_DWORD *)(qword_4F9E30 + 4) - *(_DWORD *)(v125 + 4);\n                if ( v127 <= v128 )\n                {\n                  v139 = *(_QWORD **)(v126 + 6504);\n                  v140 = *(_WORD **)(*(_QWORD *)(*v139 + 8 * v124) + 8 * v121);\n                  v141 = *(_QWORD **)(a1 + 1616);\n                  v142 = *(_WORD **)(*(_QWORD *)(*v141 + 8 * v124) + 8 * v120);\n                  *v142 = *v140;\n                  v142[1] = v140[1];\n                  v143 = *(_WORD **)(*(_QWORD *)(v139[1] + 8 * v124) + 8 * v121);\n                  v144 = *(_WORD **)(*(_QWORD *)(v141[1] + 8 * v124) + 8 * v120);\n                  *v144 = *v143;\n                  v144[1] = v143[1];\n                  v145 = *(_QWORD **)(v126 + 6480);\n                  v146 = *(_QWORD **)(a1 + 1600);\n                  *(_WORD *)(*(_QWORD *)(*v146 + 8 * v124) + 2 * v120) = *(_WORD *)(*(_QWORD *)(*v145 + 8 * v124)\n                                                                                  + 2 * v121);\n                  *(_WORD *)(*(_QWORD *)(v146[1] + 8 * v124) + 2 * v120) = *(_WORD *)(*(_QWORD *)(v145[1] + 8 * v124)\n                                                                                    + 2 * v121);\n                  v137 = *(_QWORD **)(v214 + 6496);\n                  v138 = v220;\n                  v125 = v126;\n                }\n                else\n                {\n                  v129 = *(_QWORD **)(v125 + 6504);\n                  v130 = *(_WORD **)(*(_QWORD *)(*v129 + 8 * v124) + 8 * v121);\n                  v131 = *(_QWORD **)(a1 + 1616);\n                  v132 = *(_WORD **)(*(_QWORD *)(*v131 + 8 * v124) + 8 * v120);\n                  *v132 = *v130;\n                  v132[1] = v130[1];\n                  v133 = *(_WORD **)(*(_QWORD *)(v129[1] + 8 * v124) + 8 * v121);\n                  v134 = *(_WORD **)(*(_QWORD *)(v131[1] + 8 * v124) + 8 * v120);\n                  *v134 = *v133;\n                  v134[1] = v133[1];\n                  v135 = *(_QWORD **)(v125 + 6480);\n                  v136 = *(_QWORD **)(a1 + 1600);\n                  *(_WORD *)(*(_QWORD *)(*v136 + 8 * v124) + 2 * v120) = *(_WORD *)(*(_QWORD *)(*v135 + 8 * v124)\n                                                                                  + 2 * v121);\n                  *(_WORD *)(*(_QWORD *)(v136[1] + 8 * v124) + 2 * v120) = *(_WORD *)(*(_QWORD *)(v135[1] + 8 * v124)\n                                                                                    + 2 * v121);\n                  v137 = *(_QWORD **)(v214 + 6496);\n                  v138 = v216;\n                }\n                v147 = *(_QWORD **)(a1 + 1608);\n                *(_QWORD *)(*(_QWORD *)(*v147 + 8 * v124) + 8 * v120) = *(_QWORD *)(*(_QWORD *)(*v137 + 8 * v124)\n                                                                                  + 8 * v138);\n                *(_QWORD *)(*(_QWORD *)(v147[1] + 8 * v124) + 8 * v120) = *(_QWORD *)(*(_QWORD *)(v137[1] + 8 * v124)\n                                                                                    + 8 * v138);\n                *(_DWORD *)(a1 + 4864) = *(_DWORD *)(v125 + 6376);\n              }\n              ++v124;\n            }\n            while ( v124 < v218 / 4 );\n          }\n          ++v120;\n        }\n        while ( v120 < v223 );\n      }\n    }\n    goto LABEL_133;\n  }\nLABEL_116:\n  if ( v226[289] )\n    goto LABEL_117;\nLABEL_133:\n  v148 = v214;\n  result = *(unsigned int *)(v214 + 6396);\n  if ( (signed int)result >= 4 )\n  {\n    v150 = *(_DWORD *)(v214 + 6392);\n    v151 = 0LL;\n    while ( v150 < 4 )\n    {\nLABEL_166:\n      ++v151;\n      v186 = *(_DWORD *)(v148 + 6396) / 4;\n      result = v186;\n      if ( v151 >= v186 )\n        goto LABEL_169;\n    }\n    v152 = v151 & 0x7FFFFFFE;\n    if ( v151 & 2 )\n      v152 = v151 | 1;\n    v153 = v152;\n    v154 = 0LL;\n    while ( 2 )\n    {\n      if ( *((_DWORD *)qword_4F9DC0 + 287) && !*((_DWORD *)qword_4F9DC0 + 289) )\n      {\n        v171 = *(_QWORD **)(v148 + 6504);\n        v172 = *(signed __int16 **)(*(_QWORD *)(*v171 + 8 * v154) + 8 * v151);\n        v173 = *(_QWORD **)(a1 + 1616);\n        v160 = *(signed __int16 **)(*(_QWORD *)(*v173 + 8 * v154) + 8 * v151);\n        *v160 = *v172;\n        v160[1] = v172[1];\n        v174 = *(signed __int16 **)(*(_QWORD *)(v171[1] + 8 * v154) + 8 * v151);\n        v163 = *(signed __int16 **)(*(_QWORD *)(v173[1] + 8 * v154) + 8 * v151);\n        *v163 = *v174;\n        v163[1] = v174[1];\n        v175 = *(_QWORD **)(v148 + 6480);\n        v176 = *(_QWORD **)(a1 + 1600);\n        v165 = *(_QWORD *)(*v176 + 8 * v154);\n        *(_WORD *)(v165 + 2 * v151) = *(_WORD *)(*(_QWORD *)(*v175 + 8 * v154) + 2 * v151);\n        v167 = *(_WORD *)(*(_QWORD *)(v175[1] + 8 * v154) + 2 * v151);\n        *(_WORD *)(*(_QWORD *)(v176[1] + 8 * v154) + 2 * v151) = v167;\n        v177 = *(_QWORD **)(v148 + 6496);\n        v178 = *(_QWORD **)(a1 + 1608);\n        *(_QWORD *)(*(_QWORD *)(*v178 + 8 * v154) + 8 * v151) = *(_QWORD *)(*(_QWORD *)(*v177 + 8 * v154) + 8 * v151);\n        v148 = v214;\n        v170 = (_QWORD *)(*(_QWORD *)(v177[1] + 8 * v154) + 8 * v151);\n        v169 = v178[1];\n      }\n      else\n      {\n        v155 = *(__int64 **)(a1 + 1616);\n        v156 = *v155;\n        v157 = v154 & 0x7FFFFFFE;\n        if ( v154 & 2 )\n          v157 = (unsigned int)v154 | 1;\n        v158 = 8 * v157 & 0x7FFFFFFF8LL;\n        v159 = *(signed __int16 **)(*(_QWORD *)(v156 + v158) + 8 * v153);\n        v160 = *(signed __int16 **)(*(_QWORD *)(v156 + 8 * v154) + 8 * v151);\n        *v160 = *v159;\n        v160[1] = v159[1];\n        v161 = v155[1];\n        v162 = *(signed __int16 **)(*(_QWORD *)(v161 + v158) + 8 * v153);\n        v163 = *(signed __int16 **)(*(_QWORD *)(v161 + 8 * v154) + 8 * v151);\n        *v163 = *v162;\n        v163[1] = v162[1];\n        v164 = *(_QWORD **)(a1 + 1600);\n        v165 = *(_QWORD *)(*v164 + 8 * v154);\n        *(_WORD *)(v165 + 2 * v151) = *(_WORD *)(*(_QWORD *)(*v164 + v158) + 2 * v153);\n        v166 = v164[1];\n        v167 = *(_WORD *)(*(_QWORD *)(v166 + v158) + 2 * v153);\n        *(_WORD *)(*(_QWORD *)(v166 + 8 * v154) + 2 * v151) = v167;\n        v168 = *(_QWORD **)(a1 + 1608);\n        *(_QWORD *)(*(_QWORD *)(*v168 + 8 * v154) + 8 * v151) = *(_QWORD *)(*(_QWORD *)(*v168 + v158) + 8 * v153);\n        v169 = v168[1];\n        v170 = (_QWORD *)(*(_QWORD *)(v169 + v158) + 8 * v153);\n      }\n      *(_QWORD *)(*(_QWORD *)(v169 + 8 * v154) + 8 * v151) = *v170;\n      v179 = *(_DWORD *)(v148 + 6376);\n      *(_DWORD *)(a1 + 4864) = v179;\n      if ( *((_DWORD *)off_49F6D0 + 17999) == 1 )\n      {\n        v180 = *(_WORD *)(v165 + 2 * v151);\n        if ( v179 || v180 )\n        {\n          v183 = 0;\n          if ( v180 == 0xFFFF && !v167 )\n          {\n            v184 = -*v163;\n            if ( v184 < 1 )\n              v184 = *v163;\n            if ( (unsigned int)v184 > 1 )\n            {\nLABEL_163:\n              v183 = 0;\n            }\n            else\n            {\n              v185 = -v163[1];\n              if ( v185 < 1 )\n                v185 = v163[1];\n              v183 = (unsigned int)v185 < 2;\n            }\n          }\n        }\n        else\n        {\n          v181 = -*v160;\n          if ( v181 < 1 )\n            v181 = *v160;\n          if ( (unsigned int)v181 > 1 )\n            goto LABEL_163;\n          v182 = -v160[1];\n          if ( v182 < 1 )\n            v182 = v160[1];\n          v183 = 1;\n          if ( (unsigned int)v182 >= 2 )\n            goto LABEL_163;\n        }\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 1624) + 8 * v154) + v151) = !v183;\n        v150 = *(_DWORD *)(v148 + 6392);\n      }\n      if ( ++v154 >= v150 / 4 )\n        goto LABEL_166;\n      continue;\n    }\n  }\n  v186 = (signed int)result / 4;\nLABEL_169:\n  v187 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 17999) )\n    return result;\n  v188 = (unsigned int *)((char *)off_49F6D0 + 72400);\n  if ( v186 > 0 )\n  {\n    v189 = *(_DWORD *)(v148 + 6392);\n    v190 = (unsigned int)v186;\n    v191 = 0LL;\n    while ( v189 < 4 )\n    {\nLABEL_184:\n      if ( ++v191 == v190 )\n        goto LABEL_185;\n    }\n    v192 = *v188;\n    v193 = 0LL;\n    while ( 2 )\n    {\n      if ( v192 )\n      {\n        if ( *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v148 + 6520) + 8 * v193) + v191) )\n          goto LABEL_176;\n        if ( v187[7] )\n        {\nLABEL_181:\n          if ( !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v148 + 6520) + 8 * v193) + v191) )\n          {\n            v197 = *(_QWORD **)(a1 + 1616);\n            v198 = *(_QWORD *)(*(_QWORD *)(*v197 + 8 * v193) + 8 * v191);\n            *(_WORD *)(v198 + 2) /= 2;\n            v199 = *(_QWORD *)(*(_QWORD *)(v197[1] + 8 * v193) + 8 * v191);\n            *(_WORD *)(v199 + 2) /= 2;\n          }\n        }\n      }\n      else\n      {\n        if ( v187[7] )\n          goto LABEL_181;\n        if ( *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v148 + 6520) + 8 * v193) + v191) )\n        {\nLABEL_176:\n          v194 = *(_QWORD **)(a1 + 1616);\n          v195 = *(_QWORD *)(*(_QWORD *)(*v194 + 8 * v193) + 8 * v191);\n          *(_WORD *)(v195 + 2) *= 2;\n          v196 = *(_QWORD *)(*(_QWORD *)(v194[1] + 8 * v193) + 8 * v191);\n          *(_WORD *)(v196 + 2) *= 2;\n        }\n      }\n      if ( ++v193 >= v189 / 4 )\n        goto LABEL_184;\n      continue;\n    }\n  }\nLABEL_185:\n  result = *v188;\n  if ( 4 * (signed int)result + 2 <= 0 )\n    return result;\n  v200 = (_DWORD *)qword_4F9E30;\n  v201 = (signed __int64)(v187 + 18004);\n  v202 = 0LL;\n  while ( 2 )\n  {\n    if ( SLODWORD(qword_4F9BE0[v202 / 2]) <= 0 )\n      goto LABEL_212;\n    v203 = **(_QWORD **)((char *)v225 + (8 * v202 | 8));\n    v204 = v225[v202];\n    v205 = 0LL;\n    while ( 2 )\n    {\n      if ( (v202 & 0x7FFFFFFF) == 2 )\n      {\n        v206 = v200[2];\n      }\n      else if ( v202 & 0x7FFFFFFF )\n      {\n        v206 = v200[3];\n      }\n      else\n      {\n        v206 = v200[1];\n      }\n      v207 = v206 - *(_DWORD *)(v225[v202][v205] + 4LL);\n      v208 = -128;\n      if ( v207 >= -128 )\n      {\n        if ( v207 >= 128 )\n          v207 = 127;\n        v208 = v207;\n      }\n      v209 = *(_DWORD *)(v203 + 4) - *(_DWORD *)(v204[v205] + 4LL);\n      if ( v209 >= 128 )\n      {\n        v209 = 127;\n        goto LABEL_200;\n      }\n      if ( v209 > -129 )\n      {\nLABEL_200:\n        if ( v209 )\n          goto LABEL_201;\n        v213 = 9999;\n      }\n      else\n      {\n        v209 = -128;\nLABEL_201:\n        v210 = v209 / -2;\n        if ( v209 / -2 < 1 )\n          v210 = v209 / 2;\n        v211 = v208 * ((v210 + 0x4000) / v209);\n        v212 = 1023;\n        if ( v211 <= 65503 )\n          v212 = (v211 + 32) >> 6;\n        v213 = -1024;\n        if ( v211 >= -65568 )\n          v213 = v212;\n      }\n      *(_DWORD *)(v201 + 4 * v205++) = v213;\n      if ( v205 < SLODWORD(qword_4F9BE0[v202 / 2]) )\n        continue;\n      break;\n    }\n    result = *v188;\nLABEL_212:\n    v202 += 2LL;\n    v201 += 120LL;\n    if ( (signed __int64)v202 < 4 * (signed int)result + 2 )\n      continue;\n    return result;\n  }\n}\n", 
            "funcStartAddr": "0x43d5f0L", 
            "funcEndAddr": "0x43e9c7L", 
            "funcName": "sub_43D5F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43E9D0(int a1, int a2, int a3, int a4, int a5)\n{\n  int v5; // er9\n  unsigned __int64 v6; // r15\n  _QWORD *v7; // r14\n  _DWORD *v8; // r10\n  int v9; // er11\n  __int64 v10; // r8\n  unsigned __int64 v11; // rbx\n  int *v12; // rax\n  int v13; // ecx\n  int v14; // er12\n  int v15; // ecx\n\n  v5 = a4;\n  if ( a5 < 0 )\n    a5 += 2 << (dword_4FA0E4 + 4);\n  v6 = (unsigned int)dword_4F99F4;\n  if ( dword_4F99F4 )\n  {\n    v7 = qword_4F99E0;\n    v8 = qword_4F9DC0;\n    v9 = a5 / 2;\n    v10 = qword_4F9A08;\n    v11 = 0LL;\n    do\n    {\n      v12 = (int *)v7[v11];\n      if ( v12[7] == a2 )\n      {\n        if ( a1 == 2 )\n        {\n          v13 = v12[2];\n          if ( v13 == 2 )\n            goto LABEL_18;\n        }\n        else\n        {\n          if ( a1 != 1 )\n            goto LABEL_28;\n          v13 = v12[2];\n          if ( v13 == 1 )\n            goto LABEL_18;\n        }\n        if ( v13 == 3 )\n          goto LABEL_18;\n        if ( a3 )\n        {\n          if ( !v10 || (int *)v10 != v12 || *(_DWORD *)(v10 + 20) != v5 )\n          {\nLABEL_18:\n            v14 = v8[287];\n            v15 = *v12;\n            if ( !v14 )\n            {\n              if ( v15 & 1 )\n                *(_QWORD *)(*((_QWORD *)v12 + 6) + 6376LL) = 0LL;\n              if ( v15 & 2 )\n                *(_QWORD *)(*((_QWORD *)v12 + 7) + 6376LL) = 0LL;\n            }\n            if ( v15 == 3 )\n            {\n              if ( !v14 )\n              {\n                *(_QWORD *)(*((_QWORD *)v12 + 6) + 6376LL) = 0LL;\n                *(_QWORD *)(*((_QWORD *)v12 + 7) + 6376LL) = 0LL;\n              }\n              *(_QWORD *)(*((_QWORD *)v12 + 5) + 6376LL) = 0LL;\n            }\n            *(_QWORD *)(v12 + 1) = 0LL;\n            goto LABEL_28;\n          }\n        }\n        else if ( v12[5] != v9 )\n        {\n          goto LABEL_18;\n        }\n      }\nLABEL_28:\n      ++v11;\n    }\n    while ( v11 < v6 );\n  }\n}\n", 
            "funcStartAddr": "0x43e9d0L", 
            "funcEndAddr": "0x43eb25L", 
            "funcName": "sub_43E9D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43EB30(unsigned __int64 a1)\n{\n  unsigned int v1; // er14\n  void **v2; // rbp\n  _QWORD *v3; // rdx\n  __int64 v4; // r8\n  unsigned int v5; // ecx\n  __int64 v6; // rsi\n  signed __int64 v7; // rbp\n\n  v1 = a1;\n  v2 = (void **)*((_QWORD *)qword_4F99D0 + (signed int)a1);\n  switch ( (unsigned __int64)*(unsigned int *)v2 )\n  {\n    case 0uLL:\n      goto LABEL_7;\n    case 1uLL:\n      sub_437D90(v2[6]);\n      v2[6] = 0LL;\n      goto LABEL_7;\n    case 2uLL:\n      sub_437D90(v2[7]);\n      break;\n    case 3uLL:\n      sub_437D90(v2[5]);\n      sub_437D90(v2[6]);\n      sub_437D90(v2[7]);\n      *(_OWORD *)(v2 + 5) = 0LL;\n      break;\n    default:\n      error((__int64)\"invalid frame store type\", 500);\n      return;\n  }\n  v2[7] = 0LL;\nLABEL_7:\n  *(_OWORD *)v2 = 0LL;\n  v3 = qword_4F99D0;\n  v4 = *((_QWORD *)qword_4F99D0 + (signed int)a1);\n  v5 = qword_4F99EC - 1;\n  if ( (signed int)qword_4F99EC - 1 <= (unsigned int)a1 )\n  {\n    v6 = v5;\n  }\n  else\n  {\n    a1 = (unsigned int)a1;\n    v6 = v5;\n    if ( ((_BYTE)qword_4F99EC - 1 - (_BYTE)a1) & 3 )\n    {\n      v7 = -(signed __int64)(((_BYTE)qword_4F99EC - 1 - (_BYTE)a1) & 3);\n      do\n      {\n        v3[a1] = v3[a1 + 1];\n        ++a1;\n        v3 = qword_4F99D0;\n        ++v7;\n      }\n      while ( v7 );\n    }\n    if ( v5 - 1LL - (unsigned __int64)v1 >= 3 )\n    {\n      do\n      {\n        v3[a1] = v3[a1 + 1];\n        *((_QWORD *)qword_4F99D0 + a1 + 1) = *((_QWORD *)qword_4F99D0 + a1 + 2);\n        *((_QWORD *)qword_4F99D0 + a1 + 2) = *((_QWORD *)qword_4F99D0 + a1 + 3);\n        *((_QWORD *)qword_4F99D0 + a1 + 3) = *((_QWORD *)qword_4F99D0 + a1 + 4);\n        a1 += 4LL;\n        v3 = qword_4F99D0;\n      }\n      while ( a1 < v5 );\n    }\n  }\n  v3[v6] = v4;\n  LODWORD(qword_4F99EC) = v5;\n}\n", 
            "funcStartAddr": "0x43eb30L", 
            "funcEndAddr": "0x43ec6fL", 
            "funcName": "sub_43EB30"
        }, 
        {
            "decompiledFuncCode": "void sub_43EC70()\n{\n  signed int v0; // ebx\n  signed int v1; // ebp\n  unsigned __int64 v2; // rdx\n  unsigned int v3; // esi\n  __int64 v4; // rax\n  int *v5; // rax\n  int v6; // ecx\n\n  if ( !(_DWORD)qword_4F99EC )\n    error((__int64)\"Cannot output frame, DPB empty.\", 150);\n  v0 = -1;\n  v1 = 0x7FFFFFFF;\n  v2 = 0LL;\n  v3 = qword_4F99EC;\n  do\n  {\n    v4 = *((_QWORD *)qword_4F99D0 + v2);\n    if ( v1 > *(_DWORD *)(v4 + 36) )\n    {\n      if ( !*(_DWORD *)(v4 + 32) )\n        v1 = *(_DWORD *)(v4 + 36);\n      if ( !*(_DWORD *)(v4 + 32) )\n      {\n        v0 = v2;\n        if ( !*(_DWORD *)(v4 + 32) )\n          v3 = qword_4F99EC;\n      }\n    }\n    ++v2;\n  }\n  while ( v2 < v3 );\n  if ( v0 == -1 )\n    error((__int64)\"no frames for output available\", 150);\n  if ( dword_4FA124 != -1 )\n    sub_453CE0(*((_QWORD *)qword_4F99D0 + v0), dword_4FA124);\n  if ( dword_4F99F8 >= v1 )\n    error((__int64)\"output POC must be in ascending order\", 150);\n  dword_4F99F8 = v1;\n  v5 = (int *)*((_QWORD *)qword_4F99D0 + v0);\n  if ( !v5[1] )\n  {\n    v6 = *v5;\n    if ( (*v5 != 3 || !*(_DWORD *)(*((_QWORD *)v5 + 5) + 6380LL))\n      && (*((_DWORD *)qword_4F9DC0 + 287)\n       || (!(v6 & 1) || !*(_DWORD *)(*((_QWORD *)v5 + 6) + 6380LL))\n       && (!(v6 & 2) || !*(_DWORD *)(*((_QWORD *)v5 + 7) + 6380LL))) )\n    {\n      sub_43EB30((unsigned int)v0);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43ec70L", 
            "funcEndAddr": "0x43edc4L", 
            "funcName": "sub_43EC70"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43EDD0@<rax>(__int64 a1@<rax>, _QWORD *a2@<rcx>, __int64 a3@<rdi>, signed int a4@<esi>, _QWORD *a5@<r8>)\n{\n  _QWORD *v5; // rbx\n  _QWORD *v6; // rbp\n  signed int v7; // er15\n  int v8; // er13\n  void *v9; // rax\n  void *v10; // rax\n  __int64 v11; // rcx\n  _QWORD *v12; // rsi\n  __int64 v14; // [rsp-8h] [rbp-38h]\n\n  v14 = a1;\n  v5 = a5;\n  v6 = a2;\n  v7 = a4;\n  v8 = a4 / 2;\n  v9 = calloc(a4 / 2, 8uLL);\n  *v6 = v9;\n  if ( !v9 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"init_top_bot_planes: imgTopField\", v14);\n    error((__int64)byte_4F8250, 100);\n  }\n  v10 = calloc(v8, 8uLL);\n  *v5 = v10;\n  if ( !v10 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"init_top_bot_planes: imgBotField\", v14);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a4 >= 2 )\n  {\n    if ( (a4 & 0xFFFFFFFE) == 2 )\n    {\n      v11 = 0LL;\n      if ( !(v8 & 1) )\n        return (unsigned int)(8 * v7);\n    }\n    else\n    {\n      v12 = (_QWORD *)(a3 + 24);\n      v11 = 0LL;\n      do\n      {\n        *(_QWORD *)(*v6 + 8 * v11) = *(v12 - 3);\n        *(_QWORD *)(*v5 + 8 * v11) = *(v12 - 2);\n        *(_QWORD *)(*v6 + 8 * v11 + 8) = *(v12 - 1);\n        *(_QWORD *)(*v5 + 8 * v11 + 8) = *v12;\n        v11 += 2LL;\n        v12 += 4;\n      }\n      while ( (unsigned int)v8 - (unsigned __int64)(v8 & 1) != v11 );\n      if ( !(v8 & 1) )\n        return (unsigned int)(8 * v7);\n    }\n    *(_QWORD *)(*v6 + 8 * v11) = *(_QWORD *)(a3 + 16 * v11);\n    *(_QWORD *)(*v5 + 8 * v11) = *(_QWORD *)(a3 + 16 * v11 + 8);\n  }\n  return (unsigned int)(8 * v7);\n}\n", 
            "funcStartAddr": "0x43edd0L", 
            "funcEndAddr": "0x43ef36L", 
            "funcName": "sub_43EDD0"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_43EF40(__int64 a1@<rax>, __int64 a2@<rdi>)\n{\n  snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", a2, a1);\n  error((__int64)byte_4F8250, 100);\n}\n", 
            "funcStartAddr": "0x43ef40L", 
            "funcEndAddr": "0x43ef6aL", 
            "funcName": "sub_43EF40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43EF70(void *a1, void *a2)\n{\n  free(a1);\n  free(a2);\n}\n", 
            "funcStartAddr": "0x43ef70L", 
            "funcEndAddr": "0x43ef82L", 
            "funcName": "sub_43EF70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43EF90(_QWORD *a1, signed int a2, int a3)\n{\n  int v3; // er15\n  void *v4; // rax\n  int v5; // er12\n  void *v6; // rax\n  __int64 v7; // rbx\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  signed __int64 v11; // rsi\n  __int64 v12; // rbx\n\n  v3 = a3;\n  v4 = calloc(a2, 8uLL);\n  *a1 = v4;\n  if ( !v4 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dpel: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  v5 = a2 * v3;\n  v6 = calloc(a2 * v3, 2uLL);\n  *(_QWORD *)*a1 = v6;\n  if ( !v6 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dpel: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a2 >= 2 )\n  {\n    v7 = ((_BYTE)a2 + 3) & 3;\n    if ( (unsigned __int64)(unsigned int)a2 - 2 >= 3 )\n    {\n      v9 = (unsigned int)a2 - 1LL - v7;\n      v10 = 0LL;\n      v11 = 2LL * v3;\n      do\n      {\n        *(_QWORD *)(*a1 + 8 * v10 + 8) = v11 + *(_QWORD *)(*a1 + 8 * v10);\n        *(_QWORD *)(*a1 + 8 * v10 + 16) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 8);\n        *(_QWORD *)(*a1 + 8 * v10 + 24) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 16);\n        *(_QWORD *)(*a1 + 8 * v10 + 32) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 24);\n        v10 += 4LL;\n      }\n      while ( v9 != v10 );\n      v8 = v10 + 1;\n      if ( !(_DWORD)v7 )\n        return (unsigned int)(2 * v5);\n    }\n    else\n    {\n      v8 = 1LL;\n      if ( !(((_BYTE)a2 + 3) & 3) )\n        return (unsigned int)(2 * v5);\n    }\n    v12 = -v7;\n    do\n    {\n      *(_QWORD *)(*a1 + 8 * v8) = 2LL * v3 + *(_QWORD *)(*a1 + 8 * v8 - 8);\n      ++v8;\n      ++v12;\n    }\n    while ( v12 );\n  }\n  return (unsigned int)(2 * v5);\n}\n", 
            "funcStartAddr": "0x43ef90L", 
            "funcEndAddr": "0x43f0f8L", 
            "funcName": "sub_43EF90"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F100@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, _QWORD *a4@<rdi>, unsigned int a5@<esi>)\n{\n  int v5; // er15\n  signed int v6; // er12\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v11; // [rsp-8h] [rbp-38h]\n\n  v11 = a1;\n  v5 = a3;\n  v6 = a2;\n  v7 = calloc((signed int)a5, 8uLL);\n  *a4 = v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dpel: array3D\", v11);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( (signed int)a5 > 0 )\n  {\n    v8 = a5;\n    v9 = 0LL;\n    do\n    {\n      sub_43EF90((_QWORD *)(v9 + *a4), v6, v5);\n      v9 += 8LL;\n      --v8;\n    }\n    while ( v8 );\n  }\n  return 2 * v5 * v6 * a5;\n}\n", 
            "funcStartAddr": "0x43f100L", 
            "funcEndAddr": "0x43f1a9L", 
            "funcName": "sub_43F100"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43F1B0(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    error((__int64)\"free_mem2Dpel: trying to free unused memory\", 100);\n  v2 = *(void **)ptr;\n  if ( !*v1 )\n    error((__int64)\"free_mem2Dpel: trying to free unused memory\", 100);\n  free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x43f1b0L", 
            "funcEndAddr": "0x43f1f0L", 
            "funcName": "sub_43F1B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43F1F0(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r12\n  void ***v3; // rbx\n  void **v4; // r15\n\n  if ( !ptr )\n    error((__int64)\"free_mem3Dpel: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = (void ***)ptr;\n    do\n    {\n      v4 = *v3;\n      if ( !*v3 )\n        error((__int64)\"free_mem2Dpel: trying to free unused memory\", 100);\n      if ( !*v4 )\n        error((__int64)\"free_mem2Dpel: trying to free unused memory\", 100);\n      free(*v4);\n      free(v4);\n      ++v3;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43f1f0L", 
            "funcEndAddr": "0x43f29eL", 
            "funcName": "sub_43F1F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F2A0@<rax>(__int64 a1@<rax>, int a2@<edx>, _QWORD *a3@<rdi>, signed int a4@<esi>)\n{\n  int v4; // er15\n  void *v5; // rax\n  void *v6; // rax\n  __int64 v7; // rbx\n  signed __int64 v8; // rcx\n  __int64 v9; // rcx\n  __int64 v10; // rbx\n  __int64 v12; // [rsp-8h] [rbp-28h]\n\n  v12 = a1;\n  v4 = a2;\n  v5 = calloc(a4, 8uLL);\n  *a3 = v5;\n  if ( !v5 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2D: array2D\", v12);\n    error((__int64)byte_4F8250, 100);\n  }\n  v6 = calloc(a4 * v4, 1uLL);\n  *(_QWORD *)*a3 = v6;\n  if ( !v6 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2D: array2D\", v12);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a4 >= 2 )\n  {\n    v7 = ((_BYTE)a4 + 3) & 3;\n    if ( (unsigned __int64)(unsigned int)a4 - 2 >= 3 )\n    {\n      v9 = 0LL;\n      do\n      {\n        *(_QWORD *)(*a3 + 8 * v9 + 8) = v4 + *(_QWORD *)(*a3 + 8 * v9);\n        *(_QWORD *)(*a3 + 8 * v9 + 16) = v4 + *(_QWORD *)(*a3 + 8 * v9 + 8);\n        *(_QWORD *)(*a3 + 8 * v9 + 24) = v4 + *(_QWORD *)(*a3 + 8 * v9 + 16);\n        *(_QWORD *)(*a3 + 8 * v9 + 32) = v4 + *(_QWORD *)(*a3 + 8 * v9 + 24);\n        v9 += 4LL;\n      }\n      while ( (unsigned int)a4 - 1LL - v7 != v9 );\n      v8 = v9 + 1;\n      if ( !(((_BYTE)a4 + 3) & 3) )\n        return (unsigned int)(a4 * v4);\n    }\n    else\n    {\n      v8 = 1LL;\n      if ( !(((_BYTE)a4 + 3) & 3) )\n        return (unsigned int)(a4 * v4);\n    }\n    v10 = -v7;\n    do\n    {\n      *(_QWORD *)(*a3 + 8 * v8) = v4 + *(_QWORD *)(*a3 + 8 * v8 - 8);\n      ++v8;\n      ++v10;\n    }\n    while ( v10 );\n  }\n  return (unsigned int)(a4 * v4);\n}\n", 
            "funcStartAddr": "0x43f2a0L", 
            "funcEndAddr": "0x43f406L", 
            "funcName": "sub_43F2A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43F410(_QWORD *a1, signed int a2, int a3)\n{\n  int v3; // er15\n  void *v4; // rax\n  int v5; // er12\n  void *v6; // rax\n  __int64 v7; // rbx\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  signed __int64 v11; // rsi\n  __int64 v12; // rbx\n\n  v3 = a3;\n  v4 = calloc(a2, 8uLL);\n  *a1 = v4;\n  if ( !v4 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dint: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  v5 = a2 * v3;\n  v6 = calloc(a2 * v3, 4uLL);\n  *(_QWORD *)*a1 = v6;\n  if ( !v6 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dint: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a2 >= 2 )\n  {\n    v7 = ((_BYTE)a2 + 3) & 3;\n    if ( (unsigned __int64)(unsigned int)a2 - 2 >= 3 )\n    {\n      v9 = (unsigned int)a2 - 1LL - v7;\n      v10 = 0LL;\n      v11 = 4LL * v3;\n      do\n      {\n        *(_QWORD *)(*a1 + 8 * v10 + 8) = v11 + *(_QWORD *)(*a1 + 8 * v10);\n        *(_QWORD *)(*a1 + 8 * v10 + 16) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 8);\n        *(_QWORD *)(*a1 + 8 * v10 + 24) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 16);\n        *(_QWORD *)(*a1 + 8 * v10 + 32) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 24);\n        v10 += 4LL;\n      }\n      while ( v9 != v10 );\n      v8 = v10 + 1;\n      if ( !(_DWORD)v7 )\n        return (unsigned int)(4 * v5);\n    }\n    else\n    {\n      v8 = 1LL;\n      if ( !(((_BYTE)a2 + 3) & 3) )\n        return (unsigned int)(4 * v5);\n    }\n    v12 = -v7;\n    do\n    {\n      *(_QWORD *)(*a1 + 8 * v8) = 4LL * v3 + *(_QWORD *)(*a1 + 8 * v8 - 8);\n      ++v8;\n      ++v12;\n    }\n    while ( v12 );\n  }\n  return (unsigned int)(4 * v5);\n}\n", 
            "funcStartAddr": "0x43f410L", 
            "funcEndAddr": "0x43f579L", 
            "funcName": "sub_43F410"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43F580(_QWORD *a1, signed int a2, int a3)\n{\n  int v3; // er15\n  void *v4; // rax\n  int v5; // er12\n  void *v6; // rax\n  __int64 v7; // rbx\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  signed __int64 v11; // rsi\n  __int64 v12; // rbx\n\n  v3 = a3;\n  v4 = calloc(a2, 8uLL);\n  *a1 = v4;\n  if ( !v4 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dint64: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  v5 = a2 * v3;\n  v6 = calloc(a2 * v3, 8uLL);\n  *(_QWORD *)*a1 = v6;\n  if ( !v6 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dint64: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a2 >= 2 )\n  {\n    v7 = ((_BYTE)a2 + 3) & 3;\n    if ( (unsigned __int64)(unsigned int)a2 - 2 >= 3 )\n    {\n      v9 = (unsigned int)a2 - 1LL - v7;\n      v10 = 0LL;\n      v11 = 8LL * v3;\n      do\n      {\n        *(_QWORD *)(*a1 + 8 * v10 + 8) = v11 + *(_QWORD *)(*a1 + 8 * v10);\n        *(_QWORD *)(*a1 + 8 * v10 + 16) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 8);\n        *(_QWORD *)(*a1 + 8 * v10 + 24) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 16);\n        *(_QWORD *)(*a1 + 8 * v10 + 32) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 24);\n        v10 += 4LL;\n      }\n      while ( v9 != v10 );\n      v8 = v10 + 1;\n      if ( !(_DWORD)v7 )\n        return (unsigned int)(8 * v5);\n    }\n    else\n    {\n      v8 = 1LL;\n      if ( !(((_BYTE)a2 + 3) & 3) )\n        return (unsigned int)(8 * v5);\n    }\n    v12 = -v7;\n    do\n    {\n      *(_QWORD *)(*a1 + 8 * v8) = 8LL * v3 + *(_QWORD *)(*a1 + 8 * v8 - 8);\n      ++v8;\n      ++v12;\n    }\n    while ( v12 );\n  }\n  return (unsigned int)(8 * v5);\n}\n", 
            "funcStartAddr": "0x43f580L", 
            "funcEndAddr": "0x43f6e9L", 
            "funcName": "sub_43F580"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F6F0@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, __int64 *a4@<rdi>, unsigned int a5@<esi>)\n{\n  int v5; // er15\n  signed int v6; // er13\n  __int64 v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v11; // [rsp-8h] [rbp-38h]\n\n  v11 = a1;\n  v5 = a3;\n  v6 = a2;\n  v7 = (__int64)calloc((signed int)a5, 8uLL);\n  *a4 = v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3D: array3D\", v11);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( (signed int)a5 > 0 )\n  {\n    v8 = a5;\n    v9 = 0LL;\n    do\n    {\n      v7 = sub_43F2A0(v7, v5, (_QWORD *)(v9 + *a4), v6);\n      v9 += 8LL;\n      --v8;\n    }\n    while ( v8 );\n  }\n  return v5 * a5 * v6;\n}\n", 
            "funcStartAddr": "0x43f6f0L", 
            "funcEndAddr": "0x43f796L", 
            "funcName": "sub_43F6F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F7A0@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, _QWORD *a4@<rdi>, unsigned int a5@<esi>)\n{\n  int v5; // er15\n  signed int v6; // er12\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v11; // [rsp-8h] [rbp-38h]\n\n  v11 = a1;\n  v5 = a3;\n  v6 = a2;\n  v7 = calloc((signed int)a5, 8uLL);\n  *a4 = v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dint: array3D\", v11);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( (signed int)a5 > 0 )\n  {\n    v8 = a5;\n    v9 = 0LL;\n    do\n    {\n      sub_43F410((_QWORD *)(v9 + *a4), v6, v5);\n      v9 += 8LL;\n      --v8;\n    }\n    while ( v8 );\n  }\n  return 4 * v5 * v6 * a5;\n}\n", 
            "funcStartAddr": "0x43f7a0L", 
            "funcEndAddr": "0x43f84aL", 
            "funcName": "sub_43F7A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F850@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, _QWORD *a4@<rdi>, unsigned int a5@<esi>)\n{\n  int v5; // er15\n  signed int v6; // er12\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v11; // [rsp-8h] [rbp-38h]\n\n  v11 = a1;\n  v5 = a3;\n  v6 = a2;\n  v7 = calloc((signed int)a5, 8uLL);\n  *a4 = v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dint64: array3D\", v11);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( (signed int)a5 > 0 )\n  {\n    v8 = a5;\n    v9 = 0LL;\n    do\n    {\n      sub_43F580((_QWORD *)(v9 + *a4), v6, v5);\n      v9 += 8LL;\n      --v8;\n    }\n    while ( v8 );\n  }\n  return 8 * v5 * v6 * a5;\n}\n", 
            "funcStartAddr": "0x43f850L", 
            "funcEndAddr": "0x43f8faL", 
            "funcName": "sub_43F850"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43F900(__int64 *a1, int a2, int a3, signed int a4, int a5)\n{\n  int v5; // ebx\n  signed int v6; // ebp\n  void *v7; // rax\n  __int64 v8; // r12\n  __int64 v9; // r15\n  void *v10; // rax\n  __int64 v11; // r14\n  __int64 v12; // r13\n  __int64 v14; // [rsp+0h] [rbp-58h]\n\n  v5 = a5;\n  v6 = a4;\n  LODWORD(v14) = a3;\n  v7 = calloc(a2, 8uLL);\n  *a1 = (__int64)v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem4Dint: array4D\", v14);\n    error((__int64)byte_4F8250, 100);\n  }\n  HIDWORD(v14) = a2;\n  if ( a2 > 0 )\n  {\n    v8 = 0LL;\n    do\n    {\n      v9 = *a1;\n      v10 = calloc((signed int)v14, 8uLL);\n      *(_QWORD *)(v9 + 8 * v8) = v10;\n      if ( !v10 )\n      {\n        snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dint: array3D\", v14);\n        error((__int64)byte_4F8250, 100);\n      }\n      if ( (signed int)v14 > 0 )\n      {\n        v11 = 0LL;\n        v12 = (unsigned int)v14;\n        do\n        {\n          sub_43F410((_QWORD *)(v11 + *(_QWORD *)(v9 + 8 * v8)), v6, v5);\n          v11 += 8LL;\n          --v12;\n        }\n        while ( v12 );\n      }\n      ++v8;\n    }\n    while ( v8 != a2 );\n  }\n  return (unsigned int)(4 * v5 * v6 * v14 * a2);\n}\n", 
            "funcStartAddr": "0x43f900L", 
            "funcEndAddr": "0x43fa49L", 
            "funcName": "sub_43F900"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FA50(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    error((__int64)\"free_mem2D: trying to free unused memory\", 100);\n  v2 = *(void **)ptr;\n  if ( !*v1 )\n    error((__int64)\"free_mem2D: trying to free unused memory\", 100);\n  free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x43fa50L", 
            "funcEndAddr": "0x43fa90L", 
            "funcName": "sub_43FA50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FA90(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    error((__int64)\"free_mem2Dint: trying to free unused memory\", 100);\n  v2 = *(void **)ptr;\n  if ( !*v1 )\n    error((__int64)\"free_mem2Dint: trying to free unused memory\", 100);\n  free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x43fa90L", 
            "funcEndAddr": "0x43fad0L", 
            "funcName": "sub_43FA90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FAD0(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    error((__int64)\"free_mem2Dint64: trying to free unused memory\", 100);\n  v2 = *(void **)ptr;\n  if ( !*v1 )\n    error((__int64)\"free_mem2Dint64: trying to free unused memory\", 100);\n  free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x43fad0L", 
            "funcEndAddr": "0x43fb10L", 
            "funcName": "sub_43FAD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FB10(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r12\n  void ***v3; // rbx\n  void **v4; // r15\n\n  if ( !ptr )\n    error((__int64)\"free_mem3D: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = (void ***)ptr;\n    do\n    {\n      v4 = *v3;\n      if ( !*v3 )\n        error((__int64)\"free_mem2D: trying to free unused memory\", 100);\n      if ( !*v4 )\n        error((__int64)\"free_mem2D: trying to free unused memory\", 100);\n      free(*v4);\n      free(v4);\n      ++v3;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43fb10L", 
            "funcEndAddr": "0x43fbbeL", 
            "funcName": "sub_43FB10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FBC0(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r12\n  void ***v3; // rbx\n  void **v4; // r15\n\n  if ( !ptr )\n    error((__int64)\"free_mem3Dint: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = (void ***)ptr;\n    do\n    {\n      v4 = *v3;\n      if ( !*v3 )\n        error((__int64)\"free_mem2Dint: trying to free unused memory\", 100);\n      if ( !*v4 )\n        error((__int64)\"free_mem2Dint: trying to free unused memory\", 100);\n      free(*v4);\n      free(v4);\n      ++v3;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43fbc0L", 
            "funcEndAddr": "0x43fc6eL", 
            "funcName": "sub_43FBC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FC70(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r12\n  void ***v3; // rbx\n  void **v4; // r15\n\n  if ( !ptr )\n    error((__int64)\"free_mem3Dint64: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = (void ***)ptr;\n    do\n    {\n      v4 = *v3;\n      if ( !*v3 )\n        error((__int64)\"free_mem2Dint64: trying to free unused memory\", 100);\n      if ( !*v4 )\n        error((__int64)\"free_mem2Dint64: trying to free unused memory\", 100);\n      free(*v4);\n      free(v4);\n      ++v3;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43fc70L", 
            "funcEndAddr": "0x43fd1eL", 
            "funcName": "sub_43FC70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43FD20(void *ptr, unsigned int a2, unsigned int a3)\n{\n  unsigned int v3; // er15\n  __int64 v4; // rbx\n  void **v5; // rbp\n\n  v3 = a3;\n  if ( !ptr )\n    error((__int64)\"free_mem4Dint: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v4 = a2;\n    v5 = (void **)ptr;\n    do\n    {\n      sub_43FBC0(*v5, v3);\n      ++v5;\n      --v4;\n    }\n    while ( v4 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43fd20L", 
            "funcEndAddr": "0x43fd81L", 
            "funcName": "sub_43FD20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43FD90(_QWORD *a1, signed int a2, int a3)\n{\n  int v3; // er15\n  void *v4; // rax\n  int v5; // er12\n  void *v6; // rax\n  __int64 v7; // rbx\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rdx\n  __int64 v10; // rcx\n  signed __int64 v11; // rsi\n  __int64 v12; // rbx\n\n  v3 = a3;\n  v4 = calloc(a2, 8uLL);\n  *a1 = v4;\n  if ( !v4 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dshort: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  v5 = a2 * v3;\n  v6 = calloc(a2 * v3, 2uLL);\n  *(_QWORD *)*a1 = v6;\n  if ( !v6 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem2Dshort: array2D\");\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( a2 >= 2 )\n  {\n    v7 = ((_BYTE)a2 + 3) & 3;\n    if ( (unsigned __int64)(unsigned int)a2 - 2 >= 3 )\n    {\n      v9 = (unsigned int)a2 - 1LL - v7;\n      v10 = 0LL;\n      v11 = 2LL * v3;\n      do\n      {\n        *(_QWORD *)(*a1 + 8 * v10 + 8) = v11 + *(_QWORD *)(*a1 + 8 * v10);\n        *(_QWORD *)(*a1 + 8 * v10 + 16) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 8);\n        *(_QWORD *)(*a1 + 8 * v10 + 24) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 16);\n        *(_QWORD *)(*a1 + 8 * v10 + 32) = v11 + *(_QWORD *)(*a1 + 8 * v10 + 24);\n        v10 += 4LL;\n      }\n      while ( v9 != v10 );\n      v8 = v10 + 1;\n      if ( !(_DWORD)v7 )\n        return (unsigned int)(2 * v5);\n    }\n    else\n    {\n      v8 = 1LL;\n      if ( !(((_BYTE)a2 + 3) & 3) )\n        return (unsigned int)(2 * v5);\n    }\n    v12 = -v7;\n    do\n    {\n      *(_QWORD *)(*a1 + 8 * v8) = 2LL * v3 + *(_QWORD *)(*a1 + 8 * v8 - 8);\n      ++v8;\n      ++v12;\n    }\n    while ( v12 );\n  }\n  return (unsigned int)(2 * v5);\n}\n", 
            "funcStartAddr": "0x43fd90L", 
            "funcEndAddr": "0x43fef8L", 
            "funcName": "sub_43FD90"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43FF00@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, _QWORD *a4@<rdi>, unsigned int a5@<esi>)\n{\n  int v5; // er15\n  signed int v6; // er12\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v11; // [rsp-8h] [rbp-38h]\n\n  v11 = a1;\n  v5 = a3;\n  v6 = a2;\n  v7 = calloc((signed int)a5, 8uLL);\n  *a4 = v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dshort: array3D\", v11);\n    error((__int64)byte_4F8250, 100);\n  }\n  if ( (signed int)a5 > 0 )\n  {\n    v8 = a5;\n    v9 = 0LL;\n    do\n    {\n      sub_43FD90((_QWORD *)(v9 + *a4), v6, v5);\n      v9 += 8LL;\n      --v8;\n    }\n    while ( v8 );\n  }\n  return 2 * v5 * v6 * a5;\n}\n", 
            "funcStartAddr": "0x43ff00L", 
            "funcEndAddr": "0x43ffa9L", 
            "funcName": "sub_43FF00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43FFB0(__int64 *a1, int a2, int a3, signed int a4, int a5)\n{\n  int v5; // ebx\n  signed int v6; // ebp\n  void *v7; // rax\n  __int64 v8; // r12\n  __int64 v9; // r15\n  void *v10; // rax\n  __int64 v11; // r14\n  __int64 v12; // r13\n  __int64 v14; // [rsp+0h] [rbp-58h]\n\n  v5 = a5;\n  v6 = a4;\n  LODWORD(v14) = a3;\n  v7 = calloc(a2, 8uLL);\n  *a1 = (__int64)v7;\n  if ( !v7 )\n  {\n    snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem4Dshort: array4D\", v14);\n    error((__int64)byte_4F8250, 100);\n  }\n  HIDWORD(v14) = a2;\n  if ( a2 > 0 )\n  {\n    v8 = 0LL;\n    do\n    {\n      v9 = *a1;\n      v10 = calloc((signed int)v14, 8uLL);\n      *(_QWORD *)(v9 + 8 * v8) = v10;\n      if ( !v10 )\n      {\n        snprintf(byte_4F8250, 0x12CuLL, \"Could not allocate memory: %s\", \"get_mem3Dshort: array3D\", v14);\n        error((__int64)byte_4F8250, 100);\n      }\n      if ( (signed int)v14 > 0 )\n      {\n        v11 = 0LL;\n        v12 = (unsigned int)v14;\n        do\n        {\n          sub_43FD90((_QWORD *)(v11 + *(_QWORD *)(v9 + 8 * v8)), v6, v5);\n          v11 += 8LL;\n          --v12;\n        }\n        while ( v12 );\n      }\n      ++v8;\n    }\n    while ( v8 != a2 );\n  }\n  return (unsigned int)(2 * v5 * v6 * v14 * a2);\n}\n", 
            "funcStartAddr": "0x43ffb0L", 
            "funcEndAddr": "0x4400f8L", 
            "funcName": "sub_43FFB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_440100(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    error((__int64)\"free_mem2Dshort: trying to free unused memory\", 100);\n  v2 = *(void **)ptr;\n  if ( !*v1 )\n    error((__int64)\"free_mem2Dshort: trying to free unused memory\", 100);\n  free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x440100L", 
            "funcEndAddr": "0x440140L", 
            "funcName": "sub_440100"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_440140(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r12\n  void ***v3; // rbx\n  void **v4; // r15\n\n  if ( !ptr )\n    error((__int64)\"free_mem3Dshort: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = (void ***)ptr;\n    do\n    {\n      v4 = *v3;\n      if ( !*v3 )\n        error((__int64)\"free_mem2Dshort: trying to free unused memory\", 100);\n      if ( !*v4 )\n        error((__int64)\"free_mem2Dshort: trying to free unused memory\", 100);\n      free(*v4);\n      free(v4);\n      ++v3;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x440140L", 
            "funcEndAddr": "0x4401eeL", 
            "funcName": "sub_440140"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4401F0(void *ptr, unsigned int a2, unsigned int a3)\n{\n  unsigned int v3; // er15\n  __int64 v4; // rbx\n  void **v5; // rbp\n\n  v3 = a3;\n  if ( !ptr )\n    error((__int64)\"free_mem4Dshort: trying to free unused memory\", 100);\n  if ( (signed int)a2 > 0 )\n  {\n    v4 = a2;\n    v5 = (void **)ptr;\n    do\n    {\n      sub_440140(*v5, v3);\n      ++v5;\n      --v4;\n    }\n    while ( v4 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x4401f0L", 
            "funcEndAddr": "0x440251L", 
            "funcName": "sub_4401F0"
        }, 
        {
            "decompiledFuncCode": "signed int *sub_440260()\n{\n  int v0; // er15\n  _QWORD *v1; // r14\n  void *v2; // rax\n  size_t v3; // r12\n  char *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // r14\n  void *v7; // rax\n  signed __int64 v8; // r13\n  void *v9; // rax\n  signed __int64 v10; // rbx\n  void *v11; // rax\n  bool v12; // sf\n  unsigned __int8 v13; // of\n  _DWORD *v14; // rbx\n  void *v15; // rax\n  __int64 v16; // r14\n  void *v17; // rax\n  signed __int64 v18; // r13\n  void *v19; // rax\n  signed __int64 v20; // rbx\n  void *v21; // rax\n  __int64 v22; // rax\n  void *v23; // rax\n  void *v24; // rax\n  void *v25; // rax\n  void *v26; // rax\n  void *v27; // rax\n  char *v28; // rbx\n  void *v29; // rax\n  signed int *v30; // rbx\n  void *v31; // rax\n  void *v32; // rax\n  void *v33; // rax\n  void *v34; // rax\n  signed int *result; // rax\n  _QWORD *v36; // rcx\n  __int64 v37; // rdx\n  signed __int64 v38; // rsi\n  signed __int64 v39; // rdi\n  __int64 v40; // rcx\n  signed __int64 v41; // rdx\n  _QWORD *v42; // rdx\n  int v43; // ecx\n  _DWORD *v44; // rsi\n  signed __int64 v45; // rdi\n  signed __int64 v46; // rbx\n  _DWORD *v47; // rdx\n  signed __int64 v48; // rsi\n\n  v0 = *((_DWORD *)dest + 8);\n  v1 = malloc(0x10uLL);\n  qword_49FE10 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n  v2 = malloc(8LL * *((signed int *)off_49F6D0 + 9) + 8);\n  *v1 = v2;\n  if ( !v2 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n  v3 = 4LL * (unsigned int)((2 * v0 + 1) * (2 * v0 + 1));\n  v4 = (char *)off_49F6D0;\n  LODWORD(v5) = *((_DWORD *)off_49F6D0 + 9);\n  if ( (signed int)v5 >= 0 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = malloc(0x40uLL);\n      *(_QWORD *)(*(_QWORD *)qword_49FE10 + 8 * v6) = v7;\n      if ( !v7 )\n        sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n      v8 = 1LL;\n      do\n      {\n        v9 = malloc(0x80uLL);\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)qword_49FE10 + 8 * v6) + 8 * v8) = v9;\n        if ( !v9 )\n          sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n        v10 = -128LL;\n        do\n        {\n          v11 = malloc(v3);\n          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)qword_49FE10 + 8 * v6) + 8 * v8) + v10 + 128) = v11;\n          if ( !v11 )\n            sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n          v10 += 8LL;\n        }\n        while ( v10 );\n        ++v8;\n      }\n      while ( v8 != 8 );\n      v4 = (char *)off_49F6D0;\n      v5 = *((signed int *)off_49F6D0 + 9);\n      v13 = __OFSUB__(v6, v5);\n      v12 = v6++ - v5 < 0;\n    }\n    while ( v12 ^ v13 );\n  }\n  v14 = v4 + 36;\n  v15 = malloc(8LL * (signed int)v5 + 8);\n  *((_QWORD *)qword_49FE10 + 1) = v15;\n  if ( !v15 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n  if ( *v14 >= 0 )\n  {\n    v16 = 0LL;\n    do\n    {\n      v17 = malloc(0x40uLL);\n      *(_QWORD *)(*((_QWORD *)qword_49FE10 + 1) + 8 * v16) = v17;\n      if ( !v17 )\n        sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n      v18 = 1LL;\n      do\n      {\n        v19 = malloc(0x80uLL);\n        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + 1) + 8 * v16) + 8 * v18) = v19;\n        if ( !v19 )\n          sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n        v20 = -128LL;\n        do\n        {\n          v21 = malloc(v3);\n          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + 1) + 8 * v16) + 8 * v18) + v20 + 128) = v21;\n          if ( !v21 )\n            sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: BlockSAD\");\n          v20 += 8LL;\n        }\n        while ( v20 );\n        ++v18;\n      }\n      while ( v18 != 8 );\n      v22 = *((signed int *)off_49F6D0 + 9);\n      v13 = __OFSUB__(v16, v22);\n      v12 = v16++ - v22 < 0;\n    }\n    while ( v12 ^ v13 );\n  }\n  qword_49FE18 = malloc(0x10uLL);\n  if ( !qword_49FE18 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_setup_done\");\n  qword_49FE20 = malloc(0x10uLL);\n  if ( !qword_49FE20 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_x\");\n  qword_49FE28 = malloc(0x10uLL);\n  if ( !qword_49FE28 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_y\");\n  qword_49FE30 = malloc(0x10uLL);\n  if ( !qword_49FE30 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: pos_00\");\n  qword_49FE38 = malloc(0x10uLL);\n  if ( !qword_49FE38 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: max_search_range\");\n  v23 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *(_QWORD *)qword_49FE18 = v23;\n  if ( !v23 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_setup_done\");\n  v24 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *(_QWORD *)qword_49FE20 = v24;\n  if ( !v24 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_x\");\n  v25 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *(_QWORD *)qword_49FE28 = v25;\n  if ( !v25 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_y\");\n  v26 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *(_QWORD *)qword_49FE30 = v26;\n  if ( !v26 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: pos_00\");\n  v27 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *(_QWORD *)qword_49FE38 = v27;\n  if ( !v27 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: max_search_range\");\n  v28 = (char *)off_49F6D0;\n  v29 = malloc(4LL * *((signed int *)off_49F6D0 + 9) + 4);\n  *((_QWORD *)qword_49FE18 + 1) = v29;\n  if ( !v29 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_setup_done\");\n  v30 = (signed int *)(v28 + 36);\n  v31 = malloc(4LL * *v30 + 4);\n  *((_QWORD *)qword_49FE20 + 1) = v31;\n  if ( !v31 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_x\");\n  v32 = malloc(4LL * *v30 + 4);\n  *((_QWORD *)qword_49FE28 + 1) = v32;\n  if ( !v32 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: search_center_y\");\n  v33 = malloc(4LL * *v30 + 4);\n  *((_QWORD *)qword_49FE30 + 1) = v33;\n  if ( !v33 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: pos_00\");\n  v34 = malloc(4LL * *v30 + 4);\n  *((_QWORD *)qword_49FE38 + 1) = v34;\n  if ( !v34 )\n    sub_43EF40(0LL, (__int64)\"InitializeFastFullIntegerSearch: max_search_range\");\n  if ( *((_DWORD *)dest + 609) == 2 )\n  {\n    result = (signed int *)off_49F6D0;\n    if ( *((_DWORD *)off_49F6D0 + 9) >= 0 )\n    {\n      v36 = qword_49FE38;\n      v37 = *(_QWORD *)qword_49FE38;\n      v38 = -1LL;\n      do\n      {\n        *(_DWORD *)(v37 + 4 * v38 + 4) = v0;\n        v39 = result[9];\n        ++v38;\n      }\n      while ( v38 < v39 );\n      if ( (signed int)v39 >= 0 )\n      {\n        v40 = v36[1];\n        v41 = -1LL;\n        do\n          *(_DWORD *)(v40 + 4 * v41++ + 4) = v0;\n        while ( v41 < result[9] );\n      }\n    }\n  }\n  else\n  {\n    v42 = qword_49FE38;\n    result = (signed int *)off_49F6D0;\n    v43 = v0 / 2;\n    v44 = *(_DWORD **)qword_49FE38;\n    v44[*((signed int *)off_49F6D0 + 9)] = v0;\n    *v44 = v0;\n    LODWORD(v45) = result[9];\n    if ( (signed int)v45 >= 2 )\n    {\n      v46 = 1LL;\n      do\n      {\n        v44[v46++] = v43;\n        v45 = result[9];\n      }\n      while ( v46 < v45 );\n    }\n    v47 = (_DWORD *)v42[1];\n    v47[(signed int)v45] = v0;\n    *v47 = v0;\n    if ( result[9] >= 2 )\n    {\n      v48 = 1LL;\n      do\n        v47[v48++] = v43;\n      while ( v48 < result[9] );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x440260L", 
            "funcEndAddr": "0x44089aL", 
            "funcName": "sub_440260"
        }, 
        {
            "decompiledFuncCode": "void sub_4408A0()\n{\n  __int64 v0; // r14\n  __int64 v1; // r15\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  bool v4; // sf\n  unsigned __int8 v5; // of\n\n  v0 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)off_49F6D0 + 9) >= 0 )\n    {\n      v1 = 0LL;\n      do\n      {\n        v2 = 0LL;\n        do\n        {\n          free(**(void ***)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 8LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 16LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 24LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 32LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 40LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 48LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 56LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 64LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 72LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 80LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 88LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 96LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 104LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 112LL));\n          free(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8) + 120LL));\n          free(*(void **)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1) + v2 + 8));\n          v2 += 8LL;\n        }\n        while ( v2 != 56 );\n        free(*(void **)(*((_QWORD *)qword_49FE10 + v0) + 8 * v1));\n        v3 = *((signed int *)off_49F6D0 + 9);\n        v5 = __OFSUB__(v1, v3);\n        v4 = v1++ - v3 < 0;\n      }\n      while ( v4 ^ v5 );\n    }\n    free(*((void **)qword_49FE10 + v0++));\n  }\n  while ( v0 != 2 );\n  free(qword_49FE10);\n  free(*(void **)qword_49FE18);\n  free(*(void **)qword_49FE20);\n  free(*(void **)qword_49FE28);\n  free(*(void **)qword_49FE30);\n  free(*(void **)qword_49FE38);\n  free(*((void **)qword_49FE18 + 1));\n  free(*((void **)qword_49FE20 + 1));\n  free(*((void **)qword_49FE28 + 1));\n  free(*((void **)qword_49FE30 + 1));\n  free(*((void **)qword_49FE38 + 1));\n  free(qword_49FE18);\n  free(qword_49FE20);\n  free(qword_49FE28);\n  free(qword_49FE30);\n  free(qword_49FE38);\n}\n", 
            "funcStartAddr": "0x4408a0L", 
            "funcEndAddr": "0x440c08L", 
            "funcName": "sub_4408A0"
        }, 
        {
            "decompiledFuncCode": "signed int *sub_440C10()\n{\n  signed int *result; // rax\n  _QWORD *v1; // rcx\n  __int64 v2; // rdx\n  signed __int64 v3; // rsi\n  signed __int64 v4; // rdi\n  __int64 v5; // rcx\n  signed __int64 v6; // rdx\n\n  result = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 9) >= 0 )\n  {\n    v1 = qword_49FE18;\n    v2 = *(_QWORD *)qword_49FE18;\n    v3 = -1LL;\n    do\n    {\n      *(_DWORD *)(v2 + 4 * v3 + 4) = 0;\n      v4 = result[9];\n      ++v3;\n    }\n    while ( v3 < v4 );\n    if ( (signed int)v4 >= 0 )\n    {\n      v5 = v1[1];\n      v6 = -1LL;\n      do\n        *(_DWORD *)(v5 + 4 * v6++ + 4) = 0;\n      while ( v6 < result[9] );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x440c10L", 
            "funcEndAddr": "0x440c76L", 
            "funcName": "sub_440C10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_440C80(int a1, int a2, unsigned int a3)\n{\n  __int64 v3; // rax\n  _QWORD *v4; // rcx\n  unsigned __int64 *v5; // rax\n  unsigned __int64 v6; // r8\n  unsigned __int64 v7; // r15\n  unsigned __int64 v8; // r12\n  __int64 v9; // r13\n  __int64 v10; // rax\n  unsigned __int64 v11; // rcx\n  __int64 v12; // rdx\n  __int64 v13; // rcx\n  signed __int64 v14; // rdx\n  signed __int64 v15; // rdi\n  signed __int64 v16; // rax\n  __int64 v17; // rbp\n  unsigned __int64 v18; // rax\n  bool v19; // si\n  bool v20; // bl\n  bool v21; // cl\n  bool v22; // dl\n  unsigned __int64 v23; // rdx\n  __int64 v24; // rcx\n  signed __int64 v25; // rdi\n  __int64 v26; // rdx\n  __m128i v27; // xmm0\n  __m128i v28; // xmm0\n  __m128i v29; // xmm0\n  unsigned __int64 v30; // rbx\n  unsigned __int64 v31; // r14\n  unsigned __int64 v32; // r11\n  __int64 v33; // rcx\n  unsigned __int64 v34; // rdx\n  __int64 v35; // rsi\n  __int64 v36; // rdx\n  signed __int64 v37; // rdi\n  signed __int64 v38; // rbp\n  signed __int64 v39; // rcx\n  __int64 v40; // rsi\n  unsigned __int64 v41; // rax\n  bool v42; // di\n  bool v43; // dl\n  bool v44; // al\n  unsigned __int64 v45; // rsi\n  signed __int64 v46; // rdi\n  __int64 v47; // rbp\n  __m128i v48; // xmm0\n  __m128i v49; // xmm0\n  __m128i v50; // xmm0\n  unsigned __int64 v51; // rbx\n  unsigned __int64 v52; // r10\n  unsigned __int64 v53; // r9\n  __int64 v54; // rdx\n  unsigned __int64 v55; // rax\n  bool v56; // si\n  bool v57; // bl\n  bool v58; // cl\n  bool v59; // al\n  unsigned __int64 v60; // rcx\n  __int64 v61; // rsi\n  signed __int64 v62; // rdi\n  __int64 v63; // rcx\n  __m128i v64; // xmm0\n  __m128i v65; // xmm0\n  __m128i v66; // xmm0\n  unsigned __int64 v67; // rcx\n  __int64 v68; // rsi\n  __int64 v69; // rcx\n  signed __int64 v70; // rdi\n  signed __int64 v71; // rbp\n  signed __int64 v72; // rdx\n  __int64 v73; // rsi\n  unsigned __int64 v74; // rbp\n  unsigned __int64 v75; // rbx\n  unsigned __int64 v76; // rdi\n  __int64 v77; // rcx\n  unsigned __int64 v78; // rax\n  unsigned __int64 v79; // rcx\n  bool v80; // al\n  bool v81; // si\n  bool v82; // zf\n  unsigned __int64 v83; // rsi\n  __int64 v84; // rdx\n  signed __int64 v85; // rdi\n  __int64 v86; // r13\n  __int64 v87; // rsi\n  unsigned __int64 v88; // rbp\n  __m128i v89; // xmm0\n  __m128i v90; // xmm0\n  __m128i v91; // xmm0\n  unsigned __int64 v92; // rdx\n  __int64 v93; // rsi\n  __int64 v94; // rdx\n  signed __int64 v95; // rdi\n  signed __int64 v96; // rbp\n  signed __int64 v97; // rcx\n  __int64 v98; // rsi\n  unsigned __int64 v99; // rbp\n  unsigned __int64 v100; // rax\n  unsigned __int64 v101; // r13\n  __int64 v102; // rcx\n  unsigned __int64 v103; // rcx\n  bool v104; // bl\n  bool v105; // si\n  unsigned __int64 v106; // rdx\n  __int64 v107; // rbx\n  signed __int64 v108; // rdi\n  __int64 v109; // rdx\n  __int64 v110; // rsi\n  unsigned __int64 v111; // rbp\n  __m128i v112; // xmm0\n  __m128i v113; // xmm0\n  __m128i v114; // xmm0\n  unsigned __int64 v115; // rdx\n  __int64 v116; // rsi\n  __int64 v117; // rdx\n  signed __int64 v118; // rdi\n  signed __int64 v119; // rbp\n  signed __int64 v120; // rcx\n  __int64 v121; // rsi\n  unsigned __int64 v122; // rbp\n  unsigned __int64 v123; // rax\n  unsigned __int64 v124; // r13\n  __int64 v125; // rcx\n  unsigned __int64 v126; // rdx\n  __int64 v127; // rsi\n  __int64 v128; // rdx\n  signed __int64 v129; // rdi\n  signed __int64 v130; // rbp\n  signed __int64 v131; // rcx\n  __int64 v132; // rsi\n  unsigned __int64 v133; // rcx\n  bool v134; // bl\n  bool v135; // si\n  unsigned __int64 v136; // rdx\n  __int64 v137; // rbp\n  signed __int64 v138; // rdi\n  __int64 v139; // rdx\n  __int64 v140; // rsi\n  __m128i v141; // xmm0\n  __m128i v142; // xmm0\n  __m128i v143; // xmm0\n  unsigned __int64 v144; // rbp\n  unsigned __int64 v145; // rax\n  unsigned __int64 v146; // rdi\n  __int64 v147; // rcx\n  unsigned __int64 v148; // rdx\n  __int64 v149; // rsi\n  __int64 v150; // rdx\n  signed __int64 v151; // rdi\n  signed __int64 v152; // rbp\n  signed __int64 v153; // rcx\n  __int64 v154; // rsi\n  unsigned __int64 v155; // rcx\n  bool v156; // bl\n  bool v157; // si\n  unsigned __int64 v158; // rdx\n  signed __int64 v159; // rdi\n  __int64 v160; // rdx\n  __int64 v161; // rsi\n  unsigned __int64 v162; // rbp\n  __m128i v163; // xmm0\n  __m128i v164; // xmm0\n  __m128i v165; // xmm0\n  unsigned __int64 v166; // rbp\n  unsigned __int64 v167; // rbx\n  unsigned __int64 v168; // rax\n  __int64 v169; // rcx\n  unsigned __int64 v170; // rcx\n  bool v171; // di\n  bool v172; // bl\n  bool v173; // si\n  unsigned __int64 v174; // rdx\n  __int64 v175; // rbp\n  signed __int64 v176; // rdi\n  __int64 v177; // rdx\n  __m128i v178; // xmm0\n  __m128i v179; // xmm0\n  __m128i v180; // xmm0\n  unsigned __int64 v181; // rdx\n  __int64 v182; // rsi\n  __int64 v183; // rdx\n  signed __int64 v184; // rdi\n  signed __int64 v185; // rbp\n  signed __int64 v186; // rcx\n  __int64 v187; // rsi\n  unsigned __int64 *v188; // rax\n  unsigned __int64 v189; // rbp\n  __int64 v190; // rcx\n  unsigned __int64 v191; // rdx\n  __int64 v192; // rsi\n  __int64 v193; // rdx\n  signed __int64 v194; // rdi\n  signed __int64 v195; // rbp\n  signed __int64 v196; // rcx\n  __int64 v197; // rsi\n  unsigned __int64 v198; // rcx\n  bool v199; // bl\n  bool v200; // si\n  unsigned __int64 v201; // rdx\n  __int64 v202; // rsi\n  signed __int64 v203; // rdi\n  __int64 v204; // rdx\n  __m128i v205; // xmm0\n  __m128i v206; // xmm0\n  __m128i v207; // xmm0\n  __int64 v208; // rbx\n  unsigned __int64 *v209; // r15\n  unsigned __int64 v210; // rbp\n  __int64 v211; // rcx\n  unsigned __int64 v212; // rax\n  unsigned __int64 v213; // rdx\n  __int64 v214; // rsi\n  __int64 v215; // rdx\n  signed __int64 v216; // rdi\n  signed __int64 v217; // rbp\n  signed __int64 v218; // rcx\n  __int64 v219; // rsi\n  unsigned __int64 v220; // rcx\n  bool v221; // bl\n  bool v222; // si\n  unsigned __int64 v223; // rdx\n  __int64 v224; // r14\n  signed __int64 v225; // rdi\n  __int64 v226; // rdx\n  __m128i v227; // xmm0\n  __m128i v228; // xmm0\n  __m128i v229; // xmm0\n  unsigned __int64 v230; // r10\n  __int64 v231; // rcx\n  unsigned __int64 v232; // rax\n  unsigned __int64 v233; // rdx\n  bool v234; // si\n  bool v235; // bl\n  bool v236; // dl\n  bool v237; // al\n  unsigned __int64 v238; // rdx\n  __int64 v239; // rbp\n  signed __int64 v240; // rdi\n  __int64 v241; // rdx\n  __m128i v242; // xmm0\n  __m128i v243; // xmm0\n  __m128i v244; // xmm0\n  unsigned __int64 v245; // rdx\n  __int64 v246; // rsi\n  __int64 v247; // rdx\n  signed __int64 v248; // rdi\n  signed __int64 v249; // rax\n  signed __int64 v250; // rcx\n  __int64 v251; // rsi\n  unsigned __int64 v252; // rax\n  __int64 v253; // rcx\n  unsigned __int64 v254; // rbp\n  unsigned __int64 v255; // rdx\n  __int64 v256; // rsi\n  __int64 v257; // rdx\n  signed __int64 v258; // rax\n  signed __int64 v259; // rdi\n  signed __int64 v260; // rcx\n  __int64 v261; // rsi\n  unsigned __int64 v262; // rcx\n  unsigned __int64 v263; // rsi\n  bool v264; // di\n  bool v265; // bl\n  bool v266; // dl\n  bool v267; // si\n  unsigned __int64 v268; // rsi\n  __int64 v269; // rdx\n  signed __int64 v270; // rdi\n  __int64 v271; // rsi\n  __m128i v272; // xmm0\n  __m128i v273; // xmm0\n  __m128i v274; // xmm0\n  unsigned __int64 v275; // rax\n  __int64 v276; // rcx\n  unsigned __int64 v277; // rcx\n  unsigned __int64 v278; // rsi\n  bool v279; // r9\n  bool v280; // bl\n  bool v281; // dl\n  bool v282; // si\n  unsigned __int64 v283; // rsi\n  signed __int64 v284; // rdi\n  __int64 v285; // rbp\n  __m128i v286; // xmm0\n  __m128i v287; // xmm0\n  __m128i v288; // xmm0\n  unsigned __int64 v289; // r9\n  __int64 v290; // rsi\n  __int64 v291; // rdx\n  signed __int64 v292; // rax\n  signed __int64 v293; // rdi\n  signed __int64 v294; // rcx\n  __int64 v295; // rsi\n  unsigned __int64 v296; // rax\n  __int64 v297; // rcx\n  unsigned __int64 v298; // r9\n  __int64 v299; // rsi\n  __int64 v300; // rdx\n  signed __int64 v301; // rax\n  signed __int64 v302; // rdi\n  signed __int64 v303; // rcx\n  __int64 v304; // rsi\n  unsigned __int64 v305; // rcx\n  unsigned __int64 v306; // rsi\n  bool v307; // r9\n  bool v308; // bl\n  bool v309; // dl\n  bool v310; // si\n  unsigned __int64 v311; // rsi\n  signed __int64 v312; // rdi\n  __int64 v313; // rbp\n  __m128i v314; // xmm0\n  __m128i v315; // xmm0\n  __m128i v316; // xmm0\n  unsigned __int64 v317; // rax\n  __int64 v318; // rcx\n  unsigned __int64 v319; // rbp\n  unsigned __int64 v320; // rdx\n  __int64 v321; // rsi\n  __int64 v322; // rdx\n  signed __int64 v323; // rax\n  signed __int64 v324; // rdi\n  signed __int64 v325; // rcx\n  __int64 v326; // rsi\n  unsigned __int64 v327; // rcx\n  unsigned __int64 v328; // rsi\n  bool v329; // di\n  bool v330; // bl\n  bool v331; // dl\n  bool v332; // si\n  unsigned __int64 v333; // rsi\n  signed __int64 v334; // rdi\n  __int64 v335; // rbp\n  __m128i v336; // xmm0\n  __m128i v337; // xmm0\n  __m128i v338; // xmm0\n  unsigned __int64 v339; // rax\n  __int64 v340; // rcx\n  unsigned __int64 v341; // rbp\n  unsigned __int64 v342; // rcx\n  unsigned __int64 v343; // rsi\n  bool v344; // r9\n  bool v345; // bl\n  bool v346; // dl\n  bool v347; // si\n  unsigned __int64 v348; // rsi\n  signed __int64 v349; // rdi\n  __int64 v350; // rbp\n  __m128i v351; // xmm0\n  __m128i v352; // xmm0\n  __m128i v353; // xmm0\n  unsigned __int64 v354; // r9\n  __int64 v355; // rsi\n  __int64 v356; // rdx\n  signed __int64 v357; // rax\n  signed __int64 v358; // rdi\n  signed __int64 v359; // rcx\n  __int64 v360; // rsi\n  unsigned __int64 *v361; // r9\n  unsigned __int64 v362; // rax\n  __int64 v363; // rcx\n  unsigned __int64 v364; // rbp\n  unsigned __int64 v365; // rcx\n  unsigned __int64 v366; // rsi\n  bool v367; // di\n  bool v368; // bl\n  bool v369; // dl\n  bool v370; // si\n  unsigned __int64 v371; // rsi\n  __int64 v372; // rdx\n  signed __int64 v373; // rdi\n  __int64 v374; // rsi\n  __m128i v375; // xmm0\n  __m128i v376; // xmm0\n  __m128i v377; // xmm0\n  unsigned __int64 v378; // rdx\n  __int64 v379; // rsi\n  __int64 v380; // rdx\n  signed __int64 v381; // rdi\n  signed __int64 v382; // rbp\n  signed __int64 v383; // rcx\n  __int64 v384; // rsi\n  unsigned __int64 v385; // r13\n  __int64 v386; // rcx\n  unsigned __int64 v387; // rbx\n  unsigned __int64 v388; // rsi\n  __int64 v389; // rdi\n  __int64 v390; // rsi\n  signed __int64 v391; // rdi\n  signed __int64 v392; // rbp\n  signed __int64 v393; // rcx\n  __int64 v394; // rbx\n  unsigned __int64 v395; // rcx\n  bool v396; // r10\n  bool v397; // si\n  unsigned __int64 v398; // rbp\n  signed __int64 v399; // rdi\n  __int64 v400; // rbx\n  __m128i v401; // xmm0\n  __m128i v402; // xmm0\n  __m128i v403; // xmm0\n  unsigned __int64 v404; // r12\n  __int64 v405; // rsi\n  unsigned __int64 v406; // rdi\n  __int64 v407; // rcx\n  __int64 v408; // rdi\n  signed __int64 v409; // rbp\n  signed __int64 v410; // rbx\n  signed __int64 v411; // rsi\n  __int64 v412; // rcx\n  unsigned __int64 v413; // rdx\n  bool v414; // bl\n  bool v415; // dl\n  unsigned __int64 v416; // rcx\n  signed __int64 v417; // rbp\n  __int64 v418; // rbx\n  __m128i v419; // xmm0\n  __m128i v420; // xmm0\n  __m128i v421; // xmm0\n  unsigned __int64 v422; // r15\n  __int64 v423; // rsi\n  unsigned __int64 v424; // rbp\n  __int64 v425; // rcx\n  __int64 v426; // rbp\n  signed __int64 v427; // rbx\n  signed __int64 v428; // rdi\n  signed __int64 v429; // rsi\n  __int64 v430; // rcx\n  unsigned __int64 v431; // rdx\n  bool v432; // bl\n  bool v433; // dl\n  unsigned __int64 v434; // rcx\n  signed __int64 v435; // rbp\n  __int64 v436; // rbx\n  __m128i v437; // xmm0\n  __m128i v438; // xmm0\n  __m128i v439; // xmm0\n  unsigned __int64 *v440; // r8\n  unsigned __int64 v441; // r11\n  __int64 v442; // rbx\n  unsigned __int64 v443; // rdx\n  unsigned __int64 v444; // rcx\n  signed __int64 v445; // rsi\n  __int64 v446; // rbp\n  __m128i v447; // xmm0\n  __m128i v448; // xmm0\n  __m128i v449; // xmm0\n  unsigned __int64 v450; // rsi\n  __int64 v451; // rcx\n  __int64 v452; // rsi\n  signed __int64 v453; // rbp\n  signed __int64 v454; // rdi\n  signed __int64 v455; // rbx\n  __int64 v456; // rcx\n  unsigned __int64 v457; // r9\n  __int64 v458; // rbx\n  unsigned __int64 v459; // rdx\n  unsigned __int64 v460; // rcx\n  signed __int64 v461; // rsi\n  __int64 v462; // rbp\n  __m128i v463; // xmm0\n  __m128i v464; // xmm0\n  __m128i v465; // xmm0\n  unsigned __int64 v466; // rsi\n  __int64 v467; // rcx\n  __int64 v468; // rsi\n  signed __int64 v469; // rbp\n  signed __int64 v470; // rdi\n  signed __int64 v471; // rbx\n  __int64 v472; // rcx\n  unsigned __int64 *v473; // r8\n  unsigned __int64 v474; // r14\n  __int64 v475; // rbp\n  unsigned __int64 v476; // rdx\n  bool v477; // bl\n  bool v478; // dl\n  unsigned __int64 v479; // rcx\n  signed __int64 v480; // rbx\n  __int64 v481; // rsi\n  __m128i v482; // xmm0\n  __m128i v483; // xmm0\n  __m128i v484; // xmm0\n  unsigned __int64 v485; // rsi\n  __int64 v486; // rcx\n  signed __int64 v487; // rbx\n  signed __int64 v488; // rdx\n  signed __int64 v489; // rax\n  __int64 v490; // rcx\n  unsigned __int64 v491; // rax\n  __int64 v492; // rdx\n  unsigned __int64 v493; // rdx\n  bool v494; // bl\n  bool v495; // si\n  unsigned __int64 v496; // rcx\n  signed __int64 v497; // rbx\n  __int64 v498; // rsi\n  __m128i v499; // xmm0\n  __m128i v500; // xmm0\n  __m128i v501; // xmm0\n  unsigned __int64 v502; // rsi\n  __int64 v503; // rcx\n  __int64 v504; // rsi\n  signed __int64 v505; // rax\n  signed __int64 v506; // rdi\n  signed __int64 v507; // rcx\n  __int64 v508; // rdx\n  unsigned __int64 v509; // rax\n  __int64 v510; // rcx\n  __int64 v511; // rsi\n  unsigned __int64 v512; // rdx\n  __int64 v513; // rsi\n  __int64 v514; // rsi\n  __int64 v515; // rbp\n  signed __int64 v516; // rax\n  signed __int64 v517; // rdx\n  signed __int64 v518; // rcx\n  __int64 v519; // rsi\n  unsigned __int64 v520; // rcx\n  bool v521; // bl\n  bool v522; // si\n  bool v523; // dl\n  unsigned __int64 v524; // rsi\n  __int64 v525; // rdx\n  signed __int64 v526; // rdi\n  __int64 v527; // rsi\n  __m128i v528; // xmm0\n  __m128i v529; // xmm0\n  __m128i v530; // xmm0\n  __int64 v531; // [rsp+0h] [rbp-C8h]\n  unsigned int v532; // [rsp+Ch] [rbp-BCh]\n  _QWORD *v533; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v534; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 *v535; // [rsp+18h] [rbp-B0h]\n  unsigned __int64 v536; // [rsp+18h] [rbp-B0h]\n  __int64 v537; // [rsp+20h] [rbp-A8h]\n  unsigned __int64 v538; // [rsp+20h] [rbp-A8h]\n  unsigned __int64 v539; // [rsp+28h] [rbp-A0h]\n  unsigned __int64 v540; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v541; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v542; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v543; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v544; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v545; // [rsp+58h] [rbp-70h]\n  unsigned __int64 v546; // [rsp+60h] [rbp-68h]\n  unsigned __int64 v547; // [rsp+68h] [rbp-60h]\n  unsigned __int64 v548; // [rsp+70h] [rbp-58h]\n  unsigned __int64 v549; // [rsp+78h] [rbp-50h]\n  unsigned __int64 **v550; // [rsp+80h] [rbp-48h]\n  unsigned __int64 v551; // [rsp+88h] [rbp-40h]\n  unsigned __int64 v552; // [rsp+90h] [rbp-38h]\n\n  if ( (signed int)a3 <= 0 )\n    return;\n  v3 = *(_QWORD *)(*((_QWORD *)qword_49FE10 + a1) + 8LL * a2);\n  v4 = *(_QWORD **)(v3 + 48);\n  v550 = *(unsigned __int64 ***)(*((_QWORD *)qword_49FE10 + a1) + 8LL * a2);\n  v5 = *(unsigned __int64 **)(v3 + 56);\n  v533 = v4;\n  v6 = *v4;\n  v7 = *v5;\n  v535 = v5;\n  v8 = v5[4];\n  v9 = a3;\n  v531 = a3;\n  v532 = a3;\n  if ( a3 < 8 )\n  {\n    v10 = 0LL;\n    goto LABEL_4;\n  }\n  v18 = v6 + 4LL * a3;\n  v19 = v6 < v7 + 4LL * a3;\n  v20 = v7 < v18;\n  v21 = v6 < v8 + 4LL * a3;\n  v22 = v8 < v18;\n  v10 = 0LL;\n  if ( v20 && v19 )\n  {\n    v9 = v531;\n    goto LABEL_4;\n  }\n  v9 = v531;\n  if ( !v22 || !v21 )\n  {\n    v10 = (unsigned int)v531 & 0xFFFFFFF8;\n    v23 = (unsigned __int64)(v10 - 8) >> 3;\n    v24 = ((_BYTE)v23 + 1) & 1;\n    if ( v10 == 8 )\n    {\n      v26 = 0LL;\n      if ( v24 )\n      {\nLABEL_17:\n        v29 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v8 + 4 * v26 + 16)),\n                _mm_loadu_si128((const __m128i *)(v7 + 4 * v26 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v6 + 4 * v26),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v8 + 4 * v26)),\n            _mm_loadu_si128((const __m128i *)(v7 + 4 * v26))));\n        _mm_storeu_si128((__m128i *)(v6 + 4 * v26 + 16), v29);\n        goto LABEL_18;\n      }\n    }\n    else\n    {\n      v25 = v24 - 1 - v23;\n      v26 = 0LL;\n      do\n      {\n        v27 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v8 + 4 * v26 + 16)),\n                _mm_loadu_si128((const __m128i *)(v7 + 4 * v26 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v6 + 4 * v26),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v8 + 4 * v26)),\n            _mm_loadu_si128((const __m128i *)(v7 + 4 * v26))));\n        _mm_storeu_si128((__m128i *)(v6 + 4 * v26 + 16), v27);\n        v28 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v8 + 4 * v26 + 48)),\n                _mm_loadu_si128((const __m128i *)(v7 + 4 * v26 + 48)));\n        _mm_storeu_si128(\n          (__m128i *)(v6 + 4 * v26 + 32),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v8 + 4 * v26 + 32)),\n            _mm_loadu_si128((const __m128i *)(v7 + 4 * v26 + 32))));\n        _mm_storeu_si128((__m128i *)(v6 + 4 * v26 + 48), v28);\n        v26 += 16LL;\n        v25 += 2LL;\n      }\n      while ( v25 );\n      if ( v24 )\n        goto LABEL_17;\n    }\nLABEL_18:\n    if ( v10 == v531 )\n      goto LABEL_19;\n  }\nLABEL_4:\n  v11 = v9 - v10 - 1;\n  if ( v9 & 3 )\n  {\n    v12 = -(v9 & 3);\n    do\n    {\n      *(_DWORD *)(v6 + 4 * v10) = *(_DWORD *)(v7 + 4 * v10) + *(_DWORD *)(v8 + 4 * v10);\n      ++v10;\n      ++v12;\n    }\n    while ( v12 );\n  }\n  if ( v11 >= 3 )\n  {\n    v13 = v9 - v10;\n    v14 = v6 + 4 * v10 + 12;\n    v15 = v8 + 4 * v10 + 12;\n    v16 = v7 + 4 * v10 + 12;\n    v17 = 0LL;\n    do\n    {\n      *(_DWORD *)(v14 + 4 * v17 - 12) = *(_DWORD *)(v16 + 4 * v17 - 12) + *(_DWORD *)(v15 + 4 * v17 - 12);\n      *(_DWORD *)(v14 + 4 * v17 - 8) = *(_DWORD *)(v16 + 4 * v17 - 8) + *(_DWORD *)(v15 + 4 * v17 - 8);\n      *(_DWORD *)(v14 + 4 * v17 - 4) = *(_DWORD *)(v16 + 4 * v17 - 4) + *(_DWORD *)(v15 + 4 * v17 - 4);\n      *(_DWORD *)(v14 + 4 * v17) = *(_DWORD *)(v16 + 4 * v17) + *(_DWORD *)(v15 + 4 * v17);\n      v17 += 4LL;\n    }\n    while ( v13 != v17 );\n  }\nLABEL_19:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v30 = v533[1];\n  v31 = v535[1];\n  v32 = v535[5];\n  if ( v532 < 8 )\n  {\n    v33 = 0LL;\n    goto LABEL_22;\n  }\n  v41 = v30 + 4 * v9;\n  v42 = v31 < v41;\n  v43 = v30 < v32 + 4 * v9;\n  v44 = v32 < v41;\n  v33 = 0LL;\n  if ( v42 && v30 < v31 + 4 * v9 )\n  {\n    v9 = v531;\n    goto LABEL_22;\n  }\n  v9 = v531;\n  if ( !v44 || !v43 )\n  {\n    v33 = (unsigned int)v531 & 0xFFFFFFF8;\n    v45 = (unsigned __int64)(v33 - 8) >> 3;\n    if ( v33 == 8 )\n    {\n      v47 = 0LL;\n      if ( ((_BYTE)v45 + 1) & 1 )\n      {\nLABEL_35:\n        v50 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v32 + 4 * v47 + 16)),\n                _mm_loadu_si128((const __m128i *)(v31 + 4 * v47 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v30 + 4 * v47),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v32 + 4 * v47)),\n            _mm_loadu_si128((const __m128i *)(v31 + 4 * v47))));\n        _mm_storeu_si128((__m128i *)(v30 + 4 * v47 + 16), v50);\n        goto LABEL_36;\n      }\n    }\n    else\n    {\n      v46 = (((_BYTE)v45 + 1) & 1) - 1LL - v45;\n      v47 = 0LL;\n      do\n      {\n        v48 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v32 + 4 * v47 + 16)),\n                _mm_loadu_si128((const __m128i *)(v31 + 4 * v47 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v30 + 4 * v47),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v32 + 4 * v47)),\n            _mm_loadu_si128((const __m128i *)(v31 + 4 * v47))));\n        _mm_storeu_si128((__m128i *)(v30 + 4 * v47 + 16), v48);\n        v49 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v32 + 4 * v47 + 48)),\n                _mm_loadu_si128((const __m128i *)(v31 + 4 * v47 + 48)));\n        _mm_storeu_si128(\n          (__m128i *)(v30 + 4 * v47 + 32),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v32 + 4 * v47 + 32)),\n            _mm_loadu_si128((const __m128i *)(v31 + 4 * v47 + 32))));\n        _mm_storeu_si128((__m128i *)(v30 + 4 * v47 + 48), v49);\n        v47 += 16LL;\n        v46 += 2LL;\n      }\n      while ( v46 );\n      if ( ((_BYTE)v45 + 1) & 1 )\n        goto LABEL_35;\n    }\nLABEL_36:\n    if ( v33 == v531 )\n      goto LABEL_37;\n  }\nLABEL_22:\n  v34 = v9 - v33 - 1;\n  if ( v9 & 3 )\n  {\n    v35 = -(v9 & 3);\n    do\n    {\n      *(_DWORD *)(v30 + 4 * v33) = *(_DWORD *)(v31 + 4 * v33) + *(_DWORD *)(v32 + 4 * v33);\n      ++v33;\n      ++v35;\n    }\n    while ( v35 );\n  }\n  if ( v34 >= 3 )\n  {\n    v36 = v9 - v33;\n    v37 = v30 + 4 * v33 + 12;\n    v38 = v32 + 4 * v33 + 12;\n    v39 = v31 + 4 * v33 + 12;\n    v40 = 0LL;\n    do\n    {\n      *(_DWORD *)(v37 + 4 * v40 - 12) = *(_DWORD *)(v39 + 4 * v40 - 12) + *(_DWORD *)(v38 + 4 * v40 - 12);\n      *(_DWORD *)(v37 + 4 * v40 - 8) = *(_DWORD *)(v39 + 4 * v40 - 8) + *(_DWORD *)(v38 + 4 * v40 - 8);\n      *(_DWORD *)(v37 + 4 * v40 - 4) = *(_DWORD *)(v39 + 4 * v40 - 4) + *(_DWORD *)(v38 + 4 * v40 - 4);\n      *(_DWORD *)(v37 + 4 * v40) = *(_DWORD *)(v39 + 4 * v40) + *(_DWORD *)(v38 + 4 * v40);\n      v40 += 4LL;\n    }\n    while ( v36 != v40 );\n  }\nLABEL_37:\n  v552 = v30;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v51 = v533[2];\n  v52 = v535[2];\n  v53 = v535[6];\n  v545 = v533[2];\n  if ( v532 < 8 )\n  {\n    v54 = 0LL;\n    goto LABEL_56;\n  }\n  v55 = v51 + 4 * v9;\n  v56 = v51 < v52 + 4 * v9;\n  v57 = v52 < v55;\n  v58 = v533[2] < v53 + 4 * v9;\n  v59 = v53 < v55;\n  v54 = 0LL;\n  if ( v57 && v56 )\n  {\n    v9 = v531;\n    v51 = v533[2];\n    goto LABEL_56;\n  }\n  v9 = v531;\n  v51 = v533[2];\n  if ( !v59 || !v58 )\n  {\n    v54 = (unsigned int)v531 & 0xFFFFFFF8;\n    v60 = (unsigned __int64)(v54 - 8) >> 3;\n    v61 = ((_BYTE)v60 + 1) & 1;\n    if ( v54 == 8 )\n    {\n      v63 = 0LL;\n      if ( v61 )\n      {\nLABEL_46:\n        v66 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v53 + 4 * v63 + 16)),\n                _mm_loadu_si128((const __m128i *)(v52 + 4 * v63 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v545 + 4 * v63),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v53 + 4 * v63)),\n            _mm_loadu_si128((const __m128i *)(v52 + 4 * v63))));\n        _mm_storeu_si128((__m128i *)(v545 + 4 * v63 + 16), v66);\n        goto LABEL_47;\n      }\n    }\n    else\n    {\n      v62 = v61 - 1 - v60;\n      v63 = 0LL;\n      do\n      {\n        v64 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v53 + 4 * v63 + 16)),\n                _mm_loadu_si128((const __m128i *)(v52 + 4 * v63 + 16)));\n        _mm_storeu_si128(\n          (__m128i *)(v545 + 4 * v63),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v53 + 4 * v63)),\n            _mm_loadu_si128((const __m128i *)(v52 + 4 * v63))));\n        _mm_storeu_si128((__m128i *)(v545 + 4 * v63 + 16), v64);\n        v65 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v53 + 4 * v63 + 48)),\n                _mm_loadu_si128((const __m128i *)(v52 + 4 * v63 + 48)));\n        _mm_storeu_si128(\n          (__m128i *)(v545 + 4 * v63 + 32),\n          _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v53 + 4 * v63 + 32)),\n            _mm_loadu_si128((const __m128i *)(v52 + 4 * v63 + 32))));\n        _mm_storeu_si128((__m128i *)(v545 + 4 * v63 + 48), v65);\n        v63 += 16LL;\n        v62 += 2LL;\n      }\n      while ( v62 );\n      if ( v61 )\n        goto LABEL_46;\n    }\nLABEL_47:\n    if ( v54 == v531 )\n      goto LABEL_62;\n  }\nLABEL_56:\n  v67 = v9 - v54 - 1;\n  if ( v9 & 3 )\n  {\n    v68 = -(v9 & 3);\n    do\n    {\n      *(_DWORD *)(v51 + 4 * v54) = *(_DWORD *)(v52 + 4 * v54) + *(_DWORD *)(v53 + 4 * v54);\n      ++v54;\n      ++v68;\n    }\n    while ( v68 );\n  }\n  if ( v67 >= 3 )\n  {\n    v69 = v9 - v54;\n    v70 = v51 + 4 * v54 + 12;\n    v71 = v53 + 4 * v54 + 12;\n    v72 = v52 + 4 * v54 + 12;\n    v73 = 0LL;\n    do\n    {\n      *(_DWORD *)(v70 + 4 * v73 - 12) = *(_DWORD *)(v72 + 4 * v73 - 12) + *(_DWORD *)(v71 + 4 * v73 - 12);\n      *(_DWORD *)(v70 + 4 * v73 - 8) = *(_DWORD *)(v72 + 4 * v73 - 8) + *(_DWORD *)(v71 + 4 * v73 - 8);\n      *(_DWORD *)(v70 + 4 * v73 - 4) = *(_DWORD *)(v72 + 4 * v73 - 4) + *(_DWORD *)(v71 + 4 * v73 - 4);\n      *(_DWORD *)(v70 + 4 * v73) = *(_DWORD *)(v72 + 4 * v73) + *(_DWORD *)(v71 + 4 * v73);\n      v73 += 4LL;\n    }\n    while ( v69 != v73 );\n  }\nLABEL_62:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v74 = v533[3];\n  v75 = v535[3];\n  v76 = v535[7];\n  v544 = v533[3];\n  v547 = v535[7];\n  if ( v532 < 8 )\n  {\n    v77 = 0LL;\n    v78 = v535[3];\nLABEL_77:\n    v92 = v531 - v77 - 1;\n    if ( v531 & 3 )\n    {\n      v93 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v544 + 4 * v77) = *(_DWORD *)(v78 + 4 * v77) + *(_DWORD *)(v547 + 4 * v77);\n        ++v77;\n        ++v93;\n      }\n      while ( v93 );\n    }\n    if ( v92 >= 3 )\n    {\n      v94 = v531 - v77;\n      v95 = v544 + 4 * v77 + 12;\n      v96 = v547 + 4 * v77 + 12;\n      v97 = v78 + 4 * v77 + 12;\n      v98 = 0LL;\n      do\n      {\n        *(_DWORD *)(v95 + 4 * v98 - 12) = *(_DWORD *)(v97 + 4 * v98 - 12) + *(_DWORD *)(v96 + 4 * v98 - 12);\n        *(_DWORD *)(v95 + 4 * v98 - 8) = *(_DWORD *)(v97 + 4 * v98 - 8) + *(_DWORD *)(v96 + 4 * v98 - 8);\n        *(_DWORD *)(v95 + 4 * v98 - 4) = *(_DWORD *)(v97 + 4 * v98 - 4) + *(_DWORD *)(v96 + 4 * v98 - 4);\n        *(_DWORD *)(v95 + 4 * v98) = *(_DWORD *)(v97 + 4 * v98) + *(_DWORD *)(v96 + 4 * v98);\n        v98 += 4LL;\n      }\n      while ( v94 != v98 );\n    }\n    goto LABEL_83;\n  }\n  v79 = v74 + 4 * v9;\n  v80 = v75 < v79;\n  v81 = v76 < v79;\n  v77 = 0LL;\n  v82 = (v80 && v74 < v75 + 4 * v9) == 0;\n  v78 = v535[3];\n  if ( !v82 || v81 && v74 < v76 + 4 * v9 )\n    goto LABEL_77;\n  v77 = (unsigned int)v531 & 0xFFFFFFF8;\n  v83 = (unsigned __int64)(v77 - 8) >> 3;\n  v84 = ((_BYTE)v83 + 1) & 1;\n  if ( v77 == 8 )\n  {\n    v86 = 0LL;\n    v87 = v533[3];\n    v88 = v535[7];\n  }\n  else\n  {\n    v85 = v84 - 1 - v83;\n    v86 = 0LL;\n    v87 = v533[3];\n    v88 = v535[7];\n    do\n    {\n      v89 = _mm_add_epi32(\n              _mm_loadu_si128((const __m128i *)(v547 + 4 * v86 + 16)),\n              _mm_loadu_si128((const __m128i *)(v75 + 4 * v86 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v544 + 4 * v86),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v547 + 4 * v86)),\n          _mm_loadu_si128((const __m128i *)(v75 + 4 * v86))));\n      _mm_storeu_si128((__m128i *)(v544 + 4 * v86 + 16), v89);\n      v90 = _mm_add_epi32(\n              _mm_loadu_si128((const __m128i *)(v547 + 4 * v86 + 48)),\n              _mm_loadu_si128((const __m128i *)(v75 + 4 * v86 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v544 + 4 * v86 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v547 + 4 * v86 + 32)),\n          _mm_loadu_si128((const __m128i *)(v75 + 4 * v86 + 32))));\n      _mm_storeu_si128((__m128i *)(v544 + 4 * v86 + 48), v90);\n      v86 += 16LL;\n      v85 += 2LL;\n    }\n    while ( v85 );\n  }\n  if ( v84 )\n  {\n    v91 = _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v88 + 4 * v86 + 16)),\n            _mm_loadu_si128((const __m128i *)(v75 + 4 * v86 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v87 + 4 * v86),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v88 + 4 * v86)),\n        _mm_loadu_si128((const __m128i *)(v75 + 4 * v86))));\n    _mm_storeu_si128((__m128i *)(v87 + 4 * v86 + 16), v91);\n  }\n  if ( v77 != v531 )\n    goto LABEL_77;\nLABEL_83:\n  v551 = v78;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v99 = v533[8];\n  v100 = v535[8];\n  v101 = v535[12];\n  v542 = v533[8];\n  v543 = v535[12];\n  v546 = v535[8];\n  if ( v532 < 8 )\n  {\n    v102 = 0LL;\nLABEL_97:\n    v115 = v531 - v102 - 1;\n    if ( v531 & 3 )\n    {\n      v116 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v542 + 4 * v102) = *(_DWORD *)(v100 + 4 * v102) + *(_DWORD *)(v543 + 4 * v102);\n        ++v102;\n        ++v116;\n      }\n      while ( v116 );\n    }\n    if ( v115 >= 3 )\n    {\n      v117 = v531 - v102;\n      v118 = v542 + 4 * v102 + 12;\n      v119 = v543 + 4 * v102 + 12;\n      v120 = v100 + 4 * v102 + 12;\n      v121 = 0LL;\n      do\n      {\n        *(_DWORD *)(v118 + 4 * v121 - 12) = *(_DWORD *)(v120 + 4 * v121 - 12) + *(_DWORD *)(v119 + 4 * v121 - 12);\n        *(_DWORD *)(v118 + 4 * v121 - 8) = *(_DWORD *)(v120 + 4 * v121 - 8) + *(_DWORD *)(v119 + 4 * v121 - 8);\n        *(_DWORD *)(v118 + 4 * v121 - 4) = *(_DWORD *)(v120 + 4 * v121 - 4) + *(_DWORD *)(v119 + 4 * v121 - 4);\n        *(_DWORD *)(v118 + 4 * v121) = *(_DWORD *)(v120 + 4 * v121) + *(_DWORD *)(v119 + 4 * v121);\n        v121 += 4LL;\n      }\n      while ( v117 != v121 );\n    }\n    goto LABEL_103;\n  }\n  v103 = v99 + 4 * v531;\n  v104 = v100 < v103;\n  v105 = v101 < v103;\n  v102 = 0LL;\n  if ( v104 && v99 < v100 + 4 * v531 )\n  {\n    v100 = v535[8];\n    goto LABEL_97;\n  }\n  v100 = v535[8];\n  if ( v105 && v99 < v101 + 4 * v531 )\n    goto LABEL_97;\n  v102 = (unsigned int)v531 & 0xFFFFFFF8;\n  v106 = (unsigned __int64)(v102 - 8) >> 3;\n  v107 = ((_BYTE)v106 + 1) & 1;\n  if ( v102 == 8 )\n  {\n    v109 = 0LL;\n    v110 = v533[8];\n    v111 = v535[12];\n  }\n  else\n  {\n    v108 = v107 - 1 - v106;\n    v109 = 0LL;\n    v110 = v533[8];\n    v111 = v535[12];\n    do\n    {\n      v112 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v543 + 4 * v109 + 16)),\n               _mm_loadu_si128((const __m128i *)(v546 + 4 * v109 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v542 + 4 * v109),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v543 + 4 * v109)),\n          _mm_loadu_si128((const __m128i *)(v546 + 4 * v109))));\n      _mm_storeu_si128((__m128i *)(v542 + 4 * v109 + 16), v112);\n      v113 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v543 + 4 * v109 + 48)),\n               _mm_loadu_si128((const __m128i *)(v546 + 4 * v109 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v542 + 4 * v109 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v543 + 4 * v109 + 32)),\n          _mm_loadu_si128((const __m128i *)(v546 + 4 * v109 + 32))));\n      _mm_storeu_si128((__m128i *)(v542 + 4 * v109 + 48), v113);\n      v109 += 16LL;\n      v108 += 2LL;\n    }\n    while ( v108 );\n  }\n  if ( v107 )\n  {\n    v114 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v111 + 4 * v109 + 16)),\n             _mm_loadu_si128((const __m128i *)(v546 + 4 * v109 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v110 + 4 * v109),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v111 + 4 * v109)),\n        _mm_loadu_si128((const __m128i *)(v546 + 4 * v109))));\n    _mm_storeu_si128((__m128i *)(v110 + 4 * v109 + 16), v114);\n  }\n  if ( v102 != v531 )\n    goto LABEL_97;\nLABEL_103:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v122 = v533[9];\n  v123 = v535[9];\n  v124 = v535[13];\n  v541 = v533[9];\n  if ( v532 < 8 )\n  {\n    v125 = 0LL;\nLABEL_106:\n    v126 = v531 - v125 - 1;\n    if ( v531 & 3 )\n    {\n      v127 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v541 + 4 * v125) = *(_DWORD *)(v123 + 4 * v125) + *(_DWORD *)(v124 + 4 * v125);\n        ++v125;\n        ++v127;\n      }\n      while ( v127 );\n    }\n    if ( v126 >= 3 )\n    {\n      v128 = v531 - v125;\n      v129 = v541 + 4 * v125 + 12;\n      v130 = v124 + 4 * v125 + 12;\n      v131 = v123 + 4 * v125 + 12;\n      v132 = 0LL;\n      do\n      {\n        *(_DWORD *)(v129 + 4 * v132 - 12) = *(_DWORD *)(v131 + 4 * v132 - 12) + *(_DWORD *)(v130 + 4 * v132 - 12);\n        *(_DWORD *)(v129 + 4 * v132 - 8) = *(_DWORD *)(v131 + 4 * v132 - 8) + *(_DWORD *)(v130 + 4 * v132 - 8);\n        *(_DWORD *)(v129 + 4 * v132 - 4) = *(_DWORD *)(v131 + 4 * v132 - 4) + *(_DWORD *)(v130 + 4 * v132 - 4);\n        *(_DWORD *)(v129 + 4 * v132) = *(_DWORD *)(v131 + 4 * v132) + *(_DWORD *)(v130 + 4 * v132);\n        v132 += 4LL;\n      }\n      while ( v128 != v132 );\n    }\n    goto LABEL_123;\n  }\n  v133 = v122 + 4 * v531;\n  v134 = v123 < v133;\n  v135 = v124 < v133;\n  v125 = 0LL;\n  if ( v134 && v122 < v123 + 4 * v531 || v135 && v122 < v124 + 4 * v531 )\n    goto LABEL_106;\n  v125 = (unsigned int)v531 & 0xFFFFFFF8;\n  v136 = (unsigned __int64)(v125 - 8) >> 3;\n  v137 = ((_BYTE)v136 + 1) & 1;\n  if ( v125 == 8 )\n  {\n    v139 = 0LL;\n    v140 = v533[9];\n  }\n  else\n  {\n    v138 = v137 - 1 - v136;\n    v139 = 0LL;\n    v140 = v533[9];\n    do\n    {\n      v141 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v124 + 4 * v139 + 16)),\n               _mm_loadu_si128((const __m128i *)(v123 + 4 * v139 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v541 + 4 * v139),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v124 + 4 * v139)),\n          _mm_loadu_si128((const __m128i *)(v123 + 4 * v139))));\n      _mm_storeu_si128((__m128i *)(v541 + 4 * v139 + 16), v141);\n      v142 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v124 + 4 * v139 + 48)),\n               _mm_loadu_si128((const __m128i *)(v123 + 4 * v139 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v541 + 4 * v139 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v124 + 4 * v139 + 32)),\n          _mm_loadu_si128((const __m128i *)(v123 + 4 * v139 + 32))));\n      _mm_storeu_si128((__m128i *)(v541 + 4 * v139 + 48), v142);\n      v139 += 16LL;\n      v138 += 2LL;\n    }\n    while ( v138 );\n  }\n  if ( v137 )\n  {\n    v143 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v124 + 4 * v139 + 16)),\n             _mm_loadu_si128((const __m128i *)(v123 + 4 * v139 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v140 + 4 * v139),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v124 + 4 * v139)),\n        _mm_loadu_si128((const __m128i *)(v123 + 4 * v139))));\n    _mm_storeu_si128((__m128i *)(v140 + 4 * v139 + 16), v143);\n  }\n  if ( v125 != v531 )\n    goto LABEL_106;\nLABEL_123:\n  v549 = v123;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v144 = v533[10];\n  v145 = v535[10];\n  v146 = v535[14];\n  v539 = v533[10];\n  v540 = v535[14];\n  if ( v532 < 8 )\n  {\n    v147 = 0LL;\nLABEL_126:\n    v148 = v531 - v147 - 1;\n    if ( v531 & 3 )\n    {\n      v149 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v539 + 4 * v147) = *(_DWORD *)(v145 + 4 * v147) + *(_DWORD *)(v540 + 4 * v147);\n        ++v147;\n        ++v149;\n      }\n      while ( v149 );\n    }\n    if ( v148 >= 3 )\n    {\n      v150 = v531 - v147;\n      v151 = v539 + 4 * v147 + 12;\n      v152 = v540 + 4 * v147 + 12;\n      v153 = v145 + 4 * v147 + 12;\n      v154 = 0LL;\n      do\n      {\n        *(_DWORD *)(v151 + 4 * v154 - 12) = *(_DWORD *)(v153 + 4 * v154 - 12) + *(_DWORD *)(v152 + 4 * v154 - 12);\n        *(_DWORD *)(v151 + 4 * v154 - 8) = *(_DWORD *)(v153 + 4 * v154 - 8) + *(_DWORD *)(v152 + 4 * v154 - 8);\n        *(_DWORD *)(v151 + 4 * v154 - 4) = *(_DWORD *)(v153 + 4 * v154 - 4) + *(_DWORD *)(v152 + 4 * v154 - 4);\n        *(_DWORD *)(v151 + 4 * v154) = *(_DWORD *)(v153 + 4 * v154) + *(_DWORD *)(v152 + 4 * v154);\n        v154 += 4LL;\n      }\n      while ( v150 != v154 );\n    }\n    goto LABEL_143;\n  }\n  v155 = v144 + 4 * v531;\n  v156 = v145 < v155;\n  v157 = v146 < v155;\n  v147 = 0LL;\n  if ( v156 && v144 < v145 + 4 * v531 || v157 && v144 < v146 + 4 * v531 )\n    goto LABEL_126;\n  v147 = (unsigned int)v531 & 0xFFFFFFF8;\n  v158 = (unsigned __int64)(v147 - 8) >> 3;\n  v537 = ((_BYTE)v158 + 1) & 1;\n  if ( v147 == 8 )\n  {\n    v160 = 0LL;\n    v161 = v533[10];\n    v162 = v535[14];\n  }\n  else\n  {\n    v159 = (((_BYTE)v158 + 1) & 1) - 1LL - v158;\n    v160 = 0LL;\n    v161 = v533[10];\n    v162 = v535[14];\n    do\n    {\n      v163 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v540 + 4 * v160 + 16)),\n               _mm_loadu_si128((const __m128i *)(v145 + 4 * v160 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v539 + 4 * v160),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v540 + 4 * v160)),\n          _mm_loadu_si128((const __m128i *)(v145 + 4 * v160))));\n      _mm_storeu_si128((__m128i *)(v539 + 4 * v160 + 16), v163);\n      v164 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v540 + 4 * v160 + 48)),\n               _mm_loadu_si128((const __m128i *)(v145 + 4 * v160 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v539 + 4 * v160 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v540 + 4 * v160 + 32)),\n          _mm_loadu_si128((const __m128i *)(v145 + 4 * v160 + 32))));\n      _mm_storeu_si128((__m128i *)(v539 + 4 * v160 + 48), v164);\n      v160 += 16LL;\n      v159 += 2LL;\n    }\n    while ( v159 );\n  }\n  if ( v537 )\n  {\n    v165 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v162 + 4 * v160 + 16)),\n             _mm_loadu_si128((const __m128i *)(v145 + 4 * v160 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v161 + 4 * v160),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v162 + 4 * v160)),\n        _mm_loadu_si128((const __m128i *)(v145 + 4 * v160))));\n    _mm_storeu_si128((__m128i *)(v161 + 4 * v160 + 16), v165);\n  }\n  if ( v147 != v531 )\n    goto LABEL_126;\nLABEL_143:\n  v538 = v145;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v166 = v533[11];\n  v167 = v535[11];\n  v168 = v535[15];\n  v534 = v533[11];\n  v536 = v535[11];\n  if ( v532 < 8 )\n  {\n    v169 = 0LL;\nLABEL_156:\n    v181 = v531 - v169 - 1;\n    if ( v531 & 3 )\n    {\n      v182 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v534 + 4 * v169) = *(_DWORD *)(v536 + 4 * v169) + *(_DWORD *)(v168 + 4 * v169);\n        ++v169;\n        ++v182;\n      }\n      while ( v182 );\n    }\n    if ( v181 >= 3 )\n    {\n      v183 = v531 - v169;\n      v184 = v534 + 4 * v169 + 12;\n      v185 = v168 + 4 * v169 + 12;\n      v186 = v536 + 4 * v169 + 12;\n      v187 = 0LL;\n      do\n      {\n        *(_DWORD *)(v184 + 4 * v187 - 12) = *(_DWORD *)(v186 + 4 * v187 - 12) + *(_DWORD *)(v185 + 4 * v187 - 12);\n        *(_DWORD *)(v184 + 4 * v187 - 8) = *(_DWORD *)(v186 + 4 * v187 - 8) + *(_DWORD *)(v185 + 4 * v187 - 8);\n        *(_DWORD *)(v184 + 4 * v187 - 4) = *(_DWORD *)(v186 + 4 * v187 - 4) + *(_DWORD *)(v185 + 4 * v187 - 4);\n        *(_DWORD *)(v184 + 4 * v187) = *(_DWORD *)(v186 + 4 * v187) + *(_DWORD *)(v185 + 4 * v187);\n        v187 += 4LL;\n      }\n      while ( v183 != v187 );\n    }\n    goto LABEL_162;\n  }\n  v170 = v166 + 4 * v531;\n  v171 = v166 < v167 + 4 * v531;\n  v172 = v167 < v170;\n  v173 = v168 < v170;\n  v169 = 0LL;\n  if ( v172 && v171 || v173 && v166 < v168 + 4 * v531 )\n    goto LABEL_156;\n  v169 = (unsigned int)v531 & 0xFFFFFFF8;\n  v174 = (unsigned __int64)(v169 - 8) >> 3;\n  v175 = ((_BYTE)v174 + 1) & 1;\n  if ( v169 == 8 )\n  {\n    v177 = 0LL;\n  }\n  else\n  {\n    v176 = v175 - 1 - v174;\n    v177 = 0LL;\n    do\n    {\n      v178 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v168 + 4 * v177 + 16)),\n               _mm_loadu_si128((const __m128i *)(v536 + 4 * v177 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v534 + 4 * v177),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v168 + 4 * v177)),\n          _mm_loadu_si128((const __m128i *)(v536 + 4 * v177))));\n      _mm_storeu_si128((__m128i *)(v534 + 4 * v177 + 16), v178);\n      v179 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v168 + 4 * v177 + 48)),\n               _mm_loadu_si128((const __m128i *)(v536 + 4 * v177 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v534 + 4 * v177 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v168 + 4 * v177 + 32)),\n          _mm_loadu_si128((const __m128i *)(v536 + 4 * v177 + 32))));\n      _mm_storeu_si128((__m128i *)(v534 + 4 * v177 + 48), v179);\n      v177 += 16LL;\n      v176 += 2LL;\n    }\n    while ( v176 );\n  }\n  if ( v175 )\n  {\n    v180 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v168 + 4 * v177 + 16)),\n             _mm_loadu_si128((const __m128i *)(v536 + 4 * v177 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v534 + 4 * v177),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v168 + 4 * v177)),\n        _mm_loadu_si128((const __m128i *)(v536 + 4 * v177))));\n    _mm_storeu_si128((__m128i *)(v534 + 4 * v177 + 16), v180);\n  }\n  if ( v169 != v531 )\n    goto LABEL_156;\nLABEL_162:\n  v548 = v168;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v188 = v550[5];\n  v189 = *v188;\n  if ( v532 < 8 )\n  {\n    v190 = 0LL;\nLABEL_165:\n    v191 = v531 - v190 - 1;\n    if ( v531 & 3 )\n    {\n      v192 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v189 + 4 * v190) = *(_DWORD *)(v7 + 4 * v190) + *(_DWORD *)(v31 + 4 * v190);\n        ++v190;\n        ++v192;\n      }\n      while ( v192 );\n    }\n    if ( v191 >= 3 )\n    {\n      v193 = v531 - v190;\n      v194 = v189 + 4 * v190 + 12;\n      v195 = v31 + 4 * v190 + 12;\n      v196 = v7 + 4 * v190 + 12;\n      v197 = 0LL;\n      do\n      {\n        *(_DWORD *)(v194 + 4 * v197 - 12) = *(_DWORD *)(v196 + 4 * v197 - 12) + *(_DWORD *)(v195 + 4 * v197 - 12);\n        *(_DWORD *)(v194 + 4 * v197 - 8) = *(_DWORD *)(v196 + 4 * v197 - 8) + *(_DWORD *)(v195 + 4 * v197 - 8);\n        *(_DWORD *)(v194 + 4 * v197 - 4) = *(_DWORD *)(v196 + 4 * v197 - 4) + *(_DWORD *)(v195 + 4 * v197 - 4);\n        *(_DWORD *)(v194 + 4 * v197) = *(_DWORD *)(v196 + 4 * v197) + *(_DWORD *)(v195 + 4 * v197);\n        v197 += 4LL;\n      }\n      while ( v193 != v197 );\n    }\n    goto LABEL_182;\n  }\n  v198 = v189 + 4 * v531;\n  v199 = v7 < v198;\n  v200 = v31 < v198;\n  v190 = 0LL;\n  if ( v199 && v189 < v7 + 4 * v531 || v200 && v189 < v31 + 4 * v531 )\n    goto LABEL_165;\n  v190 = (unsigned int)v531 & 0xFFFFFFF8;\n  v201 = (unsigned __int64)(v190 - 8) >> 3;\n  v202 = ((_BYTE)v201 + 1) & 1;\n  if ( v190 == 8 )\n  {\n    v204 = 0LL;\n  }\n  else\n  {\n    v203 = v202 - 1 - v201;\n    v204 = 0LL;\n    do\n    {\n      v205 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v31 + 4 * v204 + 16)),\n               _mm_loadu_si128((const __m128i *)(v7 + 4 * v204 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v189 + 4 * v204),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v31 + 4 * v204)),\n          _mm_loadu_si128((const __m128i *)(v7 + 4 * v204))));\n      _mm_storeu_si128((__m128i *)(v189 + 4 * v204 + 16), v205);\n      v206 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v31 + 4 * v204 + 48)),\n               _mm_loadu_si128((const __m128i *)(v7 + 4 * v204 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v189 + 4 * v204 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v31 + 4 * v204 + 32)),\n          _mm_loadu_si128((const __m128i *)(v7 + 4 * v204 + 32))));\n      _mm_storeu_si128((__m128i *)(v189 + 4 * v204 + 48), v206);\n      v204 += 16LL;\n      v203 += 2LL;\n    }\n    while ( v203 );\n  }\n  if ( v202 )\n  {\n    v207 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v31 + 4 * v204 + 16)),\n             _mm_loadu_si128((const __m128i *)(v7 + 4 * v204 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v189 + 4 * v204),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v31 + 4 * v204)),\n        _mm_loadu_si128((const __m128i *)(v7 + 4 * v204))));\n    _mm_storeu_si128((__m128i *)(v189 + 4 * v204 + 16), v207);\n  }\n  if ( v190 != v531 )\n    goto LABEL_165;\nLABEL_182:\n  v208 = v531;\n  v209 = v188;\n  if ( (signed int)v532 <= 0 )\n    return;\n  v210 = v188[2];\n  if ( v532 < 8 )\n  {\n    v211 = 0LL;\n    v212 = v551;\nLABEL_185:\n    v213 = v208 - v211 - 1;\n    if ( v208 & 3 )\n    {\n      v214 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v210 + 4 * v211) = *(_DWORD *)(v52 + 4 * v211) + *(_DWORD *)(v212 + 4 * v211);\n        ++v211;\n        ++v214;\n      }\n      while ( v214 );\n    }\n    if ( v213 >= 3 )\n    {\n      v215 = v208 - v211;\n      v216 = v210 + 4 * v211 + 12;\n      v217 = v212 + 4 * v211 + 12;\n      v218 = v52 + 4 * v211 + 12;\n      v219 = 0LL;\n      do\n      {\n        *(_DWORD *)(v216 + 4 * v219 - 12) = *(_DWORD *)(v218 + 4 * v219 - 12) + *(_DWORD *)(v217 + 4 * v219 - 12);\n        *(_DWORD *)(v216 + 4 * v219 - 8) = *(_DWORD *)(v218 + 4 * v219 - 8) + *(_DWORD *)(v217 + 4 * v219 - 8);\n        *(_DWORD *)(v216 + 4 * v219 - 4) = *(_DWORD *)(v218 + 4 * v219 - 4) + *(_DWORD *)(v217 + 4 * v219 - 4);\n        *(_DWORD *)(v216 + 4 * v219) = *(_DWORD *)(v218 + 4 * v219) + *(_DWORD *)(v217 + 4 * v219);\n        v219 += 4LL;\n      }\n      while ( v215 != v219 );\n    }\n    goto LABEL_203;\n  }\n  v220 = v210 + 4 * v531;\n  v212 = v551;\n  v221 = v52 < v220;\n  v222 = v551 < v220;\n  v211 = 0LL;\n  if ( v221 && v210 < v52 + 4 * v531 )\n  {\n    v208 = v531;\n    goto LABEL_185;\n  }\n  v208 = v531;\n  if ( v222 && v210 < v551 + 4 * v531 )\n    goto LABEL_185;\n  v211 = (unsigned int)v531 & 0xFFFFFFF8;\n  v223 = (unsigned __int64)(v211 - 8) >> 3;\n  v224 = ((_BYTE)v223 + 1) & 1;\n  if ( v211 == 8 )\n  {\n    v226 = 0LL;\n  }\n  else\n  {\n    v225 = v224 - 1 - v223;\n    v226 = 0LL;\n    do\n    {\n      v227 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v551 + 4 * v226 + 16)),\n               _mm_loadu_si128((const __m128i *)(v52 + 4 * v226 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v210 + 4 * v226),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v551 + 4 * v226)),\n          _mm_loadu_si128((const __m128i *)(v52 + 4 * v226))));\n      _mm_storeu_si128((__m128i *)(v210 + 4 * v226 + 16), v227);\n      v228 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v551 + 4 * v226 + 48)),\n               _mm_loadu_si128((const __m128i *)(v52 + 4 * v226 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v210 + 4 * v226 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v551 + 4 * v226 + 32)),\n          _mm_loadu_si128((const __m128i *)(v52 + 4 * v226 + 32))));\n      _mm_storeu_si128((__m128i *)(v210 + 4 * v226 + 48), v228);\n      v226 += 16LL;\n      v225 += 2LL;\n    }\n    while ( v225 );\n  }\n  if ( v224 )\n  {\n    v229 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v551 + 4 * v226 + 16)),\n             _mm_loadu_si128((const __m128i *)(v52 + 4 * v226 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v210 + 4 * v226),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v551 + 4 * v226)),\n        _mm_loadu_si128((const __m128i *)(v52 + 4 * v226))));\n    _mm_storeu_si128((__m128i *)(v210 + 4 * v226 + 16), v229);\n  }\n  if ( v211 != v531 )\n    goto LABEL_185;\nLABEL_203:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v230 = v209[4];\n  if ( v532 < 8 )\n  {\n    v231 = 0LL;\nLABEL_217:\n    v245 = v208 - v231 - 1;\n    if ( v208 & 3 )\n    {\n      v246 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v230 + 4 * v231) = *(_DWORD *)(v8 + 4 * v231) + *(_DWORD *)(v32 + 4 * v231);\n        ++v231;\n        ++v246;\n      }\n      while ( v246 );\n    }\n    if ( v245 >= 3 )\n    {\n      v247 = v208 - v231;\n      v248 = v230 + 4 * v231 + 12;\n      v249 = v32 + 4 * v231 + 12;\n      v250 = v8 + 4 * v231 + 12;\n      v251 = 0LL;\n      do\n      {\n        *(_DWORD *)(v248 + 4 * v251 - 12) = *(_DWORD *)(v250 + 4 * v251 - 12) + *(_DWORD *)(v249 + 4 * v251 - 12);\n        *(_DWORD *)(v248 + 4 * v251 - 8) = *(_DWORD *)(v250 + 4 * v251 - 8) + *(_DWORD *)(v249 + 4 * v251 - 8);\n        *(_DWORD *)(v248 + 4 * v251 - 4) = *(_DWORD *)(v250 + 4 * v251 - 4) + *(_DWORD *)(v249 + 4 * v251 - 4);\n        *(_DWORD *)(v248 + 4 * v251) = *(_DWORD *)(v250 + 4 * v251) + *(_DWORD *)(v249 + 4 * v251);\n        v251 += 4LL;\n      }\n      while ( v247 != v251 );\n    }\n    goto LABEL_223;\n  }\n  v232 = v230 + 4 * v208;\n  v233 = v32 + 4 * v208;\n  v234 = v230 < v8 + 4 * v208;\n  v235 = v8 < v232;\n  v236 = v230 < v233;\n  v237 = v32 < v232;\n  v231 = 0LL;\n  if ( v235 && v234 )\n  {\n    v208 = v531;\n    goto LABEL_217;\n  }\n  v208 = v531;\n  if ( v237 && v236 )\n    goto LABEL_217;\n  v231 = (unsigned int)v531 & 0xFFFFFFF8;\n  v238 = (unsigned __int64)(v231 - 8) >> 3;\n  v239 = ((_BYTE)v238 + 1) & 1;\n  if ( v231 == 8 )\n  {\n    v241 = 0LL;\n  }\n  else\n  {\n    v240 = v239 - 1 - v238;\n    v241 = 0LL;\n    do\n    {\n      v242 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v32 + 4 * v241 + 16)),\n               _mm_loadu_si128((const __m128i *)(v8 + 4 * v241 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v230 + 4 * v241),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v32 + 4 * v241)),\n          _mm_loadu_si128((const __m128i *)(v8 + 4 * v241))));\n      _mm_storeu_si128((__m128i *)(v230 + 4 * v241 + 16), v242);\n      v243 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v32 + 4 * v241 + 48)),\n               _mm_loadu_si128((const __m128i *)(v8 + 4 * v241 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v230 + 4 * v241 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v32 + 4 * v241 + 32)),\n          _mm_loadu_si128((const __m128i *)(v8 + 4 * v241 + 32))));\n      _mm_storeu_si128((__m128i *)(v230 + 4 * v241 + 48), v243);\n      v241 += 16LL;\n      v240 += 2LL;\n    }\n    while ( v240 );\n  }\n  if ( v239 )\n  {\n    v244 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v32 + 4 * v241 + 16)),\n             _mm_loadu_si128((const __m128i *)(v8 + 4 * v241 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v230 + 4 * v241),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v32 + 4 * v241)),\n        _mm_loadu_si128((const __m128i *)(v8 + 4 * v241))));\n    _mm_storeu_si128((__m128i *)(v230 + 4 * v241 + 16), v244);\n  }\n  if ( v231 != v531 )\n    goto LABEL_217;\nLABEL_223:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v252 = v209[6];\n  if ( v532 < 8 )\n  {\n    v253 = 0LL;\n    v254 = v547;\nLABEL_226:\n    v255 = v208 - v253 - 1;\n    if ( v208 & 3 )\n    {\n      v256 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v252 + 4 * v253) = *(_DWORD *)(v53 + 4 * v253) + *(_DWORD *)(v254 + 4 * v253);\n        ++v253;\n        ++v256;\n      }\n      while ( v256 );\n    }\n    if ( v255 >= 3 )\n    {\n      v257 = v208 - v253;\n      v258 = v252 + 4 * v253 + 12;\n      v259 = v254 + 4 * v253 + 12;\n      v260 = v53 + 4 * v253 + 12;\n      v261 = 0LL;\n      do\n      {\n        *(_DWORD *)(v258 + 4 * v261 - 12) = *(_DWORD *)(v260 + 4 * v261 - 12) + *(_DWORD *)(v259 + 4 * v261 - 12);\n        *(_DWORD *)(v258 + 4 * v261 - 8) = *(_DWORD *)(v260 + 4 * v261 - 8) + *(_DWORD *)(v259 + 4 * v261 - 8);\n        *(_DWORD *)(v258 + 4 * v261 - 4) = *(_DWORD *)(v260 + 4 * v261 - 4) + *(_DWORD *)(v259 + 4 * v261 - 4);\n        *(_DWORD *)(v258 + 4 * v261) = *(_DWORD *)(v260 + 4 * v261) + *(_DWORD *)(v259 + 4 * v261);\n        v261 += 4LL;\n      }\n      while ( v257 != v261 );\n    }\n    goto LABEL_244;\n  }\n  v262 = v252 + 4 * v208;\n  v254 = v547;\n  v263 = v547 + 4 * v208;\n  v264 = v252 < v53 + 4 * v208;\n  v265 = v53 < v262;\n  v266 = v252 < v263;\n  v267 = v547 < v262;\n  v253 = 0LL;\n  if ( v265 && v264 )\n  {\n    v208 = v531;\n    goto LABEL_226;\n  }\n  v208 = v531;\n  if ( v267 && v266 )\n    goto LABEL_226;\n  v253 = (unsigned int)v531 & 0xFFFFFFF8;\n  v268 = (unsigned __int64)(v253 - 8) >> 3;\n  v269 = ((_BYTE)v268 + 1) & 1;\n  if ( v253 == 8 )\n  {\n    v271 = 0LL;\n  }\n  else\n  {\n    v270 = v269 - 1 - v268;\n    v271 = 0LL;\n    do\n    {\n      v272 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v547 + 4 * v271 + 16)),\n               _mm_loadu_si128((const __m128i *)(v53 + 4 * v271 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v252 + 4 * v271),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v547 + 4 * v271)),\n          _mm_loadu_si128((const __m128i *)(v53 + 4 * v271))));\n      _mm_storeu_si128((__m128i *)(v252 + 4 * v271 + 16), v272);\n      v273 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v547 + 4 * v271 + 48)),\n               _mm_loadu_si128((const __m128i *)(v53 + 4 * v271 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v252 + 4 * v271 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v547 + 4 * v271 + 32)),\n          _mm_loadu_si128((const __m128i *)(v53 + 4 * v271 + 32))));\n      _mm_storeu_si128((__m128i *)(v252 + 4 * v271 + 48), v273);\n      v271 += 16LL;\n      v270 += 2LL;\n    }\n    while ( v270 );\n  }\n  if ( v269 )\n  {\n    v274 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v547 + 4 * v271 + 16)),\n             _mm_loadu_si128((const __m128i *)(v53 + 4 * v271 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v252 + 4 * v271),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v547 + 4 * v271)),\n        _mm_loadu_si128((const __m128i *)(v53 + 4 * v271))));\n    _mm_storeu_si128((__m128i *)(v252 + 4 * v271 + 16), v274);\n  }\n  if ( v253 != v531 )\n    goto LABEL_226;\nLABEL_244:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v275 = v209[8];\n  if ( v532 < 8 )\n  {\n    v276 = 0LL;\nLABEL_258:\n    v289 = v208 - v276 - 1;\n    if ( v208 & 3 )\n    {\n      v290 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v275 + 4 * v276) = *(_DWORD *)(v546 + 4 * v276) + *(_DWORD *)(v549 + 4 * v276);\n        ++v276;\n        ++v290;\n      }\n      while ( v290 );\n    }\n    if ( v289 >= 3 )\n    {\n      v291 = v208 - v276;\n      v292 = v275 + 4 * v276 + 12;\n      v293 = v549 + 4 * v276 + 12;\n      v294 = v546 + 4 * v276 + 12;\n      v295 = 0LL;\n      do\n      {\n        *(_DWORD *)(v292 + 4 * v295 - 12) = *(_DWORD *)(v294 + 4 * v295 - 12) + *(_DWORD *)(v293 + 4 * v295 - 12);\n        *(_DWORD *)(v292 + 4 * v295 - 8) = *(_DWORD *)(v294 + 4 * v295 - 8) + *(_DWORD *)(v293 + 4 * v295 - 8);\n        *(_DWORD *)(v292 + 4 * v295 - 4) = *(_DWORD *)(v294 + 4 * v295 - 4) + *(_DWORD *)(v293 + 4 * v295 - 4);\n        *(_DWORD *)(v292 + 4 * v295) = *(_DWORD *)(v294 + 4 * v295) + *(_DWORD *)(v293 + 4 * v295);\n        v295 += 4LL;\n      }\n      while ( v291 != v295 );\n    }\n    goto LABEL_264;\n  }\n  v277 = v275 + 4 * v208;\n  v278 = v549 + 4 * v208;\n  v279 = v275 < v546 + 4 * v208;\n  v280 = v546 < v277;\n  v281 = v275 < v278;\n  v282 = v549 < v277;\n  v276 = 0LL;\n  if ( v280 && v279 )\n  {\n    v208 = v531;\n    goto LABEL_258;\n  }\n  v208 = v531;\n  if ( v282 && v281 )\n    goto LABEL_258;\n  v276 = (unsigned int)v531 & 0xFFFFFFF8;\n  v283 = (unsigned __int64)(v276 - 8) >> 3;\n  if ( v276 == 8 )\n  {\n    v285 = 0LL;\n  }\n  else\n  {\n    v284 = (((_BYTE)v283 + 1) & 1) - 1LL - v283;\n    v285 = 0LL;\n    do\n    {\n      v286 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v549 + 4 * v285 + 16)),\n               _mm_loadu_si128((const __m128i *)(v546 + 4 * v285 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v275 + 4 * v285),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v549 + 4 * v285)),\n          _mm_loadu_si128((const __m128i *)(v546 + 4 * v285))));\n      _mm_storeu_si128((__m128i *)(v275 + 4 * v285 + 16), v286);\n      v287 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v549 + 4 * v285 + 48)),\n               _mm_loadu_si128((const __m128i *)(v546 + 4 * v285 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v275 + 4 * v285 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v549 + 4 * v285 + 32)),\n          _mm_loadu_si128((const __m128i *)(v546 + 4 * v285 + 32))));\n      _mm_storeu_si128((__m128i *)(v275 + 4 * v285 + 48), v287);\n      v285 += 16LL;\n      v284 += 2LL;\n    }\n    while ( v284 );\n  }\n  if ( ((_BYTE)v283 + 1) & 1 )\n  {\n    v288 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v549 + 4 * v285 + 16)),\n             _mm_loadu_si128((const __m128i *)(v546 + 4 * v285 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v275 + 4 * v285),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v549 + 4 * v285)),\n        _mm_loadu_si128((const __m128i *)(v546 + 4 * v285))));\n    _mm_storeu_si128((__m128i *)(v275 + 4 * v285 + 16), v288);\n  }\n  if ( v276 != v531 )\n    goto LABEL_258;\nLABEL_264:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v296 = v209[10];\n  if ( v532 < 8 )\n  {\n    v297 = 0LL;\nLABEL_267:\n    v298 = v208 - v297 - 1;\n    if ( v208 & 3 )\n    {\n      v299 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v296 + 4 * v297) = *(_DWORD *)(v538 + 4 * v297) + *(_DWORD *)(v536 + 4 * v297);\n        ++v297;\n        ++v299;\n      }\n      while ( v299 );\n    }\n    if ( v298 >= 3 )\n    {\n      v300 = v208 - v297;\n      v301 = v296 + 4 * v297 + 12;\n      v302 = v536 + 4 * v297 + 12;\n      v303 = v538 + 4 * v297 + 12;\n      v304 = 0LL;\n      do\n      {\n        *(_DWORD *)(v301 + 4 * v304 - 12) = *(_DWORD *)(v303 + 4 * v304 - 12) + *(_DWORD *)(v302 + 4 * v304 - 12);\n        *(_DWORD *)(v301 + 4 * v304 - 8) = *(_DWORD *)(v303 + 4 * v304 - 8) + *(_DWORD *)(v302 + 4 * v304 - 8);\n        *(_DWORD *)(v301 + 4 * v304 - 4) = *(_DWORD *)(v303 + 4 * v304 - 4) + *(_DWORD *)(v302 + 4 * v304 - 4);\n        *(_DWORD *)(v301 + 4 * v304) = *(_DWORD *)(v303 + 4 * v304) + *(_DWORD *)(v302 + 4 * v304);\n        v304 += 4LL;\n      }\n      while ( v300 != v304 );\n    }\n    goto LABEL_285;\n  }\n  v305 = v296 + 4 * v208;\n  v306 = v536 + 4 * v208;\n  v307 = v296 < v538 + 4 * v208;\n  v308 = v538 < v305;\n  v309 = v296 < v306;\n  v310 = v536 < v305;\n  v297 = 0LL;\n  if ( v308 && v307 )\n  {\n    v208 = v531;\n    goto LABEL_267;\n  }\n  v208 = v531;\n  if ( v310 && v309 )\n    goto LABEL_267;\n  v297 = (unsigned int)v531 & 0xFFFFFFF8;\n  v311 = (unsigned __int64)(v297 - 8) >> 3;\n  if ( v297 == 8 )\n  {\n    v313 = 0LL;\n  }\n  else\n  {\n    v312 = (((_BYTE)v311 + 1) & 1) - 1LL - v311;\n    v313 = 0LL;\n    do\n    {\n      v314 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v536 + 4 * v313 + 16)),\n               _mm_loadu_si128((const __m128i *)(v538 + 4 * v313 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v296 + 4 * v313),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v536 + 4 * v313)),\n          _mm_loadu_si128((const __m128i *)(v538 + 4 * v313))));\n      _mm_storeu_si128((__m128i *)(v296 + 4 * v313 + 16), v314);\n      v315 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v536 + 4 * v313 + 48)),\n               _mm_loadu_si128((const __m128i *)(v538 + 4 * v313 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v296 + 4 * v313 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v536 + 4 * v313 + 32)),\n          _mm_loadu_si128((const __m128i *)(v538 + 4 * v313 + 32))));\n      _mm_storeu_si128((__m128i *)(v296 + 4 * v313 + 48), v315);\n      v313 += 16LL;\n      v312 += 2LL;\n    }\n    while ( v312 );\n  }\n  if ( ((_BYTE)v311 + 1) & 1 )\n  {\n    v316 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v536 + 4 * v313 + 16)),\n             _mm_loadu_si128((const __m128i *)(v538 + 4 * v313 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v296 + 4 * v313),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v536 + 4 * v313)),\n        _mm_loadu_si128((const __m128i *)(v538 + 4 * v313))));\n    _mm_storeu_si128((__m128i *)(v296 + 4 * v313 + 16), v316);\n  }\n  if ( v297 != v531 )\n    goto LABEL_267;\nLABEL_285:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v317 = v209[12];\n  if ( v532 < 8 )\n  {\n    v318 = 0LL;\n    v319 = v543;\nLABEL_288:\n    v320 = v208 - v318 - 1;\n    if ( v208 & 3 )\n    {\n      v321 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v317 + 4 * v318) = *(_DWORD *)(v319 + 4 * v318) + *(_DWORD *)(v124 + 4 * v318);\n        ++v318;\n        ++v321;\n      }\n      while ( v321 );\n    }\n    if ( v320 >= 3 )\n    {\n      v322 = v208 - v318;\n      v323 = v317 + 4 * v318 + 12;\n      v324 = v124 + 4 * v318 + 12;\n      v325 = v319 + 4 * v318 + 12;\n      v326 = 0LL;\n      do\n      {\n        *(_DWORD *)(v323 + 4 * v326 - 12) = *(_DWORD *)(v325 + 4 * v326 - 12) + *(_DWORD *)(v324 + 4 * v326 - 12);\n        *(_DWORD *)(v323 + 4 * v326 - 8) = *(_DWORD *)(v325 + 4 * v326 - 8) + *(_DWORD *)(v324 + 4 * v326 - 8);\n        *(_DWORD *)(v323 + 4 * v326 - 4) = *(_DWORD *)(v325 + 4 * v326 - 4) + *(_DWORD *)(v324 + 4 * v326 - 4);\n        *(_DWORD *)(v323 + 4 * v326) = *(_DWORD *)(v325 + 4 * v326) + *(_DWORD *)(v324 + 4 * v326);\n        v326 += 4LL;\n      }\n      while ( v322 != v326 );\n    }\n    goto LABEL_306;\n  }\n  v327 = v317 + 4 * v208;\n  v319 = v543;\n  v328 = v124 + 4 * v208;\n  v329 = v317 < v543 + 4 * v208;\n  v330 = v543 < v327;\n  v331 = v317 < v328;\n  v332 = v124 < v327;\n  v318 = 0LL;\n  if ( v330 && v329 )\n  {\n    v208 = v531;\n    goto LABEL_288;\n  }\n  v208 = v531;\n  if ( v332 && v331 )\n    goto LABEL_288;\n  v318 = (unsigned int)v531 & 0xFFFFFFF8;\n  v333 = (unsigned __int64)(v318 - 8) >> 3;\n  if ( v318 == 8 )\n  {\n    v335 = 0LL;\n  }\n  else\n  {\n    v334 = (((_BYTE)v333 + 1) & 1) - 1LL - v333;\n    v335 = 0LL;\n    do\n    {\n      v336 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v124 + 4 * v335 + 16)),\n               _mm_loadu_si128((const __m128i *)(v543 + 4 * v335 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v317 + 4 * v335),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v124 + 4 * v335)),\n          _mm_loadu_si128((const __m128i *)(v543 + 4 * v335))));\n      _mm_storeu_si128((__m128i *)(v317 + 4 * v335 + 16), v336);\n      v337 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v124 + 4 * v335 + 48)),\n               _mm_loadu_si128((const __m128i *)(v543 + 4 * v335 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v317 + 4 * v335 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v124 + 4 * v335 + 32)),\n          _mm_loadu_si128((const __m128i *)(v543 + 4 * v335 + 32))));\n      _mm_storeu_si128((__m128i *)(v317 + 4 * v335 + 48), v337);\n      v335 += 16LL;\n      v334 += 2LL;\n    }\n    while ( v334 );\n  }\n  if ( ((_BYTE)v333 + 1) & 1 )\n  {\n    v338 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v124 + 4 * v335 + 16)),\n             _mm_loadu_si128((const __m128i *)(v543 + 4 * v335 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v317 + 4 * v335),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v124 + 4 * v335)),\n        _mm_loadu_si128((const __m128i *)(v543 + 4 * v335))));\n    _mm_storeu_si128((__m128i *)(v317 + 4 * v335 + 16), v338);\n  }\n  v319 = v543;\n  if ( v318 != v531 )\n    goto LABEL_288;\nLABEL_306:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v339 = v209[14];\n  if ( v532 < 8 )\n  {\n    v340 = 0LL;\n    v341 = v540;\nLABEL_320:\n    v354 = v208 - v340 - 1;\n    if ( v208 & 3 )\n    {\n      v355 = -(v208 & 3);\n      do\n      {\n        *(_DWORD *)(v339 + 4 * v340) = *(_DWORD *)(v341 + 4 * v340) + *(_DWORD *)(v548 + 4 * v340);\n        ++v340;\n        ++v355;\n      }\n      while ( v355 );\n    }\n    if ( v354 >= 3 )\n    {\n      v356 = v208 - v340;\n      v357 = v339 + 4 * v340 + 12;\n      v358 = v548 + 4 * v340 + 12;\n      v359 = v341 + 4 * v340 + 12;\n      v360 = 0LL;\n      do\n      {\n        *(_DWORD *)(v357 + 4 * v360 - 12) = *(_DWORD *)(v359 + 4 * v360 - 12) + *(_DWORD *)(v358 + 4 * v360 - 12);\n        *(_DWORD *)(v357 + 4 * v360 - 8) = *(_DWORD *)(v359 + 4 * v360 - 8) + *(_DWORD *)(v358 + 4 * v360 - 8);\n        *(_DWORD *)(v357 + 4 * v360 - 4) = *(_DWORD *)(v359 + 4 * v360 - 4) + *(_DWORD *)(v358 + 4 * v360 - 4);\n        *(_DWORD *)(v357 + 4 * v360) = *(_DWORD *)(v359 + 4 * v360) + *(_DWORD *)(v358 + 4 * v360);\n        v360 += 4LL;\n      }\n      while ( v356 != v360 );\n    }\n    goto LABEL_326;\n  }\n  v342 = v339 + 4 * v208;\n  v341 = v540;\n  v343 = v548 + 4 * v208;\n  v344 = v339 < v540 + 4 * v208;\n  v345 = v540 < v342;\n  v346 = v339 < v343;\n  v347 = v548 < v342;\n  v340 = 0LL;\n  if ( v345 && v344 )\n  {\n    v208 = v531;\n    goto LABEL_320;\n  }\n  v208 = v531;\n  if ( v347 && v346 )\n    goto LABEL_320;\n  v340 = (unsigned int)v531 & 0xFFFFFFF8;\n  v348 = (unsigned __int64)(v340 - 8) >> 3;\n  if ( v340 == 8 )\n  {\n    v350 = 0LL;\n  }\n  else\n  {\n    v349 = (((_BYTE)v348 + 1) & 1) - 1LL - v348;\n    v350 = 0LL;\n    do\n    {\n      v351 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v548 + 4 * v350 + 16)),\n               _mm_loadu_si128((const __m128i *)(v540 + 4 * v350 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v339 + 4 * v350),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v548 + 4 * v350)),\n          _mm_loadu_si128((const __m128i *)(v540 + 4 * v350))));\n      _mm_storeu_si128((__m128i *)(v339 + 4 * v350 + 16), v351);\n      v352 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v548 + 4 * v350 + 48)),\n               _mm_loadu_si128((const __m128i *)(v540 + 4 * v350 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v339 + 4 * v350 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v548 + 4 * v350 + 32)),\n          _mm_loadu_si128((const __m128i *)(v540 + 4 * v350 + 32))));\n      _mm_storeu_si128((__m128i *)(v339 + 4 * v350 + 48), v352);\n      v350 += 16LL;\n      v349 += 2LL;\n    }\n    while ( v349 );\n  }\n  if ( ((_BYTE)v348 + 1) & 1 )\n  {\n    v353 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v548 + 4 * v350 + 16)),\n             _mm_loadu_si128((const __m128i *)(v540 + 4 * v350 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v339 + 4 * v350),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v548 + 4 * v350)),\n        _mm_loadu_si128((const __m128i *)(v540 + 4 * v350))));\n    _mm_storeu_si128((__m128i *)(v339 + 4 * v350 + 16), v353);\n  }\n  v341 = v540;\n  if ( v340 != v531 )\n    goto LABEL_320;\nLABEL_326:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v361 = v550[4];\n  v362 = *v361;\n  if ( v532 < 8 )\n  {\n    v363 = 0LL;\n    v364 = v552;\nLABEL_339:\n    v378 = v531 - v363 - 1;\n    if ( v531 & 3 )\n    {\n      v379 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v362 + 4 * v363) = *(_DWORD *)(v6 + 4 * v363) + *(_DWORD *)(v364 + 4 * v363);\n        ++v363;\n        ++v379;\n      }\n      while ( v379 );\n    }\n    if ( v378 >= 3 )\n    {\n      v380 = v531 - v363;\n      v381 = v362 + 4 * v363 + 12;\n      v382 = v364 + 4 * v363 + 12;\n      v383 = v6 + 4 * v363 + 12;\n      v384 = 0LL;\n      do\n      {\n        *(_DWORD *)(v381 + 4 * v384 - 12) = *(_DWORD *)(v383 + 4 * v384 - 12) + *(_DWORD *)(v382 + 4 * v384 - 12);\n        *(_DWORD *)(v381 + 4 * v384 - 8) = *(_DWORD *)(v383 + 4 * v384 - 8) + *(_DWORD *)(v382 + 4 * v384 - 8);\n        *(_DWORD *)(v381 + 4 * v384 - 4) = *(_DWORD *)(v383 + 4 * v384 - 4) + *(_DWORD *)(v382 + 4 * v384 - 4);\n        *(_DWORD *)(v381 + 4 * v384) = *(_DWORD *)(v383 + 4 * v384) + *(_DWORD *)(v382 + 4 * v384);\n        v384 += 4LL;\n      }\n      while ( v380 != v384 );\n    }\n    goto LABEL_345;\n  }\n  v365 = v362 + 4 * v208;\n  v364 = v552;\n  v366 = v552 + 4 * v208;\n  v367 = v362 < v6 + 4 * v208;\n  v368 = v6 < v365;\n  v369 = v362 < v366;\n  v370 = v552 < v365;\n  v363 = 0LL;\n  if ( v368 && v367 || v370 && v369 )\n    goto LABEL_339;\n  v363 = (unsigned int)v531 & 0xFFFFFFF8;\n  v371 = (unsigned __int64)(v363 - 8) >> 3;\n  v372 = ((_BYTE)v371 + 1) & 1;\n  if ( v363 == 8 )\n  {\n    v374 = 0LL;\n  }\n  else\n  {\n    v373 = v372 - 1 - v371;\n    v374 = 0LL;\n    do\n    {\n      v375 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v552 + 4 * v374 + 16)),\n               _mm_loadu_si128((const __m128i *)(v6 + 4 * v374 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v362 + 4 * v374),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v552 + 4 * v374)),\n          _mm_loadu_si128((const __m128i *)(v6 + 4 * v374))));\n      _mm_storeu_si128((__m128i *)(v362 + 4 * v374 + 16), v375);\n      v376 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v552 + 4 * v374 + 48)),\n               _mm_loadu_si128((const __m128i *)(v6 + 4 * v374 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v362 + 4 * v374 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v552 + 4 * v374 + 32)),\n          _mm_loadu_si128((const __m128i *)(v6 + 4 * v374 + 32))));\n      _mm_storeu_si128((__m128i *)(v362 + 4 * v374 + 48), v376);\n      v374 += 16LL;\n      v373 += 2LL;\n    }\n    while ( v373 );\n  }\n  if ( v372 )\n  {\n    v377 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v552 + 4 * v374 + 16)),\n             _mm_loadu_si128((const __m128i *)(v6 + 4 * v374 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v362 + 4 * v374),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v552 + 4 * v374)),\n        _mm_loadu_si128((const __m128i *)(v6 + 4 * v374))));\n    _mm_storeu_si128((__m128i *)(v362 + 4 * v374 + 16), v377);\n  }\n  if ( v363 != v531 )\n    goto LABEL_339;\nLABEL_345:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v385 = v361[2];\n  if ( v532 < 8 )\n  {\n    v386 = 0LL;\nLABEL_348:\n    v387 = v545;\nLABEL_349:\n    v388 = v531 - v386 - 1;\n    if ( v531 & 3 )\n    {\n      v389 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v385 + 4 * v386) = *(_DWORD *)(v387 + 4 * v386) + *(_DWORD *)(v544 + 4 * v386);\n        ++v386;\n        ++v389;\n      }\n      while ( v389 );\n    }\n    if ( v388 >= 3 )\n    {\n      v390 = v531 - v386;\n      v391 = v385 + 4 * v386 + 12;\n      v392 = v544 + 4 * v386 + 12;\n      v393 = v387 + 4 * v386 + 12;\n      v394 = 0LL;\n      do\n      {\n        *(_DWORD *)(v391 + 4 * v394 - 12) = *(_DWORD *)(v393 + 4 * v394 - 12) + *(_DWORD *)(v392 + 4 * v394 - 12);\n        *(_DWORD *)(v391 + 4 * v394 - 8) = *(_DWORD *)(v393 + 4 * v394 - 8) + *(_DWORD *)(v392 + 4 * v394 - 8);\n        *(_DWORD *)(v391 + 4 * v394 - 4) = *(_DWORD *)(v393 + 4 * v394 - 4) + *(_DWORD *)(v392 + 4 * v394 - 4);\n        *(_DWORD *)(v391 + 4 * v394) = *(_DWORD *)(v393 + 4 * v394) + *(_DWORD *)(v392 + 4 * v394);\n        v394 += 4LL;\n      }\n      while ( v390 != v394 );\n    }\n    goto LABEL_366;\n  }\n  v395 = v385 + 4 * v531;\n  v396 = v545 < v395;\n  v397 = v544 < v395;\n  v386 = 0LL;\n  if ( v396 && v385 < v545 + 4 * v531 )\n    goto LABEL_348;\n  v387 = v545;\n  if ( v397 && v385 < v544 + 4 * v531 )\n    goto LABEL_349;\n  v386 = (unsigned int)v531 & 0xFFFFFFF8;\n  v398 = (unsigned __int64)(v386 - 8) >> 3;\n  if ( v386 == 8 )\n  {\n    v400 = 0LL;\n  }\n  else\n  {\n    v399 = (((_BYTE)v398 + 1) & 1) - 1LL - v398;\n    v400 = 0LL;\n    do\n    {\n      v401 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v544 + 4 * v400 + 16)),\n               _mm_loadu_si128((const __m128i *)(v545 + 4 * v400 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v385 + 4 * v400),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v544 + 4 * v400)),\n          _mm_loadu_si128((const __m128i *)(v545 + 4 * v400))));\n      _mm_storeu_si128((__m128i *)(v385 + 4 * v400 + 16), v401);\n      v402 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v544 + 4 * v400 + 48)),\n               _mm_loadu_si128((const __m128i *)(v545 + 4 * v400 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v385 + 4 * v400 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v544 + 4 * v400 + 32)),\n          _mm_loadu_si128((const __m128i *)(v545 + 4 * v400 + 32))));\n      _mm_storeu_si128((__m128i *)(v385 + 4 * v400 + 48), v402);\n      v400 += 16LL;\n      v399 += 2LL;\n    }\n    while ( v399 );\n  }\n  if ( ((_BYTE)v398 + 1) & 1 )\n  {\n    v403 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v544 + 4 * v400 + 16)),\n             _mm_loadu_si128((const __m128i *)(v545 + 4 * v400 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v385 + 4 * v400),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v544 + 4 * v400)),\n        _mm_loadu_si128((const __m128i *)(v545 + 4 * v400))));\n    _mm_storeu_si128((__m128i *)(v385 + 4 * v400 + 16), v403);\n  }\n  v387 = v545;\n  if ( v386 != v531 )\n    goto LABEL_349;\nLABEL_366:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v404 = v361[8];\n  if ( v532 < 8 )\n  {\n    v405 = 0LL;\nLABEL_369:\n    v406 = v531 - v405 - 1;\n    if ( v531 & 3 )\n    {\n      v407 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v404 + 4 * v405) = *(_DWORD *)(v542 + 4 * v405) + *(_DWORD *)(v541 + 4 * v405);\n        ++v405;\n        ++v407;\n      }\n      while ( v407 );\n    }\n    if ( v406 >= 3 )\n    {\n      v408 = v531 - v405;\n      v409 = v404 + 4 * v405 + 12;\n      v410 = v541 + 4 * v405 + 12;\n      v411 = v542 + 4 * v405 + 12;\n      v412 = 0LL;\n      do\n      {\n        *(_DWORD *)(v409 + 4 * v412 - 12) = *(_DWORD *)(v411 + 4 * v412 - 12) + *(_DWORD *)(v410 + 4 * v412 - 12);\n        *(_DWORD *)(v409 + 4 * v412 - 8) = *(_DWORD *)(v411 + 4 * v412 - 8) + *(_DWORD *)(v410 + 4 * v412 - 8);\n        *(_DWORD *)(v409 + 4 * v412 - 4) = *(_DWORD *)(v411 + 4 * v412 - 4) + *(_DWORD *)(v410 + 4 * v412 - 4);\n        *(_DWORD *)(v409 + 4 * v412) = *(_DWORD *)(v411 + 4 * v412) + *(_DWORD *)(v410 + 4 * v412);\n        v412 += 4LL;\n      }\n      while ( v408 != v412 );\n    }\n    goto LABEL_386;\n  }\n  v413 = v404 + 4 * v531;\n  v414 = v542 < v413;\n  v415 = v541 < v413;\n  v405 = 0LL;\n  if ( v414 && v404 < v542 + 4 * v531 || v415 && v404 < v541 + 4 * v531 )\n    goto LABEL_369;\n  v405 = (unsigned int)v531 & 0xFFFFFFF8;\n  v416 = (unsigned __int64)(v405 - 8) >> 3;\n  if ( v405 == 8 )\n  {\n    v418 = 0LL;\n  }\n  else\n  {\n    v417 = (((_BYTE)v416 + 1) & 1) - 1LL - v416;\n    v418 = 0LL;\n    do\n    {\n      v419 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v541 + 4 * v418 + 16)),\n               _mm_loadu_si128((const __m128i *)(v542 + 4 * v418 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v404 + 4 * v418),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v541 + 4 * v418)),\n          _mm_loadu_si128((const __m128i *)(v542 + 4 * v418))));\n      _mm_storeu_si128((__m128i *)(v404 + 4 * v418 + 16), v419);\n      v420 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v541 + 4 * v418 + 48)),\n               _mm_loadu_si128((const __m128i *)(v542 + 4 * v418 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v404 + 4 * v418 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v541 + 4 * v418 + 32)),\n          _mm_loadu_si128((const __m128i *)(v542 + 4 * v418 + 32))));\n      _mm_storeu_si128((__m128i *)(v404 + 4 * v418 + 48), v420);\n      v418 += 16LL;\n      v417 += 2LL;\n    }\n    while ( v417 );\n  }\n  if ( ((_BYTE)v416 + 1) & 1 )\n  {\n    v421 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v541 + 4 * v418 + 16)),\n             _mm_loadu_si128((const __m128i *)(v542 + 4 * v418 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v404 + 4 * v418),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v541 + 4 * v418)),\n        _mm_loadu_si128((const __m128i *)(v542 + 4 * v418))));\n    _mm_storeu_si128((__m128i *)(v404 + 4 * v418 + 16), v421);\n  }\n  if ( v405 != v531 )\n    goto LABEL_369;\nLABEL_386:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v422 = v361[10];\n  if ( v532 < 8 )\n  {\n    v423 = 0LL;\nLABEL_389:\n    v424 = v531 - v423 - 1;\n    if ( v531 & 3 )\n    {\n      v425 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v422 + 4 * v423) = *(_DWORD *)(v539 + 4 * v423) + *(_DWORD *)(v534 + 4 * v423);\n        ++v423;\n        ++v425;\n      }\n      while ( v425 );\n    }\n    if ( v424 >= 3 )\n    {\n      v426 = v531 - v423;\n      v427 = v422 + 4 * v423 + 12;\n      v428 = v534 + 4 * v423 + 12;\n      v429 = v539 + 4 * v423 + 12;\n      v430 = 0LL;\n      do\n      {\n        *(_DWORD *)(v427 + 4 * v430 - 12) = *(_DWORD *)(v429 + 4 * v430 - 12) + *(_DWORD *)(v428 + 4 * v430 - 12);\n        *(_DWORD *)(v427 + 4 * v430 - 8) = *(_DWORD *)(v429 + 4 * v430 - 8) + *(_DWORD *)(v428 + 4 * v430 - 8);\n        *(_DWORD *)(v427 + 4 * v430 - 4) = *(_DWORD *)(v429 + 4 * v430 - 4) + *(_DWORD *)(v428 + 4 * v430 - 4);\n        *(_DWORD *)(v427 + 4 * v430) = *(_DWORD *)(v429 + 4 * v430) + *(_DWORD *)(v428 + 4 * v430);\n        v430 += 4LL;\n      }\n      while ( v426 != v430 );\n    }\n    goto LABEL_406;\n  }\n  v431 = v422 + 4 * v531;\n  v432 = v539 < v431;\n  v433 = v534 < v431;\n  v423 = 0LL;\n  if ( v432 && v422 < v539 + 4 * v531 || v433 && v422 < v534 + 4 * v531 )\n    goto LABEL_389;\n  v423 = (unsigned int)v531 & 0xFFFFFFF8;\n  v434 = (unsigned __int64)(v423 - 8) >> 3;\n  if ( v423 == 8 )\n  {\n    v436 = 0LL;\n  }\n  else\n  {\n    v435 = (((_BYTE)v434 + 1) & 1) - 1LL - v434;\n    v436 = 0LL;\n    do\n    {\n      v437 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v534 + 4 * v436 + 16)),\n               _mm_loadu_si128((const __m128i *)(v539 + 4 * v436 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v422 + 4 * v436),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v534 + 4 * v436)),\n          _mm_loadu_si128((const __m128i *)(v539 + 4 * v436))));\n      _mm_storeu_si128((__m128i *)(v422 + 4 * v436 + 16), v437);\n      v438 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v534 + 4 * v436 + 48)),\n               _mm_loadu_si128((const __m128i *)(v539 + 4 * v436 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v422 + 4 * v436 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v534 + 4 * v436 + 32)),\n          _mm_loadu_si128((const __m128i *)(v539 + 4 * v436 + 32))));\n      _mm_storeu_si128((__m128i *)(v422 + 4 * v436 + 48), v438);\n      v436 += 16LL;\n      v435 += 2LL;\n    }\n    while ( v435 );\n  }\n  if ( ((_BYTE)v434 + 1) & 1 )\n  {\n    v439 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v534 + 4 * v436 + 16)),\n             _mm_loadu_si128((const __m128i *)(v539 + 4 * v436 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v422 + 4 * v436),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v534 + 4 * v436)),\n        _mm_loadu_si128((const __m128i *)(v539 + 4 * v436))));\n    _mm_storeu_si128((__m128i *)(v422 + 4 * v436 + 16), v439);\n  }\n  if ( v423 != v531 )\n    goto LABEL_389;\nLABEL_406:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v440 = v550[3];\n  v441 = *v440;\n  if ( v532 < 8 )\n  {\n    v442 = 0LL;\nLABEL_419:\n    v450 = v531 - v442 - 1;\n    if ( v531 & 3 )\n    {\n      v451 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v441 + 4 * v442) = *(_DWORD *)(v362 + 4 * v442) + *(_DWORD *)(v404 + 4 * v442);\n        ++v442;\n        ++v451;\n      }\n      while ( v451 );\n    }\n    if ( v450 >= 3 )\n    {\n      v452 = v531 - v442;\n      v453 = v441 + 4 * v442 + 12;\n      v454 = v404 + 4 * v442 + 12;\n      v455 = v362 + 4 * v442 + 12;\n      v456 = 0LL;\n      do\n      {\n        *(_DWORD *)(v453 + 4 * v456 - 12) = *(_DWORD *)(v455 + 4 * v456 - 12) + *(_DWORD *)(v454 + 4 * v456 - 12);\n        *(_DWORD *)(v453 + 4 * v456 - 8) = *(_DWORD *)(v455 + 4 * v456 - 8) + *(_DWORD *)(v454 + 4 * v456 - 8);\n        *(_DWORD *)(v453 + 4 * v456 - 4) = *(_DWORD *)(v455 + 4 * v456 - 4) + *(_DWORD *)(v454 + 4 * v456 - 4);\n        *(_DWORD *)(v453 + 4 * v456) = *(_DWORD *)(v455 + 4 * v456) + *(_DWORD *)(v454 + 4 * v456);\n        v456 += 4LL;\n      }\n      while ( v452 != v456 );\n    }\n    goto LABEL_425;\n  }\n  v443 = v441 + 4 * v531;\n  v442 = 0LL;\n  if ( v362 < v443 && v441 < v362 + 4 * v531 || v404 < v443 && v441 < v404 + 4 * v531 )\n    goto LABEL_419;\n  v442 = (unsigned int)v531 & 0xFFFFFFF8;\n  v444 = (unsigned __int64)(v442 - 8) >> 3;\n  if ( v442 == 8 )\n  {\n    v446 = 0LL;\n  }\n  else\n  {\n    v445 = (((_BYTE)v444 + 1) & 1) - 1LL - v444;\n    v446 = 0LL;\n    do\n    {\n      v447 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v404 + 4 * v446 + 16)),\n               _mm_loadu_si128((const __m128i *)(v362 + 4 * v446 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v441 + 4 * v446),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v404 + 4 * v446)),\n          _mm_loadu_si128((const __m128i *)(v362 + 4 * v446))));\n      _mm_storeu_si128((__m128i *)(v441 + 4 * v446 + 16), v447);\n      v448 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v404 + 4 * v446 + 48)),\n               _mm_loadu_si128((const __m128i *)(v362 + 4 * v446 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v441 + 4 * v446 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v404 + 4 * v446 + 32)),\n          _mm_loadu_si128((const __m128i *)(v362 + 4 * v446 + 32))));\n      _mm_storeu_si128((__m128i *)(v441 + 4 * v446 + 48), v448);\n      v446 += 16LL;\n      v445 += 2LL;\n    }\n    while ( v445 );\n  }\n  if ( ((_BYTE)v444 + 1) & 1 )\n  {\n    v449 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v404 + 4 * v446 + 16)),\n             _mm_loadu_si128((const __m128i *)(v362 + 4 * v446 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v441 + 4 * v446),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v404 + 4 * v446)),\n        _mm_loadu_si128((const __m128i *)(v362 + 4 * v446))));\n    _mm_storeu_si128((__m128i *)(v441 + 4 * v446 + 16), v449);\n  }\n  if ( v442 != v531 )\n    goto LABEL_419;\nLABEL_425:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v457 = v440[2];\n  if ( v532 < 8 )\n  {\n    v458 = 0LL;\nLABEL_438:\n    v466 = v531 - v458 - 1;\n    if ( v531 & 3 )\n    {\n      v467 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v457 + 4 * v458) = *(_DWORD *)(v385 + 4 * v458) + *(_DWORD *)(v422 + 4 * v458);\n        ++v458;\n        ++v467;\n      }\n      while ( v467 );\n    }\n    if ( v466 >= 3 )\n    {\n      v468 = v531 - v458;\n      v469 = v457 + 4 * v458 + 12;\n      v470 = v422 + 4 * v458 + 12;\n      v471 = v385 + 4 * v458 + 12;\n      v472 = 0LL;\n      do\n      {\n        *(_DWORD *)(v469 + 4 * v472 - 12) = *(_DWORD *)(v471 + 4 * v472 - 12) + *(_DWORD *)(v470 + 4 * v472 - 12);\n        *(_DWORD *)(v469 + 4 * v472 - 8) = *(_DWORD *)(v471 + 4 * v472 - 8) + *(_DWORD *)(v470 + 4 * v472 - 8);\n        *(_DWORD *)(v469 + 4 * v472 - 4) = *(_DWORD *)(v471 + 4 * v472 - 4) + *(_DWORD *)(v470 + 4 * v472 - 4);\n        *(_DWORD *)(v469 + 4 * v472) = *(_DWORD *)(v471 + 4 * v472) + *(_DWORD *)(v470 + 4 * v472);\n        v472 += 4LL;\n      }\n      while ( v468 != v472 );\n    }\n    goto LABEL_444;\n  }\n  v459 = v457 + 4 * v531;\n  v458 = 0LL;\n  if ( v385 < v459 && v457 < v385 + 4 * v531 || v422 < v459 && v457 < v422 + 4 * v531 )\n    goto LABEL_438;\n  v458 = (unsigned int)v531 & 0xFFFFFFF8;\n  v460 = (unsigned __int64)(v458 - 8) >> 3;\n  if ( v458 == 8 )\n  {\n    v462 = 0LL;\n  }\n  else\n  {\n    v461 = (((_BYTE)v460 + 1) & 1) - 1LL - v460;\n    v462 = 0LL;\n    do\n    {\n      v463 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v422 + 4 * v462 + 16)),\n               _mm_loadu_si128((const __m128i *)(v385 + 4 * v462 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v457 + 4 * v462),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v422 + 4 * v462)),\n          _mm_loadu_si128((const __m128i *)(v385 + 4 * v462))));\n      _mm_storeu_si128((__m128i *)(v457 + 4 * v462 + 16), v463);\n      v464 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v422 + 4 * v462 + 48)),\n               _mm_loadu_si128((const __m128i *)(v385 + 4 * v462 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v457 + 4 * v462 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v422 + 4 * v462 + 32)),\n          _mm_loadu_si128((const __m128i *)(v385 + 4 * v462 + 32))));\n      _mm_storeu_si128((__m128i *)(v457 + 4 * v462 + 48), v464);\n      v462 += 16LL;\n      v461 += 2LL;\n    }\n    while ( v461 );\n  }\n  if ( ((_BYTE)v460 + 1) & 1 )\n  {\n    v465 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v422 + 4 * v462 + 16)),\n             _mm_loadu_si128((const __m128i *)(v385 + 4 * v462 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v457 + 4 * v462),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v422 + 4 * v462)),\n        _mm_loadu_si128((const __m128i *)(v385 + 4 * v462))));\n    _mm_storeu_si128((__m128i *)(v457 + 4 * v462 + 16), v465);\n  }\n  if ( v458 != v531 )\n    goto LABEL_438;\nLABEL_444:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v473 = v550[2];\n  v474 = *v473;\n  if ( v532 < 8 )\n  {\n    v475 = 0LL;\nLABEL_457:\n    v485 = v531 - v475 - 1;\n    if ( v531 & 3 )\n    {\n      v486 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v474 + 4 * v475) = *(_DWORD *)(v362 + 4 * v475) + *(_DWORD *)(v385 + 4 * v475);\n        ++v475;\n        ++v486;\n      }\n      while ( v486 );\n    }\n    if ( v485 >= 3 )\n    {\n      v487 = v474 + 4 * v475 + 12;\n      v488 = v385 + 4 * v475 + 12;\n      v489 = v362 + 4 * v475 + 12;\n      v490 = 0LL;\n      do\n      {\n        *(_DWORD *)(v474 + 4 * v475 + 4 * v490) = *(_DWORD *)(v489 + 4 * v490 - 12)\n                                                + *(_DWORD *)(v385 + 4 * v475 + 4 * v490);\n        *(_DWORD *)(v487 + 4 * v490 - 8) = *(_DWORD *)(v489 + 4 * v490 - 8) + *(_DWORD *)(v488 + 4 * v490 - 8);\n        *(_DWORD *)(v487 + 4 * v490 - 4) = *(_DWORD *)(v489 + 4 * v490 - 4) + *(_DWORD *)(v488 + 4 * v490 - 4);\n        *(_DWORD *)(v487 + 4 * v490) = *(_DWORD *)(v489 + 4 * v490) + *(_DWORD *)(v488 + 4 * v490);\n        v490 += 4LL;\n      }\n      while ( v531 - v475 != v490 );\n    }\n    goto LABEL_463;\n  }\n  v476 = v474 + 4 * v531;\n  v477 = v362 < v476;\n  v478 = v385 < v476;\n  v475 = 0LL;\n  if ( v477 && v474 < v362 + 4 * v531 || v478 && v474 < v385 + 4 * v531 )\n    goto LABEL_457;\n  v475 = (unsigned int)v531 & 0xFFFFFFF8;\n  v479 = (unsigned __int64)(v475 - 8) >> 3;\n  if ( v475 == 8 )\n  {\n    v481 = 0LL;\n  }\n  else\n  {\n    v480 = (((_BYTE)v479 + 1) & 1) - 1LL - v479;\n    v481 = 0LL;\n    do\n    {\n      v482 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v385 + 4 * v481 + 16)),\n               _mm_loadu_si128((const __m128i *)(v362 + 4 * v481 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v474 + 4 * v481),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v385 + 4 * v481)),\n          _mm_loadu_si128((const __m128i *)(v362 + 4 * v481))));\n      _mm_storeu_si128((__m128i *)(v474 + 4 * v481 + 16), v482);\n      v483 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v385 + 4 * v481 + 48)),\n               _mm_loadu_si128((const __m128i *)(v362 + 4 * v481 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v474 + 4 * v481 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v385 + 4 * v481 + 32)),\n          _mm_loadu_si128((const __m128i *)(v362 + 4 * v481 + 32))));\n      _mm_storeu_si128((__m128i *)(v474 + 4 * v481 + 48), v483);\n      v481 += 16LL;\n      v480 += 2LL;\n    }\n    while ( v480 );\n  }\n  if ( ((_BYTE)v479 + 1) & 1 )\n  {\n    v484 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v385 + 4 * v481 + 16)),\n             _mm_loadu_si128((const __m128i *)(v362 + 4 * v481 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v474 + 4 * v481),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v385 + 4 * v481)),\n        _mm_loadu_si128((const __m128i *)(v362 + 4 * v481))));\n    _mm_storeu_si128((__m128i *)(v474 + 4 * v481 + 16), v484);\n  }\n  if ( v475 != v531 )\n    goto LABEL_457;\nLABEL_463:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v491 = v473[8];\n  if ( v532 < 8 )\n  {\n    v492 = 0LL;\nLABEL_476:\n    v502 = v531 - v492 - 1;\n    if ( v531 & 3 )\n    {\n      v503 = -(v531 & 3);\n      do\n      {\n        *(_DWORD *)(v491 + 4 * v492) = *(_DWORD *)(v404 + 4 * v492) + *(_DWORD *)(v422 + 4 * v492);\n        ++v492;\n        ++v503;\n      }\n      while ( v503 );\n    }\n    if ( v502 >= 3 )\n    {\n      v504 = v531 - v492;\n      v505 = v491 + 4 * v492 + 12;\n      v506 = v422 + 4 * v492 + 12;\n      v507 = v404 + 4 * v492 + 12;\n      v508 = 0LL;\n      do\n      {\n        *(_DWORD *)(v505 + 4 * v508 - 12) = *(_DWORD *)(v507 + 4 * v508 - 12) + *(_DWORD *)(v506 + 4 * v508 - 12);\n        *(_DWORD *)(v505 + 4 * v508 - 8) = *(_DWORD *)(v507 + 4 * v508 - 8) + *(_DWORD *)(v506 + 4 * v508 - 8);\n        *(_DWORD *)(v505 + 4 * v508 - 4) = *(_DWORD *)(v507 + 4 * v508 - 4) + *(_DWORD *)(v506 + 4 * v508 - 4);\n        *(_DWORD *)(v505 + 4 * v508) = *(_DWORD *)(v507 + 4 * v508) + *(_DWORD *)(v506 + 4 * v508);\n        v508 += 4LL;\n      }\n      while ( v504 != v508 );\n    }\n    goto LABEL_482;\n  }\n  v493 = v491 + 4 * v531;\n  v494 = v404 < v493;\n  v495 = v422 < v493;\n  v492 = 0LL;\n  if ( v494 && v491 < v404 + 4 * v531 || v495 && v491 < v422 + 4 * v531 )\n    goto LABEL_476;\n  v492 = (unsigned int)v531 & 0xFFFFFFF8;\n  v496 = (unsigned __int64)(v492 - 8) >> 3;\n  if ( v492 == 8 )\n  {\n    v498 = 0LL;\n  }\n  else\n  {\n    v497 = (((_BYTE)v496 + 1) & 1) - 1LL - v496;\n    v498 = 0LL;\n    do\n    {\n      v499 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v422 + 4 * v498 + 16)),\n               _mm_loadu_si128((const __m128i *)(v404 + 4 * v498 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v491 + 4 * v498),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v422 + 4 * v498)),\n          _mm_loadu_si128((const __m128i *)(v404 + 4 * v498))));\n      _mm_storeu_si128((__m128i *)(v491 + 4 * v498 + 16), v499);\n      v500 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v422 + 4 * v498 + 48)),\n               _mm_loadu_si128((const __m128i *)(v404 + 4 * v498 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v491 + 4 * v498 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v422 + 4 * v498 + 32)),\n          _mm_loadu_si128((const __m128i *)(v404 + 4 * v498 + 32))));\n      _mm_storeu_si128((__m128i *)(v491 + 4 * v498 + 48), v500);\n      v498 += 16LL;\n      v497 += 2LL;\n    }\n    while ( v497 );\n  }\n  if ( ((_BYTE)v496 + 1) & 1 )\n  {\n    v501 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v422 + 4 * v498 + 16)),\n             _mm_loadu_si128((const __m128i *)(v404 + 4 * v498 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v491 + 4 * v498),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v422 + 4 * v498)),\n        _mm_loadu_si128((const __m128i *)(v404 + 4 * v498))));\n    _mm_storeu_si128((__m128i *)(v491 + 4 * v498 + 16), v501);\n  }\n  if ( v492 != v531 )\n    goto LABEL_476;\nLABEL_482:\n  if ( (signed int)v532 <= 0 )\n    return;\n  v509 = *v550[1];\n  if ( v532 < 8 )\n  {\n    v510 = 0LL;\nLABEL_485:\n    v511 = v531;\nLABEL_486:\n    v512 = v511 - v510 - 1;\n    v513 = v511 & 3;\n    if ( v513 )\n    {\n      v514 = -v513;\n      do\n      {\n        *(_DWORD *)(v509 + 4 * v510) = *(_DWORD *)(v441 + 4 * v510) + *(_DWORD *)(v457 + 4 * v510);\n        ++v510;\n        ++v514;\n      }\n      while ( v514 );\n    }\n    if ( v512 >= 3 )\n    {\n      v515 = v531 - v510;\n      v516 = v509 + 4 * v510 + 12;\n      v517 = v457 + 4 * v510 + 12;\n      v518 = v441 + 4 * v510 + 12;\n      v519 = 0LL;\n      do\n      {\n        *(_DWORD *)(v516 + 4 * v519 - 12) = *(_DWORD *)(v518 + 4 * v519 - 12) + *(_DWORD *)(v517 + 4 * v519 - 12);\n        *(_DWORD *)(v516 + 4 * v519 - 8) = *(_DWORD *)(v518 + 4 * v519 - 8) + *(_DWORD *)(v517 + 4 * v519 - 8);\n        *(_DWORD *)(v516 + 4 * v519 - 4) = *(_DWORD *)(v518 + 4 * v519 - 4) + *(_DWORD *)(v517 + 4 * v519 - 4);\n        *(_DWORD *)(v516 + 4 * v519) = *(_DWORD *)(v518 + 4 * v519) + *(_DWORD *)(v517 + 4 * v519);\n        v519 += 4LL;\n      }\n      while ( v515 != v519 );\n    }\n    return;\n  }\n  v520 = v509 + 4 * v531;\n  v521 = v441 < v520;\n  v522 = v457 < v520;\n  v510 = 0LL;\n  if ( v521 && v509 < v441 + 4 * v531 )\n    goto LABEL_485;\n  v523 = v522 && v509 < v457 + 4 * v531;\n  v511 = v531;\n  if ( v523 )\n    goto LABEL_486;\n  v510 = (unsigned int)v531 & 0xFFFFFFF8;\n  v524 = (unsigned __int64)(v510 - 8) >> 3;\n  v525 = ((_BYTE)v524 + 1) & 1;\n  if ( v510 == 8 )\n  {\n    v527 = 0LL;\n  }\n  else\n  {\n    v526 = v525 - 1 - v524;\n    v527 = 0LL;\n    do\n    {\n      v528 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v457 + 4 * v527 + 16)),\n               _mm_loadu_si128((const __m128i *)(v441 + 4 * v527 + 16)));\n      _mm_storeu_si128(\n        (__m128i *)(v509 + 4 * v527),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v457 + 4 * v527)),\n          _mm_loadu_si128((const __m128i *)(v441 + 4 * v527))));\n      _mm_storeu_si128((__m128i *)(v509 + 4 * v527 + 16), v528);\n      v529 = _mm_add_epi32(\n               _mm_loadu_si128((const __m128i *)(v457 + 4 * v527 + 48)),\n               _mm_loadu_si128((const __m128i *)(v441 + 4 * v527 + 48)));\n      _mm_storeu_si128(\n        (__m128i *)(v509 + 4 * v527 + 32),\n        _mm_add_epi32(\n          _mm_loadu_si128((const __m128i *)(v457 + 4 * v527 + 32)),\n          _mm_loadu_si128((const __m128i *)(v441 + 4 * v527 + 32))));\n      _mm_storeu_si128((__m128i *)(v509 + 4 * v527 + 48), v529);\n      v527 += 16LL;\n      v526 += 2LL;\n    }\n    while ( v526 );\n  }\n  if ( v525 )\n  {\n    v530 = _mm_add_epi32(\n             _mm_loadu_si128((const __m128i *)(v457 + 4 * v527 + 16)),\n             _mm_loadu_si128((const __m128i *)(v441 + 4 * v527 + 16)));\n    _mm_storeu_si128(\n      (__m128i *)(v509 + 4 * v527),\n      _mm_add_epi32(\n        _mm_loadu_si128((const __m128i *)(v457 + 4 * v527)),\n        _mm_loadu_si128((const __m128i *)(v441 + 4 * v527))));\n    _mm_storeu_si128((__m128i *)(v509 + 4 * v527 + 16), v530);\n  }\n  v511 = v531;\n  if ( v510 != v531 )\n    goto LABEL_486;\n}\n", 
            "funcStartAddr": "0x440c80L", 
            "funcEndAddr": "0x443cecL", 
            "funcName": "sub_440C80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_443CF0(int a1, int a2)\n{\n  __int64 v2; // r12\n  int v3; // eax\n  __int64 v4; // rdx\n  bool v5; // zf\n  int v6; // ebx\n  __int64 v7; // rax\n  __int64 *v8; // rcx\n  __int64 v9; // r14\n  __int64 v10; // r15\n  __int64 v11; // rsi\n  __int64 v12; // rdx\n  __int64 v13; // rbx\n  unsigned int v14; // ecx\n  __int64 v15; // rax\n  __int64 v16; // rdi\n  unsigned int v17; // edx\n  __int64 v18; // rcx\n  int v19; // edx\n  int v20; // esi\n  int v21; // esi\n  signed int *v22; // rdx\n  char *v23; // r13\n  int v24; // esi\n  __int64 v25; // rcx\n  __int64 v26; // r14\n  __int64 v27; // r15\n  signed __int64 v28; // r12\n  signed __int64 v29; // rsi\n  __int64 v30; // r9\n  __int64 v38; // rax\n  signed __int64 v39; // rsi\n  __int64 v40; // rbp\n  __int128 v41; // xmm1\n  __int64 v42; // rbx\n  char *v43; // r8\n  signed __int64 v44; // rdx\n  bool v45; // sf\n  unsigned __int8 v46; // of\n  int v47; // ebp\n  __int64 v48; // r8\n  unsigned int v49; // edi\n  int v50; // ebx\n  int v51; // esi\n  int v52; // er14\n  int v53; // esi\n  __int64 v54; // rax\n  unsigned __int64 v55; // rsi\n  int v56; // ecx\n  int v57; // er8\n  void *v58; // rax\n  signed __int64 v59; // rdi\n  char *v60; // r14\n  int v61; // eax\n  __int64 v62; // rsi\n  __int64 v63; // r13\n  int v64; // ebp\n  int v65; // ebx\n  int v66; // er15\n  int v67; // er12\n  unsigned __int16 *v68; // rax\n  __int64 v69; // rdi\n  __int64 v70; // rax\n  __int64 v71; // rdx\n  __int64 v72; // rsi\n  __int64 v73; // rbx\n  __int64 result; // rax\n  unsigned int v75; // [rsp+4h] [rbp-2C4h]\n  int v76; // [rsp+8h] [rbp-2C0h]\n  int v77; // [rsp+Ch] [rbp-2BCh]\n  int v78; // [rsp+10h] [rbp-2B8h]\n  signed int v79; // [rsp+14h] [rbp-2B4h]\n  int v80; // [rsp+18h] [rbp-2B0h]\n  unsigned __int16 v81; // [rsp+1Ch] [rbp-2ACh]\n  unsigned __int16 v82; // [rsp+1Eh] [rbp-2AAh]\n  __int64 v83; // [rsp+20h] [rbp-2A8h]\n  __int64 v84; // [rsp+28h] [rbp-2A0h]\n  __int64 v85; // [rsp+30h] [rbp-298h]\n  unsigned __int64 v86; // [rsp+38h] [rbp-290h]\n  _DWORD *v87; // [rsp+40h] [rbp-288h]\n  __int64 v88; // [rsp+48h] [rbp-280h]\n  __int64 v89; // [rsp+50h] [rbp-278h]\n  __int64 v90; // [rsp+58h] [rbp-270h]\n  __int64 v91; // [rsp+60h] [rbp-268h]\n  int v92; // [rsp+6Ch] [rbp-25Ch]\n  __int64 v93; // [rsp+70h] [rbp-258h]\n  __int64 v94; // [rsp+78h] [rbp-250h]\n  __int64 v95; // [rsp+80h] [rbp-248h]\n  __int64 v96; // [rsp+88h] [rbp-240h]\n  char v97; // [rsp+90h] [rbp-238h]\n\n  v93 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + a2) + 8LL * a1) + 56LL);\n  v85 = a2;\n  v2 = *(unsigned int *)(*((_QWORD *)qword_49FE38 + a2) + 4LL * a1);\n  v3 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v4 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v4 + 532) )\n      v3 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v5 = *(_DWORD *)(qword_4F9DB8 + 192) == 0;\n  v83 = a1;\n  if ( !v5 )\n  {\n    v6 = *((_DWORD *)off_49F6D0 + 6);\n    if ( !v6 || v6 == 3 )\n    {\n      v7 = *((_QWORD *)*(&base + a2 + v3) + a1);\nLABEL_10:\n      if ( *((_DWORD *)dest + 323) )\n      {\n        v8 = (__int64 *)(v7 + 6440);\n        goto LABEL_14;\n      }\n      goto LABEL_13;\n    }\n  }\n  if ( !*(_DWORD *)(qword_4F9DB8 + 196) )\n  {\n    v7 = *((_QWORD *)*(&base + a2 + v3) + a1);\n    goto LABEL_13;\n  }\n  v7 = *((_QWORD *)*(&base + a2 + v3) + a1);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n    goto LABEL_10;\nLABEL_13:\n  v8 = (__int64 *)(v7 + 6432);\nLABEL_14:\n  v96 = *v8;\n  v9 = *(unsigned int *)(v7 + 6392);\n  v10 = *(unsigned int *)(v7 + 6396);\n  v11 = *(_QWORD *)(qword_4F9E30 + 6480);\n  v12 = *(_QWORD *)(qword_4F9E30 + 6504);\n  v92 = (signed __int16)a1;\n  v13 = v85;\n  sub_444450((__int64)&v81, v11, v12, a1, v85, 0, 0, 16, 16);\n  v14 = v81;\n  LOWORD(v14) = (signed __int16)v81 >> 15;\n  v15 = *((_QWORD *)qword_49FE20 + v13);\n  v16 = v83;\n  *(_DWORD *)(v15 + 4 * v83) = (signed __int16)((signed __int16)(v81 + ((v14 >> 14) & 3)) >> 2);\n  v17 = v82;\n  LOWORD(v17) = (signed __int16)v82 >> 15;\n  v18 = *((_QWORD *)qword_49FE28 + v13);\n  *(_DWORD *)(v18 + 4 * v16) = (signed __int16)((signed __int16)(v82 + ((v17 >> 14) & 3)) >> 2);\n  v87 = dest;\n  if ( !*((_DWORD *)dest + 616) )\n  {\n    v19 = -(signed int)v2;\n    v20 = *(_DWORD *)(v15 + 4 * v16);\n    if ( (signed int)v2 <= v20 )\n      v20 = v2;\n    if ( v20 < v19 )\n      v20 = -(signed int)v2;\n    *(_DWORD *)(v15 + 4 * v16) = v20;\n    v21 = *(_DWORD *)(v18 + 4 * v16);\n    if ( (signed int)v2 <= v21 )\n      v21 = v2;\n    if ( v21 < v19 )\n      v21 = -(signed int)v2;\n    *(_DWORD *)(v18 + 4 * v16) = v21;\n  }\n  v88 = v2;\n  v75 = (2 * v2 + 1) * (2 * v2 + 1);\n  v22 = (signed int *)off_49F6D0;\n  *(_DWORD *)(v15 + 4 * v16) += *((_DWORD *)off_49F6D0 + 42);\n  v95 = v9;\n  v78 = v9 - 17;\n  v94 = v10;\n  v77 = v10 - 17;\n  v23 = &v97;\n  v24 = v22[43] + *(_DWORD *)(v18 + 4 * v16);\n  v80 = v24;\n  *(_DWORD *)(v18 + 4 * v16) = v24;\n  v76 = *(_DWORD *)(v15 + 4 * v16);\n  v25 = v22[43];\n  v26 = v22[42];\n  v27 = qword_4F9EB0;\n  v28 = v25 + 15;\n  v29 = v26 + 16;\n  v89 = v26 + 56;\n  v90 = v26 + 8;\n  v84 = v25;\n  v91 = v26 + 16;\n  do\n  {\n    v42 = *(_QWORD *)(v27 + 8 * v25);\n    v43 = v23 + 32;\n    if ( (unsigned __int64)v23 >= v42 + 2 * v29 || v42 + 2 * v26 >= (unsigned __int64)v43 )\n    {\n      v30 = 0LL;\n      v38 = v42 + 2 * v90 + 2 * v30;\n      v39 = -1LL;\n      v40 = 0LL;\n      do\n      {\n        v41 = *(_OWORD *)(v38 + v40);\n        *(_OWORD *)&v23[2 * v30 + v40] = *(_OWORD *)(v38 + v40 - 16);\n        *(_OWORD *)&v23[2 * v30 + 16 + v40] = v41;\n        v40 += 32LL;\n        ++v39;\n      }\n      while ( v39 );\n      v29 = v91;\n    }\n    else\n    {\n      v43 = v23;\n      v44 = v26 - 1;\n      do\n      {\n        *(_WORD *)v43 = *(_WORD *)(v42 + 2 * v44 + 2);\n        v43 += 2;\n        ++v44;\n      }\n      while ( v44 < v26 + 15 );\n    }\n    v46 = __OFSUB__(v25, v28);\n    v45 = v25++ - v28 < 0;\n    v23 = v43;\n  }\n  while ( v45 ^ v46 );\n  v79 = 1;\n  v47 = v80;\n  if ( v80 > v77 - (signed int)v88 )\n  {\n    v48 = v83;\n    v49 = v75;\n    v50 = v76;\n    v51 = v84;\n  }\n  else\n  {\n    v48 = v83;\n    v49 = v75;\n    v50 = v76;\n    v51 = v84;\n    if ( v80 >= (signed int)v88 && v76 >= (signed int)v88 && v76 <= v78 - (signed int)v88 )\n    {\n      qword_49FE40 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_475450;\n      v79 = 0;\n    }\n  }\n  if ( v87[616] )\n  {\n    v86 = v49;\n  }\n  else\n  {\n    v52 = v26 - v50;\n    v53 = v51 - v80;\n    v86 = v49;\n    v54 = 0LL;\n    while ( v52 != *((_DWORD *)qword_4F9F60 + v54) || v53 != *((_DWORD *)qword_4F9F68 + v54) )\n    {\n      if ( ++v54 >= v86 )\n        goto LABEL_49;\n    }\n    *(_DWORD *)(*((_QWORD *)qword_49FE30 + v85) + 4 * v48) = v54;\n  }\nLABEL_49:\n  v55 = 0LL;\n  do\n  {\n    v56 = v47 + *((_DWORD *)qword_4F9F68 + v55);\n    v57 = v50 + *((_DWORD *)qword_4F9F60 + v55);\n    if ( v79 )\n    {\n      if ( v56 < 0 || v57 > v78 || v56 > v77 || v57 < 0 )\n        v58 = sub_475460;\n      else\n        v58 = sub_475450;\n      qword_49FE40 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v58;\n    }\n    v59 = 0LL;\n    v60 = &v97;\n    v61 = 0;\n    v84 = v55;\n    LODWORD(v90) = v57;\n    do\n    {\n      LODWORD(v87) = v61;\n      v88 = v59;\n      v62 = (unsigned int)v56;\n      LODWORD(v89) = v56 + 4;\n      v63 = 0LL;\n      v64 = 0;\n      v65 = 0;\n      v66 = 0;\n      v67 = 0;\n      do\n      {\n        LODWORD(v91) = v62 + 1;\n        v68 = (unsigned __int16 *)qword_49FE40(v96, v62, (unsigned int)v57, v94, v95);\n        v57 = v90;\n        v64 += *((_DWORD *)qword_4F9DE8 + v68[3] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 6])\n             + *((_DWORD *)qword_4F9DE8 + v68[2] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 4])\n             + *((_DWORD *)qword_4F9DE8 + v68[1] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 2])\n             + *((_DWORD *)qword_4F9DE8 + *v68 - (unsigned __int64)*(unsigned __int16 *)&v60[v63]);\n        v65 += *((_DWORD *)qword_4F9DE8 + v68[7] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 14])\n             + *((_DWORD *)qword_4F9DE8 + v68[6] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 12])\n             + *((_DWORD *)qword_4F9DE8 + v68[5] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 10])\n             + *((_DWORD *)qword_4F9DE8 + v68[4] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 8]);\n        v67 += *((_DWORD *)qword_4F9DE8 + v68[11] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 22])\n             + *((_DWORD *)qword_4F9DE8 + v68[10] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 20])\n             + *((_DWORD *)qword_4F9DE8 + v68[9] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 18])\n             + *((_DWORD *)qword_4F9DE8 + v68[8] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 16]);\n        v66 += *((_DWORD *)qword_4F9DE8 + v68[15] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 30])\n             + *((_DWORD *)qword_4F9DE8 + v68[14] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 28])\n             + *((_DWORD *)qword_4F9DE8 + v68[13] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 26])\n             + *((_DWORD *)qword_4F9DE8 + v68[12] - (unsigned __int64)*(unsigned __int16 *)&v60[v63 + 24]);\n        v63 += 32LL;\n        v62 = (unsigned int)v91;\n      }\n      while ( (_DWORD)v63 != 128 );\n      v69 = v88;\n      v70 = 8 * v88;\n      v71 = v93;\n      v72 = v84;\n      *(_DWORD *)(*(_QWORD *)(v93 + 8 * v88) + 4 * v84) = v64;\n      *(_DWORD *)(*(_QWORD *)(v71 + (v70 | 8)) + 4 * v72) = v65;\n      *(_DWORD *)(*(_QWORD *)(v71 + (v70 | 0x10)) + 4 * v72) = v67;\n      v60 += 128;\n      v59 = v69 + 4;\n      *(_DWORD *)(*(_QWORD *)(v71 + (v70 | 0x18)) + 4 * v72) = v66;\n      v61 = (_DWORD)v87 + 1;\n      v56 = v89;\n    }\n    while ( (_DWORD)v87 != 3 );\n    v55 = v72 + 1;\n    v47 = v80;\n    v50 = v76;\n  }\n  while ( v55 < v86 );\n  v73 = v85;\n  sub_440C80(v85, v92, v75);\n  result = *((_QWORD *)qword_49FE18 + v73);\n  *(_DWORD *)(result + 4 * v83) = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x443cf0L", 
            "funcEndAddr": "0x444445L", 
            "funcName": "sub_443CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_444450(__int64 a1, __int64 a2, __int64 a3, __int16 a4, int a5, int a6, int a7, int a8, int a9)\n{\n  int v9; // er15\n  __int16 v10; // r12\n  signed int v11; // er13\n  int v12; // eax\n  int v13; // edi\n  __int64 v14; // rax\n  int v15; // er10\n  int v16; // er8\n  int v17; // ebp\n  int v18; // esi\n  int v19; // er11\n  bool v20; // al\n  int v21; // edi\n  bool v22; // zf\n  signed int v23; // ecx\n  int v24; // er10\n  __int64 v25; // r15\n  __int64 result; // rax\n  __int64 v27; // rbp\n  __int64 v28; // r12\n  int v29; // ebx\n  unsigned int v30; // esi\n  int v31; // er9\n  __int64 v32; // rdi\n  int v33; // er14\n  int v34; // er8\n  int v35; // er13\n  _QWORD *v36; // rcx\n  _QWORD *v37; // rcx\n  _QWORD *v38; // rcx\n  __int64 v39; // rcx\n  unsigned int *v40; // rcx\n  unsigned int *v41; // rcx\n  int v42; // er9\n  int v43; // ecx\n  int v44; // er9\n  int v45; // [rsp+Ch] [rbp-14Ch]\n  int v46; // [rsp+10h] [rbp-148h]\n  int v47; // [rsp+14h] [rbp-144h]\n  int v48; // [rsp+18h] [rbp-140h]\n  unsigned int v49; // [rsp+1Ch] [rbp-13Ch]\n  __int64 v50; // [rsp+20h] [rbp-138h]\n  unsigned int v51; // [rsp+28h] [rbp-130h]\n  unsigned int v52; // [rsp+2Ch] [rbp-12Ch]\n  __int128 v53; // [rsp+30h] [rbp-128h]\n  __int64 v54; // [rsp+40h] [rbp-118h]\n  __int64 v55; // [rsp+50h] [rbp-108h]\n  __int64 v56; // [rsp+58h] [rbp-100h]\n  __int64 v57; // [rsp+60h] [rbp-F8h]\n  __int64 v58; // [rsp+68h] [rbp-F0h]\n  __int64 v59; // [rsp+70h] [rbp-E8h]\n  __int64 v60; // [rsp+78h] [rbp-E0h]\n  __int64 v61; // [rsp+80h] [rbp-D8h]\n  _QWORD *v62; // [rsp+88h] [rbp-D0h]\n  _QWORD *v63; // [rsp+90h] [rbp-C8h]\n  int v64; // [rsp+98h] [rbp-C0h]\n  int v65; // [rsp+9Ch] [rbp-BCh]\n  int v66; // [rsp+A8h] [rbp-B0h]\n  int v67; // [rsp+ACh] [rbp-ACh]\n  int v68; // [rsp+B0h] [rbp-A8h]\n  int v69; // [rsp+B4h] [rbp-A4h]\n  int v70; // [rsp+C0h] [rbp-98h]\n  int v71; // [rsp+C4h] [rbp-94h]\n  int v72; // [rsp+CCh] [rbp-8Ch]\n  int v73; // [rsp+D0h] [rbp-88h]\n  int v74; // [rsp+D4h] [rbp-84h]\n  __int64 v75; // [rsp+D8h] [rbp-80h]\n  __int64 v76; // [rsp+E0h] [rbp-78h]\n  __int64 v77; // [rsp+E8h] [rbp-70h]\n  __int64 v78; // [rsp+F0h] [rbp-68h]\n  __int64 v79; // [rsp+F8h] [rbp-60h]\n  signed int *v80; // [rsp+100h] [rbp-58h]\n  __int64 v81; // [rsp+108h] [rbp-50h]\n  __int128 v82; // [rsp+110h] [rbp-48h]\n  __int64 v83; // [rsp+120h] [rbp-38h]\n\n  v9 = a6;\n  v45 = a5;\n  v10 = a4;\n  v50 = a3;\n  v81 = a1;\n  v11 = *((_DWORD *)off_49F6D0 + 3);\n  if ( *((_DWORD *)dest + 823) )\n    dword_4FA130 = 0;\n  sub_437270(v11, a6, a7, -1, 0, &v68);\n  sub_437270(v11, v9, a7, 0, -1, &v64);\n  sub_437270(v11, v9, a7, a8, -1, &v53);\n  sub_437270(v11, v9, a7, -1, -1, &v82);\n  if ( a7 <= 0 )\n  {\n    v13 = v45;\n    if ( (_DWORD)v53 )\n      goto LABEL_15;\n  }\n  else\n  {\n    v12 = 4 * v9;\n    if ( v9 > 1 )\n    {\n      v13 = v45;\n      if ( a8 + v12 != 16 )\n        goto LABEL_13;\n    }\n    else if ( a7 == 2 )\n    {\n      v13 = v45;\n      if ( a8 != 16 )\n      {\nLABEL_13:\n        LODWORD(v53) = v53 & 1;\n        if ( (_DWORD)v53 )\n          goto LABEL_15;\n        goto LABEL_14;\n      }\n    }\n    else\n    {\n      v13 = v45;\n      if ( a8 + v12 != 8 )\n        goto LABEL_13;\n    }\n    LODWORD(v53) = 0;\n  }\nLABEL_14:\n  v54 = v83;\n  v53 = v82;\nLABEL_15:\n  v74 = *((_DWORD *)off_49F6D0 + 18100);\n  if ( !v74 )\n  {\n    v15 = a8;\n    v16 = -1;\n    v17 = -1;\n    v47 = v68;\n    if ( v68 )\n      v17 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v70) + 2LL * v71);\n    v48 = v64;\n    if ( v64 )\n      v16 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v66) + 2LL * v67);\n    v46 = v53;\n    if ( (_DWORD)v53 )\n    {\n      v18 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * (signed int)v54) + 2LL * SHIDWORD(v54));\n      goto LABEL_36;\n    }\nLABEL_35:\n    v18 = -1;\n    v46 = 0;\n    goto LABEL_36;\n  }\n  v14 = *((_QWORD *)off_49F6D0 + 1771);\n  v47 = v68;\n  v15 = a8;\n  v16 = -1;\n  v17 = -1;\n  if ( !*(_DWORD *)(v14 + 632LL * *((signed int *)off_49F6D0 + 3) + 532) )\n  {\n    if ( v68 )\n      v17 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v70) + 2LL * v71) >> (*(_DWORD *)(v14 + 632LL * v69 + 532) != 0);\n    v48 = v64;\n    if ( v64 )\n      v16 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v66) + 2LL * v67) >> (*(_DWORD *)(v14 + 632LL * v65 + 532) != 0);\n    v46 = v53;\n    if ( (_DWORD)v53 )\n    {\n      v18 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * (signed int)v54) + 2LL * SHIDWORD(v54)) >> (*(_DWORD *)(v14 + 632LL * SDWORD1(v53) + 532) != 0);\n      goto LABEL_36;\n    }\n    goto LABEL_35;\n  }\n  if ( v68 )\n    v17 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v70) + 2LL * v71) << (*(_DWORD *)(v14 + 632LL * v69 + 532) == 0);\n  v48 = v64;\n  if ( v64 )\n    v16 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * v66) + 2LL * v67) << (*(_DWORD *)(v14 + 632LL * v65 + 532) == 0);\n  v46 = v53;\n  if ( !(_DWORD)v53 )\n    goto LABEL_35;\n  v18 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8LL * v13) + 8LL * (signed int)v54) + 2LL * SHIDWORD(v54)) << (*(_DWORD *)(v14 + 632LL * SDWORD1(v53) + 532) == 0);\nLABEL_36:\n  if ( v16 == v10 || v17 != v10 || (v19 = 1, v18 == v10) )\n  {\n    v20 = v18 != v10 && v16 == v10 && v17 != v10;\n    v19 = 2 * v20;\n    if ( !v20 && v17 != v10 )\n    {\n      v19 = 3 * (v18 == v10);\n      if ( v16 == v10 )\n        v19 = 0;\n    }\n  }\n  v80 = (signed int *)off_49F6D0;\n  if ( v15 != 8 || a9 != 16 )\n  {\n    if ( v15 == 16 && a9 == 8 )\n    {\n      if ( a7 )\n      {\n        v22 = v17 == v10;\n        v23 = 1;\n      }\n      else\n      {\n        v22 = v16 == v10;\n        v23 = 2;\n      }\n      if ( v22 )\n        v19 = v23;\n    }\n    v21 = v45;\n  }\n  else\n  {\n    v21 = v45;\n    if ( v9 )\n    {\n      if ( v18 == v10 )\n        v19 = 3;\n    }\n    else if ( v17 == v10 )\n    {\n      v19 = 1;\n    }\n  }\n  v24 = *((_DWORD *)dest + 823);\n  v25 = v21;\n  v59 = v70;\n  v56 = v71;\n  result = v66;\n  v55 = v66;\n  v27 = v67;\n  v72 = v48 | v46;\n  v75 = v69;\n  v58 = (signed int)v54;\n  v57 = SHIDWORD(v54);\n  v73 = v82;\n  v63 = qword_4F9DC8;\n  v60 = dword_4F9FF8;\n  v62 = qword_4F9DD0;\n  v61 = v10;\n  v77 = v65;\n  v76 = SDWORD1(v53);\n  v79 = (signed int)v83;\n  v28 = 0LL;\n  v78 = SHIDWORD(v83);\n  v49 = 0;\n  v29 = 0;\n  v30 = 0;\n  LOWORD(v31) = 0;\n  while ( 2 )\n  {\n    if ( v74 && v28 )\n    {\n      v32 = *((_QWORD *)v80 + 1771);\n      if ( !*(_DWORD *)(v32 + 632LL * v80[3] + 532) )\n      {\n        result = v30;\n        v33 = 0;\n        v34 = 0;\n        if ( v47 )\n          v34 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v59) + 8 * v56) + v28) << (*(_DWORD *)(v32 + 632 * v75 + 532) != 0);\n        if ( v48 )\n          v33 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v55) + 8 * v27) + v28) << (*(_DWORD *)(v32 + 632 * v77 + 532) != 0);\n        if ( v46 )\n        {\n          v35 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v58) + 8 * v57) + v28) << (*(_DWORD *)(v32 + 632 * v76 + 532) != 0);\n          goto LABEL_93;\n        }\n        goto LABEL_92;\n      }\n      v33 = 0;\n      v34 = 0;\n      if ( v47\n        && (v34 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v59) + 8 * v56) + v28),\n            !*(_DWORD *)(v32 + 632 * v75 + 532)) )\n      {\n        v34 /= 2;\n        if ( !v48 )\n          goto LABEL_71;\n      }\n      else if ( !v48 )\n      {\n        goto LABEL_71;\n      }\n      result = v55;\n      v33 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v55) + 8 * v27) + v28);\n      if ( !*(_DWORD *)(v32 + 632 * v77 + 532) )\n      {\n        v33 /= 2;\n        if ( v46 )\n        {\nLABEL_72:\n          v35 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v58) + 8 * v57) + v28);\n          if ( !*(_DWORD *)(v32 + 632 * v76 + 532) )\n            v35 /= 2;\nLABEL_93:\n          v21 = v45;\n          if ( !v24 )\n            goto LABEL_115;\n          goto LABEL_94;\n        }\nLABEL_92:\n        v35 = 0;\n        goto LABEL_93;\n      }\nLABEL_71:\n      if ( v46 )\n        goto LABEL_72;\n      goto LABEL_92;\n    }\n    v33 = 0;\n    v34 = 0;\n    if ( v47 )\n      v34 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v59) + 8 * v56) + v28);\n    if ( v48 )\n    {\n      result = v55;\n      v33 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v55) + 8 * v27) + v28);\n    }\n    if ( v46 )\n    {\n      v35 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8 * v25) + 8 * v58) + 8 * v57) + v28);\n      if ( !v24 )\n        goto LABEL_115;\n    }\n    else\n    {\n      v35 = 0;\n      if ( !v24 )\n        goto LABEL_115;\n    }\nLABEL_94:\n    v29 = 0;\n    v30 = 0;\n    if ( v47 )\n    {\n      if ( v21 == 1 )\n        v36 = *(_QWORD **)(v63[v59] + 8 * v56);\n      else\n        v36 = (_QWORD *)(*(_QWORD *)(v62[v59] + 8 * v56) + 8 * v61);\n      v30 = **(_DWORD **)(*v36 + 8 * v60);\n    }\n    if ( v48 )\n    {\n      if ( v21 == 1 )\n      {\n        result = v55;\n        v37 = *(_QWORD **)(v63[v55] + 8 * v27);\n      }\n      else\n      {\n        result = v55;\n        v37 = (_QWORD *)(*(_QWORD *)(v62[v55] + 8 * v27) + 8 * v61);\n      }\n      v29 = **(_DWORD **)(*v37 + 8 * v60);\n    }\n    if ( v73 )\n    {\n      if ( v21 == 1 )\n        v38 = *(_QWORD **)(v63[v79] + 8 * v78);\n      else\n        v38 = (_QWORD *)(*(_QWORD *)(v62[v79] + 8 * v78) + 8 * v61);\n      v40 = *(unsigned int **)(*v38 + 8 * v60);\n      result = *v40;\n      v49 = *v40;\n      if ( !v46 )\n        goto LABEL_115;\n      goto LABEL_108;\n    }\n    v49 = 0;\n    if ( v46 )\n    {\nLABEL_108:\n      if ( v21 == 1 )\n        v39 = **(_QWORD **)(v63[v58] + 8 * v57);\n      else\n        v39 = *(_QWORD *)(*(_QWORD *)(v62[v58] + 8 * v57) + 8 * v61);\n      v41 = *(unsigned int **)(v39 + 8 * v60);\n      result = *v41;\n      v49 = *v41;\n    }\nLABEL_115:\n    switch ( v19 )\n    {\n      case 0:\n        if ( !v72 )\n        {\n          if ( !v24 )\n            goto LABEL_140;\n          *(unsigned int *)((char *)&v51 + 2 * v28) = v30;\n          v31 = v34;\n          if ( !v30 )\n            goto LABEL_61;\nLABEL_138:\n          if ( v31 == v34 )\n            goto LABEL_139;\n          goto LABEL_61;\n        }\n        v42 = v35 + v33 + v34;\n        v43 = v35;\n        if ( v33 <= v35 )\n          v43 = v33;\n        if ( v33 >= v35 )\n          v35 = v33;\n        if ( v34 <= v43 )\n          v43 = v34;\n        v44 = v42 - v43;\n        if ( v34 >= v35 )\n          v35 = v34;\n        v31 = v44 - v35;\n        if ( !v24 )\n          goto LABEL_141;\n        if ( v30 )\n          goto LABEL_138;\nLABEL_61:\n        if ( v29 && v31 == v33 )\n          goto LABEL_131;\n        result = v49;\n        *(unsigned int *)((char *)&v51 + 2 * v28) = v49;\nLABEL_141:\n        *(_WORD *)(v81 + v28) = v31;\n        v28 += 2LL;\n        if ( v28 != 4 )\n          continue;\n        if ( v24 )\n        {\n          result = v51;\n          if ( (signed int)v51 > (signed int)v52 )\n            result = v52;\n          dword_4FA130 = result;\n        }\n        return result;\n      case 1:\n        if ( v24 )\nLABEL_139:\n          *(unsigned int *)((char *)&v51 + 2 * v28) = v30;\nLABEL_140:\n        LOWORD(v31) = v34;\n        goto LABEL_141;\n      case 2:\n        if ( v24 )\nLABEL_131:\n          *(unsigned int *)((char *)&v51 + 2 * v28) = v29;\n        LOWORD(v31) = v33;\n        goto LABEL_141;\n      case 3:\n        if ( v24 )\n        {\n          result = v49;\n          *(unsigned int *)((char *)&v51 + 2 * v28) = v49;\n        }\n        LOWORD(v31) = v35;\n        goto LABEL_141;\n      default:\n        goto LABEL_141;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x444450L", 
            "funcEndAddr": "0x444faeL", 
            "funcName": "sub_444450"
        }, 
        {
            "decompiledFuncCode": "signed int *sub_444FB0()\n{\n  int v0; // er15\n  signed int v1; // ebx\n  unsigned int v2; // ecx\n  size_t v3; // r13\n  int v4; // ecx\n  double v5; // xmm0_8\n  double v6; // xmm0_8\n  int v7; // ebp\n  int v8; // er12\n  char *v9; // rax\n  __int64 v10; // rcx\n  _DWORD *v11; // rbx\n  signed __int64 v12; // r15\n  _DWORD *v13; // r13\n  signed __int64 v14; // r9\n  int v15; // edi\n  signed int v16; // ebp\n  signed int v17; // edx\n  __int64 v18; // rax\n  __int64 v19; // rcx\n  char v20; // bp\n  unsigned __int64 v21; // rdx\n  __int64 v22; // rbp\n  int *v23; // rsi\n  __int64 v24; // rbp\n  __int64 v25; // rcx\n  int *v26; // rdx\n  int *v27; // rax\n  char *v28; // r11\n  unsigned int v29; // ebx\n  int v30; // eax\n  __int64 v31; // rsi\n  __int64 v32; // rcx\n  unsigned __int64 v33; // rdi\n  unsigned __int64 v34; // r9\n  __m128i v35; // xmm0\n  unsigned __int64 v36; // rdx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  signed __int64 v39; // r8\n  signed __int64 v40; // r14\n  __m128i *v41; // rdx\n  __int64 v42; // rax\n  unsigned int *v43; // rax\n  __int64 v44; // rcx\n  char *v45; // rax\n  signed __int64 v46; // rcx\n  char *v47; // rcx\n  _DWORD *v48; // r12\n  signed int v49; // eax\n  unsigned int v50; // er14\n  signed int v51; // er11\n  int v52; // ebx\n  signed int v53; // er10\n  signed int v54; // er8\n  signed __int64 v55; // r13\n  int v56; // er9\n  int v57; // ecx\n  __int64 v58; // rax\n  signed __int64 v59; // rdi\n  signed __int64 v60; // rsi\n  signed __int64 v61; // rax\n  signed __int64 v62; // rbp\n  int v63; // edx\n  int v64; // edx\n  __int64 v65; // r15\n  int v66; // er10\n  signed __int64 v67; // rsi\n  signed __int64 v68; // rax\n  __int64 v69; // rdi\n  __int64 v70; // rbp\n  int v71; // edx\n  int v72; // edx\n  signed int v73; // er15\n  bool v74; // cf\n  signed int *result; // rax\n  signed int v76; // [rsp+8h] [rbp-60h]\n  char *v77; // [rsp+8h] [rbp-60h]\n  signed int v78; // [rsp+10h] [rbp-58h]\n  int v79; // [rsp+10h] [rbp-58h]\n  signed __int64 v80; // [rsp+10h] [rbp-58h]\n  char *v81; // [rsp+18h] [rbp-50h]\n  signed int v82; // [rsp+20h] [rbp-48h]\n  unsigned int v83; // [rsp+20h] [rbp-48h]\n  signed __int64 v84; // [rsp+30h] [rbp-38h]\n\n  v0 = *((_DWORD *)off_49F6D0 + 18172);\n  if ( *((_DWORD *)off_49F6D0 + 18171) >= v0 )\n    v0 = *((_DWORD *)off_49F6D0 + 18171);\n  v1 = *((_DWORD *)dest + 8);\n  v2 = (2 * v1 + 1) * (2 * v1 + 1);\n  v3 = 9LL;\n  if ( v2 > 9 )\n    v3 = v2;\n  v4 = 16;\n  if ( *((_DWORD *)off_49F6D0 + 9) + 1 > 15 )\n    v4 = *((_DWORD *)off_49F6D0 + 9) + 1;\n  v5 = log((double)v4);\n  v78 = (signed int)floor(v5 / 0.6931471805599453 + 1.0e-10);\n  v82 = v1;\n  v6 = log((double)(8 * v1 + 13));\n  v76 = (signed int)ceil(v6 / 0.6931471805599453 + 1.0e-10);\n  dword_4FA104 = (1 << ((unsigned int)(2 * v76 + 3) >> 1)) - 1;\n  qword_4F9F60 = calloc(v3, 4uLL);\n  if ( !qword_4F9F60 )\n    sub_43EF40(0LL, (__int64)\"Init_Motion_Search_Module: spiral_search_x\");\n  qword_4F9F68 = calloc(v3, 4uLL);\n  if ( !qword_4F9F68 )\n    sub_43EF40(0LL, (__int64)\"Init_Motion_Search_Module: spiral_search_y\");\n  qword_4F9F18 = calloc(2 * dword_4FA104 + 1, 4uLL);\n  if ( !qword_4F9F18 )\n    sub_43EF40(0LL, (__int64)\"Init_Motion_Search_Module: mvbits\");\n  v7 = 2 * v0 + 2;\n  qword_4F9F50 = calloc((1 << (v78 + 1)) - 1, 4uLL);\n  if ( !qword_4F9F50 )\n    sub_43EF40(0LL, (__int64)\"Init_Motion_Search_Module: refbits\");\n  qword_4F9DE8 = calloc(v7, 4uLL);\n  if ( !qword_4F9DE8 )\n    sub_43EF40(0LL, (__int64)\"Init_Motion_Search_Module: byte_abs\");\n  v8 = 2 * v78 + 1;\n  sub_43F900((__int64 *)&qword_4F9F10, 8, 2, *((_DWORD *)off_49F6D0 + 9) + 1, 4);\n  v9 = (char *)qword_4F9F18;\n  v10 = dword_4FA104;\n  v11 = (char *)qword_4F9F18 + 4 * dword_4FA104;\n  qword_4F9F18 = v11;\n  v79 = 2 * v0 + 2;\n  v12 = v7 / 2;\n  v81 = (char *)qword_4F9DE8;\n  v13 = (char *)qword_4F9DE8 + 4 * v12;\n  qword_4F9DE8 = (char *)qword_4F9DE8 + 4 * v12;\n  *v11 = 1;\n  if ( v76 >= 0 )\n  {\n    v14 = (signed __int64)&v9[4 * v10 + 12];\n    v15 = 3;\n    do\n    {\n      v16 = 1 << ((unsigned int)v15 >> 1);\n      v17 = v16 >> 1;\n      if ( v16 >> 1 < v16 )\n      {\n        v18 = v17;\n        v19 = v16;\n        v20 = v16 - v17;\n        v21 = v19 - 1 - v17;\n        v22 = v20 & 3;\n        if ( v22 )\n        {\n          v23 = &v11[-v18];\n          v24 = -v22;\n          do\n          {\n            v11[v18] = v15;\n            *v23 = v15;\n            ++v18;\n            --v23;\n            ++v24;\n          }\n          while ( v24 );\n        }\n        if ( v21 >= 3 )\n        {\n          v25 = v19 - v18;\n          v26 = &v11[-v18];\n          v27 = (int *)(v14 + 4 * v18);\n          do\n          {\n            *(v27 - 3) = v15;\n            *v26 = v15;\n            *(v27 - 2) = v15;\n            *(v26 - 1) = v15;\n            *(v27 - 1) = v15;\n            *(v26 - 2) = v15;\n            *v27 = v15;\n            *(v26 - 3) = v15;\n            v26 -= 4;\n            v27 += 4;\n            v25 -= 4LL;\n          }\n          while ( v25 );\n        }\n      }\n      v15 += 2;\n    }\n    while ( v15 <= 2 * v76 + 3 );\n  }\n  v28 = (char *)qword_4F9F50;\n  *(_DWORD *)qword_4F9F50 = 1;\n  if ( v8 >= 3 )\n  {\n    v29 = 3;\n    while ( 1 )\n    {\n      v30 = (2 << (v29 >> 1)) - 1;\n      if ( v30 >> 1 >= v30 )\n        goto LABEL_43;\n      v31 = v30 >> 1;\n      v32 = v30;\n      v33 = v30 - v31;\n      if ( v33 < 8 )\n        goto LABEL_41;\n      v34 = v33 & 0xFFFFFFFFFFFFFFF8LL;\n      v35 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v29), 0);\n      v36 = ((v33 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n      v37 = ((_BYTE)v36 + 1) & 3;\n      if ( (v33 & 0xFFFFFFFFFFFFFFF8LL) - 8 < 0x18 )\n        break;\n      v39 = (signed __int64)&v28[4 * v31 + 112];\n      v40 = v37 - 1 - v36;\n      v38 = 0LL;\n      do\n      {\n        _mm_storeu_si128((__m128i *)&v28[4 * v31 + 4 * v38], v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 96), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 80), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 64), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 48), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 32), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38 - 16), v35);\n        _mm_storeu_si128((__m128i *)(v39 + 4 * v38), v35);\n        v38 += 32LL;\n        v40 += 4LL;\n      }\n      while ( v40 );\n      if ( v37 )\n        goto LABEL_37;\nLABEL_39:\n      if ( v33 != v34 )\n      {\n        v31 += v34;\nLABEL_41:\n        v43 = (unsigned int *)&v28[4 * v31];\n        v44 = v32 - v31;\n        do\n        {\n          *v43 = v29;\n          ++v43;\n          --v44;\n        }\n        while ( v44 );\n      }\nLABEL_43:\n      v29 += 2;\n      if ( (signed int)v29 > v8 )\n        goto LABEL_44;\n    }\n    v38 = 0LL;\n    if ( !v37 )\n      goto LABEL_39;\nLABEL_37:\n    v41 = (__m128i *)&v28[4 * (v31 + v38) + 16];\n    v42 = -v37;\n    do\n    {\n      _mm_storeu_si128(v41 - 1, v35);\n      _mm_storeu_si128(v41, v35);\n      v41 += 2;\n      ++v42;\n    }\n    while ( v42 );\n    goto LABEL_39;\n  }\nLABEL_44:\n  *v13 = 0;\n  if ( v79 >= 4 )\n  {\n    v45 = &v81[4 * v12 - 4];\n    v46 = 1LL;\n    do\n    {\n      *(_DWORD *)v45 = v46;\n      v13[v46] = v46;\n      ++v46;\n      v45 -= 4;\n    }\n    while ( v46 < v12 );\n  }\n  v47 = (char *)qword_4F9F68;\n  *(_DWORD *)qword_4F9F68 = 0;\n  v48 = qword_4F9F60;\n  *(_DWORD *)qword_4F9F60 = 0;\n  v49 = v82;\n  v50 = 1;\n  if ( v82 <= 0 )\n    v49 = 1;\n  v83 = v49;\n  v80 = (signed __int64)(v47 + 8);\n  v77 = v47;\n  v84 = (signed __int64)(v47 + 20);\n  v51 = 2;\n  v52 = 0;\n  v53 = 1;\n  v54 = 2;\n  v55 = 6LL;\n  v56 = 0;\n  do\n  {\n    v57 = -v50;\n    v58 = v53;\n    v48[v58] = 1 - v50;\n    *(_DWORD *)&v77[4 * v58] = -v50;\n    v48[v58 + 1] = 1 - v50;\n    *(_DWORD *)&v77[4 * v58 + 4] = v50;\n    if ( v56 & 0x7FFFFFFF )\n    {\n      v59 = v80 + 4LL * v53;\n      v60 = (signed __int64)&v48[v53 + 2];\n      v61 = 1LL;\n      v62 = 1LL;\n      do\n      {\n        v48[2 * v61 + v53] = v52 + v61;\n        *(_DWORD *)(v59 + 8 * v61 - 8) = v57;\n        *(_DWORD *)(v60 + 8 * v61 - 4) = v52 + v61;\n        *(_DWORD *)(v59 + 8 * v61 - 4) = v50;\n        v63 = v52 + v61 + 1;\n        *(_DWORD *)(v60 + 8 * v61) = v63;\n        *(_DWORD *)(v59 + 8 * v61) = v57;\n        *(_DWORD *)(v60 + 8 * v61 + 4) = v63;\n        *(_DWORD *)(v59 + 8 * v61 + 4) = v50;\n        v62 += 2LL;\n        v64 = v52 + v61 + 2;\n        v61 = v62;\n      }\n      while ( v64 != v50 );\n    }\n    v65 = v54 + v53;\n    v48[v65] = v57;\n    *(_DWORD *)&v77[4 * v65] = v57;\n    v48[v65 + 1] = v50;\n    *(_DWORD *)&v77[4 * v65 + 4] = v57;\n    if ( (v56 & 0x7FFFFFFF) != 0x7FFFFFFF )\n    {\n      v66 = v54 + v53;\n      v67 = v84 + 4LL * v66;\n      v68 = (signed __int64)&v48[v66 + 5];\n      v69 = 0LL;\n      v70 = 0LL;\n      do\n      {\n        *(_DWORD *)(v68 + 8 * v69 - 12) = v57;\n        *(_DWORD *)(v67 + 8 * v69 - 12) = v52 + v69;\n        *(_DWORD *)(v68 + 8 * v69 - 8) = v50;\n        *(_DWORD *)(v67 + 8 * v69 - 8) = v52 + v69;\n        *(_DWORD *)(v68 + 8 * v69 - 4) = v57;\n        v71 = v52 + v69 + 1;\n        *(_DWORD *)(v67 + 8 * v69 - 4) = v71;\n        *(_DWORD *)(v68 + 8 * v69) = v50;\n        *(_DWORD *)(v67 + 8 * v69) = v71;\n        v70 += 2LL;\n        v72 = v52 + v69 + 2;\n        v69 = v70;\n      }\n      while ( v72 != v51 );\n    }\n    v73 = v55 + v65;\n    v54 += 4;\n    v55 += 4LL;\n    ++v51;\n    ++v56;\n    --v52;\n    v53 = v73;\n    v74 = v50++ < v83;\n  }\n  while ( v74 );\n  result = (signed int *)dest;\n  if ( !*((_DWORD *)dest + 823) )\n    result = sub_440260();\n  return result;\n}\n", 
            "funcStartAddr": "0x444fb0L", 
            "funcEndAddr": "0x445617L", 
            "funcName": "sub_444FB0"
        }, 
        {
            "decompiledFuncCode": "void sub_445620()\n{\n  int v0; // eax\n\n  qword_4F9F18 = (char *)qword_4F9F18 - 4 * dword_4FA104;\n  v0 = *((_DWORD *)off_49F6D0 + 18172);\n  if ( *((_DWORD *)off_49F6D0 + 18171) >= v0 )\n    v0 = *((_DWORD *)off_49F6D0 + 18171);\n  qword_4F9DE8 = (char *)qword_4F9DE8 - 4 * v0 - 4;\n  free(qword_4F9F60);\n  free(qword_4F9F68);\n  free(qword_4F9F18);\n  free(qword_4F9F50);\n  free(qword_4F9DE8);\n  sub_43FD20(qword_4F9F10, 8u, 2u);\n  if ( !*((_DWORD *)dest + 823) )\n    sub_4408A0();\n}\n", 
            "funcStartAddr": "0x445620L", 
            "funcEndAddr": "0x4456c6L", 
            "funcName": "sub_445620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4456D0(__int64 a1, __int16 a2, int a3, int a4, int a5, int a6, double a7, __int16 a8, __int16 a9, _WORD *a10, _WORD *a11, int a12, int a13)\n{\n  int v13; // er10\n  int v14; // edi\n  __int64 v15; // rax\n  __int64 v16; // rdi\n  double v17; // xmm0_8\n  double v18; // xmm0_8\n  int v19; // ebx\n  __int64 *v20; // rdi\n  int v21; // er9\n  void *v22; // rcx\n  signed int v23; // er15\n  int v24; // ebp\n  int v25; // edi\n  signed int v26; // esi\n  unsigned __int64 v27; // rdx\n  unsigned int v28; // er12\n  int v29; // er14\n  signed int v30; // eax\n  int v31; // ebx\n  __int64 v32; // r15\n  __int64 v33; // rax\n  __int64 v34; // rcx\n  __int64 v35; // rsi\n  int v36; // eax\n  int v37; // ecx\n  int v39; // [rsp+Ch] [rbp-ACh]\n  int v40; // [rsp+10h] [rbp-A8h]\n  signed int v41; // [rsp+14h] [rbp-A4h]\n  int v42; // [rsp+18h] [rbp-A0h]\n  bool v43; // [rsp+1Ch] [rbp-9Ch]\n  int v44; // [rsp+20h] [rbp-98h]\n  signed int v45; // [rsp+24h] [rbp-94h]\n  __int64 v46; // [rsp+28h] [rbp-90h]\n  unsigned int v47; // [rsp+38h] [rbp-80h]\n  unsigned int v48; // [rsp+3Ch] [rbp-7Ch]\n  unsigned __int64 v49; // [rsp+40h] [rbp-78h]\n  __int64 (__fastcall *v50)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD); // [rsp+48h] [rbp-70h]\n  int v51; // [rsp+50h] [rbp-68h]\n  int v52; // [rsp+58h] [rbp-60h]\n  int v53; // [rsp+60h] [rbp-58h]\n  int v54; // [rsp+68h] [rbp-50h]\n  __int64 v55; // [rsp+78h] [rbp-40h]\n  __int64 v56; // [rsp+80h] [rbp-38h]\n\n  v13 = a4;\n  v55 = a1;\n  v14 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v15 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v15 + 532) )\n      v14 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  v16 = *((_QWORD *)*(&base + a3 + v14) + a2);\n  v48 = *(_DWORD *)(v16 + 6392);\n  v17 = a7 * 65536.0;\n  v47 = *(_DWORD *)(v16 + 6396);\n  v46 = *((signed int *)dest + 2 * a6 + 21);\n  v45 = *((_DWORD *)dest + 2 * a6 + 20);\n  if ( a6 != 1 || *((_DWORD *)dest + 616) )\n    v43 = 0;\n  else\n    v43 = *((_DWORD *)off_49F6D0 + 6) != 1 && a2 == 0;\n  v18 = v17 + 0.5;\n  v42 = a4 + (signed __int16)*a10;\n  if ( (*(_DWORD *)(qword_4F9DB8 + 192) && ((v19 = *((_DWORD *)off_49F6D0 + 6)) == 0 || v19 == 3)\n     || *(_DWORD *)(qword_4F9DB8 + 196) && *((_DWORD *)off_49F6D0 + 6) == 1)\n    && *((_DWORD *)dest + 323) )\n  {\n    v20 = (__int64 *)(v16 + 6440);\n  }\n  else\n  {\n    v20 = (__int64 *)(v16 + 6432);\n  }\n  v41 = (signed int)v18;\n  v40 = a5 + (signed __int16)*a11;\n  v56 = *v20;\n  v21 = a4 + (signed __int16)*a10;\n  if ( v42 <= a12\n    || v40 <= a12\n    || v42 >= *((_DWORD *)off_49F6D0 + 13) + ~a12 - v45\n    || v40 >= *((_DWORD *)off_49F6D0 + 15) + ~a12 - (signed int)v46 )\n  {\n    v22 = sub_475AB0;\n  }\n  else\n  {\n    v22 = sub_475A90;\n  }\n  v50 = (__int64 (__fastcall *)(_QWORD, __int64, _QWORD, _QWORD, _QWORD, _QWORD))v22;\n  v23 = (signed int)v18;\n  v39 = a13;\n  v24 = -4 * v13 - a8;\n  v25 = -4 * a5 - a9;\n  v26 = v41 >> 12;\n  v27 = 0LL;\n  v44 = 0;\n  v54 = a5;\n  v53 = v13;\n  v52 = -4 * v13 - a8;\n  v51 = -4 * a5 - a9;\n  do\n  {\n    v28 = v21 + *((_DWORD *)qword_4F9F60 + v27);\n    v49 = v27;\n    v29 = v40 + *((_DWORD *)qword_4F9F68 + v27);\n    v30 = 0;\n    if ( !(v13 ^ v28 | a5 ^ v29) )\n      v30 = v26;\n    if ( !v43 )\n      v30 = 0;\n    v31 = (v23 * (*((_DWORD *)qword_4F9F18 + (signed int)(v24 + 4 * v28)) + *((_DWORD *)qword_4F9F18 + v25 + 4 * v29)) >> 16)\n        - v30;\n    if ( v31 < v39 )\n    {\n      if ( (signed int)v46 > 0 )\n      {\n        v32 = 0LL;\n        do\n        {\n          v33 = v50((unsigned int)v45, v56, (unsigned int)(v29 + v32), v28, v47, v48);\n          if ( v45 >= 4 )\n          {\n            v35 = 0LL;\n            do\n            {\n              v34 = *(_QWORD *)(v55 + 8 * v32);\n              v31 += *((_DWORD *)qword_4F9DE8\n                     + *(unsigned __int16 *)(v34 + 8 * v35 + 6)\n                     - (unsigned __int64)*(unsigned __int16 *)(v33 + 8 * v35 + 6))\n                   + *((_DWORD *)qword_4F9DE8\n                     + *(unsigned __int16 *)(v34 + 8 * v35 + 4)\n                     - (unsigned __int64)*(unsigned __int16 *)(v33 + 8 * v35 + 4))\n                   + *((_DWORD *)qword_4F9DE8\n                     + *(unsigned __int16 *)(v34 + 8 * v35 + 2)\n                     - (unsigned __int64)*(unsigned __int16 *)(v33 + 8 * v35 + 2))\n                   + *((_DWORD *)qword_4F9DE8\n                     + *(unsigned __int16 *)(v34 + 8 * v35)\n                     - (unsigned __int64)*(unsigned __int16 *)(v33 + 8 * v35));\n              ++v35;\n            }\n            while ( (signed int)v35 < v45 >> 2 );\n          }\n          if ( v31 >= v39 )\n            break;\n          ++v32;\n        }\n        while ( v32 < v46 );\n      }\n      v36 = v39;\n      v37 = v44;\n      v27 = v49;\n      if ( v31 < v39 )\n        v37 = v49;\n      v44 = v37;\n      if ( v31 <= v39 )\n        v36 = v31;\n      v39 = v36;\n      a5 = v54;\n      v13 = v53;\n      v21 = v42;\n      v23 = (signed int)v18;\n      v24 = v52;\n      v25 = v51;\n      v26 = v41 >> 12;\n    }\n    ++v27;\n  }\n  while ( v27 < (unsigned int)((2 * a12 + 1) * (2 * a12 + 1)) );\n  if ( v44 )\n  {\n    *a10 += *((_WORD *)qword_4F9F60 + 2 * v44);\n    *a11 += *((_WORD *)qword_4F9F68 + 2 * v44);\n  }\n  return (unsigned int)v39;\n}\n", 
            "funcStartAddr": "0x4456d0L", 
            "funcEndAddr": "0x445ad9L", 
            "funcName": "sub_4456D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_445AE0(double a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, __int16 a8, __int16 a9, _WORD *a10, _WORD *a11, int a12, unsigned int a13)\n{\n  double v13; // xmm0_8\n  int v14; // er11\n  int v15; // er10\n  __int64 v16; // rbp\n  __int64 v17; // r13\n  __int64 result; // rax\n  int v19; // er9\n  int v20; // ebp\n  _DWORD *v21; // r12\n  __int64 v22; // rcx\n  int v23; // ebx\n  int v24; // er9\n  _WORD *v25; // r10\n  unsigned __int64 v26; // rdx\n  signed int v27; // ecx\n  int v28; // edi\n  int v29; // [rsp+8h] [rbp-40h]\n  int v30[3]; // [rsp+8h] [rbp-40h]\n\n  v13 = a1 * 65536.0 + 0.5;\n  v14 = *((_DWORD *)off_49F6D0 + 42);\n  v15 = *((_DWORD *)off_49F6D0 + 43);\n  v16 = a4;\n  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_49FE10 + a4) + 8LL * a3) + 8LL * a7)\n                  + 8LL * (a6 - v15 + ((a5 - v14) >> 2)));\n  if ( !*(_DWORD *)(*((_QWORD *)qword_49FE18 + a4) + 4LL * a3) )\n  {\n    sub_443CF0((signed __int16)a3, a4);\n    v14 = *((_DWORD *)off_49F6D0 + 42);\n    v15 = *((_DWORD *)off_49F6D0 + 43);\n  }\n  result = a13;\n  v19 = *(_DWORD *)(*((_QWORD *)qword_49FE20 + v16) + 4LL * a3);\n  v29 = *(_DWORD *)(*((_QWORD *)qword_49FE28 + v16) + 4LL * a3);\n  if ( *((_DWORD *)dest + 616) )\n  {\n    v20 = 0;\n    v21 = qword_4F9F18;\n  }\n  else\n  {\n    v22 = *(signed int *)(*((_QWORD *)qword_49FE30 + v16) + 4LL * a3);\n    v21 = qword_4F9F18;\n    v23 = *(_DWORD *)(v17 + 4 * v22)\n        + ((signed int)v13 * (*((_DWORD *)qword_4F9F18 - a8) + *((_DWORD *)qword_4F9F18 - a9)) >> 16);\n    v20 = 0;\n    if ( v23 < (signed int)result )\n      v20 = v22;\n    if ( v23 <= (signed int)result )\n      result = (unsigned int)v23;\n  }\n  v24 = v19 - v14;\n  v30[0] = v29 - v15;\n  v25 = qword_4F9F68;\n  v26 = 0LL;\n  do\n  {\n    v27 = *(_DWORD *)(v17 + 4 * v26);\n    if ( v27 < (signed int)result )\n    {\n      v28 = v27\n          + ((signed int)v13\n           * (v21[4 * (v24 + *((_DWORD *)qword_4F9F60 + v26)) - a8]\n            + v21[4 * (v30[0] + *((_DWORD *)qword_4F9F68 + v26)) - a9]) >> 16);\n      if ( v28 < (signed int)result )\n        v20 = v26;\n      if ( v28 <= (signed int)result )\n        result = (unsigned int)v28;\n    }\n    ++v26;\n  }\n  while ( v26 < (unsigned int)((2 * a12 + 1) * (2 * a12 + 1)) );\n  *a10 = *((_WORD *)qword_4F9F60 + 2 * v20) + v24;\n  *a11 = v25[2 * v20] + LOWORD(v30[0]);\n  return result;\n}\n", 
            "funcStartAddr": "0x445ae0L", 
            "funcEndAddr": "0x445cceL", 
            "funcName": "sub_445AE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_445CD0(signed int *a1, int a2)\n{\n  signed int v2; // ecx\n  signed int v3; // er11\n  int v4; // er10\n  signed int v5; // eax\n  signed int v6; // edx\n  int v7; // er15\n  int v8; // eax\n  int v9; // er13\n  signed int v10; // ecx\n  int v11; // ST10_4\n  signed int v12; // ebx\n  signed int v13; // edx\n  int v14; // ST08_4\n  int v15; // ebx\n  int v16; // er11\n  signed int v17; // er14\n  signed int v18; // edx\n  int v19; // ST00_4\n  signed int v20; // er8\n  signed int v21; // ebp\n  int v22; // er12\n  int v23; // er8\n  int v24; // er14\n  signed int v25; // edx\n  signed int v26; // ebp\n  int v27; // er9\n  int v28; // edx\n  signed int v29; // ebp\n  signed int v30; // esi\n  int v31; // edi\n  int v32; // ebp\n  int v33; // esi\n  int v34; // er10\n  int v35; // ST18_4\n  int v36; // esi\n  int v37; // er13\n  int v38; // er15\n  int v39; // ST10_4\n  int v40; // ST08_4\n  int v41; // er11\n  int v42; // eax\n  int v43; // ST00_4\n  int v44; // er12\n  int v45; // er14\n  int v46; // ebx\n  int v47; // edi\n  int v48; // er9\n  int v49; // ebp\n  int v50; // er8\n  int v51; // er15\n  int v52; // ecx\n  int v53; // er10\n  int v54; // eax\n  int v55; // esi\n  int v56; // ebx\n  int v57; // er11\n  int v58; // er12\n  int v59; // er13\n  int v60; // edi\n  int v61; // ecx\n  int v62; // edi\n  int v63; // edx\n  int v64; // er10\n  int v65; // ecx\n  int v66; // er14\n  int v67; // eax\n  int v68; // ebp\n  int v69; // er10\n  int v70; // esi\n  int v71; // er9\n  int v72; // er8\n  int v73; // ebx\n  int v74; // esi\n  int v75; // ebx\n  int v76; // edx\n  int v77; // er15\n  int v78; // er12\n  int v79; // ecx\n  int v80; // eax\n  int v81; // er11\n  int v82; // er12\n  int v83; // er13\n  int v84; // er11\n  int v86; // [rsp+0h] [rbp-70h]\n  int v87; // [rsp+8h] [rbp-68h]\n  int v88; // [rsp+10h] [rbp-60h]\n  int v89; // [rsp+18h] [rbp-58h]\n  int v90; // [rsp+20h] [rbp-50h]\n  int v91; // [rsp+24h] [rbp-4Ch]\n  int v92; // [rsp+28h] [rbp-48h]\n  int v93; // [rsp+30h] [rbp-40h]\n  int v94; // [rsp+38h] [rbp-38h]\n\n  if ( !a2 )\n    return (unsigned int)(*((_DWORD *)qword_4F9DE8 + a1[15])\n                        + *((_DWORD *)qword_4F9DE8 + a1[14])\n                        + *((_DWORD *)qword_4F9DE8 + a1[13])\n                        + *((_DWORD *)qword_4F9DE8 + a1[12])\n                        + *((_DWORD *)qword_4F9DE8 + a1[11])\n                        + *((_DWORD *)qword_4F9DE8 + a1[10])\n                        + *((_DWORD *)qword_4F9DE8 + a1[9])\n                        + *((_DWORD *)qword_4F9DE8 + a1[8])\n                        + *((_DWORD *)qword_4F9DE8 + a1[7])\n                        + *((_DWORD *)qword_4F9DE8 + a1[6])\n                        + *((_DWORD *)qword_4F9DE8 + a1[5])\n                        + *((_DWORD *)qword_4F9DE8 + a1[4])\n                        + *((_DWORD *)qword_4F9DE8 + a1[3])\n                        + *((_DWORD *)qword_4F9DE8 + a1[2])\n                        + *((_DWORD *)qword_4F9DE8 + *a1)\n                        + *((_DWORD *)qword_4F9DE8 + a1[1]));\n  v2 = a1[12];\n  v3 = a1[1];\n  v4 = v2 + *a1;\n  v5 = a1[4];\n  v6 = a1[8];\n  v7 = v6 + v5;\n  v8 = v5 - v6;\n  v9 = *a1 - v2;\n  v10 = a1[13];\n  v11 = v10 + v3;\n  v12 = a1[5];\n  v13 = a1[9];\n  v14 = v13 + v12;\n  v15 = v12 - v13;\n  v16 = v3 - v10;\n  v17 = a1[2];\n  v18 = a1[14];\n  v19 = v18 + v17;\n  v20 = a1[6];\n  v21 = a1[10];\n  v22 = v20 + v21;\n  v23 = v20 - v21;\n  v24 = v17 - v18;\n  v25 = a1[7];\n  v26 = a1[11];\n  v27 = v25 + v26;\n  v28 = v25 - v26;\n  v29 = a1[3];\n  v30 = a1[15];\n  v31 = v30 + v29;\n  v32 = v29 - v30;\n  v33 = v4;\n  v34 = v7 + v4;\n  v35 = v33 - v7;\n  v36 = v8 + v9;\n  v37 = v9 - v8;\n  v38 = v14 + v11;\n  v39 = v11 - v14;\n  v40 = v15 + v16;\n  v41 = v16 - v15;\n  v42 = v22 + v19;\n  v43 = v19 - v22;\n  v44 = v23 + v24;\n  v45 = v24 - v23;\n  v46 = v27 + v31;\n  v47 = v31 - v27;\n  v48 = v28 + v32;\n  v49 = v32 - v28;\n  v50 = v42 + v38;\n  v51 = v38 - v42;\n  v52 = v46 + v34;\n  v53 = v34 - v46;\n  v92 = v44 + v40;\n  v87 = v40 - v44;\n  v54 = v48 + v36;\n  v55 = v36 - v48;\n  v93 = v43 + v39;\n  v88 = v39 - v43;\n  v56 = v47 + v35;\n  v89 = v35 - v47;\n  v94 = v45 + v41;\n  v57 = v41 - v45;\n  v58 = v49 + v37;\n  v59 = v37 - v49;\n  v60 = -(v52 + v50);\n  if ( v60 < 1 )\n    v60 = v52 + v50;\n  v86 = v60;\n  v61 = v52 - v50;\n  v62 = -v61;\n  if ( -v61 < 1 )\n    v62 = v61;\n  v63 = -(v53 + v51);\n  if ( v63 < 1 )\n    v63 = v53 + v51;\n  v91 = v63;\n  v64 = v53 - v51;\n  v65 = -v64;\n  if ( -v64 < 1 )\n    v65 = v64;\n  v90 = v65;\n  v66 = -(v54 + v92);\n  if ( v66 < 1 )\n    v66 = v54 + v92;\n  v67 = v54 - v92;\n  v68 = -v67;\n  if ( -v67 < 1 )\n    v68 = v67;\n  v69 = -(v55 + v87);\n  if ( v69 < 1 )\n    v69 = v55 + v87;\n  v70 = v55 - v87;\n  v71 = -v70;\n  if ( -v70 < 1 )\n    v71 = v70;\n  v72 = -(v56 + v93);\n  if ( v72 < 1 )\n    v72 = v56 + v93;\n  v73 = v56 - v93;\n  v74 = -v73;\n  if ( -v73 < 1 )\n    v74 = v73;\n  v75 = -(v89 + v88);\n  if ( v75 < 1 )\n    v75 = v89 + v88;\n  v76 = v88 - v89;\n  if ( v88 - v89 < 1 )\n    v76 = v89 - v88;\n  v77 = -(v58 + v94);\n  if ( v77 < 1 )\n    v77 = v58 + v94;\n  v78 = v58 - v94;\n  v79 = -v78;\n  if ( -v78 < 1 )\n    v79 = v78;\n  v80 = v57;\n  v81 = v57 + v59;\n  v82 = -v81;\n  if ( -v81 < 1 )\n    v82 = v81;\n  v83 = v59 - v80;\n  v84 = -v83;\n  if ( -v83 < 1 )\n    v84 = v83;\n  return (unsigned int)((v84\n                       + v82\n                       + v79\n                       + v77\n                       + v76\n                       + v75\n                       + v74\n                       + v72\n                       + v71\n                       + v69\n                       + v68\n                       + v66\n                       + v90\n                       + v91\n                       + v86\n                       + v62\n                       + 1) >> 1);\n}\n", 
            "funcStartAddr": "0x445cd0L", 
            "funcEndAddr": "0x445fb6L", 
            "funcName": "sub_445CD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_445FC0(const __m128i *a1, int a2)\n{\n  __m128i v2; // xmm8\n  __m128i v3; // xmm3\n  __m128i v4; // xmm0\n  __m128i v5; // xmm13\n  __m128i v6; // xmm10\n  __m128i v7; // xmm9\n  __m128i v8; // xmm2\n  __m128i v9; // xmm5\n  __m128i v10; // xmm7\n  __m128i v11; // xmm1\n  __m128i v12; // xmm12\n  __m128i v13; // xmm1\n  __m128i v14; // xmm5\n  __m128i v15; // xmm0\n  __m128i v16; // xmm10\n  __m128i v17; // xmm0\n  __m128i v18; // xmm5\n  __m128i v19; // xmm2\n  __m128i v20; // xmm11\n  __m128i v21; // xmm2\n  __m128i v22; // xmm3\n  __m128i v23; // xmm13\n  __m128i v24; // xmm5\n  __m128i v25; // xmm13\n  __m128i v26; // xmm3\n  __m128i v27; // xmm7\n  __m128i v28; // xmm4\n  __m128i v29; // xmm6\n  __m128i v30; // xmm12\n  __m128i v31; // xmm1\n  __m128i v32; // xmm10\n  __m128i v33; // xmm0\n  __m128i v34; // xmm8\n  __m128i v35; // xmm5\n  __m128i v36; // xmm3\n  __m128i v37; // xmm7\n  __m128i v38; // xmm2\n  __m128i v39; // xmm4\n  __m128i v40; // xmm12\n  __m128i v41; // xmm1\n  __m128i v42; // xmm10\n  __m128i v43; // xmm8\n  __m128i v44; // xmm0\n  __m128i v45; // xmm3\n  __m128i v46; // xmm6\n  __m128i v47; // xmm2\n  __m128i v48; // xmm7\n  __m128i v49; // xmm12\n  __m128i v50; // xmm1\n  __m128i v51; // xmm11\n  __m128i v52; // xmm9\n  __m128i v53; // xmm4\n  __m128i v54; // xmm5\n  __m128i v55; // xmm11\n  __m128i v56; // xmm0\n  __m128i v57; // xmm10\n  __m128i v58; // xmm8\n  __m128i v59; // xmm7\n  __m128i v60; // xmm6\n  __m128i v61; // xmm10\n  __m128i v62; // xmm12\n  __m128i v63; // xmm15\n  __m128i v64; // xmm6\n  __m128i v65; // xmm1\n  __m128i v66; // xmm14\n  __m128i v67; // xmm13\n  __m128i v68; // xmm0\n  __m128i v69; // xmm2\n  __m128i v70; // xmm7\n  __m128i v71; // xmm5\n  __m128i v72; // xmm4\n  __m128i v73; // xmm5\n  __m128i v74; // xmm2\n  __m128i v75; // xmm6\n  __m128i v76; // xmm14\n  __m128i v77; // xmm6\n  __m128i v78; // xmm2\n  __m128i v79; // xmm3\n  __m128i v80; // xmm0\n  __m128i v81; // xmm3\n  __m128i v82; // xmm15\n  __m128i v83; // xmm1\n  __m128i v84; // xmm12\n  __m128i v85; // xmm1\n  __m128i v86; // xmm7\n  __m128i v87; // xmm2\n  __m128i v88; // xmm13\n  __m128i v89; // xmm4\n  __m128i v90; // xmm0\n  __m128i v91; // xmm5\n  __m128i v92; // xmm14\n  __m128i v93; // xmm6\n  __m128i v94; // xmm1\n  __m128i v95; // xmm15\n  __m128i v96; // xmm7\n  __m128i v97; // xmm2\n  __m128i v98; // xmm12\n  __m128i v99; // xmm13\n  __m128i v100; // xmm4\n  __m128i v101; // xmm5\n  __m128i v102; // xmm3\n  __m128i v103; // xmm1\n  __m128i v104; // xmm6\n  __m128i v105; // xmm7\n  __m128i v106; // xmm0\n  __m128i v107; // xmm12\n  __m128i v108; // xmm2\n  __m128i v109; // xmm4\n  __m128i v110; // xmm13\n  __m128i v111; // xmm5\n  __m128i v112; // xmm6\n  __m128i v113; // xmm3\n  __m128i v114; // xmm7\n  __m128i v115; // xmm1\n  __m128i v116; // xmm2\n  __m128i v117; // xmm0\n  __m128i v118; // xmm1\n  __m128i v119; // xmm12\n  __m128i v120; // xmm4\n  __m128i v121; // xmm13\n  __m128i v122; // xmm0\n  __m128i v123; // xmm3\n  __m128i v124; // xmm5\n  __m128i v125; // xmm6\n  __m128i v126; // xmm7\n  __m128i v127; // xmm2\n  __m128i v128; // xmm9\n  __m128i v129; // xmm11\n  __m128i v130; // xmm8\n  __m128i v131; // xmm10\n  __m128i v132; // xmm1\n  __m128i v133; // xmm4\n  __m128i v134; // xmm0\n  __m128i v135; // xmm3\n  __m128i v136; // xmm1\n  __m128i v137; // xmm2\n  __m128i v138; // xmm9\n  __m128i v139; // xmm11\n  __m128i v140; // xmm10\n  __m128i v141; // xmm0\n  __m128i v142; // xmm4\n  __m128i v143; // xmm9\n  __m128i v144; // xmm15\n  __m128i v145; // xmm6\n  __m128i v146; // xmm2\n  __m128i v147; // xmm3\n  __m128i v148; // xmm1\n  __m128i v149; // xmm7\n  __m128i v150; // xmm10\n  __m128i v151; // xmm0\n  __m128i v152; // xmm4\n  __m128i v153; // xmm9\n  __m128i v154; // xmm13\n  __m128i v155; // xmm1\n  __m128i v156; // xmm15\n  __m128i v157; // xmm12\n  __m128i v158; // xmm6\n  __m128i v159; // xmm13\n  __m128i v160; // xmm8\n  __m128i v161; // xmm5\n  __m128i v162; // xmm1\n  __m128i v163; // xmm15\n  __m128i v164; // xmm10\n  __m128i v165; // xmm11\n  __m128i v166; // xmm0\n  __m128i v167; // xmm8\n  __m128i v168; // xmm9\n  __m128i v169; // xmm10\n  __m128i v170; // xmm6\n  __m128i v171; // xmm14\n  __m128i v172; // xmm0\n  __m128i v173; // xmm2\n  __m128i v174; // xmm4\n  __m128i v175; // xmm1\n  __m128i v176; // xmm7\n  __m128i v177; // xmm1\n  __m128i v178; // xmm0\n  __m128i v179; // xmm6\n  __m128i v180; // xmm2\n  __m128i v181; // xmm6\n  __m128i v182; // xmm3\n  __m128i v183; // xmm0\n  __m128i v184; // xmm4\n  __m128i v185; // xmm0\n  __m128i v186; // xmm5\n  __m128i v187; // xmm12\n  __m128i v188; // xmm13\n  __m128i v189; // xmm12\n  __m128i v190; // xmm3\n  __m128i v191; // xmm7\n  __m128i v192; // xmm3\n  __m128i v193; // xmm1\n  __m128i v194; // xmm3\n  __m128i v195; // xmm2\n  __m128i v196; // xmm3\n  __m128i v197; // xmm6\n  __m128i v198; // xmm1\n  __m128i v199; // xmm4\n  __m128i v200; // xmm1\n  __m128i v201; // xmm0\n  __m128i v202; // xmm1\n  __m128i v203; // xmm13\n  __m128i v204; // xmm0\n  __m128i v205; // xmm12\n  __m128i v206; // xmm7\n  __m128i v207; // xmm0\n  __m128i v208; // xmm1\n  __m128i v209; // xmm3\n  __m128i v210; // xmm4\n  __m128i v211; // xmm6\n  __m128i v212; // xmm2\n  __m128i v213; // xmm6\n  __m128i v214; // xmm1\n  __m128i v215; // xmm7\n  __m128i v216; // xmm3\n  __m128i v217; // xmm7\n  __m128i v218; // xmm1\n  __m128i v219; // xmm0\n  __m128i v220; // xmm4\n  __m128i v221; // xmm0\n  __m128i v222; // xmm9\n  __m128i v223; // xmm11\n  __m128i v224; // xmm1\n  __m128i v225; // xmm11\n  __m128i v226; // xmm5\n  __m128i v227; // xmm2\n  __m128i v228; // xmm5\n  __m128i v229; // xmm6\n  __m128i v230; // xmm2\n  __m128i v231; // xmm3\n  __m128i v232; // xmm2\n  __m128i v233; // xmm7\n  __m128i v234; // xmm2\n  __m128i v235; // xmm4\n  __m128i v236; // xmm2\n  __m128i v237; // xmm0\n  __m128i v238; // xmm2\n  __m128i v239; // xmm1\n  __m128i v240; // xmm0\n  __m128i v241; // xmm11\n  __m128i v242; // xmm0\n  __int64 result; // rax\n  signed __int64 v244; // rcx\n  __int128 v245; // [rsp+0h] [rbp-108h]\n  __int128 v246; // [rsp+10h] [rbp-F8h]\n  __int128 v247; // [rsp+20h] [rbp-E8h]\n  __int128 v248; // [rsp+30h] [rbp-D8h]\n  __int128 v249; // [rsp+40h] [rbp-C8h]\n  __int128 v250; // [rsp+50h] [rbp-B8h]\n  __int128 v251; // [rsp+60h] [rbp-A8h]\n  __int128 v252; // [rsp+70h] [rbp-98h]\n  __int128 v253; // [rsp+80h] [rbp-88h]\n  __int128 v254; // [rsp+90h] [rbp-78h]\n  __int128 v255; // [rsp+A0h] [rbp-68h]\n  __int128 v256; // [rsp+B0h] [rbp-58h]\n  __int128 v257; // [rsp+C0h] [rbp-48h]\n  __int128 v258; // [rsp+D0h] [rbp-38h]\n  __int128 v259; // [rsp+E0h] [rbp-28h]\n  __int128 v260; // [rsp+F0h] [rbp-18h]\n\n  if ( a2 )\n  {\n    v2 = _mm_loadu_si128(a1 + 7);\n    v3 = _mm_loadu_si128(a1 + 5);\n    v4 = _mm_loadu_si128(a1);\n    v5 = _mm_loadu_si128(a1 + 1);\n    v6 = _mm_loadu_si128(a1 + 2);\n    v7 = _mm_loadu_si128(a1 + 3);\n    v8 = _mm_loadu_si128(a1 + 6);\n    v9 = _mm_loadu_si128(a1 + 4);\n    v10 = _mm_unpacklo_epi32(v9, v8);\n    v11 = _mm_unpacklo_epi32(v4, v6);\n    v12 = _mm_unpacklo_epi64(v11, v10);\n    v13 = _mm_unpackhi_epi64(v11, v10);\n    v14 = _mm_unpackhi_epi32(v9, v8);\n    v15 = _mm_unpackhi_epi32(v4, v6);\n    v16 = _mm_unpacklo_epi64(v15, v14);\n    v17 = _mm_unpackhi_epi64(v15, v14);\n    v18 = _mm_unpacklo_epi32(v3, v2);\n    v19 = _mm_unpacklo_epi32(v5, v7);\n    v20 = _mm_unpacklo_epi64(v19, v18);\n    v21 = _mm_unpackhi_epi64(v19, v18);\n    v22 = _mm_unpackhi_epi32(v3, v2);\n    v23 = _mm_unpackhi_epi32(v5, v7);\n    v24 = _mm_unpacklo_epi64(v23, v22);\n    v25 = _mm_unpackhi_epi64(v23, v22);\n    v26 = _mm_add_epi32(v20, v12);\n    v27 = _mm_add_epi32(v21, v13);\n    v28 = _mm_add_epi32(v24, v16);\n    v29 = _mm_add_epi32(v25, v17);\n    v30 = _mm_sub_epi32(v12, v20);\n    v31 = _mm_sub_epi32(v13, v21);\n    v32 = _mm_sub_epi32(v16, v24);\n    v33 = _mm_sub_epi32(v17, v25);\n    v34 = _mm_add_epi32(v28, v26);\n    v35 = _mm_add_epi32(v29, v27);\n    v36 = _mm_sub_epi32(v26, v28);\n    v37 = _mm_sub_epi32(v27, v29);\n    v38 = _mm_add_epi32(v32, v30);\n    v39 = _mm_add_epi32(v33, v31);\n    v40 = _mm_sub_epi32(v30, v32);\n    v41 = _mm_sub_epi32(v31, v33);\n    v42 = _mm_add_epi32(v35, v34);\n    v43 = _mm_sub_epi32(v34, v35);\n    v44 = _mm_add_epi32(v37, v36);\n    v45 = _mm_sub_epi32(v36, v37);\n    v46 = _mm_add_epi32(v39, v38);\n    v47 = _mm_sub_epi32(v38, v39);\n    v48 = _mm_add_epi32(v41, v40);\n    v49 = _mm_sub_epi32(v40, v41);\n    v50 = _mm_unpacklo_epi32(v44, v45);\n    v51 = _mm_unpacklo_epi32(v42, v43);\n    v52 = _mm_unpacklo_epi64(v51, v50);\n    v53 = _mm_unpacklo_epi32(v48, v49);\n    v54 = _mm_unpacklo_epi32(v46, v47);\n    v55 = _mm_unpackhi_epi64(v51, v50);\n    v56 = _mm_unpackhi_epi32(v44, v45);\n    v57 = _mm_unpackhi_epi32(v42, v43);\n    v58 = _mm_unpacklo_epi64(v57, v56);\n    v59 = _mm_unpackhi_epi32(v48, v49);\n    v60 = _mm_unpackhi_epi32(v46, v47);\n    v61 = _mm_unpackhi_epi64(v57, v56);\n    _mm_store_si128((__m128i *)&v252, _mm_unpackhi_epi64(v60, v59));\n    _mm_store_si128((__m128i *)&v251, v61);\n    _mm_store_si128((__m128i *)&v250, _mm_unpacklo_epi64(v60, v59));\n    _mm_store_si128((__m128i *)&v249, v58);\n    _mm_store_si128((__m128i *)&v248, _mm_unpackhi_epi64(v54, v53));\n    _mm_store_si128((__m128i *)&v247, v55);\n    _mm_store_si128((__m128i *)&v246, _mm_unpacklo_epi64(v54, v53));\n    _mm_store_si128((__m128i *)&v245, v52);\n    v62 = _mm_loadu_si128(a1 + 15);\n    v63 = _mm_loadu_si128(a1 + 13);\n    v64 = _mm_loadu_si128(a1 + 8);\n    v65 = _mm_loadu_si128(a1 + 9);\n    v66 = _mm_loadu_si128(a1 + 10);\n    v67 = _mm_loadu_si128(a1 + 11);\n    v68 = _mm_loadu_si128(a1 + 14);\n    v69 = _mm_loadu_si128(a1 + 12);\n    v70 = _mm_unpacklo_epi32(v69, v68);\n    v71 = _mm_unpacklo_epi32(v64, v66);\n    v72 = _mm_unpacklo_epi64(v71, v70);\n    v73 = _mm_unpackhi_epi64(v71, v70);\n    v74 = _mm_unpackhi_epi32(v69, v68);\n    v75 = _mm_unpackhi_epi32(v64, v66);\n    v76 = _mm_unpacklo_epi64(v75, v74);\n    v77 = _mm_unpackhi_epi64(v75, v74);\n    v78 = _mm_unpacklo_epi32(v63, v62);\n    v79 = _mm_unpacklo_epi32(v65, v67);\n    v80 = _mm_unpacklo_epi64(v79, v78);\n    v81 = _mm_unpackhi_epi64(v79, v78);\n    v82 = _mm_unpackhi_epi32(v63, v62);\n    v83 = _mm_unpackhi_epi32(v65, v67);\n    v84 = _mm_unpacklo_epi64(v83, v82);\n    v85 = _mm_unpackhi_epi64(v83, v82);\n    v86 = _mm_add_epi32(v80, v72);\n    v87 = _mm_add_epi32(v81, v73);\n    v88 = _mm_add_epi32(v84, v76);\n    v89 = _mm_sub_epi32(v72, v80);\n    v90 = _mm_add_epi32(v85, v77);\n    v91 = _mm_sub_epi32(v73, v81);\n    v92 = _mm_sub_epi32(v76, v84);\n    v93 = _mm_sub_epi32(v77, v85);\n    v94 = _mm_add_epi32(v88, v86);\n    v95 = _mm_add_epi32(v90, v87);\n    v96 = _mm_sub_epi32(v86, v88);\n    v97 = _mm_sub_epi32(v87, v90);\n    v98 = _mm_add_epi32(v92, v89);\n    v99 = _mm_add_epi32(v93, v91);\n    v100 = _mm_sub_epi32(v89, v92);\n    v101 = _mm_sub_epi32(v91, v93);\n    v102 = _mm_add_epi32(v95, v94);\n    v103 = _mm_sub_epi32(v94, v95);\n    v104 = _mm_add_epi32(v97, v96);\n    v105 = _mm_sub_epi32(v96, v97);\n    v106 = _mm_add_epi32(v99, v98);\n    v107 = _mm_sub_epi32(v98, v99);\n    v108 = _mm_add_epi32(v101, v100);\n    v109 = _mm_sub_epi32(v100, v101);\n    v110 = _mm_unpackhi_epi32(v104, v105);\n    v111 = _mm_unpackhi_epi32(v102, v103);\n    v112 = _mm_unpacklo_epi32(v104, v105);\n    v113 = _mm_unpacklo_epi32(v102, v103);\n    v114 = _mm_unpacklo_epi32(v108, v109);\n    v115 = _mm_unpacklo_epi32(v106, v107);\n    v116 = _mm_unpackhi_epi32(v108, v109);\n    v117 = _mm_unpackhi_epi32(v106, v107);\n    _mm_store_si128((__m128i *)&v260, _mm_unpackhi_epi64(v117, v116));\n    _mm_store_si128((__m128i *)&v258, _mm_unpacklo_epi64(v117, v116));\n    _mm_store_si128((__m128i *)&v257, _mm_unpacklo_epi64(v111, v110));\n    _mm_store_si128((__m128i *)&v256, _mm_unpackhi_epi64(v115, v114));\n    _mm_store_si128((__m128i *)&v255, _mm_unpackhi_epi64(v113, v112));\n    _mm_store_si128((__m128i *)&v254, _mm_unpacklo_epi64(v115, v114));\n    _mm_store_si128((__m128i *)&v253, _mm_unpacklo_epi64(v113, v112));\n    _mm_store_si128((__m128i *)&v259, _mm_unpackhi_epi64(v111, v110));\n    v118 = _mm_load_si128((const __m128i *)&v253);\n    v119 = _mm_load_si128((const __m128i *)&v254);\n    v120 = _mm_load_si128((const __m128i *)&v255);\n    v121 = _mm_load_si128((const __m128i *)&v256);\n    v122 = _mm_add_epi32(v118, v52);\n    v123 = _mm_add_epi32(v120, v55);\n    v124 = _mm_load_si128((const __m128i *)&v257);\n    v125 = _mm_add_epi32(v124, v58);\n    v126 = _mm_load_si128((const __m128i *)&v259);\n    v127 = _mm_add_epi32(v126, v61);\n    v128 = _mm_sub_epi32(v52, v118);\n    v129 = _mm_sub_epi32(v55, v120);\n    v130 = _mm_sub_epi32(v58, v124);\n    v131 = _mm_sub_epi32(v61, v126);\n    v132 = _mm_add_epi32(v125, v122);\n    v133 = _mm_add_epi32(v127, v123);\n    _mm_store_si128((__m128i *)&v245, _mm_add_epi32(v133, v132));\n    v134 = _mm_sub_epi32(v122, v125);\n    _mm_store_si128((__m128i *)&v247, _mm_sub_epi32(v132, v133));\n    v135 = _mm_sub_epi32(v123, v127);\n    _mm_store_si128((__m128i *)&v249, _mm_add_epi32(v135, v134));\n    v136 = _mm_add_epi32(v130, v128);\n    _mm_store_si128((__m128i *)&v251, _mm_sub_epi32(v134, v135));\n    v137 = _mm_add_epi32(v131, v129);\n    _mm_store_si128((__m128i *)&v253, _mm_add_epi32(v137, v136));\n    v138 = _mm_sub_epi32(v128, v130);\n    _mm_store_si128((__m128i *)&v255, _mm_sub_epi32(v136, v137));\n    v139 = _mm_sub_epi32(v129, v131);\n    _mm_store_si128((__m128i *)&v257, _mm_add_epi32(v139, v138));\n    _mm_store_si128((__m128i *)&v259, _mm_sub_epi32(v138, v139));\n    v140 = _mm_load_si128((const __m128i *)&v246);\n    v141 = _mm_load_si128((const __m128i *)&v248);\n    v142 = _mm_load_si128((const __m128i *)&v250);\n    v143 = _mm_load_si128((const __m128i *)&v252);\n    v144 = _mm_add_epi32(v119, v140);\n    v145 = _mm_add_epi32(v121, v141);\n    v146 = _mm_load_si128((const __m128i *)&v258);\n    v147 = _mm_add_epi32(v146, v142);\n    v148 = _mm_load_si128((const __m128i *)&v260);\n    v149 = _mm_add_epi32(v148, v143);\n    v150 = _mm_sub_epi32(v140, v119);\n    v151 = _mm_sub_epi32(v141, v121);\n    v152 = _mm_sub_epi32(v142, v146);\n    v153 = _mm_sub_epi32(v143, v148);\n    v154 = _mm_add_epi32(v147, v144);\n    v155 = _mm_add_epi32(v149, v145);\n    v156 = _mm_sub_epi32(v144, v147);\n    v157 = _mm_add_epi32(v155, v154);\n    _mm_store_si128((__m128i *)&v246, v157);\n    v158 = _mm_sub_epi32(v145, v149);\n    v159 = _mm_sub_epi32(v154, v155);\n    _mm_store_si128((__m128i *)&v248, v159);\n    v160 = _mm_add_epi32(v152, v150);\n    v161 = _mm_add_epi32(v158, v156);\n    _mm_store_si128((__m128i *)&v250, v161);\n    v162 = _mm_add_epi32(v153, v151);\n    v163 = _mm_sub_epi32(v156, v158);\n    _mm_store_si128((__m128i *)&v252, v163);\n    v164 = _mm_sub_epi32(v150, v152);\n    v165 = _mm_add_epi32(v162, v160);\n    _mm_store_si128((__m128i *)&v254, v165);\n    v166 = _mm_sub_epi32(v151, v153);\n    v167 = _mm_sub_epi32(v160, v162);\n    _mm_store_si128((__m128i *)&v256, v167);\n    v168 = _mm_add_epi32(v166, v164);\n    _mm_store_si128((__m128i *)&v258, v168);\n    v169 = _mm_sub_epi32(v164, v166);\n    _mm_store_si128((__m128i *)&v260, v169);\n    v170 = _mm_load_si128((const __m128i *)&v245);\n    v171 = _mm_load_si128((const __m128i *)&v247);\n    v172 = _mm_load_si128((const __m128i *)&v249);\n    v173 = _mm_load_si128((const __m128i *)&v251);\n    v174 = _mm_unpacklo_epi32(v172, v173);\n    v175 = _mm_unpacklo_epi32(v170, v171);\n    v176 = _mm_unpacklo_epi64(v175, v174);\n    v177 = _mm_unpackhi_epi64(v175, v174);\n    v178 = _mm_unpackhi_epi32(v172, v173);\n    v179 = _mm_unpackhi_epi32(v170, v171);\n    v180 = _mm_unpacklo_epi64(v179, v178);\n    v181 = _mm_unpackhi_epi64(v179, v178);\n    v182 = _mm_unpacklo_epi32(v161, v163);\n    v183 = _mm_unpacklo_epi32(v157, v159);\n    v184 = _mm_unpacklo_epi64(v183, v182);\n    v185 = _mm_unpackhi_epi64(v183, v182);\n    v186 = _mm_unpackhi_epi32(v161, v163);\n    v187 = _mm_unpackhi_epi32(v157, v159);\n    v188 = _mm_unpacklo_epi64(v187, v186);\n    v189 = _mm_unpackhi_epi64(v187, v186);\n    v190 = _mm_srai_epi32(v176, 0x1Fu);\n    v191 = _mm_xor_si128(_mm_add_epi32(v176, v190), v190);\n    v192 = _mm_srai_epi32(v177, 0x1Fu);\n    v193 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v177, v192), v192), v191);\n    v194 = _mm_srai_epi32(v180, 0x1Fu);\n    v195 = _mm_xor_si128(_mm_add_epi32(v180, v194), v194);\n    v196 = _mm_srai_epi32(v181, 0x1Fu);\n    v197 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v181, v196), v196), v195), v193);\n    v198 = _mm_srai_epi32(v184, 0x1Fu);\n    v199 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v184, v198), v198), v197);\n    v200 = _mm_srai_epi32(v185, 0x1Fu);\n    v201 = _mm_xor_si128(_mm_add_epi32(v185, v200), v200);\n    v202 = _mm_srai_epi32(v188, 0x1Fu);\n    v203 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v188, v202), v202), v201), v199);\n    v204 = _mm_srai_epi32(v189, 0x1Fu);\n    v205 = _mm_xor_si128(_mm_add_epi32(v189, v204), v204);\n    v206 = _mm_load_si128((const __m128i *)&v253);\n    v207 = _mm_load_si128((const __m128i *)&v255);\n    v208 = _mm_load_si128((const __m128i *)&v257);\n    v209 = _mm_load_si128((const __m128i *)&v259);\n    v210 = _mm_unpacklo_epi32(v208, v209);\n    v211 = _mm_unpacklo_epi32(v206, v207);\n    v212 = _mm_unpacklo_epi64(v211, v210);\n    v213 = _mm_unpackhi_epi64(v211, v210);\n    v214 = _mm_unpackhi_epi32(v208, v209);\n    v215 = _mm_unpackhi_epi32(v206, v207);\n    v216 = _mm_unpacklo_epi64(v215, v214);\n    v217 = _mm_unpackhi_epi64(v215, v214);\n    v218 = _mm_unpacklo_epi32(v168, v169);\n    v219 = _mm_unpacklo_epi32(v165, v167);\n    v220 = _mm_unpacklo_epi64(v219, v218);\n    v221 = _mm_unpackhi_epi64(v219, v218);\n    v222 = _mm_unpackhi_epi32(v168, v169);\n    v223 = _mm_unpackhi_epi32(v165, v167);\n    v224 = _mm_unpacklo_epi64(v223, v222);\n    v225 = _mm_unpackhi_epi64(v223, v222);\n    v226 = _mm_srai_epi32(v212, 0x1Fu);\n    v227 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v212, v226), v226), v205);\n    v228 = _mm_srai_epi32(v213, 0x1Fu);\n    v229 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v213, v228), v228), v227), v203);\n    v230 = _mm_srai_epi32(v216, 0x1Fu);\n    v231 = _mm_xor_si128(_mm_add_epi32(v216, v230), v230);\n    v232 = _mm_srai_epi32(v217, 0x1Fu);\n    v233 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v217, v232), v232), v231);\n    v234 = _mm_srai_epi32(v220, 0x1Fu);\n    v235 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v220, v234), v234), v233);\n    v236 = _mm_srai_epi32(v221, 0x1Fu);\n    v237 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v221, v236), v236), v235);\n    v238 = _mm_srai_epi32(v224, 0x1Fu);\n    v239 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v224, v238), v238), v237), v229);\n    v240 = _mm_srai_epi32(v225, 0x1Fu);\n    v241 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v225, v240), v240), v239);\n    v242 = _mm_add_epi32(_mm_shuffle_epi32(v241, 78), v241);\n    result = (unsigned int)((_mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v242, 229), v242)) + 2) >> 2);\n  }\n  else\n  {\n    LODWORD(result) = 0;\n    v244 = 4611686018427387888LL;\n    do\n    {\n      result = (unsigned int)(*((_DWORD *)qword_4F9DE8 + a1[v244 + 16].m128i_i32[3])\n                            + *((_DWORD *)qword_4F9DE8 + a1[v244 + 16].m128i_i32[2])\n                            + *((_DWORD *)qword_4F9DE8 + a1[v244 + 16].m128i_i32[1])\n                            + *((_DWORD *)qword_4F9DE8 + a1[v244 + 16].m128i_i32[0])\n                            + result);\n      ++v244;\n    }\n    while ( v244 * 4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x445fc0L", 
            "funcEndAddr": "0x446863L", 
            "funcName": "sub_445FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_446870(__int64 a1, int a2, signed int a3, double a4, double a5, __m128i a6)\n{\n  signed int v6; // ecx\n  signed int v7; // edx\n  int v8; // eax\n  bool v9; // cl\n  unsigned int v10; // eax\n  unsigned __int64 v11; // rsi\n  unsigned __int64 v12; // r14\n  __int64 v13; // rax\n  unsigned __int64 v14; // r15\n  signed __int64 v15; // rcx\n  unsigned __int64 v16; // rax\n  unsigned __int64 v17; // rdx\n  signed __int64 v18; // rbx\n  unsigned __int64 v19; // rdi\n  unsigned __int64 v20; // rax\n  int v21; // edx\n  unsigned __int64 v22; // rcx\n  unsigned __int64 v23; // rbp\n  int v24; // ecx\n  size_t v25; // rbx\n  unsigned __int64 v26; // r12\n  __int64 v27; // r13\n  unsigned __int64 v28; // rax\n  __m128i v29; // xmm0\n  __m128i v30; // xmm1\n  __m128i v31; // xmm3\n  signed __int64 v32; // rax\n  signed __int64 v33; // rax\n  __m128i v34; // xmm0\n  int v35; // ebx\n  int v36; // ebp\n  __int64 result; // rax\n  unsigned int v38; // edx\n  __int64 v39; // rdi\n  unsigned __int64 v40; // rax\n  __int64 v41; // rdx\n  __int64 v42; // rsi\n  int v43; // ebx\n  int v44; // ebp\n  __int64 v45; // rdi\n  int *v46; // rsi\n  __int64 v47; // rdx\n  int v48; // er15\n  int v49; // er14\n  int v50; // ebp\n  int v51; // ebx\n  signed int v52; // [rsp+Ch] [rbp-4FCh]\n  _DWORD *v53; // [rsp+10h] [rbp-4F8h]\n  int v54; // [rsp+1Ch] [rbp-4ECh]\n  signed int v55; // [rsp+20h] [rbp-4E8h]\n  int v56; // [rsp+24h] [rbp-4E4h]\n  unsigned __int64 v57; // [rsp+28h] [rbp-4E0h]\n  signed int v58; // [rsp+30h] [rbp-4D8h]\n  __int64 v59; // [rsp+38h] [rbp-4D0h]\n  signed __int64 v60; // [rsp+40h] [rbp-4C8h]\n  unsigned __int64 v61; // [rsp+48h] [rbp-4C0h]\n  unsigned int v62; // [rsp+50h] [rbp-4B8h]\n  unsigned __int64 v63; // [rsp+58h] [rbp-4B0h]\n  signed __int64 v64; // [rsp+60h] [rbp-4A8h]\n  unsigned __int64 v65; // [rsp+68h] [rbp-4A0h]\n  unsigned __int64 v66; // [rsp+70h] [rbp-498h]\n  signed __int64 v67; // [rsp+78h] [rbp-490h]\n  signed __int64 v68; // [rsp+80h] [rbp-488h]\n  signed __int64 v69; // [rsp+88h] [rbp-480h]\n  unsigned __int64 v70; // [rsp+A8h] [rbp-460h]\n  __int64 v71; // [rsp+B8h] [rbp-450h]\n  __int64 v72; // [rsp+C0h] [rbp-448h]\n  signed __int64 v73; // [rsp+C8h] [rbp-440h]\n  int v74; // [rsp+D0h] [rbp-438h]\n  int v75; // [rsp+D4h] [rbp-434h]\n  int v76; // [rsp+D8h] [rbp-430h]\n  int v77[13]; // [rsp+DCh] [rbp-42Ch]\n  char v78; // [rsp+110h] [rbp-3F8h]\n  char v79; // [rsp+1D0h] [rbp-338h]\n  char v80; // [rsp+2D0h] [rbp-238h]\n  char v81; // [rsp+3D0h] [rbp-138h]\n\n  v54 = a2;\n  v71 = a1;\n  v58 = a3;\n  v6 = a3;\n  v52 = *((_DWORD *)dest + 2 * a3 + 20);\n  v53 = dest;\n  v7 = *((_DWORD *)dest + 2 * a3 + 21);\n  v8 = 0;\n  v9 = v6 < 5;\n  if ( v7 <= 0 )\n    goto LABEL_26;\n  LOBYTE(v8) = v9;\n  v10 = 4 * v8 + 4;\n  v11 = v10;\n  v62 = v10;\n  v56 = -v10;\n  v60 = -(signed __int64)v10;\n  v12 = 0LL;\n  v13 = 0LL;\n  LODWORD(v14) = 0;\n  v55 = v7;\n  v61 = v11;\n  do\n  {\n    v57 = v12 + v11;\n    if ( v52 <= 0 )\n      goto LABEL_25;\n    v59 = v13;\n    v72 = v11 * v13;\n    v15 = -4LL;\n    v16 = 1LL;\n    v17 = v11;\n    v18 = 0LL;\n    v19 = 0LL;\n    v63 = v12;\n    do\n    {\n      v66 = v16;\n      v65 = v17;\n      if ( v17 > v16 )\n        v16 = v17;\n      v67 = v15;\n      v20 = (v15 + v16) >> 2;\n      v69 = -(signed __int64)(((_BYTE)v20 + 1) & 7);\n      v68 = (((_BYTE)v20 + 1) & 7) - 1LL - v20;\n      v21 = v11 * v18;\n      v22 = v11 * v18 | 1;\n      if ( v11 * v18 + v11 > v22 )\n        v22 = v11 * v18 + v11;\n      v70 = v22 + v60 * v18 - 4;\n      v23 = v22 + v60 * v18;\n      v73 = v11 * v18;\n      v24 = v21 | 1;\n      if ( v62 + v21 > (v21 | 1u) )\n        v24 = v62 + v21;\n      v64 = v18;\n      v25 = 4LL * (unsigned int)(v24 + v56 * v18 - 1) + 4;\n      v26 = v19 + v11;\n      v27 = 0LL;\n      do\n      {\n        v14 = (signed int)v14;\n        memcpy(&v74 + (signed int)v14, (const void *)(v71 + ((v72 + v27) << 6) + 4 * v73), v25);\n        if ( v23 < 4 )\n        {\n          v28 = v19;\n          do\n          {\nLABEL_21:\n            ++v28;\n            LODWORD(v14) = v14 + 1;\n          }\n          while ( v28 < v26 );\n          goto LABEL_22;\n        }\n        v29 = (__m128i)v14;\n        v30 = 0LL;\n        a6 = _mm_cmpeq_epi32(a6, a6);\n        v31 = _mm_load_si128((const __m128i *)&xmmword_489750);\n        if ( v70 >= 0x1C )\n        {\n          v30 = 0LL;\n          v32 = v68;\n          do\n          {\n            v29 = _mm_add_epi64(v29, v31);\n            v30 = _mm_add_epi64(v30, v31);\n            v32 += 8LL;\n          }\n          while ( v32 );\n        }\n        if ( ((unsigned __int8)(v70 >> 2) + 1) & 7 )\n        {\n          v33 = v69;\n          do\n          {\n            v29 = _mm_sub_epi64(v29, a6);\n            v30 = _mm_sub_epi64(v30, a6);\n            ++v33;\n          }\n          while ( v33 );\n        }\n        v34 = _mm_add_epi64(v29, v30);\n        LODWORD(v14) = (unsigned __int128)_mm_add_epi64(_mm_shuffle_epi32(v34, 78), v34);\n        v28 = v19 + (v23 & 0xFFFFFFFFFFFFFFFCLL);\n        if ( v23 != (v23 & 0xFFFFFFFFFFFFFFFCLL) )\n          goto LABEL_21;\nLABEL_22:\n        ++v12;\n        ++v27;\n      }\n      while ( v12 < v57 );\n      v18 = v64 + 1;\n      v11 = v61;\n      v17 = v61 + v65;\n      v16 = v61 + v66;\n      v15 = v67 - v61;\n      v19 = v26;\n      v12 = v63;\n    }\n    while ( v52 > (signed int)v26 );\n    v7 = v55;\n    v13 = v59;\nLABEL_25:\n    ++v13;\n    v12 = v57;\n  }\n  while ( v7 > (signed int)v57 );\nLABEL_26:\n  if ( v54 )\n  {\n    switch ( v58 )\n    {\n      case 1:\n        v48 = v53[6];\n        v49 = sub_445FC0((const __m128i *)&v74, v53[6]);\n        v50 = v49 + (unsigned __int64)sub_445FC0((const __m128i *)&v79, v48);\n        v51 = v50 + (unsigned __int64)sub_445FC0((const __m128i *)&v80, v48);\n        result = v51 + (unsigned int)sub_445FC0((const __m128i *)&v81, v48);\n        break;\n      case 2:\n      case 3:\n        v35 = v53[6];\n        v36 = sub_445FC0((const __m128i *)&v74, v53[6]);\n        result = v36 + (unsigned int)sub_445FC0((const __m128i *)&v79, v35);\n        break;\n      case 4:\n        result = sub_445FC0((const __m128i *)&v74, v53[6]);\n        break;\n      case 5:\n      case 6:\n        v43 = v53[6];\n        v44 = sub_445CD0(&v74, v53[6]);\n        result = v44 + (unsigned int)sub_445CD0((signed int *)&v78, v43);\n        break;\n      case 7:\n        result = sub_445CD0(&v74, v53[6]);\n        break;\n      default:\n        result = 0xFFFFFFFFLL;\n        break;\n    }\n    return result;\n  }\n  v38 = v52 * v7;\n  if ( (signed int)v38 <= 0 )\n    return 0LL;\n  v39 = v38;\n  v40 = v38 - 1LL;\n  v41 = v38 & 3;\n  if ( v40 >= 3 )\n  {\n    v45 = v39 - v41;\n    v42 = 0LL;\n    LODWORD(result) = 0;\n    do\n    {\n      result = (unsigned int)(*((_DWORD *)qword_4F9DE8 + v77[v42])\n                            + *((_DWORD *)qword_4F9DE8 + *(&v76 + v42))\n                            + *((_DWORD *)qword_4F9DE8 + *(&v75 + v42))\n                            + *((_DWORD *)qword_4F9DE8 + *(&v74 + v42))\n                            + result);\n      v42 += 4LL;\n    }\n    while ( v45 != v42 );\n    if ( v41 )\n      goto LABEL_38;\n  }\n  else\n  {\n    v42 = 0LL;\n    result = 0LL;\n    if ( !v41 )\n      return result;\nLABEL_38:\n    v46 = &v74 + v42;\n    v47 = -v41;\n    do\n    {\n      result = (unsigned int)(*((_DWORD *)qword_4F9DE8 + *v46) + result);\n      ++v46;\n      ++v47;\n    }\n    while ( v47 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x446870L", 
            "funcEndAddr": "0x446d46L", 
            "funcName": "sub_446870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_446D50(__int64 a1, __int16 a2, int a3, int a4, __int64 a5, signed int a6, double a7, double a8, __m128i a9, __int16 a10, __int16 a11, _WORD *a12, __int16 *a13, signed int a14, signed int a15, int a16)\n{\n  int *v16; // r14\n  int v17; // er9\n  signed int v18; // eax\n  _BOOL4 v19; // er8\n  int v20; // edi\n  __int64 v21; // rax\n  int v22; // ecx\n  bool v23; // bl\n  double v24; // xmm0_8\n  int v25; // ebp\n  int v26; // eax\n  __int64 v27; // rcx\n  __int64 *v28; // rax\n  __int16 *v29; // r9\n  _WORD *v30; // r10\n  double v31; // xmm0_8\n  int v32; // ebx\n  unsigned int v33; // eax\n  unsigned int v34; // ecx\n  int v35; // eax\n  __int16 v36; // cx\n  int v37; // edx\n  int v38; // eax\n  void *v39; // rax\n  signed int v40; // ebx\n  __int64 v41; // r15\n  int v42; // edi\n  int v43; // ebp\n  int v44; // ecx\n  int v45; // esi\n  __int64 v46; // rdi\n  int v47; // eax\n  __int64 v48; // rdx\n  __int64 v49; // r12\n  __int64 v50; // rbp\n  int v51; // er15\n  __int64 v52; // ST38_8\n  int v53; // ebx\n  __int64 v54; // ST18_8\n  int v55; // ebx\n  __int64 v56; // ST18_8\n  int v57; // ebx\n  __int64 v58; // rbx\n  int v59; // ebx\n  signed int v60; // eax\n  int v61; // ecx\n  int v62; // edx\n  signed int v63; // edx\n  signed int v64; // ecx\n  int v65; // eax\n  int v66; // ecx\n  void *v67; // rcx\n  signed __int64 v68; // rsi\n  int v69; // edi\n  __int64 v70; // rbp\n  int v71; // esi\n  unsigned int v72; // edi\n  int v73; // eax\n  __int64 v74; // rcx\n  __int64 v75; // r12\n  int v76; // ebp\n  __int64 v77; // rbx\n  __int64 v78; // ST38_8\n  __int64 v79; // r14\n  int v80; // ebp\n  unsigned int v81; // ST2C_4\n  int v82; // ebp\n  unsigned int v83; // ST28_4\n  int v84; // ebp\n  __int64 v85; // rbx\n  __int64 v86; // ST18_8\n  int v87; // ebp\n  int v88; // ebp\n  __int64 v89; // ST18_8\n  int v90; // ebp\n  int v91; // ebp\n  int v92; // ebp\n  int v93; // ebp\n  __int64 v94; // rbx\n  __int64 v95; // ST18_8\n  int v96; // ebp\n  int v97; // ebp\n  int v98; // ebx\n  signed int v99; // ecx\n  signed __int64 v100; // rsi\n  int v101; // eax\n  __int64 v102; // rdx\n  bool v104; // [rsp+Bh] [rbp-57Dh]\n  unsigned int v105; // [rsp+Ch] [rbp-57Ch]\n  int v106; // [rsp+10h] [rbp-578h]\n  int v107; // [rsp+10h] [rbp-578h]\n  unsigned int v108; // [rsp+14h] [rbp-574h]\n  __int64 v109; // [rsp+20h] [rbp-568h]\n  bool v110; // [rsp+30h] [rbp-558h]\n  signed int v111; // [rsp+34h] [rbp-554h]\n  int v112; // [rsp+44h] [rbp-544h]\n  signed int v113; // [rsp+48h] [rbp-540h]\n  signed int v114; // [rsp+4Ch] [rbp-53Ch]\n  __int64 v115; // [rsp+50h] [rbp-538h]\n  __int64 v116; // [rsp+50h] [rbp-538h]\n  __int64 v117; // [rsp+58h] [rbp-530h]\n  __int64 v118; // [rsp+60h] [rbp-528h]\n  unsigned int v119; // [rsp+68h] [rbp-520h]\n  __int64 v120; // [rsp+68h] [rbp-520h]\n  signed int v121; // [rsp+74h] [rbp-514h]\n  unsigned int v122; // [rsp+78h] [rbp-510h]\n  unsigned int v123; // [rsp+78h] [rbp-510h]\n  unsigned int v124; // [rsp+7Ch] [rbp-50Ch]\n  unsigned int v125; // [rsp+7Ch] [rbp-50Ch]\n  int v126; // [rsp+80h] [rbp-508h]\n  int v127; // [rsp+80h] [rbp-508h]\n  __int64 v128; // [rsp+88h] [rbp-500h]\n  signed __int64 v129; // [rsp+88h] [rbp-500h]\n  int v130; // [rsp+90h] [rbp-4F8h]\n  __int64 v131; // [rsp+90h] [rbp-4F8h]\n  int v132; // [rsp+98h] [rbp-4F0h]\n  signed __int64 v133; // [rsp+98h] [rbp-4F0h]\n  char *v134; // [rsp+A0h] [rbp-4E8h]\n  char *v135; // [rsp+A0h] [rbp-4E8h]\n  __int64 v136; // [rsp+A8h] [rbp-4E0h]\n  int v137; // [rsp+B0h] [rbp-4D8h]\n  signed int v138; // [rsp+B4h] [rbp-4D4h]\n  __int64 v139; // [rsp+B8h] [rbp-4D0h]\n  unsigned int v140; // [rsp+B8h] [rbp-4D0h]\n  __int128 v141; // [rsp+C0h] [rbp-4C8h]\n  int v142; // [rsp+D0h] [rbp-4B8h]\n  int v143; // [rsp+D4h] [rbp-4B4h]\n  int v144; // [rsp+D8h] [rbp-4B0h]\n  int v145; // [rsp+DCh] [rbp-4ACh]\n  int v146; // [rsp+E0h] [rbp-4A8h]\n  int v147; // [rsp+E4h] [rbp-4A4h]\n  int v148; // [rsp+E8h] [rbp-4A0h]\n  int v149; // [rsp+ECh] [rbp-49Ch]\n  int v150; // [rsp+F0h] [rbp-498h]\n  int v151; // [rsp+F4h] [rbp-494h]\n  int v152; // [rsp+F8h] [rbp-490h]\n  int v153; // [rsp+FCh] [rbp-48Ch]\n  __int64 v154; // [rsp+108h] [rbp-480h]\n  __int64 v155; // [rsp+110h] [rbp-478h]\n  __int64 v156; // [rsp+118h] [rbp-470h]\n  __int64 v157; // [rsp+120h] [rbp-468h]\n  __int64 v158; // [rsp+128h] [rbp-460h]\n  int v159; // [rsp+134h] [rbp-454h]\n  int v160; // [rsp+138h] [rbp-450h]\n  int v161; // [rsp+13Ch] [rbp-44Ch]\n  int v162; // [rsp+140h] [rbp-448h]\n  int v163; // [rsp+144h] [rbp-444h]\n  __int64 v164; // [rsp+148h] [rbp-440h]\n  char v165; // [rsp+150h] [rbp-438h]\n  char v166; // [rsp+210h] [rbp-378h]\n\n  v155 = a5;\n  v126 = a4;\n  v117 = a1;\n  v121 = a6;\n  if ( a6 != 1 || *a12 || *a13 || !*((_DWORD *)dest + 6) || *((_DWORD *)dest + 616) )\n    v110 = 0;\n  else\n    v110 = *((_DWORD *)off_49F6D0 + 6) != 1 && a2 == 0;\n  v16 = (int *)dest;\n  v114 = *((_DWORD *)dest + 2 * a6 + 20);\n  v113 = *((_DWORD *)dest + 2 * a6 + 21);\n  v17 = *((_DWORD *)dest + 6);\n  v18 = 1;\n  v19 = 1;\n  if ( v17 )\n    v19 = *((_DWORD *)dest + 7) != 0;\n  if ( !v17 )\n    v18 = a14;\n  if ( a14 > 1 )\n    v18 = a14;\n  v111 = v18;\n  v20 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v21 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v21 + 532) )\n      v20 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  if ( !*(_DWORD *)(qword_4F9DB8 + 192) || (v22 = *((_DWORD *)off_49F6D0 + 6), v23 = 1, v22) && v22 != 3 )\n  {\n    if ( *(_DWORD *)(qword_4F9DB8 + 196) )\n      v23 = *((_DWORD *)off_49F6D0 + 6) == 1;\n    else\n      v23 = 0;\n  }\n  v24 = a7 * 65536.0;\n  v127 = 4 * v126;\n  v25 = *((_DWORD *)dest + 7);\n  v26 = 0;\n  v104 = v25 == 0;\n  if ( !v25 )\n    v26 = *((_DWORD *)dest + 6);\n  v132 = v26;\n  v27 = *((_QWORD *)*(&base + a3 + v20) + a2);\n  v160 = *((_DWORD *)dest + 7);\n  if ( v23 && *((_DWORD *)dest + 323) )\n    v28 = (__int64 *)(v27 + 6456);\n  else\n    v28 = (__int64 *)(v27 + 6448);\n  v29 = a13;\n  v30 = a12;\n  v31 = v24 + 0.5;\n  v32 = 4 * v155;\n  v109 = *v28;\n  v33 = *(_DWORD *)(v27 + 6392);\n  v34 = *(_DWORD *)(v27 + 6396);\n  v108 = v33;\n  v164 = v33 - v114;\n  v105 = v34;\n  v35 = v34 - v113;\n  *v30 *= 4;\n  v36 = 4 * *a13;\n  *v29 *= 4;\n  v137 = 4 * v35;\n  v37 = (signed __int16)*a12;\n  v159 = v32;\n  if ( v127 + v37 < 2 || v127 + v37 >= 4 * (signed int)v164 + 2 || (v38 = v32 + v36, v38 < 2) || v38 >= (v137 | 2) )\n    v39 = sub_476120;\n  else\n    v39 = sub_4761C0;\n  v106 = a16;\n  v40 = (signed int)v31;\n  qword_49FE48 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v39;\n  v138 = (signed int)v31;\n  if ( v19 < v111 )\n  {\n    v163 = a10;\n    v162 = a11;\n    v161 = v40 >> 12;\n    v41 = (unsigned int)v19;\n    v112 = 0;\n    while ( 1 )\n    {\n      v42 = *((_DWORD *)qword_4F9F60 + v41);\n      v43 = v36 + 2 * *((_DWORD *)qword_4F9F68 + v41);\n      v44 = 0;\n      if ( !v41 )\n        v44 = v161;\n      if ( !v110 )\n        v44 = 0;\n      v45 = (v40\n           * (*((_DWORD *)qword_4F9F18 + (signed __int16)v37 + 2 * v42 - v163) + *((_DWORD *)qword_4F9F18 + v43 - v162)) >> 16)\n          - v44;\n      if ( v45 >= v106 )\n      {\n        v60 = v111;\n        goto LABEL_61;\n      }\n      if ( v113 <= 0 )\n      {\n        v59 = (v40\n             * (*((_DWORD *)qword_4F9F18 + (signed __int16)v37 + 2 * v42 - v163) + *((_DWORD *)qword_4F9F18 + v43 - v162)) >> 16)\n            - v44;\n        if ( !v16[805] )\n          goto LABEL_56;\n      }\n      else\n      {\n        v46 = (unsigned int)((signed __int16)v37 + v127 + 2 * v42);\n        v134 = &v166;\n        v128 = 0LL;\n        v139 = v41;\n        v154 = v46;\n        v130 = v43;\n        do\n        {\n          if ( v114 > 0 )\n          {\n            v47 = v43 + 4 * (v128 + v155);\n            v158 = v128 | 1;\n            v119 = v47 + 4;\n            v157 = v128 | 2;\n            v124 = v47 + 8;\n            v156 = v128 | 3;\n            v136 = (unsigned int)(v43 + 4 * (v128 + v155));\n            v122 = v47 + 12;\n            v48 = (unsigned int)v46;\n            v49 = 0LL;\n            while ( 1 )\n            {\n              v50 = *(_QWORD *)(v117 + 8 * v128);\n              v51 = *(unsigned __int16 *)(v50 + 2 * v49);\n              v52 = *(_QWORD *)(v117 + 8 * v128);\n              v115 = v48;\n              LODWORD(v141) = v51 - (unsigned __int16)qword_49FE48(v109, v136, v48, v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v50 + 2 * v49 + 2);\n              DWORD1(v141) = v50\n                           - (unsigned __int16)qword_49FE48(\n                                                 v109,\n                                                 (unsigned int)v136,\n                                                 (unsigned int)(v115 + 4),\n                                                 v105,\n                                                 v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v52 + 2 * v49 + 4);\n              DWORD2(v141) = v50\n                           - (unsigned __int16)qword_49FE48(\n                                                 v109,\n                                                 (unsigned int)v136,\n                                                 (unsigned int)(v115 + 8),\n                                                 v105,\n                                                 v108);\n              v53 = *(unsigned __int16 *)(v52 + 2 * v49 + 6);\n              HIDWORD(v141) = v53 - (unsigned __int16)qword_49FE48(v109, v136, (unsigned int)(v115 + 12), v105, v108);\n              v54 = *(_QWORD *)(v117 + 8 * v158);\n              LODWORD(v50) = *(unsigned __int16 *)(v54 + 2 * v49);\n              v142 = v50 - (unsigned __int16)qword_49FE48(v109, v119, (unsigned int)v115, v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v54 + 2 * v49 + 2);\n              v143 = v50 - (unsigned __int16)qword_49FE48(v109, v119, (unsigned int)(v115 + 4), v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v54 + 2 * v49 + 4);\n              v144 = v50 - (unsigned __int16)qword_49FE48(v109, v119, (unsigned int)(v115 + 8), v105, v108);\n              v55 = *(unsigned __int16 *)(v54 + 2 * v49 + 6);\n              v145 = v55 - (unsigned __int16)qword_49FE48(v109, v119, (unsigned int)(v115 + 12), v105, v108);\n              v56 = *(_QWORD *)(v117 + 8 * v157);\n              LODWORD(v50) = *(unsigned __int16 *)(v56 + 2 * v49);\n              v146 = v50 - (unsigned __int16)qword_49FE48(v109, v124, v115, v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v56 + 2 * v49 + 2);\n              v147 = v50 - (unsigned __int16)qword_49FE48(v109, v124, (unsigned int)(v115 + 4), v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v56 + 2 * v49 + 4);\n              v148 = v50 - (unsigned __int16)qword_49FE48(v109, v124, (unsigned int)(v115 + 8), v105, v108);\n              v57 = *(unsigned __int16 *)(v56 + 2 * v49 + 6);\n              v149 = v57 - (unsigned __int16)qword_49FE48(v109, v124, (unsigned int)(v115 + 12), v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(*(_QWORD *)(v117 + 8 * v156) + 2 * v49);\n              v58 = *(_QWORD *)(v117 + 8 * v156);\n              v150 = v50 - (unsigned __int16)qword_49FE48(v109, v122, v115, v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v58 + 2 * v49 + 2);\n              v151 = v50 - (unsigned __int16)qword_49FE48(v109, v122, (unsigned int)(v115 + 4), v105, v108);\n              LODWORD(v50) = *(unsigned __int16 *)(v58 + 2 * v49 + 4);\n              v152 = v50 - (unsigned __int16)qword_49FE48(v109, v122, (unsigned int)(v115 + 8), v105, v108);\n              LODWORD(v58) = *(unsigned __int16 *)(v58 + 2 * v49 + 6);\n              v153 = v58 - (unsigned __int16)qword_49FE48(v109, v122, (unsigned int)(v115 + 12), v105, v108);\n              v16 = (int *)dest;\n              if ( *((_DWORD *)dest + 805) )\n              {\n                *(_OWORD *)&v134[4 * v49 - 192] = v141;\n                *(_OWORD *)&v134[4 * v49 - 128] = *(_OWORD *)&v142;\n                *(_OWORD *)&v134[4 * v49 - 64] = *(_OWORD *)&v146;\n                v31 = *(double *)&v150;\n                *(_OWORD *)&v134[4 * v49] = *(_OWORD *)&v150;\n                v59 = v45;\n              }\n              else\n              {\n                v59 = v45 + (unsigned __int64)sub_445CD0((signed int *)&v141, v132);\n                if ( v59 > v106 )\n                {\n                  v41 = v139;\n                  goto LABEL_54;\n                }\n              }\n              v49 += 4LL;\n              v48 = (unsigned int)(v115 + 16);\n              v45 = v59;\n              if ( v114 <= (signed int)v49 )\n                goto LABEL_50;\n            }\n          }\n          v59 = v45;\nLABEL_50:\n          v134 += 256;\n          v45 = v59;\n          v128 += 4LL;\n          v41 = v139;\n          LODWORD(v46) = v154;\n          v43 = v130;\n        }\n        while ( v113 > (signed int)v128 );\nLABEL_54:\n        if ( !v16[805] )\n          goto LABEL_56;\n      }\n      v59 += sub_446870((__int64)&v165, v132, v121, v31, a8, a9);\nLABEL_56:\n      v60 = v111;\n      v61 = v106;\n      v62 = v112;\n      if ( v59 < v106 )\n        v62 = v41;\n      v112 = v62;\n      if ( v59 <= v106 )\n        v61 = v59;\n      v106 = v61;\n      v29 = a13;\n      v30 = a12;\n      v40 = v138;\nLABEL_61:\n      if ( v60 <= (signed int)++v41 )\n      {\n        if ( v112 )\n        {\n          *v30 += 2 * *((_WORD *)qword_4F9F60 + 2 * v112);\n          *v29 += 2 * *((_WORD *)qword_4F9F68 + 2 * v112);\n        }\n        break;\n      }\n      LOWORD(v37) = *v30;\n      v36 = *v29;\n    }\n  }\n  v63 = 0;\n  v64 = 0x7FFFFFFF;\n  if ( !v16[7] )\n    v64 = v106;\n  v107 = v64;\n  LOBYTE(v63) = v104;\n  v65 = (signed __int16)*v30;\n  if ( v127 + v65 < 2 || v127 + v65 >= (signed int)(4 * v164 | 3) || (v66 = *v29 + v159, v66 < 2) || v66 >= (v137 | 3) )\n    v67 = sub_476120;\n  else\n    v67 = sub_4761C0;\n  qword_49FE48 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v67;\n  if ( v63 < a15 )\n  {\n    v68 = v160 == 0;\n    v131 = 0LL;\n    while ( 1 )\n    {\n      v65 = (signed __int16)v65;\n      v69 = *((_DWORD *)qword_4F9F60 + v68);\n      v133 = v68;\n      v70 = (unsigned int)(*((_DWORD *)qword_4F9F68 + v68) + *v29);\n      v71 = v40\n          * (*((_DWORD *)qword_4F9F18 + v69 + (signed __int16)v65 - a10)\n           + *((_DWORD *)qword_4F9F18 + (signed int)v70 - a11)) >> 16;\n      if ( v71 >= v107 )\n      {\n        v99 = a15;\n        v100 = v133;\n      }\n      else\n      {\n        if ( v113 <= 0 )\n        {\n          v98 = v40\n              * (*((_DWORD *)qword_4F9F18 + v69 + (signed __int16)v65 - a10)\n               + *((_DWORD *)qword_4F9F18 + (signed int)v70 - a11)) >> 16;\n        }\n        else\n        {\n          v72 = v65 + v127 + v69;\n          v135 = &v166;\n          v118 = 0LL;\n          v140 = v72;\n          v154 = v70;\n          do\n          {\n            if ( v114 <= 0 )\n            {\n              v98 = v71;\n            }\n            else\n            {\n              v73 = v70 + 4 * (v118 + v155);\n              v129 = v118 | 1;\n              LODWORD(v158) = v73 + 4;\n              v157 = v118 | 2;\n              v125 = v73 + 8;\n              v156 = v118 | 3;\n              v120 = (unsigned int)(v70 + 4 * (v118 + v155));\n              v123 = v73 + 12;\n              v74 = v72;\n              v75 = 0LL;\n              do\n              {\n                v76 = *(unsigned __int16 *)(*(_QWORD *)(v117 + 8 * v118) + 2 * v75);\n                v77 = *(_QWORD *)(v117 + 8 * v118);\n                v78 = *(_QWORD *)(v117 + 8 * v118);\n                v79 = v74;\n                LODWORD(v141) = v76 - (unsigned __int16)qword_49FE48(v109, v120, (unsigned int)v74, v105, v108);\n                v80 = *(unsigned __int16 *)(v77 + 2 * v75 + 2);\n                v81 = v79 + 4;\n                DWORD1(v141) = v80\n                             - (unsigned __int16)qword_49FE48(\n                                                   v109,\n                                                   (unsigned int)v120,\n                                                   (unsigned int)(v79 + 4),\n                                                   v105,\n                                                   v108);\n                v82 = *(unsigned __int16 *)(v78 + 2 * v75 + 4);\n                v83 = v79 + 8;\n                v116 = v79;\n                DWORD2(v141) = v82\n                             - (unsigned __int16)qword_49FE48(\n                                                   v109,\n                                                   (unsigned int)v120,\n                                                   (unsigned int)(v79 + 8),\n                                                   v105,\n                                                   v108);\n                LODWORD(v77) = *(unsigned __int16 *)(v78 + 2 * v75 + 6);\n                LODWORD(v78) = v79 + 12;\n                HIDWORD(v141) = v77 - (unsigned __int16)qword_49FE48(v109, v120, (unsigned int)(v79 + 12), v105, v108);\n                v84 = *(unsigned __int16 *)(*(_QWORD *)(v117 + 8 * v129) + 2 * v75);\n                v85 = *(_QWORD *)(v117 + 8 * v129);\n                v86 = *(_QWORD *)(v117 + 8 * v129);\n                LODWORD(v79) = v158;\n                v142 = v84 - (unsigned __int16)qword_49FE48(v109, (unsigned int)v158, v116, v105, v108);\n                v87 = *(unsigned __int16 *)(v85 + 2 * v75 + 2);\n                v143 = v87 - (unsigned __int16)qword_49FE48(v109, (unsigned int)v79, v81, v105, v108);\n                v88 = *(unsigned __int16 *)(v86 + 2 * v75 + 4);\n                v144 = v88 - (unsigned __int16)qword_49FE48(v109, (unsigned int)v79, v83, v105, v108);\n                LODWORD(v85) = *(unsigned __int16 *)(v86 + 2 * v75 + 6);\n                v145 = v85 - (unsigned __int16)qword_49FE48(v109, (unsigned int)v79, (unsigned int)v78, v105, v108);\n                v89 = *(_QWORD *)(v117 + 8 * v157);\n                v90 = *(unsigned __int16 *)(v89 + 2 * v75);\n                v146 = v90 - (unsigned __int16)qword_49FE48(v109, v125, v116, v105, v108);\n                v91 = *(unsigned __int16 *)(v89 + 2 * v75 + 2);\n                v147 = v91 - (unsigned __int16)qword_49FE48(v109, v125, v81, v105, v108);\n                v92 = *(unsigned __int16 *)(v89 + 2 * v75 + 4);\n                v148 = v92 - (unsigned __int16)qword_49FE48(v109, v125, v83, v105, v108);\n                LODWORD(v85) = *(unsigned __int16 *)(v89 + 2 * v75 + 6);\n                v149 = v85 - (unsigned __int16)qword_49FE48(v109, v125, (unsigned int)v78, v105, v108);\n                v93 = *(unsigned __int16 *)(*(_QWORD *)(v117 + 8 * v156) + 2 * v75);\n                v94 = *(_QWORD *)(v117 + 8 * v156);\n                v95 = *(_QWORD *)(v117 + 8 * v156);\n                v150 = v93 - (unsigned __int16)qword_49FE48(v109, v123, v116, v105, v108);\n                v96 = *(unsigned __int16 *)(v94 + 2 * v75 + 2);\n                v151 = v96 - (unsigned __int16)qword_49FE48(v109, v123, v81, v105, v108);\n                v97 = *(unsigned __int16 *)(v95 + 2 * v75 + 4);\n                v152 = v97 - (unsigned __int16)qword_49FE48(v109, v123, v83, v105, v108);\n                LODWORD(v94) = *(unsigned __int16 *)(v95 + 2 * v75 + 6);\n                v153 = v94 - (unsigned __int16)qword_49FE48(v109, v123, (unsigned int)v78, v105, v108);\n                v16 = (int *)dest;\n                if ( *((_DWORD *)dest + 805) )\n                {\n                  *(_OWORD *)&v135[4 * v75 - 192] = v141;\n                  *(_OWORD *)&v135[4 * v75 - 128] = *(_OWORD *)&v142;\n                  *(_OWORD *)&v135[4 * v75 - 64] = *(_OWORD *)&v146;\n                  v31 = *(double *)&v150;\n                  *(_OWORD *)&v135[4 * v75] = *(_OWORD *)&v150;\n                  v98 = v71;\n                }\n                else\n                {\n                  v98 = v71 + (unsigned __int64)sub_445CD0((signed int *)&v141, *((_DWORD *)dest + 6));\n                  if ( v98 > v107 )\n                    goto LABEL_93;\n                }\n                v75 += 4LL;\n                v74 = (unsigned int)(v116 + 16);\n                v71 = v98;\n              }\n              while ( v114 > (signed int)v75 );\n            }\n            v135 += 256;\n            v71 = v98;\n            v118 += 4LL;\n            v72 = v140;\n            LODWORD(v70) = v154;\n          }\n          while ( v113 > (signed int)v118 );\n        }\nLABEL_93:\n        if ( v16[805] )\n          v98 += sub_446870((__int64)&v165, v16[6], v121, v31, a8, a9);\n        v99 = a15;\n        v101 = v107;\n        v100 = v133;\n        v102 = v131;\n        if ( v98 < v107 )\n          v102 = (unsigned int)v133;\n        v131 = v102;\n        if ( v98 <= v107 )\n          v101 = v98;\n        v107 = v101;\n        v29 = a13;\n        v30 = a12;\n        v40 = v138;\n      }\n      v68 = v100 + 1;\n      if ( (signed int)v68 >= v99 )\n        break;\n      LOWORD(v65) = *v30;\n    }\n    if ( (_DWORD)v131 )\n    {\n      *v30 += *((_WORD *)qword_4F9F60 + 2 * (signed int)v131);\n      *v29 += *((_WORD *)qword_4F9F68 + 2 * (signed int)v131);\n    }\n  }\n  return (unsigned int)v107;\n}\n", 
            "funcStartAddr": "0x446d50L", 
            "funcEndAddr": "0x447dbcL", 
            "funcName": "sub_446D50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_447DC0(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, double a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int64 a12, _WORD *a13, _WORD *a14, _WORD *a15, _WORD *a16, signed int a17, int a18)\n{\n  int v18; // er15\n  unsigned int v19; // eax\n  __int64 v20; // rdi\n  __int64 v21; // rdi\n  unsigned int v22; // ebx\n  __int64 v23; // rcx\n  __int16 v24; // r9\n  __int16 v25; // r11\n  int v26; // ebx\n  int *v27; // rax\n  int v28; // edx\n  __int64 v29; // rcx\n  double v30; // xmm0_8\n  void *v31; // rax\n  double v32; // xmm0_8\n  int v33; // er15\n  int v34; // er8\n  int v35; // ecx\n  signed int v36; // er14\n  int v37; // er11\n  int v38; // eax\n  int v39; // er15\n  __int64 v40; // rdi\n  __int64 v41; // rcx\n  int v42; // esi\n  int v43; // ebp\n  unsigned __int64 v44; // rbx\n  int v45; // er10\n  __int64 v46; // r13\n  int v47; // er12\n  int v48; // ebp\n  signed __int64 v49; // rdx\n  __int64 v50; // rcx\n  int v51; // eax\n  signed __int64 v52; // rbx\n  __int64 v53; // r14\n  __int64 v54; // rax\n  __int64 v55; // r9\n  int v56; // er10\n  char v57; // cl\n  __int64 v58; // r12\n  int v59; // edi\n  __int16 v60; // r13\n  bool v61; // sf\n  int v62; // edi\n  __int16 v63; // r15\n  int v64; // esi\n  int v65; // ebp\n  int v66; // edi\n  int v67; // esi\n  int v68; // ebp\n  int v69; // edi\n  __int16 v70; // r15\n  int v71; // edi\n  __int16 v72; // si\n  int v73; // esi\n  int v74; // ebp\n  int v75; // edi\n  int v76; // esi\n  signed __int64 v77; // r14\n  __int64 v78; // rcx\n  int v79; // eax\n  __int64 v80; // r15\n  __int64 v81; // rax\n  __int64 v82; // rsi\n  __m128i v83; // xmm0\n  __int64 v84; // xmm1_8\n  int v85; // eax\n  int v86; // ecx\n  int v88; // [rsp+8h] [rbp-F0h]\n  signed int v89; // [rsp+Ch] [rbp-ECh]\n  signed int v90; // [rsp+10h] [rbp-E8h]\n  unsigned int v91; // [rsp+14h] [rbp-E4h]\n  int v92; // [rsp+18h] [rbp-E0h]\n  __int16 v93; // [rsp+20h] [rbp-D8h]\n  signed int v94; // [rsp+20h] [rbp-D8h]\n  int v95; // [rsp+24h] [rbp-D4h]\n  signed __int64 v96; // [rsp+28h] [rbp-D0h]\n  int v97; // [rsp+34h] [rbp-C4h]\n  unsigned int v98; // [rsp+38h] [rbp-C0h]\n  unsigned int v99; // [rsp+3Ch] [rbp-BCh]\n  __int64 v100; // [rsp+40h] [rbp-B8h]\n  int v101; // [rsp+48h] [rbp-B0h]\n  __int64 v102; // [rsp+50h] [rbp-A8h]\n  void *v103; // [rsp+58h] [rbp-A0h]\n  __int64 (__fastcall *v104)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD); // [rsp+60h] [rbp-98h]\n  __int16 v105; // [rsp+68h] [rbp-90h]\n  signed int v106; // [rsp+78h] [rbp-80h]\n  int v107; // [rsp+7Ch] [rbp-7Ch]\n  int v108; // [rsp+80h] [rbp-78h]\n  int v109; // [rsp+84h] [rbp-74h]\n  __int64 v110; // [rsp+90h] [rbp-68h]\n  int v111; // [rsp+98h] [rbp-60h]\n  __int64 v112; // [rsp+A0h] [rbp-58h]\n  __int64 v113; // [rsp+A8h] [rbp-50h]\n  __int64 v114; // [rsp+B0h] [rbp-48h]\n  __int64 v115; // [rsp+B8h] [rbp-40h]\n  unsigned __int64 v116; // [rsp+C0h] [rbp-38h]\n\n  v18 = a4;\n  v110 = a1;\n  v19 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v20 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v20 + 532) )\n      v19 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  a2 = (signed __int16)a2;\n  v21 = *((_QWORD *)*(&base + (signed int)(v19 + a3)) + (signed __int16)a2);\n  v113 = *(_QWORD *)(v21 + 6432);\n  v22 = v19 | 1;\n  v23 = v19;\n  if ( !a3 )\n    v23 = v22;\n  v112 = *(_QWORD *)(*(_QWORD *)*(&base + v23) + 6432LL);\n  v99 = *(_DWORD *)(v21 + 6392);\n  v98 = *(_DWORD *)(v21 + 6396);\n  v96 = *((signed int *)dest + 2 * a6 + 21);\n  v91 = *((_DWORD *)dest + 2 * a6 + 20);\n  v24 = v18 + *a13;\n  v105 = a5 + *a14;\n  v25 = v18 + *a15;\n  v93 = a5 + *a16;\n  v109 = *(_DWORD *)(qword_4F9DB8 + 196);\n  if ( v109 )\n  {\n    if ( a3 )\n    {\n      v90 = **(_DWORD **)(**((_QWORD **)qword_4F9F78 + v22) + 8 * a2);\n      v89 = **(_DWORD **)(**((_QWORD **)qword_4F9F78 + v19) + 8 * a2);\n      v26 = ***((_DWORD ***)qword_4F9F80 + v22);\n      v27 = (int *)**((_QWORD **)qword_4F9F80 + v19);\n    }\n    else\n    {\n      v90 = ***(_DWORD ***)(*((_QWORD *)qword_4F9F78 + v19) + 8 * a2);\n      v29 = v22;\n      v89 = ***(_DWORD ***)(*((_QWORD *)qword_4F9F78 + v22) + 8 * a2);\n      v26 = **(_DWORD **)(*((_QWORD *)qword_4F9F80 + v19) + 8 * a2);\n      v27 = *(int **)(*((_QWORD *)qword_4F9F80 + v29) + 8 * a2);\n    }\n    v28 = *v27;\n  }\n  else\n  {\n    LOWORD(v26) = 0;\n    v90 = 1 << dword_4FA0EC;\n    v89 = 1 << dword_4FA0EC;\n    LOWORD(v28) = 0;\n  }\n  v30 = a7 * 65536.0;\n  v97 = v24;\n  if ( v24 <= a17\n    || (signed int)(*((_DWORD *)off_49F6D0 + 13) + ~a17 - v91) <= v24\n    || v105 <= a17\n    || *((_DWORD *)off_49F6D0 + 15) + ~a17 - (signed int)v96 <= v105 )\n  {\n    v31 = sub_475AB0;\n  }\n  else\n  {\n    v31 = sub_475A90;\n  }\n  v104 = (__int64 (__fastcall *)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD))v31;\n  v32 = v30 + 0.5;\n  v33 = 4 * v18;\n  v34 = 4 * a5;\n  v100 = (unsigned int)v25;\n  if ( v25 <= a17\n    || (signed int)(*((_DWORD *)off_49F6D0 + 13) + ~a17 - v91) <= (signed int)v100\n    || v93 <= a17\n    || *((_DWORD *)off_49F6D0 + 15) + ~a17 - (signed int)v96 <= v93 )\n  {\n    v103 = sub_475AB0;\n    v35 = v93;\n  }\n  else\n  {\n    v103 = sub_475A90;\n    v35 = v93;\n  }\n  v36 = (signed int)v32;\n  v88 = a18;\n  v37 = v33;\n  v38 = 4 * v100 - (v33 + a9);\n  v111 = v35;\n  v94 = (signed int)v91 >> 2;\n  v39 = v105;\n  v40 = v38;\n  v41 = 4 * v35 - (v34 + a10);\n  v42 = v37 + a11;\n  v92 = ((((signed __int16)v26 + (signed __int16)v28) << 15) + 0x8000) >> 16;\n  v43 = v34 + (signed __int16)a12;\n  v44 = 0LL;\n  v95 = 0;\n  v45 = v24;\n  v108 = v37 + a11;\n  v107 = v34 + (signed __int16)a12;\n  v106 = (signed int)v32;\n  v115 = v38;\n  v114 = v41;\n  do\n  {\n    v46 = (unsigned int)(v45 + *((_DWORD *)qword_4F9F60 + v44));\n    v47 = v43;\n    v48 = (v36 * (*((_DWORD *)qword_4F9F18 + v40) + *((_DWORD *)qword_4F9F18 + v41)) >> 16)\n        + (v36\n         * (*((_DWORD *)qword_4F9F18 + 4 * (signed int)v46 - v42)\n          + *((_DWORD *)qword_4F9F18 + 4 * (v39 + *((_DWORD *)qword_4F9F68 + v44)) - v43)) >> 16);\n    if ( v48 >= v88 )\n    {\n      v43 = v47;\n    }\n    else\n    {\n      v101 = v39 + *((_DWORD *)qword_4F9F68 + v44);\n      v102 = (unsigned int)(v45 + *((_DWORD *)qword_4F9F60 + v44));\n      v116 = v44;\n      if ( v109 )\n      {\n        if ( (signed int)v96 > 0 )\n        {\n          v49 = 0LL;\n          v50 = (unsigned int)(v45 + *((_DWORD *)qword_4F9F60 + v44));\n          v51 = v39 + *((_DWORD *)qword_4F9F68 + v44);\n          do\n          {\n            v52 = v49;\n            v53 = v104(v91, v112, (unsigned int)(v51 + v49), v50, v98, v99);\n            v54 = ((__int64 (__fastcall *)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD))v103)(\n                    v91,\n                    v113,\n                    (unsigned int)(v111 + v52),\n                    v100,\n                    v98,\n                    v99);\n            if ( (signed int)v91 >= 4 )\n            {\n              v55 = *(_QWORD *)(v110 + 8 * v52);\n              v56 = 2 * dword_4FA15C;\n              v57 = dword_4FA0EC + 1;\n              v58 = 0LL;\n              do\n              {\n                v59 = (v56\n                     + (signed __int16)(v90 * *(_WORD *)(v54 + 8 * v58))\n                     + (signed __int16)(v89 * *(_WORD *)(v53 + 8 * v58))) >> v57;\n                v60 = 0;\n                v61 = v92 + v59 < 0;\n                v62 = v92 + v59;\n                v63 = 0;\n                if ( !v61 )\n                {\n                  v64 = *((_DWORD *)off_49F6D0 + 18171);\n                  if ( v62 > v64 )\n                    LOWORD(v62) = *((_DWORD *)off_49F6D0 + 18171);\n                  v63 = v62;\n                }\n                v65 = *((_DWORD *)qword_4F9DE8 + *(unsigned __int16 *)(v55 + 8 * v58) - (signed __int64)v63) + v48;\n                v66 = v92\n                    + (((signed __int16)(v89 * *(_WORD *)(v53 + 8 * v58 + 2))\n                      + v56\n                      + (signed __int16)(v90 * *(_WORD *)(v54 + 8 * v58 + 2))) >> v57);\n                if ( v66 >= 0 )\n                {\n                  v67 = *((_DWORD *)off_49F6D0 + 18171);\n                  if ( v66 > v67 )\n                    LOWORD(v66) = *((_DWORD *)off_49F6D0 + 18171);\n                  v60 = v66;\n                }\n                v68 = *((_DWORD *)qword_4F9DE8 + *(unsigned __int16 *)(v55 + 8 * v58 + 2) - (signed __int64)v60) + v65;\n                v69 = ((signed __int16)(v89 * *(_WORD *)(v53 + 8 * v58 + 4))\n                     + v56\n                     + (signed __int16)(v90 * *(_WORD *)(v54 + 8 * v58 + 4))) >> v57;\n                v70 = 0;\n                v61 = v92 + v69 < 0;\n                v71 = v92 + v69;\n                v72 = 0;\n                if ( !v61 )\n                {\n                  v73 = *((_DWORD *)off_49F6D0 + 18171);\n                  if ( v71 > v73 )\n                    LOWORD(v71) = *((_DWORD *)off_49F6D0 + 18171);\n                  v72 = v71;\n                }\n                v74 = *((_DWORD *)qword_4F9DE8 + *(unsigned __int16 *)(v55 + 8 * v58 + 4) - (signed __int64)v72) + v68;\n                v75 = v92\n                    + (((signed __int16)(v89 * *(_WORD *)(v53 + 8 * v58 + 6))\n                      + v56\n                      + (signed __int16)(v90 * *(_WORD *)(v54 + 8 * v58 + 6))) >> v57);\n                if ( v75 >= 0 )\n                {\n                  v76 = *((_DWORD *)off_49F6D0 + 18171);\n                  if ( v75 > v76 )\n                    LOWORD(v75) = *((_DWORD *)off_49F6D0 + 18171);\n                  v70 = v75;\n                }\n                v48 = *((_DWORD *)qword_4F9DE8 + *(unsigned __int16 *)(v55 + 8 * v58++ + 6) - (signed __int64)v70) + v74;\n              }\n              while ( (signed int)v58 < v94 );\n            }\n            if ( v48 >= v88 )\n              break;\n            v49 = v52 + 1;\n            v50 = v102;\n            v51 = v101;\n          }\n          while ( v52 + 1 < v96 );\n        }\n      }\n      else if ( (signed int)v96 > 0 )\n      {\n        v77 = 0LL;\n        v78 = (unsigned int)(v45 + *((_DWORD *)qword_4F9F60 + v44));\n        v79 = v39 + *((_DWORD *)qword_4F9F68 + v44);\n        do\n        {\n          v80 = v104(v91, v112, (unsigned int)(v79 + v77), v78, v98, v99);\n          v81 = ((__int64 (__fastcall *)(_QWORD, __int64, _QWORD, __int64, _QWORD, _QWORD))v103)(\n                  v91,\n                  v113,\n                  (unsigned int)(v111 + v77),\n                  v100,\n                  v98,\n                  v99);\n          if ( (signed int)v91 >= 4 )\n          {\n            v82 = 0LL;\n            do\n            {\n              v83 = _mm_sub_epi32(\n                      _mm_unpacklo_epi16(\n                        _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v110 + 8 * v77) + 8 * v82)),\n                        (__m128i)0LL),\n                      _mm_srli_epi32(\n                        _mm_add_epi32(\n                          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v80 + 8 * v82)), (__m128i)0LL),\n                          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v81 + 8 * v82)), (__m128i)0LL)),\n                        1u));\n              v84 = (unsigned __int128)_mm_shuffle_epi32(v83, 78);\n              v48 += *((_DWORD *)qword_4F9DE8 + (v84 >> 32))\n                   + *((_DWORD *)qword_4F9DE8 + (signed int)v84)\n                   + *((_DWORD *)qword_4F9DE8 + (v83.m128i_i64[0] >> 32))\n                   + *((_DWORD *)qword_4F9DE8 + v83.m128i_i32[0]);\n              ++v82;\n            }\n            while ( (signed int)v82 < v94 );\n          }\n          v78 = v46;\n          v79 = v101;\n          if ( v48 >= v88 )\n            break;\n          ++v77;\n        }\n        while ( v77 < v96 );\n      }\n      v85 = v88;\n      v44 = v116;\n      v86 = v95;\n      if ( v48 < v88 )\n        v86 = v116;\n      v95 = v86;\n      if ( v48 <= v88 )\n        v85 = v48;\n      v88 = v85;\n      v45 = v97;\n      v42 = v108;\n      v43 = v107;\n      v36 = v106;\n      v39 = v105;\n      v40 = v115;\n      v41 = v114;\n    }\n    ++v44;\n  }\n  while ( v44 < (unsigned int)((2 * a17 + 1) * (2 * a17 + 1)) );\n  if ( v95 )\n  {\n    *a13 += *((_WORD *)qword_4F9F60 + 2 * v95);\n    *a14 += *((_WORD *)qword_4F9F68 + 2 * v95);\n  }\n  return (unsigned int)v88;\n}\n", 
            "funcStartAddr": "0x447dc0L", 
            "funcEndAddr": "0x44860cL", 
            "funcName": "sub_447DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_448610(__int64 a1, __int16 a2, int a3, __int64 a4, __int64 a5, int a6, double a7, double a8, __m128i a9, __int64 a10, __int64 a11, _WORD *a12, _WORD *a13, _WORD *a14, _WORD *a15, int a16, signed int a17, signed int a18)\n{\n  int *v18; // rbx\n  __int16 v19; // r14\n  int v20; // er10\n  signed __int16 v21; // r13\n  int v22; // er8\n  __int64 v23; // rcx\n  int v24; // er12\n  int *v25; // r15\n  __int64 v26; // rbp\n  __int64 v27; // rcx\n  int v28; // ebx\n  int v29; // esi\n  __int64 v30; // rsi\n  double v31; // xmm0_8\n  int v32; // edi\n  __int64 v33; // rcx\n  __int64 v34; // r11\n  unsigned int v35; // edx\n  int v36; // edx\n  int v37; // ecx\n  int v38; // edi\n  void *v39; // rdi\n  double v40; // xmm0_8\n  unsigned int v41; // ebx\n  int v42; // esi\n  int v43; // esi\n  void *v44; // rsi\n  int v45; // ebx\n  int v46; // esi\n  int v47; // er13\n  __int16 v48; // bx\n  __int64 v49; // rdx\n  __int64 v50; // rsi\n  __int64 v51; // rbp\n  __int16 v52; // ax\n  int v53; // ecx\n  __int64 v54; // rsi\n  int v55; // ecx\n  int v56; // edx\n  __int16 v57; // r14\n  __int64 v58; // r12\n  unsigned __int16 v59; // ax\n  bool v60; // sf\n  int v61; // eax\n  int v62; // ebx\n  int v63; // edx\n  int v64; // ebx\n  unsigned int v65; // er14\n  int v66; // ebx\n  unsigned int v67; // er13\n  int v68; // er12\n  int v69; // eax\n  int v70; // ebx\n  int v71; // edx\n  int v72; // ebx\n  unsigned int v73; // er13\n  int v74; // ebx\n  unsigned int v75; // er14\n  int v76; // ebx\n  unsigned __int16 v77; // ax\n  int v78; // ebx\n  __int64 v79; // rax\n  unsigned int v80; // er14\n  int v81; // ebx\n  unsigned int v82; // er13\n  int v83; // er12\n  int v84; // eax\n  int v85; // ebx\n  int v86; // edx\n  int v87; // ebx\n  int v88; // ebx\n  int v89; // ebx\n  unsigned __int16 v90; // ax\n  int v91; // ebx\n  int v92; // ebx\n  int v93; // er15\n  int v94; // eax\n  int v95; // ebp\n  int v96; // edx\n  int v97; // ebp\n  int v98; // ebp\n  int v99; // ebx\n  unsigned __int16 v100; // ax\n  int v101; // ebx\n  int v102; // ebx\n  int v103; // er12\n  int v104; // eax\n  int v105; // ebx\n  int v106; // edx\n  int v107; // ebx\n  int v108; // ebx\n  int v109; // ebx\n  unsigned __int16 v110; // ax\n  int v111; // ebx\n  int v112; // ebx\n  int v113; // er15\n  int v114; // eax\n  int v115; // ebp\n  int v116; // edx\n  int v117; // ebp\n  int v118; // ebp\n  int v119; // ebx\n  unsigned __int16 v120; // ax\n  int v121; // ebx\n  int v122; // ebx\n  int v123; // er12\n  int v124; // eax\n  int v125; // ebx\n  int v126; // edx\n  int v127; // ebx\n  int v128; // ebx\n  int v129; // ebx\n  unsigned __int16 v130; // ax\n  int v131; // ebx\n  int v132; // ebx\n  int v133; // eax\n  int v134; // ebp\n  int v135; // edx\n  int v136; // ebp\n  int v137; // ebp\n  unsigned __int16 v138; // ax\n  __int64 v139; // rdi\n  int v140; // edx\n  int v141; // ebx\n  unsigned __int16 v142; // ax\n  int v143; // ebx\n  int v144; // ebx\n  int v145; // ebx\n  int v146; // edx\n  int v147; // eax\n  int v148; // ebx\n  __int16 v149; // dx\n  int v150; // er12\n  __int64 v151; // rdx\n  __int16 v152; // ax\n  __int16 v153; // r15\n  __int64 v154; // STB0_8\n  int v155; // er13\n  int v156; // er14\n  __int64 v157; // ST60_8\n  int v158; // ST58_4\n  __int64 v159; // ST30_8\n  __int64 v160; // ST58_8\n  int v161; // ebp\n  unsigned int v162; // ST50_4\n  int v163; // er14\n  unsigned int v164; // ST98_4\n  __int64 v165; // STA0_8\n  int v166; // er14\n  int v167; // er15\n  unsigned int v168; // ST80_4\n  __int64 v169; // ST38_8\n  int v170; // er14\n  int v171; // STA8_4\n  unsigned int v172; // ST68_4\n  __int64 v173; // STA8_8\n  int v174; // ebp\n  int v175; // er12\n  int v176; // ebx\n  int v177; // STD8_4\n  int v178; // ebx\n  int v179; // er13\n  int v180; // er13\n  __int64 v181; // STA8_8\n  int v182; // er13\n  int v183; // ebx\n  int v184; // ebx\n  int v185; // STD8_4\n  int v186; // ebx\n  int v187; // STD8_4\n  int v188; // ebx\n  int v189; // ebp\n  __int64 v190; // rbx\n  int v191; // ebp\n  __int64 v192; // STA8_8\n  int v193; // er12\n  int v194; // ebp\n  int v195; // ebp\n  __int16 v196; // ax\n  __int64 v197; // rbp\n  signed int v198; // eax\n  int v199; // esi\n  signed int v200; // edx\n  signed int v201; // ecx\n  int v202; // edi\n  int v203; // edx\n  __int16 v204; // si\n  int v205; // ecx\n  signed int v206; // eax\n  __int64 v207; // rbp\n  int v208; // ecx\n  int v209; // eax\n  void *v210; // rax\n  int v211; // edx\n  __int64 v212; // rsi\n  __int64 v213; // rbx\n  __int16 v214; // ax\n  int v215; // ecx\n  unsigned int v216; // er15\n  int v217; // edx\n  int v218; // ecx\n  __int16 v219; // r14\n  __int64 v220; // r13\n  int v221; // ebp\n  int v222; // er12\n  int v223; // eax\n  int v224; // ebx\n  int v225; // edx\n  int v226; // ebx\n  unsigned int v227; // ebp\n  int v228; // ebx\n  unsigned int v229; // er13\n  int v230; // eax\n  int v231; // ebx\n  int v232; // edx\n  int v233; // ebx\n  unsigned int v234; // er14\n  int v235; // ebx\n  unsigned int v236; // er13\n  unsigned __int16 v237; // ax\n  int v238; // edx\n  int v239; // ebx\n  unsigned __int16 v240; // ax\n  int v241; // ebx\n  __int64 v242; // rax\n  unsigned int v243; // er14\n  int v244; // ebx\n  unsigned int v245; // er13\n  int v246; // er12\n  int v247; // eax\n  int v248; // ebx\n  int v249; // edx\n  int v250; // ebx\n  int v251; // ebx\n  int v252; // ebx\n  unsigned __int16 v253; // ax\n  int v254; // ebx\n  int v255; // ebx\n  int v256; // er15\n  int v257; // eax\n  int v258; // ebp\n  int v259; // edx\n  int v260; // ebp\n  int v261; // ebp\n  int v262; // ebx\n  unsigned __int16 v263; // ax\n  int v264; // ebx\n  int v265; // ebx\n  int v266; // er12\n  int v267; // eax\n  int v268; // ebx\n  int v269; // edx\n  int v270; // ebx\n  int v271; // ebx\n  int v272; // ebx\n  unsigned __int16 v273; // ax\n  int v274; // ebx\n  int v275; // ebx\n  int v276; // er14\n  int v277; // eax\n  int v278; // ebp\n  int v279; // edx\n  int v280; // ebp\n  int v281; // ebp\n  int v282; // ebx\n  unsigned __int16 v283; // ax\n  int v284; // ebx\n  int v285; // ebx\n  int v286; // er12\n  int v287; // eax\n  int v288; // ebx\n  int v289; // edx\n  int v290; // ebx\n  int v291; // ebx\n  int v292; // ebx\n  unsigned __int16 v293; // ax\n  int v294; // ebx\n  int v295; // ebx\n  int v296; // er15\n  int v297; // eax\n  int v298; // ebp\n  int v299; // esi\n  int v300; // ebp\n  int v301; // ebp\n  __int64 v302; // rdi\n  int v303; // ebx\n  unsigned __int16 v304; // ax\n  int v305; // ebx\n  int v306; // ebx\n  int v307; // ebx\n  int v308; // edx\n  int v309; // eax\n  int v310; // ebx\n  int *v311; // rbx\n  __int16 v312; // dx\n  int v313; // edx\n  __int64 v314; // rcx\n  int v315; // ST88_4\n  __int16 v316; // ax\n  __int16 v317; // bx\n  __int64 v318; // r12\n  int v319; // er13\n  __int64 v320; // ST80_8\n  int v321; // er14\n  __int64 v322; // ST30_8\n  int v323; // ST48_4\n  __int64 v324; // ST60_8\n  __int64 v325; // ST48_8\n  int v326; // ebp\n  unsigned int v327; // ST28_4\n  int v328; // ST50_4\n  unsigned int v329; // ST58_4\n  __int64 v330; // ST50_8\n  int v331; // ebp\n  unsigned int v332; // ST98_4\n  int v333; // er14\n  __int64 v334; // ST88_8\n  int v335; // er14\n  int v336; // STC8_4\n  __int64 v337; // STC8_8\n  int v338; // ebp\n  int v339; // ebx\n  int v340; // STD8_4\n  int v341; // ebx\n  int v342; // ebp\n  int v343; // ebx\n  int v344; // ebp\n  __int64 v345; // STC8_8\n  int v346; // ebp\n  int v347; // ebx\n  int v348; // ebx\n  int v349; // STD8_4\n  int v350; // ebx\n  int v351; // STD8_4\n  int v352; // ebx\n  int v353; // ebp\n  __int64 v354; // rbx\n  int v355; // ebp\n  __int64 v356; // STC8_8\n  int v357; // er14\n  __int16 v358; // ax\n  __int64 v359; // rbx\n  int v360; // ecx\n  int v361; // edx\n  int v362; // esi\n  signed int v363; // eax\n  signed int v364; // ecx\n  unsigned int v366; // [rsp+8h] [rbp-640h]\n  int v367; // [rsp+10h] [rbp-638h]\n  int v368; // [rsp+14h] [rbp-634h]\n  __int64 v369; // [rsp+18h] [rbp-630h]\n  __int64 v370; // [rsp+20h] [rbp-628h]\n  unsigned int v371; // [rsp+28h] [rbp-620h]\n  unsigned int v372; // [rsp+28h] [rbp-620h]\n  unsigned int v373; // [rsp+28h] [rbp-620h]\n  unsigned int v374; // [rsp+2Ch] [rbp-61Ch]\n  __int64 v375; // [rsp+30h] [rbp-618h]\n  unsigned int v376; // [rsp+30h] [rbp-618h]\n  __int64 v377; // [rsp+38h] [rbp-610h]\n  __int64 v378; // [rsp+38h] [rbp-610h]\n  __int64 v379; // [rsp+38h] [rbp-610h]\n  __int64 v380; // [rsp+38h] [rbp-610h]\n  __int64 v381; // [rsp+38h] [rbp-610h]\n  unsigned int v382; // [rsp+40h] [rbp-608h]\n  __int64 v383; // [rsp+40h] [rbp-608h]\n  unsigned int v384; // [rsp+40h] [rbp-608h]\n  __int64 v385; // [rsp+40h] [rbp-608h]\n  unsigned int v386; // [rsp+48h] [rbp-600h]\n  unsigned int v387; // [rsp+48h] [rbp-600h]\n  unsigned int v388; // [rsp+48h] [rbp-600h]\n  unsigned int v389; // [rsp+50h] [rbp-5F8h]\n  unsigned int v390; // [rsp+50h] [rbp-5F8h]\n  unsigned int v391; // [rsp+58h] [rbp-5F0h]\n  unsigned int v392; // [rsp+58h] [rbp-5F0h]\n  unsigned int v393; // [rsp+60h] [rbp-5E8h]\n  unsigned int v394; // [rsp+60h] [rbp-5E8h]\n  __int64 v395; // [rsp+68h] [rbp-5E0h]\n  __int64 v396; // [rsp+68h] [rbp-5E0h]\n  __int64 v397; // [rsp+68h] [rbp-5E0h]\n  __int64 v398; // [rsp+68h] [rbp-5E0h]\n  unsigned int v399; // [rsp+68h] [rbp-5E0h]\n  unsigned int v400; // [rsp+68h] [rbp-5E0h]\n  unsigned int v401; // [rsp+70h] [rbp-5D8h]\n  unsigned int v402; // [rsp+70h] [rbp-5D8h]\n  unsigned int v403; // [rsp+70h] [rbp-5D8h]\n  unsigned int v404; // [rsp+70h] [rbp-5D8h]\n  unsigned int v405; // [rsp+74h] [rbp-5D4h]\n  unsigned int v406; // [rsp+74h] [rbp-5D4h]\n  unsigned int v407; // [rsp+74h] [rbp-5D4h]\n  unsigned int v408; // [rsp+74h] [rbp-5D4h]\n  unsigned int v409; // [rsp+78h] [rbp-5D0h]\n  unsigned int v410; // [rsp+78h] [rbp-5D0h]\n  unsigned int v411; // [rsp+78h] [rbp-5D0h]\n  unsigned int v412; // [rsp+78h] [rbp-5D0h]\n  unsigned int v413; // [rsp+7Ch] [rbp-5CCh]\n  unsigned int v414; // [rsp+7Ch] [rbp-5CCh]\n  unsigned int v415; // [rsp+7Ch] [rbp-5CCh]\n  unsigned int v416; // [rsp+7Ch] [rbp-5CCh]\n  unsigned int v417; // [rsp+80h] [rbp-5C8h]\n  unsigned int v418; // [rsp+80h] [rbp-5C8h]\n  unsigned int v419; // [rsp+88h] [rbp-5C0h]\n  __int64 v420; // [rsp+88h] [rbp-5C0h]\n  unsigned int v421; // [rsp+94h] [rbp-5B4h]\n  unsigned int v422; // [rsp+94h] [rbp-5B4h]\n  unsigned int v423; // [rsp+98h] [rbp-5B0h]\n  unsigned int v424; // [rsp+98h] [rbp-5B0h]\n  unsigned int v425; // [rsp+A0h] [rbp-5A8h]\n  unsigned int v426; // [rsp+A0h] [rbp-5A8h]\n  __int64 v427; // [rsp+A8h] [rbp-5A0h]\n  __int64 v428; // [rsp+A8h] [rbp-5A0h]\n  unsigned int v429; // [rsp+A8h] [rbp-5A0h]\n  unsigned int v430; // [rsp+B0h] [rbp-598h]\n  unsigned int v431; // [rsp+B0h] [rbp-598h]\n  unsigned int v432; // [rsp+B0h] [rbp-598h]\n  signed int v433; // [rsp+BCh] [rbp-58Ch]\n  signed int v434; // [rsp+BCh] [rbp-58Ch]\n  int v435; // [rsp+C0h] [rbp-588h]\n  __int64 v436; // [rsp+C0h] [rbp-588h]\n  unsigned int v437; // [rsp+C0h] [rbp-588h]\n  int v438; // [rsp+C0h] [rbp-588h]\n  __int64 v439; // [rsp+C0h] [rbp-588h]\n  unsigned int v440; // [rsp+C0h] [rbp-588h]\n  __int64 v441; // [rsp+C8h] [rbp-580h]\n  unsigned int v442; // [rsp+C8h] [rbp-580h]\n  __int64 v443; // [rsp+C8h] [rbp-580h]\n  __int64 v444; // [rsp+D0h] [rbp-578h]\n  int v445; // [rsp+D8h] [rbp-570h]\n  int v446; // [rsp+D8h] [rbp-570h]\n  int v447; // [rsp+E0h] [rbp-568h]\n  int v448; // [rsp+E0h] [rbp-568h]\n  int v449; // [rsp+E4h] [rbp-564h]\n  int v450; // [rsp+E4h] [rbp-564h]\n  __int64 v451; // [rsp+E8h] [rbp-560h]\n  __int64 v452; // [rsp+E8h] [rbp-560h]\n  int v453; // [rsp+F0h] [rbp-558h]\n  int v454; // [rsp+F4h] [rbp-554h]\n  int v455; // [rsp+F8h] [rbp-550h]\n  int v456; // [rsp+F8h] [rbp-550h]\n  int v457; // [rsp+FCh] [rbp-54Ch]\n  __int128 v458; // [rsp+100h] [rbp-548h]\n  int v459; // [rsp+110h] [rbp-538h]\n  int v460; // [rsp+114h] [rbp-534h]\n  int v461; // [rsp+118h] [rbp-530h]\n  int v462; // [rsp+11Ch] [rbp-52Ch]\n  int v463; // [rsp+120h] [rbp-528h]\n  int v464; // [rsp+124h] [rbp-524h]\n  int v465; // [rsp+128h] [rbp-520h]\n  int v466; // [rsp+12Ch] [rbp-51Ch]\n  int v467; // [rsp+130h] [rbp-518h]\n  int v468; // [rsp+134h] [rbp-514h]\n  int v469; // [rsp+138h] [rbp-510h]\n  int v470; // [rsp+13Ch] [rbp-50Ch]\n  __int64 v471; // [rsp+148h] [rbp-500h]\n  __int64 v472; // [rsp+150h] [rbp-4F8h]\n  __int64 v473; // [rsp+158h] [rbp-4F0h]\n  __int64 v474; // [rsp+160h] [rbp-4E8h]\n  __int64 v475; // [rsp+168h] [rbp-4E0h]\n  __int64 v476; // [rsp+170h] [rbp-4D8h]\n  __int64 v477; // [rsp+178h] [rbp-4D0h]\n  unsigned int v478; // [rsp+180h] [rbp-4C8h]\n  int v479; // [rsp+184h] [rbp-4C4h]\n  int v480; // [rsp+188h] [rbp-4C0h]\n  unsigned int v481; // [rsp+18Ch] [rbp-4BCh]\n  __int64 v482; // [rsp+190h] [rbp-4B8h]\n  __int64 v483; // [rsp+198h] [rbp-4B0h]\n  __int64 v484; // [rsp+1A0h] [rbp-4A8h]\n  int v485; // [rsp+1A8h] [rbp-4A0h]\n  int v486; // [rsp+1ACh] [rbp-49Ch]\n  int v487; // [rsp+1B0h] [rbp-498h]\n  int v488; // [rsp+1B4h] [rbp-494h]\n  int v489; // [rsp+1B8h] [rbp-490h]\n  int v490; // [rsp+1BCh] [rbp-48Ch]\n  __int64 v491; // [rsp+1C0h] [rbp-488h]\n  __int64 v492; // [rsp+1C8h] [rbp-480h]\n  __int64 v493; // [rsp+1D0h] [rbp-478h]\n  __int64 v494; // [rsp+1D8h] [rbp-470h]\n  __int64 v495; // [rsp+1E0h] [rbp-468h]\n  __int64 v496; // [rsp+1E8h] [rbp-460h]\n  __int64 v497; // [rsp+1F0h] [rbp-458h]\n  __int64 v498; // [rsp+1F8h] [rbp-450h]\n  __int64 v499; // [rsp+200h] [rbp-448h]\n  __int64 v500; // [rsp+208h] [rbp-440h]\n  char v501[1080]; // [rsp+210h] [rbp-438h]\n\n  v497 = a5;\n  v444 = a1;\n  v18 = (int *)dest;\n  v487 = a6;\n  v449 = *((_DWORD *)dest + 2 * a6 + 20);\n  v455 = *((_DWORD *)dest + 2 * a6 + 21);\n  v482 = a4;\n  v19 = 4 * a4;\n  v20 = *((_DWORD *)dest + 6);\n  v21 = 1;\n  if ( a16 > 0 )\n    v21 = a16;\n  v22 = 0;\n  if ( !v20 )\n    v21 = a16;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v23 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v23 + 532) )\n      v24 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n    else\n      LOWORD(v24) = 0;\n    v18 = (int *)dest;\n  }\n  else\n  {\n    LOWORD(v24) = 0;\n  }\n  v479 = 4 * v497;\n  v490 = *(_DWORD *)(qword_4F9DB8 + 196);\n  v25 = v18;\n  if ( (_WORD)v490 )\n  {\n    if ( a3 )\n    {\n      v26 = (unsigned __int16)v24 | 1u;\n      v27 = a2;\n      v454 = **(_DWORD **)(**((_QWORD **)qword_4F9F78 + v26) + 8LL * a2);\n      v453 = **(_DWORD **)(**((_QWORD **)qword_4F9F78 + (unsigned __int16)v24) + 8LL * a2);\n      v28 = ***((_DWORD ***)qword_4F9F80 + v26);\n      v29 = ***((_DWORD ***)qword_4F9F80 + (unsigned __int16)v24);\n    }\n    else\n    {\n      v27 = a2;\n      v454 = ***(_DWORD ***)(*((_QWORD *)qword_4F9F78 + (unsigned __int16)v24) + 8LL * a2);\n      v30 = (unsigned __int16)v24 | 1u;\n      v453 = ***(_DWORD ***)(*((_QWORD *)qword_4F9F78 + v30) + 8 * v27);\n      v28 = **(_DWORD **)(*((_QWORD *)qword_4F9F80 + (unsigned __int16)v24) + 8 * v27);\n      v29 = **(_DWORD **)(*((_QWORD *)qword_4F9F80 + v30) + 8 * v27);\n    }\n  }\n  else\n  {\n    v27 = a2;\n    LOWORD(v454) = 1;\n    LOWORD(v28) = 0;\n    LOWORD(v453) = 1;\n    LOWORD(v29) = 0;\n  }\n  v31 = a7 * 65536.0;\n  LOBYTE(v22) = v20 == 0;\n  v29 = (signed __int16)v29;\n  v28 = (signed __int16)v28;\n  v32 = 0;\n  v480 = v25[7];\n  if ( !v480 )\n    v32 = v20;\n  LODWORD(v483) = v32;\n  v33 = *((_QWORD *)*(&base + (unsigned __int16)v24 + a3) + v27);\n  v34 = *(_QWORD *)(v33 + 6448);\n  v370 = *(_QWORD *)(*(_QWORD *)*(&base + ((unsigned __int16)v24 | (unsigned int)(a3 == 0))) + 6448LL);\n  v35 = *(_DWORD *)(v33 + 6396);\n  v366 = *(_DWORD *)(v33 + 6392);\n  v457 = (signed __int16)v449;\n  v481 = 4 * (v366 - (signed __int16)v449) + 4;\n  v374 = v35;\n  v489 = (signed __int16)v455;\n  v478 = 4 * (v35 - (signed __int16)v455) + 4;\n  *a12 *= 4;\n  v36 = 4 * (unsigned __int16)*a13;\n  *a13 *= 4;\n  v37 = (signed __int16)*a12;\n  v491 = (unsigned int)v19;\n  if ( v37 + (signed int)v491 < 2\n    || v37 + (signed int)v491 >= (signed __int16)v481 - 2\n    || (v38 = (signed __int16)v479 + (signed __int16)v36, v38 < 2)\n    || v38 >= (signed __int16)v478 - 2 )\n  {\n    v39 = sub_476120;\n  }\n  else\n  {\n    v39 = sub_4761C0;\n  }\n  v40 = v31 + 0.5;\n  v41 = v28 + v29 + 1;\n  qword_49FE48 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v39;\n  v42 = v491 + (signed __int16)*a14;\n  if ( v42 < 2\n    || v42 >= (signed __int16)v481 - 2\n    || (v43 = (signed __int16)v479 + (signed __int16)*a15, v43 < 2)\n    || v43 >= (signed __int16)v478 - 2 )\n  {\n    v44 = sub_476120;\n  }\n  else\n  {\n    v44 = sub_4761C0;\n  }\n  v433 = a18;\n  v488 = (signed int)v40;\n  v45 = v41 >> 1;\n  v450 = v449 << 16;\n  qword_49FE50 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v44;\n  v456 = v455 << 16;\n  v46 = v22;\n  v369 = v34;\n  if ( v21 <= (signed int)(unsigned __int16)v22 )\n  {\n    v203 = v480;\n    v204 = v45;\n    v205 = v491;\n    v48 = a11;\n    goto LABEL_114;\n  }\n  v486 = v21;\n  v500 = (signed __int16)a10;\n  v499 = (signed __int16)a11;\n  v485 = v45;\n  v47 = (signed __int16)v45;\n  LODWORD(v493) = 4 * v482;\n  v447 = 0;\n  v48 = a11;\n  v367 = v47;\n  while ( 2 )\n  {\n    LODWORD(v492) = v46;\n    v49 = v36 + 2 * (unsigned int)*((unsigned __int16 *)qword_4F9F68 + 2 * (signed __int16)v46);\n    v484 = v37 + 2 * (unsigned int)*((unsigned __int16 *)qword_4F9F60 + 2 * (signed __int16)v46);\n    v494 = v49;\n    v421 = (unsigned int)(v488\n                        * (*((_DWORD *)qword_4F9F18 + (signed __int16)v484 - v500)\n                         + *((_DWORD *)qword_4F9F18 + (signed __int16)v49 - v499))) >> 16;\n    if ( v456 <= 0 )\n      goto LABEL_101;\n    v50 = 0LL;\n    v51 = 0LL;\n    while ( 1 )\n    {\n      v52 = *a15 + 4 * (v497 + v51);\n      v451 = (signed __int16)(4 * v50);\n      v53 = v494 + 4 * (v497 + v51);\n      v496 = v50;\n      v495 = v51;\n      if ( (_WORD)v490 )\n      {\n        if ( v450 > 0 )\n        {\n          v477 = (signed __int16)v51;\n          v54 = (unsigned int)v52;\n          v393 = (signed __int16)v53;\n          v476 = (signed int)(v51 | 1);\n          v382 = (signed __int16)(v52 + 4);\n          v386 = (signed __int16)(v53 + 4);\n          v475 = (signed int)(v51 | 2);\n          v371 = (signed __int16)(v52 + 8);\n          v391 = (signed __int16)(v53 + 8);\n          v474 = (signed int)(v51 | 3);\n          v389 = (signed __int16)(v53 + 12);\n          v473 = v451 | 1;\n          v472 = v451 | 2;\n          v471 = v451 | 3;\n          v55 = 0;\n          v56 = v493;\n          v423 = v52;\n          v425 = (signed __int16)(v52 + 12);\n          while ( 1 )\n          {\n            v435 = v55;\n            v377 = (signed __int16)v55;\n            v445 = v56;\n            v57 = v484 + v56;\n            v395 = *(_QWORD *)(v444 + 8 * v477);\n            v58 = (unsigned int)(signed __int16)(v56 + *a14);\n            v59 = qword_49FE50(v34, v54, v58, v374, v366);\n            v375 = (unsigned int)v57;\n            v60 = v47\n                + (((signed __int16)v454 * v59\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v375, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v61 = 0;\n            if ( !v60 )\n            {\n              v62 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, (unsigned int)v58, v374, v366);\n              v63 = v367\n                  + ((v62\n                    + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v375, v374, v366)\n                    + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v61 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v63 <= v61 )\n              {\n                v64 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, (unsigned int)v58, v374, v366);\n                v61 = v367\n                    + ((v64\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v375, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            LODWORD(v458) = *(unsigned __int16 *)(v395 + 2 * v377) - v61;\n            v417 = v58;\n            v65 = v58 + 4;\n            v66 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, (unsigned int)(v58 + 4), v374, v366);\n            v67 = v375 + 4;\n            v68 = 0;\n            v60 = v367\n                + ((v66\n                  + (signed __int16)v453\n                  * (unsigned __int16)qword_49FE48(v370, v393, (unsigned int)(v375 + 4), v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v69 = 0;\n            if ( !v60 )\n            {\n              v70 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v65, v374, v366);\n              v71 = v367\n                  + ((v70\n                    + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v67, v374, v366)\n                    + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v69 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v71 <= v69 )\n              {\n                v72 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v65, v374, v366);\n                v69 = v367\n                    + ((v72\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v67, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v401 = v65;\n            v430 = v375 + 4;\n            v427 = v435 | 1;\n            DWORD1(v458) = *(unsigned __int16 *)(v395 + 2 * v427) - v69;\n            v73 = v417 + 8;\n            v74 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v417 + 8, v374, v366);\n            v75 = v375 + 8;\n            if ( v367\n               + ((v74\n                 + (signed __int16)v453\n                 * (unsigned __int16)qword_49FE48(v370, v393, (unsigned int)(v375 + 8), v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v76 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v73, v374, v366);\n              v77 = qword_49FE48(v370, v393, v75, v374, v366);\n              v68 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v76 + (signed __int16)v453 * v77 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v68 )\n              {\n                v78 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v73, v374, v366);\n                v68 = v367\n                    + ((v78\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v75, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v409 = v375 + 8;\n            v413 = v417 + 8;\n            v79 = v435 | 2;\n            v441 = v79;\n            DWORD2(v458) = *(unsigned __int16 *)(v395 + 2 * v79) - v68;\n            v80 = v417 + 12;\n            v81 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v417 + 12, v374, v366);\n            v82 = v375 + 12;\n            v83 = 0;\n            v60 = v367\n                + ((v81\n                  + (signed __int16)v453\n                  * (unsigned __int16)qword_49FE48(v370, v393, (unsigned int)(v375 + 12), v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v84 = 0;\n            if ( !v60 )\n            {\n              v85 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v80, v374, v366);\n              v86 = v367\n                  + ((v85\n                    + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v82, v374, v366)\n                    + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v84 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v86 <= v84 )\n              {\n                v87 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v423, v80, v374, v366);\n                v84 = v367\n                    + ((v87\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v393, v82, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v419 = v375 + 12;\n            v405 = v417 + 12;\n            v436 = v435 | 3;\n            HIDWORD(v458) = *(unsigned __int16 *)(v395 + 2 * v436) - v84;\n            v396 = *(_QWORD *)(v444 + 8 * v476);\n            v88 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v417, v374, v366);\n            if ( v367\n               + ((v88\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, (unsigned int)v375, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v89 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v417, v374, v366);\n              v90 = qword_49FE48(v370, v386, (unsigned int)v375, v374, v366);\n              v83 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v89 + (signed __int16)v453 * v90 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v83 )\n              {\n                v91 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v417, v374, v366);\n                v83 = v367\n                    + ((v91\n                      + (signed __int16)v453\n                      * (unsigned __int16)qword_49FE48(v370, v386, (unsigned int)v375, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v459 = *(unsigned __int16 *)(v396 + 2 * v377) - v83;\n            v92 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v401, v374, v366);\n            v93 = 0;\n            v60 = v367\n                + ((v92\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v430, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v94 = 0;\n            if ( !v60 )\n            {\n              v95 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v401, v374, v366);\n              v96 = v367\n                  + ((v95\n                    + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v430, v374, v366)\n                    + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v94 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v96 <= v94 )\n              {\n                v97 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v401, v374, v366);\n                v94 = v367\n                    + ((v97\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v430, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v460 = *(unsigned __int16 *)(v396 + 2 * v427) - v94;\n            v98 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v413, v374, v366);\n            if ( v367\n               + ((v98\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v409, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v99 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v413, v374, v366);\n              v100 = qword_49FE48(v370, v386, v409, v374, v366);\n              v93 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v99 + (signed __int16)v453 * v100 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v93 )\n              {\n                v101 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v413, v374, v366);\n                v93 = v367\n                    + ((v101\n                      + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v409, v374, v366)\n                      + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v461 = *(unsigned __int16 *)(v396 + 2 * v441) - v93;\n            v102 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v80, v374, v366);\n            v103 = 0;\n            v60 = v367\n                + ((v102\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v419, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v104 = 0;\n            if ( !v60 )\n            {\n              v105 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v80, v374, v366);\n              v106 = v367\n                   + ((v105\n                     + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v419, v374, v366)\n                     + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v104 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v106 <= v104 )\n              {\n                v107 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v382, v80, v374, v366);\n                v104 = v367\n                     + ((v107\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v386, v419, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v462 = *(unsigned __int16 *)(v396 + 2 * v436) - v104;\n            v397 = *(_QWORD *)(v444 + 8 * v475);\n            v108 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v417, v374, v366);\n            if ( v367\n               + ((v108\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, (unsigned int)v375, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v109 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v417, v374, v366);\n              v110 = qword_49FE48(v370, v391, (unsigned int)v375, v374, v366);\n              v103 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v109 + (signed __int16)v453 * v110 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v103 )\n              {\n                v111 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v417, v374, v366);\n                v103 = v367\n                     + ((v111\n                       + (signed __int16)v453\n                       * (unsigned __int16)qword_49FE48(v370, v391, (unsigned int)v375, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v463 = *(unsigned __int16 *)(v397 + 2 * v377) - v103;\n            v112 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v401, v374, v366);\n            v113 = 0;\n            v60 = v367\n                + ((v112\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v430, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v114 = 0;\n            if ( !v60 )\n            {\n              v115 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v401, v374, v366);\n              v116 = v367\n                   + ((v115\n                     + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v430, v374, v366)\n                     + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v114 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v116 <= v114 )\n              {\n                v117 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v401, v374, v366);\n                v114 = v367\n                     + ((v117\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v430, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v464 = *(unsigned __int16 *)(v397 + 2 * v427) - v114;\n            v118 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v413, v374, v366);\n            if ( v367\n               + ((v118\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v409, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v119 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v413, v374, v366);\n              v120 = qword_49FE48(v370, v391, v409, v374, v366);\n              v113 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v119 + (signed __int16)v453 * v120 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v113 )\n              {\n                v121 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v413, v374, v366);\n                v113 = v367\n                     + ((v121\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v409, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v465 = *(unsigned __int16 *)(v397 + 2 * v441) - v113;\n            v122 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v80, v374, v366);\n            v123 = 0;\n            v60 = v367\n                + ((v122\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v419, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v124 = 0;\n            if ( !v60 )\n            {\n              v125 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v80, v374, v366);\n              v126 = v367\n                   + ((v125\n                     + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v419, v374, v366)\n                     + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v124 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v126 <= v124 )\n              {\n                v127 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v371, v80, v374, v366);\n                v124 = v367\n                     + ((v127\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v391, v419, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v466 = *(unsigned __int16 *)(v397 + 2 * v436) - v124;\n            v398 = *(_QWORD *)(v444 + 8 * v474);\n            v128 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v417, v374, v366);\n            if ( v367\n               + ((v128\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, (unsigned int)v375, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v129 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v417, v374, v366);\n              v130 = qword_49FE48(v370, v389, (unsigned int)v375, v374, v366);\n              v123 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v129 + (signed __int16)v453 * v130 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v123 )\n              {\n                v131 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v417, v374, v366);\n                v123 = v367\n                     + ((v131\n                       + (signed __int16)v453\n                       * (unsigned __int16)qword_49FE48(v370, v389, (unsigned int)v375, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v467 = *(unsigned __int16 *)(v398 + 2 * v377) - v123;\n            v132 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v401, v374, v366);\n            v60 = v367\n                + ((v132\n                  + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v430, v374, v366)\n                  + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n            v133 = 0;\n            if ( !v60 )\n            {\n              v134 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v401, v374, v366);\n              v135 = v367\n                   + ((v134\n                     + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v430, v374, v366)\n                     + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v133 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v135 <= v133 )\n              {\n                v136 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v401, v374, v366);\n                v133 = v367\n                     + ((v136\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v430, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v468 = *(unsigned __int16 *)(v398 + 2 * v427) - v133;\n            v137 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v413, v374, v366);\n            v138 = qword_49FE48(v370, v389, v409, v374, v366);\n            v139 = v369;\n            v47 = v367;\n            v140 = 0;\n            if ( v367 + ((v137 + (signed __int16)v453 * v138 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n            {\n              v141 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v413, v374, v366);\n              v142 = qword_49FE48(v370, v389, v409, v374, v366);\n              v139 = v369;\n              v140 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v367 + ((v141 + (signed __int16)v453 * v142 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v140 )\n              {\n                v143 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v413, v374, v366);\n                v139 = v369;\n                v140 = v367\n                     + ((v143\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v409, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v469 = *(unsigned __int16 *)(v398 + 2 * v441) - v140;\n            v144 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v139, v425, v80, v374, v366);\n            if ( v367\n               + ((v144\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v419, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0 )\n            {\n              v147 = 0;\n            }\n            else\n            {\n              v145 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v139, v425, v405, v374, v366);\n              v47 = v367;\n              v146 = v367\n                   + ((v145\n                     + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v419, v374, v366)\n                     + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              v147 = *((_DWORD *)off_49F6D0 + 18171);\n              if ( v146 <= v147 )\n              {\n                v148 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v425, v405, v374, v366);\n                v147 = v367\n                     + ((v148\n                       + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v389, v419, v374, v366)\n                       + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n              }\n            }\n            v470 = *(unsigned __int16 *)(v398 + 2 * v436) - v147;\n            v25 = (int *)dest;\n            if ( *((_DWORD *)dest + 805) )\n            {\n              v149 = v377;\n              *(_OWORD *)&v501[64 * v451 + 4 * v377] = v458;\n              *(_OWORD *)&v501[64 * v473 + 4 * v377] = *(_OWORD *)&v459;\n              *(_OWORD *)&v501[64 * v472 + 4 * v377] = *(_OWORD *)&v463;\n              v40 = *(double *)&v467;\n              *(_OWORD *)&v501[64 * v471 + 4 * v377] = *(_OWORD *)&v467;\n              v34 = v369;\n            }\n            else\n            {\n              v421 += sub_445CD0((signed int *)&v458, v483);\n              v149 = v377;\n              v34 = v369;\n              if ( v433 < (signed __int16)v421 )\n              {\n                v48 = a11;\n                goto LABEL_101;\n              }\n            }\n            v55 = (signed __int16)(v149 + 4);\n            v56 = v445 + 16;\n            v54 = v423;\n            if ( v457 <= v55 )\n              goto LABEL_98;\n          }\n        }\n        goto LABEL_98;\n      }\n      if ( v450 > 0 )\n        break;\nLABEL_98:\n      v51 = (unsigned int)(signed __int16)(v495 + 4);\n      v50 = (unsigned int)(v496 + 1);\n      v48 = a11;\n      if ( v489 <= (signed int)v51 )\n      {\nLABEL_101:\n        if ( !v25[805] )\n          goto LABEL_104;\n        goto LABEL_102;\n      }\n    }\n    v476 = (signed __int16)v51;\n    v402 = v52;\n    v387 = (signed __int16)v53;\n    v475 = (signed int)(v51 | 1);\n    v414 = (signed __int16)(v52 + 4);\n    v442 = (signed __int16)(v53 + 4);\n    v474 = (signed int)(v51 | 2);\n    v372 = (signed __int16)(v52 + 8);\n    v437 = (signed __int16)(v53 + 8);\n    v473 = (signed int)(v51 | 3);\n    v410 = (signed __int16)(v52 + 12);\n    v406 = (signed __int16)(v53 + 12);\n    v472 = v451 | 1;\n    v471 = v451 | 2;\n    v498 = v451 | 3;\n    v150 = 0;\n    v151 = (unsigned int)v493;\n    while ( 1 )\n    {\n      v383 = (signed __int16)v150;\n      v152 = v151 + *a14;\n      v477 = v151;\n      v153 = v484 + v151;\n      v154 = *(_QWORD *)(v444 + 8 * v476);\n      v155 = *(unsigned __int16 *)(v154 + 2LL * (signed __int16)v150);\n      v156 = v152;\n      v157 = (unsigned int)v152;\n      v158 = (unsigned __int16)qword_49FE50(v34, v402, v157, v374, v366);\n      v159 = (unsigned int)v153;\n      LODWORD(v458) = v155 - ((v158 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v387, v159, v374, v366)) >> 1);\n      v160 = v150 | 1;\n      v161 = *(unsigned __int16 *)(v154 + 2 * v160);\n      v162 = v156 + 4;\n      v163 = (unsigned __int16)qword_49FE50(v369, v402, (unsigned int)(v156 + 4), v374, v366);\n      v164 = v159 + 4;\n      DWORD1(v458) = v161\n                   - ((v163\n                     + (unsigned int)(unsigned __int16)qword_49FE48(v370, v387, (unsigned int)(v159 + 4), v374, v366)) >> 1);\n      v165 = v150 | 2;\n      v166 = *(unsigned __int16 *)(v154 + 2 * v165);\n      v167 = (unsigned __int16)qword_49FE50(v369, v402, (unsigned int)(v157 + 8), v374, v366);\n      v168 = v159 + 8;\n      DWORD2(v458) = v166\n                   - ((v167\n                     + (unsigned int)(unsigned __int16)qword_49FE48(v370, v387, (unsigned int)(v159 + 8), v374, v366)) >> 1);\n      v169 = v150 | 3;\n      v170 = *(unsigned __int16 *)(v154 + 2 * v169);\n      v171 = (unsigned __int16)qword_49FE50(v369, v402, (unsigned int)(v157 + 12), v374, v366);\n      v172 = v159 + 12;\n      HIDWORD(v458) = v170\n                    - ((v171\n                      + (unsigned int)(unsigned __int16)qword_49FE48(v370, v387, (unsigned int)(v159 + 12), v374, v366)) >> 1);\n      v173 = *(_QWORD *)(v444 + 8 * v475);\n      v174 = *(unsigned __int16 *)(v173 + 2LL * (signed __int16)v150);\n      v175 = (unsigned __int16)qword_49FE50(v369, v414, v157, v374, v366);\n      v459 = v174\n           - ((v175 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v442, (unsigned int)v159, v374, v366)) >> 2);\n      v176 = *(unsigned __int16 *)(v173 + 2 * v160);\n      v177 = (unsigned __int16)qword_49FE50(v369, v414, v162, v374, v366);\n      v460 = v176\n           - ((v177 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v442, (unsigned int)(v159 + 4), v374, v366)) >> 2);\n      v178 = *(unsigned __int16 *)(v173 + 2 * v165);\n      v179 = (unsigned __int16)qword_49FE50(v369, v414, (unsigned int)(v157 + 8), v374, v366);\n      v461 = v178\n           - ((v179 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v442, (unsigned int)(v159 + 8), v374, v366)) >> 2);\n      v180 = *(unsigned __int16 *)(v173 + 2 * v169);\n      LODWORD(v173) = (unsigned __int16)qword_49FE50(v369, v414, (unsigned int)(v157 + 12), v374, v366);\n      v462 = v180\n           - (((unsigned int)v173 + (unsigned __int16)qword_49FE48(v370, v442, (unsigned int)(v159 + 12), v374, v366)) >> 2);\n      v181 = *(_QWORD *)(v444 + 8 * v474);\n      v182 = *(unsigned __int16 *)(v181 + 2 * v383);\n      v183 = (unsigned __int16)qword_49FE50(v369, v372, v157, v374, v366);\n      v463 = v182 - ((v183 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v437, v159, v374, v366)) >> 1);\n      v184 = *(unsigned __int16 *)(v181 + 2 * v160);\n      v185 = (unsigned __int16)qword_49FE50(v369, v372, v162, v374, v366);\n      v464 = v184\n           - ((v185 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v437, (unsigned int)(v159 + 4), v374, v366)) >> 1);\n      v186 = *(unsigned __int16 *)(v181 + 2 * v165);\n      v187 = (unsigned __int16)qword_49FE50(v369, v372, (unsigned int)(v157 + 8), v374, v366);\n      v465 = v186\n           - ((v187 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v437, (unsigned int)(v159 + 8), v374, v366)) >> 1);\n      v188 = *(unsigned __int16 *)(v181 + 2 * v169);\n      v189 = (unsigned __int16)qword_49FE50(v369, v372, (unsigned int)(v157 + 12), v374, v366);\n      v466 = v188\n           - ((v189 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v437, (unsigned int)(v159 + 12), v374, v366)) >> 1);\n      v190 = *(_QWORD *)(v444 + 8 * v473);\n      v191 = *(unsigned __int16 *)(v190 + 2 * v383);\n      v192 = *(_QWORD *)(v444 + 8 * v473);\n      v193 = (unsigned __int16)qword_49FE50(v369, v410, v157, v374, v366);\n      v467 = v191 - ((v193 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v406, v159, v374, v366)) >> 1);\n      LODWORD(v190) = *(unsigned __int16 *)(v190 + 2 * v160);\n      LODWORD(v159) = (unsigned __int16)qword_49FE50(v369, v410, v162, v374, v366);\n      v468 = v190 - (((unsigned int)v159 + (unsigned __int16)qword_49FE48(v370, v406, v164, v374, v366)) >> 1);\n      LODWORD(v190) = *(unsigned __int16 *)(v192 + 2 * v165);\n      v194 = (unsigned __int16)qword_49FE50(v369, v410, (unsigned int)(v157 + 8), v374, v366);\n      v469 = v190 - ((v194 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v406, v168, v374, v366)) >> 1);\n      LODWORD(v190) = *(unsigned __int16 *)(v192 + 2 * v169);\n      v195 = (unsigned __int16)qword_49FE50(v369, v410, (unsigned int)(v157 + 12), v374, v366);\n      v470 = v190 - ((v195 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v406, v172, v374, v366)) >> 1);\n      v25 = (int *)dest;\n      if ( !*((_DWORD *)dest + 805) )\n        break;\n      *(_OWORD *)&v501[64 * (signed __int64)(signed __int16)(4 * v50) + 4 * v383] = v458;\n      *(_OWORD *)&v501[64 * v472 + 4 * v383] = *(_OWORD *)&v459;\n      *(_OWORD *)&v501[64 * v471 + 4 * v383] = *(_OWORD *)&v463;\n      v40 = *(double *)&v467;\n      *(_OWORD *)&v501[64 * v498 + 4 * v383] = *(_OWORD *)&v467;\n      v34 = v369;\n      v47 = v367;\n      v196 = v383;\nLABEL_97:\n      v150 = (signed __int16)(v196 + 4);\n      v151 = (unsigned int)(v477 + 16);\n      if ( v457 <= v150 )\n        goto LABEL_98;\n    }\n    v421 += sub_445CD0((signed int *)&v458, v483);\n    v34 = v369;\n    v47 = v367;\n    v196 = v383;\n    if ( v433 >= (signed __int16)v421 )\n      goto LABEL_97;\n    v48 = a11;\n    if ( v25[805] )\n    {\nLABEL_102:\n      v197 = v34;\n      LOWORD(v198) = sub_446870((__int64)v501, v483, v487, v40, a8, a9);\n      v34 = v197;\n      LOWORD(v198) = v198 + v421;\n      v199 = v492;\n      v200 = v486;\n      goto LABEL_105;\n    }\nLABEL_104:\n    v199 = v492;\n    v200 = v486;\n    LOWORD(v198) = v421;\nLABEL_105:\n    v198 = (signed __int16)v198;\n    v201 = v433;\n    v202 = v447;\n    if ( v433 > (signed __int16)v198 )\n      LOWORD(v202) = v199;\n    v447 = v202;\n    if ( v433 > (signed __int16)v198 )\n      v201 = v198;\n    v433 = v201;\n    v46 = v199 + 1;\n    if ( v200 > (signed __int16)v46 )\n    {\n      v37 = (unsigned __int16)*a12;\n      v36 = (unsigned __int16)*a13;\n      continue;\n    }\n    break;\n  }\n  if ( (_WORD)v202 )\n  {\n    *a12 += 2 * *((_WORD *)qword_4F9F60 + 2 * (signed __int16)v202);\n    *a13 += 2 * *((_WORD *)qword_4F9F68 + 2 * (signed __int16)v202);\n  }\n  v203 = v480;\n  v204 = v485;\n  v205 = v491;\nLABEL_114:\n  v206 = 0x7FFFFFFF;\n  if ( !v25[7] )\n    v206 = v433;\n  v434 = v206;\n  v207 = (unsigned int)(signed __int16)*a12;\n  v208 = v207 + v205;\n  if ( v208 < 2\n    || v208 >= (signed __int16)v481 - 1\n    || (v209 = (signed __int16)v479 + (signed __int16)*a13, v209 < 2)\n    || v209 >= (signed __int16)v478 - 1 )\n  {\n    v210 = sub_476120;\n  }\n  else\n  {\n    v210 = sub_4761C0;\n  }\n  qword_49FE48 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v210;\n  if ( (v203 == 0) >= a17 )\n    return (unsigned int)v434;\n  v211 = v203 == 0;\n  v493 = (signed __int16)a10;\n  v492 = v48;\n  v368 = v204;\n  v482 = (unsigned int)(4 * v482);\n  v448 = 0;\n  while ( 2 )\n  {\n    LODWORD(v494) = v211;\n    LOWORD(v207) = *((_WORD *)qword_4F9F60 + 2 * (signed __int16)v211) + v207;\n    v495 = (unsigned __int16)(*((_WORD *)qword_4F9F68 + 2 * (signed __int16)v211) + *a13);\n    v422 = (unsigned int)(v488\n                        * (*((_DWORD *)qword_4F9F18 + (signed __int16)v207 - v493)\n                         + *((_DWORD *)qword_4F9F18 + (signed __int16)v495 - v492))) >> 16;\n    if ( v456 <= 0 )\n      goto LABEL_195;\n    v212 = 0LL;\n    v213 = 0LL;\n    v484 = v207;\n    while ( 2 )\n    {\n      v214 = *a15 + 4 * (v213 + v497);\n      v452 = (signed __int16)(4 * v212);\n      v215 = v495 + 4 * (v213 + v497);\n      v498 = v212;\n      v496 = v213;\n      if ( !(_WORD)v490 )\n      {\n        if ( v450 > 0 )\n        {\n          v476 = (signed __int16)v213;\n          v432 = v214;\n          v400 = (signed __int16)v215;\n          v475 = (signed int)(v213 | 1);\n          v404 = (signed __int16)(v214 + 4);\n          v416 = (signed __int16)(v215 + 4);\n          v474 = (signed int)(v213 | 2);\n          v412 = (signed __int16)(v214 + 8);\n          v440 = (signed __int16)(v215 + 8);\n          v473 = (signed int)(v213 | 3);\n          v408 = (signed __int16)(v214 + 12);\n          v429 = (signed __int16)(v215 + 12);\n          v472 = v452 | 1;\n          v471 = v452 | 2;\n          v483 = v452 | 3;\n          v313 = 0;\n          v314 = (unsigned int)v482;\n          while ( 1 )\n          {\n            v315 = v313;\n            v385 = (signed __int16)v313;\n            v316 = v314 + *a14;\n            v477 = v314;\n            v317 = v314 + v207;\n            v318 = *(_QWORD *)(v444 + 8 * v476);\n            v319 = *(unsigned __int16 *)(v318 + 2LL * (signed __int16)v313);\n            v320 = *(_QWORD *)(v444 + 8 * v476);\n            v321 = v316;\n            v322 = (unsigned int)v316;\n            v323 = (unsigned __int16)qword_49FE50(v34, v432, v322, v374, v366);\n            v324 = (unsigned int)v317;\n            LODWORD(v458) = v319\n                          - ((v323 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v400, v324, v374, v366)) >> 1);\n            v325 = v315 | 1;\n            v326 = *(unsigned __int16 *)(v318 + 2 * v325);\n            v327 = v321 + 4;\n            v328 = (unsigned __int16)qword_49FE50(v369, v432, (unsigned int)(v321 + 4), v374, v366);\n            v329 = v317 + 4;\n            DWORD1(v458) = v326\n                         - ((v328 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v400, v329, v374, v366)) >> 1);\n            v330 = v315 | 2;\n            v331 = *(unsigned __int16 *)(v320 + 2 * v330);\n            v332 = v322 + 8;\n            v333 = (unsigned __int16)qword_49FE50(v369, v432, (unsigned int)(v322 + 8), v374, v366);\n            DWORD2(v458) = v331\n                         - ((v333\n                           + (unsigned int)(unsigned __int16)qword_49FE48(\n                                                               v370,\n                                                               v400,\n                                                               (unsigned int)(v324 + 8),\n                                                               v374,\n                                                               v366)) >> 1);\n            v334 = v315 | 3;\n            v335 = *(unsigned __int16 *)(v320 + 2 * v334);\n            LODWORD(v320) = v322 + 12;\n            v336 = (unsigned __int16)qword_49FE50(v369, v432, (unsigned int)(v322 + 12), v374, v366);\n            HIDWORD(v458) = v335\n                          - ((v336\n                            + (unsigned int)(unsigned __int16)qword_49FE48(\n                                                                v370,\n                                                                v400,\n                                                                (unsigned int)(v324 + 12),\n                                                                v374,\n                                                                v366)) >> 1);\n            v337 = *(_QWORD *)(v444 + 8 * v475);\n            v338 = *(unsigned __int16 *)(v337 + 2 * v385);\n            LODWORD(v318) = (unsigned __int16)qword_49FE50(v369, v404, v322, v374, v366);\n            v459 = v338\n                 - (((unsigned int)v318 + (unsigned __int16)qword_49FE48(v370, v416, (unsigned int)v324, v374, v366)) >> 1);\n            v339 = *(unsigned __int16 *)(v337 + 2 * v325);\n            v340 = (unsigned __int16)qword_49FE50(v369, v404, v327, v374, v366);\n            v460 = v339 - ((v340 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v416, v329, v374, v366)) >> 1);\n            v341 = *(unsigned __int16 *)(v337 + 2 * v330);\n            v342 = (unsigned __int16)qword_49FE50(v369, v404, (unsigned int)(v322 + 8), v374, v366);\n            v461 = v341\n                 - ((v342\n                   + (unsigned int)(unsigned __int16)qword_49FE48(v370, v416, (unsigned int)(v324 + 8), v374, v366)) >> 1);\n            v343 = *(unsigned __int16 *)(v337 + 2 * v334);\n            v344 = (unsigned __int16)qword_49FE50(v369, v404, (unsigned int)(v322 + 12), v374, v366);\n            v462 = v343\n                 - ((v344\n                   + (unsigned int)(unsigned __int16)qword_49FE48(v370, v416, (unsigned int)(v324 + 12), v374, v366)) >> 1);\n            v345 = *(_QWORD *)(v444 + 8 * v474);\n            v346 = *(unsigned __int16 *)(v345 + 2 * v385);\n            v347 = (unsigned __int16)qword_49FE50(v369, v412, v322, v374, v366);\n            v463 = v346 - ((v347 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v440, v324, v374, v366)) >> 1);\n            v348 = *(unsigned __int16 *)(v345 + 2 * v325);\n            v349 = (unsigned __int16)qword_49FE50(v369, v412, v327, v374, v366);\n            v464 = v348 - ((v349 + (unsigned int)(unsigned __int16)qword_49FE48(v370, v440, v329, v374, v366)) >> 1);\n            v350 = *(unsigned __int16 *)(v345 + 2 * v330);\n            v351 = (unsigned __int16)qword_49FE50(v369, v412, (unsigned int)(v322 + 8), v374, v366);\n            v465 = v350\n                 - ((v351\n                   + (unsigned int)(unsigned __int16)qword_49FE48(v370, v440, (unsigned int)(v324 + 8), v374, v366)) >> 1);\n            v352 = *(unsigned __int16 *)(v345 + 2 * v334);\n            v353 = (unsigned __int16)qword_49FE50(v369, v412, (unsigned int)(v322 + 12), v374, v366);\n            v466 = v352\n                 - ((v353\n                   + (unsigned int)(unsigned __int16)qword_49FE48(v370, v440, (unsigned int)(v324 + 12), v374, v366)) >> 1);\n            v354 = *(_QWORD *)(v444 + 8 * v473);\n            v355 = *(unsigned __int16 *)(v354 + 2 * v385);\n            v356 = *(_QWORD *)(v444 + 8 * v473);\n            LODWORD(v318) = (unsigned __int16)qword_49FE50(v369, v408, v322, v374, v366);\n            v467 = v355 - (((unsigned int)v318 + (unsigned __int16)qword_49FE48(v370, v429, v324, v374, v366)) >> 1);\n            LODWORD(v354) = *(unsigned __int16 *)(v354 + 2 * v325);\n            LODWORD(v322) = (unsigned __int16)qword_49FE50(v369, v408, v327, v374, v366);\n            v468 = v354 - (((unsigned int)v322 + (unsigned __int16)qword_49FE48(v370, v429, v329, v374, v366)) >> 1);\n            LODWORD(v354) = *(unsigned __int16 *)(v356 + 2 * v330);\n            LODWORD(v322) = (unsigned __int16)qword_49FE50(v369, v408, v332, v374, v366);\n            v469 = v354\n                 - (((unsigned int)v322\n                   + (unsigned __int16)qword_49FE48(v370, v429, (unsigned int)(v324 + 8), v374, v366)) >> 1);\n            LODWORD(v354) = *(unsigned __int16 *)(v356 + 2 * v334);\n            v357 = (unsigned __int16)qword_49FE50(v369, v408, (unsigned int)v320, v374, v366);\n            v470 = v354\n                 - ((v357\n                   + (unsigned int)(unsigned __int16)qword_49FE48(v370, v429, (unsigned int)(v324 + 12), v374, v366)) >> 1);\n            v311 = (int *)dest;\n            if ( *((_DWORD *)dest + 805) )\n            {\n              *(_OWORD *)&v501[64 * (signed __int64)(signed __int16)(4 * v212) + 4 * v385] = v458;\n              *(_OWORD *)&v501[64 * v472 + 4 * v385] = *(_OWORD *)&v459;\n              *(_OWORD *)&v501[64 * v471 + 4 * v385] = *(_OWORD *)&v463;\n              v40 = *(double *)&v467;\n              *(_OWORD *)&v501[64 * v483 + 4 * v385] = *(_OWORD *)&v467;\n              v34 = v369;\n              v358 = v385;\n            }\n            else\n            {\n              v422 += sub_445CD0((signed int *)&v458, *((_DWORD *)dest + 6));\n              v34 = v369;\n              v358 = v385;\n              if ( v434 < (signed __int16)v422 )\n              {\nLABEL_194:\n                v25 = v311;\n                goto LABEL_195;\n              }\n            }\n            v313 = (signed __int16)(v358 + 4);\n            v314 = (unsigned int)(v477 + 16);\n            LOWORD(v207) = v484;\n            if ( v457 <= v313 )\n              goto LABEL_192;\n          }\n        }\n        goto LABEL_191;\n      }\n      if ( v450 <= 0 )\n      {\nLABEL_191:\n        v311 = v25;\n        goto LABEL_192;\n      }\n      v477 = (signed __int16)v213;\n      v216 = v214;\n      v376 = (signed __int16)v215;\n      v476 = (signed int)(v213 | 1);\n      v394 = (signed __int16)(v214 + 4);\n      v384 = (signed __int16)(v215 + 4);\n      v475 = (signed int)(v213 | 2);\n      v388 = (signed __int16)(v214 + 8);\n      v373 = (signed __int16)(v215 + 8);\n      v474 = (signed int)(v213 | 3);\n      v392 = (signed __int16)(v214 + 12);\n      v390 = (signed __int16)(v215 + 12);\n      v473 = v452 | 1;\n      v472 = v452 | 2;\n      v471 = v452 | 3;\n      v217 = 0;\n      v218 = v482;\n      v418 = v214;\n      do\n      {\n        v438 = v217;\n        v420 = (signed __int16)v217;\n        v446 = v218;\n        v219 = v218 + v207;\n        v378 = *(_QWORD *)(v444 + 8 * v477);\n        v220 = (unsigned int)(signed __int16)(v218 + *a14);\n        v221 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v34, v216, v220, v374, v366);\n        v222 = v220;\n        v60 = v368\n            + ((v221\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, (unsigned int)v219, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v223 = 0;\n        if ( !v60 )\n        {\n          v224 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v216, (unsigned int)v220, v374, v366);\n          v225 = v368\n               + ((v224\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, (unsigned int)v219, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v223 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v225 <= v223 )\n          {\n            v226 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v216, (unsigned int)v220, v374, v366);\n            v223 = v368\n                 + ((v226\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, (unsigned int)v219, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        LODWORD(v458) = *(unsigned __int16 *)(v378 + 2 * v420) - v223;\n        v424 = v220;\n        v227 = v220 + 4;\n        v228 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v216, (unsigned int)(v220 + 4), v374, v366);\n        v426 = v219;\n        v229 = v219 + 4;\n        v60 = v368\n            + ((v228\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v229, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v230 = 0;\n        if ( !v60 )\n        {\n          v231 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v227, v374, v366);\n          v232 = v368\n               + ((v231\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v229, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v230 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v232 <= v230 )\n          {\n            v233 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v227, v374, v366);\n            v230 = v368\n                 + ((v233\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v229, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v403 = v222 + 4;\n        v431 = v219 + 4;\n        v428 = v438 | 1;\n        DWORD1(v458) = *(unsigned __int16 *)(v378 + 2 * v428) - v230;\n        v234 = v222 + 8;\n        v235 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, (unsigned int)(v222 + 8), v374, v366);\n        v236 = v426 + 8;\n        v237 = qword_49FE48(v370, v376, v426 + 8, v374, v366);\n        v238 = 0;\n        if ( v368 + ((v235 + (signed __int16)v453 * v237 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v239 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v234, v374, v366);\n          v240 = qword_49FE48(v370, v376, v236, v374, v366);\n          v238 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v239 + (signed __int16)v453 * v240 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v238 )\n          {\n            v241 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v234, v374, v366);\n            v238 = v368\n                 + ((v241\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v236, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v411 = v426 + 8;\n        v415 = v222 + 8;\n        v242 = v438 | 2;\n        v443 = v242;\n        DWORD2(v458) = *(unsigned __int16 *)(v378 + 2 * v242) - v238;\n        v243 = v222 + 12;\n        v244 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, (unsigned int)(v222 + 12), v374, v366);\n        v245 = v426 + 12;\n        v246 = 0;\n        v60 = v368\n            + ((v244\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v426 + 12, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v247 = 0;\n        if ( !v60 )\n        {\n          v248 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v243, v374, v366);\n          v249 = v368\n               + ((v248\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v245, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v247 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v249 <= v247 )\n          {\n            v250 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v418, v243, v374, v366);\n            v247 = v368\n                 + ((v250\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v376, v245, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v399 = v426 + 12;\n        v407 = v424 + 12;\n        v439 = v438 | 3;\n        HIDWORD(v458) = *(unsigned __int16 *)(v378 + 2 * v439) - v247;\n        v379 = *(_QWORD *)(v444 + 8 * v476);\n        v251 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v424, v374, v366);\n        if ( v368\n           + ((v251\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v426, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v252 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v424, v374, v366);\n          v253 = qword_49FE48(v370, v384, v426, v374, v366);\n          v246 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v252 + (signed __int16)v453 * v253 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v246 )\n          {\n            v254 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v424, v374, v366);\n            v246 = v368\n                 + ((v254\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v426, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v459 = *(unsigned __int16 *)(v379 + 2 * v420) - v246;\n        v255 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v403, v374, v366);\n        v256 = 0;\n        v60 = v368\n            + ((v255\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v431, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v257 = 0;\n        if ( !v60 )\n        {\n          v258 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v403, v374, v366);\n          v259 = v368\n               + ((v258\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v431, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v257 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v259 <= v257 )\n          {\n            v260 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v403, v374, v366);\n            v257 = v368\n                 + ((v260\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v431, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v460 = *(unsigned __int16 *)(v379 + 2 * v428) - v257;\n        v261 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v415, v374, v366);\n        if ( v368\n           + ((v261\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v411, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v262 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v415, v374, v366);\n          v263 = qword_49FE48(v370, v384, v411, v374, v366);\n          v256 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v262 + (signed __int16)v453 * v263 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v256 )\n          {\n            v264 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v415, v374, v366);\n            v256 = v368\n                 + ((v264\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v411, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v461 = *(unsigned __int16 *)(v379 + 2 * v443) - v256;\n        v265 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v243, v374, v366);\n        v266 = 0;\n        v60 = v368\n            + ((v265\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v399, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v267 = 0;\n        if ( !v60 )\n        {\n          v268 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v243, v374, v366);\n          v269 = v368\n               + ((v268\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v399, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v267 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v269 <= v267 )\n          {\n            v270 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v394, v243, v374, v366);\n            v267 = v368\n                 + ((v270\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v384, v399, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v462 = *(unsigned __int16 *)(v379 + 2 * v439) - v267;\n        v380 = *(_QWORD *)(v444 + 8 * v475);\n        v271 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v424, v374, v366);\n        if ( v368\n           + ((v271\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v426, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v272 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v424, v374, v366);\n          v273 = qword_49FE48(v370, v373, v426, v374, v366);\n          v266 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v272 + (signed __int16)v453 * v273 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v266 )\n          {\n            v274 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v424, v374, v366);\n            v266 = v368\n                 + ((v274\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v426, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v463 = *(unsigned __int16 *)(v380 + 2 * v420) - v266;\n        v275 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v403, v374, v366);\n        v276 = 0;\n        v60 = v368\n            + ((v275\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v431, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v277 = 0;\n        if ( !v60 )\n        {\n          v278 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v403, v374, v366);\n          v279 = v368\n               + ((v278\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v431, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v277 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v279 <= v277 )\n          {\n            v280 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v403, v374, v366);\n            v277 = v368\n                 + ((v280\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v431, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v464 = *(unsigned __int16 *)(v380 + 2 * v428) - v277;\n        v281 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v415, v374, v366);\n        if ( v368\n           + ((v281\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v411, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v282 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v415, v374, v366);\n          v283 = qword_49FE48(v370, v373, v411, v374, v366);\n          v276 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v282 + (signed __int16)v453 * v283 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v276 )\n          {\n            v284 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v415, v374, v366);\n            v276 = v368\n                 + ((v284\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v411, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v465 = *(unsigned __int16 *)(v380 + 2 * v443) - v276;\n        v285 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v407, v374, v366);\n        v286 = 0;\n        v60 = v368\n            + ((v285\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v399, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v287 = 0;\n        if ( !v60 )\n        {\n          v288 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v407, v374, v366);\n          v289 = v368\n               + ((v288\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v399, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v287 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v289 <= v287 )\n          {\n            v290 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v388, v407, v374, v366);\n            v287 = v368\n                 + ((v290\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v373, v399, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v466 = *(unsigned __int16 *)(v380 + 2 * v439) - v287;\n        v381 = *(_QWORD *)(v444 + 8 * v474);\n        v291 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v424, v374, v366);\n        if ( v368\n           + ((v291\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v426, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v292 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v424, v374, v366);\n          v293 = qword_49FE48(v370, v390, v426, v374, v366);\n          v286 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v292 + (signed __int16)v453 * v293 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v286 )\n          {\n            v294 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v424, v374, v366);\n            v286 = v368\n                 + ((v294\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v426, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v467 = *(unsigned __int16 *)(v381 + 2 * v420) - v286;\n        v295 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v403, v374, v366);\n        v296 = 0;\n        v60 = v368\n            + ((v295\n              + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v431, v374, v366)\n              + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0;\n        v297 = 0;\n        if ( !v60 )\n        {\n          v298 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v403, v374, v366);\n          v299 = v368\n               + ((v298\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v431, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v297 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v299 <= v297 )\n          {\n            v300 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v403, v374, v366);\n            v297 = v368\n                 + ((v300\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v431, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v468 = *(unsigned __int16 *)(v381 + 2 * v428) - v297;\n        v301 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v415, v374, v366);\n        v302 = v369;\n        if ( v368\n           + ((v301\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v411, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) >= 0 )\n        {\n          v303 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v415, v374, v366);\n          v304 = qword_49FE48(v370, v390, v411, v374, v366);\n          v302 = v369;\n          v296 = *((_DWORD *)off_49F6D0 + 18171);\n          if ( v368 + ((v303 + (signed __int16)v453 * v304 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) <= v296 )\n          {\n            v305 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v415, v374, v366);\n            v302 = v369;\n            v296 = v368\n                 + ((v305\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v411, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v469 = *(unsigned __int16 *)(v381 + 2 * v443) - v296;\n        v306 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v302, v392, v407, v374, v366);\n        if ( v368\n           + ((v306\n             + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v399, v374, v366)\n             + 2 * dword_4FA15C) >> (dword_4FA0EC + 1)) < 0 )\n        {\n          v309 = 0;\n          v216 = v418;\n        }\n        else\n        {\n          v307 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v302, v392, v407, v374, v366);\n          v308 = v368\n               + ((v307\n                 + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v399, v374, v366)\n                 + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          v309 = *((_DWORD *)off_49F6D0 + 18171);\n          v216 = v418;\n          if ( v308 <= v309 )\n          {\n            v310 = (signed __int16)v454 * (unsigned __int16)qword_49FE50(v369, v392, v407, v374, v366);\n            v309 = v368\n                 + ((v310\n                   + (signed __int16)v453 * (unsigned __int16)qword_49FE48(v370, v390, v399, v374, v366)\n                   + 2 * dword_4FA15C) >> (dword_4FA0EC + 1));\n          }\n        }\n        v470 = *(unsigned __int16 *)(v381 + 2 * v439) - v309;\n        v311 = (int *)dest;\n        if ( *((_DWORD *)dest + 805) )\n        {\n          v312 = v420;\n          *(_OWORD *)&v501[64 * v452 + 4 * v420] = v458;\n          *(_OWORD *)&v501[64 * v473 + 4 * v420] = *(_OWORD *)&v459;\n          *(_OWORD *)&v501[64 * v472 + 4 * v420] = *(_OWORD *)&v463;\n          v40 = *(double *)&v467;\n          *(_OWORD *)&v501[64 * v471 + 4 * v420] = *(_OWORD *)&v467;\n          v34 = v369;\n        }\n        else\n        {\n          v422 += sub_445CD0((signed int *)&v458, *((_DWORD *)dest + 6));\n          v312 = v420;\n          v34 = v369;\n          if ( v434 < (signed __int16)v422 )\n            goto LABEL_194;\n        }\n        v217 = (signed __int16)(v312 + 4);\n        v218 = v446 + 16;\n        LOWORD(v207) = v484;\n      }\n      while ( v457 > v217 );\nLABEL_192:\n      v25 = v311;\n      v213 = (unsigned int)(signed __int16)(v496 + 4);\n      v212 = (unsigned int)(v498 + 1);\n      if ( v489 > (signed int)v213 )\n        continue;\n      break;\n    }\nLABEL_195:\n    if ( v25[805] )\n    {\n      v359 = v34;\n      v360 = (unsigned __int64)sub_446870((__int64)v501, v25[6], v487, v40, a8, a9) + v422;\n      v361 = v494;\n      v362 = v448;\n    }\n    else\n    {\n      v359 = v34;\n      v361 = v494;\n      v362 = v448;\n      LOWORD(v360) = v422;\n    }\n    v363 = (signed __int16)v360;\n    v364 = v434;\n    if ( v434 > v363 )\n      LOWORD(v362) = v361;\n    if ( v434 > v363 )\n      v364 = v363;\n    v434 = v364;\n    v211 = v361 + 1;\n    if ( (signed __int16)v211 < a17 )\n    {\n      v448 = v362;\n      v207 = (unsigned __int16)*a12;\n      v34 = v359;\n      continue;\n    }\n    break;\n  }\n  if ( (_WORD)v362 )\n  {\n    *a12 += *((_WORD *)qword_4F9F60 + 2 * (signed __int16)v362);\n    *a13 += *((_WORD *)qword_4F9F68 + 2 * (signed __int16)v362);\n  }\n  return (unsigned int)v434;\n}\n", 
            "funcStartAddr": "0x448610L", 
            "funcEndAddr": "0x44d413L", 
            "funcName": "sub_448610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44D420(signed int a1, int a2, __int16 a3, __int16 a4, int a5, int a6)\n{\n  _DWORD *v6; // r14\n  __int64 v7; // r13\n  signed int v8; // eax\n  signed int v9; // ebx\n  __int64 v10; // rax\n  __int64 v11; // rbp\n  char *v12; // rdi\n  __int64 v13; // r12\n  __int64 v14; // rdi\n  __int64 v15; // r10\n  int v16; // ebx\n  __int64 v17; // rsi\n  __int64 v18; // rbp\n  __int64 v19; // r14\n  __int64 v20; // r8\n  _QWORD *v21; // rdi\n  signed __int16 *v22; // rcx\n  __int64 v23; // r11\n  _QWORD *v24; // rbp\n  signed __int16 *v25; // rax\n  __int64 v26; // r13\n  __int64 v27; // rdx\n  __int64 v28; // rsi\n  int v29; // ebx\n  signed __int16 *v30; // rax\n  signed __int16 *v31; // rdx\n  int v32; // ecx\n  char *v33; // rbp\n  signed __int64 v34; // rax\n  _DWORD *v35; // r13\n  int v36; // ecx\n  __int64 v37; // rsi\n  int v38; // ebx\n  signed __int64 v39; // rax\n  int v40; // er15\n  char *v41; // r8\n  __int64 v42; // rdx\n  __int64 v43; // ST18_8\n  signed __int64 v44; // rax\n  __int64 v45; // r10\n  signed __int64 v46; // rcx\n  __int64 v47; // r11\n  __int64 v48; // r13\n  __int64 v49; // rbx\n  char *v50; // r9\n  int v51; // er12\n  signed __int64 v52; // rsi\n  signed __int64 v53; // r12\n  int v54; // edi\n  signed __int64 v55; // r15\n  __int64 v56; // rdx\n  signed __int64 v57; // r8\n  __int64 v58; // rax\n  int v59; // edi\n  __int64 v60; // rax\n  __int64 v61; // rax\n  unsigned int v62; // ebp\n  int v63; // er8\n  int v64; // ebx\n  __int128 *v65; // r15\n  signed __int64 v66; // rax\n  int v67; // er14\n  __int128 v68; // xmm0\n  __int128 v69; // xmm0\n  __int128 v70; // xmm0\n  __int128 v71; // xmm0\n  __int128 v72; // xmm0\n  __int128 v73; // xmm0\n  __int128 v74; // xmm0\n  unsigned int v76; // [rsp+4h] [rbp-5F4h]\n  _DWORD *v77; // [rsp+8h] [rbp-5F0h]\n  __int64 v78; // [rsp+10h] [rbp-5E8h]\n  __int64 v79; // [rsp+10h] [rbp-5E8h]\n  __int64 v80; // [rsp+18h] [rbp-5E0h]\n  signed __int64 v81; // [rsp+18h] [rbp-5E0h]\n  int v82; // [rsp+20h] [rbp-5D8h]\n  signed __int64 v83; // [rsp+20h] [rbp-5D8h]\n  int v84; // [rsp+28h] [rbp-5D0h]\n  __int128 *v85; // [rsp+28h] [rbp-5D0h]\n  signed __int64 v86; // [rsp+30h] [rbp-5C8h]\n  signed __int64 v87; // [rsp+30h] [rbp-5C8h]\n  __int64 v88; // [rsp+38h] [rbp-5C0h]\n  signed __int64 v89; // [rsp+40h] [rbp-5B8h]\n  __int64 v90; // [rsp+40h] [rbp-5B8h]\n  __int64 v91; // [rsp+48h] [rbp-5B0h]\n  signed __int64 v92; // [rsp+48h] [rbp-5B0h]\n  __int64 v93; // [rsp+50h] [rbp-5A8h]\n  int v94; // [rsp+58h] [rbp-5A0h]\n  signed __int64 v95; // [rsp+58h] [rbp-5A0h]\n  int v96; // [rsp+60h] [rbp-598h]\n  __int64 v97; // [rsp+60h] [rbp-598h]\n  __int64 v98; // [rsp+68h] [rbp-590h]\n  signed __int64 v99; // [rsp+68h] [rbp-590h]\n  __int64 v100; // [rsp+70h] [rbp-588h]\n  __int64 v101; // [rsp+70h] [rbp-588h]\n  signed int v102; // [rsp+78h] [rbp-580h]\n  int v103; // [rsp+7Ch] [rbp-57Ch]\n  __int16 v104; // [rsp+80h] [rbp-578h]\n  __int16 v105; // [rsp+84h] [rbp-574h]\n  signed int v106; // [rsp+88h] [rbp-570h]\n  __int64 v107; // [rsp+90h] [rbp-568h]\n  signed __int64 v108; // [rsp+98h] [rbp-560h]\n  signed __int64 v109; // [rsp+A0h] [rbp-558h]\n  char *v110; // [rsp+A8h] [rbp-550h]\n  signed __int64 v111; // [rsp+B0h] [rbp-548h]\n  int v112; // [rsp+B8h] [rbp-540h]\n  __int128 v113; // [rsp+C0h] [rbp-538h]\n  __int128 v114; // [rsp+D0h] [rbp-528h]\n  int v115; // [rsp+E0h] [rbp-518h]\n  int v116; // [rsp+E4h] [rbp-514h]\n  int v117; // [rsp+E8h] [rbp-510h]\n  int v118; // [rsp+ECh] [rbp-50Ch]\n  int v119; // [rsp+F0h] [rbp-508h]\n  int v120; // [rsp+F4h] [rbp-504h]\n  int v121; // [rsp+F8h] [rbp-500h]\n  int v122; // [rsp+FCh] [rbp-4FCh]\n  __int128 v123; // [rsp+100h] [rbp-4F8h]\n  __int128 v124; // [rsp+110h] [rbp-4E8h]\n  __int128 v125; // [rsp+120h] [rbp-4D8h]\n  __int128 v126; // [rsp+130h] [rbp-4C8h]\n  __int128 v127; // [rsp+140h] [rbp-4B8h]\n  __int128 v128; // [rsp+150h] [rbp-4A8h]\n  __int128 v129; // [rsp+160h] [rbp-498h]\n  __int128 v130; // [rsp+170h] [rbp-488h]\n  __int128 v131; // [rsp+180h] [rbp-478h]\n  __int128 v132; // [rsp+190h] [rbp-468h]\n  __int128 v133; // [rsp+1A0h] [rbp-458h]\n  __int128 v134; // [rsp+1B0h] [rbp-448h]\n  char v135; // [rsp+28Ch] [rbp-36Ch]\n  char v136; // [rsp+380h] [rbp-278h]\n\n  v6 = dest;\n  v7 = a1;\n  v8 = *((_DWORD *)dest + 2 * a1 + 20);\n  v9 = 8;\n  if ( v8 >= 9 )\n    v8 = 8;\n  v106 = v8;\n  if ( *((_DWORD *)dest + 2 * a1 + 21) < 9 )\n    v9 = *((_DWORD *)dest + 2 * a1 + 21);\n  v102 = v9;\n  LODWORD(v10) = 4;\n  v84 = a1;\n  if ( a1 < 5 )\n    LODWORD(v10) = a1;\n  v10 = (signed int)v10;\n  v11 = *((signed int *)dest + 2 * (signed int)v10 + 37);\n  v12 = (char *)off_49F6D0 + 71936;\n  v112 = a6;\n  if ( !a6 )\n    v12 = (char *)off_49F6D0 + 71944;\n  v107 = v10;\n  if ( v11 <= 0 )\n  {\n    v76 = 0;\n    if ( v84 > 4 )\n      return v76;\n  }\n  else\n  {\n    v96 = a5;\n    v80 = *(_QWORD *)v12;\n    v94 = *((_DWORD *)dest + 2 * (signed int)v10 + 37);\n    v78 = dword_491250[4 * v10 + a2] + v11;\n    v91 = a2;\n    v89 = 4 * v10;\n    v88 = *((signed int *)dest + 2 * v10 + 36);\n    v98 = dword_491200[4 * v10 + a2];\n    v104 = a3;\n    v13 = a3;\n    v105 = a4;\n    v14 = a4;\n    v15 = *((signed int *)dest + 2 * v7 + 36);\n    v100 = *((signed int *)dest + 2 * v7 + 37);\n    v16 = 0;\n    v86 = dword_491250[4 * v10 + a2];\n    v17 = dword_491250[4 * v10 + a2];\n    v18 = v7;\n    do\n    {\n      if ( (signed int)v88 > 0 )\n      {\n        v19 = v98;\n        do\n        {\n          v20 = v14;\n          v21 = *(_QWORD **)(*(_QWORD *)(v80 + 8 * v19) + 8 * v17);\n          v22 = *(signed __int16 **)(*(_QWORD *)(*v21 + 8 * v13) + 8 * v18);\n          v23 = v18;\n          v24 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 8990) + 8 * v19) + 8 * v17);\n          v25 = *(signed __int16 **)(*(_QWORD *)(*v24 + 8 * v13) + 8 * v23);\n          v26 = v17;\n          v27 = v21[1];\n          v14 = v20;\n          v28 = v24[1];\n          v18 = v23;\n          v29 = *((_DWORD *)qword_4F9F18 + v22[1] - (signed __int64)v25[1])\n              + *((_DWORD *)qword_4F9F18 + *v22 - (signed __int64)*v25)\n              + v16;\n          v30 = *(signed __int16 **)(*(_QWORD *)(v27 + 8 * v20) + 8 * v23);\n          v31 = *(signed __int16 **)(*(_QWORD *)(v28 + 8 * v20) + 8 * v23);\n          v17 = v26;\n          v16 = *((_DWORD *)qword_4F9F18 + v30[1] - (signed __int64)v31[1])\n              + *((_DWORD *)qword_4F9F18 + *v30 - (signed __int64)*v31)\n              + v29;\n          v19 += v15;\n        }\n        while ( v19 < v98 + v88 );\n      }\n      v17 += v100;\n    }\n    while ( v17 < v78 );\n    v76 = v96 * v16 >> 16;\n    if ( v94 > 0 )\n    {\n      v32 = dword_491200[v91 + v89];\n      v111 = v32 + (signed int)v88;\n      v109 = (signed int)v78;\n      v33 = &v135;\n      v108 = dword_491200[v91 + v89];\n      v103 = 4 * v32;\n      v34 = v86;\n      v35 = off_49F6D0;\n      v6 = dest;\n      do\n      {\n        v87 = v34;\n        v110 = v33;\n        if ( (signed int)v88 > 0 )\n        {\n          v36 = v35[43];\n          v37 = 4 * (signed int)v34;\n          v101 = (signed int)v37 + v36;\n          v99 = v37 | 1;\n          v97 = (signed int)((v37 | 1) + v36);\n          v95 = v37 | 2;\n          v93 = (signed int)((v37 | 2) + v36);\n          v79 = v37;\n          v92 = v37 | 3;\n          v90 = (signed int)((v37 | 3) + v36);\n          v38 = v103;\n          v39 = v108;\n          do\n          {\n            v81 = v39;\n            v40 = v35[42];\n            sub_42C660(v38, v79, 2, v84, v84, v104, v105, v112);\n            v41 = (char *)off_49F6D0;\n            v42 = v38;\n            v82 = v38;\n            v43 = v38 + v40;\n            v44 = v38 | 1LL;\n            v45 = (signed int)v44 + v40;\n            v46 = v38 | 2LL;\n            v47 = (signed int)v46 + v40;\n            v48 = *(_QWORD *)(qword_4F9EB0 + 8 * v101);\n            v49 = qword_4F9EB0;\n            v50 = (char *)off_49F6D0 + 32 * v42 + 12600;\n            v51 = *(unsigned __int16 *)(v48 + 2 * v43) - *(unsigned __int16 *)&v50[2 * v79];\n            *((_DWORD *)v33 - 51) = v51;\n            LODWORD(v113) = v51;\n            v52 = v42 | 3;\n            v53 = (signed __int64)&v41[32 * v44 + 12600];\n            LODWORD(v42) = *(unsigned __int16 *)(v48 + 2 * v45) - *(unsigned __int16 *)(v53 + 2 * v79);\n            *((_DWORD *)v33 - 50) = v42;\n            v54 = v52 + v40;\n            DWORD1(v113) = v42;\n            v55 = (signed __int64)&v41[32 * v46 + 12600];\n            LODWORD(v42) = *(unsigned __int16 *)(v48 + 2 * v47) - *(unsigned __int16 *)(v55 + 2 * v79);\n            *((_DWORD *)v33 - 49) = v42;\n            DWORD2(v113) = v42;\n            v56 = v54;\n            LODWORD(v44) = *(unsigned __int16 *)(v48 + 2LL * v54);\n            v35 = v41;\n            v57 = (signed __int64)&v41[32 * v52 + 12600];\n            LODWORD(v44) = v44 - *(unsigned __int16 *)(v57 + 2 * v79);\n            *((_DWORD *)v33 - 48) = v44;\n            HIDWORD(v113) = v44;\n            v58 = *(_QWORD *)(v49 + 8 * v97);\n            v59 = *(unsigned __int16 *)(v58 + 2 * v43) - *(unsigned __int16 *)&v50[2 * v99];\n            *((_DWORD *)v33 - 35) = v59;\n            LODWORD(v114) = v59;\n            LODWORD(v46) = *(unsigned __int16 *)(v58 + 2 * v45) - *(unsigned __int16 *)(v53 + 2 * v99);\n            *((_DWORD *)v33 - 34) = v46;\n            DWORD1(v114) = v46;\n            LODWORD(v46) = *(unsigned __int16 *)(v58 + 2 * v47) - *(unsigned __int16 *)(v55 + 2 * v99);\n            *((_DWORD *)v33 - 33) = v46;\n            DWORD2(v114) = v46;\n            LODWORD(v58) = *(unsigned __int16 *)(v58 + 2 * v56) - *(unsigned __int16 *)(v57 + 2 * v99);\n            *((_DWORD *)v33 - 32) = v58;\n            HIDWORD(v114) = v58;\n            v60 = *(_QWORD *)(v49 + 8 * v93);\n            LODWORD(v46) = *(unsigned __int16 *)(v60 + 2 * v43) - *(unsigned __int16 *)&v50[2 * v95];\n            *((_DWORD *)v33 - 19) = v46;\n            v115 = v46;\n            LODWORD(v46) = *(unsigned __int16 *)(v60 + 2 * v45) - *(unsigned __int16 *)(v53 + 2 * v95);\n            *((_DWORD *)v33 - 18) = v46;\n            v116 = v46;\n            LODWORD(v46) = *(unsigned __int16 *)(v60 + 2 * v47) - *(unsigned __int16 *)(v55 + 2 * v95);\n            *((_DWORD *)v33 - 17) = v46;\n            v117 = v46;\n            LODWORD(v60) = *(unsigned __int16 *)(v60 + 2 * v56) - *(unsigned __int16 *)(v57 + 2 * v95);\n            *((_DWORD *)v33 - 16) = v60;\n            v118 = v60;\n            v61 = *(_QWORD *)(v49 + 8 * v90);\n            LODWORD(v46) = *(unsigned __int16 *)(v61 + 2 * v43) - *(unsigned __int16 *)&v50[2 * v92];\n            *((_DWORD *)v33 - 3) = v46;\n            v119 = v46;\n            LODWORD(v46) = *(unsigned __int16 *)(v61 + 2 * v45) - *(unsigned __int16 *)(v53 + 2 * v92);\n            *((_DWORD *)v33 - 2) = v46;\n            v120 = v46;\n            LODWORD(v46) = *(unsigned __int16 *)(v61 + 2 * v47) - *(unsigned __int16 *)(v55 + 2 * v92);\n            *((_DWORD *)v33 - 1) = v46;\n            v121 = v46;\n            LODWORD(v61) = *(unsigned __int16 *)(v61 + 2 * v56) - *(unsigned __int16 *)(v57 + 2 * v92);\n            *(_DWORD *)v33 = v61;\n            v122 = v61;\n            v6 = dest;\n            if ( v84 > 4 || !*((_DWORD *)dest + 805) )\n              v76 += sub_445CD0((signed int *)&v113, *((_DWORD *)dest + 6));\n            v39 = v81 + 1;\n            v33 += 16;\n            v38 = v82 + 4;\n          }\n          while ( v81 + 1 < v111 );\n        }\n        v34 = v87 + 1;\n        v33 = v110 + 256;\n      }\n      while ( v87 + 1 < v109 );\n      if ( v84 <= 4 )\n        goto LABEL_25;\n      return v76;\n    }\n    v6 = dest;\n    if ( v84 > 4 )\n      return v76;\n  }\nLABEL_25:\n  v62 = v76;\n  if ( v6[805] )\n  {\n    v63 = v6[2 * v107 + 21];\n    if ( v63 > 0 )\n    {\n      v64 = v6[2 * v107 + 20];\n      v65 = (__int128 *)&v136;\n      v66 = 0LL;\n      v77 = v6;\n      do\n      {\n        if ( v64 > 0 )\n        {\n          v83 = v66;\n          v67 = 0;\n          v85 = v65;\n          do\n          {\n            v68 = *(v65 - 28);\n            v114 = *(v65 - 27);\n            v113 = v68;\n            v69 = *(v65 - 24);\n            *(_OWORD *)&v119 = *(v65 - 23);\n            *(_OWORD *)&v115 = v69;\n            v70 = *(v65 - 20);\n            v124 = *(v65 - 19);\n            v123 = v70;\n            v71 = *(v65 - 16);\n            v126 = *(v65 - 15);\n            v125 = v71;\n            v72 = *(v65 - 12);\n            v128 = *(v65 - 11);\n            v127 = v72;\n            v73 = *(v65 - 8);\n            v130 = *(v65 - 7);\n            v129 = v73;\n            v74 = *(v65 - 4);\n            v132 = *(v65 - 3);\n            v131 = v74;\n            v134 = v65[1];\n            v133 = *v65;\n            v62 += sub_445FC0((const __m128i *)&v113, v77[6]);\n            v67 += v106;\n            v64 = v77[2 * v107 + 20];\n            v65 = (__int128 *)((char *)v65 + 4 * (v106 + 1) - 4);\n          }\n          while ( v67 < v64 );\n          v63 = v77[2 * v107 + 21];\n          v65 = v85;\n          v66 = v83;\n        }\n        v66 += v102 + 1 - 1LL;\n        v65 += 4 * (signed __int64)(v102 + 1) - 4;\n      }\n      while ( v66 < v63 );\n    }\n  }\n  return v62;\n}\n", 
            "funcStartAddr": "0x44d420L", 
            "funcEndAddr": "0x44dc55L", 
            "funcName": "sub_44D420"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44DC60(int a1, int a2, int a3, int a4, int a5, __int64 a6, double a7, __m128 a8, __m128i a9)\n{\n  unsigned __int64 v9; // r12\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r10\n  __int64 v13; // r8\n  __int64 v14; // rbp\n  __int64 v15; // rax\n  __int64 v16; // rbx\n  int v17; // eax\n  int v18; // esi\n  int v19; // edx\n  __int64 v20; // r10\n  __int64 v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rax\n  __int64 v25; // rax\n  unsigned __int64 v26; // rcx\n  __int64 v27; // rdx\n  __int64 v28; // r8\n  __int64 v29; // rdi\n  unsigned __int64 v30; // rsi\n  __int64 v31; // rbp\n  unsigned __int64 v32; // rdx\n  __int64 v33; // rcx\n  signed __int64 v34; // rsi\n  __int64 v35; // rdi\n  __int64 v36; // rbx\n  __int64 v37; // rbp\n  __int64 v38; // rdx\n  __int64 v39; // rbx\n  __int128 v40; // xmm1\n  __int128 v41; // xmm1\n  __int128 v42; // xmm1\n  signed __int64 v43; // rdx\n  __int64 v44; // rbx\n  __int64 v45; // rbp\n  __int64 v46; // rcx\n  int v47; // er15\n  __int64 v48; // rdi\n  __int64 v49; // r10\n  signed __int16 *v50; // rax\n  int *v51; // rbp\n  _QWORD *v52; // rax\n  signed __int16 *v53; // rax\n  signed __int64 v54; // rcx\n  signed int v55; // er11\n  signed __int16 *v56; // rax\n  signed __int16 *v57; // rax\n  int v58; // esi\n  signed __int16 *v59; // rax\n  signed __int64 v60; // rax\n  signed __int16 *v61; // rax\n  signed __int64 v62; // rax\n  _DWORD *v63; // rax\n  signed __int16 *v64; // rax\n  signed __int64 v65; // rax\n  signed __int16 *v66; // rax\n  signed __int64 v67; // rax\n  int v68; // eax\n  int v69; // edi\n  __int64 v70; // rax\n  int *v71; // rax\n  _QWORD *v72; // rax\n  __int64 v73; // rax\n  int v74; // edx\n  int *v75; // rax\n  int v76; // ecx\n  int v77; // edx\n  float v78; // xmm0_4\n  int v79; // edx\n  int *v80; // rax\n  float v81; // xmm0_4\n  int v82; // ecx\n  _QWORD *v83; // rax\n  __int16 v84; // si\n  int v85; // edi\n  bool v86; // zf\n  int v87; // eax\n  int v88; // ecx\n  int v89; // ecx\n  int v90; // er15\n  int v91; // eax\n  signed int v92; // er8\n  _DWORD *v93; // rsi\n  void **v94; // rdi\n  _QWORD *v95; // r11\n  signed int v96; // er9\n  int v97; // er15\n  __int64 v98; // r14\n  int v99; // ebx\n  signed int v100; // ecx\n  signed int v101; // ebx\n  int v102; // edx\n  char *v103; // r15\n  int v104; // eax\n  int v105; // er14\n  _DWORD *v106; // r11\n  int v107; // er12\n  _QWORD *v108; // rbp\n  unsigned __int64 v109; // rdi\n  int v110; // er9\n  int v111; // ebx\n  signed int v112; // ecx\n  int v113; // edx\n  int v114; // er8\n  _DWORD *v115; // rax\n  int v116; // er11\n  int v117; // edx\n  int v118; // er8\n  _QWORD *v119; // r10\n  __int64 v120; // rdx\n  __int64 v121; // r8\n  __int64 v122; // rdx\n  int v123; // eax\n  int v124; // ebx\n  int v125; // ebx\n  __int16 *v126; // rax\n  int v127; // er9\n  unsigned __int64 v128; // r11\n  int v129; // edx\n  __int64 v130; // r10\n  __int64 v131; // r8\n  __int64 v132; // r14\n  __int64 v133; // rax\n  __int64 v134; // rcx\n  signed __int64 v135; // rbx\n  _WORD *v136; // rbp\n  _WORD *v137; // rbp\n  unsigned __int64 v138; // r8\n  unsigned __int64 v139; // r10\n  __int64 v140; // r9\n  __int64 v141; // rsi\n  __int64 v142; // rcx\n  __int64 v143; // rax\n  signed __int64 v144; // rbp\n  _WORD *v145; // rdi\n  __int64 *v146; // rcx\n  int v147; // ebx\n  int v148; // ebp\n  unsigned int v149; // er12\n  unsigned int v150; // edx\n  _DWORD *v151; // rcx\n  bool v152; // sf\n  int v153; // eax\n  __int16 v154; // r13\n  __int16 v155; // r14\n  __int16 v156; // bx\n  __int16 v157; // r9\n  __int16 v158; // di\n  __int16 v159; // si\n  unsigned __int8 v160; // of\n  __int16 v161; // r12\n  __int16 v162; // r15\n  __int64 v163; // rbx\n  unsigned int v164; // er14\n  signed int v165; // eax\n  signed int v166; // er13\n  signed int v167; // ebp\n  unsigned __int64 v168; // rsi\n  unsigned __int64 v169; // r13\n  __int64 v170; // r9\n  __int16 v171; // r10\n  _BOOL8 v172; // r11\n  unsigned __int16 v173; // r14\n  __int64 v174; // rdi\n  unsigned __int64 v175; // r8\n  __int64 v176; // r15\n  __int64 v177; // rbx\n  __int64 v178; // rbp\n  __int64 v179; // rcx\n  _WORD *v180; // rdx\n  __int16 *v181; // rax\n  __int16 v183; // [rsp-8h] [rbp-1A8h]\n  __int64 v184; // [rsp+18h] [rbp-188h]\n  __int16 v185; // [rsp+58h] [rbp-148h]\n  __int16 v186; // [rsp+5Ah] [rbp-146h]\n  unsigned __int16 v187; // [rsp+5Ch] [rbp-144h]\n  __int16 v188; // [rsp+5Eh] [rbp-142h]\n  __int64 v189; // [rsp+60h] [rbp-140h]\n  __int64 v190; // [rsp+68h] [rbp-138h]\n  int v191; // [rsp+74h] [rbp-12Ch]\n  __int16 v192; // [rsp+7Ah] [rbp-126h]\n  int v193; // [rsp+7Ch] [rbp-124h]\n  int *v194; // [rsp+80h] [rbp-120h]\n  __int64 v195; // [rsp+88h] [rbp-118h]\n  __int64 v196; // [rsp+90h] [rbp-110h]\n  __int16 v197; // [rsp+9Eh] [rbp-102h]\n  double v198; // [rsp+A0h] [rbp-100h]\n  int v199; // [rsp+ACh] [rbp-F4h]\n  __int64 v200; // [rsp+B0h] [rbp-F0h]\n  __int64 v201; // [rsp+B8h] [rbp-E8h]\n  __int64 v202; // [rsp+C0h] [rbp-E0h]\n  __int64 v203; // [rsp+C8h] [rbp-D8h]\n  __int64 v204; // [rsp+D0h] [rbp-D0h]\n  __int64 v205; // [rsp+D8h] [rbp-C8h]\n  __int64 v206; // [rsp+E0h] [rbp-C0h]\n  __int64 v207; // [rsp+E8h] [rbp-B8h]\n  int v208; // [rsp+F4h] [rbp-ACh]\n  unsigned __int64 v209; // [rsp+F8h] [rbp-A8h]\n  __int64 v210; // [rsp+100h] [rbp-A0h]\n  __int64 v211; // [rsp+108h] [rbp-98h]\n  __int64 v212; // [rsp+110h] [rbp-90h]\n  int v213; // [rsp+118h] [rbp-88h]\n  __int16 v214; // [rsp+11Ch] [rbp-84h]\n  __int16 v215; // [rsp+11Eh] [rbp-82h]\n  __int64 v216; // [rsp+120h] [rbp-80h]\n  __int64 v217; // [rsp+128h] [rbp-78h]\n  int v218; // [rsp+134h] [rbp-6Ch]\n  __int64 v219; // [rsp+138h] [rbp-68h]\n  __int16 *v220; // [rsp+140h] [rbp-60h]\n  _DWORD *v221; // [rsp+148h] [rbp-58h]\n  __int64 v222; // [rsp+150h] [rbp-50h]\n  __int64 v223; // [rsp+158h] [rbp-48h]\n  __int64 v224; // [rsp+160h] [rbp-40h]\n  __int64 v225; // [rsp+168h] [rbp-38h]\n\n  v193 = a5;\n  v9 = a5;\n  v10 = *((unsigned int *)dest + 2 * a5 + 20);\n  v11 = *((unsigned int *)dest + 2 * a5 + 21);\n  v12 = *((signed int *)off_49F6D0 + 42);\n  v13 = a3;\n  v189 = (unsigned int)(a3 >> 2);\n  v14 = *((signed int *)off_49F6D0 + 43);\n  v190 = (unsigned int)(a4 >> 2);\n  v222 = qword_4F9E30;\n  v15 = *(_QWORD *)(qword_4F9E30 + 6504);\n  v191 = a2;\n  v16 = a2;\n  v223 = v15;\n  v225 = *(_QWORD *)(v15 + 8LL * a2);\n  v194 = (int *)off_49F6D0;\n  v202 = *((_QWORD *)off_49F6D0 + 8991);\n  v17 = 0;\n  v218 = *((_DWORD *)dest + 823);\n  v219 = a6;\n  v221 = dest;\n  if ( v218 )\n  {\n    v18 = *((_DWORD *)dest + 309);\n    v19 = 0;\n    if ( v18 )\n    {\n      v19 = dword_4F9FD8 % v18 + 1;\n      v17 = *((_DWORD *)dest + 309);\n    }\n  }\n  else\n  {\n    v19 = 0;\n  }\n  v199 = v17;\n  v208 = v19;\n  v20 = v13 + v12;\n  v205 = a4 + v14;\n  v21 = *((_QWORD *)v194 + 8990);\n  v201 = (signed int)v189;\n  v22 = *(_QWORD *)(v21 + 8LL * (signed int)v189);\n  v200 = (signed int)v190;\n  v23 = *(_QWORD *)(v22 + 8LL * (signed int)v190);\n  v204 = v16;\n  v24 = *(_QWORD *)(v23 + 8 * v16);\n  v213 = a1;\n  v195 = (signed __int16)a1;\n  v220 = *(__int16 **)(*(_QWORD *)(v24 + 8LL * (signed __int16)a1) + 8 * v9);\n  v203 = v20;\n  if ( (signed int)v11 > 0 )\n  {\n    v25 = qword_4F9EB0;\n    v196 = v20 + v10;\n    v26 = (unsigned int)v10 & 0xFFFFFFF0;\n    v207 = v26;\n    v26 -= 16LL;\n    v209 = v26;\n    v26 >>= 4;\n    v27 = ((_BYTE)v26 + 1) & 3;\n    v210 = v20 + 56;\n    v224 = v27 - 1 - v26;\n    *(_QWORD *)&v198 = v20 + 8;\n    v217 = ((_BYTE)v26 + 1) & 3;\n    v211 = -v27;\n    v212 = v20 + 3;\n    v28 = 0LL;\n    while ( 1 )\n    {\n      if ( (signed int)v10 <= 0 )\n        goto LABEL_28;\n      v29 = *(_QWORD *)(v25 + 8 * (v28 + v205));\n      v30 = (unsigned __int64)*(&off_49F8E0 + v28);\n      if ( (unsigned int)v10 < 0x10 || v30 < v29 + 2 * v196 && v29 + 2 * v20 < v30 + 2 * v10 )\n      {\n        v31 = 0LL;\nLABEL_12:\n        v32 = v10 - 1 - v31;\n        if ( v10 & 3 )\n        {\n          v33 = -(v10 & 3);\n          do\n          {\n            *(_WORD *)(v30 + 2 * v31) = *(_WORD *)(v29 + 2 * v20 + 2 * v31);\n            ++v31;\n            ++v33;\n          }\n          while ( v33 );\n        }\n        v20 = v203;\n        if ( v32 >= 3 )\n        {\n          v34 = v30 + 2 * v31 + 6;\n          v35 = v29 + 2 * v212 + 2 * v31;\n          v36 = 0LL;\n          do\n          {\n            *(_WORD *)(v34 + 2 * v36 - 6) = *(_WORD *)(v35 + 2 * v36 - 6);\n            *(_WORD *)(v34 + 2 * v36 - 4) = *(_WORD *)(v35 + 2 * v36 - 4);\n            *(_WORD *)(v34 + 2 * v36 - 2) = *(_WORD *)(v35 + 2 * v36 - 2);\n            *(_WORD *)(v34 + 2 * v36) = *(_WORD *)(v35 + 2 * v36);\n            v36 += 4LL;\n          }\n          while ( v10 - v31 != v36 );\n        }\n        goto LABEL_28;\n      }\n      if ( v209 < 0x30 )\n        break;\n      v38 = v29 + 2 * v210;\n      v39 = v224;\n      v37 = 0LL;\n      do\n      {\n        v40 = *(_OWORD *)(v38 + 2 * v37 - 96);\n        *(_OWORD *)(v30 + 2 * v37) = *(_OWORD *)(v38 + 2 * v37 - 112);\n        *(_OWORD *)(v30 + 2 * v37 + 16) = v40;\n        v41 = *(_OWORD *)(v38 + 2 * v37 - 64);\n        *(_OWORD *)(v30 + 2 * v37 + 32) = *(_OWORD *)(v38 + 2 * v37 - 80);\n        *(_OWORD *)(v30 + 2 * v37 + 48) = v41;\n        v42 = *(_OWORD *)(v38 + 2 * v37 - 32);\n        *(_OWORD *)(v30 + 2 * v37 + 64) = *(_OWORD *)(v38 + 2 * v37 - 48);\n        *(_OWORD *)(v30 + 2 * v37 + 80) = v42;\n        a9 = *(__m128i *)(v38 + 2 * v37 - 16);\n        a8 = *(__m128 *)(v38 + 2 * v37);\n        *(__m128i *)(v30 + 2 * v37 + 96) = a9;\n        *(__m128 *)(v30 + 2 * v37 + 112) = a8;\n        v37 += 64LL;\n        v39 += 4LL;\n      }\n      while ( v39 );\n      if ( v217 )\n        goto LABEL_25;\nLABEL_27:\n      v31 = v207;\n      if ( v207 != v10 )\n        goto LABEL_12;\nLABEL_28:\n      if ( ++v28 == v11 )\n        goto LABEL_29;\n    }\n    v37 = 0LL;\n    if ( !v217 )\n      goto LABEL_27;\nLABEL_25:\n    v43 = v30 + 2 * v37 + 16;\n    v44 = v29 + 2LL * *(_QWORD *)&v198 + 2 * v37;\n    v45 = v211;\n    v46 = 0LL;\n    do\n    {\n      a9 = *(__m128i *)(v44 + v46 - 16);\n      a8 = *(__m128 *)(v44 + v46);\n      *(__m128i *)(v43 + v46 - 16) = a9;\n      *(__m128 *)(v43 + v46) = a8;\n      v46 += 32LL;\n      ++v45;\n    }\n    while ( v45 );\n    goto LABEL_27;\n  }\nLABEL_29:\n  v198 = a7;\n  v47 = v191;\n  if ( v218 )\n  {\n    if ( v193 < 7 )\n    {\n      if ( v193 < 5 )\n      {\n        if ( v193 == 4 )\n        {\n          v48 = v204;\n          v49 = v195;\n          v56 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200)\n                                                           + 8 * v204)\n                                               + 8 * v195)\n                                   + 16LL);\n          dword_4F9FA0 = *v56;\n          dword_4F9FA4 = v56[1];\n          v55 = v199;\n          v51 = v194;\n          if ( (_DWORD)v204 == 1 )\n            v52 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v194[38] >> 2))\n                             + 8LL * ((signed int)v190 + (v194[39] >> 2)));\n          else\n            v52 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v194[38] >> 2))\n                                       + 8LL * ((signed int)v190 + (v194[39] >> 2)))\n                           + 8 * v195);\n          v54 = 2LL;\n        }\n        else\n        {\n          v48 = v204;\n          v49 = v195;\n          v55 = v199;\n          v51 = v194;\n          if ( v193 < 2 )\n          {\nLABEL_51:\n            v58 = v51[6];\n            if ( v58 == 1 && v51[18124] > 0 )\n            {\n              if ( v193 < 7 )\n              {\n                if ( v193 < 5 )\n                {\n                  if ( v193 == 4 )\n                  {\n                    v64 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201)\n                                                                                 + 8 * v200)\n                                                                     + 8 * v48)\n                                                         + 8 * v49)\n                                             + 16LL);\n                    dword_4F9FA0 = *v64;\n                    dword_4F9FA4 = v64[1];\n                    if ( (_DWORD)v48 == 1 )\n                      v65 = *(_QWORD *)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n                    else\n                      v65 = *(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                          + 8 * v49;\n                    v63 = *(_DWORD **)(*(_QWORD *)v65 + 16LL);\n                  }\n                  else\n                  {\n                    if ( v193 < 2 )\n                      goto LABEL_74;\n                    v66 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201)\n                                                                                 + 8 * v200)\n                                                                     + 8 * v48)\n                                                         + 8 * v49)\n                                             + 8LL);\n                    dword_4F9FA0 = *v66;\n                    dword_4F9FA4 = v66[1];\n                    if ( (_DWORD)v48 == 1 )\n                      v67 = *(_QWORD *)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n                    else\n                      v67 = *(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                          + 8 * v49;\n                    v63 = *(_DWORD **)(*(_QWORD *)v67 + 8LL);\n                  }\n                }\n                else\n                {\n                  v61 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200)\n                                                                   + 8 * v48)\n                                                       + 8 * v49)\n                                           + 32LL);\n                  dword_4F9FA0 = *v61;\n                  dword_4F9FA4 = v61[1];\n                  if ( (_DWORD)v48 == 1 )\n                    v62 = *(_QWORD *)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                                    + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n                  else\n                    v62 = *(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                    + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                        + 8 * v49;\n                  v63 = *(_DWORD **)(*(_QWORD *)v62 + 32LL);\n                }\n              }\n              else\n              {\n                v59 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200)\n                                                                 + 8 * v48)\n                                                     + 8 * v49)\n                                         + 40LL);\n                dword_4F9FA0 = *v59;\n                dword_4F9FA4 = v59[1];\n                if ( (_DWORD)v48 == 1 )\n                  v60 = *(_QWORD *)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                                  + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n                else\n                  v60 = *(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                  + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                      + 8 * v49;\n                v63 = *(_DWORD **)(*(_QWORD *)v60 + 40LL);\n              }\n              dword_4FA138 = *v63 / 2;\n            }\nLABEL_74:\n            v68 = 0;\n            if ( !dword_4FA0D4 )\n              v68 = dword_4FA138;\n            dword_4FA138 = v68;\n            v69 = (signed __int16)v213 + 1;\n            if ( *v51 > v69 )\n            {\n              v70 = *((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2));\n              v51 = v194;\n              v47 = v191;\n              v71 = *(int **)(*(_QWORD *)(*(_QWORD *)(v70 + 8LL * ((signed int)v190 + (v194[39] >> 2))) + 8 * v49)\n                            + 8 * v9);\n              dword_4FA134 = *v71;\n              dword_4F9F98 = v71[1];\n              dword_4F9F9C = v71[2];\n            }\n            if ( v47 == 1 && dword_4F9FD8 % v55 >= 2 )\n            {\n              v72 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                               + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n              dword_4FA134 = **(_DWORD **)(v72[v49] + 8 * v9);\n              v73 = *(_QWORD *)(*v72 + 8 * v9);\n              if ( v208 == 1 )\n              {\n                *(double *)a8.m128_u64 = (double)v55;\n              }\n              else\n              {\n                *(double *)a9.m128i_i64 = (double)(v55 - v208) + 2.0;\n                *(double *)a8.m128_u64 = ((double)(v55 - v208) + 1.0) / *(double *)a9.m128i_i64;\n              }\n              dword_4F9F98 = (signed int)((double)*(signed int *)(v73 + 4) * *(double *)a8.m128_u64);\n              dword_4F9F9C = (signed int)((double)*(signed int *)(v73 + 8) * *(double *)a8.m128_u64);\n              v47 = v191;\n              v51 = v194;\n            }\n            if ( v221[720] == 1 )\n            {\n              if ( (signed __int16)v213 >= 2 && !v58 )\n              {\n                v74 = 0;\n                v75 = *(int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                                          + 8LL * (signed __int16)v213\n                                          - 16)\n                              + 8 * v9);\n                if ( !dword_4FA0D4 )\n                  v74 = *v75;\n                dword_4FA12C = v74;\n                v76 = (signed __int16)v213 >> 1;\n                v77 = v76 + 1;\n                v78 = (float)((v76 + 1) * v75[1]);\n                a8.m128_i32[1] = 0;\n                a8.m128_f32[0] = (float)v76;\nLABEL_100:\n                dword_4F9F90 = (signed int)(float)(v78 / a8.m128_f32[0]);\n                v81 = (float)(v75[2] * v77);\nLABEL_101:\n                dword_4F9F94 = (signed int)(float)(v81 / a8.m128_f32[0]);\n                goto LABEL_102;\n              }\n              if ( (unsigned __int16)v213 > 1u )\n              {\nLABEL_102:\n                dword_4F9FF8 = v193;\n                goto LABEL_103;\n              }\n            }\n            else\n            {\n              if ( (signed __int16)v213 > 0 )\n              {\n                v79 = 0;\n                v80 = *(int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v51[38] >> 2))\n                                                      + 8LL * ((signed int)v190 + (v51[39] >> 2)))\n                                          + 8LL * (signed __int16)v213\n                                          - 8)\n                              + 8 * v9);\n                if ( !dword_4FA0D4 )\n                  v79 = *v80;\n                dword_4FA12C = v79;\n                a8.m128_i32[1] = 0;\n                a8.m128_f32[0] = (float)(signed __int16)v213;\n                dword_4F9F90 = (signed int)(float)((float)(v69 * v80[1]) / a8.m128_f32[0]);\n                v81 = (float)(v80[2] * v69);\n                goto LABEL_101;\n              }\n              if ( (_WORD)v213 )\n                goto LABEL_102;\n            }\n            if ( v47 || v58 != 1 )\n              goto LABEL_102;\n            v82 = 0;\n            v83 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v51[38] >> 2))\n                             + 8LL * ((signed int)v190 + (v51[39] >> 2)));\n            if ( !dword_4FA0D4 )\n              v82 = **(_DWORD **)(*v83 + 8 * v9);\n            dword_4FA12C = v82;\n            v75 = *(int **)(v83[v49] + 8 * v9);\n            v77 = -v208;\n            v78 = (float)(-v208 * v75[1]);\n            a8.m128_i32[1] = 0;\n            a8.m128_f32[0] = (float)(v55 - v208) + 1.0;\n            goto LABEL_100;\n          }\n          v57 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200)\n                                                           + 8 * v204)\n                                               + 8 * v195)\n                                   + 8LL);\n          dword_4F9FA0 = *v57;\n          dword_4F9FA4 = v57[1];\n          if ( (_DWORD)v204 == 1 )\n            v52 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v194[38] >> 2))\n                             + 8LL * ((signed int)v190 + (v194[39] >> 2)));\n          else\n            v52 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v194[38] >> 2))\n                                       + 8LL * ((signed int)v190 + (v194[39] >> 2)))\n                           + 8 * v195);\n          v54 = 1LL;\n        }\n      }\n      else\n      {\n        v48 = v204;\n        v49 = v195;\n        v53 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200)\n                                                         + 8 * v204)\n                                             + 8 * v195)\n                                 + 32LL);\n        dword_4F9FA0 = *v53;\n        dword_4F9FA4 = v53[1];\n        if ( (_DWORD)v204 == 1 )\n        {\n          v51 = v194;\n          v52 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v194[38] >> 2))\n                           + 8LL * ((signed int)v190 + (v194[39] >> 2)));\n        }\n        else\n        {\n          v51 = v194;\n          v52 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v194[38] >> 2))\n                                     + 8LL * ((signed int)v190 + (v194[39] >> 2)))\n                         + 8 * v195);\n        }\n        v54 = 4LL;\n        v55 = v199;\n      }\n    }\n    else\n    {\n      v48 = v204;\n      v49 = v195;\n      v50 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 8 * v201) + 8 * v200) + 8 * v204)\n                                           + 8 * v195)\n                               + 40LL);\n      dword_4F9FA0 = *v50;\n      dword_4F9FA4 = v50[1];\n      if ( (_DWORD)v204 == 1 )\n      {\n        v51 = v194;\n        v52 = *(_QWORD **)(*((_QWORD *)qword_4F9DC8 + (signed int)v189 + (v194[38] >> 2))\n                         + 8LL * ((signed int)v190 + (v194[39] >> 2)));\n      }\n      else\n      {\n        v51 = v194;\n        v52 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9DD0 + (signed int)v189 + (v194[38] >> 2))\n                                   + 8LL * ((signed int)v190 + (v194[39] >> 2)))\n                       + 8 * v195);\n      }\n      v54 = 5LL;\n      v55 = v199;\n    }\n    dword_4FA138 = **(_DWORD **)(*v52 + 8 * v54) / 2;\n    goto LABEL_51;\n  }\nLABEL_103:\n  sub_444450((__int64)v220, *(_QWORD *)(v222 + 6480), v223, v213, v47, v189, v190, v10, v11);\n  v84 = *v220;\n  v85 = (unsigned __int16)v220[1];\n  v86 = *((_DWORD *)dest + 823) == 0;\n  LODWORD(v211) = (unsigned __int16)*v220;\n  LODWORD(v210) = v85;\n  v206 = v10;\n  LODWORD(v196) = (signed __int16)v213;\n  if ( v86 )\n  {\n    v101 = v193;\n    v91 = sub_445AE0(\n            v198,\n            (unsigned int)v84,\n            (signed __int16)v213,\n            v47,\n            v203,\n            v205,\n            v193,\n            v84,\n            v85,\n            &v186,\n            &v185,\n            v219,\n            0x7FFFFFFFu);\n  }\n  else\n  {\n    v186 = v84 / 4;\n    v185 = (signed __int16)v85 / 4;\n    if ( !*((_DWORD *)dest + 616) )\n    {\n      v87 = -(signed int)v219;\n      v88 = v84 / 4;\n      if ( v88 > (signed int)v219 )\n        v88 = v219;\n      if ( v88 < v87 )\n        LOWORD(v88) = -(signed __int16)v219;\n      v186 = v88;\n      v89 = (signed __int16)v85 / 4;\n      if ( v89 > (signed int)v219 )\n        v89 = v219;\n      if ( v89 < v87 )\n        LOWORD(v89) = -(signed __int16)v219;\n      v185 = v89;\n    }\n    v90 = v191;\n    v91 = sub_417500((__int64)&off_49F8E0, v196, v191, v203, v205, v193, v198, v84, v85, &v186, &v185, v219, 0x7FFFFFFF);\n    if ( (signed int)v10 < 4 )\n    {\n      v101 = v193;\n    }\n    else\n    {\n      v92 = (signed int)v10 >> 2;\n      v93 = off_49F6D0;\n      v94 = &qword_4F9DC8;\n      if ( !v90 )\n        v94 = &qword_4F9DD0;\n      v95 = *v94;\n      v96 = 0;\n      v97 = v190;\n      v98 = v195;\n      do\n      {\n        if ( (signed int)v11 >= 4 )\n        {\n          v99 = v96 + v189;\n          v100 = 0;\n          do\n            **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v95[v99 + (v93[38] >> 2)] + 8LL * ((v93[39] >> 2) + v97 + v100++))\n                                    + 8 * v98)\n                        + 8 * v9) = v91;\n          while ( v100 < (signed int)v11 >> 2 );\n        }\n        ++v96;\n      }\n      while ( v96 < v92 );\n      v101 = v193;\n      LODWORD(v10) = v206;\n    }\n  }\n  v102 = *((_DWORD *)dest + 6);\n  if ( v102 && !*((_DWORD *)dest + 7) )\n    v91 = 0x7FFFFFFF;\n  v86 = *((_DWORD *)dest + 823) == 0;\n  v209 = v9;\n  if ( v86 )\n  {\n    if ( v102 && !*((_DWORD *)dest + 7) )\n      v91 = 0x7FFFFFFF;\n    LOWORD(v103) = v211;\n    LODWORD(v194) = sub_446D50(\n                      (__int64)&off_49F8E0,\n                      v196,\n                      v191,\n                      v203,\n                      v205,\n                      v101,\n                      v198,\n                      *(double *)a8.m128_u64,\n                      a9,\n                      v211,\n                      v210,\n                      &v186,\n                      &v185,\n                      9,\n                      9,\n                      v91);\n    if ( v101 == 1 )\n      goto LABEL_147;\n  }\n  else\n  {\n    if ( v101 < 4 )\n    {\n      LOWORD(v103) = v211;\n      v104 = sub_446D50(\n               (__int64)&off_49F8E0,\n               v196,\n               v191,\n               v203,\n               v205,\n               v101,\n               v198,\n               *(double *)a8.m128_u64,\n               a9,\n               v211,\n               v210,\n               &v186,\n               &v185,\n               9,\n               9,\n               v91);\n    }\n    else\n    {\n      LOWORD(v103) = v211;\n      v104 = sub_41A690(\n               (__int64)&off_49F8E0,\n               v196,\n               v191,\n               v203,\n               v205,\n               v101,\n               v198,\n               v211,\n               v210,\n               &v186,\n               &v185,\n               9,\n               9,\n               v91,\n               0);\n    }\n    LODWORD(v194) = v104;\n    if ( (signed int)v10 >= 4 )\n    {\n      LODWORD(v217) = (signed int)v10 >> 2;\n      v105 = v186;\n      v103 = (char *)qword_4F9DD0;\n      v106 = off_49F6D0;\n      v107 = v185;\n      v207 = 0LL;\n      v108 = qword_4F9DC8;\n      v216 = v11;\n      LODWORD(v212) = (signed int)v11 >> 2;\n      v109 = v209;\n      v110 = v190;\n      do\n      {\n        v111 = v191;\n        if ( (signed int)v11 >= 4 )\n        {\n          LODWORD(v196) = v207 + v189;\n          v112 = 0;\n          do\n          {\n            v113 = v106[38] >> 2;\n            v114 = v106[39] >> 2;\n            v115 = v106;\n            v116 = v196;\n            v117 = v196 + v113;\n            v118 = v110 + v112 + v114;\n            v119 = v108;\n            if ( !v111 )\n              v108 = v103;\n            v120 = *(_QWORD *)(v108[v117] + 8LL * v118);\n            v121 = v195;\n            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 8 * v195) + 8 * v109) + 4LL) = v105;\n            LODWORD(v120) = v116 + (v115[38] >> 2);\n            v106 = v115;\n            v122 = v108[(signed int)v120];\n            v108 = v119;\n            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 8LL * (v110 + v112++ + (v115[39] >> 2))) + 8 * v121)\n                                  + 8 * v109)\n                      + 8LL) = v107;\n          }\n          while ( v112 < (signed int)v212 );\n        }\n        v207 = (unsigned int)(v207 + 1);\n        v11 = v216;\n      }\n      while ( (signed int)v207 < (signed int)v217 );\n      v9 = v209;\n      LODWORD(v10) = v206;\n      v101 = v193;\n    }\n    if ( v101 == 1 )\n    {\nLABEL_147:\n      if ( !*((_DWORD *)dest + 616) )\n      {\n        v123 = *((_DWORD *)off_49F6D0 + 6);\n        if ( v123 == 3 || !v123 )\n        {\n          sub_4502D0();\n          v124 = sub_44F610();\n          v125 = v124 - (signed int)floor(8.0 * v198 + 0.4999);\n          if ( v125 < (signed int)v194 )\n          {\n            v126 = (__int16 *)******((_QWORD ******)off_49F6D0 + 8991);\n            v186 = *v126;\n            v185 = v126[1];\n            LODWORD(v194) = v125;\n          }\n        }\n      }\n      goto LABEL_152;\n    }\n  }\nLABEL_152:\n  v196 = (__int64)dest;\n  if ( *((_DWORD *)dest + 823) )\n  {\n    if ( (signed int)v10 >= 4 )\n    {\n      v127 = *((_DWORD *)off_49F6D0 + 38) >> 2;\n      v128 = (unsigned int)v206 >> 2;\n      v129 = v190 + (*((_DWORD *)off_49F6D0 + 39) >> 2);\n      v103 = 0LL;\n      v130 = 8 * v200;\n      v131 = v204;\n      v132 = v195;\n      do\n      {\n        if ( (signed int)v11 >= 4 )\n        {\n          v133 = *(_QWORD *)(v225 + 8LL * (v127 + (signed int)v103 + (signed int)v189));\n          v134 = v130 + *(_QWORD *)(v202 + 8LL * (_QWORD)&v103[v201]);\n          v135 = 0LL;\n          do\n          {\n            v136 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v134 + 8 * v135) + 8 * v131) + 8 * v132) + 8 * v9);\n            *v136 = v186;\n            v136[1] = v185;\n            v137 = *(_WORD **)(v133 + 8LL * (v129 + (signed int)v135));\n            *v137 = v186;\n            v137[1] = v185;\n            ++v135;\n          }\n          while ( v135 < (signed int)v11 >> 2 );\n        }\n        ++v103;\n      }\n      while ( (unsigned __int64)v103 < v128 );\n    }\n  }\n  else if ( (signed int)v10 >= 4 )\n  {\n    v138 = (unsigned int)v206 >> 2;\n    v139 = 0LL;\n    v140 = 8 * v200;\n    v141 = v195;\n    do\n    {\n      v142 = v204;\n      if ( (signed int)v11 >= 4 )\n      {\n        v143 = v140 + *(_QWORD *)(v202 + 8 * (v139 + v201));\n        v144 = 0LL;\n        do\n        {\n          v145 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v143 + 8 * v144) + 8 * v142) + 8 * v141) + 8 * v9);\n          *v145 = v186;\n          v145[1] = v185;\n          ++v144;\n        }\n        while ( v144 < (signed int)v11 >> 2 );\n      }\n      ++v139;\n    }\n    while ( v139 < v138 );\n  }\n  if ( *((_DWORD *)off_49F6D0 + 6) == 1 && !(_WORD)v213 && v193 == 1 && *(_DWORD *)(v196 + 1256) )\n  {\n    v146 = (__int64 *)((char *)off_49F6D0 + 71936);\n    v147 = v191;\n    if ( !v191 )\n      v146 = (__int64 *)((char *)off_49F6D0 + 71944);\n    v207 = *v146;\n    v148 = 0;\n    sub_444450(\n      (__int64)&v214,\n      *(_QWORD *)(qword_4F9E30 + 6480),\n      *(_QWORD *)(qword_4F9E30 + 6504),\n      0,\n      v191 == 0,\n      v189,\n      v190,\n      v206,\n      v11);\n    v149 = (unsigned int)(v186 + 2) >> 2;\n    v186 = v149;\n    v150 = (unsigned int)(v185 + 2) >> 2;\n    v185 = v150;\n    v151 = dest;\n    v152 = *((_DWORD *)dest + 315) < 0;\n    v216 = v11;\n    if ( v152 )\n    {\n      v153 = 0x7FFFFFFF;\n      v154 = 0;\n      v155 = 0;\n    }\n    else\n    {\n      LODWORD(v212) = v147 == 0;\n      LODWORD(v195) = v214;\n      LODWORD(v189) = (unsigned int)(v214 + 2) >> 2;\n      LODWORD(v196) = v215;\n      LODWORD(v204) = (unsigned int)(v215 + 2) >> 2;\n      v153 = 0x7FFFFFFF;\n      do\n      {\n        v154 = *v220;\n        v155 = v220[1];\n        if ( v148 & 1 )\n        {\n          v156 = v149;\n          v192 = v188;\n          LODWORD(v103) = v187;\n          LOWORD(v149) = v188;\n          v157 = v195;\n          v158 = v196;\n          v159 = v212;\n        }\n        else\n        {\n          if ( v148 )\n          {\n            v156 = v149;\n            v192 = v188;\n            LODWORD(v103) = v187;\n            LOWORD(v149) = v188;\n          }\n          else\n          {\n            v192 = v149;\n            LODWORD(v103) = v150;\n            v156 = v189;\n            LOWORD(v150) = v204;\n          }\n          v157 = v154;\n          v158 = v155;\n          v154 = v195;\n          v155 = v196;\n          v159 = v191;\n        }\n        v197 = (signed __int16)v103;\n        v188 = v156;\n        v187 = v150;\n        LODWORD(v184) = v155;\n        LOWORD(v147) = v159;\n        v153 = sub_447DC0(\n                 (__int64)&off_49F8E0,\n                 0LL,\n                 v159,\n                 v203,\n                 v205,\n                 1,\n                 v198,\n                 v183,\n                 v157,\n                 v158,\n                 v154,\n                 v184,\n                 &v188,\n                 &v187,\n                 &v192,\n                 &v197,\n                 v151[316] >> v148,\n                 v153);\n        v186 = v149;\n        v185 = (signed __int16)v103;\n        v151 = dest;\n        v150 = (unsigned int)v103;\n        v160 = __OFSUB__(v148, *((_DWORD *)dest + 315));\n        v152 = v148++ - *((_DWORD *)dest + 315) < 0;\n      }\n      while ( v152 ^ v160 );\n    }\n    LOWORD(v195) = v147;\n    v161 = 4 * v149;\n    v192 = v161;\n    v162 = 4 * (_WORD)v103;\n    v197 = v162;\n    if ( v151[317] )\n    {\n      if ( v151[6] )\n        v153 = 0x7FFFFFFF;\n      v163 = (unsigned int)v155;\n      v164 = v205;\n      v198 = v198 * 0.5;\n      v165 = sub_448610(\n               (__int64)&off_49F8E0,\n               0,\n               (signed __int16)v195,\n               v203,\n               (unsigned int)v205,\n               1,\n               v198,\n               *(double *)a8.m128_u64,\n               a9,\n               (unsigned int)v154,\n               v163,\n               &v188,\n               &v187,\n               &v192,\n               &v197,\n               9,\n               9,\n               v153);\n      v166 = v206;\n      if ( *((_DWORD *)dest + 317) == 2 )\n      {\n        v167 = 0x7FFFFFFF;\n        if ( !*((_DWORD *)dest + 6) )\n          v167 = v165;\n        sub_448610(\n          (__int64)&off_49F8E0,\n          0,\n          (_WORD)v195 == 0,\n          v203,\n          v164,\n          1,\n          v198,\n          *(double *)a8.m128_u64,\n          a9,\n          (unsigned int)(signed __int16)v211,\n          (unsigned int)(signed __int16)v210,\n          &v186,\n          &v185,\n          &v188,\n          &v187,\n          9,\n          9,\n          v167);\n        goto LABEL_194;\n      }\n    }\n    else\n    {\n      v188 *= 4;\n      v187 *= 4;\n      v166 = v206;\n    }\n    v186 = v161;\n    v185 = v162;\nLABEL_194:\n    v168 = v209;\n    if ( v166 >= 4 )\n    {\n      v169 = (unsigned int)v166 >> 2;\n      v170 = (signed __int16)v195;\n      v171 = v188;\n      v172 = (_WORD)v195 == 0;\n      v173 = v187;\n      v174 = (signed int)v216 >> 2;\n      v175 = 0LL;\n      v176 = 8 * v200;\n      do\n      {\n        if ( (signed int)v216 >= 4 )\n        {\n          v177 = v176 + *(_QWORD *)(v207 + 8 * (v175 + v201));\n          v178 = 0LL;\n          do\n          {\n            v179 = *(_QWORD *)(v177 + 8 * v178);\n            v180 = *(_WORD **)(**(_QWORD **)(v179 + 8 * v170) + 8 * v168);\n            *v180 = v186;\n            v180[1] = v185;\n            v181 = *(__int16 **)(**(_QWORD **)(v179 + 8 * v172) + 8 * v168);\n            *v181 = v171;\n            v181[1] = v173;\n            ++v178;\n          }\n          while ( v178 < v174 );\n        }\n        ++v175;\n      }\n      while ( v175 < v169 );\n    }\n  }\n  return (unsigned int)v194;\n}\n", 
            "funcStartAddr": "0x44dc60L", 
            "funcEndAddr": "0x44f60bL", 
            "funcName": "sub_44DC60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_44F610()\n{\n  _DWORD *v0; // r10\n  int v1; // ecx\n  __int64 v2; // rax\n  signed __int64 v3; // rsi\n  __int64 v4; // rbx\n  char *v5; // r15\n  int v6; // eax\n  __int64 v7; // r12\n  int v8; // er14\n  int v9; // ebp\n  int v10; // er13\n  __int64 v11; // r8\n  __int64 v12; // r9\n  __int64 v13; // rbp\n  int v14; // eax\n  __int64 v15; // rsi\n  int v16; // eax\n  __int64 v17; // rdx\n  int v18; // edi\n  __int64 v19; // rdi\n  int v20; // eax\n  __int64 v21; // rax\n  int v22; // ecx\n  int v23; // ecx\n  int v24; // ecx\n  __int64 v25; // rax\n  int v26; // ecx\n  int v27; // ecx\n  int v28; // ecx\n  __int64 v29; // rax\n  int v30; // ecx\n  int v31; // ecx\n  int v32; // ecx\n  _DWORD *v33; // r14\n  int v34; // er13\n  _DWORD *v35; // rbp\n  int v36; // eax\n  unsigned __int64 v37; // rax\n  _DWORD *v38; // rbx\n  int v39; // eax\n  unsigned int v41; // [rsp+Ch] [rbp-2DCh]\n  int v42; // [rsp+10h] [rbp-2D8h]\n  unsigned __int64 v43; // [rsp+18h] [rbp-2D0h]\n  int v44; // [rsp+20h] [rbp-2C8h]\n  int v45; // [rsp+24h] [rbp-2C4h]\n  int v46; // [rsp+28h] [rbp-2C0h]\n  int v47; // [rsp+2Ch] [rbp-2BCh]\n  int v48; // [rsp+30h] [rbp-2B8h]\n  int v49; // [rsp+34h] [rbp-2B4h]\n  int v50; // [rsp+38h] [rbp-2B0h]\n  int v51; // [rsp+3Ch] [rbp-2ACh]\n  int v52; // [rsp+40h] [rbp-2A8h]\n  int v53; // [rsp+44h] [rbp-2A4h]\n  int v54; // [rsp+48h] [rbp-2A0h]\n  int v55; // [rsp+4Ch] [rbp-29Ch]\n  int v56; // [rsp+50h] [rbp-298h]\n  int v57; // [rsp+54h] [rbp-294h]\n  int v58; // [rsp+58h] [rbp-290h]\n  int v59; // [rsp+5Ch] [rbp-28Ch]\n  unsigned __int64 v60; // [rsp+68h] [rbp-280h]\n  __int64 v61; // [rsp+70h] [rbp-278h]\n  unsigned __int64 v62; // [rsp+78h] [rbp-270h]\n  __int64 v63; // [rsp+80h] [rbp-268h]\n  __int64 v64; // [rsp+88h] [rbp-260h]\n  __int64 v65; // [rsp+90h] [rbp-258h]\n  __int64 v66; // [rsp+98h] [rbp-250h]\n  __int64 v67; // [rsp+A0h] [rbp-248h]\n  __int64 v68; // [rsp+A8h] [rbp-240h]\n  __int128 v69; // [rsp+B0h] [rbp-238h]\n  __int128 v70; // [rsp+C0h] [rbp-228h]\n  __int128 v71; // [rsp+D0h] [rbp-218h]\n  __int128 v72; // [rsp+E0h] [rbp-208h]\n  __int128 v73; // [rsp+F0h] [rbp-1F8h]\n  __int128 v74; // [rsp+100h] [rbp-1E8h]\n  __int128 v75; // [rsp+110h] [rbp-1D8h]\n  __int128 v76; // [rsp+120h] [rbp-1C8h]\n  __int128 v77; // [rsp+130h] [rbp-1B8h]\n  __int128 v78; // [rsp+140h] [rbp-1A8h]\n  __int128 v79; // [rsp+150h] [rbp-198h]\n  __int128 v80; // [rsp+160h] [rbp-188h]\n  __int128 v81; // [rsp+170h] [rbp-178h]\n  __int128 v82; // [rsp+180h] [rbp-168h]\n  __int128 v83; // [rsp+190h] [rbp-158h]\n  __int128 v84; // [rsp+1A0h] [rbp-148h]\n  __int128 v85; // [rsp+1B0h] [rbp-138h]\n  __int128 v86; // [rsp+1C0h] [rbp-128h]\n  __int128 v87; // [rsp+1D0h] [rbp-118h]\n  __int128 v88; // [rsp+1E0h] [rbp-108h]\n  __int128 v89; // [rsp+1F0h] [rbp-F8h]\n  __int128 v90; // [rsp+200h] [rbp-E8h]\n  __int128 v91; // [rsp+210h] [rbp-D8h]\n  __int128 v92; // [rsp+220h] [rbp-C8h]\n  __int128 v93; // [rsp+230h] [rbp-B8h]\n  __int128 v94; // [rsp+240h] [rbp-A8h]\n  __int128 v95; // [rsp+250h] [rbp-98h]\n  __int128 v96; // [rsp+260h] [rbp-88h]\n  __int128 v97; // [rsp+270h] [rbp-78h]\n  __int128 v98; // [rsp+280h] [rbp-68h]\n  __int128 v99; // [rsp+290h] [rbp-58h]\n  __int128 v100; // [rsp+2A0h] [rbp-48h]\n\n  v0 = off_49F6D0;\n  v1 = 0;\n  v41 = 0;\n  do\n  {\n    v2 = v1 & 1;\n    v64 = 8 * v2;\n    v63 = 8 * v2 - 4;\n    v62 = (unsigned int)(8 * v2 + 4);\n    v42 = v1;\n    v3 = 4 * v1 & 0xFFFFFFF8;\n    v4 = (v2 << 8) + 2 * v3 + 12702;\n    v60 = 4 * v1 & 0xFFFFFFF8 | 4;\n    v5 = (char *)&v91 + 12;\n    do\n    {\n      v6 = v0[43];\n      v68 = v6 + (signed int)v3;\n      v67 = (signed int)(v6 + (v3 | 1));\n      v66 = (signed int)(v6 + (v3 | 2));\n      v65 = (signed int)(v6 + (v3 | 3));\n      v7 = 0LL;\n      v61 = v4;\n      v43 = v3;\n      do\n      {\n        v8 = v64;\n        v9 = v64 + v7;\n        v10 = v0[42];\n        sub_42BD80(v64 + v7, v3, 0, 0, 0, 0, 0);\n        v11 = qword_4F9EB0;\n        v0 = off_49F6D0;\n        v12 = v10 + v9;\n        v13 = *(_QWORD *)(qword_4F9EB0 + 8 * v68);\n        v14 = *(unsigned __int16 *)(v13 + 2 * v12) - *(unsigned __int16 *)((char *)off_49F6D0 + v4 - 102);\n        *(_DWORD *)&v5[4 * v7 - 108] = v14;\n        v15 = v8 + (signed int)v7 + v10 + 1;\n        v44 = v14;\n        v16 = *(unsigned __int16 *)(v13 + 2 * v15) - *(unsigned __int16 *)((char *)v0 + v4 - 70);\n        v17 = v8 + (signed int)v7 + v10 + 2;\n        *(_DWORD *)&v5[4 * v7 - 104] = v16;\n        v45 = v16;\n        v18 = *(unsigned __int16 *)(v13 + 2 * v17) - *(unsigned __int16 *)((char *)v0 + v4 - 38);\n        *(_DWORD *)&v5[4 * v7 - 100] = v18;\n        v46 = v18;\n        v19 = v8 + (signed int)v7 + v10 + 3;\n        v20 = *(unsigned __int16 *)(v13 + 2 * v19) - *(unsigned __int16 *)((char *)v0 + v4 - 6);\n        *(_DWORD *)&v5[4 * v7 - 96] = v20;\n        v47 = v20;\n        v21 = *(_QWORD *)(v11 + 8 * v67);\n        v22 = *(unsigned __int16 *)(v21 + 2 * v12) - *(unsigned __int16 *)((char *)v0 + v4 - 100);\n        *(_DWORD *)&v5[4 * v7 - 76] = v22;\n        v48 = v22;\n        v23 = *(unsigned __int16 *)(v21 + 2 * v15) - *(unsigned __int16 *)((char *)v0 + v4 - 68);\n        *(_DWORD *)&v5[4 * v7 - 72] = v23;\n        v49 = v23;\n        v24 = *(unsigned __int16 *)(v21 + 2 * v17) - *(unsigned __int16 *)((char *)v0 + v4 - 36);\n        *(_DWORD *)&v5[4 * v7 - 68] = v24;\n        v50 = v24;\n        LODWORD(v21) = *(unsigned __int16 *)(v21 + 2 * v19) - *(unsigned __int16 *)((char *)v0 + v4 - 4);\n        *(_DWORD *)&v5[4 * v7 - 64] = v21;\n        v51 = v21;\n        v25 = *(_QWORD *)(v11 + 8 * v66);\n        v26 = *(unsigned __int16 *)(v25 + 2 * v12) - *(unsigned __int16 *)((char *)v0 + v4 - 98);\n        *(_DWORD *)&v5[4 * v7 - 44] = v26;\n        v52 = v26;\n        v27 = *(unsigned __int16 *)(v25 + 2 * v15) - *(unsigned __int16 *)((char *)v0 + v4 - 66);\n        *(_DWORD *)&v5[4 * v7 - 40] = v27;\n        v53 = v27;\n        v28 = *(unsigned __int16 *)(v25 + 2 * v17) - *(unsigned __int16 *)((char *)v0 + v4 - 34);\n        *(_DWORD *)&v5[4 * v7 - 36] = v28;\n        v54 = v28;\n        LODWORD(v25) = *(unsigned __int16 *)(v25 + 2 * v19) - *(unsigned __int16 *)((char *)v0 + v4 - 2);\n        *(_DWORD *)&v5[4 * v7 - 32] = v25;\n        v55 = v25;\n        v29 = *(_QWORD *)(v11 + 8 * v65);\n        v30 = *(unsigned __int16 *)(v29 + 2 * v12) - *(unsigned __int16 *)((char *)v0 + v4 - 96);\n        *(_DWORD *)&v5[4 * v7 - 12] = v30;\n        v56 = v30;\n        v31 = *(unsigned __int16 *)(v29 + 2 * v15) - *(unsigned __int16 *)((char *)v0 + v4 - 64);\n        *(_DWORD *)&v5[4 * v7 - 8] = v31;\n        v57 = v31;\n        v32 = *(unsigned __int16 *)(v29 + 2 * v17) - *(unsigned __int16 *)((char *)v0 + v4 - 32);\n        *(_DWORD *)&v5[4 * v7 - 4] = v32;\n        v58 = v32;\n        LODWORD(v29) = *(unsigned __int16 *)(v29 + 2 * v19) - *(unsigned __int16 *)((char *)v0 + v4);\n        *(_DWORD *)&v5[4 * v7] = v29;\n        v59 = v29;\n        v33 = dest;\n        v34 = *((_DWORD *)dest + 616);\n        if ( v34 || !*((_DWORD *)dest + 805) )\n        {\n          v35 = v0;\n          v36 = sub_445CD0(&v44, *((_DWORD *)dest + 6));\n          v0 = v35;\n          v41 += v36;\n        }\n        LODWORD(v3) = v43;\n        v4 += 128LL;\n        v37 = v7 + v63 + 4;\n        v7 += 4LL;\n      }\n      while ( v37 < v62 );\n      v4 = v61 + 8;\n      v5 += 128;\n      v3 = v43 + 4;\n    }\n    while ( v43 < v60 );\n    if ( !v34 && v33[805] )\n    {\n      v70 = v86;\n      v69 = v85;\n      v72 = v88;\n      v71 = v87;\n      v74 = v90;\n      v73 = v89;\n      v76 = v92;\n      v75 = v91;\n      v78 = v94;\n      v77 = v93;\n      v80 = v96;\n      v79 = v95;\n      v82 = v98;\n      v81 = v97;\n      v84 = v100;\n      v83 = v99;\n      v38 = v0;\n      v39 = sub_445FC0((const __m128i *)&v69, v33[6]);\n      v0 = v38;\n      v41 += v39;\n    }\n    v1 = v42 + 1;\n  }\n  while ( v42 != 3 );\n  return v41;\n}\n", 
            "funcStartAddr": "0x44f610L", 
            "funcEndAddr": "0x44fa9bL", 
            "funcName": "sub_44F610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44FAA0(signed int a1, int a2, __int16 a3, __int16 a4, int a5)\n{\n  _DWORD *v5; // r15\n  __int64 v6; // r10\n  signed int v7; // eax\n  signed int v8; // ebp\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  signed __int64 v11; // r8\n  __int64 v12; // rsi\n  __int64 v13; // r13\n  __int64 v14; // rdi\n  int v15; // er12\n  signed __int64 v16; // rbx\n  __int64 v17; // r14\n  __int64 v18; // r8\n  _QWORD *v19; // rdi\n  signed __int16 *v20; // rcx\n  _QWORD *v21; // rbp\n  signed __int16 *v22; // rax\n  __int64 v23; // rdx\n  int v24; // er12\n  signed __int16 *v25; // rax\n  signed __int16 *v26; // rdx\n  unsigned int v27; // er12\n  int v28; // ecx\n  char *v29; // r13\n  signed __int64 v30; // rax\n  _DWORD *v31; // rdi\n  int v32; // ecx\n  __int64 v33; // rsi\n  signed __int64 v34; // rax\n  int v35; // ebp\n  signed __int64 v36; // rax\n  int v37; // ebx\n  __int64 v38; // ST10_8\n  char *v39; // r8\n  __int64 v40; // rdi\n  __int64 v41; // rbp\n  __int64 v42; // ST38_8\n  __int64 v43; // r10\n  __int64 v44; // r11\n  __int64 v45; // rsi\n  char *v46; // r9\n  signed __int64 v47; // r15\n  int v48; // ecx\n  _DWORD *v49; // rbx\n  signed __int64 v50; // r8\n  signed __int64 v51; // rdx\n  __int64 v52; // rsi\n  __int64 v53; // rsi\n  __int64 v54; // rsi\n  int v55; // eax\n  int v56; // er8\n  int v57; // ebp\n  char *v58; // rsi\n  signed __int64 v59; // rax\n  int v60; // er14\n  __int128 *v61; // r15\n  __int128 v62; // xmm0\n  __int128 v63; // xmm0\n  __int128 v64; // xmm0\n  __int128 v65; // xmm0\n  __int128 v66; // xmm0\n  __int128 v67; // xmm0\n  __int128 v68; // xmm0\n  _DWORD *v70; // [rsp+10h] [rbp-5F8h]\n  signed __int64 v71; // [rsp+18h] [rbp-5F0h]\n  int v72; // [rsp+20h] [rbp-5E8h]\n  signed __int64 v73; // [rsp+28h] [rbp-5E0h]\n  int v74; // [rsp+30h] [rbp-5D8h]\n  signed __int64 v75; // [rsp+38h] [rbp-5D0h]\n  signed __int64 v76; // [rsp+40h] [rbp-5C8h]\n  signed __int64 v77; // [rsp+40h] [rbp-5C8h]\n  int v78; // [rsp+48h] [rbp-5C0h]\n  signed __int64 v79; // [rsp+50h] [rbp-5B8h]\n  signed __int64 v80; // [rsp+50h] [rbp-5B8h]\n  __int64 v81; // [rsp+58h] [rbp-5B0h]\n  __int64 v82; // [rsp+58h] [rbp-5B0h]\n  int v83; // [rsp+60h] [rbp-5A8h]\n  signed __int64 v84; // [rsp+60h] [rbp-5A8h]\n  int v85; // [rsp+68h] [rbp-5A0h]\n  __int64 v86; // [rsp+68h] [rbp-5A0h]\n  signed __int64 v87; // [rsp+70h] [rbp-598h]\n  __int64 v88; // [rsp+78h] [rbp-590h]\n  __int64 v89; // [rsp+78h] [rbp-590h]\n  __int64 v90; // [rsp+80h] [rbp-588h]\n  signed int v91; // [rsp+88h] [rbp-580h]\n  int v92; // [rsp+8Ch] [rbp-57Ch]\n  __int16 v93; // [rsp+90h] [rbp-578h]\n  __int16 v94; // [rsp+94h] [rbp-574h]\n  signed int v95; // [rsp+98h] [rbp-570h]\n  __int64 v96; // [rsp+A0h] [rbp-568h]\n  signed __int64 v97; // [rsp+A8h] [rbp-560h]\n  signed __int64 v98; // [rsp+B0h] [rbp-558h]\n  char *v99; // [rsp+B8h] [rbp-550h]\n  signed __int64 v100; // [rsp+C0h] [rbp-548h]\n  __int64 v101; // [rsp+C8h] [rbp-540h]\n  __int128 v102; // [rsp+D0h] [rbp-538h]\n  __int128 v103; // [rsp+E0h] [rbp-528h]\n  int v104; // [rsp+F0h] [rbp-518h]\n  int v105; // [rsp+F4h] [rbp-514h]\n  int v106; // [rsp+F8h] [rbp-510h]\n  int v107; // [rsp+FCh] [rbp-50Ch]\n  int v108; // [rsp+100h] [rbp-508h]\n  int v109; // [rsp+104h] [rbp-504h]\n  int v110; // [rsp+108h] [rbp-500h]\n  int v111; // [rsp+10Ch] [rbp-4FCh]\n  __int128 v112; // [rsp+110h] [rbp-4F8h]\n  __int128 v113; // [rsp+120h] [rbp-4E8h]\n  __int128 v114; // [rsp+130h] [rbp-4D8h]\n  __int128 v115; // [rsp+140h] [rbp-4C8h]\n  __int128 v116; // [rsp+150h] [rbp-4B8h]\n  __int128 v117; // [rsp+160h] [rbp-4A8h]\n  __int128 v118; // [rsp+170h] [rbp-498h]\n  __int128 v119; // [rsp+180h] [rbp-488h]\n  __int128 v120; // [rsp+190h] [rbp-478h]\n  __int128 v121; // [rsp+1A0h] [rbp-468h]\n  __int128 v122; // [rsp+1B0h] [rbp-458h]\n  __int128 v123; // [rsp+1C0h] [rbp-448h]\n  char v124; // [rsp+29Ch] [rbp-36Ch]\n  char v125; // [rsp+390h] [rbp-278h]\n\n  v5 = dest;\n  v6 = a1;\n  v7 = *((_DWORD *)dest + 2 * a1 + 20);\n  v8 = 8;\n  if ( v7 >= 9 )\n    v7 = 8;\n  v95 = v7;\n  if ( *((_DWORD *)dest + 2 * a1 + 21) < 9 )\n    v8 = *((_DWORD *)dest + 2 * a1 + 21);\n  v91 = v8;\n  LODWORD(v9) = 4;\n  v74 = a1;\n  if ( (signed int)v6 < 5 )\n    LODWORD(v9) = a1;\n  v9 = (signed int)v9;\n  v10 = *((signed int *)dest + 2 * (signed int)v9 + 37);\n  v96 = (signed int)v9;\n  if ( v10 <= 0 )\n  {\n    v27 = 0;\n    if ( a1 > 4 )\n      return v27;\n    goto LABEL_27;\n  }\n  v83 = a5;\n  v11 = dword_491250[4 * v9 + a2];\n  v85 = *((_DWORD *)dest + 2 * (signed int)v9 + 37);\n  v75 = v11 + v10;\n  v81 = a2;\n  v79 = 4 * v9;\n  v78 = *((_DWORD *)dest + 2 * v9 + 36);\n  v88 = dword_491200[4 * v9 + a2];\n  v12 = v88 + *((signed int *)dest + 2 * v9 + 36);\n  v93 = a3;\n  v13 = a3;\n  v94 = a4;\n  v14 = a4;\n  v15 = 0;\n  v76 = v11;\n  v16 = v11;\n  do\n  {\n    if ( v78 > 0 )\n    {\n      v17 = v88;\n      do\n      {\n        v18 = v14;\n        v19 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 8991) + 8 * v17) + 8 * v16);\n        v20 = *(signed __int16 **)(*(_QWORD *)(*v19 + 8 * v13) + 8 * v6);\n        v21 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 8990) + 8 * v17) + 8 * v16);\n        v22 = *(signed __int16 **)(*(_QWORD *)(*v21 + 8 * v13) + 8 * v6);\n        v23 = v19[1];\n        v14 = v18;\n        v24 = *((_DWORD *)qword_4F9F18 + v20[1] - (signed __int64)v22[1])\n            + *((_DWORD *)qword_4F9F18 + *v20 - (signed __int64)*v22)\n            + v15;\n        v25 = *(signed __int16 **)(*(_QWORD *)(v23 + 8 * v18) + 8 * v6);\n        v26 = *(signed __int16 **)(*(_QWORD *)(v21[1] + 8 * v18) + 8 * v6);\n        v15 = *((_DWORD *)qword_4F9F18 + v25[1] - (signed __int64)v26[1])\n            + *((_DWORD *)qword_4F9F18 + *v25 - (signed __int64)*v26)\n            + v24;\n        v17 += *((signed int *)dest + 2 * v6 + 36);\n      }\n      while ( v17 < v12 );\n    }\n    v16 += *((signed int *)dest + 2 * v6 + 37);\n  }\n  while ( v16 < v75 );\n  v27 = v83 * v15 >> 16;\n  if ( v85 <= 0 )\n  {\n    v5 = dest;\n    if ( v74 > 4 )\n      return v27;\n    goto LABEL_27;\n  }\n  v28 = dword_491200[v81 + v79];\n  v100 = v28 + v78;\n  v98 = (signed int)v75;\n  v29 = &v124;\n  v97 = dword_491200[v81 + v79];\n  v92 = 4 * v28;\n  v30 = v76;\n  v31 = off_49F6D0;\n  v5 = dest;\n  do\n  {\n    v77 = v30;\n    v99 = v29;\n    if ( v78 > 0 )\n    {\n      v32 = v31[43];\n      v33 = 4 * (signed int)v30;\n      v89 = (signed int)v33 + v32;\n      v34 = v33 | 1;\n      v87 = v34;\n      v86 = (signed int)v34 + v32;\n      v84 = v33 | 2;\n      v82 = (signed int)((v33 | 2) + v32);\n      v90 = v33;\n      v80 = v33 | 3;\n      v101 = (signed int)((v33 | 3) + v32);\n      v35 = v92;\n      v36 = v97;\n      do\n      {\n        v71 = v36;\n        v37 = v31[42];\n        sub_42BD80(v35, v90, 2, v74, v74, v93, v94);\n        v38 = qword_4F9EB0;\n        v39 = (char *)off_49F6D0;\n        v40 = v35;\n        v72 = v35;\n        v41 = v35 + v37;\n        v42 = v41;\n        v43 = (signed int)((v40 | 1) + v37);\n        v44 = (signed int)((v40 | 2) + v37);\n        v45 = *(_QWORD *)(qword_4F9EB0 + 8 * v89);\n        v46 = (char *)off_49F6D0 + 32 * v40 + 12600;\n        LODWORD(v41) = *(unsigned __int16 *)(v45 + 2 * v41) - *(unsigned __int16 *)&v46[2 * v90];\n        *((_DWORD *)v29 - 51) = v41;\n        LODWORD(v102) = v41;\n        v47 = (signed __int64)&v39[32 * (v40 | 1) + 12600];\n        LODWORD(v41) = *(unsigned __int16 *)(v45 + 2 * v43) - *(unsigned __int16 *)(v47 + 2 * v90);\n        *((_DWORD *)v29 - 50) = v41;\n        v48 = (v40 | 3) + v37;\n        v49 = v39;\n        DWORD1(v102) = v41;\n        v50 = (signed __int64)&v39[32 * (v40 | 2) + 12600];\n        LODWORD(v41) = *(unsigned __int16 *)(v45 + 2 * v44) - *(unsigned __int16 *)(v50 + 2 * v90);\n        *((_DWORD *)v29 - 49) = v41;\n        DWORD2(v102) = v41;\n        v51 = (signed __int64)&v49[8 * (v40 | 3) + 3150];\n        LODWORD(v45) = *(unsigned __int16 *)(v45 + 2LL * v48) - *(unsigned __int16 *)(v51 + 2 * v90);\n        *((_DWORD *)v29 - 48) = v45;\n        HIDWORD(v102) = v45;\n        v52 = *(_QWORD *)(v38 + 8 * v86);\n        LODWORD(v40) = *(unsigned __int16 *)(v52 + 2 * v42) - *(unsigned __int16 *)&v46[2 * v87];\n        *((_DWORD *)v29 - 35) = v40;\n        LODWORD(v103) = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v52 + 2 * v43) - *(unsigned __int16 *)(v47 + 2 * v87);\n        *((_DWORD *)v29 - 34) = v40;\n        DWORD1(v103) = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v52 + 2 * v44) - *(unsigned __int16 *)(v50 + 2 * v87);\n        *((_DWORD *)v29 - 33) = v40;\n        DWORD2(v103) = v40;\n        LODWORD(v52) = *(unsigned __int16 *)(v52 + 2LL * v48) - *(unsigned __int16 *)(v51 + 2 * v87);\n        *((_DWORD *)v29 - 32) = v52;\n        HIDWORD(v103) = v52;\n        v53 = *(_QWORD *)(v38 + 8 * v82);\n        LODWORD(v40) = *(unsigned __int16 *)(v53 + 2 * v42) - *(unsigned __int16 *)&v46[2 * v84];\n        *((_DWORD *)v29 - 19) = v40;\n        v104 = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v53 + 2 * v43) - *(unsigned __int16 *)(v47 + 2 * v84);\n        *((_DWORD *)v29 - 18) = v40;\n        v105 = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v53 + 2 * v44) - *(unsigned __int16 *)(v50 + 2 * v84);\n        *((_DWORD *)v29 - 17) = v40;\n        v106 = v40;\n        LODWORD(v53) = *(unsigned __int16 *)(v53 + 2LL * v48) - *(unsigned __int16 *)(v51 + 2 * v84);\n        *((_DWORD *)v29 - 16) = v53;\n        v107 = v53;\n        v54 = *(_QWORD *)(v38 + 8 * v101);\n        LODWORD(v40) = *(unsigned __int16 *)(v54 + 2 * v42) - *(unsigned __int16 *)&v46[2 * v80];\n        *((_DWORD *)v29 - 3) = v40;\n        v108 = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v54 + 2 * v43) - *(unsigned __int16 *)(v47 + 2 * v80);\n        *((_DWORD *)v29 - 2) = v40;\n        v109 = v40;\n        LODWORD(v40) = *(unsigned __int16 *)(v54 + 2 * v44) - *(unsigned __int16 *)(v50 + 2 * v80);\n        *((_DWORD *)v29 - 1) = v40;\n        v110 = v40;\n        v55 = *(unsigned __int16 *)(v54 + 2LL * v48) - *(unsigned __int16 *)(v51 + 2 * v80);\n        *(_DWORD *)v29 = v55;\n        v111 = v55;\n        v5 = dest;\n        if ( v74 > 4 || !*((_DWORD *)dest + 805) )\n          v27 += sub_445CD0((signed int *)&v102, *((_DWORD *)dest + 6));\n        v36 = v71 + 1;\n        v29 += 16;\n        v35 = v72 + 4;\n        v31 = v49;\n      }\n      while ( v71 + 1 < v100 );\n    }\n    v30 = v77 + 1;\n    v29 = v99 + 256;\n  }\n  while ( v77 + 1 < v98 );\n  if ( v74 <= 4 )\n  {\nLABEL_27:\n    if ( v5[805] )\n    {\n      v56 = v5[2 * v96 + 21];\n      if ( v56 > 0 )\n      {\n        v57 = v5[2 * v96 + 20];\n        v58 = &v125;\n        v59 = 0LL;\n        v70 = v5;\n        do\n        {\n          if ( v57 > 0 )\n          {\n            v73 = v59;\n            v60 = 0;\n            v61 = (__int128 *)v58;\n            do\n            {\n              v62 = *(v61 - 28);\n              v103 = *(v61 - 27);\n              v102 = v62;\n              v63 = *(v61 - 24);\n              *(_OWORD *)&v108 = *(v61 - 23);\n              *(_OWORD *)&v104 = v63;\n              v64 = *(v61 - 20);\n              v113 = *(v61 - 19);\n              v112 = v64;\n              v65 = *(v61 - 16);\n              v115 = *(v61 - 15);\n              v114 = v65;\n              v66 = *(v61 - 12);\n              v117 = *(v61 - 11);\n              v116 = v66;\n              v67 = *(v61 - 8);\n              v119 = *(v61 - 7);\n              v118 = v67;\n              v68 = *(v61 - 4);\n              v121 = *(v61 - 3);\n              v120 = v68;\n              v123 = v61[1];\n              v122 = *v61;\n              v27 += sub_445FC0((const __m128i *)&v102, v70[6]);\n              v60 += v95;\n              v57 = v70[2 * v96 + 20];\n              v61 = (__int128 *)((char *)v61 + 4 * (v95 + 1) - 4);\n            }\n            while ( v60 < v57 );\n            v56 = v70[2 * v96 + 21];\n            v59 = v73;\n          }\n          v59 += v91 + 1 - 1LL;\n          v58 += 64 * (signed __int64)(v91 + 1) - 64;\n        }\n        while ( v59 < v56 );\n      }\n    }\n  }\n  return v27;\n}\n", 
            "funcStartAddr": "0x44faa0L", 
            "funcEndAddr": "0x4502d0L", 
            "funcName": "sub_44FAA0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4502D0()\n{\n  _WORD ******v0; // r14\n  __int64 v1; // r12\n  __int64 v2; // rbx\n  int v3; // er15\n  int v4; // er8\n  int v5; // edx\n  int v6; // esi\n  int v7; // edi\n  int v8; // ebp\n  _BOOL4 v9; // eax\n  bool v10; // cl\n  __int16 v11; // cx\n  __int64 result; // rax\n  _QWORD ****v13; // rdx\n  _WORD *v14; // rsi\n  __int16 *****v15; // rsi\n  __int16 *v16; // rdi\n  __int16 *****v17; // rdi\n  __int16 *v18; // rbp\n  __int16 *****v19; // rbp\n  __int16 *v20; // rbx\n  __int16 *v21; // rbx\n  __int16 *v22; // rbx\n  __int16 *v23; // rbx\n  __int16 *v24; // rbx\n  __int16 *v25; // rbx\n  __int16 *v26; // rbx\n  __int16 *v27; // rbx\n  __int16 *v28; // rbx\n  __int16 *v29; // rdx\n  __int16 *v30; // rdx\n  __int16 *v31; // rdx\n  __int16 *v32; // rdx\n  _WORD *****v33; // rax\n  _DWORD *****v34; // rcx\n  _DWORD *****v35; // rdx\n  _WORD *****v36; // rsi\n  __int16 v37; // [rsp+Ch] [rbp-5Ch]\n  unsigned __int16 v38; // [rsp+Eh] [rbp-5Ah]\n  int v39; // [rsp+10h] [rbp-58h]\n  int v40; // [rsp+14h] [rbp-54h]\n  int v41; // [rsp+20h] [rbp-48h]\n  int v42; // [rsp+24h] [rbp-44h]\n  int v43; // [rsp+28h] [rbp-40h]\n  int v44; // [rsp+2Ch] [rbp-3Ch]\n  int v45; // [rsp+38h] [rbp-30h]\n  int v46; // [rsp+3Ch] [rbp-2Ch]\n\n  v0 = (_WORD ******)*((_QWORD *)off_49F6D0 + 8991);\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  v3 = 0;\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, 0, -1, 0, &v43);\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, 0, 0, -1, &v39);\n  v4 = 0;\n  v5 = 0;\n  if ( v43 )\n  {\n    v4 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6504) + 8LL * v45) + 8LL * v46) + 2LL);\n    v5 = *(signed __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v45) + 2LL * v46);\n    v6 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v44 + 532);\n    if ( *(_DWORD *)(v1 + 632 * v2 + 532) )\n    {\n      if ( !v6 )\n      {\n        v5 *= 2;\n        v4 /= 2;\n      }\n    }\n    else if ( v6 )\n    {\n      v4 *= 2;\n      v5 >>= 1;\n    }\n  }\n  v7 = 0;\n  if ( v39 )\n  {\n    v3 = *(signed __int16 *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6504) + 8LL * v41) + 8LL * v42) + 2LL);\n    v7 = *(signed __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v41) + 2LL * v42);\n    v8 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v40 + 532);\n    if ( *(_DWORD *)(v1 + 632 * v2 + 532) )\n    {\n      if ( !v8 )\n      {\n        v7 *= 2;\n        v3 /= 2;\n        if ( !v43 )\n          goto LABEL_19;\n        goto LABEL_15;\n      }\n    }\n    else if ( v8 )\n    {\n      v3 *= 2;\n      v7 >>= 1;\n    }\n  }\n  if ( !v43 )\n  {\nLABEL_19:\n    v9 = 1;\n    goto LABEL_20;\n  }\nLABEL_15:\n  v9 = 0;\n  if ( !v5 && !**(_WORD **)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6504) + 8LL * v45) + 8LL * v46) )\n  {\n    v9 = v4 == 0;\n    if ( !v39 )\n      goto LABEL_26;\n    goto LABEL_21;\n  }\nLABEL_20:\n  if ( !v39 )\n    goto LABEL_26;\nLABEL_21:\n  if ( v7 )\n  {\n    v10 = 0;\n    if ( !v9 )\n      goto LABEL_23;\nLABEL_26:\n    v33 = *v0;\n    *(_DWORD *)*****v0 = 0;\n    v34 = (_DWORD *****)v0[1];\n    *****v34 = 0;\n    v35 = (_DWORD *****)v0[2];\n    *****v35 = 0;\n    v36 = v0[3];\n    *(_DWORD *)****v36 = 0;\n    *(_DWORD *)***v33[1] = 0;\n    ****v34[1] = 0;\n    ****v35[1] = 0;\n    *(_DWORD *)***v36[1] = 0;\n    *(_DWORD *)***v33[2] = 0;\n    ****v34[2] = 0;\n    ****v35[2] = 0;\n    *(_DWORD *)***v36[2] = 0;\n    *(_DWORD *)***v33[3] = 0;\n    ****v34[3] = 0;\n    ****v35[3] = 0;\n    v32 = ***v36[3];\n    *v32 = 0;\n    result = 0LL;\n    goto LABEL_27;\n  }\n  v10 = **(_WORD **)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6504) + 8LL * v41) + 8LL * v42) == 0 && v3 == 0;\n  if ( v9 )\n    goto LABEL_26;\nLABEL_23:\n  if ( v10 )\n    goto LABEL_26;\n  sub_444450((__int64)&v37, *(_QWORD *)(qword_4F9E30 + 6480), *(_QWORD *)(qword_4F9E30 + 6504), 0, 0, 0, 0, 16, 16);\n  v11 = v37;\n  result = v38;\n  v13 = *v0;\n  v14 = *****v0;\n  *v14 = v37;\n  v14[1] = result;\n  v15 = v0[1];\n  v16 = ****v15;\n  *v16 = v11;\n  v16[1] = result;\n  v17 = v0[2];\n  v18 = ****v17;\n  *v18 = v11;\n  v18[1] = result;\n  v19 = v0[3];\n  v20 = ****v19;\n  *v20 = v11;\n  v20[1] = result;\n  v21 = (__int16 *)***v13[1];\n  *v21 = v11;\n  v21[1] = result;\n  v22 = ***v15[1];\n  *v22 = v11;\n  v22[1] = result;\n  v23 = ***v17[1];\n  *v23 = v11;\n  v23[1] = result;\n  v24 = ***v19[1];\n  *v24 = v11;\n  v24[1] = result;\n  v25 = (__int16 *)***v13[2];\n  *v25 = v11;\n  v25[1] = result;\n  v26 = ***v15[2];\n  *v26 = v11;\n  v26[1] = result;\n  v27 = ***v17[2];\n  *v27 = v11;\n  v27[1] = result;\n  v28 = ***v19[2];\n  *v28 = v11;\n  v28[1] = result;\n  v29 = (__int16 *)***v13[3];\n  *v29 = v11;\n  v29[1] = result;\n  v30 = ***v15[3];\n  *v30 = v11;\n  v30[1] = result;\n  v31 = ***v17[3];\n  *v31 = v11;\n  v31[1] = result;\n  v32 = ***v19[3];\n  *v32 = v11;\nLABEL_27:\n  v32[1] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4502d0L", 
            "funcEndAddr": "0x450809L", 
            "funcName": "sub_4502D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_450810(unsigned int a1, _DWORD *a2)\n{\n  int v2; // eax\n  signed int v3; // esi\n  int v4; // edi\n  int v5; // edx\n  signed __int64 v6; // rbx\n  signed int *v7; // r15\n  __int64 v8; // r13\n  signed __int64 v9; // r8\n  _DWORD *v10; // r12\n  unsigned int v11; // er9\n  __int64 v12; // rax\n  __int64 v13; // r10\n  int v14; // ebx\n  __int64 v15; // rsi\n  int v16; // ebp\n  __int64 v17; // rax\n  int v18; // edx\n  __int16 v19; // r9\n  __int16 v20; // ST00_2\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rbp\n  __int64 v24; // rdx\n  int v25; // esi\n  int v26; // esi\n  int v27; // esi\n  __int64 v28; // rdx\n  int v29; // esi\n  int v30; // esi\n  int v31; // esi\n  __int64 v32; // rdx\n  int v33; // esi\n  int v34; // esi\n  int v35; // esi\n  __int64 v36; // rcx\n  _DWORD *v37; // r14\n  int v38; // ebp\n  int v39; // eax\n  int v40; // ebx\n  int v41; // eax\n  unsigned int v43; // [rsp+Ch] [rbp-2CCh]\n  _DWORD *v44; // [rsp+10h] [rbp-2C8h]\n  __int64 v45; // [rsp+18h] [rbp-2C0h]\n  int v46; // [rsp+20h] [rbp-2B8h]\n  int v47; // [rsp+24h] [rbp-2B4h]\n  int v48; // [rsp+28h] [rbp-2B0h]\n  int v49; // [rsp+2Ch] [rbp-2ACh]\n  int v50; // [rsp+30h] [rbp-2A8h]\n  int v51; // [rsp+34h] [rbp-2A4h]\n  int v52; // [rsp+38h] [rbp-2A0h]\n  int v53; // [rsp+3Ch] [rbp-29Ch]\n  int v54; // [rsp+40h] [rbp-298h]\n  int v55; // [rsp+44h] [rbp-294h]\n  int v56; // [rsp+48h] [rbp-290h]\n  int v57; // [rsp+4Ch] [rbp-28Ch]\n  int v58; // [rsp+50h] [rbp-288h]\n  int v59; // [rsp+54h] [rbp-284h]\n  int v60; // [rsp+58h] [rbp-280h]\n  int v61; // [rsp+5Ch] [rbp-27Ch]\n  __int64 v62; // [rsp+60h] [rbp-278h]\n  __int64 v63; // [rsp+68h] [rbp-270h]\n  _DWORD *v64; // [rsp+70h] [rbp-268h]\n  __int64 v65; // [rsp+78h] [rbp-260h]\n  __int64 v66; // [rsp+80h] [rbp-258h]\n  __int64 v67; // [rsp+88h] [rbp-250h]\n  __int64 v68; // [rsp+90h] [rbp-248h]\n  __int64 v69; // [rsp+98h] [rbp-240h]\n  __int128 v70; // [rsp+A0h] [rbp-238h]\n  __int128 v71; // [rsp+B0h] [rbp-228h]\n  __int128 v72; // [rsp+C0h] [rbp-218h]\n  __int128 v73; // [rsp+D0h] [rbp-208h]\n  __int128 v74; // [rsp+E0h] [rbp-1F8h]\n  __int128 v75; // [rsp+F0h] [rbp-1E8h]\n  __int128 v76; // [rsp+100h] [rbp-1D8h]\n  __int128 v77; // [rsp+110h] [rbp-1C8h]\n  __int128 v78; // [rsp+120h] [rbp-1B8h]\n  __int128 v79; // [rsp+130h] [rbp-1A8h]\n  __int128 v80; // [rsp+140h] [rbp-198h]\n  __int128 v81; // [rsp+150h] [rbp-188h]\n  __int128 v82; // [rsp+160h] [rbp-178h]\n  __int128 v83; // [rsp+170h] [rbp-168h]\n  __int128 v84; // [rsp+180h] [rbp-158h]\n  __int128 v85; // [rsp+190h] [rbp-148h]\n  __int128 v86; // [rsp+1A0h] [rbp-138h]\n  __int128 v87; // [rsp+1B0h] [rbp-128h]\n  __int128 v88; // [rsp+1C0h] [rbp-118h]\n  __int128 v89; // [rsp+1D0h] [rbp-108h]\n  __int128 v90; // [rsp+1E0h] [rbp-F8h]\n  __int128 v91; // [rsp+1F0h] [rbp-E8h]\n  __int128 v92; // [rsp+200h] [rbp-D8h]\n  __int128 v93; // [rsp+210h] [rbp-C8h]\n  __int128 v94; // [rsp+220h] [rbp-B8h]\n  __int128 v95; // [rsp+230h] [rbp-A8h]\n  __int128 v96; // [rsp+240h] [rbp-98h]\n  __int128 v97; // [rsp+250h] [rbp-88h]\n  __int128 v98; // [rsp+260h] [rbp-78h]\n  __int128 v99; // [rsp+270h] [rbp-68h]\n  __int128 v100; // [rsp+280h] [rbp-58h]\n  __int128 v101; // [rsp+290h] [rbp-48h]\n\n  v44 = a2;\n  v2 = a1 + (a1 >> 31);\n  v3 = 4 * v2 & 0xFFFFFFF8;\n  v4 = a1 - (v2 & 0x1FFFFFFE);\n  v5 = 8 * v4;\n  v6 = v3;\n  v7 = (signed int *)off_49F6D0;\n  v66 = 8 * v4 + 4;\n  v62 = v3 + 4;\n  v8 = 256LL * v4 + 2LL * v3 + 12702;\n  v9 = 8 * v4 - 4LL;\n  v10 = (_DWORD *)((char *)&v92 + 12);\n  v11 = 0;\n  v63 = 8 * v4 - 4LL;\n  while ( 2 )\n  {\n    v12 = v7[43];\n    v45 = v6;\n    v68 = v12 + (signed int)v6;\n    LODWORD(v12) = ((signed int)v12 + (signed int)v6) >> 2;\n    v13 = (signed int)v12;\n    v14 = v5;\n    v64 = v10;\n    v15 = v9;\n    v65 = v8;\n    v67 = (signed int)v12;\n    do\n    {\n      v16 = v14 + v7[42];\n      v17 = (v14 + v7[42]) >> 2;\n      v18 = *(signed __int16 *)(*((_QWORD *)qword_4F9E00 + v17) + 2 * v13);\n      if ( v18 < 0 )\n      {\n        *v44 = 0x7FFFFFFF;\n        return 0x7FFFFFFF;\n      }\n      v43 = v11;\n      v19 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9E08 + 8 * v17) + 2 * v13);\n      v20 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9E08 + 1) + 8 * v17) + 2 * v13);\n      v69 = v15;\n      sub_42BD80(v14, v45, v18, 0, 0, v19, v20);\n      v21 = qword_4F9EB0;\n      v7 = (signed int *)off_49F6D0;\n      v22 = v16;\n      v23 = v68;\n      v24 = *(_QWORD *)(qword_4F9EB0 + 8 * v68);\n      v25 = *(unsigned __int16 *)(v24 + 2 * v22) - *(unsigned __int16 *)((char *)off_49F6D0 + v8 - 102);\n      *(v10 - 27) = v25;\n      v46 = v25;\n      v26 = *(unsigned __int16 *)(v24 + 2 * v22 + 2) - *(unsigned __int16 *)((char *)v7 + v8 - 70);\n      *(v10 - 26) = v26;\n      v47 = v26;\n      v27 = *(unsigned __int16 *)(v24 + 2 * v22 + 4) - *(unsigned __int16 *)((char *)v7 + v8 - 38);\n      *(v10 - 25) = v27;\n      v48 = v27;\n      LODWORD(v24) = *(unsigned __int16 *)(v24 + 2 * v22 + 6) - *(unsigned __int16 *)((char *)v7 + v8 - 6);\n      *(v10 - 24) = v24;\n      v49 = v24;\n      v28 = *(_QWORD *)(v21 + 8 * v23 + 8);\n      v29 = *(unsigned __int16 *)(v28 + 2 * v22) - *(unsigned __int16 *)((char *)v7 + v8 - 100);\n      *(v10 - 19) = v29;\n      v50 = v29;\n      v30 = *(unsigned __int16 *)(v28 + 2 * v22 + 2) - *(unsigned __int16 *)((char *)v7 + v8 - 68);\n      *(v10 - 18) = v30;\n      v51 = v30;\n      v31 = *(unsigned __int16 *)(v28 + 2 * v22 + 4) - *(unsigned __int16 *)((char *)v7 + v8 - 36);\n      *(v10 - 17) = v31;\n      v52 = v31;\n      LODWORD(v28) = *(unsigned __int16 *)(v28 + 2 * v22 + 6) - *(unsigned __int16 *)((char *)v7 + v8 - 4);\n      *(v10 - 16) = v28;\n      v53 = v28;\n      v32 = *(_QWORD *)(v21 + 8 * v23 + 16);\n      v33 = *(unsigned __int16 *)(v32 + 2 * v22) - *(unsigned __int16 *)((char *)v7 + v8 - 98);\n      *(v10 - 11) = v33;\n      v54 = v33;\n      v34 = *(unsigned __int16 *)(v32 + 2 * v22 + 2) - *(unsigned __int16 *)((char *)v7 + v8 - 66);\n      *(v10 - 10) = v34;\n      v55 = v34;\n      v35 = *(unsigned __int16 *)(v32 + 2 * v22 + 4) - *(unsigned __int16 *)((char *)v7 + v8 - 34);\n      *(v10 - 9) = v35;\n      v56 = v35;\n      LODWORD(v32) = *(unsigned __int16 *)(v32 + 2 * v22 + 6) - *(unsigned __int16 *)((char *)v7 + v8 - 2);\n      *(v10 - 8) = v32;\n      v57 = v32;\n      v36 = *(_QWORD *)(v21 + 8 * v23 + 24);\n      LODWORD(v32) = *(unsigned __int16 *)(v36 + 2 * v22) - *(unsigned __int16 *)((char *)v7 + v8 - 96);\n      *(v10 - 3) = v32;\n      v58 = v32;\n      LODWORD(v32) = *(unsigned __int16 *)(v36 + 2 * v22 + 2) - *(unsigned __int16 *)((char *)v7 + v8 - 64);\n      *(v10 - 2) = v32;\n      v59 = v32;\n      LODWORD(v32) = *(unsigned __int16 *)(v36 + 2 * v22 + 4) - *(unsigned __int16 *)((char *)v7 + v8 - 32);\n      *(v10 - 1) = v32;\n      v60 = v32;\n      LODWORD(v22) = *(unsigned __int16 *)(v36 + 2 * v22 + 6) - *(unsigned __int16 *)((char *)v7 + v8);\n      *v10 = v22;\n      v61 = v22;\n      v37 = dest;\n      v38 = *((_DWORD *)dest + 6);\n      v39 = sub_445CD0(&v46, *((_DWORD *)dest + 6));\n      v13 = v67;\n      v11 = v39 + v43;\n      v8 += 128LL;\n      v15 = v69 + 4;\n      v10 += 4;\n      v14 += 4;\n    }\n    while ( v69 + 4 < v66 );\n    v8 = v65 + 8;\n    v10 = v64 + 32;\n    v6 = v45 + 4;\n    v5 = 8 * v4;\n    v9 = v63;\n    if ( v45 < v62 )\n      continue;\n    break;\n  }\n  if ( !v37[616] && v37[805] )\n  {\n    v71 = v87;\n    v70 = v86;\n    v72 = v88;\n    v73 = v89;\n    v74 = v90;\n    v75 = v91;\n    v76 = v92;\n    v77 = v93;\n    v79 = v95;\n    v78 = v94;\n    v81 = v97;\n    v80 = v96;\n    v83 = v99;\n    v82 = v98;\n    v85 = v101;\n    v84 = v100;\n    v40 = v39 + v43;\n    v41 = sub_445FC0((const __m128i *)&v70, v38);\n    v11 = v40;\n    *v44 += v41;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x450810L", 
            "funcEndAddr": "0x450c9aL", 
            "funcName": "sub_450810"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_450CA0@<rax>(__int64 a1@<rax>)\n{\n  unsigned int v1; // ebx\n  unsigned int v2; // ebp\n  int v3; // edx\n  __int64 v5; // [rsp-4h] [rbp-18h]\n\n  v5 = a1;\n  HIDWORD(v5) = 0;\n  v1 = sub_450810(0, (_DWORD *)&v5 + 1);\n  if ( v1 != 0x7FFFFFFF && HIDWORD(v5) != 0x7FFFFFFF )\n  {\n    v1 += sub_450810(1u, (_DWORD *)&v5 + 1);\n    if ( v1 != 0x7FFFFFFF && HIDWORD(v5) != 0x7FFFFFFF )\n    {\n      v2 = v1 + (unsigned __int64)sub_450810(2u, (_DWORD *)&v5 + 1);\n      if ( v2 == 0x7FFFFFFF || HIDWORD(v5) == 0x7FFFFFFF )\n      {\n        v1 = v2;\n      }\n      else\n      {\n        v1 = v2 + (unsigned __int64)sub_450810(3u, (_DWORD *)&v5 + 1);\n        if ( v1 != 0x7FFFFFFF && HIDWORD(v5) != 0x7FFFFFFF )\n        {\n          v3 = *((_DWORD *)dest + 805);\n          if ( v3 != 1 )\n          {\n            if ( v3 != 2 )\n              return v1;\n            return HIDWORD(v5);\n          }\n          if ( SHIDWORD(v5) < (signed int)v1\n            || !*((_DWORD *)dest + 596)\n            || !*((_DWORD *)dest + 597)\n            || !*((_DWORD *)dest + 598) )\n          {\n            return HIDWORD(v5);\n          }\n        }\n      }\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x450ca0L", 
            "funcEndAddr": "0x450d90L", 
            "funcName": "sub_450CA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_450D90(signed int a1, int a2, double a3, __m128 a4, __m128i a5)\n{\n  __int64 v5; // rcx\n  __int64 v6; // r11\n  __int64 v7; // rdx\n  __int64 v8; // rdx\n  signed __int64 v9; // rcx\n  signed int v10; // ecx\n  unsigned __int64 v11; // rsi\n  unsigned __int64 result; // rax\n  signed int v13; // er13\n  int v14; // edx\n  int v15; // eax\n  signed int v16; // ecx\n  int v17; // ecx\n  _DWORD *v18; // rax\n  signed __int64 v19; // r15\n  __int64 v20; // r12\n  int v21; // eax\n  __int64 v22; // rcx\n  _QWORD *v23; // r9\n  __int64 v24; // r8\n  __int64 v25; // r10\n  signed __int64 v26; // rbx\n  _WORD *v27; // rcx\n  __int64 v28; // rax\n  _WORD *v29; // rdi\n  _WORD *v30; // rbp\n  __int64 v31; // rax\n  _WORD *v32; // rbp\n  unsigned int v33; // [rsp+8h] [rbp-110h]\n  int v34; // [rsp+Ch] [rbp-10Ch]\n  __int64 v35; // [rsp+10h] [rbp-108h]\n  unsigned __int64 v36; // [rsp+18h] [rbp-100h]\n  signed int v37; // [rsp+20h] [rbp-F8h]\n  int v38; // [rsp+24h] [rbp-F4h]\n  __int64 v39; // [rsp+28h] [rbp-F0h]\n  int v40; // [rsp+30h] [rbp-E8h]\n  __int64 v41; // [rsp+38h] [rbp-E0h]\n  __int64 v42; // [rsp+40h] [rbp-D8h]\n  __int64 v43; // [rsp+48h] [rbp-D0h]\n  __int64 v44; // [rsp+50h] [rbp-C8h]\n  __int64 v45; // [rsp+58h] [rbp-C0h]\n  int v46; // [rsp+60h] [rbp-B8h]\n  __int64 v47; // [rsp+70h] [rbp-A8h]\n  unsigned __int64 v48; // [rsp+78h] [rbp-A0h]\n  signed int *v49; // [rsp+80h] [rbp-98h]\n  signed int *v50; // [rsp+88h] [rbp-90h]\n  unsigned __int64 v51; // [rsp+90h] [rbp-88h]\n  __int64 v52; // [rsp+98h] [rbp-80h]\n  __int64 v53; // [rsp+A0h] [rbp-78h]\n  __int64 v54; // [rsp+B8h] [rbp-60h]\n\n  LODWORD(v5) = 4;\n  if ( a1 < 5 )\n    LODWORD(v5) = a1;\n  v5 = (signed int)v5;\n  v41 = *((signed int *)dest + 2 * (signed int)v5 + 36);\n  v40 = *((_DWORD *)dest + 2 * (signed int)v5 + 37);\n  v34 = a1;\n  v6 = a1;\n  v47 = *((signed int *)dest + 2 * a1 + 36);\n  v46 = *((_DWORD *)dest + 2 * a1 + 36);\n  v43 = *((signed int *)dest + 2 * a1 + 37);\n  v7 = *((signed int *)off_49F6D0 + 3);\n  if ( *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v7 + 532) )\n    v8 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1u) + 2;\n  else\n    v8 = 0LL;\n  v39 = v8;\n  v9 = 16 * v5;\n  v50 = (signed int *)(v9 + 4LL * a2 + 4788816);\n  v42 = a2;\n  v49 = (signed int *)(v9 + 4LL * a2 + 4788736);\n  v10 = 2;\n  if ( a1 < 3 )\n    v10 = a1;\n  v37 = v10;\n  v48 = (*((_DWORD *)off_49F6D0 + 6) == 1) + 1LL;\n  v11 = 0LL;\n  v54 = a1;\n  do\n  {\n    result = v11 + v39;\n    v51 = v11 + v39;\n    if ( *((_DWORD *)qword_4F9BE0 + v11 + v39) > 0 )\n    {\n      v13 = 0;\n      v36 = v11;\n      while ( 1 )\n      {\n        v14 = *((_DWORD *)dest + 609);\n        if ( v14 == 2 )\n        {\n          v15 = *((_DWORD *)dest + 8);\n        }\n        else\n        {\n          v16 = v13;\n          if ( v13 >= 2 )\n            v16 = 1;\n          v17 = v16 + 1;\n          if ( v14 != 1 )\n            v17 *= v37;\n          v15 = *((_DWORD *)dest + 8) / v17;\n        }\n        v33 = v15;\n        v45 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8 * v11);\n        v44 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6504) + 8 * v11);\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F10 + v6) + 8 * v11) + 8LL * (signed __int16)v13)\n                  + 4 * v42) = 0;\n        if ( v40 > 0 )\n          break;\nLABEL_36:\n        v13 = (signed __int16)(v13 + 1);\n        result = v51;\n        v11 = v36;\n        if ( *((_DWORD *)qword_4F9BE0 + v51) <= v13 )\n          goto LABEL_37;\n      }\n      v35 = *v50;\n      v52 = *v49;\n      v53 = (signed int)v35 + v40;\n      while ( (signed int)v41 <= 0 )\n      {\nLABEL_35:\n        v35 += v43;\n        if ( v35 >= v53 )\n          goto LABEL_36;\n      }\n      v18 = off_49F6D0;\n      v19 = (signed int)v35 + (signed __int64)*((signed int *)off_49F6D0 + 37);\n      v20 = v52;\n      while ( 1 )\n      {\n        v38 = v18[36];\n        v21 = sub_44DC60((signed __int16)v13, v36, 4 * (signed int)v20, 4 * (signed int)v35, v34, v33, a3, a4, a5);\n        v6 = v54;\n        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9F10 + v54) + 8 * v36) + 8LL * (signed __int16)v13);\n        *(_DWORD *)(v22 + 4 * v42) += v21;\n        if ( (signed int)v43 > 0 )\n          break;\nLABEL_34:\n        v20 += v47;\n        if ( v20 >= v52 + v41 )\n          goto LABEL_35;\n        v18 = off_49F6D0;\n      }\n      v23 = off_49F6D0;\n      v24 = (signed int)v20 + v38;\n      v25 = 0LL;\n      while ( 1 )\n      {\n        if ( (signed int)v47 > 0 )\n        {\n          v26 = v25 + v19;\n          v27 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23[8991] + 8 * v20) + 8 * v35) + 8 * v36)\n                                      + 8LL * (signed __int16)v13)\n                          + 8 * v54);\n          if ( v46 == 1 )\n          {\n            v28 = 0LL;\n            if ( !(v47 & 1) )\n              goto LABEL_33;\n          }\n          else\n          {\n            v28 = 0LL;\n            do\n            {\n              v29 = *(_WORD **)(*(_QWORD *)(v44 + 8 * v24 + 8 * v28) + 8 * v26);\n              *v29 = *v27;\n              v29[1] = v27[1];\n              *(_WORD *)(*(_QWORD *)(v45 + 8 * v24 + 8 * v28) + 2 * v26) = v13;\n              v30 = *(_WORD **)(*(_QWORD *)(v44 + 8 + 8 * v24 + 8 * v28) + 8 * v26);\n              *v30 = *v27;\n              v30[1] = v27[1];\n              *(_WORD *)(*(_QWORD *)(v45 + 8 + 8 * v24 + 8 * v28) + 2 * v26) = v13;\n              v28 += 2LL;\n            }\n            while ( (unsigned int)v47 - (unsigned __int64)(v47 & 1) != v28 );\n            if ( !(v47 & 1) )\n              goto LABEL_33;\n          }\n          v31 = v24 + v28;\n          v32 = *(_WORD **)(*(_QWORD *)(v44 + 8 * v31) + 8 * v26);\n          *v32 = *v27;\n          v32[1] = v27[1];\n          *(_WORD *)(*(_QWORD *)(v45 + 8 * v31) + 2 * v26) = v13;\n        }\nLABEL_33:\n        if ( ++v25 == (unsigned int)v43 )\n          goto LABEL_34;\n      }\n    }\nLABEL_37:\n    ++v11;\n  }\n  while ( v11 < v48 );\n  return result;\n}\n", 
            "funcStartAddr": "0x450d90L", 
            "funcEndAddr": "0x451271L", 
            "funcName": "sub_450D90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_451280()\n{\n  _DWORD *v0; // r15\n  __int64 v1; // r12\n  __int64 v2; // rbp\n  int v3; // er14\n  __int64 *v4; // rcx\n  char *v5; // rdx\n  char *v6; // rsi\n  __int64 *v7; // rax\n  __int64 v8; // r15\n  bool v9; // zf\n  unsigned int v10; // er8\n  int v11; // er8\n  int v12; // er12\n  int v13; // edi\n  int v14; // edi\n  __int64 *v15; // r13\n  int v16; // er10\n  int v17; // edx\n  int v18; // eax\n  int v19; // esi\n  __int64 v20; // rbx\n  __int64 v21; // rbp\n  _QWORD *v22; // rdi\n  __int64 v23; // rcx\n  __int64 v24; // r9\n  __int64 v25; // r10\n  __int64 v26; // r12\n  __int64 v27; // rdx\n  __int64 v28; // r11\n  __int64 v29; // rcx\n  _BOOL8 v30; // r8\n  int v31; // eax\n  signed __int16 v32; // si\n  _DWORD *v33; // rbx\n  __int64 v34; // r15\n  signed __int16 v35; // dx\n  signed __int16 v36; // cx\n  _DWORD ****v37; // rax\n  int v38; // edx\n  signed __int16 *v39; // rcx\n  __int16 v40; // ax\n  __int64 v41; // rdx\n  _WORD *v42; // rsi\n  _WORD **v43; // rax\n  _WORD *v44; // rsi\n  __int64 v45; // rsi\n  _WORD *v46; // rdi\n  int v47; // edx\n  __int64 result; // rax\n  int v49; // edi\n  int v50; // edx\n  int v51; // esi\n  int v52; // esi\n  int v53; // edx\n  int v54; // eax\n  int v55; // eax\n  int v56; // eax\n  signed __int16 v57; // cx\n  signed __int16 v58; // bx\n  __int16 v59; // cx\n  __int16 v60; // bp\n  signed __int16 v61; // cx\n  signed __int16 v62; // di\n  __int16 v63; // cx\n  __int16 v64; // bx\n  int v65; // ecx\n  int v66; // esi\n  int v67; // eax\n  signed __int64 v68; // r10\n  __int64 v69; // rdx\n  __int64 v70; // rsi\n  __int64 v71; // r15\n  __int64 v72; // r14\n  int v73; // er8\n  __int64 v74; // r13\n  _WORD *v75; // rdi\n  __int16 v76; // ax\n  signed __int16 v77; // r12\n  _QWORD *v78; // rcx\n  __int16 v79; // di\n  __int64 v80; // rax\n  _QWORD *v81; // rdi\n  __int64 v82; // r9\n  signed __int64 v83; // rcx\n  _WORD *v84; // rcx\n  __int64 v85; // rax\n  int v86; // ecx\n  int v87; // ecx\n  int v88; // [rsp+8h] [rbp-120h]\n  int v89; // [rsp+Ch] [rbp-11Ch]\n  __int64 v90; // [rsp+10h] [rbp-118h]\n  __int64 v91; // [rsp+18h] [rbp-110h]\n  int v92; // [rsp+20h] [rbp-108h]\n  int v93; // [rsp+24h] [rbp-104h]\n  int v94; // [rsp+30h] [rbp-F8h]\n  int v95; // [rsp+34h] [rbp-F4h]\n  int v96; // [rsp+38h] [rbp-F0h]\n  int v97; // [rsp+3Ch] [rbp-ECh]\n  int v98; // [rsp+48h] [rbp-E0h]\n  int v99; // [rsp+4Ch] [rbp-DCh]\n  int v100; // [rsp+50h] [rbp-D8h]\n  int v101; // [rsp+54h] [rbp-D4h]\n  int v102; // [rsp+60h] [rbp-C8h]\n  int v103; // [rsp+64h] [rbp-C4h]\n  int v104; // [rsp+68h] [rbp-C0h]\n  int v105; // [rsp+6Ch] [rbp-BCh]\n  int v106; // [rsp+78h] [rbp-B0h]\n  int v107; // [rsp+7Ch] [rbp-ACh]\n  unsigned __int64 v108; // [rsp+80h] [rbp-A8h]\n  __int64 *v109; // [rsp+88h] [rbp-A0h]\n  __int64 v110; // [rsp+90h] [rbp-98h]\n  __int64 v111; // [rsp+98h] [rbp-90h]\n  __int64 v112; // [rsp+A0h] [rbp-88h]\n  __int64 v113; // [rsp+A8h] [rbp-80h]\n  __int64 v114; // [rsp+B0h] [rbp-78h]\n  __int64 v115; // [rsp+B8h] [rbp-70h]\n  __int64 v116; // [rsp+C0h] [rbp-68h]\n  __int64 v117; // [rsp+C8h] [rbp-60h]\n  __int64 v118; // [rsp+D0h] [rbp-58h]\n  __int64 v119; // [rsp+D8h] [rbp-50h]\n  __int64 v120; // [rsp+E0h] [rbp-48h]\n  __int64 v121; // [rsp+E8h] [rbp-40h]\n  char *v122; // [rsp+F0h] [rbp-38h]\n\n  v0 = off_49F6D0;\n  v91 = *((_QWORD *)off_49F6D0 + 8991);\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  v3 = *((_DWORD *)off_49F6D0 + 18100);\n  if ( !v3 || !*(_DWORD *)(v1 + 632 * v2 + 532) )\n  {\n    v6 = (char *)qword_49FE00 + 1624;\n    v4 = (__int64 *)((char *)qword_49FE00 + 1616);\n    v5 = (char *)qword_49FE00 + 1600;\n    v7 = (__int64 *)((char *)qword_49FE00 + 1608);\n    if ( !*((_DWORD *)off_49F6D0 + 17999) )\n      goto LABEL_22;\n    goto LABEL_7;\n  }\n  if ( v2 & 1 )\n  {\n    v4 = (__int64 *)((char *)qword_49FE00 + 4848);\n    v5 = (char *)qword_49FE00 + 4832;\n    v6 = (char *)qword_49FE00 + 4856;\n    v7 = (__int64 *)((char *)qword_49FE00 + 4840);\n    if ( !*((_DWORD *)off_49F6D0 + 17999) )\n      goto LABEL_22;\nLABEL_7:\n    v8 = *(_QWORD *)v6;\n    v89 = 0;\n    v88 = 0;\n    sub_437270(v2, 0, 0, -1, 0, &v104);\n    sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, 0, 0, -1, &v100);\n    sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, 0, 16, -1, &v92);\n    sub_437270(*((_DWORD *)off_49F6D0 + 3), 0, 0, -1, -1, &v96);\n    if ( !*((_DWORD *)off_49F6D0 + 18100) )\n    {\n      LOWORD(v1) = -1;\n      LOWORD(v10) = -1;\n      if ( v104 )\n        LOWORD(v10) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v106) + 2LL * v107);\n      if ( v100 )\n        LOWORD(v1) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v102) + 2LL * v103);\n      if ( v96 )\n        LOWORD(v14) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v98) + 2LL * v99);\n      else\n        LOWORD(v14) = -1;\n      if ( v92 )\n        LOWORD(v14) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v94) + 2LL * v95);\n      LOWORD(v50) = -1;\n      LOWORD(v51) = -1;\n      if ( v104 )\n        LOWORD(v51) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v106)\n                               + 2LL * v107);\n      if ( v100 )\n        LOWORD(v50) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v102)\n                               + 2LL * v103);\n      if ( v96 )\n      {\n        LOWORD(v55) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v98) + 2LL * v99);\n        if ( !v92 )\n          goto LABEL_87;\n      }\n      else\n      {\n        LOWORD(v55) = -1;\n        if ( !v92 )\n          goto LABEL_87;\n      }\n      LOWORD(v55) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v94) + 2LL * v95);\n      goto LABEL_87;\n    }\n    v9 = *(_DWORD *)(v1 + 632 * v2 + 532) == 0;\n    LOWORD(v1) = -1;\n    LOWORD(v10) = -1;\n    if ( v9 )\n    {\n      if ( v104 )\n      {\n        v10 = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v106) + 2LL * v107);\n        LOWORD(v10) = (signed __int16)v10 >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v105 + 532) != 0) | (v10 >> 15));\n      }\n      if ( v100 )\n      {\n        LODWORD(v1) = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v102) + 2LL * v103);\n        LOWORD(v1) = (signed __int16)v1 >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v101 + 532) != 0) | ((unsigned int)v1 >> 15));\n      }\n      if ( v96 )\n        LOWORD(v14) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v98) + 2LL * v99) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v97 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v98) + 2LL * v99) >> 15));\n      else\n        LOWORD(v14) = -1;\n      if ( v92 )\n        LOWORD(v14) = *(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v94) + 2LL * v95) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v93 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v94) + 2LL * v95) >> 15));\n      LOWORD(v50) = -1;\n      LOWORD(v51) = -1;\n      if ( v104 )\n        LOWORD(v51) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v106)\n                               + 2LL * v107) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v105 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v106) + 2LL * v107) >> 15));\n      if ( v100 )\n        LOWORD(v50) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v102)\n                               + 2LL * v103) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v101 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v102) + 2LL * v103) >> 15));\n      if ( v96 )\n      {\n        LOWORD(v55) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v98) + 2LL * v99) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v97 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v98) + 2LL * v99) >> 15));\n        if ( !v92 )\n          goto LABEL_87;\n      }\n      else\n      {\n        LOWORD(v55) = -1;\n        if ( !v92 )\n          goto LABEL_87;\n      }\n      LOWORD(v55) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v94) + 2LL * v95) >> ((*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v93 + 532) != 0) | ((unsigned int)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v94) + 2LL * v95) >> 15));\n      goto LABEL_87;\n    }\n    if ( v104 )\n    {\n      v11 = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v106) + 2LL * v107);\n      v10 = v11 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v105 + 532) == 0 && (v11 & 0x8000u) == 0);\n    }\n    if ( v100 )\n    {\n      v12 = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v102) + 2LL * v103);\n      LODWORD(v1) = v12 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v101 + 532) == 0 && (v12 & 0x8000u) == 0);\n    }\n    if ( v96 )\n    {\n      v13 = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v98) + 2LL * v99);\n      v14 = v13 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v97 + 532) == 0 && (v13 & 0x8000u) == 0);\n    }\n    else\n    {\n      LOWORD(v14) = -1;\n    }\n    if ( v92 )\n    {\n      v49 = *(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8LL * v94) + 2LL * v95);\n      v14 = v49 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v93 + 532) == 0 && (v49 & 0x8000u) == 0);\n    }\n    LOWORD(v50) = -1;\n    LOWORD(v51) = -1;\n    if ( v104 )\n    {\n      v52 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v106)\n                                + 2LL * v107);\n      v51 = v52 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v105 + 532) == 0 && (v52 & 0x8000u) == 0);\n    }\n    if ( v100 )\n    {\n      v53 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v102)\n                                + 2LL * v103);\n      v50 = v53 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v101 + 532) == 0 && (v53 & 0x8000u) == 0);\n    }\n    if ( v96 )\n    {\n      v54 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v98)\n                                + 2LL * v99);\n      v55 = v54 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v97 + 532) == 0 && (v54 & 0x8000u) == 0);\n      if ( !v92 )\n        goto LABEL_87;\n    }\n    else\n    {\n      LOWORD(v55) = -1;\n      if ( !v92 )\n      {\nLABEL_87:\n        v57 = v1;\n        if ( (signed __int16)v10 <= (signed __int16)v1 )\n          v57 = v10;\n        v58 = v1;\n        if ( (signed __int16)v10 >= (signed __int16)v1 )\n          v58 = v10;\n        if ( ((v10 | v1) & 0x8000u) == 0LL )\n          v58 = v57;\n        v59 = v14;\n        if ( v58 <= (signed __int16)v14 )\n          v59 = v58;\n        v60 = v14;\n        if ( v58 >= (signed __int16)v14 )\n          v60 = v58;\n        if ( ((v14 | v58) & 0x8000u) == 0 )\n          v60 = v59;\n        v61 = v50;\n        if ( (signed __int16)v51 <= (signed __int16)v50 )\n          v61 = v51;\n        v62 = v50;\n        if ( (signed __int16)v51 >= (signed __int16)v50 )\n          v62 = v51;\n        if ( ((v51 | v50) & 0x8000u) == 0 )\n          v62 = v61;\n        v63 = v55;\n        if ( v62 <= (signed __int16)v55 )\n          v63 = v62;\n        v64 = v55;\n        if ( v62 >= (signed __int16)v55 )\n          v64 = v62;\n        if ( ((v55 | v62) & 0x8000u) == 0 )\n          v64 = v63;\n        if ( v60 >= 0 )\n          sub_444450(\n            (__int64)&v89,\n            *(_QWORD *)(qword_4F9E30 + 6480),\n            *(_QWORD *)(qword_4F9E30 + 6504),\n            v60,\n            0,\n            0,\n            0,\n            16,\n            16);\n        if ( v64 < 0 )\n        {\n          LODWORD(v114) = 0;\n          LODWORD(v110) = 0;\n        }\n        else\n        {\n          sub_444450(\n            (__int64)&v88,\n            *(_QWORD *)(qword_4F9E30 + 6480),\n            *(_QWORD *)(qword_4F9E30 + 6504),\n            v64,\n            1,\n            0,\n            0,\n            16,\n            16);\n          LODWORD(v110) = (unsigned __int16)v88;\n          LODWORD(v114) = HIWORD(v88);\n        }\n        LOWORD(v90) = HIWORD(v89);\n        LOWORD(v118) = v89;\n        v117 = v60;\n        v116 = v64;\n        v65 = *((_DWORD *)off_49F6D0 + 38);\n        v66 = *((_DWORD *)off_49F6D0 + 43);\n        v67 = *((_DWORD *)off_49F6D0 + 42);\n        v112 = (unsigned int)(*((_DWORD *)off_49F6D0 + 39) >> 2);\n        v108 = (unsigned int)(v66 >> 2);\n        v113 = v8 + 8LL * (v67 >> 2);\n        v119 = (unsigned int)(v65 >> 2);\n        v115 = (signed int)v119;\n        v68 = 8LL * (signed int)v119;\n        v69 = 0LL;\n        while ( 1 )\n        {\n          v70 = (signed int)v112 + (signed int)v69;\n          v109 = (__int64 *)((signed int)v108 + (signed int)v69);\n          v71 = v115;\n          v72 = 0LL;\n          v73 = 0;\n          v111 = v69;\n          do\n          {\n            if ( v60 < 0 )\n            {\n              v74 = *(_QWORD *)(*(_QWORD *)(v91 + v72) + 8 * v69);\n              v75 = ***(_WORD ****)v74;\n              *v75 = 0;\n              v77 = -1;\n              v76 = 0;\n            }\n            else if ( v60 || *((_BYTE *)v109 + *(_QWORD *)(v113 + v72)) )\n            {\n              v74 = *(_QWORD *)(*(_QWORD *)(v91 + v72) + 8 * v69);\n              v75 = **(_WORD ***)(*(_QWORD *)v74 + 8 * v117);\n              *v75 = v118;\n              v76 = v90;\n              v77 = v60;\n            }\n            else\n            {\n              v74 = *(_QWORD *)(*(_QWORD *)(v91 + v72) + 8 * v69);\n              v75 = ***(_WORD ****)v74;\n              *v75 = 0;\n              v76 = 0;\n              v77 = 0;\n            }\n            v75[1] = v76;\n            LODWORD(v80) = v119 + v73;\n            v81 = qword_4F9E08;\n            v82 = *(_QWORD *)qword_4F9E08;\n            v83 = *(_QWORD *)qword_4F9E08 + v68;\n            *(_WORD *)(*(_QWORD *)(v72 + v83) + 2 * v70) = v77;\n            if ( v64 < 0 )\n            {\n              v85 = *(_QWORD *)(v72 + v68 + v81[1]);\n              *(_WORD *)(v85 + 2 * v70) = -1;\n              ****(_DWORD ****)(v74 + 8) = 0;\n              if ( v60 < 0 )\n              {\n                *(_WORD *)(v85 + 2 * v70) = 0;\n                *(_WORD *)(*(_QWORD *)(v72 + v83) + 2 * v70) = 0;\n              }\n              v86 = *(unsigned __int16 *)(v85 + 2 * v70);\n              v80 = v71;\n              v69 = v111;\n              if ( v86 == 0xFFFF )\n              {\n                result = *(_QWORD *)((char *)qword_4F9E00 + v68 + v72);\n                *(_WORD *)(result + 2 * v70) = 0;\n                goto LABEL_137;\n              }\n            }\n            else\n            {\n              if ( v64 || *((_BYTE *)v109 + *(_QWORD *)(v113 + v72)) )\n              {\n                v84 = **(_WORD ***)(*(_QWORD *)(v74 + 8) + 8 * v116);\n                *v84 = v110;\n                v84[1] = v114;\n                v80 = (signed int)v80;\n                v78 = (_QWORD *)(v81[1] + 8LL * (signed int)v80);\n                v79 = v64;\n              }\n              else\n              {\n                ****(_DWORD ****)(v74 + 8) = 0;\n                v78 = (_QWORD *)(v72 + v68 + v81[1]);\n                v79 = 0;\n                v80 = v71;\n              }\n              v69 = v111;\n              *(_WORD *)(*v78 + 2 * v70) = v79;\n            }\n            v87 = *(unsigned __int16 *)(*(_QWORD *)(v82 + 8 * v80) + 2 * v70);\n            result = *((_QWORD *)qword_4F9E00 + v80);\n            if ( v87 == 0xFFFF )\n              *(_WORD *)(result + 2 * v70) = 1;\n            else\n              *(_WORD *)(result + 2 * v70) = 2;\nLABEL_137:\n            ++v73;\n            v72 += 8LL;\n            ++v71;\n          }\n          while ( v72 != 32 );\n          if ( ++v69 == 4 )\n            return result;\n        }\n      }\n    }\n    v56 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL) + 8LL * v94) + 2LL * v95);\n    v55 = v56 << (*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * v93 + 532) == 0 && (v56 & 0x8000u) == 0);\n    goto LABEL_87;\n  }\n  v4 = (__int64 *)((char *)qword_49FE00 + 3232);\n  v5 = (char *)qword_49FE00 + 3216;\n  v6 = (char *)qword_49FE00 + 3240;\n  v7 = (__int64 *)((char *)qword_49FE00 + 3224);\n  if ( *((_DWORD *)off_49F6D0 + 17999) )\n    goto LABEL_7;\nLABEL_22:\n  v114 = *v7;\n  v15 = *(__int64 **)v5;\n  v115 = *v4;\n  v16 = *((_DWORD *)off_49F6D0 + 39) >> 2;\n  v17 = *((_DWORD *)off_49F6D0 + 43) >> 2;\n  v18 = *((_DWORD *)off_49F6D0 + 38) >> 2;\n  v19 = *((_DWORD *)off_49F6D0 + 42) >> 2;\n  v20 = *v15;\n  v117 = v1 + 632 * v2 + 532;\n  v116 = 2 * (unsigned int)(v2 & 1) + 2;\n  v21 = v19;\n  v111 = v18;\n  v121 = v17;\n  v120 = v16;\n  v119 = *(_QWORD *)qword_4F9E08;\n  v118 = *((_QWORD *)qword_4F9E08 + 1);\n  v22 = qword_4F9E00;\n  v122 = (char *)off_49F6D0 + 72016;\n  v113 = qword_4F9E30 + 24;\n  v23 = 0LL;\n  v110 = v20;\n  v109 = v15;\n  v112 = v19;\n  v108 = (unsigned __int64)qword_4F9E00;\n  do\n  {\n    v24 = v23 + v120;\n    v90 = v23;\n    v25 = v23 + v121;\n    v26 = 0LL;\n    do\n    {\n      if ( v3 )\n      {\n        v27 = v116;\n        if ( !*(_DWORD *)v117 )\n          v27 = 0LL;\n      }\n      else\n      {\n        v27 = 0LL;\n      }\n      v28 = v26 + v111;\n      v29 = v26 + v21;\n      v30 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * (v26 + v21)) + 2 * v25) == 0xFFFF;\n      if ( *(unsigned __int16 *)(*(_QWORD *)(v15[v30] + 8 * (v26 + v21)) + 2 * v25) == 0xFFFF )\n      {\n        v37 = *(_DWORD *****)(*(_QWORD *)(v91 + 8 * v26) + 8 * v90);\n        ****v37 = 0;\n        ***v37[1] = 0;\n        v36 = 2;\n        v32 = 0;\n        v35 = 0;\n      }\n      else\n      {\n        v31 = *((_DWORD *)qword_4F9BE0 + v27);\n        if ( v0[18000] <= v31 )\n          v31 = v0[18000];\n        v32 = -1;\n        if ( v31 <= 0 )\n        {\n          v35 = -1;\n          v36 = -1;\n        }\n        else\n        {\n          v33 = v0;\n          v34 = 0LL;\n          while ( *(_QWORD *)(v113 + 264 * v27 + 8 * v34) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 8 * v30)\n                                                                                   + 8 * v29)\n                                                                       + 8 * v25) )\n          {\n            if ( ++v34 >= v31 )\n            {\n              v35 = -1;\n              v36 = -1;\n              v0 = v33;\n              v15 = v109;\n              v20 = v110;\n              v22 = (_QWORD *)v108;\n              goto LABEL_43;\n            }\n          }\n          v38 = *(_DWORD *)&v122[60 * v27 + 4 * v34];\n          v39 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(v115 + 8 * v30) + 8 * v29) + 8 * v25);\n          v40 = *v39;\n          if ( v38 == 9999 )\n          {\n            v41 = *(_QWORD *)(*(_QWORD *)(v91 + 8 * v26) + 8 * v90);\n            v42 = ***(_WORD ****)v41;\n            *v42 = v40;\n            v42[1] = v39[1];\n            v43 = **(_WORD ****)(v41 + 8);\n            v44 = *v43;\n            **v43 = 0;\n            LOWORD(v39) = 0;\n          }\n          else\n          {\n            v45 = *(_QWORD *)(*(_QWORD *)(v91 + 8 * v26) + 8 * v90);\n            v46 = **(_WORD ***)(*(_QWORD *)v45 + 8 * v34);\n            *v46 = (unsigned int)(v38 * v40 + 128) >> 8;\n            v46[1] = (unsigned int)(v38 * v39[1] + 128) >> 8;\n            v47 = v38 - 256;\n            v44 = ***(_WORD ****)(v45 + 8);\n            *v44 = (unsigned int)(v47 * *v39 + 128) >> 8;\n            LODWORD(v39) = (unsigned int)(v47 * v39[1] + 128) >> 8;\n          }\n          v22 = (_QWORD *)v108;\n          v44[1] = (_WORD)v39;\n          v36 = 2;\n          v35 = 0;\n          v32 = v34;\n          v0 = v33;\n          v15 = v109;\n          v20 = v110;\nLABEL_43:\n          v21 = v112;\n        }\n      }\n      *(_WORD *)(*(_QWORD *)(v119 + 8 * v28) + 2 * v24) = v32;\n      *(_WORD *)(*(_QWORD *)(v118 + 8 * v28) + 2 * v24) = v35;\n      result = v22[v28];\n      *(_WORD *)(result + 2 * v24) = v36;\n      ++v26;\n    }\n    while ( v26 != 4 );\n    v23 = v90 + 1;\n  }\n  while ( v90 != 3 );\n  return result;\n}\n", 
            "funcStartAddr": "0x451280L", 
            "funcEndAddr": "0x452338L", 
            "funcName": "sub_451280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_452340(unsigned int a1, int a2)\n{\n  unsigned int v2; // ecx\n  __int64 result; // rax\n\n  v2 = -a1;\n  if ( (signed int)-a1 < 1 )\n    v2 = a1;\n  result = -v2;\n  if ( a2 >= 0 )\n    result = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x452340L", 
            "funcEndAddr": "0x452351L", 
            "funcName": "sub_452340"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_452360(signed int *a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rcx\n  __int64 v3; // rdx\n\n  result = ((unsigned __int8)(2 * *((_BYTE *)a1 + 8)) | 1u) << (a1[1] - 1);\n  v2 = *((_QWORD *)a1 + 4);\n  v3 = *a1;\n  *a1 = v3 + 1;\n  *(_BYTE *)(v2 + v3) = result;\n  a1[1] = 8;\n  *((_BYTE *)a1 + 8) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x452360L", 
            "funcEndAddr": "0x45238dL", 
            "funcName": "sub_452360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_452390(__int64 a1, unsigned int a2, int a3, int a4)\n{\n  __int64 result; // rax\n  _BYTE *v5; // r9\n  unsigned __int64 v6; // rbp\n  unsigned __int64 v7; // r10\n  unsigned __int64 v8; // r11\n  unsigned __int64 v9; // rbx\n  __int64 v10; // r14\n  __int64 v11; // rbx\n  char *v12; // r15\n  signed __int64 v13; // r12\n  signed __int64 v14; // r13\n  __int128 v15; // xmm1\n  __int128 v16; // xmm1\n  __int128 v17; // xmm1\n  __int128 v18; // xmm1\n  signed __int64 v19; // rbx\n  __int64 v20; // r14\n  __int128 v21; // xmm1\n  unsigned __int64 v22; // r10\n  signed __int64 v23; // rbx\n  unsigned __int64 v24; // r10\n  signed __int64 v25; // r9\n  signed __int64 v26; // rbp\n  __int64 v27; // rbx\n  signed __int64 v28; // r8\n  _BYTE *v29; // rdx\n  signed int v30; // ebx\n  __int64 v31; // rcx\n\n  result = a2;\n  if ( (signed int)a2 >= a3 )\n    goto LABEL_29;\n  v5 = qword_4A0060;\n  v6 = (signed int)a2;\n  v7 = a3 - (signed __int64)(signed int)a2;\n  if ( v7 < 0x20\n    || (unsigned __int64)qword_4A0060 + (signed int)a2 < a1 + a3\n    && a1 + (signed int)a2 < (unsigned __int64)qword_4A0060 + a3 )\n  {\n    goto LABEL_15;\n  }\n  v8 = v7 & 0xFFFFFFFFFFFFFFE0LL;\n  v9 = ((v7 & 0xFFFFFFFFFFFFFFE0LL) - 32) >> 5;\n  v10 = ((_BYTE)v9 + 1) & 3;\n  if ( (v7 & 0xFFFFFFFFFFFFFFE0LL) - 32 < 0x60 )\n  {\n    v11 = 0LL;\n    if ( !v10 )\n      goto LABEL_13;\n    goto LABEL_11;\n  }\n  v12 = (char *)qword_4A0060 + (signed int)a2 + 112;\n  v13 = a1 + (signed int)a2 + 112;\n  v14 = v10 - 1 - v9;\n  v11 = 0LL;\n  do\n  {\n    v15 = *(_OWORD *)(v13 + v11 - 96);\n    *(_OWORD *)&v5[(signed int)a2 + v11] = *(_OWORD *)(a1 + (signed int)a2 + v11);\n    *(_OWORD *)&v12[v11 - 96] = v15;\n    v16 = *(_OWORD *)(v13 + v11 - 64);\n    *(_OWORD *)&v12[v11 - 80] = *(_OWORD *)(v13 + v11 - 80);\n    *(_OWORD *)&v12[v11 - 64] = v16;\n    v17 = *(_OWORD *)(v13 + v11 - 32);\n    *(_OWORD *)&v12[v11 - 48] = *(_OWORD *)(v13 + v11 - 48);\n    *(_OWORD *)&v12[v11 - 32] = v17;\n    v18 = *(_OWORD *)(v13 + v11);\n    *(_OWORD *)&v12[v11 - 16] = *(_OWORD *)(v13 + v11 - 16);\n    *(_OWORD *)&v12[v11] = v18;\n    v11 += 128LL;\n    v14 += 4LL;\n  }\n  while ( v14 );\n  if ( v10 )\n  {\nLABEL_11:\n    v19 = (signed int)a2 + v11 + 16;\n    v20 = -v10;\n    do\n    {\n      v21 = *(_OWORD *)(a1 + v19);\n      *(_OWORD *)&v5[v19 - 16] = *(_OWORD *)(a1 + v19 - 16);\n      *(_OWORD *)&v5[v19] = v21;\n      v19 += 32LL;\n      ++v20;\n    }\n    while ( v20 );\n  }\nLABEL_13:\n  if ( v7 != v8 )\n  {\n    v6 = v8 + (signed int)a2;\nLABEL_15:\n    v22 = a3 - 1LL - v6;\n    if ( ((_BYTE)a3 - (_BYTE)v6) & 3 )\n    {\n      v23 = -(signed __int64)(((_BYTE)a3 - (_BYTE)v6) & 3);\n      do\n      {\n        v5[v6] = *(_BYTE *)(a1 + v6);\n        ++v6;\n        ++v23;\n      }\n      while ( v23 );\n    }\n    if ( v22 >= 3 )\n    {\n      v24 = a3 - v6;\n      v25 = (signed __int64)&v5[v6 + 3];\n      v26 = a1 + v6 + 3;\n      v27 = 0LL;\n      do\n      {\n        *(_BYTE *)(v25 + v27 - 3) = *(_BYTE *)(v26 + v27 - 3);\n        *(_BYTE *)(v25 + v27 - 2) = *(_BYTE *)(v26 + v27 - 2);\n        *(_BYTE *)(v25 + v27 - 1) = *(_BYTE *)(v26 + v27 - 1);\n        *(_BYTE *)(v25 + v27) = *(_BYTE *)(v26 + v27);\n        v27 += 4LL;\n      }\n      while ( v24 != v27 );\n    }\n  }\n  result = a2;\n  if ( (signed int)a2 < a3 )\n  {\n    v28 = a3 - (signed __int64)(signed int)a2;\n    v29 = (char *)qword_4A0060 + (signed int)a2;\n    v30 = 0;\n    LODWORD(result) = a2;\n    do\n    {\n      if ( v30 == 2 )\n      {\n        v30 = 2;\n        if ( *v29 <= 3u )\n        {\n          result = (signed int)result;\n          *(_BYTE *)(a1 + result) = 3;\n          LODWORD(result) = result + 1;\n          v30 = 0;\n        }\n      }\n      *(_BYTE *)(a1 + (signed int)result) = *v29;\n      ++v30;\n      if ( *v29 )\n        v30 = 0;\n      result = (unsigned int)(result + 1);\n      ++v29;\n      --v28;\n    }\n    while ( v28 );\n  }\nLABEL_29:\n  LODWORD(v31) = a2 + a4;\n  if ( (signed int)result < (signed int)v31 )\n  {\n    result = (signed int)result;\n    v31 = (signed int)v31;\n    do\n    {\n      *(_WORD *)(a1 + result) = 0;\n      *(_BYTE *)(a1 + result + 2) = 3;\n      *((_DWORD *)off_49F6D8 + *((signed int *)off_49F6D0 + 6) + 332) += 16;\n      result += 3LL;\n    }\n    while ( result < v31 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x452390L", 
            "funcEndAddr": "0x4525f9L", 
            "funcName": "sub_452390"
        }, 
        {
            "decompiledFuncCode": "void *sub_452600()\n{\n  int v0; // ebx\n  void *result; // rax\n\n  v0 = 4\n     * (*((_DWORD *)dest + 16) + *((_DWORD *)off_49F6D0 + 18182))\n     * (*((_DWORD *)dest + 17) + *((_DWORD *)off_49F6D0 + 18183));\n  if ( qword_4A0060 )\n  {\n    free(qword_4A0060);\n    qword_4A0060 = 0LL;\n  }\n  result = calloc(v0, 1uLL);\n  qword_4A0060 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x452600L", 
            "funcEndAddr": "0x452659L", 
            "funcName": "sub_452600"
        }, 
        {
            "decompiledFuncCode": "void sub_452660()\n{\n  if ( qword_4A0060 )\n  {\n    free(qword_4A0060);\n    qword_4A0060 = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x452660L", 
            "funcEndAddr": "0x452682L", 
            "funcName": "sub_452660"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_452690@<rax>(void *src@<rdi>, int a2@<edx>, int a3@<ecx>, __int64 a4@<rsi>, int a5@<r8d>, int a6@<r9d>, int a7)\n{\n  int v7; // er14\n  int v8; // ebp\n  __int64 result; // rax\n\n  *(_DWORD *)(a4 + 20) = 0;\n  *(_DWORD *)(a4 + 16) = a5;\n  *(_DWORD *)(a4 + 12) = a3;\n  *(_DWORD *)a4 = 4 - ((unsigned int)a7 < 1);\n  **(_BYTE **)(a4 + 24) = a3 | 32 * a5;\n  v7 = a6;\n  v8 = a2;\n  memcpy((void *)(*(_QWORD *)(a4 + 24) + 1LL), src, a2);\n  result = (unsigned int)sub_452390(*(_QWORD *)(a4 + 24) + 1LL, 0, v8, v7) + 1;\n  *(_DWORD *)(a4 + 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x452690L", 
            "funcEndAddr": "0x4526fdL", 
            "funcName": "sub_452690"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_452700(int a1)\n{\n  _DWORD *v1; // rax\n  _DWORD *v2; // rbx\n  void *v3; // rax\n\n  v1 = calloc(1uLL, 0x20uLL);\n  v2 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"AllocNALU: n\");\n  v1[2] = a1;\n  v3 = calloc(a1, 1uLL);\n  *((_QWORD *)v2 + 3) = v3;\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"AllocNALU: n->buf\");\n  return v2;\n}\n", 
            "funcStartAddr": "0x452700L", 
            "funcEndAddr": "0x452753L", 
            "funcName": "sub_452700"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_452760(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = (void *)*((_QWORD *)ptr + 3);\n    if ( v2 )\n      free(v2);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x452760L", 
            "funcEndAddr": "0x452782L", 
            "funcName": "sub_452760"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_452790()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x452790L", 
            "funcEndAddr": "0x452793L", 
            "funcName": "sub_452790"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4527A0(__int64 a1, char *a2, int a3, int a4, signed __int64 a5, int a6, int a7, int a8, int a9)\n{\n  int v9; // er14\n  char *v10; // rbx\n  int v11; // esi\n  int v12; // er13\n  int v13; // ebp\n  unsigned __int64 result; // rax\n  int v15; // er14\n  signed __int64 v16; // rdi\n  signed __int64 v17; // rsi\n  __int64 v18; // r14\n  signed __int64 v19; // rbx\n  int v20; // ebp\n  __int64 v21; // rcx\n  int v22; // er13\n  int v23; // ebx\n  int v24; // er15\n  int v25; // ebp\n  __int64 v26; // r14\n  __int64 v27; // [rsp+8h] [rbp-C0h]\n  char *v28; // [rsp+10h] [rbp-B8h]\n  size_t n; // [rsp+18h] [rbp-B0h]\n  int v30; // [rsp+2Ch] [rbp-9Ch]\n  int v31; // [rsp+30h] [rbp-98h]\n  int v32; // [rsp+38h] [rbp-90h]\n  int v33; // [rsp+40h] [rbp-88h]\n  int v34; // [rsp+48h] [rbp-80h]\n  int v35; // [rsp+4Ch] [rbp-7Ch]\n  int v36; // [rsp+50h] [rbp-78h]\n  int v37; // [rsp+54h] [rbp-74h]\n  signed __int64 v38; // [rsp+60h] [rbp-68h]\n  unsigned __int64 v39; // [rsp+78h] [rbp-50h]\n  __int64 v40; // [rsp+80h] [rbp-48h]\n  signed __int64 v41; // [rsp+88h] [rbp-40h]\n  signed __int64 v42; // [rsp+90h] [rbp-38h]\n\n  v9 = a4;\n  v10 = a2;\n  v27 = a1;\n  v11 = a9;\n  v12 = a3;\n  v30 = a6;\n  v13 = a3 - a6 - a7;\n  v31 = a5;\n  v28 = v10;\n  if ( (unsigned int)a5 < 3 )\n  {\n    a5 = (signed int)a5;\n  }\n  else\n  {\n    result = (unsigned __int64)memset(v10, 0, (a4 - a8 - a9) * (signed int)a5 * v13);\n    v11 = a9;\n    a5 = 2LL;\n  }\n  v15 = v9 - v11;\n  if ( v15 > a8 )\n  {\n    v16 = a8;\n    v40 = v15;\n    v36 = v12 - a7;\n    v38 = v12 - (signed __int64)a7;\n    v39 = v12 - 1LL - a7 - v30;\n    v34 = v13 * v31;\n    v32 = -v30;\n    v33 = 0;\n    n = a5;\n    v35 = v13;\n    v37 = 4 * v31;\n    do\n    {\n      v17 = v16;\n      if ( v36 > v30 )\n      {\n        v18 = v30;\n        if ( ((_BYTE)v38 - (_BYTE)v30) & 3 )\n        {\n          v19 = -(signed __int64)(((_BYTE)v38 - (_BYTE)v30) & 3);\n          v20 = v33;\n          v18 = v30;\n          do\n          {\n            memcpy(&v28[v20], (const void *)(*(_QWORD *)(v27 + 8 * v17) + 2 * v18), n);\n            v17 = v16;\n            ++v18;\n            v20 += v31;\n            ++v19;\n          }\n          while ( v19 );\n        }\n        v21 = v27;\n        if ( v39 >= 3 )\n        {\n          v42 = v38 - v18;\n          v41 = 2 * v18;\n          v22 = v31 * (v32 + v18 + 3);\n          v23 = v31 * (v32 + v18 + 2);\n          v24 = v31 * (v32 + v18);\n          v25 = v31 * (v32 + v18 + 1);\n          v26 = 0LL;\n          do\n          {\n            memcpy(&v28[v24], (const void *)(v41 + *(_QWORD *)(v21 + 8 * v17) + 2 * v26), n);\n            memcpy(&v28[v25], (const void *)(v41 + *(_QWORD *)(v27 + 8 * v16) + 2 * v26 + 2), n);\n            memcpy(&v28[v23], (const void *)(v41 + *(_QWORD *)(v27 + 8 * v16) + 2 * v26 + 4), n);\n            memcpy(&v28[v22], (const void *)(v41 + *(_QWORD *)(v27 + 8 * v16) + 2 * v26 + 6), n);\n            v21 = v27;\n            v17 = v16;\n            v26 += 4LL;\n            v22 += v37;\n            v23 += v37;\n            v24 += v37;\n            v25 += v37;\n          }\n          while ( v42 != v26 );\n        }\n      }\n      v33 += v34;\n      result = (unsigned int)(v35 + v32);\n      v32 += v35;\n      v16 = v17 + 1;\n    }\n    while ( v17 + 1 != v40 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4527a0L", 
            "funcEndAddr": "0x452ac5L", 
            "funcName": "sub_4527A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_452AE0(_DWORD *a1, int a2)\n{\n  _DWORD *v2; // rbp\n  bool v3; // r13\n  int v4; // er12\n  __int64 v5; // rax\n  int v6; // ecx\n  int v7; // er15\n  int v8; // er14\n  int v9; // er15\n  char *v10; // rax\n  void *v11; // rdi\n  signed __int64 v12; // rcx\n  signed __int64 v13; // rbx\n  int v14; // er14\n  int v15; // er15\n  int v16; // ebp\n  signed __int64 v17; // rax\n  int v18; // er15\n  char *v19; // rsi\n  __int64 v20; // r15\n  __int64 v21; // r13\n  signed __int64 v22; // rbp\n  int v23; // ebx\n  signed __int64 v24; // rdx\n  char *v25; // rbx\n  int v26; // er15\n  int v27; // ebp\n  int v28; // er12\n  int v29; // er13\n  size_t v30; // ST30_8\n  __int64 v31; // rax\n  int v32; // ecx\n  int v33; // er15\n  __int64 v34; // rax\n  int v35; // ebp\n  int v36; // ebx\n  size_t v37; // rdx\n  int v38; // ebp\n  __int64 v39; // r12\n  __int64 v40; // r14\n  signed __int64 v41; // rbp\n  int v42; // ebx\n  signed __int64 v43; // rax\n  char *v44; // rbx\n  int v45; // er12\n  int v46; // er13\n  int v47; // ebp\n  int v48; // er14\n  signed __int64 v49; // STA0_8\n  void *v50; // r15\n  __int64 v51; // rbp\n  int v52; // esi\n  signed __int64 v53; // rcx\n  signed __int64 v54; // r13\n  int v55; // ebx\n  int v56; // er12\n  size_t v57; // rdx\n  int v58; // er12\n  __int64 v59; // r15\n  __int64 v60; // r14\n  __int64 v61; // rbp\n  int v62; // ebx\n  __int64 v63; // rdi\n  char *v64; // rbx\n  int v65; // ebp\n  int v66; // er15\n  int v67; // er12\n  int v68; // er14\n  __int64 v69; // STA0_8\n  int v70; // er14\n  int v71; // er13\n  int v72; // edx\n  int v73; // er14\n  char *v74; // rsi\n  __int64 v75; // r15\n  __int64 v76; // r13\n  __int64 v77; // rbp\n  int v78; // ebx\n  signed __int64 v79; // rax\n  char *v80; // rbx\n  int v81; // ebp\n  int v82; // er15\n  int v83; // er12\n  int v84; // er13\n  size_t v85; // ST30_8\n  char *buf; // [rsp+0h] [rbp-F8h]\n  int n; // [rsp+8h] [rbp-F0h]\n  size_t na; // [rsp+8h] [rbp-F0h]\n  int nb; // [rsp+8h] [rbp-F0h]\n  int nc; // [rsp+8h] [rbp-F0h]\n  __int64 v91; // [rsp+10h] [rbp-E8h]\n  int v92; // [rsp+10h] [rbp-E8h]\n  int v93; // [rsp+10h] [rbp-E8h]\n  int v94; // [rsp+10h] [rbp-E8h]\n  unsigned int v95; // [rsp+18h] [rbp-E0h]\n  int v96; // [rsp+20h] [rbp-D8h]\n  __int64 v97; // [rsp+20h] [rbp-D8h]\n  __int64 v98; // [rsp+20h] [rbp-D8h]\n  __int64 v99; // [rsp+20h] [rbp-D8h]\n  int v100; // [rsp+28h] [rbp-D0h]\n  int v101; // [rsp+28h] [rbp-D0h]\n  signed __int64 v102; // [rsp+28h] [rbp-D0h]\n  int v103; // [rsp+28h] [rbp-D0h]\n  size_t v104; // [rsp+30h] [rbp-C8h]\n  size_t v105; // [rsp+30h] [rbp-C8h]\n  int v106; // [rsp+38h] [rbp-C0h]\n  int v107; // [rsp+38h] [rbp-C0h]\n  int v108; // [rsp+40h] [rbp-B8h]\n  __int64 v109; // [rsp+40h] [rbp-B8h]\n  __int64 v110; // [rsp+40h] [rbp-B8h]\n  signed __int64 v111; // [rsp+48h] [rbp-B0h]\n  int v112; // [rsp+48h] [rbp-B0h]\n  int v113; // [rsp+48h] [rbp-B0h]\n  __int64 v114; // [rsp+48h] [rbp-B0h]\n  int v115; // [rsp+50h] [rbp-A8h]\n  __int64 v116; // [rsp+50h] [rbp-A8h]\n  int v117; // [rsp+50h] [rbp-A8h]\n  int v118; // [rsp+58h] [rbp-A0h]\n  int v119; // [rsp+58h] [rbp-A0h]\n  size_t v120; // [rsp+58h] [rbp-A0h]\n  int fd; // [rsp+64h] [rbp-94h]\n  __int64 v122; // [rsp+68h] [rbp-90h]\n  __int64 v123; // [rsp+68h] [rbp-90h]\n  __int64 v124; // [rsp+68h] [rbp-90h]\n  __int64 v125; // [rsp+70h] [rbp-88h]\n  __int64 v126; // [rsp+70h] [rbp-88h]\n  __int64 v127; // [rsp+70h] [rbp-88h]\n  unsigned __int64 v128; // [rsp+88h] [rbp-70h]\n  unsigned __int64 v129; // [rsp+88h] [rbp-70h]\n  __int64 v130; // [rsp+90h] [rbp-68h]\n  __int64 v131; // [rsp+90h] [rbp-68h]\n  __int64 v132; // [rsp+90h] [rbp-68h]\n  __int64 v133; // [rsp+98h] [rbp-60h]\n  __int64 v134; // [rsp+98h] [rbp-60h]\n  __int64 v135; // [rsp+98h] [rbp-60h]\n  int v136; // [rsp+A0h] [rbp-58h]\n  int v137; // [rsp+A0h] [rbp-58h]\n  int v138; // [rsp+ACh] [rbp-4Ch]\n  int v139; // [rsp+ACh] [rbp-4Ch]\n  _DWORD *v140; // [rsp+B0h] [rbp-48h]\n  int v141; // [rsp+B0h] [rbp-48h]\n  int v142; // [rsp+B8h] [rbp-40h]\n  bool v143; // [rsp+BCh] [rbp-3Ch]\n  int v144; // [rsp+C0h] [rbp-38h]\n\n  v2 = a1;\n  if ( *((_DWORD *)dest + 828) )\n  {\n    v3 = *((_DWORD *)dest + 18) == 3;\n    if ( a1[1597] )\n      return;\n  }\n  else\n  {\n    v3 = 0;\n    if ( a1[1597] )\n      return;\n  }\n  v4 = *((_DWORD *)off_49F6D0 + 18164) / 8;\n  fd = a2;\n  if ( a1[1640] )\n  {\n    v5 = (signed int)a1[1638];\n    v6 = dword_489790[v5];\n    n = v6 * a1[1641];\n    v96 = a1[1642] * v6;\n    v7 = *((_DWORD *)&xmmword_489650 + v5) * (2 - a1[1639]);\n    v8 = v7 * a1[1643];\n    v9 = a1[1644] * v7;\n  }\n  else\n  {\n    v9 = 0;\n    v8 = 0;\n    v96 = 0;\n    n = 0;\n  }\n  v10 = (char *)malloc(a1[1599] * v4 * a1[1598]);\n  v11 = v10;\n  if ( !v10 )\n    sub_43EF40(0LL, (__int64)\"write_out_picture: buf\");\n  v95 = v4;\n  buf = v10;\n  v140 = v2;\n  v143 = v3;\n  if ( v3 )\n  {\n    v12 = 2LL - (signed int)v2[1639];\n    v13 = v12 * (signed int)v2[1643];\n    v14 = v12 * v2[1644];\n    v122 = *(_QWORD *)(*((_QWORD *)v2 + 808) + 8LL);\n    v15 = v2[1601];\n    v97 = (signed int)v2[1600];\n    v91 = (signed int)v2[1641];\n    v125 = (signed int)v2[1642];\n    v16 = v97 - v91 - v125;\n    if ( (unsigned int)v4 < 3 )\n    {\n      v17 = v4;\n    }\n    else\n    {\n      memset(v10, 0, (v15 - (v14 + (signed int)v13)) * v4 * v16);\n      v17 = 2LL;\n    }\n    na = v17;\n    v18 = v15 - v14;\n    v115 = v18 - v13;\n    if ( v18 > (signed int)v13 )\n    {\n      v133 = v18;\n      v106 = v16 * v4;\n      v100 = -(signed int)v91;\n      v108 = 0;\n      v136 = 4 * v4;\n      do\n      {\n        v111 = v13;\n        v19 = buf;\n        if ( (signed int)v97 - (signed int)v125 > (signed int)v91 )\n        {\n          v20 = *(_QWORD *)(v122 + 8 * v13);\n          v21 = v91;\n          if ( ((_BYTE)v97 - (_BYTE)v125 - (_BYTE)v91) & 3 )\n          {\n            v22 = -(signed __int64)(((_BYTE)v97 - (_BYTE)v125 - (_BYTE)v91) & 3);\n            v23 = v108;\n            v21 = v91;\n            do\n            {\n              memcpy(&v19[v23], (const void *)(v20 + 2 * v21), na);\n              v19 = buf;\n              ++v21;\n              v23 += v95;\n              ++v22;\n            }\n            while ( v22 );\n          }\n          if ( (unsigned __int64)(v97 - 1 - v125 - v91) >= 3 )\n          {\n            v24 = v97 - v125 - v21;\n            v25 = (char *)(v20 + 2 * v21 + 6);\n            v26 = v95 * (v100 + v21 + 3);\n            v27 = v95 * (v100 + v21 + 2);\n            v28 = v95 * (v100 + v21 + 1);\n            v29 = v95 * (v100 + v21);\n            do\n            {\n              v30 = v24;\n              memcpy(&v19[v29], v25 - 6, na);\n              memcpy(&buf[v28], v25 - 4, na);\n              memcpy(&buf[v27], v25 - 2, na);\n              memcpy(&buf[v26], v25, na);\n              v19 = buf;\n              v25 += 8;\n              v26 += v136;\n              v27 += v136;\n              v28 += v136;\n              v29 += v136;\n              v24 = v30 - 4;\n            }\n            while ( v30 != 4 );\n          }\n        }\n        v13 = v111 + 1;\n        v108 += v106;\n        v100 += v97 - v91 - v125;\n      }\n      while ( v111 + 1 != v133 );\n    }\n    v4 = v95;\n    write(fd, buf, (signed int)(v115 * v95 * (v97 - (v91 + v125))));\n    if ( *((_DWORD *)qword_4F9DC0 + 290) )\n    {\n      v2 = v140;\n      v31 = (signed int)v140[1638];\n      v32 = dword_489790[v31];\n      n = v32 * v140[1641];\n      v96 = v140[1642] * v32;\n      v33 = *((_DWORD *)&xmmword_489650 + v31) * (2 - v140[1639]);\n      v8 = v33 * v140[1643];\n      v9 = v140[1644] * v33;\n    }\n    else\n    {\n      v9 = 0;\n      v8 = 0;\n      v96 = 0;\n      n = 0;\n      v2 = v140;\n    }\n    v11 = buf;\n  }\n  v130 = *((_QWORD *)v2 + 803);\n  v34 = (signed int)v2[1598];\n  v35 = v2[1599];\n  v116 = v34;\n  v36 = v34 - n - v96;\n  if ( (unsigned int)v4 < 3 )\n  {\n    v37 = v4;\n  }\n  else\n  {\n    memset(v11, 0, (v35 - (v8 + v9)) * v4 * v36);\n    v37 = 2LL;\n  }\n  v38 = v35 - v9;\n  v138 = v38 - v8;\n  if ( v38 > v8 )\n  {\n    v109 = v8;\n    v134 = v38;\n    v126 = v116 - v96;\n    v107 = v36 * v95;\n    v92 = -n;\n    v101 = 0;\n    v104 = v37;\n    v118 = v36;\n    v112 = 4 * v95;\n    do\n    {\n      if ( (signed int)v116 - v96 > n )\n      {\n        v39 = *(_QWORD *)(v130 + 8 * v109);\n        v40 = n;\n        if ( ((_BYTE)v126 - (_BYTE)n) & 3 )\n        {\n          v41 = -(signed __int64)(((_BYTE)v126 - (_BYTE)n) & 3);\n          v42 = v101;\n          v40 = n;\n          do\n          {\n            memcpy(&buf[v42], (const void *)(v39 + 2 * v40), v37);\n            v37 = v104;\n            ++v40;\n            v42 += v95;\n            ++v41;\n          }\n          while ( v41 );\n        }\n        if ( (unsigned __int64)(v116 - 1 - v96 - n) >= 3 )\n        {\n          v43 = v126 - v40;\n          v44 = (char *)(v39 + 2 * v40 + 6);\n          v45 = v95 * (v92 + v40 + 3);\n          v46 = v95 * (v92 + v40 + 2);\n          v47 = v95 * (v92 + v40 + 1);\n          v48 = v95 * (v92 + v40);\n          do\n          {\n            v49 = v43;\n            memcpy(&buf[v48], v44 - 6, v37);\n            memcpy(&buf[v47], v44 - 4, v104);\n            memcpy(&buf[v46], v44 - 2, v104);\n            memcpy(&buf[v45], v44, v104);\n            v37 = v104;\n            v44 += 8;\n            v45 += v112;\n            v46 += v112;\n            v47 += v112;\n            v48 += v112;\n            v43 = v49 - 4;\n          }\n          while ( v49 != 4 );\n        }\n      }\n      v101 += v107;\n      v92 += v118;\n      ++v109;\n    }\n    while ( v109 != v134 );\n  }\n  v50 = buf;\n  write(fd, buf, (signed int)(v138 * v95 * (v116 - (v96 + n))));\n  if ( v140[1638] )\n  {\n    v51 = (signed int)v140[1641];\n    v52 = v140[1642];\n    v53 = 2LL - (signed int)v140[1639];\n    v54 = v53 * (signed int)v140[1643];\n    v55 = v53 * v140[1644];\n    v98 = (signed int)v140[1600];\n    v123 = **((_QWORD **)v140 + 808);\n    v56 = v140[1601];\n    v127 = (signed int)v140[1642];\n    v119 = v98 - v51 - v52;\n    if ( v95 < 3 )\n    {\n      v57 = (signed int)v95;\n    }\n    else\n    {\n      memset(buf, 0, (signed int)((v56 - (v55 + v54)) * v95 * (v98 - v51 - v52)));\n      v57 = 2LL;\n    }\n    v144 = v55;\n    v58 = v56 - v55;\n    v117 = v54;\n    v139 = v58 - v54;\n    v110 = v51;\n    if ( v58 > (signed int)v54 )\n    {\n      v135 = v58;\n      v128 = v98 - 1 - v51 - v127;\n      v131 = ((_BYTE)v98 - (_BYTE)v51 - (_BYTE)v127) & 3;\n      nb = -(signed int)v51;\n      v93 = 0;\n      v102 = v54;\n      v105 = v57;\n      v113 = 4 * v95;\n      do\n      {\n        if ( (signed int)v98 - (signed int)v127 > (signed int)v51 )\n        {\n          v59 = *(_QWORD *)(v123 + 8 * v102);\n          v60 = v110;\n          if ( v131 )\n          {\n            v61 = -v131;\n            v62 = v93;\n            v60 = v110;\n            do\n            {\n              memcpy(&buf[v62], (const void *)(v59 + 2 * v60), v57);\n              v57 = v105;\n              ++v60;\n              v62 += v95;\n              ++v61;\n            }\n            while ( v61 );\n          }\n          if ( v128 >= 3 )\n          {\n            v63 = v98 - v127 - v60;\n            v64 = (char *)(v59 + 2 * v60 + 6);\n            v65 = v95 * (nb + v60 + 3);\n            v66 = v95 * (nb + v60 + 2);\n            v67 = v95 * (nb + v60 + 1);\n            v68 = v95 * (nb + v60);\n            do\n            {\n              v69 = v63;\n              memcpy(&buf[v68], v64 - 6, v57);\n              memcpy(&buf[v67], v64 - 4, v105);\n              memcpy(&buf[v66], v64 - 2, v105);\n              memcpy(&buf[v65], v64, v105);\n              v57 = v105;\n              v64 += 8;\n              v65 += v113;\n              v66 += v113;\n              v67 += v113;\n              v68 += v113;\n              v63 -= 4LL;\n            }\n            while ( v69 != 4 );\n          }\n        }\n        v93 += v119 * v95;\n        nb += v119;\n        ++v102;\n        v51 = v110;\n      }\n      while ( v102 != v135 );\n    }\n    v50 = buf;\n    write(fd, buf, (signed int)(v139 * v95 * (v98 - (v127 + v51))));\n    if ( !v143 )\n    {\n      v99 = (signed int)v140[1600];\n      v124 = *(_QWORD *)(*((_QWORD *)v140 + 808) + 8LL);\n      v70 = v140[1601];\n      v142 = v127 + v51;\n      nc = v99 - v51 - v127;\n      if ( v95 < 3 )\n      {\n        v120 = (signed int)v95;\n        v72 = v54;\n        v71 = v144;\n      }\n      else\n      {\n        v71 = v144;\n        memset(buf, 0, (signed int)((v70 - (v117 + v144)) * v95 * (v99 - v51 - v127)));\n        v72 = v117;\n        v120 = 2LL;\n      }\n      v73 = v70 - v71;\n      v141 = v73 - v72;\n      if ( v73 > v72 )\n      {\n        v114 = v72;\n        v129 = v99 - 1 - v127 - v51;\n        v132 = ((_BYTE)v99 - (_BYTE)v127 - (_BYTE)v51) & 3;\n        v94 = -(signed int)v51;\n        v103 = 0;\n        v137 = 4 * v95;\n        do\n        {\n          v74 = buf;\n          if ( (signed int)v99 - (signed int)v127 > (signed int)v51 )\n          {\n            v75 = *(_QWORD *)(v124 + 8 * v114);\n            v76 = v110;\n            if ( v132 )\n            {\n              v77 = -v132;\n              v78 = v103;\n              v76 = v110;\n              do\n              {\n                memcpy(&v74[v78], (const void *)(v75 + 2 * v76), v120);\n                v74 = buf;\n                ++v76;\n                v78 += v95;\n                ++v77;\n              }\n              while ( v77 );\n            }\n            if ( v129 >= 3 )\n            {\n              v79 = v99 - v127 - v76;\n              v80 = (char *)(v75 + 2 * v76 + 6);\n              v81 = v95 * (v94 + v76 + 3);\n              v82 = v95 * (v94 + v76 + 2);\n              v83 = v95 * (v94 + v76 + 1);\n              v84 = v95 * (v94 + v76);\n              do\n              {\n                v85 = v79;\n                memcpy(&v74[v84], v80 - 6, v120);\n                memcpy(&buf[v83], v80 - 4, v120);\n                memcpy(&buf[v82], v80 - 2, v120);\n                memcpy(&buf[v81], v80, v120);\n                v74 = buf;\n                v80 += 8;\n                v81 += v137;\n                v82 += v137;\n                v83 += v137;\n                v84 += v137;\n                v79 = v85 - 4;\n              }\n              while ( v85 != 4 );\n            }\n          }\n          v103 += nc * v95;\n          v94 += nc;\n          ++v114;\n          LODWORD(v51) = v110;\n        }\n        while ( v114 != v73 );\n      }\n      v50 = buf;\n      write(fd, buf, (signed int)(v141 * v95 * (v99 - v142)));\n    }\n  }\n  free(v50);\n}\n", 
            "funcStartAddr": "0x452ae0L", 
            "funcEndAddr": "0x45389bL", 
            "funcName": "sub_452AE0"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_4538A0()\n{\n  qword_4F9F20 = sub_437B40();\n}\n", 
            "funcStartAddr": "0x4538a0L", 
            "funcEndAddr": "0x4538b1L", 
            "funcName": "sub_4538A0"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_4538C0()\n{\n  sub_437AF0(qword_4F9F20);\n  qword_4F9F20 = 0LL;\n}\n", 
            "funcStartAddr": "0x4538c0L", 
            "funcEndAddr": "0x4538daL", 
            "funcName": "sub_4538C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4539E0(__int64 a1, int a2)\n{\n  int v2; // eax\n  char *v3; // rbp\n  signed __int64 v4; // rbx\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  signed __int64 v7; // rbx\n  char *v8; // rbp\n  signed __int64 v9; // rbx\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  signed __int64 v12; // rbx\n\n  v2 = *(_DWORD *)a1;\n  if ( *(_DWORD *)a1 & 1 )\n  {\n    v3 = sub_437B80(\n           2,\n           *(_DWORD *)(*(_QWORD *)(a1 + 48) + 6392LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 48) + 6396LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 48) + 6400LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 48) + 6404LL));\n    *(_QWORD *)(a1 + 56) = v3;\n    if ( *((_DWORD *)v3 + 1599) > 0 )\n    {\n      v4 = 0LL;\n      do\n        memset(\n          *(void **)(*((_QWORD *)v3 + 803) + 8 * v4++),\n          *((_DWORD *)off_49F6D0 + 18170),\n          2LL * *((signed int *)v3 + 1598));\n      while ( v4 < *((signed int *)v3 + 1599) );\n    }\n    if ( *((_DWORD *)v3 + 1601) > 0 )\n    {\n      v5 = 0LL;\n      do\n      {\n        memset(\n          *(void **)(**((_QWORD **)v3 + 808) + 8 * v5++),\n          *((_DWORD *)off_49F6D0 + 18170),\n          2LL * *((signed int *)v3 + 1600));\n        v6 = *((signed int *)v3 + 1601);\n      }\n      while ( v5 < v6 );\n      if ( (signed int)v6 > 0 )\n      {\n        v7 = 0LL;\n        do\n          memset(\n            *(void **)(*(_QWORD *)(*((_QWORD *)v3 + 808) + 8LL) + 8 * v7++),\n            *((_DWORD *)off_49F6D0 + 18170),\n            2LL * *((signed int *)v3 + 1600));\n        while ( v7 < *((signed int *)v3 + 1601) );\n      }\n    }\n    sub_43C8E0(a1);\n    sub_452AE0(*(_DWORD **)(a1 + 40), a2);\n    v2 = *(_DWORD *)a1;\n  }\n  if ( v2 & 2 )\n  {\n    v8 = sub_437B80(\n           1,\n           *(_DWORD *)(*(_QWORD *)(a1 + 56) + 6392LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 56) + 6396LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 56) + 6400LL),\n           *(_DWORD *)(*(_QWORD *)(a1 + 56) + 6404LL));\n    *(_QWORD *)(a1 + 48) = v8;\n    if ( *((_DWORD *)v8 + 1599) > 0 )\n    {\n      v9 = 0LL;\n      do\n        memset(\n          *(void **)(*((_QWORD *)v8 + 803) + 8 * v9++),\n          *((_DWORD *)off_49F6D0 + 18170),\n          2LL * *((signed int *)v8 + 1598));\n      while ( v9 < *((signed int *)v8 + 1599) );\n    }\n    if ( *((_DWORD *)v8 + 1601) > 0 )\n    {\n      v10 = 0LL;\n      do\n      {\n        memset(\n          *(void **)(**((_QWORD **)v8 + 808) + 8 * v10++),\n          *((_DWORD *)off_49F6D0 + 18170),\n          2LL * *((signed int *)v8 + 1600));\n        v11 = *((signed int *)v8 + 1601);\n      }\n      while ( v10 < v11 );\n      if ( (signed int)v11 > 0 )\n      {\n        v12 = 0LL;\n        do\n          memset(\n            *(void **)(*(_QWORD *)(*((_QWORD *)v8 + 808) + 8LL) + 8 * v12++),\n            *((_DWORD *)off_49F6D0 + 18170),\n            2LL * *((signed int *)v8 + 1600));\n        while ( v12 < *((signed int *)v8 + 1601) );\n      }\n    }\n    sub_43C8E0(a1);\n    sub_452AE0(*(_DWORD **)(a1 + 40), a2);\n  }\n  *(_DWORD *)a1 = 3;\n}\n", 
            "funcStartAddr": "0x4539e0L", 
            "funcEndAddr": "0x453c61L", 
            "funcName": "sub_4539E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_453CE0(__int64 a1, int a2)\n{\n  void **v2; // rax\n  void **v3; // rax\n  _DWORD *v4; // rax\n\n  sub_4539E0((__int64)qword_4F9F20, a2);\n  sub_437D90(*((void **)qword_4F9F20 + 5));\n  v2 = (void **)qword_4F9F20;\n  *((_QWORD *)qword_4F9F20 + 5) = 0LL;\n  sub_437D90(v2[6]);\n  v3 = (void **)qword_4F9F20;\n  *((_QWORD *)qword_4F9F20 + 6) = 0LL;\n  sub_437D90(v3[7]);\n  v4 = qword_4F9F20;\n  *((_QWORD *)qword_4F9F20 + 7) = 0LL;\n  *v4 = 0;\n  if ( *(_DWORD *)a1 > 2 )\n    sub_452AE0(*(_DWORD **)(a1 + 40), a2);\n  else\n    sub_4539E0(a1, a2);\n  *(_DWORD *)(a1 + 32) = 1;\n}\n", 
            "funcStartAddr": "0x453ce0L", 
            "funcEndAddr": "0x453d73L", 
            "funcName": "sub_453CE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_453D80(void *ptr, int a2)\n{\n  signed int *v2; // rbx\n  signed int v3; // eax\n  void **v4; // rax\n  void **v5; // rax\n  _DWORD *v6; // rax\n  _QWORD *v7; // rdi\n  int v8; // ecx\n  void **v9; // rax\n  void **v10; // rax\n  _QWORD *v11; // rdi\n  signed int v12; // ecx\n  void **v13; // rax\n  void **v14; // rax\n  void **v15; // rax\n  void **v16; // rax\n  _DWORD *v17; // rax\n\n  v2 = (signed int *)ptr;\n  v3 = *(_DWORD *)ptr;\n  if ( *(_DWORD *)ptr == 1 )\n  {\n    v7 = qword_4F9F20;\n    v8 = *(_DWORD *)qword_4F9F20;\n    v3 = 1;\n    if ( *(_DWORD *)qword_4F9F20 & 1 )\n    {\n      sub_4539E0((__int64)qword_4F9F20, a2);\n      sub_437D90(*((void **)qword_4F9F20 + 5));\n      v9 = (void **)qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 5) = 0LL;\n      sub_437D90(v9[6]);\n      v10 = (void **)qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 6) = 0LL;\n      sub_437D90(v10[7]);\n      v7 = qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 7) = 0LL;\n      *(_DWORD *)v7 = 0;\n      v3 = *v2;\n      v8 = 0;\n    }\n    v7[6] = v2;\n    *(_DWORD *)v7 = v8 | 1;\n  }\n  else if ( !v3 )\n  {\n    sub_4539E0((__int64)qword_4F9F20, a2);\n    sub_437D90(*((void **)qword_4F9F20 + 5));\n    v4 = (void **)qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 5) = 0LL;\n    sub_437D90(v4[6]);\n    v5 = (void **)qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 6) = 0LL;\n    sub_437D90(v5[7]);\n    v6 = qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 7) = 0LL;\n    *v6 = 0;\n    sub_452AE0(ptr, a2);\n    sub_437D90(ptr);\n    return;\n  }\n  v11 = qword_4F9F20;\n  v12 = *(_DWORD *)qword_4F9F20;\n  if ( v3 == 2 )\n  {\n    if ( v12 & 2 )\n    {\n      sub_4539E0((__int64)qword_4F9F20, a2);\n      sub_437D90(*((void **)qword_4F9F20 + 5));\n      v13 = (void **)qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 5) = 0LL;\n      sub_437D90(v13[6]);\n      v14 = (void **)qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 6) = 0LL;\n      sub_437D90(v14[7]);\n      v11 = qword_4F9F20;\n      *((_QWORD *)qword_4F9F20 + 7) = 0LL;\n      *(_DWORD *)v11 = 0;\n      v12 = 2;\n    }\n    else\n    {\n      v12 |= 2u;\n    }\n    v11[7] = v2;\n    *(_DWORD *)v11 = v12;\n  }\n  if ( v12 == 3 )\n  {\n    sub_43C8E0((__int64)v11);\n    sub_452AE0(*((_DWORD **)qword_4F9F20 + 5), a2);\n    sub_437D90(*((void **)qword_4F9F20 + 5));\n    v15 = (void **)qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 5) = 0LL;\n    sub_437D90(v15[6]);\n    v16 = (void **)qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 6) = 0LL;\n    sub_437D90(v16[7]);\n    v17 = qword_4F9F20;\n    *((_QWORD *)qword_4F9F20 + 7) = 0LL;\n    *v17 = 0;\n  }\n}\n", 
            "funcStartAddr": "0x453d80L", 
            "funcEndAddr": "0x453f89L", 
            "funcName": "sub_453D80"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_453F90(__int64 a1)\n{\n  _DWORD *v1; // rbx\n  _QWORD *v2; // r14\n  unsigned int v3; // edx\n  int v4; // ecx\n  int v5; // er8\n  void *v6; // rdi\n  void *result; // rax\n\n  v1 = sub_4557D0();\n  v2 = sub_455780();\n  sub_454180((__int64)v1);\n  v3 = v1[1];\n  if ( *((_DWORD *)dest + 15) )\n  {\n    if ( v3 < 0x64 )\n    {\n      sub_4544B0(v2, v1, 0, 0, 0, *((_DWORD *)dest + 608), 0);\n      memcpy(&unk_4D64E0, v2, 0xF0uLL);\n      sub_4544B0(v2, v1, 1, 1, 1, *((_DWORD *)dest + 608), 0);\n      memcpy(&unk_4D65D0, v2, 0xF0uLL);\n      sub_4544B0(v2, v1, 2, 1, 2, *((_DWORD *)dest + 608), 0);\n    }\n    else\n    {\n      sub_4544B0(v2, v1, 0, 0, 0, *((_DWORD *)dest + 829), *((_DWORD *)dest + 830));\n      memcpy(&unk_4D64E0, v2, 0xF0uLL);\n      sub_4544B0(v2, v1, 1, 1, 1, *((_DWORD *)dest + 829), *((_DWORD *)dest + 830));\n      memcpy(&unk_4D65D0, v2, 0xF0uLL);\n      sub_4544B0(v2, v1, 2, 1, 2, *((_DWORD *)dest + 829), *((_DWORD *)dest + 830));\n    }\n    v6 = &unk_4D66C0;\n  }\n  else\n  {\n    v4 = *((_DWORD *)dest + 321);\n    v5 = *((_DWORD *)dest + 322);\n    if ( v3 < 0x64 )\n      sub_4544B0(v2, v1, 0, v4, v5, *((_DWORD *)dest + 608), 0);\n    else\n      sub_4544B0(v2, v1, 0, v4, v5, *((_DWORD *)dest + 829), *((_DWORD *)dest + 830));\n    v6 = &unk_4D64E0;\n  }\n  result = memcpy(v6, v2, 0xF0uLL);\n  qword_4F9DC0 = v1;\n  qword_4F9DB8 = (__int64)&unk_4D64E0;\n  return result;\n}\n", 
            "funcStartAddr": "0x453f90L", 
            "funcEndAddr": "0x45417eL", 
            "funcName": "sub_453F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_454180(__int64 a1)\n{\n  __int64 v1; // rbx\n  _DWORD *v2; // r9\n  int v3; // edx\n  unsigned int v4; // ecx\n  unsigned __int64 v5; // r14\n  int v6; // eax\n  char *v7; // rdx\n  __m128i v8; // xmm0\n  unsigned __int64 v9; // rax\n  int v10; // er8\n  bool v11; // zf\n  int v12; // edi\n  unsigned int v13; // esi\n  int v14; // edx\n  int v15; // ebp\n  _DWORD *v16; // rax\n  int v17; // ecx\n  __int64 result; // rax\n  unsigned int v19; // ecx\n  __int64 v20; // rsi\n  int v21; // er8\n  unsigned int v22; // edi\n\n  v1 = a1;\n  v2 = dest;\n  v3 = *(_DWORD *)dest;\n  v4 = *(_DWORD *)dest - 100;\n  if ( v4 > 0x2C )\n    LOBYTE(v5) = 0;\n  else\n    v5 = (0x100000400401uLL >> v4) & 1;\n  *(_DWORD *)(a1 + 4) = v3;\n  *(_DWORD *)(a1 + 24) = v2[1];\n  *(_DWORD *)(a1 + 28) = 0;\n  *(_OWORD *)(a1 + 8) = 0LL;\n  *(_DWORD *)(a1 + 72) = v2[824] - 8;\n  *(_DWORD *)(a1 + 76) = v2[825] - 8;\n  v6 = v2[831] & (v3 == 144);\n  v7 = (char *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18176) = v6;\n  *((_DWORD *)v7 + 18181) = v2[832];\n  *(_DWORD *)(a1 + 80) = dword_4FA0E4;\n  *(_DWORD *)(a1 + 88) = dword_4FA0E8;\n  *(_DWORD *)(a1 + 84) = v2[802];\n  v8 = _mm_loadu_si128((const __m128i *)(v7 + 72408));\n  _mm_storeu_si128((__m128i *)(a1 + 92), v8);\n  if ( _mm_cvtsi128_si32(_mm_shuffle_epi32(v8, 231)) )\n  {\n    v9 = 0LL;\n    do\n    {\n      *(_DWORD *)(a1 + 4 * v9 + 108) = *(_DWORD *)&v7[4 * v9 + 72424];\n      ++v9;\n    }\n    while ( v9 < *((unsigned int *)v7 + 18105) );\n  }\n  *(_DWORD *)(a1 + 1132) = v2[9];\n  *(_DWORD *)(a1 + 1136) = 0;\n  v10 = v2[721];\n  v11 = *((_QWORD *)v2 + 360) == 0LL;\n  *(_DWORD *)(a1 + 1148) = v11;\n  v12 = (v2[16] + *((_DWORD *)v7 + 18182)) / 16 - 1;\n  *(_DWORD *)(v1 + 1140) = v12;\n  v13 = (unsigned int)((v2[17] + *((_DWORD *)v7 + 18183)) / 16) >> !v11;\n  *(_DWORD *)(v1 + 1144) = v13 - 1;\n  v14 = v10 != 0;\n  *(_DWORD *)(v1 + 1152) = v14;\n  *(_DWORD *)(v1 + 1156) = v2[313];\n  v15 = v2[18];\n  *(_DWORD *)(v1 + 1180) = v2[828] != 0 && v15 == 3;\n  *(_DWORD *)(v1 + 32) = v15;\n  qword_49FE00 = sub_43D2F0(16 * v12 + 16, (16 * !v11 + 16) * v13, v14);\n  if ( (_BYTE)v5 )\n  {\n    v16 = dest;\n    *(_DWORD *)(v1 + 36) = *((_DWORD *)dest + 814) & 1;\n    *(_DWORD *)(v1 + 40) = v16[815] & 1;\n    *(_DWORD *)(v1 + 44) = v16[816] & 1;\n    *(_DWORD *)(v1 + 48) = v16[817] & 1;\n    *(_DWORD *)(v1 + 52) = v16[818] & 1;\n    *(_DWORD *)(v1 + 56) = v16[819] & 1;\n    *(_DWORD *)(v1 + 60) = v16[820] & 1;\n    if ( v16[805] )\n      v17 = v16[821] & 1;\n    else\n      v17 = 0;\n    *(_DWORD *)(v1 + 64) = v17;\n    if ( v16[805] )\n    {\n      *(_DWORD *)(v1 + 68) = v16[822] & 1;\n      goto LABEL_15;\n    }\n  }\n  else\n  {\n    _mm_storeu_si128((__m128i *)(v1 + 52), (__m128i)0LL);\n    _mm_storeu_si128((__m128i *)(v1 + 36), (__m128i)0LL);\n  }\n  *(_DWORD *)(v1 + 68) = 0;\nLABEL_15:\n  result = *((unsigned int *)off_49F6D0 + 18182);\n  v19 = *((_DWORD *)off_49F6D0 + 18183);\n  if ( *((_QWORD *)off_49F6D0 + 9091) )\n  {\n    *(_QWORD *)(v1 + 1160) = 1LL;\n    *(_DWORD *)(v1 + 1172) = 0;\n    v20 = *(unsigned int *)(v1 + 32);\n    v21 = (signed int)result % dword_489790[v20];\n    *(_DWORD *)(v1 + 1168) = (signed int)result / dword_489790[v20];\n    v22 = *((_DWORD *)&xmmword_489650 + v20) * (2 - *(_DWORD *)(v1 + 1148));\n    *(_DWORD *)(v1 + 1176) = v19 / v22;\n    if ( v21 )\n      error((__int64)\"automatic frame cropping (width) not possible\", 500);\n    result = v19 / v22;\n    if ( v19 % v22 )\n      error((__int64)\"automatic frame cropping (height) not possible\", 500);\n  }\n  else\n  {\n    *(_DWORD *)(v1 + 1160) = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x454180L", 
            "funcEndAddr": "0x4544afL", 
            "funcName": "sub_454180"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4544B0(_DWORD *a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7)\n{\n  int v7; // er12\n  int v8; // er10\n  _DWORD *v9; // r13\n  _DWORD *v10; // rbx\n  _DWORD *v11; // rsi\n  unsigned int v12; // ecx\n  unsigned __int64 v13; // r15\n  int v14; // eax\n  int v15; // er14\n  _DWORD *v16; // rcx\n  __int64 v17; // rax\n  __int64 v18; // rdx\n  int v19; // ST04_4\n  int v20; // ebp\n  unsigned __int64 v21; // r9\n  unsigned __int64 v22; // rdx\n  signed __int64 v23; // rbp\n  __int64 v24; // rcx\n  unsigned int v25; // edx\n  int v26; // edi\n  unsigned int v27; // eax\n  unsigned int v28; // ecx\n  unsigned __int64 v29; // rsi\n  bool v30; // r10\n  bool v31; // si\n  unsigned __int64 v32; // rsi\n  __int64 v33; // rdi\n  signed __int64 v34; // rsi\n  signed __int64 v35; // rcx\n  signed __int64 v36; // rsi\n  __int64 v37; // rdi\n  signed __int64 v38; // rsi\n  signed __int64 v39; // rax\n  signed __int64 v40; // rcx\n  signed __int64 v41; // rdx\n  signed __int64 v42; // rsi\n  __int64 v43; // rdi\n  int v44; // eax\n  unsigned int *v45; // rax\n  __int64 result; // rax\n  int v47; // [rsp+0h] [rbp-34h]\n\n  v7 = a6;\n  v8 = a4;\n  v9 = a2;\n  v10 = a1;\n  v11 = dest;\n  v12 = *(_DWORD *)dest - 100;\n  if ( v12 > 0x2C )\n    LOBYTE(v13) = 0;\n  else\n    v13 = (0x100000400401uLL >> v12) & 1;\n  a1[2] = v9[7];\n  a1[1] = a3;\n  a1[3] = v11[589] != 0;\n  if ( (_BYTE)v13 )\n  {\n    v14 = v11[805];\n    a1[4] = v14 != 0;\n    a1[5] = (v11[814] >> 1) & 1;\n    a1[6] = (v11[815] >> 1) & 1;\n    a1[7] = (v11[816] >> 1) & 1;\n    a1[8] = (v11[817] >> 1) & 1;\n    a1[9] = (v11[818] >> 1) & 1;\n    a1[10] = (v11[819] >> 1) & 1;\n    a1[11] = (v11[820] >> 1) & 1;\n    if ( v14 )\n    {\n      a1[12] = (v11[821] >> 1) & 1;\n      a1[13] = (v11[822] >> 1) & 1;\n    }\n    else\n    {\n      *((_QWORD *)a1 + 6) = 0LL;\n    }\n  }\n  else\n  {\n    *(_OWORD *)(a1 + 9) = 0LL;\n    *(_OWORD *)(a1 + 5) = 0LL;\n    a1[13] = 0;\n    v11[805] = 0;\n    a1[4] = 0;\n  }\n  v15 = a7;\n  v16 = off_49F6D0;\n  a1[14] = *((_DWORD *)off_49F6D0 + 18123);\n  v17 = (unsigned int)v11[788];\n  a1[15] = v17;\n  if ( v17 )\n  {\n    v18 = (unsigned int)v11[789];\n    switch ( v18 )\n    {\n      case 0LL:\n        a1[16] = 0;\n        v24 = *((_QWORD *)v11 + 398);\n        v25 = 0;\n        do\n        {\n          a1[v25 + 17] = *(_DWORD *)(v24 + 4LL * v25);\n          ++v25;\n        }\n        while ( v25 <= (unsigned int)v17 );\n        break;\n      case 1LL:\n        a1[16] = 1;\n        break;\n      case 2LL:\n        a1[16] = 2;\n        v21 = *((_QWORD *)v11 + 395);\n        v22 = *((_QWORD *)v11 + 396);\n        if ( (unsigned int)v17 < 4 )\n        {\n          v23 = 0LL;\n          goto LABEL_34;\n        }\n        v47 = v8;\n        v29 = (unsigned __int64)&a1[v17 + 33];\n        v30 = v29 > v21;\n        v31 = v29 > v22;\n        v23 = 0LL;\n        if ( v30 && (unsigned __int64)(a1 + 25) < v21 + 4 * v17 )\n        {\n          v8 = v47;\n          goto LABEL_34;\n        }\n        v8 = v47;\n        if ( v31 && (unsigned __int64)(a1 + 25) < v22 + 4 * v17 )\n          goto LABEL_34;\n        v23 = (unsigned int)v17 & 0xFFFFFFFC;\n        v32 = (unsigned __int64)(v23 - 4) >> 2;\n        v33 = ((_BYTE)v32 + 1) & 3;\n        if ( (unsigned __int64)(v23 - 4) < 0xC )\n        {\n          v34 = 0LL;\n          if ( !v33 )\n            goto LABEL_33;\n          goto LABEL_31;\n        }\n        v35 = v33 - 1 - v32;\n        v34 = 0LL;\n        do\n        {\n          *(_OWORD *)&v10[v34 + 25] = *(_OWORD *)(v21 + 4 * v34);\n          *(_OWORD *)&v10[v34 + 33] = *(_OWORD *)(v22 + 4 * v34);\n          *(_OWORD *)&v10[v34 + 29] = *(_OWORD *)(v21 + 4 * v34 + 16);\n          *(_OWORD *)&v10[v34 + 37] = *(_OWORD *)(v22 + 4 * v34 + 16);\n          *(_OWORD *)&v10[v34 + 33] = *(_OWORD *)(v21 + 4 * v34 + 32);\n          *(_OWORD *)&v10[v34 + 41] = *(_OWORD *)(v22 + 4 * v34 + 32);\n          *(_OWORD *)&v10[v34 + 37] = *(_OWORD *)(v21 + 4 * v34 + 48);\n          *(_OWORD *)&v10[v34 + 45] = *(_OWORD *)(v22 + 4 * v34 + 48);\n          v34 += 16LL;\n          v35 += 4LL;\n        }\n        while ( v35 );\n        if ( v33 )\n        {\nLABEL_31:\n          v36 = v34;\n          v37 = -v33;\n          do\n          {\n            *(_OWORD *)&v10[v36 + 25] = *(_OWORD *)(v21 + v36 * 4);\n            *(_OWORD *)&v10[v36 + 33] = *(_OWORD *)(v22 + v36 * 4);\n            v36 += 4LL;\n            ++v37;\n          }\n          while ( v37 );\n        }\nLABEL_33:\n        if ( v23 == v17 )\n          break;\nLABEL_34:\n        v38 = v23;\n        if ( v17 & 1 )\n        {\n          v10[v23 + 25] = *(_DWORD *)(v21 + 4 * v23);\n          v10[v23 + 33] = *(_DWORD *)(v22 + 4 * v23);\n          v38 = v23 | 1;\n        }\n        if ( v17 - 1 != v23 )\n        {\n          v39 = v17 - v38;\n          v40 = v21 + 4 * v38 + 4;\n          v41 = v22 + 4 * v38 + 4;\n          v42 = (signed __int64)&v10[v38 + 34];\n          v43 = 0LL;\n          do\n          {\n            *(_DWORD *)(v42 + 4 * v43 - 36) = *(_DWORD *)(v40 + 4 * v43 - 4);\n            *(_DWORD *)(v42 + 4 * v43 - 4) = *(_DWORD *)(v41 + 4 * v43 - 4);\n            *(_DWORD *)(v42 + 4 * v43 - 32) = *(_DWORD *)(v40 + 4 * v43);\n            *(_DWORD *)(v42 + 4 * v43) = *(_DWORD *)(v41 + 4 * v43);\n            v43 += 2LL;\n          }\n          while ( v39 != v43 );\n        }\n        break;\n      case 3LL:\n      case 4LL:\n      case 5LL:\n        a1[16] = v18;\n        a1[41] = v11[798];\n        a1[42] = v11[799];\n        break;\n      case 6LL:\n        a1[16] = 6;\n        v26 = v16[18182];\n        v27 = (v11[17] + v16[18183]) / 16;\n        v28 = 0;\n        v10[43] = v27 / (2 - v9[287]) * ((v11[16] + v26) / 16) - 1;\n        do\n        {\n          *(_BYTE *)(*((_QWORD *)v10 + 22) + v28) = *(_BYTE *)(*((_QWORD *)dest + 397) + v28);\n          ++v28;\n        }\n        while ( v28 <= v10[43] );\n        break;\n      default:\n        v19 = a5;\n        v20 = v8;\n        puts(\"Parset.c: slice_group_map_type invalid, default\");\n        v8 = v20;\n        a5 = v19;\n        break;\n    }\n  }\n  v44 = (v9[283] << (v9[287] == 0)) - 1;\n  v10[46] = v44;\n  v10[47] = v44;\n  v10[48] = v8;\n  v10[49] = a5;\n  *((_QWORD *)v10 + 25) = 0LL;\n  v10[52] = v7;\n  if ( !(_BYTE)v13 )\n    v15 = v7;\n  v10[54] = v15;\n  v10[53] = v7;\n  v45 = (unsigned int *)dest;\n  v10[55] = *((_DWORD *)dest + 731);\n  result = v45[54];\n  *((_QWORD *)v10 + 28) = (unsigned int)result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4544b0L", 
            "funcEndAddr": "0x454976L", 
            "funcName": "sub_4544B0"
        }, 
        {
            "decompiledFuncCode": "void sub_454980()\n{\n  j__free(qword_4F9DC0);\n}\n", 
            "funcStartAddr": "0x454980L", 
            "funcEndAddr": "0x45498cL", 
            "funcName": "sub_454980"
        }, 
        {
            "decompiledFuncCode": "_DWORD *sub_454990()\n{\n  _DWORD *v0; // rbx\n  int v1; // eax\n  char src; // [rsp+10h] [rbp-FA18h]\n\n  v0 = sub_452700(64000);\n  v1 = sub_454A00((unsigned int *)qword_4F9DC0, (__int64)&src);\n  sub_452690(&src, v1, 7, (__int64)v0, 3, 0, 1);\n  *v0 = 4;\n  return v0;\n}\n", 
            "funcStartAddr": "0x454990L", 
            "funcEndAddr": "0x4549f3L", 
            "funcName": "sub_454990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_454A00(unsigned int *a1, __int64 a2)\n{\n  int *v2; // rbp\n  signed int **v3; // r14\n  signed int *v4; // rax\n  unsigned __int64 v5; // rax\n  signed __int64 v6; // rcx\n  unsigned __int64 v7; // r15\n  signed int v8; // eax\n  __int64 v9; // rbx\n  signed int v10; // ebp\n  __int64 v11; // r14\n  int v12; // esi\n  int v13; // esi\n  int v14; // eax\n  signed int v15; // ecx\n  __int64 v16; // r13\n  signed int v17; // eax\n  __int64 v18; // rbp\n  signed int v19; // ebx\n  __int64 v20; // r14\n  int v21; // esi\n  int v22; // esi\n  int v23; // eax\n  signed int v24; // ecx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned int v27; // ebx\n  signed int **v29; // [rsp+8h] [rbp-40h]\n\n  v2 = (int *)a1;\n  v3 = (signed int **)calloc(1uLL, 0x78uLL);\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"SeqParameterSet:partition\");\n  v4 = (signed int *)calloc(1uLL, 0x30uLL);\n  *v3 = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"SeqParameterSet:bitstream\");\n  *((_QWORD *)v4 + 4) = a2;\n  v4[1] = 8;\n  sub_47FEE0(8u, (__int64)\"SPS: profile_idc\", a1[1], v3);\n  sub_47FE20((__int64)\"SPS: constrained_set0_flag\", a1[2], v3);\n  sub_47FE20((__int64)\"SPS: constrained_set1_flag\", a1[3], v3);\n  sub_47FE20((__int64)\"SPS: constrained_set2_flag\", a1[4], v3);\n  sub_47FE20((__int64)\"SPS: constrained_set3_flag\", a1[5], v3);\n  sub_47FEE0(4u, (__int64)\"SPS: reserved_zero_4bits\", 0, v3);\n  sub_47FEE0(8u, (__int64)\"SPS: level_idc\", a1[6], v3);\n  sub_47FA90((__int64)\"SPS: seq_parameter_set_id\", a1[7], v3);\n  v5 = a1[1] - 100;\n  if ( (unsigned int)v5 <= 0x2C )\n  {\n    v6 = 17592190239745LL;\n    if ( _bittest64(&v6, v5) )\n    {\n      sub_47FA90((__int64)\"SPS: chroma_format_idc\", a1[8], v3);\n      if ( *((_DWORD *)off_49F6D0 + 18175) == 3 )\n        sub_47FE20((__int64)\"SPS: residue_transform_flag\", *((_DWORD *)off_49F6D0 + 18181), v3);\n      sub_47FA90((__int64)\"SPS: bit_depth_luma_minus8\", a1[18], v3);\n      sub_47FA90((__int64)\"SPS: bit_depth_chroma_minus8\", a1[19], v3);\n      sub_47FE20((__int64)\"SPS: lossless_qpprime_y_zero_flag\", *((_DWORD *)off_49F6D0 + 18176), v3);\n      sub_47FE20((__int64)\"SPS: seq_scaling_matrix_present_flag\", a1[9], v3);\n      if ( a1[9] )\n      {\n        v7 = 0LL;\n        v29 = v3;\n        do\n        {\n          sub_47FE20((__int64)\"SPS: seq_scaling_list_present_flag\", v2[v7 + 10], v3);\n          if ( v2[v7 + 10] )\n          {\n            if ( v7 > 5 )\n            {\n              v16 = (unsigned int)(v7 - 6);\n              v17 = 8;\n              v18 = 0LL;\n              v19 = 8;\n              do\n              {\n                v20 = (unsigned __int8)byte_491310[v18];\n                if ( !v17 )\n                  goto LABEL_54;\n                v21 = word_4F87E0[64 * v16 + v20] - v19;\n                if ( v21 < 128 )\n                {\n                  v23 = v21 + 256;\n                  if ( v21 >= -128 )\n                    v23 = word_4F87E0[64 * v16 + v20] - v19;\n                  v22 = v23;\n                }\n                else\n                {\n                  v22 = v21 - 256;\n                }\n                sub_47FCC0((__int64)\"   : delta_sl   \", v22, v29);\n                v17 = word_4F87E0[64 * v16 + v20];\n                *((_WORD *)&dword_4FA160 + v16) |= v17 == 0 && v18 == 0;\n                v24 = v17;\n                if ( !v17 )\n                {\nLABEL_54:\n                  v17 = 0;\n                  v24 = v19;\n                }\n                word_4F86E0[64 * v16 + v20] = v24;\n                ++v18;\n                v19 = v24;\n              }\n              while ( v18 != 64 );\n            }\n            else\n            {\n              v8 = 8;\n              v9 = 0LL;\n              v10 = 8;\n              do\n              {\n                v11 = (unsigned __int8)byte_4897A0[v9];\n                if ( !v8 )\n                  goto LABEL_55;\n                v12 = word_4F8BA0[16 * v7 + v11] - v10;\n                if ( v12 < 128 )\n                {\n                  v14 = v12 + 256;\n                  if ( v12 >= -128 )\n                    v14 = word_4F8BA0[16 * v7 + v11] - v10;\n                  v13 = v14;\n                }\n                else\n                {\n                  v13 = v12 - 256;\n                }\n                sub_47FCC0((__int64)\"   : delta_sl   \", v13, v29);\n                v8 = word_4F8BA0[16 * v7 + v11];\n                *((_WORD *)&qword_4F9C70 + v7) |= v8 == 0 && v9 == 0;\n                v15 = v8;\n                if ( !v8 )\n                {\nLABEL_55:\n                  v8 = 0;\n                  v15 = v10;\n                }\n                word_4F8AE0[16 * v7 + v11] = v15;\n                ++v9;\n                v10 = v15;\n              }\n              while ( v9 != 16 );\n            }\n          }\n          ++v7;\n          v3 = v29;\n          v2 = (int *)a1;\n        }\n        while ( v7 != 8 );\n      }\n    }\n  }\n  sub_47FA90((__int64)\"SPS: log2_max_frame_num_minus4\", v2[20], v3);\n  sub_47FA90((__int64)\"SPS: pic_order_cnt_type\", v2[21], v3);\n  v25 = v2[21];\n  if ( v25 == 1 )\n  {\n    sub_47FE20((__int64)\"SPS: delta_pic_order_always_zero_flag\", v2[23], v3);\n    sub_47FCC0((__int64)\"SPS: offset_for_non_ref_pic\", v2[24], v3);\n    sub_47FCC0((__int64)\"SPS: offset_for_top_to_bottom_field\", v2[25], v3);\n    sub_47FA90((__int64)\"SPS: num_ref_frames_in_pic_order_cnt_cycle\", v2[26], v3);\n    if ( v2[26] )\n    {\n      v26 = 0LL;\n      do\n        sub_47FCC0((__int64)\"SPS: offset_for_ref_frame\", v2[v26++ + 27], v3);\n      while ( v26 < (unsigned int)v2[26] );\n    }\n  }\n  else if ( !v25 )\n  {\n    sub_47FA90((__int64)\"SPS: log2_max_pic_order_cnt_lsb_minus4\", v2[22], v3);\n  }\n  sub_47FA90((__int64)\"SPS: num_ref_frames\", v2[283], v3);\n  sub_47FE20((__int64)\"SPS: gaps_in_frame_num_value_allowed_flag\", v2[284], v3);\n  sub_47FA90((__int64)\"SPS: pic_width_in_mbs_minus1\", v2[285], v3);\n  sub_47FA90((__int64)\"SPS: pic_height_in_map_units_minus1\", v2[286], v3);\n  sub_47FE20((__int64)\"SPS: frame_mbs_only_flag\", v2[287], v3);\n  if ( !v2[287] )\n    sub_47FE20((__int64)\"SPS: mb_adaptive_frame_field_flag\", v2[288], v3);\n  sub_47FE20((__int64)\"SPS: direct_8x8_inference_flag\", v2[289], v3);\n  sub_47FE20((__int64)\"SPS: frame_cropping_flag\", v2[290], v3);\n  if ( v2[290] )\n  {\n    sub_47FA90((__int64)\"SPS: frame_cropping_rect_left_offset\", v2[291], v3);\n    sub_47FA90((__int64)\"SPS: frame_cropping_rect_right_offset\", v2[292], v3);\n    sub_47FA90((__int64)\"SPS: frame_cropping_rect_top_offset\", v2[293], v3);\n    sub_47FA90((__int64)\"SPS: frame_cropping_rect_bottom_offset\", v2[294], v3);\n  }\n  sub_47FE20((__int64)\"SPS: vui_parameters_present_flag\", v2[295], v3);\n  if ( v2[295] )\n  {\n    if ( !*((_DWORD *)dest + 828) || *((_DWORD *)dest + 18) != 3 )\n    {\n      puts(\"Sequence Parameter VUI not yet implemented, this should never happen, exit\");\n      exit(-1);\n    }\n    puts(\"test: writing Sequence Parameter VUI to signal RGB format\");\n    sub_47FE20((__int64)\"VUI: aspect_ratio_info_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: overscan_info_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: video_signal_type_present_flag\", 1, v3);\n    sub_47FEE0(3u, (__int64)\"VUI: video format\", 2, v3);\n    sub_47FE20((__int64)\"VUI: video_full_range_flag\", 1, v3);\n    sub_47FE20((__int64)\"VUI: color_description_present_flag\", 1, v3);\n    sub_47FEE0(8u, (__int64)\"VUI: colour primaries\", 2, v3);\n    sub_47FEE0(8u, (__int64)\"VUI: transfer characteristics\", 2, v3);\n    sub_47FEE0(8u, (__int64)\"VUI: matrix coefficients\", 0, v3);\n    sub_47FE20((__int64)\"VUI: chroma_loc_info_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: timing_info_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: nal_hrd_parameters_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: vcl_hrd_parameters_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: pic_struc_present_flag\", 0, v3);\n    sub_47FE20((__int64)\"VUI: bitstream_restriction_flag\", 0, v3);\n  }\n  sub_452360(*v3);\n  v27 = **v3;\n  free(*v3);\n  free(v3);\n  return v27;\n}\n", 
            "funcStartAddr": "0x454a00L", 
            "funcEndAddr": "0x4550a1L", 
            "funcName": "sub_454A00"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_4550B0(int a1)\n{\n  _DWORD *v1; // rbx\n  int v2; // eax\n  char src; // [rsp+10h] [rbp-FA18h]\n\n  v1 = sub_452700(64000);\n  v2 = sub_455120((__int64)&unk_4D64E0 + 240 * a1, (__int64)&src);\n  sub_452690(&src, v2, 8, (__int64)v1, 3, 0, 1);\n  *v1 = 4;\n  return v1;\n}\n", 
            "funcStartAddr": "0x4550b0L", 
            "funcEndAddr": "0x45511dL", 
            "funcName": "sub_4550B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_455120(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  signed int **v3; // r12\n  signed int *v4; // rax\n  __int64 v5; // rbx\n  unsigned __int64 v6; // rbx\n  unsigned int v7; // eax\n  unsigned int v8; // er14\n  unsigned int v9; // ebx\n  unsigned __int64 v10; // rbx\n  signed __int64 v11; // rax\n  int v12; // esi\n  signed __int64 v13; // rax\n  unsigned __int64 v14; // r15\n  signed int v15; // eax\n  __int64 v16; // rbx\n  signed int v17; // ebp\n  __int64 v18; // r14\n  int v19; // esi\n  int v20; // esi\n  int v21; // eax\n  signed int v22; // ecx\n  __int64 v23; // r13\n  signed int v24; // eax\n  __int64 v25; // rbp\n  signed int v26; // ebx\n  __int64 v27; // r14\n  int v28; // esi\n  int v29; // esi\n  int v30; // eax\n  signed int v31; // ecx\n  unsigned int v32; // ebx\n  signed int **v34; // [rsp+8h] [rbp-40h]\n\n  v2 = a1;\n  v3 = (signed int **)calloc(1uLL, 0x78uLL);\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"PicParameterSet:partition\");\n  v4 = (signed int *)calloc(1uLL, 0x30uLL);\n  *v3 = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"PicParameterSet:bitstream\");\n  *((_QWORD *)v4 + 4) = a2;\n  v4[1] = 8;\n  *(_DWORD *)(a1 + 56) = *((_DWORD *)off_49F6D0 + 18123);\n  sub_47FA90((__int64)\"PPS: pic_parameter_set_id\", *(_DWORD *)(a1 + 4), v3);\n  sub_47FA90((__int64)\"PPS: seq_parameter_set_id\", *(_DWORD *)(a1 + 8), v3);\n  sub_47FE20((__int64)\"PPS: entropy_coding_mode_flag\", *(_DWORD *)(a1 + 12), v3);\n  sub_47FE20((__int64)\"PPS: pic_order_present_flag\", *(_DWORD *)(a1 + 56), v3);\n  sub_47FA90((__int64)\"PPS: num_slice_groups_minus1\", *(_DWORD *)(a1 + 60), v3);\n  if ( *(_DWORD *)(a1 + 60) )\n  {\n    sub_47FA90((__int64)\"PPS: slice_group_map_type\", *(_DWORD *)(a1 + 64), v3);\n    v5 = *(unsigned int *)(a1 + 64);\n    switch ( v5 )\n    {\n      case 0LL:\n        do\n        {\n          sub_47FA90((__int64)\"PPS: run_length_minus1[i]\", *(_DWORD *)(a1 + 4LL * (unsigned int)v5 + 68), v3);\n          LODWORD(v5) = v5 + 1;\n        }\n        while ( (unsigned int)v5 <= *(_DWORD *)(a1 + 60) );\n        break;\n      case 2LL:\n        if ( *(_DWORD *)(a1 + 60) )\n        {\n          v6 = 0LL;\n          do\n          {\n            sub_47FA90((__int64)\"PPS: top_left[i]\", *(_DWORD *)(a1 + 4 * v6 + 100), v3);\n            sub_47FA90((__int64)\"PPS: bottom_right[i]\", *(_DWORD *)(a1 + 4 * v6++ + 132), v3);\n          }\n          while ( v6 < *(unsigned int *)(a1 + 60) );\n        }\n        break;\n      case 3LL:\n      case 4LL:\n      case 5LL:\n        sub_47FE20((__int64)\"PPS: slice_group_change_direction_flag\", *(_DWORD *)(a1 + 164), v3);\n        sub_47FA90((__int64)\"PPS: slice_group_change_rate_minus1\", *(_DWORD *)(a1 + 168), v3);\n        break;\n      case 6LL:\n        v7 = *(_DWORD *)(a1 + 60);\n        v8 = 3;\n        if ( v7 <= 3 )\n        {\n          v8 = 2;\n          if ( v7 <= 1 )\n            v8 = v7 == 1;\n        }\n        sub_47FA90((__int64)\"PPS: pic_size_in_map_units_minus1\", *(_DWORD *)(a1 + 172), v3);\n        v9 = 0;\n        do\n          sub_47FEE0(v8, (__int64)\"PPS: >slice_group_id[i]\", *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + v9++), v3);\n        while ( v9 <= *(_DWORD *)(a1 + 172) );\n        break;\n      default:\n        break;\n    }\n  }\n  sub_47FA90((__int64)\"PPS: num_ref_idx_l0_active_minus1\", *(_DWORD *)(a1 + 184), v3);\n  sub_47FA90((__int64)\"PPS: num_ref_idx_l1_active_minus1\", *(_DWORD *)(a1 + 188), v3);\n  sub_47FE20((__int64)\"PPS: weighted_pred_flag\", *(_DWORD *)(a1 + 192), v3);\n  sub_47FEE0(2u, (__int64)\"PPS: weighted_bipred_idc\", *(_DWORD *)(a1 + 196), v3);\n  sub_47FCC0((__int64)\"PPS: pic_init_qp_minus26\", *(_DWORD *)(a1 + 200), v3);\n  sub_47FCC0((__int64)\"PPS: pic_init_qs_minus26\", *(_DWORD *)(a1 + 204), v3);\n  v10 = (unsigned int)(*(_DWORD *)dest - 100);\n  if ( (unsigned int)v10 <= 0x2C && (v11 = 17592190239745LL, _bittest64(&v11, v10)) )\n    v12 = *(_DWORD *)(a1 + 212);\n  else\n    v12 = *(_DWORD *)(a1 + 208);\n  sub_47FCC0((__int64)\"PPS: chroma_qp_index_offset\", v12, v3);\n  sub_47FE20((__int64)\"PPS: deblocking_filter_control_present_flag\", *(_DWORD *)(a1 + 220), v3);\n  sub_47FE20((__int64)\"PPS: constrained_intra_pred_flag\", *(_DWORD *)(a1 + 224), v3);\n  sub_47FE20((__int64)\"PPS: redundant_pic_cnt_present_flag\", *(_DWORD *)(a1 + 228), v3);\n  if ( (unsigned int)v10 <= 0x2C )\n  {\n    v13 = 17592190239745LL;\n    if ( _bittest64(&v13, v10) )\n    {\n      sub_47FE20((__int64)\"PPS: transform_8x8_mode_flag\", *(_DWORD *)(a1 + 16), v3);\n      sub_47FE20((__int64)\"PPS: pic_scaling_matrix_present_flag\", *(_DWORD *)(a1 + 20), v3);\n      if ( *(_DWORD *)(a1 + 20) && (*(_DWORD *)(a1 + 16) & 0x7FFFFFFF) != 2147483645 )\n      {\n        v14 = 0LL;\n        v34 = v3;\n        do\n        {\n          sub_47FE20((__int64)\"PPS: pic_scaling_list_present_flag\", *(_DWORD *)(v2 + 4 * v14 + 24), v3);\n          if ( *(_DWORD *)(v2 + 4 * v14 + 24) )\n          {\n            if ( v14 > 5 )\n            {\n              v23 = (unsigned int)(v14 - 6);\n              v24 = 8;\n              v25 = 0LL;\n              v26 = 8;\n              do\n              {\n                v27 = (unsigned __int8)byte_491310[v25];\n                if ( !v24 )\n                  goto LABEL_56;\n                v28 = word_4F87E0[64 * v23 + v27] - v26;\n                if ( v28 < 128 )\n                {\n                  v30 = v28 + 256;\n                  if ( v28 >= -128 )\n                    v30 = word_4F87E0[64 * v23 + v27] - v26;\n                  v29 = v30;\n                }\n                else\n                {\n                  v29 = v28 - 256;\n                }\n                sub_47FCC0((__int64)\"   : delta_sl   \", v29, v34);\n                v24 = word_4F87E0[64 * v23 + v27];\n                *((_WORD *)&dword_4FA160 + v23) |= v24 == 0 && v25 == 0;\n                v31 = v24;\n                if ( !v24 )\n                {\nLABEL_56:\n                  v24 = 0;\n                  v31 = v26;\n                }\n                word_4F86E0[64 * v23 + v27] = v31;\n                ++v25;\n                v26 = v31;\n              }\n              while ( v25 != 64 );\n            }\n            else\n            {\n              v15 = 8;\n              v16 = 0LL;\n              v17 = 8;\n              do\n              {\n                v18 = (unsigned __int8)byte_4897A0[v16];\n                if ( !v15 )\n                  goto LABEL_57;\n                v19 = word_4F8BA0[16 * v14 + v18] - v17;\n                if ( v19 < 128 )\n                {\n                  v21 = v19 + 256;\n                  if ( v19 >= -128 )\n                    v21 = word_4F8BA0[16 * v14 + v18] - v17;\n                  v20 = v21;\n                }\n                else\n                {\n                  v20 = v19 - 256;\n                }\n                sub_47FCC0((__int64)\"   : delta_sl   \", v20, v34);\n                v15 = word_4F8BA0[16 * v14 + v18];\n                *((_WORD *)&qword_4F9C70 + v14) |= v15 == 0 && v16 == 0;\n                v22 = v15;\n                if ( !v15 )\n                {\nLABEL_57:\n                  v15 = 0;\n                  v22 = v17;\n                }\n                word_4F8AE0[16 * v14 + v18] = v22;\n                ++v16;\n                v17 = v22;\n              }\n              while ( v16 != 16 );\n            }\n          }\n          ++v14;\n          v2 = a1;\n          v3 = v34;\n        }\n        while ( v14 < (unsigned int)(2 * *(_DWORD *)(a1 + 16) + 6) );\n      }\n      sub_47FCC0((__int64)\"PPS: second_chroma_qp_index_offset\", *(_DWORD *)(v2 + 216), v3);\n    }\n  }\n  sub_452360(*v3);\n  v32 = **v3;\n  free(*v3);\n  free(v3);\n  return v32;\n}\n", 
            "funcStartAddr": "0x455120L", 
            "funcEndAddr": "0x455670L", 
            "funcName": "sub_455120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_455670(__int64 a1, __int64 a2, unsigned int a3, _WORD *a4, __int64 a5)\n{\n  char *v5; // r14\n  char *v6; // r15\n  __int64 v7; // r12\n  unsigned int v8; // ebp\n  signed int v9; // eax\n  signed int v10; // er13\n  char *v11; // rcx\n  __int64 v12; // rbx\n  int v13; // esi\n  int v14; // esi\n  int v15; // eax\n  signed int v16; // ecx\n  unsigned int v18; // [rsp+4h] [rbp-54h]\n  __int64 v19; // [rsp+8h] [rbp-50h]\n  _WORD *v20; // [rsp+10h] [rbp-48h]\n  signed int **v21; // [rsp+18h] [rbp-40h]\n  __int64 v22; // [rsp+20h] [rbp-38h]\n\n  v21 = (signed int **)a5;\n  v20 = a4;\n  v22 = a2;\n  if ( (signed int)a3 <= 0 )\n  {\n    v8 = 0;\n  }\n  else\n  {\n    v5 = byte_491310;\n    v6 = byte_4897A0;\n    v7 = a3;\n    v8 = 0;\n    v9 = 8;\n    v10 = 8;\n    v18 = a3;\n    v19 = a1;\n    do\n    {\n      v11 = v5;\n      if ( a3 == 16 )\n        v11 = v6;\n      v12 = (unsigned __int8)*v11;\n      if ( !v9 )\n        goto LABEL_19;\n      v13 = *(signed __int16 *)(a1 + 2 * v12) - v10;\n      if ( v13 < 128 )\n      {\n        v15 = v13 + 256;\n        if ( v13 >= -128 )\n          v15 = *(signed __int16 *)(a1 + 2 * v12) - v10;\n        v14 = v15;\n      }\n      else\n      {\n        v14 = v13 - 256;\n      }\n      v8 += sub_47FCC0((__int64)\"   : delta_sl   \", v14, v21);\n      a1 = v19;\n      v9 = *(signed __int16 *)(v19 + 2 * v12);\n      *v20 |= v9 == 0 && (_BYTE)v12 == 0;\n      v16 = v9;\n      a3 = v18;\n      if ( !v9 )\n      {\nLABEL_19:\n        v9 = 0;\n        v16 = v10;\n      }\n      *(_WORD *)(v22 + 2 * v12) = v16;\n      ++v5;\n      ++v6;\n      v10 = v16;\n      --v7;\n    }\n    while ( v7 );\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x455670L", 
            "funcEndAddr": "0x455771L", 
            "funcName": "sub_455670"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_455780()\n{\n  _QWORD *v0; // rbx\n  void *v1; // rax\n\n  v0 = calloc(0xF0uLL, 1uLL);\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"AllocPPS: PPS\");\n  v1 = calloc(0xEA60uLL, 1uLL);\n  v0[22] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"AllocPPS: slice_group_id\");\n  return v0;\n}\n", 
            "funcStartAddr": "0x455780L", 
            "funcEndAddr": "0x4557ccL", 
            "funcName": "sub_455780"
        }, 
        {
            "decompiledFuncCode": "void *sub_4557D0()\n{\n  void *result; // rax\n\n  result = calloc(0x854uLL, 1uLL);\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"AllocSPS: SPS\");\n  return result;\n}\n", 
            "funcStartAddr": "0x4557d0L", 
            "funcEndAddr": "0x4557f7L", 
            "funcName": "sub_4557D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_455800(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  v2 = (void *)*((_QWORD *)ptr + 22);\n  if ( v2 )\n    free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x455800L", 
            "funcEndAddr": "0x45581eL", 
            "funcName": "sub_455800"
        }, 
        {
            "decompiledFuncCode": "void j__free(void *ptr)\n{\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x455820L", 
            "funcEndAddr": "0x455825L", 
            "funcName": "j_.free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_455830(char *s2, _DWORD *a2)\n{\n  unsigned int v2; // ebp\n\n  *a2 = 0;\n  v2 = 0;\n  if ( strcmp(\"INTRA4X4_LUMA\", s2) )\n  {\n    if ( !strcmp(\"INTRA4X4_CHROMAU\", s2) )\n    {\n      v2 = 1;\n    }\n    else if ( !strcmp(\"INTRA4X4_CHROMAV\", s2) )\n    {\n      v2 = 2;\n    }\n    else if ( !strcmp(\"INTER4X4_LUMA\", s2) )\n    {\n      v2 = 3;\n    }\n    else if ( !strcmp(\"INTER4X4_CHROMAU\", s2) )\n    {\n      v2 = 4;\n    }\n    else if ( !strcmp(\"INTER4X4_CHROMAV\", s2) )\n    {\n      v2 = 5;\n    }\n    else\n    {\n      *a2 = 1;\n      if ( strcmp(\"INTRA8X8_LUMA\", s2) )\n        v2 = 2 * (strcmp(\"INTER8X8_LUMA\", s2) == 0) - 1;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x455830L", 
            "funcEndAddr": "0x455909L", 
            "funcName": "sub_455830"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_455910(char *a1, int a2)\n{\n  char *v2; // rax\n  int v3; // edx\n  int v4; // ecx\n  char *v5; // rsi\n  __int64 v6; // rdx\n  char *v7; // rdx\n  signed __int64 v8; // rdi\n  __int64 v10; // rsi\n  int v11; // ebp\n  char *v12; // rbx\n  int v13; // er14\n  int *v14; // rsi\n  __int16 *v15; // r13\n  unsigned __int64 v16; // r12\n  char **v17; // r15\n  unsigned __int64 v18; // r14\n  char *v19; // rbp\n  signed int v20; // [rsp+Ch] [rbp-1F8Ch]\n  int v21; // [rsp+Ch] [rbp-1F8Ch]\n  int v22; // [rsp+10h] [rbp-1F88h]\n  __int16 v23; // [rsp+14h] [rbp-1F84h]\n  __int64 v24; // [rsp+18h] [rbp-1F80h]\n  char *v25; // [rsp+20h] [rbp-1F78h]\n  char *s2[1006]; // [rsp+28h] [rbp-1F70h]\n\n  if ( a2 <= 0 )\n    return;\n  v2 = &a1[a2];\n  v20 = 0;\n  v3 = 0;\n  v4 = 0;\n  while ( 2 )\n  {\n    switch ( *a1 )\n    {\n      case 9:\n      case 32:\n        v5 = a1 + 1;\n        if ( v4 )\n        {\n          ++a1;\n          if ( v5 < v2 )\n            continue;\n        }\n        else\n        {\n          *a1 = 0;\n          v4 = 0;\n          v3 = 0;\n          ++a1;\n          if ( v5 < v2 )\n            continue;\n        }\n        goto LABEL_28;\n      case 10:\n        *a1++ = 0;\n        v4 = 0;\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      case 13:\n        goto LABEL_9;\n      case 34:\n        *a1++ = 0;\n        if ( v4 )\n        {\n          v3 = 0;\n          v4 = ~v4;\n          if ( a1 >= v2 )\n            goto LABEL_28;\n          continue;\n        }\n        v10 = v20++;\n        (&v25)[v10] = a1;\n        v3 = ~v3;\n        v4 = -1;\n        if ( a1 < v2 )\n          continue;\nLABEL_28:\n        if ( v20 >= 2 )\n        {\n          v21 = v20 - 1;\n          v11 = 0;\n          do\n          {\n            v12 = (&v25)[v11];\n            v13 = sub_455830((&v25)[v11], &v22);\n            if ( v13 < 0 )\n            {\n              snprintf(byte_4F8250, 0x12CuLL, \" Parsing error in config file: Parameter Name '%s' not recognized.\", v12);\n              error((__int64)byte_4F8250, 300);\n            }\n            if ( strcmp(\"=\", s2[v11]) )\n            {\n              snprintf(\n                byte_4F8250,\n                0x12CuLL,\n                \" Parsing error in config file: '=' expected as the second token in each item.\");\n              error((__int64)byte_4F8250, 300);\n            }\n            v14 = &dword_4A0070[v13];\n            v15 = &word_4F8BA0[16 * v13];\n            if ( v22 )\n              v14 = &dword_4A0088[v13];\n            v16 = 64LL;\n            if ( !v22 )\n              v16 = 16LL;\n            if ( v22 )\n              v15 = &word_4F87E0[64 * (signed __int64)v13];\n            *v14 = 1;\n            v24 = (unsigned int)(v11 + 2);\n            v17 = &(&v25)[v24];\n            v18 = 0LL;\n            do\n            {\n              v19 = v17[v18];\n              if ( (unsigned int)__isoc99_sscanf(v17[v18], \"%d\", &v23) != 1 )\n              {\n                snprintf(\n                  byte_4F8250,\n                  0x12CuLL,\n                  \" Parsing error: Expected numerical value for Parameter of %s, found '%s'.\",\n                  v12,\n                  v19);\n                error((__int64)byte_4F8250, 300);\n              }\n              v15[v18++] = v23;\n            }\n            while ( v18 < v16 );\n            putchar(46);\n            v11 = v18 + v24;\n          }\n          while ( (signed int)v18 + (signed int)v24 < v21 );\n        }\n        return;\n      case 35:\n        *a1 = 0;\n        v4 = 0;\n        if ( a1 < v2 )\n        {\n          v7 = a1 + 1;\n          do\n          {\n            v8 = (signed __int64)(v7 + 1);\n            if ( v7 >= v2 )\n              break;\n          }\n          while ( *v7++ != 10 );\n          a1 = (char *)(v8 - 1);\n        }\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      case 44:\n        ++a1;\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      default:\n        if ( !v3 )\n        {\n          v6 = v20++;\n          (&v25)[v6] = a1;\n          v3 = -1;\n        }\nLABEL_9:\n        if ( ++a1 >= v2 )\n          goto LABEL_28;\n        continue;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x455910L", 
            "funcEndAddr": "0x455bcaL", 
            "funcName": "sub_455910"
        }, 
        {
            "decompiledFuncCode": "int sub_455BD0()\n{\n  unsigned __int16 *v0; // r14\n  unsigned __int64 v1; // rbx\n  unsigned __int64 v2; // rax\n  __int16 *v3; // r15\n  __int16 *v4; // r15\n\n  v0 = (unsigned __int16 *)&unk_4F87E6;\n  v1 = 0LL;\n  do\n  {\n    LODWORD(v2) = (_DWORD)dest;\n    if ( *((_DWORD *)dest + v1 + 815) )\n    {\n      v2 = 32 * v1;\n      v3 = &word_4F8BA0[16 * v1];\n      if ( !dword_4A0070[v1] )\n      {\n        LODWORD(v2) = printf(\"\\n%s matrix definition not found. Setting default values.\", &aIntra4x4Luma[20 * v1]);\n        if ( v1 >= 3 )\n        {\nLABEL_21:\n          *((_OWORD *)v3 + 1) = xmmword_48A470;\n          *(_OWORD *)v3 = xmmword_48A460;\n          goto LABEL_37;\n        }\n        goto LABEL_23;\n      }\n      if ( (unsigned __int16)*v3 > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BA2 + v2) >= 0x100u\n        || *(unsigned __int16 *)((char *)&word_4F8BA4 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BA6 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BA8 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BAA + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BAC + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BAE + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BB0 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BB2 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BB4 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BB6 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BB8 + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BBA + v2) > 0xFFu\n        || *(unsigned __int16 *)((char *)&word_4F8BBC + v2) > 0xFFu\n        || (LODWORD(v2) = *(unsigned __int16 *)((char *)&word_4F8BBE + v2), (unsigned int)v2 > 0xFF) )\n      {\n        printf(\"\\n%s value exceed range. (Value must be 1 to 255)\\n\", &aIntra4x4Luma[20 * v1]);\n        LODWORD(v2) = printf(\"Setting default values for this matrix.\");\n        if ( v1 >= 3 )\n          goto LABEL_21;\nLABEL_23:\n        *((_OWORD *)v3 + 1) = xmmword_48A490;\n        *(_OWORD *)v3 = xmmword_48A480;\n        goto LABEL_24;\n      }\n    }\nLABEL_24:\n    if ( v1 <= 1 )\n    {\n      LODWORD(v2) = (_DWORD)dest;\n      if ( *((_DWORD *)dest + v1 + 821) )\n      {\n        v4 = &word_4F87E0[64 * v1];\n        if ( dword_4A0088[v1] )\n        {\n          v2 = 0LL;\n          while ( v0[v2 - 3] < 0x100u && v0[v2 - 2] <= 0xFFu && v0[v2 - 1] <= 0xFFu && v0[v2] <= 0xFFu )\n          {\n            v2 += 4LL;\n            if ( v2 >= 0x40 )\n              goto LABEL_37;\n          }\n          printf(\"\\n%s value exceed range. (Value must be 1 to 255)\\n\", &aIntra8x8Luma[20 * v1]);\n          LODWORD(v2) = printf(\"Setting default values for this matrix.\");\n        }\n        else\n        {\n          LODWORD(v2) = printf(\"\\n%s matrix definition not found. Setting default values.\", &aIntra8x8Luma[20 * v1]);\n        }\n        *(_OWORD *)v4 = xmmword_4915A0[0];\n        *((_OWORD *)v4 + 1) = xmmword_4915B0;\n        *((_OWORD *)v4 + 2) = xmmword_4915C0;\n        *((_OWORD *)v4 + 3) = xmmword_4915D0;\n        *((_OWORD *)v4 + 4) = xmmword_4915E0;\n        *((_OWORD *)v4 + 5) = xmmword_4915F0;\n        *((_OWORD *)v4 + 6) = xmmword_491600;\n        *((_OWORD *)v4 + 7) = xmmword_491610;\n      }\n    }\nLABEL_37:\n    ++v1;\n    v0 += 64;\n  }\n  while ( v1 != 6 );\n  return v2;\n}\n", 
            "funcStartAddr": "0x455bd0L", 
            "funcEndAddr": "0x455ef8L", 
            "funcName": "sub_455BD0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_455F00(__int64 a1@<rbx>)\n{\n  __int64 v1; // rax\n  const char *v2; // rax\n  char *v3; // rbx\n  int v4; // eax\n\n  if ( *((_DWORD *)dest + 814) )\n  {\n    LODWORD(v1) = printf(\"Parsing QMatrix file %s \", (char *)dest + 1024, a1);\n    v2 = sub_40E590(v1, (const char *)dest + 1024);\n    v3 = (char *)v2;\n    if ( v2 )\n    {\n      v4 = strlen(v2);\n      sub_455910(v3, v4);\n    }\n    else\n    {\n      printf(\"\\nError: %s\\nProceeding with default values for all matrices.\", byte_4F8250);\n    }\n    sub_455BD0();\n    putchar(10);\n    dword_4F9C78 = 0;\n    qword_4F9C70 = 0LL;\n    dword_4FA160 = 0;\n    free(v3);\n  }\n}\n", 
            "funcStartAddr": "0x455f00L", 
            "funcEndAddr": "0x455f9cL", 
            "funcName": "sub_455F00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_455FA0()\n{\n  _DWORD *v0; // rdx\n  int v1; // ecx\n  int v2; // eax\n  int v3; // kr08_4\n  signed __int64 v4; // r13\n  signed __int64 v5; // rcx\n  unsigned __int64 v6; // r8\n  signed __int64 result; // rax\n  char *v8; // rcx\n  __int128 *v9; // r14\n  char *v10; // rbp\n  char *v11; // r10\n  char *v12; // rsi\n  char *v13; // r9\n  __int128 *v14; // r15\n  __int64 v15; // rdi\n  int v16; // er12\n  int v17; // ebx\n  int v18; // er11\n  int v19; // er10\n  int v20; // eax\n  char *v21; // rax\n  int v22; // er10\n  char *v23; // rax\n  int v24; // er10\n  char *v25; // rax\n  char *v26; // rbp\n  int v27; // esi\n  int v28; // eax\n  int v29; // ebx\n  char *v30; // r10\n  char *v31; // rax\n  int v32; // ebx\n  int v33; // ebp\n  __int128 v34; // xmm0\n  __m128i v35; // xmm1\n  __int128 v36; // xmm0\n  __m128i v37; // xmm1\n  __int128 v38; // xmm0\n  __m128i v39; // xmm1\n  __int128 v40; // xmm0\n  __m128i v41; // xmm1\n  bool v42; // [rsp+0h] [rbp-A2h]\n  bool v43; // [rsp+1h] [rbp-A1h]\n  __int16 v44; // [rsp+6h] [rbp-9Ch]\n  __int16 v45; // [rsp+8h] [rbp-9Ah]\n  __int128 v46; // [rsp+Ah] [rbp-98h]\n  int v47; // [rsp+2Ah] [rbp-78h]\n  int v48; // [rsp+2Eh] [rbp-74h]\n  int v49; // [rsp+32h] [rbp-70h]\n  int v50; // [rsp+36h] [rbp-6Ch]\n  char *v51; // [rsp+3Ah] [rbp-68h]\n  char *v52; // [rsp+42h] [rbp-60h]\n  signed __int64 v53; // [rsp+4Ah] [rbp-58h]\n  signed __int64 v54; // [rsp+52h] [rbp-50h]\n  signed __int64 v55; // [rsp+5Ah] [rbp-48h]\n  char *v56; // [rsp+62h] [rbp-40h]\n\n  if ( *((_DWORD *)qword_4F9DC0 + 9) )\n  {\n    v46 = *(_OWORD *)((char *)qword_4F9DC0 + 40);\n    v0 = (_DWORD *)qword_4F9DB8;\n    if ( !*(_DWORD *)(qword_4F9DB8 + 20) )\n    {\n      v1 = *(_OWORD *)((char *)qword_4F9DC0 + 40);\n      v49 = DWORD2(v46);\n      v50 = DWORD1(v46);\n      v2 = *(_OWORD *)((char *)qword_4F9DC0 + 40) >> 96;\n      v47 = *((_QWORD *)qword_4F9DC0 + 7) >> 32;\n      v48 = *((_QWORD *)qword_4F9DC0 + 7);\n      goto LABEL_7;\n    }\n  }\n  else\n  {\n    v0 = (_DWORD *)qword_4F9DB8;\n    if ( !*(_DWORD *)(qword_4F9DB8 + 20) )\n    {\n      result = 0LL;\n      do\n      {\n        v34 = *(__int128 *)((char *)&xmmword_48A080 + result);\n        *(__int128 *)((char *)xmmword_4F7DD0 + result) = v34;\n        *(__int128 *)((char *)&xmmword_4F7C50 + result) = v34;\n        v35 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_48A200 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)xmmword_4F7AD0 + result), v35);\n        *(__int128 *)((char *)xmmword_4F6250 + result) = v34;\n        _mm_store_si128((__m128i *)((char *)xmmword_4F5C50 + result), v35);\n        *(__int128 *)((char *)&xmmword_4F63D0 + result) = v34;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5DD0 + result), v35);\n        _mm_store_si128((__m128i *)((char *)xmmword_4F7950 + result), v35);\n        *(__int128 *)((char *)xmmword_4F5F50 + result) = v34;\n        _mm_store_si128((__m128i *)((char *)xmmword_4F5950 + result), v35);\n        *(__int128 *)((char *)&xmmword_4F60D0 + result) = v34;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5AD0 + result), v35);\n        v36 = *(__int128 *)((char *)&xmmword_48A090 + result);\n        *(__int128 *)((char *)&xmmword_4F7DE0 + result) = v36;\n        *(__int128 *)((char *)&xmmword_4F7C60 + result) = v36;\n        v37 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_48A210 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F7AE0 + result), v37);\n        *(__int128 *)((char *)&xmmword_4F6260 + result) = v36;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5C60 + result), v37);\n        *(__int128 *)((char *)&xmmword_4F63E0 + result) = v36;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5DE0 + result), v37);\n        _mm_store_si128((__m128i *)((char *)xmmword_4F7960 + result), v37);\n        *(__int128 *)((char *)&xmmword_4F5F60 + result) = v36;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5960 + result), v37);\n        *(__int128 *)((char *)&xmmword_4F60E0 + result) = v36;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5AE0 + result), v37);\n        v38 = *(__int128 *)((char *)&xmmword_48A0A0 + result);\n        *(__int128 *)((char *)&xmmword_4F7DF0 + result) = v38;\n        *(__int128 *)((char *)&xmmword_4F7C70 + result) = v38;\n        v39 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_48A220 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F7AF0 + result), v39);\n        *(__int128 *)((char *)&xmmword_4F6270 + result) = v38;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5C70 + result), v39);\n        *(__int128 *)((char *)&xmmword_4F63F0 + result) = v38;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5DF0 + result), v39);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F7970 + result), v39);\n        *(__int128 *)((char *)&xmmword_4F5F70 + result) = v38;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5970 + result), v39);\n        *(__int128 *)((char *)&xmmword_4F60F0 + result) = v38;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5AF0 + result), v39);\n        v40 = *(__int128 *)((char *)&xmmword_48A0B0 + result);\n        *(__int128 *)((char *)&xmmword_4F7E00 + result) = v40;\n        *(__int128 *)((char *)&xmmword_4F7C80 + result) = v40;\n        v41 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_48A230 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F7B00 + result), v41);\n        *(__int128 *)((char *)&xmmword_4F6280 + result) = v40;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5C80 + result), v41);\n        *(__int128 *)((char *)&xmmword_4F6400 + result) = v40;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5E00 + result), v41);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F7980 + result), v41);\n        *(__int128 *)((char *)&xmmword_4F5F80 + result) = v40;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5980 + result), v41);\n        *(__int128 *)((char *)&xmmword_4F6100 + result) = v40;\n        _mm_store_si128((__m128i *)((char *)&xmmword_4F5B00 + result), v41);\n        result += 64LL;\n      }\n      while ( result != 384 );\n      return result;\n    }\n    v46 = 0LL;\n  }\n  v1 = v0[6] | v46;\n  v50 = v0[7];\n  v49 = v0[8];\n  v2 = v0[9] | HIDWORD(v46);\n  v48 = v0[10];\n  v47 = v0[11];\nLABEL_7:\n  v43 = v1 != 0 && (_WORD)qword_4F9C70 == 0;\n  v45 = WORD1(qword_4F9C70);\n  v42 = v2 != 0 && HIWORD(qword_4F9C70) == 0;\n  v44 = WORD2(qword_4F9C70);\n  v3 = dword_4F9C78;\n  v4 = 0LL;\n  v5 = 0LL;\n  do\n  {\n    v53 = v5;\n    v6 = 0LL;\n    v54 = v4;\n    result = 0LL;\n    do\n    {\n      v55 = result;\n      v8 = (char *)&unk_4F8B00;\n      v9 = &xmmword_48A480;\n      v10 = (char *)&unk_4F8B20;\n      v11 = (char *)&unk_4F8B60;\n      v12 = (char *)&unk_4F8B80;\n      v13 = (char *)&unk_4F8B40;\n      v14 = &xmmword_48A460;\n      v15 = 0LL;\n      do\n      {\n        v16 = 16 * *(_DWORD *)((char *)&xmmword_48A080 + v4 + v15);\n        v52 = v11;\n        v51 = v12;\n        if ( v43 )\n          v17 = word_4F8AE0[v15 + v6 / 2];\n        else\n          v17 = *(signed __int16 *)((char *)&xmmword_48A480 + 2 * v15 + v6);\n        v18 = *(_DWORD *)((char *)&xmmword_48A200 + v4 + v15);\n        v19 = v17 * *(_DWORD *)((char *)&xmmword_48A200 + v4 + v15);\n        v20 = v16 / v17;\n        *(_DWORD *)((char *)xmmword_4F7DD0 + v4 + v15) = v16 / v17;\n        *(_DWORD *)((char *)xmmword_4F7AD0 + v4 + v15) = v19;\n        if ( v50 )\n        {\n          v21 = (char *)v9 + v6;\n          if ( !v45 )\n            v21 = &v8[v6];\n          v22 = *(signed __int16 *)v21;\n          v20 = v16 / v22;\n          v19 = v18 * v22;\n        }\n        *(_DWORD *)((char *)xmmword_4F6250 + v4 + v15) = v20;\n        *(_DWORD *)((char *)xmmword_4F5C50 + v4 + v15) = v19;\n        if ( v49 )\n        {\n          v23 = (char *)v9 + v6;\n          if ( !v44 )\n            v23 = &v10[v6];\n          v24 = *(signed __int16 *)v23;\n          v20 = v16 / v24;\n          v19 = v18 * v24;\n        }\n        v56 = v10;\n        *(_DWORD *)((char *)&xmmword_4F63D0 + v4 + v15) = v20;\n        *(_DWORD *)((char *)&xmmword_4F5DD0 + v4 + v15) = v19;\n        v25 = &v13[v6];\n        v26 = (char *)v14 + v6;\n        if ( !v42 )\n          v25 = (char *)v14 + v6;\n        v27 = *(signed __int16 *)v25;\n        v28 = v16 / v27;\n        *(_DWORD *)((char *)&xmmword_4F7C50 + v4 + v15) = v16 / v27;\n        v29 = v27 * v18;\n        *(_DWORD *)((char *)xmmword_4F7950 + v4 + v15) = v27 * v18;\n        if ( v48 )\n        {\n          v30 = v52;\n          v31 = &v52[v6];\n          if ( (_WORD)v3 )\n            v31 = (char *)v14 + v6;\n          v32 = *(signed __int16 *)v31;\n          v28 = v16 / v32;\n          v29 = v18 * v32;\n        }\n        else\n        {\n          v30 = v52;\n        }\n        *(_DWORD *)((char *)xmmword_4F5F50 + v4 + v15) = v28;\n        *(_DWORD *)((char *)xmmword_4F5950 + v4 + v15) = v29;\n        if ( v47 )\n        {\n          if ( !HIWORD(v3) )\n            v26 = &v51[v6];\n          v33 = *(signed __int16 *)v26;\n          v28 = v16 / v33;\n          v29 = v33 * v18;\n        }\n        *(_DWORD *)((char *)&xmmword_4F60D0 + v4 + v15) = v28;\n        *(_DWORD *)((char *)&xmmword_4F5AD0 + v4 + v15) = v29;\n        v15 += 4LL;\n        v14 = (__int128 *)((char *)v14 + 8);\n        v13 += 8;\n        v12 = v51 + 8;\n        v11 = v30 + 8;\n        v10 = v56 + 8;\n        v9 = (__int128 *)((char *)v9 + 8);\n        v8 += 8;\n      }\n      while ( v15 != 16 );\n      result = v55 + 1;\n      v4 += 16LL;\n      v6 += 2LL;\n    }\n    while ( v55 != 3 );\n    v5 = v53 + 1;\n    v4 = v54 + 64;\n  }\n  while ( v53 != 5 );\n  return result;\n}\n", 
            "funcStartAddr": "0x455fa0L", 
            "funcEndAddr": "0x4564edL", 
            "funcName": "sub_455FA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_4564F0()\n{\n  __int64 v0; // rcx\n  int v1; // eax\n  int v2; // edx\n  bool v3; // r10\n  bool v4; // r11\n  signed __int64 result; // rax\n  __int64 v6; // r9\n  unsigned __int64 v7; // r15\n  signed __int64 v8; // r12\n  __int64 v9; // r14\n  char *v10; // rbx\n  const char *v11; // rsi\n  unsigned __int64 v12; // rdi\n  int v13; // ecx\n  int v14; // er13\n  int v15; // er8\n  int v16; // ebp\n  const char *v17; // rax\n  int v18; // ebp\n  signed __int64 v19; // rax\n  __int128 v20; // xmm0\n  __int128 v21; // xmm1\n  __m128i v22; // xmm0\n  __m128i v23; // xmm0\n  signed __int64 v24; // rax\n  __int128 v25; // xmm0\n  __int128 v26; // xmm1\n  __m128i v27; // xmm0\n  __m128i v28; // xmm0\n  signed __int64 v29; // rax\n  __int128 v30; // xmm0\n  __int128 v31; // xmm1\n  __m128i v32; // xmm0\n  __m128i v33; // xmm0\n  signed __int64 v34; // rax\n  __int128 v35; // xmm0\n  __int128 v36; // xmm1\n  __m128i v37; // xmm0\n  __m128i v38; // xmm0\n  signed __int64 v39; // rax\n  __int128 v40; // xmm0\n  __int128 v41; // xmm1\n  __m128i v42; // xmm0\n  __m128i v43; // xmm0\n  __int128 v44; // xmm0\n  __int128 v45; // xmm1\n  __m128i v46; // xmm0\n  __m128i v47; // xmm0\n  __int64 v48; // [rsp+0h] [rbp-40h]\n  signed __int64 v49; // [rsp+8h] [rbp-38h]\n\n  if ( *((_DWORD *)qword_4F9DC0 + 9) )\n  {\n    v48 = *((_QWORD *)qword_4F9DC0 + 8);\n    v0 = qword_4F9DB8;\n    if ( !*(_DWORD *)(qword_4F9DB8 + 20) )\n    {\n      v1 = *((_QWORD *)qword_4F9DC0 + 8) >> 32;\n      v2 = *((_QWORD *)qword_4F9DC0 + 8);\n      goto LABEL_7;\n    }\n  }\n  else\n  {\n    v0 = qword_4F9DB8;\n    if ( !*(_DWORD *)(qword_4F9DB8 + 20) )\n    {\n      v19 = 1152921504606846960LL;\n      do\n      {\n        v20 = xmmword_491BF0[v19];\n        xmmword_4F0380[v19] = v20;\n        v21 = xmmword_491BE0[v19];\n        xmmword_4F0370[v19] = v21;\n        xmmword_4EFD70[v19] = v21;\n        xmmword_4EFD80[v19] = v20;\n        v22 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4921E0[v19]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF770[v19], v22);\n        _mm_store_si128((__m128i *)&xmmword_4EF170[v19], v22);\n        v23 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4921F0[v19]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF780[v19], v23);\n        _mm_store_si128((__m128i *)&xmmword_4EF180[v19], v23);\n        v19 += 2LL;\n      }\n      while ( v19 * 16 );\n      v24 = 1152921504606846960LL;\n      do\n      {\n        v25 = xmmword_491CF0[v24];\n        xmmword_4F0480[v24] = v25;\n        v26 = xmmword_491CE0[v24];\n        xmmword_4F0470[v24] = v26;\n        xmmword_4EFE70[v24] = v26;\n        xmmword_4EFE80[v24] = v25;\n        v27 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4922E0[v24]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF870[v24], v27);\n        _mm_store_si128((__m128i *)&xmmword_4EF270[v24], v27);\n        v28 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4922F0[v24]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF880[v24], v28);\n        _mm_store_si128((__m128i *)&xmmword_4EF280[v24], v28);\n        v24 += 2LL;\n      }\n      while ( v24 * 16 );\n      v29 = 1152921504606846960LL;\n      do\n      {\n        v30 = xmmword_491DF0[v29];\n        xmmword_4F0580[v29] = v30;\n        v31 = xmmword_491DE0[v29];\n        xmmword_4F0570[v29] = v31;\n        xmmword_4EFF70[v29] = v31;\n        xmmword_4EFF80[v29] = v30;\n        v32 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4923E0[v29]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF970[v29], v32);\n        _mm_store_si128((__m128i *)&xmmword_4EF370[v29], v32);\n        v33 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4923F0[v29]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EF980[v29], v33);\n        _mm_store_si128((__m128i *)&xmmword_4EF380[v29], v33);\n        v29 += 2LL;\n      }\n      while ( v29 * 16 );\n      v34 = 1152921504606846960LL;\n      do\n      {\n        v35 = xmmword_491EF0[v34];\n        xmmword_4F0680[v34] = v35;\n        v36 = xmmword_491EE0[v34];\n        xmmword_4F0670[v34] = v36;\n        xmmword_4F0070[v34] = v36;\n        xmmword_4F0080[v34] = v35;\n        v37 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4924E0[v34]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EFA70[v34], v37);\n        _mm_store_si128((__m128i *)&xmmword_4EF470[v34], v37);\n        v38 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4924F0[v34]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EFA80[v34], v38);\n        _mm_store_si128((__m128i *)&xmmword_4EF480[v34], v38);\n        v34 += 2LL;\n      }\n      while ( v34 * 16 );\n      v39 = 1152921504606846960LL;\n      do\n      {\n        v40 = xmmword_491FF0[v39];\n        xmmword_4F0780[v39] = v40;\n        v41 = xmmword_491FE0[v39];\n        xmmword_4F0770[v39] = v41;\n        xmmword_4F0170[v39] = v41;\n        xmmword_4F0180[v39] = v40;\n        v42 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4925E0[v39]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EFB70[v39], v42);\n        _mm_store_si128((__m128i *)&xmmword_4EF570[v39], v42);\n        v43 = _mm_slli_epi32(_mm_load_si128((const __m128i *)&xmmword_4925F0[v39]), 4u);\n        _mm_store_si128((__m128i *)&xmmword_4EFB80[v39], v43);\n        _mm_store_si128((__m128i *)&xmmword_4EF580[v39], v43);\n        v39 += 2LL;\n      }\n      while ( v39 * 16 );\n      result = -256LL;\n      do\n      {\n        v44 = *(__int128 *)((char *)&xmmword_4920F0 + result);\n        *(__int128 *)((char *)&xmmword_4F0880 + result) = v44;\n        v45 = *(__int128 *)((char *)&xmmword_4920E0 + result);\n        *(__int128 *)((char *)&xmmword_4F0870 + result) = v45;\n        *(__int128 *)((char *)&xmmword_4F0270 + result) = v45;\n        *(__int128 *)((char *)&xmmword_4F0280 + result) = v44;\n        v46 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_4926E0 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4EFC70 + result), v46);\n        _mm_store_si128((__m128i *)((char *)xmmword_4EF670 + result), v46);\n        v47 = _mm_slli_epi32(_mm_load_si128((const __m128i *)((char *)&xmmword_4926F0 + result)), 4u);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4EFC80 + result), v47);\n        _mm_store_si128((__m128i *)((char *)&xmmword_4EF680 + result), v47);\n        result += 32LL;\n      }\n      while ( result );\n      return result;\n    }\n    v48 = 0LL;\n  }\n  v2 = *(_DWORD *)(v0 + 48) | v48;\n  v1 = *(_DWORD *)(v0 + 52) | HIDWORD(v48);\nLABEL_7:\n  v3 = v2 != 0 && (_WORD)dword_4FA160 == 0;\n  v4 = v1 != 0 && HIWORD(dword_4FA160) == 0;\n  result = 0LL;\n  v6 = 0LL;\n  do\n  {\n    v7 = 0LL;\n    v49 = result;\n    v8 = result;\n    v9 = 0LL;\n    do\n    {\n      v10 = (char *)&unk_4F8760;\n      v11 = \"\\t\";\n      v12 = 0LL;\n      do\n      {\n        v13 = 16 * *(int *)((char *)&dword_491AE0 + v8 + v12);\n        if ( v3 )\n          v14 = word_4F86E0[2 * v12 + v7 / 2];\n        else\n          v14 = *(signed __int16 *)((char *)&xmmword_4915A0[v12 / 4] + v7);\n        v15 = *(_DWORD *)((char *)&xmmword_4920E0 + v8 + v12);\n        v16 = v14 * *(_DWORD *)((char *)&xmmword_4920E0 + v8 + v12);\n        *(_DWORD *)((char *)&xmmword_4F0270 + v8 + v12) = v13 / v14;\n        *(_DWORD *)((char *)xmmword_4EF670 + v8 + v12) = v16;\n        v17 = &v11[v7];\n        if ( v4 )\n          v17 = &v10[v7];\n        v18 = *(signed __int16 *)v17;\n        *(_DWORD *)((char *)&xmmword_4EFC70 + v8 + v12) = v13 / v18;\n        *(int *)((char *)dword_4EF070 + v8 + v12) = v18 * v15;\n        v12 += 4LL;\n        v11 += 16;\n        v10 += 16;\n      }\n      while ( v12 != 32 );\n      ++v9;\n      v8 += 32LL;\n      v7 += 2LL;\n    }\n    while ( v9 != 8 );\n    ++v6;\n    result = v49 + 256;\n  }\n  while ( v6 != 6 );\n  return result;\n}\n", 
            "funcStartAddr": "0x4564f0L", 
            "funcEndAddr": "0x45696fL", 
            "funcName": "sub_4564F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_456970(char *s2, _DWORD *a2)\n{\n  unsigned int v2; // ebp\n\n  *a2 = 0;\n  v2 = 0;\n  if ( strcmp(\"INTRA4X4_LUMA_INTRA\", s2) )\n  {\n    if ( !strcmp(\"INTRA4X4_CHROMAU_INTRA\", s2) )\n    {\n      v2 = 1;\n    }\n    else if ( !strcmp(\"INTRA4X4_CHROMAV_INTRA\", s2) )\n    {\n      v2 = 2;\n    }\n    else if ( !strcmp(\"INTRA4X4_LUMA_INTER\", s2) )\n    {\n      v2 = 3;\n    }\n    else if ( !strcmp(\"INTRA4X4_CHROMAU_INTER\", s2) )\n    {\n      v2 = 4;\n    }\n    else if ( !strcmp(\"INTRA4X4_CHROMAV_INTER\", s2) )\n    {\n      v2 = 5;\n    }\n    else if ( !strcmp(\"INTER4X4_LUMA\", s2) )\n    {\n      v2 = 6;\n    }\n    else if ( !strcmp(\"INTER4X4_CHROMAU\", s2) )\n    {\n      v2 = 7;\n    }\n    else if ( !strcmp(\"INTER4X4_CHROMAV\", s2) )\n    {\n      v2 = 8;\n    }\n    else\n    {\n      *a2 = 1;\n      if ( strcmp(\"INTRA8X8_LUMA_INTRA\", s2) )\n      {\n        v2 = 1;\n        if ( strcmp(\"INTRA8X8_LUMA_INTER\", s2) )\n          return 3 * (unsigned int)(strcmp(\"INTER8X8_LUMA\", s2) == 0) - 1;\n      }\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x456970L", 
            "funcEndAddr": "0x456ac3L", 
            "funcName": "sub_456970"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_456AD0(char *a1, int a2)\n{\n  char *v2; // rax\n  int v3; // edx\n  int v4; // ecx\n  unsigned __int64 v5; // rsi\n  __int64 v6; // rdx\n  char *v7; // rdx\n  signed __int64 v8; // rdi\n  __int64 v10; // rsi\n  int v11; // ebp\n  char *v12; // rbx\n  int v13; // er14\n  char *v14; // rsi\n  __int16 *v15; // r13\n  unsigned __int64 v16; // r12\n  char **v17; // r15\n  unsigned __int64 v18; // r14\n  char *v19; // rbp\n  signed int v20; // [rsp+Ch] [rbp-1F8Ch]\n  int v21; // [rsp+Ch] [rbp-1F8Ch]\n  int v22; // [rsp+10h] [rbp-1F88h]\n  __int16 v23; // [rsp+14h] [rbp-1F84h]\n  __int64 v24; // [rsp+18h] [rbp-1F80h]\n  char *v25; // [rsp+20h] [rbp-1F78h]\n  char *s2[1006]; // [rsp+28h] [rbp-1F70h]\n\n  if ( a2 <= 0 )\n    return;\n  v2 = &a1[a2];\n  v20 = 0;\n  v3 = 0;\n  v4 = 0;\n  while ( 2 )\n  {\n    switch ( *a1 )\n    {\n      case 9:\n      case 32:\n        v5 = (unsigned __int64)(a1 + 1);\n        if ( v4 )\n        {\n          ++a1;\n          if ( v5 < (unsigned __int64)v2 )\n            continue;\n        }\n        else\n        {\n          *a1 = 0;\n          v4 = 0;\n          v3 = 0;\n          ++a1;\n          if ( v5 < (unsigned __int64)v2 )\n            continue;\n        }\n        goto LABEL_28;\n      case 10:\n        *a1++ = 0;\n        v4 = 0;\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      case 13:\n        goto LABEL_9;\n      case 34:\n        *a1++ = 0;\n        if ( v4 )\n        {\n          v3 = 0;\n          v4 = ~v4;\n          if ( a1 >= v2 )\n            goto LABEL_28;\n          continue;\n        }\n        v10 = v20++;\n        (&v25)[v10] = a1;\n        v3 = ~v3;\n        v4 = -1;\n        if ( a1 < v2 )\n          continue;\nLABEL_28:\n        if ( v20 >= 2 )\n        {\n          v21 = v20 - 1;\n          v11 = 0;\n          do\n          {\n            v12 = (&v25)[v11];\n            v13 = sub_456970((&v25)[v11], &v22);\n            if ( v13 < 0 )\n            {\n              snprintf(byte_4F8250, 0x12CuLL, \" Parsing error in config file: Parameter Name '%s' not recognized.\", v12);\n              error((__int64)byte_4F8250, 300);\n            }\n            if ( strcmp(\"=\", s2[v11]) )\n            {\n              snprintf(\n                byte_4F8250,\n                0x12CuLL,\n                \" Parsing error in config file: '=' expected as the second token in each item.\");\n              error((__int64)byte_4F8250, 300);\n            }\n            v14 = (char *)&unk_4A0090 + 4 * v13;\n            v15 = &word_4F84A0[16 * v13];\n            if ( v22 )\n              v14 = (char *)&unk_4A00A8 + 4 * v13;\n            v16 = 64LL;\n            if ( !v22 )\n              v16 = 16LL;\n            if ( v22 )\n              v15 = &word_4F80D0[64 * (signed __int64)v13];\n            *(_DWORD *)v14 = 1;\n            v24 = (unsigned int)(v11 + 2);\n            v17 = &(&v25)[v24];\n            v18 = 0LL;\n            do\n            {\n              v19 = v17[v18];\n              if ( (unsigned int)__isoc99_sscanf(v17[v18], \"%d\", &v23) != 1 )\n              {\n                snprintf(\n                  byte_4F8250,\n                  0x12CuLL,\n                  \" Parsing error: Expected numerical value for Parameter of %s, found '%s'.\",\n                  v12,\n                  v19);\n                error((__int64)byte_4F8250, 300);\n              }\n              v15[v18++] = v23;\n            }\n            while ( v18 < v16 );\n            putchar(46);\n            v11 = v18 + v24;\n          }\n          while ( (signed int)v18 + (signed int)v24 < v21 );\n        }\n        return;\n      case 35:\n        *a1 = 0;\n        v4 = 0;\n        if ( a1 < v2 )\n        {\n          v7 = a1 + 1;\n          do\n          {\n            v8 = (signed __int64)(v7 + 1);\n            if ( v7 >= v2 )\n              break;\n          }\n          while ( *v7++ != 10 );\n          a1 = (char *)(v8 - 1);\n        }\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      case 44:\n        ++a1;\n        v3 = 0;\n        if ( a1 < v2 )\n          continue;\n        goto LABEL_28;\n      default:\n        if ( !v3 )\n        {\n          v6 = v20++;\n          (&v25)[v6] = a1;\n          v3 = -1;\n        }\nLABEL_9:\n        if ( ++a1 >= v2 )\n          goto LABEL_28;\n        continue;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x456ad0L", 
            "funcEndAddr": "0x456d8aL", 
            "funcName": "sub_456AD0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_456D90(__int64 a1@<rbx>)\n{\n  __int64 v1; // rax\n  const char *v2; // rax\n  char *v3; // rbx\n  int v4; // eax\n\n  if ( *((_DWORD *)dest + 896) )\n  {\n    LODWORD(v1) = printf(\"Parsing Quantization Offset Matrix file %s \", (char *)dest + 3384, a1);\n    v2 = sub_40E590(v1, (const char *)dest + 3384);\n    v3 = (char *)v2;\n    if ( v2 )\n    {\n      v4 = strlen(v2);\n      sub_456AD0(v3, v4);\n    }\n    else\n    {\n      printf(\"\\nError: %s\\nProceeding with default values for all matrices.\", byte_4F8250);\n      *((_DWORD *)dest + 896) = 0;\n    }\n    putchar(10);\n    free(v3);\n  }\n}\n", 
            "funcStartAddr": "0x456d90L", 
            "funcEndAddr": "0x456e19L", 
            "funcName": "sub_456D90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_456E20()\n{\n  _DWORD *v0; // r14\n  __int64 v1; // rdx\n  __int64 v2; // r9\n  char v3; // cl\n  __int64 v4; // rsi\n  signed __int64 v5; // rdi\n  signed __int64 v6; // rbx\n  signed __int64 v7; // rax\n  int v8; // er15\n  int v9; // er12\n  int v10; // eax\n  int v11; // ebp\n  int v12; // edi\n  int v13; // ebx\n  signed __int64 v14; // rax\n  signed __int64 v15; // rdi\n  signed __int64 v16; // rbx\n  int v17; // er15\n  int v18; // er12\n  int v19; // ebx\n  int v20; // ebp\n  int v21; // eax\n  int v22; // edi\n  signed __int64 v23; // rax\n  signed __int64 v24; // rdi\n  signed __int64 v25; // rbx\n  int v26; // er15\n  int v27; // er12\n  int v28; // ebx\n  int v29; // ebp\n  int v30; // eax\n  int v31; // edi\n  signed __int64 v32; // rax\n  signed __int64 v33; // rdi\n  signed __int64 v34; // rbx\n  int v35; // er15\n  int v36; // er12\n  int v37; // ebx\n  int v38; // ebp\n  __int64 result; // rax\n  int v40; // edi\n  __int64 v41; // rdx\n  __int64 v42; // r8\n  char v43; // cl\n  __int64 v44; // rdi\n  __int16 *v45; // rsi\n  int v46; // esi\n  int v47; // eax\n  __int16 *v48; // rsi\n  int v49; // eax\n  int v50; // esi\n  __int16 *v51; // rsi\n  int v52; // eax\n  int v53; // esi\n  __int16 *v54; // rsi\n  int v55; // eax\n\n  v0 = off_49F6D0;\n  if ( *((_DWORD *)dest + 896) )\n  {\n    v1 = 0LL;\n    v2 = 0LL;\n    do\n    {\n      v3 = v2 + 5;\n      v4 = 0LL;\n      do\n      {\n        v5 = 48LL;\n        if ( v0[6] == 2 )\n          v5 = 0LL;\n        v6 = 64LL;\n        if ( v0[6] == 2 )\n          v6 = 16LL;\n        v7 = 80LL;\n        if ( v0[6] == 2 )\n          v7 = 32LL;\n        v8 = word_4F84A0[v5 + v4] << v3;\n        v9 = word_4F84A0[v6 + v4] << v3;\n        v10 = word_4F84A0[v7 + v4] << v3;\n        v11 = word_4F8560[v4] << v3;\n        v12 = word_4F8580[v4] << v3;\n        v13 = word_4F85A0[v4] << v3;\n        dword_4F5610[1 * v4 + v1] = v8;\n        dword_4EE9F0[1 * v4 + v1] = v9;\n        dword_4EED30[1 * v4 + v1] = v10;\n        dword_4F52D0[1 * v4 + v1] = v11;\n        dword_4EE370[1 * v4 + v1] = v12;\n        dword_4EE6B0[1 * v4 + v1] = v13;\n        v14 = 48LL;\n        if ( v0[6] == 2 )\n          v14 = 0LL;\n        v15 = 64LL;\n        if ( v0[6] == 2 )\n          v15 = 16LL;\n        v16 = 80LL;\n        if ( v0[6] == 2 )\n          v16 = 32LL;\n        v17 = word_4F84A8[v14 + v4] << v3;\n        v18 = word_4F84A8[v15 + v4] << v3;\n        v19 = word_4F84A8[v16 + v4] << v3;\n        v20 = word_4F8568[v4] << v3;\n        v21 = word_4F8588[v4] << v3;\n        v22 = word_4F85A8[v4] << v3;\n        dword_4F5614[1 * v4 + v1] = v17;\n        dword_4EE9F4[1 * v4 + v1] = v18;\n        dword_4EED34[1 * v4 + v1] = v19;\n        dword_4F52D4[1 * v4 + v1] = v20;\n        dword_4EE374[1 * v4 + v1] = v21;\n        dword_4EE6B4[1 * v4 + v1] = v22;\n        v23 = 48LL;\n        if ( v0[6] == 2 )\n          v23 = 0LL;\n        v24 = 64LL;\n        if ( v0[6] == 2 )\n          v24 = 16LL;\n        v25 = 80LL;\n        if ( v0[6] == 2 )\n          v25 = 32LL;\n        v26 = word_4F84B0[v23 + v4] << v3;\n        v27 = word_4F84B0[v24 + v4] << v3;\n        v28 = word_4F84B0[v25 + v4] << v3;\n        v29 = word_4F8570[v4] << v3;\n        v30 = word_4F8590[v4] << v3;\n        v31 = word_4F85B0[v4] << v3;\n        dword_4F5618[1 * v4 + v1] = v26;\n        dword_4EE9F8[1 * v4 + v1] = v27;\n        dword_4EED38[1 * v4 + v1] = v28;\n        dword_4F52D8[1 * v4 + v1] = v29;\n        dword_4EE378[1 * v4 + v1] = v30;\n        dword_4EE6B8[1 * v4 + v1] = v31;\n        v32 = 48LL;\n        if ( v0[6] == 2 )\n          v32 = 0LL;\n        v33 = 64LL;\n        if ( v0[6] == 2 )\n          v33 = 16LL;\n        v34 = 80LL;\n        if ( v0[6] == 2 )\n          v34 = 32LL;\n        v35 = word_4F84B8[v32 + v4] << v3;\n        v36 = word_4F84B8[v33 + v4] << v3;\n        v37 = word_4F84B8[v34 + v4] << v3;\n        v38 = word_4F8578[v4] << v3;\n        result = (unsigned int)(word_4F8598[v4] << v3);\n        v40 = word_4F85B8[v4] << v3;\n        dword_4F561C[1 * v4 + v1] = v35;\n        dword_4EE9FC[1 * v4 + v1] = v36;\n        dword_4EED3C[1 * v4 + v1] = v37;\n        dword_4F52DC[1 * v4 + v1] = v38;\n        dword_4EE37C[1 * v4 + v1] = result;\n        dword_4EE6BC[1 * v4 + v1] = v40;\n        ++v4;\n      }\n      while ( v4 != 4 );\n      ++v2;\n      v1 += 16LL;\n    }\n    while ( v2 != 13 );\n  }\n  else\n  {\n    v41 = 0LL;\n    v42 = 0LL;\n    do\n    {\n      v43 = v42 + 5;\n      v44 = 0LL;\n      do\n      {\n        v45 = (__int16 *)&unk_48A4A0;\n        if ( v0[6] != 2 )\n          v45 = word_48A4C0;\n        v46 = v45[v44] << v43;\n        dword_4F5610[1 * v44 + v41] = v46;\n        dword_4EE9F0[1 * v44 + v41] = v46;\n        v47 = word_48A4C0[v44] << v43;\n        dword_4EED30[1 * v44 + v41] = v46;\n        dword_4F52D0[1 * v44 + v41] = v47;\n        dword_4EE370[1 * v44 + v41] = v47;\n        dword_4EE6B0[1 * v44 + v41] = v47;\n        v48 = (__int16 *)&unk_48A4A0;\n        if ( v0[6] != 2 )\n          v48 = word_48A4C0;\n        v49 = v48[v44 + 4] << v43;\n        dword_4F5614[1 * v44 + v41] = v49;\n        dword_4EE9F4[1 * v44 + v41] = v49;\n        v50 = word_48A4C8[v44] << v43;\n        dword_4EED34[1 * v44 + v41] = v49;\n        dword_4F52D4[1 * v44 + v41] = v50;\n        dword_4EE374[1 * v44 + v41] = v50;\n        dword_4EE6B4[1 * v44 + v41] = v50;\n        v51 = (__int16 *)&unk_48A4A0;\n        if ( v0[6] != 2 )\n          v51 = word_48A4C0;\n        v52 = v51[v44 + 8] << v43;\n        dword_4F5618[1 * v44 + v41] = v52;\n        dword_4EE9F8[1 * v44 + v41] = v52;\n        v53 = word_48A4D0[v44] << v43;\n        dword_4EED38[1 * v44 + v41] = v52;\n        dword_4F52D8[1 * v44 + v41] = v53;\n        dword_4EE378[1 * v44 + v41] = v53;\n        dword_4EE6B8[1 * v44 + v41] = v53;\n        v54 = (__int16 *)&unk_48A4A0;\n        if ( v0[6] != 2 )\n          v54 = word_48A4C0;\n        v55 = v54[v44 + 12] << v43;\n        dword_4F561C[1 * v44 + v41] = v55;\n        dword_4EE9FC[1 * v44 + v41] = v55;\n        dword_4EED3C[1 * v44 + v41] = v55;\n        result = (unsigned int)(word_48A4D8[v44] << v43);\n        dword_4F52DC[1 * v44 + v41] = result;\n        dword_4EE37C[1 * v44 + v41] = result;\n        dword_4EE6BC[1 * v44 + v41] = result;\n        ++v44;\n      }\n      while ( v44 != 4 );\n      ++v42;\n      v41 += 16LL;\n    }\n    while ( v42 != 13 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x456e20L", 
            "funcEndAddr": "0x457224L", 
            "funcName": "sub_456E20"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_457230()\n{\n  _DWORD *v0; // r10\n  __int64 v1; // r8\n  __int64 v2; // r9\n  char v3; // cl\n  __int64 v4; // rdi\n  unsigned __int64 v5; // rdx\n  char *v6; // rax\n  char *v7; // rsi\n  char *v8; // rsi\n  char *v9; // rsi\n  char *v10; // rsi\n  char *v11; // rsi\n  char *v12; // rsi\n  __int64 result; // rax\n  int v14; // esi\n  __int64 v15; // r8\n  __int64 v16; // r9\n  char v17; // cl\n  __int64 v18; // rdi\n  __int64 v19; // rdx\n  __int16 *v20; // rsi\n  int v21; // eax\n  __int16 *v22; // rsi\n  int v23; // eax\n  int v24; // esi\n  __int16 *v25; // rsi\n  int v26; // eax\n  int v27; // esi\n  __int16 *v28; // rsi\n  int v29; // eax\n  int v30; // esi\n  __int16 *v31; // rsi\n  int v32; // eax\n  int v33; // esi\n  __int16 *v34; // rsi\n  int v35; // eax\n  int v36; // esi\n  __int16 *v37; // rsi\n  int v38; // eax\n  int v39; // esi\n  __int16 *v40; // rsi\n  int v41; // esi\n\n  v0 = off_49F6D0;\n  if ( *((_DWORD *)dest + 896) )\n  {\n    v1 = 0LL;\n    v2 = 0LL;\n    do\n    {\n      v3 = v2 + 6;\n      v4 = v1;\n      v5 = 0LL;\n      do\n      {\n        *(int *)((char *)&dword_4EB270 + v4) = word_4F80D0[64 * (unsigned __int64)(v0[6] != 2) + v5 / 2] << v3;\n        *(int *)((char *)&dword_4EA570 + v4) = word_4F81D0[v5 / 2] << v3;\n        v6 = (char *)&unk_4F8160 + v5;\n        if ( v0[6] == 2 )\n          v6 = (char *)&unk_4F80E0 + v5;\n        *(int *)((char *)&dword_4EB274 + v4) = *(signed __int16 *)v6 << v3;\n        *(int *)((char *)&dword_4EA574 + v4) = word_4F81E0[v5 / 2] << v3;\n        v7 = (char *)&unk_4F8170 + v5;\n        if ( v0[6] == 2 )\n          v7 = (char *)&unk_4F80F0 + v5;\n        *(int *)((char *)&dword_4EB278 + v4) = *(signed __int16 *)v7 << v3;\n        *(int *)((char *)&dword_4EA578 + v4) = word_4F81F0[v5 / 2] << v3;\n        v8 = (char *)&unk_4F8180 + v5;\n        if ( v0[6] == 2 )\n          v8 = (char *)&unk_4F8100 + v5;\n        *(int *)((char *)&dword_4EB27C + v4) = *(signed __int16 *)v8 << v3;\n        *(int *)((char *)&dword_4EA57C + v4) = word_4F8200[v5 / 2] << v3;\n        v9 = (char *)&unk_4F8190 + v5;\n        if ( v0[6] == 2 )\n          v9 = (char *)&unk_4F8110 + v5;\n        *(int *)((char *)&dword_4EB280 + v4) = *(signed __int16 *)v9 << v3;\n        *(int *)((char *)&dword_4EA580 + v4) = word_4F8210[v5 / 2] << v3;\n        v10 = (char *)&unk_4F81A0 + v5;\n        if ( v0[6] == 2 )\n          v10 = (char *)&unk_4F8120 + v5;\n        *(int *)((char *)&dword_4EB284 + v4) = *(signed __int16 *)v10 << v3;\n        *(int *)((char *)&dword_4EA584 + v4) = word_4F8220[v5 / 2] << v3;\n        v11 = (char *)&unk_4F81B0 + v5;\n        if ( v0[6] == 2 )\n          v11 = (char *)&unk_4F8130 + v5;\n        *(int *)((char *)&dword_4EB288 + v4) = *(signed __int16 *)v11 << v3;\n        *(int *)((char *)&dword_4EA588 + v4) = word_4F8230[v5 / 2] << v3;\n        v12 = (char *)&unk_4F81C0 + v5;\n        if ( v0[6] == 2 )\n          v12 = (char *)&unk_4F8140 + v5;\n        result = (unsigned int)(*(signed __int16 *)v12 << v3);\n        v14 = word_4F8240[v5 / 2] << v3;\n        *(int *)((char *)&dword_4EB28C + v4) = result;\n        *(int *)((char *)&dword_4EA58C + v4) = v14;\n        v5 += 2LL;\n        v4 += 32LL;\n      }\n      while ( v5 != 16 );\n      ++v2;\n      v1 += 256LL;\n    }\n    while ( v2 != 13 );\n  }\n  else\n  {\n    v15 = 0LL;\n    v16 = 0LL;\n    do\n    {\n      v17 = v16 + 6;\n      v18 = v15;\n      v19 = 0LL;\n      do\n      {\n        v20 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v20 = word_4918F0;\n        v21 = word_4918F0[v19] << v17;\n        *(int *)((char *)&dword_4EB270 + v18) = v20[v19] << v17;\n        *(int *)((char *)&dword_4EA570 + v18) = v21;\n        v22 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v22 = word_4918F0;\n        v23 = v22[v19 + 8] << v17;\n        v24 = word_491900[v19] << v17;\n        *(int *)((char *)&dword_4EB274 + v18) = v23;\n        *(int *)((char *)&dword_4EA574 + v18) = v24;\n        v25 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v25 = word_4918F0;\n        v26 = v25[v19 + 16] << v17;\n        v27 = word_491910[v19] << v17;\n        *(int *)((char *)&dword_4EB278 + v18) = v26;\n        *(int *)((char *)&dword_4EA578 + v18) = v27;\n        v28 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v28 = word_4918F0;\n        v29 = v28[v19 + 24] << v17;\n        v30 = word_491920[v19] << v17;\n        *(int *)((char *)&dword_4EB27C + v18) = v29;\n        *(int *)((char *)&dword_4EA57C + v18) = v30;\n        v31 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v31 = word_4918F0;\n        v32 = v31[v19 + 32] << v17;\n        v33 = word_491930[v19] << v17;\n        *(int *)((char *)&dword_4EB280 + v18) = v32;\n        *(int *)((char *)&dword_4EA580 + v18) = v33;\n        v34 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v34 = word_4918F0;\n        v35 = v34[v19 + 40] << v17;\n        v36 = word_491940[v19] << v17;\n        *(int *)((char *)&dword_4EB284 + v18) = v35;\n        *(int *)((char *)&dword_4EA584 + v18) = v36;\n        v37 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v37 = word_4918F0;\n        v38 = v37[v19 + 48] << v17;\n        v39 = word_491950[v19] << v17;\n        *(int *)((char *)&dword_4EB288 + v18) = v38;\n        *(int *)((char *)&dword_4EA588 + v18) = v39;\n        v40 = (__int16 *)&unk_491870;\n        if ( v0[6] != 2 )\n          v40 = word_4918F0;\n        result = (unsigned int)(v40[v19 + 56] << v17);\n        v41 = word_491960[v19] << v17;\n        *(int *)((char *)&dword_4EB28C + v18) = result;\n        *(int *)((char *)&dword_4EA58C + v18) = v41;\n        ++v19;\n        v18 += 32LL;\n      }\n      while ( v19 != 8 );\n      ++v16;\n      v15 += 256LL;\n    }\n    while ( v16 != 13 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x457230L", 
            "funcEndAddr": "0x4575cfL", 
            "funcName": "sub_457230"
        }, 
        {
            "decompiledFuncCode": "void *sub_4575D0()\n{\n  char *v0; // rbx\n  void *v1; // rax\n  _DWORD *v2; // rbx\n  char *v3; // r14\n  void *v4; // rax\n  _DWORD *v5; // r14\n  void *v6; // rax\n  void *result; // rax\n\n  v0 = (char *)off_49F6D0;\n  v1 = calloc(*((unsigned int *)off_49F6D0 + 18122), 8uLL);\n  *((_QWORD *)v0 + 9073) = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"rc_alloc: img->MADofMB\");\n  v2 = v0 + 72488;\n  v3 = (char *)dest;\n  v4 = calloc((unsigned int)(*v2 / *((_DWORD *)dest + 812)), 8uLL);\n  qword_4F9CA8 = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"rc_alloc: img->BUPFMAD\");\n  v5 = v3 + 3248;\n  v6 = calloc((unsigned int)(*v2 / *v5), 8uLL);\n  qword_4F9CA0 = v6;\n  if ( !v6 )\n    sub_43EF40(0LL, (__int64)\"rc_alloc: img->BUCFMAD\");\n  qword_4F9CE0 = calloc((unsigned int)(*v2 / *v5), 8uLL);\n  if ( !qword_4F9CE0 )\n    sub_43EF40(0LL, (__int64)\"rc_alloc: img->FCBUCFMAD\");\n  result = calloc((unsigned int)(*v2 / *v5), 8uLL);\n  qword_4F9CE8 = result;\n  if ( !result )\n    sub_43EF40(0LL, (__int64)\"rc_alloc: img->FCBUPFMAD\");\n  return result;\n}\n", 
            "funcStartAddr": "0x4575d0L", 
            "funcEndAddr": "0x45772cL", 
            "funcName": "sub_4575D0"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_457730()\n{\n  void *v0; // rdi\n\n  v0 = (void *)*((_QWORD *)off_49F6D0 + 9073);\n  if ( v0 )\n  {\n    free(v0);\n    *((_QWORD *)off_49F6D0 + 9073) = 0LL;\n  }\n  if ( qword_4F9CA8 )\n  {\n    free(qword_4F9CA8);\n    qword_4F9CA8 = 0LL;\n  }\n  if ( qword_4F9CA0 )\n  {\n    free(qword_4F9CA0);\n    qword_4F9CA0 = 0LL;\n  }\n  if ( qword_4F9CE0 )\n  {\n    free(qword_4F9CE0);\n    qword_4F9CE0 = 0LL;\n  }\n  if ( qword_4F9CE8 )\n  {\n    free(qword_4F9CE8);\n    qword_4F9CE8 = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x457730L", 
            "funcEndAddr": "0x4577cdL", 
            "funcName": "sub_457730"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_4577D0()\n{\n  _DWORD *v0; // r9\n  __int64 v1; // xmm0_8\n  _QWORD *v2; // rsi\n  int v3; // er10\n  float v4; // xmm2_4\n  double v5; // xmm1_8\n  signed int v6; // edi\n  signed int v7; // er8\n  int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  _BOOL8 v11; // rcx\n  __int64 v12; // xmm3_8\n  signed __int64 result; // rax\n  double v14; // xmm4_8\n  double v15; // xmm2_8\n  double v16; // xmm3_8\n  double v17; // xmm0_8\n\n  dword_4FA09C = 0;\n  dword_4FA098 = 0;\n  v0 = dest;\n  *(double *)&v1 = (double)*((signed int *)dest + 810);\n  qword_4F9DD8 = v1;\n  v2 = off_49F6D0;\n  v3 = *((_DWORD *)dest + 309);\n  v4 = (float)(*((_DWORD *)dest + 5) + 1);\n  v5 = (float)((float)((float)(v3 + 1) * *((float *)off_49F6D0 + 12)) / v4);\n  *(double *)&qword_4F9E68 = (float)((float)((float)(v3 + 1) * *((float *)off_49F6D0 + 12)) / v4);\n  qword_4F9D50 = v1;\n  v6 = *((_DWORD *)off_49F6D0 + 13);\n  v7 = *((_DWORD *)off_49F6D0 + 15);\n  v8 = v7 * *((_DWORD *)off_49F6D0 + 13) / 256;\n  *((_DWORD *)off_49F6D0 + 18152) = v8;\n  v9 = v0[812];\n  if ( v9 <= v8 )\n  {\n    if ( v9 < v8 )\n    {\n      v10 = v8 / v9;\n      dword_4FA090 = v10;\n      goto LABEL_6;\n    }\n  }\n  else\n  {\n    v0[812] = v8;\n  }\n  v10 = dword_4FA090;\nLABEL_6:\n  qword_4F9D20 = 4616189618054758400LL;\n  *(double *)&qword_4F9CB8 = 2.56 * *(double *)&v1;\n  qword_4F9CC8 = 0LL;\n  qword_4F9CF8 = 0LL;\n  *(double *)&qword_4F9D00 = 2.56 * *(double *)&v1 * 0.8;\n  dword_4FA100 = 0;\n  dword_4FA014 = 0;\n  v2[9070] = 0LL;\n  *((_DWORD *)v2 + 18142) = 0;\n  dword_4A00B8 = 0;\n  v11 = v3 > 0;\n  v12 = qword_4897C0[v11];\n  qword_4F9CF0 = qword_4897B0[v11];\n  qword_4F9C98 = v12;\n  qword_4F9D40 = v1;\n  dword_4FA048 = 0;\n  qword_4F9D30 = 4607182418800017408LL;\n  qword_4F9D48 = 0LL;\n  xmmword_4F9060 = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9048 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9038 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9028 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9018 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9008 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8FF8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8FE8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8FD8 + 8) = 0LL;\n  unk_4F8FD0 = 0LL;\n  xmmword_4F9100 = 0LL;\n  *(__int128 *)((char *)&xmmword_4F90E8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F90D8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F90C8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F90B8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F90A8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9098 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9088 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F9078 + 8) = 0LL;\n  *(_OWORD *)&dbl_4F9070 = 0LL;\n  xmmword_4F8CF0 = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8CD8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8CC8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8CB8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8CA8 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8C98 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8C88 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8C78 + 8) = 0LL;\n  *(__int128 *)((char *)&xmmword_4F8C68 + 8) = 0LL;\n  qword_4F9D38 = 0LL;\n  unk_4F8C60 = 0LL;\n  qword_4F8D00 = 0LL;\n  dword_4FA044 = 2;\n  dword_4FA034 = 0;\n  dword_4FA03C = 0;\n  dword_4F9FE8 = 2 - (v10 > 8);\n  result = v6 / 16;\n  dword_4FA01C = v6 / 16;\n  *((_DWORD *)v2 + 18150) = 0;\n  dword_4FA07C = 51;\n  dword_4FA080 = 0;\n  if ( v6 == 176 )\n  {\n    v14 = 0.1;\n    v15 = 0.6;\n    v16 = 0.3;\n    if ( v0[811] )\n      return result;\n  }\n  else if ( v6 == 352 )\n  {\n    v14 = 0.2;\n    v15 = 1.2;\n    v16 = 0.6;\n    if ( v0[811] )\n      return result;\n  }\n  else\n  {\n    v14 = 0.6;\n    v15 = 2.4;\n    v16 = 1.4;\n    if ( v0[811] )\n      return result;\n  }\n  v17 = *(double *)&v1 / ((double)v7 * (v5 * (double)v6));\n  result = 35LL;\n  if ( v14 < v17 )\n  {\n    result = 25LL;\n    if ( v16 < v17 )\n    {\n      result = 20LL;\n      if ( v15 < v17 )\n        result = 10LL;\n    }\n  }\n  v0[811] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4577d0L", 
            "funcEndAddr": "0x457b66L", 
            "funcName": "sub_4577D0"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_457B70(int a1, int a2)\n{\n  int v2; // ebp\n  _DWORD *v3; // rax\n  int v4; // edx\n  int v5; // edx\n  int v6; // ecx\n  _DWORD *v7; // rcx\n  _DWORD *result; // rax\n  int v9; // esi\n  double v10; // xmm1_8\n  signed int v11; // esi\n  signed int v12; // ebp\n  int v13; // esi\n  int v14; // edx\n  double v15; // [rsp+8h] [rbp-20h]\n\n  v2 = dword_4A00B8;\n  qword_4F9D08 = (unsigned int)(signed int)(*(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68 + (double)dword_4A00B8);\n  qword_4F9D90 = (unsigned int)(signed int)((double)dword_4A00B8 + *(double *)&qword_4F9D00);\n  v15 = (double)(a1 + a2 + 1);\n  dword_4A00B8 = v2 + (signed int)floor(*(double *)&qword_4F9DD8 * v15 / *(double *)&qword_4F9E68 + 0.5);\n  dword_4A00BC = a1;\n  dword_4A00C0 = a2;\n  dword_4FA00C = 0;\n  v3 = off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18153) = 1;\n  dword_4FA094 = a1;\n  v4 = v3[18142];\n  v3[18142] = v4 + 1;\n  if ( v4 )\n  {\n    if ( *((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721) )\n    {\n      if ( v3[18151] == 1 )\n        v5 = dword_4FA008;\n      else\n        v5 = dword_4FA000;\n      v7 = v3 + 18143;\n      v9 = v5 + v3[18143];\n      v3[18143] = v9;\n      dword_4FA074 = v5;\n    }\n    else\n    {\n      v7 = v3 + 18143;\n      v9 = v3[18143];\n      v5 = dword_4FA074;\n    }\n    v10 = (double)(signed int)v3[18144];\n    result = v3 + 18144;\n    v11 = (signed int)((double)v9 / v10 + 0.5);\n    v12 = 2;\n    if ( (signed int)(v15 / 15.0 + 0.5) < 3 )\n      v12 = (signed int)(v15 / 15.0 + 0.5);\n    v13 = v11 - v12 - (v11 - v12 > v5 - 2);\n    if ( dword_4FA070 - 2 >= v13 )\n      v13 = dword_4FA070 - 2;\n    v14 = dword_4FA070 + 2;\n    if ( dword_4FA070 + 2 > v13 )\n      v14 = v13;\n    if ( dword_4FA07C <= v14 )\n      v14 = dword_4FA07C;\n    if ( dword_4FA080 >= v14 )\n      v14 = dword_4FA080;\n    dword_4FA040 = v14;\n    dword_4FA020 = v14;\n    dword_4FA070 = v14;\n    dword_4FA058 = v14;\n    dword_4FA030 = v14;\n    dword_4FA060 = dword_4FA064;\n    dword_4FA064 = v14 - 1;\n  }\n  else\n  {\n    v6 = *((_DWORD *)dest + 811);\n    dword_4FA020 = v6;\n    dword_4FA064 = v6 - 1;\n    dword_4FA070 = v6;\n    v7 = v3 + 18143;\n    result = v3 + 18144;\n  }\n  *v7 = 0;\n  *result = 0;\n  dword_4FA028 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x457b70L", 
            "funcEndAddr": "0x457da0L", 
            "funcName": "sub_457B70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_457DA0(int a1, int a2, int a3)\n{\n  int v3; // ebp\n  int v4; // er15\n  _DWORD *v5; // r13\n  int v6; // er12\n  char *v7; // rbx\n  int v8; // eax\n  int v9; // er14\n  int v10; // eax\n  int v11; // er8\n  int v12; // er9\n  signed __int64 v13; // r10\n  _QWORD *v14; // rsi\n  _QWORD *v15; // rdi\n  signed __int64 v16; // rdx\n  signed int v17; // eax\n  double v18; // xmm0_8\n  double v19; // xmm2_8\n  signed __int64 v20; // r10\n  _QWORD *v21; // rsi\n  _QWORD *v22; // rdi\n  signed __int64 v23; // rax\n  unsigned __int64 v24; // rbp\n  __int64 v25; // rcx\n  __int64 v26; // rbp\n  signed __int64 v27; // rdx\n  __int128 v28; // xmm1\n  __int128 v29; // xmm1\n  __int128 v30; // xmm1\n  __int128 v31; // xmm1\n  signed __int64 v32; // rdx\n  __int64 v33; // rcx\n  __int128 v34; // xmm1\n  unsigned __int64 v35; // rax\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  signed __int64 v38; // rbp\n  __int128 v39; // xmm1\n  __int128 v40; // xmm1\n  __int128 v41; // xmm1\n  __int128 v42; // xmm1\n  signed __int64 v43; // rax\n  __int64 v44; // rcx\n  __int128 v45; // xmm1\n  signed int v46; // eax\n  signed int v47; // eax\n  double v48; // xmm0_8\n  double v49; // xmm1_8\n  double v50; // xmm2_8\n  double v51; // xmm0_8\n  int v52; // eax\n  signed int v53; // eax\n  double v54; // xmm2_8\n  signed int v55; // ebp\n  signed int v56; // ecx\n  double v57; // xmm0_8\n  __int64 v58; // rcx\n  __int64 v59; // rax\n  double v60; // xmm0_8\n  __int64 v61; // rcx\n  __int64 v62; // rax\n  signed int v63; // [rsp+8h] [rbp-40h]\n  signed int v64; // [rsp+8h] [rbp-40h]\n  int v65; // [rsp+14h] [rbp-34h]\n\n  v3 = a2;\n  v4 = a1;\n  v5 = dest;\n  v6 = *((_DWORD *)dest + 721);\n  v7 = (char *)off_49F6D0;\n  if ( v6 )\n    dword_4FA090 = *((_DWORD *)off_49F6D0 + 18152) / *((_DWORD *)off_49F6D0 + 18155);\n  *((_DWORD *)off_49F6D0 + 18154) = 0;\n  if ( v5[813] == 1 )\n  {\n    v8 = *((_DWORD *)v7 + 18141);\n    if ( v8 == 59 )\n    {\n      qword_4F9D50 = qword_4F9DD8;\n    }\n    else if ( v8 == 58 )\n    {\n      *(double *)&qword_4F9DD8 = *(double *)&qword_4F9DD8 * 1.5;\n    }\n  }\n  v9 = a1 | a2;\n  if ( a1 | a2 && a3 )\n  {\n    v10 = *((_DWORD *)v7 + 6);\n    if ( v10 != 1 )\n    {\n      if ( v10 )\n        goto LABEL_103;\n      if ( *(double *)&qword_4F9D50 != *(double *)&qword_4F9DD8 )\n        dword_4A00B8 += (signed int)floor(\n                                      (double)(dword_4A00BC + dword_4A00C0)\n                                    * (*(double *)&qword_4F9DD8 - *(double *)&qword_4F9D50)\n                                    / *(double *)&qword_4F9E68\n                                    + 0.5);\n      v11 = *((_DWORD *)v7 + 18152);\n      v12 = *((_DWORD *)v7 + 18155);\n      v65 = a2;\n      if ( v12 == v11 )\n        goto LABEL_65;\n      if ( *((_DWORD *)v7 + 18141) <= 0 )\n      {\nLABEL_64:\n        v46 = *((_DWORD *)v7 + 18142);\n        if ( v46 != 1 )\n        {\n          if ( v46 < 2 )\n            goto LABEL_75;\n          v52 = *((_DWORD *)v7 + 18144);\n          if ( !v52 )\n          {\n            v48 = *(double *)&qword_4F9CC8;\n            v49 = *(double *)&qword_4F9CC8 - *(double *)&qword_4F9CF8;\n            v50 = (double)dword_4FA094;\n            goto LABEL_67;\n          }\n          if ( v52 <= 0 )\n            goto LABEL_75;\nLABEL_73:\n          v51 = *(double *)&qword_4F9D80 - *(double *)&qword_4F9CD8;\n          goto LABEL_74;\n        }\nLABEL_65:\n        v47 = *((_DWORD *)v7 + 18144);\n        if ( v47 == 1 )\n        {\n          v48 = *(double *)&qword_4F9CC8;\n          v49 = *(double *)&qword_4F9CC8 - *(double *)&qword_4F9CF8;\n          v50 = (double)(dword_4FA094 - 1);\nLABEL_67:\n          *(double *)&qword_4F9CD8 = v49 / v50;\n          v51 = v48 - v49 / v50;\nLABEL_74:\n          qword_4F9D80 = *(_QWORD *)&v51;\n          goto LABEL_75;\n        }\n        if ( v47 < 2 )\n        {\nLABEL_75:\n          v53 = *((_DWORD *)v7 + 18141);\n          if ( v53 == 1 )\n          {\n            qword_4F9C88 = qword_4F9DA8;\n            goto LABEL_82;\n          }\n          if ( (unsigned int)(v53 - 2) > 5 )\n          {\n            if ( v53 < 2 )\n              goto LABEL_82;\n            v54 = *(double *)&qword_4F9C88 * 7.0 * 0.125 + *(double *)&qword_4F9DA8 * 0.125;\n          }\n          else\n          {\n            v54 = *(double *)&qword_4F9C88 / (double)v53 + (double)(v53 - 1) * *(double *)&qword_4F9DA8 / (double)v53;\n          }\n          qword_4F9C88 = *(_QWORD *)&v54;\nLABEL_82:\n          v55 = v5[309];\n          if ( v55 > 0 )\n            *(double *)&qword_4F9D80 = (double)(v55 + 1)\n                                     * *(double *)&qword_4F9C88\n                                     * *(double *)&qword_4F9DD8\n                                     / (((double)v55 * *(double *)&qword_4F9C80 + *(double *)&qword_4F9C88)\n                                      * *(double *)&qword_4F9E68)\n                                     - *(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68\n                                     + *(double *)&qword_4F9D80;\n          if ( v12 == v11 )\n          {\n            if ( v53 <= 0 )\n              goto LABEL_97;\n            goto LABEL_93;\n          }\n          v56 = *((_DWORD *)v7 + 18142);\n          if ( v56 == 1 )\n          {\n            if ( v53 > 0 )\n            {\n              v63 = (signed int)floor(\n                                  (double)dword_4A00B8\n                                * *(double *)&qword_4F9DA8\n                                / ((double)dword_4A00C0 * *(double *)&qword_4F9DA0\n                                 + (double)dword_4A00BC * *(double *)&qword_4F9DA8)\n                                + 0.5);\n              v57 = floor(\n                      *(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68\n                    - (*(double *)&qword_4F9CC8 - *(double *)&qword_4F9D80) * *(double *)&qword_4F9CF0\n                    + 0.5);\n              v58 = 0LL;\n              if ( (signed __int64)(signed int)v57 >= 0 )\n                v58 = (signed int)v57;\n              qword_4F9D78 = v58;\n              v59 = (signed int)floor(\n                                  (double)(signed int)v58 * (1.0 - *(double *)&qword_4F9C98)\n                                + (double)v63 * *(double *)&qword_4F9C98\n                                + 0.5);\n              goto LABEL_96;\n            }\n          }\n          else if ( v56 >= 2 )\n          {\nLABEL_93:\n            v64 = (signed int)floor(\n                                (double)dword_4A00B8\n                              * *(double *)&qword_4F9DA8\n                              / ((double)dword_4A00C0 * *(double *)&qword_4F9DA0\n                               + (double)dword_4A00BC * *(double *)&qword_4F9DA8)\n                              + 0.5);\n            v60 = floor(\n                    *(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68\n                  - (*(double *)&qword_4F9CC8 - *(double *)&qword_4F9D80) * *(double *)&qword_4F9CF0\n                  + 0.5);\n            v61 = 0LL;\n            if ( (signed __int64)(unsigned int)(signed int)v60 >= 0 )\n              v61 = (unsigned int)(signed int)v60;\n            qword_4F9D78 = v61;\n            v59 = (unsigned int)(signed int)floor(\n                                              (double)(signed int)v61 * (1.0 - *(double *)&qword_4F9C98)\n                                            + (double)v64 * *(double *)&qword_4F9C98\n                                            + 0.5);\nLABEL_96:\n            qword_4F9D70 = v59;\n            goto LABEL_97;\n          }\nLABEL_97:\n          v62 = (unsigned int)(signed int)((double)(signed int)qword_4F9D70 * ((double)v55 * -0.0 + 1.0));\n          if ( qword_4F9D08 >= v62 )\n            v62 = qword_4F9D08;\n          if ( v62 > qword_4F9D98 )\n            v62 = qword_4F9D98;\n          qword_4F9D70 = v62;\n          v3 = v65;\n          if ( v65 || v4 && (v5[720] == 2 || v6) )\n            dword_4A00C4 = v62;\n          goto LABEL_103;\n        }\n        goto LABEL_73;\n      }\n      if ( (v5[720] == 2 || v6) && *((_DWORD *)v7 + 18150) == 1 )\n      {\n        v13 = dword_4FA090;\n        if ( dword_4FA090 <= 0LL )\n          goto LABEL_64;\n        v14 = qword_4F9CE0;\n        v15 = qword_4F9CE8;\n        if ( (unsigned int)dword_4FA090 < 4 )\n        {\n          v16 = 0LL;\n          goto LABEL_63;\n        }\n        if ( qword_4F9CE8 < (char *)qword_4F9CE0 + 8 * dword_4FA090\n          && qword_4F9CE0 < (char *)qword_4F9CE8 + 8 * dword_4FA090 )\n        {\n          v16 = 0LL;\n          do\n          {\nLABEL_63:\n            v15[v16] = v14[v16];\n            ++v16;\n          }\n          while ( v16 < v13 );\n          goto LABEL_64;\n        }\n        v16 = dword_4FA090 & 0xFFFFFFFFFFFFFFFCLL;\n        v35 = (unsigned __int64)(v16 - 4) >> 2;\n        v36 = ((_BYTE)v35 + 1) & 3;\n        if ( (unsigned __int64)(v16 - 4) >= 0xC )\n        {\n          v38 = v36 - 1 - v35;\n          v37 = 0LL;\n          do\n          {\n            v39 = *(_OWORD *)&v14[v37 + 2];\n            *(_OWORD *)&v15[v37] = *(_OWORD *)&v14[v37];\n            *(_OWORD *)&v15[v37 + 2] = v39;\n            v40 = *(_OWORD *)&v14[v37 + 6];\n            *(_OWORD *)&v15[v37 + 4] = *(_OWORD *)&v14[v37 + 4];\n            *(_OWORD *)&v15[v37 + 6] = v40;\n            v41 = *(_OWORD *)&v14[v37 + 10];\n            *(_OWORD *)&v15[v37 + 8] = *(_OWORD *)&v14[v37 + 8];\n            *(_OWORD *)&v15[v37 + 10] = v41;\n            v42 = *(_OWORD *)&v14[v37 + 14];\n            *(_OWORD *)&v15[v37 + 12] = *(_OWORD *)&v14[v37 + 12];\n            *(_OWORD *)&v15[v37 + 14] = v42;\n            v37 += 16LL;\n            v38 += 4LL;\n          }\n          while ( v38 );\n          if ( !v36 )\n          {\nLABEL_62:\n            if ( v16 == v13 )\n              goto LABEL_64;\n            goto LABEL_63;\n          }\n        }\n        else\n        {\n          v37 = 0LL;\n          if ( !v36 )\n            goto LABEL_62;\n        }\n        v43 = 8 * v37 + 16;\n        v44 = -v36;\n        do\n        {\n          v45 = *(_OWORD *)((char *)v14 + v43);\n          *(_OWORD *)((char *)v15 + v43 - 16) = *(_OWORD *)((char *)v14 + v43 - 16);\n          *(_OWORD *)((char *)v15 + v43) = v45;\n          v43 += 32LL;\n          ++v44;\n        }\n        while ( v44 );\n        goto LABEL_62;\n      }\n      v20 = dword_4FA090;\n      if ( dword_4FA090 <= 0LL )\n        goto LABEL_64;\n      v21 = qword_4F9CA0;\n      v22 = qword_4F9CA8;\n      if ( (unsigned int)dword_4FA090 < 4 )\n      {\n        v23 = 0LL;\n        goto LABEL_52;\n      }\n      if ( qword_4F9CA8 < (char *)qword_4F9CA0 + 8 * dword_4FA090\n        && qword_4F9CA0 < (char *)qword_4F9CA8 + 8 * dword_4FA090 )\n      {\n        v23 = 0LL;\n        do\n        {\nLABEL_52:\n          v22[v23] = v21[v23];\n          ++v23;\n        }\n        while ( v23 < v20 );\n        goto LABEL_64;\n      }\n      v23 = dword_4FA090 & 0xFFFFFFFFFFFFFFFCLL;\n      v24 = (unsigned __int64)(v23 - 4) >> 2;\n      v25 = ((_BYTE)v24 + 1) & 3;\n      if ( (unsigned __int64)(v23 - 4) >= 0xC )\n      {\n        v27 = v25 - 1 - v24;\n        v26 = 0LL;\n        do\n        {\n          v28 = *(_OWORD *)&v21[v26 + 2];\n          *(_OWORD *)&v22[v26] = *(_OWORD *)&v21[v26];\n          *(_OWORD *)&v22[v26 + 2] = v28;\n          v29 = *(_OWORD *)&v21[v26 + 6];\n          *(_OWORD *)&v22[v26 + 4] = *(_OWORD *)&v21[v26 + 4];\n          *(_OWORD *)&v22[v26 + 6] = v29;\n          v30 = *(_OWORD *)&v21[v26 + 10];\n          *(_OWORD *)&v22[v26 + 8] = *(_OWORD *)&v21[v26 + 8];\n          *(_OWORD *)&v22[v26 + 10] = v30;\n          v31 = *(_OWORD *)&v21[v26 + 14];\n          *(_OWORD *)&v22[v26 + 12] = *(_OWORD *)&v21[v26 + 12];\n          *(_OWORD *)&v22[v26 + 14] = v31;\n          v26 += 16LL;\n          v27 += 4LL;\n        }\n        while ( v27 );\n        if ( !v25 )\n        {\nLABEL_51:\n          if ( v23 == v20 )\n            goto LABEL_64;\n          goto LABEL_52;\n        }\n      }\n      else\n      {\n        v26 = 0LL;\n        if ( !v25 )\n          goto LABEL_51;\n      }\n      v32 = 8 * v26 + 16;\n      v33 = -v25;\n      do\n      {\n        v34 = *(_OWORD *)((char *)v21 + v32);\n        *(_OWORD *)((char *)v22 + v32 - 16) = *(_OWORD *)((char *)v21 + v32 - 16);\n        *(_OWORD *)((char *)v22 + v32) = v34;\n        v32 += 32LL;\n        ++v33;\n      }\n      while ( v33 );\n      goto LABEL_51;\n    }\n    if ( *(double *)&qword_4F9D50 != *(double *)&qword_4F9DD8 )\n      dword_4A00B8 += (signed int)floor(\n                                    (double)(dword_4A00BC + dword_4A00C0)\n                                  * (*(double *)&qword_4F9DD8 - *(double *)&qword_4F9D50)\n                                  / *(double *)&qword_4F9E68\n                                  + 0.5);\n    v17 = *((_DWORD *)v7 + 18140);\n    if ( *((_DWORD *)v7 + 18141) == 1 && v17 == 1 )\n    {\n      qword_4F9C88 = qword_4F9DA8;\n      qword_4F9C80 = qword_4F9DA0;\n      if ( !v9 )\n        goto LABEL_107;\n      goto LABEL_104;\n    }\n    if ( v17 >= 2 )\n    {\n      if ( v17 > 7 )\n      {\n        v18 = *(double *)&qword_4F9DA0 * 0.125;\n        v19 = *(double *)&qword_4F9C80 * 7.0 * 0.125;\n      }\n      else\n      {\n        v18 = *(double *)&qword_4F9DA0 * (double)(v17 - 1) / (double)v17;\n        v19 = *(double *)&qword_4F9C80 / (double)v17;\n      }\n      *(double *)&qword_4F9C80 = v19 + v18;\n      if ( !v9 )\n        goto LABEL_107;\n      goto LABEL_104;\n    }\n  }\nLABEL_103:\n  if ( !v9 )\n    goto LABEL_107;\nLABEL_104:\n  *(_QWORD *)(v7 + 72524) = 0LL;\n  if ( *((_DWORD *)v7 + 18155) < *((_DWORD *)v7 + 18152) )\n  {\n    dword_4FA08C = 0;\n    *(_QWORD *)(v7 + 72532) = 0LL;\n    *((_QWORD *)v7 + 9068) = 0LL;\n    if ( !*((_DWORD *)v7 + 18150) )\n    {\n      dword_4FA02C = dword_4FA090;\n      if ( *((_DWORD *)v7 + 6) )\n        return;\n      goto LABEL_108;\n    }\n    dword_4FA02C = dword_4FA090 / 2;\n  }\nLABEL_107:\n  if ( *((_DWORD *)v7 + 6) )\n    return;\nLABEL_108:\n  if ( *((_DWORD *)v7 + 18155) < *((_DWORD *)v7 + 18152) && *((_DWORD *)v7 + 18150) == 1 )\n  {\n    if ( v3 )\n    {\n      dword_4A00C8 = 0;\n      qword_4F9D70 = (unsigned int)(signed int)((double)dword_4A00C4 * 0.6);\n    }\n    else\n    {\n      qword_4F9D70 = dword_4A00C4 - (signed __int64)dword_4A00C8;\n      *(_QWORD *)(v7 + 72532) = 0LL;\n      *((_QWORD *)v7 + 9068) = 0LL;\n      dword_4FA02C = dword_4FA090 / 2;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x457da0L", 
            "funcEndAddr": "0x45878eL", 
            "funcName": "sub_457DA0"
        }, 
        {
            "decompiledFuncCode": "double sub_458790()\n{\n  __m128i v0; // xmm0\n  signed __int64 v1; // rax\n  __m128i v2; // xmm1\n  __m128i v3; // xmm2\n  __m128i v4; // xmm1\n  __m128i v5; // xmm3\n  __m128i v6; // xmm0\n  __m128i v7; // xmm3\n  __m128i v8; // xmm0\n  __m128i v9; // xmm2\n  __m128i v10; // xmm0\n  __m128i v11; // xmm3\n  __m128i v12; // xmm1\n  __m128i v13; // xmm3\n  __m128i v14; // xmm4\n  __m128i v15; // xmm1\n  __m128i v16; // xmm4\n  __m128i v17; // xmm1\n  __m128i v18; // xmm2\n  __m128i v19; // xmm1\n  __m128i v20; // xmm3\n  __m128i v21; // xmm0\n  __m128i v22; // xmm3\n  __m128i v23; // xmm4\n  __m128i v24; // xmm0\n  __m128i v25; // xmm4\n  __m128i v26; // xmm3\n  __m128i v27; // xmm0\n  __m128i v28; // xmm3\n  __m128i v29; // xmm0\n  __m128i v30; // xmm2\n  __m128i v31; // xmm0\n  __m128i v32; // xmm3\n  __m128i v33; // xmm1\n  __m128i v34; // xmm3\n  __m128i v35; // xmm4\n  __m128i v36; // xmm1\n  __m128i v37; // xmm4\n  __m128i v38; // xmm3\n  __m128i v39; // xmm1\n  __m128i v40; // xmm3\n  __m128i v41; // xmm4\n  __m128i v42; // xmm1\n  __m128i v43; // xmm4\n  __m128i v44; // xmm3\n  __m128i v45; // xmm1\n  __m128i v46; // xmm3\n  __m128i v47; // xmm0\n  __m128i v48; // xmm1\n  __m128i v49; // xmm1\n\n  v0 = 0LL;\n  v1 = 4611686018427387648LL;\n  do\n  {\n    v2 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16D0[v1]), _mm_cvtsi32_si128(dword_4F1710[v1])),\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1750[v1]), _mm_cvtsi32_si128(dword_4F1790[v1])));\n    v3 = _mm_srai_epi32(v2, 0x1Fu);\n    v4 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v2, v3), v3), v0);\n    v5 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16D4[v1]), _mm_cvtsi32_si128(dword_4F1714[v1])),\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1754[v1]), _mm_cvtsi32_si128(dword_4F1794[v1])));\n    v6 = _mm_srai_epi32(v5, 0x1Fu);\n    v7 = _mm_xor_si128(_mm_add_epi32(v5, v6), v6);\n    v8 = _mm_unpacklo_epi64(\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16D8[v1]), _mm_cvtsi32_si128(dword_4F1718[v1])),\n           _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1758[v1]), _mm_cvtsi32_si128(dword_4F1798[v1])));\n    v9 = _mm_srai_epi32(v8, 0x1Fu);\n    v10 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v8, v9), v9), v7), v4);\n    v11 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16DC[v1]), _mm_cvtsi32_si128(dword_4F171C[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F175C[v1]), _mm_cvtsi32_si128(dword_4F179C[v1])));\n    v12 = _mm_srai_epi32(v11, 0x1Fu);\n    v13 = _mm_xor_si128(_mm_add_epi32(v11, v12), v12);\n    v14 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16E0[v1]), _mm_cvtsi32_si128(dword_4F1720[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1760[v1]), _mm_cvtsi32_si128(dword_4F17A0[v1])));\n    v15 = _mm_srai_epi32(v14, 0x1Fu);\n    v16 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v14, v15), v15), v13);\n    v17 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16E4[v1]), _mm_cvtsi32_si128(dword_4F1724[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1764[v1]), _mm_cvtsi32_si128(dword_4F17A4[v1])));\n    v18 = _mm_srai_epi32(v17, 0x1Fu);\n    v19 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v17, v18), v18), v16), v10);\n    v20 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16E8[v1]), _mm_cvtsi32_si128(dword_4F1728[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1768[v1]), _mm_cvtsi32_si128(dword_4F17A8[v1])));\n    v21 = _mm_srai_epi32(v20, 0x1Fu);\n    v22 = _mm_xor_si128(_mm_add_epi32(v20, v21), v21);\n    v23 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16EC[v1]), _mm_cvtsi32_si128(dword_4F172C[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F176C[v1]), _mm_cvtsi32_si128(dword_4F17AC[v1])));\n    v24 = _mm_srai_epi32(v23, 0x1Fu);\n    v25 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v23, v24), v24), v22);\n    v26 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16F0[v1]), _mm_cvtsi32_si128(dword_4F1730[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1770[v1]), _mm_cvtsi32_si128(dword_4F17B0[v1])));\n    v27 = _mm_srai_epi32(v26, 0x1Fu);\n    v28 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v26, v27), v27), v25);\n    v29 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16F4[v1]), _mm_cvtsi32_si128(dword_4F1734[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1774[v1]), _mm_cvtsi32_si128(dword_4F17B4[v1])));\n    v30 = _mm_srai_epi32(v29, 0x1Fu);\n    v31 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v29, v30), v30), v28), v19);\n    v32 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16F8[v1]), _mm_cvtsi32_si128(dword_4F1738[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1778[v1]), _mm_cvtsi32_si128(dword_4F17B8[v1])));\n    v33 = _mm_srai_epi32(v32, 0x1Fu);\n    v34 = _mm_xor_si128(_mm_add_epi32(v32, v33), v33);\n    v35 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F16FC[v1]), _mm_cvtsi32_si128(dword_4F173C[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F177C[v1]), _mm_cvtsi32_si128(dword_4F17BC[v1])));\n    v36 = _mm_srai_epi32(v35, 0x1Fu);\n    v37 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v35, v36), v36), v34);\n    v38 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1700[v1]), _mm_cvtsi32_si128(dword_4F1740[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1780[v1]), _mm_cvtsi32_si128(dword_4F17C0[v1])));\n    v39 = _mm_srai_epi32(v38, 0x1Fu);\n    v40 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v38, v39), v39), v37);\n    v41 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1704[v1]), _mm_cvtsi32_si128(dword_4F1744[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1784[v1]), _mm_cvtsi32_si128(dword_4F17C4[v1])));\n    v42 = _mm_srai_epi32(v41, 0x1Fu);\n    v43 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v41, v42), v42), v40);\n    v44 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1708[v1]), _mm_cvtsi32_si128(dword_4F1748[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F1788[v1]), _mm_cvtsi32_si128(dword_4F17C8[v1])));\n    v45 = _mm_srai_epi32(v44, 0x1Fu);\n    v46 = _mm_add_epi32(_mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v44, v45), v45), v43), v31);\n    v47 = _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F170C[v1]), _mm_cvtsi32_si128(dword_4F174C[v1])),\n            _mm_unpacklo_epi32(_mm_cvtsi32_si128(dword_4F178C[v1]), _mm_cvtsi32_si128(dword_4F17CC[v1])));\n    v48 = _mm_srai_epi32(v47, 0x1Fu);\n    v0 = _mm_add_epi32(_mm_xor_si128(_mm_add_epi32(v47, v48), v48), v46);\n    v1 += 64LL;\n  }\n  while ( v1 * 4 );\n  v49 = _mm_add_epi32(_mm_shuffle_epi32(v0, 78), v0);\n  return (double)_mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v49, 229), v49)) * 0.00390625;\n}\n", 
            "funcStartAddr": "0x458790L", 
            "funcEndAddr": "0x458be2L", 
            "funcName": "sub_458790"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_458BF0(signed int a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rax\n  double v3; // xmm0_8\n  __int64 result; // rax\n\n  dword_4A00B8 -= a1;\n  *(double *)&qword_4F9CC8 = (double)a1 - *(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68 + *(double *)&qword_4F9CC8;\n  v1 = (unsigned int)(signed int)(*(double *)&qword_4F9DD8 / *(double *)&qword_4F9E68 - (double)a1);\n  qword_4F9D08 += v1;\n  v2 = qword_4F9D90 + v1;\n  qword_4F9D90 = v2;\n  v3 = (double)(signed int)v2 * 0.9;\n  result = (unsigned int)(signed int)v3;\n  qword_4F9D98 = (unsigned int)(signed int)v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x458bf0L", 
            "funcEndAddr": "0x458c5dL", 
            "funcName": "sub_458BF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_458C60(int a1)\n{\n  _DWORD *v1; // rbx\n  __int64 result; // rax\n  int v3; // ecx\n  int v4; // ecx\n  int v5; // edx\n\n  v1 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18155) == *((_DWORD *)off_49F6D0 + 18152) )\n  {\n    result = (unsigned int)(signed int)floor((double)(dword_4FA0F8 * a1) + 0.5);\n    v3 = v1[6];\n    goto LABEL_8;\n  }\n  v3 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v3 == 1 )\n  {\n    result = (unsigned int)(signed int)floor((double)(dword_4FA0F8 * a1) + 0.5);\n    goto LABEL_17;\n  }\n  result = 0LL;\n  if ( v3 )\n  {\nLABEL_8:\n    if ( v3 != 1 )\n    {\n      if ( v3 )\n        return result;\n      goto LABEL_10;\n    }\nLABEL_17:\n    --dword_4A00C0;\n    dword_4FA098 = result;\n    *(double *)&qword_4F9DA0 = (double)(signed int)result / 1.3636;\n    ++v1[18140];\n    ++dword_4FA028;\n    return result;\n  }\n  if ( !(*((_DWORD *)off_49F6D0 + 18153) | *((_DWORD *)off_49F6D0 + 18150) ^ 1)\n    || (result = 0LL, !*((_DWORD *)off_49F6D0 + 18150)) )\n  {\n    result = (unsigned int)(signed int)floor((double)(a1 * (dword_4FA08C / dword_4FA090)) + 0.5);\n  }\nLABEL_10:\n  v4 = v1[18150];\n  v5 = v1[18153];\n  if ( v5 | v1[18150] ^ 1 && v4 )\n  {\n    if ( v5 )\n    {\n      if ( v4 == 1 )\n        v1[18153] = 0;\n    }\n  }\n  else\n  {\n    dword_4FA09C = result;\n    --dword_4A00BC;\n    *(double *)&qword_4F9DA8 = (double)(signed int)result;\n    result = (unsigned int)v1[18131];\n    dword_4FA054 = v1[18131];\n    ++v1[18141];\n    ++v1[18144];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x458c60L", 
            "funcEndAddr": "0x458db8L", 
            "funcName": "sub_458C60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_458DC0(int a1)\n{\n  dword_4A00C8 = a1;\n}\n", 
            "funcStartAddr": "0x458dc0L", 
            "funcEndAddr": "0x458dc7L", 
            "funcName": "sub_458DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_458DD0(int a1)\n{\n  int v1; // ebx\n  _DWORD *v2; // rsi\n  int v3; // eax\n  int v4; // eax\n  unsigned int v5; // ecx\n  int v6; // eax\n  int v7; // ecx\n  signed int v8; // er10\n  double v9; // r8\n  double v10; // rbp\n  int v11; // er9\n  double v12; // rdi\n  double v13; // rcx\n  int v14; // er11\n  signed int v15; // er14\n  int v16; // eax\n  int v17; // er15\n  int v18; // ecx\n  int v19; // edx\n  int v20; // ecx\n  int v21; // edi\n  bool v22; // zf\n  int v23; // eax\n  int v24; // eax\n  int v25; // edx\n  int v26; // eax\n  signed __int64 v27; // rdx\n  bool v28; // sf\n  signed int v29; // eax\n  __int64 v30; // rsi\n  double v31; // xmm0_8\n  signed int v32; // ebx\n  double v33; // xmm6_8\n  double v34; // xmm1_8\n  double v35; // xmm5_8\n  double v36; // xmm0_8\n  double v37; // ST08_8\n  double v38; // xmm2_8\n  double v39; // xmm0_8\n  double v40; // xmm1_8\n  int v41; // eax\n  int v42; // eax\n  int v43; // er8\n  signed int v44; // edi\n  int v45; // edi\n  int v46; // ecx\n  signed int v47; // er9\n  unsigned __int8 v48; // of\n  int v49; // edi\n  int v50; // er15\n  int v51; // edx\n  int v52; // eax\n  float v53; // xmm1_4\n  double v54; // xmm0_8\n  int v55; // eax\n  int v56; // eax\n  int v57; // ecx\n  __int64 v58; // rdx\n  double v59; // xmm1_8\n  double v60; // xmm4_8\n  double v61; // xmm5_8\n  __int64 v62; // rdx\n  double v63; // xmm5_8\n  int v64; // eax\n  double v65; // xmm5_8\n  double v66; // xmm2_8\n  double v67; // xmm6_8\n  double v68; // xmm0_8\n  int v69; // edx\n  int v70; // eax\n  int v71; // esi\n  int v72; // ebp\n  int v73; // esi\n  int v74; // ecx\n  int v75; // eax\n  double v77; // ST10_8\n  double v78; // xmm3_8\n  double v79; // xmm0_8\n  double v80; // xmm2_8\n  float v81; // xmm1_4\n  double v82; // xmm0_8\n  int v83; // eax\n  int v84; // eax\n  int v85; // ecx\n  int v86; // er10\n  int v87; // esi\n  int v88; // ebp\n  int v89; // esi\n  signed int v90; // esi\n  int v91; // edx\n  int v92; // edi\n  int v93; // edi\n\n  v1 = a1;\n  v2 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18155) == *((_DWORD *)off_49F6D0 + 18152) )\n  {\n    if ( !a1 && *((_DWORD *)off_49F6D0 + 18150) )\n    {\n      if ( !*((_DWORD *)off_49F6D0 + 6) && !*((_DWORD *)off_49F6D0 + 18153) )\n      {\n        v6 = dword_4FA0F8;\n        if ( *((_DWORD *)dest + 720) == 1 )\n        {\n          *((_DWORD *)off_49F6D0 + 18143) += dword_4FA0F8;\n          dword_4FA060 = dword_4FA064 + 1;\n          dword_4FA064 = v6;\n          dword_4FA058 = v6;\n        }\n        else\n        {\n          dword_4FA000 = dword_4FA0F8;\n        }\n        return (unsigned int)dword_4FA0F8;\n      }\n      return (unsigned int)dword_4FA0F8;\n    }\n    v3 = *((_DWORD *)off_49F6D0 + 6);\n    if ( !v3 )\n    {\n      if ( !*((_DWORD *)off_49F6D0 + 18144) )\n      {\n        v5 = dword_4FA020;\nLABEL_134:\n        dword_4FA0F8 = v5;\n        if ( !v2[18150] )\n        {\n          if ( *((_DWORD *)qword_4F9DC0 + 287) )\n          {\n            v2[18143] += v5;\n            dword_4FA060 = dword_4FA064;\n            dword_4FA064 = v5;\n            dword_4FA058 = v5;\n          }\n          else\n          {\n            dword_4FA008 = v5;\n          }\n        }\n        return v5;\n      }\nLABEL_39:\n      if ( (*((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721)) && !*((_DWORD *)off_49F6D0 + 18150) )\n      {\n        if ( *((_DWORD *)off_49F6D0 + 18151) == 1 )\n          v24 = dword_4FA008;\n        else\n          v24 = dword_4FA000;\n        *((_DWORD *)off_49F6D0 + 18143) += v24;\n        dword_4FA058 = v24;\n      }\n      qword_4F9EF8 = qword_4F9D40;\n      qword_4F9F00 = qword_4F9D48;\n      dword_4FA0F4 = dword_4FA048;\n      dword_4FA0FC = dword_4FA058;\n      dword_4F9FF4 = dword_4FA044;\n      qword_4F9D10 = qword_4F9D30;\n      qword_4F9D18 = qword_4F9D38;\n      qword_4F9D60 = unk_4F8C60;\n      v31 = *(double *)&qword_4F9D38 + *(double *)&qword_4F9D30 * *(double *)&unk_4F8C60;\n      *(double *)&qword_4F9CD0 = *(double *)&qword_4F9D38 + *(double *)&qword_4F9D30 * *(double *)&unk_4F8C60;\n      if ( qword_4F9D70 < 0 )\n      {\n        v5 = dword_4FA058 + dword_4FA044;\n        dword_4FA0F8 = dword_4FA058 + dword_4FA044;\n        if ( dword_4FA058 + dword_4FA044 > dword_4FA07C )\n          v5 = dword_4FA07C;\n      }\n      else\n      {\n        v32 = qword_4F9D70 - dword_4FA048;\n        if ( (signed int)qword_4F9D70 - dword_4FA048 < (signed int)(*(double *)&qword_4F9DD8\n                                                                  / (*(double *)&qword_4F9D20\n                                                                   * *(double *)&qword_4F9E68)) )\n          v32 = (signed int)(*(double *)&qword_4F9DD8 / (*(double *)&qword_4F9D20 * *(double *)&qword_4F9E68));\n        v33 = (double)v32;\n        v34 = v31 * *(double *)&qword_4F9D40;\n        if ( *(double *)&qword_4F9D48 == 0.0\n          || (v35 = *(double *)&qword_4F9D48 * 4.0 * v31 * v33 + v31 * v34 * *(double *)&qword_4F9D40, v35 < 0.0)\n          || (v35 < 0.0 ? (v37 = *(double *)&qword_4F9D48 * 4.0 * v31 * v33 + v31 * v34 * *(double *)&qword_4F9D40,\n                           v36 = sqrt(v35),\n                           v33 = (double)v32,\n                           v35 = v37) : (v36 = sqrt(v35)),\n              v34 = *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0,\n              v36 - *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0 <= 0.0) )\n        {\n          v40 = v34 / v33;\n        }\n        else\n        {\n          v38 = *(double *)&qword_4F9CD0 * (*(double *)&qword_4F9F00 + *(double *)&qword_4F9F00);\n          if ( v35 < 0.0 )\n            v39 = sqrt(v35);\n          else\n            v39 = sqrt(v35);\n          v40 = v38 / (v39 - *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0);\n        }\n        v53 = v40;\n        v54 = v53;\n        *(double *)&qword_4F9EF0 = v53;\n        v55 = 0;\n        if ( v53 >= 0.625 )\n        {\n          v55 = 51;\n          if ( v53 <= 224.0 )\n          {\n            v56 = 0;\n            v57 = 0;\n            if ( v53 > 1.125 )\n            {\n              do\n              {\n                v54 = v54 * 0.5;\n                v57 += 6;\n              }\n              while ( v54 > 1.125 );\n            }\n            if ( v54 > 0.65625 )\n            {\n              v56 = 1;\n              if ( v54 > 0.75 )\n              {\n                v56 = 2;\n                if ( v54 > 0.84375 )\n                {\n                  v56 = 3;\n                  if ( v54 > 0.9375 )\n                    v56 = (v54 > 1.0625) | 4;\n                }\n              }\n            }\n            v55 = v57 + v56;\n          }\n        }\n        if ( dword_4F9FF4 + dword_4FA0FC <= v55 )\n          v55 = dword_4F9FF4 + dword_4FA0FC;\n        if ( v55 > dword_4FA07C )\n          v55 = dword_4FA07C;\n        v5 = dword_4FA0FC - dword_4F9FF4;\n        if ( dword_4FA0FC - dword_4F9FF4 < v55 )\n          v5 = v55;\n        dword_4FA0F8 = v5;\n        if ( dword_4FA080 >= (signed int)v5 )\n          v5 = dword_4FA080;\n        v2 = off_49F6D0;\n      }\n      goto LABEL_134;\n    }\n    if ( v3 != 1 )\n    {\n      if ( v3 != 2 )\n        goto LABEL_39;\n      goto LABEL_10;\n    }\nLABEL_32:\n    v21 = *((_DWORD *)dest + 309);\n    if ( v21 == 1 )\n    {\n      if ( (*((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721)) && !*((_DWORD *)off_49F6D0 + 18150) )\n      {\n        v22 = *((_DWORD *)off_49F6D0 + 18151) == 1;\n        dword_4FA060 = dword_4FA064;\n        if ( v22 )\n          v23 = dword_4FA008;\n        else\n          v23 = dword_4FA000;\n        dword_4FA064 = v23;\n      }\n      if ( dword_4FA060 == dword_4FA064 )\n        v42 = dword_4FA060 + 2;\n      else\n        v42 = (dword_4FA060 + dword_4FA064) / 2 + 1;\n      v5 = dword_4FA07C;\n      if ( v42 <= dword_4FA07C )\n        v5 = v42;\n    }\n    else\n    {\n      v25 = (dword_4FA028 + 1) % v21;\n      if ( !v25 )\n        v25 = *((_DWORD *)dest + 309);\n      if ( v25 == 1 && (*((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721)) && !*((_DWORD *)off_49F6D0 + 18150) )\n      {\n        v22 = *((_DWORD *)off_49F6D0 + 18151) == 1;\n        dword_4FA060 = dword_4FA064;\n        if ( v22 )\n          v26 = dword_4FA008;\n        else\n          v26 = dword_4FA000;\n        dword_4FA064 = v26;\n      }\n      v70 = dword_4FA064 - dword_4FA060;\n      v71 = -3;\n      if ( dword_4FA064 - dword_4FA060 > -3 - 2 * v21 )\n      {\n        v72 = -2 * v21;\n        v71 = -2;\n        if ( v70 != -2 * v21 - 2 )\n        {\n          v71 = -1;\n          if ( v70 != v72 - 1 )\n          {\n            v71 = 0;\n            if ( v70 != v72 )\n              v71 = 2 - (v70 == (v72 | 1));\n          }\n        }\n      }\n      v73 = dword_4FA060 + v71;\n      v74 = 2 - 2 * v25;\n      v75 = (v25 - 1) * v70 / (v21 - 1);\n      if ( v74 < v75 )\n        v74 = v75;\n      if ( 2 * v25 - 2 <= v74 )\n        v74 = 2 * v25 - 2;\n      v5 = v73 + v74;\n      if ( (signed int)v5 > dword_4FA07C )\n        v5 = dword_4FA07C;\n    }\n    dword_4FA0F8 = v5;\n    if ( dword_4FA080 >= (signed int)v5 )\n      v5 = dword_4FA080;\n    goto LABEL_179;\n  }\n  v4 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v4 )\n  {\n    if ( v4 == 1 )\n    {\n      if ( !a1 && *((_DWORD *)off_49F6D0 + 18150) )\n        return (unsigned int)dword_4FA0F8;\n      goto LABEL_32;\n    }\n    if ( v4 != 2 )\n      return (unsigned int)dword_4FA0F8;\nLABEL_10:\n    v5 = dword_4FA020;\nLABEL_179:\n    dword_4FA0F8 = v5;\n    return v5;\n  }\n  v7 = *((_DWORD *)off_49F6D0 + 18153);\n  if ( v7 == 1 && *((_DWORD *)off_49F6D0 + 18150) == 1 )\n    goto LABEL_10;\n  v8 = *((_DWORD *)off_49F6D0 + 18142);\n  if ( v8 == 1 && !*((_DWORD *)off_49F6D0 + 18144) )\n  {\n    v41 = *((_DWORD *)off_49F6D0 + 18150);\n    if ( v41 && (v41 != 1 || v7) )\n      return (unsigned int)dword_4FA0F8;\n    v5 = dword_4FA020;\n    dword_4FA0F8 = dword_4FA020;\n    *(_QWORD *)((char *)off_49F6D0 + 72532) = 0LL;\n    if ( a1 | --dword_4FA02C )\n    {\nLABEL_82:\n      dword_4FA058 = v5;\n      dword_4FA08C += v5;\n      return v5;\n    }\n    if ( *((_DWORD *)qword_4F9DC0 + 287) )\n    {\nLABEL_81:\n      v2[18143] += v5;\n      dword_4FA060 = dword_4FA064;\n      dword_4FA064 = v5;\n      dword_4FA030 = v5;\n      dword_4FA03C = dword_4FA038;\n      goto LABEL_82;\n    }\n    v92 = *((_DWORD *)dest + 720);\n    if ( v92 != 2 )\n    {\n      if ( v92 == 1 )\n        goto LABEL_81;\n      if ( !*((_DWORD *)dest + 721) )\n        goto LABEL_82;\n    }\n    if ( v41 )\n    {\n      dword_4FA000 = v5;\n      dword_4F9FFC = dword_4FA038;\n    }\n    else\n    {\n      dword_4FA008 = v5;\n      dword_4FA004 = dword_4FA038;\n    }\n    goto LABEL_82;\n  }\n  v9 = *(double *)&qword_4F9D40;\n  qword_4F9EF8 = qword_4F9D40;\n  v10 = *(double *)&qword_4F9D48;\n  qword_4F9F00 = qword_4F9D48;\n  dword_4FA0F4 = dword_4FA048;\n  v11 = dword_4FA058;\n  dword_4FA0FC = dword_4FA058;\n  dword_4F9FF4 = dword_4FA044;\n  v12 = *(double *)&qword_4F9D30;\n  qword_4F9D10 = qword_4F9D30;\n  v13 = *(double *)&qword_4F9D38;\n  qword_4F9D18 = qword_4F9D38;\n  v14 = *((_DWORD *)off_49F6D0 + 18150);\n  v15 = dword_4FA090;\n  v16 = dword_4FA090;\n  if ( v14 )\n    v16 = dword_4FA090 / 2;\n  v17 = dword_4FA02C;\n  if ( dword_4FA02C == v16 )\n  {\n    if ( (*((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721)) && !v14 )\n    {\n      v18 = *((_DWORD *)off_49F6D0 + 18144);\n      if ( *((_DWORD *)off_49F6D0 + 18151) == 1 )\n      {\n        v19 = dword_4FA008;\n        if ( v18 > 0 )\n          *((_DWORD *)off_49F6D0 + 18143) += dword_4FA008;\n        dword_4FA030 = v19;\n        v20 = dword_4FA004;\n      }\n      else\n      {\n        v69 = dword_4FA000;\n        if ( v18 > 0 )\n          *((_DWORD *)off_49F6D0 + 18143) += dword_4FA000;\n        dword_4FA030 = v69;\n        v20 = dword_4F9FFC;\n      }\n      dword_4FA03C = v20;\n    }\n    if ( qword_4F9D70 <= 0 )\n    {\n      v5 = dword_4FA030 + 2;\n      if ( dword_4FA030 + 2 > dword_4FA07C )\n        v5 = dword_4FA07C;\n      dword_4FA0F8 = v5;\n      if ( v1 || !v14 )\n        dword_4FA00C = 1;\n    }\n    else\n    {\n      dword_4FA0F8 = dword_4FA030;\n      v5 = dword_4FA030;\n    }\n    dword_4FA08C += v5;\n    dword_4FA02C = v16 - 1;\n    dword_4FA058 = dword_4FA030;\n    return v5;\n  }\n  v27 = *((signed int *)off_49F6D0 + 18134) + (signed __int64)*((signed int *)off_49F6D0 + 18133);\n  dword_4FA088 = *((_DWORD *)off_49F6D0 + 18134) + *((_DWORD *)off_49F6D0 + 18133);\n  v29 = qword_4F9D70 - v27;\n  v28 = qword_4F9D70 - v27 < 0;\n  qword_4F9D70 -= v27;\n  *(_QWORD *)((char *)off_49F6D0 + 72532) = 0LL;\n  if ( v28 )\n  {\n    v43 = dword_4FA00C;\n    v44 = 2;\n    if ( dword_4FA00C != 1 )\n      v44 = dword_4F9FE8;\n    v45 = v11 + v44;\n    if ( v45 > dword_4FA07C )\n      v45 = dword_4FA07C;\n    dword_4FA0F8 = v45;\n    v46 = *((_DWORD *)dest + 812);\n    v47 = dword_4FA030;\n    v48 = __OFSUB__(v46, dword_4FA01C);\n    v28 = v46 - dword_4FA01C < 0;\n    v5 = dword_4FA030 + 6;\n    if ( v28 ^ v48 )\n      v5 = dword_4FA030 + 3;\n    if ( v45 <= (signed int)v5 )\n      v5 = v45;\n    dword_4FA0F8 = v5;\n    v49 = v5 + dword_4FA08C;\n    dword_4FA08C += v5;\n    v50 = v17 - 1;\n    dword_4FA02C = v50;\n    if ( (v14 == 0 || v1 == 0) != 1 || v50 )\n      goto LABEL_110;\n    if ( *((_DWORD *)qword_4F9DC0 + 287) )\n    {\nLABEL_102:\n      v47 = (signed int)((double)v49 / (double)v15 + 0.5);\n      v51 = v2[18144];\n      if ( v51 == *((_DWORD *)dest + 306) - 2 )\n        dword_4FA074 = (signed int)((double)v49 / (double)v15 + 0.5);\n      v2[18143] += v47;\n      if ( v43 != 1 )\n      {\n        if ( !v51 )\n        {\n          if ( v8 < 2 )\n            goto LABEL_109;\n          v52 = dword_4FA064;\n          goto LABEL_108;\n        }\n        if ( v51 <= 0 )\n        {\nLABEL_109:\n          dword_4FA030 = (signed int)((double)v49 / (double)v15 + 0.5);\n          dword_4FA03C = dword_4FA038;\nLABEL_110:\n          if ( v43 != 1 )\n            v47 = v5;\n          dword_4FA058 = v47;\n          return v5;\n        }\n      }\n      v52 = dword_4FA064 + 1;\nLABEL_108:\n      dword_4FA060 = v52;\n      dword_4FA064 = (signed int)((double)v49 / (double)v15 + 0.5);\n      goto LABEL_109;\n    }\n    v91 = *((_DWORD *)dest + 720);\n    if ( v91 != 2 )\n    {\n      if ( v91 == 1 )\n        goto LABEL_102;\n      if ( !*((_DWORD *)dest + 721) )\n        goto LABEL_110;\n    }\n    if ( v14 )\n    {\n      dword_4FA000 = (signed int)((double)v49 / (double)v15 + 0.5);\n      dword_4F9FFC = dword_4FA038;\n    }\n    else\n    {\n      dword_4FA008 = (signed int)((double)v49 / (double)v15 + 0.5);\n      dword_4FA004 = dword_4FA038;\n    }\n    goto LABEL_110;\n  }\n  v30 = v15;\n  if ( *((_DWORD *)dest + 720) == 2 )\n  {\n    if ( v14 != 1 )\n      goto LABEL_143;\n  }\n  else if ( v14 != 1 || !*((_DWORD *)dest + 721) )\n  {\nLABEL_143:\n    v62 = v15 - v17;\n    v59 = *((double *)qword_4F9CA8 + v62) * v12 + v13;\n    *(double *)&qword_4F9CD0 = *((double *)qword_4F9CA8 + v62) * v12 + v13;\n    qword_4F9D88 = 0LL;\n    v60 = 0.0;\n    if ( v17 > 0 )\n    {\n      do\n      {\n        v63 = *((double *)qword_4F9CA8 + v30-- - 1);\n        *(double *)&qword_4F9CC0 = v63 * v12 + v13;\n        v60 = v60 + *(double *)&qword_4F9CC0 * *(double *)&qword_4F9CC0;\n        qword_4F9D88 = *(_QWORD *)&v60;\n      }\n      while ( v30 > v62 );\n    }\n    goto LABEL_145;\n  }\n  v58 = v15 - v17;\n  v59 = *((double *)qword_4F9CE8 + v58) * v12 + v13;\n  *(double *)&qword_4F9CD0 = *((double *)qword_4F9CE8 + v58) * v12 + v13;\n  qword_4F9D88 = 0LL;\n  v60 = 0.0;\n  if ( v17 > 0 )\n  {\n    do\n    {\n      v61 = *((double *)qword_4F9CE8 + v30-- - 1);\n      *(double *)&qword_4F9CC0 = v61 * v12 + v13;\n      v60 = v60 + *(double *)&qword_4F9CC0 * *(double *)&qword_4F9CC0;\n      qword_4F9D88 = *(_QWORD *)&v60;\n    }\n    while ( v30 > v58 );\n  }\nLABEL_145:\n  v64 = (signed int)((double)v29 * v59 * v59 / v60) - dword_4FA038;\n  if ( v64 < (signed int)(*(double *)&qword_4F9DD8\n                        / ((double)v15\n                         * (*(double *)&qword_4F9D20\n                          * *(double *)&qword_4F9E68))) )\n    v64 = (signed int)(*(double *)&qword_4F9DD8 / ((double)v15 * (*(double *)&qword_4F9D20 * *(double *)&qword_4F9E68)));\n  v65 = (double)v64;\n  v66 = v59 * v9;\n  if ( v10 == 0.0\n    || (v67 = v10 * 4.0 * v59 * v65 + v59 * v66 * v9, v67 < 0.0)\n    || (v67 < 0.0 ? (v77 = (double)v64, v68 = sqrt(v67), v65 = v77) : (v68 = sqrt(v67)),\n        v66 = *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0,\n        v68 - *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0 <= 0.0) )\n  {\n    v80 = v66 / v65;\n  }\n  else\n  {\n    v78 = *(double *)&qword_4F9CD0 * (*(double *)&qword_4F9F00 + *(double *)&qword_4F9F00);\n    if ( v67 < 0.0 )\n      v79 = sqrt(v67);\n    else\n      v79 = sqrt(v67);\n    v80 = v78 / (v79 - *(double *)&qword_4F9EF8 * *(double *)&qword_4F9CD0);\n  }\n  v81 = v80;\n  v82 = v81;\n  *(double *)&qword_4F9EF0 = v81;\n  v83 = 0;\n  if ( v81 >= 0.625 )\n  {\n    v83 = 51;\n    if ( v81 <= 224.0 )\n    {\n      v84 = 0;\n      v85 = 0;\n      if ( v81 > 1.125 )\n      {\n        do\n        {\n          v82 = v82 * 0.5;\n          v85 += 6;\n        }\n        while ( v82 > 1.125 );\n      }\n      if ( v82 > 0.65625 )\n      {\n        v84 = 1;\n        if ( v82 > 0.75 )\n        {\n          v84 = 2;\n          if ( v82 > 0.84375 )\n          {\n            v84 = 3;\n            if ( v82 > 0.9375 )\n              v84 = (v82 > 1.0625) | 4;\n          }\n        }\n      }\n      v83 = v85 + v84;\n    }\n  }\n  if ( dword_4F9FE8 + dword_4FA0FC <= v83 )\n    v83 = dword_4F9FE8 + dword_4FA0FC;\n  dword_4FA0F8 = v83;\n  v86 = *((_DWORD *)dest + 812);\n  v87 = dword_4FA030 + 6;\n  v88 = dword_4FA030 - 6;\n  if ( v86 < dword_4FA01C )\n    v87 = dword_4FA030 + 3;\n  if ( v86 < dword_4FA01C )\n    v88 = dword_4FA030 - 3;\n  if ( v87 > v83 )\n    v87 = v83;\n  if ( v87 > dword_4FA07C )\n    v87 = dword_4FA07C;\n  v5 = dword_4FA0FC - dword_4F9FE8;\n  if ( dword_4FA0FC - dword_4F9FE8 < v87 )\n    v5 = v87;\n  if ( v88 >= (signed int)v5 )\n    v5 = v88;\n  if ( dword_4FA080 >= (signed int)v5 )\n    v5 = dword_4FA080;\n  dword_4FA0F8 = v5;\n  v89 = v5 + dword_4FA08C;\n  dword_4FA08C += v5;\n  dword_4FA058 = v5;\n  if ( !--dword_4FA02C && !*((_DWORD *)off_49F6D0 + 6) && (!v1 || !*((_DWORD *)off_49F6D0 + 18150)) )\n  {\n    if ( *((_DWORD *)qword_4F9DC0 + 287) )\n    {\nLABEL_219:\n      v90 = (signed int)((double)v89 / (double)dword_4FA090 + 0.5);\n      if ( *((_DWORD *)off_49F6D0 + 18144) == *((_DWORD *)dest + 306) - 2 )\n        dword_4FA074 = v90;\n      *((_DWORD *)off_49F6D0 + 18143) += v90;\n      dword_4FA060 = dword_4FA064;\n      dword_4FA064 = v90;\n      dword_4FA030 = v90;\n      dword_4FA03C = dword_4FA038;\n      return v5;\n    }\n    v93 = *((_DWORD *)dest + 720);\n    if ( v93 != 2 )\n    {\n      if ( v93 == 1 )\n        goto LABEL_219;\n      if ( !*((_DWORD *)dest + 721) )\n        return v5;\n    }\n    if ( *((_DWORD *)off_49F6D0 + 18150) )\n    {\n      dword_4FA000 = (signed int)((double)v89 / (double)dword_4FA090 + 0.5);\n      dword_4F9FFC = dword_4FA038;\n    }\n    else\n    {\n      dword_4FA008 = (signed int)((double)v89 / (double)dword_4FA090 + 0.5);\n      dword_4FA004 = dword_4FA038;\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x458dd0L", 
            "funcEndAddr": "0x459d9eL", 
            "funcName": "sub_458DD0"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_459E60(double a1, double a2, double a3, __m128i a4, __m128i a5)\n{\n  _DWORD *result; // rax\n  signed __int64 v6; // rcx\n  int v7; // er8\n  double *v8; // rdx\n  double v9; // xmm0_8\n  signed __int64 v10; // rsi\n  _DWORD *v11; // r10\n  int v12; // er9\n  _QWORD *v13; // rdx\n  double v14; // xmm0_8\n  int v15; // ebp\n  int v16; // edi\n  int v17; // edx\n  int v18; // esi\n  double v19; // xmm1_8\n  signed int v20; // ebp\n  void **v21; // rbp\n  int v22; // ebp\n  int v23; // edi\n  double v24; // xmm0_8\n  int v25; // edx\n  int v26; // esi\n  double v27; // xmm0_8\n  double v28; // xmm0_8\n  int v29; // edx\n  double v30; // xmm2_8\n  __m128i v31; // xmm1\n  double v32; // xmm2_8\n  double v33; // xmm0_8\n  int v34; // ecx\n  int v35; // eax\n  signed int v36; // edi\n  __m128 v37; // xmm4\n  __int64 v38; // rbx\n  double v39; // xmm2_8\n  __m128i v40; // xmm1\n  __m128d v41; // xmm0\n  __int64 v42; // rax\n  __m128d v43; // xmm4\n  double v44; // xmm0_8\n  __int64 v45; // rax\n  __int64 v46; // [rsp+0h] [rbp-B8h]\n  __int64 v47[22]; // [rsp+8h] [rbp-B0h]\n\n  result = off_49F6D0;\n  if ( !*((_DWORD *)off_49F6D0 + 6) )\n  {\n    v6 = *((signed int *)off_49F6D0 + 18155);\n    v7 = *((_DWORD *)off_49F6D0 + 18152);\n    if ( (_DWORD)v6 == v7 )\n    {\n      if ( (signed int)v6 <= 0 )\n      {\n        v9 = 0.0;\n      }\n      else\n      {\n        v8 = (double *)*((_QWORD *)off_49F6D0 + 9073);\n        v9 = *v8 + 0.0;\n        if ( (_DWORD)v6 != 1 )\n        {\n          v10 = 1LL;\n          do\n            v9 = v9 + v8[v10++];\n          while ( v10 < v6 );\n        }\n      }\n      *(double *)&qword_4F9CD0 = v9 / (double)(signed int)v6;\n      v15 = *((_DWORD *)off_49F6D0 + 18141);\n    }\n    else\n    {\n      v11 = dest;\n      v12 = *((_DWORD *)dest + 721);\n      if ( v12 && !*((_DWORD *)off_49F6D0 + 18150) )\n      {\n        v13 = (char *)off_49F6D0 + 72544;\n        v14 = *((double *)off_49F6D0 + 9068) / (double)(signed int)v6 * 0.5;\n      }\n      else\n      {\n        v13 = (char *)off_49F6D0 + 72544;\n        v14 = *((double *)off_49F6D0 + 9068) / (double)(signed int)v6;\n      }\n      qword_4F9CD0 = *(_QWORD *)&v14;\n      *v13 = 0LL;\n      v16 = dword_4FA090;\n      v17 = dword_4FA02C;\n      v18 = dword_4FA090 - dword_4FA02C;\n      dword_4F9FE0 = dword_4FA090 - dword_4FA02C;\n      if ( dword_4FA090 > dword_4FA02C )\n      {\n        v19 = (double)(result[18133] + dword_4FA034 * (v18 - 1)) / (double)v18 + 0.5;\n        v20 = (signed int)v19;\n        dword_4FA034 = (signed int)v19;\n        if ( dword_4FA03C )\n          v20 = (signed int)((double)(v18 * v20 + dword_4FA02C * dword_4FA03C) / (double)dword_4FA090 + 0.5);\n        dword_4FA038 = v20;\n      }\n      if ( (v11[720] == 2 || v12) && result[18150] == 1 )\n        v21 = &qword_4F9CE0;\n      else\n        v21 = &qword_4F9CA0;\n      *((double *)*v21 + dword_4FA090 - 1 - dword_4FA02C) = v14;\n      v22 = result[18141];\n      if ( !v17 )\n        --v22;\n      v15 = v18 + v16 * v22;\n    }\n    dword_4FA048 = result[18131];\n    qword_4F8F08 = xmmword_4F9060;\n    qword_4F8FB8 = xmmword_4F9100;\n    xmmword_4F9060 = *(__int128 *)((char *)&xmmword_4F9050 + 8);\n    xmmword_4F9100 = *(__int128 *)((char *)&xmmword_4F90F0 + 8);\n    xmmword_4F8EF8 = xmmword_4F9050;\n    xmmword_4F8FA8 = xmmword_4F90F0;\n    xmmword_4F9050 = *(__int128 *)((char *)&xmmword_4F9040 + 8);\n    xmmword_4F90F0 = *(__int128 *)((char *)&xmmword_4F90E0 + 8);\n    xmmword_4F8EE8 = xmmword_4F9040;\n    xmmword_4F8F98 = xmmword_4F90E0;\n    xmmword_4F9040 = *(__int128 *)((char *)&xmmword_4F9030 + 8);\n    xmmword_4F90E0 = *(__int128 *)((char *)&xmmword_4F90D0 + 8);\n    xmmword_4F8ED8 = xmmword_4F9030;\n    xmmword_4F8F88 = xmmword_4F90D0;\n    xmmword_4F9030 = *(__int128 *)((char *)&xmmword_4F9020 + 8);\n    xmmword_4F90D0 = *(__int128 *)((char *)&xmmword_4F90C0 + 8);\n    xmmword_4F8EC8 = xmmword_4F9020;\n    xmmword_4F8F78 = xmmword_4F90C0;\n    xmmword_4F9020 = *(__int128 *)((char *)&xmmword_4F9010 + 8);\n    xmmword_4F90C0 = *(__int128 *)((char *)&xmmword_4F90B0 + 8);\n    xmmword_4F8EB8 = xmmword_4F9010;\n    xmmword_4F8F68 = xmmword_4F90B0;\n    xmmword_4F9010 = *(__int128 *)((char *)&xmmword_4F9000 + 8);\n    xmmword_4F90B0 = *(__int128 *)((char *)&xmmword_4F90A0 + 8);\n    xmmword_4F8EA8 = xmmword_4F9000;\n    xmmword_4F8F58 = xmmword_4F90A0;\n    xmmword_4F9000 = *(__int128 *)((char *)&xmmword_4F8FF0 + 8);\n    xmmword_4F90A0 = *(__int128 *)((char *)&xmmword_4F9090 + 8);\n    xmmword_4F8E98 = xmmword_4F8FF0;\n    xmmword_4F8F48 = xmmword_4F9090;\n    xmmword_4F8FF0 = *(__int128 *)((char *)&xmmword_4F8FE0 + 8);\n    xmmword_4F9090 = *(__int128 *)((char *)&xmmword_4F9080 + 8);\n    xmmword_4F8E88 = xmmword_4F8FE0;\n    xmmword_4F8F38 = xmmword_4F9080;\n    xmmword_4F8FE0 = unk_4F8FD8;\n    *(_QWORD *)&unk_4F8E80[0] = unk_4F8FD8;\n    xmmword_4F9080 = unk_4F9078;\n    unk_4F8F30 = unk_4F9078;\n    unk_4F8FD8 = unk_4F8FD0;\n    qword_4F8E78[0] = unk_4F8FD0;\n    unk_4F9078 = *(_QWORD *)&dbl_4F9070;\n    qword_4F8F28 = *(_QWORD *)&dbl_4F9070;\n    v23 = ((unsigned __int64)(715827883LL * dword_4FA0F8) >> 63)\n        + ((unsigned __int64)(715827883LL * dword_4FA0F8) >> 32);\n    v24 = qword_491990[dword_4FA0F8 - 6 * v23];\n    if ( dword_4FA0F8 >= 6LL )\n    {\n      v25 = ((715827883LL * dword_4FA0F8 < 0) + (unsigned __int8)((unsigned __int64)(715827883LL * dword_4FA0F8) >> 32)) & 7;\n      if ( (unsigned int)(v23 - 1) >= 7 )\n      {\n        v26 = v25 - v23;\n        do\n        {\n          v27 = v24 + v24 + v24 + v24 + v24 + v24 + v24 + v24;\n          v28 = v27 + v27 + v27 + v27 + v27 + v27 + v27 + v27;\n          v24 = v28 + v28 + v28 + v28;\n          v26 += 8;\n        }\n        while ( v26 );\n      }\n      if ( ((715827883LL * dword_4FA0F8 < 0) + (unsigned __int8)((unsigned __int64)(715827883LL * dword_4FA0F8) >> 32)) & 7 )\n      {\n        v29 = -v25;\n        do\n        {\n          v24 = v24 + v24;\n          ++v29;\n        }\n        while ( v29 );\n      }\n    }\n    unk_4F8FD0 = *(_QWORD *)&v24;\n    if ( (_DWORD)v6 == v7 )\n      v30 = (double)(signed int)result[18132];\n    else\n      v30 = (double)(signed int)result[18134];\n    v31 = (__m128i)(unsigned __int64)qword_4F9CD0;\n    v32 = v30 / *(double *)&qword_4F9CD0;\n    dbl_4F9070 = v32;\n    *(double *)qword_4F8E70 = v24;\n    *(double *)qword_4F8F20 = v32;\n    qword_4F9EF8 = qword_4F9D40;\n    qword_4F9F00 = qword_4F9D48;\n    if ( *(double *)&qword_4F9CD0 <= *(double *)&qword_4F9D58 )\n    {\n      *(double *)v31.m128i_i64 = *(double *)&qword_4F9CD0 / *(double *)&qword_4F9D58;\n      v33 = *(double *)&qword_4F9CD0 / *(double *)&qword_4F9D58;\n    }\n    else\n    {\n      v33 = *(double *)&qword_4F9D58 / *(double *)&qword_4F9CD0;\n    }\n    v34 = 1;\n    if ( (signed int)(v33 * 20.0) > 0 )\n      v34 = (signed int)(v33 * 20.0);\n    if ( v34 > v15 )\n      v34 = v15;\n    v35 = dword_4FA100 + 1;\n    if ( v34 <= dword_4FA100 + 1 )\n      v35 = v34;\n    v36 = 20;\n    if ( v35 < 21 )\n      v36 = v35;\n    dword_4FA100 = v36;\n    xmmword_4F9600 = 0LL;\n    xmmword_4F95F0[0] = 0LL;\n    xmmword_4F95E0[0] = 0LL;\n    xmmword_4F95D0[0] = 0LL;\n    xmmword_4F95C0[0] = 0LL;\n    sub_45A6C0(v36, 0.0, v31, v32, a4, a5);\n    v38 = (unsigned int)dword_4FA100;\n    v39 = 0.0;\n    v40 = 0LL;\n    if ( dword_4FA100 <= 0 )\n      goto LABEL_74;\n    *(_QWORD *)&v41.m128d_f64[0] = qword_4F9EF8;\n    v41.m128d_f64[1] = *(double *)&qword_4F9F00;\n    v40 = 0LL;\n    v42 = 0LL;\n    do\n    {\n      v43 = (__m128d)(unsigned __int64)qword_4F8E70[v42];\n      v43.m128d_f64[0] = v43.m128d_f64[0] * v43.m128d_f64[0];\n      v37 = (__m128)_mm_div_pd(v41, _mm_unpckl_pd((__m128d)(unsigned __int64)qword_4F8E70[v42], v43));\n      a4 = (__m128i)_mm_movehl_ps(v37, v37);\n      *(double *)a4.m128i_i64 = *(double *)a4.m128i_i64 + *(double *)v37.m128_u64 - *(double *)&qword_4F8F20[v42];\n      *(&v46 + v42) = a4.m128i_i64[0];\n      *(double *)a4.m128i_i64 = *(double *)a4.m128i_i64 * *(double *)a4.m128i_i64;\n      *(double *)v40.m128i_i64 = *(double *)v40.m128i_i64 + *(double *)a4.m128i_i64;\n      ++v42;\n    }\n    while ( v38 != v42 );\n    v44 = 0.0;\n    if ( (_DWORD)v38 != 2 )\n    {\nLABEL_74:\n      *(double *)v40.m128i_i64 = *(double *)v40.m128i_i64 / (double)(signed int)v38;\n      if ( *(double *)v40.m128i_i64 < 0.0 )\n      {\n        v44 = sqrt(*(double *)v40.m128i_i64);\n        if ( (signed int)v38 <= 0 )\n          goto LABEL_68;\nLABEL_56:\n        if ( (_DWORD)v38 == 1 )\n        {\n          v45 = 0LL;\n        }\n        else\n        {\n          v45 = 0LL;\n          v40 = (__m128i)xmmword_4897D0;\n          do\n          {\n            if ( COERCE_DOUBLE(*(&v46 + v45) & xmmword_4897D0) > v44 )\n              *((_DWORD *)xmmword_4F95C0 + v45) = 1;\n            *(_QWORD *)&v39 = v47[v45] & xmmword_4897D0;\n            if ( v39 > v44 )\n              *((_DWORD *)xmmword_4F95C0 + v45 + 1) = 1;\n            v45 += 2LL;\n          }\n          while ( v38 - (v38 & 1) != v45 );\n          if ( !(v38 & 1) )\n            goto LABEL_68;\n        }\n        v40 = (__m128i)_mm_and_pd((__m128d)(unsigned __int64)*(&v46 + v45), (__m128d)xmmword_4897D0);\n        if ( *(double *)v40.m128i_i64 > v44 )\n          *((_DWORD *)xmmword_4F95C0 + v45) = 1;\nLABEL_68:\n        LODWORD(xmmword_4F95C0[0]) = 0;\n        sub_45A6C0(v38, v44, v40, v39, a4, (__m128i)v37);\n        if ( v15 >= 2 )\n          return sub_45AB40();\n        result = off_49F6D0;\n        if ( !*((_DWORD *)off_49F6D0 + 6) )\n        {\n          result = (_DWORD *)qword_4F9CD0;\n          unk_4F8C60 = qword_4F9CD0;\n        }\n        return result;\n      }\n      v44 = sqrt(*(double *)v40.m128i_i64);\n    }\n    if ( (signed int)v38 <= 0 )\n      goto LABEL_68;\n    goto LABEL_56;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x459e60L", 
            "funcEndAddr": "0x45a623L", 
            "funcName": "sub_459E60"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_45A6C0(signed int a1, double a2, __m128i a3, double a4, __m128i a5, __m128i a6)\n{\n  __int64 v6; // rdx\n  int v7; // er11\n  __m128i v8; // xmm0\n  __m128i v9; // xmm0\n  unsigned __int64 v10; // rax\n  signed __int64 v11; // rsi\n  __int64 v12; // rcx\n  __m128i v13; // xmm3\n  __m128i v14; // xmm1\n  __m128i v15; // xmm4\n  __m128i v16; // xmm0\n  __int64 v17; // rdx\n  unsigned __int64 v18; // rsi\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rdx\n  double v21; // r8\n  double v22; // xmm2_8\n  __int64 v23; // rsi\n  signed int v24; // ecx\n  double v25; // xmm3_8\n  int v26; // edx\n  signed int v27; // eax\n  __m128d v28; // xmm0\n  __int64 v29; // rcx\n  __m128 v30; // xmm1\n  __m128 v31; // xmm2\n  __m128d v32; // xmm5\n  __m128d v33; // xmm2\n  __m128d v34; // xmm7\n  __m128d v35; // xmm6\n  __m128d v36; // xmm4\n  __m128 v37; // xmm3\n  void *result; // rax\n\n  if ( a1 <= 0 )\n  {\n    qword_4F9F00 = 0LL;\n    qword_4F9EF8 = 0LL;\n    v8 = 0LL;\n    goto LABEL_54;\n  }\n  if ( (unsigned int)a1 >= 8 )\n  {\n    v6 = a1 & 0xFFFFFFF8;\n    v9 = _mm_cvtsi32_si128(a1);\n    v10 = (unsigned __int64)(v6 - 8) >> 3;\n    if ( v6 == 8 )\n    {\n      v14 = 0LL;\n      v12 = 0LL;\n      if ( ((_BYTE)v10 + 1) & 1 )\n      {\nLABEL_9:\n        v15 = _mm_cmpeq_epi32(a6, a6);\n        v14 = _mm_add_epi32(\n                v14,\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F95D0[v12]), (__m128i)0LL), v15));\n        v9 = _mm_add_epi32(v9, _mm_xor_si128(_mm_cmpeq_epi32((__m128i)0LL, (__m128i)xmmword_4F95C0[v12]), v15));\n        goto LABEL_10;\n      }\n    }\n    else\n    {\n      v11 = (((_BYTE)v10 + 1) & 1) - 1LL - v10;\n      v12 = 0LL;\n      v13 = _mm_cmpeq_epi32(a5, a5);\n      v14 = 0LL;\n      do\n      {\n        a6 = _mm_add_epi32(\n               _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F95C0[v12]), (__m128i)0LL), v13),\n               v9);\n        v9 = _mm_add_epi32(\n               _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F95E0[v12]), (__m128i)0LL), v13),\n               a6);\n        v14 = _mm_add_epi32(\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F95F0[v12]), (__m128i)0LL), v13),\n                _mm_add_epi32(\n                  _mm_xor_si128(\n                    _mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F95D0[v12]), (__m128i)0LL),\n                    v13),\n                  v14));\n        v12 += 4LL;\n        v11 += 2LL;\n      }\n      while ( v11 );\n      if ( ((_BYTE)v10 + 1) & 1 )\n        goto LABEL_9;\n    }\nLABEL_10:\n    v16 = _mm_add_epi32(v9, v14);\n    a3 = _mm_add_epi32(_mm_shuffle_epi32(v16, 78), v16);\n    v7 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(a3, 229), a3));\n    if ( v6 == a1 )\n      goto LABEL_12;\n    goto LABEL_11;\n  }\n  v6 = 0LL;\n  v7 = a1;\n  do\nLABEL_11:\n    v7 = (*((_DWORD *)xmmword_4F95C0 + v6++) < 1u) + v7 - 1;\n  while ( a1 != v6 );\nLABEL_12:\n  qword_4F9F00 = 0LL;\n  qword_4F9EF8 = 0LL;\n  v8 = 0LL;\n  if ( a1 <= 0 )\n    goto LABEL_54;\n  v17 = a1 & 3;\n  if ( (unsigned __int64)(unsigned int)a1 - 1 >= 3 )\n  {\n    v18 = 0LL;\n    while ( 1 )\n    {\n      if ( LODWORD(xmmword_4F95C0[v18 / 4]) )\n      {\n        if ( !DWORD1(xmmword_4F95C0[v18 / 4]) )\n        {\nLABEL_18:\n          a3.m128i_i64[0] = qword_4F8E78[v18];\n          if ( DWORD2(xmmword_4F95C0[v18 / 4]) )\n            goto LABEL_24;\n          goto LABEL_19;\n        }\n      }\n      else\n      {\n        a3.m128i_i64[0] = qword_4F8E70[v18];\n        if ( !DWORD1(xmmword_4F95C0[v18 / 4]) )\n          goto LABEL_18;\n      }\n      if ( DWORD2(xmmword_4F95C0[v18 / 4]) )\n      {\nLABEL_24:\n        if ( HIDWORD(xmmword_4F95C0[v18 / 4]) )\n          goto LABEL_25;\nLABEL_20:\n        a3.m128i_i64[0] = *((_QWORD *)&unk_4F8E80[v18 / 2] + 1);\n        goto LABEL_25;\n      }\nLABEL_19:\n      a3.m128i_i64[0] = *(_QWORD *)&unk_4F8E80[v18 / 2];\n      if ( !HIDWORD(xmmword_4F95C0[v18 / 4]) )\n        goto LABEL_20;\nLABEL_25:\n      v18 += 4LL;\n      if ( (unsigned int)a1 - v17 == v18 )\n      {\n        if ( a1 & 3 )\n          goto LABEL_27;\n        goto LABEL_31;\n      }\n    }\n  }\n  v18 = 0LL;\n  if ( a1 & 3 )\n  {\nLABEL_27:\n    v19 = v18;\n    v20 = -v17;\n    do\n    {\n      if ( !*(_DWORD *)((char *)xmmword_4F95C0 + v19 * 4) )\n        a3.m128i_i64[0] = qword_4F8E70[v19];\n      ++v19;\n      ++v20;\n    }\n    while ( v20 );\n  }\nLABEL_31:\n  if ( a1 > 0 )\n  {\n    v21 = 0.0;\n    v22 = 0.0;\n    v23 = 0LL;\n    v24 = 0;\n    do\n    {\n      v25 = *(double *)&qword_4F8E70[v23];\n      v26 = *((_DWORD *)xmmword_4F95C0 + v23);\n      v27 = v24;\n      if ( !v26 )\n        v27 = 1;\n      if ( *(double *)a3.m128i_i64 != v25 )\n        v24 = v27;\n      if ( !v26 )\n      {\n        v22 = v22 + v25 * *(double *)&qword_4F8F20[v23] / (double)v7;\n        qword_4F9EF8 = *(_QWORD *)&v22;\n        v21 = v22;\n      }\n      ++v23;\n    }\n    while ( a1 != v23 );\n    v8 = _mm_slli_si128((__m128i)*(unsigned __int64 *)&v21, 8);\n    if ( v7 > 0 && v24 )\n    {\n      v28 = 0LL;\n      if ( a1 <= 0 )\n      {\n        v30 = 0LL;\n        v31 = 0LL;\n      }\n      else\n      {\n        v29 = 0LL;\n        v30 = 0LL;\n        v31 = 0LL;\n        do\n        {\n          if ( !*((_DWORD *)xmmword_4F95C0 + v29) )\n          {\n            v32 = (__m128d)(unsigned __int64)qword_4F8E70[v29];\n            v33 = (__m128d)_mm_movehl_ps(v31, v31);\n            v33.m128d_f64[0] = v33.m128d_f64[0] + 1.0 / v32.m128d_f64[0];\n            v34.m128d_f64[1] = 0.0;\n            v34.m128d_f64[0] = 1.0 / (*(double *)&qword_4F8E70[v29] * *(double *)&qword_4F8E70[v29]);\n            v28 = _mm_add_pd(v28, _mm_unpckl_pd((__m128d)xmmword_4897E0, v34));\n            v35 = (__m128d)(unsigned __int64)qword_4F8F20[v29];\n            v32.m128d_f64[0] = v32.m128d_f64[0] * v35.m128d_f64[0];\n            v30 = (__m128)_mm_add_pd((__m128d)v30, _mm_unpckl_pd(v35, v32));\n            v31 = (__m128)_mm_unpckl_pd(v33, v33);\n          }\n          ++v29;\n        }\n        while ( a1 != v29 );\n      }\n      *(_QWORD *)&v36.m128d_f64[1] = v31.m128_u64[1];\n      v36.m128d_f64[0] = v28.m128d_f64[0];\n      v37 = (__m128)_mm_mul_pd(_mm_shuffle_pd(v28, (__m128d)v31, 1), v36);\n      *(double *)v37.m128_u64 = *(double *)v37.m128_u64 - COERCE_DOUBLE(_mm_movehl_ps(v37, v37));\n      if ( COERCE_DOUBLE(xmmword_4897D0 & v37.m128_u64[0]) <= 0.000001 )\n      {\n        *(double *)&qword_4F9EF8 = COERCE_DOUBLE(_mm_movehl_ps(v30, v30)) / v28.m128d_f64[0];\n        qword_4F9F00 = 0LL;\n        v8 = _mm_slli_si128((__m128i)(unsigned __int64)qword_4F9EF8, 8);\n      }\n      else\n      {\n        v8 = (__m128i)_mm_div_pd(\n                        _mm_sub_pd(\n                          _mm_mul_pd(v28, (__m128d)v30),\n                          _mm_mul_pd((__m128d)v31, _mm_shuffle_pd((__m128d)v30, (__m128d)v30, 1))),\n                        _mm_unpckl_pd((__m128d)v37, (__m128d)v37));\n        qword_4F9EF8 = v8.m128i_i64[1];\n        qword_4F9F00 = v8.m128i_i64[0];\n      }\n    }\n  }\nLABEL_54:\n  result = off_49F6D0;\n  if ( !*((_DWORD *)off_49F6D0 + 6) )\n  {\n    _mm_storel_epi64((__m128i *)&qword_4F9D40, _mm_shuffle_epi32(v8, 78));\n    _mm_storel_epi64((__m128i *)&qword_4F9D48, v8);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45a6c0L", 
            "funcEndAddr": "0x45aaecL", 
            "funcName": "sub_45A6C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_45AB40(double a1, double a2, double a3, __m128i a4, __m128i a5)\n{\n  void *result; // rax\n  int v6; // ecx\n  int v7; // edx\n  int v8; // esi\n  __int64 v9; // rbp\n  __m128i v10; // xmm0\n  void **v11; // rdx\n  __m128i v12; // xmm1\n  int v13; // ecx\n  int v14; // edx\n  int v15; // ebp\n  signed int v16; // ebx\n  __m128i v17; // xmm4\n  double v18; // xmm0_8\n  __m128i v19; // xmm1\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rcx\n  __int64 v22[23]; // [rsp+0h] [rbp-B8h]\n\n  result = off_49F6D0;\n  v6 = *((_DWORD *)off_49F6D0 + 18141);\n  if ( v6 > 0 )\n  {\n    v7 = *((_DWORD *)off_49F6D0 + 18152);\n    v8 = *((_DWORD *)off_49F6D0 + 18155);\n    if ( v8 != v7 )\n      v6 = dword_4F9FE0 + dword_4FA090 * v6;\n    qword_4F8DA8 = xmmword_4F8CF0;\n    xmmword_4F8CF0 = *(__int128 *)((char *)&xmmword_4F8CE0 + 8);\n    *(__int128 *)((char *)&xmmword_4F8E48 + 8) = xmmword_4F8E48;\n    xmmword_4F8D98 = xmmword_4F8CE0;\n    xmmword_4F8CE0 = *(__int128 *)((char *)&xmmword_4F8CD0 + 8);\n    *(__int128 *)((char *)&xmmword_4F8E38 + 8) = xmmword_4F8E38;\n    xmmword_4F8D88 = xmmword_4F8CD0;\n    xmmword_4F8CD0 = *(__int128 *)((char *)&xmmword_4F8CC0 + 8);\n    *(__int128 *)((char *)&xmmword_4F8E28 + 8) = xmmword_4F8E28;\n    xmmword_4F8D78 = xmmword_4F8CC0;\n    xmmword_4F8CC0 = *(__int128 *)((char *)&xmmword_4F8CB0 + 8);\n    *(__int128 *)((char *)&xmmword_4F8E18 + 8) = xmmword_4F8E18;\n    xmmword_4F8D68 = xmmword_4F8CB0;\n    xmmword_4F8CB0 = *(__int128 *)((char *)&xmmword_4F8CA0 + 8);\n    *(__int128 *)((char *)&xmmword_4F8E08 + 8) = xmmword_4F8E08;\n    xmmword_4F8D58 = xmmword_4F8CA0;\n    xmmword_4F8CA0 = *(__int128 *)((char *)&xmmword_4F8C90 + 8);\n    *(__int128 *)((char *)&xmmword_4F8DF8 + 8) = xmmword_4F8DF8;\n    xmmword_4F8D48 = xmmword_4F8C90;\n    xmmword_4F8C90 = *(__int128 *)((char *)&xmmword_4F8C80 + 8);\n    *(__int128 *)((char *)&xmmword_4F8DE8 + 8) = xmmword_4F8DE8;\n    xmmword_4F8D38 = xmmword_4F8C80;\n    xmmword_4F8C80 = *(__int128 *)((char *)&xmmword_4F8C70 + 8);\n    *(__int128 *)((char *)&xmmword_4F8DD8 + 8) = xmmword_4F8DD8;\n    xmmword_4F8D28 = xmmword_4F8C70;\n    *(_QWORD *)&xmmword_4F8DD8 = qword_4F8DD0;\n    xmmword_4F8C70 = unk_4F8C68;\n    *(_QWORD *)&unk_4F8D20[0] = unk_4F8C68;\n    v9 = unk_4F8C60;\n    unk_4F8C68 = unk_4F8C60;\n    qword_4F8D18[0] = unk_4F8C60;\n    *(__int128 *)((char *)&xmmword_4F8DC0 + 8) = xmmword_4F8DC0;\n    unk_4F8C60 = qword_4F9CD0;\n    qword_4F8D10[0] = qword_4F9CD0;\n    v10 = (__m128i)(unsigned __int64)qword_4F9CD0;\n    if ( v8 != v7 )\n    {\n      if ( (*((_DWORD *)dest + 720) == 2 || *((_DWORD *)dest + 721)) && *((_DWORD *)off_49F6D0 + 18150) == 1 )\n        v11 = &qword_4F9CE8;\n      else\n        v11 = &qword_4F9CA8;\n      v9 = *((_QWORD *)*v11 + dword_4FA090 - 1 - dword_4FA02C);\n    }\n    *(_QWORD *)&xmmword_4F8DC0 = v9;\n    qword_4F9D10 = qword_4F9D30;\n    qword_4F9D18 = qword_4F9D38;\n    v12 = (__m128i)(unsigned __int64)qword_4F9D58;\n    if ( *(double *)v10.m128i_i64 <= *(double *)&qword_4F9D58 )\n    {\n      *(double *)v10.m128i_i64 = *(double *)&qword_4F9CD0 / *(double *)v12.m128i_i64;\n      v12 = v10;\n    }\n    else\n    {\n      *(double *)v12.m128i_i64 = *(double *)v12.m128i_i64 / *(double *)v10.m128i_i64;\n    }\n    *(double *)v12.m128i_i64 = *(double *)v12.m128i_i64 * 20.0;\n    v13 = v6 - 1;\n    if ( v13 > (signed int)*(double *)v12.m128i_i64 )\n      v13 = (signed int)*(double *)v12.m128i_i64;\n    v14 = 1;\n    if ( v13 > 0 )\n      v14 = v13;\n    v15 = dword_4FA014 + 1;\n    if ( v14 <= dword_4FA014 + 1 )\n      v15 = v14;\n    v16 = 20;\n    if ( v15 < 21 )\n      v16 = v15;\n    dword_4FA014 = v16;\n    xmmword_4F95A0 = 0LL;\n    xmmword_4F9590[0] = 0LL;\n    xmmword_4F9580[0] = 0LL;\n    xmmword_4F9570[0] = 0LL;\n    xmmword_4F9560[0] = 0LL;\n    if ( !*((_DWORD *)off_49F6D0 + 6) )\n      qword_4F9D58 = qword_4F9CD0;\n    sub_45AFA0(v16, 0.0, v12, a3, a4, a5);\n    v18 = 0.0;\n    v19 = 0LL;\n    if ( v15 > 0 )\n    {\n      a3 = *(double *)&qword_4F9D10;\n      a4 = (__m128i)(unsigned __int64)qword_4F9D18;\n      v19 = 0LL;\n      v20 = 0LL;\n      do\n      {\n        v17 = (__m128i)*((unsigned __int64 *)&xmmword_4F8DC0 + v20);\n        *(double *)v17.m128i_i64 = *(double *)v17.m128i_i64 * a3\n                                 + *(double *)a4.m128i_i64\n                                 - *(double *)&qword_4F8D10[v20];\n        v22[v20] = v17.m128i_i64[0];\n        *(double *)v17.m128i_i64 = *(double *)v17.m128i_i64 * *(double *)v17.m128i_i64;\n        *(double *)v19.m128i_i64 = *(double *)v19.m128i_i64 + *(double *)v17.m128i_i64;\n        ++v20;\n      }\n      while ( v20 < v16 );\n    }\n    if ( v16 != 2 )\n    {\n      *(double *)v19.m128i_i64 = *(double *)v19.m128i_i64 / (double)v16;\n      if ( *(double *)v19.m128i_i64 < 0.0 )\n      {\n        v18 = sqrt(*(double *)v19.m128i_i64);\n        if ( v15 > 0 )\n        {\nLABEL_31:\n          v21 = 0LL;\n          v19 = (__m128i)xmmword_4897D0;\n          do\n          {\n            *(_QWORD *)&a3 = v22[v21] & xmmword_4897D0;\n            if ( a3 > v18 )\n              *((_DWORD *)xmmword_4F9560 + v21) = 1;\n            ++v21;\n          }\n          while ( v21 < v16 );\n        }\nLABEL_35:\n        LODWORD(xmmword_4F9560[0]) = 0;\n        return sub_45AFA0(v16, v18, v19, a3, a4, v17);\n      }\n      v18 = sqrt(*(double *)v19.m128i_i64);\n    }\n    if ( v15 > 0 )\n      goto LABEL_31;\n    goto LABEL_35;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45ab40L", 
            "funcEndAddr": "0x45af9dL", 
            "funcName": "sub_45AB40"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_45AFA0(signed int a1, double a2, __m128i a3, double a4, __m128i a5, __m128i a6)\n{\n  __int64 v6; // rdx\n  int v7; // er11\n  __m128i v8; // xmm0\n  __m128i v9; // xmm0\n  unsigned __int64 v10; // rax\n  signed __int64 v11; // rsi\n  __int64 v12; // rcx\n  __m128i v13; // xmm3\n  __m128i v14; // xmm1\n  __m128i v15; // xmm4\n  __m128i v16; // xmm0\n  __int64 v17; // rdx\n  unsigned __int64 v18; // rsi\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rdx\n  double v21; // r8\n  double v22; // xmm2_8\n  __int64 v23; // rsi\n  signed int v24; // ecx\n  double v25; // xmm3_8\n  int v26; // edx\n  signed int v27; // eax\n  __m128d v28; // xmm0\n  __int64 v29; // rcx\n  __m128d v30; // xmm1\n  __m128d v31; // xmm2\n  __m128d v32; // xmm4\n  __m128d v33; // xmm6\n  __m128d v34; // xmm5\n  __m128d v35; // xmm3\n  __m128 v36; // xmm3\n  void *result; // rax\n\n  if ( a1 <= 0 )\n  {\n    qword_4F9D18 = 0LL;\n    qword_4F9D10 = 0LL;\n    v8 = 0LL;\n    goto LABEL_54;\n  }\n  if ( (unsigned int)a1 >= 8 )\n  {\n    v6 = a1 & 0xFFFFFFF8;\n    v9 = _mm_cvtsi32_si128(a1);\n    v10 = (unsigned __int64)(v6 - 8) >> 3;\n    if ( v6 == 8 )\n    {\n      v14 = 0LL;\n      v12 = 0LL;\n      if ( ((_BYTE)v10 + 1) & 1 )\n      {\nLABEL_9:\n        v15 = _mm_cmpeq_epi32(a6, a6);\n        v14 = _mm_add_epi32(\n                v14,\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F9570[v12]), (__m128i)0LL), v15));\n        v9 = _mm_add_epi32(v9, _mm_xor_si128(_mm_cmpeq_epi32((__m128i)0LL, (__m128i)xmmword_4F9560[v12]), v15));\n        goto LABEL_10;\n      }\n    }\n    else\n    {\n      v11 = (((_BYTE)v10 + 1) & 1) - 1LL - v10;\n      v12 = 0LL;\n      v13 = _mm_cmpeq_epi32(a5, a5);\n      v14 = 0LL;\n      do\n      {\n        a6 = _mm_add_epi32(\n               _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F9560[v12]), (__m128i)0LL), v13),\n               v9);\n        v9 = _mm_add_epi32(\n               _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F9580[v12]), (__m128i)0LL), v13),\n               a6);\n        v14 = _mm_add_epi32(\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F9590[v12]), (__m128i)0LL), v13),\n                _mm_add_epi32(\n                  _mm_xor_si128(\n                    _mm_cmpeq_epi32(_mm_load_si128((const __m128i *)&xmmword_4F9570[v12]), (__m128i)0LL),\n                    v13),\n                  v14));\n        v12 += 4LL;\n        v11 += 2LL;\n      }\n      while ( v11 );\n      if ( ((_BYTE)v10 + 1) & 1 )\n        goto LABEL_9;\n    }\nLABEL_10:\n    v16 = _mm_add_epi32(v9, v14);\n    a3 = _mm_add_epi32(_mm_shuffle_epi32(v16, 78), v16);\n    v7 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(a3, 229), a3));\n    if ( v6 == a1 )\n      goto LABEL_12;\n    goto LABEL_11;\n  }\n  v6 = 0LL;\n  v7 = a1;\n  do\nLABEL_11:\n    v7 = (*((_DWORD *)xmmword_4F9560 + v6++) < 1u) + v7 - 1;\n  while ( a1 != v6 );\nLABEL_12:\n  qword_4F9D18 = 0LL;\n  qword_4F9D10 = 0LL;\n  v8 = 0LL;\n  if ( a1 <= 0 )\n    goto LABEL_54;\n  v17 = a1 & 3;\n  if ( (unsigned __int64)(unsigned int)a1 - 1 >= 3 )\n  {\n    v18 = 0LL;\n    while ( 1 )\n    {\n      if ( LODWORD(xmmword_4F9560[v18 / 4]) )\n      {\n        if ( !DWORD1(xmmword_4F9560[v18 / 4]) )\n        {\nLABEL_18:\n          a3.m128i_i64[0] = qword_4F8D18[v18];\n          if ( DWORD2(xmmword_4F9560[v18 / 4]) )\n            goto LABEL_24;\n          goto LABEL_19;\n        }\n      }\n      else\n      {\n        a3.m128i_i64[0] = qword_4F8D10[v18];\n        if ( !DWORD1(xmmword_4F9560[v18 / 4]) )\n          goto LABEL_18;\n      }\n      if ( DWORD2(xmmword_4F9560[v18 / 4]) )\n      {\nLABEL_24:\n        if ( HIDWORD(xmmword_4F9560[v18 / 4]) )\n          goto LABEL_25;\nLABEL_20:\n        a3.m128i_i64[0] = *((_QWORD *)&unk_4F8D20[v18 / 2] + 1);\n        goto LABEL_25;\n      }\nLABEL_19:\n      a3.m128i_i64[0] = *(_QWORD *)&unk_4F8D20[v18 / 2];\n      if ( !HIDWORD(xmmword_4F9560[v18 / 4]) )\n        goto LABEL_20;\nLABEL_25:\n      v18 += 4LL;\n      if ( (unsigned int)a1 - v17 == v18 )\n      {\n        if ( a1 & 3 )\n          goto LABEL_27;\n        goto LABEL_31;\n      }\n    }\n  }\n  v18 = 0LL;\n  if ( a1 & 3 )\n  {\nLABEL_27:\n    v19 = v18;\n    v20 = -v17;\n    do\n    {\n      if ( !*(_DWORD *)((char *)xmmword_4F9560 + v19 * 4) )\n        a3.m128i_i64[0] = qword_4F8D10[v19];\n      ++v19;\n      ++v20;\n    }\n    while ( v20 );\n  }\nLABEL_31:\n  if ( a1 > 0 )\n  {\n    v21 = 0.0;\n    v22 = 0.0;\n    v23 = 0LL;\n    v24 = 0;\n    do\n    {\n      v25 = *(double *)&qword_4F8D10[v23];\n      v26 = *((_DWORD *)xmmword_4F9560 + v23);\n      v27 = v24;\n      if ( !v26 )\n        v27 = 1;\n      if ( *(double *)a3.m128i_i64 != v25 )\n        v24 = v27;\n      if ( !v26 )\n      {\n        v22 = v22 + v25 / (*((double *)&xmmword_4F8DC0 + v23) * (double)v7);\n        qword_4F9D10 = *(_QWORD *)&v22;\n        v21 = v22;\n      }\n      ++v23;\n    }\n    while ( a1 != v23 );\n    v8 = _mm_slli_si128((__m128i)*(unsigned __int64 *)&v21, 8);\n    if ( v7 > 0 && v24 )\n    {\n      v28 = 0LL;\n      if ( a1 <= 0 )\n      {\n        v30 = 0LL;\n        v31 = 0LL;\n      }\n      else\n      {\n        v29 = 0LL;\n        v30 = 0LL;\n        v31 = 0LL;\n        do\n        {\n          if ( !*((_DWORD *)xmmword_4F9560 + v29) )\n          {\n            v32 = (__m128d)*((unsigned __int64 *)&xmmword_4F8DC0 + v29);\n            v31.m128d_f64[0] = v31.m128d_f64[0] + v32.m128d_f64[0];\n            v33.m128d_f64[1] = *((double *)&xmmword_4897F0 + 1);\n            v33.m128d_f64[0] = *((double *)&xmmword_4F8DC0 + v29) * *((double *)&xmmword_4F8DC0 + v29);\n            v28 = _mm_add_pd(v28, v33);\n            v34 = (__m128d)(unsigned __int64)qword_4F8D10[v29];\n            v32.m128d_f64[0] = v32.m128d_f64[0] * v34.m128d_f64[0];\n            v30 = _mm_add_pd(v30, _mm_unpckl_pd(v34, v32));\n            v31 = _mm_unpckl_pd(v31, v31);\n          }\n          ++v29;\n        }\n        while ( a1 != v29 );\n      }\n      v35.m128d_f64[1] = v31.m128d_f64[1];\n      v35.m128d_f64[0] = v28.m128d_f64[0];\n      v36 = (__m128)_mm_mul_pd(v35, _mm_shuffle_pd(v28, v31, 1));\n      *(double *)v36.m128_u64 = *(double *)v36.m128_u64 - COERCE_DOUBLE(_mm_movehl_ps(v36, v36));\n      if ( COERCE_DOUBLE(xmmword_4897D0 & v36.m128_u64[0]) <= 0.000001 )\n      {\n        *(double *)&qword_4F9D10 = v30.m128d_f64[0] / v31.m128d_f64[0];\n        qword_4F9D18 = 0LL;\n        v8 = _mm_slli_si128((__m128i)COERCE_UNSIGNED_INT64(v30.m128d_f64[0] / v31.m128d_f64[0]), 8);\n      }\n      else\n      {\n        v8 = (__m128i)_mm_div_pd(\n                        _mm_sub_pd(_mm_mul_pd(v28, v30), _mm_mul_pd(v31, _mm_shuffle_pd(v30, v30, 1))),\n                        _mm_unpckl_pd((__m128d)v36, (__m128d)v36));\n        qword_4F9D10 = v8.m128i_i64[1];\n        qword_4F9D18 = v8.m128i_i64[0];\n      }\n    }\n  }\nLABEL_54:\n  result = off_49F6D0;\n  if ( !*((_DWORD *)off_49F6D0 + 6) )\n  {\n    _mm_storel_epi64((__m128i *)&qword_4F9D30, _mm_shuffle_epi32(v8, 78));\n    _mm_storel_epi64((__m128i *)&qword_4F9D38, v8);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45afa0L", 
            "funcEndAddr": "0x45b3b6L", 
            "funcName": "sub_45AFA0"
        }, 
        {
            "decompiledFuncCode": "void sub_45B3C0()\n{\n  sub_426C20(qword_4A00E0);\n  sub_426AF0(qword_4A00D0);\n  sub_426AF0(qword_4A00D8);\n  sub_426AF0(qword_4A00F0);\n  if ( *((_DWORD *)dest + 805) )\n    sub_426AF0(qword_4A0130);\n  sub_474DC0(qword_4A00F8);\n  sub_474DC0(qword_4A0100);\n  sub_474DC0(qword_4A0108);\n  sub_474DC0(qword_4A0110);\n  sub_474DC0(qword_4A0118);\n  sub_474DC0(qword_4A0120);\n  sub_474DC0(qword_4A0128);\n}\n", 
            "funcStartAddr": "0x45b3c0L", 
            "funcEndAddr": "0x45b462L", 
            "funcName": "sub_45B3C0"
        }, 
        {
            "decompiledFuncCode": "void sub_45B470()\n{\n  qword_4F9F48 = 0LL;\n  sub_426560((__int64)&qword_4A00E0);\n  sub_4262B0(&qword_4A00D0);\n  sub_4262B0(&qword_4A00D8);\n  sub_4262B0(&qword_4A00F0);\n  qword_4A00E8 = **(_QWORD **)qword_4A00F0;\n  if ( *((_DWORD *)dest + 805) )\n    sub_4262B0(&qword_4A0130);\n  qword_4A00F8 = sub_474E10();\n  qword_4A0100 = sub_474E10();\n  qword_4A0108 = sub_474E10();\n  qword_4A0110 = sub_474E10();\n  qword_4A0118 = sub_474E10();\n  qword_4A0120 = sub_474E10();\n  qword_4A0128 = sub_474E10();\n}\n", 
            "funcStartAddr": "0x45b470L", 
            "funcEndAddr": "0x45b536L", 
            "funcName": "sub_45B470"
        }, 
        {
            "decompiledFuncCode": "signed int *sub_45B540()\n{\n  signed int *result; // rax\n  signed int v1; // ecx\n  signed __int64 v2; // rcx\n  signed __int64 v3; // rdx\n  signed __int64 v4; // r8\n  unsigned __int64 v5; // r9\n  unsigned __int64 v6; // r14\n  signed __int64 v7; // r10\n  __int64 v8; // rsi\n  unsigned __int64 v9; // r15\n  unsigned __int64 v10; // rdi\n  signed __int64 v11; // rcx\n  signed __int64 v12; // r11\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // rbx\n  __int64 v15; // rdx\n  int v16; // ebp\n  int v17; // eax\n  __int64 v18; // rax\n  int v19; // edx\n  int v20; // ebp\n  __int64 v21; // rax\n  int v22; // edx\n  int v23; // ebp\n  __int64 v24; // rax\n  int v25; // edx\n  int v26; // ebp\n  __int64 v27; // rax\n  int v28; // edx\n  int v29; // ebp\n  __int64 v30; // rax\n  int v31; // edx\n  int v32; // ebp\n  __int64 v33; // rax\n  int v34; // edx\n  int v35; // ebp\n  __int64 v36; // rax\n  int v37; // edx\n  int v38; // ebp\n\n  result = (signed int *)off_49F6D0;\n  v1 = *((_DWORD *)off_49F6D0 + 15);\n  if ( *((_DWORD *)off_49F6D0 + 6) == 2 )\n  {\n    if ( v1 > 0 )\n    {\n      v2 = 0LL;\n      do\n      {\n        if ( result[13] > 0 )\n        {\n          v3 = 0LL;\n          do\n          {\n            *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v2) + v3++) = 1;\n            result = (signed int *)off_49F6D0;\n          }\n          while ( v3 < *((signed int *)off_49F6D0 + 13) );\n        }\n        ++v2;\n      }\n      while ( v2 < result[15] );\n    }\n  }\n  else if ( v1 >= 8 )\n  {\n    v4 = 0LL;\n    v5 = 0LL;\n    do\n    {\n      if ( result[13] >= 8 )\n      {\n        v6 = 8 * v4 + 8;\n        v7 = 0LL;\n        v8 = 0LL;\n        do\n        {\n          v9 = 8 * v7 + 8;\n          v10 = v8 | 1;\n          v11 = v8 | 3;\n          v12 = v8 | 7;\n          v13 = v5;\n          v14 = v5;\n          if ( *(_BYTE *)(*((_QWORD *)qword_4F9F58 + v4) + v7) )\n          {\n            do\n            {\n              *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v8) = 1;\n              if ( v10 < v9 )\n              {\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v10) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v10 + 1) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v11) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v11 + 1) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v11 + 2) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v11 + 3) = 1;\n                *(_BYTE *)(*((_QWORD *)qword_4F9F40 + v13) + v12) = 1;\n              }\n              ++v13;\n            }\n            while ( v13 < v6 );\n          }\n          else\n          {\n            do\n            {\n              v15 = *((_QWORD *)qword_4F9F40 + v14);\n              v16 = *(unsigned __int8 *)(v15 + v8);\n              v17 = *((_DWORD *)dest + 9);\n              if ( v17 > v16 )\n                LOBYTE(v17) = v16;\n              *(_BYTE *)(v15 + v8) = v17 + 1;\n              if ( v10 < v9 )\n              {\n                v18 = *((_QWORD *)qword_4F9F40 + v14);\n                v19 = *(unsigned __int8 *)(v18 + v10);\n                v20 = *((_DWORD *)dest + 9);\n                if ( v20 > v19 )\n                  LOBYTE(v20) = v19;\n                *(_BYTE *)(v18 + v10) = v20 + 1;\n                v21 = *((_QWORD *)qword_4F9F40 + v14);\n                v22 = *(unsigned __int8 *)(v21 + v10 + 1);\n                v23 = *((_DWORD *)dest + 9);\n                if ( v23 > v22 )\n                  LOBYTE(v23) = v22;\n                *(_BYTE *)(v21 + v10 + 1) = v23 + 1;\n                v24 = *((_QWORD *)qword_4F9F40 + v14);\n                v25 = *(unsigned __int8 *)(v24 + v11);\n                v26 = *((_DWORD *)dest + 9);\n                if ( v26 > v25 )\n                  LOBYTE(v26) = v25;\n                *(_BYTE *)(v24 + v11) = v26 + 1;\n                v27 = *((_QWORD *)qword_4F9F40 + v14);\n                v28 = *(unsigned __int8 *)(v27 + v11 + 1);\n                v29 = *((_DWORD *)dest + 9);\n                if ( v29 > v28 )\n                  LOBYTE(v29) = v28;\n                *(_BYTE *)(v27 + v11 + 1) = v29 + 1;\n                v30 = *((_QWORD *)qword_4F9F40 + v14);\n                v31 = *(unsigned __int8 *)(v30 + v11 + 2);\n                v32 = *((_DWORD *)dest + 9);\n                if ( v32 > v31 )\n                  LOBYTE(v32) = v31;\n                *(_BYTE *)(v30 + v11 + 2) = v32 + 1;\n                v33 = *((_QWORD *)qword_4F9F40 + v14);\n                v34 = *(unsigned __int8 *)(v33 + v11 + 3);\n                v35 = *((_DWORD *)dest + 9);\n                if ( v35 > v34 )\n                  LOBYTE(v35) = v34;\n                *(_BYTE *)(v33 + v11 + 3) = v35 + 1;\n                v36 = *((_QWORD *)qword_4F9F40 + v14);\n                v37 = *(unsigned __int8 *)(v36 + v12);\n                v38 = *((_DWORD *)dest + 9);\n                if ( v38 > v37 )\n                  LOBYTE(v38) = v37;\n                *(_BYTE *)(v36 + v12) = v38 + 1;\n              }\n              ++v14;\n            }\n            while ( v14 < v6 );\n          }\n          ++v7;\n          result = (signed int *)off_49F6D0;\n          v8 += 8LL;\n        }\n        while ( v7 < *((_DWORD *)off_49F6D0 + 13) / 8 );\n      }\n      ++v4;\n      v5 += 8LL;\n    }\n    while ( v4 < result[15] / 8 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45b540L", 
            "funcEndAddr": "0x45b862L", 
            "funcName": "sub_45B540"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_45B870(unsigned int a1, int a2, signed int a3, __int64 a4)\n{\n  signed int v4; // er12\n  signed int v5; // ebp\n  int v6; // er11\n  int v7; // edi\n  __int64 v8; // r10\n  __int64 v9; // r9\n  __int64 v10; // r8\n  __int64 v11; // rbx\n  int v12; // er15\n  int v13; // eax\n  signed __int64 v14; // rsi\n  signed __int64 v15; // rdi\n  int v16; // er11\n  signed __int64 v17; // rbp\n  unsigned int v18; // er8\n  __int64 v19; // rax\n  __int64 v20; // r10\n  int v21; // ebp\n  __int64 v22; // rbx\n  signed __int64 result; // rax\n  __int64 v24; // rbx\n  __int64 v25; // rcx\n  __int64 v26; // rcx\n  __int64 v27; // rcx\n  __int64 v28; // rcx\n  signed int v29; // esi\n  unsigned int v30; // er13\n  unsigned int v31; // ecx\n  __int64 v32; // rsi\n  __int64 v33; // rsi\n  __int64 v34; // r14\n  int v35; // ebp\n  __int64 v36; // r12\n  __int64 v37; // rcx\n  __int64 v38; // r13\n  __int64 v39; // rsi\n  __int64 v40; // rdi\n  __int64 v41; // rcx\n  __int64 v42; // rbp\n  __int64 v43; // r9\n  __int64 v44; // rax\n  __int64 v45; // r12\n  __int64 v46; // r11\n  __int64 v47; // r8\n  __int64 v48; // r13\n  __int64 v49; // rdi\n  signed int v50; // ebx\n  __int64 v51; // rsi\n  signed int v52; // ebx\n  unsigned int v53; // er10\n  __int64 v54; // rsi\n  signed int v55; // ebx\n  __int64 v56; // rsi\n  signed int v57; // ebx\n  __int64 v58; // rsi\n  __int64 v59; // rbp\n  __int64 v60; // rax\n  __int64 v61; // r10\n  __int64 v62; // rdi\n  __int64 v63; // r8\n  __int64 v64; // r12\n  __int64 v65; // r11\n  __int64 v66; // r13\n  int v67; // er9\n  __int64 v68; // rbx\n  __int64 v69; // rbx\n  __int64 v70; // rsi\n  __int64 v71; // rsi\n  __int64 v72; // rsi\n  __int64 v73; // rsi\n  __int64 v74; // rbx\n  signed __int16 *v75; // rax\n  int v76; // edi\n  int v77; // esi\n  int v78; // ecx\n  int v79; // eax\n  int v80; // er15\n  int v81; // er14\n  char v82; // si\n  unsigned int v83; // er8\n  __int64 v84; // rax\n  __int64 v85; // rdi\n  __int64 v86; // rdi\n  __int64 v87; // rdi\n  __int64 v88; // rbx\n  __int64 v89; // r11\n  __int64 v90; // rax\n  int v91; // edi\n  __int64 v92; // r9\n  __int64 v93; // r13\n  __int64 v94; // rsi\n  __int64 v95; // rbp\n  __int64 v96; // r12\n  __int64 v97; // rdi\n  __int64 v98; // rbx\n  __int64 v99; // rbx\n  __int64 v100; // rbx\n  __int64 v101; // rbx\n  __int64 v102; // rbx\n  __int64 v103; // rcx\n  __int64 v104; // rbp\n  __int64 v105; // rcx\n  __int64 v106; // rsi\n  __int64 v107; // rdi\n  __int64 v108; // r14\n  __int64 v109; // rbp\n  __int64 v110; // rbp\n  __int64 v111; // rbp\n  __int64 v112; // rbp\n  __int64 v113; // r15\n  __int64 v114; // rbp\n  unsigned int v115; // [rsp+0h] [rbp-ECh]\n  unsigned int v116; // [rsp+10h] [rbp-DCh]\n  signed int v117; // [rsp+14h] [rbp-D8h]\n  signed int v118; // [rsp+1Ch] [rbp-D0h]\n  int v119; // [rsp+24h] [rbp-C8h]\n  unsigned int v120; // [rsp+24h] [rbp-C8h]\n  int v121; // [rsp+24h] [rbp-C8h]\n  __int64 v122; // [rsp+24h] [rbp-C8h]\n  unsigned int v123; // [rsp+2Ch] [rbp-C0h]\n  __int64 v124; // [rsp+2Ch] [rbp-C0h]\n  __int64 v125; // [rsp+34h] [rbp-B8h]\n  int v126; // [rsp+34h] [rbp-B8h]\n  __int64 v127; // [rsp+3Ch] [rbp-B0h]\n  __int64 v128; // [rsp+3Ch] [rbp-B0h]\n  __int64 v129; // [rsp+44h] [rbp-A8h]\n  int v130; // [rsp+50h] [rbp-9Ch]\n  __int64 v131; // [rsp+54h] [rbp-98h]\n  __int64 v132; // [rsp+5Ch] [rbp-90h]\n  signed __int64 v133; // [rsp+64h] [rbp-88h]\n  signed __int64 v134; // [rsp+6Ch] [rbp-80h]\n  signed __int64 v135; // [rsp+7Ch] [rbp-70h]\n  __int64 v136; // [rsp+8Ch] [rbp-60h]\n  __int64 v137; // [rsp+9Ch] [rbp-50h]\n  signed __int64 v138; // [rsp+ACh] [rbp-40h]\n  signed __int64 v139; // [rsp+B4h] [rbp-38h]\n\n  v4 = *((_DWORD *)off_49F6D0 + 13);\n  v118 = *((_DWORD *)off_49F6D0 + 15);\n  if ( (signed int)a4 < 4 )\n  {\n    v7 = 2 * a1;\n    v5 = 0;\n    if ( (_DWORD)a4 == 2 )\n      v5 = v7;\n    v6 = v5 + 2 * ((_DWORD)a4 != 2) + 2;\n    if ( (_DWORD)a4 != 3 )\n      v7 = 0;\n  }\n  else\n  {\n    v5 = (a1 + (a1 >> 31)) & 0xFFFFFFFE;\n    v6 = v5 + 2;\n    v7 = 2 * ((signed int)a1 % 2);\n  }\n  v8 = (unsigned int)(v4 - 1);\n  v116 = v118 - 1;\n  v9 = *((_QWORD *)off_49F6D0 + 8991);\n  v10 = a2;\n  v11 = a3;\n  a4 = (signed int)a4;\n  v12 = *((_DWORD *)off_49F6D0 + 36);\n  v13 = *((_DWORD *)off_49F6D0 + 37);\n  v14 = v7;\n  v135 = v7 + 2 * ((signed int)a4 < 3) + 2;\n  v15 = v5;\n  v133 = v6;\n  v117 = *((_DWORD *)off_49F6D0 + 13);\n  v115 = v4 - 1;\n  v137 = v10;\n  v136 = (signed int)a4;\n  v134 = v14;\n  while ( 2 )\n  {\n    v16 = 16 * (v13 + v15);\n    v17 = v14;\n    v138 = v15;\n    v130 = 16 * (v13 + v15);\n    do\n    {\n      v75 = *(signed __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8 * v17) + 8 * v15) + 8 * v10)\n                                           + 8 * v11)\n                               + 8 * a4);\n      v76 = v16 + v75[1];\n      LODWORD(v75) = *v75;\n      v139 = v17;\n      v77 = (_DWORD)v75 + 16 * (v12 + v17);\n      v78 = v76 & 3;\n      v79 = ((_BYTE)v75 + 16 * ((_BYTE)v12 + (_BYTE)v17)) & 3;\n      v80 = (v76 - v78) / 4;\n      v81 = (v77 - v79) / 4;\n      if ( ((unsigned __int8)v76 | (unsigned __int8)v77) & 3 )\n      {\n        if ( v76 & 3 )\n        {\n          v82 = v77 & 3;\n          if ( v82 )\n          {\n            if ( v82 == 2 )\n            {\n              v83 = 0;\nLABEL_269:\n              v84 = v83 + v80 - 2;\n              if ( v118 <= (signed int)v84 )\n                v84 = v116;\n              if ( (signed int)v84 < 0 )\n                v84 = 0LL;\n              v85 = v83 + v80 - 1;\n              if ( v118 <= (signed int)v85 )\n                v85 = v116;\n              if ( (signed int)v85 < 0 )\n                v85 = 0LL;\n              v122 = v85;\n              v86 = v83 + v80;\n              if ( v118 <= (signed int)v86 )\n                v86 = v116;\n              if ( (signed int)v86 < 0 )\n                v86 = 0LL;\n              v128 = v86;\n              v87 = v83 + v80 + 1;\n              if ( v118 <= (signed int)v87 )\n                v87 = v116;\n              if ( (signed int)v87 < 0 )\n                v87 = 0LL;\n              v124 = v87;\n              v88 = v83 + v80 + 2;\n              if ( v118 <= (signed int)v88 )\n                v88 = v116;\n              v89 = *((_QWORD *)qword_4F9F40 + v84);\n              if ( (signed int)v88 < 0 )\n                v88 = 0LL;\n              v129 = v88;\n              v90 = v83 + v80 + 3;\n              if ( v118 <= (signed int)v90 )\n                v90 = v116;\n              if ( (signed int)v90 < 0 )\n                v90 = 0LL;\n              v132 = v90;\n              v91 = 0;\n              v131 = v89;\n              while ( 1 )\n              {\n                v92 = (unsigned int)(v81 + v91);\n                v93 = (unsigned int)(v81 + v91 - 2);\n                if ( v117 <= (signed int)v93 )\n                  v93 = v115;\n                result = 0LL;\n                if ( (signed int)v93 < 0 )\n                  v93 = 0LL;\n                v94 = (unsigned int)(v81 + v91 - 1);\n                if ( v117 < (signed int)v92 )\n                  v94 = v115;\n                if ( v117 <= (signed int)v92 )\n                  v92 = v115;\n                if ( (signed int)v94 < 0 )\n                  v94 = 0LL;\n                if ( (signed int)v92 < 0 )\n                  v92 = 0LL;\n                v95 = (unsigned int)(v81 + v91 + 1);\n                if ( v117 <= (signed int)v95 )\n                  v95 = v115;\n                if ( (signed int)v95 < 0 )\n                  v95 = 0LL;\n                v96 = (unsigned int)(v81 + v91 + 2);\n                if ( v117 <= (signed int)v96 )\n                  v96 = v115;\n                if ( (signed int)v96 < 0 )\n                  v96 = 0LL;\n                v126 = v91;\n                v97 = (unsigned int)(v81 + v91 + 3);\n                if ( v117 <= (signed int)v97 )\n                  v97 = v115;\n                if ( (signed int)v97 < 0 )\n                  v97 = 0LL;\n                if ( *(unsigned __int8 *)(v89 + v93) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v89 + v94) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v89 + v92) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v89 + v95) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v89 + v96) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v89 + v97) <= a3 )\n                  break;\n                v98 = *((_QWORD *)qword_4F9F40 + v122);\n                if ( *(unsigned __int8 *)(v98 + v93) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v98 + v94) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v98 + v92) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v98 + v95) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v98 + v96) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v98 + v97) <= a3 )\n                  break;\n                v99 = *((_QWORD *)qword_4F9F40 + v128);\n                if ( *(unsigned __int8 *)(v99 + v93) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v99 + v94) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v99 + v92) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v99 + v95) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v99 + v96) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v99 + v97) <= a3 )\n                  break;\n                v100 = *((_QWORD *)qword_4F9F40 + v124);\n                if ( *(unsigned __int8 *)(v100 + v93) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v100 + v94) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v100 + v92) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v100 + v95) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v100 + v96) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v100 + v97) <= a3 )\n                  break;\n                v101 = *((_QWORD *)qword_4F9F40 + v129);\n                if ( *(unsigned __int8 *)(v101 + v93) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v101 + v94) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v101 + v92) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v101 + v95) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v101 + v96) <= a3 )\n                  break;\n                if ( *(unsigned __int8 *)(v101 + v97) <= a3 )\n                  break;\n                v102 = *((_QWORD *)qword_4F9F40 + v132);\n                if ( *(unsigned __int8 *)(v102 + v93) <= a3\n                  || *(unsigned __int8 *)(v102 + v94) <= a3\n                  || *(unsigned __int8 *)(v102 + v92) <= a3\n                  || *(unsigned __int8 *)(v102 + v95) <= a3\n                  || *(unsigned __int8 *)(v102 + v96) <= a3\n                  || *(unsigned __int8 *)(v102 + v97) <= a3 )\n                {\n                  break;\n                }\n                v91 = v126 + 1;\n                v89 = v131;\n                if ( (unsigned int)(v126 + 1) >= 4 )\n                {\n                  ++v83;\n                  v29 = *((_DWORD *)off_49F6D0 + 13);\n                  v30 = v115;\n                  if ( v83 < 4 )\n                    goto LABEL_269;\n                  goto LABEL_405;\n                }\n              }\n            }\n            else if ( v78 == 2 )\n            {\n              v120 = 0;\nLABEL_117:\n              v43 = v120 + v80;\n              v44 = v120 + v80 - 2;\n              if ( v118 <= (signed int)v44 )\n                v44 = v116;\n              if ( (signed int)v44 < 0 )\n                v44 = 0LL;\n              v45 = v120 + v80 - 1;\n              if ( v118 < (signed int)v43 )\n                v45 = v116;\n              if ( v118 <= (signed int)v43 )\n                v43 = v116;\n              if ( (signed int)v45 < 0 )\n                v45 = 0LL;\n              if ( (signed int)v43 < 0 )\n                v43 = 0LL;\n              v46 = v120 + v80 + 1;\n              if ( v118 <= (signed int)v46 )\n                v46 = v116;\n              if ( (signed int)v46 < 0 )\n                v46 = 0LL;\n              v47 = v120 + v80 + 2;\n              if ( v118 <= (signed int)v47 )\n                v47 = v116;\n              v48 = *((_QWORD *)qword_4F9F40 + v44);\n              if ( (signed int)v47 < 0 )\n                v47 = 0LL;\n              v49 = v120 + v80 + 3;\n              if ( v118 <= (signed int)v49 )\n                v49 = v116;\n              if ( (signed int)v49 < 0 )\n                v49 = 0LL;\n              v50 = -3;\n              while ( 1 )\n              {\n                v51 = (unsigned int)(v81 + v50 + 1);\n                if ( v117 <= (signed int)v51 )\n                  v51 = v115;\n                result = 0LL;\n                if ( (signed int)v51 < 0 )\n                  v51 = 0LL;\n                if ( *(unsigned __int8 *)(v48 + v51) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v45) + v51) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v43) + v51) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v46) + v51) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v47) + v51) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v49) + v51) <= a3 )\n                {\n                  break;\n                }\n                if ( ++v50 >= 3 )\n                {\n                  v52 = -3;\n                  v53 = v115;\n                  while ( 1 )\n                  {\n                    v54 = (unsigned int)(v81 + v52 + 2);\n                    if ( v117 <= (signed int)v54 )\n                      v54 = v115;\n                    result = 0LL;\n                    if ( (signed int)v54 < 0 )\n                      v54 = 0LL;\n                    if ( *(unsigned __int8 *)(v48 + v54) <= a3\n                      || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v45) + v54) <= a3\n                      || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v43) + v54) <= a3\n                      || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v46) + v54) <= a3\n                      || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v47) + v54) <= a3\n                      || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v49) + v54) <= a3 )\n                    {\n                      return result;\n                    }\n                    if ( ++v52 >= 3 )\n                    {\n                      v55 = -3;\n                      while ( 1 )\n                      {\n                        v56 = (unsigned int)(v81 + v55 + 3);\n                        if ( v117 <= (signed int)v56 )\n                          v56 = v115;\n                        result = 0LL;\n                        if ( (signed int)v56 < 0 )\n                          v56 = 0LL;\n                        if ( *(unsigned __int8 *)(v48 + v56) <= a3\n                          || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v45) + v56) <= a3\n                          || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v43) + v56) <= a3\n                          || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v46) + v56) <= a3\n                          || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v47) + v56) <= a3\n                          || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v49) + v56) <= a3 )\n                        {\n                          return result;\n                        }\n                        if ( ++v55 >= 3 )\n                        {\n                          v57 = -3;\n                          while ( 1 )\n                          {\n                            v58 = (unsigned int)(v81 + v57 + 4);\n                            if ( v117 <= (signed int)v58 )\n                              v58 = v53;\n                            result = 0LL;\n                            if ( (signed int)v58 < 0 )\n                              v58 = 0LL;\n                            if ( *(unsigned __int8 *)(v48 + v58) <= a3\n                              || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v45) + v58) <= a3\n                              || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v43) + v58) <= a3\n                              || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v46) + v58) <= a3\n                              || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v47) + v58) <= a3\n                              || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v49) + v58) <= a3 )\n                            {\n                              return result;\n                            }\n                            ++v57;\n                            v53 = v115;\n                            if ( v57 >= 3 )\n                            {\n                              ++v120;\n                              v29 = *((_DWORD *)off_49F6D0 + 13);\n                              v30 = v115;\n                              if ( v120 < 4 )\n                                goto LABEL_117;\n                              goto LABEL_405;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            else\n            {\n              v121 = v81 + (v79 != 1);\n              v123 = 0;\nLABEL_192:\n              v59 = v123 + v80;\n              v60 = (v78 != 1) + (unsigned int)v59;\n              if ( (signed int)v116 <= (signed int)v60 )\n                v60 = v116;\n              if ( (signed int)v60 < 0 )\n                v60 = 0LL;\n              v61 = v123 + v80 - 2;\n              if ( v118 <= (signed int)v61 )\n                v61 = v116;\n              if ( (signed int)v61 < 0 )\n                v61 = 0LL;\n              v62 = v123 + v80 - 1;\n              if ( v118 < (signed int)v59 )\n                v62 = v116;\n              if ( v118 <= (signed int)v59 )\n                v59 = v116;\n              if ( (signed int)v62 < 0 )\n                v62 = 0LL;\n              if ( (signed int)v59 < 0 )\n                v59 = 0LL;\n              v63 = v123 + v80 + 1;\n              if ( v118 <= (signed int)v63 )\n                v63 = v116;\n              if ( (signed int)v63 < 0 )\n                v63 = 0LL;\n              v64 = v123 + v80 + 2;\n              if ( v118 <= (signed int)v64 )\n                v64 = v116;\n              v65 = *((_QWORD *)qword_4F9F40 + v60);\n              if ( (signed int)v64 < 0 )\n                v64 = 0LL;\n              v66 = v123 + v80 + 3;\n              if ( v118 <= (signed int)v66 )\n                v66 = v116;\n              if ( (signed int)v66 < 0 )\n                v66 = 0LL;\n              v67 = 0;\n              while ( 1 )\n              {\n                v68 = (unsigned int)(v81 + v67 - 2);\n                if ( v117 <= (signed int)v68 )\n                  v68 = v115;\n                result = 0LL;\n                if ( (signed int)v68 < 0 )\n                  v68 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v68) <= a3 )\n                  break;\n                v69 = (unsigned int)(v81 + v67);\n                v70 = (unsigned int)(v81 + v67 - 1);\n                if ( v117 < (signed int)v69 )\n                  v70 = v115;\n                result = 0LL;\n                if ( (signed int)v70 < 0 )\n                  v70 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v70) <= a3 )\n                  break;\n                if ( v117 <= (signed int)v69 )\n                  v69 = v115;\n                result = 0LL;\n                if ( (signed int)v69 < 0 )\n                  v69 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v69) <= a3 )\n                  break;\n                v71 = (unsigned int)(v81 + v67 + 1);\n                if ( v117 <= (signed int)v71 )\n                  v71 = v115;\n                result = 0LL;\n                if ( (signed int)v71 < 0 )\n                  v71 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v71) <= a3 )\n                  break;\n                v72 = (unsigned int)(v81 + v67 + 2);\n                if ( v117 <= (signed int)v72 )\n                  v72 = v115;\n                result = 0LL;\n                if ( (signed int)v72 < 0 )\n                  v72 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v72) <= a3 )\n                  break;\n                v73 = (unsigned int)(v81 + v67 + 3);\n                if ( v117 <= (signed int)v73 )\n                  v73 = v115;\n                result = 0LL;\n                if ( (signed int)v73 < 0 )\n                  v73 = 0LL;\n                if ( *(unsigned __int8 *)(v65 + v73) <= a3 )\n                  break;\n                v74 = (unsigned int)(v121 + v67);\n                if ( (signed int)v115 <= (signed int)v74 )\n                  v74 = v115;\n                result = 0LL;\n                if ( (signed int)v74 < 0 )\n                  v74 = 0LL;\n                if ( *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v61) + v74) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v62) + v74) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v59) + v74) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v63) + v74) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v64) + v74) <= a3\n                  || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v66) + v74) <= a3 )\n                {\n                  break;\n                }\n                if ( (unsigned int)++v67 >= 4 )\n                {\n                  ++v123;\n                  v29 = *((_DWORD *)off_49F6D0 + 13);\n                  v30 = v115;\n                  if ( v123 < 4 )\n                    goto LABEL_192;\n                  goto LABEL_405;\n                }\n              }\n            }\n          }\n          else\n          {\n            v31 = v8;\n            if ( v4 > v81 )\n              v8 = (unsigned int)v81;\n            result = 0LL;\n            if ( (signed int)v8 < 0 )\n              v8 = 0LL;\n            v32 = (unsigned int)(v81 + 1);\n            if ( v4 <= (signed int)v32 )\n              v32 = v31;\n            if ( (signed int)v32 < 0 )\n              v32 = 0LL;\n            v127 = v32;\n            v33 = (unsigned int)(v81 + 2);\n            if ( v4 <= (signed int)v33 )\n              v33 = v31;\n            if ( (signed int)v33 < 0 )\n              v33 = 0LL;\n            v125 = v33;\n            v34 = (unsigned int)(v81 + 3);\n            if ( v4 <= (signed int)v34 )\n              v34 = v31;\n            if ( (signed int)v34 < 0 )\n              v34 = 0LL;\n            v35 = 0;\n            while ( 1 )\n            {\n              v36 = (unsigned int)(v80 + v35);\n              v37 = (unsigned int)(v80 + v35 - 2);\n              if ( v118 <= (signed int)v37 )\n                v37 = v116;\n              if ( (signed int)v37 < 0 )\n                v37 = 0LL;\n              v38 = (unsigned int)(v80 + v35 - 1);\n              if ( v118 < (signed int)v36 )\n                v38 = v116;\n              if ( v118 <= (signed int)v36 )\n                v36 = v116;\n              if ( (signed int)v38 < 0 )\n                v38 = 0LL;\n              if ( (signed int)v36 < 0 )\n                v36 = 0LL;\n              v39 = (unsigned int)(v80 + v35 + 1);\n              if ( v118 <= (signed int)v39 )\n                v39 = v116;\n              v40 = *((_QWORD *)qword_4F9F40 + v37);\n              if ( (signed int)v39 < 0 )\n                v39 = 0LL;\n              v41 = (unsigned int)(v80 + v35 + 2);\n              if ( v118 <= (signed int)v41 )\n                v41 = v116;\n              if ( (signed int)v41 < 0 )\n                v41 = 0LL;\n              v119 = v35;\n              v42 = (unsigned int)(v80 + v35 + 3);\n              if ( v118 <= (signed int)v42 )\n                v42 = v116;\n              if ( (signed int)v42 < 0 )\n                v42 = 0LL;\n              if ( *(unsigned __int8 *)(v40 + v8) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v38) + v8) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v36) + v8) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v39) + v8) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v41) + v8) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v42) + v8) <= a3\n                || *(unsigned __int8 *)(v40 + v127) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v38) + v127) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v36) + v127) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v39) + v127) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v41) + v127) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v42) + v127) <= a3\n                || *(unsigned __int8 *)(v40 + v125) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v38) + v125) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v36) + v125) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v39) + v125) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v41) + v125) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v42) + v125) <= a3\n                || *(unsigned __int8 *)(v40 + v34) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v38) + v34) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v36) + v34) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v39) + v34) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v41) + v34) <= a3\n                || *(unsigned __int8 *)(*((_QWORD *)qword_4F9F40 + v42) + v34) <= a3 )\n              {\n                break;\n              }\n              v35 = v119 + 1;\n              v29 = *((_DWORD *)off_49F6D0 + 13);\n              v30 = v115;\n              if ( (unsigned int)(v119 + 1) >= 4 )\n                goto LABEL_405;\n            }\n          }\n        }\n        else\n        {\n          v18 = 0;\nLABEL_10:\n          v19 = v18 + v80;\n          if ( v118 <= (signed int)v19 )\n            v19 = v116;\n          if ( (signed int)v19 < 0 )\n            v19 = 0LL;\n          v20 = *((_QWORD *)qword_4F9F40 + v19);\n          v21 = 0;\n          while ( 1 )\n          {\n            v22 = (unsigned int)(v81 + v21 - 2);\n            if ( v117 <= (signed int)v22 )\n              v22 = v115;\n            result = 0LL;\n            if ( (signed int)v22 < 0 )\n              v22 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v22) <= a3 )\n              break;\n            v24 = (unsigned int)(v81 + v21);\n            v25 = (unsigned int)(v81 + v21 - 1);\n            if ( v117 < (signed int)v24 )\n              v25 = v115;\n            result = 0LL;\n            if ( (signed int)v25 < 0 )\n              v25 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v25) <= a3 )\n              break;\n            if ( v117 <= (signed int)v24 )\n              v24 = v115;\n            result = 0LL;\n            if ( (signed int)v24 < 0 )\n              v24 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v24) <= a3 )\n              break;\n            v26 = (unsigned int)(v81 + v21 + 1);\n            if ( v117 <= (signed int)v26 )\n              v26 = v115;\n            result = 0LL;\n            if ( (signed int)v26 < 0 )\n              v26 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v26) <= a3 )\n              break;\n            v27 = (unsigned int)(v81 + v21 + 2);\n            if ( v117 <= (signed int)v27 )\n              v27 = v115;\n            result = 0LL;\n            if ( (signed int)v27 < 0 )\n              v27 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v27) <= a3 )\n              break;\n            v28 = (unsigned int)(v81 + v21 + 3);\n            if ( v117 <= (signed int)v28 )\n              v28 = v115;\n            result = 0LL;\n            if ( (signed int)v28 < 0 )\n              v28 = 0LL;\n            if ( *(unsigned __int8 *)(v20 + v28) <= a3 )\n              break;\n            if ( (unsigned int)++v21 >= 4 )\n            {\n              ++v18;\n              v29 = *((_DWORD *)off_49F6D0 + 13);\n              v30 = v115;\n              if ( v18 < 4 )\n                goto LABEL_10;\n              goto LABEL_405;\n            }\n          }\n        }\n        return result;\n      }\n      v103 = v116;\n      if ( v118 > v80 )\n        v103 = (unsigned int)v80;\n      result = 0LL;\n      if ( (signed int)v103 < 0 )\n        v103 = 0LL;\n      v104 = *((_QWORD *)qword_4F9F40 + v103);\n      v105 = (unsigned int)v8;\n      if ( v4 > v81 )\n        v105 = (unsigned int)v81;\n      if ( (signed int)v105 < 0 )\n        v105 = 0LL;\n      if ( *(unsigned __int8 *)(v104 + v105) <= a3 )\n        return result;\n      v106 = (unsigned int)(v81 + 1);\n      if ( v4 <= (signed int)v106 )\n        v106 = (unsigned int)v8;\n      result = 0LL;\n      if ( (signed int)v106 < 0 )\n        v106 = 0LL;\n      if ( *(unsigned __int8 *)(v104 + v106) <= a3 )\n        return result;\n      v107 = (unsigned int)(v81 + 2);\n      if ( v4 <= (signed int)v107 )\n        v107 = (unsigned int)v8;\n      result = 0LL;\n      if ( (signed int)v107 < 0 )\n        v107 = 0LL;\n      if ( *(unsigned __int8 *)(v104 + v107) <= a3 )\n        return result;\n      v108 = (unsigned int)(v81 + 3);\n      if ( v4 <= (signed int)v108 )\n        v108 = (unsigned int)v8;\n      result = 0LL;\n      if ( (signed int)v108 < 0 )\n        v108 = 0LL;\n      if ( *(unsigned __int8 *)(v104 + v108) <= a3 )\n        return result;\n      v109 = (unsigned int)(v80 + 1);\n      if ( v118 <= (signed int)v109 )\n        v109 = v116;\n      result = 0LL;\n      if ( (signed int)v109 < 0 )\n        v109 = 0LL;\n      v110 = *((_QWORD *)qword_4F9F40 + v109);\n      if ( *(unsigned __int8 *)(v110 + v105) <= a3\n        || *(unsigned __int8 *)(v110 + v106) <= a3\n        || *(unsigned __int8 *)(v110 + v107) <= a3\n        || *(unsigned __int8 *)(v110 + v108) <= a3 )\n      {\n        return result;\n      }\n      v111 = (unsigned int)(v80 + 2);\n      if ( v118 <= (signed int)v111 )\n        v111 = v116;\n      result = 0LL;\n      if ( (signed int)v111 < 0 )\n        v111 = 0LL;\n      v112 = *((_QWORD *)qword_4F9F40 + v111);\n      if ( *(unsigned __int8 *)(v112 + v105) <= a3\n        || *(unsigned __int8 *)(v112 + v106) <= a3\n        || *(unsigned __int8 *)(v112 + v107) <= a3\n        || *(unsigned __int8 *)(v112 + v108) <= a3 )\n      {\n        return result;\n      }\n      v113 = (unsigned int)(v80 + 3);\n      if ( v118 <= (signed int)v113 )\n        v113 = v116;\n      result = 0LL;\n      if ( (signed int)v113 < 0 )\n        v113 = 0LL;\n      v114 = *((_QWORD *)qword_4F9F40 + v113);\n      if ( *(unsigned __int8 *)(v114 + v105) <= a3 )\n        return result;\n      if ( *(unsigned __int8 *)(v114 + v106) <= a3 )\n        return result;\n      if ( *(unsigned __int8 *)(v114 + v107) <= a3 )\n        return result;\n      v29 = *((_DWORD *)off_49F6D0 + 13);\n      v30 = v115;\n      if ( *(unsigned __int8 *)(v114 + v108) <= a3 )\n        return result;\nLABEL_405:\n      v17 = v139 + 1;\n      v9 = *((_QWORD *)off_49F6D0 + 8991);\n      v10 = v137;\n      v11 = a3;\n      a4 = v136;\n      v12 = *((_DWORD *)off_49F6D0 + 36);\n      v4 = v29;\n      v15 = v138;\n      v16 = v130;\n      v8 = v30;\n    }\n    while ( v139 + 1 < v135 );\n    v15 = v138 + 1;\n    v13 = *((_DWORD *)off_49F6D0 + 37);\n    v14 = v134;\n    if ( v138 + 1 < v133 )\n      continue;\n    return 1LL;\n  }\n}\n", 
            "funcStartAddr": "0x45b870L", 
            "funcEndAddr": "0x45c88dL", 
            "funcName": "sub_45B870"
        }, 
        {
            "decompiledFuncCode": "double __fastcall sub_45C890(_DWORD *a1, __int64 a2, __int64 a3, int a4, int a5, double a6)\n{\n  int v6; // er12\n  int v7; // er15\n  char *v8; // r13\n  __int64 v9; // rbx\n  signed __int64 v10; // rax\n  signed __int64 v11; // r14\n  int v12; // ebp\n  double v13; // xmm0_8\n  __int64 v14; // rbx\n  __int64 v15; // rax\n  __int64 v16; // rsi\n  __int64 v17; // rdi\n  int v18; // ecx\n  __int64 v19; // rsi\n  __int64 v20; // rdx\n  int v21; // ecx\n  __int64 v22; // rsi\n  __int64 v23; // rdx\n  int v24; // ecx\n  int v25; // er15\n  __int64 v26; // rdx\n  __int64 v27; // rsi\n  _DWORD *v28; // rbx\n  int v29; // eax\n  signed int v30; // er15\n  signed int v31; // er12\n  _DWORD *v32; // rsi\n  _DWORD *v33; // rdi\n  signed __int64 v34; // rsi\n  int v35; // ebp\n  int v36; // eax\n  int v37; // ebx\n  double result; // xmm0_8\n  double v39; // [rsp+0h] [rbp-98h]\n  int v40; // [rsp+Ch] [rbp-8Ch]\n  int v41; // [rsp+10h] [rbp-88h]\n  int v42; // [rsp+14h] [rbp-84h]\n  __int64 v43; // [rsp+18h] [rbp-80h]\n  __int64 v44; // [rsp+20h] [rbp-78h]\n  __int64 v45; // [rsp+28h] [rbp-70h]\n  __int64 v46; // [rsp+30h] [rbp-68h]\n  double v47; // [rsp+38h] [rbp-60h]\n  __int64 v48; // [rsp+40h] [rbp-58h]\n  _DWORD *v49; // [rsp+48h] [rbp-50h]\n  __int64 v50; // [rsp+50h] [rbp-48h]\n  __int64 v51; // [rsp+58h] [rbp-40h]\n  __int64 v52; // [rsp+60h] [rbp-38h]\n\n  v41 = a5;\n  v47 = a6;\n  v40 = a4;\n  v51 = a2;\n  v52 = a3;\n  v6 = 8 * (a2 - ((a2 + ((unsigned int)a2 >> 31)) & 0x1FFFFFFE))\n     + 4 * (a3 - ((a3 + ((unsigned int)a3 >> 31)) & 0x3FFFFFFE));\n  v7 = (4 * (a2 + ((unsigned int)a2 >> 31)) & 0xFFFFFFF8) + 2 * ((a3 + ((unsigned int)a3 >> 31)) & 0x7FFFFFFE);\n  v8 = (char *)off_49F6D0;\n  v9 = *((signed int *)off_49F6D0 + 38);\n  v46 = *((unsigned int *)off_49F6D0 + 39);\n  v45 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v10 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v50 = *((_QWORD *)off_49F6D0 + 1771);\n  v48 = v10;\n  v11 = 48LL * *(signed int *)(v50 + v10);\n  v43 = qword_4F9C40[*((signed int *)dest + 591)];\n  v12 = *((_DWORD *)off_49F6D0 + 43);\n  v44 = *((_QWORD *)off_49F6D0 + 1770);\n  v42 = 0;\n  v49 = (char *)off_49F6D0 + v11 + 14176;\n  *a1 = sub_4045F0(v6, v7, &v42, 1);\n  v13 = 0.0;\n  if ( !*((_DWORD *)off_49F6D0 + 18181) )\n  {\n    v14 = v6 + v9;\n    v15 = *((_QWORD *)off_49F6D0 + 8972);\n    v16 = *(_QWORD *)(qword_4F9EB0 + 8LL * (v7 + v12));\n    v17 = *(_QWORD *)(v45 + 8LL * (v7 + (signed int)v46));\n    v18 = *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v16 + 2 * v14 + 6)\n                     - (unsigned __int64)*(unsigned __int16 *)(v17 + 2 * v14 + 6)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v16 + 2 * v14 + 4)\n                     - (unsigned __int64)*(unsigned __int16 *)(v17 + 2 * v14 + 4)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v16 + 2 * v14) - (unsigned __int64)*(unsigned __int16 *)(v17 + 2 * v14)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v16 + 2 * v14 + 2)\n                     - (unsigned __int64)*(unsigned __int16 *)(v17 + 2 * v14 + 2)));\n    v19 = *(_QWORD *)(qword_4F9EB0 + 8LL * ((v7 | 1) + v12));\n    v20 = *(_QWORD *)(v45 + 8LL * (signed int)(v46 + (v7 | 1)));\n    v21 = *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v19 + 2 * v14 + 6)\n                     - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v14 + 6)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v19 + 2 * v14 + 4)\n                     - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v14 + 4)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v19 + 2 * v14 + 2)\n                     - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v14 + 2)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v19 + 2 * v14) - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v14)))\n        + v18;\n    v22 = *(_QWORD *)(qword_4F9EB0 + 8LL * ((v7 | 2) + v12));\n    v23 = *(_QWORD *)(v45 + 8LL * (signed int)(v46 + (v7 | 2)));\n    v24 = *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v22 + 2 * v14 + 6)\n                     - (unsigned __int64)*(unsigned __int16 *)(v23 + 2 * v14 + 6)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v22 + 2 * v14 + 4)\n                     - (unsigned __int64)*(unsigned __int16 *)(v23 + 2 * v14 + 4)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v22 + 2 * v14 + 2)\n                     - (unsigned __int64)*(unsigned __int16 *)(v23 + 2 * v14 + 2)))\n        + *(_DWORD *)(v15\n                    + 4\n                    * (*(unsigned __int16 *)(v22 + 2 * v14) - (unsigned __int64)*(unsigned __int16 *)(v23 + 2 * v14)))\n        + v21;\n    v25 = v7 | 3;\n    v26 = *(_QWORD *)(qword_4F9EB0 + 8LL * (v25 + v12));\n    v27 = *(_QWORD *)(v45 + 8LL * ((signed int)v46 + v25));\n    v13 = (double)(*(_DWORD *)(v15\n                             + 4\n                             * (*(unsigned __int16 *)(v26 + 2 * v14 + 6)\n                              - (unsigned __int64)*(unsigned __int16 *)(v27 + 2 * v14 + 6)))\n                 + *(_DWORD *)(v15\n                             + 4\n                             * (*(unsigned __int16 *)(v26 + 2 * v14 + 4)\n                              - (unsigned __int64)*(unsigned __int16 *)(v27 + 2 * v14 + 4)))\n                 + *(_DWORD *)(v15\n                             + 4\n                             * (*(unsigned __int16 *)(v26 + 2 * v14 + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(v27 + 2 * v14 + 2)))\n                 + *(_DWORD *)(v15\n                             + 4\n                             * (*(unsigned __int16 *)(v26 + 2 * v14)\n                              - (unsigned __int64)*(unsigned __int16 *)(v27 + 2 * v14)))\n                 + v24);\n  }\n  v39 = v13;\n  v28 = (_DWORD *)(v48 + v50);\n  sub_474EE0((__int64)qword_4A0108);\n  v29 = -1;\n  if ( v41 != v40 )\n    v29 = v40 - (v40 >= v41);\n  *(_DWORD *)&v8[v11 + 14180] = v29;\n  v30 = v52;\n  v31 = v51;\n  *(_DWORD *)&v8[v11 + 14200] = v52 + 4 * v51;\n  v32 = v49;\n  *v49 = 4;\n  v33 = v32;\n  if ( *((_DWORD *)dest + 589) )\n  {\n    *(_QWORD *)&v8[v11 + 14216] = sub_40B6C0;\n    v34 = *(_QWORD *)(v44 + 24) + 120LL * *(signed int *)(v43 + 16);\n    (*(void (__fastcall **)(_DWORD *, signed __int64))(v34 + 112))(v33, v34);\n  }\n  else\n  {\n    sub_480310(v32, (signed int **)(*(_QWORD *)(v44 + 24) + 120LL * *(signed int *)(v43 + 16)));\n  }\n  v35 = *(_DWORD *)&v8[v11 + 14188];\n  ++*v28;\n  if ( *((_DWORD *)dest + 589) )\n    v36 = sub_434CC0(v31, v30, 1);\n  else\n    v36 = sub_4344D0(0, v31, v30, 0);\n  v37 = v35 + v36;\n  sub_4750F0((__int64)qword_4A0108);\n  result = (double)v37;\n  if ( !*((_DWORD *)off_49F6D0 + 18181) )\n    result = result * v47 + v39;\n  return result;\n}\n", 
            "funcStartAddr": "0x45c890L", 
            "funcEndAddr": "0x45cc7bL", 
            "funcName": "sub_45C890"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45CC80(int a1, int a2, int a3)\n{\n  int v3; // er15\n  _BOOL4 v4; // ebp\n  signed __int64 v5; // rax\n  __int64 v6; // r14\n  int v7; // eax\n  unsigned int v8; // edx\n  int v9; // ecx\n  int v10; // er12\n  int v11; // ebp\n  int v12; // eax\n  _DWORD *v13; // rcx\n  signed __int64 v14; // rsi\n  __int64 *v15; // rdx\n  __int64 v16; // r15\n  signed __int64 v17; // rbp\n  _DWORD *v18; // r12\n  unsigned int v19; // ebx\n  unsigned __int64 i; // r13\n  int v21; // er14\n  unsigned int v22; // ecx\n  int v23; // eax\n  _DWORD *v24; // rcx\n  signed __int64 v25; // rsi\n  __int64 v27; // [rsp+0h] [rbp-68h]\n  __int64 v28; // [rsp+0h] [rbp-68h]\n  signed __int64 v29; // [rsp+8h] [rbp-60h]\n  char *v30; // [rsp+10h] [rbp-58h]\n  _DWORD *v31; // [rsp+18h] [rbp-50h]\n  _BOOL8 v32; // [rsp+20h] [rbp-48h]\n  __int64 v33; // [rsp+28h] [rbp-40h]\n  __int64 v34; // [rsp+30h] [rbp-38h]\n\n  v3 = a2;\n  v4 = a1 < 8;\n  v34 = *((_QWORD *)off_49F6D0 + 1770);\n  v30 = (char *)off_49F6D0;\n  v5 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v6 = *((_QWORD *)off_49F6D0 + 1771);\n  v29 = v5;\n  v27 = *(signed int *)(v6 + v5);\n  v33 = qword_4F9C40[*((signed int *)dest + 591)];\n  v7 = sub_407360(a3, a1, a2);\n  v8 = (((unsigned int)(a1 + 4 * v4 - 8) >> 31) + a1 + 4 * v4 - 8) & 0xFFFFFFFE;\n  v9 = a1 + 4 * v4 - 8 - v8;\n  v10 = a2 % 2;\n  v11 = a2 / 2;\n  v32 = a1 > 7;\n  dword_4F9190[16 * v32 + 4 * (v3 % 2 + 2 * v9) + (signed int)(v3 / 2 + v8)] = v7;\n  sub_474EE0((__int64)qword_4A0108);\n  v12 = *((_DWORD *)dest + 589);\n  if ( v12 )\n  {\n    v13 = off_49F6D0;\n    v31 = (_DWORD *)(v6 + v29);\n    v14 = 48 * v27;\n    v15 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8LL * a1) + 8LL * v3);\n    v28 = *v15;\n    v16 = v15[1];\n    *((_DWORD *)off_49F6D0 + 19) = v11;\n    v13[18] = v10;\n    v17 = (signed __int64)&v30[v14 + 14176];\n    v18 = (_DWORD *)(v6 + v29 + 72);\n    v19 = 0;\n    for ( i = 1LL; ; ++i )\n    {\n      v21 = *(_DWORD *)(v28 + 4 * i - 4);\n      *(_DWORD *)(v17 + 4) = v21;\n      *(_DWORD *)(v17 + 8) = *(_DWORD *)(v16 + 4 * i - 4);\n      if ( v12 )\n        *(_QWORD *)(v17 + 40) = sub_40CC70;\n      else\n        *(_QWORD *)(v17 + 32) = sub_4800F0;\n      *(_DWORD *)(v17 + 24) = 7;\n      *(_DWORD *)v17 = 10;\n      v22 = *v18 - 9;\n      v23 = 0;\n      if ( v22 <= 4 )\n        v23 = dword_491AB0[v22];\n      v24 = off_49F6D0;\n      *((_DWORD *)off_49F6D0 + 20) = v23;\n      v24[21] = v32;\n      v25 = *(_QWORD *)(v34 + 24) + 120LL * *(signed int *)(v33 + 40);\n      (*(void (__fastcall **)(signed __int64, signed __int64))(v25 + 112))(v17, v25);\n      *(v18 - 7) += *(_DWORD *)(v17 + 12);\n      v19 += *(_DWORD *)(v17 + 12);\n      ++*v31;\n      if ( !v21 || i > 0x10 )\n        break;\n      v17 += 48LL;\n      v12 = *((_DWORD *)dest + 589);\n    }\n  }\n  else\n  {\n    v19 = sub_4344D0(7, a1, a2, 16 * (v10 + 2 * (a1 % 2)) | (v11 + ((a1 + ((unsigned int)a1 >> 31)) & 0xFFFFFFFE)));\n  }\n  sub_4750F0((__int64)qword_4A0108);\n  return v19;\n}\n", 
            "funcStartAddr": "0x45cc80L", 
            "funcEndAddr": "0x45cf00L", 
            "funcName": "sub_45CC80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45CF00(__int64 a1, __int64 a2, _DWORD *a3, double a4)\n{\n  int v4; // er13\n  int v5; // ebp\n  __int64 v6; // rsi\n  __int64 v7; // rdi\n  __int64 v8; // rcx\n  __int64 v9; // r14\n  __int64 v10; // r15\n  int v11; // ebx\n  int v12; // edi\n  int v13; // esi\n  unsigned int v14; // ebx\n  unsigned int v15; // ebp\n  int v16; // edx\n  unsigned int v17; // ebp\n  unsigned int v18; // ebx\n  signed int v19; // eax\n  signed int v20; // ecx\n  int v21; // ebp\n  int v22; // ebx\n  __int64 v23; // r12\n  __int64 v24; // r14\n  __int64 v25; // r15\n  unsigned int v26; // edx\n  bool v27; // sf\n  signed __int64 v28; // rax\n  _DWORD *v29; // rbp\n  double v30; // xmm0_8\n  __int64 v31; // r9\n  int v32; // eax\n  __int64 v33; // r13\n  signed __int64 v34; // rdx\n  signed __int64 v35; // rcx\n  double v36; // xmm2_8\n  unsigned __int64 v37; // r14\n  bool v38; // cl\n  _DWORD *v39; // rax\n  bool v40; // zf\n  char *v41; // r11\n  unsigned __int16 *v42; // rcx\n  signed __int64 v43; // r8\n  signed __int64 v44; // r13\n  signed __int64 v45; // r10\n  char *v46; // rbp\n  __int64 v47; // rsi\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  int v51; // eax\n  int v52; // ebx\n  int v53; // edi\n  int v54; // edi\n  int v55; // ebx\n  int v56; // eax\n  int v57; // edx\n  int v58; // ebx\n  int v59; // edi\n  int v60; // edi\n  int v61; // edx\n  int v62; // eax\n  int v63; // edx\n  int v64; // edi\n  int v65; // edi\n  int v66; // edx\n  int v67; // eax\n  int v68; // edx\n  int v69; // edi\n  int v70; // edi\n  int v71; // edx\n  int v72; // ebx\n  double v73; // ST10_8\n  char *v74; // rax\n  __int128 v75; // xmm1\n  __int128 v76; // xmm2\n  __int128 v77; // xmm3\n  int v78; // eax\n  char *v79; // rcx\n  __int128 v80; // xmm1\n  __int128 v81; // xmm2\n  __int128 v82; // xmm3\n  int v83; // er12\n  int v84; // edi\n  int v85; // eax\n  __int64 *v86; // rcx\n  char *v87; // rcx\n  __int64 v88; // rdx\n  signed __int64 v89; // rbp\n  signed __int64 v90; // rsi\n  signed __int64 v91; // r8\n  signed __int64 v92; // rbx\n  __int64 v93; // r13\n  unsigned __int64 v94; // r9\n  int v95; // er15\n  int v96; // er11\n  int v97; // er12\n  int v98; // er10\n  __int16 v99; // bp\n  int v100; // er10\n  int v101; // er11\n  __int16 v102; // bp\n  int v103; // er11\n  __int16 v104; // bp\n  signed __int64 v105; // r13\n  __int64 v106; // r9\n  signed int v107; // er11\n  __int64 v108; // rcx\n  __int64 v109; // rax\n  __int64 v110; // r10\n  __int64 v111; // rbp\n  __int64 v112; // r15\n  __int64 v113; // r14\n  int v114; // edi\n  int v115; // ebx\n  int v116; // esi\n  int v117; // edx\n  int v118; // edx\n  int v119; // esi\n  int v120; // esi\n  int v121; // edx\n  int v122; // edx\n  int v123; // esi\n  int v124; // esi\n  int v125; // edx\n  int v126; // edx\n  int v127; // esi\n  int v128; // er11\n  double v129; // xmm0_8\n  __int64 v130; // rbx\n  __int64 v131; // rax\n  __int64 v132; // rcx\n  _DWORD *v133; // rdx\n  _DWORD *v134; // rsi\n  _DWORD *v135; // rax\n  _DWORD *v136; // rcx\n  __int128 **v137; // rax\n  __int128 *v138; // rcx\n  int *v139; // rax\n  int **v140; // rax\n  int *v141; // rcx\n  int *v142; // rax\n  __int64 *v143; // r8\n  _DWORD *v144; // r11\n  _DWORD *v145; // rbp\n  int *v146; // rbx\n  int *v147; // rax\n  int *v148; // r10\n  __int64 v149; // rcx\n  __int64 v150; // rax\n  __int64 v151; // rax\n  __int64 v152; // rsi\n  char *v153; // rcx\n  int v154; // ebx\n  int v155; // eax\n  __int64 v156; // r12\n  _DWORD *v157; // r13\n  char *v158; // rcx\n  __int64 v159; // r8\n  __int64 v160; // rsi\n  __int64 v161; // rdi\n  __int64 v162; // rbp\n  double v163; // xmm0_8\n  double v164; // xmm2_8\n  __int64 v165; // rax\n  __int64 v166; // rcx\n  _DWORD *v167; // rdx\n  _DWORD *v168; // rsi\n  _DWORD *v169; // rax\n  _DWORD *v170; // rcx\n  __int64 v171; // rax\n  signed int *v172; // r10\n  int v173; // ecx\n  __int64 v174; // rcx\n  __int64 v175; // rdx\n  _DWORD *v176; // rsi\n  _DWORD *v177; // rdi\n  _DWORD *v178; // rcx\n  _DWORD *v179; // rdx\n  __int64 v180; // rsi\n  __int64 *v181; // rcx\n  __int64 v182; // rdx\n  _DWORD *v183; // rcx\n  __int64 v184; // rcx\n  _DWORD *v185; // rdx\n  _DWORD *v186; // rcx\n  __int64 v187; // r8\n  __int64 v188; // r9\n  __int64 v189; // rax\n  signed __int64 v190; // rdx\n  __int64 v191; // rbp\n  __int64 v192; // r11\n  __int64 v193; // rdi\n  signed __int64 v194; // r14\n  signed __int64 v195; // r15\n  signed __int64 v196; // rcx\n  signed __int64 v197; // rbp\n  __int64 v198; // rax\n  signed __int64 v199; // rsi\n  __int64 v200; // rax\n  signed __int64 v201; // rdi\n  __int64 v202; // rax\n  __int64 *v203; // rax\n  __int64 v204; // rcx\n  __int64 v205; // rdx\n  __int64 v206; // rdx\n  __int64 v207; // rdx\n  __int64 v208; // rcx\n  __int64 v209; // rax\n  __int64 v210; // rcx\n  __int64 v211; // rcx\n  __int64 v212; // rcx\n  __int64 v213; // rax\n  signed __int64 v214; // r15\n  signed __int64 v215; // r8\n  __int64 v216; // r12\n  unsigned __int16 *v217; // rsi\n  signed __int64 v218; // rdi\n  __int64 v219; // rbp\n  signed __int64 v220; // r13\n  __int64 v221; // r15\n  __int64 v222; // r14\n  __int64 v223; // r11\n  int v224; // eax\n  int v225; // ebx\n  int v226; // ecx\n  int v227; // ecx\n  int v228; // ebx\n  int v229; // eax\n  int v230; // ecx\n  int v231; // ebx\n  int v232; // edx\n  int v233; // edx\n  int v234; // ecx\n  int v235; // eax\n  int v236; // ecx\n  int v237; // edx\n  int v238; // edx\n  int v239; // ecx\n  int v240; // eax\n  int v241; // ecx\n  int v242; // edx\n  int v243; // edx\n  int v244; // ecx\n  unsigned int v245; // eax\n  char *v246; // rcx\n  __int128 v247; // xmm1\n  __int128 v248; // xmm2\n  __int128 v249; // xmm3\n  __int64 v250; // rbp\n  int v251; // er14\n  int v252; // eax\n  unsigned __int64 v253; // r15\n  __int64 v254; // rbx\n  char *v255; // rax\n  __int128 v256; // xmm1\n  __m128i v257; // xmm2\n  __int128 v258; // xmm3\n  int v259; // eax\n  int v260; // ecx\n  __int64 *v261; // rsi\n  char *v262; // rsi\n  signed __int64 v263; // rdi\n  signed __int64 v264; // r12\n  signed __int64 v265; // r13\n  signed __int64 v266; // r14\n  __int64 v267; // rdi\n  unsigned __int64 v268; // rdx\n  int v269; // er10\n  int v270; // er9\n  int v271; // er11\n  int v272; // er8\n  __int16 v273; // bx\n  int v274; // er8\n  int v275; // er9\n  __int16 v276; // bx\n  int v277; // er9\n  __int16 v278; // bx\n  __int64 result; // rax\n  signed __int64 v280; // rcx\n  __int64 v281; // rax\n  __int64 v282; // r15\n  unsigned __int64 v283; // rdx\n  __int64 v284; // rsi\n  int v285; // [rsp+0h] [rbp-2C8h]\n  unsigned __int64 v286; // [rsp+0h] [rbp-2C8h]\n  char *v287; // [rsp+0h] [rbp-2C8h]\n  signed __int64 v288; // [rsp+0h] [rbp-2C8h]\n  char *v289; // [rsp+0h] [rbp-2C8h]\n  unsigned int v290; // [rsp+Ch] [rbp-2BCh]\n  int v291; // [rsp+10h] [rbp-2B8h]\n  signed __int64 v292; // [rsp+10h] [rbp-2B8h]\n  __int64 v293; // [rsp+10h] [rbp-2B8h]\n  __int64 v294; // [rsp+10h] [rbp-2B8h]\n  signed __int64 v295; // [rsp+10h] [rbp-2B8h]\n  int v296; // [rsp+1Ch] [rbp-2ACh]\n  int v297; // [rsp+20h] [rbp-2A8h]\n  signed int v298; // [rsp+24h] [rbp-2A4h]\n  int v299; // [rsp+28h] [rbp-2A0h]\n  __int64 v300; // [rsp+28h] [rbp-2A0h]\n  signed __int64 v301; // [rsp+28h] [rbp-2A0h]\n  __int64 v302; // [rsp+28h] [rbp-2A0h]\n  __int64 v303; // [rsp+30h] [rbp-298h]\n  __int64 v304; // [rsp+38h] [rbp-290h]\n  unsigned int v305; // [rsp+44h] [rbp-284h]\n  double v306; // [rsp+48h] [rbp-280h]\n  __int64 v307; // [rsp+50h] [rbp-278h]\n  __int64 v308; // [rsp+58h] [rbp-270h]\n  __int64 v309; // [rsp+60h] [rbp-268h]\n  int v310; // [rsp+68h] [rbp-260h]\n  int v311; // [rsp+6Ch] [rbp-25Ch]\n  int v312; // [rsp+70h] [rbp-258h]\n  int v313; // [rsp+74h] [rbp-254h]\n  __int64 v314; // [rsp+78h] [rbp-250h]\n  __int64 v315; // [rsp+80h] [rbp-248h]\n  __int64 v316; // [rsp+88h] [rbp-240h]\n  __int64 v317; // [rsp+90h] [rbp-238h]\n  __int64 v318; // [rsp+98h] [rbp-230h]\n  double v319; // [rsp+A0h] [rbp-228h]\n  __int64 v320; // [rsp+A8h] [rbp-220h]\n  __int64 v321; // [rsp+B0h] [rbp-218h]\n  __int64 v322; // [rsp+B8h] [rbp-210h]\n  int v323; // [rsp+C4h] [rbp-204h]\n  int v324; // [rsp+C8h] [rbp-200h]\n  int v325; // [rsp+CCh] [rbp-1FCh]\n  int v326; // [rsp+D0h] [rbp-1F8h]\n  int v327; // [rsp+D4h] [rbp-1F4h]\n  int v328; // [rsp+D8h] [rbp-1F0h]\n  char v329; // [rsp+DCh] [rbp-1ECh]\n  __int128 v330; // [rsp+E0h] [rbp-1E8h]\n  __int128 v331; // [rsp+F0h] [rbp-1D8h]\n  __int128 v332; // [rsp+100h] [rbp-1C8h]\n  __int128 v333; // [rsp+110h] [rbp-1B8h]\n  __int64 v334; // [rsp+120h] [rbp-1A8h]\n  __int64 v335; // [rsp+128h] [rbp-1A0h]\n  _DWORD *v336; // [rsp+130h] [rbp-198h]\n  unsigned __int64 v337; // [rsp+138h] [rbp-190h]\n  __int128 v338; // [rsp+140h] [rbp-188h]\n  __int128 v339; // [rsp+150h] [rbp-178h]\n  __int128 v340; // [rsp+160h] [rbp-168h]\n  __int128 v341; // [rsp+170h] [rbp-158h]\n  __int128 v342; // [rsp+180h] [rbp-148h]\n  __int128 v343; // [rsp+190h] [rbp-138h]\n  __int128 v344; // [rsp+1A0h] [rbp-128h]\n  __int128 v345; // [rsp+1B0h] [rbp-118h]\n  int v346; // [rsp+1C0h] [rbp-108h]\n  int v347; // [rsp+1C4h] [rbp-104h]\n  int v348; // [rsp+1D0h] [rbp-F8h]\n  int v349; // [rsp+1D4h] [rbp-F4h]\n  int v350; // [rsp+1D8h] [rbp-F0h]\n  int v351; // [rsp+1DCh] [rbp-ECh]\n  int v352; // [rsp+1E8h] [rbp-E0h]\n  int v353; // [rsp+1ECh] [rbp-DCh]\n  __int64 v354; // [rsp+1F0h] [rbp-D8h]\n  unsigned __int64 v355; // [rsp+1F8h] [rbp-D0h]\n  unsigned __int64 v356; // [rsp+200h] [rbp-C8h]\n  int *v357; // [rsp+208h] [rbp-C0h]\n  int *v358; // [rsp+210h] [rbp-B8h]\n  int *v359; // [rsp+218h] [rbp-B0h]\n  _DWORD *v360; // [rsp+220h] [rbp-A8h]\n  __int64 v361; // [rsp+228h] [rbp-A0h]\n  __int64 v362; // [rsp+230h] [rbp-98h]\n  __int64 v363; // [rsp+238h] [rbp-90h]\n  __int64 v364; // [rsp+240h] [rbp-88h]\n  _QWORD *v365; // [rsp+248h] [rbp-80h]\n  __int128 v366; // [rsp+250h] [rbp-78h]\n  __int128 v367; // [rsp+260h] [rbp-68h]\n  __int128 v368; // [rsp+270h] [rbp-58h]\n  __int128 v369; // [rsp+280h] [rbp-48h]\n\n  v336 = a3;\n  v319 = a4;\n  v316 = a1;\n  v291 = (signed int)a1 % 2;\n  v317 = a2;\n  v299 = (signed int)a2 % 2;\n  v285 = (signed int)a1 / 2;\n  v4 = (signed int)a2 / 2;\n  v5 = 8 * ((signed int)a1 / 2) + 4 * ((signed int)a2 / 2);\n  v6 = *((signed int *)off_49F6D0 + 38);\n  v311 = 8 * ((signed int)a1 % 2) + 4 * v299;\n  v7 = *((signed int *)off_49F6D0 + 3);\n  v321 = *(signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v7 + 524);\n  v8 = *((signed int *)off_49F6D0 + 39);\n  v310 = v5;\n  v9 = *((signed int *)off_49F6D0 + 42);\n  v10 = *((signed int *)off_49F6D0 + 43);\n  v304 = v311 + v6;\n  v303 = v5 + v8;\n  v320 = v311;\n  v314 = v5;\n  v5 >>= 2;\n  v11 = 0;\n  sub_437270(v7, v311 >> 2, v5, -1, 0, &v350);\n  sub_437270(*((_DWORD *)off_49F6D0 + 3), v311 >> 2, v5, 0, -1, &v346);\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( v350 )\n      v11 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v351);\n    v350 = v11;\n    v12 = v311 + v6;\n    v13 = v303;\n    v14 = (signed int)v303 >> 31;\n    v15 = (signed int)v304 >> 31;\n    if ( v346 )\n      v16 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v347);\n    else\n      v16 = 0;\n    v346 = v16;\n  }\n  else\n  {\n    v16 = v346;\n    v12 = v311 + v6;\n    v13 = v303;\n    v14 = (signed int)v303 >> 31;\n    v15 = (signed int)v304 >> 31;\n  }\n  v17 = v15 >> 30;\n  v18 = v14 >> 30;\n  v19 = -1;\n  v20 = -1;\n  if ( v16 )\n    v20 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 13) + 8LL * v348) + 4LL * v349);\n  v21 = v12 + v17;\n  v22 = v13 + v18;\n  if ( v350 )\n    v19 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 13) + 8LL * v352) + 4LL * v353);\n  v23 = v320;\n  v309 = v320 + v9;\n  v24 = v314;\n  v25 = v314 + v10;\n  v296 = v21 >> 2;\n  v297 = v22 >> 2;\n  v26 = v19;\n  if ( v20 <= v19 )\n    v26 = v20;\n  v27 = (v20 | v19) < 0;\n  v28 = 2LL;\n  if ( !v27 )\n    v28 = v26;\n  v318 = v28;\n  v29 = v336;\n  *v336 = 0x7FFFFFFF;\n  sub_401DD0(v12, v13, &v328, &v327, &v326);\n  v30 = floor(4.0 * v319);\n  v31 = v309;\n  v323 = (signed int)v30;\n  v322 = (signed int)v316;\n  v315 = (signed int)v317;\n  v312 = v316 + 4;\n  v334 = (signed int)v316 + 4;\n  v313 = v316 + 8;\n  v335 = (signed int)v316 + 8;\n  v32 = v4 + 2 * v285;\n  v33 = v317;\n  v34 = 4LL * (v299 + 2 * v291);\n  v360 = (_DWORD *)(v34 * 4 + 4LL * v32 + 5214864);\n  v359 = &dword_4F9210[v32 + v34];\n  v358 = &dword_4F9190[v32 + v34];\n  v355 = 16LL * (v299 + 2 * v291);\n  v354 = v32;\n  v357 = (int *)(v34 * 4 + 4LL * v32 + 5214480);\n  v356 = 32 * v23;\n  v35 = 32 * v23 + (v321 << 9);\n  v363 = v35 + 2 * v24 + 10648;\n  v36 = 1.0e30;\n  v321 = 32 * v23 + (v321 << 9);\n  v362 = v35 + 2 * v24 + 10552;\n  v320 = 16 * v23;\n  v361 = 16 * v23 + v24;\n  v37 = 0LL;\n  v298 = 0;\n  v290 = 0;\n  v364 = v25;\n  do\n  {\n    v38 = 1;\n    if ( v37 != 2\n      && ((v37 == 0 || ((unsigned int)v37 | 4) == 7) != 1 || !v327)\n      && ((v37 == 1 || v37 == 8) != 1 || !v328) )\n    {\n      v38 = v326 != 0;\n    }\n    v39 = dest;\n    if ( *((_DWORD *)dest + 599) && *((_DWORD *)off_49F6D0 + 6) == 2 )\n    {\n      if ( !v38 )\n        goto LABEL_70;\n    }\n    else if ( v37 <= 1 && *((_DWORD *)dest + 600)\n           || (unsigned int)(v37 - 3) <= 1 && *((_DWORD *)dest + 601)\n           || *((_DWORD *)dest + 602) != 0 && v37 > 4\n           || !v38 )\n    {\n      goto LABEL_70;\n    }\n    v40 = *((_DWORD *)dest + 616) == 0;\n    v306 = v36;\n    if ( v40 )\n    {\n      v152 = qword_4F9EB0;\n      v153 = (char *)off_49F6D0;\n      _mm_store_si128(\n        (__m128i *)&v366,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(\n            _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(qword_4F9EB0 + 8 * v25) + 2 * v31)),\n            (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)off_49F6D0 + 512 * v37 + 184)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v367,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(\n            _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v152 + 8 * v25 + 8) + 2 * v31)),\n            (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v153[512 * v37 + 216]), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v368,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(\n            _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v152 + 8 * v25 + 16) + 2 * v31)),\n            (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v153[512 * v37 + 248]), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v369,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(\n            _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v152 + 8 * v25 + 24) + 2 * v31)),\n            (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)&v153[512 * v37 + 280]), (__m128i)0LL)));\n      v154 = v323;\n      if ( v37 == v318 )\n        v154 = 0;\n      v155 = v154 + (unsigned __int64)sub_445CD0((signed int *)&v366, v39[6]);\n      if ( v155 < *v29 )\n      {\n        *v29 = v155;\n        v298 = v37;\n      }\n      v31 = v309;\n      v36 = v306;\n    }\n    else\n    {\n      v41 = (char *)off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v337 = v37;\n        v286 = v37 << 9;\n        v42 = (unsigned __int16 *)((char *)off_49F6D0 + 512 * v37 + 190);\n        v43 = 8 * v25 + *(_QWORD *)qword_4F9E88;\n        v44 = 8 * v25 + qword_4F9EB0;\n        v45 = *(_QWORD *)(qword_4F9E88 + 8) + 8 * v25;\n        v46 = (char *)off_49F6D0 + v363;\n        v47 = 0LL;\n        do\n        {\n          v48 = *(_QWORD *)(v43 + 2 * v47);\n          v49 = *(_QWORD *)(v44 + 2 * v47);\n          v50 = *(_QWORD *)(v45 + 2 * v47);\n          v51 = *(unsigned __int16 *)(v48 + 2 * v31) - *(unsigned __int16 *)&v46[v47 * 2 - 2144];\n          v52 = *(unsigned __int16 *)(v49 + 2 * v31) - *(v42 - 3);\n          v53 = *(unsigned __int16 *)(v50 + 2 * v31) - *(unsigned __int16 *)&v46[v47 * 2 - 96] - v51;\n          xmmword_4F46D0[v47] = v53;\n          v54 = v51 + (v53 >> 1);\n          v55 = v52 - v54;\n          xmmword_4F36D0[v47] = v55;\n          *(_DWORD *)((char *)xmmword_4F42D0 + 1 * v47) = v54 + (v55 >> 1);\n          v56 = *(unsigned __int16 *)(v48 + 2 * v31 + 2) - *(unsigned __int16 *)&v46[v47 * 2 - 2112];\n          v57 = *(unsigned __int16 *)(v49 + 2 * v31 + 2);\n          v58 = *(v42 - 2);\n          v59 = *(unsigned __int16 *)(v50 + 2 * v31 + 2) - *(unsigned __int16 *)&v46[v47 * 2 - 64] - v56;\n          xmmword_4F4710[v47] = v59;\n          v60 = v56 + (v59 >> 1);\n          v61 = v57 - v58 - v60;\n          xmmword_4F3710[v47] = v61;\n          *(_DWORD *)((char *)&xmmword_4F4310 + 1 * v47) = v60 + (v61 >> 1);\n          v62 = *(unsigned __int16 *)(v48 + 2 * v31 + 4) - *(unsigned __int16 *)&v46[v47 * 2 - 2080];\n          v63 = *(unsigned __int16 *)(v49 + 2 * v31 + 4) - *(v42 - 1);\n          v64 = *(unsigned __int16 *)(v50 + 2 * v31 + 4) - *(unsigned __int16 *)&v46[v47 * 2 - 32] - v62;\n          xmmword_4F4750[v47] = v64;\n          v65 = v62 + (v64 >> 1);\n          v66 = v63 - v65;\n          xmmword_4F3750[v47] = v66;\n          *(_DWORD *)((char *)&xmmword_4F4350 + 1 * v47) = v65 + (v66 >> 1);\n          v67 = *(unsigned __int16 *)(v48 + 2 * v31 + 6) - *(unsigned __int16 *)&v46[v47 * 2 - 2048];\n          v68 = *(unsigned __int16 *)(v49 + 2 * v31 + 6) - *v42;\n          v69 = *(unsigned __int16 *)(v50 + 2 * v31 + 6) - *(unsigned __int16 *)&v46[v47 * 2] - v67;\n          xmmword_4F4790[v47] = v69;\n          v70 = v67 + (v69 >> 1);\n          v71 = v68 - v70;\n          xmmword_4F3790[v47] = v71;\n          *(_DWORD *)((char *)&xmmword_4F4390 + 1 * v47) = v70 + (v71 >> 1);\n          v42 += 16;\n          ++v47;\n        }\n        while ( v47 != 4 );\n        *(_OWORD *)(v41 + 13112) = xmmword_4F42D0[0];\n        *(_OWORD *)(v41 + 13176) = xmmword_4F4310;\n        *(_OWORD *)(v41 + 13240) = xmmword_4F4350;\n        *(_OWORD *)(v41 + 13304) = xmmword_4F4390;\n        sub_474EE0((__int64)qword_4A0108);\n        v72 = v317;\n        v73 = sub_45C890(&v305, v316, (unsigned int)v317, v337, v318, v319);\n        sub_4750F0((__int64)qword_4A0108);\n        v74 = (char *)off_49F6D0;\n        v75 = *(_OWORD *)((char *)off_49F6D0 + 13176);\n        v76 = *(_OWORD *)((char *)off_49F6D0 + 13240);\n        v77 = *(_OWORD *)((char *)off_49F6D0 + 13304);\n        *(_OWORD *)xmmword_4F26D0 = *(_OWORD *)((char *)off_49F6D0 + 13112);\n        *(_OWORD *)((char *)off_49F6D0 + 13112) = *(_OWORD *)xmmword_4F46D0;\n        xmmword_4F2710 = v75;\n        *(_OWORD *)(v74 + 13176) = *(_OWORD *)xmmword_4F4710;\n        xmmword_4F2750 = v76;\n        *(_OWORD *)(v74 + 13240) = *(_OWORD *)xmmword_4F4750;\n        xmmword_4F2790 = v77;\n        *(_OWORD *)(v74 + 13304) = *(_OWORD *)xmmword_4F4790;\n        sub_474EE0((__int64)qword_4A0108);\n        v78 = sub_45CC80(v312, v72, 0);\n        v79 = (char *)off_49F6D0;\n        v80 = *(_OWORD *)((char *)off_49F6D0 + 13176);\n        v81 = *(_OWORD *)((char *)off_49F6D0 + 13240);\n        v82 = *(_OWORD *)((char *)off_49F6D0 + 13304);\n        *(_OWORD *)xmmword_4F32D0 = *(_OWORD *)((char *)off_49F6D0 + 13112);\n        *(_OWORD *)((char *)off_49F6D0 + 13112) = *(_OWORD *)xmmword_4F36D0;\n        *(_OWORD *)xmmword_4F3310 = v80;\n        *(_OWORD *)(v79 + 13176) = *(_OWORD *)xmmword_4F3710;\n        *(_OWORD *)xmmword_4F3350 = v81;\n        *(_OWORD *)(v79 + 13240) = *(_OWORD *)xmmword_4F3750;\n        v83 = v78;\n        *(_OWORD *)xmmword_4F3390 = v82;\n        *(_OWORD *)(v79 + 13304) = *(_OWORD *)xmmword_4F3790;\n        v324 = sub_45CC80(v313, v72, 1);\n        sub_4750F0((__int64)qword_4A0108);\n        xmmword_4F22D0[0] = *(_OWORD *)((char *)off_49F6D0 + 13112);\n        xmmword_4F2310[0] = *(_OWORD *)((char *)off_49F6D0 + 13176);\n        xmmword_4F2350[0] = *(_OWORD *)((char *)off_49F6D0 + 13240);\n        xmmword_4F2390[0] = *(_OWORD *)((char *)off_49F6D0 + 13304);\n        v325 = v83 + (signed int)v73;\n        v84 = *((_DWORD *)off_49F6D0 + 18171);\n        v85 = *((_DWORD *)off_49F6D0 + 18172);\n        v307 = *(_QWORD *)(qword_4F9E30 + 6424);\n        v86 = *(__int64 **)(qword_4F9E30 + 6464);\n        v300 = *v86;\n        v308 = v86[1];\n        v287 = (char *)off_49F6D0 + v286 + 184;\n        v365 = off_49F6D0;\n        v87 = (char *)off_49F6D0 + v362;\n        v88 = 0LL;\n        v89 = 0LL;\n        v36 = v306;\n        do\n        {\n          v292 = v89;\n          v90 = 2 * v304 + *(_QWORD *)(v300 + 8 * (v303 + v89));\n          v91 = 2 * v304 + *(_QWORD *)(v307 + 8 * (v303 + v89));\n          v92 = *(_QWORD *)(v308 + 8 * (v303 + v89)) + 2 * v304;\n          v93 = 0LL;\n          v94 = 0LL;\n          do\n          {\n            v95 = xmmword_4F32D0[v94 / 2 + v88];\n            v96 = xmmword_4F26D0[v94 / 2 + v88]\n                - (*(_DWORD *)((char *)&xmmword_4F22D0[v94 / 8] + v88 * 4) >> 1)\n                - (xmmword_4F32D0[v94 / 2 + v88] >> 1);\n            v97 = v96 + *(unsigned __int16 *)&v87[v94 - 2048];\n            if ( v97 < 0 )\n              v97 = 0;\n            v98 = *(_DWORD *)((char *)&xmmword_4F22D0[v94 / 8] + v88 * 4)\n                + xmmword_4F26D0[v94 / 2 + v88]\n                - (*(_DWORD *)((char *)&xmmword_4F22D0[v94 / 8] + v88 * 4) >> 1);\n            v99 = v85;\n            if ( v85 >= v97 )\n              v99 = v97;\n            *(_WORD *)(v90 + v93) = v99;\n            v100 = *(unsigned __int16 *)&v287[v93] + v98;\n            if ( v100 < 0 )\n              v100 = 0;\n            v101 = v95 + v96;\n            v102 = v84;\n            if ( v84 >= v100 )\n              v102 = v100;\n            *(_WORD *)(v91 + v93) = v102;\n            v103 = *(unsigned __int16 *)&v87[v94] + v101;\n            if ( v103 < 0 )\n              v103 = 0;\n            v104 = v85;\n            if ( v85 >= v103 )\n              v104 = v103;\n            *(_WORD *)(v92 + v93) = v104;\n            v94 += 32LL;\n            v93 += 2LL;\n          }\n          while ( v93 != 8 );\n          v89 = v292 + 1;\n          ++v88;\n          v287 += 32;\n          v87 += 2;\n        }\n        while ( v292 != 3 );\n        v293 = v307 + 8 * v303;\n        v307 = 8 * v303 + *(_QWORD *)qword_4F9E88;\n        v105 = *(_QWORD *)(qword_4F9E88 + 8) + 8 * v303;\n        v301 = v300 + 8 * v303;\n        v308 += 8 * v303;\n        v106 = 0LL;\n        v107 = 0;\n        do\n        {\n          v108 = *(_QWORD *)(8 * v303 + qword_4F9EB0 + v106);\n          v109 = *(_QWORD *)(v293 + v106);\n          v110 = *(_QWORD *)(v307 + v106);\n          v111 = *(_QWORD *)(v301 + v106);\n          v112 = *(_QWORD *)(v105 + v106);\n          v113 = *(_QWORD *)(v308 + v106);\n          v114 = *(unsigned __int16 *)(v108 + 2 * v304) - *(unsigned __int16 *)(v109 + 2 * v304);\n          v115 = *(unsigned __int16 *)(v110 + 2 * v304) - *(unsigned __int16 *)(v111 + 2 * v304);\n          v116 = *(unsigned __int16 *)(v112 + 2 * v304) - *(unsigned __int16 *)(v113 + 2 * v304);\n          v117 = *(unsigned __int16 *)(v108 + 2 * v304 + 2) - *(unsigned __int16 *)(v109 + 2 * v304 + 2);\n          v118 = v107 + v114 * v114 + v115 * v115 + v116 * v116 + v117 * v117;\n          v119 = *(unsigned __int16 *)(v110 + 2 * v304 + 2) - *(unsigned __int16 *)(v111 + 2 * v304 + 2);\n          v120 = v118 + v119 * v119;\n          v121 = *(unsigned __int16 *)(v112 + 2 * v304 + 2) - *(unsigned __int16 *)(v113 + 2 * v304 + 2);\n          v122 = v120 + v121 * v121;\n          v123 = *(unsigned __int16 *)(v108 + 2 * v304 + 4) - *(unsigned __int16 *)(v109 + 2 * v304 + 4);\n          v124 = v122 + v123 * v123;\n          v125 = *(unsigned __int16 *)(v110 + 2 * v304 + 4) - *(unsigned __int16 *)(v111 + 2 * v304 + 4);\n          v126 = v124 + v125 * v125;\n          v127 = *(unsigned __int16 *)(v112 + 2 * v304 + 4) - *(unsigned __int16 *)(v113 + 2 * v304 + 4);\n          LODWORD(v108) = *(unsigned __int16 *)(v108 + 2 * v304 + 6) - *(unsigned __int16 *)(v109 + 2 * v304 + 6);\n          LODWORD(v109) = *(unsigned __int16 *)(v110 + 2 * v304 + 6) - *(unsigned __int16 *)(v111 + 2 * v304 + 6);\n          v128 = *(unsigned __int16 *)(v112 + 2 * v304 + 6) - *(unsigned __int16 *)(v113 + 2 * v304 + 6);\n          v107 = v126 + v127 * v127 + v108 * v108 + v109 * v109 + v128 * v128;\n          v106 += 8LL;\n        }\n        while ( v106 != 32 );\n        v129 = (double)(v324 + v325) * v319 + (double)v107;\n        v33 = v317;\n        v31 = v309;\n        v25 = v364;\n        v29 = v336;\n        v37 = v337;\n        if ( v36 > v129 )\n        {\n          v130 = v315;\n          v131 = *(_QWORD *)(*(_QWORD *)(v365[1767] + 8 * v322) + 8 * v315);\n          v132 = qword_4A00E8;\n          v133 = *(_DWORD **)v131;\n          v134 = *(_DWORD **)qword_4A00E8;\n          *v134 = **(_DWORD **)v131;\n          v134[1] = v133[1];\n          v134[2] = v133[2];\n          v134[3] = v133[3];\n          v134[4] = v133[4];\n          v134[5] = v133[5];\n          v134[6] = v133[6];\n          v134[7] = v133[7];\n          v134[8] = v133[8];\n          v134[9] = v133[9];\n          v134[10] = v133[10];\n          v134[11] = v133[11];\n          v134[12] = v133[12];\n          v134[13] = v133[13];\n          v134[14] = v133[14];\n          v134[15] = v133[15];\n          v134[16] = v133[16];\n          v134[17] = v133[17];\n          v135 = *(_DWORD **)(v131 + 8);\n          v136 = *(_DWORD **)(v132 + 8);\n          *v136 = *v135;\n          v136[1] = v135[1];\n          v136[2] = v135[2];\n          v136[3] = v135[3];\n          v136[4] = v135[4];\n          v136[5] = v135[5];\n          v136[6] = v135[6];\n          v136[7] = v135[7];\n          v136[8] = v135[8];\n          v136[9] = v135[9];\n          v136[10] = v135[10];\n          v136[11] = v135[11];\n          v136[12] = v135[12];\n          v136[13] = v135[13];\n          v136[14] = v135[14];\n          v136[15] = v135[15];\n          v136[16] = v135[16];\n          v136[17] = v135[17];\n          v137 = *(__int128 ***)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v334) + 8 * v130);\n          v138 = *v137;\n          xmmword_4F85C0 = **v137;\n          xmmword_4F85D0 = v138[1];\n          xmmword_4F85E0 = v138[2];\n          xmmword_4F85F0 = v138[3];\n          dword_4F8600 = *((_DWORD *)v138 + 16);\n          dword_4F8604 = *((_DWORD *)v138 + 17);\n          v139 = (int *)v137[1];\n          dword_4F8608 = *v139;\n          dword_4F860C = v139[1];\n          dword_4F8610 = v139[2];\n          dword_4F8614 = v139[3];\n          dword_4F8618 = v139[4];\n          dword_4F861C = v139[5];\n          dword_4F8620 = v139[6];\n          dword_4F8624 = v139[7];\n          dword_4F8628 = v139[8];\n          dword_4F862C = v139[9];\n          dword_4F8630 = v139[10];\n          dword_4F8634 = v139[11];\n          dword_4F8638 = v139[12];\n          dword_4F863C = v139[13];\n          dword_4F8640 = v139[14];\n          dword_4F8644 = v139[15];\n          dword_4F8648 = v139[16];\n          dword_4F864C = v139[17];\n          v140 = *(int ***)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v335) + 8 * v130);\n          v141 = *v140;\n          dword_4F8650 = **v140;\n          dword_4F8654 = v141[1];\n          dword_4F8658 = v141[2];\n          dword_4F865C = v141[3];\n          dword_4F8660 = v141[4];\n          dword_4F8664 = v141[5];\n          dword_4F8668 = v141[6];\n          dword_4F866C = v141[7];\n          dword_4F8670 = v141[8];\n          dword_4F8674 = v141[9];\n          dword_4F8678 = v141[10];\n          dword_4F867C = v141[11];\n          dword_4F8680 = v141[12];\n          dword_4F8684 = v141[13];\n          dword_4F8688 = v141[14];\n          dword_4F868C = v141[15];\n          dword_4F8690 = v141[16];\n          dword_4F8694 = v141[17];\n          v142 = v140[1];\n          dword_4F8698 = *v142;\n          dword_4F869C = v142[1];\n          dword_4F86A0 = v142[2];\n          dword_4F86A4 = v142[3];\n          dword_4F86A8 = v142[4];\n          dword_4F86AC = v142[5];\n          dword_4F86B0 = v142[6];\n          dword_4F86B4 = v142[7];\n          dword_4F86B8 = v142[8];\n          dword_4F86BC = v142[9];\n          dword_4F86C0 = v142[10];\n          dword_4F86C4 = v142[11];\n          dword_4F86C8 = v142[12];\n          dword_4F86CC = v142[13];\n          dword_4F86D0 = v142[14];\n          dword_4F86D4 = v142[15];\n          dword_4F86D8 = v142[16];\n          dword_4F86DC = v142[17];\n          v143 = *(__int64 **)(qword_4F9E30 + 6464);\n          v144 = v29;\n          v145 = v360;\n          v146 = v359;\n          *v359 = *v360;\n          v147 = v358;\n          v148 = v357;\n          *v357 = *v358;\n          v149 = *v143;\n          _mm_store_si128(\n            (__m128i *)&v338,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(*v143 + 8 * v303) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v339,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v149 + 8 * v303 + 8) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v340,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v149 + 8 * v303 + 16) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v341,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v149 + 8 * v303 + 24) + 2 * v304)),\n              (__m128i)0LL));\n          LODWORD(v149) = v145[16];\n          v29 = v144;\n          v146[16] = v149;\n          v148[16] = v147[16];\n          v150 = v143[1];\n          _mm_store_si128(\n            (__m128i *)&v342,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v150 + 8 * v303) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v343,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v150 + 8 * v303 + 8) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v344,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v150 + 8 * v303 + 16) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v345,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v150 + 8 * v303 + 24) + 2 * v304)),\n              (__m128i)0LL));\n          v151 = *(_QWORD *)(qword_4F9E30 + 6424);\n          _mm_store_si128(\n            (__m128i *)&v330,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v151 + 8 * v303) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v331,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v151 + 8 * v303 + 8) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v332,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v151 + 8 * v303 + 16) + 2 * v304)),\n              (__m128i)0LL));\n          _mm_store_si128(\n            (__m128i *)&v333,\n            _mm_unpacklo_epi16(\n              _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v151 + 8 * v303 + 24) + 2 * v304)),\n              (__m128i)0LL));\n          v290 = v305;\n          v36 = v129;\n          v298 = v37;\n        }\n      }\n      else\n      {\n        v156 = v33;\n        v157 = v29;\n        v158 = (char *)off_49F6D0 + 512 * v37 + 190;\n        v159 = qword_4F9EB0 + 8 * v25;\n        v160 = v361;\n        v161 = 0LL;\n        do\n        {\n          v162 = *(_QWORD *)(v159 + 2 * v161);\n          *(_WORD *)&v41[2 * v160 + 12600] = *(_WORD *)&v158[8 * v161 - 6];\n          *(_DWORD *)&v41[v161 + 13112] = *(unsigned __int16 *)(v162 + 2 * v31)\n                                        - *(unsigned __int16 *)&v158[8 * v161 - 6];\n          *(_WORD *)&v41[2 * v160 + 12632] = *(_WORD *)&v158[8 * v161 - 4];\n          *(_DWORD *)&v41[v161 + 13176] = *(unsigned __int16 *)(v162 + 2 * v31 + 2)\n                                        - *(unsigned __int16 *)&v158[8 * v161 - 4];\n          *(_WORD *)&v41[2 * v160 + 12664] = *(_WORD *)&v158[8 * v161 - 2];\n          *(_DWORD *)&v41[v161 + 13240] = *(unsigned __int16 *)(v162 + 2 * v31 + 4)\n                                        - *(unsigned __int16 *)&v158[8 * v161 - 2];\n          *(_WORD *)&v41[2 * v160 + 12696] = *(_WORD *)&v158[8 * v161];\n          *(_DWORD *)&v41[v161 + 13304] = *(unsigned __int16 *)(v162 + 2 * v31 + 6)\n                                        - *(unsigned __int16 *)&v158[8 * v161];\n          v161 += 4LL;\n          ++v160;\n        }\n        while ( v161 != 16 );\n        sub_474EE0((__int64)qword_4A0108);\n        v163 = sub_45C890(&v305, v316, (unsigned int)v156, v37, v318, v319);\n        v164 = v306;\n        if ( v306 <= v163 )\n        {\n          v29 = v157;\n          v33 = v156;\n        }\n        else\n        {\n          v29 = v157;\n          v33 = v156;\n          if ( COERCE_DOUBLE(COERCE_UNSIGNED_INT64(v163 - v306) & xmmword_4897D0) > 2.273736754432321e-13 )\n          {\n            v165 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v322) + 8 * v315);\n            v166 = qword_4A00E8;\n            v167 = *(_DWORD **)v165;\n            v168 = *(_DWORD **)qword_4A00E8;\n            *v168 = **(_DWORD **)v165;\n            v168[1] = v167[1];\n            v168[2] = v167[2];\n            v168[3] = v167[3];\n            v168[4] = v167[4];\n            v168[5] = v167[5];\n            v168[6] = v167[6];\n            v168[7] = v167[7];\n            v168[8] = v167[8];\n            v168[9] = v167[9];\n            v168[10] = v167[10];\n            v168[11] = v167[11];\n            v168[12] = v167[12];\n            v168[13] = v167[13];\n            v168[14] = v167[14];\n            v168[15] = v167[15];\n            v168[16] = v167[16];\n            v168[17] = v167[17];\n            v169 = *(_DWORD **)(v165 + 8);\n            v170 = *(_DWORD **)(v166 + 8);\n            *v170 = *v169;\n            v170[1] = v169[1];\n            v170[2] = v169[2];\n            v170[3] = v169[3];\n            v170[4] = v169[4];\n            v170[5] = v169[5];\n            v170[6] = v169[6];\n            v170[7] = v169[7];\n            v170[8] = v169[8];\n            v170[9] = v169[9];\n            v170[10] = v169[10];\n            v170[11] = v169[11];\n            v170[12] = v169[12];\n            v170[13] = v169[13];\n            v170[14] = v169[14];\n            v170[15] = v169[15];\n            v170[16] = v169[16];\n            v170[17] = v169[17];\n            v171 = *(_QWORD *)(qword_4F9E30 + 6424);\n            _mm_store_si128(\n              (__m128i *)&v330,\n              _mm_unpacklo_epi16(\n                _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v171 + 8 * v303) + 2 * v304)),\n                (__m128i)0LL));\n            _mm_store_si128(\n              (__m128i *)&v331,\n              _mm_unpacklo_epi16(\n                _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v171 + 8 * v303 + 8) + 2 * v304)),\n                (__m128i)0LL));\n            _mm_store_si128(\n              (__m128i *)&v332,\n              _mm_unpacklo_epi16(\n                _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v171 + 8 * v303 + 16) + 2 * v304)),\n                (__m128i)0LL));\n            _mm_store_si128(\n              (__m128i *)&v333,\n              _mm_unpacklo_epi16(\n                _mm_loadl_epi64((const __m128i *)(*(_QWORD *)(v171 + 8 * v303 + 24) + 2 * v304)),\n                (__m128i)0LL));\n            v290 = v305;\n            v164 = v163;\n            v298 = v37;\n          }\n        }\n        v306 = v164;\n        sub_4750F0((__int64)qword_4A0108);\n        v36 = v306;\n        v31 = v309;\n      }\n    }\nLABEL_70:\n    ++v37;\n  }\n  while ( v37 != 9 );\n  v172 = (signed int *)off_49F6D0;\n  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 13) + 8LL * v296) + 4LL * v297) = v298;\n  v173 = -1;\n  if ( (_DWORD)v318 != v298 )\n    v173 = v298 - (v298 >= (signed int)v318);\n  *(_DWORD *)(*((_QWORD *)v172 + 1771) + 632LL * v172[3] + 4LL * ((signed int)v33 + 4 * (signed int)v316) + 332) = v173;\n  if ( *((_DWORD *)dest + 616) )\n  {\n    v174 = qword_4A00E8;\n    v175 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v172 + 1767) + 8 * v322) + 8 * v315);\n    v176 = *(_DWORD **)qword_4A00E8;\n    v177 = *(_DWORD **)v175;\n    *v177 = **(_DWORD **)qword_4A00E8;\n    v177[1] = v176[1];\n    v177[2] = v176[2];\n    v177[3] = v176[3];\n    v177[4] = v176[4];\n    v177[5] = v176[5];\n    v177[6] = v176[6];\n    v177[7] = v176[7];\n    v177[8] = v176[8];\n    v177[9] = v176[9];\n    v177[10] = v176[10];\n    v177[11] = v176[11];\n    v177[12] = v176[12];\n    v177[13] = v176[13];\n    v177[14] = v176[14];\n    v177[15] = v176[15];\n    v177[16] = v176[16];\n    v177[17] = v176[17];\n    v178 = *(_DWORD **)(v174 + 8);\n    v179 = *(_DWORD **)(v175 + 8);\n    *v179 = *v178;\n    v179[1] = v178[1];\n    v179[2] = v178[2];\n    v179[3] = v178[3];\n    v179[4] = v178[4];\n    v179[5] = v178[5];\n    v179[6] = v178[6];\n    v179[7] = v178[7];\n    v179[8] = v178[8];\n    v179[9] = v178[9];\n    v179[10] = v178[10];\n    v179[11] = v178[11];\n    v179[12] = v178[12];\n    v179[13] = v178[13];\n    v179[14] = v178[14];\n    v179[15] = v178[15];\n    v179[16] = v178[16];\n    v179[17] = v178[17];\n    if ( v172[18181] )\n    {\n      v180 = v315;\n      v181 = *(__int64 **)(*(_QWORD *)(*((_QWORD *)v172 + 1767) + 8 * v334) + 8 * v315);\n      v182 = *v181;\n      *(_OWORD *)v182 = xmmword_4F85C0;\n      *(_OWORD *)(v182 + 16) = xmmword_4F85D0;\n      *(_OWORD *)(v182 + 32) = xmmword_4F85E0;\n      *(_OWORD *)(v182 + 48) = xmmword_4F85F0;\n      *(_DWORD *)(v182 + 64) = dword_4F8600;\n      *(_DWORD *)(v182 + 68) = dword_4F8604;\n      v183 = (_DWORD *)v181[1];\n      *v183 = dword_4F8608;\n      v183[1] = dword_4F860C;\n      v183[2] = dword_4F8610;\n      v183[3] = dword_4F8614;\n      v183[4] = dword_4F8618;\n      v183[5] = dword_4F861C;\n      v183[6] = dword_4F8620;\n      v183[7] = dword_4F8624;\n      v183[8] = dword_4F8628;\n      v183[9] = dword_4F862C;\n      v183[10] = dword_4F8630;\n      v183[11] = dword_4F8634;\n      v183[12] = dword_4F8638;\n      v183[13] = dword_4F863C;\n      v183[14] = dword_4F8640;\n      v183[15] = dword_4F8644;\n      v183[16] = dword_4F8648;\n      v183[17] = dword_4F864C;\n      v184 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v172 + 1767) + 8 * v335) + 8 * v180);\n      v185 = *(_DWORD **)v184;\n      *v185 = dword_4F8650;\n      v185[1] = dword_4F8654;\n      v185[2] = dword_4F8658;\n      v185[3] = dword_4F865C;\n      v185[4] = dword_4F8660;\n      v185[5] = dword_4F8664;\n      v185[6] = dword_4F8668;\n      v185[7] = dword_4F866C;\n      v185[8] = dword_4F8670;\n      v185[9] = dword_4F8674;\n      v185[10] = dword_4F8678;\n      v185[11] = dword_4F867C;\n      v185[12] = dword_4F8680;\n      v185[13] = dword_4F8684;\n      v185[14] = dword_4F8688;\n      v185[15] = dword_4F868C;\n      v185[16] = dword_4F8690;\n      v185[17] = dword_4F8694;\n      v186 = *(_DWORD **)(v184 + 8);\n      *v186 = dword_4F8698;\n      v186[1] = dword_4F869C;\n      v186[2] = dword_4F86A0;\n      v186[3] = dword_4F86A4;\n      v186[4] = dword_4F86A8;\n      v186[5] = dword_4F86AC;\n      v186[6] = dword_4F86B0;\n      v186[7] = dword_4F86B4;\n      v186[8] = dword_4F86B8;\n      v186[9] = dword_4F86BC;\n      v186[10] = dword_4F86C0;\n      v186[11] = dword_4F86C4;\n      v186[12] = dword_4F86C8;\n      v186[13] = dword_4F86CC;\n      v186[14] = dword_4F86D0;\n      v186[15] = dword_4F86D4;\n      v186[16] = dword_4F86D8;\n      v186[17] = dword_4F86DC;\n    }\n    v187 = qword_4F9E30;\n    v188 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v189 = *(_QWORD *)(v188 + 8 * v303);\n    *(_WORD *)(v189 + 2 * v304) = v330;\n    v190 = (signed __int64)v298 << 9;\n    v191 = v356;\n    v192 = (__int64)&v172[v356 / 4 + 3150];\n    v193 = v314;\n    *(_WORD *)(v192 + 2 * v314) = *(_WORD *)((char *)v172 + v190 + 184);\n    *(_WORD *)(v189 + 2 * v304 + 2) = WORD2(v330);\n    v194 = (signed __int64)v172 + (v191 | 0x20) + 12600;\n    *(_WORD *)(v194 + 2 * v193) = *(_WORD *)((char *)v172 + v190 + 186);\n    *(_WORD *)(v189 + 2 * v304 + 4) = WORD4(v330);\n    v195 = (signed __int64)v172 + (v191 | 0x40) + 12600;\n    *(_WORD *)(v195 + 2 * v193) = *(_WORD *)((char *)v172 + v190 + 188);\n    *(_WORD *)(v189 + 2 * v304 + 6) = WORD6(v330);\n    v196 = (signed __int64)v172 + (v191 | 0x60) + 12600;\n    *(_WORD *)(v196 + 2 * v193) = *(_WORD *)((char *)v172 + v190 + 190);\n    v197 = 2 * v193;\n    v198 = *(_QWORD *)(v188 + 8 * v303 + 8);\n    *(_WORD *)(v198 + 2 * v304) = v331;\n    v199 = 2 * v193 | 2;\n    *(_WORD *)(v199 + v192) = *(_WORD *)((char *)v172 + v190 + 216);\n    *(_WORD *)(v198 + 2 * v304 + 2) = WORD2(v331);\n    *(_WORD *)(v199 + v194) = *(_WORD *)((char *)v172 + v190 + 218);\n    *(_WORD *)(v198 + 2 * v304 + 4) = WORD4(v331);\n    *(_WORD *)(v199 + v195) = *(_WORD *)((char *)v172 + v190 + 220);\n    *(_WORD *)(v198 + 2 * v304 + 6) = WORD6(v331);\n    *(_WORD *)(v199 + v196) = *(_WORD *)((char *)v172 + v190 + 222);\n    v200 = *(_QWORD *)(v188 + 8 * v303 + 16);\n    *(_WORD *)(v200 + 2 * v304) = v332;\n    v201 = 2 * v193 | 4;\n    *(_WORD *)(v201 + v192) = *(_WORD *)((char *)v172 + v190 + 248);\n    *(_WORD *)(v200 + 2 * v304 + 2) = WORD2(v332);\n    *(_WORD *)(v201 + v194) = *(_WORD *)((char *)v172 + v190 + 250);\n    *(_WORD *)(v200 + 2 * v304 + 4) = WORD4(v332);\n    *(_WORD *)(v201 + v195) = *(_WORD *)((char *)v172 + v190 + 252);\n    *(_WORD *)(v200 + 2 * v304 + 6) = WORD6(v332);\n    *(_WORD *)(v201 + v196) = *(_WORD *)((char *)v172 + v190 + 254);\n    v202 = *(_QWORD *)(v188 + 8 * v303 + 24);\n    *(_WORD *)(v202 + 2 * v304) = v333;\n    v197 |= 6uLL;\n    *(_WORD *)(v197 + v192) = *(_WORD *)((char *)v172 + v190 + 280);\n    *(_WORD *)(v202 + 2 * v304 + 2) = WORD2(v333);\n    *(_WORD *)(v197 + v194) = *(_WORD *)((char *)v172 + v190 + 282);\n    *(_WORD *)(v202 + 2 * v304 + 4) = WORD4(v333);\n    *(_WORD *)(v197 + v195) = *(_WORD *)((char *)v172 + v190 + 284);\n    *(_WORD *)(v202 + 2 * v304 + 6) = WORD6(v333);\n    *(_WORD *)(v197 + v196) = *(_WORD *)((char *)v172 + v190 + 286);\n    if ( v172[18181] )\n    {\n      v203 = *(__int64 **)(v187 + 6464);\n      v204 = *v203;\n      v205 = *(_QWORD *)(*v203 + 8 * v303);\n      *(_WORD *)(v205 + 2 * v304) = v338;\n      *(_WORD *)(v205 + 2 * v304 + 2) = WORD2(v338);\n      *(_WORD *)(v205 + 2 * v304 + 4) = WORD4(v338);\n      *(_WORD *)(v205 + 2 * v304 + 6) = WORD6(v338);\n      v206 = *(_QWORD *)(v204 + 8 * v303 + 8);\n      *(_WORD *)(v206 + 2 * v304) = v339;\n      *(_WORD *)(v206 + 2 * v304 + 2) = WORD2(v339);\n      *(_WORD *)(v206 + 2 * v304 + 4) = WORD4(v339);\n      *(_WORD *)(v206 + 2 * v304 + 6) = WORD6(v339);\n      v207 = *(_QWORD *)(v204 + 8 * v303 + 16);\n      *(_WORD *)(v207 + 2 * v304) = v340;\n      *(_WORD *)(v207 + 2 * v304 + 2) = WORD2(v340);\n      *(_WORD *)(v207 + 2 * v304 + 4) = WORD4(v340);\n      *(_WORD *)(v207 + 2 * v304 + 6) = WORD6(v340);\n      v208 = *(_QWORD *)(v204 + 8 * v303 + 24);\n      *(_WORD *)(v208 + 2 * v304) = v341;\n      *(_WORD *)(v208 + 2 * v304 + 2) = WORD2(v341);\n      *(_WORD *)(v208 + 2 * v304 + 4) = WORD4(v341);\n      *(_WORD *)(v208 + 2 * v304 + 6) = WORD6(v341);\n      v209 = v203[1];\n      v210 = *(_QWORD *)(v209 + 8 * v303);\n      *(_WORD *)(v210 + 2 * v304) = v342;\n      *(_WORD *)(v210 + 2 * v304 + 2) = WORD2(v342);\n      *(_WORD *)(v210 + 2 * v304 + 4) = WORD4(v342);\n      *(_WORD *)(v210 + 2 * v304 + 6) = WORD6(v342);\n      v211 = *(_QWORD *)(v209 + 8 * v303 + 8);\n      *(_WORD *)(v211 + 2 * v304) = v343;\n      *(_WORD *)(v211 + 2 * v304 + 2) = WORD2(v343);\n      *(_WORD *)(v211 + 2 * v304 + 4) = WORD4(v343);\n      *(_WORD *)(v211 + 2 * v304 + 6) = WORD6(v343);\n      v212 = *(_QWORD *)(v209 + 8 * v303 + 16);\n      *(_WORD *)(v212 + 2 * v304) = v344;\n      *(_WORD *)(v212 + 2 * v304 + 2) = WORD2(v344);\n      *(_WORD *)(v212 + 2 * v304 + 4) = WORD4(v344);\n      *(_WORD *)(v212 + 2 * v304 + 6) = WORD6(v344);\n      v213 = *(_QWORD *)(v209 + 8 * v303 + 24);\n      *(_WORD *)(v213 + 2 * v304) = v345;\n      *(_WORD *)(v213 + 2 * v304 + 2) = WORD2(v345);\n      *(_WORD *)(v213 + 2 * v304 + 4) = WORD4(v345);\n      *(_WORD *)(v213 + 2 * v304 + 6) = WORD6(v345);\n    }\n    goto LABEL_97;\n  }\n  if ( v172[18181] )\n  {\n    v214 = 8 * v25;\n    v215 = v214 + *(_QWORD *)qword_4F9E88;\n    v216 = v214 + qword_4F9EB0;\n    v288 = (signed __int64)v298 << 9;\n    v217 = (unsigned __int16 *)((char *)v172 + v288 + 190);\n    v294 = v321 + 2 * v314;\n    v218 = (signed __int64)v172 + v294 + 10648;\n    v219 = 0LL;\n    v220 = *(_QWORD *)(qword_4F9E88 + 8) + v214;\n    do\n    {\n      v221 = *(_QWORD *)(v215 + 2 * v219);\n      v222 = *(_QWORD *)(v216 + 2 * v219);\n      v223 = *(_QWORD *)(v220 + 2 * v219);\n      v224 = *(unsigned __int16 *)(v221 + 2 * v31) - *(unsigned __int16 *)(v218 + v219 * 2 - 2144);\n      v225 = *(unsigned __int16 *)(v222 + 2 * v31) - *(v217 - 3);\n      v226 = *(unsigned __int16 *)(v223 + 2 * v31) - *(unsigned __int16 *)(v218 + v219 * 2 - 96) - v224;\n      xmmword_4F46D0[v219] = v226;\n      v227 = v224 + (v226 >> 1);\n      v228 = v225 - v227;\n      xmmword_4F36D0[v219] = v228;\n      *(_DWORD *)((char *)xmmword_4F42D0 + 1 * v219) = v227 + (v228 >> 1);\n      v229 = *(unsigned __int16 *)(v221 + 2 * v31 + 2) - *(unsigned __int16 *)(v218 + v219 * 2 - 2112);\n      v230 = *(unsigned __int16 *)(v222 + 2 * v31 + 2);\n      v231 = *(v217 - 2);\n      v232 = *(unsigned __int16 *)(v223 + 2 * v31 + 2) - *(unsigned __int16 *)(v218 + v219 * 2 - 64) - v229;\n      xmmword_4F4710[v219] = v232;\n      v233 = v229 + (v232 >> 1);\n      v234 = v230 - v231 - v233;\n      xmmword_4F3710[v219] = v234;\n      *(_DWORD *)((char *)&xmmword_4F4310 + 1 * v219) = v233 + (v234 >> 1);\n      v235 = *(unsigned __int16 *)(v221 + 2 * v31 + 4) - *(unsigned __int16 *)(v218 + v219 * 2 - 2080);\n      v236 = *(unsigned __int16 *)(v222 + 2 * v31 + 4) - *(v217 - 1);\n      v237 = *(unsigned __int16 *)(v223 + 2 * v31 + 4) - *(unsigned __int16 *)(v218 + v219 * 2 - 32) - v235;\n      xmmword_4F4750[v219] = v237;\n      v238 = v235 + (v237 >> 1);\n      v239 = v236 - v238;\n      xmmword_4F3750[v219] = v239;\n      *(_DWORD *)((char *)&xmmword_4F4350 + 1 * v219) = v238 + (v239 >> 1);\n      v240 = *(unsigned __int16 *)(v221 + 2 * v31 + 6) - *(unsigned __int16 *)(v218 + v219 * 2 - 2048);\n      v241 = *(unsigned __int16 *)(v222 + 2 * v31 + 6) - *v217;\n      v242 = *(unsigned __int16 *)(v223 + 2 * v31 + 6) - *(unsigned __int16 *)(v218 + v219 * 2) - v240;\n      xmmword_4F4790[v219] = v242;\n      v243 = v240 + (v242 >> 1);\n      v244 = v241 - v243;\n      xmmword_4F3790[v219] = v244;\n      *(_DWORD *)((char *)&xmmword_4F4390 + 1 * v219) = v243 + (v244 >> 1);\n      v217 += 16;\n      ++v219;\n    }\n    while ( v219 != 4 );\n    *(_OWORD *)(v172 + 3278) = xmmword_4F42D0[0];\n    *(_OWORD *)(v172 + 3294) = xmmword_4F4310;\n    *(_OWORD *)(v172 + 3310) = xmmword_4F4350;\n    *(_OWORD *)(v172 + 3326) = xmmword_4F4390;\n    v245 = sub_4045F0(v311, v310, &v329, 1);\n    v246 = (char *)off_49F6D0;\n    v247 = *(_OWORD *)((char *)off_49F6D0 + 13176);\n    v248 = *(_OWORD *)((char *)off_49F6D0 + 13240);\n    v249 = *(_OWORD *)((char *)off_49F6D0 + 13304);\n    *(_OWORD *)xmmword_4F26D0 = *(_OWORD *)((char *)off_49F6D0 + 13112);\n    *(_OWORD *)((char *)off_49F6D0 + 13112) = *(_OWORD *)xmmword_4F46D0;\n    xmmword_4F2710 = v247;\n    *(_OWORD *)(v246 + 13176) = *(_OWORD *)xmmword_4F4710;\n    xmmword_4F2750 = v248;\n    *(_OWORD *)(v246 + 13240) = *(_OWORD *)xmmword_4F4750;\n    xmmword_4F2790 = v249;\n    v290 = v245;\n    *(_OWORD *)(v246 + 13304) = *(_OWORD *)xmmword_4F4790;\n    v250 = 0LL;\n    v251 = v317;\n    v252 = sub_407360(0, v312, v317);\n    v253 = v355;\n    v254 = v354;\n    dword_4F9110[v354 + v355 / 4] = v252;\n    *(int *)((char *)&dword_4F9210[v254] + v253) = *(int *)((char *)&dword_4F9290[v254] + v253);\n    v255 = (char *)off_49F6D0;\n    v256 = *(_OWORD *)((char *)off_49F6D0 + 13176);\n    v257 = _mm_loadu_si128((const __m128i *)((char *)off_49F6D0 + 13240));\n    v258 = *(_OWORD *)((char *)off_49F6D0 + 13304);\n    *(_OWORD *)xmmword_4F32D0 = *(_OWORD *)((char *)off_49F6D0 + 13112);\n    *(_OWORD *)((char *)off_49F6D0 + 13112) = *(_OWORD *)xmmword_4F36D0;\n    *(_OWORD *)xmmword_4F3310 = v256;\n    *(_OWORD *)(v255 + 13176) = *(_OWORD *)xmmword_4F3710;\n    _mm_store_si128((__m128i *)xmmword_4F3350, v257);\n    *(_OWORD *)(v255 + 13240) = *(_OWORD *)xmmword_4F3750;\n    *(_OWORD *)xmmword_4F3390 = v258;\n    *(_OWORD *)(v255 + 13304) = *(_OWORD *)xmmword_4F3790;\n    *(int *)((char *)&dword_4F9150[v254] + v253) = sub_407360(1, v313, v251);\n    *(int *)((char *)&dword_4F9250[v254] + v253) = *(int *)((char *)&dword_4F92D0[v254] + v253);\n    xmmword_4F22D0[0] = *(_OWORD *)((char *)off_49F6D0 + 13112);\n    xmmword_4F2310[0] = *(_OWORD *)((char *)off_49F6D0 + 13176);\n    xmmword_4F2350[0] = *(_OWORD *)((char *)off_49F6D0 + 13240);\n    xmmword_4F2390[0] = *(_OWORD *)((char *)off_49F6D0 + 13304);\n    v259 = *((_DWORD *)off_49F6D0 + 18171);\n    v260 = *((_DWORD *)off_49F6D0 + 18172);\n    v302 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v261 = *(__int64 **)(qword_4F9E30 + 6464);\n    v308 = *v261;\n    v307 = v261[1];\n    v289 = (char *)off_49F6D0 + v288 + 184;\n    v262 = (char *)off_49F6D0 + v294 + 10552;\n    v263 = 0LL;\n    do\n    {\n      v295 = v263;\n      v264 = 2 * v304 + *(_QWORD *)(v308 + 8 * (v263 + v303));\n      v265 = 2 * v304 + *(_QWORD *)(v302 + 8 * (v263 + v303));\n      v266 = *(_QWORD *)(v307 + 8 * (v263 + v303)) + 2 * v304;\n      v267 = 0LL;\n      v268 = 0LL;\n      do\n      {\n        v269 = xmmword_4F32D0[v268 / 2 + v250];\n        v270 = xmmword_4F26D0[v268 / 2 + v250]\n             - (*(_DWORD *)((char *)&xmmword_4F22D0[v268 / 8] + v250 * 4) >> 1)\n             - (xmmword_4F32D0[v268 / 2 + v250] >> 1);\n        v271 = v270 + *(unsigned __int16 *)&v262[v268 - 2048];\n        if ( v271 < 0 )\n          v271 = 0;\n        v272 = *(_DWORD *)((char *)&xmmword_4F22D0[v268 / 8] + v250 * 4)\n             + xmmword_4F26D0[v268 / 2 + v250]\n             - (*(_DWORD *)((char *)&xmmword_4F22D0[v268 / 8] + v250 * 4) >> 1);\n        v273 = v260;\n        if ( v260 >= v271 )\n          v273 = v271;\n        *(_WORD *)(v264 + v267) = v273;\n        v274 = *(unsigned __int16 *)&v289[v267] + v272;\n        if ( v274 < 0 )\n          v274 = 0;\n        v275 = v269 + v270;\n        v276 = v259;\n        if ( v259 >= v274 )\n          v276 = v274;\n        *(_WORD *)(v265 + v267) = v276;\n        v277 = *(unsigned __int16 *)&v262[v268] + v275;\n        if ( v277 < 0 )\n          v277 = 0;\n        v278 = v260;\n        if ( v260 >= v277 )\n          v278 = v277;\n        *(_WORD *)(v266 + v267) = v278;\n        v268 += 32LL;\n        v267 += 2LL;\n      }\n      while ( v267 != 8 );\n      v263 = v295 + 1;\n      ++v250;\n      v289 += 32;\n      v262 += 2;\n    }\n    while ( v295 != 3 );\nLABEL_97:\n    result = v290;\n  }\n  else\n  {\n    v280 = (signed __int64)&v172[128 * (signed __int64)v298 + 47] + 2;\n    v281 = v314 + v320;\n    v282 = qword_4F9EB0 + 8 * v25;\n    v283 = 0LL;\n    do\n    {\n      v284 = *(_QWORD *)(v282 + 2 * v283);\n      *((_WORD *)v172 + v281 + 6300) = *(_WORD *)(v280 + 8 * v283 - 6);\n      v172[v283 / 4 + 3278] = *(unsigned __int16 *)(v284 + 2 * v31) - *(unsigned __int16 *)(v280 + 8 * v283 - 6);\n      *((_WORD *)v172 + v281 + 6316) = *(_WORD *)(v280 + 8 * v283 - 4);\n      v172[v283 / 4 + 3294] = *(unsigned __int16 *)(v284 + 2 * v31 + 2) - *(unsigned __int16 *)(v280 + 8 * v283 - 4);\n      *((_WORD *)v172 + v281 + 6332) = *(_WORD *)(v280 + 8 * v283 - 2);\n      v172[v283 / 4 + 3310] = *(unsigned __int16 *)(v284 + 2 * v31 + 4) - *(unsigned __int16 *)(v280 + 8 * v283 - 2);\n      *((_WORD *)v172 + v281 + 6348) = *(_WORD *)(v280 + 8 * v283);\n      v172[v283 / 4 + 3326] = *(unsigned __int16 *)(v284 + 2 * v31 + 6) - *(unsigned __int16 *)(v280 + 8 * v283);\n      v283 += 4LL;\n      ++v281;\n    }\n    while ( v283 != 16 );\n    result = sub_4045F0(v311, v310, &v329, 1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45cf00L", 
            "funcEndAddr": "0x45f2deL", 
            "funcName": "sub_45CF00"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_45F2E0(unsigned int a1, _DWORD *a2, double a3)\n{\n  _DWORD *v3; // r13\n  int v4; // er15\n  int v5; // ebp\n  int v6; // ebx\n  int v7; // eax\n  int v9; // [rsp+Ch] [rbp-3Ch]\n  double v10; // [rsp+10h] [rbp-38h]\n\n  v3 = a2;\n  v10 = a3;\n  *a2 = (signed int)floor(6.0 * a3 + 0.4999);\n  v4 = sub_45CF00(a1, 0LL, &v9, v10);\n  *v3 += v9;\n  v5 = v4 | (unsigned __int64)sub_45CF00(a1, 1LL, &v9, v10);\n  *v3 += v9;\n  v6 = v5 | (unsigned __int64)sub_45CF00(a1, 2LL, &v9, v10);\n  *v3 += v9;\n  v7 = sub_45CF00(a1, 3LL, &v9, v10);\n  *v3 += v9;\n  return (v6 | v7) != 0;\n}\n", 
            "funcStartAddr": "0x45f2e0L", 
            "funcEndAddr": "0x45f3bdL", 
            "funcName": "sub_45F2E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45F3C0(_DWORD *a1, double a2)\n{\n  unsigned int v2; // ebx\n  unsigned int v3; // er13\n  int v4; // er12\n  int v5; // er14\n  int v6; // ebp\n  int v7; // er14\n  int v8; // er12\n  int v9; // er14\n  int v10; // eax\n  signed int v11; // edx\n  int v12; // er14\n  int v14; // [rsp+Ch] [rbp-4Ch]\n  double v15; // [rsp+10h] [rbp-48h]\n  int v16; // [rsp+1Ch] [rbp-3Ch]\n  _DWORD *v17; // [rsp+20h] [rbp-38h]\n\n  v17 = a1;\n  *a1 = 0;\n  v15 = a2;\n  v16 = (signed int)floor(6.0 * a2 + 0.4999);\n  v2 = 0;\n  v3 = 0;\n  do\n  {\n    v4 = sub_45CF00(v2, 0LL, &v14, v15);\n    v5 = v16 + v14;\n    v6 = v4 | (unsigned __int64)sub_45CF00(v2, 1LL, &v14, v15);\n    v7 = v14 + v5;\n    v8 = v6 | (unsigned __int64)sub_45CF00(v2, 2LL, &v14, v15);\n    v9 = v14 + v7;\n    v10 = sub_45CF00(v2, 3LL, &v14, v15);\n    v11 = 1 << v2;\n    v12 = v14 + v9;\n    if ( !(v8 | v10) )\n      v11 = 0;\n    *v17 += v12;\n    v3 |= v11;\n    ++v2;\n  }\n  while ( v2 != 4 );\n  return v3;\n}\n", 
            "funcStartAddr": "0x45f3c0L", 
            "funcEndAddr": "0x45f4c5L", 
            "funcName": "sub_45F3C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45F4D0(_DWORD *a1, _QWORD *a2, signed int a3, unsigned int a4, unsigned int a5, __int16 a6, __m128 a7, __int16 a8)\n{\n  __int64 v8; // rbx\n  __int64 v9; // r13\n  __int64 v10; // r15\n  __int64 v11; // r14\n  __int64 v12; // r12\n  int v13; // ebp\n  int v14; // er8\n  signed int *v15; // rdi\n  __int64 v16; // rcx\n  signed __int64 v17; // rdx\n  int v18; // ebp\n  __int64 result; // rax\n  __int64 v20; // rcx\n  __int16 v21; // dx\n  __int16 v22; // di\n  int v23; // eax\n  int v24; // er9\n  int v25; // er8\n  __int64 v26; // r8\n  int v27; // er9\n  _DWORD *v28; // rdi\n  bool v29; // zf\n  int v30; // eax\n  int v31; // er10\n  int v32; // ebp\n  int v33; // ST20_4\n  __int64 v34; // r12\n  signed __int64 v35; // r14\n  signed __int64 v36; // rcx\n  int v37; // eax\n  signed __int64 v38; // r15\n  int v39; // eax\n  signed __int64 v40; // r13\n  signed __int64 v41; // rbx\n  signed __int64 v42; // rdx\n  int v43; // eax\n  _DWORD *v44; // rcx\n  __int64 v45; // rsi\n  __int64 v46; // rdi\n  __int64 v47; // rsi\n  __int64 v48; // r8\n  __int64 v49; // rsi\n  int v50; // eax\n  __int64 v51; // rdx\n  __int64 v52; // rsi\n  __int64 v53; // rbx\n  int v54; // eax\n  int v55; // edx\n  __int64 *v56; // rcx\n  __int64 v57; // rsi\n  signed __int64 v58; // rcx\n  char *v59; // r13\n  char *v60; // r11\n  char *v61; // rbx\n  char *v62; // r8\n  __int64 v63; // rdi\n  __int64 v64; // r10\n  char *v65; // rdi\n  __int64 v66; // r12\n  int v67; // er14\n  int v68; // er9\n  int v69; // er11\n  int v70; // er15\n  __int16 v71; // bp\n  int v72; // er15\n  int v73; // er9\n  __int16 v74; // cx\n  int v75; // er9\n  __int16 v76; // cx\n  int v77; // er14\n  _DWORD *v78; // rsi\n  signed int *v79; // rcx\n  __int64 v80; // r8\n  __int64 v81; // rax\n  signed int v82; // er15\n  __int64 v83; // rsi\n  __int64 v84; // r11\n  __int64 v85; // r14\n  __int64 v86; // r8\n  __int64 v87; // r12\n  __int64 v88; // rdi\n  int v89; // er8\n  int v90; // ebx\n  _DWORD *v91; // r12\n  int v92; // er15\n  __int64 v93; // rbx\n  __int64 v94; // rbp\n  _DWORD *v95; // rdi\n  signed __int64 v96; // rsi\n  int v97; // er13\n  __int16 v98; // dx\n  int v99; // er13\n  _DWORD *v100; // rax\n  __int16 v101; // bx\n  int v102; // eax\n  __int16 v103; // bx\n  int v104; // eax\n  __int16 v105; // bx\n  int v106; // eax\n  int v107; // er13\n  __int64 v108; // rbx\n  _DWORD *v109; // rbp\n  int v110; // eax\n  signed __int64 v111; // r14\n  __int64 v112; // rbx\n  __int64 v113; // rdx\n  __int64 v114; // rax\n  __int64 v115; // r11\n  __int64 v116; // r10\n  __int64 v117; // rbp\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  bool v120; // [rsp+Fh] [rbp-149h]\n  __int64 v121; // [rsp+10h] [rbp-148h]\n  int v122; // [rsp+18h] [rbp-140h]\n  __int16 v123; // [rsp+1Ch] [rbp-13Ch]\n  int v124; // [rsp+20h] [rbp-138h]\n  int v125; // [rsp+20h] [rbp-138h]\n  int v126; // [rsp+24h] [rbp-134h]\n  __int64 v127; // [rsp+28h] [rbp-130h]\n  __int64 v128; // [rsp+30h] [rbp-128h]\n  __int64 v129; // [rsp+38h] [rbp-120h]\n  __int64 v130; // [rsp+40h] [rbp-118h]\n  char *v131; // [rsp+48h] [rbp-110h]\n  __int64 v132; // [rsp+50h] [rbp-108h]\n  __int64 v133; // [rsp+58h] [rbp-100h]\n  __int64 v134; // [rsp+60h] [rbp-F8h]\n  __int64 v135; // [rsp+68h] [rbp-F0h]\n  __int64 v136; // [rsp+70h] [rbp-E8h]\n  __int64 v137; // [rsp+78h] [rbp-E0h]\n  char *v138; // [rsp+80h] [rbp-D8h]\n  int v139; // [rsp+8Ch] [rbp-CCh]\n  __int64 v140; // [rsp+90h] [rbp-C8h]\n  _DWORD *v141; // [rsp+98h] [rbp-C0h]\n  _QWORD *v142; // [rsp+A0h] [rbp-B8h]\n  __int64 v143; // [rsp+A8h] [rbp-B0h]\n  unsigned int v144; // [rsp+B4h] [rbp-A4h]\n  __int64 v145; // [rsp+B8h] [rbp-A0h]\n  unsigned __int64 v146; // [rsp+C0h] [rbp-98h]\n  __int64 v147; // [rsp+C8h] [rbp-90h]\n  __int64 v148; // [rsp+D0h] [rbp-88h]\n  __int64 v149; // [rsp+D8h] [rbp-80h]\n  __int64 v150; // [rsp+E0h] [rbp-78h]\n  _DWORD *v151; // [rsp+E8h] [rbp-70h]\n  __int64 v152; // [rsp+F0h] [rbp-68h]\n  __int64 v153; // [rsp+F8h] [rbp-60h]\n  __int64 v154; // [rsp+100h] [rbp-58h]\n  __int64 v155; // [rsp+108h] [rbp-50h]\n  __int64 v156; // [rsp+110h] [rbp-48h]\n  __int64 v157; // [rsp+118h] [rbp-40h]\n  __int64 v158; // [rsp+120h] [rbp-38h]\n\n  v123 = a6;\n  v8 = a5;\n  v9 = a4;\n  v10 = (unsigned int)a3;\n  v146 = a7.m128_u64[0];\n  v141 = a1;\n  v139 = 0;\n  v128 = a3 % 2;\n  v11 = 2 * v128;\n  v129 = a3 / 2;\n  v12 = 2 * v129;\n  v13 = *((_DWORD *)off_49F6D0 + 6) ^ 1;\n  v14 = sub_4323A0(a4, a5);\n  v15 = (signed int *)off_49F6D0;\n  v148 = *((_QWORD *)off_49F6D0 + 1770);\n  v16 = *((_QWORD *)off_49F6D0 + 1771);\n  v17 = 632LL * *((signed int *)off_49F6D0 + 3);\n  v152 = *(signed int *)(v16 + v17);\n  v127 = v9;\n  v18 = v9 | v13;\n  v147 = qword_4F9C40[*((signed int *)dest + 591)];\n  v150 = v16;\n  v149 = v17;\n  *(_DWORD *)(v16 + v17 + 580) = 0;\n  v145 = v8;\n  if ( v18 )\n  {\n    v122 = v14;\n    v140 = (__int64)v15;\n    v120 = v18 == 0;\n    v134 = v12;\n    v135 = v11;\n    v24 = 0;\n    v25 = 0;\n    if ( (unsigned __int16)(v8 | 2) == 2 )\n      v25 = v127;\n    if ( (unsigned __int16)(v8 - 1) < 2u )\n      v24 = v127;\n    v23 = sub_42CF70(&v139, a2, (unsigned int)v10, v8, v25, v24, (__m128i)a7, v123, a8);\nLABEL_11:\n    v26 = 8 * v128;\n    *v141 = v23;\n    v27 = 8 * v129;\n    v28 = off_49F6D0;\n    v29 = *((_DWORD *)off_49F6D0 + 18181) == 0;\n    v129 *= 8LL;\n    v143 = v10;\n    v128 = v26;\n    if ( v29 )\n    {\n      v77 = 0;\n    }\n    else\n    {\n      LODWORD(v137) = v10 + 4;\n      LODWORD(v136) = v10 + 8;\n      v30 = 0;\n      v31 = 0;\n      v32 = 0;\n      do\n      {\n        v33 = v31;\n        LODWORD(v133) = v30;\n        v34 = v27 + 2 * (v31 & 0x7FFFFFFE);\n        v35 = (signed __int64)(signed int)(v26 | v30 & 4) << 6;\n        v28[3278] = *(_DWORD *)((char *)&xmmword_4F46D0[v34] + v35);\n        v36 = ((signed __int64)(signed int)(v26 | v30 & 4) << 6) | 0x40;\n        v37 = *(_DWORD *)((char *)&xmmword_4F46D0[v34] + v36);\n        v130 = v36;\n        v28[3294] = v37;\n        v38 = v35 | 0x80;\n        v28[3310] = *(_DWORD *)((char *)&xmmword_4F46D0[v34] + (v35 | 0x80));\n        v39 = *(_DWORD *)((char *)&xmmword_4F46D0[v34] + (v35 | 0xC0));\n        v131 = (char *)(v35 | 0xC0);\n        v28[3326] = v39;\n        v40 = 4 * v34 | 4;\n        v28[3279] = *(_DWORD *)((char *)xmmword_4F46D0 + v35 + v40);\n        v28[3295] = *(_DWORD *)((char *)xmmword_4F46D0 + v36 + v40);\n        v28[3311] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0x80) + v40);\n        v28[3327] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0xC0) + v40);\n        v41 = 4 * v34 | 8;\n        v28[3280] = *(_DWORD *)((char *)xmmword_4F46D0 + v35 + v41);\n        v28[3296] = *(_DWORD *)((char *)xmmword_4F46D0 + v36 + v41);\n        v28[3312] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0x80) + v41);\n        v28[3328] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0xC0) + v41);\n        v42 = 4 * v34 | 0xC;\n        v132 = v42;\n        v28[3281] = *(_DWORD *)((char *)xmmword_4F46D0 + v35 + v42);\n        v28[3297] = *(_DWORD *)((char *)xmmword_4F46D0 + v36 + v42);\n        v28[3313] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0x80) + v42);\n        v28[3329] = *(_DWORD *)((char *)xmmword_4F46D0 + (v35 | 0xC0) + v42);\n        v43 = sub_45CC80(v137, v31, 0);\n        v44 = off_49F6D0;\n        *(_DWORD *)((char *)&xmmword_4F32D0[v34] + v35) = *((_DWORD *)off_49F6D0 + 3278);\n        v44[3278] = *(_DWORD *)((char *)&xmmword_4F36D0[v34] + v35);\n        v45 = v130;\n        *(_DWORD *)((char *)&xmmword_4F32D0[v34] + v130) = v44[3294];\n        v46 = v45;\n        v44[3294] = *(_DWORD *)((char *)&xmmword_4F36D0[v34] + v45);\n        *(_DWORD *)((char *)&xmmword_4F32D0[v34] + v38) = v44[3310];\n        v44[3310] = *(_DWORD *)((char *)&xmmword_4F36D0[v34] + (v35 | 0x80));\n        v47 = (__int64)v131;\n        *(_DWORD *)((char *)xmmword_4F32D0 + (_QWORD)&v131[4 * v34]) = v44[3326];\n        v44[3326] = *(_DWORD *)((char *)&xmmword_4F36D0[v34] + v47);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v35 + v40) = v44[3279];\n        v44[3279] = *(_DWORD *)((char *)xmmword_4F36D0 + v35 + v40);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v46 + v40) = v44[3295];\n        v44[3295] = *(_DWORD *)((char *)xmmword_4F36D0 + v46 + v40);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v38 + v40) = v44[3311];\n        v44[3311] = *(_DWORD *)((char *)xmmword_4F36D0 + (v35 | 0x80) + v40);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v47 + v40) = v44[3327];\n        v44[3327] = *(_DWORD *)((char *)xmmword_4F36D0 + v47 + v40);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v35 + v41) = v44[3280];\n        v44[3280] = *(_DWORD *)((char *)xmmword_4F36D0 + v35 + v41);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v46 + v41) = v44[3296];\n        v44[3296] = *(_DWORD *)((char *)xmmword_4F36D0 + v46 + v41);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v38 + v41) = v44[3312];\n        v44[3312] = *(_DWORD *)((char *)xmmword_4F36D0 + (v35 | 0x80) + v41);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v47 + v41) = v44[3328];\n        v48 = v47;\n        v44[3328] = *(_DWORD *)((char *)xmmword_4F36D0 + v47 + v41);\n        v49 = v132;\n        *(_DWORD *)((char *)xmmword_4F32D0 + v35 + v132) = v44[3281];\n        v44[3281] = *(_DWORD *)((char *)xmmword_4F36D0 + v35 + v49);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v46 + v49) = v44[3297];\n        v44[3297] = *(_DWORD *)((char *)xmmword_4F36D0 + v46 + v49);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v38 + v49) = v44[3313];\n        v44[3313] = *(_DWORD *)((char *)xmmword_4F36D0 + (v35 | 0x80) + v49);\n        *(_DWORD *)((char *)xmmword_4F32D0 + v48 + v49) = v44[3329];\n        LODWORD(v138) = v43;\n        v44[3329] = *(_DWORD *)((char *)xmmword_4F36D0 + v48 + v49);\n        v50 = sub_45CC80(v136, v33, 1);\n        LODWORD(v26) = v128;\n        v27 = v129;\n        v28 = off_49F6D0;\n        *(_DWORD *)((char *)xmmword_4F22D0 + 4 * v34 + v35) = *((_DWORD *)off_49F6D0 + 3278);\n        v51 = v130;\n        *(_DWORD *)((char *)xmmword_4F22D0 + 4 * v34 + v130) = v28[3294];\n        *(_DWORD *)((char *)xmmword_4F22D0 + 4 * v34 + v38) = v28[3310];\n        v52 = (__int64)v131;\n        *(_DWORD *)((char *)xmmword_4F22D0 + (_QWORD)&v131[4 * v34]) = v28[3326];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v35 + v40) = v28[3279];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v51 + v40) = v28[3295];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v38 + v40) = v28[3311];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v52 + v40) = v28[3327];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v35 + v41) = v28[3280];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v51 + v41) = v28[3296];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v38 + v41) = v28[3312];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v52 + v41) = v28[3328];\n        v53 = v132;\n        *(_DWORD *)((char *)xmmword_4F22D0 + v35 + v132) = v28[3281];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v51 + v53) = v28[3297];\n        *(_DWORD *)((char *)xmmword_4F22D0 + v38 + v53) = v28[3313];\n        v31 = v33 + 1;\n        v32 += v50 + (_DWORD)v138;\n        v30 = v133 + 4;\n        *(_DWORD *)((char *)xmmword_4F22D0 + v52 + v53) = v28[3329];\n      }\n      while ( v33 != 3 );\n      v124 = v32;\n      v54 = v28[18171];\n      v55 = v28[18172];\n      v142 = *(_QWORD **)(qword_4F9E30 + 6424);\n      v56 = *(__int64 **)(qword_4F9E30 + 6464);\n      v158 = *v56;\n      v157 = v56[1];\n      v156 = (signed int)v28[38];\n      v57 = v27;\n      v151 = v28;\n      v155 = (signed int)v28[39];\n      v132 = (signed int)(v26 | 7);\n      v154 = v27 | 7;\n      v153 = (signed int)v26 - 1LL;\n      v58 = (signed __int64)(signed int)v26 << 6;\n      v59 = (char *)xmmword_4F26D0 + v58;\n      v60 = (char *)xmmword_4F22D0 + v58;\n      v61 = (char *)xmmword_4F32D0 + v58;\n      v62 = (char *)xmmword_4EC770 + v58;\n      v63 = v27;\n      do\n      {\n        v136 = v63;\n        v121 = 2 * v156 + *(_QWORD *)(v158 + 8 * (v63 + v155));\n        v133 = 2 * v156 + v142[v63 + v155];\n        v64 = *(_QWORD *)(v157 + 8 * (v63 + v155)) + 2 * v156;\n        v137 = (__int64)v62;\n        v138 = v61;\n        v130 = (__int64)v60;\n        v65 = v60;\n        v131 = v59;\n        v66 = v153;\n        do\n        {\n          v67 = *(_DWORD *)&v61[4 * v57];\n          v68 = *(_DWORD *)&v59[4 * v57] - (*(_DWORD *)&v65[4 * v57] >> 1) - (*(_DWORD *)&v61[4 * v57] >> 1);\n          v69 = v68 + *(_DWORD *)&v62[4 * v57 - 1024];\n          if ( v69 < 0 )\n            v69 = 0;\n          v70 = *(_DWORD *)&v65[4 * v57] + *(_DWORD *)&v59[4 * v57] - (*(_DWORD *)&v65[4 * v57] >> 1);\n          v71 = v55;\n          if ( v55 >= v69 )\n            v71 = v69;\n          *(_WORD *)(v121 + 2 * v66 + 2) = v71;\n          v72 = *(_DWORD *)&v62[4 * v57 - 2048] + v70;\n          if ( v72 < 0 )\n            v72 = 0;\n          v73 = v67 + v68;\n          v74 = v54;\n          if ( v54 >= v72 )\n            v74 = v72;\n          *(_WORD *)(v133 + 2 * v66 + 2) = v74;\n          v75 = *(_DWORD *)&v62[4 * v57] + v73;\n          if ( v75 < 0 )\n            v75 = 0;\n          v76 = v55;\n          if ( v55 >= v75 )\n            v76 = v75;\n          *(_WORD *)(v64 + 2 * v66++ + 2) = v76;\n          v59 += 64;\n          v65 += 64;\n          v61 += 64;\n          v62 += 64;\n        }\n        while ( v66 < v132 );\n        v59 = v131 + 4;\n        v60 = (char *)(v130 + 4);\n        v61 = v138 + 4;\n        v62 = (char *)(v137 + 4);\n        v63 = v136 + 1;\n      }\n      while ( v136 < v154 );\n      LODWORD(v10) = v143;\n      v77 = v124;\n      v28 = v151;\n    }\n    v78 = dest;\n    v125 = v77;\n    if ( *((_DWORD *)dest + 616) != 2 || v28[6] != 1 && (sub_4140B0(v10, -1), v78 = dest, *((_DWORD *)dest + 616) != 2) )\n    {\n      v142 = v78;\n      v79 = (signed int *)off_49F6D0;\n    }\n    else\n    {\n      v79 = (signed int *)off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n      {\n        if ( v78[726] > 0 )\n        {\n          v111 = 0LL;\n          v112 = 0LL;\n          do\n          {\n            sub_4124A0(v111, 8, v10, v127, v123);\n            v113 = *((signed int *)off_49F6D0 + 43);\n            v116 = (signed int)v113 + (signed int)v129 + 7;\n            v117 = v113 + v129 - 1;\n            do\n            {\n              v118 = *(_QWORD *)(qword_4F9EB0 + 8 * v117 + 8);\n              v119 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)off_49F6E8 + 1) + 8 * v111) + 8 * v117 + 8);\n              v114 = v128 + *((signed int *)off_49F6D0 + 42);\n              v115 = *((_QWORD *)off_49F6D0 + 8972);\n              v112 += *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114)))\n                    + (signed __int64)*(signed int *)(v115\n                                                    + 4\n                                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 2)\n                                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 2)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 4)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 4)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 6)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 6)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 8)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 8)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 10)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 10)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 12)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 12)))\n                    + *(signed int *)(v115\n                                    + 4\n                                    * (*(unsigned __int16 *)(v118 + 2 * v114 + 14)\n                                     - (unsigned __int64)*(unsigned __int16 *)(v119 + 2 * v114 + 14)));\n              ++v117;\n            }\n            while ( v117 < v116 );\n            ++v111;\n            v78 = dest;\n          }\n          while ( v111 < *((signed int *)dest + 726) );\n        }\n        v88 = v140;\n        v89 = v122;\n        v90 = v125;\nLABEL_45:\n        v91 = (_DWORD *)(v150 + v149);\n        if ( v78[589] )\n        {\n          v92 = v90;\n          v93 = 48 * v152;\n          v94 = v88;\n          v95 = (_DWORD *)(48 * v152 + v88 + 14176);\n          *(_DWORD *)(v94 + v93 + 14180) = v89;\n          *(_QWORD *)(v94 + v93 + 14216) = sub_40B510;\n          *v95 = 2;\n          v96 = *(_QWORD *)(v148 + 24) + 120LL * *(signed int *)(v147 + 8);\n          (*(void (__fastcall **)(_DWORD *, signed __int64))(v96 + 112))(v95, v96);\n          v97 = *(_DWORD *)(v94 + v93 + 14188);\n          v90 = v92;\n          ++*v91;\n        }\n        else\n        {\n          sub_47FB70(v89, v144, &v126, &v144);\n          v97 = v126;\n        }\n        v98 = v145;\n        v99 = v90 + v97;\n        if ( !v120 )\n        {\n          v100 = off_49F6D0;\n          if ( *((_DWORD *)off_49F6D0 + 18000) >= 2 && (unsigned __int16)(v145 | 2) == 2 )\n          {\n            v101 = v145;\n            v102 = sub_4333C0(v127, v135, v134, 1, v123);\n            v98 = v101;\n            v99 += v102;\n            v100 = off_49F6D0;\n          }\n          if ( v100[18001] >= 2 && (unsigned __int16)(v98 - 1) <= 1u && v100[6] == 1 )\n          {\n            v103 = v98;\n            v104 = sub_4333C0(v127, v135, v134, 0, a8);\n            v98 = v103;\n            v99 += v104;\n          }\n          if ( (unsigned __int16)(v98 | 2) == 2 )\n          {\n            v105 = v98;\n            v106 = sub_433540(v135, v134, (signed int)v135 + 2, (signed int)v134 + 2, v123, 0, v127);\n            v98 = v105;\n            v99 += v106;\n          }\n          if ( (unsigned __int16)(v98 - 1) <= 1u )\n            v107 = (unsigned __int64)sub_433540(v135, v134, (signed int)v135 + 2, (signed int)v134 + 2, a8, 1, v127)\n                 + v99;\n        }\n        result = (__int64)dest;\n        if ( *((_DWORD *)dest + 589) == 1 )\n        {\n          v108 = *(_QWORD *)(v148 + 24) + 120LL * *(signed int *)(v147 + 44) + 8;\n          v126 = sub_401340(v108);\n          v109 = v141;\n          sub_40C110(v143, *v141 > 0, dword_4FA0B8, (__int64)v91, 1LL, v108);\n          v110 = sub_401340(v108);\n          result = (unsigned int)(v110 - v126);\n          v126 = result;\n          if ( !*v109 )\n            return result;\n        }\n        else if ( !*v141 )\n        {\n          return result;\n        }\n        return sub_435000(v143, v127, *(_DWORD *)(v150 + v149 + 572));\n      }\n      v142 = v78;\n    }\n    v80 = v79[38];\n    v81 = *((_QWORD *)v79 + 8972);\n    v132 = qword_4F9EB0;\n    v131 = *(char **)(qword_4F9E30 + 6424);\n    v82 = v79[18181];\n    v83 = (signed int)v129;\n    v130 = v79[39];\n    v138 = (char *)v79[43];\n    v84 = (signed int)v80 + (signed int)v128 + 7;\n    v137 = (signed int)(v129 | 7);\n    v136 = v80 + (signed int)v128 - 1;\n    v85 = 0LL;\n    do\n    {\n      v86 = *(_QWORD *)(v132 + 8LL * (_QWORD)&v138[v83]);\n      v133 = v83;\n      v87 = v136;\n      do\n      {\n        v85 += *(signed int *)(v81\n                             + 4\n                             * (*(unsigned __int16 *)(v86 + 2 * v87 + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)&v131[8 * (v83 + v130)] + 2 * v87 + 2)));\n        if ( v82 )\n          v85 += *(signed int *)(v81\n                               + 4\n                               * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E88 + 8)\n                                                                  + 8LL * (_QWORD)&v138[v83])\n                                                      + 2 * v87\n                                                      + 2)\n                                - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6464)\n                                                                                                + 8LL)\n                                                                                    + 8 * (v83 + v130))\n                                                                        + 2 * v87\n                                                                        + 2)))\n               + (signed __int64)*(signed int *)(v81\n                                               + 4\n                                               * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E88\n                                                                                  + 8LL * (_QWORD)&v138[v83])\n                                                                      + 2 * v87\n                                                                      + 2)\n                                                - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6464) + 8 * (v83 + v130))\n                                                                                        + 2 * v87\n                                                                                        + 2)));\n        ++v87;\n      }\n      while ( v87 < v84 );\n      v83 = v133 + 1;\n    }\n    while ( v133 < v137 );\n    v88 = v140;\n    v89 = v122;\n    v90 = v125;\n    v78 = v142;\n    goto LABEL_45;\n  }\n  result = v11 + v15[36];\n  v20 = v12 + v15[37];\n  v21 = *(_WORD *)(*((_QWORD *)qword_4F9E00 + result) + 2 * v20);\n  if ( v21 >= 0 )\n  {\n    v122 = v14;\n    v140 = (__int64)v15;\n    v120 = 1;\n    v134 = v12;\n    v135 = v11;\n    v22 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)qword_4F9E08 + 8 * result) + 2 * v20);\n    if ( v22 < 0 )\n      v22 = 0;\n    v23 = sub_42CF70(\n            &v139,\n            a2,\n            (unsigned int)v10,\n            v21,\n            0,\n            0,\n            (__m128i)a7,\n            v22,\n            *(_WORD *)(*(_QWORD *)(*((_QWORD *)qword_4F9E08 + 1) + 8 * result) + 2 * v20));\n    goto LABEL_11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x45f4d0L", 
            "funcEndAddr": "0x460438L", 
            "funcName": "sub_45F4D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_460460(signed int a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rcx\n  int v3; // er8\n  int v4; // ebx\n  signed __int64 v5; // rcx\n  __int16 *v6; // rdx\n  signed int v7; // ebx\n  int v8; // edi\n  unsigned int v9; // eax\n  unsigned int v10; // ecx\n  _QWORD *v11; // rsi\n  __int64 v12; // r12\n  __int64 v13; // r8\n  __int64 v14; // r9\n  __int16 v15; // r13\n  int v16; // esi\n  __int64 v17; // r10\n  __int16 v18; // r15\n  __int64 v19; // rax\n  __int64 v20; // rcx\n  int v21; // edx\n  __int16 v22; // di\n  __int16 v23; // bp\n  __int64 v24; // r10\n  __int64 v25; // r8\n  __int16 v26; // bp\n  __int16 v27; // di\n  __int64 v28; // rbx\n  __int64 v29; // rdi\n  __int16 v30; // cx\n  __int16 v31; // si\n  __int16 v32; // cx\n  __int16 v33; // si\n  __int16 v34; // cx\n  __int16 v35; // si\n  __int16 v36; // cx\n  __int16 v37; // si\n  __int16 v38; // cx\n  __int16 v39; // si\n  __int16 v40; // cx\n  __int16 v41; // si\n  _QWORD *v42; // r9\n  signed __int16 *v43; // rdx\n  int v44; // edx\n  __m128i v45; // xmm0\n  __m128i v46; // xmm0\n  __m128i v47; // xmm0\n  signed int v48; // eax\n  _QWORD *v49; // r9\n  int v50; // er10\n  __int64 v51; // r8\n  __int64 *v52; // rsi\n  __int64 v53; // rbx\n  __int64 v54; // rdx\n  __int64 v55; // rcx\n  __int64 v56; // rsi\n  _QWORD *v57; // rbx\n  signed __int16 v58; // si\n  __int64 v59; // rbx\n  __int64 *v60; // rbp\n  __int64 v61; // rdx\n  __int64 v62; // rbp\n  __int16 v63; // ax\n  __int64 v64; // rcx\n  __int64 v65; // rbp\n  __int64 v66; // rdx\n  __int64 v67; // rsi\n  __int64 v68; // rdi\n  __int64 v69; // rcx\n  __int64 v70; // rdi\n  __int64 v71; // rsi\n  __int64 v72; // rbp\n  signed __int64 result; // rax\n  __int64 v74; // rdx\n  __int64 v75; // rcx\n  __int64 v76; // r9\n  __int64 v77; // r13\n  __int64 v78; // r8\n  __int64 v79; // r12\n  __int64 v80; // r14\n  __int64 v81; // r15\n  __int64 v82; // r11\n  __int64 v83; // rsi\n  signed __int64 v84; // rbp\n  signed __int64 v85; // rbx\n  __int64 v86; // rsi\n  __int64 v87; // rsi\n  signed __int64 v88; // rbp\n  signed __int64 v89; // rbx\n  __int64 v90; // rsi\n  __int64 v91; // rsi\n  signed __int64 v92; // rbp\n  signed __int64 v93; // rbx\n  __int64 v94; // rsi\n  __int64 v95; // rsi\n  signed __int64 v96; // rbp\n  signed __int64 v97; // rbx\n  __int64 v98; // rsi\n  __int64 v99; // rsi\n  signed __int64 v100; // rbp\n  signed __int64 v101; // rbx\n  __int64 v102; // rsi\n  __int64 v103; // rsi\n  signed __int64 v104; // rbp\n  signed __int64 v105; // rbx\n  __int64 v106; // rsi\n  __int64 v107; // rsi\n  signed __int64 v108; // rcx\n  signed __int64 v109; // rbx\n  __int64 v110; // rsi\n  __int64 v111; // rsi\n  signed __int64 v112; // rcx\n  signed __int64 v113; // rbp\n  __int64 v114; // rsi\n  __int64 v115; // rcx\n  __int64 v116; // rsi\n  __int64 v117; // r12\n  __int64 v118; // rbp\n  __int64 v119; // rbx\n  __int64 v120; // r15\n  __int64 v121; // rdi\n  __int64 v122; // r14\n  __int64 v123; // r11\n  __int64 v124; // r8\n  __int64 v125; // r10\n  __int64 v126; // r9\n  __int64 v127; // rbp\n  signed __int64 v128; // rax\n  signed __int64 v129; // rsi\n  __int64 v130; // rbp\n  __int64 v131; // rbp\n  signed __int64 v132; // rax\n  signed __int64 v133; // rsi\n  __int64 v134; // rbp\n  __int64 v135; // rbp\n  signed __int64 v136; // rax\n  signed __int64 v137; // rsi\n  __int64 v138; // rbp\n  __int64 v139; // rbp\n  signed __int64 v140; // rax\n  signed __int64 v141; // rsi\n  __int64 v142; // rbp\n  __int64 v143; // rbp\n  signed __int64 v144; // rax\n  signed __int64 v145; // rsi\n  __int64 v146; // rbp\n  __int64 v147; // rbp\n  signed __int64 v148; // rax\n  signed __int64 v149; // rsi\n  __int64 v150; // rbp\n  __int64 v151; // rbx\n  signed __int64 v152; // rax\n  signed __int64 v153; // rsi\n  __int64 v154; // rsi\n  __int64 v155; // rsi\n  signed __int64 v156; // rdi\n  __int64 v157; // rsi\n  signed int v158; // [rsp+Ch] [rbp-7Ch]\n  signed __int16 *v159; // [rsp+10h] [rbp-78h]\n  int v160; // [rsp+1Ch] [rbp-6Ch]\n  int v161; // [rsp+20h] [rbp-68h]\n  __int64 v162; // [rsp+28h] [rbp-60h]\n  __int64 v163; // [rsp+30h] [rbp-58h]\n  int v164; // [rsp+38h] [rbp-50h]\n  int v165; // [rsp+3Ch] [rbp-4Ch]\n  unsigned int v166; // [rsp+40h] [rbp-48h]\n  _QWORD *v167; // [rsp+48h] [rbp-40h]\n  int v168; // [rsp+50h] [rbp-38h]\n\n  v158 = a1;\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  v3 = *((_DWORD *)off_49F6D0 + 6);\n  v4 = 0;\n  v159 = (signed __int16 *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) && *(_DWORD *)(v1 + 632 * v2 + 532) )\n    v4 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  v5 = 632 * v2;\n  *(_DWORD *)(v1 + v5 + 72) = a1;\n  v166 = v4;\n  v164 = v3;\n  if ( a1 == 1 )\n  {\n    v160 = v159[35977];\n    *(_DWORD *)(v1 + v5 + 580) = v160;\nLABEL_7:\n    *(_DWORD *)(v1 + v5 + 488) = word_4F9490[4 * a1];\n    *(_DWORD *)(v1 + v5 + 492) = word_4F9492[4 * a1];\n    *(_DWORD *)(v1 + v5 + 496) = word_4F9494[4 * a1];\n    _mm_storeu_si128((__m128i *)(v1 + v5 + 472), _mm_shuffle_epi32(_mm_cvtsi32_si128(a1), 0));\n    v6 = &word_4F9496[4 * a1];\nLABEL_8:\n    v7 = a1;\n    *(_DWORD *)(v1 + v5 + 500) = *v6;\n    if ( v3 == 1 )\n    {\n      v167 = qword_4F9E08;\n      v163 = qword_4F9E30;\n      v162 = a1;\n      v8 = 0;\n      while ( 1 )\n      {\n        v165 = v8 & 0x7FFFFFFE;\n        v9 = 0;\n        v168 = v8;\n        do\n        {\n          v10 = v165 + (v9 >> 1);\n          if ( v7 != 8 || *((_WORD *)&qword_4F9FB8 + v10) )\n          {\n            if ( v7 == 1 )\n            {\n              if ( v160 )\n              {\n                if ( ((unsigned __int16)word_4F9490[4 * v162 + v10] | 2) == 2\n                  && (unsigned __int16)(word_4F9490[4 * v162 + v10] - 1) <= 1u )\n                {\n                  v11 = *(_QWORD **)(v163 + 6480);\n                  LODWORD(v12) = *((_DWORD *)v159 + 37);\n                  v161 = *((_DWORD *)v159 + 36);\n                  v13 = (signed int)(v9 + v161);\n                  v14 = (signed int)v12 + v8;\n                  *(_WORD *)(*(_QWORD *)(*v11 + 8 * v13) + 2 * v14) = 0;\n                  v15 = 0;\n                  goto LABEL_29;\n                }\n              }\n              else\n              {\n                v160 = 0;\n              }\n            }\n            v17 = v10;\n            v15 = -1;\n            v18 = -1;\n            if ( ((unsigned __int16)word_4F9490[4 * v162 + v17] | 2) == 2 )\n            {\n              if ( v7 != 8 || (v18 = -1, *((_WORD *)&qword_4F9FB8 + v10)) )\n                v18 = word_4F9410[4 * v162 + v17];\n            }\n            v11 = *(_QWORD **)(v163 + 6480);\n            LODWORD(v12) = *((_DWORD *)v159 + 37);\n            v161 = *((_DWORD *)v159 + 36);\n            v13 = (signed int)(v9 + v161);\n            v14 = (signed int)v12 + v8;\n            *(_WORD *)(*(_QWORD *)(*v11 + 8 * v13) + 2 * v14) = v18;\n            if ( (unsigned __int16)(word_4F9490[4 * v162 + v10] - 1) > 1u )\n            {\n              v7 = v158;\n            }\n            else\n            {\n              v7 = v158;\n              if ( v158 != 8 || *((_WORD *)&qword_4F9FB8 + v10) )\n                v15 = word_4F9390[4 * v162 + v17];\n            }\n          }\n          else\n          {\n            v16 = *((_DWORD *)v159 + 36);\n            LODWORD(v12) = *((_DWORD *)v159 + 37);\n            v161 = v16;\n            v13 = (signed int)(v9 + v16);\n            v14 = (signed int)v12 + v8;\n            v11 = *(_QWORD **)(v163 + 6480);\n            *(_WORD *)(*(_QWORD *)(*v11 + 8 * v13) + 2 * v14) = *(_WORD *)(*(_QWORD *)(*v167 + 8 * v13) + 2 * v14);\n            v7 = v158;\n            v15 = *(_WORD *)(*(_QWORD *)(v167[1] + 8 * v13) + 2 * v14);\n          }\nLABEL_29:\n          *(_WORD *)(*(_QWORD *)(v11[1] + 8 * v13) + 2 * v14) = v15;\n          ++v9;\n          v8 = v168;\n        }\n        while ( v9 != 4 );\n        v8 = v168 + 1;\n        if ( v168 == 3 )\n          goto LABEL_82;\n      }\n    }\n    v19 = a1;\n    v20 = **(_QWORD **)(qword_4F9E30 + 6480);\n    v161 = *((_DWORD *)v159 + 36);\n    LODWORD(v12) = *((_DWORD *)v159 + 37);\n    v21 = *((_DWORD *)v159 + 37);\n    v22 = -1;\n    v23 = -1;\n    if ( ((unsigned __int16)word_4F9490[4 * v7] | 2) == 2 )\n      v23 = word_4F9410[4 * v19];\n    v24 = *(_QWORD *)(v20 + 8LL * v161);\n    *(_WORD *)(v24 + 2LL * v21) = v23;\n    if ( ((unsigned __int16)word_4F9490[4 * v7] | 2) == 2 )\n      v22 = word_4F9410[4 * v7];\n    v25 = *(_QWORD *)(v20 + 8LL * v161 + 8);\n    *(_WORD *)(v25 + 2LL * v21) = v22;\n    v26 = -1;\n    v27 = -1;\n    if ( ((unsigned __int16)word_4F9492[4 * v7] | 2) == 2 )\n      v27 = word_4F9412[4 * v19];\n    v28 = *(_QWORD *)(v20 + 8LL * v161 + 16);\n    *(_WORD *)(v28 + 2LL * v21) = v27;\n    if ( ((unsigned __int16)word_4F9492[4 * v19] | 2) == 2 )\n      v26 = word_4F9412[4 * v19];\n    v29 = *(_QWORD *)(v20 + 8LL * v161 + 24);\n    *(_WORD *)(v29 + 2LL * v21) = v26;\n    v30 = -1;\n    v31 = -1;\n    if ( ((unsigned __int16)word_4F9490[4 * v19] | 2) == 2 )\n      v31 = word_4F9410[4 * v19];\n    *(_WORD *)(v24 + 2LL * v21 + 2) = v31;\n    if ( ((unsigned __int16)word_4F9490[4 * v19] | 2) == 2 )\n      v30 = word_4F9410[4 * v19];\n    *(_WORD *)(v25 + 2LL * v21 + 2) = v30;\n    v32 = -1;\n    v33 = -1;\n    if ( ((unsigned __int16)word_4F9492[4 * v19] | 2) == 2 )\n      v33 = word_4F9412[4 * v19];\n    *(_WORD *)(v28 + 2LL * v21 + 2) = v33;\n    if ( ((unsigned __int16)word_4F9492[4 * v19] | 2) == 2 )\n      v32 = word_4F9412[4 * v19];\n    *(_WORD *)(v29 + 2LL * v21 + 2) = v32;\n    v34 = -1;\n    v35 = -1;\n    if ( ((unsigned __int16)word_4F9494[4 * v19] | 2) == 2 )\n      v35 = word_4F9414[4 * v19];\n    *(_WORD *)(v24 + 2LL * v21 + 4) = v35;\n    if ( ((unsigned __int16)word_4F9494[4 * v19] | 2) == 2 )\n      v34 = word_4F9414[4 * v19];\n    *(_WORD *)(v25 + 2LL * v21 + 4) = v34;\n    v36 = -1;\n    v37 = -1;\n    if ( ((unsigned __int16)word_4F9496[4 * v19] | 2) == 2 )\n      v37 = word_4F9416[4 * v19];\n    *(_WORD *)(v28 + 2LL * v21 + 4) = v37;\n    if ( ((unsigned __int16)word_4F9496[4 * v19] | 2) == 2 )\n      v36 = word_4F9416[4 * v19];\n    *(_WORD *)(v29 + 2LL * v21 + 4) = v36;\n    v38 = -1;\n    v39 = -1;\n    if ( ((unsigned __int16)word_4F9494[4 * v19] | 2) == 2 )\n      v39 = word_4F9414[4 * v19];\n    *(_WORD *)(v24 + 2LL * v21 + 6) = v39;\n    if ( ((unsigned __int16)word_4F9494[4 * v19] | 2) == 2 )\n      v38 = word_4F9414[4 * v19];\n    *(_WORD *)(v25 + 2LL * v21 + 6) = v38;\n    v40 = -1;\n    v41 = -1;\n    if ( ((unsigned __int16)word_4F9496[4 * v19] | 2) == 2 )\n      v41 = word_4F9416[4 * v19];\n    *(_WORD *)(v28 + 2LL * v21 + 6) = v41;\n    if ( ((unsigned __int16)word_4F9496[4 * v19] | 2) == 2 )\n      v40 = word_4F9416[4 * v19];\n    *(_WORD *)(v29 + 2LL * v21 + 6) = v40;\n  }\n  else\n  {\n    *(_DWORD *)(v1 + v5 + 580) = 0;\n    v160 = 0;\n    switch ( a1 )\n    {\n      case 0:\n        v42 = qword_4F9E00;\n        *(_DWORD *)(v1 + v5 + 472) = 0;\n        if ( v3 == 1 )\n        {\n          v43 = v159;\n          *(_DWORD *)(v1 + v5 + 488) = *(signed __int16 *)(v42[*((signed int *)v159 + 36)]\n                                                         + 2LL * *((signed int *)v159 + 37));\n          *(_DWORD *)(v1 + v5 + 476) = 0;\n          *(_DWORD *)(v1 + v5 + 492) = *(signed __int16 *)(v42[*((signed int *)v43 + 36) + 2]\n                                                         + 2LL * *((signed int *)v43 + 37));\n          *(_DWORD *)(v1 + v5 + 480) = 0;\n          *(_DWORD *)(v1 + v5 + 496) = *(signed __int16 *)(v42[*((signed int *)v43 + 36)]\n                                                         + 2LL * *((signed int *)v43 + 37)\n                                                         + 4);\n          *(_DWORD *)(v1 + v5 + 484) = 0;\n          v44 = *(signed __int16 *)(v42[*((signed int *)v159 + 36) + 2] + 2LL * *((signed int *)v159 + 37) + 4);\n        }\n        else\n        {\n          *(_QWORD *)(v1 + v5 + 492) = 0LL;\n          _mm_storeu_si128((__m128i *)(v1 + v5 + 476), (__m128i)0LL);\n          v44 = 0;\n        }\n        *(_DWORD *)(v1 + v5 + 500) = v44;\n        break;\n      case 2:\n      case 3:\n        goto LABEL_7;\n      case 8:\n        *(_DWORD *)(v1 + v5 + 488) = word_4F94D0[0];\n        *(_DWORD *)(v1 + v5 + 492) = word_4F94D2;\n        *(_DWORD *)(v1 + v5 + 496) = word_4F94D4;\n        v45 = _mm_loadl_epi64((const __m128i *)&qword_4F9FB8);\n        _mm_storeu_si128((__m128i *)(v1 + v5 + 472), _mm_srai_epi32(_mm_unpacklo_epi16(v45, v45), 0x10u));\n        v160 = 0;\n        v6 = (__int16 *)&unk_4F94D6;\n        goto LABEL_8;\n      case 9:\n        v46 = _mm_load_si128((const __m128i *)&xmmword_489800);\n        goto LABEL_70;\n      case 10:\n        v46 = 0LL;\nLABEL_70:\n        _mm_storeu_si128((__m128i *)(v1 + v5 + 472), v46);\n        _mm_storeu_si128((__m128i *)(v1 + v5 + 488), _mm_cmpeq_epi32(v46, v46));\n        break;\n      case 13:\n        v47 = _mm_load_si128((const __m128i *)&xmmword_489810);\n        _mm_storeu_si128((__m128i *)(v1 + v5 + 472), v47);\n        _mm_storeu_si128((__m128i *)(v1 + v5 + 488), _mm_cmpeq_epi32(v47, v47));\n        *(_DWORD *)(v1 + v5 + 572) = 1;\n        break;\n      default:\n        puts(\"Unsupported mode in SetModesAndRefframeForBlocks!\");\n        exit(1);\n        return result;\n    }\n    v48 = a1;\n    if ( v3 == 1 )\n    {\n      v49 = qword_4F9E08;\n      v50 = 0;\n      v51 = qword_4F9E30;\n      do\n      {\n        if ( v48 )\n        {\n          v52 = *(__int64 **)(v51 + 6480);\n          v53 = *v52;\n          v54 = *((signed int *)v159 + 36);\n          LODWORD(v12) = *((_DWORD *)v159 + 37);\n          v55 = v50 + (signed int)v12;\n          *(_WORD *)(*(_QWORD *)(*v52 + 8 * v54) + 2 * v55) = -1;\n          v56 = v52[1];\n          *(_WORD *)(*(_QWORD *)(v56 + 8 * v54) + 2 * v55) = -1;\n          *(_WORD *)(*(_QWORD *)(v53 + 8 * v54 + 8) + 2 * v55) = -1;\n          *(_WORD *)(*(_QWORD *)(v56 + 8 * v54 + 8) + 2 * v55) = -1;\n          *(_WORD *)(*(_QWORD *)(v53 + 8 * v54 + 16) + 2 * v55) = -1;\n          *(_WORD *)(*(_QWORD *)(v56 + 8 * v54 + 16) + 2 * v55) = -1;\n          *(_WORD *)(*(_QWORD *)(v53 + 8 * v54 + 24) + 2 * v55) = -1;\n          v161 = v54;\n          v57 = (_QWORD *)(v56 + 8 * v54 + 24);\n          v58 = -1;\n        }\n        else\n        {\n          v59 = *((signed int *)v159 + 36);\n          LODWORD(v12) = *((_DWORD *)v159 + 37);\n          v55 = v50 + (signed int)v12;\n          v60 = *(__int64 **)(v51 + 6480);\n          v61 = *v60;\n          *(_WORD *)(*(_QWORD *)(*v60 + 8 * v59) + 2 * v55) = *(_WORD *)(*(_QWORD *)(*v49 + 8 * v59) + 2 * v55);\n          v62 = v60[1];\n          *(_WORD *)(*(_QWORD *)(v62 + 8 * v59) + 2 * v55) = *(_WORD *)(*(_QWORD *)(v49[1] + 8 * v59) + 2 * v55);\n          *(_WORD *)(*(_QWORD *)(v61 + 8 * v59 + 8) + 2 * v55) = *(_WORD *)(*(_QWORD *)(*v49 + 8 * v59 + 8) + 2 * v55);\n          *(_WORD *)(*(_QWORD *)(v62 + 8 * v59 + 8) + 2 * v55) = *(_WORD *)(*(_QWORD *)(v49[1] + 8 * v59 + 8) + 2 * v55);\n          *(_WORD *)(*(_QWORD *)(v61 + 8 * v59 + 16) + 2 * v55) = *(_WORD *)(*(_QWORD *)(*v49 + 8 * v59 + 16) + 2 * v55);\n          *(_WORD *)(*(_QWORD *)(v62 + 8 * v59 + 16) + 2 * v55) = *(_WORD *)(*(_QWORD *)(v49[1] + 8 * v59 + 16) + 2 * v55);\n          *(_WORD *)(*(_QWORD *)(v61 + 8 * v59 + 24) + 2 * v55) = *(_WORD *)(*(_QWORD *)(*v49 + 8 * v59 + 24) + 2 * v55);\n          v58 = *(_WORD *)(*(_QWORD *)(v49[1] + 8 * v59 + 24) + 2 * v55);\n          v161 = v59;\n          v57 = (_QWORD *)(v62 + 8 * v59 + 24);\n        }\n        *(_WORD *)(*v57 + 2 * v55) = v58;\n        ++v50;\n        v48 = a1;\n      }\n      while ( v50 != 4 );\n    }\n    else\n    {\n      v63 = -(a1 != 0);\n      v64 = **(_QWORD **)(qword_4F9E30 + 6480);\n      v65 = *((signed int *)v159 + 36);\n      v12 = *((signed int *)v159 + 37);\n      v66 = *(_QWORD *)(v64 + 8 * v65);\n      *(_WORD *)(v66 + 2 * v12) = v63;\n      v67 = *(_QWORD *)(v64 + 8 * v65 + 8);\n      *(_WORD *)(v67 + 2 * v12) = v63;\n      v68 = *(_QWORD *)(v64 + 8 * v65 + 16);\n      *(_WORD *)(v68 + 2 * v12) = v63;\n      v161 = v65;\n      v69 = *(_QWORD *)(v64 + 8 * v65 + 24);\n      *(_WORD *)(v69 + 2 * v12) = v63;\n      *(_WORD *)(v66 + 2 * v12 + 2) = v63;\n      *(_WORD *)(v67 + 2 * v12 + 2) = v63;\n      *(_WORD *)(v68 + 2 * v12 + 2) = v63;\n      *(_WORD *)(v69 + 2 * v12 + 2) = v63;\n      *(_WORD *)(v66 + 2 * v12 + 4) = v63;\n      *(_WORD *)(v67 + 2 * v12 + 4) = v63;\n      *(_WORD *)(v68 + 2 * v12 + 4) = v63;\n      *(_WORD *)(v69 + 2 * v12 + 4) = v63;\n      *(_WORD *)(v66 + 2 * v12 + 6) = v63;\n      *(_WORD *)(v67 + 2 * v12 + 6) = v63;\n      *(_WORD *)(v68 + 2 * v12 + 6) = v63;\n      *(_WORD *)(v69 + 2 * v12 + 6) = v63;\n    }\n  }\nLABEL_82:\n  v70 = qword_4F9E30;\n  v71 = **(_QWORD **)(qword_4F9E30 + 6480);\n  v72 = **(_QWORD **)(qword_4F9E30 + 6488);\n  result = v161;\n  v74 = (signed int)v12;\n  v75 = *(_QWORD *)(v71 + 8LL * v161);\n  v76 = *(_QWORD *)(v71 + 8LL * v161 + 8);\n  v77 = *(_QWORD *)(v72 + 8LL * v161);\n  v78 = *(_QWORD *)(v72 + 8LL * v161 + 8);\n  v79 = *(_QWORD *)(v71 + 8LL * v161 + 16);\n  v80 = *(_QWORD *)(v72 + 8LL * v161 + 16);\n  v81 = *(_QWORD *)(v71 + 8LL * v161 + 24);\n  v82 = *(_QWORD *)(v72 + 8LL * v161 + 24);\n  v83 = *(signed __int16 *)(v75 + 2 * v74);\n  v84 = -1LL;\n  v85 = -1LL;\n  if ( v83 >= 0 )\n    v85 = *(_QWORD *)(qword_4F9E30 + 264LL * v166 + 8 * v83 + 24);\n  *(_QWORD *)(v77 + 8 * v74) = v85;\n  v86 = *(signed __int16 *)(v76 + 2 * v74);\n  if ( v86 >= 0 )\n    v84 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v86 + 24);\n  *(_QWORD *)(v78 + 8 * v74) = v84;\n  v87 = *(signed __int16 *)(v79 + 2 * v74);\n  v88 = -1LL;\n  v89 = -1LL;\n  if ( v87 >= 0 )\n    v89 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v87 + 24);\n  *(_QWORD *)(v80 + 8 * v74) = v89;\n  v90 = *(signed __int16 *)(v81 + 2 * v74);\n  if ( v90 >= 0 )\n    v88 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v90 + 24);\n  *(_QWORD *)(v82 + 8 * v74) = v88;\n  v91 = *(signed __int16 *)(v75 + 2 * v74 + 2);\n  v92 = -1LL;\n  v93 = -1LL;\n  if ( v91 >= 0 )\n    v93 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v91 + 24);\n  *(_QWORD *)(v77 + 8 * v74 + 8) = v93;\n  v94 = *(signed __int16 *)(v76 + 2 * v74 + 2);\n  if ( v94 >= 0 )\n    v92 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v94 + 24);\n  *(_QWORD *)(v78 + 8 * v74 + 8) = v92;\n  v95 = *(signed __int16 *)(v79 + 2 * v74 + 2);\n  v96 = -1LL;\n  v97 = -1LL;\n  if ( v95 >= 0 )\n    v97 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v95 + 24);\n  *(_QWORD *)(v80 + 8 * v74 + 8) = v97;\n  v98 = *(signed __int16 *)(v81 + 2 * v74 + 2);\n  if ( v98 >= 0 )\n    v96 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v98 + 24);\n  *(_QWORD *)(v82 + 8 * v74 + 8) = v96;\n  v99 = *(signed __int16 *)(v75 + 2 * v74 + 4);\n  v100 = -1LL;\n  v101 = -1LL;\n  if ( v99 >= 0 )\n    v101 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v99 + 24);\n  *(_QWORD *)(v77 + 8 * v74 + 16) = v101;\n  v102 = *(signed __int16 *)(v76 + 2 * v74 + 4);\n  if ( v102 >= 0 )\n    v100 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v102 + 24);\n  *(_QWORD *)(v78 + 8 * v74 + 16) = v100;\n  v103 = *(signed __int16 *)(v79 + 2 * v74 + 4);\n  v104 = -1LL;\n  v105 = -1LL;\n  if ( v103 >= 0 )\n    v105 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v103 + 24);\n  *(_QWORD *)(v80 + 8 * v74 + 16) = v105;\n  v106 = *(signed __int16 *)(v81 + 2 * v74 + 4);\n  if ( v106 >= 0 )\n    v104 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v106 + 24);\n  *(_QWORD *)(v82 + 8 * v74 + 16) = v104;\n  v107 = *(signed __int16 *)(v75 + 2 * v74 + 6);\n  v108 = -1LL;\n  v109 = -1LL;\n  if ( v107 >= 0 )\n    v109 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v107 + 24);\n  *(_QWORD *)(v77 + 8 * v74 + 24) = v109;\n  v110 = *(signed __int16 *)(v76 + 2 * v74 + 6);\n  if ( v110 >= 0 )\n    v108 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v110 + 24);\n  *(_QWORD *)(v78 + 8 * v74 + 24) = v108;\n  v111 = *(signed __int16 *)(v79 + 2 * v74 + 6);\n  v112 = -1LL;\n  v113 = -1LL;\n  if ( v111 >= 0 )\n    v113 = *(_QWORD *)(v70 + 264LL * v166 + 8 * v111 + 24);\n  *(_QWORD *)(v80 + 8 * v74 + 24) = v113;\n  v114 = *(signed __int16 *)(v81 + 2 * v74 + 6);\n  if ( v114 >= 0 )\n    v112 = *(_QWORD *)(264LL * v166 + v70 + 8 * v114 + 24);\n  *(_QWORD *)(v82 + 8 * v74 + 24) = v112;\n  if ( v164 == 1 )\n  {\n    v115 = qword_4F9E30;\n    v116 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL);\n    v117 = v166 | 1;\n    v118 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6488) + 8LL);\n    v119 = *(_QWORD *)(v116 + 8LL * v161);\n    v120 = *(_QWORD *)(v116 + 8LL * v161 + 8);\n    v121 = *(_QWORD *)(v118 + 8LL * v161);\n    v122 = *(_QWORD *)(v118 + 8LL * v161 + 8);\n    v123 = *(_QWORD *)(v116 + 8LL * v161 + 16);\n    v124 = *(_QWORD *)(v118 + 8LL * v161 + 16);\n    v125 = *(_QWORD *)(v116 + 8LL * v161 + 24);\n    v126 = *(_QWORD *)(v118 + 8LL * v161 + 24);\n    v127 = *(signed __int16 *)(v119 + 2 * v74);\n    v128 = -1LL;\n    v129 = -1LL;\n    if ( v127 >= 0 )\n      v129 = *(_QWORD *)(qword_4F9E30 + 264 * v117 + 8 * v127 + 24);\n    *(_QWORD *)(v121 + 8 * v74) = v129;\n    v130 = *(signed __int16 *)(v120 + 2 * v74);\n    if ( v130 >= 0 )\n      v128 = *(_QWORD *)(v115 + 264 * v117 + 8 * v130 + 24);\n    *(_QWORD *)(v122 + 8 * v74) = v128;\n    v131 = *(signed __int16 *)(v123 + 2 * v74);\n    v132 = -1LL;\n    v133 = -1LL;\n    if ( v131 >= 0 )\n      v133 = *(_QWORD *)(v115 + 264 * v117 + 8 * v131 + 24);\n    *(_QWORD *)(v124 + 8 * v74) = v133;\n    v134 = *(signed __int16 *)(v125 + 2 * v74);\n    if ( v134 >= 0 )\n      v132 = *(_QWORD *)(v115 + 264 * v117 + 8 * v134 + 24);\n    *(_QWORD *)(v126 + 8 * v74) = v132;\n    v135 = *(signed __int16 *)(v119 + 2 * v74 + 2);\n    v136 = -1LL;\n    v137 = -1LL;\n    if ( v135 >= 0 )\n      v137 = *(_QWORD *)(v115 + 264 * v117 + 8 * v135 + 24);\n    *(_QWORD *)(v121 + 8 * v74 + 8) = v137;\n    v138 = *(signed __int16 *)(v120 + 2 * v74 + 2);\n    if ( v138 >= 0 )\n      v136 = *(_QWORD *)(v115 + 264 * v117 + 8 * v138 + 24);\n    *(_QWORD *)(v122 + 8 * v74 + 8) = v136;\n    v139 = *(signed __int16 *)(v123 + 2 * v74 + 2);\n    v140 = -1LL;\n    v141 = -1LL;\n    if ( v139 >= 0 )\n      v141 = *(_QWORD *)(v115 + 264 * v117 + 8 * v139 + 24);\n    *(_QWORD *)(v124 + 8 * v74 + 8) = v141;\n    v142 = *(signed __int16 *)(v125 + 2 * v74 + 2);\n    if ( v142 >= 0 )\n      v140 = *(_QWORD *)(v115 + 264 * v117 + 8 * v142 + 24);\n    *(_QWORD *)(v126 + 8 * v74 + 8) = v140;\n    v143 = *(signed __int16 *)(v119 + 2 * v74 + 4);\n    v144 = -1LL;\n    v145 = -1LL;\n    if ( v143 >= 0 )\n      v145 = *(_QWORD *)(v115 + 264 * v117 + 8 * v143 + 24);\n    *(_QWORD *)(v121 + 8 * v74 + 16) = v145;\n    v146 = *(signed __int16 *)(v120 + 2 * v74 + 4);\n    if ( v146 >= 0 )\n      v144 = *(_QWORD *)(v115 + 264 * v117 + 8 * v146 + 24);\n    *(_QWORD *)(v122 + 8 * v74 + 16) = v144;\n    v147 = *(signed __int16 *)(v123 + 2 * v74 + 4);\n    v148 = -1LL;\n    v149 = -1LL;\n    if ( v147 >= 0 )\n      v149 = *(_QWORD *)(v115 + 264 * v117 + 8 * v147 + 24);\n    *(_QWORD *)(v124 + 8 * v74 + 16) = v149;\n    v150 = *(signed __int16 *)(v125 + 2 * v74 + 4);\n    if ( v150 >= 0 )\n      v148 = *(_QWORD *)(v115 + 264 * v117 + 8 * v150 + 24);\n    *(_QWORD *)(v126 + 8 * v74 + 16) = v148;\n    v151 = *(signed __int16 *)(v119 + 2 * v74 + 6);\n    v152 = -1LL;\n    v153 = -1LL;\n    if ( v151 >= 0 )\n      v153 = *(_QWORD *)(v115 + 264 * v117 + 8 * v151 + 24);\n    *(_QWORD *)(v121 + 8 * v74 + 24) = v153;\n    v154 = *(signed __int16 *)(v120 + 2 * v74 + 6);\n    if ( v154 >= 0 )\n      v152 = *(_QWORD *)(v115 + 264 * v117 + 8 * v154 + 24);\n    *(_QWORD *)(v122 + 8 * v74 + 24) = v152;\n    v155 = *(signed __int16 *)(v123 + 2 * v74 + 6);\n    result = -1LL;\n    v156 = -1LL;\n    if ( v155 >= 0 )\n      v156 = *(_QWORD *)(v115 + 264 * v117 + 8 * v155 + 24);\n    *(_QWORD *)(v124 + 8 * v74 + 24) = v156;\n    v157 = *(signed __int16 *)(v125 + 2 * v74 + 6);\n    if ( v157 >= 0 )\n      result = *(_QWORD *)(264 * v117 + v115 + 8 * v157 + 24);\n    *(_QWORD *)(v126 + 8 * v74 + 24) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x460460L", 
            "funcEndAddr": "0x461393L", 
            "funcName": "sub_460460"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4613A0(__int64 a1, int *a2)\n{\n  __int64 *v2; // rbx\n  char *v3; // r12\n  __int64 v4; // rdx\n  __int64 v5; // rcx\n  __int64 v6; // r8\n  signed __int64 v7; // r9\n  signed __int64 v8; // r12\n  __int64 v9; // rbp\n  signed __int64 v10; // r10\n  signed __int64 v11; // r15\n  __int64 v12; // rax\n  unsigned __int64 v13; // r13\n  int v14; // er14\n  int v15; // edi\n  int v16; // ebx\n  int v17; // ecx\n  int v18; // ecx\n  int v19; // edi\n  int v20; // edi\n  int v21; // er8\n  __int64 v22; // r9\n  signed __int64 v23; // r11\n  unsigned __int64 result; // rax\n  char *v25; // rax\n  __int64 v26; // rcx\n  signed __int64 v27; // rdx\n  signed __int64 v28; // rsi\n  __int64 v29; // rbx\n  int v30; // eax\n  int v31; // er8\n  __int64 v32; // r9\n  signed __int64 v33; // r11\n  char *v34; // rcx\n  signed __int64 v35; // rdx\n  signed __int64 v36; // rsi\n  int v37; // eax\n  _DWORD *v38; // rcx\n  unsigned __int64 v39; // rdx\n  int v40; // edx\n  __int64 *v41; // rsi\n  signed __int64 v42; // rbx\n  __int64 v43; // rbp\n  signed __int64 v44; // rsi\n  signed __int64 v45; // r13\n  signed __int64 v46; // r14\n  signed __int64 v47; // rsi\n  __int64 v48; // rdi\n  unsigned __int64 v49; // r15\n  int v50; // er9\n  int v51; // er8\n  int v52; // er11\n  int v53; // er12\n  __int16 v54; // cx\n  int v55; // er12\n  int v56; // er8\n  __int16 v57; // cx\n  int v58; // er8\n  __int16 v59; // cx\n  int *v60; // [rsp+8h] [rbp-80h]\n  signed __int64 v61; // [rsp+8h] [rbp-80h]\n  __int64 v62; // [rsp+10h] [rbp-78h]\n  signed __int64 v63; // [rsp+10h] [rbp-78h]\n  __int64 v64; // [rsp+18h] [rbp-70h]\n  __int64 v65; // [rsp+18h] [rbp-70h]\n  __int64 v66; // [rsp+20h] [rbp-68h]\n  __int64 v67; // [rsp+20h] [rbp-68h]\n  __int64 v68; // [rsp+28h] [rbp-60h]\n  __int64 v69; // [rsp+28h] [rbp-60h]\n  __int64 v70; // [rsp+30h] [rbp-58h]\n  __int64 v71; // [rsp+38h] [rbp-50h]\n  __int64 v72; // [rsp+40h] [rbp-48h]\n  __int64 v73; // [rsp+48h] [rbp-40h]\n  signed __int64 v74; // [rsp+50h] [rbp-38h]\n\n  v60 = a2;\n  v73 = a1;\n  v70 = *(signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3) + 524);\n  v71 = *((signed int *)off_49F6D0 + 38);\n  v72 = *((signed int *)off_49F6D0 + 39);\n  v68 = qword_4F9EB0;\n  v2 = (__int64 *)qword_4F9E88;\n  sub_402AD0();\n  v3 = (char *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18181) || (sub_435E90(a2), v3 = (char *)off_49F6D0, *((_DWORD *)off_49F6D0 + 18181)) )\n  {\n    v66 = *v2;\n    v64 = v2[1];\n    a2 = (int *)&v3[512 * v70 + 10552];\n    v7 = (signed __int64)(v3 + 4792);\n    v8 = (signed __int64)(v3 + 13112);\n    v9 = 0LL;\n    v74 = 2 * v71;\n    v5 = 0LL;\n    do\n    {\n      v62 = v5;\n      v10 = v74 + *(_QWORD *)(v66 + 8 * (v5 + v72));\n      v11 = v74 + *(_QWORD *)(v68 + 8 * (v5 + v72));\n      v4 = v74 + *(_QWORD *)(v64 + 8 * (v5 + v72));\n      v12 = 0LL;\n      v13 = 0LL;\n      do\n      {\n        v6 = LOWORD(a2[v13 / 4 - 512]);\n        v14 = *(unsigned __int16 *)(v10 + v12) - (_DWORD)v6;\n        v15 = *(unsigned __int16 *)(v11 + v12);\n        v16 = *(unsigned __int16 *)(v12 + v7 + ((signed __int64)*v60 << 9));\n        v17 = *(unsigned __int16 *)(v4 + v12) - LOWORD(a2[v13 / 4]) - v14;\n        xmmword_4F46D0[v13 / 2 + v9] = v17;\n        v18 = v14 + (v17 >> 1);\n        v19 = v15 - v16 - v18;\n        xmmword_4F36D0[v13 / 2 + v9] = v19;\n        v20 = v18 + (v19 >> 1);\n        *(_DWORD *)((char *)&xmmword_4F42D0[v13 / 8] + v9 * 4) = v20;\n        *(_DWORD *)(v8 + 2 * v13) = v20;\n        v13 += 32LL;\n        v12 += 2LL;\n      }\n      while ( v13 != 512 );\n      v5 = v62 + 1;\n      a2 = (int *)((char *)a2 + 2);\n      v7 += 32LL;\n      ++v9;\n      v8 += 4LL;\n    }\n    while ( v62 != 15 );\n  }\n  *(_DWORD *)(v73 + 460) = sub_403370(*v60, (__int64)a2, v4, v5, v6);\n  result = (unsigned __int64)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18181) )\n  {\n    v25 = (char *)off_49F6D0 + 13176;\n    v26 = 0LL;\n    v27 = 16LL;\n    do\n    {\n      v28 = 4611686018427387648LL;\n      do\n      {\n        dword_4F2A90[v27 + v28] = *(_DWORD *)&v25[v28 * 4 + 960];\n        *(_DWORD *)&v25[v28 * 4 + 960] = dword_4F4A90[v27 + v28];\n        dword_4F2AD0[v27 + v28] = *(_DWORD *)&v25[v28 * 4 + 1024];\n        *(_DWORD *)&v25[v28 * 4 + 1024] = dword_4F4AD0[v27 + v28];\n        v28 += 32LL;\n      }\n      while ( v28 * 4 );\n      ++v26;\n      v25 += 4;\n      ++v27;\n    }\n    while ( v26 != 16 );\n    v29 = 0LL;\n    v30 = sub_405140(0LL, 0, v21, v22, v23);\n    v34 = (char *)off_49F6D0 + 13176;\n    v35 = 16LL;\n    do\n    {\n      v36 = 4611686018427387648LL;\n      do\n      {\n        dword_4F3690[v35 + v36] = *(_DWORD *)&v34[v36 * 4 + 960];\n        *(_DWORD *)&v34[v36 * 4 + 960] = dword_4F3A90[v35 + v36];\n        xmmword_4F36D0[v35 + v36] = *(_DWORD *)&v34[v36 * 4 + 1024];\n        *(_DWORD *)&v34[v36 * 4 + 1024] = dword_4F3AD0[v35 + v36];\n        v36 += 32LL;\n      }\n      while ( v36 * 4 );\n      ++v29;\n      v34 += 4;\n      ++v35;\n    }\n    while ( v29 != 16 );\n    v37 = sub_405140(1LL, v30, v31, v32, v33);\n    v38 = off_49F6D0;\n    if ( (char *)off_49F6D0 + 14136 <= (char *)xmmword_4F22D0 || (char *)off_49F6D0 + 13112 >= (char *)xmmword_4F26D0 )\n    {\n      xmmword_4F22D0[0] = *(_OWORD *)((char *)off_49F6D0 + 13112);\n      xmmword_4F2310[0] = *(_OWORD *)((char *)off_49F6D0 + 13176);\n      xmmword_4F2350[0] = *(_OWORD *)((char *)off_49F6D0 + 13240);\n      xmmword_4F2390[0] = *(_OWORD *)((char *)off_49F6D0 + 13304);\n      xmmword_4F23D0 = *(_OWORD *)((char *)off_49F6D0 + 13368);\n      xmmword_4F2410 = *(_OWORD *)((char *)off_49F6D0 + 13432);\n      xmmword_4F2450 = *(_OWORD *)((char *)off_49F6D0 + 13496);\n      xmmword_4F2490 = *(_OWORD *)((char *)off_49F6D0 + 13560);\n      xmmword_4F24D0 = *(_OWORD *)((char *)off_49F6D0 + 13624);\n      xmmword_4F2510 = *(_OWORD *)((char *)off_49F6D0 + 13688);\n      xmmword_4F2550 = *(_OWORD *)((char *)off_49F6D0 + 13752);\n      xmmword_4F2590 = *(_OWORD *)((char *)off_49F6D0 + 13816);\n      xmmword_4F25D0 = *(_OWORD *)((char *)off_49F6D0 + 13880);\n      xmmword_4F2610 = *(_OWORD *)((char *)off_49F6D0 + 13944);\n      xmmword_4F2650 = *(_OWORD *)((char *)off_49F6D0 + 14008);\n      xmmword_4F2690 = *(_OWORD *)((char *)off_49F6D0 + 14072);\n      xmmword_4F22E0 = *(_OWORD *)((char *)off_49F6D0 + 13128);\n      xmmword_4F2320 = *(_OWORD *)((char *)off_49F6D0 + 13192);\n      xmmword_4F2360 = *(_OWORD *)((char *)off_49F6D0 + 13256);\n      xmmword_4F23A0 = *(_OWORD *)((char *)off_49F6D0 + 13320);\n      xmmword_4F23E0 = *(_OWORD *)((char *)off_49F6D0 + 13384);\n      xmmword_4F2420 = *(_OWORD *)((char *)off_49F6D0 + 13448);\n      xmmword_4F2460 = *(_OWORD *)((char *)off_49F6D0 + 13512);\n      xmmword_4F24A0 = *(_OWORD *)((char *)off_49F6D0 + 13576);\n      xmmword_4F24E0 = *(_OWORD *)((char *)off_49F6D0 + 13640);\n      xmmword_4F2520 = *(_OWORD *)((char *)off_49F6D0 + 13704);\n      xmmword_4F2560 = *(_OWORD *)((char *)off_49F6D0 + 13768);\n      xmmword_4F25A0 = *(_OWORD *)((char *)off_49F6D0 + 13832);\n      xmmword_4F25E0 = *(_OWORD *)((char *)off_49F6D0 + 13896);\n      xmmword_4F2620 = *(_OWORD *)((char *)off_49F6D0 + 13960);\n      xmmword_4F2660 = *(_OWORD *)((char *)off_49F6D0 + 14024);\n      xmmword_4F26A0 = *(_OWORD *)((char *)off_49F6D0 + 14088);\n      xmmword_4F22F0 = *(_OWORD *)((char *)off_49F6D0 + 13144);\n      xmmword_4F2330 = *(_OWORD *)((char *)off_49F6D0 + 13208);\n      xmmword_4F2370 = *(_OWORD *)((char *)off_49F6D0 + 13272);\n      xmmword_4F23B0 = *(_OWORD *)((char *)off_49F6D0 + 13336);\n      xmmword_4F23F0 = *(_OWORD *)((char *)off_49F6D0 + 13400);\n      xmmword_4F2430 = *(_OWORD *)((char *)off_49F6D0 + 13464);\n      xmmword_4F2470 = *(_OWORD *)((char *)off_49F6D0 + 13528);\n      xmmword_4F24B0 = *(_OWORD *)((char *)off_49F6D0 + 13592);\n      xmmword_4F24F0 = *(_OWORD *)((char *)off_49F6D0 + 13656);\n      xmmword_4F2530 = *(_OWORD *)((char *)off_49F6D0 + 13720);\n      xmmword_4F2570 = *(_OWORD *)((char *)off_49F6D0 + 13784);\n      xmmword_4F25B0 = *(_OWORD *)((char *)off_49F6D0 + 13848);\n      xmmword_4F25F0 = *(_OWORD *)((char *)off_49F6D0 + 13912);\n      xmmword_4F2630 = *(_OWORD *)((char *)off_49F6D0 + 13976);\n      xmmword_4F2670 = *(_OWORD *)((char *)off_49F6D0 + 14040);\n      xmmword_4F26B0 = *(_OWORD *)((char *)off_49F6D0 + 14104);\n      xmmword_4F2300 = *(_OWORD *)((char *)off_49F6D0 + 13160);\n      xmmword_4F2340 = *(_OWORD *)((char *)off_49F6D0 + 13224);\n      xmmword_4F2380 = *(_OWORD *)((char *)off_49F6D0 + 13288);\n      xmmword_4F23C0 = *(_OWORD *)((char *)off_49F6D0 + 13352);\n      xmmword_4F2400 = *(_OWORD *)((char *)off_49F6D0 + 13416);\n      xmmword_4F2440 = *(_OWORD *)((char *)off_49F6D0 + 13480);\n      xmmword_4F2480 = *(_OWORD *)((char *)off_49F6D0 + 13544);\n      xmmword_4F24C0 = *(_OWORD *)((char *)off_49F6D0 + 13608);\n      xmmword_4F2500 = *(_OWORD *)((char *)off_49F6D0 + 13672);\n      xmmword_4F2540 = *(_OWORD *)((char *)off_49F6D0 + 13736);\n      xmmword_4F2580 = *(_OWORD *)((char *)off_49F6D0 + 13800);\n      xmmword_4F25C0 = *(_OWORD *)((char *)off_49F6D0 + 13864);\n      xmmword_4F2600 = *(_OWORD *)((char *)off_49F6D0 + 13928);\n      xmmword_4F2640 = *(_OWORD *)((char *)off_49F6D0 + 13992);\n      xmmword_4F2680 = *(_OWORD *)((char *)off_49F6D0 + 14056);\n      xmmword_4F26C0 = *(_OWORD *)((char *)off_49F6D0 + 14120);\n    }\n    else\n    {\n      v39 = 4611686018427387888LL;\n      do\n      {\n        *(_DWORD *)((char *)xmmword_4F2310 + v39 * 4) = v38[v39 + 3294];\n        *(_DWORD *)((char *)xmmword_4F2350 + v39 * 4) = v38[v39 + 3310];\n        *(_DWORD *)((char *)xmmword_4F2390 + v39 * 4) = v38[v39 + 3326];\n        *(_DWORD *)((char *)&xmmword_4F23D0 + v39 * 4) = v38[v39 + 3342];\n        *(_DWORD *)((char *)&xmmword_4F2410 + v39 * 4) = v38[v39 + 3358];\n        *(_DWORD *)((char *)&xmmword_4F2450 + v39 * 4) = v38[v39 + 3374];\n        *(_DWORD *)((char *)&xmmword_4F2490 + v39 * 4) = v38[v39 + 3390];\n        *(_DWORD *)((char *)&xmmword_4F24D0 + v39 * 4) = v38[v39 + 3406];\n        *(_DWORD *)((char *)&xmmword_4F2510 + v39 * 4) = v38[v39 + 3422];\n        *(_DWORD *)((char *)&xmmword_4F2550 + v39 * 4) = v38[v39 + 3438];\n        *(_DWORD *)((char *)&xmmword_4F2590 + v39 * 4) = v38[v39 + 3454];\n        *(_DWORD *)((char *)&xmmword_4F25D0 + v39 * 4) = v38[v39 + 3470];\n        *(_DWORD *)((char *)&xmmword_4F2610 + v39 * 4) = v38[v39 + 3486];\n        *(_DWORD *)((char *)&xmmword_4F2650 + v39 * 4) = v38[v39 + 3502];\n        *(_DWORD *)((char *)&xmmword_4F2690 + v39 * 4) = v38[v39 + 3518];\n        xmmword_4F26D0[v39] = v38[v39 + 3534];\n        ++v39;\n      }\n      while ( v39 * 4 );\n    }\n    *(_DWORD *)(v73 + 460) += 16 * v37;\n    result = (unsigned int)v38[18171];\n    v40 = v38[18172];\n    v69 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v41 = *(__int64 **)(qword_4F9E30 + 6464);\n    v67 = *v41;\n    v65 = v41[1];\n    v42 = (signed __int64)&v38[128 * v70 + 2638];\n    v63 = (signed __int64)&v38[128 * (signed __int64)*v60 + 1198];\n    v43 = 0LL;\n    v44 = 0LL;\n    do\n    {\n      v61 = v44;\n      v45 = 2 * v71 + *(_QWORD *)(v67 + 8 * (v44 + v72));\n      v46 = 2 * v71 + *(_QWORD *)(v69 + 8 * (v44 + v72));\n      v47 = *(_QWORD *)(v65 + 8 * (v44 + v72)) + 2 * v71;\n      v48 = 0LL;\n      v49 = 0LL;\n      do\n      {\n        v50 = xmmword_4F32D0[v49 / 2 + v43];\n        v51 = xmmword_4F26D0[v49 / 2 + v43]\n            - (*(_DWORD *)((char *)&xmmword_4F22D0[v49 / 8] + v43 * 4) >> 1)\n            - (xmmword_4F32D0[v49 / 2 + v43] >> 1);\n        v52 = v51 + *(unsigned __int16 *)(v42 + v49 - 2048);\n        if ( v52 < 0 )\n          v52 = 0;\n        v53 = *(_DWORD *)((char *)&xmmword_4F22D0[v49 / 8] + v43 * 4)\n            + xmmword_4F26D0[v49 / 2 + v43]\n            - (*(_DWORD *)((char *)&xmmword_4F22D0[v49 / 8] + v43 * 4) >> 1);\n        v54 = v40;\n        if ( v40 >= v52 )\n          v54 = v52;\n        *(_WORD *)(v45 + v48) = v54;\n        v55 = *(unsigned __int16 *)(v63 + v48) + v53;\n        if ( v55 < 0 )\n          v55 = 0;\n        v56 = v50 + v51;\n        v57 = result;\n        if ( (signed int)result >= v55 )\n          v57 = v55;\n        *(_WORD *)(v46 + v48) = v57;\n        v58 = *(unsigned __int16 *)(v42 + v49) + v56;\n        if ( v58 < 0 )\n          v58 = 0;\n        v59 = v40;\n        if ( v40 >= v58 )\n          v59 = v58;\n        *(_WORD *)(v47 + v48) = v59;\n        v49 += 32LL;\n        v48 += 2LL;\n      }\n      while ( v49 != 512 );\n      v44 = v61 + 1;\n      ++v43;\n      v42 += 2LL;\n      v63 += 32LL;\n    }\n    while ( v61 != 15 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4613a0L", 
            "funcEndAddr": "0x461cb2L", 
            "funcName": "sub_4613A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_461CC0(__int64 a1)\n{\n  _DWORD *v1; // r13\n  int v2; // ecx\n  unsigned int v3; // er14\n  __m128i v4; // xmm0\n  __int64 v5; // r12\n  __int64 *v6; // rax\n  __int64 v7; // rbp\n  __int64 v8; // rbx\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r9\n  __int64 v13; // r10\n  __int64 v14; // r11\n  __int64 v15; // rsi\n  __int64 v16; // rdi\n  __int64 v17; // rbp\n  __int64 v18; // rbx\n  __int64 v19; // rcx\n  _QWORD *v20; // r8\n  __int64 v21; // r9\n  __int64 v22; // r14\n  unsigned __int64 **v23; // r10\n  __int64 v24; // r11\n  unsigned __int64 *v25; // r12\n  unsigned __int64 *v26; // r15\n  unsigned __int64 v27; // rdx\n  unsigned __int64 v28; // rdi\n  signed __int64 v29; // rax\n  signed __int64 v30; // rbp\n  signed __int64 v31; // rcx\n  signed __int64 v32; // rsi\n  signed __int64 v33; // rbx\n  unsigned __int64 v34; // rdx\n  unsigned __int64 v35; // rcx\n  signed __int64 v36; // rsi\n  signed __int64 v37; // rbp\n  signed __int64 v38; // rbx\n  signed __int64 v39; // rax\n  signed __int64 v40; // rdi\n  unsigned __int64 *v41; // r15\n  __int64 *v42; // r12\n  unsigned __int64 v43; // rdx\n  __int64 v44; // rdi\n  signed __int64 v45; // rsi\n  signed __int64 v46; // rbp\n  signed __int64 v47; // rcx\n  signed __int64 v48; // rax\n  signed __int64 v49; // rbx\n  unsigned __int64 v50; // rcx\n  unsigned __int64 v51; // rdx\n  signed __int64 v52; // rsi\n  signed __int64 v53; // rbp\n  signed __int64 v54; // rbx\n  signed __int64 v55; // rax\n  signed __int64 v56; // rdi\n  unsigned __int64 *v57; // r15\n  __int64 *v58; // r12\n  unsigned __int64 v59; // rdx\n  __int64 v60; // rdi\n  signed __int64 v61; // rsi\n  signed __int64 v62; // rbp\n  signed __int64 v63; // rcx\n  signed __int64 v64; // rax\n  signed __int64 v65; // rbx\n  unsigned __int64 v66; // rcx\n  unsigned __int64 v67; // rdx\n  signed __int64 v68; // rsi\n  signed __int64 v69; // rbp\n  signed __int64 v70; // rbx\n  signed __int64 v71; // rax\n  signed __int64 v72; // rdi\n  unsigned __int64 *v73; // r10\n  __int64 *v74; // r11\n  unsigned __int64 v75; // rdx\n  __int64 v76; // rbp\n  signed __int64 v77; // rsi\n  signed __int64 v78; // rdi\n  signed __int64 v79; // rcx\n  signed __int64 v80; // rax\n  signed __int64 v81; // rbx\n  unsigned __int64 v82; // rcx\n  unsigned __int64 v83; // rdx\n  signed __int64 v84; // rsi\n  signed __int64 v85; // rbx\n  signed __int64 v86; // rbp\n  signed __int64 v87; // rax\n  signed __int64 v88; // rdi\n  signed __int64 v89; // rax\n  bool v90; // sf\n  unsigned __int8 v91; // of\n  __int16 *v92; // r9\n  __int64 v93; // rdx\n  __int64 v94; // r8\n  __int64 v95; // r10\n  signed __int64 v96; // rbp\n  __int64 v97; // rbx\n  __int64 result; // rax\n  __int64 v99; // rcx\n  __int64 v100; // rdx\n  __int64 v101; // r8\n  __int64 v102; // rdi\n  __int64 v103; // rsi\n  __int64 v104; // r15\n  _QWORD *v105; // rax\n  __int64 v106; // rax\n  __int64 v107; // r9\n  __int64 v108; // r14\n  __int64 v109; // r8\n  __int64 v110; // r10\n  __int64 v111; // rsi\n  __int64 v112; // r11\n  signed __int64 v113; // rbp\n  signed __int64 v114; // rax\n  __int64 v115; // rax\n  __int64 v116; // rax\n  signed __int64 v117; // rbp\n  signed __int64 v118; // rdi\n  __int64 v119; // rax\n  __int64 v120; // rax\n  signed __int64 v121; // rbp\n  signed __int64 v122; // rdi\n  __int64 v123; // rax\n  __int64 v124; // rax\n  signed __int64 v125; // rbp\n  signed __int64 v126; // rdi\n  __int64 v127; // rax\n  __int64 v128; // rax\n  signed __int64 v129; // rbp\n  signed __int64 v130; // rdi\n  __int64 v131; // rax\n  __int64 v132; // rax\n  signed __int64 v133; // rbp\n  signed __int64 v134; // rdi\n  __int64 v135; // rax\n  __int64 v136; // rax\n  signed __int64 v137; // rdi\n  signed __int64 v138; // rbp\n  __int64 v139; // rax\n  __int64 v140; // rax\n  signed __int64 v141; // rdi\n  signed __int64 v142; // rbp\n  __int64 v143; // rax\n  __int64 v144; // rax\n  __int64 v145; // rbp\n  __int64 v146; // rsi\n  __int64 v147; // rdi\n  __int64 v148; // rcx\n  __int64 v149; // r8\n  __int64 v150; // r15\n  __int64 v151; // r14\n  __int64 v152; // r11\n  __int64 v153; // r10\n  __int64 v154; // r9\n  __int64 v155; // rax\n  signed __int64 v156; // rbx\n  signed __int64 v157; // rdi\n  __int64 v158; // rax\n  __int64 v159; // rax\n  signed __int64 v160; // rbx\n  signed __int64 v161; // rdi\n  __int64 v162; // rax\n  __int64 v163; // rax\n  signed __int64 v164; // rbx\n  signed __int64 v165; // rdi\n  __int64 v166; // rax\n  __int64 v167; // rax\n  signed __int64 v168; // rbx\n  signed __int64 v169; // rdi\n  __int64 v170; // rax\n  __int64 v171; // rax\n  signed __int64 v172; // rbx\n  signed __int64 v173; // rdi\n  __int64 v174; // rax\n  __int64 v175; // rax\n  signed __int64 v176; // rbx\n  signed __int64 v177; // rdi\n  __int64 v178; // rax\n  __int64 v179; // rax\n  signed __int64 v180; // rbx\n  signed __int64 v181; // rdi\n  __int64 v182; // rax\n  __int64 v183; // rax\n  signed __int64 v184; // rcx\n  signed __int64 v185; // rdi\n  __int64 v186; // rax\n  int v187; // ebp\n  __int64 v188; // r14\n  int v189; // ebp\n  _QWORD *v190; // r8\n  _DWORD *v191; // r13\n  __int64 v192; // r9\n  unsigned __int64 **v193; // r10\n  __int64 v194; // r11\n  unsigned __int64 *v195; // r12\n  unsigned __int64 *v196; // r15\n  unsigned __int64 v197; // rdx\n  unsigned __int64 v198; // rsi\n  signed __int64 v199; // rax\n  signed __int64 v200; // rbp\n  signed __int64 v201; // rcx\n  signed __int64 v202; // rbx\n  signed __int64 v203; // rdi\n  unsigned __int64 v204; // rdx\n  unsigned __int64 v205; // rcx\n  signed __int64 v206; // rdi\n  signed __int64 v207; // rbp\n  signed __int64 v208; // rbx\n  signed __int64 v209; // rax\n  signed __int64 v210; // rsi\n  unsigned __int64 *v211; // r15\n  __int64 *v212; // r12\n  unsigned __int64 v213; // rdx\n  __int64 v214; // rsi\n  signed __int64 v215; // rbx\n  signed __int64 v216; // rbp\n  signed __int64 v217; // rcx\n  signed __int64 v218; // rax\n  signed __int64 v219; // rdi\n  unsigned __int64 v220; // rcx\n  unsigned __int64 v221; // rdx\n  signed __int64 v222; // rdi\n  signed __int64 v223; // rbp\n  signed __int64 v224; // rbx\n  signed __int64 v225; // rax\n  signed __int64 v226; // rsi\n  unsigned __int64 *v227; // r15\n  __int64 *v228; // r12\n  unsigned __int64 v229; // rdx\n  __int64 v230; // rsi\n  signed __int64 v231; // rbx\n  signed __int64 v232; // rbp\n  signed __int64 v233; // rcx\n  signed __int64 v234; // rax\n  signed __int64 v235; // rdi\n  unsigned __int64 v236; // rcx\n  unsigned __int64 v237; // rdx\n  signed __int64 v238; // rdi\n  signed __int64 v239; // rbp\n  signed __int64 v240; // rbx\n  signed __int64 v241; // rax\n  signed __int64 v242; // rsi\n  unsigned __int64 *v243; // r10\n  __int64 *v244; // r11\n  unsigned __int64 v245; // rdx\n  __int64 v246; // rdi\n  signed __int64 v247; // rbx\n  signed __int64 v248; // rsi\n  signed __int64 v249; // rcx\n  signed __int64 v250; // rax\n  signed __int64 v251; // rbp\n  unsigned __int64 v252; // rcx\n  unsigned __int64 v253; // rdx\n  signed __int64 v254; // rdi\n  signed __int64 v255; // rbx\n  signed __int64 v256; // rbp\n  signed __int64 v257; // rax\n  signed __int64 v258; // rsi\n  __int16 *v259; // r9\n  __int64 v260; // rdx\n  __int64 v261; // r8\n  __int64 v262; // r10\n  signed __int64 v263; // rbp\n  __int64 v264; // rbx\n  __int16 *v265; // r9\n  _DWORD *v266; // rdx\n  __int64 v267; // r10\n  __int64 v268; // r8\n  signed __int64 v269; // rbp\n  __int64 v270; // rbx\n  __int64 v271; // rcx\n  __int64 v272; // rdx\n  __int16 *v273; // r9\n  _DWORD *v274; // rdx\n  __int64 v275; // r10\n  __int64 v276; // r8\n  signed __int64 v277; // rbp\n  __int64 v278; // rbx\n  __int64 v279; // [rsp+8h] [rbp-70h]\n  __int64 v280; // [rsp+8h] [rbp-70h]\n  __int64 v281; // [rsp+10h] [rbp-68h]\n  unsigned int v282[3]; // [rsp+18h] [rbp-60h]\n  __int64 v283; // [rsp+18h] [rbp-60h]\n  int v284; // [rsp+24h] [rbp-54h]\n  __int64 *v285; // [rsp+28h] [rbp-50h]\n  _QWORD *v286; // [rsp+30h] [rbp-48h]\n  __int64 v287; // [rsp+40h] [rbp-38h]\n\n  v1 = off_49F6D0;\n  v2 = *((_DWORD *)off_49F6D0 + 6);\n  v3 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) && *(_DWORD *)(a1 + 532) )\n    v3 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  v281 = a1;\n  if ( *(_DWORD *)(a1 + 572) )\n  {\n    *(_OWORD *)(a1 + 472) = xmmword_4F9C60;\n    v4 = _mm_loadl_epi64((const __m128i *)&qword_4F9FD0);\n    _mm_storeu_si128((__m128i *)(a1 + 488), _mm_srai_epi32(_mm_unpacklo_epi16(v4, v4), 0x10u));\n    v5 = qword_4F9E30;\n    v6 = *(__int64 **)(qword_4F9E30 + 6480);\n    v7 = *v6;\n    v8 = (signed int)v1[36];\n    v9 = (signed int)v1[37];\n    v284 = v2;\n    if ( v2 == 1 )\n    {\n      v10 = v6[1];\n      v11 = *(_QWORD *)(v7 + 8 * v8);\n      *(_WORD *)(v11 + 2 * v9) = word_4F9FC8[0];\n      v12 = *(_QWORD *)(v10 + 8 * v8);\n      *(_WORD *)(v12 + 2 * v9) = word_4F9FC0[0];\n      v13 = *(_QWORD *)(v7 + 8 * v8 + 8);\n      *(_WORD *)(v13 + 2 * v9) = word_4F9FC8[0];\n      v14 = *(_QWORD *)(v10 + 8 * v8 + 8);\n      *(_WORD *)(v14 + 2 * v9) = word_4F9FC0[0];\n      v15 = *(_QWORD *)(v7 + 8 * v8 + 16);\n      *(_WORD *)(v15 + 2 * v9) = word_4F9FCA;\n      v16 = *(_QWORD *)(v10 + 8 * v8 + 16);\n      *(_WORD *)(v16 + 2 * v9) = word_4F9FC2;\n      v17 = *(_QWORD *)(v7 + 8 * v8 + 24);\n      *(_WORD *)(v17 + 2 * v9) = word_4F9FCA;\n      v18 = *(_QWORD *)(v10 + 8 * v8 + 24);\n      *(_WORD *)(v18 + 2 * v9) = word_4F9FC2;\n      *(_WORD *)(v11 + 2 * v9 + 2) = word_4F9FC8[0];\n      *(_WORD *)(v12 + 2 * v9 + 2) = word_4F9FC0[0];\n      *(_WORD *)(v13 + 2 * v9 + 2) = word_4F9FC8[0];\n      *(_WORD *)(v14 + 2 * v9 + 2) = word_4F9FC0[0];\n      *(_WORD *)(v15 + 2 * v9 + 2) = word_4F9FCA;\n      *(_WORD *)(v16 + 2 * v9 + 2) = word_4F9FC2;\n      *(_WORD *)(v17 + 2 * v9 + 2) = word_4F9FCA;\n      *(_WORD *)(v18 + 2 * v9 + 2) = word_4F9FC2;\n      *(_WORD *)(v11 + 2 * v9 + 4) = word_4F9FCC;\n      *(_WORD *)(v12 + 2 * v9 + 4) = word_4F9FC4;\n      *(_WORD *)(v13 + 2 * v9 + 4) = word_4F9FCC;\n      *(_WORD *)(v14 + 2 * v9 + 4) = word_4F9FC4;\n      *(_WORD *)(v15 + 2 * v9 + 4) = word_4F9FCE;\n      *(_WORD *)(v16 + 2 * v9 + 4) = word_4F9FC6;\n      *(_WORD *)(v17 + 2 * v9 + 4) = word_4F9FCE;\n      *(_WORD *)(v18 + 2 * v9 + 4) = word_4F9FC6;\n      *(_WORD *)(v11 + 2 * v9 + 6) = word_4F9FCC;\n      *(_WORD *)(v12 + 2 * v9 + 6) = word_4F9FC4;\n      *(_WORD *)(v13 + 2 * v9 + 6) = word_4F9FCC;\n      *(_WORD *)(v14 + 2 * v9 + 6) = word_4F9FC4;\n      *(_WORD *)(v15 + 2 * v9 + 6) = word_4F9FCE;\n      *(_WORD *)(v16 + 2 * v9 + 6) = word_4F9FC6;\n      *(_WORD *)(v17 + 2 * v9 + 6) = word_4F9FCE;\n      *(_WORD *)(v18 + 2 * v9 + 6) = word_4F9FC6;\n      v5 = qword_4F9E30;\n      v285 = *(__int64 **)(qword_4F9E30 + 6480);\n      v7 = *v285;\n      v8 = (signed int)v1[36];\n      v19 = *(_QWORD *)(*v285 + 8 * v8);\n      v9 = (signed int)v1[37];\n    }\n    else\n    {\n      v285 = *(__int64 **)(qword_4F9E30 + 6480);\n      v19 = *(_QWORD *)(v7 + 8 * v8);\n      *(_WORD *)(v19 + 2 * v9) = word_4F9FC8[0];\n      v101 = *(_QWORD *)(v7 + 8 * v8 + 8);\n      *(_WORD *)(v101 + 2 * v9) = word_4F9FC8[0];\n      v102 = *(_QWORD *)(v7 + 8 * v8 + 16);\n      *(_WORD *)(v102 + 2 * v9) = word_4F9FCA;\n      v103 = *(_QWORD *)(v7 + 8 * v8 + 24);\n      *(_WORD *)(v103 + 2 * v9) = word_4F9FCA;\n      *(_WORD *)(v19 + 2 * v9 + 2) = word_4F9FC8[0];\n      *(_WORD *)(v101 + 2 * v9 + 2) = word_4F9FC8[0];\n      *(_WORD *)(v102 + 2 * v9 + 2) = word_4F9FCA;\n      *(_WORD *)(v103 + 2 * v9 + 2) = word_4F9FCA;\n      *(_WORD *)(v19 + 2 * v9 + 4) = word_4F9FCC;\n      *(_WORD *)(v101 + 2 * v9 + 4) = word_4F9FCC;\n      *(_WORD *)(v102 + 2 * v9 + 4) = word_4F9FCE;\n      *(_WORD *)(v103 + 2 * v9 + 4) = word_4F9FCE;\n      *(_WORD *)(v19 + 2 * v9 + 6) = word_4F9FCC;\n      *(_WORD *)(v101 + 2 * v9 + 6) = word_4F9FCC;\n      *(_WORD *)(v102 + 2 * v9 + 6) = word_4F9FCE;\n      *(_WORD *)(v103 + 2 * v9 + 6) = word_4F9FCE;\n    }\n    v282[0] = v3;\n    v104 = v3;\n    v105 = *(_QWORD **)(v5 + 6488);\n    v286 = v105;\n    v106 = *v105;\n    v107 = *(_QWORD *)(v106 + 8 * v8);\n    v108 = *(_QWORD *)(v106 + 8 * v8 + 8);\n    v279 = *(_QWORD *)(v7 + 8 * v8 + 8);\n    v109 = *(_QWORD *)(v7 + 8 * v8 + 16);\n    v110 = *(_QWORD *)(v106 + 8 * v8 + 16);\n    v287 = *(_QWORD *)(v7 + 8 * v8 + 24);\n    v111 = *(_QWORD *)(v106 + 8 * v8 + 24);\n    v112 = *(signed __int16 *)(v19 + 2 * v9);\n    v113 = -1LL;\n    v114 = -1LL;\n    if ( v112 >= 0 )\n      v114 = *(_QWORD *)(v5 + 264 * v104 + 8 * v112 + 24);\n    *(_QWORD *)(v107 + 8 * v9) = v114;\n    v115 = *(signed __int16 *)(v279 + 2 * v9);\n    if ( v115 >= 0 )\n      v113 = *(_QWORD *)(v5 + 264 * v104 + 8 * v115 + 24);\n    *(_QWORD *)(v108 + 8 * v9) = v113;\n    v116 = *(signed __int16 *)(v109 + 2 * v9);\n    v117 = -1LL;\n    v118 = -1LL;\n    if ( v116 >= 0 )\n      v118 = *(_QWORD *)(v5 + 264 * v104 + 8 * v116 + 24);\n    *(_QWORD *)(v110 + 8 * v9) = v118;\n    v119 = *(signed __int16 *)(v287 + 2 * v9);\n    if ( v119 >= 0 )\n      v117 = *(_QWORD *)(v5 + 264 * v104 + 8 * v119 + 24);\n    *(_QWORD *)(v111 + 8 * v9) = v117;\n    v120 = *(signed __int16 *)(v19 + 2 * v9 + 2);\n    v121 = -1LL;\n    v122 = -1LL;\n    if ( v120 >= 0 )\n      v122 = *(_QWORD *)(v5 + 264 * v104 + 8 * v120 + 24);\n    *(_QWORD *)(v107 + 8 * v9 + 8) = v122;\n    v123 = *(signed __int16 *)(v279 + 2 * v9 + 2);\n    if ( v123 >= 0 )\n      v121 = *(_QWORD *)(v5 + 264 * v104 + 8 * v123 + 24);\n    *(_QWORD *)(v108 + 8 * v9 + 8) = v121;\n    v124 = *(signed __int16 *)(v109 + 2 * v9 + 2);\n    v125 = -1LL;\n    v126 = -1LL;\n    if ( v124 >= 0 )\n      v126 = *(_QWORD *)(v5 + 264 * v104 + 8 * v124 + 24);\n    *(_QWORD *)(v110 + 8 * v9 + 8) = v126;\n    v127 = *(signed __int16 *)(v287 + 2 * v9 + 2);\n    if ( v127 >= 0 )\n      v125 = *(_QWORD *)(v5 + 264 * v104 + 8 * v127 + 24);\n    *(_QWORD *)(v111 + 8 * v9 + 8) = v125;\n    v128 = *(signed __int16 *)(v19 + 2 * v9 + 4);\n    v129 = -1LL;\n    v130 = -1LL;\n    if ( v128 >= 0 )\n      v130 = *(_QWORD *)(v5 + 264 * v104 + 8 * v128 + 24);\n    *(_QWORD *)(v107 + 8 * v9 + 16) = v130;\n    v131 = *(signed __int16 *)(v279 + 2 * v9 + 4);\n    if ( v131 >= 0 )\n      v129 = *(_QWORD *)(v5 + 264 * v104 + 8 * v131 + 24);\n    *(_QWORD *)(v108 + 8 * v9 + 16) = v129;\n    v132 = *(signed __int16 *)(v109 + 2 * v9 + 4);\n    v133 = -1LL;\n    v134 = -1LL;\n    if ( v132 >= 0 )\n      v134 = *(_QWORD *)(v5 + 264 * v104 + 8 * v132 + 24);\n    *(_QWORD *)(v110 + 8 * v9 + 16) = v134;\n    v135 = *(signed __int16 *)(v287 + 2 * v9 + 4);\n    if ( v135 >= 0 )\n      v133 = *(_QWORD *)(v5 + 264 * v104 + 8 * v135 + 24);\n    *(_QWORD *)(v111 + 8 * v9 + 16) = v133;\n    v136 = *(signed __int16 *)(v19 + 2 * v9 + 6);\n    v137 = -1LL;\n    v138 = -1LL;\n    if ( v136 >= 0 )\n      v138 = *(_QWORD *)(v5 + 264 * v104 + 8 * v136 + 24);\n    *(_QWORD *)(v107 + 8 * v9 + 24) = v138;\n    v139 = *(signed __int16 *)(v279 + 2 * v9 + 6);\n    if ( v139 >= 0 )\n      v137 = *(_QWORD *)(v5 + 264 * v104 + 8 * v139 + 24);\n    *(_QWORD *)(v108 + 8 * v9 + 24) = v137;\n    v140 = *(signed __int16 *)(v109 + 2 * v9 + 6);\n    v141 = -1LL;\n    v142 = -1LL;\n    if ( v140 >= 0 )\n      v142 = *(_QWORD *)(v5 + 264 * v104 + 8 * v140 + 24);\n    *(_QWORD *)(v110 + 8 * v9 + 24) = v142;\n    v143 = *(signed __int16 *)(v287 + 2 * v9 + 6);\n    if ( v143 >= 0 )\n      v141 = *(_QWORD *)(v5 + 264 * v104 + 8 * v143 + 24);\n    *(_QWORD *)(v111 + 8 * v9 + 24) = v141;\n    if ( v284 == 1 )\n    {\n      v144 = v285[1];\n      v145 = v282[0] | 1;\n      v146 = v286[1];\n      v147 = *(_QWORD *)(v144 + 8 * v8);\n      v148 = *(_QWORD *)(v144 + 8 * v8 + 8);\n      v149 = *(_QWORD *)(v146 + 8 * v8);\n      v150 = v282[0] | 1;\n      v151 = *(_QWORD *)(v146 + 8 * v8 + 8);\n      v152 = *(_QWORD *)(v144 + 8 * v8 + 16);\n      v153 = *(_QWORD *)(v146 + 8 * v8 + 16);\n      v283 = *(_QWORD *)(v144 + 8 * v8 + 24);\n      v154 = *(_QWORD *)(v146 + 8 * v8 + 24);\n      v280 = v147;\n      v155 = *(signed __int16 *)(v147 + 2 * v9);\n      v156 = -1LL;\n      v157 = -1LL;\n      if ( v155 >= 0 )\n        v157 = *(_QWORD *)(v5 + 264 * v145 + 8 * v155 + 24);\n      *(_QWORD *)(v149 + 8 * v9) = v157;\n      v158 = *(signed __int16 *)(v148 + 2 * v9);\n      if ( v158 >= 0 )\n        v156 = *(_QWORD *)(v5 + 264 * v145 + 8 * v158 + 24);\n      *(_QWORD *)(v151 + 8 * v9) = v156;\n      v159 = *(signed __int16 *)(v152 + 2 * v9);\n      v160 = -1LL;\n      v161 = -1LL;\n      if ( v159 >= 0 )\n        v161 = *(_QWORD *)(v5 + 264 * v145 + 8 * v159 + 24);\n      *(_QWORD *)(v153 + 8 * v9) = v161;\n      v162 = *(signed __int16 *)(v283 + 2 * v9);\n      if ( v162 >= 0 )\n        v160 = *(_QWORD *)(v5 + 264 * v150 + 8 * v162 + 24);\n      *(_QWORD *)(v154 + 8 * v9) = v160;\n      v163 = *(signed __int16 *)(v280 + 2 * v9 + 2);\n      v164 = -1LL;\n      v165 = -1LL;\n      if ( v163 >= 0 )\n        v165 = *(_QWORD *)(v5 + 264 * v150 + 8 * v163 + 24);\n      *(_QWORD *)(v149 + 8 * v9 + 8) = v165;\n      v166 = *(signed __int16 *)(v148 + 2 * v9 + 2);\n      if ( v166 >= 0 )\n        v164 = *(_QWORD *)(v5 + 264 * v150 + 8 * v166 + 24);\n      *(_QWORD *)(v151 + 8 * v9 + 8) = v164;\n      v167 = *(signed __int16 *)(v152 + 2 * v9 + 2);\n      v168 = -1LL;\n      v169 = -1LL;\n      if ( v167 >= 0 )\n        v169 = *(_QWORD *)(v5 + 264 * v150 + 8 * v167 + 24);\n      *(_QWORD *)(v153 + 8 * v9 + 8) = v169;\n      v170 = *(signed __int16 *)(v283 + 2 * v9 + 2);\n      if ( v170 >= 0 )\n        v168 = *(_QWORD *)(v5 + 264 * v150 + 8 * v170 + 24);\n      *(_QWORD *)(v154 + 8 * v9 + 8) = v168;\n      v171 = *(signed __int16 *)(v280 + 2 * v9 + 4);\n      v172 = -1LL;\n      v173 = -1LL;\n      if ( v171 >= 0 )\n        v173 = *(_QWORD *)(v5 + 264 * v150 + 8 * v171 + 24);\n      *(_QWORD *)(v149 + 8 * v9 + 16) = v173;\n      v174 = *(signed __int16 *)(v148 + 2 * v9 + 4);\n      if ( v174 >= 0 )\n        v172 = *(_QWORD *)(v5 + 264 * v150 + 8 * v174 + 24);\n      *(_QWORD *)(v151 + 8 * v9 + 16) = v172;\n      v175 = *(signed __int16 *)(v152 + 2 * v9 + 4);\n      v176 = -1LL;\n      v177 = -1LL;\n      if ( v175 >= 0 )\n        v177 = *(_QWORD *)(v5 + 264 * v150 + 8 * v175 + 24);\n      *(_QWORD *)(v153 + 8 * v9 + 16) = v177;\n      v178 = *(signed __int16 *)(v283 + 2 * v9 + 4);\n      if ( v178 >= 0 )\n        v176 = *(_QWORD *)(v5 + 264 * v150 + 8 * v178 + 24);\n      *(_QWORD *)(v154 + 8 * v9 + 16) = v176;\n      v179 = *(signed __int16 *)(v280 + 2 * v9 + 6);\n      v180 = -1LL;\n      v181 = -1LL;\n      if ( v179 >= 0 )\n        v181 = *(_QWORD *)(v5 + 264 * v150 + 8 * v179 + 24);\n      *(_QWORD *)(v149 + 8 * v9 + 24) = v181;\n      v182 = *(signed __int16 *)(v148 + 2 * v9 + 6);\n      if ( v182 >= 0 )\n        v180 = *(_QWORD *)(v5 + 264 * v150 + 8 * v182 + 24);\n      *(_QWORD *)(v151 + 8 * v9 + 24) = v180;\n      v183 = *(signed __int16 *)(v152 + 2 * v9 + 6);\n      v184 = -1LL;\n      v185 = -1LL;\n      if ( v183 >= 0 )\n        v185 = *(_QWORD *)(v5 + 264 * v150 + 8 * v183 + 24);\n      *(_QWORD *)(v153 + 8 * v9 + 24) = v185;\n      v186 = *(signed __int16 *)(v283 + 2 * v9 + 6);\n      if ( v186 >= 0 )\n        v184 = *(_QWORD *)(264 * v150 + v5 + 8 * v186 + 24);\n      *(_QWORD *)(v154 + 8 * v9 + 24) = v184;\n    }\n    v187 = v1[6] == 1;\n    v188 = 0LL;\n    sub_4684A0(1, 0, (unsigned int)xmmword_4F9C60, word_4F9FC8[0], word_4F9FC0[0], (signed __int16)qword_4F9FD0, v187);\n    sub_4684A0(1, 1u, DWORD1(xmmword_4F9C60), word_4F9FCA, word_4F9FC2, SWORD1(qword_4F9FD0), v187);\n    sub_4684A0(1, 2u, DWORD2(xmmword_4F9C60), word_4F9FCC, word_4F9FC4, SWORD2(qword_4F9FD0), v187);\n    sub_4684A0(1, 3u, HIDWORD(xmmword_4F9C60), word_4F9FCE, word_4F9FC6, SHIWORD(qword_4F9FD0), v187);\n    v189 = *((_DWORD *)off_49F6D0 + 6) == 1;\n    sub_468C40(0, 0, (unsigned int)xmmword_4F9C60, word_4F9FC8[0], word_4F9FC0[0], (signed __int16)qword_4F9FD0, v189);\n    sub_468C40(0, 1u, DWORD1(xmmword_4F9C60), word_4F9FCA, word_4F9FC2, SWORD1(qword_4F9FD0), v189);\n    sub_468C40(0, 2u, DWORD2(xmmword_4F9C60), word_4F9FCC, word_4F9FC4, SWORD2(qword_4F9FD0), v189);\n    sub_468C40(0, 3u, HIDWORD(xmmword_4F9C60), word_4F9FCE, word_4F9FC6, SHIWORD(qword_4F9FD0), v189);\n    v190 = qword_4A0130;\n    v191 = off_49F6D0;\n    v192 = *((_QWORD *)off_49F6D0 + 1767);\n    do\n    {\n      v193 = (unsigned __int64 **)v190[v188];\n      v194 = *(_QWORD *)(v192 + 8 * v188);\n      v195 = *v193;\n      v196 = *(unsigned __int64 **)v194;\n      v197 = **v193;\n      v198 = **(_QWORD **)v194;\n      if ( v198 >= v197 + 260 || v197 >= v198 + 260 )\n      {\n        *(_OWORD *)v198 = *(_OWORD *)v197;\n        *(_OWORD *)(v198 + 16) = *(_OWORD *)(v197 + 16);\n        *(_OWORD *)(v198 + 32) = *(_OWORD *)(v197 + 32);\n        *(_OWORD *)(v198 + 48) = *(_OWORD *)(v197 + 48);\n        *(_OWORD *)(v198 + 64) = *(_OWORD *)(v197 + 64);\n        *(_OWORD *)(v198 + 80) = *(_OWORD *)(v197 + 80);\n        *(_OWORD *)(v198 + 96) = *(_OWORD *)(v197 + 96);\n        *(_OWORD *)(v198 + 112) = *(_OWORD *)(v197 + 112);\n        *(_OWORD *)(v198 + 128) = *(_OWORD *)(v197 + 128);\n        *(_OWORD *)(v198 + 144) = *(_OWORD *)(v197 + 144);\n        *(_OWORD *)(v198 + 160) = *(_OWORD *)(v197 + 160);\n        *(_OWORD *)(v198 + 176) = *(_OWORD *)(v197 + 176);\n        *(_OWORD *)(v198 + 192) = *(_OWORD *)(v197 + 192);\n        *(_OWORD *)(v198 + 208) = *(_OWORD *)(v197 + 208);\n        *(_OWORD *)(v198 + 224) = *(_OWORD *)(v197 + 224);\n        _mm_storeu_si128((__m128i *)(v198 + 240), _mm_loadu_si128((const __m128i *)(v197 + 240)));\n        v199 = 64LL;\n      }\n      else\n      {\n        v199 = 0LL;\n      }\n      v200 = v199 - 64;\n      v201 = -1LL;\n      v202 = v199;\n      do\n      {\n        *(_DWORD *)(v198 + 4 * v202) = *(_DWORD *)(v197 + 4 * v202);\n        v203 = v200;\n        ++v202;\n        ++v200;\n        ++v201;\n      }\n      while ( v201 );\n      if ( v199 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v198 + 4 * v203 + 260) = *(_DWORD *)(v197 + 4 * v203 + 260);\n          *(_DWORD *)(v198 + 4 * v203 + 264) = *(_DWORD *)(v197 + 4 * v203 + 264);\n          *(_DWORD *)(v198 + 4 * v203 + 268) = *(_DWORD *)(v197 + 4 * v203 + 268);\n          *(_DWORD *)(v198 + 4 * v203 + 272) = *(_DWORD *)(v197 + 4 * v203 + 272);\n          v203 += 4LL;\n        }\n        while ( v203 );\n      }\n      v204 = v195[1];\n      v205 = v196[1];\n      if ( v205 >= v204 + 260 || v204 >= v205 + 260 )\n      {\n        *(_OWORD *)v205 = *(_OWORD *)v204;\n        *(_OWORD *)(v205 + 16) = *(_OWORD *)(v204 + 16);\n        *(_OWORD *)(v205 + 32) = *(_OWORD *)(v204 + 32);\n        *(_OWORD *)(v205 + 48) = *(_OWORD *)(v204 + 48);\n        *(_OWORD *)(v205 + 64) = *(_OWORD *)(v204 + 64);\n        *(_OWORD *)(v205 + 80) = *(_OWORD *)(v204 + 80);\n        *(_OWORD *)(v205 + 96) = *(_OWORD *)(v204 + 96);\n        *(_OWORD *)(v205 + 112) = *(_OWORD *)(v204 + 112);\n        *(_OWORD *)(v205 + 128) = *(_OWORD *)(v204 + 128);\n        *(_OWORD *)(v205 + 144) = *(_OWORD *)(v204 + 144);\n        *(_OWORD *)(v205 + 160) = *(_OWORD *)(v204 + 160);\n        *(_OWORD *)(v205 + 176) = *(_OWORD *)(v204 + 176);\n        *(_OWORD *)(v205 + 192) = *(_OWORD *)(v204 + 192);\n        *(_OWORD *)(v205 + 208) = *(_OWORD *)(v204 + 208);\n        *(_OWORD *)(v205 + 224) = *(_OWORD *)(v204 + 224);\n        _mm_storeu_si128((__m128i *)(v205 + 240), _mm_loadu_si128((const __m128i *)(v204 + 240)));\n        v206 = 64LL;\n      }\n      else\n      {\n        v206 = 0LL;\n      }\n      v207 = v206 - 64;\n      v208 = -1LL;\n      v209 = v206;\n      do\n      {\n        *(_DWORD *)(v205 + 4 * v209) = *(_DWORD *)(v204 + 4 * v209);\n        v210 = v207;\n        ++v209;\n        ++v207;\n        ++v208;\n      }\n      while ( v208 );\n      if ( v206 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v205 + 4 * v210 + 260) = *(_DWORD *)(v204 + 4 * v210 + 260);\n          *(_DWORD *)(v205 + 4 * v210 + 264) = *(_DWORD *)(v204 + 4 * v210 + 264);\n          *(_DWORD *)(v205 + 4 * v210 + 268) = *(_DWORD *)(v204 + 4 * v210 + 268);\n          *(_DWORD *)(v205 + 4 * v210 + 272) = *(_DWORD *)(v204 + 4 * v210 + 272);\n          v210 += 4LL;\n        }\n        while ( v210 );\n      }\n      v211 = v193[1];\n      v212 = *(__int64 **)(v194 + 8);\n      v213 = *v211;\n      v214 = *v212;\n      if ( *v212 >= *v211 + 260 || v213 >= v214 + 260 )\n      {\n        *(_OWORD *)v214 = *(_OWORD *)v213;\n        *(_OWORD *)(v214 + 16) = *(_OWORD *)(v213 + 16);\n        *(_OWORD *)(v214 + 32) = *(_OWORD *)(v213 + 32);\n        *(_OWORD *)(v214 + 48) = *(_OWORD *)(v213 + 48);\n        *(_OWORD *)(v214 + 64) = *(_OWORD *)(v213 + 64);\n        *(_OWORD *)(v214 + 80) = *(_OWORD *)(v213 + 80);\n        *(_OWORD *)(v214 + 96) = *(_OWORD *)(v213 + 96);\n        *(_OWORD *)(v214 + 112) = *(_OWORD *)(v213 + 112);\n        *(_OWORD *)(v214 + 128) = *(_OWORD *)(v213 + 128);\n        *(_OWORD *)(v214 + 144) = *(_OWORD *)(v213 + 144);\n        *(_OWORD *)(v214 + 160) = *(_OWORD *)(v213 + 160);\n        *(_OWORD *)(v214 + 176) = *(_OWORD *)(v213 + 176);\n        *(_OWORD *)(v214 + 192) = *(_OWORD *)(v213 + 192);\n        *(_OWORD *)(v214 + 208) = *(_OWORD *)(v213 + 208);\n        *(_OWORD *)(v214 + 224) = *(_OWORD *)(v213 + 224);\n        _mm_storeu_si128((__m128i *)(v214 + 240), _mm_loadu_si128((const __m128i *)(v213 + 240)));\n        v215 = 64LL;\n      }\n      else\n      {\n        v215 = 0LL;\n      }\n      v216 = v215 - 64;\n      v217 = -1LL;\n      v218 = v215;\n      do\n      {\n        *(_DWORD *)(v214 + 4 * v218) = *(_DWORD *)(v213 + 4 * v218);\n        v219 = v216;\n        ++v218;\n        ++v216;\n        ++v217;\n      }\n      while ( v217 );\n      if ( v215 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v214 + 4 * v219 + 260) = *(_DWORD *)(v213 + 4 * v219 + 260);\n          *(_DWORD *)(v214 + 4 * v219 + 264) = *(_DWORD *)(v213 + 4 * v219 + 264);\n          *(_DWORD *)(v214 + 4 * v219 + 268) = *(_DWORD *)(v213 + 4 * v219 + 268);\n          *(_DWORD *)(v214 + 4 * v219 + 272) = *(_DWORD *)(v213 + 4 * v219 + 272);\n          v219 += 4LL;\n        }\n        while ( v219 );\n      }\n      v220 = v211[1];\n      v221 = v212[1];\n      if ( v221 >= v220 + 260 || v220 >= v221 + 260 )\n      {\n        *(_OWORD *)v221 = *(_OWORD *)v220;\n        *(_OWORD *)(v221 + 16) = *(_OWORD *)(v220 + 16);\n        *(_OWORD *)(v221 + 32) = *(_OWORD *)(v220 + 32);\n        *(_OWORD *)(v221 + 48) = *(_OWORD *)(v220 + 48);\n        *(_OWORD *)(v221 + 64) = *(_OWORD *)(v220 + 64);\n        *(_OWORD *)(v221 + 80) = *(_OWORD *)(v220 + 80);\n        *(_OWORD *)(v221 + 96) = *(_OWORD *)(v220 + 96);\n        *(_OWORD *)(v221 + 112) = *(_OWORD *)(v220 + 112);\n        *(_OWORD *)(v221 + 128) = *(_OWORD *)(v220 + 128);\n        *(_OWORD *)(v221 + 144) = *(_OWORD *)(v220 + 144);\n        *(_OWORD *)(v221 + 160) = *(_OWORD *)(v220 + 160);\n        *(_OWORD *)(v221 + 176) = *(_OWORD *)(v220 + 176);\n        *(_OWORD *)(v221 + 192) = *(_OWORD *)(v220 + 192);\n        *(_OWORD *)(v221 + 208) = *(_OWORD *)(v220 + 208);\n        *(_OWORD *)(v221 + 224) = *(_OWORD *)(v220 + 224);\n        _mm_storeu_si128((__m128i *)(v221 + 240), _mm_loadu_si128((const __m128i *)(v220 + 240)));\n        v222 = 64LL;\n      }\n      else\n      {\n        v222 = 0LL;\n      }\n      v223 = v222 - 64;\n      v224 = -1LL;\n      v225 = v222;\n      do\n      {\n        *(_DWORD *)(v221 + 4 * v225) = *(_DWORD *)(v220 + 4 * v225);\n        v226 = v223;\n        ++v225;\n        ++v223;\n        ++v224;\n      }\n      while ( v224 );\n      if ( v222 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v221 + 4 * v226 + 260) = *(_DWORD *)(v220 + 4 * v226 + 260);\n          *(_DWORD *)(v221 + 4 * v226 + 264) = *(_DWORD *)(v220 + 4 * v226 + 264);\n          *(_DWORD *)(v221 + 4 * v226 + 268) = *(_DWORD *)(v220 + 4 * v226 + 268);\n          *(_DWORD *)(v221 + 4 * v226 + 272) = *(_DWORD *)(v220 + 4 * v226 + 272);\n          v226 += 4LL;\n        }\n        while ( v226 );\n      }\n      v227 = v193[2];\n      v228 = *(__int64 **)(v194 + 16);\n      v229 = *v227;\n      v230 = *v228;\n      if ( *v228 >= *v227 + 260 || v229 >= v230 + 260 )\n      {\n        *(_OWORD *)v230 = *(_OWORD *)v229;\n        *(_OWORD *)(v230 + 16) = *(_OWORD *)(v229 + 16);\n        *(_OWORD *)(v230 + 32) = *(_OWORD *)(v229 + 32);\n        *(_OWORD *)(v230 + 48) = *(_OWORD *)(v229 + 48);\n        *(_OWORD *)(v230 + 64) = *(_OWORD *)(v229 + 64);\n        *(_OWORD *)(v230 + 80) = *(_OWORD *)(v229 + 80);\n        *(_OWORD *)(v230 + 96) = *(_OWORD *)(v229 + 96);\n        *(_OWORD *)(v230 + 112) = *(_OWORD *)(v229 + 112);\n        *(_OWORD *)(v230 + 128) = *(_OWORD *)(v229 + 128);\n        *(_OWORD *)(v230 + 144) = *(_OWORD *)(v229 + 144);\n        *(_OWORD *)(v230 + 160) = *(_OWORD *)(v229 + 160);\n        *(_OWORD *)(v230 + 176) = *(_OWORD *)(v229 + 176);\n        *(_OWORD *)(v230 + 192) = *(_OWORD *)(v229 + 192);\n        *(_OWORD *)(v230 + 208) = *(_OWORD *)(v229 + 208);\n        *(_OWORD *)(v230 + 224) = *(_OWORD *)(v229 + 224);\n        _mm_storeu_si128((__m128i *)(v230 + 240), _mm_loadu_si128((const __m128i *)(v229 + 240)));\n        v231 = 64LL;\n      }\n      else\n      {\n        v231 = 0LL;\n      }\n      v232 = v231 - 64;\n      v233 = -1LL;\n      v234 = v231;\n      do\n      {\n        *(_DWORD *)(v230 + 4 * v234) = *(_DWORD *)(v229 + 4 * v234);\n        v235 = v232;\n        ++v234;\n        ++v232;\n        ++v233;\n      }\n      while ( v233 );\n      if ( v231 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v230 + 4 * v235 + 260) = *(_DWORD *)(v229 + 4 * v235 + 260);\n          *(_DWORD *)(v230 + 4 * v235 + 264) = *(_DWORD *)(v229 + 4 * v235 + 264);\n          *(_DWORD *)(v230 + 4 * v235 + 268) = *(_DWORD *)(v229 + 4 * v235 + 268);\n          *(_DWORD *)(v230 + 4 * v235 + 272) = *(_DWORD *)(v229 + 4 * v235 + 272);\n          v235 += 4LL;\n        }\n        while ( v235 );\n      }\n      v236 = v227[1];\n      v237 = v228[1];\n      if ( v237 >= v236 + 260 || v236 >= v237 + 260 )\n      {\n        *(_OWORD *)v237 = *(_OWORD *)v236;\n        *(_OWORD *)(v237 + 16) = *(_OWORD *)(v236 + 16);\n        *(_OWORD *)(v237 + 32) = *(_OWORD *)(v236 + 32);\n        *(_OWORD *)(v237 + 48) = *(_OWORD *)(v236 + 48);\n        *(_OWORD *)(v237 + 64) = *(_OWORD *)(v236 + 64);\n        *(_OWORD *)(v237 + 80) = *(_OWORD *)(v236 + 80);\n        *(_OWORD *)(v237 + 96) = *(_OWORD *)(v236 + 96);\n        *(_OWORD *)(v237 + 112) = *(_OWORD *)(v236 + 112);\n        *(_OWORD *)(v237 + 128) = *(_OWORD *)(v236 + 128);\n        *(_OWORD *)(v237 + 144) = *(_OWORD *)(v236 + 144);\n        *(_OWORD *)(v237 + 160) = *(_OWORD *)(v236 + 160);\n        *(_OWORD *)(v237 + 176) = *(_OWORD *)(v236 + 176);\n        *(_OWORD *)(v237 + 192) = *(_OWORD *)(v236 + 192);\n        *(_OWORD *)(v237 + 208) = *(_OWORD *)(v236 + 208);\n        *(_OWORD *)(v237 + 224) = *(_OWORD *)(v236 + 224);\n        _mm_storeu_si128((__m128i *)(v237 + 240), _mm_loadu_si128((const __m128i *)(v236 + 240)));\n        v238 = 64LL;\n      }\n      else\n      {\n        v238 = 0LL;\n      }\n      v239 = v238 - 64;\n      v240 = -1LL;\n      v241 = v238;\n      do\n      {\n        *(_DWORD *)(v237 + 4 * v241) = *(_DWORD *)(v236 + 4 * v241);\n        v242 = v239;\n        ++v241;\n        ++v239;\n        ++v240;\n      }\n      while ( v240 );\n      if ( v238 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v237 + 4 * v242 + 260) = *(_DWORD *)(v236 + 4 * v242 + 260);\n          *(_DWORD *)(v237 + 4 * v242 + 264) = *(_DWORD *)(v236 + 4 * v242 + 264);\n          *(_DWORD *)(v237 + 4 * v242 + 268) = *(_DWORD *)(v236 + 4 * v242 + 268);\n          *(_DWORD *)(v237 + 4 * v242 + 272) = *(_DWORD *)(v236 + 4 * v242 + 272);\n          v242 += 4LL;\n        }\n        while ( v242 );\n      }\n      v243 = v193[3];\n      v244 = *(__int64 **)(v194 + 24);\n      v245 = *v243;\n      v246 = *v244;\n      if ( *v244 >= *v243 + 260 || v245 >= v246 + 260 )\n      {\n        *(_OWORD *)v246 = *(_OWORD *)v245;\n        *(_OWORD *)(v246 + 16) = *(_OWORD *)(v245 + 16);\n        *(_OWORD *)(v246 + 32) = *(_OWORD *)(v245 + 32);\n        *(_OWORD *)(v246 + 48) = *(_OWORD *)(v245 + 48);\n        *(_OWORD *)(v246 + 64) = *(_OWORD *)(v245 + 64);\n        *(_OWORD *)(v246 + 80) = *(_OWORD *)(v245 + 80);\n        *(_OWORD *)(v246 + 96) = *(_OWORD *)(v245 + 96);\n        *(_OWORD *)(v246 + 112) = *(_OWORD *)(v245 + 112);\n        *(_OWORD *)(v246 + 128) = *(_OWORD *)(v245 + 128);\n        *(_OWORD *)(v246 + 144) = *(_OWORD *)(v245 + 144);\n        *(_OWORD *)(v246 + 160) = *(_OWORD *)(v245 + 160);\n        *(_OWORD *)(v246 + 176) = *(_OWORD *)(v245 + 176);\n        *(_OWORD *)(v246 + 192) = *(_OWORD *)(v245 + 192);\n        *(_OWORD *)(v246 + 208) = *(_OWORD *)(v245 + 208);\n        *(_OWORD *)(v246 + 224) = *(_OWORD *)(v245 + 224);\n        _mm_storeu_si128((__m128i *)(v246 + 240), _mm_loadu_si128((const __m128i *)(v245 + 240)));\n        v247 = 64LL;\n      }\n      else\n      {\n        v247 = 0LL;\n      }\n      v248 = v247 - 64;\n      v249 = -1LL;\n      v250 = v247;\n      do\n      {\n        *(_DWORD *)(v246 + 4 * v250) = *(_DWORD *)(v245 + 4 * v250);\n        v251 = v248;\n        ++v250;\n        ++v248;\n        ++v249;\n      }\n      while ( v249 );\n      if ( v247 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v246 + 4 * v251 + 260) = *(_DWORD *)(v245 + 4 * v251 + 260);\n          *(_DWORD *)(v246 + 4 * v251 + 264) = *(_DWORD *)(v245 + 4 * v251 + 264);\n          *(_DWORD *)(v246 + 4 * v251 + 268) = *(_DWORD *)(v245 + 4 * v251 + 268);\n          *(_DWORD *)(v246 + 4 * v251 + 272) = *(_DWORD *)(v245 + 4 * v251 + 272);\n          v251 += 4LL;\n        }\n        while ( v251 );\n      }\n      v252 = v243[1];\n      v253 = v244[1];\n      if ( v253 >= v252 + 260 || v252 >= v253 + 260 )\n      {\n        *(_OWORD *)v253 = *(_OWORD *)v252;\n        *(_OWORD *)(v253 + 16) = *(_OWORD *)(v252 + 16);\n        *(_OWORD *)(v253 + 32) = *(_OWORD *)(v252 + 32);\n        *(_OWORD *)(v253 + 48) = *(_OWORD *)(v252 + 48);\n        *(_OWORD *)(v253 + 64) = *(_OWORD *)(v252 + 64);\n        *(_OWORD *)(v253 + 80) = *(_OWORD *)(v252 + 80);\n        *(_OWORD *)(v253 + 96) = *(_OWORD *)(v252 + 96);\n        *(_OWORD *)(v253 + 112) = *(_OWORD *)(v252 + 112);\n        *(_OWORD *)(v253 + 128) = *(_OWORD *)(v252 + 128);\n        *(_OWORD *)(v253 + 144) = *(_OWORD *)(v252 + 144);\n        *(_OWORD *)(v253 + 160) = *(_OWORD *)(v252 + 160);\n        *(_OWORD *)(v253 + 176) = *(_OWORD *)(v252 + 176);\n        *(_OWORD *)(v253 + 192) = *(_OWORD *)(v252 + 192);\n        *(_OWORD *)(v253 + 208) = *(_OWORD *)(v252 + 208);\n        *(_OWORD *)(v253 + 224) = *(_OWORD *)(v252 + 224);\n        _mm_storeu_si128((__m128i *)(v253 + 240), _mm_loadu_si128((const __m128i *)(v252 + 240)));\n        v254 = 64LL;\n      }\n      else\n      {\n        v254 = 0LL;\n      }\n      v255 = v254 - 64;\n      v256 = -1LL;\n      v257 = v254;\n      do\n      {\n        *(_DWORD *)(v253 + 4 * v257) = *(_DWORD *)(v252 + 4 * v257);\n        v258 = v255;\n        ++v257;\n        ++v255;\n        ++v256;\n      }\n      while ( v256 );\n      if ( v254 != 64 )\n      {\n        do\n        {\n          *(_DWORD *)(v253 + 4 * v258 + 260) = *(_DWORD *)(v252 + 4 * v258 + 260);\n          *(_DWORD *)(v253 + 4 * v258 + 264) = *(_DWORD *)(v252 + 4 * v258 + 264);\n          *(_DWORD *)(v253 + 4 * v258 + 268) = *(_DWORD *)(v252 + 4 * v258 + 268);\n          *(_DWORD *)(v253 + 4 * v258 + 272) = *(_DWORD *)(v252 + 4 * v258 + 272);\n          v258 += 4LL;\n        }\n        while ( v258 );\n      }\n      ++v188;\n    }\n    while ( v188 != 4 );\n    if ( dword_4FA0C4 <= 5 && (v191[18167] + v191[10] || !v191[18176]) )\n    {\n      *(_DWORD *)(v281 + 460) = 0;\n      *(_QWORD *)(v281 + 464) = 0LL;\n      v265 = word_4F6750;\n      v266 = xmmword_4F26D0;\n      v267 = 0LL;\n      v268 = qword_4F9E30;\n      do\n      {\n        v269 = 9223372036854775552LL;\n        v270 = 0LL;\n        do\n        {\n          if ( v191[18181] )\n            v266[v269 + 256] = 0;\n          else\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v268 + 6424)\n                                 + 8 * ((signed int)v191[39] + (signed __int64)(signed int)v267))\n                     + 2LL * ((signed int)v270 + v191[38])) = v265[v270];\n          ++v270;\n          v269 += 16LL;\n        }\n        while ( v269 * 2 );\n        ++v267;\n        v265 += 16;\n        ++v266;\n      }\n      while ( v267 != 16 );\n    }\n    else\n    {\n      *(_DWORD *)(v281 + 460) = dword_4FA0B4;\n      *(_QWORD *)(v281 + 464) = qword_4F9DF8;\n      v259 = word_4F7150;\n      v260 = 0LL;\n      v261 = qword_4F9E30;\n      v262 = 0LL;\n      do\n      {\n        v263 = 4611686018427387648LL;\n        v264 = 0LL;\n        do\n        {\n          if ( v191[18181] )\n            dword_4F2AD0[v260 + v263] = xmmword_4F32D0[v260 + v263];\n          else\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v261 + 6424)\n                                 + 8 * ((signed int)v191[39] + (signed __int64)(signed int)v262))\n                     + 2LL * ((signed int)v264 + v191[38])) = v259[v264];\n          ++v264;\n          v263 += 16LL;\n        }\n        while ( v263 * 4 );\n        ++v262;\n        v259 += 16;\n        ++v260;\n      }\n      while ( v262 != 16 );\n    }\n    result = 0LL;\n    v271 = 0LL;\n    do\n    {\n      v272 = 0LL;\n      do\n      {\n        xmmword_4EBF70[0].m128i_i32[result + v272] = dword_4ED770[result + v272];\n        xmmword_4EC370[result + v272] = dword_4EDB70[result + v272];\n        xmmword_4EC770[result + v272] = dword_4EDF70[result + v272];\n        xmmword_4F46D0[result + v272] = dword_4F4ED0[result + v272];\n        xmmword_4F36D0[result + v272] = dword_4F3ED0[result + v272];\n        v272 += 16LL;\n      }\n      while ( v272 != 256 );\n      ++v271;\n      ++result;\n    }\n    while ( v271 != 16 );\n  }\n  else\n  {\n    if ( *((_DWORD *)off_49F6D0 + 18173) >= -3 )\n    {\n      v20 = qword_4A00D8;\n      v21 = *((_QWORD *)off_49F6D0 + 1767);\n      v22 = 0LL;\n      do\n      {\n        v23 = (unsigned __int64 **)v20[v22];\n        v24 = *(_QWORD *)(v21 + 8 * v22);\n        v25 = *v23;\n        v26 = *(unsigned __int64 **)v24;\n        v27 = **v23;\n        v28 = **(_QWORD **)v24;\n        if ( v28 >= v27 + 260 || v27 >= v28 + 260 )\n        {\n          *(_OWORD *)v28 = *(_OWORD *)v27;\n          *(_OWORD *)(v28 + 16) = *(_OWORD *)(v27 + 16);\n          *(_OWORD *)(v28 + 32) = *(_OWORD *)(v27 + 32);\n          *(_OWORD *)(v28 + 48) = *(_OWORD *)(v27 + 48);\n          *(_OWORD *)(v28 + 64) = *(_OWORD *)(v27 + 64);\n          *(_OWORD *)(v28 + 80) = *(_OWORD *)(v27 + 80);\n          *(_OWORD *)(v28 + 96) = *(_OWORD *)(v27 + 96);\n          *(_OWORD *)(v28 + 112) = *(_OWORD *)(v27 + 112);\n          *(_OWORD *)(v28 + 128) = *(_OWORD *)(v27 + 128);\n          *(_OWORD *)(v28 + 144) = *(_OWORD *)(v27 + 144);\n          *(_OWORD *)(v28 + 160) = *(_OWORD *)(v27 + 160);\n          *(_OWORD *)(v28 + 176) = *(_OWORD *)(v27 + 176);\n          *(_OWORD *)(v28 + 192) = *(_OWORD *)(v27 + 192);\n          *(_OWORD *)(v28 + 208) = *(_OWORD *)(v27 + 208);\n          *(_OWORD *)(v28 + 224) = *(_OWORD *)(v27 + 224);\n          _mm_storeu_si128((__m128i *)(v28 + 240), _mm_loadu_si128((const __m128i *)(v27 + 240)));\n          v29 = 64LL;\n        }\n        else\n        {\n          v29 = 0LL;\n        }\n        v30 = v29 - 64;\n        v31 = -1LL;\n        v32 = v29;\n        do\n        {\n          *(_DWORD *)(v28 + 4 * v32) = *(_DWORD *)(v27 + 4 * v32);\n          v33 = v30;\n          ++v32;\n          ++v30;\n          ++v31;\n        }\n        while ( v31 );\n        if ( v29 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v28 + 4 * v33 + 260) = *(_DWORD *)(v27 + 4 * v33 + 260);\n            *(_DWORD *)(v28 + 4 * v33 + 264) = *(_DWORD *)(v27 + 4 * v33 + 264);\n            *(_DWORD *)(v28 + 4 * v33 + 268) = *(_DWORD *)(v27 + 4 * v33 + 268);\n            *(_DWORD *)(v28 + 4 * v33 + 272) = *(_DWORD *)(v27 + 4 * v33 + 272);\n            v33 += 4LL;\n          }\n          while ( v33 );\n        }\n        v34 = v25[1];\n        v35 = v26[1];\n        if ( v35 >= v34 + 260 || v34 >= v35 + 260 )\n        {\n          *(_OWORD *)v35 = *(_OWORD *)v34;\n          *(_OWORD *)(v35 + 16) = *(_OWORD *)(v34 + 16);\n          *(_OWORD *)(v35 + 32) = *(_OWORD *)(v34 + 32);\n          *(_OWORD *)(v35 + 48) = *(_OWORD *)(v34 + 48);\n          *(_OWORD *)(v35 + 64) = *(_OWORD *)(v34 + 64);\n          *(_OWORD *)(v35 + 80) = *(_OWORD *)(v34 + 80);\n          *(_OWORD *)(v35 + 96) = *(_OWORD *)(v34 + 96);\n          *(_OWORD *)(v35 + 112) = *(_OWORD *)(v34 + 112);\n          *(_OWORD *)(v35 + 128) = *(_OWORD *)(v34 + 128);\n          *(_OWORD *)(v35 + 144) = *(_OWORD *)(v34 + 144);\n          *(_OWORD *)(v35 + 160) = *(_OWORD *)(v34 + 160);\n          *(_OWORD *)(v35 + 176) = *(_OWORD *)(v34 + 176);\n          *(_OWORD *)(v35 + 192) = *(_OWORD *)(v34 + 192);\n          *(_OWORD *)(v35 + 208) = *(_OWORD *)(v34 + 208);\n          *(_OWORD *)(v35 + 224) = *(_OWORD *)(v34 + 224);\n          _mm_storeu_si128((__m128i *)(v35 + 240), _mm_loadu_si128((const __m128i *)(v34 + 240)));\n          v36 = 64LL;\n        }\n        else\n        {\n          v36 = 0LL;\n        }\n        v37 = v36 - 64;\n        v38 = -1LL;\n        v39 = v36;\n        do\n        {\n          *(_DWORD *)(v35 + 4 * v39) = *(_DWORD *)(v34 + 4 * v39);\n          v40 = v37;\n          ++v39;\n          ++v37;\n          ++v38;\n        }\n        while ( v38 );\n        if ( v36 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v35 + 4 * v40 + 260) = *(_DWORD *)(v34 + 4 * v40 + 260);\n            *(_DWORD *)(v35 + 4 * v40 + 264) = *(_DWORD *)(v34 + 4 * v40 + 264);\n            *(_DWORD *)(v35 + 4 * v40 + 268) = *(_DWORD *)(v34 + 4 * v40 + 268);\n            *(_DWORD *)(v35 + 4 * v40 + 272) = *(_DWORD *)(v34 + 4 * v40 + 272);\n            v40 += 4LL;\n          }\n          while ( v40 );\n        }\n        v41 = v23[1];\n        v42 = *(__int64 **)(v24 + 8);\n        v43 = *v41;\n        v44 = *v42;\n        if ( *v42 >= *v41 + 260 || v43 >= v44 + 260 )\n        {\n          *(_OWORD *)v44 = *(_OWORD *)v43;\n          *(_OWORD *)(v44 + 16) = *(_OWORD *)(v43 + 16);\n          *(_OWORD *)(v44 + 32) = *(_OWORD *)(v43 + 32);\n          *(_OWORD *)(v44 + 48) = *(_OWORD *)(v43 + 48);\n          *(_OWORD *)(v44 + 64) = *(_OWORD *)(v43 + 64);\n          *(_OWORD *)(v44 + 80) = *(_OWORD *)(v43 + 80);\n          *(_OWORD *)(v44 + 96) = *(_OWORD *)(v43 + 96);\n          *(_OWORD *)(v44 + 112) = *(_OWORD *)(v43 + 112);\n          *(_OWORD *)(v44 + 128) = *(_OWORD *)(v43 + 128);\n          *(_OWORD *)(v44 + 144) = *(_OWORD *)(v43 + 144);\n          *(_OWORD *)(v44 + 160) = *(_OWORD *)(v43 + 160);\n          *(_OWORD *)(v44 + 176) = *(_OWORD *)(v43 + 176);\n          *(_OWORD *)(v44 + 192) = *(_OWORD *)(v43 + 192);\n          *(_OWORD *)(v44 + 208) = *(_OWORD *)(v43 + 208);\n          *(_OWORD *)(v44 + 224) = *(_OWORD *)(v43 + 224);\n          _mm_storeu_si128((__m128i *)(v44 + 240), _mm_loadu_si128((const __m128i *)(v43 + 240)));\n          v45 = 64LL;\n        }\n        else\n        {\n          v45 = 0LL;\n        }\n        v46 = v45 - 64;\n        v47 = -1LL;\n        v48 = v45;\n        do\n        {\n          *(_DWORD *)(v44 + 4 * v48) = *(_DWORD *)(v43 + 4 * v48);\n          v49 = v46;\n          ++v48;\n          ++v46;\n          ++v47;\n        }\n        while ( v47 );\n        if ( v45 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v44 + 4 * v49 + 260) = *(_DWORD *)(v43 + 4 * v49 + 260);\n            *(_DWORD *)(v44 + 4 * v49 + 264) = *(_DWORD *)(v43 + 4 * v49 + 264);\n            *(_DWORD *)(v44 + 4 * v49 + 268) = *(_DWORD *)(v43 + 4 * v49 + 268);\n            *(_DWORD *)(v44 + 4 * v49 + 272) = *(_DWORD *)(v43 + 4 * v49 + 272);\n            v49 += 4LL;\n          }\n          while ( v49 );\n        }\n        v50 = v41[1];\n        v51 = v42[1];\n        if ( v51 >= v50 + 260 || v50 >= v51 + 260 )\n        {\n          *(_OWORD *)v51 = *(_OWORD *)v50;\n          *(_OWORD *)(v51 + 16) = *(_OWORD *)(v50 + 16);\n          *(_OWORD *)(v51 + 32) = *(_OWORD *)(v50 + 32);\n          *(_OWORD *)(v51 + 48) = *(_OWORD *)(v50 + 48);\n          *(_OWORD *)(v51 + 64) = *(_OWORD *)(v50 + 64);\n          *(_OWORD *)(v51 + 80) = *(_OWORD *)(v50 + 80);\n          *(_OWORD *)(v51 + 96) = *(_OWORD *)(v50 + 96);\n          *(_OWORD *)(v51 + 112) = *(_OWORD *)(v50 + 112);\n          *(_OWORD *)(v51 + 128) = *(_OWORD *)(v50 + 128);\n          *(_OWORD *)(v51 + 144) = *(_OWORD *)(v50 + 144);\n          *(_OWORD *)(v51 + 160) = *(_OWORD *)(v50 + 160);\n          *(_OWORD *)(v51 + 176) = *(_OWORD *)(v50 + 176);\n          *(_OWORD *)(v51 + 192) = *(_OWORD *)(v50 + 192);\n          *(_OWORD *)(v51 + 208) = *(_OWORD *)(v50 + 208);\n          *(_OWORD *)(v51 + 224) = *(_OWORD *)(v50 + 224);\n          _mm_storeu_si128((__m128i *)(v51 + 240), _mm_loadu_si128((const __m128i *)(v50 + 240)));\n          v52 = 64LL;\n        }\n        else\n        {\n          v52 = 0LL;\n        }\n        v53 = v52 - 64;\n        v54 = -1LL;\n        v55 = v52;\n        do\n        {\n          *(_DWORD *)(v51 + 4 * v55) = *(_DWORD *)(v50 + 4 * v55);\n          v56 = v53;\n          ++v55;\n          ++v53;\n          ++v54;\n        }\n        while ( v54 );\n        if ( v52 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v51 + 4 * v56 + 260) = *(_DWORD *)(v50 + 4 * v56 + 260);\n            *(_DWORD *)(v51 + 4 * v56 + 264) = *(_DWORD *)(v50 + 4 * v56 + 264);\n            *(_DWORD *)(v51 + 4 * v56 + 268) = *(_DWORD *)(v50 + 4 * v56 + 268);\n            *(_DWORD *)(v51 + 4 * v56 + 272) = *(_DWORD *)(v50 + 4 * v56 + 272);\n            v56 += 4LL;\n          }\n          while ( v56 );\n        }\n        v57 = v23[2];\n        v58 = *(__int64 **)(v24 + 16);\n        v59 = *v57;\n        v60 = *v58;\n        if ( *v58 >= *v57 + 260 || v59 >= v60 + 260 )\n        {\n          *(_OWORD *)v60 = *(_OWORD *)v59;\n          *(_OWORD *)(v60 + 16) = *(_OWORD *)(v59 + 16);\n          *(_OWORD *)(v60 + 32) = *(_OWORD *)(v59 + 32);\n          *(_OWORD *)(v60 + 48) = *(_OWORD *)(v59 + 48);\n          *(_OWORD *)(v60 + 64) = *(_OWORD *)(v59 + 64);\n          *(_OWORD *)(v60 + 80) = *(_OWORD *)(v59 + 80);\n          *(_OWORD *)(v60 + 96) = *(_OWORD *)(v59 + 96);\n          *(_OWORD *)(v60 + 112) = *(_OWORD *)(v59 + 112);\n          *(_OWORD *)(v60 + 128) = *(_OWORD *)(v59 + 128);\n          *(_OWORD *)(v60 + 144) = *(_OWORD *)(v59 + 144);\n          *(_OWORD *)(v60 + 160) = *(_OWORD *)(v59 + 160);\n          *(_OWORD *)(v60 + 176) = *(_OWORD *)(v59 + 176);\n          *(_OWORD *)(v60 + 192) = *(_OWORD *)(v59 + 192);\n          *(_OWORD *)(v60 + 208) = *(_OWORD *)(v59 + 208);\n          *(_OWORD *)(v60 + 224) = *(_OWORD *)(v59 + 224);\n          _mm_storeu_si128((__m128i *)(v60 + 240), _mm_loadu_si128((const __m128i *)(v59 + 240)));\n          v61 = 64LL;\n        }\n        else\n        {\n          v61 = 0LL;\n        }\n        v62 = v61 - 64;\n        v63 = -1LL;\n        v64 = v61;\n        do\n        {\n          *(_DWORD *)(v60 + 4 * v64) = *(_DWORD *)(v59 + 4 * v64);\n          v65 = v62;\n          ++v64;\n          ++v62;\n          ++v63;\n        }\n        while ( v63 );\n        if ( v61 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v60 + 4 * v65 + 260) = *(_DWORD *)(v59 + 4 * v65 + 260);\n            *(_DWORD *)(v60 + 4 * v65 + 264) = *(_DWORD *)(v59 + 4 * v65 + 264);\n            *(_DWORD *)(v60 + 4 * v65 + 268) = *(_DWORD *)(v59 + 4 * v65 + 268);\n            *(_DWORD *)(v60 + 4 * v65 + 272) = *(_DWORD *)(v59 + 4 * v65 + 272);\n            v65 += 4LL;\n          }\n          while ( v65 );\n        }\n        v66 = v57[1];\n        v67 = v58[1];\n        if ( v67 >= v66 + 260 || v66 >= v67 + 260 )\n        {\n          *(_OWORD *)v67 = *(_OWORD *)v66;\n          *(_OWORD *)(v67 + 16) = *(_OWORD *)(v66 + 16);\n          *(_OWORD *)(v67 + 32) = *(_OWORD *)(v66 + 32);\n          *(_OWORD *)(v67 + 48) = *(_OWORD *)(v66 + 48);\n          *(_OWORD *)(v67 + 64) = *(_OWORD *)(v66 + 64);\n          *(_OWORD *)(v67 + 80) = *(_OWORD *)(v66 + 80);\n          *(_OWORD *)(v67 + 96) = *(_OWORD *)(v66 + 96);\n          *(_OWORD *)(v67 + 112) = *(_OWORD *)(v66 + 112);\n          *(_OWORD *)(v67 + 128) = *(_OWORD *)(v66 + 128);\n          *(_OWORD *)(v67 + 144) = *(_OWORD *)(v66 + 144);\n          *(_OWORD *)(v67 + 160) = *(_OWORD *)(v66 + 160);\n          *(_OWORD *)(v67 + 176) = *(_OWORD *)(v66 + 176);\n          *(_OWORD *)(v67 + 192) = *(_OWORD *)(v66 + 192);\n          *(_OWORD *)(v67 + 208) = *(_OWORD *)(v66 + 208);\n          *(_OWORD *)(v67 + 224) = *(_OWORD *)(v66 + 224);\n          _mm_storeu_si128((__m128i *)(v67 + 240), _mm_loadu_si128((const __m128i *)(v66 + 240)));\n          v68 = 64LL;\n        }\n        else\n        {\n          v68 = 0LL;\n        }\n        v69 = v68 - 64;\n        v70 = -1LL;\n        v71 = v68;\n        do\n        {\n          *(_DWORD *)(v67 + 4 * v71) = *(_DWORD *)(v66 + 4 * v71);\n          v72 = v69;\n          ++v71;\n          ++v69;\n          ++v70;\n        }\n        while ( v70 );\n        if ( v68 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v67 + 4 * v72 + 260) = *(_DWORD *)(v66 + 4 * v72 + 260);\n            *(_DWORD *)(v67 + 4 * v72 + 264) = *(_DWORD *)(v66 + 4 * v72 + 264);\n            *(_DWORD *)(v67 + 4 * v72 + 268) = *(_DWORD *)(v66 + 4 * v72 + 268);\n            *(_DWORD *)(v67 + 4 * v72 + 272) = *(_DWORD *)(v66 + 4 * v72 + 272);\n            v72 += 4LL;\n          }\n          while ( v72 );\n        }\n        v73 = v23[3];\n        v74 = *(__int64 **)(v24 + 24);\n        v75 = *v73;\n        v76 = *v74;\n        if ( *v74 >= *v73 + 260 || v75 >= v76 + 260 )\n        {\n          *(_OWORD *)v76 = *(_OWORD *)v75;\n          *(_OWORD *)(v76 + 16) = *(_OWORD *)(v75 + 16);\n          *(_OWORD *)(v76 + 32) = *(_OWORD *)(v75 + 32);\n          *(_OWORD *)(v76 + 48) = *(_OWORD *)(v75 + 48);\n          *(_OWORD *)(v76 + 64) = *(_OWORD *)(v75 + 64);\n          *(_OWORD *)(v76 + 80) = *(_OWORD *)(v75 + 80);\n          *(_OWORD *)(v76 + 96) = *(_OWORD *)(v75 + 96);\n          *(_OWORD *)(v76 + 112) = *(_OWORD *)(v75 + 112);\n          *(_OWORD *)(v76 + 128) = *(_OWORD *)(v75 + 128);\n          *(_OWORD *)(v76 + 144) = *(_OWORD *)(v75 + 144);\n          *(_OWORD *)(v76 + 160) = *(_OWORD *)(v75 + 160);\n          *(_OWORD *)(v76 + 176) = *(_OWORD *)(v75 + 176);\n          *(_OWORD *)(v76 + 192) = *(_OWORD *)(v75 + 192);\n          *(_OWORD *)(v76 + 208) = *(_OWORD *)(v75 + 208);\n          *(_OWORD *)(v76 + 224) = *(_OWORD *)(v75 + 224);\n          _mm_storeu_si128((__m128i *)(v76 + 240), _mm_loadu_si128((const __m128i *)(v75 + 240)));\n          v77 = 64LL;\n        }\n        else\n        {\n          v77 = 0LL;\n        }\n        v78 = v77 - 64;\n        v79 = -1LL;\n        v80 = v77;\n        do\n        {\n          *(_DWORD *)(v76 + 4 * v80) = *(_DWORD *)(v75 + 4 * v80);\n          v81 = v78;\n          ++v80;\n          ++v78;\n          ++v79;\n        }\n        while ( v79 );\n        if ( v77 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v76 + 4 * v81 + 260) = *(_DWORD *)(v75 + 4 * v81 + 260);\n            *(_DWORD *)(v76 + 4 * v81 + 264) = *(_DWORD *)(v75 + 4 * v81 + 264);\n            *(_DWORD *)(v76 + 4 * v81 + 268) = *(_DWORD *)(v75 + 4 * v81 + 268);\n            *(_DWORD *)(v76 + 4 * v81 + 272) = *(_DWORD *)(v75 + 4 * v81 + 272);\n            v81 += 4LL;\n          }\n          while ( v81 );\n        }\n        v82 = v73[1];\n        v83 = v74[1];\n        if ( v83 >= v82 + 260 || v82 >= v83 + 260 )\n        {\n          *(_OWORD *)v83 = *(_OWORD *)v82;\n          *(_OWORD *)(v83 + 16) = *(_OWORD *)(v82 + 16);\n          *(_OWORD *)(v83 + 32) = *(_OWORD *)(v82 + 32);\n          *(_OWORD *)(v83 + 48) = *(_OWORD *)(v82 + 48);\n          *(_OWORD *)(v83 + 64) = *(_OWORD *)(v82 + 64);\n          *(_OWORD *)(v83 + 80) = *(_OWORD *)(v82 + 80);\n          *(_OWORD *)(v83 + 96) = *(_OWORD *)(v82 + 96);\n          *(_OWORD *)(v83 + 112) = *(_OWORD *)(v82 + 112);\n          *(_OWORD *)(v83 + 128) = *(_OWORD *)(v82 + 128);\n          *(_OWORD *)(v83 + 144) = *(_OWORD *)(v82 + 144);\n          *(_OWORD *)(v83 + 160) = *(_OWORD *)(v82 + 160);\n          *(_OWORD *)(v83 + 176) = *(_OWORD *)(v82 + 176);\n          *(_OWORD *)(v83 + 192) = *(_OWORD *)(v82 + 192);\n          *(_OWORD *)(v83 + 208) = *(_OWORD *)(v82 + 208);\n          *(_OWORD *)(v83 + 224) = *(_OWORD *)(v82 + 224);\n          _mm_storeu_si128((__m128i *)(v83 + 240), _mm_loadu_si128((const __m128i *)(v82 + 240)));\n          v84 = 64LL;\n        }\n        else\n        {\n          v84 = 0LL;\n        }\n        v85 = v84 - 64;\n        v86 = -1LL;\n        v87 = v84;\n        do\n        {\n          *(_DWORD *)(v83 + 4 * v87) = *(_DWORD *)(v82 + 4 * v87);\n          v88 = v85;\n          ++v87;\n          ++v85;\n          ++v86;\n        }\n        while ( v86 );\n        if ( v84 != 64 )\n        {\n          do\n          {\n            *(_DWORD *)(v83 + 4 * v88 + 260) = *(_DWORD *)(v82 + 4 * v88 + 260);\n            *(_DWORD *)(v83 + 4 * v88 + 264) = *(_DWORD *)(v82 + 4 * v88 + 264);\n            *(_DWORD *)(v83 + 4 * v88 + 268) = *(_DWORD *)(v82 + 4 * v88 + 268);\n            *(_DWORD *)(v83 + 4 * v88 + 272) = *(_DWORD *)(v82 + 4 * v88 + 272);\n            v88 += 4LL;\n          }\n          while ( v88 );\n        }\n        v89 = (signed int)v1[18173] + 3LL;\n        v91 = __OFSUB__(v22, v89);\n        v90 = v22++ - v89 < 0;\n      }\n      while ( v90 ^ v91 );\n    }\n    if ( dword_4FA0C8 <= 5 && v1[6] != 3 && (v1[18167] + v1[10] || !v1[18176]) )\n    {\n      *(_DWORD *)(v281 + 460) = 0;\n      *(_QWORD *)(v281 + 464) = 0LL;\n      v273 = word_4F6550;\n      v274 = xmmword_4F26D0;\n      v275 = 0LL;\n      v276 = qword_4F9E30;\n      do\n      {\n        v277 = 9223372036854775552LL;\n        v278 = 0LL;\n        do\n        {\n          if ( v1[18181] )\n            v274[v277 + 256] = 0;\n          else\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v276 + 6424) + 8\n                                                            * ((signed int)v1[39] + (signed __int64)(signed int)v275))\n                     + 2LL * ((signed int)v278 + v1[38])) = v273[v278];\n          ++v278;\n          v277 += 16LL;\n        }\n        while ( v277 * 2 );\n        ++v275;\n        v273 += 16;\n        ++v274;\n      }\n      while ( v275 != 16 );\n    }\n    else\n    {\n      *(_DWORD *)(v281 + 460) = dword_4FA0B8;\n      *(_QWORD *)(v281 + 464) = dword_4FA0BC;\n      v92 = word_4F6F50;\n      v93 = 0LL;\n      v94 = qword_4F9E30;\n      v95 = 0LL;\n      do\n      {\n        v96 = 4611686018427387648LL;\n        v97 = 0LL;\n        do\n        {\n          if ( v1[18181] )\n            dword_4F2AD0[v93 + v96] = dword_4F2ED0[v93 + v96];\n          else\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 6424) + 8 * ((signed int)v1[39] + (signed __int64)(signed int)v95))\n                     + 2LL * ((signed int)v97 + v1[38])) = v92[v97];\n          ++v97;\n          v96 += 16LL;\n        }\n        while ( v96 * 4 );\n        ++v95;\n        v92 += 16;\n        ++v93;\n      }\n      while ( v95 != 16 );\n    }\n    result = 0LL;\n    v99 = 0LL;\n    do\n    {\n      v100 = 0LL;\n      do\n      {\n        xmmword_4EBF70[0].m128i_i32[result + v100] = dword_4ECB70[result + v100];\n        xmmword_4EC370[result + v100] = dword_4ECF70[result + v100];\n        xmmword_4EC770[result + v100] = dword_4ED370[result + v100];\n        xmmword_4F46D0[result + v100] = dword_4F4AD0[result + v100];\n        xmmword_4F36D0[result + v100] = dword_4F3AD0[result + v100];\n        v100 += 16LL;\n      }\n      while ( v100 != 256 );\n      ++v99;\n      ++result;\n    }\n    while ( v99 != 16 );\n  }\n  return result * 4;\n}\n", 
            "funcStartAddr": "0x461cc0L", 
            "funcEndAddr": "0x4641deL", 
            "funcName": "sub_461CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4641E0(int a1)\n{\n  int v1; // ebp\n\n  v1 = *((_DWORD *)off_49F6D0 + 6) == 1;\n  sub_4684A0(a1, 0, (unsigned int)xmmword_4F9C60, word_4F9FC8[0], word_4F9FC0[0], (signed __int16)qword_4F9FD0, v1);\n  sub_4684A0(a1, 1u, DWORD1(xmmword_4F9C60), word_4F9FCA, word_4F9FC2, SWORD1(qword_4F9FD0), v1);\n  sub_4684A0(a1, 2u, DWORD2(xmmword_4F9C60), word_4F9FCC, word_4F9FC4, SWORD2(qword_4F9FD0), v1);\n  return sub_4684A0(a1, 3u, HIDWORD(xmmword_4F9C60), word_4F9FCE, word_4F9FC6, SHIWORD(qword_4F9FD0), v1);\n}\n", 
            "funcStartAddr": "0x4641e0L", 
            "funcEndAddr": "0x4642a8L", 
            "funcName": "sub_4641E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4642B0(int a1)\n{\n  int v1; // ebp\n\n  v1 = *((_DWORD *)off_49F6D0 + 6) == 1;\n  sub_468C40(a1, 0, (unsigned int)xmmword_4F9C60, word_4F9FC8[0], word_4F9FC0[0], (signed __int16)qword_4F9FD0, v1);\n  sub_468C40(a1, 1u, DWORD1(xmmword_4F9C60), word_4F9FCA, word_4F9FC2, SWORD1(qword_4F9FD0), v1);\n  sub_468C40(a1, 2u, DWORD2(xmmword_4F9C60), word_4F9FCC, word_4F9FC4, SWORD2(qword_4F9FD0), v1);\n  return sub_468C40(a1, 3u, HIDWORD(xmmword_4F9C60), word_4F9FCE, word_4F9FC6, SHIWORD(qword_4F9FD0), v1);\n}\n", 
            "funcStartAddr": "0x4642b0L", 
            "funcEndAddr": "0x464378L", 
            "funcName": "sub_4642B0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_464380(__int64 a1, int a2)\n{\n  int v2; // er11\n  __int64 v3; // r15\n  __int64 v4; // r13\n  __int64 v5; // r14\n  __int64 v6; // rcx\n  __int64 v7; // r8\n  signed __int64 v8; // rax\n  int v9; // ebx\n  _QWORD *v10; // rbp\n  __int64 v11; // rcx\n  int v12; // er10\n  int v13; // er9\n  int v14; // edi\n  char *v15; // rdx\n  _QWORD *v16; // rdx\n  __int64 v17; // rdx\n  __int16 *v18; // rdx\n  __int16 v19; // di\n  __int64 v20; // rsi\n  _WORD *v21; // rdx\n  _QWORD *v22; // rsi\n  _WORD *v23; // rbp\n  _QWORD *v24; // rdx\n  _WORD *v25; // rsi\n  _WORD *v26; // rax\n  _QWORD *v27; // rdx\n  _WORD *v28; // rdi\n  _QWORD *v29; // rsi\n  _WORD *v30; // rbx\n  _WORD *v31; // rax\n  void *result; // rax\n  __int64 v33; // r15\n  __int64 v34; // r14\n  __int64 v35; // rdi\n  __int64 v36; // r8\n  __int64 v37; // r12\n  __int64 v38; // r13\n  __int64 v39; // rbp\n  _WORD *v40; // r9\n  _WORD *v41; // r11\n  _WORD *v42; // rbx\n  _WORD *v43; // rcx\n  _WORD *v44; // rax\n  _WORD *v45; // rbx\n  _WORD *v46; // rcx\n  _WORD *v47; // rsi\n  _WORD *v48; // rax\n  _WORD *v49; // rdx\n  _WORD *v50; // rcx\n  _WORD *v51; // rbx\n  _WORD *v52; // rax\n  _WORD *v53; // rdx\n  _WORD *v54; // rcx\n  _WORD *v55; // rbx\n  _WORD *v56; // rax\n  _WORD *v57; // rdx\n  _WORD *v58; // rcx\n  _WORD *v59; // rbx\n  _WORD *v60; // rax\n  _WORD *v61; // rdx\n  _WORD *v62; // rcx\n  _WORD *v63; // rbx\n  _WORD *v64; // rax\n  _WORD *v65; // rdx\n  _WORD *v66; // rcx\n  _WORD *v67; // rbx\n  _WORD *v68; // rax\n  _WORD *v69; // rdx\n  _WORD *v70; // rcx\n  _WORD *v71; // rbx\n  _WORD *v72; // rax\n  _WORD *v73; // rdx\n  _WORD *v74; // rcx\n  _WORD *v75; // rbp\n  __int64 v76; // [rsp+0h] [rbp-88h]\n  __int64 v77; // [rsp+8h] [rbp-80h]\n  __int64 v78; // [rsp+10h] [rbp-78h]\n  __int64 v79; // [rsp+18h] [rbp-70h]\n  int v80; // [rsp+24h] [rbp-64h]\n  signed int *v81; // [rsp+28h] [rbp-60h]\n  __int64 v82; // [rsp+30h] [rbp-58h]\n  __int64 v83; // [rsp+38h] [rbp-50h]\n  __int64 v84; // [rsp+40h] [rbp-48h]\n  __int64 v85; // [rsp+48h] [rbp-40h]\n  __int64 v86; // [rsp+50h] [rbp-38h]\n\n  v2 = a2;\n  v3 = a1;\n  v83 = *((_QWORD *)off_49F6D0 + 8990);\n  v76 = *((_QWORD *)off_49F6D0 + 8991);\n  v4 = 0LL;\n  do\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = (v4 & 0x7FFFFFFE) + ((unsigned int)v5 >> 1);\n      v7 = *(signed int *)(v3 + 4 * v6 + 472);\n      v8 = *((signed int *)off_49F6D0 + 37) + (signed __int64)(signed int)v4;\n      v9 = *(_DWORD *)(v3 + 4 * v6 + 488);\n      v10 = *(_QWORD **)(qword_4F9E30 + 6480);\n      v11 = (signed int)v5 + *((_DWORD *)off_49F6D0 + 36);\n      v12 = *(signed __int16 *)(*(_QWORD *)(*v10 + 8 * v11) + 2 * v8);\n      v13 = *(signed __int16 *)(*(_QWORD *)(v10[1] + 8 * v11) + 2 * v8);\n      if ( v9 == 2 )\n      {\n        v14 = *(_DWORD *)(v3 + 580);\n        if ( v14 )\n        {\n          if ( *(_DWORD *)(v3 + 72) == 1 )\n          {\n            v15 = (char *)off_49F6D0 + 71944;\n            if ( v14 == 1 )\n              v15 = (char *)off_49F6D0 + 71936;\n            v76 = *(_QWORD *)v15;\n            v12 = 0;\n            v13 = 0;\n          }\n        }\n      }\n      if ( !v2 )\n      {\n        if ( v9 < 0 )\n        {\n          v17 = **(_QWORD **)(qword_4F9E30 + 6504);\n          goto LABEL_23;\n        }\n        v18 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v76 + 8 * v5) + 8 * v4) + 8LL * v12) + 8 * v7);\n        v19 = *v18;\n        v20 = **(_QWORD **)(qword_4F9E30 + 6504);\nLABEL_21:\n        v31 = *(_WORD **)(*(_QWORD *)(v20 + 8 * v11) + 8 * v8);\n        *v31 = v19;\n        v31[1] = v18[1];\n        goto LABEL_24;\n      }\n      if ( v9 == 1 )\n      {\n        v24 = *(_QWORD **)(qword_4F9E30 + 6504);\n        **(_DWORD **)(*(_QWORD *)(*v24 + 8 * v11) + 8 * v8) = 0;\n        v25 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 8 * v5) + 8 * v4) + 8LL) + 8LL * v13)\n                        + 8 * v7);\n        v26 = *(_WORD **)(*(_QWORD *)(v24[1] + 8 * v11) + 8 * v8);\n        *v26 = *v25;\n        v26[1] = v25[1];\n        goto LABEL_24;\n      }\n      if ( v9 )\n      {\n        if ( v9 != -1 )\n        {\n          if ( v9 != 2 )\n            error((__int64)\"invalid direction mode\", 255);\n          v27 = *(_QWORD **)(*(_QWORD *)(v76 + 8 * v5) + 8 * v4);\n          v28 = *(_WORD **)(*(_QWORD *)(*v27 + 8LL * v12) + 8 * v7);\n          v29 = *(_QWORD **)(qword_4F9E30 + 6504);\n          v30 = *(_WORD **)(*(_QWORD *)(*v29 + 8 * v11) + 8 * v8);\n          *v30 = *v28;\n          v30[1] = v28[1];\n          v18 = *(__int16 **)(*(_QWORD *)(v27[1] + 8LL * v13) + 8 * v7);\n          v19 = *v18;\n          v20 = v29[1];\n          goto LABEL_21;\n        }\n        v16 = *(_QWORD **)(qword_4F9E30 + 6504);\n        **(_DWORD **)(*(_QWORD *)(*v16 + 8 * v11) + 8 * v8) = 0;\n        v17 = v16[1];\n      }\n      else\n      {\n        v21 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v76 + 8 * v5) + 8 * v4) + 8LL * v12) + 8 * v7);\n        v22 = *(_QWORD **)(qword_4F9E30 + 6504);\n        v23 = *(_WORD **)(*(_QWORD *)(*v22 + 8 * v11) + 8 * v8);\n        *v23 = *v21;\n        v23[1] = v21[1];\n        v17 = v22[1];\n      }\nLABEL_23:\n      **(_DWORD **)(*(_QWORD *)(v17 + 8 * v11) + 8 * v8) = 0;\nLABEL_24:\n      ++v5;\n    }\n    while ( v5 != 4 );\n    ++v4;\n  }\n  while ( v4 != 4 );\n  result = off_49F6D0;\n  v81 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v80 = *((_DWORD *)off_49F6D0 + 9);\n    v82 = qword_4F9F48;\n    v77 = 0LL;\n    do\n    {\n      v78 = 0LL;\n      do\n      {\n        v79 = 0LL;\n        do\n        {\n          if ( v80 > 0 )\n          {\n            v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 8 * v77) + 8 * v78) + 8 * v79);\n            v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 3240) + 8 * v77) + 8 * v78) + 8 * v79);\n            v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 8 * v77) + 8 * v78) + 8 * v79);\n            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 3232) + 8 * v77) + 8 * v78) + 8 * v79);\n            v34 = v81[9];\n            v35 = 0LL;\n            do\n            {\n              v36 = *(_QWORD *)(v86 + 8 * v35);\n              v37 = *(_QWORD *)(v85 + 8 * v35);\n              v38 = *(_QWORD *)(v84 + 8 * v35);\n              v39 = *(_QWORD *)(v33 + 8 * v35);\n              v40 = *(_WORD **)v36;\n              v41 = *(_WORD **)v37;\n              *v41 = **(_WORD **)v36;\n              v42 = *(_WORD **)v38;\n              v43 = *(_WORD **)v39;\n              *v43 = **(_WORD **)v38;\n              v41[1] = v40[1];\n              v43[1] = v42[1];\n              v44 = *(_WORD **)(v36 + 8);\n              v45 = *(_WORD **)(v37 + 8);\n              *v45 = *v44;\n              v46 = *(_WORD **)(v38 + 8);\n              v47 = *(_WORD **)(v39 + 8);\n              *v47 = *v46;\n              v45[1] = v44[1];\n              v47[1] = v46[1];\n              v48 = *(_WORD **)(v36 + 16);\n              v49 = *(_WORD **)(v37 + 16);\n              *v49 = *v48;\n              v50 = *(_WORD **)(v38 + 16);\n              v51 = *(_WORD **)(v39 + 16);\n              *v51 = *v50;\n              v49[1] = v48[1];\n              v51[1] = v50[1];\n              v52 = *(_WORD **)(v36 + 24);\n              v53 = *(_WORD **)(v37 + 24);\n              *v53 = *v52;\n              v54 = *(_WORD **)(v38 + 24);\n              v55 = *(_WORD **)(v39 + 24);\n              *v55 = *v54;\n              v53[1] = v52[1];\n              v55[1] = v54[1];\n              v56 = *(_WORD **)(v36 + 32);\n              v57 = *(_WORD **)(v37 + 32);\n              *v57 = *v56;\n              v58 = *(_WORD **)(v38 + 32);\n              v59 = *(_WORD **)(v39 + 32);\n              *v59 = *v58;\n              v57[1] = v56[1];\n              v59[1] = v58[1];\n              v60 = *(_WORD **)(v36 + 40);\n              v61 = *(_WORD **)(v37 + 40);\n              *v61 = *v60;\n              v62 = *(_WORD **)(v38 + 40);\n              v63 = *(_WORD **)(v39 + 40);\n              *v63 = *v62;\n              v61[1] = v60[1];\n              v63[1] = v62[1];\n              v64 = *(_WORD **)(v36 + 48);\n              v65 = *(_WORD **)(v37 + 48);\n              *v65 = *v64;\n              v66 = *(_WORD **)(v38 + 48);\n              v67 = *(_WORD **)(v39 + 48);\n              *v67 = *v66;\n              v65[1] = v64[1];\n              v67[1] = v66[1];\n              v68 = *(_WORD **)(v36 + 56);\n              v69 = *(_WORD **)(v37 + 56);\n              *v69 = *v68;\n              v70 = *(_WORD **)(v38 + 56);\n              v71 = *(_WORD **)(v39 + 56);\n              *v71 = *v70;\n              v69[1] = v68[1];\n              v71[1] = v70[1];\n              v72 = *(_WORD **)(v36 + 64);\n              v73 = *(_WORD **)(v37 + 64);\n              *v73 = *v72;\n              v74 = *(_WORD **)(v38 + 64);\n              v75 = *(_WORD **)(v39 + 64);\n              *v75 = *v74;\n              v73[1] = v72[1];\n              ++v35;\n              v75[1] = v74[1];\n            }\n            while ( v35 < v34 );\n          }\n          ++v79;\n        }\n        while ( v79 != 2 );\n        ++v78;\n      }\n      while ( v78 != 4 );\n      result = (void *)++v77;\n    }\n    while ( v77 != 4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x464380L", 
            "funcEndAddr": "0x46494dL", 
            "funcName": "sub_464380"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_464950(signed int a1, unsigned __int64 a2, int a3, __m128 a4)\n{\n  unsigned __int64 v4; // r15\n  __int64 v5; // r14\n  __int64 v6; // rbx\n  __int64 v7; // rcx\n  signed __int64 v8; // rbp\n  signed __int64 v9; // r12\n  int v10; // er13\n  int v11; // eax\n  __int64 v12; // r8\n  __int64 v13; // r9\n  signed __int64 v14; // r11\n  __int64 v15; // rcx\n  __int64 v16; // rsi\n  __int64 v17; // rdi\n  signed __int64 result; // rax\n  __int64 v19; // rdi\n  __int64 v20; // rdi\n  __int64 v21; // rdx\n  int v22; // eax\n  __int64 v23; // rdx\n  __int64 v24; // rcx\n  signed int v25; // eax\n  __int64 v26; // rdx\n  __int64 v27; // rcx\n  __int64 v28; // r8\n  __int64 v29; // r9\n  int v30; // edi\n  _DWORD *v31; // rax\n  signed __int64 v32; // rcx\n  signed __int64 v33; // rdx\n  unsigned int v34; // eax\n  bool v35; // zf\n  signed int *v36; // r9\n  __int64 v37; // r15\n  signed __int64 v38; // rdx\n  signed __int64 v39; // r15\n  __int64 v40; // r12\n  signed __int64 v41; // rbx\n  signed __int64 v42; // rax\n  __int64 v43; // rax\n  void *v44; // r15\n  char *v45; // r15\n  signed int v46; // er11\n  signed __int64 v47; // rdi\n  __int64 v48; // rax\n  _QWORD *v49; // rbp\n  signed __int64 v50; // r8\n  __int64 v51; // r12\n  __int64 v52; // rbp\n  __int64 v53; // rdi\n  __int64 v54; // r10\n  __int64 v55; // r15\n  double *v56; // r14\n  int v57; // ebp\n  __int64 v58; // rax\n  __int64 v59; // r13\n  __int64 v60; // rbx\n  __int64 v61; // r11\n  __int64 v62; // r10\n  __int64 v63; // r14\n  signed __int64 v64; // r11\n  __int64 v65; // r12\n  signed __int64 v66; // rbp\n  signed __int64 v67; // rax\n  __int64 v68; // rdi\n  __int64 v69; // rax\n  signed __int64 v70; // rbp\n  double v71; // xmm0_8\n  int v72; // edx\n  __int64 v73; // rsi\n  __int64 v74; // rcx\n  signed __int64 v75; // rdx\n  signed int *v76; // rdx\n  unsigned int v77; // [rsp+8h] [rbp-A0h]\n  int v78; // [rsp+Ch] [rbp-9Ch]\n  int v79; // [rsp+10h] [rbp-98h]\n  int v80; // [rsp+14h] [rbp-94h]\n  __int64 v81; // [rsp+18h] [rbp-90h]\n  int v82; // [rsp+24h] [rbp-84h]\n  __int64 v83; // [rsp+28h] [rbp-80h]\n  __int64 v84; // [rsp+30h] [rbp-78h]\n  double v85; // [rsp+38h] [rbp-70h]\n  signed int *v86; // [rsp+40h] [rbp-68h]\n  int v87; // [rsp+4Ch] [rbp-5Ch]\n  __int64 v88; // [rsp+50h] [rbp-58h]\n  double *v89; // [rsp+58h] [rbp-50h]\n  __int64 v90; // [rsp+60h] [rbp-48h]\n  __int64 v91; // [rsp+68h] [rbp-40h]\n  __int64 v92; // [rsp+70h] [rbp-38h]\n\n  v4 = a2;\n  v5 = (unsigned int)a1;\n  v85 = *(double *)a4.m128_u64;\n  v79 = a3;\n  v78 = 0;\n  v6 = *((_QWORD *)off_49F6D0 + 1771);\n  v7 = *((signed int *)off_49F6D0 + 3);\n  if ( *((_DWORD *)off_49F6D0 + 3) )\n    v8 = v6 + 632LL * ((signed int)v7 - 1);\n  else\n    v8 = 0LL;\n  v9 = 632 * v7;\n  v10 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v10 == 2 )\n  {\n    v82 = 0;\n  }\n  else\n  {\n    v11 = (signed int)dest;\n    LOBYTE(v11) = *((_DWORD *)dest + 589) != 1;\n    v82 = v11;\n  }\n  v81 = v6 + v9;\n  sub_460460(a1);\n  if ( a1 || v10 != 1 )\n  {\n    v83 = v8;\n    if ( a1 > 7 )\n    {\n      switch ( a1 )\n      {\n        case 8:\n          sub_461CC0(v81);\n          break;\n        case 9:\n          v22 = sub_45F3C0(&v77, v85);\n          goto LABEL_36;\n        case 10:\n          sub_4613A0(v81, &v79);\n          break;\n        case 13:\n          v22 = sub_479D60(&v77, v85);\nLABEL_36:\n          *(_DWORD *)(v6 + v9 + 460) = v22;\n          if ( *((_DWORD *)off_49F6D0 + 18181) )\n          {\n            v24 = dword_4F9110[0] | dword_4F9114 | dword_4F9130 | dword_4F912C | dword_4F9128 | dword_4F9124 | dword_4F9120 | dword_4F9118 | dword_4F911C | dword_4F9150[0] | dword_4F914C | dword_4F9148 | dword_4F9144 | dword_4F9140 | dword_4F913C | dword_4F9134 | dword_4F9138 | dword_4F9174 | dword_4F9170 | dword_4F916C | dword_4F9168 | dword_4F9164 | dword_4F9160 | dword_4F915C | dword_4F9154 | (unsigned int)dword_4F9158;\n            v25 = sub_407DF0(\n                    0,\n                    2\n                  * (unsigned int)((dword_4F918C | (unsigned int)v24 | dword_4F9188 | dword_4F9184 | dword_4F9180 | dword_4F9178 | dword_4F917C) != 0),\n                    v23,\n                    v24,\n                    v12,\n                    v13);\n            *(_DWORD *)(v6 + v9 + 460) += 16 * (unsigned __int64)sub_407DF0(1, v25, v26, v27, v28, v29);\n          }\n          break;\n        default:\n          goto LABEL_38;\n      }\n      goto LABEL_38;\n    }\n  }\n  else\n  {\n    v15 = (signed int)(*((_DWORD *)off_49F6D0 + 39) >> 2);\n    v16 = (signed int)(*((_DWORD *)off_49F6D0 + 38) >> 2);\n    v17 = *((_QWORD *)qword_4F9E00 + v16);\n    result = 0LL;\n    if ( *(_WORD *)(v17 + 2 * v15) < 0 )\n      return result;\n    if ( *(_WORD *)(v17 + 2 * v15 + 2) < 0 )\n      return result;\n    if ( *(_WORD *)(v17 + 2 * v15 + 4) < 0 )\n      return result;\n    if ( *(_WORD *)(v17 + 2 * v15 + 6) < 0 )\n      return result;\n    v19 = *((_QWORD *)qword_4F9E00 + v16 + 1);\n    if ( *(_WORD *)(v19 + 2 * v15) < 0 )\n      return result;\n    if ( *(_WORD *)(v19 + 2 * v15 + 2) < 0 )\n      return result;\n    if ( *(_WORD *)(v19 + 2 * v15 + 4) < 0 )\n      return result;\n    if ( *(_WORD *)(v19 + 2 * v15 + 6) < 0 )\n      return result;\n    v20 = *((_QWORD *)qword_4F9E00 + v16 + 2);\n    if ( *(_WORD *)(v20 + 2 * v15) < 0 )\n      return result;\n    if ( *(_WORD *)(v20 + 2 * v15 + 2) < 0 )\n      return result;\n    if ( *(_WORD *)(v20 + 2 * v15 + 4) < 0 )\n      return result;\n    if ( *(_WORD *)(v20 + 2 * v15 + 6) < 0 )\n      return result;\n    v21 = *((_QWORD *)qword_4F9E00 + v16 + 3);\n    if ( *(_WORD *)(v21 + 2 * v15) < 0 )\n      return result;\n    if ( *(_WORD *)(v21 + 2 * v15 + 2) < 0 )\n      return result;\n    if ( *(_WORD *)(v21 + 2 * v15 + 4) < 0 )\n      return result;\n    v83 = v8;\n    if ( *(_WORD *)(v21 + 2 * v15 + 6) < 0 )\n      return result;\n  }\n  sub_42EC00((__m128i)a4);\n  if ( !(_DWORD)v5 && !*(_DWORD *)(v6 + v9 + 460) )\n  {\n    result = 0LL;\n    if ( *(_DWORD *)(v6 + v9 + 572) == 1 )\n      return result;\n  }\nLABEL_38:\n  if ( *((_DWORD *)dest + 616) == 2 && *((_DWORD *)off_49F6D0 + 6) != 1 )\n  {\n    v30 = -1;\n    if ( (_DWORD)v5 == 10 )\n      v30 = v79;\n    sub_414600(v30);\n  }\n  v31 = off_49F6D0;\n  if ( (_DWORD)v5 == 10 )\n  {\n    v32 = (signed __int64)off_49F6D0 + 512 * (signed __int64)v79 + 5272;\n    v33 = -16LL;\n    do\n    {\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0180 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 448)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A01C0 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 416)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0200 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 384)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0240 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 352)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0280 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 320)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A02C0 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 288)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0300 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 256)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0340 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 224)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0380 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 192)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A03C0 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 160)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0400 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 128)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0440 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 96)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0480 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 64)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A04C0 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 - 32)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)&xmmword_4A0500 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33)), (__m128i)0LL));\n      _mm_store_si128(\n        (__m128i *)((char *)xmmword_4A0540 + 4 * v33),\n        _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v32 + 2 * v33 + 32)), (__m128i)0LL));\n      v33 += 4LL;\n    }\n    while ( v33 );\n  }\n  else\n  {\n    v32 = -64LL;\n    do\n    {\n      *(_DWORD *)((char *)&xmmword_4A0180 + v32) = LOWORD(v31[2 * v32 + 3278]);\n      *(_DWORD *)((char *)&xmmword_4A01C0 + v32) = HIWORD(v31[2 * v32 + 3278]);\n      *(_DWORD *)((char *)&xmmword_4A0200 + v32) = LOWORD(v31[2 * v32 + 3279]);\n      *(_DWORD *)((char *)&xmmword_4A0240 + v32) = HIWORD(v31[2 * v32 + 3279]);\n      *(_DWORD *)((char *)&xmmword_4A0280 + v32) = LOWORD(v31[2 * v32 + 3280]);\n      *(_DWORD *)((char *)&xmmword_4A02C0 + v32) = HIWORD(v31[2 * v32 + 3280]);\n      *(_DWORD *)((char *)&xmmword_4A0300 + v32) = LOWORD(v31[2 * v32 + 3281]);\n      *(_DWORD *)((char *)&xmmword_4A0340 + v32) = HIWORD(v31[2 * v32 + 3281]);\n      *(_DWORD *)((char *)&xmmword_4A0380 + v32) = LOWORD(v31[2 * v32 + 3282]);\n      *(_DWORD *)((char *)&xmmword_4A03C0 + v32) = HIWORD(v31[2 * v32 + 3282]);\n      *(_DWORD *)((char *)&xmmword_4A0400 + v32) = LOWORD(v31[2 * v32 + 3283]);\n      *(_DWORD *)((char *)&xmmword_4A0440 + v32) = HIWORD(v31[2 * v32 + 3283]);\n      *(_DWORD *)((char *)&xmmword_4A0480 + v32) = LOWORD(v31[2 * v32 + 3284]);\n      *(_DWORD *)((char *)&xmmword_4A04C0 + v32) = HIWORD(v31[2 * v32 + 3284]);\n      *(_DWORD *)((char *)&xmmword_4A0500 + v32) = LOWORD(v31[2 * v32 + 3285]);\n      v33 = HIWORD(v31[2 * v32 + 3285]);\n      *(_DWORD *)((char *)xmmword_4A0540 + v32) = v33;\n      v32 += 4LL;\n    }\n    while ( v32 );\n  }\n  v31[18095] = 0;\n  v77 = 0;\n  if ( !v31[18181] || (unsigned int)v5 > 0xD || (v32 = 9728LL, !_bittest((const signed int *)&v32, v5)) )\n  {\n    if ( v31[18175] )\n      sub_42F740(&v77, v13, v14);\n  }\n  if ( (_DWORD)v5 == 10 )\n  {\n    v34 = *(_DWORD *)(v6 + v9 + 460);\n    v33 = 13LL;\n    if ( !(v34 & 0xF) )\n      v33 = 1LL;\n    v32 = (signed __int64)off_49F6D0;\n    *((_DWORD *)off_49F6D0 + 18095) = v33 + v79 + ((v34 >> 2) & 0xC);\n  }\n  v35 = *((_DWORD *)dest + 616) == 2;\n  v36 = (signed int *)off_49F6D0;\n  v88 = v9;\n  v89 = (double *)v4;\n  v84 = v6;\n  v90 = v5;\n  v87 = v10;\n  if ( v35 && *((_DWORD *)off_49F6D0 + 6) != 1 )\n  {\n    LODWORD(v58) = *((_DWORD *)dest + 726);\n    if ( (signed int)v58 <= 0 )\n    {\n      v60 = 0LL;\n    }\n    else\n    {\n      v59 = 0LL;\n      v60 = 0LL;\n      do\n      {\n        nullsub_1((unsigned int)v59, v81, v33, v32, v12, v36);\n        v61 = *((signed int *)off_49F6D0 + 42);\n        v36 = (signed int *)*((_QWORD *)off_49F6D0 + 8972);\n        v12 = qword_4F9EB0;\n        v62 = *(_QWORD *)(*((_QWORD *)off_49F6E8 + 1) + 8 * v59);\n        v86 = (signed int *)off_49F6D0;\n        v63 = *((signed int *)off_49F6D0 + 43);\n        v32 = v61 + 15;\n        v64 = v61 - 1;\n        v65 = 0LL;\n        do\n        {\n          v66 = v64;\n          do\n          {\n            v60 += v36[*(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0 + 8 * (v65 + v63)) + 2 * v66 + 2)\n                     - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v62 + 8 * (v65 + v63)) + 2 * v66 + 2)];\n            ++v66;\n          }\n          while ( v66 < v32 );\n          v67 = v63 + (v65 | 1);\n          v68 = *(_QWORD *)(qword_4F9EB0 + 8 * v67);\n          v69 = *(_QWORD *)(v62 + 8 * v67);\n          v70 = v64;\n          do\n          {\n            v33 = v36[*(unsigned __int16 *)(v68 + 2 * v70 + 2)\n                    - (unsigned __int64)*(unsigned __int16 *)(v69 + 2 * v70 + 2)];\n            v60 += v33;\n            ++v70;\n          }\n          while ( v70 < v32 );\n          v65 += 2LL;\n        }\n        while ( v65 != 16 );\n        ++v59;\n        v58 = *((signed int *)dest + 726);\n      }\n      while ( v59 < v58 );\n      v36 = v86;\n    }\n    v41 = v60 / (signed int)v58;\n    if ( !v36[18175] )\n      goto LABEL_71;\n  }\n  else\n  {\n    v37 = *((signed int *)off_49F6D0 + 42);\n    v38 = v37 + 15;\n    v39 = v37 - 1;\n    v40 = 0LL;\n    v41 = 0LL;\n    do\n    {\n      v42 = v39;\n      do\n      {\n        v41 += *(signed int *)(*((_QWORD *)off_49F6D0 + 8972)\n                             + 4\n                             * (*(unsigned __int16 *)(*(_QWORD *)(qword_4F9EB0\n                                                                + 8 * (v40 + *((signed int *)off_49F6D0 + 43)))\n                                                    + 2 * v42\n                                                    + 2)\n                              - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6424)\n                                                                                  + 8\n                                                                                  * (v40\n                                                                                   + *((signed int *)off_49F6D0 + 39)))\n                                                                      + 2 * v42\n                                                                      + 2)));\n        ++v42;\n      }\n      while ( v42 < v38 );\n      ++v40;\n    }\n    while ( v40 != 16 );\n    if ( !*((_DWORD *)off_49F6D0 + 18175) )\n      goto LABEL_71;\n  }\n  LODWORD(v81) = v36[18178];\n  if ( (signed int)v81 > 0 )\n  {\n    v43 = v36[44];\n    v44 = (void *)v36[18177];\n    v91 = qword_4F9E30;\n    v86 = (signed int *)v44;\n    v92 = v43;\n    v45 = (char *)v44 + v43;\n    v46 = 0;\n    do\n    {\n      if ( (signed int)v86 > 0 )\n      {\n        v47 = v46 + (signed __int64)v36[45];\n        v48 = *(_QWORD *)(*(_QWORD *)qword_4F9E88 + 8 * v47);\n        v49 = *(_QWORD **)(v91 + 6464);\n        v50 = v46 + (signed __int64)v36[41];\n        v51 = v49[1];\n        v52 = *(_QWORD *)(*v49 + 8 * v50);\n        v53 = *(_QWORD *)(*(_QWORD *)(qword_4F9E88 + 8) + 8 * v47);\n        v54 = v92;\n        do\n        {\n          v41 += *(signed int *)(*((_QWORD *)v36 + 8972)\n                               + 4\n                               * (*(unsigned __int16 *)(v48 + 2 * v54)\n                                - (unsigned __int64)*(unsigned __int16 *)(v52 + 2 * v54)))\n               + (signed __int64)*(signed int *)(*((_QWORD *)v36 + 8972)\n                                               + 4\n                                               * (*(unsigned __int16 *)(v53 + 2 * v54)\n                                                - (unsigned __int64)*(unsigned __int16 *)(*(_QWORD *)(v51 + 8 * v50)\n                                                                                        + 2 * v54)));\n          ++v54;\n        }\n        while ( v54 < (signed __int64)v45 );\n      }\n      ++v46;\n    }\n    while ( v46 < (signed int)v81 );\n  }\nLABEL_71:\n  sub_474EE0((__int64)qword_4A0108);\n  if ( (_BYTE)v82 )\n  {\n    v55 = v88;\n    v56 = v89;\n    if ( *(_DWORD *)(v84 + v88 + 72) || v87 == 1 && *(_DWORD *)(v84 + v88 + 460) )\n    {\n      v57 = *((_DWORD *)off_49F6D0 + 30);\n      v78 = sub_4323D0(1);\n      sub_47FB70(v57, v77, &v80, &v77);\n      v78 -= v80;\n      *((_DWORD *)off_49F6D0 + 30) = v57;\n    }\n    else\n    {\n      sub_47FB70(*((_DWORD *)off_49F6D0 + 30) + 1, v77, &v78, &v77);\n      sub_47FB70(*((_DWORD *)off_49F6D0 + 30), v77, &v80, &v77);\n      v78 -= v80;\n    }\n  }\n  else\n  {\n    v78 = sub_4323D0(1);\n    v56 = v89;\n    v55 = v88;\n  }\n  sub_4750F0((__int64)qword_4A0108);\n  v71 = fmax(0.5, (double)v78) * v85 + (double)(signed int)v41;\n  result = 0LL;\n  if ( v71 - *v56 < -1.0e-12\n    && (*((_DWORD *)off_49F6D0 + 18167) + *((_DWORD *)off_49F6D0 + 10) || !v41 || *((_DWORD *)off_49F6D0 + 18176) != 1) )\n  {\n    if ( (_DWORD)v90 )\n      goto LABEL_98;\n    if ( !*((_DWORD *)off_49F6D0 + 18100) )\n      goto LABEL_98;\n    v72 = *((_DWORD *)off_49F6D0 + 6);\n    if ( v72 == 1 )\n    {\n      if ( *(_DWORD *)(v84 + v55 + 460) )\n        goto LABEL_98;\n    }\n    v73 = *((signed int *)off_49F6D0 + 3);\n    if ( !(v73 & 1) || *(_DWORD *)(v83 + 72) || v72 == 1 && *(_DWORD *)(v83 + 460) )\n      goto LABEL_98;\n    v74 = *((_QWORD *)off_49F6D0 + 1771);\n    v75 = 632 * v73;\n    if ( *(_DWORD *)(v74 + 632 * v73 + 552) )\n    {\n      v76 = (signed int *)(v74 + v75 + 536);\n    }\n    else\n    {\n      if ( !*(_DWORD *)(v74 + v75 + 556) )\n      {\n        if ( *(_DWORD *)(v84 + v55 + 532) )\n          return result;\nLABEL_98:\n        *v56 = v71;\n        return 1LL;\n      }\n      v76 = (signed int *)(v74 + v75 + 540);\n    }\n    if ( *(_DWORD *)(v74 + 632LL * *v76 + 532) != *(_DWORD *)(v84 + v55 + 532) )\n      return result;\n    goto LABEL_98;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x464950L", 
            "funcEndAddr": "0x4654f0L", 
            "funcName": "sub_464950"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4654F0(int a1)\n{\n  signed int *v1; // r10\n  __int64 v2; // rdx\n  __int64 v3; // rax\n  signed __int64 v4; // rcx\n  int v5; // eax\n  __int64 v6; // r14\n  __int64 v7; // r8\n  signed __int64 v8; // r9\n  int v9; // er11\n  __int64 v10; // rbp\n  __int64 v11; // rbx\n  signed __int64 v12; // rcx\n  signed __int64 v13; // rbp\n  __int64 v14; // rdx\n  signed __int64 v15; // rax\n  signed __int64 v16; // rax\n  bool v17; // sf\n  unsigned __int8 v18; // of\n  __int64 v19; // rax\n  signed __int64 v20; // rdx\n  signed __int64 v21; // rsi\n  __int64 v22; // rdi\n  __int64 v23; // r9\n  __int64 v24; // rdx\n  signed __int64 v25; // rax\n  signed __int64 v26; // rsi\n  __int64 v27; // rcx\n  __int64 v28; // r15\n  signed __int64 v29; // rbx\n  unsigned __int64 v30; // rax\n  signed __int64 v31; // rbp\n  __int64 v32; // r13\n  __int64 v33; // r14\n  signed __int64 v34; // rcx\n  _QWORD *v35; // rax\n  __int64 v36; // r12\n  __int64 v37; // rdx\n  __int64 v38; // rdi\n  signed __int64 v39; // rax\n  __int128 *v40; // rcx\n  unsigned __int64 v41; // rsi\n  __int128 *v42; // r15\n  __int128 *v43; // r9\n  unsigned __int64 v44; // r11\n  unsigned __int64 v45; // r8\n  unsigned __int64 v46; // rax\n  bool v47; // ST48_1\n  bool v48; // ST40_1\n  bool v49; // cf\n  unsigned __int64 v50; // rcx\n  bool v51; // di\n  bool v52; // r8\n  bool v53; // r11\n  bool v54; // si\n  bool v55; // cl\n  signed __int64 v56; // rax\n  signed __int64 v57; // r8\n  signed __int64 v58; // r11\n  unsigned __int64 v59; // rsi\n  __int128 v60; // xmm1\n  __int128 v61; // xmm1\n  __int128 v62; // xmm1\n  __int128 v63; // xmm1\n  __int128 v64; // xmm1\n  __int128 v65; // xmm1\n  __int64 v66; // rbp\n  __int64 v67; // r8\n  signed __int64 v68; // r15\n  signed __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // r11\n  __int64 v72; // r14\n  __int64 v73; // r9\n  __int64 v74; // r12\n  __int64 v75; // r15\n  signed __int64 v83; // rax\n  signed __int64 v84; // rsi\n  __int128 v85; // xmm1\n  signed __int64 v86; // rax\n  __int64 v87; // rax\n  __int64 v88; // rcx\n  signed __int64 v89; // rdx\n  void *v90; // rax\n  void *v91; // rax\n  _QWORD *result; // rax\n  __int64 v93; // rdx\n  __int64 v94; // r8\n  signed __int64 v95; // rsi\n  signed __int64 v96; // r10\n  signed __int64 v97; // r11\n  signed __int64 v98; // rbx\n  __int64 v99; // rcx\n  __int64 v100; // rdi\n  __int16 *v101; // rbp\n  __int64 v102; // [rsp+0h] [rbp-C8h]\n  __int64 v103; // [rsp+0h] [rbp-C8h]\n  signed __int64 v104; // [rsp+18h] [rbp-B0h]\n  __int64 v105; // [rsp+20h] [rbp-A8h]\n  signed __int64 v106; // [rsp+28h] [rbp-A0h]\n  __int64 v107; // [rsp+28h] [rbp-A0h]\n  bool v108; // [rsp+30h] [rbp-98h]\n  __int64 v109; // [rsp+30h] [rbp-98h]\n  bool v110; // [rsp+38h] [rbp-90h]\n  signed __int64 v111; // [rsp+38h] [rbp-90h]\n  signed __int64 v112; // [rsp+40h] [rbp-88h]\n  int v113; // [rsp+50h] [rbp-78h]\n  int v114; // [rsp+54h] [rbp-74h]\n  __int64 v115; // [rsp+58h] [rbp-70h]\n  __int64 v116; // [rsp+60h] [rbp-68h]\n  __int64 v117; // [rsp+68h] [rbp-60h]\n  __int64 v118; // [rsp+70h] [rbp-58h]\n  signed __int64 v119; // [rsp+78h] [rbp-50h]\n  __int64 v120; // [rsp+88h] [rbp-40h]\n\n  v1 = (signed int *)off_49F6D0;\n  v2 = *((_QWORD *)off_49F6D0 + 1771);\n  v3 = *((signed int *)off_49F6D0 + 3);\n  v114 = *((_DWORD *)off_49F6D0 + 6);\n  dword_4FA0A8 = a1;\n  v4 = 632 * v3;\n  dword_4FA0A0 = *(_DWORD *)(v2 + 632 * v3 + 524);\n  dword_4FA0A4 = *((_DWORD *)off_49F6D0 + 18095);\n  v5 = 0;\n  v113 = a1;\n  if ( a1 == 1 )\n    v5 = *(_DWORD *)(v2 + v4 + 580);\n  dword_4FA0AC = v5;\n  word_4F9FA8 = *(_WORD *)(v2 + v4 + 472);\n  word_4F9FB0 = *(_WORD *)(v2 + v4 + 488);\n  word_4F9FAA = *(_WORD *)(v2 + v4 + 476);\n  word_4F9FB2 = *(_WORD *)(v2 + v4 + 492);\n  word_4F9FAC = *(_WORD *)(v2 + v4 + 480);\n  word_4F9FB4 = *(_WORD *)(v2 + v4 + 496);\n  word_4F9FAE = *(_WORD *)(v2 + v4 + 484);\n  word_4F9FB6 = *(_WORD *)(v2 + v4 + 500);\n  v6 = *((signed int *)off_49F6D0 + 37);\n  v7 = *((_QWORD *)off_49F6D0 + 13);\n  v105 = v2;\n  v104 = v4;\n  v8 = v2 + v4 + 332;\n  v9 = 0;\n  do\n  {\n    v10 = v1[36];\n    v11 = v9;\n    v12 = v7 + 8 * v10;\n    v13 = v10 - 1;\n    v14 = 0LL;\n    do\n    {\n      dword_4F9890[v14 + v11] = *(_DWORD *)(*(_QWORD *)(v12 + 8 * v14) + 4 * v6);\n      dword_4F9850[v14 + v11] = *(_DWORD *)(v8 + 4LL * v9 + 4 * v14);\n      v15 = v14++ + v13 + 1;\n    }\n    while ( v15 < v1[36] + 3LL );\n    v16 = v1[37] + 3LL;\n    v9 += v14;\n    v18 = __OFSUB__(v6, v16);\n    v17 = v6++ - v16 < 0;\n  }\n  while ( v17 ^ v18 );\n  v19 = *((_QWORD *)v1 + 14);\n  v20 = v105 + v104 + 408;\n  v21 = -4LL;\n  v22 = 0LL;\n  do\n  {\n    dword_4F9910[v22] = *(_DWORD *)(*(_QWORD *)(v19 + 8LL * ((signed int)v21 + v1[36] + 4)) + 4LL * v1[37]);\n    dword_4F98D0[v22] = *(_DWORD *)(v20 + v22 * 4 - 12);\n    dword_4F9914[v22] = *(_DWORD *)(*(_QWORD *)(v19 + 8LL * ((signed int)v21 + v1[36] + 4)) + 4LL * v1[37] + 4);\n    dword_4F98D4[v22] = *(_DWORD *)(v20 + v22 * 4 - 8);\n    dword_4F9918[v22] = *(_DWORD *)(*(_QWORD *)(v19 + 8LL * ((signed int)v21 + v1[36] + 4)) + 4LL * v1[37] + 8);\n    dword_4F98D8[v22] = *(_DWORD *)(v20 + v22 * 4 - 4);\n    dword_4F991C[v22] = *(_DWORD *)(*(_QWORD *)(v19 + 8LL * ((signed int)v21 + v1[36] + 4)) + 4LL * v1[37] + 12);\n    dword_4F98DC[v22] = *(_DWORD *)(v20 + v22 * 4);\n    v22 += 4LL;\n    ++v21;\n  }\n  while ( v21 );\n  v23 = qword_4F9E30;\n  v24 = v1[38];\n  v117 = v1[39];\n  v25 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v117;\n  v26 = -128LL;\n  do\n  {\n    v27 = *(_QWORD *)(v25 + v26 + 128);\n    word_4F6F50[2 * v26] = *(_WORD *)(v27 + 2 * v24);\n    word_4F6F52[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 2);\n    word_4F6F54[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 4);\n    word_4F6F56[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 6);\n    word_4F6F58[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 8);\n    word_4F6F5A[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 10);\n    word_4F6F5C[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 12);\n    word_4F6F5E[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 14);\n    word_4F6F60[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 16);\n    word_4F6F62[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 18);\n    word_4F6F64[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 20);\n    word_4F6F66[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 22);\n    word_4F6F68[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 24);\n    word_4F6F6A[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 26);\n    word_4F6F6C[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 28);\n    word_4F6F6E[2 * v26] = *(_WORD *)(v27 + 2 * v24 + 30);\n    v26 += 8LL;\n  }\n  while ( v26 );\n  v118 = v24;\n  if ( v1[18175] )\n  {\n    v28 = v1[18178];\n    if ( v28 > 0 )\n    {\n      v29 = v1[18177];\n      v30 = (unsigned __int64)(v29 - 16) >> 4;\n      v120 = ((_BYTE)v30 + 1) & 1;\n      v119 = v120 - 1 - v30;\n      v31 = 3LL;\n      v32 = 0LL;\n      v33 = 0LL;\n      v116 = v23;\n      v115 = v1[18178];\n      while ( (signed int)v29 <= 0 )\n      {\nLABEL_36:\n        ++v33;\n        v31 += 2LL;\n        v32 += 32LL;\n        if ( v33 >= v28 )\n          goto LABEL_37;\n      }\n      v34 = v1[41] + (signed __int64)(signed int)v33;\n      v35 = *(_QWORD **)(v23 + 6464);\n      v36 = *(_QWORD *)(*v35 + 8 * v34);\n      v37 = *(_QWORD *)(v35[1] + 8 * v34);\n      v38 = v1[40];\n      if ( (unsigned int)v29 >= 0x10 )\n      {\n        v40 = &xmmword_4F6950[2 * v33];\n        v41 = 32 * v33 + 2 * v29 + 5204304;\n        v42 = &xmmword_4F6B50[2 * v33];\n        v106 = 2 * v33;\n        v43 = (__int128 *)((char *)&xmmword_4F6B50[2 * v33] + 2 * v29);\n        v44 = v36 + 2 * v38;\n        v45 = v36 + 2 * v29 + 2 * v38;\n        v46 = v37 + 2 * v29 + 2 * v38;\n        v47 = v40 < v43;\n        v48 = (unsigned __int64)v42 < v41;\n        v110 = (unsigned __int64)v40 < v45;\n        v108 = v44 < v41;\n        v49 = (unsigned __int64)v40 < v46;\n        v102 = v1[40];\n        v50 = v37 + 2 * v38;\n        v51 = v50 < v41;\n        v52 = (unsigned __int64)v42 < v45;\n        v53 = v44 < (unsigned __int64)v43;\n        v54 = (unsigned __int64)v42 < v46;\n        v55 = v50 < (unsigned __int64)v43;\n        if ( v48 && v47 )\n        {\n          v39 = 0LL;\n          v23 = v116;\n          v28 = v115;\n        }\n        else\n        {\n          v23 = v116;\n          v28 = v115;\n          if ( v108 && v110 )\n          {\n            v39 = 0LL;\n          }\n          else\n          {\n            if ( (!v51 || !v49) && (!v53 || !v52) )\n            {\n              v39 = 0LL;\n              v38 = v1[40];\n              if ( !v55 || !v54 )\n              {\n                if ( (unsigned __int64)(v29 - 16) >> 4 )\n                {\n                  v56 = v37 + 2 * v102 + 48;\n                  v57 = v36 + 2 * v102 + 48;\n                  v58 = v119;\n                  v59 = 0LL;\n                  do\n                  {\n                    v60 = *(_OWORD *)(v57 + 2 * v59 - 32);\n                    xmmword_4F6920[v59 / 8 + v31] = *(_OWORD *)(v36 + 2 * v102 + 2 * v59);\n                    xmmword_4F6930[v59 / 8 + v31] = v60;\n                    v61 = *(_OWORD *)(v56 + 2 * v59 - 32);\n                    xmmword_4F6B20[v59 / 8 + v31] = *(_OWORD *)(v37 + 2 * v102 + 2 * v59);\n                    xmmword_4F6B30[v59 / 8 + v31] = v61;\n                    v62 = *(_OWORD *)(v57 + 2 * v59);\n                    xmmword_4F6940[v59 / 8 + v31] = *(_OWORD *)(v57 + 2 * v59 - 16);\n                    xmmword_4F6950[v59 / 8 + v31] = v62;\n                    v63 = *(_OWORD *)(v56 + 2 * v59);\n                    xmmword_4F6B40[v59 / 8 + v31] = *(_OWORD *)(v56 + 2 * v59 - 16);\n                    xmmword_4F6B50[v59 / 8 + v31] = v63;\n                    v59 += 32LL;\n                    v58 += 2LL;\n                  }\n                  while ( v58 );\n                }\n                else\n                {\n                  v59 = 0LL;\n                }\n                v38 = v102;\n                if ( v120 )\n                {\n                  v64 = *(_OWORD *)(v36 + 2 * (v59 + v102) + 16);\n                  xmmword_4F6950[v59 / 8 + v106] = *(_OWORD *)(v36 + 2 * (v59 + v102));\n                  xmmword_4F6960[v59 / 8 + v106] = v64;\n                  v65 = *(_OWORD *)(v37 + 2 * (v59 + v102) + 16);\n                  xmmword_4F6B50[v59 / 8 + v106] = *(_OWORD *)(v37 + 2 * (v59 + v102));\n                  xmmword_4F6B60[v59 / 8 + v106] = v65;\n                }\n                v39 = v29 & 0xFFFFFFFFFFFFFFF0LL;\n                if ( (v29 & 0xFFFFFFFFFFFFFFF0LL) == v29 )\n                  goto LABEL_36;\n              }\n              goto LABEL_35;\n            }\n            v39 = 0LL;\n          }\n        }\n        v38 = v1[40];\n      }\n      else\n      {\n        v39 = 0LL;\n      }\n      do\n      {\nLABEL_35:\n        *(_WORD *)((char *)xmmword_4F6950 + 2 * v39 + v32) = *(_WORD *)(v36 + 2 * v38 + 2 * v39);\n        *(_WORD *)((char *)xmmword_4F6B50 + 2 * v39 + v32) = *(_WORD *)(v37 + 2 * v38 + 2 * v39);\n        ++v39;\n      }\n      while ( v39 < v29 );\n      goto LABEL_36;\n    }\n  }\nLABEL_37:\n  v66 = v118;\n  if ( *((_DWORD *)dest + 616) == 2 && v1[6] != 1 )\n  {\n    v111 = *((signed int *)dest + 726);\n    if ( v111 > 0 )\n    {\n      v109 = *((_QWORD *)off_49F6E8 + 1);\n      v107 = *((_QWORD *)off_49F6E8 + 3);\n      v67 = (signed int)v117 + 15;\n      v68 = v118 + 16;\n      v69 = 0LL;\n      do\n      {\n        v70 = *(_QWORD *)(v109 + 8 * v69);\n        v112 = v69;\n        v71 = *(_QWORD *)(v107 + 8 * v69);\n        v72 = v117;\n        v103 = *(_QWORD *)(v109 + 8 * v69);\n        do\n        {\n          v73 = *(_QWORD *)(v70 + 8 * v72);\n          v74 = *(_QWORD *)(v71 + 8 * v72);\n          if ( v74 + 2 * v66 < (unsigned __int64)(v73 + 2 * v68) && v73 + 2 * v66 < (unsigned __int64)(v74 + 2 * v68) )\n          {\n            v86 = v66 - 1;\n            do\n            {\n              *(_WORD *)(v74 + 2 * v86 + 2) = *(_WORD *)(v73 + 2 * v86 + 2);\n              ++v86;\n            }\n            while ( v86 < v118 + 15 );\n          }\n          else\n          {\n            v75 = 0LL;\n            v67 = (signed int)v117 + 15;\n            v66 = v118;\n            v83 = 2 * (v118 + v75) + 16;\n            v84 = -1LL;\n            do\n            {\n              v85 = *(_OWORD *)(v73 + v83);\n              *(_OWORD *)(v74 + v83 - 16) = *(_OWORD *)(v73 + v83 - 16);\n              *(_OWORD *)(v74 + v83) = v85;\n              v83 += 32LL;\n              ++v84;\n            }\n            while ( v84 );\n            v68 = v118 + 16;\n            v70 = v103;\n          }\n          v18 = __OFSUB__(v72, v67);\n          v17 = v72++ - v67 < 0;\n        }\n        while ( v17 ^ v18 );\n        v69 = v112 + 1;\n      }\n      while ( v112 + 1 < v111 );\n    }\n  }\n  if ( v113 || v114 == 1 )\n  {\n    v90 = qword_4A00D0;\n    qword_4A00D0 = (void *)*((_QWORD *)v1 + 1767);\n    *((_QWORD *)v1 + 1767) = v90;\n    v91 = qword_4A00E0;\n    qword_4A00E0 = (void *)*((_QWORD *)v1 + 1768);\n    *((_QWORD *)v1 + 1768) = v91;\n    v88 = v105;\n    v89 = v104;\n    dword_4FA0B0 = *(_DWORD *)(v105 + v104 + 460);\n    v87 = *(_QWORD *)(v105 + v104 + 464);\n  }\n  else\n  {\n    dword_4FA0B0 = 0;\n    v87 = 0LL;\n    v88 = v105;\n    v89 = v104;\n  }\n  qword_4F9DF0 = v87;\n  dword_4FA0F0 = *(_DWORD *)(v88 + v89 + 572);\n  result = *(_QWORD **)(qword_4F9E30 + 6480);\n  v93 = v1[36];\n  v94 = *(_QWORD *)(*result + 8 * v93 + 24);\n  v95 = 2LL * v1[37];\n  v96 = v95 + *(_QWORD *)(*result + 8 * v93 + 16);\n  v97 = v95 + *(_QWORD *)(*result + 8 * v93 + 8);\n  v98 = v95 + *(_QWORD *)(*result + 8 * v93);\n  v99 = 0LL;\n  do\n  {\n    word_4F9B80[2 * v99] = *(_WORD *)(v98 + v99);\n    if ( v114 == 1 )\n    {\n      word_4F9B60[2 * v99] = *(_WORD *)(v99 + v95 + *(_QWORD *)(result[1] + 8 * v93));\n      word_4F9B82[2 * v99] = *(_WORD *)(v97 + v99);\n      word_4F9B62[2 * v99] = *(_WORD *)(v99 + v95 + *(_QWORD *)(result[1] + 8 * v93 + 8));\n      word_4F9B84[2 * v99] = *(_WORD *)(v96 + v99);\n      word_4F9B64[2 * v99] = *(_WORD *)(v99 + v95 + *(_QWORD *)(result[1] + 8 * v93 + 16));\n      word_4F9B86[2 * v99] = *(_WORD *)(v94 + v95 + v99);\n      v100 = *(_QWORD *)(result[1] + 8 * v93 + 24);\n      v101 = word_4F9B60;\n    }\n    else\n    {\n      word_4F9B82[2 * v99] = *(_WORD *)(v97 + v99);\n      word_4F9B84[2 * v99] = *(_WORD *)(v96 + v99);\n      v100 = v94;\n      v101 = word_4F9B80;\n    }\n    v101[2 * v99 + 3] = *(_WORD *)(v99 + v95 + v100);\n    v99 += 2LL;\n  }\n  while ( v99 != 8 );\n  return result;\n}\n", 
            "funcStartAddr": "0x4654f0L", 
            "funcEndAddr": "0x465f6bL", 
            "funcName": "sub_4654F0"
        }, 
        {
            "decompiledFuncCode": "void *sub_465F70()\n{\n  signed int *v0; // r15\n  __int64 v1; // r13\n  __int64 v2; // rcx\n  int v3; // edx\n  __int64 v4; // r12\n  __int64 v5; // r9\n  __int64 *v6; // r8\n  signed __int64 v7; // rsi\n  __int64 v8; // rsi\n  unsigned __int16 *v9; // rdi\n  __int64 v10; // rbp\n  __int64 v11; // rax\n  signed int v12; // edi\n  __int64 v13; // r10\n  __int64 v14; // rsi\n  signed __int64 v15; // r9\n  __int64 v16; // r11\n  __int64 v17; // r14\n  signed __int64 v18; // rax\n  signed __int64 v19; // rbx\n  __int64 v20; // rcx\n  _QWORD *v21; // r10\n  char *v22; // r11\n  int v23; // eax\n  __int64 v24; // rcx\n  __int64 v25; // rdi\n  __int64 v26; // r13\n  __int64 v27; // r12\n  __int64 v28; // r14\n  _OWORD **v29; // rbp\n  _OWORD **v30; // rbx\n  _OWORD *v31; // rcx\n  _OWORD *v32; // rdx\n  signed __int64 v33; // r9\n  signed __int64 v34; // r8\n  signed __int64 v35; // rsi\n  signed __int64 v36; // rdi\n  signed __int64 v37; // rax\n  _OWORD *v38; // rcx\n  _OWORD *v39; // rdx\n  signed __int64 v40; // rbx\n  signed __int64 v41; // rbp\n  signed __int64 v42; // rsi\n  signed __int64 v43; // rdi\n  signed __int64 v44; // rax\n  __int64 v45; // r9\n  __int64 v46; // r8\n  _OWORD *v47; // rcx\n  _OWORD *v48; // rdx\n  signed __int64 v49; // rbp\n  signed __int64 v50; // rbx\n  signed __int64 v51; // rsi\n  signed __int64 v52; // rdi\n  signed __int64 v53; // rax\n  _OWORD *v54; // rcx\n  _OWORD *v55; // rdx\n  signed __int64 v56; // rbx\n  signed __int64 v57; // rbp\n  signed __int64 v58; // rsi\n  signed __int64 v59; // rdi\n  signed __int64 v60; // rax\n  __int64 v61; // r9\n  __int64 v62; // r8\n  _OWORD *v63; // rcx\n  _OWORD *v64; // rdx\n  signed __int64 v65; // rbp\n  signed __int64 v66; // rbx\n  signed __int64 v67; // rsi\n  signed __int64 v68; // rdi\n  signed __int64 v69; // rax\n  _OWORD *v70; // rcx\n  _OWORD *v71; // rdx\n  signed __int64 v72; // rbx\n  signed __int64 v73; // rbp\n  signed __int64 v74; // rsi\n  signed __int64 v75; // rdi\n  signed __int64 v76; // rax\n  __int64 v77; // r9\n  __int64 v78; // r8\n  _OWORD *v79; // rcx\n  _OWORD *v80; // rbx\n  signed __int64 v81; // rdi\n  signed __int64 v82; // rdx\n  signed __int64 v83; // rsi\n  signed __int64 v84; // rbp\n  signed __int64 v85; // rax\n  _OWORD *v86; // rcx\n  _OWORD *v87; // rdx\n  signed __int64 v88; // rbx\n  signed __int64 v89; // rbp\n  signed __int64 v90; // rsi\n  signed __int64 v91; // rdi\n  signed __int64 v92; // rax\n  signed __int64 v93; // rax\n  bool v94; // sf\n  unsigned __int8 v95; // of\n  __int64 v96; // rcx\n  signed __int64 v97; // rdx\n  __int64 v98; // rax\n  __int64 v99; // rsi\n  _DWORD *v100; // rdi\n  _DWORD *v101; // rbp\n  _DWORD *v102; // rdi\n  _DWORD *v103; // rax\n  bool v104; // zf\n  _DWORD *v105; // rcx\n  int v106; // eax\n  signed __int64 v107; // rsi\n  int v108; // edx\n  int v109; // eax\n  int v110; // edx\n  int v111; // eax\n  int v112; // edx\n  int v113; // eax\n  int v114; // edx\n  int v115; // eax\n  int v116; // ebp\n  int v117; // eax\n  unsigned int *v118; // r12\n  _QWORD *v119; // rdx\n  signed int *v120; // rsi\n  signed __int64 v121; // rax\n  signed __int64 v122; // rax\n  __int64 v123; // r15\n  __int64 v124; // r8\n  __int64 *v125; // rax\n  __int64 v126; // rax\n  __int64 v127; // rdi\n  signed __int64 v128; // rbx\n  _WORD *v129; // rax\n  _WORD *v130; // rdi\n  __int64 v131; // r14\n  _QWORD *v132; // r9\n  signed int v133; // er10\n  signed int v134; // eax\n  __int64 v135; // rbp\n  __int64 v136; // rdi\n  _QWORD *v137; // r11\n  _QWORD *v138; // r14\n  __int64 v139; // rcx\n  __int64 v140; // rbp\n  _WORD *v141; // rcx\n  __int64 v142; // r13\n  signed int v143; // ebp\n  __int64 v144; // r13\n  int v145; // ebx\n  unsigned int v146; // eax\n  signed int v147; // ecx\n  __int64 v148; // rdi\n  __int64 v149; // rcx\n  signed int v150; // ecx\n  __int64 v151; // rdi\n  __int64 v152; // rax\n  unsigned int v153; // ecx\n  _QWORD *v154; // rdx\n  signed int *v155; // rsi\n  __int64 v156; // r14\n  __int64 v157; // r8\n  signed int v158; // ebx\n  __int64 v159; // r13\n  __int64 v160; // rax\n  __int64 v161; // rdi\n  int v162; // ebp\n  __int64 *v163; // rbp\n  __int64 v164; // r9\n  __int64 v165; // r12\n  signed __int64 v166; // r11\n  _WORD *v167; // rdi\n  __int64 v168; // rbp\n  _WORD *v169; // rbp\n  __int64 v170; // r9\n  __int64 v171; // r15\n  signed __int64 v172; // rbp\n  __int64 v173; // r9\n  __int64 v174; // rdi\n  _WORD *v175; // rbp\n  __int64 v176; // rbp\n  signed __int64 v177; // r9\n  signed int *v178; // r14\n  __int64 v179; // rcx\n  __int64 v180; // rdx\n  _DWORD *v181; // rsi\n  int v182; // edi\n  __int64 v183; // r13\n  __int64 v184; // r10\n  int v185; // er9\n  __int64 v186; // rdi\n  __int64 v187; // rbp\n  signed __int64 v188; // rsi\n  signed __int64 v189; // rdi\n  __int64 v190; // rbx\n  signed __int64 v191; // rcx\n  signed __int64 v192; // rax\n  __int64 v193; // rcx\n  __int64 v194; // rsi\n  signed __int64 v195; // rdi\n  signed __int64 v196; // rax\n  __int64 v197; // rcx\n  signed __int64 v198; // rdx\n  signed __int64 v199; // rsi\n  __int64 v200; // rdi\n  _DWORD *v201; // r8\n  __int64 v202; // rsi\n  __int64 v203; // r9\n  __int64 v204; // r10\n  int v205; // er11\n  __int64 v206; // rax\n  signed __int64 v207; // rdx\n  signed __int64 v208; // rbp\n  signed __int64 v209; // rax\n  __int64 v210; // rcx\n  signed __int64 v211; // rbx\n  signed __int64 v212; // rax\n  __int64 v213; // rcx\n  __int64 v215; // [rsp+8h] [rbp-B0h]\n  __int64 v216; // [rsp+8h] [rbp-B0h]\n  signed __int64 v217; // [rsp+8h] [rbp-B0h]\n  int v218; // [rsp+14h] [rbp-A4h]\n  signed __int64 v219; // [rsp+18h] [rbp-A0h]\n  unsigned int *v220; // [rsp+20h] [rbp-98h]\n  __int64 v221; // [rsp+28h] [rbp-90h]\n  __int64 v222; // [rsp+30h] [rbp-88h]\n  char *v223; // [rsp+30h] [rbp-88h]\n  __int64 v224; // [rsp+38h] [rbp-80h]\n  signed __int64 v225; // [rsp+40h] [rbp-78h]\n  char *v226; // [rsp+40h] [rbp-78h]\n  __int64 v227; // [rsp+48h] [rbp-70h]\n  unsigned int v228; // [rsp+50h] [rbp-68h]\n  char *v229; // [rsp+58h] [rbp-60h]\n  signed __int64 v230; // [rsp+58h] [rbp-60h]\n  char *v231; // [rsp+60h] [rbp-58h]\n  _QWORD *v232; // [rsp+60h] [rbp-58h]\n  int v233; // [rsp+68h] [rbp-50h]\n  int v234; // [rsp+6Ch] [rbp-4Ch]\n  _DWORD *v235; // [rsp+70h] [rbp-48h]\n  signed __int64 v236; // [rsp+78h] [rbp-40h]\n  _QWORD *v237; // [rsp+80h] [rbp-38h]\n\n  v0 = (signed int *)off_49F6D0;\n  v1 = *((_QWORD *)off_49F6D0 + 1771);\n  v2 = *((signed int *)off_49F6D0 + 3);\n  v218 = dword_4FA0A8;\n  v3 = 0;\n  v233 = *((_DWORD *)off_49F6D0 + 6);\n  v4 = *((_QWORD *)off_49F6D0 + 13);\n  v5 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v6 = *(__int64 **)(qword_4F9E30 + 6464);\n  v228 = 0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v7 = 632 * v2;\n    if ( *(_DWORD *)(v1 + 632 * v2 + 532) )\n      v228 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  }\n  else\n  {\n    v7 = 632 * v2;\n  }\n  v219 = v7;\n  v221 = v7 + v1;\n  LOBYTE(v3) = v233 == 1;\n  v234 = v3;\n  v8 = qword_4F9F48 + 8;\n  v9 = (unsigned __int16 *)&unk_4F6D50;\n  v10 = 0LL;\n  do\n  {\n    v11 = 0LL;\n    do\n    {\n      *(_WORD *)(*(_QWORD *)(v5 + 8 * (v0[39] + (signed __int64)(signed int)v10)) + 2LL * ((signed int)v11 + v0[38])) = v9[v11];\n      if ( v0[18100] )\n        *(_DWORD *)(v8 + 4 * v11) = v9[v11];\n      ++v11;\n    }\n    while ( v11 != 16 );\n    ++v10;\n    v9 += 16;\n    v8 += 64LL;\n  }\n  while ( v10 != 16 );\n  if ( v0[18175] && v0[18178] > 0 )\n  {\n    v12 = v0[18177];\n    v13 = qword_4F9F48 + 2056;\n    v14 = 0LL;\n    v15 = 0LL;\n    do\n    {\n      if ( v12 > 0 )\n      {\n        v16 = *v6;\n        v17 = v6[1];\n        v18 = 0LL;\n        do\n        {\n          v19 = v0[41] + (signed __int64)(signed int)v15;\n          v20 = (signed int)v18 + v0[40];\n          *(_WORD *)(*(_QWORD *)(v16 + 8 * v19) + 2 * v20) = *(_WORD *)((char *)xmmword_4F6950 + 2 * v18 + v14);\n          *(_WORD *)(*(_QWORD *)(v17 + 8 * v19) + 2 * v20) = *(_WORD *)((char *)xmmword_4F6B50 + 2 * v18 + v14);\n          if ( v0[18100] )\n          {\n            *(_DWORD *)(v13 + 4 * v18 - 1024) = *(unsigned __int16 *)((char *)xmmword_4F6950 + 2 * v18 + v14);\n            *(_DWORD *)(v13 + 4 * v18) = *(unsigned __int16 *)((char *)xmmword_4F6B50 + 2 * v18 + v14);\n            v12 = v0[18177];\n          }\n          ++v18;\n        }\n        while ( v18 < v12 );\n      }\n      ++v15;\n      v14 += 32LL;\n      v13 += 64LL;\n    }\n    while ( v15 < v0[18178] );\n  }\n  v21 = qword_4A00D0;\n  qword_4A00D0 = (void *)*((_QWORD *)v0 + 1767);\n  *((_QWORD *)v0 + 1767) = v21;\n  v22 = (char *)qword_4A00E0;\n  qword_4A00E0 = (void *)*((_QWORD *)v0 + 1768);\n  *((_QWORD *)v0 + 1768) = v22;\n  v23 = dword_4FA0B0;\n  *(_DWORD *)(v1 + v219 + 460) = dword_4FA0B0;\n  v24 = qword_4F9DF0;\n  *(_QWORD *)(v1 + v219 + 464) = qword_4F9DF0;\n  *(_DWORD *)(v1 + v219 + 72) = v218;\n  v224 = v1;\n  v227 = v4;\n  if ( v0[18100] )\n  {\n    v25 = qword_4F9F48;\n    *(_DWORD *)(qword_4F9F48 + 3224) = v218;\n    *(_DWORD *)(v25 + 3328) = v0[18095];\n    *(_DWORD *)(v25 + 3208) = v23;\n    *(_QWORD *)(v25 + 3216) = v24;\n    *(_DWORD *)(v25 + 3096) = v218;\n    *(_DWORD *)(v25 + 3348) = *(_DWORD *)(v1 + v219 + 592);\n    *(_DWORD *)(v25 + 3352) = *(_DWORD *)(v1 + v219 + 596);\n    v222 = v25;\n    *(_DWORD *)(v25 + 3344) = *(_DWORD *)(v1 + v219 + 12);\n    if ( v0[18173] >= -3 )\n    {\n      v215 = *(_QWORD *)(v25 + 3080);\n      v26 = 0LL;\n      do\n      {\n        v27 = v21[v26];\n        v28 = *(_QWORD *)(v215 + 8 * v26);\n        v29 = *(_OWORD ***)v27;\n        v30 = *(_OWORD ***)v28;\n        v31 = **(_OWORD ***)v27;\n        v32 = **(_OWORD ***)v28;\n        if ( v32 >= (_OWORD *)((char *)v31 + 260) || v31 >= (_OWORD *)((char *)v32 + 260) )\n        {\n          *v32 = *v31;\n          v32[1] = v31[1];\n          v32[2] = v31[2];\n          v32[3] = v31[3];\n          v32[4] = v31[4];\n          v32[5] = v31[5];\n          v32[6] = v31[6];\n          v32[7] = v31[7];\n          v32[8] = v31[8];\n          v32[9] = v31[9];\n          v32[10] = v31[10];\n          v32[11] = v31[11];\n          v32[12] = v31[12];\n          v32[13] = v31[13];\n          v32[14] = v31[14];\n          v32[15] = v31[15];\n          v33 = 64LL;\n        }\n        else\n        {\n          v33 = 0LL;\n        }\n        v34 = v33 - 64;\n        v35 = -1LL;\n        v36 = v33;\n        do\n        {\n          *((_DWORD *)v32 + v36) = *((_DWORD *)v31 + v36);\n          v37 = v34;\n          ++v36;\n          ++v34;\n          ++v35;\n        }\n        while ( v35 );\n        if ( v33 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v32 + v37 + 65) = *((_DWORD *)v31 + v37 + 65);\n            *((_DWORD *)v32 + v37 + 66) = *((_DWORD *)v31 + v37 + 66);\n            *((_DWORD *)v32 + v37 + 67) = *((_DWORD *)v31 + v37 + 67);\n            *((_DWORD *)v32 + v37 + 68) = *((_DWORD *)v31 + v37 + 68);\n            v37 += 4LL;\n          }\n          while ( v37 );\n        }\n        v38 = v29[1];\n        v39 = v30[1];\n        if ( v39 >= (_OWORD *)((char *)v38 + 260) || v38 >= (_OWORD *)((char *)v39 + 260) )\n        {\n          *v39 = *v38;\n          v39[1] = v38[1];\n          v39[2] = v38[2];\n          v39[3] = v38[3];\n          v39[4] = v38[4];\n          v39[5] = v38[5];\n          v39[6] = v38[6];\n          v39[7] = v38[7];\n          v39[8] = v38[8];\n          v39[9] = v38[9];\n          v39[10] = v38[10];\n          v39[11] = v38[11];\n          v39[12] = v38[12];\n          v39[13] = v38[13];\n          v39[14] = v38[14];\n          v39[15] = v38[15];\n          v40 = 64LL;\n        }\n        else\n        {\n          v40 = 0LL;\n        }\n        v41 = v40 - 64;\n        v42 = -1LL;\n        v43 = v40;\n        do\n        {\n          *((_DWORD *)v39 + v43) = *((_DWORD *)v38 + v43);\n          v44 = v41;\n          ++v43;\n          ++v41;\n          ++v42;\n        }\n        while ( v42 );\n        if ( v40 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v39 + v44 + 65) = *((_DWORD *)v38 + v44 + 65);\n            *((_DWORD *)v39 + v44 + 66) = *((_DWORD *)v38 + v44 + 66);\n            *((_DWORD *)v39 + v44 + 67) = *((_DWORD *)v38 + v44 + 67);\n            *((_DWORD *)v39 + v44 + 68) = *((_DWORD *)v38 + v44 + 68);\n            v44 += 4LL;\n          }\n          while ( v44 );\n        }\n        v45 = *(_QWORD *)(v27 + 8);\n        v46 = *(_QWORD *)(v28 + 8);\n        v47 = *(_OWORD **)v45;\n        v48 = *(_OWORD **)v46;\n        if ( *(_QWORD *)v46 >= (unsigned __int64)(*(_QWORD *)v45 + 260LL) || v47 >= (_OWORD *)((char *)v48 + 260) )\n        {\n          *v48 = *v47;\n          v48[1] = v47[1];\n          v48[2] = v47[2];\n          v48[3] = v47[3];\n          v48[4] = v47[4];\n          v48[5] = v47[5];\n          v48[6] = v47[6];\n          v48[7] = v47[7];\n          v48[8] = v47[8];\n          v48[9] = v47[9];\n          v48[10] = v47[10];\n          v48[11] = v47[11];\n          v48[12] = v47[12];\n          v48[13] = v47[13];\n          v48[14] = v47[14];\n          v48[15] = v47[15];\n          v49 = 64LL;\n        }\n        else\n        {\n          v49 = 0LL;\n        }\n        v50 = v49 - 64;\n        v51 = -1LL;\n        v52 = v49;\n        do\n        {\n          *((_DWORD *)v48 + v52) = *((_DWORD *)v47 + v52);\n          v53 = v50;\n          ++v52;\n          ++v50;\n          ++v51;\n        }\n        while ( v51 );\n        if ( v49 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v48 + v53 + 65) = *((_DWORD *)v47 + v53 + 65);\n            *((_DWORD *)v48 + v53 + 66) = *((_DWORD *)v47 + v53 + 66);\n            *((_DWORD *)v48 + v53 + 67) = *((_DWORD *)v47 + v53 + 67);\n            *((_DWORD *)v48 + v53 + 68) = *((_DWORD *)v47 + v53 + 68);\n            v53 += 4LL;\n          }\n          while ( v53 );\n        }\n        v54 = *(_OWORD **)(v45 + 8);\n        v55 = *(_OWORD **)(v46 + 8);\n        if ( v55 >= (_OWORD *)((char *)v54 + 260) || v54 >= (_OWORD *)((char *)v55 + 260) )\n        {\n          *v55 = *v54;\n          v55[1] = v54[1];\n          v55[2] = v54[2];\n          v55[3] = v54[3];\n          v55[4] = v54[4];\n          v55[5] = v54[5];\n          v55[6] = v54[6];\n          v55[7] = v54[7];\n          v55[8] = v54[8];\n          v55[9] = v54[9];\n          v55[10] = v54[10];\n          v55[11] = v54[11];\n          v55[12] = v54[12];\n          v55[13] = v54[13];\n          v55[14] = v54[14];\n          v55[15] = v54[15];\n          v56 = 64LL;\n        }\n        else\n        {\n          v56 = 0LL;\n        }\n        v57 = v56 - 64;\n        v58 = -1LL;\n        v59 = v56;\n        do\n        {\n          *((_DWORD *)v55 + v59) = *((_DWORD *)v54 + v59);\n          v60 = v57;\n          ++v59;\n          ++v57;\n          ++v58;\n        }\n        while ( v58 );\n        if ( v56 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v55 + v60 + 65) = *((_DWORD *)v54 + v60 + 65);\n            *((_DWORD *)v55 + v60 + 66) = *((_DWORD *)v54 + v60 + 66);\n            *((_DWORD *)v55 + v60 + 67) = *((_DWORD *)v54 + v60 + 67);\n            *((_DWORD *)v55 + v60 + 68) = *((_DWORD *)v54 + v60 + 68);\n            v60 += 4LL;\n          }\n          while ( v60 );\n        }\n        v61 = *(_QWORD *)(v27 + 16);\n        v62 = *(_QWORD *)(v28 + 16);\n        v63 = *(_OWORD **)v61;\n        v64 = *(_OWORD **)v62;\n        if ( *(_QWORD *)v62 >= (unsigned __int64)(*(_QWORD *)v61 + 260LL) || v63 >= (_OWORD *)((char *)v64 + 260) )\n        {\n          *v64 = *v63;\n          v64[1] = v63[1];\n          v64[2] = v63[2];\n          v64[3] = v63[3];\n          v64[4] = v63[4];\n          v64[5] = v63[5];\n          v64[6] = v63[6];\n          v64[7] = v63[7];\n          v64[8] = v63[8];\n          v64[9] = v63[9];\n          v64[10] = v63[10];\n          v64[11] = v63[11];\n          v64[12] = v63[12];\n          v64[13] = v63[13];\n          v64[14] = v63[14];\n          v64[15] = v63[15];\n          v65 = 64LL;\n        }\n        else\n        {\n          v65 = 0LL;\n        }\n        v66 = v65 - 64;\n        v67 = -1LL;\n        v68 = v65;\n        do\n        {\n          *((_DWORD *)v64 + v68) = *((_DWORD *)v63 + v68);\n          v69 = v66;\n          ++v68;\n          ++v66;\n          ++v67;\n        }\n        while ( v67 );\n        if ( v65 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v64 + v69 + 65) = *((_DWORD *)v63 + v69 + 65);\n            *((_DWORD *)v64 + v69 + 66) = *((_DWORD *)v63 + v69 + 66);\n            *((_DWORD *)v64 + v69 + 67) = *((_DWORD *)v63 + v69 + 67);\n            *((_DWORD *)v64 + v69 + 68) = *((_DWORD *)v63 + v69 + 68);\n            v69 += 4LL;\n          }\n          while ( v69 );\n        }\n        v70 = *(_OWORD **)(v61 + 8);\n        v71 = *(_OWORD **)(v62 + 8);\n        if ( v71 >= (_OWORD *)((char *)v70 + 260) || v70 >= (_OWORD *)((char *)v71 + 260) )\n        {\n          *v71 = *v70;\n          v71[1] = v70[1];\n          v71[2] = v70[2];\n          v71[3] = v70[3];\n          v71[4] = v70[4];\n          v71[5] = v70[5];\n          v71[6] = v70[6];\n          v71[7] = v70[7];\n          v71[8] = v70[8];\n          v71[9] = v70[9];\n          v71[10] = v70[10];\n          v71[11] = v70[11];\n          v71[12] = v70[12];\n          v71[13] = v70[13];\n          v71[14] = v70[14];\n          v71[15] = v70[15];\n          v72 = 64LL;\n        }\n        else\n        {\n          v72 = 0LL;\n        }\n        v73 = v72 - 64;\n        v74 = -1LL;\n        v75 = v72;\n        do\n        {\n          *((_DWORD *)v71 + v75) = *((_DWORD *)v70 + v75);\n          v76 = v73;\n          ++v75;\n          ++v73;\n          ++v74;\n        }\n        while ( v74 );\n        if ( v72 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v71 + v76 + 65) = *((_DWORD *)v70 + v76 + 65);\n            *((_DWORD *)v71 + v76 + 66) = *((_DWORD *)v70 + v76 + 66);\n            *((_DWORD *)v71 + v76 + 67) = *((_DWORD *)v70 + v76 + 67);\n            *((_DWORD *)v71 + v76 + 68) = *((_DWORD *)v70 + v76 + 68);\n            v76 += 4LL;\n          }\n          while ( v76 );\n        }\n        v77 = *(_QWORD *)(v27 + 24);\n        v78 = *(_QWORD *)(v28 + 24);\n        v79 = *(_OWORD **)v77;\n        v80 = *(_OWORD **)v78;\n        if ( *(_QWORD *)v78 >= (unsigned __int64)(*(_QWORD *)v77 + 260LL) || v79 >= (_OWORD *)((char *)v80 + 260) )\n        {\n          *v80 = *v79;\n          v80[1] = v79[1];\n          v80[2] = v79[2];\n          v80[3] = v79[3];\n          v80[4] = v79[4];\n          v80[5] = v79[5];\n          v80[6] = v79[6];\n          v80[7] = v79[7];\n          v80[8] = v79[8];\n          v80[9] = v79[9];\n          v80[10] = v79[10];\n          v80[11] = v79[11];\n          v80[12] = v79[12];\n          v80[13] = v79[13];\n          v80[14] = v79[14];\n          v80[15] = v79[15];\n          v81 = 64LL;\n        }\n        else\n        {\n          v81 = 0LL;\n        }\n        v82 = v81 - 64;\n        v83 = -1LL;\n        v84 = v81;\n        do\n        {\n          *((_DWORD *)v80 + v84) = *((_DWORD *)v79 + v84);\n          v85 = v82;\n          ++v84;\n          ++v82;\n          ++v83;\n        }\n        while ( v83 );\n        if ( v81 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v80 + v85 + 65) = *((_DWORD *)v79 + v85 + 65);\n            *((_DWORD *)v80 + v85 + 66) = *((_DWORD *)v79 + v85 + 66);\n            *((_DWORD *)v80 + v85 + 67) = *((_DWORD *)v79 + v85 + 67);\n            *((_DWORD *)v80 + v85 + 68) = *((_DWORD *)v79 + v85 + 68);\n            v85 += 4LL;\n          }\n          while ( v85 );\n        }\n        v86 = *(_OWORD **)(v77 + 8);\n        v87 = *(_OWORD **)(v78 + 8);\n        if ( v87 >= (_OWORD *)((char *)v86 + 260) || v86 >= (_OWORD *)((char *)v87 + 260) )\n        {\n          *v87 = *v86;\n          v87[1] = v86[1];\n          v87[2] = v86[2];\n          v87[3] = v86[3];\n          v87[4] = v86[4];\n          v87[5] = v86[5];\n          v87[6] = v86[6];\n          v87[7] = v86[7];\n          v87[8] = v86[8];\n          v87[9] = v86[9];\n          v87[10] = v86[10];\n          v87[11] = v86[11];\n          v87[12] = v86[12];\n          v87[13] = v86[13];\n          v87[14] = v86[14];\n          v87[15] = v86[15];\n          v88 = 64LL;\n        }\n        else\n        {\n          v88 = 0LL;\n        }\n        v89 = v88 - 64;\n        v90 = -1LL;\n        v91 = v88;\n        do\n        {\n          *((_DWORD *)v87 + v91) = *((_DWORD *)v86 + v91);\n          v92 = v89;\n          ++v91;\n          ++v89;\n          ++v90;\n        }\n        while ( v90 );\n        if ( v88 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v87 + v92 + 65) = *((_DWORD *)v86 + v92 + 65);\n            *((_DWORD *)v87 + v92 + 66) = *((_DWORD *)v86 + v92 + 66);\n            *((_DWORD *)v87 + v92 + 67) = *((_DWORD *)v86 + v92 + 67);\n            *((_DWORD *)v87 + v92 + 68) = *((_DWORD *)v86 + v92 + 68);\n            v92 += 4LL;\n          }\n          while ( v92 );\n        }\n        v93 = v0[18173] + 3LL;\n        v95 = __OFSUB__(v26, v93);\n        v94 = v26++ - v93 < 0;\n      }\n      while ( v94 ^ v95 );\n    }\n    v96 = *(_QWORD *)(v222 + 3088);\n    v97 = -24LL;\n    v1 = v224;\n    do\n    {\n      v98 = *(_QWORD *)&v22[v97 + 24];\n      v99 = *(_QWORD *)(v96 + v97 + 24);\n      v100 = *(_DWORD **)v98;\n      v101 = *(_DWORD **)v99;\n      *v101 = **(_DWORD **)v98;\n      v101[1] = v100[1];\n      v101[2] = v100[2];\n      v101[3] = v100[3];\n      v101[4] = v100[4];\n      v101[5] = v100[5];\n      v101[6] = v100[6];\n      v101[7] = v100[7];\n      v101[8] = v100[8];\n      v101[9] = v100[9];\n      v101[10] = v100[10];\n      v101[11] = v100[11];\n      v101[12] = v100[12];\n      v101[13] = v100[13];\n      v101[14] = v100[14];\n      v101[15] = v100[15];\n      v101[16] = v100[16];\n      v101[17] = v100[17];\n      v102 = *(_DWORD **)(v98 + 8);\n      v103 = *(_DWORD **)(v99 + 8);\n      *v103 = *v102;\n      v103[1] = v102[1];\n      v103[2] = v102[2];\n      v103[3] = v102[3];\n      v103[4] = v102[4];\n      v103[5] = v102[5];\n      v103[6] = v102[6];\n      v103[7] = v102[7];\n      v103[8] = v102[8];\n      v103[9] = v102[9];\n      v103[10] = v102[10];\n      v103[11] = v102[11];\n      v103[12] = v102[12];\n      v103[13] = v102[13];\n      v103[14] = v102[14];\n      v103[15] = v102[15];\n      v103[16] = v102[16];\n      v104 = v97 == -8;\n      v97 += 8LL;\n      v103[17] = v102[17];\n    }\n    while ( !v104 );\n  }\n  v105 = (_DWORD *)qword_4F9F48;\n  v106 = word_4F9FA8;\n  v107 = v219;\n  *(_DWORD *)(v1 + v219 + 472) = word_4F9FA8;\n  v108 = word_4F9FB0;\n  *(_DWORD *)(v1 + v219 + 488) = word_4F9FB0;\n  if ( v0[18100] )\n  {\n    v105[776] = v106;\n    v105[780] = v108;\n  }\n  v109 = word_4F9FAA;\n  *(_DWORD *)(v1 + v219 + 476) = word_4F9FAA;\n  v110 = word_4F9FB2;\n  *(_DWORD *)(v1 + v219 + 492) = word_4F9FB2;\n  if ( v0[18100] )\n  {\n    v105[777] = v109;\n    v105[781] = v110;\n  }\n  v111 = word_4F9FAC;\n  *(_DWORD *)(v1 + v219 + 480) = word_4F9FAC;\n  v112 = word_4F9FB4;\n  *(_DWORD *)(v1 + v219 + 496) = word_4F9FB4;\n  if ( v0[18100] )\n  {\n    v105[778] = v111;\n    v105[782] = v112;\n  }\n  v220 = (unsigned int *)(v219 + v1 + 72);\n  v113 = word_4F9FAE;\n  *(_DWORD *)(v1 + v219 + 484) = word_4F9FAE;\n  v114 = word_4F9FB6;\n  *(_DWORD *)(v1 + v219 + 500) = word_4F9FB6;\n  if ( v0[18100] )\n  {\n    v105[779] = v113;\n    v105[783] = v114;\n  }\n  v115 = 0;\n  if ( *v220 == 1 )\n    v115 = dword_4FA0AC;\n  *(_DWORD *)(v1 + v219 + 580) = v115;\n  if ( v218 == 8 && !dword_4FA0F0 && *((_DWORD *)dest + 805) )\n  {\n    v116 = v0[6] == 1;\n    sub_468C40(1, 0, (unsigned int)xmmword_4F9C60, word_4F9FC8[0], word_4F9FC0[0], (signed __int16)qword_4F9FD0, v116);\n    sub_468C40(1, 1u, DWORD1(xmmword_4F9C60), word_4F9FCA, word_4F9FC2, SWORD1(qword_4F9FD0), v116);\n    sub_468C40(1, 2u, DWORD2(xmmword_4F9C60), word_4F9FCC, word_4F9FC4, SWORD2(qword_4F9FD0), v116);\n    sub_468C40(1, 3u, HIDWORD(xmmword_4F9C60), word_4F9FCE, word_4F9FC6, SHIWORD(qword_4F9FD0), v116);\n    v107 = v219;\n  }\n  if ( *(_BYTE *)(v219 + v1 + 460) & 0xF || (*v220 | 4) == 13 )\n    v117 = dword_4FA0F0;\n  else\n    v117 = 0;\n  *(_DWORD *)(v1 + v107 + 572) = v117;\n  v216 = qword_4F9F48;\n  *(_DWORD *)(qword_4F9F48 + 3336) = v117;\n  if ( *((_DWORD *)dest + 616) == 2 )\n  {\n    v118 = (unsigned int *)(v219 + v1 + 72);\n    if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n    {\n      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)off_49F6E8 + 6) + 8LL * *((signed int *)off_49F6D0 + 34))\n               + *((signed int *)off_49F6D0 + 35)) = v218;\n      v216 = qword_4F9F48;\n    }\n  }\n  else\n  {\n    v118 = (unsigned int *)(v219 + v1 + 72);\n  }\n  v235 = (_DWORD *)(v107 + v1 + 580);\n  v119 = (_QWORD *)qword_4F9E30;\n  v120 = (signed int *)off_49F6D0;\n  v231 = (char *)off_49F6D0 + 71936;\n  v229 = (char *)off_49F6D0 + 71944;\n  v121 = 264LL * v228;\n  v236 = v121;\n  v237 = (_QWORD *)(qword_4F9E30 + v121 + 24);\n  v217 = v216 + 3264;\n  v122 = 0LL;\n  v123 = 0LL;\n  do\n  {\n    v225 = v122;\n    v124 = 0LL;\n    do\n    {\n      v144 = (v123 & 0x7FFFFFFE) + ((unsigned int)v124 >> 1);\n      v145 = *(_DWORD *)(v221 + 4 * v144 + 488);\n      if ( v145 == 1 || (v146 = *v118, *v118 <= 0xD) && (v147 = 9728, _bittest(&v147, v146)) )\n      {\n        v132 = (_QWORD *)v119[810];\n        v133 = v120[36];\n        v134 = v120[37];\n        v148 = (signed int)v124 + v133;\n        v149 = v134 + (signed int)v123;\n        *(_WORD *)(*(_QWORD *)(*v132 + 8 * v148) + 2 * v149) = -1;\n        v137 = (_QWORD *)v119[811];\n        *(_QWORD *)(*(_QWORD *)(*v137 + 8 * v148) + 8 * v149) = -1LL;\n        v138 = (_QWORD *)v119[813];\n        **(_DWORD **)(*(_QWORD *)(*v138 + 8 * v148) + 8 * v149) = 0;\n        v143 = v120[18100];\n        if ( v143 )\n        {\n          *(_WORD *)(v217 + 2 * v124) = -1;\n          if ( !v145 )\n            goto LABEL_134;\n        }\n        else\n        {\n          v143 = 0;\n          if ( !v145 )\n            goto LABEL_134;\n        }\n        goto LABEL_132;\n      }\n      if ( v146 != 1 || v145 != 2 || !*v235 )\n      {\n        v131 = *(__int16 *)((char *)&word_4F9B80[v124] + v225);\n        v132 = (_QWORD *)v119[810];\n        v133 = v120[36];\n        v134 = v120[37];\n        v135 = (signed int)v124 + v133;\n        v136 = v134 + (signed int)v123;\n        *(_WORD *)(*(_QWORD *)(*v132 + 8 * v135) + 2 * v136) = v131;\n        v137 = (_QWORD *)v119[811];\n        *(_QWORD *)(*(_QWORD *)(*v137 + 8 * v135) + 8 * v136) = *(_QWORD *)((char *)&v119[v131 + 3] + v236);\n        v138 = (_QWORD *)v119[813];\n        v139 = *(_QWORD *)(*v138 + 8 * v135);\n        v140 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v120 + 8991) + 8 * v124) + 8 * v123);\n        v141 = *(_WORD **)(v139 + 8 * v136);\n        v142 = *(signed int *)(v221 + 4 * v144 + 472);\n        *v141 = **(_WORD **)(*(_QWORD *)(v140 + 8LL * *(__int16 *)((char *)&word_4F9B80[v124] + v225)) + 8 * v142);\n        v141[1] = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 8LL * *(__int16 *)((char *)&word_4F9B80[v124] + v225))\n                                       + 8 * v142)\n                           + 2LL);\n        v143 = v120[18100];\n        if ( v143 )\n          *(_WORD *)(v217 + 2 * v124) = *(__int16 *)((char *)&word_4F9B80[v124] + v225);\n        else\n          v143 = 0;\n        v118 = v220;\n        if ( !v145 )\n        {\nLABEL_134:\n          v151 = (signed int)v124 + v133;\n          v152 = (signed int)v123 + v134;\n          *(_WORD *)(*(_QWORD *)(v132[1] + 8 * v151) + 2 * v152) = -1;\n          *(_QWORD *)(*(_QWORD *)(v137[1] + 8 * v151) + 8 * v152) = -1LL;\n          **(_DWORD **)(*(_QWORD *)(v138[1] + 8 * v151) + 8 * v152) = 0;\n          if ( v143 )\n            *(_WORD *)(v217 + 2 * v124 + 32) = -1;\n          goto LABEL_136;\n        }\nLABEL_132:\n        if ( *v118 > 0xD )\n          goto LABEL_136;\n        v150 = 9728;\n        if ( !_bittest(&v150, *v118) )\n          goto LABEL_136;\n        goto LABEL_134;\n      }\n      v125 = (__int64 *)v229;\n      if ( *v235 == 1 )\n        v125 = (__int64 *)v231;\n      v126 = *v125;\n      v127 = (signed int)v124 + v120[36];\n      v128 = v120[37] + (signed __int64)(signed int)v123;\n      *(_WORD *)(*(_QWORD *)(*(_QWORD *)v119[810] + 8 * v127) + 2 * v128) = 0;\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v119[811] + 8 * v127) + 8 * v128) = *v237;\n      v129 = *(_WORD **)(***(_QWORD ***)(*(_QWORD *)(v126 + 8 * v124) + 8 * v123)\n                       + 8LL * *(signed int *)(v221 + 4 * v144 + 472));\n      v130 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)v119[813] + 8 * v127) + 8 * v128);\n      *v130 = *v129;\n      v130[1] = v129[1];\n      if ( v120[18100] )\n        *(_WORD *)(v217 + 2 * v124) = 0;\nLABEL_136:\n      ++v124;\n    }\n    while ( v124 != 4 );\n    ++v123;\n    v122 = v225 + 8;\n    v217 += 8LL;\n  }\n  while ( v123 != 4 );\n  v153 = *v118;\n  if ( v233 == 1 )\n  {\n    v154 = (_QWORD *)qword_4F9E30;\n    v155 = (signed int *)off_49F6D0;\n    v223 = (char *)off_49F6D0 + 71936;\n    v226 = (char *)off_49F6D0 + 71944;\n    v156 = qword_4F9F48 + 3296;\n    v230 = 33LL * (v228 | 1);\n    v232 = (_QWORD *)(qword_4F9E30 + v230 * 8 + 24);\n    v157 = 0LL;\n    v158 = 9728;\n    v159 = 0LL;\n    do\n    {\n      v160 = 0LL;\n      do\n      {\n        if ( v153 <= 0xD && _bittest(&v158, v153)\n          || (v161 = (v159 & 0x7FFFFFFE) + ((unsigned int)v160 >> 1), (v162 = *(_DWORD *)(v221 + 4 * v161 + 488)) == 0) )\n        {\n          v176 = (signed int)v160 + v155[36];\n          v177 = v155[37] + (signed __int64)(signed int)v159;\n          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v154[810] + 8LL) + 8 * v176) + 2 * v177) = -1;\n          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154[811] + 8LL) + 8 * v176) + 8 * v177) = -1LL;\n          **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v154[813] + 8LL) + 8 * v176) + 8 * v177) = 0;\n          if ( v155[18100] )\n            *(_WORD *)(v156 + 2 * v160) = -1;\n        }\n        else if ( v153 == 1 && v162 == 2 && *v235 )\n        {\n          v163 = (__int64 *)v226;\n          if ( *v235 == 1 )\n            v163 = (__int64 *)v223;\n          v164 = *v163;\n          v165 = (signed int)v160 + v155[36];\n          v166 = v155[37] + (signed __int64)(signed int)v159;\n          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v154[810] + 8LL) + 8 * v165) + 2 * v166) = 0;\n          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154[811] + 8LL) + 8 * v165) + 8 * v166) = *v232;\n          v167 = *(_WORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v164 + 8 * v160) + 8 * v159) + 8LL)\n                           + 8LL * *(signed int *)(v221 + 4 * v161 + 472));\n          v168 = *(_QWORD *)(*(_QWORD *)(v154[813] + 8LL) + 8 * v165);\n          v118 = v220;\n          v169 = *(_WORD **)(v168 + 8 * v166);\n          *v169 = *v167;\n          v169[1] = v167[1];\n          v158 = 9728;\n          if ( v155[18100] )\n            *(_WORD *)(v156 + 2 * v160) = 0;\n        }\n        else\n        {\n          v170 = word_4F9B60[v160 + v157];\n          v171 = (signed int)v160 + v155[36];\n          v172 = v155[37] + (signed __int64)(signed int)v159;\n          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v154[810] + 8LL) + 8 * v171) + 2 * v172) = v170;\n          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154[811] + 8LL) + 8 * v171) + 8 * v172) = v154[v230 + 3 + v170];\n          v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v155 + 8991) + 8 * v160) + 8 * v159) + 8LL);\n          v174 = *(signed int *)(v221 + 4 * v161 + 472);\n          v175 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(v154[813] + 8LL) + 8 * v171) + 8 * v172);\n          *v175 = **(_WORD **)(*(_QWORD *)(v173 + 8LL * word_4F9B60[v160 + v157]) + 8 * v174);\n          v175[1] = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v173 + 8LL * word_4F9B60[v160 + v157]) + 8 * v174) + 2LL);\n          v158 = 9728;\n          if ( v155[18100] )\n            *(_WORD *)(v156 + 2 * v160) = word_4F9B60[v160 + v157];\n        }\n        ++v160;\n      }\n      while ( v160 != 4 );\n      ++v159;\n      v157 += 4LL;\n      v156 += 8LL;\n    }\n    while ( v159 != 4 );\n  }\n  *(_DWORD *)(v224 + v219 + 524) = dword_4FA0A0;\n  v178 = (signed int *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18095) = dword_4FA0A4;\n  if ( v153 == 13 )\n  {\n    v179 = *((_QWORD *)v178 + 13);\n    v180 = *((_QWORD *)v178 + 14);\n    v181 = (_DWORD *)(v219 + v224 + 408);\n    v182 = 0;\n    v183 = v227;\n    do\n    {\n      *(_DWORD *)(*(_QWORD *)(v179 + 8LL * (v182 + v178[36])) + 4LL * v178[37]) = *(_DWORD *)(*(_QWORD *)(v180 + 8LL * (v182 + v178[36]))\n                                                                                            + 4LL * v178[37]);\n      *(v181 - 19) = *(v181 - 3);\n      *(_DWORD *)(*(_QWORD *)(v179 + 8LL * (v182 + v178[36])) + 4LL * v178[37] + 4) = *(_DWORD *)(*(_QWORD *)(v180 + 8LL * (v182 + v178[36]))\n                                                                                                + 4LL * v178[37]\n                                                                                                + 4);\n      *(v181 - 18) = *(v181 - 2);\n      *(_DWORD *)(*(_QWORD *)(v179 + 8LL * (v182 + v178[36])) + 4LL * v178[37] + 8) = *(_DWORD *)(*(_QWORD *)(v180 + 8LL * (v182 + v178[36]))\n                                                                                                + 4LL * v178[37]\n                                                                                                + 8);\n      *(v181 - 17) = *(v181 - 1);\n      *(_DWORD *)(*(_QWORD *)(v179 + 8LL * (v182 + v178[36])) + 4LL * v178[37] + 12) = *(_DWORD *)(*(_QWORD *)(v180 + 8LL * (v182 + v178[36]))\n                                                                                                 + 4LL * v178[37]\n                                                                                                 + 12);\n      *(v181 - 16) = *v181;\n      ++v182;\n      v181 += 4;\n    }\n    while ( v182 != 4 );\n  }\n  else if ( (v218 | 4) == 13 )\n  {\n    v183 = v227;\n    if ( v218 == 9 )\n    {\n      v184 = v178[37];\n      v185 = 0;\n      do\n      {\n        v186 = v178[36];\n        v187 = v185;\n        v188 = v227 + 8 * v186;\n        v189 = v186 - 1;\n        v190 = 0LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(v188 + 8 * v190) + 4 * v184) = dword_4F9890[v190 + v187];\n          *(_DWORD *)(v224 + v219 + 332 + 4LL * v185 + 4 * v190) = dword_4F9850[v190 + v187];\n          v191 = v189 + v190++ + 1;\n        }\n        while ( v191 < v178[36] + 3LL );\n        v192 = v178[37] + 3LL;\n        v185 += v190;\n        v95 = __OFSUB__(v184, v192);\n        v94 = v184++ - v192 < 0;\n      }\n      while ( v94 ^ v95 );\n    }\n  }\n  else\n  {\n    v193 = v178[37];\n    LODWORD(v194) = 0;\n    v183 = v227;\n    do\n    {\n      v194 = (signed int)v194;\n      v195 = v178[36] - 1LL;\n      do\n      {\n        *(_DWORD *)(*(_QWORD *)(v227 + 8 * v195 + 8) + 4 * v193) = 2;\n        *(_DWORD *)(v224 + v219 + 332 + 4 * v194++) = 2;\n        ++v195;\n      }\n      while ( v195 < v178[36] + 3LL );\n      v196 = v178[37] + 3LL;\n      v95 = __OFSUB__(v193, v196);\n      v94 = v193++ - v196 < 0;\n    }\n    while ( v94 ^ v95 );\n  }\n  if ( *v118 == 13 )\n  {\n    v197 = *((_QWORD *)v178 + 13);\n    v198 = v224 + v219 + 344;\n    v199 = -4LL;\n    v200 = 0LL;\n    do\n    {\n      *(_DWORD *)(*(_QWORD *)(v197 + 8LL * ((signed int)v199 + v178[36] + 4)) + 4LL * v178[37]) = dword_4F9910[v200];\n      *(_DWORD *)(v198 + v200 * 4 - 12) = dword_4F98D0[v200];\n      *(_DWORD *)(*(_QWORD *)(v197 + 8LL * ((signed int)v199 + v178[36] + 4)) + 4LL * v178[37] + 4) = dword_4F9914[v200];\n      *(_DWORD *)(v198 + v200 * 4 - 8) = dword_4F98D4[v200];\n      *(_DWORD *)(*(_QWORD *)(v197 + 8LL * ((signed int)v199 + v178[36] + 4)) + 4LL * v178[37] + 8) = dword_4F9918[v200];\n      *(_DWORD *)(v198 + v200 * 4 - 4) = dword_4F98D8[v200];\n      *(_DWORD *)(*(_QWORD *)(v197 + 8LL * ((signed int)v199 + v178[36] + 4)) + 4LL * v178[37] + 12) = dword_4F991C[v200];\n      *(_DWORD *)(v198 + v200 * 4) = dword_4F98DC[v200];\n      v200 += 4LL;\n      ++v199;\n    }\n    while ( v199 );\n  }\n  if ( v178[18100] )\n  {\n    v201 = (_DWORD *)(v224 + v219 + 524);\n    v202 = v178[37];\n    v203 = *(_QWORD *)(qword_4F9F48 + 3136);\n    v204 = qword_4F9F48 + 3144;\n    v205 = 0;\n    do\n    {\n      v206 = v178[36];\n      v207 = v183 + 8 * v206;\n      v208 = v203 + 8 * v206;\n      v209 = v206 - 1;\n      v210 = 0LL;\n      do\n      {\n        *(_DWORD *)(*(_QWORD *)(v208 + 8 * v210) + 4 * v202) = *(_DWORD *)(*(_QWORD *)(v207 + 8 * v210) + 4 * v202);\n        *(_DWORD *)(v204 + 4LL * v205 + 4 * v210) = v201[v205 - 48 + v210];\n        v211 = v209 + v210++ + 1;\n      }\n      while ( v211 < v178[36] + 3LL );\n      v212 = v178[37] + 3LL;\n      v205 += v210;\n      v95 = __OFSUB__(v202, v212);\n      v94 = v202++ - v212 < 0;\n    }\n    while ( v94 ^ v95 );\n    v213 = qword_4F9F48;\n    *(_DWORD *)(qword_4F9F48 + 3332) = *v201;\n    *(_DWORD *)(v213 + 3328) = v178[18095];\n  }\n  return sub_464380(v221, v234);\n}\n", 
            "funcStartAddr": "0x465f70L", 
            "funcEndAddr": "0x467c5dL", 
            "funcName": "sub_465F70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_467C60(unsigned int a1, int a2, int a3, int a4, int a5)\n{\n  signed int v5; // er13\n  int v6; // ebx\n  signed __int64 v7; // rax\n  signed __int64 result; // rax\n  int v9; // ecx\n  unsigned int v10; // edi\n  __int64 v11; // r11\n  __int64 v12; // r9\n  int v13; // ebx\n  signed int v14; // er14\n  int v15; // ebp\n  _QWORD *v16; // r12\n  signed __int64 v17; // rax\n  __int64 v18; // r9\n  __int64 v19; // rcx\n  signed int *v20; // r11\n  __int64 v21; // rax\n  signed __int64 v22; // rbp\n  int v23; // edi\n  _QWORD *v24; // rax\n  _WORD *v25; // rax\n  _QWORD *v26; // r8\n  signed int v27; // er14\n  signed int v28; // er13\n  __int64 v29; // r11\n  __int64 v30; // rsi\n  _WORD *v31; // rbx\n  _QWORD *v32; // r15\n  _QWORD *v33; // r12\n  _QWORD *v34; // rax\n  _WORD *v35; // rsi\n  __int64 v36; // rdi\n  __int64 v37; // rax\n  _WORD *v38; // rbx\n  signed __int64 v39; // rbx\n  __int64 v40; // rdi\n  __int64 v41; // rax\n  signed __int64 v42; // r10\n  _WORD *v43; // rsi\n  _WORD *v44; // rbx\n  _WORD *v45; // rbx\n  _WORD *v46; // rbp\n  _QWORD *v47; // r10\n  signed __int64 v48; // r8\n  _QWORD *v49; // rcx\n  _QWORD *v50; // rsi\n  _QWORD *v51; // r15\n  signed __int64 v52; // rbx\n  signed __int64 v53; // r11\n  signed __int64 v54; // r12\n  signed __int64 v55; // rdx\n  signed __int64 v56; // rcx\n  signed __int64 v57; // rdi\n  signed __int64 v58; // rbx\n  signed __int64 v59; // rsi\n  _QWORD *v60; // r15\n  signed __int64 v61; // r8\n  signed __int64 v62; // r12\n  __int64 v63; // r10\n  signed __int64 v64; // rbp\n  signed __int64 v65; // rsi\n  signed __int64 v66; // r13\n  signed __int64 v67; // r11\n  signed __int64 v68; // rsi\n  _WORD *v69; // rcx\n  _WORD *v70; // rdx\n  int v71; // [rsp+0h] [rbp-D8h]\n  int v72; // [rsp+Ch] [rbp-CCh]\n  signed int *v73; // [rsp+10h] [rbp-C8h]\n  int v74[3]; // [rsp+18h] [rbp-C0h]\n  _QWORD **v75; // [rsp+18h] [rbp-C0h]\n  int v76; // [rsp+24h] [rbp-B4h]\n  int v77; // [rsp+28h] [rbp-B0h]\n  signed __int64 v78; // [rsp+30h] [rbp-A8h]\n  __int64 v79; // [rsp+38h] [rbp-A0h]\n  __int64 v80; // [rsp+40h] [rbp-98h]\n  char *v81; // [rsp+48h] [rbp-90h]\n  char *v82; // [rsp+50h] [rbp-88h]\n  int *v83; // [rsp+58h] [rbp-80h]\n  __int64 v84; // [rsp+60h] [rbp-78h]\n  signed __int64 v85; // [rsp+68h] [rbp-70h]\n  _QWORD *v86; // [rsp+70h] [rbp-68h]\n  signed __int64 v87; // [rsp+78h] [rbp-60h]\n  signed __int64 *v88; // [rsp+80h] [rbp-58h]\n  _QWORD *v89; // [rsp+88h] [rbp-50h]\n  _QWORD *v90; // [rsp+90h] [rbp-48h]\n  signed __int64 v91; // [rsp+98h] [rbp-40h]\n  __int64 v92; // [rsp+A0h] [rbp-38h]\n\n  v76 = a5;\n  v72 = a4;\n  v5 = (a1 + (a1 >> 31)) & 0xFFFFFFFE;\n  v6 = (signed int)a1 % 2;\n  v74[0] = a2;\n  v79 = a2;\n  v7 = 4LL;\n  if ( (unsigned int)(a2 - 1) < 3 )\n    v7 = a2;\n  v77 = *((_DWORD *)dest + 2 * v7 + 36);\n  result = *((unsigned int *)dest + 2 * v7 + 37);\n  v9 = (signed int)a1 % 2;\n  v10 = 0;\n  v11 = *((_QWORD *)off_49F6D0 + 1771);\n  v73 = (signed int *)off_49F6D0;\n  v12 = *((signed int *)off_49F6D0 + 3);\n  if ( *((_DWORD *)off_49F6D0 + 18100) && *(_DWORD *)(v11 + 632 * v12 + 532) )\n    v10 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1) + 2;\n  v13 = 2 * v6;\n  v14 = result + v5;\n  v15 = v77 + 2 * v9;\n  if ( a3 < 0 )\n  {\n    if ( (signed int)result > 0 )\n    {\n      v47 = (_QWORD *)qword_4F9E30;\n      v48 = v13;\n      do\n      {\n        if ( v77 > 0 )\n        {\n          v49 = (_QWORD *)v47[813];\n          result = v73[37] + (signed __int64)v5;\n          v50 = (_QWORD *)v47[810];\n          v51 = (_QWORD *)v47[811];\n          v52 = 8LL * v73[36];\n          v53 = v52 + *v49;\n          v54 = v52 + v49[1];\n          v55 = v52 + *v50;\n          v56 = v52 + v50[1];\n          v57 = v52 + *v51;\n          v58 = v51[1] + v52;\n          v59 = v48;\n          do\n          {\n            **(_DWORD **)(*(_QWORD *)(v53 + 8 * v59) + 8 * result) = 0;\n            **(_DWORD **)(*(_QWORD *)(v54 + 8 * v59) + 8 * result) = 0;\n            *(_WORD *)(*(_QWORD *)(v55 + 8 * v59) + 2 * result) = -1;\n            *(_WORD *)(*(_QWORD *)(v56 + 8 * v59) + 2 * result) = -1;\n            *(_QWORD *)(*(_QWORD *)(v57 + 8 * v59) + 8 * result) = -1LL;\n            *(_QWORD *)(*(_QWORD *)(v58 + 8 * v59++) + 8 * result) = -1LL;\n          }\n          while ( v59 < v15 );\n        }\n        ++v5;\n      }\n      while ( v5 < v14 );\n    }\n  }\n  else if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n  {\n    if ( (signed int)result > 0 )\n    {\n      v90 = qword_4F9E00;\n      v89 = qword_4F9E08;\n      v83 = (int *)(v11 + 632 * v12 + 580);\n      v16 = (_QWORD *)qword_4F9E30;\n      v82 = (char *)off_49F6D0 + 71936;\n      v81 = (char *)off_49F6D0 + 71944;\n      v17 = 264LL * v10;\n      v85 = v17;\n      v86 = (_QWORD *)(qword_4F9E30 + v17 + 24);\n      v87 = 264LL * (v10 | 1);\n      v88 = (signed __int64 *)(qword_4F9E30 + v87 + 24);\n      v91 = v15;\n      v18 = v5;\n      v84 = v14;\n      v71 = v13;\n      v92 = v13;\n      result = 8LL * v13;\n      v78 = 8LL * v13;\n      v80 = qword_4F9E30;\n      while ( v77 <= 0 )\n      {\nLABEL_33:\n        if ( ++v18 >= v84 )\n          return result;\n      }\n      v19 = 0LL;\n      v20 = v73;\n      while ( 1 )\n      {\n        if ( !v74[0] )\n        {\n          v21 = v20[36] + v71 + (signed int)v19;\n          v22 = v20[37] + (signed __int64)(signed int)v18;\n          a3 = *(signed __int16 *)(v90[v21] + 2 * v22);\n          v72 = *(signed __int16 *)(*(_QWORD *)(*v89 + 8 * v21) + 2 * v22);\n          v76 = *(signed __int16 *)(*(_QWORD *)(v89[1] + 8 * v21) + 2 * v22);\n        }\n        if ( (a3 | 2) == 2 )\n        {\n          if ( v74[0] == 1 && a3 == 2 )\n          {\n            v23 = *v83;\n            if ( *v83 )\n            {\n              v24 = v81;\n              if ( v23 == 1 )\n                v24 = v82;\n              v25 = *(_WORD **)(***(_QWORD ***)(*(_QWORD *)(v78 + *v24 + 8 * v19) + 8 * v18) + 8 * v79);\n              v26 = (_QWORD *)v16[813];\n              v27 = v20[36];\n              v28 = v20[37];\n              v29 = v27 + v71 + (signed int)v19;\n              v30 = (signed int)v18 + v28;\n              v31 = *(_WORD **)(*(_QWORD *)(*v26 + 8 * v29) + 8 * v30);\n              *v31 = *v25;\n              v31[1] = v25[1];\n              v32 = (_QWORD *)v16[810];\n              *(_WORD *)(*(_QWORD *)(*v32 + 8 * v29) + 2 * v30) = 0;\n              v33 = (_QWORD *)v16[811];\n              *(_QWORD *)(*(_QWORD *)(*v33 + 8 * v29) + 8 * v30) = *v86;\nLABEL_21:\n              if ( a3 == 2 && v23 )\n              {\n                v34 = v81;\n                if ( v23 == 1 )\n                  v34 = v82;\n                v35 = *(_WORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v78 + *v34 + 8 * v19) + 8 * v18) + 8LL) + 8 * v79);\n                v36 = v27 + v71 + (signed int)v19;\n                v37 = (signed int)v18 + v28;\n                v38 = *(_WORD **)(*(_QWORD *)(v26[1] + 8 * v36) + 8 * v37);\n                *v38 = *v35;\n                v38[1] = v35[1];\n                *(_WORD *)(*(_QWORD *)(v32[1] + 8 * v36) + 2 * v37) = 0;\n                v39 = *v88;\n                v20 = v73;\n                goto LABEL_32;\n              }\n              goto LABEL_30;\n            }\n          }\n          v43 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v78 + *((_QWORD *)v20 + 8991) + 8 * v19) + 8 * v18)\n                                      + 8LL * v72)\n                          + 8 * v79);\n          v26 = (_QWORD *)v16[813];\n          v27 = v20[36];\n          v28 = v20[37];\n          v40 = v27 + v71 + (signed int)v19;\n          v41 = (signed int)v18 + v28;\n          v44 = *(_WORD **)(*(_QWORD *)(*v26 + 8 * v40) + 8 * v41);\n          *v44 = *v43;\n          v44[1] = v43[1];\n          v32 = (_QWORD *)v16[810];\n          *(_WORD *)(*(_QWORD *)(*v32 + 8 * v40) + 2 * v41) = v72;\n          v42 = *(_QWORD *)((char *)&v16[(signed __int16)v72 + 3] + v85);\n        }\n        else\n        {\n          v26 = (_QWORD *)v16[813];\n          v27 = v20[36];\n          v28 = v20[37];\n          v40 = v27 + v71 + (signed int)v19;\n          v41 = (signed int)v18 + v28;\n          **(_DWORD **)(*(_QWORD *)(*v26 + 8 * v40) + 8 * v41) = 0;\n          v32 = (_QWORD *)v16[810];\n          *(_WORD *)(*(_QWORD *)(*v32 + 8 * v40) + 2 * v41) = -1;\n          v42 = -1LL;\n        }\n        v33 = (_QWORD *)v16[811];\n        *(_QWORD *)(*(_QWORD *)(*v33 + 8 * v40) + 8 * v41) = v42;\n        if ( (unsigned int)(a3 - 1) > 1 )\n        {\n          v36 = v27 + v71 + (signed int)v19;\n          v37 = (signed int)v18 + v28;\n          **(_DWORD **)(*(_QWORD *)(v26[1] + 8 * v36) + 8 * v37) = 0;\n          *(_WORD *)(*(_QWORD *)(v32[1] + 8 * v36) + 2 * v37) = -1;\n          v39 = -1LL;\n          goto LABEL_32;\n        }\n        v23 = *v83;\n        if ( v74[0] == 1 )\n          goto LABEL_21;\nLABEL_30:\n        v20 = v73;\n        v45 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + *((_QWORD *)v73 + 8991) + 8 * v19)\n                                                            + 8 * v18)\n                                                + 8LL)\n                                    + 8LL * v76)\n                        + 8 * v79);\n        v36 = v27 + v71 + (signed int)v19;\n        v37 = (signed int)v18 + v28;\n        v46 = *(_WORD **)(*(_QWORD *)(v26[1] + 8 * v36) + 8 * v37);\n        *v46 = *v45;\n        v46[1] = v45[1];\n        *(_WORD *)(*(_QWORD *)(v32[1] + 8 * v36) + 2 * v37) = v76;\n        v39 = *(_QWORD *)(v87 + v80 + 8LL * (signed __int16)v76 + 24);\nLABEL_32:\n        *(_QWORD *)(*(_QWORD *)(v33[1] + 8 * v36) + 8 * v37) = v39;\n        result = v19++ + v92 + 1;\n        v16 = (_QWORD *)v80;\n        if ( result >= v91 )\n          goto LABEL_33;\n      }\n    }\n  }\n  else if ( (signed int)result > 0 )\n  {\n    v75 = (_QWORD **)qword_4F9E30;\n    v60 = (_QWORD *)(qword_4F9E30 + 264LL * v10 + 8LL * (signed __int16)v72 + 24);\n    v61 = v15;\n    v62 = v5;\n    result = v14;\n    do\n    {\n      if ( v77 > 0 )\n      {\n        v63 = *((_QWORD *)v73 + 8991);\n        v64 = v73[37] + (signed __int64)(signed int)v62;\n        v65 = 8LL * v73[36];\n        v66 = v65 + *v75[813];\n        v67 = v65 + *v75[810];\n        v68 = *v75[811] + v65;\n        result = v13;\n        do\n        {\n          v69 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v63 + 8 * result) + 8 * v62) + 8LL * v72) + 8 * v79);\n          v70 = *(_WORD **)(*(_QWORD *)(v66 + 8 * result) + 8 * v64);\n          *v70 = *v69;\n          v70[1] = v69[1];\n          *(_WORD *)(*(_QWORD *)(v67 + 8 * result) + 2 * v64) = v72;\n          *(_QWORD *)(*(_QWORD *)(v68 + 8 * result++) + 8 * v64) = *v60;\n        }\n        while ( result < v61 );\n      }\n      ++v62;\n    }\n    while ( v62 < v14 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x467c60L", 
            "funcEndAddr": "0x468435L", 
            "funcName": "sub_467C60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_468440()\n{\n  __int64 v0; // rax\n  signed __int64 v1; // rcx\n  signed int *v2; // rcx\n\n  v0 = *((_QWORD *)off_49F6D0 + 1771);\n  v1 = 632LL * *((signed int *)off_49F6D0 + 3);\n  if ( *(_DWORD *)(v0 + v1 + 552) )\n  {\n    v2 = (signed int *)(v0 + v1 + 536);\n    return *(unsigned int *)(v0 + 632LL * *v2 + 532);\n  }\n  if ( *(_DWORD *)(v0 + v1 + 556) )\n  {\n    v2 = (signed int *)(v0 + v1 + 540);\n    return *(unsigned int *)(v0 + 632LL * *v2 + 532);\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x468440L", 
            "funcEndAddr": "0x468498L", 
            "funcName": "sub_468440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4684A0(int a1, unsigned int a2, __int64 a3, int a4, int a5, int a6, int a7)\n{\n  __int64 result; // rax\n  int v8; // ebp\n  int v9; // ebx\n  signed __int64 v10; // r14\n  __int64 v11; // r12\n  __int64 v12; // r8\n  __int64 v13; // r10\n  signed __int64 v14; // r9\n  __int64 v15; // rdi\n  __int64 v16; // r15\n  _WORD *v17; // rax\n  __int64 v18; // r10\n  signed __int64 v19; // rdx\n  __int16 *v20; // rbx\n  signed __int64 v21; // rcx\n  _WORD *v22; // rbp\n  signed __int64 v23; // rsi\n  __int16 *v24; // rbp\n  signed __int64 v25; // rdi\n  _WORD *v26; // rsi\n  __int64 v27; // rax\n  _WORD *v28; // rax\n  signed __int64 v29; // r10\n  __int64 v30; // rax\n  __int64 v31; // r15\n  signed __int64 v32; // r8\n  __int64 v33; // rdx\n  signed __int64 v34; // r9\n  __int64 v35; // r14\n  _WORD *v36; // rax\n  signed __int64 v37; // r10\n  signed __int64 v38; // rdi\n  __int16 *v39; // rbx\n  signed __int64 v40; // rcx\n  _WORD *v41; // rbp\n  signed __int64 v42; // rsi\n  __int16 *v43; // rbp\n  signed __int64 v44; // rdx\n  _WORD *v45; // rsi\n  __int64 v46; // rax\n  _WORD *v47; // rax\n  signed __int64 v48; // r10\n  __int64 v49; // rax\n  __int64 v50; // r10\n  __int64 v51; // r11\n  signed __int64 v52; // r8\n  __int64 v53; // r9\n  __int64 v54; // r14\n  __int64 v55; // r15\n  signed __int64 v56; // r13\n  signed __int64 v57; // rbx\n  _QWORD *v58; // rbp\n  __int16 *v59; // rdi\n  _QWORD *v60; // rcx\n  __int16 *v61; // rdi\n  __int16 *v62; // rsi\n  __int16 *v63; // rcx\n  _QWORD *v64; // rcx\n  __int16 *v65; // rsi\n  _QWORD *v66; // rsi\n  __int16 *v67; // rdi\n  __int16 *v68; // rcx\n  __int16 *v69; // rcx\n  __int64 v70; // r12\n  __int64 v71; // r8\n  __int64 v72; // r10\n  signed __int64 v73; // r9\n  __int64 v74; // rdi\n  __int64 v75; // r15\n  _WORD *v76; // rax\n  __int64 v77; // r10\n  signed __int64 v78; // rdx\n  __int16 *v79; // rbx\n  signed __int64 v80; // rcx\n  _WORD *v81; // rbp\n  signed __int64 v82; // rsi\n  __int16 *v83; // rbp\n  signed __int64 v84; // rdi\n  _WORD *v85; // rsi\n  __int64 v86; // rax\n  _WORD *v87; // rax\n  signed __int64 v88; // r10\n  __int64 v89; // rax\n  __int64 v90; // [rsp+0h] [rbp-40h]\n  __int64 v91; // [rsp+8h] [rbp-38h]\n\n  v91 = *((_QWORD *)off_49F6D0 + 8990);\n  v90 = *((_QWORD *)off_49F6D0 + 8991);\n  result = (a2 + (a2 >> 31)) & 0xFFFFFFFE;\n  v8 = 2 * ((signed int)a2 % 2);\n  v9 = v8 + 2;\n  LODWORD(v10) = result + 2;\n  if ( a7 )\n  {\n    if ( a6 == 2 )\n    {\n      v50 = a4;\n      a3 = (signed int)a3;\n      v51 = a5;\n      v52 = v9;\n      result = (signed int)result;\n      v53 = (signed int)v10;\n      v54 = *(_QWORD *)(v90 + 8LL * v8);\n      v55 = *(_QWORD *)(v91 + 8LL * v8);\n      v56 = v8 | 1LL;\n      v57 = ((signed __int64)a1 << 7) + 16LL * v8 + 82;\n      do\n      {\n        v58 = *(_QWORD **)(v54 + 8 * result);\n        v59 = *(__int16 **)(*(_QWORD *)(*v58 + 8 * v50) + 8 * a3);\n        *(__int16 *)((char *)&word_4F888E[2 * result] + v57) = *v59;\n        *(__int16 *)((char *)&word_4F8890[2 * result] + v57) = v59[1];\n        v60 = *(_QWORD **)(v55 + 8 * result);\n        v61 = *(__int16 **)(*(_QWORD *)(*v60 + 8 * v50) + 8 * a3);\n        *(__int16 *)((char *)&word_4F898E[2 * result] + v57) = *v61;\n        *(__int16 *)((char *)&word_4F8990[2 * result] + v57) = v61[1];\n        v62 = *(__int16 **)(*(_QWORD *)(v58[1] + 8 * v51) + 8 * a3);\n        *(__int16 *)((char *)&word_4F88CE[2 * result] + v57) = *v62;\n        *(__int16 *)((char *)&word_4F88D0[2 * result] + v57) = v62[1];\n        v63 = *(__int16 **)(*(_QWORD *)(v60[1] + 8 * v51) + 8 * a3);\n        *(__int16 *)((char *)&word_4F89CE[2 * result] + v57) = *v63;\n        *(__int16 *)((char *)&word_4F89D0[2 * result] + v57) = v63[1];\n        if ( v56 < v52 )\n        {\n          v64 = *(_QWORD **)(*(_QWORD *)(v90 + 8 * v56) + 8 * result);\n          v65 = *(__int16 **)(*(_QWORD *)(*v64 + 8 * v50) + 8 * a3);\n          *(__int16 *)((char *)&word_4F889E[2 * result] + v57) = *v65;\n          *(__int16 *)((char *)&word_4F88A0[2 * result] + v57) = v65[1];\n          v66 = *(_QWORD **)(*(_QWORD *)(v91 + 8 * v56) + 8 * result);\n          v67 = *(__int16 **)(*(_QWORD *)(*v66 + 8 * v50) + 8 * a3);\n          *(__int16 *)((char *)&word_4F899E[2 * result] + v57) = *v67;\n          *(__int16 *)((char *)&word_4F89A0[2 * result] + v57) = v67[1];\n          v68 = *(__int16 **)(*(_QWORD *)(v64[1] + 8 * v51) + 8 * a3);\n          *(__int16 *)((char *)&word_4F88DE[2 * result] + v57) = *v68;\n          *(_WORD *)((char *)&dword_4F88E0[result] + v57) = v68[1];\n          v69 = *(__int16 **)(*(_QWORD *)(v66[1] + 8 * v51) + 8 * a3);\n          *(__int16 *)((char *)&word_4F89DE[2 * result] + v57) = *v69;\n          *(__int16 *)((char *)&word_4F89E0[2 * result] + v57) = v69[1];\n        }\n        ++result;\n      }\n      while ( result < v53 );\n    }\n    else if ( a6 == 1 )\n    {\n      v70 = a5;\n      v71 = (signed int)a3;\n      v72 = a1;\n      v73 = v9;\n      v74 = (signed int)result;\n      v10 = (signed int)v10;\n      v75 = *(_QWORD *)(v90 + 8LL * v8);\n      v76 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 8LL * (signed int)result) + 8LL) + 8 * v70)\n                      + 8LL * (signed int)a3);\n      v77 = v72 << 7;\n      v78 = v77 + 16LL * v8;\n      *(_WORD *)((char *)&dword_4F8920[v74] + v78) = *v76;\n      *(_WORD *)((char *)&dword_4F8920[v74] + v78 + 2) = v76[1];\n      result = *(_QWORD *)(v91 + 8LL * v8);\n      v79 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8 * v74) + 8LL) + 8 * v70) + 8 * v71);\n      *(__int16 *)((char *)&word_4F8A20[2 * v74] + v78) = *v79;\n      *(__int16 *)((char *)&word_4F8A22[2 * v74] + v78) = v79[1];\n      v80 = v8 | 1LL;\n      if ( v80 < v73 )\n      {\n        v81 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 8 * v80) + 8 * v74) + 8LL) + 8 * v70)\n                        + 8 * v71);\n        v82 = v77 + 16 * v80;\n        *(_WORD *)((char *)&dword_4F8920[v74] + v82) = *v81;\n        *(_WORD *)((char *)&dword_4F8920[v74] + v82 + 2) = v81[1];\n        v83 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 8 * v80) + 8 * v74) + 8LL) + 8 * v70)\n                          + 8 * v71);\n        *(__int16 *)((char *)&word_4F8A20[2 * v74] + v82) = *v83;\n        *(__int16 *)((char *)&word_4F8A22[2 * v74] + v82) = v83[1];\n      }\n      v84 = v74 | 1;\n      if ( v84 < v10 )\n      {\n        v85 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 8 * v84) + 8LL) + 8 * v70) + 8 * v71);\n        *(_WORD *)((char *)&dword_4F8920[v84] + v78) = *v85;\n        *(_WORD *)((char *)&dword_4F8920[v84] + v78 + 2) = v85[1];\n        v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8 * v84) + 8LL) + 8 * v70) + 8 * v71);\n        *(__int16 *)((char *)&word_4F8A20[2 * v84] + v78) = *(_WORD *)v86;\n        result = *(unsigned __int16 *)(v86 + 2);\n        *(__int16 *)((char *)&word_4F8A22[2 * v84] + v78) = result;\n        if ( v80 < v73 )\n        {\n          v87 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 8 * v80) + 8 * v84) + 8LL) + 8 * v70)\n                          + 8 * v71);\n          v88 = 16 * v80 + v77;\n          *(_WORD *)((char *)&dword_4F8920[v84] + v88) = *v87;\n          *(_WORD *)((char *)&dword_4F8920[v84] + v88 + 2) = v87[1];\n          v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 8 * v80) + 8 * v84) + 8LL) + 8 * v70)\n                          + 8 * v71);\n          *(__int16 *)((char *)&word_4F8A20[2 * v84] + v88) = *(_WORD *)v89;\n          result = *(unsigned __int16 *)(v89 + 2);\n          *(__int16 *)((char *)&word_4F8A22[2 * v84] + v88) = result;\n        }\n      }\n    }\n    else\n    {\n      if ( a6 )\n        error((__int64)\"invalid direction mode\", 255);\n      v11 = a4;\n      v12 = (signed int)a3;\n      v13 = a1;\n      v14 = v9;\n      v15 = (signed int)result;\n      v10 = (signed int)v10;\n      v16 = *(_QWORD *)(v90 + 8LL * v8);\n      v17 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v16 + 8LL * (signed int)result) + 8LL * a4) + 8LL * (signed int)a3);\n      v18 = v13 << 7;\n      v19 = v18 + 16LL * v8;\n      *(_WORD *)((char *)&dword_4F88E0[v15] + v19) = *v17;\n      *(_WORD *)((char *)&dword_4F88E0[v15] + v19 + 2) = v17[1];\n      result = *(_QWORD *)(v91 + 8LL * v8);\n      v20 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(result + 8 * v15) + 8LL * a4) + 8 * v12);\n      *(__int16 *)((char *)&word_4F89E0[2 * v15] + v19) = *v20;\n      *(__int16 *)((char *)&word_4F89E2[2 * v15] + v19) = v20[1];\n      v21 = v8 | 1LL;\n      if ( v21 < v14 )\n      {\n        v22 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v90 + 8 * v21) + 8 * v15) + 8 * v11) + 8 * v12);\n        v23 = v18 + 16 * v21;\n        *(_WORD *)((char *)&dword_4F88E0[v15] + v23) = *v22;\n        *(_WORD *)((char *)&dword_4F88E0[v15] + v23 + 2) = v22[1];\n        v24 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v91 + 8 * v21) + 8 * v15) + 8 * v11) + 8 * v12);\n        *(__int16 *)((char *)&word_4F89E0[2 * v15] + v23) = *v24;\n        *(__int16 *)((char *)&word_4F89E2[2 * v15] + v23) = v24[1];\n      }\n      v25 = v15 | 1;\n      if ( v25 < v10 )\n      {\n        v26 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v16 + 8 * v25) + 8 * v11) + 8 * v12);\n        *(_WORD *)((char *)&dword_4F88E0[v25] + v19) = *v26;\n        *(_WORD *)((char *)&dword_4F88E0[v25] + v19 + 2) = v26[1];\n        v27 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8 * v25) + 8 * v11) + 8 * v12);\n        *(__int16 *)((char *)&word_4F89E0[2 * v25] + v19) = *(_WORD *)v27;\n        result = *(unsigned __int16 *)(v27 + 2);\n        *(__int16 *)((char *)&word_4F89E2[2 * v25] + v19) = result;\n        if ( v21 < v14 )\n        {\n          v28 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v90 + 8 * v21) + 8 * v25) + 8 * v11) + 8 * v12);\n          v29 = 16 * v21 + v18;\n          *(_WORD *)((char *)&dword_4F88E0[v25] + v29) = *v28;\n          *(_WORD *)((char *)&dword_4F88E0[v25] + v29 + 2) = v28[1];\n          v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v91 + 8 * v21) + 8 * v25) + 8 * v11) + 8 * v12);\n          *(__int16 *)((char *)&word_4F89E0[2 * v25] + v29) = *(_WORD *)v30;\n          result = *(unsigned __int16 *)(v30 + 2);\n          *(__int16 *)((char *)&word_4F89E2[2 * v25] + v29) = result;\n        }\n      }\n    }\n  }\n  else if ( a6 >= 0 )\n  {\n    v31 = a4;\n    v32 = v9;\n    v33 = (signed int)result;\n    v34 = (signed int)v10;\n    v35 = *(_QWORD *)(v90 + 8LL * v8);\n    v36 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v35 + 8LL * (signed int)result) + 8LL * a4) + 32LL);\n    v37 = (signed __int64)a1 << 7;\n    v38 = v37 + 16LL * v8;\n    *(_WORD *)((char *)&dword_4F88E0[v33] + v38) = *v36;\n    *(_WORD *)((char *)&dword_4F88E0[v33] + v38 + 2) = v36[1];\n    result = *(_QWORD *)(v91 + 8LL * v8);\n    v39 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(result + 8 * v33) + 8LL * a4) + 32LL);\n    *(__int16 *)((char *)&word_4F89E0[2 * v33] + v38) = *v39;\n    *(__int16 *)((char *)&word_4F89E2[2 * v33] + v38) = v39[1];\n    v40 = v8 | 1LL;\n    if ( v40 < v32 )\n    {\n      v41 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v90 + 8 * v40) + 8 * v33) + 8 * v31) + 32LL);\n      v42 = v37 + 16 * v40;\n      *(_WORD *)((char *)&dword_4F88E0[v33] + v42) = *v41;\n      *(_WORD *)((char *)&dword_4F88E0[v33] + v42 + 2) = v41[1];\n      v43 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v91 + 8 * v40) + 8 * v33) + 8 * v31) + 32LL);\n      *(__int16 *)((char *)&word_4F89E0[2 * v33] + v42) = *v43;\n      *(__int16 *)((char *)&word_4F89E2[2 * v33] + v42) = v43[1];\n    }\n    v44 = v33 | 1;\n    if ( v44 < v34 )\n    {\n      v45 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v35 + 8 * v44) + 8 * v31) + 32LL);\n      *(_WORD *)((char *)&dword_4F88E0[v44] + v38) = *v45;\n      *(_WORD *)((char *)&dword_4F88E0[v44] + v38 + 2) = v45[1];\n      v46 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8 * v44) + 8 * v31) + 32LL);\n      *(__int16 *)((char *)&word_4F89E0[2 * v44] + v38) = *(_WORD *)v46;\n      result = *(unsigned __int16 *)(v46 + 2);\n      *(__int16 *)((char *)&word_4F89E2[2 * v44] + v38) = result;\n      if ( v40 < v32 )\n      {\n        v47 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v90 + 8 * v40) + 8 * v44) + 8 * v31) + 32LL);\n        v48 = 16 * v40 + v37;\n        *(_WORD *)((char *)&dword_4F88E0[v44] + v48) = *v47;\n        *(_WORD *)((char *)&dword_4F88E0[v44] + v48 + 2) = v47[1];\n        v49 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v91 + 8 * v40) + 8 * v44) + 8 * v31) + 32LL);\n        *(__int16 *)((char *)&word_4F89E0[2 * v44] + v48) = *(_WORD *)v49;\n        result = *(unsigned __int16 *)(v49 + 2);\n        *(__int16 *)((char *)&word_4F89E2[2 * v44] + v48) = result;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4684a0L", 
            "funcEndAddr": "0x468c33L", 
            "funcName": "sub_4684A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_468C40(int a1, unsigned int a2, __int64 a3, int a4, int a5, int a6, int a7)\n{\n  signed __int64 result; // rax\n  int v8; // ebp\n  int v9; // ebx\n  signed __int64 v10; // r14\n  __int64 v11; // r10\n  __int64 v12; // r8\n  __int64 v13; // r12\n  __int64 v14; // rsi\n  signed __int64 v15; // r9\n  __int64 v16; // rdi\n  __int64 v17; // r10\n  signed __int64 v18; // rcx\n  __int64 v19; // r15\n  _WORD *v20; // rbx\n  _WORD *v21; // rbp\n  signed __int64 v22; // rsi\n  signed __int64 v23; // rdx\n  _WORD *v24; // rbx\n  _WORD *v25; // rbx\n  signed __int64 v26; // rdi\n  _WORD *v27; // rbp\n  signed __int64 v28; // r10\n  _WORD *v29; // rcx\n  _WORD *v30; // rcx\n  __int64 v31; // r15\n  __int64 v32; // rdx\n  signed __int64 v33; // r8\n  __int64 v34; // rsi\n  signed __int64 v35; // r9\n  signed __int64 v36; // r10\n  signed __int64 v37; // rdi\n  __int64 v38; // r14\n  _WORD *v39; // rbx\n  _WORD *v40; // rbp\n  signed __int64 v41; // rdx\n  signed __int64 v42; // rcx\n  _WORD *v43; // rbx\n  _WORD *v44; // rbx\n  signed __int64 v45; // rsi\n  _WORD *v46; // rbp\n  signed __int64 v47; // r10\n  _WORD *v48; // rcx\n  __int64 v49; // r10\n  __int64 v50; // r11\n  signed __int64 v51; // r8\n  signed __int64 v52; // r9\n  __int64 v53; // r14\n  __int64 v54; // r15\n  signed __int64 v55; // r13\n  signed __int64 v56; // rbx\n  _QWORD *v57; // rdi\n  _WORD *v58; // rcx\n  _QWORD *v59; // rbp\n  _WORD *v60; // rsi\n  _WORD *v61; // rsi\n  _WORD *v62; // rsi\n  _QWORD *v63; // rsi\n  _WORD *v64; // rdi\n  _QWORD *v65; // rdi\n  _WORD *v66; // rbp\n  _WORD *v67; // rsi\n  _WORD *v68; // rsi\n  __int64 v69; // r10\n  __int64 v70; // r12\n  __int64 v71; // r8\n  __int64 v72; // rcx\n  signed __int64 v73; // r9\n  __int64 v74; // rdi\n  __int64 v75; // r10\n  signed __int64 v76; // rdx\n  __int64 v77; // r15\n  _WORD *v78; // rbx\n  _WORD *v79; // rbp\n  signed __int64 v80; // rcx\n  signed __int64 v81; // rsi\n  _WORD *v82; // rbx\n  _WORD *v83; // rbx\n  signed __int64 v84; // rdi\n  _WORD *v85; // rbp\n  signed __int64 v86; // r10\n  _WORD *v87; // rdx\n  __int64 v88; // [rsp+0h] [rbp-40h]\n  __int64 v89; // [rsp+8h] [rbp-38h]\n\n  v89 = *((_QWORD *)off_49F6D0 + 8990);\n  v88 = *((_QWORD *)off_49F6D0 + 8991);\n  result = (a2 + (a2 >> 31)) & 0xFFFFFFFE;\n  v8 = 2 * ((signed int)a2 % 2);\n  v9 = v8 + 2;\n  LODWORD(v10) = result + 2;\n  if ( a7 )\n  {\n    if ( a6 == 2 )\n    {\n      v49 = a4;\n      a3 = (signed int)a3;\n      v50 = a5;\n      v51 = v9;\n      result = (signed int)result;\n      v52 = (signed int)v10;\n      v53 = *(_QWORD *)(v88 + 8LL * v8);\n      v54 = *(_QWORD *)(v89 + 8LL * v8);\n      v55 = v8 | 1LL;\n      v56 = ((signed __int64)a1 << 7) + 16LL * v8 + 82;\n      do\n      {\n        v57 = *(_QWORD **)(v53 + 8 * result);\n        v58 = *(_WORD **)(*(_QWORD *)(*v57 + 8 * v49) + 8 * a3);\n        *v58 = *(__int16 *)((char *)&word_4F888E[2 * result] + v56);\n        v58[1] = *(__int16 *)((char *)&word_4F8890[2 * result] + v56);\n        v59 = *(_QWORD **)(v54 + 8 * result);\n        v60 = *(_WORD **)(*(_QWORD *)(*v59 + 8 * v49) + 8 * a3);\n        *v60 = *(__int16 *)((char *)&word_4F898E[2 * result] + v56);\n        v60[1] = *(__int16 *)((char *)&word_4F8990[2 * result] + v56);\n        v61 = *(_WORD **)(*(_QWORD *)(v57[1] + 8 * v50) + 8 * a3);\n        *v61 = *(__int16 *)((char *)&word_4F88CE[2 * result] + v56);\n        v61[1] = *(__int16 *)((char *)&word_4F88D0[2 * result] + v56);\n        v62 = *(_WORD **)(*(_QWORD *)(v59[1] + 8 * v50) + 8 * a3);\n        *v62 = *(__int16 *)((char *)&word_4F89CE[2 * result] + v56);\n        v62[1] = *(__int16 *)((char *)&word_4F89D0[2 * result] + v56);\n        if ( v55 < v51 )\n        {\n          v63 = *(_QWORD **)(*(_QWORD *)(v88 + 8 * v55) + 8 * result);\n          v64 = *(_WORD **)(*(_QWORD *)(*v63 + 8 * v49) + 8 * a3);\n          *v64 = *(__int16 *)((char *)&word_4F889E[2 * result] + v56);\n          v64[1] = *(__int16 *)((char *)&word_4F88A0[2 * result] + v56);\n          v65 = *(_QWORD **)(*(_QWORD *)(v89 + 8 * v55) + 8 * result);\n          v66 = *(_WORD **)(*(_QWORD *)(*v65 + 8 * v49) + 8 * a3);\n          *v66 = *(__int16 *)((char *)&word_4F899E[2 * result] + v56);\n          v66[1] = *(__int16 *)((char *)&word_4F89A0[2 * result] + v56);\n          v67 = *(_WORD **)(*(_QWORD *)(v63[1] + 8 * v50) + 8 * a3);\n          *v67 = *(__int16 *)((char *)&word_4F88DE[2 * result] + v56);\n          v67[1] = *(_WORD *)((char *)&dword_4F88E0[result] + v56);\n          v68 = *(_WORD **)(*(_QWORD *)(v65[1] + 8 * v50) + 8 * a3);\n          *v68 = *(__int16 *)((char *)&word_4F89DE[2 * result] + v56);\n          v68[1] = *(__int16 *)((char *)&word_4F89E0[2 * result] + v56);\n        }\n        ++result;\n      }\n      while ( result < v52 );\n    }\n    else if ( a6 == 1 )\n    {\n      v69 = a1;\n      v70 = a5;\n      v71 = (signed int)a3;\n      v72 = v8;\n      v73 = v9;\n      v74 = (signed int)result;\n      v10 = (signed int)v10;\n      v75 = v69 << 7;\n      v76 = v75 + 16LL * v8;\n      v77 = *(_QWORD *)(v88 + 8LL * v8);\n      v78 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 8LL * (signed int)result) + 8LL) + 8 * v70) + 8 * v71);\n      *v78 = *(_WORD *)((char *)&dword_4F8920[(signed int)result] + v76);\n      v78[1] = *(_WORD *)((char *)&dword_4F8920[(signed int)result] + v76 + 2);\n      LOWORD(v78) = *(__int16 *)((char *)&word_4F8A20[2 * (signed int)result] + v76);\n      result = *(_QWORD *)(v89 + 8LL * v8);\n      v79 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8 * v74) + 8LL) + 8 * v70) + 8 * v71);\n      *v79 = (_WORD)v78;\n      v79[1] = *(__int16 *)((char *)&word_4F8A22[2 * v74] + v76);\n      v80 = v72 | 1;\n      if ( v80 < v73 )\n      {\n        v81 = v75 + 16 * v80;\n        v82 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 8 * v80) + 8 * v74) + 8LL) + 8 * v70)\n                        + 8 * v71);\n        *v82 = *(_WORD *)((char *)&dword_4F8920[v74] + v81);\n        v82[1] = *(_WORD *)((char *)&dword_4F8920[v74] + v81 + 2);\n        v83 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 8 * v80) + 8 * v74) + 8LL) + 8 * v70)\n                        + 8 * v71);\n        *v83 = *(__int16 *)((char *)&word_4F8A20[2 * v74] + v81);\n        v83[1] = *(__int16 *)((char *)&word_4F8A22[2 * v74] + v81);\n      }\n      v84 = v74 | 1;\n      if ( v84 < v10 )\n      {\n        v85 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 8 * v84) + 8LL) + 8 * v70) + 8 * v71);\n        *v85 = *(_WORD *)((char *)&dword_4F8920[v84] + v76);\n        v85[1] = *(_WORD *)((char *)&dword_4F8920[v84] + v76 + 2);\n        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8 * v84) + 8LL) + 8 * v70) + 8 * v71);\n        *(_WORD *)result = *(__int16 *)((char *)&word_4F8A20[2 * v84] + v76);\n        *(_WORD *)(result + 2) = *(__int16 *)((char *)&word_4F8A22[2 * v84] + v76);\n        if ( v80 < v73 )\n        {\n          v86 = 16 * v80 + v75;\n          v87 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 8 * v80) + 8 * v84) + 8LL) + 8 * v70)\n                          + 8 * v71);\n          *v87 = *(_WORD *)((char *)&dword_4F8920[v84] + v86);\n          v87[1] = *(_WORD *)((char *)&dword_4F8920[v84] + v86 + 2);\n          v30 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 8 * v80) + 8 * v84) + 8LL) + 8 * v70)\n                          + 8 * v71);\n          *v30 = *(__int16 *)((char *)&word_4F8A20[2 * v84] + v86);\n          result = *(unsigned __int16 *)((char *)&word_4F8A22[2 * v84] + v86);\n          goto LABEL_26;\n        }\n      }\n    }\n    else\n    {\n      if ( a6 )\n        error((__int64)\"invalid direction mode\", 255);\n      v11 = a1;\n      v12 = a4;\n      v13 = (signed int)a3;\n      v14 = v8;\n      v15 = v9;\n      v16 = (signed int)result;\n      v10 = (signed int)v10;\n      v17 = v11 << 7;\n      v18 = v17 + 16LL * v8;\n      v19 = *(_QWORD *)(v88 + 8LL * v8);\n      v20 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v19 + 8LL * (signed int)result) + 8 * v12) + 8LL * (signed int)a3);\n      *v20 = *(_WORD *)((char *)&dword_4F88E0[(signed int)result] + v18);\n      v20[1] = *(_WORD *)((char *)&dword_4F88E0[(signed int)result] + v18 + 2);\n      LOWORD(v20) = *(__int16 *)((char *)&word_4F89E0[2 * (signed int)result] + v18);\n      result = *(_QWORD *)(v89 + 8LL * v8);\n      v21 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(result + 8 * v16) + 8 * v12) + 8LL * (signed int)a3);\n      *v21 = (_WORD)v20;\n      v21[1] = *(__int16 *)((char *)&word_4F89E2[2 * v16] + v18);\n      v22 = v14 | 1;\n      if ( v22 < v15 )\n      {\n        v23 = v17 + 16 * v22;\n        v24 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v88 + 8 * v22) + 8 * v16) + 8 * v12) + 8 * v13);\n        *v24 = *(_WORD *)((char *)&dword_4F88E0[v16] + v23);\n        v24[1] = *(_WORD *)((char *)&dword_4F88E0[v16] + v23 + 2);\n        v25 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v89 + 8 * v22) + 8 * v16) + 8 * v12) + 8 * v13);\n        *v25 = *(__int16 *)((char *)&word_4F89E0[2 * v16] + v23);\n        v25[1] = *(__int16 *)((char *)&word_4F89E2[2 * v16] + v23);\n      }\n      v26 = v16 | 1;\n      if ( v26 < v10 )\n      {\n        v27 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v19 + 8 * v26) + 8 * v12) + 8 * v13);\n        *v27 = *(_WORD *)((char *)&dword_4F88E0[v26] + v18);\n        v27[1] = *(_WORD *)((char *)&dword_4F88E0[v26] + v18 + 2);\n        result = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8 * v26) + 8 * v12) + 8 * v13);\n        *(_WORD *)result = *(__int16 *)((char *)&word_4F89E0[2 * v26] + v18);\n        *(_WORD *)(result + 2) = *(__int16 *)((char *)&word_4F89E2[2 * v26] + v18);\n        if ( v22 < v15 )\n        {\n          v28 = 16 * v22 + v17;\n          v29 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v88 + 8 * v22) + 8 * v26) + 8 * v12) + 8 * v13);\n          *v29 = *(_WORD *)((char *)&dword_4F88E0[v26] + v28);\n          v29[1] = *(_WORD *)((char *)&dword_4F88E0[v26] + v28 + 2);\n          v30 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v89 + 8 * v22) + 8 * v26) + 8 * v12) + 8 * v13);\n          *v30 = *(__int16 *)((char *)&word_4F89E0[2 * v26] + v28);\n          result = *(unsigned __int16 *)((char *)&word_4F89E2[2 * v26] + v28);\nLABEL_26:\n          v30[1] = result;\n          return result;\n        }\n      }\n    }\n  }\n  else if ( a6 >= 0 )\n  {\n    v31 = a4;\n    v32 = v8;\n    v33 = v9;\n    v34 = (signed int)result;\n    v35 = (signed int)v10;\n    v36 = (signed __int64)a1 << 7;\n    v37 = v36 + 16LL * v8;\n    v38 = *(_QWORD *)(v88 + 8LL * v8);\n    v39 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v38 + 8LL * (signed int)result) + 8LL * a4) + 32LL);\n    *v39 = *(_WORD *)((char *)&dword_4F88E0[(signed int)result] + v37);\n    v39[1] = *(_WORD *)((char *)&dword_4F88E0[(signed int)result] + v37 + 2);\n    LOWORD(v39) = *(__int16 *)((char *)&word_4F89E0[2 * (signed int)result] + v37);\n    result = *(_QWORD *)(v89 + 8LL * v8);\n    v40 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(result + 8 * v34) + 8LL * a4) + 32LL);\n    *v40 = (_WORD)v39;\n    v40[1] = *(__int16 *)((char *)&word_4F89E2[2 * v34] + v37);\n    v41 = v32 | 1;\n    if ( v41 < v33 )\n    {\n      v42 = v36 + 16 * v41;\n      v43 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v88 + 8 * v41) + 8 * v34) + 8 * v31) + 32LL);\n      *v43 = *(_WORD *)((char *)&dword_4F88E0[v34] + v42);\n      v43[1] = *(_WORD *)((char *)&dword_4F88E0[v34] + v42 + 2);\n      v44 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v89 + 8 * v41) + 8 * v34) + 8 * v31) + 32LL);\n      *v44 = *(__int16 *)((char *)&word_4F89E0[2 * v34] + v42);\n      v44[1] = *(__int16 *)((char *)&word_4F89E2[2 * v34] + v42);\n    }\n    v45 = v34 | 1;\n    if ( v45 < v35 )\n    {\n      v46 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v38 + 8 * v45) + 8 * v31) + 32LL);\n      *v46 = *(_WORD *)((char *)&dword_4F88E0[v45] + v37);\n      v46[1] = *(_WORD *)((char *)&dword_4F88E0[v45] + v37 + 2);\n      result = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8 * v45) + 8 * v31) + 32LL);\n      *(_WORD *)result = *(__int16 *)((char *)&word_4F89E0[2 * v45] + v37);\n      *(_WORD *)(result + 2) = *(__int16 *)((char *)&word_4F89E2[2 * v45] + v37);\n      if ( v41 < v33 )\n      {\n        v47 = 16 * v41 + v36;\n        v48 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v88 + 8 * v41) + 8 * v45) + 8 * v31) + 32LL);\n        *v48 = *(_WORD *)((char *)&dword_4F88E0[v45] + v47);\n        v48[1] = *(_WORD *)((char *)&dword_4F88E0[v45] + v47 + 2);\n        v30 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v89 + 8 * v41) + 8 * v45) + 8 * v31) + 32LL);\n        *v30 = *(__int16 *)((char *)&word_4F89E0[2 * v45] + v47);\n        result = *(unsigned __int16 *)((char *)&word_4F89E2[2 * v45] + v47);\n        goto LABEL_26;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x468c40L", 
            "funcEndAddr": "0x4693c3L", 
            "funcName": "sub_468C40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4693D0(int a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)\n{\n  __int64 v7; // rax\n  int v8; // er14\n  int v9; // er11\n  int v10; // er13\n  __int64 v11; // rbp\n  __int64 v12; // r10\n  __int64 v13; // r15\n  __int64 v14; // rcx\n  __int64 v15; // rsi\n  _WORD *v16; // rbx\n  signed __int64 v17; // r12\n  signed __int64 v18; // rsi\n  __int64 v19; // rbx\n  __int16 *v20; // rbx\n  signed __int64 v21; // rbp\n  signed __int64 v22; // r8\n  _WORD *v23; // rbp\n  int v24; // ST10_4\n  __int64 v25; // rdx\n  signed __int64 v26; // r10\n  __int16 *v27; // rbp\n  __int16 v28; // bx\n  signed __int64 v29; // rcx\n  _WORD *v30; // rbp\n  __int16 *v31; // rbp\n  _WORD *v32; // rsi\n  signed __int64 v33; // r12\n  __int16 *v34; // rbp\n  signed __int64 v35; // rcx\n  signed __int64 v36; // rdi\n  signed __int64 v37; // rbx\n  signed __int64 v38; // rdx\n  signed __int64 result; // rax\n  signed __int64 v40; // rcx\n  __int64 v41; // r15\n  signed __int64 v42; // r8\n  __int64 v43; // r10\n  _WORD *v44; // rsi\n  signed __int64 v45; // r12\n  signed __int64 v46; // rdi\n  __int64 v47; // r11\n  __int16 *v48; // rbx\n  signed __int64 v49; // rcx\n  __int64 v50; // r14\n  _WORD *v51; // rsi\n  signed __int64 v52; // rbp\n  __int16 *v53; // rsi\n  _WORD *v54; // rsi\n  __int16 *v55; // rsi\n  _WORD *v56; // rsi\n  signed __int64 v57; // r12\n  __int16 *v58; // rcx\n  signed __int64 v59; // rcx\n  signed __int64 v60; // rsi\n  signed __int64 v61; // rbp\n  signed __int64 v62; // rbx\n  __int64 v63; // r12\n  __int64 v64; // rcx\n  signed __int64 v65; // r9\n  __int64 v66; // r11\n  _WORD *v67; // rdi\n  __int64 v68; // r12\n  signed __int64 v69; // rsi\n  __int64 v70; // r14\n  __int16 *v71; // rbx\n  signed __int64 v72; // rcx\n  _WORD *v73; // rdi\n  signed __int64 v74; // rbp\n  __int16 *v75; // rdi\n  _WORD *v76; // rdi\n  __int16 *v77; // rdi\n  _WORD *v78; // rsi\n  signed __int64 v79; // r12\n  __int16 *v80; // rcx\n  signed __int64 v81; // rcx\n  signed __int64 v82; // rdi\n  signed __int64 v83; // rbx\n  __int64 v84; // [rsp+0h] [rbp-68h]\n  __int64 v85; // [rsp+8h] [rbp-60h]\n  int v86; // [rsp+14h] [rbp-54h]\n  __int64 v87; // [rsp+28h] [rbp-40h]\n  __int64 v88; // [rsp+30h] [rbp-38h]\n\n  LODWORD(v7) = (a2 + (a2 >> 31)) & 0xFFFFFFFE;\n  v8 = 2 * ((signed int)a2 % 2);\n  v9 = v8 + 2;\n  v10 = v7 + 2;\n  if ( a6 < 0 )\n  {\n    v7 = (signed int)v7;\n    v35 = (signed __int64)a1 << 7;\n    v36 = v35 + 16LL * v8;\n    *(int *)((char *)&dword_4F88E0[v7] + v36) = 0;\n    *(int *)((char *)&dword_4F8920[v7] + v36) = 0;\n    v37 = v8 | 1LL;\n    if ( v37 < v9 )\n    {\n      v38 = v35 + 16 * v37;\n      *(int *)((char *)&dword_4F88E0[v7] + v38) = 0;\n      *(int *)((char *)&dword_4F8920[v7] + v38) = 0;\n    }\n    result = v7 | 1;\n    if ( result < v10 )\n    {\n      *(int *)((char *)&dword_4F88E0[result] + v36) = 0;\n      *(int *)((char *)&dword_4F8920[result] + v36) = 0;\n      if ( v37 < v9 )\n      {\n        v40 = 16 * v37 + v35;\n        *(int *)((char *)&dword_4F88E0[result] + v40) = 0;\nLABEL_35:\n        *(int *)((char *)&dword_4F8920[result] + v40) = 0;\n        return result;\n      }\n    }\n  }\n  else\n  {\n    v84 = *((_QWORD *)off_49F6D0 + 8990);\n    v11 = *((_QWORD *)off_49F6D0 + 8991);\n    if ( a7 )\n    {\n      v86 = a5;\n      v85 = *((_QWORD *)off_49F6D0 + 8991);\n      if ( (a6 | 2) == 2 )\n      {\n        v12 = a4;\n        v13 = a3;\n        v14 = (signed int)v7;\n        v15 = *(_QWORD *)(v11 + 8LL * v8);\n        v88 = v15;\n        v16 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v15 + 8LL * (signed int)v7) + 8 * v12) + 8LL * a3);\n        v17 = (signed __int64)a1 << 7;\n        v18 = v17 + 16LL * v8;\n        *(_WORD *)((char *)&dword_4F88E0[v14] + v18) = *v16;\n        *(_WORD *)((char *)&dword_4F88E0[v14] + v18 + 2) = v16[1];\n        v19 = *(_QWORD *)(v84 + 8LL * v8);\n        v87 = v19;\n        v20 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(v19 + 8LL * (signed int)v7) + 8 * v12) + 8LL * a3);\n        *(__int16 *)((char *)&word_4F89E0[2 * v14] + v18) = *v20;\n        *(__int16 *)((char *)&word_4F89E2[2 * v14] + v18) = v20[1];\n        v21 = v10;\n        v22 = v8 | 1LL;\n        if ( v22 < v9 )\n        {\n          v23 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v85 + 8 * v22) + 8LL * (signed int)v7) + 8 * v12)\n                          + 8LL * a3);\n          v24 = a3;\n          v25 = v12;\n          v26 = v17 + 16 * v22;\n          *(_WORD *)((char *)&dword_4F88E0[(signed int)v7] + v26) = *v23;\n          *(_WORD *)((char *)&dword_4F88E0[(signed int)v7] + v26 + 2) = v23[1];\n          v27 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v84 + 8 * v22) + 8LL * (signed int)v7) + 8 * v25)\n                            + 8 * v13);\n          *(__int16 *)((char *)&word_4F89E0[2 * (signed int)v7] + v26) = *v27;\n          v28 = v27[1];\n          v21 = v10;\n          *(__int16 *)((char *)&word_4F89E2[2 * (signed int)v7] + v26) = v28;\n          v12 = v25;\n          a3 = v24;\n        }\n        v29 = (signed int)v7 | 1LL;\n        if ( v29 < v21 )\n        {\n          v30 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v88 + 8 * v29) + 8 * v12) + 8 * v13);\n          *(_WORD *)((char *)&dword_4F88E0[v29] + v18) = *v30;\n          *(_WORD *)((char *)&dword_4F88E0[v29] + v18 + 2) = v30[1];\n          v31 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(v87 + 8 * v29) + 8 * v12) + 8 * v13);\n          *(__int16 *)((char *)&word_4F89E0[2 * v29] + v18) = *v31;\n          *(__int16 *)((char *)&word_4F89E2[2 * v29] + v18) = v31[1];\n          if ( v22 < v9 )\n          {\n            v32 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v85 + 8 * v22) + 8 * v29) + 8 * v12) + 8 * v13);\n            v33 = 16 * v22 + v17;\n            *(_WORD *)((char *)&dword_4F88E0[v29] + v33) = *v32;\n            *(_WORD *)((char *)&dword_4F88E0[v29] + v33 + 2) = v32[1];\n            v34 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v84 + 8 * v22) + 8 * v29) + 8 * v12) + 8 * v13);\n            *(__int16 *)((char *)&word_4F89E0[2 * v29] + v33) = *v34;\n            *(__int16 *)((char *)&word_4F89E2[2 * v29] + v33) = v34[1];\n          }\n        }\n      }\n      else\n      {\n        v59 = (signed __int64)a1 << 7;\n        v60 = v59 + 16LL * v8;\n        *(int *)((char *)&dword_4F88E0[(signed int)v7] + v60) = 0;\n        v61 = v8 | 1LL;\n        if ( v61 < v9 )\n          *(int *)((char *)&dword_4F88E0[4 * v61 + (signed int)v7] + v59) = 0;\n        v62 = (signed int)v7 | 1LL;\n        if ( v62 < v10 )\n        {\n          *(int *)((char *)&dword_4F88E0[v62] + v60) = 0;\n          if ( v61 < v9 )\n            *(int *)((char *)&dword_4F88E0[4 * v61 + v62] + v59) = 0;\n        }\n      }\n      if ( (unsigned int)(a6 - 1) <= 1 )\n      {\n        v63 = a1;\n        v64 = v8;\n        v65 = v9;\n        v7 = (signed int)v7;\n        v66 = *(_QWORD *)(v85 + 8LL * v8);\n        v67 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8LL * (signed int)v7) + 8LL) + 8LL * v86) + 8LL * a3);\n        v68 = v63 << 7;\n        v69 = v68 + 16LL * v8;\n        *(_WORD *)((char *)&dword_4F8920[v7] + v69) = *v67;\n        *(_WORD *)(v69 + 4 * v7 + 5212450) = v67[1];\n        v70 = *(_QWORD *)(v84 + 8LL * v8);\n        v71 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 8LL * (signed int)v7) + 8LL) + 8LL * v86)\n                          + 8LL * a3);\n        *(__int16 *)((char *)&word_4F8A20[2 * v7] + v69) = *v71;\n        *(__int16 *)((char *)&word_4F8A22[2 * v7] + v69) = v71[1];\n        v72 = v64 | 1;\n        if ( v72 < v65 )\n        {\n          v73 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 8 * v72) + 8 * v7) + 8LL) + 8LL * v86)\n                          + 8LL * a3);\n          v74 = v68 + 16 * v72;\n          *(_WORD *)((char *)&dword_4F8920[v7] + v74) = *v73;\n          *(_WORD *)(v74 + 4 * v7 + 5212450) = v73[1];\n          v75 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 8 * v72) + 8 * v7) + 8LL) + 8LL * v86)\n                            + 8LL * a3);\n          *(__int16 *)((char *)&word_4F8A20[2 * v7] + v74) = *v75;\n          *(__int16 *)((char *)&word_4F8A22[2 * v7] + v74) = v75[1];\n        }\n        result = v7 | 1;\n        if ( result < v10 )\n        {\n          v76 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8 * result) + 8LL) + 8LL * v86) + 8LL * a3);\n          *(_WORD *)((char *)&dword_4F8920[result] + v69) = *v76;\n          *(_WORD *)(v69 + 4 * result + 5212450) = v76[1];\n          v77 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 8 * result) + 8LL) + 8LL * v86) + 8LL * a3);\n          *(__int16 *)((char *)&word_4F8A20[2 * result] + v69) = *v77;\n          *(__int16 *)((char *)&word_4F8A22[2 * result] + v69) = v77[1];\n          if ( v72 < v65 )\n          {\n            v78 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 8 * v72) + 8 * result) + 8LL)\n                                        + 8LL * v86)\n                            + 8LL * a3);\n            v79 = 16 * v72 + v68;\n            *(_WORD *)((char *)&dword_4F8920[result] + v79) = *v78;\n            *(_WORD *)(v79 + 4 * result + 5212450) = v78[1];\n            v80 = *(__int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 8 * v72) + 8 * result) + 8LL)\n                                          + 8LL * v86)\n                              + 8LL * a3);\n            *(__int16 *)((char *)&word_4F8A20[2 * result] + v79) = *v80;\n            *(__int16 *)((char *)&word_4F8A22[2 * result] + v79) = v80[1];\n          }\n        }\n        return result;\n      }\n      v7 = (signed int)v7;\n      v81 = (signed __int64)a1 << 7;\n      v82 = v81 + 16LL * v8;\n      *(int *)((char *)&dword_4F8920[(signed int)v7] + v82) = 0;\n      v83 = v8 | 1LL;\n      if ( v83 < v9 )\n        *(int *)((char *)&dword_4F8920[4 * v83 + v7] + v81) = 0;\n      result = v7 | 1;\n      if ( result < v10 )\n      {\n        *(int *)((char *)&dword_4F8920[result] + v82) = 0;\n        if ( v83 < v9 )\n        {\n          v40 = 16 * v83 + v81;\n          goto LABEL_35;\n        }\n      }\n    }\n    else\n    {\n      v41 = a4;\n      v42 = v9;\n      v7 = (signed int)v7;\n      v43 = *(_QWORD *)(v11 + 8LL * v8);\n      v44 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v43 + 8LL * (signed int)v7) + 8LL * a4) + 32LL);\n      v45 = (signed __int64)a1 << 7;\n      v46 = v45 + 16LL * v8;\n      *(_WORD *)((char *)&dword_4F88E0[v7] + v46) = *v44;\n      *(_WORD *)(v46 + 4 * v7 + 5212386) = v44[1];\n      v47 = *(_QWORD *)(v84 + 8LL * v8);\n      v48 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(v47 + 8LL * (signed int)v7) + 8LL * a4) + 32LL);\n      *(__int16 *)((char *)&word_4F89E0[2 * v7] + v46) = *v48;\n      *(__int16 *)((char *)&word_4F89E2[2 * v7] + v46) = v48[1];\n      v49 = v8 | 1LL;\n      v50 = v11;\n      if ( v49 < v42 )\n      {\n        v51 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v11 + 8 * v49) + 8 * v7) + 8 * v41) + 32LL);\n        v52 = v45 + 16 * v49;\n        *(_WORD *)((char *)&dword_4F88E0[v7] + v52) = *v51;\n        *(_WORD *)(v52 + 4 * v7 + 5212386) = v51[1];\n        v53 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v84 + 8 * v49) + 8 * v7) + 8 * v41) + 32LL);\n        *(__int16 *)((char *)&word_4F89E0[2 * v7] + v52) = *v53;\n        *(__int16 *)((char *)&word_4F89E2[2 * v7] + v52) = v53[1];\n      }\n      result = v7 | 1;\n      if ( result < v10 )\n      {\n        v54 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(v43 + 8 * result) + 8 * v41) + 32LL);\n        *(_WORD *)((char *)&dword_4F88E0[result] + v46) = *v54;\n        *(_WORD *)(v46 + 4 * result + 5212386) = v54[1];\n        v55 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(v47 + 8 * result) + 8 * v41) + 32LL);\n        *(__int16 *)((char *)&word_4F89E0[2 * result] + v46) = *v55;\n        *(__int16 *)((char *)&word_4F89E2[2 * result] + v46) = v55[1];\n        if ( v49 < v42 )\n        {\n          v56 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v50 + 8 * v49) + 8 * result) + 8 * v41) + 32LL);\n          v57 = 16 * v49 + v45;\n          *(_WORD *)((char *)&dword_4F88E0[result] + v57) = *v56;\n          *(_WORD *)(v57 + 4 * result + 5212386) = v56[1];\n          v58 = *(__int16 **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v84 + 8 * v49) + 8 * result) + 8 * v41) + 32LL);\n          *(__int16 *)((char *)&word_4F89E0[2 * result] + v57) = *v58;\n          *(__int16 *)((char *)&word_4F89E2[2 * result] + v57) = v58[1];\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4693d0L", 
            "funcEndAddr": "0x469b6bL", 
            "funcName": "sub_4693D0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 sub_469B70()\n{\n  _BOOL8 result; // rax\n  int v1; // ebx\n  int v2; // ecx\n  int v3; // edx\n  signed __int64 v4; // rsi\n  __int64 v5; // rdx\n  signed __int64 v6; // r14\n  signed __int64 v7; // rdx\n  _DWORD *v8; // rax\n  signed __int64 v9; // r15\n  signed __int64 v10; // rdx\n  int v11; // eax\n  __int64 v12; // r9\n  __int64 v13; // r10\n  __int64 v14; // r11\n  __int64 v15; // r13\n  __int64 v16; // r12\n  int v17; // ebx\n  __int64 v18; // rbp\n  __int64 v19; // rdx\n  __int64 v20; // rcx\n  signed __int64 v21; // rax\n  int v22; // er15\n  int v23; // esi\n  signed __int64 v24; // rdi\n  signed __int64 v25; // rsi\n  int v26; // eax\n  int v27; // [rsp+8h] [rbp-290h]\n  int v28; // [rsp+Ch] [rbp-28Ch]\n  int v29; // [rsp+10h] [rbp-288h]\n  int v30; // [rsp+18h] [rbp-280h]\n  unsigned __int64 v31; // [rsp+20h] [rbp-278h]\n  signed __int64 v32; // [rsp+28h] [rbp-270h]\n  signed __int64 v33; // [rsp+30h] [rbp-268h]\n  signed __int64 v34; // [rsp+38h] [rbp-260h]\n  unsigned __int64 v35; // [rsp+40h] [rbp-258h]\n  unsigned __int64 v36; // [rsp+48h] [rbp-250h]\n  __int64 v37; // [rsp+50h] [rbp-248h]\n  unsigned __int64 v38; // [rsp+58h] [rbp-240h]\n  int v39[64]; // [rsp+60h] [rbp-238h]\n  int v40[78]; // [rsp+160h] [rbp-138h]\n\n  result = 1LL;\n  if ( *((_DWORD *)dest + 805) != 2 )\n  {\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    do\n    {\n      v27 = v2;\n      v4 = 4 * v3 & 0xFFFFFFF8;\n      v30 = v3;\n      v5 = v3 & 1;\n      v6 = 32 * v4 + 16 * v5 + 6;\n      v36 = (unsigned int)(8 * v5 + 4);\n      v32 = 8 * v5;\n      v31 = (unsigned int)v4 | 4;\n      v7 = 0LL;\n      do\n      {\n        v29 = v1;\n        v8 = off_49F6D0;\n        v35 = v4;\n        v28 = v4 + *((_DWORD *)off_49F6D0 + 43);\n        v33 = v7;\n        v9 = v7;\n        v34 = v6;\n        v10 = v32;\n        while ( 1 )\n        {\n          v11 = v8[42];\n          v37 = (signed int)v9;\n          v12 = qword_4F9EB0;\n          v13 = v11 + (signed int)v10;\n          v14 = (signed int)(v11 + (v10 | 1));\n          v15 = (signed int)(v11 + (v10 | 2));\n          v38 = v10;\n          v16 = (signed int)(v11 + (v10 | 3));\n          v17 = v28;\n          v18 = 0LL;\n          do\n          {\n            v19 = *(_QWORD *)(v12 + 8LL * v17);\n            v20 = (signed int)v9 + (signed int)v18;\n            v21 = v9;\n            v22 = *(unsigned __int16 *)(v19 + 2 * v13);\n            v40[v20] = v22 - *(unsigned __int16 *)((char *)&word_4F654A[4 * v18] + v6);\n            v39[v20] = v22 - *(unsigned __int16 *)((char *)&word_4F674A[4 * v18] + v6);\n            v9 = v21;\n            v20 *= 4LL;\n            v23 = *(unsigned __int16 *)(v19 + 2 * v14);\n            v24 = v20 | 4;\n            *(int *)((char *)v40 + v24) = v23 - *(unsigned __int16 *)((char *)&word_4F654C[4 * v18] + v6);\n            *(int *)((char *)v39 + v24) = v23 - *(unsigned __int16 *)((char *)&word_4F674C[4 * v18] + v6);\n            LODWORD(v21) = *(unsigned __int16 *)(v19 + 2 * v15);\n            v25 = v20 | 8;\n            *(int *)((char *)v40 + v25) = v21 - *(unsigned __int16 *)((char *)&word_4F654E[4 * v18] + v6);\n            *(int *)((char *)v39 + v25) = v21 - *(unsigned __int16 *)((char *)&word_4F674E[4 * v18] + v6);\n            LODWORD(v21) = *(unsigned __int16 *)(v19 + 2 * v16);\n            v20 |= 0xCuLL;\n            *(int *)((char *)v40 + v20) = v21 - *(unsigned __int16 *)((char *)&word_4F6550[4 * v18] + v6);\n            *(int *)((char *)v39 + v20) = v21 - *(unsigned __int16 *)((char *)&word_4F6750[4 * v18] + v6);\n            v18 += 4LL;\n            ++v17;\n          }\n          while ( v18 != 16 );\n          v26 = sub_445CD0(&v40[v37], *((_DWORD *)dest + 6));\n          v1 = v26 + v29;\n          if ( v38 >= v36 )\n            break;\n          v29 += v26;\n          v10 = v38 + 4;\n          v9 += 16LL;\n          v8 = off_49F6D0;\n          v6 += 8LL;\n        }\n        v6 = v34 + 128;\n        v7 = v33 + 32;\n        v4 = v35 + 4;\n      }\n      while ( v35 < v31 );\n      v2 = (unsigned __int64)sub_445FC0((const __m128i *)v39, *((_DWORD *)dest + 6)) + v27;\n      v3 = v30 + 1;\n    }\n    while ( v30 != 3 );\n    result = v2 < v1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x469b70L", 
            "funcEndAddr": "0x469e13L", 
            "funcName": "sub_469B70"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__usercall sub_469E20@<rax>(__m128i a1@<xmm12>)\n{\n  int v1; // eax\n  int v2; // ecx\n  bool v3; // r8\n  int v4; // er14\n  bool v5; // r12\n  bool v6; // r15\n  signed int v7; // edi\n  int v8; // esi\n  int v9; // eax\n  int v10; // esi\n  __int64 v11; // rsi\n  __int64 v12; // rdi\n  signed __int64 v13; // rbp\n  signed __int64 v14; // rax\n  _QWORD *****v15; // rax\n  bool v16; // zf\n  char v17; // r15\n  _BOOL4 v18; // ebp\n  int v19; // eax\n  double *v20; // r13\n  int v21; // ebx\n  _BOOL4 v22; // edx\n  _BOOL4 v23; // ecx\n  int v24; // esi\n  int v25; // edi\n  __m128i v26; // xmm1\n  __int64 v27; // r9\n  signed int *v28; // rbx\n  unsigned __int64 v29; // rcx\n  int v30; // er14\n  __int64 v31; // rax\n  unsigned __int64 v32; // r8\n  char v33; // r12\n  __int64 v34; // rdx\n  int v35; // esi\n  int v36; // edi\n  signed __int64 v37; // rcx\n  _DWORD *v38; // rbp\n  __int64 v39; // rcx\n  signed int v40; // edx\n  int v41; // esi\n  signed __int64 v42; // rdi\n  _DWORD *v43; // rbp\n  __int64 v44; // rax\n  __int64 v45; // rdx\n  int v46; // esi\n  signed __int64 v47; // rdi\n  _DWORD *v48; // rbp\n  __int64 v49; // rcx\n  signed int v50; // edx\n  signed __int64 v51; // rsi\n  _DWORD *v52; // rdi\n  __int64 v53; // rdx\n  signed __int64 v54; // rsi\n  __int64 v55; // rcx\n  signed __int64 v56; // rdx\n  __int64 v57; // rax\n  double v58; // xmm2_8\n  __int64 v59; // r15\n  double v60; // xmm3_8\n  signed __int64 v61; // rdx\n  __m128i v62; // xmm2\n  __int64 v63; // rax\n  unsigned int v64; // edx\n  int v65; // ecx\n  signed int v66; // er12\n  int v67; // eax\n  __m128 v68; // xmm1\n  __m128 v69; // xmm0\n  signed int v70; // eax\n  int v71; // ebp\n  signed int v72; // ebx\n  signed int *v73; // rbp\n  int *v74; // rcx\n  signed int v75; // edx\n  unsigned __int64 v76; // r13\n  unsigned __int64 v77; // rsi\n  int v78; // ebx\n  double v79; // rsi\n  __int16 v80; // ax\n  signed int v81; // er12\n  _DWORD *v82; // r14\n  _QWORD **v83; // rbx\n  int v84; // er15\n  int v85; // er9\n  double v86; // r10\n  int v87; // er15\n  int v88; // er15\n  signed int v89; // ebp\n  __int64 v90; // rcx\n  int v91; // er13\n  int v92; // eax\n  int v93; // eax\n  signed int v94; // eax\n  int v95; // eax\n  bool v96; // sf\n  unsigned __int8 v97; // of\n  signed int v98; // eax\n  int v99; // ecx\n  int v100; // er13\n  int v101; // ebp\n  _QWORD *v102; // rdx\n  int v103; // er14\n  int v104; // er14\n  int v105; // er14\n  signed int v106; // edi\n  int v107; // ebx\n  signed int v108; // ebx\n  int v109; // ebx\n  bool v110; // sf\n  unsigned __int8 v111; // of\n  int v112; // ebx\n  int v113; // ecx\n  int v114; // ecx\n  int v115; // ebx\n  signed int v116; // eax\n  unsigned __int64 v117; // r12\n  int v118; // esi\n  int v119; // er12\n  int v120; // eax\n  int v121; // ebp\n  int v122; // ebp\n  int v123; // eax\n  int v124; // eax\n  int v125; // er12\n  int v126; // ebx\n  int v127; // ebx\n  int v128; // eax\n  int v129; // eax\n  double v130; // rbp\n  int v131; // eax\n  bool v132; // cl\n  int v133; // eax\n  __int64 v134; // rax\n  char *v135; // r14\n  char v136; // r9\n  int v137; // er11\n  int v138; // ebp\n  __int64 v139; // rsi\n  __int64 v140; // rcx\n  __int64 v141; // rdi\n  __int64 v142; // r13\n  __int64 v143; // rdi\n  __int64 v144; // r15\n  __int64 v145; // rbx\n  _WORD *v146; // r10\n  __int64 v147; // rbx\n  __int64 v148; // rbp\n  __int64 v149; // r12\n  __int64 v150; // rax\n  int v151; // er8\n  int v152; // er9\n  __int64 v153; // rbp\n  __int64 v154; // rcx\n  __int64 v155; // rdx\n  __int64 v156; // r15\n  _DWORD *v157; // rdi\n  __int64 v158; // rsi\n  __int64 v159; // rdi\n  __int64 v160; // r13\n  __int64 v161; // rax\n  unsigned __int64 v162; // rcx\n  unsigned __int64 v163; // rdx\n  __int64 v164; // rsi\n  __int64 v165; // rdi\n  __int64 v166; // r10\n  __int64 v167; // rbx\n  _WORD *v168; // rcx\n  __int64 v169; // rdx\n  __int64 v170; // rbp\n  __int64 v171; // rax\n  _QWORD *v172; // r8\n  int v173; // er11\n  __int64 v174; // r13\n  __int64 v175; // rbx\n  signed __int64 v176; // rdi\n  int v177; // ecx\n  unsigned __int16 v178; // si\n  int v179; // edx\n  __int64 *v180; // rsi\n  __int64 v181; // rdx\n  _WORD *v182; // r12\n  _WORD *v183; // rsi\n  __int16 v184; // si\n  __int64 v185; // rdi\n  _QWORD *v186; // rdx\n  signed __int64 v187; // rbx\n  _QWORD *v188; // r15\n  signed __int64 v189; // r13\n  __int64 v190; // rcx\n  __int64 v191; // r8\n  __int64 v192; // r9\n  __int64 v193; // r14\n  unsigned __int64 v194; // r10\n  __int64 v195; // rax\n  _QWORD *v196; // rax\n  _QWORD *v197; // rcx\n  _WORD *v198; // r12\n  __int16 v199; // r11\n  _WORD *v200; // rdx\n  __int64 v201; // rdx\n  __int16 v202; // si\n  _WORD *v203; // rax\n  _WORD *v204; // rcx\n  _QWORD **v205; // rbx\n  char *v206; // r12\n  __int64 v207; // r15\n  int v208; // er13\n  signed __int64 v209; // rbp\n  int v210; // er8\n  unsigned __int16 v211; // cx\n  int v212; // esi\n  __int64 *v213; // rcx\n  __int64 v214; // rcx\n  __int64 v215; // rdi\n  __int64 v216; // rax\n  _WORD *v217; // rcx\n  _WORD *v218; // r10\n  __int64 v219; // rcx\n  __int64 v220; // rdx\n  __int64 v221; // rax\n  __int64 v222; // rdx\n  __int64 v223; // r13\n  int v224; // er12\n  __int64 v225; // r10\n  __int64 v226; // rax\n  signed __int64 v227; // rcx\n  __int64 v228; // rdi\n  __int64 v229; // r14\n  __int64 v230; // rbp\n  _QWORD *v231; // r9\n  _QWORD *v232; // r8\n  _WORD *v233; // r11\n  __int16 v234; // r15\n  _WORD *v235; // rbx\n  __int64 v236; // rbp\n  __int16 v237; // bx\n  _WORD *v238; // rsi\n  _WORD *v239; // rbx\n  __int64 v240; // rsi\n  int v241; // edi\n  int v242; // er13\n  __int64 v243; // rdx\n  __int64 v244; // rcx\n  __int64 v245; // rbx\n  __int64 v246; // rbx\n  __int64 v247; // r10\n  __int64 v248; // r15\n  __int64 v249; // r12\n  __int64 v250; // rbx\n  __int64 v251; // r14\n  __int64 v252; // rbp\n  __int64 v253; // rbx\n  __int64 v254; // rdi\n  __int64 v255; // rax\n  __int64 v256; // r8\n  __int64 v257; // rdi\n  __int64 v258; // rsi\n  unsigned __int64 v259; // r11\n  unsigned __int64 v260; // rdx\n  __int64 v261; // r15\n  _DWORD *v262; // rcx\n  __int64 v263; // r12\n  __int64 v264; // rcx\n  __int64 v265; // r8\n  unsigned __int64 v266; // rax\n  unsigned __int64 v267; // rsi\n  __int64 v268; // rdx\n  __int64 v269; // r10\n  __int64 v270; // r11\n  __int64 v271; // rbx\n  __int64 v272; // rcx\n  __int64 v273; // rdx\n  __int64 v274; // rax\n  __int16 v275; // ax\n  _DWORD *v276; // rax\n  signed int v277; // eax\n  signed int *v278; // rbx\n  __int64 v279; // rbx\n  signed __int64 v280; // r11\n  __int64 v281; // rax\n  __int64 v282; // rbx\n  signed __int64 v283; // r15\n  __int64 v284; // rcx\n  unsigned __int64 v285; // r14\n  __int64 v286; // rcx\n  __m128 v287; // xmm1\n  int v288; // eax\n  signed __int64 v289; // rsi\n  signed __int64 v290; // rdi\n  signed __int16 v291; // r13\n  int v292; // ebp\n  signed int v293; // esi\n  _QWORD **v294; // r13\n  int v295; // er12\n  int v296; // ebp\n  unsigned __int64 v297; // r11\n  int v298; // er12\n  int v299; // er12\n  signed int v300; // ebx\n  int v301; // eax\n  int v302; // eax\n  signed int v303; // eax\n  int v304; // eax\n  bool v305; // sf\n  unsigned __int8 v306; // of\n  unsigned int v307; // ecx\n  int v308; // edx\n  int v309; // esi\n  int v310; // esi\n  int v311; // edx\n  __int64 v312; // rcx\n  __int64 v313; // rbx\n  __int64 v314; // r9\n  __int64 v315; // rdi\n  __int64 v316; // rax\n  __int64 v317; // rbp\n  __int64 v318; // r8\n  __int64 v319; // rax\n  __int64 v320; // rsi\n  __int64 v321; // rbx\n  __int64 v322; // rsi\n  __int64 v323; // rdx\n  signed int v324; // ecx\n  int v325; // edx\n  _QWORD *v326; // rsi\n  int v327; // ebx\n  int v328; // er8\n  int v329; // ebx\n  int v330; // ebx\n  int v331; // edi\n  signed int v332; // edi\n  int v333; // ebp\n  signed int v334; // eax\n  int v335; // ebp\n  bool v336; // sf\n  unsigned __int8 v337; // of\n  int v338; // eax\n  int v339; // ebp\n  int v340; // edx\n  int v341; // edx\n  int v342; // ebp\n  __int16 v343; // dx\n  signed int v344; // eax\n  int v345; // eax\n  int v346; // er9\n  __int64 *v347; // rax\n  int v348; // edx\n  int v349; // ecx\n  __int64 v350; // rsi\n  __int64 v351; // rax\n  __int64 v352; // rdi\n  __int64 v353; // rbp\n  __int64 v354; // r8\n  __int64 v355; // rdi\n  __int64 v356; // rdx\n  __int64 v357; // rsi\n  __int64 v358; // rax\n  __int64 v359; // rcx\n  double v360; // xmm0_8\n  int v361; // eax\n  int v362; // ecx\n  _DWORD *v363; // rbx\n  _DWORD *v364; // rax\n  int v365; // ecx\n  unsigned int v366; // er12\n  unsigned __int64 v367; // rdx\n  _DWORD *v368; // r9\n  __int64 v369; // r8\n  __int64 v370; // r10\n  _OWORD **v371; // r11\n  _OWORD **v372; // r13\n  _OWORD *v373; // rbx\n  _OWORD *v374; // rcx\n  signed __int64 v375; // rdi\n  signed __int64 v376; // rsi\n  signed __int64 v377; // rdx\n  signed __int64 v378; // rbp\n  signed __int64 v379; // rax\n  _OWORD *v380; // rcx\n  _OWORD *v381; // rsi\n  signed __int64 v382; // rbx\n  signed __int64 v383; // rbp\n  signed __int64 v384; // rdx\n  signed __int64 v385; // rdi\n  signed __int64 v386; // rax\n  __int64 v387; // r11\n  __int64 v388; // r13\n  _OWORD *v389; // rbx\n  _OWORD *v390; // rcx\n  signed __int64 v391; // rdi\n  signed __int64 v392; // rsi\n  signed __int64 v393; // rdx\n  signed __int64 v394; // rbp\n  signed __int64 v395; // rax\n  _OWORD *v396; // rsi\n  _OWORD *v397; // rcx\n  signed __int64 v398; // rbx\n  signed __int64 v399; // rbp\n  signed __int64 v400; // rdx\n  signed __int64 v401; // rdi\n  signed __int64 v402; // rax\n  __int64 v403; // r11\n  __int64 v404; // r13\n  _OWORD *v405; // rbx\n  _OWORD *v406; // rcx\n  signed __int64 v407; // rdi\n  signed __int64 v408; // rsi\n  signed __int64 v409; // rdx\n  signed __int64 v410; // rbp\n  signed __int64 v411; // rax\n  _OWORD *v412; // rsi\n  _OWORD *v413; // rcx\n  signed __int64 v414; // rbx\n  __int64 v415; // r13\n  signed __int64 v416; // rbp\n  signed __int64 v417; // rdx\n  signed __int64 v418; // rdi\n  signed __int64 v419; // rax\n  __int64 v420; // r8\n  __int64 v421; // r10\n  _OWORD *v422; // rsi\n  _OWORD *v423; // rdi\n  signed __int64 v424; // rdx\n  signed __int64 v425; // rcx\n  signed __int64 v426; // rbx\n  signed __int64 v427; // rbp\n  signed __int64 v428; // rax\n  _OWORD *v429; // rcx\n  _OWORD *v430; // rdx\n  signed __int64 v431; // rbx\n  signed __int64 v432; // rbp\n  signed __int64 v433; // rdi\n  signed __int64 v434; // rsi\n  signed __int64 v435; // rax\n  __int64 v436; // r10\n  __int64 v437; // r11\n  __int64 v438; // r8\n  _DWORD *v439; // rdi\n  unsigned __int64 v440; // rbx\n  __int64 v441; // rsi\n  unsigned __int64 v442; // rax\n  int v443; // er9\n  int v444; // eax\n  int v445; // er8\n  signed __int64 v446; // rbx\n  int v447; // eax\n  _DWORD *v448; // r13\n  __int64 v449; // r8\n  __int64 v450; // r9\n  _OWORD **v451; // r10\n  _OWORD **v452; // r11\n  _OWORD *v453; // rbx\n  _OWORD *v454; // rcx\n  signed __int64 v455; // r12\n  signed __int64 v456; // rdi\n  signed __int64 v457; // rsi\n  signed __int64 v458; // rdx\n  signed __int64 v459; // rbp\n  _OWORD *v460; // rcx\n  _OWORD *v461; // rsi\n  signed __int64 v462; // r10\n  signed __int64 v463; // rbx\n  signed __int64 v464; // rbp\n  signed __int64 v465; // rdx\n  signed __int64 v466; // rdi\n  __int64 v467; // r10\n  __int64 v468; // r11\n  _OWORD *v469; // rcx\n  _OWORD *v470; // rbx\n  signed __int64 v471; // r12\n  signed __int64 v472; // rdi\n  signed __int64 v473; // rsi\n  signed __int64 v474; // rdx\n  signed __int64 v475; // rbp\n  _OWORD *v476; // rcx\n  _OWORD *v477; // rsi\n  signed __int64 v478; // r10\n  signed __int64 v479; // rbx\n  signed __int64 v480; // rbp\n  signed __int64 v481; // rdx\n  signed __int64 v482; // rdi\n  __int64 v483; // r10\n  __int64 v484; // r11\n  _OWORD *v485; // rcx\n  _OWORD *v486; // rbx\n  signed __int64 v487; // r12\n  signed __int64 v488; // rdi\n  signed __int64 v489; // rsi\n  signed __int64 v490; // rdx\n  signed __int64 v491; // rbp\n  _OWORD *v492; // rcx\n  _OWORD *v493; // rsi\n  unsigned __int64 v494; // r12\n  signed __int64 v495; // r10\n  signed __int64 v496; // rbx\n  signed __int64 v497; // rbp\n  signed __int64 v498; // rdx\n  signed __int64 v499; // rdi\n  __int64 v500; // r8\n  __int64 v501; // r9\n  _OWORD *v502; // rsi\n  _OWORD *v503; // rdi\n  signed __int64 v504; // r10\n  signed __int64 v505; // rdx\n  signed __int64 v506; // rcx\n  signed __int64 v507; // rbx\n  signed __int64 v508; // rbp\n  _OWORD *v509; // r10\n  _OWORD *v510; // rdx\n  _DWORD *v511; // rcx\n  signed __int64 v512; // r8\n  signed __int64 v513; // rbx\n  signed __int64 v514; // rbp\n  signed __int64 v515; // rdi\n  signed __int64 v516; // rsi\n  __int64 v517; // r10\n  unsigned __int64 v518; // r8\n  __int64 v519; // rsi\n  __int64 v520; // r9\n  __int64 v521; // rdi\n  unsigned __int64 v522; // rbx\n  int v523; // ebx\n  unsigned __int64 v524; // r11\n  signed int v525; // er15\n  unsigned __int64 v526; // r11\n  __int64 v527; // rsi\n  unsigned __int64 v528; // r15\n  __int64 v529; // rax\n  int v530; // edx\n  __int64 v531; // rbx\n  __int64 v532; // rax\n  __int64 v533; // rbx\n  unsigned __int64 v534; // rdi\n  signed int v535; // er9\n  _DWORD *v536; // r14\n  _QWORD **v537; // r13\n  int v538; // er12\n  int v539; // ebx\n  __int64 v540; // rdi\n  unsigned __int64 v541; // r8\n  int v542; // er12\n  int v543; // er12\n  signed int v544; // ebp\n  int v545; // eax\n  int v546; // eax\n  signed int v547; // eax\n  int v548; // eax\n  bool v549; // sf\n  unsigned __int8 v550; // of\n  unsigned int v551; // ecx\n  signed __int64 v552; // rsi\n  signed __int64 v553; // rdi\n  __int16 v554; // r14\n  int v555; // er13\n  int v556; // esi\n  int v557; // edx\n  __int64 v558; // rcx\n  __int64 v559; // rdi\n  __int64 v560; // r9\n  __int64 v561; // r11\n  __int64 v562; // rax\n  __int64 v563; // rbp\n  __int64 v564; // r8\n  __int64 v565; // rax\n  __int64 v566; // rsi\n  __int64 v567; // rbx\n  __int64 v568; // rsi\n  __int64 v569; // rdx\n  signed int v570; // er10\n  int v571; // er11\n  int v572; // er14\n  signed int v573; // edi\n  _QWORD *v574; // rcx\n  int v575; // ebp\n  int v576; // ebp\n  int v577; // ebp\n  signed int v578; // edx\n  int v579; // ebx\n  signed int v580; // eax\n  int v581; // ebx\n  bool v582; // sf\n  unsigned __int8 v583; // of\n  int v584; // ebx\n  int v585; // edx\n  int v586; // edx\n  int v587; // ebx\n  __int16 v588; // dx\n  signed int v589; // eax\n  int v590; // eax\n  int v591; // er9\n  __int64 *v592; // rax\n  int v593; // edx\n  int v594; // ecx\n  __int64 v595; // rsi\n  __int64 v596; // rax\n  __int64 v597; // rdi\n  __int64 v598; // rbx\n  __int64 v599; // r8\n  __int64 v600; // rdi\n  __int64 v601; // rdx\n  __int64 v602; // rsi\n  __int64 v603; // rax\n  __int64 v604; // rcx\n  double v605; // xmm0_8\n  __int16 v606; // bx\n  __int16 v607; // di\n  int v608; // eax\n  int v609; // ecx\n  _DWORD *v610; // rbx\n  int v611; // eax\n  int v612; // eax\n  int v613; // esi\n  __int64 v614; // rdx\n  signed int *v615; // r8\n  __int64 v616; // r9\n  __int64 v617; // r10\n  _OWORD **v618; // r11\n  _OWORD **v619; // r14\n  _OWORD *v620; // rbp\n  _OWORD *v621; // rbx\n  signed __int64 v622; // rdi\n  signed __int64 v623; // rsi\n  signed __int64 v624; // rdx\n  signed __int64 v625; // rcx\n  signed __int64 v626; // rax\n  _OWORD *v627; // rsi\n  _OWORD *v628; // rdi\n  signed __int64 v629; // rbx\n  signed __int64 v630; // rbp\n  signed __int64 v631; // rdx\n  signed __int64 v632; // rcx\n  signed __int64 v633; // rax\n  __int64 v634; // r11\n  __int64 v635; // r14\n  _OWORD *v636; // rbp\n  _OWORD *v637; // rbx\n  signed __int64 v638; // rdi\n  signed __int64 v639; // rsi\n  signed __int64 v640; // rdx\n  signed __int64 v641; // rcx\n  signed __int64 v642; // rax\n  _OWORD *v643; // rsi\n  _OWORD *v644; // rdi\n  signed __int64 v645; // rbx\n  signed __int64 v646; // rbp\n  signed __int64 v647; // rdx\n  signed __int64 v648; // rcx\n  signed __int64 v649; // rax\n  __int64 v650; // r11\n  __int64 v651; // r14\n  _OWORD *v652; // rbp\n  _OWORD *v653; // rbx\n  signed __int64 v654; // rdi\n  signed __int64 v655; // rsi\n  signed __int64 v656; // rdx\n  signed __int64 v657; // rcx\n  signed __int64 v658; // rax\n  _OWORD *v659; // rsi\n  _OWORD *v660; // rdi\n  signed __int64 v661; // rbx\n  signed __int64 v662; // rbp\n  signed __int64 v663; // rdx\n  signed __int64 v664; // rcx\n  signed __int64 v665; // rax\n  __int64 v666; // r9\n  __int64 v667; // r10\n  _OWORD *v668; // rsi\n  _OWORD *v669; // rdi\n  signed __int64 v670; // rdx\n  signed __int64 v671; // rcx\n  signed __int64 v672; // rbx\n  signed __int64 v673; // rbp\n  signed __int64 v674; // rax\n  _OWORD *v675; // rcx\n  _OWORD *v676; // rdx\n  signed __int64 v677; // rbx\n  signed __int64 v678; // rbp\n  signed __int64 v679; // rdi\n  signed __int64 v680; // rsi\n  signed __int64 v681; // rax\n  __int64 v682; // rsi\n  __int64 v683; // rcx\n  __int64 v684; // r10\n  __int64 v685; // r11\n  __int64 v686; // r13\n  __int64 v687; // r12\n  __int64 v688; // r9\n  __int64 v689; // rdx\n  __int64 v690; // rsi\n  signed __int64 v691; // rcx\n  __int64 v692; // rdi\n  __int64 v693; // rbp\n  unsigned __int64 v694; // r14\n  __int64 v695; // rbx\n  __int64 v696; // rax\n  __int64 v697; // rdx\n  __int64 v698; // rsi\n  __int64 v699; // rdi\n  _DWORD *v700; // rbp\n  int *v701; // r12\n  _DWORD *v702; // r8\n  unsigned __int64 v703; // r11\n  __int64 v704; // rcx\n  int *v705; // r14\n  _DWORD *v706; // rbx\n  unsigned __int64 v707; // r9\n  unsigned __int64 v708; // r13\n  int v709; // er9\n  int v710; // eax\n  int v711; // er8\n  unsigned __int64 v712; // rbx\n  int v713; // eax\n  int v714; // er14\n  __int64 v715; // r8\n  __int64 v716; // r9\n  _OWORD **v717; // r10\n  _OWORD **v718; // r11\n  _OWORD *v719; // rbp\n  _OWORD *v720; // rbx\n  signed __int64 v721; // rdi\n  signed __int64 v722; // rsi\n  signed __int64 v723; // rdx\n  signed __int64 v724; // rcx\n  signed __int64 v725; // rax\n  _OWORD *v726; // rsi\n  _OWORD *v727; // rdi\n  signed __int64 v728; // rbx\n  signed __int64 v729; // rbp\n  signed __int64 v730; // rdx\n  signed __int64 v731; // rcx\n  signed __int64 v732; // rax\n  __int64 v733; // r10\n  __int64 v734; // r11\n  _OWORD *v735; // rbp\n  _OWORD *v736; // rbx\n  signed __int64 v737; // rdi\n  signed __int64 v738; // rsi\n  signed __int64 v739; // rdx\n  signed __int64 v740; // rcx\n  signed __int64 v741; // rax\n  _OWORD *v742; // rsi\n  _OWORD *v743; // rdi\n  signed __int64 v744; // rbx\n  signed __int64 v745; // rbp\n  signed __int64 v746; // rdx\n  signed __int64 v747; // rcx\n  signed __int64 v748; // rax\n  __int64 v749; // r10\n  __int64 v750; // r11\n  _OWORD *v751; // rbp\n  _OWORD *v752; // rbx\n  signed __int64 v753; // rdi\n  signed __int64 v754; // rsi\n  signed __int64 v755; // rdx\n  signed __int64 v756; // rcx\n  signed __int64 v757; // rax\n  _OWORD *v758; // rsi\n  _OWORD *v759; // rdi\n  signed __int64 v760; // rbx\n  signed __int64 v761; // rbp\n  signed __int64 v762; // rdx\n  signed __int64 v763; // rcx\n  signed __int64 v764; // rax\n  __int64 v765; // r8\n  __int64 v766; // r9\n  _OWORD *v767; // rsi\n  _OWORD *v768; // rdi\n  signed __int64 v769; // rdx\n  signed __int64 v770; // rcx\n  signed __int64 v771; // rbx\n  signed __int64 v772; // rbp\n  signed __int64 v773; // rax\n  _OWORD *v774; // rcx\n  _OWORD *v775; // rdx\n  signed __int64 v776; // rbx\n  signed __int64 v777; // rbp\n  signed __int64 v778; // rdi\n  signed __int64 v779; // rsi\n  signed __int64 v780; // rax\n  __int64 v781; // rax\n  __int64 v782; // rdx\n  unsigned __int64 v783; // rsi\n  __int64 v784; // r11\n  __int64 v785; // r14\n  __int64 v786; // r13\n  __int64 v787; // r10\n  __int64 v788; // r12\n  __int64 v789; // rax\n  signed __int64 v790; // rdx\n  __int64 v791; // rdi\n  unsigned __int64 v792; // r8\n  __int64 v793; // rbp\n  __int64 v794; // rcx\n  unsigned __int64 v795; // r8\n  unsigned __int64 v796; // r11\n  __int64 v797; // rax\n  _DWORD *v798; // r12\n  int *v799; // rcx\n  _DWORD *v800; // rdi\n  __int64 v801; // rbx\n  __int64 v802; // rbp\n  __int64 v803; // rsi\n  __int64 v804; // rdx\n  __int64 v805; // r9\n  __int64 v806; // r10\n  __int64 v807; // rbp\n  _DWORD *v808; // rbx\n  int *v809; // r14\n  _DWORD *v810; // r13\n  unsigned __int64 v811; // rsi\n  int v812; // esi\n  signed int *v813; // r8\n  int v814; // ecx\n  int v815; // er9\n  int v816; // eax\n  __int64 v817; // rcx\n  int v818; // edx\n  __int64 v819; // rdi\n  __int64 v820; // rax\n  __int64 v821; // r14\n  __int64 v822; // rax\n  __int64 v823; // rcx\n  unsigned __int64 v824; // rdx\n  __int64 v825; // r8\n  __int64 v826; // r10\n  __int64 v827; // r11\n  __int64 v828; // r12\n  __int64 v829; // rbx\n  __int64 v830; // r14\n  signed __int64 v831; // rax\n  _WORD *v832; // r13\n  __int64 v833; // rdi\n  __int64 v834; // rbx\n  __int64 v835; // r8\n  signed int *v836; // rcx\n  char *v837; // r9\n  char *v838; // r10\n  __int64 v839; // rdi\n  signed __int64 v840; // rbp\n  __int64 v841; // rbx\n  int v842; // eax\n  _DWORD *v843; // rax\n  int v844; // er13\n  int *v845; // rbx\n  int v846; // ecx\n  _DWORD *v847; // rax\n  signed __int16 *v848; // rcx\n  int v849; // edx\n  _BOOL4 v850; // esi\n  int v851; // er12\n  signed int v852; // er15\n  int v853; // ebx\n  signed int v854; // er13\n  int v855; // esi\n  int *v856; // rcx\n  int *v857; // rcx\n  unsigned int v858; // eax\n  signed int v859; // edx\n  bool v860; // r12\n  __int64 v861; // r8\n  signed int *v862; // rcx\n  char *v863; // r9\n  __int16 *v864; // r10\n  __int64 v865; // rdi\n  signed __int64 v866; // rbp\n  int v867; // ebx\n  __int64 v868; // rdx\n  __int64 v869; // r9\n  signed __int64 v870; // rdi\n  int v871; // ebp\n  int v872; // eax\n  int v873; // eax\n  __int64 v874; // r8\n  signed int *v875; // rcx\n  __int64 v876; // rdx\n  __int64 v877; // r9\n  signed __int64 v878; // rdi\n  int v879; // ebp\n  __int16 v880; // dx\n  signed int v881; // edx\n  signed int v882; // er15\n  int v883; // eax\n  int v884; // er12\n  int v885; // ecx\n  unsigned int v886; // er12\n  int v887; // er15\n  __int64 v888; // r14\n  signed __int64 v889; // rbx\n  int *v890; // rcx\n  int *v891; // rcx\n  unsigned int v892; // eax\n  signed int v893; // edx\n  bool v894; // r15\n  __int64 v895; // r8\n  signed int *v896; // rcx\n  char *v897; // r9\n  __int16 *v898; // r10\n  __int64 v899; // rdi\n  signed __int64 v900; // rbx\n  int v901; // ebp\n  __int64 v902; // rdx\n  __int64 v903; // r9\n  signed __int64 v904; // rdi\n  int v905; // ebp\n  int v906; // eax\n  int v907; // eax\n  __int64 v908; // r8\n  signed int *v909; // rcx\n  __int64 v910; // rdx\n  __int64 v911; // r9\n  signed __int64 v912; // rdi\n  int v913; // ebp\n  __int16 v914; // si\n  signed int v915; // er15\n  int v916; // eax\n  int v917; // er12\n  signed int *v918; // rbx\n  signed int v919; // eax\n  __int64 v920; // r8\n  __int64 v921; // r9\n  signed int *v922; // r14\n  __int64 v923; // rcx\n  __int64 v924; // rdx\n  signed int v925; // esi\n  signed int v926; // eax\n  __int64 v927; // rdx\n  __int64 v928; // rcx\n  __int64 v929; // r8\n  __int64 v930; // r9\n  __int64 *v931; // rax\n  double v932; // rbx\n  __int64 v933; // rbp\n  __int64 v934; // r11\n  signed __int64 v935; // rcx\n  __int128 *v936; // r9\n  __int128 *v937; // r13\n  __int128 *v938; // rdi\n  __int128 *v939; // r10\n  unsigned __int64 v940; // rax\n  unsigned __int64 v941; // r15\n  unsigned __int64 v942; // r12\n  bool v943; // r8\n  bool v944; // cf\n  unsigned __int64 v945; // r9\n  unsigned __int64 v946; // rax\n  unsigned __int64 v947; // rdx\n  __int64 v948; // rcx\n  __int64 v949; // rsi\n  __int64 v950; // rdi\n  int *v951; // rcx\n  int v952; // ecx\n  _BOOL4 v953; // eax\n  __int64 v954; // r8\n  signed int *v955; // rcx\n  char *v956; // r9\n  char *v957; // r10\n  __int64 v958; // rdi\n  signed __int64 v959; // rbp\n  __int64 v960; // rbx\n  signed int *v961; // rbx\n  signed int v962; // ebp\n  __int64 v963; // r8\n  __int64 v964; // r9\n  void *v965; // rax\n  _DWORD *v966; // rax\n  __int64 v967; // rcx\n  __int64 v968; // rdx\n  signed int v969; // esi\n  signed int v970; // eax\n  __int64 v971; // rdx\n  __int64 v972; // rcx\n  __int64 v973; // r8\n  __int64 v974; // r9\n  int v975; // eax\n  __int64 v976; // r8\n  signed __int64 v977; // r9\n  char *v978; // r10\n  __int64 v979; // rdi\n  signed __int64 v980; // rbp\n  __int64 v981; // rbx\n  void *v982; // rcx\n  __int64 v983; // rcx\n  signed __int64 v984; // rdx\n  signed __int64 v985; // rsi\n  __int64 v986; // rdi\n  __int64 v987; // r8\n  signed __int64 v988; // r9\n  char *v989; // rsi\n  __int64 v990; // rdi\n  signed __int64 v991; // rbp\n  __int64 v992; // rbx\n  signed int *v993; // rbx\n  __int64 v994; // r8\n  __int64 v995; // rdi\n  signed int *v996; // r14\n  signed __int64 v997; // rax\n  char *v998; // rcx\n  char *v999; // r9\n  char *v1000; // r10\n  __int64 v1001; // r11\n  signed __int64 v1002; // rbx\n  int v1003; // eax\n  __int64 v1004; // rsi\n  __int64 v1005; // rdx\n  __int64 v1006; // r11\n  signed __int64 v1007; // r12\n  signed __int64 v1008; // r9\n  __int64 v1009; // r13\n  __int64 v1010; // r10\n  unsigned __int64 v1011; // rbx\n  signed __int64 v1012; // rbp\n  __int64 v1013; // rsi\n  int v1014; // eax\n  int v1015; // edi\n  int v1016; // edi\n  int v1017; // edi\n  signed int v1018; // eax\n  int v1019; // er8\n  __int64 v1020; // r9\n  signed __int64 v1021; // r11\n  char *v1022; // rax\n  signed __int64 v1023; // rcx\n  __int64 v1024; // rdx\n  signed __int64 v1025; // rsi\n  int v1026; // eax\n  int v1027; // er8\n  __int64 v1028; // r9\n  signed __int64 v1029; // r11\n  char *v1030; // rcx\n  signed __int64 v1031; // rdx\n  __int64 v1032; // rsi\n  signed __int64 v1033; // rdi\n  int v1034; // eax\n  signed int *v1035; // rbx\n  unsigned __int64 v1036; // rcx\n  unsigned int v1037; // eax\n  int *v1038; // rsi\n  int v1039; // ecx\n  int v1040; // edx\n  __int64 v1041; // rsi\n  __int64 *v1042; // rdi\n  signed __int64 v1043; // rdi\n  signed __int64 v1044; // r13\n  __int64 v1045; // r12\n  __int64 v1046; // rsi\n  __int64 v1047; // rbp\n  __int64 v1048; // rbx\n  __int64 v1049; // rsi\n  __int64 v1050; // r8\n  int v1051; // er11\n  int v1052; // er10\n  int v1053; // er15\n  int v1054; // er9\n  __int16 v1055; // ax\n  int v1056; // er9\n  int v1057; // er10\n  __int16 v1058; // ax\n  int v1059; // er10\n  __int16 v1060; // ax\n  signed int v1061; // ecx\n  __int64 v1062; // rdx\n  __int64 v1063; // rsi\n  int v1064; // eax\n  char *v1065; // r9\n  unsigned __int64 v1066; // r11\n  __int64 v1067; // r8\n  signed int *v1068; // rax\n  __int64 v1069; // rcx\n  __int64 v1070; // rdx\n  __int64 v1071; // rsi\n  __int64 v1072; // rbx\n  signed __int64 v1073; // rdi\n  signed __int64 v1074; // rdi\n  double v1075; // xmm0_8\n  double v1076; // xmm1_8\n  double v1077; // xmm0_8\n  double v1078; // xmm0_8\n  __m128d v1079; // xmm4\n  __m128d v1080; // xmm1\n  __m128d v1081; // xmm2\n  __m128d v1082; // xmm3\n  _DWORD *v1083; // rdx\n  __int64 v1084; // r8\n  __int64 v1085; // rcx\n  _DWORD *v1086; // rsi\n  int v1087; // edi\n  __int64 v1088; // rax\n  __int64 v1089; // rcx\n  signed __int64 v1090; // rsi\n  __int64 v1091; // rdi\n  __int64 *v1092; // rcx\n  __int64 v1093; // rbx\n  __int64 v1094; // r13\n  __int128 *v1095; // r14\n  char *v1096; // r15\n  char *v1097; // rbp\n  __int64 v1098; // rdx\n  unsigned __int64 v1099; // rcx\n  unsigned __int64 v1100; // rdi\n  unsigned __int64 v1101; // rdx\n  unsigned __int64 v1102; // r10\n  bool v1103; // r8\n  bool v1104; // cf\n  __int128 *v1105; // rdi\n  bool v1106; // r15\n  __int64 v1107; // rdx\n  unsigned __int64 v1108; // rcx\n  __int64 v1109; // rcx\n  __int64 v1110; // rsi\n  __int64 v1111; // rbp\n  signed int *v1112; // rax\n  __int64 v1113; // rcx\n  __int64 v1114; // rdx\n  __int64 v1115; // rsi\n  signed __int64 v1116; // rdi\n  signed __int64 v1117; // rdi\n  __int64 v1118; // r8\n  signed int *v1119; // rcx\n  char *v1120; // r10\n  __int64 v1121; // rdi\n  signed __int64 v1122; // rbp\n  __int64 v1123; // rbx\n  _DWORD *v1124; // rax\n  signed int v1125; // edx\n  unsigned int v1126; // eax\n  signed int v1127; // edx\n  _DWORD *v1128; // rax\n  int v1129; // ecx\n  __int64 v1130; // rdx\n  __int64 v1131; // rsi\n  _WORD *v1132; // rcx\n  _WORD *v1133; // rdx\n  int *v1134; // rcx\n  _DWORD *v1135; // rax\n  double v1136; // xmm0_8\n  double *v1137; // rcx\n  signed int v1138; // edx\n  __int64 v1139; // rsi\n  __int64 v1140; // rdi\n  int v1141; // edx\n  double v1142; // xmm0_8\n  double v1143; // xmm1_8\n  __m128d v1144; // xmm4\n  __m128d v1145; // xmm2\n  double v1146; // xmm2_8\n  __int64 v1147; // xmm1_8\n  __int64 v1148; // xmm3_8\n  double v1149; // xmm0_8\n  double v1150; // xmm3_8\n  __int64 v1151; // xmm2_8\n  double v1152; // xmm2_8\n  __int64 v1153; // xmm1_8\n  __int64 v1154; // xmm3_8\n  double v1155; // xmm1_8\n  int v1156; // edx\n  _QWORD *v1157; // rsi\n  signed int *v1158; // rcx\n  __int64 v1159; // rdi\n  int v1160; // ebp\n  int v1161; // eax\n  int v1162; // esi\n  int *v1163; // rsi\n  bool v1164; // al\n  int v1165; // edx\n  bool v1166; // al\n  int v1167; // ecx\n  bool v1168; // al\n  int v1169; // ecx\n  bool v1170; // al\n  int v1171; // ecx\n  _DWORD *result; // rax\n  __int64 v1173; // rbp\n  signed __int64 v1174; // rdi\n  signed int *v1175; // rdi\n  int v1176; // edi\n  int v1177; // [rsp+14h] [rbp-2B4h]\n  int v1178; // [rsp+14h] [rbp-2B4h]\n  int v1179; // [rsp+14h] [rbp-2B4h]\n  int v1180; // [rsp+14h] [rbp-2B4h]\n  int v1181; // [rsp+18h] [rbp-2B0h]\n  int v1182; // [rsp+1Ch] [rbp-2ACh]\n  unsigned __int64 v1183; // [rsp+20h] [rbp-2A8h]\n  int *v1184; // [rsp+28h] [rbp-2A0h]\n  int v1185; // [rsp+34h] [rbp-294h]\n  unsigned __int64 v1186; // [rsp+38h] [rbp-290h]\n  unsigned __int64 v1187; // [rsp+40h] [rbp-288h]\n  unsigned __int64 v1188; // [rsp+48h] [rbp-280h]\n  __int64 v1189; // [rsp+50h] [rbp-278h]\n  __int64 v1190; // [rsp+58h] [rbp-270h]\n  unsigned __int64 v1191; // [rsp+60h] [rbp-268h]\n  __int64 v1192; // [rsp+68h] [rbp-260h]\n  __int64 v1193; // [rsp+70h] [rbp-258h]\n  __int64 v1194; // [rsp+78h] [rbp-250h]\n  double v1195; // [rsp+80h] [rbp-248h]\n  double v1196; // [rsp+88h] [rbp-240h]\n  unsigned __int64 v1197; // [rsp+90h] [rbp-238h]\n  int v1198; // [rsp+98h] [rbp-230h]\n  int v1199; // [rsp+9Ch] [rbp-22Ch]\n  __int64 v1200; // [rsp+A0h] [rbp-228h]\n  __int64 v1201; // [rsp+A8h] [rbp-220h]\n  int v1202; // [rsp+B4h] [rbp-214h]\n  int v1203; // [rsp+B8h] [rbp-210h]\n  int v1204; // [rsp+BCh] [rbp-20Ch]\n  int v1205; // [rsp+C0h] [rbp-208h]\n  int v1206; // [rsp+C4h] [rbp-204h]\n  __int64 v1207; // [rsp+C8h] [rbp-200h]\n  __int64 v1208; // [rsp+D0h] [rbp-1F8h]\n  __int64 v1209; // [rsp+D8h] [rbp-1F0h]\n  __int64 v1210; // [rsp+E0h] [rbp-1E8h]\n  __int64 v1211; // [rsp+E8h] [rbp-1E0h]\n  int v1212; // [rsp+F4h] [rbp-1D4h]\n  __int64 v1213; // [rsp+F8h] [rbp-1D0h]\n  __int64 v1214; // [rsp+100h] [rbp-1C8h]\n  __int64 v1215; // [rsp+108h] [rbp-1C0h]\n  __int64 v1216; // [rsp+110h] [rbp-1B8h]\n  _DWORD *v1217; // [rsp+118h] [rbp-1B0h]\n  double v1218; // [rsp+120h] [rbp-1A8h]\n  int v1219; // [rsp+128h] [rbp-1A0h]\n  unsigned int v1220; // [rsp+12Ch] [rbp-19Ch]\n  int v1221; // [rsp+130h] [rbp-198h]\n  int v1222; // [rsp+134h] [rbp-194h]\n  int v1223; // [rsp+138h] [rbp-190h]\n  int v1224; // [rsp+13Ch] [rbp-18Ch]\n  __int64 v1225; // [rsp+140h] [rbp-188h]\n  unsigned __int64 v1226; // [rsp+148h] [rbp-180h]\n  __int64 v1227; // [rsp+150h] [rbp-178h]\n  __int64 v1228; // [rsp+158h] [rbp-170h]\n  __int64 v1229; // [rsp+160h] [rbp-168h]\n  unsigned __int64 v1230; // [rsp+168h] [rbp-160h]\n  int v1231; // [rsp+170h] [rbp-158h]\n  int v1232; // [rsp+174h] [rbp-154h]\n  __int64 v1233; // [rsp+178h] [rbp-150h]\n  double v1234; // [rsp+180h] [rbp-148h]\n  int v1235; // [rsp+188h] [rbp-140h]\n  unsigned int v1236; // [rsp+18Ch] [rbp-13Ch]\n  int v1237; // [rsp+190h] [rbp-138h]\n  int v1238; // [rsp+194h] [rbp-134h]\n  int v1239; // [rsp+198h] [rbp-130h]\n  int v1240; // [rsp+19Ch] [rbp-12Ch]\n  int v1241; // [rsp+1A0h] [rbp-128h]\n  int v1242; // [rsp+1A4h] [rbp-124h]\n  __int64 v1243; // [rsp+1A8h] [rbp-120h]\n  __int64 v1244; // [rsp+1B0h] [rbp-118h]\n  unsigned __int64 v1245; // [rsp+1B8h] [rbp-110h]\n  _BOOL4 v1246; // [rsp+1C0h] [rbp-108h]\n  __int128 v1247; // [rsp+1C4h] [rbp-104h]\n  __int64 v1248; // [rsp+1D4h] [rbp-F4h]\n  int v1249; // [rsp+1DCh] [rbp-ECh]\n  _BOOL4 v1250; // [rsp+1E0h] [rbp-E8h]\n  _BOOL4 v1251; // [rsp+1E4h] [rbp-E4h]\n  int v1252; // [rsp+1E8h] [rbp-E0h]\n  int v1253; // [rsp+1F0h] [rbp-D8h]\n  int v1254; // [rsp+1F4h] [rbp-D4h]\n  __int64 v1255; // [rsp+200h] [rbp-C8h]\n  __int64 v1256; // [rsp+208h] [rbp-C0h]\n  int v1257; // [rsp+210h] [rbp-B8h]\n  int v1258; // [rsp+214h] [rbp-B4h]\n  int v1259; // [rsp+218h] [rbp-B0h]\n  int v1260; // [rsp+21Ch] [rbp-ACh]\n  _BOOL8 v1261; // [rsp+220h] [rbp-A8h]\n  int *v1262; // [rsp+228h] [rbp-A0h]\n  _DWORD *v1263; // [rsp+230h] [rbp-98h]\n  __int64 v1264; // [rsp+238h] [rbp-90h]\n  unsigned __int64 v1265; // [rsp+240h] [rbp-88h]\n  _QWORD *****v1266; // [rsp+248h] [rbp-80h]\n  _WORD *v1267; // [rsp+250h] [rbp-78h]\n  __int64 v1268; // [rsp+258h] [rbp-70h]\n  unsigned __int64 v1269; // [rsp+260h] [rbp-68h]\n  __int64 v1270; // [rsp+268h] [rbp-60h]\n  __int64 v1271; // [rsp+270h] [rbp-58h]\n  __int64 v1272; // [rsp+278h] [rbp-50h]\n  __int64 v1273; // [rsp+280h] [rbp-48h]\n  __int64 v1274; // [rsp+288h] [rbp-40h]\n  __int64 v1275; // [rsp+290h] [rbp-38h]\n\n  v1224 = 0;\n  v1181 = 0;\n  v1 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v1 != 3 && v1\n    || (v2 = *((_DWORD *)off_49F6D0 + 35), v2 != *((_DWORD *)off_49F6D0 + 22))\n    || (v3 = 1, v2 == *((_DWORD *)off_49F6D0 + 23)) )\n  {\n    v3 = v1 == 2;\n  }\n  v4 = 0;\n  v5 = v1 == 4;\n  v1221 = 0;\n  v1185 = v1;\n  v6 = v1 == 1;\n  v7 = *((_DWORD *)dest + 616);\n  v8 = *((_DWORD *)dest + 727);\n  v1219 = 0;\n  v1236 = 1;\n  if ( v8 == 1 && v7 == 2 )\n  {\n    v9 = v1185;\n    if ( v1185 == 1 )\n    {\n      if ( *((_DWORD *)off_49F6D0 + 18124) <= 0 )\n      {\nLABEL_14:\n        v7 = 2;\n        v1219 = 0;\n        goto LABEL_15;\n      }\n    }\n    else if ( v1185 != 3 && v1185 )\n    {\n      goto LABEL_14;\n    }\n    LOBYTE(v9) = 1;\n    v1219 = v9;\n    v7 = 2;\n    v1236 = 2;\n  }\nLABEL_15:\n  v1206 = 0;\n  if ( v8 && v7 )\n  {\n    v10 = v1185;\n    LOBYTE(v10) = v1185 == 3 || v1185 == 0;\n    v1206 = v10;\n  }\n  v11 = *((_QWORD *)off_49F6D0 + 1771);\n  v12 = *((signed int *)off_49F6D0 + 3);\n  v13 = 632 * v12;\n  if ( *((_DWORD *)off_49F6D0 + 3) )\n    v14 = v11 + v13 - 632;\n  else\n    v14 = 0LL;\n  v1255 = v14;\n  v1215 = *((_QWORD *)off_49F6D0 + 13);\n  v15 = (_QWORD *****)*((_QWORD *)off_49F6D0 + 8991);\n  v16 = *((_DWORD *)off_49F6D0 + 18100) == 0;\n  v1209 = v11;\n  v1210 = 632 * v12;\n  v1266 = v15;\n  LOBYTE(v1186) = v6;\n  if ( v16 || !*(_DWORD *)(v11 + v13 + 532) )\n  {\n    v1243 = 0LL;\n    v17 = 0;\n    v1225 = 0LL;\n  }\n  else\n  {\n    v1225 = 2 * (unsigned int)(v12 & 1) + 2;\n    v17 = 1;\n    v1243 = 1LL;\n  }\n  v18 = v3;\n  if ( *((_DWORD *)dest + 823) )\n  {\n    sub_41ABC0();\n    LODWORD(v12) = *((_DWORD *)off_49F6D0 + 3);\n  }\n  v19 = sub_424110(v12);\n  v20 = (double *)dest;\n  v21 = *((_DWORD *)dest + 805);\n  v1235 = v18 | v19;\n  v1254 = v21;\n  v1251 = v21 != 2;\n  v1252 = 1;\n  v1246 = (v18 | v19) == 0;\n  if ( v18 | v19 )\n  {\n    _mm_storeu_si128((__m128i *)&v1247, (__m128i)0LL);\n    v1248 = 0LL;\n    v22 = 0;\n    v23 = 0;\n    v24 = 0;\n    LOBYTE(v25) = 0;\n  }\n  else\n  {\n    v26 = _mm_andnot_si128(\n            _mm_cmpeq_epi32((__m128i)0LL, _mm_loadu_si128((const __m128i *)dest + 148)),\n            (__m128i)xmmword_489710);\n    _mm_storeu_si128((__m128i *)&v1247, v26);\n    v23 = *((_DWORD *)v20 + 596) != 0;\n    LODWORD(v1248) = *((_DWORD *)v20 + 596) != 0;\n    v22 = *((_DWORD *)v20 + 597) != 0;\n    HIDWORD(v1248) = *((_DWORD *)v20 + 597) != 0;\n    LOBYTE(v25) = *((_DWORD *)v20 + 598) != 0;\n    v24 = _mm_cvtsi128_si32(_mm_shuffle_epi32(v26, 231));\n  }\n  LOBYTE(v4) = v5;\n  v25 = (unsigned __int8)v25;\n  v1249 = (unsigned __int8)v25;\n  v27 = v1210;\n  if ( v21 == 2 )\n  {\n    v1249 = 0;\n    v1248 = 0LL;\n    v25 = 0;\n    v22 = 0;\n    v23 = 0;\n  }\n  v1250 = (v25 | v22 | v24 | v23) != 0;\n  v1253 = v4;\n  v28 = (signed int *)off_49F6D0;\n  LODWORD(v29) = v1225 + 2;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v30 = v1185;\n    v31 = (unsigned int)v1225;\n    if ( v17 )\n    {\n      v32 = (unsigned int)v29;\n      v33 = v1186;\n      if ( *((_DWORD *)qword_4F9BE0 + (unsigned int)v1225) > 0 )\n      {\n        v34 = (__int64)*(&base + (unsigned int)v1225);\n        v35 = *((_DWORD *)off_49F6D0 + 3);\n        v36 = *((_DWORD *)off_49F6D0 + 3) % 2;\n        v37 = 0LL;\n        do\n        {\n          v38 = *(_DWORD **)(v34 + 8 * v37);\n          v38[1602] = 0;\n          if ( !(v35 & 1) && *v38 == 2 )\n            v38[1602] = -2;\n          if ( v36 == 1 && *v38 == 1 )\n            v38[1602] = 2;\n          ++v37;\n        }\n        while ( v37 < *((signed int *)qword_4F9BE0 + v31) );\n      }\n      if ( v31 + 1 < v32 && *((_DWORD *)qword_4F9BE0 + v31 + 1) > 0 )\n      {\n        v39 = (__int64)*(&qword_4F9A58 + v31);\n        v40 = v28[3];\n        v41 = v28[3] % 2;\n        v42 = 0LL;\n        do\n        {\n          v43 = *(_DWORD **)(v39 + 8 * v42);\n          v43[1602] = 0;\n          if ( !(v40 & 1) && *v43 == 2 )\n            v43[1602] = -2;\n          if ( v41 == 1 && *v43 == 1 )\n            v43[1602] = 2;\n          ++v42;\n        }\n        while ( v42 < *((signed int *)qword_4F9BE0 + v31 + 1) );\n      }\n    }\n    else\n    {\n      v29 = (unsigned int)v29;\n      if ( *((_DWORD *)qword_4F9BE0 + (unsigned int)v1225) > 0 )\n      {\n        v53 = (__int64)*(&base + (unsigned int)v1225);\n        v54 = 0LL;\n        do\n          *(_DWORD *)(*(_QWORD *)(v53 + 8 * v54++) + 6408LL) = 0;\n        while ( v54 < *((signed int *)qword_4F9BE0 + v31) );\n      }\n      v33 = v1186;\n      if ( v31 + 1 < v29 && *((_DWORD *)qword_4F9BE0 + v31 + 1) > 0 )\n      {\n        v55 = (__int64)*(&qword_4F9A58 + v31);\n        v56 = 0LL;\n        do\n          *(_DWORD *)(*(_QWORD *)(v55 + 8 * v56++) + 6408LL) = 0;\n        while ( v56 < *((signed int *)qword_4F9BE0 + v31 + 1) );\n      }\n    }\n  }\n  else\n  {\n    v44 = (unsigned int)v1225;\n    v29 = (unsigned int)v29;\n    v30 = v1185;\n    v33 = v1186;\n    if ( *((_DWORD *)qword_4F9BE0 + (unsigned int)v1225) > 0 )\n    {\n      v45 = (__int64)*(&base + (unsigned int)v1225);\n      v46 = *((_DWORD *)off_49F6D0 + 7);\n      v47 = 0LL;\n      do\n      {\n        v48 = *(_DWORD **)(v45 + 8 * v47);\n        v48[1602] = 0;\n        if ( v46 == 2 )\n        {\n          if ( *v48 != 2 )\n            v48[1602] = 2;\n        }\n        else if ( v46 == 1 && *v48 != 1 )\n        {\n          v48[1602] = -2;\n        }\n        ++v47;\n      }\n      while ( v47 < *((signed int *)qword_4F9BE0 + v44) );\n    }\n    if ( v44 + 1 < v29 && *((_DWORD *)qword_4F9BE0 + v44 + 1) > 0 )\n    {\n      v49 = (__int64)*(&qword_4F9A58 + v44);\n      v50 = v28[7];\n      v51 = 0LL;\n      do\n      {\n        v52 = *(_DWORD **)(v49 + 8 * v51);\n        v52[1602] = 0;\n        if ( v50 == 1 )\n        {\n          if ( *v52 != 1 )\n            v52[1602] = -2;\n        }\n        else if ( v50 == 2 && *v52 != 2 )\n        {\n          v52[1602] = 2;\n        }\n        ++v51;\n      }\n      while ( v51 < *((signed int *)qword_4F9BE0 + v44 + 1) );\n    }\n  }\n  v57 = v28[10];\n  if ( !*((_DWORD *)v20 + 616) )\n  {\n    v61 = 0LL;\n    if ( (signed int)v57 >= 12 )\n      v61 = v57 - 12;\n    *(double *)v62.m128i_i64 = (double)dword_491160[v61];\n    v1196 = (double)dword_491160[v61];\n    v63 = v1209;\n    v64 = v1225;\n    goto LABEL_96;\n  }\n  v58 = (double)(signed int)v57 + -12.0;\n  v59 = v28[6];\n  if ( !*((_DWORD *)v20 + 833) )\n  {\n    if ( (_DWORD)v59 != 1 || v28[18124] )\n      v1075 = (double)*((signed int *)v20 + 5) * -0.05 + 1.0;\n    else\n      v1075 = 1.0;\n    v1196 = v1075;\n    v1076 = (double)v28[18169];\n    *(double *)&v1187 = (double)(signed int)v57 + -12.0;\n    v1077 = exp2(v58 / 3.0 + v1076);\n    if ( *((_DWORD *)v20 + 309) <= 0 )\n    {\n      v1142 = v1077 * 0.85;\n      v1143 = qword_4896D0[v30 == 1];\n      if ( v30 != 1 && v30 == 3 )\n      {\n        v1144.m128d_f64[0] = *(double *)&v1187 / 12.0;\n        v1145.m128d_f64[0] = fmin(3.0, *(double *)&v1187 / 12.0);\n        v944 = v1145.m128d_f64[0] > 1.4;\n        v16 = v1145.m128d_f64[0] == 1.4;\n        *(_QWORD *)&v1145.m128d_f64[0] = (unsigned __int128)_mm_cmplt_sd(v1145, (__m128d)0x3FF6666666666666uLL);\n        *(_QWORD *)&v1146 = ~*(_QWORD *)&v1145.m128d_f64[0] & 0x4008000000000000LL | *(_QWORD *)&v1145.m128d_f64[0] & 0x3FF6666666666666LL;\n        v1147 = (unsigned __int128)_mm_cmplt_sd((__m128d)0x4008000000000000uLL, v1144);\n        v1148 = v1147 & *(_QWORD *)&v1146;\n        if ( v944 || v16 )\n          v1146 = *(double *)&v1187 / 12.0;\n        *(_QWORD *)&v1143 = ~v1147 & *(_QWORD *)&v1146 | v1148;\n      }\n      v1149 = v1142 * v1143;\n      v1150 = v1196;\n      if ( *((_DWORD *)v20 + 330) == 2 )\n        goto LABEL_1210;\n      goto LABEL_1199;\n    }\n    v1078 = v1077 * 0.68;\n    if ( v30 == 1 )\n    {\n      v1079.m128d_f64[0] = *(double *)&v1187 / 6.0;\n      v1080.m128d_f64[0] = 4.0;\n      v1081.m128d_f64[0] = fmin(4.0, *(double *)&v1187 / 6.0);\n      v1082.m128d_f64[0] = 2.0;\n    }\n    else\n    {\n      if ( v30 != 3 )\n      {\n        v1155 = 1.0;\n        goto LABEL_1209;\n      }\n      v1079.m128d_f64[0] = *(double *)&v1187 / 12.0;\n      v1080.m128d_f64[0] = 3.0;\n      v1081.m128d_f64[0] = fmin(3.0, *(double *)&v1187 / 12.0);\n      v1082.m128d_f64[0] = 1.4;\n    }\n    v944 = v1082.m128d_f64[0] < v1081.m128d_f64[0];\n    v16 = v1082.m128d_f64[0] == v1081.m128d_f64[0];\n    v1151 = (unsigned __int128)_mm_cmplt_sd(v1081, v1082);\n    *(_QWORD *)&v1152 = ~v1151 & *(_QWORD *)&v1080.m128d_f64[0] | *(_QWORD *)&v1082.m128d_f64[0] & v1151;\n    v1153 = (unsigned __int128)_mm_cmplt_sd(v1080, v1079);\n    v1154 = v1153 & *(_QWORD *)&v1152;\n    if ( v944 || v16 )\n      v1152 = v1079.m128d_f64[0];\n    *(_QWORD *)&v1155 = ~v1153 & *(_QWORD *)&v1152 | v1154;\nLABEL_1209:\n    v1150 = v1196;\n    v1149 = v1078 * v1155;\n    if ( *((_DWORD *)v20 + 330) == 2 )\n    {\nLABEL_1210:\n      if ( (_DWORD)v59 == 1 && v28[18124] )\n        v1149 = v1149 * (1.0 - fmin(0.4, (double)*((signed int *)qword_4F9E70 + 6 * v28[17977] - 2) * 0.2));\n      goto LABEL_1213;\n    }\nLABEL_1199:\n    if ( (_DWORD)v59 == 1 && v28[18124] )\n      v1149 = v1149 * 0.8;\nLABEL_1213:\n    v60 = v1150 * v1149;\n    if ( !*((_DWORD *)v20 + 7) )\n      goto LABEL_92;\n    goto LABEL_91;\n  }\n  if ( (_DWORD)v59 == 1 && v28[18124] )\n  {\n    v60 = exp2(v58 / 3.0 + (double)v28[18169]) * v20[422];\n    if ( !*((_DWORD *)v20 + 7) )\n      goto LABEL_92;\n    goto LABEL_91;\n  }\n  v60 = exp2(v58 / 3.0 + (double)v28[18169]) * v20[v59 + 417];\n  if ( *((_DWORD *)v20 + 7) )\nLABEL_91:\n    v60 = v60 * 0.95;\nLABEL_92:\n  v1196 = v60;\n  if ( v60 < 0.0 )\n    v62.m128i_i64[0] = sqrt(v60);\n  else\n    v62.m128i_i64[0] = sqrt(v60);\n  v63 = v1209;\n  v27 = v1210;\n  v64 = v1225;\n  v28 = (signed int *)off_49F6D0;\nLABEL_96:\n  v1188 = v62.m128i_i64[0];\n  v65 = v1221;\n  LOBYTE(v65) = v33;\n  v1221 = v65;\n  v1244 = v63 + v27;\n  _mm_storeu_si128((__m128i *)((char *)v28 + 71966), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)v28 + 4497, (__m128i)0LL);\n  v1261 = v30 != 1;\n  v66 = (signed int)(65536.0 * *(double *)v62.m128i_i64 + 0.5);\n  v1184 = (int *)(v63 + v27 + 524);\n  v1211 = v64;\n  v67 = v1206;\n  LOBYTE(v67) = v1206 ^ 1;\n  v1206 = v67;\n  v1227 = v64 | 1;\n  v1218 = *(double *)v62.m128i_i64 + *(double *)v62.m128i_i64;\n  v68 = 0LL;\n  v1234 = 0.0;\n  v1199 = (signed int)((*(double *)v62.m128i_i64 + *(double *)v62.m128i_i64) * 0.0);\n  v69 = (__m128)0x4030000000000000uLL;\n  *(double *)v69.m128_u64 = floor(16.0 * *(double *)v62.m128i_i64 + 0.4999);\n  v62 = (__m128i)v62.m128i_u64[0];\n  v70 = (signed int)*(double *)v69.m128_u64;\n  v1257 = (signed int)*(double *)v69.m128_u64;\n  LOWORD(v70) = -1;\n  LODWORD(v1190) = v70;\n  v1220 = 0;\n  v1212 = 0;\n  v1203 = 0;\n  v1237 = 0;\n  v1202 = 0;\n  v1231 = 0;\n  v1213 = 0LL;\n  v71 = 0;\n  v1205 = 0;\n  v1182 = (signed int)(65536.0 * *(double *)v62.m128i_i64 + 0.5);\n  do\n  {\n    if ( (_BYTE)v1219 )\n      *((_DWORD *)dest + 616) = 2 - (v1220 < 1);\n    v74 = v1184;\n    *v1184 = 0;\n    v72 = 0x7FFFFFFF;\n    if ( v1235 )\n      goto LABEL_816;\n    if ( v30 == 1 )\n    {\n      sub_451280();\n      v62 = (__m128i)v1188;\n      v74 = v1184;\n    }\n    dword_4FA0A8 = 1;\n    v75 = 0x7FFFFFFF;\n    v76 = 1LL;\n    do\n    {\n      dword_4FA0AC = 0;\n      *((_WORD *)off_49F6D0 + v76 + 35976) = 0;\n      v16 = *(&v1246 + v76) == 0;\n      v1191 = v76;\n      if ( v16 )\n        goto LABEL_282;\n      v1222 = v75;\n      v1181 = 0;\n      v1226 = 2LL - (v76 == 1);\n      v1197 = 0LL;\n      *(double *)&v77 = 0.0;\n      v78 = v1190;\n      do\n      {\n        v1195 = *(double *)&v77;\n        v69 = (__m128)v62;\n        sub_450D90(v76, v77, *(double *)v62.m128i_i64, v68, v62);\n        v81 = *((_DWORD *)qword_4F9BE0 + v1211);\n        LODWORD(v1190) = v78;\n        if ( v81 <= 0 )\n        {\n          v88 = 0x7FFFFFFF;\n          v62 = (__m128i)v1188;\n          v85 = v71;\n          v86 = v1195;\n          if ( v1185 != 1 )\n            goto LABEL_162;\n        }\n        else\n        {\n          v82 = dest;\n          v83 = (_QWORD **)qword_4F9F10;\n          v1186 = (unsigned __int64)qword_4F9F50;\n          v84 = v1199;\n          v62 = (__m128i)v1188;\n          v85 = v71;\n          v86 = v1195;\n          if ( *((_DWORD *)dest + 616) )\n          {\n            v87 = 0;\n            if ( v81 >= 2 )\n              v87 = *(_DWORD *)v1186;\n            v84 = v1182 * v87 >> 16;\n          }\n          v88 = *(_DWORD *)(***((_QWORD ***)qword_4F9F10 + v76) + 4LL * *(_QWORD *)&v1195) + v84;\n          if ( v88 != 0x7FFFFFFF )\n            LOWORD(v85) = 0;\n          if ( v81 >= 2 )\n          {\n            v89 = 1;\n            do\n            {\n              if ( (unsigned __int8)v1206 | ((_WORD)v89 == 0)\n                || (v90 = (unsigned int)v76,\n                    v91 = v85,\n                    v92 = sub_45B870(LODWORD(v86), 0, v89, v90),\n                    v86 = v1195,\n                    v85 = v91,\n                    v76 = v1191,\n                    v62 = (__m128i)v1188,\n                    v92) )\n              {\n                if ( v82[616] )\n                {\n                  v93 = v1182 * *(_DWORD *)(v1186 + 4LL * (signed __int16)v89) >> 16;\n                }\n                else\n                {\n                  v94 = v89;\n                  if ( v89 >= 2 )\n                    v94 = 1;\n                  v69 = 0LL;\n                  *(double *)v69.m128_u64 = (double)v94 * v1218;\n                  v93 = (signed int)*(double *)v69.m128_u64;\n                }\n                v95 = *(_DWORD *)(*(_QWORD *)(*v83[v76] + 8LL * (signed __int16)v89) + 4LL * *(_QWORD *)&v86) + v93;\n                v97 = __OFSUB__(v95, v88);\n                v96 = v95 - v88 < 0;\n                if ( v95 <= v88 )\n                  v88 = v95;\n                if ( v96 ^ v97 )\n                  LOWORD(v85) = v89;\n              }\n              v89 = (signed __int16)(v89 + 1);\n            }\n            while ( v81 > v89 );\n          }\n          if ( v1185 != 1 )\n          {\nLABEL_162:\n            v1181 += v88;\n            LODWORD(v1186) = 0;\n            v101 = v1190;\n            goto LABEL_217;\n          }\n        }\n        v98 = *((_DWORD *)qword_4F9BE0 + v1227);\n        v99 = *((_DWORD *)dest + 616);\n        v100 = v1182;\n        v101 = v1190;\n        if ( v98 <= 0 )\n        {\n          v105 = 0x7FFFFFFF;\n          if ( v99 )\n            goto LABEL_156;\n        }\n        else\n        {\n          v102 = *(_QWORD **)(*((_QWORD *)qword_4F9F10 + v1191) + 8LL);\n          v103 = v1199;\n          if ( v99 )\n          {\n            v104 = 0;\n            if ( v98 >= 2 )\n              v104 = *(_DWORD *)qword_4F9F50;\n            v103 = v1182 * v104 >> 16;\n          }\n          v105 = *(_DWORD *)(*v102 + 4LL * *(_QWORD *)&v86) + v103;\n          if ( v105 != 0x7FFFFFFF )\n            LOWORD(v101) = 0;\n          if ( v98 >= 2 )\n          {\n            v106 = 1;\n            do\n            {\n              if ( v99 )\n              {\n                v107 = v1182 * *((_DWORD *)qword_4F9F50 + (signed __int16)v106) >> 16;\n              }\n              else\n              {\n                v108 = v106;\n                if ( v106 >= 2 )\n                  v108 = 1;\n                v69 = 0LL;\n                *(double *)v69.m128_u64 = (double)v108 * v1218;\n                v107 = (signed int)*(double *)v69.m128_u64;\n              }\n              v109 = *(_DWORD *)(v102[(signed __int16)v106] + 4LL * *(_QWORD *)&v86) + v107;\n              v111 = __OFSUB__(v109, v105);\n              v110 = v109 - v105 < 0;\n              if ( v109 <= v105 )\n                v105 = v109;\n              if ( v110 ^ v111 )\n                LOWORD(v101) = v106;\n              v106 = (signed __int16)(v106 + 1);\n            }\n            while ( v98 > v106 );\n          }\n          if ( v99 )\n          {\nLABEL_156:\n            v112 = 0;\n            v113 = 0;\n            if ( v81 >= 2 )\n              v113 = *((_DWORD *)qword_4F9F50 + (signed __int16)v85);\n            v114 = v1182 * v113 >> 16;\n            if ( v98 >= 2 )\n              v112 = *(_DWORD *)qword_4F9F50;\n            v115 = v114 + (v1182 * v112 >> 16);\n            goto LABEL_167;\n          }\n        }\n        v116 = (signed __int16)v85;\n        if ( (signed __int16)v85 >= 2 )\n          v116 = 1;\n        v69 = 0LL;\n        *(double *)v69.m128_u64 = (double)v116 * v1218;\n        v115 = (signed int)*(double *)v69.m128_u64;\nLABEL_167:\n        v1177 = v85;\n        v117 = v1191;\n        v118 = v115 + (unsigned __int64)sub_44FAA0(v1191, SLODWORD(v86), v85, 0, v1182);\n        if ( v117 != 1 )\n        {\n          v119 = 0x7FFFFFFF;\n          v120 = 0x7FFFFFFF;\n          v62 = (__m128i)v1188;\nLABEL_185:\n          v85 = v1177;\n          v86 = v1195;\n          goto LABEL_186;\n        }\n        v62 = (__m128i)v1188;\n        v119 = 0x7FFFFFFF;\n        if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n        {\n          v120 = 0x7FFFFFFF;\n          goto LABEL_185;\n        }\n        v120 = 0x7FFFFFFF;\n        v85 = v1177;\n        v86 = v1195;\n        if ( *((_DWORD *)dest + 314) )\n        {\n          LODWORD(v1190) = v101;\n          v121 = v1199;\n          if ( *((_DWORD *)dest + 616) )\n          {\n            v122 = 0;\n            v123 = 0;\n            if ( *((_DWORD *)qword_4F9BE0 + v1211) >= 2 )\n              v123 = *(_DWORD *)qword_4F9F50;\n            v124 = v100 * v123 >> 16;\n            if ( *((_DWORD *)qword_4F9BE0 + v1227) >= 2 )\n              v122 = *(_DWORD *)qword_4F9F50;\n            v121 = v124 + (v100 * v122 >> 16);\n          }\n          LODWORD(v1186) = v118;\n          v125 = sub_44D420(1, SLODWORD(v1195), 0, 0, v100, 0);\n          v126 = v1199;\n          if ( *((_DWORD *)dest + 616) )\n          {\n            v127 = 0;\n            v128 = 0;\n            if ( *((_DWORD *)qword_4F9BE0 + v1211) >= 2 )\n              v128 = *(_DWORD *)qword_4F9F50;\n            v129 = v100 * v128 >> 16;\n            if ( *((_DWORD *)qword_4F9BE0 + v1227) >= 2 )\n              v127 = *(_DWORD *)qword_4F9F50;\n            v126 = v129 + (v100 * v127 >> 16);\n          }\n          v119 = v121 + v125;\n          v130 = v1195;\n          v131 = sub_44D420(1, SLODWORD(v1195), 0, 0, v100, 1);\n          v86 = v130;\n          v120 = v126 + v131;\n          v62 = (__m128i)v1188;\n          v85 = v1177;\n          v101 = v1190;\n          v118 = v1186;\n        }\nLABEL_186:\n        v132 = v88 > v105 || v88 > v118;\n        v76 = v1191;\n        if ( v1191 == 1 && *((_DWORD *)dest + 314) )\n        {\n          if ( v88 >= v119 || v132 || v88 >= v120 )\n          {\n            if ( v105 <= v88 && v105 <= v118 && v105 < v119 && v105 < v120 )\n            {\n              v1181 += v105;\nLABEL_200:\n              LOWORD(v120) = 1;\n              LODWORD(v1186) = v120;\n              v85 = 0;\n              goto LABEL_217;\n            }\n            if ( v118 > v105 || v118 > v88 || v118 >= v119 || v118 >= v120 )\n            {\n              if ( v119 > v120 || v118 < v119 || v88 < v119 || v105 < v119 )\n              {\n                v1181 += v120;\n                dword_4FA0AC = 2;\n                HIWORD(v120) = WORD1(off_49F6D0);\n                *((_WORD *)off_49F6D0 + 35977) = 2;\n              }\n              else\n              {\n                v1181 += v119;\n                dword_4FA0AC = 1;\n                HIWORD(v120) = WORD1(off_49F6D0);\n                *((_WORD *)off_49F6D0 + 35977) = 1;\n              }\n              LOWORD(v120) = 2;\n              LODWORD(v1186) = v120;\n              v85 = 0;\n              goto LABEL_216;\n            }\n            v1181 += v118;\n            dword_4FA0AC = 0;\n            HIWORD(v133) = WORD1(off_49F6D0);\n            *((_WORD *)off_49F6D0 + 35977) = 0;\n            goto LABEL_208;\n          }\n        }\n        else if ( v132 )\n        {\n          if ( v105 <= v88 && v105 <= v118 )\n          {\n            v120 = v105 + v1181;\n            v1181 += v105;\n            goto LABEL_200;\n          }\n          v133 = v118 + v1181;\n          v1181 += v118;\nLABEL_208:\n          LOWORD(v133) = 2;\n          LODWORD(v1186) = v133;\n          goto LABEL_216;\n        }\n        v1181 += v88;\n        LODWORD(v1186) = 0;\nLABEL_216:\n        v101 = 0;\nLABEL_217:\n        v1178 = v85;\n        LODWORD(v1190) = v101;\n        if ( v76 == 1 )\n        {\n          LODWORD(v1194) = 2 * (LOBYTE(v86) & 1);\n          if ( (unsigned __int16)v1186 == 1 )\n          {\n            v134 = **(_QWORD **)(qword_4F9E30 + 6480);\n            v135 = (char *)off_49F6D0;\n            v136 = LOBYTE(v86);\n            v137 = *((_DWORD *)off_49F6D0 + 36);\n            v138 = 2 * LOBYTE(v86) & 2;\n            v139 = **(_QWORD **)(qword_4F9E30 + 6488);\n            v140 = **(_QWORD **)(qword_4F9E30 + 6504);\n            v141 = v137 + v138;\n            v1201 = *(_QWORD *)(v134 + 8 * v141);\n            v142 = *(_QWORD *)(v139 + 8 * v141);\n            v1189 = *(_QWORD *)(v140 + 8 * v141);\n            v143 = v138 + v137 + 1;\n            v1193 = *(__int64 *)(v134 + 8 * v143);\n            v144 = v1193;\n            v1187 = *(unsigned __int64 *)(v139 + 8 * v143);\n            v1183 = *(_QWORD *)(v140 + 8 * v143);\n            v145 = v138 + v137 + 2;\n            v146 = *(_WORD **)(v134 + 8 * v145);\n            v1200 = *(_QWORD *)(v139 + 8 * v145);\n            v147 = *(_QWORD *)(v140 + 8 * v145);\n            v148 = v138 + v137 + 3;\n            v1192 = *(_QWORD *)(v134 + 8 * v148);\n            v149 = *(_QWORD *)(v139 + 8 * v148);\n            v1207 = *(_QWORD *)(v140 + 8 * v148);\n            v150 = v1207;\n            v151 = v136 & 2;\n            v152 = *((_DWORD *)off_49F6D0 + 37);\n            v153 = v152 + v151;\n            *(_WORD *)(v1201 + 2 * v153) = -1;\n            *(_QWORD *)(v142 + 8 * v153) = -1LL;\n            v154 = v142;\n            v1214 = v142;\n            v155 = v1189;\n            **(_DWORD **)(v1189 + 8 * v153) = 0;\n            *(_WORD *)(v144 + 2 * v153) = -1;\n            *(_QWORD *)(v1187 + 8 * v153) = -1LL;\n            **(_DWORD **)(v1183 + 8 * v153) = 0;\n            v146[v153] = -1;\n            v1217 = v146;\n            v156 = v1200;\n            *(_QWORD *)(v1200 + 8 * v153) = -1LL;\n            v157 = *(_DWORD **)(v147 + 8 * v153);\n            v1216 = v147;\n            *v157 = 0;\n            v158 = v1192;\n            *(_WORD *)(v1192 + 2 * v153) = -1;\n            *(_QWORD *)(v149 + 8 * v153) = -1LL;\n            **(_DWORD **)(v150 + 8 * v153) = 0;\n            v159 = v152 + v151 + 1;\n            v160 = v1201;\n            *(_WORD *)(v1201 + 2 * v159) = -1;\n            *(_QWORD *)(v154 + 8 * v159) = -1LL;\n            **(_DWORD **)(v155 + 8 * v159) = 0;\n            v161 = v1193;\n            *(_WORD *)(v1193 + 2 * v159) = -1;\n            v162 = v1187;\n            *(_QWORD *)(v1187 + 8 * v159) = -1LL;\n            v163 = v1183;\n            **(_DWORD **)(v1183 + 8 * v159) = 0;\n            v146[v159] = -1;\n            *(_QWORD *)(v156 + 8 * v159) = -1LL;\n            **(_DWORD **)(v147 + 8 * v159) = 0;\n            *(_WORD *)(v158 + 2 * v159) = -1;\n            *(_QWORD *)(v149 + 8 * v159) = -1LL;\n            v164 = v1207;\n            **(_DWORD **)(v1207 + 8 * v159) = 0;\n            v165 = v152 + v151 + 2;\n            *(_WORD *)(v160 + 2 * v165) = -1;\n            v166 = v1214;\n            *(_QWORD *)(v1214 + 8 * v165) = -1LL;\n            v167 = v1189;\n            **(_DWORD **)(v1189 + 8 * v165) = 0;\n            *(_WORD *)(v161 + 2 * v165) = -1;\n            *(_QWORD *)(v162 + 8 * v165) = -1LL;\n            **(_DWORD **)(v163 + 8 * v165) = 0;\n            v168 = v1217;\n            *((_WORD *)v1217 + v165) = -1;\n            *(_QWORD *)(v156 + 8 * v165) = -1LL;\n            v169 = v1216;\n            **(_DWORD **)(v1216 + 8 * v165) = 0;\n            v170 = v1192;\n            *(_WORD *)(v1192 + 2 * v165) = -1;\n            *(_QWORD *)(v149 + 8 * v165) = -1LL;\n            **(_DWORD **)(v164 + 8 * v165) = 0;\n            v171 = v152 + v151 + 3;\n            *(_WORD *)(v160 + 2 * v171) = -1;\n            *(_QWORD *)(v166 + 8 * v171) = -1LL;\n            **(_DWORD **)(v167 + 8 * v171) = 0;\n            *(_WORD *)(v1193 + 2 * v171) = -1;\n            *(_QWORD *)(v1187 + 8 * v171) = -1LL;\n            **(_DWORD **)(v1183 + 8 * v171) = 0;\n            v168[v171] = -1;\n            *(_QWORD *)(v156 + 8 * v171) = -1LL;\n            **(_DWORD **)(v169 + 8 * v171) = 0;\n            *(_WORD *)(v170 + 2 * v171) = -1;\n            *(_QWORD *)(v149 + 8 * v171) = -1LL;\n            **(_DWORD **)(v164 + 8 * v171) = 0;\n            if ( v1185 != 1 )\n              goto LABEL_272;\nLABEL_220:\n            if ( !(_WORD)v1186 )\n            {\n              v240 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6480) + 8LL);\n              v241 = 2 * LOBYTE(v1195) & 2;\n              v242 = LOBYTE(v1195) & 2;\n              v243 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6488) + 8LL);\n              v244 = *(_QWORD *)(*(_QWORD *)(qword_4F9E30 + 6504) + 8LL);\n              v245 = v241 + v137;\n              v1189 = *(_QWORD *)(v240 + 8 * v245);\n              v1187 = *(unsigned __int64 *)(v243 + 8 * v245);\n              v1183 = *(_QWORD *)(v244 + 8 * v245);\n              v246 = v241 + v137 + 1;\n              v247 = *(_QWORD *)(v240 + 8 * v246);\n              v1194 = *(_QWORD *)(v243 + 8 * v246);\n              v248 = v1194;\n              v249 = *(_QWORD *)(v244 + 8 * v246);\n              v250 = v241 + v137 + 2;\n              v251 = *(_QWORD *)(v240 + 8 * v250);\n              v252 = *(_QWORD *)(v243 + 8 * v250);\n              v253 = *(_QWORD *)(v244 + 8 * v250);\n              v254 = v241 + v137 + 3;\n              v1192 = *(_QWORD *)(v240 + 8 * v254);\n              v255 = v1192;\n              v1200 = *(_QWORD *)(v243 + 8 * v254);\n              v1193 = *(__int64 *)(v244 + 8 * v254);\n              v256 = v1193;\n              v257 = v152 + v242;\n              v258 = v1189;\n              *(_WORD *)(v1189 + 2 * v257) = -1;\n              v259 = v1187;\n              *(_QWORD *)(v1187 + 8 * v257) = -1LL;\n              v260 = v1183;\n              **(_DWORD **)(v1183 + 8 * v257) = 0;\n              *(_WORD *)(v247 + 2 * v257) = -1;\n              *(_QWORD *)(v248 + 8 * v257) = -1LL;\n              v261 = v249;\n              **(_DWORD **)(v249 + 8 * v257) = 0;\n              *(_WORD *)(v251 + 2 * v257) = -1;\n              *(_QWORD *)(v252 + 8 * v257) = -1LL;\n              v262 = *(_DWORD **)(v253 + 8 * v257);\n              v1201 = v253;\n              *v262 = 0;\n              *(_WORD *)(v255 + 2 * v257) = -1;\n              v263 = v1200;\n              *(_QWORD *)(v1200 + 8 * v257) = -1LL;\n              **(_DWORD **)(v256 + 8 * v257) = 0;\n              v264 = v152 + v242 + 1;\n              *(_WORD *)(v258 + 2 * v264) = -1;\n              v265 = v258;\n              v266 = v259;\n              *(_QWORD *)(v259 + 8 * v264) = -1LL;\n              v267 = v260;\n              **(_DWORD **)(v260 + 8 * v264) = 0;\n              v268 = v247;\n              v1207 = v247;\n              *(_WORD *)(v247 + 2 * v264) = -1;\n              v269 = v1194;\n              *(_QWORD *)(v1194 + 8 * v264) = -1LL;\n              **(_DWORD **)(v261 + 8 * v264) = 0;\n              *(_WORD *)(v251 + 2 * v264) = -1;\n              *(_QWORD *)(v252 + 8 * v264) = -1LL;\n              **(_DWORD **)(v253 + 8 * v264) = 0;\n              v270 = v1192;\n              *(_WORD *)(v1192 + 2 * v264) = -1;\n              *(_QWORD *)(v263 + 8 * v264) = -1LL;\n              v271 = v1193;\n              **(_DWORD **)(v1193 + 8 * v264) = 0;\n              v272 = v152 + v242 + 2;\n              *(_WORD *)(v265 + 2 * v272) = -1;\n              *(_QWORD *)(v266 + 8 * v272) = -1LL;\n              **(_DWORD **)(v267 + 8 * v272) = 0;\n              *(_WORD *)(v268 + 2 * v272) = -1;\n              *(_QWORD *)(v269 + 8 * v272) = -1LL;\n              **(_DWORD **)(v261 + 8 * v272) = 0;\n              *(_WORD *)(v251 + 2 * v272) = -1;\n              *(_QWORD *)(v252 + 8 * v272) = -1LL;\n              v273 = v1201;\n              **(_DWORD **)(v1201 + 8 * v272) = 0;\n              *(_WORD *)(v270 + 2 * v272) = -1;\n              *(_QWORD *)(v263 + 8 * v272) = -1LL;\n              **(_DWORD **)(v271 + 8 * v272) = 0;\n              v274 = v152 + v242 + 3;\n              *(_WORD *)(v265 + 2 * v274) = -1;\n              *(_QWORD *)(v1187 + 8 * v274) = -1LL;\n              **(_DWORD **)(v267 + 8 * v274) = 0;\n              *(_WORD *)(v1207 + 2 * v274) = -1;\n              *(_QWORD *)(v269 + 8 * v274) = -1LL;\n              **(_DWORD **)(v261 + 8 * v274) = 0;\n              *(_WORD *)(v251 + 2 * v274) = -1;\n              *(_QWORD *)(v252 + 8 * v274) = -1LL;\n              **(_DWORD **)(v273 + 8 * v274) = 0;\n              *(_WORD *)(v270 + 2 * v274) = -1;\n              *(_QWORD *)(v263 + 8 * v274) = -1LL;\n              **(_DWORD **)(v271 + 8 * v274) = 0;\n              goto LABEL_272;\n            }\n            v1183 = (unsigned __int64)(v135 + 71944);\n            v172 = (_QWORD *)qword_4F9E30;\n            v1192 = LOBYTE(v1195) & 2;\n            v1187 = qword_4F9E30 + 264 * v1227 + 24;\n            v1193 = (signed __int16)v1190;\n            v1189 = qword_4F9E30 + 264 * v1227 + 8LL * (signed __int16)v1190 + 24;\n            v173 = v1194 + v137;\n            v174 = 0LL;\nLABEL_222:\n            v175 = v152 + (signed int)v1192 + (signed int)v174;\n            v176 = -32LL;\n            v177 = v173;\n            while ( 1 )\n            {\n              v178 = *((_WORD *)v135 + 35977);\n              if ( v178 )\n                break;\n              v184 = v1190;\n              *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v172[810] + 8LL) + 8LL * v177) + 2 * v175) = v1190;\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172[811] + 8LL) + 8LL * v177) + 8 * v175) = *(_QWORD *)v1189;\n              if ( v184 >= 0 )\n              {\n                v182 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v135 + 8991) + v176 + 32)\n                                                                     + 8 * v174)\n                                                         + 8LL)\n                                             + 8 * v1193)\n                                 + 8LL);\n                v183 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(v172[813] + 8LL) + 8LL * v177) + 8 * v175);\n                *v183 = *v182;\nLABEL_229:\n                v183[1] = v182[1];\n              }\n              ++v177;\n              v176 += 8LL;\n              if ( !v176 )\n              {\n                if ( ++v174 == 4 )\n                  goto LABEL_272;\n                goto LABEL_222;\n              }\n            }\n            v179 = v178;\n            v180 = (__int64 *)(v135 + 71936);\n            if ( v179 != 1 )\n              v180 = (__int64 *)v1183;\n            v181 = *v180;\n            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v172[810] + 8LL) + 8LL * v177) + 2 * v175) = 0;\n            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172[811] + 8LL) + 8LL * v177) + 8 * v175) = *(_QWORD *)v1187;\n            v182 = *(_WORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v181 + v176 + 32) + 8 * v174) + 8LL) + 8LL);\n            v183 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(v172[813] + 8LL) + 8LL * v177) + 8 * v175);\n            *v183 = *v182;\n            goto LABEL_229;\n          }\n          v135 = (char *)off_49F6D0;\n          v1183 = (unsigned __int64)off_49F6D0 + 71944;\n          v205 = (_QWORD **)qword_4F9E30;\n          v1192 = LOBYTE(v86) & 2;\n          v1187 = qword_4F9E30 + 264 * v1211 + 24;\n          v1189 = (signed __int16)v85;\n          v1193 = qword_4F9E30 + 264 * v1211 + 8LL * (signed __int16)v85 + 24;\n          v206 = (char *)off_49F6D0 + 71936;\n          v207 = 0LL;\n          do\n          {\n            v208 = v207 + v1192;\n            v209 = -32LL;\n            v210 = v1194;\n            do\n            {\n              v211 = *((_WORD *)v135 + 35977);\n              if ( v211 )\n              {\n                v212 = v211;\n                v213 = (__int64 *)v206;\n                if ( v212 != 1 )\n                  v213 = (__int64 *)v1183;\n                v214 = *v213;\n                v137 = *((_DWORD *)v135 + 36);\n                v152 = *((_DWORD *)v135 + 37);\n                v215 = v210 + v137;\n                v216 = v152 + v208;\n                *(_WORD *)(*(_QWORD *)(*v205[810] + 8 * v215) + 2 * v216) = 0;\n                *(_QWORD *)(*(_QWORD *)(*v205[811] + 8 * v215) + 8 * v216) = *(_QWORD *)v1187;\n                v217 = *(_WORD **)(***(_QWORD ***)(*(_QWORD *)(v214 + v209 + 32) + 8 * v207) + 8LL);\n                v218 = *(_WORD **)(*(_QWORD *)(*v205[813] + 8 * v215) + 8 * v216);\n                *v218 = *v217;\n              }\n              else\n              {\n                v137 = *((_DWORD *)v135 + 36);\n                v152 = *((_DWORD *)v135 + 37);\n                v219 = v210 + v137;\n                v220 = v152 + v208;\n                *(_WORD *)(*(_QWORD *)(*v205[810] + 8 * v219) + 2 * v220) = v1178;\n                *(_QWORD *)(*(_QWORD *)(*v205[811] + 8 * v219) + 8 * v220) = *(_QWORD *)v1193;\n                v221 = *(_QWORD *)(*v205[813] + 8 * v219);\n                v217 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)v135 + 8991) + v209 + 32) + 8 * v207)\n                                             + 8 * v1189)\n                                 + 8LL);\n                v218 = *(_WORD **)(v221 + 8 * v220);\n                *v218 = *v217;\n              }\n              v218[1] = v217[1];\n              ++v210;\n              v209 += 8LL;\n            }\n            while ( v209 );\n            ++v207;\n          }\n          while ( v207 != 4 );\n          if ( v1185 == 1 )\n            goto LABEL_220;\n        }\n        else\n        {\n          v1183 = (unsigned __int64)off_49F6D0;\n          if ( v76 == 2 )\n          {\n            v1200 = *((unsigned int *)off_49F6D0 + 37);\n            v1207 = 2LL * *(_QWORD *)&v86;\n            v185 = qword_4F9E30;\n            v186 = *(_QWORD **)(qword_4F9E30 + 6480);\n            v1187 = (signed __int16)v85;\n            v1189 = qword_4F9E30 + 264 * v1211 + 24 + 8LL * (signed __int16)v85;\n            v1194 = (signed __int16)v101;\n            v1193 = qword_4F9E30 + 264 * v1227 + 24 + 8LL * (signed __int16)v101;\n            v187 = 8LL * *((signed int *)off_49F6D0 + 36);\n            v188 = v186;\n            v189 = v187 + *v186;\n            v190 = 0LL;\n            do\n            {\n              v1192 = v190;\n              v191 = v190 + v1207;\n              v192 = (signed int)v1200 + (signed int)v190 + (signed int)v1207;\n              v193 = 0LL;\n              v194 = v1183;\n              do\n              {\n                v195 = *(_QWORD *)(v189 + v193);\n                if ( (unsigned __int16)v1186 == 1 )\n                {\n                  *(_WORD *)(v195 + 2 * v192) = -1;\n                  v196 = *(_QWORD **)(v185 + 6488);\n                  *(_QWORD *)(*(_QWORD *)(v193 + v187 + *v196) + 8 * v192) = -1LL;\n                  v197 = *(_QWORD **)(v185 + 6504);\n                  v198 = *(_WORD **)(*(_QWORD *)(v193 + v187 + *v197) + 8 * v192);\n                  *v198 = 0;\n                  v199 = 0;\n                }\n                else\n                {\n                  *(_WORD *)(v195 + 2 * v192) = v1178;\n                  v196 = *(_QWORD **)(v185 + 6488);\n                  *(_QWORD *)(*(_QWORD *)(v193 + v187 + *v196) + 8 * v192) = *(_QWORD *)v1189;\n                  v200 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v194 + 71928) + v193) + 8 * v191)\n                                               + 8 * v1187)\n                                   + 16LL);\n                  v197 = *(_QWORD **)(v185 + 6504);\n                  v198 = *(_WORD **)(*(_QWORD *)(v193 + v187 + *v197) + 8 * v192);\n                  *v198 = *v200;\n                  v199 = v200[1];\n                }\n                v198[1] = v199;\n                if ( v1185 == 1 )\n                {\n                  v201 = *(_QWORD *)(v193 + v187 + v188[1]);\n                  if ( (_WORD)v1186 )\n                  {\n                    v202 = v1190;\n                    *(_WORD *)(v201 + 2 * v192) = v1190;\n                    *(_QWORD *)(*(_QWORD *)(v193 + v187 + v196[1]) + 8 * v192) = *(_QWORD *)v1193;\n                    if ( v202 >= 0 )\n                    {\n                      v203 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v194 + 71928) + v193)\n                                                                           + 8 * v191)\n                                                               + 8LL)\n                                                   + 8 * v1194)\n                                       + 16LL);\n                      v204 = *(_WORD **)(*(_QWORD *)(v193 + v187 + v197[1]) + 8 * v192);\n                      *v204 = *v203;\n                      v204[1] = v203[1];\n                    }\n                  }\n                  else\n                  {\n                    *(_WORD *)(v201 + 2 * v192) = -1;\n                    *(_QWORD *)(*(_QWORD *)(v193 + v187 + v196[1]) + 8 * v192) = -1LL;\n                    **(_DWORD **)(*(_QWORD *)(v193 + v187 + v197[1]) + 8 * v192) = 0;\n                  }\n                }\n                v193 += 8LL;\n              }\n              while ( v193 != 32 );\n              v190 = v1192 + 1;\n            }\n            while ( v1192 != 1 );\n          }\n          else\n          {\n            v222 = qword_4F9E30;\n            v1189 = *(_QWORD *)(qword_4F9E30 + 6480);\n            v1187 = *(unsigned __int64 *)v1189;\n            v223 = (signed __int16)v85;\n            v1193 = qword_4F9E30 + 264 * v1211 + 24 + 8LL * (signed __int16)v85;\n            v1192 = (signed __int16)v101;\n            v1194 = qword_4F9E30 + 264 * v1227 + 24 + 8LL * (signed __int16)v101;\n            v1200 = *((signed int *)off_49F6D0 + 37);\n            v224 = *((_DWORD *)off_49F6D0 + 36);\n            v225 = 0LL;\n            do\n            {\n              v226 = v225 + v1200;\n              v227 = 2LL;\n              v228 = v1197;\n              do\n              {\n                v229 = v224 + (signed int)v228;\n                v230 = *(_QWORD *)(v1187 + 8 * v229);\n                if ( (unsigned __int16)v1186 == 1 )\n                {\n                  *(_WORD *)(v230 + 2 * v226) = -1;\n                  v231 = *(_QWORD **)(v222 + 6488);\n                  *(_QWORD *)(*(_QWORD *)(*v231 + 8 * v229) + 8 * v226) = -1LL;\n                  v232 = *(_QWORD **)(v222 + 6504);\n                  v233 = *(_WORD **)(*(_QWORD *)(*v232 + 8 * v229) + 8 * v226);\n                  *v233 = 0;\n                  v234 = 0;\n                }\n                else\n                {\n                  *(_WORD *)(v230 + 2 * v226) = v223;\n                  v231 = *(_QWORD **)(v222 + 6488);\n                  *(_QWORD *)(*(_QWORD *)(*v231 + 8 * v229) + 8 * v226) = *(_QWORD *)v1193;\n                  v235 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1183 + 71928) + 8 * v228)\n                                                             + 8 * v225)\n                                               + 8 * v223)\n                                   + 8 * v1191);\n                  v232 = *(_QWORD **)(v222 + 6504);\n                  v233 = *(_WORD **)(*(_QWORD *)(*v232 + 8 * v229) + 8 * v226);\n                  *v233 = *v235;\n                  v234 = v235[1];\n                }\n                v233[1] = v234;\n                if ( v1185 == 1 )\n                {\n                  v236 = *(_QWORD *)(*(_QWORD *)(v1189 + 8) + 8 * v229);\n                  if ( (_WORD)v1186 )\n                  {\n                    v237 = v1190;\n                    *(_WORD *)(v236 + 2 * v226) = v1190;\n                    *(_QWORD *)(*(_QWORD *)(v231[1] + 8 * v229) + 8 * v226) = *(_QWORD *)v1194;\n                    if ( v237 >= 0 )\n                    {\n                      v238 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1183 + 71928)\n                                                                                       + 8 * v228)\n                                                                           + 8 * v225)\n                                                               + 8LL)\n                                                   + 8 * v1192)\n                                       + 8 * v1191);\n                      v239 = *(_WORD **)(*(_QWORD *)(v232[1] + 8 * v229) + 8 * v226);\n                      *v239 = *v238;\n                      v239[1] = v238[1];\n                    }\n                  }\n                  else\n                  {\n                    *(_WORD *)(v236 + 2 * v226) = -1;\n                    *(_QWORD *)(*(_QWORD *)(v231[1] + 8 * v229) + 8 * v226) = -1LL;\n                    **(_DWORD **)(*(_QWORD *)(v232[1] + 8 * v229) + 8 * v226) = 0;\n                  }\n                }\n                ++v228;\n                --v227;\n              }\n              while ( v227 );\n              ++v225;\n            }\n            while ( v225 != 4 );\n          }\n        }\nLABEL_272:\n        v76 = v1191;\n        if ( v1191 == 3 )\n        {\n          v71 = v1178;\n          v79 = v1195;\n          word_4F942C[*(_QWORD *)&v1195] = v1178;\n          word_4F9428[*(_QWORD *)&v79] = v1178;\n          v275 = v1186;\n          word_4F94AC[*(_QWORD *)&v79] = v1186;\n          word_4F94A8[*(_QWORD *)&v79] = v275;\n          v78 = v1190;\n          word_4F93AC[*(_QWORD *)&v79] = v1190;\n          word_4F93A8[*(_QWORD *)&v79] = v78;\n          if ( v76 < 2 )\n            goto LABEL_276;\n        }\n        else\n        {\n          v71 = v1178;\n          v78 = v1190;\n          v79 = v1195;\n          if ( v1191 == 2 )\n          {\n            word_4F9422[2 * *(_QWORD *)&v1195] = v1178;\n            word_4F9420[2 * *(_QWORD *)&v79] = v1178;\n            v80 = v1186;\n            word_4F94A2[2 * *(_QWORD *)&v79] = v1186;\n            word_4F94A0[2 * *(_QWORD *)&v79] = v80;\n            word_4F93A2[2 * *(_QWORD *)&v79] = v78;\n            word_4F93A0[2 * *(_QWORD *)&v79] = v78;\n          }\n          else\n          {\n            word_4F941E = v1178;\n            word_4F941C = v1178;\n            word_4F941A = v1178;\n            word_4F9418 = v1178;\n            word_4F949E = v1186;\n            word_4F949C = v1186;\n            word_4F949A = v1186;\n            word_4F9498 = v1186;\n            word_4F939E = v1190;\n            word_4F939C = v1190;\n            word_4F939A = v1190;\n            word_4F9398 = v1190;\n            if ( v1191 < 2 )\n              goto LABEL_276;\n          }\n        }\n        if ( v79 == 0.0 )\n        {\n          sub_467C60(0, v76, (unsigned __int16)v1186, (signed __int16)v71, (signed __int16)v78);\n          v79 = v1195;\n          v71 = v1178;\n          v62 = (__m128i)v1188;\n        }\nLABEL_276:\n        v77 = *(_QWORD *)&v79 + 1LL;\n        v1197 += 2LL;\n      }\n      while ( v77 < v1226 );\n      v276 = dest;\n      v74 = v1184;\n      if ( !*((_DWORD *)dest + 616) )\n      {\n        v1184[12] = 0;\n        if ( v276[805] )\n        {\n          sub_460460(v76);\n          v277 = sub_42EF70(0xFFFFFFFF, &v1181);\n          v71 = v1178;\n          v62 = (__m128i)v1188;\n          v74 = v1184;\n          v1184[12] = v277;\n        }\n      }\n      v75 = v1222;\n      v30 = v1185;\n      v66 = v1182;\n      if ( v1181 < v1222 )\n      {\n        dword_4FA0A8 = v1191;\n        v1237 = v74[12];\n        v75 = v1181;\n      }\nLABEL_282:\n      v76 = v1191 + 1;\n    }\n    while ( v1191 != 3 );\n    if ( !v1250 )\n      goto LABEL_812;\n    v1222 = v75;\n    v1179 = v71;\n    dword_4FA0CC = 0x7FFFFFFF;\n    v278 = v74;\n    sub_474EE0((__int64)qword_4A00F8);\n    v278[11] = -1;\n    if ( !*((_DWORD *)dest + 805) )\n    {\n      v69 = (__m128)v1188;\n      goto LABEL_543;\n    }\n    dword_4FA0C8 = 0;\n    dword_4FA0BC = 0;\n    dword_4FA0B8 = 0;\n    v279 = 0LL;\n    v280 = 0LL;\n    v1213 = 0LL;\n    v1204 = 0;\n    v69 = (__m128)v1188;\n    while ( 2 )\n    {\n      v281 = 4 * (_DWORD)v279 & 0xFFFFFFF8;\n      v1233 = v279;\n      v282 = v279 & 1;\n      v1229 = v281 + (v282 << 7);\n      v283 = (v282 << 9) + 4 * v281;\n      v1217 = (_DWORD *)(32 * v281);\n      v1216 = 4 * (_DWORD)v280 & 0xFFFFFFF8;\n      v1214 = 8 * v282;\n      LODWORD(v281) = v280 & 1;\n      v1184[12] = 1;\n      v284 = v280 & 2;\n      LODWORD(v1228) = ~(51 << ((4 * v280 & 0xF8) + 2 * v281));\n      v285 = (unsigned int)(8 * v281 + 8);\n      v1197 = 2 * (_BYTE)v280 & 2;\n      LODWORD(v1207) = v1197 + 1;\n      v1200 = v284;\n      LODWORD(v1226) = v284 + 1;\n      v1186 = 4 * (_DWORD)v280 & 0xFFFFFFF8 | 7;\n      v1201 = 0x7FFFFFFFLL;\n      v286 = v1261;\n      v287 = (__m128)_mm_loadl_epi64((const __m128i *)&qword_489AA0);\n      v1195 = *(double *)v287.m128_u64;\n      v1183 = v280;\n      while ( 2 )\n      {\n        v292 = dword_491A60[v286];\n        if ( !v286 || (v1187 = v292, !*(&v1246 + v292)) )\n        {\n          if ( v286 || !*((_DWORD *)qword_4F9DC0 + 289) )\n            goto LABEL_455;\n          v1208 = 0LL;\n          v16 = *((_DWORD *)dest + 616) == 0;\n          v1192 = 0LL;\n          if ( !v16 )\n          {\nLABEL_290:\n            v289 = *((signed int *)off_49F6D0 + 36) + (signed __int64)(signed int)v1197;\n            v290 = *((signed int *)off_49F6D0 + 37) + (signed __int64)(signed int)v1200;\n            v1179 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E08 + 8 * v289) + 2 * v290);\n            LODWORD(v1190) = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)qword_4F9E08 + 1) + 8 * v289) + 2 * v290);\n            v291 = *(_WORD *)(*((_QWORD *)qword_4F9E00 + v289) + 2 * v290);\n            goto LABEL_370;\n          }\n          v1223 = 0;\n          v288 = sub_450810(v280, &v1223);\n          v307 = 0x7FFFFFFF;\n          v308 = 0x7FFFFFFF;\n          if ( (_DWORD)v1213 != 0x7FFFFFFF && v288 != 0x7FFFFFFF )\n          {\n            v308 = v1223 + v1203;\n            v307 = v288 + v1213;\n          }\n          v309 = *((_DWORD *)dest + 805);\n          if ( v309 == 2 )\n          {\n            v288 = v1201 + 1;\n          }\n          else if ( v309 == 1 && (v1223 < v288 || !(_DWORD)v1248 || !HIDWORD(v1248) || !v1249) )\n          {\n            v1181 = v1223;\n            goto LABEL_289;\n          }\n          v1181 = v288;\nLABEL_289:\n          ++v1231;\n          v1213 = v307;\n          v1203 = v308;\n          goto LABEL_290;\n        }\n        v1192 = v286;\n        v1208 = 0LL;\n        LODWORD(v1189) = v292;\n        sub_450D90(v292, v280, *(double *)v69.m128_u64, v287, v62);\n        LODWORD(v1193) = *((_DWORD *)qword_4F9BE0 + v1211);\n        v293 = v1193;\n        if ( (signed int)v1193 <= 0 )\n        {\n          v299 = 0x7FFFFFFF;\n          v296 = v1179;\n          v297 = v1183;\n        }\n        else\n        {\n          v294 = (_QWORD **)qword_4F9F10;\n          v1194 = (__int64)qword_4F9F50;\n          v1191 = (unsigned __int64)dest;\n          v295 = v1199;\n          v296 = v1179;\n          v297 = v1183;\n          if ( *((_DWORD *)dest + 616) )\n          {\n            v298 = 0;\n            if ( (signed int)v1193 >= 2 )\n              v298 = *(_DWORD *)v1194;\n            v295 = v1182 * v298 >> 16;\n          }\n          v299 = *(_DWORD *)(***((_QWORD ***)qword_4F9F10 + v1187) + 4 * v1183) + v295;\n          if ( v299 != 0x7FFFFFFF )\n            LOWORD(v296) = 0;\n          if ( (signed int)v1193 >= 2 )\n          {\n            v300 = 1;\n            do\n            {\n              if ( (unsigned __int8)v1206 | ((_WORD)v300 == 0)\n                || (v301 = sub_45B870(v297, 0, v300, (unsigned int)v1189), v293 = v1193, v297 = v1183, v301) )\n              {\n                if ( *(_DWORD *)(v1191 + 2464) )\n                {\n                  v302 = v1182 * *(_DWORD *)(v1194 + 4LL * (signed __int16)v300) >> 16;\n                }\n                else\n                {\n                  v303 = v300;\n                  if ( v300 >= 2 )\n                    v303 = 1;\n                  v302 = (signed int)((double)v303 * v1218);\n                }\n                v304 = *(_DWORD *)(*(_QWORD *)(*v294[v1187] + 8LL * (signed __int16)v300) + 4 * v297) + v302;\n                v306 = __OFSUB__(v304, v299);\n                v305 = v304 - v299 < 0;\n                if ( v304 <= v299 )\n                  v299 = v304;\n                if ( v305 ^ v306 )\n                  LOWORD(v296) = v300;\n              }\n              v300 = (signed __int16)(v300 + 1);\n            }\n            while ( v293 > v300 );\n          }\n        }\n        v310 = *((_DWORD *)off_49F6D0 + 36);\n        v311 = *((_DWORD *)off_49F6D0 + 37);\n        v312 = qword_4F9E30 + 264 * v1211;\n        v313 = **(_QWORD **)(qword_4F9E30 + 6480);\n        v1179 = v296;\n        v314 = (signed __int16)v296;\n        v315 = **(_QWORD **)(qword_4F9E30 + 6488);\n        v316 = (signed int)v1197 + v310;\n        v317 = (signed int)v1200 + v311;\n        v318 = *(_QWORD *)(v313 + 8 * v316);\n        *(_WORD *)(v318 + 2 * v317) = v314;\n        v319 = *(_QWORD *)(v315 + 8 * v316);\n        *(_QWORD *)(v319 + 8 * v317) = *(_QWORD *)(v312 + 8 * v314 + 24);\n        v320 = (signed int)v1207 + v310;\n        v321 = *(_QWORD *)(v313 + 8 * v320);\n        *(_WORD *)(v321 + 2 * v317) = v314;\n        v322 = *(_QWORD *)(v315 + 8 * v320);\n        *(_QWORD *)(v322 + 8 * v317) = *(_QWORD *)(v312 + 8 * v314 + 24);\n        v323 = (signed int)v1226 + v311;\n        *(_WORD *)(v318 + 2 * v323) = v314;\n        *(_QWORD *)(v319 + 8 * v323) = *(_QWORD *)(v312 + 8 * v314 + 24);\n        *(_WORD *)(v321 + 2 * v323) = v314;\n        *(_QWORD *)(v322 + 8 * v323) = *(_QWORD *)(v312 + 8 * v314 + 24);\n        if ( v1185 == 1 )\n        {\n          v324 = *((_DWORD *)qword_4F9BE0 + v1227);\n          v325 = *((_DWORD *)dest + 616);\n          if ( v324 <= 0 )\n          {\n            v330 = 0x7FFFFFFF;\n            v328 = v1182;\n            if ( v325 )\n              goto LABEL_350;\n          }\n          else\n          {\n            v326 = *(_QWORD **)(*((_QWORD *)qword_4F9F10 + v1187) + 8LL);\n            v327 = v1199;\n            v328 = v1182;\n            if ( v325 )\n            {\n              v329 = 0;\n              if ( v324 >= 2 )\n                v329 = *(_DWORD *)qword_4F9F50;\n              v327 = v1182 * v329 >> 16;\n            }\n            v330 = *(_DWORD *)(*v326 + 4 * v297) + v327;\n            v331 = v1190;\n            if ( v330 != 0x7FFFFFFF )\n              LOWORD(v331) = 0;\n            LODWORD(v1190) = v331;\n            if ( v324 >= 2 )\n            {\n              v332 = 1;\n              do\n              {\n                if ( v325 )\n                {\n                  v333 = v1182 * *((_DWORD *)qword_4F9F50 + (signed __int16)v332) >> 16;\n                }\n                else\n                {\n                  v334 = v332;\n                  if ( v332 >= 2 )\n                    v334 = 1;\n                  v333 = (signed int)((double)v334 * v1218);\n                }\n                v335 = *(_DWORD *)(v326[(signed __int16)v332] + 4 * v297) + v333;\n                v337 = __OFSUB__(v335, v330);\n                v336 = v335 - v330 < 0;\n                if ( v335 <= v330 )\n                  v330 = v335;\n                v338 = v1190;\n                if ( v336 ^ v337 )\n                  LOWORD(v338) = v332;\n                LODWORD(v1190) = v338;\n                v332 = (signed __int16)(v332 + 1);\n              }\n              while ( v324 > v332 );\n            }\n            if ( v325 )\n            {\nLABEL_350:\n              v339 = 0;\n              v340 = 0;\n              if ( (signed int)v1193 >= 2 )\n                v340 = *((_DWORD *)qword_4F9F50 + v314);\n              v341 = v328 * v340 >> 16;\n              if ( v324 >= 2 )\n                v339 = *(_DWORD *)qword_4F9F50;\n              v342 = v341 + (v328 * v339 >> 16);\n              v343 = v1179;\n              goto LABEL_360;\n            }\n          }\n          v343 = v1179;\n          v344 = (signed __int16)v1179;\n          if ( (signed __int16)v1179 >= 2 )\n            v344 = 1;\n          v342 = (signed int)((double)v344 * v1218);\nLABEL_360:\n          v345 = v342 + (unsigned __int64)sub_44FAA0(v1189, v297, v343, 0, v328);\n          if ( v299 <= v330 && v299 <= v345 )\n          {\n            v1181 = v299;\n            LOWORD(v346) = -1;\n            v291 = 0;\n            goto LABEL_367;\n          }\n          if ( v330 > v299 || v330 > v345 )\n          {\n            v1181 = v345;\n            v291 = 2;\n            v346 = 0;\nLABEL_367:\n            v330 = v1179;\n          }\n          else\n          {\n            v1181 = v330;\n            v291 = 1;\n            LOWORD(v330) = -1;\n            v346 = v1190;\n          }\n          v347 = *(__int64 **)(qword_4F9E30 + 6480);\n          v348 = *((_DWORD *)off_49F6D0 + 36);\n          v349 = *((_DWORD *)off_49F6D0 + 37);\n          v350 = *v347;\n          v351 = v347[1];\n          v352 = (signed int)v1197 + v348;\n          v353 = (signed int)v1200 + v349;\n          v354 = *(_QWORD *)(v350 + 8 * v352);\n          *(_WORD *)(v354 + 2 * v353) = v330;\n          v355 = *(_QWORD *)(v351 + 8 * v352);\n          *(_WORD *)(v355 + 2 * v353) = v346;\n          v356 = (signed int)v1207 + v348;\n          v357 = *(_QWORD *)(v350 + 8 * v356);\n          *(_WORD *)(v357 + 2 * v353) = v330;\n          v358 = *(_QWORD *)(v351 + 8 * v356);\n          *(_WORD *)(v358 + 2 * v353) = v346;\n          v359 = (signed int)v1226 + v349;\n          *(_WORD *)(v354 + 2 * v359) = v330;\n          *(_WORD *)(v355 + 2 * v359) = v346;\n          v1179 = v330;\n          *(_WORD *)(v357 + 2 * v359) = v330;\n          LODWORD(v1190) = v346;\n          *(_WORD *)(v358 + 2 * v359) = v346;\n        }\n        else\n        {\n          v1181 = v299;\n          v291 = 0;\n        }\n        v292 = v1189;\nLABEL_370:\n        sub_474EE0((__int64)qword_4A0108);\n        if ( *((_DWORD *)dest + 616) )\n        {\n          v360 = v1196;\n          sub_45F4D0(&v1224, &v1208, v1183, v292, v291, v1179, (__m128)*(unsigned __int64 *)&v1196, v1190);\n          v1234 = v360;\n        }\n        else\n        {\n          v361 = v1181;\n          if ( v1181 != 0x7FFFFFFF )\n          {\n            v362 = 0;\n            if ( *((_DWORD *)qword_4F9BE0 + ((unsigned int)v1225 | (v291 > 0))) >= 2 )\n            {\n              v363 = qword_4F9F50;\n              v362 = v363[(signed int)sub_4323A0(v292, v291)];\n              v361 = v1181;\n            }\n            v1181 = v361 + (v1182 * v362 >> 16) - 1;\n          }\n        }\n        v364 = dest;\n        v365 = *((_DWORD *)dest + 616);\n        if ( v365 && v1195 > v1234 )\n        {\n          v366 = v1181;\n          goto LABEL_381;\n        }\n        if ( !v365 )\n        {\n          v366 = v1181;\n          if ( v1181 < (signed int)v1201 )\n          {\nLABEL_381:\n            v367 = v1183;\n            *((_DWORD *)&xmmword_4F9C60 + v1183) = v292;\n            *((_WORD *)&qword_4F9FD0 + v367) = v291;\n            word_4F9FC8[v367] = v1179;\n            word_4F9FC0[v367] = v1190;\n            v1205 = v1224;\n            if ( v364[616] )\n            {\n              dword_4FA0BC = v1208 | v1228 & dword_4FA0BC;\n              v368 = off_49F6D0;\n              v369 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v1183);\n              v370 = *((_QWORD *)qword_4A0130 + v1183);\n              v371 = *(_OWORD ***)v369;\n              v372 = *(_OWORD ***)v370;\n              v373 = **(_OWORD ***)v369;\n              v374 = **(_OWORD ***)v370;\n              if ( v374 >= (_OWORD *)((char *)v373 + 260) || v373 >= (_OWORD *)((char *)v374 + 260) )\n              {\n                *v374 = *v373;\n                v374[1] = v373[1];\n                v374[2] = v373[2];\n                v374[3] = v373[3];\n                v374[4] = v373[4];\n                v374[5] = v373[5];\n                v374[6] = v373[6];\n                v374[7] = v373[7];\n                v374[8] = v373[8];\n                v374[9] = v373[9];\n                v374[10] = v373[10];\n                v374[11] = v373[11];\n                v374[12] = v373[12];\n                v374[13] = v373[13];\n                v374[14] = v373[14];\n                v374[15] = v373[15];\n                v375 = 64LL;\n              }\n              else\n              {\n                v375 = 0LL;\n              }\n              v376 = v375 - 64;\n              v377 = -1LL;\n              v378 = v375;\n              do\n              {\n                *((_DWORD *)v374 + v378) = *((_DWORD *)v373 + v378);\n                v379 = v376;\n                ++v378;\n                ++v376;\n                ++v377;\n              }\n              while ( v377 );\n              if ( v375 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v374 + v379 + 65) = *((_DWORD *)v373 + v379 + 65);\n                  *((_DWORD *)v374 + v379 + 66) = *((_DWORD *)v373 + v379 + 66);\n                  *((_DWORD *)v374 + v379 + 67) = *((_DWORD *)v373 + v379 + 67);\n                  *((_DWORD *)v374 + v379 + 68) = *((_DWORD *)v373 + v379 + 68);\n                  v379 += 4LL;\n                }\n                while ( v379 );\n              }\n              v380 = v371[1];\n              v381 = v372[1];\n              if ( v381 >= (_OWORD *)((char *)v380 + 260) || v380 >= (_OWORD *)((char *)v381 + 260) )\n              {\n                *v381 = *v380;\n                v381[1] = v380[1];\n                v381[2] = v380[2];\n                v381[3] = v380[3];\n                v381[4] = v380[4];\n                v381[5] = v380[5];\n                v381[6] = v380[6];\n                v381[7] = v380[7];\n                v381[8] = v380[8];\n                v381[9] = v380[9];\n                v381[10] = v380[10];\n                v381[11] = v380[11];\n                v381[12] = v380[12];\n                v381[13] = v380[13];\n                v381[14] = v380[14];\n                v381[15] = v380[15];\n                v382 = 64LL;\n              }\n              else\n              {\n                v382 = 0LL;\n              }\n              v383 = v382 - 64;\n              v384 = -1LL;\n              v385 = v382;\n              do\n              {\n                *((_DWORD *)v381 + v385) = *((_DWORD *)v380 + v385);\n                v386 = v383;\n                ++v385;\n                ++v383;\n                ++v384;\n              }\n              while ( v384 );\n              if ( v382 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v381 + v386 + 65) = *((_DWORD *)v380 + v386 + 65);\n                  *((_DWORD *)v381 + v386 + 66) = *((_DWORD *)v380 + v386 + 66);\n                  *((_DWORD *)v381 + v386 + 67) = *((_DWORD *)v380 + v386 + 67);\n                  *((_DWORD *)v381 + v386 + 68) = *((_DWORD *)v380 + v386 + 68);\n                  v386 += 4LL;\n                }\n                while ( v386 );\n              }\n              v387 = *(_QWORD *)(v369 + 8);\n              v388 = *(_QWORD *)(v370 + 8);\n              v389 = *(_OWORD **)v387;\n              v390 = *(_OWORD **)v388;\n              if ( *(_QWORD *)v388 >= (unsigned __int64)(*(_QWORD *)v387 + 260LL)\n                || v389 >= (_OWORD *)((char *)v390 + 260) )\n              {\n                *v390 = *v389;\n                v390[1] = v389[1];\n                v390[2] = v389[2];\n                v390[3] = v389[3];\n                v390[4] = v389[4];\n                v390[5] = v389[5];\n                v390[6] = v389[6];\n                v390[7] = v389[7];\n                v390[8] = v389[8];\n                v390[9] = v389[9];\n                v390[10] = v389[10];\n                v390[11] = v389[11];\n                v390[12] = v389[12];\n                v390[13] = v389[13];\n                v390[14] = v389[14];\n                v390[15] = v389[15];\n                v391 = 64LL;\n              }\n              else\n              {\n                v391 = 0LL;\n              }\n              v392 = v391 - 64;\n              v393 = -1LL;\n              v394 = v391;\n              do\n              {\n                *((_DWORD *)v390 + v394) = *((_DWORD *)v389 + v394);\n                v395 = v392;\n                ++v394;\n                ++v392;\n                ++v393;\n              }\n              while ( v393 );\n              if ( v391 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v390 + v395 + 65) = *((_DWORD *)v389 + v395 + 65);\n                  *((_DWORD *)v390 + v395 + 66) = *((_DWORD *)v389 + v395 + 66);\n                  *((_DWORD *)v390 + v395 + 67) = *((_DWORD *)v389 + v395 + 67);\n                  *((_DWORD *)v390 + v395 + 68) = *((_DWORD *)v389 + v395 + 68);\n                  v395 += 4LL;\n                }\n                while ( v395 );\n              }\n              v396 = *(_OWORD **)(v387 + 8);\n              v397 = *(_OWORD **)(v388 + 8);\n              if ( v397 >= (_OWORD *)((char *)v396 + 260) || v396 >= (_OWORD *)((char *)v397 + 260) )\n              {\n                *v397 = *v396;\n                v397[1] = v396[1];\n                v397[2] = v396[2];\n                v397[3] = v396[3];\n                v397[4] = v396[4];\n                v397[5] = v396[5];\n                v397[6] = v396[6];\n                v397[7] = v396[7];\n                v397[8] = v396[8];\n                v397[9] = v396[9];\n                v397[10] = v396[10];\n                v397[11] = v396[11];\n                v397[12] = v396[12];\n                v397[13] = v396[13];\n                v397[14] = v396[14];\n                v397[15] = v396[15];\n                v398 = 64LL;\n              }\n              else\n              {\n                v398 = 0LL;\n              }\n              v399 = v398 - 64;\n              v400 = -1LL;\n              v401 = v398;\n              do\n              {\n                *((_DWORD *)v397 + v401) = *((_DWORD *)v396 + v401);\n                v402 = v399;\n                ++v401;\n                ++v399;\n                ++v400;\n              }\n              while ( v400 );\n              if ( v398 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v397 + v402 + 65) = *((_DWORD *)v396 + v402 + 65);\n                  *((_DWORD *)v397 + v402 + 66) = *((_DWORD *)v396 + v402 + 66);\n                  *((_DWORD *)v397 + v402 + 67) = *((_DWORD *)v396 + v402 + 67);\n                  *((_DWORD *)v397 + v402 + 68) = *((_DWORD *)v396 + v402 + 68);\n                  v402 += 4LL;\n                }\n                while ( v402 );\n              }\n              v403 = *(_QWORD *)(v369 + 16);\n              v404 = *(_QWORD *)(v370 + 16);\n              v405 = *(_OWORD **)v403;\n              v406 = *(_OWORD **)v404;\n              if ( *(_QWORD *)v404 >= (unsigned __int64)(*(_QWORD *)v403 + 260LL)\n                || v405 >= (_OWORD *)((char *)v406 + 260) )\n              {\n                *v406 = *v405;\n                v406[1] = v405[1];\n                v406[2] = v405[2];\n                v406[3] = v405[3];\n                v406[4] = v405[4];\n                v406[5] = v405[5];\n                v406[6] = v405[6];\n                v406[7] = v405[7];\n                v406[8] = v405[8];\n                v406[9] = v405[9];\n                v406[10] = v405[10];\n                v406[11] = v405[11];\n                v406[12] = v405[12];\n                v406[13] = v405[13];\n                v406[14] = v405[14];\n                v406[15] = v405[15];\n                v407 = 64LL;\n              }\n              else\n              {\n                v407 = 0LL;\n              }\n              v408 = v407 - 64;\n              v409 = -1LL;\n              v410 = v407;\n              do\n              {\n                *((_DWORD *)v406 + v410) = *((_DWORD *)v405 + v410);\n                v411 = v408;\n                ++v410;\n                ++v408;\n                ++v409;\n              }\n              while ( v409 );\n              if ( v407 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v406 + v411 + 65) = *((_DWORD *)v405 + v411 + 65);\n                  *((_DWORD *)v406 + v411 + 66) = *((_DWORD *)v405 + v411 + 66);\n                  *((_DWORD *)v406 + v411 + 67) = *((_DWORD *)v405 + v411 + 67);\n                  *((_DWORD *)v406 + v411 + 68) = *((_DWORD *)v405 + v411 + 68);\n                  v411 += 4LL;\n                }\n                while ( v411 );\n              }\n              v412 = *(_OWORD **)(v403 + 8);\n              v413 = *(_OWORD **)(v404 + 8);\n              if ( v413 >= (_OWORD *)((char *)v412 + 260) || v412 >= (_OWORD *)((char *)v413 + 260) )\n              {\n                *v413 = *v412;\n                v413[1] = v412[1];\n                v413[2] = v412[2];\n                v413[3] = v412[3];\n                v413[4] = v412[4];\n                v413[5] = v412[5];\n                v413[6] = v412[6];\n                v413[7] = v412[7];\n                v413[8] = v412[8];\n                v413[9] = v412[9];\n                v413[10] = v412[10];\n                v413[11] = v412[11];\n                v413[12] = v412[12];\n                v413[13] = v412[13];\n                v413[14] = v412[14];\n                v413[15] = v412[15];\n                v414 = 64LL;\n              }\n              else\n              {\n                v414 = 0LL;\n              }\n              v415 = v1214;\n              v416 = v414 - 64;\n              v417 = -1LL;\n              v418 = v414;\n              do\n              {\n                *((_DWORD *)v413 + v418) = *((_DWORD *)v412 + v418);\n                v419 = v416;\n                ++v418;\n                ++v416;\n                ++v417;\n              }\n              while ( v417 );\n              if ( v414 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v413 + v419 + 65) = *((_DWORD *)v412 + v419 + 65);\n                  *((_DWORD *)v413 + v419 + 66) = *((_DWORD *)v412 + v419 + 66);\n                  *((_DWORD *)v413 + v419 + 67) = *((_DWORD *)v412 + v419 + 67);\n                  *((_DWORD *)v413 + v419 + 68) = *((_DWORD *)v412 + v419 + 68);\n                  v419 += 4LL;\n                }\n                while ( v419 );\n              }\n              v420 = *(_QWORD *)(v369 + 24);\n              v421 = *(_QWORD *)(v370 + 24);\n              v422 = *(_OWORD **)v420;\n              v423 = *(_OWORD **)v421;\n              if ( *(_QWORD *)v421 >= (unsigned __int64)(*(_QWORD *)v420 + 260LL)\n                || v422 >= (_OWORD *)((char *)v423 + 260) )\n              {\n                *v423 = *v422;\n                v423[1] = v422[1];\n                v423[2] = v422[2];\n                v423[3] = v422[3];\n                v423[4] = v422[4];\n                v423[5] = v422[5];\n                v423[6] = v422[6];\n                v423[7] = v422[7];\n                v423[8] = v422[8];\n                v423[9] = v422[9];\n                v423[10] = v422[10];\n                v423[11] = v422[11];\n                v423[12] = v422[12];\n                v423[13] = v422[13];\n                v423[14] = v422[14];\n                v423[15] = v422[15];\n                v424 = 64LL;\n              }\n              else\n              {\n                v424 = 0LL;\n              }\n              v425 = v424 - 64;\n              v426 = -1LL;\n              v427 = v424;\n              do\n              {\n                *((_DWORD *)v423 + v427) = *((_DWORD *)v422 + v427);\n                v428 = v425;\n                ++v427;\n                ++v425;\n                ++v426;\n              }\n              while ( v426 );\n              if ( v424 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v423 + v428 + 65) = *((_DWORD *)v422 + v428 + 65);\n                  *((_DWORD *)v423 + v428 + 66) = *((_DWORD *)v422 + v428 + 66);\n                  *((_DWORD *)v423 + v428 + 67) = *((_DWORD *)v422 + v428 + 67);\n                  *((_DWORD *)v423 + v428 + 68) = *((_DWORD *)v422 + v428 + 68);\n                  v428 += 4LL;\n                }\n                while ( v428 );\n              }\n              v429 = *(_OWORD **)(v420 + 8);\n              v430 = *(_OWORD **)(v421 + 8);\n              if ( v430 >= (_OWORD *)((char *)v429 + 260) || v429 >= (_OWORD *)((char *)v430 + 260) )\n              {\n                *v430 = *v429;\n                v430[1] = v429[1];\n                v430[2] = v429[2];\n                v430[3] = v429[3];\n                v430[4] = v429[4];\n                v430[5] = v429[5];\n                v430[6] = v429[6];\n                v430[7] = v429[7];\n                v430[8] = v429[8];\n                v430[9] = v429[9];\n                v430[10] = v429[10];\n                v430[11] = v429[11];\n                v430[12] = v429[12];\n                v430[13] = v429[13];\n                v430[14] = v429[14];\n                v430[15] = v429[15];\n                v431 = 64LL;\n              }\n              else\n              {\n                v431 = 0LL;\n              }\n              v432 = v431 - 64;\n              v433 = -1LL;\n              v434 = v431;\n              do\n              {\n                *((_DWORD *)v430 + v434) = *((_DWORD *)v429 + v434);\n                v435 = v432;\n                ++v434;\n                ++v432;\n                ++v433;\n              }\n              while ( v433 );\n              if ( v431 != 64 )\n              {\n                do\n                {\n                  *((_DWORD *)v430 + v435 + 65) = *((_DWORD *)v429 + v435 + 65);\n                  *((_DWORD *)v430 + v435 + 66) = *((_DWORD *)v429 + v435 + 66);\n                  *((_DWORD *)v430 + v435 + 67) = *((_DWORD *)v429 + v435 + 67);\n                  *((_DWORD *)v430 + v435 + 68) = *((_DWORD *)v429 + v435 + 68);\n                  v435 += 4LL;\n                }\n                while ( v435 );\n              }\n              v436 = qword_4F9E30;\n              v437 = (__int64)v368 + 2 * v1229 + 12600;\n              v438 = 0LL;\n              v439 = v1217;\n              v440 = v1216;\n              do\n              {\n                v441 = v438;\n                v442 = v415;\n                do\n                {\n                  if ( v368[18181] )\n                  {\n                    *(int *)((char *)dword_4F2ED0 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4F26D0\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                    *(int *)((char *)dword_4F4ED0 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4F46D0\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                    *(int *)((char *)dword_4F3ED0 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4F36D0\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                    *(int *)((char *)dword_4ED770 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4EBF70\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                    *(int *)((char *)dword_4EDB70 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4EC370\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                    *(int *)((char *)dword_4EDF70 + 2 * v441 + v283) = *(_DWORD *)((char *)xmmword_4EC770\n                                                                                 + 2 * v441\n                                                                                 + v283);\n                  }\n                  else\n                  {\n                    *(__int16 *)((char *)word_4F7150 + (_QWORD)v439 + 2 * v442) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v436 + 6424) + 8 * ((signed int)v368[39] + (signed __int64)(signed int)v440))\n                                                                                           + 2LL\n                                                                                           * ((signed int)v442 + v368[38]));\n                    *(__int16 *)((char *)word_4F6750 + (_QWORD)v439 + 2 * v442) = *(_WORD *)(v437 + v441);\n                  }\n                  ++v442;\n                  v441 += 32LL;\n                }\n                while ( v442 < v285 );\n                v439 += 8;\n                v438 += 2LL;\n                v944 = v440++ < v1186;\n              }\n              while ( v944 );\n            }\n            sub_474EE0((__int64)qword_4A0100);\n            v1195 = v1234;\n            v1201 = v366;\n          }\n        }\n        sub_4750F0((__int64)qword_4A0108);\n        v69 = (__m128)v1188;\n        v66 = v1182;\n        v280 = v1183;\n        v286 = v1192;\nLABEL_455:\n        if ( ++v286 != 2 )\n          continue;\n        break;\n      }\n      if ( *((_DWORD *)dest + 616) )\n      {\n        v30 = v1185;\n      }\n      else\n      {\n        v443 = *((_DWORD *)&xmmword_4F9C60 + v280);\n        v444 = *((unsigned __int16 *)&qword_4F9FD0 + v280);\n        v1208 = 0LL;\n        if ( (v444 | 2) == 2 )\n          v445 = v443;\n        else\n          v445 = 0;\n        if ( (unsigned __int16)(v444 - 1) >= 2u )\n          v443 = 0;\n        v446 = v280;\n        v447 = sub_42CF70(\n                 &v1232,\n                 &v1208,\n                 (unsigned int)v280,\n                 v444,\n                 v445,\n                 v443,\n                 (__m128i)v69,\n                 word_4F9FC8[v280],\n                 word_4F9FC0[v280]);\n        dword_4FA0BC = v1208 | dword_4FA0BC & v1228;\n        v1205 = v447;\n        v448 = off_49F6D0;\n        v449 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v446);\n        v450 = *((_QWORD *)qword_4A0130 + v446);\n        v451 = *(_OWORD ***)v449;\n        v452 = *(_OWORD ***)v450;\n        v453 = **(_OWORD ***)v449;\n        v454 = **(_OWORD ***)v450;\n        if ( v454 >= (_OWORD *)((char *)v453 + 260) || v453 >= (_OWORD *)((char *)v454 + 260) )\n        {\n          *v454 = *v453;\n          v454[1] = v453[1];\n          v454[2] = v453[2];\n          v454[3] = v453[3];\n          v454[4] = v453[4];\n          v454[5] = v453[5];\n          v454[6] = v453[6];\n          v454[7] = v453[7];\n          v454[8] = v453[8];\n          v454[9] = v453[9];\n          v454[10] = v453[10];\n          v454[11] = v453[11];\n          v454[12] = v453[12];\n          v454[13] = v453[13];\n          v454[14] = v453[14];\n          v454[15] = v453[15];\n          v455 = 64LL;\n        }\n        else\n        {\n          v455 = 0LL;\n        }\n        v1201 = (unsigned int)(v1204 + v1201);\n        v456 = v455 - 64;\n        v457 = -1LL;\n        v458 = v455;\n        do\n        {\n          *((_DWORD *)v454 + v458) = *((_DWORD *)v453 + v458);\n          v459 = v456;\n          ++v458;\n          ++v456;\n          ++v457;\n        }\n        while ( v457 );\n        if ( v455 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v454 + v459 + 65) = *((_DWORD *)v453 + v459 + 65);\n            *((_DWORD *)v454 + v459 + 66) = *((_DWORD *)v453 + v459 + 66);\n            *((_DWORD *)v454 + v459 + 67) = *((_DWORD *)v453 + v459 + 67);\n            *((_DWORD *)v454 + v459 + 68) = *((_DWORD *)v453 + v459 + 68);\n            v459 += 4LL;\n          }\n          while ( v459 );\n        }\n        v460 = v451[1];\n        v461 = v452[1];\n        if ( v461 >= (_OWORD *)((char *)v460 + 260) || v460 >= (_OWORD *)((char *)v461 + 260) )\n        {\n          *v461 = *v460;\n          v461[1] = v460[1];\n          v461[2] = v460[2];\n          v461[3] = v460[3];\n          v461[4] = v460[4];\n          v461[5] = v460[5];\n          v461[6] = v460[6];\n          v461[7] = v460[7];\n          v461[8] = v460[8];\n          v461[9] = v460[9];\n          v461[10] = v460[10];\n          v461[11] = v460[11];\n          v461[12] = v460[12];\n          v461[13] = v460[13];\n          v461[14] = v460[14];\n          v461[15] = v460[15];\n          v462 = 64LL;\n        }\n        else\n        {\n          v462 = 0LL;\n        }\n        v463 = v462 - 64;\n        v464 = -1LL;\n        v465 = v462;\n        do\n        {\n          *((_DWORD *)v461 + v465) = *((_DWORD *)v460 + v465);\n          v466 = v463;\n          ++v465;\n          ++v463;\n          ++v464;\n        }\n        while ( v464 );\n        if ( v462 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v461 + v466 + 65) = *((_DWORD *)v460 + v466 + 65);\n            *((_DWORD *)v461 + v466 + 66) = *((_DWORD *)v460 + v466 + 66);\n            *((_DWORD *)v461 + v466 + 67) = *((_DWORD *)v460 + v466 + 67);\n            *((_DWORD *)v461 + v466 + 68) = *((_DWORD *)v460 + v466 + 68);\n            v466 += 4LL;\n          }\n          while ( v466 );\n        }\n        v467 = *(_QWORD *)(v449 + 8);\n        v468 = *(_QWORD *)(v450 + 8);\n        v469 = *(_OWORD **)v467;\n        v470 = *(_OWORD **)v468;\n        if ( *(_QWORD *)v468 >= (unsigned __int64)(*(_QWORD *)v467 + 260LL) || v469 >= (_OWORD *)((char *)v470 + 260) )\n        {\n          *v470 = *v469;\n          v470[1] = v469[1];\n          v470[2] = v469[2];\n          v470[3] = v469[3];\n          v470[4] = v469[4];\n          v470[5] = v469[5];\n          v470[6] = v469[6];\n          v470[7] = v469[7];\n          v470[8] = v469[8];\n          v470[9] = v469[9];\n          v470[10] = v469[10];\n          v470[11] = v469[11];\n          v470[12] = v469[12];\n          v470[13] = v469[13];\n          v470[14] = v469[14];\n          v470[15] = v469[15];\n          v471 = 64LL;\n        }\n        else\n        {\n          v471 = 0LL;\n        }\n        v472 = v471 - 64;\n        v473 = -1LL;\n        v474 = v471;\n        do\n        {\n          *((_DWORD *)v470 + v474) = *((_DWORD *)v469 + v474);\n          v475 = v472;\n          ++v474;\n          ++v472;\n          ++v473;\n        }\n        while ( v473 );\n        if ( v471 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v470 + v475 + 65) = *((_DWORD *)v469 + v475 + 65);\n            *((_DWORD *)v470 + v475 + 66) = *((_DWORD *)v469 + v475 + 66);\n            *((_DWORD *)v470 + v475 + 67) = *((_DWORD *)v469 + v475 + 67);\n            *((_DWORD *)v470 + v475 + 68) = *((_DWORD *)v469 + v475 + 68);\n            v475 += 4LL;\n          }\n          while ( v475 );\n        }\n        v476 = *(_OWORD **)(v467 + 8);\n        v477 = *(_OWORD **)(v468 + 8);\n        if ( v477 >= (_OWORD *)((char *)v476 + 260) || v476 >= (_OWORD *)((char *)v477 + 260) )\n        {\n          *v477 = *v476;\n          v477[1] = v476[1];\n          v477[2] = v476[2];\n          v477[3] = v476[3];\n          v477[4] = v476[4];\n          v477[5] = v476[5];\n          v477[6] = v476[6];\n          v477[7] = v476[7];\n          v477[8] = v476[8];\n          v477[9] = v476[9];\n          v477[10] = v476[10];\n          v477[11] = v476[11];\n          v477[12] = v476[12];\n          v477[13] = v476[13];\n          v477[14] = v476[14];\n          v477[15] = v476[15];\n          v478 = 64LL;\n        }\n        else\n        {\n          v478 = 0LL;\n        }\n        v479 = v478 - 64;\n        v480 = -1LL;\n        v481 = v478;\n        do\n        {\n          *((_DWORD *)v477 + v481) = *((_DWORD *)v476 + v481);\n          v482 = v479;\n          ++v481;\n          ++v479;\n          ++v480;\n        }\n        while ( v480 );\n        if ( v478 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v477 + v482 + 65) = *((_DWORD *)v476 + v482 + 65);\n            *((_DWORD *)v477 + v482 + 66) = *((_DWORD *)v476 + v482 + 66);\n            *((_DWORD *)v477 + v482 + 67) = *((_DWORD *)v476 + v482 + 67);\n            *((_DWORD *)v477 + v482 + 68) = *((_DWORD *)v476 + v482 + 68);\n            v482 += 4LL;\n          }\n          while ( v482 );\n        }\n        v483 = *(_QWORD *)(v449 + 16);\n        v484 = *(_QWORD *)(v450 + 16);\n        v485 = *(_OWORD **)v483;\n        v486 = *(_OWORD **)v484;\n        if ( *(_QWORD *)v484 >= (unsigned __int64)(*(_QWORD *)v483 + 260LL) || v485 >= (_OWORD *)((char *)v486 + 260) )\n        {\n          *v486 = *v485;\n          v486[1] = v485[1];\n          v486[2] = v485[2];\n          v486[3] = v485[3];\n          v486[4] = v485[4];\n          v486[5] = v485[5];\n          v486[6] = v485[6];\n          v486[7] = v485[7];\n          v486[8] = v485[8];\n          v486[9] = v485[9];\n          v486[10] = v485[10];\n          v486[11] = v485[11];\n          v486[12] = v485[12];\n          v486[13] = v485[13];\n          v486[14] = v485[14];\n          v486[15] = v485[15];\n          v487 = 64LL;\n        }\n        else\n        {\n          v487 = 0LL;\n        }\n        v488 = v487 - 64;\n        v489 = -1LL;\n        v490 = v487;\n        do\n        {\n          *((_DWORD *)v486 + v490) = *((_DWORD *)v485 + v490);\n          v491 = v488;\n          ++v490;\n          ++v488;\n          ++v489;\n        }\n        while ( v489 );\n        if ( v487 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v486 + v491 + 65) = *((_DWORD *)v485 + v491 + 65);\n            *((_DWORD *)v486 + v491 + 66) = *((_DWORD *)v485 + v491 + 66);\n            *((_DWORD *)v486 + v491 + 67) = *((_DWORD *)v485 + v491 + 67);\n            *((_DWORD *)v486 + v491 + 68) = *((_DWORD *)v485 + v491 + 68);\n            v491 += 4LL;\n          }\n          while ( v491 );\n        }\n        v492 = *(_OWORD **)(v483 + 8);\n        v493 = *(_OWORD **)(v484 + 8);\n        v494 = v1216;\n        if ( v493 >= (_OWORD *)((char *)v492 + 260) || v492 >= (_OWORD *)((char *)v493 + 260) )\n        {\n          *v493 = *v492;\n          v493[1] = v492[1];\n          v493[2] = v492[2];\n          v493[3] = v492[3];\n          v493[4] = v492[4];\n          v493[5] = v492[5];\n          v493[6] = v492[6];\n          v493[7] = v492[7];\n          v493[8] = v492[8];\n          v493[9] = v492[9];\n          v493[10] = v492[10];\n          v493[11] = v492[11];\n          v493[12] = v492[12];\n          v493[13] = v492[13];\n          v493[14] = v492[14];\n          v493[15] = v492[15];\n          v495 = 64LL;\n        }\n        else\n        {\n          v495 = 0LL;\n        }\n        v280 = v1183;\n        v496 = v495 - 64;\n        v497 = -1LL;\n        v498 = v495;\n        do\n        {\n          *((_DWORD *)v493 + v498) = *((_DWORD *)v492 + v498);\n          v499 = v496;\n          ++v498;\n          ++v496;\n          ++v497;\n        }\n        while ( v497 );\n        if ( v495 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v493 + v499 + 65) = *((_DWORD *)v492 + v499 + 65);\n            *((_DWORD *)v493 + v499 + 66) = *((_DWORD *)v492 + v499 + 66);\n            *((_DWORD *)v493 + v499 + 67) = *((_DWORD *)v492 + v499 + 67);\n            *((_DWORD *)v493 + v499 + 68) = *((_DWORD *)v492 + v499 + 68);\n            v499 += 4LL;\n          }\n          while ( v499 );\n        }\n        v500 = *(_QWORD *)(v449 + 24);\n        v501 = *(_QWORD *)(v450 + 24);\n        v502 = *(_OWORD **)v500;\n        v503 = *(_OWORD **)v501;\n        if ( *(_QWORD *)v501 >= (unsigned __int64)(*(_QWORD *)v500 + 260LL) || v502 >= (_OWORD *)((char *)v503 + 260) )\n        {\n          *v503 = *v502;\n          v503[1] = v502[1];\n          v503[2] = v502[2];\n          v503[3] = v502[3];\n          v503[4] = v502[4];\n          v503[5] = v502[5];\n          v503[6] = v502[6];\n          v503[7] = v502[7];\n          v503[8] = v502[8];\n          v503[9] = v502[9];\n          v503[10] = v502[10];\n          v503[11] = v502[11];\n          v503[12] = v502[12];\n          v503[13] = v502[13];\n          v503[14] = v502[14];\n          v503[15] = v502[15];\n          v504 = 64LL;\n        }\n        else\n        {\n          v504 = 0LL;\n        }\n        v505 = v504 - 64;\n        v506 = -1LL;\n        v507 = v504;\n        do\n        {\n          *((_DWORD *)v503 + v507) = *((_DWORD *)v502 + v507);\n          v508 = v505;\n          ++v507;\n          ++v505;\n          ++v506;\n        }\n        while ( v506 );\n        if ( v504 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v503 + v508 + 65) = *((_DWORD *)v502 + v508 + 65);\n            *((_DWORD *)v503 + v508 + 66) = *((_DWORD *)v502 + v508 + 66);\n            *((_DWORD *)v503 + v508 + 67) = *((_DWORD *)v502 + v508 + 67);\n            *((_DWORD *)v503 + v508 + 68) = *((_DWORD *)v502 + v508 + 68);\n            v508 += 4LL;\n          }\n          while ( v508 );\n        }\n        v509 = *(_OWORD **)(v500 + 8);\n        v510 = *(_OWORD **)(v501 + 8);\n        v511 = v1217;\n        if ( v510 >= (_OWORD *)((char *)v509 + 260) || v509 >= (_OWORD *)((char *)v510 + 260) )\n        {\n          *v510 = *v509;\n          v510[1] = v509[1];\n          v510[2] = v509[2];\n          v510[3] = v509[3];\n          v510[4] = v509[4];\n          v510[5] = v509[5];\n          v510[6] = v509[6];\n          v510[7] = v509[7];\n          v510[8] = v509[8];\n          v510[9] = v509[9];\n          v510[10] = v509[10];\n          v510[11] = v509[11];\n          v510[12] = v509[12];\n          v510[13] = v509[13];\n          v510[14] = v509[14];\n          v510[15] = v509[15];\n          v512 = 64LL;\n        }\n        else\n        {\n          v512 = 0LL;\n        }\n        v513 = v512 - 64;\n        v514 = -1LL;\n        v515 = v512;\n        do\n        {\n          *((_DWORD *)v510 + v515) = *((_DWORD *)v509 + v515);\n          v516 = v513;\n          ++v515;\n          ++v513;\n          ++v514;\n        }\n        while ( v514 );\n        if ( v512 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v510 + v516 + 65) = *((_DWORD *)v509 + v516 + 65);\n            *((_DWORD *)v510 + v516 + 66) = *((_DWORD *)v509 + v516 + 66);\n            *((_DWORD *)v510 + v516 + 67) = *((_DWORD *)v509 + v516 + 67);\n            *((_DWORD *)v510 + v516 + 68) = *((_DWORD *)v509 + v516 + 68);\n            v516 += 4LL;\n          }\n          while ( v516 );\n        }\n        v517 = qword_4F9E30;\n        v518 = (unsigned int)v494 | 7;\n        v519 = (__int64)v448 + 2 * v1229 + 12600;\n        v520 = 0LL;\n        do\n        {\n          v521 = v520;\n          v522 = v1214;\n          do\n          {\n            if ( v448[18181] )\n            {\n              *(int *)((char *)dword_4F2ED0 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4F26D0 + 2 * v521 + v283);\n              *(int *)((char *)dword_4F4ED0 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4F46D0 + 2 * v521 + v283);\n              *(int *)((char *)dword_4F3ED0 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4F36D0 + 2 * v521 + v283);\n              *(int *)((char *)dword_4ED770 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4EBF70 + 2 * v521 + v283);\n              *(int *)((char *)dword_4EDB70 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4EC370 + 2 * v521 + v283);\n              *(int *)((char *)dword_4EDF70 + 2 * v521 + v283) = *(_DWORD *)((char *)xmmword_4EC770 + 2 * v521 + v283);\n            }\n            else\n            {\n              *(__int16 *)((char *)word_4F7150 + (_QWORD)v511 + 2 * v522) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v517 + 6424)\n                                                                                                 + 8\n                                                                                                 * ((signed int)v448[39]\n                                                                                                  + (signed __int64)(signed int)v494))\n                                                                                     + 2LL\n                                                                                     * ((signed int)v522 + v448[38]));\n              *(__int16 *)((char *)word_4F6750 + (_QWORD)v511 + 2 * v522) = *(_WORD *)(v519 + v521);\n            }\n            ++v522;\n            v521 += 32LL;\n          }\n          while ( v522 < v285 );\n          v511 += 8;\n          v520 += 2LL;\n          v944 = v494++ < v518;\n        }\n        while ( v944 );\n        v1204 = v1201;\n        v30 = v1185;\n        v66 = v1182;\n      }\n      v523 = v1233;\n      if ( v1205 )\n      {\n        dword_4FA0B8 |= 1 << v280;\n        dword_4FA0C8 += v1205;\n      }\n      sub_4693D0(\n        0,\n        v280,\n        *((_DWORD *)&xmmword_4F9C60 + v280),\n        word_4F9FC8[v280],\n        word_4F9FC0[v280],\n        *((signed __int16 *)&qword_4F9FD0 + v280),\n        v1221);\n      sub_467C60(\n        v1183,\n        *((_DWORD *)&xmmword_4F9C60 + v1183),\n        *((signed __int16 *)&qword_4F9FD0 + v1183),\n        word_4F9FC8[v1183],\n        word_4F9FC0[v1183]);\n      v524 = v1183;\n      if ( v1183 <= 2 )\n      {\n        sub_4750F0((__int64)qword_4A0100);\n        v524 = v1183;\n      }\n      v280 = v524 + 1;\n      v279 = (unsigned int)(v523 + 1);\n      v69 = (__m128)v1188;\n      if ( v280 != 4 )\n        continue;\n      break;\n    }\n    v68 = (__m128)_mm_loadl_epi64((const __m128i *)&v1195);\n    v1230 = v68.m128_u64[0];\n    dword_4FA0B4 = dword_4FA0B8;\n    qword_4F9DF8 = dword_4FA0BC;\n    dword_4FA0C4 = dword_4FA0C8;\n    dword_4FA0CC = v1204;\n    v1184[12] = 0;\n    v525 = 0x7FFFFFFF;\n    if ( *((_DWORD *)dest + 805) == 2 )\n      goto LABEL_803;\nLABEL_543:\n    dword_4FA0C8 = 0;\n    dword_4FA0BC = 0;\n    dword_4FA0B8 = 0;\n    v526 = 0LL;\n    v1256 = 0LL;\n    v527 = 0LL;\n    v1213 = 0LL;\n    v525 = 0;\n    while ( 2 )\n    {\n      v1260 = v525;\n      v528 = 4 * (_DWORD)v527 & 0xFFFFFFF8;\n      v529 = v527 & 1;\n      v1192 = 8 * v529;\n      v1267 = (_WORD *)(2 * (16 * v528 + 8 * v529) + 5205854);\n      *(_QWORD *)&v1195 = 8 * v529 + 1;\n      v1275 = 8 * v529 + 2;\n      v1274 = 8 * v529 + 3;\n      v1273 = 8 * v529 + 4;\n      v1272 = 8 * v529 + 5;\n      v1271 = 8 * v529 + 6;\n      v1270 = 8 * v529 + 7;\n      v529 <<= 9;\n      v1264 = 16 * (v527 & 1) | 32 * v528;\n      v1263 = (_DWORD *)((char *)xmmword_4F26D0 + v529);\n      v1262 = (int *)((char *)dword_4F2AD0 + v529);\n      v1217 = (_DWORD *)((char *)xmmword_4F46D0 + v529);\n      v1216 = (__int64)dword_4F4AD0 + v529;\n      v1229 = (__int64)xmmword_4F36D0 + v529;\n      v1228 = (__int64)dword_4F3AD0 + v529;\n      v1214 = v529 | 0x800;\n      v1265 = (unsigned __int64)(v527 & 1) << 7;\n      v1268 = v527;\n      v530 = v527 & 0x7FFFFFFE;\n      v1259 = 2 * (v527 & 1);\n      LODWORD(v529) = v526 & 1;\n      v531 = v526 & 2;\n      v1238 = ~(51 << ((4 * v526 & 0xF8) + 2 * v529));\n      v1258 = 2 * v529;\n      v1186 = (unsigned int)(8 * v529 + 8);\n      v68 = (__m128)_mm_loadl_epi64((const __m128i *)&qword_489AA0);\n      v1193 = v68.m128_i64[0];\n      v1269 = v528 - 1;\n      v1226 = 2 * (_BYTE)v526 & 2;\n      v1204 = v1226 + 1;\n      v1201 = v531;\n      v1239 = v531 + 1;\n      v1245 = 4 * (_DWORD)v526 & 0xFFFFFFF8;\n      v1187 = (unsigned int)(v1245 + 7);\n      LODWORD(v1194) = 0x7FFFFFFF;\n      v532 = v1261;\n      v533 = v1215;\n      v1197 = v526;\n      LODWORD(v1233) = v527 & 0x7FFFFFFE;\n      while ( 2 )\n      {\n        v534 = dword_491A60[v532];\n        if ( *(&v1246 + v534) )\n        {\n          v1208 = 0LL;\n          v1200 = v532;\n          v1183 = v534;\n          if ( v532 )\n          {\n            sub_450D90(v534, v526, *(double *)v69.m128_u64, v68, v62);\n            LODWORD(v1191) = *((_DWORD *)qword_4F9BE0 + v1211);\n            v535 = v1191;\n            if ( (signed int)v1191 <= 0 )\n            {\n              v543 = 0x7FFFFFFF;\n              v539 = v1179;\n            }\n            else\n            {\n              v536 = dest;\n              v537 = (_QWORD **)qword_4F9F10;\n              v1189 = (__int64)qword_4F9F50;\n              v538 = v1199;\n              v539 = v1179;\n              v540 = v1197;\n              v541 = v1183;\n              if ( *((_DWORD *)dest + 616) )\n              {\n                v542 = 0;\n                if ( (signed int)v1191 >= 2 )\n                  v542 = *(_DWORD *)v1189;\n                v538 = v1182 * v542 >> 16;\n              }\n              v543 = *(_DWORD *)(***((_QWORD ***)qword_4F9F10 + v1183) + 4 * v1197) + v538;\n              if ( v543 != 0x7FFFFFFF )\n                LOWORD(v539) = 0;\n              if ( (signed int)v1191 >= 2 )\n              {\n                v544 = 1;\n                do\n                {\n                  if ( (unsigned __int8)v1206 | ((_WORD)v544 == 0)\n                    || (v545 = sub_45B870(v540, 0, v544, (unsigned int)v541),\n                        v535 = v1191,\n                        v541 = v1183,\n                        v540 = v1197,\n                        v545) )\n                  {\n                    if ( v536[616] )\n                    {\n                      v546 = v1182 * *(_DWORD *)(v1189 + 4LL * (signed __int16)v544) >> 16;\n                    }\n                    else\n                    {\n                      v547 = v544;\n                      if ( v544 >= 2 )\n                        v547 = 1;\n                      v546 = (signed int)((double)v547 * v1218);\n                    }\n                    v548 = *(_DWORD *)(*(_QWORD *)(*v537[v541] + 8LL * (signed __int16)v544) + 4 * v540) + v546;\n                    v550 = __OFSUB__(v548, v543);\n                    v549 = v548 - v543 < 0;\n                    if ( v548 <= v543 )\n                      v543 = v548;\n                    if ( v549 ^ v550 )\n                      LOWORD(v539) = v544;\n                  }\n                  v544 = (signed __int16)(v544 + 1);\n                }\n                while ( v535 > v544 );\n              }\n            }\n            v555 = v543;\n            v556 = *((_DWORD *)off_49F6D0 + 36);\n            v557 = *((_DWORD *)off_49F6D0 + 37);\n            v558 = qword_4F9E30 + 264 * v1211;\n            v559 = **(_QWORD **)(qword_4F9E30 + 6480);\n            v1179 = v539;\n            v560 = (signed __int16)v539;\n            v561 = **(_QWORD **)(qword_4F9E30 + 6488);\n            v562 = (signed int)v1226 + v556;\n            v563 = (signed int)v1201 + v557;\n            v564 = *(_QWORD *)(v559 + 8 * v562);\n            *(_WORD *)(v564 + 2 * v563) = v539;\n            v565 = *(_QWORD *)(v561 + 8 * v562);\n            *(_QWORD *)(v565 + 8 * v563) = *(_QWORD *)(v558 + 8LL * (signed __int16)v539 + 24);\n            v566 = v1204 + v556;\n            v567 = *(_QWORD *)(v559 + 8 * v566);\n            *(_WORD *)(v567 + 2 * v563) = v560;\n            v568 = *(_QWORD *)(v561 + 8 * v566);\n            *(_QWORD *)(v568 + 8 * v563) = *(_QWORD *)(v558 + 8 * v560 + 24);\n            v569 = v1239 + v557;\n            *(_WORD *)(v564 + 2 * v569) = v560;\n            *(_QWORD *)(v565 + 8 * v569) = *(_QWORD *)(v558 + 8 * v560 + 24);\n            *(_WORD *)(v567 + 2 * v569) = v560;\n            *(_QWORD *)(v568 + 8 * v569) = *(_QWORD *)(v558 + 8 * v560 + 24);\n            if ( v1185 == 1 )\n            {\n              v570 = *((_DWORD *)qword_4F9BE0 + v1227);\n              v571 = *((_DWORD *)dest + 616);\n              v66 = v1182;\n              v572 = v1190;\n              if ( v570 <= 0 )\n              {\n                v577 = 0x7FFFFFFF;\n                v573 = v1183;\n                if ( v571 )\n                  goto LABEL_598;\n              }\n              else\n              {\n                v573 = v1183;\n                v574 = *(_QWORD **)(*((_QWORD *)qword_4F9F10 + v1183) + 8LL);\n                v575 = v1199;\n                if ( v571 )\n                {\n                  v576 = 0;\n                  if ( v570 >= 2 )\n                    v576 = *(_DWORD *)qword_4F9F50;\n                  v575 = v1182 * v576 >> 16;\n                }\n                v577 = *(_DWORD *)(*v574 + 4 * v1197) + v575;\n                if ( v577 != 0x7FFFFFFF )\n                  LOWORD(v572) = 0;\n                if ( v570 >= 2 )\n                {\n                  v578 = 1;\n                  do\n                  {\n                    if ( v571 )\n                    {\n                      v579 = v1182 * *((_DWORD *)qword_4F9F50 + (signed __int16)v578) >> 16;\n                    }\n                    else\n                    {\n                      v580 = v578;\n                      if ( v578 >= 2 )\n                        v580 = 1;\n                      v579 = (signed int)((double)v580 * v1218);\n                    }\n                    v581 = *(_DWORD *)(v574[(signed __int16)v578] + 4 * v1197) + v579;\n                    v583 = __OFSUB__(v581, v577);\n                    v582 = v581 - v577 < 0;\n                    if ( v581 <= v577 )\n                      v577 = v581;\n                    if ( v582 ^ v583 )\n                      LOWORD(v572) = v578;\n                    v578 = (signed __int16)(v578 + 1);\n                  }\n                  while ( v570 > v578 );\n                }\n                if ( v571 )\n                {\nLABEL_598:\n                  v584 = 0;\n                  v585 = 0;\n                  if ( (signed int)v1191 >= 2 )\n                    v585 = *((_DWORD *)qword_4F9F50 + v560);\n                  v586 = v1182 * v585 >> 16;\n                  if ( v570 >= 2 )\n                    v584 = *(_DWORD *)qword_4F9F50;\n                  v587 = v586 + (v1182 * v584 >> 16);\n                  v588 = v1179;\n                  goto LABEL_608;\n                }\n              }\n              v588 = v1179;\n              v589 = (signed __int16)v1179;\n              if ( (signed __int16)v1179 >= 2 )\n                v589 = 1;\n              v587 = (signed int)((double)v589 * v1218);\nLABEL_608:\n              v590 = v587 + (unsigned __int64)sub_44FAA0(v573, v1197, v588, 0, v1182);\n              if ( v555 <= v577 && v555 <= v590 )\n              {\n                v1181 = v555;\n                LOWORD(v591) = -1;\n                v554 = 0;\n                goto LABEL_615;\n              }\n              if ( v577 > v555 || v577 > v590 )\n              {\n                v1181 = v590;\n                v554 = 2;\n                v591 = 0;\nLABEL_615:\n                v577 = v1179;\n              }\n              else\n              {\n                v1181 = v577;\n                v591 = v572;\n                v554 = 1;\n                LOWORD(v577) = -1;\n              }\n              v592 = *(__int64 **)(qword_4F9E30 + 6480);\n              v593 = *((_DWORD *)off_49F6D0 + 36);\n              v594 = *((_DWORD *)off_49F6D0 + 37);\n              v595 = *v592;\n              v596 = v592[1];\n              v597 = (signed int)v1226 + v593;\n              v598 = (signed int)v1201 + v594;\n              v599 = *(_QWORD *)(v595 + 8 * v597);\n              *(_WORD *)(v599 + 2 * v598) = v577;\n              v600 = *(_QWORD *)(v596 + 8 * v597);\n              *(_WORD *)(v600 + 2 * v598) = v591;\n              v601 = v1204 + v593;\n              v602 = *(_QWORD *)(v595 + 8 * v601);\n              *(_WORD *)(v602 + 2 * v598) = v577;\n              v603 = *(_QWORD *)(v596 + 8 * v601);\n              *(_WORD *)(v603 + 2 * v598) = v591;\n              v604 = v1239 + v594;\n              *(_WORD *)(v599 + 2 * v604) = v577;\n              *(_WORD *)(v600 + 2 * v604) = v591;\n              v1179 = v577;\n              *(_WORD *)(v602 + 2 * v604) = v577;\n              LODWORD(v1190) = v591;\n              *(_WORD *)(v603 + 2 * v604) = v591;\n            }\n            else\n            {\n              v1181 = v543;\n              v554 = 0;\n              v66 = v1182;\n            }\n          }\n          else\n          {\n            if ( !*((_DWORD *)dest + 616) )\n            {\n              v1181 = sub_450810(v526, &v1223);\n              v551 = v1181 + v1213;\n              if ( v1181 == 0x7FFFFFFF )\n                v551 = 0x7FFFFFFF;\n              if ( (_DWORD)v1213 == 0x7FFFFFFF )\n                v551 = 0x7FFFFFFF;\n              ++v1231;\n              v1213 = v551;\n            }\n            v552 = *((signed int *)off_49F6D0 + 36) + (signed __int64)(signed int)v1226;\n            v553 = *((signed int *)off_49F6D0 + 37) + (signed __int64)(signed int)v1201;\n            v1179 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)qword_4F9E08 + 8 * v552) + 2 * v553);\n            LODWORD(v1190) = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)qword_4F9E08 + 1) + 8 * v552) + 2 * v553);\n            v554 = *(_WORD *)(*((_QWORD *)qword_4F9E00 + v552) + 2 * v553);\n          }\n          sub_474EE0((__int64)qword_4A0108);\n          if ( *((_DWORD *)dest + 616) )\n          {\n            v605 = v1196;\n            v606 = v1183;\n            sub_45F4D0(&v1224, &v1208, v1197, v1183, v554, v1179, (__m128)*(unsigned __int64 *)&v1196, v1190);\n            v607 = v606;\n            v1234 = v605;\n          }\n          else\n          {\n            v608 = v1181;\n            v607 = v1183;\n            if ( v1181 != 0x7FFFFFFF )\n            {\n              v609 = 0;\n              if ( *((_DWORD *)qword_4F9BE0 + ((unsigned int)v1225 | (v554 > 0))) >= 2 )\n              {\n                v610 = qword_4F9F50;\n                v611 = sub_4323A0(v1183, v554);\n                v607 = v1183;\n                v609 = v610[v611];\n                v608 = v1181;\n              }\n              v1181 = v608 + (v66 * v609 >> 16) - 1;\n            }\n          }\n          v612 = *((_DWORD *)dest + 616);\n          if ( v612 && *(double *)&v1193 > v1234 )\n          {\n            v613 = v1181;\n            goto LABEL_628;\n          }\n          if ( !v612 )\n          {\n            v613 = v1181;\n            if ( v1181 < (signed int)v1194 )\n            {\nLABEL_628:\n              v614 = v1197;\n              *((_WORD *)&qword_4F9FB8 + v1197) = v607;\n              word_4F94D0[v614] = v554;\n              word_4F9450[v614] = v1179;\n              word_4F93D0[v614] = v1190;\n              v1205 = v1224;\n              LODWORD(v1207) = v613;\n              if ( v612 )\n              {\n                dword_4FA0BC = v1208 | v1238 & dword_4FA0BC;\n                v615 = (signed int *)off_49F6D0;\n                v616 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v614);\n                v617 = *((_QWORD *)qword_4A00D8 + v614);\n                v618 = *(_OWORD ***)v616;\n                v619 = *(_OWORD ***)v617;\n                v620 = **(_OWORD ***)v616;\n                v621 = **(_OWORD ***)v617;\n                if ( v621 >= (_OWORD *)((char *)v620 + 260) || v620 >= (_OWORD *)((char *)v621 + 260) )\n                {\n                  *v621 = *v620;\n                  v621[1] = v620[1];\n                  v621[2] = v620[2];\n                  v621[3] = v620[3];\n                  v621[4] = v620[4];\n                  v621[5] = v620[5];\n                  v621[6] = v620[6];\n                  v621[7] = v620[7];\n                  v621[8] = v620[8];\n                  v621[9] = v620[9];\n                  v621[10] = v620[10];\n                  v621[11] = v620[11];\n                  v621[12] = v620[12];\n                  v621[13] = v620[13];\n                  v621[14] = v620[14];\n                  v621[15] = v620[15];\n                  v622 = 64LL;\n                }\n                else\n                {\n                  v622 = 0LL;\n                }\n                v623 = v622 - 64;\n                v624 = -1LL;\n                v625 = v622;\n                do\n                {\n                  *((_DWORD *)v621 + v625) = *((_DWORD *)v620 + v625);\n                  v626 = v623;\n                  ++v625;\n                  ++v623;\n                  ++v624;\n                }\n                while ( v624 );\n                if ( v622 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v621 + v626 + 65) = *((_DWORD *)v620 + v626 + 65);\n                    *((_DWORD *)v621 + v626 + 66) = *((_DWORD *)v620 + v626 + 66);\n                    *((_DWORD *)v621 + v626 + 67) = *((_DWORD *)v620 + v626 + 67);\n                    *((_DWORD *)v621 + v626 + 68) = *((_DWORD *)v620 + v626 + 68);\n                    v626 += 4LL;\n                  }\n                  while ( v626 );\n                }\n                v627 = v618[1];\n                v628 = v619[1];\n                if ( v628 >= (_OWORD *)((char *)v627 + 260) || v627 >= (_OWORD *)((char *)v628 + 260) )\n                {\n                  *v628 = *v627;\n                  v628[1] = v627[1];\n                  v628[2] = v627[2];\n                  v628[3] = v627[3];\n                  v628[4] = v627[4];\n                  v628[5] = v627[5];\n                  v628[6] = v627[6];\n                  v628[7] = v627[7];\n                  v628[8] = v627[8];\n                  v628[9] = v627[9];\n                  v628[10] = v627[10];\n                  v628[11] = v627[11];\n                  v628[12] = v627[12];\n                  v628[13] = v627[13];\n                  v628[14] = v627[14];\n                  v628[15] = v627[15];\n                  v629 = 64LL;\n                }\n                else\n                {\n                  v629 = 0LL;\n                }\n                v630 = v629 - 64;\n                v631 = -1LL;\n                v632 = v629;\n                do\n                {\n                  *((_DWORD *)v628 + v632) = *((_DWORD *)v627 + v632);\n                  v633 = v630;\n                  ++v632;\n                  ++v630;\n                  ++v631;\n                }\n                while ( v631 );\n                if ( v629 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v628 + v633 + 65) = *((_DWORD *)v627 + v633 + 65);\n                    *((_DWORD *)v628 + v633 + 66) = *((_DWORD *)v627 + v633 + 66);\n                    *((_DWORD *)v628 + v633 + 67) = *((_DWORD *)v627 + v633 + 67);\n                    *((_DWORD *)v628 + v633 + 68) = *((_DWORD *)v627 + v633 + 68);\n                    v633 += 4LL;\n                  }\n                  while ( v633 );\n                }\n                v634 = *(_QWORD *)(v616 + 8);\n                v635 = *(_QWORD *)(v617 + 8);\n                v636 = *(_OWORD **)v634;\n                v637 = *(_OWORD **)v635;\n                if ( *(_QWORD *)v635 >= (unsigned __int64)(*(_QWORD *)v634 + 260LL)\n                  || v636 >= (_OWORD *)((char *)v637 + 260) )\n                {\n                  *v637 = *v636;\n                  v637[1] = v636[1];\n                  v637[2] = v636[2];\n                  v637[3] = v636[3];\n                  v637[4] = v636[4];\n                  v637[5] = v636[5];\n                  v637[6] = v636[6];\n                  v637[7] = v636[7];\n                  v637[8] = v636[8];\n                  v637[9] = v636[9];\n                  v637[10] = v636[10];\n                  v637[11] = v636[11];\n                  v637[12] = v636[12];\n                  v637[13] = v636[13];\n                  v637[14] = v636[14];\n                  v637[15] = v636[15];\n                  v638 = 64LL;\n                }\n                else\n                {\n                  v638 = 0LL;\n                }\n                v639 = v638 - 64;\n                v640 = -1LL;\n                v641 = v638;\n                do\n                {\n                  *((_DWORD *)v637 + v641) = *((_DWORD *)v636 + v641);\n                  v642 = v639;\n                  ++v641;\n                  ++v639;\n                  ++v640;\n                }\n                while ( v640 );\n                if ( v638 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v637 + v642 + 65) = *((_DWORD *)v636 + v642 + 65);\n                    *((_DWORD *)v637 + v642 + 66) = *((_DWORD *)v636 + v642 + 66);\n                    *((_DWORD *)v637 + v642 + 67) = *((_DWORD *)v636 + v642 + 67);\n                    *((_DWORD *)v637 + v642 + 68) = *((_DWORD *)v636 + v642 + 68);\n                    v642 += 4LL;\n                  }\n                  while ( v642 );\n                }\n                v643 = *(_OWORD **)(v634 + 8);\n                v644 = *(_OWORD **)(v635 + 8);\n                if ( v644 >= (_OWORD *)((char *)v643 + 260) || v643 >= (_OWORD *)((char *)v644 + 260) )\n                {\n                  *v644 = *v643;\n                  v644[1] = v643[1];\n                  v644[2] = v643[2];\n                  v644[3] = v643[3];\n                  v644[4] = v643[4];\n                  v644[5] = v643[5];\n                  v644[6] = v643[6];\n                  v644[7] = v643[7];\n                  v644[8] = v643[8];\n                  v644[9] = v643[9];\n                  v644[10] = v643[10];\n                  v644[11] = v643[11];\n                  v644[12] = v643[12];\n                  v644[13] = v643[13];\n                  v644[14] = v643[14];\n                  v644[15] = v643[15];\n                  v645 = 64LL;\n                }\n                else\n                {\n                  v645 = 0LL;\n                }\n                v646 = v645 - 64;\n                v647 = -1LL;\n                v648 = v645;\n                do\n                {\n                  *((_DWORD *)v644 + v648) = *((_DWORD *)v643 + v648);\n                  v649 = v646;\n                  ++v648;\n                  ++v646;\n                  ++v647;\n                }\n                while ( v647 );\n                if ( v645 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v644 + v649 + 65) = *((_DWORD *)v643 + v649 + 65);\n                    *((_DWORD *)v644 + v649 + 66) = *((_DWORD *)v643 + v649 + 66);\n                    *((_DWORD *)v644 + v649 + 67) = *((_DWORD *)v643 + v649 + 67);\n                    *((_DWORD *)v644 + v649 + 68) = *((_DWORD *)v643 + v649 + 68);\n                    v649 += 4LL;\n                  }\n                  while ( v649 );\n                }\n                v650 = *(_QWORD *)(v616 + 16);\n                v651 = *(_QWORD *)(v617 + 16);\n                v652 = *(_OWORD **)v650;\n                v653 = *(_OWORD **)v651;\n                if ( *(_QWORD *)v651 >= (unsigned __int64)(*(_QWORD *)v650 + 260LL)\n                  || v652 >= (_OWORD *)((char *)v653 + 260) )\n                {\n                  *v653 = *v652;\n                  v653[1] = v652[1];\n                  v653[2] = v652[2];\n                  v653[3] = v652[3];\n                  v653[4] = v652[4];\n                  v653[5] = v652[5];\n                  v653[6] = v652[6];\n                  v653[7] = v652[7];\n                  v653[8] = v652[8];\n                  v653[9] = v652[9];\n                  v653[10] = v652[10];\n                  v653[11] = v652[11];\n                  v653[12] = v652[12];\n                  v653[13] = v652[13];\n                  v653[14] = v652[14];\n                  v653[15] = v652[15];\n                  v654 = 64LL;\n                }\n                else\n                {\n                  v654 = 0LL;\n                }\n                v655 = v654 - 64;\n                v656 = -1LL;\n                v657 = v654;\n                do\n                {\n                  *((_DWORD *)v653 + v657) = *((_DWORD *)v652 + v657);\n                  v658 = v655;\n                  ++v657;\n                  ++v655;\n                  ++v656;\n                }\n                while ( v656 );\n                if ( v654 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v653 + v658 + 65) = *((_DWORD *)v652 + v658 + 65);\n                    *((_DWORD *)v653 + v658 + 66) = *((_DWORD *)v652 + v658 + 66);\n                    *((_DWORD *)v653 + v658 + 67) = *((_DWORD *)v652 + v658 + 67);\n                    *((_DWORD *)v653 + v658 + 68) = *((_DWORD *)v652 + v658 + 68);\n                    v658 += 4LL;\n                  }\n                  while ( v658 );\n                }\n                v659 = *(_OWORD **)(v650 + 8);\n                v660 = *(_OWORD **)(v651 + 8);\n                if ( v660 >= (_OWORD *)((char *)v659 + 260) || v659 >= (_OWORD *)((char *)v660 + 260) )\n                {\n                  *v660 = *v659;\n                  v660[1] = v659[1];\n                  v660[2] = v659[2];\n                  v660[3] = v659[3];\n                  v660[4] = v659[4];\n                  v660[5] = v659[5];\n                  v660[6] = v659[6];\n                  v660[7] = v659[7];\n                  v660[8] = v659[8];\n                  v660[9] = v659[9];\n                  v660[10] = v659[10];\n                  v660[11] = v659[11];\n                  v660[12] = v659[12];\n                  v660[13] = v659[13];\n                  v660[14] = v659[14];\n                  v660[15] = v659[15];\n                  v661 = 64LL;\n                }\n                else\n                {\n                  v661 = 0LL;\n                }\n                v662 = v661 - 64;\n                v663 = -1LL;\n                v664 = v661;\n                do\n                {\n                  *((_DWORD *)v660 + v664) = *((_DWORD *)v659 + v664);\n                  v665 = v662;\n                  ++v664;\n                  ++v662;\n                  ++v663;\n                }\n                while ( v663 );\n                if ( v661 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v660 + v665 + 65) = *((_DWORD *)v659 + v665 + 65);\n                    *((_DWORD *)v660 + v665 + 66) = *((_DWORD *)v659 + v665 + 66);\n                    *((_DWORD *)v660 + v665 + 67) = *((_DWORD *)v659 + v665 + 67);\n                    *((_DWORD *)v660 + v665 + 68) = *((_DWORD *)v659 + v665 + 68);\n                    v665 += 4LL;\n                  }\n                  while ( v665 );\n                }\n                v666 = *(_QWORD *)(v616 + 24);\n                v667 = *(_QWORD *)(v617 + 24);\n                v668 = *(_OWORD **)v666;\n                v669 = *(_OWORD **)v667;\n                if ( *(_QWORD *)v667 >= (unsigned __int64)(*(_QWORD *)v666 + 260LL)\n                  || v668 >= (_OWORD *)((char *)v669 + 260) )\n                {\n                  *v669 = *v668;\n                  v669[1] = v668[1];\n                  v669[2] = v668[2];\n                  v669[3] = v668[3];\n                  v669[4] = v668[4];\n                  v669[5] = v668[5];\n                  v669[6] = v668[6];\n                  v669[7] = v668[7];\n                  v669[8] = v668[8];\n                  v669[9] = v668[9];\n                  v669[10] = v668[10];\n                  v669[11] = v668[11];\n                  v669[12] = v668[12];\n                  v669[13] = v668[13];\n                  v669[14] = v668[14];\n                  v669[15] = v668[15];\n                  v670 = 64LL;\n                }\n                else\n                {\n                  v670 = 0LL;\n                }\n                v671 = v670 - 64;\n                v672 = -1LL;\n                v673 = v670;\n                do\n                {\n                  *((_DWORD *)v669 + v673) = *((_DWORD *)v668 + v673);\n                  v674 = v671;\n                  ++v673;\n                  ++v671;\n                  ++v672;\n                }\n                while ( v672 );\n                if ( v670 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v669 + v674 + 65) = *((_DWORD *)v668 + v674 + 65);\n                    *((_DWORD *)v669 + v674 + 66) = *((_DWORD *)v668 + v674 + 66);\n                    *((_DWORD *)v669 + v674 + 67) = *((_DWORD *)v668 + v674 + 67);\n                    *((_DWORD *)v669 + v674 + 68) = *((_DWORD *)v668 + v674 + 68);\n                    v674 += 4LL;\n                  }\n                  while ( v674 );\n                }\n                v675 = *(_OWORD **)(v666 + 8);\n                v676 = *(_OWORD **)(v667 + 8);\n                if ( v676 >= (_OWORD *)((char *)v675 + 260) || v675 >= (_OWORD *)((char *)v676 + 260) )\n                {\n                  *v676 = *v675;\n                  v676[1] = v675[1];\n                  v676[2] = v675[2];\n                  v676[3] = v675[3];\n                  v676[4] = v675[4];\n                  v676[5] = v675[5];\n                  v676[6] = v675[6];\n                  v676[7] = v675[7];\n                  v676[8] = v675[8];\n                  v676[9] = v675[9];\n                  v676[10] = v675[10];\n                  v676[11] = v675[11];\n                  v676[12] = v675[12];\n                  v676[13] = v675[13];\n                  v676[14] = v675[14];\n                  v676[15] = v675[15];\n                  v677 = 64LL;\n                }\n                else\n                {\n                  v677 = 0LL;\n                }\n                v678 = v677 - 64;\n                v679 = -1LL;\n                v680 = v677;\n                do\n                {\n                  *((_DWORD *)v676 + v680) = *((_DWORD *)v675 + v680);\n                  v681 = v678;\n                  ++v680;\n                  ++v678;\n                  ++v679;\n                }\n                while ( v679 );\n                if ( v677 != 64 )\n                {\n                  do\n                  {\n                    *((_DWORD *)v676 + v681 + 65) = *((_DWORD *)v675 + v681 + 65);\n                    *((_DWORD *)v676 + v681 + 66) = *((_DWORD *)v675 + v681 + 66);\n                    *((_DWORD *)v676 + v681 + 67) = *((_DWORD *)v675 + v681 + 67);\n                    *((_DWORD *)v676 + v681 + 68) = *((_DWORD *)v675 + v681 + 68);\n                    v681 += 4LL;\n                  }\n                  while ( v681 );\n                }\n                v682 = v615[38];\n                v683 = v615[39];\n                v1183 = *(_QWORD *)&v1195 + v682;\n                v684 = v1275 + v682;\n                v685 = v1274 + v682;\n                v686 = v1273 + v682;\n                v687 = v1272 + v682;\n                v688 = v1271 + v682;\n                v689 = v1270 + v682;\n                v690 = v682 + v1192;\n                v691 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v683;\n                v1191 = (unsigned __int64)v615;\n                v692 = (__int64)v615 + 2 * v1265 + 12824;\n                v693 = v1264;\n                v694 = v1269;\n                do\n                {\n                  v695 = *(_QWORD *)(v691 + 8 * v694 + 8);\n                  *(__int16 *)((char *)word_4F6F50 + v693) = *(_WORD *)(v695 + 2 * v690);\n                  *(__int16 *)((char *)word_4F6550 + v693) = *(_WORD *)(v692 + 2 * v694 - 222);\n                  if ( *(_QWORD *)&v1195 < v1186 )\n                  {\n                    *(__int16 *)((char *)word_4F6F52 + v693) = *(_WORD *)(v695 + 2 * v1183);\n                    *(__int16 *)((char *)&word_4F6552 + v693) = *(_WORD *)(v692 + 2 * v694 - 190);\n                    *(__int16 *)((char *)word_4F6F54 + v693) = *(_WORD *)(v695 + 2 * v684);\n                    *(__int16 *)((char *)&word_4F6554 + v693) = *(_WORD *)(v692 + 2 * v694 - 158);\n                    *(__int16 *)((char *)word_4F6F56 + v693) = *(_WORD *)(v695 + 2 * v685);\n                    *(__int16 *)((char *)&word_4F6556 + v693) = *(_WORD *)(v692 + 2 * v694 - 126);\n                    *(__int16 *)((char *)word_4F6F58 + v693) = *(_WORD *)(v695 + 2 * v686);\n                    *(__int16 *)((char *)&word_4F6558 + v693) = *(_WORD *)(v692 + 2 * v694 - 94);\n                    *(__int16 *)((char *)word_4F6F5A + v693) = *(_WORD *)(v695 + 2 * v687);\n                    *(__int16 *)((char *)&word_4F655A + v693) = *(_WORD *)(v692 + 2 * v694 - 62);\n                    *(__int16 *)((char *)word_4F6F5C + v693) = *(_WORD *)(v695 + 2 * v688);\n                    *(__int16 *)((char *)&word_4F655C + v693) = *(_WORD *)(v692 + 2 * v694 - 30);\n                    *(__int16 *)((char *)word_4F6F5E + v693) = *(_WORD *)(v695 + 2 * v689);\n                    *(__int16 *)((char *)&word_4F655E + v693) = *(_WORD *)(v692 + 2 * v694 + 2);\n                  }\n                  ++v694;\n                  v693 += 32LL;\n                }\n                while ( v694 < v1187 );\n                if ( *(_DWORD *)(v1191 + 72724) )\n                {\nLABEL_700:\n                  v696 = v1214;\n                  v697 = v1228;\n                  v698 = v1229;\n                  v699 = v1216;\n                  v700 = v1217;\n                  v701 = v1262;\n                  v702 = v1263;\n                  v703 = v528;\n                  do\n                  {\n                    v1183 = v696;\n                    v704 = v696;\n                    v1191 = v697;\n                    v1189 = v698;\n                    v1193 = v699;\n                    v1194 = (__int64)v700;\n                    v705 = v701;\n                    v706 = v702;\n                    v707 = v1192;\n                    v708 = v1186;\n                    do\n                    {\n                      v705[v528] = v706[v528];\n                      *(_DWORD *)(v699 + 4 * v528) = v700[v528];\n                      *(_DWORD *)(v697 + 4 * v528) = *(_DWORD *)(v698 + 4 * v528);\n                      *(_DWORD *)((char *)&xmmword_4EC370[v528] + v704) = *(int *)((char *)&dword_4EB770[v528] + v704);\n                      *(_DWORD *)((char *)&xmmword_4EC770[v528] + v704) = *(int *)((char *)&dword_4EBB70[v528] + v704);\n                      *(int *)((char *)&dword_4ECB70[v528] + v704) = *(_DWORD *)((char *)&xmmword_4EBF70[v528] + v704);\n                      ++v707;\n                      v706 += 16;\n                      v705 += 16;\n                      v700 += 16;\n                      v699 += 64LL;\n                      v698 += 64LL;\n                      v697 += 64LL;\n                      v704 += 64LL;\n                    }\n                    while ( v707 < v708 );\n                    ++v702;\n                    ++v701;\n                    v700 = (_DWORD *)(v1194 + 4);\n                    v699 = v1193 + 4;\n                    v698 = v1189 + 4;\n                    v697 = v1191 + 4;\n                    v696 = v1183 + 4;\n                    v944 = v703++ < v1187;\n                  }\n                  while ( v944 );\n                }\n              }\n              else if ( *((_DWORD *)off_49F6D0 + 18181) )\n              {\n                goto LABEL_700;\n              }\n              sub_474EE0((__int64)qword_4A0100);\n              *(double *)&v1193 = v1234;\n              LODWORD(v1194) = v1207;\n              v66 = v1182;\n            }\n          }\n          sub_4750F0((__int64)qword_4A0108);\n          v533 = v1215;\n          v69 = (__m128)v1188;\n          v526 = v1197;\n          v530 = v1233;\n          v532 = v1200;\n        }\n        if ( ++v532 != 5 )\n          continue;\n        break;\n      }\n      if ( !*((_DWORD *)dest + 616) )\n      {\n        v709 = *((signed __int16 *)&qword_4F9FB8 + v526);\n        v710 = (unsigned __int16)word_4F94D0[v526];\n        v1208 = 0LL;\n        if ( (v710 | 2) == 2 )\n          v711 = v709;\n        else\n          v711 = 0;\n        if ( (unsigned __int16)(v710 - 1) >= 2u )\n          v709 = 0;\n        v712 = v526;\n        v713 = sub_42CF70(\n                 &v1232,\n                 &v1208,\n                 (unsigned int)v526,\n                 v710,\n                 v711,\n                 v709,\n                 (__m128i)v69,\n                 word_4F9450[v526],\n                 word_4F93D0[v526]);\n        dword_4FA0BC = v1208 | dword_4FA0BC & v1238;\n        v714 = v713;\n        v1189 = (__int64)off_49F6D0;\n        v715 = *(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v712);\n        v716 = *((_QWORD *)qword_4A00D8 + v712);\n        v717 = *(_OWORD ***)v715;\n        v718 = *(_OWORD ***)v716;\n        v719 = **(_OWORD ***)v715;\n        v720 = **(_OWORD ***)v716;\n        if ( v720 >= (_OWORD *)((char *)v719 + 260) || v719 >= (_OWORD *)((char *)v720 + 260) )\n        {\n          *v720 = *v719;\n          v720[1] = v719[1];\n          v720[2] = v719[2];\n          v720[3] = v719[3];\n          v720[4] = v719[4];\n          v720[5] = v719[5];\n          v720[6] = v719[6];\n          v720[7] = v719[7];\n          v720[8] = v719[8];\n          v720[9] = v719[9];\n          v720[10] = v719[10];\n          v720[11] = v719[11];\n          v720[12] = v719[12];\n          v720[13] = v719[13];\n          v720[14] = v719[14];\n          v720[15] = v719[15];\n          v721 = 64LL;\n        }\n        else\n        {\n          v721 = 0LL;\n        }\n        v722 = v721 - 64;\n        v723 = -1LL;\n        v724 = v721;\n        do\n        {\n          *((_DWORD *)v720 + v724) = *((_DWORD *)v719 + v724);\n          v725 = v722;\n          ++v724;\n          ++v722;\n          ++v723;\n        }\n        while ( v723 );\n        if ( v721 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v720 + v725 + 65) = *((_DWORD *)v719 + v725 + 65);\n            *((_DWORD *)v720 + v725 + 66) = *((_DWORD *)v719 + v725 + 66);\n            *((_DWORD *)v720 + v725 + 67) = *((_DWORD *)v719 + v725 + 67);\n            *((_DWORD *)v720 + v725 + 68) = *((_DWORD *)v719 + v725 + 68);\n            v725 += 4LL;\n          }\n          while ( v725 );\n        }\n        v726 = v717[1];\n        v727 = v718[1];\n        if ( v727 >= (_OWORD *)((char *)v726 + 260) || v726 >= (_OWORD *)((char *)v727 + 260) )\n        {\n          *v727 = *v726;\n          v727[1] = v726[1];\n          v727[2] = v726[2];\n          v727[3] = v726[3];\n          v727[4] = v726[4];\n          v727[5] = v726[5];\n          v727[6] = v726[6];\n          v727[7] = v726[7];\n          v727[8] = v726[8];\n          v727[9] = v726[9];\n          v727[10] = v726[10];\n          v727[11] = v726[11];\n          v727[12] = v726[12];\n          v727[13] = v726[13];\n          v727[14] = v726[14];\n          v727[15] = v726[15];\n          v728 = 64LL;\n        }\n        else\n        {\n          v728 = 0LL;\n        }\n        v729 = v728 - 64;\n        v730 = -1LL;\n        v731 = v728;\n        do\n        {\n          *((_DWORD *)v727 + v731) = *((_DWORD *)v726 + v731);\n          v732 = v729;\n          ++v731;\n          ++v729;\n          ++v730;\n        }\n        while ( v730 );\n        if ( v728 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v727 + v732 + 65) = *((_DWORD *)v726 + v732 + 65);\n            *((_DWORD *)v727 + v732 + 66) = *((_DWORD *)v726 + v732 + 66);\n            *((_DWORD *)v727 + v732 + 67) = *((_DWORD *)v726 + v732 + 67);\n            *((_DWORD *)v727 + v732 + 68) = *((_DWORD *)v726 + v732 + 68);\n            v732 += 4LL;\n          }\n          while ( v732 );\n        }\n        v733 = *(_QWORD *)(v715 + 8);\n        v734 = *(_QWORD *)(v716 + 8);\n        v735 = *(_OWORD **)v733;\n        v736 = *(_OWORD **)v734;\n        if ( *(_QWORD *)v734 >= (unsigned __int64)(*(_QWORD *)v733 + 260LL) || v735 >= (_OWORD *)((char *)v736 + 260) )\n        {\n          *v736 = *v735;\n          v736[1] = v735[1];\n          v736[2] = v735[2];\n          v736[3] = v735[3];\n          v736[4] = v735[4];\n          v736[5] = v735[5];\n          v736[6] = v735[6];\n          v736[7] = v735[7];\n          v736[8] = v735[8];\n          v736[9] = v735[9];\n          v736[10] = v735[10];\n          v736[11] = v735[11];\n          v736[12] = v735[12];\n          v736[13] = v735[13];\n          v736[14] = v735[14];\n          v736[15] = v735[15];\n          v737 = 64LL;\n        }\n        else\n        {\n          v737 = 0LL;\n        }\n        v738 = v737 - 64;\n        v739 = -1LL;\n        v740 = v737;\n        do\n        {\n          *((_DWORD *)v736 + v740) = *((_DWORD *)v735 + v740);\n          v741 = v738;\n          ++v740;\n          ++v738;\n          ++v739;\n        }\n        while ( v739 );\n        if ( v737 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v736 + v741 + 65) = *((_DWORD *)v735 + v741 + 65);\n            *((_DWORD *)v736 + v741 + 66) = *((_DWORD *)v735 + v741 + 66);\n            *((_DWORD *)v736 + v741 + 67) = *((_DWORD *)v735 + v741 + 67);\n            *((_DWORD *)v736 + v741 + 68) = *((_DWORD *)v735 + v741 + 68);\n            v741 += 4LL;\n          }\n          while ( v741 );\n        }\n        v742 = *(_OWORD **)(v733 + 8);\n        v743 = *(_OWORD **)(v734 + 8);\n        if ( v743 >= (_OWORD *)((char *)v742 + 260) || v742 >= (_OWORD *)((char *)v743 + 260) )\n        {\n          *v743 = *v742;\n          v743[1] = v742[1];\n          v743[2] = v742[2];\n          v743[3] = v742[3];\n          v743[4] = v742[4];\n          v743[5] = v742[5];\n          v743[6] = v742[6];\n          v743[7] = v742[7];\n          v743[8] = v742[8];\n          v743[9] = v742[9];\n          v743[10] = v742[10];\n          v743[11] = v742[11];\n          v743[12] = v742[12];\n          v743[13] = v742[13];\n          v743[14] = v742[14];\n          v743[15] = v742[15];\n          v744 = 64LL;\n        }\n        else\n        {\n          v744 = 0LL;\n        }\n        v745 = v744 - 64;\n        v746 = -1LL;\n        v747 = v744;\n        do\n        {\n          *((_DWORD *)v743 + v747) = *((_DWORD *)v742 + v747);\n          v748 = v745;\n          ++v747;\n          ++v745;\n          ++v746;\n        }\n        while ( v746 );\n        if ( v744 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v743 + v748 + 65) = *((_DWORD *)v742 + v748 + 65);\n            *((_DWORD *)v743 + v748 + 66) = *((_DWORD *)v742 + v748 + 66);\n            *((_DWORD *)v743 + v748 + 67) = *((_DWORD *)v742 + v748 + 67);\n            *((_DWORD *)v743 + v748 + 68) = *((_DWORD *)v742 + v748 + 68);\n            v748 += 4LL;\n          }\n          while ( v748 );\n        }\n        v749 = *(_QWORD *)(v715 + 16);\n        v750 = *(_QWORD *)(v716 + 16);\n        v751 = *(_OWORD **)v749;\n        v752 = *(_OWORD **)v750;\n        if ( *(_QWORD *)v750 >= (unsigned __int64)(*(_QWORD *)v749 + 260LL) || v751 >= (_OWORD *)((char *)v752 + 260) )\n        {\n          *v752 = *v751;\n          v752[1] = v751[1];\n          v752[2] = v751[2];\n          v752[3] = v751[3];\n          v752[4] = v751[4];\n          v752[5] = v751[5];\n          v752[6] = v751[6];\n          v752[7] = v751[7];\n          v752[8] = v751[8];\n          v752[9] = v751[9];\n          v752[10] = v751[10];\n          v752[11] = v751[11];\n          v752[12] = v751[12];\n          v752[13] = v751[13];\n          v752[14] = v751[14];\n          v752[15] = v751[15];\n          v753 = 64LL;\n        }\n        else\n        {\n          v753 = 0LL;\n        }\n        v754 = v753 - 64;\n        v755 = -1LL;\n        v756 = v753;\n        do\n        {\n          *((_DWORD *)v752 + v756) = *((_DWORD *)v751 + v756);\n          v757 = v754;\n          ++v756;\n          ++v754;\n          ++v755;\n        }\n        while ( v755 );\n        if ( v753 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v752 + v757 + 65) = *((_DWORD *)v751 + v757 + 65);\n            *((_DWORD *)v752 + v757 + 66) = *((_DWORD *)v751 + v757 + 66);\n            *((_DWORD *)v752 + v757 + 67) = *((_DWORD *)v751 + v757 + 67);\n            *((_DWORD *)v752 + v757 + 68) = *((_DWORD *)v751 + v757 + 68);\n            v757 += 4LL;\n          }\n          while ( v757 );\n        }\n        v758 = *(_OWORD **)(v749 + 8);\n        v759 = *(_OWORD **)(v750 + 8);\n        if ( v759 >= (_OWORD *)((char *)v758 + 260) || v758 >= (_OWORD *)((char *)v759 + 260) )\n        {\n          *v759 = *v758;\n          v759[1] = v758[1];\n          v759[2] = v758[2];\n          v759[3] = v758[3];\n          v759[4] = v758[4];\n          v759[5] = v758[5];\n          v759[6] = v758[6];\n          v759[7] = v758[7];\n          v759[8] = v758[8];\n          v759[9] = v758[9];\n          v759[10] = v758[10];\n          v759[11] = v758[11];\n          v759[12] = v758[12];\n          v759[13] = v758[13];\n          v759[14] = v758[14];\n          v759[15] = v758[15];\n          v760 = 64LL;\n        }\n        else\n        {\n          v760 = 0LL;\n        }\n        v761 = v760 - 64;\n        v762 = -1LL;\n        v763 = v760;\n        do\n        {\n          *((_DWORD *)v759 + v763) = *((_DWORD *)v758 + v763);\n          v764 = v761;\n          ++v763;\n          ++v761;\n          ++v762;\n        }\n        while ( v762 );\n        if ( v760 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v759 + v764 + 65) = *((_DWORD *)v758 + v764 + 65);\n            *((_DWORD *)v759 + v764 + 66) = *((_DWORD *)v758 + v764 + 66);\n            *((_DWORD *)v759 + v764 + 67) = *((_DWORD *)v758 + v764 + 67);\n            *((_DWORD *)v759 + v764 + 68) = *((_DWORD *)v758 + v764 + 68);\n            v764 += 4LL;\n          }\n          while ( v764 );\n        }\n        v765 = *(_QWORD *)(v715 + 24);\n        v766 = *(_QWORD *)(v716 + 24);\n        v767 = *(_OWORD **)v765;\n        v768 = *(_OWORD **)v766;\n        if ( *(_QWORD *)v766 >= (unsigned __int64)(*(_QWORD *)v765 + 260LL) || v767 >= (_OWORD *)((char *)v768 + 260) )\n        {\n          *v768 = *v767;\n          v768[1] = v767[1];\n          v768[2] = v767[2];\n          v768[3] = v767[3];\n          v768[4] = v767[4];\n          v768[5] = v767[5];\n          v768[6] = v767[6];\n          v768[7] = v767[7];\n          v768[8] = v767[8];\n          v768[9] = v767[9];\n          v768[10] = v767[10];\n          v768[11] = v767[11];\n          v768[12] = v767[12];\n          v768[13] = v767[13];\n          v768[14] = v767[14];\n          v768[15] = v767[15];\n          v769 = 64LL;\n        }\n        else\n        {\n          v769 = 0LL;\n        }\n        v770 = v769 - 64;\n        v771 = -1LL;\n        v772 = v769;\n        do\n        {\n          *((_DWORD *)v768 + v772) = *((_DWORD *)v767 + v772);\n          v773 = v770;\n          ++v772;\n          ++v770;\n          ++v771;\n        }\n        while ( v771 );\n        if ( v769 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v768 + v773 + 65) = *((_DWORD *)v767 + v773 + 65);\n            *((_DWORD *)v768 + v773 + 66) = *((_DWORD *)v767 + v773 + 66);\n            *((_DWORD *)v768 + v773 + 67) = *((_DWORD *)v767 + v773 + 67);\n            *((_DWORD *)v768 + v773 + 68) = *((_DWORD *)v767 + v773 + 68);\n            v773 += 4LL;\n          }\n          while ( v773 );\n        }\n        v774 = *(_OWORD **)(v765 + 8);\n        v775 = *(_OWORD **)(v766 + 8);\n        if ( v775 >= (_OWORD *)((char *)v774 + 260) || v774 >= (_OWORD *)((char *)v775 + 260) )\n        {\n          *v775 = *v774;\n          v775[1] = v774[1];\n          v775[2] = v774[2];\n          v775[3] = v774[3];\n          v775[4] = v774[4];\n          v775[5] = v774[5];\n          v775[6] = v774[6];\n          v775[7] = v774[7];\n          v775[8] = v774[8];\n          v775[9] = v774[9];\n          v775[10] = v774[10];\n          v775[11] = v774[11];\n          v775[12] = v774[12];\n          v775[13] = v774[13];\n          v775[14] = v774[14];\n          v775[15] = v774[15];\n          v776 = 64LL;\n        }\n        else\n        {\n          v776 = 0LL;\n        }\n        v777 = v776 - 64;\n        v778 = -1LL;\n        v779 = v776;\n        do\n        {\n          *((_DWORD *)v775 + v779) = *((_DWORD *)v774 + v779);\n          v780 = v777;\n          ++v779;\n          ++v777;\n          ++v778;\n        }\n        while ( v778 );\n        v1205 = v714;\n        if ( v776 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v775 + v780 + 65) = *((_DWORD *)v774 + v780 + 65);\n            *((_DWORD *)v775 + v780 + 66) = *((_DWORD *)v774 + v780 + 66);\n            *((_DWORD *)v775 + v780 + 67) = *((_DWORD *)v774 + v780 + 67);\n            *((_DWORD *)v775 + v780 + 68) = *((_DWORD *)v774 + v780 + 68);\n            v780 += 4LL;\n          }\n          while ( v780 );\n        }\n        v1187 = (unsigned int)(v1245 + 8);\n        v781 = *(signed int *)(v1189 + 152);\n        v782 = *(signed int *)(v1189 + 156);\n        v783 = v1192 | 1;\n        v1183 = (v1192 | 1) + v781;\n        v1191 = v1183 + 1;\n        v784 = (v1192 | 3) + v781 + 1;\n        v785 = (v1192 | 3) + v781 + 2;\n        v786 = (v1192 | 3) + v781 + 3;\n        v787 = (v1192 | 3) + v781;\n        v788 = v781 + (v1192 | 7);\n        v789 = v781 + v1192;\n        v790 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v782;\n        v791 = v1189 + 2 * v1265 + 12824;\n        v792 = v528;\n        v793 = v1264;\n        do\n        {\n          v794 = *(_QWORD *)(v790 + 8 * v792);\n          *(__int16 *)((char *)word_4F6F50 + v793) = *(_WORD *)(v794 + 2 * v789);\n          *(__int16 *)((char *)word_4F6550 + v793) = *(_WORD *)(v791 + 2 * v792 - 224);\n          if ( v783 < v1186 )\n          {\n            *(__int16 *)((char *)word_4F6F52 + v793) = *(_WORD *)(v794 + 2 * v1183);\n            *(__int16 *)((char *)&word_4F6552 + v793) = *(_WORD *)(v791 + 2 * v792 - 192);\n            *(__int16 *)((char *)word_4F6F54 + v793) = *(_WORD *)(v794 + 2 * v1191);\n            *(__int16 *)((char *)&word_4F6554 + v793) = *(_WORD *)(v791 + 2 * v792 - 160);\n            *(__int16 *)((char *)word_4F6F56 + v793) = *(_WORD *)(v794 + 2 * v787);\n            *(__int16 *)((char *)&word_4F6556 + v793) = *(_WORD *)(v791 + 2 * v792 - 128);\n            *(__int16 *)((char *)word_4F6F58 + v793) = *(_WORD *)(v794 + 2 * v784);\n            *(__int16 *)((char *)&word_4F6558 + v793) = *(_WORD *)(v791 + 2 * v792 - 96);\n            *(__int16 *)((char *)word_4F6F5A + v793) = *(_WORD *)(v794 + 2 * v785);\n            *(__int16 *)((char *)&word_4F655A + v793) = *(_WORD *)(v791 + 2 * v792 - 64);\n            *(__int16 *)((char *)word_4F6F5C + v793) = *(_WORD *)(v794 + 2 * v786);\n            *(__int16 *)((char *)&word_4F655C + v793) = *(_WORD *)(v791 + 2 * v792 - 32);\n            *(__int16 *)((char *)word_4F6F5E + v793) = *(_WORD *)(v794 + 2 * v788);\n            *(__int16 *)((char *)&word_4F655E + v793) = *(_WORD *)(v791 + 2 * v792);\n          }\n          ++v792;\n          v793 += 32LL;\n        }\n        while ( v792 < v1187 );\n        if ( *(_DWORD *)(v1189 + 72724) )\n        {\n          v795 = v528;\n          v796 = v1186;\n          v797 = v1214;\n          v798 = v1263;\n          v799 = v1262;\n          v800 = v1217;\n          v801 = v1216;\n          v802 = v1229;\n          v803 = v1228;\n          do\n          {\n            v1214 = v797;\n            v804 = v797;\n            v1228 = v803;\n            v805 = v803;\n            v1229 = v802;\n            v806 = v802;\n            v1216 = v801;\n            v807 = v801;\n            v1217 = v800;\n            v808 = v800;\n            v809 = v799;\n            v810 = v798;\n            v811 = v1192;\n            do\n            {\n              v799[v528] = v798[v528];\n              *(_DWORD *)(v807 + 4 * v528) = v808[v528];\n              *(_DWORD *)(v805 + 4 * v528) = *(_DWORD *)(v806 + 4 * v528);\n              *(_DWORD *)((char *)&xmmword_4EC370[v528] + v804) = *(int *)((char *)&dword_4EB770[v528] + v804);\n              *(_DWORD *)((char *)&xmmword_4EC770[v528] + v804) = *(int *)((char *)&dword_4EBB70[v528] + v804);\n              *(int *)((char *)&dword_4ECB70[v528] + v804) = *(_DWORD *)((char *)&xmmword_4EBF70[v528] + v804);\n              ++v811;\n              v798 += 16;\n              v799 += 16;\n              v808 += 16;\n              v807 += 64LL;\n              v806 += 64LL;\n              v805 += 64LL;\n              v804 += 64LL;\n            }\n            while ( v811 < v796 );\n            ++v795;\n            v798 = v810 + 1;\n            v799 = v809 + 1;\n            v800 = v1217 + 1;\n            v801 = v1216 + 4;\n            v802 = v1229 + 4;\n            v803 = v1228 + 4;\n            v797 = v1214 + 4;\n          }\n          while ( v795 < v1187 );\n        }\n        v533 = v1215;\n        v526 = v1197;\n        v530 = v1233;\n      }\n      if ( v1205 )\n      {\n        dword_4FA0B8 |= 1 << v526;\n        dword_4FA0C8 += v1205;\n      }\n      v812 = *((signed __int16 *)&qword_4F9FB8 + v526);\n      v813 = (signed int *)off_49F6D0;\n      v814 = *((_DWORD *)off_49F6D0 + 36);\n      v815 = *((_DWORD *)off_49F6D0 + 37);\n      v816 = v814 + v1258;\n      v817 = v814 + v1259;\n      v818 = v815 + v530;\n      *(_DWORD *)(*(_QWORD *)(v533 + 8 * v817) + 4LL * v818) = 2;\n      if ( (signed int)v817 <= v816 )\n        *(_DWORD *)(*(_QWORD *)(v533 + 8 * v817 + 8) + 4LL * v818) = 2;\n      if ( v818 <= (signed int)(v815 + (v526 & 0x7FFFFFFE)) )\n      {\n        *(_DWORD *)(*(_QWORD *)(v533 + 8 * v817) + 4LL * v818 + 4) = 2;\n        if ( (signed int)v817 <= v816 )\n          *(_DWORD *)(*(_QWORD *)(v533 + 8 * v817 + 8) + 4LL * v818 + 4) = 2;\n      }\n      v819 = v1256;\n      *(_DWORD *)(v1244 + 4 * v1256 + 332) = 2;\n      if ( (v819 | 1uLL) < 4 * v526 + 4 )\n      {\n        v820 = v1244;\n        *(_QWORD *)(v1244 + 4 * (v819 | 1) + 332) = 8589934594LL;\n        *(_DWORD *)((4 * v1256 | 0xC) + v820 + 332) = 2;\n      }\n      if ( v526 <= 2 )\n      {\n        v1245 = (unsigned int)(v1245 + 8);\n        v821 = v813[38];\n        v822 = v813[39];\n        v823 = v821 + v1192;\n        v824 = v1192 | 1;\n        v825 = (v1192 | 1) + v821;\n        v826 = (v1192 | 3) + v821 + 1;\n        v827 = (v1192 | 3) + v821 + 2;\n        v828 = (v1192 | 3) + v821 + 3;\n        v829 = (v1192 | 3) + v821;\n        v830 = v821 + (v1192 | 7);\n        v831 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v822;\n        v832 = v1267;\n        do\n        {\n          v833 = *(_QWORD *)(v831 + 8 * v528);\n          *(_WORD *)(v833 + 2 * v823) = *(v832 - 7);\n          if ( v824 < v1186 )\n          {\n            *(_WORD *)(v833 + 2 * v825) = *(v832 - 6);\n            *(_WORD *)(v833 + 2 * (v825 + 1)) = *(v832 - 5);\n            *(_WORD *)(v833 + 2 * v829) = *(v832 - 4);\n            *(_WORD *)(v833 + 2 * v826) = *(v832 - 3);\n            *(_WORD *)(v833 + 2 * v827) = *(v832 - 2);\n            *(_WORD *)(v833 + 2 * v828) = *(v832 - 1);\n            *(_WORD *)(v833 + 2 * v830) = *v832;\n          }\n          ++v528;\n          v832 += 16;\n        }\n        while ( v528 < v1245 );\n      }\n      v525 = v1194 + v1260;\n      v834 = v1197;\n      sub_467C60(v1197, v812, word_4F94D0[v1197], word_4F9450[v1197], word_4F93D0[v1197]);\n      sub_4750F0((__int64)qword_4A0100);\n      v526 = v834 + 1;\n      v527 = (unsigned int)(v1268 + 1);\n      v1256 += 4LL;\n      v69 = (__m128)v1188;\n      v66 = v1182;\n      v30 = v1185;\n      if ( v834 != 3 )\n        continue;\n      break;\n    }\n    v69 = (__m128)(unsigned __int64)v1193;\n    v1230 = v1193;\nLABEL_803:\n    sub_4750F0((__int64)qword_4A00F8);\n    v835 = qword_4F9EB0;\n    v836 = (signed int *)off_49F6D0;\n    v837 = (char *)off_49F6D0 + 12600;\n    v838 = (char *)&unk_4F12D0;\n    v839 = 0LL;\n    do\n    {\n      v840 = -512LL;\n      v841 = 0LL;\n      do\n      {\n        *(_DWORD *)&v838[2 * v840 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v835 + 8LL * ((signed int)v841 + v836[43]))\n                                                                + 2 * (v836[42] + (signed __int64)(signed int)v839))\n                                          - *(unsigned __int16 *)&v837[2 * v841];\n        ++v841;\n        v840 += 32LL;\n      }\n      while ( v840 );\n      ++v839;\n      v837 += 32;\n      v838 += 4;\n    }\n    while ( v839 != 16 );\n    v62 = (__m128i)v1188;\n    if ( *((_DWORD *)dest + 616) )\n    {\n      v72 = v1222;\n      v74 = v1184;\n      goto LABEL_809;\n    }\n    v72 = dword_4FA0CC;\n    v75 = v1222;\n    v74 = v1184;\n    v71 = v1179;\n    if ( v525 >= v1222 && dword_4FA0CC >= v1222 )\n    {\nLABEL_812:\n      v72 = v75;\n      goto LABEL_813;\n    }\n    dword_4FA0A8 = 8;\n    if ( !*((_DWORD *)dest + 805) )\n      goto LABEL_1267;\n    if ( dword_4FA0CC < v525 )\n    {\n      v1184[12] = 1;\n      goto LABEL_813;\n    }\n    if ( v525 < dword_4FA0CC )\n    {\nLABEL_1267:\n      v1184[12] = 0;\n      v72 = v525;\n      goto LABEL_813;\n    }\n    v1184[12] = 1;\n    v73 = v74;\n    if ( !(unsigned int)sub_469B70() )\n    {\n      v73[12] = 0;\n      v72 = v525;\n    }\n    v74 = v73;\n    v62 = (__m128i)v1188;\nLABEL_809:\n    v71 = v1179;\nLABEL_813:\n    v842 = *((_DWORD *)off_49F6D0 + 6);\n    if ( v842 == 3 || !v842 )\n    {\n      sub_4502D0();\n      v62 = (__m128i)v1188;\n      v74 = v1184;\n    }\nLABEL_816:\n    v843 = dest;\n    v1180 = v71;\n    if ( *((_DWORD *)dest + 616) )\n    {\n      v1230 = 5055640609639927018LL;\n      v16 = *((_DWORD *)off_49F6D0 + 18175) == 0;\n      LODWORD(v1191) = v72;\n      v844 = v66;\n      if ( !v16 )\n      {\n        v845 = v74;\n        sub_42FEB0(&v1240, &v1242, &v1241, a1);\n        v62 = (__m128i)v1188;\n        *v845 = 0;\n        v846 = 0;\n        v847 = dest;\n        while ( v846 && v847[605] == 1\n             || v846 == 2 && !v1242\n             || v846 == 1 && !v1241\n             || v846 == 3 && (!v1242 || !v1241 || !v1240) )\n        {\nLABEL_914:\n          v881 = *v1184;\n          v846 = *v1184 + 1;\n          *v1184 = v846;\n          if ( v881 >= 3 )\n            goto LABEL_994;\n        }\n        v848 = (signed __int16 *)off_49F6D0;\n        v849 = *((_DWORD *)off_49F6D0 + 18181);\n        v850 = v849 != 0;\n        if ( v847[314] )\n          *((_WORD *)off_49F6D0 + 35977) = 0;\n        v851 = 3 * v850 + 8;\n        v852 = 0;\n        v853 = 0;\n        LODWORD(v1183) = 3 * v850 + 8;\n        while ( 2 )\n        {\n          if ( v849 )\n          {\n            v854 = dword_491A80[v852];\n            if ( (unsigned __int64)(v852 - 5LL) <= 3 )\n            {\n              v855 = v852 - 5;\n              v1198 = v852 - 5;\n              if ( !((v852 - 5) | v1242) )\n                goto LABEL_912;\n              if ( v855 == 1 && !v1241 )\n              {\n                v852 = 6;\n                goto LABEL_912;\n              }\n              if ( v855 == 3 && (!v1242 || !v1241 || !v1240) )\n              {\n                v852 = 8;\n                goto LABEL_912;\n              }\n            }\n          }\n          else\n          {\n            v854 = dword_48A4E0[v852];\n            v1198 = 0;\n          }\n          if ( v854 == 1 && *((_DWORD *)v848 + 6) == 1 )\n          {\n            word_4F949E = v853;\n            word_4F949C = v853;\n            word_4F949A = v853;\n            word_4F9498 = v853;\n            if ( v853 == 2 && v847[314] )\n              v853 = 2 - (v848[35977] < 2);\n            v852 -= v853++ < 2;\n          }\n          *((_DWORD *)v848 + 18098) = 0;\n          if ( v847[328] && *((_DWORD *)v848 + 6) != 2 && v854 >= 10 && !dword_4FA0A8 && !*(v1184 - 16) )\n            *(&v1246 + v854) = 0;\n          v1186 = v854;\n          v856 = v1184;\n          if ( *(&v1246 + v854) )\n          {\n            v1184[12] = 0;\n            if ( v847[805] == 2 )\n            {\n              if ( (unsigned int)(v854 - 1) <= 2 )\n                goto LABEL_866;\n              if ( v30 != 1 || v854 )\n              {\n                if ( v854 == 8 && HIDWORD(v1247) )\n                  goto LABEL_866;\n              }\n              else\n              {\n                if ( !*((_DWORD *)qword_4F9DC0 + 289) )\n                  goto LABEL_867;\nLABEL_866:\n                v856[12] = 1;\n              }\n            }\nLABEL_867:\n            LODWORD(v1187) = v853;\n            sub_460460(v854);\n            v71 = v1180;\n            v62 = (__m128i)v1188;\n            v857 = v1184;\n            v69 = (__m128)*(unsigned __int64 *)&v1196;\n            if ( !*v1184 || (v858 = *(v1184 - 113), v858 <= 0xD) && (v859 = 9728, _bittest(&v859, v858)) )\n            {\n              v860 = (v854 | v1185 ^ 1) == 0;\n              while ( 1 )\n              {\n                if ( (unsigned int)sub_464950(v854, (unsigned __int64)&v1230, v1198, v69) )\n                {\n                  v861 = qword_4F9EB0;\n                  v862 = (signed int *)off_49F6D0;\n                  if ( v854 == 8 )\n                  {\n                    v863 = (char *)&unk_4F12D0;\n                    v864 = word_4F6550;\n                    v865 = 0LL;\n                    do\n                    {\n                      v866 = -512LL;\n                      v867 = 0;\n                      do\n                      {\n                        *(_DWORD *)&v863[2 * v866 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v861\n                                                                                            + 8LL * (v867++ + v862[43]))\n                                                                                + 2\n                                                                                * (v862[42]\n                                                                                 + (signed __int64)(signed int)v865))\n                                                          - (unsigned __int16)v864[(unsigned __int64)v866 / 2 + 256];\n                        v866 += 32LL;\n                      }\n                      while ( v866 );\n                      ++v865;\n                      ++v864;\n                      v863 += 4;\n                    }\n                    while ( v865 != 16 );\n                  }\n                  else\n                  {\n                    v868 = 0LL;\n                    v869 = 0LL;\n                    do\n                    {\n                      v870 = 4611686018427387648LL;\n                      v871 = 0;\n                      do\n                      {\n                        dword_4F16D0[v868 + v870] = *(unsigned __int16 *)(*(_QWORD *)(v861 + 8LL * (v871++ + v862[43]))\n                                                                        + 2\n                                                                        * (v862[42] + (signed __int64)(signed int)v869))\n                                                  - *(_DWORD *)((char *)xmmword_4A0540 + v868 * 4 + v870 * 4);\n                        v870 += 16LL;\n                      }\n                      while ( v870 * 4 );\n                      ++v869;\n                      ++v868;\n                    }\n                    while ( v869 != 16 );\n                  }\n                  sub_4654F0(v854);\n                }\n                v857 = v1184;\n                v69 = (__m128)*(unsigned __int64 *)&v1196;\n                v62 = (__m128i)v1188;\n                v71 = v1180;\n                if ( *((_DWORD *)dest + 805) != 1 )\n                  break;\n                if ( (unsigned int)(v854 - 1) > 2 )\n                {\n                  if ( v860 )\n                  {\n                    if ( !*((_DWORD *)qword_4F9DC0 + 289) )\n                      goto LABEL_892;\n                  }\n                  else if ( v854 != 8 || !HIDWORD(v1247) )\n                  {\nLABEL_892:\n                    v1184[12] = 0;\n                    break;\n                  }\n                }\n                if ( v1184[12] )\n                  goto LABEL_892;\n                v1184[12] = 1;\n              }\n            }\n            v30 = v1185;\n            v851 = v1183;\n            v853 = v1187;\n            if ( !v854 && v1185 == 1 && v1246 )\n            {\n              v872 = *(v857 - 16);\n              if ( v872 )\n              {\n                if ( (*(v857 - 16) & 0xF) != 15 && !*((_DWORD *)dest + 618) )\n                {\n                  *((_DWORD *)off_49F6D0 + 18098) = 1;\n                  v873 = sub_464950(0, (unsigned __int64)&v1230, v1198, v69);\n                  v853 = v1187;\n                  v71 = v1180;\n                  v62 = (__m128i)v1188;\n                  if ( v873 )\n                  {\n                    v874 = qword_4F9EB0;\n                    v875 = (signed int *)off_49F6D0;\n                    v876 = 0LL;\n                    v877 = 0LL;\n                    do\n                    {\n                      v878 = 4611686018427387648LL;\n                      v879 = 0;\n                      do\n                      {\n                        dword_4F16D0[v876 + v878] = *(unsigned __int16 *)(*(_QWORD *)(v874 + 8LL * (v879++ + v875[43]))\n                                                                        + 2\n                                                                        * (v875[42] + (signed __int64)(signed int)v877))\n                                                  - *(_DWORD *)((char *)xmmword_4A0540 + v876 * 4 + v878 * 4);\n                        v878 += 16LL;\n                      }\n                      while ( v878 * 4 );\n                      ++v877;\n                      ++v876;\n                    }\n                    while ( v877 != 16 );\n                    sub_4654F0(0);\n                    v62 = (__m128i)v1188;\n                    v71 = v1180;\n                    v853 = v1187;\n                  }\n                }\n              }\n            }\n          }\n          v847 = dest;\n          if ( *((_DWORD *)dest + 314) && v853 == 2 && *((_DWORD *)off_49F6D0 + 6) == 1 && (v853 = 2, v854 == 1) )\n          {\n            v880 = *((_WORD *)off_49F6D0 + v1186 + 35976);\n            v844 = v1182;\n            if ( v880 <= 1 && word_4F9498 == 2 )\n              *((_WORD *)off_49F6D0 + v1186 + 35976) = v880 + 1;\n          }\n          else\n          {\nLABEL_912:\n            v844 = v1182;\n          }\n          if ( ++v852 >= v851 )\n            goto LABEL_914;\n          v848 = (signed __int16 *)off_49F6D0;\n          v849 = *((_DWORD *)off_49F6D0 + 18181);\n          continue;\n        }\n      }\n      v885 = *((_DWORD *)dest + 314);\n      if ( v885 )\n        *((_WORD *)off_49F6D0 + 35977) = 0;\n      v886 = 0;\n      v887 = 0;\n      while ( 2 )\n      {\n        v888 = dword_48A4E0[v886];\n        if ( v886 == 1 )\n        {\n          v889 = 1LL;\n          if ( *((_DWORD *)off_49F6D0 + 6) == 1 )\n          {\n            word_4F949E = v887;\n            word_4F949C = v887;\n            word_4F949A = v887;\n            word_4F9498 = v887;\n            if ( v887 == 2 && v885 )\n              v887 = 2 - (*((signed __int16 *)off_49F6D0 + v888 + 35976) < 2);\n            v889 = v887 < 1;\n            LOBYTE(v889) = v887++ > 1;\n          }\n        }\n        else\n        {\n          v889 = v886;\n        }\n        v890 = v1184;\n        *((_DWORD *)off_49F6D0 + 18098) = 0;\n        if ( *(&v1246 + v888) )\n        {\n          v890[12] = 0;\n          if ( v843[805] == 2 )\n          {\n            if ( v886 - 1 <= 2 )\n              goto LABEL_947;\n            if ( v1185 != 1 || v886 )\n            {\n              if ( v886 == 4 && HIDWORD(v1247) )\n                goto LABEL_947;\n            }\n            else\n            {\n              if ( !*((_DWORD *)qword_4F9DC0 + 289) )\n                goto LABEL_948;\nLABEL_947:\n              v890[12] = 1;\n            }\n          }\nLABEL_948:\n          v1186 = v889;\n          LODWORD(v1187) = v887;\n          sub_460460(v888);\n          v71 = v1180;\n          v62 = (__m128i)v1188;\n          v891 = v1184;\n          v69 = (__m128)*(unsigned __int64 *)&v1196;\n          if ( !*v1184 || (v892 = *(v1184 - 113), v892 <= 0xD) && (v893 = 9728, _bittest(&v893, v892)) )\n          {\n            v894 = (v886 | v1185 ^ 1) == 0;\n            while ( 1 )\n            {\n              if ( (unsigned int)sub_464950(v888, (unsigned __int64)&v1230, v1198, v69) )\n              {\n                v895 = qword_4F9EB0;\n                v896 = (signed int *)off_49F6D0;\n                if ( v886 == 4 )\n                {\n                  v897 = (char *)&unk_4F12D0;\n                  v898 = word_4F6550;\n                  v899 = 0LL;\n                  do\n                  {\n                    v900 = -512LL;\n                    v901 = 0;\n                    do\n                    {\n                      *(_DWORD *)&v897[2 * v900 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v895\n                                                                                          + 8LL * (v901++ + v896[43]))\n                                                                              + 2\n                                                                              * (v896[42]\n                                                                               + (signed __int64)(signed int)v899))\n                                                        - (unsigned __int16)v898[(unsigned __int64)v900 / 2 + 256];\n                      v900 += 32LL;\n                    }\n                    while ( v900 );\n                    ++v899;\n                    ++v898;\n                    v897 += 4;\n                  }\n                  while ( v899 != 16 );\n                }\n                else\n                {\n                  v902 = 0LL;\n                  v903 = 0LL;\n                  do\n                  {\n                    v904 = 4611686018427387648LL;\n                    v905 = 0;\n                    do\n                    {\n                      dword_4F16D0[v902 + v904] = *(unsigned __int16 *)(*(_QWORD *)(v895 + 8LL * (v905++ + v896[43]))\n                                                                      + 2\n                                                                      * (v896[42] + (signed __int64)(signed int)v903))\n                                                - *(_DWORD *)((char *)xmmword_4A0540 + v902 * 4 + v904 * 4);\n                      v904 += 16LL;\n                    }\n                    while ( v904 * 4 );\n                    ++v903;\n                    ++v902;\n                  }\n                  while ( v903 != 16 );\n                }\n                sub_4654F0(v888);\n              }\n              v891 = v1184;\n              v69 = (__m128)*(unsigned __int64 *)&v1196;\n              v62 = (__m128i)v1188;\n              v71 = v1180;\n              if ( *((_DWORD *)dest + 805) != 1 )\n                break;\n              if ( v886 - 1 > 2 )\n              {\n                if ( v894 )\n                {\n                  if ( !*((_DWORD *)qword_4F9DC0 + 289) )\n                    goto LABEL_973;\n                }\n                else if ( v886 != 4 || !HIDWORD(v1247) )\n                {\nLABEL_973:\n                  v1184[12] = 0;\n                  break;\n                }\n              }\n              if ( v1184[12] )\n                goto LABEL_973;\n              v1184[12] = 1;\n            }\n          }\n          v844 = v1182;\n          v887 = v1187;\n          LODWORD(v889) = v1186;\n          if ( !v886 && v1185 == 1 && v1246 )\n          {\n            v906 = *(v891 - 16);\n            if ( v906 )\n            {\n              if ( (*(v891 - 16) & 0xF) != 15 && !*((_DWORD *)dest + 618) )\n              {\n                *((_DWORD *)off_49F6D0 + 18098) = 1;\n                v907 = sub_464950(v888, (unsigned __int64)&v1230, v1198, v69);\n                LODWORD(v889) = v1186;\n                v71 = v1180;\n                v62 = (__m128i)v1188;\n                if ( v907 )\n                {\n                  v908 = qword_4F9EB0;\n                  v909 = (signed int *)off_49F6D0;\n                  v910 = 0LL;\n                  v911 = 0LL;\n                  do\n                  {\n                    v912 = 4611686018427387648LL;\n                    v913 = 0;\n                    do\n                    {\n                      dword_4F16D0[v910 + v912] = *(unsigned __int16 *)(*(_QWORD *)(v908 + 8LL * (v913++ + v909[43]))\n                                                                      + 2\n                                                                      * (v909[42] + (signed __int64)(signed int)v911))\n                                                - *(_DWORD *)((char *)xmmword_4A0540 + v910 * 4 + v912 * 4);\n                      v912 += 16LL;\n                    }\n                    while ( v912 * 4 );\n                    ++v911;\n                    ++v910;\n                  }\n                  while ( v911 != 16 );\n                  sub_4654F0(v888);\n                  v62 = (__m128i)v1188;\n                  v71 = v1180;\n                  LODWORD(v889) = v1186;\n                }\n              }\n            }\n          }\n        }\n        v843 = dest;\n        v885 = *((_DWORD *)dest + 314);\n        if ( v885 )\n        {\n          if ( v887 == 2 && *((_DWORD *)off_49F6D0 + 6) == 1 && v886 == 1 )\n          {\n            v914 = *((_WORD *)off_49F6D0 + v888 + 35976);\n            if ( v914 <= 1 && word_4F9498 == 2 )\n              *((_WORD *)off_49F6D0 + v888 + 35976) = v914 + 1;\n          }\n        }\n        v886 = v889 + 1;\n        v30 = v1185;\n        if ( (signed int)v889 >= 7 )\n        {\nLABEL_994:\n          v74 = v1184;\n          v915 = v1191;\n          goto LABEL_1083;\n        }\n        continue;\n      }\n    }\n    v882 = v74[12];\n    LODWORD(v1197) = v74[13];\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      sub_42FEB0(0LL, 0LL, 0LL, a1);\n      v62 = (__m128i)v1188;\n      v74 = v1184;\n    }\n    if ( v30 != 1 || !v1246 )\n    {\n      v844 = v66;\n      goto LABEL_1001;\n    }\n    if ( v1231 )\n    {\n      v883 = *((_DWORD *)dest + 805);\n      if ( v883 != 2 && (v883 != 1 || v1203 >= (signed int)v1213 && (_DWORD)v1248 && HIDWORD(v1248) && v1249) )\n      {\n        v844 = v66;\n        v1181 = v1213;\n        v884 = v1213;\n        goto LABEL_999;\n      }\n      v844 = v66;\n      v884 = v1203;\n    }\n    else\n    {\n      v844 = v66;\n      v916 = sub_450CA0((unsigned int)v1246);\n      v62 = (__m128i)v1188;\n      v74 = v1184;\n      v884 = v916;\n    }\n    v1181 = v884;\nLABEL_999:\n    v917 = v884 - v1257;\n    v1181 = v917;\n    if ( v917 <= v72 )\n    {\n      if ( *((_DWORD *)qword_4F9DC0 + 289) && (v952 = *((_DWORD *)dest + 805)) != 0 )\n      {\n        v953 = 1;\n        if ( v952 != 2 )\n          v953 = v1203 < (signed int)v1213;\n      }\n      else\n      {\n        v953 = 0;\n      }\n      v1184[12] = v953;\n      v954 = qword_4F9EB0;\n      v955 = (signed int *)off_49F6D0;\n      v956 = (char *)off_49F6D0 + 12600;\n      v957 = (char *)&unk_4F12D0;\n      v958 = 0LL;\n      v69 = (__m128)*(unsigned __int64 *)&v1196;\n      do\n      {\n        v959 = -512LL;\n        v960 = 0LL;\n        do\n        {\n          *(_DWORD *)&v957[2 * v959 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v954\n                                                                              + 8LL * ((signed int)v960 + v955[39]))\n                                                                  + 2 * (v955[38] + (signed __int64)(signed int)v958))\n                                            - *(unsigned __int16 *)&v956[2 * v960];\n          ++v960;\n          v959 += 32LL;\n        }\n        while ( v959 );\n        ++v958;\n        v956 += 32;\n        v957 += 4;\n      }\n      while ( v958 != 16 );\n      dword_4FA0A8 = 0;\n      v74 = v1184;\n      if ( v1254 )\n        goto LABEL_1002;\nLABEL_1029:\n      if ( !v1251 )\n        goto LABEL_1056;\n      goto LABEL_1030;\n    }\n    v74[12] = v882;\n    v74[13] = v1197;\nLABEL_1001:\n    v917 = v72;\n    v69 = (__m128)*(unsigned __int64 *)&v1196;\n    if ( !v1254 )\n      goto LABEL_1029;\nLABEL_1002:\n    v74[12] = 1;\n    *(v74 - 113) = 13;\n    v918 = v74;\n    v919 = sub_479D60(&v1181, *(double *)v69.m128_u64);\n    if ( v1181 <= v917 )\n    {\n      v922 = (signed int *)off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        LODWORD(v1200) = v919;\n        v923 = dword_4F9110[0] | dword_4F9114 | dword_4F9130 | dword_4F912C | dword_4F9128 | dword_4F9124 | dword_4F9120 | dword_4F9118 | dword_4F911C | dword_4F9150[0] | dword_4F914C | dword_4F9148 | dword_4F9144 | dword_4F9140 | dword_4F913C | dword_4F9134 | (unsigned int)dword_4F9138;\n        v924 = (unsigned int)v923 | dword_4F9174 | dword_4F9170 | dword_4F916C | dword_4F9168 | dword_4F9164 | dword_4F9160 | dword_4F915C | dword_4F9154 | dword_4F9158;\n        v925 = v1212;\n        if ( dword_4F918C | (unsigned int)v924 | dword_4F9188 | dword_4F9184 | dword_4F9180 | dword_4F9178 | dword_4F917C )\n          v925 = 2;\n        v926 = sub_407DF0(0, v925, v924, v923, v920, v921);\n        v1212 = sub_407DF0(1, v926, v927, v928, v929, v930);\n        LODWORD(v1207) = 16 * v1212;\n        v931 = *(__int64 **)(qword_4F9E30 + 6464);\n        v1193 = *v931;\n        v1194 = v931[1];\n        v922 = (signed int *)off_49F6D0;\n        *(_QWORD *)&v932 = *((signed int *)off_49F6D0 + 38);\n        v1192 = *((signed int *)off_49F6D0 + 39);\n        v933 = 0LL;\n        v934 = 0LL;\n        v69 = (__m128)*(unsigned __int64 *)&v1196;\n        v62 = (__m128i)v1188;\n        v1195 = v932;\n        do\n        {\n          v935 = 2 * v934;\n          v936 = &xmmword_4F7350[2 * v934];\n          v937 = (__int128 *)((char *)&unk_4F7370 + 32 * v934);\n          v938 = &xmmword_4F7550[2 * v934];\n          v939 = (__int128 *)((char *)&unk_4F7570 + 32 * v934);\n          v940 = *(unsigned __int64 *)(v1194 + 8 * (v934 + v1192));\n          v941 = *(_QWORD *)(v1193 + 8 * (v934 + v1192)) + 2LL * *(_QWORD *)&v932;\n          v1186 = *(_QWORD *)(v1193 + 8 * (v934 + v1192));\n          v942 = v940 + 2LL * *(_QWORD *)&v932 + 32;\n          LOBYTE(v1183) = v936 < v939;\n          LOBYTE(v1191) = v938 < v937;\n          v943 = (unsigned __int64)v936 < v941 + 32;\n          LOBYTE(v1189) = v941 < (unsigned __int64)v937;\n          v944 = (unsigned __int64)v936 < v942;\n          v1187 = v940;\n          v945 = v940 + 2LL * *(_QWORD *)&v932;\n          if ( (v938 < v937) & (unsigned __int8)v1183\n            || (unsigned __int8)v1189 & v943\n            || v945 < (unsigned __int64)v937 && v944\n            || v941 < (unsigned __int64)v939 && (unsigned __int64)v938 < v941 + 32\n            || v945 < (unsigned __int64)v939 && (unsigned __int64)v938 < v942 )\n          {\n            v932 = v1195;\n            v948 = v1187 + 2LL * *(_QWORD *)&v1195 + 2;\n            v949 = v1186 + 2LL * *(_QWORD *)&v1195 + 2;\n            v950 = 0LL;\n            do\n            {\n              *(_WORD *)((char *)&xmmword_4F7350[v933] + v950) = *(_WORD *)(v949 + v950 - 2);\n              *(_WORD *)((char *)&xmmword_4F7550[v933] + v950) = *(_WORD *)(v948 + v950 - 2);\n              *(_WORD *)(v933 * 16 + v950 + 5206866) = *(_WORD *)(v949 + v950);\n              *(_WORD *)(v933 * 16 + v950 + 5207378) = *(_WORD *)(v948 + v950);\n              v950 += 4LL;\n            }\n            while ( v950 != 32 );\n          }\n          else\n          {\n            v932 = v1195;\n            v946 = v1186;\n            xmmword_4F7350[v935] = *(_OWORD *)(v1186 + 2LL * *(_QWORD *)&v1195);\n            v947 = v1187;\n            xmmword_4F7550[v935] = *(_OWORD *)(v1187 + 2LL * *(_QWORD *)&v932);\n            xmmword_4F7360[v935] = *(_OWORD *)(v946 + 2LL * *(_QWORD *)&v932 + 16);\n            v68 = (__m128)_mm_loadu_si128((const __m128i *)(v947 + 2LL * *(_QWORD *)&v932 + 16));\n            _mm_store_si128((__m128i *)&xmmword_4F7560[v935], (__m128i)v68);\n          }\n          ++v934;\n          v933 += 2LL;\n        }\n        while ( v934 != 16 );\n        v919 = v1207 + v1200;\n        v951 = v1184;\n        v844 = v1182;\n      }\n      else\n      {\n        v951 = v1184;\n        v69 = (__m128)*(unsigned __int64 *)&v1196;\n        v62 = (__m128i)v1188;\n      }\n      *(v951 - 16) = v919;\n      if ( *((_DWORD *)dest + 805) != 2 )\n      {\n        v982 = qword_4A00D0;\n        qword_4A00D0 = (void *)*((_QWORD *)v922 + 1767);\n        *((_QWORD *)v922 + 1767) = v982;\n      }\n      v983 = v922[38];\n      v984 = *(_QWORD *)(qword_4F9E30 + 6424) + 8LL * v922[39];\n      v985 = 4611686018427387872LL;\n      do\n      {\n        v986 = *(_QWORD *)(v984 + v985 * 4 + 128);\n        LOWORD(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983);\n        WORD1(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 2);\n        WORD2(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 4);\n        WORD3(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 6);\n        WORD4(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 8);\n        WORD5(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 10);\n        WORD6(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 12);\n        HIWORD(xmmword_4F7950[v985]) = *(_WORD *)(v986 + 2 * v983 + 14);\n        LOWORD(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 16);\n        WORD1(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 18);\n        WORD2(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 20);\n        WORD3(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 22);\n        WORD4(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 24);\n        WORD5(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 26);\n        WORD6(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 28);\n        HIWORD(xmmword_4F7960[v985]) = *(_WORD *)(v986 + 2 * v983 + 30);\n        v985 += 2LL;\n      }\n      while ( v985 * 4 );\n      v987 = qword_4F9EB0;\n      v988 = (signed __int64)(v922 + 3150);\n      v989 = (char *)&unk_4F12D0;\n      v990 = 0LL;\n      do\n      {\n        v991 = -512LL;\n        v992 = 0LL;\n        do\n        {\n          *(_DWORD *)&v989[2 * v991 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v987\n                                                                              + 8LL * ((signed int)v992 + v922[39]))\n                                                                  + 2 * (v922[38] + (signed __int64)(signed int)v990))\n                                            - *(unsigned __int16 *)(v988 + 2 * v992);\n          ++v992;\n          v991 += 32LL;\n        }\n        while ( v991 );\n        ++v990;\n        v988 += 32LL;\n        v989 += 4;\n      }\n      while ( v990 != 16 );\n      v917 = v1181;\n      dword_4FA0A8 = 13;\n      v74 = v1184;\n      v882 = v1184[12];\n      v30 = v1185;\n      if ( v1251 )\n        goto LABEL_1030;\nLABEL_1056:\n      if ( v1252 )\n        goto LABEL_1057;\n      goto LABEL_1042;\n    }\n    v918[12] = v882;\n    v74 = v918;\n    v69 = (__m128)*(unsigned __int64 *)&v1196;\n    v62 = (__m128i)v1188;\n    if ( !v1251 )\n      goto LABEL_1056;\nLABEL_1030:\n    v74[12] = 0;\n    *(v74 - 113) = 9;\n    v961 = v74;\n    v962 = sub_45F3C0(&v1181, *(double *)v69.m128_u64);\n    if ( v1181 <= v917 )\n    {\n      v966 = off_49F6D0;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v967 = dword_4F9110[0] | dword_4F9114 | dword_4F9130 | dword_4F912C | dword_4F9128 | dword_4F9124 | dword_4F9120 | dword_4F9118 | dword_4F911C | dword_4F9150[0] | dword_4F914C | dword_4F9148 | dword_4F9144 | dword_4F9140 | dword_4F913C | dword_4F9134 | (unsigned int)dword_4F9138;\n        v968 = (unsigned int)v967 | dword_4F9174 | dword_4F9170 | dword_4F916C | dword_4F9168 | dword_4F9164 | dword_4F9160 | dword_4F915C | dword_4F9154 | dword_4F9158;\n        v969 = v1212;\n        if ( dword_4F918C | (unsigned int)v968 | dword_4F9188 | dword_4F9184 | dword_4F9180 | dword_4F9178 | dword_4F917C )\n          v969 = 2;\n        v970 = sub_407DF0(0, v969, v968, v967, v963, v964);\n        v975 = sub_407DF0(1, v970, v971, v972, v973, v974);\n        v1212 = v975;\n        v962 += 16 * v975;\n        v966 = off_49F6D0;\n      }\n      v62 = (__m128i)v1188;\n      *(v1184 - 16) = v962;\n      v976 = qword_4F9EB0;\n      v977 = (signed __int64)(v966 + 3150);\n      v978 = (char *)&unk_4F12D0;\n      v979 = 0LL;\n      do\n      {\n        v980 = -512LL;\n        v981 = 0LL;\n        do\n        {\n          *(_DWORD *)&v978[2 * v980 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v976\n                                                                              + 8LL * ((signed int)v981 + v966[39]))\n                                                                  + 2\n                                                                  * ((signed int)v966[38]\n                                                                   + (signed __int64)(signed int)v979))\n                                            - *(unsigned __int16 *)(v977 + 2 * v981);\n          ++v981;\n          v980 += 32LL;\n        }\n        while ( v980 );\n        ++v979;\n        v977 += 32LL;\n        v978 += 4;\n      }\n      while ( v979 != 16 );\n      v917 = v1181;\n      dword_4FA0A8 = 9;\n      v74 = v1184;\n      v882 = v1184[12];\n      if ( v1252 )\n        goto LABEL_1057;\nLABEL_1042:\n      v915 = v917;\n      goto LABEL_1082;\n    }\n    v961[12] = v882;\n    v965 = qword_4A00D0;\n    qword_4A00D0 = (void *)*((_QWORD *)off_49F6D0 + 1767);\n    *((_QWORD *)off_49F6D0 + 1767) = v965;\n    v74 = v961;\n    v62 = (__m128i)v1188;\n    if ( !v1252 )\n      goto LABEL_1042;\nLABEL_1057:\n    v74[12] = 0;\n    v993 = v74;\n    sub_402AD0();\n    v1181 = sub_435E90(&v1198);\n    if ( v1181 < v917 )\n    {\n      v995 = qword_4F9EB0;\n      v996 = (signed int *)off_49F6D0;\n      v1183 = v1198;\n      v997 = (signed __int64)v1198 << 9;\n      v998 = (char *)off_49F6D0 + v997 + 4792;\n      v999 = (char *)&unk_4F12D0;\n      v1000 = (char *)off_49F6D0 + v997 + 4792;\n      v1001 = 0LL;\n      do\n      {\n        v1002 = -512LL;\n        v1003 = 0;\n        do\n        {\n          v1004 = *(unsigned __int16 *)&v1000[v1002 + 512];\n          v1005 = *(unsigned __int16 *)(*(_QWORD *)(v995 + 8LL * (v1003 + v996[39]))\n                                      + 2 * (v996[38] + (signed __int64)(signed int)v1001))\n                - (unsigned int)v1004;\n          *(_DWORD *)&v999[2 * v1002 + 1024] = v1005;\n          ++v1003;\n          v1002 += 32LL;\n        }\n        while ( v1002 );\n        ++v1001;\n        v1000 += 2;\n        v999 += 4;\n      }\n      while ( v1001 != 16 );\n      v1186 = v995;\n      LODWORD(v1192) = v917;\n      if ( v996[18181] )\n      {\n        v1006 = *(_QWORD *)qword_4F9E88;\n        v1187 = *(unsigned __int64 *)(qword_4F9E88 + 8);\n        v1007 = (signed __int64)(v996 + 2638);\n        v1008 = (signed __int64)(v996 + 3278);\n        v1009 = 0LL;\n        v1010 = 0LL;\n        do\n        {\n          v1011 = 0LL;\n          v1005 = 0LL;\n          do\n          {\n            v1012 = v996[39] + (signed __int64)(signed int)v1010;\n            v1013 = (signed int)v1005 + v996[38];\n            v994 = v1007 + ((signed __int64)*v1184 << 9);\n            v1014 = *(unsigned __int16 *)(*(_QWORD *)(v1006 + 8 * v1012) + 2 * v1013)\n                  - *(unsigned __int16 *)(v1011 + v994 - 2048);\n            v1015 = *(unsigned __int16 *)(*(_QWORD *)(v1186 + 8 * v1012) + 2 * v1013);\n            LODWORD(v1013) = *(unsigned __int16 *)(*(_QWORD *)(v1187 + 8 * v1012) + 2 * v1013)\n                           - *(unsigned __int16 *)(v1011 + v994);\n            LODWORD(v1012) = *(unsigned __int16 *)&v998[2 * v1005];\n            LODWORD(v1013) = v1013 - v1014;\n            xmmword_4F46D0[v1011 / 2 + v1009] = v1013;\n            v1004 = (unsigned int)(v1014 + ((signed int)v1013 >> 1));\n            v1016 = v1015 - v1012 - v1004;\n            xmmword_4F36D0[v1011 / 2 + v1009] = v1016;\n            v1017 = v1004 + (v1016 >> 1);\n            *(_DWORD *)((char *)&xmmword_4F42D0[v1011 / 8] + v1009 * 4) = v1017;\n            *(_DWORD *)(v1008 + 2 * v1011) = v1017;\n            ++v1005;\n            v1011 += 32LL;\n          }\n          while ( v1011 != 512 );\n          ++v1010;\n          v998 += 32;\n          v1007 += 2LL;\n          ++v1009;\n          v1008 += 4LL;\n        }\n        while ( v1010 != 16 );\n      }\n      dword_4FA0A8 = 10;\n      v1018 = sub_403370(v1183, v1004, v1005, (__int64)v998, v994);\n      v74 = v1184;\n      *(v1184 - 16) = v1018;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v1022 = (char *)off_49F6D0 + 13176;\n        v1023 = 16LL;\n        v1024 = 0LL;\n        do\n        {\n          v1025 = 4611686018427387648LL;\n          do\n          {\n            dword_4F2A90[v1023 + v1025] = *(_DWORD *)&v1022[v1025 * 4 + 960];\n            *(_DWORD *)&v1022[v1025 * 4 + 960] = dword_4F4A90[v1023 + v1025];\n            dword_4F2AD0[v1023 + v1025] = *(_DWORD *)&v1022[v1025 * 4 + 1024];\n            *(_DWORD *)&v1022[v1025 * 4 + 1024] = dword_4F4AD0[v1023 + v1025];\n            v1025 += 32LL;\n          }\n          while ( v1025 * 4 );\n          ++v1024;\n          v1022 += 4;\n          ++v1023;\n        }\n        while ( v1024 != 16 );\n        v1026 = sub_405140(0LL, 0, v1019, v1020, v1021);\n        v1030 = (char *)off_49F6D0 + 13176;\n        v1031 = 16LL;\n        v1032 = 0LL;\n        do\n        {\n          v1033 = 4611686018427387648LL;\n          do\n          {\n            dword_4F3690[v1031 + v1033] = *(_DWORD *)&v1030[v1033 * 4 + 960];\n            *(_DWORD *)&v1030[v1033 * 4 + 960] = dword_4F3A90[v1031 + v1033];\n            xmmword_4F36D0[v1031 + v1033] = *(_DWORD *)&v1030[v1033 * 4 + 1024];\n            *(_DWORD *)&v1030[v1033 * 4 + 1024] = dword_4F3AD0[v1031 + v1033];\n            v1033 += 32LL;\n          }\n          while ( v1033 * 4 );\n          ++v1032;\n          v1030 += 4;\n          ++v1031;\n        }\n        while ( v1032 != 16 );\n        v1034 = sub_405140(1LL, v1026, v1027, v1028, v1029);\n        v1035 = (signed int *)off_49F6D0;\n        if ( (char *)off_49F6D0 + 14136 <= (char *)xmmword_4F22D0\n          || (char *)off_49F6D0 + 13112 >= (char *)xmmword_4F26D0 )\n        {\n          xmmword_4F22D0[0] = *(_OWORD *)((char *)off_49F6D0 + 13112);\n          xmmword_4F2310[0] = *(_OWORD *)((char *)off_49F6D0 + 13176);\n          xmmword_4F2350[0] = *(_OWORD *)((char *)off_49F6D0 + 13240);\n          xmmword_4F2390[0] = *(_OWORD *)((char *)off_49F6D0 + 13304);\n          xmmword_4F23D0 = *(_OWORD *)((char *)off_49F6D0 + 13368);\n          xmmword_4F2410 = *(_OWORD *)((char *)off_49F6D0 + 13432);\n          xmmword_4F2450 = *(_OWORD *)((char *)off_49F6D0 + 13496);\n          xmmword_4F2490 = *(_OWORD *)((char *)off_49F6D0 + 13560);\n          xmmword_4F24D0 = *(_OWORD *)((char *)off_49F6D0 + 13624);\n          xmmword_4F2510 = *(_OWORD *)((char *)off_49F6D0 + 13688);\n          xmmword_4F2550 = *(_OWORD *)((char *)off_49F6D0 + 13752);\n          xmmword_4F2590 = *(_OWORD *)((char *)off_49F6D0 + 13816);\n          xmmword_4F25D0 = *(_OWORD *)((char *)off_49F6D0 + 13880);\n          xmmword_4F2610 = *(_OWORD *)((char *)off_49F6D0 + 13944);\n          xmmword_4F2650 = *(_OWORD *)((char *)off_49F6D0 + 14008);\n          xmmword_4F2690 = *(_OWORD *)((char *)off_49F6D0 + 14072);\n          xmmword_4F22E0 = *(_OWORD *)((char *)off_49F6D0 + 13128);\n          xmmword_4F2320 = *(_OWORD *)((char *)off_49F6D0 + 13192);\n          xmmword_4F2360 = *(_OWORD *)((char *)off_49F6D0 + 13256);\n          xmmword_4F23A0 = *(_OWORD *)((char *)off_49F6D0 + 13320);\n          xmmword_4F23E0 = *(_OWORD *)((char *)off_49F6D0 + 13384);\n          xmmword_4F2420 = *(_OWORD *)((char *)off_49F6D0 + 13448);\n          xmmword_4F2460 = *(_OWORD *)((char *)off_49F6D0 + 13512);\n          xmmword_4F24A0 = *(_OWORD *)((char *)off_49F6D0 + 13576);\n          xmmword_4F24E0 = *(_OWORD *)((char *)off_49F6D0 + 13640);\n          xmmword_4F2520 = *(_OWORD *)((char *)off_49F6D0 + 13704);\n          xmmword_4F2560 = *(_OWORD *)((char *)off_49F6D0 + 13768);\n          xmmword_4F25A0 = *(_OWORD *)((char *)off_49F6D0 + 13832);\n          xmmword_4F25E0 = *(_OWORD *)((char *)off_49F6D0 + 13896);\n          xmmword_4F2620 = *(_OWORD *)((char *)off_49F6D0 + 13960);\n          xmmword_4F2660 = *(_OWORD *)((char *)off_49F6D0 + 14024);\n          xmmword_4F26A0 = *(_OWORD *)((char *)off_49F6D0 + 14088);\n          xmmword_4F22F0 = *(_OWORD *)((char *)off_49F6D0 + 13144);\n          xmmword_4F2330 = *(_OWORD *)((char *)off_49F6D0 + 13208);\n          xmmword_4F2370 = *(_OWORD *)((char *)off_49F6D0 + 13272);\n          xmmword_4F23B0 = *(_OWORD *)((char *)off_49F6D0 + 13336);\n          xmmword_4F23F0 = *(_OWORD *)((char *)off_49F6D0 + 13400);\n          xmmword_4F2430 = *(_OWORD *)((char *)off_49F6D0 + 13464);\n          xmmword_4F2470 = *(_OWORD *)((char *)off_49F6D0 + 13528);\n          xmmword_4F24B0 = *(_OWORD *)((char *)off_49F6D0 + 13592);\n          xmmword_4F24F0 = *(_OWORD *)((char *)off_49F6D0 + 13656);\n          xmmword_4F2530 = *(_OWORD *)((char *)off_49F6D0 + 13720);\n          xmmword_4F2570 = *(_OWORD *)((char *)off_49F6D0 + 13784);\n          xmmword_4F25B0 = *(_OWORD *)((char *)off_49F6D0 + 13848);\n          xmmword_4F25F0 = *(_OWORD *)((char *)off_49F6D0 + 13912);\n          xmmword_4F2630 = *(_OWORD *)((char *)off_49F6D0 + 13976);\n          xmmword_4F2670 = *(_OWORD *)((char *)off_49F6D0 + 14040);\n          xmmword_4F26B0 = *(_OWORD *)((char *)off_49F6D0 + 14104);\n          xmmword_4F2300 = *(_OWORD *)((char *)off_49F6D0 + 13160);\n          xmmword_4F2340 = *(_OWORD *)((char *)off_49F6D0 + 13224);\n          xmmword_4F2380 = *(_OWORD *)((char *)off_49F6D0 + 13288);\n          xmmword_4F23C0 = *(_OWORD *)((char *)off_49F6D0 + 13352);\n          xmmword_4F2400 = *(_OWORD *)((char *)off_49F6D0 + 13416);\n          xmmword_4F2440 = *(_OWORD *)((char *)off_49F6D0 + 13480);\n          xmmword_4F2480 = *(_OWORD *)((char *)off_49F6D0 + 13544);\n          xmmword_4F24C0 = *(_OWORD *)((char *)off_49F6D0 + 13608);\n          xmmword_4F2500 = *(_OWORD *)((char *)off_49F6D0 + 13672);\n          xmmword_4F2540 = *(_OWORD *)((char *)off_49F6D0 + 13736);\n          xmmword_4F2580 = *(_OWORD *)((char *)off_49F6D0 + 13800);\n          xmmword_4F25C0 = *(_OWORD *)((char *)off_49F6D0 + 13864);\n          xmmword_4F2600 = *(_OWORD *)((char *)off_49F6D0 + 13928);\n          xmmword_4F2640 = *(_OWORD *)((char *)off_49F6D0 + 13992);\n          xmmword_4F2680 = *(_OWORD *)((char *)off_49F6D0 + 14056);\n          v69 = *(__m128 *)((char *)off_49F6D0 + 14120);\n          xmmword_4F26C0 = *(_OWORD *)((char *)off_49F6D0 + 14120);\n          v62 = (__m128i)v1188;\n        }\n        else\n        {\n          v1036 = 4611686018427387888LL;\n          v62 = (__m128i)v1188;\n          do\n          {\n            *(_DWORD *)((char *)xmmword_4F2310 + v1036 * 4) = v1035[v1036 + 3294];\n            *(_DWORD *)((char *)xmmword_4F2350 + v1036 * 4) = v1035[v1036 + 3310];\n            *(_DWORD *)((char *)xmmword_4F2390 + v1036 * 4) = v1035[v1036 + 3326];\n            *(_DWORD *)((char *)&xmmword_4F23D0 + v1036 * 4) = v1035[v1036 + 3342];\n            *(_DWORD *)((char *)&xmmword_4F2410 + v1036 * 4) = v1035[v1036 + 3358];\n            *(_DWORD *)((char *)&xmmword_4F2450 + v1036 * 4) = v1035[v1036 + 3374];\n            *(_DWORD *)((char *)&xmmword_4F2490 + v1036 * 4) = v1035[v1036 + 3390];\n            *(_DWORD *)((char *)&xmmword_4F24D0 + v1036 * 4) = v1035[v1036 + 3406];\n            *(_DWORD *)((char *)&xmmword_4F2510 + v1036 * 4) = v1035[v1036 + 3422];\n            *(_DWORD *)((char *)&xmmword_4F2550 + v1036 * 4) = v1035[v1036 + 3438];\n            *(_DWORD *)((char *)&xmmword_4F2590 + v1036 * 4) = v1035[v1036 + 3454];\n            *(_DWORD *)((char *)&xmmword_4F25D0 + v1036 * 4) = v1035[v1036 + 3470];\n            *(_DWORD *)((char *)&xmmword_4F2610 + v1036 * 4) = v1035[v1036 + 3486];\n            *(_DWORD *)((char *)&xmmword_4F2650 + v1036 * 4) = v1035[v1036 + 3502];\n            *(_DWORD *)((char *)&xmmword_4F2690 + v1036 * 4) = v1035[v1036 + 3518];\n            xmmword_4F26D0[v1036] = v1035[v1036 + 3534];\n            ++v1036;\n          }\n          while ( v1036 * 4 );\n        }\n        v1212 = v1034;\n        v1038 = v1184;\n        *(v1038 - 16) += 16 * v1034;\n        v1039 = v1035[18171];\n        v1040 = v1035[18172];\n        v1041 = *v1038;\n        v1183 = *(_QWORD *)(qword_4F9E30 + 6424);\n        v1042 = *(__int64 **)(qword_4F9E30 + 6464);\n        v1191 = *v1042;\n        v1189 = v1042[1];\n        v1193 = v1035[38];\n        v1194 = v1035[39];\n        v1043 = (signed __int64)&v1035[128 * v1041 + 2638];\n        v1044 = (signed __int64)&v1035[128 * (signed __int64)v1198 + 1198];\n        v1045 = 0LL;\n        *(double *)&v1046 = 0.0;\n        do\n        {\n          v1187 = v1046;\n          v1047 = 2 * v1193 + *(_QWORD *)(v1191 + 8 * (v1046 + v1194));\n          v1048 = 2 * v1193 + *(_QWORD *)(v1183 + 8 * (v1046 + v1194));\n          v1049 = *(_QWORD *)(v1189 + 8 * (v1046 + v1194)) + 2 * v1193;\n          v1186 = v1045;\n          v1050 = 0LL;\n          do\n          {\n            v1051 = *(_DWORD *)((char *)xmmword_4F32D0 + 2 * v1045);\n            v1052 = *(_DWORD *)((char *)xmmword_4F26D0 + 2 * v1045)\n                  - (*(_DWORD *)((char *)xmmword_4F22D0 + 2 * v1045) >> 1)\n                  - (*(_DWORD *)((char *)xmmword_4F32D0 + 2 * v1045) >> 1);\n            v1053 = v1052 + *(unsigned __int16 *)(v1043 + v1045 - 2048);\n            if ( v1053 < 0 )\n              v1053 = 0;\n            v1054 = *(_DWORD *)((char *)xmmword_4F22D0 + 2 * v1045)\n                  + *(_DWORD *)((char *)xmmword_4F26D0 + 2 * v1045)\n                  - (*(_DWORD *)((char *)xmmword_4F22D0 + 2 * v1045) >> 1);\n            v1055 = v1040;\n            if ( v1040 >= v1053 )\n              v1055 = v1053;\n            *(_WORD *)(v1047 + v1050) = v1055;\n            v1056 = *(unsigned __int16 *)(v1044 + v1050) + v1054;\n            if ( v1056 < 0 )\n              v1056 = 0;\n            v1057 = v1051 + v1052;\n            v1058 = v1039;\n            if ( v1039 >= v1056 )\n              v1058 = v1056;\n            *(_WORD *)(v1048 + v1050) = v1058;\n            v1059 = *(unsigned __int16 *)(v1043 + v1045) + v1057;\n            if ( v1059 < 0 )\n              v1059 = 0;\n            v1060 = v1040;\n            if ( v1040 >= v1059 )\n              v1060 = v1059;\n            *(_WORD *)(v1049 + v1050) = v1060;\n            v1050 += 2LL;\n            v1045 += 32LL;\n          }\n          while ( v1050 != 32 );\n          v1046 = v1187 + 1;\n          v1045 = v1186 + 2;\n          v1044 += 32LL;\n        }\n        while ( v1187 != 15 );\n        v915 = v1192;\n        v74 = v1184;\n        v30 = v1185;\n      }\n      else\n      {\n        v915 = v1192;\n        v30 = v1185;\n        v62 = (__m128i)v1188;\n      }\n      v66 = v1182;\n      v71 = v1180;\n      if ( v1220 )\n        goto LABEL_1106;\nLABEL_1084:\n      v1037 = *(v74 - 113) - 9;\n      v1202 = 0;\n      if ( v1037 <= 4 )\n        v1202 = dword_491AB0[v1037];\n      goto LABEL_1106;\n    }\n    v993[12] = v882;\n    v993[13] = v1197;\n    v915 = v917;\n    v74 = v993;\n    v62 = (__m128i)v1188;\nLABEL_1082:\n    v71 = v1180;\nLABEL_1083:\n    v66 = v844;\n    if ( !v1220 )\n      goto LABEL_1084;\nLABEL_1106:\n    ++v1220;\n  }\n  while ( v1220 < v1236 );\n  if ( !*((_DWORD *)dest + 616) )\n  {\n    sub_460460(dword_4FA0A8);\n    if ( dword_4FA0A8 == 13 )\n    {\n      v1083 = off_49F6D0;\n      v1084 = *((_QWORD *)off_49F6D0 + 13);\n      v1085 = *((_QWORD *)off_49F6D0 + 14);\n      v1086 = (_DWORD *)(v1209 + v1210 + 408);\n      v1087 = 0;\n      do\n      {\n        *(_DWORD *)(*(_QWORD *)(v1084 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37]) = *(_DWORD *)(*(_QWORD *)(v1085 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37]);\n        *(v1086 - 19) = *(v1086 - 3);\n        *(_DWORD *)(*(_QWORD *)(v1084 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 4) = *(_DWORD *)(*(_QWORD *)(v1085 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 4);\n        *(v1086 - 18) = *(v1086 - 2);\n        *(_DWORD *)(*(_QWORD *)(v1084 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 8) = *(_DWORD *)(*(_QWORD *)(v1085 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 8);\n        *(v1086 - 17) = *(v1086 - 1);\n        *(_DWORD *)(*(_QWORD *)(v1084 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 12) = *(_DWORD *)(*(_QWORD *)(v1085 + 8LL * (v1087 + v1083[36])) + 4LL * (signed int)v1083[37] + 12);\n        *(v1086 - 16) = *v1086;\n        ++v1087;\n        v1086 += 4;\n      }\n      while ( v1087 != 4 );\n      v1088 = (signed int)v1083[38];\n      v1183 = (signed int)v1083[39];\n      v1089 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v1183;\n      v1090 = 4611686018427387872LL;\n      v1067 = v1215;\n      do\n      {\n        v1091 = *(_QWORD *)(v1089 + v1090 * 4 + 128);\n        *(_WORD *)(v1091 + 2 * v1088) = xmmword_4F7950[v1090];\n        *(_WORD *)(v1091 + 2 * v1088 + 2) = WORD1(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 4) = WORD2(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 6) = WORD3(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 8) = WORD4(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 10) = WORD5(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 12) = WORD6(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 14) = HIWORD(xmmword_4F7950[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 16) = xmmword_4F7960[v1090];\n        *(_WORD *)(v1091 + 2 * v1088 + 18) = WORD1(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 20) = WORD2(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 22) = WORD3(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 24) = WORD4(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 26) = WORD5(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 28) = WORD6(xmmword_4F7960[v1090]);\n        *(_WORD *)(v1091 + 2 * v1088 + 30) = HIWORD(xmmword_4F7960[v1090]);\n        v1090 += 2LL;\n      }\n      while ( v1090 * 4 );\n      if ( v1083[18181] )\n      {\n        v1092 = *(__int64 **)(qword_4F9E30 + 6464);\n        v1189 = *v1092;\n        v1193 = v1092[1];\n        v1194 = v1088 + 16;\n        v1192 = v1088 + 1;\n        v1093 = 0LL;\n        v1094 = 0LL;\n        LODWORD(v1191) = v915;\n        do\n        {\n          v1065 = (char *)(32 * v1094);\n          v1095 = &xmmword_4F7350[2 * v1094];\n          v1096 = (char *)&unk_4F7370 + 32 * v1094;\n          v1097 = (char *)&unk_4F7570 + 32 * v1094;\n          v1098 = *(_QWORD *)(v1189 + 8 * (v1094 + v1183));\n          v1099 = *(unsigned __int64 *)(v1193 + 8 * (v1094 + v1183));\n          v1100 = v1098 + 2 * v1088;\n          v1190 = *(_QWORD *)(v1189 + 8 * (v1094 + v1183));\n          v1101 = v1098 + 2 * v1194;\n          v1102 = v1099 + 2 * v1088;\n          v1187 = v1099;\n          v1066 = v1099 + 2 * v1194;\n          LOBYTE(v1186) = v1100 < v1066;\n          LOBYTE(v1185) = v1102 < v1101;\n          v1103 = v1100 < (unsigned __int64)v1096;\n          v1104 = v1100 < (unsigned __int64)v1097;\n          v1105 = &xmmword_4F7550[2 * v1094];\n          v1106 = v1102 < (unsigned __int64)v1096;\n          if ( (v1102 < v1101) & (unsigned __int8)v1186\n            || (unsigned __int64)v1095 < v1101 && v1103\n            || (unsigned __int64)v1105 < v1101 && v1104\n            || (unsigned __int64)v1095 < v1066 && v1106\n            || (unsigned __int64)v1105 < v1066 && v1102 < (unsigned __int64)v1097 )\n          {\n            v1109 = v1187 + 2 * v1192;\n            v1110 = v1190 + 2 * v1192;\n            v1111 = 0LL;\n            v1067 = v1215;\n            v915 = v1191;\n            do\n            {\n              *(_WORD *)(v1110 + v1111 - 2) = *(_WORD *)((char *)&xmmword_4F7350[v1093] + v1111);\n              *(_WORD *)(v1109 + v1111 - 2) = *(_WORD *)((char *)&xmmword_4F7550[v1093] + v1111);\n              *(_WORD *)(v1110 + v1111) = *(_WORD *)(v1093 * 16 + v1111 + 5206866);\n              *(_WORD *)(v1109 + v1111) = *(_WORD *)(v1093 * 16 + v1111 + 5207378);\n              v1111 += 4LL;\n            }\n            while ( v1111 != 32 );\n          }\n          else\n          {\n            v1107 = v1190;\n            *(_OWORD *)(v1190 + 2 * v1088) = *(__int128 *)((char *)xmmword_4F7350 + (_QWORD)v1065);\n            v1108 = v1187;\n            *(_OWORD *)(v1187 + 2 * v1088) = *(__int128 *)((char *)xmmword_4F7550 + (_QWORD)v1065);\n            *(_OWORD *)(v1107 + 2 * v1088 + 16) = *(__int128 *)((char *)xmmword_4F7360 + (_QWORD)v1065);\n            v69 = *(__m128 *)((char *)xmmword_4F7560 + (_QWORD)v1065);\n            *(__m128 *)(v1108 + 2 * v1088 + 16) = v69;\n            v1067 = v1215;\n            v915 = v1191;\n          }\n          ++v1094;\n          v1093 += 2LL;\n        }\n        while ( v1094 != 16 );\n      }\n    }\n    else\n    {\n      v1067 = v1215;\n      if ( dword_4FA0A8 == 8 )\n      {\n        if ( v1184[12] && !dword_4FA0B4 && *((_DWORD *)dest + 805) != 2 )\n          v1184[12] = 0;\n        sub_461CC0(v1244);\n        v1068 = (signed int *)off_49F6D0;\n        v1069 = *((signed int *)off_49F6D0 + 37);\n        v1070 = v1210 + v1209 + 332;\n        LODWORD(v1071) = 0;\n        v1072 = v1215;\n        do\n        {\n          v1071 = (signed int)v1071;\n          v1073 = v1068[36] - 1LL;\n          do\n          {\n            *(_DWORD *)(*(_QWORD *)(v1072 + 8 * v1073 + 8) + 4 * v1069) = 2;\n            *(_DWORD *)(v1070 + 4 * v1071++) = 2;\n            ++v1073;\n          }\n          while ( v1073 < v1068[36] + 3LL );\n          v1074 = v1068[37] + 3LL;\n          v97 = __OFSUB__(v1069, v1074);\n          v96 = v1069++ - v1074 < 0;\n        }\n        while ( v96 ^ v97 );\n        goto LABEL_1161;\n      }\n    }\n    if ( (dword_4FA0A8 | 4) != 13 )\n    {\n      v1112 = (signed int *)off_49F6D0;\n      v1113 = *((signed int *)off_49F6D0 + 37);\n      v1114 = v1210 + v1209 + 332;\n      LODWORD(v1115) = 0;\n      do\n      {\n        v1115 = (signed int)v1115;\n        v1116 = v1112[36] - 1LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(v1067 + 8 * v1116 + 8) + 4 * v1113) = 2;\n          *(_DWORD *)(v1114 + 4 * v1115++) = 2;\n          ++v1116;\n        }\n        while ( v1116 < v1112[36] + 3LL );\n        v1117 = v1112[37] + 3LL;\n        v97 = __OFSUB__(v1113, v1117);\n        v96 = v1113++ - v1117 < 0;\n      }\n      while ( v96 ^ v97 );\n      if ( dword_4FA0A8 != 10 )\n      {\n        if ( (unsigned int)(dword_4FA0A8 - 1) <= 2 )\n          v1184[12] = v1237;\n        sub_42EC00((__m128i)v69);\n        if ( !(*(v1184 - 16) | dword_4FA0A8) )\n          v1184[12] = 0;\n        v1118 = qword_4F9EB0;\n        v1119 = (signed int *)off_49F6D0;\n        v1065 = (char *)off_49F6D0 + 12600;\n        v1120 = (char *)&unk_4F12D0;\n        v1121 = 0LL;\n        do\n        {\n          v1122 = -512LL;\n          v1123 = 0LL;\n          do\n          {\n            *(_DWORD *)&v1120[2 * v1122 + 1024] = *(unsigned __int16 *)(*(_QWORD *)(v1118\n                                                                                  + 8LL\n                                                                                  * ((signed int)v1123 + v1119[39]))\n                                                                      + 2\n                                                                      * (v1119[38] + (signed __int64)(signed int)v1121))\n                                                - *(unsigned __int16 *)&v1065[2 * v1123];\n            ++v1123;\n            v1122 += 32LL;\n          }\n          while ( v1122 );\n          ++v1121;\n          v1065 += 32;\n          v1120 += 4;\n        }\n        while ( v1121 != 16 );\n      }\n    }\nLABEL_1161:\n    if ( !(*(_BYTE *)(v1184 - 16) & 0xF) && (*(v1184 - 113) | 4) != 13 )\n      v1184[12] = 0;\n    v1124 = off_49F6D0;\n    if ( *((_DWORD *)off_49F6D0 + 18175) )\n    {\n      sub_42FEB0(0LL, 0LL, 0LL, a1);\n      v1124 = off_49F6D0;\n    }\n    v1124[18095] = 0;\n    v1232 = 0;\n    if ( v1124[18181] && (unsigned int)dword_4FA0A8 <= 0xD && (v1125 = 9728, _bittest(&v1125, dword_4FA0A8)) )\n    {\n      if ( dword_4FA0A8 != 10 )\n      {\nLABEL_1173:\n        sub_464380(v1244, v1221);\n        v1128 = off_49F6D0;\n        v1129 = *((_DWORD *)off_49F6D0 + 6);\n        if ( (!v1129 || v1129 == 3) && dword_4FA0A8 == 1 && !*(v1184 - 16) )\n        {\n          v1130 = *((signed int *)off_49F6D0 + 36);\n          v1131 = *((signed int *)off_49F6D0 + 37);\n          if ( !*(_WORD *)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6480) + 8 * v1130) + 2 * v1131) )\n          {\n            v1132 = *(_WORD **)(*(_QWORD *)(**(_QWORD **)(qword_4F9E30 + 6504) + 8 * v1130) + 8 * v1131);\n            v1133 = (_WORD *)*****v1266;\n            if ( *v1132 == *v1133 && v1132[1] == v1133[1] )\n            {\n              v1134 = v1184;\n              *(v1184 - 113) = 0;\n              v1134[12] = 0;\n              *(_OWORD *)(v1209 + v1210 + 472) = 0LL;\n            }\n          }\n        }\n        if ( v1128[18100] )\n          sub_473B90();\n        goto LABEL_1183;\n      }\n    }\n    else\n    {\n      if ( v1124[18175] )\n        sub_42F740((unsigned int *)&v1232, (__int64)v1065, v1066);\n      if ( dword_4FA0A8 != 10 )\n        goto LABEL_1173;\n    }\n    v1126 = *(v1184 - 16);\n    v1127 = 13;\n    if ( !(v1126 & 0xF) )\n      v1127 = 1;\n    *((_DWORD *)off_49F6D0 + 18095) = v1127 + v1198 + ((v1126 >> 2) & 0xC);\n    goto LABEL_1173;\n  }\n  v1061 = 1;\n  if ( dword_4FA0B0 )\n  {\n    v1062 = v1209;\n    v1063 = v1210;\nLABEL_1130:\n    *(_DWORD *)(v1062 + v1063 + 600) = v1061;\n  }\n  else\n  {\n    v1062 = v1209;\n    v1063 = v1210;\n    if ( dword_4FA0A8 == 10 )\n      goto LABEL_1130;\n    if ( !*((_DWORD *)dest + 809) )\n    {\n      *(_DWORD *)(v1209 + v1210 + 8) = 0;\n      v1064 = *(_DWORD *)(v1062 + v1063 + 592);\n      *(_DWORD *)(v1062 + v1063 + 12) = v1064;\n      *((_DWORD *)off_49F6D0 + 10) = v1064;\n      v1061 = 0;\n      goto LABEL_1130;\n    }\n  }\n  sub_465F70();\nLABEL_1183:\n  v1135 = dest;\n  if ( *((_DWORD *)dest + 809) )\n  {\n    if ( !*((_DWORD *)off_49F6D0 + 6) )\n    {\n      v1136 = sub_458790();\n      v1137 = (double *)off_49F6D0;\n      *(double *)(*((_QWORD *)off_49F6D0 + 9073) + 8LL * *((signed int *)off_49F6D0 + 3)) = v1136;\n      v1135 = dest;\n      if ( *((_DWORD *)dest + 812) < *((_DWORD *)v1137 + 18152) )\n      {\n        v1137[9068] = v1136 + v1137[9068];\n        v1138 = 1;\n        if ( dword_4FA0B0 )\n        {\n          v1139 = v1209;\n          v1140 = v1210;\n        }\n        else\n        {\n          v1139 = v1209;\n          v1140 = v1210;\n          if ( dword_4FA0A8 != 10 )\n          {\n            *(_DWORD *)(v1209 + v1210 + 8) = 0;\n            v1141 = *(_DWORD *)(v1139 + v1140 + 592);\n            *(_DWORD *)(v1139 + v1140 + 12) = v1141;\n            *((_DWORD *)v1137 + 10) = v1141;\n            v1138 = 0;\n          }\n        }\n        *(_DWORD *)(v1139 + v1140 + 600) = v1138;\n        if ( v1135[721] )\n        {\n          if ( *(_DWORD *)(v1139 + v1140 + 532) )\n          {\n            dword_4F9FF0 = *(_DWORD *)(v1139 + v1140 + 8);\n            dword_4FA06C = *(_DWORD *)(v1139 + v1140 + 12);\n          }\n          else\n          {\n            dword_4F9FEC = *(_DWORD *)(v1139 + v1140 + 8);\n            dword_4FA068 = *(_DWORD *)(v1139 + v1140 + 12);\n          }\n        }\n      }\n    }\n  }\n  v1156 = v1135[616];\n  if ( v1156 )\n  {\n    v1157 = (_QWORD *)qword_4F9F48;\n    *(_QWORD *)qword_4F9F48 = v1230;\n  }\n  else\n  {\n    v1157 = (_QWORD *)qword_4F9F48;\n    *(double *)qword_4F9F48 = (double)v915;\n  }\n  v1158 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v1159 = *((signed int *)off_49F6D0 + 3);\n    if ( v1159 & 1 )\n    {\n      if ( !*(v1184 - 113) )\n      {\n        v1160 = *((_DWORD *)off_49F6D0 + 6);\n        if ( (v1160 != 1 || !*(v1184 - 16)) && !*(_DWORD *)(v1255 + 72) && (v1160 != 1 || !*(_DWORD *)(v1255 + 460)) )\n        {\n          v1173 = *((_QWORD *)off_49F6D0 + 1771);\n          v1174 = 632 * v1159;\n          if ( *(_DWORD *)(v1173 + v1174 + 552) )\n          {\n            v1175 = (signed int *)(v1173 + v1174 + 536);\n            goto LABEL_1261;\n          }\n          if ( *(_DWORD *)(v1173 + v1174 + 556) )\n          {\n            v1175 = (signed int *)(v1173 + v1174 + 540);\nLABEL_1261:\n            v1176 = *(_DWORD *)(v1173 + 632LL * *v1175 + 532);\n          }\n          else\n          {\n            v1176 = 0;\n          }\n          if ( v1176 != (_DWORD)v1243 )\n            *v1157 = 5055640609639927018LL;\n        }\n      }\n    }\n  }\n  v1161 = v1135[727];\n  if ( v1161 == 2 )\n  {\n    v1163 = v1184;\n    *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * v1158[35]) + 2LL * v1158[34]) = (unsigned int)(*(v1184 - 113) - 9) < 2;\n    *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((signed int *)off_49F6D0 + 35)) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = (unsigned int)(*(v1163 - 113) - 9) < 2;\n    *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1) + 2LL * *((signed int *)off_49F6D0 + 34)) = (unsigned int)(*(v1163 - 113) - 9) < 2;\n    *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = (unsigned int)(*(v1163 - 113) - 9) < 2;\n  }\n  else if ( v1161 == 1 )\n  {\n    if ( v1156 == 2 )\n    {\n      if ( v1202 )\n      {\n        v1164 = 0;\n      }\n      else\n      {\n        v1165 = *(v1184 - 113);\n        v1164 = 1;\n        if ( v1165 != 10 )\n          v1164 = v1165 == 9;\n      }\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * v1158[35]) + 2LL * v1158[34]) = v1164;\n      if ( v1202 )\n      {\n        v1166 = 0;\n      }\n      else\n      {\n        v1167 = *(v1184 - 113);\n        v1166 = 1;\n        if ( v1167 != 10 )\n          v1166 = v1167 == 9;\n      }\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((signed int *)off_49F6D0 + 35)) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = v1166;\n      if ( v1202 )\n      {\n        v1168 = 0;\n      }\n      else\n      {\n        v1169 = *(v1184 - 113);\n        v1168 = 1;\n        if ( v1169 != 10 )\n          v1168 = v1169 == 9;\n      }\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1)\n               + 2LL * *((signed int *)off_49F6D0 + 34)) = v1168;\n      if ( v1202 )\n      {\n        v1170 = 0;\n      }\n      else\n      {\n        v1171 = *(v1184 - 113);\n        v1170 = 1;\n        if ( v1171 != 10 )\n          v1170 = v1171 == 9;\n      }\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = v1170;\n    }\n    else if ( v1156 == 1 )\n    {\n      v1162 = v1235;\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * v1158[35]) + 2LL * v1158[34]) = v1235 != 0;\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((signed int *)off_49F6D0 + 35)) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = v1162 != 0;\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1)\n               + 2LL * *((signed int *)off_49F6D0 + 34)) = v1162 != 0;\n      *(_BYTE *)(*((_QWORD *)qword_4F9F58 + 2 * *((_DWORD *)off_49F6D0 + 35) + 1) + 2 * *((_DWORD *)off_49F6D0 + 34) + 1) = v1162 != 0;\n    }\n  }\n  result = dest;\n  if ( *((_DWORD *)dest + 823) )\n    result = sub_41AC30(dword_4FA0A8, *((_DWORD *)qword_4F9BE0 + v1211));\n  return result;\n}\n", 
            "funcStartAddr": "0x469e20L", 
            "funcEndAddr": "0x473b84L", 
            "funcName": "sub_469E20"
        }, 
        {
            "decompiledFuncCode": "void sub_473B90()\n{\n  signed int *v0; // r15\n  __int64 v1; // r10\n  int v2; // er11\n  __int64 v3; // r14\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // rdx\n  __int64 v7; // rbp\n  __int64 v8; // rsi\n  signed int v9; // edi\n  __int64 v10; // rbp\n  signed __int64 v11; // rcx\n  signed __int64 v12; // r8\n  __int64 *v13; // rax\n  __int64 v14; // rdi\n  __int64 v15; // rsi\n  __int64 v16; // rbx\n  int v17; // eax\n  __int64 v18; // r10\n  __int64 v19; // r9\n  __int64 v20; // r13\n  _OWORD **v21; // r14\n  _OWORD **v22; // rdx\n  _OWORD *v23; // rdi\n  _OWORD *v24; // rbp\n  signed __int64 v25; // r11\n  signed __int64 v26; // rsi\n  signed __int64 v27; // rax\n  signed __int64 v28; // rbx\n  signed __int64 v29; // r8\n  _OWORD *v30; // rcx\n  _OWORD *v31; // rdx\n  signed __int64 v32; // rbx\n  signed __int64 v33; // rsi\n  signed __int64 v34; // rax\n  signed __int64 v35; // rbp\n  signed __int64 v36; // rdi\n  __int64 v37; // r8\n  __int64 v38; // r11\n  _OWORD *v39; // rdi\n  _OWORD *v40; // rbp\n  signed __int64 v41; // rdx\n  signed __int64 v42; // rcx\n  signed __int64 v43; // rax\n  signed __int64 v44; // rsi\n  signed __int64 v45; // rbx\n  _OWORD *v46; // rcx\n  _OWORD *v47; // rdx\n  signed __int64 v48; // rbx\n  signed __int64 v49; // rbp\n  signed __int64 v50; // rax\n  signed __int64 v51; // rsi\n  signed __int64 v52; // rdi\n  __int64 v53; // r8\n  __int64 v54; // r11\n  _OWORD *v55; // rdi\n  _OWORD *v56; // rbp\n  signed __int64 v57; // rdx\n  signed __int64 v58; // rcx\n  signed __int64 v59; // rax\n  signed __int64 v60; // rsi\n  signed __int64 v61; // rbx\n  _OWORD *v62; // rcx\n  _OWORD *v63; // rdx\n  signed __int64 v64; // rbx\n  signed __int64 v65; // rbp\n  signed __int64 v66; // rax\n  signed __int64 v67; // rsi\n  signed __int64 v68; // rdi\n  __int64 v69; // r8\n  __int64 v70; // r9\n  _OWORD *v71; // rdi\n  _OWORD *v72; // rbx\n  signed __int64 v73; // rdx\n  signed __int64 v74; // rcx\n  signed __int64 v75; // rax\n  signed __int64 v76; // rsi\n  signed __int64 v77; // rbp\n  _OWORD *v78; // rcx\n  _OWORD *v79; // rdx\n  signed __int64 v80; // rbx\n  signed __int64 v81; // rbp\n  signed __int64 v82; // rax\n  signed __int64 v83; // rsi\n  signed __int64 v84; // rdi\n  signed __int64 v85; // rax\n  bool v86; // sf\n  unsigned __int8 v87; // of\n  __int64 v88; // r11\n  __int64 v89; // rdx\n  signed __int64 v90; // rsi\n  __int64 v91; // rdi\n  __int64 v92; // rbp\n  _DWORD *v93; // rbx\n  _DWORD *v94; // rcx\n  _DWORD *v95; // rcx\n  _DWORD *v96; // rdi\n  bool v97; // zf\n  __int64 *v98; // r8\n  __int64 v99; // rax\n  __int64 v100; // rdi\n  __int64 v101; // r11\n  __int64 v102; // rsi\n  __int64 v103; // rbp\n  __int64 v104; // rbx\n  __int64 v105; // rax\n  __int64 v106; // rax\n  __int64 v107; // rdx\n  __int64 v108; // rsi\n  __int64 v109; // rbp\n  __int64 v110; // rax\n  __int64 v111; // r8\n  signed __int64 v112; // r12\n  int v113; // er10\n  signed __int64 v114; // rbp\n  signed __int64 v115; // rax\n  signed __int64 v116; // rsi\n  __int64 v117; // rbx\n  signed __int64 v118; // rdx\n  signed __int64 v119; // rax\n  int v120; // [rsp+0h] [rbp-5Ch]\n  __int64 v121; // [rsp+4h] [rbp-58h]\n  signed __int64 v122; // [rsp+Ch] [rbp-50h]\n  __int64 v123; // [rsp+14h] [rbp-48h]\n  __int64 v124; // [rsp+1Ch] [rbp-40h]\n  __int64 v125; // [rsp+24h] [rbp-38h]\n\n  v0 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100) )\n  {\n    v121 = *((_QWORD *)off_49F6D0 + 1771);\n    v1 = *((signed int *)off_49F6D0 + 3);\n    v2 = dword_4FA0A8;\n    v120 = *((_DWORD *)off_49F6D0 + 6);\n    v125 = *((_QWORD *)off_49F6D0 + 13);\n    v3 = qword_4F9E30;\n    v4 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v5 = qword_4F9F48;\n    v6 = qword_4F9F48 + 12;\n    v7 = 0LL;\n    do\n    {\n      v8 = 0LL;\n      do\n      {\n        *(_DWORD *)(v6 + 4 * v8 - 4) = *(unsigned __int16 *)(*(_QWORD *)(v4\n                                                                       + 8 * ((signed int)v7 + (signed __int64)v0[39]))\n                                                           + 2LL * ((signed int)v8 + v0[38]));\n        *(_DWORD *)(v6 + 4 * v8) = *(unsigned __int16 *)(*(_QWORD *)(v4 + 8 * ((signed int)v7 + (signed __int64)v0[39]))\n                                                       + 2LL * ((signed int)v8 + v0[38] + 1));\n        v8 += 2LL;\n      }\n      while ( v8 != 16 );\n      ++v7;\n      v6 += 64LL;\n    }\n    while ( v7 != 16 );\n    if ( v0[18175] )\n    {\n      v9 = v0[18178];\n      if ( v9 > 0 )\n      {\n        LODWORD(v10) = v0[18177];\n        v11 = v5 + 2056;\n        v12 = 0LL;\n        do\n        {\n          if ( (signed int)v10 > 0 )\n          {\n            v13 = *(__int64 **)(v3 + 6464);\n            v14 = *v13;\n            v15 = v13[1];\n            v16 = 0LL;\n            do\n            {\n              *(_DWORD *)(v11 + 4 * v16 - 1024) = *(unsigned __int16 *)(*(_QWORD *)(v14\n                                                                                  + 8\n                                                                                  * ((signed int)v12\n                                                                                   + (signed __int64)v0[41]))\n                                                                      + 2LL * ((signed int)v16 + v0[40]));\n              *(_DWORD *)(v11 + 4 * v16) = *(unsigned __int16 *)(*(_QWORD *)(v15\n                                                                           + 8\n                                                                           * ((signed int)v12 + (signed __int64)v0[41]))\n                                                               + 2LL * ((signed int)v16 + v0[40]));\n              ++v16;\n              v10 = v0[18177];\n            }\n            while ( v16 < v10 );\n            v9 = v0[18178];\n          }\n          ++v12;\n          v11 += 64LL;\n        }\n        while ( v12 < v9 );\n      }\n    }\n    *(_DWORD *)(v5 + 3224) = v2;\n    *(_DWORD *)(v5 + 3328) = v0[18095];\n    *(_DWORD *)(v5 + 3208) = *(_DWORD *)(v121 + 632 * v1 + 460);\n    *(_QWORD *)(v5 + 3216) = *(_QWORD *)(v121 + 632 * v1 + 464);\n    v17 = *(_DWORD *)(v121 + 632 * v1 + 72);\n    *(_DWORD *)(v5 + 3096) = v17;\n    v122 = 632 * v1;\n    *(_DWORD *)(v5 + 3336) = *(_DWORD *)(v121 + 632 * v1 + 572);\n    if ( v2 && !v17 )\n      *(_DWORD *)(v5 + 3224) = 0;\n    if ( v0[18173] >= -3 )\n    {\n      v124 = *((_QWORD *)v0 + 1767);\n      v123 = *(_QWORD *)(v5 + 3080);\n      v18 = 0LL;\n      do\n      {\n        v19 = *(_QWORD *)(v124 + 8 * v18);\n        v20 = *(_QWORD *)(v123 + 8 * v18);\n        v21 = *(_OWORD ***)v19;\n        v22 = *(_OWORD ***)v20;\n        v23 = **(_OWORD ***)v19;\n        v24 = **(_OWORD ***)v20;\n        if ( v24 >= (_OWORD *)((char *)v23 + 260) || v23 >= (_OWORD *)((char *)v24 + 260) )\n        {\n          *v24 = *v23;\n          v24[1] = v23[1];\n          v24[2] = v23[2];\n          v24[3] = v23[3];\n          v24[4] = v23[4];\n          v24[5] = v23[5];\n          v24[6] = v23[6];\n          v24[7] = v23[7];\n          v24[8] = v23[8];\n          v24[9] = v23[9];\n          v24[10] = v23[10];\n          v24[11] = v23[11];\n          v24[12] = v23[12];\n          v24[13] = v23[13];\n          v24[14] = v23[14];\n          v24[15] = v23[15];\n          v25 = 64LL;\n        }\n        else\n        {\n          v25 = 0LL;\n        }\n        v26 = v25 - 64;\n        v27 = -1LL;\n        v28 = v25;\n        do\n        {\n          *((_DWORD *)v24 + v28) = *((_DWORD *)v23 + v28);\n          v29 = v26;\n          ++v28;\n          ++v26;\n          ++v27;\n        }\n        while ( v27 );\n        if ( v25 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v24 + v29 + 65) = *((_DWORD *)v23 + v29 + 65);\n            *((_DWORD *)v24 + v29 + 66) = *((_DWORD *)v23 + v29 + 66);\n            *((_DWORD *)v24 + v29 + 67) = *((_DWORD *)v23 + v29 + 67);\n            *((_DWORD *)v24 + v29 + 68) = *((_DWORD *)v23 + v29 + 68);\n            v29 += 4LL;\n          }\n          while ( v29 );\n        }\n        v30 = v21[1];\n        v31 = v22[1];\n        if ( v31 >= (_OWORD *)((char *)v30 + 260) || v30 >= (_OWORD *)((char *)v31 + 260) )\n        {\n          *v31 = *v30;\n          v31[1] = v30[1];\n          v31[2] = v30[2];\n          v31[3] = v30[3];\n          v31[4] = v30[4];\n          v31[5] = v30[5];\n          v31[6] = v30[6];\n          v31[7] = v30[7];\n          v31[8] = v30[8];\n          v31[9] = v30[9];\n          v31[10] = v30[10];\n          v31[11] = v30[11];\n          v31[12] = v30[12];\n          v31[13] = v30[13];\n          v31[14] = v30[14];\n          v31[15] = v30[15];\n          v32 = 64LL;\n        }\n        else\n        {\n          v32 = 0LL;\n        }\n        v33 = v32 - 64;\n        v34 = -1LL;\n        v35 = v32;\n        do\n        {\n          *((_DWORD *)v31 + v35) = *((_DWORD *)v30 + v35);\n          v36 = v33;\n          ++v35;\n          ++v33;\n          ++v34;\n        }\n        while ( v34 );\n        if ( v32 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v31 + v36 + 65) = *((_DWORD *)v30 + v36 + 65);\n            *((_DWORD *)v31 + v36 + 66) = *((_DWORD *)v30 + v36 + 66);\n            *((_DWORD *)v31 + v36 + 67) = *((_DWORD *)v30 + v36 + 67);\n            *((_DWORD *)v31 + v36 + 68) = *((_DWORD *)v30 + v36 + 68);\n            v36 += 4LL;\n          }\n          while ( v36 );\n        }\n        v37 = *(_QWORD *)(v19 + 8);\n        v38 = *(_QWORD *)(v20 + 8);\n        v39 = *(_OWORD **)v37;\n        v40 = *(_OWORD **)v38;\n        if ( *(_QWORD *)v38 >= (unsigned __int64)(*(_QWORD *)v37 + 260LL) || v39 >= (_OWORD *)((char *)v40 + 260) )\n        {\n          *v40 = *v39;\n          v40[1] = v39[1];\n          v40[2] = v39[2];\n          v40[3] = v39[3];\n          v40[4] = v39[4];\n          v40[5] = v39[5];\n          v40[6] = v39[6];\n          v40[7] = v39[7];\n          v40[8] = v39[8];\n          v40[9] = v39[9];\n          v40[10] = v39[10];\n          v40[11] = v39[11];\n          v40[12] = v39[12];\n          v40[13] = v39[13];\n          v40[14] = v39[14];\n          v40[15] = v39[15];\n          v41 = 64LL;\n        }\n        else\n        {\n          v41 = 0LL;\n        }\n        v42 = v41 - 64;\n        v43 = -1LL;\n        v44 = v41;\n        do\n        {\n          *((_DWORD *)v40 + v44) = *((_DWORD *)v39 + v44);\n          v45 = v42;\n          ++v44;\n          ++v42;\n          ++v43;\n        }\n        while ( v43 );\n        if ( v41 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v40 + v45 + 65) = *((_DWORD *)v39 + v45 + 65);\n            *((_DWORD *)v40 + v45 + 66) = *((_DWORD *)v39 + v45 + 66);\n            *((_DWORD *)v40 + v45 + 67) = *((_DWORD *)v39 + v45 + 67);\n            *((_DWORD *)v40 + v45 + 68) = *((_DWORD *)v39 + v45 + 68);\n            v45 += 4LL;\n          }\n          while ( v45 );\n        }\n        v46 = *(_OWORD **)(v37 + 8);\n        v47 = *(_OWORD **)(v38 + 8);\n        if ( v47 >= (_OWORD *)((char *)v46 + 260) || v46 >= (_OWORD *)((char *)v47 + 260) )\n        {\n          *v47 = *v46;\n          v47[1] = v46[1];\n          v47[2] = v46[2];\n          v47[3] = v46[3];\n          v47[4] = v46[4];\n          v47[5] = v46[5];\n          v47[6] = v46[6];\n          v47[7] = v46[7];\n          v47[8] = v46[8];\n          v47[9] = v46[9];\n          v47[10] = v46[10];\n          v47[11] = v46[11];\n          v47[12] = v46[12];\n          v47[13] = v46[13];\n          v47[14] = v46[14];\n          v47[15] = v46[15];\n          v48 = 64LL;\n        }\n        else\n        {\n          v48 = 0LL;\n        }\n        v49 = v48 - 64;\n        v50 = -1LL;\n        v51 = v48;\n        do\n        {\n          *((_DWORD *)v47 + v51) = *((_DWORD *)v46 + v51);\n          v52 = v49;\n          ++v51;\n          ++v49;\n          ++v50;\n        }\n        while ( v50 );\n        if ( v48 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v47 + v52 + 65) = *((_DWORD *)v46 + v52 + 65);\n            *((_DWORD *)v47 + v52 + 66) = *((_DWORD *)v46 + v52 + 66);\n            *((_DWORD *)v47 + v52 + 67) = *((_DWORD *)v46 + v52 + 67);\n            *((_DWORD *)v47 + v52 + 68) = *((_DWORD *)v46 + v52 + 68);\n            v52 += 4LL;\n          }\n          while ( v52 );\n        }\n        v53 = *(_QWORD *)(v19 + 16);\n        v54 = *(_QWORD *)(v20 + 16);\n        v55 = *(_OWORD **)v53;\n        v56 = *(_OWORD **)v54;\n        if ( *(_QWORD *)v54 >= (unsigned __int64)(*(_QWORD *)v53 + 260LL) || v55 >= (_OWORD *)((char *)v56 + 260) )\n        {\n          *v56 = *v55;\n          v56[1] = v55[1];\n          v56[2] = v55[2];\n          v56[3] = v55[3];\n          v56[4] = v55[4];\n          v56[5] = v55[5];\n          v56[6] = v55[6];\n          v56[7] = v55[7];\n          v56[8] = v55[8];\n          v56[9] = v55[9];\n          v56[10] = v55[10];\n          v56[11] = v55[11];\n          v56[12] = v55[12];\n          v56[13] = v55[13];\n          v56[14] = v55[14];\n          v56[15] = v55[15];\n          v57 = 64LL;\n        }\n        else\n        {\n          v57 = 0LL;\n        }\n        v58 = v57 - 64;\n        v59 = -1LL;\n        v60 = v57;\n        do\n        {\n          *((_DWORD *)v56 + v60) = *((_DWORD *)v55 + v60);\n          v61 = v58;\n          ++v60;\n          ++v58;\n          ++v59;\n        }\n        while ( v59 );\n        if ( v57 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v56 + v61 + 65) = *((_DWORD *)v55 + v61 + 65);\n            *((_DWORD *)v56 + v61 + 66) = *((_DWORD *)v55 + v61 + 66);\n            *((_DWORD *)v56 + v61 + 67) = *((_DWORD *)v55 + v61 + 67);\n            *((_DWORD *)v56 + v61 + 68) = *((_DWORD *)v55 + v61 + 68);\n            v61 += 4LL;\n          }\n          while ( v61 );\n        }\n        v62 = *(_OWORD **)(v53 + 8);\n        v63 = *(_OWORD **)(v54 + 8);\n        if ( v63 >= (_OWORD *)((char *)v62 + 260) || v62 >= (_OWORD *)((char *)v63 + 260) )\n        {\n          *v63 = *v62;\n          v63[1] = v62[1];\n          v63[2] = v62[2];\n          v63[3] = v62[3];\n          v63[4] = v62[4];\n          v63[5] = v62[5];\n          v63[6] = v62[6];\n          v63[7] = v62[7];\n          v63[8] = v62[8];\n          v63[9] = v62[9];\n          v63[10] = v62[10];\n          v63[11] = v62[11];\n          v63[12] = v62[12];\n          v63[13] = v62[13];\n          v63[14] = v62[14];\n          v63[15] = v62[15];\n          v64 = 64LL;\n        }\n        else\n        {\n          v64 = 0LL;\n        }\n        v65 = v64 - 64;\n        v66 = -1LL;\n        v67 = v64;\n        do\n        {\n          *((_DWORD *)v63 + v67) = *((_DWORD *)v62 + v67);\n          v68 = v65;\n          ++v67;\n          ++v65;\n          ++v66;\n        }\n        while ( v66 );\n        if ( v64 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v63 + v68 + 65) = *((_DWORD *)v62 + v68 + 65);\n            *((_DWORD *)v63 + v68 + 66) = *((_DWORD *)v62 + v68 + 66);\n            *((_DWORD *)v63 + v68 + 67) = *((_DWORD *)v62 + v68 + 67);\n            *((_DWORD *)v63 + v68 + 68) = *((_DWORD *)v62 + v68 + 68);\n            v68 += 4LL;\n          }\n          while ( v68 );\n        }\n        v69 = *(_QWORD *)(v19 + 24);\n        v70 = *(_QWORD *)(v20 + 24);\n        v71 = *(_OWORD **)v69;\n        v72 = *(_OWORD **)v70;\n        if ( *(_QWORD *)v70 >= (unsigned __int64)(*(_QWORD *)v69 + 260LL) || v71 >= (_OWORD *)((char *)v72 + 260) )\n        {\n          *v72 = *v71;\n          v72[1] = v71[1];\n          v72[2] = v71[2];\n          v72[3] = v71[3];\n          v72[4] = v71[4];\n          v72[5] = v71[5];\n          v72[6] = v71[6];\n          v72[7] = v71[7];\n          v72[8] = v71[8];\n          v72[9] = v71[9];\n          v72[10] = v71[10];\n          v72[11] = v71[11];\n          v72[12] = v71[12];\n          v72[13] = v71[13];\n          v72[14] = v71[14];\n          v72[15] = v71[15];\n          v73 = 64LL;\n        }\n        else\n        {\n          v73 = 0LL;\n        }\n        v74 = v73 - 64;\n        v75 = -1LL;\n        v76 = v73;\n        do\n        {\n          *((_DWORD *)v72 + v76) = *((_DWORD *)v71 + v76);\n          v77 = v74;\n          ++v76;\n          ++v74;\n          ++v75;\n        }\n        while ( v75 );\n        if ( v73 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v72 + v77 + 65) = *((_DWORD *)v71 + v77 + 65);\n            *((_DWORD *)v72 + v77 + 66) = *((_DWORD *)v71 + v77 + 66);\n            *((_DWORD *)v72 + v77 + 67) = *((_DWORD *)v71 + v77 + 67);\n            *((_DWORD *)v72 + v77 + 68) = *((_DWORD *)v71 + v77 + 68);\n            v77 += 4LL;\n          }\n          while ( v77 );\n        }\n        v78 = *(_OWORD **)(v69 + 8);\n        v79 = *(_OWORD **)(v70 + 8);\n        if ( v79 >= (_OWORD *)((char *)v78 + 260) || v78 >= (_OWORD *)((char *)v79 + 260) )\n        {\n          *v79 = *v78;\n          v79[1] = v78[1];\n          v79[2] = v78[2];\n          v79[3] = v78[3];\n          v79[4] = v78[4];\n          v79[5] = v78[5];\n          v79[6] = v78[6];\n          v79[7] = v78[7];\n          v79[8] = v78[8];\n          v79[9] = v78[9];\n          v79[10] = v78[10];\n          v79[11] = v78[11];\n          v79[12] = v78[12];\n          v79[13] = v78[13];\n          v79[14] = v78[14];\n          v79[15] = v78[15];\n          v80 = 64LL;\n        }\n        else\n        {\n          v80 = 0LL;\n        }\n        v81 = v80 - 64;\n        v82 = -1LL;\n        v83 = v80;\n        do\n        {\n          *((_DWORD *)v79 + v83) = *((_DWORD *)v78 + v83);\n          v84 = v81;\n          ++v83;\n          ++v81;\n          ++v82;\n        }\n        while ( v82 );\n        if ( v80 != 64 )\n        {\n          do\n          {\n            *((_DWORD *)v79 + v84 + 65) = *((_DWORD *)v78 + v84 + 65);\n            *((_DWORD *)v79 + v84 + 66) = *((_DWORD *)v78 + v84 + 66);\n            *((_DWORD *)v79 + v84 + 67) = *((_DWORD *)v78 + v84 + 67);\n            *((_DWORD *)v79 + v84 + 68) = *((_DWORD *)v78 + v84 + 68);\n            v84 += 4LL;\n          }\n          while ( v84 );\n        }\n        v85 = v0[18173] + 3LL;\n        v87 = __OFSUB__(v18, v85);\n        v86 = v18++ - v85 < 0;\n      }\n      while ( v86 ^ v87 );\n    }\n    v88 = *((_QWORD *)v0 + 1768);\n    v89 = *(_QWORD *)(v5 + 3088);\n    v90 = -24LL;\n    do\n    {\n      v91 = *(_QWORD *)(v88 + v90 + 24);\n      v92 = *(_QWORD *)(v89 + v90 + 24);\n      v93 = *(_DWORD **)v91;\n      v94 = *(_DWORD **)v92;\n      *v94 = **(_DWORD **)v91;\n      v94[1] = v93[1];\n      v94[2] = v93[2];\n      v94[3] = v93[3];\n      v94[4] = v93[4];\n      v94[5] = v93[5];\n      v94[6] = v93[6];\n      v94[7] = v93[7];\n      v94[8] = v93[8];\n      v94[9] = v93[9];\n      v94[10] = v93[10];\n      v94[11] = v93[11];\n      v94[12] = v93[12];\n      v94[13] = v93[13];\n      v94[14] = v93[14];\n      v94[15] = v93[15];\n      v94[16] = v93[16];\n      v94[17] = v93[17];\n      v95 = *(_DWORD **)(v91 + 8);\n      v96 = *(_DWORD **)(v92 + 8);\n      *v96 = *v95;\n      v96[1] = v95[1];\n      v96[2] = v95[2];\n      v96[3] = v95[3];\n      v96[4] = v95[4];\n      v96[5] = v95[5];\n      v96[6] = v95[6];\n      v96[7] = v95[7];\n      v96[8] = v95[8];\n      v96[9] = v95[9];\n      v96[10] = v95[10];\n      v96[11] = v95[11];\n      v96[12] = v95[12];\n      v96[13] = v95[13];\n      v96[14] = v95[14];\n      v96[15] = v95[15];\n      v96[16] = v95[16];\n      v97 = v90 == -8;\n      v90 += 8LL;\n      v96[17] = v95[17];\n    }\n    while ( !v97 );\n    *(_DWORD *)(v5 + 3104) = *(_DWORD *)(v121 + v122 + 472);\n    *(_DWORD *)(v5 + 3120) = *(_DWORD *)(v121 + v122 + 488);\n    *(_DWORD *)(v5 + 3108) = *(_DWORD *)(v121 + v122 + 476);\n    *(_DWORD *)(v5 + 3124) = *(_DWORD *)(v121 + v122 + 492);\n    *(_DWORD *)(v5 + 3112) = *(_DWORD *)(v121 + v122 + 480);\n    *(_DWORD *)(v5 + 3128) = *(_DWORD *)(v121 + v122 + 496);\n    *(_DWORD *)(v5 + 3116) = *(_DWORD *)(v121 + v122 + 484);\n    *(_DWORD *)(v5 + 3132) = *(_DWORD *)(v121 + v122 + 500);\n    v98 = *(__int64 **)(qword_4F9E30 + 6480);\n    v99 = *v98;\n    LODWORD(v100) = v0[36];\n    v101 = v0[37];\n    v102 = *(_QWORD *)(*v98 + 8LL * (signed int)v100);\n    *(_WORD *)(v5 + 3264) = *(_WORD *)(v102 + 2 * v101);\n    v103 = *(_QWORD *)(v99 + 8LL * (signed int)v100 + 8);\n    *(_WORD *)(v5 + 3266) = *(_WORD *)(v103 + 2 * v101);\n    v104 = *(_QWORD *)(v99 + 8LL * (signed int)v100 + 16);\n    *(_WORD *)(v5 + 3268) = *(_WORD *)(v104 + 2 * v101);\n    v105 = *(_QWORD *)(v99 + 8LL * (signed int)v100 + 24);\n    *(_WORD *)(v5 + 3270) = *(_WORD *)(v105 + 2 * v101);\n    *(_WORD *)(v5 + 3272) = *(_WORD *)(v102 + 2 * v101 + 2);\n    *(_WORD *)(v5 + 3274) = *(_WORD *)(v103 + 2 * v101 + 2);\n    *(_WORD *)(v5 + 3276) = *(_WORD *)(v104 + 2 * v101 + 2);\n    *(_WORD *)(v5 + 3278) = *(_WORD *)(v105 + 2 * v101 + 2);\n    *(_WORD *)(v5 + 3280) = *(_WORD *)(v102 + 2 * v101 + 4);\n    *(_WORD *)(v5 + 3282) = *(_WORD *)(v103 + 2 * v101 + 4);\n    *(_WORD *)(v5 + 3284) = *(_WORD *)(v104 + 2 * v101 + 4);\n    *(_WORD *)(v5 + 3286) = *(_WORD *)(v105 + 2 * v101 + 4);\n    *(_WORD *)(v5 + 3288) = *(_WORD *)(v102 + 2 * v101 + 6);\n    *(_WORD *)(v5 + 3290) = *(_WORD *)(v103 + 2 * v101 + 6);\n    *(_WORD *)(v5 + 3292) = *(_WORD *)(v104 + 2 * v101 + 6);\n    *(_WORD *)(v5 + 3294) = *(_WORD *)(v105 + 2 * v101 + 6);\n    if ( v120 == 1 )\n    {\n      v106 = v98[1];\n      v107 = *(_QWORD *)(v106 + 8LL * (signed int)v100);\n      *(_WORD *)(v5 + 3296) = *(_WORD *)(v107 + 2 * v101);\n      v108 = *(_QWORD *)(v106 + 8LL * (signed int)v100 + 8);\n      *(_WORD *)(v5 + 3298) = *(_WORD *)(v108 + 2 * v101);\n      v109 = *(_QWORD *)(v106 + 8LL * (signed int)v100 + 16);\n      *(_WORD *)(v5 + 3300) = *(_WORD *)(v109 + 2 * v101);\n      v110 = *(_QWORD *)(v106 + 8LL * (signed int)v100 + 24);\n      *(_WORD *)(v5 + 3302) = *(_WORD *)(v110 + 2 * v101);\n      *(_WORD *)(v5 + 3304) = *(_WORD *)(v107 + 2 * v101 + 2);\n      *(_WORD *)(v5 + 3306) = *(_WORD *)(v108 + 2 * v101 + 2);\n      *(_WORD *)(v5 + 3308) = *(_WORD *)(v109 + 2 * v101 + 2);\n      *(_WORD *)(v5 + 3310) = *(_WORD *)(v110 + 2 * v101 + 2);\n      *(_WORD *)(v5 + 3312) = *(_WORD *)(v107 + 2 * v101 + 4);\n      *(_WORD *)(v5 + 3314) = *(_WORD *)(v108 + 2 * v101 + 4);\n      *(_WORD *)(v5 + 3316) = *(_WORD *)(v109 + 2 * v101 + 4);\n      *(_WORD *)(v5 + 3318) = *(_WORD *)(v110 + 2 * v101 + 4);\n      *(_WORD *)(v5 + 3320) = *(_WORD *)(v107 + 2 * v101 + 6);\n      *(_WORD *)(v5 + 3322) = *(_WORD *)(v108 + 2 * v101 + 6);\n      *(_WORD *)(v5 + 3324) = *(_WORD *)(v109 + 2 * v101 + 6);\n      *(_WORD *)(v5 + 3326) = *(_WORD *)(v110 + 2 * v101 + 6);\n      *(_DWORD *)(v5 + 3100) = *(_DWORD *)(v121 + v122 + 580);\n    }\n    v111 = *(_QWORD *)(v5 + 3136);\n    v112 = v5 + 3144;\n    v113 = 0;\n    do\n    {\n      v114 = v125 + 8LL * (signed int)v100;\n      v115 = v111 + 8LL * (signed int)v100;\n      v116 = (signed int)v100 - 1LL;\n      v117 = 0LL;\n      do\n      {\n        *(_DWORD *)(*(_QWORD *)(v115 + 8 * v117) + 4 * v101) = *(_DWORD *)(*(_QWORD *)(v114 + 8 * v117) + 4 * v101);\n        *(_DWORD *)(v112 + 4LL * v113 + 4 * v117) = *(_DWORD *)(v122 + v121 + 332 + 4LL * v113 + 4 * v117);\n        v100 = v0[36];\n        v118 = v116 + v117++ + 1;\n      }\n      while ( v118 < v100 + 3 );\n      v119 = v0[37] + 3LL;\n      v113 += v117;\n      v87 = __OFSUB__(v101, v119);\n      v86 = v101++ - v119 < 0;\n    }\n    while ( v86 ^ v87 );\n  }\n}\n", 
            "funcStartAddr": "0x473b90L", 
            "funcEndAddr": "0x474d98L", 
            "funcName": "sub_473B90"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_474DA0(__int64 a1, __int64 a2)\n{\n  return sub_474EE0((__int64)qword_4A0108);\n}\n", 
            "funcStartAddr": "0x474da0L", 
            "funcEndAddr": "0x474dacL", 
            "funcName": "sub_474DA0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_474DB0(__int64 a1, __int64 a2)\n{\n  return sub_4750F0((__int64)qword_4A0108);\n}\n", 
            "funcStartAddr": "0x474db0L", 
            "funcEndAddr": "0x474dbcL", 
            "funcName": "sub_474DB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_474DC0(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = (void *)*((_QWORD *)ptr + 1);\n    if ( v2 )\n      free(v2);\n    v3 = (void *)*((_QWORD *)v1 + 2);\n    if ( v3 )\n      free(v3);\n    sub_40AB70(*((void **)v1 + 4));\n    sub_40AB80(*((void **)v1 + 5));\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x474dc0L", 
            "funcEndAddr": "0x474e02L", 
            "funcName": "sub_474DC0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_474E10()\n{\n  _QWORD *v0; // rbx\n  _DWORD *v1; // rax\n  _BOOL4 v2; // ecx\n  size_t v3; // r14\n  void *v4; // rax\n  void *v5; // rax\n  int v6; // eax\n\n  v0 = calloc(1uLL, 0x160uLL);\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"init_coding_state: cs\");\n  v1 = dest;\n  v2 = *((_DWORD *)dest + 591) != 0;\n  v3 = (unsigned int)(2 * v2 + 1);\n  *(_DWORD *)v0 = v3;\n  if ( v1[589] == 1 )\n  {\n    v4 = calloc((unsigned int)(2 * v2 + 1), 0x68uLL);\n    v0[1] = v4;\n    if ( !v4 )\n      sub_43EF40(0LL, (__int64)\"init_coding_state: cs->encenv\");\n  }\n  v5 = calloc(v3, 0x30uLL);\n  v0[2] = v5;\n  if ( !v5 )\n    sub_43EF40(0LL, (__int64)\"init_coding_state: cs->bitstream\");\n  v6 = *((_DWORD *)dest + 589);\n  *((_DWORD *)v0 + 6) = v6;\n  if ( v6 == 1 )\n  {\n    v0[4] = sub_40AB10();\n    v0[5] = sub_40AB40();\n  }\n  else\n  {\n    *((_OWORD *)v0 + 2) = 0LL;\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x474e10L", 
            "funcEndAddr": "0x474ed7L", 
            "funcName": "sub_474E10"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_474EE0(__int64 a1)\n{\n  __int64 v1; // r14\n  void *result; // rax\n  _QWORD *v3; // r9\n  __int64 v4; // r12\n  __int64 v5; // r13\n  __int64 v6; // rcx\n  const void *v7; // rsi\n  void *v8; // rdi\n  void *v9; // r15\n  __int64 v10; // rcx\n  signed __int64 v11; // rdx\n  __int64 v12; // r10\n  signed __int64 v13; // r8\n  __int64 v14; // rax\n  __int128 *v15; // r11\n  __int64 v16; // rbx\n  __int64 v17; // r9\n  __int128 v18; // xmm0\n  __int128 v19; // xmm1\n  signed int v20; // ebp\n  __int64 v21; // rcx\n  __int64 v22; // rdx\n  signed __int64 v23; // rsi\n  __int128 *v24; // rax\n  __int64 v25; // rdi\n  __int128 v26; // xmm0\n  __int128 v27; // xmm1\n  signed int v28; // edi\n  __int128 v29; // xmm0\n  void *src; // [rsp+0h] [rbp-38h]\n\n  v1 = a1;\n  result = dest;\n  if ( *((_DWORD *)dest + 616) )\n  {\n    v3 = off_49F6D0;\n    v4 = *((_QWORD *)off_49F6D0 + 1771);\n    v5 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(a1 + 24) == 1 )\n    {\n      v6 = *((_QWORD *)off_49F6D0 + 1770);\n      v7 = *(const void **)(v6 + 32);\n      src = *(void **)(v6 + 40);\n      v8 = *(void **)(a1 + 32);\n      v9 = *(void **)(v1 + 40);\n      v10 = 0LL;\n      v11 = 8LL;\n      v12 = 0LL;\n      v13 = 0LL;\n      while ( 1 )\n      {\n        v20 = 1;\n        if ( !*(_DWORD *)(v3[1769] + 4LL) )\n          v20 = *(_DWORD *)v1;\n        if ( v13 >= v20 )\n          break;\n        v14 = *(_QWORD *)(v3[1770] + 24LL);\n        v15 = *(__int128 **)(v14 + v11 - 8);\n        v16 = *(_QWORD *)(v1 + 8);\n        v17 = *(_QWORD *)(v1 + 16);\n        *(_QWORD *)(v16 + v10 + 96) = *(_QWORD *)(v14 + v11 + 96);\n        *(_OWORD *)(v16 + v10 + 80) = *(_OWORD *)(v14 + v11 + 80);\n        *(_OWORD *)(v16 + v10 + 64) = *(_OWORD *)(v14 + v11 + 64);\n        *(_OWORD *)(v16 + v10 + 48) = *(_OWORD *)(v14 + v11 + 48);\n        *(_OWORD *)(v16 + v10 + 32) = *(_OWORD *)(v14 + v11 + 32);\n        *(_OWORD *)(v16 + v10 + 16) = *(_OWORD *)(v14 + v11 + 16);\n        *(_OWORD *)(v16 + v10) = *(_OWORD *)(v14 + v11);\n        v18 = *v15;\n        v19 = v15[1];\n        *(_OWORD *)(v17 + v12 + 32) = v15[2];\n        *(_OWORD *)(v17 + v12 + 16) = v19;\n        *(_OWORD *)(v17 + v12) = v18;\n        ++v13;\n        v3 = off_49F6D0;\n        v12 += 48LL;\n        v10 += 104LL;\n        v11 += 120LL;\n      }\n      memcpy(v8, v7, 0x5E0uLL);\n      memcpy(v9, src, 0x2F60uLL);\n    }\n    else\n    {\n      v21 = 0LL;\n      v22 = 0LL;\n      v23 = 0LL;\n      while ( 1 )\n      {\n        v28 = 1;\n        if ( !*(_DWORD *)(v3[1769] + 4LL) )\n          v28 = *(_DWORD *)v1;\n        if ( v23 >= v28 )\n          break;\n        v24 = *(__int128 **)(*(_QWORD *)(v3[1770] + 24LL) + v21);\n        v25 = *(_QWORD *)(v1 + 16);\n        v26 = *v24;\n        v27 = v24[1];\n        *(_OWORD *)(v25 + v22 + 32) = v24[2];\n        *(_OWORD *)(v25 + v22 + 16) = v27;\n        *(_OWORD *)(v25 + v22) = v26;\n        ++v23;\n        v3 = off_49F6D0;\n        v22 += 48LL;\n        v21 += 120LL;\n      }\n    }\n    *(_DWORD *)(v1 + 48) = *(_DWORD *)(v4 + 632 * v5);\n    v29 = *(_OWORD *)(v4 + 632 * v5 + 20);\n    *(_OWORD *)(v1 + 68) = *(_OWORD *)(v4 + 632 * v5 + 36);\n    *(_OWORD *)(v1 + 52) = v29;\n    memcpy((void *)(v1 + 84), (const void *)(v4 + 632 * v5 + 76), 0x100uLL);\n    result = *(void **)(v4 + 632 * v5 + 504);\n    *(_QWORD *)(v1 + 344) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x474ee0L", 
            "funcEndAddr": "0x4750e5L", 
            "funcName": "sub_474EE0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4750F0(__int64 a1)\n{\n  __int64 v1; // r14\n  void *result; // rax\n  _QWORD *v3; // r9\n  __int64 v4; // r12\n  __int64 v5; // r13\n  __int64 v6; // rcx\n  void *v7; // rdi\n  const void *v8; // rsi\n  const void *v9; // r15\n  __int64 v10; // r11\n  signed __int64 v11; // rdx\n  __int64 v12; // r10\n  signed __int64 v13; // r8\n  __int64 v14; // rax\n  _OWORD *v15; // r9\n  __int64 v16; // rbx\n  __int64 v17; // rbp\n  __int128 v18; // xmm0\n  __int128 v19; // xmm1\n  __int128 v20; // xmm2\n  __int128 v21; // xmm0\n  __int128 v22; // xmm1\n  signed int v23; // ebp\n  __int64 v24; // rcx\n  __int64 v25; // rdx\n  signed __int64 v26; // rsi\n  _OWORD *v27; // rax\n  __int64 v28; // rdi\n  __int128 v29; // xmm0\n  __int128 v30; // xmm1\n  signed int v31; // edi\n  signed __int64 v32; // rbx\n  __int128 v33; // xmm0\n  void *dest; // [rsp+0h] [rbp-38h]\n\n  v1 = a1;\n  result = ::dest;\n  if ( *((_DWORD *)::dest + 616) )\n  {\n    v3 = off_49F6D0;\n    v4 = *((_QWORD *)off_49F6D0 + 1771);\n    v5 = *((signed int *)off_49F6D0 + 3);\n    if ( *(_DWORD *)(a1 + 24) == 1 )\n    {\n      v6 = *((_QWORD *)off_49F6D0 + 1770);\n      v7 = *(void **)(v6 + 32);\n      dest = *(void **)(v6 + 40);\n      v8 = *(const void **)(v1 + 32);\n      v9 = *(const void **)(v1 + 40);\n      v10 = 0LL;\n      v11 = 8LL;\n      v12 = 0LL;\n      v13 = 0LL;\n      while ( 1 )\n      {\n        v23 = 1;\n        if ( !*(_DWORD *)(v3[1769] + 4LL) )\n          v23 = *(_DWORD *)v1;\n        if ( v13 >= v23 )\n          break;\n        v14 = *(_QWORD *)(v3[1770] + 24LL);\n        v15 = *(_OWORD **)(v14 + v11 - 8);\n        v16 = *(_QWORD *)(v1 + 8);\n        v17 = *(_QWORD *)(v1 + 16);\n        *(_QWORD *)(v14 + v11 + 96) = *(_QWORD *)(v16 + v10 + 96);\n        *(_OWORD *)(v14 + v11 + 80) = *(_OWORD *)(v16 + v10 + 80);\n        *(_OWORD *)(v14 + v11 + 64) = *(_OWORD *)(v16 + v10 + 64);\n        v18 = *(_OWORD *)(v16 + v10);\n        v19 = *(_OWORD *)(v16 + v10 + 16);\n        v20 = *(_OWORD *)(v16 + v10 + 32);\n        *(_OWORD *)(v14 + v11 + 48) = *(_OWORD *)(v16 + v10 + 48);\n        *(_OWORD *)(v14 + v11 + 32) = v20;\n        *(_OWORD *)(v14 + v11 + 16) = v19;\n        *(_OWORD *)(v14 + v11) = v18;\n        v21 = *(_OWORD *)(v17 + v12);\n        v22 = *(_OWORD *)(v17 + v12 + 16);\n        v15[2] = *(_OWORD *)(v17 + v12 + 32);\n        v15[1] = v22;\n        *v15 = v21;\n        ++v13;\n        v3 = off_49F6D0;\n        v12 += 48LL;\n        v10 += 104LL;\n        v11 += 120LL;\n      }\n      memcpy(v7, v8, 0x5E0uLL);\n      memcpy(dest, v9, 0x2F60uLL);\n    }\n    else\n    {\n      v24 = 0LL;\n      v25 = 0LL;\n      v26 = 0LL;\n      while ( 1 )\n      {\n        v31 = 1;\n        if ( !*(_DWORD *)(v3[1769] + 4LL) )\n          v31 = *(_DWORD *)v1;\n        if ( v26 >= v31 )\n          break;\n        v27 = *(_OWORD **)(*(_QWORD *)(v3[1770] + 24LL) + v24);\n        v28 = *(_QWORD *)(v1 + 16);\n        v29 = *(_OWORD *)(v28 + v25);\n        v30 = *(_OWORD *)(v28 + v25 + 16);\n        v27[2] = *(_OWORD *)(v28 + v25 + 32);\n        v27[1] = v30;\n        *v27 = v29;\n        ++v26;\n        v3 = off_49F6D0;\n        v25 += 48LL;\n        v24 += 120LL;\n      }\n    }\n    v32 = 632 * v5;\n    *(_DWORD *)(v4 + v32) = *(_DWORD *)(v1 + 48);\n    v33 = *(_OWORD *)(v1 + 52);\n    *(_OWORD *)(v4 + v32 + 36) = *(_OWORD *)(v1 + 68);\n    *(_OWORD *)(v4 + v32 + 20) = v33;\n    memcpy((void *)(v4 + 632 * v5 + 76), (const void *)(v1 + 84), 0x100uLL);\n    result = *(void **)(v1 + 344);\n    *(_QWORD *)(v4 + v32 + 504) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4750f0L", 
            "funcEndAddr": "0x4752f5L", 
            "funcName": "sub_4750F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_475340(__int64 a1, __int64 a2, int a3)\n{\n  _DWORD *v3; // r15\n  double v4; // xmm0_8\n  float v5; // xmm1_4\n  float v6; // xmm2_4\n  double v7; // xmm5_8\n  double v8; // xmm3_8\n  __int64 result; // rax\n\n  v3 = dest;\n  v4 = exp2((double)(a3 - 12) / 3.0) * 0.68;\n  if ( v3[309] )\n    v4 = v4 * qword_491AC8[(*((_DWORD *)off_49F6D0 + 6) | 2) == 3];\n  v5 = (float)(*(float *)(a1 + 812) + *(float *)(a1 + 816)) + *(float *)(a1 + 820);\n  v6 = (float)(*(float *)(a2 + 812) + *(float *)(a2 + 816)) + *(float *)(a2 + 820);\n  v7 = (double)*(signed int *)(a1 + 808) * v4 + v5;\n  v8 = (double)*(signed int *)(a2 + 808) * v4 + v6;\n  result = 0LL;\n  if ( v8 <= v7 )\n    result = (v8 != v7) | (unsigned __int8)(v6 < v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x475340L", 
            "funcEndAddr": "0x475416L", 
            "funcName": "sub_475340"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_475420(__int64 a1, int a2, int a3, __int16 a4)\n{\n  __int64 result; // rax\n\n  result = *(_QWORD *)(a1 + 8LL * a2 + 128);\n  *(_WORD *)(result + 2LL * a3 + 32) = a4;\n  return result;\n}\n", 
            "funcStartAddr": "0x475420L", 
            "funcEndAddr": "0x475434L", 
            "funcName": "sub_475420"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_475440(__int64 a1, int a2, int a3, __int16 a4, int a5)\n{\n  __int64 result; // rax\n\n  result = a3 + a5 * a2;\n  *(_WORD *)(a1 + 2 * result) = a4;\n  return result;\n}\n", 
            "funcStartAddr": "0x475440L", 
            "funcEndAddr": "0x47544eL", 
            "funcName": "sub_475440"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_475450(__int64 a1, int a2, int a3, __int64 a4, int a5)\n{\n  return a1 + 2LL * (a3 + a5 * a2);\n}\n", 
            "funcStartAddr": "0x475450L", 
            "funcEndAddr": "0x47545eL", 
            "funcName": "sub_475450"
        }, 
        {
            "decompiledFuncCode": "__int128 *__fastcall sub_475460(__int64 a1, int a2, __int64 a3, int a4, signed int a5)\n{\n  int v5; // ecx\n  int v6; // eax\n  __int64 v7; // r10\n  _WORD *v8; // r11\n  unsigned __int64 v9; // r15\n  unsigned __int64 v10; // rax\n  __int64 v11; // r14\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r13\n  unsigned __int64 v15; // rcx\n  int v16; // er8\n  signed int v17; // ecx\n  signed __int64 v18; // r15\n  unsigned __int64 v19; // r9\n  signed __int64 v20; // rcx\n  unsigned __int64 v21; // rcx\n  unsigned __int64 v22; // rbx\n  __int64 v23; // r14\n  __m128i v24; // xmm0\n  signed __int64 v25; // rsi\n  __int64 v26; // rbx\n  __int128 *result; // rax\n  signed __int64 v28; // rsi\n  signed __int64 v29; // rbx\n  __int128 v30; // xmm1\n  __int128 v31; // xmm1\n  __int128 v32; // xmm1\n  __int128 v33; // xmm1\n  signed __int64 v34; // rcx\n  __int64 v35; // r13\n  __int128 v36; // xmm1\n  unsigned __int64 v37; // rcx\n  signed __int64 v38; // rsi\n  unsigned __int64 v39; // r12\n  signed __int64 v40; // rcx\n  signed __int64 v41; // rax\n  __int64 v42; // rsi\n  signed __int64 v43; // rcx\n  signed int v44; // esi\n  __int64 v45; // rax\n  _WORD *v46; // r8\n  signed __int64 v47; // rbp\n  unsigned __int64 v48; // r11\n  unsigned __int64 v49; // r9\n  unsigned __int64 v50; // rdi\n  __int64 v51; // r10\n  __m128i v52; // xmm0\n  signed __int64 v53; // rax\n  __int64 v54; // rdi\n  signed __int64 v55; // rbx\n  __m128i v56; // xmm0\n  unsigned __int64 v57; // r9\n  signed __int64 v58; // rcx\n  signed __int64 v59; // rcx\n  int v60; // eax\n  _WORD *v61; // rdx\n  unsigned __int64 v62; // r15\n  __int64 v63; // rbx\n  signed __int64 v64; // r10\n  signed __int64 v65; // rsi\n  __int64 v66; // rdi\n  __int128 v67; // xmm1\n  __int64 v68; // rax\n  __int128 v69; // xmm1\n  __m128i v70; // xmm0\n  __int128 v71; // xmm1\n  int v72; // edi\n  __m128i v73; // xmm0\n  __int64 v74; // rdi\n  signed __int64 v75; // rdx\n\n  v5 = a4 - 1;\n  if ( v5 > a2 )\n    v5 = a2;\n  v6 = 0;\n  if ( v5 >= 0 )\n    v6 = v5;\n  v7 = a5 * v6;\n  v8 = (_WORD *)(a1 + 2 * v7);\n  if ( (signed int)a3 >= 0 )\n  {\n    if ( a5 - 16 >= (signed int)a3 )\n      return (__int128 *)&v8[(signed int)a3];\n    if ( (signed int)a3 >= a5 )\n      goto LABEL_36;\n    v9 = a5 - (signed __int64)(signed int)a3;\n    v10 = (signed int)a3;\n    if ( v9 < 0x10 )\n      goto LABEL_30;\n    v11 = (signed int)a3 + v7;\n    if ( a1 + 2 * (a5 + v7) > (unsigned __int64)xmmword_4A0540 )\n    {\n      v10 = (signed int)a3;\n      if ( a1 + 2 * v11 < 2 * v9 + 4851008 )\n        goto LABEL_30;\n    }\n    v12 = v9 & 0xFFFFFFFFFFFFFFF0LL;\n    v13 = ((v9 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n    v14 = ((_BYTE)v13 + 1) & 3;\n    if ( (v9 & 0xFFFFFFFFFFFFFFF0LL) - 16 >= 0x30 )\n    {\n      v28 = a1 + 2 * v11 + 112;\n      v29 = v14 - 1 - v13;\n      v15 = 0LL;\n      do\n      {\n        v30 = *(_OWORD *)(v28 + 2 * v15 - 96);\n        xmmword_4A0540[v15 / 8] = *(_OWORD *)(a1 + 2 * v11 + 2 * v15);\n        xmmword_4A0550[v15 / 8] = v30;\n        v31 = *(_OWORD *)(v28 + 2 * v15 - 64);\n        xmmword_4A0560[v15 / 8] = *(_OWORD *)(v28 + 2 * v15 - 80);\n        xmmword_4A0570[v15 / 8] = v31;\n        v32 = *(_OWORD *)(v28 + 2 * v15 - 32);\n        xmmword_4A0580[v15 / 8] = *(_OWORD *)(v28 + 2 * v15 - 48);\n        *(_OWORD *)((char *)&unk_4A0590 + 2 * v15) = v32;\n        v33 = *(_OWORD *)(v28 + 2 * v15);\n        _mm_store_si128(\n          (__m128i *)((char *)&unk_4A05A0 + 2 * v15),\n          _mm_loadu_si128((const __m128i *)(v28 + 2 * v15 - 16)));\n        xmmword_4A05B0[v15 / 8] = v33;\n        v15 += 64LL;\n        v29 += 4LL;\n      }\n      while ( v29 );\n      if ( !v14 )\n        goto LABEL_28;\n    }\n    else\n    {\n      v15 = 0LL;\n      if ( !v14 )\n      {\nLABEL_28:\n        if ( v9 == v12 )\n        {\nLABEL_36:\n          LODWORD(v43) = a3 + 16;\n          v44 = a3;\n          if ( (signed int)a3 < a5 )\n            v44 = a5;\n          if ( v44 >= (signed int)v43 )\n            return xmmword_4A0540;\n          v45 = a5;\n          v46 = &v8[a5 - 1];\n          v47 = v44;\n          v43 = (signed int)v43;\n          a3 = (signed int)a3;\n          v48 = (signed int)v43 - (signed __int64)v44;\n          if ( v48 >= 0x10\n            && (a1 + 2 * (v45 - 1 + v7) + 1 <= (unsigned __int64)(2 * (v44 - a3) + 4851008)\n             || (unsigned __int64)v46 >= 2 * (v43 - a3) + 4851008) )\n          {\n            v49 = v48 & 0xFFFFFFFFFFFFFFF0LL;\n            v50 = ((v48 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n            v51 = ((_BYTE)v50 + 1) & 1;\n            if ( (v48 & 0xFFFFFFFFFFFFFFF0LL) == 16 )\n            {\n              v54 = 0LL;\n            }\n            else\n            {\n              v52 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v46), 224), 0);\n              v53 = v51 - 1 - v50;\n              v54 = 0LL;\n              v55 = 2 * (v44 + 8LL - a3);\n              do\n              {\n                _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0530[v54] + v55), v52);\n                _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0540[v54] + v55), v52);\n                _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0550[v54] + v55), v52);\n                _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0560[v54] + v55), v52);\n                v54 += 4LL;\n                v53 += 2LL;\n              }\n              while ( v53 );\n            }\n            if ( v51 )\n            {\n              v73 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v46), 224), 0);\n              v74 = v44 + v54 * 8 - a3;\n              _mm_storeu_si128((__m128i *)((char *)xmmword_4A0540 + 2 * v74), v73);\n              _mm_storeu_si128((__m128i *)((char *)xmmword_4A0550 + 2 * v74), v73);\n            }\n            if ( v48 == v49 )\n              return xmmword_4A0540;\n            v47 = v49 + v44;\n          }\n          v75 = -2 * a3;\n          result = xmmword_4A0540;\n          do\n            *(_WORD *)((char *)xmmword_4A0540 + 2 * v47++ + v75) = *v46;\n          while ( v47 < v43 );\n          return result;\n        }\n        v10 = (signed int)a3 + v12;\nLABEL_30:\n        v37 = a5 - 1LL - v10;\n        if ( ((_BYTE)a5 - (_BYTE)v10) & 3 )\n        {\n          v38 = -(signed __int64)(((_BYTE)a5 - (_BYTE)v10) & 3);\n          do\n          {\n            *((_WORD *)xmmword_4A0540 + v10 - (signed int)a3) = v8[v10];\n            ++v10;\n            ++v38;\n          }\n          while ( v38 );\n        }\n        if ( v37 >= 3 )\n        {\n          v39 = a5 - v10;\n          v40 = 2 * (v10 - (signed int)a3 + 3) + 4851008;\n          v41 = a1 + 2 * (v7 + v10) + 6;\n          v42 = 0LL;\n          do\n          {\n            *(_WORD *)(v40 + 2 * v42 - 6) = *(_WORD *)(v41 + 2 * v42 - 6);\n            *(_WORD *)(v40 + 2 * v42 - 4) = *(_WORD *)(v41 + 2 * v42 - 4);\n            *(_WORD *)(v40 + 2 * v42 - 2) = *(_WORD *)(v41 + 2 * v42 - 2);\n            *(_WORD *)(v40 + 2 * v42) = *(_WORD *)(v41 + 2 * v42);\n            v42 += 4LL;\n          }\n          while ( v39 != v42 );\n        }\n        goto LABEL_36;\n      }\n    }\n    v34 = 2 * v15;\n    v35 = -v14;\n    do\n    {\n      v36 = *(_OWORD *)(a1 + 2 * v11 + 16 + v34);\n      _mm_store_si128((__m128i *)((char *)xmmword_4A0540 + v34), _mm_loadu_si128((const __m128i *)(a1 + 2 * v11 + v34)));\n      *(__int128 *)((char *)xmmword_4A0550 + v34) = v36;\n      v34 += 32LL;\n      ++v35;\n    }\n    while ( v35 );\n    goto LABEL_28;\n  }\n  v16 = a3 + 16;\n  v17 = (a3 + 16) & (((signed int)a3 + 16) >> 31);\n  if ( v17 > (signed int)a3 )\n  {\n    v18 = v17;\n    v19 = v17 - (signed __int64)(signed int)a3;\n    v20 = (signed int)a3;\n    if ( v19 >= 0x10 )\n    {\n      if ( a1 + 2 * v7 + 1 <= (unsigned __int64)xmmword_4A0540\n        || (v20 = (signed int)a3, (unsigned __int64)v8 >= 2 * v19 + 4851008) )\n      {\n        v21 = v19 & 0xFFFFFFFFFFFFFFF0LL;\n        v22 = ((v19 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n        v23 = ((_BYTE)v22 + 1) & 1;\n        if ( (v19 & 0xFFFFFFFFFFFFFFF0LL) == 16 )\n        {\n          v26 = 0LL;\n        }\n        else\n        {\n          v24 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v8), 224), 0);\n          v25 = v23 - 1 - v22;\n          v26 = 0LL;\n          do\n          {\n            _mm_store_si128((__m128i *)&xmmword_4A0540[v26], v24);\n            _mm_store_si128((__m128i *)&xmmword_4A0550[v26], v24);\n            _mm_store_si128((__m128i *)&xmmword_4A0560[v26], v24);\n            _mm_store_si128((__m128i *)&xmmword_4A0570[v26], v24);\n            v26 += 4LL;\n            v25 += 2LL;\n          }\n          while ( v25 );\n        }\n        if ( v23 )\n        {\n          v56 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v8), 224), 0);\n          _mm_store_si128((__m128i *)&xmmword_4A0540[v26], v56);\n          _mm_store_si128((__m128i *)&xmmword_4A0550[v26], v56);\n        }\n        if ( v19 == v21 )\n          goto LABEL_52;\n        v20 = (signed int)a3 + v21;\n      }\n    }\n    do\n      *((_WORD *)xmmword_4A0540 + v20++ - (signed int)a3) = *v8;\n    while ( v20 < v18 );\n  }\nLABEL_52:\n  if ( (signed int)a3 < -15 )\n    return xmmword_4A0540;\n  v57 = 1LL;\n  if ( v16 > 0LL )\n    v57 = v16;\n  if ( v57 < 0x10 )\n    goto LABEL_83;\n  v58 = 1LL;\n  if ( v16 > 0LL )\n    v58 = v16;\n  if ( (unsigned __int64)xmmword_4A0540 - 2 * (signed int)a3 >= a1 + 2 * (v58 + v7)\n    || (unsigned __int64)v8 >= 2 * (v58 - (signed int)a3) + 4851008 )\n  {\n    v59 = v57 & 0x7FFFFFFFFFFFFFF0LL;\n    v62 = ((v57 & 0x7FFFFFFFFFFFFFF0LL) - 16) >> 4;\n    if ( (v57 & 0x7FFFFFFFFFFFFFF0LL) == 16 )\n    {\n      v66 = 0LL;\n    }\n    else\n    {\n      LODWORD(v63) = 16 - a3;\n      v64 = a1 + 2 * v7 + 48;\n      v65 = (((_BYTE)v62 + 1) & 1) - 1LL - v62;\n      v66 = 0LL;\n      do\n      {\n        v67 = *(_OWORD *)(v64 + 2 * v66 - 32);\n        v68 = (signed int)v63 - 16;\n        *(__int128 *)((char *)xmmword_4A0540 + 2 * v68) = *(_OWORD *)(v64 + 2 * v66 - 48);\n        *(__int128 *)((char *)xmmword_4A0550 + 2 * v68) = v67;\n        v69 = *(_OWORD *)(v64 + 2 * v66);\n        v63 = (signed int)v63;\n        _mm_storeu_si128(\n          (__m128i *)((char *)xmmword_4A0540 + 2 * (signed int)v63),\n          _mm_loadu_si128((const __m128i *)(v64 + 2 * v66 - 16)));\n        *(__int128 *)((char *)xmmword_4A0550 + 2 * v63) = v69;\n        v66 += 32LL;\n        LODWORD(v63) = v63 + 32;\n        v65 += 2LL;\n      }\n      while ( v65 );\n    }\n    if ( ((_BYTE)v62 + 1) & 1 )\n    {\n      v70 = _mm_loadu_si128((const __m128i *)&v8[v66]);\n      v71 = *(_OWORD *)&v8[v66 + 8];\n      v72 = v66 - a3;\n      _mm_storeu_si128((__m128i *)((char *)xmmword_4A0540 + 2 * v72), v70);\n      *(__int128 *)((char *)xmmword_4A0550 + 2 * v72) = v71;\n    }\n    v60 = v57 & 0xFFFFFFF0;\n    if ( v57 == v59 )\n      return xmmword_4A0540;\n  }\n  else\n  {\nLABEL_83:\n    v59 = 0LL;\n    v60 = 0;\n  }\n  v61 = (_WORD *)(2 * (v60 - (signed __int64)(signed int)a3) + 4851008);\n  result = xmmword_4A0540;\n  do\n  {\n    *v61 = v8[v59++];\n    ++v61;\n  }\n  while ( v59 < v16 );\n  return result;\n}\n", 
            "funcStartAddr": "0x475460L", 
            "funcEndAddr": "0x475a90L", 
            "funcName": "sub_475460"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_475A90(__int64 a1, __int64 a2, int a3, int a4, __int64 a5, int a6)\n{\n  return a2 + 2LL * a6 * a3 + 2LL * a4;\n}\n", 
            "funcStartAddr": "0x475a90L", 
            "funcEndAddr": "0x475aa3L", 
            "funcName": "sub_475A90"
        }, 
        {
            "decompiledFuncCode": "__int128 *__fastcall sub_475AB0(int a1, __int64 a2, int a3, __int64 a4, int a5, signed int a6)\n{\n  int v6; // er8\n  int v7; // eax\n  __int64 v8; // r8\n  _WORD *v9; // r14\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rdx\n  __int64 v12; // r15\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // rbx\n  __int64 v15; // r13\n  unsigned __int64 v16; // rbx\n  unsigned int v17; // edi\n  int v18; // edx\n  signed __int64 v19; // r11\n  unsigned __int64 v20; // r9\n  signed __int64 v21; // rdx\n  unsigned __int64 v22; // rdx\n  unsigned __int64 v23; // rbx\n  __int64 v24; // r10\n  __m128i v25; // xmm0\n  signed __int64 v26; // rbp\n  __int64 v27; // rbx\n  __int128 *result; // rax\n  signed __int64 v29; // rax\n  signed __int64 v30; // rbp\n  __int128 v31; // xmm1\n  __int128 v32; // xmm1\n  __int128 v33; // xmm1\n  __int128 v34; // xmm1\n  signed __int64 v35; // rbx\n  __int64 v36; // r13\n  __int128 v37; // xmm1\n  unsigned __int64 v38; // r15\n  signed __int64 v39; // rbx\n  unsigned __int64 v40; // r11\n  signed __int64 v41; // rax\n  signed __int64 v42; // rdx\n  __int64 v43; // rbp\n  __int64 v44; // rdi\n  signed int v45; // eax\n  __int64 v46; // rbx\n  _WORD *v47; // r9\n  __int64 v48; // rbp\n  unsigned __int64 v49; // rax\n  unsigned __int64 v50; // r8\n  unsigned __int64 v51; // rsi\n  __int64 v52; // r10\n  __m128i v53; // xmm0\n  signed __int64 v54; // rbx\n  __int64 v55; // rsi\n  signed __int64 v56; // rdx\n  __m128i v57; // xmm0\n  __int64 v58; // r11\n  signed __int64 v59; // r10\n  int v60; // ebp\n  signed __int64 v61; // rdx\n  signed __int64 v62; // rdi\n  signed __int64 v63; // r11\n  signed __int64 v64; // rdx\n  signed __int64 v65; // rcx\n  __int64 v66; // rsi\n  unsigned __int64 v67; // rbx\n  __int64 v68; // r9\n  __int64 v69; // rax\n  signed __int64 v70; // rdi\n  signed __int64 v71; // rdx\n  __int64 v72; // rbx\n  __int128 v73; // xmm1\n  __int64 v74; // rbp\n  __int128 v75; // xmm1\n  __m128i v76; // xmm0\n  __int128 v77; // xmm1\n  int v78; // ebx\n  __m128i v79; // xmm0\n  __int64 v80; // rsi\n  signed __int64 v81; // rcx\n\n  v6 = a5 - 1;\n  if ( v6 > a3 )\n    v6 = a3;\n  v7 = 0;\n  if ( v6 >= 0 )\n    v7 = v6;\n  v8 = a6 * v7;\n  v9 = (_WORD *)(a2 + 2 * v8);\n  if ( (signed int)a4 < 0 )\n  {\n    v17 = a4 + a1;\n    v18 = v17 & ((signed int)v17 >> 31);\n    if ( v18 <= (signed int)a4 )\n      goto LABEL_52;\n    v19 = v18;\n    v20 = v18 - (signed __int64)(signed int)a4;\n    v21 = (signed int)a4;\n    if ( v20 >= 0x10 )\n    {\n      if ( a2 + 2 * v8 + 1 <= (unsigned __int64)xmmword_4A0540\n        || (v21 = (signed int)a4, (unsigned __int64)v9 >= 2 * v20 + 4851008) )\n      {\n        v22 = v20 & 0xFFFFFFFFFFFFFFF0LL;\n        v23 = ((v20 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n        v24 = ((_BYTE)v23 + 1) & 1;\n        if ( (v20 & 0xFFFFFFFFFFFFFFF0LL) == 16 )\n        {\n          v27 = 0LL;\n        }\n        else\n        {\n          v25 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v9), 224), 0);\n          v26 = v24 - 1 - v23;\n          v27 = 0LL;\n          do\n          {\n            _mm_store_si128((__m128i *)&xmmword_4A0540[v27], v25);\n            _mm_store_si128((__m128i *)&xmmword_4A0550[v27], v25);\n            _mm_store_si128((__m128i *)&xmmword_4A0560[v27], v25);\n            _mm_store_si128((__m128i *)&xmmword_4A0570[v27], v25);\n            v27 += 4LL;\n            v26 += 2LL;\n          }\n          while ( v26 );\n        }\n        if ( v24 )\n        {\n          v57 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v9), 224), 0);\n          _mm_store_si128((__m128i *)&xmmword_4A0540[v27], v57);\n          _mm_store_si128((__m128i *)&xmmword_4A0550[v27], v57);\n        }\n        if ( v20 == v22 )\n        {\nLABEL_52:\n          if ( (signed int)v17 <= 0 )\n            return xmmword_4A0540;\n          v58 = v17;\n          if ( v17 < 0x10\n            || (unsigned __int64)xmmword_4A0540 - 2 * (signed int)a4 < a2 + 2 * (v8 + (unsigned __int64)v17)\n            && (unsigned __int64)v9 < 2 * ((unsigned __int64)v17 - (signed int)a4) + 4851008 )\n          {\n            v59 = 0LL;\n            v60 = 0;\nLABEL_57:\n            v61 = v58 - 1;\n            if ( v58 & 1 )\n            {\n              *((_WORD *)xmmword_4A0540 + v60 - (signed int)a4) = v9[v59];\n              v62 = v59 | 1;\n              ++v60;\n              if ( v61 != v59 )\n                goto LABEL_61;\n            }\n            else\n            {\n              v62 = v59;\n              if ( v61 != v59 )\n              {\nLABEL_61:\n                v63 = v58 - v62;\n                v64 = a2 + 2 * (v62 + v8) + 2;\n                v65 = 2 * (v60 + 1LL - (signed int)a4) + 4851008;\n                v66 = 0LL;\n                result = xmmword_4A0540;\n                do\n                {\n                  *(_WORD *)(v65 + 2 * v66 - 2) = *(_WORD *)(v64 + 2 * v66 - 2);\n                  *(_WORD *)(v65 + 2 * v66) = *(_WORD *)(v64 + 2 * v66);\n                  v66 += 2LL;\n                }\n                while ( v63 != v66 );\n                return result;\n              }\n            }\n            return xmmword_4A0540;\n          }\n          v59 = v17 & 0xFFFFFFF0;\n          v67 = (unsigned __int64)(v59 - 16) >> 4;\n          v68 = ((_BYTE)v67 + 1) & 1;\n          if ( v59 == 16 )\n          {\n            v72 = 0LL;\n            if ( v68 )\n            {\nLABEL_68:\n              v76 = _mm_loadu_si128((const __m128i *)&v9[v72]);\n              v77 = *(_OWORD *)&v9[v72 + 8];\n              v78 = v72 - a4;\n              _mm_storeu_si128((__m128i *)((char *)xmmword_4A0540 + 2 * v78), v76);\n              *(__int128 *)((char *)xmmword_4A0550 + 2 * v78) = v77;\n              goto LABEL_69;\n            }\n          }\n          else\n          {\n            LODWORD(v69) = 16 - a4;\n            v70 = a2 + 2 * v8 + 48;\n            v71 = v68 - 1 - v67;\n            v72 = 0LL;\n            do\n            {\n              v73 = *(_OWORD *)(v70 + 2 * v72 - 32);\n              v74 = (signed int)v69 - 16;\n              *(__int128 *)((char *)xmmword_4A0540 + 2 * v74) = *(_OWORD *)(a2 + 2 * v8 + 2 * v72);\n              *(__int128 *)((char *)xmmword_4A0550 + 2 * v74) = v73;\n              v75 = *(_OWORD *)(v70 + 2 * v72);\n              v69 = (signed int)v69;\n              _mm_storeu_si128(\n                (__m128i *)((char *)xmmword_4A0540 + 2 * (signed int)v69),\n                _mm_loadu_si128((const __m128i *)(v70 + 2 * v72 - 16)));\n              *(__int128 *)((char *)xmmword_4A0550 + 2 * v69) = v75;\n              v72 += 32LL;\n              LODWORD(v69) = v69 + 32;\n              v71 += 2LL;\n            }\n            while ( v71 );\n            if ( v68 )\n              goto LABEL_68;\n          }\nLABEL_69:\n          v60 = v58 & 0xFFFFFFF0;\n          if ( v59 == v58 )\n            return xmmword_4A0540;\n          goto LABEL_57;\n        }\n        v21 = (signed int)a4 + v22;\n      }\n    }\n    do\n      *((_WORD *)xmmword_4A0540 + v21++ - (signed int)a4) = *v9;\n    while ( v21 < v19 );\n    goto LABEL_52;\n  }\n  if ( a6 - a1 >= (signed int)a4 )\n    return (__int128 *)&v9[(signed int)a4];\n  if ( (signed int)a4 >= a6 )\n    goto LABEL_36;\n  v10 = a6 - (signed __int64)(signed int)a4;\n  v11 = (signed int)a4;\n  if ( v10 < 0x10 )\n    goto LABEL_30;\n  v12 = (signed int)a4 + v8;\n  if ( a2 + 2 * (a6 + v8) > (unsigned __int64)xmmword_4A0540 )\n  {\n    v11 = (signed int)a4;\n    if ( a2 + 2 * v12 < 2 * v10 + 4851008 )\n      goto LABEL_30;\n  }\n  v13 = v10 & 0xFFFFFFFFFFFFFFF0LL;\n  v14 = ((v10 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n  v15 = ((_BYTE)v14 + 1) & 3;\n  if ( (v10 & 0xFFFFFFFFFFFFFFF0LL) - 16 < 0x30 )\n  {\n    v16 = 0LL;\n    if ( !v15 )\n      goto LABEL_28;\n    goto LABEL_26;\n  }\n  v29 = a2 + 2 * v12 + 112;\n  v30 = v15 - 1 - v14;\n  v16 = 0LL;\n  do\n  {\n    v31 = *(_OWORD *)(v29 + 2 * v16 - 96);\n    xmmword_4A0540[v16 / 8] = *(_OWORD *)(a2 + 2 * v12 + 2 * v16);\n    xmmword_4A0550[v16 / 8] = v31;\n    v32 = *(_OWORD *)(v29 + 2 * v16 - 64);\n    xmmword_4A0560[v16 / 8] = *(_OWORD *)(v29 + 2 * v16 - 80);\n    xmmword_4A0570[v16 / 8] = v32;\n    v33 = *(_OWORD *)(v29 + 2 * v16 - 32);\n    xmmword_4A0580[v16 / 8] = *(_OWORD *)(v29 + 2 * v16 - 48);\n    *(_OWORD *)((char *)&unk_4A0590 + 2 * v16) = v33;\n    v34 = *(_OWORD *)(v29 + 2 * v16);\n    _mm_store_si128((__m128i *)((char *)&unk_4A05A0 + 2 * v16), _mm_loadu_si128((const __m128i *)(v29 + 2 * v16 - 16)));\n    xmmword_4A05B0[v16 / 8] = v34;\n    v16 += 64LL;\n    v30 += 4LL;\n  }\n  while ( v30 );\n  if ( v15 )\n  {\nLABEL_26:\n    v35 = 2 * v16;\n    v36 = -v15;\n    do\n    {\n      v37 = *(_OWORD *)(a2 + 2 * v12 + 16 + v35);\n      _mm_store_si128((__m128i *)((char *)xmmword_4A0540 + v35), _mm_loadu_si128((const __m128i *)(a2 + 2 * v12 + v35)));\n      *(__int128 *)((char *)xmmword_4A0550 + v35) = v37;\n      v35 += 32LL;\n      ++v36;\n    }\n    while ( v36 );\n  }\nLABEL_28:\n  if ( v10 != v13 )\n  {\n    v11 = (signed int)a4 + v13;\nLABEL_30:\n    v38 = a6 - 1LL - v11;\n    if ( ((_BYTE)a6 - (_BYTE)v11) & 3 )\n    {\n      v39 = -(signed __int64)(((_BYTE)a6 - (_BYTE)v11) & 3);\n      do\n      {\n        *((_WORD *)xmmword_4A0540 + v11 - (signed int)a4) = v9[v11];\n        ++v11;\n        ++v39;\n      }\n      while ( v39 );\n    }\n    if ( v38 >= 3 )\n    {\n      v40 = a6 - v11;\n      v41 = 2 * (v11 - (signed int)a4 + 3) + 4851008;\n      v42 = a2 + 2 * (v8 + v11) + 6;\n      v43 = 0LL;\n      do\n      {\n        *(_WORD *)(v41 + 2 * v43 - 6) = *(_WORD *)(v42 + 2 * v43 - 6);\n        *(_WORD *)(v41 + 2 * v43 - 4) = *(_WORD *)(v42 + 2 * v43 - 4);\n        *(_WORD *)(v41 + 2 * v43 - 2) = *(_WORD *)(v42 + 2 * v43 - 2);\n        *(_WORD *)(v41 + 2 * v43) = *(_WORD *)(v42 + 2 * v43);\n        v43 += 4LL;\n      }\n      while ( v40 != v43 );\n    }\n  }\nLABEL_36:\n  LODWORD(v44) = a4 + a1;\n  v45 = a4;\n  if ( (signed int)a4 < a6 )\n    v45 = a6;\n  if ( v45 >= (signed int)v44 )\n    return xmmword_4A0540;\n  v46 = a6;\n  v47 = &v9[a6 - 1];\n  v48 = v45;\n  v44 = (signed int)v44;\n  a4 = (signed int)a4;\n  v49 = (signed int)v44 - (signed __int64)v45;\n  if ( v49 >= 0x10\n    && (a2 + 2 * (v46 - 1 + v8) + 1 <= (unsigned __int64)(2 * (v48 - a4) + 4851008)\n     || (unsigned __int64)v47 >= 2 * (v44 - a4) + 4851008) )\n  {\n    v50 = v49 & 0xFFFFFFFFFFFFFFF0LL;\n    v51 = ((v49 & 0xFFFFFFFFFFFFFFF0LL) - 16) >> 4;\n    v52 = ((_BYTE)v51 + 1) & 1;\n    if ( (v49 & 0xFFFFFFFFFFFFFFF0LL) == 16 )\n    {\n      v55 = 0LL;\n    }\n    else\n    {\n      v53 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v47), 224), 0);\n      v54 = v52 - 1 - v51;\n      v55 = 0LL;\n      v56 = 2 * (v48 + 8 - a4);\n      do\n      {\n        _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0530[v55] + v56), v53);\n        _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0540[v55] + v56), v53);\n        _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0550[v55] + v56), v53);\n        _mm_storeu_si128((__m128i *)((char *)&xmmword_4A0560[v55] + v56), v53);\n        v55 += 4LL;\n        v54 += 2LL;\n      }\n      while ( v54 );\n    }\n    if ( v52 )\n    {\n      v79 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128((unsigned __int16)*v47), 224), 0);\n      v80 = v48 + v55 * 8 - a4;\n      _mm_storeu_si128((__m128i *)((char *)xmmword_4A0540 + 2 * v80), v79);\n      _mm_storeu_si128((__m128i *)((char *)xmmword_4A0550 + 2 * v80), v79);\n    }\n    if ( v49 == v50 )\n      return xmmword_4A0540;\n    v48 += v50;\n  }\n  v81 = -2 * a4;\n  result = xmmword_4A0540;\n  do\n    *(_WORD *)((char *)xmmword_4A0540 + 2 * v48++ + v81) = *v47;\n  while ( v48 < v44 );\n  return result;\n}\n", 
            "funcStartAddr": "0x475ab0L", 
            "funcEndAddr": "0x476120L", 
            "funcName": "sub_475AB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_476120(__int64 a1, signed int a2, signed int a3, int a4, int a5)\n{\n  int v5; // er9\n  __int64 v6; // rax\n  __int64 v7; // rcx\n  int v8; // edx\n\n  v5 = 4 * a4 + 28;\n  LODWORD(v6) = a3 + 16;\n  LODWORD(v7) = a2 + 16;\n  if ( a3 > -17 )\n  {\n    v8 = 4 * a5 + 28;\n    if ( (signed int)v6 <= v8 )\n    {\n      if ( a2 > -17 )\n      {\n        if ( (signed int)v7 <= v5 )\n          v7 = (signed int)v7;\n        else\n          v7 = (signed int)(v7 & 3 | v5);\n      }\n      else\n      {\n        v7 &= 3u;\n      }\n      v6 = (signed int)v6;\n    }\n    else\n    {\n      if ( a2 > -17 )\n      {\n        if ( (signed int)v7 <= v5 )\n          v7 = (signed int)v7;\n        else\n          v7 = (signed int)(v7 & 3 | v5);\n      }\n      else\n      {\n        v7 &= 3u;\n      }\n      v6 = (signed int)(v6 & 3 | v8);\n    }\n  }\n  else if ( a2 > -17 )\n  {\n    if ( (signed int)v7 <= v5 )\n      v7 = (signed int)v7;\n    else\n      v7 = (signed int)(v7 & 3 | v5);\n    v6 &= 3u;\n  }\n  else\n  {\n    v7 &= 3u;\n    v6 &= 3u;\n  }\n  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v7) + 2 * v6);\n}\n", 
            "funcStartAddr": "0x476120L", 
            "funcEndAddr": "0x4761b8L", 
            "funcName": "sub_476120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4761C0(__int64 a1, int a2, int a3)\n{\n  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 8LL * a2 + 128) + 2LL * a3 + 32);\n}\n", 
            "funcStartAddr": "0x4761c0L", 
            "funcEndAddr": "0x4761d4L", 
            "funcName": "sub_4761C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4761E0(__int64 a1)\n{\n  __int64 v1; // rbx\n\n  v1 = a1;\n  **(_BYTE **)(a1 + 56) = *(_BYTE *)a1 | 4 * *(_BYTE *)(a1 + 4) | 8 * *(unsigned int *)(a1 + 8) | 16\n                                                                                                * *(unsigned int *)(a1 + 12);\n  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 1LL) = *(_BYTE *)(a1 + 16) | 2 * *(_BYTE *)(a1 + 20);\n  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 2LL) = *(_BYTE *)(a1 + 24);\n  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 3LL) = *(_BYTE *)(a1 + 25);\n  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4LL) = *(_DWORD *)(a1 + 28);\n  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8LL) = *(_DWORD *)(a1 + 32);\n  memcpy((void *)(*(_QWORD *)(a1 + 56) + 12LL), *(const void **)(v1 + 40), *(unsigned int *)(v1 + 48));\n  *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 48) + 12;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4761e0L", 
            "funcEndAddr": "0x47625aL", 
            "funcName": "sub_4761E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_476260(__int64 a1, FILE *a2)\n{\n  unsigned int v2; // ebp\n  int ptr; // [rsp+Ch] [rbp-1Ch]\n\n  ptr = -1;\n  v2 = -1;\n  if ( fwrite((const void *)(a1 + 64), 4uLL, 1uLL, a2) == 1 && fwrite(&ptr, 4uLL, 1uLL, a2) == 1 )\n    v2 = -(fwrite(*(const void **)(a1 + 56), *(unsigned int *)(a1 + 64), 1uLL, a2) != 1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x476260L", 
            "funcEndAddr": "0x4762dfL", 
            "funcName": "sub_476260"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4762E0(__int64 a1)\n{\n  __int64 v1; // r14\n  __m128i *v2; // rbp\n  __m128i *v3; // rbx\n  void *v4; // rax\n  void *v5; // r12\n  __int32 v6; // er15\n  int v7; // ebp\n  size_t v8; // r13\n  __int64 v9; // rdi\n  __m128i *v10; // rbp\n  FILE *v11; // r12\n  void *v12; // r13\n  unsigned __int32 v13; // er15\n  int ptr; // [rsp+Ch] [rbp-3Ch]\n  __m128i *v16; // [rsp+10h] [rbp-38h]\n\n  v1 = a1;\n  **(_BYTE **)(a1 + 24) = *(_BYTE *)(a1 + 12) | (*(_BYTE *)(a1 + 20) << 7) | 32 * *(_BYTE *)(a1 + 16);\n  v2 = (__m128i *)malloc(0x48uLL);\n  v3 = v2;\n  if ( !v2 )\n    sub_43EF40(0LL, (__int64)\"RTPWriteNALU-1\");\n  v4 = malloc(0xFFE4uLL);\n  v2[3].m128i_i64[1] = (__int64)v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"RTPWriteNALU-2\");\n  v16 = v2;\n  v5 = malloc(0xFFE4uLL);\n  v2[2].m128i_i64[1] = (__int64)v5;\n  if ( !v5 )\n    sub_43EF40(0LL, (__int64)\"RTPWriteNALU-3\");\n  _mm_storeu_si128(v2, _mm_cvtsi32_si128(2u));\n  v2[1].m128i_i32[0] = *(_DWORD *)a1 == 4;\n  v2[1].m128i_i32[1] = 105;\n  v6 = DWORD1(xmmword_4A0560[0])++;\n  v2[1].m128i_i32[2] = v6;\n  v7 = xmmword_4A0560[0];\n  v3[1].m128i_i32[3] = xmmword_4A0560[0];\n  v3[2].m128i_i32[0] = 305419896;\n  v8 = *(unsigned int *)(a1 + 4);\n  v3[3].m128i_i32[0] = v8;\n  memcpy(v5, *(const void **)(a1 + 24), v8);\n  v9 = v3[3].m128i_i64[1];\n  *(_BYTE *)v9 = 2;\n  *(_BYTE *)(v9 + 1) = v3[1].m128i_i8[0] | 2 * v3[1].m128i_i8[4];\n  *(_WORD *)(v9 + 2) = v6;\n  *(_DWORD *)(v9 + 4) = v7;\n  *(_DWORD *)(v9 + 8) = 305419896;\n  memcpy((void *)(v9 + 12), v5, v8);\n  v10 = v16 + 4;\n  v3[4].m128i_i32[0] = v8 + 12;\n  v11 = qword_4F9E40;\n  ptr = -1;\n  if ( fwrite(v10, 4uLL, 1uLL, qword_4F9E40) != 1 || fwrite(&ptr, 4uLL, 1uLL, v11) != 1 )\n  {\n    v13 = v10->m128i_i64[0];\n    goto LABEL_12;\n  }\n  v12 = (void *)v3[3].m128i_i64[1];\n  v13 = v3[4].m128i_u32[0];\n  if ( fwrite((const void *)v3[3].m128i_i64[1], v3[4].m128i_u32[0], 1uLL, v11) != 1 )\n  {\nLABEL_12:\n    printf(\"Cannot write %d bytes of RTP packet to outfile, exit\\n\", v13);\n    exit(-1);\n  }\n  free(v12);\n  free((void *)v3[2].m128i_i64[1]);\n  free(v3);\n  return (unsigned int)(8 * *(_DWORD *)(v1 + 4));\n}\n", 
            "funcStartAddr": "0x4762e0L", 
            "funcEndAddr": "0x4764c0L", 
            "funcName": "sub_4762E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4764C0(int a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  if ( dword_49F960 == -1 )\n  {\n    result = 0LL;\n    a1 = 0;\n  }\n  else\n  {\n    v1 = a1 - dword_49F960 + 256;\n    if ( a1 - dword_49F960 >= -10 )\n      v1 = a1 - dword_49F960;\n    result = (unsigned int)(LODWORD(xmmword_4A0560[0]) + 1000 * v1);\n  }\n  LODWORD(xmmword_4A0560[0]) = result;\n  dword_49F960 = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4764c0L", 
            "funcEndAddr": "0x4764faL", 
            "funcName": "sub_4764C0"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_476500(const char *a1)\n{\n  FILE *result; // rax\n\n  result = fopen(a1, \"wb\");\n  qword_4F9E40 = result;\n  if ( !result )\n  {\n    printf(\"Fatal: cannot open bitstream file '%s', exit (-1)\\n\", a1);\n    exit(-1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x476500L", 
            "funcEndAddr": "0x476535L", 
            "funcName": "sub_476500"
        }, 
        {
            "decompiledFuncCode": "int sub_476540()\n{\n  return fclose(qword_4F9E40);\n}\n", 
            "funcStartAddr": "0x476540L", 
            "funcEndAddr": "0x47654cL", 
            "funcName": "sub_476540"
        }, 
        {
            "decompiledFuncCode": "_BYTE *sub_476550()\n{\n  void *v0; // rax\n  void *v1; // rax\n  _QWORD *v2; // rbx\n  void *v3; // rax\n  _QWORD *v4; // rbx\n  void *v5; // rax\n  _BYTE *v6; // rax\n  _QWORD *v7; // rbx\n  void *v8; // rax\n  _BYTE *result; // rax\n\n  v0 = malloc(0xFFD8uLL);\n  qword_4F9A90 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitSEIMessages: sei_message[i].data\");\n  byte_4F9A88 = 5;\n  memset(v0, 0, 0xFFD8uLL);\n  qword_4F9A80[0] = 0LL;\n  v1 = malloc(0xFFD8uLL);\n  qword_4F9AA8 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitSEIMessages: sei_message[i].data\");\n  byte_4F9AA0 = 5;\n  memset(v1, 0, 0xFFD8uLL);\n  qword_4F9A98 = 0LL;\n  qword_4F9C20 = 0LL;\n  sub_476C70();\n  sub_4777D0();\n  if ( *((_DWORD *)dest + 728) )\n  {\n    dword_4A05A8 = 1;\n    qword_4F9C28 = 0LL;\n    dword_4F9C38 = 2;\n  }\n  dword_4A0594 = 1;\n  qword_4F9BA0 = 0LL;\n  dword_4F9BA8 = -1;\n  v2 = malloc(0x30uLL);\n  qword_4F9BB0 = v2;\n  if ( !v2 )\n    sub_43EF40(0LL, (__int64)\"InitSceneInformation: seiSceneInformation.data\");\n  v3 = malloc(0xFFD8uLL);\n  v2[4] = v3;\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"InitSceneInformation: seiSceneInformation.data->streamBuffer\");\n  *v2 = 0x800000000LL;\n  *((_BYTE *)v2 + 8) = 0;\n  memset(v3, 0, 0xFFD8uLL);\n  v4 = malloc(0x30uLL);\n  qword_4F9AC8 = v4;\n  if ( !v4 )\n    sub_43EF40(0LL, (__int64)\"InitPanScanRectInfo: seiPanScanRectInfo.data\");\n  v5 = malloc(0xFFD8uLL);\n  v4[4] = v5;\n  if ( !v5 )\n    sub_43EF40(0LL, (__int64)\"InitPanScanRectInfo: seiPanScanRectInfo.data->streamBuffer\");\n  memset(v5, 0, 0xFFD8uLL);\n  v6 = qword_4F9AC8;\n  *(_QWORD *)qword_4F9AC8 = 0x800000000LL;\n  v6[8] = 0;\n  dword_4F9AD0 = 0;\n  LODWORD(xmmword_4A05B0[0]) = 1;\n  *(__int128 *)((char *)&xmmword_4F9AB0 + 4) = 0LL;\n  sub_477F60();\n  sub_478210();\n  v7 = malloc(0x30uLL);\n  qword_4F9C00 = v7;\n  if ( !v7 )\n    sub_43EF40(0LL, (__int64)\"InitRandomAccess: seiRandomAccess.data\");\n  v8 = malloc(0xFFD8uLL);\n  v7[4] = v8;\n  if ( !v8 )\n    sub_43EF40(0LL, (__int64)\"InitRandomAccess: seiRandomAccess.data->streamBuffer\");\n  memset(v8, 0, 0xFFD8uLL);\n  result = qword_4F9C00;\n  *(_QWORD *)qword_4F9C00 = 0x800000000LL;\n  result[8] = 0;\n  dword_4F9C08 = 0;\n  LOWORD(dword_4F9BF8[0]) = 0;\n  BYTE2(dword_4F9BF8[0]) = 0;\n  dword_4FA148 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x476550L", 
            "funcEndAddr": "0x4767ebL", 
            "funcName": "sub_476550"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4767F0(int a1)\n{\n  void *result; // rax\n\n  result = memset(*(&qword_4F9A90 + 3 * a1), 0, 0xFFD8uLL);\n  qword_4F9A80[3 * a1] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4767f0L", 
            "funcEndAddr": "0x47681aL", 
            "funcName": "sub_4767F0"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_476820()\n{\n  _QWORD *v0; // rdi\n\n  if ( qword_4F9550 )\n  {\n    free(*((void **)qword_4F9550 + 4));\n    free(qword_4F9550);\n  }\n  qword_4F9550 = 0LL;\n  v0 = qword_4F9C20;\n  if ( *((_QWORD *)qword_4F9C20 + 4) )\n  {\n    free(*((void **)qword_4F9C20 + 4));\n    v0 = qword_4F9C20;\n  }\n  v0[4] = 0LL;\n  if ( v0 )\n    free(v0);\n  qword_4F9C20 = 0LL;\n  qword_4F9C10 = 0LL;\n  if ( qword_4F9BB0 )\n  {\n    free(*((void **)qword_4F9BB0 + 4));\n    free(qword_4F9BB0);\n  }\n  qword_4F9BB0 = 0LL;\n  if ( qword_4F9AC8 )\n  {\n    free(*((void **)qword_4F9AC8 + 4));\n    free(qword_4F9AC8);\n  }\n  qword_4F9AC8 = 0LL;\n  if ( qword_4F9BD0 )\n  {\n    free(*((void **)qword_4F9BD0 + 4));\n    free(qword_4F9BD0);\n  }\n  qword_4F9BD0 = 0LL;\n  if ( qword_4F9BC0 )\n    free(qword_4F9BC0);\n  if ( qword_4F9AF0 )\n  {\n    free(*((void **)qword_4F9AF0 + 4));\n    free(qword_4F9AF0);\n  }\n  qword_4F9AF0 = 0LL;\n  if ( qword_4F9AD8 )\n    free(qword_4F9AD8);\n  if ( qword_4F9C00 )\n  {\n    free(*((void **)qword_4F9C00 + 4));\n    free(qword_4F9C00);\n  }\n  qword_4F9C00 = 0LL;\n  if ( qword_4F9A90 )\n    free(qword_4F9A90);\n  qword_4F9A90 = 0LL;\n  if ( qword_4F9AA8 )\n    free(qword_4F9AA8);\n  qword_4F9AA8 = 0LL;\n}\n", 
            "funcStartAddr": "0x476820L", 
            "funcEndAddr": "0x4769ccL", 
            "funcName": "sub_476820"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_476B90(signed int *a1, signed int *a2)\n{\n  char v2; // r9\n  signed __int64 v3; // r8\n  unsigned int v4; // edx\n  signed int v5; // eax\n  bool v6; // zf\n  __int64 v7; // r10\n  __int64 v8; // r11\n  int v9; // er8\n  unsigned int v10; // edx\n  char v11; // cl\n  unsigned int v12; // edx\n  __int64 v13; // r9\n  __int64 v14; // r10\n\n  if ( *a2 > 0 )\n  {\n    v2 = *((_BYTE *)a1 + 8);\n    v3 = 0LL;\n    do\n    {\n      v4 = 128;\n      v5 = 8;\n      do\n      {\n        v2 *= 2;\n        *((_BYTE *)a1 + 8) = v2;\n        if ( *(_BYTE *)(*((_QWORD *)a2 + 4) + v3) & (unsigned __int8)v4 )\n        {\n          v2 |= 1u;\n          *((_BYTE *)a1 + 8) = v2;\n        }\n        v6 = a1[1]-- == 1;\n        if ( v6 )\n        {\n          a1[1] = 8;\n          v7 = *((_QWORD *)a1 + 4);\n          v8 = *a1;\n          *a1 = v8 + 1;\n          *(_BYTE *)(v7 + v8) = v2;\n          *((_BYTE *)a1 + 8) = 0;\n          v2 = 0;\n        }\n        v4 >>= 1;\n        --v5;\n      }\n      while ( v5 );\n      ++v3;\n    }\n    while ( v3 < *a2 );\n  }\n  v9 = 8 - a2[1];\n  if ( a2[1] < 8 )\n  {\n    v10 = 1 << (v9 - 1);\n    v11 = *((_BYTE *)a1 + 8);\n    do\n    {\n      v11 *= 2;\n      *((_BYTE *)a1 + 8) = v11;\n      if ( (_BYTE)a2[2] & (unsigned __int8)v10 )\n      {\n        v11 |= 1u;\n        *((_BYTE *)a1 + 8) = v11;\n      }\n      v12 = v10 >> 1;\n      v6 = a1[1]-- == 1;\n      if ( v6 )\n      {\n        a1[1] = 8;\n        v13 = *((_QWORD *)a1 + 4);\n        v14 = *a1;\n        *a1 = v14 + 1;\n        *(_BYTE *)(v13 + v14) = v11;\n        *((_BYTE *)a1 + 8) = 0;\n        v11 = 0;\n      }\n      v10 = v12 & 0x7F;\n      --v9;\n    }\n    while ( v9 );\n  }\n}\n", 
            "funcStartAddr": "0x476b90L", 
            "funcEndAddr": "0x476c63L", 
            "funcName": "sub_476B90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *sub_476C70()\n{\n  void *v0; // rdi\n  void **v1; // rbx\n  void *v2; // rax\n  _BYTE *result; // rax\n\n  v0 = qword_4F9C20;\n  if ( qword_4F9C20 )\n  {\n    if ( *((_QWORD *)qword_4F9C20 + 4) )\n    {\n      free(*((void **)qword_4F9C20 + 4));\n      v0 = qword_4F9C20;\n      *((_QWORD *)qword_4F9C20 + 4) = 0LL;\n      if ( !v0 )\n        goto LABEL_7;\n    }\n    else\n    {\n      *((_QWORD *)qword_4F9C20 + 4) = 0LL;\n    }\n    free(v0);\nLABEL_7:\n    qword_4F9C20 = 0LL;\n    qword_4F9C10 = 0LL;\n  }\n  v1 = (void **)malloc(0x30uLL);\n  qword_4F9C20 = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitSparePicture: seiSparePicturePayload.data\");\n  v2 = malloc(0xFFD8uLL);\n  v1[4] = v2;\n  if ( !v2 )\n    sub_43EF40(0LL, (__int64)\"InitSparePicture: seiSparePicturePayload.data->streamBuffer\");\n  memset(v1[4], 0, 0xFFD8uLL);\n  qword_4F9C10 = 0LL;\n  result = qword_4F9C20;\n  *(_QWORD *)qword_4F9C20 = 0x800000000LL;\n  result[8] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x476c70L", 
            "funcEndAddr": "0x476d4aL", 
            "funcName": "sub_476C70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_476DB0(int a1, int a2, signed int *a3)\n{\n  signed int *v3; // r14\n  signed int *v4; // rbx\n  int v5; // [rsp+8h] [rbp-50h]\n  int v6; // [rsp+Ch] [rbp-4Ch]\n  __int64 (__fastcall *v7)(int, __int64, _DWORD *, _DWORD *); // [rsp+28h] [rbp-30h]\n\n  v3 = a3;\n  v4 = (signed int *)qword_4F9C20;\n  v5 = 0;\n  v7 = sub_47FB70;\n  v6 = a1;\n  sub_4803C0((unsigned int *)&v5, (signed int *)qword_4F9C20);\n  v6 = a2;\n  sub_4803C0((unsigned int *)&v5, v4);\n  sub_476B90(v4, v3);\n}\n", 
            "funcStartAddr": "0x476db0L", 
            "funcEndAddr": "0x476e10L", 
            "funcName": "sub_476DB0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_476E10(__int64 a1, signed int *a2)\n{\n  signed int *v2; // r14\n  _DWORD *v3; // rcx\n  signed int v4; // edx\n  signed int v5; // edi\n  int v6; // esi\n  int v7; // ebp\n  int v8; // ebx\n  __int64 v9; // rdi\n  int v10; // er15\n  int v11; // eax\n  int v12; // er13\n  signed int v13; // ebp\n  signed int v14; // er12\n  int v15; // er8\n  int v16; // er14\n  __int64 v17; // rax\n  bool v18; // zf\n  __int64 v19; // rdx\n  bool v20; // zf\n  int v21; // er15\n  __int64 v22; // rdx\n  bool v23; // zf\n  int v24; // er15\n  __int64 v25; // rax\n  bool v26; // zf\n  _BOOL8 result; // rax\n  _DWORD *v28; // rsi\n  char v29; // cl\n  signed __int64 v30; // rdx\n  signed __int64 v31; // rdi\n  __int64 v32; // rsi\n  __int64 v33; // rbp\n  __int64 v34; // [rsp+8h] [rbp-A0h]\n  __int64 v35; // [rsp+10h] [rbp-98h]\n  __int64 v36; // [rsp+18h] [rbp-90h]\n  __int64 v37; // [rsp+20h] [rbp-88h]\n  int v38; // [rsp+2Ch] [rbp-7Ch]\n  signed int *v39; // [rsp+30h] [rbp-78h]\n  int v40; // [rsp+3Ch] [rbp-6Ch]\n  __int64 v41; // [rsp+40h] [rbp-68h]\n  int v42; // [rsp+48h] [rbp-60h]\n  int v43; // [rsp+4Ch] [rbp-5Ch]\n  __int64 (__fastcall *v44)(int, __int64, _DWORD *, _DWORD *); // [rsp+68h] [rbp-40h]\n\n  v2 = a2;\n  v41 = a1;\n  v3 = off_49F6D0;\n  v4 = *((_DWORD *)off_49F6D0 + 13);\n  v5 = *((_DWORD *)off_49F6D0 + 15);\n  v6 = v4 / 16;\n  v7 = v5 / 16 * (v4 / 16);\n  v42 = 0;\n  v44 = sub_47FB70;\n  v8 = 0;\n  if ( v5 >= 16 )\n  {\n    v39 = v2;\n    v38 = v5 / 16 * (v4 / 16);\n    v9 = (unsigned int)((signed int)(v5 / 16 + ((unsigned int)(v5 / 16 - 1) >> 31) - 1) >> 1);\n    v10 = 1;\n    v11 = 0;\n    v8 = 0;\n    v12 = 0;\n    v34 = (unsigned int)v9;\n    v37 = (unsigned int)((signed int)(v6 + ((unsigned int)(v6 - 1) >> 31) - 1) >> 1);\n    v35 = v9;\n    v13 = v9;\n    v36 = (unsigned int)((signed int)(v6 + ((unsigned int)(v6 - 1) >> 31) - 1) >> 1);\n    v14 = (signed int)(v6 + ((unsigned int)(v6 - 1) >> 31) - 1) >> 1;\n    v15 = 0;\n    while ( 1 )\n    {\n      v40 = v11;\n      if ( v4 >= 16 )\n        break;\nLABEL_52:\n      v11 = v40 + 1;\n      if ( v40 + 1 >= v3[15] / 16 )\n      {\n        if ( v15 )\n        {\n          v43 = v15;\n          v2 = v39;\n          v8 += sub_4803C0((unsigned int *)&v42, v39);\n          v7 = v38;\n        }\n        else\n        {\n          v7 = v38;\n          v2 = v39;\n        }\n        goto LABEL_56;\n      }\n    }\n    v16 = 0;\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(*(_QWORD *)(v41 + 8LL * v13) + v14) )\n      {\n        v43 = v15;\n        v8 += sub_4803C0((unsigned int *)&v42, v39);\n        v15 = 0;\n        if ( v12 != -1 )\n          goto LABEL_11;\n      }\n      else\n      {\n        ++v15;\n        if ( v12 != -1 )\n        {\nLABEL_11:\n          if ( v12 != 1 || v10 )\n          {\n            if ( v12 || v10 != -1 )\n            {\n              if ( !v12 && v10 == 1 )\n              {\n                if ( v13 >= (signed int)v34 )\n                {\n                  if ( v13 == *((_DWORD *)off_49F6D0 + 15) / 16 - 1 )\n                  {\n                    v10 = -1;\n                    v12 = 0;\n                    v36 = (unsigned int)(v36 + 1);\n                    v14 = v36;\n                  }\n                  else\n                  {\n                    v25 = v34;\n                    v26 = v13 == (_DWORD)v34;\n                    v10 = v13 != v34;\n                    v12 = v13 == v34;\n                    if ( v13 == (_DWORD)v34 )\n                      v13 = v34 + 1;\n                    if ( v26 )\n                      v25 = (unsigned int)(v34 + 1);\n                    v34 = v25;\n                  }\n                }\n                else\n                {\n                  ++v13;\n                  v10 = 1;\n                  v12 = 0;\n                }\n              }\n            }\n            else if ( v13 <= (signed int)v35 )\n            {\n              if ( v13 )\n              {\n                v19 = v35;\n                v20 = v13 == (_DWORD)v35;\n                v21 = v13 == v35;\n                if ( v13 == (_DWORD)v35 )\n                  v13 = v35 - 1;\n                if ( v20 )\n                  v19 = (unsigned int)(v35 - 1);\n                v35 = v19;\n                v12 = -v21;\n                v10 = v21 - 1;\n              }\n              else\n              {\n                v10 = 1;\n                v13 = 0;\n                v37 = (unsigned int)(v37 - 1);\n                v14 = v37;\n                v12 = 0;\n              }\n            }\n            else\n            {\n              --v13;\n              v10 = -1;\n              v12 = 0;\n            }\n          }\n          else if ( v14 >= (signed int)v36 )\n          {\n            if ( v14 == *((_DWORD *)off_49F6D0 + 13) / 16 - 1 )\n            {\n              v10 = 0;\n              v12 = -1;\n              v35 = (unsigned int)(v35 - 1);\n              v13 = v35;\n            }\n            else\n            {\n              v22 = v36;\n              v12 = 0;\n              v23 = v14 == (_DWORD)v36;\n              v24 = v14 == v36;\n              if ( v14 == (_DWORD)v36 )\n                v14 = v36 + 1;\n              LOBYTE(v12) = !v23;\n              if ( v23 )\n                v22 = (unsigned int)(v36 + 1);\n              v36 = v22;\n              v10 = -v24;\n            }\n          }\n          else\n          {\n            ++v14;\n            v10 = 0;\n            v12 = 1;\n          }\n          goto LABEL_51;\n        }\n      }\n      if ( v10 )\n        goto LABEL_11;\n      if ( v14 <= (signed int)v37 )\n      {\n        if ( v14 )\n        {\n          v17 = v37;\n          v10 = 0;\n          v18 = v14 == (_DWORD)v37;\n          if ( v14 == (_DWORD)v37 )\n            v14 = v37 - 1;\n          LOBYTE(v10) = v18;\n          if ( v18 )\n            v17 = (unsigned int)(v37 - 1);\n          v37 = v17;\n          v12 = v10 - 1;\n        }\n        else\n        {\n          v12 = 1;\n          v14 = 0;\n          v34 = (unsigned int)(v34 + 1);\n          v13 = v34;\n          v10 = 0;\n        }\n      }\n      else\n      {\n        --v14;\n        v10 = 0;\n        v12 = -1;\n      }\nLABEL_51:\n      ++v16;\n      v3 = off_49F6D0;\n      v4 = *((_DWORD *)off_49F6D0 + 13);\n      if ( v16 >= v4 / 16 )\n        goto LABEL_52;\n    }\n  }\nLABEL_56:\n  result = v8 < v7;\n  if ( v8 >= v7 )\n  {\n    *((_BYTE *)v2 + 8) = 0;\n    *(_QWORD *)v2 = 0x800000000LL;\n    v28 = off_49F6D0;\n    if ( *((_DWORD *)off_49F6D0 + 15) >= 16 )\n    {\n      v29 = 0;\n      v30 = 0LL;\n      do\n      {\n        if ( v28[13] >= 16 )\n        {\n          v31 = 0LL;\n          do\n          {\n            v29 *= 2;\n            *((_BYTE *)v2 + 8) = v29;\n            if ( *(_BYTE *)(*(_QWORD *)(v41 + 8 * v30) + v31) )\n            {\n              v29 |= 1u;\n              *((_BYTE *)v2 + 8) = v29;\n            }\n            v18 = v2[1]-- == 1;\n            if ( v18 )\n            {\n              v2[1] = 8;\n              v32 = *((_QWORD *)v2 + 4);\n              v33 = *v2;\n              *v2 = v33 + 1;\n              *(_BYTE *)(v32 + v33) = v29;\n              *((_BYTE *)v2 + 8) = 0;\n              v29 = 0;\n              v28 = off_49F6D0;\n            }\n            ++v31;\n          }\n          while ( v31 < v28[13] / 16 );\n        }\n        ++v30;\n      }\n      while ( v30 < v28[15] / 16 );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x476e10L", 
            "funcEndAddr": "0x477296L", 
            "funcName": "sub_476E10"
        }, 
        {
            "decompiledFuncCode": "void sub_4772A0()\n{\n  int v0; // er15\n  unsigned int v1; // ebp\n  void *v2; // r14\n  signed int *v3; // rbx\n  int v4; // er15\n  void *v5; // rax\n  int v6; // er15\n  int v7; // eax\n  signed int v8; // ecx\n  int v9; // eax\n  bool v10; // zf\n  int v11; // ecx\n  __int64 v12; // rcx\n  __int64 v13; // rdx\n  int v14; // [rsp+8h] [rbp-50h]\n  int v15; // [rsp+Ch] [rbp-4Ch]\n  __int64 (__fastcall *v16)(int, __int64, _DWORD *, _DWORD *); // [rsp+28h] [rbp-30h]\n\n  v0 = *(_DWORD *)off_49F6D0;\n  v1 = (*(_DWORD *)off_49F6D0 + (*(_DWORD *)off_49F6D0 >> 31 >> 24)) & 0xFFFFFF00;\n  v14 = 0;\n  v16 = sub_47FB70;\n  v2 = qword_4F9C20;\n  v3 = (signed int *)malloc(0x30uLL);\n  if ( !v3 )\n    sub_43EF40(0LL, (__int64)\"FinalizeSpareMBMap: dest\");\n  v4 = v0 - v1;\n  v5 = malloc(0xFFD8uLL);\n  *((_QWORD *)v3 + 4) = v5;\n  if ( !v5 )\n    sub_43EF40(0LL, (__int64)\"FinalizeSpareMBMap: dest->streamBuffer\");\n  *(_QWORD *)v3 = 0x800000000LL;\n  *((_BYTE *)v3 + 8) = 0;\n  memset(v5, 0, 0xFFD8uLL);\n  v6 = v4 - qword_4F9C10;\n  v7 = v6 + 256;\n  if ( v6 >= 0 )\n    v7 = v6;\n  v15 = v7;\n  sub_4803C0((unsigned int *)&v14, v3);\n  v15 = HIDWORD(qword_4F9C10) - 1;\n  sub_4803C0((unsigned int *)&v14, v3);\n  sub_476B90(v3, (signed int *)v2);\n  v8 = v3[1];\n  if ( v8 != 8 )\n  {\n    LOBYTE(v9) = 2 * *((_BYTE *)v3 + 8) | 1;\n    *((_BYTE *)v3 + 8) = v9;\n    v10 = v8 == 1;\n    v11 = v8 - 1;\n    v3[1] = v11;\n    if ( !v10 )\n    {\n      v9 = (unsigned __int8)v9 << v11;\n      *((_BYTE *)v3 + 8) = v9;\n    }\n    v3[1] = 8;\n    v12 = *((_QWORD *)v3 + 4);\n    v13 = *v3;\n    *v3 = v13 + 1;\n    *(_BYTE *)(v12 + v13) = v9;\n    *((_BYTE *)v3 + 8) = 0;\n  }\n  dword_4F9C18 = *v3;\n  qword_4F9C20 = v3;\n  free(*((void **)v2 + 4));\n  free(v2);\n}\n", 
            "funcStartAddr": "0x4772a0L", 
            "funcEndAddr": "0x4773f1L", 
            "funcName": "sub_4772A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4774D0(int a1)\n{\n  unsigned __int64 result; // rax\n  int v2; // ecx\n  int v3; // edi\n  int v4; // edx\n\n  result = (unsigned __int64)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n    HIDWORD(qword_4F9998[4 * a1]) = (unsigned __int8)(HIDWORD(qword_4F9998[4 * a1]) + 1);\n  if ( a1 == 1 )\n  {\n    v2 = *(_DWORD *)result - dword_49FB88;\n    v3 = *((_DWORD *)dest + 728);\n    v4 = v2 % (v3 + 1);\n    result = (unsigned int)(v2 / (v3 + 1));\n    dword_4F99B8 = !v4 && v2 > 0 && (result = *((unsigned int *)dest + 309), (_DWORD)result)\n                || v4 == v3 && !*((_DWORD *)dest + 309);\n  }\n  else if ( !a1 )\n  {\n    LODWORD(qword_4F9998[0]) = *(_DWORD *)result == *((_DWORD *)dest + 2) - 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4774d0L", 
            "funcEndAddr": "0x47757bL", 
            "funcName": "sub_4774D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_477660(int a1)\n{\n  unsigned __int64 v1; // rbx\n  __int64 v2; // rax\n  void *result; // rax\n\n  v1 = 8LL * a1;\n  v2 = qword_4F99A8[v1 / 2];\n  *(_QWORD *)v2 = 0x800000000LL;\n  *(_BYTE *)(v2 + 8) = 0;\n  result = memset(*(void **)(v2 + 32), 0, 0xFFD8uLL);\n  dword_4F99A0[v1] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x477660L", 
            "funcEndAddr": "0x47769cL", 
            "funcName": "sub_477660"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4776A0(int a1)\n{\n  signed __int64 v1; // rbx\n\n  v1 = 4LL * a1;\n  *(_QWORD *)(v1 * 8 + 5216668) = 0xFFFFFFFFLL;\n  free(*(void **)(qword_4F99A8[v1] + 32));\n  free((void *)qword_4F99A8[v1]);\n}\n", 
            "funcStartAddr": "0x4776a0L", 
            "funcEndAddr": "0x4776d1L", 
            "funcName": "sub_4776A0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4777D0()\n{\n  void **v0; // rbx\n  void *v1; // rax\n  _BYTE *v2; // rax\n  __int64 result; // rax\n\n  v0 = (void **)malloc(0x30uLL);\n  qword_4F9550 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitSubseqChar: seiSubseqChar.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitSubseqChar: seiSubseqChar.data->streamBuffer\");\n  memset(v0[4], 0, 0xFFD8uLL);\n  v2 = qword_4F9550;\n  *(_QWORD *)qword_4F9550 = 0x800000000LL;\n  v2[8] = 0;\n  dword_4F9558 = 0;\n  dword_4A05AC = 0;\n  dword_4F9508 = *((_DWORD *)off_49F6D0 + 18096);\n  result = (unsigned int)dword_4F9994[8 * dword_4F9508];\n  dword_4F950C = dword_4F9994[8 * dword_4F9508];\n  dword_4F9510 = 0;\n  LODWORD(xmmword_4F9518) = 0;\n  HIDWORD(xmmword_4F9518) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4777d0L", 
            "funcEndAddr": "0x47789fL", 
            "funcName": "sub_4777D0"
        }, 
        {
            "decompiledFuncCode": "void *sub_477B60()\n{\n  _QWORD *v0; // rbx\n  void *v1; // rax\n\n  dword_4A0594 = 1;\n  qword_4F9BA0 = 0LL;\n  dword_4F9BA8 = -1;\n  v0 = malloc(0x30uLL);\n  qword_4F9BB0 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitSceneInformation: seiSceneInformation.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitSceneInformation: seiSceneInformation.data->streamBuffer\");\n  *v0 = 0x800000000LL;\n  *((_BYTE *)v0 + 8) = 0;\n  return memset((void *)v0[4], 0, 0xFFD8uLL);\n}\n", 
            "funcStartAddr": "0x477b60L", 
            "funcEndAddr": "0x477bf0L", 
            "funcName": "sub_477B60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_477D00(int a1, int a2, signed int a3, int a4)\n{\n  dword_4A0594 = a1;\n  LODWORD(qword_4F9BA0) = a2;\n  HIDWORD(qword_4F9BA0) = a3;\n  if ( a3 >= 4 )\n    dword_4F9BA8 = a4;\n}\n", 
            "funcStartAddr": "0x477d00L", 
            "funcEndAddr": "0x477d1eL", 
            "funcName": "sub_477D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *sub_477D20()\n{\n  void **v0; // rbx\n  void *v1; // rax\n  _BYTE *result; // rax\n\n  v0 = (void **)malloc(0x30uLL);\n  qword_4F9AC8 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitPanScanRectInfo: seiPanScanRectInfo.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitPanScanRectInfo: seiPanScanRectInfo.data->streamBuffer\");\n  memset(v0[4], 0, 0xFFD8uLL);\n  result = qword_4F9AC8;\n  *(_QWORD *)qword_4F9AC8 = 0x800000000LL;\n  result[8] = 0;\n  dword_4F9AD0 = 0;\n  LODWORD(xmmword_4A05B0[0]) = 1;\n  *(__int128 *)((char *)&xmmword_4F9AB0 + 4) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x477d20L", 
            "funcEndAddr": "0x477db7L", 
            "funcName": "sub_477D20"
        }, 
        {
            "decompiledFuncCode": "void *sub_477F60()\n{\n  _QWORD *v0; // rbx\n  void *v1; // rax\n  _BYTE *v2; // rax\n  void *result; // rax\n\n  v0 = malloc(0x30uLL);\n  qword_4F9BD0 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitUser_data_unregistered: seiUser_data_unregistered.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitUser_data_unregistered: seiUser_data_unregistered.data->streamBuffer\");\n  qword_4F9BC0 = malloc(0xFFD8uLL);\n  if ( !qword_4F9BC0 )\n    sub_43EF40(0LL, (__int64)\"InitUser_data_unregistered: seiUser_data_unregistered.byte\");\n  memset(*((void **)qword_4F9BD0 + 4), 0, 0xFFD8uLL);\n  v2 = qword_4F9BD0;\n  *(_QWORD *)qword_4F9BD0 = 0x800000000LL;\n  v2[8] = 0;\n  dword_4F9BD8 = 0;\n  result = memset(qword_4F9BC0, 0, 0xFFD8uLL);\n  dword_4F9BC8 = 0;\n  dword_4FA150 = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x477f60L", 
            "funcEndAddr": "0x47802aL", 
            "funcName": "sub_477F60"
        }, 
        {
            "decompiledFuncCode": "void *sub_478210()\n{\n  void **v0; // rbx\n  void *v1; // rax\n  void *v2; // rax\n  _BYTE *v3; // rax\n  void *result; // rax\n\n  v0 = (void **)malloc(0x30uLL);\n  qword_4F9AF0 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitUser_data_unregistered: seiUser_data_registered_itu_t_t35.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitUser_data_unregistered: seiUser_data_registered_itu_t_t35.data->streamBuffer\");\n  v2 = malloc(0xFFD8uLL);\n  qword_4F9AD8 = v2;\n  if ( !v0 )\n    sub_43EF40((__int64)v2, (__int64)\"InitUser_data_unregistered: seiUser_data_registered_itu_t_t35.byte\");\n  memset(v0[4], 0, 0xFFD8uLL);\n  v3 = qword_4F9AF0;\n  *(_QWORD *)qword_4F9AF0 = 0x800000000LL;\n  v3[8] = 0;\n  dword_4F9AF8 = 0;\n  result = memset(qword_4F9AD8, 0, 0xFFD8uLL);\n  qword_4F9AE0 = 0LL;\n  dword_4F9AE8 = 0;\n  dword_4FA14C = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x478210L", 
            "funcEndAddr": "0x4782ecL", 
            "funcName": "sub_478210"
        }, 
        {
            "decompiledFuncCode": "_BYTE *sub_478530()\n{\n  void **v0; // rbx\n  void *v1; // rax\n  _BYTE *result; // rax\n\n  v0 = (void **)malloc(0x30uLL);\n  qword_4F9C00 = v0;\n  if ( !v0 )\n    sub_43EF40(0LL, (__int64)\"InitRandomAccess: seiRandomAccess.data\");\n  v1 = malloc(0xFFD8uLL);\n  v0[4] = v1;\n  if ( !v1 )\n    sub_43EF40(0LL, (__int64)\"InitRandomAccess: seiRandomAccess.data->streamBuffer\");\n  memset(v0[4], 0, 0xFFD8uLL);\n  result = qword_4F9C00;\n  *(_QWORD *)qword_4F9C00 = 0x800000000LL;\n  result[8] = 0;\n  dword_4F9C08 = 0;\n  LOWORD(dword_4F9BF8[0]) = 0;\n  BYTE2(dword_4F9BF8[0]) = 0;\n  dword_4FA148 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x478530L", 
            "funcEndAddr": "0x4785cdL", 
            "funcName": "sub_478530"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_478790()\n{\n  signed __int64 v0; // r12\n  signed __int64 v1; // r13\n  __int64 v2; // rbx\n  unsigned int v3; // er14\n  __int64 v4; // rbp\n  int v5; // eax\n  __int64 v6; // r15\n  int v7; // eax\n  __int64 v8; // rcx\n  __int64 v10; // [rsp+0h] [rbp-38h]\n\n  v10 = *((_QWORD *)off_49F6D0 + 1770);\n  v0 = 1LL;\n  if ( !*(_DWORD *)(*((_QWORD *)off_49F6D0 + 1769) + 4LL) )\n    v0 = 2LL * (*((_DWORD *)dest + 591) != 0) + 1;\n  sub_4764C0(*((_DWORD *)off_49F6D0 + 17948));\n  v1 = 8LL;\n  v2 = 0LL;\n  v3 = 0;\n  do\n  {\n    v4 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + v1 - 8);\n    *(_DWORD *)(v4 + 40) = 0;\n    if ( v2 )\n      v5 = sub_41C9D0(v2);\n    else\n      v5 = sub_41BC60();\n    v3 += v5;\n    if ( *((_DWORD *)dest + 589) == 1 )\n    {\n      v6 = v1 + *(_QWORD *)(v10 + 24);\n      v7 = *(_DWORD *)(v4 + 4);\n      if ( v7 == 8 )\n        v7 = 0;\n      v3 += v7;\n      sub_480DC0((signed int *)v4);\n      v8 = *((unsigned int *)off_49F6D0 + 6);\n      sub_401310(v6, *(_QWORD *)(v4 + 32), (unsigned int *)v4);\n      sub_40AA40();\n    }\n    else\n    {\n      sub_425670();\n    }\n    ++v2;\n    v1 += 120LL;\n  }\n  while ( v0 != v2 );\n  if ( *((_DWORD *)dest + 589) == 1 )\n    sub_40F240();\n  return v3;\n}\n", 
            "funcStartAddr": "0x478790L", 
            "funcEndAddr": "0x4788e1L", 
            "funcName": "sub_478790"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4788F0()\n{\n  __int64 v0; // r14\n  __int64 v1; // rbp\n  signed __int64 v2; // r12\n  __int64 v3; // rbx\n  __int64 v4; // r13\n  int v5; // er15\n  __int64 v6; // rdi\n  int v7; // ecx\n  int v8; // eax\n\n  v0 = *((_QWORD *)off_49F6D0 + 1770);\n  if ( *((_DWORD *)dest + 589) == 1 )\n    sub_432FC0(1);\n  if ( *(_DWORD *)(v0 + 16) > 0 )\n  {\n    v1 = 0LL;\n    v2 = 0LL;\n    do\n    {\n      v3 = *(_QWORD *)(v0 + 24);\n      v4 = *(_QWORD *)(v3 + v1);\n      if ( *((_DWORD *)dest + 589) )\n      {\n        sub_401360(v3 + v1 + 8);\n        *(_DWORD *)(v4 + 4) = *(_DWORD *)(v3 + v1 + 20);\n        *(_BYTE *)(v4 + 8) = 0;\n        v5 = *(_DWORD *)v4;\n        v6 = *(_QWORD *)(v4 + 32);\n        v7 = *(_DWORD *)(v3 + v1 + 96);\n      }\n      else\n      {\n        sub_452360(*(signed int **)(v3 + v1));\n        v5 = *(_DWORD *)v4;\n        v6 = *(_QWORD *)(v4 + 32);\n        v7 = 0;\n      }\n      v8 = sub_452390(v6, 0, v5, v7);\n      *(_DWORD *)v4 = v8;\n      **((_DWORD **)off_49F6D8 + 185) += 8 * (v8 - v5);\n      ++v2;\n      v1 += 120LL;\n    }\n    while ( v2 < *(signed int *)(v0 + 16) );\n  }\n  if ( *((_DWORD *)dest + 589) == 1 )\n    sub_412180();\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4788f0L", 
            "funcEndAddr": "0x478a03L", 
            "funcName": "sub_4788F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_478A10@<rax>(int a1@<edi>, double a2@<xmm1>, __m128i a3@<xmm12>)\n{\n  unsigned int v3; // er12\n  _DWORD *v4; // rax\n  signed int *v5; // r13\n  signed int v6; // ecx\n  int v7; // er15\n  signed int *v8; // r14\n  _DWORD *v9; // rax\n  size_t v10; // r15\n  int v11; // eax\n  __int64 v12; // rdx\n  bool v13; // zf\n  size_t v14; // rbp\n  void *v15; // rdx\n  char *v16; // rbx\n  void *v17; // rax\n  void *v18; // rax\n  _DWORD *v19; // rax\n  __int64 v20; // rsi\n  __int64 v21; // r8\n  void *v22; // rdx\n  __int64 v23; // r9\n  __int64 v24; // rbp\n  __int64 v25; // rsi\n  __int64 *v26; // rcx\n  __int64 v27; // rdi\n  __int64 v28; // rdi\n  __int64 v29; // rcx\n  __int64 v30; // rcx\n  signed int v31; // esi\n  signed int *v32; // rax\n  signed int v33; // edx\n  signed int v34; // ecx\n  _DWORD *v35; // rdi\n  signed int v36; // ebp\n  signed int v37; // ebp\n  signed int v38; // esi\n  __int64 v39; // rdx\n  signed int v40; // eax\n  int v41; // edi\n  __int64 v42; // r8\n  __int64 v43; // r9\n  signed int v44; // ecx\n  signed __int64 v45; // rsi\n  __int64 v46; // rcx\n  __int64 v47; // rdx\n  __int64 v48; // rdi\n  signed __int64 v49; // rbp\n  __int64 v50; // rcx\n  __int64 v51; // rdx\n  __int64 v52; // rsi\n  signed __int64 v53; // rdi\n  __int64 v54; // r8\n  __int64 v55; // r9\n  __int64 v56; // rax\n  _QWORD *v57; // rcx\n  __int64 v58; // rdx\n  __int64 v59; // rsi\n  _DWORD *v60; // rdi\n  __int64 v61; // rax\n  _QWORD *v62; // rcx\n  __int64 v63; // rdx\n  __int64 v64; // rsi\n  _DWORD *v65; // rdi\n  _DWORD *v66; // r8\n  __int64 v67; // rcx\n  signed __int64 v68; // r9\n  __int64 v69; // rsi\n  __int64 v70; // rdi\n  __int64 v71; // rbp\n  _DWORD *v72; // rbx\n  int v73; // eax\n  signed int *v74; // rcx\n  __int128 *v75; // rdx\n  unsigned int v76; // ebp\n  _DWORD *v77; // rax\n  int v78; // edx\n  _DWORD *v79; // rax\n  _QWORD *v80; // rcx\n  _DWORD *v81; // rax\n  _DWORD *v82; // rcx\n  unsigned __int64 v83; // rsi\n  int v84; // eax\n  void *v85; // rax\n  _DWORD *v86; // rax\n  void *v87; // rax\n  _DWORD *v88; // rax\n  int v89; // eax\n  int v90; // eax\n  int v91; // eax\n  int v93; // [rsp+Ch] [rbp-4Ch]\n  double v94; // [rsp+10h] [rbp-48h]\n  int v95; // [rsp+1Ch] [rbp-3Ch]\n  double v96; // [rsp+20h] [rbp-38h]\n\n  v93 = 0;\n  *((_DWORD *)off_49F6D0 + 30) = 0;\n  v3 = sub_41BC40(a1);\n  v4 = off_49F6D0;\n  v5 = (signed int *)*((_QWORD *)off_49F6D0 + 1769);\n  *((_DWORD *)off_49F6D0 + 3) = v3;\n  v6 = (*v5)++;\n  if ( v6 >= 99 )\n    error((__int64)\"Too many slices per picture, increase MAXLSICESPERPICTURE in global.h.\", -1);\n  v7 = v4[15] * v4[13];\n  v8 = (signed int *)calloc(1uLL, 0x98uLL);\n  if ( !v8 )\n    sub_43EF40(0LL, (__int64)\"malloc_slice: slice structure\");\n  v9 = dest;\n  if ( *((_DWORD *)dest + 589) == 1 )\n  {\n    *((_QWORD *)v8 + 4) = sub_40AB10();\n    *((_QWORD *)v8 + 5) = sub_40AB40();\n    v9 = dest;\n  }\n  LODWORD(v10) = 4 * v7;\n  v11 = v9[591];\n  v12 = *((_QWORD *)off_49F6D0 + 1769);\n  v13 = *(_DWORD *)(v12 + 4) == 0;\n  v14 = 1LL;\n  if ( !*(_DWORD *)(v12 + 4) )\n    v14 = 2 * (unsigned int)(v11 != 0) + 1;\n  v8[4] = v14;\n  qword_4F9C40[0] = (__int64)&unk_49FAF0;\n  v15 = &unk_49F670;\n  if ( !v13 )\n    v15 = &unk_49FAF0;\n  if ( v11 != 1 )\n    v15 = &unk_49FAF0;\n  qword_4F9C48 = (__int64)v15;\n  v16 = (char *)calloc(v14, 0x78uLL);\n  *((_QWORD *)v8 + 3) = v16;\n  if ( !v16 )\n    sub_43EF40(0LL, (__int64)\"malloc_slice: partArr\");\n  v10 = (signed int)v10;\n  do\n  {\n    v17 = calloc(1uLL, 0x30uLL);\n    *(_QWORD *)v16 = v17;\n    if ( !v17 )\n      sub_43EF40(0LL, (__int64)\"malloc_slice: Bitstream\");\n    v18 = calloc(v10, 1uLL);\n    *(_QWORD *)(*(_QWORD *)v16 + 32LL) = v18;\n    if ( !v18 )\n      sub_43EF40(0LL, (__int64)\"malloc_slice: StreamBuffer\");\n    v16 += 120;\n    --v14;\n  }\n  while ( v14 );\n  *(_QWORD *)&v5[2 * *v5] = v8;\n  v19 = off_49F6D0;\n  *((_QWORD *)off_49F6D0 + 1770) = v8;\n  *v8 = v19[17948] % 256;\n  v8[1] = v19[10];\n  v8[3] = v3;\n  *((_QWORD *)v8 + 15) = sub_420F40;\n  v20 = v8[4];\n  if ( v20 > 0 )\n  {\n    v21 = *((_QWORD *)v8 + 3);\n    v22 = sub_40AB90;\n    if ( !*((_DWORD *)dest + 589) )\n      v22 = sub_47FBD0;\n    v23 = v20 & 1;\n    if ( (_DWORD)v20 == 1 )\n    {\n      v24 = 0LL;\n      if ( !(v20 & 1) )\n        goto LABEL_31;\n      goto LABEL_30;\n    }\n    v25 = v20 - v23;\n    v24 = 0LL;\n    v26 = (__int64 *)*((_QWORD *)v8 + 3);\n    do\n    {\n      v26[14] = (__int64)v22;\n      v27 = *v26;\n      *(_QWORD *)v27 = 0x800000000LL;\n      *(_BYTE *)(v27 + 8) = 0;\n      v26[29] = (__int64)v22;\n      v28 = v26[15];\n      *(_QWORD *)v28 = 0x800000000LL;\n      *(_BYTE *)(v28 + 8) = 0;\n      v24 += 2LL;\n      v26 += 30;\n    }\n    while ( v25 != v24 );\n    if ( v23 )\n    {\nLABEL_30:\n      *(_QWORD *)(v21 + 120 * v24 + 112) = v22;\n      v29 = *(_QWORD *)(v21 + 120 * v24);\n      *(_QWORD *)v29 = 0x800000000LL;\n      *(_BYTE *)(v29 + 8) = 0;\n      goto LABEL_31;\n    }\n  }\nLABEL_31:\n  v30 = qword_4F9DB8;\n  v19[18000] = *(_DWORD *)(qword_4F9DB8 + 184) + 1;\n  v19[18001] = *(_DWORD *)(v30 + 188) + 1;\n  sub_437FA0(v19[6], v19[7]);\n  v31 = qword_4F9BE0[0];\n  v32 = (signed int *)off_49F6D0;\n  *((_DWORD *)off_49F6D0 + 18000) = qword_4F9BE0[0];\n  v33 = HIDWORD(qword_4F9BE0[0]);\n  v32[18001] = HIDWORD(qword_4F9BE0[0]);\n  v34 = v32[6];\n  if ( !v34 || v34 == 3 )\n  {\n    v35 = dest;\n    v36 = *((_DWORD *)dest + 10);\n    if ( v36 )\n    {\n      if ( v31 > v36 )\n        v31 = *((_DWORD *)dest + 10);\n      v32[18000] = v31;\n      LODWORD(qword_4F9BE0[0]) = v31;\n    }\n    if ( v34 != 1 )\n      goto LABEL_48;\n    goto LABEL_40;\n  }\n  if ( v34 == 1 )\n  {\n    v35 = dest;\nLABEL_40:\n    v37 = v35[11];\n    if ( v37 )\n    {\n      if ( v31 <= v37 )\n        v37 = v31;\n      v32[18000] = v37;\n      LODWORD(qword_4F9BE0[0]) = v37;\n    }\n    v38 = v35[12];\n    if ( v38 )\n    {\n      if ( v33 <= v38 )\n        v38 = v33;\n      v32[18001] = v38;\n      HIDWORD(qword_4F9BE0[0]) = v38;\n    }\n  }\nLABEL_48:\n  if ( v32[18124] && *((_DWORD *)dest + 330) && *((_DWORD *)dest + 588) && (_DWORD)qword_4F99EC == (_DWORD)nmemb )\n  {\n    sub_4165E0(v32[18116]);\n    v32 = (signed int *)off_49F6D0;\n    v34 = *((_DWORD *)off_49F6D0 + 6);\n  }\n  v39 = *((_QWORD *)v32 + 1770);\n  *(_DWORD *)(v39 + 56) = 0;\n  *(_DWORD *)(v39 + 88) = 0;\n  if ( v34 || !*((_DWORD *)dest + 330) || !*((_DWORD *)dest + 587) )\n    goto LABEL_54;\n  sub_43D060(v8);\n  v32 = (signed int *)off_49F6D0;\n  v44 = *((_DWORD *)off_49F6D0 + 6);\n  if ( v44 != 2 && v44 != 4 )\n  {\n    LODWORD(v45) = *((_DWORD *)off_49F6D0 + 18000);\n    if ( (signed int)v45 >= 0 )\n    {\n      v46 = *((_QWORD *)v8 + 8);\n      v47 = *((_QWORD *)v8 + 9);\n      v48 = *((_QWORD *)v8 + 10);\n      v49 = -1LL;\n      do\n      {\n        *(_DWORD *)(v46 + 4 * v49 + 4) = 3;\n        *(_DWORD *)(v47 + 4 * v49 + 4) = 0;\n        *(_DWORD *)(v48 + 4 * v49 + 4) = 0;\n        v45 = v32[18000];\n        ++v49;\n      }\n      while ( v49 < v45 );\n      v44 = v32[6];\n    }\n    if ( v44 == 1 )\n    {\n      if ( v32[18001] < 0 )\n        goto LABEL_80;\n      v50 = *((_QWORD *)v8 + 12);\n      v51 = *((_QWORD *)v8 + 13);\n      v52 = *((_QWORD *)v8 + 14);\n      v53 = -1LL;\n      do\n      {\n        *(_DWORD *)(v50 + 4 * v53 + 4) = 3;\n        *(_DWORD *)(v51 + 4 * v53 + 4) = 0;\n        *(_DWORD *)(v52 + 4 * v53++ + 4) = 0;\n      }\n      while ( v53 < v32[18001] );\n      v44 = v32[6];\n    }\n  }\n  if ( v44 == 2 || v44 == 4 )\n  {\nLABEL_54:\n    if ( v32[7] )\n      goto LABEL_56;\n    goto LABEL_55;\n  }\n  LODWORD(v45) = v32[18000];\nLABEL_80:\n  sub_4797F0((__int64)base, v45, *((_DWORD **)v8 + 8), *((_QWORD *)v8 + 9), v42, v43, 0);\n  sub_439C40(\n    (__int64)base,\n    (int *)qword_4F9BE0,\n    *((_DWORD *)off_49F6D0 + 18000) - 1,\n    *((signed int **)v8 + 8),\n    *((_QWORD *)v8 + 9),\n    *((_QWORD *)v8 + 10));\n  v32 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 6) != 1 )\n    goto LABEL_54;\n  sub_4797F0(\n    (__int64)qword_4F9A58,\n    *((_DWORD *)off_49F6D0 + 18001),\n    *((_DWORD **)v8 + 12),\n    *((_QWORD *)v8 + 13),\n    v54,\n    v55,\n    1);\n  sub_439C40(\n    (__int64)qword_4F9A58,\n    (_DWORD *)qword_4F9BE0 + 1,\n    *((_DWORD *)off_49F6D0 + 18001) - 1,\n    *((signed int **)v8 + 12),\n    *((_QWORD *)v8 + 13),\n    *((_QWORD *)v8 + 14));\n  v32 = (signed int *)off_49F6D0;\n  if ( !*((_DWORD *)off_49F6D0 + 7) )\n  {\nLABEL_55:\n    sub_439870();\n    v32 = (signed int *)off_49F6D0;\n  }\nLABEL_56:\n  v40 = v32[6];\n  if ( v40 == 2 )\n    goto LABEL_88;\n  if ( *(_DWORD *)(qword_4F9DB8 + 192) != 1 )\n  {\n    if ( v40 != 1 || !*(_DWORD *)(qword_4F9DB8 + 196) )\n      goto LABEL_88;\nLABEL_85:\n    sub_4814D0();\n    goto LABEL_88;\n  }\n  if ( v40 != 3 && v40 )\n    goto LABEL_85;\n  v41 = *((_DWORD *)dest + 15) && *((_DWORD *)dest + 324) && (void *)qword_4F9E30 != qword_4F9E20;\n  sub_480E20(v41);\nLABEL_88:\n  v56 = SLODWORD(qword_4F9BE0[0]);\n  if ( SLODWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v57 = base;\n    v58 = qword_4F9E30;\n    v59 = 0LL;\n    do\n    {\n      v60 = (_DWORD *)v57[v59];\n      *(_QWORD *)(v58 + 8 * v59 + 24) = (*v60 == 2) + 2 * v60[1];\n      *(_QWORD *)(v58 + 8 * v59 + 1608) = 2LL * (signed int)v60[4];\n      *(_QWORD *)(v58 + 8 * v59 + 3192) = 2LL * (signed int)v60[2];\n      *(_QWORD *)(v58 + 8 * v59++ + 4776) = 2 * v60[3] + 1;\n    }\n    while ( v56 != v59 );\n  }\n  v61 = SHIDWORD(qword_4F9BE0[0]);\n  if ( SHIDWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v62 = qword_4F9A58;\n    v63 = qword_4F9E30;\n    v64 = 0LL;\n    do\n    {\n      v65 = (_DWORD *)v62[v64];\n      *(_QWORD *)(v63 + 8 * v64 + 288) = (*v65 == 2) + 2 * v65[1];\n      *(_QWORD *)(v63 + 8 * v64 + 1872) = 2LL * (signed int)v65[4];\n      *(_QWORD *)(v63 + 8 * v64 + 3456) = 2LL * (signed int)v65[2];\n      *(_QWORD *)(v63 + 8 * v64++ + 5040) = 2 * v65[3] + 1;\n    }\n    while ( v61 != v64 );\n  }\n  v66 = off_49F6D0;\n  if ( !*((_DWORD *)qword_4F9DC0 + 287) && !*((_DWORD *)off_49F6D0 + 7) )\n  {\n    v67 = qword_4F9E30 + 5304;\n    v68 = 2LL;\n    do\n    {\n      v69 = *((signed int *)qword_4F9BE0 + v68);\n      if ( v69 > 0 )\n      {\n        v70 = (__int64)*(&base + v68);\n        v71 = 0LL;\n        do\n        {\n          v72 = *(_DWORD **)(v70 + 8 * v71);\n          *(_QWORD *)(v67 + 8 * v71 - 4752) = (*v72 == 2) + 2 * v72[1];\n          *(_QWORD *)(v67 + 8 * v71 - 3168) = 2LL * (signed int)v72[4];\n          *(_QWORD *)(v67 + 8 * v71 - 1584) = 2LL * (signed int)v72[2];\n          *(_QWORD *)(v67 + 8 * v71++) = 2 * v72[3] + 1;\n        }\n        while ( v69 != v71 );\n      }\n      ++v68;\n      v67 += 264LL;\n    }\n    while ( v68 != 6 );\n  }\n  if ( v66[6] == 1 )\n  {\n    sub_43D5F0((__int64)qword_49FE00, (_QWORD **)&base);\n    v66 = off_49F6D0;\n  }\n  dword_4F9FDC = ***(_DWORD ***)(*((_QWORD *)v66 + 1770) + 24LL);\n  if ( *((_DWORD *)dest + 589) == 1 )\n    sub_40F1B0();\n  v73 = sub_478790();\n  v74 = (signed int *)off_49F6D0;\n  v74[18131] += v73;\n  if ( v74[18155] < v74[18152] )\n    v74[18133] += v73;\n  v75 = off_49F6D8;\n  *((_DWORD *)v75 + 6) += v73;\n  *((_DWORD *)v75 + v74[6] + 342) += v73;\n  v76 = 0;\n  if ( !v93 )\n  {\n    v76 = 0;\n    if ( v74[18100] )\n      goto LABEL_111;\nLABEL_118:\n    v94 = a2;\n    v95 = 0;\n    qword_4F9F48 = (__int64)&unk_4E9850;\n    sub_42A660(v3, 0LL);\n    sub_469E20(a3);\n    sub_433140(1);\n    sub_42B2D0(&v93, &v95);\n    if ( v95 )\n    {\n      v84 = sub_41BAF0(*((unsigned int *)off_49F6D0 + 3));\n      *((_DWORD *)off_49F6D0 + 3) = v84;\n      if ( v84 == -1 )\n      {\n        snprintf(\n          byte_4F8250,\n          0x12CuLL,\n          \"Error encoding first MB with spcified parameter, bits of current MB may be too big\");\n        error((__int64)byte_4F8250, 300);\n      }\n    }\n    else\n    {\n      v3 = sub_41BAA0(v3);\n      if ( v3 == -1 )\n        v93 = 1;\n      ++v76;\n      sub_42A420();\n    }\n    while ( 1 )\n    {\n      a2 = v94;\n      if ( v93 )\n        break;\n      v74 = (signed int *)off_49F6D0;\n      if ( !*((_DWORD *)off_49F6D0 + 18100) )\n        goto LABEL_118;\nLABEL_111:\n      v77 = dest;\n      v78 = *((_DWORD *)dest + 721);\n      if ( v78 == 2 )\n      {\n        v95 = 0;\n        *((_QWORD *)v74 + 9001) = 0LL;\n        *((_QWORD *)v74 + 9078) = 0LL;\n        v94 = a2;\n        sub_42A660(v3, 0LL);\n        qword_4F9F48 = (__int64)&unk_4E9850;\n        sub_469E20(a3);\n        v96 = *(double *)qword_4F9F48;\n        v79 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18157) = 1;\n        v79[18002] = 0;\n        sub_42A660(v3 + 1, 0LL);\n        qword_4F9F48 = (__int64)&unk_4E7E10;\n        sub_469E20(a3);\n        a2 = v94;\n        v96 = v96 + *(double *)qword_4F9F48;\n        v77 = dest;\n        v78 = *((_DWORD *)dest + 721);\n      }\n      if ( (unsigned int)(v78 - 1) <= 1 )\n      {\n        v80 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18157) = 0;\n        v80[9001] = 4294967297LL;\n        *((_DWORD *)v80 + 18094) *= 2;\n        v77[9] *= 2;\n        *((_DWORD *)v80 + 18000) = 2 * *((_DWORD *)v80 + 18000) + 1;\n        sub_42A660(v3, 1uLL);\n        qword_4F9F48 = (__int64)&unk_4E8B30;\n        sub_469E20(a3);\n        v94 = *(double *)qword_4F9F48;\n        v81 = off_49F6D0;\n        *((_DWORD *)off_49F6D0 + 18157) = 1;\n        v81[18003] = 0;\n        sub_42A660(v3 + 1, 1uLL);\n        qword_4F9F48 = (__int64)&unk_4E70F0;\n        sub_469E20(a3);\n        a2 = v94 + *(double *)qword_4F9F48;\n        v77 = dest;\n        v78 = *((_DWORD *)dest + 721);\n      }\n      v82 = off_49F6D0;\n      *((_DWORD *)off_49F6D0 + 18158) = 0;\n      v94 = a2;\n      if ( a2 <= v96 || v78 != 2 )\n      {\n        v82[18002] = 1;\n        dword_4FA018 = 1;\n        v83 = 1LL;\n      }\n      else\n      {\n        v82[18002] = 0;\n        v82[18094] >>= 1;\n        v77[9] >>= 1;\n        dword_4FA018 = 0;\n        v82[18000] = (v82[18000] - 1) >> 1;\n        v82[18158] = 1;\n        v83 = 0LL;\n      }\n      *((_QWORD *)v82 + 9078) = 1LL;\n      v82[18003] = v83;\n      sub_42A660(v3, v83);\n      v85 = &unk_4E8B30;\n      if ( !*((_DWORD *)off_49F6D0 + 18002) )\n        v85 = &unk_4E9850;\n      qword_4F9F48 = (__int64)v85;\n      sub_420F50();\n      sub_433140(1);\n      sub_42B2D0(&v93, &v95);\n      sub_42A420();\n      v86 = off_49F6D0;\n      *((_DWORD *)off_49F6D0 + 18157) = 1;\n      v86[18003] = 0;\n      sub_42A660(v3 + 1, (unsigned int)v86[18002]);\n      v87 = &unk_4E70F0;\n      if ( !*((_DWORD *)off_49F6D0 + 18002) )\n        v87 = &unk_4E7E10;\n      qword_4F9F48 = (__int64)v87;\n      sub_420F50();\n      sub_433140(0);\n      sub_42B2D0(&v93, &v95);\n      sub_42A420();\n      v88 = off_49F6D0;\n      if ( dword_4FA018 )\n      {\n        *((_DWORD *)off_49F6D0 + 18094) >>= 1;\n        *((_DWORD *)dest + 9) >>= 1;\n        v88[18000] = (v88[18000] - 1) >> 1;\n      }\n      v76 += 2;\n      *((_QWORD *)v88 + 9001) = 0LL;\n      v89 = sub_41BAA0(v3);\n      v90 = sub_41BAA0(v89);\n      v3 = v90;\n      v91 = sub_41BA90(v90);\n      if ( v3 == (unsigned int)sub_41BB30(v91) )\n      {\n        v93 = 1;\n        break;\n      }\n    }\n  }\n  sub_4788F0();\n  return v76;\n}\n", 
            "funcStartAddr": "0x478a10L", 
            "funcEndAddr": "0x4796d6L", 
            "funcName": "sub_478A10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4796E0(unsigned int *a1)\n{\n  unsigned int *v1; // r14\n  __int64 result; // rax\n  signed __int64 v3; // r12\n  __int64 v4; // r15\n  char *v5; // r13\n  __int64 v6; // rbx\n  signed __int64 v7; // rbp\n  void **v8; // rdi\n\n  v1 = a1;\n  result = *a1;\n  if ( (signed int)result > 0 )\n  {\n    v3 = 0LL;\n    do\n    {\n      v4 = *(_QWORD *)&v1[2 * v3 + 2];\n      if ( v4 )\n      {\n        v5 = *(char **)(v4 + 24);\n        if ( *(_DWORD *)(v4 + 16) > 0 )\n        {\n          v6 = 0LL;\n          v7 = 0LL;\n          do\n          {\n            if ( &v5[v6] )\n            {\n              v8 = *(void ***)&v5[v6];\n              if ( v8[4] )\n              {\n                free(v8[4]);\n                v8 = *(void ***)&v5[v6];\n              }\n              if ( v8 )\n                free(v8);\n            }\n            ++v7;\n            v5 = *(char **)(v4 + 24);\n            v6 += 120LL;\n          }\n          while ( v7 < *(signed int *)(v4 + 16) );\n        }\n        if ( v5 )\n          free(v5);\n        if ( *((_DWORD *)dest + 589) == 1 )\n        {\n          sub_40AB70(*(void **)(v4 + 32));\n          sub_40AB80(*(void **)(v4 + 40));\n        }\n        free((void *)v4);\n        result = *v1;\n      }\n      *(_QWORD *)&v1[2 * v3++ + 2] = 0LL;\n    }\n    while ( v3 < (signed int)result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4796e0L", 
            "funcEndAddr": "0x4797c4L", 
            "funcName": "sub_4796E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4797F0(__int64 a1, unsigned int a2, _DWORD *a3, __int64 a4, __int64 a5, __int64 a6, int a7)\n{\n  signed int v7; // er11\n  unsigned int v8; // er9\n  _QWORD *v9; // rbp\n  int v10; // ebx\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  int *v13; // rcx\n  signed __int64 v14; // rdx\n  __int64 v15; // rsi\n  unsigned __int64 v16; // r10\n  _QWORD *v17; // rcx\n  __int64 v18; // r8\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rbp\n  _DWORD *v21; // rdi\n  int v22; // edx\n  int v23; // ebp\n  int v24; // ebx\n  int v25; // edi\n  unsigned int v26; // ecx\n  char *v27; // rdi\n  int *v28; // r11\n  int v29; // er10\n  signed __int64 v30; // r15\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  int *v33; // rsi\n  signed __int64 v34; // rbp\n  int v35; // er12\n  int v36; // er13\n  int v37; // er14\n  int v38; // er8\n  int *v39; // r9\n  int v40; // eax\n  __int64 v41; // rax\n  signed int v42; // ecx\n  __int64 v43; // rdx\n  int *v44; // rsi\n  int *v45; // rdx\n  __int64 v46; // rbp\n  signed __int64 v47; // rsi\n  signed __int64 v48; // r15\n  _DWORD *v49; // rdi\n  int v50; // edx\n  int v51; // ebx\n  int v52; // ecx\n  unsigned __int8 v53; // of\n  int v54; // ecx\n  int v55; // ecx\n  int v56; // edx\n  signed __int64 v57; // rdx\n  __int64 v58; // rax\n  int v59; // ecx\n  signed __int64 v60; // rcx\n  int *v61; // rdx\n  int v62; // esi\n  unsigned int v63; // eax\n  int v64; // ebx\n  _QWORD *v65; // rbp\n  __int64 v66; // rax\n  signed int v67; // [rsp+Ch] [rbp-2FCh]\n  int v68; // [rsp+Ch] [rbp-2FCh]\n  _DWORD *v69; // [rsp+10h] [rbp-2F8h]\n  signed __int64 v70; // [rsp+18h] [rbp-2F0h]\n  int v71; // [rsp+20h] [rbp-2E8h]\n  unsigned int v72; // [rsp+24h] [rbp-2E4h]\n  _QWORD *v73; // [rsp+28h] [rbp-2E0h]\n  char *v74; // [rsp+30h] [rbp-2D8h]\n  __int64 v75; // [rsp+38h] [rbp-2D0h]\n  __int64 v76; // [rsp+40h] [rbp-2C8h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-2C0h]\n  int dest; // [rsp+50h] [rbp-2B8h]\n  int v79; // [rsp+54h] [rbp-2B4h]\n  int v80; // [rsp+58h] [rbp-2B0h]\n  int v81[29]; // [rsp+5Ch] [rbp-2ACh]\n  int v82; // [rsp+D0h] [rbp-238h]\n  int v83; // [rsp+D4h] [rbp-234h]\n  int v84; // [rsp+D8h] [rbp-230h]\n  int v85[29]; // [rsp+DCh] [rbp-22Ch]\n  int v86; // [rsp+150h] [rbp-1B8h]\n  char v87; // [rsp+154h] [rbp-1B4h]\n  int src[32]; // [rsp+1D0h] [rbp-138h]\n  int v89; // [rsp+250h] [rbp-B8h]\n  char v90; // [rsp+254h] [rbp-B4h]\n\n  v75 = a4;\n  v7 = 1 << (dword_4FA0E4 + 4);\n  v69 = a3;\n  v8 = a2;\n  v9 = off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 7) )\n  {\n    v7 *= 2;\n    v10 = 2 * *((_DWORD *)off_49F6D0 + 18116) + 1;\n    if ( !a2 )\n      goto LABEL_13;\nLABEL_5:\n    v11 = a2 & 3;\n    if ( (unsigned __int64)a2 - 1 >= 3 )\n    {\n      v12 = 0LL;\n      do\n      {\n        *(&dest + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 8 * v12) + 6364LL);\n        *(&v79 + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 8 * v12 + 8) + 6364LL);\n        *(&v80 + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 8 * v12 + 16) + 6364LL);\n        v81[v12] = *(_DWORD *)(*(_QWORD *)(a1 + 8 * v12 + 24) + 6364LL);\n        v12 += 4LL;\n      }\n      while ( a2 - v11 != v12 );\n      if ( !(a2 & 3) )\n        goto LABEL_13;\n    }\n    else\n    {\n      v12 = 0LL;\n      if ( !(a2 & 3) )\n        goto LABEL_13;\n    }\n    v13 = &dest + v12;\n    v14 = a1 + 8 * v12;\n    v15 = 0LL;\n    do\n    {\n      v13[v15] = *(_DWORD *)(*(_QWORD *)(v14 + 8 * v15) + 6364LL);\n      ++v15;\n    }\n    while ( v11 != v15 );\n    goto LABEL_13;\n  }\n  v10 = *((_DWORD *)off_49F6D0 + 18116);\n  if ( a2 )\n    goto LABEL_5;\nLABEL_13:\n  v71 = v10;\n  v73 = v9;\n  v16 = HIDWORD(qword_4F99EC);\n  v72 = v8;\n  v67 = v7;\n  if ( !HIDWORD(qword_4F99EC) )\n  {\n    LODWORD(v16) = 0;\n    v26 = -1;\nLABEL_29:\n    v77 = (unsigned int)v16;\n    v76 = v26;\n    v74 = &v87;\n    v27 = &v90;\n    v28 = &v83;\n    v29 = v16 - 1;\n    v30 = 1LL;\n    v31 = 0LL;\n    while ( 1 )\n    {\n      v70 = v31 + 1;\n      if ( v31 + 1 < v77 )\n        break;\nLABEL_39:\n      ++v30;\n      v74 += 4;\n      v27 += 4;\n      ++v28;\n      --v29;\n      ++v31;\n      if ( v70 == v76 )\n        goto LABEL_40;\n    }\n    v32 = 0LL;\n    v33 = (int *)v74;\n    v34 = v30;\n    while ( 1 )\n    {\n      v35 = *(&v89 + v31);\n      v36 = *(_DWORD *)&v27[4 * v32];\n      if ( v35 <= v36 )\n      {\n        if ( v35 != v36 )\n          goto LABEL_38;\n        v38 = *v33;\n        v37 = *(&v86 + v31);\n        if ( *v33 <= v37 )\n          goto LABEL_38;\n        v39 = &v86 + v34;\n      }\n      else\n      {\n        v37 = *(&v86 + v31);\n        v38 = *v33;\n        v39 = v33;\n      }\n      *(&v89 + v31) = v36;\n      *(_DWORD *)&v27[4 * v32] = v35;\n      v40 = *(&v82 + v31);\n      *(&v82 + v31) = v28[v32];\n      v28[v32] = v40;\n      *(&v86 + v31) = v38;\n      *v39 = v37;\nLABEL_38:\n      ++v34;\n      ++v33;\n      if ( v29 == (_DWORD)++v32 )\n        goto LABEL_39;\n    }\n  }\n  v17 = qword_4F99D8;\n  v18 = qword_4F9E30;\n  v19 = 0LL;\n  do\n  {\n    v20 = v17[v19];\n    v21 = *(_DWORD **)(v20 + 40);\n    *(&v82 + v19) = v21[1591];\n    if ( *(_DWORD *)v20 == 3 && v21[1595] && !v21[1594] )\n    {\n      v22 = v21[1];\n      v23 = *(_DWORD *)(v18 + 4);\n      v24 = v21[1] - v23;\n      v25 = v23 - v21[1];\n      if ( v25 < 1 )\n        v25 = v24;\n      *(&v89 + v19) = v25;\n      if ( a7 )\n      {\n        if ( v22 < v23 )\n          goto LABEL_22;\n      }\n      else if ( v22 > v23 )\n      {\nLABEL_22:\n        *(&v86 + v19) = 1;\n        goto LABEL_25;\n      }\n      *(&v86 + v19) = -1;\n    }\nLABEL_25:\n    ++v19;\n  }\n  while ( v19 < v16 );\n  v26 = v16 - 1;\n  if ( (_DWORD)v16 != 1 )\n    goto LABEL_29;\nLABEL_40:\n  if ( !v72 )\n    return;\n  v41 = v72 & 3;\n  if ( (unsigned __int64)v72 - 1 >= 3 )\n  {\n    v42 = 1;\n    v43 = 0LL;\n    do\n    {\n      if ( *(&v82 + v43) ^ *(&dest + v43) | *(&v83 + v43) ^ *(&v79 + v43) | *(&v84 + v43) ^ *(&v80 + v43) | v85[v43] ^ v81[v43] )\n        v42 = 0;\n      v43 += 4LL;\n    }\n    while ( v72 - v41 != v43 );\n    if ( v72 & 3 )\n      goto LABEL_49;\n  }\n  else\n  {\n    v42 = 1;\n    v43 = 0LL;\n    if ( !(v72 & 3) )\n      goto LABEL_53;\nLABEL_49:\n    v44 = &v82 + v43;\n    v45 = &dest + v43;\n    v46 = 0LL;\n    do\n    {\n      if ( v45[v46] != v44[v46] )\n        v42 = 0;\n      ++v46;\n    }\n    while ( v41 != v46 );\n  }\nLABEL_53:\n  if ( v42 )\n    return;\n  if ( !v72 )\n  {\n    *v69 = 3;\n    v65 = v73;\n    v64 = a7;\n    goto LABEL_81;\n  }\n  v68 = v67 - 1;\n  v47 = v72 - 1LL;\n  v48 = 0LL;\n  v49 = v69;\n  v50 = v71;\n  while ( 2 )\n  {\n    v51 = *(&v82 + v48);\n    v52 = *(&v82 + v48);\n    v53 = __OFSUB__(v52, v50);\n    v54 = v52 - v50;\n    if ( (unsigned __int8)((v54 < 0) ^ v53) | (v54 == 0) )\n    {\n      v49[v48] = 0;\n      v56 = -v54;\n      v55 = ~v54;\n      if ( v56 <= 0 )\n        v55 = v68;\n    }\n    else\n    {\n      v49[v48] = 1;\n      v55 = v54 - 1;\n    }\n    *(_DWORD *)(v75 + 4 * v48) = v55;\n    src[v48] = v51;\n    if ( ((_BYTE)v72 - (_BYTE)v48) & 1 )\n    {\n      v59 = *(&dest + v48);\n      if ( v59 == v51 )\n      {\n        LODWORD(v58) = v48;\n      }\n      else\n      {\n        v58 = (unsigned int)(v48 + 1);\n        src[v58] = v59;\n      }\n      v57 = v48 + 1;\n      if ( v47 != v48 )\n        goto LABEL_68;\n    }\n    else\n    {\n      v57 = v48;\n      LODWORD(v58) = v48;\n      if ( v47 == v48 )\n        goto LABEL_74;\nLABEL_68:\n      v60 = v72 - v57;\n      v61 = &v79 + v57;\n      do\n      {\n        v62 = *(v61 - 1);\n        if ( v62 != v51 )\n        {\n          v58 = (unsigned int)(v58 + 1);\n          src[v58] = v62;\n        }\n        if ( *v61 != v51 )\n        {\n          v58 = (unsigned int)(v58 + 1);\n          src[v58] = *v61;\n        }\n        v61 += 2;\n        v60 -= 2LL;\n      }\n      while ( v60 );\n    }\nLABEL_74:\n    if ( ++v48 < (unsigned __int64)v72 )\n    {\n      v63 = v48;\n      while ( src[v63] == *(&v82 + v63) )\n      {\n        if ( ++v63 >= v72 )\n          goto LABEL_78;\n      }\n      memcpy(&dest, src, 4LL * v72);\n      v49 = v69;\n      v50 = v51;\n      v47 = v72 - 1LL;\n      continue;\n    }\n    break;\n  }\nLABEL_78:\n  v49[(unsigned int)v48] = 3;\n  v64 = a7;\n  v65 = v73;\n  if ( v72 )\n    memcpy(&dest, src, 4LL * v72);\nLABEL_81:\n  v66 = v65[1770];\n  if ( v64 )\n    *(_DWORD *)(v66 + 88) = 1;\n  else\n    *(_DWORD *)(v66 + 56) = 1;\n}\n", 
            "funcStartAddr": "0x4797f0L", 
            "funcEndAddr": "0x479d58L", 
            "funcName": "sub_4797F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_479D60(_DWORD *a1, double a2)\n{\n  _DWORD *v2; // r15\n  _BOOL8 v3; // rbx\n  __int64 result; // rax\n  int v5; // [rsp+4h] [rbp-24h]\n  double v6; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v6 = a2;\n  *a1 = (signed int)floor(6.0 * a2 + 0.4999);\n  v3 = (unsigned int)sub_479E30(0LL, &v5, v6) != 0;\n  *v2 += v5;\n  LODWORD(v3) = v3 + 2 * ((unsigned int)sub_479E30(1LL, &v5, v6) != 0);\n  *v2 += v5;\n  LODWORD(v3) = v3 + 4 * ((unsigned int)sub_479E30(2LL, &v5, v6) != 0);\n  *v2 += v5;\n  result = (unsigned int)v3 + 8 * ((unsigned int)sub_479E30(3LL, &v5, v6) != 0);\n  *v2 += v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x479d60L", 
            "funcEndAddr": "0x479e2fL", 
            "funcName": "sub_479D60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_479E30(__int64 a1, _DWORD *a2, double a3)\n{\n  __int64 v3; // r14\n  int v4; // er15\n  __int64 v5; // rsi\n  __int64 v6; // rbx\n  __int64 v7; // rbx\n  __int64 v8; // rdi\n  unsigned int v9; // er13\n  int v10; // ebx\n  int v11; // er9\n  int v12; // ebp\n  unsigned int v13; // esi\n  int v14; // eax\n  unsigned int v15; // esi\n  unsigned int v16; // er13\n  __int64 v17; // rax\n  signed int v18; // eax\n  int v19; // esi\n  int v20; // er13\n  __int64 v21; // rcx\n  signed int v22; // ecx\n  signed __int64 v23; // r12\n  signed __int64 v24; // rdx\n  __m128i v25; // xmm0\n  __int64 v26; // r15\n  __int64 v27; // r13\n  int v28; // er14\n  signed int v29; // ebp\n  _DWORD *v30; // rcx\n  const __m128i *v31; // r11\n  char *v32; // r15\n  char *v33; // r10\n  __int64 v34; // rbx\n  __int64 v35; // r14\n  signed __int64 v36; // r9\n  signed __int64 v37; // r12\n  signed __int64 v38; // r13\n  signed __int64 v39; // r9\n  unsigned __int64 v40; // rcx\n  __int64 v41; // rdi\n  __int64 v42; // rsi\n  int v43; // eax\n  int v44; // edx\n  int v45; // edx\n  int v46; // eax\n  signed __int64 v47; // rax\n  __int64 v48; // r8\n  __int64 v49; // r9\n  signed __int64 v50; // rax\n  char *v51; // rcx\n  signed int v52; // ebp\n  int v53; // er14\n  _DWORD *v54; // rcx\n  unsigned int v55; // er13\n  __int64 v56; // r12\n  unsigned __int64 v57; // rbx\n  int v58; // eax\n  _DWORD *v59; // rcx\n  int v60; // er15\n  __int64 v61; // rdi\n  __int64 v62; // rsi\n  int v63; // eax\n  int v64; // edi\n  int v65; // ebp\n  __int64 *v66; // rcx\n  char *v67; // rax\n  __int64 v68; // rcx\n  signed __int64 v69; // rsi\n  __int64 v70; // rdx\n  signed __int64 v71; // rdx\n  signed __int64 v72; // r15\n  signed __int64 v73; // r12\n  signed __int64 v74; // r14\n  __int64 v75; // rdx\n  unsigned __int64 v76; // rbx\n  int v77; // er8\n  int v78; // er10\n  int v79; // er11\n  int v80; // er9\n  __int16 v81; // si\n  int v82; // er9\n  int v83; // er10\n  __int16 v84; // si\n  int v85; // er10\n  __int16 v86; // si\n  __int64 v87; // r9\n  int v88; // eax\n  __int64 v89; // rsi\n  __int64 v90; // r15\n  __int64 v91; // rbp\n  __int64 v92; // r11\n  __int64 v93; // r13\n  __int64 v94; // r10\n  int v95; // edx\n  int v96; // ebx\n  int v97; // edi\n  int v98; // edi\n  int v99; // eax\n  int v100; // ecx\n  int v101; // ecx\n  int v102; // eax\n  int v103; // eax\n  int v104; // ecx\n  int v105; // ecx\n  int v106; // eax\n  int v107; // eax\n  int v108; // ecx\n  int v109; // ecx\n  int v110; // eax\n  int v111; // eax\n  int v112; // ecx\n  int v113; // ecx\n  int v114; // eax\n  int v115; // eax\n  int v116; // ecx\n  int v117; // ecx\n  int v118; // eax\n  int v119; // eax\n  int v120; // ecx\n  int v121; // ecx\n  int v122; // eax\n  int v123; // eax\n  int v124; // ecx\n  int v125; // ecx\n  int v126; // eax\n  int v127; // eax\n  int v128; // ecx\n  int v129; // ecx\n  int v130; // eax\n  int v131; // eax\n  int v132; // ecx\n  int v133; // ecx\n  int v134; // eax\n  int v135; // eax\n  int v136; // ecx\n  int v137; // ecx\n  int v138; // eax\n  __int64 v139; // rax\n  __int64 **v140; // rsi\n  __int64 **v141; // r8\n  __int64 *v142; // rax\n  __int64 v143; // r14\n  __int64 *v144; // rcx\n  __int64 v145; // rdx\n  __int64 v146; // rdi\n  __int64 v147; // rbx\n  __int64 *v148; // r15\n  __int64 v149; // rcx\n  __int64 *v150; // r12\n  __int64 v151; // rax\n  __int64 *v152; // r13\n  __int64 *v153; // r8\n  __int64 v154; // rsi\n  __int64 v155; // r9\n  __int64 i; // r10\n  __int64 v157; // r10\n  __int64 v158; // r9\n  __int64 v159; // r11\n  __int64 v160; // rbp\n  __int64 v161; // rax\n  __int64 v162; // rbx\n  __int64 v163; // rsi\n  __int64 v164; // rdx\n  __int64 v165; // rdi\n  int v166; // er14\n  __int64 v167; // r9\n  char *v168; // rax\n  signed __int64 v169; // rbp\n  int **v170; // rax\n  int *v171; // rcx\n  signed __int64 v172; // rdi\n  int *v173; // rax\n  int **v174; // rax\n  int *v175; // rcx\n  int *v176; // rax\n  unsigned int v177; // edx\n  __int64 v178; // ST10_8\n  int v179; // ebx\n  int v180; // ebp\n  __int64 v181; // r8\n  __int64 v182; // r9\n  __int64 v183; // r11\n  __int64 v184; // r15\n  __int64 v185; // r14\n  __int64 v186; // rcx\n  __int64 v187; // rsi\n  __int64 v188; // r12\n  __int64 v189; // r13\n  __int64 v190; // r10\n  signed __int64 v191; // rbp\n  char *v192; // rdx\n  __int64 v193; // r8\n  __int64 v194; // rbx\n  __int64 v195; // rdi\n  __int64 v196; // rax\n  __int64 v197; // rax\n  __int64 v198; // rax\n  __int64 v199; // rax\n  __int64 v200; // rsi\n  __int64 v201; // rdi\n  __int64 v202; // rax\n  __int64 v203; // rax\n  __int64 v204; // rax\n  __int64 v205; // rax\n  __int64 v206; // rax\n  __int64 v207; // rax\n  __int64 v208; // rax\n  __int64 v209; // rax\n  int v210; // ebx\n  int v211; // eax\n  char *v212; // rcx\n  char *v213; // rdx\n  __int64 v214; // rsi\n  __int64 v215; // rdi\n  int v216; // eax\n  __int64 v217; // rdi\n  __int64 v218; // rdi\n  __int64 v219; // rsi\n  __int64 v220; // r8\n  __int64 v221; // r9\n  __int64 **v222; // rdx\n  __int64 **v223; // r8\n  __int64 *v224; // rax\n  __int64 v225; // r11\n  __int64 v226; // rcx\n  __int64 v227; // rsi\n  __int64 v228; // rbp\n  __int64 *v229; // r14\n  __int64 v230; // rbx\n  __int64 *v231; // r15\n  __int64 v232; // rax\n  __int64 *v233; // r12\n  __int64 v234; // rdx\n  __int64 *v235; // r13\n  __int64 v236; // r8\n  __int64 j; // r9\n  __int64 v238; // r9\n  __int64 v239; // r8\n  __int64 v240; // r10\n  __int64 v241; // rbp\n  __int64 v242; // rax\n  __int64 v243; // rbx\n  __int64 v244; // rdx\n  __int64 v245; // rcx\n  __int64 v246; // rax\n  signed int *v247; // rbx\n  __int64 v248; // rcx\n  int v249; // eax\n  int v250; // edi\n  int v251; // eax\n  int v252; // edx\n  __int64 **v253; // rax\n  __int64 v254; // rdx\n  __int64 **v255; // rsi\n  __int64 *v256; // rdx\n  __int64 v257; // r11\n  __int64 *v258; // r15\n  __int64 v259; // rcx\n  __int64 v260; // rdi\n  __int64 v261; // rbx\n  __int64 *v262; // r12\n  __int64 v263; // rdx\n  __int64 *v264; // r13\n  __int64 v265; // r8\n  __int64 *v266; // r9\n  __int64 *v267; // r10\n  __int64 v268; // rax\n  __int64 v269; // rsi\n  __int64 k; // r14\n  __int64 v271; // r8\n  __int64 v272; // r15\n  __int64 v273; // r11\n  __int64 v274; // rbp\n  __int64 v275; // rbx\n  __int64 v276; // rax\n  __int64 v277; // rsi\n  __int64 v278; // rcx\n  __int64 v279; // rdi\n  int v280; // er14\n  __int64 v281; // rcx\n  __int64 v282; // rdx\n  signed __int64 v283; // rsi\n  int (*v284)[]; // rdi\n  __int64 v285; // rax\n  _DWORD *v286; // rbp\n  _DWORD *v287; // rax\n  __int64 v288; // rax\n  _DWORD *v289; // rbp\n  _DWORD *v290; // rax\n  bool v291; // zf\n  __int64 v292; // rcx\n  signed __int64 v293; // rax\n  signed __int64 v294; // rdx\n  __int64 v295; // rsi\n  __int64 v296; // rdi\n  __int64 v297; // rbp\n  __int64 *v298; // rax\n  signed __int64 v299; // rdx\n  int v300; // er11\n  int v301; // er12\n  int v302; // ecx\n  __int64 v303; // r10\n  __int64 v304; // r13\n  __int64 v305; // rbx\n  __int64 v306; // rax\n  __int64 v307; // rdi\n  __int64 v308; // rcx\n  __int64 v309; // r14\n  __int64 v310; // rdi\n  __int64 v311; // r15\n  __int64 v312; // rdi\n  __int64 v313; // rsi\n  __int64 v314; // rdi\n  __int64 v315; // rdi\n  __int64 v316; // rdi\n  __int64 v317; // rdi\n  __int64 v318; // rsi\n  signed __int64 v319; // rcx\n  signed __int64 v320; // r10\n  __int64 v321; // r15\n  __int64 v322; // r11\n  __int64 v323; // rcx\n  __int64 v324; // r14\n  signed __int64 v325; // r12\n  signed __int64 v326; // r13\n  signed __int64 v327; // r9\n  unsigned __int64 v328; // rbp\n  __int64 v329; // rsi\n  int v330; // eax\n  int v331; // edx\n  int v332; // edi\n  int v333; // edi\n  int v334; // edx\n  signed __int64 v335; // rax\n  signed __int64 v336; // rax\n  _DWORD *v337; // rsi\n  unsigned int v338; // er15\n  int v339; // er14\n  __int64 v340; // rbx\n  unsigned __int64 v341; // rbp\n  int v342; // eax\n  __int64 v343; // r12\n  __int64 v344; // r14\n  _DWORD *v345; // rax\n  int v346; // er15\n  int v347; // ecx\n  __int64 *v348; // rax\n  __int64 v349; // rsi\n  __int64 v350; // rdx\n  signed __int64 v351; // rdi\n  signed __int64 v352; // r14\n  signed __int64 v353; // r12\n  signed __int64 v354; // r13\n  __int64 v355; // rdi\n  unsigned __int64 v356; // rbx\n  int v357; // er9\n  int v358; // er8\n  int v359; // er11\n  int v360; // ebp\n  __int16 v361; // ax\n  int v362; // ebp\n  int v363; // er8\n  __int16 v364; // ax\n  int v365; // er8\n  __int16 v366; // ax\n  __int64 result; // rax\n  signed __int64 v368; // rcx\n  __int64 v369; // rdx\n  __int64 v370; // rsi\n  __int64 v371; // rdi\n  __int64 v372; // [rsp+8h] [rbp-520h]\n  __int64 v373; // [rsp+8h] [rbp-520h]\n  double v374; // [rsp+8h] [rbp-520h]\n  char *v375; // [rsp+8h] [rbp-520h]\n  __int64 v376; // [rsp+8h] [rbp-520h]\n  char *v377; // [rsp+8h] [rbp-520h]\n  __int64 *v378; // [rsp+8h] [rbp-520h]\n  __int64 *v379; // [rsp+8h] [rbp-520h]\n  __int64 v380; // [rsp+8h] [rbp-520h]\n  __int64 v381; // [rsp+8h] [rbp-520h]\n  signed __int64 v382; // [rsp+8h] [rbp-520h]\n  __int64 v383; // [rsp+10h] [rbp-518h]\n  __int64 v384; // [rsp+10h] [rbp-518h]\n  __int64 v385; // [rsp+10h] [rbp-518h]\n  signed __int64 v386; // [rsp+10h] [rbp-518h]\n  __int64 *v387; // [rsp+10h] [rbp-518h]\n  __int64 *v388; // [rsp+10h] [rbp-518h]\n  __int64 v389; // [rsp+10h] [rbp-518h]\n  __int64 v390; // [rsp+10h] [rbp-518h]\n  __int64 v391; // [rsp+10h] [rbp-518h]\n  __int64 v392; // [rsp+18h] [rbp-510h]\n  __int64 v393; // [rsp+18h] [rbp-510h]\n  signed __int64 v394; // [rsp+18h] [rbp-510h]\n  __int64 *v395; // [rsp+18h] [rbp-510h]\n  signed __int64 v396; // [rsp+18h] [rbp-510h]\n  __int64 *v397; // [rsp+18h] [rbp-510h]\n  __int64 *v398; // [rsp+18h] [rbp-510h]\n  __int64 v399; // [rsp+18h] [rbp-510h]\n  __int64 v400; // [rsp+18h] [rbp-510h]\n  signed __int64 v401; // [rsp+18h] [rbp-510h]\n  __int64 v402; // [rsp+20h] [rbp-508h]\n  signed __int64 v403; // [rsp+20h] [rbp-508h]\n  __int64 *v404; // [rsp+20h] [rbp-508h]\n  __int64 v405; // [rsp+20h] [rbp-508h]\n  __int64 *v406; // [rsp+20h] [rbp-508h]\n  signed int *v407; // [rsp+20h] [rbp-508h]\n  __int64 v408; // [rsp+20h] [rbp-508h]\n  signed __int64 v409; // [rsp+28h] [rbp-500h]\n  __int64 *v410; // [rsp+28h] [rbp-500h]\n  signed __int64 v411; // [rsp+28h] [rbp-500h]\n  __int64 v412; // [rsp+28h] [rbp-500h]\n  unsigned int v413; // [rsp+34h] [rbp-4F4h]\n  __int64 v414; // [rsp+38h] [rbp-4F0h]\n  signed int v415; // [rsp+44h] [rbp-4E4h]\n  __int64 v416; // [rsp+48h] [rbp-4E0h]\n  __int64 *v417; // [rsp+48h] [rbp-4E0h]\n  __int64 v418; // [rsp+48h] [rbp-4E0h]\n  signed __int64 v419; // [rsp+48h] [rbp-4E0h]\n  __int64 v420; // [rsp+50h] [rbp-4D8h]\n  int v421; // [rsp+5Ch] [rbp-4CCh]\n  __int64 v422; // [rsp+60h] [rbp-4C8h]\n  unsigned int v423; // [rsp+6Ch] [rbp-4BCh]\n  unsigned __int64 v424; // [rsp+70h] [rbp-4B8h]\n  __int64 v425; // [rsp+78h] [rbp-4B0h]\n  __int64 v426; // [rsp+80h] [rbp-4A8h]\n  unsigned int v427; // [rsp+88h] [rbp-4A0h]\n  int v428; // [rsp+8Ch] [rbp-49Ch]\n  unsigned __int64 v429; // [rsp+90h] [rbp-498h]\n  double v430; // [rsp+98h] [rbp-490h]\n  __int64 v431; // [rsp+A0h] [rbp-488h]\n  double v432; // [rsp+A8h] [rbp-480h]\n  __int64 v433; // [rsp+B0h] [rbp-478h]\n  __int64 v434; // [rsp+B8h] [rbp-470h]\n  __int64 v435; // [rsp+C0h] [rbp-468h]\n  __int64 v436; // [rsp+C8h] [rbp-460h]\n  __int64 v437; // [rsp+D0h] [rbp-458h]\n  __int64 v438; // [rsp+D8h] [rbp-450h]\n  int v439; // [rsp+E0h] [rbp-448h]\n  int v440; // [rsp+E4h] [rbp-444h]\n  int v441; // [rsp+E8h] [rbp-440h]\n  int v442; // [rsp+ECh] [rbp-43Ch]\n  int v443; // [rsp+F0h] [rbp-438h]\n  int v444; // [rsp+F4h] [rbp-434h]\n  int v445; // [rsp+F8h] [rbp-430h]\n  int v446; // [rsp+FCh] [rbp-42Ch]\n  int v447; // [rsp+100h] [rbp-428h]\n  char v448; // [rsp+104h] [rbp-424h]\n  __int64 v449; // [rsp+108h] [rbp-420h]\n  __int64 v450; // [rsp+110h] [rbp-418h]\n  __int64 v451; // [rsp+118h] [rbp-410h]\n  _DWORD *v452; // [rsp+120h] [rbp-408h]\n  unsigned __int64 v453; // [rsp+128h] [rbp-400h]\n  int v454; // [rsp+130h] [rbp-3F8h]\n  int v455; // [rsp+134h] [rbp-3F4h]\n  int v456; // [rsp+140h] [rbp-3E8h]\n  int v457; // [rsp+144h] [rbp-3E4h]\n  int v458; // [rsp+148h] [rbp-3E0h]\n  int v459; // [rsp+14Ch] [rbp-3DCh]\n  int v460; // [rsp+158h] [rbp-3D0h]\n  int v461; // [rsp+15Ch] [rbp-3CCh]\n  unsigned __int64 v462; // [rsp+160h] [rbp-3C8h]\n  __int64 v463; // [rsp+168h] [rbp-3C0h]\n  __int128 v464; // [rsp+170h] [rbp-3B8h]\n  __int128 v465; // [rsp+180h] [rbp-3A8h]\n  __int128 v466; // [rsp+190h] [rbp-398h]\n  __int128 v467; // [rsp+1A0h] [rbp-388h]\n  __int128 v468; // [rsp+1B0h] [rbp-378h]\n  __int128 v469; // [rsp+1C0h] [rbp-368h]\n  __int128 v470; // [rsp+1D0h] [rbp-358h]\n  char v471; // [rsp+1E0h] [rbp-348h]\n  __int128 v472; // [rsp+1F0h] [rbp-338h]\n  __int128 v473; // [rsp+200h] [rbp-328h]\n  __int128 v474; // [rsp+210h] [rbp-318h]\n  __int128 v475; // [rsp+220h] [rbp-308h]\n  __int128 v476; // [rsp+230h] [rbp-2F8h]\n  __int128 v477; // [rsp+240h] [rbp-2E8h]\n  __int128 v478; // [rsp+250h] [rbp-2D8h]\n  __int128 v479; // [rsp+260h] [rbp-2C8h]\n  __int128 v480; // [rsp+270h] [rbp-2B8h]\n  __int128 v481; // [rsp+280h] [rbp-2A8h]\n  __int128 v482; // [rsp+290h] [rbp-298h]\n  __int128 v483; // [rsp+2A0h] [rbp-288h]\n  __int128 v484; // [rsp+2B0h] [rbp-278h]\n  __int128 v485; // [rsp+2C0h] [rbp-268h]\n  __int128 v486; // [rsp+2D0h] [rbp-258h]\n  __int128 v487; // [rsp+2E0h] [rbp-248h]\n  char v488; // [rsp+32Ch] [rbp-1FCh]\n  __int16 v489[2]; // [rsp+3F0h] [rbp-138h]\n  __int16 v490[2]; // [rsp+3F4h] [rbp-134h]\n  __int16 v491[2]; // [rsp+3F8h] [rbp-130h]\n  __int16 v492[2]; // [rsp+3FCh] [rbp-12Ch]\n  __int16 v493[2]; // [rsp+400h] [rbp-128h]\n  __int16 v494[2]; // [rsp+404h] [rbp-124h]\n  __int16 v495[2]; // [rsp+408h] [rbp-120h]\n  __int16 v496[2]; // [rsp+40Ch] [rbp-11Ch]\n  __int16 v497[2]; // [rsp+410h] [rbp-118h]\n  __int16 v498[2]; // [rsp+414h] [rbp-114h]\n  __int16 v499[2]; // [rsp+418h] [rbp-110h]\n  __int16 v500[2]; // [rsp+41Ch] [rbp-10Ch]\n  __int16 v501[2]; // [rsp+420h] [rbp-108h]\n  __int16 v502[2]; // [rsp+424h] [rbp-104h]\n  __int16 v503[2]; // [rsp+428h] [rbp-100h]\n  __int16 v504[98]; // [rsp+42Ch] [rbp-FCh]\n  __int16 v505[2]; // [rsp+4F0h] [rbp-38h]\n  __int16 v506[2]; // [rsp+4F4h] [rbp-34h]\n  __int16 v507[2]; // [rsp+4F8h] [rbp-30h]\n  __int16 v508[2]; // [rsp+4FCh] [rbp-2Ch]\n  __int16 v509[2]; // [rsp+500h] [rbp-28h]\n  __int16 v510[2]; // [rsp+504h] [rbp-24h]\n  __int16 v511[2]; // [rsp+508h] [rbp-20h]\n  __int16 v512[2]; // [rsp+50Ch] [rbp-1Ch]\n  __int16 v513[2]; // [rsp+510h] [rbp-18h]\n  __int16 v514[2]; // [rsp+514h] [rbp-14h]\n  __int16 v515[2]; // [rsp+518h] [rbp-10h]\n  __int16 v516[2]; // [rsp+51Ch] [rbp-Ch]\n  __int16 v517[2]; // [rsp+520h] [rbp-8h]\n  __int16 v518[2]; // [rsp+524h] [rbp-4h]\n  void *retaddr; // [rsp+528h] [rbp+0h]\n\n  v452 = a2;\n  v432 = a3;\n  v3 = ((_DWORD)a1 + ((unsigned int)a1 >> 31)) & 0xFFFFFFFE;\n  v422 = a1;\n  v4 = (signed int)a1 % 2;\n  v383 = (signed int)a1 / 2;\n  v5 = *((signed int *)off_49F6D0 + 38);\n  v426 = 8 * ((signed int)a1 % 2);\n  v6 = *((signed int *)off_49F6D0 + 39);\n  v429 = 8 * (signed int)v383;\n  v7 = v429 + v6;\n  v372 = *((signed int *)off_49F6D0 + 42);\n  v392 = *((signed int *)off_49F6D0 + 43);\n  v8 = *((signed int *)off_49F6D0 + 3);\n  v435 = *(signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v8 + 524);\n  v414 = v426 + v5;\n  v420 = v7;\n  v9 = (signed int)v7 >> 31;\n  v451 = qword_4F9EB0;\n  v10 = 0;\n  sub_437270(v8, 2 * v4, v3, -1, 0, &v454);\n  LODWORD(v8) = *((_DWORD *)off_49F6D0 + 3);\n  v438 = (unsigned int)(2 * v4);\n  v425 = v3;\n  sub_437270(v8, 2 * v4, v3, 0, -1, &v458);\n  if ( *((_DWORD *)dest + 54) )\n  {\n    if ( v458 )\n      v10 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v459);\n    v458 = v10;\n    v11 = v420;\n    v12 = v422;\n    v13 = ((signed int)v426 + (signed int)v5) >> 31;\n    if ( v454 )\n      v14 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v455);\n    else\n      v14 = 0;\n    v454 = v14;\n  }\n  else\n  {\n    v10 = v458;\n    v11 = v420;\n    v12 = v422;\n    v13 = ((signed int)v426 + (signed int)v5) >> 31;\n  }\n  v15 = v13 >> 30;\n  v16 = v9 >> 30;\n  if ( (unsigned int)(v12 + 1) < 3 )\n  {\n    if ( v10 )\n    {\n      v17 = *((_QWORD *)off_49F6D0 + 13);\n      goto LABEL_14;\n    }\n  }\n  else if ( v10 )\n  {\n    v17 = *((_QWORD *)off_49F6D0 + 14);\nLABEL_14:\n    v18 = *(_DWORD *)(*(_QWORD *)(v17 + 8LL * v460) + 4LL * v461);\n    goto LABEL_16;\n  }\n  v18 = -1;\nLABEL_16:\n  v19 = v414 + v15;\n  v20 = v11 + v16;\n  v434 = v392 + 8 * v383;\n  if ( !v4 )\n  {\n    if ( v454 )\n    {\n      v21 = *((_QWORD *)off_49F6D0 + 13);\n      goto LABEL_21;\n    }\nLABEL_22:\n    v22 = -1;\n    goto LABEL_23;\n  }\n  if ( !v454 )\n    goto LABEL_22;\n  v21 = *((_QWORD *)off_49F6D0 + 14);\nLABEL_21:\n  v22 = *(_DWORD *)(*(_QWORD *)(v21 + 8LL * v456) + 4LL * v457);\nLABEL_23:\n  v23 = v372 + 8LL * v4;\n  v421 = v19 >> 2;\n  v439 = v20 >> 2;\n  v24 = (unsigned int)v22;\n  if ( v18 <= v22 )\n    v24 = (unsigned int)v18;\n  if ( (v18 | v22) < 0 )\n    v24 = 2LL;\n  v431 = v24;\n  *v452 = 0x7FFFFFFF;\n  sub_47CD50(v414, v11, (__int64)&v447, (__int64)&v446, &v445);\n  v443 = v446;\n  v441 = v447;\n  v440 = v445;\n  v442 = (signed int)floor(4.0 * v432);\n  v436 = v12;\n  v428 = v12 + 4;\n  v427 = v12 + 8;\n  v450 = v12 + 4;\n  v449 = v12 + 8;\n  v435 = 32 * v426 + (v435 << 9);\n  v453 = v435 + 2 * v429 + 10552;\n  v25 = (__m128i)0x46293E5939A08CEAuLL;\n  v430 = 1.0e30;\n  v426 *= 32LL;\n  v462 = v426 + 2 * v429 + 12824;\n  v26 = v451 + 8 * v434;\n  v27 = 0LL;\n  v415 = 0;\n  v413 = 0;\n  v28 = v425;\n  v409 = v23;\n  v437 = v451 + 8 * v434;\n  do\n  {\n    v29 = 2;\n    if ( v27 != 2 )\n    {\n      if ( (v27 == 0 || ((unsigned int)v27 | 4) == 7) == 1 && v443 )\n      {\n        v29 = v27;\n      }\n      else\n      {\n        v29 = v27;\n        if ( (v441 == 0 || v27 != 1 && v27 != 8) && !v440 )\n          goto LABEL_92;\n      }\n    }\n    v30 = dest;\n    v31 = (const __m128i *)off_49F6D0;\n    if ( *((_DWORD *)dest + 616) )\n    {\n      LODWORD(v424) = v29;\n      if ( *((_DWORD *)off_49F6D0 + 18181) )\n      {\n        v373 = *(_QWORD *)qword_4F9E88;\n        v393 = *(_QWORD *)(qword_4F9E88 + 8);\n        v384 = qword_4F9EB0;\n        v433 = v27;\n        v463 = v27 << 7;\n        v32 = (char *)off_49F6D0 + 128 * v27 + 7352;\n        v33 = (char *)off_49F6D0 + v453;\n        v34 = 0LL;\n        v35 = 0LL;\n        do\n        {\n          v36 = 2 * v23;\n          v37 = 2 * v23 + *(_QWORD *)(v373 + 8 * (v35 + v434));\n          v38 = v36 + *(_QWORD *)(v384 + 8 * (v35 + v434));\n          v39 = *(_QWORD *)(v393 + 8 * (v35 + v434)) + v36;\n          v40 = 0LL;\n          v41 = 0LL;\n          do\n          {\n            v42 = *(unsigned __int16 *)(v37 + v41) - (unsigned int)*(unsigned __int16 *)&v33[v40 - 2048];\n            v43 = *(unsigned __int16 *)(v38 + v41) - *(unsigned __int16 *)&v32[v41];\n            v44 = *(unsigned __int16 *)(v39 + v41) - *(unsigned __int16 *)&v33[v40] - v42;\n            xmmword_4F46D0[v40 / 2 + v34] = v44;\n            v45 = v42 + (v44 >> 1);\n            v46 = v43 - v45;\n            xmmword_4F36D0[v40 / 2 + v34] = v46;\n            *(_DWORD *)((char *)&xmmword_4F42D0[v40 / 8] + v34 * 4) = v45 + (v46 >> 1);\n            v41 += 2LL;\n            v40 += 32LL;\n          }\n          while ( v41 != 16 );\n          ++v35;\n          v32 += 16;\n          ++v34;\n          v33 += 2;\n          v23 = v409;\n        }\n        while ( v35 != 8 );\n        v47 = 4611686018427387896LL;\n        do\n        {\n          v31[821].m128i_i32[v47 + 2] = dword_4F42F0[v47];\n          v31[825].m128i_i32[v47 + 2] = dword_4F4330[v47];\n          v31[829].m128i_i32[v47 + 2] = dword_4F4370[v47];\n          v31[833].m128i_i32[v47 + 2] = dword_4F43B0[v47];\n          v31[837].m128i_i32[v47 + 2] = dword_4F43F0[v47];\n          v31[841].m128i_i32[v47 + 2] = dword_4F4430[v47];\n          v31[845].m128i_i32[v47 + 2] = dword_4F4470[v47];\n          v31[849].m128i_i32[v47 + 2] = dword_4F44B0[v47];\n          ++v47;\n        }\n        while ( v47 * 4 );\n        sub_474DA0(16LL, v42);\n        v25 = (__m128i)*(unsigned __int64 *)&v432;\n        v374 = sub_47E7B0(&v423, v422, v424, v431, v48, v49, v432);\n        sub_474DB0((__int64)&v423, v422);\n        v50 = 4611686018427387896LL;\n        v51 = (char *)off_49F6D0;\n        do\n        {\n          dword_4F26F0[v50] = *(_DWORD *)&v51[v50 * 4 + 13144];\n          dword_4F2730[v50] = *(_DWORD *)&v51[v50 * 4 + 13208];\n          dword_4F2770[v50] = *(_DWORD *)&v51[v50 * 4 + 13272];\n          dword_4F27B0[v50] = *(_DWORD *)&v51[v50 * 4 + 13336];\n          dword_4F27F0[v50] = *(_DWORD *)&v51[v50 * 4 + 13400];\n          dword_4F2830[v50] = *(_DWORD *)&v51[v50 * 4 + 13464];\n          dword_4F2870[v50] = *(_DWORD *)&v51[v50 * 4 + 13528];\n          dword_4F28B0[v50] = *(_DWORD *)&v51[v50 * 4 + 13592];\n          ++v50;\n        }\n        while ( v50 * 4 );\n        v52 = (signed int)v374;\n        v53 = 0;\n        sub_474DA0((__int64)&v423, v422);\n        v54 = off_49F6D0;\n        v55 = 0;\n        do\n        {\n          v56 = 2 * v55 & 0xFFFFFFFC;\n          v57 = (unsigned __int64)(v53 & 4) << 6;\n          v54[3278] = *(_DWORD *)((char *)&xmmword_4F46D0[v56] + v57);\n          v54[3294] = *(_DWORD *)((char *)&xmmword_4F4710[v56] + v57);\n          v54[3310] = *(_DWORD *)((char *)&xmmword_4F4750[v56] + v57);\n          v54[3326] = *(_DWORD *)((char *)&xmmword_4F4790[v56] + v57);\n          v54[3279] = xmmword_4F46D0[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          v54[3295] = xmmword_4F4710[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          v54[3311] = xmmword_4F4750[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          v54[3327] = xmmword_4F4790[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          v54[3280] = xmmword_4F46D0[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          v54[3296] = xmmword_4F4710[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          v54[3312] = xmmword_4F4750[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          v54[3328] = xmmword_4F4790[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          v54[3281] = xmmword_4F46D0[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          v54[3297] = xmmword_4F4710[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          v54[3313] = xmmword_4F4750[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          v54[3329] = xmmword_4F4790[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          v58 = sub_45CC80(v428, v55, 0);\n          v59 = off_49F6D0;\n          *(_DWORD *)((char *)&xmmword_4F32D0[v56] + v57) = *((_DWORD *)off_49F6D0 + 3278);\n          v59[3278] = *(_DWORD *)((char *)&xmmword_4F36D0[v56] + v57);\n          *(_DWORD *)((char *)&xmmword_4F3310[v56] + v57) = v59[3294];\n          v59[3294] = *(_DWORD *)((char *)&xmmword_4F3710[v56] + v57);\n          *(_DWORD *)((char *)&xmmword_4F3350[v56] + v57) = v59[3310];\n          v59[3310] = *(_DWORD *)((char *)&xmmword_4F3750[v56] + v57);\n          *(_DWORD *)((char *)&xmmword_4F3390[v56] + v57) = v59[3326];\n          v59[3326] = *(_DWORD *)((char *)&xmmword_4F3790[v56] + v57);\n          xmmword_4F32D0[16 * (unsigned __int64)(v53 & 4) + 1 + v56] = v59[3279];\n          v59[3279] = xmmword_4F36D0[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          xmmword_4F3310[16 * (unsigned __int64)(v53 & 4) + 1 + v56] = v59[3295];\n          v59[3295] = xmmword_4F3710[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          xmmword_4F3350[16 * (unsigned __int64)(v53 & 4) + 1 + v56] = v59[3311];\n          v59[3311] = xmmword_4F3750[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          xmmword_4F3390[16 * (unsigned __int64)(v53 & 4) + 1 + v56] = v59[3327];\n          v59[3327] = xmmword_4F3790[16 * (unsigned __int64)(v53 & 4) + 1 + v56];\n          xmmword_4F32D0[16 * (unsigned __int64)(v53 & 4) + 2 + v56] = v59[3280];\n          v59[3280] = xmmword_4F36D0[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          xmmword_4F3310[16 * (unsigned __int64)(v53 & 4) + 2 + v56] = v59[3296];\n          v59[3296] = xmmword_4F3710[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          xmmword_4F3350[16 * (unsigned __int64)(v53 & 4) + 2 + v56] = v59[3312];\n          v59[3312] = xmmword_4F3750[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          xmmword_4F3390[16 * (unsigned __int64)(v53 & 4) + 2 + v56] = v59[3328];\n          v59[3328] = xmmword_4F3790[16 * (unsigned __int64)(v53 & 4) + 2 + v56];\n          xmmword_4F32D0[16 * (unsigned __int64)(v53 & 4) + 3 + v56] = v59[3281];\n          v59[3281] = xmmword_4F36D0[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          xmmword_4F3310[16 * (unsigned __int64)(v53 & 4) + 3 + v56] = v59[3297];\n          v59[3297] = xmmword_4F3710[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          xmmword_4F3350[16 * (unsigned __int64)(v53 & 4) + 3 + v56] = v59[3313];\n          v59[3313] = xmmword_4F3750[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          xmmword_4F3390[16 * (unsigned __int64)(v53 & 4) + 3 + v56] = v59[3329];\n          v60 = v58;\n          v59[3329] = xmmword_4F3790[16 * (unsigned __int64)(v53 & 4) + 3 + v56];\n          v61 = v427;\n          v62 = v55;\n          v63 = sub_45CC80(v427, v55, 1);\n          v54 = off_49F6D0;\n          *(_DWORD *)((char *)xmmword_4F22D0 + 4 * v56 + v57) = *((_DWORD *)off_49F6D0 + 3278);\n          *(_DWORD *)((char *)xmmword_4F2310 + 4 * v56 + v57) = v54[3294];\n          *(_DWORD *)((char *)xmmword_4F2350 + 4 * v56 + v57) = v54[3310];\n          *(_DWORD *)((char *)xmmword_4F2390 + 4 * v56 + v57) = v54[3326];\n          *((_DWORD *)&xmmword_4F22D0[4 * (unsigned __int64)(v53 & 4)] + v56 + 1) = v54[3279];\n          *((_DWORD *)&xmmword_4F2310[4 * (unsigned __int64)(v53 & 4)] + v56 + 1) = v54[3295];\n          *((_DWORD *)&xmmword_4F2350[4 * (unsigned __int64)(v53 & 4)] + v56 + 1) = v54[3311];\n          *((_DWORD *)&xmmword_4F2390[4 * (unsigned __int64)(v53 & 4)] + v56 + 1) = v54[3327];\n          *((_DWORD *)&xmmword_4F22D0[4 * (unsigned __int64)(v53 & 4)] + v56 + 2) = v54[3280];\n          *((_DWORD *)&xmmword_4F2310[4 * (unsigned __int64)(v53 & 4)] + v56 + 2) = v54[3296];\n          *((_DWORD *)&xmmword_4F2350[4 * (unsigned __int64)(v53 & 4)] + v56 + 2) = v54[3312];\n          *((_DWORD *)&xmmword_4F2390[4 * (unsigned __int64)(v53 & 4)] + v56 + 2) = v54[3328];\n          *((_DWORD *)&xmmword_4F22D0[4 * (unsigned __int64)(v53 & 4)] + v56 + 3) = v54[3281];\n          *((_DWORD *)&xmmword_4F2310[4 * (unsigned __int64)(v53 & 4)] + v56 + 3) = v54[3297];\n          *((_DWORD *)&xmmword_4F2350[4 * (unsigned __int64)(v53 & 4)] + v56 + 3) = v54[3313];\n          ++v55;\n          v52 += v63 + v60;\n          v53 += 4;\n          *(_DWORD *)(v57 + 4 * v56 + 5186460) = v54[3329];\n        }\n        while ( v55 != 4 );\n        v444 = v52;\n        sub_474DB0(v61, v62);\n        v64 = *((_DWORD *)off_49F6D0 + 18171);\n        v65 = *((_DWORD *)off_49F6D0 + 18172);\n        v416 = *(_QWORD *)(qword_4F9E30 + 6424);\n        v66 = *(__int64 **)(qword_4F9E30 + 6464);\n        v385 = *v66;\n        v402 = v66[1];\n        v375 = (char *)off_49F6D0 + v463 + 7352;\n        v67 = (char *)off_49F6D0 + v453;\n        v68 = 0LL;\n        v69 = 0LL;\n        v70 = v420;\n        do\n        {\n          v394 = v69;\n          v71 = v69 + v70;\n          v72 = 2 * v414 + *(_QWORD *)(v385 + 8 * v71);\n          v73 = 2 * v414 + *(_QWORD *)(v416 + 8 * v71);\n          v74 = *(_QWORD *)(v402 + 8 * v71) + 2 * v414;\n          v75 = 0LL;\n          v76 = 0LL;\n          do\n          {\n            v77 = xmmword_4F32D0[v76 / 2 + v68];\n            v78 = xmmword_4F26D0[v76 / 2 + v68]\n                - (*(_DWORD *)((char *)&xmmword_4F22D0[v76 / 8] + v68 * 4) >> 1)\n                - (xmmword_4F32D0[v76 / 2 + v68] >> 1);\n            v79 = v78 + *(unsigned __int16 *)&v67[v76 - 2048];\n            if ( v79 < 0 )\n              v79 = 0;\n            v80 = *(_DWORD *)((char *)&xmmword_4F22D0[v76 / 8] + v68 * 4)\n                + xmmword_4F26D0[v76 / 2 + v68]\n                - (*(_DWORD *)((char *)&xmmword_4F22D0[v76 / 8] + v68 * 4) >> 1);\n            v81 = v65;\n            if ( v65 >= v79 )\n              v81 = v79;\n            *(_WORD *)(v72 + v75) = v81;\n            v82 = *(unsigned __int16 *)&v375[v75] + v80;\n            if ( v82 < 0 )\n              v82 = 0;\n            v83 = v77 + v78;\n            v84 = v64;\n            if ( v64 >= v82 )\n              v84 = v82;\n            *(_WORD *)(v73 + v75) = v84;\n            v85 = *(unsigned __int16 *)&v67[v76] + v83;\n            if ( v85 < 0 )\n              v85 = 0;\n            v86 = v65;\n            if ( v65 >= v85 )\n              v86 = v85;\n            *(_WORD *)(v74 + v75) = v86;\n            v76 += 32LL;\n            v75 += 2LL;\n          }\n          while ( v75 != 16 );\n          v69 = v394 + 1;\n          ++v68;\n          v375 += 16;\n          v67 += 2;\n          v70 = v420;\n        }\n        while ( v394 != 7 );\n        v386 = v385 + 8 * v420;\n        v403 = v402 + 8 * v420;\n        v87 = 0LL;\n        v88 = 0;\n        do\n        {\n          v89 = *(_QWORD *)(8 * v420 + qword_4F9EB0 + v87);\n          v90 = *(_QWORD *)(v416 + 8 * v420 + v87);\n          v91 = *(_QWORD *)(8 * v420 + *(_QWORD *)qword_4F9E88 + v87);\n          v92 = *(_QWORD *)(v386 + v87);\n          v93 = *(_QWORD *)(*(_QWORD *)(qword_4F9E88 + 8) + 8 * v420 + v87);\n          v94 = *(_QWORD *)(v403 + v87);\n          v95 = *(unsigned __int16 *)(v89 + 2 * v414) - *(unsigned __int16 *)(v90 + 2 * v414);\n          v96 = *(unsigned __int16 *)(v91 + 2 * v414) - *(unsigned __int16 *)(v92 + 2 * v414);\n          v97 = *(unsigned __int16 *)(v93 + 2 * v414) - *(unsigned __int16 *)(v94 + 2 * v414);\n          v98 = v88 + v95 * v95 + v96 * v96 + v97 * v97;\n          v99 = *(unsigned __int16 *)(v89 + 2 * v414 + 2) - *(unsigned __int16 *)(v90 + 2 * v414 + 2);\n          v100 = *(unsigned __int16 *)(v91 + 2 * v414 + 2) - *(unsigned __int16 *)(v92 + 2 * v414 + 2);\n          v101 = v98 + v99 * v99 + v100 * v100;\n          v102 = *(unsigned __int16 *)(v93 + 2 * v414 + 2) - *(unsigned __int16 *)(v94 + 2 * v414 + 2);\n          v103 = v101 + v102 * v102;\n          v104 = *(unsigned __int16 *)(v89 + 2 * v414 + 4) - *(unsigned __int16 *)(v90 + 2 * v414 + 4);\n          v105 = v103 + v104 * v104;\n          v106 = *(unsigned __int16 *)(v91 + 2 * v414 + 4) - *(unsigned __int16 *)(v92 + 2 * v414 + 4);\n          v107 = v105 + v106 * v106;\n          v108 = *(unsigned __int16 *)(v93 + 2 * v414 + 4) - *(unsigned __int16 *)(v94 + 2 * v414 + 4);\n          v109 = v107 + v108 * v108;\n          v110 = *(unsigned __int16 *)(v89 + 2 * v414 + 6) - *(unsigned __int16 *)(v90 + 2 * v414 + 6);\n          v111 = v109 + v110 * v110;\n          v112 = *(unsigned __int16 *)(v91 + 2 * v414 + 6) - *(unsigned __int16 *)(v92 + 2 * v414 + 6);\n          v113 = v111 + v112 * v112;\n          v114 = *(unsigned __int16 *)(v93 + 2 * v414 + 6) - *(unsigned __int16 *)(v94 + 2 * v414 + 6);\n          v115 = v113 + v114 * v114;\n          v116 = *(unsigned __int16 *)(v89 + 2 * v414 + 8) - *(unsigned __int16 *)(v90 + 2 * v414 + 8);\n          v117 = v115 + v116 * v116;\n          v118 = *(unsigned __int16 *)(v91 + 2 * v414 + 8) - *(unsigned __int16 *)(v92 + 2 * v414 + 8);\n          v119 = v117 + v118 * v118;\n          v120 = *(unsigned __int16 *)(v93 + 2 * v414 + 8) - *(unsigned __int16 *)(v94 + 2 * v414 + 8);\n          v121 = v119 + v120 * v120;\n          v122 = *(unsigned __int16 *)(v89 + 2 * v414 + 10) - *(unsigned __int16 *)(v90 + 2 * v414 + 10);\n          v123 = v121 + v122 * v122;\n          v124 = *(unsigned __int16 *)(v91 + 2 * v414 + 10) - *(unsigned __int16 *)(v92 + 2 * v414 + 10);\n          v125 = v123 + v124 * v124;\n          v126 = *(unsigned __int16 *)(v93 + 2 * v414 + 10) - *(unsigned __int16 *)(v94 + 2 * v414 + 10);\n          v127 = v125 + v126 * v126;\n          v128 = *(unsigned __int16 *)(v89 + 2 * v414 + 12) - *(unsigned __int16 *)(v90 + 2 * v414 + 12);\n          v129 = v127 + v128 * v128;\n          v130 = *(unsigned __int16 *)(v91 + 2 * v414 + 12) - *(unsigned __int16 *)(v92 + 2 * v414 + 12);\n          v131 = v129 + v130 * v130;\n          v132 = *(unsigned __int16 *)(v93 + 2 * v414 + 12) - *(unsigned __int16 *)(v94 + 2 * v414 + 12);\n          v133 = v131 + v132 * v132;\n          v134 = *(unsigned __int16 *)(v89 + 2 * v414 + 14) - *(unsigned __int16 *)(v90 + 2 * v414 + 14);\n          v135 = v133 + v134 * v134;\n          v136 = *(unsigned __int16 *)(v91 + 2 * v414 + 14) - *(unsigned __int16 *)(v92 + 2 * v414 + 14);\n          v137 = v135 + v136 * v136;\n          v138 = *(unsigned __int16 *)(v93 + 2 * v414 + 14) - *(unsigned __int16 *)(v94 + 2 * v414 + 14);\n          v88 = v137 + v138 * v138;\n          v87 += 8LL;\n        }\n        while ( v87 != 64 );\n        *(double *)v25.m128i_i64 = (double)v444 * v432 + (double)v88;\n        v28 = v425;\n        v23 = v409;\n        v26 = v437;\n        v27 = v433;\n        if ( v430 > *(double *)v25.m128i_i64 )\n        {\n          v139 = *((_QWORD *)off_49F6D0 + 1767);\n          v376 = v139;\n          v140 = *(__int64 ***)(v139 + 8 * v436);\n          v141 = (__int64 **)*((_QWORD *)qword_4A00D8 + v436);\n          v142 = v140[1];\n          v387 = *v140;\n          v143 = **v140;\n          v144 = v141[1];\n          v417 = *v141;\n          v145 = **v141;\n          v395 = v142;\n          v146 = *v142;\n          v404 = v144;\n          v147 = *v144;\n          v148 = v140[2];\n          v149 = *v148;\n          v150 = v141[2];\n          v151 = *v150;\n          v152 = v140[3];\n          v153 = v141[3];\n          v154 = *v152;\n          v155 = *v153;\n          for ( i = 0LL; ; i += 8LL )\n          {\n            *(_DWORD *)(v145 + i) = *(_DWORD *)(v143 + i);\n            *(_DWORD *)(v147 + i) = *(_DWORD *)(v146 + i);\n            *(_DWORD *)(v151 + i) = *(_DWORD *)(v149 + i);\n            *(_DWORD *)(v155 + i) = *(_DWORD *)(v154 + i);\n            if ( i == 256 )\n              break;\n            *(_DWORD *)(v145 + i + 4) = *(_DWORD *)(v143 + i + 4);\n            *(_DWORD *)(v147 + i + 4) = *(_DWORD *)(v146 + i + 4);\n            *(_DWORD *)(v151 + i + 4) = *(_DWORD *)(v149 + i + 4);\n            *(_DWORD *)(v155 + i + 4) = *(_DWORD *)(v154 + i + 4);\n          }\n          v157 = v387[1];\n          v158 = v417[1];\n          v159 = v395[1];\n          v160 = v404[1];\n          v161 = v148[1];\n          v162 = v150[1];\n          v163 = v152[1];\n          v164 = v153[1];\n          v165 = 0LL;\n          v166 = v414;\n          while ( 1 )\n          {\n            *(_DWORD *)(v158 + v165) = *(_DWORD *)(v157 + v165);\n            *(_DWORD *)(v160 + v165) = *(_DWORD *)(v159 + v165);\n            *(_DWORD *)(v162 + v165) = *(_DWORD *)(v161 + v165);\n            *(_DWORD *)(v164 + v165) = *(_DWORD *)(v163 + v165);\n            if ( v165 == 256 )\n              break;\n            *(_DWORD *)(v158 + v165 + 4) = *(_DWORD *)(v157 + v165 + 4);\n            *(_DWORD *)(v160 + v165 + 4) = *(_DWORD *)(v159 + v165 + 4);\n            *(_DWORD *)(v162 + v165 + 4) = *(_DWORD *)(v161 + v165 + 4);\n            *(_DWORD *)(v164 + v165 + 4) = *(_DWORD *)(v163 + v165 + 4);\n            v165 += 8LL;\n          }\n          v405 = *(_QWORD *)(v376 + 8 * v450);\n          v418 = *(_QWORD *)(v376 + 8 * v449);\n          v167 = *(_QWORD *)(qword_4F9E30 + 6464);\n          v168 = &v488;\n          v169 = 0LL;\n          do\n          {\n            v377 = v168;\n            v170 = *(int ***)(v405 + 8 * v169);\n            v171 = *v170;\n            v172 = 16 * v169;\n            dword_4F0E50[(unsigned __int64)(9 * v172) / 4] = **v170;\n            dword_4F0E54[(unsigned __int64)(9 * v172) / 4] = v171[1];\n            dword_4F0E58[(unsigned __int64)(9 * v172) / 4] = v171[2];\n            dword_4F0E5C[(unsigned __int64)(9 * v172) / 4] = v171[3];\n            dword_4F0E60[(unsigned __int64)(9 * v172) / 4] = v171[4];\n            dword_4F0E64[(unsigned __int64)(9 * v172) / 4] = v171[5];\n            dword_4F0E68[(unsigned __int64)(9 * v172) / 4] = v171[6];\n            dword_4F0E6C[(unsigned __int64)(9 * v172) / 4] = v171[7];\n            dword_4F0E70[(unsigned __int64)(9 * v172) / 4] = v171[8];\n            dword_4F0E74[(unsigned __int64)(9 * v172) / 4] = v171[9];\n            dword_4F0E78[(unsigned __int64)(9 * v172) / 4] = v171[10];\n            dword_4F0E7C[(unsigned __int64)(9 * v172) / 4] = v171[11];\n            dword_4F0E80[(unsigned __int64)(9 * v172) / 4] = v171[12];\n            dword_4F0E84[(unsigned __int64)(9 * v172) / 4] = v171[13];\n            dword_4F0E88[(unsigned __int64)(9 * v172) / 4] = v171[14];\n            dword_4F0E8C[(unsigned __int64)(9 * v172) / 4] = v171[15];\n            dword_4F0E90[(unsigned __int64)(9 * v172) / 4] = v171[16];\n            dword_4F0E94[(unsigned __int64)(9 * v172) / 4] = v171[17];\n            v173 = v170[1];\n            dword_4F0E98[(unsigned __int64)(9 * v172) / 4] = *v173;\n            dword_4F0E9C[(unsigned __int64)(9 * v172) / 4] = v173[1];\n            dword_4F0EA0[(unsigned __int64)(9 * v172) / 4] = v173[2];\n            dword_4F0EA4[(unsigned __int64)(9 * v172) / 4] = v173[3];\n            dword_4F0EA8[(unsigned __int64)(9 * v172) / 4] = v173[4];\n            dword_4F0EAC[(unsigned __int64)(9 * v172) / 4] = v173[5];\n            dword_4F0EB0[(unsigned __int64)(9 * v172) / 4] = v173[6];\n            dword_4F0EB4[(unsigned __int64)(9 * v172) / 4] = v173[7];\n            dword_4F0EB8[(unsigned __int64)(9 * v172) / 4] = v173[8];\n            dword_4F0EBC[(unsigned __int64)(9 * v172) / 4] = v173[9];\n            dword_4F0EC0[(unsigned __int64)(9 * v172) / 4] = v173[10];\n            dword_4F0EC4[(unsigned __int64)(9 * v172) / 4] = v173[11];\n            dword_4F0EC8[(unsigned __int64)(9 * v172) / 4] = v173[12];\n            dword_4F0ECC[(unsigned __int64)(9 * v172) / 4] = v173[13];\n            dword_4F0ED0[(unsigned __int64)(9 * v172) / 4] = v173[14];\n            dword_4F0ED4[(unsigned __int64)(9 * v172) / 4] = v173[15];\n            dword_4F0ED8[(unsigned __int64)(9 * v172) / 4] = v173[16];\n            *(_DWORD *)((char *)dword_4F0EDC + 9 * v172) = v173[17];\n            v174 = *(int ***)(v418 + 8 * v169);\n            v175 = *v174;\n            dword_4F1090[(unsigned __int64)(9 * v172) / 4] = **v174;\n            dword_4F1094[(unsigned __int64)(9 * v172) / 4] = v175[1];\n            dword_4F1098[(unsigned __int64)(9 * v172) / 4] = v175[2];\n            dword_4F109C[(unsigned __int64)(9 * v172) / 4] = v175[3];\n            dword_4F10A0[(unsigned __int64)(9 * v172) / 4] = v175[4];\n            dword_4F10A4[(unsigned __int64)(9 * v172) / 4] = v175[5];\n            dword_4F10A8[(unsigned __int64)(9 * v172) / 4] = v175[6];\n            dword_4F10AC[(unsigned __int64)(9 * v172) / 4] = v175[7];\n            dword_4F10B0[(unsigned __int64)(9 * v172) / 4] = v175[8];\n            dword_4F10B4[(unsigned __int64)(9 * v172) / 4] = v175[9];\n            dword_4F10B8[(unsigned __int64)(9 * v172) / 4] = v175[10];\n            dword_4F10BC[(unsigned __int64)(9 * v172) / 4] = v175[11];\n            dword_4F10C0[(unsigned __int64)(9 * v172) / 4] = v175[12];\n            dword_4F10C4[(unsigned __int64)(9 * v172) / 4] = v175[13];\n            dword_4F10C8[(unsigned __int64)(9 * v172) / 4] = v175[14];\n            dword_4F10CC[(unsigned __int64)(9 * v172) / 4] = v175[15];\n            dword_4F10D0[(unsigned __int64)(9 * v172) / 4] = v175[16];\n            dword_4F10D4[(unsigned __int64)(9 * v172) / 4] = v175[17];\n            v176 = v174[1];\n            dword_4F10D8[(unsigned __int64)(9 * v172) / 4] = *v176;\n            dword_4F10DC[(unsigned __int64)(9 * v172) / 4] = v176[1];\n            dword_4F10E0[(unsigned __int64)(9 * v172) / 4] = v176[2];\n            dword_4F10E4[(unsigned __int64)(9 * v172) / 4] = v176[3];\n            dword_4F10E8[(unsigned __int64)(9 * v172) / 4] = v176[4];\n            dword_4F10EC[(unsigned __int64)(9 * v172) / 4] = v176[5];\n            dword_4F10F0[(unsigned __int64)(9 * v172) / 4] = v176[6];\n            dword_4F10F4[(unsigned __int64)(9 * v172) / 4] = v176[7];\n            dword_4F10F8[(unsigned __int64)(9 * v172) / 4] = v176[8];\n            dword_4F10FC[(unsigned __int64)(9 * v172) / 4] = v176[9];\n            dword_4F1100[(unsigned __int64)(9 * v172) / 4] = v176[10];\n            dword_4F1104[(unsigned __int64)(9 * v172) / 4] = v176[11];\n            dword_4F1108[(unsigned __int64)(9 * v172) / 4] = v176[12];\n            v177 = (unsigned int)v169 >> 1;\n            dword_4F110C[(unsigned __int64)(9 * v172) / 4] = v176[13];\n            LODWORD(v175) = v425 + ((unsigned int)v169 >> 1);\n            dword_4F1110[(unsigned __int64)(9 * v172) / 4] = v176[14];\n            v178 = (signed int)v175;\n            v396 = v169;\n            dword_4F1114[(unsigned __int64)(9 * v172) / 4] = v176[15];\n            LODWORD(v175) = v169 & 1;\n            dword_4F1118[(unsigned __int64)(9 * v172) / 4] = v176[16];\n            *(_DWORD *)((char *)dword_4F111C + 9 * v172) = v176[17];\n            v179 = v166 + 4 * (_DWORD)v175 + 2;\n            v180 = v166 + 4 * (_DWORD)v175 + 3;\n            v181 = v167;\n            v182 = (signed int)(v438 | (unsigned int)v175);\n            v183 = v166 + 4 * (signed int)v175;\n            v184 = (signed int)(v420 + 4 * v177);\n            v185 = v166 + 4 * (signed int)v175 + 1;\n            v186 = v179;\n            v187 = v180;\n            v188 = (signed int)(v420 + 4 * v177 + 1);\n            v189 = (signed int)(v420 + 4 * v177 + 2);\n            v190 = (signed int)(v420 + 4 * v177 + 3);\n            v191 = 16 * v182 + 4 * v178;\n            v167 = v181;\n            v192 = v377;\n            v193 = 0LL;\n            do\n            {\n              *(int *)((char *)&dword_4F9210[2 * v193] + v191) = *(int *)((char *)&dword_4F9290[2 * v193] + v191);\n              *(int *)((char *)&dword_4F9110[2 * v193] + v191) = *(int *)((char *)&dword_4F9190[2 * v193] + v191);\n              v194 = *(_QWORD *)(v167 + v193);\n              v195 = *(_QWORD *)(v194 + 8 * v184);\n              *((_DWORD *)v192 - 15) = *(unsigned __int16 *)(v195 + 2 * v183);\n              *((_DWORD *)v192 - 14) = *(unsigned __int16 *)(v195 + 2 * v185);\n              *((_DWORD *)v192 - 13) = *(unsigned __int16 *)(v195 + 2 * v186);\n              *((_DWORD *)v192 - 12) = *(unsigned __int16 *)(v195 + 2 * v187);\n              v196 = *(_QWORD *)(v194 + 8 * v188);\n              *((_DWORD *)v192 - 11) = *(unsigned __int16 *)(v196 + 2 * v183);\n              *((_DWORD *)v192 - 10) = *(unsigned __int16 *)(v196 + 2 * v185);\n              *((_DWORD *)v192 - 9) = *(unsigned __int16 *)(v196 + 2 * v186);\n              *((_DWORD *)v192 - 8) = *(unsigned __int16 *)(v196 + 2 * v187);\n              v197 = *(_QWORD *)(v194 + 8 * v189);\n              *((_DWORD *)v192 - 7) = *(unsigned __int16 *)(v197 + 2 * v183);\n              *((_DWORD *)v192 - 6) = *(unsigned __int16 *)(v197 + 2 * v185);\n              *((_DWORD *)v192 - 5) = *(unsigned __int16 *)(v197 + 2 * v186);\n              *((_DWORD *)v192 - 4) = *(unsigned __int16 *)(v197 + 2 * v187);\n              v198 = *(_QWORD *)(v194 + 8 * v190);\n              *((_DWORD *)v192 - 3) = *(unsigned __int16 *)(v198 + 2 * v183);\n              *((_DWORD *)v192 - 2) = *(unsigned __int16 *)(v198 + 2 * v185);\n              *((_DWORD *)v192 - 1) = *(unsigned __int16 *)(v198 + 2 * v186);\n              *(_DWORD *)v192 = *(unsigned __int16 *)(v198 + 2 * v187);\n              v193 += 8LL;\n              v192 += 256;\n            }\n            while ( v193 != 16 );\n            v169 = v396 + 1;\n            v168 = v377 + 64;\n            v166 = v414;\n          }\n          while ( v396 != 3 );\n          v199 = *(_QWORD *)(qword_4F9E30 + 6424);\n          v464 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420) + 2 * v414);\n          v465 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 8) + 2 * v414);\n          v466 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 16) + 2 * v414);\n          v467 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 24) + 2 * v414);\n          v468 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 32) + 2 * v414);\n          v469 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 40) + 2 * v414);\n          v470 = *(_OWORD *)(*(_QWORD *)(v199 + 8 * v420 + 48) + 2 * v414);\n          _mm_storeu_si128(\n            (__m128i *)&v471,\n            _mm_loadu_si128((const __m128i *)(*(_QWORD *)(v199 + 8 * v420 + 56) + 2 * v414)));\n          v413 = v423;\n          v430 = *(double *)v25.m128i_i64;\n          v415 = v424;\n          v28 = v425;\n          v23 = v409;\n          v26 = v437;\n          v27 = v433;\n        }\n      }\n      else\n      {\n        v212 = (char *)off_49F6D0 + 128 * v27 + 7366;\n        v213 = (char *)off_49F6D0 + v462;\n        v214 = 0LL;\n        do\n        {\n          v215 = *(_QWORD *)(v26 + 2 * v214);\n          *(_WORD *)&v213[v214 * 2 - 224] = *(_WORD *)&v212[4 * v214 - 14];\n          v31[819].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 14];\n          *(_WORD *)&v213[v214 * 2 - 192] = *(_WORD *)&v212[4 * v214 - 12];\n          v31[823].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 2)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 12];\n          *(_WORD *)&v213[v214 * 2 - 160] = *(_WORD *)&v212[4 * v214 - 10];\n          v31[827].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 4)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 10];\n          *(_WORD *)&v213[v214 * 2 - 128] = *(_WORD *)&v212[4 * v214 - 8];\n          v31[831].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 6)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 8];\n          *(_WORD *)&v213[v214 * 2 - 96] = *(_WORD *)&v212[4 * v214 - 6];\n          v31[835].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 8)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 6];\n          *(_WORD *)&v213[v214 * 2 - 64] = *(_WORD *)&v212[4 * v214 - 4];\n          v31[839].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 10)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 4];\n          *(_WORD *)&v213[v214 * 2 - 32] = *(_WORD *)&v212[4 * v214 - 2];\n          v31[843].m128i_i32[v214 + 2] = *(unsigned __int16 *)(v215 + 2 * v23 + 12)\n                                       - *(unsigned __int16 *)&v212[4 * v214 - 2];\n          *(_WORD *)&v213[v214 * 2] = *(_WORD *)&v212[4 * v214];\n          v216 = *(unsigned __int16 *)(v215 + 2 * v23 + 14);\n          v217 = *(unsigned __int16 *)&v212[4 * v214];\n          v31[847].m128i_i32[v214 + 2] = v216 - v217;\n          ++v214;\n        }\n        while ( v214 != 8 );\n        sub_474DA0(v217, 16LL);\n        v218 = (__int64)&v423;\n        v219 = v422;\n        v25 = (__m128i)*(unsigned __int64 *)&v432;\n        *(double *)v25.m128i_i64 = sub_47E7B0(&v423, v422, v424, v431, v220, v221, v432);\n        if ( v430 > *(double *)v25.m128i_i64 )\n        {\n          v433 = v27;\n          v222 = *(__int64 ***)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v436);\n          v223 = (__int64 **)*((_QWORD *)qword_4A00D8 + v436);\n          v224 = v222[1];\n          v397 = *v222;\n          v225 = **v222;\n          v406 = *v223;\n          v226 = **v223;\n          v378 = v224;\n          v227 = *v224;\n          v388 = v223[1];\n          v228 = *v388;\n          v229 = v222[2];\n          v230 = *v229;\n          v231 = v223[2];\n          v232 = *v231;\n          v233 = v222[3];\n          v234 = *v233;\n          v235 = v223[3];\n          v236 = *v235;\n          for ( j = 0LL; ; j += 8LL )\n          {\n            *(_DWORD *)(v226 + j) = *(_DWORD *)(v225 + j);\n            *(_DWORD *)(v228 + j) = *(_DWORD *)(v227 + j);\n            *(_DWORD *)(v232 + j) = *(_DWORD *)(v230 + j);\n            *(_DWORD *)(v236 + j) = *(_DWORD *)(v234 + j);\n            if ( j == 256 )\n              break;\n            *(_DWORD *)(v226 + j + 4) = *(_DWORD *)(v225 + j + 4);\n            *(_DWORD *)(v228 + j + 4) = *(_DWORD *)(v227 + j + 4);\n            *(_DWORD *)(v232 + j + 4) = *(_DWORD *)(v230 + j + 4);\n            *(_DWORD *)(v236 + j + 4) = *(_DWORD *)(v234 + j + 4);\n          }\n          v238 = v397[1];\n          v239 = v406[1];\n          v240 = v378[1];\n          v241 = v388[1];\n          v242 = v229[1];\n          v243 = v231[1];\n          v244 = v233[1];\n          v245 = v235[1];\n          v219 = 0LL;\n          v28 = v425;\n          v23 = v409;\n          v26 = v437;\n          v27 = v433;\n          while ( 1 )\n          {\n            *(_DWORD *)(v239 + v219) = *(_DWORD *)(v238 + v219);\n            *(_DWORD *)(v241 + v219) = *(_DWORD *)(v240 + v219);\n            *(_DWORD *)(v243 + v219) = *(_DWORD *)(v242 + v219);\n            v218 = *(unsigned int *)(v244 + v219);\n            *(_DWORD *)(v245 + v219) = v218;\n            if ( v219 == 256 )\n              break;\n            *(_DWORD *)(v239 + v219 + 4) = *(_DWORD *)(v238 + v219 + 4);\n            *(_DWORD *)(v241 + v219 + 4) = *(_DWORD *)(v240 + v219 + 4);\n            *(_DWORD *)(v243 + v219 + 4) = *(_DWORD *)(v242 + v219 + 4);\n            *(_DWORD *)(v245 + v219 + 4) = *(_DWORD *)(v244 + v219 + 4);\n            v219 += 8LL;\n          }\n          v246 = *(_QWORD *)(qword_4F9E30 + 6424);\n          v464 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420) + 2 * v414);\n          v465 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 8) + 2 * v414);\n          v466 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 16) + 2 * v414);\n          v467 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 24) + 2 * v414);\n          v468 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 32) + 2 * v414);\n          v469 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 40) + 2 * v414);\n          v470 = *(_OWORD *)(*(_QWORD *)(v246 + 8 * v420 + 48) + 2 * v414);\n          _mm_storeu_si128(\n            (__m128i *)&v471,\n            _mm_loadu_si128((const __m128i *)(*(_QWORD *)(v246 + 8 * v420 + 56) + 2 * v414)));\n          v413 = v423;\n          v430 = *(double *)v25.m128i_i64;\n          v415 = v424;\n        }\n        sub_474DB0(v218, v219);\n      }\n    }\n    else\n    {\n      v200 = v434;\n      v201 = v451;\n      v202 = *(_QWORD *)(v451 + 8 * v434);\n      _mm_store_si128(\n        (__m128i *)&v472,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v202 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)off_49F6D0 + 128 * v27 + 7352)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v473,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v202 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 460]), (__m128i)0LL)));\n      v203 = *(_QWORD *)(v201 + 8 * v200 + 8);\n      _mm_store_si128(\n        (__m128i *)&v474,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v203 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 460] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v475,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v203 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 461]), (__m128i)0LL)));\n      v204 = *(_QWORD *)(v201 + 8 * v200 + 16);\n      _mm_store_si128(\n        (__m128i *)&v476,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v204 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 461] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v477,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v204 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 462]), (__m128i)0LL)));\n      v205 = *(_QWORD *)(v201 + 8 * v200 + 24);\n      _mm_store_si128(\n        (__m128i *)&v478,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v205 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 462] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v479,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v205 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 463]), (__m128i)0LL)));\n      v206 = *(_QWORD *)(v201 + 8 * v200 + 32);\n      _mm_store_si128(\n        (__m128i *)&v480,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v206 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 463] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v481,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v206 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 464]), (__m128i)0LL)));\n      v207 = *(_QWORD *)(v201 + 8 * v200 + 40);\n      _mm_store_si128(\n        (__m128i *)&v482,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v207 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 464] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v483,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v207 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 465]), (__m128i)0LL)));\n      v208 = *(_QWORD *)(v201 + 8 * v200 + 48);\n      _mm_store_si128(\n        (__m128i *)&v484,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v208 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 465] + 8)), (__m128i)0LL)));\n      _mm_store_si128(\n        (__m128i *)&v485,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v208 + 2 * v23 + 8)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 466]), (__m128i)0LL)));\n      v209 = *(_QWORD *)(v201 + 8 * v200 + 56);\n      _mm_store_si128(\n        (__m128i *)&v486,\n        _mm_sub_epi32(\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v209 + 2 * v23)), (__m128i)0LL),\n          _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)((char *)&v31[8 * v27 + 466] + 8)), (__m128i)0LL)));\n      v25 = _mm_sub_epi32(\n              _mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)(v209 + 2 * v23 + 8)), (__m128i)0LL),\n              _mm_unpacklo_epi16(_mm_loadl_epi64(&v31[8 * v27 + 467]), (__m128i)0LL));\n      _mm_store_si128((__m128i *)&v487, v25);\n      v210 = v442;\n      if ( v27 == v431 )\n        v210 = 0;\n      v211 = v210 + (unsigned __int64)sub_445FC0((const __m128i *)&v472, v30[6]);\n      if ( v211 < *v452 )\n      {\n        *v452 = v211;\n        v415 = v29;\n      }\n    }\nLABEL_92:\n    ++v27;\n  }\n  while ( v27 != 9 );\n  v247 = (signed int *)off_49F6D0;\n  v248 = *((_QWORD *)off_49F6D0 + 14);\n  *(_DWORD *)(*(_QWORD *)(v248 + 8LL * v421) + 4LL * v439) = v415;\n  v249 = -1;\n  if ( (_DWORD)v431 != v415 )\n    v249 = v415 - (v415 >= (signed int)v431);\n  *(_DWORD *)(*((_QWORD *)v247 + 1771) + 632LL * v247[3] + 16LL * (_DWORD)v422 + 396) = v249;\n  v250 = v438;\n  *(_DWORD *)(*(_QWORD *)(v248 + 8LL * ((signed int)v438 + 4 * v247[34])) + 4LL * (v28 + 4 * v247[35])) = v415;\n  v251 = v250 | 1;\n  *(_DWORD *)(*(_QWORD *)(v248 + 8LL * (v251 + 4 * v247[34])) + 4LL * (v28 + 4 * v247[35])) = v415;\n  v252 = v28 | 1;\n  *(_DWORD *)(*(_QWORD *)(v248 + 8LL * (v250 + 4 * v247[34])) + 4LL * (v252 + 4 * v247[35])) = v415;\n  *(_DWORD *)(*(_QWORD *)(v248 + 8LL * (v251 + 4 * v247[34])) + 4LL * (v252 + 4 * v247[35])) = v415;\n  if ( *((_DWORD *)dest + 616) )\n  {\n    v253 = (__int64 **)*((_QWORD *)qword_4A00D8 + v436);\n    v407 = v247;\n    v254 = *((_QWORD *)v247 + 1767);\n    v389 = v254;\n    v255 = *(__int64 ***)(v254 + 8 * v436);\n    v256 = v253[1];\n    v398 = *v253;\n    v257 = **v253;\n    v258 = *v255;\n    v259 = **v255;\n    v379 = v256;\n    v260 = *v256;\n    v410 = v255[1];\n    v261 = *v410;\n    v262 = v253[2];\n    v263 = *v262;\n    v264 = v255[2];\n    v265 = *v264;\n    v266 = v253[3];\n    v267 = v255[3];\n    v268 = *v266;\n    v269 = *v267;\n    for ( k = 0LL; ; k += 8LL )\n    {\n      *(_DWORD *)(v259 + k) = *(_DWORD *)(v257 + k);\n      *(_DWORD *)(v261 + k) = *(_DWORD *)(v260 + k);\n      *(_DWORD *)(v265 + k) = *(_DWORD *)(v263 + k);\n      *(_DWORD *)(v269 + k) = *(_DWORD *)(v268 + k);\n      if ( k == 256 )\n        break;\n      *(_DWORD *)(v259 + k + 4) = *(_DWORD *)(v257 + k + 4);\n      *(_DWORD *)(v261 + k + 4) = *(_DWORD *)(v260 + k + 4);\n      *(_DWORD *)(v265 + k + 4) = *(_DWORD *)(v263 + k + 4);\n      *(_DWORD *)(v269 + k + 4) = *(_DWORD *)(v268 + k + 4);\n    }\n    v271 = v398[1];\n    v272 = v258[1];\n    v273 = v379[1];\n    v274 = v410[1];\n    v275 = v262[1];\n    v276 = v264[1];\n    v277 = v266[1];\n    v278 = v267[1];\n    v279 = 0LL;\n    v280 = v414;\n    while ( 1 )\n    {\n      *(_DWORD *)(v272 + v279) = *(_DWORD *)(v271 + v279);\n      *(_DWORD *)(v274 + v279) = *(_DWORD *)(v273 + v279);\n      *(_DWORD *)(v276 + v279) = *(_DWORD *)(v275 + v279);\n      *(_DWORD *)(v278 + v279) = *(_DWORD *)(v277 + v279);\n      if ( v279 == 256 )\n        break;\n      *(_DWORD *)(v272 + v279 + 4) = *(_DWORD *)(v271 + v279 + 4);\n      *(_DWORD *)(v274 + v279 + 4) = *(_DWORD *)(v273 + v279 + 4);\n      *(_DWORD *)(v276 + v279 + 4) = *(_DWORD *)(v275 + v279 + 4);\n      *(_DWORD *)(v278 + v279 + 4) = *(_DWORD *)(v277 + v279 + 4);\n      v279 += 8LL;\n    }\n    if ( v407[18181] )\n    {\n      v281 = *(_QWORD *)(v389 + 8 * v450);\n      v282 = *(_QWORD *)(v389 + 8 * v449);\n      v283 = -32LL;\n      v284 = dword_4F111C;\n      do\n      {\n        v285 = *(_QWORD *)(v281 + v283 + 32);\n        v286 = *(_DWORD **)v285;\n        *v286 = *((_DWORD *)v284 - 179);\n        v286[1] = *((_DWORD *)v284 - 178);\n        v286[2] = *((_DWORD *)v284 - 177);\n        v286[3] = *((_DWORD *)v284 - 176);\n        v286[4] = *((_DWORD *)v284 - 175);\n        v286[5] = *((_DWORD *)v284 - 174);\n        v286[6] = *((_DWORD *)v284 - 173);\n        v286[7] = *((_DWORD *)v284 - 172);\n        v286[8] = *((_DWORD *)v284 - 171);\n        v286[9] = *((_DWORD *)v284 - 170);\n        v286[10] = *((_DWORD *)v284 - 169);\n        v286[11] = *((_DWORD *)v284 - 168);\n        v286[12] = *((_DWORD *)v284 - 167);\n        v286[13] = *((_DWORD *)v284 - 166);\n        v286[14] = *((_DWORD *)v284 - 165);\n        v286[15] = *((_DWORD *)v284 - 164);\n        v286[16] = *((_DWORD *)v284 - 163);\n        v286[17] = *((_DWORD *)v284 - 162);\n        v287 = *(_DWORD **)(v285 + 8);\n        *v287 = *((_DWORD *)v284 - 161);\n        v287[1] = *((_DWORD *)v284 - 160);\n        v287[2] = *((_DWORD *)v284 - 159);\n        v287[3] = *((_DWORD *)v284 - 158);\n        v287[4] = *((_DWORD *)v284 - 157);\n        v287[5] = *((_DWORD *)v284 - 156);\n        v287[6] = *((_DWORD *)v284 - 155);\n        v287[7] = *((_DWORD *)v284 - 154);\n        v287[8] = *((_DWORD *)v284 - 153);\n        v287[9] = *((_DWORD *)v284 - 152);\n        v287[10] = *((_DWORD *)v284 - 151);\n        v287[11] = *((_DWORD *)v284 - 150);\n        v287[12] = *((_DWORD *)v284 - 149);\n        v287[13] = *((_DWORD *)v284 - 148);\n        v287[14] = *((_DWORD *)v284 - 147);\n        v287[15] = *((_DWORD *)v284 - 146);\n        v287[16] = *((_DWORD *)v284 - 145);\n        v287[17] = *((_DWORD *)v284 - 144);\n        v288 = *(_QWORD *)(v282 + v283 + 32);\n        v289 = *(_DWORD **)v288;\n        *v289 = *((_DWORD *)v284 - 35);\n        v289[1] = *((_DWORD *)v284 - 34);\n        v289[2] = *((_DWORD *)v284 - 33);\n        v289[3] = *((_DWORD *)v284 - 32);\n        v289[4] = *((_DWORD *)v284 - 31);\n        v289[5] = *((_DWORD *)v284 - 30);\n        v289[6] = *((_DWORD *)v284 - 29);\n        v289[7] = *((_DWORD *)v284 - 28);\n        v289[8] = *((_DWORD *)v284 - 27);\n        v289[9] = *((_DWORD *)v284 - 26);\n        v289[10] = *((_DWORD *)v284 - 25);\n        v289[11] = *((_DWORD *)v284 - 24);\n        v289[12] = *((_DWORD *)v284 - 23);\n        v289[13] = *((_DWORD *)v284 - 22);\n        v289[14] = *((_DWORD *)v284 - 21);\n        v289[15] = *((_DWORD *)v284 - 20);\n        v289[16] = *((_DWORD *)v284 - 19);\n        v289[17] = *((_DWORD *)v284 - 18);\n        v290 = *(_DWORD **)(v288 + 8);\n        *v290 = *((_DWORD *)v284 - 17);\n        v290[1] = *((_DWORD *)v284 - 16);\n        v290[2] = *((_DWORD *)v284 - 15);\n        v290[3] = *((_DWORD *)v284 - 14);\n        v290[4] = *((_DWORD *)v284 - 13);\n        v290[5] = *((_DWORD *)v284 - 12);\n        v290[6] = *((_DWORD *)v284 - 11);\n        v290[7] = *((_DWORD *)v284 - 10);\n        v290[8] = *((_DWORD *)v284 - 9);\n        v290[9] = *((_DWORD *)v284 - 8);\n        v290[10] = *((_DWORD *)v284 - 7);\n        v290[11] = *((_DWORD *)v284 - 6);\n        v290[12] = *((_DWORD *)v284 - 5);\n        v290[13] = *((_DWORD *)v284 - 4);\n        v290[14] = *((_DWORD *)v284 - 3);\n        v290[15] = *((_DWORD *)v284 - 2);\n        v290[16] = *((_DWORD *)v284 - 1);\n        LODWORD(v289) = *(_DWORD *)v284;\n        v284 = (int (*)[])((char *)v284 + 144);\n        v291 = v283 == -8;\n        v283 += 8LL;\n        v290[17] = (_DWORD)v289;\n      }\n      while ( !v291 );\n    }\n    v292 = qword_4F9E30;\n    v293 = *(_QWORD *)(qword_4F9E30 + 6424) + 8 * v420;\n    v294 = (signed __int64)&v407[32 * (signed __int64)v415 + 1841] + 2;\n    v295 = (__int64)&v407[v429 / 2 + 3206] + v426;\n    v296 = 0LL;\n    do\n    {\n      v297 = *(_QWORD *)(v293 + 4 * v296);\n      *(_WORD *)(v297 + 2 * v414) = *((_WORD *)&v464 + 4 * v296);\n      *(_WORD *)(v295 + v296 - 224) = *(_WORD *)(v294 + 8 * v296 - 14);\n      *(_WORD *)(v297 + 2 * v414 + 2) = *((_WORD *)&v464 + 4 * v296 + 1);\n      *(_WORD *)(v295 + v296 - 192) = *(_WORD *)(v294 + 8 * v296 - 12);\n      *(_WORD *)(v297 + 2 * v414 + 4) = *((_WORD *)&v464 + 4 * v296 + 2);\n      *(_WORD *)(v295 + v296 - 160) = *(_WORD *)(v294 + 8 * v296 - 10);\n      *(_WORD *)(v297 + 2 * v414 + 6) = *((_WORD *)&v464 + 4 * v296 + 3);\n      *(_WORD *)(v295 + v296 - 128) = *(_WORD *)(v294 + 8 * v296 - 8);\n      *(_WORD *)(v297 + 2 * v414 + 8) = *((_WORD *)&v464 + 4 * v296 + 4);\n      *(_WORD *)(v295 + v296 - 96) = *(_WORD *)(v294 + 8 * v296 - 6);\n      *(_WORD *)(v297 + 2 * v414 + 10) = *((_WORD *)&v464 + 4 * v296 + 5);\n      *(_WORD *)(v295 + v296 - 64) = *(_WORD *)(v294 + 8 * v296 - 4);\n      *(_WORD *)(v297 + 2 * v414 + 12) = *((_WORD *)&v464 + 4 * v296 + 6);\n      *(_WORD *)(v295 + v296 - 32) = *(_WORD *)(v294 + 8 * v296 - 2);\n      *(_WORD *)(v297 + 2 * v414 + 14) = *((_WORD *)&v464 + 4 * v296 + 7);\n      *(_WORD *)(v295 + v296) = *(_WORD *)(v294 + 8 * v296);\n      v296 += 2LL;\n    }\n    while ( v296 != 16 );\n    if ( v407[18181] )\n    {\n      v298 = *(__int64 **)(v292 + 6464);\n      v380 = *v298;\n      v399 = v298[1];\n      v299 = -64LL;\n      v300 = 0;\n      v301 = 0;\n      do\n      {\n        v302 = v301 & 4;\n        v303 = (signed int)(v420 + 2 * (v300 & 0x7FFFFFFE));\n        v304 = v302 + v280;\n        v305 = v302 + v280 + 1;\n        v306 = v302 + v280 + 2;\n        v307 = *(_QWORD *)(v380 + 8 * v303);\n        *(_WORD *)(v307 + 2 * v304) = v489[2 * v299];\n        v308 = v302 + (signed int)v414 + 3;\n        *(_WORD *)(v307 + 2 * v305) = v490[2 * v299];\n        *(_WORD *)(v307 + 2 * v306) = v491[2 * v299];\n        v309 = (signed int)(v420 + 2 * (v300 & 0x7FFFFFFE) + 1);\n        *(_WORD *)(v307 + 2 * v308) = v492[2 * v299];\n        v310 = *(_QWORD *)(v380 + 8 * v309);\n        *(_WORD *)(v310 + 2 * v304) = v493[2 * v299];\n        *(_WORD *)(v310 + 2 * v305) = v494[2 * v299];\n        *(_WORD *)(v310 + 2 * v306) = v495[2 * v299];\n        v311 = (signed int)(v420 + 2 * (v300 & 0x7FFFFFFE) + 2);\n        *(_WORD *)(v310 + 2 * v308) = v496[2 * v299];\n        v312 = *(_QWORD *)(v380 + 8 * v311);\n        *(_WORD *)(v312 + 2 * v304) = v497[2 * v299];\n        *(_WORD *)(v312 + 2 * v305) = v498[2 * v299];\n        *(_WORD *)(v312 + 2 * v306) = v499[2 * v299];\n        v313 = (signed int)(v420 + 2 * (v300 & 0x7FFFFFFE) + 3);\n        *(_WORD *)(v312 + 2 * v308) = v500[2 * v299];\n        v314 = *(_QWORD *)(v380 + 8 * v313);\n        *(_WORD *)(v314 + 2 * v304) = v501[2 * v299];\n        *(_WORD *)(v314 + 2 * v305) = v502[2 * v299];\n        *(_WORD *)(v314 + 2 * v306) = v503[2 * v299];\n        *(_WORD *)(v314 + 2 * v308) = v504[2 * v299];\n        v315 = *(_QWORD *)(v399 + 8 * v303);\n        *(_WORD *)(v315 + 2 * v304) = v505[2 * v299];\n        *(_WORD *)(v315 + 2 * v305) = v506[2 * v299];\n        *(_WORD *)(v315 + 2 * v306) = v507[2 * v299];\n        *(_WORD *)(v315 + 2 * v308) = v508[2 * v299];\n        v316 = *(_QWORD *)(v399 + 8 * v309);\n        v280 = v414;\n        *(_WORD *)(v316 + 2 * v304) = v509[2 * v299];\n        *(_WORD *)(v316 + 2 * v305) = v510[2 * v299];\n        *(_WORD *)(v316 + 2 * v306) = v511[2 * v299];\n        *(_WORD *)(v316 + 2 * v308) = v512[2 * v299];\n        v317 = *(_QWORD *)(v399 + 8 * v311);\n        *(_WORD *)(v317 + 2 * v304) = v513[2 * v299];\n        *(_WORD *)(v317 + 2 * v305) = v514[2 * v299];\n        *(_WORD *)(v317 + 2 * v306) = v515[2 * v299];\n        *(_WORD *)(v317 + 2 * v308) = v516[2 * v299];\n        v318 = *(_QWORD *)(v399 + 8 * v313);\n        *(_WORD *)(v318 + 2 * v304) = v517[2 * v299];\n        *(_WORD *)(v318 + 2 * v305) = v518[2 * v299];\n        *(_WORD *)(v318 + 2 * v306) = *((_WORD *)&retaddr + 2 * v299);\n        *(_WORD *)(v318 + 2 * v308) = *((_WORD *)&retaddr + 2 * v299 + 2);\n        v301 += 4;\n        ++v300;\n        v299 += 16LL;\n      }\n      while ( v299 );\n    }\n    goto LABEL_138;\n  }\n  if ( v247[18181] )\n  {\n    v381 = *(_QWORD *)qword_4F9E88;\n    v400 = *(_QWORD *)(qword_4F9E88 + 8);\n    v390 = qword_4F9EB0;\n    v319 = (signed __int64)v415 << 7;\n    v419 = v319;\n    v320 = (signed __int64)v247 + v319 + 7352;\n    v321 = (__int64)&v247[v429 / 2] + v426;\n    v424 = v435 + 2 * v429;\n    v322 = (__int64)v247 + v424 + 10552;\n    v323 = 0LL;\n    v411 = 2 * v23;\n    v324 = 0LL;\n    do\n    {\n      v325 = v411 + *(_QWORD *)(v381 + 8 * (v324 + v434));\n      v326 = v411 + *(_QWORD *)(v390 + 8 * (v324 + v434));\n      v327 = v411 + *(_QWORD *)(v400 + 8 * (v324 + v434));\n      v328 = 0LL;\n      v329 = 0LL;\n      do\n      {\n        *(_WORD *)(v321 + v328 + 12600) = *(_WORD *)(v320 + v329);\n        v330 = *(unsigned __int16 *)(v325 + v329) - *(unsigned __int16 *)(v322 + v328 - 2048);\n        v331 = *(unsigned __int16 *)(v326 + v329) - *(unsigned __int16 *)(v320 + v329);\n        v332 = *(unsigned __int16 *)(v327 + v329) - *(unsigned __int16 *)(v322 + v328) - v330;\n        xmmword_4F46D0[v328 / 2 + v323] = v332;\n        v333 = v330 + (v332 >> 1);\n        v334 = v331 - v333;\n        xmmword_4F36D0[v328 / 2 + v323] = v334;\n        *(_DWORD *)((char *)&xmmword_4F42D0[v328 / 8] + v323 * 4) = v333 + (v334 >> 1);\n        v329 += 2LL;\n        v328 += 32LL;\n      }\n      while ( v328 != 256 );\n      ++v324;\n      v320 += 16LL;\n      ++v323;\n      v321 += 2LL;\n      v322 += 2LL;\n    }\n    while ( v324 != 8 );\n    v335 = 4611686018427387896LL;\n    do\n    {\n      v247[v335 + 3286] = dword_4F42F0[v335];\n      v247[v335 + 3302] = dword_4F4330[v335];\n      v247[v335 + 3318] = dword_4F4370[v335];\n      v247[v335 + 3334] = dword_4F43B0[v335];\n      v247[v335 + 3350] = dword_4F43F0[v335];\n      v247[v335 + 3366] = dword_4F4430[v335];\n      v247[v335 + 3382] = dword_4F4470[v335];\n      v247[v335 + 3398] = dword_4F44B0[v335];\n      ++v335;\n    }\n    while ( v335 * 4 );\n    v413 = sub_47EAF0(v422, &v448, 1, v25);\n    v336 = 4611686018427387896LL;\n    v337 = off_49F6D0;\n    do\n    {\n      dword_4F26F0[v336] = v337[v336 + 3286];\n      dword_4F2730[v336] = v337[v336 + 3302];\n      dword_4F2770[v336] = v337[v336 + 3318];\n      dword_4F27B0[v336] = v337[v336 + 3334];\n      dword_4F27F0[v336] = v337[v336 + 3350];\n      dword_4F2830[v336] = v337[v336 + 3366];\n      dword_4F2870[v336] = v337[v336 + 3382];\n      dword_4F28B0[v336] = v337[v336 + 3398];\n      ++v336;\n    }\n    while ( v336 * 4 );\n    v338 = 0;\n    do\n    {\n      v339 = v338 & 1;\n      v340 = v338 >> 1;\n      v341 = (unsigned __int64)(unsigned int)(4 * v339) << 6;\n      v337[3278] = *(_DWORD *)((char *)&xmmword_4F46D0[v340 * 4] + v341);\n      v337[3294] = *(_DWORD *)((char *)&xmmword_4F4710[v340 * 4] + v341);\n      v337[3310] = *(_DWORD *)((char *)&xmmword_4F4750[v340 * 4] + v341);\n      v337[3326] = *(_DWORD *)((char *)&xmmword_4F4790[v340 * 4] + v341);\n      v337[3279] = xmmword_4F46D0[16 * (unsigned __int64)(unsigned int)(4 * v339) + 1 + v340 * 4];\n      v337[3295] = xmmword_4F4710[16 * (unsigned __int64)(unsigned int)(4 * v339) + 1 + v340 * 4];\n      v337[3311] = xmmword_4F4750[16 * (unsigned __int64)(unsigned int)(4 * v339) + 1 + v340 * 4];\n      v337[3327] = xmmword_4F4790[16 * (unsigned __int64)(unsigned int)(4 * v339) + 1 + v340 * 4];\n      v337[3280] = xmmword_4F46D0[16 * (unsigned __int64)(unsigned int)(4 * v339) + 2 + v340 * 4];\n      v337[3296] = xmmword_4F4710[16 * (unsigned __int64)(unsigned int)(4 * v339) + 2 + v340 * 4];\n      v337[3312] = xmmword_4F4750[16 * (unsigned __int64)(unsigned int)(4 * v339) + 2 + v340 * 4];\n      v337[3328] = xmmword_4F4790[16 * (unsigned __int64)(unsigned int)(4 * v339) + 2 + v340 * 4];\n      v337[3281] = xmmword_4F46D0[16 * (unsigned __int64)(unsigned int)(4 * v339) + 3 + v340 * 4];\n      v337[3297] = xmmword_4F4710[16 * (unsigned __int64)(unsigned int)(4 * v339) + 3 + v340 * 4];\n      v337[3313] = xmmword_4F4750[16 * (unsigned __int64)(unsigned int)(4 * v339) + 3 + v340 * 4];\n      v337[3329] = xmmword_4F4790[16 * (unsigned __int64)(unsigned int)(4 * v339) + 3 + v340 * 4];\n      v342 = sub_407360(0, v428, v338);\n      v343 = (signed int)(v438 | v339);\n      v344 = (signed int)(v425 + (v338 >> 1));\n      v343 *= 16LL;\n      *(int *)((char *)&dword_4F9110[v344] + v343) = v342;\n      *(int *)((char *)&dword_4F9210[v344] + v343) = *(int *)((char *)&dword_4F9290[v344] + v343);\n      v345 = off_49F6D0;\n      *(_DWORD *)((char *)&xmmword_4F32D0[v340 * 4] + v341) = *((_DWORD *)off_49F6D0 + 3278);\n      v345[3278] = *(_DWORD *)((char *)&xmmword_4F36D0[v340 * 4] + v341);\n      *(_DWORD *)((char *)&xmmword_4F3310[v340 * 4] + v341) = v345[3294];\n      v345[3294] = *(_DWORD *)((char *)&xmmword_4F3710[v340 * 4] + v341);\n      *(_DWORD *)((char *)&xmmword_4F3350[v340 * 4] + v341) = v345[3310];\n      v345[3310] = *(_DWORD *)((char *)&xmmword_4F3750[v340 * 4] + v341);\n      *(_DWORD *)((char *)&xmmword_4F3390[v340 * 4] + v341) = v345[3326];\n      v345[3326] = *(_DWORD *)((char *)&xmmword_4F3790[v340 * 4] + v341);\n      *(_DWORD *)(v341 + 1 * v340 + 5190356) = v345[3279];\n      v345[3279] = *(_DWORD *)(v341 + 1 * v340 + 5191380);\n      *(_DWORD *)(v341 + 1 * v340 + 5190420) = v345[3295];\n      v345[3295] = *(_DWORD *)(v341 + 1 * v340 + 5191444);\n      *(_DWORD *)(v341 + 1 * v340 + 5190484) = v345[3311];\n      v345[3311] = *(_DWORD *)(v341 + 1 * v340 + 5191508);\n      *(_DWORD *)(v341 + 1 * v340 + 5190548) = v345[3327];\n      v345[3327] = *(_DWORD *)(v341 + 1 * v340 + 5191572);\n      *(_DWORD *)(v341 + 1 * v340 + 5190360) = v345[3280];\n      v345[3280] = *(_DWORD *)(v341 + 1 * v340 + 5191384);\n      *(_DWORD *)(v341 + 1 * v340 + 5190424) = v345[3296];\n      v345[3296] = *(_DWORD *)(v341 + 1 * v340 + 5191448);\n      *(_DWORD *)(v341 + 1 * v340 + 5190488) = v345[3312];\n      v345[3312] = *(_DWORD *)(v341 + 1 * v340 + 5191512);\n      *(_DWORD *)(v341 + 1 * v340 + 5190552) = v345[3328];\n      v345[3328] = *(_DWORD *)(v341 + 1 * v340 + 5191576);\n      *(_DWORD *)(v341 + 1 * v340 + 5190364) = v345[3281];\n      v345[3281] = *(_DWORD *)(v341 + 1 * v340 + 5191388);\n      *(_DWORD *)(v341 + 1 * v340 + 5190428) = v345[3297];\n      v345[3297] = *(_DWORD *)(v341 + 1 * v340 + 5191452);\n      *(_DWORD *)(v341 + 1 * v340 + 5190492) = v345[3313];\n      v345[3313] = *(_DWORD *)(v341 + 1 * v340 + 5191516);\n      *(_DWORD *)(v341 + 1 * v340 + 5190556) = v345[3329];\n      v345[3329] = *(_DWORD *)(v341 + 1 * v340 + 5191580);\n      *(int *)((char *)&dword_4F9150[v344] + v343) = sub_407360(1, v427, v338);\n      *(int *)((char *)&dword_4F9250[v344] + v343) = *(int *)((char *)&dword_4F92D0[v344] + v343);\n      v337 = off_49F6D0;\n      *(_DWORD *)((char *)&xmmword_4F22D0[v340] + v341) = *((_DWORD *)off_49F6D0 + 3278);\n      *(_DWORD *)((char *)&xmmword_4F2310[v340] + v341) = v337[3294];\n      *(_DWORD *)((char *)&xmmword_4F2350[v340] + v341) = v337[3310];\n      *(_DWORD *)((char *)&xmmword_4F2390[v340] + v341) = v337[3326];\n      *(_DWORD *)(v341 + 1 * v340 + 5186260) = v337[3279];\n      *(_DWORD *)(v341 + 1 * v340 + 5186324) = v337[3295];\n      *(_DWORD *)(v341 + 1 * v340 + 5186388) = v337[3311];\n      *(_DWORD *)(v341 + 1 * v340 + 5186452) = v337[3327];\n      *(_DWORD *)(v341 + 1 * v340 + 5186264) = v337[3280];\n      *(_DWORD *)(v341 + 1 * v340 + 5186328) = v337[3296];\n      *(_DWORD *)(v341 + 1 * v340 + 5186392) = v337[3312];\n      *(_DWORD *)(v341 + 1 * v340 + 5186456) = v337[3328];\n      *(_DWORD *)(v341 + 1 * v340 + 5186268) = v337[3281];\n      *(_DWORD *)(v341 + 1 * v340 + 5186332) = v337[3297];\n      *(_DWORD *)(v341 + 1 * v340 + 5186396) = v337[3313];\n      ++v338;\n      *(_DWORD *)(v341 + 1 * v340 + 5186460) = v337[3329];\n    }\n    while ( v338 != 4 );\n    v346 = v337[18171];\n    v347 = v337[18172];\n    v412 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v348 = *(__int64 **)(qword_4F9E30 + 6464);\n    v391 = *v348;\n    v408 = v348[1];\n    v382 = (signed __int64)v337 + v419 + 7352;\n    v349 = (__int64)v337 + v424 + 10552;\n    v350 = 0LL;\n    v351 = 0LL;\n    do\n    {\n      v401 = v351;\n      v352 = 2 * v414 + *(_QWORD *)(v391 + 8 * (v351 + v420));\n      v353 = 2 * v414 + *(_QWORD *)(v412 + 8 * (v351 + v420));\n      v354 = *(_QWORD *)(v408 + 8 * (v351 + v420)) + 2 * v414;\n      v355 = 0LL;\n      v356 = 0LL;\n      do\n      {\n        v357 = xmmword_4F32D0[v356 / 2 + v350];\n        v358 = xmmword_4F26D0[v356 / 2 + v350]\n             - (*(_DWORD *)((char *)&xmmword_4F22D0[v356 / 8] + v350 * 4) >> 1)\n             - (xmmword_4F32D0[v356 / 2 + v350] >> 1);\n        v359 = v358 + *(unsigned __int16 *)(v349 + v356 - 2048);\n        if ( v359 < 0 )\n          v359 = 0;\n        v360 = *(_DWORD *)((char *)&xmmword_4F22D0[v356 / 8] + v350 * 4)\n             + xmmword_4F26D0[v356 / 2 + v350]\n             - (*(_DWORD *)((char *)&xmmword_4F22D0[v356 / 8] + v350 * 4) >> 1);\n        v361 = v347;\n        if ( v347 >= v359 )\n          v361 = v359;\n        *(_WORD *)(v352 + v355) = v361;\n        v362 = *(unsigned __int16 *)(v382 + v355) + v360;\n        if ( v362 < 0 )\n          v362 = 0;\n        v363 = v357 + v358;\n        v364 = v346;\n        if ( v346 >= v362 )\n          v364 = v362;\n        *(_WORD *)(v353 + v355) = v364;\n        v365 = *(unsigned __int16 *)(v349 + v356) + v363;\n        if ( v365 < 0 )\n          v365 = 0;\n        v366 = v347;\n        if ( v347 >= v365 )\n          v366 = v365;\n        *(_WORD *)(v354 + v355) = v366;\n        v356 += 32LL;\n        v355 += 2LL;\n      }\n      while ( v355 != 16 );\n      v351 = v401 + 1;\n      ++v350;\n      v382 += 16LL;\n      v349 += 2LL;\n    }\n    while ( v401 != 7 );\nLABEL_138:\n    result = v413;\n  }\n  else\n  {\n    v368 = (signed __int64)&v247[32 * (signed __int64)v415 + 1841] + 2;\n    v369 = (__int64)&v247[v429 / 2 + 3206] + v426;\n    v370 = 0LL;\n    do\n    {\n      v371 = *(_QWORD *)(v26 + 2 * v370);\n      *(_WORD *)(v369 + v370 * 2 - 224) = *(_WORD *)(v368 + 4 * v370 - 14);\n      v247[v370 + 3278] = *(unsigned __int16 *)(v371 + 2 * v23) - *(unsigned __int16 *)(v368 + 4 * v370 - 14);\n      *(_WORD *)(v369 + v370 * 2 - 192) = *(_WORD *)(v368 + 4 * v370 - 12);\n      v247[v370 + 3294] = *(unsigned __int16 *)(v371 + 2 * v23 + 2) - *(unsigned __int16 *)(v368 + 4 * v370 - 12);\n      *(_WORD *)(v369 + v370 * 2 - 160) = *(_WORD *)(v368 + 4 * v370 - 10);\n      v247[v370 + 3310] = *(unsigned __int16 *)(v371 + 2 * v23 + 4) - *(unsigned __int16 *)(v368 + 4 * v370 - 10);\n      *(_WORD *)(v369 + v370 * 2 - 128) = *(_WORD *)(v368 + 4 * v370 - 8);\n      v247[v370 + 3326] = *(unsigned __int16 *)(v371 + 2 * v23 + 6) - *(unsigned __int16 *)(v368 + 4 * v370 - 8);\n      *(_WORD *)(v369 + v370 * 2 - 96) = *(_WORD *)(v368 + 4 * v370 - 6);\n      v247[v370 + 3342] = *(unsigned __int16 *)(v371 + 2 * v23 + 8) - *(unsigned __int16 *)(v368 + 4 * v370 - 6);\n      *(_WORD *)(v369 + v370 * 2 - 64) = *(_WORD *)(v368 + 4 * v370 - 4);\n      v247[v370 + 3358] = *(unsigned __int16 *)(v371 + 2 * v23 + 10) - *(unsigned __int16 *)(v368 + 4 * v370 - 4);\n      *(_WORD *)(v369 + v370 * 2 - 32) = *(_WORD *)(v368 + 4 * v370 - 2);\n      v247[v370 + 3374] = *(unsigned __int16 *)(v371 + 2 * v23 + 12) - *(unsigned __int16 *)(v368 + 4 * v370 - 2);\n      *(_WORD *)(v369 + v370 * 2) = *(_WORD *)(v368 + 4 * v370);\n      v247[v370 + 3390] = *(unsigned __int16 *)(v371 + 2 * v23 + 14) - *(unsigned __int16 *)(v368 + 4 * v370);\n      ++v370;\n    }\n    while ( v370 != 8 );\n    result = sub_47EAF0(v422, &v448, 1, v25);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x479e30L", 
            "funcEndAddr": "0x47cd43L", 
            "funcName": "sub_479E30"
        }, 
        {
            "decompiledFuncCode": "_WORD *__fastcall sub_47CD50(char a1, char a2, __int64 a3, __int64 a4, _DWORD *a5)\n{\n  int v5; // er13\n  int v6; // ebx\n  signed int v7; // ebp\n  int *v8; // r15\n  bool v9; // al\n  int v10; // edi\n  int v11; // esi\n  int v12; // edx\n  int v13; // ebp\n  int v14; // esi\n  int v15; // edi\n  int v16; // esi\n  int v17; // ebx\n  int v18; // ebp\n  int v19; // edx\n  int v20; // edi\n  int v21; // ebx\n  int v22; // esi\n  int v23; // er8\n  int v24; // er14\n  int v25; // edi\n  __int64 v26; // r9\n  int v27; // esi\n  bool v28; // r15\n  bool v29; // r13\n  __int64 v30; // rax\n  unsigned int v31; // ecx\n  unsigned int v32; // edi\n  unsigned int v33; // edx\n  unsigned int v34; // eax\n  signed __int64 v35; // rbp\n  __int64 v36; // rax\n  unsigned int v37; // ecx\n  unsigned int v38; // edx\n  int v39; // edi\n  signed __int64 v40; // rbp\n  unsigned int v41; // ecx\n  unsigned int v42; // eax\n  unsigned int v43; // ecx\n  _WORD *v44; // rax\n  int v45; // eax\n  unsigned int v46; // ecx\n  int v47; // eax\n  _WORD *v48; // rcx\n  signed __int64 v49; // rcx\n  _WORD *result; // rax\n  __int16 v51; // dx\n  unsigned int v52; // edx\n  unsigned int v53; // edi\n  __int64 v54; // rsi\n  unsigned int v55; // ecx\n  __int64 v56; // rcx\n  unsigned int v57; // er15\n  __int64 v58; // rdx\n  unsigned int v59; // er9\n  __int64 v60; // rsi\n  int v61; // edi\n  unsigned int v62; // er14\n  __int64 v63; // rdx\n  int v64; // edi\n  unsigned int v65; // ebx\n  __int64 v66; // rsi\n  unsigned int v67; // er8\n  __int64 v68; // rdi\n  int v69; // er12\n  int v70; // er10\n  unsigned int v71; // er11\n  int v72; // ebp\n  unsigned int v73; // er13\n  int v74; // er13\n  unsigned int v75; // er13\n  int v76; // er13\n  int v77; // ebp\n  unsigned int v78; // er13\n  int v79; // ebp\n  int v80; // er13\n  int v81; // ebp\n  int v82; // er13\n  int v83; // ebp\n  int v84; // er13\n  int v85; // ebp\n  int v86; // er13\n  int v87; // ebp\n  __int64 v88; // rsi\n  unsigned int v89; // edx\n  __int64 v90; // rdi\n  unsigned int v91; // ecx\n  __int64 v92; // rdx\n  unsigned int v93; // ecx\n  __int64 v94; // rsi\n  unsigned int v95; // ecx\n  __int64 v96; // rdi\n  unsigned int v97; // ecx\n  __int64 v98; // rdx\n  unsigned int v99; // ecx\n  __int64 v100; // rsi\n  unsigned int v101; // er9\n  __int64 v102; // rbp\n  unsigned int v103; // er12\n  unsigned int v104; // ebx\n  unsigned int v105; // er15\n  unsigned int v106; // er14\n  unsigned int v107; // er13\n  unsigned int v108; // er10\n  int v109; // er8\n  int v110; // er11\n  int v111; // ecx\n  unsigned int v112; // ecx\n  unsigned int v113; // ecx\n  unsigned int v114; // ecx\n  unsigned int v115; // ecx\n  unsigned int v116; // ecx\n  unsigned int v117; // ecx\n  unsigned int v118; // ecx\n  unsigned int v119; // ecx\n  unsigned int v120; // er8\n  unsigned int v121; // er9\n  char *v122; // rdx\n  int v123; // er10\n  unsigned int v124; // eax\n  int v125; // edi\n  unsigned int v126; // eax\n  int v127; // ebp\n  unsigned int v128; // eax\n  int v129; // ebx\n  unsigned int v130; // eax\n  unsigned int v131; // ecx\n  unsigned int v132; // eax\n  unsigned int v133; // eax\n  unsigned int v134; // esi\n  unsigned int v135; // esi\n  unsigned int v136; // eax\n  unsigned int v137; // eax\n  unsigned int v138; // eax\n  unsigned int v139; // eax\n  unsigned int v140; // eax\n  int v141; // [rsp+Ch] [rbp-23Ch]\n  int v142; // [rsp+Ch] [rbp-23Ch]\n  unsigned int v143; // [rsp+10h] [rbp-238h]\n  unsigned int v144; // [rsp+14h] [rbp-234h]\n  unsigned int v145; // [rsp+18h] [rbp-230h]\n  unsigned int v146; // [rsp+1Ch] [rbp-22Ch]\n  unsigned int v147; // [rsp+20h] [rbp-228h]\n  __int128 v148; // [rsp+24h] [rbp-224h]\n  unsigned int v149; // [rsp+34h] [rbp-214h]\n  unsigned int v150; // [rsp+38h] [rbp-210h]\n  int v151; // [rsp+3Ch] [rbp-20Ch]\n  int v152; // [rsp+40h] [rbp-208h]\n  __int128 v153; // [rsp+44h] [rbp-204h]\n  unsigned int v154; // [rsp+54h] [rbp-1F4h]\n  unsigned int v155; // [rsp+58h] [rbp-1F0h]\n  __int128 v156; // [rsp+5Ch] [rbp-1ECh]\n  unsigned int v157; // [rsp+6Ch] [rbp-1DCh]\n  unsigned int v158; // [rsp+70h] [rbp-1D8h]\n  int v159; // [rsp+74h] [rbp-1D4h]\n  __int64 v160; // [rsp+78h] [rbp-1D0h]\n  __int64 v161; // [rsp+80h] [rbp-1C8h]\n  _DWORD *v162; // [rsp+88h] [rbp-1C0h]\n  __int64 v163; // [rsp+90h] [rbp-1B8h]\n  __int64 v164; // [rsp+98h] [rbp-1B0h]\n  __int64 v165; // [rsp+A0h] [rbp-1A8h]\n  __int64 v166; // [rsp+A8h] [rbp-1A0h]\n  __int64 v167; // [rsp+B0h] [rbp-198h]\n  __int64 v168; // [rsp+B8h] [rbp-190h]\n  __int64 v169; // [rsp+C0h] [rbp-188h]\n  __int64 v170; // [rsp+C8h] [rbp-180h]\n  __int64 v171; // [rsp+D0h] [rbp-178h]\n  __int64 v172; // [rsp+D8h] [rbp-170h]\n  unsigned int v173; // [rsp+E4h] [rbp-164h]\n  unsigned int v174; // [rsp+E8h] [rbp-160h]\n  unsigned int v175; // [rsp+ECh] [rbp-15Ch]\n  __int64 v176; // [rsp+F0h] [rbp-158h]\n  __int64 v177; // [rsp+F8h] [rbp-150h]\n  __int64 v178; // [rsp+100h] [rbp-148h]\n  __int64 v179; // [rsp+108h] [rbp-140h]\n  _BOOL4 v180; // [rsp+110h] [rbp-138h]\n  int v181; // [rsp+114h] [rbp-134h]\n  int v182; // [rsp+120h] [rbp-128h]\n  int v183; // [rsp+124h] [rbp-124h]\n  int v184; // [rsp+128h] [rbp-120h]\n  int v185; // [rsp+12Ch] [rbp-11Ch]\n  int v186; // [rsp+138h] [rbp-110h]\n  int v187; // [rsp+13Ch] [rbp-10Ch]\n  int v188; // [rsp+140h] [rbp-108h]\n  int v189; // [rsp+144h] [rbp-104h]\n  int v190; // [rsp+150h] [rbp-F8h]\n  int v191; // [rsp+154h] [rbp-F4h]\n  int v192; // [rsp+158h] [rbp-F0h]\n  int v193; // [rsp+15Ch] [rbp-ECh]\n  int v194; // [rsp+168h] [rbp-E0h]\n  int v195; // [rsp+16Ch] [rbp-DCh]\n  int v196; // [rsp+170h] [rbp-D8h]\n  int v197; // [rsp+174h] [rbp-D4h]\n  int v198; // [rsp+180h] [rbp-C8h]\n  int v199; // [rsp+184h] [rbp-C4h]\n  int v200; // [rsp+188h] [rbp-C0h]\n  int v201; // [rsp+18Ch] [rbp-BCh]\n  int v202; // [rsp+198h] [rbp-B0h]\n  int v203; // [rsp+19Ch] [rbp-ACh]\n  int v204; // [rsp+1A0h] [rbp-A8h]\n  int v205; // [rsp+1A4h] [rbp-A4h]\n  int v206; // [rsp+1B0h] [rbp-98h]\n  int v207; // [rsp+1B4h] [rbp-94h]\n  int v208; // [rsp+1B8h] [rbp-90h]\n  int v209; // [rsp+1BCh] [rbp-8Ch]\n  int v210; // [rsp+1C8h] [rbp-80h]\n  int v211; // [rsp+1CCh] [rbp-7Ch]\n  int v212; // [rsp+1D0h] [rbp-78h]\n  int v213; // [rsp+1D4h] [rbp-74h]\n  int v214; // [rsp+1E0h] [rbp-68h]\n  int v215; // [rsp+1E4h] [rbp-64h]\n  int v216; // [rsp+1E8h] [rbp-60h]\n  int v217; // [rsp+1ECh] [rbp-5Ch]\n  int v218; // [rsp+1F8h] [rbp-50h]\n  int v219; // [rsp+1FCh] [rbp-4Ch]\n  int v220; // [rsp+200h] [rbp-48h]\n  int v221; // [rsp+204h] [rbp-44h]\n  int v222; // [rsp+210h] [rbp-38h]\n  int v223; // [rsp+214h] [rbp-34h]\n\n  v162 = a5;\n  v161 = a4;\n  v163 = a3;\n  v160 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v5 = a1 & 0xF;\n  v6 = a2 & 0xF;\n  v7 = *((_DWORD *)off_49F6D0 + 3);\n  sub_437200(*((_DWORD *)off_49F6D0 + 3), v5 - 1, v6, 1, &v188);\n  sub_437200(v7, v5 - 1, v6 + 1, 1, &v192);\n  sub_437200(v7, v5 - 1, v6 + 2, 1, &v196);\n  sub_437200(v7, v5 - 1, v6 + 3, 1, &v200);\n  sub_437200(v7, v5 - 1, v6 + 4, 1, &v204);\n  sub_437200(v7, v5 - 1, v6 + 5, 1, &v208);\n  sub_437200(v7, v5 - 1, v6 + 6, 1, &v212);\n  sub_437200(v7, v5 - 1, v6 + 7, 1, &v216);\n  sub_437200(v7, v5, v6 - 1, 1, &v184);\n  sub_437200(v7, v5 + 8, v6 - 1, 1, &v180);\n  v8 = &v220;\n  sub_437200(v7, v5 - 1, v6 - 1, 1, &v220);\n  if ( v180 )\n    v9 = (v5 ^ 8 | v6 ^ 8) != 0;\n  else\n    v9 = 0;\n  v180 = v9;\n  if ( !*((_DWORD *)dest + 54) )\n  {\n    v142 = v188;\n    v24 = v184;\n    v23 = v9;\n    v26 = v160;\n    goto LABEL_28;\n  }\n  v10 = 0;\n  LOBYTE(v11) = 0;\n  if ( v188 )\n    v11 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v189);\n  if ( v192 )\n    v10 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v193);\n  v12 = 0;\n  v13 = 0;\n  if ( v196 )\n    v13 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v197);\n  v14 = v11 & 1;\n  if ( v200 )\n    v12 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v201);\n  v15 = v14 & v10;\n  v16 = 0;\n  v17 = 0;\n  if ( v204 )\n    v17 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v205);\n  v18 = v15 & v13;\n  if ( v208 )\n    v16 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v209);\n  v19 = v18 & v12;\n  v141 = 0;\n  v20 = 0;\n  if ( v212 )\n    v20 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v213);\n  v21 = v19 & v17;\n  if ( v216 )\n    v141 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v217);\n  v22 = v21 & v16;\n  v23 = 0;\n  v24 = 0;\n  if ( v184 )\n    v24 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v185);\n  v25 = v22 & v20;\n  if ( v9 )\n    v23 = *(_DWORD *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v181);\n  v142 = v25 & v141;\n  v26 = v160;\n  if ( v220 )\n  {\n    v8 = (int *)(*((_QWORD *)off_49F6D0 + 8973) + 4LL * v221);\nLABEL_28:\n    v27 = *v8;\n    goto LABEL_30;\n  }\n  v27 = 0;\nLABEL_30:\n  v28 = v24 != 0 && v142 != 0;\n  v29 = v28 && v27 != 0;\n  *(_DWORD *)v163 = v142;\n  *(_DWORD *)v161 = v24;\n  *v162 = v29;\n  if ( v24 )\n  {\n    v30 = *(_QWORD *)(v26 + 8LL * v187);\n    v31 = *(unsigned __int16 *)(v30 + 2LL * v186);\n    v32 = *(unsigned __int16 *)(v30 + 2LL * v186 + 2);\n    v33 = *(unsigned __int16 *)(v30 + 2LL * v186 + 4);\n    v147 = *(unsigned __int16 *)(v30 + 2LL * v186 + 6);\n    LODWORD(v148) = *(unsigned __int16 *)(v30 + 2LL * v186 + 8);\n    DWORD1(v148) = *(unsigned __int16 *)(v30 + 2LL * v186 + 10);\n    DWORD2(v148) = *(unsigned __int16 *)(v30 + 2LL * v186 + 12);\n    v34 = *(unsigned __int16 *)(v30 + 2LL * v186 + 14);\n    v35 = 8LL;\n  }\n  else\n  {\n    v34 = *((_DWORD *)off_49F6D0 + 18170);\n    _mm_storeu_si128((__m128i *)&v148, _mm_shuffle_epi32(_mm_cvtsi32_si128(v34), 0));\n    v35 = 4LL;\n    v33 = v34;\n    v32 = v34;\n    v31 = v34;\n  }\n  *(&v143 + v35) = v34;\n  v146 = v33;\n  v145 = v32;\n  v144 = v31;\n  if ( v23 )\n  {\n    v36 = *(_QWORD *)(v26 + 8LL * v183);\n    v37 = *(unsigned __int16 *)(v36 + 2LL * v182);\n    v38 = *(unsigned __int16 *)(v36 + 2LL * v182 + 2);\n    v39 = *(unsigned __int16 *)(v36 + 2LL * v182 + 4);\n    v152 = *(unsigned __int16 *)(v36 + 2LL * v182 + 6);\n    LODWORD(v153) = *(unsigned __int16 *)(v36 + 2LL * v182 + 8);\n    DWORD1(v153) = *(unsigned __int16 *)(v36 + 2LL * v182 + 10);\n    DWORD2(v153) = *(unsigned __int16 *)(v36 + 2LL * v182 + 12);\n    v34 = *(unsigned __int16 *)(v36 + 2LL * v182 + 14);\n    v40 = 16LL;\n  }\n  else\n  {\n    _mm_storeu_si128((__m128i *)&v153, _mm_shuffle_epi32(_mm_cvtsi32_si128(v34), 0));\n    v40 = 12LL;\n    v39 = v34;\n    v38 = v34;\n    v37 = v34;\n  }\n  *(&v143 + v40) = v34;\n  v151 = v39;\n  v150 = v38;\n  v149 = v37;\n  if ( v142 )\n  {\n    v41 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v191) + 2LL * v190);\n    v42 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v195) + 2LL * v194);\n    LODWORD(v156) = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v199) + 2LL * v198);\n    DWORD1(v156) = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v203) + 2LL * v202);\n    DWORD2(v156) = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v207) + 2LL * v206);\n    HIDWORD(v156) = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v211) + 2LL * v210);\n    v157 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v215) + 2LL * v214);\n    v158 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v219) + 2LL * v218);\n  }\n  else\n  {\n    v42 = *((_DWORD *)off_49F6D0 + 18170);\n    v158 = v42;\n    v157 = v42;\n    _mm_storeu_si128((__m128i *)&v156, _mm_shuffle_epi32(_mm_cvtsi32_si128(v42), 0));\n    v41 = v42;\n  }\n  v155 = v42;\n  v154 = v41;\n  if ( v27 )\n  {\n    v43 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 8LL * v223) + 2LL * v222);\n    v44 = off_49F6D0;\n  }\n  else\n  {\n    v44 = off_49F6D0;\n    v43 = *((_DWORD *)off_49F6D0 + 18170);\n  }\n  v143 = v43;\n  v44[3676] = -1;\n  v44[3740] = -1;\n  v44[3804] = -1;\n  v44[3868] = -1;\n  v44[3932] = -1;\n  v44[3996] = -1;\n  v44[4060] = -1;\n  v44[4124] = -1;\n  v44[4188] = -1;\n  sub_47F750((int *)&v143, v27, v24, v142);\n  if ( v28 )\n  {\n    v45 = (signed int)(v158\n                     + v157\n                     + HIDWORD(v156)\n                     + DWORD2(v156)\n                     + DWORD1(v156)\n                     + v156\n                     + v155\n                     + v154\n                     + HIDWORD(v148)\n                     + DWORD2(v148)\n                     + DWORD1(v148)\n                     + v148\n                     + v147\n                     + v146\n                     + v145\n                     + v144\n                     + 8) >> 4;\n  }\n  else\n  {\n    if ( v24 || !v142 )\n    {\n      if ( !v24 || v142 )\n      {\n        v45 = *((_DWORD *)off_49F6D0 + 18170);\n        goto LABEL_52;\n      }\n      v46 = HIDWORD(v148);\n      v47 = DWORD2(v148) + DWORD1(v148) + v148 + v147 + v146 + v145 + v144;\n    }\n    else\n    {\n      v46 = v158;\n      v47 = v157 + HIDWORD(v156) + DWORD2(v156) + DWORD1(v156) + v156 + v155 + v154;\n    }\n    v45 = (signed int)(v46 + v47 + 4) >> 3;\n  }\nLABEL_52:\n  v48 = off_49F6D0;\n  *((_WORD *)off_49F6D0 + 3804) = v45;\n  v48[3812] = v45;\n  v48[3820] = v45;\n  v48[3828] = v45;\n  v48[3836] = v45;\n  v48[3844] = v45;\n  v48[3852] = v45;\n  v48[3860] = v45;\n  v48[3805] = v45;\n  v48[3813] = v45;\n  v48[3821] = v45;\n  v48[3829] = v45;\n  v48[3837] = v45;\n  v48[3845] = v45;\n  v48[3853] = v45;\n  v48[3861] = v45;\n  v48[3806] = v45;\n  v48[3814] = v45;\n  v48[3822] = v45;\n  v48[3830] = v45;\n  v48[3838] = v45;\n  v48[3846] = v45;\n  v48[3854] = v45;\n  v48[3862] = v45;\n  v48[3807] = v45;\n  v48[3815] = v45;\n  v48[3823] = v45;\n  v48[3831] = v45;\n  v48[3839] = v45;\n  v48[3847] = v45;\n  v48[3855] = v45;\n  v48[3863] = v45;\n  v48[3808] = v45;\n  v48[3816] = v45;\n  v48[3824] = v45;\n  v48[3832] = v45;\n  v48[3840] = v45;\n  v48[3848] = v45;\n  v48[3856] = v45;\n  v48[3864] = v45;\n  v48[3809] = v45;\n  v48[3817] = v45;\n  v48[3825] = v45;\n  v48[3833] = v45;\n  v48[3841] = v45;\n  v48[3849] = v45;\n  v48[3857] = v45;\n  v48[3865] = v45;\n  v48[3810] = v45;\n  v48[3818] = v45;\n  v48[3826] = v45;\n  v48[3834] = v45;\n  v48[3842] = v45;\n  v48[3850] = v45;\n  v48[3858] = v45;\n  v48[3866] = v45;\n  v48[3811] = v45;\n  v48[3819] = v45;\n  v48[3827] = v45;\n  v48[3835] = v45;\n  v48[3843] = v45;\n  v48[3851] = v45;\n  v48[3859] = v45;\n  v48[3867] = v45;\n  v49 = 9223372036854775800LL;\n  result = off_49F6D0;\n  do\n  {\n    v51 = *((_WORD *)&v149 + v49 * 2);\n    result[v49 + 3740] = v51;\n    result[v49 + 3732] = v51;\n    result[v49 + 3724] = v51;\n    result[v49 + 3716] = v51;\n    result[v49 + 3708] = v51;\n    result[v49 + 3700] = v51;\n    result[v49 + 3692] = v51;\n    result[v49 + 3684] = v51;\n    _mm_storeu_si128(\n      (__m128i *)&result[2 * v49 + 3804],\n      _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128(*(int *)((char *)&v159 + 1 * v49)), 224), 0));\n    ++v49;\n  }\n  while ( v49 * 2 );\n  if ( v24 )\n  {\n    if ( v142 )\n      goto LABEL_56;\n  }\n  else\n  {\n    result[3676] = -1;\n    if ( v142 )\n    {\nLABEL_56:\n      if ( !v24 )\n        goto LABEL_62;\n      goto LABEL_60;\n    }\n  }\n  result[3740] = -1;\n  if ( !v24 )\n    goto LABEL_62;\nLABEL_60:\n  v52 = v146;\n  v172 = v146;\n  v161 = v144;\n  v53 = v145;\n  v163 = v145;\n  LODWORD(v160) = (v146 + v144 + 2 + 2 * v145) >> 2;\n  result[3868] = v160;\n  v54 = v147;\n  v55 = (v147 + v53 + 2 + 2 * v52) >> 2;\n  LODWORD(v162) = v55;\n  result[3876] = v55;\n  result[3869] = v55;\n  v56 = (unsigned int)v148;\n  v171 = v54;\n  v57 = ((unsigned int)v148 + v52 + 2 * (_DWORD)v54 + 2) >> 2;\n  result[3884] = v57;\n  result[3877] = v57;\n  result[3870] = v57;\n  v58 = DWORD1(v148);\n  v170 = v56;\n  v59 = (unsigned int)(DWORD1(v148) + v54 + 2 * v56 + 2) >> 2;\n  result[3892] = v59;\n  result[3885] = v59;\n  result[3878] = v59;\n  result[3871] = v59;\n  v60 = DWORD2(v148);\n  v61 = v58;\n  v169 = v58;\n  v62 = (unsigned int)(DWORD2(v148) + v56 + 2 * v58 + 2) >> 2;\n  result[3900] = v62;\n  result[3893] = v62;\n  result[3886] = v62;\n  result[3879] = v62;\n  result[3872] = v62;\n  v63 = HIDWORD(v148);\n  LODWORD(v56) = v61 + 2 * v60;\n  v64 = v60;\n  v167 = v60;\n  v65 = (unsigned int)(HIDWORD(v148) + v56 + 2) >> 2;\n  result[3908] = v65;\n  result[3901] = v65;\n  result[3894] = v65;\n  result[3887] = v65;\n  result[3880] = v65;\n  result[3873] = v65;\n  v66 = v149;\n  v166 = v63;\n  v67 = (v149 + v64 + 2 * (_DWORD)v63 + 2) >> 2;\n  result[3916] = v67;\n  result[3909] = v67;\n  result[3902] = v67;\n  result[3895] = v67;\n  result[3888] = v67;\n  result[3881] = v67;\n  result[3874] = v67;\n  v68 = v150;\n  v165 = v66;\n  LODWORD(v63) = (v150 + (_DWORD)v63 + 2 * (_DWORD)v66 + 2) >> 2;\n  result[3924] = v63;\n  result[3917] = v63;\n  result[3910] = v63;\n  result[3903] = v63;\n  result[3896] = v63;\n  result[3889] = v63;\n  result[3882] = v63;\n  result[3875] = v63;\n  v69 = v151;\n  v164 = v68;\n  LODWORD(v66) = (unsigned int)(v151 + v66 + 2 * v68 + 2) >> 2;\n  result[3925] = v66;\n  result[3918] = v66;\n  result[3911] = v66;\n  result[3904] = v66;\n  result[3897] = v66;\n  result[3890] = v66;\n  result[3883] = v66;\n  v70 = v152;\n  LODWORD(v68) = (unsigned int)(v152 + v68 + 2 * v69 + 2) >> 2;\n  result[3926] = v68;\n  result[3919] = v68;\n  result[3912] = v68;\n  result[3905] = v68;\n  result[3898] = v68;\n  result[3891] = v68;\n  LODWORD(v56) = v153;\n  v71 = (unsigned int)(v153 + v69 + 2 * v70 + 2) >> 2;\n  result[3927] = v71;\n  result[3920] = v71;\n  result[3913] = v71;\n  result[3906] = v71;\n  result[3899] = v71;\n  v72 = DWORD1(v153);\n  LOBYTE(v168) = v29;\n  v73 = (unsigned int)(DWORD1(v153) + v70 + 2 * v56 + 2) >> 2;\n  result[3928] = v73;\n  result[3921] = v73;\n  result[3914] = v73;\n  result[3907] = v73;\n  v74 = v56 + 2 * v72;\n  LODWORD(v56) = DWORD2(v153);\n  v75 = (unsigned int)(DWORD2(v153) + v74 + 2) >> 2;\n  result[3929] = v75;\n  result[3922] = v75;\n  result[3915] = v75;\n  v76 = v72 + 2 * v56;\n  v77 = HIDWORD(v153);\n  v78 = (unsigned int)(HIDWORD(v153) + v76 + 2) >> 2;\n  result[3930] = v78;\n  result[3923] = v78;\n  result[3931] = (unsigned int)(v56 + 3 * v77 + 2) >> 2;\n  v79 = v163;\n  result[4124] = (unsigned int)(v161 + v163 + 1) >> 1;\n  v80 = v172;\n  LODWORD(v56) = (unsigned int)(v172 + v79 + 1) >> 1;\n  result[4140] = v56;\n  result[4125] = v56;\n  v81 = v171;\n  LODWORD(v56) = (unsigned int)(v80 + v171 + 1) >> 1;\n  result[4156] = v56;\n  result[4141] = v56;\n  result[4126] = v56;\n  v82 = v170;\n  LODWORD(v56) = (unsigned int)(v81 + v170 + 1) >> 1;\n  result[4172] = v56;\n  result[4157] = v56;\n  result[4142] = v56;\n  result[4127] = v56;\n  v83 = v169;\n  LODWORD(v56) = (unsigned int)(v82 + v169 + 1) >> 1;\n  result[4173] = v56;\n  result[4158] = v56;\n  result[4143] = v56;\n  result[4128] = v56;\n  v84 = v167;\n  LODWORD(v56) = (unsigned int)(v83 + v167 + 1) >> 1;\n  result[4174] = v56;\n  result[4159] = v56;\n  result[4144] = v56;\n  result[4129] = v56;\n  v85 = v166;\n  LODWORD(v56) = (unsigned int)(v84 + v166 + 1) >> 1;\n  result[4175] = v56;\n  result[4160] = v56;\n  result[4145] = v56;\n  result[4130] = v56;\n  v86 = v165;\n  LODWORD(v56) = (unsigned int)(v85 + v165 + 1) >> 1;\n  result[4176] = v56;\n  result[4161] = v56;\n  result[4146] = v56;\n  result[4131] = v56;\n  v87 = v164;\n  LODWORD(v56) = (unsigned int)(v86 + v164 + 1) >> 1;\n  result[4177] = v56;\n  result[4162] = v56;\n  result[4147] = v56;\n  LODWORD(v56) = (unsigned int)(v69 + v87 + 1) >> 1;\n  result[4178] = v56;\n  result[4163] = v56;\n  result[4179] = (unsigned int)(v69 + v70 + 1) >> 1;\n  result[4132] = v160;\n  LOWORD(v56) = (_WORD)v162;\n  result[4148] = (_WORD)v162;\n  result[4133] = v56;\n  result[4164] = v57;\n  result[4149] = v57;\n  result[4134] = v57;\n  result[4180] = v59;\n  result[4165] = v59;\n  result[4150] = v59;\n  result[4135] = v59;\n  result[4181] = v62;\n  result[4166] = v62;\n  result[4151] = v62;\n  result[4136] = v62;\n  result[4182] = v65;\n  result[4167] = v65;\n  result[4152] = v65;\n  result[4137] = v65;\n  result[4183] = v67;\n  result[4168] = v67;\n  result[4153] = v67;\n  result[4138] = v67;\n  result[4184] = v63;\n  result[4169] = v63;\n  result[4154] = v63;\n  result[4139] = v63;\n  result[4185] = v66;\n  result[4170] = v66;\n  result[4155] = v66;\n  result[4186] = v68;\n  result[4171] = v68;\n  result[4187] = v71;\n  if ( (_BYTE)v168 )\n  {\n    v172 = v158;\n    v88 = HIDWORD(v156);\n    v89 = v157;\n    v171 = v157;\n    LODWORD(v163) = (HIDWORD(v156) + v158 + 2 + 2 * v157) >> 2;\n    result = off_49F6D0;\n    *((_WORD *)off_49F6D0 + 3988) = v163;\n    v90 = DWORD2(v156);\n    v170 = v88;\n    v91 = (DWORD2(v156) + v89 + 2 + 2 * (_DWORD)v88) >> 2;\n    LODWORD(v167) = v91;\n    result[3989] = v91;\n    result[3980] = v91;\n    v92 = DWORD1(v156);\n    v169 = v90;\n    v93 = (unsigned int)(DWORD1(v156) + v88 + 2 * v90 + 2) >> 2;\n    LODWORD(v166) = v93;\n    result[3990] = v93;\n    result[3981] = v93;\n    result[3972] = v93;\n    v94 = (unsigned int)v156;\n    v168 = v92;\n    v95 = (unsigned int)(v156 + v90 + 2 * v92 + 2) >> 2;\n    LODWORD(v164) = v95;\n    result[3991] = v95;\n    result[3982] = v95;\n    result[3973] = v95;\n    result[3964] = v95;\n    v96 = v155;\n    v165 = v94;\n    v97 = (v155 + (_DWORD)v92 + 2 * (_DWORD)v94 + 2) >> 2;\n    v175 = v97;\n    result[3992] = v97;\n    result[3983] = v97;\n    result[3974] = v97;\n    result[3965] = v97;\n    result[3956] = v97;\n    v98 = v154;\n    v179 = v96;\n    v99 = (v154 + (_DWORD)v94 + 2 * (_DWORD)v96 + 2) >> 2;\n    v173 = v99;\n    result[3993] = v99;\n    result[3984] = v99;\n    result[3975] = v99;\n    result[3966] = v99;\n    result[3957] = v99;\n    result[3948] = v99;\n    v100 = v143;\n    v178 = v98;\n    v101 = (v143 + (_DWORD)v96 + 2 * (_DWORD)v98 + 2) >> 2;\n    result[3994] = v101;\n    result[3985] = v101;\n    result[3976] = v101;\n    result[3967] = v101;\n    result[3958] = v101;\n    result[3949] = v101;\n    result[3940] = v101;\n    v102 = v144;\n    v160 = v100;\n    v103 = ((_DWORD)v98 + 2 * (_DWORD)v100 + v144 + 2) >> 2;\n    result[3995] = v103;\n    result[3986] = v103;\n    result[3977] = v103;\n    result[3968] = v103;\n    result[3959] = v103;\n    result[3950] = v103;\n    result[3941] = v103;\n    result[3932] = v103;\n    LODWORD(v98) = v145;\n    v177 = v102;\n    v104 = (v145 + (_DWORD)v100 + 2 * (_DWORD)v102 + 2) >> 2;\n    result[3987] = v104;\n    result[3978] = v104;\n    result[3969] = v104;\n    result[3960] = v104;\n    result[3951] = v104;\n    result[3942] = v104;\n    result[3933] = v104;\n    v105 = v146;\n    v106 = (v146 + (_DWORD)v102 + 2 * (_DWORD)v98 + 2) >> 2;\n    result[3979] = v106;\n    result[3970] = v106;\n    result[3961] = v106;\n    result[3952] = v106;\n    result[3943] = v106;\n    result[3934] = v106;\n    LODWORD(v96) = v147;\n    v107 = (v147 + (_DWORD)v98 + 2 * v105 + 2) >> 2;\n    result[3971] = v107;\n    result[3962] = v107;\n    result[3953] = v107;\n    result[3944] = v107;\n    result[3935] = v107;\n    LODWORD(v100) = v148;\n    v108 = ((unsigned int)v148 + v105 + 2 * (_DWORD)v96 + 2) >> 2;\n    result[3963] = v108;\n    result[3954] = v108;\n    result[3945] = v108;\n    result[3936] = v108;\n    v109 = DWORD1(v148);\n    LODWORD(v102) = (unsigned int)(DWORD1(v148) + v96 + 2 * v100 + 2) >> 2;\n    LODWORD(v162) = v102;\n    result[3955] = v102;\n    result[3946] = v102;\n    result[3937] = v102;\n    v110 = DWORD2(v148);\n    LODWORD(v102) = (unsigned int)(DWORD2(v148) + v100 + 2 * v109 + 2) >> 2;\n    LODWORD(v161) = v102;\n    result[3947] = v102;\n    result[3938] = v102;\n    v176 = HIDWORD(v148);\n    v174 = (unsigned int)(HIDWORD(v148) + v109 + 2 * v110 + 2) >> 2;\n    result[3939] = v174;\n    v111 = v177;\n    LODWORD(v102) = (unsigned int)(v177 + v160 + 1) >> 1;\n    result[4047] = v102;\n    result[4030] = v102;\n    result[4013] = v102;\n    result[3996] = v102;\n    LODWORD(v102) = (unsigned int)(v111 + v98 + 1) >> 1;\n    result[4048] = v102;\n    result[4031] = v102;\n    result[4014] = v102;\n    result[3997] = v102;\n    LODWORD(v102) = ((unsigned int)v98 + v105 + 1) >> 1;\n    result[4049] = v102;\n    result[4032] = v102;\n    result[4015] = v102;\n    result[3998] = v102;\n    LODWORD(v102) = (v105 + (unsigned int)v96 + 1) >> 1;\n    result[4050] = v102;\n    result[4033] = v102;\n    result[4016] = v102;\n    result[3999] = v102;\n    LODWORD(v96) = (unsigned int)(v96 + v100 + 1) >> 1;\n    result[4051] = v96;\n    result[4034] = v96;\n    result[4017] = v96;\n    result[4000] = v96;\n    LODWORD(v100) = (unsigned int)(v100 + v109 + 1) >> 1;\n    result[4035] = v100;\n    result[4018] = v100;\n    result[4001] = v100;\n    v112 = (unsigned int)(v109 + v110 + 1) >> 1;\n    result[4019] = v112;\n    result[4002] = v112;\n    result[4003] = (unsigned int)(v110 + v176 + 1) >> 1;\n    result[4055] = v103;\n    result[4038] = v103;\n    result[4021] = v103;\n    result[4004] = v103;\n    result[4056] = v104;\n    result[4039] = v104;\n    result[4022] = v104;\n    result[4005] = v104;\n    result[4057] = v106;\n    result[4040] = v106;\n    result[4023] = v106;\n    result[4006] = v106;\n    result[4058] = v107;\n    result[4041] = v107;\n    result[4024] = v107;\n    result[4007] = v107;\n    result[4059] = v108;\n    result[4042] = v108;\n    result[4025] = v108;\n    result[4008] = v108;\n    LOWORD(v112) = (_WORD)v162;\n    result[4043] = (_WORD)v162;\n    result[4026] = v112;\n    result[4009] = v112;\n    LOWORD(v112) = v161;\n    result[4027] = v161;\n    result[4010] = v112;\n    result[4011] = v174;\n    result[4046] = v101;\n    result[4029] = v101;\n    result[4012] = v101;\n    LOWORD(v112) = v173;\n    result[4054] = v173;\n    result[4037] = v112;\n    result[4020] = v112;\n    LOWORD(v105) = v112;\n    LOWORD(v112) = v175;\n    result[4045] = v175;\n    result[4028] = v112;\n    LOWORD(v110) = v112;\n    LOWORD(v112) = v164;\n    result[4053] = v164;\n    result[4036] = v112;\n    LOWORD(v109) = v112;\n    LOWORD(v96) = v166;\n    result[4044] = v166;\n    LOWORD(v98) = v167;\n    result[4052] = v167;\n    LODWORD(v102) = v178;\n    v113 = (unsigned int)(v160 + v178 + 1) >> 1;\n    result[4090] = v113;\n    result[4080] = v113;\n    result[4070] = v113;\n    result[4060] = v113;\n    LODWORD(v100) = v179;\n    v114 = (unsigned int)(v179 + v102 + 1) >> 1;\n    result[4098] = v114;\n    result[4088] = v114;\n    result[4078] = v114;\n    result[4068] = v114;\n    LODWORD(v102) = v165;\n    v115 = (unsigned int)(v100 + v165 + 1) >> 1;\n    result[4106] = v115;\n    result[4096] = v115;\n    result[4086] = v115;\n    result[4076] = v115;\n    LODWORD(v100) = v168;\n    v116 = (unsigned int)(v168 + v102 + 1) >> 1;\n    result[4114] = v116;\n    result[4104] = v116;\n    result[4094] = v116;\n    result[4084] = v116;\n    LODWORD(v102) = v169;\n    v117 = (unsigned int)(v100 + v169 + 1) >> 1;\n    result[4122] = v117;\n    result[4112] = v117;\n    result[4102] = v117;\n    result[4092] = v117;\n    LODWORD(v100) = v170;\n    v118 = (unsigned int)(v170 + v102 + 1) >> 1;\n    result[4120] = v118;\n    result[4110] = v118;\n    result[4100] = v118;\n    LODWORD(v102) = v171;\n    v119 = (unsigned int)(v100 + v171 + 1) >> 1;\n    result[4118] = v119;\n    result[4108] = v119;\n    result[4116] = (unsigned int)(v172 + v102 + 1) >> 1;\n    result[4091] = v103;\n    result[4081] = v103;\n    result[4071] = v103;\n    result[4061] = v103;\n    result[4099] = v101;\n    result[4089] = v101;\n    result[4079] = v101;\n    result[4069] = v101;\n    result[4107] = v105;\n    result[4097] = v105;\n    result[4087] = v105;\n    result[4077] = v105;\n    result[4115] = v110;\n    result[4105] = v110;\n    result[4095] = v110;\n    result[4085] = v110;\n    result[4123] = v109;\n    result[4113] = v109;\n    result[4103] = v109;\n    result[4093] = v109;\n    result[4121] = v96;\n    result[4111] = v96;\n    result[4101] = v96;\n    result[4119] = v98;\n    result[4109] = v98;\n    result[4117] = v163;\n    result[4082] = v104;\n    result[4072] = v104;\n    result[4062] = v104;\n    result[4083] = v106;\n    result[4073] = v106;\n    result[4063] = v106;\n    result[4074] = v107;\n    result[4064] = v107;\n    result[4075] = v108;\n    result[4065] = v108;\n    result[4066] = (_WORD)v162;\n    result[4067] = v161;\n  }\nLABEL_62:\n  if ( v142 )\n  {\n    v120 = v154;\n    v121 = v155;\n    v122 = (char *)off_49F6D0;\n    *((_WORD *)off_49F6D0 + 4188) = (v155 + v154 + 1) >> 1;\n    v123 = v156;\n    v124 = (v121 + (unsigned int)v156 + 1) >> 1;\n    *((_WORD *)v122 + 4190) = v124;\n    *((_WORD *)v122 + 4196) = v124;\n    v125 = DWORD1(v156);\n    v126 = (unsigned int)(v123 + DWORD1(v156) + 1) >> 1;\n    *((_WORD *)v122 + 4192) = v126;\n    *((_WORD *)v122 + 4198) = v126;\n    *((_WORD *)v122 + 4204) = v126;\n    v127 = DWORD2(v156);\n    v128 = (unsigned int)(v125 + DWORD2(v156) + 1) >> 1;\n    *((_WORD *)v122 + 4194) = v128;\n    *((_WORD *)v122 + 4200) = v128;\n    *((_WORD *)v122 + 4206) = v128;\n    *((_WORD *)v122 + 4212) = v128;\n    v129 = HIDWORD(v156);\n    v130 = (unsigned int)(HIDWORD(v156) + v127 + 1) >> 1;\n    *((_WORD *)v122 + 4202) = v130;\n    *((_WORD *)v122 + 4208) = v130;\n    *((_WORD *)v122 + 4214) = v130;\n    *((_WORD *)v122 + 4220) = v130;\n    v131 = v157;\n    v132 = (v129 + v157 + 1) >> 1;\n    *((_WORD *)v122 + 4210) = v132;\n    *((_WORD *)v122 + 4216) = v132;\n    *((_WORD *)v122 + 4222) = v132;\n    *((_WORD *)v122 + 4228) = v132;\n    v133 = v158;\n    v134 = (v131 + v158 + 1) >> 1;\n    *((_WORD *)v122 + 4218) = v134;\n    *((_WORD *)v122 + 4224) = v134;\n    *((_WORD *)v122 + 4230) = v134;\n    *((_WORD *)v122 + 4236) = v134;\n    *((_WORD *)v122 + 4251) = v133;\n    *((_WORD *)v122 + 4250) = v133;\n    _mm_storeu_si128((__m128i *)(v122 + 8484), _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128(v133), 224), 0));\n    *((_WORD *)v122 + 4241) = v133;\n    *((_WORD *)v122 + 4240) = v133;\n    *((_WORD *)v122 + 4239) = v133;\n    *((_WORD *)v122 + 4238) = v133;\n    *((_WORD *)v122 + 4235) = v133;\n    *((_WORD *)v122 + 4234) = v133;\n    *((_WORD *)v122 + 4233) = v133;\n    *((_WORD *)v122 + 4232) = v133;\n    *((_WORD *)v122 + 4227) = v133;\n    *((_WORD *)v122 + 4226) = v133;\n    v135 = (v131 + 3 * v133 + 2) >> 2;\n    *((_WORD *)v122 + 4219) = v135;\n    *((_WORD *)v122 + 4225) = v135;\n    *((_WORD *)v122 + 4231) = v135;\n    *((_WORD *)v122 + 4237) = v135;\n    v136 = (v133 + v129 + 2 * v131 + 2) >> 2;\n    *((_WORD *)v122 + 4211) = v136;\n    *((_WORD *)v122 + 4217) = v136;\n    *((_WORD *)v122 + 4223) = v136;\n    *((_WORD *)v122 + 4229) = v136;\n    v137 = (v131 + v127 + 2 * v129 + 2) >> 2;\n    *((_WORD *)v122 + 4203) = v137;\n    *((_WORD *)v122 + 4209) = v137;\n    *((_WORD *)v122 + 4215) = v137;\n    *((_WORD *)v122 + 4221) = v137;\n    v138 = (unsigned int)(v129 + v125 + 2 * v127 + 2) >> 2;\n    *((_WORD *)v122 + 4195) = v138;\n    *((_WORD *)v122 + 4201) = v138;\n    *((_WORD *)v122 + 4207) = v138;\n    *((_WORD *)v122 + 4213) = v138;\n    v139 = (unsigned int)(v127 + v123 + 2 * v125 + 2) >> 2;\n    *((_WORD *)v122 + 4193) = v139;\n    *((_WORD *)v122 + 4199) = v139;\n    *((_WORD *)v122 + 4205) = v139;\n    v140 = (v125 + v121 + 2 + 2 * v123) >> 2;\n    *((_WORD *)v122 + 4191) = v140;\n    *((_WORD *)v122 + 4197) = v140;\n    result = (_WORD *)((v123 + v120 + 2 + 2 * v121) >> 2);\n    *((_WORD *)v122 + 4189) = (_WORD)result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x47cd50L", 
            "funcEndAddr": "0x47e7a9L", 
            "funcName": "sub_47CD50"
        }, 
        {
            "decompiledFuncCode": "double __fastcall sub_47E7B0(_DWORD *a1, unsigned int a2, int a3, int a4, __int64 a5, __int64 a6, __m128 a7)\n{\n  unsigned int v7; // er15\n  signed __int64 v8; // r14\n  __int64 v9; // r13\n  __int64 v10; // r12\n  int v11; // ebx\n  int v12; // er15\n  int v13; // eax\n  __int64 v14; // r10\n  _DWORD *v15; // r8\n  __int64 v16; // rcx\n  __int64 v17; // r13\n  signed __int64 v18; // r9\n  __int64 v19; // rsi\n  __int64 v20; // rdi\n  __int64 v21; // rbx\n  int v22; // eax\n  char *v23; // rbp\n  __int64 v24; // rcx\n  signed int *v25; // rdx\n  char *v26; // rdi\n  __int64 v27; // rax\n  signed __int64 v28; // rdx\n  signed int **v29; // rsi\n  int v30; // ebx\n  signed int v31; // eax\n  int v32; // ebp\n  int v33; // ebx\n  int v34; // ebp\n  double result; // xmm0_8\n  int v36; // [rsp+0h] [rbp-78h]\n  int v37; // [rsp+4h] [rbp-74h]\n  __int64 v38; // [rsp+8h] [rbp-70h]\n  double v39; // [rsp+10h] [rbp-68h]\n  _DWORD *v40; // [rsp+18h] [rbp-60h]\n  __int64 v41; // [rsp+20h] [rbp-58h]\n  __int64 v42; // [rsp+28h] [rbp-50h]\n  __int64 v43; // [rsp+30h] [rbp-48h]\n  signed int *v44; // [rsp+38h] [rbp-40h]\n  char *v45; // [rsp+40h] [rbp-38h]\n\n  v37 = a4;\n  v39 = *(double *)a7.m128_u64;\n  v36 = a3;\n  v40 = a1;\n  v7 = 4 * (a2 + (a2 >> 31)) & 0xFFFFFFF8;\n  v8 = *((signed int *)off_49F6D0 + 38) + 8LL * ((signed int)a2 % 2);\n  v9 = qword_4F9EB0;\n  v10 = *(_QWORD *)(qword_4F9E30 + 6424);\n  v43 = *((_QWORD *)off_49F6D0 + 1770);\n  v44 = (signed int *)(*((_QWORD *)off_49F6D0 + 1771) + 632LL * *((signed int *)off_49F6D0 + 3));\n  v41 = *v44;\n  v42 = qword_4F9C40[*((signed int *)dest + 591)];\n  v11 = v7 + *((_DWORD *)off_49F6D0 + 43);\n  v45 = (char *)off_49F6D0;\n  v12 = *((_DWORD *)off_49F6D0 + 39) + v7;\n  v38 = a2;\n  v13 = sub_47EAF0(a2, (_DWORD *)&v38 + 1, 1, (__m128i)a7);\n  v14 = v9;\n  *v40 = v13;\n  v15 = off_49F6D0;\n  v17 = 0LL;\n  v18 = 8LL;\n  do\n  {\n    v19 = *(_QWORD *)(v14 + 8LL * v11);\n    v20 = *(_QWORD *)(v10 + 8LL * v12);\n    v16 = *((_QWORD *)off_49F6D0 + 8972);\n    v17 += *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8) - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8)))\n         + (signed __int64)*(signed int *)(v16\n                                         + 4\n                                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 2)\n                                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 2)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 4)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 4)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 6)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 6)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 8)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 8)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 10)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 10)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 12)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 12)))\n         + *(signed int *)(v16\n                         + 4\n                         * (*(unsigned __int16 *)(v19 + 2 * v8 + 14)\n                          - (unsigned __int64)*(unsigned __int16 *)(v20 + 2 * v8 + 14)));\n    ++v11;\n    ++v12;\n    --v18;\n  }\n  while ( v18 );\n  v21 = 48 * v41;\n  v22 = -1;\n  if ( v37 != v36 )\n    v22 = v36 - (v36 >= v37);\n  v23 = v45;\n  *(_DWORD *)&v45[v21 + 14180] = v22;\n  *(_DWORD *)&v23[v21 + 14200] = v38;\n  *(_DWORD *)&v23[v21 + 14176] = 4;\n  v24 = *((unsigned int *)dest + 589);\n  if ( (_DWORD)v24 )\n    *(_QWORD *)&v23[v21 + 14216] = sub_40B6C0;\n  v25 = (signed int *)(v42 + 16);\n  v26 = &v23[v21 + 14176];\n  v27 = *(_QWORD *)(v43 + 24);\n  if ( v15[6] == 1 )\n    v25 = (signed int *)(v42 + 72);\n  v28 = 120LL * *v25;\n  v29 = (signed int **)(v27 + v28);\n  if ( (_DWORD)v24 )\n    (*(void (__fastcall **)(char *, signed int **, signed __int64, __int64, _DWORD *, _QWORD))(v27 + v28 + 112))(\n      v26,\n      v29,\n      v28,\n      v24,\n      v15,\n      0LL);\n  else\n    sub_480310(v26, v29);\n  v30 = *(_DWORD *)&v23[v21 + 14188];\n  ++*v44;\n  if ( *((_DWORD *)dest + 589) )\n  {\n    v31 = v30 + (unsigned __int64)sub_434E60(v38, 1);\n  }\n  else\n  {\n    v32 = v30 + (unsigned __int64)sub_4344D0(0, v38, 0, 0);\n    v33 = v32 + (unsigned __int64)sub_4344D0(0, v38, 1, 0);\n    v34 = v33 + (unsigned __int64)sub_4344D0(0, v38, 2, 0);\n    v31 = v34 + (unsigned __int64)sub_4344D0(0, v38, 3, 0);\n  }\n  result = (double)v31;\n  if ( !*((_DWORD *)off_49F6D0 + 18181) )\n    result = result * v39 + (double)(signed int)v17;\n  return result;\n}\n", 
            "funcStartAddr": "0x47e7b0L", 
            "funcEndAddr": "0x47eae9L", 
            "funcName": "sub_47E7B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47EAF0(unsigned int a1, _DWORD *a2, int a3, __m128i a4)\n{\n  _DWORD *v4; // r11\n  __int64 v5; // rax\n  __int64 *v6; // rax\n  bool v7; // si\n  unsigned __int64 v8; // rdx\n  int v9; // ebx\n  int v10; // edx\n  unsigned __int64 v11; // rax\n  int v12; // edx\n  int v13; // ebx\n  int v14; // esi\n  int v15; // er13\n  int v16; // er15\n  int v17; // edi\n  int v18; // ecx\n  int v19; // er12\n  int v20; // er9\n  int v21; // er14\n  int v22; // er10\n  int v23; // er8\n  int v24; // ebx\n  int v25; // esi\n  int v26; // er15\n  int v27; // ecx\n  int v28; // ebp\n  int v29; // edi\n  int v30; // ebx\n  int v31; // esi\n  signed __int64 v32; // rax\n  unsigned __int64 v33; // rsi\n  signed __int64 v34; // ST58_8\n  int v35; // er8\n  int v36; // ecx\n  int v37; // ebx\n  int v38; // er14\n  int v39; // eax\n  int v40; // edx\n  int v41; // er9\n  int v42; // er13\n  int v43; // er10\n  int v44; // ebp\n  int v45; // er15\n  int v46; // er12\n  int v47; // ecx\n  int v48; // ebx\n  int v49; // eax\n  int v50; // er9\n  int v51; // er14\n  int v52; // er8\n  int v53; // ecx\n  int v54; // ebx\n  __int64 v55; // rdx\n  __int128 *v56; // rcx\n  int *v57; // rcx\n  signed int v58; // er8\n  __int64 v59; // rsi\n  signed int v60; // eax\n  __int128 *i; // rcx\n  bool v62; // di\n  __int64 v63; // rbx\n  signed __int64 v64; // r13\n  __int64 v65; // rbp\n  __int64 v66; // r14\n  __int64 v67; // r15\n  char *v68; // r11\n  int v69; // er12\n  int *v70; // rax\n  signed int v71; // ecx\n  signed int v72; // ebx\n  int v73; // eax\n  __int64 v74; // rdx\n  signed int v75; // ebp\n  char *v76; // rcx\n  int v77; // edx\n  signed int v78; // edx\n  int v79; // eax\n  _QWORD *v80; // rdx\n  __int64 v81; // rdi\n  int v82; // edx\n  int v83; // edx\n  int v84; // er15\n  _QWORD **v85; // rcx\n  _DWORD *v86; // r15\n  unsigned __int64 v87; // rdx\n  int v88; // ecx\n  int v89; // er14\n  int v90; // er12\n  int v91; // er9\n  int v92; // er14\n  int v93; // er11\n  int v94; // er8\n  int v95; // er11\n  int v96; // er13\n  int v97; // esi\n  int v98; // ecx\n  int v99; // edi\n  int v100; // er10\n  int v101; // ebp\n  int v102; // ecx\n  int v103; // er12\n  int v104; // esi\n  int v105; // er12\n  int v106; // edi\n  int v107; // ebx\n  int v108; // ebp\n  int v109; // er14\n  int v110; // er9\n  unsigned __int64 v111; // rax\n  unsigned __int64 v112; // rsi\n  int v113; // ecx\n  int v114; // er12\n  int v115; // er13\n  int v116; // er10\n  int v117; // er12\n  int v118; // er14\n  int v119; // er9\n  int v120; // er14\n  int v121; // ecx\n  int v122; // edi\n  int v123; // er8\n  int v124; // ebp\n  int v125; // er11\n  int v126; // ebx\n  int v127; // er8\n  int v128; // er13\n  int v129; // edi\n  int v130; // er13\n  int v131; // ecx\n  int v132; // edx\n  int v133; // ebx\n  int v134; // er12\n  int v135; // er10\n  signed __int64 v136; // rdx\n  signed __int64 v137; // r9\n  __int64 v138; // r8\n  signed __int64 v139; // rbp\n  signed __int64 v140; // rdi\n  __int64 v141; // rbx\n  unsigned __int64 v142; // rcx\n  signed __int64 v143; // rbx\n  __int64 v144; // r8\n  int v145; // er11\n  int v146; // edx\n  signed __int64 v147; // rbx\n  __int64 v148; // rax\n  bool v150; // [rsp+8h] [rbp-1F0h]\n  int v151; // [rsp+Ch] [rbp-1ECh]\n  int v152; // [rsp+10h] [rbp-1E8h]\n  int v153; // [rsp+10h] [rbp-1E8h]\n  signed int v154[3]; // [rsp+10h] [rbp-1E8h]\n  char v155; // [rsp+1Ch] [rbp-1DCh]\n  signed int v156; // [rsp+20h] [rbp-1D8h]\n  char v157; // [rsp+24h] [rbp-1D4h]\n  __int64 v158; // [rsp+28h] [rbp-1D0h]\n  __int64 v159; // [rsp+28h] [rbp-1D0h]\n  unsigned int v160; // [rsp+28h] [rbp-1D0h]\n  __int64 v161; // [rsp+30h] [rbp-1C8h]\n  int v162; // [rsp+30h] [rbp-1C8h]\n  int v163; // [rsp+38h] [rbp-1C0h]\n  __int64 v164; // [rsp+38h] [rbp-1C0h]\n  unsigned __int64 v165; // [rsp+40h] [rbp-1B8h]\n  _DWORD *v166; // [rsp+40h] [rbp-1B8h]\n  int v167; // [rsp+4Ch] [rbp-1ACh]\n  int v168; // [rsp+50h] [rbp-1A8h]\n  int v169; // [rsp+50h] [rbp-1A8h]\n  int v170; // [rsp+60h] [rbp-198h]\n  int *v171; // [rsp+60h] [rbp-198h]\n  int v172; // [rsp+68h] [rbp-190h]\n  __int128 *v173; // [rsp+68h] [rbp-190h]\n  __int64 v174; // [rsp+70h] [rbp-188h]\n  int v175; // [rsp+7Ch] [rbp-17Ch]\n  __int128 v176; // [rsp+80h] [rbp-178h]\n  __int64 v177; // [rsp+90h] [rbp-168h]\n  _DWORD *v178; // [rsp+98h] [rbp-160h]\n  __m128i v179; // [rsp+A0h] [rbp-158h]\n  __int64 v180; // [rsp+B8h] [rbp-140h]\n  int v181; // [rsp+C0h] [rbp-138h]\n  int v182; // [rsp+C4h] [rbp-134h]\n  int v183; // [rsp+C8h] [rbp-130h]\n  int v184; // [rsp+CCh] [rbp-12Ch]\n  int v185; // [rsp+D0h] [rbp-128h]\n  int v186; // [rsp+D4h] [rbp-124h]\n  int v187; // [rsp+D8h] [rbp-120h]\n  int v188[2]; // [rsp+DCh] [rbp-11Ch]\n  int v189[8]; // [rsp+E4h] [rbp-114h]\n  int v190[8]; // [rsp+104h] [rbp-F4h]\n  int v191[8]; // [rsp+124h] [rbp-D4h]\n  int v192[8]; // [rsp+144h] [rbp-B4h]\n  int v193[8]; // [rsp+164h] [rbp-94h]\n  int v194[8]; // [rsp+184h] [rbp-74h]\n  int v195[21]; // [rsp+1A4h] [rbp-54h]\n\n  v167 = a3;\n  v178 = a2;\n  v152 = a1 + (a1 >> 31);\n  v4 = off_49F6D0;\n  v5 = *((_QWORD *)off_49F6D0 + 1767);\n  v177 = (signed int)a1;\n  v6 = **(__int64 ***)(v5 + 8LL * (signed int)a1);\n  v174 = *v6;\n  v180 = v6[1];\n  v161 = *((_QWORD *)off_49F6D0 + 1771);\n  v158 = *((signed int *)off_49F6D0 + 3);\n  v151 = *((_DWORD *)off_49F6D0 + 10) + *((_DWORD *)off_49F6D0 + 18167);\n  if ( v151 )\n    v7 = 0;\n  else\n    v7 = *((_DWORD *)off_49F6D0 + 18176) == 1;\n  v8 = (unsigned __int64)(715827883LL * v151) >> 63;\n  v165 = (unsigned __int64)(715827883LL * v151) >> 32;\n  v163 = v8;\n  v9 = v165 + v8;\n  v10 = 6 * (v165 + v8);\n  v172 = v9;\n  if ( v151 > 35 )\n  {\n    v155 = v9 - 6;\n    v156 = 0;\n    v157 = 0;\n  }\n  else\n  {\n    v157 = 6 - v9;\n    v156 = 1 << (5 - v9);\n    v155 = 0;\n  }\n  v168 = a1 - (v152 & 0x1FFFFFFE);\n  v153 = 4 * v152;\n  v170 = v151 - v10;\n  v150 = v7;\n  if ( !v7 )\n  {\n    v11 = -1LL;\n    do\n    {\n      v12 = v4[v11 + 3391];\n      v13 = v4[v11 + 3279];\n      v14 = v4[v11 + 3295];\n      v15 = v4[v11 + 3375];\n      v16 = v4[v11 + 3311];\n      v17 = v4[v11 + 3359];\n      v18 = v4[v11 + 3327];\n      v19 = v4[v11 + 3343];\n      v20 = v19 + v18 + v12 + v13;\n      v21 = v12 + v13 - (v19 + v18);\n      v22 = v15 + v14 + v17 + v16;\n      v23 = v15 + v14 - (v17 + v16);\n      v24 = v13 - v12;\n      v25 = v14 - v15;\n      v26 = v16 - v17;\n      v27 = v18 - v19;\n      v28 = v24 - v27 - (v26 + (v26 >> 1));\n      v29 = v26 + v25 + v24 + (v24 >> 1);\n      v30 = v27 + v24 - v25 - (v25 >> 1);\n      v31 = (v27 >> 1) + v27 + v25 - v26;\n      *(&v182 + v11) = v20 + v22;\n      v190[v11] = v21 + (v23 >> 1);\n      v192[v11] = v20 - v22;\n      v194[v11] = (v21 >> 1) - v23;\n      v189[v11] = v29 + (v31 >> 2);\n      v191[v11] = v28 + (v30 >> 2);\n      v193[v11] = v30 - (v28 >> 2);\n      v195[v11++] = (v29 >> 2) - v31;\n    }\n    while ( v11 < 7 );\n    v32 = -1LL;\n    v33 = 0LL;\n    do\n    {\n      v34 = v32;\n      v35 = v188[v33 / 2];\n      v36 = *(int *)((char *)&v181 + v33 * 2);\n      v37 = *(int *)((char *)&v182 + v33 * 2);\n      v38 = *(int *)((char *)&v187 + v33 * 2);\n      v39 = *(int *)((char *)&v183 + v33 * 2);\n      v40 = *(int *)((char *)&v186 + v33 * 2);\n      v41 = *(int *)((char *)&v184 + v33 * 2);\n      v42 = *(int *)((char *)&v185 + v33 * 2);\n      v43 = v41 + v42 + v35 + v36;\n      v44 = v35 + v36 - (v41 + v42);\n      v45 = v40 + v39 + v38 + v37;\n      v46 = v38 + v37 - (v40 + v39);\n      v47 = v36 - v35;\n      v48 = v37 - v38;\n      v49 = v39 - v40;\n      v50 = v41 - v42;\n      v51 = v47 - v50 - (v49 + (v49 >> 1));\n      v4[v33 + 3278] = v43 + v45;\n      v4[v33 + 3280] = v44 + (v46 >> 1);\n      v52 = v49 + v48 + v47 + (v47 >> 1);\n      v53 = v50 + v47 - v48 - (v48 >> 1);\n      v54 = (v50 >> 1) + v50 + v48 - v49;\n      v4[v33 + 3282] = v43 - v45;\n      v4[v33 + 3284] = (v44 >> 1) - v46;\n      v4[v33 + 3279] = v52 + (v54 >> 2);\n      v4[v33 + 3281] = v51 + (v53 >> 2);\n      v4[v33 + 3283] = v53 - (v51 >> 2);\n      v4[v33 + 3285] = (v52 >> 2) - v54;\n      v32 = v34 + 1;\n      v33 += 16LL;\n    }\n    while ( (unsigned __int64)(v34 + 1) < 7 );\n  }\n  v169 = 8 * v168;\n  v154[0] = v153 & 0xFFFFFFF8;\n  v175 = v165 + v163 + 16;\n  _mm_store_si128(&v179, _mm_cmpeq_epi32(a4, a4));\n  v166 = (_DWORD *)(v161 + 632 * v158 + 532);\n  v164 = v170;\n  v55 = v172;\n  _mm_store_si128((__m128i *)&v176, (__m128i)0LL);\n  v56 = &xmmword_4EFC70;\n  if ( v167 == 1 )\n    v56 = &xmmword_4F0270;\n  v173 = v56;\n  v57 = &dword_4EA570;\n  if ( v167 == 1 )\n    v57 = &dword_4EB270;\n  v58 = -1;\n  v59 = 0LL;\n  v171 = &v57[64 * v55];\n  v162 = 0;\n  v60 = 0;\n  if ( !v4[18111] )\n    goto LABEL_20;\nLABEL_19:\n  for ( i = (__int128 *)&unk_492760; ; i = &xmmword_4926E0 )\n  {\n    v62 = v150;\n    v63 = v59 & 3;\n    v64 = v179.m128i_i32[v63] + 1LL;\n    v65 = *((unsigned __int8 *)i + 2 * v59);\n    v179.m128i_i32[v63] = v64;\n    v66 = *((unsigned __int8 *)i + 2 * v59 + 1);\n    v67 = v65 << 6;\n    v68 = (char *)&v4[16 * v65];\n    v69 = -*(_DWORD *)&v68[4 * v66 + 13112];\n    if ( v69 < 1 )\n      v69 = *(_DWORD *)&v68[4 * v66 + 13112];\n    if ( !v150 )\n      v69 = (v171[8 * v65 + v66] + *((_DWORD *)&v173[16 * v164 + 2 * v65] + v66) * v69) >> v175;\n    ++v58;\n    if ( v69 )\n      break;\n    v77 = 0;\n    if ( !v150 )\n      goto LABEL_48;\n    if ( v59 == 63 )\n      goto LABEL_49;\nLABEL_18:\n    ++v59;\n    v4 = off_49F6D0;\n    if ( *((_DWORD *)off_49F6D0 + 18111) )\n      goto LABEL_19;\nLABEL_20:\n    if ( v4[18100] && *v166 )\n      goto LABEL_19;\n  }\n  v70 = (int *)&v68[4 * v66 + 13112];\n  v159 = v65;\n  if ( v166[10] && !*((_DWORD *)dest + 589) )\n  {\n    v75 = v58;\n    v78 = 999999;\n    if ( v69 <= 1 )\n      v78 = (unsigned __int8)byte_4927E0[64 * (signed __int64)*((signed int *)dest + 617) + v64];\n    *v178 += v78;\n    v79 = sub_452340(v69, *v70);\n    v76 = (char *)off_49F6D0;\n    v80 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v177) + 8 * v63);\n    v81 = *((signed int *)&v176 + v63);\n    *(_DWORD *)(*v80 + 4 * v81) = v79;\n    *(_DWORD *)(v80[1] + 4 * v81) = v64;\n    *((_DWORD *)&v176 + v63) = v81 + 1;\n    v179.m128i_i32[v63] = -1;\n  }\n  else\n  {\n    v71 = 999999;\n    if ( v69 <= 1 )\n      v71 = (unsigned __int8)byte_4927E0[64 * (signed __int64)*((signed int *)dest + 617) + v58];\n    *v178 += v71;\n    v72 = v58;\n    v73 = sub_452340(v69, *v70);\n    v74 = v162;\n    *(_DWORD *)(v174 + 4 * v74) = v73;\n    *(_DWORD *)(v180 + 4 * v74) = v72;\n    ++v162;\n    v75 = -1;\n    v76 = (char *)off_49F6D0;\n  }\n  v82 = sub_452340(v69, *(_DWORD *)&v76[4 * v66 + 13112 + v67]);\n  v60 = 1;\n  v62 = v150;\n  if ( v150 )\n  {\n    v58 = v75;\n    if ( v59 == 63 )\n      goto LABEL_49;\n    goto LABEL_18;\n  }\n  if ( v167 == 1 )\n  {\n    v83 = *((_DWORD *)&xmmword_4EF670[16 * v164 + 2 * v159] + v66) * v82;\n    if ( v151 < 36 )\n      goto LABEL_44;\nLABEL_46:\n    v77 = v83 << v155;\n  }\n  else\n  {\n    v83 = dword_4EF070[64 * v164 + 8 * v159 + v66] * v82;\n    if ( v151 >= 36 )\n      goto LABEL_46;\nLABEL_44:\n    v77 = (v156 + v83) >> v157;\n  }\n  v60 = 1;\n  v58 = v75;\nLABEL_48:\n  *(_DWORD *)((char *)off_49F6D0 + 4 * v66 + v67 + 13112) = v77;\n  if ( v59 != 63 )\n    goto LABEL_18;\nLABEL_49:\n  v160 = v60;\n  if ( v166[10] )\n  {\n    v84 = v162;\n    if ( !*((_DWORD *)dest + 589) )\n    {\n      v85 = *(_QWORD ***)(*((_QWORD *)off_49F6D0 + 1767) + 8 * v177);\n      *(_DWORD *)(**v85 + 4LL * (signed int)v176) = 0;\n      *(_DWORD *)(*v85[1] + 4LL * SDWORD1(v176)) = 0;\n      *(_DWORD *)(*v85[2] + 4LL * SDWORD2(v176)) = 0;\n      v174 = *v85[3];\n      v84 = HIDWORD(v176);\n    }\n  }\n  else\n  {\n    v84 = v162;\n  }\n  *(_DWORD *)(v174 + 4LL * v84) = 0;\n  v86 = off_49F6D0;\n  if ( !v62 )\n  {\n    v87 = -1LL;\n    do\n    {\n      v88 = v86[v87 + 3343];\n      v89 = v86[v87 + 3279];\n      v90 = v86[v87 + 3295];\n      v91 = v88 + v89;\n      v92 = v89 - v88;\n      v93 = v86[v87 + 3375];\n      v94 = (v86[v87 + 3311] >> 1) - v93;\n      v95 = v86[v87 + 3311] + (v93 >> 1);\n      v96 = v86[v87 + 3327];\n      v97 = v86[v87 + 3359];\n      v98 = v86[v87 + 3391];\n      v99 = v86[v87 + 3359] - v96 - v98 - (v86[v87 + 3391] >> 1);\n      v100 = v95 + v91;\n      v101 = v90 + v86[v87 + 3391] - (v96 + (v86[v87 + 3327] >> 1));\n      v102 = (v86[v87 + 3359] >> 1) + v97 + v98 - v90;\n      v103 = v90 + v96 + v97 + (v90 >> 1);\n      v104 = v99 + (v103 >> 2);\n      v105 = v103 - (v99 >> 2);\n      *(&v182 + v87) = v105 + v95 + v91;\n      v106 = v94 + v92;\n      v107 = v101 + (v102 >> 2);\n      v108 = (v101 >> 2) - v102;\n      v189[v87] = v94 + v92 + v108;\n      v109 = v92 - v94;\n      v190[v87] = v107 + v109;\n      v110 = v91 - v95;\n      v191[v87] = v104 + v110;\n      v192[v87] = v110 - v104;\n      v193[v87] = v109 - v107;\n      v194[v87] = v106 - v108;\n      v195[v87++] = v100 - v105;\n    }\n    while ( v87 < 7 );\n    v111 = -1LL;\n    v112 = 0LL;\n    do\n    {\n      v113 = *(int *)((char *)&v185 + v112 * 2);\n      v114 = *(int *)((char *)&v181 + v112 * 2);\n      v115 = *(int *)((char *)&v182 + v112 * 2);\n      v116 = v113 + v114;\n      v117 = v114 - v113;\n      v118 = *(int *)((char *)&v187 + v112 * 2);\n      v119 = (*(int *)((char *)&v183 + v112 * 2) >> 1) - v118;\n      v120 = *(int *)((char *)&v183 + v112 * 2) + (v118 >> 1);\n      v121 = *(int *)((char *)&v184 + v112 * 2);\n      v122 = *(int *)((char *)&v186 + v112 * 2);\n      v123 = v188[v112 / 2];\n      v124 = *(int *)((char *)&v186 + v112 * 2) - v121 - v123 - (v188[v112 / 2] >> 1);\n      v125 = v120 + v116;\n      v126 = v115 + v188[v112 / 2] - (v121 + (*(int *)((char *)&v184 + v112 * 2) >> 1));\n      v127 = (*(int *)((char *)&v186 + v112 * 2) >> 1) + v122 + v123 - v115;\n      v128 = v115 + v121 + v122 + (v115 >> 1);\n      v129 = v124 + (v128 >> 2);\n      v130 = v128 - (v124 >> 2);\n      v86[v112 + 3278] = v120 + v116 + v130;\n      v131 = v119 + v117;\n      v132 = v126 + (v127 >> 2);\n      v133 = (v126 >> 2) - v127;\n      v86[v112 + 3279] = v133 + v119 + v117;\n      v134 = v117 - v119;\n      v86[v112 + 3280] = v132 + v134;\n      v135 = v116 - v120;\n      v86[v112 + 3281] = v129 + v135;\n      v86[v112 + 3282] = v135 - v129;\n      v86[v112 + 3283] = v134 - v132;\n      v86[v112 + 3284] = v131 - v133;\n      v86[v112 + 3285] = v125 - v130;\n      ++v111;\n      v112 += 16LL;\n    }\n    while ( v111 < 7 );\n  }\n  v136 = (signed __int64)(v86 + 3278);\n  v137 = (signed __int64)&v86[8 * v169 + 3150] + 2 * v154[0];\n  v138 = 0LL;\n  while ( 2 )\n  {\n    v139 = -8LL;\n    while ( 1 )\n    {\nLABEL_60:\n      while ( v150 )\n      {\n        *(_DWORD *)(v136 + 4 * v139 + 32) += *(unsigned __int16 *)(v137 + 2 * v139 + 16);\n        if ( !++v139 )\n          goto LABEL_72;\n      }\n      if ( !v86[18181] )\n        break;\n      *(_DWORD *)(v136 + 4 * v139 + 32) = (*(_DWORD *)(v136 + 4 * v139 + 32) + 32) >> 6;\n      if ( !++v139 )\n        goto LABEL_72;\n    }\n    v140 = (signed int)v86[18171];\n    v141 = *(signed int *)(v136 + 4 * v139 + 32);\n    v142 = (unsigned __int64)*(unsigned __int16 *)(v137 + 2 * v139 + 16) << 6;\n    if ( (signed __int64)(v142 + v141) < -32 )\n    {\n      LODWORD(v143) = 0;\n      if ( v140 < 0 )\n        goto LABEL_71;\n      goto LABEL_70;\n    }\n    v143 = (signed __int64)(v142 + v141 + 32) >> 6;\n    if ( v143 <= v140 )\nLABEL_70:\n      LODWORD(v140) = v143;\nLABEL_71:\n    *(_DWORD *)(v136 + 4 * v139++ + 32) = v140;\n    if ( v139 )\n      goto LABEL_60;\nLABEL_72:\n    ++v138;\n    v136 += 64LL;\n    v137 += 32LL;\n    if ( v138 != 8 )\n      continue;\n    break;\n  }\n  if ( !v86[18181] )\n  {\n    v144 = *(_QWORD *)(qword_4F9E30 + 6424);\n    v145 = v86[38];\n    v146 = v86[39] + v154[0];\n    v147 = -8LL;\n    do\n    {\n      v148 = *(_QWORD *)(v144 + 8LL * v146);\n      *(_WORD *)(v148 + 2LL * (v169 + v145)) = v86[v147 + 3286];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 1))) = v86[v147 + 3302];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 2))) = v86[v147 + 3318];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 3))) = v86[v147 + 3334];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 4))) = v86[v147 + 3350];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 5))) = v86[v147 + 3366];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 6))) = v86[v147 + 3382];\n      *(_WORD *)(v148 + 2LL * (v145 + (v169 | 7))) = v86[v147 + 3398];\n      ++v146;\n      ++v147;\n    }\n    while ( v147 );\n  }\n  return v160;\n}\n", 
            "funcStartAddr": "0x47eaf0L", 
            "funcEndAddr": "0x47f743L", 
            "funcName": "sub_47EAF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47F750(int *a1, int a2, int a3, int a4)\n{\n  __m128i v4; // xmm0\n  __m128i v5; // xmm1\n  __m128i v6; // xmm2\n  int v7; // er8\n  int v8; // eax\n  int v9; // er10\n  int v10; // er9\n  int v11; // er10\n  int v12; // er8\n  int v13; // er9\n  int v14; // er10\n  int v15; // er8\n  int v16; // er9\n  int v17; // er10\n  int v18; // er8\n  int v19; // er9\n  int v20; // er10\n  int v21; // er8\n  int v22; // er9\n  int v23; // er10\n  int v24; // eax\n  int v25; // edx\n  int v26; // ecx\n  unsigned int v27; // ecx\n  unsigned int v28; // er8\n  unsigned int v29; // esi\n  __m128i v30; // xmm0\n  int v31; // ecx\n  __m128i v32; // xmm0\n  int v33; // eax\n  int v34; // edx\n  int v35; // eax\n  __int64 result; // rax\n  __int128 v37; // xmm0\n  __int128 v38; // xmm1\n  __int128 v39; // xmm2\n  __int128 v40; // [rsp+0h] [rbp-68h]\n  __int128 v41; // [rsp+10h] [rbp-58h]\n  __int128 v42; // [rsp+20h] [rbp-48h]\n  __int128 v43; // [rsp+30h] [rbp-38h]\n  __int128 v44; // [rsp+40h] [rbp-28h]\n  __int128 v45; // [rsp+50h] [rbp-18h]\n  unsigned int v46; // [rsp+60h] [rbp-8h]\n\n  v46 = a1[24];\n  v45 = *((_OWORD *)a1 + 5);\n  v44 = *((_OWORD *)a1 + 4);\n  v4 = _mm_loadu_si128((const __m128i *)a1);\n  v5 = _mm_loadu_si128((const __m128i *)a1 + 1);\n  v6 = _mm_loadu_si128((const __m128i *)a1 + 2);\n  _mm_store_si128((__m128i *)&v43, _mm_loadu_si128((const __m128i *)a1 + 3));\n  _mm_store_si128((__m128i *)&v42, v6);\n  _mm_store_si128((__m128i *)&v41, v5);\n  _mm_store_si128((__m128i *)&v40, v4);\n  if ( a3 )\n  {\n    if ( a2 )\n    {\n      v7 = a1[1];\n      v8 = a1[2];\n      v9 = *a1 + 2 * v7 + 2;\n      v10 = a1[2];\n    }\n    else\n    {\n      v7 = a1[1];\n      v10 = a1[2];\n      v8 = 3 * v7;\n      v9 = v10 + 2;\n    }\n    DWORD1(v40) = (v9 + v8) >> 2;\n    v11 = a1[3];\n    DWORD2(v40) = (v11 + v7 + 2 * v10 + 2) >> 2;\n    v12 = a1[4];\n    HIDWORD(v40) = (v12 + v10 + 2 * v11 + 2) >> 2;\n    v13 = a1[5];\n    LODWORD(v41) = (v13 + v11 + 2 * v12 + 2) >> 2;\n    v14 = a1[6];\n    DWORD1(v41) = (v14 + v12 + 2 * v13 + 2) >> 2;\n    v15 = a1[7];\n    DWORD2(v41) = (v15 + v13 + 2 * v14 + 2) >> 2;\n    v16 = a1[8];\n    HIDWORD(v41) = (v16 + v14 + 2 * v15 + 2) >> 2;\n    v17 = a1[9];\n    LODWORD(v42) = (v17 + v15 + 2 * v16 + 2) >> 2;\n    v18 = a1[10];\n    DWORD1(v42) = (v18 + v16 + 2 * v17 + 2) >> 2;\n    v19 = a1[11];\n    DWORD2(v42) = (v19 + v17 + 2 * v18 + 2) >> 2;\n    v20 = a1[12];\n    HIDWORD(v42) = (v20 + v18 + 2 * v19 + 2) >> 2;\n    v21 = a1[13];\n    LODWORD(v43) = (v21 + v19 + 2 * v20 + 2) >> 2;\n    v22 = a1[14];\n    DWORD1(v43) = (v22 + v20 + 2 * v21 + 2) >> 2;\n    v23 = a1[15];\n    DWORD2(v43) = (v23 + v21 + 2 * v22 + 2) >> 2;\n    HIDWORD(v43) = (a1[16] + v22 + 2 * v23 + 2) >> 2;\n    LODWORD(v44) = (a1[15] + 3 * a1[16] + 2) >> 2;\n  }\n  if ( !a2 )\n  {\nLABEL_12:\n    if ( a4 )\n    {\n      if ( !a2 )\n      {\n        v24 = a1[17];\n        v27 = a1[18];\n        v28 = v27 + 2;\n        DWORD1(v44) = (signed int)(v27 + 3 * v24 + 2) >> 2;\nLABEL_20:\n        v29 = a1[19];\n        v30 = _mm_unpacklo_epi64(\n                _mm_unpacklo_epi32(_mm_cvtsi32_si128(v27), _mm_cvtsi32_si128(v29)),\n                _mm_loadl_epi64((const __m128i *)a1 + 5));\n        v31 = a1[22];\n        v32 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(a1 + 19)),\n                _mm_add_epi32(\n                  _mm_unpacklo_epi64(\n                    _mm_unpacklo_epi32(_mm_cvtsi32_si128(v24 + 2), _mm_cvtsi32_si128(v28)),\n                    _mm_unpacklo_epi32(_mm_cvtsi32_si128(v29 + 2), _mm_cvtsi32_si128(a1[20] + 2))),\n                  _mm_add_epi32(v30, v30)));\n        v33 = a1[21] + 2 * v31;\n        _mm_storeu_si128((__m128i *)((char *)&v44 + 8), _mm_srai_epi32(v32, 2u));\n        v34 = a1[23];\n        DWORD2(v45) = (v34 + v33 + 2) >> 2;\n        v35 = a1[24];\n        HIDWORD(v45) = (v35 + v31 + 2 * v34 + 2) >> 2;\n        v46 = (v35 + v34 + 2 * v35 + 2) >> 2;\n        goto LABEL_21;\n      }\n      v25 = *a1;\n      v24 = a1[17];\nLABEL_19:\n      v27 = a1[18];\n      DWORD1(v44) = (signed int)(v27 + v25 + 2 * v24 + 2) >> 2;\n      v28 = v27 + 2;\n      goto LABEL_20;\n    }\n    goto LABEL_21;\n  }\n  if ( a3 && a4 )\n  {\n    v24 = a1[17];\n    v25 = *a1;\n    v26 = a1[1] + v24 + 2 * *a1 + 2;\nLABEL_18:\n    LODWORD(v40) = v26 >> 2;\n    goto LABEL_19;\n  }\n  if ( a3 )\n  {\n    LODWORD(v40) = (a1[1] + 3 * *a1 + 2) >> 2;\n    goto LABEL_12;\n  }\n  if ( a4 )\n  {\n    v25 = *a1;\n    v24 = a1[17];\n    v26 = v24 + 3 * *a1 + 2;\n    goto LABEL_18;\n  }\nLABEL_21:\n  result = v46;\n  a1[24] = v46;\n  *((_OWORD *)a1 + 5) = v45;\n  *((_OWORD *)a1 + 4) = v44;\n  v37 = v40;\n  v38 = v41;\n  v39 = v42;\n  *((_OWORD *)a1 + 3) = v43;\n  *((_OWORD *)a1 + 2) = v39;\n  *((_OWORD *)a1 + 1) = v38;\n  *(_OWORD *)a1 = v37;\n  return result;\n}\n", 
            "funcStartAddr": "0x47f750L", 
            "funcEndAddr": "0x47fa89L", 
            "funcName": "sub_47F750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FA90(__int64 a1, int a2, signed int **a3)\n{\n  signed int **v3; // r14\n  int v4; // ebp\n  int v5; // ebx\n  int v6; // eax\n  unsigned int v7; // edx\n  int v8; // er15\n  int v9; // er8\n  signed int *v10; // rsi\n  unsigned int v11; // eax\n  char v12; // bl\n  char v13; // cl\n  bool v14; // zf\n  __int64 v15; // rdi\n  __int64 v16; // rbx\n\n  v3 = a3;\n  v4 = 0;\n  v5 = 0;\n  if ( (unsigned int)(a2 + 2) >= 3 )\n  {\n    v5 = 0;\n    v6 = a2 + 1;\n    do\n    {\n      if ( (unsigned int)++v5 > 0xF )\n        break;\n      v7 = v6 / 2 + 1;\n      v6 /= 2;\n    }\n    while ( v7 > 2 );\n  }\n  v8 = 2 * v5 + 1;\n  v9 = (1 << v5) | (a2 + 1 - (signed int)ldexp(1.0, v5)) & ((1 << v5) - 1);\n  v10 = *v3;\n  v11 = 1 << 2 * v5;\n  v12 = *((_BYTE *)*v3 + 8);\n  do\n  {\n    v13 = 2 * v12 | ((v9 & v11) != 0);\n    *((_BYTE *)v10 + 8) = v13;\n    v14 = v10[1]-- == 1;\n    if ( v14 )\n    {\n      v10[1] = 8;\n      v15 = *((_QWORD *)v10 + 4);\n      v16 = *v10;\n      *v10 = v16 + 1;\n      *(_BYTE *)(v15 + v16) = v13;\n      *((_BYTE *)v10 + 8) = 0;\n      v13 = 0;\n    }\n    v11 >>= 1;\n    ++v4;\n    v12 = v13;\n  }\n  while ( v4 < v8 );\n  return (unsigned int)v8;\n}\n", 
            "funcStartAddr": "0x47fa90L", 
            "funcEndAddr": "0x47fb67L", 
            "funcName": "sub_47FA90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FB70(int a1, __int64 a2, _DWORD *a3, _DWORD *a4)\n{\n  _DWORD *v4; // rbx\n  int v5; // ebp\n  unsigned int v6; // eax\n  int v7; // edi\n  int v8; // eax\n  unsigned int v9; // esi\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = a1 + 1;\n  v6 = a1 + 2;\n  v7 = 0;\n  if ( v6 >= 3 )\n  {\n    v7 = 0;\n    v8 = v5;\n    do\n    {\n      if ( (unsigned int)++v7 > 0xF )\n        break;\n      v9 = v8 / 2 + 1;\n      v8 /= 2;\n    }\n    while ( v9 > 2 );\n  }\n  *a3 = 2 * v7 + 1;\n  result = (unsigned int)(signed int)ldexp(1.0, v7);\n  *v4 = v5 - result;\n  return result;\n}\n", 
            "funcStartAddr": "0x47fb70L", 
            "funcEndAddr": "0x47fbcfL", 
            "funcName": "sub_47FB70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FBD0(unsigned int *a1, signed int **a2)\n{\n  signed int **v2; // r14\n  unsigned int *v3; // r12\n  unsigned int *v4; // r15\n  __int64 result; // rax\n  signed int v6; // edx\n  int v7; // ebx\n  signed int *v8; // rsi\n  unsigned int v9; // edi\n  char v10; // cl\n  bool v11; // zf\n  __int64 v12; // r8\n  __int64 v13; // rbx\n\n  v2 = a2;\n  v3 = a1;\n  v4 = a1 + 3;\n  (*((void (__fastcall **)(_QWORD, _QWORD, unsigned int *, unsigned int *))v3 + 4))(a1[1], v3[2], v3 + 3, v3 + 4);\n  result = a1[3];\n  v6 = 1;\n  v7 = (1 << (signed int)result / 2) | a1[4] & ((1 << (signed int)result / 2) - 1);\n  a1[5] = v7;\n  if ( (signed int)result > 0 )\n  {\n    v8 = *a2;\n    v9 = 1 << (result - 1);\n    v10 = *((_BYTE *)*v2 + 8);\n    while ( 1 )\n    {\n      v10 *= 2;\n      if ( v9 & v7 )\n        v10 |= 1u;\n      *((_BYTE *)v8 + 8) = v10;\n      v11 = v8[1]-- == 1;\n      if ( v11 )\n      {\n        v8[1] = 8;\n        v12 = *((_QWORD *)v8 + 4);\n        v13 = *v8;\n        *v8 = v13 + 1;\n        *(_BYTE *)(v12 + v13) = v10;\n        *((_BYTE *)v8 + 8) = 0;\n        result = *v4;\n        v10 = 0;\n        if ( v6 >= (signed int)result )\n          break;\n      }\n      else if ( v6 >= (signed int)result )\n      {\n        break;\n      }\n      v9 >>= 1;\n      v7 = v3[5];\n      ++v6;\n    }\n  }\n  if ( *v3 )\n    (*v2)[10] = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x47fbd0L", 
            "funcEndAddr": "0x47fcb1L", 
            "funcName": "sub_47FBD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FCC0(__int64 a1, int a2, signed int **a3)\n{\n  signed int **v3; // r14\n  int v4; // eax\n  _BOOL4 v5; // er13\n  int v6; // er12\n  int v7; // ebp\n  int v8; // ebx\n  int v9; // eax\n  unsigned int v10; // edx\n  int v11; // er15\n  int v12; // er8\n  signed int *v13; // rsi\n  unsigned int v14; // eax\n  char v15; // bl\n  char v16; // cl\n  bool v17; // zf\n  __int64 v18; // rdi\n  __int64 v19; // rbx\n\n  v3 = a3;\n  v4 = -a2;\n  if ( -a2 < 1 )\n    v4 = a2;\n  v5 = a2 < 0;\n  v6 = 2 * v4;\n  v7 = 0;\n  v8 = 0;\n  if ( (unsigned int)(2 * v4 + 1) >= 3 )\n  {\n    v8 = 0;\n    v9 = 2 * v4;\n    do\n    {\n      if ( (unsigned int)++v8 > 0xF )\n        break;\n      v10 = v9 / 2 + 1;\n      v9 /= 2;\n    }\n    while ( v10 > 2 );\n  }\n  v11 = 2 * v8 + 1;\n  LOBYTE(v5) = a2 <= 0;\n  v12 = (1 << v8) | ((v5 | v6) - (signed int)ldexp(1.0, v8)) & ((1 << v8) - 1);\n  v13 = *v3;\n  v14 = 1 << 2 * v8;\n  v15 = *((_BYTE *)*v3 + 8);\n  do\n  {\n    v16 = 2 * v15 | ((v12 & v14) != 0);\n    *((_BYTE *)v13 + 8) = v16;\n    v17 = v13[1]-- == 1;\n    if ( v17 )\n    {\n      v13[1] = 8;\n      v18 = *((_QWORD *)v13 + 4);\n      v19 = *v13;\n      *v13 = v19 + 1;\n      *(_BYTE *)(v18 + v19) = v16;\n      *((_BYTE *)v13 + 8) = 0;\n      v16 = 0;\n    }\n    v14 >>= 1;\n    ++v7;\n    v15 = v16;\n  }\n  while ( v7 < v11 );\n  return (unsigned int)v11;\n}\n", 
            "funcStartAddr": "0x47fcc0L", 
            "funcEndAddr": "0x47fdadL", 
            "funcName": "sub_47FCC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FDB0(int a1, __int64 a2, _DWORD *a3, _DWORD *a4)\n{\n  int v4; // eax\n  _DWORD *v5; // r14\n  _BOOL4 v6; // ebp\n  int v7; // ebx\n  int v8; // edi\n  int v9; // eax\n  unsigned int v10; // esi\n  __int64 result; // rax\n\n  v4 = -a1;\n  if ( -a1 < 1 )\n    v4 = a1;\n  v5 = a4;\n  v6 = a1 < 0;\n  LOBYTE(v6) = a1 <= 0;\n  v7 = 2 * v4;\n  v8 = 0;\n  if ( (unsigned int)(2 * v4 + 1) >= 3 )\n  {\n    v8 = 0;\n    v9 = 2 * v4;\n    do\n    {\n      if ( (unsigned int)++v8 > 0xF )\n        break;\n      v10 = v9 / 2 + 1;\n      v9 /= 2;\n    }\n    while ( v10 > 2 );\n  }\n  *a3 = 2 * v8 + 1;\n  result = (unsigned int)(signed int)ldexp(1.0, v8);\n  *v5 = (v6 | v7) - result;\n  return result;\n}\n", 
            "funcStartAddr": "0x47fdb0L", 
            "funcEndAddr": "0x47fe20L", 
            "funcName": "sub_47FDB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_47FE20(__int64 a1, char a2, signed int **a3)\n{\n  signed int *v3; // rax\n  char v4; // si\n  bool v5; // zf\n  __int64 v7; // rcx\n  __int64 v8; // rdx\n\n  v3 = *a3;\n  v4 = 2 * *((_BYTE *)*a3 + 8) | a2 & 1;\n  *((_BYTE *)v3 + 8) = v4;\n  v5 = v3[1]-- == 1;\n  if ( v5 )\n  {\n    v3[1] = 8;\n    v7 = *((_QWORD *)v3 + 4);\n    v8 = *v3;\n    *v3 = v8 + 1;\n    *(_BYTE *)(v7 + v8) = v4;\n    *((_BYTE *)v3 + 8) = 0;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x47fe20L", 
            "funcEndAddr": "0x47fe60L", 
            "funcName": "sub_47FE20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FEE0(unsigned int a1, __int64 a2, int a3, signed int **a4)\n{\n  signed int *v4; // r8\n  unsigned int v5; // esi\n  char v6; // cl\n  unsigned int v7; // er9\n  char v8; // al\n  bool v9; // zf\n  __int64 v10; // r10\n  __int64 v11; // r11\n\n  if ( (signed int)a1 > 0 )\n  {\n    v4 = *a4;\n    v5 = 1 << (a1 - 1);\n    v6 = *((_BYTE *)*a4 + 8);\n    v7 = a1;\n    do\n    {\n      v8 = 2 * v6 | ((a3 & v5) != 0);\n      *((_BYTE *)v4 + 8) = v8;\n      v9 = v4[1]-- == 1;\n      if ( v9 )\n      {\n        v4[1] = 8;\n        v10 = *((_QWORD *)v4 + 4);\n        v11 = *v4;\n        *v4 = v11 + 1;\n        *(_BYTE *)(v10 + v11) = v8;\n        *((_BYTE *)v4 + 8) = 0;\n        v8 = 0;\n      }\n      v5 >>= 1;\n      v6 = v8;\n      --v7;\n    }\n    while ( v7 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x47fee0L", 
            "funcEndAddr": "0x47ff42L", 
            "funcName": "sub_47FEE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FF50(int a1, __int64 a2, _DWORD *a3, _DWORD *a4)\n{\n  _DWORD *v4; // rbx\n  int v5; // eax\n  int v6; // ebp\n  int v7; // edi\n  int v8; // eax\n  unsigned int v9; // esi\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = (unsigned __int8)byte_490A90[96 * (*((_DWORD *)off_49F6D0 + 18175) != 0) + 2 * a1];\n  v6 = v5 + 1;\n  v7 = 0;\n  if ( v5 )\n  {\n    v8 = v5 + 1;\n    do\n    {\n      if ( (unsigned int)++v7 > 0xF )\n        break;\n      v9 = v8 / 2 + 1;\n      v8 /= 2;\n    }\n    while ( v9 > 2 );\n  }\n  *a3 = 2 * v7 + 1;\n  result = (unsigned int)(signed int)ldexp(1.0, v7);\n  *v4 = v6 - result;\n  return result;\n}\n", 
            "funcStartAddr": "0x47ff50L", 
            "funcEndAddr": "0x47ffcfL", 
            "funcName": "sub_47FF50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FFD0(int a1, __int64 a2, _DWORD *a3, _DWORD *a4)\n{\n  _DWORD *v4; // rbx\n  int v5; // eax\n  int v6; // ebp\n  int v7; // edi\n  int v8; // eax\n  unsigned int v9; // esi\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = (unsigned __int8)byte_490A91[96 * (*((_DWORD *)off_49F6D0 + 18175) != 0) + 2 * a1];\n  v6 = v5 + 1;\n  v7 = 0;\n  if ( v5 )\n  {\n    v8 = v5 + 1;\n    do\n    {\n      if ( (unsigned int)++v7 > 0xF )\n        break;\n      v9 = v8 / 2 + 1;\n      v8 /= 2;\n    }\n    while ( v9 > 2 );\n  }\n  *a3 = 2 * v7 + 1;\n  result = (unsigned int)(signed int)ldexp(1.0, v7);\n  *v4 = v6 - result;\n  return result;\n}\n", 
            "funcStartAddr": "0x47ffd0L", 
            "funcEndAddr": "0x48004fL", 
            "funcName": "sub_47FFD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_480050(int a1, int a2, _DWORD *a3, _DWORD *a4)\n{\n  _DWORD *v4; // r14\n  int v5; // ecx\n  int v6; // ebp\n  int v7; // ebx\n  int v8; // edi\n  int v9; // eax\n  unsigned int v10; // esi\n\n  v4 = a4;\n  if ( a1 )\n  {\n    v5 = -a1;\n    if ( -a1 < 1 )\n      v5 = a1;\n    v6 = 0;\n    if ( v5 <= dword_489850[a2] )\n      v7 = xmmword_489830[2 * v5 + 2 + a2] + 1;\n    else\n      v7 = 2 * a2 + 8 * (v5 - dword_489850[a2]);\n    LOBYTE(v6) = a1 <= 0;\n    v8 = 0;\n    if ( (unsigned int)(v7 + 1) >= 3 )\n    {\n      v8 = 0;\n      v9 = v7;\n      do\n      {\n        if ( (unsigned int)++v8 > 0xF )\n          break;\n        v10 = v9 / 2 + 1;\n        v9 /= 2;\n      }\n      while ( v10 > 2 );\n    }\n    *a3 = 2 * v8 + 1;\n    *v4 = v6 + v7 - (signed int)ldexp(1.0, v8);\n  }\n  else\n  {\n    *a3 = 1;\n  }\n}\n", 
            "funcStartAddr": "0x480050L", 
            "funcEndAddr": "0x4800f0L", 
            "funcName": "sub_480050"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4800F0@<rax>(__int64 result@<rax>, _DWORD *a2@<rdx>, _DWORD *a3@<rcx>, int a4@<edi>, int a5@<esi>)\n{\n  _DWORD *v5; // r14\n  int v6; // ecx\n  int v7; // er15\n  int v8; // ebp\n  int v9; // ebx\n  int v10; // edi\n  int v11; // eax\n  unsigned int v12; // esi\n\n  v5 = a3;\n  if ( a4 )\n  {\n    v6 = -a4;\n    if ( -a4 < 1 )\n      v6 = a4;\n    v7 = 0;\n    v8 = (unsigned __int8)byte_489860[a5];\n    if ( v6 <= v8 )\n      v9 = (unsigned __int8)byte_492860[10 * (v6 - 1) + a5] + 1;\n    else\n      v9 = 32 * (v6 - v8) + 2 * a5;\n    LOBYTE(v7) = a4 <= 0;\n    v10 = 0;\n    if ( (unsigned int)(v9 + 1) >= 3 )\n    {\n      v10 = 0;\n      v11 = v9;\n      do\n      {\n        if ( (unsigned int)++v10 > 0xF )\n          break;\n        v12 = v11 / 2 + 1;\n        v11 /= 2;\n      }\n      while ( v12 > 2 );\n    }\n    *a2 = 2 * v10 + 1;\n    result = (unsigned int)(signed int)ldexp(1.0, v10);\n    *v5 = v7 + v9 - result;\n  }\n  else\n  {\n    *a2 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4800f0L", 
            "funcEndAddr": "0x4801a7L", 
            "funcName": "sub_4800F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4801B0@<rax>(__int64 result@<rax>, _DWORD *a2@<rdx>, _DWORD *a3@<rcx>, int a4@<edi>, int a5@<esi>)\n{\n  _DWORD *v5; // r14\n  int v6; // ecx\n  int v7; // er15\n  int v8; // ebp\n  int v9; // ebx\n  int v10; // edi\n  int v11; // eax\n  unsigned int v12; // esi\n\n  v5 = a3;\n  if ( a4 )\n  {\n    v6 = -a4;\n    if ( -a4 < 1 )\n      v6 = a4;\n    v7 = 0;\n    v8 = (unsigned __int8)byte_489C38[a5];\n    if ( v6 <= v8 )\n      v9 = (unsigned __int8)byte_492890[5 * (v6 - 1) + a5] + 1;\n    else\n      v9 = 16 * (v6 - v8) + 2 * a5 + 16;\n    LOBYTE(v7) = a4 <= 0;\n    v10 = 0;\n    if ( (unsigned int)(v9 + 1) >= 3 )\n    {\n      v10 = 0;\n      v11 = v9;\n      do\n      {\n        if ( (unsigned int)++v10 > 0xF )\n          break;\n        v12 = v11 / 2 + 1;\n        v11 /= 2;\n      }\n      while ( v12 > 2 );\n    }\n    *a2 = 2 * v10 + 1;\n    result = (unsigned int)(signed int)ldexp(1.0, v10);\n    *v5 = v7 + v9 - result;\n  }\n  else\n  {\n    *a2 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4801b0L", 
            "funcEndAddr": "0x480267L", 
            "funcName": "sub_4801B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480310(_DWORD *a1, signed int **a2)\n{\n  signed int v2; // er10\n  int v3; // ecx\n  __int64 result; // rax\n  signed int v5; // er8\n  signed int *v6; // rdx\n  unsigned int v7; // er9\n  char v8; // cl\n  bool v9; // zf\n  __int64 v10; // r10\n  __int64 v11; // r11\n\n  v2 = a1[1];\n  v3 = 3 * (v2 != -1);\n  result = (unsigned int)(v3 + 1);\n  v5 = 1;\n  if ( v2 == -1 )\n    v2 = 1;\n  a1[3] = result;\n  a1[4] = v2;\n  a1[5] = v2;\n  v6 = *a2;\n  v7 = 1 << v3;\n  v8 = *((_BYTE *)*a2 + 8);\n  while ( 1 )\n  {\n    v8 *= 2;\n    if ( v7 & v2 )\n      v8 |= 1u;\n    *((_BYTE *)v6 + 8) = v8;\n    v9 = v6[1]-- == 1;\n    if ( v9 )\n      break;\n    if ( v5 >= (signed int)result )\n      goto LABEL_11;\nLABEL_4:\n    v7 >>= 1;\n    v2 = a1[5];\n    ++v5;\n  }\n  v6[1] = 8;\n  v10 = *((_QWORD *)v6 + 4);\n  v11 = *v6;\n  *v6 = v11 + 1;\n  *(_BYTE *)(v10 + v11) = v8;\n  *((_BYTE *)v6 + 8) = 0;\n  result = (unsigned int)a1[3];\n  v8 = 0;\n  if ( v5 < (signed int)result )\n    goto LABEL_4;\nLABEL_11:\n  if ( *a1 )\n    (*a2)[10] = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x480310L", 
            "funcEndAddr": "0x4803b6L", 
            "funcName": "sub_480310"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4803C0(unsigned int *a1, signed int *a2)\n{\n  signed int *v2; // rbx\n  unsigned int *v3; // r14\n  unsigned int *v4; // r15\n  __int64 result; // rax\n  signed int v6; // edx\n  int v7; // edi\n  unsigned int v8; // esi\n  char v9; // cl\n  bool v10; // zf\n  __int64 v11; // r8\n  __int64 v12; // rdi\n\n  v2 = a2;\n  v3 = a1;\n  v4 = a1 + 3;\n  (*((void (__fastcall **)(_QWORD, _QWORD, unsigned int *, unsigned int *))v3 + 4))(a1[1], v3[2], v3 + 3, v3 + 4);\n  result = a1[3];\n  v6 = 1;\n  v7 = (1 << (signed int)result / 2) | a1[4] & ((1 << (signed int)result / 2) - 1);\n  v3[5] = v7;\n  if ( (signed int)result > 0 )\n  {\n    v8 = 1 << (result - 1);\n    v9 = *((_BYTE *)v2 + 8);\n    while ( 1 )\n    {\n      v9 *= 2;\n      if ( v8 & v7 )\n        v9 |= 1u;\n      *((_BYTE *)v2 + 8) = v9;\n      v10 = v2[1]-- == 1;\n      if ( v10 )\n      {\n        v2[1] = 8;\n        v11 = *((_QWORD *)v2 + 4);\n        v12 = *v2;\n        *v2 = v12 + 1;\n        *(_BYTE *)(v11 + v12) = v9;\n        *((_BYTE *)v2 + 8) = 0;\n        result = *v4;\n        v9 = 0;\n        if ( v6 >= (signed int)result )\n          return result;\n      }\n      else if ( v6 >= (signed int)result )\n      {\n        return result;\n      }\n      v8 >>= 1;\n      v7 = v3[5];\n      ++v6;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4803c0L", 
            "funcEndAddr": "0x48047aL", 
            "funcName": "sub_4803C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480480(__int64 a1, signed int *a2)\n{\n  __int64 result; // rax\n  unsigned int v3; // edx\n  char v4; // r8\n  signed int v5; // ecx\n  bool v6; // zf\n  __int64 v7; // r9\n  __int64 v8; // r10\n\n  result = *(unsigned int *)(a1 + 12);\n  if ( (signed int)result > 0 )\n  {\n    v3 = 1 << (result - 1);\n    v4 = *((_BYTE *)a2 + 8);\n    v5 = 0;\n    do\n    {\n      v4 *= 2;\n      *((_BYTE *)a2 + 8) = v4;\n      if ( v3 & *(_DWORD *)(a1 + 20) )\n      {\n        v4 |= 1u;\n        *((_BYTE *)a2 + 8) = v4;\n      }\n      v6 = a2[1]-- == 1;\n      if ( v6 )\n      {\n        a2[1] = 8;\n        v7 = *((_QWORD *)a2 + 4);\n        v8 = *a2;\n        *a2 = v8 + 1;\n        *(_BYTE *)(v7 + v8) = v4;\n        *((_BYTE *)a2 + 8) = 0;\n        result = *(unsigned int *)(a1 + 12);\n        v4 = 0;\n      }\n      v3 >>= 1;\n      ++v5;\n    }\n    while ( v5 < (signed int)result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480480L", 
            "funcEndAddr": "0x4804e6L", 
            "funcName": "sub_480480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480530(_DWORD *a1, signed int **a2)\n{\n  unsigned int v2; // er8\n  __int64 result; // rax\n  signed int v4; // er9\n  int v5; // er10\n  signed int *v6; // rsi\n  signed int v7; // er8\n  unsigned int v8; // er9\n  char v9; // cl\n  bool v10; // zf\n  __int64 v11; // r10\n  __int64 v12; // rdx\n\n  v2 = a1[1];\n  result = (unsigned int)a1[2];\n  a1[4] = v2;\n  a1[3] = result;\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v4 = result + 1;\n    v5 = 0;\n    do\n      v5 = ((v2 >> (v4-- - 2)) & 1) + 2 * v5;\n    while ( v4 > 1 );\n    a1[5] = v5;\n    v6 = *a2;\n    v7 = 1;\n    v8 = 1 << (result - 1);\n    v9 = *((_BYTE *)v6 + 8);\n    while ( 1 )\n    {\n      v9 *= 2;\n      if ( v8 & v5 )\n        v9 |= 1u;\n      *((_BYTE *)v6 + 8) = v9;\n      v10 = v6[1]-- == 1;\n      if ( v10 )\n      {\n        v6[1] = 8;\n        v11 = *((_QWORD *)v6 + 4);\n        v12 = *v6;\n        *v6 = v12 + 1;\n        *(_BYTE *)(v11 + v12) = v9;\n        *((_BYTE *)v6 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v9 = 0;\n        if ( v7 >= (signed int)result )\n          return result;\n      }\n      else if ( v7 >= (signed int)result )\n      {\n        return result;\n      }\n      v8 >>= 1;\n      v5 = a1[5];\n      ++v7;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480530L", 
            "funcEndAddr": "0x4805f6L", 
            "funcName": "sub_480530"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_480600(_DWORD *a1, signed int **a2)\n{\n  __int64 v2; // r8\n  int v3; // eax\n  unsigned int v4; // er9\n  __int64 v5; // rdx\n  signed __int64 v6; // rcx\n  signed __int64 result; // rax\n  int *v8; // r8\n  signed int v9; // er10\n  int v10; // er11\n  signed int *v11; // rsi\n  signed int v12; // er9\n  unsigned int v13; // er10\n  char v14; // cl\n  bool v15; // zf\n  __int64 v16; // r11\n  __int64 v17; // rdx\n\n  v2 = (signed int)a1[3];\n  if ( v2 == 3 )\n  {\n    a1[3] = 6;\n    v3 = a1[1];\n    if ( v3 <= 0 )\n      v4 = 3;\n    else\n      v4 = a1[2] | (4 * v3 - 4);\n    a1[4] = v4;\n    v8 = a1 + 5;\n    a1[5] = 0;\n    result = 6LL;\n    goto LABEL_9;\n  }\n  v5 = (signed int)a1[1];\n  v6 = 272 * v2 + 68LL * (signed int)a1[2];\n  result = *(unsigned int *)((char *)&dword_4928C0[v5] + v6);\n  a1[3] = result;\n  v4 = *(int *)((char *)&dword_492BF0[v5] + v6);\n  a1[4] = v4;\n  if ( !(_DWORD)result )\n  {\n    printf(\n      \"ERROR: (numcoeff,trailingones) not valid: vlc=%d (%d, %d)\\n\",\n      (unsigned int)v2,\n      v5,\n      (unsigned int)a1[2],\n      result);\n    exit(-1);\n  }\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v8 = a1 + 5;\nLABEL_9:\n    v9 = result + 1;\n    v10 = 0;\n    do\n      v10 = ((v4 >> (v9-- - 2)) & 1) + 2 * v10;\n    while ( v9 > 1 );\n    *v8 = v10;\n    v11 = *a2;\n    v12 = 1;\n    v13 = 1 << (result - 1);\n    v14 = *((_BYTE *)v11 + 8);\n    while ( 1 )\n    {\n      v14 *= 2;\n      if ( v13 & v10 )\n        v14 |= 1u;\n      *((_BYTE *)v11 + 8) = v14;\n      v15 = v11[1]-- == 1;\n      if ( v15 )\n      {\n        v11[1] = 8;\n        v16 = *((_QWORD *)v11 + 4);\n        v17 = *v11;\n        *v11 = v17 + 1;\n        *(_BYTE *)(v16 + v17) = v14;\n        *((_BYTE *)v11 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v14 = 0;\n        if ( v12 >= (signed int)result )\n          return result;\n      }\n      else if ( v12 >= (signed int)result )\n      {\n        return result;\n      }\n      v13 >>= 1;\n      v10 = *v8;\n      ++v12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480600L", 
            "funcEndAddr": "0x480743L", 
            "funcName": "sub_480600"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480750(signed int *a1, signed int **a2)\n{\n  __int64 v2; // r9\n  signed __int64 v3; // rcx\n  __int64 result; // rax\n  unsigned int v5; // er8\n  signed int v6; // er9\n  int v7; // er10\n  signed int *v8; // rsi\n  signed int v9; // er8\n  unsigned int v10; // er9\n  char v11; // cl\n  bool v12; // zf\n  __int64 v13; // r10\n  __int64 v14; // rdx\n\n  v2 = a1[1];\n  v3 = 272LL * *((signed int *)off_49F6D0 + 18175) + 68LL * a1[2];\n  result = *(unsigned int *)((char *)&dword_492E10[v2] + v3);\n  a1[3] = result;\n  v5 = *(int *)((char *)&dword_493140[v2] + v3);\n  a1[4] = v5;\n  if ( !(_DWORD)result )\n  {\n    printf(\"ERROR: (numcoeff,trailingones) not valid: (%d, %d)\\n\", (unsigned int)v2, result);\n    exit(-1);\n  }\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v6 = result + 1;\n    v7 = 0;\n    do\n      v7 = ((v5 >> (v6-- - 2)) & 1) + 2 * v7;\n    while ( v6 > 1 );\n    a1[5] = v7;\n    v8 = *a2;\n    v9 = 1;\n    v10 = 1 << (result - 1);\n    v11 = *((_BYTE *)v8 + 8);\n    while ( 1 )\n    {\n      v11 *= 2;\n      if ( v10 & v7 )\n        v11 |= 1u;\n      *((_BYTE *)v8 + 8) = v11;\n      v12 = v8[1]-- == 1;\n      if ( v12 )\n      {\n        v8[1] = 8;\n        v13 = *((_QWORD *)v8 + 4);\n        v14 = *v8;\n        *v8 = v14 + 1;\n        *(_BYTE *)(v13 + v14) = v11;\n        *((_BYTE *)v8 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v11 = 0;\n        if ( v9 >= (signed int)result )\n          return result;\n      }\n      else if ( v9 >= (signed int)result )\n      {\n        return result;\n      }\n      v10 >>= 1;\n      v7 = a1[5];\n      ++v9;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480750L", 
            "funcEndAddr": "0x480860L", 
            "funcName": "sub_480750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480860(signed int *a1, signed int **a2)\n{\n  __int64 v2; // rcx\n  signed __int64 v3; // rdx\n  __int64 result; // rax\n  unsigned int v5; // er8\n  signed int v6; // er9\n  int v7; // er10\n  signed int *v8; // rsi\n  signed int v9; // er8\n  unsigned int v10; // er9\n  char v11; // cl\n  bool v12; // zf\n  __int64 v13; // r10\n  __int64 v14; // rdx\n\n  v2 = a1[1];\n  v3 = (signed __int64)a1[3] << 6;\n  result = *(unsigned int *)((char *)&dword_493580[v2] + v3);\n  a1[3] = result;\n  v5 = *(int *)((char *)&dword_493940[v2] + v3);\n  a1[4] = v5;\n  if ( !(_DWORD)result )\n  {\n    printf(\"ERROR: (TotalZeros) not valid: (%d)\\n\", (unsigned int)v2, result);\n    exit(-1);\n  }\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v6 = result + 1;\n    v7 = 0;\n    do\n      v7 = ((v5 >> (v6-- - 2)) & 1) + 2 * v7;\n    while ( v6 > 1 );\n    a1[5] = v7;\n    v8 = *a2;\n    v9 = 1;\n    v10 = 1 << (result - 1);\n    v11 = *((_BYTE *)v8 + 8);\n    while ( 1 )\n    {\n      v11 *= 2;\n      if ( v10 & v7 )\n        v11 |= 1u;\n      *((_BYTE *)v8 + 8) = v11;\n      v12 = v8[1]-- == 1;\n      if ( v12 )\n      {\n        v8[1] = 8;\n        v13 = *((_QWORD *)v8 + 4);\n        v14 = *v8;\n        *v8 = v14 + 1;\n        *(_BYTE *)(v13 + v14) = v11;\n        *((_BYTE *)v8 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v11 = 0;\n        if ( v9 >= (signed int)result )\n          return result;\n      }\n      else if ( v9 >= (signed int)result )\n      {\n        return result;\n      }\n      v10 >>= 1;\n      v7 = a1[5];\n      ++v9;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480860L", 
            "funcEndAddr": "0x48094fL", 
            "funcName": "sub_480860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480950(signed int *a1, signed int **a2)\n{\n  __int64 v2; // rcx\n  signed __int64 v3; // rdx\n  __int64 result; // rax\n  unsigned int v5; // er8\n  signed int v6; // er9\n  int v7; // er10\n  signed int *v8; // rsi\n  signed int v9; // er8\n  unsigned int v10; // er9\n  char v11; // cl\n  bool v12; // zf\n  __int64 v13; // r10\n  __int64 v14; // rdx\n\n  v2 = a1[1];\n  v3 = 960LL * *((signed int *)off_49F6D0 + 18175) + ((signed __int64)a1[3] << 6);\n  result = *(unsigned int *)((char *)&dword_493940[v2] + v3);\n  a1[3] = result;\n  v5 = *(int *)((char *)&dword_494480[v2] + v3);\n  a1[4] = v5;\n  if ( !(_DWORD)result )\n  {\n    printf(\"ERROR: (TotalZeros) not valid: (%d)\\n\", (unsigned int)v2, result);\n    exit(-1);\n  }\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v6 = result + 1;\n    v7 = 0;\n    do\n      v7 = ((v5 >> (v6-- - 2)) & 1) + 2 * v7;\n    while ( v6 > 1 );\n    a1[5] = v7;\n    v8 = *a2;\n    v9 = 1;\n    v10 = 1 << (result - 1);\n    v11 = *((_BYTE *)v8 + 8);\n    while ( 1 )\n    {\n      v11 *= 2;\n      if ( v10 & v7 )\n        v11 |= 1u;\n      *((_BYTE *)v8 + 8) = v11;\n      v12 = v8[1]-- == 1;\n      if ( v12 )\n      {\n        v8[1] = 8;\n        v13 = *((_QWORD *)v8 + 4);\n        v14 = *v8;\n        *v8 = v14 + 1;\n        *(_BYTE *)(v13 + v14) = v11;\n        *((_BYTE *)v8 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v11 = 0;\n        if ( v9 >= (signed int)result )\n          return result;\n      }\n      else if ( v9 >= (signed int)result )\n      {\n        return result;\n      }\n      v10 >>= 1;\n      v7 = a1[5];\n      ++v9;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480950L", 
            "funcEndAddr": "0x480a5fL", 
            "funcName": "sub_480950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480A60(signed int *a1, signed int **a2)\n{\n  __int64 v2; // rcx\n  signed __int64 v3; // rdx\n  __int64 result; // rax\n  unsigned int v5; // er8\n  signed int v6; // er9\n  int v7; // er10\n  signed int *v8; // rsi\n  signed int v9; // er8\n  unsigned int v10; // er9\n  char v11; // cl\n  bool v12; // zf\n  __int64 v13; // r10\n  __int64 v14; // rdx\n\n  v2 = a1[1];\n  v3 = (signed __int64)a1[3] << 6;\n  result = *(unsigned int *)((char *)&dword_495380[v2] + v3);\n  a1[3] = result;\n  v5 = *(int *)((char *)&dword_495740[v2] + v3);\n  a1[4] = v5;\n  if ( !(_DWORD)result )\n  {\n    printf(\"ERROR: (run) not valid: (%d)\\n\", (unsigned int)v2, result);\n    exit(-1);\n  }\n  a1[5] = 0;\n  if ( (signed int)result > 0 )\n  {\n    v6 = result + 1;\n    v7 = 0;\n    do\n      v7 = ((v5 >> (v6-- - 2)) & 1) + 2 * v7;\n    while ( v6 > 1 );\n    a1[5] = v7;\n    v8 = *a2;\n    v9 = 1;\n    v10 = 1 << (result - 1);\n    v11 = *((_BYTE *)v8 + 8);\n    while ( 1 )\n    {\n      v11 *= 2;\n      if ( v10 & v7 )\n        v11 |= 1u;\n      *((_BYTE *)v8 + 8) = v11;\n      v12 = v8[1]-- == 1;\n      if ( v12 )\n      {\n        v8[1] = 8;\n        v13 = *((_QWORD *)v8 + 4);\n        v14 = *v8;\n        *v8 = v14 + 1;\n        *(_BYTE *)(v13 + v14) = v11;\n        *((_BYTE *)v8 + 8) = 0;\n        result = (unsigned int)a1[3];\n        v11 = 0;\n        if ( v9 >= (signed int)result )\n          return result;\n      }\n      else if ( v9 >= (signed int)result )\n      {\n        return result;\n      }\n      v10 >>= 1;\n      v7 = a1[5];\n      ++v9;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480a60L", 
            "funcEndAddr": "0x480b4fL", 
            "funcName": "sub_480A60"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_480B50(_DWORD *a1, signed int **a2)\n{\n  int v2; // ecx\n  int v3; // eax\n  int v4; // edx\n  signed __int64 result; // rax\n  _DWORD *v6; // r8\n  int *v7; // rdi\n  unsigned int v8; // er9\n  signed int v9; // er10\n  int v10; // er11\n  signed int *v11; // rsi\n  signed int v12; // er9\n  unsigned int v13; // er10\n  char v14; // cl\n  bool v15; // zf\n  __int64 v16; // r11\n  __int64 v17; // rdx\n\n  v2 = -a1[1];\n  if ( v2 < 1 )\n    v2 = a1[1];\n  v3 = a1[1] >> 31;\n  if ( v2 >= 8 )\n  {\n    v6 = a1 + 3;\n    if ( v2 > 15 )\n    {\n      *v6 = 28;\n      v8 = (v3 + 2 * v2 - 32) | 0x1000;\n      result = 28LL;\n    }\n    else\n    {\n      *v6 = 19;\n      v8 = (v3 + 2 * v2 - 16) | 0x10;\n      result = 19LL;\n    }\n    a1[4] = v8;\n    a1[5] = 0;\n    v7 = a1 + 5;\n    goto LABEL_10;\n  }\n  v4 = v3 + 2 * v2;\n  result = (unsigned int)(v3 + 2 * v2 - 1);\n  a1[3] = result;\n  *((_QWORD *)a1 + 2) = 1LL;\n  if ( v4 >= 2 )\n  {\n    v6 = a1 + 3;\n    v7 = a1 + 5;\n    v8 = 1;\nLABEL_10:\n    v9 = result + 1;\n    v10 = 0;\n    do\n      v10 = ((v8 >> (v9-- - 2)) & 1) + 2 * v10;\n    while ( v9 > 1 );\n    *v7 = v10;\n    v11 = *a2;\n    v12 = 1;\n    v13 = 1 << (result - 1);\n    v14 = *((_BYTE *)v11 + 8);\n    while ( 1 )\n    {\n      v14 *= 2;\n      if ( v13 & v10 )\n        v14 |= 1u;\n      *((_BYTE *)v11 + 8) = v14;\n      v15 = v11[1]-- == 1;\n      if ( v15 )\n      {\n        v11[1] = 8;\n        v16 = *((_QWORD *)v11 + 4);\n        v17 = *v11;\n        *v11 = v17 + 1;\n        *(_BYTE *)(v16 + v17) = v14;\n        *((_BYTE *)v11 + 8) = 0;\n        result = (unsigned int)*v6;\n        v14 = 0;\n        if ( v12 >= (signed int)result )\n          return result;\n      }\n      else if ( v12 >= (signed int)result )\n      {\n        return result;\n      }\n      v13 >>= 1;\n      v10 = *v7;\n      ++v12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480b50L", 
            "funcEndAddr": "0x480c86L", 
            "funcName": "sub_480B50"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_480C90(__int64 a1, int a2, signed int **a3)\n{\n  int v3; // er9\n  char v4; // cl\n  signed int v5; // eax\n  signed int v6; // er9\n  signed __int64 result; // rax\n  int v8; // er10\n  int v9; // er9\n  int v10; // er10\n  unsigned int v11; // er8\n  signed int v12; // er9\n  int v13; // er10\n  signed int *v14; // rdx\n  signed int v15; // er8\n  unsigned int v16; // er9\n  char v17; // cl\n  bool v18; // zf\n  __int64 v19; // r10\n  __int64 v20; // rsi\n\n  v3 = -*(_DWORD *)(a1 + 4);\n  if ( v3 < 1 )\n    v3 = *(_DWORD *)(a1 + 4);\n  v4 = a2 - 1;\n  v5 = 15 << (a2 - 1);\n  if ( v3 <= v5 )\n  {\n    v9 = v3 - 1;\n    v10 = v9 & ~(-1 << v4);\n    result = (unsigned int)(a2 + (v9 >> v4) + 1);\n    v6 = 1 << a2;\n    v8 = 2 * v10;\n  }\n  else\n  {\n    v6 = 2 * (~v5 + v3);\n    result = 28LL;\n    v8 = 4096;\n  }\n  v11 = v8 | v6 | (*(_DWORD *)(a1 + 4) >> 31);\n  *(_DWORD *)(a1 + 12) = result;\n  *(_QWORD *)(a1 + 16) = v11;\n  if ( (signed int)result > 0 )\n  {\n    v12 = result + 1;\n    v13 = 0;\n    do\n      v13 = ((v11 >> (v12-- - 2)) & 1) + 2 * v13;\n    while ( v12 > 1 );\n    *(_DWORD *)(a1 + 20) = v13;\n    v14 = *a3;\n    v15 = 1;\n    v16 = 1 << (result - 1);\n    v17 = *((_BYTE *)v14 + 8);\n    while ( 1 )\n    {\n      v17 *= 2;\n      if ( v16 & v13 )\n        v17 |= 1u;\n      *((_BYTE *)v14 + 8) = v17;\n      v18 = v14[1]-- == 1;\n      if ( v18 )\n      {\n        v14[1] = 8;\n        v19 = *((_QWORD *)v14 + 4);\n        v20 = *v14;\n        *v14 = v20 + 1;\n        *(_BYTE *)(v19 + v20) = v17;\n        *((_BYTE *)v14 + 8) = 0;\n        result = *(unsigned int *)(a1 + 12);\n        v17 = 0;\n        if ( v15 >= (signed int)result )\n          return result;\n      }\n      else if ( v15 >= (signed int)result )\n      {\n        return result;\n      }\n      v16 >>= 1;\n      v13 = *(_DWORD *)(a1 + 20);\n      ++v15;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480c90L", 
            "funcEndAddr": "0x480db6L", 
            "funcName": "sub_480C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_480DC0(signed int *a1)\n{\n  __int64 result; // rax\n  unsigned int v2; // esi\n  __int64 v3; // rcx\n\n  result = (unsigned int)a1[1];\n  if ( (signed int)result <= 7 )\n  {\n    v2 = (*((unsigned __int8 *)a1 + 8) << result) | (0xFFu >> (8 - result));\n    *((_BYTE *)a1 + 8) = (*((_BYTE *)a1 + 8) << result) | (0xFFu >> (8 - result));\n    *((_DWORD *)off_49F6D8 + *((signed int *)off_49F6D0 + 6) + 332) += result;\n    result = *((_QWORD *)a1 + 4);\n    v3 = *a1;\n    *a1 = v3 + 1;\n    *(_BYTE *)(result + v3) = v2;\n    a1[1] = 8;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x480dc0L", 
            "funcEndAddr": "0x480e15L", 
            "funcName": "sub_480DC0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_480E20(int a1)\n{\n  signed int *v1; // r11\n  __int64 v2; // rax\n  unsigned __int64 v3; // r12\n  _QWORD *v4; // r8\n  char *v5; // rcx\n  char *v6; // rsi\n  unsigned __int64 v7; // r10\n  _QWORD *v8; // r9\n  __int64 v9; // r14\n  __int64 v10; // r15\n  __int64 v11; // rax\n  signed __int64 v12; // rbp\n  _DWORD *v13; // rdi\n  _DWORD *v14; // rdx\n  __int64 v15; // rsi\n  double v16; // xmm1_8\n  __int64 v17; // rbp\n  __int64 v18; // rbx\n  __int64 v19; // rcx\n  __int64 v20; // rdi\n  unsigned __int16 *v21; // rcx\n  signed __int64 v22; // rdx\n  int v23; // er13\n  char v24; // cl\n  unsigned __int64 v25; // r14\n  signed __int64 result; // rax\n  signed int v27; // er9\n  __int64 v28; // r8\n  __int64 v29; // r9\n  __int64 v30; // rax\n  __int64 v31; // rdx\n  signed __int64 v32; // r10\n  __int64 v33; // rax\n  __int64 v34; // r12\n  __int64 v35; // rdi\n  double v36; // xmm5_8\n  __int64 v37; // rbx\n  signed int v38; // er15\n  unsigned __int16 *v39; // rax\n  __int64 v40; // rdx\n  signed int v41; // eax\n  signed __int64 v42; // rdx\n  signed __int64 v43; // r14\n  __int64 v44; // rbx\n  int v45; // edx\n  signed int v46; // ebp\n  char *v47; // r12\n  __int64 v48; // rbp\n  __int64 v49; // rax\n  __int64 v50; // rsi\n  __int64 v51; // rbx\n  __int64 v52; // rdi\n  __int64 v53; // rdx\n  int v54; // esi\n  signed int v55; // er14\n  _QWORD *v56; // r8\n  _QWORD *v57; // r9\n  char *v58; // rdx\n  char *v59; // rsi\n  unsigned __int64 v60; // r10\n  __int64 v61; // r11\n  __int64 v62; // r14\n  signed __int64 v63; // rcx\n  _DWORD *v64; // rdi\n  _DWORD *v65; // rbp\n  int v66; // [rsp+0h] [rbp-374h]\n  __int64 v67; // [rsp+4h] [rbp-370h]\n  signed int v68; // [rsp+1Ch] [rbp-358h]\n  unsigned __int64 v69; // [rsp+24h] [rbp-350h]\n  __int64 v70; // [rsp+2Ch] [rbp-348h]\n  __int64 v71; // [rsp+44h] [rbp-330h]\n  __int64 v72; // [rsp+4Ch] [rbp-328h]\n  unsigned __int64 v73; // [rsp+54h] [rbp-320h]\n  signed __int64 v74; // [rsp+5Ch] [rbp-318h]\n  _QWORD *v75; // [rsp+64h] [rbp-310h]\n  char v76[8]; // [rsp+6Ch] [rbp-308h]\n  char v77; // [rsp+74h] [rbp-300h]\n  char v78[352]; // [rsp+7Ch] [rbp-2F8h]\n  char v79[8]; // [rsp+1DCh] [rbp-198h]\n  char v80; // [rsp+1E4h] [rbp-190h]\n\n  v66 = a1;\n  v1 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && (v2 = *((signed int *)off_49F6D0 + 3), *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v2 + 532)) )\n  {\n    v3 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1u) + 4;\n  }\n  else\n  {\n    v3 = 2LL;\n  }\n  dword_4FA0EC = 5;\n  dword_4FA0C0 = 5;\n  dword_4FA15C = 16;\n  dword_4FA158 = 16;\n  v4 = qword_4F9F88;\n  v5 = v76;\n  v6 = v79;\n  v7 = 0LL;\n  v8 = qword_4F9F80;\n  do\n  {\n    if ( *((_DWORD *)qword_4F9BE0 + v7) > 0 )\n    {\n      v9 = v4[v7];\n      v10 = v8[v7];\n      v11 = 0LL;\n      v12 = 0LL;\n      do\n      {\n        v13 = *(_DWORD **)(v9 + 8 * v12);\n        v14 = *(_DWORD **)(v10 + 8 * v12);\n        *(_DWORD *)&v6[v11 + 8] = 0;\n        *(_QWORD *)&v6[v11] = 0LL;\n        *(_DWORD *)&v5[v11 + 8] = 32;\n        *(_QWORD *)&v5[v11] = 137438953504LL;\n        *v13 = 32;\n        *v14 = 0;\n        v13[1] = 32;\n        v14[1] = 0;\n        v13[2] = 32;\n        v14[2] = 0;\n        ++v12;\n        v11 += 12LL;\n      }\n      while ( v12 < *((signed int *)qword_4F9BE0 + v7) );\n    }\n    ++v7;\n    v5 += 180;\n    v6 += 180;\n  }\n  while ( v7 < v3 );\n  v15 = v1[15];\n  v16 = 0.0;\n  if ( v15 > 0 )\n  {\n    v17 = v1[13];\n    v16 = 0.0;\n    v18 = 0LL;\n    do\n    {\n      if ( (signed int)v17 > 0 )\n      {\n        v19 = *(_QWORD *)(qword_4F9EB0 + 8 * v18);\n        v20 = 0LL;\n        if ( (unsigned __int64)(v17 - 1) >= 3 )\n        {\n          do\n          {\n            v16 = (double)*(unsigned __int16 *)(v19 + 2 * v20 + 6)\n                + (double)*(unsigned __int16 *)(v19 + 2 * v20 + 4)\n                + (double)*(unsigned __int16 *)(v19 + 2 * v20 + 2)\n                + (double)*(unsigned __int16 *)(v19 + 2 * v20)\n                + v16;\n            v20 += 4LL;\n          }\n          while ( v1[13] - (unsigned __int64)(v1[13] & 3) != v20 );\n        }\n        if ( v1[13] & 3 )\n        {\n          v21 = (unsigned __int16 *)(v19 + 2 * v20);\n          v22 = -(signed __int64)(v1[13] & 3);\n          do\n          {\n            v16 = v16 + (double)*v21;\n            ++v21;\n            ++v22;\n          }\n          while ( v22 );\n        }\n      }\n      ++v18;\n    }\n    while ( v18 < v15 );\n  }\n  v68 = v1[15];\n  v67 = (unsigned int)(4 * v15 + 32);\n  v23 = dword_4FA15C;\n  v24 = dword_4FA0EC;\n  v75 = base;\n  v25 = 0LL;\n  v69 = v3;\n  do\n  {\n    result = *((signed int *)qword_4F9BE0 + v25);\n    v74 = result;\n    if ( result > 0 )\n    {\n      v72 = (__int64)*(&base + v25);\n      v27 = v1[13];\n      v28 = (unsigned int)(4 * v27 + 32);\n      v29 = (unsigned int)(v68 * v27);\n      v30 = v29 & 3;\n      v31 = (signed int)v29 - v30;\n      v70 = -v30;\n      v32 = 0LL;\n      v71 = (signed int)v29 - v30;\n      v73 = v25;\n      while ( 1 )\n      {\n        v33 = *(_QWORD *)(v72 + 8 * v32);\n        v34 = *(_QWORD *)(v33 + 6432);\n        v35 = *(_QWORD *)(v33 + 6440);\n        if ( (signed int)v29 <= 0 )\n        {\n          v36 = 0.0;\n          if ( v66 )\n            goto LABEL_38;\n          goto LABEL_27;\n        }\n        if ( (unsigned __int64)((signed int)v29 - 1LL) < 3 )\n          break;\n        v36 = 0.0;\n        v37 = 0LL;\n        do\n        {\n          v36 = (double)*(unsigned __int16 *)(v34 + 2 * v37 + 6)\n              + (double)*(unsigned __int16 *)(v34 + 2 * v37 + 4)\n              + (double)*(unsigned __int16 *)(v34 + 2 * v37 + 2)\n              + (double)*(unsigned __int16 *)(v34 + 2 * v37)\n              + v36;\n          v37 += 4LL;\n        }\n        while ( v31 != v37 );\n        if ( v29 & 3 )\n          goto LABEL_35;\nLABEL_37:\n        if ( v66 )\n        {\nLABEL_38:\n          v41 = (signed int)((v16 - v36) / (double)(signed int)v29 + 0.5);\n          v42 = 12 * v32;\n          if ( v41 >= 128 )\n            v41 = 127;\n          if ( v41 <= -129 )\n            v41 = -128;\n          *(_DWORD *)&v79[180 * v25 + v42] = v41;\n          *(_DWORD *)&v76[180 * v25 + v42] = 32;\n          goto LABEL_43;\n        }\nLABEL_27:\n        if ( v36 != 0.0 )\n        {\n          v38 = (signed int)(32.0 * v16 / v36 + 0.5);\n          if ( (unsigned int)(v38 + 64) > 0xBF )\n            v38 = 32;\n          *(_DWORD *)&v78[180 * v25 - 16 + 12 * v32] = v38;\n          goto LABEL_44;\n        }\n        *(_DWORD *)&v76[180 * v25 + 12 * v32] = 32;\nLABEL_43:\n        v38 = 32;\nLABEL_44:\n        v43 = 180 * v25;\n        result = (signed __int64)&v76[v43];\n        *(_QWORD *)&v76[12 * v32 + 4 + v43] = 137438953504LL;\n        if ( (signed int)v29 > 0 )\n        {\n          result = *(unsigned int *)&v79[12 * v32 + v43];\n          v44 = 0LL;\n          do\n          {\n            v45 = result + ((v23 + v38 * *(unsigned __int16 *)(v34 + 2 * v44)) >> v24);\n            if ( v45 < 0 )\n            {\n              LOWORD(v46) = 0;\n            }\n            else\n            {\n              v46 = v1[18171];\n              if ( v45 <= v46 )\n                LOWORD(v46) = result + ((v23 + v38 * *(unsigned __int16 *)(v34 + 2 * v44)) >> v24);\n            }\n            *(_WORD *)(v35 + 2 * v44++) = v46;\n          }\n          while ( v29 != v44 );\n        }\n        if ( (signed int)v67 > 0 )\n        {\n          result = (signed __int64)&v79[v43];\n          v47 = &v79[12 * v32 + v43];\n          v48 = 0LL;\n          do\n          {\n            if ( (signed int)v28 > 0 )\n            {\n              v49 = v75[v32];\n              v50 = *(_QWORD *)(v49 + 6456);\n              v51 = *(_QWORD *)(*(_QWORD *)(v49 + 6448) + 8 * v48);\n              result = *(unsigned int *)v47;\n              v52 = *(_QWORD *)(v50 + 8 * v48);\n              v53 = 0LL;\n              do\n              {\n                v54 = result + ((v23 + v38 * *(unsigned __int16 *)(v51 + 2 * v53)) >> v24);\n                if ( v54 < 0 )\n                {\n                  LOWORD(v55) = 0;\n                }\n                else\n                {\n                  v55 = v1[18171];\n                  if ( v54 <= v55 )\n                    LOWORD(v55) = result + ((v23 + v38 * *(unsigned __int16 *)(v51 + 2 * v53)) >> v24);\n                }\n                *(_WORD *)(v52 + 2 * v53++) = v55;\n              }\n              while ( v28 != v53 );\n            }\n            ++v48;\n          }\n          while ( v48 != v67 );\n        }\n        ++v32;\n        v25 = v73;\n        v31 = v71;\n        if ( v32 >= v74 )\n          goto LABEL_62;\n      }\n      v36 = 0.0;\n      v37 = 0LL;\n      if ( !(v29 & 3) )\n        goto LABEL_37;\nLABEL_35:\n      v39 = (unsigned __int16 *)(v34 + 2 * v37);\n      v40 = v70;\n      do\n      {\n        v36 = v36 + (double)*v39;\n        ++v39;\n        ++v40;\n      }\n      while ( v40 );\n      goto LABEL_37;\n    }\nLABEL_62:\n    ++v25;\n  }\n  while ( v25 < v69 );\n  v56 = qword_4F9F88;\n  v57 = qword_4F9F80;\n  v58 = &v77;\n  v59 = &v80;\n  v60 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)qword_4F9BE0 + v60) > 0 )\n    {\n      v61 = v56[v60];\n      v62 = v57[v60];\n      result = 0LL;\n      v63 = 0LL;\n      do\n      {\n        v64 = *(_DWORD **)(v61 + 8 * v63);\n        v65 = *(_DWORD **)(v62 + 8 * v63);\n        *v64 = *(_DWORD *)&v58[result - 8];\n        *v65 = *(_DWORD *)&v59[result - 8];\n        v64[1] = *(_DWORD *)&v58[result - 4];\n        v65[1] = *(_DWORD *)&v59[result - 4];\n        v64[2] = *(_DWORD *)&v58[result];\n        v65[2] = *(_DWORD *)&v59[result];\n        ++v63;\n        result += 12LL;\n      }\n      while ( v63 < *((signed int *)qword_4F9BE0 + v60) );\n    }\n    ++v60;\n    v58 += 180;\n    v59 += 180;\n  }\n  while ( v60 < v69 );\n  return result;\n}\n", 
            "funcStartAddr": "0x480e20L", 
            "funcEndAddr": "0x4814cdL", 
            "funcName": "sub_480E20"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_4814D0()\n{\n  signed int *v0; // r14\n  __int64 v1; // rax\n  unsigned __int64 v2; // r12\n  _BOOL4 v3; // edx\n  signed int v4; // edx\n  signed int v5; // edx\n  _QWORD *v6; // r8\n  char *v7; // r13\n  char *v8; // rcx\n  unsigned __int64 v9; // r10\n  _QWORD *v10; // r9\n  __int64 v11; // r11\n  __int64 v12; // r15\n  __int64 v13; // rax\n  signed __int64 v14; // rdi\n  signed int *v15; // rsi\n  _DWORD *v16; // rbp\n  __int64 v17; // rdi\n  _QWORD *v18; // rcx\n  _QWORD *v19; // r9\n  __int64 v20; // r10\n  __int64 v21; // rsi\n  char *v22; // r8\n  __int64 v23; // r13\n  __int64 v24; // r15\n  int v25; // edi\n  int v26; // ebx\n  _DWORD *v27; // r12\n  __int64 v28; // r11\n  int v29; // ebp\n  int v30; // eax\n  int v31; // eax\n  int v32; // edx\n  signed int v33; // ebp\n  signed int v34; // eax\n  int v35; // edx\n  _QWORD *v36; // r8\n  int v37; // esi\n  char *v38; // r9\n  signed __int64 v39; // r10\n  unsigned __int64 v40; // r11\n  __int64 v41; // rdi\n  __int64 v42; // rbp\n  char *v43; // rcx\n  signed __int64 v44; // rax\n  _DWORD *v45; // rsi\n  _DWORD *v46; // rbx\n  __int64 v47; // rdx\n  double v48; // xmm0_8\n  __int64 v49; // rax\n  __int64 v50; // rbx\n  __int64 v51; // rbp\n  __int64 v52; // rcx\n  unsigned __int16 *v53; // rcx\n  signed __int64 v54; // rbp\n  int v55; // er15\n  char v56; // r12\n  unsigned int v57; // eax\n  signed int v58; // ebx\n  __int64 v59; // rbp\n  __int64 v60; // r13\n  __int64 v61; // rcx\n  __int64 v62; // rsi\n  signed __int64 v63; // rdi\n  __int64 v64; // rax\n  __int64 v65; // r9\n  __int64 v66; // r8\n  signed int v67; // er10\n  double v68; // xmm0_8\n  __int64 v69; // rax\n  unsigned __int16 *v70; // rax\n  __int64 v71; // rcx\n  signed __int64 v72; // rax\n  char *v73; // rcx\n  __int64 v74; // r11\n  int v75; // edx\n  int v76; // eax\n  int v77; // ecx\n  int v78; // edx\n  int v79; // eax\n  int v80; // ecx\n  signed __int64 v81; // r11\n  __int64 v82; // r8\n  __int64 v83; // rax\n  __int64 v84; // rdx\n  __int64 v85; // rax\n  __int64 v86; // rdi\n  __int64 v87; // rsi\n  int v88; // ebp\n  int v89; // ebx\n  int v90; // ecx\n  int v91; // edx\n  _QWORD *v92; // r8\n  _QWORD *v93; // r9\n  char *v94; // rcx\n  char *v95; // rsi\n  __int64 v96; // r10\n  __int64 v97; // r11\n  __int64 v98; // r14\n  __int64 v99; // rax\n  signed __int64 v100; // rdx\n  _DWORD *v101; // rdi\n  _DWORD *v102; // rbp\n  int v103; // edx\n  signed __int64 result; // rax\n  __int64 v105; // rsi\n  __int64 v106; // rax\n  __int64 v107; // rdx\n  signed __int64 v108; // rdi\n  _DWORD *v109; // rbx\n  signed int v110; // ebp\n  __int64 v111; // rcx\n  int v112; // ecx\n  int v113; // edi\n  _QWORD *v114; // r8\n  _QWORD *v115; // r9\n  int v116; // esi\n  signed __int64 v117; // r10\n  __int64 v118; // r11\n  _DWORD *v119; // rbp\n  __int64 v120; // r14\n  __int64 v121; // rax\n  signed __int64 v122; // rcx\n  _DWORD *v123; // rsi\n  _DWORD *v124; // rdx\n  _DWORD *v125; // rdi\n  _QWORD *v126; // rax\n  _QWORD *v127; // rcx\n  __int64 v128; // rdx\n  __int64 v129; // rsi\n  __int64 v130; // rdi\n  signed __int64 v131; // rbp\n  signed int *v132; // rbx\n  __int64 v133; // rbx\n  int v134; // edi\n  _QWORD *v135; // r12\n  _QWORD *v136; // r9\n  __int64 v137; // r10\n  signed int v138; // eax\n  signed int v139; // ecx\n  __int64 v140; // r11\n  int v141; // eax\n  signed __int64 v142; // rbp\n  __int64 v143; // r15\n  unsigned __int64 v144; // rcx\n  unsigned __int64 v145; // rax\n  __int64 v146; // r13\n  unsigned __int64 v147; // rsi\n  unsigned __int64 v148; // r11\n  unsigned __int64 v149; // rax\n  unsigned __int64 v150; // r13\n  bool v151; // r8\n  bool v152; // bp\n  bool v153; // r11\n  bool v154; // zf\n  signed __int64 v155; // rsi\n  __int64 v156; // rax\n  __int128 v157; // xmm1\n  __int128 v158; // xmm1\n  __int128 v159; // xmm1\n  __int128 v160; // xmm1\n  __int128 v161; // xmm1\n  __int128 v162; // xmm1\n  __int64 v163; // rax\n  unsigned __int64 v164; // rbx\n  unsigned __int64 v165; // rcx\n  __int64 v166; // rax\n  unsigned __int64 v167; // rdx\n  unsigned __int64 v168; // rdi\n  __int64 v169; // r8\n  __int64 v170; // rax\n  unsigned __int64 v171; // rcx\n  unsigned __int64 v172; // rdx\n  __int64 v173; // rax\n  unsigned __int64 v174; // rdi\n  unsigned __int64 v175; // rbx\n  signed __int64 v176; // rsi\n  unsigned __int64 v177; // rbp\n  unsigned __int64 v178; // r12\n  unsigned __int64 v179; // rsi\n  unsigned __int64 v180; // rax\n  bool v181; // r13\n  bool v182; // r9\n  bool v183; // r10\n  bool v184; // bp\n  bool v185; // r11\n  bool v186; // si\n  bool v187; // r15\n  bool v188; // al\n  signed __int64 v189; // rsi\n  __int64 v190; // rax\n  __int128 v191; // xmm1\n  __int128 v192; // xmm1\n  __int128 v193; // xmm1\n  __int128 v194; // xmm1\n  __int128 v195; // xmm1\n  __int128 v196; // xmm1\n  signed __int64 v197; // rcx\n  signed __int64 v198; // rdx\n  signed __int64 v199; // rdi\n  __int64 v200; // rbp\n  __int64 v201; // rsi\n  signed int v202; // [rsp+Ch] [rbp-48ACh]\n  bool v203; // [rsp+Ch] [rbp-48ACh]\n  __int64 v204; // [rsp+10h] [rbp-48A8h]\n  _QWORD *v205; // [rsp+10h] [rbp-48A8h]\n  signed __int64 v206; // [rsp+18h] [rbp-48A0h]\n  __int64 v207; // [rsp+18h] [rbp-48A0h]\n  int v208; // [rsp+20h] [rbp-4898h]\n  __int64 v209; // [rsp+20h] [rbp-4898h]\n  __int64 v210; // [rsp+28h] [rbp-4890h]\n  signed __int64 v211; // [rsp+28h] [rbp-4890h]\n  __int64 v212; // [rsp+30h] [rbp-4888h]\n  __int64 v213; // [rsp+30h] [rbp-4888h]\n  __int64 v214; // [rsp+38h] [rbp-4880h]\n  __int64 v215; // [rsp+40h] [rbp-4878h]\n  _QWORD *v216; // [rsp+40h] [rbp-4878h]\n  unsigned __int64 v217; // [rsp+48h] [rbp-4870h]\n  __int64 v218; // [rsp+48h] [rbp-4870h]\n  int v219; // [rsp+50h] [rbp-4868h]\n  __int64 v220; // [rsp+50h] [rbp-4868h]\n  __int64 v221; // [rsp+58h] [rbp-4860h]\n  _QWORD *v222; // [rsp+58h] [rbp-4860h]\n  __int64 v223; // [rsp+60h] [rbp-4858h]\n  unsigned int v224; // [rsp+60h] [rbp-4858h]\n  int v225; // [rsp+68h] [rbp-4850h]\n  unsigned __int64 v226; // [rsp+68h] [rbp-4850h]\n  double v227; // [rsp+70h] [rbp-4848h]\n  unsigned __int64 v228; // [rsp+70h] [rbp-4848h]\n  signed int v229; // [rsp+78h] [rbp-4840h]\n  bool v230; // [rsp+78h] [rbp-4840h]\n  __int64 v231; // [rsp+80h] [rbp-4838h]\n  signed __int64 v232; // [rsp+80h] [rbp-4838h]\n  unsigned __int64 v233; // [rsp+88h] [rbp-4830h]\n  __int64 v234; // [rsp+88h] [rbp-4830h]\n  __int64 v235; // [rsp+90h] [rbp-4828h]\n  unsigned __int64 v236; // [rsp+90h] [rbp-4828h]\n  __int64 v237; // [rsp+98h] [rbp-4820h]\n  signed __int64 v238; // [rsp+98h] [rbp-4820h]\n  __int64 v239; // [rsp+A4h] [rbp-4814h]\n  signed int v240; // [rsp+ACh] [rbp-480Ch]\n  __int64 v241; // [rsp+B0h] [rbp-4808h]\n  signed __int64 v242; // [rsp+B8h] [rbp-4800h]\n  char v243[8]; // [rsp+C0h] [rbp-47F8h]\n  char v244; // [rsp+C8h] [rbp-47F0h]\n  char v245[8]; // [rsp+500h] [rbp-43B8h]\n  char v246; // [rsp+508h] [rbp-43B0h]\n  char v247; // [rsp+13D4h] [rbp-34E4h]\n\n  v0 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && (v1 = *((signed int *)off_49F6D0 + 3), *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v1 + 532)) )\n  {\n    v2 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1u) + 4;\n  }\n  else\n  {\n    v2 = 2LL;\n  }\n  v215 = qword_4F9DB8;\n  v3 = *(_DWORD *)(qword_4F9DB8 + 196) == 2;\n  dword_4FA0EC = 6 - v3;\n  dword_4FA0C0 = 6 - v3;\n  v4 = 1 << (5 - v3);\n  dword_4FA15C = v4;\n  dword_4FA158 = v4;\n  v5 = 1 << dword_4FA0EC;\n  LODWORD(v239) = 1 << dword_4FA0EC;\n  HIDWORD(v239) = 1 << dword_4FA0EC;\n  v240 = 1 << dword_4FA0EC;\n  v6 = qword_4F9F88;\n  v7 = v245;\n  v8 = v243;\n  v9 = 0LL;\n  v10 = qword_4F9F80;\n  do\n  {\n    if ( *((_DWORD *)qword_4F9BE0 + v9) > 0 )\n    {\n      v11 = v6[v9];\n      v12 = v10[v9];\n      v13 = 0LL;\n      v14 = 0LL;\n      do\n      {\n        v15 = *(signed int **)(v11 + 8 * v14);\n        v16 = *(_DWORD **)(v12 + 8 * v14);\n        *(_DWORD *)&v8[v13 + 8] = 0;\n        *(_QWORD *)&v8[v13] = 0LL;\n        *(_DWORD *)&v7[v13 + 8] = v240;\n        *(_QWORD *)&v7[v13] = v239;\n        *v15 = v5;\n        *v16 = 0;\n        v15[1] = v5;\n        v16[1] = 0;\n        v15[2] = v5;\n        v16[2] = 0;\n        ++v14;\n        v13 += 12LL;\n      }\n      while ( v14 < *((signed int *)qword_4F9BE0 + v9) );\n    }\n    ++v9;\n    v7 += 180;\n    v8 += 180;\n  }\n  while ( v9 < v2 );\n  v202 = v5;\n  v217 = v2;\n  v17 = SLODWORD(qword_4F9BE0[0]);\n  if ( SLODWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v18 = qword_4F9A58;\n    v19 = base;\n    v20 = qword_4F9E30;\n    v21 = SHIDWORD(qword_4F9BE0[0]);\n    v22 = &v247;\n    v23 = 0LL;\n    do\n    {\n      v24 = v17;\n      if ( (signed int)v21 > 0 )\n      {\n        v25 = *(_DWORD *)(v19[v23] + 4LL);\n        v26 = *(_DWORD *)(v20 + 4) - v25;\n        if ( v26 >= 128 )\n          v26 = 127;\n        if ( v26 <= -129 )\n          v26 = -128;\n        v27 = v22;\n        v28 = 0LL;\n        do\n        {\n          v29 = *(_DWORD *)(v18[v28] + 4LL) - v25;\n          if ( v29 >= 128 )\n            v29 = 127;\n          if ( v29 <= -129 )\n            v29 = -128;\n          v30 = v29 / -2;\n          if ( v29 / -2 < 1 )\n            v30 = v29 / 2;\n          if ( v29 )\n          {\n            v31 = v26 * ((v30 + 0x4000) / v29);\n            v32 = 1023;\n            if ( v31 <= 65503 )\n              v32 = (v31 + 32) >> 6;\n            v33 = -1024;\n            if ( v31 >= -65568 )\n              v33 = v32;\n            v34 = v202;\n            if ( (unsigned int)(v33 + 256) <= 0x303 )\n              v34 = v33 >> 2;\n            *(v27 - 2) = v34;\n            v35 = 64 - v34;\n            *(v27 - 677) = 64 - v34;\n            *(v27 - 1) = v34;\n            *(v27 - 676) = 64 - v34;\n            *v27 = v34;\n          }\n          else\n          {\n            *(v27 - 2) = v202;\n            *(v27 - 677) = v202;\n            *(v27 - 1) = v202;\n            *(v27 - 676) = v202;\n            *v27 = v202;\n            v35 = v202;\n          }\n          *(v27 - 675) = v35;\n          ++v28;\n          v27 += 3;\n        }\n        while ( v28 < v21 );\n      }\n      ++v23;\n      v22 += 180;\n      v17 = v24;\n    }\n    while ( v23 < v24 );\n  }\n  if ( *(_DWORD *)(v215 + 196) != 2 )\n  {\n    v225 = *(_DWORD *)(v215 + 196);\n    v219 = v17;\n    v47 = v0[15];\n    v48 = 0.0;\n    if ( v47 > 0 )\n    {\n      v49 = v0[13];\n      v48 = 0.0;\n      v50 = 0LL;\n      do\n      {\n        if ( (signed int)v49 > 0 )\n        {\n          v51 = *(_QWORD *)(qword_4F9EB0 + 8 * v50);\n          v52 = 0LL;\n          if ( (unsigned __int64)(v49 - 1) >= 3 )\n          {\n            do\n            {\n              v48 = (double)*(unsigned __int16 *)(v51 + 2 * v52 + 6)\n                  + (double)*(unsigned __int16 *)(v51 + 2 * v52 + 4)\n                  + (double)*(unsigned __int16 *)(v51 + 2 * v52 + 2)\n                  + (double)*(unsigned __int16 *)(v51 + 2 * v52)\n                  + v48;\n              v52 += 4LL;\n            }\n            while ( v0[13] - (unsigned __int64)(v0[13] & 3) != v52 );\n          }\n          if ( v0[13] & 3 )\n          {\n            v53 = (unsigned __int16 *)(v51 + 2 * v52);\n            v54 = -(signed __int64)(v0[13] & 3);\n            do\n            {\n              v48 = v48 + (double)*v53;\n              ++v53;\n              ++v54;\n            }\n            while ( v54 );\n          }\n        }\n        ++v50;\n      }\n      while ( v50 < v47 );\n    }\n    v229 = v0[15];\n    v55 = dword_4FA15C;\n    v56 = dword_4FA0EC;\n    v216 = base;\n    v210 = 0LL;\n    v57 = v17;\n    v227 = (double)v202 * v48;\n    v221 = (unsigned int)(4 * v47 + 32);\n    if ( (signed int)v17 <= 0 )\n    {\nLABEL_99:\n      while ( v210 + 1 < v217 )\n      {\n        v57 = *((_DWORD *)qword_4F9BE0 + v210++ + 1);\n        if ( (signed int)v57 > 0 )\n          goto LABEL_54;\n      }\n      v92 = qword_4F9F88;\n      v93 = qword_4F9F80;\n      if ( v225 == 1 )\n      {\n        v94 = &v246;\n        v95 = &v244;\n        v96 = 0LL;\n        if ( v219 <= 0 )\n          goto LABEL_106;\nLABEL_102:\n        v97 = v92[v96];\n        v98 = v93[v96];\n        v99 = 0LL;\n        v100 = 0LL;\n        do\n        {\n          v101 = *(_DWORD **)(v97 + 8 * v100);\n          v102 = *(_DWORD **)(v98 + 8 * v100);\n          *v101 = *(_DWORD *)&v94[v99 - 8];\n          *v102 = *(_DWORD *)&v95[v99 - 8];\n          v101[1] = *(_DWORD *)&v94[v99 - 4];\n          v102[1] = *(_DWORD *)&v95[v99 - 4];\n          v101[2] = *(_DWORD *)&v94[v99];\n          v102[2] = *(_DWORD *)&v95[v99];\n          ++v100;\n          v99 += 12LL;\n        }\n        while ( v100 < *((signed int *)qword_4F9BE0 + v96) );\nLABEL_106:\n        while ( 1 )\n        {\n          result = v96 + 1;\n          if ( v96 + 1 >= v217 )\n            break;\n          v103 = *((_DWORD *)qword_4F9BE0 + v96 + 1);\n          v94 += 180;\n          v95 += 180;\n          ++v96;\n          if ( v103 > 0 )\n            goto LABEL_102;\n        }\n      }\n      else\n      {\n        v105 = 0LL;\n        if ( v219 <= 0 )\n          goto LABEL_113;\nLABEL_109:\n        v106 = v92[v105];\n        v107 = v93[v105];\n        v108 = 0LL;\n        do\n        {\n          v109 = *(_DWORD **)(v106 + 8 * v108);\n          *v109 = 1 << dword_4FA0EC;\n          v110 = 1 << dword_4FA0C0;\n          v109[1] = 1 << dword_4FA0C0;\n          v109[2] = v110;\n          v111 = *(_QWORD *)(v107 + 8 * v108);\n          *(_QWORD *)v111 = 0LL;\n          *(_DWORD *)(v111 + 8) = 0;\n          ++v108;\n        }\n        while ( v108 < *((signed int *)qword_4F9BE0 + v105) );\nLABEL_113:\n        while ( 1 )\n        {\n          result = v105 + 1;\n          if ( v105 + 1 >= v217 )\n            break;\n          v112 = *((_DWORD *)qword_4F9BE0 + v105++ + 1);\n          if ( v112 > 0 )\n            goto LABEL_109;\n        }\n      }\n      v113 = qword_4F9BE0[0];\n      if ( SLODWORD(qword_4F9BE0[0]) > 0 )\n      {\n        v114 = qword_4F9F88;\n        v115 = qword_4F9F78;\n        v116 = HIDWORD(qword_4F9BE0[0]);\n        v117 = 0LL;\n        do\n        {\n          if ( v116 > 0 )\n          {\n            v118 = v114[1];\n            v119 = *(_DWORD **)(*v114 + 8 * v117);\n            v120 = *(_QWORD *)(*v115 + 8 * v117);\n            v121 = *(_QWORD *)(v115[1] + 8 * v117);\n            v122 = 0LL;\n            do\n            {\n              v123 = *(_DWORD **)(v120 + 8 * v122);\n              v124 = *(_DWORD **)(v118 + 8 * v122);\n              v125 = *(_DWORD **)(v121 + 8 * v122);\n              *v123 = *v119;\n              *v125 = *v124;\n              v123[1] = v119[1];\n              v125[1] = v124[1];\n              v123[2] = v119[2];\n              v125[2] = v124[2];\n              ++v122;\n              v116 = HIDWORD(qword_4F9BE0[0]);\n            }\n            while ( v122 < SHIDWORD(qword_4F9BE0[0]) );\n            v113 = qword_4F9BE0[0];\n          }\n          ++v117;\n          result = v113;\n        }\n        while ( v117 < v113 );\n      }\n      return result;\n    }\nLABEL_54:\n    v212 = (__int64)*(&base + v210);\n    v58 = v0[13];\n    v59 = (unsigned int)(v229 * v0[13]);\n    v206 = (signed int)v57;\n    memset(&v243[180 * v210], 0, 12LL * v57);\n    v60 = (unsigned int)(4 * v58 + 32);\n    v61 = v59 & 3;\n    v233 = (signed int)v59 - 1LL;\n    v223 = (signed int)v59 - v61;\n    v235 = v59 & 1;\n    v62 = v59 - v235;\n    v237 = v59 & 3;\n    v231 = -v61;\n    v63 = 0LL;\n    v208 = v59;\n    v204 = v59 - v235;\n    while ( 1 )\n    {\n      v64 = *(_QWORD *)(v212 + 8 * v63);\n      v65 = *(_QWORD *)(v64 + 6432);\n      v66 = *(_QWORD *)(v64 + 6440);\n      v67 = v202;\n      if ( (signed int)v59 > 0 )\n        break;\nLABEL_66:\n      if ( (unsigned int)(v67 + 64) > 0xBF )\n        v67 = v202;\n      v72 = 3 * v63;\n      v73 = &v245[180 * v210];\n      *(_DWORD *)&v73[4 * v72] = v67;\n      *(_DWORD *)&v73[4 * v72 + 4] = v202;\n      *(_DWORD *)&v73[4 * v72 + 8] = v202;\n      if ( (signed int)v59 > 0 )\n      {\n        v74 = 0LL;\n        if ( (_DWORD)v59 != 1 )\n        {\n          do\n          {\n            v75 = (v55 + v67 * *(unsigned __int16 *)(v65 + 2 * v74)) >> v56;\n            LOWORD(v76) = 0;\n            LOWORD(v77) = 0;\n            if ( v75 >= 0 )\n            {\n              v77 = v0[18171];\n              if ( v75 <= v77 )\n                LOWORD(v77) = (v55 + v67 * *(unsigned __int16 *)(v65 + 2 * v74)) >> v56;\n            }\n            *(_WORD *)(v66 + 2 * v74) = v77;\n            v78 = (v55 + v67 * *(unsigned __int16 *)(v65 + 2 * v74 + 2)) >> v56;\n            if ( v78 >= 0 )\n            {\n              v76 = v0[18171];\n              if ( v78 <= v76 )\n                LOWORD(v76) = (v55 + v67 * *(unsigned __int16 *)(v65 + 2 * v74 + 2)) >> v56;\n            }\n            *(_WORD *)(v66 + 2 * v74 + 2) = v76;\n            v74 += 2LL;\n          }\n          while ( v62 != v74 );\n        }\n        if ( v235 )\n        {\n          v79 = (v55 + v67 * *(unsigned __int16 *)(v65 + 2 * v74)) >> v56;\n          if ( v79 < 0 )\n          {\n            LOWORD(v79) = 0;\n          }\n          else\n          {\n            v80 = v0[18171];\n            if ( v79 > v80 )\n              LOWORD(v79) = v0[18171];\n          }\n          *(_WORD *)(v66 + 2 * v74) = v79;\n        }\n      }\n      v81 = v63;\n      if ( (signed int)v221 > 0 )\n      {\n        v82 = 0LL;\n        do\n        {\n          if ( (signed int)v60 > 0 )\n          {\n            v83 = v216[v81];\n            v84 = *(_QWORD *)(v83 + 6456);\n            v85 = *(_QWORD *)(*(_QWORD *)(v83 + 6448) + 8 * v82);\n            v86 = *(_QWORD *)(v84 + 8 * v82);\n            v87 = 0LL;\n            do\n            {\n              v88 = (v55 + v67 * *(unsigned __int16 *)(v85 + 2 * v87)) >> v56;\n              LOWORD(v89) = 0;\n              LOWORD(v90) = 0;\n              if ( v88 >= 0 )\n              {\n                v90 = v0[18171];\n                if ( v88 <= v90 )\n                  LOWORD(v90) = (v55 + v67 * *(unsigned __int16 *)(v85 + 2 * v87)) >> v56;\n              }\n              *(_WORD *)(v86 + 2 * v87) = v90;\n              v91 = (v55 + v67 * *(unsigned __int16 *)(v85 + 2 * v87 + 2)) >> v56;\n              if ( v91 >= 0 )\n              {\n                v89 = v0[18171];\n                if ( v91 <= v89 )\n                  LOWORD(v89) = (v55 + v67 * *(unsigned __int16 *)(v85 + 2 * v87 + 2)) >> v56;\n              }\n              *(_WORD *)(v86 + 2 * v87 + 2) = v89;\n              v87 += 2LL;\n            }\n            while ( v60 != v87 );\n          }\n          ++v82;\n        }\n        while ( v82 != v221 );\n      }\n      v63 = v81 + 1;\n      LODWORD(v59) = v208;\n      v62 = v204;\n      if ( v81 + 1 >= v206 )\n        goto LABEL_99;\n    }\n    if ( v233 >= 3 )\n    {\n      v68 = 0.0;\n      v69 = 0LL;\n      do\n      {\n        v68 = (double)*(unsigned __int16 *)(v65 + 2 * v69 + 6)\n            + (double)*(unsigned __int16 *)(v65 + 2 * v69 + 4)\n            + (double)*(unsigned __int16 *)(v65 + 2 * v69 + 2)\n            + (double)*(unsigned __int16 *)(v65 + 2 * v69)\n            + v68;\n        v69 += 4LL;\n      }\n      while ( v223 != v69 );\n      if ( !v237 )\n      {\nLABEL_64:\n        v67 = v202;\n        if ( v68 != 0.0 )\n          v67 = (signed int)(v227 / v68 + 0.5);\n        goto LABEL_66;\n      }\n    }\n    else\n    {\n      v68 = 0.0;\n      v69 = 0LL;\n      if ( !v237 )\n        goto LABEL_64;\n    }\n    v70 = (unsigned __int16 *)(v65 + 2 * v69);\n    v71 = v231;\n    do\n    {\n      v68 = v68 + (double)*v70;\n      ++v70;\n      ++v71;\n    }\n    while ( v71 );\n    goto LABEL_64;\n  }\n  if ( (signed int)v17 <= 0 )\n  {\n    v40 = v217;\n  }\n  else\n  {\n    v36 = qword_4F9F78;\n    v37 = HIDWORD(qword_4F9BE0[0]);\n    v38 = &v247;\n    v39 = 0LL;\n    v40 = v217;\n    do\n    {\n      if ( v37 > 0 )\n      {\n        v41 = *(_QWORD *)(v36[1] + 8 * v39);\n        v42 = *(_QWORD *)(*v36 + 8 * v39);\n        v43 = v38;\n        v44 = 0LL;\n        do\n        {\n          v45 = *(_DWORD **)(v41 + 8 * v44);\n          v46 = *(_DWORD **)(v42 + 8 * v44);\n          *v45 = *((_DWORD *)v43 - 2);\n          *v46 = *((_DWORD *)v43 - 677);\n          v45[1] = *((_DWORD *)v43 - 1);\n          v46[1] = *((_DWORD *)v43 - 676);\n          v45[2] = *(_DWORD *)v43;\n          v46[2] = *((_DWORD *)v43 - 675);\n          ++v44;\n          v37 = HIDWORD(qword_4F9BE0[0]);\n          v43 += 12;\n        }\n        while ( v44 < SHIDWORD(qword_4F9BE0[0]) );\n        LODWORD(v17) = qword_4F9BE0[0];\n      }\n      ++v39;\n      v38 += 180;\n    }\n    while ( v39 < (signed int)v17 );\n  }\n  v126 = qword_4F9F88;\n  v127 = qword_4F9F80;\n  v128 = 0LL;\n  if ( (signed int)v17 > 0 )\n  {\nLABEL_124:\n    v129 = v126[v128];\n    v130 = v127[v128];\n    v131 = 0LL;\n    do\n    {\n      v132 = *(signed int **)(v129 + 8 * v131);\n      *v132 = v202;\n      v132[1] = v202;\n      v132[2] = v202;\n      v133 = *(_QWORD *)(v130 + 8 * v131);\n      *(_QWORD *)v133 = 0LL;\n      *(_DWORD *)(v133 + 8) = 0;\n      ++v131;\n    }\n    while ( v131 < *((signed int *)qword_4F9BE0 + v128) );\n  }\n  while ( v128 + 1 < v40 )\n  {\n    v134 = *((_DWORD *)qword_4F9BE0 + v128++ + 1);\n    if ( v134 > 0 )\n      goto LABEL_124;\n  }\n  result = SLODWORD(qword_4F9BE0[0]);\n  v241 = SLODWORD(qword_4F9BE0[0]);\n  if ( SLODWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v135 = base;\n    v136 = qword_4F9A58;\n    result = SHIDWORD(qword_4F9BE0[0]);\n    v218 = SHIDWORD(qword_4F9BE0[0]);\n    v137 = 0LL;\n    v205 = qword_4F9A58;\n    v222 = base;\n    while ( (signed int)v218 <= 0 )\n    {\nLABEL_178:\n      if ( ++v137 >= v241 )\n        return result;\n    }\n    v138 = v0[13];\n    v139 = v0[15];\n    v140 = (unsigned int)(4 * v138 + 32);\n    v141 = v139 * v138;\n    v224 = v141;\n    v142 = v141;\n    v143 = (unsigned int)(4 * v139 + 32);\n    v144 = (unsigned __int64)(v141 - 16LL) >> 4;\n    v145 = (unsigned int)v140 & 0xFFFFFFF0;\n    v238 = v145;\n    v145 -= 16LL;\n    v236 = v145;\n    result = v145 >> 4;\n    v226 = v142 & 0xFFFFFFFFFFFFFFF0LL;\n    v220 = ((_BYTE)v144 + 1) & 1;\n    v228 = v144;\n    v242 = v220 - 1 - v144;\n    v234 = ((_BYTE)result + 1) & 1;\n    v232 = v234 - 1 - result;\n    v146 = 0LL;\n    v209 = v137;\n    v207 = v140;\n    v211 = v142;\n    v213 = v143;\n    while ( 1 )\n    {\n      v214 = v146;\n      if ( (signed int)v224 <= 0 )\n        goto LABEL_153;\n      v163 = v135[v137];\n      v164 = *(_QWORD *)(v163 + 6432);\n      v165 = *(_QWORD *)(v163 + 6440);\n      v166 = v136[v146];\n      v167 = *(_QWORD *)(v166 + 6432);\n      v168 = *(_QWORD *)(v166 + 6440);\n      if ( v224 >= 0x10 )\n      {\n        v147 = v165 + 2 * v142;\n        v148 = v168 + 2 * v142;\n        v149 = v164 + 2 * v142;\n        v150 = v167 + 2 * v142;\n        v151 = v165 < v150;\n        v230 = v164 < v148;\n        v152 = v167 < v148;\n        if ( v168 < v147 && v165 < v148 )\n        {\n          result = 0LL;\n          v136 = v205;\n          v137 = v209;\n          v140 = v207;\n          v142 = v211;\n          v143 = v213;\n          v146 = v214;\n        }\n        else\n        {\n          v153 = v168 < v150;\n          v143 = v213;\n          v146 = v214;\n          if ( v164 < v147 && v165 < v149 || v167 < v147 && v151 || v230 && v168 < v149 )\n          {\n            result = 0LL;\n            v136 = v205;\n            v137 = v209;\n            v140 = v207;\n            v142 = v211;\n          }\n          else\n          {\n            result = 0LL;\n            v154 = (v152 && v153) == 0;\n            v136 = v205;\n            v137 = v209;\n            v140 = v207;\n            v142 = v211;\n            if ( v154 )\n            {\n              if ( v228 )\n              {\n                v155 = v242;\n                v156 = 0LL;\n                do\n                {\n                  v157 = *(_OWORD *)(v164 + 2 * v156 + 16);\n                  *(_OWORD *)(v165 + 2 * v156) = *(_OWORD *)(v164 + 2 * v156);\n                  *(_OWORD *)(v165 + 2 * v156 + 16) = v157;\n                  v158 = *(_OWORD *)(v167 + 2 * v156 + 16);\n                  *(_OWORD *)(v168 + 2 * v156) = *(_OWORD *)(v167 + 2 * v156);\n                  *(_OWORD *)(v168 + 2 * v156 + 16) = v158;\n                  v159 = *(_OWORD *)(v164 + 2 * v156 + 48);\n                  *(_OWORD *)(v165 + 2 * v156 + 32) = *(_OWORD *)(v164 + 2 * v156 + 32);\n                  *(_OWORD *)(v165 + 2 * v156 + 48) = v159;\n                  v160 = *(_OWORD *)(v167 + 2 * v156 + 48);\n                  *(_OWORD *)(v168 + 2 * v156 + 32) = *(_OWORD *)(v167 + 2 * v156 + 32);\n                  *(_OWORD *)(v168 + 2 * v156 + 48) = v160;\n                  v156 += 32LL;\n                  v155 += 2LL;\n                }\n                while ( v155 );\n                if ( v220 )\n                {\nLABEL_142:\n                  v161 = *(_OWORD *)(v164 + 2 * v156 + 16);\n                  *(_OWORD *)(v165 + 2 * v156) = *(_OWORD *)(v164 + 2 * v156);\n                  *(_OWORD *)(v165 + 2 * v156 + 16) = v161;\n                  v162 = *(_OWORD *)(v167 + 2 * v156 + 16);\n                  *(_OWORD *)(v168 + 2 * v156) = *(_OWORD *)(v167 + 2 * v156);\n                  *(_OWORD *)(v168 + 2 * v156 + 16) = v162;\n                }\n              }\n              else\n              {\n                v156 = 0LL;\n                if ( v220 )\n                  goto LABEL_142;\n              }\n              result = v226;\n              if ( v226 == v211 )\n                goto LABEL_153;\n              goto LABEL_152;\n            }\n          }\n        }\n      }\n      else\n      {\n        result = 0LL;\n      }\n      do\n      {\nLABEL_152:\n        *(_WORD *)(v165 + 2 * result) = *(_WORD *)(v164 + 2 * result);\n        *(_WORD *)(v168 + 2 * result) = *(_WORD *)(v167 + 2 * result);\n        ++result;\n      }\n      while ( result < v142 );\nLABEL_153:\n      if ( (signed int)v143 > 0 )\n      {\n        v169 = 0LL;\n        while ( 2 )\n        {\n          if ( (signed int)v140 <= 0 )\n            goto LABEL_176;\n          v170 = v135[v137];\n          v171 = *(_QWORD *)(*(_QWORD *)(v170 + 6448) + 8 * v169);\n          v172 = *(_QWORD *)(*(_QWORD *)(v170 + 6456) + 8 * v169);\n          v173 = v136[v146];\n          v174 = *(_QWORD *)(*(_QWORD *)(v173 + 6448) + 8 * v169);\n          v175 = *(_QWORD *)(*(_QWORD *)(v173 + 6456) + 8 * v169);\n          if ( (unsigned int)v140 < 0x10 )\n          {\n            v176 = 0LL;\n            goto LABEL_174;\n          }\n          v177 = v172 + 2 * v140;\n          v178 = v175 + 2 * v140;\n          v179 = v171 + 2 * v140;\n          v180 = v174 + 2 * v140;\n          v181 = v175 < v177;\n          v182 = v172 < v179;\n          v203 = v171 < v177;\n          v183 = v172 < v180;\n          v184 = v174 < v177;\n          v185 = v175 < v179;\n          v186 = v171 < v178;\n          v187 = v175 < v180;\n          v188 = v174 < v178;\n          if ( v181 && v172 < v178 || v203 && v182 )\n          {\n            v176 = 0LL;\n            v135 = v222;\n            v136 = v205;\n            v137 = v209;\n            v140 = v207;\n            v143 = v213;\n            v146 = v214;\nLABEL_174:\n            result = v171 + 2 * v176 + 2;\n            v197 = v172 + 2 * v176 + 2;\n            v198 = v174 + 2 * v176 + 2;\n            v199 = v175 + 2 * v176 + 2;\n            v200 = v140 - v176;\n            v201 = 0LL;\n            do\n            {\n              *(_WORD *)(v197 + 2 * v201 - 2) = *(_WORD *)(result + 2 * v201 - 2);\n              *(_WORD *)(v199 + 2 * v201 - 2) = *(_WORD *)(v198 + 2 * v201 - 2);\n              *(_WORD *)(v197 + 2 * v201) = *(_WORD *)(result + 2 * v201);\n              *(_WORD *)(v199 + 2 * v201) = *(_WORD *)(v198 + 2 * v201);\n              v201 += 2LL;\n            }\n            while ( v200 != v201 );\n            goto LABEL_176;\n          }\n          v135 = v222;\n          v146 = v214;\n          if ( v184 && v183 || v186 && v185 )\n          {\n            v176 = 0LL;\n            v136 = v205;\n            v137 = v209;\n            v140 = v207;\n            v143 = v213;\n            goto LABEL_174;\n          }\n          v176 = 0LL;\n          v154 = (v188 && v187) == 0;\n          v136 = v205;\n          v137 = v209;\n          v140 = v207;\n          v143 = v213;\n          if ( !v154 )\n            goto LABEL_174;\n          if ( v236 )\n          {\n            v189 = v232;\n            v190 = 0LL;\n            do\n            {\n              v191 = *(_OWORD *)(v171 + 2 * v190 + 16);\n              *(_OWORD *)(v172 + 2 * v190) = *(_OWORD *)(v171 + 2 * v190);\n              *(_OWORD *)(v172 + 2 * v190 + 16) = v191;\n              v192 = *(_OWORD *)(v174 + 2 * v190 + 16);\n              *(_OWORD *)(v175 + 2 * v190) = *(_OWORD *)(v174 + 2 * v190);\n              *(_OWORD *)(v175 + 2 * v190 + 16) = v192;\n              v193 = *(_OWORD *)(v171 + 2 * v190 + 48);\n              *(_OWORD *)(v172 + 2 * v190 + 32) = *(_OWORD *)(v171 + 2 * v190 + 32);\n              *(_OWORD *)(v172 + 2 * v190 + 48) = v193;\n              v194 = *(_OWORD *)(v174 + 2 * v190 + 48);\n              *(_OWORD *)(v175 + 2 * v190 + 32) = *(_OWORD *)(v174 + 2 * v190 + 32);\n              *(_OWORD *)(v175 + 2 * v190 + 48) = v194;\n              v190 += 32LL;\n              v189 += 2LL;\n            }\n            while ( v189 );\n            if ( v234 )\n            {\nLABEL_167:\n              v195 = *(_OWORD *)(v171 + 2 * v190 + 16);\n              *(_OWORD *)(v172 + 2 * v190) = *(_OWORD *)(v171 + 2 * v190);\n              *(_OWORD *)(v172 + 2 * v190 + 16) = v195;\n              v196 = *(_OWORD *)(v174 + 2 * v190 + 16);\n              *(_OWORD *)(v175 + 2 * v190) = *(_OWORD *)(v174 + 2 * v190);\n              *(_OWORD *)(v175 + 2 * v190 + 16) = v196;\n            }\n          }\n          else\n          {\n            v190 = 0LL;\n            if ( v234 )\n              goto LABEL_167;\n          }\n          result = v238;\n          v176 = v238;\n          if ( v238 != v207 )\n            goto LABEL_174;\nLABEL_176:\n          if ( ++v169 == v143 )\n            break;\n          continue;\n        }\n      }\n      ++v146;\n      v142 = v211;\n      if ( v146 >= v218 )\n        goto LABEL_178;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4814d0L", 
            "funcEndAddr": "0x4825e2L", 
            "funcName": "sub_4814D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4825F0(int a1)\n{\n  signed int *v1; // r15\n  __int64 v2; // rax\n  unsigned __int64 v3; // rdi\n  _QWORD *v4; // r8\n  _QWORD *v5; // r9\n  char *v6; // rdx\n  char *v7; // rsi\n  unsigned __int64 v8; // r10\n  __int64 v9; // r11\n  __int64 v10; // r14\n  __int64 v11; // rcx\n  signed __int64 v12; // rbp\n  _DWORD *v13; // rbx\n  _DWORD *v14; // rax\n  double v15; // xmm1_8\n  __int64 v16; // rbp\n  __int64 v17; // rbx\n  __int64 v18; // rcx\n  __int64 v19; // rsi\n  unsigned __int16 *v20; // rcx\n  signed __int64 v21; // rsi\n  unsigned __int64 v22; // rsi\n  __int64 v23; // r12\n  __int64 v24; // r13\n  __int64 v25; // r8\n  __int64 v26; // r15\n  __int64 v27; // rbp\n  __int64 v28; // r9\n  __int64 v29; // r10\n  double v30; // xmm5_8\n  __int64 v31; // r11\n  unsigned __int16 *v32; // rdx\n  __int64 v33; // rax\n  signed int v34; // eax\n  signed __int64 v35; // rdx\n  signed __int64 v36; // rbx\n  signed int v37; // eax\n  char *v38; // rcx\n  char *v39; // rdx\n  unsigned __int64 v40; // r8\n  __int64 v41; // rsi\n  __int64 v42; // rbp\n  __int64 v43; // rbx\n  signed __int64 result; // rax\n  int v45; // [rsp+0h] [rbp-32Ch]\n  __int64 v46; // [rsp+4h] [rbp-328h]\n  signed int *v47; // [rsp+Ch] [rbp-320h]\n  __int64 v48; // [rsp+24h] [rbp-308h]\n  char v49; // [rsp+2Ch] [rbp-300h]\n  char v50[288]; // [rsp+74h] [rbp-2B8h]\n  char v51[8]; // [rsp+194h] [rbp-198h]\n  char v52; // [rsp+19Ch] [rbp-190h]\n\n  v45 = a1;\n  v1 = (signed int *)off_49F6D0;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && (v2 = *((signed int *)off_49F6D0 + 3), *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v2 + 532)) )\n  {\n    v3 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1u) + 4;\n  }\n  else\n  {\n    v3 = 2LL;\n  }\n  dword_4FA0EC = 5;\n  dword_4FA0C0 = 5;\n  dword_4FA15C = 16;\n  dword_4FA158 = 16;\n  v4 = qword_4F9F88;\n  v5 = qword_4F9F80;\n  v6 = &v49;\n  v7 = v51;\n  v8 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)qword_4F9BE0 + v8) > 0 )\n    {\n      v9 = v4[v8];\n      v10 = v5[v8];\n      v11 = 0LL;\n      v12 = 0LL;\n      do\n      {\n        v13 = *(_DWORD **)(v9 + 8 * v12);\n        v14 = *(_DWORD **)(v10 + 8 * v12);\n        *(_DWORD *)&v7[v11 + 8] = 0;\n        *(_QWORD *)&v7[v11] = 0LL;\n        *(_DWORD *)&v6[v11 - 8] = 32;\n        *v13 = 32;\n        *v14 = 0;\n        *(_DWORD *)&v6[v11 - 4] = 32;\n        v13[1] = 32;\n        v14[1] = 0;\n        *(_DWORD *)&v6[v11] = 32;\n        v13[2] = 32;\n        v14[2] = 0;\n        ++v12;\n        v11 += 12LL;\n      }\n      while ( v12 < *((signed int *)qword_4F9BE0 + v8) );\n    }\n    ++v8;\n    v6 += 180;\n    v7 += 180;\n  }\n  while ( v8 < v3 );\n  v15 = 0.0;\n  v46 = v1[15];\n  if ( v46 > 0 )\n  {\n    v16 = v1[13];\n    v15 = 0.0;\n    v17 = 0LL;\n    do\n    {\n      if ( (signed int)v16 > 0 )\n      {\n        v18 = *(_QWORD *)(qword_4F9EB0 + 8 * v17);\n        v19 = 0LL;\n        if ( (unsigned __int64)(v16 - 1) >= 3 )\n        {\n          do\n          {\n            v15 = (double)*(unsigned __int16 *)(v18 + 2 * v19 + 6)\n                + (double)*(unsigned __int16 *)(v18 + 2 * v19 + 4)\n                + (double)*(unsigned __int16 *)(v18 + 2 * v19 + 2)\n                + (double)*(unsigned __int16 *)(v18 + 2 * v19)\n                + v15;\n            v19 += 4LL;\n          }\n          while ( v1[13] - (unsigned __int64)(v1[13] & 3) != v19 );\n        }\n        if ( v1[13] & 3 )\n        {\n          v20 = (unsigned __int16 *)(v18 + 2 * v19);\n          v21 = -(signed __int64)(v1[13] & 3);\n          do\n          {\n            v15 = v15 + (double)*v20;\n            ++v20;\n            ++v21;\n          }\n          while ( v21 );\n        }\n      }\n      ++v17;\n    }\n    while ( v17 < v46 );\n  }\n  v47 = v1;\n  v22 = 0LL;\n  do\n  {\n    v23 = *((signed int *)qword_4F9BE0 + v22);\n    if ( v23 > 0 )\n    {\n      v24 = (__int64)*(&base + v22);\n      v25 = v46 * v47[13];\n      v26 = (_BYTE)v46 * (unsigned __int8)v47[13] & 3;\n      v27 = v46 * v47[13] - v26;\n      v28 = 0LL;\n      do\n      {\n        if ( (signed int)v25 <= 0 )\n        {\n          v30 = 0.0;\n          if ( !v45 )\n            goto LABEL_35;\n        }\n        else\n        {\n          v29 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v28) + 6432LL);\n          v30 = 0.0;\n          v31 = 0LL;\n          if ( (unsigned __int64)(v25 - 1) >= 3 )\n          {\n            do\n            {\n              v30 = (double)*(unsigned __int16 *)(v29 + 2 * v31 + 6)\n                  + (double)*(unsigned __int16 *)(v29 + 2 * v31 + 4)\n                  + (double)*(unsigned __int16 *)(v29 + 2 * v31 + 2)\n                  + (double)*(unsigned __int16 *)(v29 + 2 * v31)\n                  + v30;\n              v31 += 4LL;\n            }\n            while ( v27 != v31 );\n          }\n          if ( v26 )\n          {\n            v32 = (unsigned __int16 *)(v29 + 2 * v31);\n            v33 = -v26;\n            do\n            {\n              v30 = v30 + (double)*v32;\n              ++v32;\n              ++v33;\n            }\n            while ( v33 );\n          }\n          if ( !v45 )\n          {\nLABEL_35:\n            if ( v30 == 0.0 )\n            {\n              *((_DWORD *)&v48 + 45 * v22 + 3 * v28) = 32;\n            }\n            else\n            {\n              v37 = (signed int)(32.0 * v15 / v30 + 0.5);\n              if ( (unsigned int)(v37 + 64) > 0xBF )\n                v37 = 32;\n              *(_DWORD *)&v50[180 * v22 - 80 + 12 * v28] = v37;\n            }\n            goto LABEL_40;\n          }\n        }\n        v34 = (signed int)((v15 - v30) / (double)(signed int)v25 + 0.5);\n        v35 = 12 * v28;\n        v36 = 180 * v22;\n        if ( v34 >= 128 )\n          v34 = 127;\n        if ( v34 <= -129 )\n          v34 = -128;\n        *(_DWORD *)&v51[v36 + v35] = v34;\n        *(_DWORD *)((char *)&v48 + v36 + v35) = 32;\nLABEL_40:\n        *(__int64 *)((char *)&v48 + 180 * v22 + 12 * v28++ + 4) = 137438953504LL;\n      }\n      while ( v28 < v23 );\n    }\n    ++v22;\n  }\n  while ( v22 < v3 );\n  v38 = &v49;\n  v39 = &v52;\n  v40 = 0LL;\n  while ( 1 )\n  {\n    v41 = *((signed int *)qword_4F9BE0 + v40);\n    if ( v41 > 0 )\n      break;\nLABEL_52:\n    ++v40;\n    v38 += 180;\n    v39 += 180;\n    if ( v40 >= v3 )\n      return 0LL;\n  }\n  v42 = 0LL;\n  v43 = 0LL;\n  while ( 1 )\n  {\n    result = 1LL;\n    if ( *(_DWORD *)&v38[v42 - 8] != 32\n      || *(_DWORD *)&v39[v42 - 8]\n      || *(_DWORD *)&v38[v42 - 4] != 32\n      || *(_DWORD *)&v39[v42 - 4]\n      || *(_DWORD *)&v38[v42] != 32\n      || *(_DWORD *)&v39[v42] )\n    {\n      return result;\n    }\n    ++v43;\n    v42 += 12LL;\n    if ( v43 >= v41 )\n      goto LABEL_52;\n  }\n}\n", 
            "funcStartAddr": "0x4825f0L", 
            "funcEndAddr": "0x482afbL", 
            "funcName": "sub_4825F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_482B00(int a1)\n{\n  __int64 v1; // rax\n  unsigned __int64 v2; // r14\n  _QWORD *v3; // r8\n  _QWORD *v4; // r9\n  char *v5; // rdx\n  char *v6; // rsi\n  unsigned __int64 v7; // r10\n  __int64 v8; // r11\n  __int64 v9; // rbx\n  __int64 v10; // rax\n  signed __int64 v11; // rcx\n  _DWORD *v12; // rdi\n  _DWORD *v13; // rbp\n  __int64 v14; // r11\n  _QWORD *v15; // r13\n  _QWORD *v16; // r8\n  __int64 v17; // r9\n  char *v18; // r14\n  __int64 v19; // rsi\n  __int64 v20; // r15\n  int v21; // ebp\n  int v22; // ebx\n  char *v23; // rcx\n  __int64 v24; // r10\n  int v25; // edi\n  int v26; // eax\n  int v27; // eax\n  int v28; // edi\n  signed int v29; // edx\n  signed int v30; // eax\n  int v31; // edx\n  _QWORD *v32; // r8\n  int v33; // esi\n  char *v34; // r9\n  signed __int64 v35; // r10\n  unsigned __int64 v36; // r12\n  __int64 v37; // rdi\n  __int64 v38; // rbp\n  char *v39; // rcx\n  signed __int64 v40; // rax\n  _DWORD *v41; // rsi\n  _DWORD *v42; // rbx\n  signed int *v43; // r11\n  double v44; // xmm5_8\n  __int64 v45; // rax\n  __int64 v46; // rbx\n  __int64 v47; // rbp\n  __int64 v48; // rcx\n  unsigned __int16 *v49; // rcx\n  signed __int64 v50; // rbp\n  unsigned int v51; // eax\n  __int64 v52; // r14\n  __int64 v53; // r13\n  __int64 v54; // rbx\n  __int64 v55; // rdi\n  signed int v56; // ebp\n  __int64 v57; // rsi\n  double v58; // xmm0_8\n  __int64 v59; // rcx\n  unsigned __int16 *v60; // rcx\n  __int64 v61; // rsi\n  signed __int64 v62; // rax\n  char *v63; // rcx\n  _QWORD *v64; // r8\n  _QWORD *v65; // r9\n  char *v66; // rcx\n  char *v67; // rsi\n  __int64 v68; // r10\n  __int64 v69; // r11\n  __int64 v70; // r14\n  __int64 v71; // rax\n  signed __int64 v72; // rdx\n  _DWORD *v73; // rdi\n  _DWORD *v74; // rbp\n  int v75; // edx\n  __int64 v76; // rsi\n  __int64 v77; // rax\n  __int64 v78; // rdx\n  signed __int64 v79; // rdi\n  _DWORD *v80; // rbx\n  signed int v81; // ebp\n  __int64 v82; // rcx\n  int v83; // ecx\n  int v84; // edi\n  _QWORD *v85; // r8\n  _QWORD *v86; // r9\n  int v87; // esi\n  signed __int64 v88; // r10\n  __int64 v89; // r11\n  _DWORD *v90; // rbp\n  __int64 v91; // r14\n  __int64 v92; // rax\n  signed __int64 v93; // rcx\n  _DWORD *v94; // rsi\n  _DWORD *v95; // rdx\n  _DWORD *v96; // rdi\n  _QWORD *v97; // r8\n  _QWORD *v98; // r9\n  __int64 v99; // rsi\n  __int64 v100; // rdi\n  __int64 v101; // rbp\n  signed __int64 v102; // rbx\n  _DWORD *v103; // rdx\n  signed int v104; // eax\n  __int64 v105; // rax\n  int v106; // er11\n  __int64 v107; // rsi\n  __int64 v108; // rdi\n  __int64 v109; // rbx\n  _DWORD *v110; // rcx\n  signed __int64 result; // rax\n  _DWORD *v112; // rdx\n  int v113; // [rsp+0h] [rbp-4828h]\n  __int64 v114; // [rsp+0h] [rbp-4828h]\n  int v115; // [rsp+8h] [rbp-4820h]\n  unsigned __int64 v116; // [rsp+10h] [rbp-4818h]\n  signed int *v117; // [rsp+18h] [rbp-4810h]\n  __int64 v118; // [rsp+20h] [rbp-4808h]\n  double v119; // [rsp+28h] [rbp-4800h]\n  char v120[8]; // [rsp+30h] [rbp-47F8h]\n  char v121; // [rsp+38h] [rbp-47F0h]\n  __int64 v122; // [rsp+470h] [rbp-43B8h]\n  char v123; // [rsp+478h] [rbp-43B0h]\n  char v124; // [rsp+8B0h] [rbp-3F78h]\n  char v125; // [rsp+1344h] [rbp-34E4h]\n\n  v117 = (signed int *)off_49F6D0;\n  v113 = a1;\n  if ( *((_DWORD *)off_49F6D0 + 18100)\n    && (v1 = *((signed int *)off_49F6D0 + 3), *(_DWORD *)(*((_QWORD *)off_49F6D0 + 1771) + 632 * v1 + 532)) )\n  {\n    v2 = 2 * (*((_DWORD *)off_49F6D0 + 3) & 1u) + 4;\n  }\n  else\n  {\n    v2 = 2LL;\n  }\n  dword_4FA0EC = 5;\n  dword_4FA0C0 = 5;\n  dword_4FA15C = 16;\n  dword_4FA158 = 16;\n  v3 = qword_4F9F88;\n  v4 = qword_4F9F80;\n  v5 = &v123;\n  v6 = v120;\n  v7 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)qword_4F9BE0 + v7) > 0 )\n    {\n      v8 = v3[v7];\n      v9 = v4[v7];\n      v10 = 0LL;\n      v11 = 0LL;\n      do\n      {\n        v12 = *(_DWORD **)(v8 + 8 * v11);\n        v13 = *(_DWORD **)(v9 + 8 * v11);\n        *(_DWORD *)&v6[v10 + 8] = 0;\n        *(_QWORD *)&v6[v10] = 0LL;\n        *v12 = 32;\n        *v13 = 0;\n        *(_DWORD *)&v5[v10 - 8] = 32;\n        v12[1] = 32;\n        v13[1] = 0;\n        *(_DWORD *)&v5[v10 - 4] = 32;\n        v12[2] = 32;\n        v13[2] = 0;\n        *(_DWORD *)&v5[v10] = 32;\n        ++v11;\n        v10 += 12LL;\n      }\n      while ( v11 < *((signed int *)qword_4F9BE0 + v7) );\n    }\n    ++v7;\n    v5 += 180;\n    v6 += 180;\n  }\n  while ( v7 < v2 );\n  v116 = v2;\n  v14 = SLODWORD(qword_4F9BE0[0]);\n  if ( SLODWORD(qword_4F9BE0[0]) > 0LL )\n  {\n    v15 = qword_4F9A58;\n    v16 = base;\n    v17 = qword_4F9E30;\n    v18 = &v124;\n    v19 = SHIDWORD(qword_4F9BE0[0]);\n    v20 = 0LL;\n    do\n    {\n      if ( (signed int)v19 > 0 )\n      {\n        v21 = *(_DWORD *)(v16[v20] + 4LL);\n        v22 = *(_DWORD *)(v17 + 4) - v21;\n        if ( v22 >= 128 )\n          v22 = 127;\n        if ( v22 <= -129 )\n          v22 = -128;\n        v23 = v18;\n        v24 = 0LL;\n        do\n        {\n          v25 = *(_DWORD *)(v15[v24] + 4LL) - v21;\n          if ( v25 >= 128 )\n            v25 = 127;\n          if ( v25 <= -129 )\n            v25 = -128;\n          v26 = v25 / -2;\n          if ( v25 / -2 < 1 )\n            v26 = v25 / 2;\n          if ( v25 )\n          {\n            v27 = v22 * ((v26 + 0x4000) / v25);\n            v28 = 1023;\n            if ( v27 <= 65503 )\n              v28 = (v27 + 32) >> 6;\n            v29 = -1024;\n            if ( v27 >= -65568 )\n              v29 = v28;\n            v30 = 32;\n            if ( (unsigned int)(v29 + 256) <= 0x303 )\n              v30 = v29 >> 2;\n            v31 = 64 - v30;\n            *((_DWORD *)v23 + 675) = v30;\n            *(_DWORD *)v23 = 64 - v30;\n            *((_DWORD *)v23 + 676) = v30;\n            *((_DWORD *)v23 + 1) = 64 - v30;\n          }\n          else\n          {\n            *(_QWORD *)(v23 + 2700) = 137438953504LL;\n            *(_QWORD *)v23 = 137438953504LL;\n            v30 = 32;\n            v31 = 32;\n          }\n          *((_DWORD *)v23 + 677) = v30;\n          *((_DWORD *)v23 + 2) = v31;\n          ++v24;\n          v23 += 12;\n        }\n        while ( v24 < v19 );\n      }\n      ++v20;\n      v18 += 180;\n    }\n    while ( v20 < v14 );\n  }\n  if ( v113 == 1 )\n  {\n    if ( (signed int)v14 <= 0 )\n    {\n      v36 = v116;\n    }\n    else\n    {\n      v32 = qword_4F9F78;\n      v33 = HIDWORD(qword_4F9BE0[0]);\n      v34 = &v125;\n      v35 = 0LL;\n      v36 = v116;\n      do\n      {\n        if ( v33 > 0 )\n        {\n          v37 = *(_QWORD *)(v32[1] + 8 * v35);\n          v38 = *(_QWORD *)(*v32 + 8 * v35);\n          v39 = v34;\n          v40 = 0LL;\n          do\n          {\n            v41 = *(_DWORD **)(v37 + 8 * v40);\n            v42 = *(_DWORD **)(v38 + 8 * v40);\n            *v41 = *((_DWORD *)v39 - 2);\n            *v42 = *((_DWORD *)v39 - 677);\n            v41[1] = *((_DWORD *)v39 - 1);\n            v42[1] = *((_DWORD *)v39 - 676);\n            v41[2] = *(_DWORD *)v39;\n            v42[2] = *((_DWORD *)v39 - 675);\n            ++v40;\n            v33 = HIDWORD(qword_4F9BE0[0]);\n            v39 += 12;\n          }\n          while ( v40 < SHIDWORD(qword_4F9BE0[0]) );\n          LODWORD(v14) = qword_4F9BE0[0];\n        }\n        ++v35;\n        v34 += 180;\n      }\n      while ( v35 < (signed int)v14 );\n    }\n    v97 = qword_4F9F88;\n    v98 = qword_4F9F80;\n    v99 = 0LL;\n    if ( (signed int)v14 > 0 )\n    {\nLABEL_93:\n      v100 = v97[v99];\n      v101 = v98[v99];\n      v102 = 0LL;\n      do\n      {\n        v103 = *(_DWORD **)(v100 + 8 * v102);\n        *v103 = 1 << dword_4FA0EC;\n        v104 = 1 << dword_4FA0C0;\n        v103[1] = 1 << dword_4FA0C0;\n        v103[2] = v104;\n        v105 = *(_QWORD *)(v101 + 8 * v102);\n        *(_QWORD *)v105 = 0LL;\n        *(_DWORD *)(v105 + 8) = 0;\n        ++v102;\n      }\n      while ( v102 < *((signed int *)qword_4F9BE0 + v99) );\n    }\n    while ( v99 + 1 < v36 )\n    {\n      v106 = *((_DWORD *)qword_4F9BE0 + v99++ + 1);\n      if ( v106 > 0 )\n        goto LABEL_93;\n    }\n  }\n  else\n  {\n    v115 = v14;\n    v43 = v117;\n    v44 = 0.0;\n    v118 = v117[15];\n    if ( v118 > 0 )\n    {\n      v45 = v117[13];\n      v44 = 0.0;\n      v46 = 0LL;\n      do\n      {\n        if ( (signed int)v45 > 0 )\n        {\n          v47 = *(_QWORD *)(qword_4F9EB0 + 8 * v46);\n          v48 = 0LL;\n          if ( (unsigned __int64)(v45 - 1) >= 3 )\n          {\n            do\n            {\n              v44 = (double)*(unsigned __int16 *)(v47 + 2 * v48 + 6)\n                  + (double)*(unsigned __int16 *)(v47 + 2 * v48 + 4)\n                  + (double)*(unsigned __int16 *)(v47 + 2 * v48 + 2)\n                  + (double)*(unsigned __int16 *)(v47 + 2 * v48)\n                  + v44;\n              v48 += 4LL;\n            }\n            while ( v117[13] - (unsigned __int64)(v117[13] & 3) != v48 );\n          }\n          if ( v117[13] & 3 )\n          {\n            v49 = (unsigned __int16 *)(v47 + 2 * v48);\n            v50 = -(signed __int64)(v117[13] & 3);\n            do\n            {\n              v44 = v44 + (double)*v49;\n              ++v49;\n              ++v50;\n            }\n            while ( v50 );\n          }\n        }\n        ++v46;\n      }\n      while ( v46 < v118 );\n    }\n    v114 = 0LL;\n    v51 = v115;\n    v119 = v44 * 32.0;\n    if ( v115 > 0 )\n    {\nLABEL_54:\n      v52 = (__int64)*(&base + v114);\n      v53 = v118 * v43[13];\n      v54 = (signed int)v51;\n      memset(&v120[180 * v114], 0, 12LL * v51);\n      v43 = v117;\n      v55 = 0LL;\n      do\n      {\n        v56 = 32;\n        if ( (signed int)v53 > 0 )\n        {\n          v57 = *(_QWORD *)(*(_QWORD *)(v52 + 8 * v55) + 6432LL);\n          v58 = 0.0;\n          v59 = 0LL;\n          if ( (unsigned __int64)(v53 - 1) >= 3 )\n          {\n            do\n            {\n              v58 = (double)*(unsigned __int16 *)(v57 + 2 * v59 + 6)\n                  + (double)*(unsigned __int16 *)(v57 + 2 * v59 + 4)\n                  + (double)*(unsigned __int16 *)(v57 + 2 * v59 + 2)\n                  + (double)*(unsigned __int16 *)(v57 + 2 * v59)\n                  + v58;\n              v59 += 4LL;\n            }\n            while ( v53 - (v53 & 3) != v59 );\n          }\n          if ( v53 & 3 )\n          {\n            v60 = (unsigned __int16 *)(v57 + 2 * v59);\n            v61 = -(v53 & 3);\n            do\n            {\n              v58 = v58 + (double)*v60;\n              ++v60;\n              ++v61;\n            }\n            while ( v61 );\n          }\n          if ( v58 != 0.0 )\n            v56 = (signed int)(v119 / v58 + 0.5);\n        }\n        if ( (unsigned int)(v56 + 64) > 0xBF )\n          v56 = 32;\n        v62 = 3 * v55;\n        v63 = (char *)&v122 + 180 * v114;\n        *(_DWORD *)&v63[4 * v62] = v56;\n        *(_QWORD *)&v63[4 * v62 + 4] = 137438953504LL;\n        ++v55;\n      }\n      while ( v55 < v54 );\n    }\n    while ( 1 )\n    {\n      v36 = v116;\n      if ( v114 + 1 >= v116 )\n        break;\n      v51 = *((_DWORD *)qword_4F9BE0 + v114++ + 1);\n      if ( (signed int)v51 > 0 )\n        goto LABEL_54;\n    }\n    v64 = qword_4F9F88;\n    v65 = qword_4F9F80;\n    if ( *(_DWORD *)(qword_4F9DB8 + 196) == 1 )\n    {\n      v66 = &v123;\n      v67 = &v121;\n      v68 = 0LL;\n      if ( v115 <= 0 )\n        goto LABEL_75;\nLABEL_71:\n      v69 = v64[v68];\n      v70 = v65[v68];\n      v71 = 0LL;\n      v72 = 0LL;\n      do\n      {\n        v73 = *(_DWORD **)(v69 + 8 * v72);\n        v74 = *(_DWORD **)(v70 + 8 * v72);\n        *v73 = *(_DWORD *)&v66[v71 - 8];\n        *v74 = *(_DWORD *)&v67[v71 - 8];\n        v73[1] = *(_DWORD *)&v66[v71 - 4];\n        v74[1] = *(_DWORD *)&v67[v71 - 4];\n        v73[2] = *(_DWORD *)&v66[v71];\n        v74[2] = *(_DWORD *)&v67[v71];\n        ++v72;\n        v71 += 12LL;\n      }\n      while ( v72 < *((signed int *)qword_4F9BE0 + v68) );\nLABEL_75:\n      while ( v68 + 1 < v116 )\n      {\n        v75 = *((_DWORD *)qword_4F9BE0 + v68 + 1);\n        v66 += 180;\n        v67 += 180;\n        ++v68;\n        if ( v75 > 0 )\n          goto LABEL_71;\n      }\n    }\n    else\n    {\n      v76 = 0LL;\n      if ( v115 <= 0 )\n        goto LABEL_82;\nLABEL_78:\n      v77 = v64[v76];\n      v78 = v65[v76];\n      v79 = 0LL;\n      do\n      {\n        v80 = *(_DWORD **)(v77 + 8 * v79);\n        *v80 = 1 << dword_4FA0EC;\n        v81 = 1 << dword_4FA0C0;\n        v80[1] = 1 << dword_4FA0C0;\n        v80[2] = v81;\n        v82 = *(_QWORD *)(v78 + 8 * v79);\n        *(_QWORD *)v82 = 0LL;\n        *(_DWORD *)(v82 + 8) = 0;\n        ++v79;\n      }\n      while ( v79 < *((signed int *)qword_4F9BE0 + v76) );\nLABEL_82:\n      while ( v76 + 1 < v116 )\n      {\n        v83 = *((_DWORD *)qword_4F9BE0 + v76++ + 1);\n        if ( v83 > 0 )\n          goto LABEL_78;\n      }\n    }\n    v84 = qword_4F9BE0[0];\n    if ( SLODWORD(qword_4F9BE0[0]) > 0 )\n    {\n      v85 = qword_4F9F88;\n      v86 = qword_4F9F78;\n      v87 = HIDWORD(qword_4F9BE0[0]);\n      v88 = 0LL;\n      do\n      {\n        if ( v87 > 0 )\n        {\n          v89 = v85[1];\n          v90 = *(_DWORD **)(*v85 + 8 * v88);\n          v91 = *(_QWORD *)(*v86 + 8 * v88);\n          v92 = *(_QWORD *)(v86[1] + 8 * v88);\n          v93 = 0LL;\n          do\n          {\n            v94 = *(_DWORD **)(v91 + 8 * v93);\n            v95 = *(_DWORD **)(v89 + 8 * v93);\n            v96 = *(_DWORD **)(v92 + 8 * v93);\n            *v94 = *v90;\n            *v96 = *v95;\n            v94[1] = v90[1];\n            v96[1] = v95[1];\n            v94[2] = v90[2];\n            v96[2] = v95[2];\n            ++v93;\n            v87 = HIDWORD(qword_4F9BE0[0]);\n          }\n          while ( v93 < SHIDWORD(qword_4F9BE0[0]) );\n          v84 = qword_4F9BE0[0];\n        }\n        ++v88;\n      }\n      while ( v88 < v84 );\n    }\n  }\n  v107 = 0LL;\n  while ( 1 )\n  {\n    v108 = *((signed int *)qword_4F9BE0 + v107);\n    if ( v108 > 0 )\n      break;\nLABEL_108:\n    if ( ++v107 >= v36 )\n      return 0LL;\n  }\n  v109 = 0LL;\n  while ( 1 )\n  {\n    v110 = *(_DWORD **)(*((_QWORD *)qword_4F9F88 + v107) + 8 * v109);\n    result = 1LL;\n    if ( *v110 != 32 )\n      return result;\n    v112 = *(_DWORD **)(*((_QWORD *)qword_4F9F80 + v107) + 8 * v109);\n    if ( *v112 || v110[1] != 32 || v112[1] || v110[2] != 32 || v112[2] )\n      return result;\n    if ( ++v109 >= v108 )\n      goto LABEL_108;\n  }\n}\n", 
            "funcStartAddr": "0x482b00L", 
            "funcEndAddr": "0x48344dL", 
            "funcName": "sub_482B00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_483450(int a1)\n{\n  HIDWORD(xmmword_4A05B0[0]) = a1;\n}\n", 
            "funcStartAddr": "0x483450L", 
            "funcEndAddr": "0x483457L", 
            "funcName": "sub_483450"
        }, 
        {
            "decompiledFuncCode": "double sub_483460()\n{\n  int v0; // edx\n  int v1; // eax\n  int v2; // ecx\n  int v3; // edx\n  int v4; // eax\n\n  v0 = ((unsigned __int64)((unsigned __int128)(4730756183288445817LL * (signed __int128)SHIDWORD(xmmword_4A05B0[0])) >> 64) >> 63)\n     + ((unsigned __int64)((unsigned __int128)(4730756183288445817LL * (signed __int128)SHIDWORD(xmmword_4A05B0[0])) >> 64) >> 15);\n  v1 = 16807 * (HIDWORD(xmmword_4A05B0[0]) - 127773 * v0);\n  v2 = -2836 * v0;\n  v3 = v1 - 2836 * v0;\n  v4 = v1 + v2 + 0x7FFFFFFF;\n  if ( v3 > 0 )\n    v4 = v3;\n  HIDWORD(xmmword_4A05B0[0]) = v4;\n  return (double)v4 / 2147483647.0;\n}\n", 
            "funcStartAddr": "0x483460L", 
            "funcEndAddr": "0x4834baL", 
            "funcName": "sub_483460"
        }, 
        {
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = ((char *)&stru_49CDF8 - (char *)&off_49CDF0) >> 3;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_49CDF0 + v5++))(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x4834c0L", 
            "funcEndAddr": "0x483525L", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x483530L", 
            "funcEndAddr": "0x483532L", 
            "funcName": "fini"
        }
    ], 
    "failedCount": 0, 
    "binaryInfo": {
        "binaryName": "h264ref-amd64-clang-O2_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "451", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }, 
    "recognizedCount": 0
}