{
    "decompileResult": [
        {
            "decompiledFuncCode": "char *sub_400A20()\n{\n  char *result; // rax\n\n  result = &byte_415CC0;\n  if ( &byte_415CC0 != &byte_415CC0 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x400a20L", 
            "funcEndAddr": "0x400a41L", 
            "funcName": "sub_400A20"
        }, 
        {
            "decompiledFuncCode": "char *sub_400A90()\n{\n  char *result; // rax\n\n  if ( !byte_415CC0 )\n  {\n    result = sub_400A20();\n    byte_415CC0 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x400a90L", 
            "funcEndAddr": "0x400ab1L", 
            "funcName": "sub_400A90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_400AC0()\n{\n  return 0LL;\n}\n\n__int64 sub_400AC0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x400a50L", 
            "funcEndAddr": "0x400a81L", 
            "funcName": "sub_400AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_400AC0()\n{\n  return 0LL;\n}\n\n__int64 sub_400AC0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x400a50L", 
            "funcEndAddr": "0x400a81L", 
            "funcName": "sub_400AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_400B40()\n{\n  __int64 v0; // rbx\n  _BYTE *v1; // rax\n  unsigned __int64 v2; // rbx\n  __int64 v3; // rax\n  signed __int64 v4; // rcx\n  signed __int64 v5; // rdx\n  __int64 v6; // rcx\n  __int64 v7; // rax\n  __int64 v8; // rbx\n  _BYTE *v9; // rax\n  unsigned __int64 v10; // rbx\n  __int64 v11; // rax\n  signed __int64 v12; // rcx\n  signed __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 v15; // rax\n  __int64 v16; // rbx\n  _BYTE *v17; // rax\n  unsigned __int64 v18; // rbx\n  __int64 v19; // rax\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rdx\n  __int64 v22; // rcx\n  __int64 v23; // rax\n\n  if ( dword_4150B0 >= 4 )\n    puts(\"spec_init\");\n  v0 = (signed int)xmmword_416D10;\n  xmmword_416D10 = 0LL;\n  LODWORD(xmmword_416D10) = v0;\n  v1 = malloc(v0 + 0x100000);\n  qword_416D20 = v1;\n  if ( !v1 )\n  {\nLABEL_37:\n    puts(\"spec_init: Error mallocing memory!\");\n    exit(0);\n  }\n  if ( (signed int)v0 > 0 )\n  {\n    *v1 = 0;\n    if ( (signed int)v0 >= 1025 )\n    {\n      v2 = v0 - 1025;\n      v3 = ((unsigned __int8)(v2 >> 10) + 1) & 3;\n      if ( v2 < 0xC00 )\n      {\n        v4 = 1024LL;\n        if ( !(((unsigned __int8)(v2 >> 10) + 1) & 3) )\n          goto LABEL_14;\n        goto LABEL_12;\n      }\n      v5 = v3 - 1 - (v2 >> 10);\n      v6 = 0LL;\n      do\n      {\n        *((_BYTE *)qword_416D20 + v6 + 1024) = 0;\n        *((_BYTE *)qword_416D20 + v6 + 2048) = 0;\n        *((_BYTE *)qword_416D20 + v6 + 3072) = 0;\n        *((_BYTE *)qword_416D20 + v6 + 4096) = 0;\n        v6 += 4096LL;\n        v5 += 4LL;\n      }\n      while ( v5 );\n      v4 = v6 + 1024;\n      if ( ((unsigned __int8)(v2 >> 10) + 1) & 3 )\n      {\nLABEL_12:\n        v7 = -v3;\n        do\n        {\n          *((_BYTE *)qword_416D20 + v4) = 0;\n          v4 += 1024LL;\n          ++v7;\n        }\n        while ( v7 );\n        goto LABEL_14;\n      }\n    }\n  }\nLABEL_14:\n  v8 = (signed int)xmmword_416D28;\n  xmmword_416D28 = 0LL;\n  LODWORD(xmmword_416D28) = v8;\n  v9 = malloc(v8 + 0x100000);\n  qword_416D38 = v9;\n  if ( !v9 )\n    goto LABEL_37;\n  if ( (signed int)v8 > 0 )\n  {\n    *v9 = 0;\n    if ( (signed int)v8 >= 1025 )\n    {\n      v10 = v8 - 1025;\n      v11 = ((unsigned __int8)(v10 >> 10) + 1) & 3;\n      if ( v10 < 0xC00 )\n      {\n        v12 = 1024LL;\n        if ( !(((unsigned __int8)(v10 >> 10) + 1) & 3) )\n          goto LABEL_25;\n        goto LABEL_23;\n      }\n      v13 = v11 - 1 - (v10 >> 10);\n      v14 = 0LL;\n      do\n      {\n        *((_BYTE *)qword_416D38 + v14 + 1024) = 0;\n        *((_BYTE *)qword_416D38 + v14 + 2048) = 0;\n        *((_BYTE *)qword_416D38 + v14 + 3072) = 0;\n        *((_BYTE *)qword_416D38 + v14 + 4096) = 0;\n        v14 += 4096LL;\n        v13 += 4LL;\n      }\n      while ( v13 );\n      v12 = v14 + 1024;\n      if ( ((unsigned __int8)(v10 >> 10) + 1) & 3 )\n      {\nLABEL_23:\n        v15 = -v11;\n        do\n        {\n          *((_BYTE *)qword_416D38 + v12) = 0;\n          v12 += 1024LL;\n          ++v15;\n        }\n        while ( v15 );\n        goto LABEL_25;\n      }\n    }\n  }\nLABEL_25:\n  v16 = (signed int)xmmword_416D40;\n  xmmword_416D40 = 0LL;\n  LODWORD(xmmword_416D40) = v16;\n  v17 = malloc(v16 + 0x100000);\n  qword_416D50 = (__int64)v17;\n  if ( !v17 )\n    goto LABEL_37;\n  if ( (signed int)v16 > 0 )\n  {\n    *v17 = 0;\n    if ( (signed int)v16 >= 1025 )\n    {\n      v18 = v16 - 1025;\n      v19 = ((unsigned __int8)(v18 >> 10) + 1) & 3;\n      if ( v18 < 0xC00 )\n      {\n        v20 = 1024LL;\n        if ( !(((unsigned __int8)(v18 >> 10) + 1) & 3) )\n          return 0LL;\n        goto LABEL_34;\n      }\n      v21 = v19 - 1 - (v18 >> 10);\n      v22 = 0LL;\n      do\n      {\n        *(_BYTE *)(qword_416D50 + v22 + 1024) = 0;\n        *(_BYTE *)(qword_416D50 + v22 + 2048) = 0;\n        *(_BYTE *)(qword_416D50 + v22 + 3072) = 0;\n        *(_BYTE *)(qword_416D50 + v22 + 4096) = 0;\n        v22 += 4096LL;\n        v21 += 4LL;\n      }\n      while ( v21 );\n      v20 = v22 + 1024;\n      if ( ((unsigned __int8)(v18 >> 10) + 1) & 3 )\n      {\nLABEL_34:\n        v23 = -v19;\n        do\n        {\n          *(_BYTE *)(qword_416D50 + v20) = 0;\n          v20 += 1024LL;\n          ++v23;\n        }\n        while ( v23 );\n        return 0LL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x400b40L", 
            "funcEndAddr": "0x400e6dL", 
            "funcName": "sub_400B40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401080(int a1, const char *a2, int a3)\n{\n  int v3; // er12\n  int v4; // er13\n  int v5; // er14\n  int v6; // eax\n  int v7; // eax\n  int v8; // ebp\n  int v9; // ebp\n  FILE *v11; // rbx\n  int *v12; // rax\n  char *v13; // rcx\n  const char *v14; // rsi\n  int *v15; // rax\n  __int64 v16; // [rsp+0h] [rbp-38h]\n\n  v3 = a3;\n  v4 = open(a2, 0, a2);\n  if ( v4 < 0 )\n  {\n    v11 = stderr;\n    v15 = __errno_location();\n    v13 = strerror(*v15);\n    v14 = \"Can't open file %s: %s\\n\";\n    goto LABEL_15;\n  }\n  *(_QWORD *)((char *)&xmmword_416D10 + 24 * a1 + 4) = 0LL;\n  if ( v3 > 0 )\n  {\n    v5 = 0;\n    while ( 1 )\n    {\n      v6 = read(v4, (char *)*(&qword_416D20 + 3 * a1) + v5, 0x20000uLL);\n      if ( !v6 )\n        goto LABEL_7;\n      if ( v6 < 0 )\n        break;\n      *((_DWORD *)&xmmword_416D10 + 6 * a1 + 1) += v6;\n      v5 += v6;\n      if ( v5 >= v3 )\n        goto LABEL_7;\n    }\n    v11 = stderr;\n    v12 = __errno_location();\n    v13 = strerror(*v12);\n    v14 = \"Error reading from %s: %s\\n\";\nLABEL_15:\n    fprintf(v11, v14, v16, v13);\n    exit(0);\n  }\nLABEL_7:\n  close(v4);\n  v7 = *((_DWORD *)&xmmword_416D10 + 6 * a1 + 1);\n  if ( v7 < v3 )\n  {\n    do\n    {\n      v8 = v3 - v7;\n      if ( v3 - v7 > v7 )\n        v8 = v7;\n      if ( dword_4150B0 >= 4 )\n      {\n        printf(\"Duplicating %d bytes\\n\", (unsigned int)v8);\n        v7 = *((_DWORD *)&xmmword_416D10 + 6 * a1 + 1);\n      }\n      memcpy((char *)*(&qword_416D20 + 3 * a1) + v7, *(&qword_416D20 + 3 * a1), v8);\n      v9 = *((_DWORD *)&xmmword_416D10 + 6 * a1 + 1) + v8;\n      *((_DWORD *)&xmmword_416D10 + 6 * a1 + 1) = v9;\n      v7 = v9;\n    }\n    while ( v9 < v3 );\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401080L", 
            "funcEndAddr": "0x4011bdL", 
            "funcName": "sub_401080"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4011C0@<rax>(__int64 a1@<rax>, unsigned int a2@<edx>, unsigned int a3@<edi>, void *a4@<rsi>)\n{\n  unsigned int v4; // er15\n  void *v5; // r14\n  __int64 v6; // rsi\n  int v7; // ecx\n  unsigned int v8; // ebx\n  __int64 v10; // [rsp-8h] [rbp-28h]\n\n  v10 = a1;\n  v4 = a2;\n  v5 = a4;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_read: %d, %p, %d = \", a3, a4, a2, a1);\n  if ( (signed int)a3 >= 4 )\n  {\n    fprintf(stderr, \"spec_read: fd=%d, > MAX_SPEC_FD!\\n\", a3, v10);\n    exit(0);\n  }\n  v6 = *((signed int *)&xmmword_416D10 + 6 * (signed int)a3 + 2);\n  v7 = *((_DWORD *)&xmmword_416D10 + 6 * (signed int)a3 + 1);\n  if ( v7 <= (signed int)v6 )\n  {\n    v8 = -1;\n    if ( dword_4150B0 >= 5 )\n      puts(\"EOF\");\n  }\n  else\n  {\n    v8 = v7 - v6;\n    if ( (signed int)(v6 + v4) < v7 )\n      v8 = v4;\n    memcpy(v5, (char *)*(&qword_416D20 + 3 * (signed int)a3) + v6, (signed int)v8);\n    *((_DWORD *)&xmmword_416D10 + 6 * (signed int)a3 + 2) += v8;\n    if ( dword_4150B0 >= 5 )\n      printf(\"%d\\n\", v8, v10);\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x4011c0L", 
            "funcEndAddr": "0x4012a6L", 
            "funcName": "sub_4011C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4012B0(void *dest, unsigned int a2, unsigned int a3, unsigned int a4)\n{\n  signed int v4; // ebp\n  int v5; // ebx\n  int v6; // er15\n  __int64 v7; // rcx\n  __int64 v8; // rsi\n  int v9; // eax\n  _DWORD *v10; // r12\n  unsigned int v11; // ebp\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_fread: %p, (%d x %d) fd %d =\", dest, a2, a3, a4);\n  if ( v4 >= 4 )\n  {\n    fprintf(stderr, \"spec_fread: fd=%d, > MAX_SPEC_FD!\\n\", (unsigned int)v4);\n    exit(0);\n  }\n  v7 = v4;\n  v8 = *((signed int *)&xmmword_416D10 + 6 * v4 + 2);\n  v9 = *((_DWORD *)&xmmword_416D10 + 6 * v4 + 1);\n  if ( v9 <= (signed int)v8 )\n  {\n    v5 = -1;\n    if ( dword_4150B0 >= 5 )\n      puts(\"EOF\");\n  }\n  else\n  {\n    v10 = (_DWORD *)(24LL * v4 + 4287768);\n    v11 = v6 * v5;\n    if ( (signed int)v8 + v6 * v5 >= v9 )\n    {\n      v5 = (v9 - (signed int)v8) / v6;\n      v11 = v6 * v5;\n    }\n    memcpy(dest, (char *)*(&qword_416D20 + 3 * v7) + v8, v5);\n    *v10 += v11;\n    if ( dword_4150B0 >= 5 )\n      printf(\"%d\\n\", v11);\n  }\n  return (unsigned int)v5;\n}\n", 
            "funcStartAddr": "0x4012b0L", 
            "funcEndAddr": "0x4013a2L", 
            "funcName": "sub_4012B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4013B0(unsigned int a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rcx\n  unsigned int v3; // ebx\n\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_getc: %d = \", a1);\n  if ( (signed int)a1 >= 4 )\n  {\n    fprintf(stderr, \"spec_read: fd=%d, > MAX_SPEC_FD!\\n\", a1);\n    exit(0);\n  }\n  v1 = *((signed int *)&xmmword_416D10 + 6 * (signed int)a1 + 2);\n  if ( (signed int)v1 >= *((_DWORD *)&xmmword_416D10 + 6 * (signed int)a1 + 1) )\n  {\n    v3 = -1;\n    if ( dword_4150B0 >= 5 )\n      puts(\"EOF\");\n  }\n  else\n  {\n    v2 = (__int64)*(&qword_416D20 + 3 * (signed int)a1);\n    *((_DWORD *)&xmmword_416D10 + 6 * (signed int)a1 + 2) = v1 + 1;\n    v3 = *(unsigned __int8 *)(v2 + v1);\n    if ( dword_4150B0 >= 5 )\n      printf(\"%d\\n\", *(unsigned __int8 *)(v2 + v1));\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4013b0L", 
            "funcEndAddr": "0x40145cL", 
            "funcName": "sub_4013B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_401460@<rax>(__int64 a1@<rax>, unsigned __int8 a2@<dil>, signed int a3@<esi>)\n{\n  unsigned int v3; // ebp\n  __int64 v4; // rdx\n  __int64 v5; // rax\n  FILE *v7; // rdi\n  const char *v8; // rsi\n  __int64 v9; // [rsp-8h] [rbp-18h]\n\n  v9 = a1;\n  v3 = a3;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_ungetc: %d = \", (unsigned int)a3, a1);\n  if ( a3 >= 4 )\n  {\n    v7 = stderr;\n    v8 = \"spec_read: fd=%d, > MAX_SPEC_FD!\\n\";\n    v4 = v3;\nLABEL_11:\n    fprintf(v7, v8, v4, v9);\n    exit(0);\n  }\n  v4 = *((signed int *)&xmmword_416D10 + 6 * a3 + 2);\n  if ( v4 <= 0 )\n  {\n    v7 = stderr;\n    v8 = \"spec_ungetc: pos %d <= 0\\n\";\n    goto LABEL_11;\n  }\n  v5 = (__int64)*(&qword_416D20 + 3 * a3);\n  *((_DWORD *)&xmmword_416D10 + 6 * a3 + 2) = v4 - 1;\n  if ( *(_BYTE *)(v5 + v4 - 1) != a2 )\n  {\n    fwrite(\"spec_ungetc: can't unget something that wasn't what was in the buffer!\\n\", 0x47uLL, 1uLL, stderr);\n    exit(0);\n  }\n  if ( dword_4150B0 >= 5 )\n    printf(\"%d\\n\", 0LL, v9);\n  return a2;\n}\n", 
            "funcStartAddr": "0x401460L", 
            "funcEndAddr": "0x401524L", 
            "funcName": "sub_401460"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401530(int a1)\n{\n  *((_DWORD *)&xmmword_416D10 + 6 * a1 + 2) = 0;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401530L", 
            "funcEndAddr": "0x401545L", 
            "funcName": "sub_401530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401550(int a1)\n{\n  memset(*(&qword_416D20 + 3 * a1), 0, *((signed int *)&xmmword_416D10 + 6 * a1 + 1));\n  *(_QWORD *)((char *)&xmmword_416D10 + 24 * a1 + 4) = 0LL;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401550L", 
            "funcEndAddr": "0x40157fL", 
            "funcName": "sub_401550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_401580(signed int a1, const void *a2, unsigned int a3)\n{\n  unsigned int v3; // ebx\n  signed __int64 v4; // rbp\n\n  v3 = a3;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_write: %d, %p, %d = \", (unsigned int)a1, a2, a3);\n  if ( a1 >= 4 )\n  {\n    fprintf(stderr, \"spec_write: fd=%d, > MAX_SPEC_FD!\\n\", (unsigned int)a1);\n    exit(0);\n  }\n  v4 = 8LL * a1;\n  memcpy((char *)*(&qword_416D20 + 3 * a1) + *((signed int *)&xmmword_416D10 + 6 * a1 + 2), a2, (signed int)v3);\n  *(_DWORD *)((char *)&xmmword_416D10 + 3 * v4 + 4) += v3;\n  *(_DWORD *)((char *)&xmmword_416D10 + 3 * v4 + 8) += v3;\n  if ( dword_4150B0 >= 5 )\n    printf(\"%d\\n\", v3);\n  return v3;\n}\n", 
            "funcStartAddr": "0x401580L", 
            "funcEndAddr": "0x401616L", 
            "funcName": "sub_401580"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_401620@<rax>(void *src@<rdi>, __int64 a2@<rax>, unsigned int a3@<edx>, unsigned int a4@<ecx>, unsigned int a5@<esi>)\n{\n  signed int v5; // ebp\n  unsigned int v6; // er15\n  signed __int64 v7; // rbp\n  size_t v8; // rbx\n  __int64 v10; // [rsp-8h] [rbp-28h]\n\n  v10 = a2;\n  v5 = a4;\n  v6 = a3;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_fwrite: %p, %d, %d, %d = \", src, a5, a3, a4, a2);\n  if ( v5 >= 4 )\n  {\n    fprintf(stderr, \"spec_fwrite: fd=%d, > MAX_SPEC_FD!\\n\", (unsigned int)v5, v10);\n    exit(0);\n  }\n  v7 = 8LL * v5;\n  v8 = (signed int)(v6 * a5);\n  memcpy(*(char **)((char *)&qword_416D20 + 3 * v7) + *(signed int *)((char *)&xmmword_416D10 + 3 * v7 + 8), src, v8);\n  *(_DWORD *)((char *)&xmmword_416D10 + 3 * v7 + 4) += v8;\n  *(_DWORD *)((char *)&xmmword_416D10 + 3 * v7 + 8) += v8;\n  if ( dword_4150B0 >= 5 )\n    printf(\"%d\\n\", v6, v10);\n  return v6;\n}\n", 
            "funcStartAddr": "0x401620L", 
            "funcEndAddr": "0x4016cfL", 
            "funcName": "sub_401620"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4016D0@<rax>(__int64 a1@<rax>, unsigned __int8 a2@<dil>, signed int a3@<esi>)\n{\n  signed __int64 v3; // rax\n  __int64 v4; // rcx\n  __int64 v5; // rdx\n  __int64 v7; // [rsp-8h] [rbp-18h]\n\n  v7 = a1;\n  if ( dword_4150B0 >= 5 )\n    printf(\"spec_putc: %d, %d = \", a2, (unsigned int)a3, a1);\n  if ( a3 >= 4 )\n  {\n    fprintf(stderr, \"spec_write: fd=%d, > MAX_SPEC_FD!\\n\", (unsigned int)a3, v7);\n    exit(0);\n  }\n  v3 = 8LL * a3;\n  v4 = (__int64)*(&qword_416D20 + 3 * a3);\n  v5 = *((signed int *)&xmmword_416D10 + 6 * a3 + 2);\n  *(_DWORD *)((char *)&xmmword_416D10 + 3 * v3 + 8) = v5 + 1;\n  *(_BYTE *)(v4 + v5) = a2;\n  ++*(_DWORD *)((char *)&xmmword_416D10 + 3 * v3 + 4);\n  return a2;\n}\n", 
            "funcStartAddr": "0x4016d0L", 
            "funcEndAddr": "0x40174bL", 
            "funcName": "sub_4016D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall main(signed int a1, char **a2, char **a3)\n{\n  signed int v3; // er12\n  const char *v4; // r14\n  signed int v5; // eax\n  signed __int64 v6; // rbp\n  __m128i *v7; // r14\n  signed __int64 v8; // rax\n  char *v9; // rbx\n  unsigned __int64 v10; // rdx\n  signed __int64 v11; // r9\n  signed __int64 v12; // r8\n  signed __int64 v13; // rdi\n  unsigned __int8 *v14; // rax\n  __m128i *v15; // rsi\n  char *v16; // rax\n  signed __int64 v17; // rcx\n  char *v18; // rbx\n  unsigned int v19; // er15\n  signed __int64 v20; // rcx\n  __m128i *v21; // rdx\n\n  qword_416D60 = 10LL;\n  v3 = 64;\n  if ( a1 < 2 )\n  {\n    v4 = \"input.combined\";\n    goto LABEL_6;\n  }\n  v4 = a2[1];\n  if ( a1 == 2 )\n  {\nLABEL_6:\n    v5 = 64;\n    goto LABEL_7;\n  }\n  v5 = strtol(a2[2], 0LL, 10);\n  v3 = v5;\n  if ( a1 >= 4 )\n    v5 = strtol(a2[3], 0LL, 10);\nLABEL_7:\n  LODWORD(v6) = v3 << 20;\n  LODWORD(xmmword_416D10) = v3 << 20;\n  LODWORD(xmmword_416D28) = v5 << 20;\n  LODWORD(xmmword_416D40) = v3 << 20;\n  sub_400B40();\n  if ( dword_4150B0 >= 3 )\n    puts(\"Loading Input Data\");\n  sub_401080(0, v4, v6);\n  if ( dword_4150B0 >= 4 )\n    printf(\"Input data %d bytes in length\\n\", DWORD1(xmmword_416D10));\n  v7 = (__m128i *)malloc(v3 << 10);\n  if ( !v7 )\n  {\n    puts(\"main: Error mallocing memory!\");\n    exit(0);\n  }\n  v6 = (signed int)v6;\n  if ( v3 > 0 )\n  {\n    v8 = 1027LL;\n    if ( v6 > 1026 )\n      v8 = v6;\n    v9 = (char *)qword_416D20;\n    v10 = ((unsigned __int64)(0x7FA047CA2861B6B7LL * (unsigned __int128)(unsigned __int64)(v8 - 1) >> 64) >> 9) + 1;\n    if ( v10 >= 0x10 )\n    {\n      v11 = v10 & 0x7FFFFFFFFFFFF0LL;\n      v12 = 1027 * (v10 & 0x7FFFFFFFFFFFF0LL);\n      v13 = v10 & 0x7FFFFFFFFFFFF0LL;\n      v14 = (unsigned __int8 *)qword_416D20;\n      v15 = v7;\n      do\n      {\n        _mm_storeu_si128(\n          v15,\n          _mm_unpacklo_epi64(\n            _mm_unpacklo_epi32(\n              _mm_unpacklo_epi16(\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(*v14), _mm_cvtsi32_si128(v14[1027])),\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[2054]), _mm_cvtsi32_si128(v14[3081]))),\n              _mm_unpacklo_epi16(\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[4108]), _mm_cvtsi32_si128(v14[5135])),\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[6162]), _mm_cvtsi32_si128(v14[7189])))),\n            _mm_unpacklo_epi32(\n              _mm_unpacklo_epi16(\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[8216]), _mm_cvtsi32_si128(v14[9243])),\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[10270]), _mm_cvtsi32_si128(v14[11297]))),\n              _mm_unpacklo_epi16(\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[12324]), _mm_cvtsi32_si128(v14[13351])),\n                _mm_unpacklo_epi8(_mm_cvtsi32_si128(v14[14378]), _mm_cvtsi32_si128(v14[15405]))))));\n        ++v15;\n        v14 += 16432;\n        v13 -= 16LL;\n      }\n      while ( v13 );\n      if ( v10 == v11 )\n        goto LABEL_22;\n    }\n    else\n    {\n      v11 = 0LL;\n      v12 = 0LL;\n    }\n    v16 = (char *)v7->m128i_i64 + v11;\n    v17 = 1027 * v11;\n    v18 = &v9[v12];\n    do\n    {\n      *v16++ = *v18;\n      v17 += 1027LL;\n      v18 += 1027;\n    }\n    while ( v17 < v6 );\n  }\nLABEL_22:\n  byte_416D94 = 0;\n  dword_416D88 = 0;\n  dword_416D68 = 9;\n  dword_416D8C = 30;\n  v19 = 5;\n  do\n  {\n    if ( dword_4150B0 >= 3 )\n      printf(\"Compressing Input Data, level %d\\n\", v19);\n    dword_416D68 = v19;\n    sub_4041A0(0LL, 1LL);\n    if ( dword_4150B0 >= 4 )\n      printf(\"Compressed data %d bytes in length\\n\", DWORD1(xmmword_416D28));\n    memset(qword_416D20, 0, SDWORD1(xmmword_416D10));\n    *(_QWORD *)((char *)&xmmword_416D10 + 4) = 0LL;\n    DWORD2(xmmword_416D28) = 0;\n    if ( dword_4150B0 >= 3 )\n      puts(\"Uncompressing Data\");\n    dword_416D68 = 0;\n    sub_4049F0(1LL, 0LL);\n    if ( dword_4150B0 >= 4 )\n      printf(\"Uncompressed data %d bytes in length\\n\", DWORD1(xmmword_416D10));\n    if ( v3 > 0 )\n    {\n      v20 = 0LL;\n      v21 = v7;\n      do\n      {\n        if ( LOBYTE(v21->m128i_i64[0]) != *((_BYTE *)qword_416D20 + (unsigned int)v20) )\n        {\n          printf(\"Tested %dMB buffer: Miscompared!!\\n\", (unsigned int)v3);\n          exit(0);\n        }\n        v21 = (__m128i *)((char *)v21 + 1);\n        v20 += 1027LL;\n      }\n      while ( v20 < v6 );\n    }\n    if ( dword_4150B0 >= 4 )\n      puts(\"Uncompressed data compared correctly\");\n    memset(qword_416D38, 0, SDWORD1(xmmword_416D28));\n    *(_QWORD *)((char *)&xmmword_416D28 + 4) = 0LL;\n    DWORD2(xmmword_416D10) = 0;\n    v19 += 2;\n  }\n  while ( v19 < 0xA );\n  printf(\"Tested %dMB buffer: OK!\\n\", (unsigned int)v3);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401750L", 
            "funcEndAddr": "0x401b7eL", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_401BE0(__int64 a1)\n{\n  __int64 v1; // r15\n  _DWORD *v2; // r12\n  __int64 v3; // r13\n  signed __int64 v4; // rcx\n  __int64 v5; // r8\n  __int64 v6; // rdi\n  __int64 v7; // rsi\n  _DWORD *v8; // rdx\n  unsigned __int8 *v9; // r14\n  int v10; // edx\n  __int64 v11; // rbp\n  signed int v12; // edx\n  signed int v13; // eax\n  signed __int64 v14; // rbx\n  __int64 v15; // r11\n  int v16; // eax\n  int v17; // edx\n  int v18; // ecx\n  signed __int64 v19; // rdx\n  signed __int64 v20; // rsi\n  __int64 v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // rdi\n  int v24; // ebp\n  __int64 v25; // rsi\n  signed __int64 v26; // rcx\n  bool v27; // zf\n  unsigned __int64 v28; // rdx\n  unsigned __int64 v29; // rsi\n  signed __int64 v30; // rax\n  bool v31; // dl\n  signed __int64 v32; // rdi\n  _QWORD *v33; // rsi\n  __int64 v34; // r14\n  __int64 v35; // rcx\n  _BYTE *v36; // rcx\n  _WORD *v37; // rdx\n  signed __int64 v38; // rsi\n  int v39; // eax\n  signed __int64 v40; // rcx\n  int v41; // eax\n  int v42; // eax\n  int v43; // eax\n  int v44; // edx\n  int v45; // er8\n  __int64 v46; // rcx\n  int v47; // er9\n  int v48; // er10\n  __int64 v49; // rbx\n  unsigned int v50; // et0\n  __int64 v51; // rdx\n  int v52; // edi\n  __int64 v53; // rdx\n  __int64 v54; // rdi\n  unsigned __int64 v55; // rdi\n  __int64 v56; // rdi\n  signed __int64 v57; // rdi\n  _QWORD *v58; // rdi\n  signed __int64 v59; // rax\n  unsigned int v60; // et0\n  __m128i v61; // xmm0\n  unsigned __int64 v62; // rax\n  __m128i v63; // xmm8\n  __m128i v64; // xmm9\n  __m128i v65; // xmm10\n  __m128i v66; // xmm4\n  __m128i v67; // xmm5\n  __m128i v68; // xmm6\n  __m128i v69; // xmm7\n  __m128i v70; // xmm1\n  __int64 v71; // r8\n  signed __int64 v72; // rdx\n  unsigned int v73; // er14\n  __int64 v74; // r11\n  int v75; // er10\n  int v76; // er9\n  unsigned int v77; // ebp\n  int v78; // ebx\n  unsigned int v79; // er8\n  bool v80; // cf\n  int v81; // ebp\n  __int64 v82; // rax\n  signed int v83; // er14\n  __int64 v84; // r9\n  __int64 v85; // rax\n  signed __int64 v86; // rcx\n  __int64 v87; // rax\n  int v88; // eax\n  signed int v89; // edi\n  signed __int64 v90; // rax\n  __int64 v91; // r11\n  signed __int64 v92; // r12\n  signed __int64 v93; // rsi\n  signed __int64 v94; // rdi\n  int v95; // ebp\n  __int64 v96; // rbx\n  __int64 v97; // rcx\n  __int64 v98; // rax\n  __m128i v99; // xmm1\n  __m128i v100; // xmm3\n  int v101; // er11\n  __int64 v102; // rcx\n  __int64 v103; // r14\n  _QWORD *v104; // r12\n  signed int v105; // er10\n  __int64 v106; // r11\n  __int64 v107; // rdi\n  signed int v108; // er15\n  int v109; // eax\n  unsigned __int8 v110; // al\n  unsigned __int8 v111; // bl\n  int v112; // ebp\n  int v113; // eax\n  signed __int64 v114; // rbx\n  signed int v115; // edi\n  int v116; // eax\n  int v117; // ebp\n  __int64 v118; // r12\n  signed int v119; // ebx\n  signed int v120; // eax\n  signed int v121; // edx\n  signed int v122; // ecx\n  __int64 v123; // rcx\n  signed __int64 v124; // rdx\n  __int64 v125; // rax\n  signed __int64 v126; // rbx\n  __int64 v127; // rbx\n  __int64 v128; // r12\n  __int64 v129; // rax\n  __int64 v130; // r14\n  __int64 v131; // rbx\n  __int64 v132; // rbp\n  __int64 v133; // rdi\n  char v134; // al\n  _DWORD *v135; // r14\n  char v136; // al\n  int v137; // ebx\n  __int64 v138; // r14\n  __int64 v139; // rdi\n  _DWORD *v140; // rbp\n  char v141; // al\n  __int64 v142; // r14\n  __int64 v143; // rbp\n  __int64 v144; // rbx\n  __int64 v145; // rdi\n  char v146; // al\n  _DWORD *v147; // rbp\n  char v148; // al\n  signed int v149; // ecx\n  __int64 v150; // rcx\n  __int64 v151; // rax\n  signed __int64 v152; // rdx\n  __int64 v153; // rbx\n  __int64 v154; // rcx\n  __int64 v155; // r12\n  __m128i v156; // xmm1\n  __m128i v157; // xmm3\n  int v158; // ebp\n  __int64 v159; // rcx\n  int v160; // edx\n  __int64 v161; // rbx\n  signed int v162; // eax\n  signed int v163; // edi\n  signed int v164; // ecx\n  signed int v165; // er11\n  __int64 v166; // r11\n  signed __int64 v167; // r12\n  signed int v168; // ecx\n  __int64 v169; // rcx\n  int v170; // ebp\n  __int64 v171; // rax\n  int v172; // ecx\n  int v173; // eax\n  int v174; // er9\n  int v175; // ebx\n  bool v176; // sf\n  unsigned __int8 v177; // of\n  int v178; // ecx\n  int v179; // edx\n  int v180; // er11\n  int v181; // ebp\n  bool v182; // sf\n  unsigned __int8 v183; // of\n  int v184; // esi\n  int v185; // er12\n  int v186; // ebx\n  bool v187; // sf\n  unsigned __int8 v188; // of\n  int v189; // eax\n  int v190; // edi\n  int v191; // ebp\n  int v192; // esi\n  _DWORD *v193; // rax\n  signed __int64 v194; // rcx\n  signed __int64 v195; // rcx\n  signed int v196; // eax\n  int v197; // edx\n  __int64 v198; // rax\n  __int64 v199; // r15\n  signed int v200; // edx\n  __int64 i; // rcx\n  __int64 v202; // rdi\n  __int64 v203; // rcx\n  __int64 v204; // rax\n  signed int v205; // ebx\n  int v206; // er8\n  signed __int64 v207; // r10\n  unsigned int v208; // edi\n  signed __int64 v209; // rbx\n  signed __int64 result; // rax\n  float v211; // xmm1_4\n  signed __int64 v212; // [rsp+8h] [rbp-12F0h]\n  int v213; // [rsp+14h] [rbp-12E4h]\n  _QWORD *v214; // [rsp+18h] [rbp-12E0h]\n  __int64 v215; // [rsp+20h] [rbp-12D8h]\n  __int64 v216; // [rsp+28h] [rbp-12D0h]\n  unsigned __int8 *v217; // [rsp+30h] [rbp-12C8h]\n  int v218; // [rsp+38h] [rbp-12C0h]\n  unsigned int v219; // [rsp+3Ch] [rbp-12BCh]\n  __int64 v220; // [rsp+40h] [rbp-12B8h]\n  __int64 v221; // [rsp+48h] [rbp-12B0h]\n  __int64 v222; // [rsp+50h] [rbp-12A8h]\n  int v223; // [rsp+58h] [rbp-12A0h]\n  int v224; // [rsp+5Ch] [rbp-129Ch]\n  __int64 v225; // [rsp+60h] [rbp-1298h]\n  __int64 v226; // [rsp+68h] [rbp-1290h]\n  unsigned int v227; // [rsp+74h] [rbp-1284h]\n  __int64 v228; // [rsp+78h] [rbp-1280h]\n  __int64 v229; // [rsp+80h] [rbp-1278h]\n  __int64 v230; // [rsp+88h] [rbp-1270h]\n  __int64 v231; // [rsp+90h] [rbp-1268h]\n  int v232; // [rsp+9Ch] [rbp-125Ch]\n  __int64 v233; // [rsp+A0h] [rbp-1258h]\n  __int64 v234; // [rsp+A8h] [rbp-1250h]\n  unsigned __int64 v235; // [rsp+B0h] [rbp-1248h]\n  __int64 v236; // [rsp+B8h] [rbp-1240h]\n  _DWORD *v237; // [rsp+C0h] [rbp-1238h]\n  __int64 v238; // [rsp+C8h] [rbp-1230h]\n  __int64 v239; // [rsp+D0h] [rbp-1228h]\n  __int64 v240; // [rsp+D8h] [rbp-1220h]\n  _DWORD *v241; // [rsp+E0h] [rbp-1218h]\n  _DWORD *v242; // [rsp+E8h] [rbp-1210h]\n  __int64 v243; // [rsp+F0h] [rbp-1208h]\n  __int64 v244; // [rsp+F8h] [rbp-1200h]\n  __int64 v245; // [rsp+100h] [rbp-11F8h]\n  __int64 v246; // [rsp+108h] [rbp-11F0h]\n  __int128 v247; // [rsp+110h] [rbp-11E8h]\n  __int128 v248; // [rsp+120h] [rbp-11D8h]\n  __int128 v249; // [rsp+130h] [rbp-11C8h]\n  __int128 v250; // [rsp+140h] [rbp-11B8h]\n  __int128 v251; // [rsp+150h] [rbp-11A8h]\n  __int128 v252; // [rsp+160h] [rbp-1198h]\n  __int128 v253; // [rsp+170h] [rbp-1188h]\n  __int128 v254; // [rsp+180h] [rbp-1178h]\n  __int128 v255; // [rsp+190h] [rbp-1168h]\n  __int128 v256; // [rsp+1A0h] [rbp-1158h]\n  __int128 v257; // [rsp+1B0h] [rbp-1148h]\n  __int128 v258; // [rsp+1C0h] [rbp-1138h]\n  __int128 v259; // [rsp+1D0h] [rbp-1128h]\n  __int128 v260; // [rsp+1E0h] [rbp-1118h]\n  __int128 v261; // [rsp+1F0h] [rbp-1108h]\n  __int128 v262; // [rsp+200h] [rbp-10F8h]\n  int v263; // [rsp+210h] [rbp-10E8h]\n  int v264[99]; // [rsp+214h] [rbp-10E4h]\n  int v265[256]; // [rsp+3A0h] [rbp-F58h]\n  __int128 v266; // [rsp+7A0h] [rbp-B58h]\n  __int128 v267; // [rsp+7B0h] [rbp-B48h]\n  __int128 v268; // [rsp+7C0h] [rbp-B38h]\n  __int128 v269; // [rsp+7D0h] [rbp-B28h]\n  __int128 v270; // [rsp+7E0h] [rbp-B18h]\n  __int128 v271; // [rsp+7F0h] [rbp-B08h]\n  __int128 v272; // [rsp+800h] [rbp-AF8h]\n  __int128 v273[18]; // [rsp+810h] [rbp-AE8h]\n  int v274; // [rsp+930h] [rbp-9C8h]\n  int v275[99]; // [rsp+934h] [rbp-9C4h]\n  int v276[256]; // [rsp+AC0h] [rbp-838h]\n  int v277; // [rsp+EC0h] [rbp-438h]\n  int v278[255]; // [rsp+EC4h] [rbp-434h]\n  int v279; // [rsp+12C0h] [rbp-38h]\n  int v280[13]; // [rsp+12C4h] [rbp-34h]\n\n  v1 = a1;\n  v2 = *(_DWORD **)(a1 + 40);\n  v3 = *(_QWORD *)(a1 + 56);\n  v4 = *(signed int *)(a1 + 108);\n  v5 = *(unsigned int *)(a1 + 656);\n  if ( v4 <= 9999 )\n  {\n    v6 = *(_QWORD *)(a1 + 24);\n    v7 = *(_QWORD *)(v1 + 32);\n    v8 = v2;\n    goto LABEL_241;\n  }\n  v9 = *(unsigned __int8 **)(a1 + 64);\n  v10 = v4 + 35;\n  if ( !(((_BYTE)v4 + 34) & 1) )\n    v10 = v4 + 34;\n  v11 = v10;\n  v12 = 1;\n  if ( *(_DWORD *)(a1 + 88) > 0 )\n    v12 = *(_DWORD *)(a1 + 88);\n  v13 = 100;\n  if ( v12 < 101 )\n    v13 = v12;\n  v233 = (unsigned int)(v4\n                      * (((unsigned __int64)(1431655766LL * (v13 - 1)) >> 63)\n                       + ((unsigned __int64)(1431655766LL * (v13 - 1)) >> 32)));\n  v213 = v4\n       * (((unsigned __int64)(1431655766LL * (v13 - 1)) >> 63) + ((unsigned __int64)(1431655766LL * (v13 - 1)) >> 32));\n  v218 = v5;\n  v14 = v4;\n  if ( (signed int)v5 >= 4 )\n    fwrite(\"        main sort initialise ...\\n\", 0x21uLL, 1uLL, stderr);\n  v217 = &v9[v11];\n  memset(v2, 0, 0x40004uLL);\n  v15 = v11;\n  v16 = *v9 << 8;\n  v17 = -7;\n  if ( -(signed int)v14 >= -8 && (_DWORD)v14 != 8 )\n    v17 = -(signed int)v14;\n  v228 = v14 - 1;\n  v18 = v14 + v17 + 3;\n  v19 = v14 + 3;\n  v20 = (signed __int64)&v9[v11 - 6];\n  do\n  {\n    *(_WORD *)(v20 + 2 * v19 - 2) = 0;\n    v21 = (v16 >> 8) | (v9[v19 - 4] << 8);\n    ++v2[v21];\n    *(_WORD *)(v20 + 2 * v19 - 4) = 0;\n    v22 = ((signed int)v21 >> 8) | (v9[v19 - 5] << 8);\n    ++v2[v22];\n    *(_WORD *)(v20 + 2 * v19 - 6) = 0;\n    v23 = ((signed int)v22 >> 8) | (v9[v19 - 6] << 8);\n    ++v2[v23];\n    *(_WORD *)(v20 + 2 * v19 - 8) = 0;\n    v16 = ((signed int)v23 >> 8) | (v9[v19 - 7] << 8);\n    ++v2[v16];\n    v19 -= 4LL;\n  }\n  while ( v19 > 6 );\n  v24 = v14 - 5 - (v18 & 0xFFFFFFFC);\n  v25 = (__int64)v217;\n  if ( v24 >= 0 )\n  {\n    v26 = v24 + 1LL;\n    do\n    {\n      *(_WORD *)(v25 + 2 * v26 - 2) = 0;\n      v16 = (v9[v26 - 1] << 8) | (v16 >> 8);\n      ++v2[v16];\n      v177 = __OFADD__(-1LL, v26);\n      v27 = v26 == 1;\n      v176 = v26-- - 1 < 0;\n    }\n    while ( !((unsigned __int8)(v176 ^ v177) | v27) );\n  }\n  v28 = (unsigned __int64)&v9[v14 + 34];\n  v212 = v14;\n  v29 = (unsigned __int64)&v9[2 * v14 + v15];\n  v214 = v9;\n  v30 = 0LL;\n  if ( v29 < v28 && (unsigned __int64)&v9[v14] < v29 + 68 || (unsigned __int64)v9 < v28 && &v9[v14] < v9 + 34 )\n  {\n    v32 = v14;\n    v33 = v214;\n    v34 = v228;\n  }\n  else\n  {\n    v31 = (unsigned __int64)v9 < v29 + 68 && v29 < (unsigned __int64)(v9 + 34);\n    v32 = v14;\n    v33 = v214;\n    v34 = v228;\n    if ( !v31 )\n    {\n      *(_QWORD *)((char *)v214 + v14) = *v214;\n      v35 = (__int64)v217;\n      *(_OWORD *)&v217[2 * v14] = 0LL;\n      *(_QWORD *)((char *)v33 + v14 + 8) = v33[1];\n      *(_OWORD *)(v35 + 2 * v14 + 16) = 0LL;\n      *(_QWORD *)((char *)v33 + v14 + 16) = v33[2];\n      *(_OWORD *)(v35 + 2 * v14 + 32) = 0LL;\n      *(_QWORD *)((char *)v33 + v14 + 24) = v33[3];\n      *(_OWORD *)(v35 + 2 * v14 + 48) = 0LL;\n      v30 = 4LL;\n    }\n  }\n  v36 = (char *)&v33[v30] + 1;\n  v37 = (_WORD *)((char *)v33 + 2 * (v30 * 8 + v32) + v15 + 2);\n  v38 = 34 - v30 * 8;\n  do\n  {\n    v36[v32 - 1] = *(v36 - 1);\n    *(v37 - 1) = 0;\n    v36[v32] = *v36;\n    *v37 = 0;\n    v36 += 2;\n    v37 += 2;\n    v38 -= 2LL;\n  }\n  while ( v38 );\n  if ( v218 >= 4 )\n  {\n    fwrite(\"        bucket sorting ...\\n\", 0x1BuLL, 1uLL, stderr);\n    LODWORD(v32) = v14;\n  }\n  v39 = *v2;\n  v40 = 4611686018427322368LL;\n  do\n  {\n    v41 = v2[v40 + 65537] + v39;\n    v2[v40 + 65537] = v41;\n    v42 = v2[v40 + 65538] + v41;\n    v2[v40 + 65538] = v42;\n    v43 = v2[v40 + 65539] + v42;\n    v2[v40 + 65539] = v43;\n    v39 = v2[v40 + 65540] + v43;\n    v2[v40 + 65540] = v39;\n    v40 += 4LL;\n  }\n  while ( v40 * 4 );\n  LOWORD(v44) = *(unsigned __int8 *)v214 << 8;\n  v45 = v32 - 4;\n  v46 = (__int64)v214 + v34;\n  v47 = v32 - 3;\n  v48 = v32 - 2;\n  v7 = 0LL;\n  do\n  {\n    v49 = *(unsigned __int8 *)(v46 + v7);\n    LOWORD(v50) = v44;\n    HIWORD(v50) = *(unsigned __int8 *)(v46 + v7);\n    v51 = (unsigned __int16)(v50 >> 8);\n    v52 = v2[v51] - 1;\n    v2[v51] = v52;\n    *(_DWORD *)(v3 + 4LL * v52) = v34 + v7;\n    v53 = *(unsigned __int8 *)(v46 + v7 - 1);\n    v54 = v49 | (v53 << 8);\n    LODWORD(v49) = v2[v54] - 1;\n    v2[v54] = v49;\n    *(_DWORD *)(v3 + 4LL * (signed int)v49) = v48 + v7;\n    LODWORD(v49) = *(unsigned __int8 *)(v46 + v7 - 2);\n    v55 = v53 | ((unsigned __int64)*(unsigned __int8 *)(v46 + v7 - 2) << 8);\n    LODWORD(v53) = v2[v55] - 1;\n    v2[v55] = v53;\n    *(_DWORD *)(v3 + 4LL * (signed int)v53) = v47 + v7;\n    v44 = v49 | (*(unsigned __int8 *)(v46 + v7 - 3) << 8);\n    v56 = (unsigned __int16)(v49 | (*(unsigned __int8 *)(v46 + v7 - 3) << 8));\n    LODWORD(v49) = v2[v56] - 1;\n    v2[v56] = v49;\n    *(_DWORD *)(v3 + 4LL * (signed int)v49) = v45 + v7;\n    v57 = v34 + v7 - 4;\n    v7 -= 4LL;\n  }\n  while ( v57 + 4 > 6 );\n  v58 = v214;\n  if ( v24 >= 0 )\n  {\n    v59 = v24 + 1LL;\n    do\n    {\n      LOWORD(v60) = v44;\n      HIWORD(v60) = *((unsigned __int8 *)v58 + v59 - 1);\n      LOWORD(v44) = v60 >> 8;\n      v7 = (unsigned int)(v2[(unsigned __int16)v44] - 1);\n      v2[(unsigned __int16)v44] = v7;\n      *(_DWORD *)(v3 + 4LL * (signed int)v7) = v24--;\n      v177 = __OFADD__(-1LL, v59);\n      v27 = v59 == 1;\n      v176 = v59-- - 1 < 0;\n    }\n    while ( !((unsigned __int8)(v176 ^ v177) | v27) );\n  }\n  v262 = 0LL;\n  v261 = 0LL;\n  v260 = 0LL;\n  v259 = 0LL;\n  v258 = 0LL;\n  v257 = 0LL;\n  v256 = 0LL;\n  v255 = 0LL;\n  v254 = 0LL;\n  v253 = 0LL;\n  v252 = 0LL;\n  v251 = 0LL;\n  v250 = 0LL;\n  v249 = 0LL;\n  v248 = 0LL;\n  v247 = 0LL;\n  v61 = _mm_load_si128((const __m128i *)&xmmword_4129E0);\n  v62 = -256LL;\n  v63 = _mm_load_si128((const __m128i *)&xmmword_4129F0);\n  v64 = _mm_load_si128((const __m128i *)&xmmword_412A00);\n  v65 = _mm_load_si128((const __m128i *)&xmmword_412A10);\n  v66 = _mm_load_si128((const __m128i *)&xmmword_412A20);\n  v67 = _mm_load_si128((const __m128i *)&xmmword_412A30);\n  v68 = _mm_load_si128((const __m128i *)&xmmword_412A40);\n  v69 = _mm_load_si128((const __m128i *)&xmmword_412A50);\n  v70 = _mm_load_si128((const __m128i *)&xmmword_412A60);\n  do\n  {\n    _mm_store_si128((__m128i *)((char *)&v266 + 4 * v62), v61);\n    _mm_store_si128((__m128i *)((char *)&v267 + 4 * v62), _mm_add_epi32(v61, v63));\n    _mm_store_si128((__m128i *)((char *)&v268 + 4 * v62), _mm_add_epi32(v61, v64));\n    _mm_store_si128((__m128i *)((char *)&v269 + 4 * v62), _mm_add_epi32(v61, v65));\n    _mm_store_si128((__m128i *)((char *)&v270 + 4 * v62), _mm_add_epi32(v61, v66));\n    _mm_store_si128((__m128i *)((char *)&v271 + 4 * v62), _mm_add_epi32(v61, v67));\n    _mm_store_si128((__m128i *)((char *)&v272 + 4 * v62), _mm_add_epi32(v61, v68));\n    _mm_store_si128((__m128i *)&v273[v62 / 4], _mm_add_epi32(v61, v69));\n    v61 = _mm_add_epi32(v61, v70);\n    v62 += 32LL;\n  }\n  while ( v62 );\n  LODWORD(v71) = 364;\n  do\n  {\n    v72 = (unsigned __int64)(1431655766LL * (signed int)v71) >> 63;\n    v73 = v72 + ((unsigned __int64)(1431655766LL * (signed int)v71) >> 32);\n    if ( (signed int)v71 <= 767 )\n    {\n      v74 = (signed int)v73;\n      v75 = 0;\n      do\n      {\n        v76 = v265[v74];\n        v77 = v2[(v265[v74] << 8) + 256] - v2[v265[v74] << 8];\n        v78 = v75;\n        while ( 1 )\n        {\n          v7 = v78;\n          v72 = v265[v78] << 8;\n          if ( v2[(signed int)v72 + 256] - v2[(signed int)v72] <= v77 )\n            break;\n          v265[v73 + v78] = v265[v78];\n          v177 = __OFSUB__(v78, v73);\n          v78 -= v73;\n          if ( (v78 < 0) ^ v177 )\n            goto LABEL_44;\n        }\n        v7 = (signed int)(v73 + v78);\nLABEL_44:\n        v265[v7] = v76;\n        ++v75;\n        v177 = __OFSUB__(v74, 255LL);\n        v176 = v74++ - 255 < 0;\n      }\n      while ( v176 ^ v177 );\n    }\n    v79 = v71 - 3;\n    v80 = v79 < 2;\n    v27 = v79 == 2;\n    v71 = v73;\n  }\n  while ( !v80 && !v27 );\n  v238 = v3 + 4;\n  v244 = v3 + 8;\n  v236 = v3 + 16;\n  v243 = v3 + 20;\n  v242 = v2 + 257;\n  v241 = v2 + 256;\n  v81 = v233;\n  v82 = 0LL;\n  v219 = 0;\n  v83 = v218;\n  v84 = v212;\n  v234 = v1;\n  v237 = v2;\nLABEL_47:\n  v235 = v82;\n  v85 = (unsigned int)v265[v82];\n  v240 = v85;\n  v86 = (signed int)v85;\n  v85 = (signed int)v85;\n  v220 = v85;\n  LODWORD(v85) = (_DWORD)v85 << 8;\n  v232 = v85;\n  v231 = (signed int)v85;\n  v87 = 0LL;\n  while ( v87 == v240 )\n  {\nLABEL_203:\n    if ( (unsigned __int64)++v87 >= 0x100 )\n    {\n      v27 = *((_BYTE *)&v247 + v220) == 0;\n      LODWORD(v216) = v81;\n      if ( !v27 )\n        sub_404F10(1006LL, v7, v72, v86, v71, v84);\n      v193 = &v242[v220];\n      v194 = -256LL;\n      v7 = 4292870143LL;\n      do\n      {\n        *(&v279 + v194) = *(v193 - 257) & 0xFFDFFFFF;\n        *(&v277 + v194) = (*(v193 - 256) & 0xFFDFFFFF) - 1;\n        v280[v194] = *(v193 - 1) & 0xFFDFFFFF;\n        v278[v194] = (*v193 & 0xFFDFFFFF) - 1;\n        v193 += 512;\n        v194 += 2LL;\n      }\n      while ( v194 );\n      LODWORD(v195) = v2[v231] & 0xFFDFFFFF;\n      v196 = *(&v277 + v220);\n      if ( (signed int)v195 < v196 )\n      {\n        v195 = (signed int)v195;\n        do\n        {\n          v197 = (v84 & ((*(_DWORD *)(v3 + 4 * v195) - 1) >> 31)) + *(_DWORD *)(v3 + 4 * v195) - 1;\n          v7 = *((unsigned __int8 *)v214 + v197);\n          if ( !*((_BYTE *)&v247 + v7) )\n          {\n            v198 = *(&v277 + v7);\n            *(&v277 + v7) = v198 + 1;\n            *(_DWORD *)(v3 + 4 * v198) = v197;\n            v196 = *(&v277 + v220);\n          }\n          ++v195;\n        }\n        while ( v195 < v196 );\n      }\n      v199 = v232 + 256;\n      v200 = (v2[v199] & 0xFFDFFFFF) - 1;\n      for ( i = (unsigned int)v276[v220]; v200 > (signed int)i; --v200 )\n      {\n        v7 = ((unsigned int)v84 & ((*(_DWORD *)(v3 + 4LL * v200) - 1) >> 31)) + *(_DWORD *)(v3 + 4LL * v200) - 1;\n        v202 = *((unsigned __int8 *)v214 + (signed int)v7);\n        if ( !*((_BYTE *)&v247 + v202) )\n        {\n          v203 = v276[v202];\n          v276[v202] = v203 - 1;\n          *(_DWORD *)(v3 + 4 * v203) = v7;\n          i = (unsigned int)v276[v220];\n        }\n      }\n      v72 = (unsigned int)(v196 - 1);\n      if ( (_DWORD)v72 != (_DWORD)i && (v196 || (_DWORD)i != (_DWORD)v228) )\n        sub_404F10(1007LL, v7, v72, i, v71, v84);\n      v204 = (__int64)&v241[v220];\n      v86 = -262144LL;\n      do\n      {\n        *(_BYTE *)(v204 + v86 + 261122) |= 0x20u;\n        *(_BYTE *)(v204 + v86 + 262146) |= 0x20u;\n        v86 += 2048LL;\n      }\n      while ( v86 );\n      *((_BYTE *)&v247 + v220) = 1;\n      if ( v235 <= 0xFE )\n      {\n        v205 = v2[v231] & 0xFFDFFFFF;\n        v7 = (v2[v199] & 0xFFDFFFFF) - v205;\n        LODWORD(v86) = -1;\n        do\n          v86 = (unsigned int)(v86 + 1);\n        while ( (signed int)v7 >> v86 > 65534 );\n        v206 = v7 - 1;\n        if ( (signed int)v7 > 0 )\n        {\n          v7 = (signed int)v7 + 1LL;\n          v207 = v3 + 4LL * v205;\n          v208 = (v2[v199] & 0xFFDFFFFF) - 1 - v205;\n          do\n          {\n            v209 = *(signed int *)(v207 + 4 * v7 - 8);\n            v72 = (signed __int64)v217;\n            *(_WORD *)&v217[2 * v209] = v208 >> v86;\n            if ( v209 <= 33 )\n            {\n              v72 = (signed __int64)v217;\n              *(_WORD *)&v217[2 * ((signed int)v84 + (signed int)v209)] = v208 >> v86;\n            }\n            --v7;\n            --v208;\n          }\n          while ( v7 > 1 );\n        }\n        v71 = (unsigned int)(v206 >> v86);\n        if ( (signed int)v71 >= 0x10000 )\n          sub_404F10(1002LL, v7, v72, v86, v71, v84);\n      }\n      v82 = v235 + 1;\n      v1 = v234;\n      if ( v235 + 1 >= 0x100 )\n      {\n        if ( v83 >= 4 )\n        {\n          v7 = (__int64)\"        %d pointers, %d sorted, %d scanned\\n\";\n          fprintf(\n            stderr,\n            \"        %d pointers, %d sorted, %d scanned\\n\",\n            (unsigned int)v84,\n            v219,\n            (unsigned int)v84 - v219,\n            *(double *)v61.m128i_i64);\n          v81 = v216;\n          v84 = v212;\n          if ( v83 >= 3 )\n            goto LABEL_248;\n        }\n        else if ( v83 >= 3 )\n        {\n          goto LABEL_248;\n        }\nLABEL_237:\n        if ( v81 >= 0 )\n          goto LABEL_242;\nLABEL_238:\n        if ( v83 >= 2 )\n        {\n          fwrite(\"    too repetitive; using fallback sorting algorithm\\n\", 0x35uLL, 1uLL, stderr);\n          LODWORD(v84) = v212;\n        }\n        v6 = *(_QWORD *)(v1 + 24);\n        v7 = *(_QWORD *)(v1 + 32);\n        v8 = v2;\n        v4 = (unsigned int)v84;\n        v5 = (unsigned int)v83;\nLABEL_241:\n        sub_4032A0(v6, v7, v8, v4, v5);\n        goto LABEL_242;\n      }\n      goto LABEL_47;\n    }\n  }\n  v86 = 4292870143LL;\n  v72 = v87;\n  v239 = v87;\n  v7 = v87 + v231;\n  v88 = v2[v87 + v231];\n  if ( _bittest(&v88, 0x15u)\n    || (v72 = v88 & 0xFFDFFFFF, v89 = (v2[v7 + 1] & 0xFFDFFFFF) - 1, v224 = v72, v223 = v89, v89 <= (signed int)v72) )\n  {\nLABEL_202:\n    v2[v7] = v88 | 0x200000;\n    v87 = v239;\n    goto LABEL_203;\n  }\n  v225 = v7;\n  if ( v83 >= 4 )\n  {\n    v7 = (__int64)\"        qsort [0x%x, 0x%x]   done %d   this %d\\n\";\n    fprintf(\n      stderr,\n      \"        qsort [0x%x, 0x%x]   done %d   this %d\\n\",\n      v240,\n      v239,\n      v219,\n      (unsigned int)(v223 + 1 - v224));\n  }\n  v274 = v224;\n  LODWORD(v266) = v223;\n  v263 = 2;\n  v90 = 1LL;\n  while ( 2 )\n  {\n    LODWORD(v216) = v81;\n    v102 = (unsigned int)(v90 - 1);\n    v227 = v102;\n    v103 = (signed int)v102;\n    v104 = v214;\n    v222 = v90;\n    if ( (signed int)v90 >= 100 )\nLABEL_61:\n      sub_404F10(1001LL, v7, v72, v102, v71, v84);\n    while ( 1 )\n    {\n      v105 = *(&v274 + v103);\n      v106 = v105;\n      v107 = *((unsigned int *)&v266 + v103);\n      v86 = (signed int)v107;\n      v108 = *(&v263 + v103);\n      v109 = *((_DWORD *)&v266 + v103) - v105;\n      v230 = (signed int)v107;\n      v229 = v107;\n      if ( v109 < 20 || v108 >= 15 )\n        break;\n      v110 = *((_BYTE *)v104 + (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * v105)));\n      LOBYTE(v72) = *((_BYTE *)v104 + (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * (signed int)v107)));\n      v102 = (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * (((signed int)v107 + v105) >> 1)));\n      LOBYTE(v102) = *((_BYTE *)v104 + v102);\n      if ( v110 > (unsigned __int8)v72 )\n      {\n        v111 = *((_BYTE *)v104 + (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * v105)));\n        v110 = *((_BYTE *)v104 + (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * (signed int)v107)));\n        if ( (unsigned __int8)v72 > (unsigned __int8)v102 )\n          goto LABEL_69;\nLABEL_68:\n        v110 = v102;\n        goto LABEL_69;\n      }\n      v111 = *((_BYTE *)v104 + (unsigned int)(v108 + *(_DWORD *)(v3 + 4LL * (signed int)v107)));\n      if ( v110 <= (unsigned __int8)v102 )\n        goto LABEL_68;\nLABEL_69:\n      if ( v111 <= (unsigned __int8)v102 )\n        v110 = v111;\n      v112 = v110;\n      v7 = (unsigned int)v107;\n      v84 = (unsigned int)v105;\n      v113 = v107;\n      v71 = (unsigned int)v105;\n      if ( v105 <= (signed int)v107 )\n      {\nLABEL_74:\n        v84 = (signed int)v84;\n        do\n        {\n          v102 = (signed int)v71;\n          while ( 1 )\n          {\n            v72 = *(unsigned int *)(v3 + 4 * v102);\n            if ( *((unsigned __int8 *)v104 + (unsigned int)(v72 + v108)) == v112 )\n              break;\n            if ( *((unsigned __int8 *)v104 + (unsigned int)(v72 + v108)) - v112 <= 0 )\n            {\n              v177 = __OFSUB__(v102, v113);\n              v176 = v102++ - v113 < 0;\n              if ( v176 ^ v177 )\n                continue;\n            }\n            goto LABEL_82;\n          }\n          *(_DWORD *)(v3 + 4 * v102) = *(_DWORD *)(v3 + 4 * v84);\n          *(_DWORD *)(v3 + 4 * v84++) = v72;\n          LODWORD(v71) = v102 + 1;\n        }\n        while ( v113 > (signed int)v102 );\n        v102 = (unsigned int)(v102 + 1);\nLABEL_82:\n        v71 = (unsigned int)v102;\n      }\nLABEL_83:\n      if ( (signed int)v71 > v113 )\n      {\n        v115 = v113;\n        if ( (signed int)v7 >= (signed int)v84 )\n          goto LABEL_95;\n      }\n      else\n      {\n        v102 = (signed int)v71;\n        v7 = (signed int)v7;\n        do\n        {\n          v114 = v113 + 1LL;\n          v115 = v113;\n          while ( 1 )\n          {\n            v116 = *(_DWORD *)(v3 + 4 * v114 - 4);\n            v72 = (unsigned int)*((unsigned __int8 *)v104 + (unsigned int)(v116 + v108)) - v112;\n            if ( *((unsigned __int8 *)v104 + (unsigned int)(v116 + v108)) == v112 )\n              break;\n            if ( (signed int)v72 < 0 )\n            {\n              v72 = *(unsigned int *)(v3 + 4LL * (signed int)v71);\n              *(_DWORD *)(v3 + 4LL * (signed int)v71) = v116;\n              *(_DWORD *)(v3 + 4 * v114 - 4) = v72;\n              v71 = (unsigned int)(v71 + 1);\n              v113 = v115 - 1;\n              if ( (signed int)v71 <= v115 - 1 )\n                goto LABEL_74;\n              goto LABEL_83;\n            }\n            --v114;\n            --v115;\n            if ( v114 <= (signed int)v71 )\n              goto LABEL_92;\n          }\n          v72 = *(unsigned int *)(v3 + 4 * v7);\n          *(_DWORD *)(v3 + 4 * v114 - 4) = v72;\n          *(_DWORD *)(v3 + 4 * v7--) = v116;\n          v113 = v115 - 1;\n        }\n        while ( (signed int)v71 < v115 );\n        --v115;\nLABEL_92:\n        if ( (signed int)v7 >= (signed int)v84 )\n        {\nLABEL_95:\n          v117 = v71 - v84;\n          if ( (signed int)v84 - v105 <= (signed int)v71 - (signed int)v84 )\n            v117 = v84 - v105;\n          if ( v117 > 0 )\n          {\n            LODWORD(v118) = v71 - v117;\n            v119 = v105 - 1 - v84;\n            v120 = v84 - 1 - v71;\n            v121 = v84 - 1 - v71;\n            if ( v119 >= v120 )\n              v121 = v105 - 1 - v84;\n            v122 = -2;\n            if ( v121 > -3 )\n              v122 = v121;\n            v118 = (signed int)v118;\n            v123 = (unsigned int)(v122 - v121);\n            v124 = v123 + 1;\n            if ( (unsigned __int64)(v123 + 1) < 8 )\n            {\n              v125 = v118;\n              goto LABEL_149;\n            }\n            v221 = v123;\n            if ( v119 >= v120 )\n              v120 = v105 - 1 - v84;\n            v149 = -2;\n            if ( v120 > -3 )\n              v149 = v120;\n            v215 = v118;\n            v150 = (unsigned int)(v149 - v120);\n            if ( v3 + 4LL * v105 < (unsigned __int64)(v238 + 4 * (v150 + (signed int)v71 - v117))\n              && v3 + 4 * v215 < (unsigned __int64)(v238 + 4 * (v105 + v150)) )\n            {\n              v106 = v105;\n              v125 = v215;\n              goto LABEL_149;\n            }\n            v151 = ((_BYTE)v221 + 1) & 7;\n            v221 = v151;\n            v152 = v124 - v151;\n            v106 = v152 + v105;\n            v125 = v152 + v215;\n            v117 -= v152;\n            v153 = v236 + 4 * v215;\n            v154 = v236 + 4LL * v105;\n            v155 = 0LL;\n            do\n            {\n              v61 = _mm_loadu_si128((const __m128i *)(v154 + 4 * v155 - 16));\n              v156 = _mm_loadu_si128((const __m128i *)(v154 + 4 * v155));\n              v157 = _mm_loadu_si128((const __m128i *)(v153 + 4 * v155));\n              _mm_storeu_si128(\n                (__m128i *)(v154 + 4 * v155 - 16),\n                _mm_loadu_si128((const __m128i *)(v153 + 4 * v155 - 16)));\n              _mm_storeu_si128((__m128i *)(v154 + 4 * v155), v157);\n              _mm_storeu_si128((__m128i *)(v153 + 4 * v155 - 16), v61);\n              _mm_storeu_si128((__m128i *)(v153 + 4 * v155), v156);\n              v155 += 8LL;\n            }\n            while ( v152 != v155 );\n            if ( (_DWORD)v221 )\n            {\nLABEL_149:\n              v158 = v117 + 1;\n              v159 = v3;\n              do\n              {\n                v160 = *(_DWORD *)(v159 + 4 * v106);\n                *(_DWORD *)(v159 + 4 * v106) = *(_DWORD *)(v159 + 4 * v125);\n                *(_DWORD *)(v159 + 4 * v125) = v160;\n                v159 += 4LL;\n                --v158;\n              }\n              while ( v158 > 1 );\n            }\n          }\n          v95 = v229 - v7;\n          v101 = v7 - v115;\n          if ( (signed int)v229 - (signed int)v7 > (signed int)v7 - v115 )\n            v95 = v7 - v115;\n          if ( v95 > 0 )\n          {\n            LODWORD(v215) = v7 - v115;\n            v161 = (signed int)v229 - v95;\n            v162 = v7 - 1 - v229;\n            v163 = v115 - 1 - v7;\n            v164 = v163;\n            if ( v162 >= v163 )\n              v164 = v7 - 1 - v229;\n            v165 = -2;\n            if ( v164 > -3 )\n              v165 = v164;\n            v93 = (signed int)v71;\n            v166 = (unsigned int)(v165 - v164);\n            v167 = v166 + 1;\n            if ( (unsigned __int64)(v166 + 1) < 8 )\n              goto LABEL_258;\n            if ( v162 >= v163 )\n              v163 = v162;\n            v168 = -2;\n            if ( v163 > -3 )\n              v168 = v163;\n            v169 = (unsigned int)(v168 - v163);\n            if ( v3 + 4LL * (signed int)v71 < (unsigned __int64)(v244 + 4 * (v169 + v230 - v95))\n              && v238 + 4 * v161 < (unsigned __int64)(v238 + 4 * ((signed int)v71 + v169)) )\n            {\nLABEL_258:\n              v94 = (signed int)v229 - v95;\n              v101 = v215;\n              goto LABEL_166;\n            }\n            v91 = ((_BYTE)v166 + 1) & 7;\n            v92 = v167 - v91;\n            v93 = v92 + (signed int)v71;\n            v94 = v92 + v161;\n            v95 -= v92;\n            v96 = v243 + 4 * v161;\n            v97 = v236 + 4LL * (signed int)v71;\n            v98 = 0LL;\n            do\n            {\n              v61 = _mm_loadu_si128((const __m128i *)(v97 + 4 * v98 - 16));\n              v99 = _mm_loadu_si128((const __m128i *)(v97 + 4 * v98));\n              v100 = _mm_loadu_si128((const __m128i *)(v96 + 4 * v98));\n              _mm_storeu_si128((__m128i *)(v97 + 4 * v98 - 16), _mm_loadu_si128((const __m128i *)(v96 + 4 * v98 - 16)));\n              _mm_storeu_si128((__m128i *)(v97 + 4 * v98), v100);\n              _mm_storeu_si128((__m128i *)(v96 + 4 * v98 - 16), v61);\n              _mm_storeu_si128((__m128i *)(v96 + 4 * v98), v99);\n              v98 += 8LL;\n            }\n            while ( v92 != v98 );\n            v27 = (_DWORD)v91 == 0;\n            v101 = v215;\n            if ( !v27 )\n            {\nLABEL_166:\n              v170 = v95 + 1;\n              v171 = v3;\n              do\n              {\n                v172 = *(_DWORD *)(v171 + 4 * v93);\n                *(_DWORD *)(v171 + 4 * v93) = *(_DWORD *)(v171 + 4 * v94 + 4);\n                *(_DWORD *)(v171 + 4 * v94 + 4) = v172;\n                v171 += 4LL;\n                --v170;\n              }\n              while ( v170 > 1 );\n            }\n          }\n          v173 = v105 - v84;\n          v174 = v105 - v84 + v71;\n          v71 = (unsigned int)(v173 + v71 - 1);\n          v175 = v229 - v101;\n          v177 = __OFSUB__(v71 - v105, v101 - 1);\n          v176 = (signed int)v71 - v105 - (v101 - 1) < 0;\n          v178 = v229 - v101 + 1;\n          if ( (signed int)v71 - v105 < v101 - 1 )\n            v178 = v105;\n          if ( (signed int)v71 - v105 < v101 - 1 )\n            v105 = v229 - v101 + 1;\n          v179 = v229;\n          if ( v176 ^ v177 )\n            v179 = v71;\n          v180 = v108 + 1;\n          if ( v176 ^ v177 )\n            v71 = (unsigned int)v229;\n          v181 = v179 - v178;\n          v183 = __OFSUB__(v179 - v178, v175 - v174);\n          v182 = v179 - v178 - (v175 - v174) < 0;\n          v184 = v178;\n          if ( v179 - v178 < v175 - v174 )\n            v184 = v174;\n          v185 = v175;\n          if ( v181 < v175 - v174 )\n          {\n            v185 = v179;\n            if ( v181 < v175 - v174 )\n              v179 = v175;\n          }\n          v186 = v108;\n          if ( v182 ^ v183 )\n          {\n            v186 = v108 + 1;\n            if ( v182 ^ v183 )\n              v180 = v108;\n          }\n          if ( !(v182 ^ v183) )\n            v178 = v174;\n          v188 = __OFSUB__(v71 - v105, v179 - v184);\n          v187 = (signed int)v71 - v105 - (v179 - v184) < 0;\n          v189 = v184;\n          if ( (signed int)v71 - v105 < v179 - v184 )\n            v189 = v105;\n          if ( (signed int)v71 - v105 >= v179 - v184 )\n            v184 = v105;\n          v190 = v179;\n          if ( v187 ^ v188 )\n            v190 = v71;\n          if ( !(v187 ^ v188) )\n            v179 = v71;\n          v191 = v186;\n          if ( v187 ^ v188 )\n            v191 = v108;\n          if ( !(v187 ^ v188) )\n            v186 = v108;\n          *(&v274 + v103) = v184;\n          *((_DWORD *)&v266 + v103) = v179;\n          *(&v263 + v103) = v186;\n          v192 = v222;\n          v72 = (signed int)v222;\n          *(&v274 + v72) = v189;\n          *((_DWORD *)&v266 + v72) = v190;\n          *(&v263 + v72) = v191;\n          v275[v72] = v178;\n          *((_DWORD *)&v266 + v72 + 1) = v185;\n          v264[v72] = v180;\n          v227 = v192 + 2;\n          v84 = v212;\n          v81 = v216;\n          v7 = v225;\n          goto LABEL_199;\n        }\n      }\n      *(&v263 + v103) = v108 + 1;\n      if ( (signed int)v222 >= 100 )\n        goto LABEL_61;\n    }\n    v84 = v212;\n    v7 = v225;\n    if ( v109 <= 0 )\n    {\n      v81 = v216;\n    }\n    else\n    {\n      v126 = -4294967296LL;\n      v86 = 0LL;\n      v72 = 0x100000000LL;\n      do\n      {\n        v126 += 0x100000000LL;\n        v177 = __OFSUB__(dword_412B30[v86], v109);\n        v27 = dword_412B30[v86] == v109;\n        v176 = dword_412B30[v86++] - v109 < 0;\n      }\n      while ( (unsigned __int8)(v176 ^ v177) | v27 );\n      v81 = v216;\n      if ( (_DWORD)v86 != 1 )\n      {\n        v127 = v126 >> 32;\n        v245 = v105;\n        do\n        {\n          v246 = v127;\n          v128 = dword_412B2C[v127];\n          v222 = v128 + v106;\n          if ( (signed int)v128 + (signed int)v106 <= (signed int)v107 )\n          {\n            v216 = (unsigned int)-(signed int)v128;\n            v129 = v222;\n            do\n            {\n              v130 = *(unsigned int *)(v3 + 4 * v129);\n              v131 = v129;\n              v132 = v129 - v128;\n              v133 = (unsigned int)(v108 + *(_DWORD *)(v3 + 4 * (v129 - v128)));\n              LODWORD(v215) = v130 + v108;\n              v134 = sub_403F60(v133, (unsigned int)(v130 + v108), v214, v217, (unsigned int)v84, &v213);\n              v221 = v131;\n              v226 = v130;\n              if ( v134 )\n              {\n                v135 = (_DWORD *)(v3 + 4 * v132);\n                v84 = v212;\n                do\n                {\n                  LODWORD(v131) = v132;\n                  *(_DWORD *)(v3 + 4LL * ((signed int)v128 + (signed int)v132)) = *v135;\n                  if ( (signed int)v132 < (signed int)v222 )\n                    break;\n                  LODWORD(v132) = v132 - v128;\n                  v135 = (_DWORD *)(v3 + 4LL * ((signed int)v216 + (signed int)v131));\n                  v136 = sub_403F60(\n                           (unsigned int)(v108 + *v135),\n                           (unsigned int)v215,\n                           v214,\n                           v217,\n                           (unsigned int)v84,\n                           &v213);\n                  v84 = v212;\n                }\n                while ( v136 );\n              }\n              else\n              {\n                v84 = v212;\n              }\n              v86 = v226;\n              *(_DWORD *)(v3 + 4LL * (signed int)v131) = v226;\n              if ( v221 >= v230 )\n                break;\n              v137 = v221 + 1;\n              v138 = v221 + 1 - v128;\n              v139 = (unsigned int)(v108 + *(_DWORD *)(v3 + 4 * v138));\n              v226 = *(unsigned int *)(v3 + 4 * v221 + 4);\n              LODWORD(v215) = v226 + v108;\n              if ( (unsigned __int8)sub_403F60(v139, (unsigned int)(v226 + v108), v214, v217, (unsigned int)v84, &v213) )\n              {\n                v140 = (_DWORD *)(v3 + 4 * v138);\n                v84 = v212;\n                do\n                {\n                  v137 = v138;\n                  *(_DWORD *)(v3 + 4LL * ((signed int)v128 + (signed int)v138)) = *v140;\n                  if ( (signed int)v138 < (signed int)v222 )\n                    break;\n                  LODWORD(v138) = v138 - v128;\n                  v140 = (_DWORD *)(v3 + 4LL * ((signed int)v216 + v137));\n                  v141 = sub_403F60(\n                           (unsigned int)(v108 + *v140),\n                           (unsigned int)v215,\n                           v214,\n                           v217,\n                           (unsigned int)v84,\n                           &v213);\n                  v84 = v212;\n                }\n                while ( v141 );\n              }\n              else\n              {\n                v84 = v212;\n              }\n              v86 = v226;\n              *(_DWORD *)(v3 + 4LL * v137) = v226;\n              v142 = v221 + 2;\n              if ( v221 + 2 > v230 )\n                break;\n              v143 = *(unsigned int *)(v3 + 4 * v221 + 8);\n              v144 = v142 - v128;\n              v145 = (unsigned int)(v108 + *(_DWORD *)(v3 + 4 * (v142 - v128)));\n              LODWORD(v215) = v108 + v143;\n              v146 = sub_403F60(v145, (unsigned int)(v108 + v143), v214, v217, (unsigned int)v84, &v213);\n              v226 = v143;\n              if ( v146 )\n              {\n                v147 = (_DWORD *)(v3 + 4 * v144);\n                v84 = v212;\n                v7 = v225;\n                do\n                {\n                  LODWORD(v142) = v144;\n                  *(_DWORD *)(v3 + 4LL * ((signed int)v128 + (signed int)v144)) = *v147;\n                  if ( (signed int)v144 < (signed int)v222 )\n                    break;\n                  LODWORD(v144) = v144 - v128;\n                  v147 = (_DWORD *)(v3 + 4LL * ((signed int)v216 + (signed int)v142));\n                  v148 = sub_403F60(\n                           (unsigned int)(v108 + *v147),\n                           (unsigned int)v215,\n                           v214,\n                           v217,\n                           (unsigned int)v84,\n                           &v213);\n                  v7 = v225;\n                  v84 = v212;\n                }\n                while ( v148 );\n              }\n              else\n              {\n                v84 = v212;\n                v7 = v225;\n              }\n              v86 = v226;\n              *(_DWORD *)(v3 + 4LL * (signed int)v142) = v226;\n              v81 = v213;\n              if ( v213 < 0 )\n                goto LABEL_200;\n              v129 = v221 + 3;\n            }\n            while ( v221 + 3 <= v230 );\n          }\n          v127 = v246 - 1;\n          LODWORD(v107) = v229;\n          v106 = v245;\n        }\n        while ( v246 > 1 );\n        v81 = v213;\n        v7 = v225;\n        if ( v213 < 0 )\n          break;\n        goto LABEL_199;\n      }\n    }\n    if ( v81 < 0 )\n      break;\nLABEL_199:\n    v86 = v227;\n    v90 = v227;\n    if ( (signed int)v227 > 0 )\n      continue;\n    break;\n  }\nLABEL_200:\n  if ( v81 >= 0 )\n  {\n    v219 = v223 + v219 + 1 - v224;\n    v2 = v237;\n    v88 = v237[v7];\n    v83 = v218;\n    goto LABEL_202;\n  }\n  v1 = v234;\n  v2 = v237;\n  v83 = v218;\n  if ( v218 < 3 )\n    goto LABEL_237;\nLABEL_248:\n  if ( (_DWORD)v84 )\n    v211 = (float)(signed int)v84;\n  else\n    v211 = 1.0;\n  v7 = (__int64)\"      %d work, %d block, ratio %5.2f\\n\";\n  fprintf(\n    stderr,\n    \"      %d work, %d block, ratio %5.2f\\n\",\n    (unsigned int)(v233 - v81),\n    (unsigned int)v84,\n    v71,\n    (float)((float)(v233 - v81) / v211));\n  v84 = v212;\n  if ( v81 < 0 )\n    goto LABEL_238;\nLABEL_242:\n  *(_DWORD *)(v1 + 48) = -1;\n  result = *(signed int *)(v1 + 108);\n  if ( result <= 0 )\nLABEL_246:\n    sub_404F10(1003LL, v7, v72, v86, v71, v84);\n  v86 = 0LL;\n  while ( *(_DWORD *)(v3 + 4 * v86) )\n  {\n    if ( ++v86 >= result )\n      goto LABEL_246;\n  }\n  *(_DWORD *)(v1 + 48) = v86;\n  return result;\n}\n", 
            "funcStartAddr": "0x401be0L", 
            "funcEndAddr": "0x403295L", 
            "funcName": "sub_401BE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4032A0(__int64 a1, __int64 a2, char *a3, unsigned int a4, signed int a5)\n{\n  char *v5; // r15\n  __int64 v6; // r14\n  __int64 v7; // rbx\n  int v8; // ebp\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  unsigned __int8 *v11; // rcx\n  __int64 v12; // rax\n  unsigned __int64 v13; // rax\n  int v14; // ebp\n  int v15; // ebp\n  int v16; // ebp\n  __int64 v17; // r9\n  signed __int64 v18; // r8\n  signed int v19; // er10\n  __int64 v20; // rax\n  __int64 v21; // rsi\n  __int64 v22; // rdi\n  __int64 v23; // rsi\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  signed __int64 v28; // rax\n  signed int v29; // edx\n  int v30; // eax\n  unsigned int v31; // ebp\n  unsigned __int64 v32; // rax\n  int v33; // ecx\n  int v34; // edx\n  signed __int64 v35; // rdx\n  int v36; // ecx\n  signed int v37; // er12\n  signed int v38; // edx\n  __int64 v39; // rax\n  int v40; // esi\n  int v41; // ecx\n  int v42; // edi\n  signed int v43; // er13\n  int v44; // edx\n  int v45; // ecx\n  int v46; // esi\n  signed int v47; // er13\n  signed __int64 v48; // rsi\n  signed __int64 v49; // r11\n  signed __int64 v50; // rcx\n  signed __int64 v51; // r9\n  __int64 v52; // rdi\n  signed int v53; // er10\n  signed int v54; // eax\n  signed __int64 v55; // rdi\n  __int64 v56; // rax\n  unsigned int v57; // ebp\n  signed __int64 v58; // r11\n  __int64 v59; // r9\n  bool v60; // zf\n  bool v61; // sf\n  unsigned __int8 v62; // of\n  __int64 v63; // rax\n  int v64; // edi\n  unsigned int v65; // ebp\n  __int64 v66; // rdi\n  int v67; // edi\n  unsigned int v68; // eax\n  char v69; // cl\n  int v70; // eax\n  int v71; // er11\n  signed int v72; // er9\n  __int64 v73; // rcx\n  __int64 v74; // rax\n  int v75; // edi\n  __int64 v76; // rsi\n  signed __int64 v77; // rax\n  __int64 v78; // rbp\n  int v79; // esi\n  __int64 v80; // r9\n  signed int v81; // er11\n  signed int v82; // edi\n  signed int v83; // eax\n  signed int v84; // ebp\n  __int64 v85; // rbp\n  signed int v86; // ebp\n  __int64 v87; // rbp\n  signed __int64 v88; // r11\n  int v89; // esi\n  __int64 v90; // rax\n  int v91; // edi\n  int v92; // edi\n  signed int v93; // ebp\n  signed int v94; // ecx\n  signed int v95; // eax\n  signed int v96; // er9\n  __int64 v97; // r9\n  signed __int64 v98; // r11\n  signed __int64 v99; // rcx\n  signed __int64 v100; // rdx\n  signed int v101; // ebp\n  __int64 v102; // rbp\n  __int64 v103; // rax\n  signed __int64 v104; // rbp\n  signed __int64 v105; // rdi\n  signed __int64 v106; // rbp\n  __int64 v107; // rax\n  __int128 v108; // xmm0\n  __int128 v109; // xmm1\n  __int128 v110; // xmm3\n  __int64 v111; // r9\n  signed __int64 v112; // r11\n  signed __int64 v113; // rbp\n  signed __int64 v114; // rax\n  __int64 v115; // rsi\n  __int128 v116; // xmm0\n  __int128 v117; // xmm1\n  __int128 v118; // xmm3\n  int v119; // edi\n  __int64 v120; // rax\n  int v121; // esi\n  int v122; // eax\n  signed __int64 v123; // rcx\n  signed int v124; // edx\n  signed int v125; // esi\n  signed __int64 v126; // rcx\n  signed __int64 v127; // rdx\n  int v128; // esi\n  __int64 v129; // rsi\n  __int64 v131; // [rsp+0h] [rbp-BF8h]\n  signed __int64 v132; // [rsp+8h] [rbp-BF0h]\n  int v133; // [rsp+8h] [rbp-BF0h]\n  signed __int64 v134; // [rsp+8h] [rbp-BF0h]\n  __int64 v135; // [rsp+8h] [rbp-BF0h]\n  signed __int64 v136; // [rsp+8h] [rbp-BF0h]\n  signed int v137; // [rsp+14h] [rbp-BE4h]\n  __int64 v138; // [rsp+18h] [rbp-BE0h]\n  int v139; // [rsp+20h] [rbp-BD8h]\n  signed __int64 v140; // [rsp+20h] [rbp-BD8h]\n  signed __int64 v141; // [rsp+28h] [rbp-BD0h]\n  __int64 v142; // [rsp+30h] [rbp-BC8h]\n  signed __int64 v143; // [rsp+38h] [rbp-BC0h]\n  signed __int64 v144; // [rsp+38h] [rbp-BC0h]\n  char v145; // [rsp+40h] [rbp-BB8h]\n  int v146; // [rsp+40h] [rbp-BB8h]\n  unsigned int v147; // [rsp+48h] [rbp-BB0h]\n  unsigned int v148; // [rsp+54h] [rbp-BA4h]\n  signed __int64 v149; // [rsp+58h] [rbp-BA0h]\n  signed __int64 v150; // [rsp+60h] [rbp-B98h]\n  __int16 v151; // [rsp+70h] [rbp-B88h]\n  __int64 v152; // [rsp+88h] [rbp-B70h]\n  int s[256]; // [rsp+90h] [rbp-B68h]\n  int v154; // [rsp+490h] [rbp-768h]\n  int v155; // [rsp+494h] [rbp-764h]\n  int v156; // [rsp+498h] [rbp-760h]\n  int v157; // [rsp+49Ch] [rbp-75Ch]\n  int v158[99]; // [rsp+4A0h] [rbp-758h]\n  int v159; // [rsp+62Ch] [rbp-5CCh]\n  int v160[100]; // [rsp+630h] [rbp-5C8h]\n  char dest; // [rsp+7C0h] [rbp-438h]\n  int v162[269]; // [rsp+7C4h] [rbp-434h]\n\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v137 = a5;\n  LODWORD(v131) = a4;\n  if ( a5 >= 4 )\n  {\n    fwrite(\"        bucket sorting ...\\n\", 0x1BuLL, 1uLL, stderr);\n    a4 = v131;\n  }\n  v141 = a4;\n  v8 = 0;\n  memset(s, 0, 0x404uLL);\n  if ( (signed int)v131 > 0 )\n  {\n    v9 = v141 & 3;\n    if ( (unsigned __int64)(v141 - 1) >= 3 )\n    {\n      v10 = 0LL;\n      do\n      {\n        ++s[*(unsigned __int8 *)(a2 + v10)];\n        ++s[*(unsigned __int8 *)(a2 + v10 + 1)];\n        ++s[*(unsigned __int8 *)(a2 + v10 + 2)];\n        ++s[*(unsigned __int8 *)(a2 + v10 + 3)];\n        v10 += 4LL;\n      }\n      while ( v141 - v9 != v10 );\n      if ( !(v141 & 3) )\n        goto LABEL_12;\n    }\n    else\n    {\n      v10 = 0LL;\n      if ( !(v141 & 3) )\n      {\nLABEL_12:\n        v8 = s[0];\n        goto LABEL_13;\n      }\n    }\n    v11 = (unsigned __int8 *)(a2 + v10);\n    v12 = -v9;\n    do\n    {\n      ++s[*v11++];\n      ++v12;\n    }\n    while ( v12 );\n    goto LABEL_12;\n  }\nLABEL_13:\n  memcpy(&dest, s, 0x400uLL);\n  v13 = -1024LL;\n  do\n  {\n    v14 = *(int *)((char *)&v155 + v13) + v8;\n    *(int *)((char *)&v155 + v13) = v14;\n    v15 = *(int *)((char *)&v156 + v13) + v14;\n    *(int *)((char *)&v156 + v13) = v15;\n    v16 = *(int *)((char *)&v157 + v13) + v15;\n    *(int *)((char *)&v157 + v13) = v16;\n    v8 = v158[v13 / 4] + v16;\n    v158[v13 / 4] = v8;\n    v13 += 16LL;\n  }\n  while ( v13 );\n  v17 = (unsigned int)v131;\n  v18 = v141;\n  v19 = v137;\n  if ( (signed int)v131 <= 0 )\n    goto LABEL_23;\n  if ( (_DWORD)v131 == 1 )\n  {\n    v20 = 0LL;\n    if ( !(v141 & 1) )\n      goto LABEL_23;\n  }\n  else\n  {\n    v20 = 0LL;\n    do\n    {\n      v21 = *(unsigned __int8 *)(v6 + v20);\n      v22 = s[v21];\n      s[v21] = v22 - 1;\n      *(_DWORD *)(v7 + 4 * v22 - 4) = v20;\n      v23 = *(unsigned __int8 *)(v6 + v20 + 1);\n      v24 = s[v23];\n      s[v23] = v24 - 1;\n      *(_DWORD *)(v7 + 4 * v24 - 4) = v20 + 1;\n      v20 += 2LL;\n    }\n    while ( v141 - (v141 & 1) != v20 );\n    if ( !(v141 & 1) )\n      goto LABEL_23;\n  }\n  v25 = *(unsigned __int8 *)(v6 + v20);\n  v26 = s[v25];\n  s[v25] = v26 - 1;\n  *(_DWORD *)(v7 + 4 * v26 - 4) = v20;\nLABEL_23:\n  if ( (signed int)v131 >= -63 )\n  {\n    v27 = (unsigned int)((signed int)v131 / 32 + 1);\n    if ( (signed int)v131 / 32 + 1 < 0 )\n      v27 = 0LL;\n    memset(v5, 0, 4 * v27 + 4);\n    v19 = v137;\n    v17 = (unsigned int)v131;\n    v18 = v141;\n  }\n  v28 = -256LL;\n  do\n  {\n    *(_DWORD *)&v5[4 * (*(&v154 + v28) >> 5)] |= 1 << *(&v154 + v28);\n    *(_DWORD *)&v5[4 * (*(&v155 + v28) >> 5)] |= 1 << *(&v155 + v28);\n    v28 += 2LL;\n  }\n  while ( v28 );\n  v29 = 32;\n  v30 = v17;\n  do\n  {\n    *(_DWORD *)&v5[4 * (v30 >> 5)] |= 1 << v30;\n    *(_DWORD *)&v5[4 * ((v30 + 1) >> 5)] &= __ROL4__(-2, v30 + 1);\n    v30 += 2;\n    --v29;\n  }\n  while ( v29 );\n  v149 = v7 + 16;\n  v31 = 1;\n  v150 = v7 + 4;\n  do\n  {\n    if ( v19 >= 4 )\n    {\n      fprintf(stderr, \"        depth %6d has \", v31, v131);\n      v19 = v137;\n      v17 = (unsigned int)v131;\n      v18 = v141;\n      if ( (signed int)v131 > 0 )\n        goto LABEL_36;\n    }\n    else if ( (signed int)v17 > 0 )\n    {\nLABEL_36:\n      v32 = 0LL;\n      v33 = 0;\n      do\n      {\n        v34 = *(_DWORD *)&v5[(v32 >> 3) & 0x1FFFFFFC];\n        if ( _bittest(&v34, v32) )\n          v33 = v32;\n        *(_DWORD *)(v6\n                  + 4LL\n                  * (signed int)(*(_DWORD *)(v7 + 4 * v32)\n                               - v31\n                               + (v18 & ((signed int)(*(_DWORD *)(v7 + 4 * v32) - v31) >> 31)))) = v33;\n        ++v32;\n      }\n      while ( v18 != v32 );\n      goto LABEL_40;\n    }\nLABEL_40:\n    v148 = v31;\n    v147 = 0;\n    LODWORD(v35) = -1;\n    while ( 1 )\n    {\n      v36 = v35 - 31;\n      v37 = v35;\n      do\n      {\n        v38 = v37;\n        LODWORD(v39) = v36;\n        ++v37;\n        v40 = *(_DWORD *)&v5[4 * (v37 >> 5)] & (1 << (v37 & 0x1F));\n        if ( !(v37 & 0x1F) )\n          break;\n        ++v36;\n      }\n      while ( v40 );\n      if ( v40 )\n      {\n        do\n        {\n          v37 = v38;\n          LODWORD(v39) = v39 + 32;\n          v38 += 32;\n        }\n        while ( *(_DWORD *)&v5[4 * ((signed int)v39 >> 5)] == -1 );\n        do\n          LODWORD(v39) = *(_DWORD *)&v5[4 * (++v37 >> 5)];\n        while ( _bittest((const signed int *)&v39, v37) );\n      }\n      if ( v37 > (signed int)v17 )\n        break;\n      v41 = v37 - 32;\n      v42 = v37 - 1;\n      v43 = v37;\n      do\n      {\n        LODWORD(v39) = v41;\n        v44 = v42;\n        v45 = v43 & 0x1F;\n        v46 = *(_DWORD *)&v5[4 * (v43++ >> 5)] & (1 << v45);\n        if ( !v45 )\n          break;\n        v41 = v39 + 1;\n        ++v42;\n      }\n      while ( !v46 );\n      if ( v46 )\n      {\n        v47 = v43 - 1;\n        if ( v47 > (signed int)v17 )\n          break;\n      }\n      else\n      {\n        do\n        {\n          v47 = v44;\n          LODWORD(v39) = v39 + 32;\n          v44 += 32;\n        }\n        while ( !*(_DWORD *)&v5[4 * ((signed int)v39 >> 5)] );\n        do\n          LODWORD(v39) = *(_DWORD *)&v5[4 * (++v47 >> 5)];\n        while ( !_bittest((const signed int *)&v39, v47) );\n        if ( v47 > (signed int)v17 )\n          break;\n      }\n      v35 = (unsigned int)(v47 - 1);\n      if ( v47 <= v37 )\n        continue;\n      v48 = (unsigned int)(v37 - 1);\n      LODWORD(v49) = 1;\n      v160[0] = v37 - 1;\n      v50 = v47 + v147 - v37 + 1;\n      v147 = v47 + v147 - v37 + 1;\n      v158[0] = v47 - 1;\n      v151 = 0;\n      do\n      {\n        v49 = (signed int)v49;\n        while ( 1 )\n        {\n          v51 = v49;\n          if ( v49 >= 100 )\n            sub_404F10(1004LL, v48, v35, v50, v18, v49);\n          --v49;\n          v52 = (unsigned int)*(&v159 + v51);\n          v18 = (signed int)v52;\n          v53 = *(&v157 + v51);\n          v35 = v53;\n          v54 = *(&v157 + v51) - v52;\n          if ( v54 > 9 )\n            break;\n          if ( v53 != (_DWORD)v52 )\n          {\n            v132 = v51 - 1;\n            v139 = *(&v159 + v51);\n            v143 = v51;\n            if ( v54 >= 4 )\n            {\n              v55 = v53 - 4LL;\n              if ( v53 - 4 >= v139 )\n              {\n                LODWORD(v48) = *(&v157 + v51);\n                do\n                {\n                  v56 = *(signed int *)(v7 + 4 * v55);\n                  if ( v55 + 4 <= v53 )\n                  {\n                    v57 = *(_DWORD *)(v6 + 4 * v56);\n                    v58 = (signed int)v48;\n                    LODWORD(v50) = v55;\n                    do\n                    {\n                      v59 = *(unsigned int *)(v7 + 4 * v58);\n                      if ( v57 <= *(_DWORD *)(v6 + 4 * v59) )\n                        break;\n                      v50 = (signed int)v50;\n                      *(_DWORD *)(v7 + 4 * v50) = v59;\n                      v58 += 4LL;\n                      LODWORD(v50) = v50 + 4;\n                    }\n                    while ( v58 <= v53 );\n                  }\n                  else\n                  {\n                    LODWORD(v50) = v55;\n                  }\n                  v50 = (signed int)v50;\n                  *(_DWORD *)(v7 + 4LL * (signed int)v50) = v56;\n                  v48 = (unsigned int)(v48 - 1);\n                  v62 = __OFSUB__(v55, v18);\n                  v60 = v55 == v18;\n                  v61 = v55-- - v18 < 0;\n                }\n                while ( !((unsigned __int8)(v61 ^ v62) | v60) );\n              }\n            }\n            v51 = v143;\n            v49 = v132;\n            if ( v53 > v139 )\n            {\n              v48 = v53;\n              do\n              {\n                v50 = v48 - 1;\n                v63 = *(signed int *)(v7 + 4 * v48 - 4);\n                v64 = v48 - 1;\n                if ( (signed int)v48 <= v53 )\n                {\n                  v65 = *(_DWORD *)(v6 + 4 * v63);\n                  while ( 1 )\n                  {\n                    v66 = *(unsigned int *)(v7 + 4 * v48);\n                    if ( v65 <= *(_DWORD *)(v6 + 4 * v66) )\n                      break;\n                    *(_DWORD *)(v7 + 4 * v48 - 4) = v66;\n                    v67 = v48 + 1;\n                    v62 = __OFSUB__(v48, v53);\n                    v61 = v48++ - v53 < 0;\n                    if ( !(v61 ^ v62) )\n                      goto LABEL_81;\n                  }\n                  v67 = v48;\nLABEL_81:\n                  v64 = v67 - 1;\n                }\n                *(_DWORD *)(v7 + 4LL * v64) = v63;\n                v48 = v50;\n              }\n              while ( v50 > v18 );\n            }\n          }\n          if ( v51 <= 1 )\n            goto LABEL_158;\n        }\n        v68 = 3 * (((7621 * v151 + 1) & 0x7FFFu) / 3);\n        v151 = (7621 * v151 + 1) & 0x7FFF;\n        v69 = v151 - v68;\n        v70 = *(&v159 + v51);\n        if ( v69 & 3 )\n        {\n          if ( v69 == 1 )\n            v70 = (v53 + (signed int)v52) >> 1;\n          else\n            v70 = *(&v157 + v51);\n        }\n        v133 = v51 - 1;\n        v144 = v51;\n        v71 = *(_DWORD *)(v6 + 4LL * *(unsigned int *)(v7 + 4LL * v70));\n        LODWORD(v142) = *(&v157 + v51);\n        LODWORD(v138) = *(&v159 + v51);\n        v72 = *(&v157 + v51);\n        v140 = v52;\n        if ( (signed int)v52 <= v53 )\n        {\nLABEL_90:\n          v138 = (signed int)v138;\n          do\n          {\n            v73 = (signed int)v52;\n            while ( 1 )\n            {\n              v74 = *(unsigned int *)(v7 + 4 * v73);\n              if ( *(_DWORD *)(v6 + 4 * v74) == v71 )\n                break;\n              if ( *(_DWORD *)(v6 + 4 * v74) - v71 <= 0 )\n              {\n                v62 = __OFSUB__(v73, v72);\n                v61 = v73++ - v72 < 0;\n                if ( v61 ^ v62 )\n                  continue;\n              }\n              goto LABEL_98;\n            }\n            *(_DWORD *)(v7 + 4 * v73) = *(_DWORD *)(v7 + 4 * v138);\n            *(_DWORD *)(v7 + 4 * v138++) = v74;\n            LODWORD(v52) = v73 + 1;\n          }\n          while ( v72 > (signed int)v73 );\n          LODWORD(v73) = v73 + 1;\nLABEL_98:\n          LODWORD(v52) = v73;\n        }\nLABEL_100:\n        HIDWORD(v131) = v52;\n        if ( (signed int)v52 > v72 )\n        {\n          v50 = (unsigned int)v72;\n        }\n        else\n        {\n          v76 = (signed int)v52;\n          v142 = (signed int)v142;\n          while ( 2 )\n          {\n            v77 = v72 + 1LL;\n            LODWORD(v50) = v72;\n            while ( 1 )\n            {\n              v78 = *(unsigned int *)(v7 + 4 * v77 - 4);\n              if ( *(_DWORD *)(v6 + 4 * v78) == v71 )\n                break;\n              if ( *(_DWORD *)(v6 + 4 * v78) - v71 < 0 )\n              {\n                v75 = *(_DWORD *)(v7 + 4LL * (signed int)v52);\n                *(_DWORD *)(v7 + 4 * v76) = v78;\n                *(_DWORD *)(v7 + 4 * v77 - 4) = v75;\n                LODWORD(v52) = HIDWORD(v131) + 1;\n                v72 = v50 - 1;\n                if ( HIDWORD(v131) + 1 <= (signed int)v50 - 1 )\n                  goto LABEL_90;\n                goto LABEL_100;\n              }\n              --v77;\n              v50 = (unsigned int)(v50 - 1);\n              if ( v77 <= (signed int)v52 )\n                goto LABEL_110;\n            }\n            *(_DWORD *)(v7 + 4 * v77 - 4) = *(_DWORD *)(v7 + 4 * v142);\n            *(_DWORD *)(v7 + 4 * v142--) = v78;\n            v72 = v50 - 1;\n            if ( (signed int)v52 < (signed int)v50 )\n              continue;\n            break;\n          }\n          v50 = (unsigned int)(v50 - 1);\n        }\nLABEL_110:\n        v48 = v140;\n        LODWORD(v49) = v133;\n        if ( (signed int)v142 >= (signed int)v138 )\n        {\n          v79 = v52 - v138;\n          if ( (signed int)v138 - (signed int)v140 <= (signed int)v52 - (signed int)v138 )\n            v79 = v138 - v140;\n          if ( v79 > 0 )\n          {\n            LODWORD(v80) = v52 - v79;\n            v81 = v138 - 1 - v52;\n            v82 = v140 - 1 - v138;\n            v83 = v140 - 1 - v138;\n            if ( v81 >= v82 )\n              v83 = v138 - 1 - HIDWORD(v131);\n            v84 = -2;\n            if ( v83 > -3 )\n              v84 = v83;\n            v80 = (signed int)v80;\n            v85 = (unsigned int)(v84 - v83);\n            v134 = v85 + 1;\n            if ( (unsigned __int64)(v85 + 1) < 8 )\n              goto LABEL_182;\n            v145 = v85;\n            if ( v81 >= v82 )\n              v82 = v138 - 1 - HIDWORD(v131);\n            v86 = -2;\n            if ( v82 > -3 )\n              v86 = v82;\n            v152 = v80;\n            v87 = (unsigned int)(v86 - v82);\n            if ( v7 + 4 * v18 < (unsigned __int64)(v150 + 4 * (v87 + SHIDWORD(v131) - v79))\n              && v7 + 4 * v80 < (unsigned __int64)(v150 + 4 * (v18 + v87)) )\n            {\nLABEL_182:\n              v88 = v18;\n              goto LABEL_126;\n            }\n            v103 = (v145 + 1) & 7;\n            v146 = (v145 + 1) & 7;\n            v104 = v134 - v103;\n            v136 = v104;\n            v88 = v18 + v104;\n            v80 += v104;\n            v79 -= v104;\n            v105 = v149 + 4 * v152;\n            v106 = v149 + 4 * v18;\n            v107 = 0LL;\n            do\n            {\n              v108 = *(_OWORD *)(v106 + 4 * v107 - 16);\n              v109 = *(_OWORD *)(v106 + 4 * v107);\n              v110 = *(_OWORD *)(v105 + 4 * v107);\n              *(_OWORD *)(v106 + 4 * v107 - 16) = *(_OWORD *)(v105 + 4 * v107 - 16);\n              *(_OWORD *)(v106 + 4 * v107) = v110;\n              *(_OWORD *)(v105 + 4 * v107 - 16) = v108;\n              *(_OWORD *)(v105 + 4 * v107) = v109;\n              v107 += 8LL;\n            }\n            while ( v136 != v107 );\n            if ( v146 )\n            {\nLABEL_126:\n              v89 = v79 + 1;\n              v90 = v7;\n              do\n              {\n                v91 = *(_DWORD *)(v90 + 4 * v88);\n                *(_DWORD *)(v90 + 4 * v88) = *(_DWORD *)(v90 + 4 * v80);\n                *(_DWORD *)(v90 + 4 * v80) = v91;\n                v90 += 4LL;\n                --v89;\n              }\n              while ( v89 > 1 );\n            }\n          }\n          v92 = v53 - v142;\n          v18 = (unsigned int)(v142 - v50);\n          if ( v53 - (signed int)v142 > (signed int)v18 )\n            v92 = v142 - v50;\n          if ( v92 > 0 )\n          {\n            v135 = v53 - v92;\n            v93 = v142 - 1 - v53;\n            v94 = v50 - 1 - v142;\n            v95 = v94;\n            if ( v93 >= v94 )\n              v95 = v142 - 1 - v53;\n            v96 = -2;\n            if ( v95 > -3 )\n              v96 = v95;\n            v97 = (unsigned int)(v96 - v95);\n            v98 = v97 + 1;\n            if ( (unsigned __int64)(v97 + 1) < 8 )\n            {\n              v99 = SHIDWORD(v131);\n              v100 = v53 - v92;\n              goto LABEL_151;\n            }\n            if ( v93 >= v94 )\n              v94 = v142 - 1 - v53;\n            v101 = -2;\n            if ( v94 > -3 )\n              v101 = v94;\n            v102 = (unsigned int)(v101 - v94);\n            v100 = v53 - v92;\n            if ( v7 + 4LL * SHIDWORD(v131) < (unsigned __int64)(v7 + 8 + 4 * (v102 + v53 - v92))\n              && v150 + 4 * v135 < (unsigned __int64)(v150 + 4 * (SHIDWORD(v131) + v102)) )\n            {\n              v99 = SHIDWORD(v131);\n              goto LABEL_151;\n            }\n            v111 = ((_BYTE)v97 + 1) & 7;\n            v112 = v98 - v111;\n            v99 = v112 + SHIDWORD(v131);\n            v100 = v112 + v135;\n            v92 -= v112;\n            v113 = v7 + 20 + 4 * v135;\n            v114 = v149 + 4LL * SHIDWORD(v131);\n            v115 = 0LL;\n            do\n            {\n              v116 = *(_OWORD *)(v114 + 4 * v115 - 16);\n              v117 = *(_OWORD *)(v114 + 4 * v115);\n              v118 = *(_OWORD *)(v113 + 4 * v115);\n              *(_OWORD *)(v114 + 4 * v115 - 16) = *(_OWORD *)(v113 + 4 * v115 - 16);\n              *(_OWORD *)(v114 + 4 * v115) = v118;\n              *(_OWORD *)(v113 + 4 * v115 - 16) = v116;\n              *(_OWORD *)(v113 + 4 * v115) = v117;\n              v115 += 8LL;\n            }\n            while ( v112 != v115 );\n            if ( (_DWORD)v111 )\n            {\nLABEL_151:\n              v119 = v92 + 1;\n              v120 = v7;\n              do\n              {\n                v121 = *(_DWORD *)(v120 + 4 * v99);\n                *(_DWORD *)(v120 + 4 * v99) = *(_DWORD *)(v120 + 4 * v100 + 4);\n                *(_DWORD *)(v120 + 4 * v100 + 4) = v121;\n                v120 += 4LL;\n                --v119;\n              }\n              while ( v119 > 1 );\n            }\n          }\n          v122 = v53 - v18 + 1;\n          v48 = (unsigned int)(v18 - 1);\n          if ( HIDWORD(v131) + -1 - (signed int)v138 <= (signed int)v48 )\n          {\n            v35 = v144;\n            *(&v159 + v144) = v122;\n            v122 = v140;\n            v53 = HIDWORD(v131) + v140 - 1 - v138;\n          }\n          else\n          {\n            v35 = v144;\n            *(&v157 + v144) = HIDWORD(v131) + v140 - 1 - v138;\n          }\n          v50 = (signed int)v35;\n          v160[v50] = v122;\n          v158[v50] = v53;\n          LODWORD(v49) = v35 + 1;\n        }\n      }\n      while ( (signed int)v49 > 0 );\nLABEL_158:\n      v18 = v141;\n      v17 = (unsigned int)v131;\n      v19 = v137;\n      LODWORD(v35) = v47 - 1;\n      if ( v37 <= v47 )\n      {\n        v123 = v37 - 1;\n        v124 = -1;\n        do\n        {\n          v125 = *(_DWORD *)(v6 + 4LL * *(unsigned int *)(v7 + 4 * v123));\n          if ( v124 != v125 )\n          {\n            *(_DWORD *)&v5[4 * ((signed int)v123 >> 5)] |= 1 << v123;\n            v124 = v125;\n          }\n          ++v123;\n        }\n        while ( v123 < v47 );\n        LODWORD(v35) = v47 - 1;\n      }\n    }\n    if ( v19 >= 4 )\n    {\n      LODWORD(v39) = fprintf(stderr, \"%6d unresolved strings\\n\", v147, v131);\n      v19 = v137;\n      v17 = (unsigned int)v131;\n      v18 = v141;\n    }\n    v31 = 2 * v148;\n  }\n  while ( (signed int)(2 * v148) <= (signed int)v17 && v147 );\n  if ( v19 >= 4 )\n  {\n    LODWORD(v39) = fwrite(\"        reconstructing block ...\\n\", 0x21uLL, 1uLL, stderr);\n    v17 = (unsigned int)v131;\n    v18 = v141;\n    if ( (signed int)v131 > 0 )\n      goto LABEL_170;\n  }\n  else if ( (signed int)v17 > 0 )\n  {\nLABEL_170:\n    v39 = 0LL;\n    LODWORD(v126) = 0;\n    do\n    {\n      v126 = (signed int)v126 - 1LL;\n      do\n      {\n        v127 = v126;\n        v128 = v162[v126++];\n      }\n      while ( !v128 );\n      v162[v127] = v128 - 1;\n      v129 = *(unsigned int *)(v7 + 4 * v39);\n      *(_BYTE *)(v6 + v129) = v126;\n      ++v39;\n    }\n    while ( v39 != v18 );\n    if ( (signed int)v126 >= 256 )\n      sub_404F10(1005LL, v129, (unsigned int)(v126 + 256), v126, v18, v17);\n  }\n  return v39;\n}\n", 
            "funcStartAddr": "0x4032a0L", 
            "funcEndAddr": "0x403f58L", 
            "funcName": "sub_4032A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_403F60(unsigned int a1, unsigned int a2, __int64 a3, __int64 a4, unsigned int a5, _DWORD *a6)\n{\n  unsigned __int8 v6; // al\n  bool v7; // cf\n  bool v8; // zf\n  __int64 v9; // r10\n  unsigned __int8 v10; // al\n  __int64 v11; // r10\n  unsigned __int8 v12; // al\n  __int64 v13; // r10\n  unsigned __int8 v14; // al\n  __int64 v15; // r10\n  unsigned __int8 v16; // al\n  __int64 v17; // r10\n  unsigned __int8 v18; // al\n  __int64 v19; // r10\n  unsigned __int8 v20; // al\n  __int64 v21; // r10\n  unsigned __int8 v22; // al\n  __int64 v23; // r10\n  unsigned __int8 v24; // al\n  __int64 v25; // r10\n  unsigned __int8 v26; // al\n  __int64 v27; // r10\n  unsigned __int8 v28; // al\n  __int64 v29; // r10\n  unsigned __int8 v30; // al\n  __int64 v31; // rdi\n  __int64 v32; // rsi\n  int v33; // er10\n  unsigned __int8 v34; // al\n  unsigned __int16 v35; // ax\n  __int64 v36; // r11\n  __int64 v37; // rax\n  unsigned __int8 v38; // bl\n  unsigned __int16 v39; // ax\n  __int64 v40; // r11\n  __int64 v41; // rax\n  unsigned __int8 v42; // bl\n  unsigned __int16 v43; // ax\n  __int64 v44; // r11\n  __int64 v45; // rax\n  unsigned __int8 v46; // bl\n  unsigned __int16 v47; // ax\n  __int64 v48; // r11\n  __int64 v49; // rax\n  unsigned __int8 v50; // bl\n  unsigned __int16 v51; // ax\n  __int64 v52; // r11\n  __int64 v53; // rax\n  unsigned __int8 v54; // bl\n  unsigned __int16 v55; // ax\n  __int64 v56; // r11\n  __int64 v57; // rax\n  unsigned __int8 v58; // bl\n  unsigned __int16 v59; // ax\n  __int64 v60; // r11\n  __int64 v61; // rax\n  unsigned __int8 v62; // bl\n  unsigned __int16 v63; // ax\n  unsigned int v64; // edi\n  unsigned int v65; // esi\n  bool result; // al\n  unsigned int v67; // ebx\n  unsigned int v68; // ebx\n\n  v6 = *(_BYTE *)(a3 + a2);\n  v7 = *(_BYTE *)(a3 + a1) < v6;\n  v8 = *(_BYTE *)(a3 + a1) == v6;\n  if ( *(_BYTE *)(a3 + a1) == v6 )\n  {\n    v9 = a1 + 1;\n    v10 = *(_BYTE *)(a3 + a2 + 1);\n    v7 = *(_BYTE *)(a3 + v9) < v10;\n    v8 = *(_BYTE *)(a3 + v9) == v10;\n    if ( *(_BYTE *)(a3 + v9) == v10 )\n    {\n      v11 = a1 + 2;\n      v12 = *(_BYTE *)(a3 + a2 + 2);\n      v7 = *(_BYTE *)(a3 + v11) < v12;\n      v8 = *(_BYTE *)(a3 + v11) == v12;\n      if ( *(_BYTE *)(a3 + v11) == v12 )\n      {\n        v13 = a1 + 3;\n        v14 = *(_BYTE *)(a3 + a2 + 3);\n        v7 = *(_BYTE *)(a3 + v13) < v14;\n        v8 = *(_BYTE *)(a3 + v13) == v14;\n        if ( *(_BYTE *)(a3 + v13) == v14 )\n        {\n          v15 = a1 + 4;\n          v16 = *(_BYTE *)(a3 + a2 + 4);\n          v7 = *(_BYTE *)(a3 + v15) < v16;\n          v8 = *(_BYTE *)(a3 + v15) == v16;\n          if ( *(_BYTE *)(a3 + v15) == v16 )\n          {\n            v17 = a1 + 5;\n            v18 = *(_BYTE *)(a3 + a2 + 5);\n            v7 = *(_BYTE *)(a3 + v17) < v18;\n            v8 = *(_BYTE *)(a3 + v17) == v18;\n            if ( *(_BYTE *)(a3 + v17) == v18 )\n            {\n              v19 = a1 + 6;\n              v20 = *(_BYTE *)(a3 + a2 + 6);\n              v7 = *(_BYTE *)(a3 + v19) < v20;\n              v8 = *(_BYTE *)(a3 + v19) == v20;\n              if ( *(_BYTE *)(a3 + v19) == v20 )\n              {\n                v21 = a1 + 7;\n                v22 = *(_BYTE *)(a3 + a2 + 7);\n                v7 = *(_BYTE *)(a3 + v21) < v22;\n                v8 = *(_BYTE *)(a3 + v21) == v22;\n                if ( *(_BYTE *)(a3 + v21) == v22 )\n                {\n                  v23 = a1 + 8;\n                  v24 = *(_BYTE *)(a3 + a2 + 8);\n                  v7 = *(_BYTE *)(a3 + v23) < v24;\n                  v8 = *(_BYTE *)(a3 + v23) == v24;\n                  if ( *(_BYTE *)(a3 + v23) == v24 )\n                  {\n                    v25 = a1 + 9;\n                    v26 = *(_BYTE *)(a3 + a2 + 9);\n                    v7 = *(_BYTE *)(a3 + v25) < v26;\n                    v8 = *(_BYTE *)(a3 + v25) == v26;\n                    if ( *(_BYTE *)(a3 + v25) == v26 )\n                    {\n                      v27 = a1 + 10;\n                      v28 = *(_BYTE *)(a3 + a2 + 10);\n                      v7 = *(_BYTE *)(a3 + v27) < v28;\n                      v8 = *(_BYTE *)(a3 + v27) == v28;\n                      if ( *(_BYTE *)(a3 + v27) == v28 )\n                      {\n                        v29 = a1 + 11;\n                        v30 = *(_BYTE *)(a3 + a2 + 11);\n                        v7 = *(_BYTE *)(a3 + v29) < v30;\n                        v8 = *(_BYTE *)(a3 + v29) == v30;\n                        if ( *(_BYTE *)(a3 + v29) == v30 )\n                        {\n                          LODWORD(v31) = a1 + 12;\n                          LODWORD(v32) = a2 + 12;\n                          v33 = a5 + 16;\n                          while ( 1 )\n                          {\n                            v31 = (unsigned int)v31;\n                            v32 = (unsigned int)v32;\n                            v34 = *(_BYTE *)(a3 + (unsigned int)v32);\n                            v7 = *(_BYTE *)(a3 + (unsigned int)v31) < v34;\n                            v8 = *(_BYTE *)(a3 + (unsigned int)v31) == v34;\n                            if ( *(_BYTE *)(a3 + (unsigned int)v31) != v34 )\n                              break;\n                            v35 = *(_WORD *)(a4 + 2 * v32);\n                            v7 = *(_WORD *)(a4 + 2 * v31) < v35;\n                            v8 = *(_WORD *)(a4 + 2 * v31) == v35;\n                            if ( *(_WORD *)(a4 + 2 * v31) != v35 )\n                              break;\n                            v36 = (unsigned int)(v31 + 1);\n                            v37 = (unsigned int)(v32 + 1);\n                            v38 = *(_BYTE *)(a3 + v37);\n                            v7 = *(_BYTE *)(a3 + v36) < v38;\n                            v8 = *(_BYTE *)(a3 + v36) == v38;\n                            if ( *(_BYTE *)(a3 + v36) != v38 )\n                              break;\n                            v39 = *(_WORD *)(a4 + 2 * v37);\n                            v7 = *(_WORD *)(a4 + 2 * v36) < v39;\n                            v8 = *(_WORD *)(a4 + 2 * v36) == v39;\n                            if ( *(_WORD *)(a4 + 2 * v36) != v39 )\n                              break;\n                            v40 = (unsigned int)(v31 + 2);\n                            v41 = (unsigned int)(v32 + 2);\n                            v42 = *(_BYTE *)(a3 + v41);\n                            v7 = *(_BYTE *)(a3 + v40) < v42;\n                            v8 = *(_BYTE *)(a3 + v40) == v42;\n                            if ( *(_BYTE *)(a3 + v40) != v42 )\n                              break;\n                            v43 = *(_WORD *)(a4 + 2 * v41);\n                            v7 = *(_WORD *)(a4 + 2 * v40) < v43;\n                            v8 = *(_WORD *)(a4 + 2 * v40) == v43;\n                            if ( *(_WORD *)(a4 + 2 * v40) != v43 )\n                              break;\n                            v44 = (unsigned int)(v31 + 3);\n                            v45 = (unsigned int)(v32 + 3);\n                            v46 = *(_BYTE *)(a3 + v45);\n                            v7 = *(_BYTE *)(a3 + v44) < v46;\n                            v8 = *(_BYTE *)(a3 + v44) == v46;\n                            if ( *(_BYTE *)(a3 + v44) != v46 )\n                              break;\n                            v47 = *(_WORD *)(a4 + 2 * v45);\n                            v7 = *(_WORD *)(a4 + 2 * v44) < v47;\n                            v8 = *(_WORD *)(a4 + 2 * v44) == v47;\n                            if ( *(_WORD *)(a4 + 2 * v44) != v47 )\n                              break;\n                            v48 = (unsigned int)(v31 + 4);\n                            v49 = (unsigned int)(v32 + 4);\n                            v50 = *(_BYTE *)(a3 + v49);\n                            v7 = *(_BYTE *)(a3 + v48) < v50;\n                            v8 = *(_BYTE *)(a3 + v48) == v50;\n                            if ( *(_BYTE *)(a3 + v48) != v50 )\n                              break;\n                            v51 = *(_WORD *)(a4 + 2 * v49);\n                            v7 = *(_WORD *)(a4 + 2 * v48) < v51;\n                            v8 = *(_WORD *)(a4 + 2 * v48) == v51;\n                            if ( *(_WORD *)(a4 + 2 * v48) != v51 )\n                              break;\n                            v52 = (unsigned int)(v31 + 5);\n                            v53 = (unsigned int)(v32 + 5);\n                            v54 = *(_BYTE *)(a3 + v53);\n                            v7 = *(_BYTE *)(a3 + v52) < v54;\n                            v8 = *(_BYTE *)(a3 + v52) == v54;\n                            if ( *(_BYTE *)(a3 + v52) != v54 )\n                              break;\n                            v55 = *(_WORD *)(a4 + 2 * v53);\n                            v7 = *(_WORD *)(a4 + 2 * v52) < v55;\n                            v8 = *(_WORD *)(a4 + 2 * v52) == v55;\n                            if ( *(_WORD *)(a4 + 2 * v52) != v55 )\n                              break;\n                            v56 = (unsigned int)(v31 + 6);\n                            v57 = (unsigned int)(v32 + 6);\n                            v58 = *(_BYTE *)(a3 + v57);\n                            v7 = *(_BYTE *)(a3 + v56) < v58;\n                            v8 = *(_BYTE *)(a3 + v56) == v58;\n                            if ( *(_BYTE *)(a3 + v56) != v58 )\n                              break;\n                            v59 = *(_WORD *)(a4 + 2 * v57);\n                            v7 = *(_WORD *)(a4 + 2 * v56) < v59;\n                            v8 = *(_WORD *)(a4 + 2 * v56) == v59;\n                            if ( *(_WORD *)(a4 + 2 * v56) != v59 )\n                              break;\n                            v60 = (unsigned int)(v31 + 7);\n                            v61 = (unsigned int)(v32 + 7);\n                            v62 = *(_BYTE *)(a3 + v61);\n                            v7 = *(_BYTE *)(a3 + v60) < v62;\n                            v8 = *(_BYTE *)(a3 + v60) == v62;\n                            if ( *(_BYTE *)(a3 + v60) != v62 )\n                              break;\n                            v63 = *(_WORD *)(a4 + 2 * v61);\n                            v7 = *(_WORD *)(a4 + 2 * v60) < v63;\n                            v8 = *(_WORD *)(a4 + 2 * v60) == v63;\n                            if ( *(_WORD *)(a4 + 2 * v60) != v63 )\n                              break;\n                            v64 = v31 + 8;\n                            v65 = v32 + 8;\n                            result = 0;\n                            v67 = a5;\n                            if ( v64 < a5 )\n                              v67 = 0;\n                            LODWORD(v31) = v64 - v67;\n                            v68 = a5;\n                            if ( v65 < a5 )\n                              v68 = 0;\n                            --*a6;\n                            LODWORD(v32) = v65 - v68;\n                            v33 -= 8;\n                            if ( v33 <= 7 )\n                              return result;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return !v7 && !v8;\n}\n", 
            "funcStartAddr": "0x403f60L", 
            "funcEndAddr": "0x404193L", 
            "funcName": "sub_403F60"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4041A0(unsigned int a1, __int64 a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // rax\n  unsigned int v4; // eax\n  int result; // eax\n  int v6; // [rsp+Ch] [rbp-142Ch]\n  unsigned int v7; // [rsp+10h] [rbp-1428h]\n  unsigned int v8; // [rsp+14h] [rbp-1424h]\n  int v9; // [rsp+18h] [rbp-1420h]\n  int v10; // [rsp+1Ch] [rbp-141Ch]\n  unsigned int v11; // [rsp+20h] [rbp-1418h]\n  unsigned int v12; // [rsp+24h] [rbp-1414h]\n  __int64 v13; // [rsp+28h] [rbp-1410h]\n  double v14; // [rsp+30h] [rbp-1408h]\n  double v15; // [rsp+38h] [rbp-1400h]\n  char v16; // [rsp+40h] [rbp-13F8h]\n  char v17; // [rsp+60h] [rbp-13D8h]\n  char dest; // [rsp+80h] [rbp-13B8h]\n\n  v2 = sub_4067F0(&v6, a2, (unsigned int)dword_416D68, (unsigned int)dword_416D88, (unsigned int)dword_416D8C);\n  if ( v6 )\n    goto LABEL_17;\n  if ( dword_416D88 >= 2 )\n    fputc(10, stderr);\n  v3 = sub_4013B0(a1);\n  if ( (_DWORD)v3 != -1 )\n  {\n    while ( 1 )\n    {\n      sub_401460(v3, v3, a1);\n      v4 = sub_4012B0(&dest, 1u, 0x1388u, a1);\n      if ( (signed int)v4 > 0 )\n        sub_406920(&v6, v2, &dest, v4);\n      if ( v6 )\n        break;\n      v3 = sub_4013B0(a1);\n      if ( (_DWORD)v3 == -1 )\n        goto LABEL_9;\n    }\nLABEL_17:\n    sub_406B00(&v16, v2, 1LL, (char *)&v13 + 4, &v13, &v12, &v11);\n    if ( v6 != -3 )\n    {\n      if ( v6 != -6 )\n      {\n        if ( v6 == -9 )\n          sub_404920();\n        sub_4049C0(\"compress:unexpected error\");\n      }\n      sub_404980();\n    }\n    sub_404950();\n  }\nLABEL_9:\n  result = sub_406B00(&v6, v2, 0LL, (char *)&v13 + 4, &v13, &v12, &v11);\n  if ( v6 )\n    goto LABEL_17;\n  if ( (_DWORD)a2 != 1 )\n    dword_416D80 = 0;\n  dword_416D80 = 0;\n  if ( dword_416D88 > 0 )\n  {\n    if ( v13 )\n    {\n      v9 = HIDWORD(v13);\n      v10 = v13;\n      v8 = v11;\n      v7 = v12;\n      v15 = (double)((unsigned int)v13 >> 24) * 7.205759403792794e16\n          + (double)BYTE2(v13) * 2.81474976710656e14\n          + (double)BYTE1(v13) * 1.099511627776e12\n          + (double)(unsigned __int8)v13 * 4294967296.0\n          + (double)(signed int)(HIDWORD(v13) >> 24) * 16777216.0\n          + (double)BYTE6(v13) * 65536.0\n          + (double)BYTE5(v13) * 256.0\n          + (double)BYTE4(v13);\n      v14 = (double)(v11 >> 24) * 7.205759403792794e16\n          + (double)BYTE2(v11) * 2.81474976710656e14\n          + (double)BYTE1(v11) * 1.099511627776e12\n          + (double)(unsigned __int8)v11 * 4294967296.0\n          + (double)(v12 >> 24) * 16777216.0\n          + (double)BYTE2(v12) * 65536.0\n          + (double)BYTE1(v12) * 256.0\n          + (double)(unsigned __int8)v12;\n      sub_4045B0(&v16, &v9);\n      sub_4045B0(&v17, &v7);\n      result = fprintf(\n                 stderr,\n                 \"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\",\n                 &v16,\n                 &v17,\n                 v15 / v14,\n                 8.0 * v14 / v15,\n                 (1.0 - v14 / v15) * 100.0);\n    }\n    else\n    {\n      result = fwrite(\" no data compressed.\\n\", 0x15uLL, 1uLL, stderr);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4041a0L", 
            "funcEndAddr": "0x4045a7L", 
            "funcName": "sub_4041A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4045B0(__int64 a1, unsigned __int64 *a2)\n{\n  signed __int64 v2; // r12\n  unsigned __int64 v3; // rbx\n  unsigned __int64 v4; // r13\n  unsigned __int64 v5; // r14\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rdx\n  unsigned __int64 v8; // rbp\n  unsigned __int64 v9; // r8\n  unsigned __int64 v10; // r15\n  unsigned __int8 v11; // r11\n  unsigned int v12; // edi\n  unsigned int v13; // eax\n  unsigned int v14; // edi\n  unsigned int v15; // eax\n  unsigned int v16; // edi\n  unsigned int v17; // eax\n  unsigned int v18; // edi\n  __int64 v19; // rcx\n  signed __int64 result; // rax\n  unsigned int v21; // er14\n  unsigned __int64 v22; // r9\n  __m128i *v23; // r11\n  signed __int64 v24; // rcx\n  __int64 v25; // r8\n  __m128i *v26; // rdi\n  __int64 v27; // rsi\n  signed __int64 v28; // rdx\n  __m128i v29; // xmm1\n  __m128i v30; // xmm2\n  signed __int64 v31; // r9\n  signed __int64 v32; // rdx\n  signed __int64 v33; // r12\n  _BYTE *v34; // rcx\n  __int64 v35; // rbp\n  _BYTE v36[7]; // [rsp+1h] [rbp-77h]\n  __int64 v37; // [rsp+8h] [rbp-70h]\n  __int128 v38; // [rsp+10h] [rbp-68h]\n  char v39[88]; // [rsp+20h] [rbp-58h]\n\n  *((_QWORD *)&v38 + 1) = a1;\n  v2 = -4294967296LL;\n  v3 = *a2;\n  v4 = *a2 >> 8;\n  v5 = *a2 >> 16;\n  v6 = *a2 >> 24;\n  v7 = v3 >> 32;\n  v8 = v3 >> 40;\n  v9 = v3 >> 48;\n  v10 = v3 >> 56;\n  v37 = 0LL;\n  *(_QWORD *)&v38 = -8589934592LL;\n  do\n  {\n    do\n    {\n      v11 = v10;\n      LOBYTE(v10) = (unsigned __int8)v10 / 0xAu;\n      v12 = ((unsigned __int8)(v11 - 10 * v10) << 8) | (unsigned __int8)v9;\n      LODWORD(v9) = v12 / 0xA;\n      v13 = (v12 % 0xA << 8) | (unsigned __int8)v8;\n      LODWORD(v8) = v13 / 0xA;\n      v14 = (v13 % 0xA << 8) | (unsigned __int8)v7;\n      LODWORD(v7) = v14 / 0xA;\n      v15 = (v14 % 0xA << 8) | (unsigned __int8)v6;\n      LODWORD(v6) = v15 / 0xA;\n      v16 = (v15 % 0xA << 8) | (unsigned __int8)v5;\n      LODWORD(v5) = v16 / 0xA;\n      v17 = (v16 % 0xA << 8) | (unsigned __int8)v4;\n      LODWORD(v4) = v17 / 0xA;\n      v18 = (v17 % 0xA << 8) | (unsigned __int8)v3;\n      LODWORD(v3) = v18 / 0xA;\n      v19 = v37;\n      v39[v37] = v18 % 0xA | 0x30;\n      v37 = v19 + 1;\n      result = v18 / 0xA | v17 / 0xA | (unsigned int)v5 | (unsigned int)v6 | (unsigned int)v7 | (unsigned int)v9 | (unsigned int)v8;\n      v2 += 0x100000000LL;\n      *(_QWORD *)&v38 = v38 + 0x100000000LL;\n    }\n    while ( v11 > 9u );\n  }\n  while ( (_BYTE)result );\n  v21 = v37;\n  v22 = (unsigned int)v37;\n  v23 = (__m128i *)*((_QWORD *)&v38 + 1);\n  *(_BYTE *)(*((_QWORD *)&v38 + 1) + v22) = 0;\n  if ( v22 >= 0x20 )\n  {\n    v24 = 0LL;\n    if ( (signed int)(v21 - v22) <= (signed int)(v21 - 1) && !((v22 - 1) >> 32) )\n    {\n      v25 = v21 & 0x1F;\n      v24 = v22 - v25;\n      v26 = v23 + 1;\n      v27 = v21 - v25;\n      result = -137438953472LL;\n      v28 = v2;\n      do\n      {\n        v29 = _mm_loadu_si128((const __m128i *)&v36[v28 >> 32]);\n        v30 = _mm_loadu_si128((const __m128i *)((char *)&v38 + (v28 >> 32) + 1));\n        _mm_storeu_si128(\n          v26 - 1,\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_unpackhi_epi8(v30, (__m128i)0LL), 78), 27),\n              27),\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_unpacklo_epi8(v30, (__m128i)0LL), 78), 27),\n              27)));\n        _mm_storeu_si128(\n          v26,\n          _mm_packus_epi16(\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_unpackhi_epi8(v29, (__m128i)0LL), 78), 27),\n              27),\n            _mm_shufflehi_epi16(\n              _mm_shufflelo_epi16(_mm_shuffle_epi32(_mm_unpacklo_epi8(v29, (__m128i)0LL), 78), 27),\n              27)));\n        v28 -= 0x2000000000LL;\n        v26 += 2;\n        v27 -= 32LL;\n      }\n      while ( v27 );\n      if ( !(v21 & 0x1F) )\n        return result;\n    }\n  }\n  else\n  {\n    v24 = 0LL;\n  }\n  v31 = v22 - 1;\n  v32 = v24;\n  if ( ((_BYTE)v21 - (_BYTE)v24) & 1 )\n  {\n    *((_BYTE *)v23->m128i_i64 + v24) = v39[(v2 - (v24 << 32)) >> 32];\n    v32 = v24 + 1;\n  }\n  if ( v31 != v24 )\n  {\n    result = v21 - v32;\n    v33 = -4294967296LL * v32 + v2;\n    v34 = (char *)v23->m128i_i64 + v32 + 1;\n    v35 = v38 - (v32 << 32);\n    do\n    {\n      *(v34 - 1) = v39[v33 >> 32];\n      *v34 = v39[v35 >> 32];\n      v33 -= 0x200000000LL;\n      v34 += 2;\n      v35 -= 0x200000000LL;\n      result -= 2LL;\n    }\n    while ( result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4045b0L", 
            "funcEndAddr": "0x404918L", 
            "funcName": "sub_4045B0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_404920()\n{\n  fwrite(\n    \"bzip2: I'm not configured correctly for this platform!\\n\"\n    \"\\tI require Int32, Int16 and Char to have sizes\\n\"\n    \"\\tof 4, 2 and 1 bytes to run properly, and they don't.\\n\"\n    \"\\tProbably you can fix this by defining them correctly,\\n\"\n    \"\\tand recompiling.  Bye!\\n\",\n    0xEBuLL,\n    1uLL,\n    stderr);\n  dword_416D6C = 0;\n  exit(0);\n}\n", 
            "funcStartAddr": "0x404920L", 
            "funcEndAddr": "0x40494dL", 
            "funcName": "sub_404920"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_404950(__int64 a1@<rax>)\n{\n  fprintf(stderr, \"\\n%s: couldn't allocate enough memory\\n\", qword_416D58, a1);\n  sub_404E90();\n  sub_404EC0();\n}\n", 
            "funcStartAddr": "0x404950L", 
            "funcEndAddr": "0x404975L", 
            "funcName": "sub_404950"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_404980(__int64 a1@<rax>)\n{\n  char *v1; // rdi\n\n  fprintf(stderr, \"\\n%s: I/O or other error, bailing out.  Possible reason follows.\\n\", qword_416D58, a1);\n  v1 = qword_416D58;\n  perror(qword_416D58);\n  sub_404E90(v1);\n  sub_404EC0();\n}\n", 
            "funcStartAddr": "0x404980L", 
            "funcEndAddr": "0x4049b1L", 
            "funcName": "sub_404980"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_4049C0(__int64 a1@<rax>, __int64 a2@<rdi>)\n{\n  __int64 v2; // rcx\n  FILE *v3; // rdi\n\n  v2 = a2;\n  v3 = stderr;\n  fprintf(\n    stderr,\n    \"\\n\"\n    \"%s: PANIC -- internal consistency error:\\n\"\n    \"\\t%s\\n\"\n    \"\\tThis is probably a BUG, but it may be in your COMPILER.  Please do not bother\\n\"\n    \"\\tthe original author.\\n\",\n    qword_416D58,\n    v2,\n    a1);\n  sub_404E90(v3);\n  sub_404EC0();\n}\n", 
            "funcStartAddr": "0x4049c0L", 
            "funcEndAddr": "0x4049e8L", 
            "funcName": "sub_4049C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4049F0@<rax>(char *a1@<rbx>, unsigned int a2@<edi>, unsigned int a3@<esi>)\n{\n  unsigned int v3; // er12\n  unsigned int v4; // ebp\n  int v5; // er14\n  __int64 v6; // r13\n  int v7; // ecx\n  __int64 v8; // rax\n  __int64 v9; // rax\n  signed __int64 v10; // r8\n  __int64 v11; // rcx\n  signed __int64 v12; // rdx\n  unsigned __int64 v13; // rdi\n  __int64 v14; // rsi\n  unsigned __int64 v15; // rdi\n  signed __int64 v16; // rax\n  __int128 v17; // xmm1\n  __int128 v18; // xmm1\n  __int128 v19; // xmm1\n  __int128 v20; // xmm1\n  signed __int64 v21; // rdi\n  __int64 v22; // rsi\n  __int128 v23; // xmm1\n  __int64 v24; // r9\n  __int64 v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rax\n  __int64 result; // rax\n  __int64 v29; // rax\n  int v30; // [rsp+8h] [rbp-2760h]\n  unsigned int v31; // [rsp+Ch] [rbp-275Ch]\n  __int128 v32; // [rsp+10h] [rbp-2758h]\n  __int128 v33; // [rsp+20h] [rbp-2748h]\n  __int128 v34; // [rsp+30h] [rbp-2738h]\n  __int128 v35; // [rsp+40h] [rbp-2728h]\n  __int128 v36; // [rsp+50h] [rbp-2718h]\n  __int128 v37; // [rsp+60h] [rbp-2708h]\n  __int128 v38; // [rsp+70h] [rbp-26F8h]\n  __int128 v39; // [rsp+80h] [rbp-26E8h]\n  __int128 v40[306]; // [rsp+90h] [rbp-26D8h]\n  char dest; // [rsp+13B0h] [rbp-13B8h]\n\n  v3 = a3;\n  v4 = a2;\n  v31 = 0;\n  v5 = 0;\n  v6 = sub_406E40(&v30, a2, (unsigned int)dword_416D88, (unsigned __int8)byte_416D94, &v33, 0LL);\n  if ( !v6 || v30 )\n    goto LABEL_46;\n  v5 = 0;\n  a1 = &dest;\nLABEL_4:\n  ++v5;\n  v7 = 0;\n  while ( 1 )\n  {\n    if ( v7 )\n    {\n      if ( v7 != 4 )\n        goto LABEL_46;\n      v9 = sub_407370(&v30, v6, &v32, &v31);\n      if ( v30 )\nLABEL_59:\n        sub_4049C0(v9, (__int64)\"decompress:bzReadGetUnused\");\n      v10 = (signed int)v31;\n      if ( (signed int)v31 <= 0LL )\n      {\nLABEL_29:\n        v9 = sub_407060(&v30, v6);\n        if ( v30 )\n          goto LABEL_59;\n        v24 = v31;\n        if ( !v31 )\n        {\n          v25 = sub_4013B0(v4);\n          if ( (_DWORD)v25 == -1 )\n            goto LABEL_42;\n          sub_401460(v25, v25, v4);\n          v24 = v31;\n        }\n        v6 = sub_406E40(&v30, v4, (unsigned int)dword_416D88, (unsigned __int8)byte_416D94, &v33, v24);\n        if ( !v6 || v30 )\n          goto LABEL_46;\n        goto LABEL_4;\n      }\n      v11 = v32;\n      if ( v31 < 0x20 )\n      {\n        v12 = 0LL;\n        goto LABEL_28;\n      }\n      if ( (unsigned __int64)&v33 < (signed __int64)v32 + (signed int)v31\n        && (unsigned __int64)v32 < (unsigned __int64)&v33 + (signed int)v31 )\n      {\n        v12 = 0LL;\n        do\n        {\nLABEL_28:\n          *((_BYTE *)&v33 + v12) = *(_BYTE *)(v11 + v12);\n          ++v12;\n        }\n        while ( v12 < v10 );\n        goto LABEL_29;\n      }\n      v12 = (signed int)v31 & 0xFFFFFFFFFFFFFFE0LL;\n      v13 = (unsigned __int64)(v12 - 32) >> 5;\n      v14 = ((_BYTE)v13 + 1) & 3;\n      if ( (unsigned __int64)(v12 - 32) >= 0x60 )\n      {\n        v16 = v14 - 1 - v13;\n        v15 = 0LL;\n        do\n        {\n          v17 = *(_OWORD *)(v11 + v15 + 16);\n          *(__int128 *)((char *)&v33 + v15) = *(_OWORD *)(v11 + v15);\n          *(__int128 *)((char *)&v34 + v15) = v17;\n          v18 = *(_OWORD *)(v11 + v15 + 48);\n          *(__int128 *)((char *)&v35 + v15) = *(_OWORD *)(v11 + v15 + 32);\n          *(__int128 *)((char *)&v36 + v15) = v18;\n          v19 = *(_OWORD *)(v11 + v15 + 80);\n          *(__int128 *)((char *)&v37 + v15) = *(_OWORD *)(v11 + v15 + 64);\n          *(__int128 *)((char *)&v38 + v15) = v19;\n          v20 = *(_OWORD *)(v11 + v15 + 112);\n          *(__int128 *)((char *)&v39 + v15) = *(_OWORD *)(v11 + v15 + 96);\n          v40[v15 / 0x10] = v20;\n          v15 += 128LL;\n          v16 += 4LL;\n        }\n        while ( v16 );\n        if ( !v14 )\n        {\nLABEL_27:\n          if ( v12 == v10 )\n            goto LABEL_29;\n          goto LABEL_28;\n        }\n      }\n      else\n      {\n        v15 = 0LL;\n        if ( !v14 )\n          goto LABEL_27;\n      }\n      v21 = v15 + 16;\n      v22 = -v14;\n      do\n      {\n        v23 = *(_OWORD *)(v11 + v21);\n        *(__int128 *)((char *)&v32 + v21) = *(_OWORD *)(v11 + v21 - 16);\n        *(__int128 *)((char *)&v33 + v21) = v23;\n        v21 += 32LL;\n        ++v22;\n      }\n      while ( v22 );\n      goto LABEL_27;\n    }\n    v8 = sub_407150(&v30, v6, &dest, 5000LL);\n    v7 = v30;\n    if ( v30 == -5 )\n      break;\n    if ( (signed int)v8 > 0 && (v30 | 4) == 4 )\n    {\n      sub_401620(&dest, v8, v8, v3, 1u);\n      v7 = v30;\n    }\n  }\n  if ( !byte_416D91 )\n  {\nLABEL_46:\n    sub_407060((char *)&v32 + 12, v6);\n    if ( v30 != -5 )\n    {\n      v29 = (unsigned int)(v30 + 9);\n      switch ( (_DWORD)v29 )\n      {\n        case 0:\n          sub_404920();\n          return result;\n        case 2:\n          sub_404E10();\n          return result;\n        case 3:\n          sub_404980(v29);\n          return result;\n        case 5:\n          sub_404DE0();\n          return result;\n        case 6:\n          sub_404950(v29);\n          return result;\n        default:\n          sub_4049C0(v29, (__int64)\"decompress:unexpected error\");\n          return result;\n      }\n    }\n    if ( v5 == 1 )\n    {\n      LODWORD(a1) = 0;\n    }\n    else\n    {\n      LOBYTE(a1) = 1;\n      if ( byte_416D93 )\n        fprintf(stderr, \"\\n%s: %s: trailing garbage after EOF ignored\\n\", qword_416D58, &unk_415CD0);\n    }\n    return (unsigned int)a1;\n  }\n  sub_401530(v4);\n  v26 = sub_4013B0(v4);\n  if ( (_DWORD)v26 != -1 )\n  {\n    a1 = &dest;\n    do\n    {\n      sub_401460(v26, v26, v4);\n      v27 = sub_4012B0(&dest, 1u, 0x1388u, v4);\n      if ( (signed int)v27 > 0 )\n        sub_401620(&dest, v27, v27, v3, 1u);\n      v26 = sub_4013B0(v4);\n    }\n    while ( (_DWORD)v26 != -1 );\n  }\nLABEL_42:\n  if ( v3 != 1 )\n    dword_416D80 = 0;\n  dword_416D80 = 0;\n  LOBYTE(a1) = 1;\n  if ( dword_416D88 >= 2 )\n    fwrite(\"\\n    \", 5uLL, 1uLL, stderr);\n  return (unsigned int)a1;\n}\n", 
            "funcStartAddr": "0x4049f0L", 
            "funcEndAddr": "0x404ddeL", 
            "funcName": "sub_4049F0"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_404DE0(__int64 a1@<rax>)\n{\n  FILE *v1; // rdi\n\n  v1 = stderr;\n  fprintf(stderr, \"\\n%s: Data integrity error when decompressing.\\n\", qword_416D58, a1);\n  sub_404E90(v1);\n  sub_404EE0();\n  sub_404EC0();\n}\n", 
            "funcStartAddr": "0x404de0L", 
            "funcEndAddr": "0x404e0aL", 
            "funcName": "sub_404DE0"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_404E10(__int64 a1@<rax>, const char *a2@<rdi>)\n{\n  if ( byte_416D93 )\n  {\n    fprintf(\n      stderr,\n      \"\\n%s: Compressed file ends unexpectedly;\\n\\tperhaps it is corrupted?  *Possible* reason follows.\\n\",\n      qword_416D58,\n      a1);\n    a2 = qword_416D58;\n    perror(qword_416D58);\n    if ( byte_416D93 )\n    {\n      a2 = (const char *)stderr;\n      fprintf(stderr, \"\\tInput file = %s, output file = %s\\n\", &unk_415CD0, &unk_4160E0);\n      if ( byte_416D93 )\n      {\n        a2 = \"\\n\"\n             \"It is possible that the compressed file(s) have become corrupted.\\n\"\n             \"You can use the -tvv option to test integrity of such files.\\n\"\n             \"\\n\"\n             \"You can use the `bzip2recover' program to attempt to recover\\n\"\n             \"data from undamaged sections of corrupted files.\\n\"\n             \"\\n\";\n        fwrite(\n          \"\\n\"\n          \"It is possible that the compressed file(s) have become corrupted.\\n\"\n          \"You can use the -tvv option to test integrity of such files.\\n\"\n          \"\\n\"\n          \"You can use the `bzip2recover' program to attempt to recover\\n\"\n          \"data from undamaged sections of corrupted files.\\n\"\n          \"\\n\",\n          0xF0uLL,\n          1uLL,\n          stderr);\n      }\n    }\n  }\n  sub_404EC0(a2);\n}\n", 
            "funcStartAddr": "0x404e10L", 
            "funcEndAddr": "0x404e8fL", 
            "funcName": "sub_404E10"
        }, 
        {
            "decompiledFuncCode": "int sub_404E90()\n{\n  int result; // eax\n\n  if ( byte_416D93 )\n    result = fprintf(stderr, \"\\tInput file = %s, output file = %s\\n\", &unk_415CD0, &unk_4160E0);\n  return result;\n}\n", 
            "funcStartAddr": "0x404e90L", 
            "funcEndAddr": "0x404eb7L", 
            "funcName": "sub_404E90"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_404EC0()\n{\n  dword_416D6C = 0;\n  exit(0);\n}\n", 
            "funcStartAddr": "0x404ec0L", 
            "funcEndAddr": "0x404ed2L", 
            "funcName": "sub_404EC0"
        }, 
        {
            "decompiledFuncCode": "size_t sub_404EE0()\n{\n  size_t result; // rax\n\n  if ( byte_416D93 )\n    result = fwrite(\n               \"\\n\"\n               \"It is possible that the compressed file(s) have become corrupted.\\n\"\n               \"You can use the -tvv option to test integrity of such files.\\n\"\n               \"\\n\"\n               \"You can use the `bzip2recover' program to attempt to recover\\n\"\n               \"data from undamaged sections of corrupted files.\\n\"\n               \"\\n\",\n               0xF0uLL,\n               1uLL,\n               stderr);\n  return result;\n}\n", 
            "funcStartAddr": "0x404ee0L", 
            "funcEndAddr": "0x404f05L", 
            "funcName": "sub_404EE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_404F10(unsigned int a1)\n{\n  fprintf(\n    stderr,\n    \"\\n\"\n    \"\\n\"\n    \"bzip2/libbzip2: internal error number %d.\\n\"\n    \"This may be a bug in bzip2/libbzip2, %s.\\n\"\n    \"It may also be a bug in your compiler.  Please do not bother the\\n\"\n    \"original author of bzip2 with a bug report for this.  He\\n\"\n    \"doesn't know anything about bzip2 as it appears in CPU2006.\\n\"\n    \"\\n\",\n    a1,\n    \"1.0.3, 15-Feb-2005\");\n  if ( a1 == 1007 )\n    fwrite(\n      \"\\n\"\n      \"*** A special note about internal error number 1007 ***\\n\"\n      \"\\n\"\n      \"Experience suggests that a common cause of i.e. 1007\\n\"\n      \"is unreliable memory or other hardware.  The 1007 assertion\\n\"\n      \"just happens to cross-check the results of huge numbers of\\n\"\n      \"memory reads/writes, and so acts (unintendedly) as a stress\\n\"\n      \"test of your memory system.\\n\"\n      \"\\n\"\n      \"I suggest the following: try compressing the file again,\\n\"\n      \"possibly monitoring progress in detail with the -vv flag.\\n\"\n      \"\\n\"\n      \"* If the error cannot be reproduced, and/or happens at different\\n\"\n      \"  points in compression, you may have a flaky memory system.\\n\"\n      \"  Try a memory-test program.  I have used Memtest86\\n\"\n      \"  (www.memtest86.com).  At the time of writing it is free (GPLd).\\n\"\n      \"  Memtest86 tests memory much more thorougly than your BIOSs\\n\"\n      \"  power-on test, and may find failures that the BIOS doesn't.\\n\"\n      \"\\n\"\n      \"* If the error can be repeatably reproduced, this is a bug in\\n\"\n      \"  bzip2, and I would very much like to hear about it.  Please\\n\"\n      \"  let me know, and, ideally, save a copy of the file causing the\\n\"\n      \"  problem -- without which I will be unable to investigate it.\\n\"\n      \"\\n\",\n      0x420uLL,\n      1uLL,\n      stderr);\n  exit(0);\n}\n", 
            "funcStartAddr": "0x404f10L", 
            "funcEndAddr": "0x404f57L", 
            "funcName": "sub_404F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F70(_QWORD *a1, int a2, int a3, unsigned int a4)\n{\n  int v4; // ebp\n  int v5; // er12\n  unsigned int v6; // er13\n  signed int v7; // er15\n  __int64 (__fastcall *v8)(); // rax\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rsi\n  __int64 v13; // rax\n\n  v4 = a3;\n  v5 = a2;\n  v6 = -2;\n  if ( a4 > 0xFA || !a1 || (unsigned int)(a2 - 1) > 8 )\n    return v6;\n  v7 = 30;\n  if ( a4 )\n    v7 = a4;\n  v8 = (__int64 (__fastcall *)())a1[7];\n  if ( v8 )\n  {\n    if ( a1[8] )\n      goto LABEL_9;\n    goto LABEL_8;\n  }\n  a1[7] = sub_4051F0;\n  v8 = sub_4051F0;\n  if ( !a1[8] )\nLABEL_8:\n    a1[8] = sub_405200;\nLABEL_9:\n  v9 = ((__int64 (__fastcall *)(_QWORD, signed __int64, signed __int64))v8)(a1[9], 55768LL, 1LL);\n  v10 = v9;\n  v6 = -3;\n  if ( v9 )\n  {\n    *(_QWORD *)v9 = a1;\n    *(_OWORD *)(v9 + 24) = 0LL;\n    *(_QWORD *)(v9 + 40) = 0LL;\n    *(_QWORD *)(v9 + 24) = ((__int64 (__fastcall *)(_QWORD, _QWORD, signed __int64))a1[7])(\n                             a1[9],\n                             (unsigned int)(400000 * a2),\n                             1LL);\n    *(_QWORD *)(v10 + 32) = ((__int64 (__fastcall *)(_QWORD, _QWORD, signed __int64))a1[7])(\n                              a1[9],\n                              (unsigned int)(400000 * a2 + 136),\n                              1LL);\n    v11 = ((__int64 (__fastcall *)(_QWORD, signed __int64, signed __int64))a1[7])(a1[9], 262148LL, 1LL);\n    *(_QWORD *)(v10 + 40) = v11;\n    v12 = *(_QWORD *)(v10 + 24);\n    if ( v12 )\n    {\n      if ( v11 )\n      {\n        v13 = *(_QWORD *)(v10 + 32);\n        if ( v13 )\n        {\n          *(_QWORD *)(v10 + 8) = 8589934594LL;\n          *(_DWORD *)(v10 + 652) = 0;\n          *(_DWORD *)(v10 + 664) = v5;\n          *(_DWORD *)(v10 + 112) = 100000 * v5 - 19;\n          *(_DWORD *)(v10 + 656) = v4;\n          *(_DWORD *)(v10 + 88) = v7;\n          *(_QWORD *)(v10 + 64) = v13;\n          *(_QWORD *)(v10 + 72) = v12;\n          *(_QWORD *)(v10 + 80) = 0LL;\n          *(_QWORD *)(v10 + 56) = v12;\n          a1[6] = v10;\n          *(_QWORD *)((char *)a1 + 12) = 0LL;\n          *(_QWORD *)((char *)a1 + 36) = 0LL;\n          *(_QWORD *)(v10 + 92) = 256LL;\n          *(_DWORD *)(v10 + 108) = 0;\n          *(_QWORD *)(v10 + 116) = 0LL;\n          *(_DWORD *)(v10 + 648) = -1;\n          *(_OWORD *)(v10 + 368) = 0LL;\n          *(_OWORD *)(v10 + 352) = 0LL;\n          *(_OWORD *)(v10 + 336) = 0LL;\n          *(_OWORD *)(v10 + 320) = 0LL;\n          *(_OWORD *)(v10 + 304) = 0LL;\n          *(_OWORD *)(v10 + 288) = 0LL;\n          *(_OWORD *)(v10 + 272) = 0LL;\n          *(_OWORD *)(v10 + 256) = 0LL;\n          *(_OWORD *)(v10 + 240) = 0LL;\n          *(_OWORD *)(v10 + 224) = 0LL;\n          *(_OWORD *)(v10 + 208) = 0LL;\n          *(_OWORD *)(v10 + 192) = 0LL;\n          *(_OWORD *)(v10 + 176) = 0LL;\n          *(_OWORD *)(v10 + 160) = 0LL;\n          *(_OWORD *)(v10 + 144) = 0LL;\n          *(_OWORD *)(v10 + 128) = 0LL;\n          *(_DWORD *)(v10 + 660) = 1;\n          return 0;\n        }\n      }\n      ((void (__fastcall *)(_QWORD))a1[8])(a1[9]);\n    }\n    if ( *(_QWORD *)(v10 + 32) )\n      ((void (__fastcall *)(_QWORD))a1[8])(a1[9]);\n    if ( *(_QWORD *)(v10 + 40) )\n      ((void (__fastcall *)(_QWORD))a1[8])(a1[9]);\n    ((void (__fastcall *)(_QWORD, __int64))a1[8])(a1[9], v10);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x404f70L", 
            "funcEndAddr": "0x4051e1L", 
            "funcName": "sub_404F70"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4051F0(__int64 a1, int a2, int a3)\n{\n  return malloc(a3 * a2);\n}\n", 
            "funcStartAddr": "0x4051f0L", 
            "funcEndAddr": "0x4051fbL", 
            "funcName": "sub_4051F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405200(__int64 a1, void *a2)\n{\n  if ( a2 )\n    free(a2);\n}\n", 
            "funcStartAddr": "0x405200L", 
            "funcEndAddr": "0x40520eL", 
            "funcName": "sub_405200"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_405210(__int64 a1, __int64 a2, __int64 a3)\n{\n  signed __int64 result; // rax\n  __int64 v4; // rbx\n  signed __int64 v5; // rcx\n  char v6; // cl\n  __int64 v7; // rcx\n\n  result = 4294967294LL;\n  if ( !a1 )\n    return result;\n  v4 = *(_QWORD *)(a1 + 48);\n  if ( !v4 || *(_QWORD *)v4 != a1 )\n    return result;\n  v5 = *(unsigned int *)(v4 + 8);\n  if ( (_DWORD)v5 != 2 )\n  {\nLABEL_11:\n    switch ( (_DWORD)v5 )\n    {\n      case 1:\n        return 0xFFFFFFFFLL;\n      case 3:\n        if ( (_DWORD)a2 == 1 )\n        {\n          v7 = *(unsigned int *)(v4 + 16);\n          result = 0xFFFFFFFFLL;\n          if ( (_DWORD)v7 == *(_DWORD *)(a1 + 8) )\n          {\n            sub_405380(a1, a2, a3, v7);\n            result = 2LL;\n            if ( !*(_DWORD *)(v4 + 16)\n              && (*(_DWORD *)(v4 + 92) > 0xFFu || *(_DWORD *)(v4 + 96) <= 0)\n              && *(_DWORD *)(v4 + 120) >= *(_DWORD *)(v4 + 116) )\n            {\n              *(_DWORD *)(v4 + 8) = 2;\n              result = 1LL;\n            }\n          }\n        }\n        else\n        {\n          result = 0xFFFFFFFFLL;\n        }\n        break;\n      case 4:\n        if ( (_DWORD)a2 == 2 )\n        {\n          if ( *(_DWORD *)(v4 + 16) == *(_DWORD *)(a1 + 8) )\n          {\n            v6 = sub_405380(a1, a2, a3, v5);\n            result = 0xFFFFFFFFLL;\n            if ( v6 )\n            {\n              result = 3LL;\n              if ( !*(_DWORD *)(v4 + 16)\n                && (*(_DWORD *)(v4 + 92) > 0xFFu || *(_DWORD *)(v4 + 96) <= 0)\n                && *(_DWORD *)(v4 + 120) >= *(_DWORD *)(v4 + 116) )\n              {\n                *(_DWORD *)(v4 + 8) = 1;\n                result = 4LL;\n              }\n            }\n          }\n          else\n          {\n            result = 0xFFFFFFFFLL;\n          }\n        }\n        else\n        {\n          result = 0xFFFFFFFFLL;\n        }\n        break;\n      default:\n        result = 0LL;\n        break;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    v5 = 3LL;\n    if ( (_DWORD)a2 != 1 )\n      break;\nLABEL_7:\n    a3 = *(unsigned int *)(a1 + 8);\n    *(_DWORD *)(v4 + 16) = a3;\n    *(_DWORD *)(v4 + 8) = v5;\n    if ( (_DWORD)v5 != 2 )\n      goto LABEL_11;\n  }\n  if ( (_DWORD)a2 == 2 )\n  {\n    v5 = 4LL;\n    goto LABEL_7;\n  }\n  if ( !(_DWORD)a2 )\n    result = 3 * (unsigned int)((unsigned __int8)sub_405380(a1, a2, a3, 3LL) != 0) - 2;\n  return result;\n}\n", 
            "funcStartAddr": "0x405210L", 
            "funcEndAddr": "0x405377L", 
            "funcName": "sub_405210"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_405380(__int64 a1)\n{\n  unsigned __int8 ***v1; // rbx\n  _OWORD *v2; // r12\n  int v3; // er15\n  unsigned __int8 v4; // r14\n  int v5; // eax\n  __int64 v6; // rdx\n  int v7; // ecx\n  int v8; // eax\n  int v9; // esi\n  bool v10; // zf\n  int v11; // edx\n  int v12; // eax\n  int v13; // ecx\n  unsigned __int8 **v14; // rsi\n  int v15; // edi\n  char v16; // dl\n  int v17; // ebp\n  __int64 v18; // rcx\n  int v19; // edx\n  int v20; // eax\n  unsigned __int8 **v21; // rsi\n  int v22; // edi\n  int v23; // ebp\n  __int64 v24; // rcx\n  int v25; // edx\n  int v26; // eax\n  int v27; // edx\n\n  v1 = *(unsigned __int8 ****)(a1 + 48);\n  v2 = (_OWORD *)(*(_QWORD *)(a1 + 48) + 128LL);\n  v3 = 0;\n  v4 = 0;\n  while ( 1 )\n  {\n    v5 = *((_DWORD *)v1 + 3);\n    do\n    {\n      if ( v5 == 2 )\n      {\n        v8 = v3;\n        goto LABEL_25;\n      }\n    }\n    while ( v5 != 1 );\n    v6 = (__int64)*v1;\n    v7 = *((_DWORD *)v1 + 30);\n    if ( *((_DWORD *)*v1 + 8) )\n    {\n      v8 = 0;\n      do\n      {\n        if ( v7 >= *((_DWORD *)v1 + 29) )\n          break;\n        v8 = *((unsigned __int8 *)v1[10] + v7);\n        **(_BYTE **)(v6 + 24) = v8;\n        v7 = *((_DWORD *)v1 + 30) + 1;\n        *((_DWORD *)v1 + 30) = v7;\n        v6 = (__int64)*v1;\n        v9 = *((_DWORD *)*v1 + 8) - 1;\n        *(_DWORD *)(v6 + 32) = v9;\n        ++*(_QWORD *)(v6 + 24);\n        v10 = (*(_DWORD *)(v6 + 36))++ == -1;\n        if ( v10 )\n          ++*(_DWORD *)(v6 + 40);\n        LOBYTE(v8) = 1;\n      }\n      while ( v9 );\n    }\n    else\n    {\n      v8 = 0;\n    }\n    LOBYTE(v8) = v3 | v8;\n    if ( v7 < *((_DWORD *)v1 + 29) )\n      break;\n    v11 = *((_DWORD *)v1 + 2);\n    if ( v11 == 4 && !*((_DWORD *)v1 + 4) && (*((_DWORD *)v1 + 23) > 0xFFu || *((_DWORD *)v1 + 24) <= 0) )\n      break;\n    *((_DWORD *)v1 + 27) = 0;\n    *(unsigned __int8 ***)((char *)v1 + 116) = 0LL;\n    *((_DWORD *)v1 + 162) = -1;\n    v2[15] = 0LL;\n    v2[14] = 0LL;\n    v2[13] = 0LL;\n    v2[12] = 0LL;\n    v2[11] = 0LL;\n    v2[10] = 0LL;\n    v2[9] = 0LL;\n    v2[8] = 0LL;\n    v2[7] = 0LL;\n    v2[6] = 0LL;\n    v2[5] = 0LL;\n    v2[4] = 0LL;\n    v2[3] = 0LL;\n    v2[2] = 0LL;\n    v2[1] = 0LL;\n    *v2 = 0LL;\n    ++*((_DWORD *)v1 + 165);\n    *((_DWORD *)v1 + 3) = 2;\n    if ( v11 == 3 )\n    {\n      if ( !*((_DWORD *)v1 + 4) && (*((_DWORD *)v1 + 23) > 0xFFu || *((_DWORD *)v1 + 24) <= 0) )\n        break;\nLABEL_25:\n      v11 = *((_DWORD *)v1 + 2);\n    }\n    v3 = v8;\n    v12 = *((_DWORD *)v1 + 27);\n    v13 = *((_DWORD *)v1 + 28);\n    if ( v11 == 2 )\n    {\n      if ( v12 < v13 )\n      {\n        v14 = *v1;\n        v15 = *((_DWORD *)*v1 + 2);\n        v16 = 0;\n        while ( 1 )\n        {\n          if ( !v15 )\n            goto LABEL_59;\n          v17 = **v14;\n          v18 = *((unsigned int *)v1 + 23);\n          v19 = *((_DWORD *)v1 + 24);\n          if ( (_DWORD)v18 == v17 )\n          {\n            if ( v19 == 255 )\n              goto LABEL_35;\n            *((_DWORD *)v1 + 24) = v19 + 1;\n          }\n          else\n          {\n            if ( v19 != 1 )\n            {\nLABEL_35:\n              if ( (unsigned int)v18 <= 0xFF )\n                sub_407D40(v1);\n              *((_DWORD *)v1 + 23) = v17;\n              *((_DWORD *)v1 + 24) = 1;\n              goto LABEL_38;\n            }\n            *((_DWORD *)v1 + 162) = dword_4150C0[(*((_DWORD *)v1 + 162) >> 24) ^ (unsigned __int8)v18] ^ (*((_DWORD *)v1 + 162) << 8);\n            *((_BYTE *)v1 + v18 + 128) = 1;\n            *((_BYTE *)v1[8] + v12) = v18;\n            ++*((_DWORD *)v1 + 27);\n            *((_DWORD *)v1 + 23) = v17;\n          }\nLABEL_38:\n          v14 = *v1;\n          ++*v14;\n          v20 = *((_DWORD *)v14 + 3);\n          v15 = *((_DWORD *)v14 + 2) - 1;\n          *((_DWORD *)v14 + 2) = v15;\n          *((_DWORD *)v14 + 3) = v20 + 1;\n          if ( v20 == -1 )\n            ++*((_DWORD *)v14 + 4);\n          v12 = *((_DWORD *)v1 + 27);\n          v13 = *((_DWORD *)v1 + 28);\n          v16 = 1;\n          if ( v12 >= v13 )\n            goto LABEL_59;\n        }\n      }\n      goto LABEL_58;\n    }\n    if ( v12 < v13 )\n    {\n      v21 = *v1;\n      v22 = *((_DWORD *)*v1 + 2);\n      v16 = 0;\n      while ( 1 )\n      {\n        if ( !v22 || !*((_DWORD *)v1 + 4) )\n          goto LABEL_59;\n        v23 = **v21;\n        v24 = *((unsigned int *)v1 + 23);\n        v25 = *((_DWORD *)v1 + 24);\n        if ( (_DWORD)v24 == v23 )\n        {\n          if ( v25 == 255 )\n            goto LABEL_51;\n          *((_DWORD *)v1 + 24) = v25 + 1;\n        }\n        else\n        {\n          if ( v25 != 1 )\n          {\nLABEL_51:\n            if ( (unsigned int)v24 <= 0xFF )\n              sub_407D40(v1);\n            *((_DWORD *)v1 + 23) = v23;\n            *((_DWORD *)v1 + 24) = 1;\n            goto LABEL_54;\n          }\n          *((_DWORD *)v1 + 162) = dword_4150C0[(*((_DWORD *)v1 + 162) >> 24) ^ (unsigned __int8)v24] ^ (*((_DWORD *)v1 + 162) << 8);\n          *((_BYTE *)v1 + v24 + 128) = 1;\n          *((_BYTE *)v1[8] + v12) = v24;\n          ++*((_DWORD *)v1 + 27);\n          *((_DWORD *)v1 + 23) = v23;\n        }\nLABEL_54:\n        v21 = *v1;\n        ++*v21;\n        v26 = *((_DWORD *)v21 + 3);\n        v22 = *((_DWORD *)v21 + 2) - 1;\n        *((_DWORD *)v21 + 2) = v22;\n        *((_DWORD *)v21 + 3) = v26 + 1;\n        if ( v26 == -1 )\n          ++*((_DWORD *)v21 + 4);\n        --*((_DWORD *)v1 + 4);\n        v12 = *((_DWORD *)v1 + 27);\n        v13 = *((_DWORD *)v1 + 28);\n        v16 = 1;\n        if ( v12 >= v13 )\n          goto LABEL_59;\n      }\n    }\nLABEL_58:\n    v16 = 0;\nLABEL_59:\n    v4 |= v16;\n    if ( *((_DWORD *)v1 + 2) == 2 || *((_DWORD *)v1 + 4) )\n    {\n      if ( v12 >= v13 )\n        goto LABEL_2;\n      if ( !*((_DWORD *)*v1 + 2) )\n        return (v4 | (unsigned __int8)v3) != 0;\n    }\n    else\n    {\n      if ( *((_DWORD *)v1 + 23) <= 0xFFu )\n      {\n        sub_407D40(v1);\n        v27 = *((_DWORD *)v1 + 2);\n      }\n      *(unsigned __int8 ***)((char *)v1 + 92) = (unsigned __int8 **)256;\nLABEL_2:\n      sub_407ED0(v1);\n      *((_DWORD *)v1 + 3) = 1;\n    }\n  }\n  LOBYTE(v3) = v8;\n  return (v4 | (unsigned __int8)v3) != 0;\n}\n", 
            "funcStartAddr": "0x405380L", 
            "funcEndAddr": "0x405796L", 
            "funcName": "sub_405380"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_405810(_QWORD *a1, unsigned int a2, unsigned int a3)\n{\n  char v3; // r14\n  signed __int64 result; // rax\n  void *(__fastcall *v5)(__int64, int, int); // rax\n  __int64 v6; // rax\n\n  v3 = a3;\n  result = 4294967294LL;\n  if ( a2 <= 4 && a1 && a3 <= 1 )\n  {\n    v5 = (void *(__fastcall *)(__int64, int, int))a1[7];\n    if ( v5 )\n    {\n      if ( a1[8] )\n        goto LABEL_6;\n    }\n    else\n    {\n      a1[7] = sub_4051F0;\n      v5 = sub_4051F0;\n      if ( a1[8] )\n        goto LABEL_6;\n    }\n    a1[8] = sub_405200;\nLABEL_6:\n    v6 = (__int64)v5(a1[9], 64144, 1);\n    if ( v6 )\n    {\n      *(_QWORD *)v6 = a1;\n      a1[6] = v6;\n      *(_DWORD *)(v6 + 8) = 10;\n      *(_QWORD *)(v6 + 32) = 0LL;\n      *(_DWORD *)(v6 + 3188) = 0;\n      *(_QWORD *)((char *)a1 + 12) = 0LL;\n      *(_QWORD *)((char *)a1 + 36) = 0LL;\n      *(_BYTE *)(v6 + 44) = v3;\n      *(_DWORD *)(v6 + 48) = 0;\n      *(_OWORD *)(v6 + 3152) = 0LL;\n      *(_QWORD *)(v6 + 3168) = 0LL;\n      *(_DWORD *)(v6 + 52) = a2;\n      result = 0LL;\n    }\n    else\n    {\n      result = 4294967293LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405810L", 
            "funcEndAddr": "0x4058e8L", 
            "funcName": "sub_405810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4058F0(int a1, __int64 a2)\n{\n  __int64 result; // rax\n  int v3; // er8\n  int v4; // edx\n\n  result = 0LL;\n  v3 = 256;\n  do\n  {\n    v4 = ((signed int)result + v3) >> 1;\n    if ( *(_DWORD *)(a2 + 4LL * v4) > a1 )\n      v3 = ((signed int)result + v3) >> 1;\n    else\n      result = (unsigned int)v4;\n  }\n  while ( v3 - (_DWORD)result != 1 );\n  return result;\n}\n", 
            "funcStartAddr": "0x4058f0L", 
            "funcEndAddr": "0x40592eL", 
            "funcName": "sub_4058F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405930(__int64 a1)\n{\n  __int64 result; // rax\n  __int64 *v2; // rbx\n  signed int v3; // ecx\n  char v4; // al\n  __int64 v5; // rbp\n  int v6; // ecx\n  int v7; // er15\n  int v8; // er12\n  int v9; // er13\n  __int64 v10; // rcx\n  int v11; // er11\n  int v12; // edi\n  int v13; // eax\n  __int64 v14; // r9\n  int v15; // eax\n  __int64 v16; // r10\n  unsigned int v17; // esi\n  int v18; // er8\n  __int64 v19; // rcx\n  int v20; // ecx\n  int v21; // er8\n  int v22; // ecx\n  int v23; // edi\n  int v24; // ecx\n  int v25; // ecx\n  unsigned int v26; // esi\n  __int64 v27; // rax\n  int v28; // eax\n  int v29; // er8\n  int v30; // eax\n  int v31; // edi\n  int v32; // ebp\n  __int64 v33; // rax\n  int v34; // esi\n  int v35; // ecx\n  unsigned int v36; // esi\n  __int64 v37; // rax\n  int v38; // eax\n  int v39; // er8\n  int v40; // eax\n  int v41; // edi\n  int v42; // eax\n  int v43; // eax\n  int v44; // ecx\n  unsigned int v45; // eax\n  __int64 v46; // rdx\n  int v47; // edx\n  int v48; // er8\n  int v49; // esi\n  int v50; // edi\n  __int64 v51; // rax\n  int v52; // eax\n  int v53; // er8\n  int v54; // eax\n  bool v55; // zf\n  __int64 v56; // r8\n  int v57; // er11\n  int v58; // er15\n  int v59; // eax\n  int v60; // er14\n  __int64 v61; // r9\n  int v62; // edx\n  unsigned int v63; // ebp\n  unsigned int v64; // edi\n  __int64 v65; // rsi\n  int v66; // esi\n  int v67; // edx\n  int v68; // ebp\n  int v69; // er12\n  unsigned int v70; // edi\n  __int64 v71; // rcx\n  int v72; // ecx\n  int v73; // edx\n  int v74; // esi\n  unsigned int v75; // edi\n  __int64 v76; // rcx\n  int v77; // ecx\n  int v78; // edx\n  int v79; // eax\n  unsigned int v80; // esi\n  __int64 v81; // rcx\n  int v82; // ecx\n  unsigned int v83; // ecx\n  int v84; // eax\n  int v85; // edx\n  __int64 v86; // rcx\n  int v87; // ecx\n  int v88; // edx\n  int v89; // eax\n  int v90; // er15\n  int v91; // er12\n  int v92; // er13\n  __int64 v93; // rcx\n  int v94; // er11\n  int v95; // edx\n  int v96; // eax\n  __int64 v97; // r10\n  __int64 v98; // r9\n  int v99; // eax\n  unsigned int v100; // edi\n  int v101; // edx\n  int v102; // ecx\n  int v103; // ecx\n  unsigned int v104; // edi\n  int v105; // eax\n  int v106; // edx\n  int v107; // esi\n  int v108; // esi\n  int v109; // ecx\n  unsigned int v110; // esi\n  int v111; // edx\n  int v112; // eax\n  int v113; // eax\n  int v114; // ecx\n  unsigned int v115; // eax\n  int v116; // edx\n  int v117; // esi\n  int v118; // eax\n  unsigned int v119; // er15\n  int v120; // er14\n  int v121; // ecx\n  int v122; // er12\n  int v123; // er9\n  __int64 v124; // rdx\n  unsigned int v125; // er8\n  _BYTE *v126; // r10\n  int v127; // er11\n  int v128; // edi\n  unsigned int v129; // eax\n  unsigned int v130; // er8\n  __int64 v131; // rbp\n  int v132; // ebp\n  __int64 v133; // rcx\n  unsigned int v134; // er8\n  int v135; // eax\n  int v136; // eax\n  char v137; // r13\n  __int64 v138; // rax\n  unsigned __int8 v139; // cf\n  signed int v140; // eax\n  int v141; // eax\n  __int64 v142; // [rsp+0h] [rbp-48h]\n  int v143; // [rsp+Ch] [rbp-3Ch]\n  __int64 v144; // [rsp+10h] [rbp-38h]\n\n  result = 4294967294LL;\n  if ( !a1 )\n    return result;\n  v2 = *(__int64 **)(a1 + 48);\n  if ( !v2 || *v2 != a1 )\n    return result;\n  v3 = *((_DWORD *)v2 + 2);\n  while ( 1 )\n  {\n    if ( v3 == 1 )\n      return 0xFFFFFFFFLL;\n    if ( v3 == 2 )\n      break;\n    if ( v3 >= 10 )\n    {\nLABEL_198:\n      result = sub_40C5C0(v2);\n      if ( (_DWORD)result == 4 )\n      {\n        if ( *((_DWORD *)v2 + 13) > 2 )\n          fprintf(\n            stderr,\n            \"\\n    combined CRCs: stored = 0x%08x, computed = 0x%08x\",\n            *((unsigned int *)v2 + 795),\n            *((unsigned int *)v2 + 797),\n            v142);\n        return 8 * (unsigned int)(*((_DWORD *)v2 + 797) == *((_DWORD *)v2 + 795)) - 4;\n      }\n      v3 = 2;\n      if ( *((_DWORD *)v2 + 2) != 2 )\n        return result;\n    }\n  }\n  v4 = *((_BYTE *)v2 + 20);\n  if ( *((_BYTE *)v2 + 44) )\n  {\n    v5 = *v2;\n    v6 = *(_DWORD *)(*v2 + 32);\n    if ( v4 )\n    {\n      if ( v6 )\n      {\n        v7 = *((_DWORD *)v2 + 4);\n        do\n        {\n          v142 = v5;\n          while ( !v7 )\n          {\n            v8 = *((_DWORD *)v2 + 273);\n            v9 = *((_DWORD *)v2 + 16020);\n            if ( v8 == v9 + 1 )\n              goto LABEL_192;\n            if ( v8 > v9 + 1 )\n              goto LABEL_208;\n            *((_DWORD *)v2 + 4) = 1;\n            v10 = *((unsigned int *)v2 + 15);\n            v11 = *((_DWORD *)v2 + 16);\n            *((_BYTE *)v2 + 12) = v11;\n            v12 = 0;\n            v13 = 256;\n            do\n            {\n              if ( *((_DWORD *)v2 + ((v12 + v13) >> 1) + 274) > (signed int)v10 )\n                v13 = (v12 + v13) >> 1;\n              else\n                v12 = (v12 + v13) >> 1;\n            }\n            while ( v13 - v12 != 1 );\n            v14 = v2[395];\n            v15 = *(unsigned __int16 *)(v14 + 2 * v10);\n            v16 = v2[396];\n            v17 = v15 | (((*(unsigned __int8 *)(v16 + ((unsigned int)v10 >> 1)) >> (4 * v10 & 4)) & 0xF) << 16);\n            *((_DWORD *)v2 + 15) = v17;\n            v18 = *((_DWORD *)v2 + 6);\n            if ( !v18 )\n            {\n              v19 = *((signed int *)v2 + 7);\n              v18 = dword_4154C0[v19];\n              *((_DWORD *)v2 + 6) = v18;\n              v20 = v19 + 1;\n              if ( v20 == 512 )\n                v20 = 0;\n              *((_DWORD *)v2 + 7) = v20;\n            }\n            v21 = v18 - 1;\n            *((_DWORD *)v2 + 6) = v21;\n            *((_DWORD *)v2 + 273) = v8 + 1;\n            v7 = 1;\n            if ( v8 != v9 )\n            {\n              v22 = (v21 == 1) ^ (unsigned __int8)v12;\n              if ( v22 == v11 )\n              {\n                *((_DWORD *)v2 + 4) = 2;\n                v23 = 0;\n                v24 = 256;\n                do\n                {\n                  if ( *((_DWORD *)v2 + ((v23 + v24) >> 1) + 274) > (signed int)v17 )\n                    v24 = (v23 + v24) >> 1;\n                  else\n                    v23 = (v23 + v24) >> 1;\n                }\n                while ( v24 - v23 != 1 );\n                v25 = *(unsigned __int16 *)(v14 + 2LL * v17);\n                v26 = v25 | (((*(unsigned __int8 *)(v16 + (v17 >> 1)) >> (4 * v15 & 4)) & 0xF) << 16);\n                *((_DWORD *)v2 + 15) = v26;\n                if ( !v21 )\n                {\n                  v27 = *((signed int *)v2 + 7);\n                  v21 = dword_4154C0[v27];\n                  *((_DWORD *)v2 + 6) = v21;\n                  v28 = v27 + 1;\n                  if ( v28 == 512 )\n                    v28 = 0;\n                  *((_DWORD *)v2 + 7) = v28;\n                }\n                v29 = v21 - 1;\n                *((_DWORD *)v2 + 6) = v29;\n                *((_DWORD *)v2 + 273) = v8 + 2;\n                v7 = 2;\n                if ( v8 + 1 == v9 )\n                {\n                  v5 = v142;\n                }\n                else\n                {\n                  v30 = (v29 == 1) ^ (unsigned __int8)v23;\n                  if ( v30 == v11 )\n                  {\n                    *((_DWORD *)v2 + 4) = 3;\n                    v31 = 0;\n                    v32 = 256;\n                    do\n                    {\n                      if ( *((_DWORD *)v2 + ((v31 + v32) >> 1) + 274) > (signed int)v26 )\n                        v32 = (v31 + v32) >> 1;\n                      else\n                        v31 = (v31 + v32) >> 1;\n                    }\n                    while ( v32 - v31 != 1 );\n                    v33 = v26;\n                    v34 = *(unsigned __int8 *)(v16 + (v26 >> 1)) >> (4 * v25 & 4);\n                    v35 = *(unsigned __int16 *)(v14 + 2 * v33);\n                    v36 = v35 | ((v34 & 0xF) << 16);\n                    *((_DWORD *)v2 + 15) = v36;\n                    if ( !v29 )\n                    {\n                      v37 = *((signed int *)v2 + 7);\n                      v29 = dword_4154C0[v37];\n                      *((_DWORD *)v2 + 6) = v29;\n                      v38 = v37 + 1;\n                      if ( v38 == 512 )\n                        v38 = 0;\n                      *((_DWORD *)v2 + 7) = v38;\n                    }\n                    v39 = v29 - 1;\n                    *((_DWORD *)v2 + 6) = v39;\n                    *((_DWORD *)v2 + 273) = v8 + 3;\n                    v7 = 3;\n                    v5 = v142;\n                    if ( v8 + 2 != v9 )\n                    {\n                      v40 = (v39 == 1) ^ (unsigned __int8)v31;\n                      if ( v40 == v11 )\n                      {\n                        v41 = 0;\n                        v42 = 256;\n                        do\n                        {\n                          if ( *((_DWORD *)v2 + ((v41 + v42) >> 1) + 274) > (signed int)v36 )\n                            v42 = (v41 + v42) >> 1;\n                          else\n                            v41 = (v41 + v42) >> 1;\n                        }\n                        while ( v42 - v41 != 1 );\n                        v43 = *(unsigned __int8 *)(v16 + (v36 >> 1)) >> (4 * v35 & 4);\n                        v44 = *(unsigned __int16 *)(v14 + 2LL * v36);\n                        v45 = v44 | ((v43 & 0xF) << 16);\n                        *((_DWORD *)v2 + 15) = v45;\n                        if ( !v39 )\n                        {\n                          v46 = *((signed int *)v2 + 7);\n                          v39 = dword_4154C0[v46];\n                          *((_DWORD *)v2 + 6) = v39;\n                          v47 = v46 + 1;\n                          if ( v47 == 512 )\n                            v47 = 0;\n                          *((_DWORD *)v2 + 7) = v47;\n                        }\n                        v48 = v39 - 1;\n                        *((_DWORD *)v2 + 6) = v48;\n                        *((_DWORD *)v2 + 273) = v8 + 4;\n                        v7 = ((v48 == 1) ^ (unsigned __int8)v41) + 4;\n                        *((_DWORD *)v2 + 4) = v7;\n                        v49 = 0;\n                        v50 = 256;\n                        do\n                        {\n                          if ( *((_DWORD *)v2 + ((v49 + v50) >> 1) + 274) > (signed int)v45 )\n                            v50 = (v49 + v50) >> 1;\n                          else\n                            v49 = (v49 + v50) >> 1;\n                        }\n                        while ( v50 - v49 != 1 );\n                        *((_DWORD *)v2 + 16) = v49;\n                        *((_DWORD *)v2 + 15) = *(unsigned __int16 *)(v14 + 2LL * v45) | (((*(unsigned __int8 *)(v16 + (v45 >> 1)) >> (4 * v44 & 4)) & 0xF) << 16);\n                        if ( !v48 )\n                        {\n                          v51 = *((signed int *)v2 + 7);\n                          v48 = dword_4154C0[v51];\n                          *((_DWORD *)v2 + 6) = v48;\n                          v52 = v51 + 1;\n                          if ( v52 == 512 )\n                            v52 = 0;\n                          *((_DWORD *)v2 + 7) = v52;\n                        }\n                        v53 = v48 - 1;\n                        *((_DWORD *)v2 + 6) = v53;\n                        *((_DWORD *)v2 + 16) = (v53 == 1) ^ v49;\n                        *((_DWORD *)v2 + 273) = v8 + 5;\n                        v5 = v142;\n                      }\n                      else\n                      {\n                        *((_DWORD *)v2 + 16) = v40;\n                      }\n                    }\n                  }\n                  else\n                  {\n                    *((_DWORD *)v2 + 16) = v30;\n                    v5 = v142;\n                  }\n                }\n              }\n              else\n              {\n                *((_DWORD *)v2 + 16) = v22;\n                v5 = v142;\n              }\n            }\n            if ( !*(_DWORD *)(v5 + 32) )\n              goto LABEL_192;\n          }\n          **(_BYTE **)(v5 + 24) = *((_BYTE *)v2 + 12);\n          *((_DWORD *)v2 + 796) = dword_4150C0[(*((_DWORD *)v2 + 796) >> 24) ^ *((unsigned __int8 *)v2 + 12)] ^ (*((_DWORD *)v2 + 796) << 8);\n          v7 = *((_DWORD *)v2 + 4) - 1;\n          *((_DWORD *)v2 + 4) = v7;\n          v5 = *v2;\n          ++*(_QWORD *)(v5 + 24);\n          v54 = *(_DWORD *)(v5 + 32) - 1;\n          *(_DWORD *)(v5 + 32) = v54;\n          v55 = (*(_DWORD *)(v5 + 36))++ == -1;\n          if ( v55 )\n            ++*(_DWORD *)(v5 + 40);\n        }\n        while ( v54 );\n      }\n      goto LABEL_192;\n    }\n    if ( !v6 )\n      goto LABEL_192;\n    v90 = *((_DWORD *)v2 + 4);\nLABEL_123:\n    v142 = v5;\n    while ( 1 )\n    {\n      if ( v90 )\n      {\n        **(_BYTE **)(v5 + 24) = *((_BYTE *)v2 + 12);\n        *((_DWORD *)v2 + 796) = dword_4150C0[(*((_DWORD *)v2 + 796) >> 24) ^ *((unsigned __int8 *)v2 + 12)] ^ (*((_DWORD *)v2 + 796) << 8);\n        v90 = *((_DWORD *)v2 + 4) - 1;\n        *((_DWORD *)v2 + 4) = v90;\n        v5 = *v2;\n        ++*(_QWORD *)(v5 + 24);\n        v118 = *(_DWORD *)(v5 + 32) - 1;\n        *(_DWORD *)(v5 + 32) = v118;\n        v55 = (*(_DWORD *)(v5 + 36))++ == -1;\n        if ( v55 )\n          ++*(_DWORD *)(v5 + 40);\n        if ( !v118 )\n          goto LABEL_192;\n        goto LABEL_123;\n      }\n      v91 = *((_DWORD *)v2 + 273);\n      v92 = *((_DWORD *)v2 + 16020);\n      if ( v91 == v92 + 1 )\n        goto LABEL_192;\n      if ( v91 > v92 + 1 )\n        goto LABEL_208;\n      *((_DWORD *)v2 + 4) = 1;\n      v93 = *((unsigned int *)v2 + 15);\n      v94 = *((_DWORD *)v2 + 16);\n      *((_BYTE *)v2 + 12) = v94;\n      v95 = 0;\n      v96 = 256;\n      do\n      {\n        if ( *((_DWORD *)v2 + ((v95 + v96) >> 1) + 274) > (signed int)v93 )\n          v96 = (v95 + v96) >> 1;\n        else\n          v95 = (v95 + v96) >> 1;\n      }\n      while ( v96 - v95 != 1 );\n      v97 = v2[395];\n      v98 = v2[396];\n      v99 = *(unsigned __int16 *)(v97 + 2 * v93);\n      v100 = v99 | (((*(unsigned __int8 *)(v98 + ((unsigned int)v93 >> 1)) >> (4 * v93 & 4)) & 0xF) << 16);\n      *((_DWORD *)v2 + 15) = v100;\n      *((_DWORD *)v2 + 273) = v91 + 1;\n      v90 = 1;\n      if ( v91 != v92 )\n      {\n        if ( (unsigned __int8)v95 == v94 )\n        {\n          *((_DWORD *)v2 + 4) = 2;\n          v101 = 0;\n          v102 = 256;\n          do\n          {\n            if ( *((_DWORD *)v2 + ((v101 + v102) >> 1) + 274) > (signed int)v100 )\n              v102 = (v101 + v102) >> 1;\n            else\n              v101 = (v101 + v102) >> 1;\n          }\n          while ( v102 - v101 != 1 );\n          v103 = *(unsigned __int16 *)(v97 + 2LL * v100);\n          v104 = v103 | (((*(unsigned __int8 *)(v98 + (v100 >> 1)) >> (4 * v99 & 4)) & 0xF) << 16);\n          *((_DWORD *)v2 + 15) = v104;\n          *((_DWORD *)v2 + 273) = v91 + 2;\n          v90 = 2;\n          if ( v91 + 1 == v92 )\n            goto LABEL_161;\n          v105 = (unsigned __int8)v101;\n          if ( (unsigned __int8)v101 != v94 )\n            goto LABEL_214;\n          *((_DWORD *)v2 + 4) = 3;\n          v106 = 0;\n          v107 = 256;\n          do\n          {\n            if ( *((_DWORD *)v2 + ((v106 + v107) >> 1) + 274) > (signed int)v104 )\n              v107 = (v106 + v107) >> 1;\n            else\n              v106 = (v106 + v107) >> 1;\n          }\n          while ( v107 - v106 != 1 );\n          v108 = *(unsigned __int8 *)(v98 + (v104 >> 1)) >> (4 * v103 & 4);\n          v109 = *(unsigned __int16 *)(v97 + 2LL * v104);\n          v110 = v109 | ((v108 & 0xF) << 16);\n          *((_DWORD *)v2 + 15) = v110;\n          *((_DWORD *)v2 + 273) = v91 + 3;\n          v90 = 3;\n          if ( v91 + 2 == v92 )\n            goto LABEL_161;\n          v105 = (unsigned __int8)v106;\n          if ( (unsigned __int8)v106 != v94 )\n          {\nLABEL_214:\n            *((_DWORD *)v2 + 16) = v105;\n          }\n          else\n          {\n            v111 = 0;\n            v112 = 256;\n            do\n            {\n              if ( *((_DWORD *)v2 + ((v111 + v112) >> 1) + 274) > (signed int)v110 )\n                v112 = (v111 + v112) >> 1;\n              else\n                v111 = (v111 + v112) >> 1;\n            }\n            while ( v112 - v111 != 1 );\n            v113 = *(unsigned __int8 *)(v98 + (v110 >> 1)) >> (4 * v109 & 4);\n            v114 = *(unsigned __int16 *)(v97 + 2LL * v110);\n            v115 = v114 | ((v113 & 0xF) << 16);\n            *((_DWORD *)v2 + 15) = v115;\n            *((_DWORD *)v2 + 273) = v91 + 4;\n            v90 = (unsigned __int8)v111 + 4;\n            *((_DWORD *)v2 + 4) = v90;\n            v116 = 0;\n            v117 = 256;\n            do\n            {\n              if ( *((_DWORD *)v2 + ((v116 + v117) >> 1) + 274) > (signed int)v115 )\n                v117 = (v116 + v117) >> 1;\n              else\n                v116 = (v116 + v117) >> 1;\n            }\n            while ( v117 - v116 != 1 );\n            *((_DWORD *)v2 + 16) = v116;\n            *((_DWORD *)v2 + 15) = *(unsigned __int16 *)(v97 + 2LL * v115) | (((*(unsigned __int8 *)(v98 + (v115 >> 1)) >> (4 * v114 & 4)) & 0xF) << 16);\n            *((_DWORD *)v2 + 273) = v91 + 5;\n          }\nLABEL_161:\n          v5 = v142;\n          goto LABEL_162;\n        }\n        *((_DWORD *)v2 + 16) = (unsigned __int8)v95;\n      }\nLABEL_162:\n      if ( !*(_DWORD *)(v5 + 32) )\n        goto LABEL_192;\n    }\n  }\n  if ( v4 )\n  {\n    v56 = *v2;\n    if ( !*(_DWORD *)(*v2 + 32) )\n      goto LABEL_192;\n    v57 = *((_DWORD *)v2 + 4);\n    while ( 1 )\n    {\n      while ( v57 )\n      {\n        **(_BYTE **)(v56 + 24) = *((_BYTE *)v2 + 12);\n        *((_DWORD *)v2 + 796) = dword_4150C0[(*((_DWORD *)v2 + 796) >> 24) ^ *((unsigned __int8 *)v2 + 12)] ^ (*((_DWORD *)v2 + 796) << 8);\n        v57 = *((_DWORD *)v2 + 4) - 1;\n        *((_DWORD *)v2 + 4) = v57;\n        v56 = *v2;\n        ++*(_QWORD *)(v56 + 24);\n        v89 = *(_DWORD *)(v56 + 32) - 1;\n        *(_DWORD *)(v56 + 32) = v89;\n        v55 = (*(_DWORD *)(v56 + 36))++ == -1;\n        if ( v55 )\n          ++*(_DWORD *)(v56 + 40);\n        if ( !v89 )\n          goto LABEL_192;\n      }\n      v58 = *((_DWORD *)v2 + 273);\n      v59 = *((_DWORD *)v2 + 16020);\n      if ( v58 == v59 + 1 )\n        goto LABEL_192;\n      if ( v58 > v59 + 1 )\n        goto LABEL_208;\n      *((_DWORD *)v2 + 4) = 1;\n      v60 = *((_DWORD *)v2 + 16);\n      *((_BYTE *)v2 + 12) = v60;\n      v61 = v2[394];\n      v62 = *((_DWORD *)v2 + 6);\n      v63 = *(_DWORD *)(v61 + 4LL * *((unsigned int *)v2 + 15));\n      v64 = v63 >> 8;\n      *((_DWORD *)v2 + 15) = v63 >> 8;\n      if ( !v62 )\n      {\n        v65 = *((signed int *)v2 + 7);\n        v62 = dword_4154C0[v65];\n        *((_DWORD *)v2 + 6) = v62;\n        v66 = v65 + 1;\n        if ( v66 == 512 )\n          v66 = 0;\n        *((_DWORD *)v2 + 7) = v66;\n      }\n      v67 = v62 - 1;\n      *((_DWORD *)v2 + 6) = v67;\n      *((_DWORD *)v2 + 273) = v58 + 1;\n      v57 = 1;\n      if ( v58 != v59 )\n      {\n        v68 = (v67 == 1) ^ (unsigned __int8)v63;\n        if ( v68 == v60 )\n        {\n          *((_DWORD *)v2 + 4) = 2;\n          v69 = *(_DWORD *)(v61 + 4LL * v64);\n          v70 = *(_DWORD *)(v61 + 4LL * v64) >> 8;\n          *((_DWORD *)v2 + 15) = v70;\n          if ( !v67 )\n          {\n            v71 = *((signed int *)v2 + 7);\n            v67 = dword_4154C0[v71];\n            *((_DWORD *)v2 + 6) = v67;\n            v72 = v71 + 1;\n            if ( v72 == 512 )\n              v72 = 0;\n            *((_DWORD *)v2 + 7) = v72;\n          }\n          v73 = v67 - 1;\n          *((_DWORD *)v2 + 6) = v73;\n          *((_DWORD *)v2 + 273) = v58 + 2;\n          v57 = 2;\n          if ( v58 + 1 != v59 )\n          {\n            v74 = (v73 == 1) ^ (unsigned __int8)v69;\n            if ( v74 == v60 )\n            {\n              *((_DWORD *)v2 + 4) = 3;\n              v75 = *(_DWORD *)(v61 + 4LL * v70);\n              *((_DWORD *)v2 + 15) = v75 >> 8;\n              if ( !v73 )\n              {\n                v76 = *((signed int *)v2 + 7);\n                v73 = dword_4154C0[v76];\n                *((_DWORD *)v2 + 6) = v73;\n                v77 = v76 + 1;\n                if ( v77 == 512 )\n                  v77 = 0;\n                *((_DWORD *)v2 + 7) = v77;\n              }\n              v78 = v73 - 1;\n              *((_DWORD *)v2 + 6) = v78;\n              *((_DWORD *)v2 + 273) = v58 + 3;\n              v57 = 3;\n              if ( v58 + 2 != v59 )\n              {\n                v79 = (v78 == 1) ^ (unsigned __int8)v75;\n                if ( v79 == v60 )\n                {\n                  v80 = *(_DWORD *)(v61 + 4LL * (v75 >> 8));\n                  *((_DWORD *)v2 + 15) = v80 >> 8;\n                  if ( !v78 )\n                  {\n                    v81 = *((signed int *)v2 + 7);\n                    v78 = dword_4154C0[v81];\n                    *((_DWORD *)v2 + 6) = v78;\n                    v82 = v81 + 1;\n                    if ( v82 == 512 )\n                      v82 = 0;\n                    *((_DWORD *)v2 + 7) = v82;\n                  }\n                  *((_DWORD *)v2 + 6) = v78 - 1;\n                  *((_DWORD *)v2 + 273) = v58 + 4;\n                  v57 = ((v78 == 2) ^ (unsigned __int8)v80) + 4;\n                  *((_DWORD *)v2 + 4) = v57;\n                  v83 = *(_DWORD *)(v61 + 4LL * (v80 >> 8));\n                  v84 = (unsigned __int8)v83;\n                  *((_DWORD *)v2 + 16) = (unsigned __int8)v83;\n                  *((_DWORD *)v2 + 15) = v83 >> 8;\n                  v85 = v78 - 1;\n                  if ( !v85 )\n                  {\n                    v86 = *((signed int *)v2 + 7);\n                    v85 = dword_4154C0[v86];\n                    *((_DWORD *)v2 + 6) = v85;\n                    v87 = v86 + 1;\n                    if ( v87 == 512 )\n                      v87 = 0;\n                    *((_DWORD *)v2 + 7) = v87;\n                  }\n                  v88 = v85 - 1;\n                  *((_DWORD *)v2 + 6) = v88;\n                  *((_DWORD *)v2 + 16) = (v88 == 1) ^ v84;\n                  *((_DWORD *)v2 + 273) = v58 + 5;\n                }\n                else\n                {\n                  *((_DWORD *)v2 + 16) = v79;\n                }\n              }\n            }\n            else\n            {\n              *((_DWORD *)v2 + 16) = v74;\n            }\n          }\n        }\n        else\n        {\n          *((_DWORD *)v2 + 16) = v68;\n        }\n      }\n      if ( !*(_DWORD *)(v56 + 32) )\n        goto LABEL_192;\n    }\n  }\n  v119 = *((_DWORD *)v2 + 796);\n  LOBYTE(v120) = *((_BYTE *)v2 + 12);\n  v121 = *((_DWORD *)v2 + 4);\n  v122 = *((_DWORD *)v2 + 273);\n  v123 = *((_DWORD *)v2 + 16);\n  v124 = v2[394];\n  v125 = *((_DWORD *)v2 + 15);\n  v126 = *(_BYTE **)(*v2 + 24);\n  v127 = *((_DWORD *)v2 + 16020) + 1;\n  v143 = *(_DWORD *)(*v2 + 32);\n  v128 = *(_DWORD *)(*v2 + 32);\n  v144 = v2[394];\nLABEL_169:\n  if ( v121 <= 0 )\n  {\n    v137 = v120;\n    v132 = v122;\n    v120 = v123;\n    if ( v122 > v127 )\n      goto LABEL_208;\n    while ( 1 )\n    {\n      if ( v132 == v127 )\n      {\n        LODWORD(v142) = 0;\n        v122 = v127;\n        v123 = v120;\n        goto LABEL_189;\n      }\n      v134 = *(_DWORD *)(v124 + 4LL * v125);\n      v123 = (unsigned __int8)v134;\n      v125 = v134 >> 8;\n      v122 = v132 + 1;\n      if ( v123 == v120 )\n      {\n        if ( v122 != v127 )\n        {\n          v135 = *(_DWORD *)(v124 + 4LL * v125);\n          v125 = *(_DWORD *)(v124 + 4LL * v125) >> 8;\n          v121 = 2;\n          v122 = v127;\n          v123 = v120;\n          if ( v132 + 2 != v127 )\n          {\n            v123 = (unsigned __int8)v135;\n            v122 = v132 + 2;\n            if ( (unsigned __int8)v135 == v120 )\n            {\n              v136 = *(_DWORD *)(v124 + 4LL * v125);\n              v125 = *(_DWORD *)(v124 + 4LL * v125) >> 8;\n              v121 = 3;\n              v122 = v127;\n              v123 = v120;\n              if ( v132 + 3 != v127 )\n              {\n                v123 = (unsigned __int8)v136;\n                v122 = v132 + 3;\n                if ( (unsigned __int8)v136 == v120 )\n                {\n                  v129 = *(_DWORD *)(v124 + 4LL * v125);\n                  v121 = (unsigned __int8)v129 + 4;\n                  v130 = *(_DWORD *)(v124 + 4LL * (v129 >> 8));\n                  v123 = (unsigned __int8)v130;\n                  v125 = v130 >> 8;\n                  v122 = v132 + 5;\n                }\n              }\n            }\n          }\n          goto LABEL_169;\n        }\n        v122 = v127;\n        v123 = v120;\n      }\nLABEL_178:\n      if ( !v128 )\n      {\n        v128 = 0;\n        LODWORD(v142) = 1;\n        v137 = v120;\n        goto LABEL_189;\n      }\n      *v126 = v120;\n      v133 = (v119 >> 24) ^ (unsigned __int8)v120;\n      ++v126;\n      --v128;\n      v137 = v120;\n      v132 = v122;\n      v120 = v123;\n      v119 = dword_4150C0[v133] ^ (v119 << 8);\n      if ( v122 > v127 )\n        goto LABEL_208;\n    }\n  }\n  LODWORD(v142) = v121;\n  if ( v128 )\n  {\n    v131 = 0LL;\n    do\n    {\n      if ( v121 - 1 == (_DWORD)v131 )\n      {\n        v128 -= v131;\n        v126 += v131;\n        v124 = v144;\n        goto LABEL_178;\n      }\n      v126[v131] = v120;\n      v119 = dword_4150C0[(unsigned __int8)v120 ^ (v119 >> 24)] ^ (v119 << 8);\n      ++v131;\n    }\n    while ( v128 != (_DWORD)v131 );\n    v126 += v131;\n    LODWORD(v142) = v121 - v131;\n    v137 = v120;\n    v128 = 0;\n    v124 = v144;\n  }\n  else\n  {\n    v137 = v120;\n    v128 = 0;\n  }\nLABEL_189:\n  v138 = *v2;\n  v139 = __CFADD__(v143 - v128, *(_DWORD *)(*v2 + 36));\n  *(_DWORD *)(v138 + 36) += v143 - v128;\n  if ( v139 )\n    ++*(_DWORD *)(v138 + 40);\n  *((_DWORD *)v2 + 796) = v119;\n  *((_BYTE *)v2 + 12) = v137;\n  *((_DWORD *)v2 + 4) = v142;\n  *((_DWORD *)v2 + 273) = v122;\n  *((_DWORD *)v2 + 16) = v123;\n  v2[394] = v124;\n  *((_DWORD *)v2 + 15) = v125;\n  *(_QWORD *)(v138 + 24) = v126;\n  *(_DWORD *)(v138 + 32) = v128;\nLABEL_192:\n  result = 0LL;\n  if ( *((_DWORD *)v2 + 273) == *((_DWORD *)v2 + 16020) + 1 && !*((_DWORD *)v2 + 4) )\n  {\n    *((_DWORD *)v2 + 796) = ~*((_DWORD *)v2 + 796);\n    v140 = *((_DWORD *)v2 + 13);\n    if ( v140 >= 3 )\n    {\n      fprintf(stderr, \" {0x%08x, 0x%08x}\", *((unsigned int *)v2 + 794), v142);\n      if ( *((_DWORD *)v2 + 13) >= 2 )\n        goto LABEL_202;\n    }\n    else\n    {\n      if ( v140 < 2 )\n        goto LABEL_196;\nLABEL_202:\n      fputc(93, stderr);\n    }\nLABEL_196:\n    v141 = *((_DWORD *)v2 + 796);\n    if ( v141 == *((_DWORD *)v2 + 794) )\n    {\n      *((_DWORD *)v2 + 797) = v141 ^ __ROL4__(*((_DWORD *)v2 + 797), 1);\n      *((_DWORD *)v2 + 2) = 14;\n      goto LABEL_198;\n    }\nLABEL_208:\n    result = 4294967292LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405930L", 
            "funcEndAddr": "0x40676dL", 
            "funcName": "sub_405930"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_4067F0(_DWORD *a1, int a2, int a3, unsigned int a4, unsigned int a5)\n{\n  unsigned int v5; // ebp\n  int v6; // er12\n  int v7; // er15\n  _DWORD *v8; // rax\n  _DWORD *v9; // rbx\n  unsigned int v10; // ecx\n  int v11; // eax\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  if ( a1 )\n    *a1 = 0;\n  if ( a4 <= 4 && a5 <= 0xFA && a2 && (unsigned int)(a3 - 1) < 9 )\n  {\n    v8 = malloc(0x13F0uLL);\n    v9 = v8;\n    if ( v8 )\n    {\n      if ( a1 )\n        *a1 = 0;\n      v8[1274] = 0;\n      *((_BYTE *)v8 + 5100) = 0;\n      v8[1251] = 0;\n      *v8 = a2;\n      *((_BYTE *)v8 + 5008) = 1;\n      v10 = 30;\n      if ( v5 )\n        v10 = v5;\n      *((_OWORD *)v8 + 317) = 0LL;\n      *((_QWORD *)v8 + 636) = 0LL;\n      v11 = sub_404F70((_QWORD *)v8 + 627, v7, v6, v10);\n      if ( !v11 )\n      {\n        v9[1256] = 0;\n        *((_BYTE *)v9 + 5100) = 1;\n        return v9;\n      }\n      if ( a1 )\n        *a1 = v11;\n      free(v9);\n    }\n    else if ( a1 )\n    {\n      *a1 = -3;\n    }\n  }\n  else if ( a1 )\n  {\n    *a1 = -2;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4067f0L", 
            "funcEndAddr": "0x406914L", 
            "funcName": "sub_4067F0"
        }, 
        {
            "decompiledFuncCode": "char __usercall sub_406920@<al>(__int64 a1@<rax>, __int64 a2@<rdx>, int a3@<ecx>, signed int *a4@<rdi>, __int64 a5@<rsi>)\n{\n  signed int v5; // er13\n  int v6; // ebp\n  signed int v7; // ecx\n\n  if ( a4 )\n    *a4 = 0;\n  if ( a5 && (*(_DWORD *)(a5 + 5096) = 0, a2) && a3 >= 0 )\n  {\n    if ( *(_BYTE *)(a5 + 5008) )\n    {\n      if ( a3 )\n      {\n        *(_DWORD *)(a5 + 5024) = a3;\n        *(_QWORD *)(a5 + 5016) = a2;\n        *(_DWORD *)(a5 + 5048) = 5000;\n        *(_QWORD *)(a5 + 5040) = a5 + 4;\n        a1 = *(_QWORD *)(a5 + 5064);\n        v5 = -2;\n        if ( a1 )\n        {\n          while ( *(_QWORD *)a1 == a5 + 5016 )\n          {\n            LODWORD(a1) = *(_DWORD *)(a1 + 8);\n            if ( (_DWORD)a1 != 2 )\n            {\n              v5 = 0;\n              if ( (unsigned int)a1 <= 4 )\n              {\n                v7 = 26;\n                if ( _bittest(&v7, a1) )\n                  v5 = -1;\n              }\n              break;\n            }\n            LOBYTE(a1) = sub_405380(a5 + 5016);\n            if ( !(_BYTE)a1 )\n              break;\n            a1 = *(unsigned int *)(a5 + 5048);\n            if ( (unsigned int)a1 <= 0x1387 )\n            {\n              v6 = 5000 - a1;\n              LODWORD(a1) = sub_401620((void *)(a5 + 4), a1, 5000 - (signed int)a1, *(_DWORD *)a5, 1u);\n              if ( v6 != (_DWORD)a1 )\n              {\n                if ( a4 )\n                  *a4 = -6;\n                *(_DWORD *)(a5 + 5096) = -6;\n                return a1;\n              }\n            }\n            if ( !*(_DWORD *)(a5 + 5024) )\n              goto LABEL_24;\n            *(_DWORD *)(a5 + 5048) = 5000;\n            *(_QWORD *)(a5 + 5040) = a5 + 4;\n            a1 = *(_QWORD *)(a5 + 5064);\n            if ( !a1 )\n              break;\n          }\n        }\n        if ( a4 )\n          *a4 = v5;\n        *(_DWORD *)(a5 + 5096) = v5;\n      }\n      else\n      {\nLABEL_24:\n        if ( a4 )\n          *a4 = 0;\n        *(_DWORD *)(a5 + 5096) = 0;\n      }\n    }\n    else\n    {\n      if ( a4 )\n        *a4 = -1;\n      *(_DWORD *)(a5 + 5096) = -1;\n    }\n  }\n  else\n  {\n    if ( a4 )\n      *a4 = -2;\n    if ( a5 )\n      *(_DWORD *)(a5 + 5096) = -2;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x406920L", 
            "funcEndAddr": "0x406ad5L", 
            "funcName": "sub_406920"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_406B00(signed int *a1, __int64 a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)\n{\n  _DWORD *v7; // r15\n  _DWORD *v8; // r12\n  _DWORD *v9; // r13\n  _DWORD *v10; // rbx\n  signed int *v11; // r14\n  _DWORD *v12; // rcx\n  _QWORD *v13; // rbp\n  signed __int64 v14; // rdx\n  __int64 v15; // rbp\n  __int64 v16; // rsi\n  signed int v17; // eax\n  signed int v18; // edi\n  signed int v19; // er8\n  __int64 v20; // rax\n  int v21; // ST1C_4\n  signed int v22; // ebp\n  int v23; // eax\n  _DWORD *v24; // [rsp+10h] [rbp-48h]\n  void *src; // [rsp+20h] [rbp-38h]\n\n  v7 = a6;\n  v8 = a5;\n  v9 = a4;\n  v10 = (_DWORD *)a2;\n  v11 = a1;\n  if ( a2 )\n  {\n    if ( *(_BYTE *)(a2 + 5008) )\n    {\n      v12 = a7;\n      if ( v9 )\n        *v9 = 0;\n      if ( a5 )\n        *a5 = 0;\n      if ( a6 )\n        *a6 = 0;\n      if ( a7 )\n        *a7 = 0;\n      if ( a3 || *(_DWORD *)(a2 + 5096) )\n      {\nLABEL_13:\n        if ( v9 )\n          *v9 = v10[1257];\n        if ( v8 )\n          *v8 = v10[1258];\n        if ( v7 )\n          *v7 = v10[1263];\n        if ( v12 )\n          *v12 = v10[1264];\n        if ( v11 )\n          *v11 = 0;\n        v10[1274] = 0;\n        v13 = (_QWORD *)*((_QWORD *)v10 + 633);\n        if ( v13 && (_DWORD *)*v13 == v10 + 1254 )\n        {\n          if ( v13[3] )\n            (*((void (__fastcall **)(_QWORD))v10 + 635))(*((_QWORD *)v10 + 636));\n          if ( v13[4] )\n            (*((void (__fastcall **)(_QWORD))v10 + 635))(*((_QWORD *)v10 + 636));\n          if ( v13[5] )\n            (*((void (__fastcall **)(_QWORD))v10 + 635))(*((_QWORD *)v10 + 636));\n          (*((void (__fastcall **)(_QWORD, _QWORD))v10 + 635))(*((_QWORD *)v10 + 636), *((_QWORD *)v10 + 633));\n        }\n        free(v10);\n      }\n      else\n      {\n        *(_DWORD *)(a2 + 5048) = 5000;\n        v14 = a2 + 4;\n        *(_QWORD *)(a2 + 5040) = a2 + 4;\n        v15 = *(_QWORD *)(a2 + 5064);\n        if ( v15 )\n        {\n          v16 = a2 + 5016;\n          while ( *(_QWORD *)v15 == v16 )\n          {\n            v17 = *(_DWORD *)(v15 + 8);\n            if ( v17 == 2 )\n            {\n              *(_DWORD *)(v15 + 16) = v10[1256];\n              *(_DWORD *)(v15 + 8) = 4;\n              v17 = 4;\n            }\n            if ( v17 == 1 || v17 == 3 )\n            {\n              v18 = -1;\n              if ( v11 )\n                goto LABEL_66;\n              goto LABEL_67;\n            }\n            if ( v17 != 4 )\n            {\n              v18 = 0;\nLABEL_65:\n              if ( !v11 )\n                goto LABEL_67;\n              goto LABEL_66;\n            }\n            v18 = -1;\n            if ( *(_DWORD *)(v15 + 16) != v10[1256] )\n              goto LABEL_65;\n            src = (void *)v14;\n            v24 = v12;\n            v18 = -1;\n            if ( !sub_405380(v16) )\n              goto LABEL_65;\n            v19 = 3;\n            if ( *(_DWORD *)(v15 + 16) )\n            {\n              v12 = v24;\n            }\n            else\n            {\n              v12 = v24;\n              if ( (*(_DWORD *)(v15 + 92) > 0xFFu || *(_DWORD *)(v15 + 96) <= 0)\n                && *(_DWORD *)(v15 + 120) >= *(_DWORD *)(v15 + 116) )\n              {\n                *(_DWORD *)(v15 + 8) = 1;\n                v19 = 4;\n              }\n            }\n            v20 = (unsigned int)v10[1262];\n            if ( (unsigned int)v20 <= 0x1387 )\n            {\n              v21 = 5000 - v20;\n              v22 = v19;\n              v23 = sub_401620(src, v20, 5000 - (signed int)v20, *v10, 1u);\n              v19 = v22;\n              v12 = v24;\n              if ( v21 != v23 )\n              {\n                if ( v11 )\n                  *v11 = -6;\n                v10[1274] = -6;\n                return;\n              }\n            }\n            if ( v19 == 4 )\n              goto LABEL_13;\n            v10[1262] = 5000;\n            v14 = (signed __int64)src;\n            *((_QWORD *)v10 + 630) = src;\n            v15 = *((_QWORD *)v10 + 633);\n            if ( !v15 )\n              break;\n          }\n        }\n        v18 = -2;\n        if ( v11 )\nLABEL_66:\n          *v11 = v18;\nLABEL_67:\n        v10[1274] = v18;\n      }\n    }\n    else\n    {\n      if ( a1 )\n        *a1 = -1;\n      *(_DWORD *)(a2 + 5096) = -1;\n    }\n  }\n  else if ( a1 )\n  {\n    *a1 = 0;\n  }\n}\n", 
            "funcStartAddr": "0x406b00L", 
            "funcEndAddr": "0x406e3bL", 
            "funcName": "sub_406B00"
        }, 
        {
            "decompiledFuncCode": "void *(__fastcall **__fastcall sub_406E40(_DWORD *a1, int a2, unsigned int a3, unsigned int a4, char *a5, unsigned int a6))(__int64 a1, int a2, int a3)\n{\n  signed int v6; // ebp\n  char *v7; // rbx\n  unsigned int v8; // er15\n  void *(__fastcall **v9)(__int64, int, int); // r13\n  void *(__fastcall **v11)(__int64, int, int); // rax\n  void *(__fastcall **v12)(__int64, int, int); // rax\n  int v13; // ebp\n  int v14; // ecx\n  void *(__fastcall *v15)(__int64, int, int); // rcx\n  __int64 v16; // rax\n  char v17; // [rsp+0h] [rbp-34h]\n\n  v6 = a6;\n  v7 = a5;\n  v8 = a3;\n  if ( a1 )\n    *a1 = 0;\n  if ( a2 && a3 <= 4 && a4 <= 1 && (a5 || !a6) && (!a5 || a6 < 0x1389) )\n  {\n    v17 = a4;\n    v11 = (void *(__fastcall **)(__int64, int, int))malloc(0x13F0uLL);\n    v9 = v11;\n    if ( v11 )\n    {\n      if ( a1 )\n        *a1 = 0;\n      *((_DWORD *)v11 + 1274) = 0;\n      *((_BYTE *)v11 + 5100) = 0;\n      *(_DWORD *)v11 = a2;\n      *((_DWORD *)v11 + 1251) = 0;\n      *((_BYTE *)v11 + 5008) = 0;\n      v12 = v11 + 634;\n      *((_OWORD *)v9 + 317) = 0LL;\n      v9[636] = 0LL;\n      if ( v6 <= 0 )\n        goto LABEL_33;\n      v13 = v6 + 1;\n      v14 = 0;\n      do\n      {\n        *((_BYTE *)v9 + v14 + 4) = *v7;\n        v14 = *((_DWORD *)v9 + 1251) + 1;\n        *((_DWORD *)v9 + 1251) = v14;\n        ++v7;\n        --v13;\n      }\n      while ( v13 > 1 );\n      v15 = *v12;\n      if ( !*v12 )\n      {\nLABEL_33:\n        *v12 = sub_4051F0;\n        v15 = sub_4051F0;\n      }\n      if ( !v9[635] )\n        v9[635] = (void *(__fastcall *)(__int64, int, int))sub_405200;\n      v16 = (__int64)v15((__int64)v9[636], 64144, 1);\n      if ( v16 )\n      {\n        *(_QWORD *)v16 = v9 + 627;\n        v9[633] = (void *(__fastcall *)(__int64, int, int))v16;\n        *(_DWORD *)(v16 + 8) = 10;\n        *(_QWORD *)(v16 + 32) = 0LL;\n        *(_DWORD *)(v16 + 3188) = 0;\n        *(void *(__fastcall **)(__int64, int, int))((char *)v9 + 5028) = 0LL;\n        *(void *(__fastcall **)(__int64, int, int))((char *)v9 + 5052) = 0LL;\n        *(_BYTE *)(v16 + 44) = v17;\n        *(_DWORD *)(v16 + 48) = 0;\n        *(_OWORD *)(v16 + 3152) = 0LL;\n        *(_QWORD *)(v16 + 3168) = 0LL;\n        *(_DWORD *)(v16 + 52) = v8;\n        *((_DWORD *)v9 + 1256) = *((_DWORD *)v9 + 1251);\n        v9[627] = (void *(__fastcall *)(__int64, int, int))((char *)v9 + 4);\n        *((_BYTE *)v9 + 5100) = 1;\n        return v9;\n      }\n      if ( a1 )\n        *a1 = -3;\n      free(v9);\n    }\n    else if ( a1 )\n    {\n      *a1 = -3;\n    }\n  }\n  else if ( a1 )\n  {\n    *a1 = -2;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x406e40L", 
            "funcEndAddr": "0x40705dL", 
            "funcName": "sub_406E40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_407060(_DWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // r14\n\n  if ( a1 )\n    *a1 = 0;\n  if ( a2 )\n  {\n    *(_DWORD *)(a2 + 5096) = 0;\n    if ( *(_BYTE *)(a2 + 5008) )\n    {\n      if ( a1 )\n        *a1 = -1;\n      *(_DWORD *)(a2 + 5096) = -1;\n    }\n    else\n    {\n      if ( *(_BYTE *)(a2 + 5100) )\n      {\n        v2 = *(_QWORD **)(a2 + 5064);\n        if ( v2 )\n        {\n          if ( *v2 == a2 + 5016 )\n          {\n            if ( v2[394] )\n              (*(void (__fastcall **)(_QWORD))(a2 + 5080))(*(_QWORD *)(a2 + 5088));\n            if ( v2[395] )\n              (*(void (__fastcall **)(_QWORD))(a2 + 5080))(*(_QWORD *)(a2 + 5088));\n            if ( v2[396] )\n              (*(void (__fastcall **)(_QWORD))(a2 + 5080))(*(_QWORD *)(a2 + 5088));\n            (*(void (__fastcall **)(_QWORD, _QWORD))(a2 + 5080))(*(_QWORD *)(a2 + 5088), *(_QWORD *)(a2 + 5064));\n          }\n        }\n      }\n      free((void *)a2);\n    }\n  }\n  else if ( a1 )\n  {\n    *a1 = 0;\n  }\n}\n", 
            "funcStartAddr": "0x407060L", 
            "funcEndAddr": "0x407143L", 
            "funcName": "sub_407060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407150(_DWORD *a1, __int64 a2, __int64 a3, int a4)\n{\n  unsigned int v4; // er14\n  signed int v6; // er13\n  __int64 v7; // rax\n  int v8; // eax\n  int v9; // eax\n  signed int v10; // ebp\n  __int64 v11; // rax\n  void *dest; // [rsp+0h] [rbp-38h]\n\n  v4 = a4;\n  if ( a1 )\n    *a1 = 0;\n  if ( !a2 || (*(_DWORD *)(a2 + 5096) = 0, !a3) || a4 < 0 )\n  {\n    if ( a1 )\n      *a1 = -2;\n    v4 = 0;\n    if ( a2 )\n      *(_DWORD *)(a2 + 5096) = -2;\n    return v4;\n  }\n  if ( *(_BYTE *)(a2 + 5008) )\n  {\n    if ( a1 )\n      *a1 = -1;\n    *(_DWORD *)(a2 + 5096) = -1;\n    return 0;\n  }\n  if ( !a4 )\n  {\n    if ( a1 )\n      *a1 = 0;\n    *(_DWORD *)(a2 + 5096) = 0;\n    return 0;\n  }\n  *(_DWORD *)(a2 + 5048) = a4;\n  *(_QWORD *)(a2 + 5040) = a3;\n  dest = (void *)(a2 + 4);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      if ( !*(_DWORD *)(a2 + 5024) )\n      {\n        v6 = *(_DWORD *)a2;\n        v7 = sub_4013B0(*(_DWORD *)a2);\n        if ( (_DWORD)v7 != -1 )\n        {\n          sub_401460(v7, v7, v6);\n          v8 = sub_4012B0(dest, 1u, 0x1388u, *(_DWORD *)a2);\n          *(_DWORD *)(a2 + 5004) = v8;\n          *(_DWORD *)(a2 + 5024) = v8;\n          *(_QWORD *)(a2 + 5016) = dest;\n        }\n      }\n      v9 = sub_405930(a2 + 5016);\n      if ( (v9 | 4) != 4 )\n      {\n        if ( a1 )\n          *a1 = v9;\n        *(_DWORD *)(a2 + 5096) = v9;\n        return 0;\n      }\n      if ( v9 )\n      {\n        if ( v9 == 4 )\n        {\n          if ( a1 )\n            *a1 = 4;\n          *(_DWORD *)(a2 + 5096) = 4;\n          v4 -= *(_DWORD *)(a2 + 5048);\n          return v4;\n        }\n        goto LABEL_29;\n      }\n      v10 = *(_DWORD *)a2;\n      v11 = sub_4013B0(*(_DWORD *)a2);\n      if ( (_DWORD)v11 == -1 )\n        break;\n      sub_401460(v11, v11, v10);\n      if ( !*(_DWORD *)(a2 + 5048) )\n        goto LABEL_30;\n    }\n    if ( !*(_DWORD *)(a2 + 5024) )\n      break;\nLABEL_29:\n    if ( !*(_DWORD *)(a2 + 5048) )\n      goto LABEL_30;\n  }\n  if ( !*(_DWORD *)(a2 + 5048) )\n  {\nLABEL_30:\n    if ( a1 )\n      *a1 = 0;\n    *(_DWORD *)(a2 + 5096) = 0;\n    return v4;\n  }\n  if ( a1 )\n    *a1 = -7;\n  *(_DWORD *)(a2 + 5096) = -7;\n  return 0;\n}\n", 
            "funcStartAddr": "0x407150L", 
            "funcEndAddr": "0x407361L", 
            "funcName": "sub_407150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407370(_DWORD *a1, __int64 a2, _QWORD *a3, _DWORD *a4)\n{\n  __int64 result; // rax\n\n  if ( a2 )\n  {\n    if ( *(_DWORD *)(a2 + 5096) == 4 )\n    {\n      if ( a3 && a4 )\n      {\n        if ( a1 )\n          *a1 = 0;\n        *(_DWORD *)(a2 + 5096) = 0;\n        *a4 = *(_DWORD *)(a2 + 5024);\n        result = *(_QWORD *)(a2 + 5016);\n        *a3 = result;\n      }\n      else\n      {\n        if ( a1 )\n          *a1 = -2;\n        *(_DWORD *)(a2 + 5096) = -2;\n      }\n    }\n    else\n    {\n      if ( a1 )\n        *a1 = -1;\n      *(_DWORD *)(a2 + 5096) = -1;\n    }\n  }\n  else if ( a1 )\n  {\n    *a1 = -2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407370L", 
            "funcEndAddr": "0x4073eaL", 
            "funcName": "sub_407370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4073F0(__int64 a1, int *a2, __int64 a3, int a4, int a5, unsigned int a6, unsigned int a7)\n{\n  int v7; // er13\n  __int64 v8; // rbx\n  unsigned int v9; // er15\n  unsigned int v10; // ecx\n  __int64 v12; // rbp\n  signed int v13; // eax\n  __int64 v14; // [rsp+8h] [rbp-80h]\n  int v15; // [rsp+10h] [rbp-78h]\n  __int64 v16; // [rsp+20h] [rbp-68h]\n  int v17; // [rsp+28h] [rbp-60h]\n  __int64 v18; // [rsp+38h] [rbp-50h]\n  __int128 v19; // [rsp+40h] [rbp-48h]\n  __int64 v20; // [rsp+50h] [rbp-38h]\n\n  v7 = a4;\n  v8 = a3;\n  v9 = -2;\n  if ( a7 <= 0xFA && a6 <= 4 && a1 && a2 && a3 && (unsigned int)(a5 - 1) <= 8 )\n  {\n    v10 = 30;\n    if ( a7 )\n      v10 = a7;\n    v19 = 0LL;\n    v20 = 0LL;\n    v9 = sub_404F70(&v14, a5, a6, v10);\n    if ( !v9 )\n    {\n      v14 = v8;\n      v16 = a1;\n      v15 = v7;\n      v17 = *a2;\n      v12 = v18;\n      v9 = -2;\n      if ( v18 )\n      {\n        v9 = -2;\n        if ( *(__int64 **)v18 == &v14 )\n        {\n          v13 = *(_DWORD *)(v18 + 8);\n          if ( v13 == 2 )\n          {\n            *(_DWORD *)(v18 + 16) = v7;\n            *(_DWORD *)(v12 + 8) = 4;\n            v13 = 4;\n          }\n          if ( v13 == 1 || v13 == 3 )\n          {\n            v9 = -1;\n            if ( *(__int64 **)v12 != &v14 )\n              return v9;\n            goto LABEL_28;\n          }\n          if ( v13 == 4 )\n          {\n            v9 = -1;\n            if ( *(_DWORD *)(v12 + 16) == v7 )\n            {\n              if ( sub_405380((__int64)&v14) )\n              {\n                if ( *(_DWORD *)(v12 + 16)\n                  || *(_DWORD *)(v12 + 92) <= 0xFFu && *(_DWORD *)(v12 + 96) > 0\n                  || *(_DWORD *)(v12 + 120) < *(_DWORD *)(v12 + 116) )\n                {\n                  v12 = v18;\n                  v9 = -8;\n                  if ( !v18 )\n                    return v9;\n                }\n                else\n                {\n                  *(_DWORD *)(v12 + 8) = 1;\n                  *a2 -= v17;\n                  v12 = v18;\n                  v9 = 0;\n                  if ( !v18 )\n                    return v9;\n                }\n                if ( *(__int64 **)v12 != &v14 )\n                  return v9;\n                goto LABEL_28;\n              }\n              v12 = v18;\n              v9 = -1;\n              if ( !v18 )\n                return v9;\n            }\n          }\n          else\n          {\n            v9 = 0;\n          }\n        }\n        if ( *(__int64 **)v12 != &v14 )\n          return v9;\nLABEL_28:\n        if ( *(_QWORD *)(v12 + 24) )\n          (*((void (__fastcall **)(__int64))&v19 + 1))(v20);\n        if ( *(_QWORD *)(v12 + 32) )\n          (*((void (__fastcall **)(__int64))&v19 + 1))(v20);\n        if ( *(_QWORD *)(v12 + 40) )\n          (*((void (__fastcall **)(__int64))&v19 + 1))(v20);\n        (*((void (__fastcall **)(__int64, __int64))&v19 + 1))(v20, v18);\n        v18 = 0LL;\n        return v9;\n      }\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x4073f0L", 
            "funcEndAddr": "0x407609L", 
            "funcName": "sub_4073F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407610(__int64 a1, int *a2, __int64 a3, int a4, unsigned int a5, unsigned int a6)\n{\n  unsigned int v6; // er13\n  char v7; // r15\n  int v8; // er12\n  __int64 v9; // rbp\n  __int64 result; // rax\n  __int64 **v11; // rax\n  __int64 v12; // rbx\n  unsigned int v13; // er14\n  __int64 v14; // rbx\n  __int64 v15; // rbx\n  unsigned int v16; // ebp\n  __int64 v17; // [rsp+8h] [rbp-80h]\n  int v18; // [rsp+10h] [rbp-78h]\n  __int64 v19; // [rsp+14h] [rbp-74h]\n  __int64 v20; // [rsp+20h] [rbp-68h]\n  int v21; // [rsp+28h] [rbp-60h]\n  __int64 v22; // [rsp+2Ch] [rbp-5Ch]\n  __int64 **v23; // [rsp+38h] [rbp-50h]\n  void *(__fastcall *v24)(__int64, int, int); // [rsp+40h] [rbp-48h]\n  void (__fastcall *v25)(__int64, void *); // [rsp+48h] [rbp-40h]\n  __int64 v26; // [rsp+50h] [rbp-38h]\n\n  v6 = a6;\n  v7 = a5;\n  v8 = a4;\n  v9 = a3;\n  result = 4294967294LL;\n  if ( a1 && a2 && a3 && a5 <= 1 && a6 <= 4 )\n  {\n    v26 = 0LL;\n    v24 = sub_4051F0;\n    v25 = sub_405200;\n    v11 = (__int64 **)malloc(0xFA90uLL);\n    if ( v11 )\n    {\n      *v11 = &v17;\n      v23 = v11;\n      *((_DWORD *)v11 + 2) = 10;\n      v11[4] = 0LL;\n      *((_DWORD *)v11 + 797) = 0;\n      v19 = 0LL;\n      v22 = 0LL;\n      *((_BYTE *)v11 + 44) = v7;\n      *((_DWORD *)v11 + 12) = 0;\n      *((_OWORD *)v11 + 197) = 0LL;\n      v11[396] = 0LL;\n      *((_DWORD *)v11 + 13) = v6;\n      v17 = v9;\n      v20 = a1;\n      v18 = v8;\n      v21 = *a2;\n      result = sub_405930((__int64)&v17);\n      if ( (_DWORD)result )\n      {\n        if ( (_DWORD)result == 4 )\n        {\n          *a2 -= v21;\n          v12 = (__int64)v23;\n          result = 0LL;\n          if ( v23 && *v23 == &v17 )\n          {\n            if ( v23[394] )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            if ( *(_QWORD *)(v12 + 3160) )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            if ( *(_QWORD *)(v12 + 3168) )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            v25(v26, v23);\n            v23 = 0LL;\n            result = 0LL;\n          }\n        }\n        else\n        {\n          v15 = (__int64)v23;\n          if ( v23 && *v23 == &v17 )\n          {\n            v16 = result;\n            if ( v23[394] )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            if ( *(_QWORD *)(v15 + 3160) )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            if ( *(_QWORD *)(v15 + 3168) )\n              ((void (__fastcall *)(__int64))v25)(v26);\n            v25(v26, v23);\n            result = v16;\n          }\n        }\n      }\n      else\n      {\n        v13 = v21;\n        v14 = (__int64)v23;\n        if ( v23 && *v23 == &v17 )\n        {\n          if ( v23[394] )\n            ((void (__fastcall *)(__int64))v25)(v26);\n          if ( *(_QWORD *)(v14 + 3160) )\n            ((void (__fastcall *)(__int64))v25)(v26);\n          if ( *(_QWORD *)(v14 + 3168) )\n            ((void (__fastcall *)(__int64))v25)(v26);\n          v25(v26, v23);\n          v23 = 0LL;\n        }\n        result = -7 - (unsigned int)(v13 < 1);\n      }\n    }\n    else\n    {\n      result = 4294967293LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407610L", 
            "funcEndAddr": "0x407895L", 
            "funcName": "sub_407610"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_4078B0(_BYTE *a1, char *a2, int a3)\n{\n  int v3; // er15\n  _DWORD *v4; // r13\n  char v5; // al\n  char *v6; // rbp\n  int v7; // er12\n  int v8; // ebx\n  size_t v9; // rax\n  signed __int16 v10; // dx\n  int v12; // er14\n  bool v13; // r15\n  signed int v14; // eax\n  int v15; // ebp\n  _DWORD *v16; // rax\n  char s[8]; // [rsp+8h] [rbp-40h]\n  __int16 v18; // [rsp+10h] [rbp-38h]\n\n  v3 = a3;\n  v18 = 0;\n  *(_QWORD *)s = 0LL;\n  v4 = 0LL;\n  if ( a2 )\n  {\n    v5 = *a2;\n    if ( *a2 )\n    {\n      v6 = a2 + 1;\n      LODWORD(v4) = 0;\n      v7 = 9;\n      do\n      {\n        v8 = v5;\n        if ( v5 == 114 )\n        {\n          LODWORD(v4) = 0;\n        }\n        else if ( v5 != 115 )\n        {\n          if ( v5 == 119 )\n          {\n            LODWORD(v4) = 1;\n          }\n          else if ( (*__ctype_b_loc())[v5] & 0x800 )\n          {\n            v7 = v8 - 48;\n          }\n        }\n        v5 = *v6++;\n      }\n      while ( v5 );\n    }\n    else\n    {\n      v7 = 9;\n    }\n    v9 = strlen(s);\n    v10 = 114;\n    if ( (_DWORD)v4 )\n      v10 = 119;\n    *(_WORD *)&s[v9] = v10;\n    *(_WORD *)&s[strlen(s)] = 98;\n    if ( !v3 && (!a1 || !*a1) )\n    {\n      v12 = 0;\n      v13 = (_DWORD)v4 != 0;\n      if ( (_DWORD)v4 )\n      {\n        v14 = 1;\n        if ( v7 > 0 )\n          v14 = v7;\n        v15 = 9;\n        if ( v14 < 10 )\n          v15 = v14;\n        if ( (unsigned int)(v15 - 1) <= 8 )\n        {\n          v16 = malloc(0x13F0uLL);\n          v4 = v16;\n          if ( v16 )\n          {\n            v16[1274] = 0;\n            *((_BYTE *)v16 + 5100) = 0;\n            LOBYTE(v12) = v13;\n            v16[1251] = 0;\n            *v16 = v12;\n            *((_BYTE *)v16 + 5008) = 1;\n            *((_OWORD *)v16 + 317) = 0LL;\n            *((_QWORD *)v16 + 636) = 0LL;\n            if ( !(unsigned int)sub_404F70((_QWORD *)v16 + 627, v15, 0, 0x1Eu) )\n            {\n              v4[1256] = 0;\n              *((_BYTE *)v4 + 5100) = 1;\n              return v4;\n            }\n            free(v4);\n          }\n        }\n      }\n    }\n    v4 = 0LL;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x4078b0L", 
            "funcEndAddr": "0x407a7aL", 
            "funcName": "sub_4078B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407A80(__int64 a1, _BYTE *a2)\n{\n  int v2; // eax\n  _BYTE *v3; // rsi\n  signed int v4; // ebx\n  signed int v5; // ecx\n  size_t v6; // rax\n  signed __int16 v7; // cx\n  __int64 v9; // [rsp+0h] [rbp-18h]\n  __int16 v10; // [rsp+8h] [rbp-10h]\n\n  v10 = 0;\n  v9 = 0LL;\n  if ( a2 )\n  {\n    LOBYTE(v2) = *a2;\n    if ( *a2 )\n    {\n      v3 = a2 + 1;\n      v4 = 0;\n      do\n      {\n        v5 = v4;\n        v2 = (char)v2;\n        v4 = 0;\n        if ( (char)v2 != 114 )\n        {\n          if ( v2 == 115 || v2 != 119 )\n            v4 = v5;\n          else\n            v4 = 1;\n        }\n        LOBYTE(v2) = *v3++;\n      }\n      while ( (_BYTE)v2 );\n      v6 = strlen((const char *)&v9);\n      v7 = 119;\n      if ( !v4 )\n        v7 = 114;\n    }\n    else\n    {\n      v6 = strlen((const char *)&v9);\n      v7 = 114;\n    }\n    *(_WORD *)((char *)&v9 + v6) = v7;\n    *(_WORD *)((char *)&v9 + strlen((const char *)&v9)) = 98;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x407a80L", 
            "funcEndAddr": "0x407b1bL", 
            "funcName": "sub_407A80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407B70(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // ebx\n  unsigned int v5; // [rsp+Ch] [rbp-Ch]\n\n  v3 = a3;\n  sub_406920(a2, a2, a3, (signed int *)&v5, a1);\n  return v3 | (unsigned int)-(v5 >= 1);\n}\n", 
            "funcStartAddr": "0x407b70L", 
            "funcEndAddr": "0x407ba0L", 
            "funcName": "sub_407B70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407D40(__int64 a1)\n{\n  __int64 v1; // r8\n  __int64 v2; // r10\n  unsigned int v3; // esi\n  int v4; // eax\n  unsigned int v5; // ecx\n  _QWORD *v6; // rcx\n  __int64 result; // rax\n  _DWORD *v8; // rdi\n  __int64 v9; // rax\n  __int64 v10; // rax\n  char v11; // r8\n\n  v1 = *(unsigned int *)(a1 + 92);\n  v2 = *(signed int *)(a1 + 96);\n  if ( v2 > 0 )\n  {\n    v3 = *(_DWORD *)(a1 + 648);\n    if ( (_DWORD)v2 != 1 )\n    {\n      v4 = (*(_DWORD *)(a1 + 96) & 1) - *(_DWORD *)(a1 + 96);\n      do\n      {\n        v5 = dword_4150C0[(unsigned __int8)v1 ^ (v3 >> 24)] ^ (v3 << 8);\n        *(_DWORD *)(a1 + 648) = v5;\n        v3 = dword_4150C0[(unsigned __int8)v1 ^ (v5 >> 24)] ^ (v5 << 8);\n        *(_DWORD *)(a1 + 648) = v3;\n        v4 += 2;\n      }\n      while ( v4 );\n    }\n    if ( v2 & 1 )\n      *(_DWORD *)(a1 + 648) = dword_4150C0[(unsigned __int8)v1 ^ (v3 >> 24)] ^ (v3 << 8);\n  }\n  *(_BYTE *)(a1 + v1 + 128) = 1;\n  switch ( (_DWORD)v2 )\n  {\n    case 3:\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + *(signed int *)(a1 + 108)) = v1;\n      result = *(signed int *)(a1 + 108);\n      *(_DWORD *)(a1 + 108) = result + 1;\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + result + 1) = v1;\n      LODWORD(result) = *(_DWORD *)(a1 + 108) + 1;\n      *(_DWORD *)(a1 + 108) = result;\n      v6 = (_QWORD *)(a1 + 64);\n      v8 = (_DWORD *)(a1 + 108);\n      break;\n    case 2:\n      v6 = (_QWORD *)(a1 + 64);\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + *(signed int *)(a1 + 108)) = v1;\n      LODWORD(result) = *(_DWORD *)(a1 + 108) + 1;\n      *(_DWORD *)(a1 + 108) = result;\n      v8 = (_DWORD *)(a1 + 108);\n      break;\n    case 1:\n      v6 = (_QWORD *)(a1 + 64);\n      LODWORD(result) = *(_DWORD *)(a1 + 108);\n      v8 = (_DWORD *)(a1 + 108);\n      break;\n    default:\n      *(_BYTE *)(a1 + v2 + 124) = 1;\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + *(signed int *)(a1 + 108)) = v1;\n      v9 = *(signed int *)(a1 + 108);\n      *(_DWORD *)(a1 + 108) = v9 + 1;\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + v9 + 1) = v1;\n      v10 = *(signed int *)(a1 + 108);\n      *(_DWORD *)(a1 + 108) = v10 + 1;\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + v10 + 1) = v1;\n      result = *(signed int *)(a1 + 108);\n      *(_DWORD *)(a1 + 108) = result + 1;\n      *(_BYTE *)(*(_QWORD *)(a1 + 64) + result + 1) = v1;\n      LODWORD(result) = *(_DWORD *)(a1 + 108) + 1;\n      *(_DWORD *)(a1 + 108) = result;\n      v6 = (_QWORD *)(a1 + 64);\n      v11 = *(_BYTE *)(a1 + 96);\n      v8 = (_DWORD *)(a1 + 108);\n      LOBYTE(v1) = v11 - 4;\n      break;\n  }\n  result = (signed int)result;\n  *(_BYTE *)(*v6 + (signed int)result) = v1;\n  ++*v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x407d40L", 
            "funcEndAddr": "0x407eb3L", 
            "funcName": "sub_407D40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407ED0(__int64 a1, char a2)\n{\n  char v2; // r14\n  __int64 v3; // r15\n  int v4; // er9\n  int v5; // er8\n  int v6; // ecx\n  __int64 v7; // rax\n  int v8; // esi\n  int v9; // edx\n  int v10; // edi\n  signed int v11; // ecx\n  int v12; // esi\n  int v13; // ebp\n  int v14; // edi\n  signed int v15; // edx\n  int v16; // esi\n  int v17; // eax\n  int v18; // ecx\n  signed int v19; // edx\n  int v20; // edx\n  int v21; // edi\n  int v22; // eax\n  signed int v23; // esi\n  int v24; // eax\n  int v25; // esi\n  int v26; // ecx\n  signed int v27; // edx\n  int v28; // edx\n  int v29; // edi\n  int v30; // eax\n  signed int v31; // esi\n  int v32; // eax\n  int v33; // esi\n  int v34; // ecx\n  signed int v35; // edx\n  int v36; // edx\n  int v37; // eax\n  int v38; // esi\n  signed int v39; // edi\n  __int128 *v40; // r8\n  char *v41; // r9\n  int v42; // edi\n  int v43; // eax\n  int v44; // ecx\n  signed int v45; // edx\n  int v46; // esi\n  int v47; // edx\n  int v48; // ecx\n  signed int v49; // edi\n  signed __int64 v50; // rdx\n  __int64 v51; // r13\n  __int64 v52; // rbp\n  __int64 v53; // r12\n  signed int v54; // er14\n  signed __int64 v55; // rax\n  int v56; // ebx\n  __int64 v57; // rcx\n  unsigned __int64 v58; // rsi\n  __m128i v59; // xmm0\n  unsigned __int64 v60; // rsi\n  signed __int64 v61; // rdi\n  __m128i v62; // xmm8\n  __m128i v63; // xmm9\n  __m128i v64; // xmm10\n  __m128i v65; // xmm4\n  __m128i v66; // xmm5\n  __m128i v67; // xmm6\n  __m128i v68; // xmm7\n  __m128i v69; // xmm1\n  __m128i *v70; // rsi\n  __m128i v71; // xmm1\n  __m128i v72; // xmm2\n  __int64 v73; // rsi\n  int v74; // er14\n  signed __int64 v75; // rdi\n  int v76; // ecx\n  __int64 v77; // rax\n  char v78; // r11\n  char v79; // r10\n  signed int v80; // ecx\n  __int64 v81; // rsi\n  _WORD *v82; // rsi\n  char v83; // bl\n  char *v84; // rsi\n  char v85; // dl\n  int v86; // esi\n  int v87; // ecx\n  __int64 v88; // rdx\n  int v89; // esi\n  int v90; // eax\n  int v91; // ecx\n  signed int v92; // edx\n  int v93; // edx\n  int v94; // edi\n  int v95; // eax\n  signed int v96; // esi\n  int v97; // eax\n  int v98; // esi\n  int v99; // ecx\n  signed int v100; // edx\n  int v101; // edx\n  int v102; // edi\n  int v103; // eax\n  signed int v104; // esi\n  int v105; // eax\n  int v106; // esi\n  int v107; // ecx\n  signed int v108; // edx\n  int v109; // edx\n  int v110; // eax\n  int v111; // esi\n  signed int v112; // edi\n  int v113; // ecx\n  signed int v114; // edx\n  char v116; // [rsp+Ch] [rbp-13Ch]\n  __int128 v117; // [rsp+10h] [rbp-138h]\n  __int128 v118; // [rsp+20h] [rbp-128h]\n  __int128 v119; // [rsp+30h] [rbp-118h]\n  __int128 v120; // [rsp+40h] [rbp-108h]\n  __int128 v121; // [rsp+50h] [rbp-F8h]\n  __int128 v122; // [rsp+60h] [rbp-E8h]\n  __int128 v123; // [rsp+70h] [rbp-D8h]\n  __int128 v124[12]; // [rsp+80h] [rbp-C8h]\n\n  v2 = a2;\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 + 108);\n  if ( v4 > 0 )\n  {\n    v5 = *(_DWORD *)(a1 + 652);\n    v6 = ~*(_DWORD *)(a1 + 648);\n    *(_DWORD *)(a1 + 648) = v6;\n    *(_DWORD *)(a1 + 652) = v6 ^ __ROL4__(v5, 1);\n    if ( *(_DWORD *)(a1 + 660) >= 2 )\n      *(_DWORD *)(a1 + 116) = 0;\n    if ( *(_DWORD *)(a1 + 656) >= 2 )\n      fprintf(stderr, \"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\\n\");\n    sub_401BE0(a1);\n    v4 = *(_DWORD *)(a1 + 108);\n  }\n  v7 = *(_QWORD *)(a1 + 32) + v4;\n  *(_QWORD *)(a1 + 80) = v7;\n  if ( *(_DWORD *)(a1 + 660) == 1 )\n  {\n    *(_QWORD *)(a1 + 640) = 35467034624LL;\n    *(_BYTE *)(v7 + *(signed int *)(a1 + 116)) = 66;\n    LODWORD(v7) = *(_DWORD *)(a1 + 116) + 1;\n    *(_DWORD *)(a1 + 116) = v7;\n    v8 = *(_DWORD *)(a1 + 640) << 8;\n    *(_DWORD *)(a1 + 640) = v8;\n    v9 = *(_DWORD *)(a1 + 644);\n    *(_DWORD *)(a1 + 644) = v9 - 8;\n    if ( v9 >= 16 )\n    {\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 80) + (signed int)v7) = HIBYTE(v8);\n        LODWORD(v7) = *(_DWORD *)(a1 + 116) + 1;\n        *(_DWORD *)(a1 + 116) = v7;\n        v8 = *(_DWORD *)(a1 + 640) << 8;\n        *(_DWORD *)(a1 + 640) = v8;\n        v9 = *(_DWORD *)(a1 + 644);\n        *(_DWORD *)(a1 + 644) = v9 - 8;\n      }\n      while ( v9 > 15 );\n    }\n    v10 = v8 | (90 << (32 - v9));\n    *(_DWORD *)(v3 + 640) = v10;\n    *(_DWORD *)(v3 + 644) = v9;\n    if ( v9 >= 8 )\n    {\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + (signed int)v7) = HIBYTE(v10);\n        LODWORD(v7) = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v7;\n        v10 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v10;\n        v11 = *(_DWORD *)(v3 + 644);\n        v9 = v11 - 8;\n        *(_DWORD *)(v3 + 644) = v11 - 8;\n      }\n      while ( v11 > 15 );\n    }\n    v12 = v10 | (104 << (24 - v9));\n    *(_DWORD *)(v3 + 640) = v12;\n    v13 = v9 + 8;\n    *(_DWORD *)(v3 + 644) = v9 + 8;\n    v14 = (unsigned __int8)(*(unsigned int *)(v3 + 664) + 48);\n    if ( v9 >= 0 )\n    {\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + (signed int)v7) = HIBYTE(v12);\n        LODWORD(v7) = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v7;\n        v12 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v12;\n        v15 = *(_DWORD *)(v3 + 644);\n        v13 = v15 - 8;\n        *(_DWORD *)(v3 + 644) = v15 - 8;\n      }\n      while ( v15 > 15 );\n    }\n    *(_DWORD *)(v3 + 640) = v12 | (v14 << (24 - v13));\n    *(_DWORD *)(v3 + 644) = v13 + 8;\n    v4 = *(_DWORD *)(v3 + 108);\n  }\n  if ( v4 <= 0 )\n    goto LABEL_92;\n  v16 = *(_DWORD *)(v3 + 644);\n  if ( v16 <= 7 )\n  {\n    v17 = *(_DWORD *)(v3 + 640);\n  }\n  else\n  {\n    v17 = *(_DWORD *)(v3 + 640);\n    v18 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v18) = HIBYTE(v17);\n      v18 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v18;\n      v17 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v17;\n      v19 = *(_DWORD *)(v3 + 644);\n      v16 = v19 - 8;\n      *(_DWORD *)(v3 + 644) = v19 - 8;\n    }\n    while ( v19 > 15 );\n  }\n  v20 = v17 | (49 << (24 - v16));\n  *(_DWORD *)(v3 + 640) = v20;\n  v21 = v16 + 8;\n  *(_DWORD *)(v3 + 644) = v16 + 8;\n  if ( v16 >= 0 )\n  {\n    v22 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v22) = HIBYTE(v20);\n      v22 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v22;\n      v20 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v20;\n      v23 = *(_DWORD *)(v3 + 644);\n      v21 = v23 - 8;\n      *(_DWORD *)(v3 + 644) = v23 - 8;\n    }\n    while ( v23 > 15 );\n  }\n  v24 = v20 | (65 << (24 - v21));\n  *(_DWORD *)(v3 + 640) = v24;\n  v25 = v21 + 8;\n  *(_DWORD *)(v3 + 644) = v21 + 8;\n  if ( v21 >= 0 )\n  {\n    v26 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v26) = HIBYTE(v24);\n      v26 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v26;\n      v24 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v24;\n      v27 = *(_DWORD *)(v3 + 644);\n      v25 = v27 - 8;\n      *(_DWORD *)(v3 + 644) = v27 - 8;\n    }\n    while ( v27 > 15 );\n  }\n  v28 = v24 | (89 << (24 - v25));\n  *(_DWORD *)(v3 + 640) = v28;\n  v29 = v25 + 8;\n  *(_DWORD *)(v3 + 644) = v25 + 8;\n  if ( v25 >= 0 )\n  {\n    v30 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v30) = HIBYTE(v28);\n      v30 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v30;\n      v28 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v28;\n      v31 = *(_DWORD *)(v3 + 644);\n      v29 = v31 - 8;\n      *(_DWORD *)(v3 + 644) = v31 - 8;\n    }\n    while ( v31 > 15 );\n  }\n  v32 = v28 | (38 << (24 - v29));\n  *(_DWORD *)(v3 + 640) = v32;\n  v33 = v29 + 8;\n  *(_DWORD *)(v3 + 644) = v29 + 8;\n  if ( v29 >= 0 )\n  {\n    v34 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v34) = HIBYTE(v32);\n      v34 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v34;\n      v32 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v32;\n      v35 = *(_DWORD *)(v3 + 644);\n      v33 = v35 - 8;\n      *(_DWORD *)(v3 + 644) = v35 - 8;\n    }\n    while ( v35 > 15 );\n  }\n  v36 = v32 | (83 << (24 - v33));\n  *(_DWORD *)(v3 + 640) = v36;\n  v37 = v33 + 8;\n  *(_DWORD *)(v3 + 644) = v33 + 8;\n  if ( v33 >= 0 )\n  {\n    v38 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v38) = HIBYTE(v36);\n      v38 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v38;\n      v36 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v36;\n      v39 = *(_DWORD *)(v3 + 644);\n      v37 = v39 - 8;\n      *(_DWORD *)(v3 + 644) = v39 - 8;\n    }\n    while ( v39 > 15 );\n  }\n  *(_DWORD *)(v3 + 640) = v36 | (89 << (24 - v37));\n  *(_DWORD *)(v3 + 644) = v37 + 8;\n  sub_408C20(v3, *(unsigned int *)(v3 + 648));\n  v42 = *(_DWORD *)(v3 + 644);\n  if ( v42 <= 7 )\n  {\n    v43 = *(_DWORD *)(v3 + 640);\n  }\n  else\n  {\n    v43 = *(_DWORD *)(v3 + 640);\n    v44 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v44) = HIBYTE(v43);\n      v44 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v44;\n      v43 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v43;\n      v45 = *(_DWORD *)(v3 + 644);\n      v42 = v45 - 8;\n      *(_DWORD *)(v3 + 644) = v45 - 8;\n    }\n    while ( v45 > 15 );\n  }\n  *(_DWORD *)(v3 + 640) = v43;\n  v46 = v42 + 1;\n  *(_DWORD *)(v3 + 644) = v42 + 1;\n  v47 = *(_DWORD *)(v3 + 48);\n  v116 = v2;\n  if ( v42 >= 7 )\n  {\n    v48 = *(_DWORD *)(v3 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v3 + 80) + v48) = HIBYTE(v43);\n      v48 = *(_DWORD *)(v3 + 116) + 1;\n      *(_DWORD *)(v3 + 116) = v48;\n      v43 = *(_DWORD *)(v3 + 640) << 8;\n      *(_DWORD *)(v3 + 640) = v43;\n      v49 = *(_DWORD *)(v3 + 644);\n      v46 = v49 - 8;\n      *(_DWORD *)(v3 + 644) = v49 - 8;\n    }\n    while ( v49 > 15 );\n  }\n  v50 = v43 | (unsigned int)(v47 << (8 - v46));\n  *(_DWORD *)(v3 + 640) = v50;\n  *(_DWORD *)(v3 + 644) = v46 + 24;\n  v51 = *(_QWORD *)(v3 + 56);\n  v52 = *(_QWORD *)(v3 + 64);\n  v53 = *(_QWORD *)(v3 + 72);\n  *(_DWORD *)(v3 + 124) = 0;\n  v54 = 0;\n  v55 = -256LL;\n  do\n  {\n    if ( *(_BYTE *)(v3 + v55 + 384) )\n    {\n      *(_BYTE *)(v3 + v55 + 640) = v54++;\n      *(_DWORD *)(v3 + 124) = v54;\n    }\n    if ( *(_BYTE *)(v3 + v55 + 385) )\n    {\n      *(_BYTE *)(v3 + v55 + 641) = v54++;\n      *(_DWORD *)(v3 + 124) = v54;\n    }\n    v55 += 2LL;\n  }\n  while ( v55 );\n  v56 = v54 + 1;\n  if ( v54 < -1 )\n    goto LABEL_64;\n  memset((void *)(v3 + 672), 0, 4LL * (unsigned int)v56 + 4);\n  if ( v54 <= 0 )\n    goto LABEL_64;\n  if ( (unsigned int)v54 < 0x20 )\n  {\n    v57 = 0LL;\n    goto LABEL_63;\n  }\n  v57 = v54 & 0xFFFFFFE0;\n  v58 = (unsigned __int64)(v57 - 32) >> 5;\n  v50 = ((_BYTE)v58 + 1) & 3;\n  if ( (unsigned __int64)(v57 - 32) < 0x60 )\n  {\n    v59 = _mm_load_si128((const __m128i *)&xmmword_412A70);\n    v60 = 0LL;\n    if ( !v50 )\n      goto LABEL_62;\n    goto LABEL_60;\n  }\n  v61 = v50 - 1 - v58;\n  v59 = _mm_load_si128((const __m128i *)&xmmword_412A70);\n  v60 = 0LL;\n  v62 = _mm_load_si128((const __m128i *)&xmmword_412A80);\n  v63 = _mm_load_si128((const __m128i *)&xmmword_412A90);\n  v64 = _mm_load_si128((const __m128i *)&xmmword_412AA0);\n  v65 = _mm_load_si128((const __m128i *)&xmmword_412AB0);\n  v66 = _mm_load_si128((const __m128i *)&xmmword_412AC0);\n  v67 = _mm_load_si128((const __m128i *)&xmmword_412AD0);\n  v68 = _mm_load_si128((const __m128i *)&xmmword_412AE0);\n  v69 = _mm_load_si128((const __m128i *)&xmmword_412AF0);\n  do\n  {\n    _mm_store_si128((__m128i *)((char *)&v117 + v60), v59);\n    _mm_store_si128((__m128i *)((char *)&v118 + v60), _mm_add_epi8(v59, v62));\n    _mm_store_si128((__m128i *)((char *)&v119 + v60), _mm_add_epi8(v59, v63));\n    _mm_store_si128((__m128i *)((char *)&v120 + v60), _mm_add_epi8(v59, v64));\n    _mm_store_si128((__m128i *)((char *)&v121 + v60), _mm_add_epi8(v59, v65));\n    _mm_store_si128((__m128i *)((char *)&v122 + v60), _mm_add_epi8(v59, v66));\n    _mm_store_si128((__m128i *)((char *)&v123 + v60), _mm_add_epi8(v59, v67));\n    _mm_store_si128((__m128i *)&v124[v60 / 0x10], _mm_add_epi8(v59, v68));\n    v60 += 128LL;\n    v59 = _mm_xor_si128(v59, v69);\n    v61 += 4LL;\n  }\n  while ( v61 );\n  if ( v50 )\n  {\nLABEL_60:\n    v70 = (__m128i *)((char *)&v118 + v60);\n    v50 = -v50;\n    v71 = _mm_load_si128((const __m128i *)&xmmword_412A80);\n    v72 = _mm_load_si128((const __m128i *)&xmmword_412A90);\n    do\n    {\n      _mm_store_si128(v70 - 1, v59);\n      _mm_store_si128(v70, _mm_add_epi8(v59, v71));\n      v59 = _mm_add_epi8(v59, v72);\n      v70 += 2;\n      ++v50;\n    }\n    while ( v50 );\n  }\nLABEL_62:\n  while ( v54 != v57 )\n  {\nLABEL_63:\n    *((_BYTE *)&v117 + v57) = v57;\n    ++v57;\n  }\nLABEL_64:\n  v73 = *(unsigned int *)(v3 + 108);\n  if ( (signed int)v73 <= 0 )\n  {\n    LODWORD(v77) = 0;\n    goto LABEL_90;\n  }\n  v74 = v54 + 1;\n  v75 = 0LL;\n  v41 = (char *)&v117 + 1;\n  v40 = &v117;\n  v76 = 0;\n  LODWORD(v77) = 0;\n  do\n  {\n    v78 = *(_BYTE *)(v3\n                   + *(unsigned __int8 *)(v52\n                                        + (signed int)((v73 & ((*(_DWORD *)(v51 + 4 * v75) - 1) >> 31))\n                                                     + *(_DWORD *)(v51 + 4 * v75)\n                                                     - 1))\n                   + 384);\n    v79 = v117;\n    if ( (_BYTE)v117 == v78 )\n    {\n      ++v76;\n      goto LABEL_80;\n    }\n    if ( v76 > 0 )\n    {\n      v80 = v76 - 1;\n      v81 = (signed int)v77;\n      LODWORD(v77) = v77 + 1;\n      v82 = (_WORD *)(v53 + 2 * v81);\n      if ( !(v80 & 1) )\n        goto LABEL_72;\n      while ( 1 )\n      {\n        *v82 = 1;\n        ++*(_DWORD *)(v3 + 676);\n        if ( v80 < 2 )\n          break;\n        while ( 1 )\n        {\n          v80 = (signed int)(v80 + ((unsigned int)(v80 - 2) >> 31) - 2) >> 1;\n          LODWORD(v77) = v77 + 1;\n          ++v82;\n          if ( v80 & 1 )\n            break;\nLABEL_72:\n          *v82 = 0;\n          ++*(_DWORD *)(v3 + 672);\n          if ( v80 < 2 )\n            goto LABEL_75;\n        }\n      }\nLABEL_75:\n      v76 = 0;\n      v79 = v117;\n    }\n    v83 = BYTE1(v117);\n    BYTE1(v117) = v79;\n    v84 = (char *)&v117 + 1;\n    if ( v78 != v83 )\n    {\n      v84 = (char *)&v117 + 1;\n      do\n      {\n        v85 = v84[1];\n        (v84++)[1] = v83;\n        v83 = v85;\n      }\n      while ( v78 != v85 );\n    }\n    v86 = (_DWORD)v84 - (unsigned __int64)&v117;\n    LOBYTE(v117) = v78;\n    v77 = (signed int)v77;\n    *(_WORD *)(v53 + 2 * v77) = v86 + 1;\n    ++*(_DWORD *)(v3 + 4LL * v86 + 676);\n    LODWORD(v77) = v77 + 1;\n    v73 = *(unsigned int *)(v3 + 108);\nLABEL_80:\n    ++v75;\n    v50 = (signed int)v73;\n  }\n  while ( v75 < (signed int)v73 );\n  v56 = v74;\n  if ( v76 <= 0 )\n  {\nLABEL_90:\n    v2 = v116;\n    goto LABEL_91;\n  }\n  v87 = v76 - 1;\n  v88 = (signed int)v77;\n  LODWORD(v77) = v77 + 1;\n  v50 = v53 + 2 * v88;\n  v2 = v116;\n  if ( !(v87 & 1) )\n    goto LABEL_85;\n  while ( 1 )\n  {\n    *(_WORD *)v50 = 1;\n    ++*(_DWORD *)(v3 + 676);\n    if ( v87 < 2 )\n      break;\n    while ( 1 )\n    {\n      v73 = (unsigned int)(v87 - 2) >> 31;\n      v87 = (v87 + (signed int)v73 - 2) >> 1;\n      LODWORD(v77) = v77 + 1;\n      v50 += 2LL;\n      if ( v87 & 1 )\n        break;\nLABEL_85:\n      *(_WORD *)v50 = 0;\n      ++*(_DWORD *)(v3 + 672);\n      if ( v87 < 2 )\n        goto LABEL_91;\n    }\n  }\nLABEL_91:\n  v77 = (signed int)v77;\n  *(_WORD *)(v53 + 2 * v77) = v56;\n  ++*(_DWORD *)(v3 + 4LL * v56 + 672);\n  *(_DWORD *)(v3 + 668) = v77 + 1;\n  LODWORD(v7) = sub_408DF0(v3, v73, v50, v56, v40, v41);\nLABEL_92:\n  if ( v2 )\n  {\n    v89 = *(_DWORD *)(v3 + 644);\n    if ( v89 <= 7 )\n    {\n      v90 = *(_DWORD *)(v3 + 640);\n    }\n    else\n    {\n      v90 = *(_DWORD *)(v3 + 640);\n      v91 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v91) = HIBYTE(v90);\n        v91 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v91;\n        v90 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v90;\n        v92 = *(_DWORD *)(v3 + 644);\n        v89 = v92 - 8;\n        *(_DWORD *)(v3 + 644) = v92 - 8;\n      }\n      while ( v92 > 15 );\n    }\n    v93 = v90 | (23 << (24 - v89));\n    *(_DWORD *)(v3 + 640) = v93;\n    v94 = v89 + 8;\n    *(_DWORD *)(v3 + 644) = v89 + 8;\n    if ( v89 >= 0 )\n    {\n      v95 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v95) = HIBYTE(v93);\n        v95 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v95;\n        v93 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v93;\n        v96 = *(_DWORD *)(v3 + 644);\n        v94 = v96 - 8;\n        *(_DWORD *)(v3 + 644) = v96 - 8;\n      }\n      while ( v96 > 15 );\n    }\n    v97 = v93 | (114 << (24 - v94));\n    *(_DWORD *)(v3 + 640) = v97;\n    v98 = v94 + 8;\n    *(_DWORD *)(v3 + 644) = v94 + 8;\n    if ( v94 >= 0 )\n    {\n      v99 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v99) = HIBYTE(v97);\n        v99 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v99;\n        v97 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v97;\n        v100 = *(_DWORD *)(v3 + 644);\n        v98 = v100 - 8;\n        *(_DWORD *)(v3 + 644) = v100 - 8;\n      }\n      while ( v100 > 15 );\n    }\n    v101 = v97 | (69 << (24 - v98));\n    *(_DWORD *)(v3 + 640) = v101;\n    v102 = v98 + 8;\n    *(_DWORD *)(v3 + 644) = v98 + 8;\n    if ( v98 >= 0 )\n    {\n      v103 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v103) = HIBYTE(v101);\n        v103 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v103;\n        v101 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v101;\n        v104 = *(_DWORD *)(v3 + 644);\n        v102 = v104 - 8;\n        *(_DWORD *)(v3 + 644) = v104 - 8;\n      }\n      while ( v104 > 15 );\n    }\n    v105 = v101 | (56 << (24 - v102));\n    *(_DWORD *)(v3 + 640) = v105;\n    v106 = v102 + 8;\n    *(_DWORD *)(v3 + 644) = v102 + 8;\n    if ( v102 >= 0 )\n    {\n      v107 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v107) = HIBYTE(v105);\n        v107 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v107;\n        v105 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v105;\n        v108 = *(_DWORD *)(v3 + 644);\n        v106 = v108 - 8;\n        *(_DWORD *)(v3 + 644) = v108 - 8;\n      }\n      while ( v108 > 15 );\n    }\n    v109 = v105 | (80 << (24 - v106));\n    *(_DWORD *)(v3 + 640) = v109;\n    v110 = v106 + 8;\n    *(_DWORD *)(v3 + 644) = v106 + 8;\n    if ( v106 >= 0 )\n    {\n      v111 = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + v111) = HIBYTE(v109);\n        v111 = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v111;\n        v109 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v109;\n        v112 = *(_DWORD *)(v3 + 644);\n        v110 = v112 - 8;\n        *(_DWORD *)(v3 + 644) = v112 - 8;\n      }\n      while ( v112 > 15 );\n    }\n    *(_DWORD *)(v3 + 640) = v109 | (144 << (24 - v110));\n    *(_DWORD *)(v3 + 644) = v110 + 8;\n    LODWORD(v7) = sub_408C20(v3, *(unsigned int *)(v3 + 652));\n    if ( *(_DWORD *)(v3 + 656) >= 2 )\n    {\n      LODWORD(v7) = fprintf(stderr, \"    final combined CRC = 0x%08x\\n   \", *(unsigned int *)(v3 + 652));\n      if ( *(_DWORD *)(v3 + 644) > 0 )\n        goto LABEL_115;\n    }\n    else if ( *(_DWORD *)(v3 + 644) > 0 )\n    {\nLABEL_115:\n      v113 = *(_DWORD *)(v3 + 640);\n      LODWORD(v7) = *(_DWORD *)(v3 + 116);\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v3 + 80) + (signed int)v7) = HIBYTE(v113);\n        LODWORD(v7) = *(_DWORD *)(v3 + 116) + 1;\n        *(_DWORD *)(v3 + 116) = v7;\n        v113 = *(_DWORD *)(v3 + 640) << 8;\n        *(_DWORD *)(v3 + 640) = v113;\n        v114 = *(_DWORD *)(v3 + 644);\n        *(_DWORD *)(v3 + 644) = v114 - 8;\n      }\n      while ( v114 > 8 );\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x407ed0L", 
            "funcEndAddr": "0x408c12L", 
            "funcName": "sub_407ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408C20(__int64 a1, unsigned int a2)\n{\n  unsigned int v2; // er9\n  unsigned int v3; // eax\n  int v4; // ebx\n  int v5; // esi\n  int v6; // ecx\n  signed int v7; // edx\n  int v8; // eax\n  int v9; // er8\n  int v10; // ebx\n  signed int v11; // edx\n  int v12; // esi\n  __int64 result; // rax\n  int v14; // ecx\n  signed int v15; // edx\n  int v16; // ebx\n  int v17; // esi\n  signed int v18; // ecx\n\n  v2 = a2;\n  v3 = a2 >> 24;\n  v4 = *(_DWORD *)(a1 + 644);\n  if ( v4 <= 7 )\n  {\n    v5 = *(_DWORD *)(a1 + 640);\n  }\n  else\n  {\n    v5 = *(_DWORD *)(a1 + 640);\n    v6 = *(_DWORD *)(a1 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 80) + v6) = HIBYTE(v5);\n      v6 = *(_DWORD *)(a1 + 116) + 1;\n      *(_DWORD *)(a1 + 116) = v6;\n      v5 = *(_DWORD *)(a1 + 640) << 8;\n      *(_DWORD *)(a1 + 640) = v5;\n      v7 = *(_DWORD *)(a1 + 644);\n      v4 = v7 - 8;\n      *(_DWORD *)(a1 + 644) = v7 - 8;\n    }\n    while ( v7 > 15 );\n  }\n  v8 = v5 | (v3 << (24 - v4));\n  *(_DWORD *)(a1 + 640) = v8;\n  v9 = v4 + 8;\n  *(_DWORD *)(a1 + 644) = v4 + 8;\n  if ( v4 >= 0 )\n  {\n    v10 = *(_DWORD *)(a1 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 80) + v10) = HIBYTE(v8);\n      v10 = *(_DWORD *)(a1 + 116) + 1;\n      *(_DWORD *)(a1 + 116) = v10;\n      v8 = *(_DWORD *)(a1 + 640) << 8;\n      *(_DWORD *)(a1 + 640) = v8;\n      v11 = *(_DWORD *)(a1 + 644);\n      v9 = v11 - 8;\n      *(_DWORD *)(a1 + 644) = v11 - 8;\n    }\n    while ( v11 > 15 );\n  }\n  v12 = v8 | (BYTE2(v2) << (24 - v9));\n  *(_DWORD *)(a1 + 640) = v12;\n  result = (unsigned int)(v9 + 8);\n  *(_DWORD *)(a1 + 644) = result;\n  if ( v9 >= 0 )\n  {\n    v14 = *(_DWORD *)(a1 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 80) + v14) = HIBYTE(v12);\n      v14 = *(_DWORD *)(a1 + 116) + 1;\n      *(_DWORD *)(a1 + 116) = v14;\n      v12 = *(_DWORD *)(a1 + 640) << 8;\n      *(_DWORD *)(a1 + 640) = v12;\n      v15 = *(_DWORD *)(a1 + 644);\n      result = (unsigned int)(v15 - 8);\n      *(_DWORD *)(a1 + 644) = result;\n    }\n    while ( v15 > 15 );\n  }\n  v16 = v12 | (BYTE1(v2) << (24 - result));\n  *(_DWORD *)(a1 + 640) = v16;\n  v17 = result + 8;\n  *(_DWORD *)(a1 + 644) = result + 8;\n  if ( (signed int)result >= 0 )\n  {\n    LODWORD(result) = *(_DWORD *)(a1 + 116);\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 80) + (signed int)result) = HIBYTE(v16);\n      result = (unsigned int)(*(_DWORD *)(a1 + 116) + 1);\n      *(_DWORD *)(a1 + 116) = result;\n      v16 = *(_DWORD *)(a1 + 640) << 8;\n      *(_DWORD *)(a1 + 640) = v16;\n      v18 = *(_DWORD *)(a1 + 644);\n      v17 = v18 - 8;\n      *(_DWORD *)(a1 + 644) = v18 - 8;\n    }\n    while ( v18 > 15 );\n  }\n  *(_DWORD *)(a1 + 640) = v16 | ((unsigned __int8)v2 << (24 - v17));\n  *(_DWORD *)(a1 + 644) = v17 + 8;\n  return result;\n}\n", 
            "funcStartAddr": "0x408c20L", 
            "funcEndAddr": "0x408de3L", 
            "funcName": "sub_408C20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408DF0(__int64 a1)\n{\n  int *v1; // r8\n  signed int *v2; // rbx\n  signed __int64 v3; // rdi\n  signed __int64 v4; // rbx\n  size_t v5; // rax\n  signed int v6; // er10\n  unsigned int v7; // eax\n  int v8; // er9\n  signed __int64 v9; // r14\n  int v10; // ebx\n  __int64 v11; // r13\n  int v12; // er15\n  double v13; // xmm0_8\n  int v14; // ebp\n  __int64 v15; // rdx\n  signed __int64 v16; // rcx\n  bool v17; // sf\n  unsigned __int8 v18; // of\n  signed __int64 v19; // rcx\n  signed __int64 v20; // rdx\n  char v21; // bl\n  char v22; // si\n  bool v23; // zf\n  char *v24; // r15\n  __int64 v25; // r14\n  size_t v26; // rbp\n  FILE *v27; // rcx\n  size_t v28; // rbx\n  size_t v29; // rbx\n  size_t v30; // r8\n  _DWORD *v31; // r9\n  int *v32; // rax\n  __int64 v33; // rcx\n  int v34; // ebx\n  int v35; // er15\n  int v36; // er12\n  unsigned __int16 v37; // cx\n  int v38; // er10\n  __int64 v39; // rax\n  int v40; // ebp\n  int v41; // er14\n  int v42; // er11\n  char v43; // bp\n  __int64 v44; // rbx\n  signed __int64 v45; // rax\n  signed __int64 v46; // rcx\n  _DWORD *v47; // r9\n  int v48; // esi\n  int v49; // edx\n  signed __int64 v50; // rax\n  int v51; // esi\n  int v52; // edx\n  signed __int64 v53; // rax\n  int v54; // esi\n  int v55; // edx\n  signed __int64 v56; // rax\n  int v57; // esi\n  int v58; // edx\n  signed __int64 v59; // rax\n  int v60; // esi\n  int v61; // edx\n  signed __int64 v62; // rax\n  int v63; // esi\n  int v64; // edx\n  signed __int64 v65; // rax\n  int v66; // esi\n  int v67; // edx\n  signed __int64 v68; // rax\n  int v69; // esi\n  int v70; // edx\n  signed __int64 v71; // rax\n  int v72; // esi\n  int v73; // edx\n  signed __int64 v74; // rax\n  int v75; // esi\n  int v76; // edx\n  signed __int64 v77; // rax\n  int v78; // esi\n  int v79; // edx\n  signed __int64 v80; // rax\n  int v81; // esi\n  int v82; // edx\n  signed __int64 v83; // rax\n  int v84; // esi\n  int v85; // edx\n  signed __int64 v86; // rax\n  int v87; // esi\n  int v88; // edx\n  signed __int64 v89; // rax\n  int v90; // esi\n  int v91; // edx\n  signed __int64 v92; // rax\n  int v93; // esi\n  int v94; // edx\n  signed __int64 v95; // rax\n  int v96; // esi\n  int v97; // edx\n  signed __int64 v98; // rax\n  int v99; // esi\n  int v100; // edx\n  signed __int64 v101; // rax\n  int v102; // esi\n  int v103; // edx\n  signed __int64 v104; // rax\n  int v105; // esi\n  int v106; // edx\n  signed __int64 v107; // rax\n  int v108; // esi\n  int v109; // edx\n  signed __int64 v110; // rax\n  int v111; // esi\n  int v112; // edx\n  signed __int64 v113; // rax\n  int v114; // esi\n  int v115; // edx\n  signed __int64 v116; // rax\n  int v117; // esi\n  int v118; // edx\n  signed __int64 v119; // rax\n  int v120; // esi\n  int v121; // edx\n  signed __int64 v122; // rax\n  int v123; // esi\n  int v124; // edx\n  signed __int64 v125; // rax\n  int v126; // esi\n  int v127; // edx\n  signed __int64 v128; // rax\n  int v129; // esi\n  int v130; // edx\n  signed __int64 v131; // rax\n  int v132; // esi\n  int v133; // edx\n  signed __int64 v134; // rax\n  int v135; // esi\n  int v136; // edx\n  signed __int64 v137; // rax\n  int v138; // esi\n  int v139; // edx\n  signed __int64 v140; // rax\n  int v141; // esi\n  int v142; // edx\n  signed __int64 v143; // rax\n  int v144; // esi\n  int v145; // edx\n  signed __int64 v146; // rax\n  int v147; // esi\n  int v148; // edx\n  signed __int64 v149; // rax\n  int v150; // esi\n  int v151; // edx\n  signed __int64 v152; // rax\n  int v153; // esi\n  int v154; // edx\n  signed __int64 v155; // rax\n  int v156; // esi\n  int v157; // edx\n  signed __int64 v158; // rax\n  int v159; // esi\n  int v160; // edx\n  signed __int64 v161; // rax\n  int v162; // esi\n  int v163; // edx\n  signed __int64 v164; // rax\n  int v165; // esi\n  int v166; // edx\n  signed __int64 v167; // rax\n  int v168; // esi\n  int v169; // edx\n  signed __int64 v170; // rax\n  int v171; // esi\n  int v172; // edx\n  signed __int64 v173; // rax\n  int v174; // esi\n  int v175; // edx\n  signed __int64 v176; // rax\n  int v177; // esi\n  int v178; // edx\n  signed __int64 v179; // rax\n  int v180; // esi\n  int v181; // edx\n  signed __int64 v182; // rax\n  int v183; // esi\n  int v184; // edx\n  signed __int64 v185; // rax\n  int v186; // esi\n  int v187; // edx\n  signed __int64 v188; // rax\n  int v189; // esi\n  int v190; // edx\n  signed __int64 v191; // rax\n  int v192; // edx\n  int v193; // edx\n  int v194; // esi\n  int v195; // edi\n  __int16 v196; // r11\n  __int16 v197; // r9\n  __int16 v198; // r10\n  signed __int64 v199; // rcx\n  __int64 v200; // rbx\n  unsigned __int16 v201; // cx\n  unsigned __int16 v202; // dx\n  __int64 v203; // rcx\n  __int64 v204; // rsi\n  signed __int64 v205; // rax\n  __int64 v206; // rsi\n  __int64 v207; // rsi\n  __int64 v208; // rsi\n  __int64 v209; // rsi\n  __int64 v210; // rsi\n  __int64 v211; // rsi\n  __int64 v212; // rsi\n  __int64 v213; // rsi\n  __int64 v214; // rsi\n  __int64 v215; // rsi\n  __int64 v216; // rsi\n  __int64 v217; // rsi\n  __int64 v218; // rsi\n  __int64 v219; // rsi\n  __int64 v220; // rsi\n  __int64 v221; // rsi\n  __int64 v222; // rsi\n  __int64 v223; // rsi\n  __int64 v224; // rsi\n  __int64 v225; // rsi\n  __int64 v226; // rsi\n  __int64 v227; // rsi\n  __int64 v228; // rsi\n  __int64 v229; // rsi\n  __int64 v230; // rsi\n  __int64 v231; // rsi\n  __int64 v232; // rsi\n  __int64 v233; // rsi\n  __int64 v234; // rsi\n  __int64 v235; // rsi\n  __int64 v236; // rsi\n  __int64 v237; // rsi\n  __int64 v238; // rsi\n  __int64 v239; // rsi\n  __int64 v240; // rsi\n  __int64 v241; // rsi\n  __int64 v242; // rsi\n  __int64 v243; // rsi\n  __int64 v244; // rsi\n  __int64 v245; // rsi\n  __int64 v246; // rsi\n  __int64 v247; // rsi\n  __int64 v248; // rsi\n  __int64 v249; // rsi\n  __int64 v250; // rsi\n  __int64 v251; // rsi\n  __int64 v252; // rsi\n  __int64 v253; // rdx\n  __int64 v254; // rdx\n  signed __int64 v255; // rdx\n  __int64 v256; // rsi\n  signed __int64 v257; // rdx\n  __int64 v258; // rdi\n  signed __int64 v259; // rbp\n  __int64 v260; // rdi\n  char *v261; // rbx\n  __int64 v262; // r13\n  unsigned __int64 v263; // rbp\n  _DWORD *v264; // r11\n  signed int v265; // edi\n  __int64 v266; // r15\n  char v267; // al\n  __int64 v268; // rbp\n  __int64 v269; // rcx\n  char v270; // bl\n  __int64 v271; // rsi\n  char v272; // dl\n  __int64 v273; // rax\n  unsigned __int64 v274; // r14\n  signed __int64 v275; // r12\n  unsigned __int64 v276; // r13\n  int v277; // ebx\n  int v278; // ebp\n  signed __int64 v279; // rax\n  __int64 v280; // rdx\n  __m128i v281; // xmm2\n  size_t v282; // rax\n  unsigned int *v283; // rcx\n  __m128i v284; // xmm8\n  __m128i v285; // xmm1\n  __m128i v286; // xmm3\n  __m128i v287; // xmm5\n  __m128i v288; // xmm4\n  __m128i v289; // xmm6\n  __m128i v290; // xmm7\n  __m128i v291; // xmm0\n  __m128i v292; // xmm6\n  __m128i v293; // xmm0\n  __m128i v294; // xmm0\n  __m128i v295; // xmm2\n  __m128i v296; // xmm3\n  __m128i v297; // xmm3\n  __m128i v298; // xmm0\n  __m128i v299; // xmm2\n  __m128i v300; // xmm0\n  __m128i v301; // xmm0\n  __m128i v302; // xmm1\n  __m128i v303; // xmm2\n  __m128i v304; // xmm2\n  __m128i v305; // xmm0\n  __m128i v306; // xmm1\n  int v307; // ecx\n  signed __int64 v308; // rax\n  __int16 *v309; // rcx\n  char v310; // dl\n  char v311; // dl\n  char v312; // dl\n  char v313; // dl\n  char v314; // dl\n  char v315; // dl\n  char v316; // dl\n  char v317; // dl\n  char v318; // dl\n  char v319; // dl\n  char v320; // dl\n  char v321; // dl\n  char v322; // dl\n  char v323; // dl\n  unsigned __int8 v324; // dl\n  int *v325; // r13\n  int v326; // er8\n  int *v327; // r12\n  int *v328; // r15\n  _QWORD *v329; // r14\n  int v330; // esi\n  int v331; // edx\n  __int64 v332; // rdi\n  int v333; // ebp\n  signed int v334; // eax\n  signed int v335; // eax\n  __int64 v336; // r9\n  __int64 v337; // rax\n  signed int v338; // ecx\n  signed int v339; // ecx\n  int v340; // edi\n  int v341; // edx\n  signed int v342; // eax\n  int v343; // eax\n  int v344; // edi\n  signed int v345; // ecx\n  unsigned int v346; // esi\n  int v347; // ebx\n  int v348; // edi\n  __int64 v349; // r8\n  __int64 v350; // r9\n  int v351; // eax\n  bool v352; // cl\n  unsigned int v353; // esi\n  signed int v354; // eax\n  signed int v355; // ecx\n  int v356; // eax\n  size_t v357; // r8\n  int v358; // ebp\n  signed __int64 v359; // r9\n  signed int v360; // edi\n  signed int v361; // ecx\n  int v362; // esi\n  int v363; // eax\n  __int64 v364; // r10\n  char *v365; // rcx\n  unsigned __int8 *v366; // r11\n  signed int i; // ecx\n  signed int v368; // ecx\n  bool v369; // bl\n  signed int v370; // ecx\n  int v371; // ecx\n  signed int v372; // eax\n  int v373; // ecx\n  int result; // eax\n  size_t v375; // r10\n  int v376; // ebx\n  int v377; // edx\n  unsigned int v378; // eax\n  __int64 v379; // rcx\n  __int64 v380; // r8\n  __int64 v381; // rsi\n  signed __int64 v382; // r9\n  int v383; // eax\n  signed __int64 v384; // r10\n  int v385; // ebx\n  int v386; // esi\n  int v387; // edi\n  int v388; // ecx\n  signed int v389; // edx\n  int v390; // ebx\n  int v391; // edi\n  __int64 v392; // rcx\n  int v393; // eax\n  int v394; // esi\n  int v395; // ecx\n  signed int v396; // edx\n  int v397; // esi\n  int v398; // edi\n  __int64 v399; // rcx\n  int v400; // eax\n  int v401; // ebx\n  int v402; // ecx\n  signed int v403; // edx\n  int v404; // ebx\n  int v405; // edi\n  __int64 v406; // rcx\n  int v407; // eax\n  int v408; // esi\n  int v409; // ecx\n  signed int v410; // edx\n  int v411; // esi\n  int v412; // edi\n  __int64 v413; // rcx\n  int v414; // eax\n  int v415; // ebx\n  int v416; // ecx\n  signed int v417; // edx\n  int v418; // ebx\n  int v419; // edi\n  __int64 v420; // rcx\n  int v421; // eax\n  int v422; // esi\n  int v423; // ecx\n  signed int v424; // edx\n  int v425; // esi\n  int v426; // edi\n  __int64 v427; // rcx\n  int v428; // eax\n  int v429; // ebx\n  int v430; // ecx\n  signed int v431; // edx\n  int v432; // ebx\n  int v433; // edi\n  __int64 v434; // rcx\n  int v435; // eax\n  int v436; // esi\n  int v437; // ecx\n  signed int v438; // edx\n  int v439; // esi\n  int v440; // edi\n  __int64 v441; // rcx\n  int v442; // eax\n  int v443; // ebx\n  int v444; // ecx\n  signed int v445; // edx\n  int v446; // ebx\n  int v447; // edi\n  __int64 v448; // rcx\n  int v449; // eax\n  int v450; // esi\n  int v451; // ecx\n  signed int v452; // edx\n  int v453; // esi\n  int v454; // edi\n  __int64 v455; // rcx\n  int v456; // eax\n  int v457; // ebx\n  int v458; // ecx\n  signed int v459; // edx\n  int v460; // ebx\n  int v461; // edi\n  __int64 v462; // rcx\n  int v463; // eax\n  int v464; // esi\n  int v465; // ecx\n  signed int v466; // edx\n  int v467; // esi\n  int v468; // edi\n  __int64 v469; // rcx\n  int v470; // eax\n  int v471; // ebx\n  int v472; // ecx\n  signed int v473; // edx\n  int v474; // ebx\n  int v475; // edi\n  __int64 v476; // rcx\n  int v477; // eax\n  int v478; // esi\n  int v479; // ecx\n  signed int v480; // edx\n  int v481; // esi\n  int v482; // edi\n  __int64 v483; // rcx\n  int v484; // eax\n  int v485; // ebx\n  int v486; // ecx\n  signed int v487; // edx\n  int v488; // ebx\n  int v489; // edi\n  __int64 v490; // rcx\n  int v491; // eax\n  int v492; // esi\n  int v493; // ecx\n  signed int v494; // edx\n  int v495; // esi\n  int v496; // edi\n  __int64 v497; // rcx\n  int v498; // eax\n  int v499; // ebx\n  int v500; // ecx\n  signed int v501; // edx\n  int v502; // ebx\n  int v503; // edi\n  __int64 v504; // rcx\n  int v505; // eax\n  int v506; // esi\n  int v507; // ecx\n  signed int v508; // edx\n  int v509; // esi\n  int v510; // edi\n  __int64 v511; // rcx\n  int v512; // eax\n  int v513; // ebx\n  int v514; // ecx\n  signed int v515; // edx\n  int v516; // ebx\n  int v517; // edi\n  __int64 v518; // rcx\n  int v519; // eax\n  int v520; // esi\n  int v521; // ecx\n  signed int v522; // edx\n  int v523; // esi\n  int v524; // edi\n  __int64 v525; // rcx\n  int v526; // eax\n  int v527; // ebx\n  int v528; // ecx\n  signed int v529; // edx\n  int v530; // ebx\n  int v531; // edi\n  __int64 v532; // rcx\n  int v533; // eax\n  int v534; // esi\n  int v535; // ecx\n  signed int v536; // edx\n  int v537; // esi\n  int v538; // edi\n  __int64 v539; // rcx\n  int v540; // eax\n  int v541; // ebx\n  int v542; // ecx\n  signed int v543; // edx\n  int v544; // ebx\n  int v545; // edi\n  __int64 v546; // rcx\n  int v547; // eax\n  int v548; // esi\n  int v549; // ecx\n  signed int v550; // edx\n  int v551; // esi\n  int v552; // edi\n  __int64 v553; // rcx\n  int v554; // eax\n  int v555; // ebx\n  int v556; // ecx\n  signed int v557; // edx\n  int v558; // ebx\n  int v559; // edi\n  __int64 v560; // rcx\n  int v561; // eax\n  int v562; // esi\n  int v563; // ecx\n  signed int v564; // edx\n  int v565; // esi\n  int v566; // edi\n  __int64 v567; // rcx\n  int v568; // eax\n  int v569; // ebx\n  int v570; // ecx\n  signed int v571; // edx\n  int v572; // ebx\n  int v573; // edi\n  __int64 v574; // rcx\n  int v575; // eax\n  int v576; // esi\n  int v577; // ecx\n  signed int v578; // edx\n  int v579; // esi\n  int v580; // edi\n  __int64 v581; // rcx\n  int v582; // eax\n  int v583; // ebx\n  int v584; // ecx\n  signed int v585; // edx\n  int v586; // ebx\n  int v587; // edi\n  __int64 v588; // rcx\n  int v589; // eax\n  int v590; // esi\n  int v591; // ecx\n  signed int v592; // edx\n  int v593; // esi\n  int v594; // edi\n  __int64 v595; // rcx\n  int v596; // eax\n  int v597; // ebx\n  int v598; // ecx\n  signed int v599; // edx\n  int v600; // ebx\n  int v601; // edi\n  __int64 v602; // rcx\n  int v603; // eax\n  int v604; // esi\n  int v605; // ecx\n  signed int v606; // edx\n  int v607; // esi\n  int v608; // edi\n  __int64 v609; // rcx\n  int v610; // eax\n  int v611; // ebx\n  int v612; // ecx\n  signed int v613; // edx\n  int v614; // ebx\n  int v615; // edi\n  __int64 v616; // rcx\n  int v617; // eax\n  int v618; // esi\n  int v619; // ecx\n  signed int v620; // edx\n  int v621; // esi\n  int v622; // edi\n  __int64 v623; // rcx\n  int v624; // eax\n  int v625; // ebx\n  int v626; // ecx\n  signed int v627; // edx\n  int v628; // ebx\n  int v629; // edi\n  __int64 v630; // rcx\n  int v631; // eax\n  int v632; // esi\n  int v633; // ecx\n  signed int v634; // edx\n  int v635; // esi\n  int v636; // edi\n  __int64 v637; // rcx\n  int v638; // eax\n  int v639; // ebx\n  int v640; // ecx\n  signed int v641; // edx\n  int v642; // ebx\n  int v643; // edi\n  __int64 v644; // rcx\n  int v645; // eax\n  int v646; // esi\n  int v647; // ecx\n  signed int v648; // edx\n  int v649; // esi\n  int v650; // edi\n  __int64 v651; // rcx\n  int v652; // eax\n  int v653; // ebx\n  int v654; // ecx\n  signed int v655; // edx\n  int v656; // ebx\n  int v657; // edi\n  __int64 v658; // rcx\n  int v659; // eax\n  int v660; // esi\n  int v661; // ecx\n  signed int v662; // edx\n  int v663; // esi\n  int v664; // edi\n  __int64 v665; // rcx\n  int v666; // eax\n  int v667; // ebx\n  int v668; // ecx\n  signed int v669; // edx\n  int v670; // ebx\n  int v671; // edi\n  __int64 v672; // rcx\n  int v673; // eax\n  int v674; // esi\n  int v675; // ecx\n  signed int v676; // edx\n  int v677; // esi\n  int v678; // edi\n  __int64 v679; // rcx\n  int v680; // eax\n  int v681; // ebx\n  int v682; // ecx\n  signed int v683; // edx\n  int v684; // ebx\n  int v685; // edi\n  __int64 v686; // rcx\n  int v687; // eax\n  int v688; // esi\n  int v689; // ecx\n  signed int v690; // edx\n  int v691; // esi\n  int v692; // edi\n  __int64 v693; // rcx\n  int v694; // eax\n  int v695; // ebx\n  int v696; // ecx\n  signed int v697; // edx\n  int v698; // ebx\n  int v699; // edi\n  __int64 v700; // rcx\n  int v701; // eax\n  int v702; // esi\n  int v703; // ecx\n  signed int v704; // edx\n  int v705; // esi\n  int v706; // edi\n  __int64 v707; // rcx\n  int v708; // eax\n  int v709; // ebx\n  int v710; // ecx\n  signed int v711; // edx\n  int v712; // ebx\n  int v713; // edi\n  __int64 v714; // rax\n  int v715; // esi\n  int v716; // eax\n  int v717; // ecx\n  signed int v718; // edx\n  int v719; // eax\n  int v720; // edi\n  __int64 v721; // rcx\n  int v722; // ebx\n  int v723; // esi\n  int v724; // ecx\n  signed int v725; // edx\n  int v726; // esi\n  int v727; // edi\n  __int64 v728; // rcx\n  int v729; // eax\n  int v730; // edx\n  int v731; // ecx\n  signed int v732; // ebx\n  __int64 v733; // rax\n  __int64 v734; // r8\n  int v735; // edi\n  int v736; // esi\n  __int64 v737; // rcx\n  __int64 v738; // rdx\n  int v739; // er9\n  int v740; // edx\n  int v741; // ecx\n  signed int v742; // ebx\n  __int64 v743; // [rsp+0h] [rbp-108h]\n  _DWORD *v744; // [rsp+8h] [rbp-100h]\n  int v745; // [rsp+14h] [rbp-F4h]\n  int v746; // [rsp+18h] [rbp-F0h]\n  int v747; // [rsp+1Ch] [rbp-ECh]\n  size_t v748; // [rsp+20h] [rbp-E8h]\n  bool v749; // [rsp+2Eh] [rbp-DAh]\n  char v750; // [rsp+2Fh] [rbp-D9h]\n  __int64 v751; // [rsp+30h] [rbp-D8h]\n  __int64 v752; // [rsp+38h] [rbp-D0h]\n  __int64 v753; // [rsp+40h] [rbp-C8h]\n  size_t v754; // [rsp+48h] [rbp-C0h]\n  size_t n; // [rsp+50h] [rbp-B8h]\n  int v756; // [rsp+5Ch] [rbp-ACh]\n  __int16 v757; // [rsp+60h] [rbp-A8h]\n  char v758; // [rsp+62h] [rbp-A6h]\n  char v759; // [rsp+63h] [rbp-A5h]\n  char v760; // [rsp+64h] [rbp-A4h]\n  char v761; // [rsp+65h] [rbp-A3h]\n  __int64 v762; // [rsp+70h] [rbp-98h]\n  _DWORD *v763; // [rsp+78h] [rbp-90h]\n  void *v764; // [rsp+80h] [rbp-88h]\n  void *v765; // [rsp+88h] [rbp-80h]\n  void *v766; // [rsp+90h] [rbp-78h]\n  void *v767; // [rsp+98h] [rbp-70h]\n  int *v768; // [rsp+A0h] [rbp-68h]\n  void *v769; // [rsp+A8h] [rbp-60h]\n  char *v770; // [rsp+B0h] [rbp-58h]\n  size_t v771; // [rsp+B8h] [rbp-50h]\n  int s[18]; // [rsp+C0h] [rbp-48h]\n\n  v1 = (int *)a1;\n  v743 = *(_QWORD *)(a1 + 72);\n  v744 = (_DWORD *)a1;\n  if ( *(_DWORD *)(a1 + 656) > 2 )\n  {\n    v2 = (signed int *)(a1 + 124);\n    fprintf(\n      stderr,\n      \"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\\n\",\n      *(unsigned int *)(a1 + 108),\n      *(unsigned int *)(a1 + 668),\n      *(unsigned int *)(a1 + 124),\n      v743);\n    v1 = (int *)a1;\n  }\n  else\n  {\n    v2 = (signed int *)(a1 + 124);\n  }\n  v3 = *v2;\n  v4 = v3 + 2;\n  v5 = 1LL;\n  if ( (signed int)v3 + 2 > 0 )\n    v5 = (unsigned int)v4;\n  n = v5;\n  v752 = v3;\n  if ( v3 > -2 )\n  {\n    memset(v1 + 9427, 15, n);\n    memset((char *)v744 + 37966, 15, n);\n    memset(v744 + 9556, 15, n);\n    memset((char *)v744 + 38482, 15, n);\n    memset(v744 + 9685, 15, n);\n    memset((char *)v744 + 38998, 15, n);\n    v3 = v752;\n    v1 = v744;\n  }\n  v6 = v1[167];\n  if ( v6 <= 0 )\n    sub_404F10(0xBB9u);\n  v753 = v4;\n  v7 = 2;\n  if ( v6 >= 200 )\n  {\n    v7 = 3;\n    if ( v6 >= 600 )\n    {\n      v7 = 4;\n      if ( v6 >= 1200 )\n        v7 = 6 - (v6 < 2400);\n    }\n  }\n  v8 = v7;\n  v9 = (signed __int64)v1 + 258 * v7 + 37450;\n  v10 = 0;\n  v11 = v7;\n  v748 = v7;\n  do\n  {\n    v14 = v10 - 1;\n    if ( v6 / (signed int)v11 <= 0 )\n    {\n      v12 = 0;\n    }\n    else\n    {\n      if ( v14 > (signed int)v3 )\n      {\n        v12 = 0;\n        if ( v1[164] >= 3 )\n          goto LABEL_15;\n        goto LABEL_30;\n      }\n      v15 = v14;\n      v16 = (signed __int64)v14 << 32;\n      v12 = 0;\n      do\n      {\n        v16 += 0x100000000LL;\n        v14 = v15 + 1;\n        v12 += v1[v15 + 169];\n        if ( v12 >= v6 / (signed int)v11 )\n          break;\n        v18 = __OFSUB__(v15, v3);\n        v17 = v15++ - v3 < 0;\n      }\n      while ( v17 ^ v18 );\n      if ( v10 < v14 && v8 != (_DWORD)v11 && (_DWORD)v11 != 1 && ((_BYTE)v8 - (_BYTE)v11) & 1 )\n      {\n        v12 -= *(int *)((char *)v1 + (v16 >> 30) + 672);\n        --v14;\n        if ( v1[164] >= 3 )\n          goto LABEL_15;\n        goto LABEL_30;\n      }\n    }\n    if ( v1[164] >= 3 )\n    {\nLABEL_15:\n      v13 = (float)v12 * 100.0 / (float)v1[167];\n      LODWORD(v751) = v6;\n      fprintf(\n        stderr,\n        \"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\\n\",\n        (unsigned int)v11,\n        (unsigned int)v10,\n        (unsigned int)v14,\n        (unsigned int)v12,\n        v13,\n        v743);\n      v6 = v751;\n      v3 = v752;\n      v8 = v748;\n      v1 = v744;\n      if ( (signed int)v752 < -1 )\n        goto LABEL_37;\n      goto LABEL_31;\n    }\nLABEL_30:\n    if ( (signed int)v3 < -1 )\n      goto LABEL_37;\nLABEL_31:\n    v19 = v10;\n    v20 = 0LL;\n    do\n    {\n      v21 = 15;\n      v22 = 15;\n      if ( v20 <= v14 )\n        v22 = 0;\n      if ( v20 >= v19 )\n        v21 = v22;\n      *(_BYTE *)(v9 + v20++) = v21;\n    }\n    while ( v20 < v753 );\nLABEL_37:\n    v6 -= v12;\n    v9 -= 258LL;\n    v18 = __OFSUB__(v11, 1LL);\n    v23 = v11 == 1;\n    v17 = v11-- - 1 < 0;\n    v10 = v14 + 1;\n  }\n  while ( !((unsigned __int8)(v17 ^ v18) | v23) );\n  v771 = (unsigned int)(4 * v8);\n  n *= 4LL;\n  v754 = (unsigned int)(2 * v8);\n  v749 = v8 != 6 || (signed int)v3 < -1;\n  v24 = (char *)(v1 + 11362);\n  v769 = v1 + 11620;\n  v767 = v1 + 11878;\n  v766 = v1 + 12136;\n  v765 = v1 + 12394;\n  v764 = v1 + 12652;\n  v768 = v1 + 12912;\n  v763 = v1 + 9427;\n  v762 = 0LL;\n  v25 = v753;\n  v770 = (char *)(v1 + 11362);\n  do\n  {\n    memset(s, 0, v771);\n    if ( (signed int)v752 >= -1 )\n    {\n      v29 = n;\n      memset(v24, 0, n);\n      memset(v769, 0, v29);\n    }\n    v30 = v748;\n    v31 = v744;\n    if ( (unsigned int)v748 >= 3 )\n    {\n      if ( (signed int)v752 >= -1 )\n      {\n        memset(v767, 0, n);\n        v30 = v748;\n        v31 = v744;\n      }\n      if ( (unsigned int)v30 >= 4 )\n      {\n        if ( (signed int)v752 >= -1 )\n        {\n          memset(v766, 0, n);\n          v30 = v748;\n          v31 = v744;\n        }\n        if ( (unsigned int)v30 >= 5 )\n        {\n          if ( (signed int)v752 >= -1 )\n          {\n            memset(v765, 0, n);\n            v30 = v748;\n            v31 = v744;\n          }\n          if ( (unsigned int)v30 >= 6 && (signed int)v752 >= -1 )\n          {\n            memset(v764, 0, n);\n            v30 = v748;\n            v31 = v744;\n          }\n        }\n      }\n    }\n    if ( !v749 )\n    {\n      v32 = v768;\n      v33 = 0LL;\n      do\n      {\n        *(v32 - 2) = (*((unsigned __int8 *)v31 + v33 + 37966) << 16) | *((unsigned __int8 *)v31 + v33 + 37708);\n        *(v32 - 1) = (*((unsigned __int8 *)v31 + v33 + 38482) << 16) | *((unsigned __int8 *)v31 + v33 + 38224);\n        *v32 = (*((unsigned __int8 *)v31 + v33 + 38998) << 16) | *((unsigned __int8 *)v31 + v33 + 38740);\n        ++v33;\n        v32 += 4;\n      }\n      while ( v33 < v25 );\n    }\n    v34 = v31[167];\n    if ( v34 > 0 )\n    {\n      v751 = 0LL;\n      v35 = 0;\n      v36 = 0;\n      while ( 1 )\n      {\n        v40 = v30 ^ 6;\n        v41 = v34 - 1;\n        memset(&v745, 0, v754);\n        v42 = v35 + 49;\n        if ( v35 + 49 < v34 )\n          v41 = v35 + 49;\n        v43 = (v40 | (v41 - v35) ^ 0x31) == 0;\n        if ( v43 )\n        {\n          v44 = v743;\n          v45 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35);\n          v46 = 16LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 2);\n          v47 = v744;\n          v48 = v744[v45 + 12910] + *(_DWORD *)((char *)v744 + v46 + 51640);\n          v49 = v744[v45 + 12911] + *(_DWORD *)((char *)v744 + v46 + 51644);\n          LODWORD(v46) = v744[v45 + 12912] + *(_DWORD *)((char *)v744 + v46 + 51648);\n          v50 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 4);\n          v51 = v744[v50 + 12910] + v48;\n          v52 = v744[v50 + 12911] + v49;\n          LODWORD(v46) = v744[v50 + 12912] + v46;\n          v53 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 6);\n          v54 = v744[v53 + 12910] + v51;\n          v55 = v744[v53 + 12911] + v52;\n          LODWORD(v46) = v744[v53 + 12912] + v46;\n          v56 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 8);\n          v57 = v744[v56 + 12910] + v54;\n          v58 = v744[v56 + 12911] + v55;\n          LODWORD(v46) = v744[v56 + 12912] + v46;\n          v59 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 10);\n          v60 = v744[v59 + 12910] + v57;\n          v61 = v744[v59 + 12911] + v58;\n          LODWORD(v46) = v744[v59 + 12912] + v46;\n          v62 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 12);\n          v63 = v744[v62 + 12910] + v60;\n          v64 = v744[v62 + 12911] + v61;\n          LODWORD(v46) = v744[v62 + 12912] + v46;\n          v65 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 14);\n          v66 = v744[v65 + 12910] + v63;\n          v67 = v744[v65 + 12911] + v64;\n          LODWORD(v46) = v744[v65 + 12912] + v46;\n          v68 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 16);\n          v69 = v744[v68 + 12910] + v66;\n          v70 = v744[v68 + 12911] + v67;\n          LODWORD(v46) = v744[v68 + 12912] + v46;\n          v71 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 18);\n          v72 = v744[v71 + 12910] + v69;\n          v73 = v744[v71 + 12911] + v70;\n          LODWORD(v46) = v744[v71 + 12912] + v46;\n          v74 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 20);\n          v75 = v744[v74 + 12910] + v72;\n          v76 = v744[v74 + 12911] + v73;\n          LODWORD(v46) = v744[v74 + 12912] + v46;\n          v77 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 22);\n          v78 = v744[v77 + 12910] + v75;\n          v79 = v744[v77 + 12911] + v76;\n          LODWORD(v46) = v744[v77 + 12912] + v46;\n          v80 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 24);\n          v81 = v744[v80 + 12910] + v78;\n          v82 = v744[v80 + 12911] + v79;\n          LODWORD(v46) = v744[v80 + 12912] + v46;\n          v83 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 26);\n          v84 = v744[v83 + 12910] + v81;\n          v85 = v744[v83 + 12911] + v82;\n          LODWORD(v46) = v744[v83 + 12912] + v46;\n          v86 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 28);\n          v87 = v744[v86 + 12910] + v84;\n          v88 = v744[v86 + 12911] + v85;\n          LODWORD(v46) = v744[v86 + 12912] + v46;\n          v89 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 30);\n          v90 = v744[v89 + 12910] + v87;\n          v91 = v744[v89 + 12911] + v88;\n          LODWORD(v46) = v744[v89 + 12912] + v46;\n          v92 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 32);\n          v93 = v744[v92 + 12910] + v90;\n          v94 = v744[v92 + 12911] + v91;\n          LODWORD(v46) = v744[v92 + 12912] + v46;\n          v95 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 34);\n          v96 = v744[v95 + 12910] + v93;\n          v97 = v744[v95 + 12911] + v94;\n          LODWORD(v46) = v744[v95 + 12912] + v46;\n          v98 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 36);\n          v99 = v744[v98 + 12910] + v96;\n          v100 = v744[v98 + 12911] + v97;\n          LODWORD(v46) = v744[v98 + 12912] + v46;\n          v101 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 38);\n          v102 = v744[v101 + 12910] + v99;\n          v103 = v744[v101 + 12911] + v100;\n          LODWORD(v46) = v744[v101 + 12912] + v46;\n          v104 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 40);\n          v105 = v744[v104 + 12910] + v102;\n          v106 = v744[v104 + 12911] + v103;\n          LODWORD(v46) = v744[v104 + 12912] + v46;\n          v107 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 42);\n          v108 = v744[v107 + 12910] + v105;\n          v109 = v744[v107 + 12911] + v106;\n          LODWORD(v46) = v744[v107 + 12912] + v46;\n          v110 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 44);\n          v111 = v744[v110 + 12910] + v108;\n          v112 = v744[v110 + 12911] + v109;\n          LODWORD(v46) = v744[v110 + 12912] + v46;\n          v113 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 46);\n          v114 = v744[v113 + 12910] + v111;\n          v115 = v744[v113 + 12911] + v112;\n          LODWORD(v46) = v744[v113 + 12912] + v46;\n          v116 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 48);\n          v117 = v744[v116 + 12910] + v114;\n          v118 = v744[v116 + 12911] + v115;\n          LODWORD(v46) = v744[v116 + 12912] + v46;\n          v119 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 50);\n          v120 = v744[v119 + 12910] + v117;\n          v121 = v744[v119 + 12911] + v118;\n          LODWORD(v46) = v744[v119 + 12912] + v46;\n          v122 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 52);\n          v123 = v744[v122 + 12910] + v120;\n          v124 = v744[v122 + 12911] + v121;\n          LODWORD(v46) = v744[v122 + 12912] + v46;\n          v125 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 54);\n          v126 = v744[v125 + 12910] + v123;\n          v127 = v744[v125 + 12911] + v124;\n          LODWORD(v46) = v744[v125 + 12912] + v46;\n          v128 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 56);\n          v129 = v744[v128 + 12910] + v126;\n          v130 = v744[v128 + 12911] + v127;\n          LODWORD(v46) = v744[v128 + 12912] + v46;\n          v131 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 58);\n          v132 = v744[v131 + 12910] + v129;\n          v133 = v744[v131 + 12911] + v130;\n          LODWORD(v46) = v744[v131 + 12912] + v46;\n          v134 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 60);\n          v135 = v744[v134 + 12910] + v132;\n          v136 = v744[v134 + 12911] + v133;\n          LODWORD(v46) = v744[v134 + 12912] + v46;\n          v137 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 62);\n          v138 = v744[v137 + 12910] + v135;\n          v139 = v744[v137 + 12911] + v136;\n          LODWORD(v46) = v744[v137 + 12912] + v46;\n          v140 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 64);\n          v141 = v744[v140 + 12910] + v138;\n          v142 = v744[v140 + 12911] + v139;\n          LODWORD(v46) = v744[v140 + 12912] + v46;\n          v143 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 66);\n          v144 = v744[v143 + 12910] + v141;\n          v145 = v744[v143 + 12911] + v142;\n          LODWORD(v46) = v744[v143 + 12912] + v46;\n          v146 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 68);\n          v147 = v744[v146 + 12910] + v144;\n          v148 = v744[v146 + 12911] + v145;\n          LODWORD(v46) = v744[v146 + 12912] + v46;\n          v149 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 70);\n          v150 = v744[v149 + 12910] + v147;\n          v151 = v744[v149 + 12911] + v148;\n          LODWORD(v46) = v744[v149 + 12912] + v46;\n          v152 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 72);\n          v153 = v744[v152 + 12910] + v150;\n          v154 = v744[v152 + 12911] + v151;\n          LODWORD(v46) = v744[v152 + 12912] + v46;\n          v155 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 74);\n          v156 = v744[v155 + 12910] + v153;\n          v157 = v744[v155 + 12911] + v154;\n          LODWORD(v46) = v744[v155 + 12912] + v46;\n          v158 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 76);\n          v159 = v744[v158 + 12910] + v156;\n          v160 = v744[v158 + 12911] + v157;\n          LODWORD(v46) = v744[v158 + 12912] + v46;\n          v161 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 78);\n          v162 = v744[v161 + 12910] + v159;\n          v163 = v744[v161 + 12911] + v160;\n          LODWORD(v46) = v744[v161 + 12912] + v46;\n          v164 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 80);\n          v165 = v744[v164 + 12910] + v162;\n          v166 = v744[v164 + 12911] + v163;\n          LODWORD(v46) = v744[v164 + 12912] + v46;\n          v167 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 82);\n          v168 = v744[v167 + 12910] + v165;\n          v169 = v744[v167 + 12911] + v166;\n          LODWORD(v46) = v744[v167 + 12912] + v46;\n          v170 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 84);\n          v171 = v744[v170 + 12910] + v168;\n          v172 = v744[v170 + 12911] + v169;\n          LODWORD(v46) = v744[v170 + 12912] + v46;\n          v173 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 86);\n          v174 = v744[v173 + 12910] + v171;\n          v175 = v744[v173 + 12911] + v172;\n          LODWORD(v46) = v744[v173 + 12912] + v46;\n          v176 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 88);\n          v177 = v744[v176 + 12910] + v174;\n          v178 = v744[v176 + 12911] + v175;\n          LODWORD(v46) = v744[v176 + 12912] + v46;\n          v179 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 90);\n          v180 = v744[v179 + 12910] + v177;\n          v181 = v744[v179 + 12911] + v178;\n          LODWORD(v46) = v744[v179 + 12912] + v46;\n          v182 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 92);\n          v183 = v744[v182 + 12910] + v180;\n          v184 = v744[v182 + 12911] + v181;\n          LODWORD(v46) = v744[v182 + 12912] + v46;\n          v185 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 94);\n          v186 = v744[v185 + 12910] + v183;\n          v187 = v744[v185 + 12911] + v184;\n          LODWORD(v46) = v744[v185 + 12912] + v46;\n          v188 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v35 + 96);\n          v189 = v744[v188 + 12910] + v186;\n          v190 = v744[v188 + 12911] + v187;\n          LODWORD(v46) = v744[v188 + 12912] + v46;\n          v191 = 4LL * *(unsigned __int16 *)(v743 + 2LL * v42);\n          v192 = v744[v191 + 12911] + v190;\n          LODWORD(v46) = v744[v191 + 12912] + v46;\n          v745 = v744[v191 + 12910] + v189;\n          v746 = v192;\n          v747 = v46;\n        }\n        else\n        {\n          v47 = v744;\n          v44 = v743;\n          if ( v41 >= v35 )\n          {\n            v750 = v43;\n            v756 = v35 + 49;\n            v193 = (unsigned __int16)v745;\n            v194 = HIWORD(v745);\n            v195 = (unsigned __int16)v746;\n            v196 = HIWORD(v746);\n            v197 = HIWORD(v747);\n            v198 = v747;\n            v199 = v35 - 1LL;\n            do\n            {\n              v200 = *(unsigned __int16 *)(v44 + 2 * v199 + 2);\n              v193 += *((unsigned __int8 *)v744 + v200 + 37708);\n              v194 += *((unsigned __int8 *)v744 + v200 + 37966);\n              if ( (unsigned int)v748 > 2 )\n              {\n                v195 += *((unsigned __int8 *)v744 + v200 + 38224);\n                if ( (_DWORD)v748 != 3 )\n                {\n                  v196 += *((unsigned __int8 *)v744 + v200 + 38482);\n                  if ( (unsigned int)v748 >= 5 )\n                  {\n                    v198 += *((unsigned __int8 *)v744 + v200 + 38740);\n                    if ( (_DWORD)v748 != 5 )\n                      v197 += *((unsigned __int8 *)v744 + v200 + 38998);\n                  }\n                }\n              }\n              v44 = v743;\n              ++v199;\n            }\n            while ( v199 < v41 );\n            LOWORD(v745) = v193;\n            HIWORD(v745) = v194;\n            LOWORD(v746) = v195;\n            HIWORD(v746) = v196;\n            LOWORD(v747) = v198;\n            HIWORD(v747) = v197;\n            v47 = v744;\n            v42 = v756;\n            v43 = v750;\n          }\n        }\n        v201 = HIWORD(v745);\n        LODWORD(v39) = (unsigned __int16)v745 <= HIWORD(v745);\n        LOBYTE(v39) = (unsigned __int16)v745 > HIWORD(v745);\n        if ( (unsigned __int16)v745 < HIWORD(v745) )\n          v201 = v745;\n        v30 = v748;\n        if ( (unsigned int)v748 <= 2 )\n          break;\n        v202 = v746;\n        if ( v201 < (unsigned __int16)v746 )\n          v202 = v201;\n        if ( v201 > (unsigned __int16)v746 )\n          LODWORD(v39) = 2;\n        if ( (_DWORD)v748 != 3 )\n        {\n          v201 = HIWORD(v746);\n          if ( v202 < HIWORD(v746) )\n            v201 = v202;\n          if ( v202 > HIWORD(v746) )\n            LODWORD(v39) = 3;\n          if ( (unsigned int)v748 < 5 )\n            break;\n          v202 = v747;\n          if ( v201 < (unsigned __int16)v747 )\n            v202 = v201;\n          if ( v201 > (unsigned __int16)v747 )\n            LODWORD(v39) = 4;\n          if ( (_DWORD)v748 != 5 )\n          {\n            v37 = HIWORD(v747);\n            if ( v202 < HIWORD(v747) )\n              v37 = v202;\n            v38 = v37;\n            if ( v202 > HIWORD(v747) )\n              LODWORD(v39) = 5;\n            goto LABEL_99;\n          }\n        }\n        v38 = v202;\nLABEL_99:\n        v203 = v751;\n        v39 = (signed int)v39;\n        ++s[v39];\n        *((_BYTE *)v47 + v203 + 1704) = v39;\n        if ( v43 )\n        {\n          v204 = *(unsigned __int16 *)(v44 + 2LL * v35);\n          v205 = (signed __int64)&v47[258 * v39];\n          ++*(_DWORD *)(v205 + 4 * v204 + 45448);\n          v206 = *(unsigned __int16 *)(v44 + 2LL * v35 + 2);\n          ++*(_DWORD *)(v205 + 4 * v206 + 45448);\n          v207 = *(unsigned __int16 *)(v44 + 2LL * v35 + 4);\n          ++*(_DWORD *)(v205 + 4 * v207 + 45448);\n          v208 = *(unsigned __int16 *)(v44 + 2LL * v35 + 6);\n          ++*(_DWORD *)(v205 + 4 * v208 + 45448);\n          v209 = *(unsigned __int16 *)(v44 + 2LL * v35 + 8);\n          ++*(_DWORD *)(v205 + 4 * v209 + 45448);\n          v210 = *(unsigned __int16 *)(v44 + 2LL * v35 + 10);\n          ++*(_DWORD *)(v205 + 4 * v210 + 45448);\n          v211 = *(unsigned __int16 *)(v44 + 2LL * v35 + 12);\n          ++*(_DWORD *)(v205 + 4 * v211 + 45448);\n          v212 = *(unsigned __int16 *)(v44 + 2LL * v35 + 14);\n          ++*(_DWORD *)(v205 + 4 * v212 + 45448);\n          v213 = *(unsigned __int16 *)(v44 + 2LL * v35 + 16);\n          ++*(_DWORD *)(v205 + 4 * v213 + 45448);\n          v214 = *(unsigned __int16 *)(v44 + 2LL * v35 + 18);\n          ++*(_DWORD *)(v205 + 4 * v214 + 45448);\n          v215 = *(unsigned __int16 *)(v44 + 2LL * v35 + 20);\n          ++*(_DWORD *)(v205 + 4 * v215 + 45448);\n          v216 = *(unsigned __int16 *)(v44 + 2LL * v35 + 22);\n          ++*(_DWORD *)(v205 + 4 * v216 + 45448);\n          v217 = *(unsigned __int16 *)(v44 + 2LL * v35 + 24);\n          ++*(_DWORD *)(v205 + 4 * v217 + 45448);\n          v218 = *(unsigned __int16 *)(v44 + 2LL * v35 + 26);\n          ++*(_DWORD *)(v205 + 4 * v218 + 45448);\n          v219 = *(unsigned __int16 *)(v44 + 2LL * v35 + 28);\n          ++*(_DWORD *)(v205 + 4 * v219 + 45448);\n          v220 = *(unsigned __int16 *)(v44 + 2LL * v35 + 30);\n          ++*(_DWORD *)(v205 + 4 * v220 + 45448);\n          v221 = *(unsigned __int16 *)(v44 + 2LL * v35 + 32);\n          ++*(_DWORD *)(v205 + 4 * v221 + 45448);\n          v222 = *(unsigned __int16 *)(v44 + 2LL * v35 + 34);\n          ++*(_DWORD *)(v205 + 4 * v222 + 45448);\n          v223 = *(unsigned __int16 *)(v44 + 2LL * v35 + 36);\n          ++*(_DWORD *)(v205 + 4 * v223 + 45448);\n          v224 = *(unsigned __int16 *)(v44 + 2LL * v35 + 38);\n          ++*(_DWORD *)(v205 + 4 * v224 + 45448);\n          v225 = *(unsigned __int16 *)(v44 + 2LL * v35 + 40);\n          ++*(_DWORD *)(v205 + 4 * v225 + 45448);\n          v226 = *(unsigned __int16 *)(v44 + 2LL * v35 + 42);\n          ++*(_DWORD *)(v205 + 4 * v226 + 45448);\n          v227 = *(unsigned __int16 *)(v44 + 2LL * v35 + 44);\n          ++*(_DWORD *)(v205 + 4 * v227 + 45448);\n          v228 = *(unsigned __int16 *)(v44 + 2LL * v35 + 46);\n          ++*(_DWORD *)(v205 + 4 * v228 + 45448);\n          v229 = *(unsigned __int16 *)(v44 + 2LL * v35 + 48);\n          ++*(_DWORD *)(v205 + 4 * v229 + 45448);\n          v230 = *(unsigned __int16 *)(v44 + 2LL * v35 + 50);\n          ++*(_DWORD *)(v205 + 4 * v230 + 45448);\n          v231 = *(unsigned __int16 *)(v44 + 2LL * v35 + 52);\n          ++*(_DWORD *)(v205 + 4 * v231 + 45448);\n          v232 = *(unsigned __int16 *)(v44 + 2LL * v35 + 54);\n          ++*(_DWORD *)(v205 + 4 * v232 + 45448);\n          v233 = *(unsigned __int16 *)(v44 + 2LL * v35 + 56);\n          ++*(_DWORD *)(v205 + 4 * v233 + 45448);\n          v234 = *(unsigned __int16 *)(v44 + 2LL * v35 + 58);\n          ++*(_DWORD *)(v205 + 4 * v234 + 45448);\n          v235 = *(unsigned __int16 *)(v44 + 2LL * v35 + 60);\n          ++*(_DWORD *)(v205 + 4 * v235 + 45448);\n          v236 = *(unsigned __int16 *)(v44 + 2LL * v35 + 62);\n          ++*(_DWORD *)(v205 + 4 * v236 + 45448);\n          v237 = *(unsigned __int16 *)(v44 + 2LL * v35 + 64);\n          ++*(_DWORD *)(v205 + 4 * v237 + 45448);\n          v238 = *(unsigned __int16 *)(v44 + 2LL * v35 + 66);\n          ++*(_DWORD *)(v205 + 4 * v238 + 45448);\n          v239 = *(unsigned __int16 *)(v44 + 2LL * v35 + 68);\n          ++*(_DWORD *)(v205 + 4 * v239 + 45448);\n          v240 = *(unsigned __int16 *)(v44 + 2LL * v35 + 70);\n          ++*(_DWORD *)(v205 + 4 * v240 + 45448);\n          v241 = *(unsigned __int16 *)(v44 + 2LL * v35 + 72);\n          ++*(_DWORD *)(v205 + 4 * v241 + 45448);\n          v242 = *(unsigned __int16 *)(v44 + 2LL * v35 + 74);\n          ++*(_DWORD *)(v205 + 4 * v242 + 45448);\n          v243 = *(unsigned __int16 *)(v44 + 2LL * v35 + 76);\n          ++*(_DWORD *)(v205 + 4 * v243 + 45448);\n          v244 = *(unsigned __int16 *)(v44 + 2LL * v35 + 78);\n          ++*(_DWORD *)(v205 + 4 * v244 + 45448);\n          v245 = *(unsigned __int16 *)(v44 + 2LL * v35 + 80);\n          ++*(_DWORD *)(v205 + 4 * v245 + 45448);\n          v246 = *(unsigned __int16 *)(v44 + 2LL * v35 + 82);\n          ++*(_DWORD *)(v205 + 4 * v246 + 45448);\n          v247 = *(unsigned __int16 *)(v44 + 2LL * v35 + 84);\n          ++*(_DWORD *)(v205 + 4 * v247 + 45448);\n          v248 = *(unsigned __int16 *)(v44 + 2LL * v35 + 86);\n          ++*(_DWORD *)(v205 + 4 * v248 + 45448);\n          v249 = *(unsigned __int16 *)(v44 + 2LL * v35 + 88);\n          ++*(_DWORD *)(v205 + 4 * v249 + 45448);\n          v250 = *(unsigned __int16 *)(v44 + 2LL * v35 + 90);\n          ++*(_DWORD *)(v205 + 4 * v250 + 45448);\n          v251 = *(unsigned __int16 *)(v44 + 2LL * v35 + 92);\n          ++*(_DWORD *)(v205 + 4 * v251 + 45448);\n          v252 = *(unsigned __int16 *)(v44 + 2LL * v35 + 94);\n          ++*(_DWORD *)(v205 + 4 * v252 + 45448);\n          v253 = *(unsigned __int16 *)(v44 + 2LL * v35 + 96);\n          ++*(_DWORD *)(v205 + 4 * v253 + 45448);\n          v254 = *(unsigned __int16 *)(v44 + 2LL * v42);\n          ++*(_DWORD *)(v205 + 4 * v254 + 45448);\n        }\n        else if ( v41 >= v35 )\n        {\n          v255 = v35;\n          if ( ((_BYTE)v41 + 1 - (_BYTE)v35) & 1 )\n          {\n            v256 = *(unsigned __int16 *)(v44 + 2LL * v35);\n            ++v47[258 * v39 + 11362 + v256];\n            v255 = v35 + 1LL;\n          }\n          if ( v41 != v35 )\n          {\n            v257 = v255 - 1;\n            do\n            {\n              v258 = *(unsigned __int16 *)(v44 + 2 * v257 + 2);\n              v259 = (signed __int64)&v47[258 * v39];\n              ++*(_DWORD *)(v259 + 4 * v258 + 45448);\n              v260 = *(unsigned __int16 *)(v44 + 2 * v257 + 4);\n              ++*(_DWORD *)(v259 + 4 * v260 + 45448);\n              v257 += 2LL;\n            }\n            while ( v257 < v41 );\n          }\n        }\n        v36 += v38;\n        v751 = v203 + 1;\n        v34 = v47[167];\n        v35 = v41 + 1;\n        if ( v41 + 1 >= v34 )\n        {\n          v25 = v753;\n          v24 = v770;\n          if ( v47[164] >= 3 )\n            goto LABEL_39;\n          goto LABEL_111;\n        }\n      }\n      v38 = v201;\n      goto LABEL_99;\n    }\n    v751 = 0LL;\n    v36 = 0;\n    if ( v31[164] >= 3 )\n    {\nLABEL_39:\n      v26 = v30;\n      fprintf(stderr, \"      pass %d: size is %d, grp uses are \", (unsigned int)(v762 + 1), v36 / 8, v743);\n      v27 = stderr;\n      v28 = 0LL;\n      do\n      {\n        fprintf(v27, \"%d \", (unsigned int)s[v28++]);\n        v27 = stderr;\n      }\n      while ( v28 < v26 );\n      fputc(10, stderr);\n    }\nLABEL_111:\n    v261 = v24;\n    v262 = (__int64)v763;\n    v263 = 0LL;\n    do\n    {\n      sub_410C90(v262, v261, (unsigned int)v25, 17LL);\n      ++v263;\n      v262 += 258LL;\n      v261 += 1032;\n    }\n    while ( v263 < v748 );\n    v762 = (unsigned int)(v762 + 1);\n  }\n  while ( (_DWORD)v762 != 4 );\n  if ( (signed int)v751 >= 18003 )\n    sub_404F10(0xBBBu);\n  v757 = 256;\n  if ( (unsigned int)v748 > 2 )\n  {\n    v758 = 2;\n    if ( (_DWORD)v748 != 3 )\n    {\n      v759 = 3;\n      if ( (unsigned int)v748 >= 5 )\n      {\n        v760 = 4;\n        if ( (_DWORD)v748 != 5 )\n          v761 = 5;\n      }\n    }\n  }\n  v264 = v744;\n  v265 = v752;\n  v266 = (__int64)v763;\n  if ( (signed int)v751 > 0 )\n  {\n    v267 = v757;\n    v268 = (unsigned int)v751;\n    v269 = 0LL;\n    do\n    {\n      v270 = *((_BYTE *)v744 + v269 + 1704);\n      v271 = 0LL;\n      if ( v270 != v267 )\n      {\n        do\n        {\n          v272 = *((_BYTE *)&v757 + v271 + 1);\n          *((_BYTE *)&v757 + v271++ + 1) = v267;\n          v267 = v272;\n        }\n        while ( v270 != v272 );\n        v267 = v270;\n      }\n      *((_BYTE *)v744 + v269++ + 19706) = v271;\n    }\n    while ( v269 != v268 );\n    LOBYTE(v757) = v267;\n  }\n  v23 = v25 == 0;\n  v17 = v25 < 0;\n  v273 = v25;\n  v274 = 1LL;\n  if ( !v17 && !v23 )\n    v274 = v273;\n  v754 = v274 & 0x7FFFFFFFFFFFFFF8LL;\n  v275 = (signed __int64)(v744 + 9428);\n  v276 = 0LL;\n  while ( 2 )\n  {\n    v277 = 32;\n    v278 = 0;\n    if ( v265 >= -1 )\n    {\n      if ( v274 >= 8 )\n      {\n        v281 = 0LL;\n        v282 = v754;\n        v283 = (unsigned int *)v275;\n        v284 = _mm_load_si128((const __m128i *)&xmmword_412A60);\n        v285 = v284;\n        v286 = 0LL;\n        do\n        {\n          v287 = _mm_unpacklo_epi16(_mm_unpacklo_epi8(_mm_cvtsi32_si128(*(v283 - 1)), (__m128i)0LL), (__m128i)0LL);\n          v288 = _mm_unpacklo_epi16(_mm_unpacklo_epi8(_mm_cvtsi32_si128(*v283), (__m128i)0LL), (__m128i)0LL);\n          v289 = _mm_cmpgt_epi32(v287, v281);\n          v290 = _mm_cmpgt_epi32(v288, v286);\n          v281 = _mm_or_si128(_mm_andnot_si128(v289, v281), _mm_and_si128(v287, v289));\n          v286 = _mm_or_si128(_mm_andnot_si128(v290, v286), _mm_and_si128(v288, v290));\n          v291 = _mm_cmpgt_epi32(v284, v287);\n          v292 = _mm_cmpgt_epi32(v285, v288);\n          v284 = _mm_or_si128(_mm_andnot_si128(v291, v284), _mm_and_si128(v287, v291));\n          v285 = _mm_or_si128(_mm_andnot_si128(v292, v285), _mm_and_si128(v288, v292));\n          v283 += 2;\n          v282 -= 8LL;\n        }\n        while ( v282 );\n        v293 = _mm_cmpgt_epi32(v281, v286);\n        v294 = _mm_or_si128(_mm_andnot_si128(v293, v286), _mm_and_si128(v281, v293));\n        v295 = _mm_shuffle_epi32(v294, 78);\n        v296 = _mm_cmpgt_epi32(v294, v295);\n        v297 = _mm_or_si128(_mm_andnot_si128(v296, v295), _mm_and_si128(v294, v296));\n        v298 = _mm_shuffle_epi32(v297, 229);\n        v299 = _mm_cmpgt_epi32(v297, v298);\n        v278 = _mm_cvtsi128_si32(_mm_or_si128(_mm_andnot_si128(v299, v298), _mm_and_si128(v297, v299)));\n        v300 = _mm_cmpgt_epi32(v285, v284);\n        v301 = _mm_or_si128(_mm_andnot_si128(v300, v285), _mm_and_si128(v284, v300));\n        v302 = _mm_shuffle_epi32(v301, 78);\n        v303 = _mm_cmpgt_epi32(v302, v301);\n        v304 = _mm_or_si128(_mm_andnot_si128(v303, v302), _mm_and_si128(v301, v303));\n        v305 = _mm_shuffle_epi32(v304, 229);\n        v306 = _mm_cmpgt_epi32(v305, v304);\n        v277 = _mm_cvtsi128_si32(_mm_or_si128(_mm_andnot_si128(v306, v305), _mm_and_si128(v304, v306)));\n        v279 = v754;\n        v280 = v753;\n        if ( v274 != v754 )\n          goto LABEL_137;\n      }\n      else\n      {\n        v279 = 0LL;\n        v277 = 32;\n        v278 = 0;\n        v280 = v753;\n        do\n        {\nLABEL_137:\n          v307 = *(unsigned __int8 *)(v266 + v279);\n          if ( v278 < v307 )\n            v278 = *(unsigned __int8 *)(v266 + v279);\n          if ( v277 > v307 )\n            v277 = *(unsigned __int8 *)(v266 + v279);\n          ++v279;\n        }\n        while ( v279 < v280 );\n      }\n      if ( v278 >= 18 )\n        sub_404F10(0xBBCu);\n      if ( v277 <= 0 )\n        sub_404F10(0xBBDu);\n    }\n    sub_411450(\n      &v264[258 * v276 + 9814],\n      (char *)v264 + 258 * v276 + 37708,\n      (unsigned int)v277,\n      (unsigned int)v278,\n      v753);\n    v265 = v752;\n    v264 = v744;\n    ++v276;\n    v275 += 258LL;\n    v266 += 258LL;\n    if ( v276 < v748 )\n      continue;\n    break;\n  }\n  v308 = 4611686018427387840LL;\n  v309 = &v757;\n  do\n  {\n    *(_BYTE *)v309 = 0;\n    v310 = v744[v308 + 96];\n    *(_BYTE *)v309 = v310 != 0;\n    v311 = BYTE1(v744[v308 + 96]) | v310;\n    *(_BYTE *)v309 = v311 != 0;\n    v312 = BYTE2(v744[v308 + 96]) | v311;\n    *(_BYTE *)v309 = v312 != 0;\n    v313 = HIBYTE(v744[v308 + 96]) | v312;\n    *(_BYTE *)v309 = v313 != 0;\n    v314 = LOBYTE(v744[v308 + 97]) | v313;\n    *(_BYTE *)v309 = v314 != 0;\n    v315 = BYTE1(v744[v308 + 97]) | v314;\n    *(_BYTE *)v309 = v315 != 0;\n    v316 = BYTE2(v744[v308 + 97]) | v315;\n    *(_BYTE *)v309 = v316 != 0;\n    v317 = HIBYTE(v744[v308 + 97]) | v316;\n    *(_BYTE *)v309 = v317 != 0;\n    v318 = LOBYTE(v744[v308 + 98]) | v317;\n    *(_BYTE *)v309 = v318 != 0;\n    v319 = BYTE1(v744[v308 + 98]) | v318;\n    *(_BYTE *)v309 = v319 != 0;\n    v320 = BYTE2(v744[v308 + 98]) | v319;\n    *(_BYTE *)v309 = v320 != 0;\n    v321 = HIBYTE(v744[v308 + 98]) | v320;\n    *(_BYTE *)v309 = v321 != 0;\n    v322 = LOBYTE(v744[v308 + 99]) | v321;\n    *(_BYTE *)v309 = v322 != 0;\n    v323 = BYTE1(v744[v308 + 99]) | v322;\n    *(_BYTE *)v309 = v323 != 0;\n    v324 = BYTE2(v744[v308 + 99]) | v323;\n    *(_BYTE *)v309 = v324 != 0;\n    *(_BYTE *)v309 = (HIBYTE(v744[v308 + 99]) | v324) != 0;\n    v309 = (__int16 *)((char *)v309 + 1);\n    v308 += 4LL;\n  }\n  while ( v308 * 4 );\n  v325 = v744 + 29;\n  v326 = v744[29];\n  v327 = v744 + 161;\n  v328 = v744 + 160;\n  v329 = v744 + 20;\n  v330 = v744[161];\n  v331 = v744[160];\n  v332 = 0LL;\n  v333 = v744[29];\n  do\n  {\n    if ( *((_BYTE *)&v757 + v332) )\n    {\n      if ( v330 >= 8 )\n      {\n        do\n        {\n          *(_BYTE *)(*v329 + v333) = HIBYTE(v331);\n          v333 = *v325 + 1;\n          *v325 = v333;\n          v331 = *v328 << 8;\n          *v328 = v331;\n          v334 = *v327;\n          v330 = *v327 - 8;\n          *v327 = v330;\n        }\n        while ( v334 > 15 );\n      }\n      v331 |= 1 << (31 - v330);\n    }\n    else if ( v330 >= 8 )\n    {\n      do\n      {\n        *(_BYTE *)(*v329 + v333) = HIBYTE(v331);\n        v333 = *v325 + 1;\n        *v325 = v333;\n        v331 = *v328 << 8;\n        *v328 = v331;\n        v335 = *v327;\n        v330 = *v327 - 8;\n        *v327 = v330;\n      }\n      while ( v335 > 15 );\n    }\n    *v328 = v331;\n    *v327 = ++v330;\n    ++v332;\n  }\n  while ( v332 != 16 );\n  v336 = 0LL;\n  do\n  {\n    if ( *((_BYTE *)&v757 + v336) )\n    {\n      v337 = 0LL;\n      do\n      {\n        if ( *((_BYTE *)&v744[4 * v336 + 32] + v337) )\n        {\n          if ( v330 >= 8 )\n          {\n            do\n            {\n              *(_BYTE *)(*v329 + v333) = HIBYTE(v331);\n              v333 = *v325 + 1;\n              *v325 = v333;\n              v331 = *v328 << 8;\n              *v328 = v331;\n              v338 = *v327;\n              v330 = *v327 - 8;\n              *v327 = v330;\n            }\n            while ( v338 > 15 );\n          }\n          v331 |= 1 << (31 - v330);\n        }\n        else if ( v330 >= 8 )\n        {\n          do\n          {\n            *(_BYTE *)(*v329 + v333) = HIBYTE(v331);\n            v333 = *v325 + 1;\n            *v325 = v333;\n            v331 = *v328 << 8;\n            *v328 = v331;\n            v339 = *v327;\n            v330 = *v327 - 8;\n            *v327 = v330;\n          }\n          while ( v339 > 15 );\n        }\n        *v328 = v331;\n        *v327 = ++v330;\n        ++v337;\n      }\n      while ( v337 != 16 );\n    }\n    ++v336;\n  }\n  while ( v336 != 16 );\n  if ( v744[164] >= 3 )\n  {\n    fprintf(stderr, \"      bytes: mapping %d, \", (unsigned int)(v333 - v326), v743);\n    v264 = v744;\n    v333 = *v325;\n    v330 = *v327;\n  }\n  v340 = *v328;\n  v341 = v333;\n  if ( v330 >= 8 )\n  {\n    do\n    {\n      *(_BYTE *)(*v329 + v341) = HIBYTE(v340);\n      v341 = *v325 + 1;\n      *v325 = v341;\n      v340 = *v328 << 8;\n      *v328 = v340;\n      v342 = *v327;\n      v330 = *v327 - 8;\n      *v327 = v330;\n    }\n    while ( v342 > 15 );\n  }\n  v343 = v340 | ((_DWORD)v748 << (29 - v330));\n  *v328 = v343;\n  v344 = v330 + 3;\n  *v327 = v330 + 3;\n  if ( v330 >= 5 )\n  {\n    do\n    {\n      *(_BYTE *)(*v329 + v341) = HIBYTE(v343);\n      v341 = *v325 + 1;\n      *v325 = v341;\n      v343 = *v328 << 8;\n      *v328 = v343;\n      v345 = *v327;\n      v344 = *v327 - 8;\n      *v327 = v344;\n    }\n    while ( v345 > 15 );\n  }\n  v346 = v751;\n  v347 = v343 | ((_DWORD)v751 << (17 - v344));\n  *v328 = v347;\n  v348 = v344 + 15;\n  *v327 = v348;\n  if ( (signed int)v346 <= 0 )\n  {\n    v356 = v348;\n    if ( v264[164] >= 3 )\n      goto LABEL_389;\n    goto LABEL_187;\n  }\n  v349 = v346;\n  v350 = 0LL;\n  while ( 2 )\n  {\n    v352 = v348 > 7;\n    if ( *((_BYTE *)v264 + v350 + 19706) )\n    {\n      v353 = 0;\n      do\n      {\n        if ( v352 )\n        {\n          do\n          {\n            *(_BYTE *)(*v329 + v341) = HIBYTE(v347);\n            v341 = *v325 + 1;\n            *v325 = v341;\n            v347 = *v328 << 8;\n            *v328 = v347;\n            v354 = *v327;\n            v348 = *v327 - 8;\n            *v327 = v348;\n          }\n          while ( v354 > 15 );\n        }\n        v347 |= 1 << (31 - v348);\n        v264[160] = v347;\n        v351 = v348 + 1;\n        v264[161] = v348 + 1;\n        ++v353;\n        v352 = v348++ > 6;\n      }\n      while ( v353 < *((unsigned __int8 *)v264 + v350 + 19706) );\n      if ( v352 )\n      {\n        do\n        {\nLABEL_184:\n          *(_BYTE *)(*v329 + v341) = HIBYTE(v347);\n          v341 = *v325 + 1;\n          *v325 = v341;\n          v347 = *v328 << 8;\n          *v328 = v347;\n          v355 = *v327;\n          v351 = *v327 - 8;\n          *v327 = v351;\n        }\n        while ( v355 > 15 );\n      }\n    }\n    else\n    {\n      v351 = v348;\n      if ( v352 )\n        goto LABEL_184;\n    }\n    *v328 = v347;\n    v356 = v351 + 1;\n    *v327 = v356;\n    ++v350;\n    v348 = v356;\n    if ( v350 != v349 )\n      continue;\n    break;\n  }\n  if ( v264[164] < 3 )\n    goto LABEL_187;\nLABEL_389:\n  fprintf(stderr, \"selectors %d, \", (unsigned int)(v341 - v333), v743);\n  v264 = v744;\n  v341 = *v325;\n  v356 = *v327;\n  v347 = *v328;\nLABEL_187:\n  v357 = 0LL;\n  v358 = v341;\n  while ( 2 )\n  {\n    v359 = 258 * v357;\n    v360 = *((unsigned __int8 *)v264 + 258 * v357 + 37708);\n    if ( v356 >= 8 )\n    {\n      do\n      {\n        *(_BYTE *)(*v329 + v358) = HIBYTE(v347);\n        v358 = *v325 + 1;\n        *v325 = v358;\n        v347 = *v328 << 8;\n        *v328 = v347;\n        v361 = *v327;\n        v356 = *v327 - 8;\n        *v327 = v356;\n      }\n      while ( v361 > 15 );\n    }\n    v362 = v347 | (v360 << (27 - v356));\n    *v328 = v362;\n    v363 = v356 + 5;\n    *v327 = v363;\n    v754 = v357;\n    if ( (signed int)v752 >= -1 )\n    {\n      v364 = 0LL;\n      while ( 1 )\n      {\n        v365 = (char *)v264 + v359;\n        v366 = (unsigned __int8 *)v264 + v359 + v364 + 37708;\n        for ( i = (unsigned __int8)v365[v364 + 37708]; v360 < i; i = *v366 )\n        {\n          if ( v363 >= 8 )\n          {\n            do\n            {\n              *(_BYTE *)(*v329 + v358) = HIBYTE(v362);\n              v358 = *v325 + 1;\n              *v325 = v358;\n              v362 = *v328 << 8;\n              *v328 = v362;\n              v368 = *v327;\n              v363 = *v327 - 8;\n              *v327 = v363;\n            }\n            while ( v368 > 15 );\n          }\n          v362 |= 2 << (30 - v363);\n          *v328 = v362;\n          v363 += 2;\n          *v327 = v363;\n          ++v360;\n        }\n        v369 = v363 > 7;\n        if ( v360 <= i )\n        {\n          v371 = v363;\n          if ( v369 )\n            goto LABEL_203;\n        }\n        else\n        {\n          do\n          {\n            if ( v369 )\n            {\n              do\n              {\n                *(_BYTE *)(*v329 + v358) = HIBYTE(v362);\n                v358 = *v325 + 1;\n                *v325 = v358;\n                v362 = *v328 << 8;\n                *v328 = v362;\n                v370 = *v327;\n                v363 = *v327 - 8;\n                *v327 = v363;\n              }\n              while ( v370 > 15 );\n            }\n            v362 |= 3 << (30 - v363);\n            *v328 = v362;\n            v371 = v363 + 2;\n            *v327 = v363 + 2;\n            --v360;\n            v369 = v363 > 5;\n            v363 += 2;\n          }\n          while ( v360 > *v366 );\n          if ( v369 )\n          {\nLABEL_203:\n            v264 = v744;\n            do\n            {\n              *(_BYTE *)(*v329 + v358) = HIBYTE(v362);\n              v358 = *v325 + 1;\n              *v325 = v358;\n              v362 = *v328 << 8;\n              *v328 = v362;\n              v372 = *v327;\n              v371 = *v327 - 8;\n              *v327 = v371;\n            }\n            while ( v372 > 15 );\n            goto LABEL_208;\n          }\n        }\n        v264 = v744;\nLABEL_208:\n        *v328 = v362;\n        v373 = v371 + 1;\n        *v327 = v373;\n        ++v364;\n        v363 = v373;\n        if ( v364 >= v753 )\n          goto LABEL_211;\n      }\n    }\n    v373 = v363;\nLABEL_211:\n    v357 = v754 + 1;\n    v347 = v362;\n    v356 = v373;\n    if ( v754 + 1 < v748 )\n      continue;\n    break;\n  }\n  if ( v264[164] >= 3 )\n  {\n    fprintf(stderr, \"code lengths %d, \", (unsigned int)(v358 - v341), v743);\n    v264 = v744;\n    v358 = *v325;\n  }\n  result = v264[167];\n  v375 = 0LL;\n  if ( result > 0 )\n  {\n    v376 = 0;\n    do\n    {\n      v377 = result - 1;\n      v756 = v376 + 49;\n      if ( v376 + 49 < result )\n        v377 = v376 + 49;\n      v378 = *((unsigned __int8 *)v264 + v375 + 1704);\n      v754 = v375;\n      LODWORD(v753) = v377;\n      if ( (unsigned int)v748 <= v378 )\n        sub_404F10(0xBBEu);\n      if ( (_DWORD)v748 != 6 || v377 - v376 != 49 )\n      {\n        if ( v377 >= v376 )\n        {\n          v733 = v376;\n          v734 = (signed int)v753;\n          v735 = *v327;\n          v736 = *v328;\n          do\n          {\n            v737 = *((unsigned __int8 *)v264 + v375 + 1704);\n            v738 = *(unsigned __int16 *)(v743 + 2 * v733);\n            v739 = *((unsigned __int8 *)v264 + 258 * v737 + v738 + 37708);\n            v740 = v264[258 * v737 + 9814 + v738];\n            if ( v735 >= 8 )\n            {\n              v741 = *v325;\n              do\n              {\n                *(_BYTE *)(*v329 + v741) = HIBYTE(v736);\n                v741 = *v325 + 1;\n                *v325 = v741;\n                v736 = *v328 << 8;\n                *v328 = v736;\n                v742 = *v327;\n                v735 = *v327 - 8;\n                *v327 = v735;\n              }\n              while ( v742 > 15 );\n            }\n            v736 |= v740 << (32 - v739 - v735);\n            *v328 = v736;\n            v735 += v739;\n            *v327 = v735;\n            v18 = __OFSUB__(v733, v734);\n            v17 = v733++ - v734 < 0;\n          }\n          while ( v17 ^ v18 );\n        }\n      }\n      else\n      {\n        v379 = *((unsigned __int8 *)v264 + v375 + 1704);\n        v380 = v376;\n        v381 = *(unsigned __int16 *)(v743 + 2LL * v376);\n        v382 = (signed __int64)v264 + 258 * v379;\n        v383 = *(unsigned __int8 *)(v381 + v382 + 37708);\n        v384 = (signed __int64)&v264[258 * v379];\n        v385 = *(_DWORD *)(v384 + 4 * v381 + 39256);\n        v386 = v264[160];\n        v387 = v264[161];\n        if ( v387 >= 8 )\n        {\n          v388 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v388) = HIBYTE(v386);\n            v388 = *v325 + 1;\n            *v325 = v388;\n            v386 = *v328 << 8;\n            *v328 = v386;\n            v389 = *v327;\n            v387 = *v327 - 8;\n            *v327 = v387;\n          }\n          while ( v389 > 15 );\n        }\n        v390 = v386 | (v385 << (32 - v383 - v387));\n        v264[160] = v390;\n        v391 = v383 + v387;\n        v264[161] = v391;\n        v392 = *(unsigned __int16 *)(v743 + 2 * v380 + 2);\n        v393 = *(unsigned __int8 *)(v392 + v382 + 37708);\n        v394 = *(_DWORD *)(v384 + 4 * v392 + 39256);\n        if ( v391 >= 8 )\n        {\n          v395 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v395) = HIBYTE(v390);\n            v395 = *v325 + 1;\n            *v325 = v395;\n            v390 = *v328 << 8;\n            *v328 = v390;\n            v396 = *v327;\n            v391 = *v327 - 8;\n            *v327 = v391;\n          }\n          while ( v396 > 15 );\n        }\n        v397 = v390 | (v394 << (32 - v393 - v391));\n        v264[160] = v397;\n        v398 = v393 + v391;\n        v264[161] = v398;\n        v399 = *(unsigned __int16 *)(v743 + 2 * v380 + 4);\n        v400 = *(unsigned __int8 *)(v399 + v382 + 37708);\n        v401 = *(_DWORD *)(v384 + 4 * v399 + 39256);\n        if ( v398 >= 8 )\n        {\n          v402 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v402) = HIBYTE(v397);\n            v402 = *v325 + 1;\n            *v325 = v402;\n            v397 = *v328 << 8;\n            *v328 = v397;\n            v403 = *v327;\n            v398 = *v327 - 8;\n            *v327 = v398;\n          }\n          while ( v403 > 15 );\n        }\n        v404 = v397 | (v401 << (32 - v400 - v398));\n        v264[160] = v404;\n        v405 = v400 + v398;\n        v264[161] = v405;\n        v406 = *(unsigned __int16 *)(v743 + 2 * v380 + 6);\n        v407 = *(unsigned __int8 *)(v406 + v382 + 37708);\n        v408 = *(_DWORD *)(v384 + 4 * v406 + 39256);\n        if ( v405 >= 8 )\n        {\n          v409 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v409) = HIBYTE(v404);\n            v409 = *v325 + 1;\n            *v325 = v409;\n            v404 = *v328 << 8;\n            *v328 = v404;\n            v410 = *v327;\n            v405 = *v327 - 8;\n            *v327 = v405;\n          }\n          while ( v410 > 15 );\n        }\n        v411 = v404 | (v408 << (32 - v407 - v405));\n        v264[160] = v411;\n        v412 = v407 + v405;\n        v264[161] = v412;\n        v413 = *(unsigned __int16 *)(v743 + 2 * v380 + 8);\n        v414 = *(unsigned __int8 *)(v413 + v382 + 37708);\n        v415 = *(_DWORD *)(v384 + 4 * v413 + 39256);\n        if ( v412 >= 8 )\n        {\n          v416 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v416) = HIBYTE(v411);\n            v416 = *v325 + 1;\n            *v325 = v416;\n            v411 = *v328 << 8;\n            *v328 = v411;\n            v417 = *v327;\n            v412 = *v327 - 8;\n            *v327 = v412;\n          }\n          while ( v417 > 15 );\n        }\n        v418 = v411 | (v415 << (32 - v414 - v412));\n        v264[160] = v418;\n        v419 = v414 + v412;\n        v264[161] = v419;\n        v420 = *(unsigned __int16 *)(v743 + 2 * v380 + 10);\n        v421 = *(unsigned __int8 *)(v420 + v382 + 37708);\n        v422 = *(_DWORD *)(v384 + 4 * v420 + 39256);\n        if ( v419 >= 8 )\n        {\n          v423 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v423) = HIBYTE(v418);\n            v423 = *v325 + 1;\n            *v325 = v423;\n            v418 = *v328 << 8;\n            *v328 = v418;\n            v424 = *v327;\n            v419 = *v327 - 8;\n            *v327 = v419;\n          }\n          while ( v424 > 15 );\n        }\n        v425 = v418 | (v422 << (32 - v421 - v419));\n        v264[160] = v425;\n        v426 = v421 + v419;\n        v264[161] = v426;\n        v427 = *(unsigned __int16 *)(v743 + 2 * v380 + 12);\n        v428 = *(unsigned __int8 *)(v427 + v382 + 37708);\n        v429 = *(_DWORD *)(v384 + 4 * v427 + 39256);\n        if ( v426 >= 8 )\n        {\n          v430 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v430) = HIBYTE(v425);\n            v430 = *v325 + 1;\n            *v325 = v430;\n            v425 = *v328 << 8;\n            *v328 = v425;\n            v431 = *v327;\n            v426 = *v327 - 8;\n            *v327 = v426;\n          }\n          while ( v431 > 15 );\n        }\n        v432 = v425 | (v429 << (32 - v428 - v426));\n        v264[160] = v432;\n        v433 = v428 + v426;\n        v264[161] = v433;\n        v434 = *(unsigned __int16 *)(v743 + 2 * v380 + 14);\n        v435 = *(unsigned __int8 *)(v434 + v382 + 37708);\n        v436 = *(_DWORD *)(v384 + 4 * v434 + 39256);\n        if ( v433 >= 8 )\n        {\n          v437 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v437) = HIBYTE(v432);\n            v437 = *v325 + 1;\n            *v325 = v437;\n            v432 = *v328 << 8;\n            *v328 = v432;\n            v438 = *v327;\n            v433 = *v327 - 8;\n            *v327 = v433;\n          }\n          while ( v438 > 15 );\n        }\n        v439 = v432 | (v436 << (32 - v435 - v433));\n        v264[160] = v439;\n        v440 = v435 + v433;\n        v264[161] = v440;\n        v441 = *(unsigned __int16 *)(v743 + 2 * v380 + 16);\n        v442 = *(unsigned __int8 *)(v441 + v382 + 37708);\n        v443 = *(_DWORD *)(v384 + 4 * v441 + 39256);\n        if ( v440 >= 8 )\n        {\n          v444 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v444) = HIBYTE(v439);\n            v444 = *v325 + 1;\n            *v325 = v444;\n            v439 = *v328 << 8;\n            *v328 = v439;\n            v445 = *v327;\n            v440 = *v327 - 8;\n            *v327 = v440;\n          }\n          while ( v445 > 15 );\n        }\n        v446 = v439 | (v443 << (32 - v442 - v440));\n        v264[160] = v446;\n        v447 = v442 + v440;\n        v264[161] = v447;\n        v448 = *(unsigned __int16 *)(v743 + 2 * v380 + 18);\n        v449 = *(unsigned __int8 *)(v448 + v382 + 37708);\n        v450 = *(_DWORD *)(v384 + 4 * v448 + 39256);\n        if ( v447 >= 8 )\n        {\n          v451 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v451) = HIBYTE(v446);\n            v451 = *v325 + 1;\n            *v325 = v451;\n            v446 = *v328 << 8;\n            *v328 = v446;\n            v452 = *v327;\n            v447 = *v327 - 8;\n            *v327 = v447;\n          }\n          while ( v452 > 15 );\n        }\n        v453 = v446 | (v450 << (32 - v449 - v447));\n        v264[160] = v453;\n        v454 = v449 + v447;\n        v264[161] = v454;\n        v455 = *(unsigned __int16 *)(v743 + 2 * v380 + 20);\n        v456 = *(unsigned __int8 *)(v455 + v382 + 37708);\n        v457 = *(_DWORD *)(v384 + 4 * v455 + 39256);\n        if ( v454 >= 8 )\n        {\n          v458 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v458) = HIBYTE(v453);\n            v458 = *v325 + 1;\n            *v325 = v458;\n            v453 = *v328 << 8;\n            *v328 = v453;\n            v459 = *v327;\n            v454 = *v327 - 8;\n            *v327 = v454;\n          }\n          while ( v459 > 15 );\n        }\n        v460 = v453 | (v457 << (32 - v456 - v454));\n        v264[160] = v460;\n        v461 = v456 + v454;\n        v264[161] = v461;\n        v462 = *(unsigned __int16 *)(v743 + 2 * v380 + 22);\n        v463 = *(unsigned __int8 *)(v462 + v382 + 37708);\n        v464 = *(_DWORD *)(v384 + 4 * v462 + 39256);\n        if ( v461 >= 8 )\n        {\n          v465 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v465) = HIBYTE(v460);\n            v465 = *v325 + 1;\n            *v325 = v465;\n            v460 = *v328 << 8;\n            *v328 = v460;\n            v466 = *v327;\n            v461 = *v327 - 8;\n            *v327 = v461;\n          }\n          while ( v466 > 15 );\n        }\n        v467 = v460 | (v464 << (32 - v463 - v461));\n        v264[160] = v467;\n        v468 = v463 + v461;\n        v264[161] = v468;\n        v469 = *(unsigned __int16 *)(v743 + 2 * v380 + 24);\n        v470 = *(unsigned __int8 *)(v469 + v382 + 37708);\n        v471 = *(_DWORD *)(v384 + 4 * v469 + 39256);\n        if ( v468 >= 8 )\n        {\n          v472 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v472) = HIBYTE(v467);\n            v472 = *v325 + 1;\n            *v325 = v472;\n            v467 = *v328 << 8;\n            *v328 = v467;\n            v473 = *v327;\n            v468 = *v327 - 8;\n            *v327 = v468;\n          }\n          while ( v473 > 15 );\n        }\n        v474 = v467 | (v471 << (32 - v470 - v468));\n        v264[160] = v474;\n        v475 = v470 + v468;\n        v264[161] = v475;\n        v476 = *(unsigned __int16 *)(v743 + 2 * v380 + 26);\n        v477 = *(unsigned __int8 *)(v476 + v382 + 37708);\n        v478 = *(_DWORD *)(v384 + 4 * v476 + 39256);\n        if ( v475 >= 8 )\n        {\n          v479 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v479) = HIBYTE(v474);\n            v479 = *v325 + 1;\n            *v325 = v479;\n            v474 = *v328 << 8;\n            *v328 = v474;\n            v480 = *v327;\n            v475 = *v327 - 8;\n            *v327 = v475;\n          }\n          while ( v480 > 15 );\n        }\n        v481 = v474 | (v478 << (32 - v477 - v475));\n        v264[160] = v481;\n        v482 = v477 + v475;\n        v264[161] = v482;\n        v483 = *(unsigned __int16 *)(v743 + 2 * v380 + 28);\n        v484 = *(unsigned __int8 *)(v483 + v382 + 37708);\n        v485 = *(_DWORD *)(v384 + 4 * v483 + 39256);\n        if ( v482 >= 8 )\n        {\n          v486 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v486) = HIBYTE(v481);\n            v486 = *v325 + 1;\n            *v325 = v486;\n            v481 = *v328 << 8;\n            *v328 = v481;\n            v487 = *v327;\n            v482 = *v327 - 8;\n            *v327 = v482;\n          }\n          while ( v487 > 15 );\n        }\n        v488 = v481 | (v485 << (32 - v484 - v482));\n        v264[160] = v488;\n        v489 = v484 + v482;\n        v264[161] = v489;\n        v490 = *(unsigned __int16 *)(v743 + 2 * v380 + 30);\n        v491 = *(unsigned __int8 *)(v490 + v382 + 37708);\n        v492 = *(_DWORD *)(v384 + 4 * v490 + 39256);\n        if ( v489 >= 8 )\n        {\n          v493 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v493) = HIBYTE(v488);\n            v493 = *v325 + 1;\n            *v325 = v493;\n            v488 = *v328 << 8;\n            *v328 = v488;\n            v494 = *v327;\n            v489 = *v327 - 8;\n            *v327 = v489;\n          }\n          while ( v494 > 15 );\n        }\n        v495 = v488 | (v492 << (32 - v491 - v489));\n        v264[160] = v495;\n        v496 = v491 + v489;\n        v264[161] = v496;\n        v497 = *(unsigned __int16 *)(v743 + 2 * v380 + 32);\n        v498 = *(unsigned __int8 *)(v497 + v382 + 37708);\n        v499 = *(_DWORD *)(v384 + 4 * v497 + 39256);\n        if ( v496 >= 8 )\n        {\n          v500 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v500) = HIBYTE(v495);\n            v500 = *v325 + 1;\n            *v325 = v500;\n            v495 = *v328 << 8;\n            *v328 = v495;\n            v501 = *v327;\n            v496 = *v327 - 8;\n            *v327 = v496;\n          }\n          while ( v501 > 15 );\n        }\n        v502 = v495 | (v499 << (32 - v498 - v496));\n        v264[160] = v502;\n        v503 = v498 + v496;\n        v264[161] = v503;\n        v504 = *(unsigned __int16 *)(v743 + 2 * v380 + 34);\n        v505 = *(unsigned __int8 *)(v504 + v382 + 37708);\n        v506 = *(_DWORD *)(v384 + 4 * v504 + 39256);\n        if ( v503 >= 8 )\n        {\n          v507 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v507) = HIBYTE(v502);\n            v507 = *v325 + 1;\n            *v325 = v507;\n            v502 = *v328 << 8;\n            *v328 = v502;\n            v508 = *v327;\n            v503 = *v327 - 8;\n            *v327 = v503;\n          }\n          while ( v508 > 15 );\n        }\n        v509 = v502 | (v506 << (32 - v505 - v503));\n        v264[160] = v509;\n        v510 = v505 + v503;\n        v264[161] = v510;\n        v511 = *(unsigned __int16 *)(v743 + 2 * v380 + 36);\n        v512 = *(unsigned __int8 *)(v511 + v382 + 37708);\n        v513 = *(_DWORD *)(v384 + 4 * v511 + 39256);\n        if ( v510 >= 8 )\n        {\n          v514 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v514) = HIBYTE(v509);\n            v514 = *v325 + 1;\n            *v325 = v514;\n            v509 = *v328 << 8;\n            *v328 = v509;\n            v515 = *v327;\n            v510 = *v327 - 8;\n            *v327 = v510;\n          }\n          while ( v515 > 15 );\n        }\n        v516 = v509 | (v513 << (32 - v512 - v510));\n        v264[160] = v516;\n        v517 = v512 + v510;\n        v264[161] = v517;\n        v518 = *(unsigned __int16 *)(v743 + 2 * v380 + 38);\n        v519 = *(unsigned __int8 *)(v518 + v382 + 37708);\n        v520 = *(_DWORD *)(v384 + 4 * v518 + 39256);\n        if ( v517 >= 8 )\n        {\n          v521 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v521) = HIBYTE(v516);\n            v521 = *v325 + 1;\n            *v325 = v521;\n            v516 = *v328 << 8;\n            *v328 = v516;\n            v522 = *v327;\n            v517 = *v327 - 8;\n            *v327 = v517;\n          }\n          while ( v522 > 15 );\n        }\n        v523 = v516 | (v520 << (32 - v519 - v517));\n        v264[160] = v523;\n        v524 = v519 + v517;\n        v264[161] = v524;\n        v525 = *(unsigned __int16 *)(v743 + 2 * v380 + 40);\n        v526 = *(unsigned __int8 *)(v525 + v382 + 37708);\n        v527 = *(_DWORD *)(v384 + 4 * v525 + 39256);\n        if ( v524 >= 8 )\n        {\n          v528 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v528) = HIBYTE(v523);\n            v528 = *v325 + 1;\n            *v325 = v528;\n            v523 = *v328 << 8;\n            *v328 = v523;\n            v529 = *v327;\n            v524 = *v327 - 8;\n            *v327 = v524;\n          }\n          while ( v529 > 15 );\n        }\n        v530 = v523 | (v527 << (32 - v526 - v524));\n        v264[160] = v530;\n        v531 = v526 + v524;\n        v264[161] = v531;\n        v532 = *(unsigned __int16 *)(v743 + 2 * v380 + 42);\n        v533 = *(unsigned __int8 *)(v532 + v382 + 37708);\n        v534 = *(_DWORD *)(v384 + 4 * v532 + 39256);\n        if ( v531 >= 8 )\n        {\n          v535 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v535) = HIBYTE(v530);\n            v535 = *v325 + 1;\n            *v325 = v535;\n            v530 = *v328 << 8;\n            *v328 = v530;\n            v536 = *v327;\n            v531 = *v327 - 8;\n            *v327 = v531;\n          }\n          while ( v536 > 15 );\n        }\n        v537 = v530 | (v534 << (32 - v533 - v531));\n        v264[160] = v537;\n        v538 = v533 + v531;\n        v264[161] = v538;\n        v539 = *(unsigned __int16 *)(v743 + 2 * v380 + 44);\n        v540 = *(unsigned __int8 *)(v539 + v382 + 37708);\n        v541 = *(_DWORD *)(v384 + 4 * v539 + 39256);\n        if ( v538 >= 8 )\n        {\n          v542 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v542) = HIBYTE(v537);\n            v542 = *v325 + 1;\n            *v325 = v542;\n            v537 = *v328 << 8;\n            *v328 = v537;\n            v543 = *v327;\n            v538 = *v327 - 8;\n            *v327 = v538;\n          }\n          while ( v543 > 15 );\n        }\n        v544 = v537 | (v541 << (32 - v540 - v538));\n        v264[160] = v544;\n        v545 = v540 + v538;\n        v264[161] = v545;\n        v546 = *(unsigned __int16 *)(v743 + 2 * v380 + 46);\n        v547 = *(unsigned __int8 *)(v546 + v382 + 37708);\n        v548 = *(_DWORD *)(v384 + 4 * v546 + 39256);\n        if ( v545 >= 8 )\n        {\n          v549 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v549) = HIBYTE(v544);\n            v549 = *v325 + 1;\n            *v325 = v549;\n            v544 = *v328 << 8;\n            *v328 = v544;\n            v550 = *v327;\n            v545 = *v327 - 8;\n            *v327 = v545;\n          }\n          while ( v550 > 15 );\n        }\n        v551 = v544 | (v548 << (32 - v547 - v545));\n        v264[160] = v551;\n        v552 = v547 + v545;\n        v264[161] = v552;\n        v553 = *(unsigned __int16 *)(v743 + 2 * v380 + 48);\n        v554 = *(unsigned __int8 *)(v553 + v382 + 37708);\n        v555 = *(_DWORD *)(v384 + 4 * v553 + 39256);\n        if ( v552 >= 8 )\n        {\n          v556 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v556) = HIBYTE(v551);\n            v556 = *v325 + 1;\n            *v325 = v556;\n            v551 = *v328 << 8;\n            *v328 = v551;\n            v557 = *v327;\n            v552 = *v327 - 8;\n            *v327 = v552;\n          }\n          while ( v557 > 15 );\n        }\n        v558 = v551 | (v555 << (32 - v554 - v552));\n        v264[160] = v558;\n        v559 = v554 + v552;\n        v264[161] = v559;\n        v560 = *(unsigned __int16 *)(v743 + 2 * v380 + 50);\n        v561 = *(unsigned __int8 *)(v560 + v382 + 37708);\n        v562 = *(_DWORD *)(v384 + 4 * v560 + 39256);\n        if ( v559 >= 8 )\n        {\n          v563 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v563) = HIBYTE(v558);\n            v563 = *v325 + 1;\n            *v325 = v563;\n            v558 = *v328 << 8;\n            *v328 = v558;\n            v564 = *v327;\n            v559 = *v327 - 8;\n            *v327 = v559;\n          }\n          while ( v564 > 15 );\n        }\n        v565 = v558 | (v562 << (32 - v561 - v559));\n        v264[160] = v565;\n        v566 = v561 + v559;\n        v264[161] = v566;\n        v567 = *(unsigned __int16 *)(v743 + 2 * v380 + 52);\n        v568 = *(unsigned __int8 *)(v567 + v382 + 37708);\n        v569 = *(_DWORD *)(v384 + 4 * v567 + 39256);\n        if ( v566 >= 8 )\n        {\n          v570 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v570) = HIBYTE(v565);\n            v570 = *v325 + 1;\n            *v325 = v570;\n            v565 = *v328 << 8;\n            *v328 = v565;\n            v571 = *v327;\n            v566 = *v327 - 8;\n            *v327 = v566;\n          }\n          while ( v571 > 15 );\n        }\n        v572 = v565 | (v569 << (32 - v568 - v566));\n        v264[160] = v572;\n        v573 = v568 + v566;\n        v264[161] = v573;\n        v574 = *(unsigned __int16 *)(v743 + 2 * v380 + 54);\n        v575 = *(unsigned __int8 *)(v574 + v382 + 37708);\n        v576 = *(_DWORD *)(v384 + 4 * v574 + 39256);\n        if ( v573 >= 8 )\n        {\n          v577 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v577) = HIBYTE(v572);\n            v577 = *v325 + 1;\n            *v325 = v577;\n            v572 = *v328 << 8;\n            *v328 = v572;\n            v578 = *v327;\n            v573 = *v327 - 8;\n            *v327 = v573;\n          }\n          while ( v578 > 15 );\n        }\n        v579 = v572 | (v576 << (32 - v575 - v573));\n        v264[160] = v579;\n        v580 = v575 + v573;\n        v264[161] = v580;\n        v581 = *(unsigned __int16 *)(v743 + 2 * v380 + 56);\n        v582 = *(unsigned __int8 *)(v581 + v382 + 37708);\n        v583 = *(_DWORD *)(v384 + 4 * v581 + 39256);\n        if ( v580 >= 8 )\n        {\n          v584 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v584) = HIBYTE(v579);\n            v584 = *v325 + 1;\n            *v325 = v584;\n            v579 = *v328 << 8;\n            *v328 = v579;\n            v585 = *v327;\n            v580 = *v327 - 8;\n            *v327 = v580;\n          }\n          while ( v585 > 15 );\n        }\n        v586 = v579 | (v583 << (32 - v582 - v580));\n        v264[160] = v586;\n        v587 = v582 + v580;\n        v264[161] = v587;\n        v588 = *(unsigned __int16 *)(v743 + 2 * v380 + 58);\n        v589 = *(unsigned __int8 *)(v588 + v382 + 37708);\n        v590 = *(_DWORD *)(v384 + 4 * v588 + 39256);\n        if ( v587 >= 8 )\n        {\n          v591 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v591) = HIBYTE(v586);\n            v591 = *v325 + 1;\n            *v325 = v591;\n            v586 = *v328 << 8;\n            *v328 = v586;\n            v592 = *v327;\n            v587 = *v327 - 8;\n            *v327 = v587;\n          }\n          while ( v592 > 15 );\n        }\n        v593 = v586 | (v590 << (32 - v589 - v587));\n        v264[160] = v593;\n        v594 = v589 + v587;\n        v264[161] = v594;\n        v595 = *(unsigned __int16 *)(v743 + 2 * v380 + 60);\n        v596 = *(unsigned __int8 *)(v595 + v382 + 37708);\n        v597 = *(_DWORD *)(v384 + 4 * v595 + 39256);\n        if ( v594 >= 8 )\n        {\n          v598 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v598) = HIBYTE(v593);\n            v598 = *v325 + 1;\n            *v325 = v598;\n            v593 = *v328 << 8;\n            *v328 = v593;\n            v599 = *v327;\n            v594 = *v327 - 8;\n            *v327 = v594;\n          }\n          while ( v599 > 15 );\n        }\n        v600 = v593 | (v597 << (32 - v596 - v594));\n        v264[160] = v600;\n        v601 = v596 + v594;\n        v264[161] = v601;\n        v602 = *(unsigned __int16 *)(v743 + 2 * v380 + 62);\n        v603 = *(unsigned __int8 *)(v602 + v382 + 37708);\n        v604 = *(_DWORD *)(v384 + 4 * v602 + 39256);\n        if ( v601 >= 8 )\n        {\n          v605 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v605) = HIBYTE(v600);\n            v605 = *v325 + 1;\n            *v325 = v605;\n            v600 = *v328 << 8;\n            *v328 = v600;\n            v606 = *v327;\n            v601 = *v327 - 8;\n            *v327 = v601;\n          }\n          while ( v606 > 15 );\n        }\n        v607 = v600 | (v604 << (32 - v603 - v601));\n        v264[160] = v607;\n        v608 = v603 + v601;\n        v264[161] = v608;\n        v609 = *(unsigned __int16 *)(v743 + 2 * v380 + 64);\n        v610 = *(unsigned __int8 *)(v609 + v382 + 37708);\n        v611 = *(_DWORD *)(v384 + 4 * v609 + 39256);\n        if ( v608 >= 8 )\n        {\n          v612 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v612) = HIBYTE(v607);\n            v612 = *v325 + 1;\n            *v325 = v612;\n            v607 = *v328 << 8;\n            *v328 = v607;\n            v613 = *v327;\n            v608 = *v327 - 8;\n            *v327 = v608;\n          }\n          while ( v613 > 15 );\n        }\n        v614 = v607 | (v611 << (32 - v610 - v608));\n        v264[160] = v614;\n        v615 = v610 + v608;\n        v264[161] = v615;\n        v616 = *(unsigned __int16 *)(v743 + 2 * v380 + 66);\n        v617 = *(unsigned __int8 *)(v616 + v382 + 37708);\n        v618 = *(_DWORD *)(v384 + 4 * v616 + 39256);\n        if ( v615 >= 8 )\n        {\n          v619 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v619) = HIBYTE(v614);\n            v619 = *v325 + 1;\n            *v325 = v619;\n            v614 = *v328 << 8;\n            *v328 = v614;\n            v620 = *v327;\n            v615 = *v327 - 8;\n            *v327 = v615;\n          }\n          while ( v620 > 15 );\n        }\n        v621 = v614 | (v618 << (32 - v617 - v615));\n        v264[160] = v621;\n        v622 = v617 + v615;\n        v264[161] = v622;\n        v623 = *(unsigned __int16 *)(v743 + 2 * v380 + 68);\n        v624 = *(unsigned __int8 *)(v623 + v382 + 37708);\n        v625 = *(_DWORD *)(v384 + 4 * v623 + 39256);\n        if ( v622 >= 8 )\n        {\n          v626 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v626) = HIBYTE(v621);\n            v626 = *v325 + 1;\n            *v325 = v626;\n            v621 = *v328 << 8;\n            *v328 = v621;\n            v627 = *v327;\n            v622 = *v327 - 8;\n            *v327 = v622;\n          }\n          while ( v627 > 15 );\n        }\n        v628 = v621 | (v625 << (32 - v624 - v622));\n        v264[160] = v628;\n        v629 = v624 + v622;\n        v264[161] = v629;\n        v630 = *(unsigned __int16 *)(v743 + 2 * v380 + 70);\n        v631 = *(unsigned __int8 *)(v630 + v382 + 37708);\n        v632 = *(_DWORD *)(v384 + 4 * v630 + 39256);\n        if ( v629 >= 8 )\n        {\n          v633 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v633) = HIBYTE(v628);\n            v633 = *v325 + 1;\n            *v325 = v633;\n            v628 = *v328 << 8;\n            *v328 = v628;\n            v634 = *v327;\n            v629 = *v327 - 8;\n            *v327 = v629;\n          }\n          while ( v634 > 15 );\n        }\n        v635 = v628 | (v632 << (32 - v631 - v629));\n        v264[160] = v635;\n        v636 = v631 + v629;\n        v264[161] = v636;\n        v637 = *(unsigned __int16 *)(v743 + 2 * v380 + 72);\n        v638 = *(unsigned __int8 *)(v637 + v382 + 37708);\n        v639 = *(_DWORD *)(v384 + 4 * v637 + 39256);\n        if ( v636 >= 8 )\n        {\n          v640 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v640) = HIBYTE(v635);\n            v640 = *v325 + 1;\n            *v325 = v640;\n            v635 = *v328 << 8;\n            *v328 = v635;\n            v641 = *v327;\n            v636 = *v327 - 8;\n            *v327 = v636;\n          }\n          while ( v641 > 15 );\n        }\n        v642 = v635 | (v639 << (32 - v638 - v636));\n        v264[160] = v642;\n        v643 = v638 + v636;\n        v264[161] = v643;\n        v644 = *(unsigned __int16 *)(v743 + 2 * v380 + 74);\n        v645 = *(unsigned __int8 *)(v644 + v382 + 37708);\n        v646 = *(_DWORD *)(v384 + 4 * v644 + 39256);\n        if ( v643 >= 8 )\n        {\n          v647 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v647) = HIBYTE(v642);\n            v647 = *v325 + 1;\n            *v325 = v647;\n            v642 = *v328 << 8;\n            *v328 = v642;\n            v648 = *v327;\n            v643 = *v327 - 8;\n            *v327 = v643;\n          }\n          while ( v648 > 15 );\n        }\n        v649 = v642 | (v646 << (32 - v645 - v643));\n        v264[160] = v649;\n        v650 = v645 + v643;\n        v264[161] = v650;\n        v651 = *(unsigned __int16 *)(v743 + 2 * v380 + 76);\n        v652 = *(unsigned __int8 *)(v651 + v382 + 37708);\n        v653 = *(_DWORD *)(v384 + 4 * v651 + 39256);\n        if ( v650 >= 8 )\n        {\n          v654 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v654) = HIBYTE(v649);\n            v654 = *v325 + 1;\n            *v325 = v654;\n            v649 = *v328 << 8;\n            *v328 = v649;\n            v655 = *v327;\n            v650 = *v327 - 8;\n            *v327 = v650;\n          }\n          while ( v655 > 15 );\n        }\n        v656 = v649 | (v653 << (32 - v652 - v650));\n        v264[160] = v656;\n        v657 = v652 + v650;\n        v264[161] = v657;\n        v658 = *(unsigned __int16 *)(v743 + 2 * v380 + 78);\n        v659 = *(unsigned __int8 *)(v658 + v382 + 37708);\n        v660 = *(_DWORD *)(v384 + 4 * v658 + 39256);\n        if ( v657 >= 8 )\n        {\n          v661 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v661) = HIBYTE(v656);\n            v661 = *v325 + 1;\n            *v325 = v661;\n            v656 = *v328 << 8;\n            *v328 = v656;\n            v662 = *v327;\n            v657 = *v327 - 8;\n            *v327 = v657;\n          }\n          while ( v662 > 15 );\n        }\n        v663 = v656 | (v660 << (32 - v659 - v657));\n        v264[160] = v663;\n        v664 = v659 + v657;\n        v264[161] = v664;\n        v665 = *(unsigned __int16 *)(v743 + 2 * v380 + 80);\n        v666 = *(unsigned __int8 *)(v665 + v382 + 37708);\n        v667 = *(_DWORD *)(v384 + 4 * v665 + 39256);\n        if ( v664 >= 8 )\n        {\n          v668 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v668) = HIBYTE(v663);\n            v668 = *v325 + 1;\n            *v325 = v668;\n            v663 = *v328 << 8;\n            *v328 = v663;\n            v669 = *v327;\n            v664 = *v327 - 8;\n            *v327 = v664;\n          }\n          while ( v669 > 15 );\n        }\n        v670 = v663 | (v667 << (32 - v666 - v664));\n        v264[160] = v670;\n        v671 = v666 + v664;\n        v264[161] = v671;\n        v672 = *(unsigned __int16 *)(v743 + 2 * v380 + 82);\n        v673 = *(unsigned __int8 *)(v672 + v382 + 37708);\n        v674 = *(_DWORD *)(v384 + 4 * v672 + 39256);\n        if ( v671 >= 8 )\n        {\n          v675 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v675) = HIBYTE(v670);\n            v675 = *v325 + 1;\n            *v325 = v675;\n            v670 = *v328 << 8;\n            *v328 = v670;\n            v676 = *v327;\n            v671 = *v327 - 8;\n            *v327 = v671;\n          }\n          while ( v676 > 15 );\n        }\n        v677 = v670 | (v674 << (32 - v673 - v671));\n        v264[160] = v677;\n        v678 = v673 + v671;\n        v264[161] = v678;\n        v679 = *(unsigned __int16 *)(v743 + 2 * v380 + 84);\n        v680 = *(unsigned __int8 *)(v679 + v382 + 37708);\n        v681 = *(_DWORD *)(v384 + 4 * v679 + 39256);\n        if ( v678 >= 8 )\n        {\n          v682 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v682) = HIBYTE(v677);\n            v682 = *v325 + 1;\n            *v325 = v682;\n            v677 = *v328 << 8;\n            *v328 = v677;\n            v683 = *v327;\n            v678 = *v327 - 8;\n            *v327 = v678;\n          }\n          while ( v683 > 15 );\n        }\n        v684 = v677 | (v681 << (32 - v680 - v678));\n        v264[160] = v684;\n        v685 = v680 + v678;\n        v264[161] = v685;\n        v686 = *(unsigned __int16 *)(v743 + 2 * v380 + 86);\n        v687 = *(unsigned __int8 *)(v686 + v382 + 37708);\n        v688 = *(_DWORD *)(v384 + 4 * v686 + 39256);\n        if ( v685 >= 8 )\n        {\n          v689 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v689) = HIBYTE(v684);\n            v689 = *v325 + 1;\n            *v325 = v689;\n            v684 = *v328 << 8;\n            *v328 = v684;\n            v690 = *v327;\n            v685 = *v327 - 8;\n            *v327 = v685;\n          }\n          while ( v690 > 15 );\n        }\n        v691 = v684 | (v688 << (32 - v687 - v685));\n        v264[160] = v691;\n        v692 = v687 + v685;\n        v264[161] = v692;\n        v693 = *(unsigned __int16 *)(v743 + 2 * v380 + 88);\n        v694 = *(unsigned __int8 *)(v693 + v382 + 37708);\n        v695 = *(_DWORD *)(v384 + 4 * v693 + 39256);\n        if ( v692 >= 8 )\n        {\n          v696 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v696) = HIBYTE(v691);\n            v696 = *v325 + 1;\n            *v325 = v696;\n            v691 = *v328 << 8;\n            *v328 = v691;\n            v697 = *v327;\n            v692 = *v327 - 8;\n            *v327 = v692;\n          }\n          while ( v697 > 15 );\n        }\n        v698 = v691 | (v695 << (32 - v694 - v692));\n        v264[160] = v698;\n        v699 = v694 + v692;\n        v264[161] = v699;\n        v700 = *(unsigned __int16 *)(v743 + 2 * v380 + 90);\n        v701 = *(unsigned __int8 *)(v700 + v382 + 37708);\n        v702 = *(_DWORD *)(v384 + 4 * v700 + 39256);\n        if ( v699 >= 8 )\n        {\n          v703 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v703) = HIBYTE(v698);\n            v703 = *v325 + 1;\n            *v325 = v703;\n            v698 = *v328 << 8;\n            *v328 = v698;\n            v704 = *v327;\n            v699 = *v327 - 8;\n            *v327 = v699;\n          }\n          while ( v704 > 15 );\n        }\n        v705 = v698 | (v702 << (32 - v701 - v699));\n        v264[160] = v705;\n        v706 = v701 + v699;\n        v264[161] = v706;\n        v707 = *(unsigned __int16 *)(v743 + 2 * v380 + 92);\n        v708 = *(unsigned __int8 *)(v707 + v382 + 37708);\n        v709 = *(_DWORD *)(v384 + 4 * v707 + 39256);\n        if ( v706 >= 8 )\n        {\n          v710 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v710) = HIBYTE(v705);\n            v710 = *v325 + 1;\n            *v325 = v710;\n            v705 = *v328 << 8;\n            *v328 = v705;\n            v711 = *v327;\n            v706 = *v327 - 8;\n            *v327 = v706;\n          }\n          while ( v711 > 15 );\n        }\n        v712 = v705 | (v709 << (32 - v708 - v706));\n        v264[160] = v712;\n        v713 = v708 + v706;\n        v264[161] = v713;\n        v714 = *(unsigned __int16 *)(v743 + 2 * v380 + 94);\n        v715 = *(unsigned __int8 *)(v714 + v382 + 37708);\n        v716 = *(_DWORD *)(v384 + 4 * v714 + 39256);\n        if ( v713 >= 8 )\n        {\n          v717 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v717) = HIBYTE(v712);\n            v717 = *v325 + 1;\n            *v325 = v717;\n            v712 = *v328 << 8;\n            *v328 = v712;\n            v718 = *v327;\n            v713 = *v327 - 8;\n            *v327 = v713;\n          }\n          while ( v718 > 15 );\n        }\n        v719 = v712 | (v716 << (32 - v715 - v713));\n        v264[160] = v719;\n        v720 = v715 + v713;\n        v264[161] = v720;\n        v721 = *(unsigned __int16 *)(v743 + 2 * v380 + 96);\n        v722 = *(unsigned __int8 *)(v721 + v382 + 37708);\n        v723 = *(_DWORD *)(v384 + 4 * v721 + 39256);\n        if ( v720 >= 8 )\n        {\n          v724 = *v325;\n          do\n          {\n            *(_BYTE *)(*v329 + v724) = HIBYTE(v719);\n            v724 = *v325 + 1;\n            *v325 = v724;\n            v719 = *v328 << 8;\n            *v328 = v719;\n            v725 = *v327;\n            v720 = *v327 - 8;\n            *v327 = v720;\n          }\n          while ( v725 > 15 );\n        }\n        v726 = v719 | (v723 << (32 - v722 - v720));\n        v264[160] = v726;\n        v727 = v722 + v720;\n        v264[161] = v727;\n        v728 = *(unsigned __int16 *)(v743 + 2LL * v756);\n        v729 = *(unsigned __int8 *)(v728 + v382 + 37708);\n        v730 = *(_DWORD *)(v384 + 4 * v728 + 39256);\n        if ( v727 < 8 )\n        {\n          v375 = v754;\n        }\n        else\n        {\n          v731 = *v325;\n          v375 = v754;\n          do\n          {\n            *(_BYTE *)(*v329 + v731) = HIBYTE(v726);\n            v731 = *v325 + 1;\n            *v325 = v731;\n            v726 = *v328 << 8;\n            *v328 = v726;\n            v732 = *v327;\n            v727 = *v327 - 8;\n            *v327 = v727;\n          }\n          while ( v732 > 15 );\n        }\n        *v328 = v726 | (v730 << (32 - v729 - v727));\n        *v327 = v729 + v727;\n      }\n      ++v375;\n      result = v264[167];\n      v376 = v753 + 1;\n    }\n    while ( (signed int)v753 + 1 < result );\n  }\n  if ( (_DWORD)v375 != (_DWORD)v751 )\n    sub_404F10(0xBBFu);\n  if ( v264[164] >= 3 )\n    result = fprintf(stderr, \"codes %d\\n\", (unsigned int)(*v325 - v358), v743);\n  return result;\n}\n", 
            "funcStartAddr": "0x408df0L", 
            "funcEndAddr": "0x40c5b4L", 
            "funcName": "sub_408DF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40C5C0(unsigned __int8 ***a1)\n{\n  unsigned __int8 ***v1; // r14\n  unsigned __int8 **v2; // r12\n  int v3; // eax\n  __m128i *v4; // r10\n  int *v5; // r11\n  int *v6; // r9\n  _DWORD *v7; // r8\n  signed int v8; // ecx\n  unsigned int v9; // edx\n  signed __int64 v10; // r13\n  int v11; // edx\n  signed __int64 v12; // rsi\n  signed int v13; // ebx\n  int v14; // ebp\n  unsigned int v15; // er15\n  int v16; // ebx\n  signed int v17; // er13\n  int v18; // ecx\n  int v19; // eax\n  __int64 v20; // rdi\n  bool v21; // zf\n  int *v22; // rax\n  signed __int64 result; // rax\n  unsigned int v24; // edx\n  int v25; // eax\n  __int64 v26; // rdi\n  int v27; // ecx\n  unsigned int v28; // edx\n  int v29; // eax\n  __int64 v30; // rdi\n  int v31; // ecx\n  unsigned int v32; // edx\n  int v33; // eax\n  __int64 v34; // rdi\n  int v35; // ecx\n  int v36; // edx\n  int v37; // edx\n  unsigned __int8 *v38; // rax\n  unsigned __int8 *v39; // rdi\n  __int64 v40; // rax\n  __int64 v41; // rcx\n  unsigned __int8 **v42; // rcx\n  int v43; // ecx\n  int v44; // ecx\n  int v45; // ecx\n  int v46; // ecx\n  int v47; // ecx\n  int v48; // er15\n  signed __int64 v49; // rbx\n  int v50; // ecx\n  int v51; // ecx\n  int v52; // ecx\n  int v53; // ecx\n  int v54; // ecx\n  int v55; // ecx\n  int v56; // ecx\n  int *v57; // r15\n  int v58; // ecx\n  int v59; // er12\n  signed __int64 v60; // r13\n  unsigned int v61; // edx\n  int v62; // ebx\n  int v63; // er11\n  signed __int64 v64; // r15\n  signed __int64 v65; // r12\n  unsigned int *v66; // r8\n  signed int v67; // eax\n  signed __int64 v68; // rbx\n  int *v69; // r8\n  int v70; // edx\n  int v71; // er12\n  signed __int64 v72; // r15\n  int *v73; // r8\n  int v74; // edx\n  int *v75; // rax\n  int v76; // edx\n  int v77; // er15\n  signed int v78; // er12\n  int v79; // ecx\n  int v80; // ecx\n  int v81; // ecx\n  int v82; // ecx\n  int v83; // ecx\n  int v84; // ecx\n  int v85; // ecx\n  int v86; // ecx\n  unsigned __int8 **v87; // rax\n  int v88; // esi\n  __int64 v89; // rbp\n  int v90; // ecx\n  int v91; // edx\n  __int64 v92; // rax\n  signed int v93; // ecx\n  unsigned int v94; // eax\n  unsigned __int8 **v95; // rdx\n  int v96; // esi\n  int v97; // er12\n  int v98; // ebx\n  __int64 v99; // rbp\n  unsigned int v100; // eax\n  unsigned int v101; // edx\n  unsigned __int8 **v102; // rax\n  int v103; // esi\n  __int64 v104; // rbp\n  unsigned int v105; // edx\n  unsigned __int8 **v106; // rax\n  int v107; // esi\n  __int64 v108; // rbp\n  unsigned int v109; // edx\n  unsigned __int8 **v110; // rax\n  int v111; // esi\n  __int64 v112; // rbp\n  unsigned int v113; // edx\n  unsigned __int8 **v114; // rax\n  int v115; // esi\n  __int64 v116; // rbp\n  unsigned int v117; // edx\n  unsigned __int8 **v118; // rax\n  int v119; // esi\n  __int64 v120; // rbp\n  int v121; // ecx\n  signed int v122; // eax\n  signed int v123; // ecx\n  unsigned int v124; // eax\n  unsigned __int8 **v125; // rdx\n  int v126; // esi\n  __int64 v127; // rbp\n  unsigned int v128; // eax\n  unsigned __int8 **v129; // rdx\n  int v130; // esi\n  __int64 v131; // rbp\n  unsigned int v132; // eax\n  unsigned __int8 **v133; // rdx\n  int v134; // esi\n  __int64 v135; // rbp\n  unsigned int v136; // eax\n  unsigned __int8 **v137; // rdx\n  int v138; // esi\n  __int64 v139; // rbp\n  unsigned int v140; // edx\n  unsigned __int8 **v141; // rax\n  int v142; // esi\n  __int64 v143; // rbp\n  unsigned int v144; // eax\n  unsigned __int8 **v145; // rdx\n  int v146; // esi\n  __int64 v147; // rbp\n  unsigned int v148; // eax\n  unsigned __int8 **v149; // rdx\n  int v150; // esi\n  __int64 v151; // rbp\n  unsigned int v152; // eax\n  unsigned __int8 **v153; // rdx\n  int v154; // esi\n  __int64 v155; // rbp\n  int v156; // ecx\n  unsigned int v157; // eax\n  int v158; // ecx\n  bool v159; // sf\n  int v160; // edx\n  int v161; // esi\n  signed int v162; // ecx\n  unsigned __int8 v163; // of\n  int v164; // ebx\n  unsigned int v165; // edx\n  unsigned __int8 **v166; // rax\n  int v167; // esi\n  __int64 v168; // rbp\n  unsigned int v169; // edx\n  unsigned __int8 **v170; // rax\n  int v171; // esi\n  __int64 v172; // rbp\n  unsigned int v173; // edx\n  unsigned __int8 **v174; // rax\n  int v175; // esi\n  __int64 v176; // rbp\n  unsigned int v177; // edx\n  unsigned __int8 **v178; // rax\n  int v179; // esi\n  __int64 v180; // rbp\n  unsigned int v181; // edx\n  unsigned __int8 **v182; // rax\n  int v183; // esi\n  __int64 v184; // rbp\n  unsigned int v185; // eax\n  unsigned __int8 **v186; // rdx\n  int v187; // esi\n  __int64 v188; // rbp\n  unsigned int v189; // eax\n  unsigned __int8 **v190; // rdx\n  int v191; // esi\n  __int64 v192; // rbp\n  unsigned int v193; // eax\n  unsigned __int8 **v194; // rdx\n  int v195; // esi\n  __int64 v196; // rbp\n  unsigned int v197; // eax\n  unsigned __int8 **v198; // rdx\n  int v199; // esi\n  __int64 v200; // rbp\n  int v201; // ecx\n  __m128i *v202; // rbx\n  int *v203; // rbp\n  _DWORD *v204; // r12\n  unsigned int v205; // esi\n  __int64 *v206; // rcx\n  int v207; // edi\n  __int64 v208; // rax\n  int v209; // esi\n  __int64 v210; // rcx\n  signed int v211; // eax\n  signed __int64 v212; // r15\n  int v213; // eax\n  int v214; // ecx\n  __int64 *v215; // rdx\n  int v216; // esi\n  __int64 v217; // rbp\n  unsigned int v218; // eax\n  signed int v219; // edx\n  int *v220; // r15\n  __int64 v221; // rax\n  signed __int64 v222; // rbx\n  unsigned int v223; // edx\n  int v224; // ecx\n  __m128i v225; // xmm0\n  int v226; // edx\n  int v227; // esi\n  __m128i v228; // xmm8\n  __m128i v229; // xmm9\n  __m128i v230; // xmm10\n  __m128i v231; // xmm4\n  __m128i v232; // xmm5\n  __m128i v233; // xmm6\n  __m128i v234; // xmm7\n  __m128i v235; // xmm1\n  __int64 v236; // rdi\n  __int64 v237; // rbp\n  __int64 v238; // rbp\n  __int64 v239; // rdi\n  int v240; // ecx\n  __m128i v241; // xmm1\n  __m128i v242; // xmm2\n  __int64 v243; // rsi\n  _DWORD *v244; // r12\n  __int64 v245; // rbp\n  __int64 v246; // rsi\n  char v247; // r8\n  unsigned __int8 v248; // r9\n  char v249; // dl\n  bool v250; // cf\n  char *v251; // rax\n  char v252; // dl\n  int v253; // eax\n  int v254; // esi\n  unsigned __int8 **v255; // rcx\n  int v256; // edx\n  __int64 v257; // rbp\n  unsigned int v258; // eax\n  unsigned int v259; // esi\n  __int64 *v260; // rcx\n  int v261; // edi\n  __int64 v262; // rbx\n  int v263; // esi\n  int v264; // eax\n  int v265; // eax\n  __int64 v266; // rcx\n  signed int v267; // ecx\n  int v268; // ebx\n  signed __int64 v269; // r12\n  unsigned int v270; // esi\n  unsigned __int8 **v271; // rax\n  int v272; // edx\n  __int64 v273; // rbp\n  signed int v274; // edi\n  int v275; // eax\n  int v276; // ecx\n  __int64 *v277; // rdx\n  int v278; // esi\n  __int64 v279; // rbp\n  unsigned int v280; // eax\n  signed int v281; // ecx\n  unsigned int v282; // eax\n  unsigned __int8 **v283; // rdx\n  int v284; // esi\n  __int64 v285; // rbp\n  int v286; // ecx\n  __int64 v287; // rcx\n  unsigned int *v288; // rcx\n  signed __int64 v289; // r12\n  __int64 v290; // r13\n  __m128i v291; // xmm9\n  __int64 v292; // rdx\n  int v293; // ebp\n  int v294; // er9\n  __m128i v295; // xmm2\n  __int64 v296; // rax\n  __m128i v297; // xmm8\n  __m128i v298; // xmm1\n  __m128i v299; // xmm3\n  __m128i v300; // xmm5\n  __m128i v301; // xmm4\n  __m128i v302; // xmm6\n  __m128i v303; // xmm7\n  __m128i v304; // xmm0\n  __m128i v305; // xmm6\n  __m128i v306; // xmm0\n  __m128i v307; // xmm0\n  __m128i v308; // xmm2\n  __m128i v309; // xmm3\n  __m128i v310; // xmm3\n  __m128i v311; // xmm0\n  __m128i v312; // xmm2\n  __m128i v313; // xmm0\n  __m128i v314; // xmm0\n  __m128i v315; // xmm1\n  __m128i v316; // xmm2\n  __m128i v317; // xmm2\n  __m128i v318; // xmm0\n  __m128i v319; // xmm1\n  unsigned __int8 *v320; // rax\n  __int64 v321; // rcx\n  int v322; // edx\n  int v323; // er13\n  __int64 v324; // r15\n  int v325; // er12\n  int v326; // ebx\n  __int64 v327; // rbp\n  signed __int64 v328; // rax\n  _DWORD *v329; // rcx\n  __int64 v330; // rax\n  signed int v331; // edx\n  unsigned __int8 **v332; // rcx\n  int v333; // esi\n  __int64 v334; // rbp\n  unsigned int v335; // eax\n  int v336; // eax\n  int v337; // edx\n  __int64 *v338; // rcx\n  int v339; // esi\n  __int64 v340; // rbp\n  int v341; // edx\n  __int64 *v342; // rsi\n  int v343; // edi\n  __int64 v344; // rcx\n  unsigned int v345; // eax\n  signed __int64 v346; // rcx\n  unsigned int v347; // ecx\n  signed int v348; // eax\n  signed int v349; // ecx\n  unsigned int v350; // ebp\n  unsigned int v351; // er15\n  unsigned __int8 v352; // r9\n  char v353; // bp\n  __int64 v354; // rdi\n  int v355; // edx\n  unsigned int v356; // ecx\n  __int64 v357; // r11\n  unsigned __int64 v358; // rbp\n  unsigned int v359; // er10\n  __int64 v360; // rdi\n  __int64 v361; // rbp\n  int v362; // edx\n  __int64 v363; // rbx\n  int v364; // er13\n  int v365; // ebp\n  int v366; // er8\n  int v367; // edi\n  __int64 v368; // rsi\n  __int64 v369; // rbx\n  __int64 v370; // rdx\n  int v371; // edi\n  signed __int64 v372; // rdx\n  int v373; // ecx\n  __int64 v374; // rsi\n  __int64 v375; // rcx\n  __int64 v376; // rcx\n  __int64 v377; // rdx\n  __int64 v378; // rdi\n  __int64 v379; // r10\n  __int64 v380; // rdx\n  __int64 v381; // rdi\n  unsigned int v382; // edx\n  __int64 v383; // rcx\n  unsigned __int64 v384; // rbp\n  __int64 v385; // rcx\n  __int64 v386; // rcx\n  signed int v387; // edx\n  __int64 v388; // rsi\n  signed int v389; // ebx\n  __int64 v390; // rdx\n  signed int v391; // edx\n  __int64 v392; // rax\n  int v393; // edx\n  unsigned __int8 **v394; // rcx\n  int v395; // esi\n  __int64 v396; // rbp\n  unsigned int v397; // eax\n  int v398; // ecx\n  __int64 v399; // r13\n  signed __int64 v400; // rcx\n  __m128i v401; // xmm1\n  __m128i v402; // xmm2\n  __m128i v403; // xmm3\n  int v404; // ecx\n  signed __int64 v405; // rdx\n  int v406; // ecx\n  int v407; // ecx\n  int v408; // ecx\n  __int64 i; // rcx\n  int v410; // edx\n  int v411; // edi\n  int v412; // edx\n  int v413; // edx\n  int v414; // edx\n  int *v415; // r12\n  __m128i *v416; // r15\n  signed __int64 v417; // rax\n  signed __int64 v418; // rcx\n  __m128i v419; // xmm1\n  __m128i v420; // xmm2\n  __m128i v421; // xmm3\n  __int64 v422; // rax\n  unsigned __int8 **v423; // rsi\n  __int64 v424; // rcx\n  int v425; // edx\n  unsigned __int8 **v426; // rsi\n  __int64 v427; // rdi\n  char v428; // bp\n  int v429; // edx\n  __int64 v430; // rdx\n  unsigned __int8 **v431; // rsi\n  unsigned __int8 **v432; // rax\n  __int64 v433; // rbp\n  __int64 v434; // rdi\n  int v435; // ecx\n  char v436; // si\n  int v437; // edx\n  int v438; // eax\n  int v439; // edx\n  __int64 v440; // rcx\n  int v441; // ecx\n  int v442; // esi\n  int v443; // edx\n  __m128i *v444; // r15\n  int *v445; // rbp\n  int *v446; // r12\n  _DWORD *v447; // r13\n  int v448; // ebp\n  unsigned __int8 **v449; // rax\n  signed int v450; // ecx\n  signed __int64 v451; // rdx\n  __int64 v452; // rsi\n  __int64 v453; // rdi\n  unsigned int v454; // ecx\n  unsigned int v455; // eax\n  int v456; // ecx\n  int v457; // eax\n  unsigned int v458; // eax\n  int v459; // edx\n  signed int v460; // ecx\n  __int64 v461; // rax\n  signed int v462; // edx\n  signed int v463; // edx\n  __int64 *v464; // rcx\n  int v465; // esi\n  __int64 v466; // rbp\n  unsigned int v467; // eax\n  signed int v468; // eax\n  unsigned int v469; // esi\n  __int64 *v470; // rcx\n  int v471; // edi\n  __int64 v472; // rax\n  int v473; // esi\n  signed __int64 v474; // rcx\n  int v475; // ecx\n  __int64 v476; // rdx\n  signed __int64 v477; // rbp\n  int v478; // edi\n  int v479; // [rsp+Ch] [rbp-1DCh]\n  int v480; // [rsp+Ch] [rbp-1DCh]\n  int v481; // [rsp+10h] [rbp-1D8h]\n  unsigned int *v482; // [rsp+10h] [rbp-1D8h]\n  int v483; // [rsp+18h] [rbp-1D0h]\n  signed __int64 v484; // [rsp+18h] [rbp-1D0h]\n  signed int v485; // [rsp+20h] [rbp-1C8h]\n  int v486; // [rsp+24h] [rbp-1C4h]\n  int v487; // [rsp+24h] [rbp-1C4h]\n  signed int v488; // [rsp+28h] [rbp-1C0h]\n  int v489; // [rsp+2Ch] [rbp-1BCh]\n  int v490; // [rsp+30h] [rbp-1B8h]\n  int v491; // [rsp+34h] [rbp-1B4h]\n  int v492; // [rsp+38h] [rbp-1B0h]\n  int *v493; // [rsp+40h] [rbp-1A8h]\n  signed __int64 v494; // [rsp+40h] [rbp-1A8h]\n  signed __int64 v495; // [rsp+40h] [rbp-1A8h]\n  int v496; // [rsp+40h] [rbp-1A8h]\n  int v497; // [rsp+48h] [rbp-1A0h]\n  unsigned int v498; // [rsp+50h] [rbp-198h]\n  int v499; // [rsp+58h] [rbp-190h]\n  int v500; // [rsp+5Ch] [rbp-18Ch]\n  int v501; // [rsp+60h] [rbp-188h]\n  int v502; // [rsp+64h] [rbp-184h]\n  int v503; // [rsp+68h] [rbp-180h]\n  unsigned int v504; // [rsp+6Ch] [rbp-17Ch]\n  signed int v505; // [rsp+70h] [rbp-178h]\n  int v506; // [rsp+74h] [rbp-174h]\n  int v507; // [rsp+78h] [rbp-170h]\n  unsigned int v508; // [rsp+7Ch] [rbp-16Ch]\n  int v509; // [rsp+80h] [rbp-168h]\n  int v510; // [rsp+84h] [rbp-164h]\n  int v511; // [rsp+88h] [rbp-160h]\n  signed int v512; // [rsp+8Ch] [rbp-15Ch]\n  signed int v513; // [rsp+90h] [rbp-158h]\n  int v514; // [rsp+98h] [rbp-150h]\n  int v515; // [rsp+A0h] [rbp-148h]\n  signed __int64 v516; // [rsp+A8h] [rbp-140h]\n  int v517; // [rsp+B0h] [rbp-138h]\n  __int64 v518; // [rsp+B8h] [rbp-130h]\n  int v519; // [rsp+C0h] [rbp-128h]\n  __int64 v520; // [rsp+C8h] [rbp-120h]\n  char v521; // [rsp+D1h] [rbp-117h]\n  char v522[6]; // [rsp+D2h] [rbp-116h]\n  __int64 v523; // [rsp+D8h] [rbp-110h]\n  __int128 v524; // [rsp+E0h] [rbp-108h]\n  int *v525; // [rsp+F0h] [rbp-F8h]\n  __m128i *v526; // [rsp+F8h] [rbp-F0h]\n  unsigned __int8 **v527; // [rsp+100h] [rbp-E8h]\n  unsigned __int8 **v528; // [rsp+108h] [rbp-E0h]\n  unsigned __int8 **v529; // [rsp+110h] [rbp-D8h]\n  unsigned __int8 ***v530; // [rsp+118h] [rbp-D0h]\n  unsigned __int8 ***v531; // [rsp+120h] [rbp-C8h]\n  unsigned __int8 ***v532; // [rsp+128h] [rbp-C0h]\n  signed int *v533; // [rsp+130h] [rbp-B8h]\n  _DWORD *v534; // [rsp+138h] [rbp-B0h]\n  int *v535; // [rsp+140h] [rbp-A8h]\n  int *v536; // [rsp+148h] [rbp-A0h]\n  int *v537; // [rsp+150h] [rbp-98h]\n  _DWORD *v538; // [rsp+158h] [rbp-90h]\n  _DWORD *v539; // [rsp+160h] [rbp-88h]\n  _DWORD *v540; // [rsp+168h] [rbp-80h]\n  signed int *v541; // [rsp+170h] [rbp-78h]\n  int *v542; // [rsp+178h] [rbp-70h]\n  int *v543; // [rsp+180h] [rbp-68h]\n  unsigned int *v544; // [rsp+188h] [rbp-60h]\n  int *v545; // [rsp+190h] [rbp-58h]\n  _DWORD *v546; // [rsp+198h] [rbp-50h]\n  int *v547; // [rsp+1A0h] [rbp-48h]\n  signed int *v548; // [rsp+1A8h] [rbp-40h]\n  int *v549; // [rsp+1B0h] [rbp-38h]\n\n  v1 = a1;\n  v2 = *a1;\n  v3 = *((_DWORD *)a1 + 2);\n  v4 = (__m128i *)((char *)a1 + 64036);\n  if ( v3 != 10 )\n  {\n    v10 = *((unsigned int *)a1 + 16009);\n    v486 = *((_DWORD *)a1 + 16010);\n    v11 = *((_DWORD *)a1 + 16011);\n    v490 = *((_DWORD *)a1 + 16012);\n    v517 = *((_DWORD *)a1 + 16013);\n    v488 = *((_DWORD *)a1 + 16014);\n    v515 = *((_DWORD *)a1 + 16015);\n    LODWORD(v516) = *((_DWORD *)a1 + 16016);\n    v514 = *((_DWORD *)a1 + 16017);\n    v498 = *((_DWORD *)a1 + 16018);\n    v489 = *((_DWORD *)a1 + 16019);\n    v492 = *((_DWORD *)a1 + 16020);\n    v513 = *((_DWORD *)a1 + 16021);\n    v520 = *((unsigned int *)a1 + 16022);\n    v518 = *((unsigned int *)a1 + 16023);\n    v12 = *((unsigned int *)a1 + 16024);\n    v13 = *((_DWORD *)a1 + 16025);\n    v497 = *((_DWORD *)a1 + 16026);\n    v491 = *((_DWORD *)a1 + 16027);\n    v519 = *((_DWORD *)a1 + 16028);\n    v485 = *((_DWORD *)a1 + 16029);\n    v529 = a1[8015];\n    v528 = a1[8016];\n    v527 = a1[8017];\n    v5 = (int *)(a1 + 8005);\n    v6 = (int *)((char *)a1 + 64044);\n    v7 = a1 + 8006;\n    v549 = (int *)((char *)a1 + 64052);\n    v548 = (signed int *)(a1 + 8007);\n    v547 = (int *)((char *)a1 + 64060);\n    v546 = a1 + 8008;\n    v545 = (int *)((char *)a1 + 64068);\n    v544 = (unsigned int *)(a1 + 8009);\n    v543 = (int *)((char *)a1 + 64076);\n    v542 = (int *)(a1 + 8010);\n    v541 = (signed int *)((char *)a1 + 64084);\n    v540 = a1 + 8011;\n    v539 = (_DWORD *)((char *)a1 + 64092);\n    v538 = a1 + 8012;\n    v537 = (int *)((char *)a1 + 64100);\n    v536 = (int *)(a1 + 8013);\n    v535 = (int *)((char *)a1 + 64108);\n    v534 = a1 + 8014;\n    v533 = (signed int *)((char *)a1 + 64116);\n    v532 = a1 + 8015;\n    v531 = a1 + 8016;\n    v530 = a1 + 8017;\n    switch ( v3 )\n    {\n      case 11:\n        v483 = v10;\n        v14 = v486;\n        v479 = v490;\n        LODWORD(v523) = v517;\n        v512 = v488;\n        v511 = v515;\n        v510 = v516;\n        v509 = v514;\n        v508 = v498;\n        v507 = v489;\n        v506 = v492;\n        v505 = v513;\n        v504 = v520;\n        v503 = v518;\n        v15 = v12;\n        v502 = v13;\n        v16 = v11;\n        v501 = v497;\n        v500 = v491;\n        v499 = v519;\n        v17 = v485;\n        v493 = (int *)((char *)a1 + 36);\n        v18 = *((_DWORD *)a1 + 9);\n        goto LABEL_12;\n      case 12:\n        v483 = v10;\n        v14 = v486;\n        v479 = v490;\n        LODWORD(v523) = v517;\n        v512 = v488;\n        v511 = v515;\n        v510 = v516;\n        v509 = v514;\n        v508 = v498;\n        v507 = v489;\n        v506 = v492;\n        v505 = v513;\n        v504 = v520;\n        v503 = v518;\n        v15 = v12;\n        v502 = v13;\n        v16 = v11;\n        v501 = v497;\n        v500 = v491;\n        v499 = v519;\n        v17 = v485;\n        v493 = (int *)((char *)a1 + 36);\n        v27 = *((_DWORD *)a1 + 9);\n        goto LABEL_21;\n      case 13:\n        v483 = v10;\n        v14 = v486;\n        v479 = v490;\n        LODWORD(v523) = v517;\n        v512 = v488;\n        v511 = v515;\n        v510 = v516;\n        v509 = v514;\n        v508 = v498;\n        v507 = v489;\n        v506 = v492;\n        v505 = v513;\n        v504 = v520;\n        v503 = v518;\n        v15 = v12;\n        v502 = v13;\n        v16 = v11;\n        v501 = v497;\n        v500 = v491;\n        v499 = v519;\n        v17 = v485;\n        v493 = (int *)((char *)a1 + 36);\n        v31 = *((_DWORD *)a1 + 9);\n        goto LABEL_33;\n      case 14:\n        v483 = v10;\n        v14 = v486;\n        v479 = v490;\n        LODWORD(v523) = v517;\n        v512 = v488;\n        v511 = v515;\n        v510 = v516;\n        v509 = v514;\n        v508 = v498;\n        v507 = v489;\n        v506 = v492;\n        v505 = v513;\n        v504 = v520;\n        v503 = v518;\n        v15 = v12;\n        v502 = v13;\n        v16 = v11;\n        v501 = v497;\n        v500 = v491;\n        v499 = v519;\n        v17 = v485;\n        v493 = (int *)((char *)a1 + 36);\n        goto LABEL_85;\n      case 15:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v43 = *((_DWORD *)a1 + 9);\n        goto LABEL_94;\n      case 16:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v44 = *((_DWORD *)a1 + 9);\n        goto LABEL_103;\n      case 17:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v45 = *((_DWORD *)a1 + 9);\n        goto LABEL_111;\n      case 18:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v46 = *((_DWORD *)a1 + 9);\n        goto LABEL_119;\n      case 19:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v47 = *((_DWORD *)a1 + 9);\n        goto LABEL_127;\n      case 20:\n        v481 = v13;\n        goto LABEL_138;\n      case 21:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v50 = *((_DWORD *)a1 + 9);\n        goto LABEL_146;\n      case 22:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v51 = *((_DWORD *)a1 + 9);\n        goto LABEL_154;\n      case 23:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v52 = *((_DWORD *)a1 + 9);\n        goto LABEL_162;\n      case 24:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v53 = *((_DWORD *)a1 + 9);\n        goto LABEL_170;\n      case 25:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v54 = *((_DWORD *)a1 + 9);\n        goto LABEL_178;\n      case 26:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v55 = *((_DWORD *)a1 + 9);\n        goto LABEL_186;\n      case 27:\n        v48 = v11;\n        v481 = v13;\n        v49 = v12;\n        v56 = *((_DWORD *)a1 + 9);\n        goto LABEL_194;\n      case 28:\n        goto LABEL_337;\n      case 29:\n        goto LABEL_381;\n      case 30:\n        goto LABEL_369;\n      case 31:\n        v481 = v13;\n        v483 = v10;\n        v57 = (int *)((char *)a1 + 36);\n        v58 = *((_DWORD *)a1 + 9);\n        goto LABEL_61;\n      case 32:\n        goto LABEL_297;\n      case 33:\n        goto LABEL_394;\n      case 34:\n        goto LABEL_437;\n      case 35:\n        *(_QWORD *)&v524 = a1 + 8005;\n        v63 = v11;\n        v481 = v13;\n        v64 = v12;\n        v65 = (signed __int64)(a1 + 8006);\n        v66 = (unsigned int *)((char *)a1 + 36);\n        v67 = *((_DWORD *)a1 + 9);\n        goto LABEL_446;\n      case 36:\n        goto LABEL_425;\n      case 37:\n        v480 = v11;\n        v481 = v13;\n        v68 = (signed __int64)(a1 + 8006);\n        v69 = (int *)((char *)a1 + 36);\n        v70 = *((_DWORD *)a1 + 9);\n        v71 = v497;\n        goto LABEL_285;\n      case 38:\n        goto LABEL_595;\n      case 39:\n        v480 = v11;\n        v481 = v13;\n        v72 = v12;\n        v68 = (signed __int64)(a1 + 8006);\n        v73 = (int *)((char *)a1 + 36);\n        v74 = *((_DWORD *)a1 + 9);\n        v71 = v497;\n        goto LABEL_608;\n      case 40:\n        goto LABEL_513;\n      case 41:\n        v480 = v11;\n        v72 = v12;\n        v75 = (int *)((char *)a1 + 36);\n        v76 = *((_DWORD *)a1 + 9);\n        v71 = v497;\n        goto LABEL_346;\n      case 42:\n        v481 = v13;\n        v493 = (int *)((char *)a1 + 36);\n        v43 = *((_DWORD *)a1 + 9);\n        v77 = v497;\n        v78 = v513;\n        goto LABEL_205;\n      case 43:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v79 = *((_DWORD *)a1 + 9);\n        goto LABEL_213;\n      case 44:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v80 = *((_DWORD *)a1 + 9);\n        goto LABEL_221;\n      case 45:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v81 = *((_DWORD *)a1 + 9);\n        goto LABEL_229;\n      case 46:\n        v481 = v13;\n        v483 = v10;\n        v493 = (int *)((char *)a1 + 36);\n        v82 = *((_DWORD *)a1 + 9);\n        goto LABEL_237;\n      case 47:\n        v481 = v13;\n        v83 = *((_DWORD *)a1 + 9);\n        goto LABEL_246;\n      case 48:\n        v48 = v11;\n        v481 = v13;\n        LODWORD(v49) = v12;\n        v84 = *((_DWORD *)a1 + 9);\n        goto LABEL_255;\n      case 49:\n        v48 = v11;\n        v481 = v13;\n        LODWORD(v49) = v12;\n        v85 = *((_DWORD *)a1 + 9);\n        goto LABEL_263;\n      case 50:\n        v48 = v11;\n        v481 = v13;\n        LODWORD(v49) = v12;\n        v86 = *((_DWORD *)a1 + 9);\n        break;\n      default:\n        sub_404F10(0xFA1u);\n        return result;\n    }\n    goto LABEL_271;\n  }\n  v5 = (int *)(a1 + 8005);\n  v6 = (int *)((char *)a1 + 64044);\n  v7 = a1 + 8006;\n  v549 = (int *)((char *)a1 + 64052);\n  v548 = (signed int *)(a1 + 8007);\n  v547 = (int *)((char *)a1 + 64060);\n  v546 = a1 + 8008;\n  v545 = (int *)((char *)a1 + 64068);\n  v544 = (unsigned int *)(a1 + 8009);\n  v543 = (int *)((char *)a1 + 64076);\n  v542 = (int *)(a1 + 8010);\n  v541 = (signed int *)((char *)a1 + 64084);\n  v540 = a1 + 8011;\n  v539 = (_DWORD *)((char *)a1 + 64092);\n  _mm_storeu_si128((__m128i *)a1 + 4008, (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)a1 + 64116), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)a1 + 64100), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)a1 + 64084), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)a1 + 64068), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)a1 + 64052), (__m128i)0LL);\n  _mm_storeu_si128(v4, (__m128i)0LL);\n  *((_DWORD *)a1 + 2) = 10;\n  v8 = *((_DWORD *)a1 + 9);\n  v538 = a1 + 8012;\n  v537 = (int *)((char *)a1 + 64100);\n  v536 = (int *)(a1 + 8013);\n  v535 = (int *)((char *)a1 + 64108);\n  v534 = a1 + 8014;\n  v533 = (signed int *)((char *)a1 + 64116);\n  v532 = a1 + 8015;\n  v531 = a1 + 8016;\n  v530 = a1 + 8017;\n  if ( v8 <= 7 )\n  {\n    v19 = *((_DWORD *)v2 + 2) - 1;\n    do\n    {\n      if ( v19 == -1 )\n      {\n        LODWORD(v12) = 0;\n        v527 = 0LL;\n        v528 = 0LL;\n        v529 = 0LL;\n        v485 = 0;\n        v519 = 0;\n        v491 = 0;\n        v497 = 0;\n        v481 = 0;\n        LODWORD(v518) = 0;\n        v520 = 0LL;\n        v513 = 0;\n        v492 = 0;\n        v489 = 0;\n        v498 = 0;\n        v514 = 0;\n        LODWORD(v516) = 0;\n        v515 = 0;\n        v488 = 0;\n        v517 = 0;\n        v490 = 0;\n        v11 = 0;\n        v486 = 0;\n        v483 = 0;\n        result = 0LL;\n        goto LABEL_463;\n      }\n      v20 = (__int64)*v2;\n      v9 = (*((_DWORD *)v1 + 8) << 8) | **v2;\n      *((_DWORD *)v1 + 8) = v9;\n      v8 += 8;\n      *((_DWORD *)v1 + 9) = v8;\n      *v2 = (unsigned __int8 *)(v20 + 1);\n      *((_DWORD *)v2 + 2) = v19;\n      v21 = (*((_DWORD *)v2 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v2 + 4);\n      --v19;\n    }\n    while ( v8 - 8 < 0 );\n  }\n  else\n  {\n    v9 = *((_DWORD *)a1 + 8);\n  }\n  v22 = (int *)((char *)v1 + 36);\n  v18 = v8 - 8;\n  v493 = v22;\n  *v22 = v18;\n  result = 4294967291LL;\n  v483 = 0;\n  v14 = 0;\n  v16 = 0;\n  v479 = 0;\n  LODWORD(v523) = 0;\n  v512 = 0;\n  v511 = 0;\n  v510 = 0;\n  v509 = 0;\n  v508 = 0;\n  v507 = 0;\n  v506 = 0;\n  v21 = (unsigned __int8)(v9 >> v18) == 66;\n  v505 = 0;\n  v504 = 0;\n  v503 = 0;\n  v15 = 0;\n  v502 = 0;\n  v501 = 0;\n  v500 = 0;\n  v499 = 0;\n  v17 = 0;\n  v529 = 0LL;\n  v528 = 0LL;\n  v527 = 0LL;\n  LODWORD(v12) = 0;\n  v485 = 0;\n  v519 = 0;\n  v491 = 0;\n  v497 = 0;\n  v481 = 0;\n  LODWORD(v518) = 0;\n  v520 = 0LL;\n  v513 = 0;\n  v492 = 0;\n  v489 = 0;\n  v498 = 0;\n  v514 = 0;\n  LODWORD(v516) = 0;\n  v515 = 0;\n  v488 = 0;\n  v517 = 0;\n  v490 = 0;\n  v11 = 0;\n  v486 = 0;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_12:\n  *((_DWORD *)v1 + 2) = 11;\n  if ( v18 < 8 )\n  {\n    v25 = *((_DWORD *)v2 + 2) - 1;\n    while ( v25 != -1 )\n    {\n      v26 = (__int64)*v2;\n      v24 = (*((_DWORD *)v1 + 8) << 8) | **v2;\n      *((_DWORD *)v1 + 8) = v24;\n      v18 += 8;\n      *((_DWORD *)v1 + 9) = v18;\n      *v2 = (unsigned __int8 *)(v26 + 1);\n      *((_DWORD *)v2 + 2) = v25;\n      v21 = (*((_DWORD *)v2 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v2 + 4);\n      --v25;\n      if ( v18 - 8 >= 0 )\n        goto LABEL_20;\n    }\nLABEL_96:\n    LODWORD(v12) = v15;\n    v485 = v17;\n    v519 = v499;\n    v491 = v500;\n    v497 = v501;\n    v481 = v502;\n    LODWORD(v518) = v503;\n    v520 = v504;\n    v513 = v505;\n    v492 = v506;\n    v489 = v507;\n    v498 = v508;\n    v514 = v509;\n    LODWORD(v516) = v510;\n    v515 = v511;\n    v488 = v512;\n    v517 = v523;\n    v490 = v479;\n    v11 = v16;\n    v486 = v14;\n    result = 0LL;\n    goto LABEL_463;\n  }\n  v24 = *((_DWORD *)v1 + 8);\nLABEL_20:\n  v27 = v18 - 8;\n  *v493 = v27;\n  result = 4294967291LL;\n  LODWORD(v12) = v15;\n  v485 = v17;\n  v519 = v499;\n  v491 = v500;\n  v497 = v501;\n  v481 = v502;\n  LODWORD(v518) = v503;\n  v520 = v504;\n  v513 = v505;\n  v492 = v506;\n  v489 = v507;\n  v498 = v508;\n  v514 = v509;\n  v21 = (unsigned __int8)(v24 >> v27) == 90;\n  LODWORD(v516) = v510;\n  v515 = v511;\n  v488 = v512;\n  v517 = v523;\n  v490 = v479;\n  v11 = v16;\n  v486 = v14;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_21:\n  *((_DWORD *)v1 + 2) = 12;\n  if ( v27 < 8 )\n  {\n    v29 = *((_DWORD *)v2 + 2) - 1;\n    while ( v29 != -1 )\n    {\n      v30 = (__int64)*v2;\n      v28 = (*((_DWORD *)v1 + 8) << 8) | **v2;\n      *((_DWORD *)v1 + 8) = v28;\n      v27 += 8;\n      *((_DWORD *)v1 + 9) = v27;\n      *v2 = (unsigned __int8 *)(v30 + 1);\n      *((_DWORD *)v2 + 2) = v29;\n      v21 = (*((_DWORD *)v2 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v2 + 4);\n      --v29;\n      if ( v27 - 8 >= 0 )\n        goto LABEL_28;\n    }\n    goto LABEL_96;\n  }\n  v28 = *((_DWORD *)v1 + 8);\nLABEL_28:\n  v31 = v27 - 8;\n  *v493 = v31;\n  result = 4294967291LL;\n  LODWORD(v12) = v15;\n  v485 = v17;\n  v519 = v499;\n  v491 = v500;\n  v497 = v501;\n  v481 = v502;\n  LODWORD(v518) = v503;\n  v520 = v504;\n  v513 = v505;\n  v492 = v506;\n  v489 = v507;\n  v498 = v508;\n  v514 = v509;\n  v21 = (unsigned __int8)(v28 >> v31) == 104;\n  LODWORD(v516) = v510;\n  v515 = v511;\n  v488 = v512;\n  v517 = v523;\n  v490 = v479;\n  v11 = v16;\n  v486 = v14;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_33:\n  *((_DWORD *)v1 + 2) = 13;\n  if ( v31 < 8 )\n  {\n    v33 = *((_DWORD *)v2 + 2) - 1;\n    while ( v33 != -1 )\n    {\n      v34 = (__int64)*v2;\n      v32 = (*((_DWORD *)v1 + 8) << 8) | **v2;\n      *((_DWORD *)v1 + 8) = v32;\n      v31 += 8;\n      *((_DWORD *)v1 + 9) = v31;\n      *v2 = (unsigned __int8 *)(v34 + 1);\n      *((_DWORD *)v2 + 2) = v33;\n      v21 = (*((_DWORD *)v2 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v2 + 4);\n      --v33;\n      if ( v31 - 8 >= 0 )\n        goto LABEL_40;\n    }\n    goto LABEL_96;\n  }\n  v32 = *((_DWORD *)v1 + 8);\nLABEL_40:\n  v35 = v31 - 8;\n  v36 = (unsigned __int8)(v32 >> v35);\n  *((_DWORD *)v1 + 9) = v35;\n  *((_DWORD *)v1 + 10) = v36;\n  result = 4294967291LL;\n  if ( (unsigned int)(v36 - 49) > 8 )\n  {\n    LODWORD(v12) = v15;\n    v485 = v17;\n    v519 = v499;\n    v491 = v500;\n    v497 = v501;\n    v481 = v502;\n    LODWORD(v518) = v503;\n    v520 = v504;\n    v513 = v505;\n    v492 = v506;\n    v489 = v507;\n    v498 = v508;\n    v514 = v509;\n    LODWORD(v516) = v510;\n    v515 = v511;\n    v488 = v512;\n    v517 = v523;\n    v490 = v479;\n    v11 = v16;\n    v486 = v14;\n    goto LABEL_463;\n  }\n  *((_QWORD *)&v524 + 1) = v7;\n  v525 = v6;\n  *(_QWORD *)&v524 = v5;\n  v526 = v4;\n  v37 = v36 - 48;\n  *((_DWORD *)v1 + 10) = v37;\n  v38 = v2[7];\n  v39 = v2[9];\n  if ( !*((_BYTE *)v1 + 44) )\n  {\n    v92 = ((__int64 (__fastcall *)(unsigned __int8 *, _QWORD, signed __int64))v38)(\n            v39,\n            (unsigned int)(400000 * v37),\n            1LL);\n    v1[394] = (unsigned __int8 **)v92;\n    if ( v92 )\n    {\n      v4 = v526;\n      v5 = (int *)v524;\n      v6 = v525;\n      v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n      goto LABEL_85;\n    }\n    LODWORD(v12) = v15;\n    v485 = v17;\n    v519 = v499;\n    v491 = v500;\n    v497 = v501;\n    v481 = v502;\n    LODWORD(v518) = v503;\n    v520 = v504;\n    v513 = v505;\n    v492 = v506;\n    v489 = v507;\n    v498 = v508;\n    v514 = v509;\n    LODWORD(v516) = v510;\n    v515 = v511;\n    v488 = v512;\n    v517 = v523;\n    v490 = v479;\n    v11 = v16;\n    v486 = v14;\n    result = 4294967293LL;\nLABEL_284:\n    v4 = v526;\n    v5 = (int *)v524;\n    v6 = v525;\n    v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n    goto LABEL_463;\n  }\n  v1[395] = (unsigned __int8 **)((__int64 (__fastcall *)(unsigned __int8 *, _QWORD, signed __int64))v38)(\n                                  v39,\n                                  (unsigned int)(200000 * v37),\n                                  1LL);\n  v40 = ((__int64 (__fastcall *)(unsigned __int8 *, _QWORD, signed __int64))v2[7])(\n          v2[9],\n          (unsigned int)(100000 * *((_DWORD *)v1 + 10) >> 1),\n          1LL);\n  v41 = v40;\n  v1[396] = (unsigned __int8 **)v40;\n  result = 4294967293LL;\n  if ( !v41 )\n  {\n    LODWORD(v12) = v15;\n    v485 = v17;\n    v519 = v499;\n    v491 = v500;\n    v497 = v501;\n    v481 = v502;\n    LODWORD(v518) = v503;\n    v520 = v504;\n    v513 = v505;\n    v492 = v506;\n    v489 = v507;\n    v498 = v508;\n    v514 = v509;\n    LODWORD(v516) = v510;\n    v515 = v511;\n    v488 = v512;\n    v517 = v523;\n    v490 = v479;\n    v11 = v16;\n    v486 = v14;\n    goto LABEL_284;\n  }\n  v42 = v1[395];\n  LODWORD(v12) = v15;\n  v485 = v17;\n  v519 = v499;\n  v491 = v500;\n  v497 = v501;\n  v481 = v502;\n  LODWORD(v518) = v503;\n  v520 = v504;\n  v513 = v505;\n  v492 = v506;\n  v489 = v507;\n  v498 = v508;\n  v514 = v509;\n  LODWORD(v516) = v510;\n  v515 = v511;\n  v488 = v512;\n  v517 = v523;\n  v490 = v479;\n  v11 = v16;\n  v486 = v14;\n  v4 = v526;\n  v5 = (int *)v524;\n  v6 = v525;\n  v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n  if ( !v42 )\n    goto LABEL_463;\nLABEL_85:\n  *((_DWORD *)v1 + 2) = 14;\n  v93 = *((_DWORD *)v1 + 9);\n  if ( v93 < 8 )\n  {\n    v95 = *v1;\n    v96 = *((_DWORD *)*v1 + 2) - 1;\n    while ( v96 != -1 )\n    {\n      v97 = v16;\n      v98 = v14;\n      v99 = (__int64)*v95;\n      v94 = (*((_DWORD *)v1 + 8) << 8) | **v95;\n      *((_DWORD *)v1 + 8) = v94;\n      v93 += 8;\n      *((_DWORD *)v1 + 9) = v93;\n      *v95 = (unsigned __int8 *)(v99 + 1);\n      *((_DWORD *)v95 + 2) = v96;\n      v21 = (*((_DWORD *)v95 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v95 + 4);\n      --v96;\n      v14 = v98;\n      v16 = v97;\n      if ( v93 - 8 >= 0 )\n        goto LABEL_92;\n    }\n    goto LABEL_96;\n  }\n  v94 = *((_DWORD *)v1 + 8);\nLABEL_92:\n  v43 = v93 - 8;\n  v100 = v94 >> v43;\n  *v493 = v43;\n  if ( (_BYTE)v100 == 23 )\n  {\n    v486 = v14;\n    v11 = v16;\n    v490 = v479;\n    v517 = v523;\n    v488 = v512;\n    v515 = v511;\n    LODWORD(v516) = v510;\n    v514 = v509;\n    v498 = v508;\n    v489 = v507;\n    v492 = v506;\n    v78 = v505;\n    v520 = v504;\n    LODWORD(v518) = v503;\n    LODWORD(v12) = v15;\n    v481 = v502;\n    v77 = v501;\n    v491 = v500;\n    v519 = v499;\n    v485 = v17;\n    LODWORD(v10) = v483;\nLABEL_205:\n    v480 = v11;\n    v164 = v12;\n    *((_DWORD *)v1 + 2) = 42;\n    v483 = v10;\n    v497 = v77;\n    v513 = v78;\n    if ( v43 < 8 )\n    {\n      v166 = *v1;\n      v167 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v167 == -1 )\n        {\n          result = 0LL;\n          LODWORD(v12) = v164;\n          goto LABEL_462;\n        }\n        v168 = (__int64)*v166;\n        v165 = (*((_DWORD *)v1 + 8) << 8) | **v166;\n        *((_DWORD *)v1 + 8) = v165;\n        v43 += 8;\n        *((_DWORD *)v1 + 9) = v43;\n        *v166 = (unsigned __int8 *)(v168 + 1);\n        *((_DWORD *)v166 + 2) = v167;\n        v21 = (*((_DWORD *)v166 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v166 + 4);\n        --v167;\n      }\n      while ( v43 - 8 < 0 );\n    }\n    else\n    {\n      v165 = *((_DWORD *)v1 + 8);\n    }\n    v79 = v43 - 8;\n    *v493 = v79;\n    result = 4294967292LL;\n    v21 = (unsigned __int8)(v165 >> v79) == 114;\n    LODWORD(v12) = v164;\n    v11 = v480;\n    if ( !v21 )\n      goto LABEL_463;\nLABEL_213:\n    v48 = v11;\n    LODWORD(v49) = v12;\n    *((_DWORD *)v1 + 2) = 43;\n    if ( v79 < 8 )\n    {\n      v170 = *v1;\n      v171 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v171 == -1 )\n          goto LABEL_356;\n        v172 = (__int64)*v170;\n        v169 = (*((_DWORD *)v1 + 8) << 8) | **v170;\n        *((_DWORD *)v1 + 8) = v169;\n        v79 += 8;\n        *((_DWORD *)v1 + 9) = v79;\n        *v170 = (unsigned __int8 *)(v172 + 1);\n        *((_DWORD *)v170 + 2) = v171;\n        v21 = (*((_DWORD *)v170 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v170 + 4);\n        --v171;\n      }\n      while ( v79 - 8 < 0 );\n    }\n    else\n    {\n      v169 = *((_DWORD *)v1 + 8);\n    }\n    v80 = v79 - 8;\n    *v493 = v80;\n    result = 4294967292LL;\n    v21 = (unsigned __int8)(v169 >> v80) == 69;\n    LODWORD(v12) = v49;\n    v11 = v48;\n    if ( !v21 )\n      goto LABEL_463;\nLABEL_221:\n    v48 = v11;\n    LODWORD(v49) = v12;\n    *((_DWORD *)v1 + 2) = 44;\n    if ( v80 < 8 )\n    {\n      v174 = *v1;\n      v175 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v175 == -1 )\n          goto LABEL_356;\n        v176 = (__int64)*v174;\n        v173 = (*((_DWORD *)v1 + 8) << 8) | **v174;\n        *((_DWORD *)v1 + 8) = v173;\n        v80 += 8;\n        *((_DWORD *)v1 + 9) = v80;\n        *v174 = (unsigned __int8 *)(v176 + 1);\n        *((_DWORD *)v174 + 2) = v175;\n        v21 = (*((_DWORD *)v174 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v174 + 4);\n        --v175;\n      }\n      while ( v80 - 8 < 0 );\n    }\n    else\n    {\n      v173 = *((_DWORD *)v1 + 8);\n    }\n    v81 = v80 - 8;\n    *v493 = v81;\n    result = 4294967292LL;\n    v21 = (unsigned __int8)(v173 >> v81) == 56;\n    LODWORD(v12) = v49;\n    v11 = v48;\n    if ( !v21 )\n      goto LABEL_463;\nLABEL_229:\n    v48 = v11;\n    LODWORD(v49) = v12;\n    *((_DWORD *)v1 + 2) = 45;\n    if ( v81 < 8 )\n    {\n      v178 = *v1;\n      v179 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v179 == -1 )\n          goto LABEL_356;\n        v180 = (__int64)*v178;\n        v177 = (*((_DWORD *)v1 + 8) << 8) | **v178;\n        *((_DWORD *)v1 + 8) = v177;\n        v81 += 8;\n        *((_DWORD *)v1 + 9) = v81;\n        *v178 = (unsigned __int8 *)(v180 + 1);\n        *((_DWORD *)v178 + 2) = v179;\n        v21 = (*((_DWORD *)v178 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v178 + 4);\n        --v179;\n      }\n      while ( v81 - 8 < 0 );\n    }\n    else\n    {\n      v177 = *((_DWORD *)v1 + 8);\n    }\n    v82 = v81 - 8;\n    *v493 = v82;\n    result = 4294967292LL;\n    v21 = (unsigned __int8)(v177 >> v82) == 80;\n    LODWORD(v12) = v49;\n    v11 = v48;\n    if ( !v21 )\n      goto LABEL_463;\nLABEL_237:\n    *((_DWORD *)v1 + 2) = 46;\n    v48 = v11;\n    LODWORD(v49) = v12;\n    if ( v82 < 8 )\n    {\n      v182 = *v1;\n      v183 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v183 == -1 )\n          goto LABEL_356;\n        v184 = (__int64)*v182;\n        v181 = (*((_DWORD *)v1 + 8) << 8) | **v182;\n        *((_DWORD *)v1 + 8) = v181;\n        v82 += 8;\n        *((_DWORD *)v1 + 9) = v82;\n        *v182 = (unsigned __int8 *)(v184 + 1);\n        *((_DWORD *)v182 + 2) = v183;\n        v21 = (*((_DWORD *)v182 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v182 + 4);\n        --v183;\n      }\n      while ( v82 - 8 < 0 );\n    }\n    else\n    {\n      v181 = *((_DWORD *)v1 + 8);\n    }\n    v83 = v82 - 8;\n    *v493 = v83;\n    result = 4294967292LL;\n    LODWORD(v12) = v49;\n    if ( (unsigned __int8)(v181 >> v83) != -112 )\n    {\nLABEL_248:\n      v11 = v48;\n      goto LABEL_463;\n    }\n    *((_DWORD *)v1 + 795) = 0;\n    LODWORD(v10) = v483;\n    v11 = v48;\nLABEL_246:\n    v48 = v11;\n    LODWORD(v49) = v12;\n    *((_DWORD *)v1 + 2) = 47;\n    if ( v83 < 8 )\n    {\n      v186 = *v1;\n      v187 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v187 == -1 )\n          goto LABEL_355;\n        v188 = (__int64)*v186;\n        v185 = (*((_DWORD *)v1 + 8) << 8) | **v186;\n        *((_DWORD *)v1 + 8) = v185;\n        v83 += 8;\n        *((_DWORD *)v1 + 9) = v83;\n        *v186 = (unsigned __int8 *)(v188 + 1);\n        *((_DWORD *)v186 + 2) = v187;\n        v21 = (*((_DWORD *)v186 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v186 + 4);\n        --v187;\n      }\n      while ( v83 - 8 < 0 );\n    }\n    else\n    {\n      v185 = *((_DWORD *)v1 + 8);\n    }\n    v84 = v83 - 8;\n    *((_DWORD *)v1 + 9) = v84;\n    *((_DWORD *)v1 + 795) = (*((_DWORD *)v1 + 795) << 8) | (unsigned __int8)(v185 >> v84);\nLABEL_255:\n    *((_DWORD *)v1 + 2) = 48;\n    if ( v84 < 8 )\n    {\n      v190 = *v1;\n      v191 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v191 == -1 )\n          goto LABEL_355;\n        v192 = (__int64)*v190;\n        v189 = (*((_DWORD *)v1 + 8) << 8) | **v190;\n        *((_DWORD *)v1 + 8) = v189;\n        v84 += 8;\n        *((_DWORD *)v1 + 9) = v84;\n        *v190 = (unsigned __int8 *)(v192 + 1);\n        *((_DWORD *)v190 + 2) = v191;\n        v21 = (*((_DWORD *)v190 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v190 + 4);\n        --v191;\n      }\n      while ( v84 - 8 < 0 );\n    }\n    else\n    {\n      v189 = *((_DWORD *)v1 + 8);\n    }\n    v85 = v84 - 8;\n    *((_DWORD *)v1 + 9) = v85;\n    *((_DWORD *)v1 + 795) = (*((_DWORD *)v1 + 795) << 8) | (unsigned __int8)(v189 >> v85);\nLABEL_263:\n    *((_DWORD *)v1 + 2) = 49;\n    if ( v85 < 8 )\n    {\n      v194 = *v1;\n      v195 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v195 == -1 )\n          goto LABEL_355;\n        v196 = (__int64)*v194;\n        v193 = (*((_DWORD *)v1 + 8) << 8) | **v194;\n        *((_DWORD *)v1 + 8) = v193;\n        v85 += 8;\n        *((_DWORD *)v1 + 9) = v85;\n        *v194 = (unsigned __int8 *)(v196 + 1);\n        *((_DWORD *)v194 + 2) = v195;\n        v21 = (*((_DWORD *)v194 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v194 + 4);\n        --v195;\n      }\n      while ( v85 - 8 < 0 );\n    }\n    else\n    {\n      v193 = *((_DWORD *)v1 + 8);\n    }\n    v86 = v85 - 8;\n    *((_DWORD *)v1 + 9) = v86;\n    *((_DWORD *)v1 + 795) = (*((_DWORD *)v1 + 795) << 8) | (unsigned __int8)(v193 >> v86);\nLABEL_271:\n    *((_DWORD *)v1 + 2) = 50;\n    v483 = v10;\n    if ( v86 < 8 )\n    {\n      v198 = *v1;\n      v199 = *((_DWORD *)*v1 + 2) - 1;\n      do\n      {\n        if ( v199 == -1 )\n          goto LABEL_356;\n        v200 = (__int64)*v198;\n        v197 = (*((_DWORD *)v1 + 8) << 8) | **v198;\n        *((_DWORD *)v1 + 8) = v197;\n        v86 += 8;\n        *((_DWORD *)v1 + 9) = v86;\n        *v198 = (unsigned __int8 *)(v200 + 1);\n        *((_DWORD *)v198 + 2) = v199;\n        v21 = (*((_DWORD *)v198 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v198 + 4);\n        --v199;\n      }\n      while ( v86 - 8 < 0 );\n    }\n    else\n    {\n      v197 = *((_DWORD *)v1 + 8);\n    }\n    v201 = v86 - 8;\n    *((_DWORD *)v1 + 9) = v201;\n    *((_DWORD *)v1 + 795) = (*((_DWORD *)v1 + 795) << 8) | (unsigned __int8)(v197 >> v201);\n    *((_DWORD *)v1 + 2) = 1;\n    result = 4LL;\nLABEL_357:\n    LODWORD(v12) = v49;\n    v11 = v48;\n    goto LABEL_463;\n  }\n  v21 = (_BYTE)v100 == 49;\n  v486 = v14;\n  v11 = v16;\n  v490 = v479;\n  v517 = v523;\n  v488 = v512;\n  v515 = v511;\n  LODWORD(v516) = v510;\n  v514 = v509;\n  v498 = v508;\n  v489 = v507;\n  v492 = v506;\n  v513 = v505;\n  v520 = v504;\n  LODWORD(v518) = v503;\n  v12 = v15;\n  v481 = v502;\n  v497 = v501;\n  v491 = v500;\n  v519 = v499;\n  v485 = v17;\n  result = 4294967292LL;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_94:\n  v48 = v11;\n  v49 = v12;\n  *((_DWORD *)v1 + 2) = 15;\n  if ( v43 < 8 )\n  {\n    v102 = *v1;\n    v103 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v103 == -1 )\n        goto LABEL_356;\n      v104 = (__int64)*v102;\n      v101 = (*((_DWORD *)v1 + 8) << 8) | **v102;\n      *((_DWORD *)v1 + 8) = v101;\n      v43 += 8;\n      *((_DWORD *)v1 + 9) = v43;\n      *v102 = (unsigned __int8 *)(v104 + 1);\n      *((_DWORD *)v102 + 2) = v103;\n      v21 = (*((_DWORD *)v102 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v102 + 4);\n      --v103;\n    }\n    while ( v43 - 8 < 0 );\n  }\n  else\n  {\n    v101 = *((_DWORD *)v1 + 8);\n  }\n  v44 = v43 - 8;\n  *v493 = v44;\n  result = 4294967292LL;\n  v21 = (unsigned __int8)(v101 >> v44) == 65;\n  v12 = v49;\n  v11 = v48;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_103:\n  v48 = v11;\n  v49 = v12;\n  *((_DWORD *)v1 + 2) = 16;\n  if ( v44 < 8 )\n  {\n    v106 = *v1;\n    v107 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v107 == -1 )\n        goto LABEL_356;\n      v108 = (__int64)*v106;\n      v105 = (*((_DWORD *)v1 + 8) << 8) | **v106;\n      *((_DWORD *)v1 + 8) = v105;\n      v44 += 8;\n      *((_DWORD *)v1 + 9) = v44;\n      *v106 = (unsigned __int8 *)(v108 + 1);\n      *((_DWORD *)v106 + 2) = v107;\n      v21 = (*((_DWORD *)v106 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v106 + 4);\n      --v107;\n    }\n    while ( v44 - 8 < 0 );\n  }\n  else\n  {\n    v105 = *((_DWORD *)v1 + 8);\n  }\n  v45 = v44 - 8;\n  *v493 = v45;\n  result = 4294967292LL;\n  v21 = (unsigned __int8)(v105 >> v45) == 89;\n  v12 = v49;\n  v11 = v48;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_111:\n  v48 = v11;\n  v49 = v12;\n  *((_DWORD *)v1 + 2) = 17;\n  if ( v45 < 8 )\n  {\n    v110 = *v1;\n    v111 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v111 == -1 )\n        goto LABEL_356;\n      v112 = (__int64)*v110;\n      v109 = (*((_DWORD *)v1 + 8) << 8) | **v110;\n      *((_DWORD *)v1 + 8) = v109;\n      v45 += 8;\n      *((_DWORD *)v1 + 9) = v45;\n      *v110 = (unsigned __int8 *)(v112 + 1);\n      *((_DWORD *)v110 + 2) = v111;\n      v21 = (*((_DWORD *)v110 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v110 + 4);\n      --v111;\n    }\n    while ( v45 - 8 < 0 );\n  }\n  else\n  {\n    v109 = *((_DWORD *)v1 + 8);\n  }\n  v46 = v45 - 8;\n  *v493 = v46;\n  result = 4294967292LL;\n  v21 = (unsigned __int8)(v109 >> v46) == 38;\n  v12 = v49;\n  v11 = v48;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_119:\n  v48 = v11;\n  v49 = v12;\n  *((_DWORD *)v1 + 2) = 18;\n  if ( v46 < 8 )\n  {\n    v114 = *v1;\n    v115 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v115 == -1 )\n        goto LABEL_356;\n      v116 = (__int64)*v114;\n      v113 = (*((_DWORD *)v1 + 8) << 8) | **v114;\n      *((_DWORD *)v1 + 8) = v113;\n      v46 += 8;\n      *((_DWORD *)v1 + 9) = v46;\n      *v114 = (unsigned __int8 *)(v116 + 1);\n      *((_DWORD *)v114 + 2) = v115;\n      v21 = (*((_DWORD *)v114 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v114 + 4);\n      --v115;\n    }\n    while ( v46 - 8 < 0 );\n  }\n  else\n  {\n    v113 = *((_DWORD *)v1 + 8);\n  }\n  v47 = v46 - 8;\n  *v493 = v47;\n  result = 4294967292LL;\n  v21 = (unsigned __int8)(v113 >> v47) == 83;\n  v12 = v49;\n  v11 = v48;\n  if ( !v21 )\n    goto LABEL_463;\nLABEL_127:\n  *((_DWORD *)v1 + 2) = 19;\n  v48 = v11;\n  v49 = v12;\n  if ( v47 < 8 )\n  {\n    v118 = *v1;\n    v119 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v119 == -1 )\n        goto LABEL_356;\n      v120 = (__int64)*v118;\n      v117 = (*((_DWORD *)v1 + 8) << 8) | **v118;\n      *((_DWORD *)v1 + 8) = v117;\n      v47 += 8;\n      *((_DWORD *)v1 + 9) = v47;\n      *v118 = (unsigned __int8 *)(v120 + 1);\n      *((_DWORD *)v118 + 2) = v119;\n      v21 = (*((_DWORD *)v118 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v118 + 4);\n      --v119;\n    }\n    while ( v47 - 8 < 0 );\n  }\n  else\n  {\n    v117 = *((_DWORD *)v1 + 8);\n  }\n  v121 = v47 - 8;\n  *v493 = v121;\n  result = 4294967292LL;\n  v12 = v49;\n  if ( (unsigned __int8)(v117 >> v121) != 89 )\n    goto LABEL_248;\n  v122 = *((_DWORD *)v1 + 13);\n  ++*((_DWORD *)v1 + 12);\n  LODWORD(v10) = v483;\n  if ( v122 >= 2 )\n  {\n    v10 = v49;\n    v202 = v4;\n    *(_QWORD *)&v524 = v5;\n    v203 = v6;\n    v204 = v7;\n    fprintf(stderr, \"\\n    [%d: huff+mtf \");\n    v12 = v10;\n    LODWORD(v10) = v483;\n    v7 = v204;\n    v6 = v203;\n    v5 = (int *)v524;\n    v4 = v202;\n  }\n  *((_DWORD *)v1 + 794) = 0;\n  v11 = v48;\nLABEL_138:\n  v48 = v11;\n  v49 = v12;\n  *((_DWORD *)v1 + 2) = 20;\n  v123 = *((_DWORD *)v1 + 9);\n  if ( v123 < 8 )\n  {\n    v125 = *v1;\n    v126 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v126 == -1 )\n        goto LABEL_355;\n      v127 = (__int64)*v125;\n      v124 = (*((_DWORD *)v1 + 8) << 8) | **v125;\n      *((_DWORD *)v1 + 8) = v124;\n      v123 += 8;\n      *((_DWORD *)v1 + 9) = v123;\n      *v125 = (unsigned __int8 *)(v127 + 1);\n      *((_DWORD *)v125 + 2) = v126;\n      v21 = (*((_DWORD *)v125 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v125 + 4);\n      --v126;\n    }\n    while ( v123 - 8 < 0 );\n  }\n  else\n  {\n    v124 = *((_DWORD *)v1 + 8);\n  }\n  v50 = v123 - 8;\n  *((_DWORD *)v1 + 9) = v50;\n  *((_DWORD *)v1 + 794) = (*((_DWORD *)v1 + 794) << 8) | (unsigned __int8)(v124 >> v50);\nLABEL_146:\n  *((_DWORD *)v1 + 2) = 21;\n  if ( v50 < 8 )\n  {\n    v129 = *v1;\n    v130 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v130 == -1 )\n        goto LABEL_355;\n      v131 = (__int64)*v129;\n      v128 = (*((_DWORD *)v1 + 8) << 8) | **v129;\n      *((_DWORD *)v1 + 8) = v128;\n      v50 += 8;\n      *((_DWORD *)v1 + 9) = v50;\n      *v129 = (unsigned __int8 *)(v131 + 1);\n      *((_DWORD *)v129 + 2) = v130;\n      v21 = (*((_DWORD *)v129 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v129 + 4);\n      --v130;\n    }\n    while ( v50 - 8 < 0 );\n  }\n  else\n  {\n    v128 = *((_DWORD *)v1 + 8);\n  }\n  v51 = v50 - 8;\n  *((_DWORD *)v1 + 9) = v51;\n  *((_DWORD *)v1 + 794) = (*((_DWORD *)v1 + 794) << 8) | (unsigned __int8)(v128 >> v51);\nLABEL_154:\n  *((_DWORD *)v1 + 2) = 22;\n  if ( v51 < 8 )\n  {\n    v133 = *v1;\n    v134 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v134 == -1 )\n        goto LABEL_355;\n      v135 = (__int64)*v133;\n      v132 = (*((_DWORD *)v1 + 8) << 8) | **v133;\n      *((_DWORD *)v1 + 8) = v132;\n      v51 += 8;\n      *((_DWORD *)v1 + 9) = v51;\n      *v133 = (unsigned __int8 *)(v135 + 1);\n      *((_DWORD *)v133 + 2) = v134;\n      v21 = (*((_DWORD *)v133 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v133 + 4);\n      --v134;\n    }\n    while ( v51 - 8 < 0 );\n  }\n  else\n  {\n    v132 = *((_DWORD *)v1 + 8);\n  }\n  v52 = v51 - 8;\n  *((_DWORD *)v1 + 9) = v52;\n  *((_DWORD *)v1 + 794) = (*((_DWORD *)v1 + 794) << 8) | (unsigned __int8)(v132 >> v52);\nLABEL_162:\n  *((_DWORD *)v1 + 2) = 23;\n  if ( v52 < 8 )\n  {\n    v137 = *v1;\n    v138 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v138 == -1 )\n        goto LABEL_355;\n      v139 = (__int64)*v137;\n      v136 = (*((_DWORD *)v1 + 8) << 8) | **v137;\n      *((_DWORD *)v1 + 8) = v136;\n      v52 += 8;\n      *((_DWORD *)v1 + 9) = v52;\n      *v137 = (unsigned __int8 *)(v139 + 1);\n      *((_DWORD *)v137 + 2) = v138;\n      v21 = (*((_DWORD *)v137 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v137 + 4);\n      --v138;\n    }\n    while ( v52 - 8 < 0 );\n  }\n  else\n  {\n    v136 = *((_DWORD *)v1 + 8);\n  }\n  v53 = v52 - 8;\n  *((_DWORD *)v1 + 9) = v53;\n  *((_DWORD *)v1 + 794) = (*((_DWORD *)v1 + 794) << 8) | (unsigned __int8)(v136 >> v53);\nLABEL_170:\n  *((_DWORD *)v1 + 2) = 24;\n  if ( v53 <= 0 )\n  {\n    v141 = *v1;\n    v142 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v142 == -1 )\n        goto LABEL_355;\n      v143 = (__int64)*v141;\n      v140 = (*((_DWORD *)v1 + 8) << 8) | **v141;\n      *((_DWORD *)v1 + 8) = v140;\n      v53 += 8;\n      *((_DWORD *)v1 + 9) = v53;\n      *v141 = (unsigned __int8 *)(v143 + 1);\n      *((_DWORD *)v141 + 2) = v142;\n      v21 = (*((_DWORD *)v141 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v141 + 4);\n      --v142;\n    }\n    while ( v53 - 8 <= -8 );\n  }\n  else\n  {\n    v140 = *((_DWORD *)v1 + 8);\n  }\n  v54 = v53 - 1;\n  *((_DWORD *)v1 + 9) = v54;\n  *((_BYTE *)v1 + 20) = (v140 >> v54) & 1;\n  *((_DWORD *)v1 + 14) = 0;\nLABEL_178:\n  *((_DWORD *)v1 + 2) = 25;\n  if ( v54 < 8 )\n  {\n    v145 = *v1;\n    v146 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v146 == -1 )\n        goto LABEL_355;\n      v147 = (__int64)*v145;\n      v144 = (*((_DWORD *)v1 + 8) << 8) | **v145;\n      *((_DWORD *)v1 + 8) = v144;\n      v54 += 8;\n      *((_DWORD *)v1 + 9) = v54;\n      *v145 = (unsigned __int8 *)(v147 + 1);\n      *((_DWORD *)v145 + 2) = v146;\n      v21 = (*((_DWORD *)v145 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v145 + 4);\n      --v146;\n    }\n    while ( v54 - 8 < 0 );\n  }\n  else\n  {\n    v144 = *((_DWORD *)v1 + 8);\n  }\n  v55 = v54 - 8;\n  *((_DWORD *)v1 + 9) = v55;\n  *((_DWORD *)v1 + 14) = (*((_DWORD *)v1 + 14) << 8) | (unsigned __int8)(v144 >> v55);\nLABEL_186:\n  *((_DWORD *)v1 + 2) = 26;\n  if ( v55 < 8 )\n  {\n    v149 = *v1;\n    v150 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v150 == -1 )\n        goto LABEL_355;\n      v151 = (__int64)*v149;\n      v148 = (*((_DWORD *)v1 + 8) << 8) | **v149;\n      *((_DWORD *)v1 + 8) = v148;\n      v55 += 8;\n      *((_DWORD *)v1 + 9) = v55;\n      *v149 = (unsigned __int8 *)(v151 + 1);\n      *((_DWORD *)v149 + 2) = v150;\n      v21 = (*((_DWORD *)v149 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v149 + 4);\n      --v150;\n    }\n    while ( v55 - 8 < 0 );\n  }\n  else\n  {\n    v148 = *((_DWORD *)v1 + 8);\n  }\n  v56 = v55 - 8;\n  *((_DWORD *)v1 + 9) = v56;\n  *((_DWORD *)v1 + 14) = (*((_DWORD *)v1 + 14) << 8) | (unsigned __int8)(v148 >> v56);\nLABEL_194:\n  *((_DWORD *)v1 + 2) = 27;\n  v483 = v10;\n  if ( v56 < 8 )\n  {\n    v153 = *v1;\n    v154 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v154 == -1 )\n        goto LABEL_356;\n      v155 = (__int64)*v153;\n      v152 = (*((_DWORD *)v1 + 8) << 8) | **v153;\n      *((_DWORD *)v1 + 8) = v152;\n      v56 += 8;\n      *((_DWORD *)v1 + 9) = v56;\n      *v153 = (unsigned __int8 *)(v155 + 1);\n      *((_DWORD *)v153 + 2) = v154;\n      v21 = (*((_DWORD *)v153 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v153 + 4);\n      --v154;\n    }\n    while ( v56 - 8 < 0 );\n  }\n  else\n  {\n    v152 = *((_DWORD *)v1 + 8);\n  }\n  v156 = v56 - 8;\n  v157 = v152 >> v156;\n  *((_DWORD *)v1 + 9) = v156;\n  v158 = *((_DWORD *)v1 + 14) << 8;\n  v159 = (v158 | (unsigned __int8)v157) < 0;\n  v160 = v158 | (unsigned __int8)v157;\n  *((_DWORD *)v1 + 14) = v160;\n  result = 4294967292LL;\n  if ( v159 )\n    goto LABEL_357;\n  v161 = 100000 * *((_DWORD *)v1 + 10) | 0xA;\n  v162 = 0;\n  v163 = __OFSUB__(v160, v161);\n  v21 = v160 == v161;\n  v159 = v160 - v161 < 0;\n  v12 = v49;\n  v11 = v48;\n  if ( !((unsigned __int8)(v159 ^ v163) | v21) )\n    goto LABEL_463;\n  while ( 1 )\n  {\n    v13 = v481;\n    if ( v162 > 15 )\n      break;\n    LODWORD(v10) = v162;\nLABEL_337:\n    *((_DWORD *)v1 + 2) = 28;\n    v253 = *((_DWORD *)v1 + 9);\n    v481 = v13;\n    v48 = v11;\n    v49 = v12;\n    if ( v253 <= 0 )\n    {\n      v255 = *v1;\n      v256 = *((_DWORD *)*v1 + 2) - 1;\n      while ( v256 != -1 )\n      {\n        v257 = (__int64)*v255;\n        v254 = (*((_DWORD *)v1 + 8) << 8) | **v255;\n        *((_DWORD *)v1 + 8) = v254;\n        v253 += 8;\n        *((_DWORD *)v1 + 9) = v253;\n        *v255 = (unsigned __int8 *)(v257 + 1);\n        *((_DWORD *)v255 + 2) = v256;\n        v21 = (*((_DWORD *)v255 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v255 + 4);\n        --v256;\n        if ( v253 - 8 > -8 )\n          goto LABEL_344;\n      }\n      goto LABEL_355;\n    }\n    v254 = *((_DWORD *)v1 + 8);\nLABEL_344:\n    v258 = v253 - 1;\n    *((_DWORD *)v1 + 9) = v258;\n    *((_BYTE *)v1 + (signed int)v10 + 3452) = _bittest(&v254, v258);\n    v162 = v10 + 1;\n    v12 = v49;\n    v11 = v48;\n  }\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3436), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3420), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3404), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3388), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3372), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3356), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3340), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3324), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3308), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3292), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3276), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3260), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3244), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3228), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3212), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)((char *)v1 + 3196), (__m128i)0LL);\n  LODWORD(v10) = 0;\n  while ( (signed int)v10 <= 15 )\n  {\n    v264 = 0;\n    if ( *((_BYTE *)v1 + (signed int)v10 + 3452) )\n    {\n      while ( 1 )\n      {\n        v486 = v264;\n        if ( v264 > 15 )\n          break;\nLABEL_381:\n        v481 = v13;\n        *((_DWORD *)v1 + 2) = 29;\n        v275 = *((_DWORD *)v1 + 9);\n        v212 = v12;\n        v59 = v11;\n        if ( v275 <= 0 )\n        {\n          while ( 1 )\n          {\n            v277 = (__int64 *)*v1;\n            v278 = *((_DWORD *)*v1 + 2);\n            if ( !v278 )\n              goto LABEL_391;\n            v279 = *v277;\n            v276 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n            *((_DWORD *)v1 + 8) = v276;\n            v275 += 8;\n            *((_DWORD *)v1 + 9) = v275;\n            *v277 = v279 + 1;\n            *((_DWORD *)v277 + 2) = v278 - 1;\n            v21 = (*((_DWORD *)v277 + 3))++ == -1;\n            if ( v21 )\n              ++*((_DWORD *)v277 + 4);\n            if ( v275 - 8 > -8 )\n              goto LABEL_387;\n          }\n        }\n        v276 = *((_DWORD *)v1 + 8);\nLABEL_387:\n        v280 = v275 - 1;\n        *((_DWORD *)v1 + 9) = v280;\n        v12 = v212;\n        v11 = v59;\n        if ( _bittest(&v276, v280) )\n          *((_BYTE *)&v1[2 * (signed int)v10 + 399] + v486 + 4) = 1;\n        v264 = v486 + 1;\n      }\n    }\n    LODWORD(v10) = v10 + 1;\n  }\n  *((_DWORD *)v1 + 798) = 0;\n  v265 = 0;\n  v266 = 0LL;\n  do\n  {\n    if ( *((_BYTE *)v1 + v266 + 3196) )\n    {\n      *((_BYTE *)v1 + v265 + 3468) = v266;\n      v265 = *((_DWORD *)v1 + 798) + 1;\n      *((_DWORD *)v1 + 798) = v265;\n    }\n    if ( *((_BYTE *)v1 + v266 + 3197) )\n    {\n      *((_BYTE *)v1 + v265 + 3468) = v266 + 1;\n      v265 = *((_DWORD *)v1 + 798) + 1;\n      *((_DWORD *)v1 + 798) = v265;\n    }\n    v266 += 2LL;\n  }\n  while ( v266 != 256 );\n  if ( !v265 )\n  {\n    v481 = v13;\nLABEL_392:\n    v483 = v10;\n    result = 4294967292LL;\n    goto LABEL_463;\n  }\n  v490 = v265 + 2;\nLABEL_369:\n  v481 = v13;\n  *((_DWORD *)v1 + 2) = 30;\n  v267 = *((_DWORD *)v1 + 9);\n  v483 = v10;\n  v268 = v11;\n  v269 = v12;\n  if ( v267 < 3 )\n  {\n    v271 = *v1;\n    v272 = *((_DWORD *)*v1 + 2) - 1;\n    do\n    {\n      if ( v272 == -1 )\n      {\n        result = 0LL;\n        LODWORD(v12) = v269;\n        v11 = v268;\n        goto LABEL_463;\n      }\n      v273 = (__int64)*v271;\n      v270 = (*((_DWORD *)v1 + 8) << 8) | **v271;\n      *((_DWORD *)v1 + 8) = v270;\n      v267 += 8;\n      *((_DWORD *)v1 + 9) = v267;\n      *v271 = (unsigned __int8 *)(v273 + 1);\n      *((_DWORD *)v271 + 2) = v272;\n      v21 = (*((_DWORD *)v271 + 3))++ == -1;\n      if ( v21 )\n        ++*((_DWORD *)v271 + 4);\n      --v272;\n    }\n    while ( v267 - 8 <= -6 );\n  }\n  else\n  {\n    v270 = *((_DWORD *)v1 + 8);\n  }\n  v57 = (int *)((char *)v1 + 36);\n  v58 = v267 - 3;\n  v517 = (v270 >> v58) & 7;\n  *((_DWORD *)v1 + 9) = v58;\n  v11 = v268;\n  result = 4294967292LL;\n  v274 = 131;\n  v12 = v269;\n  if ( !_bittest(&v274, v517) )\n  {\nLABEL_61:\n    v59 = v11;\n    *((_DWORD *)v1 + 2) = 31;\n    v60 = v12;\n    if ( v58 < 15 )\n    {\n      v87 = *v1;\n      v88 = *((_DWORD *)*v1 + 2) - 1;\n      v62 = v486;\n      do\n      {\n        if ( v88 == -1 )\n        {\n          result = 0LL;\n          LODWORD(v12) = v60;\n          v11 = v59;\n          goto LABEL_463;\n        }\n        v89 = (__int64)*v87;\n        v61 = (*((_DWORD *)v1 + 8) << 8) | **v87;\n        *((_DWORD *)v1 + 8) = v61;\n        v58 += 8;\n        *((_DWORD *)v1 + 9) = v58;\n        *v87 = (unsigned __int8 *)(v89 + 1);\n        *((_DWORD *)v87 + 2) = v88;\n        v21 = (*((_DWORD *)v87 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v87 + 4);\n        --v88;\n      }\n      while ( v58 - 8 <= 6 );\n    }\n    else\n    {\n      v61 = *((_DWORD *)v1 + 8);\n      v62 = v486;\n    }\n    v90 = v58 - 15;\n    *v57 = v90;\n    v91 = (v61 >> v90) & 0x7FFF;\n    v12 = v60;\n    if ( !v91 )\n    {\n      v488 = 0;\n      result = 4294967292LL;\n      v11 = v59;\n      goto LABEL_463;\n    }\n    v488 = v91;\n    LODWORD(v10) = 0;\nLABEL_295:\n    v11 = v59;\n    if ( (signed int)v10 < v488 )\n    {\n      v486 = 0;\n      v13 = v481;\nLABEL_297:\n      v481 = v13;\n      v62 = v486;\n      while ( 1 )\n      {\n        v59 = v11;\n        v212 = v12;\n        *((_DWORD *)v1 + 2) = 32;\n        v213 = *((_DWORD *)v1 + 9);\n        if ( v213 <= 0 )\n          break;\n        v214 = *((_DWORD *)v1 + 8);\nLABEL_304:\n        v218 = v213 - 1;\n        *((_DWORD *)v1 + 9) = v218;\n        if ( !_bittest(&v214, v218) )\n        {\n          v10 = (signed int)v10;\n          *((_BYTE *)v1 + v10 + 25886) = v62;\n          LODWORD(v10) = v10 + 1;\n          v12 = v212;\n          goto LABEL_295;\n        }\n        ++v62;\n        result = 4294967292LL;\n        v12 = v212;\n        v11 = v59;\n        if ( v62 >= v517 )\n        {\n          v486 = v62;\n          v483 = v10;\n          goto LABEL_463;\n        }\n      }\n      while ( 1 )\n      {\n        v215 = (__int64 *)*v1;\n        v216 = *((_DWORD *)*v1 + 2);\n        if ( !v216 )\n          break;\n        v217 = *v215;\n        v214 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n        *((_DWORD *)v1 + 8) = v214;\n        v213 += 8;\n        *((_DWORD *)v1 + 9) = v213;\n        *v215 = v217 + 1;\n        *((_DWORD *)v215 + 2) = v216 - 1;\n        v21 = (*((_DWORD *)v215 + 3))++ == -1;\n        if ( v21 )\n          ++*((_DWORD *)v215 + 4);\n        if ( v213 - 8 > -8 )\n          goto LABEL_304;\n      }\n      v486 = v62;\nLABEL_391:\n      v483 = v10;\n      result = 0LL;\n      LODWORD(v12) = v212;\n      v11 = v59;\n      goto LABEL_463;\n    }\n    v219 = v517;\n    v220 = v6;\n    v486 = v62;\n    v13 = v481;\n    if ( v517 <= 0 )\n      goto LABEL_324;\n    if ( (unsigned int)v517 < 0x20 )\n    {\n      LOBYTE(v221) = 0;\n      goto LABEL_323;\n    }\n    LOBYTE(v221) = 0;\n    if ( !(_BYTE)v517 || (unsigned int)(v517 - 1) > 0xFF )\n      goto LABEL_323;\n    v222 = v12;\n    LODWORD(v221) = v517 & 0xFFFFFFE0;\n    v223 = ((v517 & 0xFFFFFFE0) - 32) >> 5;\n    v224 = ((_BYTE)v223 + 1) & 3;\n    if ( (v517 & 0xFFFFFFE0) - 32 >= 0x60 )\n    {\n      v227 = v224 - 1 - v223;\n      v225 = _mm_load_si128((const __m128i *)&xmmword_412A70);\n      v226 = 0;\n      v228 = _mm_load_si128((const __m128i *)&xmmword_412A80);\n      v229 = _mm_load_si128((const __m128i *)&xmmword_412A90);\n      v230 = _mm_load_si128((const __m128i *)&xmmword_412AA0);\n      v231 = _mm_load_si128((const __m128i *)&xmmword_412AB0);\n      v232 = _mm_load_si128((const __m128i *)&xmmword_412AC0);\n      v233 = _mm_load_si128((const __m128i *)&xmmword_412AD0);\n      v234 = _mm_load_si128((const __m128i *)&xmmword_412AE0);\n      v235 = _mm_load_si128((const __m128i *)&xmmword_412AF0);\n      do\n      {\n        v236 = (unsigned __int8)v226 & 0x80;\n        _mm_storeu_si128((__m128i *)&v522[v236], v225);\n        _mm_storeu_si128((__m128i *)((char *)&v524 + v236 + 2), _mm_add_epi8(v225, v228));\n        v237 = (unsigned int)(v236 + 32);\n        _mm_storeu_si128((__m128i *)&v522[v237], _mm_add_epi8(v225, v229));\n        _mm_storeu_si128((__m128i *)((char *)&v524 + v237 + 2), _mm_add_epi8(v225, v230));\n        v238 = (unsigned int)(v236 + 64);\n        _mm_storeu_si128((__m128i *)&v522[v238], _mm_add_epi8(v225, v231));\n        _mm_storeu_si128((__m128i *)((char *)&v524 + v238 + 2), _mm_add_epi8(v225, v232));\n        v239 = (unsigned int)v236 | 0x60;\n        _mm_storeu_si128((__m128i *)&v522[v239], _mm_add_epi8(v225, v233));\n        _mm_storeu_si128((__m128i *)((char *)&v524 + v239 + 2), _mm_add_epi8(v225, v234));\n        v226 += 128;\n        v225 = _mm_xor_si128(v225, v235);\n        v227 += 4;\n      }\n      while ( v227 );\n      if ( !v224 )\n      {\nLABEL_322:\n        v219 = v517;\n        v12 = v222;\n        v13 = v481;\n        if ( v517 != (_DWORD)v221 )\n        {\n          do\n          {\nLABEL_323:\n            v221 = (unsigned __int8)v221;\n            v522[v221] = v221;\n            LOBYTE(v221) = v221 + 1;\n          }\n          while ( v219 > (unsigned __int8)v221 );\n        }\nLABEL_324:\n        v11 = 0;\n        LODWORD(v10) = 0;\n        if ( v488 > 0 )\n        {\n          v494 = v12;\n          v244 = v7;\n          v245 = 0LL;\n          do\n          {\n            v246 = *((unsigned __int8 *)v1 + v245 + 25886);\n            v247 = v522[v246];\n            if ( *((_BYTE *)v1 + v245 + 25886) )\n            {\n              v248 = v246 - 1;\n              if ( v246 & 3 )\n              {\n                v249 = -(v246 & 3);\n                do\n                {\n                  v522[v246] = *(&v521 + v246);\n                  --v246;\n                  ++v249;\n                }\n                while ( v249 );\n              }\n              v250 = v248 < 3u;\n              v6 = v220;\n              if ( !v250 )\n              {\n                v251 = &v522[v246];\n                v252 = -(char)v246;\n                do\n                {\n                  *v251 = *(v251 - 1);\n                  *(v251 - 1) = *(v251 - 2);\n                  *(_WORD *)(v251 - 3) = *((_WORD *)v251 - 2);\n                  v251 -= 4;\n                  v252 += 4;\n                }\n                while ( v252 );\n              }\n            }\n            v522[0] = v247;\n            *((_BYTE *)v1 + v245++ + 7884) = v247;\n          }\n          while ( v245 != v488 );\n          LODWORD(v10) = v488;\n          v7 = v244;\n          v12 = v494;\n          v13 = v481;\n          v11 = 0;\n        }\n        while ( v11 < v517 )\n        {\nLABEL_394:\n          *((_DWORD *)v1 + 2) = 33;\n          v281 = *((_DWORD *)v1 + 9);\n          v481 = v13;\n          v48 = v11;\n          v49 = v12;\n          if ( v281 < 5 )\n          {\n            v283 = *v1;\n            v284 = *((_DWORD *)*v1 + 2) - 1;\n            while ( v284 != -1 )\n            {\n              v285 = (__int64)*v283;\n              v282 = (*((_DWORD *)v1 + 8) << 8) | **v283;\n              *((_DWORD *)v1 + 8) = v282;\n              v281 += 8;\n              *((_DWORD *)v1 + 9) = v281;\n              *v283 = (unsigned __int8 *)(v285 + 1);\n              *((_DWORD *)v283 + 2) = v284;\n              v21 = (*((_DWORD *)v283 + 3))++ == -1;\n              if ( v21 )\n                ++*((_DWORD *)v283 + 4);\n              --v284;\n              if ( v281 - 8 > -4 )\n                goto LABEL_401;\n            }\nLABEL_355:\n            v483 = v10;\nLABEL_356:\n            result = 0LL;\n            goto LABEL_357;\n          }\n          v282 = *((_DWORD *)v1 + 8);\nLABEL_401:\n          v286 = v281 - 5;\n          *((_DWORD *)v1 + 9) = v286;\n          LODWORD(v10) = 0;\n          v287 = (v282 >> v286) & 0x1F;\n          v12 = v49;\n          v13 = v481;\n          v11 = v48;\n          if ( v490 > 0 )\n          {\n            while ( (unsigned int)(v287 - 1) <= 0x13 )\n            {\n              v518 = v287;\nLABEL_437:\n              *((_DWORD *)v1 + 2) = 34;\n              v336 = *((_DWORD *)v1 + 9);\n              v481 = v13;\n              *(_QWORD *)&v524 = v5;\n              v63 = v11;\n              v64 = v12;\n              if ( v336 <= 0 )\n              {\n                while ( 1 )\n                {\n                  v338 = (__int64 *)*v1;\n                  v339 = *((_DWORD *)*v1 + 2);\n                  if ( !v339 )\n                    break;\n                  v340 = *v338;\n                  v337 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                  *((_DWORD *)v1 + 8) = v337;\n                  v336 += 8;\n                  *((_DWORD *)v1 + 9) = v336;\n                  *v338 = v340 + 1;\n                  *((_DWORD *)v338 + 2) = v339 - 1;\n                  v21 = (*((_DWORD *)v338 + 3))++ == -1;\n                  if ( v21 )\n                    ++*((_DWORD *)v338 + 4);\n                  if ( v336 - 8 > -8 )\n                    goto LABEL_443;\n                }\n                v483 = v10;\n                result = 0LL;\n                goto LABEL_455;\n              }\n              v337 = *((_DWORD *)v1 + 8);\nLABEL_443:\n              v65 = (signed __int64)v7;\n              v66 = (unsigned int *)((char *)v1 + 36);\n              v67 = v336 - 1;\n              *((_DWORD *)v1 + 9) = v67;\n              if ( _bittest(&v337, v67) )\n              {\nLABEL_446:\n                *((_DWORD *)v1 + 2) = 35;\n                if ( v67 <= 0 )\n                {\n                  while ( 1 )\n                  {\n                    v342 = (__int64 *)*v1;\n                    v343 = *((_DWORD *)*v1 + 2);\n                    if ( !v343 )\n                      break;\n                    v344 = *v342;\n                    v341 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                    *((_DWORD *)v1 + 8) = v341;\n                    v67 += 8;\n                    *((_DWORD *)v1 + 9) = v67;\n                    *v342 = v344 + 1;\n                    *((_DWORD *)v342 + 2) = v343 - 1;\n                    v21 = (*((_DWORD *)v342 + 3))++ == -1;\n                    if ( v21 )\n                      ++*((_DWORD *)v342 + 4);\n                    if ( v67 - 8 > -8 )\n                      goto LABEL_452;\n                  }\n                  v483 = v10;\n                  result = 0LL;\n                  v7 = (_DWORD *)v65;\nLABEL_455:\n                  LODWORD(v12) = v64;\n                  v11 = v63;\n                  v5 = (int *)v524;\n                  goto LABEL_463;\n                }\n                v341 = *((_DWORD *)v1 + 8);\nLABEL_452:\n                v345 = v67 - 1;\n                *v66 = v345;\n                v287 = (unsigned int)v518 + 2 * !_bittest(&v341, v345) - 1;\n                v7 = (_DWORD *)v65;\n                v12 = v64;\n                v13 = v481;\n                v11 = v63;\n                v5 = (int *)v524;\n              }\n              else\n              {\n                v11 = v63;\n                v10 = (signed int)v10;\n                v287 = v518;\n                *((_BYTE *)v1 + 258 * v63 + v10 + 43888) = v518;\n                LODWORD(v10) = v10 + 1;\n                v7 = (_DWORD *)v65;\n                v12 = v64;\n                v5 = (int *)v524;\n                if ( (signed int)v10 >= v490 )\n                  goto LABEL_445;\n              }\n            }\n            v481 = v13;\n            LODWORD(v518) = v287;\n            goto LABEL_392;\n          }\nLABEL_445:\n          LODWORD(v518) = v287;\n          ++v11;\n        }\n        *(_QWORD *)&v524 = v5;\n        v525 = v6;\n        *((_QWORD *)&v524 + 1) = v7;\n        if ( v517 <= 0 )\n        {\n          v323 = v13;\n          v324 = (__int64)v4;\n          v325 = 0;\n          goto LABEL_421;\n        }\n        v288 = (unsigned int *)((char *)v1 + 43892);\n        v289 = (signed __int64)(v1 + 5486);\n        v290 = 0LL;\n        v291 = 0LL;\n        v526 = v4;\n        while ( 1 )\n        {\n          v482 = v288;\n          if ( v490 <= 0 )\n          {\n            v293 = 32;\n          }\n          else\n          {\n            if ( (unsigned int)v490 < 8 )\n            {\n              v292 = 0LL;\n              v293 = 32;\n              v294 = 0;\nLABEL_412:\n              v320 = (unsigned __int8 *)(v289 + v292);\n              v321 = (unsigned int)v490 - v292;\n              do\n              {\n                v322 = *v320;\n                if ( v294 < v322 )\n                  v294 = *v320;\n                if ( v293 > v322 )\n                  v293 = *v320;\n                ++v320;\n                --v321;\n              }\n              while ( v321 );\n              goto LABEL_418;\n            }\n            v295 = 0LL;\n            v296 = v490 & 0xFFFFFFF8;\n            v297 = _mm_load_si128((const __m128i *)&xmmword_412A60);\n            v298 = v297;\n            v299 = 0LL;\n            do\n            {\n              v300 = _mm_unpacklo_epi16(_mm_unpacklo_epi8(_mm_cvtsi32_si128(*(v288 - 1)), v291), v291);\n              v301 = _mm_unpacklo_epi16(_mm_unpacklo_epi8(_mm_cvtsi32_si128(*v288), v291), v291);\n              v302 = _mm_cmpgt_epi32(v300, v295);\n              v303 = _mm_cmpgt_epi32(v301, v299);\n              v295 = _mm_or_si128(_mm_andnot_si128(v302, v295), _mm_and_si128(v300, v302));\n              v299 = _mm_or_si128(_mm_andnot_si128(v303, v299), _mm_and_si128(v301, v303));\n              v304 = _mm_cmpgt_epi32(v297, v300);\n              v305 = _mm_cmpgt_epi32(v298, v301);\n              v297 = _mm_or_si128(_mm_andnot_si128(v304, v297), _mm_and_si128(v300, v304));\n              v298 = _mm_or_si128(_mm_andnot_si128(v305, v298), _mm_and_si128(v301, v305));\n              v288 += 2;\n              v296 -= 8LL;\n            }\n            while ( v296 );\n            v306 = _mm_cmpgt_epi32(v295, v299);\n            v307 = _mm_or_si128(_mm_andnot_si128(v306, v299), _mm_and_si128(v295, v306));\n            v308 = _mm_shuffle_epi32(v307, 78);\n            v309 = _mm_cmpgt_epi32(v307, v308);\n            v310 = _mm_or_si128(_mm_andnot_si128(v309, v308), _mm_and_si128(v307, v309));\n            v311 = _mm_shuffle_epi32(v310, 229);\n            v312 = _mm_cmpgt_epi32(v310, v311);\n            v294 = _mm_cvtsi128_si32(_mm_or_si128(_mm_andnot_si128(v312, v311), _mm_and_si128(v310, v312)));\n            v313 = _mm_cmpgt_epi32(v298, v297);\n            v314 = _mm_or_si128(_mm_andnot_si128(v313, v298), _mm_and_si128(v297, v313));\n            v315 = _mm_shuffle_epi32(v314, 78);\n            v316 = _mm_cmpgt_epi32(v315, v314);\n            v317 = _mm_or_si128(_mm_andnot_si128(v316, v315), _mm_and_si128(v314, v316));\n            v318 = _mm_shuffle_epi32(v317, 229);\n            v319 = _mm_cmpgt_epi32(v318, v317);\n            v293 = _mm_cvtsi128_si32(_mm_or_si128(_mm_andnot_si128(v319, v318), _mm_and_si128(v317, v319)));\n            v292 = v490 & 0xFFFFFFF8;\n            if ( v292 != v490 )\n              goto LABEL_412;\n          }\nLABEL_418:\n          sub_4114D0((_DWORD)v1 + 1032 * v290 + 45436);\n          *((_DWORD *)v1 + v290++ + 16003) = v293;\n          v288 = (unsigned int *)((char *)v482 + 258);\n          v289 += 258LL;\n          v291 = 0LL;\n          if ( v290 == v517 )\n          {\n            v323 = v13;\n            v324 = (__int64)v526;\n            v325 = v517;\nLABEL_421:\n            v326 = *((_DWORD *)v1 + 798);\n            v489 = 100000 * *((_DWORD *)v1 + 10);\n            v327 = 0LL;\n            memset((char *)v1 + 68, 0, 0x400uLL);\n            v515 = v326 + 1;\n            v328 = (signed __int64)(v1 + 985);\n            v329 = v1 + 985;\n            do\n            {\n              *(_BYTE *)(v328 + v327 - 61) = v327 - 1;\n              *(_BYTE *)(v328 + v327 - 62) = v327 - 2;\n              *(_BYTE *)(v328 + v327 - 63) = v327 - 3;\n              *(_BYTE *)(v328 + v327 - 64) = v327 - 4;\n              *(_BYTE *)(v328 + v327 - 65) = v327 - 5;\n              *(_BYTE *)(v328 + v327 - 66) = v327 - 6;\n              *(_BYTE *)(v328 + v327 - 67) = v327 - 7;\n              *(_BYTE *)(v328 + v327 - 68) = v327 - 8;\n              *(_BYTE *)(v328 + v327 - 69) = v327 - 9;\n              *(_BYTE *)(v328 + v327 - 70) = v327 - 10;\n              *(_BYTE *)(v328 + v327 - 71) = v327 - 11;\n              *(_BYTE *)(v328 + v327 - 72) = v327 - 12;\n              *(_BYTE *)(v328 + v327 - 73) = v327 - 13;\n              *(_BYTE *)(v328 + v327 - 74) = v327 - 14;\n              *(_BYTE *)(v328 + v327 - 75) = v327 - 15;\n              *(_BYTE *)(v328 + v327 - 76) = v327 - 16;\n              *v329 = v327 + 4080;\n              v327 -= 16LL;\n              --v329;\n            }\n            while ( v327 != -256 );\n            v4 = (__m128i *)v324;\n            v5 = (int *)v524;\n            v6 = v525;\n            v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n            if ( v488 <= 0 )\n            {\n              v481 = v323;\n              result = 4294967292LL;\n              v483 = 256;\n              v492 = 0;\n              v514 = 0;\n              LODWORD(v516) = 0;\n              v11 = v325;\n              goto LABEL_463;\n            }\n            v330 = *((unsigned __int8 *)v1 + 7884);\n            v13 = *((_DWORD *)v1 + v330 + 16003);\n            v519 = *((unsigned __int8 *)v1 + 7884);\n            v330 *= 1032LL;\n            v528 = (unsigned __int8 **)((char *)v1 + v330 + 51628);\n            v527 = (unsigned __int8 **)((char *)v1 + v330 + 57820);\n            v529 = (unsigned __int8 **)((char *)v1 + v330 + 45436);\n            v10 = 256LL;\n            v514 = 49;\n            v492 = 0;\n            v485 = v13;\n            LODWORD(v516) = 0;\n            v11 = v325;\nLABEL_425:\n            v480 = v11;\n            *((_DWORD *)v1 + 2) = 36;\n            v331 = *((_DWORD *)v1 + 9);\n            v72 = v12;\n            if ( v331 >= v13 )\n            {\n              v335 = *((_DWORD *)v1 + 8);\n            }\n            else\n            {\n              v332 = *v1;\n              v333 = *((_DWORD *)*v1 + 2) - 1;\n              do\n              {\n                if ( v333 == -1 )\n                  goto LABEL_458;\n                v334 = (__int64)*v332;\n                v335 = (*((_DWORD *)v1 + 8) << 8) | **v332;\n                *((_DWORD *)v1 + 8) = v335;\n                v331 += 8;\n                *((_DWORD *)v1 + 9) = v331;\n                *v332 = (unsigned __int8 *)(v334 + 1);\n                *((_DWORD *)v332 + 2) = v333;\n                v21 = (*((_DWORD *)v332 + 3))++ == -1;\n                if ( v21 )\n                  ++*((_DWORD *)v332 + 4);\n                --v333;\n              }\n              while ( v331 < v13 );\n            }\n            v70 = v331 - v13;\n            v71 = (v335 >> v70) & ((1 << v13) - 1);\n            *((_DWORD *)v1 + 9) = v70;\n            while ( 1 )\n            {\n              result = 4294967292LL;\n              if ( v13 > 20 )\n              {\nLABEL_457:\n                v481 = v13;\n                v497 = v71;\n                v483 = v10;\n                goto LABEL_461;\n              }\n              v210 = v13;\n              if ( v71 <= *((_DWORD *)v529 + v13) )\n                break;\n              v211 = v13;\n              v68 = (signed __int64)v7;\n              v481 = v211 + 1;\n              v69 = (int *)((char *)v1 + 36);\n              v12 = v72;\nLABEL_285:\n              *((_DWORD *)v1 + 2) = 37;\n              v72 = v12;\n              if ( v70 <= 0 )\n              {\n                while ( 1 )\n                {\n                  v206 = (__int64 *)*v1;\n                  v207 = *((_DWORD *)*v1 + 2);\n                  if ( !v207 )\n                    goto LABEL_460;\n                  v208 = *v206;\n                  v205 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                  *((_DWORD *)v1 + 8) = v205;\n                  v70 += 8;\n                  *((_DWORD *)v1 + 9) = v70;\n                  *v206 = v208 + 1;\n                  *((_DWORD *)v206 + 2) = v207 - 1;\n                  v21 = (*((_DWORD *)v206 + 3))++ == -1;\n                  if ( v21 )\n                    ++*((_DWORD *)v206 + 4);\n                  if ( v70 - 8 > -8 )\n                    goto LABEL_291;\n                }\n              }\n              v205 = *((_DWORD *)v1 + 8);\nLABEL_291:\n              v209 = (v205 >> --v70) & 1;\n              *v69 = v70;\n              v71 = v209 + 2 * v71;\n              v491 = v209;\n              v7 = (_DWORD *)v68;\n              v13 = v481;\n            }\nLABEL_464:\n            v346 = v71 - (signed __int64)*((signed int *)v528 + v210);\n            v12 = v72;\n            if ( (unsigned int)v346 > 0x101 )\n            {\nLABEL_604:\n              v481 = v13;\n              v497 = v71;\n              v483 = v10;\n              goto LABEL_462;\n            }\n            v347 = *((_DWORD *)v527 + v346);\n            v348 = v485;\n            while ( 2 )\n            {\n              v11 = v480;\n              v498 = v347;\n              if ( v347 == v515 )\n              {\n                v485 = v348;\n                v398 = *((_DWORD *)v1 + 14);\n                result = 4294967292LL;\n                v497 = v71;\n                v481 = v13;\n                if ( v398 < 0 )\n                {\n                  v483 = v10;\n                  v515 = v498;\n                  goto LABEL_463;\n                }\n                if ( v398 >= v492 )\n                {\n                  v483 = v10;\n                  goto LABEL_548;\n                }\n                v399 = (__int64)(v1 + 137);\n                *((_DWORD *)v1 + 274) = 0;\n                v400 = 9223372036854775680LL;\n                do\n                {\n                  v401 = _mm_loadu_si128((const __m128i *)((char *)&v1[v400 + 138] + 4));\n                  v402 = _mm_loadu_si128((const __m128i *)((char *)&v1[v400 + 140] + 4));\n                  v403 = _mm_loadu_si128((const __m128i *)((char *)&v1[v400 + 142] + 4));\n                  _mm_storeu_si128(\n                    (__m128i *)((char *)&v1[v400 + 265] + 4),\n                    _mm_loadu_si128((const __m128i *)((char *)&v1[v400 + 136] + 4)));\n                  _mm_storeu_si128((__m128i *)((char *)&v1[v400 + 267] + 4), v401);\n                  _mm_storeu_si128((__m128i *)((char *)&v1[v400 + 269] + 4), v402);\n                  _mm_storeu_si128((__m128i *)((char *)&v1[v400 + 271] + 4), v403);\n                  v400 += 8LL;\n                }\n                while ( v400 * 2 );\n                v404 = *((_DWORD *)v1 + 274);\n                v405 = 2305843009213693824LL;\n                do\n                {\n                  v406 = HIDWORD(v1[v405 + 265]) + v404;\n                  HIDWORD(v1[v405 + 265]) = v406;\n                  v407 = LODWORD(v1[v405 + 266]) + v406;\n                  LODWORD(v1[v405 + 266]) = v407;\n                  v408 = HIDWORD(v1[v405 + 266]) + v407;\n                  HIDWORD(v1[v405 + 266]) = v408;\n                  v404 = LODWORD(v1[v405 + 267]) + v408;\n                  LODWORD(v1[v405 + 267]) = v404;\n                  v405 += 2LL;\n                }\n                while ( v405 * 8 );\n                for ( i = 0LL; ; i += 4LL )\n                {\n                  v410 = *((_DWORD *)v1 + i + 274);\n                  if ( v410 < 0 || v410 > v492 )\n                    goto LABEL_543;\n                  if ( (unsigned __int64)(i + 1) >= 0x101 )\n                    break;\n                  v411 = i | 1;\n                  v412 = *((_DWORD *)v1 + i + 275);\n                  if ( v412 < 0 )\n                    goto LABEL_544;\n                  if ( v412 > v492 )\n                    goto LABEL_544;\n                  v411 = i | 2;\n                  v413 = *((_DWORD *)v1 + i + 276);\n                  if ( v413 < 0 || v413 > v492 )\n                    goto LABEL_544;\n                  v414 = *((_DWORD *)v1 + i + 277);\n                  if ( v414 < 0 || v414 > v492 )\n                  {\n                    LODWORD(i) = i + 3;\nLABEL_543:\n                    v411 = i;\nLABEL_544:\n                    v483 = v411;\nLABEL_548:\n                    v515 = v498;\n                    goto LABEL_462;\n                  }\n                }\n                *((_DWORD *)v1 + 4) = 0;\n                *((_BYTE *)v1 + 12) = 0;\n                *((_DWORD *)v1 + 796) = -1;\n                *((_DWORD *)v1 + 2) = 2;\n                if ( *((_DWORD *)v1 + 13) >= 2 )\n                {\n                  v444 = v4;\n                  v445 = v5;\n                  v446 = v6;\n                  v447 = v7;\n                  fwrite(\"rt+rld\", 6uLL, 1uLL, stderr);\n                  v7 = v447;\n                  v6 = v446;\n                  v5 = v445;\n                  v399 = (__int64)(v1 + 137);\n                  v4 = v444;\n                  if ( *((_BYTE *)v1 + 44) )\n                  {\nLABEL_552:\n                    v496 = v12;\n                    *((_QWORD *)&v524 + 1) = v7;\n                    v525 = v6;\n                    v415 = v5;\n                    v416 = v4;\n                    v417 = (signed __int64)v1 + 2236;\n                    v418 = -256LL;\n                    do\n                    {\n                      v419 = _mm_loadu_si128((const __m128i *)(v417 + 4 * v418 - 100));\n                      v420 = _mm_loadu_si128((const __m128i *)(v417 + 4 * v418 - 84));\n                      v421 = _mm_loadu_si128((const __m128i *)(v417 + 4 * v418 - 68));\n                      *(_OWORD *)(v417 + 4 * v418 + 912) = *(_OWORD *)(v417 + 4 * v418 - 116);\n                      _mm_storeu_si128((__m128i *)(v417 + 4 * v418 + 928), v419);\n                      _mm_storeu_si128((__m128i *)(v417 + 4 * v418 + 944), v420);\n                      _mm_storeu_si128((__m128i *)(v417 + 4 * v418 + 960), v421);\n                      *(_OWORD *)(v417 + 4 * v418 + 976) = *(_OWORD *)(v417 + 4 * v418 - 52);\n                      *(_OWORD *)(v417 + 4 * v418 + 992) = *(_OWORD *)(v417 + 4 * v418 - 36);\n                      *(_OWORD *)(v417 + 4 * v418 + 1008) = *(_OWORD *)(v417 + 4 * v418 - 20);\n                      _mm_storeu_si128(\n                        (__m128i *)(v417 + 4 * v418 + 1024),\n                        _mm_loadu_si128((const __m128i *)(v417 + 4 * v418 - 4)));\n                      v418 += 32LL;\n                    }\n                    while ( v418 );\n                    *((_DWORD *)v1 + 787) = *((_DWORD *)v1 + 530);\n                    if ( v492 > 0 )\n                    {\n                      v422 = 0LL;\n                      do\n                      {\n                        v423 = v1[395];\n                        v424 = *((unsigned __int8 *)v423 + 2 * v422);\n                        v425 = *((_DWORD *)v1 + v424 + 531);\n                        *((_WORD *)v423 + v422) = v425;\n                        v426 = v1[396];\n                        v427 = (unsigned int)v422 >> 1;\n                        v428 = *((_BYTE *)v426 + v427);\n                        if ( v422 & 1 )\n                          v429 = v428 & 0xF | 16 * (v425 >> 16);\n                        else\n                          v429 = (unsigned __int8)(v428 & 0xF0) | (v425 >> 16);\n                        *((_BYTE *)v426 + v427) = v429;\n                        ++*((_DWORD *)v1 + v424 + 531);\n                        ++v422;\n                      }\n                      while ( v492 != v422 );\n                    }\n                    v430 = *((signed int *)v1 + 14);\n                    v431 = v1[395];\n                    v432 = v1[396];\n                    v486 = *((unsigned __int16 *)v431 + v430) | (((*((unsigned __int8 *)v432\n                                                                   + (signed int)(*((_DWORD *)v1 + 14) >> 1)) >> (4 * *((unsigned int *)v1 + 14) & 4)) & 0xF) << 16);\n                    while ( 1 )\n                    {\n                      v483 = v486;\n                      v433 = v486;\n                      v434 = v486 >> 1;\n                      v435 = *((unsigned __int16 *)v431 + v486);\n                      v487 = ((*((unsigned __int8 *)v432 + v434) >> (4 * v486 & 4)) & 0xF) << 16;\n                      *((_WORD *)v431 + v433) = v430;\n                      v436 = *((_BYTE *)v432 + v434);\n                      v437 = v433 & 1 ? v436 & 0xF | 16 * ((signed int)v430 >> 16) : v436 & 0xF0 | ((signed int)v430 >> 16);\n                      v486 = v435 + v487;\n                      *((_BYTE *)v432 + v434) = v437;\n                      if ( v483 == *((_DWORD *)v1 + 14) )\n                        break;\n                      v431 = v1[395];\n                      v432 = v1[396];\n                      LODWORD(v430) = v483;\n                    }\n                    *((_DWORD *)v1 + 15) = v483;\n                    *((_DWORD *)v1 + 273) = 0;\n                    if ( *((_BYTE *)v1 + 20) )\n                    {\n                      v1[3] = 0LL;\n                      v438 = sub_4058F0(v483, v399);\n                      *((_DWORD *)v1 + 16) = v438;\n                      v439 = *((_DWORD *)v1 + 6);\n                      *((_DWORD *)v1 + 15) = *((unsigned __int16 *)v1[395] + *((unsigned int *)v1 + 15)) | (((*((unsigned __int8 *)v1[396] + (unsigned int)(*((_DWORD *)v1 + 15) >> 1)) >> (4 * *((unsigned int *)v1 + 15) & 4)) & 0xF) << 16);\n                      ++*((_DWORD *)v1 + 273);\n                      if ( !v439 )\n                      {\n                        v440 = *((signed int *)v1 + 7);\n                        v439 = dword_4154C0[v440];\n                        *((_DWORD *)v1 + 6) = v439;\n                        v441 = v440 + 1;\n                        v442 = 0;\n                        if ( v441 != 512 )\n                          v442 = v441;\n                        *((_DWORD *)v1 + 7) = v442;\n                      }\n                      v443 = v439 - 1;\n                      *((_DWORD *)v1 + 6) = v443;\n                      *((_DWORD *)v1 + 16) = (v443 == 1) ^ v438;\n                    }\n                    else\n                    {\n                      *((_DWORD *)v1 + 16) = sub_4058F0(v483, v399);\n                      *((_DWORD *)v1 + 15) = *((unsigned __int16 *)v1[395] + *((unsigned int *)v1 + 15)) | (((*((unsigned __int8 *)v1[396] + (unsigned int)(*((_DWORD *)v1 + 15) >> 1)) >> (4 * *((unsigned int *)v1 + 15) & 4)) & 0xF) << 16);\n                      ++*((_DWORD *)v1 + 273);\n                    }\n                    result = 0LL;\n                    v515 = v498;\n                    v4 = v416;\n                    v5 = v415;\n                    v6 = v525;\n                    v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n                    LODWORD(v12) = v496;\n                    goto LABEL_462;\n                  }\n                }\n                else if ( *((_BYTE *)v1 + 44) )\n                {\n                  goto LABEL_552;\n                }\n                v448 = v12;\n                v449 = v1[394];\n                if ( v492 <= 0 )\n                {\n                  v483 = 0;\n                }\n                else\n                {\n                  ++*((_DWORD *)v1 + *(unsigned __int8 *)v449 + 274);\n                  v483 = 1;\n                  if ( v492 != 1 )\n                  {\n                    v450 = 256;\n                    v451 = 1LL;\n                    do\n                    {\n                      v452 = *((unsigned __int8 *)v449 + 4 * v451);\n                      v453 = *((signed int *)v1 + v452 + 274);\n                      *((_DWORD *)v449 + v453) |= v450;\n                      ++*((_DWORD *)v1 + v452 + 274);\n                      ++v451;\n                      v450 += 256;\n                    }\n                    while ( v492 != v451 );\n                    v483 = v492;\n                  }\n                }\n                v454 = *((_DWORD *)v449 + *((signed int *)v1 + 14)) >> 8;\n                *((_DWORD *)v1 + 15) = v454;\n                *((_DWORD *)v1 + 273) = 0;\n                if ( *((_BYTE *)v1 + 20) )\n                {\n                  v1[3] = 0LL;\n                  v455 = *((_DWORD *)v449 + v454);\n                  v456 = (unsigned __int8)v455;\n                  *((_DWORD *)v1 + 15) = v455 >> 8;\n                  *((_DWORD *)v1 + 273) = 1;\n                  v457 = dword_4154C0[0];\n                  *((_DWORD *)v1 + 7) = 1;\n                  *((_DWORD *)v1 + 6) = --v457;\n                  *((_DWORD *)v1 + 16) = v456 ^ (v457 == 1);\n                }\n                else\n                {\n                  v458 = *((_DWORD *)v449 + v454);\n                  *((_DWORD *)v1 + 16) = (unsigned __int8)v458;\n                  *((_DWORD *)v1 + 15) = v458 >> 8;\n                  *((_DWORD *)v1 + 273) = 1;\n                }\n                result = 0LL;\n                v515 = v498;\n                LODWORD(v12) = v448;\n                goto LABEL_462;\n              }\n              if ( v347 > 1 )\n              {\n                v485 = v348;\n                result = 4294967292LL;\n                v497 = v71;\n                v481 = v13;\n                if ( v492 >= v489 )\n                {\n                  v483 = v10;\n                  goto LABEL_462;\n                }\n                v495 = v12;\n                v525 = v6;\n                v350 = v347 - 1;\n                v526 = v4;\n                *(_QWORD *)&v524 = v5;\n                *((_QWORD *)&v524 + 1) = v7;\n                if ( v347 - 1 <= 0xF )\n                {\n                  v484 = v10;\n                  v351 = *((_DWORD *)v1 + 1955);\n                  v523 = (signed int)v351;\n                  v352 = *((_BYTE *)v1 + v351 + v350 + 3724);\n                  if ( v350 < 4 )\n                    goto LABEL_634;\n                  v353 = v347 + 3;\n                  do\n                  {\n                    v354 = (signed int)(v351 + v347 - 2);\n                    *((_BYTE *)v1 + (signed int)(v351 + v347 - 1) + 3724) = *((_BYTE *)v1 + v354 + 3724);\n                    *((_BYTE *)v1 + v354 + 3724) = *((_BYTE *)v1 + (signed int)(v351 + v347 - 3) + 3724);\n                    *(_WORD *)((char *)v1 + (signed int)(v351 + v347 - 4) + 3724) = *(_WORD *)((char *)v1\n                                                                                             + (signed int)(v351 + v347 - 5)\n                                                                                             + 3724);\n                    v355 = v347 - 4;\n                    v356 = v347 - 5;\n                    v250 = v356 < 3;\n                    v21 = v356 == 3;\n                    v347 = v355;\n                  }\n                  while ( !v250 && !v21 );\n                  v350 = v353 & 3;\n                  if ( v350 )\n                  {\nLABEL_634:\n                    v357 = v350;\n                    v358 = v350 - 1 + 1LL;\n                    if ( v358 < 0x10 )\n                      goto LABEL_635;\n                    v376 = (unsigned int)(v357 - 1);\n                    v377 = (unsigned int)v357 + v351;\n                    if ( v351 + 1 > (unsigned int)v377 )\n                      goto LABEL_635;\n                    v378 = (unsigned int)v357 + v351 - 1;\n                    if ( v351 > (unsigned int)v378 )\n                      goto LABEL_635;\n                    if ( (char *)v1 + v377 - v376 + 3724 > (char *)v1 + v377 + 3724 )\n                      goto LABEL_635;\n                    if ( (char *)v1 + v378 - v376 + 3724 > (char *)v1 + v378 + 3724 )\n                      goto LABEL_635;\n                    v379 = (unsigned int)v357 + v351;\n                    v380 = (unsigned int)(v357 - 1);\n                    v381 = (unsigned int)v357 + v351 - 1;\n                    if ( (char *)v1 + v379 + 3724 - v380 < (char *)v1 + v381 + 3725\n                      && (char *)v1 + v381 + 3724 - v380 < (char *)v1 + v379 + 3725 )\n                    {\n                      goto LABEL_635;\n                    }\n                    v382 = v357 + v351;\n                    v383 = v357 & 0xF;\n                    v384 = v358 - v383;\n                    v357 -= v384;\n                    do\n                    {\n                      _mm_storeu_si128(\n                        (__m128i *)((char *)v1 + v382 + 3709),\n                        _mm_loadu_si128((const __m128i *)((char *)v1 + v382 + 3708)));\n                      v382 -= 16;\n                      v384 -= 16LL;\n                    }\n                    while ( v384 );\n                    if ( (_DWORD)v383 )\n                    {\nLABEL_635:\n                      v359 = v357 - 1;\n                      if ( v357 & 3 )\n                      {\n                        v360 = -v357;\n                        LODWORD(v361) = v351 + v357;\n                        v362 = -(v357 & 3);\n                        do\n                        {\n                          v363 = (unsigned int)v361;\n                          v361 = (unsigned int)(v361 - 1);\n                          *((_BYTE *)v1 + v363 + 3724) = *((_BYTE *)v1 + v361 + 3724);\n                          LODWORD(v360) = v360 + 1;\n                          ++v362;\n                        }\n                        while ( v362 );\n                        LODWORD(v357) = -(signed int)v360;\n                      }\n                      if ( v359 >= 3 )\n                      {\n                        v364 = v351 - 3;\n                        v365 = v351 - 4;\n                        v366 = v351 - 2;\n                        v367 = 0;\n                        do\n                        {\n                          v368 = (_DWORD)v357 - 1 + v351;\n                          *((_BYTE *)v1 + (unsigned int)v357 + v351 + 3724) = *((_BYTE *)v1 + v368 + 3724);\n                          v369 = (unsigned int)(v357 + v366);\n                          *((_BYTE *)v1 + v368 + 3724) = *((_BYTE *)v1 + v369 + 3724);\n                          v370 = (unsigned int)(v357 + v364);\n                          *((_BYTE *)v1 + v369 + 3724) = *((_BYTE *)v1 + v370 + 3724);\n                          *((_BYTE *)v1 + v370 + 3724) = *((_BYTE *)v1 + (unsigned int)(v357 + v365) + 3724);\n                          v364 -= 4;\n                          v365 -= 4;\n                          v367 += 4;\n                          v366 -= 4;\n                          v351 -= 4;\n                        }\n                        while ( (_DWORD)v357 != v367 );\n                      }\n                    }\n                  }\n                  *((_BYTE *)v1 + v523 + 3724) = v352;\n                  v10 = v484;\n                  v371 = v492;\nLABEL_505:\n                  v389 = v514;\n                  v390 = *((unsigned __int8 *)v1 + v352 + 3468);\n                  ++*((_DWORD *)v1 + v390 + 17);\n                  if ( *((_BYTE *)v1 + 44) )\n                    *((_WORD *)v1[395] + v371) = *((unsigned __int8 *)v1 + v352 + 3468);\n                  else\n                    *((_DWORD *)v1[394] + v371) = *((unsigned __int8 *)v1 + v352 + 3468);\n                  v4 = v526;\n                  v5 = (int *)v524;\n                  v6 = v525;\n                  v7 = (_DWORD *)*((_QWORD *)&v524 + 1);\n                  v12 = v495;\n                  v492 = v371 + 1;\n                  if ( v514 )\n                  {\n                    v391 = v485;\n                  }\n                  else\n                  {\n                    v516 = (signed int)v516 + 1LL;\n                    if ( (signed int)v516 >= v488 )\n                    {\n                      v483 = v10;\n                      v514 = 0;\n                      goto LABEL_462;\n                    }\n                    v392 = *((unsigned __int8 *)v1 + v516 + 7884);\n                    v391 = *((_DWORD *)v1 + v392 + 16003);\n                    v519 = *((unsigned __int8 *)v1 + v516 + 7884);\n                    v392 *= 1032LL;\n                    v529 = (unsigned __int8 **)((char *)v1 + v392 + 45436);\n                    v527 = (unsigned __int8 **)((char *)v1 + v392 + 57820);\n                    v528 = (unsigned __int8 **)((char *)v1 + v392 + 51628);\n                    v389 = 50;\n                  }\n                  v514 = v389 - 1;\n                  v485 = v391;\n                  v13 = v391;\n                  v11 = v480;\nLABEL_513:\n                  v480 = v11;\n                  *((_DWORD *)v1 + 2) = 40;\n                  v393 = *((_DWORD *)v1 + 9);\n                  v72 = v12;\n                  if ( v393 >= v13 )\n                  {\n                    v397 = *((_DWORD *)v1 + 8);\nLABEL_521:\n                    v76 = v393 - v13;\n                    v71 = (v397 >> v76) & ((1 << v13) - 1);\n                    *((_DWORD *)v1 + 9) = v76;\n                    while ( 1 )\n                    {\n                      result = 4294967292LL;\n                      if ( v13 > 20 )\n                        goto LABEL_457;\n                      v210 = v13;\n                      if ( v71 <= *((_DWORD *)v529 + v13) )\n                        goto LABEL_464;\n                      ++v13;\n                      v75 = (int *)((char *)v1 + 36);\nLABEL_346:\n                      *((_DWORD *)v1 + 2) = 41;\n                      if ( v76 <= 0 )\n                        break;\n                      v259 = *((_DWORD *)v1 + 8);\nLABEL_353:\n                      v263 = (v259 >> --v76) & 1;\n                      *v75 = v76;\n                      v71 = v263 + 2 * v71;\n                      v491 = v263;\n                    }\n                    v481 = v13;\n                    while ( 1 )\n                    {\n                      v260 = (__int64 *)*v1;\n                      v261 = *((_DWORD *)*v1 + 2);\n                      if ( !v261 )\n                        break;\n                      v262 = *v260;\n                      v259 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                      *((_DWORD *)v1 + 8) = v259;\n                      v76 += 8;\n                      *((_DWORD *)v1 + 9) = v76;\n                      *v260 = v262 + 1;\n                      *((_DWORD *)v260 + 2) = v261 - 1;\n                      v21 = (*((_DWORD *)v260 + 3))++ == -1;\n                      if ( v21 )\n                        ++*((_DWORD *)v260 + 4);\n                      v13 = v481;\n                      if ( v76 - 8 > -8 )\n                        goto LABEL_353;\n                    }\n                    v497 = v71;\n                  }\n                  else\n                  {\n                    v394 = *v1;\n                    v395 = *((_DWORD *)*v1 + 2) - 1;\n                    while ( v395 != -1 )\n                    {\n                      v396 = (__int64)*v394;\n                      v397 = (*((_DWORD *)v1 + 8) << 8) | **v394;\n                      *((_DWORD *)v1 + 8) = v397;\n                      v393 += 8;\n                      *((_DWORD *)v1 + 9) = v393;\n                      *v394 = (unsigned __int8 *)(v396 + 1);\n                      *((_DWORD *)v394 + 2) = v395;\n                      v21 = (*((_DWORD *)v394 + 3))++ == -1;\n                      if ( v21 )\n                        ++*((_DWORD *)v394 + 4);\n                      --v395;\n                      if ( v393 >= v13 )\n                        goto LABEL_521;\n                    }\nLABEL_458:\n                    v481 = v13;\n                  }\n                  v483 = v10;\n                  result = 0LL;\n                  goto LABEL_461;\n                }\n                v372 = v350 >> 4;\n                v373 = *((_DWORD *)v1 + v372 + 1955);\n                v374 = (signed int)(v373 + (v350 & 0xF));\n                v352 = *((_BYTE *)v1 + v374 + 3724);\n                if ( v350 & 0xF )\n                {\n                  do\n                  {\n                    *((_BYTE *)v1 + v374 + 3724) = *((_BYTE *)v1 + v374 + 3723);\n                    --v374;\n                    v375 = *((signed int *)v1 + v372 + 1955);\n                  }\n                  while ( v374 > v375 );\n                  LODWORD(v375) = v375 + 1;\n                  *((_DWORD *)v1 + v372 + 1955) = v375;\n                  if ( !(_DWORD)v372 )\n                  {\nLABEL_501:\n                    v386 = *((signed int *)v1 + 1955);\n                    *((_DWORD *)v1 + 1955) = v386 - 1;\n                    *((_BYTE *)v1 + v386 + 3723) = v352;\n                    if ( *((_DWORD *)v1 + 1955) )\n                    {\n                      v371 = v492;\n                    }\n                    else\n                    {\n                      v387 = 4080;\n                      v388 = 0LL;\n                      v371 = v492;\n                      do\n                      {\n                        BYTE3(v1[v388 + 977]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3739);\n                        BYTE2(v1[v388 + 977]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3738);\n                        BYTE1(v1[v388 + 977]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3737);\n                        LOBYTE(v1[v388 + 977]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3736);\n                        HIBYTE(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3735);\n                        BYTE6(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3734);\n                        BYTE5(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3733);\n                        BYTE4(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3732);\n                        BYTE3(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3731);\n                        BYTE2(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3730);\n                        BYTE1(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3729);\n                        LOBYTE(v1[v388 + 976]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3728);\n                        HIBYTE(v1[v388 + 975]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3727);\n                        BYTE6(v1[v388 + 975]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3726);\n                        BYTE5(v1[v388 + 975]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3725);\n                        BYTE4(v1[v388 + 975]) = *((_BYTE *)v1 + *(signed int *)((char *)v1 + v388 * 2 + 7880) + 3724);\n                        *(_DWORD *)((char *)v1 + v388 * 2 + 7880) = v387;\n                        v388 -= 2LL;\n                        v387 -= 16;\n                      }\n                      while ( v388 != -32 );\n                    }\n                    goto LABEL_505;\n                  }\n                }\n                else\n                {\n                  LODWORD(v375) = v373 + 1;\n                  *((_DWORD *)v1 + v372 + 1955) = v375;\n                }\n                v375 = (signed int)v375;\n                *((_DWORD *)v1 + v372 + 1955) = v375 - 1;\n                *((_BYTE *)v1 + v375 + 3723) = *((_BYTE *)v1 + *((signed int *)v1 + v372 + 1954) + 3739);\n                if ( v350 >= 0x20 )\n                {\n                  do\n                  {\n                    v385 = *((signed int *)v1 + v372 + 1954);\n                    *((_DWORD *)v1 + v372 + 1954) = v385 - 1;\n                    *((_BYTE *)v1 + v385 + 3723) = *((_BYTE *)v1 + *((signed int *)v1 + v372-- + 1953) + 3739);\n                  }\n                  while ( v372 > 1 );\n                }\n                goto LABEL_501;\n              }\n              v513 = -1;\n              v349 = 1;\n              while ( 2 )\n              {\n                v497 = v71;\n                if ( v498 == 1 )\n                {\n                  v459 = v513 + 2 * v349;\nLABEL_589:\n                  v513 = v459;\n                }\n                else if ( !v498 )\n                {\n                  v459 = v349 + v513;\n                  goto LABEL_589;\n                }\n                v11 = v480;\n                v520 = (unsigned int)(2 * v349);\n                if ( v514 )\n                {\n                  v460 = v514;\n                }\n                else\n                {\n                  v516 = (signed int)v516 + 1LL;\n                  if ( (signed int)v516 >= v488 )\n                  {\n                    v481 = v13;\n                    v485 = v348;\n                    v483 = v10;\n                    result = 4294967292LL;\n                    v514 = 0;\n                    goto LABEL_463;\n                  }\n                  v461 = *((unsigned __int8 *)v1 + v516 + 7884);\n                  v462 = *((_DWORD *)v1 + v461 + 16003);\n                  v519 = *((unsigned __int8 *)v1 + v516 + 7884);\n                  v461 *= 1032LL;\n                  v529 = (unsigned __int8 **)((char *)v1 + v461 + 45436);\n                  v527 = (unsigned __int8 **)((char *)v1 + v461 + 57820);\n                  v528 = (unsigned __int8 **)((char *)v1 + v461 + 51628);\n                  v348 = v462;\n                  v11 = v480;\n                  v460 = 50;\n                }\n                v514 = v460 - 1;\n                v485 = v348;\n                v13 = v348;\nLABEL_595:\n                v480 = v11;\n                *((_DWORD *)v1 + 2) = 38;\n                v463 = *((_DWORD *)v1 + 9);\n                v72 = v12;\n                if ( v463 < v13 )\n                {\n                  while ( 1 )\n                  {\n                    v464 = (__int64 *)*v1;\n                    v465 = *((_DWORD *)*v1 + 2);\n                    if ( !v465 )\n                      goto LABEL_458;\n                    v466 = *v464;\n                    v467 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                    *((_DWORD *)v1 + 8) = v467;\n                    v463 += 8;\n                    *((_DWORD *)v1 + 9) = v463;\n                    *v464 = v466 + 1;\n                    *((_DWORD *)v464 + 2) = v465 - 1;\n                    v21 = (*((_DWORD *)v464 + 3))++ == -1;\n                    if ( v21 )\n                      ++*((_DWORD *)v464 + 4);\n                    if ( v463 >= v13 )\n                      goto LABEL_602;\n                  }\n                }\n                v467 = *((_DWORD *)v1 + 8);\nLABEL_602:\n                v74 = v463 - v13;\n                v71 = (v467 >> v74) & ((1 << v13) - 1);\n                *((_DWORD *)v1 + 9) = v74;\n                while ( 1 )\n                {\n                  result = 4294967292LL;\n                  if ( v13 > 20 )\n                    goto LABEL_457;\n                  if ( v71 <= *((_DWORD *)v529 + v13) )\n                    break;\n                  v468 = v13;\n                  v68 = (signed __int64)v7;\n                  v481 = v468 + 1;\n                  v73 = (int *)((char *)v1 + 36);\nLABEL_608:\n                  *((_DWORD *)v1 + 2) = 39;\n                  if ( v74 <= 0 )\n                  {\n                    while ( 1 )\n                    {\n                      v470 = (__int64 *)*v1;\n                      v471 = *((_DWORD *)*v1 + 2);\n                      if ( !v471 )\n                        break;\n                      v472 = *v470;\n                      v469 = (*((_DWORD *)v1 + 8) << 8) | ***v1;\n                      *((_DWORD *)v1 + 8) = v469;\n                      v74 += 8;\n                      *((_DWORD *)v1 + 9) = v74;\n                      *v470 = v472 + 1;\n                      *((_DWORD *)v470 + 2) = v471 - 1;\n                      v21 = (*((_DWORD *)v470 + 3))++ == -1;\n                      if ( v21 )\n                        ++*((_DWORD *)v470 + 4);\n                      if ( v74 - 8 > -8 )\n                        goto LABEL_614;\n                    }\nLABEL_460:\n                    v497 = v71;\n                    v483 = v10;\n                    result = 0LL;\n                    v7 = (_DWORD *)v68;\nLABEL_461:\n                    LODWORD(v12) = v72;\nLABEL_462:\n                    v11 = v480;\n                    goto LABEL_463;\n                  }\n                  v469 = *((_DWORD *)v1 + 8);\nLABEL_614:\n                  v473 = (v469 >> --v74) & 1;\n                  *v73 = v74;\n                  v71 = v473 + 2 * v71;\n                  v491 = v473;\n                  v7 = (_DWORD *)v68;\n                  v13 = v481;\n                }\n                v474 = v71 - (signed __int64)*((signed int *)v528 + v13);\n                v12 = v72;\n                if ( (unsigned int)v474 > 0x101 )\n                  goto LABEL_604;\n                v498 = *((_DWORD *)v527 + v474);\n                if ( v498 < 2 )\n                {\n                  v348 = v485;\n                  v349 = v520;\n                  continue;\n                }\n                break;\n              }\n              v475 = v513 + 1;\n              v476 = *((unsigned __int8 *)v1 + *((unsigned __int8 *)v1 + *((signed int *)v1 + 1955) + 3724) + 3468);\n              *((_DWORD *)v1 + v476 + 17) += v513 + 1;\n              if ( *((_BYTE *)v1 + 44) )\n              {\n                if ( v513 >= 0 )\n                {\n                  v477 = v492;\n                  while ( v477 < v489 )\n                  {\n                    *((_WORD *)v1[395] + v477++) = v476;\n                    v478 = v475 - 1;\n                    v163 = __OFSUB__(v475, 1);\n                    v21 = v475 == 1;\n                    v159 = v475-- - 1 < 0;\n                    if ( (unsigned __int8)(v159 ^ v163) | v21 )\n                      goto LABEL_628;\n                  }\nLABEL_631:\n                  v492 = v477;\n                  v481 = v13;\n                  v497 = v71;\n                  v483 = v10;\n                  v513 = v475;\n                  goto LABEL_461;\n                }\n              }\n              else if ( v513 >= 0 )\n              {\n                LODWORD(v476) = (unsigned __int16)v476;\n                v477 = v492;\n                while ( v477 < v489 )\n                {\n                  *((_DWORD *)v1[394] + v477++) = v476;\n                  v478 = v475 - 1;\n                  v163 = __OFSUB__(v475, 1);\n                  v21 = v475 == 1;\n                  v159 = v475-- - 1 < 0;\n                  if ( (unsigned __int8)(v159 ^ v163) | v21 )\n                  {\nLABEL_628:\n                    v492 = v477;\n                    v513 = v478;\n                    v12 = v72;\n                    goto LABEL_630;\n                  }\n                }\n                goto LABEL_631;\n              }\n              ++v513;\nLABEL_630:\n              v348 = v485;\n              v347 = v498;\n              continue;\n            }\n          }\n        }\n      }\n    }\n    else\n    {\n      v225 = _mm_load_si128((const __m128i *)&xmmword_412A70);\n      v226 = 0;\n      if ( !v224 )\n        goto LABEL_322;\n    }\n    v240 = -v224;\n    v241 = _mm_load_si128((const __m128i *)&xmmword_412A80);\n    v242 = _mm_load_si128((const __m128i *)&xmmword_412A90);\n    do\n    {\n      v243 = (unsigned __int8)v226 & 0xE0;\n      _mm_storeu_si128((__m128i *)&v522[v243], v225);\n      _mm_storeu_si128((__m128i *)((char *)&v524 + v243 + 2), _mm_add_epi8(v225, v241));\n      v226 += 32;\n      v225 = _mm_add_epi8(v225, v242);\n      ++v240;\n    }\n    while ( v240 );\n    goto LABEL_322;\n  }\nLABEL_463:\n  LODWORD(v4->m128i_i64[0]) = v483;\n  *v5 = v486;\n  *v6 = v11;\n  *v7 = v490;\n  *v549 = v517;\n  *v548 = v488;\n  *v547 = v515;\n  *v546 = v516;\n  *v545 = v514;\n  *v544 = v498;\n  *v543 = v489;\n  *v542 = v492;\n  *v541 = v513;\n  *v540 = v520;\n  *v539 = v518;\n  *v538 = v12;\n  *v537 = v481;\n  *v536 = v497;\n  *v535 = v491;\n  *v534 = v519;\n  *v533 = v485;\n  *v532 = v529;\n  *v531 = v528;\n  *v530 = v527;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c5c0L", 
            "funcEndAddr": "0x410c8bL", 
            "funcName": "sub_40C5C0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_410C90(unsigned int a1@<edx>, signed int a2@<ecx>, __int64 j@<rbx>, __int64 a4@<rdi>, __int64 a5@<rsi>)\n{\n  signed int v5; // er14\n  signed int v6; // er12\n  __int64 v7; // r15\n  __int64 v8; // rcx\n  unsigned __int64 v9; // rdi\n  __int64 v10; // rdx\n  signed __int64 v11; // rbp\n  unsigned __int64 v12; // rdi\n  __m128i v13; // xmm1\n  __m128i v14; // xmm2\n  __m128i v15; // xmm3\n  __m128i v16; // xmm4\n  __m128i v17; // xmm5\n  __m128i v18; // xmm2\n  __m128i v19; // xmm3\n  __m128i v20; // xmm4\n  __m128i v21; // xmm5\n  __m128i v22; // xmm0\n  __m128i v23; // xmm1\n  __m128i v24; // xmm3\n  __m128i v25; // xmm2\n  __m128i v26; // xmm4\n  signed __int64 v27; // rdx\n  signed int v28; // edi\n  unsigned __int64 v29; // rax\n  unsigned __int64 v30; // rax\n  __int64 v31; // rax\n  signed __int64 v32; // rcx\n  __m128i v33; // xmm4\n  __m128i v34; // xmm5\n  int *v35; // rdx\n  int v36; // esi\n  __int64 v37; // rdi\n  __int64 i; // rbp\n  __int64 v39; // rdx\n  int v40; // edx\n  signed __int64 v41; // rax\n  signed __int64 v42; // r14\n  signed __int64 v43; // r10\n  __int64 v44; // r8\n  int v45; // er9\n  signed __int64 v46; // r12\n  int v47; // ebp\n  int v48; // ecx\n  int v49; // edi\n  signed int v50; // esi\n  int v51; // edx\n  __int64 v52; // rbx\n  __int64 v53; // rdx\n  __int64 v54; // r9\n  int *v55; // rdi\n  int v56; // er11\n  signed __int64 v57; // rbx\n  int v58; // esi\n  signed int v59; // edx\n  int v60; // er13\n  __int64 v61; // rcx\n  __int64 v62; // rcx\n  signed int v63; // edx\n  int v64; // eax\n  int v65; // ebp\n  unsigned int v66; // esi\n  unsigned int v67; // ebp\n  int v68; // esi\n  signed int v69; // ebp\n  __int64 v70; // rax\n  bool v71; // zf\n  bool v72; // sf\n  unsigned __int8 v73; // of\n  int v74; // esi\n  unsigned __int64 v75; // rcx\n  signed int v76; // edi\n  int v77; // edx\n  signed int v78; // ebp\n  signed int v79; // ecx\n  int v80; // esi\n  char v81; // al\n  signed __int64 v82; // rdx\n  unsigned __int64 v83; // rax\n  __m128i *v84; // rcx\n  __m128i v85; // xmm0\n  __m128i v86; // xmm1\n  int *v87; // rax\n  signed __int64 v88; // rcx\n  signed int v89; // [rsp+Ch] [rbp-14BCh]\n  unsigned __int64 v90; // [rsp+10h] [rbp-14B8h]\n  signed __int64 v91; // [rsp+18h] [rbp-14B0h]\n  unsigned __int64 v92; // [rsp+20h] [rbp-14A8h]\n  int v93; // [rsp+28h] [rbp-14A0h]\n  unsigned __int64 v94; // [rsp+30h] [rbp-1498h]\n  signed __int64 v95; // [rsp+38h] [rbp-1490h]\n  signed int v96; // [rsp+40h] [rbp-1488h]\n  unsigned __int64 v97; // [rsp+48h] [rbp-1480h]\n  int v98; // [rsp+50h] [rbp-1478h]\n  __int64 v99; // [rsp+58h] [rbp-1470h]\n  int v100; // [rsp+60h] [rbp-1468h]\n  int v101[259]; // [rsp+64h] [rbp-1464h]\n  int v102; // [rsp+470h] [rbp-1058h]\n  __int128 v103; // [rsp+474h] [rbp-1054h]\n  __int128 v104; // [rsp+484h] [rbp-1044h]\n  __int128 v105; // [rsp+494h] [rbp-1034h]\n  __int128 v106[125]; // [rsp+4A4h] [rbp-1024h]\n  int v107; // [rsp+C80h] [rbp-848h]\n  int v108[529]; // [rsp+C84h] [rbp-844h]\n\n  v5 = a2;\n  v6 = a1;\n  v7 = a4;\n  if ( (signed int)a1 <= 0 )\n    goto LABEL_13;\n  if ( a1 >= 8 )\n  {\n    v8 = a1 & 0xFFFFFFF8;\n    v9 = (unsigned __int64)(v8 - 8) >> 3;\n    v10 = ((_BYTE)v9 + 1) & 1;\n    if ( v8 == 8 )\n    {\n      v12 = 0LL;\n      if ( v10 )\n      {\nLABEL_8:\n        v22 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12));\n        v23 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12 + 16));\n        v24 = _mm_cmpeq_epi32(v22, (__m128i)0LL);\n        v25 = _mm_cmpeq_epi32((__m128i)0LL, v23);\n        v26 = _mm_load_si128((const __m128i *)&xmmword_412B00);\n        v27 = 4 * v12 | 4;\n        _mm_storeu_si128(\n          (__m128i *)((char *)&v102 + v27),\n          _mm_or_si128(_mm_andnot_si128(v24, _mm_slli_epi32(v22, 8u)), _mm_and_si128(v26, v24)));\n        _mm_storeu_si128(\n          (__m128i *)((char *)&v103 + v27 + 12),\n          _mm_or_si128(_mm_andnot_si128(v25, _mm_slli_epi32(v23, 8u)), _mm_and_si128(v26, v25)));\n        goto LABEL_9;\n      }\n    }\n    else\n    {\n      v11 = v10 - 1 - v9;\n      v12 = 0LL;\n      v13 = _mm_load_si128((const __m128i *)&xmmword_412B00);\n      do\n      {\n        v14 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12));\n        v15 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12 + 16));\n        v16 = _mm_cmpeq_epi32(v14, (__m128i)0LL);\n        v17 = _mm_cmpeq_epi32(v15, (__m128i)0LL);\n        _mm_storeu_si128(\n          (__m128i *)((char *)&v103 + 4 * v12),\n          _mm_or_si128(_mm_andnot_si128(v16, _mm_slli_epi32(v14, 8u)), _mm_and_si128(v13, v16)));\n        _mm_storeu_si128(\n          (__m128i *)((char *)&v104 + 4 * v12),\n          _mm_or_si128(_mm_andnot_si128(v17, _mm_slli_epi32(v15, 8u)), _mm_and_si128(v13, v17)));\n        v18 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12 + 32));\n        v19 = _mm_loadu_si128((const __m128i *)(a5 + 4 * v12 + 48));\n        v20 = _mm_cmpeq_epi32(v18, (__m128i)0LL);\n        v21 = _mm_cmpeq_epi32(v19, (__m128i)0LL);\n        _mm_storeu_si128(\n          (__m128i *)((char *)&v105 + 4 * v12),\n          _mm_or_si128(_mm_andnot_si128(v20, _mm_slli_epi32(v18, 8u)), _mm_and_si128(v13, v20)));\n        _mm_storeu_si128(\n          (__m128i *)&v106[v12 / 4],\n          _mm_or_si128(_mm_andnot_si128(v21, _mm_slli_epi32(v19, 8u)), _mm_and_si128(v13, v21)));\n        v12 += 16LL;\n        v11 += 2LL;\n      }\n      while ( v11 );\n      if ( v10 )\n        goto LABEL_8;\n    }\nLABEL_9:\n    if ( v8 == v6 )\n      goto LABEL_13;\n    goto LABEL_10;\n  }\n  v8 = 0LL;\n  do\n  {\nLABEL_10:\n    v28 = *(_DWORD *)(a5 + 4 * v8) << 8;\n    if ( !*(_DWORD *)(a5 + 4 * v8) )\n      v28 = 256;\n    *((_DWORD *)&v103 + v8++) = v28;\n  }\n  while ( v6 != v8 );\nLABEL_13:\n  v100 = 0;\n  v102 = 0;\n  v107 = -2;\n  if ( v6 > 0 )\n  {\n    v29 = (unsigned int)(v6 + 1);\n    v95 = v6;\n    v99 = (unsigned int)v6;\n    v90 = v29--;\n    v98 = ~((_BYTE)v6 + 1) & 1;\n    v94 = v29 - (~((_BYTE)v6 + 1) & 1);\n    v97 = v29;\n    v93 = v6 & 7;\n    v30 = v29 - (v6 & 7);\n    v92 = v30;\n    v91 = v30 + 1;\n    v31 = 0LL;\n    v32 = 1LL;\n    v33 = _mm_load_si128((const __m128i *)&xmmword_412B10);\n    v34 = _mm_load_si128((const __m128i *)&xmmword_412B00);\n    v89 = v5;\n    v96 = v6;\n    while ( 1 )\n    {\n      do\n      {\n        *(&v107 + v32) = -1;\n        v35 = &v101[v31];\n        v101[v31++] = v32;\n        v36 = *(&v102 + v32);\n        v37 = (unsigned int)v31 >> 1;\n        for ( i = *(&v100 + v37); v36 < *(&v102 + i); v35 = &v100 + v39 )\n        {\n          *v35 = i;\n          v39 = (signed int)v37;\n          LODWORD(v37) = (signed int)v37 >> 1;\n          i = *(&v100 + (signed int)v37);\n        }\n        *v35 = v32++;\n      }\n      while ( v31 != v99 );\n      if ( (unsigned int)v6 >= 0x104 )\n        sub_404F10(0x7D1u);\n      if ( v6 >= 2 )\n      {\n        v42 = v95;\n        v43 = v95;\n        do\n        {\n          v44 = v101[0];\n          v45 = *(&v100 + v42);\n          v101[0] = *(&v100 + v42);\n          v46 = v42 - 1;\n          v47 = 1;\n          v48 = 1;\n          if ( v42 >= 3 )\n          {\n            v49 = *(&v102 + v45);\n            v50 = 1;\n            v51 = 2;\n            while ( 1 )\n            {\n              v52 = v51;\n              if ( v46 <= v51 )\n              {\n                v48 = v51;\n              }\n              else\n              {\n                v48 = v51 | 1;\n                if ( *(&v102 + *(&v100 + (v51 | 1))) >= *(&v102 + *(&v100 + v51)) )\n                  v48 = v51;\n                v52 = v48;\n              }\n              v53 = *(&v100 + v52);\n              if ( v49 < *(&v102 + v53) )\n                break;\n              *(&v100 + v50) = v53;\n              v51 = 2 * v48;\n              v50 = v48;\n              if ( v42 <= 2 * v48 )\n                goto LABEL_38;\n            }\n            v48 = v50;\n          }\nLABEL_38:\n          *(&v100 + v48) = v45;\n          v54 = v101[0];\n          v55 = &v100 + v46;\n          v56 = *((_DWORD *)&v99 + v42 + 1);\n          v101[0] = *((_DWORD *)&v99 + v42 + 1);\n          if ( v42 >= 4 )\n          {\n            v57 = v42 - 2;\n            v58 = *(&v102 + v56);\n            v59 = 1;\n            v60 = 2;\n            while ( 1 )\n            {\n              v61 = v60;\n              if ( v57 <= v60 )\n              {\n                v47 = v60;\n              }\n              else\n              {\n                v47 = v60 | 1;\n                if ( *(&v102 + *(&v100 + (v60 | 1))) >= *(&v102 + *(&v100 + v60)) )\n                  v47 = v60;\n                v61 = v47;\n              }\n              v62 = *(&v100 + v61);\n              if ( v58 < *(&v102 + v62) )\n                break;\n              *(&v100 + v59) = v62;\n              v60 = 2 * v47;\n              v59 = v47;\n              if ( v57 < 2 * v47 )\n                goto LABEL_49;\n            }\n            v47 = v59;\n          }\nLABEL_49:\n          *(&v100 + v47) = v56;\n          v63 = v43 + 1;\n          *(&v107 + v54) = v43 + 1;\n          *(&v107 + v44) = v43 + 1;\n          v64 = *(&v102 + v44);\n          v65 = *(&v102 + v54);\n          v66 = (unsigned __int8)v65;\n          v67 = (v64 & 0xFFFFFF00) + (v65 & 0xFFFFFF00);\n          if ( (unsigned __int8)v64 > v66 )\n            v66 = (unsigned __int8)v64;\n          v68 = v67 | (v66 + 1);\n          *((_DWORD *)&v103 + v43) = v68;\n          v108[v43] = -1;\n          *v55 = v63;\n          v69 = (signed int)v46 >> 1;\n          for ( j = *(&v100 + ((signed int)v46 >> 1)); v68 < *(&v102 + j); v55 = &v100 + v70 )\n          {\n            *v55 = j;\n            v70 = v69;\n            v69 >>= 1;\n            j = *(&v100 + v69);\n          }\n          *v55 = v63;\n          v73 = __OFSUB__(v42, 2LL);\n          v71 = v42 == 2;\n          v72 = v42-- - 2 < 0;\n          ++v43;\n        }\n        while ( !((unsigned __int8)(v72 ^ v73) | v71) );\n        v5 = v89;\n        v6 = v96;\n        if ( v63 >= 516 )\nLABEL_55:\n          sub_404F10(0x7D2u);\n      }\n      else if ( v6 >= 516 )\n      {\n        goto LABEL_55;\n      }\n      if ( v6 <= 0 )\n        return;\n      if ( (_DWORD)v90 == 2 )\n        break;\n      v74 = 0;\n      v41 = 1LL;\n      v75 = v94;\n      do\n      {\n        v76 = -1;\n        v77 = v41;\n        do\n        {\n          v77 = *(&v107 + v77);\n          ++v76;\n        }\n        while ( v77 >= 0 );\n        *(_BYTE *)(v7 + v41 - 1) = v76;\n        v40 = v41 + 1;\n        v78 = -1;\n        do\n        {\n          v40 = *(&v107 + v40);\n          ++v78;\n        }\n        while ( v40 >= 0 );\n        *(_BYTE *)(v7 + v41) = v78;\n        LOBYTE(v40) = 1;\n        LOBYTE(j) = 1;\n        if ( v76 <= v5 )\n          LODWORD(j) = v74;\n        if ( v78 <= v5 )\n          v40 = j;\n        v41 += 2LL;\n        v74 = v40;\n        v75 -= 2LL;\n      }\n      while ( v75 );\n      if ( v98 )\n        goto LABEL_67;\nLABEL_72:\n      if ( !(_BYTE)v40 )\n        return;\n      if ( v6 <= 0 )\n      {\n        v100 = 0;\n        v102 = 0;\n        v107 = -2;\n        return;\n      }\n      if ( v97 >= 8 )\n      {\n        v83 = v92;\n        v84 = (__m128i *)&v104;\n        do\n        {\n          v85 = _mm_loadu_si128(v84 - 1);\n          v86 = _mm_loadu_si128(v84);\n          _mm_storeu_si128(\n            v84 - 1,\n            _mm_add_epi32(\n              _mm_and_si128(_mm_slli_epi32(_mm_add_epi32(_mm_srli_epi32(v85, 0x1Fu), _mm_srai_epi32(v85, 8u)), 7u), v33),\n              v34));\n          _mm_storeu_si128(\n            v84,\n            _mm_add_epi32(\n              _mm_and_si128(_mm_slli_epi32(_mm_add_epi32(_mm_srli_epi32(v86, 0x1Fu), _mm_srai_epi32(v86, 8u)), 7u), v33),\n              v34));\n          v84 += 2;\n          v83 -= 8LL;\n        }\n        while ( v83 );\n        v82 = v91;\n        if ( !v93 )\n          goto LABEL_81;\n      }\n      else\n      {\n        v82 = 1LL;\n      }\n      v87 = &v102 + v82;\n      v88 = v90 - v82;\n      do\n      {\n        *v87 = ((((*v87 >> 8) + ((unsigned int)*v87 >> 31)) & 0xFFFFFFFE) << 7) + 256;\n        ++v87;\n        --v88;\n      }\n      while ( v88 );\nLABEL_81:\n      v100 = 0;\n      v102 = 0;\n      v107 = -2;\n      v32 = 1LL;\n      v31 = 0LL;\n      if ( v6 <= 0 )\n        return;\n    }\n    LOBYTE(v40) = 0;\n    v41 = 1LL;\n    if ( !v98 )\n      goto LABEL_72;\nLABEL_67:\n    v79 = -1;\n    v80 = v41;\n    do\n    {\n      v80 = *(&v107 + v80);\n      ++v79;\n    }\n    while ( v80 >= 0 );\n    *(_BYTE *)(v7 + v41 - 1) = v79;\n    v81 = 1;\n    if ( v79 <= v5 )\n      v81 = v40;\n    LOBYTE(v40) = v81;\n    goto LABEL_72;\n  }\n}\n", 
            "funcStartAddr": "0x410c90L", 
            "funcEndAddr": "0x411447L", 
            "funcName": "sub_410C90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_411450(__int64 a1, __int64 a2, int a3, int a4, unsigned int a5)\n{\n  int v5; // er11\n  __int64 v6; // rax\n  bool v7; // sf\n  unsigned __int8 v8; // of\n\n  if ( a3 <= a4 )\n  {\n    v5 = 0;\n    do\n    {\n      if ( (signed int)a5 > 0 )\n      {\n        v6 = 0LL;\n        if ( a5 != 1 )\n        {\n          do\n          {\n            if ( a3 == *(unsigned __int8 *)(a2 + v6) )\n              *(_DWORD *)(a1 + 4 * v6) = v5++;\n            if ( a3 == *(unsigned __int8 *)(a2 + v6 + 1) )\n              *(_DWORD *)(a1 + 4 * v6 + 4) = v5++;\n            v6 += 2LL;\n          }\n          while ( a5 - (unsigned __int64)(a5 & 1) != v6 );\n        }\n        if ( a5 & 1 )\n        {\n          if ( a3 == *(unsigned __int8 *)(a2 + v6) )\n            *(_DWORD *)(a1 + 4 * v6) = v5++;\n        }\n      }\n      v5 *= 2;\n      v8 = __OFSUB__(a3, a4);\n      v7 = a3++ - a4 < 0;\n    }\n    while ( v7 ^ v8 );\n  }\n}\n", 
            "funcStartAddr": "0x411450L", 
            "funcEndAddr": "0x4114ceL", 
            "funcName": "sub_411450"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4114D0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, unsigned int a7)\n{\n  __int64 v7; // rbx\n  int v8; // er15\n  __int64 v9; // rax\n  bool v10; // sf\n  unsigned __int8 v11; // of\n  __int64 v12; // rbx\n  int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  int v16; // eax\n  int v17; // eax\n  int v18; // eax\n  int v19; // eax\n  int v20; // eax\n  int v21; // eax\n  int v22; // eax\n  int v23; // eax\n  int v24; // eax\n  int v25; // eax\n  int v26; // eax\n  int v27; // eax\n  int v28; // eax\n  int v29; // eax\n  int v30; // eax\n  int v31; // eax\n  signed __int64 result; // rax\n  int v33; // edx\n  int v34; // ebp\n  __int64 v35; // rax\n  unsigned __int64 v36; // r8\n  unsigned __int64 v37; // r10\n  signed __int64 v38; // rcx\n  signed __int64 v39; // r11\n  signed __int64 v40; // rcx\n  __int64 v41; // rdx\n  unsigned __int64 v42; // rdx\n  signed __int64 v43; // rbx\n  signed __int64 v44; // rcx\n  __m128i v45; // xmm0\n  __m128i v46; // xmm1\n  __m128i v47; // xmm2\n  __m128i v48; // xmm2\n\n  if ( a5 <= a6 )\n  {\n    LODWORD(v7) = 0;\n    v8 = a5;\n    do\n    {\n      if ( (signed int)a7 > 0 )\n      {\n        v9 = 0LL;\n        if ( a7 != 1 )\n        {\n          do\n          {\n            if ( v8 == *(unsigned __int8 *)(a4 + v9) )\n            {\n              v7 = (signed int)v7;\n              *(_DWORD *)(a3 + 4 * v7) = v9;\n              LODWORD(v7) = v7 + 1;\n            }\n            if ( v8 == *(unsigned __int8 *)(a4 + v9 + 1) )\n            {\n              v7 = (signed int)v7;\n              *(_DWORD *)(a3 + 4 * v7) = v9 + 1;\n              LODWORD(v7) = v7 + 1;\n            }\n            v9 += 2LL;\n          }\n          while ( a7 - (unsigned __int64)(a7 & 1) != v9 );\n        }\n        if ( a7 & 1 && v8 == *(unsigned __int8 *)(a4 + v9) )\n        {\n          v7 = (signed int)v7;\n          *(_DWORD *)(a3 + 4 * v7) = v9;\n          LODWORD(v7) = v7 + 1;\n        }\n      }\n      v11 = __OFSUB__(v8, a6);\n      v10 = v8++ - a6 < 0;\n    }\n    while ( v10 ^ v11 );\n  }\n  _mm_storeu_si128((__m128i *)(a2 + 76), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a2 + 64), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a2 + 48), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a2 + 32), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a2 + 16), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)a2, (__m128i)0LL);\n  if ( (signed int)a7 > 0 )\n  {\n    if ( a7 == 1 )\n    {\n      v12 = 0LL;\nLABEL_21:\n      ++*(_DWORD *)(a2 + 4LL * *(unsigned __int8 *)(a4 + v12) + 4);\n      goto LABEL_22;\n    }\n    v12 = 0LL;\n    do\n    {\n      ++*(_DWORD *)(a2 + 4LL * *(unsigned __int8 *)(a4 + v12) + 4);\n      ++*(_DWORD *)(a2 + 4LL * *(unsigned __int8 *)(a4 + v12 + 1) + 4);\n      v12 += 2LL;\n    }\n    while ( a7 - (unsigned __int64)(a7 & 1) != v12 );\n    if ( a7 & 1 )\n      goto LABEL_21;\n  }\nLABEL_22:\n  v13 = *(_DWORD *)(a2 + 4) + *(_DWORD *)(a2 + 8);\n  *(_DWORD *)(a2 + 8) = v13;\n  v14 = *(_DWORD *)(a2 + 12) + v13;\n  *(_DWORD *)(a2 + 12) = v14;\n  v15 = *(_DWORD *)(a2 + 16) + v14;\n  *(_DWORD *)(a2 + 16) = v15;\n  v16 = *(_DWORD *)(a2 + 20) + v15;\n  *(_DWORD *)(a2 + 20) = v16;\n  v17 = *(_DWORD *)(a2 + 24) + v16;\n  *(_DWORD *)(a2 + 24) = v17;\n  v18 = *(_DWORD *)(a2 + 28) + v17;\n  *(_DWORD *)(a2 + 28) = v18;\n  v19 = *(_DWORD *)(a2 + 32) + v18;\n  *(_DWORD *)(a2 + 32) = v19;\n  v20 = *(_DWORD *)(a2 + 36) + v19;\n  *(_DWORD *)(a2 + 36) = v20;\n  v21 = *(_DWORD *)(a2 + 40) + v20;\n  *(_DWORD *)(a2 + 40) = v21;\n  v22 = *(_DWORD *)(a2 + 44) + v21;\n  *(_DWORD *)(a2 + 44) = v22;\n  v23 = *(_DWORD *)(a2 + 48) + v22;\n  *(_DWORD *)(a2 + 48) = v23;\n  v24 = *(_DWORD *)(a2 + 52) + v23;\n  *(_DWORD *)(a2 + 52) = v24;\n  v25 = *(_DWORD *)(a2 + 56) + v24;\n  *(_DWORD *)(a2 + 56) = v25;\n  v26 = *(_DWORD *)(a2 + 60) + v25;\n  *(_DWORD *)(a2 + 60) = v26;\n  v27 = *(_DWORD *)(a2 + 64) + v26;\n  *(_DWORD *)(a2 + 64) = v27;\n  v28 = *(_DWORD *)(a2 + 68) + v27;\n  *(_DWORD *)(a2 + 68) = v28;\n  v29 = *(_DWORD *)(a2 + 72) + v28;\n  *(_DWORD *)(a2 + 72) = v29;\n  v30 = *(_DWORD *)(a2 + 76) + v29;\n  *(_DWORD *)(a2 + 76) = v30;\n  v31 = *(_DWORD *)(a2 + 80) + v30;\n  *(_DWORD *)(a2 + 80) = v31;\n  result = (unsigned int)(*(_DWORD *)(a2 + 84) + v31);\n  *(_DWORD *)(a2 + 84) = result;\n  *(_DWORD *)(a2 + 88) += result;\n  _mm_storeu_si128((__m128i *)(a1 + 76), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a1 + 64), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a1 + 48), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a1 + 32), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)(a1 + 16), (__m128i)0LL);\n  _mm_storeu_si128((__m128i *)a1, (__m128i)0LL);\n  if ( a5 <= a6 )\n  {\n    result = a5 - 1LL;\n    v33 = 0;\n    do\n    {\n      v34 = *(_DWORD *)(a2 + 4 * result + 8) - *(_DWORD *)(a2 + 4 * result + 4);\n      *(_DWORD *)(a1 + 4 * result + 4) = v33 + v34 - 1;\n      v33 = 2 * (v33 + v34);\n      ++result;\n    }\n    while ( result < a6 );\n  }\n  if ( a5 < a6 )\n  {\n    v35 = a5;\n    v36 = a6 - (signed __int64)a5;\n    if ( v36 >= 8\n      && (a2 + 4 * v35 + 4 >= (unsigned __int64)(a1 + 4LL * a6) || a1 + 4 * v35 >= (unsigned __int64)(a2 + 4LL * a6 + 4)) )\n    {\n      v42 = v36 & 0xFFFFFFFFFFFFFFF8LL;\n      v37 = (v36 & 0xFFFFFFFFFFFFFFF8LL) + v35;\n      v43 = a1 + 4 * v35 + 16;\n      v44 = a2 + 4 * v35 + 20;\n      result = 0LL;\n      v45 = _mm_load_si128((const __m128i *)&unk_412B20);\n      do\n      {\n        v46 = _mm_loadu_si128((const __m128i *)(v43 + 4 * result - 16));\n        v47 = _mm_loadu_si128((const __m128i *)(v43 + 4 * result));\n        v48 = _mm_sub_epi32(\n                _mm_add_epi32(_mm_add_epi32(v47, v47), v45),\n                _mm_loadu_si128((const __m128i *)(v44 + 4 * result)));\n        _mm_storeu_si128(\n          (__m128i *)(v44 + 4 * result - 16),\n          _mm_sub_epi32(\n            _mm_add_epi32(_mm_add_epi32(v46, v46), v45),\n            _mm_loadu_si128((const __m128i *)(v44 + 4 * result - 16))));\n        _mm_storeu_si128((__m128i *)(v44 + 4 * result), v48);\n        result += 8LL;\n      }\n      while ( v42 != result );\n      if ( v36 == v42 )\n        return result;\n    }\n    else\n    {\n      v37 = v35;\n    }\n    result = a6 - 1LL;\n    v38 = v37;\n    if ( ((_BYTE)a6 - (_BYTE)v37) & 1 )\n    {\n      v38 = v37 + 1;\n      *(_DWORD *)(a2 + 4 * v37 + 4) = 2 * *(_DWORD *)(a1 + 4 * v37) + 2 - *(_DWORD *)(a2 + 4 * v37 + 4);\n    }\n    if ( result != v37 )\n    {\n      v39 = a6 - v38;\n      result = a2 + 4 * v38 + 8;\n      v40 = a1 + 4 * v38 + 4;\n      v41 = 0LL;\n      do\n      {\n        *(_DWORD *)(result + 4 * v41 - 4) = 2 * *(_DWORD *)(v40 + 4 * v41 - 4) + 2 - *(_DWORD *)(result + 4 * v41 - 4);\n        *(_DWORD *)(result + 4 * v41) = 2 * *(_DWORD *)(v40 + 4 * v41) + 2 - *(_DWORD *)(result + 4 * v41);\n        v41 += 2LL;\n      }\n      while ( v39 != v41 );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4114d0L", 
            "funcEndAddr": "0x4117f2L", 
            "funcName": "sub_4114D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = ((char *)&stru_414E08 - (char *)&off_414E00) >> 3;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_414E00 + v5++))(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x411800L", 
            "funcEndAddr": "0x411865L", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x411870L", 
            "funcEndAddr": "0x411872L", 
            "funcName": "fini"
        }
    ], 
    "binaryInfo": {
        "binaryName": "bzip2-amd64-clang-O2_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "62", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}