{
    "decompileResult": [
        {
            "decompiledFuncCode": "void *sub_401760()\n{\n  void *result; // rax\n\n  result = &unk_450050;\n  if ( &unk_450050 != &unk_450050 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x401760L", 
            "funcEndAddr": "0x401781L", 
            "funcName": "sub_401760"
        }, 
        {
            "decompiledFuncCode": "void *sub_4017D0()\n{\n  void *result; // rax\n\n  if ( !byte_450060 )\n  {\n    result = sub_401760();\n    byte_450060 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4017d0L", 
            "funcEndAddr": "0x4017f1L", 
            "funcName": "sub_4017D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401800()\n{\n  return 0LL;\n}\n\n__int64 sub_401800()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401790L", 
            "funcEndAddr": "0x4017c1L", 
            "funcName": "sub_401800"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401800()\n{\n  return 0LL;\n}\n\n__int64 sub_401800()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401790L", 
            "funcEndAddr": "0x4017c1L", 
            "funcName": "sub_401800"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_401810@<rax>(char a1@<al>, _QWORD *a2@<rdi>, unsigned int a3@<esi>)\n{\n  _QWORD *v3; // rbx\n  __int64 v4; // rbp\n  int v5; // er12\n  int v6; // er13\n  int v7; // er15\n  unsigned int v8; // ebx\n  __int64 result; // rax\n  char v10; // [rsp-8h] [rbp-38h]\n\n  v10 = a1;\n  v3 = a2;\n  if ( (signed int)a3 <= 0 )\n  {\n    v7 = 0;\n    v6 = 0;\n    v5 = 0;\n  }\n  else\n  {\n    v4 = a3;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    do\n    {\n      switch ( (unsigned int)sub_4354F0(*v3) )\n      {\n        case 0u:\n          ++v7;\n          break;\n        case 1u:\n        case 2u:\n          ++v6;\n          break;\n        case 3u:\n          ++v5;\n          break;\n        default:\n          sub_4325B0(\"No such alphabet type\", a3);\n          return result;\n      }\n      ++v3;\n      --v4;\n    }\n    while ( v4 );\n  }\n  v8 = 2;\n  if ( v6 != a3 )\n  {\n    if ( v5 == a3 )\n    {\n      v8 = 3;\n    }\n    else if ( v6 <= v7 || v6 <= v5 )\n    {\n      if ( v5 <= v6 || v5 <= v7 )\n        sub_4325B0(\"Sorry, I can't tell if that's protein or DNA\", a3);\n      sub_432690(\"Looks like amino acid sequence, hope that's right\", v10);\n      v8 = 3;\n    }\n    else\n    {\n      sub_432690(\"Looks like nucleic acid sequence, hope that's right\", v10);\n    }\n  }\n  return sub_401910(v8);\n}\n", 
            "funcStartAddr": "0x401810L", 
            "funcEndAddr": "0x401910L", 
            "funcName": "sub_401810"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_401910(int a1, char a2)\n{\n  signed __int64 result; // rax\n  char *v3; // rdi\n  signed __int64 v4; // rbx\n  signed __int64 v5; // rbx\n  signed __int64 v6; // rbx\n  signed __int64 v7; // rbx\n  signed __int64 v8; // rbx\n  char v9; // bp\n  signed __int64 v10; // rbx\n  signed __int64 v11; // r15\n  signed __int64 v12; // rbx\n  signed __int64 v13; // rbx\n  signed __int64 v14; // rbx\n  signed __int64 v15; // rbx\n  signed __int64 v16; // rbx\n  signed __int64 v17; // rbx\n  signed __int64 v18; // rbx\n  signed __int64 v19; // rbx\n  signed __int64 v20; // rbx\n  signed __int64 v21; // rbx\n  signed __int64 v22; // rbx\n  signed __int64 v23; // rbx\n  signed __int64 v24; // rbx\n  signed __int64 v25; // rbx\n  signed __int64 v26; // rbx\n  signed __int64 v27; // rbx\n  signed __int64 v28; // rbx\n  signed __int64 v29; // rbx\n  signed __int64 v30; // rbx\n  signed __int64 v31; // rbx\n  signed __int64 v32; // rbx\n  signed __int64 v33; // rbx\n  signed __int64 v34; // rbx\n  signed __int64 v35; // rbx\n  signed __int64 v36; // rbx\n  signed __int64 v37; // rbx\n  signed __int64 v38; // rbx\n  signed __int64 v39; // rbx\n  signed __int64 v40; // rbx\n  signed __int64 v41; // rbx\n  signed __int64 v42; // rbx\n  signed __int64 v43; // rbx\n  signed __int64 v44; // rbx\n\n  result = (unsigned int)dword_464004;\n  if ( dword_464004 )\n  {\n    if ( dword_464004 != a1 )\n    {\n      v3 = \"An alphabet type conflict occurred.\\nYou probably mixed a DNA seq file with a protein model, or vice versa.\";\n      goto LABEL_12;\n    }\n  }\n  else if ( a1 == 2 )\n  {\n    dword_464004 = 2;\n    *(_OWORD *)s = xmmword_440522;\n    word_463FF0 = 88;\n    dword_464000 = 4;\n    dword_463FFC = 17;\n    *(_DWORD *)qword_463D50 = 1;\n    unk_463D64 = 256;\n    unk_463D78 = 0x10000;\n    unk_463D8C = 0x1000000;\n    dword_463DA0 = 0;\n    dword_463DB4 = 0;\n    dword_463DC8 = 0;\n    dword_463DDC = 0;\n    dword_463DF0 = 0;\n    dword_463E04 = 0;\n    dword_463E18 = 0;\n    dword_463E2C = 0;\n    dword_463E40 = 0;\n    dword_463E54 = 0;\n    dword_463E68 = 0;\n    dword_463E7C = 0;\n    dword_463E90 = 0;\n    xmmword_463F30 = xmmword_440150;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 85) - s) = 1;\n    v12 = strchr(s, 85) - s;\n    *((_BYTE *)qword_463D50 + 20 * v12 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 78) - s) = 4;\n    v13 = strchr(s, 78) - s;\n    *((_BYTE *)qword_463D50 + 20 * v13 + strchr(s, 65) - s) = 1;\n    v14 = strchr(s, 78) - s;\n    *((_BYTE *)qword_463D50 + 20 * v14 + strchr(s, 67) - s) = 1;\n    v15 = strchr(s, 78) - s;\n    *((_BYTE *)qword_463D50 + 20 * v15 + strchr(s, 71) - s) = 1;\n    v16 = strchr(s, 78) - s;\n    *((_BYTE *)qword_463D50 + 20 * v16 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 88) - s) = 4;\n    v17 = strchr(s, 88) - s;\n    *((_BYTE *)qword_463D50 + 20 * v17 + strchr(s, 65) - s) = 1;\n    v18 = strchr(s, 88) - s;\n    *((_BYTE *)qword_463D50 + 20 * v18 + strchr(s, 67) - s) = 1;\n    v19 = strchr(s, 88) - s;\n    *((_BYTE *)qword_463D50 + 20 * v19 + strchr(s, 71) - s) = 1;\n    v20 = strchr(s, 88) - s;\n    *((_BYTE *)qword_463D50 + 20 * v20 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 82) - s) = 2;\n    v21 = strchr(s, 82) - s;\n    *((_BYTE *)qword_463D50 + 20 * v21 + strchr(s, 65) - s) = 1;\n    v22 = strchr(s, 82) - s;\n    *((_BYTE *)qword_463D50 + 20 * v22 + strchr(s, 71) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 89) - s) = 2;\n    v23 = strchr(s, 89) - s;\n    *((_BYTE *)qword_463D50 + 20 * v23 + strchr(s, 67) - s) = 1;\n    v24 = strchr(s, 89) - s;\n    *((_BYTE *)qword_463D50 + 20 * v24 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 77) - s) = 2;\n    v25 = strchr(s, 77) - s;\n    *((_BYTE *)qword_463D50 + 20 * v25 + strchr(s, 65) - s) = 1;\n    v26 = strchr(s, 77) - s;\n    *((_BYTE *)qword_463D50 + 20 * v26 + strchr(s, 67) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 75) - s) = 2;\n    v27 = strchr(s, 75) - s;\n    *((_BYTE *)qword_463D50 + 20 * v27 + strchr(s, 71) - s) = 1;\n    v28 = strchr(s, 75) - s;\n    *((_BYTE *)qword_463D50 + 20 * v28 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 83) - s) = 2;\n    v29 = strchr(s, 83) - s;\n    *((_BYTE *)qword_463D50 + 20 * v29 + strchr(s, 67) - s) = 1;\n    v30 = strchr(s, 83) - s;\n    *((_BYTE *)qword_463D50 + 20 * v30 + strchr(s, 71) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 87) - s) = 2;\n    v31 = strchr(s, 87) - s;\n    *((_BYTE *)qword_463D50 + 20 * v31 + strchr(s, 65) - s) = 1;\n    v32 = strchr(s, 87) - s;\n    *((_BYTE *)qword_463D50 + 20 * v32 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 72) - s) = 3;\n    v33 = strchr(s, 72) - s;\n    *((_BYTE *)qword_463D50 + 20 * v33 + strchr(s, 65) - s) = 1;\n    v34 = strchr(s, 72) - s;\n    *((_BYTE *)qword_463D50 + 20 * v34 + strchr(s, 67) - s) = 1;\n    v35 = strchr(s, 72) - s;\n    *((_BYTE *)qword_463D50 + 20 * v35 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 66) - s) = 3;\n    v36 = strchr(s, 66) - s;\n    *((_BYTE *)qword_463D50 + 20 * v36 + strchr(s, 67) - s) = 1;\n    v37 = strchr(s, 66) - s;\n    *((_BYTE *)qword_463D50 + 20 * v37 + strchr(s, 71) - s) = 1;\n    v38 = strchr(s, 66) - s;\n    *((_BYTE *)qword_463D50 + 20 * v38 + strchr(s, 84) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 86) - s) = 3;\n    v39 = strchr(s, 86) - s;\n    *((_BYTE *)qword_463D50 + 20 * v39 + strchr(s, 65) - s) = 1;\n    v40 = strchr(s, 86) - s;\n    *((_BYTE *)qword_463D50 + 20 * v40 + strchr(s, 67) - s) = 1;\n    v41 = strchr(s, 86) - s;\n    *((_BYTE *)qword_463D50 + 20 * v41 + strchr(s, 71) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 68) - s) = 3;\n    v42 = strchr(s, 68) - s;\n    *((_BYTE *)qword_463D50 + 20 * v42 + strchr(s, 65) - s) = 1;\n    v43 = strchr(s, 68) - s;\n    *((_BYTE *)qword_463D50 + 20 * v43 + strchr(s, 71) - s) = 1;\n    v44 = strchr(s, 68) - s;\n    result = strchr(s, 84) - s;\n    *((_BYTE *)qword_463D50 + 20 * v44 + result) = 1;\n  }\n  else\n  {\n    if ( a1 != 3 )\n    {\n      v3 = \"No support for non-nucleic or protein alphabets\";\nLABEL_12:\n      sub_4325B0(v3, a2);\n    }\n    *(_OWORD *)s = xmmword_4404F4;\n    *(_OWORD *)&s[9] = *(__int128 *)((char *)&xmmword_4404F4 + 9);\n    dword_464004 = 3;\n    dword_464000 = 20;\n    dword_463FFC = 24;\n    memset(qword_463D50, 0, 0x1E0uLL);\n    *(_BYTE *)qword_463D50 = 1;\n    byte_463D65 = 1;\n    byte_463D7A = 1;\n    byte_463D8F = 1;\n    xmmword_463F30 = xmmword_440150;\n    byte_463DA4 = 1;\n    byte_463DB9 = 1;\n    byte_463DCE = 1;\n    byte_463DE3 = 1;\n    byte_463DF8 = 1;\n    byte_463E0D = 1;\n    byte_463E22 = 1;\n    byte_463E37 = 1;\n    xmmword_463F40 = xmmword_440150;\n    xmmword_463F50 = xmmword_440150;\n    byte_463E4C = 1;\n    byte_463E61 = 1;\n    byte_463E76 = 1;\n    byte_463E8B = 1;\n    byte_463EA0 = 1;\n    byte_463EB5 = 1;\n    byte_463ECA = 1;\n    byte_463EDF = 1;\n    xmmword_463F60 = xmmword_440150;\n    xmmword_463F70 = xmmword_440150;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 85) - s) = 1;\n    v4 = strchr(s, 85) - s;\n    *((_BYTE *)qword_463D50 + 20 * v4 + strchr(s, 83) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 66) - s) = 2;\n    v5 = strchr(s, 66) - s;\n    *((_BYTE *)qword_463D50 + 20 * v5 + strchr(s, 78) - s) = 1;\n    v6 = strchr(s, 66) - s;\n    *((_BYTE *)qword_463D50 + 20 * v6 + strchr(s, 68) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 90) - s) = 2;\n    v7 = strchr(s, 90) - s;\n    *((_BYTE *)qword_463D50 + 20 * v7 + strchr(s, 81) - s) = 1;\n    v8 = strchr(s, 90) - s;\n    *((_BYTE *)qword_463D50 + 20 * v8 + strchr(s, 69) - s) = 1;\n    *((_DWORD *)&xmmword_463F30 + strchr(s, 88) - s) = 20;\n    v9 = 65;\n    v10 = -20LL;\n    do\n    {\n      v11 = strchr(s, 88) - s;\n      result = strchr(s, v9) - s;\n      *((_BYTE *)qword_463D50 + 20 * v11 + result) = 1;\n      v9 = *((_BYTE *)&xmmword_440522 + v10++);\n    }\n    while ( v10 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401910L", 
            "funcEndAddr": "0x402534L", 
            "funcName": "sub_401910"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_402540(int a1)\n{\n  __int32_t v1; // ebx\n  char *v2; // rax\n  signed __int64 result; // rax\n\n  LOBYTE(v1) = a1;\n  if ( (unsigned int)(a1 + 128) <= 0x17F )\n    v1 = (*__ctype_toupper_loc())[(char)a1];\n  v2 = strchr(s, (char)v1);\n  if ( v2 )\n    result = v2 - s;\n  else\n    result = dword_463FFC - 1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x402540L", 
            "funcEndAddr": "0x402587L", 
            "funcName": "sub_402540"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_402590(__int64 a1, int a2)\n{\n  _BYTE *v2; // r12\n  char v3; // cl\n  __int64 v4; // rbx\n  __int32_t v5; // ebp\n  char *v6; // rax\n  signed __int64 v7; // rax\n\n  v2 = (_BYTE *)sub_4382F0(\"alphabet.c\", 215LL, a2 + 2);\n  v3 = dword_463FFC;\n  v2[a2 + 1] = dword_463FFC;\n  *v2 = v3;\n  if ( a2 > 0 )\n  {\n    v4 = 0LL;\n    do\n    {\n      v5 = *(char *)(a1 + v4);\n      if ( (unsigned int)(v5 + 128) <= 0x17F )\n        v5 = (*__ctype_toupper_loc())[v5];\n      v6 = strchr(s, (char)v5);\n      if ( v6 )\n        v7 = v6 - s;\n      else\n        LOBYTE(v7) = dword_463FFC - 1;\n      v2[v4++ + 1] = v7;\n    }\n    while ( (unsigned int)(a2 + 1) - 1LL != v4 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x402590L", 
            "funcEndAddr": "0x40265bL", 
            "funcName": "sub_402590"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_402740(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // r15\n  signed __int64 v3; // rbx\n  signed __int64 v4; // rbp\n  _BYTE *v5; // rax\n  int v6; // eax\n  signed int v7; // er14\n  signed __int64 v8; // r13\n  char v9; // cl\n  unsigned __int8 v10; // dl\n  __int64 v11; // rbp\n  char *v12; // rax\n  signed __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 *result; // rax\n\n  v2 = sub_4382F0(\"alphabet.c\", 264LL, 8LL * *(signed int *)(a1 + 28));\n  if ( *(_DWORD *)(a1 + 28) > 0 )\n  {\n    v3 = 0LL;\n    v4 = -9223372036854751231LL;\n    do\n    {\n      v5 = (_BYTE *)sub_4382F0(\"alphabet.c\", 266LL, *(signed int *)(a1 + 24) + 2LL);\n      *(_QWORD *)(v2 + 8 * v3) = v5;\n      *v5 = dword_463FFC;\n      v6 = *(_DWORD *)(a1 + 24);\n      v7 = 1;\n      if ( v6 > 0 )\n      {\n        v8 = 0LL;\n        do\n        {\n          v9 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3) + v8);\n          v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3) + v8) - 32;\n          if ( (v10 > 0x3Fu || !_bittest64(&v4, v10)) && v9 != 126 )\n          {\n            v11 = v2;\n            LOBYTE(v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3) + v8);\n            if ( (unsigned int)(v9 + 128) <= 0x17F )\n              LODWORD(v2) = (*__ctype_toupper_loc())[v9];\n            v12 = strchr(s, (char)v2);\n            if ( v12 )\n              v13 = v12 - s;\n            else\n              LOBYTE(v13) = dword_463FFC - 1;\n            v2 = v11;\n            v4 = -9223372036854751231LL;\n            v14 = v7++;\n            *(_BYTE *)(*(_QWORD *)(v2 + 8 * v3) + v14) = v13;\n            v6 = *(_DWORD *)(a1 + 24);\n          }\n          ++v8;\n        }\n        while ( v8 < v6 );\n      }\n      *(_BYTE *)(*(_QWORD *)(v2 + 8 * v3++) + v7) = dword_463FFC;\n    }\n    while ( v3 < *(signed int *)(a1 + 28) );\n  }\n  result = a2;\n  *a2 = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x402740L", 
            "funcEndAddr": "0x4028a8L", 
            "funcName": "sub_402740"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4028B0(__int64 a1, int a2, float a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rcx\n  char *v5; // rdx\n  __int64 v6; // rsi\n\n  result = (unsigned int)dword_464000;\n  if ( dword_464000 <= a2 )\n  {\n    if ( (signed int)result > 0 )\n    {\n      v4 = (char)a2;\n      v5 = (char *)qword_463D50 + 20 * (char)a2;\n      v6 = 0LL;\n      do\n      {\n        if ( v5[v6] )\n          *(float *)(a1 + 4 * v6) = (float)(a3 / (float)*((signed int *)&xmmword_463F30 + v4)) + *(float *)(a1 + 4 * v6);\n        ++v6;\n      }\n      while ( result != v6 );\n    }\n  }\n  else\n  {\n    result = (char)a2;\n    *(float *)(a1 + 4LL * (char)a2) = a3 + *(float *)(a1 + 4LL * (char)a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4028b0L", 
            "funcEndAddr": "0x40290dL", 
            "funcName": "sub_4028B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402A00(int a1, unsigned int a2, int a3, int a4)\n{\n  unsigned int v4; // er12\n  int v5; // er13\n  __int64 v6; // rbx\n  int v7; // er14\n  int v8; // er15\n  signed __int64 v9; // rbp\n  signed __int64 v10; // rdx\n  signed __int64 v11; // rdi\n  int v13; // [rsp+0h] [rbp-38h]\n  int v14; // [rsp+4h] [rbp-34h]\n\n  v14 = a4;\n  v13 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = sub_4382F0(\"core_algorithms.c\", 66LL, 80LL);\n  v7 = a1 + 1;\n  *(_QWORD *)v6 = sub_4382F0(\"core_algorithms.c\", 67LL, 8LL * (a1 + 1));\n  *(_QWORD *)(v6 + 8) = sub_4382F0(\"core_algorithms.c\", 68LL, 8LL * (a1 + 1));\n  *(_QWORD *)(v6 + 16) = sub_4382F0(\"core_algorithms.c\", 69LL, 8LL * (a1 + 1));\n  *(_QWORD *)(v6 + 24) = sub_4382F0(\"core_algorithms.c\", 70LL, 8LL * (a1 + 1));\n  *(_QWORD *)(v6 + 32) = sub_4382F0(\"core_algorithms.c\", 71LL, 20LL * (a1 + 1));\n  v8 = a2 + 2;\n  v9 = 4LL * (signed int)((a1 + 1) * (a2 + 2));\n  *(_QWORD *)(v6 + 40) = sub_4382F0(\"core_algorithms.c\", 72LL, v9);\n  *(_QWORD *)(v6 + 48) = sub_4382F0(\"core_algorithms.c\", 73LL, v9);\n  LOBYTE(a2) = 74;\n  *(_QWORD *)(v6 + 56) = sub_4382F0(\"core_algorithms.c\", 74LL, v9);\n  **(_QWORD **)v6 = *(_QWORD *)(v6 + 32);\n  **(_QWORD **)(v6 + 8) = *(_QWORD *)(v6 + 40);\n  **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 48);\n  **(_QWORD **)(v6 + 24) = *(_QWORD *)(v6 + 56);\n  if ( a1 > 0 )\n  {\n    v10 = 1LL;\n    a2 = 5;\n    v11 = 4LL * v8;\n    do\n    {\n      *(_QWORD *)(*(_QWORD *)v6 + 8 * v10) = **(_QWORD **)v6 + 4LL * a2;\n      *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v10) = v11 + **(_QWORD **)(v6 + 8);\n      *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v10) = v11 + **(_QWORD **)(v6 + 16);\n      *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10++) = v11 + **(_QWORD **)(v6 + 24);\n      a2 += 5;\n      v11 += 4LL * v8;\n    }\n    while ( v7 != v10 );\n  }\n  if ( v13 > 0 && v14 > 0 )\n    sub_4325B0(\"there's trouble with RAMLIMIT if you grow in both M and N.\", a2);\n  *(_DWORD *)(v6 + 64) = v5;\n  *(_DWORD *)(v6 + 68) = v4;\n  *(_DWORD *)(v6 + 72) = v13;\n  *(_DWORD *)(v6 + 76) = v14;\n  return v6;\n}\n", 
            "funcStartAddr": "0x402a00L", 
            "funcEndAddr": "0x402bdaL", 
            "funcName": "sub_402A00"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_402BE0(_QWORD *a1, int a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)\n{\n  _QWORD *v7; // r12\n  int v8; // er13\n  signed __int64 v9; // r15\n  _QWORD *v10; // rbx\n  int v11; // eax\n  int v12; // er13\n  signed __int64 v13; // rbp\n  signed __int64 v14; // rdx\n  signed __int64 v15; // rsi\n  signed __int64 v16; // rdi\n  _QWORD *result; // rax\n  _QWORD *v18; // [rsp+8h] [rbp-40h]\n  _QWORD *v19; // [rsp+10h] [rbp-38h]\n\n  v7 = a4;\n  v8 = a3;\n  LODWORD(v9) = a2;\n  v10 = a1;\n  v19 = a6;\n  v18 = a5;\n  if ( *((_DWORD *)a1 + 16) < a2 )\n  {\n    v9 = *((signed int *)a1 + 18) + (signed __int64)a2;\n    *((_DWORD *)a1 + 16) = v9;\n    *a1 = sub_438340(\"core_algorithms.c\", 133LL, *a1, 8 * v9 + 8);\n    a1[1] = sub_438340(\"core_algorithms.c\", 134LL, a1[1], 8 * v9 + 8);\n    a1[2] = sub_438340(\"core_algorithms.c\", 135LL, a1[2], 8 * v9 + 8);\n    a1[3] = sub_438340(\"core_algorithms.c\", 136LL, a1[3], 8 * v9 + 8);\n    if ( *((_DWORD *)a1 + 17) >= v8 )\n      goto LABEL_7;\nLABEL_6:\n    v8 += *((_DWORD *)a1 + 19);\n    *((_DWORD *)a1 + 17) = v8;\n    goto LABEL_7;\n  }\n  v11 = *((_DWORD *)a1 + 17);\n  if ( v11 >= a3 )\n    goto LABEL_10;\n  if ( v11 < a3 )\n    goto LABEL_6;\nLABEL_7:\n  a1[4] = sub_438340(\"core_algorithms.c\", 144LL, a1[4], 20LL * ((signed int)v9 + 1));\n  v12 = v8 + 2;\n  v13 = 4LL * ((signed int)v9 + 1) * v12;\n  a1[5] = sub_438340(\"core_algorithms.c\", 145LL, a1[5], 4LL * ((signed int)v9 + 1) * v12);\n  a1[6] = sub_438340(\"core_algorithms.c\", 146LL, a1[6], v13);\n  a1[7] = sub_438340(\"core_algorithms.c\", 147LL, a1[7], v13);\n  *(_QWORD *)*a1 = a1[4];\n  *(_QWORD *)a1[1] = a1[5];\n  *(_QWORD *)a1[2] = a1[6];\n  *(_QWORD *)a1[3] = a1[7];\n  if ( (signed int)v9 > 0 )\n  {\n    v14 = 1LL;\n    v15 = 5LL;\n    v16 = 4LL * v12;\n    do\n    {\n      *(_QWORD *)(*v10 + 8 * v14) = *(_QWORD *)*v10 + 4LL * (unsigned int)v15;\n      *(_QWORD *)(v10[1] + 8 * v14) = v16 + *(_QWORD *)v10[1];\n      *(_QWORD *)(v10[2] + 8 * v14) = v16 + *(_QWORD *)v10[2];\n      *(_QWORD *)(v10[3] + 8 * v14++) = v16 + *(_QWORD *)v10[3];\n      v15 += 5LL;\n      v16 += 4LL * v12;\n    }\n    while ( (_DWORD)v9 + 1 != v14 );\n  }\nLABEL_10:\n  if ( v7 )\n    *v7 = *v10;\n  if ( v18 )\n    *v18 = v10[1];\n  result = a7;\n  if ( v19 )\n    *v19 = v10[2];\n  if ( a7 )\n    *a7 = v10[3];\n  return result;\n}\n", 
            "funcStartAddr": "0x402be0L", 
            "funcEndAddr": "0x402e1aL", 
            "funcName": "sub_402BE0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_402E20(int a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)\n{\n  _QWORD *v6; // r14\n  _QWORD *v7; // r15\n  _QWORD *v8; // r12\n  _QWORD *v9; // rbx\n  _QWORD *result; // rax\n\n  v6 = a6;\n  v7 = a5;\n  v8 = a4;\n  v9 = a3;\n  result = (_QWORD *)sub_402A00(a1 - 1, a2, 0, 0);\n  if ( v9 )\n    *v9 = *result;\n  if ( v8 )\n    *v8 = result[1];\n  if ( v7 )\n    *v7 = result[2];\n  if ( v6 )\n    *v6 = result[3];\n  return result;\n}\n", 
            "funcStartAddr": "0x402e20L", 
            "funcEndAddr": "0x402e7cL", 
            "funcName": "sub_402E20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402E80(void *ptr)\n{\n  free(*((void **)ptr + 4));\n  free(*((void **)ptr + 5));\n  free(*((void **)ptr + 6));\n  free(*((void **)ptr + 7));\n  free(*(void **)ptr);\n  free(*((void **)ptr + 1));\n  free(*((void **)ptr + 2));\n  free(*((void **)ptr + 3));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x402e80L", 
            "funcEndAddr": "0x402ed4L", 
            "funcName": "sub_402E80"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_402EE0(signed int a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)\n{\n  signed int v6; // er14\n  _QWORD *v7; // rbx\n  int v8; // er12\n  __int64 v9; // rbp\n  signed __int64 v10; // rdx\n  signed __int64 v11; // rsi\n  __int64 v12; // rdi\n  _QWORD *v14; // [rsp+8h] [rbp-50h]\n  _QWORD *v15; // [rsp+10h] [rbp-48h]\n  _QWORD *v16; // [rsp+18h] [rbp-40h]\n  _QWORD *v17; // [rsp+20h] [rbp-38h]\n\n  v17 = a6;\n  v16 = a5;\n  v15 = a4;\n  v14 = a3;\n  v6 = a1;\n  v7 = (_QWORD *)sub_4382F0(\"core_algorithms.c\", 244LL, 40LL);\n  *v7 = sub_4382F0(\"core_algorithms.c\", 245LL, 8LL * a1);\n  v7[1] = sub_4382F0(\"core_algorithms.c\", 246LL, 8LL * a1);\n  v7[2] = sub_4382F0(\"core_algorithms.c\", 247LL, 8LL * a1);\n  v7[3] = sub_4382F0(\"core_algorithms.c\", 248LL, 8LL * a1);\n  v7[4] = sub_4382F0(\"core_algorithms.c\", 249LL, 4LL * a1);\n  *(_QWORD *)*v7 = sub_4382F0(\"core_algorithms.c\", 250LL, 5 * a1);\n  v8 = a2 + 2;\n  v9 = a1 * (a2 + 2);\n  *(_QWORD *)v7[1] = sub_4382F0(\"core_algorithms.c\", 251LL, v9);\n  *(_QWORD *)v7[2] = sub_4382F0(\"core_algorithms.c\", 252LL, v9);\n  *(_QWORD *)v7[3] = sub_4382F0(\"core_algorithms.c\", 253LL, v9);\n  if ( a1 >= 2 )\n  {\n    v10 = 1LL;\n    v11 = 5LL;\n    v12 = v8;\n    do\n    {\n      *(_QWORD *)(*v7 + 8 * v10) = *(_QWORD *)*v7 + (unsigned int)v11;\n      *(_QWORD *)(v7[1] + 8 * v10) = v12 + *(_QWORD *)v7[1];\n      *(_QWORD *)(v7[2] + 8 * v10) = v12 + *(_QWORD *)v7[2];\n      *(_QWORD *)(v7[3] + 8 * v10++) = v12 + *(_QWORD *)v7[3];\n      v11 += 5LL;\n      v12 += v8;\n    }\n    while ( v6 != v10 );\n  }\n  if ( v14 )\n    *v14 = *v7;\n  if ( v15 )\n    *v15 = v7[1];\n  if ( v16 )\n    *v16 = v7[2];\n  if ( v17 )\n    *v17 = v7[3];\n  return v7;\n}\n", 
            "funcStartAddr": "0x402ee0L", 
            "funcEndAddr": "0x4030cdL", 
            "funcName": "sub_402EE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4030D0(void *ptr)\n{\n  free(**(void ***)ptr);\n  free(**((void ***)ptr + 1));\n  free(**((void ***)ptr + 2));\n  free(**((void ***)ptr + 3));\n  free(*((void **)ptr + 4));\n  free(*(void **)ptr);\n  free(*((void **)ptr + 1));\n  free(*((void **)ptr + 2));\n  free(*((void **)ptr + 3));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x4030d0L", 
            "funcEndAddr": "0x403138L", 
            "funcName": "sub_4030D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403140(int a1, int a2)\n{\n  double v2; // xmm0_8\n  float v3; // xmm2_4\n  float v4; // xmm2_4\n\n  v2 = (float)(a1 + 1);\n  v3 = (float)(a2 + 2) * (3.0 * v2) * 4.0 + 80.0;\n  v4 = v3 + v2 * 4.0 * 8.0;\n  *(float *)&v2 = v4 + v2 * 5.0 * 4.0;\n  return (unsigned int)(signed int)(float)(*(float *)&v2 * 0.00000095367432);\n}\n", 
            "funcStartAddr": "0x403140L", 
            "funcEndAddr": "0x4031c5L", 
            "funcName": "sub_403140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403250(__int64 a1, int a2, __int64 a3, void ***a4)\n{\n  __int64 v4; // r12\n  int v5; // er14\n  signed __int64 v6; // rsi\n  __int64 v7; // rax\n  __int64 *v8; // r13\n  _QWORD *v9; // rbp\n  _QWORD *v10; // rbx\n  _QWORD *v11; // rdx\n  __int64 v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // rcx\n  __int64 v15; // rax\n  signed __int64 v16; // r14\n  signed __int64 v17; // rcx\n  __int64 v18; // rax\n  signed __int64 v19; // r15\n  unsigned int v20; // ebp\n  unsigned int v21; // eax\n  int v22; // eax\n  __int64 v23; // rcx\n  int v24; // eax\n  __int64 v25; // rcx\n  unsigned int v26; // er15\n  unsigned int v27; // eax\n  int v28; // eax\n  __int64 v29; // rcx\n  __int64 v30; // rdx\n  __int64 v31; // rax\n  unsigned int v32; // eax\n  signed __int64 v33; // rbp\n  __int64 v34; // rsi\n  int v35; // eax\n  __int64 v36; // rcx\n  int v37; // eax\n  _DWORD *v38; // rcx\n  unsigned int v39; // ebx\n  _QWORD *v41; // [rsp+0h] [rbp-78h]\n  _QWORD *v42; // [rsp+8h] [rbp-70h]\n  void **ptr; // [rsp+10h] [rbp-68h]\n  int v44; // [rsp+18h] [rbp-60h]\n  __int64 *v45; // [rsp+20h] [rbp-58h]\n  _QWORD *v46; // [rsp+28h] [rbp-50h]\n  void ***v47; // [rsp+38h] [rbp-40h]\n  __int64 v48; // [rsp+40h] [rbp-38h]\n\n  v47 = a4;\n  v4 = a3;\n  v5 = a2;\n  v6 = *(unsigned int *)(a3 + 136);\n  v7 = sub_402A00(v5, v6, 0, 0);\n  v8 = *(__int64 **)v7;\n  v9 = *(_QWORD **)(v7 + 8);\n  v10 = *(_QWORD **)(v7 + 16);\n  ptr = (void **)v7;\n  v11 = *(_QWORD **)(v7 + 24);\n  v12 = **(_QWORD **)v7;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_DWORD *)v12 = *(_DWORD *)(v4 + 336);\n  *(_DWORD *)(v12 + 12) = -987654321;\n  *(_QWORD *)(v12 + 4) = -4241943005140773041LL;\n  if ( *(_DWORD *)(v4 + 136) >= 0 )\n  {\n    v13 = *v11;\n    v14 = *v10;\n    v15 = *v9;\n    v6 = -1LL;\n    do\n    {\n      *(_DWORD *)(v13 + 4 * v6 + 4) = -987654321;\n      *(_DWORD *)(v14 + 4 * v6 + 4) = -987654321;\n      *(_DWORD *)(v15 + 4 * v6++ + 4) = -987654321;\n    }\n    while ( v6 < *(signed int *)(v4 + 136) );\n  }\n  v44 = v5;\n  if ( v5 > 0 )\n  {\n    v48 = (unsigned int)(v5 + 1);\n    v16 = 1LL;\n    v42 = v10;\n    v41 = v11;\n    v45 = v8;\n    v46 = v9;\n    do\n    {\n      *(_DWORD *)v11[v16] = -987654321;\n      *(_DWORD *)v10[v16] = -987654321;\n      *(_DWORD *)v9[v16] = -987654321;\n      LODWORD(v17) = *(_DWORD *)(v4 + 136);\n      v18 = v9[v16 - 1];\n      if ( (signed int)v17 >= 2 )\n      {\n        v19 = 1LL;\n        do\n        {\n          v20 = sub_415C80(\n                  (unsigned int)(*(_DWORD *)(v18 + 4 * v19 - 4) + *(_DWORD *)(**(_QWORD **)(v4 + 312) + 4 * v19 - 4)),\n                  (unsigned int)(*(_DWORD *)(v10[v16 - 1] + 4 * v19 - 4)\n                               + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 24LL) + 4 * v19 - 4)));\n          v21 = sub_415C80(\n                  (unsigned int)(*(_DWORD *)v45[v16 - 1] + *(_DWORD *)(*(_QWORD *)(v4 + 368) + 4 * v19)),\n                  (unsigned int)(*(_DWORD *)(v41[v16 - 1] + 4 * v19 - 4)\n                               + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 40LL) + 4 * v19 - 4)));\n          v22 = sub_415C80(v20, v21);\n          v23 = v46[v16];\n          *(_DWORD *)(v23 + 4 * v19) = v22;\n          *(_DWORD *)(v23 + 4 * v19) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 320) + 8LL * *(char *)(a1 + v16))\n                                                 + 4 * v19)\n                                     + v22;\n          *(_DWORD *)(v41[v16] + 4 * v19) = sub_415C80(\n                                              (unsigned int)(*(_DWORD *)(v23 + 4 * v19 - 4)\n                                                           + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 16LL)\n                                                                       + 4 * v19\n                                                                       - 4)),\n                                              (unsigned int)(*(_DWORD *)(v41[v16] + 4 * v19 - 4)\n                                                           + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 48LL)\n                                                                       + 4 * v19\n                                                                       - 4)));\n          v24 = sub_415C80(\n                  (unsigned int)(*(_DWORD *)(v46[v16 - 1] + 4 * v19)\n                               + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 8LL) + 4 * v19)),\n                  (unsigned int)(*(_DWORD *)(v42[v16 - 1] + 4 * v19)\n                               + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 32LL) + 4 * v19)));\n          v10 = v42;\n          v25 = v42[v16];\n          *(_DWORD *)(v25 + 4 * v19) = v24;\n          *(_DWORD *)(v25 + 4 * v19) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 8LL * *(char *)(a1 + v16))\n                                                 + 4 * v19)\n                                     + v24;\n          ++v19;\n          v17 = *(signed int *)(v4 + 136);\n          v18 = v46[v16 - 1];\n        }\n        while ( v19 < v17 );\n        v8 = v45;\n      }\n      v26 = sub_415C80(\n              (unsigned int)(*(_DWORD *)(v18 + 4LL * (signed int)v17 - 4)\n                           + *(_DWORD *)(**(_QWORD **)(v4 + 312) + 4LL * (signed int)v17 - 4)),\n              (unsigned int)(*(_DWORD *)(v10[v16 - 1] + 4LL * (signed int)v17 - 4)\n                           + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 24LL) + 4LL * (signed int)v17 - 4)));\n      v27 = sub_415C80(\n              (unsigned int)(*(_DWORD *)v8[v16 - 1]\n                           + *(_DWORD *)(*(_QWORD *)(v4 + 368) + 4LL * *(signed int *)(v4 + 136) - 4)),\n              (unsigned int)(*(_DWORD *)(v41[v16 - 1] + 4LL * *(signed int *)(v4 + 136) - 4)\n                           + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 40LL) + 4LL * *(signed int *)(v4 + 136) - 4)));\n      v28 = sub_415C80(v26, v27);\n      v29 = v46[v16];\n      *(_DWORD *)(v29 + 4LL * *(signed int *)(v4 + 136)) = v28;\n      *(_DWORD *)(v29 + 4LL * *(signed int *)(v4 + 136)) += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 320)\n                                                                                  + 8LL * *(char *)(a1 + v16))\n                                                                      + 4LL * *(signed int *)(v4 + 136));\n      v30 = v8[v16 - 1];\n      v31 = v8[v16];\n      *(_DWORD *)(v31 + 16) = *(_DWORD *)(v30 + 16) + *(_DWORD *)(v4 + 340);\n      *(_DWORD *)(v31 + 4) = -987654321;\n      if ( *(_DWORD *)(v4 + 136) <= 0 )\n      {\n        v9 = v46;\n        v32 = -987654321;\n      }\n      else\n      {\n        v32 = sub_415C80(3307312975LL, (unsigned int)(*(_DWORD *)(v29 + 4) + *(_DWORD *)(*(_QWORD *)(v4 + 376) + 4LL)));\n        *(_DWORD *)(v8[v16] + 4) = v32;\n        if ( *(_DWORD *)(v4 + 136) >= 2 )\n        {\n          v33 = 1LL;\n          do\n          {\n            v34 = (unsigned int)(*(_DWORD *)(v46[v16] + 4 * v33 + 4) + *(_DWORD *)(*(_QWORD *)(v4 + 376) + 4 * v33 + 4));\n            ++v33;\n            v32 = sub_415C80(v32, v34);\n            *(_DWORD *)(v8[v16] + 4) = v32;\n          }\n          while ( v33 < *(signed int *)(v4 + 136) );\n        }\n        v9 = v46;\n        v30 = v8[v16 - 1];\n      }\n      v35 = sub_415C80((unsigned int)(*(_DWORD *)(v30 + 12) + *(_DWORD *)(v4 + 364)), *(_DWORD *)(v4 + 348) + v32);\n      v36 = v8[v16];\n      *(_DWORD *)(v36 + 12) = v35;\n      v37 = sub_415C80(\n              (unsigned int)(*(_DWORD *)(v36 + 16) + *(_DWORD *)(v4 + 336)),\n              (unsigned int)(*(_DWORD *)(v4 + 360) + v35));\n      v38 = (_DWORD *)v8[v16];\n      *v38 = v37;\n      v6 = (unsigned int)(v38[1] + *(_DWORD *)(v4 + 344));\n      *(_DWORD *)(v8[v16] + 8) = sub_415C80((unsigned int)(*(_DWORD *)(v8[v16 - 1] + 8) + *(_DWORD *)(v4 + 356)), v6);\n      ++v16;\n      v10 = v42;\n      v11 = v41;\n    }\n    while ( v16 != v48 );\n  }\n  v39 = *(_DWORD *)(v8[v44] + 8) + *(_DWORD *)(v4 + 352);\n  if ( v47 )\n  {\n    *v47 = ptr;\n  }\n  else\n  {\n    free(ptr[4]);\n    free(ptr[5]);\n    free(ptr[6]);\n    free(ptr[7]);\n    free(*ptr);\n    free(ptr[1]);\n    free(ptr[2]);\n    free(ptr[3]);\n    free(ptr);\n  }\n  return sub_415B40(v39, v6, v11);\n}\n", 
            "funcStartAddr": "0x403250L", 
            "funcEndAddr": "0x40374eL", 
            "funcName": "sub_403250"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_403750(__int64 a1, __int64 a2, unsigned int a3, __int64 *a4, void **a5)\n{\n  __int64 *v5; // rbx\n  __int64 v6; // r12\n  __int64 v7; // r14\n  unsigned int v8; // er15\n  __int64 v9; // r13\n  _DWORD **v10; // rax\n  _QWORD *v11; // rdi\n  __int64 v12; // rax\n  char v13; // dl\n  signed int v14; // ebp\n  __int64 v15; // rbx\n  signed __int64 v16; // rcx\n  __int64 v17; // rsi\n  __int64 v18; // rcx\n  __int64 v19; // rdi\n  unsigned int v20; // er13\n  signed __int64 v21; // r15\n  _DWORD *v22; // rdi\n  __int128 v23; // xmm0\n  __int128 v24; // xmm1\n  int v25; // eax\n  __int64 v26; // rdx\n  __int64 v27; // rbp\n  _QWORD *v28; // rdi\n  __int64 v29; // rcx\n  signed int v30; // edx\n  __int64 v31; // rdi\n  __int64 v32; // rcx\n  _QWORD *v33; // rax\n  signed __int64 v34; // rdx\n  int v35; // esi\n  int v36; // edx\n  __int64 v37; // rdi\n  _QWORD *v38; // rax\n  int v39; // esi\n  __int64 v40; // rax\n  __int64 v41; // rdx\n  int *v42; // rcx\n  int v43; // edx\n  signed int v44; // eax\n  int v45; // er8\n  signed __int64 v46; // rcx\n  signed __int64 v47; // rbp\n  signed __int64 v48; // rsi\n  __int64 v49; // r13\n  __int64 v50; // rdi\n  signed __int64 v51; // rdi\n  _DWORD *v52; // rdx\n  _QWORD *v53; // rax\n  _QWORD *v54; // r8\n  __int64 v55; // rcx\n  _QWORD *v56; // rax\n  int v57; // esi\n  int v58; // ecx\n  char *v59; // rdi\n  __int64 v60; // rcx\n  _QWORD *v61; // rax\n  __int128 v62; // xmm0\n  signed int v63; // er12\n  int v64; // esi\n  signed int v65; // ebp\n  __int64 v66; // rcx\n  _QWORD *v67; // rax\n  __int64 v68; // rax\n  __int64 v69; // r15\n  int v70; // er12\n  signed int v71; // er14\n  _QWORD *v72; // rdi\n  __int64 v73; // rdi\n  _QWORD *v74; // rax\n  _QWORD *result; // rax\n  int v76; // [rsp+4h] [rbp-94h]\n  void *ptr; // [rsp+8h] [rbp-90h]\n  __int64 v78; // [rsp+10h] [rbp-88h]\n  void **v79; // [rsp+18h] [rbp-80h]\n  __int64 v80; // [rsp+20h] [rbp-78h]\n  unsigned int v81; // [rsp+2Ch] [rbp-6Ch]\n  __int64 v82; // [rsp+30h] [rbp-68h]\n  __int64 v83; // [rsp+38h] [rbp-60h]\n  __int64 v84; // [rsp+40h] [rbp-58h]\n  __int64 v85; // [rsp+48h] [rbp-50h]\n  __int64 v86; // [rsp+50h] [rbp-48h]\n  __int64 v87; // [rsp+58h] [rbp-40h]\n  __int64 v88; // [rsp+60h] [rbp-38h]\n\n  v79 = a5;\n  v5 = a4;\n  v6 = a3;\n  v86 = a2;\n  v7 = a1;\n  v8 = 2 * a3 + 6;\n  sub_41FF70(v8, &ptr);\n  v9 = *v5;\n  v82 = v5[1];\n  v84 = v5[2];\n  v85 = v5[3];\n  **((_BYTE **)ptr + 1) = 9;\n  v10 = (_DWORD **)ptr;\n  **((_DWORD **)ptr + 2) = 0;\n  *v10[3] = 0;\n  *((_BYTE *)v10[1] + 1) = 8;\n  v11 = ptr;\n  *(_DWORD *)(*((_QWORD *)ptr + 2) + 4LL) = 0;\n  *(_DWORD *)(v11[3] + 4LL) = 0;\n  v12 = v11[1];\n  v13 = *(_BYTE *)(v12 + 1);\n  v14 = 2;\n  if ( v13 == 4 )\n  {\nLABEL_82:\n    *(_DWORD *)v11 = v14;\n    sub_4204A0();\n    result = ptr;\n    *v79 = ptr;\n    return result;\n  }\n  LODWORD(v15) = 2;\n  v16 = 1LL;\n  LOBYTE(v17) = v6;\n  v76 = v6;\n  v78 = (unsigned int)v6;\n  v80 = v9;\n  while ( 2 )\n  {\n    switch ( v13 )\n    {\n      case 1:\n        LOBYTE(v17) = v76;\n        v18 = (unsigned int)(*(_DWORD *)(*(_QWORD *)(v82 + 8LL * v76 + 8) + 4LL * (signed int)v78 + 4)\n                           - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 320) + 8LL * *(char *)(v86 + v76 + 1))\n                                       + 4LL * (signed int)v78\n                                       + 4));\n        if ( (signed int)v18 <= -987654321 )\n          goto LABEL_83;\n        v19 = v9;\n        v20 = v8;\n        v21 = (signed int)v78 + 1LL;\n        v22 = *(_DWORD **)(v19 + 8LL * v76);\n        if ( (_DWORD)v18 == *v22 + *(_DWORD *)(*(_QWORD *)(v7 + 368) + 4 * v21) )\n        {\n          v23 = *(unsigned int *)(*(_QWORD *)(v7 + 208) + 4 * v21);\n          v24 = *(unsigned int *)(v7 + 304);\n          v25 = sub_415A90(v22, v76, (signed int)v78, v18);\n          v26 = v7;\n          LODWORD(v27) = v78;\n          if ( v25 + 1000LL > *(signed int *)(*(_QWORD *)(v7 + 368) + 4 * v21) )\n          {\n            v8 = v20;\n          }\n          else\n          {\n            v8 = v20;\n            if ( (signed int)v78 > 0 )\n            {\n              v15 = (signed int)v15;\n              v9 = v80;\n              do\n              {\n                *(_BYTE *)(*((_QWORD *)ptr + 1) + v15) = 2;\n                v28 = ptr;\n                *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v15) = v27;\n                v27 = (unsigned int)(v27 - 1);\n                *(_DWORD *)(v28[3] + 4 * v15) = 0;\n                if ( (_DWORD)v15 + 1 == v8 )\n                {\n                  v8 += v6;\n                  LOBYTE(v17) = v8;\n                  sub_41FFF0(v28, v8, v26);\n                }\n                ++v15;\n              }\n              while ( (signed int)v27 + 1 > 1 );\n              v78 = v27;\n              goto LABEL_67;\n            }\n          }\n          v9 = v80;\nLABEL_67:\n          v32 = (signed int)v15;\n          *(_BYTE *)(*((_QWORD *)ptr + 1) + (signed int)v15) = 6;\n          goto LABEL_68;\n        }\n        v54 = *(_QWORD **)(v7 + 312);\n        if ( (_DWORD)v18 == *(_DWORD *)(*(_QWORD *)(v82 + 8LL * v76) + 4LL * (signed int)v78)\n                          + *(_DWORD *)(*v54 + 4LL * (signed int)v78) )\n        {\n          v55 = (signed int)v15;\n          *(_BYTE *)(v12 + v55) = 1;\n          v56 = ptr;\n          v57 = v78;\n          *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v55) = v78;\n          v17 = (unsigned int)(v57 - 1);\n          v78 = v17;\n          *(_DWORD *)(v56[3] + 4 * v55) = v76;\n          v34 = (unsigned int)(v76-- - 1);\n          v8 = v20;\n          v9 = v80;\n          goto LABEL_79;\n        }\n        v8 = v20;\n        if ( (_DWORD)v18 == *(_DWORD *)(*(_QWORD *)(v84 + 8LL * v76) + 4LL * (signed int)v78)\n                          + *(_DWORD *)(v54[3] + 4LL * (signed int)v78) )\n        {\n          v66 = (signed int)v15;\n          *(_BYTE *)(v12 + v66) = 3;\n          v67 = ptr;\n          LOBYTE(v17) = v78;\n          *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v66) = v78;\n          *(_DWORD *)(v67[3] + 4 * v66) = v76;\n          v34 = (unsigned int)(v76-- - 1);\n          v9 = v80;\n          goto LABEL_79;\n        }\n        v17 = *(_QWORD *)(v85 + 8LL * v76);\n        v9 = v80;\n        if ( (_DWORD)v18 != *(_DWORD *)(v17 + 4LL * (signed int)v78) + *(_DWORD *)(v54[5] + 4LL * (signed int)v78) )\n          goto LABEL_77;\nLABEL_16:\n        v32 = (signed int)v15;\n        *(_BYTE *)(v12 + v32) = 2;\n        v33 = ptr;\n        v34 = *((_QWORD *)ptr + 2);\n        v35 = v78;\n        *(_DWORD *)(v34 + 4 * v32) = v78;\n        v17 = (unsigned int)(v35 - 1);\n        v78 = v17;\n        goto LABEL_69;\n      case 2:\n        v29 = *(_QWORD *)(v85 + 8LL * v76);\n        LOBYTE(v17) = v78;\n        v30 = *(_DWORD *)(v29 + 4LL * (signed int)v78 + 4);\n        if ( v30 <= -987654321 )\n          goto LABEL_83;\n        v31 = *(_QWORD *)(v7 + 312);\n        if ( v30 == *(_DWORD *)(*(_QWORD *)(v82 + 8LL * v76) + 4LL * (signed int)v78)\n                  + *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4LL * (signed int)v78) )\n          goto LABEL_19;\n        if ( v30 == *(_DWORD *)(v29 + 4LL * (signed int)v78)\n                  + *(_DWORD *)(*(_QWORD *)(v31 + 48) + 4LL * (signed int)v78) )\n          goto LABEL_16;\n        goto LABEL_77;\n      case 3:\n        v36 = *(_DWORD *)(*(_QWORD *)(v84 + 8LL * v76 + 8) + 4LL * (signed int)v78)\n            - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 328) + 8LL * *(char *)(v86 + v76 + 1)) + 4LL * (signed int)v78);\n        if ( v36 <= -987654321 )\n          goto LABEL_83;\n        v37 = *(_QWORD *)(v7 + 312);\n        if ( v36 == *(_DWORD *)(*(_QWORD *)(v82 + 8LL * v76) + 4LL * (signed int)v78)\n                  + *(_DWORD *)(*(_QWORD *)(v37 + 8) + 4LL * (signed int)v78) )\n        {\nLABEL_19:\n          v16 = (signed int)v15;\n          *(_BYTE *)(v12 + v16) = 1;\n          v38 = ptr;\n          v39 = v78;\n          *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v16) = v78;\n          v17 = (unsigned int)(v39 - 1);\n          v78 = v17;\n        }\n        else\n        {\n          v17 = *(_QWORD *)(v84 + 8LL * v76);\n          if ( v36 != *(_DWORD *)(v17 + 4LL * (signed int)v78)\n                    + *(_DWORD *)(*(_QWORD *)(v37 + 32) + 4LL * (signed int)v78) )\n            goto LABEL_77;\n          v16 = (signed int)v15;\n          *(_BYTE *)(v12 + v16) = 3;\n          v38 = ptr;\n          LOBYTE(v17) = v78;\n          *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v16) = v78;\n        }\n        v40 = v38[3];\n        goto LABEL_41;\n      case 5:\n        if ( !v76 )\n        {\n          if ( *(_DWORD *)(*(_QWORD *)v9 + 16LL) )\n            goto LABEL_77;\n          v60 = (signed int)v15;\n          *(_BYTE *)(v12 + v60) = 4;\n          v61 = ptr;\n          v34 = *((_QWORD *)ptr + 2);\n          *(_DWORD *)(v34 + 4 * v60) = 0;\n          *(_DWORD *)(v61[3] + 4 * v60) = 0;\n          v76 = 0;\n          goto LABEL_79;\n        }\n        if ( v76 <= 0 )\n          goto LABEL_77;\n        v17 = *(_QWORD *)(v9 + 8LL * v76);\n        if ( *(_DWORD *)(*(_QWORD *)(v9 + 8LL * v76 + 8) + 16LL) != *(_DWORD *)(v17 + 16) + *(_DWORD *)(v7 + 340) )\n          goto LABEL_77;\n        v41 = (signed int)v15;\n        *(_BYTE *)(v12 + (signed int)v15) = 5;\n        goto LABEL_40;\n      case 6:\n        v42 = *(int **)(v9 + 8LL * v76);\n        v43 = *v42;\n        if ( *v42 <= -987654321 )\n          goto LABEL_83;\n        LODWORD(v17) = v42[4] + *(_DWORD *)(v7 + 336);\n        if ( v43 == (_DWORD)v17 )\n        {\n          v32 = (signed int)v15;\n          *(_BYTE *)(v12 + (signed int)v15) = 5;\n        }\n        else\n        {\n          LODWORD(v17) = v42[3] + *(_DWORD *)(v7 + 360);\n          if ( v43 != (_DWORD)v17 )\n            goto LABEL_77;\n          v32 = (signed int)v15;\n          *(_BYTE *)(v12 + (signed int)v15) = 10;\n        }\n        goto LABEL_68;\n      case 7:\n        v34 = v76;\n        v44 = *(_DWORD *)(*(_QWORD *)(v9 + 8LL * v76) + 4LL);\n        if ( v44 <= -987654321 )\n          goto LABEL_83;\n        v17 = *(signed int *)(v7 + 136);\n        if ( v17 <= 0 )\n          goto LABEL_76;\n        v45 = *(_DWORD *)(v7 + 136);\n        v46 = v17 + 1;\n        v78 = *(signed int *)(v7 + 136);\n        v47 = 4 * v17;\n        v34 = 4 * v17 + *(_QWORD *)(v82 + 8LL * v76);\n        v48 = 4 * v17 + *(_QWORD *)(v7 + 376);\n        v49 = 0LL;\n        while ( 1 )\n        {\n          v50 = (unsigned int)(*(_DWORD *)(v34 + 4 * v49) + *(_DWORD *)(v48 + 4 * v49));\n          if ( v44 == (_DWORD)v50 )\n            break;\n          v51 = v46 + v49-- - 1;\n          if ( v51 <= 1 )\n          {\n            v17 = (unsigned int)(v49 + v45);\n            goto LABEL_75;\n          }\n        }\n        v83 = v6;\n        v62 = *(unsigned int *)(v47 + *(_QWORD *)(v7 + 216) + 4 * v49);\n        v63 = v49 + v45;\n        if ( (signed int)sub_415A90(v50, v48, v34, v46) + 1000LL > *(signed int *)(*(_QWORD *)(v7 + 376) + v47 + 4 * v49) )\n        {\n          v64 = v78;\n          v65 = v63;\nLABEL_73:\n          v6 = v83;\n          goto LABEL_74;\n        }\n        v68 = *(unsigned int *)(v7 + 136);\n        v65 = v63;\n        if ( (signed int)v68 <= v63 )\n        {\n          v64 = v78;\n          goto LABEL_73;\n        }\n        v81 = v8;\n        v88 = v7;\n        v69 = (signed int)v15;\n        v70 = v15 + 1;\n        v87 = v68;\n        v71 = v68;\n        do\n        {\n          *(_BYTE *)(*((_QWORD *)ptr + 1) + v69) = 2;\n          v72 = ptr;\n          *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v69) = v71;\n          *(_DWORD *)(v72[3] + 4 * v69) = 0;\n          if ( v70 == v81 )\n          {\n            v81 += v83;\n            ((void (*)(void))sub_41FFF0)();\n          }\n          ++v69;\n          --v71;\n          ++v70;\n        }\n        while ( v71 > v65 );\n        LODWORD(v15) = v87 + v15 - v78 - v49;\n        v6 = v83;\n        v7 = v88;\n        v8 = v81;\n        v64 = v78;\nLABEL_74:\n        v73 = (signed int)v15;\n        *(_BYTE *)(*((_QWORD *)ptr + 1) + v73) = 1;\n        v17 = (unsigned int)(v64 + v49 - 1);\n        v74 = ptr;\n        *(_DWORD *)(*((_QWORD *)ptr + 2) + 4 * v73) = v65;\n        *(_DWORD *)(v74[3] + 4 * v73) = v76;\n        v34 = (unsigned int)(v76-- - 1);\nLABEL_75:\n        v9 = v80;\nLABEL_76:\n        v78 = v17;\n        if ( (signed int)v17 < 0 )\n        {\nLABEL_77:\n          v59 = \"traceback failed\";\nLABEL_78:\n          sub_4325B0(v59, v17);\n        }\n        goto LABEL_79;\n      case 8:\n        v52 = *(_DWORD **)(v9 + 8LL * v76);\n        LODWORD(v17) = v52[2];\n        if ( (signed int)v17 <= -987654321 )\n          goto LABEL_83;\n        if ( (_DWORD)v17 == *(_DWORD *)(*(_QWORD *)(v9 + 8LL * v76 - 8) + 8LL) + *(_DWORD *)(v7 + 356) )\n        {\n          v41 = (signed int)v15;\n          *(_BYTE *)(v12 + (signed int)v15) = 8;\n          goto LABEL_40;\n        }\n        v58 = *(_DWORD *)(v7 + 344);\n        goto LABEL_50;\n      case 10:\n        v52 = *(_DWORD **)(v9 + 8LL * v76);\n        LODWORD(v17) = v52[3];\n        if ( (signed int)v17 > -987654321 )\n        {\n          if ( (_DWORD)v17 == *(_DWORD *)(*(_QWORD *)(v9 + 8LL * v76 - 8) + 12LL) + *(_DWORD *)(v7 + 364) )\n          {\n            v41 = (signed int)v15;\n            *(_BYTE *)(v12 + (signed int)v15) = 10;\nLABEL_40:\n            v53 = ptr;\n            v17 = *((_QWORD *)ptr + 2);\n            *(_DWORD *)(v17 + 4 * v41) = 0;\n            v40 = v53[3];\n            *(_DWORD *)(v40 + 4 * v41) = 0;\nLABEL_41:\n            *(_DWORD *)(v40 + 4 * v16) = v76;\n            v34 = (unsigned int)(v76-- - 1);\n          }\n          else\n          {\n            v58 = *(_DWORD *)(v7 + 348);\nLABEL_50:\n            if ( (_DWORD)v17 != v52[1] + v58 )\n            {\n              v59 = \"Traceback failed.\";\n              goto LABEL_78;\n            }\n            v32 = (signed int)v15;\n            *(_BYTE *)(v12 + (signed int)v15) = 7;\nLABEL_68:\n            v33 = ptr;\n            v34 = *((_QWORD *)ptr + 2);\n            *(_DWORD *)(v34 + 4 * v32) = 0;\nLABEL_69:\n            *(_DWORD *)(v33[3] + 4 * v32) = 0;\n          }\nLABEL_79:\n          v14 = v15 + 1;\n          if ( (_DWORD)v15 + 1 == v8 )\n          {\n            v8 += v6;\n            LOBYTE(v17) = v8;\n            sub_41FFF0(ptr, v8, v34);\n          }\n          v11 = ptr;\n          v12 = *((_QWORD *)ptr + 1);\n          v16 = (signed int)v15;\n          v13 = *(_BYTE *)(v12 + (signed int)v15);\n          LODWORD(v15) = v15 + 1;\n          if ( v13 == 4 )\n            goto LABEL_82;\n          continue;\n        }\nLABEL_83:\n        sub_420060(v11);\n        result = v79;\n        *v79 = 0LL;\n        return result;\n      default:\n        goto LABEL_77;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x403750L", 
            "funcEndAddr": "0x403f74L", 
            "funcName": "sub_403750"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_403F80(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, float a6)\n{\n  __int64 v6; // rbx\n  _QWORD *v7; // r12\n  signed int v8; // ebx\n  __int64 v9; // rax\n  char *v10; // rax\n  int v11; // er13\n  int v12; // er14\n  __int64 v13; // rdx\n  __int64 v14; // rbp\n  __int64 v15; // r15\n  _QWORD *v16; // rbx\n  __int64 v17; // rcx\n  __int64 v18; // rdi\n  unsigned int v19; // er12\n  double v20; // xmm0_8\n  float v21; // xmm1_4\n  float v22; // xmm1_4\n  __int64 v23; // rdi\n  int v24; // ebx\n  unsigned int v25; // ebp\n  __int64 v26; // rax\n  __int64 v27; // rax\n  __int64 v28; // rax\n  __int64 v29; // rdx\n  signed __int64 v30; // rcx\n  _QWORD *v31; // r14\n  __int64 v32; // r15\n  _QWORD *v33; // r10\n  signed int v34; // er11\n  int v35; // er13\n  __int64 v36; // r8\n  __int64 v37; // rsi\n  signed int *v38; // rbp\n  signed __int64 v39; // rdx\n  int v40; // ebx\n  int v41; // ebx\n  __int64 v42; // rdi\n  __int64 v43; // rdi\n  int v44; // edx\n  int v45; // esi\n  signed __int64 v46; // r8\n  _BYTE *v47; // rcx\n  __int64 v48; // rdi\n  signed __int64 v49; // rdx\n  __int64 v50; // rax\n  signed __int64 v51; // r8\n  signed __int64 v52; // rdi\n  int v53; // er13\n  int v54; // ebp\n  __int64 v55; // rsi\n  __int64 v56; // rcx\n  __int64 v57; // rax\n  signed __int64 v58; // rax\n  __int64 v59; // rax\n  __int64 v60; // rbp\n  __int64 v62; // [rsp+0h] [rbp-88h]\n  void *ptr; // [rsp+8h] [rbp-80h]\n  int v64; // [rsp+10h] [rbp-78h]\n  float v65; // [rsp+14h] [rbp-74h]\n  __int64 v66; // [rsp+18h] [rbp-70h]\n  __int64 v67; // [rsp+20h] [rbp-68h]\n  __int64 v68; // [rsp+28h] [rbp-60h]\n  _QWORD *v69; // [rsp+30h] [rbp-58h]\n  __int64 v70; // [rsp+38h] [rbp-50h]\n  __int64 v71; // [rsp+40h] [rbp-48h]\n  __int64 v72; // [rsp+48h] [rbp-40h]\n  void *v73; // [rsp+50h] [rbp-38h]\n\n  v6 = a5;\n  v71 = a4;\n  v72 = a1;\n  v68 = a3;\n  sub_4044D0(a1, a2, a3, &v73);\n  v7 = v73;\n  v65 = a6;\n  if ( v6 && v73 )\n  {\n    v66 = (unsigned int)a2;\n    v69 = (_QWORD *)v6;\n    v8 = *(_DWORD *)v73;\n    v9 = *(_DWORD *)v73 / 2;\n    v70 = v9;\n    v67 = (signed int)v9 - 1LL;\n    v10 = (char *)sub_4382F0(\"core_algorithms.c\", 930LL, 8LL * (signed int)v9 - 8);\n    v11 = 0;\n    v12 = 0;\n    v64 = v8;\n    ptr = v10;\n    v13 = v68;\n    if ( v8 >= 4 )\n    {\n      v14 = 0LL;\n      v15 = 0LL;\n      v12 = 0;\n      v11 = 0;\n      do\n      {\n        v16 = v7;\n        v17 = v7[3];\n        v18 = *(signed int *)(v17 + v14 + 4);\n        v19 = *(_DWORD *)(v17 + v14 + 8) - v18;\n        v20 = (float)(signed int)(v19 + 1);\n        v21 = (float)(*(_DWORD *)(v13 + 136) + 2) * (v20 * 3.0) * 4.0 + 80.0;\n        v22 = v21 + v20 * 4.0 * 8.0;\n        *(float *)&v20 = v22 + v20 * 5.0 * 4.0;\n        v23 = v72 + v18;\n        if ( (signed int)(float)(*(float *)&v20 * 0.00000095367432) < 1001 )\n          sub_40B620(v23, v19, v13, v71, &v10[v14]);\n        else\n          sub_404CF0(v23, v19, v13, &v10[v14]);\n        v13 = v68;\n        v10 = (char *)ptr;\n        v11 = **(_DWORD **)((char *)ptr + v14) + v11 - 4;\n        v12 += v19;\n        ++v15;\n        v14 += 8LL;\n        v7 = v16;\n      }\n      while ( v15 < v67 );\n    }\n    v24 = v70;\n    v25 = v66 + v70 + v11 + 2 - v12;\n    sub_41FF70(v25, &v62);\n    v26 = v62;\n    *(_DWORD *)v62 = v25;\n    **(_BYTE **)(v26 + 8) = 4;\n    v27 = v62;\n    **(_DWORD **)(v62 + 16) = 0;\n    **(_DWORD **)(v27 + 24) = 0;\n    *(_BYTE *)(*(_QWORD *)(v27 + 8) + 1LL) = 5;\n    v28 = v62;\n    *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4LL) = 0;\n    *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4LL) = 0;\n    v29 = v7[3];\n    if ( *(_DWORD *)(v29 + 4) <= 0 )\n    {\n      LODWORD(v30) = 2;\n    }\n    else\n    {\n      v30 = 2LL;\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(v28 + 8) + v30) = 5;\n        v28 = v62;\n        *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v30) = 0;\n        *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v30) = v30 - 1;\n        ++v30;\n        v29 = v7[3];\n      }\n      while ( (signed int)v30 - 2 < *(_DWORD *)(v29 + 4) );\n    }\n    v31 = v69;\n    v32 = v67;\n    v33 = ptr;\n    v34 = v64;\n    v35 = v66;\n    if ( v64 >= 4 )\n    {\n      v36 = (unsigned int)(v24 - 2);\n      v37 = 0LL;\n      do\n      {\n        v38 = (signed int *)v33[v37];\n        if ( *v38 >= 5 )\n        {\n          v30 = (signed int)v30;\n          v39 = 2LL;\n          do\n          {\n            *(_BYTE *)(*(_QWORD *)(v28 + 8) + v30) = *(_BYTE *)(*((_QWORD *)v38 + 1) + v39);\n            v38 = (signed int *)v33[v37];\n            v28 = v62;\n            *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v30) = *(_DWORD *)(*((_QWORD *)v38 + 2) + 4 * v39);\n            v40 = *(_DWORD *)(*((_QWORD *)v38 + 3) + 4 * v39);\n            if ( v40 <= 0 )\n              v41 = 0;\n            else\n              v41 = *(_DWORD *)(v7[3] + 4 * (2 * v37 + 1)) + v40;\n            *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v30++) = v41;\n            ++v39;\n          }\n          while ( v39 < *v38 - 2LL );\n        }\n        v42 = (signed int)v30;\n        LODWORD(v30) = v30 + 1;\n        *(_BYTE *)(*(_QWORD *)(v28 + 8) + v42) = 2 * (v37 != v36) | 8;\n        v28 = v62;\n        *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v42) = 0;\n        *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v42) = 0;\n        if ( v37 != v36 )\n        {\n          v43 = v7[3];\n          v44 = *(_DWORD *)(v43 + 8 * v37 + 8);\n          if ( v44 < *(_DWORD *)(v43 + 8 * v37 + 12) )\n          {\n            v30 = (signed int)v30;\n            do\n            {\n              *(_BYTE *)(*(_QWORD *)(v28 + 8) + v30) = 10;\n              ++v44;\n              v28 = v62;\n              *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v30) = 0;\n              *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v30++) = v44;\n            }\n            while ( v44 < *(_DWORD *)(v7[3] + 8 * v37 + 12) );\n          }\n        }\n        ++v37;\n      }\n      while ( v37 < v32 );\n      v29 = v7[3];\n    }\n    v45 = *(_DWORD *)(v29 + 8LL * (_DWORD)v32);\n    v46 = (signed int)v30;\n    v47 = (_BYTE *)((signed int)v30 + *(_QWORD *)(v28 + 8));\n    if ( v45 < v35 )\n    {\n      v48 = (unsigned int)(v35 - 1 - v45);\n      if ( ((_BYTE)v35 - (_BYTE)v45) & 1 )\n      {\n        *v47 = 8;\n        ++v45;\n        v50 = v62;\n        *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v46) = 0;\n        *(_DWORD *)(*(_QWORD *)(v50 + 24) + 4 * v46) = v45;\n        v49 = v46 + 1;\n        v47 = (_BYTE *)(v46 + 1 + *(_QWORD *)(v50 + 8));\n      }\n      else\n      {\n        v49 = v46;\n      }\n      v51 = v48 + v46;\n      if ( (_DWORD)v48 )\n      {\n        v52 = 4 * v49;\n        v53 = v35 - v45;\n        v54 = v45;\n        v55 = 0LL;\n        do\n        {\n          *v47 = 8;\n          v56 = v62;\n          *(_DWORD *)(v52 + *(_QWORD *)(v62 + 16) + 4 * v55) = 0;\n          *(_DWORD *)(v52 + *(_QWORD *)(v56 + 24) + 4 * v55) = v55 + v54 + 1;\n          *(_BYTE *)(v55 + v49 + *(_QWORD *)(v56 + 8) + 1) = 8;\n          v57 = v62;\n          *(_DWORD *)(v52 + *(_QWORD *)(v62 + 16) + 4 * v55 + 4) = 0;\n          *(_DWORD *)(v52 + *(_QWORD *)(v57 + 24) + 4 * v55 + 4) = v55 + v54 + 2;\n          v58 = v49 + *(_QWORD *)(v57 + 8);\n          v47 = (_BYTE *)(v55 + v58 + 2);\n          v55 += 2LL;\n        }\n        while ( v53 != (_DWORD)v55 );\n        v47 = (_BYTE *)(v55 + v58);\n      }\n      v46 = v51 + 1;\n    }\n    *v47 = 9;\n    v59 = v62;\n    *(_DWORD *)(*(_QWORD *)(v62 + 16) + 4 * v46) = 0;\n    *(_DWORD *)(*(_QWORD *)(v59 + 24) + 4 * v46) = 0;\n    if ( v34 >= 4 )\n    {\n      v60 = 0LL;\n      do\n      {\n        sub_420060((void *)v33[v60]);\n        v33 = ptr;\n        ++v60;\n      }\n      while ( v60 < v32 );\n    }\n    free(v33);\n    sub_420060(v7);\n    *v31 = v62;\n  }\n  else\n  {\n    sub_420060(v73);\n  }\n  return v65;\n}\n", 
            "funcStartAddr": "0x403f80L", 
            "funcEndAddr": "0x4044c3L", 
            "funcName": "sub_403F80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4044D0(__int64 a1, unsigned int a2, __int64 a3, _QWORD *a4)\n{\n  __int64 v4; // r14\n  _QWORD *v5; // rax\n  _QWORD *v6; // rbp\n  _QWORD *v7; // r12\n  __int64 *v8; // rax\n  __int64 v9; // r13\n  _DWORD *v10; // r15\n  signed int *v11; // rax\n  _QWORD *v12; // rsi\n  __int64 v13; // rcx\n  signed int *v14; // r12\n  __int64 v15; // rax\n  __int64 v16; // rdx\n  __int64 v17; // rbp\n  signed __int64 v18; // rdi\n  signed __int64 v19; // r9\n  signed __int64 v20; // r11\n  signed __int64 v21; // rdi\n  _DWORD *v22; // rbp\n  _DWORD *v23; // rax\n  _DWORD *v24; // rcx\n  bool v25; // zf\n  bool v26; // sf\n  __int64 v27; // r8\n  int v28; // esi\n  __int64 *v29; // r9\n  __int64 v30; // r12\n  int v31; // edx\n  signed int v32; // esi\n  __int64 v33; // r13\n  int v34; // edx\n  _DWORD *v35; // r10\n  int v36; // edx\n  int v37; // edx\n  int v38; // edx\n  signed int v39; // esi\n  int v40; // ebx\n  int v41; // edx\n  signed __int64 v42; // r15\n  int v43; // edx\n  int v44; // esi\n  signed int v45; // edx\n  int v46; // esi\n  int v47; // edx\n  int v48; // esi\n  int *v49; // r8\n  int v50; // eax\n  int v51; // ebp\n  __int64 v52; // r9\n  __int64 v53; // rsi\n  signed int v54; // edx\n  signed __int64 v55; // rbx\n  int v56; // eax\n  int v57; // edx\n  signed int v58; // ecx\n  int v59; // eax\n  int v60; // edx\n  signed int v61; // ecx\n  int v62; // eax\n  int v63; // edx\n  signed int v64; // ecx\n  int v65; // eax\n  unsigned int v66; // er14\n  unsigned __int64 v67; // rsi\n  __int64 v68; // rdx\n  __int64 v69; // rdi\n  int v70; // ebp\n  signed __int64 v71; // rbx\n  __int64 v72; // rax\n  __int64 v73; // rcx\n  __int64 v74; // rcx\n  _DWORD *v75; // rdi\n  void **v76; // rbx\n  void **v77; // rbx\n  __int64 v78; // rdx\n  __int64 v80; // [rsp+8h] [rbp-D0h]\n  __int64 v81; // [rsp+10h] [rbp-C8h]\n  __int64 v82; // [rsp+18h] [rbp-C0h]\n  _QWORD *v83; // [rsp+20h] [rbp-B8h]\n  __int64 v84; // [rsp+28h] [rbp-B0h]\n  __int64 *v85; // [rsp+30h] [rbp-A8h]\n  __int64 *v86; // [rsp+38h] [rbp-A0h]\n  __int64 v87; // [rsp+40h] [rbp-98h]\n  unsigned int v88; // [rsp+48h] [rbp-90h]\n  int v89; // [rsp+4Ch] [rbp-8Ch]\n  __int64 v90; // [rsp+50h] [rbp-88h]\n  __int64 v91; // [rsp+58h] [rbp-80h]\n  void *ptr; // [rsp+60h] [rbp-78h]\n  void *v93; // [rsp+68h] [rbp-70h]\n  _QWORD *v94; // [rsp+70h] [rbp-68h]\n  __int64 v95; // [rsp+78h] [rbp-60h]\n  _QWORD *v96; // [rsp+80h] [rbp-58h]\n  __int64 v97; // [rsp+88h] [rbp-50h]\n  signed int *v98; // [rsp+90h] [rbp-48h]\n  _DWORD *v99; // [rsp+98h] [rbp-40h]\n  __int64 v100; // [rsp+A0h] [rbp-38h]\n\n  v94 = a4;\n  v4 = a3;\n  v91 = a1;\n  v5 = (_QWORD *)sub_402A00(1, *(_DWORD *)(a3 + 136), 0, 0);\n  v6 = (_QWORD *)*v5;\n  v7 = (_QWORD *)v5[1];\n  v86 = (__int64 *)v5[2];\n  ptr = v5;\n  v85 = (__int64 *)v5[3];\n  v8 = (__int64 *)sub_402A00(1, *(_DWORD *)(v4 + 136), 0, 0);\n  v9 = *v8;\n  v80 = v8[1];\n  v84 = v8[2];\n  v93 = v8;\n  v87 = v8[3];\n  v90 = a2;\n  LODWORD(v82) = a2 + 1;\n  v10 = (_DWORD *)sub_4382F0(\"core_algorithms.c\", 1083LL, 4LL * (signed int)(a2 + 1));\n  v11 = (signed int *)sub_4382F0(\"core_algorithms.c\", 1084LL, 4LL * (signed int)(a2 + 1));\n  v12 = v7;\n  v83 = v6;\n  v13 = *v6;\n  *(_DWORD *)(v13 + 16) = 0;\n  *(_DWORD *)v13 = *(_DWORD *)(v4 + 336);\n  *v10 = 0;\n  *(_DWORD *)(v13 + 12) = -987654321;\n  *(_QWORD *)(v13 + 4) = -4241943005140773041LL;\n  v14 = v11;\n  *v11 = -1;\n  if ( *(_DWORD *)(v4 + 136) >= 0 )\n  {\n    v15 = *v85;\n    v16 = *v86;\n    v17 = *v12;\n    v18 = -1LL;\n    do\n    {\n      *(_DWORD *)(v15 + 4 * v18 + 4) = -987654321;\n      *(_DWORD *)(v16 + 4 * v18 + 4) = -987654321;\n      *(_DWORD *)(v17 + 4 * v18++ + 4) = -987654321;\n    }\n    while ( v18 < *(signed int *)(v4 + 136) );\n  }\n  if ( (signed int)v90 > 0 )\n  {\n    v88 = v90 & 1;\n    v95 = (unsigned int)v82;\n    v19 = 1LL;\n    v99 = v10;\n    v98 = v14;\n    v97 = v9;\n    v96 = v12;\n    do\n    {\n      v20 = v19 & 1;\n      v21 = v19 & 1 ^ 1;\n      v22 = (_DWORD *)v85[v20];\n      *v22 = -987654321;\n      v23 = (_DWORD *)v86[v20];\n      *v23 = -987654321;\n      v24 = (_DWORD *)v12[v20];\n      *v24 = -987654321;\n      v25 = *(_DWORD *)(v4 + 136) == 0;\n      v26 = *(_DWORD *)(v4 + 136) < 0;\n      v82 = v19;\n      if ( v26 || v25 )\n      {\n        v35 = (_DWORD *)v83[v21];\n      }\n      else\n      {\n        v27 = v12[v21];\n        v28 = v19;\n        v29 = *(__int64 **)(v4 + 312);\n        v100 = *v29;\n        v89 = v28 - 1;\n        v30 = 0LL;\n        do\n        {\n          v24[v30 + 1] = -987654321;\n          v31 = *(_DWORD *)(v27 + 4 * v30) + *(_DWORD *)(v100 + 4 * v30);\n          v32 = -987654321;\n          if ( v31 >= -987654320 )\n          {\n            v24[v30 + 1] = v31;\n            *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v80 + 8 * v21) + 4 * v30);\n            v32 = v24[v30 + 1];\n          }\n          v33 = v86[v21];\n          v34 = *(_DWORD *)(v33 + 4 * v30) + *(_DWORD *)(v29[3] + 4 * v30);\n          if ( v34 > v32 )\n          {\n            v24[v30 + 1] = v34;\n            *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v84 + 8 * v21) + 4 * v30);\n            v32 = v24[v30 + 1];\n          }\n          v35 = (_DWORD *)v83[v21];\n          v36 = *v35 + *(_DWORD *)(*(_QWORD *)(v4 + 368) + 4 * v30 + 4);\n          if ( v36 > v32 )\n          {\n            v24[v30 + 1] = v36;\n            *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v30 + 4) = v89;\n            v32 = v24[v30 + 1];\n          }\n          v37 = *(_DWORD *)(v85[v21] + 4 * v30) + *(_DWORD *)(v29[5] + 4 * v30);\n          if ( v37 > v32 )\n          {\n            v24[v30 + 1] = v37;\n            *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v87 + 8 * v21) + 4 * v30);\n          }\n          v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 320) + 8LL * *(char *)(v91 + v82)) + 4 * v30 + 4);\n          v39 = -987654321;\n          v40 = -987654321;\n          if ( v38 != -987654321 )\n            v40 = v24[v30 + 1] + v38;\n          v24[v30 + 1] = v40;\n          v22[v30 + 1] = -987654321;\n          v41 = v24[v30] + *(_DWORD *)(v29[2] + 4 * v30);\n          if ( v41 >= -987654320 )\n          {\n            v22[v30 + 1] = v41;\n            *(_DWORD *)(*(_QWORD *)(v87 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v30);\n            v39 = v22[v30 + 1];\n          }\n          v42 = v30 + 1;\n          v43 = v22[v30] + *(_DWORD *)(v29[6] + 4 * v30);\n          if ( v43 > v39 )\n          {\n            v22[v30 + 1] = v43;\n            *(_DWORD *)(*(_QWORD *)(v87 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v87 + 8 * v20) + 4 * v30);\n          }\n          if ( v42 < *(signed int *)(v4 + 136) )\n          {\n            v23[v30 + 1] = -987654321;\n            v44 = *(_DWORD *)(v27 + 4 * v30 + 4) + *(_DWORD *)(v29[1] + 4 * v30 + 4);\n            v45 = -987654321;\n            if ( v44 >= -987654320 )\n            {\n              v23[v30 + 1] = v44;\n              *(_DWORD *)(*(_QWORD *)(v84 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v80 + 8 * v21)\n                                                                                + 4 * v30\n                                                                                + 4);\n              v45 = v23[v30 + 1];\n            }\n            v46 = *(_DWORD *)(v33 + 4 * v30 + 4) + *(_DWORD *)(v29[4] + 4 * v30 + 4);\n            if ( v46 > v45 )\n            {\n              v23[v30 + 1] = v46;\n              *(_DWORD *)(*(_QWORD *)(v84 + 8 * v20) + 4 * v30 + 4) = *(_DWORD *)(*(_QWORD *)(v84 + 8 * v21)\n                                                                                + 4 * v30\n                                                                                + 4);\n            }\n            v47 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 8LL * *(char *)(v91 + v82)) + 4 * v30 + 4);\n            v48 = -987654321;\n            if ( v47 != -987654321 )\n              v48 = v23[v30 + 1] + v47;\n            v23[v30 + 1] = v48;\n          }\n          ++v30;\n        }\n        while ( v42 < *(signed int *)(v4 + 136) );\n      }\n      v49 = (int *)v83[v20];\n      v49[4] = -987654321;\n      v50 = v35[4] + *(_DWORD *)(v4 + 340);\n      if ( v50 <= -987654322 )\n        v50 = -987654321;\n      v49[4] = v50;\n      v49[1] = -987654321;\n      v51 = *(_DWORD *)(v4 + 136);\n      v10 = v99;\n      v14 = v98;\n      v9 = v97;\n      v52 = v82;\n      if ( v51 > 0 )\n      {\n        v53 = *(_QWORD *)(v4 + 376);\n        v54 = -987654321;\n        v55 = 1LL;\n        while ( 1 )\n        {\n          v56 = v24[v55] + *(_DWORD *)(v53 + 4 * v55);\n          if ( v56 > v54 )\n          {\n            v49[1] = v56;\n            v14[v52] = *(_DWORD *)(*(_QWORD *)(v80 + 8 * v20) + 4 * v55);\n            v51 = *(_DWORD *)(v4 + 136);\n          }\n          if ( v55 >= v51 )\n            break;\n          ++v55;\n          v54 = v49[1];\n        }\n      }\n      v49[3] = -987654321;\n      v57 = v35[3] + *(_DWORD *)(v4 + 364);\n      v58 = -987654321;\n      if ( v57 >= -987654320 )\n      {\n        v49[3] = v57;\n        *(_DWORD *)(*(_QWORD *)(v9 + 8 * v20) + 12LL) = *(_DWORD *)(*(_QWORD *)(v9 + 8 * v21) + 12LL);\n        v58 = v49[3];\n      }\n      v59 = v49[1] + *(_DWORD *)(v4 + 348);\n      if ( v59 > v58 )\n      {\n        v49[3] = v59;\n        *(_DWORD *)(*(_QWORD *)(v9 + 8 * v20) + 12LL) = v52;\n      }\n      *v49 = -987654321;\n      v60 = v49[4] + *(_DWORD *)(v4 + 336);\n      v61 = -987654321;\n      if ( v60 >= -987654320 )\n      {\n        *v49 = v60;\n        v10[v52] = 0;\n        v61 = *v49;\n      }\n      v62 = v49[3] + *(_DWORD *)(v4 + 360);\n      if ( v62 > v61 )\n      {\n        *v49 = v62;\n        v10[v52] = *(_DWORD *)(*(_QWORD *)(v9 + 8 * v20) + 12LL);\n      }\n      v49[2] = -987654321;\n      v63 = v35[2] + *(_DWORD *)(v4 + 356);\n      v64 = -987654321;\n      if ( v63 >= -987654320 )\n      {\n        v49[2] = v63;\n        *(_DWORD *)(*(_QWORD *)(v9 + 8 * v20) + 8LL) = *(_DWORD *)(*(_QWORD *)(v9 + 8 * v21) + 8LL);\n        v64 = v49[2];\n      }\n      v65 = v49[1] + *(_DWORD *)(v4 + 344);\n      if ( v65 > v64 )\n      {\n        v49[2] = v65;\n        *(_DWORD *)(*(_QWORD *)(v9 + 8 * v20) + 8LL) = v52;\n      }\n      v19 = v52 + 1;\n      v12 = v96;\n    }\n    while ( v19 != v95 );\n    v13 = v83[v88];\n  }\n  v66 = *(_DWORD *)(v13 + 8) + *(_DWORD *)(v4 + 352);\n  v67 = (unsigned __int64)&v81;\n  sub_41FF70(2LL, &v81);\n  **(_BYTE **)(v81 + 8) = 9;\n  v69 = v81;\n  **(_DWORD **)(v81 + 24) = 0;\n  v70 = *(_DWORD *)(*(_QWORD *)(v9 + 8LL * ((signed int)v90 % 2)) + 8LL);\n  if ( v70 <= 0 )\n  {\n    LODWORD(v71) = 1;\n  }\n  else\n  {\n    v71 = 1LL;\n    do\n    {\n      v67 = (unsigned int)(v71 + 3);\n      sub_41FFF0(v69, v67, v68);\n      *(_BYTE *)(*(_QWORD *)(v81 + 8) + v71) = 7;\n      v72 = v81;\n      *(_DWORD *)(*(_QWORD *)(v81 + 24) + 4 * v71) = v70;\n      v73 = v14[v70];\n      *(_BYTE *)(*(_QWORD *)(v72 + 8) + v71 + 1) = 6;\n      v69 = v81;\n      *(_DWORD *)(*(_QWORD *)(v81 + 24) + 4 * v71 + 4) = v73;\n      v70 = v10[v73];\n      v71 += 2LL;\n    }\n    while ( v70 > 0 );\n  }\n  v74 = (signed int)v71;\n  *(_BYTE *)(*(_QWORD *)(v69 + 8) + v74) = 4;\n  v75 = (_DWORD *)v81;\n  *(_DWORD *)(*(_QWORD *)(v81 + 24) + 4 * v74) = 0;\n  *v75 = v71 + 1;\n  sub_4204A0();\n  v76 = (void **)ptr;\n  free(*((void **)ptr + 4));\n  free(v76[5]);\n  free(v76[6]);\n  free(v76[7]);\n  free(*v76);\n  free(v76[1]);\n  free(v76[2]);\n  free(v76[3]);\n  free(v76);\n  v77 = (void **)v93;\n  free(*((void **)v93 + 4));\n  free(v77[5]);\n  free(v77[6]);\n  free(v77[7]);\n  free(*v77);\n  free(v77[1]);\n  free(v77[2]);\n  free(v77[3]);\n  free(v77);\n  free(v10);\n  free(v14);\n  *v94 = v81;\n  return sub_415B40(v66, v67, v78);\n}\n", 
            "funcStartAddr": "0x4044d0L", 
            "funcEndAddr": "0x404ce5L", 
            "funcName": "sub_4044D0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_404CF0(__int64 a1, unsigned int a2, __int64 a3, __int64 *a4, __m128i a5)\n{\n  __int64 v5; // r12\n  signed __int64 v6; // r15\n  signed int *v7; // r14\n  _BYTE *v8; // rbp\n  unsigned int *v9; // rbx\n  _DWORD *v10; // rax\n  _BYTE *v11; // r11\n  signed int *v12; // r10\n  __int64 v13; // rcx\n  __int64 v14; // rax\n  __int64 v15; // rdi\n  int v16; // ebx\n  int v17; // er15\n  __int64 v18; // r9\n  int v19; // eax\n  int v20; // edx\n  __int64 v21; // rsi\n  int v22; // er14\n  int v23; // edx\n  int v24; // ecx\n  signed __int64 v25; // rbx\n  __int64 v26; // r13\n  __int64 *v27; // rax\n  __int64 v28; // r10\n  int v29; // ecx\n  __int64 v30; // r15\n  __int64 v31; // r9\n  __int64 v32; // r11\n  __int64 v33; // r12\n  __int64 v34; // r10\n  __int64 v35; // rsi\n  unsigned __int64 v36; // r10\n  __int64 v37; // rbx\n  unsigned __int64 v38; // rax\n  __int64 v39; // rcx\n  unsigned __int64 v40; // rdx\n  unsigned __int64 v41; // rdi\n  unsigned __int64 v42; // rbp\n  unsigned __int64 v43; // rbx\n  unsigned __int64 v44; // rcx\n  bool v45; // r13\n  bool v46; // al\n  bool v47; // dl\n  bool v48; // cl\n  bool v49; // di\n  unsigned __int64 v50; // rbp\n  __int64 v51; // r8\n  __int64 v52; // rax\n  __int64 v53; // rdi\n  __int64 v54; // rcx\n  signed __int64 v55; // rdx\n  __int64 v56; // rbp\n  __int64 v57; // rbp\n  __int64 v58; // rax\n  char v59; // al\n  __int64 v60; // r12\n  unsigned int *v61; // r11\n  __int64 v62; // rcx\n  __int64 *v63; // r8\n  __int64 v64; // rdx\n  __int64 v65; // rdi\n  __int64 v66; // rsi\n  __int64 v67; // rdi\n  int v68; // ebp\n  int v69; // eax\n  int *v70; // rcx\n  int v71; // eax\n  __int64 v72; // r15\n  int v73; // edx\n  int v74; // eax\n  signed __int64 v75; // r8\n  signed __int64 v76; // r8\n  int v77; // eax\n  __int64 v78; // rbx\n  __int64 v79; // rdx\n  __int64 v80; // rsi\n  __int64 v81; // rdi\n  _BOOL8 v82; // rbp\n  __int64 v83; // rcx\n  int v84; // esi\n  signed int v85; // eax\n  int v86; // ecx\n  int v87; // ecx\n  _DWORD *v88; // rcx\n  __int64 v89; // rax\n  signed int v90; // eax\n  __int64 v91; // r12\n  signed __int64 v92; // r13\n  int v93; // esi\n  int v94; // eax\n  __int64 v95; // r8\n  __int64 *v96; // r9\n  __int64 v97; // r10\n  signed __int64 v98; // r14\n  int v99; // eax\n  __int64 v100; // r15\n  int v101; // esi\n  int v102; // esi\n  int v103; // esi\n  int v104; // ecx\n  int v105; // eax\n  int v106; // eax\n  signed int v107; // er11\n  int v108; // eax\n  int v109; // esi\n  signed int v110; // eax\n  int v111; // esi\n  int v112; // ecx\n  int v113; // eax\n  __int64 v114; // rax\n  int *v115; // rcx\n  int v116; // esi\n  signed int v117; // ebp\n  signed __int64 v118; // rax\n  int v119; // edx\n  int v120; // esi\n  int v121; // eax\n  int v122; // ebp\n  __int64 *v123; // rax\n  __int64 v124; // rcx\n  __int64 v125; // rdx\n  _DWORD *v126; // rsi\n  __int64 v127; // rbp\n  int v128; // er11\n  int v129; // er10\n  __int64 v130; // rdi\n  __int64 v131; // r9\n  __int64 v132; // r14\n  __int64 v133; // rbx\n  __int64 v134; // r15\n  signed __int64 v135; // rax\n  signed __int64 v136; // r11\n  __int64 v137; // rdi\n  unsigned __int64 v138; // r11\n  _BOOL8 v139; // rax\n  int v140; // er14\n  __int64 v141; // rax\n  unsigned __int64 v142; // rcx\n  unsigned __int64 v143; // rdx\n  unsigned __int64 v144; // rsi\n  unsigned __int64 v145; // rbp\n  unsigned __int64 v146; // rbx\n  unsigned __int64 v147; // rax\n  bool v148; // r8\n  bool v149; // r12\n  bool v150; // cl\n  bool v151; // dl\n  bool v152; // al\n  bool v153; // si\n  bool v154; // al\n  unsigned __int64 v155; // rax\n  __int64 v156; // r8\n  __int64 v157; // rcx\n  __int64 v158; // rbp\n  __int64 v159; // rdx\n  signed __int64 v160; // rsi\n  __int64 v161; // rax\n  __int64 v162; // rax\n  char v163; // al\n  __int64 v164; // r8\n  int v165; // edx\n  __int64 v166; // rcx\n  __int64 v167; // rsi\n  __int64 v168; // rdi\n  int v169; // edx\n  __int64 v170; // rdx\n  __int64 v171; // r11\n  _BOOL8 v172; // rbp\n  __int64 v173; // r13\n  __int64 v174; // rax\n  int *v175; // r10\n  __int64 v176; // r8\n  int v177; // eax\n  signed int v178; // edi\n  signed int v179; // er9\n  __int64 v180; // rax\n  __int64 v181; // rsi\n  int v182; // ecx\n  int v183; // er9\n  int v184; // edi\n  int v185; // eax\n  _DWORD *v186; // r8\n  __int64 v187; // rsi\n  __int64 v188; // rax\n  __int64 v189; // r9\n  int v190; // er15\n  __int64 v191; // r14\n  __int64 v192; // rbx\n  _QWORD *v193; // rdi\n  int v194; // eax\n  __int64 v195; // r8\n  int v196; // eax\n  __int64 v197; // r12\n  int v198; // eax\n  signed __int64 v199; // rax\n  int v200; // ebx\n  int v201; // ecx\n  int v202; // ecx\n  int v203; // eax\n  __int64 v204; // rax\n  int v205; // eax\n  __int64 v206; // r8\n  int v207; // er15\n  __int64 v208; // rcx\n  __int64 v209; // r9\n  __int64 v210; // r10\n  __int64 v211; // r11\n  __int64 v212; // r14\n  signed int v213; // eax\n  signed __int64 v214; // rdi\n  signed __int64 v215; // rsi\n  int v216; // edx\n  int v217; // edi\n  bool v218; // zf\n  bool v219; // sf\n  unsigned __int8 v220; // of\n  __int64 v221; // rdx\n  __int64 v222; // rcx\n  int v223; // eax\n  int v224; // ecx\n  char v225; // r8\n  bool v226; // zf\n  bool v227; // sf\n  unsigned __int8 v228; // of\n  int v229; // eax\n  unsigned __int8 v230; // r13\n  unsigned __int8 v231; // r12\n  __int64 v232; // rdx\n  char v233; // bl\n  __int64 v234; // rax\n  __int64 v235; // r15\n  __int64 v236; // rsi\n  int v237; // edi\n  unsigned int v238; // er14\n  __int64 v239; // rbp\n  unsigned __int64 v240; // r13\n  __int64 v241; // r12\n  unsigned __int64 v242; // rdx\n  __int64 v243; // rcx\n  unsigned __int64 v244; // rsi\n  bool v245; // r8\n  bool v246; // r9\n  bool v247; // dl\n  bool v248; // si\n  unsigned __int64 v249; // r8\n  unsigned __int64 v250; // rdi\n  __int64 v251; // r9\n  __int64 v252; // rbp\n  __int64 v253; // rbx\n  signed __int64 v254; // rdx\n  __int64 v255; // rdi\n  signed __int64 v256; // rax\n  unsigned int *v257; // rdx\n  __int64 v258; // rdx\n  unsigned __int64 v259; // rcx\n  __int64 v260; // rdx\n  unsigned __int64 v261; // r8\n  unsigned __int64 v262; // rdi\n  __int64 v263; // rsi\n  __int64 v264; // rdi\n  __int64 v265; // rcx\n  int v266; // ebp\n  __int64 v267; // rbp\n  __int64 v268; // rbx\n  signed __int64 v269; // rdx\n  __int64 v270; // rdi\n  signed __int64 v271; // rdx\n  __int64 v272; // rsi\n  signed __int64 v273; // rax\n  unsigned int v274; // ebp\n  __int64 v275; // rdi\n  signed __int64 v276; // rdx\n  char v277; // cl\n  signed __int64 v278; // rcx\n  char v279; // bl\n  int v280; // edi\n  unsigned int *v281; // rsi\n  __int64 v282; // rax\n  __int64 v283; // rax\n  __int64 v284; // r13\n  __int64 v285; // r15\n  __int64 v286; // rbx\n  signed __int64 v287; // rbp\n  _DWORD *v288; // rdi\n  _BYTE *v289; // r9\n  __int64 v290; // rcx\n  __int64 v291; // rcx\n  __int64 v292; // rdx\n  __int64 v293; // rax\n  __int64 v294; // r14\n  signed int *v295; // r12\n  __int128 v296; // xmm1\n  int v297; // eax\n  signed __int64 v298; // rcx\n  __int64 v299; // rax\n  __int64 v300; // rcx\n  signed int v301; // eax\n  __int64 v302; // rdx\n  __int64 v303; // rcx\n  __int64 v304; // rax\n  __int64 v305; // rax\n  char v306; // al\n  __int64 v307; // rdx\n  __int64 v308; // rax\n  __int64 v309; // rax\n  __int64 v310; // rdx\n  __int64 v311; // rcx\n  __int64 v312; // rcx\n  __m128i v313; // xmm0\n  int v314; // eax\n  signed int v315; // eax\n  __int64 v316; // rcx\n  __int64 v317; // rax\n  __int64 v318; // rax\n  __int64 v319; // rcx\n  __int64 v320; // rax\n  float result; // xmm0_4\n  __int64 v322; // [rsp+0h] [rbp-188h]\n  __int64 v323; // [rsp+8h] [rbp-180h]\n  int v324; // [rsp+10h] [rbp-178h]\n  int v325; // [rsp+14h] [rbp-174h]\n  __int64 v326; // [rsp+18h] [rbp-170h]\n  unsigned int *v327; // [rsp+20h] [rbp-168h]\n  _DWORD *v328; // [rsp+28h] [rbp-160h]\n  int v329; // [rsp+34h] [rbp-154h]\n  __int64 v330; // [rsp+38h] [rbp-150h]\n  __int64 v331; // [rsp+40h] [rbp-148h]\n  __int64 v332; // [rsp+48h] [rbp-140h]\n  void *v333; // [rsp+50h] [rbp-138h]\n  __int64 v334; // [rsp+58h] [rbp-130h]\n  __int64 v335; // [rsp+60h] [rbp-128h]\n  __int64 v336; // [rsp+68h] [rbp-120h]\n  __int64 v337; // [rsp+70h] [rbp-118h]\n  void *v338; // [rsp+78h] [rbp-110h]\n  __int64 v339; // [rsp+80h] [rbp-108h]\n  __int64 v340; // [rsp+88h] [rbp-100h]\n  __int64 v341; // [rsp+90h] [rbp-F8h]\n  void *v342; // [rsp+98h] [rbp-F0h]\n  unsigned int v343; // [rsp+A4h] [rbp-E4h]\n  void *v344; // [rsp+A8h] [rbp-E0h]\n  void *v345; // [rsp+B0h] [rbp-D8h]\n  __int64 v346; // [rsp+B8h] [rbp-D0h]\n  void *ptr; // [rsp+C0h] [rbp-C8h]\n  __int64 v348; // [rsp+C8h] [rbp-C0h]\n  __int64 v349; // [rsp+D0h] [rbp-B8h]\n  __int64 v350; // [rsp+D8h] [rbp-B0h]\n  unsigned int v351; // [rsp+E4h] [rbp-A4h]\n  int v352; // [rsp+E8h] [rbp-A0h]\n  int v353; // [rsp+ECh] [rbp-9Ch]\n  _DWORD *v354; // [rsp+F0h] [rbp-98h]\n  _BYTE *v355; // [rsp+F8h] [rbp-90h]\n  __int64 v356; // [rsp+100h] [rbp-88h]\n  _DWORD *v357; // [rsp+108h] [rbp-80h]\n  _BYTE *v358; // [rsp+110h] [rbp-78h]\n  __int64 v359; // [rsp+118h] [rbp-70h]\n  __int64 *v360; // [rsp+120h] [rbp-68h]\n  signed int *v361; // [rsp+128h] [rbp-60h]\n  _BYTE *v362; // [rsp+130h] [rbp-58h]\n  unsigned __int64 v363; // [rsp+138h] [rbp-50h]\n  signed int *v364; // [rsp+140h] [rbp-48h]\n  __int64 v365; // [rsp+148h] [rbp-40h]\n  __int64 v366; // [rsp+150h] [rbp-38h]\n\n  v360 = a4;\n  v5 = a3;\n  v331 = a1;\n  v351 = a2 + 1;\n  v6 = 4LL * (signed int)(a2 + 1);\n  v7 = (signed int *)sub_4382F0(\"core_algorithms.c\", 1282LL, 4LL * (signed int)(a2 + 1));\n  v8 = (_BYTE *)sub_4382F0(\"core_algorithms.c\", 1283LL, (signed int)(a2 + 1));\n  v9 = (unsigned int *)sub_4382F0(\"core_algorithms.c\", 1284LL, v6);\n  v10 = (_DWORD *)sub_4382F0(\"core_algorithms.c\", 1285LL, v6);\n  v11 = v8;\n  v12 = v7;\n  v344 = v10;\n  *v10 = 1;\n  v345 = v9;\n  *v9 = a2;\n  v7[1] = 1;\n  LODWORD(v10) = *(_DWORD *)(v5 + 136);\n  v359 = a2;\n  v13 = (signed int)a2;\n  v7[v13] = (signed int)v10;\n  v354 = v7 + 1;\n  v8[1] = 4;\n  v327 = (unsigned int *)(v5 + 136);\n  v346 = (signed int)a2;\n  v8[v13] = 9;\n  v355 = v8 + 1;\n  v364 = v7 - 1;\n  v363 = v5 + 137;\n  v358 = v8 + 12;\n  v357 = v7 + 12;\n  v362 = v8 - 3;\n  v361 = v7 - 3;\n  v14 = 0LL;\n  v338 = v7;\n  v333 = v8;\n  v322 = v5;\n  while ( 2 )\n  {\n    v356 = v14;\n    v16 = *((_DWORD *)v344 + (signed int)v14);\n    v365 = (signed int)v14;\n    v17 = *((_DWORD *)v345 + (signed int)v14);\n    v18 = (unsigned int)(char)v11[v17];\n    v19 = *((_DWORD *)v345 + (signed int)v14) - v16;\n    v20 = v19 / 2;\n    if ( v19 == 1 )\n      v20 = 0;\n    v21 = (unsigned int)(char)v11[v16];\n    v340 = v21;\n    if ( (_DWORD)v21 != 4 )\n      v20 = v19 / 2;\n    v22 = v16;\n    if ( (_DWORD)v21 == 4 )\n      v22 = 0;\n    v353 = v16;\n    v23 = v16 + v20;\n    v341 = v18;\n    v24 = v23;\n    v329 = v17;\n    if ( (_DWORD)v18 == 9 )\n      v24 = v17;\n    v366 = v16;\n    v324 = v12[v16];\n    v25 = v324;\n    v337 = v17;\n    v26 = v12[v17];\n    if ( v19 != 1 )\n      v24 = v23;\n    v325 = v24;\n    v27 = (__int64 *)sub_402A00(1, *v327, 0, 0);\n    v28 = *v27;\n    v335 = v27[1];\n    v330 = v27[2];\n    ptr = v27;\n    v336 = v27[3];\n    v29 = v22 % 2;\n    v30 = v22 % 2;\n    v31 = *(_QWORD *)(v28 + 8 * v30);\n    *(_QWORD *)v31 = -4241943005140773041LL;\n    *(_DWORD *)(v31 + 16) = -987654321;\n    *(_DWORD *)(v31 + 8) = -987654321;\n    v326 = v25;\n    v334 = v26;\n    v339 = v28;\n    if ( (signed int)v25 <= (signed int)v26 )\n    {\n      v32 = *(_QWORD *)(v336 + 8LL * v29);\n      v33 = *(_QWORD *)(v330 + 8LL * v29);\n      v34 = v26;\n      if ( v326 >= v26 )\n        v34 = v326;\n      v35 = *(_QWORD *)(v335 + 8LL * v29);\n      v36 = v34 + 1 - v326;\n      v37 = v326;\n      if ( v36 < 8 )\n        goto LABEL_18;\n      v38 = v32 + 4 * v326;\n      v39 = v26;\n      if ( v326 >= v26 )\n        v39 = v326;\n      v40 = v32 + 4 * v39 + 4;\n      v41 = v33 + 4 * v326;\n      v42 = v33 + 4 * v39 + 4;\n      v43 = v35 + 4 * v326;\n      v44 = v35 + 4 * v39 + 4;\n      LOBYTE(v328) = v38 < v42;\n      v45 = v41 < v40;\n      v46 = v38 < v44;\n      v47 = v43 < v40;\n      v48 = v41 < v44;\n      v49 = v43 < v42;\n      v37 = v326;\n      v218 = (v45 & (unsigned __int8)v328) == 0;\n      v26 = v334;\n      if ( !v218 || (v37 = v326, v47 && v46) || (v37 = v326, v49 && v48) )\n      {\nLABEL_18:\n        v25 = v37 - 1;\n        v28 = v339;\n        do\n        {\n          *(_DWORD *)(v32 + 4 * v25 + 4) = -987654321;\n          *(_DWORD *)(v33 + 4 * v25 + 4) = -987654321;\n          *(_DWORD *)(v35 + 4 * v25++ + 4) = -987654321;\n        }\n        while ( v25 < v26 );\n        goto LABEL_20;\n      }\n      v25 = v36 & 0xFFFFFFFFFFFFFFF8LL;\n      v50 = ((v36 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n      v51 = ((_BYTE)v50 + 1) & 1;\n      if ( (v36 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n      {\n        v56 = 0LL;\n        a5 = _mm_load_si128((const __m128i *)&xmmword_4401D0);\n        if ( !v51 )\n          goto LABEL_32;\n      }\n      else\n      {\n        v52 = v35 + 4 * v326 + 48;\n        v53 = v33 + 4 * v326 + 48;\n        v54 = v32 + 4 * v326 + 48;\n        v55 = v51 - 1 - v50;\n        v56 = 0LL;\n        a5 = _mm_load_si128((const __m128i *)&xmmword_4401D0);\n        do\n        {\n          _mm_storeu_si128((__m128i *)(v32 + 4 * v326 + 4 * v56), a5);\n          _mm_storeu_si128((__m128i *)(v54 + 4 * v56 - 32), a5);\n          _mm_storeu_si128((__m128i *)(v33 + 4 * v326 + 4 * v56), a5);\n          _mm_storeu_si128((__m128i *)(v53 + 4 * v56 - 32), a5);\n          _mm_storeu_si128((__m128i *)(v35 + 4 * v326 + 4 * v56), a5);\n          _mm_storeu_si128((__m128i *)(v52 + 4 * v56 - 32), a5);\n          _mm_storeu_si128((__m128i *)(v54 + 4 * v56 - 16), a5);\n          _mm_storeu_si128((__m128i *)(v54 + 4 * v56), a5);\n          _mm_storeu_si128((__m128i *)(v53 + 4 * v56 - 16), a5);\n          _mm_storeu_si128((__m128i *)(v53 + 4 * v56), a5);\n          _mm_storeu_si128((__m128i *)(v52 + 4 * v56 - 16), a5);\n          _mm_storeu_si128((__m128i *)(v52 + 4 * v56), a5);\n          v56 += 16LL;\n          v55 += 2LL;\n        }\n        while ( v55 );\n        if ( !v51 )\n          goto LABEL_32;\n      }\n      v57 = v326 + v56;\n      _mm_storeu_si128((__m128i *)(v32 + 4 * v57), a5);\n      _mm_storeu_si128((__m128i *)(v32 + 4 * v57 + 16), a5);\n      _mm_storeu_si128((__m128i *)(v33 + 4 * v57), a5);\n      _mm_storeu_si128((__m128i *)(v33 + 4 * v57 + 16), a5);\n      _mm_storeu_si128((__m128i *)(v35 + 4 * v57), a5);\n      _mm_storeu_si128((__m128i *)(v35 + 4 * v57 + 16), a5);\nLABEL_32:\n      v218 = v36 == v25;\n      v28 = v339;\n      if ( v218 )\n        goto LABEL_20;\n      v37 = v326 + v25;\n      goto LABEL_18;\n    }\nLABEL_20:\n    switch ( (_DWORD)v340 )\n    {\n      case 1:\n        v58 = v335;\n        goto LABEL_38;\n      case 3:\n        v58 = v330;\nLABEL_38:\n        *(_DWORD *)(*(_QWORD *)(v58 + 8 * v30) + 4 * v326) = 0;\n        break;\n      case 4:\n      case 5:\n        *(_DWORD *)(v31 + 16) = 0;\n        break;\n      case 8:\n        *(_DWORD *)(v31 + 8) = 0;\n        break;\n      default:\n        v59 = sub_408740(v340);\n        sub_4325B0(\"you can't init get_wee_midpt with a %s\\n\", v59);\n        return result;\n    }\n    v60 = v322;\n    v61 = v327;\n    if ( (_BYTE)v340 == 1 )\n    {\n      if ( v324 >= (signed int)v26 )\n      {\n        v63 = (__int64 *)(v335 + 8 * v30);\n      }\n      else\n      {\n        v62 = *(_QWORD *)(v336 + 8 * v30);\n        v63 = (__int64 *)(v335 + 8 * v30);\n        v64 = *v63;\n        v65 = *(_QWORD *)(v322 + 312);\n        v66 = *(_QWORD *)(v65 + 16);\n        v67 = *(_QWORD *)(v65 + 48);\n        v68 = *(_DWORD *)(v62 + 4 * v326);\n        v25 = v326;\n        do\n        {\n          *(_DWORD *)(v62 + 4 * v25 + 4) = -987654321;\n          v69 = *(_DWORD *)(v64 + 4 * v25) + *(_DWORD *)(v66 + 4 * v25);\n          if ( v69 <= -987654322 )\n            v69 = -987654321;\n          *(_DWORD *)(v62 + 4 * v25 + 4) = v69;\n          v68 += *(_DWORD *)(v67 + 4 * v25);\n          if ( v68 < v69 )\n            v68 = v69;\n          *(_DWORD *)(v62 + 4 * v25++ + 4) = v68;\n        }\n        while ( v26 != v25 );\n      }\n      v70 = *(int **)(v28 + 8 * v30);\n      v70[1] = -987654321;\n      v72 = v326;\n      v71 = *(_DWORD *)(*v63 + 4 * v326) + *(_DWORD *)(*(_QWORD *)(v322 + 376) + 4 * v326);\n      if ( v71 < -987654320 )\n        v71 = -987654321;\n      else\n        v70[1] = v71;\n    }\n    else\n    {\n      v70 = *(int **)(v28 + 8 * v30);\n      v71 = v70[1];\n      v72 = v326;\n    }\n    *v70 = -987654321;\n    v73 = v70[4] + *(_DWORD *)(v322 + 336);\n    if ( v73 <= -987654322 )\n      v73 = -987654321;\n    *v70 = v73;\n    v70[2] = -987654321;\n    v74 = *(_DWORD *)(v322 + 344) + v71;\n    if ( v74 <= -987654322 )\n      v74 = -987654321;\n    v70[2] = v74;\n    v326 = v72;\n    if ( v22 < v325 )\n    {\n      v75 = v22;\n      v348 = v325;\n      v342 = (void *)(v72 + 1);\n      v332 = -v26;\n      do\n      {\n        v76 = v75 + 1;\n        v77 = (signed int)v76 % 2;\n        v78 = *(_QWORD *)(v336 + 8LL * ((signed int)v76 % 2));\n        *(_DWORD *)(v78 + 4 * v72) = -987654321;\n        v79 = *(_QWORD *)(v330 + 8LL * ((signed int)v76 % 2));\n        *(_DWORD *)(v79 + 4 * v72) = -987654321;\n        v80 = v335;\n        v349 = (signed int)v76 % 2;\n        v81 = *(_QWORD *)(v335 + 8 * v349);\n        *(_DWORD *)(v81 + 4 * v72) = -987654321;\n        if ( (signed int)*v61 <= v324 )\n        {\n          v82 = v77 == 0;\n        }\n        else\n        {\n          v82 = v77 == 0;\n          *(_DWORD *)(v79 + 4 * v72) = -987654321;\n          v83 = *(_QWORD *)(v60 + 312);\n          v84 = *(_DWORD *)(*(_QWORD *)(v80 + 8 * v82) + 4 * v72) + *(_DWORD *)(*(_QWORD *)(v83 + 8) + 4 * v72);\n          v85 = -987654321;\n          if ( v84 >= -987654320 )\n          {\n            *(_DWORD *)(v79 + 4 * v72) = v84;\n            v85 = v84;\n          }\n          v86 = *(_DWORD *)(*(_QWORD *)(v330 + 8 * v82) + 4 * v72) + *(_DWORD *)(*(_QWORD *)(v83 + 32) + 4 * v72);\n          if ( v86 > v85 )\n          {\n            *(_DWORD *)(v79 + 4 * v72) = v86;\n            v85 = v86;\n          }\n          v87 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 328) + 8LL * *(char *)(v331 + v76)) + 4 * v72);\n          if ( v87 == -987654321 )\n            *(_DWORD *)(v79 + 4 * v72) = -987654321;\n          else\n            *(_DWORD *)(v79 + 4 * v72) = v85 + v87;\n        }\n        v88 = *(_DWORD **)(v28 + 8 * v82);\n        v89 = *(_QWORD *)(v60 + 368);\n        v350 = v89;\n        LODWORD(v89) = *(_DWORD *)(v89 + 4 * v72);\n        v328 = v88;\n        v90 = *v88 + v89;\n        if ( v90 >= -987654320 )\n          *(_DWORD *)(v81 + 4 * v72) = v90;\n        v91 = *(_QWORD *)(v60 + 320);\n        v92 = v76;\n        v93 = *(_DWORD *)(*(_QWORD *)(v91 + 8LL * *(char *)(v331 + v76)) + 4 * v72);\n        v94 = -987654321;\n        if ( v93 != -987654321 )\n          v94 = *(_DWORD *)(v81 + 4 * v72) + v93;\n        *(_DWORD *)(v81 + 4 * v72) = v94;\n        if ( v324 < (signed int)v334 )\n        {\n          v95 = *(_QWORD *)(v335 + 8 * v82);\n          v96 = *(__int64 **)(v322 + 312);\n          v97 = *v96;\n          v98 = (signed __int64)v342;\n          do\n          {\n            *(_DWORD *)(v81 + 4 * v98) = -987654321;\n            v99 = *(_DWORD *)(v95 + 4 * v98 - 4) + *(_DWORD *)(v97 + 4 * v98 - 4);\n            if ( v99 <= -987654322 )\n              v99 = -987654321;\n            *(_DWORD *)(v81 + 4 * v98) = v99;\n            v100 = *(_QWORD *)(v330 + 8 * v82);\n            v101 = *(_DWORD *)(v100 + 4 * v98 - 4) + *(_DWORD *)(v96[3] + 4 * v98 - 4);\n            if ( v101 > v99 )\n            {\n              *(_DWORD *)(v81 + 4 * v98) = v101;\n              v99 = v101;\n            }\n            v102 = *v328 + *(_DWORD *)(v350 + 4 * v98);\n            if ( v102 > v99 )\n            {\n              *(_DWORD *)(v81 + 4 * v98) = v102;\n              v99 = v102;\n            }\n            v103 = *(_DWORD *)(*(_QWORD *)(v336 + 8 * v82) + 4 * v98 - 4) + *(_DWORD *)(v96[5] + 4 * v98 - 4);\n            if ( v103 > v99 )\n            {\n              *(_DWORD *)(v81 + 4 * v98) = v103;\n              v99 = v103;\n            }\n            v104 = *(_DWORD *)(*(_QWORD *)(v91 + 8LL * *(char *)(v331 + v92)) + 4 * v98);\n            v105 = v104 + v99;\n            if ( v104 == -987654321 )\n              v105 = -987654321;\n            *(_DWORD *)(v81 + 4 * v98) = v105;\n            *(_DWORD *)(v78 + 4 * v98) = -987654321;\n            if ( v98 < (signed int)*v61 )\n            {\n              v106 = *(_DWORD *)(v81 + 4 * v98 - 4) + *(_DWORD *)(v96[2] + 4 * v98 - 4);\n              v107 = -987654321;\n              if ( v106 >= -987654320 )\n              {\n                *(_DWORD *)(v78 + 4 * v98) = v106;\n                v107 = v106;\n              }\n              v108 = *(_DWORD *)(v78 + 4 * v98 - 4) + *(_DWORD *)(v96[6] + 4 * v98 - 4);\n              v220 = __OFSUB__(v108, v107);\n              v218 = v108 == v107;\n              v219 = v108 - v107 < 0;\n              v61 = v327;\n              if ( !((unsigned __int8)(v219 ^ v220) | v218) )\n                *(_DWORD *)(v78 + 4 * v98) = v108;\n            }\n            *(_DWORD *)(v79 + 4 * v98) = -987654321;\n            if ( v98 < (signed int)*v61 )\n            {\n              v109 = *(_DWORD *)(v95 + 4 * v98) + *(_DWORD *)(v96[1] + 4 * v98);\n              v110 = -987654321;\n              if ( v109 >= -987654320 )\n              {\n                *(_DWORD *)(v79 + 4 * v98) = v109;\n                v110 = v109;\n              }\n              v111 = *(_DWORD *)(v100 + 4 * v98) + *(_DWORD *)(v96[4] + 4 * v98);\n              if ( v111 > v110 )\n              {\n                *(_DWORD *)(v79 + 4 * v98) = v111;\n                v110 = v111;\n              }\n              v112 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v322 + 328) + 8LL * *(char *)(v331 + v92)) + 4 * v98);\n              v113 = v112 + v110;\n              if ( v112 == -987654321 )\n                v113 = -987654321;\n              *(_DWORD *)(v79 + 4 * v98) = v113;\n            }\n            v114 = v98++ + v332 + 1;\n          }\n          while ( v114 != 1 );\n        }\n        v28 = v339;\n        v115 = *(int **)(v339 + 8 * v349);\n        v115[4] = -987654321;\n        v60 = v322;\n        v116 = v328[4] + *(_DWORD *)(v322 + 340);\n        v117 = -987654321;\n        if ( v116 <= -987654322 )\n          v116 = -987654321;\n        v115[4] = v116;\n        v115[1] = -987654321;\n        LODWORD(v25) = -987654321;\n        v72 = v326;\n        v75 = v92;\n        v26 = v334;\n        if ( v324 <= (signed int)v334 )\n        {\n          v117 = -987654321;\n          v118 = v326;\n          do\n          {\n            if ( v118 > (signed int)*v61 )\n              break;\n            v119 = *(_DWORD *)(v81 + 4 * v118) + *(_DWORD *)(*(_QWORD *)(v322 + 376) + 4 * v118);\n            if ( v119 > v117 )\n            {\n              v115[1] = v119;\n              v117 = v119;\n            }\n            v220 = __OFSUB__(v118, v26);\n            v219 = v118++ - v26 < 0;\n          }\n          while ( v219 ^ v220 );\n        }\n        *v115 = -987654321;\n        v120 = *(_DWORD *)(v322 + 336) + v116;\n        if ( v120 <= -987654322 )\n          v120 = -987654321;\n        *v115 = v120;\n        v115[2] = -987654321;\n        v121 = v328[2] + *(_DWORD *)(v322 + 356);\n        if ( v121 <= -987654322 )\n          v121 = -987654321;\n        v115[2] = v121;\n        v122 = *(_DWORD *)(v322 + 344) + v117;\n        if ( v122 < v121 )\n          v122 = v121;\n        v115[2] = v122;\n      }\n      while ( v75 != v348 );\n    }\n    v123 = (__int64 *)sub_402A00(1, *v61, 0, 0);\n    v124 = *v123;\n    v125 = v123[1];\n    v126 = (_DWORD *)v123[2];\n    v342 = v123;\n    v127 = v123[3];\n    v128 = v329;\n    v129 = v329 % 2;\n    v130 = v329 % 2;\n    v335 = v124;\n    v131 = *(_QWORD *)(v124 + 8 * v130);\n    *(_QWORD *)v131 = -4241943005140773041LL;\n    *(_DWORD *)(v131 + 16) = -987654321;\n    *(_DWORD *)(v131 + 8) = -987654321;\n    v330 = v127;\n    if ( (signed int)v26 + 1 < v324 )\n      goto LABEL_121;\n    v132 = *(_QWORD *)(v127 + 8LL * v129);\n    v133 = v72;\n    v134 = *(_QWORD *)&v126[2 * v129];\n    v135 = v26 + 1;\n    v136 = v133;\n    if ( v26 + 1 >= v133 )\n      v136 = v26 + 1;\n    v336 = v129;\n    v137 = *(_QWORD *)(v125 + 8LL * v129);\n    v138 = v136 + 1 - v133;\n    a5 = _mm_load_si128((const __m128i *)&xmmword_4401D0);\n    if ( v138 < 8 )\n      goto LABEL_118;\n    v328 = v126;\n    v332 = v125;\n    v142 = v132 + 4 * v133;\n    if ( v135 < v133 )\n      v135 = v133;\n    v143 = v132 + 4 * v135 + 4;\n    v144 = v134 + 4 * v133;\n    v145 = v134 + 4 * v135 + 4;\n    v146 = v137 + 4 * v133;\n    v147 = v137 + 4 * v135 + 4;\n    v148 = v142 < v145;\n    v149 = v144 < v143;\n    v150 = v142 < v147;\n    v151 = v146 < v143;\n    v152 = v144 < v147;\n    v153 = v146 < v145;\n    if ( v149 && v148 || v151 && v150 )\n    {\n      v133 = v326;\n      v60 = v322;\n      v125 = v332;\n      v126 = v328;\n      v127 = v330;\nLABEL_118:\n      v25 = v133 - 1;\n      do\n      {\n        *(_DWORD *)(v132 + 4 * v25 + 4) = -987654321;\n        *(_DWORD *)(v134 + 4 * v25 + 4) = -987654321;\n        *(_DWORD *)(v137 + 4 * v25++ + 4) = -987654321;\n      }\n      while ( v25 <= v26 );\n      goto LABEL_120;\n    }\n    v133 = v326;\n    v154 = v153 && v152;\n    v60 = v322;\n    v125 = v332;\n    v126 = v328;\n    v127 = v330;\n    if ( v154 )\n      goto LABEL_118;\n    v25 = v138 & 0xFFFFFFFFFFFFFFF8LL;\n    v155 = ((v138 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n    v156 = ((_BYTE)v155 + 1) & 1;\n    if ( (v138 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n    {\n      v161 = 0LL;\n      if ( v156 )\n      {\nLABEL_132:\n        v162 = v326 + v161;\n        _mm_storeu_si128((__m128i *)(v132 + 4 * v162), a5);\n        _mm_storeu_si128((__m128i *)(v132 + 4 * v162 + 16), a5);\n        _mm_storeu_si128((__m128i *)(v134 + 4 * v162), a5);\n        _mm_storeu_si128((__m128i *)(v134 + 4 * v162 + 16), a5);\n        _mm_storeu_si128((__m128i *)(v137 + 4 * v162), a5);\n        _mm_storeu_si128((__m128i *)(v137 + 4 * v162 + 16), a5);\n        goto LABEL_133;\n      }\n    }\n    else\n    {\n      v157 = v137 + 4 * v326 + 48;\n      v158 = v134 + 4 * v326 + 48;\n      v159 = v132 + 4 * v326 + 48;\n      v160 = v156 - 1 - v155;\n      v161 = 0LL;\n      do\n      {\n        _mm_storeu_si128((__m128i *)(v132 + 4 * v326 + 4 * v161), a5);\n        _mm_storeu_si128((__m128i *)(v159 + 4 * v161 - 32), a5);\n        _mm_storeu_si128((__m128i *)(v134 + 4 * v326 + 4 * v161), a5);\n        _mm_storeu_si128((__m128i *)(v158 + 4 * v161 - 32), a5);\n        _mm_storeu_si128((__m128i *)(v137 + 4 * v326 + 4 * v161), a5);\n        _mm_storeu_si128((__m128i *)(v157 + 4 * v161 - 32), a5);\n        _mm_storeu_si128((__m128i *)(v159 + 4 * v161 - 16), a5);\n        _mm_storeu_si128((__m128i *)(v159 + 4 * v161), a5);\n        _mm_storeu_si128((__m128i *)(v158 + 4 * v161 - 16), a5);\n        _mm_storeu_si128((__m128i *)(v158 + 4 * v161), a5);\n        _mm_storeu_si128((__m128i *)(v157 + 4 * v161 - 16), a5);\n        _mm_storeu_si128((__m128i *)(v157 + 4 * v161), a5);\n        v161 += 16LL;\n        v160 += 2LL;\n      }\n      while ( v160 );\n      if ( v156 )\n        goto LABEL_132;\n    }\nLABEL_133:\n    v125 = v332;\n    v126 = v328;\n    v127 = v330;\n    if ( v138 != v25 )\n    {\n      v133 = v326 + v25;\n      goto LABEL_118;\n    }\nLABEL_120:\n    v128 = v329;\n    v72 = v326;\n    v130 = v336;\nLABEL_121:\n    v139 = v129 == 0;\n    *(_DWORD *)(*(_QWORD *)(v127 + 8 * v139) + 4 * v26 + 4) = -987654321;\n    *(_DWORD *)(*(_QWORD *)&v126[2 * v139] + 4 * v26 + 4) = -987654321;\n    *(_DWORD *)(*(_QWORD *)(v125 + 8 * v139) + 4 * v26 + 4) = -987654321;\n    v140 = v325;\n    v332 = v125;\n    v328 = v126;\n    switch ( (_DWORD)v341 )\n    {\n      case 1:\n        v141 = *(_QWORD *)(v125 + 8 * v130);\n        goto LABEL_138;\n      case 3:\n        v141 = *(_QWORD *)&v126[2 * v130];\nLABEL_138:\n        *(_DWORD *)(v141 + 4 * v26) = 0;\n        if ( (_BYTE)v341 != 9 )\n          goto LABEL_151;\n        goto LABEL_145;\n      case 5:\n        *(_DWORD *)(v131 + 16) = 0;\n        if ( (_BYTE)v341 != 9 )\n          goto LABEL_151;\n        goto LABEL_145;\n      case 8:\n        *(_DWORD *)(v131 + 8) = 0;\n        if ( (_BYTE)v341 != 9 )\n          goto LABEL_151;\n        goto LABEL_145;\n      case 9:\n        *(_DWORD *)(v131 + 8) = *(_DWORD *)(v60 + 352);\n        if ( (_BYTE)v341 == 9 )\n        {\nLABEL_145:\n          v164 = *(_QWORD *)(v335 + 8 * v130);\n          v165 = *(_DWORD *)(v164 + 8) + *(_DWORD *)(v60 + 344);\n          *(_DWORD *)(v164 + 4) = v165;\n          if ( v324 <= (signed int)v26 )\n          {\n            v166 = *(_QWORD *)(v60 + 376);\n            v167 = *(_QWORD *)(v332 + 8 * v130);\n            v168 = v26;\n            while ( 1 )\n            {\n              v169 = *(_DWORD *)(v166 + 4 * v168) + v165;\n              *(_DWORD *)(v167 + 4 * v168) = v169;\n              if ( v128 != v140 )\n              {\n                v25 = *(char *)(v331 + v337);\n                v127 = *(_QWORD *)(*(_QWORD *)(v60 + 320) + 8 * v25);\n                *(_DWORD *)(v167 + 4 * v168) = *(_DWORD *)(v127 + 4 * v168) + v169;\n              }\n              if ( v168 <= v72 )\n                break;\n              --v168;\n              v165 = *(_DWORD *)(v164 + 4);\n            }\n          }\n        }\nLABEL_151:\n        v352 = v128 - v140;\n        if ( v128 > v140 )\n        {\n          v339 = v140;\n          v348 = v72 - 1;\n          v170 = 4 * v334;\n          v336 = v334 + 1;\n          v350 = (unsigned int)v334;\n          v171 = v337;\n          do\n          {\n            v172 = (signed int)--v171 % 2 == 0;\n            v173 = (signed int)v171 % 2;\n            v174 = v335;\n            v175 = *(int **)(v335 + 8 * v173);\n            v175[2] = -987654321;\n            v176 = *(_QWORD *)(v174 + 8 * v172);\n            v177 = *(_DWORD *)(v176 + 8) + *(_DWORD *)(v60 + 356);\n            v178 = -987654321;\n            v179 = -987654321;\n            if ( v177 >= -987654320 )\n            {\n              v175[2] = v177;\n              v179 = v177;\n            }\n            *v175 = -987654321;\n            if ( v324 <= (signed int)v334 )\n            {\n              v180 = *(_QWORD *)(v332 + 8 * v172);\n              v25 = *(_QWORD *)(v60 + 368);\n              v178 = -987654321;\n              v181 = v348;\n              do\n              {\n                v182 = *(_DWORD *)(v180 + 4 * v181 + 4) + *(_DWORD *)(v25 + 4 * v181 + 4);\n                if ( v182 > v178 )\n                {\n                  *v175 = v182;\n                  v178 = v182;\n                }\n                ++v181;\n              }\n              while ( v181 < v334 );\n            }\n            v349 = (signed int)v171 % 2 == 0;\n            v175[1] = -987654321;\n            v183 = *(_DWORD *)(v60 + 344) + v179;\n            if ( v183 <= -987654322 )\n              v183 = -987654321;\n            v175[1] = v183;\n            v175[4] = -987654321;\n            v184 = *(_DWORD *)(v60 + 336) + v178;\n            if ( v184 <= -987654322 )\n              v184 = -987654321;\n            v175[4] = v184;\n            v185 = *(_DWORD *)(v176 + 16) + *(_DWORD *)(v60 + 340);\n            if ( v185 < v184 )\n              v185 = v184;\n            v175[4] = v185;\n            v127 = v332;\n            v186 = v328;\n            if ( v324 <= (signed int)v334 )\n            {\n              v187 = 0LL;\n              do\n              {\n                if ( (_DWORD)v350 + (_DWORD)v187 == *v327 )\n                {\n                  v188 = v170 + *(_QWORD *)(v127 + 8 * v173);\n                  *(_DWORD *)(v188 + 4 * v187) = v175[1];\n                  *(_DWORD *)(v170 + *(_QWORD *)(v330 + 8 * v173) + 4 * v187) = -987654321;\n                  *(_DWORD *)(v170 + *(_QWORD *)&v186[2 * v173] + 4 * v187) = -987654321;\n                  if ( v140 != (_DWORD)v171 )\n                    *(_DWORD *)(v188 + 4 * v187) += *(_DWORD *)(v170\n                                                              + *(_QWORD *)(*(_QWORD *)(v60 + 320)\n                                                                          + 8LL * *(char *)(v331 + v171))\n                                                              + 4 * v187);\n                }\n                else\n                {\n                  v189 = v170 + *(_QWORD *)(v127 + 8 * v173);\n                  *(_DWORD *)(v189 + 4 * v187) = -987654321;\n                  v190 = v175[1] + *(_DWORD *)(v170 + *(_QWORD *)(v60 + 376) + 4 * v187);\n                  if ( v190 <= -987654322 )\n                    v190 = -987654321;\n                  *(_DWORD *)(v189 + 4 * v187) = v190;\n                  v191 = *(_QWORD *)(v127 + 8 * v349);\n                  v192 = v349;\n                  v193 = *(_QWORD **)(v60 + 312);\n                  v194 = *(_DWORD *)(v191 + v170 + 4 * v187 + 4) + *(_DWORD *)(v170 + *v193 + 4 * v187);\n                  if ( v194 > v190 )\n                  {\n                    *(_DWORD *)(v189 + 4 * v187) = v194;\n                    v190 = v194;\n                  }\n                  v195 = v170 + *(_QWORD *)&v186[2 * v192];\n                  v196 = *(_DWORD *)(v195 + 4 * v187) + *(_DWORD *)(v170 + v193[1] + 4 * v187);\n                  if ( v196 > v190 )\n                  {\n                    *(_DWORD *)(v189 + 4 * v187) = v196;\n                    v190 = v196;\n                  }\n                  v197 = v170 + *(_QWORD *)(v330 + 8 * v173);\n                  v198 = *(_DWORD *)(v197 + 4 * v187 + 4) + *(_DWORD *)(v170 + v193[2] + 4 * v187);\n                  if ( v198 > v190 )\n                  {\n                    *(_DWORD *)(v189 + 4 * v187) = v198;\n                    v190 = v198;\n                  }\n                  v199 = v191 + v170 + 4;\n                  v140 = v325;\n                  if ( v325 != (_DWORD)v171 )\n                    *(_DWORD *)(v189 + 4 * v187) = *(_DWORD *)(v170\n                                                             + *(_QWORD *)(*(_QWORD *)(v322 + 320)\n                                                                         + 8LL * *(char *)(v331 + v171))\n                                                             + 4 * v187)\n                                                 + v190;\n                  *(_DWORD *)(v197 + 4 * v187) = -987654321;\n                  v200 = *(_DWORD *)(v199 + 4 * v187) + *(_DWORD *)(v170 + v193[5] + 4 * v187);\n                  if ( v200 <= -987654322 )\n                    v200 = -987654321;\n                  *(_DWORD *)(v197 + 4 * v187) = v200;\n                  v201 = *(_DWORD *)(v197 + 4 * v187 + 4) + *(_DWORD *)(v170 + v193[6] + 4 * v187);\n                  if ( v201 < v200 )\n                    v201 = v200;\n                  *(_DWORD *)(v197 + 4 * v187) = v201;\n                  v25 = v170 + *(_QWORD *)&v328[2 * v173];\n                  *(_DWORD *)(v25 + 4 * v187) = -987654321;\n                  v202 = *(_DWORD *)(v199 + 4 * v187) + *(_DWORD *)(v170 + v193[3] + 4 * v187);\n                  v72 = v326;\n                  if ( v202 <= -987654322 )\n                    v202 = -987654321;\n                  *(_DWORD *)(v25 + 4 * v187) = v202;\n                  v203 = *(_DWORD *)(v195 + 4 * v187) + *(_DWORD *)(v170 + v193[4] + 4 * v187);\n                  if ( v203 < v202 )\n                    v203 = v202;\n                  *(_DWORD *)(v25 + 4 * v187) = v203;\n                  v60 = v322;\n                  v127 = v332;\n                  v186 = v328;\n                  if ( v140 != (_DWORD)v171 )\n                    *(_DWORD *)(v25 + 4 * v187) = *(_DWORD *)(v170\n                                                            + *(_QWORD *)(*(_QWORD *)(v322 + 328)\n                                                                        + 8LL * *(char *)(v331 + v171))\n                                                            + 4 * v187)\n                                                + v203;\n                }\n                v204 = v187-- + v336 - 1;\n              }\n              while ( v204 > v72 );\n            }\n          }\n          while ( v171 > v339 );\n        }\n        v205 = v140 % 2;\n        if ( v324 <= (signed int)v334 )\n        {\n          v206 = v205;\n          v208 = *((_QWORD *)ptr + 2);\n          v209 = *(_QWORD *)(*((_QWORD *)ptr + 1) + 8LL * v205);\n          v210 = *(_QWORD *)(*((_QWORD *)v342 + 1) + 8LL * v205);\n          v211 = *(_QWORD *)(v208 + 8LL * v205);\n          v212 = *(_QWORD *)(*((_QWORD *)v342 + 2) + 8LL * v205);\n          v213 = -987654321;\n          v214 = v72 - 1;\n          do\n          {\n            v215 = v214;\n            v216 = *(_DWORD *)(v209 + 4 * v214 + 4) + *(_DWORD *)(v210 + 4 * v214 + 4);\n            LOBYTE(v208) = 1;\n            if ( v216 <= v213 )\n              LODWORD(v208) = v25;\n            v207 = v213;\n            if ( v216 >= v213 )\n              v207 = *(_DWORD *)(v209 + 4 * v214 + 4) + *(_DWORD *)(v210 + 4 * v214 + 4);\n            LODWORD(v25) = v214;\n            v217 = *(_DWORD *)(v211 + 4 * v214 + 4) + *(_DWORD *)(v212 + 4 * v214 + 4);\n            LOBYTE(v25) = 3;\n            v220 = __OFSUB__(v217, v207);\n            v218 = v217 == v207;\n            v219 = v217 - v207 < 0;\n            if ( v217 <= v207 )\n              LODWORD(v25) = v208;\n            if ( v217 >= v207 )\n              v207 = v217;\n            if ( !((unsigned __int8)(v219 ^ v220) | v218) )\n              LODWORD(v127) = v324;\n            if ( v216 > v213 )\n              LODWORD(v127) = v324;\n            v214 = v215 + 1;\n            LODWORD(v208) = v324++ + 1;\n            v213 = v207;\n          }\n          while ( v215 + 1 < v334 );\n        }\n        else\n        {\n          v206 = v205;\n          v207 = -987654321;\n        }\n        v221 = *(_QWORD *)(*(_QWORD *)ptr + 8 * v206);\n        v222 = *(_QWORD *)(*(_QWORD *)v342 + 8 * v206);\n        v223 = *(_DWORD *)(v222 + 8);\n        v224 = *(_DWORD *)(v221 + 16) + *(_DWORD *)(v222 + 16);\n        v225 = 5;\n        v228 = __OFSUB__(v224, v207);\n        v226 = v224 == v207;\n        v227 = v224 - v207 < 0;\n        if ( v224 <= v207 )\n          v225 = v25;\n        LODWORD(v334) = v356 - 1;\n        if ( v224 >= v207 )\n          v207 = v224;\n        if ( !((unsigned __int8)(v227 ^ v228) | v226) )\n          LODWORD(v127) = 1;\n        v229 = *(_DWORD *)(v221 + 8) + v223;\n        if ( v229 > v207 )\n        {\n          LODWORD(v127) = *v327;\n          v225 = 8;\n          v207 = v229;\n        }\n        LOBYTE(v328) = v225;\n        v230 = v341 ^ 9;\n        v231 = v340 ^ 4;\n        free(*((void **)ptr + 4));\n        free(*((void **)ptr + 5));\n        free(*((void **)ptr + 6));\n        free(*((void **)ptr + 7));\n        free(*(void **)ptr);\n        free(*((void **)ptr + 1));\n        free(*((void **)ptr + 2));\n        free(*((void **)ptr + 3));\n        free(ptr);\n        free(*((void **)v342 + 4));\n        free(*((void **)v342 + 5));\n        free(*((void **)v342 + 6));\n        free(*((void **)v342 + 7));\n        free(*(void **)v342);\n        free(*((void **)v342 + 1));\n        free(*((void **)v342 + 2));\n        free(*((void **)v342 + 3));\n        free(v342);\n        sub_415B40((unsigned int)v207, v327, v232);\n        v233 = (char)v328;\n        v234 = v325;\n        v12 = (signed int *)v338;\n        *((_DWORD *)v338 + v234) = v127;\n        v11 = v333;\n        *((_BYTE *)v333 + v234) = v233;\n        if ( v230 | v231 )\n          a5 = _mm_cvtsi32_si128(v343);\n        v343 = _mm_cvtsi128_si32(a5);\n        a5 = _mm_load_si128((const __m128i *)&xmmword_440150);\n        v235 = v366;\n        v236 = v337;\n        v237 = v353;\n        v238 = v334;\n        if ( v233 != 5 )\n        {\n          if ( v325 - v353 > 1 || v325 - v353 == 1 && (_BYTE)v340 == 4 )\n          {\n            v239 = v365;\n            *((_DWORD *)v344 + v365) = v353;\n            *((_DWORD *)v345 + v239) = v325;\n            v238 = v356;\n          }\n          if ( v233 == 8 )\n          {\n            if ( v329 < v325 )\n              goto LABEL_256;\n            v240 = v236 + 1 - v234;\n            v241 = v322;\n            if ( v240 < 8 )\n              goto LABEL_238;\n            v242 = (unsigned __int64)&v12[v234];\n            v243 = v236;\n            v244 = (unsigned __int64)&v354[v236];\n            v245 = v242 < (unsigned __int64)&v355[v243];\n            v246 = (unsigned __int64)&v11[v234] < v244;\n            v247 = v242 < v363;\n            v248 = v244 > (unsigned __int64)v327;\n            if ( v246 && v245 || v248 && v247 || &v355[v243] > (_BYTE *)v327 && (unsigned __int64)&v11[v234] < v363 )\n            {\nLABEL_237:\n              v236 = v337;\nLABEL_238:\n              v256 = v234 - 1;\n              v257 = v327;\n              do\n              {\n                v12[v256 + 1] = *v257;\n                v11[v256++ + 1] = 8;\n              }\n              while ( v256 < v236 );\n              goto LABEL_271;\n            }\n            v249 = v240 & 0xFFFFFFFFFFFFFFF8LL;\n            v250 = ((v240 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n            v251 = ((_BYTE)v250 + 1) & 1;\n            if ( (v240 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n            {\n              v15 = 0LL;\n              if ( !v251 )\n                goto LABEL_235;\n            }\n            else\n            {\n              a5 = _mm_shuffle_epi32(_mm_cvtsi32_si128(*v327), 0);\n              v252 = (__int64)&v358[v234];\n              v253 = (__int64)&v357[v234];\n              v254 = v251 - 1 - v250;\n              v15 = 0LL;\n              do\n              {\n                _mm_storeu_si128((__m128i *)(v253 + 4 * v15 - 48), a5);\n                _mm_storeu_si128((__m128i *)(v253 + 4 * v15 - 32), a5);\n                *(_DWORD *)(v252 + v15 - 12) = 134744072;\n                *(_DWORD *)(v252 + v15 - 8) = 134744072;\n                _mm_storeu_si128((__m128i *)(v253 + 4 * v15 - 16), a5);\n                _mm_storeu_si128((__m128i *)(v253 + 4 * v15), a5);\n                *(_DWORD *)(v252 + v15 - 4) = 134744072;\n                *(_DWORD *)(v252 + v15) = 134744072;\n                v15 += 16LL;\n                v254 += 2LL;\n              }\n              while ( v254 );\n              if ( !v251 )\n                goto LABEL_235;\n            }\n            v255 = v234 + v15;\n            a5 = _mm_shuffle_epi32(_mm_cvtsi32_si128(*v327), 0);\n            _mm_storeu_si128((__m128i *)&v12[v255], a5);\n            _mm_storeu_si128((__m128i *)&v12[v255 + 4], a5);\n            *(_DWORD *)&v11[v255] = 134744072;\n            *(_DWORD *)&v11[v255 + 4] = 134744072;\nLABEL_235:\n            if ( v240 == v249 )\n              goto LABEL_271;\n            v234 += v249;\n            goto LABEL_237;\n          }\n        }\n        if ( v352 > 1 || v352 == 1 && (_BYTE)v341 == 9 )\n        {\n          v265 = (signed int)v238++;\n          v266 = v325;\n          *((_DWORD *)v344 + v265 + 1) = v325;\n          *((_DWORD *)v345 + v265 + 1) = v329;\n          if ( v266 < v237 )\n          {\nLABEL_256:\n            v241 = v322;\n            goto LABEL_271;\n          }\n        }\n        else if ( v325 < v237 )\n        {\n          goto LABEL_256;\n        }\n        if ( v233 != 5 )\n          goto LABEL_256;\n        v258 = v235;\n        if ( v234 <= v235 )\n          v258 = v234;\n        v259 = v234 + 1 - v258;\n        v241 = v322;\n        if ( v259 < 8 )\n          goto LABEL_269;\n        v260 = v235;\n        if ( v234 <= v235 )\n          v260 = v234;\n        if ( &v364[-~v260] < (signed int *)&v355[v234] && &v11[v260] < (_BYTE *)&v354[v234] )\n          goto LABEL_269;\n        v261 = v259 & 0xFFFFFFFFFFFFFFF8LL;\n        v262 = ((v259 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n        v263 = ((_BYTE)v262 + 1) & 3;\n        if ( (v259 & 0xFFFFFFFFFFFFFFF8LL) - 8 < 0x18 )\n        {\n          v264 = 0LL;\n          if ( !v263 )\n            goto LABEL_267;\nLABEL_265:\n          v271 = v234 - 3 - v264;\n          v272 = -v263;\n          do\n          {\n            _mm_storeu_si128((__m128i *)&v12[v271], a5);\n            _mm_storeu_si128((__m128i *)&v12[v271 - 4], a5);\n            *(_DWORD *)&v11[v271] = 84215045;\n            *(_DWORD *)&v11[v271 - 4] = 84215045;\n            v271 -= 8LL;\n            ++v272;\n          }\n          while ( v272 );\n          goto LABEL_267;\n        }\n        v267 = (__int64)&v362[v234];\n        v268 = (__int64)&v361[v234];\n        v269 = v263 - 1 - v262;\n        v270 = 0LL;\n        do\n        {\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270), a5);\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 16), a5);\n          *(_DWORD *)(v267 + v270) = 84215045;\n          *(_DWORD *)(v267 + v270 - 4) = 84215045;\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 32), a5);\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 48), a5);\n          *(_DWORD *)(v267 + v270 - 8) = 84215045;\n          *(_DWORD *)(v267 + v270 - 12) = 84215045;\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 64), a5);\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 80), a5);\n          *(_DWORD *)(v267 + v270 - 16) = 84215045;\n          *(_DWORD *)(v267 + v270 - 20) = 84215045;\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 96), a5);\n          _mm_storeu_si128((__m128i *)(v268 + 4 * v270 - 112), a5);\n          *(_DWORD *)(v267 + v270 - 24) = 84215045;\n          *(_DWORD *)(v267 + v270 - 28) = 84215045;\n          v270 -= 32LL;\n          v269 += 4LL;\n        }\n        while ( v269 );\n        v264 = -v270;\n        if ( v263 )\n          goto LABEL_265;\nLABEL_267:\n        if ( v259 == v261 )\n          goto LABEL_271;\n        v234 -= v261;\nLABEL_269:\n        v273 = v234 + 1;\n        do\n        {\n          v12[v273 - 1] = 1;\n          v11[v273-- - 1] = 5;\n        }\n        while ( v273 > v235 );\nLABEL_271:\n        v14 = v238;\n        if ( (v238 & 0x80000000) == 0 )\n          continue;\n        v274 = v359;\n        v275 = (unsigned int)(v359 + 6);\n        if ( (signed int)v359 >= 2 )\n        {\n          v276 = 1LL;\n          while ( 1 )\n          {\n            v277 = v11[v276];\n            if ( v277 != 1 )\n            {\n              if ( v277 == 5 )\n              {\n                v278 = v276 + 1;\n                if ( v11[v276 + 1] == 1 )\n                  v275 = (unsigned int)(v275 + v12[v276 + 1] - 1);\n              }\n              else\n              {\n                v278 = v276 + 1;\n              }\n              goto LABEL_284;\n            }\n            v278 = v276 + 1;\n            v279 = v11[v276 + 1];\n            if ( v279 == 8 )\n              break;\n            if ( v279 == 1 )\n            {\n              v280 = v275 + v12[v276 + 1] - 1;\nLABEL_283:\n              v275 = (unsigned int)(v280 - v12[v276]);\n            }\nLABEL_284:\n            v276 = v278;\n            if ( v278 == (unsigned int)v359 )\n              goto LABEL_285;\n          }\n          v280 = *v327 + v275;\n          goto LABEL_283;\n        }\nLABEL_285:\n        if ( v11[1] == 1 )\n          v275 = (unsigned int)(v275 + v12[1] - 1);\n        if ( v11[v346] == 1 )\n          v275 = *v327 + (unsigned int)v275 - v12[v346];\n        v281 = (unsigned int *)&v323;\n        sub_41FF70(v275, &v323);\n        **(_BYTE **)(v323 + 8) = 4;\n        v282 = v323;\n        **(_DWORD **)(v323 + 16) = 0;\n        **(_DWORD **)(v282 + 24) = 0;\n        *(_BYTE *)(*(_QWORD *)(v282 + 8) + 1LL) = 5;\n        v283 = v323;\n        *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4LL) = 0;\n        *(_DWORD *)(*(_QWORD *)(v283 + 24) + 4LL) = 0;\n        if ( (signed int)v274 <= 0 )\n        {\n          LODWORD(v286) = 2;\n          v288 = v338;\n        }\n        else\n        {\n          v284 = v274;\n          v285 = v351;\n          LODWORD(v286) = 2;\n          v287 = 1LL;\n          v288 = v338;\n          v289 = v333;\n          v331 = v284;\n          do\n          {\n            switch ( v289[v287] )\n            {\n              case 1:\n                v290 = *(_QWORD *)(v323 + 8);\n                if ( *(_BYTE *)(v290 + (signed int)v286 - 1) == 5 )\n                {\n                  *(_BYTE *)(v290 + (signed int)v286) = 6;\n                  v291 = v323;\n                  v292 = *(_QWORD *)(v323 + 16);\n                  *(_DWORD *)(v292 + 4LL * (signed int)v286) = 0;\n                  *(_DWORD *)(*(_QWORD *)(v291 + 24) + 4LL * (signed int)v286) = 0;\n                  v293 = *(_QWORD *)(v241 + 208);\n                  v294 = v241;\n                  v295 = &v288[v287];\n                  v296 = *(unsigned int *)(v294 + 304);\n                  v297 = sub_415A90(v288, v281, v292, (signed int)v288[v287]);\n                  v288 = v338;\n                  v298 = v297 + 1000LL;\n                  v299 = *((signed int *)v338 + v287);\n                  if ( v298 > *(signed int *)(*(_QWORD *)(v294 + 368) + 4 * v299) || (signed int)v299 < 2 )\n                  {\n                    LODWORD(v286) = v286 + 1;\n                    v289 = v333;\n                  }\n                  else\n                  {\n                    v300 = (signed int)v286 + 1;\n                    v301 = 1;\n                    v302 = v323;\n                    v289 = v333;\n                    do\n                    {\n                      *(_BYTE *)(*(_QWORD *)(v302 + 8) + v300) = 2;\n                      v302 = v323;\n                      *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v300) = v301;\n                      v281 = *(unsigned int **)(v302 + 24);\n                      v281[v300++] = 0;\n                      ++v301;\n                    }\n                    while ( v301 < *v295 );\n                    LODWORD(v286) = v301 + v286;\n                  }\n                  v284 = v331;\n                }\n                else\n                {\n                  v295 = &v288[v287];\n                }\n                v286 = (signed int)v286;\n                *(_BYTE *)(*(_QWORD *)(v323 + 8) + v286) = 1;\n                v309 = v323;\n                v310 = *(_QWORD *)(v323 + 16);\n                *(_DWORD *)(v310 + 4 * v286) = *v295;\n                *(_DWORD *)(*(_QWORD *)(v309 + 24) + 4 * v286) = v287;\n                LODWORD(v286) = v286 + 1;\n                if ( v287 < v346 )\n                {\n                  v311 = (unsigned int)(v287 + 1);\n                  if ( v289[v311] == 1 )\n                  {\n                    v310 = (unsigned int)*v295;\n                    v281 = (unsigned int *)(unsigned int)(v288[v311] - v310);\n                    if ( (signed int)v281 >= 2 )\n                    {\n                      v310 = (unsigned int)(v310 + 1);\n                      if ( (signed int)v310 < v288[v311] )\n                      {\n                        v286 = (signed int)v286;\n                        do\n                        {\n                          *(_BYTE *)(*(_QWORD *)(v309 + 8) + v286) = 2;\n                          v309 = v323;\n                          *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v286) = v310;\n                          v281 = *(unsigned int **)(v309 + 24);\n                          v281[v286++] = 0;\n                          v310 = (unsigned int)(v310 + 1);\n                        }\n                        while ( (signed int)v310 < v288[v311] );\n                      }\n                    }\n                  }\n                }\n                if ( v287 != v284 && v289[(unsigned int)(v287 + 1)] != 8 )\n                {\n                  v241 = v322;\n                }\n                else\n                {\n                  v312 = (signed int)v288[v287 - 1];\n                  v313 = _mm_cvtsi32_si128(*(_DWORD *)(*(_QWORD *)(v322 + 216) + 4 * v312));\n                  v314 = sub_415A90(v288, v281, v310, v312);\n                  v288 = v338;\n                  if ( v314 + 1000LL > *(signed int *)(*(_QWORD *)(v322 + 376) + 4LL * *((signed int *)v338 + v287 - 1))\n                    || (v315 = *v295, v281 = v327, *v295 >= (signed int)*v327) )\n                  {\n                    v289 = v333;\n                    v241 = v322;\n                  }\n                  else\n                  {\n                    v286 = (signed int)v286;\n                    v316 = v323;\n                    v289 = v333;\n                    v241 = v322;\n                    do\n                    {\n                      ++v315;\n                      *(_BYTE *)(*(_QWORD *)(v316 + 8) + v286) = 2;\n                      v316 = v323;\n                      *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v286) = v315;\n                      *(_DWORD *)(*(_QWORD *)(v316 + 24) + 4 * v286++) = 0;\n                    }\n                    while ( v315 < (signed int)*v281 );\n                  }\n                  v286 = (signed int)v286;\n                  *(_BYTE *)(*(_QWORD *)(v323 + 8) + v286) = 7;\n                  v317 = v323;\n                  *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v286) = 0;\n                  *(_DWORD *)(*(_QWORD *)(v317 + 24) + 4 * v286) = 0;\n                  *(_BYTE *)(*(_QWORD *)(v317 + 8) + v286 + 1) = 8;\n                  v318 = v323;\n                  *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v286 + 4) = 0;\n                  *(_DWORD *)(*(_QWORD *)(v318 + 24) + 4 * v286 + 4) = 0;\n                  LODWORD(v286) = v286 + 2;\n                }\n                break;\n              case 3:\n                v303 = (signed int)v286;\n                *(_BYTE *)(*(_QWORD *)(v323 + 8) + v303) = 3;\n                v307 = v323;\n                v281 = *(unsigned int **)(v323 + 16);\n                v281[v303] = v288[v287];\n                v305 = *(_QWORD *)(v307 + 24);\n                goto LABEL_302;\n              case 5:\n                v303 = (signed int)v286;\n                *(_BYTE *)(*(_QWORD *)(v323 + 8) + v303) = 5;\n                v304 = v323;\n                *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v303) = 0;\n                v305 = *(_QWORD *)(v304 + 24);\nLABEL_302:\n                *(_DWORD *)(v305 + 4 * v303) = v287;\n                LODWORD(v286) = v286 + 1;\n                break;\n              case 8:\n                v286 = (signed int)v286;\n                *(_BYTE *)(*(_QWORD *)(v323 + 8) + v286) = 8;\n                v308 = v323;\n                *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v286) = 0;\n                *(_DWORD *)(*(_QWORD *)(v308 + 24) + 4 * v286) = v287;\n                LODWORD(v286) = v286 + 1;\n                break;\n              default:\n                v306 = sub_408740((unsigned int)(char)v289[v287]);\n                sub_4325B0(\"Bogus state %s\", v306);\n                return result;\n            }\n            ++v287;\n          }\n          while ( v287 != v285 );\n          v283 = v323;\n        }\n        v319 = (signed int)v286;\n        *(_BYTE *)(*(_QWORD *)(v283 + 8) + v319) = 9;\n        v320 = v323;\n        *(_DWORD *)(*(_QWORD *)(v323 + 16) + 4 * v319) = 0;\n        *(_DWORD *)(*(_QWORD *)(v320 + 24) + 4 * v319) = 0;\n        *(_DWORD *)v320 = v286 + 1;\n        *v360 = v320;\n        free(v288);\n        free(v333);\n        free(v344);\n        free(v345);\n        return *(float *)&v343;\n      default:\n        v163 = sub_408740(v341);\n        sub_4325B0(\"you can't init get_wee_midpt with a %s\\n\", v163);\n        return result;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x404cf0L", 
            "funcEndAddr": "0x406b58L", 
            "funcName": "sub_404CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406B60(__int64 a1, int a2, __int64 a3, void ***a4)\n{\n  __int64 v4; // rbx\n  int v5; // er14\n  signed __int64 v6; // rsi\n  int v7; // ebp\n  __int64 v8; // rax\n  _QWORD *v9; // r11\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  __int64 v12; // rdi\n  signed __int64 v13; // rbp\n  int v14; // ebp\n  _DWORD *v15; // rcx\n  __int64 v16; // rax\n  signed __int64 v17; // rcx\n  unsigned __int64 v18; // rdi\n  _DWORD *v19; // r9\n  _DWORD *v20; // r12\n  _DWORD *v21; // r14\n  signed int v22; // ecx\n  signed int v23; // edx\n  __int64 *v24; // rcx\n  signed __int64 v25; // r10\n  unsigned __int64 v26; // r15\n  signed __int64 v27; // r13\n  _QWORD *v28; // rcx\n  int v29; // er8\n  int v30; // edx\n  int v31; // edx\n  int v32; // ecx\n  signed __int64 v33; // rdx\n  int *v34; // rbp\n  int v35; // er8\n  int v36; // ecx\n  int v37; // esi\n  int v38; // esi\n  int v39; // esi\n  int v40; // esi\n  __int64 v41; // rsi\n  int v42; // er11\n  int v43; // ecx\n  int v44; // ecx\n  int v45; // ecx\n  int v46; // ecx\n  int v47; // ecx\n  int v48; // esi\n  int v49; // edx\n  int v50; // ecx\n  int *v51; // rbp\n  int v52; // edx\n  int v53; // ecx\n  int v54; // esi\n  int v55; // ecx\n  int v56; // esi\n  _DWORD *v57; // r8\n  int *v58; // r10\n  int v59; // er11\n  int v60; // ecx\n  int v61; // edx\n  __int64 v62; // rbp\n  int v63; // eax\n  int v64; // eax\n  int v65; // edx\n  int v66; // er11\n  int v67; // eax\n  int v68; // ecx\n  unsigned int v69; // ebx\n  signed __int64 *v71; // [rsp+8h] [rbp-100h]\n  __int64 *v72; // [rsp+10h] [rbp-F8h]\n  __int64 *v73; // [rsp+18h] [rbp-F0h]\n  signed __int64 v74; // [rsp+20h] [rbp-E8h]\n  signed int v75; // [rsp+2Ch] [rbp-DCh]\n  signed __int64 v76; // [rsp+30h] [rbp-D8h]\n  void **ptr; // [rsp+38h] [rbp-D0h]\n  int v78; // [rsp+40h] [rbp-C8h]\n  _QWORD *v79; // [rsp+48h] [rbp-C0h]\n  __int64 v80; // [rsp+58h] [rbp-B0h]\n  __int64 v81; // [rsp+60h] [rbp-A8h]\n  __int64 v82; // [rsp+68h] [rbp-A0h]\n  __int64 v83; // [rsp+70h] [rbp-98h]\n  __int64 v84; // [rsp+78h] [rbp-90h]\n  __int64 v85; // [rsp+80h] [rbp-88h]\n  signed __int64 v86; // [rsp+88h] [rbp-80h]\n  __int64 v87; // [rsp+90h] [rbp-78h]\n  void ***v88; // [rsp+98h] [rbp-70h]\n  __int64 v89; // [rsp+A0h] [rbp-68h]\n  __int64 v90; // [rsp+A8h] [rbp-60h]\n  __int64 v91; // [rsp+B0h] [rbp-58h]\n  __int64 v92; // [rsp+B8h] [rbp-50h]\n  __int64 v93; // [rsp+C0h] [rbp-48h]\n  __int64 v94; // [rsp+C8h] [rbp-40h]\n  _DWORD *v95; // [rsp+D0h] [rbp-38h]\n\n  v88 = a4;\n  v4 = a3;\n  v5 = a2;\n  v89 = a1;\n  v6 = *(unsigned int *)(a3 + 136);\n  v7 = 0;\n  v8 = sub_402A00(v5, v6, 0, 0);\n  v9 = *(_QWORD **)(v8 + 8);\n  v10 = *(_QWORD *)(v8 + 16);\n  v71 = *(signed __int64 **)(v8 + 16);\n  ptr = (void **)v8;\n  v72 = *(__int64 **)(v8 + 24);\n  v73 = *(__int64 **)v8;\n  v11 = **(_QWORD **)v8;\n  *(_DWORD *)(v11 + 16) = 0;\n  *(_DWORD *)v11 = *(_DWORD *)(v4 + 336);\n  *(_DWORD *)(v11 + 12) = -987654321;\n  *(_QWORD *)(v11 + 4) = -4241943005140773041LL;\n  if ( *(_DWORD *)(v4 + 136) >= 0 )\n  {\n    v10 = *v72;\n    v6 = *v71;\n    v12 = *v9;\n    v13 = -1LL;\n    do\n    {\n      *(_DWORD *)(v10 + 4 * v13 + 4) = -987654321;\n      *(_DWORD *)(v6 + 4 * v13 + 4) = -987654321;\n      *(_DWORD *)(v12 + 4 * v13++ + 4) = -987654321;\n    }\n    while ( v13 < *(signed int *)(v4 + 136) );\n    v7 = *(_DWORD *)(v11 + 16);\n  }\n  v14 = *(_DWORD *)(v4 + 340) + v7;\n  v15 = (_DWORD *)v73[1];\n  v15[4] = v14;\n  *v15 = *(_DWORD *)(v4 + 336) + v14;\n  *(_DWORD *)(v11 + 12) = -987654321;\n  *(_QWORD *)(v11 + 4) = -4241943005140773041LL;\n  if ( *(_DWORD *)(v4 + 136) >= 0 )\n  {\n    v16 = *v72;\n    v17 = *v71;\n    v10 = *v9;\n    v6 = -1LL;\n    do\n    {\n      *(_DWORD *)(v16 + 4 * v6 + 4) = -987654321;\n      *(_DWORD *)(v17 + 4 * v6 + 4) = -987654321;\n      *(_DWORD *)(v10 + 4 * v6++ + 4) = -987654321;\n    }\n    while ( v6 < *(signed int *)(v4 + 136) );\n  }\n  v78 = v5;\n  if ( v5 >= 2 )\n  {\n    v90 = (unsigned int)(v5 + 1);\n    v18 = 2LL;\n    v79 = v9;\n    do\n    {\n      v19 = (_DWORD *)v72[v18];\n      *v19 = -987654321;\n      v20 = (_DWORD *)v71[v18];\n      *v20 = -987654321;\n      v21 = (_DWORD *)v9[v18];\n      *v21 = -987654321;\n      if ( v18 >= 3 )\n      {\n        v22 = *(char *)(v89 + v18 - 2);\n        v75 = 64;\n        if ( v22 <= 3 )\n        {\n          v23 = *(char *)(v89 + v18 - 1);\n          if ( v23 <= 3 )\n          {\n            v6 = (unsigned int)*(char *)(v89 + v18);\n            if ( (signed int)v6 <= 3 )\n              v75 = v6 + 16 * v22 + 4 * v23;\n          }\n        }\n      }\n      if ( *(_DWORD *)(v4 + 136) > 0 )\n      {\n        v87 = v9[v18 - 2];\n        v24 = *(__int64 **)(v4 + 312);\n        v85 = *(_QWORD *)(v4 + 368);\n        v84 = *v24;\n        v83 = v24[1];\n        v86 = v71[v18 - 2];\n        v82 = v24[3];\n        v95 = (_DWORD *)v73[v18 - 2];\n        v94 = v72[v18 - 2];\n        v81 = v24[5];\n        v93 = v24[2];\n        v92 = v24[6];\n        v91 = *(_QWORD *)(v4 + 312);\n        v80 = v24[4];\n        v76 = (signed __int64)(v20 + 1);\n        v74 = (signed __int64)(v21 + 1);\n        v25 = 0LL;\n        v26 = 0LL;\n        v27 = 1LL;\n        do\n        {\n          if ( v18 <= 2 )\n          {\n            v34 = (int *)(v74 + v26);\n            v35 = *(_DWORD *)(v74 + v26);\n            v33 = v25;\n          }\n          else\n          {\n            v28 = *(_QWORD **)(v4 + 312);\n            v29 = *(_DWORD *)(v9[v18 - 3] + v26) + *(_DWORD *)(*v28 + v26);\n            v21[v26 / 4 + 1] = v29;\n            v30 = *(_DWORD *)(v71[v18 - 3] + v26) + *(_DWORD *)(v28[3] + v26);\n            if ( v30 > v29 )\n            {\n              *(_DWORD *)(v74 + v26) = v30;\n              v29 = v30;\n            }\n            v31 = *(_DWORD *)v73[v18 - 3] + *(_DWORD *)(*(_QWORD *)(v4 + 368) + v26 + 4);\n            if ( v31 > v29 )\n            {\n              *(_DWORD *)(v74 + v26) = v31;\n              v29 = v31;\n            }\n            v32 = *(_DWORD *)(v72[v18 - 3] + v26) + *(_DWORD *)(v28[5] + v26);\n            if ( v32 > v29 )\n            {\n              *(_DWORD *)(v74 + v26) = v32;\n              v29 = v32;\n            }\n            v33 = v27 - 1;\n            v34 = &v21[v27];\n            v35 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 424) + 8LL * v75) + v26 + 4) + v29;\n            *(_DWORD *)(v74 + v26) = v35;\n          }\n          v36 = *(_DWORD *)(v4 + 440);\n          v37 = v36 + *(_DWORD *)(v87 + 4 * v33) + *(_DWORD *)(v84 + 4 * v33);\n          if ( v37 > v35 )\n          {\n            *v34 = v37;\n            v36 = *(_DWORD *)(v4 + 440);\n            v35 = v37;\n          }\n          v38 = v36 + *(_DWORD *)(v86 + 4 * v33) + *(_DWORD *)(v82 + 4 * v33);\n          if ( v38 > v35 )\n          {\n            *v34 = v38;\n            v36 = *(_DWORD *)(v4 + 440);\n            v35 = v38;\n          }\n          v39 = v36 + *v95 + *(_DWORD *)(v85 + v26 + 4);\n          if ( v39 > v35 )\n          {\n            *v34 = v39;\n            v36 = *(_DWORD *)(v4 + 440);\n            v35 = v39;\n          }\n          v40 = v36 + *(_DWORD *)(v94 + 4 * v33) + *(_DWORD *)(v81 + 4 * v33);\n          if ( v40 > v35 )\n          {\n            *v34 = v40;\n            v35 = v40;\n          }\n          if ( v18 >= 4 )\n          {\n            v41 = v9[v18 - 4];\n            v42 = *(_DWORD *)(v4 + 444);\n            v43 = v42 + *(_DWORD *)(v41 + 4 * v33) + *(_DWORD *)(v84 + 4 * v33);\n            if ( v43 > v35 )\n            {\n              *v34 = v43;\n              v42 = *(_DWORD *)(v4 + 444);\n              v35 = v43;\n            }\n            v44 = v42 + *(_DWORD *)(v71[v18 - 4] + 4 * v33) + *(_DWORD *)(v82 + 4 * v33);\n            if ( v44 > v35 )\n            {\n              *v34 = v44;\n              v42 = *(_DWORD *)(v4 + 444);\n              v35 = v44;\n            }\n            v45 = v42 + *(_DWORD *)v73[v18 - 4] + *(_DWORD *)(v85 + v26 + 4);\n            if ( v45 > v35 )\n            {\n              *v34 = v45;\n              v42 = *(_DWORD *)(v4 + 444);\n              v35 = v45;\n            }\n            v46 = v42 + *(_DWORD *)(v72[v18 - 4] + 4 * v33) + *(_DWORD *)(v81 + 4 * v33);\n            v9 = v79;\n            if ( v46 > v35 )\n              *v34 = v46;\n          }\n          v47 = v21[v33] + *(_DWORD *)(v93 + 4 * v33);\n          v19[v26 / 4 + 1] = v47;\n          v48 = v19[v33] + *(_DWORD *)(v92 + 4 * v33);\n          if ( v48 < v47 )\n            v48 = v47;\n          v19[v26 / 4 + 1] = v48;\n          if ( v18 <= 2 )\n          {\n            v51 = (int *)(v76 + v26);\n            v52 = *(_DWORD *)(v76 + v26);\n          }\n          else\n          {\n            v49 = *(_DWORD *)(v9[v18 - 3] + v26 + 4) + *(_DWORD *)(*(_QWORD *)(v91 + 8) + v26 + 4);\n            v20[v26 / 4 + 1] = v49;\n            v50 = *(_DWORD *)(v71[v18 - 3] + v26 + 4) + *(_DWORD *)(*(_QWORD *)(v91 + 32) + v26 + 4);\n            if ( v50 > v49 )\n            {\n              *(_DWORD *)(v76 + v26) = v50;\n              v49 = v50;\n            }\n            v51 = &v20[v27];\n            v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 432) + 8LL * v75) + v26 + 4) + v49;\n            *(_DWORD *)(v76 + v26) = v52;\n          }\n          v53 = *(_DWORD *)(v4 + 440);\n          v54 = v53 + *(_DWORD *)(v87 + v26 + 4) + *(_DWORD *)(v83 + v26 + 4);\n          if ( v54 > v52 )\n          {\n            *v51 = v54;\n            v53 = *(_DWORD *)(v4 + 440);\n            v52 = v54;\n          }\n          v6 = (unsigned int)(v53 + *(_DWORD *)(v86 + v26 + 4) + *(_DWORD *)(v80 + v26 + 4));\n          if ( (signed int)v6 > v52 )\n          {\n            *v51 = v6;\n            v52 = v6;\n          }\n          if ( v18 >= 5 )\n          {\n            v55 = *(_DWORD *)(v4 + 444);\n            v56 = v55 + *(_DWORD *)(v9[v18 - 4] + v26 + 4) + *(_DWORD *)(v83 + v26 + 4);\n            if ( v56 > v52 )\n            {\n              *v51 = v56;\n              v55 = *(_DWORD *)(v4 + 444);\n              v52 = v56;\n            }\n            v6 = (unsigned int)(v55 + *(_DWORD *)(v71[v18 - 4] + v26 + 4) + *(_DWORD *)(v80 + v26 + 4));\n            if ( (signed int)v6 > v52 )\n              *v51 = v6;\n          }\n          ++v27;\n          v26 += 4LL;\n          ++v25;\n        }\n        while ( v25 < *(signed int *)(v4 + 136) );\n      }\n      v57 = (_DWORD *)v73[v18 - 1];\n      v58 = (int *)v73[v18];\n      v59 = v57[4] + *(_DWORD *)(v4 + 340);\n      v58[4] = v59;\n      v60 = v19[*(signed int *)(v4 + 136)];\n      v58[1] = v60;\n      v61 = *(_DWORD *)(v4 + 136);\n      if ( v61 > 0 )\n      {\n        v62 = *(_QWORD *)(v4 + 376);\n        v6 = 0LL;\n        do\n        {\n          v63 = v21[v6 + 1] + *(_DWORD *)(v62 + 4 * v6 + 4);\n          if ( v63 > v60 )\n          {\n            v58[1] = v63;\n            v61 = *(_DWORD *)(v4 + 136);\n            v60 = v63;\n          }\n          ++v6;\n        }\n        while ( v6 < v61 );\n      }\n      v64 = v57[3] + *(_DWORD *)(v4 + 364);\n      v58[3] = v64;\n      v65 = v60 + *(_DWORD *)(v4 + 348);\n      if ( v65 < v64 )\n        v65 = v64;\n      v58[3] = v65;\n      v66 = *(_DWORD *)(v4 + 336) + v59;\n      *v58 = v66;\n      v10 = (unsigned int)(*(_DWORD *)(v4 + 360) + v65);\n      if ( (signed int)v10 < v66 )\n        v10 = (unsigned int)v66;\n      *v58 = v10;\n      v67 = v57[2] + *(_DWORD *)(v4 + 356);\n      v58[2] = v67;\n      v68 = *(_DWORD *)(v4 + 344) + v60;\n      if ( v68 < v67 )\n        v68 = v67;\n      v58[2] = v68;\n      ++v18;\n      v9 = v79;\n    }\n    while ( v18 != v90 );\n  }\n  v69 = *(_DWORD *)(v73[v78] + 8) + *(_DWORD *)(v4 + 352);\n  if ( v88 )\n  {\n    *v88 = ptr;\n  }\n  else\n  {\n    free(ptr[4]);\n    free(ptr[5]);\n    free(ptr[6]);\n    free(ptr[7]);\n    free(*ptr);\n    free(ptr[1]);\n    free(ptr[2]);\n    free(ptr[3]);\n    free(ptr);\n  }\n  return sub_415B40(v69, v6, v10);\n}\n", 
            "funcStartAddr": "0x406b60L", 
            "funcEndAddr": "0x40734dL", 
            "funcName": "sub_406B60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407350(__int64 a1, __int64 a2, float a3)\n{\n  __int64 v3; // r14\n  __int64 v4; // r15\n  _QWORD *v5; // rbx\n  signed __int64 v6; // rbp\n  __int64 v7; // rax\n  bool v8; // zf\n  bool v9; // sf\n  signed __int64 v10; // rbp\n  signed __int64 v11; // rbx\n  int v12; // eax\n  __int64 *v13; // r13\n  signed __int64 v14; // r12\n  char v15; // cl\n  unsigned __int8 v16; // dl\n  __int64 v17; // r15\n  char v18; // al\n  __int64 v19; // rdi\n  __int64 v20; // rax\n  unsigned __int8 v21; // of\n  __int64 *v22; // rax\n  __int64 v23; // rbp\n  _QWORD *v24; // r12\n  __int64 v25; // rbx\n  _QWORD *v26; // r15\n  _QWORD *v27; // r13\n  _QWORD *v28; // rax\n  __int64 v29; // r8\n  signed __int64 v30; // r9\n  __int64 v31; // r10\n  __int64 v32; // rax\n  signed __int64 v33; // rcx\n  signed __int64 v34; // rax\n  __int64 v35; // rdx\n  void **v36; // r11\n  signed __int64 v37; // rcx\n  signed __int64 v38; // r10\n  signed __int64 v39; // rdi\n  signed int v40; // eax\n  signed int v41; // edx\n  int v42; // edx\n  __int64 v43; // rax\n  signed int v44; // eax\n  signed int v45; // edx\n  signed int v46; // eax\n  __int64 v47; // rdx\n  int v48; // eax\n  __int64 v49; // rdx\n  signed int v50; // eax\n  signed int v51; // edx\n  int v52; // edx\n  __int64 v53; // rax\n  float *v54; // rdx\n  __int64 v55; // rbx\n  __int64 v56; // rax\n  float v57; // xmm1_4\n  signed int v58; // esi\n  signed int v59; // eax\n  signed int v60; // edx\n  int v61; // edx\n  __int64 v62; // rax\n  __int64 v63; // rax\n  signed int v64; // edx\n  signed int v65; // ebx\n  int v66; // ebx\n  signed int v67; // eax\n  signed int v68; // edx\n  signed int v69; // eax\n  __int64 v70; // rdx\n  signed int v71; // eax\n  signed int v72; // edx\n  signed int v73; // eax\n  __int64 v74; // rdx\n  float *v75; // rdx\n  __int64 v76; // rbx\n  __int64 v77; // rax\n  float v78; // xmm1_4\n  signed int v79; // esi\n  __int64 v80; // rax\n  __int64 v81; // rbp\n  signed int v82; // eax\n  signed int v83; // edx\n  signed int v84; // eax\n  int v85; // edi\n  __int64 v86; // rsi\n  signed __int64 v87; // rdx\n  signed int v88; // ebx\n  signed int v89; // eax\n  int v90; // eax\n  __int64 v91; // rbx\n  int *v92; // rax\n  signed int v93; // edx\n  signed int v94; // esi\n  int v95; // esi\n  signed int v96; // eax\n  signed int v97; // edx\n  signed int v98; // eax\n  __int64 v99; // rax\n  signed int v100; // edx\n  int v101; // edx\n  void **v102; // r15\n  void *v103; // rbp\n  __int64 v104; // r14\n  void **v105; // rbx\n  __int64 v106; // rbx\n  signed __int64 v107; // rbp\n  __int64 v109; // [rsp+8h] [rbp-80h]\n  void *v110; // [rsp+10h] [rbp-78h]\n  _QWORD *v111; // [rsp+18h] [rbp-70h]\n  __int64 v112; // [rsp+20h] [rbp-68h]\n  __int64 v113; // [rsp+28h] [rbp-60h]\n  _QWORD *v114; // [rsp+30h] [rbp-58h]\n  _QWORD *v115; // [rsp+38h] [rbp-50h]\n  __int64 v116; // [rsp+40h] [rbp-48h]\n  void *v117; // [rsp+48h] [rbp-40h]\n  void *ptr; // [rsp+50h] [rbp-38h]\n\n  v3 = a2;\n  v4 = a1;\n  v5 = (_QWORD *)sub_4382F0(\"core_algorithms.c\", 2044LL, 8LL * *(signed int *)(a1 + 24) + 8);\n  v110 = (void *)sub_4382F0(\"core_algorithms.c\", 2045LL, 4LL * *(signed int *)(a1 + 24) + 4);\n  if ( *(_DWORD *)(a1 + 24) > 0 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = sub_4382F0(\"core_algorithms.c\", 2047LL, 4LL * dword_464000);\n      v5[v6 + 1] = v7;\n      a3 = 0.0;\n      sub_43C860(v7, (unsigned int)dword_464000);\n      ++v6;\n    }\n    while ( v6 < *(signed int *)(a1 + 24) );\n  }\n  v117 = v5;\n  *(_DWORD *)v110 = -971228160;\n  sub_43CBE0(*(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 28));\n  v8 = *(_DWORD *)(a1 + 24) == 0;\n  v9 = *(_DWORD *)(a1 + 24) < 0;\n  v113 = a1;\n  if ( !v9 && !v8 )\n  {\n    *(float *)&v112 = 1.0 / a3;\n    v10 = 1LL;\n    v11 = -9223372036854751231LL;\n    do\n    {\n      v12 = *(_DWORD *)(v4 + 28);\n      v13 = (__int64 *)((char *)v117 + 8 * v10);\n      if ( v12 > 0 )\n      {\n        v14 = 0LL;\n        do\n        {\n          v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v4 + 8 * v14) + v10 - 1);\n          v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v4 + 8 * v14) + v10 - 1) - 32;\n          if ( (v16 > 0x3Fu || !_bittest64(&v11, v16)) && v15 != 126 )\n          {\n            v17 = *v13;\n            v18 = (unsigned __int64)strchr(s, v15);\n            v19 = v17;\n            v4 = v113;\n            sub_4028B0(v19, (char)(v18 - (unsigned int)s), *(float *)(*(_QWORD *)(v113 + 16) + 4 * v14));\n            v12 = *(_DWORD *)(v113 + 28);\n          }\n          ++v14;\n        }\n        while ( v14 < v12 );\n      }\n      sub_43CA70(*v13, (unsigned int)dword_464000);\n      sub_43CBE0(*v13, (unsigned int)dword_464000);\n      *((_DWORD *)v110 + v10) = v112;\n      v20 = *(signed int *)(v4 + 24);\n      v21 = __OFSUB__(v10, v20);\n      v9 = v10++ - v20 < 0;\n    }\n    while ( v9 ^ v21 );\n  }\n  v22 = (__int64 *)sub_402A00(1, *(_DWORD *)(a2 + 136), 0, 0);\n  v23 = *v22;\n  v24 = (_QWORD *)v22[1];\n  v25 = v4;\n  v26 = (_QWORD *)v22[2];\n  ptr = v22;\n  v27 = (_QWORD *)v22[3];\n  v28 = sub_402EE0(*(_DWORD *)(v25 + 24) + 1, *(_DWORD *)(a2 + 136), &v109, &v111, &v115, &v114);\n  *(_DWORD *)(*(_QWORD *)v23 + 16LL) = 0;\n  *(_BYTE *)(*(_QWORD *)v109 + 4LL) = 4;\n  v31 = (__int64)v28;\n  **(_DWORD **)v23 = *(_DWORD *)(a2 + 336);\n  **(_BYTE **)v109 = 5;\n  v32 = *(_QWORD *)v23;\n  *(_DWORD *)(v32 + 12) = -987654321;\n  v33 = -4241943005140773041LL;\n  *(_QWORD *)(v32 + 4) = -4241943005140773041LL;\n  **(_DWORD **)(v31 + 32) = 0;\n  *(_BYTE *)(*(_QWORD *)v109 + 3LL) = 0;\n  *(_BYTE *)(*(_QWORD *)v109 + 2LL) = 0;\n  if ( *(_DWORD *)(a2 + 136) >= 0 )\n  {\n    v34 = -1LL;\n    do\n    {\n      *(_DWORD *)(*v27 + 4 * v34 + 4) = -987654321;\n      *(_DWORD *)(*v26 + 4 * v34 + 4) = -987654321;\n      *(_DWORD *)(*v24 + 4 * v34 + 4) = -987654321;\n      *(_BYTE *)(*v114 + v34 + 1) = 0;\n      *(_BYTE *)(*v115 + v34 + 1) = 0;\n      *(_BYTE *)(*v111 + v34 + 1) = 0;\n      v33 = *(signed int *)(a2 + 136);\n      ++v34;\n    }\n    while ( v34 < v33 );\n  }\n  v35 = *(unsigned int *)(v113 + 24);\n  v36 = (void **)v117;\n  if ( (signed int)v35 > 0 )\n  {\n    v30 = 1LL;\n    v116 = v31;\n    v112 = v23;\n    do\n    {\n      v37 = v30 & 1;\n      *(_DWORD *)v27[v37] = -987654321;\n      *(_DWORD *)v26[v37] = -987654321;\n      *(_DWORD *)v24[v37] = -987654321;\n      *(_BYTE *)v114[v30] = 0;\n      *(_BYTE *)v115[v30] = 0;\n      *(_BYTE *)v111[v30] = 0;\n      v38 = v30 & 1 ^ 1;\n      if ( *(_DWORD *)(v3 + 136) <= 0 )\n      {\n        v29 = v112 + 8 * v38;\n        v81 = v112;\n        v31 = v116;\n      }\n      else\n      {\n        v29 = v112 + 8 * v38;\n        v39 = 1LL;\n        do\n        {\n          *(_DWORD *)(v24[v37] + 4 * v39) = -987654321;\n          *(_BYTE *)(v111[v30] + v39) = 0;\n          v40 = *(_DWORD *)(v24[v38] + 4 * v39 - 4);\n          if ( v40 >= -987654320 )\n          {\n            v41 = *(_DWORD *)(**(_QWORD **)(v3 + 312) + 4 * v39 - 4);\n            if ( v41 >= -987654320 )\n            {\n              v42 = v40 + v41;\n              v43 = v24[v37];\n              if ( v42 > *(_DWORD *)(v43 + 4 * v39) )\n              {\n                *(_DWORD *)(v43 + 4 * v39) = v42;\n                *(_BYTE *)(v111[v30] + v39) = 1;\n              }\n            }\n          }\n          v44 = *(_DWORD *)(v26[v38] + 4 * v39 - 4);\n          if ( v44 >= -987654320 )\n          {\n            v45 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 24LL) + 4 * v39 - 4);\n            if ( v45 >= -987654320 )\n            {\n              v46 = (signed int)(float)((float)((float)v45 * *((float *)v110 + v30 - 1)) + (float)v44);\n              v47 = v24[v37];\n              if ( *(_DWORD *)(v47 + 4 * v39) < v46 )\n              {\n                *(_DWORD *)(v47 + 4 * v39) = v46;\n                *(_BYTE *)(v111[v30] + v39) = 3;\n              }\n            }\n          }\n          v48 = **(_DWORD **)v29 + *(_DWORD *)(*(_QWORD *)(v3 + 368) + 4 * v39);\n          v49 = v24[v37];\n          if ( v48 > *(_DWORD *)(v49 + 4 * v39) )\n          {\n            *(_DWORD *)(v49 + 4 * v39) = v48;\n            *(_BYTE *)(v111[v30] + v39) = 6;\n          }\n          v50 = *(_DWORD *)(v27[v38] + 4 * v39 - 4);\n          if ( v50 >= -987654320 )\n          {\n            v51 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 40LL) + 4 * v39 - 4);\n            if ( v51 >= -987654320 )\n            {\n              v52 = v50 + v51;\n              v53 = v24[v37];\n              if ( v52 > *(_DWORD *)(v53 + 4 * v39) )\n              {\n                *(_DWORD *)(v53 + 4 * v39) = v52;\n                *(_BYTE *)(v111[v30] + v39) = 2;\n              }\n            }\n          }\n          if ( dword_464000 > 0 )\n          {\n            v54 = (float *)v36[v30];\n            v55 = *(_QWORD *)(v3 + 320);\n            v56 = 0LL;\n            while ( 1 )\n            {\n              v57 = v54[v56];\n              v58 = *(_DWORD *)(*(_QWORD *)(v55 + 8 * v56) + 4 * v39);\n              if ( v57 > 0.0 && v58 == -987654321 )\n                break;\n              *(_DWORD *)(v24[v37] + 4 * v39) = (signed int)(float)((float)*(signed int *)(v24[v37] + 4 * v39)\n                                                                  + (float)(v57 * (float)v58));\n              if ( ++v56 >= dword_464000 )\n                goto LABEL_42;\n            }\n            *(_DWORD *)(v24[v37] + 4 * v39) = -987654321;\n          }\nLABEL_42:\n          *(_DWORD *)(v27[v37] + 4 * v39) = -987654321;\n          *(_BYTE *)(v114[v30] + v39) = 0;\n          v59 = *(_DWORD *)(v24[v37] + 4 * v39 - 4);\n          if ( v59 >= -987654320 )\n          {\n            v60 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 16LL) + 4 * v39 - 4);\n            if ( v60 >= -987654320 )\n            {\n              v61 = v59 + v60;\n              v62 = v27[v37];\n              if ( v61 > *(_DWORD *)(v62 + 4 * v39) )\n              {\n                *(_DWORD *)(v62 + 4 * v39) = v61;\n                *(_BYTE *)(v114[v30] + v39) = 1;\n              }\n            }\n          }\n          v63 = v27[v37];\n          v64 = *(_DWORD *)(v63 + 4 * v39 - 4);\n          if ( v64 >= -987654320 )\n          {\n            v65 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 48LL) + 4 * v39 - 4);\n            if ( v65 >= -987654320 )\n            {\n              v66 = v64 + v65;\n              if ( v66 > *(_DWORD *)(v63 + 4 * v39) )\n              {\n                *(_DWORD *)(v63 + 4 * v39) = v66;\n                *(_BYTE *)(v114[v30] + v39) = 2;\n              }\n            }\n          }\n          if ( v39 < *(signed int *)(v3 + 136) )\n          {\n            *(_DWORD *)(v26[v37] + 4 * v39) = -987654321;\n            *(_BYTE *)(v115[v30] + v39) = 0;\n            v67 = *(_DWORD *)(v24[v38] + 4 * v39);\n            if ( v67 >= -987654320 )\n            {\n              v68 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 8LL) + 4 * v39);\n              if ( v68 >= -987654320 )\n              {\n                v69 = (signed int)(float)((float)((float)v68 * *((float *)v110 + v30)) + (float)v67);\n                v70 = v26[v37];\n                if ( *(_DWORD *)(v70 + 4 * v39) < v69 )\n                {\n                  *(_DWORD *)(v70 + 4 * v39) = v69;\n                  *(_BYTE *)(v115[v30] + v39) = 1;\n                }\n              }\n            }\n            v71 = *(_DWORD *)(v26[v38] + 4 * v39);\n            if ( v71 >= -987654320 )\n            {\n              v72 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 312) + 32LL) + 4 * v39);\n              if ( v72 >= -987654320 )\n              {\n                v73 = (signed int)(float)((float)((float)((float)v72 * *((float *)v110 + v30 - 1))\n                                                * *((float *)v110 + v30))\n                                        + (float)v71);\n                v74 = v26[v37];\n                if ( *(_DWORD *)(v74 + 4 * v39) < v73 )\n                {\n                  *(_DWORD *)(v74 + 4 * v39) = v73;\n                  *(_BYTE *)(v115[v30] + v39) = 3;\n                }\n              }\n            }\n            if ( dword_464000 > 0 )\n            {\n              v75 = (float *)v36[v30];\n              v76 = *(_QWORD *)(v3 + 328);\n              v77 = 0LL;\n              while ( 1 )\n              {\n                v78 = v75[v77];\n                v79 = *(_DWORD *)(*(_QWORD *)(v76 + 8 * v77) + 4 * v39);\n                if ( v78 > 0.0 && v79 == -987654321 )\n                  break;\n                *(_DWORD *)(v26[v37] + 4 * v39) = (signed int)(float)((float)*(signed int *)(v26[v37] + 4 * v39)\n                                                                    + (float)(v78 * (float)v79));\n                if ( ++v77 >= dword_464000 )\n                  goto LABEL_66;\n              }\n              *(_DWORD *)(v26[v37] + 4 * v39) = -987654321;\n            }\n          }\nLABEL_66:\n          v80 = *(signed int *)(v3 + 136);\n          v21 = __OFSUB__(v39, v80);\n          v9 = v39++ - v80 < 0;\n        }\n        while ( v9 ^ v21 );\n        v31 = v116;\n        v81 = v112;\n      }\n      *(_DWORD *)(*(_QWORD *)(v81 + 8 * v37) + 16LL) = -987654321;\n      *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 4LL) = 0;\n      v82 = *(_DWORD *)(*(_QWORD *)v29 + 16LL);\n      if ( v82 >= -987654320 )\n      {\n        v83 = *(_DWORD *)(v3 + 340);\n        if ( v83 >= -987654320 )\n        {\n          v84 = (signed int)(float)((float)((float)v83 * *((float *)v110 + v30)) + (float)v82);\n          if ( v84 >= -987654320 )\n          {\n            *(_DWORD *)(*(_QWORD *)(v81 + 8 * v37) + 16LL) = v84;\n            *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 4LL) = 5;\n          }\n        }\n      }\n      *(_DWORD *)(*(_QWORD *)(v81 + 8 * v37) + 4LL) = -987654321;\n      *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 1LL) = 0;\n      v85 = *(_DWORD *)(v3 + 136);\n      if ( v85 > 0 )\n      {\n        v86 = v24[v37];\n        v87 = 1LL;\n        do\n        {\n          v88 = *(_DWORD *)(v86 + 4 * v87);\n          if ( v88 >= -987654320 )\n          {\n            v89 = *(_DWORD *)(*(_QWORD *)(v3 + 376) + 4 * v87);\n            if ( v89 >= -987654320 )\n            {\n              v90 = v88 + v89;\n              v91 = *(_QWORD *)(v81 + 8 * v37);\n              if ( v90 > *(_DWORD *)(v91 + 4) )\n              {\n                *(_DWORD *)(v91 + 4) = v90;\n                *(_DWORD *)(*(_QWORD *)(v31 + 32) + 4 * v30) = v87;\n                v85 = *(_DWORD *)(v3 + 136);\n              }\n            }\n          }\n          v21 = __OFSUB__(v87, v85);\n          v9 = v87++ - v85 < 0;\n        }\n        while ( v9 ^ v21 );\n      }\n      **(_DWORD **)(v81 + 8 * v37) = -987654321;\n      **(_BYTE **)(v109 + 8 * v30) = 0;\n      v92 = *(int **)(v81 + 8 * v37);\n      v93 = v92[4];\n      if ( v93 >= -987654320 )\n      {\n        v94 = *(_DWORD *)(v3 + 336);\n        if ( v94 >= -987654320 )\n        {\n          v95 = v93 + v94;\n          if ( v95 > *v92 )\n          {\n            *v92 = v95;\n            **(_BYTE **)(v109 + 8 * v30) = 5;\n            v92 = *(int **)(v81 + 8 * v37);\n          }\n        }\n      }\n      v92[2] = -987654321;\n      *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 2LL) = 0;\n      v96 = *(_DWORD *)(*(_QWORD *)v29 + 8LL);\n      if ( v96 >= -987654320 )\n      {\n        v97 = *(_DWORD *)(v3 + 356);\n        if ( v97 >= -987654320 )\n        {\n          v98 = (signed int)(float)((float)((float)v97 * *((float *)v110 + v30)) + (float)v96);\n          if ( v98 >= -987654320 )\n          {\n            *(_DWORD *)(*(_QWORD *)(v81 + 8 * v37) + 8LL) = v98;\n            *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 2LL) = 8;\n          }\n        }\n      }\n      v99 = *(_QWORD *)(v81 + 8 * v37);\n      v33 = *(unsigned int *)(v99 + 4);\n      if ( (signed int)v33 >= -987654320 )\n      {\n        v100 = *(_DWORD *)(v3 + 344);\n        if ( v100 >= -987654320 )\n        {\n          v101 = v33 + v100;\n          if ( v101 > *(_DWORD *)(v99 + 8) )\n          {\n            *(_DWORD *)(v99 + 8) = v101;\n            *(_BYTE *)(*(_QWORD *)(v109 + 8 * v30) + 2LL) = 7;\n          }\n        }\n      }\n      v35 = *(signed int *)(v113 + 24);\n      v21 = __OFSUB__(v30, v35);\n      v9 = v30++ - v35 < 0;\n    }\n    while ( v9 ^ v21 );\n  }\n  v102 = v36;\n  v103 = (void *)v31;\n  v104 = sub_407DD0(v31, v3, v35, v33, v29, v30);\n  v105 = (void **)ptr;\n  free(*((void **)ptr + 4));\n  free(v105[5]);\n  free(v105[6]);\n  free(v105[7]);\n  free(*v105);\n  free(v105[1]);\n  free(v105[2]);\n  free(v105[3]);\n  free(v105);\n  sub_4030D0(v103);\n  v106 = v113;\n  if ( *(_DWORD *)(v113 + 24) > 0 )\n  {\n    v107 = 0LL;\n    do\n      free(v102[v107++ + 1]);\n    while ( v107 < *(signed int *)(v106 + 24) );\n  }\n  free(v102);\n  free(v110);\n  return v104;\n}\n", 
            "funcStartAddr": "0x407350L", 
            "funcEndAddr": "0x407dcbL", 
            "funcName": "sub_407350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407DD0(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r13\n  __int64 v4; // r12\n  _QWORD *v5; // r15\n  unsigned int v6; // ebp\n  unsigned __int64 v7; // rsi\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  signed __int64 v11; // rcx\n  __int64 v12; // r14\n  __int64 v13; // rdi\n  unsigned int v14; // esi\n  __int64 v15; // rax\n  __int64 v16; // rax\n  char v17; // al\n  unsigned int v18; // edi\n  char v19; // al\n  __int64 v20; // r8\n  bool v21; // zf\n  __int64 v22; // rcx\n  __int64 v23; // rax\n  __int64 v24; // rdx\n  __int128 v25; // xmm0\n  int v26; // eax\n  unsigned int v27; // edi\n  char v28; // al\n  __int64 v29; // r8\n  char v30; // al\n  __int128 v31; // xmm0\n  __int128 v32; // xmm1\n  __int64 v33; // rdi\n  signed int v34; // er12\n  __int64 v35; // r13\n  int v36; // er15\n  __int64 v37; // rdi\n  __int64 v38; // rax\n  __int64 v39; // rcx\n  __int64 v40; // rdi\n  __int64 result; // rax\n  char v42; // [rsp+Bh] [rbp-5Dh]\n  unsigned int v43; // [rsp+Ch] [rbp-5Ch]\n  __int64 v44; // [rsp+10h] [rbp-58h]\n  _QWORD *v45; // [rsp+18h] [rbp-50h]\n  __int64 v46; // [rsp+20h] [rbp-48h]\n  __int64 v47; // [rsp+28h] [rbp-40h]\n  __int64 v48; // [rsp+30h] [rbp-38h]\n\n  v3 = a3;\n  v4 = a2;\n  v5 = (_QWORD *)a1;\n  v6 = 2 * a3 + 6;\n  v7 = (unsigned __int64)&v44;\n  sub_41FF70(v6, &v44);\n  **(_BYTE **)(v44 + 8) = 9;\n  v9 = v44;\n  v11 = *(_QWORD *)(v44 + 16);\n  *(_DWORD *)v11 = 0;\n  **(_DWORD **)(v9 + 24) = 0;\n  LODWORD(v10) = 1;\n  LOBYTE(v11) = 8;\n  LODWORD(v12) = 0;\n  v43 = v3;\n  v45 = (_QWORD *)a1;\n  v46 = v4;\n  while ( 2 )\n  {\n    v13 = (unsigned int)(char)v11;\n    switch ( (_DWORD)v13 )\n    {\n      case 1:\n        v11 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v11) = 1;\n        v14 = v43;\n        v42 = *(_BYTE *)(*(_QWORD *)(v5[1] + 8LL * (signed int)v43) + (signed int)v12);\n        v15 = v44;\n        v8 = *(_QWORD *)(v44 + 16);\n        *(_DWORD *)(v8 + 4 * v11) = v12;\n        LODWORD(v12) = v12 - 1;\n        goto LABEL_10;\n      case 2:\n        v11 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v11) = 2;\n        v42 = *(_BYTE *)(*(_QWORD *)(v5[3] + 8LL * (signed int)v43) + (signed int)v12);\n        v16 = v44;\n        v8 = *(_QWORD *)(v44 + 16);\n        *(_DWORD *)(v8 + 4 * v11) = v12;\n        LODWORD(v12) = v12 - 1;\n        *(_DWORD *)(*(_QWORD *)(v16 + 24) + 4 * v11) = 0;\n        goto LABEL_39;\n      case 3:\n        v11 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v11) = 3;\n        v14 = v43;\n        v42 = *(_BYTE *)(*(_QWORD *)(v5[2] + 8LL * (signed int)v43) + (signed int)v12);\n        v15 = v44;\n        v8 = *(_QWORD *)(v44 + 16);\n        *(_DWORD *)(v8 + 4 * v11) = v12;\nLABEL_10:\n        *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v11) = v14;\n        v7 = v14 - 1;\n        v43 = v7;\n        goto LABEL_39;\n      case 5:\n        v11 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v11) = 5;\n        v18 = v43;\n        v19 = *(_BYTE *)(*(_QWORD *)(*v5 + 8LL * (signed int)v43) + 4LL);\n        v20 = v44;\n        *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v11) = 0;\n        v8 = 0LL;\n        v42 = v19;\n        v21 = v19 == 5;\n        goto LABEL_21;\n      case 6:\n        v31 = *(unsigned int *)(*(_QWORD *)(v4 + 208) + 4LL * (signed int)v12 + 4);\n        v32 = *(unsigned int *)(v4 + 304);\n        if ( (signed int)sub_415A90(v13, v7, v8, v11) + 1000LL > *(signed int *)(*(_QWORD *)(v4 + 368)\n                                                                               + 4LL * (signed int)v12\n                                                                               + 4)\n          || (signed int)v12 <= 0 )\n        {\n          v5 = v45;\n        }\n        else\n        {\n          v10 = (signed int)v10;\n          v5 = v45;\n          do\n          {\n            *(_BYTE *)(*(_QWORD *)(v44 + 8) + v10) = 2;\n            v33 = v44;\n            *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v10) = v12;\n            LODWORD(v12) = v12 - 1;\n            *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v10) = 0;\n            if ( (_DWORD)v10 + 1 == v6 )\n            {\n              v6 += v3;\n              v7 = v6;\n              sub_41FFF0(v33, v6, v8);\n            }\n            ++v10;\n          }\n          while ( (signed int)v12 + 1 > 1 );\n        }\n        v10 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v10) = 6;\n        v42 = **(_BYTE **)(*v5 + 8LL * (signed int)v43);\n        v38 = v44;\n        v11 = *(_QWORD *)(v44 + 16);\n        *(_DWORD *)(v11 + 4 * v10) = 0;\n        *(_DWORD *)(*(_QWORD *)(v38 + 24) + 4 * v10) = 0;\n        goto LABEL_39;\n      case 7:\n        v22 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v22) = 7;\n        v23 = v44;\n        v24 = *(_QWORD *)(v44 + 16);\n        *(_DWORD *)(v24 + 4 * v22) = 0;\n        *(_DWORD *)(*(_QWORD *)(v23 + 24) + 4 * v22) = 0;\n        v12 = *(signed int *)(v5[4] + 4LL * (signed int)v43);\n        v25 = *(unsigned int *)(*(_QWORD *)(v4 + 216) + 4 * v12);\n        v26 = sub_415A90(v13, v7, v24, (signed int)v43);\n        v11 = *(signed int *)(*(_QWORD *)(v4 + 376) + 4 * v12);\n        v42 = 1;\n        if ( v26 + 1000LL <= v11 )\n        {\n          v34 = *(_DWORD *)(v4 + 136);\n          if ( v34 <= (signed int)v12 )\n          {\n            LODWORD(v10) = v10 + 1;\n          }\n          else\n          {\n            v47 = v3;\n            v35 = (signed int)v10 + 1;\n            v48 = (unsigned int)(v34 - 1 - v12);\n            v36 = v10 + 2;\n            do\n            {\n              *(_BYTE *)(*(_QWORD *)(v44 + 8) + v35) = 2;\n              v37 = v44;\n              *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v35) = v34;\n              *(_DWORD *)(*(_QWORD *)(v37 + 24) + 4 * v35) = 0;\n              if ( v36 == v6 )\n              {\n                v6 += v47;\n                v7 = v6;\n                sub_41FFF0(v37, v6, v8);\n              }\n              ++v35;\n              --v34;\n              ++v36;\n            }\n            while ( v34 > (signed int)v12 );\n            LODWORD(v10) = v10 + v48 + 2;\n            v3 = v47;\n          }\n          v4 = v46;\n        }\n        else\n        {\n          LODWORD(v10) = v10 + 1;\n        }\n        v5 = v45;\n        if ( (_DWORD)v10 != v6 )\n          goto LABEL_41;\n        goto LABEL_40;\n      case 8:\n        v10 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v10) = 8;\n        v27 = v43;\n        v28 = *(_BYTE *)(*(_QWORD *)(*v5 + 8LL * (signed int)v43) + 2LL);\n        v29 = v44;\n        *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v10) = 0;\n        v42 = v28;\n        v8 = v28 == 8;\n        v7 = 0LL;\n        if ( v28 != 8 )\n          v27 = 0;\n        v11 = v43 - (unsigned int)v8;\n        *(_DWORD *)(*(_QWORD *)(v29 + 24) + 4 * v10) = v27;\n        LODWORD(v10) = v10 + 1;\n        v43 -= v8;\n        if ( (_DWORD)v10 != v6 )\n          goto LABEL_41;\n        goto LABEL_40;\n      case 0xA:\n        v11 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v11) = 10;\n        v18 = v43;\n        v30 = *(_BYTE *)(*(_QWORD *)(*v5 + 8LL * (signed int)v43) + 3LL);\n        v20 = v44;\n        *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v11) = 0;\n        v8 = 0LL;\n        v42 = v30;\n        v21 = v30 == 10;\nLABEL_21:\n        LOBYTE(v8) = v21;\n        v7 = 0LL;\n        if ( v21 )\n          v7 = v18;\n        v43 = v18 - v8;\n        *(_DWORD *)(*(_QWORD *)(v20 + 24) + 4 * v11) = v7;\nLABEL_39:\n        LODWORD(v10) = v10 + 1;\n        if ( (_DWORD)v10 == v6 )\n        {\nLABEL_40:\n          v6 += v3;\n          v7 = v6;\n          sub_41FFF0(v44, v6, v8);\n        }\nLABEL_41:\n        LOBYTE(v11) = v42;\n        if ( v42 != 4 )\n          continue;\n        v39 = (signed int)v10;\n        *(_BYTE *)(*(_QWORD *)(v44 + 8) + v39) = 4;\n        v40 = v44;\n        *(_DWORD *)(*(_QWORD *)(v44 + 16) + 4 * v39) = 0;\n        *(_DWORD *)(*(_QWORD *)(v40 + 24) + 4 * v39) = 0;\n        *(_DWORD *)v40 = v10 + 1;\n        sub_4204A0(v40, v7);\n        return v44;\n      default:\n        v17 = sub_408740(v13);\n        sub_4325B0(\"HMMER: Bad state (%s) in ShadowTrace()\\n\", v17);\n        return result;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x407dd0L", 
            "funcEndAddr": "0x4082ccL", 
            "funcName": "sub_407DD0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_4082D0(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, __int64 a6, float result, __int64 a8, __int64 a9, __int64 a10, int a11, int a12, __int64 a13, int a14)\n{\n  __int64 v14; // r14\n  __int64 *v15; // r12\n  float *v16; // rbx\n  signed __int64 v17; // rbp\n  double v18; // xmm1_8\n  __int64 v19; // rax\n  __int64 v20; // rbp\n  int v21; // eax\n  signed __int64 v22; // r13\n  signed __int64 v23; // r15\n  double v24; // xmm0_8\n  __int64 v25; // rax\n  __int64 v26; // r8\n  __int128 v27; // xmm2\n  __int64 v28; // rsi\n  __int64 v29; // rdx\n  __int64 v30; // rcx\n  double v31; // xmm0_8\n  float v32; // xmm2_4\n  void **v33; // rdi\n  signed __int64 v34; // rbp\n  float v35; // [rsp+0h] [rbp-98h]\n  int v36; // [rsp+4h] [rbp-94h]\n  double v37; // [rsp+8h] [rbp-90h]\n  __int64 v38; // [rsp+10h] [rbp-88h]\n  void *ptr; // [rsp+18h] [rbp-80h]\n  void *v40; // [rsp+20h] [rbp-78h]\n  unsigned int v41; // [rsp+28h] [rbp-70h]\n  unsigned int v42; // [rsp+2Ch] [rbp-6Ch]\n  unsigned int v43; // [rsp+30h] [rbp-68h]\n  unsigned int v44; // [rsp+34h] [rbp-64h]\n  __int64 v45; // [rsp+38h] [rbp-60h]\n  __int64 v46; // [rsp+40h] [rbp-58h]\n  double v47; // [rsp+48h] [rbp-50h]\n  __int64 v48; // [rsp+50h] [rbp-48h]\n  __int64 v49; // [rsp+58h] [rbp-40h]\n  __int64 v50; // [rsp+60h] [rbp-38h]\n\n  v50 = a6;\n  v14 = a5;\n  v15 = a4;\n  v49 = a2;\n  if ( a3 )\n  {\n    *(float *)&v37 = result;\n    v48 = a1;\n    sub_422120(a3, &ptr, &v36);\n    if ( !v36 )\n      sub_4325B0(\"TraceDecompose() screwup\", (unsigned __int64)&ptr);\n    v16 = (float *)sub_4382F0(\"core_algorithms.c\", 2480LL, 4LL * v36);\n    v40 = (void *)sub_4382F0(\"core_algorithms.c\", 2481LL, 4LL * v36);\n    if ( v36 <= 0 )\n      goto LABEL_43;\n    v17 = 0LL;\n    v38 = 0LL;\n    LODWORD(v18) = 0;\n    do\n    {\n      sub_4209A0(v15, v14, *((_QWORD *)ptr + v17));\n      v16[v17] = result;\n      if ( a12 )\n      {\n        sub_416A30(v15, *((_QWORD *)ptr + v17), v14);\n        result = v16[v17] - result;\n        v16[v17] = result;\n      }\n      *(_QWORD *)&v18 = LODWORD(v18);\n      if ( result <= 0.0 )\n      {\n        *((_DWORD *)v40 + v17) = 0;\n      }\n      else\n      {\n        *((_DWORD *)v40 + v17) = 1;\n        v38 = (unsigned int)(v38 + 1);\n        *(float *)&v18 = *(float *)&v18 + result;\n      }\n      ++v17;\n    }\n    while ( v17 < v36 );\n    if ( !(_DWORD)v38 )\n    {\nLABEL_43:\n      v19 = (signed int)sub_43D790(v16);\n      *((_DWORD *)v40 + v19) = 1;\n      *(_QWORD *)&v18 = LODWORD(v16[(signed int)v19]);\n      v38 = 1LL;\n    }\n    if ( a11 )\n      *(_QWORD *)&v18 = LODWORD(v37);\n    v46 = a10;\n    v45 = a9;\n    v20 = a8;\n    v35 = *(float *)&v18;\n    sub_415B50(v15);\n    v21 = v36;\n    v37 = v18;\n    if ( v36 > 0 )\n    {\n      v22 = 1LL;\n      v23 = 0LL;\n      do\n      {\n        if ( *((_DWORD *)v40 + v23) )\n        {\n          sub_422630(*((_QWORD *)ptr + v23), &v41, &v42, &v44, &v43);\n          *(_QWORD *)&v24 = LODWORD(v16[v23]);\n          sub_415B50(v15);\n          if ( *(double *)(a13 + 24) >= v24 && v16[v23] >= *(float *)(a13 + 16) )\n          {\n            v47 = v24;\n            v25 = sub_421980(*((_QWORD *)ptr + v23), v15, v14, v20);\n            if ( a14 )\n            {\n              v26 = v41;\n              v27 = LODWORD(v16[v23]);\n              v28 = *v15;\n              v29 = v15[1];\n              v30 = v15[2];\n            }\n            else\n            {\n              v31 = v16[v23];\n              v26 = v41;\n              v29 = a9;\n              v28 = v20;\n              v30 = a10;\n            }\n            sub_41F9C0(v49, v28, v29, v30, v26, v42, v50, v44, v43, *((unsigned int *)v15 + 34), v22, v38, v25);\n            v20 = a8;\n          }\n          v22 = (unsigned int)(v22 + 1);\n          v21 = v36;\n          v18 = v37;\n        }\n        ++v23;\n      }\n      while ( v23 < v21 );\n    }\n    if ( a14 )\n    {\n      if ( v18 > 0.0 )\n        log(v18);\n      v32 = v35;\n    }\n    else\n    {\n      v32 = v35;\n    }\n    if ( v32 >= *(float *)a13 )\n    {\n      if ( a14 )\n      {\n        v20 = *v15;\n        v45 = v15[1];\n        v46 = v15[2];\n      }\n      sub_41F9C0(v48, v20, v45, v46, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, v38, 0LL);\n    }\n    v33 = (void **)ptr;\n    if ( v36 > 0 )\n    {\n      v34 = 0LL;\n      do\n      {\n        sub_420060(v33[v34++]);\n        v33 = (void **)ptr;\n      }\n      while ( v34 < v36 );\n    }\n    free(v33);\n    free(v16);\n    free(v40);\n    result = v35;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4082d0L", 
            "funcEndAddr": "0x408737L", 
            "funcName": "sub_4082D0"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_408740(int a1)\n{\n  unsigned int v1; // edi\n  const char *result; // rax\n\n  v1 = a1 - 1;\n  if ( v1 > 9 )\n    result = \"BOGUS\";\n  else\n    result = (const char *)(&off_444F50)[v1];\n  return result;\n}\n", 
            "funcStartAddr": "0x408740L", 
            "funcEndAddr": "0x40875aL", 
            "funcName": "sub_408740"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_408760(unsigned int a1)\n{\n  const char *result; // rax\n\n  if ( a1 > 3 )\n    result = \"BOGUS\";\n  else\n    result = off_444F30[a1];\n  return result;\n}\n", 
            "funcStartAddr": "0x408760L", 
            "funcEndAddr": "0x408777L", 
            "funcName": "sub_408760"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408780(FILE *stream, unsigned int *a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  unsigned int *v5; // rbx\n  signed __int64 v6; // rax\n  signed __int64 v7; // r15\n  __int64 v8; // rcx\n  __int64 v9; // rsi\n  const char *v10; // rbp\n  __int64 v11; // rdx\n  unsigned int v12; // er13\n  unsigned int v13; // er12\n  __int64 v14; // r9\n  __int64 v15; // r9\n  __int64 v16; // rax\n  __int64 v17; // r12\n  __int64 v18; // r13\n  unsigned int v19; // er12\n  __int32_t v20; // ebp\n  __int32_t v21; // er12\n  __int64 v22; // rax\n  __int64 v23; // rbp\n  const char *v24; // rdx\n  __int64 v26; // [rsp+0h] [rbp-48h]\n  __int64 v27; // [rsp+0h] [rbp-48h]\n  __int64 v28; // [rsp+8h] [rbp-40h]\n  __int64 v29; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a2;\n  if ( a2 )\n  {\n    if ( a3 )\n    {\n      v28 = a3;\n      if ( !(*(_BYTE *)(a3 + 456) & 1) )\n        sub_4325B0(\"oi, you can't print scores from that hmm, it's not ready.\", (char)a2);\n      LODWORD(v26) = 0;\n      fprintf(stream, \"st  node   rpos  transit emission - traceback len %d\\n\", *a2, v26);\n      fwrite(\"--  ---- ------  ------- --------\\n\", 0x22uLL, 1uLL, stream);\n      LODWORD(v6) = *a2;\n      if ( (signed int)*a2 > 0 )\n      {\n        v7 = 0LL;\n        LODWORD(v27) = 0;\n        v29 = v4;\n        do\n        {\n          if ( v4 )\n            HIDWORD(v27) = *(char *)(v4 + *(signed int *)(*((_QWORD *)v5 + 3) + 4 * v7));\n          v8 = *((_QWORD *)v5 + 1);\n          v9 = (unsigned int)*(char *)(v8 + v7);\n          if ( (unsigned int)(v9 - 1) > 9 )\n            v10 = \"BOGUS\";\n          else\n            v10 = (&off_444F48)[*(char *)(v8 + v7)];\n          v11 = *((_QWORD *)v5 + 2);\n          v12 = *(_DWORD *)(v11 + 4 * v7);\n          v13 = *(_DWORD *)(*((_QWORD *)v5 + 3) + 4 * v7);\n          v14 = 0LL;\n          if ( v7 < (signed int)v6 - 1 )\n            v14 = (unsigned int)sub_420A60(\n                                  v28,\n                                  v9,\n                                  v12,\n                                  (unsigned int)*(char *)(v8 + v7 + 1),\n                                  *(unsigned int *)(v11 + 4 * v7 + 4),\n                                  0LL);\n          fprintf(stream, \"%1s  %4d %6d  %7d\", v10, v12, v13, v14, v27);\n          if ( v7 < (signed int)*v5 - 1LL )\n            LODWORD(v27) = sub_420A60(\n                             v28,\n                             (unsigned int)*(char *)(*((_QWORD *)v5 + 1) + v7),\n                             *(unsigned int *)(*((_QWORD *)v5 + 2) + 4 * v7),\n                             (unsigned int)*(char *)(*((_QWORD *)v5 + 1) + v7 + 1),\n                             *(unsigned int *)(*((_QWORD *)v5 + 2) + 4 * v7 + 4),\n                             v15)\n                         + v27;\n          v4 = v29;\n          if ( v29 )\n          {\n            v16 = *((_QWORD *)v5 + 1);\n            switch ( *(_BYTE *)(v16 + v7) )\n            {\n              case 1:\n                v17 = SHIDWORD(v27);\n                fprintf(\n                  stream,\n                  \" %8d %c\",\n                  *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v28 + 320) + 8LL * SHIDWORD(v27))\n                                  + 4LL * *(signed int *)(*((_QWORD *)v5 + 2) + 4 * v7)),\n                  (unsigned int)s[SHIDWORD(v27)],\n                  v27);\n                LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 320) + 8 * v17)\n                                         + 4LL * *(signed int *)(*((_QWORD *)v5 + 2) + 4 * v7))\n                             + v27;\n                break;\n              case 3:\n                v18 = SHIDWORD(v27);\n                v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 328) + 8LL * SHIDWORD(v27))\n                                + 4LL * *(signed int *)(*((_QWORD *)v5 + 2) + 4 * v7));\n                v20 = s[SHIDWORD(v27)];\n                if ( (unsigned int)(v20 + 128) <= 0x17F )\n                  v20 = (*__ctype_tolower_loc())[v20];\n                fprintf(stream, \" %8d %c\", v19, (unsigned int)(char)v20, v27);\n                LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 328) + 8 * v18)\n                                         + 4LL * *(signed int *)(*((_QWORD *)v5 + 2) + 4 * v7))\n                             + v27;\n                v4 = v29;\n                break;\n              case 5:\n                if ( *(_BYTE *)(v16 + v7 - 1) == 5 )\n                  goto LABEL_28;\n                break;\n              case 8:\n                if ( *(_BYTE *)(v16 + v7 - 1) == 8 )\n                  goto LABEL_28;\n                break;\n              case 0xA:\n                if ( *(_BYTE *)(v16 + v7 - 1) == 10 )\n                {\nLABEL_28:\n                  v21 = s[SHIDWORD(v27)];\n                  if ( (unsigned int)(v21 + 128) <= 0x17F )\n                    v21 = (*__ctype_tolower_loc())[v21];\n                  fprintf(stream, \" %8d %c\", 0LL, (unsigned int)(char)v21, v27);\n                }\n                break;\n              default:\n                break;\n            }\n          }\n          else\n          {\n            fprintf(stream, \" %8s %c\", \"-\", 45LL, v27);\n          }\n          fputc(10, stream);\n          ++v7;\n          v6 = (signed int)*v5;\n        }\n        while ( v7 < v6 );\n      }\n      fwrite(\"                 ------- --------\\n\", 0x22uLL, 1uLL, stream);\n      LODWORD(v22) = fprintf(stream, \"           total: %6d\\n\\n\", (unsigned int)v27);\n    }\n    else\n    {\n      fprintf(stream, \"st  node   rpos  - traceback len %d\\n\", *a2);\n      LODWORD(v22) = fwrite(\"--  ---- ------\\n\", 0x10uLL, 1uLL, stream);\n      if ( (signed int)*a2 > 0 )\n      {\n        v23 = 0LL;\n        do\n        {\n          if ( (unsigned int)(*(char *)(*((_QWORD *)a2 + 1) + v23) - 1) > 9 )\n            v24 = \"BOGUS\";\n          else\n            v24 = (&off_444F48)[*(char *)(*((_QWORD *)a2 + 1) + v23)];\n          fprintf(\n            stream,\n            \"%1s  %4d %6d\\n\",\n            v24,\n            *(unsigned int *)(*((_QWORD *)a2 + 2) + 4 * v23),\n            *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * v23));\n          ++v23;\n          v22 = (signed int)*a2;\n        }\n        while ( v23 < v22 );\n      }\n    }\n  }\n  else\n  {\n    LODWORD(v22) = fwrite(\" [ trace is NULL ]\\n\", 0x13uLL, 1uLL, stream);\n  }\n  return v22;\n}\n", 
            "funcStartAddr": "0x408780L", 
            "funcEndAddr": "0x408b6eL", 
            "funcName": "sub_408780"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408B70(FILE *stream, unsigned int *a2)\n{\n  unsigned int *v2; // r14\n  FILE *v3; // r13\n  const char *v4; // rdi\n  size_t v5; // rsi\n  const char *v6; // rdi\n  size_t v7; // rsi\n  float *v8; // r15\n  signed __int64 v9; // r12\n  signed __int64 v10; // r12\n  signed __int64 v11; // r15\n  signed __int64 v12; // rbx\n  __int64 v13; // rax\n  signed __int64 v14; // r12\n  __int64 v15; // r15\n  signed __int64 v16; // rbx\n\n  v2 = a2;\n  v3 = stream;\n  if ( *a2 == 1 )\n  {\n    v4 = \"PAM\\n\";\n    v5 = 4LL;\n  }\n  else\n  {\n    if ( *a2 )\n      sub_4325B0(\"No such strategy.\", (char)a2);\n    v4 = \"Dirichlet\\n\";\n    v5 = 10LL;\n  }\n  fwrite(v4, v5, 1uLL, v3);\n  if ( dword_464004 == 2 )\n  {\n    v6 = \"Nucleic\\n\";\n    v7 = 8LL;\n  }\n  else\n  {\n    if ( dword_464004 != 3 )\n      goto LABEL_12;\n    v6 = \"Amino\\n\";\n    v7 = 6LL;\n  }\n  fwrite(v6, v7, 1uLL, v3);\nLABEL_12:\n  fprintf(v3, \"\\n%d\\n\", v2[1]);\n  if ( (signed int)v2[1] > 0 )\n  {\n    v8 = (float *)(v2 + 208);\n    v9 = 0LL;\n    do\n    {\n      fprintf(v3, \"%.4f\\n\", *(float *)&v2[v9 + 2]);\n      fprintf(v3, \"%.4f \", *(v8 - 6));\n      fprintf(v3, \"%.4f \", *(v8 - 5));\n      fprintf(v3, \"%.4f \", *(v8 - 4));\n      fprintf(v3, \"%.4f \", *(v8 - 3));\n      fprintf(v3, \"%.4f \", *(v8 - 2));\n      fprintf(v3, \"%.4f \", *(v8 - 1));\n      fprintf(v3, \"%.4f \", *v8);\n      fputc(10, v3);\n      ++v9;\n      v8 += 7;\n    }\n    while ( v9 < (signed int)v2[1] );\n  }\n  fprintf(v3, \"\\n%d\\n\", v2[1602]);\n  if ( (signed int)v2[1602] > 0 )\n  {\n    v10 = (signed __int64)(v2 + 1803);\n    v11 = 0LL;\n    do\n    {\n      fprintf(v3, \"%.4f\\n\", *(float *)&v2[v11 + 1603]);\n      if ( dword_464000 > 0 )\n      {\n        v12 = 0LL;\n        do\n          fprintf(v3, \"%.4f \", *(float *)(v10 + 4 * v12++));\n        while ( v12 < dword_464000 );\n      }\n      fputc(10, v3);\n      ++v11;\n      v10 += 80LL;\n    }\n    while ( v11 < (signed int)v2[1602] );\n  }\n  LODWORD(v13) = fprintf(v3, \"\\n%d\\n\", v2[5803]);\n  if ( (signed int)v2[5803] > 0 )\n  {\n    v14 = (signed __int64)(v2 + 6004);\n    v15 = 0LL;\n    do\n    {\n      fprintf(v3, \"%.4f\\n\", *(float *)&v2[v15 + 5804]);\n      if ( dword_464000 > 0 )\n      {\n        v16 = 0LL;\n        do\n          fprintf(v3, \"%.4f \", *(float *)(v14 + 4 * v16++));\n        while ( v16 < dword_464000 );\n      }\n      fputc(10, v3);\n      ++v15;\n      v13 = (signed int)v2[5803];\n      v14 += 80LL;\n    }\n    while ( v15 < v13 );\n  }\n  return v13;\n}\n", 
            "funcStartAddr": "0x408b70L", 
            "funcEndAddr": "0x408e74L", 
            "funcName": "sub_408B70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_408E80(_QWORD *a1, int a2, int a3)\n{\n  _BYTE *v3; // rcx\n  signed __int64 result; // rax\n  signed __int64 v5; // r8\n  __int64 v6; // r9\n  __int64 v7; // r10\n  char v8; // al\n  signed __int64 v9; // rbx\n  int v10; // er12\n  int v11; // er13\n  int v12; // er15\n  int v13; // ebp\n  int v14; // er14\n  int v15; // eax\n  int v16; // eax\n  int v17; // er14\n  bool v18; // zf\n  int v19; // er14\n  int v20; // eax\n  int v21; // eax\n  int v22; // er14\n  int v23; // [rsp+0h] [rbp-34h]\n\n  v3 = (_BYTE *)a1[1];\n  result = 0LL;\n  if ( *v3 == 4 && v3[1] == 5 )\n  {\n    v5 = *(signed int *)a1;\n    if ( v3[v5 - 2] == 8 && v3[v5 - 1] == 9 )\n    {\n      v6 = a1[3];\n      if ( !*(_DWORD *)(v6 + 4) )\n      {\n        if ( (signed int)v5 <= 0 )\n          return 1LL;\n        v7 = (unsigned int)(v5 - 1);\n        v8 = 4;\n        v9 = 1LL;\n        v10 = 0;\n        v11 = 0;\n        v23 = 0;\n        v12 = 0;\n        v13 = 0;\n        v14 = 0;\n        while ( 1 )\n        {\n          switch ( v8 )\n          {\n            case 1:\n              if ( *(_DWORD *)(v6 + 4 * v9 - 4) != ++v13 )\n                return 0LL;\n              v15 = *(_DWORD *)(a1[2] + 4 * v9 - 4);\n              if ( v15 <= 0 || v15 > a2 )\n                return 0LL;\n              if ( v10 )\n              {\n                if ( v15 != ++v14 )\n                  return 0LL;\n              }\n              else\n              {\n                v14 = *(_DWORD *)(a1[2] + 4 * v9 - 4);\n              }\n              ++v10;\n              goto LABEL_63;\n            case 2:\n              if ( *(_DWORD *)(v6 + 4 * v9 - 4) )\n                return 0LL;\n              v16 = *(_DWORD *)(a1[2] + 4 * v9 - 4);\n              if ( v16 != v14 + 1 )\n                return 0LL;\n              if ( v16 <= 0 )\n                return 0LL;\n              v14 = *(_DWORD *)(a1[2] + 4 * v9 - 4);\n              if ( v16 > a2 )\n                return 0LL;\n              goto LABEL_63;\n            case 3:\n              if ( *(_DWORD *)(v6 + 4 * v9 - 4) != ++v13\n                || *(_DWORD *)(a1[2] + 4 * v9 - 4) != v14\n                || v14 <= 0\n                || v14 >= a2 )\n              {\n                return 0LL;\n              }\n              goto LABEL_63;\n            case 4:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) )\n                return 0LL;\n              v17 = v13 | (v9 - 1) | v14;\n              v13 = 0;\n              v18 = (*(_DWORD *)(v6 + 4 * v9 - 4) | v17) == 0;\n              v14 = 0;\n              goto LABEL_37;\n            case 5:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) | v14 )\n                return 0LL;\n              v19 = *(_DWORD *)(v6 + 4 * v9 - 4);\n              if ( v12 <= 0 )\n              {\n                result = 0LL;\n                v22 = v13 | v19;\n                v13 = 0;\n                if ( v22 )\n                  return result;\n              }\n              else if ( v19 != ++v13 )\n              {\n                return 0LL;\n              }\n              ++v12;\n              v14 = 0;\n              if ( v9 >= v5 )\n                return 1LL;\n              goto LABEL_8;\n            case 6:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) )\n                return 0LL;\n              v10 = 0;\n              goto LABEL_36;\n            case 7:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) )\n                return 0LL;\n              v11 = 0;\nLABEL_36:\n              v18 = *(_DWORD *)(v6 + 4 * v9 - 4) == 0;\nLABEL_37:\n              result = 0LL;\n              if ( !v18 )\n                return result;\n              goto LABEL_63;\n            case 8:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) )\n                return 0LL;\n              v20 = *(_DWORD *)(v6 + 4 * v9 - 4);\n              if ( v23 <= 0 )\n              {\n                v18 = v20 == 0;\n                v20 = v13;\n                if ( !v18 )\n                  return 0LL;\n              }\n              else if ( v20 != v13 + 1 )\n              {\n                return 0LL;\n              }\n              ++v23;\n              v13 = v20;\n              if ( v9 >= v5 )\n                return 1LL;\n              goto LABEL_8;\n            case 9:\n              if ( v9 - (unsigned int)(v5 - 1) != 1 )\n                return 0LL;\n              if ( *(_DWORD *)(a1[2] + 4 * v7) )\n                return 0LL;\n              if ( v13 != a3 )\n                return 0LL;\n              v13 = a3;\n              if ( *(_DWORD *)(v6 + 4 * v7) )\n                return 0LL;\nLABEL_63:\n              if ( v9 >= v5 )\n                return 1LL;\n              goto LABEL_8;\n            case 10:\n              if ( *(_DWORD *)(a1[2] + 4 * v9 - 4) )\n                return 0LL;\n              v21 = *(_DWORD *)(v6 + 4 * v9 - 4);\n              if ( v11 <= 0 )\n              {\n                if ( v21 )\n                  return 0LL;\n              }\n              else if ( v21 != ++v13 )\n              {\n                return 0LL;\n              }\n              ++v11;\n              if ( v9 >= v5 )\n                return 1LL;\nLABEL_8:\n              v8 = v3[v9++];\n              break;\n            default:\n              return 0LL;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408e80L", 
            "funcEndAddr": "0x409145L", 
            "funcName": "sub_408E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4091B0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v7; // [rsp+0h] [rbp-18h]\n\n  return sub_4091D0(a1, a2, a3, a4, &v7, 2LL, a5, a6);\n}\n", 
            "funcStartAddr": "0x4091b0L", 
            "funcEndAddr": "0x4091d0L", 
            "funcName": "sub_4091B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4091D0(int a1, __int64 a2, _QWORD *a3, _QWORD *a4, __int64 a5, int a6)\n{\n  unsigned int v6; // er15\n  __int64 v7; // rbp\n  size_t v8; // r14\n  signed __int64 v9; // r13\n  signed __int64 v10; // rax\n  __int64 v11; // rcx\n  __int64 v12; // r11\n  signed int *v13; // r8\n  __int64 v14; // rdx\n  signed __int64 v15; // rdi\n  signed __int64 v16; // rbp\n  signed int v17; // ebx\n  signed __int64 v18; // rsi\n  signed __int64 v19; // rdi\n  signed __int64 v20; // rsi\n  signed int v21; // ebp\n  bool v22; // zf\n  bool v23; // sf\n  unsigned __int8 v24; // of\n  signed int v25; // edx\n  __int64 v26; // rsi\n  unsigned int v27; // eax\n  __int64 v28; // r12\n  signed int v29; // eax\n  __int64 v30; // r9\n  _QWORD *v31; // rdx\n  int v32; // [rsp+0h] [rbp-A8h]\n  signed int v33; // [rsp+4h] [rbp-A4h]\n  __int64 v34; // [rsp+8h] [rbp-A0h]\n  signed int *ptr; // [rsp+10h] [rbp-98h]\n  void *v36; // [rsp+18h] [rbp-90h]\n  signed int *v37; // [rsp+20h] [rbp-88h]\n  unsigned int v38; // [rsp+2Ch] [rbp-7Ch]\n  _QWORD *v39; // [rsp+30h] [rbp-78h]\n  _QWORD *v40; // [rsp+38h] [rbp-70h]\n  signed __int64 v41; // [rsp+40h] [rbp-68h]\n  signed __int64 v42; // [rsp+48h] [rbp-60h]\n  unsigned int v43; // [rsp+50h] [rbp-58h]\n  __int64 v44; // [rsp+58h] [rbp-50h]\n  __int64 v45; // [rsp+60h] [rbp-48h]\n  __int64 v46; // [rsp+68h] [rbp-40h]\n  __int64 v47; // [rsp+70h] [rbp-38h]\n\n  v6 = a6;\n  v7 = a5;\n  v40 = a4;\n  v34 = a2;\n  v39 = a3;\n  v32 = *(_DWORD *)(*(_QWORD *)(*a3 + 8LL * a1) + 8LL) + *(_DWORD *)(a2 + 352);\n  v8 = a6;\n  ptr = (signed int *)calloc(a6, 4uLL);\n  v37 = (signed int *)calloc(v8, 4uLL);\n  v36 = calloc(v8, 4uLL);\n  v42 = a1;\n  if ( a1 >= 0 )\n  {\n    v45 = (unsigned int)(a1 + 1);\n    v47 = v6;\n    v9 = 0LL;\n    v38 = 0;\n    v43 = v6;\n    v46 = v7;\n    do\n    {\n      if ( (signed int)v6 <= 0 )\n      {\n        v41 = v9 + 1;\n      }\n      else\n      {\n        v10 = v9 - 1;\n        v41 = v9 + 1;\n        v11 = 0LL;\n        do\n        {\n          v12 = v7;\n          v13 = *(signed int **)(v7 + 8 * v11);\n          v14 = *((_QWORD *)v13 + 3);\n          v15 = ptr[v11];\n          if ( v10 > *(signed int *)(v14 + 4 * v15) )\n          {\n            v16 = *v13 - 1LL;\n            v17 = v15 + 1;\n            do\n            {\n              if ( v15 >= v16 )\n                break;\n              ptr[v11] = v17;\n              v18 = *(signed int *)(v14 + 4 * v15++ + 4);\n              ++v17;\n            }\n            while ( v10 > v18 );\n          }\n          v19 = v37[v11];\n          if ( *(_DWORD *)(v14 + 4 * v19) <= (signed int)v41 )\n          {\n            v20 = *v13 - 1LL;\n            v21 = v19 + 1;\n            do\n            {\n              if ( v19 >= v20 )\n                break;\n              v37[v11] = v21++;\n              v24 = __OFSUB__(*(_DWORD *)(v14 + 4 * v19 + 4), (_DWORD)v41);\n              v22 = *(_DWORD *)(v14 + 4 * v19 + 4) == (_DWORD)v41;\n              v23 = *(_DWORD *)(v14 + 4 * v19++ + 4) - (signed int)v41 < 0;\n            }\n            while ( (unsigned __int8)(v23 ^ v24) | v22 );\n          }\n          ++v11;\n          v7 = v12;\n        }\n        while ( v11 != v47 );\n      }\n      ++v38;\n      v25 = 1;\n      do\n      {\n        LODWORD(v26) = 0;\n        v33 = v25;\n        v27 = 0;\n        switch ( 0 )\n        {\n          case 0:\n          case 5:\n            LODWORD(v26) = *(_DWORD *)(v34 + 136);\n            goto LABEL_32;\n          case 1:\n            LODWORD(v26) = *(_DWORD *)(v34 + 136) - 1;\n            v27 = 2;\n            if ( (signed int)v26 < 2 )\n              goto LABEL_55;\n            break;\n          case 2:\n            LODWORD(v26) = *(_DWORD *)(v34 + 136) - 1;\nLABEL_32:\n            v27 = 1;\n            if ( (signed int)v26 < 1 )\n              goto LABEL_55;\n            break;\n          case 3:\n          case 4:\n            break;\n          default:\n            v27 = 0;\n            break;\n        }\n        v28 = v27;\n        v26 = (unsigned int)(v26 + 1);\n        v44 = v26;\n        do\n        {\n          switch ( v25 & 0x7FFFFFFF )\n          {\n            case 1:\n              if ( v9 < v42 )\n              {\n                v29 = *(_DWORD *)(v34 + 136);\n                if ( v29 > (signed int)v28 )\n                {\n                  sub_409CD0(\n                    1,\n                    v9,\n                    (unsigned int)v28,\n                    1LL,\n                    v38,\n                    (unsigned int)(v28 + 1),\n                    *(_DWORD *)(*(_QWORD *)(v40[1] + 8 * v41) + 4 * v28 + 4)\n                  + *(_DWORD *)(**(_QWORD **)(v34 + 312) + 4 * v28)\n                  + *(_DWORD *)(*(_QWORD *)(v39[1] + 8 * v9) + 4 * v28)\n                  - v32);\n                  v29 = *(_DWORD *)(v34 + 136);\n                }\n                if ( v29 > (signed int)v28 )\n                  sub_409CD0(\n                    1,\n                    v9,\n                    (unsigned int)v28,\n                    3LL,\n                    v38,\n                    (unsigned int)v28,\n                    *(_DWORD *)(*(_QWORD *)(v40[2] + 8 * v41) + 4 * v28)\n                  + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 8LL) + 4 * v28)\n                  + *(_DWORD *)(*(_QWORD *)(v39[1] + 8 * v9) + 4 * v28)\n                  - v32);\n              }\n              if ( (signed int)v28 < *(_DWORD *)(v34 + 136) - 1 )\n                sub_409CD0(\n                  1,\n                  v9,\n                  (unsigned int)v28,\n                  2LL,\n                  (unsigned int)v9,\n                  (unsigned int)(v28 + 1),\n                  *(_DWORD *)(*(_QWORD *)(v40[3] + 8 * v9) + 4 * v28 + 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 16LL) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(v39[1] + 8 * v9) + 4 * v28)\n                - v32);\n              sub_409CD0(\n                1,\n                v9,\n                (unsigned int)v28,\n                7LL,\n                (unsigned int)v9,\n                0LL,\n                *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v9) + 4LL)\n              + *(_DWORD *)(*(_QWORD *)(v34 + 376) + 4 * v28)\n              + *(_DWORD *)(*(_QWORD *)(v39[1] + 8 * v9) + 4 * v28)\n              - v32);\n              goto LABEL_53;\n            case 2:\n              v30 = v28 + 1;\n              if ( v9 >= v42 )\n              {\n                v31 = v40;\n              }\n              else\n              {\n                sub_409CD0(\n                  2,\n                  v9,\n                  (unsigned int)v28,\n                  1LL,\n                  v38,\n                  v30,\n                  *(_DWORD *)(*(_QWORD *)(v40[1] + 8 * v41) + 4 * v28 + 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 40LL) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(v39[3] + 8 * v9) + 4 * v28)\n                - v32);\n                v31 = v40;\n                v30 = v28 + 1;\n              }\n              v6 = v43;\n              sub_409CD0(\n                2,\n                v9,\n                (unsigned int)v28,\n                2LL,\n                (unsigned int)v9,\n                v30,\n                *(_DWORD *)(*(_QWORD *)(v31[3] + 8 * v9) + 4 * v28 + 4)\n              + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 48LL) + 4 * v28)\n              + *(_DWORD *)(*(_QWORD *)(v39[3] + 8 * v9) + 4 * v28)\n              - v32);\nLABEL_53:\n              v25 = v33;\n              v26 = v44;\n              break;\n            case 3:\n              if ( v9 < v42 )\n              {\n                sub_409CD0(\n                  3,\n                  v9,\n                  (unsigned int)v28,\n                  1LL,\n                  v38,\n                  (unsigned int)(v28 + 1),\n                  *(_DWORD *)(*(_QWORD *)(v40[1] + 8 * v41) + 4 * v28 + 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 24LL) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(v39[2] + 8 * v9) + 4 * v28)\n                - v32);\n                v6 = v43;\n                v7 = v46;\n                sub_409CD0(\n                  3,\n                  v9,\n                  (unsigned int)v28,\n                  3LL,\n                  v38,\n                  (unsigned int)v28,\n                  *(_DWORD *)(*(_QWORD *)(v40[2] + 8 * v41) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 312) + 32LL) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(v39[2] + 8 * v9) + 4 * v28)\n                - v32);\n                v26 = v44;\n                v25 = v33;\n              }\n              break;\n            case 6:\n              if ( v9 < v42 )\n              {\n                sub_409CD0(\n                  6,\n                  v9,\n                  0LL,\n                  1LL,\n                  v38,\n                  (unsigned int)v28,\n                  *(_DWORD *)(*(_QWORD *)(v40[1] + 8 * v41) + 4 * v28)\n                + *(_DWORD *)(*(_QWORD *)(v34 + 368) + 4 * v28)\n                + **(_DWORD **)(*v39 + 8 * v9)\n                - v32);\n                v26 = v44;\n                v25 = v33;\n              }\n              break;\n            default:\n              break;\n          }\n          ++v28;\n        }\n        while ( v26 != v28 );\nLABEL_55:\n        switch ( v25 & 0x7FFFFFFF )\n        {\n          case 1:\n          case 2:\n          case 3:\n          case 6:\n          case 9:\n            break;\n          case 4:\n            if ( !v9 )\n            {\n              sub_409CD0(4, 0, 0LL, 5LL, 0LL, 0LL, *(_DWORD *)(*(_QWORD *)*v40 + 16LL) - v32);\n              v25 = v33;\n            }\n            break;\n          case 5:\n            sub_409CD0(\n              5,\n              v9,\n              0LL,\n              6LL,\n              (unsigned int)v9,\n              0LL,\n              **(_DWORD **)(*v40 + 8 * v9)\n            + *(_DWORD *)(v34 + 336)\n            + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 16LL)\n            - v32);\n            v25 = v33;\n            if ( v9 < v42 )\n            {\n              sub_409CD0(\n                5,\n                v9,\n                0LL,\n                5LL,\n                v38,\n                0LL,\n                *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v41) + 16LL)\n              + *(_DWORD *)(v34 + 340)\n              + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 16LL)\n              - v32);\n              v25 = v33;\n            }\n            break;\n          case 7:\n            sub_409CD0(\n              7,\n              v9,\n              0LL,\n              8LL,\n              (unsigned int)v9,\n              0LL,\n              *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v9) + 8LL)\n            + *(_DWORD *)(v34 + 344)\n            + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 4LL)\n            - v32);\n            sub_409CD0(\n              7,\n              v9,\n              0LL,\n              10LL,\n              (unsigned int)v9,\n              0LL,\n              *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v9) + 12LL)\n            + *(_DWORD *)(v34 + 348)\n            + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 4LL)\n            - v32);\n            v25 = v33;\n            break;\n          case 8:\n            sub_409CD0(\n              8,\n              v9,\n              0LL,\n              9LL,\n              (unsigned int)v9,\n              0LL,\n              *(_DWORD *)(v34 + 352) + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 8LL) - v32);\n            v25 = v33;\n            if ( v9 < v42 )\n            {\n              sub_409CD0(\n                8,\n                v9,\n                0LL,\n                8LL,\n                v38,\n                0LL,\n                *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v41) + 8LL)\n              + *(_DWORD *)(v34 + 356)\n              + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 8LL)\n              - v32);\n              v25 = v33;\n            }\n            break;\n          case 0xA:\n            sub_409CD0(\n              10,\n              v9,\n              0LL,\n              6LL,\n              (unsigned int)v9,\n              0LL,\n              **(_DWORD **)(*v40 + 8 * v9)\n            + *(_DWORD *)(v34 + 360)\n            + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 12LL)\n            - v32);\n            v25 = v33;\n            if ( v9 < v42 )\n            {\n              sub_409CD0(\n                10,\n                v9,\n                0LL,\n                10LL,\n                v38,\n                0LL,\n                *(_DWORD *)(*(_QWORD *)(*v40 + 8 * v41) + 12LL)\n              + *(_DWORD *)(v34 + 364)\n              + *(_DWORD *)(*(_QWORD *)(*v39 + 8 * v9) + 12LL)\n              - v32);\n              v25 = v33;\n            }\n            break;\n          default:\n            sub_4325B0(\"unknown state\", v26);\n            return;\n        }\n        ++v25;\n      }\n      while ( v25 != 11 );\n      v9 = v41;\n    }\n    while ( v41 != v45 );\n  }\n  free(ptr);\n  free(v37);\n  free(v36);\n}\n", 
            "funcStartAddr": "0x4091d0L", 
            "funcEndAddr": "0x409cc6L", 
            "funcName": "sub_4091D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409CD0(int a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, int a12)\n{\n  unsigned int v12; // ebp\n  unsigned int v13; // edx\n  int result; // eax\n  const char *v15; // rsi\n  signed int v16; // er11\n  signed __int64 v17; // r15\n  signed int v18; // er9\n  _QWORD *v19; // rcx\n  __int64 v20; // r8\n  __int64 v21; // rdi\n  int v22; // er14\n  signed __int64 v23; // r10\n  char v24; // r12\n  signed __int64 v25; // r13\n  __int64 v26; // rsi\n  signed __int64 v27; // rbx\n  int v28; // esi\n  bool v29; // zf\n  int v30; // ebx\n  unsigned int v31; // er12\n  unsigned int v32; // edx\n  __int64 v33; // rbp\n  __int64 v34; // rbx\n  unsigned int v35; // er14\n  unsigned int v36; // er14\n  const char *v37; // rsi\n  signed __int64 v38; // rbp\n  unsigned int v39; // [rsp+Ch] [rbp-5Ch]\n  char v40[2]; // [rsp+10h] [rbp-58h]\n  char s[2]; // [rsp+16h] [rbp-52h]\n  unsigned int v42; // [rsp+1Ch] [rbp-4Ch]\n  int v43; // [rsp+20h] [rbp-48h]\n  int v44; // [rsp+24h] [rbp-44h]\n  __int64 v45; // [rsp+28h] [rbp-40h]\n  __int64 v46; // [rsp+30h] [rbp-38h]\n\n  v42 = a6;\n  v12 = a5;\n  v43 = a4;\n  v39 = a3;\n  v13 = a2;\n  v44 = a1;\n  result = a12;\n  if ( a12 > 0 )\n  {\n    v45 = (unsigned int)a12;\n    v15 = 0LL;\n    v16 = 0;\n    result = v39;\n    do\n    {\n      *(_DWORD *)(a11 + 4LL * (_QWORD)v15) = 0;\n      v17 = *(signed int *)(a9 + 4LL * (_QWORD)v15);\n      v18 = *(_DWORD *)(a10 + 4LL * (_QWORD)v15);\n      v46 = (__int64)v15;\n      if ( (signed int)v17 <= v18 )\n      {\n        v19 = *(_QWORD **)(a8 + 8LL * (_QWORD)v15);\n        v20 = v19[1];\n        v21 = v19[3];\n        v22 = 0;\n        do\n        {\n          v23 = v17;\n          if ( *(_DWORD *)(v21 + 4 * v17) )\n            v22 = *(_DWORD *)(v21 + 4 * v17);\n          v24 = *(_BYTE *)(v20 + v17);\n          if ( v24 == (_BYTE)v44 && !(result ^ *(_DWORD *)(v19[2] + 4 * v17) | v13 ^ v22) )\n            v16 = 1;\n          if ( v24 == (_BYTE)v43 && !(v42 ^ *(_DWORD *)(v19[2] + 4 * v17) | v12 ^ v22) )\n            v16 = 1;\n          ++v17;\n          v25 = *(signed int *)v19 - 1LL;\n          if ( v23 < v25 )\n          {\n            LODWORD(v26) = v23 + 1;\n            if ( v24 == 6 )\n            {\n              v27 = (signed int)v17;\n              do\n              {\n                v28 = v27 + 1;\n                if ( v27 >= v25 )\n                  break;\n                v29 = *(_BYTE *)(v20 + v27++) == 2;\n              }\n              while ( v29 );\n              LODWORD(v26) = v28 - 1;\n            }\n            v26 = (signed int)v26;\n            v30 = *(_DWORD *)(v21 + 4LL * (signed int)v26);\n            if ( !v30 )\n              v30 = v22;\n            if ( v24 == (_BYTE)v44 && v22 == v13 )\n            {\n              v31 = v13;\n              v32 = v12;\n              v33 = v19[2];\n              if ( *(_DWORD *)(v33 + 4 * v23) == result )\n              {\n                if ( *(_BYTE *)(v20 + v26) != (_BYTE)v43 || v30 != v32 )\n                {\n                  v12 = v32;\n                  v13 = v31;\n                  result = v39;\n                }\n                else\n                {\n                  v29 = *(_DWORD *)(v33 + 4 * v26) == v42;\n                  v12 = v32;\n                  v13 = v31;\n                  result = v39;\n                  if ( v29 )\n                  {\n                    v34 = v46;\n                    *(_DWORD *)(a11 + 4 * v46) = 1;\n                    v18 = *(_DWORD *)(a10 + 4 * v34);\n                  }\n                }\n              }\n              else\n              {\n                v12 = v32;\n                v13 = v31;\n              }\n            }\n          }\n        }\n        while ( v23 < v18 );\n      }\n      v15 = (const char *)(v46 + 1);\n    }\n    while ( v46 + 1 != v45 );\n    if ( v16 )\n    {\n      switch ( (char)v44 )\n      {\n        case 1:\n          v15 = \"M%d\";\n          goto LABEL_38;\n        case 2:\n          v15 = \"D%d\";\n          goto LABEL_38;\n        case 3:\n          v15 = \"I%d\";\nLABEL_38:\n          v35 = v13;\n          sprintf(s, v15, v39);\n          v13 = v35;\n          break;\n        case 4:\n          strcpy(s, \"S\");\n          break;\n        case 5:\n          strcpy(s, \"N\");\n          break;\n        case 6:\n          strcpy(s, \"B\");\n          break;\n        case 7:\n          strcpy(s, \"E\");\n          break;\n        case 8:\n          strcpy(s, \"C\");\n          break;\n        case 9:\n          strcpy(s, \"T\");\n          break;\n        case 10:\n          strcpy(s, \"J\");\n          break;\n        default:\n          sub_4325B0(\"bad transition\", (char)v15);\n          return result;\n      }\n      v36 = v13;\n      switch ( (char)v43 )\n      {\n        case 1:\n          v37 = \"M%d\";\n          goto LABEL_51;\n        case 2:\n          v37 = \"D%d\";\n          goto LABEL_51;\n        case 3:\n          v37 = \"I%d\";\nLABEL_51:\n          sprintf(v40, v37, v42);\n          break;\n        case 4:\n          strcpy(v40, \"S\");\n          break;\n        case 5:\n          strcpy(v40, \"N\");\n          break;\n        case 6:\n          strcpy(v40, \"B\");\n          break;\n        case 7:\n          strcpy(v40, \"E\");\n          break;\n        case 8:\n          strcpy(v40, \"C\");\n          break;\n        case 9:\n          strcpy(v40, \"T\");\n          break;\n        case 10:\n          strcpy(v40, \"J\");\n          break;\n        default:\n          sub_4325B0(\"bad transition\", (char)v15);\n          return result;\n      }\n      sub_415AF0(a7);\n      printf(\"%d\\t%s\\t%d\\t%s\\t%-14.7g\\t\", v36, s, v12, v40, 1.0);\n      if ( a12 > 0 )\n      {\n        v38 = 0LL;\n        do\n        {\n          if ( *(_DWORD *)(a11 + 4 * v38) )\n            putchar(42);\n          if ( v38 < a12 - 1 )\n            putchar(9);\n          ++v38;\n        }\n        while ( v45 != v38 );\n      }\n      result = putchar(10);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409cd0L", 
            "funcEndAddr": "0x40a07bL", 
            "funcName": "sub_409CD0"
        }, 
        {
            "decompiledFuncCode": "int __usercall sub_40A080@<eax>(__int64 a1@<rax>, __int64 a2@<rdx>, _QWORD *a3@<rcx>, __int64 a4@<rdi>, int a5@<esi>)\n{\n  _QWORD *v5; // r12\n  __int64 v6; // r14\n  char *v7; // r13\n  signed __int64 v8; // rbx\n  __int64 v9; // rbx\n  __int64 v10; // r13\n  signed __int64 v11; // rbx\n  double v12; // xmm0_8\n  __int64 v13; // rbp\n  __int64 v14; // rax\n  bool v15; // sf\n  unsigned __int8 v16; // of\n  signed __int64 v17; // rbx\n  __int64 v18; // rbp\n  __int64 v19; // r13\n  __int64 v20; // rbx\n  __int64 v21; // rbx\n  __int64 v22; // rbx\n  __int64 v23; // rbx\n  signed __int64 v24; // rbx\n  __int64 v25; // rbp\n\n  v5 = a3;\n  v6 = a2;\n  printf(\"         *      \", a1);\n  if ( a5 > 0 )\n  {\n    v7 = (char *)(a4 + 1);\n    v8 = (unsigned int)(a5 + 1) - 1LL;\n    do\n    {\n      printf(\"    %c      \", (unsigned int)s[*v7++]);\n      --v8;\n    }\n    while ( v8 );\n  }\n  printf(\"\\nN    \");\n  if ( a5 >= 0 )\n  {\n    v9 = 0LL;\n    do\n      printf(\"%- #11.3e\", (double)*(signed int *)(*(_QWORD *)(*v5 + 8 * v9++) + 16LL) / 1442.695040888964);\n    while ( a5 + 1 != v9 );\n  }\n  if ( *(_DWORD *)(v6 + 136) > 0 )\n  {\n    v10 = (unsigned int)(a5 + 1);\n    v11 = 1LL;\n    do\n    {\n      printf(\"\\nM%-3d \", (unsigned int)v11);\n      v12 = 1442.695040888964;\n      if ( a5 >= 0 )\n      {\n        v13 = 0LL;\n        do\n        {\n          v12 = (double)*(signed int *)(*(_QWORD *)(v5[1] + 8 * v13) + 4 * v11) / 1442.695040888964;\n          printf(\"%- #11.3e\", v12);\n          ++v13;\n        }\n        while ( v10 != v13 );\n      }\n      v14 = *(signed int *)(v6 + 136);\n      v16 = __OFSUB__(v11, v14);\n      v15 = v11++ - v14 < 0;\n    }\n    while ( v15 ^ v16 );\n    if ( (signed int)v14 >= 2 )\n    {\n      v17 = 1LL;\n      do\n      {\n        printf(\"\\nI%-3d \", (unsigned int)v17, v12, 1442.695040888964);\n        v12 = 1442.695040888964;\n        if ( a5 >= 0 )\n        {\n          v18 = 0LL;\n          do\n          {\n            v12 = (double)*(signed int *)(*(_QWORD *)(v5[2] + 8 * v18) + 4 * v17) / 1442.695040888964;\n            printf(\"%- #11.3e\", v12);\n            ++v18;\n          }\n          while ( v10 != v18 );\n        }\n        ++v17;\n      }\n      while ( v17 < *(signed int *)(v6 + 136) );\n    }\n  }\n  printf(\"\\nE    \");\n  if ( a5 < 0 )\n  {\n    printf(\"\\nC    \");\nLABEL_33:\n    printf(\"\\nJ    \");\nLABEL_34:\n    printf(\"\\nB    \");\n    goto LABEL_35;\n  }\n  v19 = (unsigned int)(a5 + 1);\n  v20 = 0LL;\n  do\n    printf(\"%- #11.3e\", (double)*(signed int *)(*(_QWORD *)(*v5 + 8 * v20++) + 4LL) / 1442.695040888964);\n  while ( v19 != v20 );\n  printf(\"\\nC    \");\n  if ( a5 < 0 )\n    goto LABEL_33;\n  v21 = 0LL;\n  do\n    printf(\"%- #11.3e\", (double)*(signed int *)(*(_QWORD *)(*v5 + 8 * v21++) + 8LL) / 1442.695040888964);\n  while ( v19 != v21 );\n  printf(\"\\nJ    \");\n  if ( a5 < 0 )\n    goto LABEL_34;\n  v22 = 0LL;\n  do\n    printf(\"%- #11.3e\", (double)*(signed int *)(*(_QWORD *)(*v5 + 8 * v22++) + 12LL) / 1442.695040888964);\n  while ( v19 != v22 );\n  printf(\"\\nB    \");\n  if ( a5 >= 0 )\n  {\n    v23 = 0LL;\n    do\n      printf(\"%- #11.3e\", (double)**(signed int **)(*v5 + 8 * v23++) / 1442.695040888964);\n    while ( v19 != v23 );\n  }\nLABEL_35:\n  if ( *(_DWORD *)(v6 + 136) >= 3 )\n  {\n    v24 = 2LL;\n    do\n    {\n      printf(\"\\nD%-3d \", (unsigned int)v24);\n      if ( a5 >= 0 )\n      {\n        v25 = 0LL;\n        do\n          printf(\"%- #11.3e\", (double)*(signed int *)(*(_QWORD *)(v5[3] + 8 * v25++) + 4 * v24) / 1442.695040888964);\n        while ( a5 + 1 != v25 );\n      }\n      ++v24;\n    }\n    while ( v24 < *(signed int *)(v6 + 136) );\n  }\n  return puts(\"\\n\");\n}\n", 
            "funcStartAddr": "0x40a080L", 
            "funcEndAddr": "0x40a43aL", 
            "funcName": "sub_40A080"
        }, 
        {
            "decompiledFuncCode": "void **__fastcall sub_40A460(__int64 a1, unsigned __int64 a2, _DWORD *a3, __int64 a4)\n{\n  _BYTE *v4; // rbp\n  char v5; // r14\n  __int64 v6; // rbx\n  int v7; // ebp\n  signed int v8; // er13\n  int v9; // er15\n  char *v10; // rdi\n  int v11; // er13\n  signed int v12; // er12\n  __int64 v13; // rax\n  int v14; // eax\n  int v15; // ebp\n  __int64 v16; // rcx\n  int v17; // eax\n  bool v18; // al\n  char v19; // r14\n  __int64 v20; // rcx\n  _DWORD *v21; // rdi\n  bool v22; // r14\n  __int64 v23; // r8\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  void *v26; // rdx\n  bool v27; // zf\n  int v28; // eax\n  __int64 v29; // rcx\n  _BYTE *v30; // rdi\n  void **result; // rax\n  signed int v32; // [rsp+Ch] [rbp-BCh]\n  void *v33; // [rsp+10h] [rbp-B8h]\n  __int64 v34; // [rsp+18h] [rbp-B0h]\n  int v35; // [rsp+24h] [rbp-A4h]\n  void *ptr; // [rsp+28h] [rbp-A0h]\n  int v37; // [rsp+34h] [rbp-94h]\n  __int64 v38; // [rsp+38h] [rbp-90h]\n  _QWORD *v39; // [rsp+40h] [rbp-88h]\n  _DWORD *v40; // [rsp+48h] [rbp-80h]\n  void **v41; // [rsp+50h] [rbp-78h]\n  __int64 v42; // [rsp+58h] [rbp-70h]\n  __int64 v43; // [rsp+60h] [rbp-68h]\n  __int64 v44; // [rsp+68h] [rbp-60h]\n  __int64 v45; // [rsp+70h] [rbp-58h]\n  __int64 v46; // [rsp+78h] [rbp-50h]\n  char v47; // [rsp+80h] [rbp-48h]\n  int v48; // [rsp+8Ch] [rbp-3Ch]\n\n  v41 = (void **)a4;\n  v40 = a3;\n  v39 = (_QWORD *)a2;\n  v35 = 64;\n  sub_41FF70(64LL, &v33);\n  v4 = (_BYTE *)sub_4382F0(\"emit.c\", 59LL, 64LL);\n  sub_420090(v33, 0LL, 4LL, 0LL, 0LL);\n  LOBYTE(a2) = 1;\n  sub_420090(v33, 1LL, 5LL, 0LL, 0LL);\n  ptr = v4;\n  *v4 = dword_463FFC;\n  v45 = a1 + 172;\n  v44 = a1 + 180;\n  v43 = a1 + 188;\n  v42 = a1 + 196;\n  v34 = a1;\n  v46 = a1 + 224;\n  v5 = 5;\n  v6 = 0LL;\n  v7 = 64;\n  v8 = 1;\n  v9 = 0;\n  while ( 2 )\n  {\n    v37 = v7;\n    v32 = v8;\n    v11 = v9;\n    switch ( v5 )\n    {\n      case 1:\n        v12 = -1;\n        v5 = 7;\n        v9 = 0;\n        if ( v11 >= *(_DWORD *)(v34 + 136) )\n          goto LABEL_34;\n        v13 = *(_QWORD *)(v34 + 144);\n        v38 = v11;\n        sub_43D180(&v47, *(_QWORD *)(v13 + 8LL * v11), 3LL);\n        v48 = *(_DWORD *)(*(_QWORD *)(v34 + 216) + 4 * v38);\n        LOBYTE(a2) = 4;\n        v14 = sub_438150(&v47, 4LL);\n        v15 = v11;\n        v8 = v32;\n        v16 = v38;\n        switch ( v14 )\n        {\n          case 0:\n            v9 = v15 + 1;\n            goto LABEL_23;\n          case 1:\n            goto LABEL_25;\n          case 2:\n            v5 = 2;\n            v9 = v15 + 1;\n            goto LABEL_35;\n          case 3:\n            goto LABEL_35;\n          default:\n            v10 = \"never happens\";\n            break;\n        }\n        goto LABEL_12;\n      case 2:\n        if ( v9 >= *(_DWORD *)(v34 + 136) )\n        {\n          v12 = -1;\n          v5 = 7;\n          v9 = 0;\nLABEL_34:\n          v8 = v32;\n        }\n        else\n        {\n          v5 = 2 - ((unsigned int)sub_438150(*(_QWORD *)(*(_QWORD *)(v34 + 144) + 8LL * v9++) + 20LL, 2LL) < 1);\nLABEL_22:\n          v8 = v32;\n          v12 = -1;\n          switch ( v5 )\n          {\n            case 1:\nLABEL_23:\n              v12 = sub_438150(*(_QWORD *)(*(_QWORD *)(v34 + 152) + 8LL * v9), (unsigned int)dword_464000);\n              v5 = 1;\n              break;\n            case 3:\n              v16 = v9;\n              v15 = v9;\nLABEL_25:\n              v12 = sub_438150(*(_QWORD *)(*(_QWORD *)(v34 + 160) + 8 * v16), (unsigned int)dword_464000);\n              v5 = 3;\n              v9 = v15;\n              break;\n            case 5:\n              if ( *(_BYTE *)(*((_QWORD *)v33 + 1) + v6 + 1) == 5 )\n                goto LABEL_31;\n              v5 = 5;\n              break;\n            case 8:\n              if ( *(_BYTE *)(*((_QWORD *)v33 + 1) + v6 + 1) == 8 )\n                goto LABEL_31;\n              v5 = 8;\n              break;\n            case 10:\n              if ( *(_BYTE *)(*((_QWORD *)v33 + 1) + v6 + 1) == 10 )\nLABEL_31:\n                v12 = sub_438150(v46, (unsigned int)dword_464000);\n              else\n                v5 = 10;\n              break;\n            default:\n              break;\n          }\n        }\nLABEL_35:\n        v23 = 0LL;\n        if ( v12 != -1 )\n          v23 = (unsigned int)v8;\n        a2 = (unsigned int)(v6 + 2);\n        sub_420090(v33, a2, (unsigned int)v5, (unsigned int)v9, v23);\n        v7 = v37;\n        if ( (_DWORD)v6 + 3 == v37 )\n        {\n          v7 = v37 + 64;\n          LOBYTE(a2) = v37 + 64;\n          sub_41FFF0(v33, (unsigned int)(v37 + 64), v24);\n        }\n        if ( v12 != -1 )\n        {\n          v25 = v8;\n          v26 = ptr;\n          *((_BYTE *)ptr + v25) = v12;\n          ++v8;\n          v27 = (_DWORD)v25 + 2 == v35;\n          v28 = v35;\n          if ( v27 )\n          {\n            v35 += 64;\n            LOBYTE(a2) = -110;\n            ptr = (void *)sub_438340(\"emit.c\", 146LL, v26, v28 + 64);\n          }\n        }\n        ++v6;\n        if ( v5 != 9 )\n          continue;\n        *(_DWORD *)v33 = v6 + 2;\n        v29 = v8;\n        v30 = ptr;\n        *((_BYTE *)ptr + v29) = dword_463FFC;\n        v30[v29 + 1] = 0;\n        if ( v39 )\n          *v39 = v30;\n        else\n          free(v30);\n        result = v41;\n        if ( v40 )\n          *v40 = v8 - 1;\n        if ( !result )\n          return (void **)sub_420060(v33);\n        *result = v33;\n        return result;\n      case 3:\n        v17 = sub_438150(*(_QWORD *)(*(_QWORD *)(v34 + 144) + 8LL * v9) + 12LL, 2LL);\n        v5 = 2 * (v17 != 0) | 1;\n        v9 += v17 == 0;\n        goto LABEL_22;\n      case 5:\n        v18 = (unsigned int)sub_438150(v45, 2LL) == 1;\n        v19 = 6;\n        goto LABEL_19;\n      case 6:\n        v20 = v34;\n        v21 = *(_DWORD **)(v34 + 208);\n        *v21 = *(_DWORD *)(v34 + 168);\n        v9 = sub_438150(v21, (unsigned int)(*(_DWORD *)(v20 + 136) + 1));\n        v22 = v9 == 0;\n        if ( !v9 )\n          v9 = 1;\n        v5 = v22 + 1;\n        goto LABEL_22;\n      case 7:\n        v5 = 2 * ((unsigned int)sub_438150(v44, 2LL) == 1) | 8;\n        goto LABEL_21;\n      case 8:\n        v18 = (unsigned int)sub_438150(v43, 2LL) == 1;\n        v19 = 9;\nLABEL_19:\n        v5 = v19 - v18;\n        goto LABEL_21;\n      case 10:\n        v5 = 4 * ((unsigned int)sub_438150(v42, 2LL) == 1) + 6;\nLABEL_21:\n        v9 = 0;\n        goto LABEL_22;\n      default:\n        v10 = \"can't happen.\";\nLABEL_12:\n        sub_4325B0(v10, a2);\n        return result;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40a460L", 
            "funcEndAddr": "0x40a94bL", 
            "funcName": "sub_40A460"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40A950(__int64 a1, void **a2, _QWORD *a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbx\n  __int64 v6; // r13\n  __int64 v7; // r12\n  bool v8; // r15\n  signed __int64 v9; // rcx\n  signed int v10; // er14\n  float v11; // xmm0_4\n  int v12; // ebp\n  int v13; // eax\n  signed __int64 v14; // rdi\n  float v15; // xmm2_4\n  bool v16; // sf\n  unsigned __int8 v17; // of\n  __int64 v18; // rax\n  int v19; // ecx\n  _BYTE *v20; // rbp\n  signed __int64 v21; // r14\n  bool v22; // zf\n  float *v23; // rbx\n  signed __int64 v24; // rbp\n  signed __int64 v25; // r12\n  _BYTE *v26; // rdx\n  int v27; // esi\n  int v28; // er15\n  __int64 v29; // rbx\n  __int32_t v30; // ebp\n  const __int32_t **v31; // rax\n  signed __int64 v32; // rax\n  signed int v33; // ecx\n  __int64 v34; // r13\n  int v35; // ebx\n  signed int v36; // er15\n  __int64 v37; // r14\n  void *v38; // r12\n  int v39; // er15\n  void *v40; // rbp\n  _DWORD *v41; // r14\n  void **v42; // rbx\n  void *v43; // [rsp+8h] [rbp-C0h]\n  void *v44; // [rsp+10h] [rbp-B8h]\n  float *v45; // [rsp+18h] [rbp-B0h]\n  float *v46; // [rsp+20h] [rbp-A8h]\n  void *ptr; // [rsp+28h] [rbp-A0h]\n  int v48; // [rsp+30h] [rbp-98h]\n  float v49; // [rsp+34h] [rbp-94h]\n  void **v50; // [rsp+38h] [rbp-90h]\n  void *v51; // [rsp+40h] [rbp-88h]\n  void *v52; // [rsp+48h] [rbp-80h]\n  void **v53; // [rsp+50h] [rbp-78h]\n  _QWORD *v54; // [rsp+58h] [rbp-70h]\n  _DWORD *v55; // [rsp+60h] [rbp-68h]\n  _BYTE *v56; // [rsp+68h] [rbp-60h]\n  __int64 v57; // [rsp+70h] [rbp-58h]\n  __int64 v58; // [rsp+78h] [rbp-50h]\n  __int64 v59; // [rsp+80h] [rbp-48h]\n  char *v60; // [rsp+88h] [rbp-40h]\n  void *v61; // [rsp+90h] [rbp-38h]\n\n  v5 = a5;\n  v55 = (_DWORD *)a4;\n  v54 = a3;\n  v53 = a2;\n  v6 = a1;\n  v7 = 0LL;\n  v8 = dword_464004 == 3;\n  sub_40AE70(a1, &ptr, &v46, &v61);\n  v9 = *(signed int *)(a1 + 136);\n  v10 = 0;\n  v50 = (void **)v5;\n  if ( v9 <= 0 )\n  {\n    v13 = 0;\n    v12 = 0;\n  }\n  else\n  {\n    v11 = *((float *)ptr + 1);\n    v12 = v11 >= 0.5;\n    v13 = v11 < 0.5;\n    if ( (_DWORD)v9 != 1 )\n    {\n      v10 = 0;\n      if ( v46[1] >= 0.5 )\n        v10 = (signed int)(float)(1.0 / (float)(1.0 - *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL) + 16LL)));\n      v14 = 2LL;\n      do\n      {\n        v15 = *((float *)ptr + v14);\n        v13 += v15 < 0.5;\n        if ( v14 < v9 && v46[v14] >= 0.5 )\n          v10 += (signed int)(float)(1.0 / (float)(1.0 - *(float *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v14) + 16LL)));\n        v12 += v15 >= 0.5;\n        v17 = __OFSUB__(v14, v9);\n        v16 = v14++ - v9 < 0;\n      }\n      while ( v16 ^ v17 );\n    }\n  }\n  sub_41FF70((unsigned int)(v13 + v10 + v12 + 6), &v43);\n  v18 = sub_4382F0(\"emit.c\", 327LL, v10 + v12 + 3);\n  v19 = v10 + v12 + 1;\n  v20 = (_BYTE *)v18;\n  v44 = (void *)sub_4382F0(\"emit.c\", 328LL, v19);\n  v21 = 0LL;\n  sub_420090(v43, 0LL, 4LL, 0LL, 0LL);\n  sub_420090(v43, 1LL, 5LL, 0LL, 0LL);\n  sub_420090(v43, 2LL, 6LL, 0LL, 0LL);\n  *v20 = dword_463FFC;\n  v22 = *(_DWORD *)(v6 + 136) == 0;\n  v16 = *(_DWORD *)(v6 + 136) < 0;\n  v52 = v20;\n  if ( v16 || v22 )\n  {\n    v23 = (float *)ptr;\n    LODWORD(v21) = 0;\n    LODWORD(v24) = 3;\n    v38 = v46;\n  }\n  else\n  {\n    LOBYTE(v7) = v8;\n    v49 = dword_4451B0[v7];\n    v23 = (float *)ptr;\n    v51 = v46;\n    v56 = v20 + 1;\n    v24 = 3LL;\n    v25 = 1LL;\n    v45 = (float *)ptr;\n    v57 = v6;\n    do\n    {\n      if ( v23[v25] >= 0.5 )\n      {\n        v27 = v24;\n        v28 = sub_43D790(*(_QWORD *)(*(_QWORD *)(v6 + 152) + 8 * v25));\n        v29 = (signed int)v21;\n        v21 = (signed int)v21 + 1LL;\n        sub_420090(v43, v24, 1LL, (unsigned int)v25, (unsigned int)v21);\n        v26 = v44;\n        *((_BYTE *)v44 + v29) = s[v28];\n        *((_BYTE *)v52 + v29 + 1) = v28;\n        if ( v49 > *(float *)(*(_QWORD *)(*(_QWORD *)(v6 + 152) + 8 * v25) + 4LL * v28) )\n        {\n          v30 = (char)v26[v29];\n          if ( (unsigned int)(v30 + 128) <= 0x17F )\n          {\n            v31 = __ctype_tolower_loc();\n            v26 = v44;\n            v30 = (*v31)[v30];\n          }\n          v26[v29] = v30;\n        }\n        v23 = v45;\n        LODWORD(v24) = v27;\n      }\n      else\n      {\n        sub_420090(v43, (unsigned int)v24, 2LL, (unsigned int)v25, 0LL);\n        v26 = v44;\n      }\n      v24 = (unsigned int)(v24 + 1);\n      v32 = *(signed int *)(v6 + 136);\n      if ( v25 < v32 && *((float *)v51 + v25) >= 0.5 )\n      {\n        v33 = (signed int)(float)(1.0 / (float)(1.0 - *(float *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v25) + 16LL)));\n        if ( v33 )\n        {\n          v59 = v21;\n          v60 = &v26[(signed int)v21];\n          v34 = (__int64)&v56[(signed int)v21];\n          v35 = v21 + 1;\n          v48 = v33;\n          v36 = v33;\n          v58 = v24;\n          v37 = 0LL;\n          do\n          {\n            sub_420090(v43, (unsigned int)(v37 + v24), 3LL, (unsigned int)v25, (unsigned int)(v35 + v37));\n            v60[v37] = 120;\n            *(_BYTE *)(v34 + v37++) = dword_463FFC - 1;\n          }\n          while ( v36 != (_DWORD)v37 );\n          v21 = (unsigned int)(v48 + v59);\n          v24 = (unsigned int)(v48 + v58);\n          v6 = v57;\n          v32 = *(signed int *)(v57 + 136);\n          v23 = v45;\n        }\n      }\n      v17 = __OFSUB__(v25, v32);\n      v16 = v25++ - v32 < 0;\n    }\n    while ( v16 ^ v17 );\n    v38 = v51;\n  }\n  sub_420090(v43, (unsigned int)v24, 7LL, 0LL, 0LL);\n  sub_420090(v43, (unsigned int)(v24 + 1), 8LL, 0LL, 0LL);\n  sub_420090(v43, (unsigned int)(v24 + 2), 9LL, 0LL, 0LL);\n  v39 = v21;\n  v40 = v52;\n  *((_BYTE *)v52 + (signed int)v21 + 1) = dword_463FFC;\n  free(v23);\n  free(v38);\n  free(v61);\n  v41 = v55;\n  if ( v53 )\n    *v53 = v44;\n  else\n    free(v44);\n  v42 = v50;\n  if ( v54 )\n  {\n    *v54 = v40;\n    if ( !v41 )\n      goto LABEL_36;\n    goto LABEL_35;\n  }\n  free(v40);\n  if ( v41 )\nLABEL_35:\n    *v41 = v39;\nLABEL_36:\n  if ( v42 )\n    *v42 = v43;\n  else\n    sub_420060(v43);\n}\n", 
            "funcStartAddr": "0x40a950L", 
            "funcEndAddr": "0x40ae61L", 
            "funcName": "sub_40A950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE70(__int64 a1, __int64 *a2, __int64 *a3, __int64 *a4)\n{\n  __int64 *v4; // r14\n  __int64 *v5; // r15\n  __int64 *v6; // r12\n  __int64 v7; // rbp\n  __int64 v8; // rbx\n  __int64 v9; // r13\n  __int64 result; // rax\n  __int64 v11; // rcx\n  float v12; // xmm0_4\n  __int64 v13; // rdx\n  float *v14; // rdi\n  float v15; // xmm0_4\n  signed __int64 v16; // rsi\n  float v17; // xmm1_4\n  float v18; // xmm0_4\n  float v19; // xmm1_4\n  float v20; // xmm0_4\n  signed __int64 v21; // rdi\n  float v22; // xmm1_4\n  float *v23; // rbp\n  float v24; // xmm0_4\n  float v25; // xmm1_4\n  bool v26; // sf\n  unsigned __int8 v27; // of\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v8 = sub_4382F0(\"emit.c\", 414LL, 4LL * *(signed int *)(a1 + 136) + 4);\n  v9 = sub_4382F0(\"emit.c\", 415LL, 4LL * *(signed int *)(a1 + 136));\n  result = sub_4382F0(\"emit.c\", 416LL, 4LL * *(signed int *)(a1 + 136) + 4);\n  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 168);\n  v11 = *(_QWORD *)(a1 + 208);\n  v12 = *(float *)(v11 + 4);\n  *(float *)(v8 + 4) = v12;\n  v13 = *(_QWORD *)(a1 + 144);\n  v14 = *(float **)(v13 + 8);\n  v15 = v12 * v14[1];\n  *(float *)(v9 + 4) = v15;\n  v16 = *(signed int *)(v7 + 136);\n  if ( v16 >= 2 )\n  {\n    v17 = *(float *)(v8 + 4);\n    *(float *)(v8 + 8) = (float)((float)(*(float *)(result + 4) * v14[5]) + (float)((float)(*v14 * v17) + v15))\n                       + *(float *)(v11 + 8);\n    v18 = (float)(*(float *)(result + 4) * v14[6]) + (float)(v17 * v14[2]);\n    *(float *)(result + 8) = v18;\n    if ( (_DWORD)v16 != 2 )\n    {\n      *(float *)(v9 + 8) = *(float *)(v8 + 8) * *(float *)(*(_QWORD *)(v13 + 16) + 4LL);\n      v18 = *(float *)(result + 8);\n    }\n    v19 = *(float *)(v8 + 8) / (float)(v18 + *(float *)(v8 + 8));\n    *(float *)(v8 + 8) = v19;\n    v20 = *(float *)(result + 8) / (float)(v19 + *(float *)(result + 8));\n    *(float *)(result + 8) = v20;\n    if ( (_DWORD)v16 != 2 )\n    {\n      v21 = 3LL;\n      do\n      {\n        v22 = *(float *)(v8 + 4 * v21 - 4);\n        v23 = *(float **)(v13 + 8 * v21 - 8);\n        *(float *)(v8 + 4 * v21) = (float)((float)(v20 * v23[5])\n                                         + (float)((float)(*v23 * v22) + *(float *)(v9 + 4 * v21 - 4)))\n                                 + *(float *)(v11 + 4 * v21);\n        v24 = (float)(*(float *)(result + 4 * v21 - 4) * v23[6]) + (float)(v22 * v23[2]);\n        *(float *)(result + 4 * v21) = v24;\n        if ( v21 < v16 )\n        {\n          *(float *)(v9 + 4 * v21) = *(float *)(v8 + 4 * v21) * *(float *)(*(_QWORD *)(v13 + 8 * v21) + 4LL);\n          v24 = *(float *)(result + 4 * v21);\n        }\n        v25 = *(float *)(v8 + 4 * v21) / (float)(v24 + *(float *)(v8 + 4 * v21));\n        *(float *)(v8 + 4 * v21) = v25;\n        v20 = *(float *)(result + 4 * v21) / (float)(v25 + *(float *)(result + 4 * v21));\n        *(float *)(result + 4 * v21) = v20;\n        v27 = __OFSUB__(v21, v16);\n        v26 = v21++ - v16 < 0;\n      }\n      while ( v26 ^ v27 );\n    }\n  }\n  *v6 = v8;\n  *v4 = result;\n  *v5 = v9;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ae70L", 
            "funcEndAddr": "0x40b070L", 
            "funcName": "sub_40AE70"
        }, 
        {
            "decompiledFuncCode": "int __usercall sub_40B070@<eax>(FILE *stream@<rdi>, char a2@<al>, int a3@<edx>, __int64 *a4@<rsi>)\n{\n  int v4; // er15\n  __int64 *v5; // r13\n  FILE *v6; // r14\n  const char *v7; // rdi\n  const char *v8; // rdi\n  size_t v9; // rsi\n  int v10; // eax\n  void *v11; // r9\n  void *v12; // rax\n  const char *v13; // rdi\n  size_t v14; // rsi\n  signed __int64 v15; // rbx\n  const char *v16; // rdi\n  size_t v17; // rsi\n  unsigned __int64 v18; // rbp\n  int v19; // eax\n  signed __int64 v20; // rbx\n  int v21; // eax\n  signed __int64 v22; // r8\n  signed __int64 v23; // rdx\n  signed __int64 v24; // rcx\n  signed __int64 v25; // r9\n  _QWORD *v26; // rax\n  int v27; // edi\n  int v28; // ecx\n  __int64 v29; // rsi\n  int v30; // ebx\n  __int64 v31; // rax\n  bool v32; // sf\n  unsigned __int8 v33; // of\n  _QWORD *v34; // rcx\n  signed __int64 v35; // rbp\n  __int64 v36; // rdx\n  __int64 v37; // rax\n  float v38; // xmm0_4\n  signed __int64 v39; // rdx\n  __int64 v40; // rsi\n  __int64 v41; // rax\n  char v43; // [rsp+0h] [rbp-38h]\n\n  v43 = a2;\n  v4 = a3;\n  v5 = a4;\n  v6 = stream;\n  LOBYTE(a4) = 1;\n  sub_419BE0(v5, 1LL);\n  if ( !v4 && *((_DWORD *)v5 + 34) >= 1001 )\n  {\n    a4 = (__int64 *)*v5;\n    sub_432690(\"Profile %s will have more than 1000 positions. GCG won't read it; Compugen will.\", v43);\n  }\n  if ( dword_464004 == 2 )\n  {\n    v7 = \"!!NA_PROFILE 1.0\\n\";\n  }\n  else\n  {\n    if ( dword_464004 != 3 )\n      sub_4325B0(\"No support for profiles with non-biological alphabets\", (char)a4);\n    v7 = \"!!AA_PROFILE 1.0\\n\";\n  }\n  fwrite(v7, 0x11uLL, 1uLL, v6);\n  if ( dword_464004 == 2 )\n  {\n    v8 = \"(Nucleotide) \";\n    v9 = 13LL;\n  }\n  else\n  {\n    if ( dword_464004 != 3 )\n      goto LABEL_15;\n    v8 = \"(Peptide) \";\n    v9 = 10LL;\n  }\n  fwrite(v8, v9, 1uLL, v6);\nLABEL_15:\n  v10 = *((_DWORD *)v5 + 114);\n  if ( v10 & 0x200 )\n  {\n    v11 = (void *)v5[1];\n    if ( v10 & 2 )\n      goto LABEL_17;\nLABEL_19:\n    v12 = &unk_4409CD;\n    goto LABEL_20;\n  }\n  v11 = &unk_4409CD;\n  if ( !(v10 & 2) )\n    goto LABEL_19;\nLABEL_17:\n  v12 = (void *)v5[2];\nLABEL_20:\n  fprintf(v6, \"HMMCONVERT v%s Length: %d %s|%s|%s\\n\", \"2.3\", *((unsigned int *)v5 + 34), *v5, v11, v12);\n  fprintf(v6, \"   Profile converted from a profile HMM using HMMER v%s emulation.\\n\", \"2.3\");\n  if ( v4 )\n  {\n    fwrite(\"   Compugen XSW extended profile format.\\n\", 0x29uLL, 1uLL, v6);\n    fwrite(\"   Use -model=xsw.model -nonor -noave -gapop=10 -gapext=1 -qgapop=10 -qgapext=1\\n\", 0x50uLL, 1uLL, v6);\n    v13 = \"      with om on the Compugen BIC to get the closest approximation to HMMER bit scores.\\n\";\n    v14 = 88LL;\n  }\n  else\n  {\n    fwrite(\"   Use -nonor -noave -gap=10 -len=1 with profilesearch and friends\\n\", 0x43uLL, 1uLL, v6);\n    v13 = \"      to get the closest approximation to HMMER bit scores.\\n\";\n    v14 = 60LL;\n  }\n  fwrite(v13, v14, 1uLL, v6);\n  fwrite(\"   WARNING: There is a loss of information in this conversion.\\n\", 0x3FuLL, 1uLL, v6);\n  fwrite(\"      Neither the scores nor even the rank order of hits will be precisely\\n\", 0x4BuLL, 1uLL, v6);\n  fwrite(\"      preserved in a comparison of HMMER hmmsearch to GCG profilesearch.\\n\", 0x49uLL, 1uLL, v6);\n  fwrite(\"      The profile score is an approximation of the (single-hit) HMMER score.\\n\\n\", 0x4EuLL, 1uLL, v6);\n  fwrite(\"Cons\", 4uLL, 1uLL, v6);\n  if ( dword_463FFC > 0 )\n  {\n    v15 = 0LL;\n    do\n      fprintf(v6, \"    %c \", (unsigned int)s[v15++]);\n    while ( v15 < dword_463FFC );\n  }\n  if ( v4 )\n  {\n    v16 = \"  Gap   Len  QGap  Qlen ..\\n\";\n    v17 = 27LL;\n  }\n  else\n  {\n    v16 = \"  Gap   Len ..\\n\";\n    v17 = 15LL;\n  }\n  fwrite(v16, v17, 1uLL, v6);\n  if ( *((_DWORD *)v5 + 34) > 0 )\n  {\n    v18 = 1LL;\n    do\n    {\n      if ( v18 >= 0xB && (_DWORD)v18 - 1 == 10 * (((signed int)v18 - 1) / 0xAu) )\n        fprintf(v6, \"! %d\\n\", (unsigned int)v18);\n      v19 = sub_43D790(*(_QWORD *)(v5[19] + 8 * v18));\n      fprintf(v6, \" %c  \", (unsigned int)s[v19]);\n      if ( dword_463FFC > 0 )\n      {\n        v20 = 0LL;\n        do\n        {\n          v21 = *(_DWORD *)(*(_QWORD *)(v5[40] + 8 * v20) + 4 * v18);\n          if ( (signed __int64)v18 < *((signed int *)v5 + 34) )\n            v21 += *(_DWORD *)(*(_QWORD *)v5[39] + 4 * v18);\n          fprintf(v6, \"%5d \", (unsigned int)(signed int)((double)(100 * v21) / 1000.0));\n          ++v20;\n        }\n        while ( v20 < dword_463FFC );\n      }\n      v22 = 100LL;\n      v23 = 100LL;\n      v24 = 100LL;\n      v25 = 100LL;\n      if ( v18 >= 2 )\n      {\n        v26 = (_QWORD *)v5[39];\n        v27 = *(_DWORD *)(*v26 + 4 * v18 - 4);\n        v28 = *(_DWORD *)(v26[4] + 4 * v18 - 4);\n        v23 = (unsigned int)(signed int)((double)(100\n                                                * (v28\n                                                 + *(_DWORD *)(*v26 + 4 * v18 - 4)\n                                                 - (*(_DWORD *)(v26[1] + 4 * v18 - 4)\n                                                  + *(_DWORD *)(v26[3] + 4 * v18 - 4))))\n                                       / 10000.0);\n        v24 = (unsigned int)(signed int)((double)(-100 * v28) / 1000.0);\n        v29 = v26[5];\n        v30 = *(_DWORD *)(v26[2] + 4 * v18 - 4);\n        LODWORD(v26) = *(_DWORD *)(v26[6] + 4 * v18 - 4);\n        v22 = (unsigned int)(signed int)((double)(100 * ((signed int)v26 + v27 - (*(_DWORD *)(v29 + 4 * v18 - 4) + v30)))\n                                       / 10000.0);\n        v25 = (unsigned int)(signed int)((double)(-100 * (signed int)v26) / 1000.0);\n      }\n      if ( v4 )\n        fprintf(v6, \"%5d %5d %5d %5d\\n\", v23, v24, v22, v25);\n      else\n        fprintf(v6, \"%5d %5d\\n\", v23, v24, v22, v25);\n      v31 = *((signed int *)v5 + 34);\n      v33 = __OFSUB__(v18, v31);\n      v32 = (signed __int64)(v18++ - v31) < 0;\n    }\n    while ( v32 ^ v33 );\n  }\n  fwrite(\" *  \", 4uLL, 1uLL, v6);\n  if ( dword_464000 <= 0 )\n  {\n    LODWORD(v35) = 0;\n    if ( dword_463FFC > 0 )\n      goto LABEL_60;\n    return fputc(10, v6);\n  }\n  v35 = 0LL;\n  do\n  {\n    v36 = *((signed int *)v5 + 34);\n    if ( v36 <= 0 )\n    {\n      v38 = 0.0;\n      goto LABEL_57;\n    }\n    v34 = (_QWORD *)v5[19];\n    v37 = v36 & 3;\n    if ( (unsigned __int64)(v36 - 1) < 3 )\n    {\n      v38 = 0.0;\n      v39 = 1LL;\n      if ( !v37 )\n        goto LABEL_57;\nLABEL_55:\n      v34 += v39;\n      v41 = -v37;\n      do\n      {\n        v38 = v38 + *(float *)(*v34 + 4 * v35);\n        ++v34;\n        ++v41;\n      }\n      while ( v41 );\n      goto LABEL_57;\n    }\n    v40 = v37 - v36;\n    v38 = 0.0;\n    v39 = 1LL;\n    do\n    {\n      v38 = (float)((float)((float)(v38 + *(float *)(v34[v39] + 4 * v35)) + *(float *)(v34[v39 + 1] + 4 * v35))\n                  + *(float *)(v34[v39 + 2] + 4 * v35))\n          + *(float *)(v34[v39 + 3] + 4 * v35);\n      v39 += 4LL;\n      v40 += 4LL;\n    }\n    while ( v40 );\n    if ( v37 )\n      goto LABEL_55;\nLABEL_57:\n    fprintf(v6, \"%5d \", (unsigned int)(signed int)(float)((float)*((signed int *)v5 + 14) * v38), v34);\n    ++v35;\n  }\n  while ( v35 < dword_464000 );\n  while ( (signed int)v35 < dword_463FFC )\n  {\nLABEL_60:\n    fprintf(v6, \"%5d \", 0LL);\n    LODWORD(v35) = v35 + 1;\n  }\n  return fputc(10, v6);\n}\n", 
            "funcStartAddr": "0x40b070L", 
            "funcEndAddr": "0x40b617L", 
            "funcName": "sub_40B070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B620(__int64 a1, signed __int64 a2, __int64 a3, __int64 *a4, _QWORD *a5)\n{\n  _QWORD *v5; // r14\n  __int64 *v6; // r15\n  __int64 v7; // rbp\n  __int64 v8; // r12\n  __int64 v9; // rdx\n  __int64 v10; // rdi\n  _QWORD *v11; // rbx\n  int *v12; // r13\n  __int64 v13; // rbp\n  __int64 v14; // rax\n  __int64 v15; // rcx\n  __int64 *v16; // rax\n  signed __int64 v17; // r11\n  __m128i v18; // xmm8\n  _QWORD *v19; // rcx\n  __int64 v20; // r12\n  _DWORD *v21; // rbp\n  __int64 v22; // r10\n  _DWORD *v23; // rax\n  __int64 v24; // r8\n  _DWORD *v25; // rbx\n  __int64 v26; // rdx\n  __int64 v27; // r14\n  __int64 v28; // r9\n  int v29; // er15\n  signed __int64 v30; // rcx\n  __int64 v31; // r11\n  __int64 v32; // r13\n  int v33; // edx\n  int v34; // esi\n  int v35; // edi\n  int v36; // edx\n  int v37; // edx\n  int v38; // edx\n  int v39; // edx\n  int v40; // edx\n  _QWORD *v41; // rax\n  __int64 *v42; // rcx\n  int *v43; // r12\n  int v44; // er8\n  int v45; // eax\n  signed __int64 v46; // r14\n  __int64 v47; // r9\n  __int64 v48; // r10\n  signed __int64 v49; // r15\n  unsigned __int64 v50; // r15\n  unsigned __int64 v51; // rcx\n  __int64 v52; // rax\n  signed __int64 v53; // rdx\n  __int64 v54; // rcx\n  __m128i v55; // xmm1\n  __m128i v56; // xmm2\n  __m128i v57; // xmm7\n  __m128i v58; // xmm0\n  __m128i v59; // xmm4\n  __m128i v60; // xmm3\n  __m128i v61; // xmm5\n  __m128i v62; // xmm6\n  __m128i v63; // xmm5\n  __m128i v64; // xmm6\n  __m128i v65; // xmm1\n  __m128i v66; // xmm2\n  signed __int64 v67; // rcx\n  __m128i v68; // xmm4\n  __m128i v69; // xmm0\n  __m128i v70; // xmm3\n  __m128i v71; // xmm3\n  __m128i v72; // xmm0\n  __m128i v73; // xmm0\n  __m128i v74; // xmm0\n  __m128i v75; // xmm1\n  __m128i v76; // xmm2\n  __m128i v77; // xmm2\n  __m128i v78; // xmm0\n  __m128i v79; // xmm1\n  signed __int64 v80; // r15\n  int v81; // ecx\n  int v82; // edx\n  int v83; // er8\n  int v84; // ecx\n  int v85; // eax\n  unsigned int v86; // ebp\n  _QWORD *v88; // [rsp+10h] [rbp-E8h]\n  signed __int64 v89; // [rsp+10h] [rbp-E8h]\n  _QWORD *v90; // [rsp+18h] [rbp-E0h]\n  _QWORD *v91; // [rsp+20h] [rbp-D8h]\n  __int64 v92; // [rsp+28h] [rbp-D0h]\n  __int64 v93; // [rsp+30h] [rbp-C8h]\n  __int64 *v94; // [rsp+38h] [rbp-C0h]\n  __int64 *v95; // [rsp+40h] [rbp-B8h]\n  __int64 v96; // [rsp+48h] [rbp-B0h]\n  __int64 *v97; // [rsp+50h] [rbp-A8h]\n  _QWORD *v98; // [rsp+58h] [rbp-A0h]\n  __int64 v99; // [rsp+60h] [rbp-98h]\n  __int64 v100; // [rsp+68h] [rbp-90h]\n  __int64 v101; // [rsp+70h] [rbp-88h]\n  __int64 v102; // [rsp+78h] [rbp-80h]\n  __int64 v103; // [rsp+80h] [rbp-78h]\n  __int64 v104; // [rsp+88h] [rbp-70h]\n  __int64 v105; // [rsp+90h] [rbp-68h]\n  __int64 v106; // [rsp+98h] [rbp-60h]\n  __int64 v107; // [rsp+A0h] [rbp-58h]\n  __int64 v108; // [rsp+A8h] [rbp-50h]\n  __int64 v109; // [rsp+B0h] [rbp-48h]\n  __int64 v110; // [rsp+B8h] [rbp-40h]\n  __int64 v111; // [rsp+C0h] [rbp-38h]\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = (unsigned int)a2;\n  v93 = a1;\n  sub_402BE0(a4, a2, *(_DWORD *)(a3 + 136), &v91, &v90, &v95, &v94);\n  v10 = v7;\n  v11 = v91;\n  v12 = (int *)*v91;\n  v12[4] = 0;\n  *v12 = *(_DWORD *)(v7 + 336);\n  v12[3] = -987654321;\n  *(_QWORD *)(v12 + 1) = -4241943005140773041LL;\n  v13 = *(unsigned int *)(v7 + 136);\n  if ( (signed int)v13 >= 0 )\n  {\n    v14 = *v94;\n    v15 = *v95;\n    v9 = *v90;\n    a2 = -1LL;\n    do\n    {\n      *(_DWORD *)(v14 + 4 * a2 + 4) = -987654321;\n      *(_DWORD *)(v15 + 4 * a2 + 4) = -987654321;\n      *(_DWORD *)(v9 + 4 * a2 + 4) = -987654321;\n      v13 = *(signed int *)(v10 + 136);\n      ++a2;\n    }\n    while ( a2 < v13 );\n  }\n  if ( (signed int)v8 > 0 )\n  {\n    v88 = v11;\n    v97 = v6;\n    v98 = v5;\n    v16 = *(__int64 **)(v10 + 312);\n    v110 = *(_QWORD *)(v10 + 368);\n    v109 = *v16;\n    v104 = v16[1];\n    v108 = v16[3];\n    v107 = v16[5];\n    v106 = v16[2];\n    v105 = v16[6];\n    v103 = v16[4];\n    v102 = v13;\n    v100 = (signed int)v13;\n    v99 = (unsigned int)(v13 + 1);\n    v96 = v8;\n    v101 = (unsigned int)(v8 + 1);\n    v17 = 1LL;\n    v18 = _mm_load_si128((const __m128i *)&xmmword_4401D0);\n    v92 = v10;\n    while ( 1 )\n    {\n      v19 = v90;\n      v20 = v90[v17 - 1];\n      v21 = (_DWORD *)v90[v17];\n      v22 = v94[v17 - 1];\n      v23 = (_DWORD *)v94[v17];\n      v24 = v95[v17 - 1];\n      v25 = (_DWORD *)v95[v17];\n      v26 = *(char *)(v93 + v17);\n      a2 = v10;\n      v27 = *(_QWORD *)(*(_QWORD *)(v10 + 320) + 8 * v26);\n      v28 = *(_QWORD *)(*(_QWORD *)(v10 + 328) + 8 * v26);\n      v29 = *v12;\n      *v21 = -987654321;\n      *v23 = -987654321;\n      *v25 = -987654321;\n      if ( (signed int)v102 <= 0 )\n      {\n        v42 = &v19[v17];\n        v10 = v92;\n        v41 = v88;\n      }\n      else\n      {\n        v89 = v17;\n        v30 = 1LL;\n        v31 = v100;\n        v32 = v99;\n        do\n        {\n          v33 = *(_DWORD *)(v20 + 4 * v30 - 4) + *(_DWORD *)(v109 + 4 * v30 - 4);\n          v21[v30] = v33;\n          v34 = *(_DWORD *)(v24 + 4 * v30 - 4) + *(_DWORD *)(v108 + 4 * v30 - 4);\n          if ( v34 < v33 )\n            v34 = v33;\n          v21[v30] = v34;\n          v35 = *(_DWORD *)(v22 + 4 * v30 - 4) + *(_DWORD *)(v107 + 4 * v30 - 4);\n          if ( v35 < v34 )\n            v35 = v34;\n          v21[v30] = v35;\n          v36 = v29 + *(_DWORD *)(v110 + 4 * v30);\n          if ( v36 < v35 )\n            v36 = v35;\n          v21[v30] = v36;\n          v37 = *(_DWORD *)(v27 + 4 * v30) + v36;\n          if ( v37 <= -987654322 )\n            v37 = -987654321;\n          v21[v30] = v37;\n          a2 = (unsigned int)(v23[v30 - 1] + *(_DWORD *)(v105 + 4 * v30 - 4));\n          v23[v30] = a2;\n          v38 = v21[v30 - 1] + *(_DWORD *)(v106 + 4 * v30 - 4);\n          if ( v38 < (signed int)a2 )\n            v38 = a2;\n          if ( v38 <= -987654322 )\n            v38 = -987654321;\n          v23[v30] = v38;\n          if ( v30 < v31 )\n          {\n            a2 = (unsigned int)(*(_DWORD *)(v20 + 4 * v30) + *(_DWORD *)(v104 + 4 * v30));\n            v25[v30] = a2;\n            v39 = *(_DWORD *)(v24 + 4 * v30) + *(_DWORD *)(v103 + 4 * v30);\n            if ( v39 < (signed int)a2 )\n              v39 = a2;\n            v25[v30] = v39;\n            v40 = *(_DWORD *)(v28 + 4 * v30) + v39;\n            if ( v40 <= -987654322 )\n              v40 = -987654321;\n            v25[v30] = v40;\n          }\n          ++v30;\n        }\n        while ( v32 != v30 );\n        v41 = v91;\n        v17 = v89;\n        v12 = (int *)v91[v89 - 1];\n        v42 = &v90[v89];\n        v10 = v92;\n      }\n      v43 = (int *)v41[v17];\n      v43[4] = -987654321;\n      v44 = v12[4] + *(_DWORD *)(v10 + 340);\n      v45 = -987654321;\n      if ( v44 <= -987654322 )\n        v44 = -987654321;\n      v43[4] = v44;\n      v46 = *(signed int *)(v10 + 136);\n      if ( v46 > 0 )\n        break;\nLABEL_46:\n      v43[1] = v45;\n      v43[3] = -987654321;\n      v81 = v12[3] + *(_DWORD *)(v10 + 364);\n      if ( v81 <= -987654322 )\n        v81 = -987654321;\n      v43[3] = v81;\n      v82 = v45 + *(_DWORD *)(v10 + 348);\n      if ( v82 < v81 )\n        v82 = v81;\n      v43[3] = v82;\n      *v43 = -987654321;\n      v83 = *(_DWORD *)(v10 + 336) + v44;\n      if ( v83 <= -987654322 )\n        v83 = -987654321;\n      *v43 = v83;\n      v9 = (unsigned int)(*(_DWORD *)(v10 + 360) + v82);\n      if ( (signed int)v9 < v83 )\n        v9 = (unsigned int)v83;\n      *v43 = v9;\n      v43[2] = -987654321;\n      v84 = v12[2] + *(_DWORD *)(v10 + 356);\n      if ( v84 <= -987654322 )\n        v84 = -987654321;\n      v43[2] = v84;\n      v85 = *(_DWORD *)(v10 + 344) + v45;\n      if ( v85 < v84 )\n        v85 = v84;\n      v43[2] = v85;\n      v11 = v91;\n      if ( v17 + 1 == v101 )\n      {\n        v5 = v98;\n        v6 = v97;\n        LODWORD(v8) = v96;\n        goto LABEL_62;\n      }\n      v88 = v91;\n      v12 = (int *)v91[v17++];\n    }\n    v47 = *v42;\n    v48 = *(_QWORD *)(v10 + 376);\n    if ( (unsigned int)v46 < 8 )\n    {\n      v45 = -987654321;\n      v49 = 1LL;\nLABEL_42:\n      v80 = v49 - 1;\n      do\n      {\n        if ( *(_DWORD *)(v47 + 4 * v80 + 4) + *(_DWORD *)(v48 + 4 * v80 + 4) >= v45 )\n          v45 = *(_DWORD *)(v47 + 4 * v80 + 4) + *(_DWORD *)(v48 + 4 * v80 + 4);\n        ++v80;\n      }\n      while ( v80 < v46 );\n      goto LABEL_46;\n    }\n    v50 = v46 & 0xFFFFFFFFFFFFFFF8LL;\n    v51 = ((v46 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n    v52 = ((_BYTE)v51 + 1) & 1;\n    if ( (v46 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n    {\n      v54 = 0LL;\n      v55 = v18;\n      v56 = v18;\n      if ( !v52 )\n        goto LABEL_40;\n    }\n    else\n    {\n      v53 = v52 - 1 - v51;\n      v54 = 0LL;\n      v55 = v18;\n      v56 = v18;\n      do\n      {\n        v57 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v48 + 4 * v54 + 4)),\n                _mm_loadu_si128((const __m128i *)(v47 + 4 * v54 + 4)));\n        v58 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v48 + 4 * v54 + 20)),\n                _mm_loadu_si128((const __m128i *)(v47 + 4 * v54 + 20)));\n        v59 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v48 + 4 * v54 + 36)),\n                _mm_loadu_si128((const __m128i *)(v47 + 4 * v54 + 36)));\n        v60 = _mm_add_epi32(\n                _mm_loadu_si128((const __m128i *)(v48 + 4 * v54 + 52)),\n                _mm_loadu_si128((const __m128i *)(v47 + 4 * v54 + 52)));\n        v61 = _mm_cmpgt_epi32(v57, v55);\n        v62 = _mm_cmpgt_epi32(v58, v56);\n        v63 = _mm_or_si128(_mm_andnot_si128(v61, v55), _mm_and_si128(v57, v61));\n        v64 = _mm_or_si128(_mm_andnot_si128(v62, v56), _mm_and_si128(v58, v62));\n        v65 = _mm_cmpgt_epi32(v59, v63);\n        v66 = _mm_cmpgt_epi32(v60, v64);\n        v55 = _mm_or_si128(_mm_andnot_si128(v65, v63), _mm_and_si128(v59, v65));\n        v56 = _mm_or_si128(_mm_andnot_si128(v66, v64), _mm_and_si128(v60, v66));\n        v54 += 16LL;\n        v53 += 2LL;\n      }\n      while ( v53 );\n      if ( !v52 )\n        goto LABEL_40;\n    }\n    v67 = 4 * v54 | 4;\n    v68 = _mm_add_epi32(_mm_loadu_si128((const __m128i *)(v48 + v67)), _mm_loadu_si128((const __m128i *)(v47 + v67)));\n    v69 = _mm_add_epi32(\n            _mm_loadu_si128((const __m128i *)(v48 + v67 + 16)),\n            _mm_loadu_si128((const __m128i *)(v47 + v67 + 16)));\n    v70 = _mm_cmpgt_epi32(v69, v56);\n    v71 = _mm_or_si128(_mm_andnot_si128(v70, v56), _mm_and_si128(v69, v70));\n    v72 = _mm_cmpgt_epi32(v68, v55);\n    v55 = _mm_or_si128(_mm_andnot_si128(v72, v55), _mm_and_si128(v68, v72));\n    v56 = v71;\nLABEL_40:\n    v73 = _mm_cmpgt_epi32(v55, v56);\n    v74 = _mm_or_si128(_mm_andnot_si128(v73, v56), _mm_and_si128(v55, v73));\n    v75 = _mm_shuffle_epi32(v74, 78);\n    v76 = _mm_cmpgt_epi32(v74, v75);\n    v77 = _mm_or_si128(_mm_andnot_si128(v76, v75), _mm_and_si128(v74, v76));\n    v78 = _mm_shuffle_epi32(v77, 229);\n    v79 = _mm_cmpgt_epi32(v77, v78);\n    v45 = _mm_cvtsi128_si32(_mm_or_si128(_mm_andnot_si128(v79, v78), _mm_and_si128(v77, v79)));\n    if ( v50 == v46 )\n      goto LABEL_46;\n    v49 = v50 | 1;\n    goto LABEL_42;\n  }\nLABEL_62:\n  v86 = *(_DWORD *)(v11[(signed int)v8] + 8LL) + *(_DWORD *)(v10 + 352);\n  if ( v5 )\n  {\n    a2 = v93;\n    sub_403750(v10, v93, v8, v6, (void **)&v111);\n    *v5 = v111;\n  }\n  return sub_415B40(v86, a2, v9);\n}\n", 
            "funcStartAddr": "0x40b620L", 
            "funcEndAddr": "0x40bcc5L", 
            "funcName": "sub_40B620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BCD0(int a1, int a2, int a3)\n{\n  int v3; // er15\n  __int64 v4; // rax\n  __int64 v5; // rbx\n  void *v6; // rax\n\n  v3 = a3;\n  v4 = sub_4382F0(\"histogram.c\", 68LL, 64LL);\n  v5 = v4;\n  *(_DWORD *)(v4 + 8) = a1;\n  *(_DWORD *)(v4 + 12) = a2;\n  *(_DWORD *)(v4 + 28) = 0;\n  *(_QWORD *)(v4 + 16) = 9223372034707292160LL;\n  *(_DWORD *)(v4 + 24) = v3;\n  v6 = (void *)sub_4382F0(\"histogram.c\", 75LL, 4LL * (a2 - a1) + 4);\n  *(_QWORD *)v5 = v6;\n  if ( a2 - a1 >= 0 )\n    memset(v6, 0, 4LL * (unsigned int)(a2 + 1 - a1));\n  *(_QWORD *)(v5 + 32) = 0LL;\n  *(_DWORD *)(v5 + 40) = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x40bcd0L", 
            "funcEndAddr": "0x40bd73L", 
            "funcName": "sub_40BCD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BD80(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rdi\n\n  v1 = ptr;\n  free(*(void **)ptr);\n  v2 = (void *)*((_QWORD *)ptr + 4);\n  if ( v2 )\n    free(v2);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40bd80L", 
            "funcEndAddr": "0x40bda3L", 
            "funcName": "sub_40BD80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BDB0(__int64 a1)\n{\n  __int64 v1; // rbx\n  void *v2; // rdi\n\n  v1 = a1;\n  v2 = *(void **)(a1 + 32);\n  if ( v2 )\n    free(v2);\n  *(_QWORD *)(v1 + 32) = 0LL;\n  *(_DWORD *)(v1 + 40) = 0;\n}\n", 
            "funcStartAddr": "0x40bdb0L", 
            "funcEndAddr": "0x40bdd3L", 
            "funcName": "sub_40BDB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDE0(__int64 *a1, char a2, float a3)\n{\n  __int64 *v3; // rbx\n  signed int v4; // er13\n  __int64 v5; // r14\n  __int64 v6; // r15\n  int v7; // er15\n  int v8; // er12\n  int v9; // ebp\n  char *v10; // rax\n  void *v11; // rdi\n  size_t v12; // rdx\n  int v13; // er12\n  __int64 v14; // ST00_8\n  __int64 v15; // rax\n  __int64 result; // rax\n  signed __int64 v17; // rdx\n\n  v3 = a1;\n  if ( *((_DWORD *)a1 + 10) )\n    sub_4325B0(\"AddToHistogram(): Can't add to a fitted histogram\\n\", a2);\n  v4 = (signed int)floorf(a3);\n  v5 = *((signed int *)a1 + 2);\n  v6 = *((signed int *)a1 + 3);\n  if ( (signed int)v5 > v4 )\n  {\n    v7 = v6 - v5;\n    v8 = *((_DWORD *)a1 + 6);\n    v9 = v8 + v5 - v4;\n    *((_DWORD *)a1 + 2) = v4 - v8;\n    v10 = (char *)sub_438340(\"histogram.c\", 148LL, *a1, 4LL * (v7 + v9 + 1));\n    *a1 = (__int64)v10;\n    memmove(&v10[4 * v9], v10, 4LL * v7 + 4);\n    if ( v9 <= 0 )\n      goto LABEL_10;\n    v11 = (void *)*a1;\n    v12 = 4LL * (unsigned int)(v5 + v8 - 1 - v4) + 4;\n    goto LABEL_9;\n  }\n  if ( (signed int)v6 < v4 )\n  {\n    v13 = v4 + *((_DWORD *)a1 + 6);\n    *((_DWORD *)a1 + 3) = v13;\n    v14 = v13 - (signed int)v5;\n    v15 = sub_438340(\"histogram.c\", 159LL, *a1, 4 * v14 + 4);\n    *a1 = v15;\n    if ( (signed int)v6 - (signed int)v5 < (signed int)v14 )\n    {\n      v11 = (void *)(v15 + 4 * (v6 - v5 + 1));\n      v12 = 4LL * (unsigned int)(v13 - 1 - v6) + 4;\nLABEL_9:\n      memset(v11, 0, v12);\n      goto LABEL_10;\n    }\n  }\nLABEL_10:\n  result = *v3;\n  v17 = v4 - (signed __int64)*((signed int *)v3 + 2);\n  ++*(_DWORD *)(result + 4 * v17);\n  ++*((_DWORD *)v3 + 7);\n  if ( *((_DWORD *)v3 + 5) > v4 )\n    *((_DWORD *)v3 + 5) = v4;\n  if ( *((_DWORD *)v3 + 4) < v4 )\n    *((_DWORD *)v3 + 4) = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bde0L", 
            "funcEndAddr": "0x40bf36L", 
            "funcName": "sub_40BDE0"
        }, 
        {
            "decompiledFuncCode": "int __usercall sub_40BF40@<eax>(signed __int64 a1@<rcx>, signed __int64 a2@<rbp>, FILE *a3@<rdi>, __int64 *a4@<rsi>)\n{\n  __int64 *v4; // r12\n  signed int v5; // er10\n  __int64 v6; // r14\n  __int64 v7; // r8\n  signed __int64 v8; // rdi\n  signed __int64 v9; // r9\n  signed __int64 v10; // r15\n  int v11; // er13\n  int v12; // eax\n  signed __int64 v13; // rbp\n  int v14; // edx\n  int v15; // ebx\n  signed __int64 v16; // rdx\n  int v17; // esi\n  int v18; // ebx\n  int v19; // esi\n  int v20; // ebx\n  __int64 v21; // rdx\n  __int64 v22; // r11\n  signed __int64 v23; // r10\n  unsigned __int64 v24; // rcx\n  unsigned __int64 v25; // rcx\n  unsigned __int64 v26; // rsi\n  __int64 v27; // rbx\n  __m128i v28; // xmm0\n  __int64 v29; // rsi\n  __m128i v30; // xmm1\n  signed __int64 v31; // rcx\n  signed __int64 v32; // rdx\n  const __m128i *v33; // rcx\n  __int64 v34; // rbx\n  __m128i v35; // xmm0\n  __m128i v36; // xmm1\n  signed __int64 v37; // rdi\n  int v38; // er10\n  int v39; // ebx\n  __int64 v40; // rcx\n  __int64 v41; // rdx\n  signed __int64 v42; // rsi\n  unsigned __int64 v43; // r14\n  unsigned __int64 v44; // r15\n  unsigned __int64 v45; // rbx\n  __int64 v46; // r11\n  signed __int64 v47; // rsi\n  signed __int64 v48; // rdi\n  __m128i v49; // xmm0\n  __int64 v50; // rbx\n  __m128i v51; // xmm1\n  __int64 v52; // rbx\n  __m128i v53; // xmm0\n  __m128i v54; // xmm1\n  signed __int64 v55; // rdx\n  FILE *v56; // r14\n  __int64 v57; // r14\n  int v58; // eax\n  int *v59; // rax\n  signed int v60; // er15\n  __int128 v61; // xmm0\n  __int64 v62; // rdx\n  int v63; // eax\n  int v64; // ecx\n  __int64 v65; // rdx\n  signed __int64 v66; // rbp\n  __int64 v67; // rcx\n  int v68; // ebp\n  int v69; // eax\n  int v70; // eax\n  int v71; // ecx\n  float v72; // xmm0_4\n  int v73; // eax\n  bool v74; // zf\n  bool v75; // sf\n  unsigned __int8 v76; // of\n  signed __int64 v77; // rax\n  int v78; // eax\n  int result; // eax\n  FILE *v80; // rbx\n  double v81; // xmm0_8\n  const char *v82; // rsi\n  FILE *stream; // [rsp+0h] [rbp-B8h]\n  FILE *streama; // [rsp+0h] [rbp-B8h]\n  unsigned __int64 v85; // [rsp+8h] [rbp-B0h]\n  int v86; // [rsp+8h] [rbp-B0h]\n  __int64 v87; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v88; // [rsp+18h] [rbp-A0h]\n  int v89; // [rsp+24h] [rbp-94h]\n  int v90; // [rsp+28h] [rbp-90h]\n  unsigned int v91; // [rsp+2Ch] [rbp-8Ch]\n  char s[16]; // [rsp+30h] [rbp-88h]\n  __int128 v93; // [rsp+40h] [rbp-78h]\n  __int128 v94; // [rsp+50h] [rbp-68h]\n  char v95[31]; // [rsp+60h] [rbp-58h]\n  __int16 v96; // [rsp+7Fh] [rbp-39h]\n\n  v4 = a4;\n  stream = a3;\n  v5 = *((_DWORD *)a4 + 5);\n  v6 = v5;\n  v7 = *((signed int *)a4 + 2);\n  v8 = v5 - v7;\n  v9 = *((signed int *)a4 + 4);\n  v10 = v9 - v7;\n  v11 = 0;\n  v12 = 0;\n  if ( (signed int)v8 > (signed int)v9 - (signed int)v7 )\n    goto LABEL_22;\n  v13 = v5 - 1LL - v7;\n  v12 = 0;\n  v14 = *((_DWORD *)a4 + 5);\n  do\n  {\n    v15 = *(_DWORD *)(*a4 + 4 * v13 + 4);\n    if ( v15 > v12 )\n      LODWORD(a1) = v14;\n    if ( v15 >= v12 )\n      v12 = *(_DWORD *)(*a4 + 4 * v13 + 4);\n    ++v14;\n    ++v13;\n  }\n  while ( v13 < v10 );\n  LODWORD(a2) = a1;\n  if ( (signed int)a1 <= v5 )\n  {\nLABEL_13:\n    if ( (signed int)a1 >= (signed int)v9 )\n      goto LABEL_22;\n    goto LABEL_14;\n  }\n  a2 = (signed int)a1;\n  v16 = *a4 - 4 * v7;\n  v17 = 0;\n  while ( 1 )\n  {\n    v18 = 0;\n    if ( *(_DWORD *)(v16 + 4 * a2) <= 0 )\n    {\n      v18 = v17 + 1;\n      if ( v17 == 2 )\n        break;\n    }\n    --a2;\n    v17 = v18;\n    if ( a2 <= v5 )\n      goto LABEL_13;\n  }\n  LODWORD(a2) = a2 + 3;\n  if ( (signed int)a1 < (signed int)v9 )\n  {\nLABEL_14:\n    a1 = (signed int)a1;\n    v19 = 0;\n    while ( 1 )\n    {\n      v20 = 0;\n      if ( *(_DWORD *)(*v4 - 4 * v7 + 4 * a1) <= 0 )\n      {\n        v20 = v19 + 1;\n        if ( v19 == 2 )\n          break;\n      }\n      ++a1;\n      v19 = v20;\n      if ( a1 >= v9 )\n        goto LABEL_22;\n    }\n    LODWORD(a1) = a1 - 3;\n  }\nLABEL_22:\n  v21 = (unsigned int)a1;\n  LODWORD(a1) = a2 - v7;\n  v87 = v21;\n  if ( (signed int)v8 > (signed int)a2 - (signed int)v7 )\n    goto LABEL_37;\n  v22 = *v4;\n  v23 = (signed int)a1;\n  a1 = (signed int)a1;\n  if ( v8 >= (signed int)a1 )\n    a1 = v8;\n  v24 = v7 + a1 + 1 - v6;\n  v11 = 0;\n  if ( v24 < 8 )\n    goto LABEL_35;\n  v85 = v24;\n  v25 = v24 & 0xFFFFFFFFFFFFFFF8LL;\n  v88 = v25;\n  v25 -= 8LL;\n  v26 = v25 >> 3;\n  v27 = ((unsigned __int8)(v25 >> 3) + 1) & 3;\n  if ( v25 >= 0x18 )\n  {\n    v31 = v22 + 4 * (v6 + 28 - v7);\n    v32 = v27 - 1 - v26;\n    v28 = 0LL;\n    v29 = 0LL;\n    v30 = 0LL;\n    do\n    {\n      v28 = _mm_add_epi32(\n              _mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 16)),\n              _mm_add_epi32(\n                _mm_add_epi32(\n                  _mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 48)),\n                  _mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 80))),\n                _mm_add_epi32(_mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 112)), v28)));\n      v30 = _mm_add_epi32(\n              _mm_loadu_si128((const __m128i *)(v31 + 4 * v29)),\n              _mm_add_epi32(\n                _mm_add_epi32(\n                  _mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 32)),\n                  _mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 64))),\n                _mm_add_epi32(_mm_loadu_si128((const __m128i *)(v31 + 4 * v29 - 96)), v30)));\n      v29 += 32LL;\n      v32 += 4LL;\n    }\n    while ( v32 );\n  }\n  else\n  {\n    v28 = 0LL;\n    v29 = 0LL;\n    v30 = 0LL;\n  }\n  LODWORD(v21) = v87;\n  if ( v27 )\n  {\n    v33 = (const __m128i *)(v22 + 4 * (v29 + v6 + 4 - v7));\n    v34 = -v27;\n    do\n    {\n      v28 = _mm_add_epi32(v28, _mm_loadu_si128(v33 - 1));\n      v30 = _mm_add_epi32(v30, _mm_loadu_si128(v33));\n      v33 += 2;\n      ++v34;\n    }\n    while ( v34 );\n  }\n  v35 = _mm_add_epi32(v28, v30);\n  v36 = _mm_add_epi32(_mm_shuffle_epi32(v35, 78), v35);\n  v11 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v36, 229), v36));\n  if ( v85 != v88 )\n  {\n    v8 += v88;\nLABEL_35:\n    v37 = v8 - 1;\n    do\n      v11 += *(_DWORD *)(v22 + 4 * v37++ + 4);\n    while ( v37 < v23 );\n  }\nLABEL_37:\n  v38 = v21 - v7;\n  v39 = 0;\n  if ( (signed int)v10 < (signed int)v21 - (signed int)v7 )\n    goto LABEL_50;\n  v40 = *v4;\n  v41 = (signed int)v10;\n  v42 = v7 - 1 - v9;\n  if ( v42 < v7 - (signed int)v87 - 1 )\n    v42 = v7 - (signed int)v87 - 1;\n  v43 = v42 + v9 + 2 - v7;\n  v39 = 0;\n  if ( v43 < 8 )\n    goto LABEL_48;\n  v44 = v43 & 0xFFFFFFFFFFFFFFF8LL;\n  v45 = ((v43 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n  v46 = ((_BYTE)v45 + 1) & 1;\n  if ( (v43 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n  {\n    v49 = 0LL;\n    v52 = 0LL;\n    v51 = 0LL;\n    if ( v46 )\n    {\nLABEL_45:\n      v51 = _mm_add_epi32(v51, _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v40 + 4 * (v41 - v52) - 28)), 27));\n      v49 = _mm_add_epi32(v49, _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v40 + 4 * (v41 - v52) - 12)), 27));\n      goto LABEL_46;\n    }\n  }\n  else\n  {\n    v47 = v40 + 4 * (v9 - 3 - v7);\n    v48 = v46 - 1 - v45;\n    v49 = 0LL;\n    v50 = 0LL;\n    v51 = 0LL;\n    do\n    {\n      v49 = _mm_add_epi32(\n              _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v47 + 4 * v50 - 32)), 27),\n              _mm_add_epi32(_mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v47 + 4 * v50)), 27), v49));\n      v51 = _mm_add_epi32(\n              _mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v47 + 4 * v50 - 48)), 27),\n              _mm_add_epi32(_mm_shuffle_epi32(_mm_loadu_si128((const __m128i *)(v47 + 4 * v50 - 16)), 27), v51));\n      v50 -= 16LL;\n      v48 += 2LL;\n    }\n    while ( v48 );\n    v52 = -v50;\n    if ( v46 )\n      goto LABEL_45;\n  }\nLABEL_46:\n  v53 = _mm_add_epi32(v49, v51);\n  v54 = _mm_add_epi32(_mm_shuffle_epi32(v53, 78), v53);\n  v39 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v54, 229), v54));\n  if ( v43 != v44 )\n  {\n    v41 -= v44;\nLABEL_48:\n    v55 = v41 + 1;\n    do\n      v39 += *(_DWORD *)(v40 + 4 * v55-- - 4);\n    while ( v55 > v38 );\n  }\nLABEL_50:\n  if ( v11 >= v12 )\n    v12 = v11;\n  if ( v39 >= v12 )\n    v12 = v39;\n  v56 = stream;\n  v86 = (582368447LL * (v12 - 1) >> 35) + ((unsigned __int64)(582368447LL * (v12 - 1)) >> 63) + 1;\n  fprintf(stream, \"%5s %6s %6s  (one = represents %d sequences)\\n\", \"score\", \"obs\", \"exp\", stream);\n  fprintf(v56, \"%5s %6s %6s\\n\", \"-----\", \"---\", \"---\");\n  v96 = 10;\n  v57 = *((signed int *)v4 + 5);\n  v58 = *((_DWORD *)v4 + 4);\n  if ( (signed int)v57 > v58 )\n  {\n    v59 = (int *)(v4 + 5);\n    goto LABEL_92;\n  }\n  v60 = a2;\n  v89 = v11 - 1;\n  v90 = v39 - 1;\n  v91 = a2 + 1;\n  v61 = xmmword_440210;\n  v62 = v87;\n  do\n  {\n    *(_OWORD *)&v95[15] = v61;\n    *(_OWORD *)v95 = v61;\n    v94 = v61;\n    v93 = v61;\n    *(_OWORD *)s = v61;\n    if ( (signed int)v57 >= v60 && (signed int)v57 <= (signed int)v62 )\n    {\n      if ( v60 == (_DWORD)v57 && v60 != *((_DWORD *)v4 + 5) )\n      {\n        sprintf(s, \"<%4d %6d %6s|\", v91, (unsigned int)v11, \"-\");\n        if ( v11 <= 0 )\n          goto LABEL_89;\n        v68 = v89 / v86;\n        if ( v89 / v86 >= 60 )\n          sub_4325B0(\"oops\", (unsigned __int64)\"<%4d %6d %6s|\");\n        if ( v68 < 0 )\n          goto LABEL_89;\n        v78 = -2 - v68;\n        if ( -2 - v68 <= -3 )\n          v78 = -2;\n        v65 = (unsigned int)(v78 + v68 + 2);\n      }\n      else\n      {\n        if ( (_DWORD)v62 != (_DWORD)v57 || (_DWORD)v57 == v58 )\n        {\n          v66 = 4LL * *((signed int *)v4 + 2);\n          v67 = *(unsigned int *)(*v4 - v66 + 4 * v57);\n          if ( *((_DWORD *)v4 + 10) )\n            sprintf(\n              s,\n              \"%5d %6d %6d|\",\n              (unsigned int)v57,\n              v67,\n              (unsigned int)(signed int)*(float *)(v4[4] - v66 + 4 * v57));\n          else\n            sprintf(s, \"%5d %6d %6s|\", (unsigned int)v57, v67, \"-\");\n          BYTE4(v93) = 32;\n          v69 = *(_DWORD *)(*v4 - v66 + 4 * v57);\n          if ( v69 > 0 )\n          {\n            v70 = (v69 - 1) / v86;\n            if ( v70 >= 0 )\n            {\n              v71 = -2 - v70;\n              if ( -2 - v70 <= -3 )\n                v71 = -2;\n              memset((char *)&v93 + 4, 61, (unsigned int)(v70 + v71 + 2) + 1LL);\n            }\n          }\n          if ( *((_DWORD *)v4 + 10) )\n          {\n            v72 = *(float *)(v4[4] - v66 + 4 * v57);\n            if ( (signed int)v72 > 0 )\n            {\n              v73 = (signed int)(float)(v72 + -1.0) / v86;\n              v76 = __OFSUB__(v73, 57);\n              v74 = v73 == 57;\n              v75 = v73 - 57 < 0;\n              v77 = v73 + 20;\n              if ( !((unsigned __int8)(v75 ^ v76) | v74) )\n                v77 = 78LL;\n              s[v77] = 42;\n            }\n          }\n          goto LABEL_89;\n        }\n        sprintf(s, \">%4d %6d %6s|\", v62, (unsigned int)v39, \"-\");\n        if ( v39 <= 0 || (v63 = v90 / v86, v90 / v86 < 0) )\n        {\nLABEL_89:\n          fputs(s, streama);\n          v62 = v87;\n          v61 = xmmword_440210;\n          goto LABEL_90;\n        }\n        v64 = -2 - v63;\n        if ( -2 - v63 <= -3 )\n          v64 = -2;\n        v65 = (unsigned int)(v63 + v64 + 2);\n      }\n      memset((char *)&v93 + 4, 61, v65 + 1);\n      goto LABEL_89;\n    }\nLABEL_90:\n    v58 = *((_DWORD *)v4 + 4);\n    ++v57;\n  }\n  while ( (signed int)v57 - 1 < v58 );\n  v59 = (int *)(v4 + 5);\nLABEL_92:\n  result = *v59;\n  switch ( result )\n  {\n    case 2:\n      v80 = streama;\n      fprintf(streama, \"\\n\\n%% Statistical details of theoretical Gaussian fit:\\n\");\n      fprintf(streama, \"            mean = %10.4f\\n\", *((float *)v4 + 11));\n      v81 = *((float *)v4 + 12);\n      v82 = \"              sd = %10.4f\\n\";\nLABEL_98:\n      fprintf(v80, v82, v81);\n      fprintf(v80, \"chi-sq statistic = %10.4f\\n\", *((float *)v4 + 14));\n      return fprintf(v80, \"  P(chi-square)  = %10.4g\\n\", *((float *)v4 + 15));\n    case 1:\n      v80 = streama;\n      fprintf(streama, \"\\n\\n%% Statistical details of theoretical EVD fit:\\n\");\n      fprintf(streama, \"              mu = %10.4f\\n\", *((float *)v4 + 11));\n      v81 = *((float *)v4 + 12);\n      v82 = \"          lambda = %10.4f\\n\";\n      goto LABEL_98;\n    case 0:\n      result = fprintf(streama, \"\\n\\n%% No statistical fit available\\n\");\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40bf40L", 
            "funcEndAddr": "0x40c6ffL", 
            "funcName": "sub_40BF40"
        }, 
        {
            "decompiledFuncCode": "size_t __usercall sub_40C700@<rax>(FILE *s@<rdi>, double a2@<rax>, __int64 a3@<rsi>)\n{\n  __int64 v3; // rbx\n  int v4; // eax\n  signed int v5; // ecx\n  size_t result; // rax\n  signed int v7; // er15\n  double v8; // xmm5_8\n  float v9; // xmm6_4\n  float v10; // xmm2_4\n  double v11; // xmm3_8\n  double v12; // xmm0_8\n  double v13; // xmm3_8\n  float v14; // xmm1_4\n  float v15; // xmm6_4\n  double v16; // xmm2_8\n  double v17; // xmm0_8\n  bool v18; // sf\n  unsigned __int8 v19; // of\n  double v20; // [rsp+0h] [rbp-28h]\n\n  v20 = a2;\n  v3 = *(signed int *)(a3 + 20);\n  v4 = *(_DWORD *)(a3 + 16);\n  if ( (signed int)v3 <= v4 )\n  {\n    do\n    {\n      v5 = *(_DWORD *)(*(_QWORD *)a3 - 4LL * *(signed int *)(a3 + 8) + 4 * v3);\n      if ( v5 > 0 )\n      {\n        fprintf(s, \"%-6d %f\\n\", (unsigned int)v3, (float)((float)v5 / (float)*(signed int *)(a3 + 28)), *(_QWORD *)&v20);\n        v4 = *(_DWORD *)(a3 + 16);\n      }\n      ++v3;\n    }\n    while ( (signed int)v3 - 1 < v4 );\n  }\n  result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  if ( *(_DWORD *)(a3 + 40) )\n  {\n    v7 = *(_DWORD *)(a3 + 20);\n    if ( v7 <= *(_DWORD *)(a3 + 16) )\n    {\n      v8 = *(double *)&xmmword_440200;\n      do\n      {\n        v9 = (float)v7;\n        v10 = *(float *)(a3 + 48);\n        v11 = (float)((float)((float)((float)v7 + 1.0) - *(float *)(a3 + 44)) * v10);\n        v12 = 1.0;\n        if ( v11 > -3.584730797999763 )\n        {\n          v12 = 0.0;\n          if ( v11 < 708.4 )\n          {\n            *(float *)&v20 = (float)v7;\n            v12 = exp(COERCE_DOUBLE(COERCE_UNSIGNED_INT64((float)((float)((float)v7 + 1.0) - *(float *)(a3 + 44)) * v10) ^ *(_QWORD *)&v8));\n            if ( v12 >= 0.0000001 )\n              v12 = 1.0 - exp(-v12);\n            v8 = *(double *)&xmmword_440200;\n            v9 = (float)v7;\n          }\n        }\n        v13 = 1.0 - v12;\n        v14 = *(float *)(a3 + 48);\n        v15 = v9 - *(float *)(a3 + 44);\n        v16 = (float)(v15 * v14);\n        v17 = 1.0;\n        if ( v16 > -3.584730797999763 )\n        {\n          v17 = 0.0;\n          if ( v16 < 708.4 )\n          {\n            v20 = v13;\n            v17 = exp(COERCE_DOUBLE(COERCE_UNSIGNED_INT64(v15 * v14) ^ *(_QWORD *)&v8));\n            if ( v17 >= 0.0000001 )\n              v17 = 1.0 - exp(-v17);\n          }\n        }\n        fprintf(\n          s,\n          \"%-6d %f\\n\",\n          (unsigned int)v7,\n          v13 - (1.0 - v17),\n          1.0 - v17,\n          v16,\n          v13 - (1.0 - v17),\n          1.0,\n          v8,\n          *(_QWORD *)&v20);\n        v8 = *(double *)&xmmword_440200;\n        v19 = __OFSUB__(v7, *(_DWORD *)(a3 + 16));\n        v18 = v7++ - *(_DWORD *)(a3 + 16) < 0;\n      }\n      while ( v18 ^ v19 );\n    }\n    result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c700L", 
            "funcEndAddr": "0x40c987L", 
            "funcName": "sub_40C700"
        }, 
        {
            "decompiledFuncCode": "double __fastcall __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_40C990(float a1, float a2, float a3)\n{\n  float v3; // xmm3_4\n  double v4; // xmm1_8\n  double result; // xmm0_8\n\n  v3 = a1 - a2;\n  v4 = (float)((float)(a1 - a2) * a3);\n  if ( v4 <= -3.584730797999763 )\n    return 1.0;\n  result = 0.0;\n  if ( v4 < 708.4 )\n  {\n    result = exp(-(v3 * a3));\n    if ( result >= 0.0000001 )\n      result = 1.0 - exp(COERCE_DOUBLE(xmmword_440200 ^ *(_QWORD *)&result));\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c990L", 
            "funcEndAddr": "0x40ca20L", 
            "funcName": "sub_40C990"
        }, 
        {
            "decompiledFuncCode": "size_t __usercall sub_40CA20@<rax>(FILE *s@<rdi>, __int64 a2@<rax>, __int64 a3@<rsi>)\n{\n  __int64 v3; // rbx\n  signed int v4; // ebp\n  size_t result; // rax\n  signed int v6; // ebx\n  double v7; // xmm5_8\n  double v8; // xmm2_8\n  double v9; // xmm3_8\n  double v10; // xmm0_8\n  bool v11; // sf\n  unsigned __int8 v12; // of\n  __int64 v13; // [rsp-8h] [rbp-28h]\n\n  v13 = a2;\n  v3 = *(signed int *)(a3 + 20);\n  if ( (signed int)v3 <= *(_DWORD *)(a3 + 16) )\n  {\n    v4 = 0;\n    do\n    {\n      v4 += *(_DWORD *)(*(_QWORD *)a3 - 4LL * *(signed int *)(a3 + 8) + 4 * v3++);\n      fprintf(s, \"%-6d %f\\n\", (unsigned int)v3, (float)((float)v4 / (float)*(signed int *)(a3 + 28)), v13);\n    }\n    while ( (signed int)v3 - 1 < *(_DWORD *)(a3 + 16) );\n  }\n  result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  if ( *(_DWORD *)(a3 + 40) )\n  {\n    v6 = *(_DWORD *)(a3 + 20);\n    if ( v6 <= *(_DWORD *)(a3 + 16) )\n    {\n      v7 = *(double *)&xmmword_440200;\n      do\n      {\n        *(_QWORD *)&v8 = *(unsigned int *)(a3 + 48);\n        v9 = (float)((float)((float)v6 - *(float *)(a3 + 44)) * *(float *)&v8);\n        v10 = 1.0;\n        if ( v9 > -3.584730797999763 )\n        {\n          v10 = 0.0;\n          if ( v9 < 708.4 )\n          {\n            v8 = *(float *)&v8;\n            v10 = exp(COERCE_DOUBLE(COERCE_UNSIGNED_INT64((float)((float)v6 - *(float *)(a3 + 44)) * v8) ^ *(_QWORD *)&v7));\n            if ( v10 >= 0.0000001 )\n              v10 = 1.0 - exp(-v10);\n          }\n        }\n        fprintf(s, \"%-6d %f\\n\", (unsigned int)v6, 1.0 - v10, 1.0 - v10, v8, v9, 1.0, v7, v13);\n        v7 = *(double *)&xmmword_440200;\n        v12 = __OFSUB__(v6, *(_DWORD *)(a3 + 16));\n        v11 = v6++ - *(_DWORD *)(a3 + 16) < 0;\n      }\n      while ( v11 ^ v12 );\n    }\n    result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ca20L", 
            "funcEndAddr": "0x40cbd8L", 
            "funcName": "sub_40CA20"
        }, 
        {
            "decompiledFuncCode": "size_t __usercall sub_40CBE0@<rax>(FILE *s@<rdi>, __int64 a2@<rax>, __int64 a3@<rsi>)\n{\n  __int64 v3; // rbx\n  signed int v4; // ebp\n  double v5; // xmm0_8\n  double v6; // xmm0_8\n  size_t result; // rax\n  signed int v8; // ebx\n  float v9; // xmm2_4\n  double v10; // xmm3_8\n  double v11; // xmm0_8\n  double v12; // xmm0_8\n  double v13; // xmm0_8\n  bool v14; // sf\n  unsigned __int8 v15; // of\n  __int64 v16; // [rsp-8h] [rbp-28h]\n\n  v16 = a2;\n  v3 = *(signed int *)(a3 + 20);\n  if ( (signed int)v3 <= *(_DWORD *)(a3 + 16) )\n  {\n    v4 = 0;\n    do\n    {\n      v4 += *(_DWORD *)(*(_QWORD *)a3 - 4LL * *(signed int *)(a3 + 8) + 4 * v3);\n      v5 = log((double)v4 / (double)*(signed int *)(a3 + 28));\n      v6 = log(-v5);\n      ++v3;\n      if ( v4 < *(_DWORD *)(a3 + 28) )\n        fprintf(s, \"%-6d %f\\n\", (unsigned int)v3, v6, v16);\n    }\n    while ( (signed int)v3 - 1 < *(_DWORD *)(a3 + 16) );\n  }\n  result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  if ( *(_DWORD *)(a3 + 40) )\n  {\n    v8 = *(_DWORD *)(a3 + 20);\n    if ( v8 <= *(_DWORD *)(a3 + 16) )\n    {\n      do\n      {\n        v9 = *(float *)(a3 + 48);\n        v10 = (float)((float)((float)v8 - *(float *)(a3 + 44)) * v9);\n        v11 = 1.0;\n        if ( v10 > -3.584730797999763 )\n        {\n          v11 = 0.0;\n          if ( v10 < 708.4 )\n          {\n            v11 = exp(-((float)((float)v8 - *(float *)(a3 + 44)) * v9));\n            if ( v11 >= 0.0000001 )\n              v11 = 1.0 - exp(-v11);\n          }\n        }\n        v12 = log(1.0 - v11);\n        v13 = log(-v12);\n        fprintf(s, \"%-6d %f\\n\", (unsigned int)v8, v13, v16);\n        v15 = __OFSUB__(v8, *(_DWORD *)(a3 + 16));\n        v14 = v8++ - *(_DWORD *)(a3 + 16) < 0;\n      }\n      while ( v14 ^ v15 );\n    }\n    result = fwrite(\"&\\n\", 2uLL, 1uLL, s);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cbe0L", 
            "funcEndAddr": "0x40cdb2L", 
            "funcName": "sub_40CBE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CDC0(__int64 a1)\n{\n  int v1; // ebp\n  char *v2; // r15\n  char *v3; // r13\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  unsigned __int64 v6; // rcx\n  __int64 v7; // rdx\n  __int64 v8; // rbp\n  signed __int64 v9; // rcx\n  signed __int64 v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 v12; // rdx\n  __int64 v13; // rcx\n  __int64 v14; // rdx\n  signed __int64 v15; // rsi\n  signed __int64 v16; // rdx\n  __int64 v17; // rcx\n  signed int v18; // eax\n  __int64 v19; // r9\n  float v20; // xmm0_4\n  signed __int64 v21; // rsi\n  __int64 v22; // rbx\n  signed int v23; // ecx\n  __int64 v24; // rdx\n  signed __int64 v25; // rbp\n  signed int v26; // ebx\n  double v27; // xmm0_8\n  float v28; // xmm0_4\n  float v29; // xmm2_4\n  float v30; // xmm3_4\n  int v31; // [rsp+4h] [rbp-44h]\n  int v32; // [rsp+8h] [rbp-40h]\n  int v33; // [rsp+Ch] [rbp-3Ch]\n  int v34; // [rsp+10h] [rbp-38h]\n  char v35; // [rsp+14h] [rbp-34h]\n\n  v1 = *(_DWORD *)(a1 + 16);\n  v31 = *(_DWORD *)(a1 + 20);\n  v32 = *(_DWORD *)(a1 + 16) - v31;\n  v2 = (char *)sub_4382F0(\"histogram.c\", 492LL, 4LL * v32 + 4);\n  v3 = (char *)sub_4382F0(\"histogram.c\", 493LL, 4LL * v32 + 4);\n  if ( v32 < 0 )\n    goto LABEL_22;\n  v4 = (unsigned int)(v1 + 1 - v31);\n  if ( (unsigned int)v4 >= 8 && (v3 >= &v2[4 * v4] || v2 >= &v3[4 * v4]) )\n  {\n    v5 = (unsigned int)v4 & 0xFFFFFFF8;\n    v12 = (unsigned __int64)(v5 - 8) >> 3;\n    v13 = ((_BYTE)v12 + 1) & 3;\n    if ( (unsigned __int64)(v5 - 8) >= 0x18 )\n    {\n      v15 = v13 - 1 - v12;\n      v14 = 0LL;\n      do\n      {\n        *(_OWORD *)&v3[4 * v14] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 16] = 0LL;\n        *(_OWORD *)&v2[4 * v14] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 16] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 32] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 48] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 32] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 48] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 64] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 80] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 64] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 80] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 96] = 0LL;\n        *(_OWORD *)&v3[4 * v14 + 112] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 96] = 0LL;\n        *(_OWORD *)&v2[4 * v14 + 112] = 0LL;\n        v14 += 32LL;\n        v15 += 4LL;\n      }\n      while ( v15 );\n      if ( !v13 )\n      {\nLABEL_21:\n        if ( v5 == v4 )\n          goto LABEL_22;\n        goto LABEL_6;\n      }\n    }\n    else\n    {\n      v14 = 0LL;\n      if ( !v13 )\n        goto LABEL_21;\n    }\n    v16 = 4 * v14 + 16;\n    v17 = -v13;\n    do\n    {\n      *(_OWORD *)&v3[v16 - 16] = 0LL;\n      *(_OWORD *)&v3[v16] = 0LL;\n      *(_OWORD *)&v2[v16 - 16] = 0LL;\n      *(_OWORD *)&v2[v16] = 0LL;\n      v16 += 32LL;\n      ++v17;\n    }\n    while ( v17 );\n    goto LABEL_21;\n  }\n  v5 = 0LL;\nLABEL_6:\n  v6 = v4 - v5 - 1;\n  if ( v4 & 3 )\n  {\n    v7 = -(v4 & 3);\n    do\n    {\n      *(_DWORD *)&v3[4 * v5] = 0;\n      *(_DWORD *)&v2[4 * v5++] = 0;\n      ++v7;\n    }\n    while ( v7 );\n  }\n  if ( v6 >= 3 )\n  {\n    v8 = v4 - v5;\n    v9 = (signed __int64)&v2[4 * v5 + 12];\n    v10 = (signed __int64)&v3[4 * v5 + 12];\n    v11 = 0LL;\n    do\n    {\n      *(_DWORD *)(v10 + 4 * v11 - 12) = 0;\n      *(_DWORD *)(v9 + 4 * v11 - 12) = 0;\n      *(_DWORD *)(v10 + 4 * v11 - 8) = 0;\n      *(_DWORD *)(v9 + 4 * v11 - 8) = 0;\n      *(_DWORD *)(v10 + 4 * v11 - 4) = 0;\n      *(_DWORD *)(v9 + 4 * v11 - 4) = 0;\n      *(_DWORD *)(v10 + 4 * v11) = 0;\n      *(_DWORD *)(v9 + 4 * v11) = 0;\n      v11 += 4LL;\n    }\n    while ( v8 != v11 );\n  }\nLABEL_22:\n  v18 = *(_DWORD *)(a1 + 20);\n  v19 = *(signed int *)(a1 + 16);\n  if ( v18 <= (signed int)v19 )\n  {\n    v20 = (float)*(signed int *)(a1 + 28);\n    v21 = *(_QWORD *)a1 + 4 * (v18 - (signed __int64)*(signed int *)(a1 + 8));\n    v22 = 0LL;\n    v23 = 0;\n    do\n    {\n      v23 += *(_DWORD *)(v21 + 4 * v22);\n      *(float *)&v2[4 * v22] = (float)v23 / v20;\n      *(float *)&v3[4 * v22] = (float)(v22 + v18 + 1);\n      v24 = v18 + v22++;\n    }\n    while ( v24 < v19 );\n  }\n  if ( v18 < (signed int)v19 )\n  {\n    v25 = (signed __int64)&v2[4 * v18];\n    v26 = v18;\n    do\n    {\n      v27 = log(*(float *)(v25 - 4LL * v18));\n      v28 = log(COERCE_DOUBLE(*(_QWORD *)&v27 ^ xmmword_440200));\n      v18 = *(_DWORD *)(a1 + 20);\n      *(float *)(v25 - 4LL * *(signed int *)(a1 + 20)) = v28;\n      ++v26;\n      v25 += 4LL;\n    }\n    while ( v26 < *(_DWORD *)(a1 + 16) );\n  }\n  sub_437090(v3, v2, (unsigned int)v32, &v33, &v34, &v35);\n  v29 = (float)*(signed int *)(a1 + 20);\n  v30 = (float)*(signed int *)(a1 + 16);\n  sub_40D130(a1, 2LL);\n  free(v3);\n  free(v2);\n}\n", 
            "funcStartAddr": "0x40cdc0L", 
            "funcEndAddr": "0x40d129L", 
            "funcName": "sub_40CDC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D130(__int64 a1, int a2, float a3, float a4, float a5, float a6)\n{\n  int v6; // er14\n  __int64 v7; // r12\n  void *v8; // rdi\n  int v9; // ebp\n  int v10; // er15\n  __int64 v11; // rbx\n  signed __int64 v12; // rsi\n  void *v13; // rax\n  __int64 v14; // rdi\n  float v15; // xmm8_4\n  __int64 v16; // r15\n  __int64 v17; // xmm9_8\n  float v18; // xmm1_4\n  double v19; // xmm3_8\n  float v20; // xmm0_4\n  double v21; // xmm2_8\n  double v22; // xmm5_8\n  double v23; // xmm0_8\n  double v24; // xmm5_8\n  float v25; // xmm2_4\n  double v26; // xmm7_8\n  double v27; // xmm3_8\n  double v28; // xmm0_8\n  float v29; // xmm0_4\n  int v30; // eax\n  signed int v31; // ecx\n  __int64 result; // rax\n  float v33; // xmm0_4\n  __int64 v34; // rdx\n  int v35; // ecx\n  float v36; // xmm1_4\n  float v37; // xmm3_4\n  float v38; // xmm3_4\n  double v39; // xmm0_8\n  float v40; // [rsp+4h] [rbp-54h]\n  double v41; // [rsp+8h] [rbp-50h]\n  double v42; // [rsp+10h] [rbp-48h]\n  float v43; // [rsp+2Ch] [rbp-2Ch]\n\n  v6 = a2;\n  v40 = a6;\n  v43 = a5;\n  v7 = a1;\n  v8 = *(void **)(a1 + 32);\n  if ( v8 )\n    free(v8);\n  *(_QWORD *)(v7 + 32) = 0LL;\n  *(_DWORD *)(v7 + 40) = 1;\n  *(float *)(v7 + 48) = a4;\n  *(float *)(v7 + 44) = a3;\n  v9 = *(_DWORD *)(v7 + 8);\n  v10 = *(_DWORD *)(v7 + 12);\n  v11 = *(_DWORD *)(v7 + 12) - v9;\n  v12 = 696LL;\n  v13 = (void *)sub_4382F0(\"histogram.c\", 696LL, 4 * v11 + 4);\n  *(_QWORD *)(v7 + 32) = v13;\n  if ( (signed int)v11 >= 0 )\n  {\n    v12 = 0LL;\n    memset(v13, 0, 4LL * (unsigned int)(v10 + 1 - v9));\n  }\n  v14 = *(unsigned int *)(v7 + 8);\n  if ( (signed int)v14 <= *(_DWORD *)(v7 + 12) )\n  {\n    v16 = (signed int)v14;\n    v17 = xmmword_440200;\n    v15 = a6;\n    do\n    {\n      v18 = *(float *)(v7 + 48);\n      v19 = (double)*(signed int *)(v7 + 28);\n      v20 = (float)(signed int)v16 - *(float *)(v7 + 44);\n      v21 = (float)(v20 * v18);\n      v22 = 1.0;\n      if ( v21 > -3.584730797999763 )\n      {\n        v22 = 0.0;\n        if ( v21 < 708.4 )\n        {\n          v23 = exp(COERCE_DOUBLE(COERCE_UNSIGNED_INT64(v20 * v18) ^ v17));\n          v22 = v23;\n          if ( v23 >= 0.0000001 )\n            v22 = 1.0 - exp(-v23);\n          v15 = v40;\n          v17 = xmmword_440200;\n        }\n      }\n      v24 = v22 * v19;\n      v25 = *(float *)(v7 + 48);\n      v26 = (double)*(signed int *)(v7 + 28);\n      v27 = (float)((float)((float)(v16 + 1) - *(float *)(v7 + 44)) * v25);\n      v28 = 1.0;\n      if ( v27 > -3.584730797999763 )\n      {\n        v28 = 0.0;\n        if ( v27 < 708.4 )\n        {\n          v41 = (double)*(signed int *)(v7 + 28);\n          v42 = v24;\n          v28 = exp(COERCE_DOUBLE(COERCE_UNSIGNED_INT64((float)((float)(v16 + 1) - *(float *)(v7 + 44)) * v25) ^ v17));\n          if ( v28 >= 0.0000001 )\n            v28 = 1.0 - exp(-v28);\n          v15 = v40;\n          v17 = xmmword_440200;\n          v24 = v42;\n          v26 = v41;\n        }\n      }\n      v29 = v24 - v28 * v26;\n      v14 = *(signed int *)(v7 + 8);\n      *(float *)(*(_QWORD *)(v7 + 32) - 4 * v14 + 4 * v16) = v29;\n      v30 = v16++;\n    }\n    while ( v30 < *(_DWORD *)(v7 + 12) );\n  }\n  else\n  {\n    v15 = a6;\n  }\n  *(_DWORD *)(v7 + 56) = 0;\n  v31 = (signed int)v43;\n  result = 0LL;\n  v33 = 0.0;\n  if ( v15 >= (float)(signed int)v43 )\n  {\n    v34 = *(_QWORD *)(v7 + 32);\n    v12 = 4LL * v31 - 4LL * (signed int)v14;\n    v35 = v31 + 1;\n    result = 0LL;\n    v36 = 0.0;\n    do\n    {\n      v37 = *(float *)(v34 + v12);\n      if ( v37 >= 5.0 )\n      {\n        v14 = *(unsigned int *)(*(_QWORD *)v7 + v12);\n        if ( (signed int)v14 >= 5 )\n        {\n          v36 = v36\n              + (float)((float)((float)((float)(signed int)v14 - v37) * (float)((float)(signed int)v14 - v37)) / v37);\n          *(float *)(v7 + 56) = v36;\n          result = (unsigned int)(result + 1);\n        }\n      }\n      v38 = (float)v35;\n      v12 += 4LL;\n      ++v35;\n    }\n    while ( v15 >= v38 );\n  }\n  if ( (signed int)result > v6 + 1 )\n  {\n    v39 = (double)(~v6 + (signed int)result) * 0.5;\n    result = sub_4378E0(v14, v12);\n    v33 = v39;\n  }\n  *(float *)(v7 + 60) = v33;\n  return result;\n}\n", 
            "funcStartAddr": "0x40d130L", 
            "funcEndAddr": "0x40d511L", 
            "funcName": "sub_40D130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D520(__int64 a1, int a2, float a3)\n{\n  __int64 v3; // r8\n  signed int v4; // ecx\n  signed __int64 v5; // rax\n  signed __int64 v6; // rdx\n  signed __int64 v7; // rsi\n  signed int v8; // edi\n  signed int v9; // ebx\n  signed int v10; // ebp\n  signed int v11; // er12\n  int v12; // er13\n  char *v13; // r15\n  char *v14; // r14\n  __int64 v15; // rax\n  __int64 v16; // rcx\n  int v17; // edi\n  __int64 v18; // rdx\n  __int64 v19; // rbp\n  signed int v20; // er12\n  double v21; // xmm0_8\n  double v22; // xmm0_8\n  signed int v23; // eax\n  __int64 v24; // rbx\n  int v25; // eax\n  signed int v26; // eax\n  double v27; // xmm0_8\n  double v28; // xmm0_8\n  signed int v29; // ebp\n  unsigned int v30; // ebx\n  char *v31; // r12\n  char *v32; // rbp\n  void *v33; // rdi\n  float v35; // [rsp+0h] [rbp-78h]\n  int v36; // [rsp+4h] [rbp-74h]\n  __int64 v37; // [rsp+8h] [rbp-70h]\n  float v38; // [rsp+14h] [rbp-64h]\n  float v39; // [rsp+18h] [rbp-60h]\n  float v40; // [rsp+1Ch] [rbp-5Ch]\n  float v41; // [rsp+20h] [rbp-58h]\n  int v42; // [rsp+24h] [rbp-54h]\n  int v43; // [rsp+28h] [rbp-50h]\n  int v44; // [rsp+2Ch] [rbp-4Ch]\n  __int64 v45; // [rsp+30h] [rbp-48h]\n  __int64 v46; // [rsp+38h] [rbp-40h]\n  double v47; // [rsp+40h] [rbp-38h]\n\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 + 20);\n  v5 = *(signed int *)(a1 + 16);\n  v43 = a2;\n  if ( v4 <= (signed int)v5 && a2 )\n  {\n    v6 = v4 - 1LL;\n    v7 = *(_QWORD *)a1 - 4LL * *(signed int *)(a1 + 8);\n    v8 = -1;\n    v9 = v4;\n    do\n    {\n      v10 = *(_DWORD *)(v7 + 4 * v6 + 4);\n      if ( v10 > v8 )\n        v9 = v4;\n      if ( v10 >= v8 )\n        v8 = *(_DWORD *)(v7 + 4 * v6 + 4);\n      ++v6;\n      ++v4;\n    }\n    while ( v6 < v5 );\n  }\n  else\n  {\n    v9 = v4;\n  }\n  v11 = (signed int)fminf(a3, (float)(signed int)v5);\n  v46 = v9 - 1LL;\n  v36 = 0;\n  v45 = v9 - 1LL;\n  v37 = v3;\n  v42 = v9;\n  v35 = (float)v9;\n  while ( 1 )\n  {\n    if ( v11 - v9 < 4 )\n    {\n      v14 = 0LL;\n      v13 = 0LL;\n      v32 = 0LL;\n      v31 = 0LL;\n      goto LABEL_33;\n    }\n    v12 = v11 - v9 + 1;\n    v13 = (char *)sub_4382F0(\"histogram.c\", 600LL, 4LL * v12);\n    v14 = (char *)sub_4382F0(\"histogram.c\", 601LL, 4LL * v12);\n    if ( v11 < v9 )\n      goto LABEL_30;\n    v3 = v37;\n    v15 = *(_QWORD *)v37;\n    v44 = v11;\n    v16 = v11;\n    v17 = *(_DWORD *)(v37 + 8);\n    v18 = 0LL;\n    v19 = v46;\n    v20 = 0;\n    do\n    {\n      *(float *)&v13[v18] = (float)v9 + 0.5;\n      *(_DWORD *)&v14[v18] = *(_DWORD *)(v15 + 4LL * (v9 - v17));\n      v17 = *(_DWORD *)(v37 + 8);\n      v20 += *(_DWORD *)(v15 + 4LL * (v9 - v17));\n      ++v19;\n      ++v9;\n      v18 += 4LL;\n    }\n    while ( v19 < v16 );\n    if ( v20 < 100 )\n      break;\n    if ( v43 )\n    {\n      if ( v36 )\n      {\n        v21 = exp(-((float)(v35 - v39) * v38));\n        v22 = exp(-v21);\n        v23 = (signed int)((double)v20 * v22 / (1.0 - v22));\n        v24 = (unsigned int)(*(_DWORD *)(v37 + 28) - v20);\n        if ( (signed int)v24 > v23 )\n          v24 = (unsigned int)v23;\n      }\n      else\n      {\n        v26 = (signed int)((float)v20 * 0.5819800000000001);\n        v24 = (unsigned int)(*(_DWORD *)(v37 + 28) - v20);\n        if ( (signed int)v24 > v26 )\n          v24 = (unsigned int)v26;\n      }\n      if ( !(unsigned int)sub_40D920(v13, v14, (unsigned int)v12, (unsigned int)v24, &v40, &v41) )\n      {\nLABEL_30:\n        v31 = v14;\n        v32 = v13;\n        v3 = v37;\n        goto LABEL_33;\n      }\n    }\n    else\n    {\n      v25 = sub_40DD10(v13, v14, (unsigned int)v12, &v40, &v41);\n      v24 = v45;\n      if ( !v25 )\n        goto LABEL_30;\n    }\n    v39 = v40;\n    v47 = v40;\n    v45 = v24;\n    v27 = log((double)((signed int)v24 + v20 - 1) / (double)((signed int)v24 + v20));\n    v28 = log(-v27);\n    v38 = v41;\n    v29 = (signed int)(v47 - v28 / v41);\n    free(v13);\n    free(v14);\n    v11 = v44;\n    v3 = v37;\n    v9 = v42;\n    if ( v44 > v29 )\n    {\n      v11 = v29;\n      if ( (unsigned int)++v36 <= 0x63 )\n        continue;\n    }\n    v30 = 1;\n    sub_40D130(v37, 1, v39, v38, v35, (float)v11);\n    return v30;\n  }\n  v31 = v14;\n  v32 = v13;\nLABEL_33:\n  v33 = *(void **)(v3 + 32);\n  if ( v33 )\n  {\n    free(v33);\n    v3 = v37;\n  }\n  *(_QWORD *)(v3 + 32) = 0LL;\n  *(_DWORD *)(v3 + 40) = 0;\n  if ( v32 )\n    free(v13);\n  v30 = 0;\n  if ( v31 )\n    free(v14);\n  return v30;\n}\n", 
            "funcStartAddr": "0x40d520L", 
            "funcEndAddr": "0x40d8ecL", 
            "funcName": "sub_40D520"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40D920(__int64 a1, __int64 a2, unsigned int a3, int a4, __int64 a5, __int64 a6, float a7)\n{\n  unsigned int v7; // ebx\n  __m128 v8; // xmm1\n  unsigned int v9; // er12\n  __m128 v10; // xmm2\n  __m128 v11; // xmm0\n  __m128 v12; // t1\n  __m128 v13; // xmm0\n  __m128 v14; // xmm1\n  double v15; // xmm0_8\n  __m128 v16; // xmm1\n  float v17; // xmm0_4\n  int v18; // er14\n  __m128 v19; // xmm0\n  __m128 v20; // xmm1\n  __m128 v21; // xmm1\n  __int64 v23; // rbp\n  double v24; // xmm0_8\n  __int64 v25; // rbx\n  double v26; // xmm1_8\n  double v27; // xmm0_8\n  double v28; // xmm0_8\n  _DWORD *v29; // rbx\n  _DWORD *v30; // rbp\n  double v31; // xmm1_8\n  double v32; // xmm0_8\n  double v33; // xmm0_8\n  float v34; // [rsp+0h] [rbp-98h]\n  float v35; // [rsp+4h] [rbp-94h]\n  double v36; // [rsp+8h] [rbp-90h]\n  float v37; // [rsp+14h] [rbp-84h]\n  double v38; // [rsp+18h] [rbp-80h]\n  __m128 v39; // [rsp+20h] [rbp-78h]\n  double v40; // [rsp+38h] [rbp-60h]\n  __m128 v41; // [rsp+40h] [rbp-58h]\n  _DWORD *v42; // [rsp+50h] [rbp-48h]\n  _DWORD *v43; // [rsp+58h] [rbp-40h]\n  double v44; // [rsp+60h] [rbp-38h]\n\n  v42 = (_DWORD *)a6;\n  v43 = (_DWORD *)a5;\n  v35 = a7;\n  LODWORD(v38) = a4;\n  v7 = a3;\n  v8 = (__m128)0x3E4CCCCDu;\n  v9 = 0;\n  do\n  {\n    v41 = v8;\n    sub_40E9C0(a1, a2, v7, LODWORD(v38), &v34, &v37);\n    if ( COERCE_FLOAT(LODWORD(v34) & xmmword_440230) < 0.0000099999997 )\n    {\nLABEL_18:\n      if ( (signed int)v7 <= 0 )\n      {\n        v31 = v41.m128_f32[0];\n        v36 = 0.0;\n        v39.m128_u64[0] = 0LL;\n        v29 = v43;\n        v30 = v42;\n      }\n      else\n      {\n        v40 = v41.m128_f32[0];\n        v23 = v7;\n        v24 = 0.0;\n        v25 = 0LL;\n        v26 = 0.0;\n        do\n        {\n          v36 = v26;\n          *(double *)v39.m128_u64 = v24;\n          v27 = 1.0;\n          if ( a2 )\n            v27 = (double)*(signed int *)(a2 + 4 * v25);\n          v44 = v27;\n          v28 = exp(-(*(float *)(a1 + 4 * v25) * v40));\n          v26 = v36 + v28 * v44;\n          v24 = *(double *)v39.m128_u64 + v44;\n          ++v25;\n        }\n        while ( v23 != v25 );\n        v29 = v43;\n        v30 = v42;\n        v36 = v26;\n        v31 = v40;\n        *(double *)v39.m128_u64 = v24;\n      }\n      v40 = v31;\n      v38 = (double)SLODWORD(v38);\n      v32 = exp(-(v35 * v31));\n      v33 = log((v32 * v38 + v36) / *(double *)v39.m128_u64);\n      *(float *)&v33 = -v33 / v40;\n      *v30 = v41.m128_i32[0];\n      *v29 = LODWORD(v33);\n      return 1LL;\n    }\n    v10 = v41;\n    v11.m128_f32[0] = v41.m128_f32[0] - (float)(v34 / v37);\n    v10.m128_f32[0] = v41.m128_f32[0] - (float)(v34 / v37);\n    v12.m128_i32[0] = 0;\n    v13 = _mm_cmpgt_ss(v11, v12);\n    ++v9;\n    v8 = _mm_or_ps(_mm_and_ps(v10, v13), _mm_andnot_ps(v13, (__m128)0x3A83126Fu));\n  }\n  while ( v9 < 0x64 );\n  sub_40E9C0(a1, a2, v7, LODWORD(v38), &v34, &v37);\n  if ( v34 >= 0.0 )\n  {\n    LODWORD(v36) = 1045220557;\n    while ( 1 )\n    {\n      v17 = *(float *)&v36 + 0.1;\n      *(float *)&v36 = v17;\n      sub_40E9C0(a1, a2, v7, LODWORD(v38), &v34, &v37);\n      if ( *(float *)&v36 > 100.0 )\n        break;\n      v14 = (__m128)0x3E4CCCCDu;\n      if ( v34 <= 0.0 )\n      {\nLABEL_12:\n        v18 = 0;\n        while ( 1 )\n        {\n          v19 = v14;\n          v19.m128_f32[0] = (float)(v14.m128_f32[0] + *(float *)&v36) * 0.5;\n          v41 = v19;\n          v39 = v14;\n          sub_40E9C0(a1, a2, v7, LODWORD(v38), &v34, &v37);\n          v19.m128_f32[0] = v34;\n          if ( COERCE_FLOAT(LODWORD(v34) & xmmword_440230) < 0.0000099999997 )\n            break;\n          v20.m128_i32[0] = 0;\n          v21 = _mm_cmplt_ss(v20, v19);\n          v14 = _mm_or_ps(_mm_andnot_ps(v21, v39), _mm_and_ps(v21, v41));\n          if ( v34 <= 0.0 )\n            LODWORD(v36) = v41.m128_i32[0];\n          if ( (unsigned int)++v18 >= 0x64 )\n            return 0LL;\n        }\n        goto LABEL_18;\n      }\n    }\n  }\n  else\n  {\n    v14.m128_i32[0] = 1045220557;\n    LODWORD(v36) = 1045220557;\n    while ( 1 )\n    {\n      v15 = v14.m128_f32[0] + -0.03;\n      v16 = 0LL;\n      v16.m128_f32[0] = v15;\n      if ( v16.m128_f32[0] < 0.0 )\n        break;\n      v39 = v16;\n      sub_40E9C0(a1, a2, v7, LODWORD(v38), &v34, &v37);\n      v14 = v39;\n      if ( v34 >= 0.0 )\n        goto LABEL_12;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40d920L", 
            "funcEndAddr": "0x40dd01L", 
            "funcName": "sub_40D920"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40DD10(__int64 a1, __int64 a2, int a3, _DWORD *a4, _DWORD *a5)\n{\n  __int64 v5; // r14\n  __m128 v6; // xmm0\n  unsigned int v7; // ebp\n  __m128 v8; // xmm2\n  __m128 v9; // xmm0\n  __m128 v10; // t1\n  __m128 v11; // xmm0\n  __m128 v12; // xmm1\n  __m128 v13; // xmm0\n  float v14; // xmm1_4\n  float v15; // xmm0_4\n  int v16; // er15\n  __m128 v17; // xmm0\n  __m128 v18; // xmm1\n  __m128 v19; // xmm1\n  double v21; // xmm0_8\n  __int64 v22; // rbp\n  double v23; // xmm1_8\n  double v24; // xmm0_8\n  double v25; // xmm0_8\n  double v26; // xmm0_8\n  float v27; // [rsp+0h] [rbp-78h]\n  float v28; // [rsp+4h] [rbp-74h]\n  double v29; // [rsp+8h] [rbp-70h]\n  __m128 v30; // [rsp+10h] [rbp-68h]\n  __m128 v31; // [rsp+20h] [rbp-58h]\n  _DWORD *v32; // [rsp+30h] [rbp-48h]\n  _DWORD *v33; // [rsp+38h] [rbp-40h]\n  double v34; // [rsp+40h] [rbp-38h]\n\n  v32 = a5;\n  v33 = a4;\n  LODWORD(v5) = a3;\n  v6 = (__m128)0x3E4CCCCDu;\n  v7 = 0;\n  do\n  {\n    v31 = v6;\n    sub_40E7C0(a1, a2, (unsigned int)v5, &v27, &v28);\n    if ( COERCE_FLOAT(LODWORD(v27) & xmmword_440230) < 0.0000099999997 )\n    {\nLABEL_19:\n      if ( (signed int)v5 <= 0 )\n      {\n        v23 = 0.0;\n        v21 = 0.0;\n      }\n      else\n      {\n        v5 = (unsigned int)v5;\n        v21 = 0.0;\n        v22 = 0LL;\n        v23 = 0.0;\n        do\n        {\n          v29 = v23;\n          *(double *)v30.m128_u64 = v21;\n          v24 = 1.0;\n          if ( a2 )\n            v24 = (double)*(signed int *)(a2 + 4 * v22);\n          v34 = v24;\n          v25 = exp(COERCE_FLOAT(COERCE_UNSIGNED_INT(*(float *)(a1 + 4 * v22) * v31.m128_f32[0]) ^ xmmword_440220));\n          v23 = v29 + v25 * v34;\n          v21 = *(double *)v30.m128_u64 + v34;\n          ++v22;\n        }\n        while ( v5 != v22 );\n      }\n      v26 = log(v23 / v21);\n      *(float *)&v26 = -v26 / v31.m128_f32[0];\n      *v32 = v31.m128_i32[0];\n      *v33 = LODWORD(v26);\n      return 1LL;\n    }\n    v8 = v31;\n    v9.m128_f32[0] = v31.m128_f32[0] - (float)(v27 / v28);\n    v8.m128_f32[0] = v31.m128_f32[0] - (float)(v27 / v28);\n    v10.m128_i32[0] = 0;\n    v11 = _mm_cmpgt_ss(v9, v10);\n    ++v7;\n    v6 = _mm_or_ps(_mm_and_ps(v8, v11), _mm_andnot_ps(v11, (__m128)0x3A83126Fu));\n  }\n  while ( v7 < 0x64 );\n  sub_40E7C0(a1, a2, (unsigned int)v5, &v27, &v28);\n  if ( v27 >= 0.0 )\n  {\n    v14 = 0.2;\n    while ( 1 )\n    {\n      v15 = v14 + 0.1;\n      *(float *)&v29 = v15;\n      sub_40E7C0(a1, a2, (unsigned int)v5, &v27, &v28);\n      v14 = *(float *)&v29;\n      if ( *(float *)&v29 > 100.0 )\n        break;\n      if ( v27 <= 0.0 )\n      {\n        v12 = (__m128)0x3E4CCCCDu;\nLABEL_13:\n        v16 = 0;\n        while ( 1 )\n        {\n          v30 = v12;\n          v17 = v12;\n          v17.m128_f32[0] = (float)(v12.m128_f32[0] + *(float *)&v29) * 0.5;\n          v31 = v17;\n          sub_40E7C0(a1, a2, (unsigned int)v5, &v27, &v28);\n          v17.m128_f32[0] = v27;\n          if ( COERCE_FLOAT(LODWORD(v27) & xmmword_440230) < 0.0000099999997 )\n            break;\n          v18.m128_i32[0] = 0;\n          v19 = _mm_cmplt_ss(v18, v17);\n          v12 = _mm_or_ps(_mm_andnot_ps(v19, v30), _mm_and_ps(v19, v31));\n          if ( v27 <= 0.0 )\n            LODWORD(v29) = v31.m128_i32[0];\n          if ( (unsigned int)++v16 >= 0x64 )\n            return 0LL;\n        }\n        goto LABEL_19;\n      }\n    }\n  }\n  else\n  {\n    v12.m128_i32[0] = 1045220557;\n    LODWORD(v29) = 1045220557;\n    while ( 1 )\n    {\n      v13 = 0LL;\n      *(double *)v13.m128_u64 = v12.m128_f32[0] + -0.1;\n      v13.m128_f32[0] = *(double *)v13.m128_u64;\n      if ( v13.m128_f32[0] < 0.0 )\n        break;\n      v30 = v13;\n      sub_40E7C0(a1, a2, (unsigned int)v5, &v27, &v28);\n      v12 = v30;\n      if ( v27 >= 0.0 )\n        goto LABEL_13;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40dd10L", 
            "funcEndAddr": "0x40e031L", 
            "funcName": "sub_40DD10"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E0F0(__int64 a1)\n{\n  __int64 v1; // r15\n  void *v2; // rdi\n  signed int v3; // eax\n  signed __int64 result; // rax\n  signed int v5; // ecx\n  signed __int64 v6; // rdx\n  float v7; // xmm1_4\n  float v8; // xmm0_4\n  signed __int64 v9; // rsi\n  float v10; // xmm3_4\n  float v11; // xmm4_4\n  float v12; // xmm0_4\n  float v13; // xmm0_4\n  int v14; // ebp\n  int v15; // er14\n  __int64 v16; // rbx\n  void *v17; // rax\n  __int64 v18; // rsi\n  __int64 v19; // rbx\n  float v20; // xmm0_4\n  double v21; // ST10_8\n  double v22; // xmm1_8\n  float v23; // xmm0_4\n  __int64 v24; // rax\n  signed __int64 v25; // rcx\n  signed __int64 v26; // rax\n  signed __int64 v27; // rsi\n  signed __int64 v28; // rdx\n  signed __int64 v29; // rsi\n  signed int v30; // edi\n  float v31; // xmm1_4\n  float v32; // xmm2_4\n  signed int v33; // ebx\n  __int64 v34; // rdi\n  float v35; // xmm0_4\n\n  v1 = a1;\n  v2 = *(void **)(a1 + 32);\n  if ( v2 )\n    free(v2);\n  *(_QWORD *)(v1 + 32) = 0LL;\n  *(_DWORD *)(v1 + 40) = 0;\n  v3 = *(_DWORD *)(v1 + 28);\n  if ( v3 > 999 )\n  {\n    v5 = *(_DWORD *)(v1 + 20);\n    v6 = *(signed int *)(v1 + 16);\n    if ( v5 <= (signed int)v6 )\n    {\n      v9 = v5 - 1LL;\n      v8 = 0.0;\n      v7 = 0.0;\n      do\n      {\n        v10 = (float)v5 + 0.5;\n        v11 = (float)*(signed int *)(*(_QWORD *)v1 - 4LL * *(signed int *)(v1 + 8) + 4 * v9 + 4) * v10;\n        v7 = v7 + v11;\n        v8 = v8 + (float)(v11 * v10);\n        ++v9;\n        ++v5;\n      }\n      while ( v9 < v6 );\n    }\n    else\n    {\n      v7 = 0.0;\n      v8 = 0.0;\n    }\n    *(_DWORD *)(v1 + 40) = 2;\n    *(float *)(v1 + 44) = v7 / (float)v3;\n    v12 = (float)(v8 - (float)((float)(v7 * v7) / (float)v3)) / (float)(v3 - 1);\n    if ( v12 < 0.0 )\n      v13 = sqrtf(v12);\n    else\n      v13 = fsqrt(v12);\n    *(float *)(v1 + 48) = v13;\n    v14 = *(_DWORD *)(v1 + 8);\n    v15 = *(_DWORD *)(v1 + 12);\n    v16 = *(_DWORD *)(v1 + 12) - v14;\n    v17 = (void *)sub_4382F0(\"histogram.c\", 790LL, 4 * v16 + 4);\n    *(_QWORD *)(v1 + 32) = v17;\n    if ( (signed int)v16 >= 0 )\n      memset(v17, 0, 4LL * (unsigned int)(v15 + 1 - v14));\n    LODWORD(v18) = *(_DWORD *)(v1 + 8);\n    if ( (signed int)v18 <= *(_DWORD *)(v1 + 12) )\n    {\n      v19 = (signed int)v18;\n      do\n      {\n        v20 = (float)(signed int)v19 + 0.5 - *(float *)(v1 + 44);\n        v21 = (float)*(signed int *)(v1 + 28);\n        v22 = *(float *)(v1 + 48);\n        v23 = exp(v20 * v20 / (v22 * -2.0 * v22)) * (1.0 / (v22 * 2.506627216001613)) * v21;\n        v18 = *(signed int *)(v1 + 8);\n        *(float *)(*(_QWORD *)(v1 + 32) - 4 * v18 + 4 * v19++) = v23;\n      }\n      while ( (signed int)v19 - 1 < *(_DWORD *)(v1 + 12) );\n    }\n    *(_DWORD *)(v1 + 56) = 0;\n    v24 = *(signed int *)(v1 + 20);\n    v25 = *(signed int *)(v1 + 16);\n    if ( (signed int)v24 > (signed int)v25 )\n      goto LABEL_29;\n    v26 = v24 - 1;\n    v27 = 4LL * (signed int)v18;\n    v28 = *(_QWORD *)(v1 + 32) - v27;\n    v29 = -v27;\n    v30 = 0;\n    v31 = 0.0;\n    do\n    {\n      v32 = *(float *)(v28 + 4 * v26 + 4);\n      if ( v32 >= 5.0 )\n      {\n        v33 = *(_DWORD *)(v29 + *(_QWORD *)v1 + 4 * v26 + 4);\n        if ( v33 >= 5 )\n        {\n          v31 = v31 + (float)((float)((float)((float)v33 - v32) * (float)((float)v33 - v32)) / v32);\n          *(float *)(v1 + 56) = v31;\n          ++v30;\n        }\n      }\n      ++v26;\n    }\n    while ( v26 < v25 );\n    if ( v30 < 4 )\n    {\nLABEL_29:\n      *(_DWORD *)(v1 + 60) = 0;\n    }\n    else\n    {\n      v34 = (unsigned int)(v30 - 3);\n      sub_4378E0(v34, v29);\n      v35 = (double)(signed int)v34 * 0.5;\n      *(float *)(v1 + 60) = v35;\n    }\n    result = 1LL;\n  }\n  else\n  {\n    *(_DWORD *)(v1 + 40) = 0;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e0f0L", 
            "funcEndAddr": "0x40e3dfL", 
            "funcName": "sub_40E0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E3E0(__int64 a1, float a2, float a3)\n{\n  __int64 v3; // r15\n  void *v4; // rdi\n  int v5; // ebp\n  int v6; // er14\n  __int64 v7; // rbx\n  void *v8; // rax\n  __int64 v9; // rsi\n  __int64 v10; // rbx\n  float v11; // xmm0_4\n  double v12; // ST10_8\n  double v13; // xmm1_8\n  float v14; // xmm0_4\n  __int64 result; // rax\n  __int64 v16; // rcx\n  float v17; // xmm0_4\n  signed __int64 v18; // rdx\n  signed __int64 v19; // rdi\n  signed int v20; // esi\n  float v21; // xmm1_4\n  float v22; // xmm2_4\n  signed int v23; // ebx\n  __int64 v24; // rsi\n\n  v3 = a1;\n  v4 = *(void **)(a1 + 32);\n  if ( v4 )\n    free(v4);\n  *(_QWORD *)(v3 + 32) = 0LL;\n  *(_DWORD *)(v3 + 40) = 2;\n  *(float *)(v3 + 44) = a2;\n  *(float *)(v3 + 48) = a3;\n  v5 = *(_DWORD *)(v3 + 8);\n  v6 = *(_DWORD *)(v3 + 12);\n  v7 = *(_DWORD *)(v3 + 12) - v5;\n  v8 = (void *)sub_4382F0(\"histogram.c\", 845LL, 4 * v7 + 4);\n  *(_QWORD *)(v3 + 32) = v8;\n  if ( (signed int)v7 >= 0 )\n    memset(v8, 0, 4LL * (unsigned int)(v6 + 1 - v5));\n  LODWORD(v9) = *(_DWORD *)(v3 + 8);\n  if ( (signed int)v9 <= *(_DWORD *)(v3 + 12) )\n  {\n    v10 = (signed int)v9;\n    do\n    {\n      v11 = (float)(signed int)v10 + 0.5 - *(float *)(v3 + 44);\n      v12 = (float)*(signed int *)(v3 + 28);\n      v13 = *(float *)(v3 + 48);\n      v14 = exp(v11 * v11 / (v13 * -2.0 * v13)) * (1.0 / (v13 * 2.506627216001613)) * v12;\n      v9 = *(signed int *)(v3 + 8);\n      *(float *)(*(_QWORD *)(v3 + 32) - 4 * v9 + 4 * v10++) = v14;\n    }\n    while ( (signed int)v10 - 1 < *(_DWORD *)(v3 + 12) );\n  }\n  *(_DWORD *)(v3 + 56) = 0;\n  result = *(signed int *)(v3 + 20);\n  v16 = *(signed int *)(v3 + 16);\n  v17 = 0.0;\n  if ( (signed int)result <= (signed int)v16 )\n  {\n    --result;\n    v18 = *(_QWORD *)(v3 + 32) - 4LL * (signed int)v9;\n    v19 = -4LL * (signed int)v9;\n    v20 = 0;\n    v21 = 0.0;\n    do\n    {\n      v22 = *(float *)(v18 + 4 * result + 4);\n      if ( v22 >= 5.0 )\n      {\n        v23 = *(_DWORD *)(v19 + *(_QWORD *)v3 + 4 * result + 4);\n        if ( v23 >= 5 )\n        {\n          v21 = v21 + (float)((float)((float)((float)v23 - v22) * (float)((float)v23 - v22)) / v22);\n          *(float *)(v3 + 56) = v21;\n          ++v20;\n        }\n      }\n      ++result;\n    }\n    while ( result < v16 );\n    v17 = 0.0;\n    if ( v20 >= 2 )\n    {\n      v24 = (unsigned int)(v20 - 1);\n      result = sub_4378E0(v19, v24);\n      v17 = (double)(signed int)v24 * 0.5;\n    }\n  }\n  *(float *)(v3 + 60) = v17;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e3e0L", 
            "funcEndAddr": "0x40e613L", 
            "funcName": "sub_40E3E0"
        }, 
        {
            "decompiledFuncCode": "double __fastcall sub_40E620(float a1, float a2, float a3)\n{\n  double v3; // xmm0_8\n  double v4; // ST10_8\n  double v5; // xmm0_8\n\n  v3 = -((float)(a1 - a2) * a3);\n  v4 = v3;\n  v5 = exp(v3);\n  return exp(v4 - v5) * a3;\n}\n", 
            "funcStartAddr": "0x40e620L", 
            "funcEndAddr": "0x40e66bL", 
            "funcName": "sub_40E620"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_40E740(double a1, float a2)\n{\n  double v2; // xmm0_8\n  float v4; // [rsp+8h] [rbp-10h]\n\n  v4 = *(float *)&a1;\n  do\n  {\n    do\n    {\n      sub_437B60();\n      *(float *)&a1 = a1;\n    }\n    while ( *(float *)&a1 == 0.0 );\n  }\n  while ( *(float *)&a1 == 1.0 );\n  v2 = log(*(float *)&a1);\n  return v4 - log(-v2) / a2;\n}\n", 
            "funcStartAddr": "0x40e740L", 
            "funcEndAddr": "0x40e7baL", 
            "funcName": "sub_40E740"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40E7C0(__int64 a1, __int64 a2, unsigned int a3, float *a4, float *a5, __m128d a6)\n{\n  float *v6; // r14\n  float *v7; // r15\n  __int64 v8; // r13\n  double v9; // xmm1_8\n  __int64 v10; // rbp\n  double v11; // xmm5_8\n  __m128d v12; // xmm0\n  __m128d v13; // ST50_16\n  __m128d v14; // xmm1\n  __m128d v15; // ST30_16\n  __m128d v16; // xmm0\n  __m128d v17; // ST70_16\n  __m128d v18; // xmm0\n  __m128d v19; // ST30_16\n  __m128 v20; // xmm4\n  double v21; // xmm2_8\n  double v22; // xmm6_8\n  float v23; // xmm1_4\n  float v24; // xmm0_4\n  double v25; // [rsp+0h] [rbp-B8h]\n  __int32 v26; // [rsp+Ch] [rbp-ACh]\n  __m128d v27; // [rsp+10h] [rbp-A8h]\n  __m128d v28; // [rsp+20h] [rbp-98h]\n  double v29; // [rsp+40h] [rbp-78h]\n  double v30; // [rsp+48h] [rbp-70h]\n  unsigned __int64 v31; // [rsp+60h] [rbp-58h]\n\n  v6 = a5;\n  v7 = a4;\n  if ( (signed int)a3 <= 0 )\n  {\n    v21 = *(float *)a6.m128d_f64;\n    v20 = 0LL;\n    v22 = 0.0;\n    v11 = 0.0;\n    v9 = 0.0;\n  }\n  else\n  {\n    v26 = LODWORD(a6.m128d_f64[0]);\n    a6.m128d_f64[0] = *(float *)a6.m128d_f64;\n    v31 = *(_QWORD *)&a6.m128d_f64[0];\n    v28 = _mm_xor_pd((__m128d)xmmword_440200, a6);\n    v8 = a3;\n    v27 = 0LL;\n    v9 = 0.0;\n    v10 = 0LL;\n    v11 = 0.0;\n    v25 = 0.0;\n    do\n    {\n      v29 = v9;\n      v30 = v11;\n      v12 = (__m128d)0x3FF0000000000000uLL;\n      if ( a2 )\n      {\n        v12 = 0LL;\n        v12.m128d_f64[0] = (double)*(signed int *)(a2 + 4 * v10);\n      }\n      v13 = v12;\n      v14 = 0LL;\n      v14.m128d_f64[0] = *(float *)(a1 + 4 * v10);\n      v15 = v14;\n      v16.m128d_f64[1] = v28.m128d_f64[1];\n      v16.m128d_f64[0] = exp(v28.m128d_f64[0] * v14.m128d_f64[0]);\n      v17 = v16;\n      v18 = (__m128d)*(unsigned int *)(a1 + 4 * v10);\n      v18.m128d_f64[0] = *(float *)v18.m128d_f64;\n      v14.m128d_f64[1] = v13.m128d_f64[1];\n      v14.m128d_f64[0] = v13.m128d_f64[0] * v18.m128d_f64[0];\n      v19 = _mm_mul_pd(_mm_unpckl_pd(v15, v18), _mm_unpckl_pd(v13, v14));\n      v25 = v25 + v19.m128d_f64[0];\n      v18.m128d_f64[0] = exp(v18.m128d_f64[0] * v28.m128d_f64[0]);\n      v27 = _mm_add_pd(v27, _mm_mul_pd(_mm_unpckl_pd(v17, v18), v19));\n      v11 = v30 + exp(*(float *)(a1 + 4 * v10) * v28.m128d_f64[0]) * v13.m128d_f64[0];\n      v9 = v29 + v13.m128d_f64[0];\n      ++v10;\n    }\n    while ( v8 != v10 );\n    LODWORD(a6.m128d_f64[0]) = v26;\n    v20 = (__m128)v27;\n    v21 = *(double *)&v31;\n    v22 = v25;\n  }\n  v23 = 1.0 / v21 - v22 / v9 + *(double *)v20.m128_u64 / v11;\n  *v7 = v23;\n  v24 = *(double *)v20.m128_u64 / v11 * (*(double *)v20.m128_u64 / v11)\n      - COERCE_DOUBLE(_mm_movehl_ps(v20, v20)) / v11\n      - 1.0 / (float)(*(float *)a6.m128d_f64 * *(float *)a6.m128d_f64);\n  *v6 = v24;\n}\n", 
            "funcStartAddr": "0x40e7c0L", 
            "funcEndAddr": "0x40e9bfL", 
            "funcName": "sub_40E7C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40E9C0(__int64 a1, __int64 a2, unsigned int a3, signed int a4, float *a5, _DWORD *a6, float a7, float a8)\n{\n  _DWORD *v8; // r14\n  float *v9; // r15\n  signed int v10; // er12\n  _DWORD *v11; // r15\n  __m128d v12; // xmm0\n  __int64 v13; // r13\n  __m128d v14; // xmm0\n  double v15; // xmm1_8\n  __int64 v16; // r14\n  __m128d v17; // xmm2\n  __m128d v18; // xmm0\n  __m128d v19; // ST00_16\n  __m128d v20; // xmm1\n  __m128d x; // ST50_16\n  __m128d v22; // xmm0\n  __m128d v23; // ST70_16\n  __m128d v24; // xmm0\n  __m128d v25; // ST80_16\n  __m128d v26; // STA0_16\n  __m128d v27; // xmm0\n  __m128d v28; // STB0_16\n  double v29; // xmm3_8\n  double v30; // ST20_8\n  double v31; // ST50_8\n  double v32; // xmm1_8\n  double v33; // ST00_8\n  double v34; // ST70_8\n  double v35; // xmm0_8\n  float v36; // xmm2_4\n  double v37; // [rsp+10h] [rbp-E8h]\n  double v38; // [rsp+10h] [rbp-E8h]\n  float v39; // [rsp+18h] [rbp-E0h]\n  float v40; // [rsp+1Ch] [rbp-DCh]\n  __m128d v41; // [rsp+20h] [rbp-D8h]\n  __m128 v42; // [rsp+30h] [rbp-C8h]\n  __m128d v43; // [rsp+40h] [rbp-B8h]\n  __m128 v44; // [rsp+40h] [rbp-B8h]\n  double v45; // [rsp+60h] [rbp-98h]\n  float *v46; // [rsp+98h] [rbp-60h]\n\n  v8 = a6;\n  v9 = a5;\n  v10 = a4;\n  v40 = a8;\n  if ( (signed int)a3 <= 0 )\n  {\n    v29 = a8;\n    v44 = 0LL;\n    v38 = 0.0;\n    v42 = 0LL;\n  }\n  else\n  {\n    v39 = a7;\n    v46 = a5;\n    v11 = a6;\n    v12 = 0LL;\n    v12.m128d_f64[0] = a8;\n    v45 = a8;\n    v41 = _mm_xor_pd((__m128d)xmmword_440200, v12);\n    v13 = a3;\n    v14 = 0LL;\n    v15 = 0.0;\n    v16 = 0LL;\n    v17 = 0LL;\n    do\n    {\n      v37 = v15;\n      v43 = v14;\n      v18 = (__m128d)0x3FF0000000000000uLL;\n      if ( a2 )\n      {\n        v18 = 0LL;\n        v18.m128d_f64[0] = (double)*(signed int *)(a2 + 4 * v16);\n      }\n      v19 = v18;\n      v20 = 0LL;\n      v20.m128d_f64[0] = *(float *)(a1 + 4 * v16);\n      x = v20;\n      v22.m128d_f64[1] = v41.m128d_f64[1];\n      v22.m128d_f64[0] = exp(v41.m128d_f64[0] * v20.m128d_f64[0]);\n      v23 = v22;\n      v24 = (__m128d)*(unsigned int *)(a1 + 4 * v16);\n      v24.m128d_f64[0] = *(float *)v24.m128d_f64;\n      v20.m128d_f64[1] = v19.m128d_f64[1];\n      v20.m128d_f64[0] = v19.m128d_f64[0] * v24.m128d_f64[0];\n      v25 = v20;\n      v24.m128d_f64[0] = exp(v24.m128d_f64[0] * v41.m128d_f64[0]);\n      v26 = v24;\n      v27 = (__m128d)*(unsigned int *)(a1 + 4 * v16);\n      v27.m128d_f64[0] = *(float *)v27.m128d_f64;\n      v20.m128d_f64[1] = v19.m128d_f64[1];\n      v20.m128d_f64[0] = v19.m128d_f64[0] * v27.m128d_f64[0] * v27.m128d_f64[0];\n      v28 = v20;\n      v27.m128d_f64[0] = exp(v27.m128d_f64[0] * v41.m128d_f64[0]);\n      v15 = v37 + v19.m128d_f64[0];\n      v17 = _mm_add_pd(v17, _mm_mul_pd(_mm_unpckl_pd(x, v23), _mm_unpckl_pd(v19, v19)));\n      v14 = _mm_add_pd(v43, _mm_mul_pd(_mm_unpckl_pd(v25, v28), _mm_unpckl_pd(v26, v27)));\n      ++v16;\n    }\n    while ( v13 != v16 );\n    v8 = v11;\n    v9 = v46;\n    v44 = (__m128)v14;\n    v29 = v45;\n    v38 = v15;\n    v42 = (__m128)v17;\n    a7 = v39;\n  }\n  v30 = a7;\n  v31 = -(v29 * a7);\n  v32 = COERCE_DOUBLE(_mm_movehl_ps(v42, v42)) + exp(v31) * (double)v10;\n  v33 = (double)v10 * v30;\n  v34 = exp(v31) * v33 + *(double *)v44.m128_u64;\n  v35 = exp(v31);\n  v36 = 1.0 / v29 - *(double *)v42.m128_u64 / v38 + v34 / v32;\n  *v9 = v36;\n  *(float *)&v35 = v34 / v32 * (v34 / v32)\n                 - (COERCE_DOUBLE(_mm_movehl_ps(v44, v44)) + v35 * (v33 * v30)) / v32\n                 - 1.0 / (float)(v40 * v40);\n  *v8 = LODWORD(v35);\n}\n", 
            "funcStartAddr": "0x40e9c0L", 
            "funcEndAddr": "0x40ecceL", 
            "funcName": "sub_40E9C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ECD0(char *s, char *name)\n{\n  __int64 v2; // r12\n  FILE *v3; // rax\n  size_t v4; // rax\n  char *v5; // rbx\n  int v6; // eax\n  __int64 v7; // rax\n  char *v8; // r15\n  size_t v9; // rbx\n  size_t v10; // rax\n  int v11; // eax\n  void **v12; // r15\n  __int64 v13; // rsi\n  size_t v14; // rax\n  FILE *v15; // rdi\n  char *v16; // rax\n  char v18; // [rsp+0h] [rbp-238h]\n  int v19; // [rsp+4h] [rbp-234h]\n  void *ptr; // [rsp+8h] [rbp-230h]\n  char sa; // [rsp+10h] [rbp-228h]\n\n  v2 = sub_4382F0(\"hmmio.c\", 164LL, 56LL);\n  *(_OWORD *)(v2 + 16) = 0LL;\n  *(_DWORD *)(v2 + 32) = 1;\n  *(_OWORD *)v2 = 0LL;\n  v3 = fopen(s, \"r\");\n  *(_QWORD *)v2 = v3;\n  if ( v3 )\n  {\n    v4 = strlen(s);\n    v5 = (char *)sub_4382F0(\"hmmio.c\", 181LL, v4 + 5);\n    sprintf(v5, \"%s.ssi\", s);\n    v6 = sub_4396D0(s);\n    *(_DWORD *)(v2 + 36) = v6;\n    if ( v6 == -1 )\n      sub_4325B0(\"SSIRecommendMode() failed\", (unsigned __int64)\"%s.ssi\");\n  }\n  else\n  {\n    v7 = sub_427D00(s, name);\n    *(_QWORD *)v2 = v7;\n    if ( !v7 )\n      return 0LL;\n    v8 = (char *)sub_427C20(ptr, s);\n    v9 = strlen(v8);\n    v10 = strlen(s);\n    v5 = (char *)sub_4382F0(\"hmmio.c\", 192LL, v9 + v10 + 5);\n    sprintf(v5, \"%s.ssi\", v8);\n    v11 = sub_4396D0(v8);\n    *(_DWORD *)(v2 + 36) = v11;\n    if ( v11 == -1 )\n      sub_4325B0(\"SSIRecommendMode() failed\", (unsigned __int64)\"%s.ssi\");\n    free(v8);\n    free(ptr);\n  }\n  v12 = (void **)(v2 + 8);\n  sub_438900(v5);\n  free(v5);\n  v13 = *(unsigned int *)(v2 + 36);\n  if ( (unsigned int)sub_439950(*(_QWORD *)v2, v13, v2 + 40) )\n    sub_4325B0(\"SSIGetFilePosition() failed\", v13);\n  v14 = fread(&v19, 4uLL, 1uLL, *(FILE **)v2);\n  v15 = *(FILE **)v2;\n  if ( !v14 )\n    goto LABEL_40;\n  rewind(v15);\n  if ( v19 == dword_44F210 )\n  {\n    *(_QWORD *)(v2 + 16) = sub_40F0F0;\n    *(_DWORD *)(v2 + 24) = 1;\n    return v2;\n  }\n  if ( v19 <= -1259475481 )\n  {\n    switch ( v19 )\n    {\n      case -1309807128:\n        *(_QWORD *)(v2 + 16) = sub_410380;\n        goto LABEL_37;\n      case -1293029912:\n        *(_QWORD *)(v2 + 16) = sub_4102E0;\n        goto LABEL_37;\n      case -1276252696:\n        *(_QWORD *)(v2 + 16) = sub_410240;\nLABEL_37:\n        *(_QWORD *)(v2 + 24) = 4294967297LL;\n        return v2;\n    }\nLABEL_25:\n    if ( v19 < 0 )\n    {\n      sub_432690(\n        \"%s appears to be a binary but format is not recognized\\n\"\n        \"It may be from a HMMER version more recent than yours,\\n\"\n        \"or may be a different kind of binary altogether.\\n\",\n        v18);\nLABEL_39:\n      v15 = *(FILE **)v2;\n      goto LABEL_40;\n    }\n    v16 = fgets(&sa, 512, *(FILE **)v2);\n    v15 = *(FILE **)v2;\n    if ( v16 )\n    {\n      rewind(v15);\n      if ( !strncmp(\"HMMER2.0\", &sa, 8uLL) )\n      {\n        *(_QWORD *)(v2 + 16) = sub_410420;\n        return v2;\n      }\n      if ( !strncmp(\"HMMER v1.9\", &sa, 0xAuLL) )\n      {\n        *(_QWORD *)(v2 + 16) = sub_411200;\n        return v2;\n      }\n      if ( !strncmp(\"# HMM v1.7\", &sa, 0xAuLL) )\n      {\n        *(_QWORD *)(v2 + 16) = sub_411B70;\n        return v2;\n      }\n      if ( !strncmp(\"# HMM v1.1\", &sa, 0xAuLL) )\n      {\n        *(_QWORD *)(v2 + 16) = sub_412310;\n        return v2;\n      }\n      if ( !strncmp(\"# HMM v1.0\", &sa, 0xAuLL) )\n      {\n        *(_QWORD *)(v2 + 16) = sub_412330;\n        return v2;\n      }\n      goto LABEL_39;\n    }\nLABEL_40:\n    if ( v15 )\n      fclose(v15);\n    if ( *v12 )\n      sub_439610(*v12);\n    free((void *)v2);\n    return 0LL;\n  }\n  switch ( v19 + 387060303 )\n  {\n    case 0:\n      *(_QWORD *)(v2 + 16) = sub_410380;\n      *(_DWORD *)(v2 + 24) = 1;\n      break;\n    case 1:\n      *(_QWORD *)(v2 + 16) = sub_4102E0;\n      *(_DWORD *)(v2 + 24) = 1;\n      break;\n    case 2:\n      *(_QWORD *)(v2 + 16) = sub_410240;\n      *(_DWORD *)(v2 + 24) = 1;\n      break;\n    case 3:\n      *(_QWORD *)(v2 + 16) = sub_4101A0;\n      *(_DWORD *)(v2 + 24) = 1;\n      break;\n    default:\n      if ( v19 == -1259475480 )\n      {\n        *(_QWORD *)(v2 + 16) = sub_4101A0;\n      }\n      else\n      {\n        if ( v19 != -1242698264 )\n          goto LABEL_25;\n        *(_QWORD *)(v2 + 16) = sub_40F0F0;\n      }\n      goto LABEL_37;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40ecd0L", 
            "funcEndAddr": "0x40f0c0L", 
            "funcName": "sub_40ECD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40F0C0(void *ptr)\n{\n  _QWORD *v1; // rbx\n  FILE *v2; // rdi\n  void *v3; // rdi\n\n  v1 = ptr;\n  v2 = *(FILE **)ptr;\n  if ( v2 )\n    fclose(v2);\n  v3 = (void *)v1[1];\n  if ( v3 )\n    sub_439610(v3);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40f0c0L", 
            "funcEndAddr": "0x40f0e8L", 
            "funcName": "sub_40F0C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F0F0(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // r12\n  unsigned int v3; // ebp\n  char v4; // al\n  char v5; // al\n  _BYTE *v6; // rbx\n  void **v7; // rbp\n  _BYTE *v8; // r14\n  bool v9; // zf\n  char v10; // al\n  char v11; // dl\n  char v12; // al\n  int v13; // ebx\n  FILE *v14; // r13\n  char v15; // al\n  char v16; // al\n  size_t v17; // rbp\n  void *v18; // rbx\n  unsigned int v19; // eax\n  FILE *v20; // r13\n  int v21; // ebx\n  char v22; // al\n  char v23; // al\n  size_t v24; // rbp\n  void *v25; // rbx\n  FILE *v26; // r13\n  int v27; // ebx\n  char v28; // al\n  char v29; // al\n  size_t v30; // rbp\n  FILE *v31; // rcx\n  _BYTE *v32; // rsi\n  char v33; // al\n  char v34; // dl\n  char v35; // al\n  char v36; // al\n  char v37; // al\n  unsigned int v38; // ebx\n  char v39; // r13\n  int v40; // er13\n  signed __int64 v41; // rax\n  _BYTE *v42; // rcx\n  char v43; // dl\n  char v44; // si\n  char v45; // dl\n  FILE *v46; // rbx\n  FILE *v47; // rbp\n  char v48; // al\n  char v49; // al\n  size_t v50; // r13\n  _BYTE *v51; // rbx\n  char v52; // al\n  char v53; // dl\n  char v54; // al\n  int v55; // ebx\n  FILE *v56; // r13\n  char v57; // al\n  char v58; // al\n  size_t v59; // rbp\n  _BYTE *v60; // r13\n  _BYTE *v61; // rbx\n  char v62; // al\n  char v63; // dl\n  char v64; // al\n  _BYTE *v65; // rsi\n  char v66; // al\n  char v67; // dl\n  char v68; // al\n  char v69; // al\n  char v70; // al\n  size_t v71; // rax\n  _BYTE *v72; // rsi\n  char v73; // al\n  char v74; // dl\n  char v75; // al\n  char v76; // al\n  char v77; // al\n  size_t v78; // rax\n  _BYTE *v79; // rsi\n  char v80; // al\n  char v81; // dl\n  char v82; // al\n  char v83; // al\n  char v84; // al\n  size_t v85; // rax\n  _BYTE *v86; // rsi\n  char v87; // al\n  char v88; // dl\n  char v89; // al\n  char v90; // al\n  char v91; // al\n  __int64 v92; // rbx\n  FILE *v93; // rcx\n  size_t v94; // rax\n  __int64 v95; // rbx\n  size_t v96; // rax\n  _BYTE *v97; // r14\n  signed __int64 v98; // rax\n  __int64 v99; // rbx\n  signed __int64 v100; // rbx\n  signed __int64 v101; // rbx\n  int v102; // esi\n  __int64 v103; // rdx\n  FILE *v105; // rcx\n  char v106; // al\n  char v107; // dl\n  char v108; // al\n  _BYTE *v109; // rsi\n  char v110; // al\n  char v111; // dl\n  char v112; // al\n  FILE *v113; // rcx\n  char v114; // al\n  char v115; // dl\n  char v116; // al\n  _BYTE *v117; // rsi\n  char v118; // al\n  char v119; // dl\n  char v120; // al\n  FILE *v121; // rcx\n  char v122; // al\n  char v123; // dl\n  char v124; // al\n  _BYTE *v125; // rsi\n  char v126; // al\n  char v127; // dl\n  char v128; // al\n  _BYTE *v129; // rbx\n  _BYTE *v130; // r13\n  size_t v131; // rax\n  char v132; // al\n  char v133; // dl\n  char v134; // al\n  char v135; // al\n  char v136; // dl\n  char v137; // al\n  unsigned __int64 v138; // rdi\n  _BYTE *v139; // rbp\n  char v140; // bl\n  char v141; // r8\n  char v142; // cl\n  char v143; // cl\n  char v144; // cl\n  _BYTE *v145; // rbp\n  char v146; // cl\n  char v147; // di\n  char v148; // cl\n  _BYTE *v149; // rdi\n  char v150; // cl\n  char v151; // bl\n  char v152; // cl\n  char v153; // cl\n  char v154; // bl\n  char v155; // cl\n  signed __int64 v156; // rdi\n  _QWORD *v157; // rbp\n  signed __int64 v158; // rcx\n  __int64 v159; // rdx\n  char v160; // bl\n  char v161; // si\n  char v162; // al\n  signed __int64 v163; // rcx\n  __int64 v164; // rax\n  char v165; // dl\n  char v166; // si\n  char v167; // dl\n  signed int *v168; // rsi\n  __int64 v169; // rax\n  char v170; // cl\n  char v171; // bl\n  char v172; // cl\n  __int64 v173; // rax\n  char v174; // cl\n  char v175; // bl\n  char v176; // cl\n  signed __int64 v177; // rcx\n  signed int *v178; // rsi\n  _BYTE *v179; // rax\n  char v180; // cl\n  char v181; // bl\n  char v182; // cl\n  _BYTE *v183; // rax\n  char v184; // cl\n  char v185; // bl\n  char v186; // cl\n  _BYTE *v187; // rax\n  char v188; // cl\n  char v189; // bl\n  char v190; // cl\n  _BYTE *v191; // rax\n  char v192; // cl\n  char v193; // bl\n  char v194; // cl\n  _BYTE *v195; // rax\n  char v196; // cl\n  char v197; // bl\n  char v198; // cl\n  _BYTE *v199; // rax\n  char v200; // cl\n  char v201; // bl\n  char v202; // cl\n  _BYTE *v203; // rax\n  char v204; // cl\n  char v205; // bl\n  char v206; // cl\n  void *v207; // rcx\n  int v208; // [rsp+Ch] [rbp-5Ch]\n  void *v209; // [rsp+10h] [rbp-58h]\n  int ptr; // [rsp+18h] [rbp-50h]\n  unsigned int v211; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v212; // [rsp+20h] [rbp-48h]\n  _BYTE *v213; // [rsp+28h] [rbp-40h]\n  _BYTE *v214; // [rsp+30h] [rbp-38h]\n\n  v2 = a2;\n  v3 = 0;\n  if ( !feof(*(FILE **)a1) && fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) )\n  {\n    if ( *(_DWORD *)(a1 + 28) )\n    {\n      v4 = HIBYTE(ptr);\n      HIBYTE(ptr) = ptr;\n      LOBYTE(ptr) = v4;\n      v5 = BYTE2(ptr);\n      BYTE2(ptr) = BYTE1(ptr);\n      BYTE1(ptr) = v5;\n    }\n    if ( ptr != dword_44F210 )\n      goto LABEL_109;\n    v6 = (_BYTE *)sub_418FB0(&ptr, 4LL);\n    v7 = (void **)v6;\n    v8 = v6 + 456;\n    if ( fread(v6 + 456, 4uLL, 1uLL, *(FILE **)a1) )\n    {\n      v9 = *(_DWORD *)(a1 + 28) == 0;\n      v209 = v6;\n      v212 = v6;\n      if ( v9 )\n      {\n        v13 = 0;\n      }\n      else\n      {\n        v10 = v6[459];\n        v11 = v6[457];\n        v6[459] = v6[456];\n        *v8 = v10;\n        v12 = v6[458];\n        v6[458] = v11;\n        v6[457] = v12;\n        v13 = *(_DWORD *)(a1 + 28);\n      }\n      v14 = *(FILE **)a1;\n      if ( fread(&v208, 4uLL, 1uLL, *(FILE **)a1) )\n      {\n        if ( v13 )\n        {\n          v15 = HIBYTE(v208);\n          HIBYTE(v208) = v208;\n          LOBYTE(v208) = v15;\n          v16 = BYTE2(v208);\n          BYTE2(v208) = BYTE1(v208);\n          BYTE1(v208) = v16;\n        }\n        v17 = v208;\n        v18 = (void *)sub_4382F0(\"hmmio.c\", 1370LL, v208);\n        if ( fread(v18, 1uLL, v17, v14) )\n        {\n          v7 = (void **)v209;\n          *(_QWORD *)v209 = v18;\n          v19 = *((_DWORD *)v7 + 114);\n          if ( v19 & 0x200 )\n          {\n            v20 = *(FILE **)a1;\n            v21 = *(_DWORD *)(a1 + 28);\n            if ( !fread(&v208, 4uLL, 1uLL, *(FILE **)a1) )\n              goto LABEL_107;\n            if ( v21 )\n            {\n              v22 = HIBYTE(v208);\n              HIBYTE(v208) = v208;\n              LOBYTE(v208) = v22;\n              v23 = BYTE2(v208);\n              BYTE2(v208) = BYTE1(v208);\n              BYTE1(v208) = v23;\n            }\n            v24 = v208;\n            v25 = (void *)sub_4382F0(\"hmmio.c\", 1370LL, v208);\n            if ( !fread(v25, 1uLL, v24, v20) )\n              goto LABEL_106;\n            v7 = (void **)v209;\n            *((_QWORD *)v209 + 1) = v25;\n            v19 = *((_DWORD *)v7 + 114);\n          }\n          if ( v19 & 2 )\n          {\n            v26 = *(FILE **)a1;\n            v27 = *(_DWORD *)(a1 + 28);\n            if ( !fread(&v208, 4uLL, 1uLL, *(FILE **)a1) )\n              goto LABEL_107;\n            if ( v27 )\n            {\n              v28 = HIBYTE(v208);\n              HIBYTE(v208) = v208;\n              LOBYTE(v208) = v28;\n              v29 = BYTE2(v208);\n              BYTE2(v208) = BYTE1(v208);\n              BYTE1(v208) = v29;\n            }\n            v30 = v208;\n            v25 = (void *)sub_4382F0(\"hmmio.c\", 1370LL, v208);\n            if ( !fread(v25, 1uLL, v30, v26) )\n              goto LABEL_106;\n            v7 = (void **)v209;\n            *((_QWORD *)v209 + 2) = v25;\n          }\n          v31 = *(FILE **)a1;\n          v214 = v212 + 136;\n          if ( !fread(v212 + 136, 4uLL, 1uLL, v31) )\n            goto LABEL_108;\n          if ( *(_DWORD *)(a1 + 28) )\n          {\n            v32 = v214;\n            v33 = v214[3];\n            v34 = v214[1];\n            v214[3] = *v214;\n            *v32 = v33;\n            v35 = v32[2];\n            v32[2] = v34;\n            v32[1] = v35;\n          }\n          if ( !fread(&v211, 4uLL, 1uLL, *(FILE **)a1) )\n            goto LABEL_108;\n          if ( *(_DWORD *)(a1 + 28) )\n          {\n            v36 = HIBYTE(v211);\n            HIBYTE(v211) = v211;\n            LOBYTE(v211) = v36;\n            v37 = BYTE2(v211);\n            BYTE2(v211) = BYTE1(v211);\n            BYTE1(v211) = v37;\n          }\n          v38 = v211;\n          if ( dword_464004 )\n          {\n            if ( v211 != dword_464004 )\n            {\n              v39 = (unsigned __int64)sub_408760(dword_464004);\n              sub_408760(v38);\n              sub_4325B0(\n                \"Alphabet mismatch error.\\nI thought we were working with %s, but tried to read a %s HMM.\\n\",\n                v39);\n            }\n          }\n          else\n          {\n            sub_401910(v211, 4);\n          }\n          sub_419080(v7, *((unsigned int *)v7 + 34));\n          if ( (_BYTE)v7[57] & 4 )\n          {\n            if ( !fread(v7[3], 1uLL, *((signed int *)v7 + 34) + 1LL, *(FILE **)a1) )\n              goto LABEL_108;\n          }\n          *((_BYTE *)v7[3] + *((signed int *)v7 + 34) + 1) = 0;\n          if ( (_BYTE)v7[57] & 8 )\n          {\n            if ( !fread(v7[4], 1uLL, *((signed int *)v7 + 34) + 1LL, *(FILE **)a1) )\n              goto LABEL_108;\n          }\n          *((_BYTE *)v7[4] + *((signed int *)v7 + 34) + 1) = 0;\n          if ( *((_BYTE *)v7 + 457) & 1 )\n          {\n            if ( !fread(v7[9], 4uLL, *((signed int *)v7 + 34) + 1LL, *(FILE **)a1) )\n              goto LABEL_108;\n          }\n          v40 = *(_DWORD *)(a1 + 28);\n          if ( v40 )\n          {\n            if ( *(_DWORD *)v214 > 0 )\n            {\n              v41 = 0LL;\n              do\n              {\n                v42 = v7[9];\n                v43 = v42[4 * v41 + 7];\n                v44 = v42[4 * v41 + 5];\n                v42[4 * v41 + 7] = v42[4 * v41 + 4];\n                v42[4 * v41 + 4] = v43;\n                v45 = v42[4 * v41 + 6];\n                v42[4 * v41 + 6] = v44;\n                v42[4 * v41++ + 5] = v45;\n              }\n              while ( v41 < *((signed int *)v7 + 34) );\n              v40 = *(_DWORD *)(a1 + 28);\n            }\n          }\n          else\n          {\n            v40 = 0;\n          }\n          v46 = *(FILE **)a1;\n          if ( !fread(&v208, 4uLL, 1uLL, *(FILE **)a1) )\n            goto LABEL_108;\n          v47 = v46;\n          if ( v40 )\n          {\n            v48 = HIBYTE(v208);\n            HIBYTE(v208) = v208;\n            LOBYTE(v208) = v48;\n            v49 = BYTE2(v208);\n            BYTE2(v208) = BYTE1(v208);\n            BYTE1(v208) = v49;\n          }\n          v50 = v208;\n          v25 = (void *)sub_4382F0(\"hmmio.c\", 1370LL, v208);\n          if ( fread(v25, 1uLL, v50, v47) )\n          {\n            v7 = (void **)v209;\n            *((_QWORD *)v209 + 6) = v25;\n            v51 = v212 + 56;\n            if ( !fread(v212 + 56, 4uLL, 1uLL, *(FILE **)a1) )\n              goto LABEL_108;\n            if ( *(_DWORD *)(a1 + 28) )\n            {\n              v52 = v51[3];\n              v53 = v51[1];\n              v51[3] = *v51;\n              *v51 = v52;\n              v54 = v51[2];\n              v51[2] = v53;\n              v51[1] = v54;\n              v55 = *(_DWORD *)(a1 + 28);\n            }\n            else\n            {\n              v55 = 0;\n            }\n            v56 = *(FILE **)a1;\n            if ( fread(&v208, 4uLL, 1uLL, *(FILE **)a1) )\n            {\n              if ( v55 )\n              {\n                v57 = HIBYTE(v208);\n                HIBYTE(v208) = v208;\n                LOBYTE(v208) = v57;\n                v58 = BYTE2(v208);\n                BYTE2(v208) = BYTE1(v208);\n                BYTE1(v208) = v58;\n              }\n              v59 = v208;\n              v25 = (void *)sub_4382F0(\"hmmio.c\", 1370LL, v208);\n              if ( fread(v25, 1uLL, v59, v56) )\n              {\n                v7 = (void **)v209;\n                *((_QWORD *)v209 + 8) = v25;\n                v60 = v212;\n                v61 = v212 + 80;\n                if ( !fread(v212 + 80, 4uLL, 1uLL, *(FILE **)a1) )\n                  goto LABEL_108;\n                if ( *(_DWORD *)(a1 + 28) )\n                {\n                  v62 = v61[3];\n                  v63 = v61[1];\n                  v61[3] = *v61;\n                  *v61 = v62;\n                  v64 = v61[2];\n                  v61[2] = v63;\n                  v61[1] = v64;\n                }\n                if ( !(v8[1] & 4) )\n                  goto LABEL_148;\n                if ( !fread(v60 + 112, 4uLL, 1uLL, *(FILE **)a1) )\n                  goto LABEL_108;\n                v105 = *(FILE **)a1;\n                v213 = v60 + 116;\n                if ( !fread(v60 + 116, 4uLL, 1uLL, v105) )\n                  goto LABEL_108;\n                if ( *(_DWORD *)(a1 + 28) )\n                {\n                  v106 = v60[115];\n                  v107 = v60[113];\n                  v60[115] = v60[112];\n                  v60[112] = v106;\n                  v108 = v60[114];\n                  v60[114] = v107;\n                  v60[113] = v108;\n                  v109 = v213;\n                  v110 = v213[3];\n                  v111 = v213[1];\n                  v213[3] = *v213;\n                  *v109 = v110;\n                  v112 = v109[2];\n                  v109[2] = v111;\n                  v109[1] = v112;\n                  if ( !(v8[1] & 8) )\n                    goto LABEL_70;\n                }\n                else\n                {\nLABEL_148:\n                  if ( !(v8[1] & 8) )\n                    goto LABEL_70;\n                }\n                if ( !fread(v60 + 120, 4uLL, 1uLL, *(FILE **)a1) )\n                  goto LABEL_108;\n                v113 = *(FILE **)a1;\n                v213 = v60 + 124;\n                if ( !fread(v60 + 124, 4uLL, 1uLL, v113) )\n                  goto LABEL_108;\n                if ( *(_DWORD *)(a1 + 28) )\n                {\n                  v114 = v60[123];\n                  v115 = v60[121];\n                  v60[123] = v60[120];\n                  v60[120] = v114;\n                  v116 = v60[122];\n                  v60[122] = v115;\n                  v60[121] = v116;\n                  v117 = v213;\n                  v118 = v213[3];\n                  v119 = v213[1];\n                  v213[3] = *v213;\n                  *v117 = v118;\n                  v120 = v117[2];\n                  v117[2] = v119;\n                  v117[1] = v120;\n                  if ( v8[1] & 0x10 )\n                  {\nLABEL_120:\n                    if ( !fread(v60 + 128, 4uLL, 1uLL, *(FILE **)a1) )\n                      goto LABEL_108;\n                    v121 = *(FILE **)a1;\n                    v213 = v60 + 132;\n                    if ( !fread(v60 + 132, 4uLL, 1uLL, v121) )\n                      goto LABEL_108;\n                    if ( *(_DWORD *)(a1 + 28) )\n                    {\n                      v122 = v60[131];\n                      v123 = v60[129];\n                      v60[131] = v60[128];\n                      v60[128] = v122;\n                      v124 = v60[130];\n                      v60[130] = v123;\n                      v60[129] = v124;\n                      v125 = v213;\n                      v126 = v213[3];\n                      v127 = v213[1];\n                      v213[3] = *v213;\n                      *v125 = v126;\n                      v128 = v125[2];\n                      v125[2] = v127;\n                      v125[1] = v128;\n                    }\n                  }\nLABEL_71:\n                  if ( !fread(v60 + 172, 4uLL, 2uLL, *(FILE **)a1) )\n                    goto LABEL_108;\n                  if ( *(_DWORD *)(a1 + 28) )\n                  {\n                    v65 = v209;\n                    v66 = *((_BYTE *)v209 + 175);\n                    v67 = *((_BYTE *)v209 + 173);\n                    *((_BYTE *)v209 + 175) = *((_BYTE *)v209 + 172);\n                    v65[172] = v66;\n                    v68 = v65[174];\n                    v65[174] = v67;\n                    v65[173] = v68;\n                    v69 = v65[179];\n                    v65[179] = v65[176];\n                    v65[176] = v69;\n                    v70 = v65[178];\n                    v65[178] = v65[177];\n                    v65[177] = v70;\n                  }\n                  v71 = fread(v212 + 180, 4uLL, 2uLL, *(FILE **)a1);\n                  v7 = (void **)v209;\n                  if ( !v71 )\n                    goto LABEL_108;\n                  if ( *(_DWORD *)(a1 + 28) )\n                  {\n                    v72 = v209;\n                    v73 = *((_BYTE *)v209 + 183);\n                    v74 = *((_BYTE *)v209 + 181);\n                    *((_BYTE *)v209 + 183) = *((_BYTE *)v209 + 180);\n                    v72[180] = v73;\n                    v75 = v72[182];\n                    v72[182] = v74;\n                    v72[181] = v75;\n                    v76 = v72[187];\n                    v72[187] = v72[184];\n                    v72[184] = v76;\n                    v77 = v72[186];\n                    v72[186] = v72[185];\n                    v72[185] = v77;\n                  }\n                  v78 = fread(v212 + 188, 4uLL, 2uLL, *(FILE **)a1);\n                  v7 = (void **)v209;\n                  if ( !v78 )\n                    goto LABEL_108;\n                  if ( *(_DWORD *)(a1 + 28) )\n                  {\n                    v79 = v209;\n                    v80 = *((_BYTE *)v209 + 191);\n                    v81 = *((_BYTE *)v209 + 189);\n                    *((_BYTE *)v209 + 191) = *((_BYTE *)v209 + 188);\n                    v79[188] = v80;\n                    v82 = v79[190];\n                    v79[190] = v81;\n                    v79[189] = v82;\n                    v83 = v79[195];\n                    v79[195] = v79[192];\n                    v79[192] = v83;\n                    v84 = v79[194];\n                    v79[194] = v79[193];\n                    v79[193] = v84;\n                  }\n                  v85 = fread(v212 + 196, 4uLL, 2uLL, *(FILE **)a1);\n                  v7 = (void **)v209;\n                  if ( !v85 )\n                    goto LABEL_108;\n                  if ( *(_DWORD *)(a1 + 28) )\n                  {\n                    v86 = v209;\n                    v87 = *((_BYTE *)v209 + 199);\n                    v88 = *((_BYTE *)v209 + 197);\n                    *((_BYTE *)v209 + 199) = *((_BYTE *)v209 + 196);\n                    v86[196] = v87;\n                    v89 = v86[198];\n                    v86[198] = v88;\n                    v86[197] = v89;\n                    v90 = v86[203];\n                    v86[203] = v86[200];\n                    v86[200] = v90;\n                    v91 = v86[202];\n                    v86[202] = v86[201];\n                    v86[201] = v91;\n                  }\n                  v92 = (__int64)v212;\n                  v93 = *(FILE **)a1;\n                  v213 = v212 + 304;\n                  v94 = fread(v212 + 304, 4uLL, 1uLL, v93);\n                  v7 = (void **)v209;\n                  if ( !v94 || !fread((void *)(v92 + 224), 4uLL, dword_464000, *(FILE **)a1) )\n                    goto LABEL_108;\n                  if ( *v8 < 0 )\n                  {\n                    v129 = v212;\n                    v130 = v212 + 448;\n                    v131 = fread(v212 + 448, 4uLL, 1uLL, *(FILE **)a1);\n                    v7 = (void **)v209;\n                    if ( !v131 || !fread(v129 + 452, 4uLL, 1uLL, *(FILE **)a1) )\n                      goto LABEL_108;\n                    if ( *(_DWORD *)(a1 + 28) )\n                    {\n                      v132 = v130[3];\n                      v133 = v130[1];\n                      v130[3] = *v130;\n                      *v130 = v132;\n                      v134 = v130[2];\n                      v130[2] = v133;\n                      v130[1] = v134;\n                      v135 = v129[455];\n                      v136 = v129[453];\n                      v129[455] = v129[452];\n                      v129[452] = v135;\n                      v137 = v129[454];\n                      v129[454] = v136;\n                      v129[453] = v137;\n                    }\n                  }\n                  v95 = (__int64)(v212 + 168);\n                  v96 = fread(v212 + 168, 4uLL, 1uLL, *(FILE **)a1);\n                  v7 = (void **)v209;\n                  if ( v96\n                    && fread(*((void **)v209 + 26), 4uLL, *((signed int *)v209 + 34) + 1LL, *(FILE **)a1)\n                    && fread(v7[27], 4uLL, *((signed int *)v7 + 34) + 1LL, *(FILE **)a1) )\n                  {\n                    v97 = (_BYTE *)v95;\n                    LODWORD(v98) = *(_DWORD *)v214;\n                    if ( *(_DWORD *)v214 > 0 )\n                    {\n                      v99 = 0LL;\n                      v7 = (void **)v209;\n                      while ( fread(*((void **)v7[19] + v99 + 1), 4uLL, dword_464000, *(FILE **)a1) )\n                      {\n                        v98 = *(signed int *)v214;\n                        if ( ++v99 >= v98 )\n                        {\n                          if ( (signed int)v98 < 2 )\n                            goto LABEL_101;\n                          v100 = 1LL;\n                          v7 = (void **)v209;\n                          while ( fread(*((void **)v7[20] + v100), 4uLL, dword_464000, *(FILE **)a1) )\n                          {\n                            ++v100;\n                            v98 = *(signed int *)v214;\n                            if ( v100 >= v98 )\n                            {\n                              if ( (signed int)v98 < 2 )\n                                goto LABEL_101;\n                              v101 = 1LL;\n                              v7 = (void **)v209;\n                              while ( fread(*((void **)v7[18] + v101), 4uLL, 7uLL, *(FILE **)a1) )\n                              {\n                                ++v101;\n                                v98 = *(signed int *)v214;\n                                if ( v101 >= v98 )\n                                  goto LABEL_101;\n                              }\n                              goto LABEL_108;\n                            }\n                          }\n                          goto LABEL_108;\n                        }\n                      }\n                      goto LABEL_108;\n                    }\nLABEL_101:\n                    if ( !*(_DWORD *)(a1 + 28) )\n                    {\nLABEL_145:\n                      v207 = v209;\n                      *((_DWORD *)v209 + 114) = *((_DWORD *)v209 + 114) & 0xFFFFFFDE | 0x20;\n                      *v2 = v207;\n                      return 1;\n                    }\n                    v102 = dword_464000;\n                    if ( dword_464000 > 0LL )\n                    {\n                      if ( dword_464000 == 1 )\n                      {\n                        v103 = 0LL;\n                        if ( !(dword_464000 & 1) )\n                          goto LABEL_132;\nLABEL_131:\n                        v145 = v209;\n                        v146 = *((_BYTE *)v209 + 4 * v103 + 227);\n                        v147 = *((_BYTE *)v209 + 4 * v103 + 225);\n                        *((_BYTE *)v209 + 4 * v103 + 227) = *((_BYTE *)v209 + 4 * v103 + 224);\n                        v145[4 * v103 + 224] = v146;\n                        v148 = v145[4 * v103 + 226];\n                        v145[4 * v103 + 226] = v147;\n                        v145[4 * v103 + 225] = v148;\n                        goto LABEL_132;\n                      }\n                      v138 = dword_464000 - (unsigned __int64)(dword_464000 & 1);\n                      v103 = 0LL;\n                      v139 = v209;\n                      do\n                      {\n                        v140 = v139[4 * v103 + 227];\n                        v141 = v139[4 * v103 + 225];\n                        v139[4 * v103 + 227] = v139[4 * v103 + 224];\n                        v139[4 * v103 + 224] = v140;\n                        v142 = v139[4 * v103 + 226];\n                        v139[4 * v103 + 226] = v141;\n                        v139[4 * v103 + 225] = v142;\n                        v143 = v139[4 * v103 + 231];\n                        v139[4 * v103 + 231] = v139[4 * v103 + 228];\n                        v139[4 * v103 + 228] = v143;\n                        v144 = v139[4 * v103 + 230];\n                        v139[4 * v103 + 230] = v139[4 * v103 + 229];\n                        v139[4 * v103 + 229] = v144;\n                        v103 += 2LL;\n                      }\n                      while ( v138 != v103 );\n                      if ( v102 & 1 )\n                        goto LABEL_131;\n                    }\nLABEL_132:\n                    v149 = v213;\n                    v150 = v213[3];\n                    v151 = v213[1];\n                    v213[3] = *v213;\n                    *v149 = v150;\n                    v152 = v149[2];\n                    v149[2] = v151;\n                    v149[1] = v152;\n                    v153 = v97[3];\n                    v154 = v97[1];\n                    v97[3] = *v97;\n                    *v97 = v153;\n                    v155 = v97[2];\n                    v97[2] = v154;\n                    v97[1] = v155;\n                    if ( (signed int)v98 > 0 )\n                    {\n                      v156 = 1LL;\n                      v157 = v209;\n                      if ( v102 <= 0 )\n                        goto LABEL_142;\nLABEL_134:\n                      v158 = 0LL;\n                      do\n                      {\n                        v159 = *(_QWORD *)(v157[19] + 8 * v156);\n                        v160 = *(_BYTE *)(v159 + 4 * v158 + 3);\n                        v161 = *(_BYTE *)(v159 + 4 * v158 + 1);\n                        *(_BYTE *)(v159 + 4 * v158 + 3) = *(_BYTE *)(v159 + 4 * v158);\n                        *(_BYTE *)(v159 + 4 * v158) = v160;\n                        v162 = *(_BYTE *)(v159 + 4 * v158 + 2);\n                        *(_BYTE *)(v159 + 4 * v158 + 2) = v161;\n                        *(_BYTE *)(v159 + 4 * v158++ + 1) = v162;\n                      }\n                      while ( v158 < dword_464000 );\n                      if ( v156 < *(signed int *)v214 && dword_464000 > 0 )\n                      {\n                        v163 = 0LL;\n                        do\n                        {\n                          v164 = *(_QWORD *)(*((_QWORD *)v209 + 20) + 8 * v156);\n                          v165 = *(_BYTE *)(v164 + 4 * v163 + 3);\n                          v166 = *(_BYTE *)(v164 + 4 * v163 + 1);\n                          *(_BYTE *)(v164 + 4 * v163 + 3) = *(_BYTE *)(v164 + 4 * v163);\n                          *(_BYTE *)(v164 + 4 * v163) = v165;\n                          v167 = *(_BYTE *)(v164 + 4 * v163 + 2);\n                          *(_BYTE *)(v164 + 4 * v163 + 2) = v166;\n                          *(_BYTE *)(v164 + 4 * v163++ + 1) = v167;\n                        }\n                        while ( v163 < dword_464000 );\n                      }\n                      while ( 1 )\n                      {\nLABEL_142:\n                        v168 = (signed int *)v209;\n                        v169 = *((_QWORD *)v209 + 26);\n                        v170 = *(_BYTE *)(v169 + 4 * v156 + 3);\n                        v171 = *(_BYTE *)(v169 + 4 * v156 + 1);\n                        *(_BYTE *)(v169 + 4 * v156 + 3) = *(_BYTE *)(v169 + 4 * v156);\n                        *(_BYTE *)(v169 + 4 * v156) = v170;\n                        v172 = *(_BYTE *)(v169 + 4 * v156 + 2);\n                        *(_BYTE *)(v169 + 4 * v156 + 2) = v171;\n                        *(_BYTE *)(v169 + 4 * v156 + 1) = v172;\n                        v173 = *((_QWORD *)v168 + 27);\n                        v174 = *(_BYTE *)(v173 + 4 * v156 + 3);\n                        v175 = *(_BYTE *)(v173 + 4 * v156 + 1);\n                        *(_BYTE *)(v173 + 4 * v156 + 3) = *(_BYTE *)(v173 + 4 * v156);\n                        *(_BYTE *)(v173 + 4 * v156) = v174;\n                        v176 = *(_BYTE *)(v173 + 4 * v156 + 2);\n                        *(_BYTE *)(v173 + 4 * v156 + 2) = v175;\n                        *(_BYTE *)(v173 + 4 * v156 + 1) = v176;\n                        v177 = v168[34];\n                        if ( v156 < v177 )\n                        {\n                          v178 = (signed int *)v209;\n                          v179 = *(_BYTE **)(*((_QWORD *)v209 + 18) + 8 * v156);\n                          v180 = v179[3];\n                          v181 = v179[1];\n                          v179[3] = *v179;\n                          *v179 = v180;\n                          v182 = v179[2];\n                          v179[2] = v181;\n                          v179[1] = v182;\n                          v183 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v184 = v183[7];\n                          v185 = v183[5];\n                          v183[7] = v183[4];\n                          v183[4] = v184;\n                          v186 = v183[6];\n                          v183[6] = v185;\n                          v183[5] = v186;\n                          v187 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v188 = v187[11];\n                          v189 = v187[9];\n                          v187[11] = v187[8];\n                          v187[8] = v188;\n                          v190 = v187[10];\n                          v187[10] = v189;\n                          v187[9] = v190;\n                          v191 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v192 = v191[15];\n                          v193 = v191[13];\n                          v191[15] = v191[12];\n                          v191[12] = v192;\n                          v194 = v191[14];\n                          v191[14] = v193;\n                          v191[13] = v194;\n                          v195 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v196 = v195[19];\n                          v197 = v195[17];\n                          v195[19] = v195[16];\n                          v195[16] = v196;\n                          v198 = v195[18];\n                          v195[18] = v197;\n                          v195[17] = v198;\n                          v199 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v200 = v199[23];\n                          v201 = v199[21];\n                          v199[23] = v199[20];\n                          v199[20] = v200;\n                          v202 = v199[22];\n                          v199[22] = v201;\n                          v199[21] = v202;\n                          v203 = *(_BYTE **)(*((_QWORD *)v178 + 18) + 8 * v156);\n                          v204 = v203[27];\n                          v205 = v203[25];\n                          v203[27] = v203[24];\n                          v203[24] = v204;\n                          v206 = v203[26];\n                          v203[26] = v205;\n                          v203[25] = v206;\n                          v177 = v178[34];\n                        }\n                        if ( v156 >= v177 )\n                          break;\n                        ++v156;\n                        if ( dword_464000 > 0 )\n                          goto LABEL_134;\n                      }\n                    }\n                    goto LABEL_145;\n                  }\nLABEL_108:\n                  sub_419540(v7);\nLABEL_109:\n                  *v2 = 0LL;\n                  return 1;\n                }\nLABEL_70:\n                if ( v8[1] & 0x10 )\n                  goto LABEL_120;\n                goto LABEL_71;\n              }\n              goto LABEL_106;\n            }\nLABEL_107:\n            v7 = (void **)v209;\n            goto LABEL_108;\n          }\nLABEL_106:\n          free(v25);\n          goto LABEL_107;\n        }\n        free(v18);\n      }\n      v7 = (void **)v209;\n      v6 = v212;\n    }\n    if ( !v6 )\n      goto LABEL_109;\n    goto LABEL_108;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40f0f0L", 
            "funcEndAddr": "0x410193L", 
            "funcName": "sub_40F0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4101A0(__int64 a1, _QWORD *a2)\n{\n  unsigned int v2; // ebp\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  void *v5; // rbx\n  __int64 v6; // rax\n  __int64 v8; // [rsp+0h] [rbp-28h]\n  char ptr; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = 0;\n  if ( !feof(*(FILE **)a1) && fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) )\n  {\n    v3 = *(unsigned int *)(a1 + 28);\n    v4 = sub_413830(*(FILE **)a1);\n    v5 = (void *)v4;\n    if ( v4 )\n    {\n      sub_41B510(v4, &v8);\n      v6 = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n      *(_QWORD *)(v8 + 48) = v6;\n      sub_419A30();\n      sub_41C590(v5);\n      *a2 = v8;\n    }\n    else\n    {\n      *a2 = 0LL;\n    }\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4101a0L", 
            "funcEndAddr": "0x41023aL", 
            "funcName": "sub_4101A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410240(__int64 a1, _QWORD *a2)\n{\n  unsigned int v2; // ebp\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  void *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  char ptr; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = 0;\n  if ( !feof(*(FILE **)a1) && fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) )\n  {\n    v3 = *(unsigned int *)(a1 + 28);\n    v4 = sub_413830(*(FILE **)a1);\n    v5 = (void *)v4;\n    if ( v4 )\n    {\n      sub_41B510(v4, &v9);\n      v6 = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n      v7 = v9;\n      *(_QWORD *)(v9 + 48) = v6;\n      sub_419A30(v7, &v9);\n      sub_41C590(v5);\n      *a2 = v9;\n    }\n    else\n    {\n      *a2 = 0LL;\n    }\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x410240L", 
            "funcEndAddr": "0x4102daL", 
            "funcName": "sub_410240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4102E0(__int64 a1, _QWORD *a2)\n{\n  unsigned int v2; // ebp\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  void *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  char ptr; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = 0;\n  if ( !feof(*(FILE **)a1) && fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) )\n  {\n    v3 = *(unsigned int *)(a1 + 28);\n    v4 = sub_413830(*(FILE **)a1);\n    v5 = (void *)v4;\n    if ( v4 )\n    {\n      sub_41B510(v4, &v9);\n      v6 = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n      v7 = v9;\n      *(_QWORD *)(v9 + 48) = v6;\n      sub_419A30(v7, &v9);\n      sub_41C590(v5);\n      *a2 = v9;\n    }\n    else\n    {\n      *a2 = 0LL;\n    }\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4102e0L", 
            "funcEndAddr": "0x41037aL", 
            "funcName": "sub_4102E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410380(__int64 a1, _QWORD *a2)\n{\n  unsigned int v2; // ebp\n  __int64 v4; // rdx\n  __int64 v5; // rax\n  void *v6; // rbx\n  __int64 v7; // rax\n  __int64 v8; // rdi\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  char ptr; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = 0;\n  if ( !feof(*(FILE **)a1) && fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) )\n  {\n    v4 = *(unsigned int *)(a1 + 28);\n    v2 = 1;\n    v5 = sub_413830(*(FILE **)a1);\n    v6 = (void *)v5;\n    if ( v5 )\n    {\n      sub_41B510(v5, &v9);\n      v7 = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n      v8 = v9;\n      *(_QWORD *)(v9 + 48) = v7;\n      sub_419A30(v8, &v9);\n      sub_41C590(v6);\n      *a2 = v9;\n    }\n    else\n    {\n      *a2 = 0LL;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x410380L", 
            "funcEndAddr": "0x41041cL", 
            "funcName": "sub_410380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410420(FILE **a1, float **a2)\n{\n  unsigned int v2; // ebp\n  __int64 v3; // r15\n  __int64 v4; // rbx\n  char *v5; // rbp\n  __int64 v6; // r12\n  __int64 v7; // ST10_8\n  const char *v8; // rbx\n  size_t v9; // rbp\n  size_t v10; // rax\n  const char *v11; // rbp\n  char *v12; // r15\n  char *v13; // rax\n  float v14; // xmm0_4\n  char *v15; // rax\n  float v16; // xmm0_4\n  float *v17; // rax\n  char *v18; // rax\n  float v19; // xmm0_4\n  char *v20; // rax\n  float v21; // xmm0_4\n  char *v22; // rax\n  float v23; // xmm0_4\n  char *v24; // rax\n  float v25; // xmm0_4\n  char *v26; // r12\n  char *v27; // rax\n  __int64 v28; // rbp\n  signed int v29; // xmm0_4\n  unsigned int v30; // eax\n  char *v31; // rax\n  signed int v32; // xmm0_4\n  unsigned int v33; // eax\n  char *v34; // rax\n  signed int v35; // xmm0_4\n  unsigned int v36; // eax\n  char *v37; // rax\n  float v38; // xmm1_4\n  float v39; // xmm0_4\n  float v40; // ST10_4\n  unsigned int v41; // eax\n  char *v42; // rax\n  signed int v43; // ecx\n  signed __int64 v44; // r12\n  float v45; // xmm0_4\n  float v46; // ST10_4\n  unsigned int v47; // eax\n  char *v48; // rax\n  float v49; // xmm0_4\n  char *v50; // rax\n  float v51; // xmm0_4\n  const char *v52; // rsi\n  char *v53; // r15\n  signed int v54; // er12\n  char v55; // bp\n  int v56; // eax\n  char *v57; // rax\n  signed int v58; // xmm0_4\n  unsigned int v59; // eax\n  char *v60; // rax\n  float v61; // xmm0_4\n  unsigned int v62; // eax\n  float *v63; // rbx\n  signed __int64 v64; // r12\n  char *v65; // rax\n  signed __int64 v66; // rbp\n  char *v67; // rax\n  float v68; // xmm0_4\n  float v69; // ST10_4\n  unsigned int v70; // eax\n  char *v71; // rax\n  char *v72; // rax\n  signed __int64 v73; // rbp\n  char *v74; // rax\n  float v75; // xmm0_4\n  float v76; // ST10_4\n  unsigned int v77; // eax\n  char *v78; // rax\n  char *v79; // rax\n  bool v80; // cl\n  unsigned __int64 v81; // rbp\n  signed int v82; // xmm0_4\n  unsigned int v83; // eax\n  signed int v84; // xmm0_4\n  unsigned int v85; // eax\n  char *v86; // rax\n  signed int v87; // xmm0_4\n  unsigned int v88; // eax\n  __int64 v89; // rax\n  bool v90; // sf\n  unsigned __int8 v91; // of\n  const char *i; // rsi\n  float *ptr; // [rsp+8h] [rbp-250h]\n  float v95; // [rsp+10h] [rbp-248h]\n  float **v96; // [rsp+18h] [rbp-240h]\n  char s; // [rsp+20h] [rbp-238h]\n  char src; // [rsp+26h] [rbp-232h]\n\n  v2 = 0;\n  if ( !feof(*a1) && fgets(&s, 512, *a1) )\n  {\n    v96 = a2;\n    if ( strncmp(&s, \"HMMER2.0\", 8uLL) )\n      goto LABEL_156;\n    v3 = sub_418FB0(&s, \"HMMER2.0\");\n    ptr = (float *)v3;\n    v4 = 0xFFFFFFFFLL;\n    if ( fgets(&s, 512, *a1) )\n    {\n      v5 = &src;\n      do\n      {\n        if ( !strncmp(&s, \"NAME \", 5uLL) )\n        {\n          sub_419870(v3, v5);\n          continue;\n        }\n        if ( !strncmp(&s, \"ACC  \", 5uLL) )\n        {\n          sub_4198B0(v3, v5);\n          continue;\n        }\n        if ( !strncmp(&s, \"DESC \", 5uLL) )\n        {\n          sub_4198F0(v3, v5);\n          continue;\n        }\n        if ( !strncmp(&s, \"LENG \", 5uLL) )\n        {\n          v4 = strtol(v5, 0LL, 10);\n          continue;\n        }\n        if ( !strncmp(&s, \"NSEQ \", 5uLL) )\n        {\n          *(_DWORD *)(v3 + 56) = strtol(v5, 0LL, 10);\n          continue;\n        }\n        if ( !strncmp(&s, \"ALPH \", 5uLL) )\n        {\n          sub_4382C0(v5, \"ALPH \");\n          v52 = \"AMINO\";\n          if ( !strncmp(v5, \"AMINO\", 5uLL) )\n          {\n            v53 = v5;\n            v54 = 3;\n          }\n          else\n          {\n            v52 = \"NUCLEIC\";\n            v53 = v5;\n            v54 = 2;\n            if ( strncmp(v5, \"NUCLEIC\", 7uLL) )\n              goto LABEL_154;\n          }\n          if ( dword_464004 )\n          {\n            if ( v54 != dword_464004 )\n            {\n              v55 = (unsigned __int64)sub_408760(dword_464004);\n              sub_408760(v54);\n              sub_4325B0(\n                \"Alphabet mismatch error.\\nI thought we were working with %s, but tried to read a %s HMM.\\n\",\n                v55);\n            }\n          }\n          else\n          {\n            sub_401910(v54, (char)v52);\n          }\n          v5 = v53;\nLABEL_92:\n          v3 = (__int64)ptr;\n          continue;\n        }\n        if ( !strncmp(&s, \"RF   \", 5uLL) )\n        {\n          if ( (unsigned int)sub_437040((unsigned int)src, \"RF   \") == 89 )\n            *(_BYTE *)(v3 + 456) |= 4u;\n          continue;\n        }\n        if ( !strncmp(&s, \"CS   \", 5uLL) )\n        {\n          if ( (unsigned int)sub_437040((unsigned int)src, \"CS   \") == 89 )\n            *(_BYTE *)(v3 + 456) |= 8u;\n          continue;\n        }\n        if ( !strncmp(&s, \"MAP  \", 5uLL) )\n        {\n          if ( (unsigned int)sub_437040((unsigned int)src, \"MAP  \") == 89 )\n            *(_BYTE *)(v3 + 457) |= 1u;\n          continue;\n        }\n        if ( !strncmp(&s, \"COM  \", 5uLL) )\n        {\n          sub_4381E0(v5);\n          v6 = *(_QWORD *)(v3 + 48);\n          if ( v6 )\n          {\n            v7 = v4;\n            v8 = v5;\n            v9 = strlen(*(const char **)(v3 + 48));\n            v10 = strlen(v8);\n            v11 = (const char *)sub_438340(\"hmmio.c\", 624LL, v6, 8 * (v9 + v10) + 8);\n            *(_QWORD *)(v3 + 48) = v11;\n            *(_WORD *)&v11[strlen(v11)] = 10;\n            v5 = (char *)v8;\n            v4 = v7;\n            strcat(*(char **)(v3 + 48), v5);\n          }\n          else\n          {\n            *(_QWORD *)(v3 + 48) = sub_4381A0(v5);\n          }\n          continue;\n        }\n        if ( !strncmp(&s, \"DATE \", 5uLL) )\n        {\n          sub_4381E0(v5);\n          *(_QWORD *)(v3 + 64) = sub_4381A0(v5);\n        }\n        else\n        {\n          if ( !strncmp(&s, \"GA   \", 5uLL) )\n          {\n            v12 = v5;\n            v13 = strtok(v5, \" \\t\\n\");\n            if ( !v13 )\n              goto LABEL_154;\n            v14 = strtod(v13, 0LL);\n            ptr[28] = v14;\n            v15 = strtok(0LL, \" \\t\\n\");\n            if ( !v15 )\n              goto LABEL_155;\n            v16 = strtod(v15, 0LL);\n            v17 = ptr;\n            ptr[29] = v16;\n            *((_BYTE *)v17 + 457) |= 4u;\nLABEL_21:\n            v5 = v12;\n            v3 = (__int64)v17;\n            continue;\n          }\n          if ( !strncmp(&s, \"TC   \", 5uLL) )\n          {\n            v12 = v5;\n            v18 = strtok(v5, \" \\t\\n\");\n            if ( !v18 )\n              goto LABEL_154;\n            v19 = strtod(v18, 0LL);\n            ptr[30] = v19;\n            v20 = strtok(0LL, \" \\t\\n\");\n            if ( !v20 )\n              goto LABEL_155;\n            v21 = strtod(v20, 0LL);\n            v17 = ptr;\n            ptr[31] = v21;\n            *((_BYTE *)v17 + 457) |= 8u;\n            goto LABEL_21;\n          }\n          if ( !strncmp(&s, \"NC   \", 5uLL) )\n          {\n            v12 = v5;\n            v22 = strtok(v5, \" \\t\\n\");\n            if ( !v22 )\n              goto LABEL_154;\n            v23 = strtod(v22, 0LL);\n            ptr[32] = v23;\n            v24 = strtok(0LL, \" \\t\\n\");\n            if ( !v24 )\n              goto LABEL_155;\n            v25 = strtod(v24, 0LL);\n            v17 = ptr;\n            ptr[33] = v25;\n            *((_BYTE *)v17 + 457) |= 0x10u;\n            goto LABEL_21;\n          }\n          if ( !strncmp(&s, \"XT   \", 5uLL) )\n          {\n            v26 = v5;\n            v27 = strtok(v5, \" \\t\\n\");\n            if ( v27 )\n            {\n              v28 = 0LL;\n              while ( v27 )\n              {\n                v29 = 0;\n                if ( *v27 != 42 )\n                {\n                  v30 = strtol(v27, 0LL, 10);\n                  v29 = 1065353216;\n                  sub_415AF0(v30);\n                }\n                LODWORD(ptr[2 * v28 + 43]) = v29;\n                v31 = strtok(0LL, \" \\t\\n\");\n                if ( !v31 )\n                  goto LABEL_155;\n                v32 = 0;\n                if ( *v31 != 42 )\n                {\n                  v33 = strtol(v31, 0LL, 10);\n                  v32 = 1065353216;\n                  sub_415AF0(v33);\n                }\n                LODWORD(ptr[2 * v28 + 44]) = v32;\n                v27 = strtok(0LL, \" \\t\\n\");\n                if ( (unsigned __int64)++v28 >= 4 )\n                {\n                  v5 = v26;\n                  goto LABEL_92;\n                }\n              }\n            }\nLABEL_154:\n            if ( ptr )\n              goto LABEL_155;\n            goto LABEL_156;\n          }\n          if ( !strncmp(&s, \"NULT \", 5uLL) )\n          {\n            v34 = strtok(v5, \" \\t\\n\");\n            if ( !v34 )\n              goto LABEL_154;\n            v35 = 0;\n            if ( *v34 != 42 )\n            {\n              v36 = strtol(v34, 0LL, 10);\n              v35 = 1065353216;\n              sub_415AF0(v36);\n            }\n            *((_DWORD *)ptr + 76) = v35;\n            v37 = strtok(0LL, \" \\t\\n\");\n            if ( !v37 )\n              goto LABEL_155;\n            v3 = (__int64)ptr;\n            v38 = ptr[76];\n            v39 = 0.0;\n            if ( *v37 != 42 )\n            {\n              v40 = ptr[76];\n              v41 = strtol(v37, 0LL, 10);\n              v39 = 1.0;\n              sub_415AF0(v41);\n              v38 = v40;\n            }\n            ptr[76] = v38 / (float)(v39 + v38);\n          }\n          else\n          {\n            if ( strncmp(&s, \"NULE \", 5uLL) )\n            {\n              if ( strncmp(&s, \"EVD  \", 5uLL) )\n              {\n                if ( !strncmp(&s, \"CKSUM\", 5uLL) )\n                {\n                  *(_DWORD *)(v3 + 80) = strtol(v5, 0LL, 10);\n                }\n                else if ( !strncmp(&s, \"HMM  \", 5uLL) )\n                {\n                  break;\n                }\n                continue;\n              }\n              *(_BYTE *)(v3 + 456) |= 0x80u;\n              v12 = v5;\n              v48 = strtok(v5, \" \\t\\n\");\n              if ( !v48 )\n                goto LABEL_155;\n              v49 = strtod(v48, 0LL);\n              ptr[112] = v49;\n              v50 = strtok(0LL, \" \\t\\n\");\n              if ( !v50 )\n                goto LABEL_155;\n              v51 = strtod(v50, 0LL);\n              v17 = ptr;\n              ptr[113] = v51;\n              goto LABEL_21;\n            }\n            if ( !dword_464004 )\n              sub_4325B0(\"ALPH must precede NULE in HMM save files\", (unsigned __int64)\"NULE \");\n            v42 = strtok(v5, \" \\t\\n\");\n            v43 = dword_464000;\n            if ( dword_464000 > 0 )\n            {\n              v44 = 0LL;\n              while ( v42 )\n              {\n                v45 = 0.0;\n                if ( *v42 != 42 )\n                {\n                  v46 = 1.0 / (float)v43;\n                  v47 = strtol(v42, 0LL, 10);\n                  v45 = v46;\n                  sub_415AF0(v47);\n                }\n                v3 = (__int64)ptr;\n                ptr[v44 + 56] = v45;\n                v42 = strtok(0LL, \" \\t\\n\");\n                ++v44;\n                v43 = dword_464000;\n                if ( v44 >= dword_464000 )\n                  goto LABEL_93;\n              }\n              goto LABEL_154;\n            }\n          }\n        }\nLABEL_93:\n        ;\n      }\n      while ( fgets(&s, 512, *a1) );\n    }\n    v56 = feof(*a1);\n    if ( (signed int)v4 <= 0 || v56 )\n      goto LABEL_154;\n    if ( !*(_QWORD *)ptr )\n      goto LABEL_155;\n    if ( !dword_464004 )\n      goto LABEL_155;\n    sub_419080(ptr, v4);\n    if ( !fgets(&s, 512, *a1) )\n      goto LABEL_155;\n    if ( !fgets(&s, 512, *a1) )\n      goto LABEL_155;\n    v57 = strtok(&s, \" \\t\\n\");\n    if ( !v57 )\n      goto LABEL_155;\n    *(float *)&v58 = 0.0;\n    if ( *v57 != 42 )\n    {\n      v59 = strtol(v57, 0LL, 10);\n      *(float *)&v58 = 1.0;\n      sub_415AF0(v59);\n    }\n    v95 = *(float *)&v58;\n    if ( !strtok(0LL, \" \\t\\n\") )\n      goto LABEL_155;\n    v60 = strtok(0LL, \" \\t\\n\");\n    if ( !v60 )\n      goto LABEL_155;\n    v61 = 0.0;\n    if ( *v60 != 42 )\n    {\n      v62 = strtol(v60, 0LL, 10);\n      v61 = 1.0;\n      sub_415AF0(v62);\n    }\n    v63 = ptr;\n    ptr[42] = v61 / (float)(v95 + v61);\n    if ( *((_DWORD *)ptr + 34) <= 0 )\n    {\nLABEL_150:\n      for ( i = (const char *)512; fgets(&s, 512, *a1); i = (const char *)512 )\n      {\n        i = \"//\";\n        if ( !strncmp(&s, \"//\", 2uLL) )\n          break;\n      }\n      sub_41A6B0(v63, i);\n      *((_DWORD *)v63 + 114) = (_DWORD)v63[114] & 0xFFFFFFDE | 0x20;\n      *v96 = v63;\n    }\n    else\n    {\n      v64 = 1LL;\nLABEL_109:\n      if ( fgets(&s, 512, *a1) )\n      {\n        v65 = strtok(&s, \" \\t\\n\");\n        if ( v65 )\n        {\n          if ( v64 == (unsigned int)strtol(v65, 0LL, 10) )\n          {\n            if ( dword_464000 > 0 )\n            {\n              v66 = 0LL;\n              do\n              {\n                v67 = strtok(0LL, \" \\t\\n\");\n                if ( !v67 )\n                  goto LABEL_154;\n                v68 = 0.0;\n                if ( *v67 != 42 )\n                {\n                  v69 = ptr[v66 + 56];\n                  v70 = strtol(v67, 0LL, 10);\n                  v68 = v69;\n                  sub_415AF0(v70);\n                }\n                *(float *)(*(_QWORD *)(*((_QWORD *)ptr + 19) + 8 * v64) + 4 * v66++) = v68;\n              }\n              while ( v66 < dword_464000 );\n            }\n            if ( *((_BYTE *)ptr + 457) & 1 )\n            {\n              v71 = strtok(0LL, \" \\t\\n\");\n              if ( !v71 )\n                goto LABEL_155;\n              *(_DWORD *)(*((_QWORD *)ptr + 9) + 4 * v64) = strtol(v71, 0LL, 10);\n            }\n            if ( fgets(&s, 512, *a1) )\n            {\n              v72 = strtok(&s, \" \\t\\n\");\n              if ( v72 )\n              {\n                if ( (_BYTE)ptr[114] & 4 )\n                  *(_BYTE *)(*((_QWORD *)ptr + 3) + v64) = *v72;\n                if ( v64 < *((signed int *)ptr + 34) && dword_464000 > 0 )\n                {\n                  v73 = 0LL;\n                  do\n                  {\n                    v74 = strtok(0LL, \" \\t\\n\");\n                    if ( !v74 )\n                      goto LABEL_154;\n                    v75 = 0.0;\n                    if ( *v74 != 42 )\n                    {\n                      v76 = ptr[v73 + 56];\n                      v77 = strtol(v74, 0LL, 10);\n                      v75 = v76;\n                      sub_415AF0(v77);\n                    }\n                    *(float *)(*(_QWORD *)(*((_QWORD *)ptr + 20) + 8 * v64) + 4 * v73++) = v75;\n                  }\n                  while ( v73 < dword_464000 );\n                }\n                if ( fgets(&s, 512, *a1) )\n                {\n                  v78 = strtok(&s, \" \\t\\n\");\n                  if ( v78 )\n                  {\n                    if ( (_BYTE)ptr[114] & 8 )\n                      *(_BYTE *)(*((_QWORD *)ptr + 4) + v64) = *v78;\n                    v79 = strtok(0LL, \" \\t\\n\");\n                    v80 = v79 == 0LL;\n                    v81 = 0LL;\n                    while ( !v80 )\n                    {\n                      if ( v64 < *((signed int *)ptr + 34) )\n                      {\n                        v82 = 0;\n                        if ( *v79 != 42 )\n                        {\n                          v83 = strtol(v79, 0LL, 10);\n                          v82 = 1065353216;\n                          sub_415AF0(v83);\n                        }\n                        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ptr + 18) + 8 * v64) + 4 * v81) = v82;\n                      }\n                      ++v81;\n                      v79 = strtok(0LL, \" \\t\\n\");\n                      v80 = v79 == 0LL;\n                      if ( v81 >= 7 )\n                      {\n                        if ( !v79 )\n                          goto LABEL_155;\n                        v84 = 0;\n                        if ( *v79 != 42 )\n                        {\n                          v85 = strtol(v79, 0LL, 10);\n                          v84 = 1065353216;\n                          sub_415AF0(v85);\n                        }\n                        *(_DWORD *)(*((_QWORD *)ptr + 26) + 4 * v64) = v84;\n                        v86 = strtok(0LL, \" \\t\\n\");\n                        if ( !v86 )\n                          goto LABEL_155;\n                        v87 = 0;\n                        if ( *v86 != 42 )\n                        {\n                          v88 = strtol(v86, 0LL, 10);\n                          v87 = 1065353216;\n                          sub_415AF0(v88);\n                        }\n                        v63 = ptr;\n                        *(_DWORD *)(*((_QWORD *)ptr + 27) + 4 * v64) = v87;\n                        v89 = *((signed int *)ptr + 34);\n                        v91 = __OFSUB__(v64, v89);\n                        v90 = v64++ - v89 < 0;\n                        if ( v90 ^ v91 )\n                          goto LABEL_109;\n                        goto LABEL_150;\n                      }\n                    }\n                    goto LABEL_154;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\nLABEL_155:\n      sub_419540(ptr);\nLABEL_156:\n      *v96 = 0LL;\n    }\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x410420L", 
            "funcEndAddr": "0x4111f9L", 
            "funcName": "sub_410420"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411200(FILE **a1, _QWORD *a2)\n{\n  _QWORD *v2; // r14\n  FILE *v3; // r12\n  unsigned int v4; // ebp\n  _BYTE *v5; // r15\n  const char *v6; // rax\n  unsigned int v7; // er13\n  __int64 v8; // rax\n  __int64 v9; // rax\n  const char *v10; // rbp\n  const char *v11; // rsi\n  signed int v12; // ebp\n  const char *v13; // rax\n  const char *v15; // rax\n  const char *v16; // rax\n  const char *v17; // rax\n  signed __int64 v18; // rbp\n  const char *v19; // rax\n  signed int v20; // xmm0_4\n  unsigned int v21; // eax\n  int v22; // eax\n  int v23; // ebx\n  const char *v24; // rax\n  bool v25; // cl\n  int v26; // ebx\n  int v27; // ebp\n  signed int v28; // xmm0_4\n  unsigned int v29; // eax\n  const char *v30; // rax\n  float v31; // xmm0_4\n  unsigned int v32; // eax\n  __int64 v33; // rax\n  float v34; // xmm1_4\n  signed __int64 v35; // rsi\n  __int64 v36; // rax\n  signed __int64 v37; // r13\n  int v38; // ebp\n  const char *v39; // rax\n  bool v40; // cl\n  __int64 v41; // rbp\n  int v42; // xmm0_4\n  int v43; // ST08_4\n  unsigned int v44; // eax\n  __int64 v45; // rbx\n  signed int v46; // xmm0_4\n  unsigned int v47; // eax\n  const char *v48; // rax\n  signed int v49; // xmm0_4\n  unsigned int v50; // eax\n  const char *v51; // rax\n  signed int v52; // xmm0_4\n  unsigned int v53; // eax\n  const char *v54; // rax\n  signed int v55; // xmm0_4\n  unsigned int v56; // eax\n  const char *v57; // rax\n  signed int v58; // xmm0_4\n  unsigned int v59; // eax\n  const char *v60; // rax\n  signed int v61; // xmm0_4\n  unsigned int v62; // eax\n  const char *v63; // rax\n  signed int v64; // xmm0_4\n  unsigned int v65; // eax\n  _BYTE *v66; // rax\n  _BYTE *v67; // rax\n  bool v68; // sf\n  unsigned __int8 v69; // of\n  signed __int64 v70; // rbx\n  __int64 v71; // rbp\n  const char *v72; // rax\n  int v73; // xmm0_4\n  int v74; // ST08_4\n  unsigned int v75; // eax\n  __int64 v76; // rax\n  char v77; // [rsp+8h] [rbp-240h]\n  char s; // [rsp+10h] [rbp-238h]\n\n  v2 = a2;\n  v3 = *a1;\n  v4 = 0;\n  if ( !feof(*a1) && fgets(&s, 512, v3) )\n  {\n    if ( strncmp(&s, \"HMMER v1.9\", 0xAuLL) )\n      goto LABEL_21;\n    v5 = (_BYTE *)sub_418FB0(&s, \"HMMER v1.9\");\n    v6 = (const char *)sub_416CA0(v3);\n    if ( v6 )\n    {\n      v7 = strtol(v6, 0LL, 10);\n      if ( sub_416CA0(v3) )\n      {\n        v8 = sub_416CA0(v3);\n        if ( v8 )\n        {\n          sub_419870(v5, v8);\n          v9 = sub_416CA0(v3);\n          v10 = (const char *)v9;\n          if ( v9 )\n          {\n            sub_4382C0(v9, 4LL);\n            v11 = \"AMINO\";\n            if ( !strcmp(v10, \"AMINO\") )\n            {\n              v12 = 3;\nLABEL_12:\n              if ( dword_464004 )\n              {\n                if ( v12 != dword_464004 )\n                {\n                  v77 = (unsigned __int64)sub_408760(dword_464004);\n                  sub_408760(v12);\n                  sub_4325B0(\n                    \"Alphabet mismatch error.\\nI thought we were working with %s, but tried to read a %s HMM.\\n\",\n                    v77);\n                }\n              }\n              else\n              {\n                sub_401910(v12, (char)v11);\n              }\n              v13 = (const char *)sub_416CA0(v3);\n              if ( v13 )\n              {\n                if ( !strncmp(v13, ::s, dword_464000) )\n                {\n                  v15 = (const char *)sub_416CA0(v3);\n                  if ( v15 )\n                  {\n                    if ( !strcmp(v15, \"yes\") )\n                      v5[456] |= 4u;\n                    v16 = (const char *)sub_416CA0(v3);\n                    if ( v16 )\n                    {\n                      if ( !strcmp(v16, \"yes\") )\n                        v5[456] |= 8u;\n                      v17 = (const char *)sub_416CA0(v3);\n                      if ( v17 )\n                      {\n                        if ( !strcmp(v17, \"null\") )\n                        {\n                          if ( dword_464000 <= 0 )\n                          {\nLABEL_38:\n                            *((_DWORD *)v5 + 76) = dword_4451B8[dword_464004 == 3];\n                            v22 = feof(*a1);\n                            if ( (signed int)v7 <= 0 )\n                              goto LABEL_20;\n                            if ( v22 )\n                              goto LABEL_20;\n                            if ( !*(_QWORD *)v5 )\n                              goto LABEL_20;\n                            if ( !dword_464004 )\n                              goto LABEL_20;\n                            sub_419080(v5, v7);\n                            sub_419730(v5, v7);\n                            sub_41ABD0(v5);\n                            if ( !sub_416CA0(v3) )\n                              goto LABEL_20;\n                            v23 = dword_464000;\n                            v24 = (const char *)sub_416CA0(v3);\n                            v25 = v24 == 0LL;\n                            if ( v23 <= 0 )\n                            {\nLABEL_47:\n                              if ( !v25 )\n                              {\n                                v28 = 0;\n                                if ( *v24 != 42 )\n                                {\n                                  v29 = strtol(v24, 0LL, 10);\n                                  v28 = 1065353216;\n                                  sub_415AF0(v29);\n                                }\n                                *(_DWORD *)(*((_QWORD *)v5 + 26) + 4LL) = v28;\n                                v30 = (const char *)sub_416CA0(v3);\n                                if ( v30 )\n                                {\n                                  v31 = 0.0;\n                                  if ( *v30 != 42 )\n                                  {\n                                    v32 = strtol(v30, 0LL, 10);\n                                    v31 = 1.0;\n                                    sub_415AF0(v32);\n                                  }\n                                  *((float *)v5 + 42) = v31;\n                                  v33 = *((_QWORD *)v5 + 26);\n                                  v34 = *(float *)(v33 + 4) / (float)(v31 + *(float *)(v33 + 4));\n                                  *(float *)(v33 + 4) = v34;\n                                  *((float *)v5 + 42) = *((float *)v5 + 42) / (float)(v34 + *((float *)v5 + 42));\n                                  if ( sub_416CA0(v3) )\n                                  {\n                                    if ( sub_416CA0(v3) )\n                                    {\n                                      if ( sub_416CA0(v3) )\n                                      {\n                                        if ( sub_416CA0(v3) )\n                                        {\n                                          if ( sub_416CA0(v3) )\n                                          {\n                                            if ( sub_416CA0(v3) )\n                                            {\n                                              if ( sub_416CA0(v3) )\n                                              {\n                                                if ( sub_416CA0(v3) )\n                                                {\n                                                  v35 = 4LL;\n                                                  if ( sub_416CA0(v3) )\n                                                  {\n                                                    LODWORD(v36) = *((_DWORD *)v5 + 34);\n                                                    if ( (signed int)v36 <= 0 )\n                                                    {\nLABEL_115:\n                                                      if ( (signed int)v36 < 0 )\n                                                      {\nLABEL_128:\n                                                        *((_DWORD *)v5 + 114) = *((_DWORD *)v5 + 114) & 0xFFFFFFDE | 0x20;\n                                                        sub_41A6B0(v5, v35);\n                                                        *((_QWORD *)v5 + 6) = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n                                                        sub_419A30(v5, v35);\n                                                        *v2 = v5;\n                                                        goto LABEL_22;\n                                                      }\n                                                      v70 = 0LL;\n                                                      while ( 1 )\n                                                      {\n                                                        v35 = 1LL;\n                                                        if ( !sub_416CA0(v3) )\n                                                          break;\n                                                        if ( dword_464000 > 0 )\n                                                        {\n                                                          v71 = 0LL;\n                                                          do\n                                                          {\n                                                            v35 = 1LL;\n                                                            v72 = (const char *)sub_416CA0(v3);\n                                                            if ( !v72 )\n                                                              goto LABEL_19;\n                                                            if ( v70 && v70 < *((signed int *)v5 + 34) )\n                                                            {\n                                                              v73 = 0;\n                                                              if ( *v72 != 42 )\n                                                              {\n                                                                v74 = *(_DWORD *)&v5[4 * v71 + 224];\n                                                                v35 = 0LL;\n                                                                v75 = strtol(v72, 0LL, 10);\n                                                                v73 = v74;\n                                                                sub_415AF0(v75);\n                                                              }\n                                                              *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 20) + 8 * v70)\n                                                                        + 4 * v71) = v73;\n                                                            }\n                                                          }\n                                                          while ( ++v71 < dword_464000 );\n                                                        }\n                                                        v76 = *((signed int *)v5 + 34);\n                                                        v69 = __OFSUB__(v70, v76);\n                                                        v68 = v70++ - v76 < 0;\n                                                        if ( !(v68 ^ v69) )\n                                                          goto LABEL_128;\n                                                      }\n                                                    }\n                                                    else\n                                                    {\n                                                      v37 = 1LL;\n                                                      while ( sub_416CA0(v3) )\n                                                      {\n                                                        v38 = dword_464000;\n                                                        v39 = (const char *)sub_416CA0(v3);\n                                                        v40 = v39 == 0LL;\n                                                        if ( v38 > 0 )\n                                                        {\n                                                          v41 = 0LL;\n                                                          while ( !v40 )\n                                                          {\n                                                            v42 = 0;\n                                                            if ( *v39 != 42 )\n                                                            {\n                                                              v43 = *(_DWORD *)&v5[4 * v41 + 224];\n                                                              v44 = strtol(v39, 0LL, 10);\n                                                              v42 = v43;\n                                                              sub_415AF0(v44);\n                                                            }\n                                                            *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 19) + 8 * v37)\n                                                                      + 4 * v41++) = v42;\n                                                            v45 = dword_464000;\n                                                            v39 = (const char *)sub_416CA0(v3);\n                                                            v40 = v39 == 0LL;\n                                                            if ( v41 >= v45 )\n                                                              goto LABEL_71;\n                                                          }\n                                                          goto LABEL_19;\n                                                        }\nLABEL_71:\n                                                        if ( v40 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v46 = 0;\n                                                          if ( *v39 != 42 )\n                                                          {\n                                                            v47 = strtol(v39, 0LL, 10);\n                                                            v46 = 1065353216;\n                                                            sub_415AF0(v47);\n                                                          }\n                                                          **(_DWORD **)(*((_QWORD *)v5 + 18) + 8 * v37) = v46;\n                                                        }\n                                                        v48 = (const char *)sub_416CA0(v3);\n                                                        if ( !v48 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v49 = 0;\n                                                          if ( *v48 != 42 )\n                                                          {\n                                                            v50 = strtol(v48, 0LL, 10);\n                                                            v49 = 1065353216;\n                                                            sub_415AF0(v50);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 8LL) = v49;\n                                                        }\n                                                        v51 = (const char *)sub_416CA0(v3);\n                                                        if ( !v51 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v52 = 0;\n                                                          if ( *v51 != 42 )\n                                                          {\n                                                            v53 = strtol(v51, 0LL, 10);\n                                                            v52 = 1065353216;\n                                                            sub_415AF0(v53);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 4LL) = v52;\n                                                        }\n                                                        v54 = (const char *)sub_416CA0(v3);\n                                                        if ( !v54 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v55 = 0;\n                                                          if ( *v54 != 42 )\n                                                          {\n                                                            v56 = strtol(v54, 0LL, 10);\n                                                            v55 = 1065353216;\n                                                            sub_415AF0(v56);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 20LL) = v55;\n                                                        }\n                                                        v57 = (const char *)sub_416CA0(v3);\n                                                        if ( !v57 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v58 = 0;\n                                                          if ( *v57 != 42 )\n                                                          {\n                                                            v59 = strtol(v57, 0LL, 10);\n                                                            v58 = 1065353216;\n                                                            sub_415AF0(v59);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 24LL) = v58;\n                                                        }\n                                                        if ( !sub_416CA0(v3) )\n                                                          goto LABEL_20;\n                                                        v60 = (const char *)sub_416CA0(v3);\n                                                        if ( !v60 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v61 = 0;\n                                                          if ( *v60 != 42 )\n                                                          {\n                                                            v62 = strtol(v60, 0LL, 10);\n                                                            v61 = 1065353216;\n                                                            sub_415AF0(v62);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 12LL) = v61;\n                                                        }\n                                                        if ( !sub_416CA0(v3) )\n                                                          goto LABEL_20;\n                                                        v63 = (const char *)sub_416CA0(v3);\n                                                        if ( !v63 )\n                                                          goto LABEL_20;\n                                                        if ( v37 < *((signed int *)v5 + 34) )\n                                                        {\n                                                          v64 = 0;\n                                                          if ( *v63 != 42 )\n                                                          {\n                                                            v65 = strtol(v63, 0LL, 10);\n                                                            v64 = 1065353216;\n                                                            sub_415AF0(v65);\n                                                          }\n                                                          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 18) + 8 * v37) + 16LL) = v64;\n                                                        }\n                                                        v66 = (_BYTE *)sub_416CA0(v3);\n                                                        if ( !v66 )\n                                                          goto LABEL_20;\n                                                        if ( v5[456] & 4 )\n                                                          *(_BYTE *)(*((_QWORD *)v5 + 3) + v37) = *v66;\n                                                        v35 = 4LL;\n                                                        v67 = (_BYTE *)sub_416CA0(v3);\n                                                        if ( !v67 )\n                                                          goto LABEL_20;\n                                                        if ( v5[456] & 8 )\n                                                          *(_BYTE *)(*((_QWORD *)v5 + 4) + v37) = *v67;\n                                                        v36 = *((signed int *)v5 + 34);\n                                                        v69 = __OFSUB__(v37, v36);\n                                                        v68 = v37++ - v36 < 0;\n                                                        if ( !(v68 ^ v69) )\n                                                          goto LABEL_115;\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                                goto LABEL_20;\n                              }\n                            }\n                            else\n                            {\n                              v26 = 0;\n                              while ( !v25 )\n                              {\n                                ++v26;\n                                v27 = dword_464000;\n                                v24 = (const char *)sub_416CA0(v3);\n                                v25 = v24 == 0LL;\n                                if ( v26 >= v27 )\n                                  goto LABEL_47;\n                              }\n                            }\n                          }\n                          else\n                          {\n                            v18 = 0LL;\n                            while ( 1 )\n                            {\n                              v19 = (const char *)sub_416CA0(v3);\n                              if ( !v19 )\n                                break;\n                              v20 = 0;\n                              if ( *v19 != 42 )\n                              {\n                                v21 = strtol(v19, 0LL, 10);\n                                v20 = 1065353216;\n                                sub_415AF0(v21);\n                              }\n                              *(_DWORD *)&v5[4 * v18++ + 224] = v20;\n                              if ( v18 >= dword_464000 )\n                                goto LABEL_38;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              goto LABEL_19;\n            }\n            v11 = \"NUCLEIC\";\n            if ( !strcmp(v10, \"NUCLEIC\") )\n            {\n              v12 = 2;\n              goto LABEL_12;\n            }\n          }\n        }\n      }\n    }\nLABEL_19:\n    if ( v5 )\nLABEL_20:\n      sub_419540(v5);\nLABEL_21:\n    *v2 = 0LL;\nLABEL_22:\n    v4 = 1;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x411200L", 
            "funcEndAddr": "0x411b6eL", 
            "funcName": "sub_411200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411B70(FILE **a1, _QWORD *a2)\n{\n  unsigned int v2; // ebp\n  FILE *v3; // r14\n  char *v4; // rbx\n  const unsigned __int16 **v5; // r15\n  unsigned int v6; // ebp\n  char *v7; // rax\n  int v8; // eax\n  signed int v9; // er12\n  char v10; // bl\n  _BYTE *v11; // r12\n  char *v12; // rax\n  char *v13; // rbx\n  char *v14; // rax\n  __int64 v15; // rbp\n  char *v16; // rax\n  float v17; // xmm0_4\n  signed __int64 v18; // rbx\n  char *v19; // rax\n  float v20; // xmm0_4\n  char *v21; // rax\n  float v22; // xmm0_4\n  char *v23; // rax\n  char v24; // cl\n  char v25; // cl\n  char *v26; // rax\n  float v27; // xmm0_4\n  signed __int64 v28; // rbx\n  char *v29; // rax\n  float v30; // xmm0_4\n  char *v31; // rax\n  float v32; // xmm0_4\n  signed __int64 v33; // rbx\n  signed __int64 v34; // rbp\n  char *v35; // rax\n  float v36; // xmm0_4\n  char *v37; // rax\n  float v38; // xmm0_4\n  signed __int64 v39; // rbx\n  char *v40; // rax\n  float v41; // xmm0_4\n  char *v42; // rax\n  float v43; // xmm0_4\n  signed __int64 v44; // rbx\n  signed __int64 v45; // rbp\n  char *v46; // rax\n  float v47; // xmm0_4\n  __int64 v48; // rax\n  __int64 v49; // rdi\n  __int64 v51; // [rsp+0h] [rbp-438h]\n  char s; // [rsp+200h] [rbp-238h]\n\n  v2 = 0;\n  if ( !feof(*a1) && fgets(&s, 512, *a1) )\n  {\n    v3 = *a1;\n    if ( fgets((char *)&v51, 512, *a1) )\n    {\n      v4 = strtok((char *)&v51, \" \\t\\n\");\n      if ( v4 )\n      {\n        v5 = __ctype_b_loc();\n        if ( (*v5)[*v4] & 0x800 )\n        {\n          v6 = strtol(v4, 0LL, 10);\n          if ( fgets((char *)&v51, 512, v3) )\n          {\n            v7 = strtok((char *)&v51, \" \\t\\n\");\n            if ( v7 )\n            {\n              if ( (*v5)[*v7] & 0x800 )\n              {\n                v8 = strtol(v7, 0LL, 10);\n                if ( v8 == 4 )\n                {\n                  v9 = 2;\n                }\n                else\n                {\n                  if ( v8 != 20 )\n                    sub_4325B0(\"A nonbiological alphabet size of %d; so I can't convert plan9 to plan7\", v8);\n                  v9 = 3;\n                }\n                if ( dword_464004 )\n                {\n                  if ( v9 != dword_464004 )\n                  {\n                    v10 = (unsigned __int64)sub_408760(dword_464004);\n                    sub_408760(v9);\n                    sub_4325B0(\n                      \"Alphabet mismatch error.\\nI thought we were working with %s, but tried to read a %s HMM.\\n\",\n                      v10);\n                  }\n                }\n                else\n                {\n                  sub_401910(v9, 0);\n                }\n                v11 = (_BYTE *)sub_41BDB0(v6, 0LL);\n                if ( !v11 )\n                  sub_4325B0(\"malloc failed for reading hmm in\\n\", 0);\n                if ( fgets((char *)&v51, 512, v3) )\n                {\n                  v12 = strtok((char *)&v51, \" \\t\\n\");\n                  if ( v12 )\n                  {\n                    if ( (*v5)[*v12] & 0x800\n                      && fgets((char *)&v51, 512, v3)\n                      && strtok((char *)&v51, \" \\t\\n\")\n                      && fgets((char *)&v51, 512, v3) )\n                    {\n                      if ( !strncmp((const char *)&v51, \"yes\", 3uLL) )\n                        v11[144] |= 1u;\n                      if ( fgets((char *)&v51, 512, v3) )\n                      {\n                        if ( !strncmp((const char *)&v51, \"yes\", 3uLL) )\n                          v11[144] |= 2u;\n                        if ( fgets((char *)&v51, 512, v3) )\n                        {\n                          while ( 1 )\n                          {\n                            v13 = strtok((char *)&v51, \" \\t\\n\");\n                            if ( !v13 )\n                              break;\n                            v14 = strtok(0LL, \" \\t\\n\");\n                            if ( !v14 )\n                              break;\n                            if ( !((*v5)[*v14] & 0x800) )\n                              break;\n                            LODWORD(v15) = strtol(v14, 0LL, 10);\n                            if ( (signed int)v15 < 0 || *(_DWORD *)v11 + 1 < (signed int)v15 )\n                              break;\n                            if ( !strcmp(v13, \"###MATCH_STATE\") )\n                            {\n                              v23 = strtok(0LL, \"\\n\") - 1;\n                              do\n                                v24 = (v23++)[1];\n                              while ( (v24 == 40) != (v24 != 0) );\n                              if ( v24 != 40 )\n                                break;\n                              v15 = (signed int)v15;\n                              *(_BYTE *)(*((_QWORD *)v11 + 15) + (signed int)v15) = v23[1];\n                              do\n                                v25 = *v23++;\n                              while ( (v25 == 40) != (v25 != 0) );\n                              if ( v25 != 40 )\n                                break;\n                              *(_BYTE *)(*((_QWORD *)v11 + 16) + v15) = *v23;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v26 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v26 )\n                                break;\n                              v27 = strtod(v26, 0LL);\n                              v28 = 92 * v15;\n                              *(float *)(*((_QWORD *)v11 + 2) + 92 * v15) = v27;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v29 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v29 )\n                                break;\n                              v30 = strtod(v29, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 2) + v28 + 8) = v30;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v31 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v31 )\n                                break;\n                              v32 = strtod(v31, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 2) + v28 + 4) = v32;\n                              if ( dword_464000 > 0 )\n                              {\n                                v33 = v28 + 12;\n                                v34 = 0LL;\n                                while ( fgets((char *)&v51, 512, v3) )\n                                {\n                                  v35 = strtok((char *)&v51, \" \\t\\n\");\n                                  if ( !v35 )\n                                    break;\n                                  v36 = strtod(v35, 0LL);\n                                  *(float *)(v33 + *((_QWORD *)v11 + 2) + 4 * v34++) = v36;\n                                  if ( v34 >= dword_464000 )\n                                    goto LABEL_77;\n                                }\n                                break;\n                              }\n                            }\n                            else if ( !strcmp(v13, \"###INSERT_STATE\") )\n                            {\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v37 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v37 )\n                                break;\n                              v38 = strtod(v37, 0LL);\n                              v39 = 92LL * (signed int)v15;\n                              *(float *)(*((_QWORD *)v11 + 1) + v39) = v38;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v40 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v40 )\n                                break;\n                              v41 = strtod(v40, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 1) + v39 + 8) = v41;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v42 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v42 )\n                                break;\n                              v43 = strtod(v42, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 1) + v39 + 4) = v43;\n                              if ( dword_464000 > 0 )\n                              {\n                                v44 = v39 + 12;\n                                v45 = 0LL;\n                                while ( fgets((char *)&v51, 512, v3) )\n                                {\n                                  v46 = strtok((char *)&v51, \" \\t\\n\");\n                                  if ( !v46 )\n                                    break;\n                                  v47 = strtod(v46, 0LL);\n                                  *(float *)(v44 + *((_QWORD *)v11 + 1) + 4 * v45++) = v47;\n                                  if ( v45 >= dword_464000 )\n                                    goto LABEL_77;\n                                }\n                                break;\n                              }\n                            }\n                            else\n                            {\n                              if ( strcmp(v13, \"###DELETE_STATE\") )\n                                break;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v16 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v16 )\n                                break;\n                              v17 = strtod(v16, 0LL);\n                              v18 = 92LL * (signed int)v15;\n                              *(float *)(*((_QWORD *)v11 + 3) + v18) = v17;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v19 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v19 )\n                                break;\n                              v20 = strtod(v19, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 3) + v18 + 8) = v20;\n                              if ( !fgets((char *)&v51, 512, v3) )\n                                break;\n                              v21 = strtok((char *)&v51, \" \\t\\n\");\n                              if ( !v21 )\n                                break;\n                              v22 = strtod(v21, 0LL);\n                              *(float *)(*((_QWORD *)v11 + 3) + v18 + 4) = v22;\n                            }\nLABEL_77:\n                            if ( !fgets((char *)&v51, 512, v3) )\n                              goto LABEL_78;\n                          }\n                        }\n                        else\n                        {\nLABEL_78:\n                          sub_41C6A0(v11 + 32, 512LL);\n                          sub_41C600(v11);\n                          if ( v11 )\n                          {\n                            sub_41B510(v11, &v51);\n                            v48 = sub_4381A0(\"[converted from an old Plan9 HMM]\");\n                            v49 = v51;\n                            *(_QWORD *)(v51 + 48) = v48;\n                            sub_419A30(v49, &v51);\n                            sub_41C590(v11);\n                            sub_41A6B0(v51, &v51);\n                            *a2 = v51;\n                            return 1;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    *a2 = 0LL;\n    return 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x411b70L", 
            "funcEndAddr": "0x412304L", 
            "funcName": "sub_411B70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412350(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // rsi\n\n  v2 = a2;\n  if ( *(_DWORD *)(a1 + 32) )\n  {\n    v3 = *(unsigned int *)(a1 + 36);\n    if ( (unsigned int)sub_439950(*(_QWORD *)a1, v3, a1 + 40) )\n      sub_4325B0(\"SSIGetFilePosition() failed\", v3);\n  }\n  return (*(__int64 (__fastcall **)(__int64, __int64))(a1 + 16))(a1, v2);\n}\n", 
            "funcStartAddr": "0x412350L", 
            "funcEndAddr": "0x412392L", 
            "funcName": "sub_412350"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4123A0(FILE **a1)\n{\n  rewind(*a1);\n}\n", 
            "funcStartAddr": "0x4123a0L", 
            "funcEndAddr": "0x4123a8L", 
            "funcName": "sub_4123A0"
        }, 
        {
            "decompiledFuncCode": "size_t __usercall sub_412450@<rax>(FILE *s@<rdi>, __int64 a2@<rax>, __int64 a3@<rsi>)\n{\n  __int64 v3; // r15\n  FILE *v4; // r14\n  int v5; // eax\n  const char *v6; // rdx\n  const char *v7; // rbx\n  const char *v8; // rdx\n  const char *v9; // rdx\n  int v10; // eax\n  char *v11; // rdi\n  char *v12; // rbx\n  char *i; // rdi\n  int v14; // eax\n  __int64 v15; // rdx\n  __int64 v16; // rcx\n  double v17; // xmm0_8\n  const char *v18; // rbx\n  int v19; // eax\n  unsigned int v20; // eax\n  __int64 v21; // rdx\n  __int64 v22; // rcx\n  double v23; // xmm0_8\n  const char *v24; // rbx\n  unsigned int v25; // eax\n  __int64 v26; // rdx\n  __int64 v27; // rcx\n  double v28; // xmm0_8\n  const char *v29; // rbx\n  unsigned int v30; // eax\n  __int64 v31; // rdx\n  __int64 v32; // rcx\n  double v33; // xmm0_8\n  const char *v34; // rbx\n  unsigned int v35; // eax\n  __int64 v36; // rdx\n  __int64 v37; // rcx\n  double v38; // xmm0_8\n  const char *v39; // rbx\n  unsigned int v40; // eax\n  __int64 v41; // rdx\n  __int64 v42; // rcx\n  double v43; // xmm0_8\n  const char *v44; // rbx\n  unsigned int v45; // eax\n  __int64 v46; // rdx\n  __int64 v47; // rcx\n  double v48; // xmm0_8\n  const char *v49; // rbx\n  unsigned int v50; // eax\n  __int64 v51; // rdx\n  __int64 v52; // rcx\n  double v53; // xmm0_8\n  const char *v54; // rbx\n  unsigned int v55; // eax\n  __int64 v56; // rdx\n  __int64 v57; // rcx\n  double v58; // xmm0_8\n  const char *v59; // rbx\n  unsigned int v60; // eax\n  __int64 v61; // rdx\n  __int64 v62; // rcx\n  double v63; // xmm0_8\n  const char *v64; // rbx\n  unsigned int v65; // eax\n  const char *v66; // rdi\n  const char *v67; // rsi\n  __int64 v68; // rdx\n  __int64 v69; // rcx\n  signed int v70; // eax\n  signed __int64 v71; // rbx\n  double v72; // xmm0_8\n  const char *v73; // rdx\n  double v74; // xmm1_8\n  unsigned int v75; // eax\n  signed __int64 v76; // rbx\n  __int64 v77; // rdx\n  __int64 v78; // rcx\n  double v79; // xmm0_8\n  const char *v80; // r12\n  unsigned int v81; // eax\n  const char *v82; // rbx\n  __int64 v83; // rdx\n  __int64 v84; // rcx\n  double v85; // xmm0_8\n  unsigned int v86; // eax\n  signed __int64 v87; // r12\n  unsigned int v88; // eax\n  const char *v89; // rdx\n  unsigned int v90; // eax\n  const char *v91; // rdx\n  unsigned int v92; // eax\n  const char *v93; // rdx\n  unsigned int v94; // eax\n  const char *v95; // rdx\n  unsigned int v96; // eax\n  const char *v97; // rdx\n  unsigned int v98; // eax\n  const char *v99; // rdx\n  unsigned int v100; // eax\n  const char *v101; // rdx\n  const char *v102; // rsi\n  FILE *v103; // rdi\n  __int64 v104; // rdx\n  __int64 v105; // rcx\n  signed __int64 v106; // rbx\n  double v107; // xmm0_8\n  const char *v108; // rdx\n  double v109; // xmm1_8\n  unsigned int v110; // eax\n  signed __int64 v111; // rdx\n  const char *v112; // rsi\n  FILE *v113; // rdi\n  __int64 v114; // rdx\n  __int64 v115; // rcx\n  signed __int64 v116; // rbx\n  double v117; // xmm1_8\n  unsigned int v118; // eax\n  const char *v119; // rdx\n  double v120; // xmm0_8\n  signed __int64 v121; // rdx\n  __int64 v122; // rdx\n  __int64 v123; // rcx\n  double v124; // xmm0_8\n  __int64 v125; // rdx\n  __int64 v126; // rcx\n  double v127; // xmm0_8\n  __int64 v128; // rdx\n  __int64 v129; // rcx\n  double v130; // xmm0_8\n  __int64 v131; // rdx\n  __int64 v132; // rcx\n  double v133; // xmm0_8\n  __int64 v134; // rdx\n  __int64 v135; // rcx\n  double v136; // xmm0_8\n  __int64 v137; // rdx\n  __int64 v138; // rcx\n  double v139; // xmm0_8\n  __int64 v140; // rdx\n  __int64 v141; // rcx\n  double v142; // xmm0_8\n  __int64 v143; // rdx\n  __int64 v144; // rcx\n  double v145; // xmm0_8\n  const char *v146; // rdx\n  unsigned int v147; // eax\n  __int64 v148; // rdx\n  __int64 v149; // rcx\n  double v150; // xmm0_8\n  const char *v151; // rdx\n  unsigned int v152; // eax\n  __int64 v153; // rax\n  bool v154; // sf\n  unsigned __int8 v155; // of\n\n  v3 = a3;\n  v4 = s;\n  fprintf(s, \"HMMER2.0  [%s]\\n\", \"2.3\", a2);\n  fprintf(s, \"NAME  %s\\n\", *(_QWORD *)a3);\n  v5 = *(_DWORD *)(a3 + 456);\n  if ( v5 & 0x200 )\n  {\n    fprintf(s, \"ACC   %s\\n\", *(_QWORD *)(a3 + 8));\n    v5 = *(_DWORD *)(a3 + 456);\n  }\n  if ( v5 & 2 )\n    fprintf(s, \"DESC  %s\\n\", *(_QWORD *)(a3 + 16));\n  fprintf(s, \"LENG  %d\\n\", *(unsigned int *)(a3 + 136));\n  v6 = \"Nucleic\";\n  if ( dword_464004 == 3 )\n    v6 = \"Amino\";\n  fprintf(s, \"ALPH  %s\\n\", v6);\n  v7 = \"yes\";\n  v8 = \"yes\";\n  if ( !(*(_DWORD *)(a3 + 456) & 4) )\n    v8 = \"no\";\n  fprintf(s, \"RF    %s\\n\", v8);\n  v9 = \"yes\";\n  if ( !(*(_DWORD *)(a3 + 456) & 8) )\n    v9 = \"no\";\n  fprintf(s, \"CS    %s\\n\", v9);\n  v10 = *(_DWORD *)(a3 + 456);\n  if ( !(v10 & 0x100) )\n    v7 = \"no\";\n  fprintf(s, \"MAP   %s\\n\", v7);\n  v11 = *(char **)(a3 + 48);\n  if ( v11 )\n  {\n    v12 = (char *)sub_4381A0(v11);\n    for ( i = v12; strtok(i, \"\\n\"); i = 0LL )\n      fprintf(v4, \"%s%s\\n\", \"COM   \");\n    free(v12);\n  }\n  fprintf(v4, \"NSEQ  %d\\n\", *(unsigned int *)(a3 + 56));\n  fprintf(v4, \"DATE  %s\\n\", *(_QWORD *)(a3 + 64));\n  fprintf(v4, \"CKSUM %d\\n\", *(unsigned int *)(a3 + 80));\n  v14 = *(_DWORD *)(a3 + 456);\n  if ( v14 & 0x400 )\n  {\n    fprintf(v4, \"GA    %.1f %.1f\\n\", *(float *)(a3 + 112), *(float *)(a3 + 116));\n    v14 = *(_DWORD *)(a3 + 456);\n    if ( !(v14 & 0x800) )\n    {\nLABEL_20:\n      if ( !(v14 & 0x1000) )\n        goto LABEL_22;\n      goto LABEL_21;\n    }\n  }\n  else if ( !(v14 & 0x800) )\n  {\n    goto LABEL_20;\n  }\n  fprintf(v4, \"TC    %.1f %.1f\\n\", *(float *)(a3 + 120), *(float *)(a3 + 124));\n  v19 = *(_DWORD *)(a3 + 456);\n  if ( v19 & 0x1000 )\nLABEL_21:\n    fprintf(v4, \"NC    %.1f %.1f\\n\", *(float *)(a3 + 128), *(float *)(a3 + 132));\nLABEL_22:\n  fwrite(\"XT     \", 7uLL, 1uLL, v4);\n  *(_QWORD *)&v17 = *(unsigned int *)(a3 + 172);\n  if ( *(float *)&v17 == 0.0 )\n  {\n    v18 = \"*\";\n  }\n  else\n  {\n    v20 = sub_415A90(\"XT     \", 7LL, v15, v16);\n    v18 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v20, v17, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v18);\n  *(_QWORD *)&v23 = *(unsigned int *)(a3 + 176);\n  if ( *(float *)&v23 == 0.0 )\n  {\n    v24 = \"*\";\n  }\n  else\n  {\n    v25 = sub_415A90(v4, \"%6s \", v21, v22);\n    v24 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v25, v23, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v24);\n  *(_QWORD *)&v28 = *(unsigned int *)(a3 + 180);\n  if ( *(float *)&v28 == 0.0 )\n  {\n    v29 = \"*\";\n  }\n  else\n  {\n    v30 = sub_415A90(v4, \"%6s \", v26, v27);\n    v29 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v30, v28, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v29);\n  *(_QWORD *)&v33 = *(unsigned int *)(a3 + 184);\n  if ( *(float *)&v33 == 0.0 )\n  {\n    v34 = \"*\";\n  }\n  else\n  {\n    v35 = sub_415A90(v4, \"%6s \", v31, v32);\n    v34 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v35, v33, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v34);\n  *(_QWORD *)&v38 = *(unsigned int *)(a3 + 188);\n  if ( *(float *)&v38 == 0.0 )\n  {\n    v39 = \"*\";\n  }\n  else\n  {\n    v40 = sub_415A90(v4, \"%6s \", v36, v37);\n    v39 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v40, v38, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v39);\n  *(_QWORD *)&v43 = *(unsigned int *)(a3 + 192);\n  if ( *(float *)&v43 == 0.0 )\n  {\n    v44 = \"*\";\n  }\n  else\n  {\n    v45 = sub_415A90(v4, \"%6s \", v41, v42);\n    v44 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v45, v43, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v44);\n  *(_QWORD *)&v48 = *(unsigned int *)(a3 + 196);\n  if ( *(float *)&v48 == 0.0 )\n  {\n    v49 = \"*\";\n  }\n  else\n  {\n    v50 = sub_415A90(v4, \"%6s \", v46, v47);\n    v49 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v50, v48, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v49);\n  *(_QWORD *)&v53 = *(unsigned int *)(a3 + 200);\n  if ( *(float *)&v53 == 0.0 )\n  {\n    v54 = \"*\";\n  }\n  else\n  {\n    v55 = sub_415A90(v4, \"%6s \", v51, v52);\n    v54 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v55, v53, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v54);\n  fputc(10, v4);\n  fwrite(\"NULT  \", 6uLL, 1uLL, v4);\n  *(_QWORD *)&v58 = *(unsigned int *)(a3 + 304);\n  if ( *(float *)&v58 == 0.0 )\n  {\n    v59 = \"*\";\n  }\n  else\n  {\n    v60 = sub_415A90(\"NULT  \", 6LL, v56, v57);\n    v59 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v60, v58, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s \", v59);\n  HIDWORD(v63) = 0;\n  *(float *)&v63 = 1.0 - *(float *)(a3 + 304);\n  if ( *(float *)&v63 == 0.0 )\n  {\n    v64 = \"*\";\n  }\n  else\n  {\n    v65 = sub_415A90(v4, \"%6s \", v61, v62);\n    v64 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v65, v63, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s\\n\", v64);\n  v66 = \"NULE  \";\n  v67 = (const char *)6;\n  fwrite(\"NULE  \", 6uLL, 1uLL, v4);\n  v70 = dword_464000;\n  if ( dword_464000 > 0 )\n  {\n    v71 = 0LL;\n    do\n    {\n      *(_QWORD *)&v72 = *(unsigned int *)(v3 + 4 * v71 + 224);\n      if ( *(float *)&v72 == 0.0 )\n      {\n        v73 = \"*\";\n      }\n      else\n      {\n        HIDWORD(v74) = 0;\n        *(float *)&v74 = 1.0 / (float)v70;\n        v75 = sub_415A90(v66, v67, v68, v69);\n        sprintf(byte_450061, \"%6d\", v75, v72, v74);\n        v73 = byte_450061;\n      }\n      v67 = \"%6s \";\n      v66 = (const char *)v4;\n      fprintf(v4, \"%6s \", v73);\n      ++v71;\n      v70 = dword_464000;\n    }\n    while ( v71 < dword_464000 );\n  }\n  fputc(10, v4);\n  if ( *(_BYTE *)(v3 + 456) < 0 )\n    fprintf(v4, \"EVD   %10f %10f\\n\", *(float *)(v3 + 448), *(float *)(v3 + 452));\n  fwrite(\"HMM      \", 9uLL, 1uLL, v4);\n  if ( dword_464000 > 0 )\n  {\n    v76 = 0LL;\n    do\n      fprintf(v4, \"  %c    \", (unsigned int)::s[v76++]);\n    while ( v76 < dword_464000 );\n  }\n  fputc(10, v4);\n  fprintf(\n    v4,\n    \"       %6s %6s %6s %6s %6s %6s %6s %6s %6s\\n\",\n    \"m->m\",\n    \"m->i\",\n    \"m->d\",\n    \"i->m\",\n    \"i->i\",\n    \"d->m\",\n    \"d->d\",\n    \"b->m\",\n    \"m->e\");\n  HIDWORD(v79) = 0;\n  *(float *)&v79 = 1.0 - *(float *)(v3 + 168);\n  if ( *(float *)&v79 == 0.0 )\n  {\n    v80 = \"*\";\n  }\n  else\n  {\n    v81 = sub_415A90(v4, \"       %6s %6s %6s %6s %6s %6s %6s %6s %6s\\n\", v77, v78);\n    v80 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v81, v79, COERCE_DOUBLE(1065353216LL));\n  }\n  v82 = \"*\";\n  fprintf(v4, \"       %6s %6s \", v80, \"*\");\n  *(_QWORD *)&v85 = *(unsigned int *)(v3 + 168);\n  if ( *(float *)&v85 != 0.0 )\n  {\n    v86 = sub_415A90(v4, \"       %6s %6s \", v83, v84);\n    v82 = byte_450061;\n    sprintf(byte_450061, \"%6d\", v86, v85, COERCE_DOUBLE(1065353216LL));\n  }\n  fprintf(v4, \"%6s\\n\", v82);\n  if ( *(_DWORD *)(v3 + 136) > 0 )\n  {\n    v87 = 1LL;\n    do\n    {\n      v102 = \" %5d \";\n      v103 = v4;\n      fprintf(v4, \" %5d \", (unsigned int)v87);\n      if ( dword_464000 > 0 )\n      {\n        v106 = 0LL;\n        do\n        {\n          *(_QWORD *)&v107 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 152) + 8 * v87) + 4 * v106);\n          if ( *(float *)&v107 == 0.0 )\n          {\n            v108 = \"*\";\n          }\n          else\n          {\n            *(_QWORD *)&v109 = *(unsigned int *)(v3 + 4 * v106 + 224);\n            v110 = sub_415A90(v103, v102, v104, v105);\n            sprintf(byte_450061, \"%6d\", v110, v107, v109);\n            v108 = byte_450061;\n          }\n          v102 = \"%6s \";\n          v103 = v4;\n          fprintf(v4, \"%6s \", v108);\n          ++v106;\n        }\n        while ( v106 < dword_464000 );\n      }\n      if ( *(_BYTE *)(v3 + 457) & 1 )\n        fprintf(v4, \"%5d\", *(unsigned int *)(*(_QWORD *)(v3 + 72) + 4 * v87));\n      fputc(10, v4);\n      v111 = 45LL;\n      if ( *(_BYTE *)(v3 + 456) & 4 )\n        v111 = (unsigned int)*(char *)(*(_QWORD *)(v3 + 24) + v87);\n      v112 = \" %5c \";\n      v113 = v4;\n      fprintf(v4, \" %5c \", v111);\n      if ( dword_464000 > 0 )\n      {\n        v116 = 0LL;\n        do\n        {\n          if ( v87 < *(signed int *)(v3 + 136)\n            && (*(_QWORD *)&v120 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 160) + 8 * v87) + 4 * v116),\n                *(float *)&v120 != 0.0) )\n          {\n            *(_QWORD *)&v117 = *(unsigned int *)(v3 + 4 * v116 + 224);\n            v118 = sub_415A90(v113, v112, v114, v115);\n            sprintf(byte_450061, \"%6d\", v118, v120, v117);\n            v119 = byte_450061;\n          }\n          else\n          {\n            v119 = \"*\";\n          }\n          v112 = \"%6s \";\n          v113 = v4;\n          fprintf(v4, \"%6s \", v119);\n          ++v116;\n        }\n        while ( v116 < dword_464000 );\n      }\n      fputc(10, v4);\n      v121 = 45LL;\n      if ( *(_BYTE *)(v3 + 456) & 8 )\n        v121 = (unsigned int)*(char *)(*(_QWORD *)(v3 + 32) + v87);\n      fprintf(v4, \" %5c \", v121);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v124 = **(unsigned int **)(*(_QWORD *)(v3 + 144) + 8 * v87), *(float *)&v124 != 0.0) )\n      {\n        v88 = sub_415A90(v4, \" %5c \", v122, v123);\n        sprintf(byte_450061, \"%6d\", v88, v124, COERCE_DOUBLE(1065353216LL));\n        v89 = byte_450061;\n      }\n      else\n      {\n        v89 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v89);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v127 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 4LL),\n            *(float *)&v127 != 0.0) )\n      {\n        v90 = sub_415A90(v4, \"%6s \", v125, v126);\n        sprintf(byte_450061, \"%6d\", v90, v127, COERCE_DOUBLE(1065353216LL));\n        v91 = byte_450061;\n      }\n      else\n      {\n        v91 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v91);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v130 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 8LL),\n            *(float *)&v130 != 0.0) )\n      {\n        v92 = sub_415A90(v4, \"%6s \", v128, v129);\n        sprintf(byte_450061, \"%6d\", v92, v130, COERCE_DOUBLE(1065353216LL));\n        v93 = byte_450061;\n      }\n      else\n      {\n        v93 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v93);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v133 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 12LL),\n            *(float *)&v133 != 0.0) )\n      {\n        v94 = sub_415A90(v4, \"%6s \", v131, v132);\n        sprintf(byte_450061, \"%6d\", v94, v133, COERCE_DOUBLE(1065353216LL));\n        v95 = byte_450061;\n      }\n      else\n      {\n        v95 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v95);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v136 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 16LL),\n            *(float *)&v136 != 0.0) )\n      {\n        v96 = sub_415A90(v4, \"%6s \", v134, v135);\n        sprintf(byte_450061, \"%6d\", v96, v136, COERCE_DOUBLE(1065353216LL));\n        v97 = byte_450061;\n      }\n      else\n      {\n        v97 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v97);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v139 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 20LL),\n            *(float *)&v139 != 0.0) )\n      {\n        v98 = sub_415A90(v4, \"%6s \", v137, v138);\n        sprintf(byte_450061, \"%6d\", v98, v139, COERCE_DOUBLE(1065353216LL));\n        v99 = byte_450061;\n      }\n      else\n      {\n        v99 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v99);\n      if ( v87 < *(signed int *)(v3 + 136)\n        && (*(_QWORD *)&v142 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v87) + 24LL),\n            *(float *)&v142 != 0.0) )\n      {\n        v100 = sub_415A90(v4, \"%6s \", v140, v141);\n        sprintf(byte_450061, \"%6d\", v100, v142, COERCE_DOUBLE(1065353216LL));\n        v101 = byte_450061;\n      }\n      else\n      {\n        v101 = \"*\";\n      }\n      fprintf(v4, \"%6s \", v101);\n      *(_QWORD *)&v145 = *(unsigned int *)(*(_QWORD *)(v3 + 208) + 4 * v87);\n      if ( *(float *)&v145 == 0.0 )\n      {\n        v146 = \"*\";\n      }\n      else\n      {\n        v147 = sub_415A90(v4, \"%6s \", v143, v144);\n        sprintf(byte_450061, \"%6d\", v147, v145, COERCE_DOUBLE(1065353216LL));\n        v146 = byte_450061;\n      }\n      fprintf(v4, \"%6s \", v146);\n      *(_QWORD *)&v150 = *(unsigned int *)(*(_QWORD *)(v3 + 216) + 4 * v87);\n      if ( *(float *)&v150 == 0.0 )\n      {\n        v151 = \"*\";\n      }\n      else\n      {\n        v152 = sub_415A90(v4, \"%6s \", v148, v149);\n        sprintf(byte_450061, \"%6d\", v152, v150, COERCE_DOUBLE(1065353216LL));\n        v151 = byte_450061;\n      }\n      fprintf(v4, \"%6s \", v151);\n      fputc(10, v4);\n      v153 = *(signed int *)(v3 + 136);\n      v155 = __OFSUB__(v87, v153);\n      v154 = v87++ - v153 < 0;\n    }\n    while ( v154 ^ v155 );\n  }\n  return fwrite(\"//\\n\", 3uLL, 1uLL, v4);\n}\n", 
            "funcStartAddr": "0x412450L", 
            "funcEndAddr": "0x41323aL", 
            "funcName": "sub_412450"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413240(FILE *s, const char **a2)\n{\n  const char **v2; // r13\n  FILE *v3; // r14\n  int *v4; // r15\n  const char *v5; // r12\n  size_t v6; // rdx\n  size_t v7; // rsi\n  int *v8; // rdi\n  int v9; // eax\n  int *v10; // r12\n  size_t v11; // rdx\n  size_t v12; // rsi\n  int *v13; // rdi\n  int *v14; // r15\n  size_t v15; // rdx\n  size_t v16; // rsi\n  int *v17; // rdi\n  int v18; // eax\n  int *v19; // r15\n  size_t v20; // rdx\n  size_t v21; // rsi\n  int *v22; // rdi\n  int v23; // eax\n  int *v24; // r15\n  size_t v25; // rdx\n  size_t v26; // rsi\n  int *v27; // rdi\n  int v28; // eax\n  __int64 result; // rax\n  __int64 v30; // rbx\n  signed __int64 v31; // rbx\n  signed __int64 v32; // rbx\n  int v33; // eax\n  int ptr; // [rsp+Ch] [rbp-2Ch]\n\n  v2 = a2;\n  v3 = s;\n  fwrite(&dword_44F210, 4uLL, 1uLL, s);\n  v4 = (int *)(a2 + 57);\n  fwrite(a2 + 57, 4uLL, 1uLL, s);\n  v5 = *a2;\n  if ( *a2 )\n  {\n    ptr = strlen(*a2) + 1;\n    fwrite(&ptr, 4uLL, 1uLL, s);\n    v6 = ptr;\n    v7 = 1LL;\n    v8 = (int *)v5;\n  }\n  else\n  {\n    ptr = 0;\n    v8 = &ptr;\n    v7 = 4LL;\n    v6 = 1LL;\n  }\n  fwrite(v8, v7, v6, v3);\n  v9 = *v4;\n  if ( v9 & 0x200 )\n  {\n    v10 = (int *)v2[1];\n    if ( v10 )\n    {\n      ptr = strlen(v2[1]) + 1;\n      fwrite(&ptr, 4uLL, 1uLL, v3);\n      v11 = ptr;\n      v12 = 1LL;\n      v13 = v10;\n    }\n    else\n    {\n      ptr = 0;\n      v13 = &ptr;\n      v12 = 4LL;\n      v11 = 1LL;\n    }\n    fwrite(v13, v12, v11, v3);\n    v9 = *v4;\n  }\n  if ( v9 & 2 )\n  {\n    v14 = (int *)v2[2];\n    if ( v14 )\n    {\n      ptr = strlen(v2[2]) + 1;\n      fwrite(&ptr, 4uLL, 1uLL, v3);\n      v15 = ptr;\n      v16 = 1LL;\n      v17 = v14;\n    }\n    else\n    {\n      ptr = 0;\n      v17 = &ptr;\n      v16 = 4LL;\n      v15 = 1LL;\n    }\n    fwrite(v17, v16, v15, v3);\n  }\n  fwrite(v2 + 17, 4uLL, 1uLL, v3);\n  fwrite(&dword_464004, 4uLL, 1uLL, v3);\n  v18 = *((_DWORD *)v2 + 114);\n  if ( v18 & 4 )\n  {\n    fwrite(v2[3], 1uLL, *((signed int *)v2 + 34) + 1LL, v3);\n    v18 = *((_DWORD *)v2 + 114);\n    if ( !(v18 & 8) )\n    {\nLABEL_16:\n      if ( !(v18 & 0x100) )\n        goto LABEL_18;\n      goto LABEL_17;\n    }\n  }\n  else if ( !(v18 & 8) )\n  {\n    goto LABEL_16;\n  }\n  fwrite(v2[4], 1uLL, *((signed int *)v2 + 34) + 1LL, v3);\n  v23 = *((_DWORD *)v2 + 114);\n  if ( v23 & 0x100 )\nLABEL_17:\n    fwrite(v2[9], 4uLL, *((signed int *)v2 + 34) + 1LL, v3);\nLABEL_18:\n  v19 = (int *)v2[6];\n  if ( v19 )\n  {\n    ptr = strlen(v2[6]) + 1;\n    fwrite(&ptr, 4uLL, 1uLL, v3);\n    v20 = ptr;\n    v21 = 1LL;\n    v22 = v19;\n  }\n  else\n  {\n    ptr = 0;\n    v22 = &ptr;\n    v21 = 4LL;\n    v20 = 1LL;\n  }\n  fwrite(v22, v21, v20, v3);\n  fwrite(v2 + 7, 4uLL, 1uLL, v3);\n  v24 = (int *)v2[8];\n  if ( v24 )\n  {\n    ptr = strlen(v2[8]) + 1;\n    fwrite(&ptr, 4uLL, 1uLL, v3);\n    v25 = ptr;\n    v26 = 1LL;\n    v27 = v24;\n  }\n  else\n  {\n    ptr = 0;\n    v27 = &ptr;\n    v26 = 4LL;\n    v25 = 1LL;\n  }\n  fwrite(v27, v26, v25, v3);\n  fwrite(v2 + 10, 4uLL, 1uLL, v3);\n  v28 = *((_DWORD *)v2 + 114);\n  if ( v28 & 0x400 )\n  {\n    fwrite(v2 + 14, 4uLL, 1uLL, v3);\n    fwrite((char *)v2 + 116, 4uLL, 1uLL, v3);\n    v28 = *((_DWORD *)v2 + 114);\n    if ( !(v28 & 0x800) )\n    {\nLABEL_29:\n      if ( !(v28 & 0x1000) )\n        goto LABEL_31;\n      goto LABEL_30;\n    }\n  }\n  else if ( !(v28 & 0x800) )\n  {\n    goto LABEL_29;\n  }\n  fwrite(v2 + 15, 4uLL, 1uLL, v3);\n  fwrite((char *)v2 + 124, 4uLL, 1uLL, v3);\n  v33 = *((_DWORD *)v2 + 114);\n  if ( v33 & 0x1000 )\n  {\nLABEL_30:\n    fwrite(v2 + 16, 4uLL, 1uLL, v3);\n    fwrite((char *)v2 + 132, 4uLL, 1uLL, v3);\n  }\nLABEL_31:\n  fwrite((char *)v2 + 172, 4uLL, 2uLL, v3);\n  fwrite((char *)v2 + 180, 4uLL, 2uLL, v3);\n  fwrite((char *)v2 + 188, 4uLL, 2uLL, v3);\n  fwrite((char *)v2 + 196, 4uLL, 2uLL, v3);\n  fwrite(v2 + 38, 4uLL, 1uLL, v3);\n  fwrite(v2 + 28, 4uLL, dword_464000, v3);\n  if ( *((_BYTE *)v2 + 456) < 0 )\n  {\n    fwrite(v2 + 56, 4uLL, 1uLL, v3);\n    fwrite((char *)v2 + 452, 4uLL, 1uLL, v3);\n  }\n  fwrite(v2 + 21, 4uLL, 1uLL, v3);\n  fwrite(v2[26], 4uLL, *((signed int *)v2 + 34) + 1LL, v3);\n  result = fwrite(v2[27], 4uLL, *((signed int *)v2 + 34) + 1LL, v3);\n  if ( *((_DWORD *)v2 + 34) > 0 )\n  {\n    v30 = 0LL;\n    do\n    {\n      fwrite(*(const void **)&v2[19][8 * v30 + 8], 4uLL, dword_464000, v3);\n      result = *((signed int *)v2 + 34);\n      ++v30;\n    }\n    while ( v30 < result );\n    if ( (signed int)result >= 2 )\n    {\n      v31 = 1LL;\n      do\n      {\n        fwrite(*(const void **)&v2[20][8 * v31++], 4uLL, dword_464000, v3);\n        result = *((signed int *)v2 + 34);\n      }\n      while ( v31 < result );\n      if ( (signed int)result >= 2 )\n      {\n        v32 = 1LL;\n        do\n        {\n          fwrite(*(const void **)&v2[18][8 * v32++], 4uLL, 7uLL, v3);\n          result = *((signed int *)v2 + 34);\n        }\n        while ( v32 < result );\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413240L", 
            "funcEndAddr": "0x413828L", 
            "funcName": "sub_413240"
        }, 
        {
            "decompiledFuncCode": "signed int *__fastcall sub_413830(FILE *stream, int a2, int a3)\n{\n  int v3; // ebp\n  int v4; // er15\n  FILE *v5; // r12\n  char v6; // al\n  char v7; // al\n  char v8; // al\n  char v9; // al\n  __int64 v10; // rsi\n  signed int v11; // ebx\n  char v12; // bp\n  __int64 v13; // rax\n  signed int *v14; // r13\n  signed int *v15; // r14\n  char v16; // al\n  char v17; // al\n  size_t v18; // rbx\n  void *v19; // rax\n  __int64 v20; // rsi\n  char v21; // al\n  char v22; // dl\n  char v23; // al\n  void *v24; // r13\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  __int64 v27; // rax\n  signed __int64 v28; // r13\n  __int64 v29; // rax\n  char v30; // cl\n  char v31; // bl\n  char v32; // cl\n  __int64 v33; // rax\n  char v34; // cl\n  char v35; // bl\n  char v36; // cl\n  __int64 v37; // rax\n  char v38; // cl\n  char v39; // bl\n  char v40; // cl\n  __int64 v41; // r8\n  __int64 v42; // rax\n  signed __int64 v43; // rcx\n  char v44; // dl\n  char v45; // si\n  char v46; // dl\n  __int64 v47; // rax\n  char v48; // cl\n  char v49; // bl\n  char v50; // cl\n  __int64 v51; // rax\n  char v52; // cl\n  char v53; // bl\n  char v54; // cl\n  __int64 v55; // rax\n  char v56; // cl\n  char v57; // bl\n  char v58; // cl\n  __int64 v59; // rax\n  char v60; // cl\n  char v61; // bl\n  char v62; // cl\n  __int64 v63; // rax\n  char v64; // cl\n  char v65; // bl\n  char v66; // cl\n  __int64 v67; // rax\n  char v68; // cl\n  char v69; // bl\n  char v70; // cl\n  __int64 v71; // r8\n  __int64 v72; // rax\n  signed __int64 v73; // r13\n  char v74; // cl\n  char v75; // bl\n  char v76; // cl\n  __int64 v77; // rax\n  bool v78; // sf\n  unsigned __int8 v79; // of\n  int v80; // er9\n  __int64 v81; // rbp\n  __int64 v82; // rax\n  __int64 v83; // rsi\n  __int64 v84; // rdi\n  char v85; // bl\n  char v86; // dl\n  char v87; // cl\n  __int64 v88; // rcx\n  char v89; // dl\n  char v90; // dl\n  int v91; // er9\n  __int64 v92; // rbp\n  __int64 v93; // rax\n  __int64 v94; // rsi\n  __int64 v95; // rdi\n  char v96; // bl\n  char v97; // dl\n  char v98; // cl\n  __int64 v99; // rcx\n  char v100; // dl\n  char v101; // dl\n  __int64 v103; // rdi\n  char v104; // bl\n  char v105; // dl\n  char v106; // cl\n  char v107; // cl\n  char v108; // cl\n  char v109; // cl\n  char v110; // bl\n  char v111; // cl\n  char v112[4]; // [rsp+0h] [rbp-68h]\n  int v113; // [rsp+4h] [rbp-64h]\n  unsigned int ptr; // [rsp+8h] [rbp-60h]\n  int v115; // [rsp+Ch] [rbp-5Ch]\n  __int64 v116; // [rsp+10h] [rbp-58h]\n  __int64 v117; // [rsp+18h] [rbp-50h]\n  char v118; // [rsp+20h] [rbp-48h]\n\n  v3 = a3;\n  v4 = a2;\n  v5 = stream;\n  if ( fread(&ptr, 4uLL, 1uLL, stream) && fread(v112, 4uLL, 1uLL, stream) )\n  {\n    if ( v3 )\n    {\n      v6 = HIBYTE(ptr);\n      HIBYTE(ptr) = ptr;\n      LOBYTE(ptr) = v6;\n      v7 = BYTE2(ptr);\n      BYTE2(ptr) = BYTE1(ptr);\n      BYTE1(ptr) = v7;\n      v8 = v112[3];\n      v112[3] = v112[0];\n      v112[0] = v8;\n      v9 = v112[2];\n      v112[2] = v112[1];\n      v112[1] = v9;\n    }\n    v10 = *(unsigned int *)v112;\n    if ( *(_DWORD *)v112 == 20 )\n    {\n      v115 = 3;\n      v11 = 3;\n    }\n    else\n    {\n      if ( *(_DWORD *)v112 != 4 )\n        sub_4325B0(\"A nonbiological alphabet size of %d; so I can't convert plan9 to plan7\", v112[0]);\n      v115 = 2;\n      v11 = 2;\n    }\n    if ( dword_464004 )\n    {\n      if ( v11 != dword_464004 )\n      {\n        v12 = (unsigned __int64)sub_408760(dword_464004);\n        sub_408760(v11);\n        sub_4325B0(\"Alphabet mismatch error.\\nI thought we were working with %s, but tried to read a %s HMM.\\n\", v12);\n      }\n    }\n    else\n    {\n      sub_401910(v11, v112[0]);\n    }\n    v13 = sub_41BDB0(ptr, v10);\n    v14 = (signed int *)v13;\n    if ( !v13 )\n      sub_4325B0(\"malloc failed for reading hmm in\\n\", v10);\n    v15 = (signed int *)v13;\n    if ( v4 == 7 )\n    {\n      if ( !fread(&v113, 4uLL, 1uLL, stream) )\n        return 0LL;\n      if ( v3 )\n      {\n        v16 = HIBYTE(v113);\n        HIBYTE(v113) = v113;\n        LOBYTE(v113) = v16;\n        v17 = BYTE2(v113);\n        BYTE2(v113) = BYTE1(v113);\n        BYTE1(v113) = v17;\n      }\n      v18 = v113;\n      v19 = (void *)sub_438340(\"hmmio.c\", 1475LL, *((_QWORD *)v14 + 14), v113 + 1LL);\n      *((_QWORD *)v14 + 14) = v19;\n      if ( !fread(v19, 1uLL, v18, stream) )\n        return 0LL;\n      *(_BYTE *)(*((_QWORD *)v14 + 14) + v18) = 0;\n    }\n    if ( fread(&v115, 4uLL, 1uLL, stream) )\n    {\n      v20 = 1LL;\n      if ( fread(&v118, 1uLL, dword_464000, stream) )\n      {\n        if ( v4 == 1 )\n        {\n          v20 = 4LL * dword_464000;\n          fseek(stream, v20, 1);\n        }\n        else if ( (v4 | 2) == 7 )\n        {\n          v20 = 4LL;\n          if ( !fread(v14 + 36, 4uLL, 1uLL, stream) )\n            return 0LL;\n          if ( v3 )\n          {\n            v21 = *((_BYTE *)v14 + 147);\n            v22 = *((_BYTE *)v14 + 145);\n            *((_BYTE *)v14 + 147) = *((_BYTE *)v14 + 144);\n            *((_BYTE *)v14 + 144) = v21;\n            v23 = *((_BYTE *)v14 + 146);\n            *((_BYTE *)v14 + 146) = v22;\n            *((_BYTE *)v14 + 145) = v23;\n          }\n          if ( v14[36] & 1 )\n          {\n            v20 = 1LL;\n            if ( !fread(*((void **)v14 + 15), 1uLL, *v14 + 1LL, stream) )\n              return 0LL;\n          }\n          *(_BYTE *)(*((_QWORD *)v14 + 15) + *v14 + 1LL) = 0;\n          if ( v14[36] & 2 )\n          {\n            v20 = 1LL;\n            if ( !fread(*((void **)v14 + 16), 1uLL, *v14 + 1LL, stream) )\n              return 0LL;\n          }\n          *(_BYTE *)(*((_QWORD *)v14 + 16) + *v14 + 1LL) = 0;\n        }\n        v24 = v14 + 8;\n        if ( v4 != 7 )\n        {\n          sub_41C6A0(v24, v20);\n          goto LABEL_44;\n        }\n        if ( fread(v24, 4uLL, dword_464000, stream) )\n        {\n          if ( v3 && dword_464000 > 0 )\n          {\n            v25 = dword_464000 & 1;\n            if ( dword_464000 == 1 )\n            {\n              v26 = 0LL;\n              if ( dword_464000 & 1 )\n                goto LABEL_90;\n            }\n            else\n            {\n              v103 = dword_464000 - v25;\n              v26 = 0LL;\n              do\n              {\n                v104 = HIBYTE(v15[v26 + 8]);\n                v105 = BYTE1(v15[v26 + 8]);\n                HIBYTE(v15[v26 + 8]) = v15[v26 + 8];\n                LOBYTE(v15[v26 + 8]) = v104;\n                v106 = BYTE2(v15[v26 + 8]);\n                BYTE2(v15[v26 + 8]) = v105;\n                BYTE1(v15[v26 + 8]) = v106;\n                v107 = HIBYTE(v15[v26 + 9]);\n                HIBYTE(v15[v26 + 9]) = v15[v26 + 9];\n                LOBYTE(v15[v26 + 9]) = v107;\n                v108 = BYTE2(v15[v26 + 9]);\n                BYTE2(v15[v26 + 9]) = BYTE1(v15[v26 + 9]);\n                BYTE1(v15[v26 + 9]) = v108;\n                v26 += 2LL;\n              }\n              while ( v103 != v26 );\n              if ( v25 )\n              {\nLABEL_90:\n                v109 = HIBYTE(v15[v26 + 8]);\n                v110 = BYTE1(v15[v26 + 8]);\n                HIBYTE(v15[v26 + 8]) = v15[v26 + 8];\n                LOBYTE(v15[v26 + 8]) = v109;\n                v111 = BYTE2(v15[v26 + 8]);\n                BYTE2(v15[v26 + 8]) = v110;\n                BYTE1(v15[v26 + 8]) = v111;\n                if ( *v15 < 0 )\n                  goto LABEL_91;\nLABEL_45:\n                v116 = 0LL;\n                v27 = 0LL;\n                while ( 1 )\n                {\n                  v117 = v27;\n                  v28 = 92 * v27;\n                  if ( !fread((void *)(92 * v27 + *((_QWORD *)v15 + 2)), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 2) + v28 + 8), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 2) + v28 + 4), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 2) + v28 + 12), 4uLL, dword_464000, v5) )\n                  {\n                    return 0LL;\n                  }\n                  if ( v3 )\n                  {\n                    v29 = *((_QWORD *)v15 + 2);\n                    v30 = *(_BYTE *)(v29 + v28 + 3);\n                    v31 = *(_BYTE *)(v29 + v28 + 1);\n                    *(_BYTE *)(v29 + v28 + 3) = *(_BYTE *)(v29 + v28);\n                    *(_BYTE *)(v29 + v28) = v30;\n                    v32 = *(_BYTE *)(v29 + v28 + 2);\n                    *(_BYTE *)(v29 + v28 + 2) = v31;\n                    *(_BYTE *)(v29 + v28 + 1) = v32;\n                    v33 = *((_QWORD *)v15 + 2);\n                    v34 = *(_BYTE *)(v33 + v28 + 11);\n                    v35 = *(_BYTE *)(v33 + v28 + 9);\n                    *(_BYTE *)(v33 + v28 + 11) = *(_BYTE *)(v33 + v28 + 8);\n                    *(_BYTE *)(v33 + v28 + 8) = v34;\n                    v36 = *(_BYTE *)(v33 + v28 + 10);\n                    *(_BYTE *)(v33 + v28 + 10) = v35;\n                    *(_BYTE *)(v33 + v28 + 9) = v36;\n                    v37 = *((_QWORD *)v15 + 2);\n                    v38 = *(_BYTE *)(v37 + v28 + 7);\n                    v39 = *(_BYTE *)(v37 + v28 + 5);\n                    *(_BYTE *)(v37 + v28 + 7) = *(_BYTE *)(v37 + v28 + 4);\n                    *(_BYTE *)(v37 + v28 + 4) = v38;\n                    v40 = *(_BYTE *)(v37 + v28 + 6);\n                    *(_BYTE *)(v37 + v28 + 6) = v39;\n                    *(_BYTE *)(v37 + v28 + 5) = v40;\n                    if ( dword_464000 > 0LL )\n                    {\n                      v41 = dword_464000 & 1;\n                      if ( dword_464000 == 1 )\n                      {\n                        v42 = 0LL;\n                        if ( !(dword_464000 & 1) )\n                          goto LABEL_55;\nLABEL_54:\n                        v43 = v28 + *((_QWORD *)v15 + 2);\n                        v44 = *(_BYTE *)(v43 + 4 * v42 + 15);\n                        v45 = *(_BYTE *)(v43 + 4 * v42 + 13);\n                        *(_BYTE *)(v43 + 4 * v42 + 15) = *(_BYTE *)(v43 + 4 * v42 + 12);\n                        *(_BYTE *)(v43 + 4 * v42 + 12) = v44;\n                        v46 = *(_BYTE *)(v43 + 4 * v42 + 14);\n                        *(_BYTE *)(v43 + 4 * v42 + 14) = v45;\n                        *(_BYTE *)(v43 + 4 * v42 + 13) = v46;\n                        goto LABEL_55;\n                      }\n                      v80 = v3;\n                      v81 = v41 - dword_464000;\n                      v82 = 0LL;\n                      v83 = v116;\n                      do\n                      {\n                        v84 = *((_QWORD *)v15 + 2);\n                        v85 = *(_BYTE *)(v84 + v83 + 15);\n                        v86 = *(_BYTE *)(v84 + v83 + 13);\n                        *(_BYTE *)(v84 + v83 + 15) = *(_BYTE *)(v84 + v83 + 12);\n                        *(_BYTE *)(v84 + v83 + 12) = v85;\n                        v87 = *(_BYTE *)(v84 + v83 + 14);\n                        *(_BYTE *)(v84 + v83 + 14) = v86;\n                        *(_BYTE *)(v84 + v83 + 13) = v87;\n                        v88 = *((_QWORD *)v15 + 2);\n                        v89 = *(_BYTE *)(v88 + v83 + 19);\n                        LOBYTE(v84) = *(_BYTE *)(v88 + v83 + 17);\n                        *(_BYTE *)(v88 + v83 + 19) = *(_BYTE *)(v88 + v83 + 16);\n                        *(_BYTE *)(v88 + v83 + 16) = v89;\n                        v90 = *(_BYTE *)(v88 + v83 + 18);\n                        *(_BYTE *)(v88 + v83 + 18) = v84;\n                        *(_BYTE *)(v88 + v83 + 17) = v90;\n                        v83 += 8LL;\n                        v82 -= 2LL;\n                      }\n                      while ( v81 != v82 );\n                      v42 = -v82;\n                      v3 = v80;\n                      if ( v41 )\n                        goto LABEL_54;\n                    }\n                  }\nLABEL_55:\n                  if ( v4 == 1 )\n                    fseek(v5, 4LL * dword_464000 + 12, 1);\n                  if ( !fread((void *)(v28 + *((_QWORD *)v15 + 3)), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 3) + v28 + 8), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 3) + v28 + 4), 4uLL, 1uLL, v5) )\n                  {\n                    return 0LL;\n                  }\n                  if ( v3 )\n                  {\n                    v47 = *((_QWORD *)v15 + 3);\n                    v48 = *(_BYTE *)(v47 + v28 + 3);\n                    v49 = *(_BYTE *)(v47 + v28 + 1);\n                    *(_BYTE *)(v47 + v28 + 3) = *(_BYTE *)(v47 + v28);\n                    *(_BYTE *)(v47 + v28) = v48;\n                    v50 = *(_BYTE *)(v47 + v28 + 2);\n                    *(_BYTE *)(v47 + v28 + 2) = v49;\n                    *(_BYTE *)(v47 + v28 + 1) = v50;\n                    v51 = *((_QWORD *)v15 + 3);\n                    v52 = *(_BYTE *)(v51 + v28 + 11);\n                    v53 = *(_BYTE *)(v51 + v28 + 9);\n                    *(_BYTE *)(v51 + v28 + 11) = *(_BYTE *)(v51 + v28 + 8);\n                    *(_BYTE *)(v51 + v28 + 8) = v52;\n                    v54 = *(_BYTE *)(v51 + v28 + 10);\n                    *(_BYTE *)(v51 + v28 + 10) = v53;\n                    *(_BYTE *)(v51 + v28 + 9) = v54;\n                    v55 = *((_QWORD *)v15 + 3);\n                    v56 = *(_BYTE *)(v55 + v28 + 7);\n                    v57 = *(_BYTE *)(v55 + v28 + 5);\n                    *(_BYTE *)(v55 + v28 + 7) = *(_BYTE *)(v55 + v28 + 4);\n                    *(_BYTE *)(v55 + v28 + 4) = v56;\n                    v58 = *(_BYTE *)(v55 + v28 + 6);\n                    *(_BYTE *)(v55 + v28 + 6) = v57;\n                    *(_BYTE *)(v55 + v28 + 5) = v58;\n                  }\n                  if ( v4 == 1 )\n                    fseek(v5, 12LL, 1);\n                  if ( !fread((void *)(v28 + *((_QWORD *)v15 + 1)), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 1) + v28 + 8), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 1) + v28 + 4), 4uLL, 1uLL, v5)\n                    || !fread((void *)(*((_QWORD *)v15 + 1) + v28 + 12), 4uLL, dword_464000, v5) )\n                  {\n                    return 0LL;\n                  }\n                  if ( v3 )\n                  {\n                    v59 = *((_QWORD *)v15 + 1);\n                    v60 = *(_BYTE *)(v59 + v28 + 3);\n                    v61 = *(_BYTE *)(v59 + v28 + 1);\n                    *(_BYTE *)(v59 + v28 + 3) = *(_BYTE *)(v59 + v28);\n                    *(_BYTE *)(v59 + v28) = v60;\n                    v62 = *(_BYTE *)(v59 + v28 + 2);\n                    *(_BYTE *)(v59 + v28 + 2) = v61;\n                    *(_BYTE *)(v59 + v28 + 1) = v62;\n                    v63 = *((_QWORD *)v15 + 1);\n                    v64 = *(_BYTE *)(v63 + v28 + 11);\n                    v65 = *(_BYTE *)(v63 + v28 + 9);\n                    *(_BYTE *)(v63 + v28 + 11) = *(_BYTE *)(v63 + v28 + 8);\n                    *(_BYTE *)(v63 + v28 + 8) = v64;\n                    v66 = *(_BYTE *)(v63 + v28 + 10);\n                    *(_BYTE *)(v63 + v28 + 10) = v65;\n                    *(_BYTE *)(v63 + v28 + 9) = v66;\n                    v67 = *((_QWORD *)v15 + 1);\n                    v68 = *(_BYTE *)(v67 + v28 + 7);\n                    v69 = *(_BYTE *)(v67 + v28 + 5);\n                    *(_BYTE *)(v67 + v28 + 7) = *(_BYTE *)(v67 + v28 + 4);\n                    *(_BYTE *)(v67 + v28 + 4) = v68;\n                    v70 = *(_BYTE *)(v67 + v28 + 6);\n                    *(_BYTE *)(v67 + v28 + 6) = v69;\n                    *(_BYTE *)(v67 + v28 + 5) = v70;\n                    if ( dword_464000 > 0LL )\n                    {\n                      v71 = dword_464000 & 1;\n                      if ( dword_464000 != 1 )\n                      {\n                        v91 = v3;\n                        v92 = v71 - dword_464000;\n                        v93 = 0LL;\n                        v94 = v116;\n                        do\n                        {\n                          v95 = *((_QWORD *)v15 + 1);\n                          v96 = *(_BYTE *)(v95 + v94 + 15);\n                          v97 = *(_BYTE *)(v95 + v94 + 13);\n                          *(_BYTE *)(v95 + v94 + 15) = *(_BYTE *)(v95 + v94 + 12);\n                          *(_BYTE *)(v95 + v94 + 12) = v96;\n                          v98 = *(_BYTE *)(v95 + v94 + 14);\n                          *(_BYTE *)(v95 + v94 + 14) = v97;\n                          *(_BYTE *)(v95 + v94 + 13) = v98;\n                          v99 = *((_QWORD *)v15 + 1);\n                          v100 = *(_BYTE *)(v99 + v94 + 19);\n                          LOBYTE(v95) = *(_BYTE *)(v99 + v94 + 17);\n                          *(_BYTE *)(v99 + v94 + 19) = *(_BYTE *)(v99 + v94 + 16);\n                          *(_BYTE *)(v99 + v94 + 16) = v100;\n                          v101 = *(_BYTE *)(v99 + v94 + 18);\n                          *(_BYTE *)(v99 + v94 + 18) = v95;\n                          *(_BYTE *)(v99 + v94 + 17) = v101;\n                          v94 += 8LL;\n                          v93 -= 2LL;\n                        }\n                        while ( v92 != v93 );\n                        v72 = -v93;\n                        v3 = v91;\n                        if ( !v71 )\n                          goto LABEL_73;\nLABEL_72:\n                        v73 = *((_QWORD *)v15 + 1) + v28;\n                        v74 = *(_BYTE *)(v73 + 4 * v72 + 15);\n                        v75 = *(_BYTE *)(v73 + 4 * v72 + 13);\n                        *(_BYTE *)(v73 + 4 * v72 + 15) = *(_BYTE *)(v73 + 4 * v72 + 12);\n                        *(_BYTE *)(v73 + 4 * v72 + 12) = v74;\n                        v76 = *(_BYTE *)(v73 + 4 * v72 + 14);\n                        *(_BYTE *)(v73 + 4 * v72 + 14) = v75;\n                        *(_BYTE *)(v73 + 4 * v72 + 13) = v76;\n                        goto LABEL_73;\n                      }\n                      v72 = 0LL;\n                      if ( dword_464000 & 1 )\n                        goto LABEL_72;\n                    }\n                  }\nLABEL_73:\n                  if ( v4 == 1 )\n                    fseek(v5, 4LL * dword_464000 + 12, 1);\n                  v77 = *v15;\n                  v116 += 92LL;\n                  v79 = __OFSUB__(v117, v77);\n                  v78 = v117 - v77 < 0;\n                  v27 = v117 + 1;\n                  if ( !(v78 ^ v79) )\n                    goto LABEL_91;\n                }\n              }\n            }\n          }\nLABEL_44:\n          if ( *v15 < 0 )\n          {\nLABEL_91:\n            sub_41C600(v15);\n            return v15;\n          }\n          goto LABEL_45;\n        }\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x413830L", 
            "funcEndAddr": "0x4141c9L", 
            "funcName": "sub_413830"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4141D0(unsigned int a1, __int64 a2)\n{\n  char *v2; // r15\n  int v3; // ebp\n  char *v4; // rbx\n  float v5; // xmm0_4\n  float v6; // xmm0_4\n  int v7; // eax\n  _DWORD *v8; // r13\n  FILE *v9; // r12\n  char *v10; // rbx\n  size_t v11; // rax\n  char *v12; // rbp\n  size_t v13; // rax\n  char *v14; // rcx\n  const char *v15; // rsi\n  void *v16; // r15\n  void *v17; // rbx\n  __int64 v18; // r14\n  __int64 v19; // rcx\n  _DWORD *v20; // r15\n  signed __int64 v21; // rdi\n  __int64 *v22; // r13\n  double v23; // xmm0_8\n  int v24; // er12\n  signed int v25; // xmm1_4\n  unsigned int v26; // er14\n  void *v27; // rbx\n  _BYTE *v28; // rbp\n  float v29; // ST14_4\n  float *v30; // rbp\n  __int64 v31; // rcx\n  void *v32; // rdx\n  _DWORD *v33; // r15\n  FILE *v34; // r13\n  int v35; // er12\n  signed __int64 v36; // rbx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  signed __int64 v39; // rcx\n  int v40; // eax\n  _DWORD *v41; // r14\n  char *v42; // rbx\n  void *v43; // rsi\n  FILE *v44; // r15\n  __int64 v45; // rbp\n  __int64 v46; // rbx\n  _DWORD *v47; // rdi\n  __int64 v48; // rax\n  void *v49; // rdi\n  float v51; // [rsp+4h] [rbp-144h]\n  void *v52; // [rsp+8h] [rbp-140h]\n  int v53; // [rsp+14h] [rbp-134h]\n  double v54; // [rsp+18h] [rbp-130h]\n  char *nptr; // [rsp+20h] [rbp-128h]\n  unsigned int v56; // [rsp+2Ch] [rbp-11Ch]\n  double v57; // [rsp+30h] [rbp-118h]\n  char *s; // [rsp+38h] [rbp-110h]\n  void *v59; // [rsp+40h] [rbp-108h]\n  __int64 v60; // [rsp+48h] [rbp-100h]\n  __int64 v61; // [rsp+50h] [rbp-F8h]\n  __int64 v62; // [rsp+58h] [rbp-F0h]\n  char *filename; // [rsp+60h] [rbp-E8h]\n  time_t v64; // [rsp+68h] [rbp-E0h]\n  __int64 v65; // [rsp+70h] [rbp-D8h]\n  void *v66; // [rsp+78h] [rbp-D0h]\n  char *modes; // [rsp+80h] [rbp-C8h]\n  void *v68; // [rsp+88h] [rbp-C0h]\n  FILE *stream; // [rsp+90h] [rbp-B8h]\n  __int64 v70; // [rsp+98h] [rbp-B0h]\n  void *ptr; // [rsp+A0h] [rbp-A8h]\n  __int64 v72; // [rsp+A8h] [rbp-A0h]\n  char *s1; // [rsp+B0h] [rbp-98h]\n  char v74; // [rsp+BCh] [rbp-8Ch]\n  char v75; // [rsp+C0h] [rbp-88h]\n\n  v2 = 0LL;\n  v64 = time(0LL);\n  v56 = a1;\n  v65 = a2;\n  if ( (unsigned int)sub_427E50(a1, a2) )\n  {\n    v60 = 5000LL;\n    LODWORD(v57) = 1134723072;\n    v51 = 200.0;\n    v3 = 0;\n    LODWORD(v54) = 0;\n    v62 = 0LL;\n    v2 = 0LL;\n    do\n    {\n      v4 = s1;\n      if ( !strcmp(s1, \"--cpu\") )\n      {\n        v3 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v4, \"--fixed\") )\n      {\n        v62 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v4, \"--histfile\") )\n      {\n        v2 = nptr;\n      }\n      else if ( !strcmp(v4, \"--mean\") )\n      {\n        v5 = strtod(nptr, 0LL);\n        *(float *)&v57 = v5;\n      }\n      else if ( !strcmp(v4, \"--num\") )\n      {\n        v60 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v4, \"--pvm\") )\n      {\n        LODWORD(v54) = 1;\n      }\n      else if ( !strcmp(v4, \"--sd\") )\n      {\n        v6 = strtod(nptr, 0LL);\n        v51 = v6;\n      }\n      else if ( !strcmp(v4, \"--seed\") )\n      {\n        v64 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v4, \"-h\") )\n      {\n        sub_416C20(stdout);\n        puts(aUsageHmmcalibr);\n        puts(aCpuNRunNThread);\n        exit(0);\n      }\n      LOBYTE(a2) = v65;\n    }\n    while ( (unsigned int)sub_427E50(v56, v65) );\n  }\n  else\n  {\n    v51 = 200.0;\n    LODWORD(v57) = 1134723072;\n    v60 = 5000LL;\n    v62 = 0LL;\n    LODWORD(v54) = 0;\n    v3 = 0;\n  }\n  v7 = v53;\n  if ( v56 - v53 != 1 )\n    sub_4325B0(\"Incorrect number of arguments.\\n%s\\n\", (unsigned __int64)aUsageHmmcalibr);\n  ++v53;\n  s = *(char **)(v65 + 8LL * v7);\n  if ( LODWORD(v54) )\n    sub_4325B0(\"PVM support is not compiled into HMMER; --pvm doesn't work.\", a2);\n  if ( v3 )\n    sub_4325B0(\"Posix threads support is not compiled into HMMER; --cpu doesn't have any effect\", a2);\n  v8 = (_DWORD *)sub_40ECD0(s, 0LL);\n  if ( !v8 )\n    sub_4325B0(\"failed to open HMM file %s for reading.\", (char)s);\n  if ( v2 )\n  {\n    v9 = fopen(v2, \"w\");\n    if ( !v9 )\n      sub_4325B0(\"Failed to open histogram save file %s for writing\\n\", (char)v2);\n  }\n  else\n  {\n    v9 = 0LL;\n  }\n  v10 = s;\n  v11 = strlen(s);\n  v12 = (char *)sub_4382F0(\"hmmcalibrate.c\", 265LL, v11 + 5);\n  strcpy(v12, v10);\n  v13 = strlen(v12);\n  v12[v13 + 4] = 0;\n  *(_DWORD *)&v12[v13] = 2003136046;\n  filename = v12;\n  if ( (unsigned int)sub_427E20(v12, v10) && remove(filename) )\n    sub_432770(\"hmmcalibrate.c\", 270LL);\n  v14 = \"wb\";\n  if ( !v8[6] )\n    v14 = \"w\";\n  modes = v14;\n  sub_416C20(stdout);\n  printf(\"HMM file:                 %s\\n\", s);\n  if ( (_DWORD)v62 )\n  {\n    printf(\"Length fixed to:          %d\\n\");\n  }\n  else\n  {\n    printf(\"Length distribution mean: %.0f\\n\", *(float *)&v57);\n    printf(\"Length distribution s.d.: %.0f\\n\", v51);\n  }\n  printf(\"Number of samples:        %d\\n\", v60);\n  printf(\"random seed:              %d\\n\", v64);\n  v15 = \"[not saved]\";\n  if ( v2 )\n    v15 = v2;\n  printf(\"histogram(s) saved to:    %s\\n\", v15);\n  if ( LODWORD(v54) )\n    puts(\"PVM:                      ACTIVE\");\n  puts(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n\");\n  v16 = (void *)sub_4382F0(\"hmmcalibrate.c\", 308LL, 400LL);\n  v17 = (void *)sub_4382F0(\"hmmcalibrate.c\", 309LL, 400LL);\n  if ( (unsigned int)sub_412350((__int64)v8, (__int64)&v52) )\n  {\n    v18 = LODWORD(v54);\n    v54 = *(float *)&v57;\n    v57 = v51;\n    v19 = 0LL;\n    v70 = v18;\n    stream = v9;\n    v68 = v8;\n    do\n    {\n      v72 = v19;\n      if ( !v52 )\n        sub_4325B0(\"HMM file may be corrupt or in incorrect format; parse failed\", (unsigned __int64)&v52);\n      if ( (_DWORD)v18 )\n        sub_4325B0(\"wait. that can't happen. I didn't do anything.\", (unsigned __int64)&v52);\n      v59 = v17;\n      ptr = v16;\n      v20 = v52;\n      sub_437D70(v64, &v52);\n      sub_419BE0(v20, 1LL);\n      sub_41EBB0(&v75, &v74);\n      v66 = (void *)sub_40BCD0(-200, 200, 100);\n      v21 = 1LL;\n      v22 = (__int64 *)sub_402A00(1, v20[34], 25, 0);\n      LODWORD(v23) = -8388609;\n      if ( (signed int)v60 > 0 )\n      {\n        v24 = 0;\n        LODWORD(v23) = -8388609;\n        v25 = -8388609;\n        do\n        {\n          LODWORD(v61) = v25;\n          v26 = v62;\n          if ( !(_DWORD)v62 )\n          {\n            do\n            {\n              v23 = v54;\n              sub_437DF0(v21);\n              v26 = (signed int)v23;\n            }\n            while ( (signed int)v23 <= 0 );\n          }\n          v27 = (void *)sub_438480(::s, &v75, (unsigned int)dword_464000, v26);\n          v28 = sub_402590((__int64)v27, v26);\n          if ( (signed int)sub_403140(v26, v20[34]) > 1000 )\n            *(float *)&v23 = sub_403F80((__int64)v28, v26, (__int64)v20, (__int64)v22, 0LL, *(float *)&v23);\n          else\n            sub_40B620((__int64)v28, v26, (__int64)v20, v22, 0LL);\n          sub_40BDE0((__int64 *)v66, v26, *(float *)&v23);\n          v29 = fmaxf(*(float *)&v23, *(float *)&v61);\n          free(v28);\n          v21 = (signed __int64)v27;\n          free(v27);\n          *(float *)&v23 = v29;\n          ++v24;\n          v25 = LODWORD(v29);\n        }\n        while ( v24 != (_DWORD)v60 );\n      }\n      sub_402E80(v22);\n      LODWORD(v18) = v70;\n      v9 = stream;\n      v8 = v68;\n      v16 = ptr;\n      v17 = v59;\n      v30 = (float *)v66;\n      if ( !(unsigned int)sub_40D520((__int64)v66, 1, 9999.0) )\n        sub_4325B0(\"fit failed; --num may be set too small?\\n\", 1);\n      v31 = v72;\n      *((float *)v16 + v72) = v30[11];\n      *((float *)v17 + v31) = v30[12];\n      v61 = v31 + 1;\n      if ( (_DWORD)v31 + 1 == 100 * (((signed int)v31 + 1) / 0x64u) )\n      {\n        v32 = v16;\n        v33 = v8;\n        v34 = v9;\n        v35 = v18;\n        v18 = (__int64)v17;\n        v36 = 4 * v31 + 404;\n        v37 = sub_438340(\"hmmcalibrate.c\", 348LL, v32, v36);\n        v38 = v18;\n        LODWORD(v18) = v35;\n        v9 = v34;\n        v8 = v33;\n        v16 = (void *)v37;\n        v17 = (void *)sub_438340(\"hmmcalibrate.c\", 349LL, v38, v36);\n      }\n      printf(\"HMM    : %s\\n\", *(_QWORD *)v52, COERCE_DOUBLE(1176255488LL));\n      printf(\"mu     : %12f\\n\", v30[11]);\n      printf(\"lambda : %12f\\n\", v30[12]);\n      printf(\"max    : %12f\\n\", *(float *)&v23);\n      puts(\"//\");\n      if ( v9 )\n      {\n        fprintf(v9, \"HMM: %s\\n\", *(_QWORD *)v52);\n        sub_40BF40(v39, (signed __int64)v30, v9, (__int64 *)v30);\n        fwrite(\"//\\n\", 3uLL, 1uLL, v9);\n      }\n      sub_40BD80(v30);\n      sub_419540(v52);\n      v40 = sub_412350((__int64)v8, (__int64)&v52);\n      v19 = v61;\n    }\n    while ( v40 );\n    v59 = v17;\n  }\n  else\n  {\n    v59 = v17;\n    v61 = 0LL;\n  }\n  v41 = v16;\n  sub_4123A0((FILE **)v8);\n  v42 = filename;\n  if ( (unsigned int)sub_427E20(filename, &v52) )\n    sub_4325B0(\"Ouch. Temporary file %s appeared during the run.\", (char)v42);\n  v43 = modes;\n  v44 = fopen(v42, modes);\n  if ( !v44 )\n    sub_4325B0(\"Ouch. Temporary file %s couldn't be opened for writing.\", (char)v42);\n  if ( (_DWORD)v61 )\n  {\n    v45 = (unsigned int)v61;\n    v46 = 0LL;\n    do\n    {\n      if ( !(unsigned int)sub_412350((__int64)v8, (__int64)&v52) )\n        sub_4325B0(\"Ran out of HMMs too early in pass 2\", (unsigned __int64)&v52);\n      v47 = v52;\n      if ( !v52 )\n        sub_4325B0(\"HMM file %s was corrupted? Parse failed in pass 2\", (char)s);\n      *((_DWORD *)v52 + 112) = v41[v46];\n      v47[113] = *((_DWORD *)v59 + v46);\n      *((_BYTE *)v47 + 456) |= 0x80u;\n      v48 = sub_419930(v47, v56, v65);\n      v43 = v52;\n      if ( v8[6] )\n        sub_413240(v44, (const char **)v52);\n      else\n        sub_412450(v44, v48, (__int64)v52);\n      sub_419540(v52);\n      ++v46;\n    }\n    while ( v45 != v46 );\n  }\n  sub_40F0C0(v8);\n  if ( fclose(v44) )\n    sub_432770(\"hmmcalibrate.c\", 415LL);\n  free(filename);\n  free(v41);\n  v49 = v59;\n  free(v59);\n  if ( v9 )\n  {\n    v49 = v9;\n    fclose(v9);\n  }\n  sub_429770(v49, v43);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4141d0L", 
            "funcEndAddr": "0x414c3dL", 
            "funcName": "sub_4141D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char **v3; // rbp\n  unsigned int v4; // er12\n  char *v5; // rbx\n  float v6; // xmm0_4\n  float v7; // xmm0_4\n  unsigned int v8; // ebx\n  char *v9; // r15\n  const char *v10; // rbx\n  __int64 v11; // r14\n  void *v12; // rax\n  _BOOL8 v13; // rsi\n  unsigned int *v14; // rbx\n  const char *v15; // rdi\n  const char *v16; // rdi\n  double v17; // xmm0_8\n  __int64 *v18; // r12\n  __int64 *v19; // r13\n  _BYTE *v20; // rax\n  void *v21; // rbx\n  signed int v22; // eax\n  char v23; // si\n  double v24; // xmm1_8\n  __int64 *v25; // r14\n  int v26; // er13\n  double v27; // xmm2_8\n  signed int v28; // eax\n  char *v29; // r10\n  char *v30; // r11\n  double v31; // xmm0_8\n  int v32; // eax\n  __int64 v33; // rsi\n  int v34; // ecx\n  void *v35; // rbp\n  void *v36; // rdx\n  void *v37; // rcx\n  const char *v38; // rsi\n  const char *v39; // rsi\n  const char *v40; // rdi\n  __int64 v41; // rax\n  int v42; // er14\n  unsigned int v43; // er13\n  void *v44; // rdi\n  signed int v46; // [rsp+6Ch] [rbp-26Ch]\n  unsigned int v47; // [rsp+6Ch] [rbp-26Ch]\n  int v48; // [rsp+70h] [rbp-268h]\n  _DWORD *v49; // [rsp+70h] [rbp-268h]\n  void *v50; // [rsp+78h] [rbp-260h]\n  char *nptr; // [rsp+80h] [rbp-258h]\n  int v52; // [rsp+88h] [rbp-250h]\n  int v53; // [rsp+8Ch] [rbp-24Ch]\n  __int64 v54; // [rsp+90h] [rbp-248h]\n  float v55; // [rsp+98h] [rbp-240h]\n  int v56; // [rsp+9Ch] [rbp-23Ch]\n  void *v57; // [rsp+A0h] [rbp-238h]\n  float v58; // [rsp+A8h] [rbp-230h]\n  double v59; // [rsp+B0h] [rbp-228h]\n  float v60; // [rsp+B8h] [rbp-220h]\n  double v61; // [rsp+C0h] [rbp-218h]\n  __int64 v62; // [rsp+C8h] [rbp-210h]\n  __int64 v63; // [rsp+D0h] [rbp-208h]\n  __int64 v64; // [rsp+D8h] [rbp-200h]\n  __int64 v65; // [rsp+E0h] [rbp-1F8h]\n  void *v66; // [rsp+E8h] [rbp-1F0h]\n  void *ptr; // [rsp+F0h] [rbp-1E8h]\n  void *v68; // [rsp+F8h] [rbp-1E0h]\n  unsigned int v69; // [rsp+100h] [rbp-1D8h]\n  unsigned int v70; // [rsp+104h] [rbp-1D4h]\n  unsigned int v71; // [rsp+108h] [rbp-1D0h]\n  unsigned int v72; // [rsp+10Ch] [rbp-1CCh]\n  float v73; // [rsp+110h] [rbp-1C8h]\n  float v74; // [rsp+114h] [rbp-1C4h]\n  void *v75; // [rsp+118h] [rbp-1C0h]\n  char *s1; // [rsp+120h] [rbp-1B8h]\n  __int64 v77; // [rsp+128h] [rbp-1B0h]\n  char v78; // [rsp+134h] [rbp-1A4h]\n  __int64 v79; // [rsp+140h] [rbp-198h]\n  char v80; // [rsp+1C4h] [rbp-114h]\n  char v81; // [rsp+204h] [rbp-D4h]\n  unsigned int v82; // [rsp+284h] [rbp-54h]\n\n  v3 = a2;\n  if ( a1 != 3 )\n    return (unsigned int)sub_4141D0(a1, (__int64)a2);\n  v59 = 10.0;\n  v58 = -3.4028235e38;\n  v60 = -3.4028235e38;\n  v61 = 3.402823466385289e38;\n  v62 = 0LL;\n  if ( (unsigned int)sub_427E50(3LL, (__int64)a2) )\n  {\n    v54 = 0x7FFFFFFFLL;\n    v65 = 1LL;\n    v4 = 0;\n    v48 = 0;\n    v56 = 0;\n    v46 = 0;\n    v52 = 0;\n    v63 = 0LL;\n    do\n    {\n      v5 = s1;\n      if ( !strcmp(s1, \"-A\") )\n      {\n        v54 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v5, \"-E\") )\n      {\n        v59 = strtod(nptr, 0LL);\n      }\n      else if ( !strcmp(v5, \"-T\") )\n      {\n        v6 = strtod(nptr, 0LL);\n        v58 = v6;\n      }\n      else if ( !strcmp(v5, \"-Z\") )\n      {\n        HIDWORD(v62) = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v5, \"--compat\") )\n      {\n        v56 = 1;\n      }\n      else if ( !strcmp(v5, \"--cpu\") )\n      {\n        v48 = strtol(nptr, 0LL, 10);\n      }\n      else if ( !strcmp(v5, \"--cut_ga\") )\n      {\n        LODWORD(v62) = 1;\n      }\n      else if ( !strcmp(v5, \"--cut_nc\") )\n      {\n        LODWORD(v62) = 2;\n      }\n      else if ( !strcmp(v5, \"--cut_tc\") )\n      {\n        LODWORD(v62) = 3;\n      }\n      else if ( !strcmp(v5, \"--domE\") )\n      {\n        v61 = strtod(nptr, 0LL);\n      }\n      else if ( !strcmp(v5, \"--domT\") )\n      {\n        v7 = strtod(nptr, 0LL);\n        v60 = v7;\n      }\n      else if ( !strcmp(v5, \"--forward\") )\n      {\n        v63 = 1LL;\n      }\n      else if ( !strcmp(v5, \"--null2\") )\n      {\n        v65 = 0LL;\n      }\n      else if ( !strcmp(v5, \"--pvm\") )\n      {\n        v46 = 1;\n      }\n      else if ( !strcmp(v5, \"--xnu\") )\n      {\n        v52 = 1;\n      }\n      else if ( !strcmp(v5, \"--informat\") )\n      {\n        v4 = sub_4365A0(nptr, \"--informat\");\n        if ( !v4 )\n          sub_4325B0(\"unrecognized sequence file format \\\"%s\\\"\", (char)nptr);\n      }\n      else if ( !strcmp(v5, \"-h\") )\n      {\n        sub_416C20(stdout);\n        puts(aUsageHmmsearch);\n        puts(aCompatMakeBest);\n        exit(0);\n      }\n      LOBYTE(a2) = (_BYTE)v3;\n    }\n    while ( (unsigned int)sub_427E50(3LL, (__int64)v3) );\n  }\n  else\n  {\n    v63 = 0LL;\n    v54 = 0x7FFFFFFFLL;\n    v65 = 1LL;\n    v52 = 0;\n    v46 = 0;\n    v56 = 0;\n    v48 = 0;\n    v4 = 0;\n  }\n  if ( v53 != 1 )\n    sub_4325B0(\"Incorrect number of arguments.\\n%s\\n\", (unsigned __int64)aUsageHmmsearch);\n  v9 = v3[1];\n  v53 = 3;\n  v10 = v3[2];\n  v11 = v54;\n  if ( v46 )\n    sub_4325B0(\"PVM support is not compiled into your HMMER software; --pvm doesn't work.\", (char)a2);\n  if ( v48 )\n    sub_4325B0(\"POSIX threads support is not compiled into HMMER; --cpu doesn't have any effect\", (char)a2);\n  if ( !v4 )\n  {\n    v4 = 0;\n    if ( (unsigned int)sub_429210(\"^.*\\\\.gz$\", v3[2], 0LL) || !strcmp(v10, \"-\") )\n      v4 = 7;\n  }\n  v68 = (void *)sub_4327A0(v10, v4, \"BLASTDB\");\n  if ( !v68 )\n    sub_4325B0(\"Failed to open sequence database file %s\\n%s\\n\", (char)v10);\n  v12 = (void *)sub_40ECD0(v9, \"HMMERDB\");\n  if ( !v12 )\n    sub_4325B0(\"Failed to open HMM file %s\\n%s\", (char)v9);\n  v75 = v12;\n  if ( !(unsigned int)sub_412350((__int64)v12, (__int64)&v50) )\n    sub_4325B0(\"Failed to read any HMMs from %s\\n\", (char)v9);\n  if ( !v50 )\n    sub_4325B0(\"HMM file %s corrupt or in incorrect format? Parse failed\", (char)v9);\n  v13 = (_DWORD)v63 == 0;\n  sub_419BE0(v50, v13);\n  if ( v52 && dword_464004 == 2 )\n    sub_4325B0(\"The HMM is a DNA model, and you can't use the --xnu filter on DNA data\", v13);\n  if ( !(unsigned int)sub_416E30(&v58, v50) )\n    sub_4325B0(\"HMM %s did not contain the GA, TC, or NC cutoffs you needed\", *(_QWORD *)v50);\n  sub_416C20(stdout);\n  printf(\"HMM file:                   %s [%s]\\n\", v9, *(_QWORD *)v50);\n  printf(\"Sequence database:          %s\\n\", v10);\n  if ( v46 )\n    puts(\"PVM:                        ACTIVE\");\n  printf(\"per-sequence score cutoff:  \");\n  v14 = (unsigned int *)v68;\n  if ( v58 == -3.4028235e38 )\n  {\n    v15 = \"[none]\";\nLABEL_70:\n    puts(v15);\n    goto LABEL_71;\n  }\n  printf(\">= %.1f\", v58);\n  switch ( (_DWORD)v62 )\n  {\n    case 3:\n      v15 = \" [TC1]\";\n      goto LABEL_70;\n    case 2:\n      v15 = \" [NC1]\";\n      goto LABEL_70;\n    case 1:\n      v15 = \" [GA1]\";\n      goto LABEL_70;\n  }\n  putchar(10);\nLABEL_71:\n  printf(\"per-domain score cutoff:    \");\n  if ( v60 == -3.4028235e38 )\n  {\n    v16 = \"[none]\";\nLABEL_73:\n    puts(v16);\n    goto LABEL_74;\n  }\n  printf(\">= %.1f\", v60);\n  switch ( (_DWORD)v62 )\n  {\n    case 3:\n      v16 = \" [TC2]\";\n      goto LABEL_73;\n    case 2:\n      v16 = \" [NC2]\";\n      goto LABEL_73;\n    case 1:\n      v16 = \" [GA2]\";\n      goto LABEL_73;\n  }\n  putchar(10);\nLABEL_74:\n  printf(\"per-sequence Eval cutoff:   \");\n  if ( v59 == 3.402823466385289e38 )\n    puts(\"[none]\");\n  else\n    printf(\"<= %-10.2g\\n\");\n  printf(\"per-domain Eval cutoff:     \");\n  v17 = v61;\n  if ( v61 == 3.402823466385289e38 )\n    puts(\"[none]\");\n  else\n    printf(\"<= %10.2g\\n\");\n  puts(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\");\n  ptr = (void *)sub_40BCD0(-200, 200, 100);\n  v66 = (void *)sub_41F7B0(200LL, 200LL);\n  v49 = (_DWORD *)sub_41F7B0(200LL, 200LL);\n  v18 = (__int64 *)v50;\n  v47 = 0;\n  v19 = (__int64 *)sub_402A00(1, *((_DWORD *)v50 + 34), 25, 0);\n  if ( (unsigned int)sub_433130(v14, v14[36], &v64, &v79) )\n  {\n    v47 = 0;\n    do\n    {\n      while ( !v82 )\n      {\n        if ( !(unsigned int)sub_433130(v14, v14[36], &v64, &v79) )\n          goto LABEL_112;\n      }\n      v20 = sub_402590(v64, v82);\n      v21 = v20;\n      if ( v52 && dword_464004 == 3 )\n        sub_4164D0(v20, v82);\n      v22 = sub_403140(v82, *((_DWORD *)v18 + 34));\n      v23 = v82;\n      if ( v22 > 1000 )\n        *(float *)&v17 = sub_403F80((__int64)v21, v82, (__int64)v18, (__int64)v19, (__int64)&v57, *(float *)&v17);\n      else\n        sub_40B620((__int64)v21, v82, (__int64)v18, v19, &v57);\n      v24 = v17;\n      if ( (_DWORD)v63 )\n      {\n        v23 = v82;\n        sub_403250((__int64)v21, v82, (__int64)v18, 0LL);\n        v24 = v17;\n        if ( (_DWORD)v65 )\n        {\n          v23 = (char)v57;\n          v55 = *(float *)&v17;\n          sub_416A30(v18, v57, v21);\n          *(_QWORD *)&v24 = LODWORD(v55);\n          *(float *)&v24 = v55 - *(float *)&v17;\n        }\n      }\n      v55 = *(float *)&v24;\n      v54 = v11;\n      v25 = v19;\n      v26 = v47 + 1;\n      sub_415B50(v18);\n      *(_QWORD *)&v27 = LODWORD(v55);\n      ++v47;\n      if ( v55 >= v58 )\n      {\n        v28 = HIDWORD(v62);\n        if ( !HIDWORD(v62) )\n          v28 = v26;\n        if ( v59 >= v24 * (double)v28 )\n        {\n          v29 = &v80;\n          if ( !(v79 & 4) )\n            v29 = 0LL;\n          v30 = &v81;\n          if ( !(v79 & 8) )\n            v30 = 0LL;\n          v23 = (char)v49;\n          *(_QWORD *)&v31 = LODWORD(v55);\n          *(float *)&v31 = sub_4082D0(\n                             (__int64)v66,\n                             (__int64)v49,\n                             (__int64)v57,\n                             v18,\n                             (__int64)v21,\n                             v82,\n                             v55,\n                             (__int64)&v79 + 4,\n                             (__int64)v29,\n                             (__int64)v30,\n                             v63,\n                             v65,\n                             (__int64)&v58,\n                             0);\n          v27 = v31;\n        }\n      }\n      v17 = v27;\n      sub_40BDE0((__int64 *)ptr, v23, *(float *)&v27);\n      sub_432BB0(v64, &v79);\n      sub_420060(v57);\n      free(v21);\n      v14 = (unsigned int *)v68;\n      v32 = sub_433130(v68, *((unsigned int *)v68 + 36), &v64, &v79);\n      v19 = v25;\n      v11 = v54;\n    }\n    while ( v32 );\n  }\nLABEL_112:\n  sub_402E80(v19);\n  if ( *((_BYTE *)v50 + 456) < 0 )\n  {\n    sub_40D130(\n      (__int64)ptr,\n      0,\n      *((float *)v50 + 112),\n      *((float *)v50 + 113),\n      (float)*((signed int *)ptr + 5),\n      (float)*((signed int *)ptr + 4));\n    if ( HIDWORD(v62) )\n      goto LABEL_114;\n  }\n  else if ( HIDWORD(v62) )\n  {\n    goto LABEL_114;\n  }\n  HIDWORD(v62) = v47;\nLABEL_114:\n  v33 = *(_QWORD *)v50;\n  if ( !v56 )\n  {\n    printf(\"\\nQuery HMM:   %s\\n\", v33);\n    v35 = v66;\n    if ( *((_BYTE *)v50 + 457) & 2 )\n      v38 = (const char *)*((_QWORD *)v50 + 1);\n    else\n      v38 = \"[none]\";\n    printf(\"Accession:   %s\\n\", v38);\n    if ( *((_BYTE *)v50 + 456) & 2 )\n      v39 = (const char *)*((_QWORD *)v50 + 2);\n    else\n      v39 = \"[none]\";\n    printf(\"Description: %s\\n\", v39);\n    goto LABEL_130;\n  }\n  v34 = *((_DWORD *)v50 + 114);\n  v35 = v66;\n  if ( v34 & 0x200 )\n  {\n    v36 = (void *)*((_QWORD *)v50 + 1);\n    if ( v34 & 2 )\n      goto LABEL_117;\nLABEL_123:\n    v37 = &unk_4409CD;\n    goto LABEL_124;\n  }\n  v36 = &unk_4409CD;\n  if ( !(v34 & 2) )\n    goto LABEL_123;\nLABEL_117:\n  v37 = (void *)*((_QWORD *)v50 + 2);\nLABEL_124:\n  printf(\"\\nQuery HMM: %s|%s|%s\\n\", v33, v36, v37);\nLABEL_130:\n  if ( *((_BYTE *)v50 + 456) < 0 )\n    v40 = \"  [HMM has been calibrated; E-values are empirical estimates]\";\n  else\n    v40 = \"  [No calibration for HMM; E-values are upper bounds]\";\n  puts(v40);\n  sub_41FD30(v35);\n  if ( (signed int)sub_41FCB0(v35) >= 8 )\n    sub_41FCB0(v35);\n  sub_41FD30(v49);\n  if ( (signed int)sub_41FCB0(v49) >= 8 )\n    sub_41FCB0(v49);\n  if ( (_DWORD)v11 )\n  {\n    puts(\"\\nAlignments of top-scoring domains:\");\n    v41 = (__int64)v49;\n    if ( v49[5] <= 0 )\n    {\n      puts(\"\\t[no hits above thresholds]\");\n      goto LABEL_154;\n    }\n    v42 = 0;\n    v43 = 0;\n    while ( 1 )\n    {\n      sub_41FB20(\n        v41,\n        v43,\n        (__int64)&v57,\n        (__int64)&v74,\n        (__int64)&v64,\n        (__int64)&v73,\n        (__int64)&v77,\n        0LL,\n        0LL >> 63,\n        (__int64)&v72,\n        (__int64)&v71,\n        (__int64)&v78);\n      if ( *(double *)&v64 * (double)SHIDWORD(v62) > v59 )\n        break;\n      v41 = (__int64)v49;\n      if ( v58 > v73 || v61 < (double)SHIDWORD(v62) * *(double *)&v57 || v74 < v60 )\n        goto LABEL_142;\n      printf(\"%s: domain %d of %d, from %d to %d: score %.1f, E = %.2g\\n\", v77, v70, v69, v72, v71, v74);\n      sub_421F00(stdout);\n      v41 = (__int64)v49;\n      if ( ++v42 == (_DWORD)v54 )\n      {\nLABEL_149:\n        v35 = v66;\n        if ( !v42 )\n          puts(\"\\t[no hits above thresholds]\");\n        if ( v42 == (_DWORD)v54 )\n          printf(\"\\t[output cut off at A = %d top alignments]\\n\", v54);\n        goto LABEL_154;\n      }\nLABEL_143:\n      if ( (signed int)++v43 >= *(_DWORD *)(v41 + 20) )\n        goto LABEL_149;\n    }\n    v41 = (__int64)v49;\nLABEL_142:\n    if ( v42 == (_DWORD)v54 )\n      goto LABEL_149;\n    goto LABEL_143;\n  }\nLABEL_154:\n  v8 = 0;\n  printf(\"\\nTotal sequences searched: %d\\n\", v47);\n  sub_40BD80(ptr);\n  sub_40F0C0(v75);\n  sub_432B30(v68);\n  sub_41F850(v35);\n  sub_41F850(v49);\n  v44 = v50;\n  sub_419540(v50);\n  sub_429770(v44, v47);\n  return v8;\n}\n", 
            "funcStartAddr": "0x414c40L", 
            "funcEndAddr": "0x415a81L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_415A90(float a1, float a2)\n{\n  signed __int64 result; // rax\n  float v3; // xmm0_4\n  double v4; // xmm0_8\n\n  result = 3307312975LL;\n  if ( a1 != 0.0 )\n  {\n    v3 = a1 / a2;\n    if ( v3 <= 0.0 )\n      v4 = -9998999.5;\n    else\n      v4 = log(v3) * 1.44269504 * 1000.0 + 0.5;\n    result = (unsigned int)(signed int)floor(v4);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415a90L", 
            "funcEndAddr": "0x415ae3L", 
            "funcName": "sub_415A90"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_415AF0(signed int a1, float a2)\n{\n  float v2; // xmm1_4\n  float result; // xmm0_4\n\n  v2 = a2;\n  result = 0.0;\n  if ( a1 != -987654321 )\n    result = exp((float)a1 / 1000.0 * 0.69314718) * v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x415af0L", 
            "funcEndAddr": "0x415b39L", 
            "funcName": "sub_415AF0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_415B40(signed int a1)\n{\n  return (float)a1 / 1000.0;\n}\n", 
            "funcStartAddr": "0x415b40L", 
            "funcEndAddr": "0x415b4dL", 
            "funcName": "sub_415B40"
        }, 
        {
            "decompiledFuncCode": "__int128 __usercall sub_415B50@<xmm0>(__int64 a1@<rdi>, __m128 a2@<xmm0>)\n{\n  __m128 v2; // xmm3\n  double v3; // xmm0_8\n  __int128 v4; // xmm1\n  __int128 v5; // xmm0\n\n  v2 = a2;\n  v3 = a2.m128_f32[0];\n  v4 = 0LL;\n  if ( v3 >= 1023.999999369029 )\n  {\nLABEL_4:\n    if ( !a1 )\n      return v4;\n    goto LABEL_5;\n  }\n  if ( v3 > -1023.999999369029 )\n  {\n    v2 = (__m128)v2.m128_u32[0];\n    v4 = 0x3FF0000000000000uLL;\n    *(double *)&v4 = 1.0 / (exp(v3 * 0.69314718) + 1.0);\n    goto LABEL_4;\n  }\n  v4 = 0x3FF0000000000000uLL;\n  if ( !a1 )\n    return v4;\nLABEL_5:\n  if ( *(_BYTE *)(a1 + 456) < 0 )\n  {\n    *((_QWORD *)&v5 + 1) = v2.m128_u64[1];\n    *(double *)&v5 = sub_40C990(v2.m128_f32[0], *(float *)(a1 + 448), *(float *)(a1 + 452));\n    v4 = (unsigned __int64)v4;\n    if ( *(double *)&v4 > *(double *)&v5 )\n      v4 = v5;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x415b50L", 
            "funcEndAddr": "0x415bfeL", 
            "funcName": "sub_415B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_415C00@<rax>(double a1@<rax>, float a2@<xmm0>, float a3@<xmm1>)\n{\n  double v3; // xmm2_8\n  double v4; // xmm0_8\n  double v5; // xmm0_8\n  double v6; // xmm2_8\n  double v8; // [rsp+0h] [rbp-8h]\n\n  v8 = a1;\n  if ( a2 <= a3 )\n  {\n    v3 = a3;\n    if ( (float)(a3 - a2) <= 50.0 )\n    {\n      v4 = (float)(a2 - a3);\n      goto LABEL_6;\n    }\n  }\n  else\n  {\n    v3 = a2;\n    if ( (float)(a2 - a3) <= 50.0 )\n    {\n      v4 = (float)(a3 - a2);\nLABEL_6:\n      v8 = v3;\n      v5 = exp(v4);\n      v6 = v3 + log(v5 + 1.0);\n      return *(_QWORD *)&v8;\n    }\n  }\n  return *(_QWORD *)&v8;\n}\n", 
            "funcStartAddr": "0x415c00L", 
            "funcEndAddr": "0x415c72L", 
            "funcName": "sub_415C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415C80(unsigned int a1, int a2)\n{\n  int v2; // er14\n  unsigned int v3; // er15\n  signed __int64 v4; // rbp\n  signed int v5; // ebx\n  double v6; // xmm0_8\n  int v7; // eax\n\n  v2 = a2;\n  v3 = a1;\n  if ( !byte_450070 )\n  {\n    v4 = -80000LL;\n    v5 = 0;\n    do\n    {\n      v6 = exp((float)v5 * 0.69314718 / 1000.0);\n      *(_DWORD *)&dword_463900[v4] = (signed int)(log(v6 + 1.0) * 1442.69504);\n      --v5;\n      v4 += 4LL;\n    }\n    while ( v4 );\n    byte_450070 = 1;\n  }\n  v7 = a1 - a2;\n  if ( (signed int)(a1 - a2) <= 19999 )\n  {\n    if ( v7 >= -19999 )\n    {\n      if ( v7 > 0 )\n        return dword_450080[v7] + a1;\n      v2 = dword_450080[a2 - a1] + a2;\n    }\n    v3 = v2;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x415c80L", 
            "funcEndAddr": "0x415d30L", 
            "funcName": "sub_415C80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_415D30(float *a1, unsigned int a2)\n{\n  float *v2; // r12\n  __int64 v3; // r15\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rcx\n  float v7; // xmm3_4\n  float *v8; // rcx\n  __int64 v9; // rax\n  double v10; // xmm4_8\n  float v11; // xmm2_4\n  __int64 v12; // rbp\n  float *v13; // rbx\n  double v14; // xmm0_8\n  float v15; // xmm1_4\n  double v16; // xmm0_8\n  float v17; // [rsp+Ch] [rbp-3Ch]\n  double v18; // [rsp+18h] [rbp-30h]\n\n  v2 = a1;\n  if ( (signed int)a2 > 0 )\n  {\n    v3 = a2;\n    v4 = a2 & 3;\n    if ( (unsigned __int64)a2 - 1 >= 3 )\n    {\n      v5 = -1.0e30;\n      v6 = 0LL;\n      do\n      {\n        v5 = fmaxf(a1[v6 + 3], fmaxf(a1[v6 + 2], fmaxf(a1[v6 + 1], fmaxf(a1[v6], v5))));\n        v6 += 4LL;\n      }\n      while ( a2 - v4 != v6 );\n    }\n    else\n    {\n      v5 = -1.0e30;\n      v6 = 0LL;\n    }\n    v7 = v5;\n    if ( a2 & 3 )\n    {\n      v8 = &a1[v6];\n      v9 = -v4;\n      do\n      {\n        v7 = fmaxf(*v8, v5);\n        ++v8;\n        v5 = v7;\n        ++v9;\n      }\n      while ( v9 );\n    }\n    if ( (signed int)a2 > 0 )\n    {\n      v10 = v7 + -50.0;\n      v11 = 0.0;\n      v12 = a2;\n      v13 = a1;\n      v17 = v7;\n      v18 = v7 + -50.0;\n      do\n      {\n        if ( *v13 > v10 )\n        {\n          v14 = exp((float)(*v13 - v7));\n          v10 = v18;\n          v7 = v17;\n          v11 = v11 + v14;\n        }\n        ++v13;\n        --v12;\n      }\n      while ( v12 );\n      if ( (signed int)a2 > 0 )\n      {\n        do\n        {\n          v15 = 0.0;\n          if ( *v2 > v10 )\n          {\n            v16 = exp((float)(*v2 - v7));\n            v10 = v18;\n            v7 = v17;\n            v15 = v16 / v11;\n          }\n          *v2 = v15;\n          ++v2;\n          --v3;\n        }\n        while ( v3 );\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x415d30L", 
            "funcEndAddr": "0x415ed9L", 
            "funcName": "sub_415D30"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_415EE0(__int64 a1, int a2, __int64 a3)\n{\n  __int64 v3; // r14\n  __m128 v4; // xmm3\n  float v5; // xmm0_4\n  __int64 v6; // rbx\n  __m128 v7; // xmm1\n  __m128 v8; // xmm2\n  float v9; // xmm0_4\n  float v10; // ST08_4\n  double v11; // xmm0_8\n  float v12; // ST08_4\n  double v13; // xmm0_8\n  __m128 v14; // xmm1\n  float v15; // xmm0_4\n  float v16; // xmm0_4\n  double v18; // [rsp+8h] [rbp-50h]\n  __m128 v19; // [rsp+10h] [rbp-48h]\n  double v20; // [rsp+10h] [rbp-48h]\n  float v21; // [rsp+20h] [rbp-38h]\n\n  v3 = a3;\n  if ( a2 <= 0 )\n  {\n    v14 = 0LL;\n    v20 = 1.0;\n    v18 = 0.0;\n  }\n  else\n  {\n    v4 = 0LL;\n    v18 = 0.0;\n    v5 = 0.0;\n    v6 = 0LL;\n    do\n    {\n      v7 = (__m128)*(unsigned int *)(a1 + 4 * v6);\n      v8 = (__m128)*(unsigned int *)(v3 + 4 * v6);\n      v21 = v5 + v7.m128_f32[0];\n      v7.m128_f32[0] = v7.m128_f32[0] + v8.m128_f32[0];\n      v19 = _mm_add_ps(v4, _mm_unpacklo_ps(v7, v8));\n      sub_437380();\n      v9 = v7.m128_f32[0] + v18;\n      v10 = v9;\n      v11 = *(float *)(a1 + 4 * v6) + 1.0;\n      sub_437380();\n      *(float *)&v11 = v10 - v11;\n      v12 = *(float *)&v11;\n      v13 = *(float *)(v3 + 4 * v6);\n      sub_437380();\n      v4 = v19;\n      *(float *)&v13 = v12 - v13;\n      ++v6;\n      v18 = *(float *)&v13;\n      v5 = v21;\n    }\n    while ( a2 != v6 );\n    v14 = (__m128)_mm_cvtps_pd(v19);\n    v20 = v21 + 1.0;\n  }\n  sub_437380();\n  v15 = v18 - *(double *)v14.m128_u64;\n  sub_437380();\n  v16 = v15 + COERCE_DOUBLE(_mm_movehl_ps(v14, v14));\n  sub_437380();\n  return v16 + v20;\n}\n", 
            "funcStartAddr": "0x415ee0L", 
            "funcEndAddr": "0x416076L", 
            "funcName": "sub_415EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416080(__int64 a1, unsigned int a2, __int64 a3)\n{\n  __int64 v3; // r15\n  __int64 v4; // rbp\n  int v5; // xmm0_4\n\n  v3 = a3;\n  if ( (signed int)a2 > 0 )\n  {\n    v4 = 0LL;\n    do\n    {\n      v5 = *(_DWORD *)(a1 + 4 * v4);\n      sub_4160D0();\n      *(_DWORD *)(v3 + 4 * v4++) = v5;\n    }\n    while ( a2 != v4 );\n  }\n  return sub_43DC80(v3, a2);\n}\n", 
            "funcStartAddr": "0x416080L", 
            "funcEndAddr": "0x4160cdL", 
            "funcName": "sub_416080"
        }, 
        {
            "decompiledFuncCode": "__m128 __fastcall sub_4160D0(float a1, __int64 a2, char a3)\n{\n  double v3; // xmm2_8\n  __m128 v4; // xmm0\n  float v5; // xmm0_4\n  float v6; // xmm1_4\n  __m128 v7; // xmm0\n  double v8; // xmm0_8\n  float v9; // ST08_4\n  float v10; // xmm0_4\n  double v11; // ST00_8\n  __m128 v12; // xmm1\n  double v13; // ST28_8\n  double v14; // xmm0_8\n  double x; // [rsp+0h] [rbp-48h]\n  double y; // [rsp+10h] [rbp-38h]\n  float v18; // [rsp+18h] [rbp-30h]\n  double v19; // [rsp+20h] [rbp-28h]\n  __m128 v20; // [rsp+30h] [rbp-18h]\n  double v21; // [rsp+40h] [rbp-8h]\n\n  v3 = a1;\n  if ( a1 >= 1.0 )\n  {\n    v18 = a1;\n    v19 = a1;\n    y = v3 + v3 + -1.0;\n    v21 = sqrt(y);\n    do\n    {\n      v8 = v21;\n      if ( y < 0.0 )\n        v8 = sqrt(y);\n      *(float *)&v8 = v8;\n      v9 = *(float *)&v8;\n      sub_437B60();\n      v10 = v8;\n      v11 = (float)(v10 / (float)(1.0 - v10));\n      v12 = 0LL;\n      v12.m128_f32[0] = pow(v11, (float)(1.0 / v9)) * v19;\n      v20 = v12;\n      v13 = exp((float)(v18 - v12.m128_f32[0])) * 0.25;\n      *(double *)v12.m128_u64 = (1.0 / v11 + 1.0) * (1.0 / v11 + 1.0) * (pow(v11, (float)(v18 / v9) + 1.0) * v13);\n      HIDWORD(v14) = 0;\n      *(float *)&v14 = *(double *)v12.m128_u64;\n      sub_437B60();\n    }\n    while ( *(float *)&v14 < v14 );\n  }\n  else\n  {\n    if ( a1 <= 0.0 )\n      sub_4325B0(\"Invalid argument alpha < 0.0 to SampleGamma()\", a3);\n    v4 = (__m128)0xBFF0000000000000LL;\n    *(double *)v4.m128_u64 = v3 + -1.0;\n    do\n    {\n      sub_437B60();\n      v5 = *(double *)v4.m128_u64;\n      v4.m128_f32[0] = v5 * (v3 / 2.718281828459045 + 1.0);\n      if ( v4.m128_f32[0] <= 1.0 )\n      {\n        *(double *)v4.m128_u64 = pow(v4.m128_f32[0], 1.0 / v3);\n        v4.m128_f32[0] = *(double *)v4.m128_u64;\n        v20 = v4;\n        sub_437B60();\n        x = *(double *)v4.m128_u64;\n        v4 = _mm_xor_ps(v4, (__m128)xmmword_440220);\n        *(double *)v4.m128_u64 = exp(v4.m128_f32[0]);\n      }\n      else\n      {\n        v6 = 1.0 - v4.m128_f32[0];\n        v7 = 0LL;\n        *(double *)v7.m128_u64 = log((v6 + v3 / 2.718281828459045) / v3);\n        v7.m128_f32[0] = *(double *)v7.m128_u64;\n        v4 = _mm_xor_ps(v7, (__m128)xmmword_440220);\n        v20 = v4;\n        sub_437B60();\n        x = *(double *)v4.m128_u64;\n        *(double *)v4.m128_u64 = pow(v4.m128_f32[0], v3 + -1.0);\n      }\n    }\n    while ( *(double *)v4.m128_u64 < x );\n  }\n  return v20;\n}\n", 
            "funcStartAddr": "0x4160d0L", 
            "funcEndAddr": "0x41635aL", 
            "funcName": "sub_4160D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416360(__int64 a1, __int64 a2, int a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  int v5; // ebp\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = a3;\n  result = sub_43C860(a4, a2);\n  if ( v5 > 0 )\n  {\n    do\n    {\n      result = (signed int)sub_438150(a1, (unsigned int)a2);\n      *(float *)(v4 + 4LL * (signed int)result) = *(float *)(v4 + 4LL * (signed int)result) + 1.0;\n      --v5;\n    }\n    while ( v5 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x416360L", 
            "funcEndAddr": "0x4163bfL", 
            "funcName": "sub_416360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4164D0(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // rax\n  _DWORD *v4; // r13\n  __int64 v5; // r12\n  signed __int64 v6; // r15\n  signed __int64 v7; // rdi\n  signed __int64 v8; // r8\n  signed __int64 v9; // r11\n  _DWORD *v10; // rbx\n  __int64 v11; // rdx\n  __int64 v12; // rdx\n  signed __int64 v13; // r9\n  signed int v14; // edx\n  __int64 v15; // rcx\n  signed __int64 v16; // rax\n  signed int v17; // esi\n  __int64 v18; // r12\n  bool v19; // zf\n  bool v20; // sf\n  unsigned __int8 v21; // of\n  signed int v22; // edi\n  int v23; // eax\n  signed __int64 v24; // r11\n  signed __int64 v25; // r9\n  signed __int64 v26; // rsi\n  unsigned __int64 v27; // rcx\n  signed __int64 v28; // rax\n  unsigned __int64 v29; // rbp\n  unsigned __int64 v30; // rdx\n  signed __int64 v31; // rdi\n  signed __int64 v32; // r15\n  signed __int64 v33; // r10\n  signed __int64 v34; // r12\n  signed __int64 v35; // rax\n  signed __int64 v36; // r9\n  signed __int64 v37; // rsi\n  signed __int64 v38; // r10\n  __int64 v39; // r8\n  unsigned __int64 v40; // r8\n  unsigned __int64 v41; // rcx\n  signed __int64 v42; // rbp\n  unsigned __int64 v43; // r9\n  unsigned __int64 v44; // rcx\n  __int64 v45; // r15\n  signed __int64 v46; // rdi\n  signed __int64 v47; // rax\n  signed __int64 v48; // rcx\n  signed __int64 v49; // rdx\n  signed __int64 v50; // rax\n  signed __int64 v51; // rsi\n  unsigned int v52; // ebx\n  signed __int64 v53; // rdx\n  __int64 v54; // r12\n  __int64 v56; // [rsp+8h] [rbp-90h]\n  signed __int64 v57; // [rsp+10h] [rbp-88h]\n  signed __int64 v58; // [rsp+18h] [rbp-80h]\n  signed __int64 v59; // [rsp+20h] [rbp-78h]\n  int v60; // [rsp+2Ch] [rbp-6Ch]\n  signed __int64 v61; // [rsp+30h] [rbp-68h]\n  signed __int64 v62; // [rsp+38h] [rbp-60h]\n  __int64 v63; // [rsp+48h] [rbp-50h]\n  int v64; // [rsp+50h] [rbp-48h]\n  __int64 v65; // [rsp+58h] [rbp-40h]\n  signed __int64 v66; // [rsp+60h] [rbp-38h]\n\n  v2 = a1;\n  if ( !a2 )\n    return 0;\n  v3 = sub_4382F0(\"masks.c\", 100LL, 4LL * (signed int)(a2 + 1));\n  v4 = (_DWORD *)v3;\n  if ( (signed int)a2 > 0 )\n    memset((void *)(v3 + 4), 0, 4LL * a2);\n  v64 = a2;\n  v66 = (signed int)a2;\n  v60 = a2 + 1;\n  v5 = a2 + 1;\n  v6 = (signed __int64)(v4 + 1);\n  v62 = (signed __int64)(v4 + 12);\n  v61 = (signed __int64)(v4 + 4);\n  v7 = -1LL;\n  v8 = 2LL;\n  v9 = 1LL;\n  v10 = v4;\n  v11 = 0LL;\n  v65 = a2 + 1;\n  do\n  {\n    v13 = v9++;\n    if ( v13 >= v66 )\n      goto LABEL_69;\n    v58 = v9;\n    v59 = v7;\n    v56 = v11;\n    v63 = ~v11;\n    v14 = 0;\n    v57 = v8;\n    LODWORD(v15) = v13;\n    LODWORD(v16) = 0;\n    v17 = 0;\n    do\n    {\n      v14 += dword_4453D0[23 * *(char *)(v2 + v8) + *(char *)(v2 + v8 - v13)];\n      v21 = __OFSUB__(v14, v17);\n      v19 = v14 == v17;\n      v20 = v14 - v17 < 0;\n      if ( v14 >= v17 )\n        v17 = v14;\n      v22 = v8;\n      if ( (unsigned __int8)(v20 ^ v21) | v19 )\n        v22 = v16;\n      v23 = v17 - v14;\n      if ( v17 >= 21 && v23 >= 15 )\n      {\n        v24 = v13;\n        if ( (signed int)v15 > v22 )\n          goto LABEL_34;\n        v25 = (signed int)v15;\n        v26 = v22;\n        v15 = (signed int)v15;\n        if ( v22 >= (signed __int64)(signed int)v15 )\n          v15 = v22;\n        v27 = v15 + 1 - v25;\n        if ( v27 < 8 )\n          goto LABEL_32;\n        v28 = v25;\n        if ( v22 >= v25 )\n          v28 = v22;\n        if ( (unsigned __int64)&v4[v25 + v63] < v6 + 4 * v28 && (unsigned __int64)&v4[v25] < v6 + 4 * (v63 + v28) )\n          goto LABEL_32;\n        v29 = v27 & 0xFFFFFFFFFFFFFFF8LL;\n        v30 = ((v27 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n        if ( (v27 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n        {\n          v18 = 0LL;\n          if ( ((_BYTE)v30 + 1) & 1 )\n          {\nLABEL_29:\n            v34 = v25 + v18;\n            v35 = v34 - v24;\n            *(_OWORD *)&v4[v35] = xmmword_440150;\n            *(_OWORD *)&v4[v35 + 4] = xmmword_440150;\n            *(_OWORD *)&v4[v34] = xmmword_440150;\n            *(_OWORD *)&v4[v34 + 4] = xmmword_440150;\n            goto LABEL_30;\n          }\n        }\n        else\n        {\n          v31 = v62 + 4 * v25;\n          v32 = (((_BYTE)v30 + 1) & 1) - 1LL - v30;\n          v33 = v61 + 4 * (v59 + v25);\n          v18 = 0LL;\n          do\n          {\n            *(_OWORD *)(v33 + 4 * v18 - 16) = xmmword_440150;\n            *(_OWORD *)(v33 + 4 * v18) = xmmword_440150;\n            *(_OWORD *)(v31 + 4 * v18 - 48) = xmmword_440150;\n            *(_OWORD *)(v31 + 4 * v18 - 32) = xmmword_440150;\n            *(_OWORD *)(v33 + 4 * v18 + 16) = xmmword_440150;\n            *(_OWORD *)(v33 + 4 * v18 + 32) = xmmword_440150;\n            *(_OWORD *)(v31 + 4 * v18 - 16) = xmmword_440150;\n            *(_OWORD *)(v31 + 4 * v18) = xmmword_440150;\n            v18 += 16LL;\n            v32 += 2LL;\n          }\n          while ( v32 );\n          if ( ((_BYTE)v30 + 1) & 1 )\n            goto LABEL_29;\n        }\nLABEL_30:\n        v5 = v65;\n        v6 = (signed __int64)(v4 + 1);\n        if ( v27 != v29 )\n        {\n          v25 += v29;\nLABEL_32:\n          v36 = v25 - 1;\n          do\n          {\n            v10[v36] = 1;\n            v4[v36++ + 1] = 1;\n          }\n          while ( v36 < v26 );\n        }\nLABEL_34:\n        ++v8;\n        v17 = 0;\n        LODWORD(v16) = v8;\n        LODWORD(v15) = v8;\n        v14 = 0;\n        v13 = v24;\n        goto LABEL_42;\n      }\n      ++v8;\n      if ( v23 > 14 )\n        v17 = 0;\n      if ( v23 > 14 )\n      {\n        v22 = v8;\n        if ( v23 > 14 )\n        {\n          LODWORD(v15) = v8;\n          if ( v23 > 14 )\n            v14 = 0;\n        }\n      }\n      LODWORD(v16) = v22;\nLABEL_42:\n      if ( v14 < 0 )\n        v17 = 0;\n      if ( v14 < 0 )\n      {\n        LODWORD(v16) = v8;\n        if ( v14 < 0 )\n        {\n          LODWORD(v15) = v8;\n          if ( v14 < 0 )\n            v14 = 0;\n        }\n      }\n    }\n    while ( v8 != v5 );\n    v7 = v59;\n    v8 = v57;\n    v9 = v58;\n    v11 = v56;\n    if ( v17 < 21 || (signed int)v15 > (signed int)v16 )\n      goto LABEL_69;\n    v37 = (signed int)v15;\n    v38 = (signed int)v16;\n    v39 = (signed int)v16;\n    if ( (signed int)v15 >= (signed __int64)(signed int)v16 )\n      v39 = (signed int)v15;\n    v40 = v39 + 1 - (signed int)v15;\n    if ( v40 >= 8 )\n    {\n      v41 = (unsigned __int64)&v4[(signed int)v15 + v63];\n      v16 = (signed int)v16;\n      if ( v37 >= (signed int)v16 )\n        v16 = v37;\n      if ( v41 < v6 + 4 * v16 && (unsigned __int64)&v4[v37] < v6 + 4 * (v63 + v16) )\n      {\n        v8 = v57;\n        v9 = v58;\n        v11 = v56;\n        goto LABEL_67;\n      }\n      v42 = v13;\n      v43 = v40 & 0xFFFFFFFFFFFFFFF8LL;\n      v44 = ((v40 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n      v45 = ((_BYTE)v44 + 1) & 1;\n      if ( (v40 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n      {\n        v12 = 0LL;\n        if ( ((_BYTE)v44 + 1) & 1 )\n        {\nLABEL_64:\n          v49 = v37 + v12;\n          v50 = v49 - v42;\n          *(_OWORD *)&v4[v50] = xmmword_440150;\n          *(_OWORD *)&v4[v50 + 4] = xmmword_440150;\n          *(_OWORD *)&v4[v49] = xmmword_440150;\n          *(_OWORD *)&v4[v49 + 4] = xmmword_440150;\n          goto LABEL_65;\n        }\n      }\n      else\n      {\n        v46 = v62 + 4 * v37;\n        v47 = v45 - 1 - v44;\n        v48 = v61 + 4 * (v59 + v37);\n        v12 = 0LL;\n        do\n        {\n          *(_OWORD *)(v48 + 4 * v12 - 16) = xmmword_440150;\n          *(_OWORD *)(v48 + 4 * v12) = xmmword_440150;\n          *(_OWORD *)(v46 + 4 * v12 - 48) = xmmword_440150;\n          *(_OWORD *)(v46 + 4 * v12 - 32) = xmmword_440150;\n          *(_OWORD *)(v48 + 4 * v12 + 16) = xmmword_440150;\n          *(_OWORD *)(v48 + 4 * v12 + 32) = xmmword_440150;\n          *(_OWORD *)(v46 + 4 * v12 - 16) = xmmword_440150;\n          *(_OWORD *)(v46 + 4 * v12) = xmmword_440150;\n          v12 += 16LL;\n          v47 += 2LL;\n        }\n        while ( v47 );\n        if ( v45 )\n          goto LABEL_64;\n      }\nLABEL_65:\n      v19 = v40 == v43;\n      v6 = (signed __int64)(v4 + 1);\n      v7 = v59;\n      v8 = v57;\n      v9 = v58;\n      v11 = v56;\n      if ( !v19 )\n      {\n        v37 += v43;\n        goto LABEL_67;\n      }\n      goto LABEL_69;\n    }\n    v8 = v57;\n    v11 = v56;\nLABEL_67:\n    v51 = v37 - 1;\n    do\n    {\n      v10[v51] = 1;\n      v4[v51++ + 1] = 1;\n    }\n    while ( v51 < v38 );\nLABEL_69:\n    ++v8;\n    ++v11;\n    --v7;\n    --v10;\n  }\n  while ( v9 != 5 );\n  if ( v64 <= 0 )\n  {\n    v52 = 0;\n  }\n  else\n  {\n    if ( v60 == 2 )\n    {\n      v52 = 0;\n      v53 = 1LL;\n      goto LABEL_83;\n    }\n    v54 = v5 - (~(_BYTE)v60 & 1);\n    v52 = 0;\n    v53 = 1LL;\n    do\n    {\n      if ( v4[v53] )\n      {\n        ++v52;\n        *(_BYTE *)(v2 + v53) = dword_463FFC - 1;\n      }\n      if ( v4[v53 + 1] )\n      {\n        ++v52;\n        *(_BYTE *)(v2 + v53 + 1) = dword_463FFC - 1;\n      }\n      v53 += 2LL;\n    }\n    while ( v54 != v53 );\n    if ( ~(_BYTE)v60 & 1 )\n    {\nLABEL_83:\n      if ( v4[v53] )\n      {\n        ++v52;\n        *(_BYTE *)(v2 + v53) = dword_463FFC - 1;\n      }\n    }\n  }\n  free(v4);\n  return v52;\n}\n", 
            "funcStartAddr": "0x4164d0L", 
            "funcEndAddr": "0x416a2eL", 
            "funcName": "sub_4164D0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_416A30(__int64 a1, signed int *a2, __int64 a3)\n{\n  __int64 v3; // r14\n  signed int *v4; // r15\n  __int64 v5; // rbx\n  char v6; // al\n  __int64 v7; // rax\n  int v8; // eax\n  signed __int64 v9; // rbx\n  signed __int64 v10; // rbx\n  __int64 v11; // rdi\n  __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  int v15; // esi\n  __int64 v17; // rdi\n  signed int v18; // eax\n  int v19[20]; // [rsp+0h] [rbp-D8h]\n  int v20[34]; // [rsp+50h] [rbp-88h]\n\n  v3 = a3;\n  v4 = a2;\n  if ( !a2 )\n    return 0.0;\n  sub_43C860(v19, (unsigned int)dword_464000);\n  if ( *a2 > 0 )\n  {\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v6 = *(_BYTE *)(*((_QWORD *)a2 + 1) + v5);\n      if ( v6 == 3 )\n        break;\n      if ( v6 == 1 )\n      {\n        v7 = *(_QWORD *)(a1 + 152);\nLABEL_8:\n        sub_43CE20(\n          v19,\n          *(_QWORD *)(v7 + 8LL * *(signed int *)(*((_QWORD *)a2 + 2) + 4 * v5)),\n          (unsigned int)dword_464000);\n      }\n      if ( ++v5 >= *a2 )\n        goto LABEL_10;\n    }\n    v7 = *(_QWORD *)(a1 + 160);\n    goto LABEL_8;\n  }\nLABEL_10:\n  sub_43DC80(v19, (unsigned int)dword_464000);\n  v8 = dword_464000;\n  if ( dword_464000 > 0 )\n  {\n    v9 = 0LL;\n    do\n    {\n      v20[v9] = sub_415A90(*(float *)&v19[v9], *(float *)(a1 + 4 * v9 + 224));\n      ++v9;\n      v8 = dword_464000;\n    }\n    while ( v9 < dword_464000 );\n  }\n  if ( v8 < dword_463FFC )\n  {\n    v10 = v8;\n    do\n    {\n      v20[v10] = sub_41A580(v19, a1 + 224, (unsigned int)v10);\n      ++v10;\n    }\n    while ( v10 < dword_463FFC );\n  }\n  v11 = *a2;\n  if ( v11 > 0 )\n  {\n    v12 = *((_QWORD *)a2 + 1);\n    v13 = v11 & 1;\n    if ( (_DWORD)v11 == 1 )\n    {\n      v14 = 0LL;\n      v15 = 0;\n      if ( !(v11 & 1) )\n        goto LABEL_31;\n    }\n    else\n    {\n      v17 = v11 - v13;\n      v14 = 0LL;\n      v15 = 0;\n      do\n      {\n        if ( (*(_BYTE *)(v12 + v14) | 2) == 3 )\n          v15 += v20[*(char *)(v3 + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v14))];\n        if ( (*(_BYTE *)(v12 + v14 + 1) | 2) == 3 )\n          v15 += v20[*(char *)(v3 + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v14 + 4))];\n        v14 += 2LL;\n      }\n      while ( v17 != v14 );\n      if ( !v13 )\n        goto LABEL_31;\n    }\n    if ( (*(_BYTE *)(v12 + v14) | 2) == 3 )\n      v15 += v20[*(char *)(v3 + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v14))];\n    goto LABEL_31;\n  }\n  v15 = 0;\nLABEL_31:\n  v18 = sub_415C80(0, v15 - 8000);\n  return sub_415B40(v18);\n}\n", 
            "funcStartAddr": "0x416a30L", 
            "funcEndAddr": "0x416c09L", 
            "funcName": "sub_416A30"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_416C20(FILE *s, __int64 a2)\n{\n  fprintf(s, \"%s\\n\", a2);\n  fprintf(s, \"%s %s (%s)\\n\", \"HMMER\", \"2.3\", \"May 2003\");\n  fprintf(s, \"%s\\n\", \"Copyright (C) 1992-2003 HHMI/Washington University School of Medicine\");\n  fprintf(s, \"%s\\n\", \"Freely distributed under the GNU General Public License (GPL)\");\n  return fwrite(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n\", 0x48uLL, 1uLL, s);\n}\n", 
            "funcStartAddr": "0x416c20L", 
            "funcEndAddr": "0x416c95L", 
            "funcName": "sub_416C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416CA0(FILE *stream, int a2)\n{\n  char *v2; // rax\n  __int64 v3; // rbp\n  char *v4; // rax\n  char *v5; // rdi\n  char v7; // [rsp+0h] [rbp-18h]\n\n  if ( qword_463B00 )\n  {\n    v2 = strtok(0LL, \" \\t\\n\");\n    qword_463B00 = (__int64)v2;\n    if ( v2 )\n    {\nLABEL_8:\n      if ( a2 == 1 )\n      {\n        if ( !(unsigned int)sub_43C400(v2, \" \\t\\n\") )\n        {\n          v5 = \"Parse failed: expected integer, got %s\";\nLABEL_17:\n          sub_432690(v5, v7);\nLABEL_18:\n          qword_463B00 = 0LL;\n          return qword_463B00;\n        }\n      }\n      else\n      {\n        if ( a2 != 2 )\n        {\n          if ( a2 != 4 || *v2 )\n            return qword_463B00;\n          sub_432690(\"Parse failed: expected string, got nothing\", v7);\n          goto LABEL_18;\n        }\n        if ( !(unsigned int)sub_43C520(v2, \" \\t\\n\") )\n        {\n          v5 = \"Parse failed: expected real value, got %s\";\n          goto LABEL_17;\n        }\n      }\n      return qword_463B00;\n    }\n  }\n  v3 = 0LL;\n  while ( 1 )\n  {\n    qword_463B00 = (__int64)fgets(dword_463900, 512, stream);\n    if ( !qword_463B00 )\n      return v3;\n    v4 = strchr(dword_463900, 35);\n    qword_463B00 = (__int64)v4;\n    if ( v4 )\n      *v4 = 0;\n    v2 = strtok(dword_463900, \" \\t\\n\");\n    qword_463B00 = (__int64)v2;\n    if ( v2 )\n      goto LABEL_8;\n  }\n}\n", 
            "funcStartAddr": "0x416ca0L", 
            "funcEndAddr": "0x416da3L", 
            "funcName": "sub_416CA0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_416DB0(char *s, int n, FILE *stream)\n{\n  FILE *v3; // r14\n  char *v4; // rbx\n  const unsigned __int16 **v5; // rbp\n  char *v6; // rdx\n  __int64 v7; // rax\n\n  v3 = stream;\n  v4 = s;\n  if ( !fgets(s, n, stream) )\n    return 0LL;\n  v5 = __ctype_b_loc();\n  while ( 1 )\n  {\n    v6 = s;\n    do\n      v7 = *v6++;\n    while ( (*v5)[v7] & 0x2000 );\n    if ( (_BYTE)v7 && (_BYTE)v7 != 35 )\n      break;\n    if ( !fgets(s, n, v3) )\n      return 0LL;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x416db0L", 
            "funcEndAddr": "0x416e2aL", 
            "funcName": "sub_416DB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_416E30(__int64 a1, __int64 a2)\n{\n  int v2; // ecx\n  signed __int64 result; // rax\n  int v4; // eax\n\n  v2 = *(_DWORD *)(a1 + 32);\n  result = 1LL;\n  switch ( v2 )\n  {\n    case 3:\n      result = 0LL;\n      if ( !(*(_BYTE *)(a2 + 457) & 8) )\n        return result;\n      *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);\n      v4 = *(_DWORD *)(a2 + 124);\n      goto LABEL_10;\n    case 2:\n      result = 0LL;\n      if ( !(*(_BYTE *)(a2 + 457) & 0x10) )\n        return result;\n      *(_DWORD *)a1 = *(_DWORD *)(a2 + 128);\n      v4 = *(_DWORD *)(a2 + 132);\n      goto LABEL_10;\n    case 1:\n      result = 0LL;\n      if ( *(_BYTE *)(a2 + 457) & 4 )\n      {\n        *(_DWORD *)a1 = *(_DWORD *)(a2 + 112);\n        v4 = *(_DWORD *)(a2 + 116);\nLABEL_10:\n        *(_DWORD *)(a1 + 16) = v4;\n        *(_QWORD *)(a1 + 24) = 5183643170566569984LL;\n        *(_QWORD *)(a1 + 8) = 5183643170566569984LL;\n        return 1LL;\n      }\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x416e30L", 
            "funcEndAddr": "0x416ea5L", 
            "funcName": "sub_416E30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_416EB0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r15\n  __int64 v6; // r12\n  __int64 v7; // r13\n  _DWORD *v8; // rbx\n  __int64 v9; // r9\n  __int64 v10; // rdx\n  signed __int64 v11; // r8\n  signed __int64 v12; // rsi\n  unsigned __int8 v13; // cl\n  signed int v14; // edi\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  if ( !*(_QWORD *)(a1 + 88) )\n    sub_4325B0(\"Alignment must have RF annotation to hand-build an HMM\", a2);\n  v8 = (_DWORD *)sub_4382F0(\"modelmakers.c\", 111LL, 4LL * *(signed int *)(a1 + 24) + 4);\n  *v8 = 0;\n  if ( *(_DWORD *)(a1 + 24) > 0 )\n  {\n    v9 = *(_QWORD *)(a1 + 88);\n    v10 = 0LL;\n    v11 = -9223372036854751231LL;\n    do\n    {\n      v12 = v10 + 1;\n      v8[v10 + 1] = 0;\n      v13 = *(_BYTE *)(v9 + v10) - 32;\n      if ( v13 <= 0x3Fu && _bittest64(&v11, v13) || (v14 = 1, *(_BYTE *)(v9 + v10) == 126) )\n        v14 = 8;\n      v8[v10++ + 1] = v14;\n    }\n    while ( v12 < *(signed int *)(v7 + 24) );\n  }\n  sub_416F90(v7, v6, v8, v5, v4);\n  free(v8);\n}\n", 
            "funcStartAddr": "0x416eb0L", 
            "funcEndAddr": "0x416f8aL", 
            "funcName": "sub_416EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416F90(__int64 *a1, signed __int64 a2, __int64 a3, __int64 *a4, _QWORD *a5)\n{\n  __int64 v5; // r13\n  signed __int64 v6; // r15\n  __int64 *v7; // rbp\n  signed __int64 v8; // rax\n  int v9; // ebx\n  signed __int64 v10; // rcx\n  unsigned __int64 v11; // rcx\n  unsigned __int64 v12; // rsi\n  __int64 v13; // rdx\n  signed __int64 v14; // rdi\n  __m128i v15; // xmm3\n  __m128i v16; // xmm2\n  __m128i v17; // xmm4\n  __m128i v18; // xmm0\n  __m128i v19; // xmm1\n  __m128i v20; // xmm4\n  __m128i v21; // xmm0\n  __m128i v22; // xmm1\n  signed __int64 v23; // rcx\n  int *v24; // rax\n  int v25; // ecx\n  signed __int64 v26; // rdx\n  signed int v27; // esi\n  signed __int64 v28; // rdx\n  int *v29; // rax\n  int v30; // ecx\n  bool v31; // bl\n  __int64 v32; // rbx\n  __int64 v33; // rbp\n  signed __int64 v34; // rsi\n  __int64 v35; // rax\n  __int64 v36; // r11\n  __int64 v37; // r14\n  signed __int64 v38; // r15\n  __int64 v39; // rbp\n  __int64 v40; // rax\n  _QWORD *v41; // rax\n  _BYTE *v42; // rdi\n  signed int v43; // er9\n  __int64 v44; // rdx\n  signed __int64 v45; // rax\n  int v46; // er8\n  int v47; // edi\n  __int64 v48; // rdi\n  char v49; // bl\n  signed __int64 v50; // rcx\n  unsigned __int8 v51; // al\n  signed __int64 v52; // rcx\n  __int64 v53; // rdi\n  char v54; // bl\n  signed __int64 v55; // rcx\n  __int64 v56; // rdi\n  __int64 v57; // rax\n  __int64 v58; // rsi\n  signed __int64 v59; // rcx\n  __int64 v60; // rax\n  bool v61; // zf\n  __int64 v62; // rdi\n  __int64 v63; // rdi\n  __int64 v64; // rbp\n  _BYTE *v65; // rbx\n  signed __int64 v66; // rcx\n  signed __int64 v67; // rbp\n  __int64 v68; // rdi\n  signed __int64 v69; // rbp\n  signed __int64 v70; // rcx\n  __int64 v71; // r9\n  __int64 v72; // rdi\n  unsigned int v73; // edx\n  int v74; // ebp\n  __int64 v75; // rbx\n  char v76; // cl\n  __int64 v77; // rax\n  int v78; // ecx\n  char v79; // di\n  __int64 v80; // rax\n  __int64 v81; // rcx\n  __int64 v82; // rcx\n  signed int v83; // eax\n  __int64 v84; // rax\n  __int64 v85; // rax\n  __int64 v86; // rcx\n  int v87; // edi\n  __int64 v88; // rax\n  __int64 v89; // r12\n  signed __int64 v90; // rcx\n  signed __int64 v91; // rbx\n  __m128i v92; // xmm0\n  int v93; // edx\n  signed int v94; // eax\n  signed __int64 v95; // rcx\n  char v96; // bl\n  __int64 v97; // rsi\n  int v98; // edx\n  signed int v99; // eax\n  signed __int64 v100; // rcx\n  char v101; // bl\n  __int64 v102; // rsi\n  int v103; // edx\n  signed int v104; // eax\n  signed __int64 v105; // rcx\n  char v106; // bl\n  __int64 v107; // rsi\n  __int64 v108; // rdx\n  signed int v109; // eax\n  __int64 v110; // rsi\n  bool v111; // sf\n  unsigned __int8 v112; // of\n  __int64 v113; // rdx\n  __int64 v114; // rcx\n  __int64 v115; // r14\n  __int64 v116; // rax\n  __int64 v117; // r15\n  int v118; // eax\n  __int64 v119; // rbx\n  signed __int64 v120; // rbp\n  const unsigned __int16 *v121; // rcx\n  __int64 v122; // rax\n  unsigned __int16 v123; // cx\n  int v124; // eax\n  __int64 v125; // rdx\n  __int64 v126; // rcx\n  __int64 v127; // r14\n  __int64 v128; // rax\n  __int64 v129; // r15\n  int v130; // eax\n  __int64 v131; // rbx\n  signed __int64 v132; // rbp\n  const unsigned __int16 *v133; // rcx\n  __int64 v134; // rax\n  unsigned __int16 v135; // cx\n  int v136; // eax\n  __int64 v137; // r14\n  __int64 v138; // rax\n  __int64 v139; // r15\n  int v140; // eax\n  __int64 v141; // rbx\n  signed __int64 v142; // rbp\n  const unsigned __int16 *v143; // rcx\n  __int64 v144; // rax\n  unsigned __int16 v145; // cx\n  int v146; // eax\n  void *v147; // rdi\n  char *v148; // rax\n  signed __int64 v149; // rcx\n  char v150; // cl\n  signed __int64 v151; // rax\n  signed __int64 v152; // rdx\n  char v153; // bl\n  signed __int64 v154; // rbx\n  __int64 result; // rax\n  __int64 *v156; // [rsp+8h] [rbp-70h]\n  _QWORD *ptr; // [rsp+10h] [rbp-68h]\n  unsigned int v158; // [rsp+18h] [rbp-60h]\n  unsigned int v159; // [rsp+1Ch] [rbp-5Ch]\n  _QWORD *v160; // [rsp+20h] [rbp-58h]\n  __int64 *v161; // [rsp+28h] [rbp-50h]\n  signed __int64 v162; // [rsp+30h] [rbp-48h]\n  __int64 v163; // [rsp+38h] [rbp-40h]\n  __int64 v164; // [rsp+40h] [rbp-38h]\n\n  v160 = a5;\n  v161 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v8 = *((signed int *)a1 + 6);\n  if ( v8 <= 0 )\nLABEL_14:\n    sub_4325B0(\n      \"No conserved consensus columns found; aborting construction!\\n\"\n      \"This is an unusual situation. Reexamine your sequence alignment. It is\\n\"\n      \"probably unusually full of gaps, or lots of sequence fragments. You may be\\n\"\n      \"able to force HMMER to model it; see the --fast (and --gapmax), or --hand\\n\"\n      \"options to hmmbuild.\",\n      a2);\n  if ( (unsigned int)v8 < 8 )\n  {\n    v9 = 0;\n    v10 = 1LL;\n    goto LABEL_11;\n  }\n  v11 = v8 & 0xFFFFFFFFFFFFFFF8LL;\n  v12 = ((v8 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n  v13 = ((_BYTE)v12 + 1) & 1;\n  if ( (v8 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n  {\n    v18 = 0LL;\n    a2 = 0LL;\n    v19 = 0LL;\n    if ( !v13 )\n      goto LABEL_9;\n  }\n  else\n  {\n    v14 = v13 - 1 - v12;\n    v15 = 0LL;\n    a2 = 0LL;\n    v16 = _mm_load_si128((const __m128i *)&xmmword_440150);\n    v17 = 0LL;\n    do\n    {\n      v18 = _mm_add_epi32(\n              _mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + 4 * a2 + 36)), v16),\n              _mm_add_epi32(_mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + 4 * a2 + 4)), v16), v15));\n      v19 = _mm_add_epi32(\n              _mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + 4 * a2 + 52)), v16),\n              _mm_add_epi32(_mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + 4 * a2 + 20)), v16), v17));\n      a2 += 16LL;\n      v15 = v18;\n      v17 = v19;\n      v14 += 2LL;\n    }\n    while ( v14 );\n    if ( !v13 )\n      goto LABEL_9;\n  }\n  a2 = 4 * a2 | 4;\n  v20 = _mm_load_si128((const __m128i *)&xmmword_440150);\n  v19 = _mm_add_epi32(v19, _mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + a2 + 16)), v20));\n  v18 = _mm_add_epi32(v18, _mm_and_si128(_mm_loadu_si128((const __m128i *)(v5 + a2)), v20));\nLABEL_9:\n  v21 = _mm_add_epi32(v18, v19);\n  v22 = _mm_add_epi32(_mm_shuffle_epi32(v21, 78), v21);\n  v9 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v22, 229), v22));\n  if ( v11 == v8 )\n    goto LABEL_13;\n  v10 = v11 | 1;\nLABEL_11:\n  v23 = v10 - 1;\n  do\n    v9 += *(_DWORD *)(v5 + 4 * v23++ + 4) & 1;\n  while ( v23 < v8 );\nLABEL_13:\n  if ( !v9 )\n    goto LABEL_14;\n  v24 = (int *)(v5 + 4);\n  v25 = *(_DWORD *)(v5 + 4);\n  LODWORD(v26) = 1;\n  if ( v25 & 8 )\n  {\n    v26 = 1LL;\n    do\n    {\n      if ( v26 > *((signed int *)v7 + 6) )\n        break;\n      *v24 = v25 | 0x10;\n      ++v26;\n      v25 = v24[1];\n      ++v24;\n    }\n    while ( v25 & 8 );\n  }\n  v158 = v9;\n  v27 = *((_DWORD *)v7 + 6);\n  if ( (signed int)v26 <= v27 )\n  {\n    *v24 = v25 | 2;\n    v27 = *((_DWORD *)v7 + 6);\n  }\n  v28 = v27;\n  v29 = (int *)(v5 + 4LL * v27);\n  v30 = *(_DWORD *)(v5 + 4LL * v27);\n  v31 = v27 > 0;\n  if ( v27 > 0 )\n  {\n    while ( v30 & 8 )\n    {\n      *v29 = v30 | 0x20;\n      v30 = *(v29 - 1);\n      --v29;\n      v31 = v28 > 1;\n      if ( v28 < 2 )\n        break;\n      --v28;\n    }\n  }\n  if ( v31 )\n    *v29 = v30 | 4;\n  v163 = *v7;\n  v32 = *((signed int *)v7 + 7);\n  v156 = v7;\n  v33 = *((unsigned int *)v7 + 6);\n  v34 = 607LL;\n  v35 = sub_4382F0(\"modelmakers.c\", 607LL, 8 * v32);\n  v36 = v33;\n  ptr = (_QWORD *)v35;\n  if ( v32 > 0 )\n  {\n    v164 = (unsigned int)v32;\n    v159 = v33 + 6;\n    v37 = 0LL;\n    v162 = v6;\n    while ( 1 )\n    {\n      v38 = (signed __int64)&ptr[v37];\n      v39 = v36;\n      sub_41FF70(v159, &ptr[v37]);\n      v36 = v39;\n      **(_BYTE **)(ptr[v37] + 8LL) = 4;\n      v40 = ptr[v37];\n      **(_DWORD **)(v40 + 16) = 0;\n      **(_DWORD **)(v40 + 24) = 0;\n      *(_BYTE *)(*(_QWORD *)(v40 + 8) + 1LL) = 5;\n      v41 = (_QWORD *)ptr[v37];\n      *(_DWORD *)(v41[2] + 4LL) = 0;\n      *(_DWORD *)(v41[3] + 4LL) = 0;\n      v42 = (_BYTE *)(v41[1] + 2LL);\n      if ( (signed int)v39 > 0 )\n        break;\n      v34 = 2LL;\n      v46 = 0;\n      v45 = 2LL;\nLABEL_65:\n      *v42 = 9;\n      v71 = *(_QWORD *)v38;\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + 4 * v45) = 0;\n      v72 = *(_QWORD *)(v71 + 24);\n      *(_DWORD *)(v72 + 4 * v45) = 0;\n      *(_DWORD *)v71 = v34 + 1;\n      v73 = 0;\n      if ( (signed int)v34 >= 0 )\n      {\n        v74 = 0;\n        v6 = v162;\n        while ( 1 )\n        {\n          v75 = *(_QWORD *)(v71 + 8);\n          v34 = v74;\n          v76 = *(_BYTE *)(v75 + v74);\n          switch ( *(_BYTE *)(v75 + v74) )\n          {\n            case 2:\n              if ( *(_BYTE *)(v75 + v74 + 1) != 3 )\n                goto LABEL_86;\n              v77 = v73;\n              *(_BYTE *)(v75 + v77) = 1;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v77) = *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4LL * v74);\n              v72 = *(_QWORD *)(v71 + 24);\n              v78 = *(_DWORD *)(v72 + 4LL * v74 + 4);\n              goto LABEL_72;\n            case 3:\n              v79 = *(_BYTE *)(v75 + v74 + 1);\n              if ( v79 == 2 )\n              {\n                v77 = v73;\n                *(_BYTE *)(v75 + v77) = 1;\n                *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v77) = *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4LL * v74 + 4);\n                v72 = *(_QWORD *)(v71 + 24);\n                v78 = *(_DWORD *)(v72 + 4LL * v74);\nLABEL_72:\n                *(_DWORD *)(v72 + 4 * v77) = v78;\n                v34 = (unsigned int)(v74 + 2);\n              }\n              else\n              {\n                ++v74;\n                if ( *(_BYTE *)(v75 + v34 - 1) == 6 )\n                {\n                  v85 = v73;\n                  *(_BYTE *)(v75 + v73) = 1;\n                  v86 = *(_QWORD *)(v71 + 16);\n                  v87 = *(_DWORD *)(v86 + 4 * v34);\nLABEL_85:\n                  *(_DWORD *)(v86 + 4 * v85) = v87;\n                  v72 = *(_QWORD *)(v71 + 24);\n                  *(_DWORD *)(v72 + 4 * v85) = *(_DWORD *)(v72 + 4 * v34);\n                  v83 = 1;\n                  goto LABEL_89;\n                }\n                if ( v79 == 7 )\n                {\n                  v85 = v73;\n                  *(_BYTE *)(v75 + v73) = 1;\n                  v86 = *(_QWORD *)(v71 + 16);\n                  v87 = *(_DWORD *)(v86 + 4 * v34) + 1;\n                  goto LABEL_85;\n                }\nLABEL_86:\n                v88 = v73;\n                *(_BYTE *)(v75 + v88) = v76;\n                *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v88) = *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v34);\n                v72 = *(_QWORD *)(v71 + 24);\n                *(_DWORD *)(v72 + 4 * v88) = *(_DWORD *)(v72 + 4 * v34);\n                v34 = (unsigned int)(v34 + 1);\n              }\n              v83 = 1;\nLABEL_88:\n              v74 = v34;\nLABEL_89:\n              v73 += v83;\n              if ( v74 >= *(_DWORD *)v71 )\n                goto LABEL_92;\n              break;\n            case 6:\n              if ( *(_BYTE *)(v75 + v74 + 1) != 7\n                || *(_BYTE *)(v75 + v74 - 1) != 5\n                || *(_DWORD *)(v72 + 4LL * v74 - 4) <= 0 )\n              {\n                goto LABEL_86;\n              }\n              ++v74;\n              v80 = v73;\n              *(_BYTE *)(v75 + v80) = 1;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v80) = 1;\n              v81 = *(_QWORD *)(v71 + 24);\n              v34 = *(unsigned int *)(v81 + 4 * v34 - 4);\n              *(_DWORD *)(v81 + 4 * v80) = v34;\n              v82 = (signed int)v73;\n              *(_BYTE *)(*(_QWORD *)(v71 + 8) + v82 - 1) = 6;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v82 - 4) = 0;\n              v72 = *(_QWORD *)(v71 + 24);\n              *(_DWORD *)(v72 + 4 * v82 - 4) = 0;\n              v83 = 1;\n              goto LABEL_89;\n            case 7:\n              if ( *(_BYTE *)(v75 + v74 - 1) != 6 || *(_BYTE *)(v75 + v74 + 1) != 8 || *(_BYTE *)(v75 + v74 + 2) != 8 )\n                goto LABEL_86;\n              v84 = v73;\n              *(_BYTE *)(v75 + v84) = 1;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v84) = v46;\n              *(_DWORD *)(*(_QWORD *)(v71 + 24) + 4 * v84) = *(_DWORD *)(*(_QWORD *)(v71 + 24) + 4LL * v74 + 8);\n              *(_BYTE *)(*(_QWORD *)(v71 + 8) + v84 + 1) = 7;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v84 + 4) = 0;\n              *(_DWORD *)(*(_QWORD *)(v71 + 24) + 4 * v84 + 4) = 0;\n              *(_BYTE *)(*(_QWORD *)(v71 + 8) + v84 + 2) = 8;\n              *(_DWORD *)(*(_QWORD *)(v71 + 16) + 4 * v84 + 8) = 0;\n              v72 = *(_QWORD *)(v71 + 24);\n              *(_DWORD *)(v72 + 4 * v84 + 8) = 0;\n              v34 = (unsigned int)(v74 + 3);\n              v83 = 3;\n              goto LABEL_88;\n            default:\n              goto LABEL_86;\n          }\n        }\n      }\n      v6 = v162;\nLABEL_92:\n      *(_DWORD *)v71 = v73;\n      if ( ++v37 == v164 )\n        goto LABEL_93;\n    }\n    v43 = 1;\n    v44 = 0LL;\n    v34 = 2LL;\n    v45 = 2LL;\n    v46 = 0;\n    while ( 1 )\n    {\n      *v42 = 0;\n      v47 = *(_DWORD *)(v5 + 4 * v44 + 4);\n      if ( v47 & 2 )\n      {\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8LL) + v45) = 6;\n        v48 = *(_QWORD *)v38;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + 4 * v45) = 0;\n        *(_DWORD *)(*(_QWORD *)(v48 + 24) + 4 * v45) = 0;\n        v34 = (unsigned int)(v34 + 1);\n        v47 = *(_DWORD *)(v5 + 4 * v44 + 4);\n      }\n      if ( v47 & 1 )\n      {\n        v54 = *(_BYTE *)(*(_QWORD *)(v163 + 8 * v37) + v44);\n        if ( (unsigned __int8)(v54 - 32) <= 0x3Fu\n          && (v55 = -9223372036854751231LL, _bittest64(&v55, (unsigned __int8)(v54 - 32)))\n          || v54 == 126 )\n        {\n          ++v46;\n          v56 = *(_QWORD *)(*(_QWORD *)v38 + 8LL);\n          v57 = (signed int)v34;\n          if ( *(_BYTE *)(v56 + (signed int)v34 - 1) != 6 )\n          {\n            *(_BYTE *)(v56 + (signed int)v34) = 2;\n            v58 = *(_QWORD *)v38;\n            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + 4 * v57) = v46;\n            *(_DWORD *)(*(_QWORD *)(v58 + 24) + 4 * v57) = 0;\n            v34 = (unsigned int)(v57 + 1);\n          }\n          goto LABEL_58;\n        }\n        ++v46;\n        v53 = (signed int)v34;\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8LL) + (signed int)v34) = 1;\n      }\n      else\n      {\n        v49 = *(_BYTE *)(*(_QWORD *)(v163 + 8 * v37) + v44);\n        if ( v47 & 0x10 )\n        {\n          if ( (unsigned __int8)(v49 - 32) > 0x3Fu\n            || (v50 = -9223372036854751231LL, !_bittest64(&v50, (unsigned __int8)(v49 - 32))) )\n          {\n            if ( v49 != 126 )\n            {\n              v53 = (signed int)v34;\n              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8LL) + (signed int)v34) = 5;\nLABEL_56:\n              v60 = *(_QWORD *)v38;\n              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + 4 * v53) = 0;\n              goto LABEL_57;\n            }\n          }\n        }\n        v51 = v49 - 32;\n        if ( v47 & 0x20 )\n        {\n          if ( v51 <= 0x3Fu )\n          {\n            v59 = -9223372036854751231LL;\n            if ( _bittest64(&v59, v51) )\n              goto LABEL_58;\n          }\n          if ( v49 == 126 )\n            goto LABEL_58;\n          v53 = (signed int)v34;\n          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8LL) + (signed int)v34) = 8;\n          goto LABEL_56;\n        }\n        if ( v51 <= 0x3Fu )\n        {\n          v52 = -9223372036854751231LL;\n          if ( _bittest64(&v52, v51) )\n            goto LABEL_58;\n        }\n        if ( v49 == 126 )\n          goto LABEL_58;\n        v53 = (signed int)v34;\n        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8LL) + (signed int)v34) = 3;\n      }\n      v60 = *(_QWORD *)v38;\n      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + 4 * v53) = v46;\nLABEL_57:\n      *(_DWORD *)(*(_QWORD *)(v60 + 24) + 4 * v53) = v43++;\n      v34 = (unsigned int)(v34 + 1);\nLABEL_58:\n      v61 = (*(_BYTE *)(v5 + 4 * v44++ + 4) & 4) == 0;\n      v62 = *(_QWORD *)v38;\n      if ( !v61 )\n      {\n        v63 = *(_QWORD *)(v62 + 8);\n        v64 = (signed int)v34;\n        LODWORD(v34) = v34 + 3;\n        v65 = (_BYTE *)(v63 + v64 - 1);\n        v64 <<= 32;\n        v66 = v64 + 0x200000000LL;\n        v67 = v64 + 0x100000000LL;\n        do\n        {\n          v66 -= 0x100000000LL;\n          v67 -= 0x100000000LL;\n          v34 = (unsigned int)(v34 - 1);\n          v61 = *v65-- == 2;\n        }\n        while ( v61 );\n        *(_BYTE *)(v63 + (v67 >> 32)) = 7;\n        v68 = *(_QWORD *)v38;\n        v69 = v67 >> 30;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + v69) = 0;\n        *(_DWORD *)(*(_QWORD *)(v68 + 24) + v69) = 0;\n        *(_BYTE *)(*(_QWORD *)(v68 + 8) + (v66 >> 32)) = 8;\n        v62 = *(_QWORD *)v38;\n        v70 = v66 >> 30;\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16LL) + v70) = 0;\n        *(_DWORD *)(*(_QWORD *)(v62 + 24) + v70) = 0;\n      }\n      v45 = (signed int)v34;\n      v42 = (_BYTE *)((signed int)v34 + *(_QWORD *)(v62 + 8));\n      if ( v44 == v36 )\n        goto LABEL_65;\n    }\n  }\nLABEL_93:\n  v89 = sub_418ED0(v158, v34);\n  sub_419730(v89, v34);\n  if ( *((_DWORD *)v156 + 7) > 0 )\n  {\n    v91 = 0LL;\n    do\n    {\n      v92 = _mm_cvtsi32_si128(*(_DWORD *)(v156[2] + 4 * v91));\n      sub_420580(v89, *(_QWORD *)(v6 + 8 * v91), ptr[v91]);\n      ++v91;\n    }\n    while ( v91 < *((signed int *)v156 + 7) );\n  }\n  if ( v156[11] )\n  {\n    **(_BYTE **)(v89 + 24) = 32;\n    v93 = *((_DWORD *)v156 + 6);\n    v94 = 1;\n    if ( v93 > 0 )\n    {\n      v95 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v95 + 4) & 1 )\n        {\n          v96 = 46;\n          if ( *(_BYTE *)(v156[11] + v95) != 32 )\n            v96 = *(_BYTE *)(v156[11] + v95);\n          v97 = v94++;\n          *(_BYTE *)(*(_QWORD *)(v89 + 24) + v97) = v96;\n          v93 = *((_DWORD *)v156 + 6);\n        }\n        ++v95;\n      }\n      while ( v95 < v93 );\n    }\n    v90 = *(_QWORD *)(v89 + 24);\n    *(_BYTE *)(v90 + v94) = 0;\n    *(_BYTE *)(v89 + 456) |= 4u;\n  }\n  if ( v156[9] )\n  {\n    **(_BYTE **)(v89 + 32) = 32;\n    v98 = *((_DWORD *)v156 + 6);\n    v99 = 1;\n    if ( v98 > 0 )\n    {\n      v100 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v100 + 4) & 1 )\n        {\n          v101 = 46;\n          if ( *(_BYTE *)(v156[9] + v100) != 32 )\n            v101 = *(_BYTE *)(v156[9] + v100);\n          v102 = v99++;\n          *(_BYTE *)(*(_QWORD *)(v89 + 32) + v102) = v101;\n          v98 = *((_DWORD *)v156 + 6);\n        }\n        ++v100;\n      }\n      while ( v100 < v98 );\n    }\n    v90 = *(_QWORD *)(v89 + 32);\n    *(_BYTE *)(v90 + v99) = 0;\n    *(_BYTE *)(v89 + 456) |= 8u;\n  }\n  if ( v156[10] )\n  {\n    **(_BYTE **)(v89 + 40) = 32;\n    v103 = *((_DWORD *)v156 + 6);\n    v104 = 1;\n    if ( v103 > 0 )\n    {\n      v105 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v105 + 4) & 1 )\n        {\n          v106 = 46;\n          if ( *(_BYTE *)(v156[10] + v105) != 32 )\n            v106 = *(_BYTE *)(v156[10] + v105);\n          v107 = v104++;\n          *(_BYTE *)(*(_QWORD *)(v89 + 40) + v107) = v106;\n          v103 = *((_DWORD *)v156 + 6);\n        }\n        ++v105;\n      }\n      while ( v105 < v103 );\n    }\n    v90 = *(_QWORD *)(v89 + 40);\n    *(_BYTE *)(v90 + v104) = 0;\n    *(_BYTE *)(v89 + 457) |= 0x20u;\n  }\n  v108 = *((unsigned int *)v156 + 6);\n  if ( (signed int)v108 > 0 )\n  {\n    v109 = 1;\n    v90 = 1LL;\n    do\n    {\n      if ( *(_BYTE *)(v5 + 4 * v90) & 1 )\n      {\n        v110 = v109++;\n        *(_DWORD *)(*(_QWORD *)(v89 + 72) + 4 * v110) = v90;\n        v108 = *((unsigned int *)v156 + 6);\n      }\n      v112 = __OFSUB__(v90, (signed int)v108);\n      v111 = v90++ - (signed int)v108 < 0;\n    }\n    while ( v111 ^ v112 );\n  }\n  *(_BYTE *)(v89 + 457) |= 1u;\n  v115 = sub_42BF60(v156, \"X-PRM\", v108, v90);\n  if ( v115 )\n  {\n    v116 = sub_4382F0(\"modelmakers.c\", 896LL, 4LL * *(signed int *)(v89 + 136) + 4);\n    v117 = v116;\n    *(_QWORD *)(v89 + 96) = v116;\n    v118 = *((_DWORD *)v156 + 6);\n    if ( v118 > 0 )\n    {\n      LODWORD(v119) = 1;\n      v120 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v120 + 4) & 1 )\n        {\n          v121 = *__ctype_b_loc();\n          v122 = *(char *)(v115 + v120);\n          v123 = v121[v122];\n          if ( v123 & 0x800 )\n          {\n            v124 = v122 - 48;\n          }\n          else if ( v123 & 0x200 )\n          {\n            v124 = v122 - 87;\n          }\n          else\n          {\n            v113 = (unsigned int)(v122 - 55);\n            v124 = v113 | -((v123 & 0x100u) < 1);\n          }\n          v119 = (signed int)v119;\n          *(_DWORD *)(v117 + 4 * v119) = v124;\n          LODWORD(v119) = v119 + 1;\n          v118 = *((_DWORD *)v156 + 6);\n        }\n        v114 = v118;\n        ++v120;\n      }\n      while ( v120 < v118 );\n    }\n  }\n  v127 = sub_42BF60(v156, \"X-PRI\", v113, v114);\n  if ( v127 )\n  {\n    v128 = sub_4382F0(\"modelmakers.c\", 911LL, 4LL * *(signed int *)(v89 + 136) + 4);\n    v129 = v128;\n    *(_QWORD *)(v89 + 104) = v128;\n    v130 = *((_DWORD *)v156 + 6);\n    if ( v130 > 0 )\n    {\n      LODWORD(v131) = 1;\n      v132 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v132 + 4) & 1 )\n        {\n          v133 = *__ctype_b_loc();\n          v134 = *(char *)(v127 + v132);\n          v135 = v133[v134];\n          if ( v135 & 0x800 )\n          {\n            v136 = v134 - 48;\n          }\n          else if ( v135 & 0x200 )\n          {\n            v136 = v134 - 87;\n          }\n          else\n          {\n            v125 = (unsigned int)(v134 - 55);\n            v136 = v125 | -((v135 & 0x100u) < 1);\n          }\n          v131 = (signed int)v131;\n          *(_DWORD *)(v129 + 4 * v131) = v136;\n          LODWORD(v131) = v131 + 1;\n          v130 = *((_DWORD *)v156 + 6);\n        }\n        v126 = v130;\n        ++v132;\n      }\n      while ( v132 < v130 );\n    }\n  }\n  v137 = sub_42BF60(v156, \"X-PRT\", v125, v126);\n  if ( v137 )\n  {\n    v138 = sub_4382F0(\"modelmakers.c\", 926LL, 4LL * *(signed int *)(v89 + 136) + 4);\n    v139 = v138;\n    *(_QWORD *)(v89 + 88) = v138;\n    v140 = *((_DWORD *)v156 + 6);\n    if ( v140 > 0 )\n    {\n      LODWORD(v141) = 1;\n      v142 = 0LL;\n      do\n      {\n        if ( *(_BYTE *)(v5 + 4 * v142 + 4) & 1 )\n        {\n          v143 = *__ctype_b_loc();\n          v144 = *(char *)(v137 + v142);\n          v145 = v143[v144];\n          if ( v145 & 0x800 )\n          {\n            v146 = v144 - 48;\n          }\n          else if ( v145 & 0x200 )\n          {\n            v146 = v144 - 87;\n          }\n          else\n          {\n            v146 = (v144 - 55) | -((v145 & 0x100u) < 1);\n          }\n          v141 = (signed int)v141;\n          *(_DWORD *)(v139 + 4 * v141) = v146;\n          LODWORD(v141) = v141 + 1;\n          v140 = *((_DWORD *)v156 + 6);\n        }\n        ++v142;\n      }\n      while ( v142 < v140 );\n    }\n  }\n  v147 = (void *)v156[11];\n  if ( v147 )\n    free(v147);\n  v148 = (char *)sub_4382F0(\"modelmakers.c\", 564LL, *((signed int *)v156 + 6) + 1LL);\n  v156[11] = (__int64)v148;\n  LODWORD(v149) = *((_DWORD *)v156 + 6);\n  if ( (signed int)v149 > 0 )\n  {\n    v150 = 46;\n    if ( *(_DWORD *)(v5 + 4) & 1 )\n      v150 = 120;\n    *v148 = v150;\n    LODWORD(v149) = *((_DWORD *)v156 + 6);\n    if ( (signed int)v149 >= 2 )\n    {\n      v151 = 1LL;\n      do\n      {\n        v152 = v151 + 1;\n        v153 = 46;\n        if ( *(_DWORD *)(v5 + 4 * v151 + 4) & 1 )\n          v153 = 120;\n        *(_BYTE *)(v156[11] + v151) = v153;\n        v149 = *((signed int *)v156 + 6);\n        ++v151;\n      }\n      while ( v152 < v149 );\n    }\n    v148 = (char *)v156[11];\n  }\n  v148[(signed int)v149] = 0;\n  if ( v160 )\n  {\n    *v160 = ptr;\n  }\n  else\n  {\n    if ( *((_DWORD *)v156 + 7) > 0 )\n    {\n      v154 = 0LL;\n      do\n        sub_420060((void *)ptr[v154++]);\n      while ( v154 < *((signed int *)v156 + 7) );\n    }\n    free(ptr);\n  }\n  result = (__int64)v161;\n  if ( !v161 )\n    return sub_419540((void *)v89);\n  *v161 = v89;\n  return result;\n}\n", 
            "funcStartAddr": "0x416f90L", 
            "funcEndAddr": "0x417c88L", 
            "funcName": "sub_416F90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_417C90(__int64 a1, signed __int64 a2, __int64 *a3, _QWORD *a4, float a5)\n{\n  __int64 v5; // r14\n  _DWORD *v6; // r13\n  signed __int64 v7; // r9\n  signed __int64 v8; // r12\n  signed __int64 v9; // rsi\n  __int64 v10; // r10\n  signed int v11; // ebx\n  __int64 v12; // rbp\n  __int64 v13; // rdi\n  __int64 v14; // rax\n  char v15; // r15\n  unsigned __int8 v16; // dl\n  unsigned __int8 v17; // cl\n  unsigned __int8 v18; // cl\n  _QWORD *v19; // rax\n  __int64 v20; // rdi\n  unsigned __int8 v21; // cl\n  signed int v22; // eax\n  signed __int64 v23; // [rsp+10h] [rbp-48h]\n  __int64 *v24; // [rsp+18h] [rbp-40h]\n  _QWORD *v25; // [rsp+20h] [rbp-38h]\n\n  v25 = a4;\n  v24 = a3;\n  v23 = a2;\n  v5 = a1;\n  v6 = (_DWORD *)sub_4382F0(\"modelmakers.c\", 172LL, 4LL * *(signed int *)(a1 + 24) + 4);\n  *v6 = 0;\n  if ( *(_DWORD *)(a1 + 24) > 0 )\n  {\n    v7 = 0LL;\n    v8 = -9223372036854751231LL;\n    do\n    {\n      v9 = v7++;\n      v6[v9 + 1] = 0;\n      v10 = *(signed int *)(v5 + 28);\n      v11 = 0;\n      if ( v10 > 0 )\n      {\n        v12 = *(_QWORD *)v5;\n        v13 = v10 & 3;\n        if ( (unsigned __int64)(v10 - 1) >= 3 )\n        {\n          v14 = 0LL;\n          v11 = 0;\n          do\n          {\n            v15 = *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14) + v9);\n            if ( (unsigned __int8)(v15 - 32) <= 0x3Fu && _bittest64(&v8, (unsigned __int8)(v15 - 32)) || v15 == 126 )\n              ++v11;\n            v16 = *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 8) + v9) - 32;\n            if ( v16 <= 0x3Fu && _bittest64(&v8, v16) || *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 8) + v9) == 126 )\n              ++v11;\n            v17 = *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 16) + v9) - 32;\n            if ( v17 <= 0x3Fu && _bittest64(&v8, v17) || *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 16) + v9) == 126 )\n              ++v11;\n            v18 = *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 24) + v9) - 32;\n            if ( v18 <= 0x3Fu && _bittest64(&v8, v18) || *(_BYTE *)(*(_QWORD *)(v12 + 8 * v14 + 24) + v9) == 126 )\n              ++v11;\n            v14 += 4LL;\n          }\n          while ( v10 - v13 != v14 );\n          if ( !(v10 & 3) )\n            goto LABEL_36;\nLABEL_30:\n          v19 = (_QWORD *)(v12 + 8 * v14);\n          v20 = -v13;\n          do\n          {\n            v21 = *(_BYTE *)(*v19 + v9) - 32;\n            if ( v21 <= 0x3Fu && _bittest64(&v8, v21) || *(_BYTE *)(*v19 + v9) == 126 )\n              ++v11;\n            ++v19;\n            ++v20;\n          }\n          while ( v20 );\n          goto LABEL_36;\n        }\n        v14 = 0LL;\n        v11 = 0;\n        if ( v10 & 3 )\n          goto LABEL_30;\n      }\nLABEL_36:\n      v22 = 1;\n      if ( (float)((float)v11 / (float)(signed int)v10) > a5 )\n        v22 = 8;\n      v6[v9 + 1] = v22;\n    }\n    while ( v7 < *(signed int *)(v5 + 24) );\n  }\n  sub_416F90((__int64 *)v5, v23, (__int64)v6, v24, v25);\n  free(v6);\n}\n", 
            "funcStartAddr": "0x417c90L", 
            "funcEndAddr": "0x417edeL", 
            "funcName": "sub_417C90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_417EE0(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, _QWORD *a6, double a7, float a8, float a9)\n{\n  __int64 *v9; // r12\n  _QWORD *v10; // r13\n  __int64 v11; // rbx\n  __int64 v12; // rax\n  __int64 v13; // rax\n  int v14; // eax\n  __int64 v15; // rbx\n  signed __int64 v16; // r14\n  signed __int64 v17; // r15\n  signed __int64 v18; // rbp\n  __int64 v19; // r12\n  char v20; // al\n  __int64 v21; // rdi\n  char v22; // cl\n  unsigned __int8 v23; // dl\n  float v24; // xmm0_4\n  int v25; // eax\n  _DWORD *v26; // r14\n  signed __int64 v27; // rbx\n  signed __int64 v28; // xmm2_8\n  float v29; // xmm1_4\n  double v30; // xmm0_8\n  int v31; // xmm0_4\n  float v32; // xmm0_4\n  float v33; // xmm1_4\n  __int64 v34; // rax\n  signed __int64 v35; // rbx\n  float v36; // ST04_4\n  float v37; // xmm0_4\n  int v38; // eax\n  float v39; // xmm3_4\n  float v40; // xmm2_4\n  float v41; // xmm1_4\n  float v42; // xmm3_4\n  __int64 v43; // r15\n  __int64 v44; // r11\n  signed __int64 v45; // rdi\n  __int64 v46; // rbp\n  __int64 v47; // rcx\n  signed int v48; // edx\n  _QWORD *v49; // rcx\n  signed __int64 v50; // rbp\n  unsigned __int8 v51; // al\n  unsigned __int8 v52; // bl\n  unsigned __int8 v53; // al\n  unsigned __int8 v54; // al\n  unsigned __int8 v55; // al\n  unsigned int v56; // ecx\n  bool v57; // zf\n  bool v58; // sf\n  unsigned __int8 v59; // of\n  __int64 v60; // rcx\n  int v61; // esi\n  signed __int64 v62; // rcx\n  signed __int64 v63; // rdx\n  signed __int64 v64; // rsi\n  __int64 v65; // rdi\n  unsigned __int8 v66; // bl\n  __int64 v67; // rdx\n  __int64 v68; // rsi\n  signed __int64 v69; // rbx\n  __int64 *v70; // r14\n  __int64 v71; // rbp\n  float v72; // xmm1_4\n  double v73; // xmm0_8\n  int v74; // xmm0_4\n  float v75; // xmm0_4\n  __int64 v76; // r13\n  __int64 v77; // rax\n  __int64 v78; // r14\n  __int64 v79; // r12\n  __int64 v80; // rbp\n  signed __int64 v81; // r9\n  __int64 v82; // rcx\n  char v83; // dl\n  int v84; // edx\n  __int64 v85; // rsi\n  char v86; // al\n  unsigned __int8 v87; // al\n  char v88; // dl\n  double v89; // xmm0_8\n  float v90; // xmm0_4\n  double v91; // xmm0_8\n  float v92; // xmm0_4\n  double v93; // xmm0_8\n  float v94; // xmm0_4\n  double v95; // xmm0_8\n  float v96; // xmm0_4\n  double v97; // xmm0_8\n  float v98; // xmm0_4\n  double v99; // xmm0_8\n  float v100; // xmm0_4\n  double v101; // xmm0_8\n  float v102; // xmm0_4\n  float v103; // xmm0_4\n  float v104; // ST04_4\n  __int64 v105; // rax\n  signed __int64 v106; // rcx\n  signed __int64 v107; // rbp\n  unsigned __int8 v108; // dl\n  __int64 *v109; // r12\n  __int64 v110; // r11\n  int v111; // er14\n  float v112; // xmm0_4\n  signed __int64 v113; // rsi\n  signed __int64 v114; // rdi\n  float v115; // xmm1_4\n  __int64 v116; // rbp\n  __int64 v117; // rcx\n  unsigned __int8 v118; // al\n  int v119; // xmm2_4\n  float v120; // xmm1_4\n  unsigned __int8 v121; // al\n  int v122; // xmm2_4\n  float v123; // xmm1_4\n  unsigned __int8 v124; // al\n  int v125; // xmm2_4\n  float v126; // xmm1_4\n  unsigned __int8 v127; // al\n  int v128; // xmm2_4\n  _QWORD *v129; // rcx\n  signed __int64 v130; // rbx\n  int v131; // xmm2_4\n  unsigned __int8 v132; // al\n  _DWORD *v133; // rbp\n  signed __int64 v134; // rax\n  _DWORD *i; // r15\n  signed __int64 v136; // rbx\n  float v137; // [rsp+8h] [rbp-210h]\n  float v138; // [rsp+14h] [rbp-204h]\n  float v139; // [rsp+14h] [rbp-204h]\n  __int64 *v140; // [rsp+18h] [rbp-200h]\n  _DWORD *ptr; // [rsp+20h] [rbp-1F8h]\n  __int64 v142; // [rsp+28h] [rbp-1F0h]\n  __int64 v143; // [rsp+30h] [rbp-1E8h]\n  _DWORD *v144; // [rsp+38h] [rbp-1E0h]\n  float v145; // [rsp+40h] [rbp-1D8h]\n  float v146; // [rsp+44h] [rbp-1D4h]\n  float v147; // [rsp+48h] [rbp-1D0h]\n  float v148; // [rsp+4Ch] [rbp-1CCh]\n  float v149; // [rsp+50h] [rbp-1C8h]\n  float v150; // [rsp+54h] [rbp-1C4h]\n  float v151; // [rsp+58h] [rbp-1C0h]\n  float v152; // [rsp+60h] [rbp-1B8h]\n  float v153; // [rsp+64h] [rbp-1B4h]\n  float v154; // [rsp+68h] [rbp-1B0h]\n  float v155; // [rsp+6Ch] [rbp-1ACh]\n  float v156; // [rsp+70h] [rbp-1A8h]\n  float v157; // [rsp+74h] [rbp-1A4h]\n  float v158; // [rsp+78h] [rbp-1A0h]\n  void *v159; // [rsp+88h] [rbp-190h]\n  __int64 v160; // [rsp+90h] [rbp-188h]\n  float v161; // [rsp+9Ch] [rbp-17Ch]\n  int v162; // [rsp+A0h] [rbp-178h]\n  int v163; // [rsp+A4h] [rbp-174h]\n  __int64 v164; // [rsp+A8h] [rbp-170h]\n  _QWORD *v165; // [rsp+B0h] [rbp-168h]\n  __int64 v166; // [rsp+B8h] [rbp-160h]\n  void *v167; // [rsp+C0h] [rbp-158h]\n  __int64 v168; // [rsp+C8h] [rbp-150h]\n  __int64 *v169; // [rsp+D0h] [rbp-148h]\n  _QWORD *v170; // [rsp+D8h] [rbp-140h]\n  __int64 v171; // [rsp+E0h] [rbp-138h]\n  __int64 v172; // [rsp+E8h] [rbp-130h]\n  int v173[20]; // [rsp+F0h] [rbp-128h]\n  int src[20]; // [rsp+140h] [rbp-D8h]\n  char v175; // [rsp+190h] [rbp-88h]\n\n  v170 = a6;\n  v169 = a5;\n  v137 = a8;\n  v164 = a4;\n  v143 = a3;\n  v168 = a2;\n  v9 = a1;\n  v10 = (_QWORD *)sub_4382F0(\"modelmakers.c\", 255LL, 8LL * *((signed int *)a1 + 6) + 8);\n  ptr = (_DWORD *)sub_4382F0(\"modelmakers.c\", 256LL, 4LL * *((signed int *)a1 + 6) + 8);\n  v159 = (void *)sub_4382F0(\"modelmakers.c\", 257LL, 4LL * *((signed int *)a1 + 6) + 8);\n  v167 = (void *)sub_4382F0(\"modelmakers.c\", 258LL, 4LL * *((signed int *)a1 + 6) + 4);\n  v144 = (_DWORD *)sub_4382F0(\"modelmakers.c\", 259LL, 4LL * *((signed int *)a1 + 7));\n  v140 = a1;\n  if ( *((_DWORD *)a1 + 6) > 0 )\n  {\n    v11 = 0LL;\n    do\n    {\n      v12 = sub_4382F0(\"modelmakers.c\", 261LL, 4LL * dword_464000);\n      v10[v11++ + 1] = v12;\n      sub_43C860(v12, (unsigned int)dword_464000);\n      v13 = *((signed int *)a1 + 6);\n    }\n    while ( v11 < v13 );\n    if ( (signed int)v13 > 0 )\n    {\n      v14 = *((_DWORD *)a1 + 7);\n      v15 = 0LL;\n      v16 = -9223372036854751231LL;\n      do\n      {\n        v17 = v15 + 1;\n        if ( v14 > 0 )\n        {\n          v18 = 0LL;\n          do\n          {\n            v22 = *(_BYTE *)(*(_QWORD *)(*v9 + 8 * v18) + v15);\n            v23 = *(_BYTE *)(*(_QWORD *)(*v9 + 8 * v18) + v15) - 32;\n            if ( (v23 > 0x3Fu || !_bittest64(&v16, v23)) && v22 != 126 )\n            {\n              v19 = v10[v15 + 1];\n              v20 = sub_402540(v22);\n              v21 = v19;\n              v9 = v140;\n              sub_4028B0(v21, v20, *(float *)(v140[2] + 4 * v18));\n              v14 = *((_DWORD *)v140 + 7);\n            }\n            ++v18;\n          }\n          while ( v18 < v14 );\n        }\n        ++v15;\n      }\n      while ( v17 < *((signed int *)v9 + 6) );\n    }\n  }\n  if ( a9 <= 0.0 )\n    v24 = -9999.0;\n  else\n    v24 = log(a9) * 1.44269504;\n  v138 = v24;\n  sub_43D180(v173, v143 + 24016, (unsigned int)dword_464000);\n  sub_43DC80(v173, (unsigned int)dword_464000);\n  sub_43CBE0(v9[2], *((unsigned int *)v9 + 7));\n  v161 = v24;\n  v25 = dword_464000;\n  v26 = v159;\n  if ( dword_464000 > 0 )\n  {\n    v27 = 0LL;\n    v28 = -4556649414143246336LL;\n    do\n    {\n      v29 = *(float *)&v173[v27] / *(float *)(v164 + 4 * v27);\n      v30 = *(double *)&v28;\n      if ( v29 > 0.0 )\n      {\n        v28 = -4556649414143246336LL;\n        v30 = log(v29) * 1.44269504;\n        v25 = dword_464000;\n      }\n      *(float *)&v31 = v30;\n      v173[v27++] = v31;\n    }\n    while ( v27 < v25 );\n  }\n  v32 = 0.0;\n  v33 = 0.0;\n  if ( *((_DWORD *)v9 + 7) > 0 )\n  {\n    v34 = v9[2];\n    v33 = 0.0;\n    v35 = 0LL;\n    v32 = 0.0;\n    do\n    {\n      v36 = v32;\n      LODWORD(v160) = *(_DWORD *)(v34 + 4 * v35);\n      v37 = (float)(signed int)sub_425050(*(_QWORD *)(*v9 + 8 * v35)) * *(float *)&v160;\n      v34 = v9[2];\n      v33 = v33 + *(float *)(v34 + 4 * v35);\n      v32 = v36 + v37;\n      ++v35;\n    }\n    while ( v35 < *((signed int *)v9 + 7) );\n  }\n  v38 = (signed int)(float)(v32 / v33) - 1;\n  v39 = 0.5 / (float)v38;\n  v40 = -9999.0;\n  v41 = -9999.0;\n  if ( (float)(0.5 / v137) > 0.0 )\n  {\n    v39 = 0.5 / (float)v38;\n    v40 = -9999.0;\n    v41 = log((float)(0.5 / v137)) * 1.44269504;\n  }\n  v162 = LODWORD(v41);\n  v42 = v39 / v137;\n  if ( v42 > 0.0 )\n    v40 = log(v42) * 1.44269504;\n  v43 = *((signed int *)v9 + 6);\n  if ( v43 > 0 )\n  {\n    v44 = *((signed int *)v9 + 7);\n    v45 = -9223372036854751231LL;\n    while ( 1 )\n    {\n      if ( (signed int)v44 <= 0 )\n      {\n        v48 = 0;\n      }\n      else\n      {\n        v46 = *v9;\n        v47 = 0LL;\n        v48 = 0;\n        if ( (unsigned __int64)(v44 - 1) >= 3 )\n        {\n          do\n          {\n            v52 = *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47) + v43 - 1) - 32;\n            if ( v52 <= 0x3Fu && _bittest64(&v45, v52) || *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47) + v43 - 1) == 126 )\n              ++v48;\n            v53 = *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 8) + v43 - 1) - 32;\n            if ( v53 <= 0x3Fu && _bittest64(&v45, v53) || *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 8) + v43 - 1) == 126 )\n              ++v48;\n            v54 = *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 16) + v43 - 1) - 32;\n            if ( v54 <= 0x3Fu && _bittest64(&v45, v54) || *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 16) + v43 - 1) == 126 )\n              ++v48;\n            v55 = *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 24) + v43 - 1) - 32;\n            if ( v55 <= 0x3Fu && _bittest64(&v45, v55) || *(_BYTE *)(*(_QWORD *)(v46 + 8 * v47 + 24) + v43 - 1) == 126 )\n              ++v48;\n            v47 += 4LL;\n          }\n          while ( *((signed int *)v9 + 7) - (unsigned __int64)(*((_DWORD *)v9 + 7) & 3) != v47 );\n        }\n        if ( *((_DWORD *)v9 + 7) & 3 )\n        {\n          v49 = (_QWORD *)(v46 + 8 * v47);\n          v50 = -(signed __int64)(*((_DWORD *)v9 + 7) & 3);\n          do\n          {\n            v51 = *(_BYTE *)(*v49 + v43 - 1) - 32;\n            if ( v51 <= 0x3Fu && _bittest64(&v45, v51) || *(_BYTE *)(*v49 + v43 - 1) == 126 )\n              ++v48;\n            ++v49;\n            ++v50;\n          }\n          while ( v50 );\n        }\n      }\n      if ( (float)((float)v48 / (float)(signed int)v44) <= 0.5 )\n        break;\n      v56 = v43 - 1;\n      v59 = __OFSUB__(v43, 1LL);\n      v57 = v43 == 1;\n      v58 = v43-- - 1 < 0;\n      if ( (unsigned __int8)(v58 ^ v59) | v57 )\n      {\n        v43 = v56;\n        break;\n      }\n    }\n  }\n  v60 = (signed int)v43;\n  ptr[v60] = 0;\n  v142 = (signed int)v43;\n  v26[v60] = 0;\n  v61 = *((_DWORD *)v9 + 7);\n  if ( v61 > 0 )\n  {\n    v62 = 0LL;\n    v63 = -9223372036854751231LL;\n    do\n    {\n      if ( (signed int)v43 > 0 )\n      {\n        v64 = (signed int)v43 + 1LL;\n        do\n        {\n          v65 = *(_QWORD *)(*v9 + 8 * v62);\n          v66 = *(_BYTE *)(v65 + v64 - 2) - 32;\n          if ( (v66 > 0x3Fu || !_bittest64(&v63, v66)) && *(_BYTE *)(v65 + v64 - 2) != 126 )\n            break;\n          *(_BYTE *)(v65 + v64-- - 2) = 95;\n        }\n        while ( v64 > 1 );\n        v61 = *((_DWORD *)v9 + 7);\n      }\n      ++v62;\n    }\n    while ( v62 < v61 );\n  }\n  v163 = LODWORD(v40);\n  v166 = v43;\n  if ( (signed int)v43 >= 2 )\n  {\n    v172 = v143 + 6412;\n    v171 = v143 + 7212;\n    v139 = v138 * v161;\n    v160 = v143 + 8;\n    v43 = (signed int)v43;\n    v165 = v10;\n    while ( 1 )\n    {\n      sub_43D180(src, v10[v43 - 1], (unsigned int)dword_464000);\n      v67 = *(unsigned int *)(v143 + 6408);\n      sub_41F5B0(src);\n      v68 = (unsigned int)dword_464000;\n      if ( dword_464000 <= 0 )\n      {\n        v70 = v140;\n      }\n      else\n      {\n        v69 = 0LL;\n        v70 = v140;\n        v71 = v164;\n        do\n        {\n          v72 = *(float *)&src[v69] / *(float *)(v71 + 4 * v69);\n          v73 = -9999.0;\n          if ( v72 > 0.0 )\n          {\n            v73 = log(v72) * 1.44269504;\n            v68 = (unsigned int)dword_464000;\n          }\n          *(float *)&v74 = v73;\n          src[v69++] = v74;\n        }\n        while ( v69 < (signed int)v68 );\n      }\n      v75 = 0.0;\n      sub_43C860(&v175, v68);\n      LODWORD(v76) = *((_DWORD *)v70 + 7);\n      if ( (signed int)v76 > 0 )\n      {\n        v77 = 0LL;\n        do\n        {\n          v144[v77++] = 0;\n          v76 = *((signed int *)v70 + 7);\n        }\n        while ( v77 < v76 );\n      }\n      ptr[v43 - 1] = -8388609;\n      if ( v43 <= v142 )\n        break;\nLABEL_145:\n      v10 = v165;\n      sub_43D3E0(src, v165[v43 - 1], (unsigned int)dword_464000);\n      *(float *)&ptr[v43 - 1] = (float)(v75 + v139) + *(float *)&ptr[v43 - 1];\n      v59 = __OFSUB__(v43, 2LL);\n      v57 = v43 == 2;\n      v58 = v43-- - 2 < 0;\n      if ( (unsigned __int8)(v58 ^ v59) | v57 )\n        goto LABEL_146;\n    }\n    v78 = v43;\n    while ( 1 )\n    {\n      v79 = *v140;\n      v80 = v140[2];\n      v75 = 0.0;\n      sub_43C860(&v145, 8LL);\n      v81 = -9223372036854751231LL;\n      if ( (signed int)v76 > 0 )\n        break;\nLABEL_121:\n      sub_43D180(&v152, &v145, 7LL);\n      sub_41F2A0(&v152, v143, v160);\n      sub_43DC80(&v152, 3LL);\n      v89 = -9999.0;\n      if ( (float)(v152 / v137) > 0.0 )\n        v89 = log((float)(v152 / v137)) * 1.44269504;\n      v90 = v89;\n      v152 = v90;\n      v91 = -9999.0;\n      if ( (float)(v153 / v137) > 0.0 )\n        v91 = log((float)(v153 / v137)) * 1.44269504;\n      v92 = v91;\n      v153 = v92;\n      v93 = -9999.0;\n      if ( v154 > 0.0 )\n        v93 = log(v154) * 1.44269504;\n      v94 = v93;\n      v154 = v94;\n      v95 = -9999.0;\n      if ( (float)(v155 / v137) > 0.0 )\n        v95 = log((float)(v155 / v137)) * 1.44269504;\n      v96 = v95;\n      v155 = v96;\n      v97 = -9999.0;\n      if ( (float)(v156 / v137) > 0.0 )\n        v97 = log((float)(v156 / v137)) * 1.44269504;\n      v98 = v97;\n      v156 = v98;\n      v99 = -9999.0;\n      if ( (float)(v157 / v137) > 0.0 )\n        v99 = log((float)(v157 / v137)) * 1.44269504;\n      v100 = v99;\n      v157 = v100;\n      v101 = -9999.0;\n      if ( v158 > 0.0 )\n        v101 = log(v158) * 1.44269504;\n      v102 = v101;\n      v158 = v102;\n      v103 = *(float *)&ptr[v78];\n      v104 = *(float *)&ptr[v78];\n      sub_43D3E0(&v152, &v145, 7LL);\n      sub_43D3E0(v173, &v175, (unsigned int)dword_464000);\n      v75 = (float)(v103 + v104) + (float)(v103 + v104);\n      if ( v75 > *(float *)&ptr[v43 - 1] )\n      {\n        *(float *)&ptr[v43 - 1] = v75;\n        *((_DWORD *)v159 + v43 - 1) = v78;\n      }\nLABEL_137:\n      sub_43CE20(&v175, v165[v78], (unsigned int)dword_464000);\n      LODWORD(v76) = *((_DWORD *)v140 + 7);\n      if ( (signed int)v76 > 0 )\n      {\n        v105 = *v140;\n        v106 = 0LL;\n        v107 = -9223372036854751231LL;\n        do\n        {\n          v108 = *(_BYTE *)(*(_QWORD *)(v105 + 8 * v106) + v78 - 1) - 32;\n          if ( (v108 > 0x3Fu || !_bittest64(&v107, v108)) && *(_BYTE *)(*(_QWORD *)(v105 + 8 * v106) + v78 - 1) != 126 )\n          {\n            ++v144[v106];\n            LODWORD(v76) = *((_DWORD *)v140 + 7);\n          }\n          ++v106;\n        }\n        while ( v106 < (signed int)v76 );\n      }\n      v59 = __OFSUB__(v78, v142);\n      v58 = v78++ - v142 < 0;\n      if ( !(v58 ^ v59) )\n        goto LABEL_145;\n    }\n    v82 = 0LL;\n    while ( 1 )\n    {\n      v84 = v144[v82];\n      v85 = *(_QWORD *)(v79 + 8 * v82);\n      v86 = *(_BYTE *)(v85 + v43 - 2);\n      if ( v84 <= 0 )\n      {\n        if ( (unsigned __int8)(v86 - 32) <= 0x3Fu && _bittest64(&v81, (unsigned __int8)(v86 - 32)) || v86 == 126 )\n        {\n          v88 = *(_BYTE *)(v85 + v78 - 1);\n          if ( v88 > 94 )\n          {\n            if ( v88 == 95 )\n              goto LABEL_120;\n            if ( v88 == 126 )\n              goto LABEL_119;\n          }\n          else if ( (unsigned __int8)(v88 - 45) < 2u || v88 == 32 )\n          {\nLABEL_119:\n            v75 = *(float *)(v80 + 4 * v82) + v151;\n            v151 = *(float *)(v80 + 4 * v82) + v151;\n            goto LABEL_120;\n          }\n          v75 = *(float *)(v80 + 4 * v82) + v150;\n          v150 = *(float *)(v80 + 4 * v82) + v150;\n        }\n        else\n        {\n          v83 = *(_BYTE *)(v85 + v78 - 1);\n          if ( v83 > 94 )\n          {\n            if ( v83 == 95 )\n              goto LABEL_120;\n            if ( v83 == 126 )\n              goto LABEL_101;\n          }\n          else if ( (unsigned __int8)(v83 - 45) < 2u || v83 == 32 )\n          {\nLABEL_101:\n            v75 = *(float *)(v80 + 4 * v82) + v147;\n            v147 = *(float *)(v80 + 4 * v82) + v147;\n            goto LABEL_120;\n          }\n          v75 = *(float *)(v80 + 4 * v82) + v145;\n          v145 = *(float *)(v80 + 4 * v82) + v145;\n        }\n      }\n      else\n      {\n        if ( (unsigned __int8)(v86 - 32) <= 0x3Fu && _bittest64(&v81, (unsigned __int8)(v86 - 32)) || v86 == 126 )\n          goto LABEL_145;\n        v87 = *(_BYTE *)(v85 + v78 - 1) - 32;\n        if ( v87 <= 0x3Fu && _bittest64(&v81, v87) || *(_BYTE *)(v85 + v78 - 1) == 126 )\n          goto LABEL_137;\n        v146 = *(float *)(v80 + 4 * v82) + v146;\n        v149 = (float)((float)(v84 - 1) * *(float *)(v80 + 4 * v82)) + v149;\n        v75 = *(float *)(v80 + 4 * v82) + v148;\n        v148 = *(float *)(v80 + 4 * v82) + v148;\n      }\nLABEL_120:\n      if ( ++v82 >= (signed int)v76 )\n        goto LABEL_121;\n    }\n  }\nLABEL_146:\n  if ( (signed int)v166 <= 0 )\n  {\n    v111 = 0;\n    v109 = v140;\n  }\n  else\n  {\n    v109 = v140;\n    v110 = *((signed int *)v140 + 7);\n    v111 = 0;\n    v112 = -3.4028235e38;\n    v113 = 1LL;\n    v114 = -9223372036854751231LL;\n    do\n    {\n      v115 = *(float *)&ptr[v113];\n      if ( (signed int)v110 > 0 )\n      {\n        v116 = *v140;\n        v117 = 0LL;\n        if ( (unsigned __int64)(v110 - 1) >= 3 )\n        {\n          do\n          {\n            v118 = *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117) + v113 - 1) - 32;\n            if ( v118 > 0x3Fu || (v119 = v163, !_bittest64(&v114, v118)) )\n            {\n              v119 = v163;\n              if ( *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117) + v113 - 1) != 126 )\n                v119 = v162;\n            }\n            v120 = v115 + *(float *)&v119;\n            v121 = *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 8) + v113 - 1) - 32;\n            if ( v121 > 0x3Fu || (v122 = v163, !_bittest64(&v114, v121)) )\n            {\n              v122 = v163;\n              if ( *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 8) + v113 - 1) != 126 )\n                v122 = v162;\n            }\n            v123 = v120 + *(float *)&v122;\n            v124 = *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 16) + v113 - 1) - 32;\n            if ( v124 > 0x3Fu || (v125 = v163, !_bittest64(&v114, v124)) )\n            {\n              v125 = v163;\n              if ( *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 16) + v113 - 1) != 126 )\n                v125 = v162;\n            }\n            v126 = v123 + *(float *)&v125;\n            v127 = *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 24) + v113 - 1) - 32;\n            if ( v127 > 0x3Fu || (v128 = v163, !_bittest64(&v114, v127)) )\n            {\n              v128 = v163;\n              if ( *(_BYTE *)(*(_QWORD *)(v116 + 8 * v117 + 24) + v113 - 1) != 126 )\n                v128 = v162;\n            }\n            v115 = v126 + *(float *)&v128;\n            v117 += 4LL;\n          }\n          while ( *((signed int *)v140 + 7) - (unsigned __int64)(*((_DWORD *)v140 + 7) & 3) != v117 );\n        }\n        if ( *((_DWORD *)v140 + 7) & 3 )\n        {\n          v129 = (_QWORD *)(v116 + 8 * v117);\n          v130 = -(signed __int64)(*((_DWORD *)v140 + 7) & 3);\n          do\n          {\n            v132 = *(_BYTE *)(*v129 + v113 - 1) - 32;\n            if ( v132 > 0x3Fu || (v131 = v163, !_bittest64(&v114, v132)) )\n            {\n              v131 = v163;\n              if ( *(_BYTE *)(*v129 + v113 - 1) != 126 )\n                v131 = v162;\n            }\n            v115 = v115 + *(float *)&v131;\n            ++v129;\n            ++v130;\n          }\n          while ( v130 );\n        }\n      }\n      if ( v115 > v112 )\n        v111 = v113;\n      ++v113;\n      v112 = fmaxf(v115, v112);\n    }\n    while ( v113 != (_DWORD)v166 + 1 );\n  }\n  v133 = v167;\n  *(_DWORD *)v167 = 0;\n  if ( *((_DWORD *)v109 + 6) > 0 )\n  {\n    v134 = 0LL;\n    do\n      v133[v134++ + 1] = 8;\n    while ( v134 < *((signed int *)v109 + 6) );\n  }\n  for ( i = v159; v111; v111 = i[v111] )\n    v133[v111] = v133[v111] & 0xFFFFFFF6 | 1;\n  sub_416F90(v109, v168, (__int64)v133, v169, v170);\n  if ( *((_DWORD *)v109 + 6) > 0 )\n  {\n    v136 = 0LL;\n    do\n      free((void *)v10[v136++ + 1]);\n    while ( v136 < *((signed int *)v109 + 6) );\n  }\n  free(v10);\n  free(ptr);\n  free(i);\n  free(v133);\n  free(v144);\n}\n", 
            "funcStartAddr": "0x417ee0L", 
            "funcEndAddr": "0x418ec6L", 
            "funcName": "sub_417EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418ED0(unsigned int a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbx\n\n  v1 = sub_4382F0(\"plan7.c\", 54LL, 464LL);\n  v2 = v1;\n  *(_OWORD *)(v1 + 44) = 0LL;\n  *(_OWORD *)(v1 + 32) = 0LL;\n  *(_OWORD *)(v1 + 16) = 0LL;\n  *(_OWORD *)v1 = 0LL;\n  *(_OWORD *)(v1 + 64) = 0LL;\n  *(_DWORD *)(v1 + 80) = 0;\n  *(_OWORD *)(v1 + 120) = 0LL;\n  *(_OWORD *)(v1 + 104) = 0LL;\n  *(_OWORD *)(v1 + 88) = 0LL;\n  *(_DWORD *)(v1 + 136) = 0;\n  *(_OWORD *)(v1 + 144) = 0LL;\n  *(_QWORD *)(v1 + 160) = 0LL;\n  *(_OWORD *)(v1 + 208) = 0LL;\n  *(_OWORD *)(v1 + 312) = 0LL;\n  *(_QWORD *)(v1 + 328) = 0LL;\n  *(_OWORD *)(v1 + 384) = 0LL;\n  *(_OWORD *)(v1 + 368) = 0LL;\n  *(_OWORD *)(v1 + 424) = 0LL;\n  *(_OWORD *)(v1 + 408) = 0LL;\n  *(_DWORD *)(v1 + 440) = -987654321;\n  *(_DWORD *)(v1 + 444) = -987654321;\n  *(_DWORD *)(v1 + 448) = 0;\n  *(_DWORD *)(v1 + 452) = 0;\n  *(_DWORD *)(v1 + 456) = 0;\n  sub_419080(v1, a1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x418ed0L", 
            "funcEndAddr": "0x418facL", 
            "funcName": "sub_418ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_418FB0()\n{\n  __int64 result; // rax\n\n  result = sub_4382F0(\"plan7.c\", 54LL, 464LL);\n  *(_OWORD *)(result + 44) = 0LL;\n  *(_OWORD *)(result + 32) = 0LL;\n  *(_OWORD *)(result + 16) = 0LL;\n  *(_OWORD *)result = 0LL;\n  *(_OWORD *)(result + 64) = 0LL;\n  *(_DWORD *)(result + 80) = 0;\n  *(_OWORD *)(result + 120) = 0LL;\n  *(_OWORD *)(result + 104) = 0LL;\n  *(_OWORD *)(result + 88) = 0LL;\n  *(_DWORD *)(result + 136) = 0;\n  *(_OWORD *)(result + 144) = 0LL;\n  *(_QWORD *)(result + 160) = 0LL;\n  *(_OWORD *)(result + 208) = 0LL;\n  *(_OWORD *)(result + 312) = 0LL;\n  *(_QWORD *)(result + 328) = 0LL;\n  *(_OWORD *)(result + 384) = 0LL;\n  *(_OWORD *)(result + 368) = 0LL;\n  *(_OWORD *)(result + 424) = 0LL;\n  *(_OWORD *)(result + 408) = 0LL;\n  *(_DWORD *)(result + 440) = -987654321;\n  *(_DWORD *)(result + 444) = -987654321;\n  *(_DWORD *)(result + 448) = 0;\n  *(_DWORD *)(result + 452) = 0;\n  *(_DWORD *)(result + 456) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x418fb0L", 
            "funcEndAddr": "0x419073L", 
            "funcName": "sub_418FB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419080(__int64 a1, int a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // r15\n  signed __int64 v4; // r13\n  signed __int64 v5; // r12\n  signed __int64 v6; // r15\n  signed __int64 v7; // rbp\n  signed __int64 v8; // rcx\n  unsigned int v9; // edx\n  signed int v10; // esi\n  signed __int64 v11; // rdi\n  signed __int64 v12; // rax\n  signed __int64 v13; // r12\n  signed __int64 v14; // rcx\n  __int64 v15; // rdx\n  signed __int64 v16; // rsi\n  signed __int64 v17; // rdi\n  _DWORD **v18; // rax\n  __int64 result; // rax\n  signed __int64 v20; // [rsp+10h] [rbp-38h]\n\n  v2 = a1;\n  *(_DWORD *)(a1 + 136) = a2;\n  v3 = a2 + 2;\n  *(_QWORD *)(a1 + 24) = sub_4382F0(\"plan7.c\", 111LL, v3);\n  *(_QWORD *)(a1 + 32) = sub_4382F0(\"plan7.c\", 112LL, v3);\n  *(_QWORD *)(a1 + 40) = sub_4382F0(\"plan7.c\", 113LL, v3);\n  v4 = a2;\n  v5 = a2 + 1LL;\n  v20 = 4LL * a2 + 4;\n  *(_QWORD *)(a1 + 72) = sub_4382F0(\"plan7.c\", 114LL, v20);\n  v6 = 8LL * a2;\n  *(_QWORD *)(a1 + 144) = sub_4382F0(\"plan7.c\", 116LL, 8LL * a2);\n  *(_QWORD *)(a1 + 152) = sub_4382F0(\"plan7.c\", 117LL, 8LL * a2 + 8);\n  *(_QWORD *)(a1 + 160) = sub_4382F0(\"plan7.c\", 118LL, 8LL * a2);\n  v7 = 28LL * a2;\n  **(_QWORD **)(a1 + 144) = sub_4382F0(\"plan7.c\", 119LL, v7);\n  **(_QWORD **)(a1 + 152) = sub_4382F0(\"plan7.c\", 120LL, 4LL * (20 * a2 + 20));\n  **(_QWORD **)(a1 + 160) = sub_4382F0(\"plan7.c\", 121LL, 80LL * a2);\n  *(_QWORD *)(a1 + 312) = sub_4382F0(\"plan7.c\", 123LL, 56LL);\n  *(_QWORD *)(a1 + 320) = sub_4382F0(\"plan7.c\", 124LL, 192LL);\n  *(_QWORD *)(a1 + 328) = sub_4382F0(\"plan7.c\", 125LL, 192LL);\n  *(_QWORD *)(a1 + 384) = sub_4382F0(\"plan7.c\", 126LL, v7);\n  *(_QWORD *)(a1 + 392) = sub_4382F0(\"plan7.c\", 127LL, 4LL * (24 * a2 + 24));\n  *(_QWORD *)(a1 + 400) = sub_4382F0(\"plan7.c\", 128LL, 96LL * a2);\n  **(_QWORD **)(v2 + 312) = *(_QWORD *)(v2 + 384);\n  **(_QWORD **)(v2 + 320) = *(_QWORD *)(v2 + 392);\n  **(_QWORD **)(v2 + 328) = *(_QWORD *)(v2 + 400);\n  if ( a2 > 0 )\n  {\n    v8 = 1LL;\n    v9 = 7;\n    v10 = 20;\n    do\n    {\n      v11 = 4LL * (v10 & 0xFFFFFFFC);\n      *(_QWORD *)(*(_QWORD *)(v2 + 152) + 8 * v8) = v11 + **(_QWORD **)(v2 + 152);\n      if ( v8 < v4 )\n      {\n        *(_QWORD *)(*(_QWORD *)(v2 + 160) + 8 * v8) = **(_QWORD **)(v2 + 160) + v11;\n        *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8 * v8) = **(_QWORD **)(v2 + 144) + 4LL * v9;\n      }\n      ++v8;\n      v9 += 7;\n      v10 += 20;\n    }\n    while ( (unsigned int)v5 != v8 );\n  }\n  v12 = 4 * v5;\n  v13 = 8 * v5;\n  v14 = 4 * v4;\n  v15 = 0LL;\n  v16 = v13;\n  v17 = 8 * v4;\n  while ( 1 )\n  {\n    *(_QWORD *)(*(_QWORD *)(v2 + 320) + v15 + 8) = v12 + **(_QWORD **)(v2 + 320);\n    *(_QWORD *)(*(_QWORD *)(v2 + 328) + v15 + 8) = v14 + **(_QWORD **)(v2 + 328);\n    if ( v15 == 176 )\n      break;\n    *(_QWORD *)(*(_QWORD *)(v2 + 320) + v15 + 16) = v16 + **(_QWORD **)(v2 + 320);\n    *(_QWORD *)(*(_QWORD *)(v2 + 328) + v15 + 16) = v17 + **(_QWORD **)(v2 + 328);\n    v15 += 16LL;\n    v12 += v13;\n    v14 += v6;\n    v17 += v6;\n    v16 += v13;\n  }\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 8LL) = **(_QWORD **)(v2 + 312) + 4 * v4;\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 16LL) = **(_QWORD **)(v2 + 312) + 8 * v4;\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 24LL) = **(_QWORD **)(v2 + 312) + 12 * v4;\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 32LL) = **(_QWORD **)(v2 + 312) + 16 * v4;\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 40LL) = **(_QWORD **)(v2 + 312) + 20 * v4;\n  *(_QWORD *)(*(_QWORD *)(v2 + 312) + 48LL) = **(_QWORD **)(v2 + 312) + 24 * v4;\n  v18 = *(_DWORD ***)(v2 + 312);\n  **v18 = -987654321;\n  *v18[1] = -987654321;\n  *v18[2] = -987654321;\n  *v18[3] = -987654321;\n  *v18[4] = -987654321;\n  *v18[5] = -987654321;\n  *v18[6] = -987654321;\n  *(_QWORD *)(v2 + 208) = sub_4382F0(\"plan7.c\", 157LL, v20);\n  *(_QWORD *)(v2 + 216) = sub_4382F0(\"plan7.c\", 158LL, v20);\n  *(_QWORD *)(v2 + 408) = sub_4382F0(\"plan7.c\", 160LL, v20);\n  result = sub_4382F0(\"plan7.c\", 161LL, v20);\n  *(_QWORD *)(v2 + 416) = result;\n  *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 408);\n  *(_QWORD *)(v2 + 376) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x419080L", 
            "funcEndAddr": "0x41953fL", 
            "funcName": "sub_419080"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_419540(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n  void *v5; // rdi\n  void *v6; // rdi\n  void *v7; // rdi\n  void *v8; // rdi\n  void *v9; // rdi\n  void *v10; // rdi\n  void *v11; // rdi\n  void *v12; // rdi\n  void *v13; // rdi\n  void *v14; // rdi\n  void *v15; // rdi\n  void *v16; // rdi\n  void *v17; // rdi\n  void *v18; // rdi\n  void *v19; // rdi\n  void *v20; // rdi\n  void **v21; // rax\n  void **v22; // rax\n  void **v23; // rax\n  void *v24; // rdi\n  void *v25; // rdi\n  void *v26; // rdi\n  void *v27; // rdi\n  void *v28; // rdi\n  void *v29; // rdi\n  void *v30; // rdi\n  void *v31; // rdi\n\n  v1 = ptr;\n  v2 = *(void **)ptr;\n  if ( v2 )\n    free(v2);\n  v3 = (void *)v1[1];\n  if ( v3 )\n    free(v3);\n  v4 = (void *)v1[2];\n  if ( v4 )\n    free(v4);\n  v5 = (void *)v1[3];\n  if ( v5 )\n    free(v5);\n  v6 = (void *)v1[4];\n  if ( v6 )\n    free(v6);\n  v7 = (void *)v1[5];\n  if ( v7 )\n    free(v7);\n  v8 = (void *)v1[6];\n  if ( v8 )\n    free(v8);\n  v9 = (void *)v1[8];\n  if ( v9 )\n    free(v9);\n  v10 = (void *)v1[9];\n  if ( v10 )\n    free(v10);\n  v11 = (void *)v1[11];\n  if ( v11 )\n    free(v11);\n  v12 = (void *)v1[12];\n  if ( v12 )\n    free(v12);\n  v13 = (void *)v1[13];\n  if ( v13 )\n    free(v13);\n  v14 = (void *)v1[51];\n  if ( v14 )\n    free(v14);\n  v15 = (void *)v1[26];\n  if ( v15 )\n    free(v15);\n  v16 = (void *)v1[52];\n  if ( v16 )\n    free(v16);\n  v17 = (void *)v1[27];\n  if ( v17 )\n    free(v17);\n  v18 = (void *)v1[49];\n  if ( v18 )\n    free(v18);\n  v19 = (void *)v1[50];\n  if ( v19 )\n    free(v19);\n  v20 = (void *)v1[48];\n  if ( v20 )\n    free(v20);\n  v21 = (void **)v1[19];\n  if ( v21 )\n    free(*v21);\n  v22 = (void **)v1[20];\n  if ( v22 )\n    free(*v22);\n  v23 = (void **)v1[18];\n  if ( v23 )\n    free(*v23);\n  v24 = (void *)v1[40];\n  if ( v24 )\n    free(v24);\n  v25 = (void *)v1[41];\n  if ( v25 )\n    free(v25);\n  v26 = (void *)v1[39];\n  if ( v26 )\n    free(v26);\n  v27 = (void *)v1[19];\n  if ( v27 )\n    free(v27);\n  v28 = (void *)v1[20];\n  if ( v28 )\n    free(v28);\n  v29 = (void *)v1[18];\n  if ( v29 )\n    free(v29);\n  v30 = (void *)v1[53];\n  if ( v30 )\n    free(v30);\n  v31 = (void *)v1[54];\n  if ( v31 )\n    free(v31);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x419540L", 
            "funcEndAddr": "0x41972fL", 
            "funcName": "sub_419540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419730(__int64 a1)\n{\n  signed __int64 v1; // rax\n  signed __int64 v2; // rbx\n  __int64 result; // rax\n\n  LODWORD(v1) = *(_DWORD *)(a1 + 136);\n  if ( (signed int)v1 > 1 )\n  {\n    v2 = 1LL;\n    do\n    {\n      sub_43C860(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v2), 7LL);\n      sub_43C860(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v2), (unsigned int)dword_464000);\n      sub_43C860(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v2++), (unsigned int)dword_464000);\n      v1 = *(signed int *)(a1 + 136);\n    }\n    while ( v2 < v1 );\n  }\n  sub_43C860(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8LL * (signed int)v1), (unsigned int)dword_464000);\n  *(_DWORD *)(a1 + 168) = 0;\n  sub_43C860(*(_QWORD *)(a1 + 208) + 4LL, *(unsigned int *)(a1 + 136));\n  sub_43C860(*(_QWORD *)(a1 + 216) + 4LL, *(unsigned int *)(a1 + 136));\n  sub_43C860(a1 + 172, 2LL);\n  sub_43C860(a1 + 180, 2LL);\n  sub_43C860(a1 + 188, 2LL);\n  result = sub_43C860(a1 + 196, 2LL);\n  *(_BYTE *)(a1 + 456) &= 0xDEu;\n  return result;\n}\n", 
            "funcStartAddr": "0x419730L", 
            "funcEndAddr": "0x419864L", 
            "funcName": "sub_419730"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419870(void **a1, char *a2)\n{\n  _QWORD *v2; // rbx\n  void *v3; // rdi\n  __int64 v4; // rax\n\n  v2 = a1;\n  v3 = *a1;\n  if ( v3 )\n    free(v3);\n  v4 = sub_4381A0(a2);\n  *v2 = v4;\n  return sub_4381E0(v4);\n}\n", 
            "funcStartAddr": "0x419870L", 
            "funcEndAddr": "0x4198a1L", 
            "funcName": "sub_419870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4198B0(__int64 a1, char *a2)\n{\n  __int64 v2; // rbx\n  void *v3; // rdi\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = a1;\n  v3 = *(void **)(a1 + 8);\n  if ( v3 )\n    free(v3);\n  v4 = sub_4381A0(a2);\n  *(_QWORD *)(v2 + 8) = v4;\n  result = sub_4381E0(v4);\n  *(_BYTE *)(v2 + 457) |= 2u;\n  return result;\n}\n", 
            "funcStartAddr": "0x4198b0L", 
            "funcEndAddr": "0x4198ebL", 
            "funcName": "sub_4198B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4198F0(__int64 a1, char *a2)\n{\n  __int64 v2; // rbx\n  void *v3; // rdi\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = a1;\n  v3 = *(void **)(a1 + 16);\n  if ( v3 )\n    free(v3);\n  v4 = sub_4381A0(a2);\n  *(_QWORD *)(v2 + 16) = v4;\n  result = sub_4381E0(v4);\n  *(_BYTE *)(v2 + 456) |= 2u;\n  return result;\n}\n", 
            "funcStartAddr": "0x4198f0L", 
            "funcEndAddr": "0x41992bL", 
            "funcName": "sub_4198F0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_419930(__int64 a1, signed int a2, const char **a3)\n{\n  const char **v3; // r14\n  int v4; // er15\n  __int64 v5; // rbp\n  const char **v6; // rbx\n  __int64 v7; // r12\n  int v8; // eax\n  const char *v9; // r12\n  _BYTE *v10; // rax\n  size_t result; // rax\n  signed __int64 v12; // rbp\n  __int64 v13; // rbx\n\n  v3 = a3;\n  v4 = a2;\n  if ( a2 > 0 )\n  {\n    v5 = (unsigned int)a2;\n    v6 = a3;\n    v4 = a2;\n    do\n    {\n      v4 += strlen(*v6);\n      ++v6;\n      --v5;\n    }\n    while ( v5 );\n  }\n  v7 = *(_QWORD *)(a1 + 48);\n  if ( v7 )\n  {\n    v8 = strlen(*(const char **)(a1 + 48));\n    v9 = (const char *)sub_438340(\"plan7.c\", 296LL, v7, v4 + v8 + 1);\n    *(_QWORD *)(a1 + 48) = v9;\n  }\n  else\n  {\n    v10 = (_BYTE *)sub_4382F0(\"plan7.c\", 300LL, v4 + 1);\n    *(_QWORD *)(a1 + 48) = v10;\n    *v10 = 0;\n    v9 = *(const char **)(a1 + 48);\n  }\n  result = strlen(v9);\n  *(_WORD *)&v9[result] = 10;\n  if ( a2 > 0 )\n  {\n    v12 = 0LL;\n    do\n    {\n      result = (size_t)strcat(*(char **)(a1 + 48), v3[v12]);\n      if ( v12 < a2 - 1 )\n      {\n        v13 = *(_QWORD *)(a1 + 48);\n        result = strlen(*(const char **)(a1 + 48));\n        *(_WORD *)(v13 + result) = 32;\n      }\n      ++v12;\n    }\n    while ( a2 != v12 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x419930L", 
            "funcEndAddr": "0x419a2cL", 
            "funcName": "sub_419930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419A30(__int64 a1)\n{\n  __int64 v1; // rbx\n  void *v2; // rdi\n  char *v3; // rax\n  __int64 v4; // rax\n  time_t timer; // [rsp+8h] [rbp-10h]\n\n  v1 = a1;\n  timer = time(0LL);\n  v2 = *(void **)(a1 + 64);\n  if ( v2 )\n    free(v2);\n  v3 = ctime(&timer);\n  v4 = sub_4381A0(v3);\n  *(_QWORD *)(v1 + 64) = v4;\n  return sub_4381E0(v4);\n}\n", 
            "funcStartAddr": "0x419a30L", 
            "funcEndAddr": "0x419a76L", 
            "funcName": "sub_419A30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_419BE0(__int64 a1, int a2)\n{\n  int v2; // ebx\n  signed __int64 v3; // rax\n  signed __int64 v4; // r15\n  int v5; // eax\n  signed __int64 v6; // rbx\n  __int64 v7; // r12\n  char *v8; // rbp\n  __int64 v9; // rbx\n  float v10; // xmm3_4\n  signed __int64 v11; // r14\n  float v12; // xmm4_4\n  float v13; // xmm1_4\n  double v14; // xmm5_8\n  float v15; // xmm2_4\n  double v16; // xmm0_8\n  float v17; // ST10_4\n  double v18; // xmm0_8\n  int v19; // eax\n  __int64 v20; // r14\n  float v21; // xmm3_4\n  signed __int64 v22; // rbx\n  float v23; // xmm4_4\n  float v24; // xmm1_4\n  double v25; // xmm5_8\n  float v26; // xmm2_4\n  double v27; // xmm0_8\n  float v28; // ST10_4\n  double v29; // xmm0_8\n  bool v30; // sf\n  unsigned __int8 v31; // of\n  signed __int64 v32; // rbp\n  float v33; // xmm0_4\n  float v34; // xmm2_4\n  __int64 v35; // rbp\n  signed __int64 v36; // r15\n  float v37; // xmm1_4\n  double v38; // xmm0_8\n  float v39; // xmm3_4\n  float v40; // xmm0_4\n  double v41; // xmm0_8\n  double v42; // xmm0_8\n  bool v43; // cf\n  bool v44; // zf\n  double v45; // xmm0_8\n  float v46; // xmm1_4\n  double v47; // rax\n  float v48; // xmm1_4\n  double v49; // xmm0_8\n  signed int v50; // eax\n  double v51; // xmm0_8\n  signed __int64 v52; // rbp\n  signed __int64 v53; // rbp\n  float v54; // xmm3_4\n  float v55; // xmm1_4\n  double v56; // xmm0_8\n  float v57; // xmm2_4\n  float v58; // xmm0_4\n  double v59; // xmm0_8\n  double v60; // xmm0_8\n  double v61; // xmm0_8\n  float v62; // xmm1_4\n  double v63; // rax\n  float v64; // xmm1_4\n  double v65; // xmm0_8\n  signed int v66; // eax\n  double v67; // [rsp+8h] [rbp-50h]\n  double v68; // [rsp+8h] [rbp-50h]\n\n  v2 = a2;\n  if ( *(_BYTE *)(a1 + 456) & 1 )\n    return;\n  LODWORD(v3) = *(_DWORD *)(a1 + 136);\n  if ( (signed int)v3 > 0 )\n  {\n    v4 = 1LL;\n    do\n    {\n      v5 = dword_464000;\n      if ( dword_464000 > 0 )\n      {\n        v6 = 0LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v6) + 4 * v4) = sub_415A90(\n                                                                                *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v4)\n                                                                                         + 4 * v6),\n                                                                                *(float *)(a1 + 4 * v6 + 224));\n          if ( v4 < *(signed int *)(a1 + 136) )\n            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v6) + 4 * v4) = sub_415A90(\n                                                                                  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v4)\n                                                                                           + 4 * v6),\n                                                                                  *(float *)(a1 + 4 * v6 + 224));\n          ++v6;\n          v5 = dword_464000;\n        }\n        while ( v6 < dword_464000 );\n      }\n      if ( v5 < dword_463FFC )\n      {\n        v7 = v5;\n        v8 = (char *)qword_463D50 + 20 * v5;\n        if ( v5 <= 0 )\n        {\nLABEL_20:\n          v12 = 0.0;\n          v10 = 0.0;\n          goto LABEL_21;\n        }\n        while ( 1 )\n        {\n          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v4);\n          v10 = 0.0;\n          v11 = 0LL;\n          v12 = 0.0;\n          do\n          {\n            if ( v8[v11] )\n            {\n              v13 = *(float *)(a1 + 4 * v11 + 224);\n              v14 = v13;\n              v15 = *(float *)(v9 + 4 * v11) / v13;\n              v16 = -9999.0;\n              if ( v15 > 0.0 )\n              {\n                v17 = v12;\n                v18 = log(v15);\n                v14 = v13;\n                v12 = v17;\n                v16 = v18 * 1.44269504;\n                v13 = *(float *)(a1 + 4 * v11 + 224);\n                v5 = dword_464000;\n              }\n              v12 = v12 + v16 * v14;\n              v10 = v10 + v13;\n            }\n            ++v11;\n          }\n          while ( v11 < v5 );\nLABEL_21:\n          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v7) + 4 * v4) = (signed int)(v12 * 1000.0 / v10);\n          if ( v4 < *(signed int *)(a1 + 136) )\n          {\n            v19 = dword_464000;\n            if ( dword_464000 <= 0 )\n            {\n              v23 = 0.0;\n              v21 = 0.0;\n            }\n            else\n            {\n              v20 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v4);\n              v21 = 0.0;\n              v22 = 0LL;\n              v23 = 0.0;\n              do\n              {\n                if ( v8[v22] )\n                {\n                  v24 = *(float *)(a1 + 4 * v22 + 224);\n                  v25 = v24;\n                  v26 = *(float *)(v20 + 4 * v22) / v24;\n                  v27 = -9999.0;\n                  if ( v26 > 0.0 )\n                  {\n                    v28 = v23;\n                    v29 = log(v26);\n                    v25 = v24;\n                    v23 = v28;\n                    v27 = v29 * 1.44269504;\n                    v24 = *(float *)(a1 + 4 * v22 + 224);\n                    v19 = dword_464000;\n                  }\n                  v23 = v23 + v27 * v25;\n                  v21 = v21 + v24;\n                }\n                ++v22;\n              }\n              while ( v22 < v19 );\n            }\n            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v7) + 4 * v4) = (signed int)(v23 * 1000.0 / v21);\n          }\n          if ( ++v7 >= dword_463FFC )\n            break;\n          v5 = dword_464000;\n          v8 += 20;\n          if ( dword_464000 <= 0 )\n            goto LABEL_20;\n        }\n      }\n      v3 = *(signed int *)(a1 + 136);\n      v31 = __OFSUB__(v4, v3);\n      v30 = v4++ - v3 < 0;\n    }\n    while ( v30 ^ v31 );\n    v2 = a2;\n    if ( (signed int)v3 >= 2 )\n    {\n      v32 = 1LL;\n      do\n      {\n        *(_DWORD *)(**(_QWORD **)(a1 + 312) + 4 * v32) = sub_415A90(\n                                                           **(float **)(*(_QWORD *)(a1 + 144) + 8 * v32),\n                                                           *(float *)(a1 + 304));\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8LL) + 4 * v32) = sub_415A90(\n                                                                            *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                 + 8 * v32)\n                                                                                     + 4LL),\n                                                                            *(float *)(a1 + 304));\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 16LL) + 4 * v32) = sub_415A90(\n                                                                             *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                  + 8 * v32)\n                                                                                      + 8LL),\n                                                                             1.0);\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 24LL) + 4 * v32) = sub_415A90(\n                                                                             *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                  + 8 * v32)\n                                                                                      + 12LL),\n                                                                             *(float *)(a1 + 304));\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 32LL) + 4 * v32) = sub_415A90(\n                                                                             *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                  + 8 * v32)\n                                                                                      + 16LL),\n                                                                             *(float *)(a1 + 304));\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 40LL) + 4 * v32) = sub_415A90(\n                                                                             *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                  + 8 * v32)\n                                                                                      + 20LL),\n                                                                             *(float *)(a1 + 304));\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 48LL) + 4 * v32) = sub_415A90(\n                                                                             *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)\n                                                                                                  + 8 * v32)\n                                                                                      + 24LL),\n                                                                             1.0);\n        ++v32;\n        v3 = *(signed int *)(a1 + 136);\n      }\n      while ( v32 < v3 );\n    }\n  }\n  v33 = *(float *)(a1 + 168);\n  if ( v33 > 0.0 )\n  {\n    v34 = log(v33);\n    LODWORD(v3) = *(_DWORD *)(a1 + 136);\n    if ( (signed int)v3 <= 0 )\n      goto LABEL_58;\nLABEL_41:\n    v35 = 0LL;\n    do\n    {\n      v36 = v35 + 1;\n      v37 = *(float *)(*(_QWORD *)(a1 + 208) + 4 * v35 + 4);\n      v38 = -9999.0;\n      if ( v37 > 0.0 )\n        v38 = log(v37);\n      v39 = v38;\n      if ( (unsigned __int64)v36 >= 2 && v34 > -9999.0 )\n      {\n        v67 = v34;\n        v40 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v35) + 20LL);\n        if ( v40 > 0.0 )\n        {\n          v41 = v40;\n          if ( v2 )\n          {\n            v42 = log(v41) + v67;\n            v43 = v39 < v42;\n            v44 = v39 == v42;\n            v45 = v39;\n            if ( v43 || v44 )\n              v45 = log(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v35) + 20LL)) + v67;\n            v39 = v45;\n          }\n          else\n          {\n            v46 = log(v41) + v67;\n            sub_415C00(v47, v39, v46);\n          }\n        }\n        v48 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v35) + 24LL);\n        v49 = -9999.0;\n        if ( v48 > 0.0 )\n          v49 = log(v48) + v67;\n        v34 = v49;\n      }\n      v50 = -987654321;\n      if ( v39 > -9999.0 )\n      {\n        v51 = log(*(float *)(a1 + 304));\n        v50 = (signed int)floor((v39 - v51) * 1442.69504 + 0.5);\n      }\n      *(_DWORD *)(*(_QWORD *)(a1 + 368) + 4 * v35 + 4) = v50;\n      v3 = *(signed int *)(a1 + 136);\n      ++v35;\n    }\n    while ( v36 < v3 );\n    goto LABEL_58;\n  }\n  v34 = -9999.0;\n  if ( (signed int)v3 > 0 )\n    goto LABEL_41;\nLABEL_58:\n  *(_DWORD *)(*(_QWORD *)(a1 + 376) + 4LL * (signed int)v3) = 0;\n  v52 = *(signed int *)(a1 + 136);\n  if ( v52 >= 2 )\n  {\n    v53 = v52 + 1;\n    v54 = 0.0;\n    do\n    {\n      v55 = *(float *)(*(_QWORD *)(a1 + 216) + 4 * v53 - 8);\n      v56 = -9999.0;\n      if ( v55 > 0.0 )\n        v56 = log(v55);\n      v57 = v56;\n      if ( v54 > -9999.0 )\n      {\n        v68 = v54;\n        v58 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v53 - 16) + 8LL);\n        if ( v58 > 0.0 )\n        {\n          v59 = v58;\n          if ( v2 )\n          {\n            v60 = log(v59) + v68;\n            v43 = v57 < v60;\n            v44 = v57 == v60;\n            v61 = v57;\n            if ( v43 || v44 )\n              v61 = log(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v53 - 16) + 8LL)) + v68;\n            v57 = v61;\n          }\n          else\n          {\n            v62 = log(v59) + v68;\n            sub_415C00(v63, v57, v62);\n          }\n        }\n        v64 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v53 - 16) + 24LL);\n        v65 = -9999.0;\n        if ( v64 > 0.0 )\n          v65 = log(v64) + v68;\n        v54 = v65;\n      }\n      v66 = -987654321;\n      if ( v57 > -9999.0 )\n        v66 = (signed int)floor(v57 * 1442.69504 + 0.5);\n      *(_DWORD *)(*(_QWORD *)(a1 + 376) + 4 * v53-- - 8) = v66;\n    }\n    while ( v53 > 2 );\n  }\n  *(_DWORD *)(a1 + 340) = sub_415A90(*(float *)(a1 + 176), *(float *)(a1 + 304));\n  *(_DWORD *)(a1 + 336) = sub_415A90(*(float *)(a1 + 172), 1.0);\n  *(_DWORD *)(a1 + 348) = sub_415A90(*(float *)(a1 + 184), 1.0);\n  *(_DWORD *)(a1 + 344) = sub_415A90(*(float *)(a1 + 180), 1.0);\n  *(_DWORD *)(a1 + 356) = sub_415A90(*(float *)(a1 + 192), *(float *)(a1 + 304));\n  *(_DWORD *)(a1 + 352) = sub_415A90(*(float *)(a1 + 188), 1.0 - *(float *)(a1 + 304));\n  *(_DWORD *)(a1 + 364) = sub_415A90(*(float *)(a1 + 200), *(float *)(a1 + 304));\n  *(_DWORD *)(a1 + 360) = sub_415A90(*(float *)(a1 + 196), 1.0);\n  *(_BYTE *)(a1 + 456) |= 1u;\n}\n", 
            "funcStartAddr": "0x419be0L", 
            "funcEndAddr": "0x41a576L", 
            "funcName": "sub_419BE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41A580(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // eax\n  char *v4; // r12\n  signed __int64 v5; // rbx\n  float v6; // xmm3_4\n  float v7; // xmm6_4\n  float v8; // xmm1_4\n  double v9; // xmm7_8\n  float v10; // xmm2_4\n  double v11; // xmm0_8\n\n  v3 = dword_464000;\n  if ( dword_464000 <= 0 )\n  {\n    v7 = 0.0;\n    v6 = 0.0;\n  }\n  else\n  {\n    v4 = (char *)qword_463D50 + 20 * a3;\n    v5 = 0LL;\n    v6 = 0.0;\n    v7 = 0.0;\n    do\n    {\n      if ( v4[v5] )\n      {\n        v8 = *(float *)(a2 + 4 * v5);\n        v9 = v8;\n        v10 = *(float *)(a1 + 4 * v5) / v8;\n        v11 = -9999.0;\n        if ( v10 > 0.0 )\n        {\n          v9 = v8;\n          v11 = log(v10) * 1.44269504;\n          v8 = *(float *)(a2 + 4 * v5);\n          v3 = dword_464000;\n        }\n        v7 = v7 + v11 * v9;\n        v6 = v6 + v8;\n      }\n      ++v5;\n    }\n    while ( v5 < v3 );\n  }\n  return (unsigned int)(signed int)(v7 * 1000.0 / v6);\n}\n", 
            "funcStartAddr": "0x41a580L", 
            "funcEndAddr": "0x41a6a6L", 
            "funcName": "sub_41A580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41A6B0(__int64 a1, float a2)\n{\n  signed __int64 v2; // rsi\n  signed __int64 v3; // rbx\n  signed __int64 v4; // rbx\n  float v5; // ST04_4\n  float v6; // xmm0_4\n  signed __int64 v7; // rbx\n  float v8; // ST04_4\n  __int64 v9; // rax\n  __int64 result; // rax\n\n  v2 = *(unsigned int *)(a1 + 136);\n  if ( (signed int)v2 > 0 )\n  {\n    v3 = 0LL;\n    do\n    {\n      sub_43DC80(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v3 + 8), (unsigned int)dword_464000);\n      v2 = *(signed int *)(a1 + 136);\n      ++v3;\n    }\n    while ( v3 < v2 );\n    if ( (signed int)v2 >= 2 )\n    {\n      v4 = 1LL;\n      do\n      {\n        sub_43DC80(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v4++), (unsigned int)dword_464000);\n        v2 = *(signed int *)(a1 + 136);\n      }\n      while ( v4 < v2 );\n    }\n  }\n  sub_43CBE0(*(_QWORD *)(a1 + 208) + 4LL, v2);\n  v5 = a2 + *(float *)(a1 + 168);\n  sub_43CA70(*(_QWORD *)(a1 + 208) + 4LL, *(unsigned int *)(a1 + 136));\n  v6 = *(float *)(a1 + 168) / v5;\n  *(float *)(a1 + 168) = v6;\n  if ( *(_DWORD *)(a1 + 136) >= 2 )\n  {\n    v7 = 1LL;\n    do\n    {\n      sub_43CBE0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v7), 3LL);\n      v8 = v6 + *(float *)(*(_QWORD *)(a1 + 216) + 4 * v7);\n      sub_43CA70(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v7), 3LL);\n      v9 = *(_QWORD *)(a1 + 216);\n      v6 = *(float *)(v9 + 4 * v7) / v8;\n      *(float *)(v9 + 4 * v7) = v6;\n      sub_43DC80(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v7) + 12LL, 2LL);\n      sub_43DC80(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v7++) + 20LL, 2LL);\n    }\n    while ( v7 < *(signed int *)(a1 + 136) );\n  }\n  sub_43DC80(a1 + 224, (unsigned int)dword_464000);\n  sub_43DC80(a1 + 172, 2LL);\n  sub_43DC80(a1 + 180, 2LL);\n  sub_43DC80(a1 + 188, 2LL);\n  sub_43DC80(a1 + 196, 2LL);\n  *(_QWORD *)(**(_QWORD **)(a1 + 144) + 20LL) = 0LL;\n  result = *(_DWORD *)(a1 + 456) & 0xFFFFFFDE | 0x20;\n  *(_DWORD *)(a1 + 456) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x41a6b0L", 
            "funcEndAddr": "0x41a8dcL", 
            "funcName": "sub_41A6B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41ABD0(__int64 a1)\n{\n  __int64 v1; // r14\n  float v2; // xmm0_4\n  float v3; // xmm0_4\n  signed __int64 result; // rax\n  signed __int64 v5; // rcx\n  signed __int64 v6; // rbx\n\n  v1 = a1;\n  v2 = *(float *)(a1 + 304);\n  *(float *)(a1 + 172) = 1.0 - v2;\n  *(float *)(a1 + 176) = v2;\n  *(_QWORD *)(a1 + 180) = 4539628425446424576LL;\n  *(float *)(a1 + 188) = 1.0 - v2;\n  *(float *)(a1 + 192) = v2;\n  *(float *)(a1 + 196) = 1.0 - v2;\n  *(float *)(a1 + 200) = v2;\n  sub_43C860(*(_QWORD *)(a1 + 208) + 8LL, (unsigned int)(*(_DWORD *)(a1 + 136) - 1));\n  *(float *)(*(_QWORD *)(v1 + 208) + 4LL) = 1.0 - *(float *)(v1 + 168);\n  v3 = 0.0;\n  sub_43C860(*(_QWORD *)(v1 + 216) + 4LL, (unsigned int)(*(_DWORD *)(v1 + 136) - 1));\n  result = *(_QWORD *)(a1 + 216);\n  v5 = *(signed int *)(a1 + 136);\n  *(_DWORD *)(result + 4 * v5) = 1065353216;\n  if ( v5 >= 2 )\n  {\n    v6 = 1LL;\n    do\n    {\n      sub_43CBE0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v6), 3LL);\n      v3 = 1.0 / (float)((float)(*(float *)(*(_QWORD *)(a1 + 216) + 4 * v6) * v3) + v3);\n      sub_43CA70(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v6++), 3LL);\n      result = *(signed int *)(a1 + 136);\n    }\n    while ( v6 < result );\n  }\n  *(_BYTE *)(a1 + 456) &= 0xFEu;\n  return result;\n}\n", 
            "funcStartAddr": "0x41abd0L", 
            "funcEndAddr": "0x41ad1aL", 
            "funcName": "sub_41ABD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41B270(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 v4; // rdi\n  __int64 result; // rax\n\n  v1 = a1;\n  *(_OWORD *)(a1 + 172) = xmmword_4402A0;\n  *(_OWORD *)(a1 + 188) = xmmword_4402A0;\n  v2 = *(_QWORD *)(a1 + 208);\n  *(_DWORD *)(v2 + 4) = 1056964608;\n  sub_43C860(v2 + 8, (unsigned int)(*(_DWORD *)(v1 + 136) - 1));\n  v3 = *(signed int *)(v1 + 136);\n  v4 = *(_QWORD *)(v1 + 216);\n  *(_DWORD *)(v4 + 4 * v3) = 1065353216;\n  result = sub_43C860(v4, (unsigned int)(v3 - 1));\n  if ( *(_DWORD *)(v1 + 136) > 0 )\n    BUG();\n  return result;\n}\n", 
            "funcStartAddr": "0x41b270L", 
            "funcEndAddr": "0x41b31fL", 
            "funcName": "sub_41B270"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_41B320(FILE *stream, __int64 a2, _QWORD *a3, signed int a4, _QWORD *a5, float a6)\n{\n  _QWORD *v6; // r12\n  signed int v7; // er15\n  _QWORD *v8; // r13\n  float v9; // xmm3_4\n  signed __int64 v10; // r14\n  float v11; // xmm1_4\n  float v12; // xmm2_4\n  float v13; // xmm4_4\n  float v14; // xmm0_4\n  float v15; // xmm0_4\n  double v16; // xmm0_8\n  float v18; // [rsp+8h] [rbp-50h]\n  float v19; // [rsp+Ch] [rbp-4Ch]\n\n  v6 = a5;\n  v7 = a4;\n  v8 = a3;\n  sub_419BE0(a2, 1);\n  sub_4209A0(a2, *v8, *v6);\n  if ( v7 < 2 )\n  {\n    v18 = a6;\n    v19 = a6;\n    v12 = a6;\nLABEL_9:\n    v13 = (float)v7;\nLABEL_10:\n    v16 = 0.0;\n    goto LABEL_11;\n  }\n  v9 = a6 * a6;\n  v10 = 1LL;\n  v11 = a6;\n  v12 = a6;\n  do\n  {\n    sub_4209A0(a2, v8[v10], v6[v10]);\n    v12 = v12 + a6;\n    v9 = v9 + (float)(a6 * a6);\n    v11 = fmaxf(a6, v11);\n    a6 = fminf(a6, a6);\n    ++v10;\n  }\n  while ( v7 != v10 );\n  v19 = a6;\n  v18 = v11;\n  if ( v7 <= 1 )\n    goto LABEL_9;\n  v13 = (float)v7;\n  v14 = (float)(v9 - (float)((float)(v12 * v12) / (float)v7)) / ((float)v7 + -1.0);\n  if ( v14 <= 0.0 )\n    goto LABEL_10;\n  if ( v14 < 0.0 )\n  {\n    v15 = sqrtf(v14);\n    v13 = (float)v7;\n  }\n  else\n  {\n    v15 = fsqrt(v14);\n  }\n  v16 = v15;\nLABEL_11:\n  fprintf(stream, \"Average score:  %10.2f bits\\n\", (float)(v12 / v13));\n  fprintf(stream, \"Minimum score:  %10.2f bits\\n\", v19);\n  fprintf(stream, \"Maximum score:  %10.2f bits\\n\", v18);\n  return fprintf(stream, \"Std. deviation: %10.2f bits\\n\", v16);\n}\n", 
            "funcStartAddr": "0x41b320L", 
            "funcEndAddr": "0x41b504L", 
            "funcName": "sub_41B320"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_41B510(int *a1, __int64 *a2)\n{\n  int *v2; // r14\n  int v3; // ebp\n  __int64 v4; // r15\n  signed __int64 v5; // r9\n  __int64 v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // r8\n  __int64 v9; // rdi\n  signed __int64 v10; // rbp\n  __int64 v11; // rbx\n  _DWORD *v12; // rsi\n  __int64 v13; // rsi\n  unsigned __int64 v14; // rax\n  __int64 v15; // rcx\n  signed __int64 v16; // r14\n  __int64 v17; // r10\n  signed __int64 v18; // r11\n  __int64 v19; // r12\n  __int64 v20; // r8\n  unsigned __int64 v21; // r9\n  unsigned __int64 v22; // r13\n  unsigned __int64 v23; // rdi\n  __int64 v24; // rax\n  signed __int64 v25; // rbp\n  signed __int64 v26; // rbx\n  __int64 v27; // rax\n  __int64 v28; // rdi\n  signed __int64 v29; // rbp\n  signed __int64 v30; // rbx\n  __int128 v31; // xmm1\n  __int128 v32; // xmm1\n  __int128 v33; // xmm1\n  __int128 v34; // xmm1\n  signed __int64 v35; // rbx\n  signed __int64 v36; // rdi\n  __int64 v37; // rbp\n  __int64 v38; // rax\n  __int128 v39; // xmm1\n  __int64 v40; // r13\n  unsigned __int64 v41; // rax\n  signed __int64 v42; // r10\n  __int64 v43; // r14\n  __int64 v44; // rcx\n  signed __int64 v45; // rdi\n  __int64 v46; // r11\n  signed __int64 v47; // rdx\n  __int64 v48; // rsi\n  __int64 v49; // r8\n  unsigned __int64 v50; // r9\n  unsigned __int64 v51; // r12\n  unsigned __int64 v52; // rax\n  signed __int64 v53; // rsi\n  __int64 v54; // rcx\n  signed __int64 v55; // rsi\n  signed __int64 v56; // rbp\n  __int64 v57; // rbx\n  __int64 v58; // rax\n  signed __int64 v59; // rbx\n  signed __int64 v60; // rbp\n  __int128 v61; // xmm1\n  __int128 v62; // xmm1\n  __int128 v63; // xmm1\n  __int128 v64; // xmm1\n  signed __int64 v65; // rbx\n  signed __int64 v66; // rax\n  __int64 v67; // rbp\n  __int64 v68; // rcx\n  __int128 v69; // xmm1\n  __int128 v70; // xmm0\n  signed __int64 v71; // rax\n  signed __int64 v72; // rcx\n  unsigned __int64 v73; // rsi\n  __int64 v74; // rdx\n  __int64 v75; // rsi\n  signed __int64 v76; // rdi\n  __int128 v77; // xmm1\n  __int128 v78; // xmm1\n  __int128 v79; // xmm1\n  __int128 v80; // xmm1\n  signed __int64 v81; // rdi\n  signed __int64 v82; // rsi\n  __int64 v83; // rdx\n  __int64 v84; // rbp\n  __int128 v85; // xmm1\n  char *v86; // rbp\n  __int64 v87; // rax\n  int v88; // eax\n  __int64 *result; // rax\n  __int64 v90; // [rsp+8h] [rbp-90h]\n  signed __int64 v91; // [rsp+8h] [rbp-90h]\n  unsigned __int64 v92; // [rsp+10h] [rbp-88h]\n  __int64 v93; // [rsp+10h] [rbp-88h]\n  unsigned __int64 v94; // [rsp+18h] [rbp-80h]\n  __int64 v95; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v96; // [rsp+20h] [rbp-78h]\n  __int64 v97; // [rsp+28h] [rbp-70h]\n  unsigned __int64 v98; // [rsp+28h] [rbp-70h]\n  signed __int64 v99; // [rsp+30h] [rbp-68h]\n  __int64 v100; // [rsp+38h] [rbp-60h]\n  int *v101; // [rsp+40h] [rbp-58h]\n  signed int v102; // [rsp+48h] [rbp-50h]\n  __int64 *v103; // [rsp+50h] [rbp-48h]\n  signed __int64 v104; // [rsp+58h] [rbp-40h]\n\n  v103 = a2;\n  v2 = a1;\n  v3 = *a1;\n  v4 = sub_4382F0(\"plan7.c\", 54LL, 464LL);\n  *(_OWORD *)(v4 + 44) = 0LL;\n  *(_OWORD *)(v4 + 32) = 0LL;\n  *(_OWORD *)(v4 + 16) = 0LL;\n  *(_OWORD *)v4 = 0LL;\n  *(_OWORD *)(v4 + 64) = 0LL;\n  *(_DWORD *)(v4 + 80) = 0;\n  *(_OWORD *)(v4 + 120) = 0LL;\n  *(_OWORD *)(v4 + 104) = 0LL;\n  *(_OWORD *)(v4 + 88) = 0LL;\n  *(_DWORD *)(v4 + 136) = 0;\n  *(_OWORD *)(v4 + 144) = 0LL;\n  *(_QWORD *)(v4 + 160) = 0LL;\n  *(_OWORD *)(v4 + 208) = 0LL;\n  *(_OWORD *)(v4 + 312) = 0LL;\n  *(_QWORD *)(v4 + 328) = 0LL;\n  *(_OWORD *)(v4 + 384) = 0LL;\n  *(_OWORD *)(v4 + 368) = 0LL;\n  *(_OWORD *)(v4 + 424) = 0LL;\n  *(_OWORD *)(v4 + 408) = 0LL;\n  *(_DWORD *)(v4 + 440) = -987654321;\n  *(_DWORD *)(v4 + 444) = -987654321;\n  *(_DWORD *)(v4 + 448) = 0;\n  *(_DWORD *)(v4 + 452) = 0;\n  *(_DWORD *)(v4 + 456) = 0;\n  sub_419080(v4, v3);\n  v5 = *a1;\n  v100 = (unsigned int)*a1;\n  if ( v5 >= 2 )\n  {\n    v6 = *((_QWORD *)a1 + 1);\n    v7 = *((_QWORD *)a1 + 2);\n    v8 = *(_QWORD *)(v4 + 144);\n    v9 = *((_QWORD *)a1 + 3);\n    v10 = 1LL;\n    v11 = 0LL;\n    do\n    {\n      v12 = *(_DWORD **)(v8 + 8 * v10);\n      *v12 = *(_DWORD *)(v7 + v11 + 92);\n      v12[2] = *(_DWORD *)(v7 + v11 + 100);\n      v12[1] = *(_DWORD *)(v7 + v11 + 96);\n      v12[5] = *(_DWORD *)(v9 + v11 + 92);\n      v12[6] = *(_DWORD *)(v9 + v11 + 100);\n      v12[3] = *(_DWORD *)(v6 + v11 + 92);\n      v12[4] = *(_DWORD *)(v6 + v11 + 96);\n      ++v10;\n      v11 += 92LL;\n    }\n    while ( v10 < v5 );\n  }\n  v102 = v5;\n  v101 = v2;\n  if ( (signed int)v100 > 0 )\n  {\n    v13 = (unsigned int)dword_464000;\n    v14 = dword_464000 & 0xFFFFFFF8;\n    v94 = v14;\n    v14 -= 8LL;\n    v92 = v14;\n    v14 >>= 3;\n    v99 = (unsigned int)dword_464000 - 1LL;\n    v15 = ((_BYTE)v14 + 1) & 3;\n    v104 = v15 - 1 - v14;\n    v90 = ((_BYTE)v14 + 1) & 3;\n    v97 = dword_464000 & 3;\n    v16 = 1LL;\n    v17 = 0LL;\n    v18 = 2LL;\n    while ( 1 )\n    {\n      v19 = v17++;\n      if ( (signed int)v13 <= 0 )\n        goto LABEL_27;\n      v20 = *((_QWORD *)v101 + 2);\n      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 152) + 8 * v16);\n      if ( (unsigned int)v13 < 8 || v21 < v20 + 92 * v17 + 4 * v13 + 12 && v20 + 92 * v17 + 12 < v21 + 4 * v13 )\n      {\n        v22 = 0LL;\nLABEL_11:\n        v23 = v99 - v22;\n        if ( v97 )\n        {\n          v24 = -v97;\n          do\n          {\n            *(_DWORD *)(v21 + 4 * v22) = *(_DWORD *)(v20 + 92 * v19 + 4 * v22 + 104);\n            ++v22;\n            ++v24;\n          }\n          while ( v24 );\n        }\n        if ( v23 >= 3 )\n        {\n          v25 = v21 + 4 * v22 + 12;\n          v26 = 92 * v16 + v20 + 4 * v22 + 12;\n          v27 = 0LL;\n          do\n          {\n            *(_DWORD *)(v21 + 4 * v22 + 4 * v27) = *(_DWORD *)(v26 + 4 * v27);\n            *(_DWORD *)(v25 + 4 * v27 - 8) = *(_DWORD *)(v26 + 4 * v27 + 4);\n            *(_DWORD *)(v25 + 4 * v27 - 4) = *(_DWORD *)(v26 + 4 * v27 + 8);\n            *(_DWORD *)(v25 + 4 * v27) = *(_DWORD *)(v26 + 4 * v27 + 12);\n            v27 += 4LL;\n          }\n          while ( v13 - v22 != v27 );\n        }\n        goto LABEL_27;\n      }\n      if ( v92 < 0x18 )\n        break;\n      v29 = v20 + 92 * v18 + 32;\n      v30 = v104;\n      v28 = 0LL;\n      do\n      {\n        v31 = *(_OWORD *)(v29 + 4 * v28 - 96);\n        *(_OWORD *)(v21 + 4 * v28) = *(_OWORD *)(v29 + 4 * v28 - 112);\n        *(_OWORD *)(v21 + 4 * v28 + 16) = v31;\n        v32 = *(_OWORD *)(v29 + 4 * v28 - 64);\n        *(_OWORD *)(v21 + 4 * v28 + 32) = *(_OWORD *)(v29 + 4 * v28 - 80);\n        *(_OWORD *)(v21 + 4 * v28 + 48) = v32;\n        v33 = *(_OWORD *)(v20 + 92 * v18 + 4 * v28);\n        *(_OWORD *)(v21 + 4 * v28 + 64) = *(_OWORD *)(v29 + 4 * v28 - 48);\n        *(_OWORD *)(v21 + 4 * v28 + 80) = v33;\n        v34 = *(_OWORD *)(v29 + 4 * v28);\n        *(_OWORD *)(v21 + 4 * v28 + 96) = *(_OWORD *)(v29 + 4 * v28 - 16);\n        *(_OWORD *)(v21 + 4 * v28 + 112) = v34;\n        v28 += 32LL;\n        v30 += 4LL;\n      }\n      while ( v30 );\n      if ( v90 )\n        goto LABEL_24;\nLABEL_26:\n      v22 = v94;\n      if ( v94 != v13 )\n        goto LABEL_11;\nLABEL_27:\n      ++v16;\n      ++v18;\n      if ( v16 == (_DWORD)v100 + 1 )\n        goto LABEL_28;\n    }\n    v28 = 0LL;\n    if ( !v90 )\n      goto LABEL_26;\nLABEL_24:\n    v35 = v21 + 4 * v28 + 16;\n    v36 = v20 + 92 * v19 + 4 * v28;\n    v37 = -v15;\n    v38 = 0LL;\n    do\n    {\n      v39 = *(_OWORD *)(v36 + v38 + 120);\n      *(_OWORD *)(v35 + v38 - 16) = *(_OWORD *)(v36 + v38 + 104);\n      *(_OWORD *)(v35 + v38) = v39;\n      v38 += 32LL;\n      ++v37;\n    }\n    while ( v37 );\n    goto LABEL_26;\n  }\nLABEL_28:\n  if ( v102 >= 2 )\n  {\n    v40 = (unsigned int)dword_464000;\n    v41 = dword_464000 & 0xFFFFFFF8;\n    v98 = v41;\n    v41 -= 8LL;\n    v96 = v41;\n    v41 >>= 3;\n    v42 = (unsigned int)dword_464000 - 1LL;\n    v43 = dword_464000 & 3;\n    v44 = ((_BYTE)v41 + 1) & 3;\n    v91 = v44 - 1 - v41;\n    v95 = ((_BYTE)v41 + 1) & 3;\n    v93 = -v44;\n    v45 = 1LL;\n    v46 = 0LL;\n    v47 = 2LL;\n    while ( 1 )\n    {\n      v48 = v46++;\n      if ( (signed int)v40 <= 0 )\n        goto LABEL_51;\n      v49 = *((_QWORD *)v101 + 1);\n      v50 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 8 * v45);\n      if ( (unsigned int)v40 < 8 || v50 < v49 + 92 * v46 + 4 * v40 + 12 && v49 + 92 * v46 + 12 < v50 + 4 * v40 )\n      {\n        v51 = 0LL;\nLABEL_35:\n        v52 = v42 - v51;\n        if ( v43 )\n        {\n          v53 = v49 + 92 * v48;\n          v54 = -v43;\n          do\n          {\n            *(_DWORD *)(v50 + 4 * v51) = *(_DWORD *)(v53 + 4 * v51 + 104);\n            ++v51;\n            ++v54;\n          }\n          while ( v54 );\n        }\n        if ( v52 >= 3 )\n        {\n          v55 = v50 + 4 * v51 + 12;\n          v56 = 92 * v45 + v49 + 4 * v51 + 12;\n          v57 = 0LL;\n          do\n          {\n            *(_DWORD *)(v50 + 4 * v51 + 4 * v57) = *(_DWORD *)(v56 + 4 * v57);\n            *(_DWORD *)(v55 + 4 * v57 - 8) = *(_DWORD *)(v56 + 4 * v57 + 4);\n            *(_DWORD *)(v55 + 4 * v57 - 4) = *(_DWORD *)(v56 + 4 * v57 + 8);\n            *(_DWORD *)(v55 + 4 * v57) = *(_DWORD *)(v56 + 4 * v57 + 12);\n            v57 += 4LL;\n          }\n          while ( v40 - v51 != v57 );\n        }\n        goto LABEL_51;\n      }\n      if ( v96 < 0x18 )\n        break;\n      v59 = v49 + 92 * v47 + 32;\n      v60 = v91;\n      v58 = 0LL;\n      do\n      {\n        v61 = *(_OWORD *)(v59 + 4 * v58 - 96);\n        *(_OWORD *)(v50 + 4 * v58) = *(_OWORD *)(v59 + 4 * v58 - 112);\n        *(_OWORD *)(v50 + 4 * v58 + 16) = v61;\n        v62 = *(_OWORD *)(v59 + 4 * v58 - 64);\n        *(_OWORD *)(v50 + 4 * v58 + 32) = *(_OWORD *)(v59 + 4 * v58 - 80);\n        *(_OWORD *)(v50 + 4 * v58 + 48) = v62;\n        v63 = *(_OWORD *)(v49 + 92 * v47 + 4 * v58);\n        *(_OWORD *)(v50 + 4 * v58 + 64) = *(_OWORD *)(v59 + 4 * v58 - 48);\n        *(_OWORD *)(v50 + 4 * v58 + 80) = v63;\n        v64 = *(_OWORD *)(v59 + 4 * v58);\n        *(_OWORD *)(v50 + 4 * v58 + 96) = *(_OWORD *)(v59 + 4 * v58 - 16);\n        *(_OWORD *)(v50 + 4 * v58 + 112) = v64;\n        v58 += 32LL;\n        v60 += 4LL;\n      }\n      while ( v60 );\n      if ( v95 )\n        goto LABEL_48;\nLABEL_50:\n      v51 = v98;\n      if ( v98 != v40 )\n        goto LABEL_35;\nLABEL_51:\n      ++v45;\n      ++v47;\n      if ( v45 == v100 )\n        goto LABEL_52;\n    }\n    v58 = 0LL;\n    if ( !v95 )\n      goto LABEL_50;\nLABEL_48:\n    v65 = v50 + 4 * v58 + 16;\n    v66 = v49 + 92 * v48 + 4 * v58;\n    v67 = v93;\n    v68 = 0LL;\n    do\n    {\n      v69 = *(_OWORD *)(v66 + v68 + 120);\n      *(_OWORD *)(v65 + v68 - 16) = *(_OWORD *)(v66 + v68 + 104);\n      *(_OWORD *)(v65 + v68) = v69;\n      v68 += 32LL;\n      ++v67;\n    }\n    while ( v67 );\n    goto LABEL_50;\n  }\nLABEL_52:\n  *(float *)&v70 = *(float *)(*((_QWORD *)v101 + 2) + 8LL)\n                 / (float)(**((float **)v101 + 2) + *(float *)(*((_QWORD *)v101 + 2) + 8LL));\n  *(_DWORD *)(v4 + 168) = v70;\n  sub_41EBB0(v4 + 224, v4 + 304);\n  v71 = dword_464000;\n  if ( dword_464000 > 0LL )\n  {\n    if ( (unsigned int)dword_464000 < 8 )\n    {\n      v72 = 0LL;\n      goto LABEL_67;\n    }\n    if ( v4 + 224 < (unsigned __int64)&v101[dword_464000 + 8]\n      && v4 + 4LL * dword_464000 + 224 > (unsigned __int64)(v101 + 8) )\n    {\n      v72 = 0LL;\n      do\n      {\nLABEL_67:\n        *(_DWORD *)(v4 + 4 * v72 + 224) = v101[v72 + 8];\n        ++v72;\n      }\n      while ( v72 < v71 );\n      goto LABEL_68;\n    }\n    v72 = dword_464000 & 0xFFFFFFFFFFFFFFF8LL;\n    v73 = (unsigned __int64)(v72 - 8) >> 3;\n    v74 = ((_BYTE)v73 + 1) & 3;\n    if ( (unsigned __int64)(v72 - 8) >= 0x18 )\n    {\n      v76 = v74 - 1 - v73;\n      v75 = 0LL;\n      do\n      {\n        v77 = *(_OWORD *)&v101[v75 + 12];\n        *(_OWORD *)(v4 + 4 * v75 + 224) = *(_OWORD *)&v101[v75 + 8];\n        *(_OWORD *)(v4 + 4 * v75 + 240) = v77;\n        v78 = *(_OWORD *)&v101[v75 + 20];\n        *(_OWORD *)(v4 + 4 * v75 + 256) = *(_OWORD *)&v101[v75 + 16];\n        *(_OWORD *)(v4 + 4 * v75 + 272) = v78;\n        v79 = *(_OWORD *)&v101[v75 + 28];\n        *(_OWORD *)(v4 + 4 * v75 + 288) = *(_OWORD *)&v101[v75 + 24];\n        *(_OWORD *)(v4 + 4 * v75 + 304) = v79;\n        v70 = *(_OWORD *)&v101[v75 + 32];\n        v80 = *(_OWORD *)&v101[v75 + 36];\n        *(_OWORD *)(v4 + 4 * v75 + 320) = v70;\n        *(_OWORD *)(v4 + 4 * v75 + 336) = v80;\n        v75 += 32LL;\n        v76 += 4LL;\n      }\n      while ( v76 );\n      if ( !v74 )\n      {\nLABEL_66:\n        if ( v72 == v71 )\n          goto LABEL_68;\n        goto LABEL_67;\n      }\n    }\n    else\n    {\n      v75 = 0LL;\n      if ( !v74 )\n        goto LABEL_66;\n    }\n    v81 = v4 + 4 * v75 + 240;\n    v82 = (signed __int64)&v101[v75 + 12];\n    v83 = -v74;\n    v84 = 0LL;\n    do\n    {\n      v70 = *(_OWORD *)(v82 + v84 - 16);\n      v85 = *(_OWORD *)(v82 + v84);\n      *(_OWORD *)(v81 + v84 - 16) = v70;\n      *(_OWORD *)(v81 + v84) = v85;\n      v84 += 32LL;\n      ++v83;\n    }\n    while ( v83 );\n    goto LABEL_66;\n  }\nLABEL_68:\n  v86 = (char *)*((_QWORD *)v101 + 14);\n  if ( v86 )\n  {\n    if ( *(_QWORD *)v4 )\n      free(*(void **)v4);\n    v87 = sub_4381A0(v86);\n    *(_QWORD *)v4 = v87;\n    sub_4381E0(v87);\n  }\n  v88 = v101[36];\n  if ( v88 & 1 )\n  {\n    strcpy(*(char **)(v4 + 24), *((const char **)v101 + 15));\n    *(_BYTE *)(v4 + 456) |= 4u;\n    v88 = v101[36];\n  }\n  if ( v88 & 2 )\n  {\n    strcpy(*(char **)(v4 + 32), *((const char **)v101 + 16));\n    *(_BYTE *)(v4 + 456) |= 8u;\n  }\n  sub_41ABD0(v4);\n  sub_41A6B0(v4, *(float *)&v70);\n  *(_DWORD *)(v4 + 456) = *(_DWORD *)(v4 + 456) & 0xFFFFFFDE | 0x20;\n  result = v103;\n  *v103 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x41b510L", 
            "funcEndAddr": "0x41bdaaL", 
            "funcName": "sub_41B510"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_41BDB0(signed int a1)\n{\n  signed int *v1; // rbp\n  signed __int64 v2; // rbx\n  signed __int64 v3; // r10\n  __int64 v4; // r12\n  __int64 v5; // r13\n  __int64 v6; // r14\n  __int64 v7; // r11\n  signed __int64 v8; // rax\n  unsigned __int64 v9; // rsi\n  signed __int64 v10; // r9\n  signed __int64 v11; // rax\n  signed __int64 v12; // rcx\n  signed __int64 v13; // rdx\n  signed __int64 v14; // rbp\n  signed __int64 v15; // r8\n  __int64 v16; // rbx\n  __int64 v17; // r15\n  signed __int64 v18; // rdi\n  signed __int64 v19; // rsi\n  signed __int64 v20; // r15\n  signed __int64 v21; // rdi\n  signed __int64 v22; // rdi\n  unsigned __int64 v23; // ST80_8\n  unsigned __int64 v24; // r15\n  unsigned __int64 v25; // r12\n  unsigned __int64 v26; // rdi\n  unsigned __int64 v27; // r13\n  unsigned __int64 v28; // rsi\n  bool v29; // r14\n  bool v30; // r10\n  bool v31; // r15\n  bool v32; // si\n  bool v33; // r12\n  bool v34; // si\n  signed __int64 v35; // rsi\n  signed __int64 v36; // rsi\n  bool v37; // zf\n  bool v38; // sf\n  unsigned __int8 v39; // of\n  signed __int64 v41; // [rsp+10h] [rbp-A8h]\n  signed __int64 v42; // [rsp+18h] [rbp-A0h]\n  __int64 v43; // [rsp+20h] [rbp-98h]\n  __int64 v44; // [rsp+28h] [rbp-90h]\n  __int64 v45; // [rsp+30h] [rbp-88h]\n  signed __int64 v46; // [rsp+40h] [rbp-78h]\n  _QWORD *v47; // [rsp+48h] [rbp-70h]\n  signed __int64 v48; // [rsp+50h] [rbp-68h]\n  signed __int64 v49; // [rsp+58h] [rbp-60h]\n  __int64 v50; // [rsp+60h] [rbp-58h]\n  signed __int64 v51; // [rsp+68h] [rbp-50h]\n  signed __int64 v52; // [rsp+70h] [rbp-48h]\n  signed __int64 v53; // [rsp+78h] [rbp-40h]\n\n  v1 = (signed int *)sub_4382F0(\"plan9.c\", 35LL, 152LL);\n  v2 = a1 + 2LL;\n  *((_QWORD *)v1 + 1) = sub_4382F0(\"plan9.c\", 36LL, 92 * v2);\n  *((_QWORD *)v1 + 3) = sub_4382F0(\"plan9.c\", 37LL, 92 * v2);\n  *((_QWORD *)v1 + 2) = sub_4382F0(\"plan9.c\", 38LL, 92 * v2);\n  *((_QWORD *)v1 + 15) = sub_4382F0(\"plan9.c\", 39LL, v2);\n  *((_QWORD *)v1 + 16) = sub_4382F0(\"plan9.c\", 40LL, v2);\n  *((_QWORD *)v1 + 17) = sub_4382F0(\"plan9.c\", 41LL, 16 * v2);\n  *v1 = a1;\n  *((_QWORD *)v1 + 14) = sub_4381A0(\"unnamed\");\n  v1[36] = 0;\n  v47 = v1;\n  v3 = *v1;\n  if ( v3 >= -1 )\n  {\n    v4 = *((_QWORD *)v1 + 1);\n    v5 = *((_QWORD *)v1 + 2);\n    v6 = *((_QWORD *)v1 + 3);\n    v7 = (unsigned int)dword_464000;\n    v8 = dword_464000 & 0xFFFFFFF8;\n    v52 = v8;\n    v51 = v8 - 8;\n    v9 = (unsigned __int64)(v8 - 8) >> 3;\n    v53 = (unsigned int)dword_464000 - 1LL;\n    v10 = v5 + 60;\n    v11 = v4 + 60;\n    v12 = v6 + 60;\n    v13 = v6 + 12;\n    v50 = ((_BYTE)v9 + 1) & 1;\n    v49 = v50 - 1 - v9;\n    v14 = v4 + 16;\n    v15 = v5 + 16;\n    v16 = 0LL;\n    v42 = v3;\n    v45 = v47[1];\n    v44 = v47[2];\n    v43 = v47[3];\n    do\n    {\n      v19 = 92 * v16;\n      *(_DWORD *)(v5 + v19) = 0;\n      *(_DWORD *)(v4 + v19) = 0;\n      *(_DWORD *)(v6 + v19) = 0;\n      *(_DWORD *)(v5 + v19 + 4) = 0;\n      *(_DWORD *)(v4 + v19 + 4) = 0;\n      *(_DWORD *)(v6 + v19 + 4) = 0;\n      *(_DWORD *)(v5 + v19 + 8) = 0;\n      *(_DWORD *)(v4 + v19 + 8) = 0;\n      *(_DWORD *)(v6 + v19 + 8) = 0;\n      if ( (signed int)v7 <= 0 )\n        goto LABEL_23;\n      v20 = v19 + v5;\n      v21 = v4 + v19;\n      v46 = v4 + v19;\n      v48 = v6 + v19;\n      if ( (unsigned int)v7 < 8 )\n      {\n        v22 = 0LL;\n        v3 = v42;\nLABEL_19:\n        v36 = v22;\n        if ( v7 & 1 )\n        {\n          *(_DWORD *)(v20 + 4 * v22 + 12) = 0;\n          *(_DWORD *)(v46 + 4 * v22 + 12) = 0;\n          *(_DWORD *)(v48 + 4 * v22 + 12) = 0;\n          v36 = v22 | 1;\n        }\n        if ( v53 != v22 )\n        {\n          do\n          {\n            *(_DWORD *)(v15 + 4 * v36 - 4) = 0;\n            *(_DWORD *)(v14 + 4 * v36 - 4) = 0;\n            *(_DWORD *)(v13 + 4 * v36) = 0;\n            *(_DWORD *)(v15 + 4 * v36) = 0;\n            *(_DWORD *)(v14 + 4 * v36) = 0;\n            *(_DWORD *)(v13 + 4 * v36 + 4) = 0;\n            v36 += 2LL;\n          }\n          while ( v7 != v36 );\n        }\n        goto LABEL_23;\n      }\n      v23 = v19 + v5 + 12;\n      v41 = v19 + v5;\n      v24 = v20 + 4 * v7 + 12;\n      v25 = v4 + v19 + 12;\n      v26 = v21 + 4 * v7 + 12;\n      v27 = v6 + v19 + 12;\n      v28 = v6 + v19 + 4 * v7 + 12;\n      v29 = v25 < v24;\n      v30 = v23 < v28;\n      v31 = v27 < v24;\n      v32 = v25 < v28;\n      v33 = v27 < v26;\n      if ( v29 && v23 < v26 || v31 && v30 )\n      {\n        v22 = 0LL;\n        v3 = v42;\n        v4 = v45;\n        v5 = v44;\n        v6 = v43;\n        v20 = v41;\n        goto LABEL_19;\n      }\n      v22 = 0LL;\n      v34 = v33 && v32;\n      v3 = v42;\n      v4 = v45;\n      v5 = v44;\n      v6 = v43;\n      v20 = v41;\n      if ( v34 )\n        goto LABEL_19;\n      if ( v51 )\n      {\n        v35 = v49;\n        v17 = 0LL;\n        v18 = v46;\n        do\n        {\n          *(_OWORD *)(v10 + 4 * v17 - 48) = 0LL;\n          *(_OWORD *)(v10 + 4 * v17 - 32) = 0LL;\n          *(_OWORD *)(v11 + 4 * v17 - 48) = 0LL;\n          *(_OWORD *)(v11 + 4 * v17 - 32) = 0LL;\n          *(_OWORD *)(v12 + 4 * v17 - 48) = 0LL;\n          *(_OWORD *)(v12 + 4 * v17 - 32) = 0LL;\n          *(_OWORD *)(v10 + 4 * v17 - 16) = 0LL;\n          *(_OWORD *)(v10 + 4 * v17) = 0LL;\n          *(_OWORD *)(v11 + 4 * v17 - 16) = 0LL;\n          *(_OWORD *)(v11 + 4 * v17) = 0LL;\n          *(_OWORD *)(v12 + 4 * v17 - 16) = 0LL;\n          *(_OWORD *)(v12 + 4 * v17) = 0LL;\n          v17 += 16LL;\n          v35 += 2LL;\n        }\n        while ( v35 );\n        if ( v50 )\n        {\nLABEL_15:\n          *(_OWORD *)(v41 + 4 * v17 + 12) = 0LL;\n          *(_OWORD *)(v41 + 4 * v17 + 28) = 0LL;\n          *(_OWORD *)(v18 + 4 * v17 + 12) = 0LL;\n          *(_OWORD *)(v18 + 4 * v17 + 28) = 0LL;\n          *(_OWORD *)(v48 + 4 * v17 + 12) = 0LL;\n          *(_OWORD *)(v48 + 4 * v17 + 28) = 0LL;\n          goto LABEL_16;\n        }\n      }\n      else\n      {\n        v17 = 0LL;\n        v18 = v46;\n        if ( v50 )\n          goto LABEL_15;\n      }\nLABEL_16:\n      v22 = v52;\n      v20 = v41;\n      if ( v52 != v7 )\n        goto LABEL_19;\nLABEL_23:\n      v10 += 92LL;\n      v11 += 92LL;\n      v12 += 92LL;\n      v13 += 92LL;\n      v14 += 92LL;\n      v15 += 92LL;\n      v39 = __OFSUB__(v16, v3);\n      v37 = v16 == v3;\n      v38 = v16++ - v3 < 0;\n    }\n    while ( (unsigned __int8)(v38 ^ v39) | v37 );\n  }\n  return v47;\n}\n", 
            "funcStartAddr": "0x41bdb0L", 
            "funcEndAddr": "0x41c215L", 
            "funcName": "sub_41BDB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41C220(_QWORD *a1)\n{\n  signed __int64 v1; // r8\n  __int64 v2; // r15\n  __int64 v3; // r13\n  __int64 v4; // r11\n  __int64 v5; // r10\n  signed __int64 v6; // rax\n  unsigned __int64 v7; // rdx\n  signed __int64 v8; // r9\n  signed __int64 v9; // rax\n  signed __int64 v10; // rcx\n  signed __int64 v11; // rdx\n  signed __int64 v12; // rbp\n  signed __int64 v13; // r12\n  __int64 v14; // rbx\n  __int64 v15; // r14\n  signed __int64 v16; // rdi\n  signed __int64 v17; // rsi\n  signed __int64 v18; // r14\n  signed __int64 v19; // rdi\n  signed __int64 v20; // rdi\n  unsigned __int64 v21; // ST70_8\n  unsigned __int64 v22; // r14\n  unsigned __int64 v23; // r15\n  unsigned __int64 v24; // rdi\n  unsigned __int64 v25; // r13\n  unsigned __int64 v26; // rsi\n  bool v27; // r11\n  bool v28; // r8\n  bool v29; // r14\n  bool v30; // si\n  bool v31; // r15\n  bool v32; // si\n  signed __int64 v33; // rsi\n  signed __int64 v34; // rsi\n  bool v35; // zf\n  bool v36; // sf\n  unsigned __int8 v37; // of\n  signed __int64 v38; // [rsp+2h] [rbp-A0h]\n  signed __int64 v39; // [rsp+Ah] [rbp-98h]\n  __int64 v40; // [rsp+12h] [rbp-90h]\n  __int64 v41; // [rsp+1Ah] [rbp-88h]\n  __int64 v42; // [rsp+22h] [rbp-80h]\n  signed __int64 v43; // [rsp+32h] [rbp-70h]\n  signed __int64 v44; // [rsp+3Ah] [rbp-68h]\n  signed __int64 v45; // [rsp+42h] [rbp-60h]\n  __int64 v46; // [rsp+4Ah] [rbp-58h]\n  signed __int64 v47; // [rsp+52h] [rbp-50h]\n  signed __int64 v48; // [rsp+5Ah] [rbp-48h]\n  signed __int64 v49; // [rsp+62h] [rbp-40h]\n\n  v1 = *(signed int *)a1;\n  if ( v1 >= -1 )\n  {\n    v2 = a1[1];\n    v3 = a1[2];\n    v4 = a1[3];\n    v5 = (unsigned int)dword_464000;\n    v6 = dword_464000 & 0xFFFFFFF8;\n    v48 = v6;\n    v47 = v6 - 8;\n    v7 = (unsigned __int64)(v6 - 8) >> 3;\n    v49 = (unsigned int)dword_464000 - 1LL;\n    v8 = v3 + 60;\n    v9 = v2 + 60;\n    v10 = v4 + 60;\n    v46 = ((_BYTE)v7 + 1) & 1;\n    v45 = v46 - 1 - v7;\n    v11 = v3 + 16;\n    v12 = v2 + 16;\n    v13 = v4 + 16;\n    v14 = 0LL;\n    v39 = *(signed int *)a1;\n    v42 = a1[1];\n    v41 = a1[2];\n    v40 = a1[3];\n    do\n    {\n      v17 = 92 * v14;\n      *(_DWORD *)(v3 + v17) = 0;\n      *(_DWORD *)(v2 + v17) = 0;\n      *(_DWORD *)(v4 + v17) = 0;\n      *(_DWORD *)(v3 + v17 + 4) = 0;\n      *(_DWORD *)(v2 + v17 + 4) = 0;\n      *(_DWORD *)(v4 + v17 + 4) = 0;\n      *(_DWORD *)(v3 + v17 + 8) = 0;\n      *(_DWORD *)(v2 + v17 + 8) = 0;\n      *(_DWORD *)(v4 + v17 + 8) = 0;\n      if ( (signed int)v5 <= 0 )\n        goto LABEL_23;\n      v18 = v17 + v3;\n      v19 = v2 + v17;\n      v43 = v2 + v17;\n      v44 = v4 + v17;\n      if ( (unsigned int)v5 < 8 )\n      {\n        v20 = 0LL;\n        v1 = v39;\nLABEL_19:\n        v34 = v20;\n        if ( v5 & 1 )\n        {\n          *(_DWORD *)(v18 + 4 * v20 + 12) = 0;\n          *(_DWORD *)(v43 + 4 * v20 + 12) = 0;\n          *(_DWORD *)(v44 + 4 * v20 + 12) = 0;\n          v34 = v20 | 1;\n        }\n        if ( v49 != v20 )\n        {\n          do\n          {\n            *(_DWORD *)(v11 + 4 * v34 - 4) = 0;\n            *(_DWORD *)(v12 + 4 * v34 - 4) = 0;\n            *(_DWORD *)(v13 + 4 * v34 - 4) = 0;\n            *(_DWORD *)(v11 + 4 * v34) = 0;\n            *(_DWORD *)(v12 + 4 * v34) = 0;\n            *(_DWORD *)(v13 + 4 * v34) = 0;\n            v34 += 2LL;\n          }\n          while ( v5 != v34 );\n        }\n        goto LABEL_23;\n      }\n      v21 = v17 + v3 + 12;\n      v38 = v17 + v3;\n      v22 = v18 + 4 * v5 + 12;\n      v23 = v2 + v17 + 12;\n      v24 = v19 + 4 * v5 + 12;\n      v25 = v4 + v17 + 12;\n      v26 = v4 + v17 + 4 * v5 + 12;\n      v27 = v23 < v22;\n      v28 = v21 < v26;\n      v29 = v25 < v22;\n      v30 = v23 < v26;\n      v31 = v25 < v24;\n      if ( v27 && v21 < v24 || v29 && v28 )\n      {\n        v20 = 0LL;\n        v1 = v39;\n        v2 = v42;\n        v3 = v41;\n        v4 = v40;\n        v18 = v38;\n        goto LABEL_19;\n      }\n      v20 = 0LL;\n      v32 = v31 && v30;\n      v1 = v39;\n      v2 = v42;\n      v3 = v41;\n      v4 = v40;\n      v18 = v38;\n      if ( v32 )\n        goto LABEL_19;\n      if ( v47 )\n      {\n        v33 = v45;\n        v15 = 0LL;\n        v16 = v43;\n        do\n        {\n          *(_OWORD *)(v8 + 4 * v15 - 48) = 0LL;\n          *(_OWORD *)(v8 + 4 * v15 - 32) = 0LL;\n          *(_OWORD *)(v9 + 4 * v15 - 48) = 0LL;\n          *(_OWORD *)(v9 + 4 * v15 - 32) = 0LL;\n          *(_OWORD *)(v10 + 4 * v15 - 48) = 0LL;\n          *(_OWORD *)(v10 + 4 * v15 - 32) = 0LL;\n          *(_OWORD *)(v8 + 4 * v15 - 16) = 0LL;\n          *(_OWORD *)(v8 + 4 * v15) = 0LL;\n          *(_OWORD *)(v9 + 4 * v15 - 16) = 0LL;\n          *(_OWORD *)(v9 + 4 * v15) = 0LL;\n          *(_OWORD *)(v10 + 4 * v15 - 16) = 0LL;\n          *(_OWORD *)(v10 + 4 * v15) = 0LL;\n          v15 += 16LL;\n          v33 += 2LL;\n        }\n        while ( v33 );\n        if ( v46 )\n        {\nLABEL_15:\n          *(_OWORD *)(v38 + 4 * v15 + 12) = 0LL;\n          *(_OWORD *)(v38 + 4 * v15 + 28) = 0LL;\n          *(_OWORD *)(v16 + 4 * v15 + 12) = 0LL;\n          *(_OWORD *)(v16 + 4 * v15 + 28) = 0LL;\n          *(_OWORD *)(v44 + 4 * v15 + 12) = 0LL;\n          *(_OWORD *)(v44 + 4 * v15 + 28) = 0LL;\n          goto LABEL_16;\n        }\n      }\n      else\n      {\n        v15 = 0LL;\n        v16 = v43;\n        if ( v46 )\n          goto LABEL_15;\n      }\nLABEL_16:\n      v20 = v48;\n      v18 = v38;\n      if ( v48 != v5 )\n        goto LABEL_19;\nLABEL_23:\n      v8 += 92LL;\n      v9 += 92LL;\n      v10 += 92LL;\n      v11 += 92LL;\n      v12 += 92LL;\n      v13 += 92LL;\n      v37 = __OFSUB__(v14, v1);\n      v35 = v14 == v1;\n      v36 = v14++ - v1 < 0;\n    }\n    while ( (unsigned __int8)(v36 ^ v37) | v35 );\n  }\n}\n", 
            "funcStartAddr": "0x41c220L", 
            "funcEndAddr": "0x41c589L", 
            "funcName": "sub_41C220"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41C590(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v1 = ptr;\n  if ( !ptr )\n    return 0LL;\n  free(*((void **)ptr + 15));\n  free(*((void **)ptr + 16));\n  free(*((void **)ptr + 17));\n  free(*((void **)ptr + 14));\n  v2 = (void *)*((_QWORD *)ptr + 2);\n  if ( v2 )\n    free(v2);\n  v3 = (void *)v1[1];\n  if ( v3 )\n    free(v3);\n  v4 = (void *)v1[3];\n  if ( v4 )\n    free(v4);\n  free(v1);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x41c590L", 
            "funcEndAddr": "0x41c600L", 
            "funcName": "sub_41C590"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41C600(signed int *a1)\n{\n  signed __int64 v1; // r15\n  __int64 v2; // rbx\n  signed __int64 result; // rax\n\n  if ( *a1 >= 0 )\n  {\n    v1 = -1LL;\n    v2 = 0LL;\n    do\n    {\n      sub_43DC80(v2 + *((_QWORD *)a1 + 2), 3LL);\n      sub_43DC80(v2 + *((_QWORD *)a1 + 1), 3LL);\n      if ( v2 )\n      {\n        sub_43DC80(v2 + *((_QWORD *)a1 + 3), 3LL);\n        sub_43DC80(*((_QWORD *)a1 + 2) + v2 + 12, (unsigned int)dword_464000);\n      }\n      sub_43DC80(*((_QWORD *)a1 + 1) + v2 + 12, (unsigned int)dword_464000);\n      result = *a1;\n      ++v1;\n      v2 += 92LL;\n    }\n    while ( v1 < result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41c600L", 
            "funcEndAddr": "0x41c69cL", 
            "funcName": "sub_41C600"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41C6A0(unsigned __int64 a1, char a2)\n{\n  signed __int64 result; // rax\n  signed __int64 v3; // r8\n  signed __int64 v4; // rcx\n  signed __int64 v5; // r8\n  signed __int64 v6; // rcx\n  unsigned __int64 v7; // rsi\n  __int64 v8; // rdx\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rsi\n  __int64 v11; // rdx\n  __int64 v12; // rsi\n  __int64 v13; // rdx\n  __int128 v14; // xmm1\n  __int128 v15; // xmm1\n  __int128 v16; // xmm1\n  __int128 v17; // xmm1\n  __int64 v18; // rdx\n  __int128 v19; // xmm1\n\n  result = (unsigned int)dword_464004;\n  if ( dword_464004 == 2 )\n  {\n    v5 = dword_464000;\n    if ( dword_464000 <= 0LL )\n      return result;\n    if ( (unsigned int)dword_464000 < 8 )\n    {\n      v6 = 0LL;\n      do\nLABEL_25:\n        *(_DWORD *)(a1 + 4 * v6++) = 1048576000;\n      while ( v6 < v5 );\n      return result;\n    }\n    v6 = dword_464000 & 0xFFFFFFFFFFFFFFF8LL;\n    result = v6 - 8;\n    v7 = (unsigned __int64)(v6 - 8) >> 3;\n    v8 = ((_BYTE)v7 + 1) & 7;\n    if ( (unsigned __int64)(v6 - 8) >= 0x38 )\n    {\n      result = v8 - 1 - v7;\n      v9 = 0LL;\n      do\n      {\n        *(_OWORD *)(a1 + 4 * v9) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 16) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 32) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 48) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 64) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 80) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 96) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 112) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 128) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 144) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 160) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 176) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 192) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 208) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 224) = xmmword_440170;\n        *(_OWORD *)(a1 + 4 * v9 + 240) = xmmword_440170;\n        v9 += 64LL;\n        result += 8LL;\n      }\n      while ( result );\n      if ( !v8 )\n      {\nLABEL_24:\n        if ( v6 == v5 )\n          return result;\n        goto LABEL_25;\n      }\n    }\n    else\n    {\n      v9 = 0LL;\n      if ( !v8 )\n        goto LABEL_24;\n    }\n    result = a1 + 4 * v9 + 16;\n    v13 = -v8;\n    do\n    {\n      *(_OWORD *)(result - 16) = xmmword_440170;\n      *(_OWORD *)result = xmmword_440170;\n      result += 32LL;\n      ++v13;\n    }\n    while ( v13 );\n    goto LABEL_24;\n  }\n  if ( dword_464004 != 3 )\n    sub_4325B0(\"No support for non-protein, non-nucleic acid alphabets.\", a2);\n  v3 = dword_464000;\n  if ( dword_464000 > 0LL )\n  {\n    if ( (unsigned int)dword_464000 < 8 )\n    {\n      v4 = 0LL;\n      goto LABEL_33;\n    }\n    if ( (unsigned __int64)xmmword_44FB20 + 4 * dword_464000 > a1\n      && a1 + 4LL * dword_464000 > (unsigned __int64)xmmword_44FB20 )\n    {\n      v4 = 0LL;\n      do\n      {\nLABEL_33:\n        result = *((unsigned int *)xmmword_44FB20 + v4);\n        *(_DWORD *)(a1 + 4 * v4++) = result;\n      }\n      while ( v4 < v3 );\n      return result;\n    }\n    v4 = dword_464000 & 0xFFFFFFFFFFFFFFF8LL;\n    result = v4 - 8;\n    v10 = (unsigned __int64)(v4 - 8) >> 3;\n    v11 = ((_BYTE)v10 + 1) & 3;\n    if ( (unsigned __int64)(v4 - 8) >= 0x18 )\n    {\n      result = v11 - 1 - v10;\n      v12 = 0LL;\n      do\n      {\n        v14 = xmmword_44FB30[v12];\n        *(_OWORD *)(a1 + 1 * v12) = xmmword_44FB20[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 16) = v14;\n        v15 = xmmword_44FB50[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 32) = xmmword_44FB40[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 48) = v15;\n        v16 = xmmword_44FB70[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 64) = xmmword_44FB60[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 80) = v16;\n        v17 = xmmword_44FB90[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 96) = xmmword_44FB80[v12];\n        *(_OWORD *)(a1 + 1 * v12 + 112) = v17;\n        v12 += 8LL;\n        result += 4LL;\n      }\n      while ( result );\n      if ( !v11 )\n      {\nLABEL_32:\n        if ( v4 == v3 )\n          return result;\n        goto LABEL_33;\n      }\n    }\n    else\n    {\n      v12 = 0LL;\n      if ( !v11 )\n        goto LABEL_32;\n    }\n    result = 1 * v12 + 16;\n    v18 = -v11;\n    do\n    {\n      v19 = *(__int128 *)((char *)xmmword_44FB20 + result);\n      *(_OWORD *)(a1 + result - 16) = *(__int128 *)((char *)&xmmword_44FB10 + result);\n      *(_OWORD *)(a1 + result) = v19;\n      result += 32LL;\n      ++v18;\n    }\n    while ( v18 );\n    goto LABEL_32;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41c6a0L", 
            "funcEndAddr": "0x41c934L", 
            "funcName": "sub_41C6A0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_41C940(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, float a5)\n{\n  __int64 v5; // r14\n  __int64 v6; // rbx\n  void *v8; // [rsp+0h] [rbp-38h]\n  void *ptr; // [rsp+8h] [rbp-30h]\n  float v10; // [rsp+14h] [rbp-24h]\n\n  v5 = a4;\n  v6 = a3;\n  sub_403250(a1, a2, a3, (void ***)&ptr);\n  sub_41C9D0(a1, a2, v6, &v8);\n  sub_41CE60(a2, v6, ptr, v8, v8);\n  sub_41D170(a2, *(unsigned int *)(v6 + 136), v8, ptr, v5);\n  v10 = a5;\n  sub_402E80(ptr);\n  sub_402E80(v8);\n  return v10;\n}\n", 
            "funcStartAddr": "0x41c940L", 
            "funcEndAddr": "0x41c9c8L", 
            "funcName": "sub_41C940"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_41C9D0(__int64 a1, unsigned int a2, __int64 a3, void **a4)\n{\n  __int64 v4; // r14\n  int v5; // ebx\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  int v8; // er9\n  __int64 v9; // rcx\n  signed __int64 v10; // r15\n  __int64 v11; // r13\n  int v12; // er9\n  __int64 v13; // rdx\n  __int64 v14; // r8\n  __int64 v15; // r10\n  __int64 v16; // rbp\n  __int64 v17; // r11\n  __int64 v18; // rsi\n  int v19; // er9\n  signed __int64 v20; // rdx\n  int v21; // edi\n  __int64 v22; // rsi\n  _DWORD *v23; // rax\n  unsigned int v24; // eax\n  __int64 v25; // rcx\n  signed __int64 v26; // rbx\n  signed __int64 v27; // rbx\n  int v28; // eax\n  __int64 v29; // rcx\n  int v30; // eax\n  __int64 v31; // rcx\n  _DWORD *v32; // rdx\n  int v33; // eax\n  __int64 v34; // rdx\n  __int64 v35; // rax\n  __int64 v36; // rsi\n  signed __int64 v37; // rbx\n  unsigned int v38; // ebp\n  int v39; // eax\n  int v40; // eax\n  __int64 v41; // rcx\n  __int64 v42; // rdx\n  int v43; // eax\n  __int64 v44; // rcx\n  int v45; // eax\n  signed int v46; // ebx\n  __int64 v48; // [rsp+0h] [rbp-68h]\n  __int64 v49; // [rsp+8h] [rbp-60h]\n  __int64 v50; // [rsp+10h] [rbp-58h]\n  __int64 v51; // [rsp+18h] [rbp-50h]\n  void *ptr; // [rsp+20h] [rbp-48h]\n  __int64 v53; // [rsp+28h] [rbp-40h]\n  void **v54; // [rsp+30h] [rbp-38h]\n\n  v54 = a4;\n  v4 = a3;\n  v5 = a2;\n  v6 = a1;\n  v7 = sub_402E20(a2 + 1, *(_DWORD *)(a3 + 136), &v49, &v48, &v51, &v50);\n  v8 = *(_DWORD *)(v4 + 352);\n  v9 = v49;\n  v10 = (signed int)a2;\n  v11 = *(_QWORD *)(v49 + 8LL * (signed int)a2);\n  *(_DWORD *)(v11 + 8) = v8;\n  v12 = *(_DWORD *)(v4 + 344) + v8;\n  *(_DWORD *)(v11 + 4) = v12;\n  *(_DWORD *)v11 = -987654321;\n  *(_QWORD *)(v11 + 12) = -4241943005140773041LL;\n  v13 = *(signed int *)(v4 + 136);\n  ptr = v7;\n  if ( v13 > 0 )\n  {\n    v53 = a2;\n    v14 = *(_QWORD *)(v4 + 320);\n    v15 = *(_QWORD *)(v4 + 376);\n    v16 = *(_QWORD *)(v48 + 8LL * (signed int)a2);\n    v17 = *(_QWORD *)(v50 + 8LL * (signed int)a2);\n    v18 = *(_QWORD *)(v51 + 8LL * (signed int)a2);\n    v19 = *(_DWORD *)(v15 + 4 * v13) + v12;\n    *(_DWORD *)(v16 + 4 * v13) = v19;\n    *(_DWORD *)(v16 + 4 * v13) = *(_DWORD *)(*(_QWORD *)(v14 + 8LL * *(char *)(a1 + v5)) + 4 * v13) + v19;\n    *(_DWORD *)(v17 + 4 * v13) = -987654321;\n    *(_DWORD *)(v18 + 4 * v13) = -987654321;\n    if ( (_DWORD)v13 != 1 )\n    {\n      v20 = v13 + 1;\n      do\n      {\n        v21 = *(_DWORD *)(v11 + 4) + *(_DWORD *)(v15 + 4 * v20 - 8);\n        *(_DWORD *)(v16 + 4 * v20 - 8) = v21;\n        *(_DWORD *)(v16 + 4 * v20 - 8) = *(_DWORD *)(*(_QWORD *)(v14 + 8LL * *(char *)(v6 + v10)) + 4 * v20 - 8) + v21;\n        *(_DWORD *)(v17 + 4 * v20 - 8) = -987654321;\n        *(_DWORD *)(v18 + 4 * v20-- - 8) = -987654321;\n      }\n      while ( v20 > 2 );\n    }\n    LODWORD(v13) = *(_DWORD *)(v4 + 136);\n    v5 = v53;\n  }\n  v22 = *(_QWORD *)(v4 + 312);\n  *(_DWORD *)(*(_QWORD *)(v22 + 16) + 4LL * (signed int)v13 - 4) = -987654321;\n  *(_DWORD *)(*(_QWORD *)(v22 + 48) + 4LL * *(signed int *)(v4 + 136) - 4) = -987654321;\n  if ( v5 > 0 )\n  {\n    while ( 1 )\n    {\n      v23 = *(_DWORD **)(v9 + 8 * v10 - 8);\n      v23[2] = *(_DWORD *)(v11 + 8) + *(_DWORD *)(v4 + 356);\n      *v23 = -987654321;\n      v24 = sub_415C80(\n              0xC521974F,\n              *(_DWORD *)(*(_QWORD *)(v48 + 8 * v10) + 4LL * *(signed int *)(v4 + 136))\n            + *(_DWORD *)(*(_QWORD *)(v4 + 368) + 4LL * *(signed int *)(v4 + 136) - 4));\n      v25 = v49;\n      **(_DWORD **)(v49 + 8 * v10 - 8) = v24;\n      v26 = *(signed int *)(v4 + 136);\n      if ( v26 >= 2 )\n      {\n        v27 = v26 + 1;\n        do\n        {\n          v24 = sub_415C80(\n                  v24,\n                  *(_DWORD *)(*(_QWORD *)(v48 + 8 * v10) + 4 * v27 - 8)\n                + *(_DWORD *)(*(_QWORD *)(v4 + 368) + 4 * v27 - 8));\n          v25 = v49;\n          **(_DWORD **)(v49 + 8 * v10 - 8) = v24;\n          --v27;\n        }\n        while ( v27 > 2 );\n      }\n      v28 = sub_415C80(\n              *(_DWORD *)(v4 + 360) + v24,\n              *(_DWORD *)(*(_QWORD *)(v25 + 8 * v10) + 12LL) + *(_DWORD *)(v4 + 364));\n      v29 = *(_QWORD *)(v49 + 8 * v10 - 8);\n      *(_DWORD *)(v29 + 12) = v28;\n      v30 = sub_415C80(*(_DWORD *)(v29 + 8) + *(_DWORD *)(v4 + 344), *(_DWORD *)(v4 + 348) + v28);\n      v31 = v49;\n      v32 = *(_DWORD **)(v49 + 8 * v10 - 8);\n      v32[1] = v30;\n      v33 = sub_415C80(\n              *v32 + *(_DWORD *)(v4 + 336),\n              *(_DWORD *)(*(_QWORD *)(v31 + 8 * v10) + 16LL) + *(_DWORD *)(v4 + 340));\n      v9 = v49;\n      v34 = *(_QWORD *)(v49 + 8 * v10 - 8);\n      *(_DWORD *)(v34 + 16) = v33;\n      if ( v10 < 2 )\n        break;\n      v35 = *(_QWORD *)(v4 + 376);\n      v36 = v48;\n      *(_DWORD *)(*(_QWORD *)(v48 + 8 * v10 - 8) + 4LL * *(signed int *)(v4 + 136)) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 320) + 8LL * *(char *)(v6 + v10 - 1))\n                                                                                                + 4LL\n                                                                                                * *(signed int *)(v4 + 136))\n                                                                                    + *(_DWORD *)(v34 + 4)\n                                                                                    + *(_DWORD *)(v35\n                                                                                                + 4LL\n                                                                                                * *(signed int *)(v4 + 136));\n      *(_DWORD *)(*(_QWORD *)(v50 + 8 * v10 - 8) + 4LL * *(signed int *)(v4 + 136)) = -987654321;\n      v37 = *(signed int *)(v4 + 136);\n      if ( v37 >= 2 )\n      {\n        while ( 1 )\n        {\n          v38 = sub_415C80(\n                  *(_DWORD *)(v34 + 4) + *(_DWORD *)(v35 + 4 * v37 - 4),\n                  *(_DWORD *)(*(_QWORD *)(v36 + 8 * v10) + 4 * v37) + *(_DWORD *)(**(_QWORD **)(v4 + 312) + 4 * v37 - 4));\n          v39 = sub_415C80(\n                  *(_DWORD *)(*(_QWORD *)(v51 + 8 * v10) + 4 * v37 - 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 8LL) + 4 * v37 - 4),\n                  *(_DWORD *)(*(_QWORD *)(v50 + 8 * v10 - 8) + 4 * v37)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 16LL) + 4 * v37 - 4));\n          v40 = sub_415C80(v38, v39);\n          v41 = v48;\n          v42 = *(_QWORD *)(v48 + 8 * v10 - 8);\n          *(_DWORD *)(v42 + 4 * v37 - 4) = v40;\n          *(_DWORD *)(v42 + 4 * v37 - 4) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 320) + 8LL * *(char *)(v6 + v10 - 1))\n                                                     + 4 * v37\n                                                     - 4)\n                                         + v40;\n          v43 = sub_415C80(\n                  *(_DWORD *)(*(_QWORD *)(v51 + 8 * v10) + 4 * v37 - 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 32LL) + 4 * v37 - 4),\n                  *(_DWORD *)(*(_QWORD *)(v41 + 8 * v10) + 4 * v37)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 24LL) + 4 * v37 - 4));\n          v44 = *(_QWORD *)(v51 + 8 * v10 - 8);\n          *(_DWORD *)(v44 + 4 * v37 - 4) = v43;\n          *(_DWORD *)(v44 + 4 * v37 - 4) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 8LL * *(char *)(v6 + v10 - 1))\n                                                     + 4 * v37\n                                                     - 4)\n                                         + v43;\n          v45 = sub_415C80(\n                  *(_DWORD *)(*(_QWORD *)(v50 + 8 * v10 - 8) + 4 * v37)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 48LL) + 4 * v37 - 4),\n                  *(_DWORD *)(*(_QWORD *)(v48 + 8 * v10) + 4 * v37)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 312) + 40LL) + 4 * v37 - 4));\n          *(_DWORD *)(*(_QWORD *)(v50 + 8 * v10 - 8) + 4 * v37 - 4) = v45;\n          v9 = v49;\n          if ( v37 < 3 )\n            break;\n          --v37;\n          v34 = *(_QWORD *)(v49 + 8 * v10 - 8);\n          v35 = *(_QWORD *)(v4 + 376);\n          v36 = v48;\n        }\n        if ( v10 < 2 )\n          break;\n      }\n      v11 = *(_QWORD *)(v9 + 8 * v10-- - 8);\n    }\n  }\n  v46 = *(_DWORD *)(*(_QWORD *)v9 + 16LL);\n  if ( v54 )\n    *v54 = ptr;\n  else\n    sub_402E80(ptr);\n  return sub_415B40(v46);\n}\n", 
            "funcStartAddr": "0x41c9d0L", 
            "funcEndAddr": "0x41ce58L", 
            "funcName": "sub_41C9D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41CE60(int a1, __int64 a2, _QWORD *a3, __int64 **a4, _QWORD *a5)\n{\n  _QWORD *v5; // rbx\n  __int64 v6; // r12\n  __int64 *v7; // rax\n  __int64 v8; // rdx\n  int v9; // ebp\n  signed __int64 v10; // r14\n  __int64 **v11; // r15\n  _DWORD *v12; // rdi\n  _DWORD *v13; // rax\n  __int64 v14; // rsi\n  signed __int64 v15; // rdx\n  __int64 v16; // rax\n  signed __int64 v17; // r13\n  unsigned int v18; // ebp\n  int v19; // eax\n  int v20; // eax\n  __int64 v21; // rcx\n  int v22; // eax\n  __int64 v23; // rcx\n  __int64 v24; // rdx\n  unsigned int v25; // er13\n  int v26; // eax\n  int v27; // eax\n  __int64 v28; // rcx\n  _DWORD *v29; // rax\n  int v30; // [rsp+4h] [rbp-44h]\n  _QWORD *v31; // [rsp+8h] [rbp-40h]\n  __int64 **v32; // [rsp+10h] [rbp-38h]\n\n  v5 = a3;\n  v6 = a2;\n  if ( a1 > 0 )\n  {\n    v7 = *a4;\n    v8 = **a4;\n    v9 = *(_DWORD *)(v8 + 16);\n    v10 = a1;\n    v30 = *(_DWORD *)(v8 + 16);\n    v31 = a5;\n    v32 = a4;\n    v11 = a4;\n    while ( 1 )\n    {\n      v12 = *(_DWORD **)(*v5 + 8 * v10 - 8);\n      v13 = (_DWORD *)v7[v10];\n      v14 = *(_QWORD *)(*a5 + 8 * v10);\n      *(_DWORD *)(v14 + 8) = v13[2] + *(_DWORD *)(v6 + 356) + v12[2] - v9;\n      *(_DWORD *)(v14 + 12) = v13[3] + *(_DWORD *)(v6 + 364) + v12[3] - v9;\n      *(_DWORD *)(v14 + 16) = v13[4] + *(_DWORD *)(v6 + 340) + v12[4] - v9;\n      *(_QWORD *)v14 = -4241943005140773041LL;\n      LODWORD(v15) = *(_DWORD *)(v6 + 136);\n      v16 = a4[1][v10];\n      if ( (signed int)v15 >= 2 )\n      {\n        v17 = 1LL;\n        do\n        {\n          *(_DWORD *)(*(_QWORD *)(a5[1] + 8 * v10) + 4 * v17) = *(_DWORD *)(v16 + 4 * v17);\n          v18 = sub_415C80(\n                  *(_DWORD *)(*(_QWORD *)(v5[1] + 8 * v10 - 8) + 4 * v17 - 4)\n                + *(_DWORD *)(**(_QWORD **)(v6 + 312) + 4 * v17 - 4),\n                  *(_DWORD *)(*(_QWORD *)(v5[2] + 8 * v10 - 8) + 4 * v17 - 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 24LL) + 4 * v17 - 4));\n          v19 = sub_415C80(\n                  **(_DWORD **)(*v5 + 8 * v10 - 8) + *(_DWORD *)(*(_QWORD *)(v6 + 368) + 4 * v17),\n                  *(_DWORD *)(*(_QWORD *)(v5[3] + 8 * v10 - 8) + 4 * v17 - 4)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 40LL) + 4 * v17 - 4));\n          v20 = sub_415C80(v18, v19);\n          v21 = *(_QWORD *)(v31[1] + 8 * v10);\n          *(_DWORD *)(v21 + 4 * v17) += v20 - v30;\n          *(_DWORD *)(*(_QWORD *)(v31[2] + 8 * v10) + 4 * v17) = *(_DWORD *)(v11[2][v10] + 4 * v17);\n          v22 = sub_415C80(\n                  *(_DWORD *)(*(_QWORD *)(v5[1] + 8 * v10 - 8) + 4 * v17)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 8LL) + 4 * v17),\n                  *(_DWORD *)(*(_QWORD *)(v5[2] + 8 * v10 - 8) + 4 * v17)\n                + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 32LL) + 4 * v17));\n          a5 = v31;\n          v23 = *(_QWORD *)(v31[2] + 8 * v10);\n          *(_DWORD *)(v23 + 4 * v17) += v22 - v30;\n          *(_DWORD *)(*(_QWORD *)(v31[3] + 8 * v10) + 4 * v17++) = -987654321;\n          v15 = *(signed int *)(v6 + 136);\n          v16 = v11[1][v10];\n        }\n        while ( v17 < v15 );\n      }\n      *(_DWORD *)(*(_QWORD *)(a5[1] + 8 * v10) + 4LL * (signed int)v15) = *(_DWORD *)(v16 + 4LL * (signed int)v15);\n      v24 = *(signed int *)(v6 + 136);\n      v25 = sub_415C80(\n              *(_DWORD *)(*(_QWORD *)(v5[1] + 8 * v10 - 8) + 4 * v24 - 4)\n            + *(_DWORD *)(**(_QWORD **)(v6 + 312) + 4 * v24 - 4),\n              *(_DWORD *)(*(_QWORD *)(v5[2] + 8 * v10 - 8) + 4 * v24 - 4)\n            + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 24LL) + 4 * v24 - 4));\n      v26 = sub_415C80(\n              **(_DWORD **)(*v5 + 8 * v10 - 8) + *(_DWORD *)(*(_QWORD *)(v6 + 368) + 4LL * *(signed int *)(v6 + 136)),\n              *(_DWORD *)(*(_QWORD *)(v5[3] + 8 * v10 - 8) + 4LL * *(signed int *)(v6 + 136) - 4)\n            + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 312) + 40LL) + 4LL * *(signed int *)(v6 + 136) - 4));\n      v27 = sub_415C80(v25, v26);\n      a5 = v31;\n      v28 = *(_QWORD *)(v31[1] + 8 * v10);\n      *(_DWORD *)(v28 + 4LL * *(signed int *)(v6 + 136)) += v27;\n      v9 = v30;\n      *(_DWORD *)(v28 + 4LL * *(signed int *)(v6 + 136)) -= v30;\n      v29 = *(_DWORD **)(v31[3] + 8 * v10);\n      *v29 = -987654321;\n      v29[*(signed int *)(v6 + 136)] = -987654321;\n      *(_DWORD *)(*(_QWORD *)(v31[2] + 8 * v10) + 4LL * *(signed int *)(v6 + 136)) = -987654321;\n      a4 = v32;\n      if ( v10 < 2 )\n        break;\n      --v10;\n      v7 = *v32;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x41ce60L", 
            "funcEndAddr": "0x41d16eL", 
            "funcName": "sub_41CE60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41D170(__int64 a1, int a2, _QWORD *a3, __int64 **a4, _QWORD *a5)\n{\n  _QWORD *v5; // r15\n  unsigned int v6; // er12\n  unsigned __int64 *v7; // r14\n  unsigned __int64 *v8; // r13\n  unsigned __int64 *v9; // rbx\n  __int64 v10; // rax\n  unsigned __int64 v11; // rcx\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // rsi\n  __int64 v14; // rax\n  signed __int64 v15; // r9\n  unsigned __int64 v16; // rbp\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // rdi\n  bool v19; // r11\n  bool v20; // r10\n  bool v21; // r12\n  bool v22; // bp\n  bool v23; // r8\n  bool v24; // di\n  unsigned __int64 v25; // rbp\n  __int64 v26; // r8\n  signed __int64 v27; // rdi\n  __int64 v28; // rbp\n  signed __int64 v29; // rdi\n  signed __int64 v30; // rax\n  signed __int64 v31; // rsi\n  signed __int64 v32; // rdx\n  signed __int64 v33; // rcx\n  __int64 v34; // rdi\n  __int64 v35; // rcx\n  __int64 v36; // rax\n  signed __int64 v37; // rbp\n  _DWORD *v38; // rax\n  __int64 i; // r12\n  signed int v40; // ecx\n  signed int v41; // edx\n  signed int v42; // edi\n  int v43; // eax\n  unsigned __int64 v44; // rcx\n  unsigned __int64 v45; // rax\n  signed int v46; // ecx\n  unsigned __int64 v47; // rax\n  signed int v48; // edi\n  signed int v49; // eax\n  _DWORD *v50; // rcx\n  unsigned __int64 v51; // rdx\n  signed int v52; // eax\n  signed __int64 v53; // rsi\n  signed int v54; // edi\n  signed int v55; // edi\n  signed int v56; // edi\n  signed int v57; // edi\n  signed int *v58; // rdx\n  __int64 v59; // rsi\n  signed int v60; // edi\n  signed int v61; // eax\n  signed int *v62; // rcx\n  signed int v63; // edx\n  signed int v64; // edx\n  signed int v65; // eax\n  __int64 v66; // rcx\n  signed int v67; // edx\n  signed int v68; // er14\n  __int64 *v69; // [rsp+8h] [rbp-90h]\n  int v70; // [rsp+10h] [rbp-88h]\n  __int64 v71; // [rsp+18h] [rbp-80h]\n  unsigned __int64 *v72; // [rsp+20h] [rbp-78h]\n  unsigned __int64 v73; // [rsp+28h] [rbp-70h]\n  __int64 **v74; // [rsp+30h] [rbp-68h]\n  _QWORD *v75; // [rsp+38h] [rbp-60h]\n  __int64 v76; // [rsp+40h] [rbp-58h]\n  int v77; // [rsp+48h] [rbp-50h]\n  __int64 v78; // [rsp+58h] [rbp-40h]\n  __int64 v79; // [rsp+60h] [rbp-38h]\n\n  v75 = a5;\n  v5 = a3;\n  v6 = a2;\n  v71 = a1;\n  v7 = (unsigned __int64 *)a4[1];\n  v8 = (unsigned __int64 *)a4[2];\n  v74 = a4;\n  v9 = (unsigned __int64 *)a4[3];\n  v69 = *a4;\n  v10 = **a4;\n  *(_OWORD *)v10 = xmmword_4401D0;\n  *(_DWORD *)(v10 + 16) = -987654321;\n  v70 = a2;\n  if ( a2 < 0 )\n    goto LABEL_20;\n  v11 = *v9;\n  v12 = *v8;\n  v13 = *v7;\n  v14 = v6 + 1;\n  if ( (unsigned int)v14 < 8 )\n  {\n    v15 = 0LL;\n    goto LABEL_15;\n  }\n  v16 = v11 + 4 * v14;\n  v17 = v12 + 4 * v14;\n  v18 = v13 + 4 * v14;\n  v19 = v11 < v17;\n  v20 = v12 < v16;\n  v21 = v11 < v18;\n  v22 = v13 < v16;\n  v23 = v12 < v18;\n  v24 = v13 < v17;\n  v15 = 0LL;\n  if ( v20 && v19 || v22 && v21 )\n  {\n    v6 = v70;\n    goto LABEL_15;\n  }\n  v6 = v70;\n  if ( !v24 || !v23 )\n  {\n    v15 = (unsigned int)v14 & 0xFFFFFFF8;\n    v25 = (unsigned __int64)(v15 - 8) >> 3;\n    v26 = ((_BYTE)v25 + 1) & 1;\n    if ( v15 == 8 )\n    {\n      v28 = 0LL;\n      if ( v26 )\n      {\nLABEL_11:\n        *(_OWORD *)(v11 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v11 + 4 * v28 + 16) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28 + 16) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28 + 16) = xmmword_4401D0;\n        goto LABEL_12;\n      }\n    }\n    else\n    {\n      v27 = v26 - 1 - v25;\n      v28 = 0LL;\n      do\n      {\n        *(_OWORD *)(v11 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v11 + 4 * v28 + 16) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28 + 16) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28 + 16) = xmmword_4401D0;\n        *(_OWORD *)(v11 + 4 * v28 + 32) = xmmword_4401D0;\n        *(_OWORD *)(v11 + 4 * v28 + 48) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28 + 32) = xmmword_4401D0;\n        *(_OWORD *)(v12 + 4 * v28 + 48) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28 + 32) = xmmword_4401D0;\n        *(_OWORD *)(v13 + 4 * v28 + 48) = xmmword_4401D0;\n        v28 += 16LL;\n        v27 += 2LL;\n      }\n      while ( v27 );\n      if ( v26 )\n        goto LABEL_11;\n    }\nLABEL_12:\n    if ( v15 == v14 )\n      goto LABEL_20;\n  }\nLABEL_15:\n  v29 = v15;\n  if ( v14 & 1 )\n  {\n    *(_DWORD *)(v11 + 4 * v15) = -987654321;\n    *(_DWORD *)(v12 + 4 * v15) = -987654321;\n    *(_DWORD *)(v13 + 4 * v15) = -987654321;\n    v29 = v15 | 1;\n  }\n  if ( v14 - 1 != v15 )\n  {\n    v30 = v14 - v29;\n    v31 = v13 + 4 * v29 + 4;\n    v32 = v12 + 4 * v29 + 4;\n    v33 = v11 + 4 * v29 + 4;\n    v34 = 0LL;\n    do\n    {\n      *(_DWORD *)(v33 + 4 * v34 - 4) = -987654321;\n      *(_DWORD *)(v32 + 4 * v34 - 4) = -987654321;\n      *(_DWORD *)(v31 + 4 * v34 - 4) = -987654321;\n      *(_DWORD *)(v33 + 4 * v34) = -987654321;\n      *(_DWORD *)(v32 + 4 * v34) = -987654321;\n      *(_DWORD *)(v31 + 4 * v34) = -987654321;\n      v34 += 2LL;\n    }\n    while ( v30 != v34 );\n  }\nLABEL_20:\n  if ( (signed int)v71 > 0 )\n  {\n    v35 = v6 + 1;\n    v36 = v6 & 3;\n    v73 = v35 - 2;\n    v78 = v35 - v36;\n    v77 = v6 & 3;\n    v76 = -v36;\n    v37 = 1LL;\n    v72 = v9;\n    while ( 1 )\n    {\n      *(_DWORD *)v9[v37] = -987654321;\n      *(_DWORD *)v8[v37] = -987654321;\n      v38 = (_DWORD *)v7[v37];\n      *v38 = -987654321;\n      if ( (signed int)v6 > 0 )\n      {\n        for ( i = 0LL; ; ++i )\n        {\n          v38[i + 1] = -987654321;\n          v40 = *(_DWORD *)(v7[v37 - 1] + 4 * i);\n          if ( v40 <= -987654322 )\n            v40 = -987654321;\n          v38[i + 1] = v40;\n          if ( *(_DWORD *)(v8[v37 - 1] + 4 * i) >= v40 )\n            v40 = *(_DWORD *)(v8[v37 - 1] + 4 * i);\n          v38[i + 1] = v40;\n          v41 = *(_DWORD *)(v9[v37 - 1] + 4 * i);\n          if ( v41 < v40 )\n            v41 = v40;\n          v38[i + 1] = v41;\n          v42 = *(_DWORD *)v69[v37 - 1];\n          if ( v42 < v41 )\n            v42 = v41;\n          v38[i + 1] = v42;\n          v43 = sub_415C80(v42, *(_DWORD *)(*(_QWORD *)(v5[1] + 8 * v37) + 4 * i + 4));\n          v44 = v7[v37];\n          *(_DWORD *)(v44 + 4 * i + 4) = v43;\n          v45 = v9[v37];\n          *(_DWORD *)(v45 + 4 * i + 4) = -987654321;\n          v46 = *(_DWORD *)(v44 + 4 * i);\n          if ( v46 <= -987654322 )\n            v46 = -987654321;\n          if ( *(_DWORD *)(v45 + 4 * i) >= v46 )\n            v46 = *(_DWORD *)(v45 + 4 * i);\n          *(_DWORD *)(v45 + 4 * i + 4) = v46;\n          v47 = v8[v37];\n          *(_DWORD *)(v47 + 4 * i + 4) = -987654321;\n          v48 = *(_DWORD *)(v7[v37 - 1] + 4 * i + 4);\n          if ( v48 <= -987654322 )\n            v48 = -987654321;\n          *(_DWORD *)(v47 + 4 * i + 4) = v48;\n          if ( *(_DWORD *)(v8[v37 - 1] + 4 * i + 4) >= v48 )\n            v48 = *(_DWORD *)(v8[v37 - 1] + 4 * i + 4);\n          *(_DWORD *)(v47 + 4 * i + 4) = v48;\n          *(_DWORD *)(v8[v37] + 4 * i + 4) = sub_415C80(v48, *(_DWORD *)(*(_QWORD *)(v5[2] + 8 * v37) + 4 * i + 4));\n          if ( v73 == i )\n            break;\n          v38 = (_DWORD *)v7[v37];\n        }\n      }\n      *(_DWORD *)(v69[v37] + 16) = -987654321;\n      v49 = sub_415C80(*(_DWORD *)(v69[v37 - 1] + 16), *(_DWORD *)(*(_QWORD *)(*v5 + 8 * v37) + 16LL));\n      v50 = (_DWORD *)v69[v37];\n      if ( v49 >= -987654320 )\n        v50[4] = v49;\n      v50[1] = -987654321;\n      v6 = v70;\n      if ( v70 <= 0 )\n        goto LABEL_63;\n      v51 = v7[v37];\n      if ( v73 >= 3 )\n        break;\n      v52 = -987654321;\n      v53 = 1LL;\n      if ( v77 )\n        goto LABEL_59;\nLABEL_63:\n      v50[3] = -987654321;\n      v61 = sub_415C80(*(_DWORD *)(v69[v37 - 1] + 12), *(_DWORD *)(*(_QWORD *)(*v5 + 8 * v37) + 12LL));\n      v62 = (signed int *)v69[v37];\n      if ( v61 <= -987654321 )\n        v61 = v62[3];\n      else\n        v62[3] = v61;\n      v63 = v62[1];\n      if ( v63 > v61 )\n      {\n        v62[3] = v63;\n        v61 = v63;\n      }\n      v64 = v62[4];\n      if ( v64 <= -987654322 )\n        v64 = -987654321;\n      if ( v61 >= v64 )\n        v64 = v61;\n      *v62 = v64;\n      v62[2] = -987654321;\n      v65 = sub_415C80(*(_DWORD *)(v69[v37 - 1] + 8), *(_DWORD *)(*(_QWORD *)(*v5 + 8 * v37) + 8LL));\n      v66 = v69[v37];\n      if ( v65 <= -987654321 )\n        v65 = *(_DWORD *)(v66 + 8);\n      else\n        *(_DWORD *)(v66 + 8) = v65;\n      v9 = v72;\n      v67 = *(_DWORD *)(v66 + 4);\n      if ( v67 > v65 )\n        *(_DWORD *)(v66 + 8) = v67;\n      if ( ++v37 == (_DWORD)v71 + 1 )\n        goto LABEL_78;\n    }\n    v52 = -987654321;\n    v53 = 1LL;\n    do\n    {\n      v54 = *(_DWORD *)(v51 + 4 * v53);\n      if ( v54 > v52 )\n      {\n        v50[1] = v54;\n        v52 = v54;\n      }\n      v55 = *(_DWORD *)(v51 + 4 * v53 + 4);\n      if ( v55 > v52 )\n      {\n        v50[1] = v55;\n        v52 = v55;\n      }\n      v56 = *(_DWORD *)(v51 + 4 * v53 + 8);\n      if ( v56 > v52 )\n      {\n        v50[1] = v56;\n        v52 = v56;\n      }\n      v57 = *(_DWORD *)(v51 + 4 * v53 + 12);\n      if ( v57 > v52 )\n      {\n        v50[1] = v57;\n        v52 = v57;\n      }\n      v53 += 4LL;\n    }\n    while ( v78 != v53 );\n    if ( !v77 )\n      goto LABEL_63;\nLABEL_59:\n    v58 = (signed int *)(v51 + 4 * v53);\n    v59 = v76;\n    do\n    {\n      v60 = *v58;\n      if ( *v58 > v52 )\n      {\n        v50[1] = v60;\n        v52 = v60;\n      }\n      ++v58;\n      ++v59;\n    }\n    while ( v59 );\n    goto LABEL_63;\n  }\nLABEL_78:\n  v68 = *(_DWORD *)(v69[(signed int)v71] + 8);\n  if ( v75 )\n  {\n    sub_41D720(v71, v6, v5, v74, &v79);\n    *v75 = v79;\n  }\n  sub_415AF0(v68, 1.0);\n}\n", 
            "funcStartAddr": "0x41d170L", 
            "funcEndAddr": "0x41d71dL", 
            "funcName": "sub_41D170"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41D720(unsigned int a1, int a2, _QWORD *a3, __int64 *a4, _QWORD *a5)\n{\n  _QWORD *v5; // r14\n  __int64 *v6; // rbx\n  int v7; // er15\n  __int64 v8; // r13\n  __int64 v9; // rdi\n  signed __int64 v10; // rsi\n  __int64 v11; // rax\n  __int64 v12; // rdi\n  __int64 v13; // rax\n  char v14; // cl\n  signed __int64 v15; // rbp\n  signed __int64 v16; // rdx\n  signed __int64 v17; // r12\n  __int64 v18; // rbx\n  unsigned int v19; // er14\n  signed __int64 v20; // r13\n  int v21; // er12\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  int v24; // ebx\n  unsigned int v25; // edi\n  __int64 v26; // rax\n  int v27; // eax\n  __int64 v28; // rax\n  __int64 v29; // rcx\n  __int64 v30; // rax\n  __int64 v31; // rax\n  int v32; // er14\n  int v33; // eax\n  __int64 v34; // rax\n  int v35; // ebp\n  __int64 v36; // rax\n  __int64 v37; // rax\n  unsigned int *v38; // rcx\n  signed int v39; // er15\n  int v40; // er14\n  int v41; // eax\n  int v42; // er14\n  int v43; // eax\n  __int64 v44; // rax\n  __int64 v45; // rax\n  unsigned int v46; // edi\n  __int64 v47; // rax\n  __int64 v48; // rax\n  int v49; // eax\n  __int64 v50; // rax\n  int v51; // eax\n  __int64 v52; // rax\n  __int64 v53; // rax\n  __int64 v54; // rax\n  __int64 v55; // rbp\n  int v56; // eax\n  __int64 v57; // rax\n  bool v58; // zf\n  __int64 result; // rax\n  __int64 v60; // [rsp+0h] [rbp-98h]\n  __int64 v61; // [rsp+8h] [rbp-90h]\n  __int64 v62; // [rsp+10h] [rbp-88h]\n  __int64 v63; // [rsp+18h] [rbp-80h]\n  _QWORD *v64; // [rsp+20h] [rbp-78h]\n  __int64 v65; // [rsp+28h] [rbp-70h]\n  __int64 v66; // [rsp+30h] [rbp-68h]\n  int v67; // [rsp+3Ch] [rbp-5Ch]\n  __int64 v68; // [rsp+40h] [rbp-58h]\n  _QWORD *v69; // [rsp+48h] [rbp-50h]\n  __int64 v70; // [rsp+50h] [rbp-48h]\n  __int64 *v71; // [rsp+58h] [rbp-40h]\n  __int64 v72; // [rsp+60h] [rbp-38h]\n\n  v5 = a5;\n  v6 = a4;\n  v64 = a3;\n  v7 = a2;\n  v8 = a1;\n  v9 = 2 * a1 + 6;\n  v10 = (signed __int64)&v60;\n  LODWORD(v61) = v9;\n  sub_41FF70(v9, &v60);\n  v63 = *v6;\n  v65 = v6[1];\n  v66 = v6[2];\n  v68 = v6[3];\n  **(_BYTE **)(v60 + 8) = 9;\n  v11 = v60;\n  **(_DWORD **)(v60 + 16) = 0;\n  **(_DWORD **)(v11 + 24) = 0;\n  *(_BYTE *)(*(_QWORD *)(v11 + 8) + 1LL) = 8;\n  v12 = v60;\n  *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4LL) = 0;\n  *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4LL) = 0;\n  v13 = *(_QWORD *)(v12 + 8);\n  v14 = *(_BYTE *)(v13 + 1);\n  LODWORD(v15) = 2;\n  if ( v14 != 4 )\n  {\n    v69 = v5;\n    v67 = v7;\n    v16 = v7 + 1LL;\n    v71 = (__int64 *)(v7 + 1LL);\n    v17 = 1LL;\n    v15 = 2LL;\n    LODWORD(v18) = v8;\n    v72 = v8;\n    v19 = v61;\n    while ( 1 )\n    {\n      v20 = v15;\n      switch ( v14 )\n      {\n        case 1:\n          v21 = v18;\n          v22 = (signed int)v18;\n          v23 = *(_QWORD *)(v65 + 8LL * (signed int)v18);\n          v24 = *(_DWORD *)(*(_QWORD *)(v65 + 8LL * (signed int)v18 + 8) + 4LL * v7 + 4);\n          v25 = *(_DWORD *)(v23 + 4LL * v7);\n          v26 = v64[1];\n          v61 = v22;\n          v10 = *(unsigned int *)(*(_QWORD *)(v26 + 8 * v22 + 8) + 4LL * v7 + 4);\n          v27 = sub_415C80(v25, v10);\n          if ( v7 > 0 && v21 > 0 && v24 == v27 )\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 1;\n            v28 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7--;\nLABEL_39:\n            v31 = *(_QWORD *)(v28 + 24);\n            LODWORD(v18) = v21;\n            goto LABEL_40;\n          }\n          v46 = *(_DWORD *)(*(_QWORD *)(v66 + 8 * v61) + 4LL * v7);\n          v47 = v64[1];\n          v70 = v61 + 1;\n          v48 = *(_QWORD *)(v47 + 8 * (v61 + 1));\n          v62 = v7 + 1LL;\n          v10 = *(unsigned int *)(v48 + 4 * v62);\n          v49 = sub_415C80(v46, v10);\n          if ( v7 > 0 && v21 > 0 && v24 == v49 )\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 3;\n            v28 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7;\n            goto LABEL_39;\n          }\n          v55 = v70;\n          v10 = *(unsigned int *)(*(_QWORD *)(v64[1] + 8 * v70) + 4 * v62);\n          v56 = sub_415C80(*(_DWORD *)(*(_QWORD *)(v68 + 8 * v61) + 4LL * v7), v10);\n          if ( v7 < 2 || v21 <= 0 || v24 != v56 )\n          {\n            v10 = *(unsigned int *)(*(_QWORD *)(v64[1] + 8 * v55) + 4 * v62);\n            v58 = v24 == (unsigned int)sub_415C80(**(_DWORD **)(v63 + 8 * v61), v10);\n            LODWORD(v18) = v21;\n            if ( !v58 )\n              goto LABEL_71;\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v20) = 6;\nLABEL_69:\n            v50 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v20) = 0;\nLABEL_70:\n            *(_DWORD *)(*(_QWORD *)(v50 + 24) + 4 * v20) = 0;\n          }\n          else\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v20) = 2;\n            v57 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v20) = v7--;\n            *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v20) = 0;\n            LODWORD(v18) = v21;\n          }\nLABEL_72:\n          v15 = v20 + 1;\n          if ( v20 + 1 == v19 )\n          {\n            v19 += v72;\n            v10 = v19;\n            sub_41FFF0(v60, v19, v16);\n          }\n          v12 = v60;\n          v13 = *(_QWORD *)(v60 + 8);\n          v14 = *(_BYTE *)(v13 + v20);\n          v17 = v20;\n          if ( v14 == 4 )\n          {\n            v5 = v69;\n            goto LABEL_76;\n          }\n          break;\n        case 2:\n          v29 = *(_QWORD *)(v68 + 8LL * (signed int)v18);\n          v16 = v7;\n          v10 = *(unsigned int *)(v29 + 4LL * v7 + 4);\n          if ( v7 > 0\n            && (signed int)v18 > 0\n            && (_DWORD)v10 == *(_DWORD *)(*(_QWORD *)(v65 + 8LL * (signed int)v18) + 4LL * v7) )\n          {\n            *(_BYTE *)(v13 + v15) = 1;\n            v30 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7--;\n            v31 = *(_QWORD *)(v30 + 24);\nLABEL_40:\n            *(_DWORD *)(v31 + 4 * v15) = v18;\n            goto LABEL_41;\n          }\n          if ( v7 < 2 || (_DWORD)v10 != *(_DWORD *)(v29 + 4LL * v7) )\n            goto LABEL_71;\n          *(_BYTE *)(v13 + v15) = 2;\n          v50 = v60;\n          *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7--;\n          goto LABEL_70;\n        case 3:\n          LODWORD(v61) = v19;\n          v18 = (signed int)v18;\n          v32 = *(_DWORD *)(*(_QWORD *)(v66 + 8LL * (signed int)v18 + 8) + 4LL * v7);\n          v10 = *(unsigned int *)(*(_QWORD *)(v64[2] + 8LL * (signed int)v18 + 8) + 4LL * v7);\n          v33 = sub_415C80(*(_DWORD *)(*(_QWORD *)(v65 + 8LL * (signed int)v18) + 4LL * v7), v10);\n          if ( v7 <= 0 || (signed int)v18 <= 0 || v32 != v33 )\n          {\n            v10 = *(unsigned int *)(*(_QWORD *)(v64[2] + 8 * (v18 + 1)) + 4LL * v7);\n            v51 = sub_415C80(*(_DWORD *)(*(_QWORD *)(v66 + 8 * v18) + 4LL * v7), v10);\n            if ( v7 <= 0 || (signed int)v18 <= 0 || v32 != v51 )\n              sub_4325B0(\"traceback failed\", v10);\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 3;\n            v34 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7;\n          }\n          else\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 1;\n            v34 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v7--;\n          }\n          *(_DWORD *)(*(_QWORD *)(v34 + 24) + 4 * v15) = v18;\n          goto LABEL_50;\n        case 5:\n          if ( (_DWORD)v18 )\n          {\n            if ( (signed int)v18 <= 0\n              || (v35 = *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18 + 8) + 16LL),\n                  v10 = *(unsigned int *)(*(_QWORD *)(*v64 + 8LL * (signed int)v18 + 8) + 16LL),\n                  v35 != (unsigned int)sub_415C80(*(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 16LL), v10)) )\n            {\nLABEL_71:\n              sub_4325B0(\"traceback failed\", v10);\n            }\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v20) = 5;\n            v36 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v20) = 0;\n            v37 = *(_QWORD *)(v36 + 24);\n            *(_DWORD *)(v37 + 4 * v20) = 0;\n            *(_DWORD *)(v37 + 4 * v17) = v18;\nLABEL_41:\n            LODWORD(v18) = v18 - 1;\n          }\n          else\n          {\n            if ( *(_DWORD *)(*(_QWORD *)v63 + 16LL) != -987654321 )\n              goto LABEL_71;\n            *(_BYTE *)(v13 + v15) = 4;\n            v53 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = 0;\n            *(_DWORD *)(*(_QWORD *)(v53 + 24) + 4 * v15) = 0;\n            LODWORD(v18) = 0;\n          }\n          goto LABEL_72;\n        case 6:\n          v38 = *(unsigned int **)(v63 + 8LL * (signed int)v18);\n          v16 = *v38;\n          if ( (_DWORD)v16 == v38[4] )\n          {\n            *(_BYTE *)(v13 + v15) = 5;\n          }\n          else\n          {\n            if ( (_DWORD)v16 != v38[3] )\n              goto LABEL_71;\n            *(_BYTE *)(v13 + v15) = 10;\n          }\n          goto LABEL_69;\n        case 7:\n          v39 = v67;\n          if ( v67 <= 0 )\n            goto LABEL_71;\n          v16 = *(_QWORD *)(v65 + 8LL * (signed int)v18);\n          v10 = (signed __int64)v71;\n          while ( (signed int)v18 <= 0\n               || *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 4LL) != *(_DWORD *)(v16 + 4 * v10 - 4) )\n          {\n            --v39;\n            if ( --v10 <= 1 )\n              goto LABEL_71;\n          }\n          *(_BYTE *)(v13 + v15) = 1;\n          v54 = v60;\n          *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = v39;\n          *(_DWORD *)(*(_QWORD *)(v54 + 24) + 4 * v15) = v18;\n          LODWORD(v18) = v18 - 1;\n          if ( v39 <= 1 )\n            goto LABEL_71;\n          v7 = v39 - 1;\n          goto LABEL_72;\n        case 8:\n          LODWORD(v61) = v19;\n          v40 = *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 8LL);\n          v10 = *(unsigned int *)(*(_QWORD *)(*v64 + 8LL * (signed int)v18) + 8LL);\n          v41 = sub_415C80(*(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18 - 8) + 8LL), v10);\n          LODWORD(v62) = v18;\n          if ( (signed int)v18 > 0 && v40 == v41 )\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 8;\n            goto LABEL_34;\n          }\n          if ( *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 8LL) != *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18)\n                                                                                        + 4LL) )\n            goto LABEL_54;\n          goto LABEL_56;\n        case 10:\n          LODWORD(v61) = v19;\n          v42 = *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 12LL);\n          v10 = *(unsigned int *)(*(_QWORD *)(*v64 + 8LL * (signed int)v18) + 12LL);\n          v43 = sub_415C80(*(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18 - 8) + 12LL), v10);\n          LODWORD(v62) = v18;\n          if ( (signed int)v18 <= 0 || v42 != v43 )\n          {\n            if ( *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18) + 12LL) != *(_DWORD *)(*(_QWORD *)(v63 + 8LL * (signed int)v18)\n                                                                                           + 4LL) )\nLABEL_54:\n              sub_4325B0(\"Traceback failed.\", v10);\nLABEL_56:\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 7;\n            v52 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = 0;\n            *(_DWORD *)(*(_QWORD *)(v52 + 24) + 4 * v15) = 0;\n            v19 = v61;\n            LODWORD(v18) = v62;\n          }\n          else\n          {\n            *(_BYTE *)(*(_QWORD *)(v60 + 8) + v15) = 10;\nLABEL_34:\n            v44 = v60;\n            *(_DWORD *)(*(_QWORD *)(v60 + 16) + 4 * v15) = 0;\n            v45 = *(_QWORD *)(v44 + 24);\n            *(_DWORD *)(v45 + 4 * v15) = 0;\n            LODWORD(v18) = v62;\n            *(_DWORD *)(v45 + 4 * v17) = v62;\nLABEL_50:\n            LODWORD(v18) = v18 - 1;\n            v19 = v61;\n          }\n          goto LABEL_72;\n        default:\n          goto LABEL_71;\n      }\n    }\n  }\nLABEL_76:\n  *(_DWORD *)v12 = v15;\n  sub_4204A0(v12, v10);\n  result = v60;\n  *v5 = v60;\n  return result;\n}\n", 
            "funcStartAddr": "0x41d720L", 
            "funcEndAddr": "0x41de63L", 
            "funcName": "sub_41D720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41DE70(int a1, _QWORD *a2, signed int *a3)\n{\n  signed int *v3; // r13\n  int v4; // er14\n  __int64 v5; // r12\n  signed __int64 v6; // rbx\n  __int64 v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rcx\n  signed int v10; // edi\n  signed int v11; // eax\n  char v12; // cl\n\n  v3 = a3;\n  v4 = a1;\n  v5 = sub_4382F0(\"postprob.c\", 692LL, a1 + 1);\n  if ( *v3 > 0 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = *((_QWORD *)v3 + 3);\n      v8 = *(signed int *)(v7 + 4 * v6);\n      if ( *(_DWORD *)(v7 + 4 * v6) )\n      {\n        switch ( *(char *)(*((_QWORD *)v3 + 1) + v6) )\n        {\n          case 1:\n            v9 = a2[1];\n            goto LABEL_7;\n          case 3:\n            v9 = a2[2];\nLABEL_7:\n            v10 = *(_DWORD *)(*(_QWORD *)(v9 + 8 * v8) + 4LL * *(signed int *)(*((_QWORD *)v3 + 2) + 4 * v6));\n            goto LABEL_11;\n          case 5:\n            v10 = *(_DWORD *)(*(_QWORD *)(*a2 + 8 * v8) + 16LL);\n            goto LABEL_11;\n          case 8:\n            v10 = *(_DWORD *)(*(_QWORD *)(*a2 + 8 * v8) + 8LL);\n            goto LABEL_11;\n          case 10:\n            v10 = *(_DWORD *)(*(_QWORD *)(*a2 + 8 * v8) + 12LL);\nLABEL_11:\n            v11 = (signed int)(sub_415AF0(v10, 1.0) * 10.0);\n            v12 = 42;\n            if ( (char)v11 <= 9 )\n              v12 = v11 + 48;\n            *(_BYTE *)(v5 + v8 - 1) = v12;\n            break;\n          default:\n            break;\n        }\n      }\n      ++v6;\n    }\n    while ( v6 < *v3 );\n  }\n  *(_BYTE *)(v5 + v4) = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x41de70L", 
            "funcEndAddr": "0x41df77L", 
            "funcName": "sub_41DE70"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_41E4B0(const char *a1)\n{\n  char v1; // r15\n  FILE *v2; // r13\n  _DWORD *v3; // r14\n  const char *v4; // r12\n  const char *v5; // r12\n  char *v6; // rdi\n  const char *v7; // rax\n  signed int v8; // eax\n  float *v9; // rbx\n  signed __int64 v10; // r15\n  const char *v11; // rax\n  float v12; // xmm0_4\n  const char *v13; // rax\n  float v14; // xmm0_4\n  const char *v15; // rax\n  float v16; // xmm0_4\n  const char *v17; // rax\n  float v18; // xmm0_4\n  const char *v19; // rax\n  float v20; // xmm0_4\n  const char *v21; // rax\n  float v22; // xmm0_4\n  const char *v23; // rax\n  float v24; // xmm0_4\n  const char *v25; // rax\n  float v26; // xmm0_4\n  const char *v27; // rax\n  signed int v28; // eax\n  signed __int64 v29; // r12\n  signed __int64 v30; // r15\n  const char *v31; // rax\n  float v32; // xmm0_4\n  signed __int64 v33; // rbx\n  const char *v34; // rax\n  float v35; // xmm0_4\n  const char *v36; // rax\n  signed int v37; // eax\n  signed __int64 v38; // r12\n  signed __int64 v39; // r15\n  const char *v40; // rax\n  float v41; // xmm0_4\n  signed __int64 v42; // rbx\n  const char *v43; // rax\n  float v44; // xmm0_4\n\n  v1 = (char)a1;\n  v2 = fopen(a1, \"r\");\n  if ( !v2 )\n    sub_4325B0(\"Failed to open HMMER prior file %s\\n\", (char)a1);\n  v3 = (_DWORD *)sub_4382F0(\"prior.c\", 37LL, 40016LL);\n  v4 = (const char *)sub_416CA0(v2, 4);\n  sub_4382C0(v4, 4LL);\n  if ( strcmp(v4, \"DIRICHLET\") )\n    sub_4325B0(\"No such prior strategy %s; failed to parse file %s\", (char)v4);\n  *v3 = 0;\n  v5 = (const char *)sub_416CA0(v2, 4);\n  sub_4382C0(v5, 4LL);\n  if ( !strcmp(v5, \"AMINO\") )\n  {\n    if ( dword_464004 != 3 )\n    {\n      v6 = \"HMM and/or sequences are DNA/RNA; can't use protein prior %s\";\n      goto LABEL_12;\n    }\n  }\n  else\n  {\n    if ( strcmp(v5, \"NUCLEIC\") )\n      sub_4325B0(\"Alphabet \\\"%s\\\" in prior file %s isn't valid.\", (char)v5);\n    if ( dword_464004 != 2 )\n    {\n      v6 = \"HMM and/or sequences are protein; can't use DNA/RNA prior %s\";\nLABEL_12:\n      sub_4325B0(v6, v1);\n    }\n  }\n  v7 = (const char *)sub_416CA0(v2, 1);\n  v8 = strtol(v7, 0LL, 10);\n  v3[1] = v8;\n  if ( v8 < 0 )\n    sub_4325B0(\"%d is bad; need at least one state transition mixture component\", v8);\n  if ( v8 >= 201 )\n    sub_4325B0(\"%d is bad, too many transition components (MAXDCHLET = %d)\\n\", 200);\n  if ( v8 > 0 )\n  {\n    v9 = (float *)(v3 + 208);\n    v10 = 0LL;\n    do\n    {\n      v11 = (const char *)sub_416CA0(v2, 2);\n      v12 = strtod(v11, 0LL);\n      *(float *)&v3[v10 + 2] = v12;\n      v13 = (const char *)sub_416CA0(v2, 2);\n      v14 = strtod(v13, 0LL);\n      *(v9 - 6) = v14;\n      v15 = (const char *)sub_416CA0(v2, 2);\n      v16 = strtod(v15, 0LL);\n      *(v9 - 5) = v16;\n      v17 = (const char *)sub_416CA0(v2, 2);\n      v18 = strtod(v17, 0LL);\n      *(v9 - 4) = v18;\n      v19 = (const char *)sub_416CA0(v2, 2);\n      v20 = strtod(v19, 0LL);\n      *(v9 - 3) = v20;\n      v21 = (const char *)sub_416CA0(v2, 2);\n      v22 = strtod(v21, 0LL);\n      *(v9 - 2) = v22;\n      v23 = (const char *)sub_416CA0(v2, 2);\n      v24 = strtod(v23, 0LL);\n      *(v9 - 1) = v24;\n      v25 = (const char *)sub_416CA0(v2, 2);\n      v26 = strtod(v25, 0LL);\n      *v9 = v26;\n      ++v10;\n      v9 += 7;\n    }\n    while ( v10 < (signed int)v3[1] );\n  }\n  v27 = (const char *)sub_416CA0(v2, 1);\n  v28 = strtol(v27, 0LL, 10);\n  v3[1602] = v28;\n  if ( v28 < 0 )\n    sub_4325B0(\"%d is bad; need at least one match emission mixture component\", v28);\n  if ( v28 >= 201 )\n    sub_4325B0(\"%d is bad; too many match components (MAXDCHLET = %d)\\n\", v28);\n  if ( v28 > 0 )\n  {\n    v29 = (signed __int64)(v3 + 1803);\n    v30 = 0LL;\n    do\n    {\n      v31 = (const char *)sub_416CA0(v2, 2);\n      v32 = strtod(v31, 0LL);\n      *(float *)&v3[v30 + 1603] = v32;\n      if ( dword_464000 > 0 )\n      {\n        v33 = 0LL;\n        do\n        {\n          v34 = (const char *)sub_416CA0(v2, 2);\n          v35 = strtod(v34, 0LL);\n          *(float *)(v29 + 4 * v33++) = v35;\n        }\n        while ( v33 < dword_464000 );\n      }\n      ++v30;\n      v29 += 80LL;\n    }\n    while ( v30 < (signed int)v3[1602] );\n  }\n  v36 = (const char *)sub_416CA0(v2, 1);\n  v37 = strtol(v36, 0LL, 10);\n  v3[5803] = v37;\n  if ( v37 < 0 )\n    sub_4325B0(\"%d is bad; need at least one insert emission mixture component\", v37);\n  if ( v37 >= 201 )\n    sub_4325B0(\"%d is bad; too many insert components (MAXDCHLET = %d)\\n\", v37);\n  if ( v37 > 0 )\n  {\n    v38 = (signed __int64)(v3 + 6004);\n    v39 = 0LL;\n    do\n    {\n      v40 = (const char *)sub_416CA0(v2, 2);\n      v41 = strtod(v40, 0LL);\n      *(float *)&v3[v39 + 5804] = v41;\n      if ( dword_464000 > 0 )\n      {\n        v42 = 0LL;\n        do\n        {\n          v43 = (const char *)sub_416CA0(v2, 2);\n          v44 = strtod(v43, 0LL);\n          *(float *)(v38 + 4 * v42++) = v44;\n        }\n        while ( v42 < dword_464000 );\n      }\n      ++v39;\n      v38 += 80LL;\n    }\n    while ( v39 < (signed int)v3[5803] );\n  }\n  fclose(v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x41e4b0L", 
            "funcEndAddr": "0x41e95aL", 
            "funcName": "sub_41E4B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41E960(char *s, _DWORD *a2)\n{\n  _DWORD *v2; // r13\n  char *v3; // r15\n  FILE *v4; // r12\n  __int64 v5; // rsi\n  signed __int64 v6; // r14\n  signed __int64 v7; // r15\n  signed __int64 v8; // rbx\n  double v9; // ST18_8\n  float v10; // xmm0_4\n  signed __int64 v11; // r13\n  __int64 v12; // r15\n  signed __int64 v13; // rbx\n  float v14; // xmm0_4\n  float v16; // [rsp+Ch] [rbp-3Ch]\n  _QWORD *ptr; // [rsp+10h] [rbp-38h]\n\n  v2 = a2;\n  if ( dword_464004 != 3 )\n    sub_4325B0(\"PAM prior is only valid for protein sequences\", (char)a2);\n  if ( *a2 )\n    sub_4325B0(\"PAM prior may only be applied over an existing Dirichlet prior\", (char)a2);\n  if ( a2[5803] != 1 )\n    sub_4325B0(\"PAM prior requires that the insert emissions be a single Dirichlet\", (char)a2);\n  v3 = (char *)sub_427C20(\"aa\", s);\n  v4 = fopen(s, \"r\");\n  if ( !v4 )\n  {\n    v4 = (FILE *)sub_427D00(s, \"BLASTMAT\");\n    if ( !v4 )\n    {\n      v4 = (FILE *)sub_427D00(v3, \"BLASTMAT\");\n      if ( !v4 )\n        sub_4325B0(\"Failed to open PAM scoring matrix file %s\", (char)s);\n    }\n  }\n  if ( !(unsigned int)sub_4273E0(v4) )\n    sub_4325B0(\"Failed to parse PAM scoring matrix file %s\", (char)s);\n  fclose(v4);\n  free(v3);\n  *a2 = 1;\n  a2[1602] = 20;\n  v5 = (unsigned int)dword_464000;\n  if ( dword_464000 > 0 )\n  {\n    v6 = (signed __int64)(v2 + 1803);\n    v7 = 0LL;\n    do\n    {\n      if ( (signed int)v5 > 0 )\n      {\n        v8 = 0LL;\n        do\n        {\n          v9 = *((float *)xmmword_44FB20 + v8);\n          v10 = exp((float)((float)*(signed int *)(ptr[::s[v7] - 65] + 4LL * ::s[v8] - 260) * v16)) * v9;\n          *(float *)(v6 + 4 * v8++) = v10;\n          v5 = dword_464000;\n        }\n        while ( v8 < dword_464000 );\n      }\n      ++v7;\n      v6 += 80LL;\n    }\n    while ( v7 < (signed int)v5 );\n    if ( (signed int)v5 > 0 )\n    {\n      v11 = (signed __int64)(v2 + 1803);\n      v12 = 0LL;\n      v13 = 0LL;\n      do\n      {\n        v14 = 1.0 / (double)(signed int)v5;\n        *(float *)(v11 + 4 * v13 - 800) = v14;\n        sub_43DC80(v12 + v11, v5);\n        sub_43CA70(v12 + v11, (unsigned int)dword_464000);\n        ++v13;\n        v5 = dword_464000;\n        v12 += 80LL;\n      }\n      while ( v13 < dword_464000 );\n    }\n  }\n  return sub_438390(ptr);\n}\n", 
            "funcStartAddr": "0x41e960L", 
            "funcEndAddr": "0x41eba5L", 
            "funcName": "sub_41E960"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41EBB0(_DWORD *a1, signed int *a2)\n{\n  signed __int64 v2; // r8\n  signed int v3; // xmm0_4\n  signed __int64 v4; // rcx\n  __m128 v5; // xmm1\n  signed __int64 v6; // r10\n  unsigned __int64 v7; // r10\n  signed __int64 v8; // rax\n  __m128 v9; // xmm2\n  __m128 *v10; // rdx\n  unsigned __int64 v11; // rcx\n  unsigned __int64 v12; // rax\n  __int64 v13; // r9\n  __int64 v14; // rax\n  signed __int64 v15; // rdx\n  __int128 v16; // xmm2\n  __int128 v17; // xmm2\n  __int128 v18; // xmm2\n  __int128 v19; // xmm2\n  signed __int64 v20; // rax\n  __int64 v21; // r9\n  __int128 v22; // xmm2\n\n  v2 = dword_464000;\n  if ( dword_464004 == 3 )\n  {\n    v3 = 1065305418;\n    if ( dword_464000 <= 0 )\n      goto LABEL_29;\n    if ( (unsigned int)dword_464000 < 8 )\n    {\n      v4 = 0LL;\n      goto LABEL_28;\n    }\n    if ( (char *)xmmword_44FB20 + 4 * dword_464000 > (char *)a1 && &a1[dword_464000] > (_DWORD *)xmmword_44FB20 )\n    {\n      v4 = 0LL;\n      do\n      {\nLABEL_28:\n        a1[v4] = *((_DWORD *)xmmword_44FB20 + v4);\n        ++v4;\n      }\n      while ( v4 < v2 );\n      goto LABEL_29;\n    }\n    v4 = dword_464000 & 0xFFFFFFFFFFFFFFF8LL;\n    v12 = (unsigned __int64)(v4 - 8) >> 3;\n    v13 = ((_BYTE)v12 + 1) & 3;\n    if ( (unsigned __int64)(v4 - 8) >= 0x18 )\n    {\n      v15 = v13 - 1 - v12;\n      v14 = 0LL;\n      do\n      {\n        v16 = xmmword_44FB30[v14];\n        *(_OWORD *)&a1[v14 * 4] = xmmword_44FB20[v14];\n        *(_OWORD *)&a1[v14 * 4 + 4] = v16;\n        v17 = xmmword_44FB50[v14];\n        *(_OWORD *)&a1[v14 * 4 + 8] = xmmword_44FB40[v14];\n        *(_OWORD *)&a1[v14 * 4 + 12] = v17;\n        v18 = xmmword_44FB70[v14];\n        *(_OWORD *)&a1[v14 * 4 + 16] = xmmword_44FB60[v14];\n        *(_OWORD *)&a1[v14 * 4 + 20] = v18;\n        v19 = xmmword_44FB90[v14];\n        *(_OWORD *)&a1[v14 * 4 + 24] = xmmword_44FB80[v14];\n        *(_OWORD *)&a1[v14 * 4 + 28] = v19;\n        v14 += 8LL;\n        v15 += 4LL;\n      }\n      while ( v15 );\n      if ( !v13 )\n      {\nLABEL_27:\n        if ( v4 == v2 )\n          goto LABEL_29;\n        goto LABEL_28;\n      }\n    }\n    else\n    {\n      v14 = 0LL;\n      if ( !v13 )\n        goto LABEL_27;\n    }\n    v20 = 1 * v14 + 16;\n    v21 = -v13;\n    do\n    {\n      v22 = *(__int128 *)((char *)xmmword_44FB20 + v20);\n      *(_OWORD *)((char *)a1 + v20 - 16) = *(__int128 *)((char *)&xmmword_44FB10 + v20);\n      *(_OWORD *)((char *)a1 + v20) = v22;\n      v20 += 32LL;\n      ++v21;\n    }\n    while ( v21 );\n    goto LABEL_27;\n  }\n  v3 = 1065336456;\n  if ( dword_464000 > 0 )\n  {\n    v5 = (__m128)0x3F800000u;\n    v5.m128_f32[0] = 1.0 / (float)dword_464000;\n    *a1 = v5.m128_i32[0];\n    if ( (_DWORD)v2 != 1 )\n    {\n      v6 = 2LL;\n      if ( v2 > 1 )\n        v6 = v2;\n      v7 = v6 - 1;\n      if ( v7 < 8 )\n      {\n        v8 = 1LL;\n        do\nLABEL_17:\n          a1[v8++] = v5.m128_i32[0];\n        while ( v8 < v2 );\n        goto LABEL_29;\n      }\n      v8 = (v7 & 0xFFFFFFFFFFFFFFF8LL) + 1;\n      v9 = _mm_shuffle_ps(v5, v5, 0);\n      v10 = (__m128 *)(a1 + 5);\n      v11 = v7 & 0xFFFFFFFFFFFFFFF8LL;\n      do\n      {\n        v10[-1] = v9;\n        *v10 = v9;\n        v10 += 2;\n        v11 -= 8LL;\n      }\n      while ( v11 );\n      if ( v7 != (v7 & 0xFFFFFFFFFFFFFFF8LL) )\n        goto LABEL_17;\n    }\n  }\nLABEL_29:\n  *a2 = v3;\n}\n", 
            "funcStartAddr": "0x41ebb0L", 
            "funcEndAddr": "0x41edb8L", 
            "funcName": "sub_41EBB0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_41EDC0(const char *a1, __int64 a2, float *a3)\n{\n  float *v3; // r14\n  __int64 v4; // r12\n  char v5; // r15\n  FILE *v6; // rax\n  FILE *v7; // r13\n  __int64 v8; // rax\n  const char *v9; // rbx\n  const char *v10; // rsi\n  int v11; // edi\n  int v12; // ebx\n  const char *v13; // rax\n  bool v14; // cl\n  __int64 v15; // rbx\n  float v16; // xmm0_4\n  __int64 v17; // rbp\n  float v18; // xmm0_4\n\n  v3 = a3;\n  v4 = a2;\n  v5 = (char)a1;\n  v6 = fopen(a1, \"r\");\n  v7 = v6;\n  if ( !v6 )\n    sub_4325B0(\"Failed to open null model file %s\\n\", (char)a1);\n  v8 = sub_416CA0(v6, 4);\n  v9 = (const char *)v8;\n  if ( !v8 )\n    goto LABEL_17;\n  sub_4382C0(v8, 4LL);\n  v10 = \"NUCLEIC\";\n  if ( !strcmp(v9, \"NUCLEIC\") )\n  {\n    v11 = 2;\n  }\n  else\n  {\n    v10 = \"AMINO\";\n    if ( strcmp(v9, \"AMINO\") )\n      goto LABEL_17;\n    v11 = 3;\n  }\n  if ( dword_464004 )\n  {\n    if ( dword_464004 != v11 )\n      sub_4325B0(\"Alphabet type conflict; null model in %s is inappropriate\\n\", v5);\n  }\n  else\n  {\n    sub_401910(v11, (char)v10);\n  }\n  v12 = dword_464000;\n  v13 = (const char *)sub_416CA0(v7, 2);\n  v14 = v13 == 0LL;\n  if ( v12 > 0 )\n  {\n    v15 = 0LL;\n    while ( !v14 )\n    {\n      v16 = strtod(v13, 0LL);\n      *(float *)(v4 + 4 * v15++) = v16;\n      v17 = dword_464000;\n      v13 = (const char *)sub_416CA0(v7, 2);\n      v14 = v13 == 0LL;\n      if ( v15 >= v17 )\n        goto LABEL_16;\n    }\nLABEL_17:\n    fclose(v7);\n    sub_4325B0(\"%s is not in HMMER null model file format\", v5);\n  }\nLABEL_16:\n  if ( v14 )\n    goto LABEL_17;\n  v18 = strtod(v13, 0LL);\n  *v3 = v18;\n  return fclose(v7);\n}\n", 
            "funcStartAddr": "0x41edc0L", 
            "funcEndAddr": "0x41ef1eL", 
            "funcName": "sub_41EDC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41EF20(__int64 a1, unsigned int *a2)\n{\n  unsigned int *v2; // rbx\n  float v3; // xmm0_4\n  __int64 v4; // rax\n  double v5; // xmm1_8\n  double v6; // xmm0_8\n  float v7; // xmm0_4\n  signed __int64 v8; // rax\n  _QWORD *v9; // r12\n  signed __int64 v10; // r15\n  __int64 v11; // rax\n  signed int v12; // eax\n  __int64 v13; // rsi\n  signed int v14; // eax\n  __int64 v15; // rsi\n  __int64 v16; // rax\n  signed int v17; // eax\n  __int64 v18; // rsi\n  __int64 v19; // rdx\n  __int64 v20; // rdx\n  signed int v21; // eax\n  __int64 v22; // rsi\n  __int64 v23; // rax\n  __int64 v24; // rdx\n  int v26[200]; // [rsp+30h] [rbp-998h]\n  int v27[200]; // [rsp+350h] [rbp-678h]\n  int v28[214]; // [rsp+670h] [rbp-358h]\n\n  v2 = a2;\n  sub_43C860(*(_QWORD *)(a1 + 208) + 8LL, (unsigned int)(*(_DWORD *)(a1 + 136) - 1));\n  sub_43C860(*(_QWORD *)(a1 + 216) + 4LL, (unsigned int)(*(_DWORD *)(a1 + 136) - 1));\n  v3 = *(float *)(a1 + 168);\n  v4 = *(_QWORD *)(a1 + 208);\n  v5 = v3;\n  v6 = (float)((float)(v3 + *(float *)(v4 + 4)) + 2.0);\n  *(float *)&v5 = (v5 + 1.0) / v6;\n  *(_DWORD *)(a1 + 168) = LODWORD(v5);\n  v7 = (*(float *)(v4 + 4) + 1.0) / v6;\n  *(float *)(v4 + 4) = v7;\n  v8 = *(signed int *)(a1 + 136);\n  *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * v8) = 1065353216;\n  if ( v8 <= 1 )\n  {\n    v9 = (_QWORD *)(a1 + 96);\n  }\n  else\n  {\n    v9 = (_QWORD *)(a1 + 96);\n    v10 = 1LL;\n    do\n    {\n      v11 = *(_QWORD *)(a1 + 88);\n      if ( v11 && (v12 = *(_DWORD *)(v11 + 4 * v10), v12 >= 0) )\n      {\n        v13 = v2[1];\n        if ( v12 >= (signed int)v13 )\n          sub_4325B0(\"X-PRT annotation out of range\", v13);\n        v7 = 0.0;\n        sub_43C860(v27, v13);\n        v27[*(signed int *)(*(_QWORD *)(a1 + 88) + 4 * v10)] = 1065353216;\n      }\n      else\n      {\n        sub_43D180(v27, v2 + 2, v2[1]);\n      }\n      if ( *v9 && (v14 = *(_DWORD *)(*v9 + 4 * v10), v14 >= 0) )\n      {\n        v15 = v2[1602];\n        if ( v14 >= (signed int)v15 )\n          sub_4325B0(\"X-PRM annotation out of range\", v15);\n        v7 = 0.0;\n        sub_43C860(v26, v15);\n        v26[*(signed int *)(*v9 + 4 * v10)] = 1065353216;\n      }\n      else\n      {\n        sub_43D180(v26, v2 + 1603, v2[1602]);\n      }\n      v16 = *(_QWORD *)(a1 + 104);\n      if ( v16 && (v17 = *(_DWORD *)(v16 + 4 * v10), v17 >= 0) )\n      {\n        v18 = v2[5803];\n        if ( v17 >= (signed int)v18 )\n          sub_4325B0(\"X-PRI annotation out of range\", v18);\n        v7 = 0.0;\n        sub_43C860(v28, v18);\n        v28[*(signed int *)(*(_QWORD *)(a1 + 104) + 4 * v10)] = 1065353216;\n      }\n      else\n      {\n        sub_43D180(v28, v2 + 5804, v2[5803]);\n      }\n      sub_41F2A0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v10), v2, v27);\n      v19 = v2[1602];\n      sub_41F5B0(*(void **)(*(_QWORD *)(a1 + 152) + 8 * v10));\n      v20 = v2[5803];\n      sub_41F5B0(*(void **)(*(_QWORD *)(a1 + 160) + 8 * v10++));\n      v8 = *(signed int *)(a1 + 136);\n    }\n    while ( v10 < v8 );\n  }\n  if ( *v9 && (v21 = *(_DWORD *)(*v9 + 4LL * (signed int)v8), v21 >= 0) )\n  {\n    v22 = v2[1602];\n    if ( v21 >= (signed int)v22 )\n      sub_4325B0(\"X-PRM annotation out of range\", v22);\n    v7 = 0.0;\n    sub_43C860(v26, v22);\n    v23 = *(signed int *)(a1 + 136);\n    v26[*(signed int *)(*(_QWORD *)(a1 + 96) + 4 * v23)] = 1065353216;\n  }\n  else\n  {\n    sub_43D180(v26, v2 + 1603, v2[1602]);\n    v23 = *(signed int *)(a1 + 136);\n  }\n  v24 = v2[1602];\n  sub_41F5B0(*(void **)(*(_QWORD *)(a1 + 152) + 8 * v23));\n  return sub_41A6B0(a1, v7);\n}\n", 
            "funcStartAddr": "0x41ef20L", 
            "funcEndAddr": "0x41f298L", 
            "funcName": "sub_41EF20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41F2A0(__int64 a1, signed __int64 a2, __int64 a3, float a4)\n{\n  __int64 v4; // r15\n  signed __int64 v5; // rbp\n  __int64 v6; // rbp\n  signed __int64 v7; // rbx\n  float v8; // xmm1_4\n  double v9; // xmm0_8\n  float v10; // xmm0_4\n  float v11; // ST04_4\n  float v12; // ST04_4\n  float *v13; // rbx\n  int v14; // eax\n  __int64 v15; // r15\n  signed int v16; // er12\n  __int64 v17; // r14\n  float *v18; // r13\n  __int128 v19; // xmm0\n  float *v20; // rbx\n  signed __int64 v21; // rbp\n  unsigned int v22; // ecx\n  signed int v23; // edx\n  __int128 v24; // xmm2\n  float v25; // xmm0_4\n  float v26; // xmm1_4\n  float v27; // ST24_4\n  signed __int64 v29; // [rsp+10h] [rbp-388h]\n  float v30; // [rsp+18h] [rbp-380h]\n  float v31; // [rsp+1Ch] [rbp-37Ch]\n  float v32; // [rsp+20h] [rbp-378h]\n  signed __int64 v33; // [rsp+38h] [rbp-360h]\n  int v34[214]; // [rsp+40h] [rbp-358h]\n\n  v4 = a3;\n  v5 = a2;\n  v34[0] = 1065353216;\n  v29 = a2;\n  if ( *(_DWORD *)a2 <= 1u && *(_DWORD *)(a2 + 6408) >= 2 )\n  {\n    LODWORD(a2) = *(_DWORD *)(a2 + 4);\n    if ( (signed int)a2 > 0 )\n    {\n      v6 = v5 + 808;\n      v7 = 0LL;\n      do\n      {\n        v8 = *(float *)(v4 + 4 * v7);\n        v9 = -999.0;\n        if ( v8 > 0.0 )\n          v9 = log(v8);\n        v10 = v9;\n        v11 = sub_415EE0(a1, 3, v6) + v10;\n        v12 = sub_415EE0(a1 + 12, 2, v6 + 12) + v11;\n        a4 = sub_415EE0(a1 + 20, 2, v6 + 20) + v12;\n        *(float *)&v34[v7++] = a4;\n        a2 = *(signed int *)(v29 + 4);\n        v6 += 28LL;\n      }\n      while ( v7 < a2 );\n      v5 = v29;\n    }\n    sub_415D30((float *)v34, a2);\n  }\n  v13 = (float *)a1;\n  sub_43CBE0(a1, 3LL);\n  v32 = a4;\n  v31 = v13[3] + v13[4];\n  v30 = v13[5] + v13[6];\n  v14 = *(_DWORD *)(v5 + 4);\n  v33 = v5 + 808;\n  v15 = 0LL;\n  v16 = 7;\n  v17 = 0LL;\n  do\n  {\n    if ( v14 <= 0 )\n    {\n      v18 = (float *)(a1 + 4 * v17);\n      LODWORD(v19) = 0;\n    }\n    else\n    {\n      v18 = (float *)(a1 + 4 * v17);\n      v19 = 0LL;\n      v20 = (float *)v33;\n      v21 = 0LL;\n      do\n      {\n        v22 = v17 & 0x7FFFFFFF;\n        if ( ((unsigned int)v17 & 0x7FFFFFFF) <= 6 )\n        {\n          if ( _bittest(&v16, v22) )\n          {\n            v27 = (float)(*v18 + v20[v15]) * *(float *)&v34[v21];\n            sub_43CBE0(v20, 3LL);\n            v19 = (unsigned int)v19;\n            *(float *)&v19 = *(float *)&v19 + (float)(v27 / (float)(*(float *)&v19 + v32));\n            v14 = *(_DWORD *)(v29 + 4);\n          }\n          else\n          {\n            v23 = 24;\n            v24 = v19;\n            if ( _bittest(&v23, v22) )\n            {\n              v25 = (float)(*v18 + v20[v15]) * *(float *)&v34[v21];\n              v26 = (float)(v20[3] + v31) + v20[4];\n            }\n            else\n            {\n              v25 = (float)(*v18 + v20[v15]) * *(float *)&v34[v21];\n              v26 = (float)(v20[5] + v30) + v20[6];\n            }\n            *(float *)&v24 = *(float *)&v24 + (float)(v25 / v26);\n            v19 = v24;\n          }\n        }\n        ++v21;\n        v20 += 7;\n      }\n      while ( v21 < v14 );\n    }\n    *(_DWORD *)v18 = v19;\n    ++v17;\n    ++v15;\n  }\n  while ( v17 != 7 );\n  sub_43DC80(a1, 3LL);\n  sub_43DC80(a1 + 12, 2LL);\n  return sub_43DC80(a1 + 20, 2LL);\n}\n", 
            "funcStartAddr": "0x41f2a0L", 
            "funcEndAddr": "0x41f5a3L", 
            "funcName": "sub_41F2A0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_41F5B0(void *src, int *a2, signed int a3, __int64 a4, __int64 a5, void *a6, float a7)\n{\n  __int64 v7; // r13\n  int v8; // eax\n  __int64 v9; // rbp\n  __int64 v10; // r15\n  float v11; // xmm1_4\n  double v12; // xmm0_8\n  float v13; // xmm0_4\n  unsigned int v14; // ebp\n  __int64 v15; // rsi\n  __int64 v16; // r14\n  signed __int64 v17; // r15\n  float v18; // xmm0_4\n  __int64 v19; // r13\n  __int64 v20; // rbp\n  float *v21; // r12\n  void *result; // rax\n  unsigned int v23; // [rsp+Ch] [rbp-37Ch]\n  float v24; // [rsp+14h] [rbp-374h]\n  __int64 v25; // [rsp+18h] [rbp-370h]\n  void *v26; // [rsp+20h] [rbp-368h]\n  int dest[214]; // [rsp+30h] [rbp-358h]\n\n  v25 = a5;\n  v7 = a4;\n  dest[0] = 1065353216;\n  v8 = *a2;\n  v23 = a3;\n  v26 = a6;\n  if ( a3 < 2 || v8 )\n  {\n    if ( a3 >= 2 && v8 == 1 )\n    {\n      v14 = dword_464000;\n      if ( dword_464000 > 0 )\n        memcpy(dest, src, 4LL * (unsigned int)dword_464000);\n      sub_43DC80(dest, v14);\n    }\n  }\n  else\n  {\n    v9 = 0LL;\n    v10 = a5;\n    do\n    {\n      v11 = *(float *)(v7 + 4 * v9);\n      v12 = -999.0;\n      if ( v11 > 0.0 )\n        v12 = log(v11);\n      v13 = v12;\n      a7 = sub_415EE0((__int64)src, dword_464000, v10) + v13;\n      *(float *)&dest[v9++] = a7;\n      v10 += 80LL;\n    }\n    while ( v23 != v9 );\n    sub_415D30((float *)dest, v23);\n  }\n  sub_43CBE0(src, (unsigned int)dword_464000);\n  v15 = (unsigned int)dword_464000;\n  if ( dword_464000 > 0 )\n  {\n    v16 = 0LL;\n    v17 = 0LL;\n    v24 = a7;\n    do\n    {\n      if ( (signed int)v23 <= 0 )\n      {\n        v18 = 0.0;\n      }\n      else\n      {\n        v18 = 0.0;\n        v19 = v23;\n        v20 = v25;\n        v21 = (float *)dest;\n        do\n        {\n          sub_43CBE0(v20, v15);\n          v18 = v18\n              + (float)((float)((float)(*((float *)src + v17) + *(float *)(v20 + v16)) * *v21) / (float)(v18 + v24));\n          v15 = (unsigned int)dword_464000;\n          ++v21;\n          v20 += 80LL;\n          --v19;\n        }\n        while ( v19 );\n      }\n      *((float *)src + v17++) = v18;\n      v16 += 4LL;\n    }\n    while ( v17 < (signed int)v15 );\n  }\n  result = (void *)sub_43DC80(src, v15);\n  if ( v26 )\n  {\n    if ( (signed int)v23 > 0 )\n      result = memcpy(v26, dest, 4LL * v23);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41f5b0L", 
            "funcEndAddr": "0x41f7aaL", 
            "funcName": "sub_41F5B0"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_41F7B0(int a1)\n{\n  _QWORD *v1; // rax\n  _DWORD *v2; // rbx\n\n  v1 = (_QWORD *)sub_4382F0(\"tophits.c\", 82LL, 32LL);\n  v2 = v1;\n  *v1 = 0LL;\n  v1[1] = sub_4382F0(\"tophits.c\", 84LL, 104LL * a1);\n  v2[4] = a1;\n  v2[5] = 0;\n  v2[6] = a1;\n  return v2;\n}\n", 
            "funcStartAddr": "0x41f7b0L", 
            "funcEndAddr": "0x41f804L", 
            "funcName": "sub_41F7B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41F810(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_QWORD *)(a1 + 8) = sub_438340(\n                          \"tophits.c\",\n                          93LL,\n                          *(_QWORD *)(a1 + 8),\n                          104 * (*(signed int *)(a1 + 24) + (signed __int64)*(signed int *)(a1 + 16)));\n  result = *(unsigned int *)(a1 + 24);\n  *(_DWORD *)(a1 + 16) += result;\n  return result;\n}\n", 
            "funcStartAddr": "0x41f810L", 
            "funcEndAddr": "0x41f842L", 
            "funcName": "sub_41F810"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41F850(void *ptr)\n{\n  signed int *v1; // r14\n  bool v2; // zf\n  bool v3; // sf\n  char *v4; // rdi\n  __int64 v5; // rbx\n  signed __int64 v6; // r15\n\n  v1 = (signed int *)ptr;\n  v2 = *((_DWORD *)ptr + 5) == 0;\n  v3 = *((_DWORD *)ptr + 5) < 0;\n  v4 = (char *)*((_QWORD *)ptr + 1);\n  if ( !v3 && !v2 )\n  {\n    v5 = 0LL;\n    v6 = 0LL;\n    do\n    {\n      if ( *(_QWORD *)&v4[v5 + 96] )\n      {\n        sub_41F900(*(void **)&v4[v5 + 96]);\n        v4 = (char *)*((_QWORD *)v1 + 1);\n      }\n      if ( *(_QWORD *)&v4[v5 + 40] )\n      {\n        free(*(void **)&v4[v5 + 40]);\n        v4 = (char *)*((_QWORD *)v1 + 1);\n      }\n      if ( *(_QWORD *)&v4[v5 + 48] )\n      {\n        free(*(void **)&v4[v5 + 48]);\n        v4 = (char *)*((_QWORD *)v1 + 1);\n      }\n      if ( *(_QWORD *)&v4[v5 + 56] )\n      {\n        free(*(void **)&v4[v5 + 56]);\n        v4 = (char *)*((_QWORD *)v1 + 1);\n      }\n      ++v6;\n      v5 += 104LL;\n    }\n    while ( v6 < v1[5] );\n  }\n  free(v4);\n  if ( *(_QWORD *)v1 )\n    free(*(void **)v1);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x41f850L", 
            "funcEndAddr": "0x41f8f8L", 
            "funcName": "sub_41F850"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41F900(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n  void *v5; // rdi\n  void *v6; // rdi\n  void *v7; // rdi\n  void *v8; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = *(void **)ptr;\n    if ( *v1 )\n      free(v2);\n    v3 = (void *)v1[1];\n    if ( v3 )\n      free(v3);\n    v4 = (void *)v1[2];\n    if ( v4 )\n      free(v4);\n    v5 = (void *)v1[3];\n    if ( v5 )\n      free(v5);\n    v6 = (void *)v1[4];\n    if ( v6 )\n      free(v6);\n    v7 = (void *)v1[6];\n    if ( v7 )\n      free(v7);\n    v8 = (void *)v1[7];\n    if ( v8 )\n      free(v8);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x41f900L", 
            "funcEndAddr": "0x41f975L", 
            "funcName": "sub_41F900"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_41F980()\n{\n  __int64 result; // rax\n\n  result = sub_4382F0(\"tophits.c\", 117LL, 72LL);\n  *(_OWORD *)(result + 16) = 0LL;\n  *(_OWORD *)result = 0LL;\n  *(_QWORD *)(result + 32) = 0LL;\n  *(_OWORD *)(result + 48) = 0LL;\n  *(_QWORD *)(result + 64) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x41f980L", 
            "funcEndAddr": "0x41f9b5L", 
            "funcName": "sub_41F980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41F9C0(__int64 a1, char *a2, char *a3, char *a4, int a5, int a6, double a7, double a8, float a9, double a10, float a11, int a12, int a13, int a14, int a15, int a16, int a17, __int64 a18)\n{\n  int v18; // er14\n  int v19; // er15\n  char *v20; // r12\n  char *v21; // r13\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rcx\n  int v25; // edx\n  signed __int64 v26; // rsi\n  __int64 result; // rax\n  float v28; // [rsp+Ch] [rbp-4Ch]\n\n  v18 = a6;\n  v19 = a5;\n  v20 = a4;\n  v21 = a3;\n  v28 = a11;\n  v22 = *(signed int *)(a1 + 20);\n  if ( (_DWORD)v22 == *(_DWORD *)(a1 + 16) )\n  {\n    *(_QWORD *)(a1 + 8) = sub_438340(\"tophits.c\", 93LL, *(_QWORD *)(a1 + 8), 104 * (v22 + *(signed int *)(a1 + 24)));\n    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a1 + 24);\n  }\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104LL * *(signed int *)(a1 + 20) + 40) = sub_4381A0(a2);\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104LL * *(signed int *)(a1 + 20) + 48) = sub_4381A0(v21);\n  v23 = sub_4381A0(v20);\n  v24 = *(_QWORD *)(a1 + 8);\n  v25 = *(_DWORD *)(a1 + 20);\n  v26 = 104LL * *(signed int *)(a1 + 20);\n  *(_QWORD *)(v24 + v26 + 56) = v23;\n  *(double *)(v24 + v26) = a7;\n  *(double *)(v24 + v26 + 16) = a8;\n  *(float *)(v24 + v26 + 8) = a9;\n  *(double *)(v24 + v26 + 32) = a10;\n  *(float *)(v24 + v26 + 24) = v28;\n  *(_DWORD *)(v24 + v26 + 64) = v19;\n  *(_DWORD *)(v24 + v26 + 68) = v18;\n  *(_DWORD *)(v24 + v26 + 72) = a12;\n  *(_DWORD *)(v24 + v26 + 76) = a13;\n  *(_DWORD *)(v24 + v26 + 80) = a14;\n  *(_DWORD *)(v24 + v26 + 84) = a15;\n  *(_DWORD *)(v24 + v26 + 88) = a16;\n  *(_DWORD *)(v24 + v26 + 92) = a17;\n  *(_QWORD *)(v24 + v26 + 96) = a18;\n  result = (unsigned int)(v25 + 1);\n  *(_DWORD *)(a1 + 20) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x41f9c0L", 
            "funcEndAddr": "0x41fb17L", 
            "funcName": "sub_41F9C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41FB20(_QWORD *a1, int a2, _QWORD *a3, _DWORD *a4, _QWORD *a5, _DWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12, _DWORD *a13, _DWORD *a14, _DWORD *a15, _DWORD *a16, _DWORD *a17, _QWORD *a18)\n{\n  __int64 result; // rax\n\n  if ( a3 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 16LL);\n    *a3 = result;\n  }\n  if ( a4 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 8LL);\n    *a4 = result;\n  }\n  if ( a5 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 32LL);\n    *a5 = result;\n  }\n  if ( a6 )\n    *a6 = *(_DWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 24LL);\n  if ( a7 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 40LL);\n    *a7 = result;\n  }\n  if ( a8 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 48LL);\n    *a8 = result;\n  }\n  if ( a9 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 56LL);\n    *a9 = result;\n  }\n  if ( a10 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 64LL);\n    *a10 = result;\n  }\n  if ( a11 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 68LL);\n    *a11 = result;\n  }\n  if ( a12 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 72LL);\n    *a12 = result;\n  }\n  if ( a13 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 76LL);\n    *a13 = result;\n  }\n  if ( a14 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 80LL);\n    *a14 = result;\n  }\n  if ( a15 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 84LL);\n    *a15 = result;\n  }\n  if ( a16 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 88LL);\n    *a16 = result;\n  }\n  if ( a17 )\n  {\n    result = *(unsigned int *)(*(_QWORD *)(*a1 + 8LL * a2) + 92LL);\n    *a17 = result;\n  }\n  if ( a18 )\n  {\n    result = *(_QWORD *)(*(_QWORD *)(*a1 + 8LL * a2) + 96LL);\n    *a18 = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41fb20L", 
            "funcEndAddr": "0x41fcaeL", 
            "funcName": "sub_41FB20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41FCB0(__int64 a1)\n{\n  __int64 v1; // r14\n  const char **v2; // r15\n  __int64 v3; // r12\n  unsigned int v4; // ebx\n  int v5; // eax\n\n  v1 = *(signed int *)(a1 + 20);\n  if ( v1 <= 0 )\n  {\n    v4 = 0;\n  }\n  else\n  {\n    v2 = (const char **)(*(_QWORD *)(a1 + 8) + 40LL);\n    v3 = 0LL;\n    v4 = 0;\n    do\n    {\n      v5 = strlen(*v2);\n      if ( (signed int)v4 < v5 )\n        v4 = v5;\n      ++v3;\n      v2 += 13;\n    }\n    while ( v3 < v1 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x41fcb0L", 
            "funcEndAddr": "0x41fcfcL", 
            "funcName": "sub_41FCB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41FD30(__int64 a1)\n{\n  _QWORD *v1; // rax\n  signed __int64 v2; // rsi\n  signed __int64 v3; // rax\n  signed __int64 v4; // rcx\n\n  if ( *(_DWORD *)(a1 + 20) )\n  {\n    v1 = (_QWORD *)sub_4382F0(\"tophits.c\", 300LL, 8LL * *(signed int *)(a1 + 20));\n    *(_QWORD *)a1 = v1;\n    v2 = *(signed int *)(a1 + 20);\n    if ( v2 > 0 )\n    {\n      *v1 = *(_QWORD *)(a1 + 8);\n      if ( (_DWORD)v2 != 1 )\n      {\n        v3 = 1LL;\n        v4 = 104LL;\n        do\n        {\n          *(_QWORD *)(*(_QWORD *)a1 + 8 * v3++) = v4 + *(_QWORD *)(a1 + 8);\n          v4 += 104LL;\n        }\n        while ( v3 < v2 );\n      }\n      if ( (signed int)v2 >= 2 )\n        sub_422DF0(*(_QWORD *)a1, v2, 8LL, sub_41FD00);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x41fd30L", 
            "funcEndAddr": "0x41fdb7L", 
            "funcName": "sub_41FD30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_41FDC0(__int64 a1, signed int a2, double a3)\n{\n  __int64 v3; // r14\n  int v4; // er13\n  __int64 v5; // r15\n  signed __int64 v6; // rbp\n  __int64 v7; // rbx\n  const char *v8; // rdi\n  const char *v9; // rdi\n  __int64 v10; // r12\n  int v11; // ecx\n  const char *v12; // rdi\n  const char *v13; // rdi\n  __int64 v14; // rbp\n\n  v3 = a1;\n  v4 = 104 * *(_DWORD *)(a1 + 16) + 32;\n  v5 = *(signed int *)(a1 + 20);\n  if ( v5 <= 0 )\n    goto LABEL_26;\n  v6 = *(_QWORD *)(a1 + 8) + 40LL;\n  v7 = 0LL;\n  do\n  {\n    if ( *(_QWORD *)v6 )\n      v4 += strlen(*(const char **)v6) + 1;\n    v8 = *(const char **)(v6 + 8);\n    if ( v8 )\n      v4 += strlen(v8) + 1;\n    v9 = *(const char **)(v6 + 16);\n    if ( v9 )\n      v4 += strlen(v9) + 1;\n    v10 = *(_QWORD *)(v6 + 56);\n    if ( v10 )\n    {\n      v11 = (*(_QWORD *)v10 != 0LL) + 1;\n      if ( !*(_QWORD *)(v10 + 8) )\n        v11 = *(_QWORD *)v10 != 0LL;\n      v4 += (v11\n           - ((*(_QWORD *)(v10 + 16) < 1uLL)\n            - 1)\n           - ((*(_QWORD *)(v10 + 24) < 1uLL)\n            - 1)\n           - ((*(_QWORD *)(v10 + 32) < 1uLL)\n            - 1))\n          * (*(_DWORD *)(v10 + 40) + 1)\n          + 72;\n      v12 = *(const char **)(v10 + 48);\n      if ( v12 )\n        v4 += strlen(v12) + 1;\n      v13 = *(const char **)(v10 + 56);\n      if ( v13 )\n        v4 += strlen(v13) + 1;\n    }\n    ++v7;\n    v6 += 104LL;\n  }\n  while ( v7 < v5 );\n  if ( (signed int)v5 <= 0 )\n  {\nLABEL_26:\n    LODWORD(v14) = 0;\n  }\n  else\n  {\n    v14 = 0LL;\n    do\n    {\n      if ( *(double *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * v14) + 16LL) * (double)a2 >= a3 )\n        break;\n      ++v14;\n    }\n    while ( v14 < v5 );\n  }\n  puts(\"tophits_s report:\");\n  printf(\"     Total hits:           %d\\n\", *(unsigned int *)(v3 + 20));\n  printf(\"     Satisfying E cutoff:  %d\\n\", (unsigned int)v14);\n  return printf(\n           \"     Total memory:         %dK\\n\",\n           ((unsigned __int64)(274877907LL * v4) >> 63) + (unsigned int)(274877907LL * v4 >> 38));\n}\n", 
            "funcStartAddr": "0x41fdc0L", 
            "funcEndAddr": "0x41ff6bL", 
            "funcName": "sub_41FDC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41FF70(int a1, _QWORD *a2)\n{\n  _QWORD *v2; // rbx\n  signed __int64 v3; // rbp\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_4382F0(\"trace.c\", 40LL, 32LL);\n  v2[1] = sub_4382F0(\"trace.c\", 41LL, a1);\n  v3 = 4LL * a1;\n  v2[2] = sub_4382F0(\"trace.c\", 42LL, v3);\n  result = sub_4382F0(\"trace.c\", 43LL, v3);\n  v2[3] = result;\n  *a2 = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x41ff70L", 
            "funcEndAddr": "0x41ffe1L", 
            "funcName": "sub_41FF70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41FFF0(_QWORD *a1, int a2)\n{\n  signed __int64 v2; // r14\n  __int64 result; // rax\n\n  a1[1] = sub_438340(\"trace.c\", 49LL, a1[1], a2);\n  v2 = 4LL * a2;\n  a1[2] = sub_438340(\"trace.c\", 50LL, a1[2], v2);\n  result = sub_438340(\"trace.c\", 51LL, a1[3], v2);\n  a1[3] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x41fff0L", 
            "funcEndAddr": "0x420054L", 
            "funcName": "sub_41FFF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_420060(void *ptr)\n{\n  if ( ptr )\n  {\n    free(*((void **)ptr + 3));\n    free(*((void **)ptr + 2));\n    free(*((void **)ptr + 1));\n    free(ptr);\n  }\n}\n", 
            "funcStartAddr": "0x420060L", 
            "funcEndAddr": "0x42008fL", 
            "funcName": "sub_420060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_420090(_QWORD *a1, __int64 a2, char a3, int a4, int a5)\n{\n  __int64 result; // rax\n\n  a2 = (signed int)a2;\n  *(_BYTE *)(a1[1] + a2) = a3;\n  *(_DWORD *)(a1[2] + 4 * a2) = a4;\n  result = a1[3];\n  *(_DWORD *)(result + 4 * a2) = a5;\n  return result;\n}\n", 
            "funcStartAddr": "0x420090L", 
            "funcEndAddr": "0x4200aaL", 
            "funcName": "sub_420090"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4200B0(void *ptr, unsigned int a2, _QWORD *a3, unsigned int a4)\n{\n  unsigned int v4; // er12\n  _QWORD *v5; // r14\n  signed int v6; // er13\n  _QWORD *v7; // r15\n  unsigned __int64 v8; // rbx\n  __int64 v9; // rcx\n  unsigned __int64 v10; // rdx\n  signed __int64 v11; // rsi\n  __int64 v12; // rax\n  signed __int64 v13; // rdx\n  signed __int64 v14; // rcx\n  __int64 v15; // rsi\n  unsigned __int64 v16; // rsi\n  __int64 v17; // rdx\n  __int64 v18; // rsi\n  signed __int64 v19; // rdi\n  __int128 v20; // xmm1\n  __int128 v21; // xmm1\n  __int128 v22; // xmm1\n  __int128 v23; // xmm1\n  signed __int64 v24; // rsi\n  __int64 v25; // rdx\n  __int128 v26; // xmm1\n  __int64 v27; // rdx\n  unsigned __int64 v28; // rax\n  signed __int64 v29; // rcx\n  __int64 v30; // r9\n  signed __int64 v31; // rax\n  signed __int64 v32; // rcx\n  __int64 v33; // rdx\n  unsigned __int64 v34; // rdi\n  __int64 v35; // rsi\n  __int64 v36; // rdi\n  signed __int64 v37; // rcx\n  signed __int64 v38; // rax\n  __int128 v39; // xmm1\n  __int128 v40; // xmm1\n  __int128 v41; // xmm1\n  __int128 v42; // xmm1\n  signed __int64 v43; // rax\n  signed __int64 v44; // rcx\n  __int64 v45; // rsi\n  __int64 v46; // rdi\n  __int128 v47; // xmm1\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = ptr;\n  v8 = sub_4382F0(\"trace.c\", 110LL, 8LL * (signed int)(a4 + a2));\n  if ( (signed int)a2 <= 0 )\n    goto LABEL_22;\n  if ( a2 >= 4 && (v8 >= (unsigned __int64)ptr + 8 * a2 || v8 + 8LL * a2 <= (unsigned __int64)ptr) )\n  {\n    v9 = a2 & 0xFFFFFFFC;\n    v16 = (unsigned __int64)(v9 - 4) >> 2;\n    v17 = ((_BYTE)v16 + 1) & 3;\n    if ( (unsigned __int64)(v9 - 4) >= 0xC )\n    {\n      v19 = v17 - 1 - v16;\n      v18 = 0LL;\n      do\n      {\n        v20 = *(_OWORD *)&v7[v18 + 2];\n        *(_OWORD *)(v8 + 8 * v18) = *(_OWORD *)&v7[v18];\n        *(_OWORD *)(v8 + 8 * v18 + 16) = v20;\n        v21 = *(_OWORD *)&v7[v18 + 6];\n        *(_OWORD *)(v8 + 8 * v18 + 32) = *(_OWORD *)&v7[v18 + 4];\n        *(_OWORD *)(v8 + 8 * v18 + 48) = v21;\n        v22 = *(_OWORD *)&v7[v18 + 10];\n        *(_OWORD *)(v8 + 8 * v18 + 64) = *(_OWORD *)&v7[v18 + 8];\n        *(_OWORD *)(v8 + 8 * v18 + 80) = v22;\n        v23 = *(_OWORD *)&v7[v18 + 14];\n        *(_OWORD *)(v8 + 8 * v18 + 96) = *(_OWORD *)&v7[v18 + 12];\n        *(_OWORD *)(v8 + 8 * v18 + 112) = v23;\n        v18 += 16LL;\n        v19 += 4LL;\n      }\n      while ( v19 );\n      if ( !v17 )\n      {\nLABEL_21:\n        if ( v9 == v6 )\n          goto LABEL_22;\n        goto LABEL_6;\n      }\n    }\n    else\n    {\n      v18 = 0LL;\n      if ( !v17 )\n        goto LABEL_21;\n    }\n    v24 = 8 * v18 + 16;\n    v25 = -v17;\n    do\n    {\n      v26 = *(_OWORD *)((char *)v7 + v24);\n      *(_OWORD *)(v8 + v24 - 16) = *(_OWORD *)((char *)v7 + v24 - 16);\n      *(_OWORD *)(v8 + v24) = v26;\n      v24 += 32LL;\n      ++v25;\n    }\n    while ( v25 );\n    goto LABEL_21;\n  }\n  v9 = 0LL;\nLABEL_6:\n  v10 = (unsigned int)v6 - 1LL - v9;\n  if ( ((_BYTE)v6 - (_BYTE)v9) & 7 )\n  {\n    v11 = -(signed __int64)(((_BYTE)v6 - (_BYTE)v9) & 7);\n    do\n    {\n      *(_QWORD *)(v8 + 8 * v9) = v7[v9];\n      ++v9;\n      ++v11;\n    }\n    while ( v11 );\n  }\n  if ( v10 >= 7 )\n  {\n    v12 = (unsigned int)v6 - v9;\n    v13 = v8 + 8 * v9 + 56;\n    v14 = (signed __int64)&v7[v9 + 7];\n    v15 = 0LL;\n    do\n    {\n      *(_QWORD *)(v13 + 8 * v15 - 56) = *(_QWORD *)(v14 + 8 * v15 - 56);\n      *(_QWORD *)(v13 + 8 * v15 - 48) = *(_QWORD *)(v14 + 8 * v15 - 48);\n      *(_QWORD *)(v13 + 8 * v15 - 40) = *(_QWORD *)(v14 + 8 * v15 - 40);\n      *(_QWORD *)(v13 + 8 * v15 - 32) = *(_QWORD *)(v14 + 8 * v15 - 32);\n      *(_QWORD *)(v13 + 8 * v15 - 24) = *(_QWORD *)(v14 + 8 * v15 - 24);\n      *(_QWORD *)(v13 + 8 * v15 - 16) = *(_QWORD *)(v14 + 8 * v15 - 16);\n      *(_QWORD *)(v13 + 8 * v15 - 8) = *(_QWORD *)(v14 + 8 * v15 - 8);\n      *(_QWORD *)(v13 + 8 * v15) = *(_QWORD *)(v14 + 8 * v15);\n      v15 += 8LL;\n    }\n    while ( v12 != v15 );\n  }\nLABEL_22:\n  if ( (signed int)v4 <= 0 )\n    goto LABEL_43;\n  if ( v4 >= 4 && (v8 + 8LL * v6 >= (unsigned __int64)&v5[v4] || v8 + 8LL * v4 + 8LL * v6 <= (unsigned __int64)v5) )\n  {\n    v27 = v4 & 0xFFFFFFFC;\n    v34 = (unsigned __int64)(v27 - 4) >> 2;\n    v35 = ((_BYTE)v34 + 1) & 3;\n    if ( (unsigned __int64)(v27 - 4) >= 0xC )\n    {\n      v37 = v8 + 8LL * v6 + 112;\n      v38 = v35 - 1 - v34;\n      v36 = 0LL;\n      do\n      {\n        v39 = *(_OWORD *)&v5[v36 + 2];\n        *(_OWORD *)(v8 + 8LL * v6 + 8 * v36) = *(_OWORD *)&v5[v36];\n        *(_OWORD *)(v37 + 8 * v36 - 96) = v39;\n        v40 = *(_OWORD *)&v5[v36 + 6];\n        *(_OWORD *)(v37 + 8 * v36 - 80) = *(_OWORD *)&v5[v36 + 4];\n        *(_OWORD *)(v37 + 8 * v36 - 64) = v40;\n        v41 = *(_OWORD *)&v5[v36 + 10];\n        *(_OWORD *)(v37 + 8 * v36 - 48) = *(_OWORD *)&v5[v36 + 8];\n        *(_OWORD *)(v37 + 8 * v36 - 32) = v41;\n        v42 = *(_OWORD *)&v5[v36 + 14];\n        *(_OWORD *)(v37 + 8 * v36 - 16) = *(_OWORD *)&v5[v36 + 12];\n        *(_OWORD *)(v37 + 8 * v36) = v42;\n        v36 += 16LL;\n        v38 += 4LL;\n      }\n      while ( v38 );\n      if ( !v35 )\n      {\nLABEL_42:\n        if ( v27 == v4 )\n          goto LABEL_43;\n        goto LABEL_27;\n      }\n    }\n    else\n    {\n      v36 = 0LL;\n      if ( !v35 )\n        goto LABEL_42;\n    }\n    v43 = v8 + 8LL * v6 + 8 * v36 + 16;\n    v44 = (signed __int64)&v5[v36 + 2];\n    v45 = -v35;\n    v46 = 0LL;\n    do\n    {\n      v47 = *(_OWORD *)(v44 + v46);\n      *(_OWORD *)(v43 + v46 - 16) = *(_OWORD *)(v44 + v46 - 16);\n      *(_OWORD *)(v43 + v46) = v47;\n      v46 += 32LL;\n      ++v45;\n    }\n    while ( v45 );\n    goto LABEL_42;\n  }\n  v27 = 0LL;\nLABEL_27:\n  v28 = v4 - v27 - 1;\n  if ( v4 & 3 )\n  {\n    v29 = -(signed __int64)(v4 & 3);\n    do\n    {\n      *(_QWORD *)(v8 + 8LL * v6 + 8 * v27) = v5[v27];\n      ++v27;\n      ++v29;\n    }\n    while ( v29 );\n  }\n  if ( v28 >= 3 )\n  {\n    v30 = v4 - v27;\n    v31 = v8 + 8LL * v6 + 8 * v27 + 24;\n    v32 = (signed __int64)&v5[v27 + 3];\n    v33 = 0LL;\n    do\n    {\n      *(_QWORD *)(v31 + 8 * v33 - 24) = *(_QWORD *)(v32 + 8 * v33 - 24);\n      *(_QWORD *)(v31 + 8 * v33 - 16) = *(_QWORD *)(v32 + 8 * v33 - 16);\n      *(_QWORD *)(v31 + 8 * v33 - 8) = *(_QWORD *)(v32 + 8 * v33 - 8);\n      *(_QWORD *)(v31 + 8 * v33) = *(_QWORD *)(v32 + 8 * v33);\n      v33 += 4LL;\n    }\n    while ( v30 != v33 );\n  }\nLABEL_43:\n  free(v7);\n  free(v5);\n  return v8;\n}\n", 
            "funcStartAddr": "0x4200b0L", 
            "funcEndAddr": "0x420492L", 
            "funcName": "sub_4200B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4204A0(signed int *a1)\n{\n  signed int *v1; // rbx\n  __int64 v2; // r14\n  __int64 v3; // r15\n  __int64 v4; // r12\n  __int64 v5; // rax\n  _BYTE *v6; // rdi\n  signed __int64 v7; // rax\n  signed __int64 v8; // rcx\n\n  v1 = a1;\n  v2 = sub_4382F0(\"trace.c\", 149LL, *a1);\n  v3 = sub_4382F0(\"trace.c\", 150LL, 4LL * *a1);\n  v4 = sub_4382F0(\"trace.c\", 151LL, 4LL * *a1);\n  v5 = *a1;\n  v6 = (_BYTE *)*((_QWORD *)a1 + 1);\n  if ( v5 > 0 )\n  {\n    v7 = v5 - 1;\n    v8 = 0LL;\n    do\n    {\n      *(_BYTE *)(v2 + v8) = v6[v7];\n      *(_DWORD *)(v3 + 4 * v8) = *(_DWORD *)(*((_QWORD *)v1 + 2) + 4 * v7);\n      *(_DWORD *)(v4 + 4 * v8++) = *(_DWORD *)(*((_QWORD *)v1 + 3) + 4 * v7);\n      v6 = (_BYTE *)*((_QWORD *)v1 + 1);\n      --v7;\n    }\n    while ( v8 < *v1 );\n  }\n  free(v6);\n  free(*((void **)v1 + 2));\n  free(*((void **)v1 + 3));\n  *((_QWORD *)v1 + 1) = v2;\n  *((_QWORD *)v1 + 2) = v3;\n  *((_QWORD *)v1 + 3) = v4;\n}\n", 
            "funcStartAddr": "0x4204a0L", 
            "funcEndAddr": "0x420571L", 
            "funcName": "sub_4204A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_420580(__int64 a1, __int64 a2, _DWORD *a3, float a4)\n{\n  _QWORD *v4; // r13\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rcx\n  char v12; // cl\n  __int64 v13; // rcx\n  __int64 v14; // rcx\n  char v15; // al\n  float *v16; // rax\n  int v17; // ecx\n  __int64 v18; // rax\n  int v19; // ecx\n  char v20; // al\n  int v21; // ecx\n  __int64 v22; // rax\n  int v23; // ecx\n  int v24; // ecx\n  int v25; // ecx\n  int v26; // ecx\n  char v27; // r12\n\n  v4 = a3;\n  if ( *a3 > 0 )\n  {\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v12 = *(_BYTE *)(v4[1] + v5);\n      if ( v12 == 3 )\n        break;\n      if ( v12 == 1 )\n      {\n        v13 = *(_QWORD *)(a1 + 152);\nLABEL_18:\n        sub_4028B0(\n          *(_QWORD *)(v13 + 8LL * *(signed int *)(v4[2] + 4 * v5)),\n          *(char *)(a2 + *(signed int *)(v4[3] + 4 * v5)),\n          a4);\n      }\n      v14 = v4[1];\n      v15 = *(_BYTE *)(v14 + v5);\n      switch ( *(char *)(v14 + v5) )\n      {\n        case 1:\n          switch ( *(char *)(v14 + v5 + 1) )\n          {\n            case 1:\n              v16 = *(float **)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n              *v16 = *v16 + a4;\n              goto LABEL_48;\n            case 2:\n              v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n              *(float *)(v8 + 8) = *(float *)(v8 + 8) + a4;\n              goto LABEL_48;\n            case 3:\n              v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n              *(float *)(v9 + 4) = *(float *)(v9 + 4) + a4;\n              goto LABEL_48;\n            case 7:\n              v10 = *(_QWORD *)(a1 + 216);\n              v11 = *(signed int *)(v4[2] + 4 * v5);\n              goto LABEL_13;\n            default:\n              goto LABEL_46;\n          }\n          goto LABEL_46;\n        case 2:\n          v21 = *(char *)(v14 + v5 + 1);\n          switch ( v21 )\n          {\n            case 7:\n              goto LABEL_48;\n            case 2:\n              v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n              *(float *)(v7 + 24) = *(float *)(v7 + 24) + a4;\n              break;\n            case 1:\n              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n              *(float *)(v22 + 20) = *(float *)(v22 + 20) + a4;\n              break;\n            default:\n              goto LABEL_46;\n          }\n          break;\n        case 3:\n          v17 = *(char *)(v14 + v5 + 1);\n          if ( v17 == 3 )\n          {\n            v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n            *(float *)(v6 + 16) = *(float *)(v6 + 16) + a4;\n          }\n          else\n          {\n            if ( v17 != 1 )\n              goto LABEL_46;\n            v18 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8LL * *(signed int *)(v4[2] + 4 * v5));\n            *(float *)(v18 + 12) = *(float *)(v18 + 12) + a4;\n          }\n          break;\n        case 4:\n        case 9:\n          break;\n        case 5:\n          v23 = *(char *)(v14 + v5 + 1);\n          if ( v23 == 5 )\n          {\n            *(float *)(a1 + 176) = *(float *)(a1 + 176) + a4;\n          }\n          else\n          {\n            if ( v23 != 6 )\n              goto LABEL_46;\n            *(float *)(a1 + 172) = *(float *)(a1 + 172) + a4;\n          }\n          break;\n        case 6:\n          v24 = *(char *)(v14 + v5 + 1);\n          if ( v24 == 2 )\n          {\n            *(float *)(a1 + 168) = *(float *)(a1 + 168) + a4;\n          }\n          else\n          {\n            if ( v24 != 1 )\n              goto LABEL_46;\n            v10 = *(_QWORD *)(a1 + 208);\n            v11 = *(signed int *)(v4[2] + 4 * v5 + 4);\nLABEL_13:\n            *(float *)(v10 + 4 * v11) = *(float *)(v10 + 4 * v11) + a4;\n          }\n          break;\n        case 7:\n          v25 = *(char *)(v14 + v5 + 1);\n          if ( v25 == 10 )\n          {\n            *(float *)(a1 + 184) = *(float *)(a1 + 184) + a4;\n          }\n          else\n          {\n            if ( v25 != 8 )\n              goto LABEL_46;\n            *(float *)(a1 + 180) = *(float *)(a1 + 180) + a4;\n          }\n          break;\n        case 8:\n          v26 = *(char *)(v14 + v5 + 1);\n          if ( v26 == 8 )\n          {\n            *(float *)(a1 + 192) = *(float *)(a1 + 192) + a4;\n          }\n          else\n          {\n            if ( v26 != 9 )\n            {\nLABEL_46:\n              v27 = (unsigned __int64)sub_408740(v15);\n              sub_408740(*(char *)(v4[1] + v5 + 1));\n              sub_4325B0(\"illegal state transition %s->%s in traceback\", v27);\n            }\n            *(float *)(a1 + 188) = *(float *)(a1 + 188) + a4;\n          }\n          break;\n        case 10:\n          v19 = *(char *)(v14 + v5 + 1);\n          if ( v19 == 10 )\n          {\n            *(float *)(a1 + 200) = *(float *)(a1 + 200) + a4;\n          }\n          else\n          {\n            if ( v19 != 6 )\n              goto LABEL_46;\n            *(float *)(a1 + 196) = *(float *)(a1 + 196) + a4;\n          }\n          break;\n        default:\n          v20 = (unsigned __int64)sub_408740(v15);\n          sub_4325B0(\"illegal state %s in traceback\", v20);\n          return;\n      }\nLABEL_48:\n      if ( ++v5 >= *(signed int *)v4 )\n        return;\n    }\n    v13 = *(_QWORD *)(a1 + 160);\n    goto LABEL_18;\n  }\n}\n", 
            "funcStartAddr": "0x420580L", 
            "funcEndAddr": "0x42099dL", 
            "funcName": "sub_420580"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_4209A0(__int64 a1, __int64 a2, _DWORD *a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  _QWORD *v6; // r12\n  __int64 v7; // r14\n  __int64 v8; // r15\n  signed int v9; // ebp\n  signed __int64 v10; // rbx\n  __int64 v11; // rcx\n  char v12; // al\n  __int64 v13; // rsi\n  __int64 v14; // rdi\n  __int64 v15; // rsi\n  __int64 v16; // rdx\n  __int64 v17; // r8\n  __int64 v18; // rcx\n\n  v6 = a3;\n  v7 = a2;\n  v8 = a1;\n  v9 = 0;\n  if ( *a3 >= 2 )\n  {\n    v10 = 0LL;\n    v9 = 0;\n    do\n    {\n      v11 = v6[1];\n      v12 = *(_BYTE *)(v11 + v10);\n      if ( v12 == 1 )\n      {\n        v13 = *(_QWORD *)(v8 + 320);\n      }\n      else\n      {\n        if ( v12 != 3 )\n        {\n          v15 = v6[2];\n          v16 = *(unsigned int *)(v15 + 4 * v10);\n          goto LABEL_9;\n        }\n        v13 = *(_QWORD *)(v8 + 328);\n      }\n      v14 = *(_QWORD *)(v13 + 8LL * *(char *)(v7 + *(signed int *)(v6[3] + 4 * v10)));\n      v15 = v6[2];\n      v16 = *(signed int *)(v15 + 4 * v10);\n      v9 += *(_DWORD *)(v14 + 4 * v16);\nLABEL_9:\n      v17 = *(unsigned int *)(v15 + 4 * v10 + 4);\n      v18 = (unsigned int)*(char *)(v11 + v10++ + 1);\n      v9 += sub_420A60(v8, (unsigned int)v12, v16, v18, v17, a6);\n    }\n    while ( v10 < *(signed int *)v6 - 1LL );\n  }\n  return sub_415B40(v9);\n}\n", 
            "funcStartAddr": "0x4209a0L", 
            "funcEndAddr": "0x420a5fL", 
            "funcName": "sub_4209A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_420A60(__int64 a1, int a2, int a3, char a4, int a5)\n{\n  unsigned int v5; // ebx\n  int v6; // ebx\n  __int64 v7; // rax\n  char v8; // al\n  int v9; // ebp\n  int v10; // ebx\n  __int64 v11; // rcx\n  char v12; // bp\n  int v13; // edi\n  char v14; // si\n  signed __int64 result; // rax\n  char v16; // r14\n\n  v5 = 0;\n  switch ( a2 )\n  {\n    case 1:\n      v6 = a4;\n      switch ( a4 )\n      {\n        case 1:\n          v7 = **(_QWORD **)(a1 + 312);\n          goto LABEL_43;\n        case 2:\n          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 16LL);\n          goto LABEL_43;\n        case 3:\n          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8LL);\n          goto LABEL_43;\n        case 7:\n          v7 = *(_QWORD *)(a1 + 376);\n          goto LABEL_43;\n        default:\n          v12 = (unsigned __int64)sub_408740((char)a2);\n          v13 = v6;\n          break;\n      }\n      goto LABEL_29;\n    case 2:\n      v9 = a4;\n      if ( a4 == 7 )\n        return v5;\n      if ( a4 != 2 )\n      {\n        if ( a4 == 1 )\n        {\n          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 40LL);\n          break;\n        }\n        v16 = (unsigned __int64)sub_408740((char)a2);\n        sub_408740(v9);\n        v14 = v16;\nLABEL_30:\n        sub_4325B0(\"illegal %s->%s transition\", v14);\n      }\n      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 48LL);\n      break;\n    case 3:\n      v10 = a4;\n      if ( a4 == 3 )\n      {\n        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 32LL);\n      }\n      else\n      {\n        if ( a4 != 1 )\n        {\nLABEL_28:\n          v12 = (unsigned __int64)sub_408740((char)a2);\n          v13 = v10;\nLABEL_29:\n          sub_408740(v13);\n          v14 = v12;\n          goto LABEL_30;\n        }\n        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 24LL);\n      }\n      break;\n    case 4:\n    case 9:\n      return v5;\n    case 5:\n      v10 = a4;\n      if ( a4 == 5 )\n        return *(unsigned int *)(a1 + 340);\n      if ( a4 != 6 )\n        goto LABEL_28;\n      return *(unsigned int *)(a1 + 336);\n    case 6:\n      v10 = a4;\n      if ( a4 == 2 )\n        return sub_415A90(*(float *)(a1 + 168), 1.0);\n      if ( a4 != 1 )\n        goto LABEL_28;\n      v7 = *(_QWORD *)(a1 + 368);\n      v11 = a5;\n      return *(unsigned int *)(v7 + 4 * v11);\n    case 7:\n      v10 = a4;\n      if ( a4 == 10 )\n        return *(unsigned int *)(a1 + 348);\n      if ( a4 != 8 )\n        goto LABEL_28;\n      return *(unsigned int *)(a1 + 344);\n    case 8:\n      v10 = a4;\n      if ( a4 == 8 )\n        return *(unsigned int *)(a1 + 356);\n      if ( a4 != 9 )\n        goto LABEL_28;\n      return *(unsigned int *)(a1 + 352);\n    case 10:\n      v10 = a4;\n      if ( a4 == 10 )\n        return *(unsigned int *)(a1 + 364);\n      if ( a4 != 6 )\n        goto LABEL_28;\n      return *(unsigned int *)(a1 + 360);\n    default:\n      v8 = (unsigned __int64)sub_408740((char)a2);\n      sub_4325B0(\"illegal state %s in traceback\", v8);\n      return result;\n  }\nLABEL_43:\n  v11 = a3;\n  return *(unsigned int *)(v7 + 4 * v11);\n}\n", 
            "funcStartAddr": "0x420a60L", 
            "funcEndAddr": "0x420c91L", 
            "funcName": "sub_420A60"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_420CA0(__int64 a1, __int64 a2, __int64 a3, int a4, signed int a5, __int64 a6, int a7)\n{\n  signed int v7; // ebx\n  int v8; // ebp\n  __m128i *v9; // rax\n  __int64 v10; // r13\n  signed int *v11; // rdi\n  signed __int64 v12; // rbp\n  int v13; // ebx\n  __int64 v14; // rcx\n  __int64 v15; // rcx\n  int v16; // edx\n  bool v17; // zf\n  char v18; // al\n  signed int v19; // er12\n  __int64 v20; // rbp\n  __m128i v21; // xmm0\n  __int64 v22; // rdx\n  __m128i *v23; // rsi\n  __m128i v24; // xmm1\n  __m128i v25; // xmm2\n  __m128i v26; // xmm1\n  _DWORD *v27; // rdx\n  __int64 v28; // rcx\n  signed int *v29; // r14\n  __int64 v30; // rbp\n  __int64 v31; // rax\n  signed __int64 v32; // rcx\n  int v33; // edi\n  unsigned int v34; // esi\n  int v35; // ebp\n  unsigned int v36; // esi\n  signed __int64 v37; // rdx\n  signed __int64 v38; // rcx\n  __int64 v39; // rsi\n  __int64 v40; // rax\n  _QWORD *v41; // r9\n  __int64 v42; // rax\n  __int64 v43; // rsi\n  __int64 v44; // r13\n  __m128i *v45; // r8\n  signed int v46; // ebp\n  __int64 v47; // rdi\n  __int64 v48; // rax\n  __int64 v49; // rcx\n  __int64 v50; // rax\n  __int64 v51; // r12\n  signed __int64 v52; // rcx\n  signed int *v53; // rcx\n  __int64 v54; // rdx\n  signed int *v55; // rdx\n  signed __int64 v56; // rbp\n  signed int v57; // er15\n  __int32_t v58; // ebx\n  const __int32_t **v59; // rax\n  char v60; // cl\n  __int64 v61; // rax\n  __int64 v62; // rdx\n  __int64 v63; // rcx\n  __int32_t v64; // ebx\n  const __int32_t **v65; // rax\n  __int64 v66; // rdi\n  __int64 v67; // rcx\n  int v68; // eax\n  signed __int64 v69; // rcx\n  signed __int64 v70; // rsi\n  char v71; // bl\n  unsigned __int8 v72; // dl\n  __int64 v73; // rdx\n  int v74; // edx\n  signed __int64 v75; // r12\n  signed __int64 v76; // r14\n  __int64 v77; // r15\n  const unsigned __int16 **v78; // rax\n  const unsigned __int16 *v79; // rdx\n  __int64 v80; // rax\n  char *v81; // rdi\n  unsigned int v82; // ecx\n  unsigned int v83; // ebx\n  unsigned int v84; // esi\n  __int64 v85; // rbp\n  __int64 v86; // rcx\n  signed __int64 v87; // rdi\n  int v88; // ebp\n  signed __int64 v89; // rdx\n  char *v90; // rax\n  signed __int64 v91; // r10\n  char v92; // cl\n  unsigned __int8 v93; // bl\n  __int64 v94; // rsi\n  int v95; // ecx\n  _QWORD *v96; // r13\n  char *v97; // rax\n  signed __int64 v98; // r15\n  signed __int64 v99; // rbx\n  __int64 v100; // r14\n  __int64 v101; // rbp\n  int v102; // eax\n  __int64 v103; // rcx\n  int v104; // eax\n  __int64 v105; // rcx\n  char *v106; // rax\n  __int64 v107; // rax\n  __int64 v108; // rcx\n  __m128i *v109; // rdi\n  __int64 v110; // rdx\n  signed int *v111; // rbx\n  unsigned int v112; // esi\n  __int64 v113; // rcx\n  __int64 v114; // r12\n  signed __int64 v115; // rcx\n  signed int *v116; // rcx\n  __int64 v117; // r12\n  _QWORD *result; // rax\n  signed __int64 v119; // [rsp+8h] [rbp-E0h]\n  _QWORD *v120; // [rsp+8h] [rbp-E0h]\n  __m128i *ptr; // [rsp+10h] [rbp-D8h]\n  unsigned int v122; // [rsp+18h] [rbp-D0h]\n  signed int v123; // [rsp+1Ch] [rbp-CCh]\n  signed int v124; // [rsp+20h] [rbp-C8h]\n  signed int *v125; // [rsp+28h] [rbp-C0h]\n  __int64 v126; // [rsp+30h] [rbp-B8h]\n  __int64 v127; // [rsp+38h] [rbp-B0h]\n  __int64 v128; // [rsp+40h] [rbp-A8h]\n  __int64 v129; // [rsp+50h] [rbp-98h]\n  __int64 v130; // [rsp+58h] [rbp-90h]\n  __int64 v131; // [rsp+60h] [rbp-88h]\n  unsigned __int64 v132; // [rsp+70h] [rbp-78h]\n  __int64 v133; // [rsp+80h] [rbp-68h]\n  __int64 v134; // [rsp+88h] [rbp-60h]\n  __int64 v135; // [rsp+90h] [rbp-58h]\n  __int64 v136; // [rsp+98h] [rbp-50h]\n  __int64 v137; // [rsp+A0h] [rbp-48h]\n\n  v126 = a6;\n  v7 = a5;\n  v8 = a4;\n  v134 = a3;\n  v137 = a2;\n  v128 = a1;\n  v122 = a5 + 1;\n  v119 = 4LL * (a5 + 1);\n  v9 = (__m128i *)sub_4382F0(\"trace.c\", 408LL, 4LL * (a5 + 1));\n  ptr = v9;\n  if ( v7 >= 0 )\n  {\n    memset(v9, 0, 4LL * (unsigned int)v7 + 4);\n    v9 = ptr;\n  }\n  v124 = v7;\n  v123 = v8;\n  if ( v8 > 0 )\n  {\n    v10 = 0LL;\n    do\n    {\n      v11 = *(signed int **)(v126 + 8 * v10);\n      if ( *v11 > 0 )\n      {\n        v12 = 0LL;\n        v13 = 0;\n        do\n        {\n          v14 = *((_QWORD *)v11 + 1);\n          switch ( *(char *)(v14 + v12) )\n          {\n            case 1:\n            case 2:\n              v15 = *(signed int *)(*((_QWORD *)v11 + 2) + 4 * v12);\n              if ( v13 > *((_DWORD *)v9->m128i_i64 + v15 - 1) )\n                *((_DWORD *)v9->m128i_i64 + v15 - 1) = v13;\n              goto LABEL_15;\n            case 3:\n              ++v13;\n              break;\n            case 4:\n            case 7:\n              break;\n            case 5:\n              v16 = 0;\n              v17 = *(_BYTE *)(v14 + v12 - 1) == 5;\n              goto LABEL_17;\n            case 6:\n              if ( v13 > SLODWORD(v9->m128i_i64[0]) )\n                LODWORD(v9->m128i_i64[0]) = v13;\nLABEL_15:\n              v13 = 0;\n              break;\n            case 8:\n              v16 = 0;\n              v17 = *(_BYTE *)(v14 + v12 - 1) == 8;\nLABEL_17:\n              LOBYTE(v16) = v17;\n              v13 += v16;\n              break;\n            case 9:\n              if ( v13 > *((_DWORD *)v9->m128i_i64 + v124) )\n                *((_DWORD *)v9->m128i_i64 + v124) = v13;\n              break;\n            case 10:\n              sub_4325B0(\"yo! you don't support J in Traces2Alignment(), remember?\", *(_BYTE *)(v14 + v12) - 1);\n              return result;\n            default:\n              v18 = (unsigned __int64)sub_408740(*(char *)(v14 + v12));\n              sub_4325B0(\"Traces2Alignment reports unrecognized statetype %c\", v18);\n              return result;\n          }\n          ++v12;\n        }\n        while ( v12 < *v11 );\n      }\n      ++v10;\n    }\n    while ( v10 != v123 );\n  }\n  v19 = v124;\n  if ( v124 >= 0 && a7 )\n  {\n    if ( v122 < 8 )\n    {\n      v20 = 0LL;\nLABEL_47:\n      v27 = (_DWORD *)((char *)v9->m128i_i64 + 4 * v20);\n      v28 = v122 - v20;\n      do\n      {\n        if ( *v27 >= 2 )\n          *v27 = 1;\n        ++v27;\n        --v28;\n      }\n      while ( v28 );\n      goto LABEL_51;\n    }\n    v20 = v122 & 0xFFFFFFF8;\n    v21 = _mm_load_si128((const __m128i *)&xmmword_440150);\n    v22 = v122 & 0xFFFFFFF8;\n    v23 = v9;\n    do\n    {\n      v24 = _mm_loadu_si128(v23 + 1);\n      v25 = _mm_cmpgt_epi32(_mm_loadu_si128(v23), v21);\n      if ( _mm_cvtsi128_si32(v25) & 1 )\n        LODWORD(v23->m128i_i64[0]) = 1;\n      if ( _mm_extract_epi16(v25, 2) & 1 )\n        HIDWORD(v23->m128i_i64[0]) = 1;\n      if ( _mm_extract_epi16(v25, 4) & 1 )\n        LODWORD(v23->m128i_i64[1]) = 1;\n      if ( _mm_extract_epi16(v25, 6) & 1 )\n        HIDWORD(v23->m128i_i64[1]) = 1;\n      v26 = _mm_cmpgt_epi32(v24, v21);\n      if ( _mm_cvtsi128_si32(v26) & 1 )\n        v23[1].m128i_i32[0] = 1;\n      if ( _mm_extract_epi16(v26, 2) & 1 )\n        v23[1].m128i_i32[1] = 1;\n      if ( _mm_extract_epi16(v26, 4) & 1 )\n        v23[1].m128i_i32[2] = 1;\n      if ( _mm_extract_epi16(v26, 6) & 1 )\n        v23[1].m128i_i32[3] = 1;\n      v23 += 2;\n      v22 -= 8LL;\n    }\n    while ( v22 );\n    if ( v20 != v122 )\n      goto LABEL_47;\n  }\nLABEL_51:\n  v29 = (signed int *)sub_4382F0(\"trace.c\", 453LL, v119);\n  *v29 = -1;\n  v30 = LODWORD(ptr->m128i_i64[0]);\n  if ( v124 > 0 )\n  {\n    v31 = v124 & 3;\n    if ( (unsigned __int64)v122 - 2 >= 3 )\n    {\n      v32 = 1LL;\n      do\n      {\n        v29[v32] = v30;\n        v33 = *((_DWORD *)ptr->m128i_i64 + v32) + v30;\n        v29[v32 + 1] = v33 + 1;\n        v34 = *((_DWORD *)ptr->m128i_i64 + v32 + 1);\n        v35 = v34 + v33 + 1;\n        v29[v32 + 2] = v34 + v33 + 2;\n        v36 = *((_DWORD *)&ptr->m128i_i64[1] + v32);\n        v29[v32 + 3] = v36 + v35 + 2;\n        v30 = *((_DWORD *)&ptr->m128i_i64[1] + v32 + 1) + v36 + v35 + 1 + 2;\n        v32 += 4LL;\n      }\n      while ( v122 - v31 != v32 );\n      if ( !(v124 & 3) )\n        goto LABEL_60;\n    }\n    else\n    {\n      v32 = 1LL;\n      if ( !(v124 & 3) )\n        goto LABEL_60;\n    }\n    v37 = (signed __int64)ptr->m128i_i64 + 4 * v32;\n    v38 = (signed __int64)&v29[v32];\n    v39 = 0LL;\n    do\n    {\n      *(_DWORD *)(v38 + 4 * v39) = v30;\n      v30 = (unsigned int)(*(_DWORD *)(v37 + 4 * v39++) + v30 + 1);\n    }\n    while ( v31 != v39 );\n  }\nLABEL_60:\n  v40 = sub_42AF80((unsigned int)v123, (unsigned int)v30);\n  v41 = (_QWORD *)v40;\n  v125 = v29;\n  v127 = v30;\n  if ( v123 <= 0 )\n  {\n    *(_DWORD *)(v40 + 28) = v123;\n    *(_DWORD *)(v40 + 24) = v30;\n    v96 = (_QWORD *)v40;\n    v106 = (char *)sub_4382F0(\"trace.c\", 529LL, 10LL);\n    v96[8] = v106;\n    sprintf(v106, \"HMMER %s\", \"2.3\");\n    goto LABEL_153;\n  }\n  v136 = (signed int)v30;\n  v42 = v30 & 3;\n  v43 = v124 & 3;\n  v132 = (unsigned int)v30 - 1LL;\n  v129 = (unsigned int)v30 - v42;\n  v133 = v30 & 3;\n  v131 = -v42;\n  v135 = v122 - v43;\n  v130 = -v43;\n  v44 = 0LL;\n  v45 = ptr;\n  v120 = v41;\n  do\n  {\n    v47 = v128;\n    if ( (signed int)v30 <= 0 )\n      goto LABEL_73;\n    if ( v132 < 3 )\n    {\n      v48 = 0LL;\n      if ( !v133 )\n        goto LABEL_73;\nLABEL_71:\n      v49 = v131;\n      do\n      {\n        *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v48++) = 46;\n        ++v49;\n      }\n      while ( v49 );\n      goto LABEL_73;\n    }\n    v48 = 0LL;\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v48) = 46;\n      *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v48 + 1) = 46;\n      *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v48 + 2) = 46;\n      *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v48 + 3) = 46;\n      v48 += 4LL;\n    }\n    while ( v129 != v48 );\n    if ( v133 )\n      goto LABEL_71;\nLABEL_73:\n    v50 = *(_QWORD *)(*v41 + 8 * v44);\n    if ( v19 <= 0 )\n    {\n      v51 = v126;\n    }\n    else\n    {\n      v51 = v126;\n      v52 = 1LL;\n      if ( (unsigned __int64)v122 - 2 >= 3 )\n      {\n        do\n        {\n          *(_BYTE *)(v50 + v125[v52]) = 45;\n          *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v125[v52 + 1]) = 45;\n          *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v125[v52 + 2]) = 45;\n          *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v125[v52 + 3]) = 45;\n          v52 += 4LL;\n          v50 = *(_QWORD *)(*v41 + 8 * v44);\n        }\n        while ( v135 != v52 );\n      }\n      if ( v124 & 3 )\n      {\n        v53 = &v125[v52];\n        v54 = v130;\n        do\n        {\n          *(_BYTE *)(v50 + *v53) = 45;\n          v50 = *(_QWORD *)(*v41 + 8 * v44);\n          ++v53;\n          ++v54;\n        }\n        while ( v54 );\n      }\n    }\n    *(_BYTE *)(v50 + v136) = 0;\n    v55 = *(signed int **)(v51 + 8 * v44);\n    if ( *v55 > 0 )\n    {\n      v56 = 0LL;\n      v57 = 0;\n      while ( 1 )\n      {\n        v60 = *(_BYTE *)(*((_QWORD *)v55 + 1) + v56);\n        v61 = *(signed int *)(*((_QWORD *)v55 + 3) + 4 * v56);\n        if ( v60 == 3 )\n          break;\n        v62 = *(signed int *)(*((_QWORD *)v55 + 2) + 4 * v56);\n        if ( v60 == 2 )\n        {\n          v57 = v125[v62];\nLABEL_95:\n          ++v57;\n          goto LABEL_102;\n        }\n        if ( v60 != 1 )\n        {\n          if ( (v60 == 5 || v60 == 8) != 1 || (signed int)v61 <= 0 )\n          {\n            if ( v60 != 7 )\n              goto LABEL_102;\n            v57 = v125[v124];\n          }\n          else\n          {\n            if ( a7 )\n            {\nLABEL_99:\n              *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v57) = 42;\n              goto LABEL_102;\n            }\n            v58 = s[*(char *)(*(_QWORD *)(v47 + 8 * v44) + v61)];\n            if ( (unsigned int)(v58 + 128) <= 0x17F )\n            {\n              v59 = __ctype_tolower_loc();\n              v41 = v120;\n              v47 = v128;\n              v45 = ptr;\n              v58 = (*v59)[v58];\n            }\n            *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v57) = v58;\n          }\n          goto LABEL_95;\n        }\n        v63 = v125[v62];\n        *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v63) = s[*(char *)(*(_QWORD *)(v47 + 8 * v44) + v61)];\n        v57 = v63 + 1;\nLABEL_102:\n        ++v56;\n        v55 = *(signed int **)(v51 + 8 * v44);\n        if ( v56 >= *v55 )\n          goto LABEL_103;\n      }\n      if ( a7 )\n        goto LABEL_99;\n      v64 = s[*(char *)(*(_QWORD *)(v47 + 8 * v44) + v61)];\n      if ( (unsigned int)(v64 + 128) <= 0x17F )\n      {\n        v65 = __ctype_tolower_loc();\n        v41 = v120;\n        v47 = v128;\n        v45 = ptr;\n        v64 = (*v65)[v64];\n      }\n      *(_BYTE *)(*(_QWORD *)(*v41 + 8 * v44) + v57) = v64;\n      goto LABEL_95;\n    }\nLABEL_103:\n    if ( a7 )\n      goto LABEL_134;\n    v66 = *(_QWORD *)(*v41 + 8 * v44);\n    v67 = SLODWORD(v45->m128i_i64[0]);\n    v68 = v67 - 1;\n    if ( v67 <= 0 )\n    {\n      v46 = v124;\n      if ( v68 < 0 )\n        goto LABEL_115;\nLABEL_112:\n      v74 = ~v68;\n      if ( ~v68 <= -2 )\n        v74 = -1;\n      memset(\n        (void *)(v68 - (unsigned __int64)(unsigned int)(v68 + v74 + 1) + v66),\n        46,\n        (unsigned int)(v68 + v74 + 1) + 1LL);\n      v41 = v120;\n      v45 = ptr;\n      goto LABEL_115;\n    }\n    v69 = v67 + 1;\n    v46 = v124;\n    v70 = -9223372036854751231LL;\n    do\n    {\n      v71 = *(_BYTE *)(v66 + v69 - 2);\n      v72 = *(_BYTE *)(v66 + v69 - 2) - 32;\n      if ( (v72 > 0x3Fu || !_bittest64(&v70, v72)) && v71 != 126 )\n      {\n        v73 = v68--;\n        *(_BYTE *)(v66 + v73) = v71;\n      }\n      --v69;\n    }\n    while ( v69 > 1 );\n    if ( v68 >= 0 )\n      goto LABEL_112;\nLABEL_115:\n    if ( v46 >= 2 )\n    {\n      v75 = 1LL;\n      do\n      {\n        v76 = *((signed int *)v45->m128i_i64 + v75);\n        if ( v76 >= 2 )\n        {\n          v77 = v125[v75];\n          v78 = __ctype_b_loc();\n          v41 = v120;\n          v79 = *v78;\n          v80 = *(_QWORD *)(*v120 + 8 * v44);\n          v81 = (char *)(v80 + v77 + 1);\n          v82 = -1;\n          v83 = 0;\n          do\n          {\n            v84 = v83;\n            v85 = *v81++;\n            ++v82;\n            ++v83;\n          }\n          while ( v79[v85] & 0x200 );\n          v86 = v82 >> 1;\n          v87 = v86 + v80 + v77 + 1;\n          v88 = v76 - v86 - 1;\n          if ( (signed int)v76 - (signed int)v86 > 0 )\n          {\n            v89 = v76 + 1 - (v84 >> 1);\n            v90 = (char *)(v76 + v77 + v80);\n            v45 = ptr;\n            v91 = -9223372036854751231LL;\n            do\n            {\n              v92 = *v90;\n              v93 = *v90 - 32;\n              if ( (v93 > 0x3Fu || !_bittest64(&v91, v93)) && v92 != 126 )\n              {\n                v94 = v88--;\n                *(_BYTE *)(v87 + v94) = v92;\n              }\n              --v89;\n              --v90;\n            }\n            while ( v89 > 1 );\n            if ( v88 < 0 )\n              goto LABEL_133;\nLABEL_130:\n            v95 = ~v88;\n            if ( ~v88 <= -2 )\n              v95 = -1;\n            memset(\n              (void *)(v88 - (unsigned __int64)(unsigned int)(v95 + v88 + 1) + v87),\n              46,\n              (unsigned int)(v95 + v88 + 1) + 1LL);\n            v41 = v120;\n            v45 = ptr;\n            goto LABEL_133;\n          }\n          v45 = ptr;\n          if ( v88 >= 0 )\n            goto LABEL_130;\n        }\nLABEL_133:\n        ++v75;\n      }\n      while ( v75 != v124 );\n    }\nLABEL_134:\n    ++v44;\n    v19 = v124;\n    LODWORD(v30) = v127;\n  }\n  while ( v44 != v123 );\n  *((_DWORD *)v41 + 7) = v123;\n  *((_DWORD *)v41 + 6) = v127;\n  v96 = v41;\n  v97 = (char *)sub_4382F0(\"trace.c\", 529LL, 10LL);\n  v96[8] = v97;\n  sprintf(v97, \"HMMER %s\", \"2.3\");\n  if ( v123 > 0 )\n  {\n    v98 = 8LL * v123;\n    v99 = v137 + 196;\n    v100 = 0LL;\n    v101 = 0LL;\n    do\n    {\n      *(_QWORD *)(v96[1] + 8 * v101) = sub_438810((char *)(v99 - 192));\n      v102 = *(_DWORD *)(v99 - 196);\n      if ( v102 & 4 )\n      {\n        sub_42B750(v96, (unsigned int)v101, v99 - 64);\n        v96 = v120;\n        v102 = *(_DWORD *)(v99 - 196);\n        if ( !(v102 & 8) )\n        {\nLABEL_139:\n          if ( v102 & 0x200 )\n            goto LABEL_144;\n          goto LABEL_140;\n        }\n      }\n      else if ( !(v102 & 8) )\n      {\n        goto LABEL_139;\n      }\n      sub_42B7E0(v96, (unsigned int)v101, v99);\n      v96 = v120;\n      v102 = *(_DWORD *)(v99 - 196);\n      if ( v102 & 0x200 )\n      {\nLABEL_144:\n        v103 = v96[14];\n        if ( !v103 )\n        {\n          v96 = v120;\n          v103 = sub_4382F0(\"trace.c\", 541LL, v98);\n          v120[14] = v103;\n        }\n        sub_424D70(*(_QWORD *)(*v96 + 8 * v101), v127, *(_QWORD *)(v99 + 148), v100 + v103);\n        v96 = v120;\n        v104 = *(_DWORD *)(v99 - 196);\n        if ( !(v104 & 0x400) )\n          goto LABEL_150;\nLABEL_147:\n        v105 = v96[15];\n        if ( !v105 )\n        {\n          v96 = v120;\n          v105 = sub_4382F0(\"trace.c\", 546LL, v98);\n          v120[15] = v105;\n        }\n        sub_424D70(*(_QWORD *)(*v96 + 8 * v101), v127, *(_QWORD *)(v99 + 156), v100 + v105);\n        v96 = v120;\n        goto LABEL_150;\n      }\nLABEL_140:\n      if ( v102 & 0x400 )\n        goto LABEL_147;\nLABEL_150:\n      *(_DWORD *)(v96[2] + 4 * v101) = *(_DWORD *)(v134 + 4 * v101);\n      ++v101;\n      v100 += 8LL;\n      v99 += 360LL;\n    }\n    while ( v123 != v101 );\n  }\nLABEL_153:\n  v107 = sub_4382F0(\"trace.c\", 555LL, (signed int)v127 + 1);\n  v96[11] = v107;\n  if ( (signed int)v127 <= 0 )\n  {\n    v109 = ptr;\n    v111 = v125;\n    v112 = v122;\n    if ( v19 > 0 )\n      goto LABEL_164;\n  }\n  else\n  {\n    v108 = v127 & 3;\n    v109 = ptr;\n    if ( (unsigned __int64)(unsigned int)v127 - 1 >= 3 )\n    {\n      v110 = 0LL;\n      v111 = v125;\n      do\n      {\n        *(_BYTE *)(v107 + v110) = 46;\n        *(_BYTE *)(v96[11] + v110 + 1) = 46;\n        *(_BYTE *)(v96[11] + v110 + 2) = 46;\n        *(_BYTE *)(v96[11] + v110 + 3) = 46;\n        v110 += 4LL;\n        v107 = v96[11];\n      }\n      while ( (unsigned int)v127 - v108 != v110 );\n    }\n    else\n    {\n      v110 = 0LL;\n      v111 = v125;\n    }\n    v112 = v122;\n    if ( v127 & 3 )\n    {\n      v113 = -v108;\n      do\n      {\n        *(_BYTE *)(v107 + v110++) = 46;\n        v107 = v96[11];\n        ++v113;\n      }\n      while ( v113 );\n    }\n    if ( v19 > 0 )\n    {\nLABEL_164:\n      v114 = v19 & 3;\n      if ( (unsigned __int64)v112 - 2 >= 3 )\n      {\n        v115 = 1LL;\n        do\n        {\n          *(_BYTE *)(v107 + v111[v115]) = 120;\n          *(_BYTE *)(v96[11] + v111[v115 + 1]) = 120;\n          *(_BYTE *)(v96[11] + v111[v115 + 2]) = 120;\n          *(_BYTE *)(v96[11] + v111[v115 + 3]) = 120;\n          v115 += 4LL;\n          v107 = v96[11];\n        }\n        while ( v112 - v114 != v115 );\n        if ( (_DWORD)v114 )\n          goto LABEL_170;\n      }\n      else\n      {\n        v115 = 1LL;\n        if ( !(_DWORD)v114 )\n          goto LABEL_172;\nLABEL_170:\n        v116 = &v111[v115];\n        v117 = -v114;\n        do\n        {\n          *(_BYTE *)(v107 + *v116) = 120;\n          v107 = v96[11];\n          ++v116;\n          ++v117;\n        }\n        while ( v117 );\n      }\n    }\n  }\nLABEL_172:\n  *(_BYTE *)(v107 + (signed int)v127) = 0;\n  free(v109);\n  free(v111);\n  return v96;\n}\n", 
            "funcStartAddr": "0x420ca0L", 
            "funcEndAddr": "0x42197eL", 
            "funcName": "sub_420CA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_421980(_QWORD *a1, __int64 a2, __int64 a3, char *a4)\n{\n  char *v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // rax\n  __int64 v7; // r12\n  int v8; // eax\n  void *v9; // rax\n  void *v10; // rax\n  __int64 v11; // rcx\n  __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // r13\n  int v15; // esi\n  signed __int64 v16; // rbp\n  signed __int64 v17; // rdx\n  int v18; // esi\n  __int64 v19; // rbx\n  char v20; // al\n  __int64 v21; // rax\n  __int32_t v22; // er15\n  int v23; // eax\n  int v24; // er13\n  __int64 v25; // rax\n  __int64 v26; // rax\n  bool v27; // cf\n  bool v28; // zf\n  int v29; // eax\n  int v30; // eax\n  int v31; // eax\n  __int64 v32; // rax\n  __int64 result; // rax\n  float v34; // [rsp+4h] [rbp-44h]\n  __int64 v35; // [rsp+8h] [rbp-40h]\n  __int64 v36; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  v35 = a3;\n  v5 = a2;\n  v6 = sub_41F980();\n  v7 = v6;\n  *(_OWORD *)v6 = 0LL;\n  *(_QWORD *)(v6 + 16) = sub_4382F0(\"trace.c\", 680LL, *(signed int *)a1 + 1LL);\n  *(_QWORD *)(v7 + 24) = sub_4382F0(\"trace.c\", 681LL, *(signed int *)a1 + 1LL);\n  *(_QWORD *)(v7 + 32) = sub_4382F0(\"trace.c\", 682LL, *(signed int *)a1 + 1LL);\n  memset(*(void **)(v7 + 16), 32, *(signed int *)a1);\n  memset(*(void **)(v7 + 24), 32, *(signed int *)a1);\n  memset(*(void **)(v7 + 32), 32, *(signed int *)a1);\n  v8 = *(_DWORD *)(a2 + 456);\n  if ( v8 & 4 )\n  {\n    v9 = (void *)sub_4382F0(\"trace.c\", 690LL, *(signed int *)a1 + 1LL);\n    *(_QWORD *)v7 = v9;\n    memset(v9, 32, *(signed int *)a1);\n    v8 = *(_DWORD *)(a2 + 456);\n  }\n  if ( v8 & 8 )\n  {\n    v10 = (void *)sub_4382F0(\"trace.c\", 695LL, *(signed int *)a1 + 1LL);\n    *(_QWORD *)(v7 + 8) = v10;\n    memset(v10, 32, *(signed int *)a1);\n  }\n  *(_QWORD *)(v7 + 48) = sub_4381A0(*(char **)a2);\n  *(_QWORD *)(v7 + 56) = sub_4381A0(v4);\n  v11 = 0LL;\n  v12 = *(signed int *)a1;\n  if ( v12 <= 0 )\n  {\n    LODWORD(v16) = 0;\n  }\n  else\n  {\n    LOBYTE(v11) = dword_464004 == 3;\n    v34 = dword_4451B0[v11];\n    v13 = 0LL;\n    v14 = v35;\n    while ( 1 )\n    {\n      v15 = *(_DWORD *)(a1[3] + 4 * v13);\n      if ( v15 > 0 )\n        break;\n      if ( ++v13 >= v12 )\n        goto LABEL_12;\n    }\n    *(_DWORD *)(v7 + 64) = v15;\nLABEL_12:\n    LODWORD(v16) = 0;\n    if ( (signed int)v12 > 0 )\n    {\n      v17 = v12 + 1;\n      while ( 1 )\n      {\n        v18 = *(_DWORD *)(a1[3] + 4 * v17 - 8);\n        if ( v18 > 0 )\n          break;\n        if ( --v17 < 2 )\n        {\n          if ( (signed int)v12 <= 0 )\n            goto LABEL_53;\n          goto LABEL_19;\n        }\n      }\n      *(_DWORD *)(v7 + 68) = v18;\n      if ( (signed int)v12 <= 0 )\n        goto LABEL_53;\nLABEL_19:\n      v16 = 0LL;\n      v36 = v5;\n      do\n      {\n        switch ( *(char *)(a1[1] + v16) )\n        {\n          case 1:\n            v23 = *(_DWORD *)(v5 + 456);\n            if ( v23 & 4 )\n            {\n              *(_BYTE *)(*(_QWORD *)v7 + v16) = *(_BYTE *)(*(_QWORD *)(v5 + 24) + *(signed int *)(a1[2] + 4 * v16));\n              v23 = *(_DWORD *)(v5 + 456);\n            }\n            if ( v23 & 8 )\n              *(_BYTE *)(*(_QWORD *)(v7 + 8) + v16) = *(_BYTE *)(*(_QWORD *)(v5 + 32) + *(signed int *)(a1[2] + 4 * v16));\n            LOBYTE(v18) = dword_464000;\n            v24 = sub_43D790(*(_QWORD *)(*(_QWORD *)(v5 + 152) + 8LL * *(signed int *)(a1[2] + 4 * v16)));\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = s[v24];\n            if ( v34 > *(float *)(*(_QWORD *)(*(_QWORD *)(v5 + 152) + 8LL * *(signed int *)(a1[2] + 4 * v16)) + 4LL * v24) )\n              *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = (*__ctype_tolower_loc())[*(char *)(*(_QWORD *)(v7 + 16) + v16)];\n            v25 = *(char *)(v35 + *(signed int *)(a1[3] + 4 * v16));\n            if ( v24 == (_DWORD)v25 )\n            {\n              *(_BYTE *)(*(_QWORD *)(v7 + 24) + v16) = s[v25];\n              v26 = *(_QWORD *)(*(_QWORD *)(v36 + 152) + 8LL * *(signed int *)(a1[2] + 4 * v16));\n              v27 = v34 < *(float *)(v26 + 4LL * v24);\n              v28 = v34 == *(float *)(v26 + 4LL * v24);\n              v5 = v36;\n              v14 = v35;\n              if ( !v27 && !v28 )\n                *(_BYTE *)(*(_QWORD *)(v7 + 24) + v16) = (*__ctype_tolower_loc())[*(char *)(*(_QWORD *)(v7 + 24) + v16)];\n            }\n            else\n            {\n              v5 = v36;\n              v14 = v35;\n              if ( *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 320) + 8 * v25) + 4LL * *(signed int *)(a1[2] + 4 * v16)) > 0 )\n                *(_BYTE *)(*(_QWORD *)(v7 + 24) + v16) = 43;\n            }\n            v20 = s[*(char *)(v14 + *(signed int *)(a1[3] + 4 * v16))];\n            goto LABEL_51;\n          case 2:\n            v29 = *(_DWORD *)(v5 + 456);\n            if ( v29 & 4 )\n            {\n              *(_BYTE *)(*(_QWORD *)v7 + v16) = *(_BYTE *)(*(_QWORD *)(v5 + 24) + *(signed int *)(a1[2] + 4 * v16));\n              v29 = *(_DWORD *)(v5 + 456);\n            }\n            if ( v29 & 8 )\n              *(_BYTE *)(*(_QWORD *)(v7 + 8) + v16) = *(_BYTE *)(*(_QWORD *)(v5 + 32) + *(signed int *)(a1[2] + 4 * v16));\n            LOBYTE(v18) = dword_464000;\n            v30 = sub_43D790(*(_QWORD *)(*(_QWORD *)(v5 + 152) + 8LL * *(signed int *)(a1[2] + 4 * v16)));\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = s[v30];\n            if ( v34 > *(float *)(*(_QWORD *)(*(_QWORD *)(v5 + 152) + 8LL * *(signed int *)(a1[2] + 4 * v16)) + 4LL * v30) )\n              *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = (*__ctype_tolower_loc())[*(char *)(*(_QWORD *)(v7 + 16) + v16)];\n            *(_BYTE *)(*(_QWORD *)(v7 + 32) + v16) = 45;\n            break;\n          case 3:\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = 46;\n            v21 = *(char *)(v14 + *(signed int *)(a1[3] + 4 * v16));\n            if ( *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 328) + 8 * v21) + 4LL * *(signed int *)(a1[2] + 4 * v16)) > 0 )\n            {\n              *(_BYTE *)(*(_QWORD *)(v7 + 24) + v16) = 43;\n              v21 = *(char *)(v14 + *(signed int *)(a1[3] + 4 * v16));\n            }\n            v22 = s[v21];\n            if ( (unsigned int)(v22 + 128) <= 0x17F )\n              v22 = (*__ctype_tolower_loc())[v22];\n            *(_BYTE *)(*(_QWORD *)(v7 + 32) + v16) = v22;\n            v5 = v36;\n            break;\n          case 4:\n          case 9:\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = 42;\n            break;\n          case 5:\n          case 8:\n          case 10:\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = 45;\n            v19 = *(signed int *)(a1[3] + 4 * v16);\n            if ( v19 > 0 )\n            {\n              v20 = (*__ctype_tolower_loc())[s[*(char *)(v14 + v19)]];\nLABEL_51:\n              *(_BYTE *)(*(_QWORD *)(v7 + 32) + v16) = v20;\n            }\n            break;\n          case 6:\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = 62;\n            break;\n          case 7:\n            *(_BYTE *)(*(_QWORD *)(v7 + 16) + v16) = 60;\n            break;\n          default:\n            sub_4325B0(\"bogus statetype\", v18);\n            return result;\n        }\n        ++v16;\n      }\n      while ( v16 < *(signed int *)a1 );\n    }\n  }\nLABEL_53:\n  *(_DWORD *)(v7 + 40) = v16;\n  v31 = *(_DWORD *)(v5 + 456);\n  if ( v31 & 4 )\n  {\n    *(_BYTE *)(*(_QWORD *)v7 + (unsigned int)v16) = 0;\n    v31 = *(_DWORD *)(v5 + 456);\n  }\n  if ( v31 & 8 )\n  {\n    v32 = (unsigned int)v16;\n    *(_BYTE *)(*(_QWORD *)(v7 + 8) + (unsigned int)v16) = 0;\n  }\n  else\n  {\n    v32 = (unsigned int)v16;\n  }\n  *(_BYTE *)(*(_QWORD *)(v7 + 16) + v32) = 0;\n  *(_BYTE *)(*(_QWORD *)(v7 + 24) + v32) = 0;\n  *(_BYTE *)(*(_QWORD *)(v7 + 32) + v32) = 0;\n  return v7;\n}\n", 
            "funcStartAddr": "0x421980L", 
            "funcEndAddr": "0x421efaL", 
            "funcName": "sub_421980"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_421F00(FILE *stream, __int64 a2)\n{\n  __int64 v2; // r14\n  FILE *v3; // rbx\n  int v4; // ebp\n  signed __int64 v5; // rsi\n  signed __int64 v6; // rdi\n  unsigned __int64 v7; // r15\n  FILE *v8; // r8\n  unsigned __int64 v9; // r13\n  __int64 v10; // rax\n  char v11; // bl\n  unsigned __int64 v12; // rcx\n  __int64 v13; // rsi\n  FILE *v14; // rbp\n  __int64 v15; // rsi\n  __int64 v16; // rsi\n  __int64 v17; // rsi\n  __int64 v18; // rdx\n  __int64 v20; // [rsp+0h] [rbp-78h]\n  signed __int64 v21; // [rsp+8h] [rbp-70h]\n  char dest; // [rsp+10h] [rbp-68h]\n  char v23; // [rsp+42h] [rbp-36h]\n\n  v23 = 0;\n  v2 = a2;\n  v3 = stream;\n  if ( *(_DWORD *)(a2 + 40) > 0 )\n  {\n    v4 = *(_DWORD *)(a2 + 64) - 1;\n    v5 = 1LL;\n    v6 = -9223372036854751231LL;\n    v7 = 0LL;\n    do\n    {\n      v8 = v3;\n      LODWORD(v20) = v4;\n      v9 = v7;\n      v10 = *(_QWORD *)(v2 + 32);\n      v11 = *(_BYTE *)(v10 + v7);\n      v7 += 50LL;\n      if ( v11 )\n      {\n        v12 = v5;\n        do\n        {\n          if ( ((unsigned __int8)(v11 - 32) > 0x3Fu || !_bittest64(&v6, (unsigned __int8)(v11 - 32))) && v11 != 126 )\n            ++v4;\n          if ( v12 >= v7 )\n            break;\n          v11 = *(_BYTE *)(v10 + v12++);\n        }\n        while ( v11 );\n      }\n      HIDWORD(v20) = v4;\n      v21 = v5;\n      v13 = *(_QWORD *)(v2 + 8);\n      v14 = v8;\n      if ( v13 )\n      {\n        strncpy(&dest, (const char *)(v9 + v13), 0x32uLL);\n        fprintf(v14, \"  %16s %s\\n\", \"CS\", &dest, v20);\n      }\n      if ( *(_QWORD *)v2 )\n      {\n        strncpy(&dest, (const char *)(v9 + *(_QWORD *)v2), 0x32uLL);\n        fprintf(v14, \"  %16s %s\\n\", \"RF\", &dest, v20);\n      }\n      v15 = *(_QWORD *)(v2 + 16);\n      if ( v15 )\n      {\n        strncpy(&dest, (const char *)(v9 + v15), 0x32uLL);\n        fprintf(v14, \"  %16s %s\\n\", \" \", &dest, v20);\n      }\n      v16 = *(_QWORD *)(v2 + 24);\n      if ( v16 )\n      {\n        strncpy(&dest, (const char *)(v9 + v16), 0x32uLL);\n        fprintf(v14, \"  %16s %s\\n\", \" \", &dest, v20);\n      }\n      v17 = *(_QWORD *)(v2 + 32);\n      v3 = v14;\n      if ( v17 )\n      {\n        strncpy(&dest, (const char *)(v9 + v17), 0x32uLL);\n        v18 = *(_QWORD *)(v2 + 56);\n        if ( SHIDWORD(v20) <= (signed int)v20 )\n          fprintf(v14, \"  %10.10s %5s %s %-5s\\n\\n\", v18, \"-\", &dest, \"-\", v20);\n        else\n          fprintf(v14, \"  %10.10s %5d %s %-5d\\n\\n\", v18, (unsigned int)(v20 + 1), &dest, v20);\n      }\n      v5 = v21 + 50;\n      v6 = -9223372036854751231LL;\n      v4 = HIDWORD(v20);\n    }\n    while ( *(_DWORD *)(v2 + 40) > (signed int)v7 );\n  }\n  return fflush(v3);\n}\n", 
            "funcStartAddr": "0x421f00L", 
            "funcEndAddr": "0x422115L", 
            "funcName": "sub_421F00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_422120(signed int *a1, __int64 *a2, unsigned int *a3)\n{\n  signed int *v3; // rbp\n  signed __int64 v4; // r10\n  __int64 v5; // rcx\n  signed __int64 v6; // rax\n  unsigned int v7; // ebx\n  unsigned __int64 v8; // r9\n  signed __int64 v9; // rbx\n  __int64 v10; // rdi\n  __m128i v11; // xmm3\n  __m128i v12; // xmm0\n  __m128i v13; // xmm1\n  __m128i v14; // xmm4\n  __m128i v15; // xmm0\n  __m128i v16; // xmm1\n  __int64 v17; // r12\n  __int64 v18; // rax\n  __int64 v19; // r15\n  signed int v20; // esi\n  __int64 v21; // rcx\n  __int64 v22; // r14\n  __int64 v23; // r13\n  int v24; // er13\n  __int64 v25; // rbx\n  signed __int64 v26; // ST08_8\n  __int64 v27; // rax\n  _QWORD *v28; // rcx\n  __int64 v29; // rsi\n  signed __int64 v30; // rdx\n  signed __int64 i; // rax\n  __int64 v32; // rdx\n  _QWORD *v33; // rcx\n  __int64 v34; // rdx\n  unsigned int v35; // [rsp+14h] [rbp-54h]\n  __int64 *v36; // [rsp+18h] [rbp-50h]\n  unsigned int *v37; // [rsp+20h] [rbp-48h]\n  signed int v38; // [rsp+30h] [rbp-38h]\n\n  v3 = a1;\n  v4 = *a1;\n  if ( v4 <= 0 )\n    goto LABEL_25;\n  v5 = *((_QWORD *)a1 + 1);\n  if ( (unsigned int)v4 >= 8 )\n  {\n    v6 = v4 & 0xFFFFFFFFFFFFFFF8LL;\n    v8 = ((v4 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n    if ( (v4 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n    {\n      v12 = 0LL;\n      v10 = 0LL;\n      v13 = 0LL;\n      if ( ((_BYTE)v8 + 1) & 1 )\n      {\nLABEL_8:\n        v14 = _mm_load_si128((const __m128i *)&xmmword_440300);\n        v13 = _mm_sub_epi32(\n                v13,\n                _mm_cmpeq_epi32(\n                  _mm_unpacklo_epi16(\n                    _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10 + 4)), (__m128i)0LL),\n                    (__m128i)0LL),\n                  v14));\n        v12 = _mm_sub_epi32(\n                v12,\n                _mm_cmpeq_epi32(\n                  _mm_unpacklo_epi16(\n                    _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10)), (__m128i)0LL),\n                    (__m128i)0LL),\n                  v14));\n        goto LABEL_9;\n      }\n    }\n    else\n    {\n      v9 = (((_BYTE)v8 + 1) & 1) - 1LL - v8;\n      v10 = 0LL;\n      v11 = _mm_load_si128((const __m128i *)&xmmword_440300);\n      v12 = 0LL;\n      v13 = 0LL;\n      do\n      {\n        v12 = _mm_sub_epi32(\n                _mm_sub_epi32(\n                  v12,\n                  _mm_cmpeq_epi32(\n                    _mm_unpacklo_epi16(\n                      _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10)), (__m128i)0LL),\n                      (__m128i)0LL),\n                    v11)),\n                _mm_cmpeq_epi32(\n                  _mm_unpacklo_epi16(\n                    _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10 + 8)), (__m128i)0LL),\n                    (__m128i)0LL),\n                  v11));\n        v13 = _mm_sub_epi32(\n                _mm_sub_epi32(\n                  v13,\n                  _mm_cmpeq_epi32(\n                    _mm_unpacklo_epi16(\n                      _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10 + 4)), (__m128i)0LL),\n                      (__m128i)0LL),\n                    v11)),\n                _mm_cmpeq_epi32(\n                  _mm_unpacklo_epi16(\n                    _mm_unpacklo_epi8(_mm_cvtsi32_si128(*(_DWORD *)(v5 + v10 + 12)), (__m128i)0LL),\n                    (__m128i)0LL),\n                  v11));\n        v10 += 16LL;\n        v9 += 2LL;\n      }\n      while ( v9 );\n      if ( ((_BYTE)v8 + 1) & 1 )\n        goto LABEL_8;\n    }\nLABEL_9:\n    v15 = _mm_add_epi32(v12, v13);\n    v16 = _mm_add_epi32(_mm_shuffle_epi32(v15, 78), v15);\n    v7 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v16, 229), v16));\n    if ( v6 == v4 )\n      goto LABEL_11;\n    goto LABEL_10;\n  }\n  v6 = 0LL;\n  v7 = 0;\n  do\nLABEL_10:\n    v7 += *(_BYTE *)(v5 + v6++) == 6;\n  while ( v6 < v4 );\nLABEL_11:\n  if ( !v7 )\n  {\nLABEL_25:\n    *a3 = 0;\n    *a2 = 0LL;\n    return;\n  }\n  v36 = a2;\n  v37 = a3;\n  v35 = v7;\n  v17 = sub_4382F0(\"trace.c\", 893LL, 8LL * v7);\n  LODWORD(v18) = *v3;\n  if ( *v3 > 0 )\n  {\n    LODWORD(v19) = 0;\n    v20 = 0;\n    do\n    {\n      v21 = *((_QWORD *)v3 + 1);\n      v22 = v20;\n      if ( *(_BYTE *)(v21 + v20) == 6 )\n      {\n        LODWORD(v23) = v20 + 1;\n        if ( v20 + 1 < (signed int)v18 )\n        {\n          v23 = (signed int)v23;\n          v18 = (signed int)v18;\n          do\n          {\n            if ( *(_BYTE *)(v21 + v23) == 7 )\n              break;\n            ++v23;\n          }\n          while ( v23 < v18 );\n        }\n        v38 = v20;\n        v24 = v23 - v20;\n        v19 = (signed int)v19;\n        v25 = sub_4382F0(\"trace.c\", 40LL, 32LL);\n        *(_QWORD *)(v25 + 8) = sub_4382F0(\"trace.c\", 41LL, v24 + 5LL);\n        v26 = 4LL * v24 + 20;\n        *(_QWORD *)(v25 + 16) = sub_4382F0(\"trace.c\", 42LL, v26);\n        *(_QWORD *)(v25 + 24) = sub_4382F0(\"trace.c\", 43LL, v26);\n        *(_QWORD *)(v17 + 8 * v19) = v25;\n        *(_DWORD *)v25 = v24 + 5;\n        **(_BYTE **)(v25 + 8) = 4;\n        v27 = *(_QWORD *)(v17 + 8LL * (signed int)v19);\n        **(_DWORD **)(v27 + 16) = 0;\n        **(_DWORD **)(v27 + 24) = 0;\n        *(_BYTE *)(*(_QWORD *)(v27 + 8) + 1LL) = 5;\n        v28 = *(_QWORD **)(v17 + 8LL * (signed int)v19);\n        *(_DWORD *)(v28[2] + 4LL) = 0;\n        *(_DWORD *)(v28[3] + 4LL) = 0;\n        v29 = *((_QWORD *)v3 + 1);\n        v30 = 4 * v22;\n        for ( i = 4LL; ; ++i )\n        {\n          *(_BYTE *)(v28[1] + i - 2) = *(_BYTE *)(i + v22 + v29 - 4);\n          v28 = *(_QWORD **)(v17 + 8 * v19);\n          *(_DWORD *)(v28[2] + 4 * i - 8) = *(_DWORD *)(v30 + *((_QWORD *)v3 + 2) + 4 * i - 16);\n          *(_DWORD *)(v28[3] + 4 * i - 8) = *(_DWORD *)(v30 + *((_QWORD *)v3 + 3) + 4 * i - 16);\n          v29 = *((_QWORD *)v3 + 1);\n          if ( *(_BYTE *)(i + v29 + v22 - 4) == 7 )\n            break;\n        }\n        v32 = (unsigned int)(i - 1);\n        *(_BYTE *)(v28[1] + v32) = 8;\n        v33 = *(_QWORD **)(v17 + 8 * v19);\n        *(_DWORD *)(v33[2] + 4 * v32) = 0;\n        *(_DWORD *)(v33[3] + 4 * v32) = 0;\n        v34 = (unsigned int)i;\n        *(_BYTE *)(v33[1] + v34) = 9;\n        v20 = v38 + i - 4;\n        v18 = *(_QWORD *)(v17 + 8 * v19);\n        *(_DWORD *)(*(_QWORD *)(v18 + 16) + 4 * v34) = 0;\n        *(_DWORD *)(*(_QWORD *)(v18 + 24) + 4 * v34) = 0;\n        LODWORD(v19) = v19 + 1;\n        LODWORD(v18) = *v3;\n      }\n      ++v20;\n    }\n    while ( v20 < (signed int)v18 );\n  }\n  *v36 = v17;\n  *v37 = v35;\n}\n", 
            "funcStartAddr": "0x422120L", 
            "funcEndAddr": "0x4224daL", 
            "funcName": "sub_422120"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_422630(signed int *a1, _DWORD *a2, _DWORD *a3, signed int *a4, signed int *a5)\n{\n  _QWORD *v5; // r12\n  __int64 v6; // rdi\n  signed int v7; // ebp\n  __int64 v8; // rdx\n  char v9; // bl\n  signed int *v10; // r13\n  int v11; // er14\n  signed __int64 v12; // rcx\n  signed int v13; // er15\n  signed int v14; // eax\n  char v15; // dl\n  int v16; // ebx\n  _DWORD *result; // rax\n  _DWORD *v18; // [rsp+0h] [rbp-48h]\n  _DWORD *v19; // [rsp+10h] [rbp-38h]\n\n  v5 = a1;\n  v6 = *a1;\n  v19 = a3;\n  v18 = a2;\n  if ( v6 <= 0 )\n    goto LABEL_24;\n  a2 = (_DWORD *)v5[1];\n  v7 = -1;\n  v8 = 0LL;\n  while ( 1 )\n  {\n    v9 = *((_BYTE *)a2 + v8);\n    if ( v7 != -1 )\n    {\n      if ( v9 == 1 )\n        break;\n      goto LABEL_5;\n    }\n    v7 = -1;\n    if ( (unsigned __int8)(v9 - 1) <= 1u )\n    {\n      v7 = *(_DWORD *)(v5[2] + 4 * v8);\n      if ( v9 == 1 )\n        break;\n    }\nLABEL_5:\n    if ( ++v8 >= v6 )\n      goto LABEL_24;\n  }\n  v10 = a4;\n  v11 = *(_DWORD *)(v5[3] + 4 * v8);\n  if ( v7 == -1 || (_DWORD)v6 == (_DWORD)v8 || v11 == -1 )\nLABEL_24:\n    sub_4325B0(\"sanity check failed: didn't find a match state in trace\", (char)a2);\n  if ( (signed int)v6 <= 0 )\n    goto LABEL_25;\n  a2 = (_DWORD *)v5[1];\n  v12 = (signed int)v6 + 1LL;\n  v13 = -1;\n  v14 = 1;\n  while ( 2 )\n  {\n    v15 = *((_BYTE *)a2 + v12 - 2);\n    if ( v13 != -1 )\n    {\n      if ( v15 == 1 )\n        goto LABEL_20;\nLABEL_16:\n      --v12;\n      ++v14;\n      if ( v12 < 2 )\n        goto LABEL_25;\n      continue;\n    }\n    break;\n  }\n  v13 = -1;\n  if ( (unsigned __int8)(v15 - 1) > 1u )\n    goto LABEL_16;\n  v13 = *(_DWORD *)(v5[2] + 4 * v12 - 8);\n  if ( v15 != 1 )\n    goto LABEL_16;\nLABEL_20:\n  v16 = *(_DWORD *)(v5[3] + 4 * v12 - 8);\n  if ( v13 == -1 || !v14 || v16 == -1 )\nLABEL_25:\n    sub_4325B0(\"sanity check failed: didn't find a match state in trace\", (char)a2);\n  *v10 = v7;\n  *v18 = v11;\n  *a5 = v13;\n  result = v19;\n  *v19 = v16;\n  return result;\n}\n", 
            "funcStartAddr": "0x422630L", 
            "funcEndAddr": "0x4227c5L", 
            "funcName": "sub_422630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4227D0(__int64 a1, signed int a2, signed int a3)\n{\n  signed int v3; // er14\n  signed int v4; // er15\n  __int64 v5; // rbp\n  __int64 v6; // r13\n  signed __int64 v7; // r12\n  __int64 v8; // rbx\n  _BYTE *v9; // rsi\n  __int64 v10; // rcx\n  signed __int64 v11; // rdx\n  int v12; // eax\n  __int64 v13; // rdi\n  signed int v14; // eax\n  __int64 v15; // rsi\n  signed int *v16; // rdx\n  signed __int64 v17; // rdi\n  signed __int64 v18; // r9\n  __int64 v19; // r8\n  signed __int64 v20; // r8\n  _BYTE *v21; // rdx\n  __int64 v22; // rdi\n  signed __int64 v23; // rcx\n  int v24; // ecx\n  signed __int64 v25; // r8\n  signed __int64 v26; // rdi\n  int v27; // er14\n  signed int v28; // ebp\n  __int64 v29; // rax\n  signed __int64 v30; // rsi\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = a3;\n  v7 = a3 + 6LL;\n  v8 = sub_4382F0(\"trace.c\", 40LL, 32LL);\n  *(_QWORD *)(v8 + 8) = sub_4382F0(\"trace.c\", 41LL, v7);\n  *(_QWORD *)(v8 + 16) = sub_4382F0(\"trace.c\", 42LL, 4 * v6 + 24);\n  *(_QWORD *)(v8 + 24) = sub_4382F0(\"trace.c\", 43LL, 4 * v6 + 24);\n  **(_BYTE **)(v8 + 8) = 4;\n  **(_DWORD **)(v8 + 16) = 0;\n  **(_DWORD **)(v8 + 24) = 0;\n  *(_BYTE *)(*(_QWORD *)(v8 + 8) + 1LL) = 5;\n  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4LL) = 0;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4LL) = 0;\n  v9 = (_BYTE *)(*(_QWORD *)(v8 + 8) + 2LL);\n  if ( *(_DWORD *)(a1 + 4) < 2 )\n  {\n    v14 = 1;\n    LODWORD(v10) = 3;\n    v11 = 2LL;\n  }\n  else\n  {\n    LODWORD(v10) = 3;\n    v11 = 2LL;\n    do\n    {\n      v12 = v10;\n      *v9 = 5;\n      *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v11) = 0;\n      *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v11) = v10 - 2;\n      v13 = *(_QWORD *)(v8 + 8);\n      LODWORD(v10) = v10 + 1;\n      v9 = (_BYTE *)(v13 + v11++ + 1);\n    }\n    while ( v12 - 1 < *(_DWORD *)(v5 + 4) );\n    v14 = v10 - 2;\n    v9 = (_BYTE *)(v11 + v13);\n  }\n  *v9 = 6;\n  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v11) = 0;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v11) = 0;\n  v15 = (signed int)v10;\n  *(_BYTE *)(*(_QWORD *)(v8 + 8) + (signed int)v10) = 1;\n  v16 = (signed int *)(*(_QWORD *)(v8 + 16) + 4LL * (signed int)v10);\n  if ( v4 >= 2 )\n  {\n    v17 = 1LL;\n    do\n    {\n      *v16 = v17;\n      *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v15) = v14++;\n      LODWORD(v10) = v10 + 1;\n      v18 = v17 + 1;\n      if ( v14 < *(_DWORD *)(v5 + 4 * v17 + 4) )\n      {\n        v10 = (signed int)v10;\n        do\n        {\n          *(_BYTE *)(*(_QWORD *)(v8 + 8) + v10) = 3;\n          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v10) = v17;\n          *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v10++) = v14++;\n        }\n        while ( v14 < *(_DWORD *)(v5 + 4 * v17 + 4) );\n      }\n      v15 = (signed int)v10;\n      *(_BYTE *)(*(_QWORD *)(v8 + 8) + (signed int)v10) = 1;\n      v16 = (signed int *)(*(_QWORD *)(v8 + 16) + 4LL * (signed int)v10);\n      ++v17;\n    }\n    while ( v18 != v4 );\n  }\n  *v16 = v4;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v15) = v14;\n  v19 = (signed int)v10;\n  *(_BYTE *)(*(_QWORD *)(v8 + 8) + v19 + 1) = 7;\n  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v19 + 4) = 0;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v19 + 4) = 0;\n  *(_BYTE *)(*(_QWORD *)(v8 + 8) + v19 + 2) = 8;\n  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v19 + 8) = 0;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v19 + 8) = 0;\n  v20 = (signed int)v10 + 3LL;\n  v21 = (_BYTE *)(v20 + *(_QWORD *)(v8 + 8));\n  if ( v14 >= v3 )\n  {\n    v24 = v10 + 3;\n  }\n  else\n  {\n    v22 = (unsigned int)(v3 - 1 - v14);\n    if ( ((_BYTE)v3 - (_BYTE)v14) & 1 )\n    {\n      ++v14;\n      *v21 = 8;\n      *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v20) = 0;\n      *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v20) = v14;\n      v23 = (signed int)v10 + 4LL;\n      v21 = (_BYTE *)(v20 + 1 + *(_QWORD *)(v8 + 8));\n    }\n    else\n    {\n      v23 = (signed int)v10 + 3LL;\n    }\n    v25 = v22 + v20;\n    if ( (_DWORD)v22 )\n    {\n      v26 = 4 * v23;\n      v27 = v3 - v14;\n      v28 = v14;\n      v29 = 0LL;\n      do\n      {\n        *v21 = 8;\n        *(_DWORD *)(v26 + *(_QWORD *)(v8 + 16) + 4 * v29) = 0;\n        *(_DWORD *)(v26 + *(_QWORD *)(v8 + 24) + 4 * v29) = v29 + v28 + 1;\n        *(_BYTE *)(v29 + v23 + *(_QWORD *)(v8 + 8) + 1) = 8;\n        *(_DWORD *)(v26 + *(_QWORD *)(v8 + 16) + 4 * v29 + 4) = 0;\n        *(_DWORD *)(v26 + *(_QWORD *)(v8 + 24) + 4 * v29 + 4) = v29 + v28 + 2;\n        v30 = v23 + *(_QWORD *)(v8 + 8);\n        v21 = (_BYTE *)(v29 + v30 + 2);\n        v29 += 2LL;\n      }\n      while ( v27 != (_DWORD)v29 );\n      v21 = (_BYTE *)(v29 + v30);\n    }\n    v20 = v25 + 1;\n    v24 = v20;\n  }\n  *v21 = 9;\n  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v20) = 0;\n  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v20) = 0;\n  *(_DWORD *)v8 = v24 + 1;\n  return v8;\n}\n", 
            "funcStartAddr": "0x4227d0L", 
            "funcEndAddr": "0x422af4L", 
            "funcName": "sub_4227D0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_422B00(__int64 a1, unsigned int a2, signed int *a3, __int64 *a4)\n{\n  signed int *v4; // rbx\n  __int64 v5; // r15\n  __int64 v6; // r12\n  __int64 v7; // r14\n  __int64 v8; // rbp\n  __int64 v9; // r13\n  signed __int64 v10; // rsi\n  __int64 v11; // r13\n  __int64 v12; // rbp\n  int v13; // eax\n  _QWORD *v14; // rcx\n  int v15; // edx\n  __int64 v16; // rdi\n  char v17; // cl\n  _QWORD *v18; // rcx\n  __int64 v19; // rax\n  int v20; // ecx\n  _QWORD *v21; // rcx\n  __int64 v22; // rax\n  unsigned __int8 v23; // cl\n  signed __int64 v24; // rdx\n  _QWORD *v25; // rax\n  int v26; // ecx\n  unsigned __int8 v27; // cl\n  signed __int64 v28; // rdx\n  _QWORD *v29; // rax\n  int v30; // ecx\n  __int64 *result; // rax\n  int v32; // [rsp+4h] [rbp-44h]\n  __int64 *v33; // [rsp+8h] [rbp-40h]\n  __int64 v34; // [rsp+10h] [rbp-38h]\n\n  v33 = a4;\n  v4 = a3;\n  v5 = a1;\n  v6 = sub_4382F0(\"trace.c\", 1126LL, 8LL * (signed int)a2);\n  if ( (signed int)a2 > 0 )\n  {\n    v34 = a2;\n    v7 = 0LL;\n    do\n    {\n      v8 = *v4;\n      v9 = sub_4382F0(\"trace.c\", 40LL, 32LL);\n      *(_QWORD *)(v9 + 8) = sub_4382F0(\"trace.c\", 41LL, v8);\n      v8 *= 4LL;\n      *(_QWORD *)(v9 + 16) = sub_4382F0(\"trace.c\", 42LL, v8);\n      LOBYTE(v10) = 43;\n      *(_QWORD *)(v9 + 24) = sub_4382F0(\"trace.c\", 43LL, v8);\n      *(_QWORD *)(v6 + 8 * v7) = v9;\n      if ( *v4 <= 0 )\n      {\n        LODWORD(v12) = 0;\n      }\n      else\n      {\n        v32 = 1;\n        v11 = 0LL;\n        LODWORD(v12) = 0;\n        while ( 2 )\n        {\n          v13 = *(char *)(*((_QWORD *)v4 + 1) + v11);\n          switch ( v13 )\n          {\n            case 0:\n              sub_4325B0(\"never happens. Trust me.\", v10);\n              return result;\n            case 1:\n              v23 = *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7) + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v11) - 1LL) - 32;\n              if ( v23 <= 0x3Fu && (v24 = -9223372036854751231LL, _bittest64(&v24, v23))\n                || *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7) + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v11) - 1LL) == 126 )\n              {\n                v25 = *(_QWORD **)(v6 + 8 * v7);\n                v26 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v11);\n                v10 = (signed int)v12;\n                *(_BYTE *)(v25[1] + v10) = 2;\n                *(_DWORD *)(v25[2] + 4 * v10) = v26;\n                v22 = v25[3];\n                goto LABEL_18;\n              }\n              v29 = *(_QWORD **)(v6 + 8 * v7);\n              v30 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v11);\n              v10 = (signed int)v12;\n              *(_BYTE *)(v29[1] + (signed int)v12) = 1;\nLABEL_24:\n              *(_DWORD *)(v29[2] + 4 * v10) = v30;\n              v20 = v32;\n              *(_DWORD *)(v29[3] + 4 * v10) = v32;\n              goto LABEL_25;\n            case 2:\n            case 4:\n            case 6:\n            case 7:\n            case 9:\n              v14 = *(_QWORD **)(v6 + 8 * v7);\n              v15 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v11);\n              v10 = v14[1];\n              v16 = (signed int)v12;\n              *(_BYTE *)(v10 + v16) = v13;\n              *(_DWORD *)(v14[2] + 4 * v16) = v15;\n              *(_DWORD *)(v14[3] + 4 * v16) = 0;\n              goto LABEL_26;\n            case 3:\n              v27 = *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7) + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v11) - 1LL) - 32;\n              if ( v27 <= 0x3Fu )\n              {\n                v28 = -9223372036854751231LL;\n                if ( _bittest64(&v28, v27) )\n                  goto LABEL_27;\n              }\n              if ( *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7) + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v11) - 1LL) == 126 )\n                goto LABEL_27;\n              v29 = *(_QWORD **)(v6 + 8 * v7);\n              v30 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v11);\n              v10 = (signed int)v12;\n              *(_BYTE *)(v29[1] + (signed int)v12) = 3;\n              goto LABEL_24;\n            case 5:\n            case 8:\n            case 10:\n              if ( !*(_DWORD *)(*((_QWORD *)v4 + 3) + 4 * v11) )\n              {\n                v21 = *(_QWORD **)(v6 + 8 * v7);\n                v10 = (signed int)v12;\n                *(_BYTE *)(v21[1] + v10) = v13;\n                *(_DWORD *)(v21[2] + 4 * v10) = 0;\n                v22 = v21[3];\nLABEL_18:\n                *(_DWORD *)(v22 + 4 * v10) = 0;\nLABEL_26:\n                LODWORD(v12) = v12 + 1;\n                goto LABEL_27;\n              }\n              v17 = *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7) + *(signed int *)(*((_QWORD *)v4 + 3) + 4 * v11) - 1LL);\n              if ( (unsigned __int8)(v17 - 32) > 0x3Fu\n                || (v10 = -9223372036854751231LL, !_bittest64(&v10, (unsigned __int8)(v17 - 32))) )\n              {\n                if ( v17 != 126 )\n                {\n                  v18 = *(_QWORD **)(v6 + 8 * v7);\n                  v12 = (signed int)v12;\n                  *(_BYTE *)(v18[1] + v12) = v13;\n                  *(_DWORD *)(v18[2] + 4 * v12) = 0;\n                  v19 = v18[3];\n                  v20 = v32;\n                  *(_DWORD *)(v19 + 4 * v12) = v32;\nLABEL_25:\n                  v32 = v20 + 1;\n                  goto LABEL_26;\n                }\n              }\nLABEL_27:\n              if ( ++v11 < *v4 )\n                continue;\n              v9 = *(_QWORD *)(v6 + 8 * v7);\n              break;\n            default:\n              goto LABEL_27;\n          }\n          break;\n        }\n      }\n      *(_DWORD *)v9 = v12;\n      ++v7;\n    }\n    while ( v7 != v34 );\n  }\n  result = v33;\n  *v33 = v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x422b00L", 
            "funcEndAddr": "0x422decL", 
            "funcName": "sub_422B00"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_422DF0@<rax>(unsigned __int64 result@<rax>, int a2@<edx>, __int64 (__fastcall *a3)(_QWORD, _QWORD)@<rcx>, char *a4@<rdi>, signed int a5@<esi>)\n{\n  char *v5; // r15\n  int v6; // er13\n  char *v7; // r14\n  char *v8; // rbp\n  char *v9; // rbx\n  char *v10; // r12\n  unsigned __int64 v11; // rcx\n  signed __int64 v12; // rdx\n  unsigned __int64 v13; // rdx\n  char *v14; // rcx\n  unsigned __int64 v15; // rcx\n  unsigned __int64 v16; // rdi\n  __int64 v17; // rsi\n  signed __int64 v18; // rbp\n  __int64 v19; // rdi\n  __int128 v20; // xmm0\n  __int128 v21; // xmm1\n  __int128 v22; // xmm3\n  __int128 v23; // xmm0\n  __int128 v24; // xmm1\n  __int128 v25; // xmm3\n  __int128 v26; // xmm0\n  __int128 v27; // xmm1\n  __int128 v28; // xmm3\n  char v29; // dl\n  unsigned __int64 v30; // r15\n  unsigned __int64 v31; // r12\n  __int64 v32; // rax\n  unsigned __int64 v33; // rbx\n  unsigned __int64 v34; // rbx\n  _BYTE *v35; // rdi\n  char v36; // r8\n  _BYTE *v37; // rbp\n  _BYTE *v38; // rcx\n\n  v5 = a4;\n  if ( a5 < 2 )\n    return result;\n  dword_463B08 = a2;\n  qword_463B10 = a3;\n  dword_463B18 = 4 * a2;\n  result = (unsigned int)(6 * a2);\n  dword_463B1C = 6 * a2;\n  v6 = a5 * a2;\n  v7 = &a4[a5 * a2];\n  v8 = &a4[a5 * a2];\n  if ( a5 >= 4 )\n  {\n    result = sub_423090(a4, &a4[v6]);\n    v8 = &a4[dword_463B18];\n    a2 = dword_463B08;\n  }\n  v9 = &a4[a2];\n  if ( v9 < v8 )\n  {\n    v10 = a4;\n    do\n    {\n      if ( (signed int)qword_463B10(v10, v9) > 0 )\n        v10 = v9;\n      a2 = dword_463B08;\n      result = dword_463B08;\n      v9 += dword_463B08;\n    }\n    while ( v9 < v8 );\n    if ( v10 != a4 && dword_463B08 > 0 )\n    {\n      result = (unsigned __int64)&a4[dword_463B08];\n      v11 = (unsigned __int64)(a4 + 1);\n      v12 = (signed __int64)(a4 + 1);\n      if ( result > (unsigned __int64)(a4 + 1) )\n        v12 = (signed __int64)&a4[dword_463B08];\n      v13 = v12 - (_QWORD)a4;\n      if ( v13 >= 0x20 )\n      {\n        if ( result > v11 )\n          v11 = (unsigned __int64)&a4[dword_463B08];\n        if ( (unsigned __int64)v10 >= v11 || &v10[v11 - (_QWORD)a4] <= a4 )\n        {\n          v15 = v13 & 0xFFFFFFFFFFFFFFE0LL;\n          v16 = ((v13 & 0xFFFFFFFFFFFFFFE0LL) - 32) >> 5;\n          v17 = ((_BYTE)v16 + 1) & 1;\n          if ( (v13 & 0xFFFFFFFFFFFFFFE0LL) == 32 )\n          {\n            v19 = 0LL;\n          }\n          else\n          {\n            v18 = v17 - 1 - v16;\n            v19 = 0LL;\n            do\n            {\n              v20 = *(_OWORD *)&v10[v19];\n              v21 = *(_OWORD *)&v10[v19 + 16];\n              v22 = *(_OWORD *)&v5[v19 + 16];\n              *(_OWORD *)&v10[v19] = *(_OWORD *)&v5[v19];\n              *(_OWORD *)&v10[v19 + 16] = v22;\n              *(_OWORD *)&v5[v19] = v20;\n              *(_OWORD *)&v5[v19 + 16] = v21;\n              v23 = *(_OWORD *)&v10[v19 + 32];\n              v24 = *(_OWORD *)&v10[v19 + 48];\n              v25 = *(_OWORD *)&v5[v19 + 48];\n              *(_OWORD *)&v10[v19 + 32] = *(_OWORD *)&v5[v19 + 32];\n              *(_OWORD *)&v10[v19 + 48] = v25;\n              *(_OWORD *)&v5[v19 + 32] = v23;\n              *(_OWORD *)&v5[v19 + 48] = v24;\n              v19 += 64LL;\n              v18 += 2LL;\n            }\n            while ( v18 );\n          }\n          if ( v17 )\n          {\n            v26 = *(_OWORD *)&v10[v19];\n            v27 = *(_OWORD *)&v10[v19 + 16];\n            v28 = *(_OWORD *)&v5[v19 + 16];\n            *(_OWORD *)&v10[v19] = *(_OWORD *)&v5[v19];\n            *(_OWORD *)&v10[v19 + 16] = v28;\n            *(_OWORD *)&v5[v19] = v26;\n            *(_OWORD *)&v5[v19 + 16] = v27;\n          }\n          if ( v13 == v15 )\n            goto LABEL_30;\n          v10 += v15;\n          v14 = &v5[v15];\n        }\n        else\n        {\n          v14 = a4;\n        }\n      }\n      else\n      {\n        v14 = a4;\n      }\n      do\n      {\n        v29 = *v10;\n        *v10++ = *v14;\n        *v14++ = v29;\n      }\n      while ( (unsigned __int64)v14 < result );\nLABEL_30:\n      a2 = dword_463B08;\n      goto LABEL_31;\n    }\n  }\nLABEL_31:\n  if ( a2 < v6 )\n  {\n    v30 = (unsigned __int64)&v5[a2];\n    do\n    {\n      v31 = v30;\n      v32 = a2;\n      v33 = v30;\n      while ( 1 )\n      {\n        v33 -= v32;\n        if ( (signed int)qword_463B10(v33, v30) <= 0 )\n          break;\n        v32 = dword_463B08;\n      }\n      a2 = dword_463B08;\n      result = dword_463B08;\n      v34 = dword_463B08 + v33;\n      v30 += dword_463B08;\n      if ( v34 != v31 )\n      {\n        v35 = (_BYTE *)(v30 - 1);\n        if ( v30 - 1 >= v31 )\n        {\n          do\n          {\n            v36 = *v35;\n            v37 = &v35[-result];\n            v38 = v35;\n            if ( (unsigned __int64)&v35[-result] >= v34 )\n            {\n              do\n              {\n                v37[result] = *v37;\n                v37 -= result;\n              }\n              while ( (unsigned __int64)v37 >= v34 );\n              v38 = &v37[result];\n            }\n            *v38 = v36;\n            --v35;\n          }\n          while ( (unsigned __int64)v35 >= v31 );\n        }\n      }\n    }\n    while ( v30 < (unsigned __int64)v7 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x422df0L", 
            "funcEndAddr": "0x423089L", 
            "funcName": "sub_422DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_423090(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r15\n  int v3; // er14\n  __int64 v4; // r8\n  signed __int64 v5; // rcx\n  char *v6; // rax\n  char *v7; // rdx\n  int v8; // esi\n  signed __int64 v9; // rbp\n  __int64 v10; // rdi\n  __int128 v11; // xmm0\n  __int128 v12; // xmm1\n  __int128 v13; // xmm3\n  __int64 v14; // r13\n  unsigned __int64 v15; // r12\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // rbp\n  bool v18; // zf\n  __int64 v19; // rax\n  unsigned int v20; // ebp\n  int v21; // edi\n  char v22; // bl\n  int v23; // edi\n  __int64 v24; // rsi\n  char v25; // bl\n  char v26; // cl\n  char v27; // cl\n  char v28; // cl\n  unsigned __int64 v29; // r14\n  unsigned __int64 i; // r13\n  unsigned __int64 v31; // rbx\n  int v32; // eax\n  int v33; // ebp\n  __int64 v34; // rax\n  char *v35; // rdx\n  char *v36; // rsi\n  unsigned int v37; // edi\n  int v38; // ebx\n  char v39; // al\n  __int64 v40; // rdi\n  char v41; // al\n  char v42; // al\n  char v43; // al\n  char v44; // al\n  __int64 v45; // rcx\n  signed __int64 v46; // rdi\n  __int64 v47; // rax\n  __int128 v48; // xmm0\n  __int128 v49; // xmm1\n  __int128 v50; // xmm3\n  int v51; // ebx\n  __int64 result; // rax\n  unsigned __int64 v53; // [rsp+8h] [rbp-40h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-38h]\n\n  v2 = a1;\n  v53 = a2;\n  v3 = a2 - a1;\n  do\n  {\n    while ( 2 )\n    {\n      v14 = dword_463B08 * (v3 / dword_463B08 >> 1);\n      v15 = v2 + v14;\n      v54 = v2;\n      if ( v3 < dword_463B1C )\n        goto LABEL_25;\n      v16 = v2 + v14;\n      if ( (signed int)qword_463B10(v2, v15) > 0 )\n        v16 = v2;\n      v17 = v53 - dword_463B08;\n      if ( (signed int)qword_463B10(v16, v53 - dword_463B08) > 0 )\n      {\n        v18 = v16 == v2;\n        v16 = v2;\n        if ( v18 )\n          v16 = v2 + v14;\n        if ( (signed int)qword_463B10(v16, v17) < 0 )\n          v16 = v17;\n      }\n      if ( v16 == v15 )\n        goto LABEL_25;\n      v8 = dword_463B08;\n      v19 = (unsigned int)(dword_463B08 - 1);\n      if ( (unsigned __int64)(v19 + 1) < 0x20 || v15 < v16 + v19 + 1 && v16 < v2 + v14 + v19 + 1 )\n      {\n        v6 = (char *)(v2 + v14);\n        v7 = (char *)v16;\nLABEL_19:\n        v20 = v8 - 1;\n        if ( v8 & 3 )\n        {\n          v21 = -(v8 & 3);\n          do\n          {\n            v22 = *v6;\n            *v6 = *v7;\n            *v7 = v22;\n            ++v6;\n            ++v7;\n            --v8;\n            ++v21;\n          }\n          while ( v21 );\n        }\n        if ( v20 >= 3 )\n        {\n          v23 = v8;\n          v24 = 0LL;\n          do\n          {\n            v25 = v6[v24];\n            v6[v24] = v7[v24];\n            v7[v24] = v25;\n            v26 = v6[v24 + 1];\n            v6[v24 + 1] = v7[v24 + 1];\n            v7[v24 + 1] = v26;\n            v27 = v6[v24 + 2];\n            v6[v24 + 2] = v7[v24 + 2];\n            v7[v24 + 2] = v27;\n            v28 = v6[v24 + 3];\n            v6[v24 + 3] = v7[v24 + 3];\n            v7[v24 + 3] = v28;\n            v24 += 4LL;\n          }\n          while ( v23 != (_DWORD)v24 );\n        }\n        goto LABEL_25;\n      }\n      v4 = dword_463B08 & 0x1F;\n      v5 = v19 + 1 - v4;\n      v6 = (char *)(v15 + v5);\n      v7 = (char *)(v16 + v5);\n      v8 = dword_463B08 - v5;\n      v9 = v2 + v14 + 16;\n      v10 = 0LL;\n      do\n      {\n        v11 = *(_OWORD *)(v2 + v14 + v10);\n        v12 = *(_OWORD *)(v9 + v10);\n        v13 = *(_OWORD *)(v16 + v10 + 16);\n        *(_OWORD *)(v2 + v14 + v10) = *(_OWORD *)(v16 + v10);\n        *(_OWORD *)(v9 + v10) = v13;\n        *(_OWORD *)(v16 + v10) = v11;\n        *(_OWORD *)(v16 + v10 + 16) = v12;\n        v10 += 32LL;\n      }\n      while ( v5 != v10 );\n      if ( (_DWORD)v4 )\n        goto LABEL_19;\nLABEL_25:\n      v29 = v53 - dword_463B08;\n      while ( 1 )\n      {\n        for ( i = v2; i < v15; i += dword_463B08 )\n        {\n          if ( (signed int)qword_463B10(i, v15) > 0 )\n            break;\n        }\n        if ( v29 <= v15 )\n          break;\n        v31 = v29;\n        while ( 1 )\n        {\n          v32 = qword_463B10(v15, v31);\n          v33 = dword_463B08;\n          if ( v32 > 0 )\n            break;\n          v31 -= dword_463B08;\n          if ( v31 <= v15 )\n            goto LABEL_35;\n        }\n        v2 = dword_463B08 + i;\n        v29 = v31;\n        if ( i == v15 )\n          v15 = v31;\n        else\n          v29 = v31 - dword_463B08;\nLABEL_37:\n        v34 = (unsigned int)(v33 - 1);\n        if ( (unsigned __int64)(v34 + 1) < 0x20 || i < v31 + v34 + 1 && v31 < i + v34 + 1 )\n        {\n          v35 = (char *)i;\n          v36 = (char *)v31;\n          goto LABEL_41;\n        }\n        v45 = v33 & 0x1F;\n        v46 = v34 + 1 - v45;\n        v35 = (char *)(v46 + i);\n        v36 = (char *)(v31 + v46);\n        v33 -= v46;\n        v47 = 0LL;\n        do\n        {\n          v48 = *(_OWORD *)(i + v47);\n          v49 = *(_OWORD *)(i + v47 + 16);\n          v50 = *(_OWORD *)(v31 + v47 + 16);\n          *(_OWORD *)(i + v47) = *(_OWORD *)(v31 + v47);\n          *(_OWORD *)(i + v47 + 16) = v50;\n          *(_OWORD *)(v31 + v47) = v48;\n          *(_OWORD *)(v31 + v47 + 16) = v49;\n          v47 += 32LL;\n        }\n        while ( v46 != v47 );\n        if ( (_DWORD)v45 )\n        {\nLABEL_41:\n          v37 = v33 - 1;\n          if ( v33 & 3 )\n          {\n            v38 = -(v33 & 3);\n            do\n            {\n              v39 = *v35;\n              *v35 = *v36;\n              *v36 = v39;\n              ++v35;\n              ++v36;\n              --v33;\n              ++v38;\n            }\n            while ( v38 );\n          }\n          if ( v37 >= 3 )\n          {\n            v40 = 0LL;\n            do\n            {\n              v41 = v35[v40];\n              v35[v40] = v36[v40];\n              v36[v40] = v41;\n              v42 = v35[v40 + 1];\n              v35[v40 + 1] = v36[v40 + 1];\n              v36[v40 + 1] = v42;\n              v43 = v35[v40 + 2];\n              v35[v40 + 2] = v36[v40 + 2];\n              v36[v40 + 2] = v43;\n              v44 = v35[v40 + 3];\n              v35[v40 + 3] = v36[v40 + 3];\n              v36[v40 + 3] = v44;\n              v40 += 4LL;\n            }\n            while ( v33 != (_DWORD)v40 );\n          }\n        }\n      }\n      v33 = dword_463B08;\n      v31 = v29;\nLABEL_35:\n      if ( i != v15 )\n      {\n        v29 = v31 - v33;\n        v31 = v15;\n        v15 = i;\n        v2 = i;\n        goto LABEL_37;\n      }\n      v2 = v15 + v33;\n      v51 = v15 - v54;\n      v3 = v53 - v2;\n      result = (unsigned int)dword_463B18;\n      if ( (signed int)v15 - (signed int)v54 > (signed int)v53 - (signed int)v2 )\n      {\n        if ( dword_463B18 <= v3 )\n          result = sub_423090(v2, v53);\n        v53 = v15;\n        v3 = v15 - v54;\n        v2 = v54;\n        if ( v51 < dword_463B18 )\n          return result;\n        continue;\n      }\n      break;\n    }\n    if ( dword_463B18 <= v51 )\n      result = sub_423090(v54, v15);\n  }\n  while ( v3 >= dword_463B18 );\n  return result;\n}\n", 
            "funcStartAddr": "0x423090L", 
            "funcEndAddr": "0x42350bL", 
            "funcName": "sub_423090"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_423510(__int64 a1)\n{\n  _QWORD *v1; // r14\n  unsigned __int64 v2; // rsi\n  _BYTE *v3; // rax\n  __int64 v4; // r13\n  char *v5; // rbp\n  __int64 v6; // rax\n  __int64 v7; // rdx\n  unsigned int v9; // [rsp+Ch] [rbp-4Ch]\n  __int64 v10; // [rsp+10h] [rbp-48h]\n  _BYTE *v11; // [rsp+18h] [rbp-40h]\n  char v12; // [rsp+24h] [rbp-34h]\n\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  v2 = 0LL;\n  v1 = (_QWORD *)sub_42AF80(10LL, 0LL);\n  v3 = (_BYTE *)sub_42C980(a1, 0LL);\n  v11 = v3;\n  if ( !v3 )\n  {\nLABEL_23:\n    sub_42B580(v1);\n    return 0LL;\n  }\n  LODWORD(v4) = 0;\n  v5 = 0LL;\n  do\n  {\n    while ( *v3 != 62 )\n    {\n      if ( !v5 )\n      {\n        v5 = 0LL;\n        goto LABEL_19;\n      }\n      v2 = (unsigned __int64)\" \\t\\n\";\n      v6 = sub_4387A0(&v11, \" \\t\\n\", &v9);\n      if ( v6 )\n      {\n        LODWORD(v10) = v4;\n        v4 = (signed int)v4;\n        v2 = *(unsigned int *)(v1[41] + 4LL * (signed int)v4);\n        *(_DWORD *)(v1[41] + 4 * v4) = sub_438690(*v1 + 8LL * (signed int)v4, v2, v6, v9);\n        LODWORD(v4) = v10;\n        goto LABEL_19;\n      }\n      v3 = (_BYTE *)sub_42C980(a1, \" \\t\\n\");\n      v11 = v3;\n      if ( !v3 )\n        goto LABEL_21;\n    }\n    v11 = v3 + 1;\n    v5 = (char *)sub_4387A0(&v11, \" \\t\\n\", &v9);\n    if ( !v5 )\n    {\n      v7 = *(unsigned int *)(a1 + 16);\n      sub_4325B0(\"Blank name in A2M file %s (line %d)\\n\", *(_QWORD *)(a1 + 8));\n    }\n    v10 = sub_4387A0(&v11, \"\\n\", &v12);\n    LODWORD(v4) = sub_428470(v1[39], v5);\n    if ( (signed int)v4 >= *((_DWORD *)v1 + 80) )\n      sub_42B140(v1);\n    v2 = v9;\n    *(_QWORD *)(v1[1] + 8LL * (signed int)v4) = sub_438810(v5);\n    if ( v10 )\n    {\n      v2 = (unsigned int)v4;\n      sub_42B7E0(v1, (unsigned int)v4, v10);\n    }\n    ++*((_DWORD *)v1 + 7);\nLABEL_19:\n    v3 = (_BYTE *)sub_42C980(a1, v2);\n    v11 = v3;\n  }\n  while ( v3 );\n  if ( !v5 )\n    goto LABEL_23;\nLABEL_21:\n  sub_42C2C0(v1);\n  return v1;\n}\n", 
            "funcStartAddr": "0x423510L", 
            "funcEndAddr": "0x4236d1L", 
            "funcName": "sub_423510"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4236E0(FILE *stream, __int64 a2)\n{\n  signed __int64 v2; // r12\n  __int64 v3; // rax\n  void *v4; // rax\n  void *v5; // rcx\n  __int64 v6; // rbx\n  __int64 v7; // [rsp+0h] [rbp-68h]\n  char v8; // [rsp+3Ch] [rbp-2Ch]\n\n  v8 = 0;\n  if ( *(_DWORD *)(a2 + 28) > 0 )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = *(_QWORD *)(a2 + 104);\n      if ( v3 )\n      {\n        v4 = *(void **)(v3 + 8 * v2);\n        v5 = &unk_4409CD;\n        if ( v4 )\n          v5 = v4;\n      }\n      else\n      {\n        v5 = &unk_4409CD;\n      }\n      fprintf(stream, \">%s %s\\n\", *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v2), v5);\n      if ( *(_DWORD *)(a2 + 24) > 0 )\n      {\n        v6 = 0LL;\n        do\n        {\n          strncpy((char *)&v7, (const char *)(v6 + *(_QWORD *)(*(_QWORD *)a2 + 8 * v2)), 0x3CuLL);\n          fprintf(stream, \"%s\\n\", &v7);\n          v6 += 60LL;\n        }\n        while ( *(_DWORD *)(a2 + 24) > (signed int)v6 );\n      }\n      ++v2;\n    }\n    while ( v2 < *(signed int *)(a2 + 28) );\n  }\n}\n", 
            "funcStartAddr": "0x4236e0L", 
            "funcEndAddr": "0x4237b3L", 
            "funcName": "sub_4236E0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_4237C0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  __int64 v5; // r14\n  void *v6; // rbx\n  void *v7; // r15\n  void *v8; // r14\n  float v9; // xmm2_4\n  float v10; // xmm1_4\n  __int64 v11; // rdx\n  float v12; // xmm0_4\n  float v13; // xmm0_4\n  __int64 v14; // rdx\n  float v15; // xmm0_4\n  int v17; // [rsp+10h] [rbp-58h]\n  unsigned int v18; // [rsp+14h] [rbp-54h]\n  void *v19; // [rsp+18h] [rbp-50h]\n  void *v20; // [rsp+20h] [rbp-48h]\n  void *v21; // [rsp+28h] [rbp-40h]\n  void *ptr; // [rsp+30h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  sub_4239B0(a3, a4, &v20, &v18);\n  sub_4239B0(v4, v5, &v19, &v17);\n  sub_4239B0(a1, a2, &ptr, &v18);\n  sub_4239B0(a2, a1, &v21, &v17);\n  v6 = v21;\n  v7 = v20;\n  v8 = v19;\n  if ( (signed int)v18 <= 0 )\n  {\n    v9 = 0.0;\n    v12 = 0.0;\n    if ( v17 <= 0 )\n      goto LABEL_31;\n    goto LABEL_18;\n  }\n  if ( v18 == 1 )\n  {\n    v9 = 0.0;\n    v10 = 1.0;\n    v11 = 0LL;\nLABEL_14:\n    if ( *((_DWORD *)v20 + v11) == *((_DWORD *)ptr + v11) )\n      v9 = v9 + 1.0;\n    v12 = v10;\n    goto LABEL_17;\n  }\n  v12 = 0.0;\n  v11 = 0LL;\n  v9 = 0.0;\n  do\n  {\n    if ( *((_DWORD *)v20 + v11) == *((_DWORD *)ptr + v11) )\n      v9 = v9 + 1.0;\n    v13 = v12 + 1.0;\n    if ( *((_DWORD *)v20 + v11 + 1) == *((_DWORD *)ptr + v11 + 1) )\n      v9 = v9 + 1.0;\n    v12 = v13 + 1.0;\n    v11 += 2LL;\n  }\n  while ( v18 - (unsigned __int64)(v18 & 1) != v11 );\n  v10 = v12 + 1.0;\n  if ( v18 & 1 )\n    goto LABEL_14;\nLABEL_17:\n  if ( v17 <= 0 )\n    goto LABEL_31;\nLABEL_18:\n  if ( v17 == 1 )\n  {\n    v14 = 0LL;\nLABEL_28:\n    if ( *((_DWORD *)v21 + v14) == *((_DWORD *)v19 + v14) )\n      v9 = v9 + 1.0;\n    v12 = v12 + 1.0;\n    goto LABEL_31;\n  }\n  v14 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)v21 + v14) == *((_DWORD *)v19 + v14) )\n      v9 = v9 + 1.0;\n    v15 = v12 + 1.0;\n    if ( *((_DWORD *)v21 + v14 + 1) == *((_DWORD *)v19 + v14 + 1) )\n      v9 = v9 + 1.0;\n    v12 = v15 + 1.0;\n    v14 += 2LL;\n  }\n  while ( (unsigned int)v17 - (unsigned __int64)(v17 & 1) != v14 );\n  if ( v17 & 1 )\n    goto LABEL_28;\nLABEL_31:\n  free(ptr);\n  free(v6);\n  free(v7);\n  free(v8);\n  return v9 / v12;\n}\n", 
            "funcStartAddr": "0x4237c0L", 
            "funcEndAddr": "0x4239a7L", 
            "funcName": "sub_4237C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4239B0(const char *a1, __int64 a2, __int64 *a3, _DWORD *a4)\n{\n  _DWORD *v4; // r14\n  __int64 *v5; // r15\n  __int64 v6; // r13\n  const char *v7; // r12\n  size_t v8; // rax\n  __int64 result; // rax\n  __int64 v10; // rcx\n  signed __int64 v11; // r9\n  int v12; // esi\n  signed int v13; // er8\n  char v14; // bl\n  unsigned __int8 v15; // bl\n  signed int v16; // edi\n  unsigned __int8 v17; // dl\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v8 = strlen(a1);\n  result = sub_4382F0(\"aligneval.c\", 179LL, 4 * v8);\n  v10 = 0LL;\n  v11 = -9223372036854751231LL;\n  v12 = 0;\n  v13 = 0;\n  while ( 1 )\n  {\n    v14 = v7[v10];\n    if ( v14 > 94 )\n    {\n      if ( v14 == 95 || v14 == 126 )\n        goto LABEL_13;\n      goto LABEL_10;\n    }\n    if ( (unsigned __int8)(v14 - 45) < 2u || v14 == 32 )\n      goto LABEL_13;\n    if ( !v14 )\n      break;\nLABEL_10:\n    v15 = *(_BYTE *)(v6 + v10) - 32;\n    if ( v15 > 0x3Fu || (v16 = -1, !_bittest64(&v11, v15)) )\n    {\n      v16 = -1;\n      if ( *(_BYTE *)(v6 + v10) != 126 )\n        v16 = v13;\n    }\n    *(_DWORD *)(result + 4LL * v12++) = v16;\nLABEL_13:\n    v17 = *(_BYTE *)(v6 + v10) - 32;\n    if ( v17 <= 0x3Fu && _bittest64(&v11, v17) || *(_BYTE *)(v6 + v10) == 126 )\n    {\n      ++v10;\n    }\n    else\n    {\n      ++v13;\n      ++v10;\n    }\n  }\n  *v4 = v12;\n  *v5 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4239b0L", 
            "funcEndAddr": "0x423ac2L", 
            "funcName": "sub_4239B0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_423AD0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  __int64 v6; // r13\n  __int64 v7; // r14\n  void *v8; // rbx\n  void *v9; // r15\n  void *v10; // r14\n  float v11; // xmm2_4\n  float v12; // xmm1_4\n  __int64 v13; // rdx\n  float v14; // xmm0_4\n  float v15; // xmm0_4\n  __int64 v16; // rdx\n  float v17; // xmm0_4\n  unsigned int v19; // [rsp+Ch] [rbp-5Ch]\n  float v20; // [rsp+10h] [rbp-58h]\n  int v21; // [rsp+14h] [rbp-54h]\n  void *v22; // [rsp+18h] [rbp-50h]\n  void *v23; // [rsp+20h] [rbp-48h]\n  void *v24; // [rsp+28h] [rbp-40h]\n  void *ptr; // [rsp+30h] [rbp-38h]\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  sub_423CD0(a1, a2, a4, a5, &v23, &v19);\n  sub_423CD0(a1, v7, v5, v6, &v22, &v21);\n  sub_423CD0(a1, a2, a2, v7, &ptr, &v19);\n  sub_423CD0(a1, v7, v7, a2, &v24, &v21);\n  v8 = v24;\n  v9 = v23;\n  v10 = v22;\n  if ( (signed int)v19 <= 0 )\n  {\n    v11 = 0.0;\n    v14 = 0.0;\n    if ( v21 <= 0 )\n      goto LABEL_31;\n    goto LABEL_18;\n  }\n  if ( v19 == 1 )\n  {\n    v11 = 0.0;\n    v12 = 1.0;\n    v13 = 0LL;\nLABEL_14:\n    if ( *((_DWORD *)v23 + v13) == *((_DWORD *)ptr + v13) )\n      v11 = v11 + 1.0;\n    v14 = v12;\n    goto LABEL_17;\n  }\n  v14 = 0.0;\n  v13 = 0LL;\n  v11 = 0.0;\n  do\n  {\n    if ( *((_DWORD *)v23 + v13) == *((_DWORD *)ptr + v13) )\n      v11 = v11 + 1.0;\n    v15 = v14 + 1.0;\n    if ( *((_DWORD *)v23 + v13 + 1) == *((_DWORD *)ptr + v13 + 1) )\n      v11 = v11 + 1.0;\n    v14 = v15 + 1.0;\n    v13 += 2LL;\n  }\n  while ( v19 - (unsigned __int64)(v19 & 1) != v13 );\n  v12 = v14 + 1.0;\n  if ( v19 & 1 )\n    goto LABEL_14;\nLABEL_17:\n  if ( v21 <= 0 )\n    goto LABEL_31;\nLABEL_18:\n  if ( v21 == 1 )\n  {\n    v16 = 0LL;\nLABEL_28:\n    if ( *((_DWORD *)v24 + v16) == *((_DWORD *)v22 + v16) )\n      v11 = v11 + 1.0;\n    v14 = v14 + 1.0;\n    goto LABEL_31;\n  }\n  v16 = 0LL;\n  do\n  {\n    if ( *((_DWORD *)v24 + v16) == *((_DWORD *)v22 + v16) )\n      v11 = v11 + 1.0;\n    v17 = v14 + 1.0;\n    if ( *((_DWORD *)v24 + v16 + 1) == *((_DWORD *)v22 + v16 + 1) )\n      v11 = v11 + 1.0;\n    v14 = v17 + 1.0;\n    v16 += 2LL;\n  }\n  while ( (unsigned int)v21 - (unsigned __int64)(v21 & 1) != v16 );\n  if ( v21 & 1 )\n    goto LABEL_28;\nLABEL_31:\n  v20 = v11 / v14;\n  free(ptr);\n  free(v8);\n  free(v9);\n  free(v10);\n  return v20;\n}\n", 
            "funcStartAddr": "0x423ad0L", 
            "funcEndAddr": "0x423cc7L", 
            "funcName": "sub_423AD0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_423CD0(__int64 a1, __int64 a2, const char *a3, __int64 a4, __int64 *a5, _DWORD *a6)\n{\n  __int64 v6; // r12\n  const char *v7; // r15\n  __int64 v8; // rbp\n  size_t v9; // rax\n  __int64 v10; // r13\n  size_t v11; // rax\n  _DWORD *v12; // rax\n  __int64 v13; // rcx\n  char v14; // dl\n  __int64 v15; // rcx\n  signed __int64 v16; // rbp\n  int v17; // esi\n  signed int v18; // er8\n  int v19; // er14\n  char v20; // bl\n  unsigned __int8 v21; // bl\n  signed int v22; // edi\n  unsigned __int8 v23; // dl\n  __int64 *result; // rax\n  _DWORD *v25; // [rsp+8h] [rbp-40h]\n  __int64 *v26; // [rsp+10h] [rbp-38h]\n\n  v25 = a6;\n  v26 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = a2;\n  v9 = strlen(a3);\n  v10 = sub_4382F0(\"aligneval.c\", 236LL, 4 * v9);\n  v11 = strlen(v7);\n  v12 = (_DWORD *)sub_4382F0(\"aligneval.c\", 237LL, 4 * v11);\n  v13 = 0LL;\n  LODWORD(a2) = 0;\n  while ( 1 )\n  {\n    v14 = *(_BYTE *)(v8 + v13);\n    if ( v14 <= 94 )\n      break;\n    if ( v14 != 95 && v14 != 126 )\n      goto LABEL_10;\nLABEL_2:\n    ++v13;\n  }\n  if ( (unsigned __int8)(v14 - 45) < 2u || v14 == 32 )\n    goto LABEL_2;\n  if ( v14 )\n  {\nLABEL_10:\n    a2 = (signed int)a2;\n    v12[a2] = *(_DWORD *)(a1 + 4 * v13) != 0;\n    LODWORD(a2) = a2 + 1;\n    goto LABEL_2;\n  }\n  v15 = 0LL;\n  v16 = -9223372036854751231LL;\n  v17 = 0;\n  v18 = 0;\n  v19 = 0;\n  while ( 1 )\n  {\n    v20 = v7[v15];\n    if ( v20 > 94 )\n    {\n      if ( v20 == 95 || v20 == 126 )\n        goto LABEL_23;\n      goto LABEL_19;\n    }\n    if ( (unsigned __int8)(v20 - 45) < 2u || v20 == 32 )\n      goto LABEL_23;\n    if ( !v20 )\n      break;\nLABEL_19:\n    if ( v12[v17] )\n    {\n      v21 = *(_BYTE *)(v6 + v15) - 32;\n      if ( v21 > 0x3Fu || (v22 = -1, !_bittest64(&v16, v21)) )\n      {\n        v22 = -1;\n        if ( *(_BYTE *)(v6 + v15) != 126 )\n          v22 = v18;\n      }\n      *(_DWORD *)(v10 + 4LL * v19++) = v22;\n      v20 = v7[v15];\n    }\nLABEL_23:\n    if ( ((unsigned __int8)(v20 - 32) > 0x3Fu || !_bittest64(&v16, (unsigned __int8)(v20 - 32))) && v20 != 126 )\n      ++v17;\n    v23 = *(_BYTE *)(v6 + v15) - 32;\n    if ( v23 <= 0x3Fu && _bittest64(&v16, v23) || *(_BYTE *)(v6 + v15) == 126 )\n    {\n      ++v15;\n    }\n    else\n    {\n      ++v18;\n      ++v15;\n    }\n  }\n  free(v12);\n  *v25 = v19;\n  result = v26;\n  *v26 = v10;\n  return result;\n}\n", 
            "funcStartAddr": "0x423cd0L", 
            "funcEndAddr": "0x423ebbL", 
            "funcName": "sub_423CD0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_423EC0(__int64 a1, __int64 a2, signed int a3)\n{\n  signed __int64 v3; // r15\n  signed __int64 v4; // r12\n  __int64 v5; // rbx\n  float v6; // xmm0_4\n  signed __int64 v7; // r14\n  float v8; // xmm0_4\n  signed int v10; // [rsp+8h] [rbp-40h]\n  float v11; // [rsp+Ch] [rbp-3Ch]\n  signed __int64 v12; // [rsp+10h] [rbp-38h]\n\n  v10 = a3;\n  if ( a3 <= 0 )\n  {\n    v6 = 0.0;\n  }\n  else\n  {\n    v3 = a3;\n    v4 = 1LL;\n    v5 = 0LL;\n    v6 = 0.0;\n    while ( 2 )\n    {\n      v7 = v5 + 1;\n      if ( v5 + 1 < v3 )\n      {\n        v12 = v4;\n        do\n        {\n          v11 = v6;\n          v8 = sub_4237C0(\n                 *(_QWORD *)(a1 + 8 * v5),\n                 *(_QWORD *)(a1 + 8 * v4),\n                 *(_QWORD *)(a2 + 8 * v5),\n                 *(_QWORD *)(a2 + 8 * v4));\n          if ( v8 < 0.0 )\n            return -1.0;\n          v6 = v11 + v8;\n          ++v4;\n        }\n        while ( v4 < v3 );\n        v4 = v12 + 1;\n        ++v5;\n        if ( v7 < v3 )\n          continue;\n      }\n      break;\n    }\n  }\n  return (v6 + v6) / (((float)v10 + -1.0) * (float)v10);\n}\n", 
            "funcStartAddr": "0x423ec0L", 
            "funcEndAddr": "0x423f9bL", 
            "funcName": "sub_423EC0"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_423FA0(__int64 a1, __int64 a2, __int64 a3, signed int a4)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // r12\n  signed __int64 v6; // r13\n  __int64 v7; // r14\n  float v8; // xmm0_4\n  float v9; // xmm0_4\n  signed int v11; // [rsp+0h] [rbp-48h]\n  float v12; // [rsp+4h] [rbp-44h]\n  signed __int64 v13; // [rsp+8h] [rbp-40h]\n  signed __int64 v14; // [rsp+10h] [rbp-38h]\n\n  v4 = a3;\n  v11 = a4;\n  if ( a4 <= 0 )\n  {\n    v8 = 0.0;\n  }\n  else\n  {\n    v5 = a4;\n    v6 = 1LL;\n    v7 = 0LL;\n    v8 = 0.0;\n    while ( 2 )\n    {\n      if ( v7 + 1 < v5 )\n      {\n        v13 = v7 + 1;\n        v14 = v6;\n        do\n        {\n          v12 = v8;\n          v9 = sub_423AD0(\n                 a1,\n                 *(_QWORD *)(a2 + 8 * v7),\n                 *(_QWORD *)(a2 + 8 * v6),\n                 *(_QWORD *)(v4 + 8 * v7),\n                 *(_QWORD *)(v4 + 8 * v6));\n          if ( v9 < 0.0 )\n            return -1.0;\n          v8 = v12 + v9;\n          ++v6;\n        }\n        while ( v6 < v5 );\n        v6 = v14 + 1;\n        ++v7;\n        if ( v13 < v5 )\n          continue;\n      }\n      break;\n    }\n  }\n  return (v8 + v8) / (((float)v11 + -1.0) * (float)v11);\n}\n", 
            "funcStartAddr": "0x423fa0L", 
            "funcEndAddr": "0x424090L", 
            "funcName": "sub_423FA0"
        }, 
        {
            "decompiledFuncCode": "double __fastcall sub_424090(char *a1, __int64 a2)\n{\n  char v2; // dl\n  __int64 v3; // rax\n  signed __int64 v4; // r10\n  signed int v5; // er9\n  signed int v6; // er11\n  signed int v7; // er8\n  char v8; // cl\n  double result; // xmm0_8\n\n  v2 = *a1;\n  if ( *a1 )\n  {\n    v3 = 0LL;\n    v4 = -9223372036854751231LL;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    do\n    {\n      v8 = *(_BYTE *)(a2 + v3);\n      if ( !v8 )\n        break;\n      if ( ((unsigned __int8)(v2 - 32) > 0x3Fu || !_bittest64(&v4, (unsigned __int8)(v2 - 32))) && v2 != 126 )\n      {\n        ++v6;\n        v7 += v2 == v8;\n      }\n      if ( ((unsigned __int8)(v8 - 32) > 0x3Fu || !_bittest64(&v4, (unsigned __int8)(v8 - 32))) && v8 != 126 )\n        ++v5;\n      v2 = a1[v3++ + 1];\n    }\n    while ( v2 );\n  }\n  else\n  {\n    v7 = 0;\n    v6 = 0;\n    v5 = 0;\n  }\n  if ( v5 <= v6 )\n    v6 = v5;\n  if ( !v6 )\n    return 0.0;\n  *(float *)&result = (float)v7 / (float)v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x424090L", 
            "funcEndAddr": "0x424139L", 
            "funcName": "sub_424090"
        }, 
        {
            "decompiledFuncCode": "float __fastcall sub_424140(__int64 a1, __int64 a2, signed int a3, signed int a4)\n{\n  signed int v4; // er14\n  int v6; // er12\n  double v7; // xmm0_8\n  signed __int64 v8; // r13\n  double v9; // xmm0_8\n  signed int v10; // ebx\n  char *v11; // rsi\n  char v12; // dl\n  __int64 v13; // rbp\n  signed int v14; // er9\n  signed int v15; // ecx\n  signed int v16; // er8\n  char v17; // bl\n  float v18; // xmm2_4\n  float v19; // [rsp+Ch] [rbp-3Ch]\n  double v20; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  if ( a3 < 2 )\n    return 1.0;\n  if ( a4 <= 0 )\n  {\n    LODWORD(v7) = 0;\n  }\n  else\n  {\n    v6 = 0;\n    v7 = 0.0;\n    v8 = -9223372036854751231LL;\n    v20 = (double)a3;\n    do\n    {\n      v19 = *(float *)&v7;\n      sub_437B60();\n      v9 = v7 * v20;\n      v10 = (signed int)v9;\n      do\n      {\n        sub_437B60();\n        v9 = v9 * v20;\n      }\n      while ( (signed int)v9 == v10 );\n      v11 = *(char **)(a1 + 8LL * v10);\n      v12 = *v11;\n      if ( *v11 )\n      {\n        v13 = 0LL;\n        v14 = 0;\n        v15 = 0;\n        v16 = 0;\n        do\n        {\n          v17 = *(_BYTE *)(*(_QWORD *)(a1 + 8LL * (signed int)v9) + v13);\n          if ( !v17 )\n            break;\n          if ( ((unsigned __int8)(v12 - 32) > 0x3Fu || !_bittest64(&v8, (unsigned __int8)(v12 - 32))) && v12 != 126 )\n          {\n            ++v15;\n            v16 += v12 == v17;\n          }\n          if ( ((unsigned __int8)(v17 - 32) > 0x3Fu || !_bittest64(&v8, (unsigned __int8)(v17 - 32))) && v17 != 126 )\n            ++v14;\n          v12 = v11[v13++ + 1];\n        }\n        while ( v12 );\n      }\n      else\n      {\n        v16 = 0;\n        v15 = 0;\n        v14 = 0;\n      }\n      if ( v14 <= v15 )\n        v15 = v14;\n      if ( v15 )\n        v18 = (float)v16 / (float)v15;\n      else\n        v18 = 0.0;\n      *(_QWORD *)&v7 = LODWORD(v19);\n      *(float *)&v7 = v19 + v18;\n      ++v6;\n    }\n    while ( v6 != v4 );\n  }\n  return *(float *)&v7 / (float)v4;\n}\n", 
            "funcStartAddr": "0x424140L", 
            "funcEndAddr": "0x4242bbL", 
            "funcName": "sub_424140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4242C0(__int64 a1, signed int a2, unsigned int a3)\n{\n  unsigned int v3; // ebx\n  __int64 v4; // rbx\n  signed int v5; // eax\n  const unsigned __int16 *v6; // r14\n  __int64 v7; // r12\n  _QWORD *v8; // r13\n  __int64 v9; // rbp\n  signed int v10; // eax\n  bool v11; // zf\n  bool v12; // sf\n  unsigned __int8 v13; // of\n  char v14; // dl\n  bool v15; // zf\n  bool v16; // sf\n  unsigned __int8 v17; // of\n  char v18; // cl\n  bool v19; // zf\n  bool v20; // sf\n  unsigned __int8 v21; // of\n  char v22; // dl\n  bool v23; // zf\n  bool v24; // sf\n  unsigned __int8 v25; // of\n  char v26; // cl\n  bool v27; // zf\n  bool v28; // sf\n  unsigned __int8 v29; // of\n  char v30; // dl\n  bool v31; // zf\n  bool v32; // sf\n  unsigned __int8 v33; // of\n  char v34; // cl\n  bool v35; // zf\n  bool v36; // sf\n  unsigned __int8 v37; // of\n  char v38; // dl\n  bool v39; // zf\n  bool v40; // sf\n  unsigned __int8 v41; // of\n  char v42; // cl\n  bool v43; // zf\n  bool v44; // sf\n  unsigned __int8 v45; // of\n  char v46; // dl\n  bool v47; // zf\n  bool v48; // sf\n  unsigned __int8 v49; // of\n  char v50; // cl\n  bool v51; // zf\n  bool v52; // sf\n  unsigned __int8 v53; // of\n  char v54; // dl\n  bool v55; // zf\n  bool v56; // sf\n  unsigned __int8 v57; // of\n  char v58; // cl\n  bool v59; // zf\n  bool v60; // sf\n  unsigned __int8 v61; // of\n  char v62; // dl\n  bool v63; // zf\n  bool v64; // sf\n  unsigned __int8 v65; // of\n  char v66; // cl\n  bool v67; // zf\n  bool v68; // sf\n  unsigned __int8 v69; // of\n  char v70; // dl\n  bool v71; // zf\n  bool v72; // sf\n  unsigned __int8 v73; // of\n  char v74; // cl\n  bool v75; // zf\n  bool v76; // sf\n  unsigned __int8 v77; // of\n  char v78; // dl\n  bool v79; // zf\n  bool v80; // sf\n  unsigned __int8 v81; // of\n  char v82; // cl\n  bool v83; // zf\n  bool v84; // sf\n  unsigned __int8 v85; // of\n  char v86; // dl\n  bool v87; // zf\n  bool v88; // sf\n  unsigned __int8 v89; // of\n  char v90; // cl\n  bool v91; // zf\n  bool v92; // sf\n  unsigned __int8 v93; // of\n  char v94; // dl\n  bool v95; // zf\n  bool v96; // sf\n  unsigned __int8 v97; // of\n  char v98; // cl\n  bool v99; // zf\n  bool v100; // sf\n  unsigned __int8 v101; // of\n  char v102; // dl\n  bool v103; // zf\n  bool v104; // sf\n  unsigned __int8 v105; // of\n  char v106; // cl\n  char v107; // dl\n  __int64 v108; // rax\n  __int64 result; // rax\n  int v110[61]; // [rsp+0h] [rbp-1BCh]\n  int v111; // [rsp+F4h] [rbp-C8h]\n  float v112; // [rsp+F8h] [rbp-C4h]\n  __int64 v113; // [rsp+FCh] [rbp-C0h]\n  __int128 v114; // [rsp+104h] [rbp-B8h]\n  __int128 v115; // [rsp+114h] [rbp-A8h]\n  __int128 v116; // [rsp+124h] [rbp-98h]\n  __int128 v117; // [rsp+134h] [rbp-88h]\n  __int128 v118; // [rsp+144h] [rbp-78h]\n  char v119[28]; // [rsp+154h] [rbp-68h]\n  __int64 v120; // [rsp+174h] [rbp-48h]\n  _QWORD *v121; // [rsp+17Ch] [rbp-40h]\n  __int64 v122; // [rsp+184h] [rbp-38h]\n\n  v3 = a3;\n  v121 = (_QWORD *)a1;\n  v113 = sub_4382F0(\"aligneval.c\", 485LL, (signed int)(a3 + 1));\n  if ( (signed int)v3 <= 0 )\n  {\n    v111 = 0;\n  }\n  else\n  {\n    v112 = (float)a2;\n    v120 = (unsigned int)a2;\n    v122 = v3;\n    v4 = 0LL;\n    v111 = 0;\n    do\n    {\n      *(_OWORD *)&v119[12] = 0LL;\n      *(_OWORD *)v119 = 0LL;\n      v118 = 0LL;\n      v117 = 0LL;\n      v116 = 0LL;\n      v115 = 0LL;\n      v114 = 0LL;\n      v5 = 0;\n      if ( a2 > 0 )\n      {\n        v6 = *__ctype_b_loc();\n        v7 = v120;\n        v8 = v121;\n        do\n        {\n          v9 = *(char *)(*v8 + v4);\n          if ( v6[v9] & 0x400 )\n          {\n            if ( (unsigned int)(v9 + 128) <= 0x17F )\n              LODWORD(v9) = (*__ctype_toupper_loc())[v9];\n            ++v110[(signed int)v9];\n          }\n          else\n          {\n            ++*(_DWORD *)&v119[24];\n          }\n          ++v8;\n          --v7;\n        }\n        while ( v7 );\n        v5 = *(_DWORD *)&v119[24];\n      }\n      if ( (float)((float)v5 / v112) <= 0.5 )\n      {\n        v10 = -1;\n        if ( (signed int)v114 > -2 )\n          v10 = v114;\n        v13 = __OFSUB__(DWORD1(v114), v10);\n        v11 = DWORD1(v114) == v10;\n        v12 = DWORD1(v114) - v10 < 0;\n        if ( SDWORD1(v114) >= v10 )\n          v10 = DWORD1(v114);\n        v14 = 66;\n        if ( (unsigned __int8)(v12 ^ v13) | v11 )\n          v14 = 65 - ((signed int)v114 < 0);\n        v17 = __OFSUB__(DWORD2(v114), v10);\n        v15 = DWORD2(v114) == v10;\n        v16 = DWORD2(v114) - v10 < 0;\n        if ( SDWORD2(v114) >= v10 )\n          v10 = DWORD2(v114);\n        v18 = 67;\n        if ( (unsigned __int8)(v16 ^ v17) | v15 )\n          v18 = v14;\n        v21 = __OFSUB__(HIDWORD(v114), v10);\n        v19 = HIDWORD(v114) == v10;\n        v20 = HIDWORD(v114) - v10 < 0;\n        if ( SHIDWORD(v114) >= v10 )\n          v10 = HIDWORD(v114);\n        v22 = 68;\n        if ( (unsigned __int8)(v20 ^ v21) | v19 )\n          v22 = v18;\n        v25 = __OFSUB__((_DWORD)v115, v10);\n        v23 = (_DWORD)v115 == v10;\n        v24 = (signed int)v115 - v10 < 0;\n        if ( (signed int)v115 >= v10 )\n          v10 = v115;\n        v26 = 69;\n        if ( (unsigned __int8)(v24 ^ v25) | v23 )\n          v26 = v22;\n        v29 = __OFSUB__(DWORD1(v115), v10);\n        v27 = DWORD1(v115) == v10;\n        v28 = DWORD1(v115) - v10 < 0;\n        if ( SDWORD1(v115) >= v10 )\n          v10 = DWORD1(v115);\n        v30 = 70;\n        if ( (unsigned __int8)(v28 ^ v29) | v27 )\n          v30 = v26;\n        v33 = __OFSUB__(DWORD2(v115), v10);\n        v31 = DWORD2(v115) == v10;\n        v32 = DWORD2(v115) - v10 < 0;\n        if ( SDWORD2(v115) >= v10 )\n          v10 = DWORD2(v115);\n        v34 = 71;\n        if ( (unsigned __int8)(v32 ^ v33) | v31 )\n          v34 = v30;\n        v37 = __OFSUB__(HIDWORD(v115), v10);\n        v35 = HIDWORD(v115) == v10;\n        v36 = HIDWORD(v115) - v10 < 0;\n        if ( SHIDWORD(v115) >= v10 )\n          v10 = HIDWORD(v115);\n        v38 = 72;\n        if ( (unsigned __int8)(v36 ^ v37) | v35 )\n          v38 = v34;\n        v41 = __OFSUB__((_DWORD)v116, v10);\n        v39 = (_DWORD)v116 == v10;\n        v40 = (signed int)v116 - v10 < 0;\n        if ( (signed int)v116 >= v10 )\n          v10 = v116;\n        v42 = 73;\n        if ( (unsigned __int8)(v40 ^ v41) | v39 )\n          v42 = v38;\n        v45 = __OFSUB__(DWORD1(v116), v10);\n        v43 = DWORD1(v116) == v10;\n        v44 = DWORD1(v116) - v10 < 0;\n        if ( SDWORD1(v116) >= v10 )\n          v10 = DWORD1(v116);\n        v46 = 74;\n        if ( (unsigned __int8)(v44 ^ v45) | v43 )\n          v46 = v42;\n        v49 = __OFSUB__(DWORD2(v116), v10);\n        v47 = DWORD2(v116) == v10;\n        v48 = DWORD2(v116) - v10 < 0;\n        if ( SDWORD2(v116) >= v10 )\n          v10 = DWORD2(v116);\n        v50 = 75;\n        if ( (unsigned __int8)(v48 ^ v49) | v47 )\n          v50 = v46;\n        v53 = __OFSUB__(HIDWORD(v116), v10);\n        v51 = HIDWORD(v116) == v10;\n        v52 = HIDWORD(v116) - v10 < 0;\n        if ( SHIDWORD(v116) >= v10 )\n          v10 = HIDWORD(v116);\n        v54 = 76;\n        if ( (unsigned __int8)(v52 ^ v53) | v51 )\n          v54 = v50;\n        v57 = __OFSUB__((_DWORD)v117, v10);\n        v55 = (_DWORD)v117 == v10;\n        v56 = (signed int)v117 - v10 < 0;\n        if ( (signed int)v117 >= v10 )\n          v10 = v117;\n        v58 = 77;\n        if ( (unsigned __int8)(v56 ^ v57) | v55 )\n          v58 = v54;\n        v61 = __OFSUB__(DWORD1(v117), v10);\n        v59 = DWORD1(v117) == v10;\n        v60 = DWORD1(v117) - v10 < 0;\n        if ( SDWORD1(v117) >= v10 )\n          v10 = DWORD1(v117);\n        v62 = 78;\n        if ( (unsigned __int8)(v60 ^ v61) | v59 )\n          v62 = v58;\n        v65 = __OFSUB__(DWORD2(v117), v10);\n        v63 = DWORD2(v117) == v10;\n        v64 = DWORD2(v117) - v10 < 0;\n        if ( SDWORD2(v117) >= v10 )\n          v10 = DWORD2(v117);\n        v66 = 79;\n        if ( (unsigned __int8)(v64 ^ v65) | v63 )\n          v66 = v62;\n        v69 = __OFSUB__(HIDWORD(v117), v10);\n        v67 = HIDWORD(v117) == v10;\n        v68 = HIDWORD(v117) - v10 < 0;\n        if ( SHIDWORD(v117) >= v10 )\n          v10 = HIDWORD(v117);\n        v70 = 80;\n        if ( (unsigned __int8)(v68 ^ v69) | v67 )\n          v70 = v66;\n        v73 = __OFSUB__((_DWORD)v118, v10);\n        v71 = (_DWORD)v118 == v10;\n        v72 = (signed int)v118 - v10 < 0;\n        if ( (signed int)v118 >= v10 )\n          v10 = v118;\n        v74 = 81;\n        if ( (unsigned __int8)(v72 ^ v73) | v71 )\n          v74 = v70;\n        v77 = __OFSUB__(DWORD1(v118), v10);\n        v75 = DWORD1(v118) == v10;\n        v76 = DWORD1(v118) - v10 < 0;\n        if ( SDWORD1(v118) >= v10 )\n          v10 = DWORD1(v118);\n        v78 = 82;\n        if ( (unsigned __int8)(v76 ^ v77) | v75 )\n          v78 = v74;\n        v81 = __OFSUB__(DWORD2(v118), v10);\n        v79 = DWORD2(v118) == v10;\n        v80 = DWORD2(v118) - v10 < 0;\n        if ( SDWORD2(v118) >= v10 )\n          v10 = DWORD2(v118);\n        v82 = 83;\n        if ( (unsigned __int8)(v80 ^ v81) | v79 )\n          v82 = v78;\n        v85 = __OFSUB__(HIDWORD(v118), v10);\n        v83 = HIDWORD(v118) == v10;\n        v84 = HIDWORD(v118) - v10 < 0;\n        if ( SHIDWORD(v118) >= v10 )\n          v10 = HIDWORD(v118);\n        v86 = 84;\n        if ( (unsigned __int8)(v84 ^ v85) | v83 )\n          v86 = v82;\n        v89 = __OFSUB__(*(_DWORD *)v119, v10);\n        v87 = *(_DWORD *)v119 == v10;\n        v88 = *(_DWORD *)v119 - v10 < 0;\n        if ( *(_DWORD *)v119 >= v10 )\n          v10 = *(_DWORD *)v119;\n        v90 = 85;\n        if ( (unsigned __int8)(v88 ^ v89) | v87 )\n          v90 = v86;\n        v93 = __OFSUB__(*(_DWORD *)&v119[4], v10);\n        v91 = *(_DWORD *)&v119[4] == v10;\n        v92 = *(_DWORD *)&v119[4] - v10 < 0;\n        if ( *(_DWORD *)&v119[4] >= v10 )\n          v10 = *(_DWORD *)&v119[4];\n        v94 = 86;\n        if ( (unsigned __int8)(v92 ^ v93) | v91 )\n          v94 = v90;\n        v97 = __OFSUB__(*(_DWORD *)&v119[8], v10);\n        v95 = *(_DWORD *)&v119[8] == v10;\n        v96 = *(_DWORD *)&v119[8] - v10 < 0;\n        if ( *(_DWORD *)&v119[8] >= v10 )\n          v10 = *(_DWORD *)&v119[8];\n        v98 = 87;\n        if ( (unsigned __int8)(v96 ^ v97) | v95 )\n          v98 = v94;\n        v101 = __OFSUB__(*(_DWORD *)&v119[12], v10);\n        v99 = *(_DWORD *)&v119[12] == v10;\n        v100 = *(_DWORD *)&v119[12] - v10 < 0;\n        if ( *(_DWORD *)&v119[12] >= v10 )\n          v10 = *(_DWORD *)&v119[12];\n        v102 = 88;\n        if ( (unsigned __int8)(v100 ^ v101) | v99 )\n          v102 = v98;\n        v105 = __OFSUB__(*(_DWORD *)&v119[16], v10);\n        v103 = *(_DWORD *)&v119[16] == v10;\n        v104 = *(_DWORD *)&v119[16] - v10 < 0;\n        if ( *(_DWORD *)&v119[16] >= v10 )\n          v10 = *(_DWORD *)&v119[16];\n        v106 = 89;\n        if ( (unsigned __int8)(v104 ^ v105) | v103 )\n          v106 = v102;\n        v107 = 90;\n        if ( *(_DWORD *)&v119[20] <= v10 )\n          v107 = v106;\n        v108 = v111++;\n        *(_BYTE *)(v113 + v108) = v107;\n      }\n      ++v4;\n    }\n    while ( v4 != v122 );\n  }\n  result = v113;\n  *(_BYTE *)(v113 + v111) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4242c0L", 
            "funcEndAddr": "0x4245c4L", 
            "funcName": "sub_4242C0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_4245D0(unsigned int a1, int a2, __int64 *a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  char v5; // r13\n  __int64 v6; // r15\n  _QWORD *v7; // r12\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // rsi\n  __int64 v12; // rdx\n  _DWORD *v13; // rdi\n  _DWORD *v14; // rax\n  __int64 v15; // rcx\n  __int64 *result; // rax\n  __int64 v17; // [rsp+8h] [rbp-40h]\n  __int64 *v18; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  *(_DWORD *)a4 = 0;\n  *(_OWORD *)(a4 + 24) = 0LL;\n  *(_OWORD *)(a4 + 80) = 0LL;\n  *(_OWORD *)(a4 + 64) = 0LL;\n  *(_OWORD *)(a4 + 48) = 0LL;\n  v18 = a3;\n  v5 = a1;\n  *(_QWORD *)(a4 + 96) = 0LL;\n  v17 = sub_4382F0(\"alignio.c\", 50LL, 8LL * (signed int)a1);\n  if ( (signed int)a1 > 0 )\n  {\n    v6 = a1;\n    v7 = (_QWORD *)v17;\n    do\n    {\n      *v7 = sub_4382F0(\"alignio.c\", 52LL, a2 + 1);\n      ++v7;\n      --v6;\n    }\n    while ( v6 );\n  }\n  *(_DWORD *)(v4 + 4) = a2;\n  *(_DWORD *)(v4 + 8) = a1;\n  v8 = sub_4382F0(\"alignio.c\", 57LL, 4LL * (signed int)a1);\n  *(_QWORD *)(v4 + 16) = v8;\n  sub_43C860(v8, a1);\n  v9 = sub_4382F0(\"alignio.c\", 60LL, 360LL * (signed int)a1);\n  *(_QWORD *)(v4 + 40) = v9;\n  if ( (signed int)a1 > 0 )\n  {\n    v10 = a1 & 3;\n    if ( (unsigned __int64)a1 - 1 < 3 )\n    {\n      v11 = 0LL;\n      if ( !(a1 & 3) )\n        goto LABEL_13;\n      goto LABEL_11;\n    }\n    v12 = a1 - v10;\n    v11 = 0LL;\n    v13 = (_DWORD *)v9;\n    do\n    {\n      *v13 = 0;\n      v13[90] = 0;\n      v13[180] = 0;\n      v13[270] = 0;\n      v11 += 4LL;\n      v13 += 360;\n    }\n    while ( v12 != v11 );\n    if ( v5 & 3 )\n    {\nLABEL_11:\n      v14 = (_DWORD *)(360 * v11 + v9);\n      v15 = -v10;\n      do\n      {\n        *v14 = 0;\n        v14 += 90;\n        ++v15;\n      }\n      while ( v15 );\n      goto LABEL_13;\n    }\n  }\nLABEL_13:\n  result = v18;\n  *v18 = v17;\n  return result;\n}\n", 
            "funcStartAddr": "0x4245d0L", 
            "funcEndAddr": "0x42476eL", 
            "funcName": "sub_4245D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_424770(__int64 a1)\n{\n  *(_DWORD *)a1 = 0;\n  *(_OWORD *)(a1 + 24) = 0LL;\n  *(_OWORD *)(a1 + 80) = 0LL;\n  *(_OWORD *)(a1 + 64) = 0LL;\n  *(_OWORD *)(a1 + 48) = 0LL;\n  *(_QWORD *)(a1 + 96) = 0LL;\n}\n", 
            "funcStartAddr": "0x424770L", 
            "funcEndAddr": "0x424792L", 
            "funcName": "sub_424770"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4247A0(void *ptr, __int64 a2)\n{\n  void *v2; // r14\n  __int64 v3; // rbx\n  signed __int64 v4; // r12\n  __int64 v5; // rax\n  int v6; // ecx\n  void *v7; // rdi\n  void *v8; // rdi\n  void *v9; // rdi\n  void *v10; // rdi\n  void *v11; // rdi\n  void *v12; // rdi\n  __int64 v13; // rsi\n\n  v2 = ptr;\n  if ( *(_DWORD *)(a2 + 8) > 0 )\n  {\n    v3 = 0LL;\n    v4 = 0LL;\n    do\n    {\n      v5 = *(_QWORD *)(a2 + 40);\n      v6 = *(_DWORD *)(v5 + v3);\n      if ( v6 & 0x200 )\n      {\n        free(*(void **)(v5 + v3 + 344));\n        v5 = *(_QWORD *)(a2 + 40);\n        v6 = *(_DWORD *)(v5 + v3);\n      }\n      if ( v6 & 0x400 )\n        free(*(void **)(v5 + v3 + 352));\n      ++v4;\n      v3 += 360LL;\n    }\n    while ( v4 < *(signed int *)(a2 + 8) );\n  }\n  v7 = *(void **)(a2 + 24);\n  if ( v7 )\n    free(v7);\n  v8 = *(void **)(a2 + 32);\n  if ( v8 )\n    free(v8);\n  v9 = *(void **)(a2 + 48);\n  if ( v9 )\n    free(v9);\n  v10 = *(void **)(a2 + 56);\n  if ( v10 )\n    free(v10);\n  v11 = *(void **)(a2 + 64);\n  if ( v11 )\n    free(v11);\n  v12 = *(void **)(a2 + 72);\n  if ( v12 )\n    free(v12);\n  free(*(void **)(a2 + 40));\n  free(*(void **)(a2 + 16));\n  v13 = *(unsigned int *)(a2 + 8);\n  return sub_438390(v2);\n}\n", 
            "funcStartAddr": "0x4247a0L", 
            "funcEndAddr": "0x424883L", 
            "funcName": "sub_4247A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_424890(_QWORD *a1, unsigned int a2, unsigned int a3)\n{\n  __int64 v3; // r12\n  signed __int64 v4; // r14\n  __int64 v5; // rdx\n  unsigned __int8 v6; // bl\n  __int64 v7; // rdx\n  unsigned __int8 v8; // al\n  __int64 v9; // rcx\n  __int64 v10; // r13\n  _QWORD *v11; // rbx\n  char v12; // al\n  unsigned __int8 v13; // cl\n  __int64 v14; // rax\n  signed int v15; // ecx\n  char v16; // r8\n  __int64 v17; // rcx\n  char v18; // dl\n  signed int v19; // [rsp+Ch] [rbp-5Ch]\n  signed int v20; // [rsp+10h] [rbp-58h]\n  int v21; // [rsp+14h] [rbp-54h]\n  __int64 v22; // [rsp+18h] [rbp-50h]\n  __int64 v23; // [rsp+20h] [rbp-48h]\n  __int64 v24; // [rsp+28h] [rbp-40h]\n  __int64 v25; // [rsp+30h] [rbp-38h]\n\n  if ( (signed int)a3 > 0 )\n  {\n    v25 = a3;\n    v24 = a2;\n    v22 = a2 & 1;\n    v3 = 0LL;\n    v4 = -9223372036854751231LL;\n    v21 = a2;\n    v23 = a2 - v22;\n    do\n    {\n      if ( (signed int)a2 > 0 )\n      {\n        v20 = 0;\n        v10 = v24;\n        v11 = a1;\n        v19 = 0;\n        do\n        {\n          v12 = *(_BYTE *)(*v11 + v3);\n          v13 = *(_BYTE *)(*v11 + v3) - 32;\n          if ( (v13 > 0x3Fu || !_bittest64(&v4, v13)) && v12 != 126 )\n          {\n            v14 = (*__ctype_b_loc())[v12];\n            if ( _bittest((const signed int *)&v14, 8u) )\n            {\n              v20 = 1;\n            }\n            else\n            {\n              v15 = v19;\n              if ( v14 & 0x200 )\n                v15 = 1;\n              v19 = v15;\n            }\n          }\n          ++v11;\n          --v10;\n        }\n        while ( v10 );\n        a2 = v21;\n        if ( v21 > 0 )\n        {\n          v16 = 46 - (v20 != 0 || v19 == 0);\n          v9 = 0LL;\n          if ( v21 != 1 )\n          {\n            do\n            {\n              v5 = a1[v9];\n              v6 = *(_BYTE *)(v5 + v3) - 32;\n              if ( v6 <= 0x3Fu && _bittest64(&v4, v6) || *(_BYTE *)(v5 + v3) == 126 )\n                *(_BYTE *)(v5 + v3) = v16;\n              v7 = a1[v9 + 1];\n              v8 = *(_BYTE *)(v7 + v3) - 32;\n              if ( v8 <= 0x3Fu && _bittest64(&v4, v8) || *(_BYTE *)(v7 + v3) == 126 )\n                *(_BYTE *)(v7 + v3) = v16;\n              v9 += 2LL;\n            }\n            while ( v23 != v9 );\n          }\n          if ( v22 )\n          {\n            if ( (v17 = a1[v9], v18 = *(_BYTE *)(v17 + v3), (unsigned __int8)(v18 - 32) <= 0x3Fu)\n              && _bittest64(&v4, (unsigned __int8)(v18 - 32))\n              || v18 == 126 )\n            {\n              *(_BYTE *)(v17 + v3) = v16;\n            }\n          }\n        }\n      }\n      ++v3;\n    }\n    while ( v3 != v25 );\n  }\n}\n", 
            "funcStartAddr": "0x424890L", 
            "funcEndAddr": "0x424a5eL", 
            "funcName": "sub_424890"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_424A60(__int64 *a1, signed int a2, unsigned int a3, float a4)\n{\n  __int64 *v4; // r14\n  __int64 v5; // rcx\n  __int64 v6; // rdi\n  __int64 v7; // r12\n  signed __int64 v8; // r8\n  signed int v9; // ebp\n  __int64 v10; // rcx\n  char v11; // bl\n  char v12; // bl\n  char v13; // bl\n  char v14; // bl\n  __int64 *v15; // rcx\n  __int64 v16; // rdx\n  unsigned __int8 v17; // bl\n  __int64 v18; // r15\n  __int64 *v19; // rbp\n  __int64 v20; // r13\n  const __int32_t **v21; // rax\n  char v22; // al\n  __int64 v23; // rbx\n  char v24; // cl\n  unsigned __int8 v25; // dl\n  __int64 v26; // rbp\n  __int64 *v27; // rbx\n  __int64 v28; // r13\n  const __int32_t **v29; // rax\n  char v30; // al\n  __int64 v31; // r15\n  char v32; // cl\n  unsigned __int8 v33; // dl\n  float v34; // [rsp+Ch] [rbp-6Ch]\n  signed int v35; // [rsp+10h] [rbp-68h]\n  __int64 v36; // [rsp+18h] [rbp-60h]\n  __int64 v37; // [rsp+20h] [rbp-58h]\n  __int64 v38; // [rsp+28h] [rbp-50h]\n  unsigned __int64 v39; // [rsp+30h] [rbp-48h]\n  __int64 v40; // [rsp+38h] [rbp-40h]\n  __int64 v41; // [rsp+40h] [rbp-38h]\n\n  v4 = a1;\n  if ( (signed int)a3 > 0 )\n  {\n    v34 = (float)a2;\n    v41 = a3;\n    v39 = (unsigned int)a2 - 1LL;\n    v5 = a2 & 3;\n    v36 = (unsigned int)a2;\n    v6 = (unsigned int)a2 - v5;\n    v38 = a2 & 3;\n    v37 = -v5;\n    v7 = 0LL;\n    v8 = -9223372036854751231LL;\n    v35 = a2;\n    v40 = (unsigned int)a2 - v5;\n    do\n    {\n      v9 = 0;\n      if ( a2 > 0 )\n      {\n        if ( v39 >= 3 )\n        {\n          v10 = 0LL;\n          v9 = 0;\n          do\n          {\n            v11 = *(_BYTE *)(v4[v10] + v7);\n            if ( (unsigned __int8)(v11 - 32) <= 0x3Fu && _bittest64(&v8, (unsigned __int8)(v11 - 32)) || v11 == 126 )\n              ++v9;\n            v12 = *(_BYTE *)(v4[v10 + 1] + v7);\n            if ( (unsigned __int8)(v12 - 32) <= 0x3Fu && _bittest64(&v8, (unsigned __int8)(v12 - 32)) || v12 == 126 )\n              ++v9;\n            v13 = *(_BYTE *)(v4[v10 + 2] + v7);\n            if ( (unsigned __int8)(v13 - 32) <= 0x3Fu && _bittest64(&v8, (unsigned __int8)(v13 - 32)) || v13 == 126 )\n              ++v9;\n            v14 = *(_BYTE *)(v4[v10 + 3] + v7);\n            if ( (unsigned __int8)(v14 - 32) <= 0x3Fu && _bittest64(&v8, (unsigned __int8)(v14 - 32)) || v14 == 126 )\n              ++v9;\n            v10 += 4LL;\n          }\n          while ( v6 != v10 );\n          if ( !v38 )\n            goto LABEL_36;\nLABEL_30:\n          v15 = &v4[v10];\n          v16 = v37;\n          do\n          {\n            v17 = *(_BYTE *)(*v15 + v7) - 32;\n            if ( v17 <= 0x3Fu && _bittest64(&v8, v17) || *(_BYTE *)(*v15 + v7) == 126 )\n              ++v9;\n            ++v15;\n            ++v16;\n          }\n          while ( v16 );\n          goto LABEL_36;\n        }\n        v10 = 0LL;\n        v9 = 0;\n        if ( v38 )\n          goto LABEL_30;\n      }\nLABEL_36:\n      if ( (float)((float)v9 / v34) <= a4 )\n      {\n        if ( a2 > 0 )\n        {\n          v26 = v36;\n          v27 = v4;\n          do\n          {\n            v31 = *v27;\n            v32 = *(_BYTE *)(*v27 + v7);\n            v30 = 45;\n            v33 = *(_BYTE *)(*v27 + v7) - 32;\n            if ( (v33 > 0x3Fu || !_bittest64(&v8, v33)) && v32 != 126 )\n            {\n              v28 = v32;\n              v29 = __ctype_toupper_loc();\n              v8 = -9223372036854751231LL;\n              v30 = (*v29)[v28];\n            }\n            *(_BYTE *)(v31 + v7) = v30;\n            ++v27;\n            --v26;\n          }\n          while ( v26 );\n        }\n      }\n      else if ( a2 > 0 )\n      {\n        v18 = v36;\n        v19 = v4;\n        do\n        {\n          v23 = *v19;\n          v24 = *(_BYTE *)(*v19 + v7);\n          v22 = 46;\n          v25 = *(_BYTE *)(*v19 + v7) - 32;\n          if ( (v25 > 0x3Fu || !_bittest64(&v8, v25)) && v24 != 126 )\n          {\n            v20 = v24;\n            v21 = __ctype_tolower_loc();\n            v8 = -9223372036854751231LL;\n            v22 = (*v21)[v20];\n          }\n          *(_BYTE *)(v23 + v7) = v22;\n          ++v19;\n          --v18;\n        }\n        while ( v18 );\n      }\n      ++v7;\n      a2 = v35;\n      v6 = v40;\n    }\n    while ( v7 != v41 );\n  }\n}\n", 
            "funcStartAddr": "0x424a60L", 
            "funcEndAddr": "0x424d62L", 
            "funcName": "sub_424A60"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_424D70(__int64 a1, unsigned int a2, const char *a3, _QWORD *a4)\n{\n  _QWORD *v4; // r14\n  const char *v5; // r15\n  char v6; // r13\n  __int64 v7; // rbx\n  _BYTE *v8; // r12\n  __int64 v9; // r8\n  __int64 v10; // r9\n  __int64 v11; // rdx\n  int v12; // esi\n  __int64 v13; // rdi\n  signed __int64 v14; // r10\n  unsigned __int8 v15; // al\n  unsigned __int8 v16; // cl\n  char v17; // al\n  signed __int64 v18; // rdi\n  signed __int64 result; // rax\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v8 = (_BYTE *)sub_4382F0(\"alignio.c\", 242LL, (signed int)(a2 + 1));\n  if ( (signed int)a2 <= 0 )\n  {\n    v12 = 0;\n    v9 = 0LL;\n    goto LABEL_22;\n  }\n  v9 = a2;\n  v10 = a2 & 1;\n  if ( a2 == 1 )\n  {\n    v11 = 0LL;\n    v12 = 0;\n    if ( !v10 )\n      goto LABEL_22;\n    goto LABEL_19;\n  }\n  v13 = a2 - v10;\n  v11 = 0LL;\n  v14 = -9223372036854751231LL;\n  v12 = 0;\n  do\n  {\n    v15 = *(_BYTE *)(v7 + v11) - 32;\n    if ( v15 <= 0x3Fu && _bittest64(&v14, v15) || *(_BYTE *)(v7 + v11) == 126 )\n      v8[v11] = 46;\n    else\n      v8[v11] = v5[v12++];\n    v16 = *(_BYTE *)(v7 + v11 + 1) - 32;\n    if ( v16 <= 0x3Fu && _bittest64(&v14, v16) || *(_BYTE *)(v7 + v11 + 1) == 126 )\n      v8[v11 + 1] = 46;\n    else\n      v8[v11 + 1] = v5[v12++];\n    v11 += 2LL;\n  }\n  while ( v13 != v11 );\n  if ( v6 & 1 )\n  {\nLABEL_19:\n    v17 = *(_BYTE *)(v7 + v11);\n    if ( (unsigned __int8)(v17 - 32) <= 0x3Fu\n      && (v18 = -9223372036854751231LL, _bittest64(&v18, (unsigned __int8)(v17 - 32)))\n      || v17 == 126 )\n    {\n      v8[v11] = 46;\n    }\n    else\n    {\n      v8[v11] = v5[v12++];\n    }\n  }\nLABEL_22:\n  v8[v9] = 0;\n  if ( strlen(v5) == v12 )\n  {\n    *v4 = v8;\n    result = 1LL;\n  }\n  else\n  {\n    dword_464008 = 6;\n    free(v8);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x424d70L", 
            "funcEndAddr": "0x424eecL", 
            "funcName": "sub_424D70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_424EF0(__int64 a1, unsigned int a2, const char *a3, _QWORD *a4)\n{\n  _QWORD *v4; // r14\n  const char *v5; // r12\n  unsigned int v6; // er15\n  __int64 v7; // rbx\n  _BYTE *v8; // r13\n  __int64 v9; // rcx\n  __int64 v10; // rdi\n  unsigned __int64 v11; // rsi\n  signed __int64 v12; // r9\n  unsigned __int8 v13; // dl\n  unsigned __int8 v14; // al\n  char v15; // dl\n  signed __int64 v16; // rsi\n  signed __int64 result; // rax\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = a1;\n  v8 = (_BYTE *)sub_4382F0(\"alignio.c\", 280LL, (signed int)(a2 + 1));\n  if ( (signed int)a2 <= 0 )\n  {\n    LODWORD(v10) = 0;\n    goto LABEL_21;\n  }\n  if ( a2 == 1 )\n  {\n    v9 = 0LL;\n    LODWORD(v10) = 0;\nLABEL_17:\n    v15 = *(_BYTE *)(v7 + v9);\n    if ( (unsigned __int8)(v15 - 32) > 0x3Fu\n      || (v16 = -9223372036854751231LL, !_bittest64(&v16, (unsigned __int8)(v15 - 32))) )\n    {\n      if ( v15 != 126 )\n      {\n        v10 = (signed int)v10;\n        v8[v10] = v5[v9];\n        LODWORD(v10) = v10 + 1;\n      }\n    }\n    goto LABEL_21;\n  }\n  v11 = a2 - (unsigned __int64)(a2 & 1);\n  v9 = 0LL;\n  v12 = -9223372036854751231LL;\n  LODWORD(v10) = 0;\n  do\n  {\n    v13 = *(_BYTE *)(v7 + v9) - 32;\n    if ( (v13 > 0x3Fu || !_bittest64(&v12, v13)) && *(_BYTE *)(v7 + v9) != 126 )\n    {\n      v10 = (signed int)v10;\n      v8[v10] = v5[v9];\n      LODWORD(v10) = v10 + 1;\n    }\n    v14 = *(_BYTE *)(v7 + v9 + 1) - 32;\n    if ( (v14 > 0x3Fu || !_bittest64(&v12, v14)) && *(_BYTE *)(v7 + v9 + 1) != 126 )\n    {\n      v10 = (signed int)v10;\n      v8[v10] = v5[v9 + 1];\n      LODWORD(v10) = v10 + 1;\n    }\n    v9 += 2LL;\n  }\n  while ( v11 != v9 );\n  if ( v6 & 1 )\n    goto LABEL_17;\nLABEL_21:\n  v8[(signed int)v10] = 0;\n  if ( strlen(v5) == v6 )\n  {\n    *v4 = v8;\n    result = 1LL;\n  }\n  else\n  {\n    dword_464008 = 6;\n    free(v8);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x424ef0L", 
            "funcEndAddr": "0x42504eL", 
            "funcName": "sub_424EF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_425050(char *a1)\n{\n  __int64 result; // rax\n  char v2; // cl\n\n  result = 0LL;\n  while ( 1 )\n  {\n    v2 = *a1;\n    if ( *a1 <= 94 )\n      break;\n    if ( v2 != 95 && v2 != 126 )\n      goto LABEL_10;\nLABEL_2:\n    ++a1;\n  }\n  if ( (unsigned __int8)(v2 - 45) < 2u || v2 == 32 )\n    goto LABEL_2;\n  if ( v2 )\n  {\nLABEL_10:\n    result = (unsigned int)(result + 1);\n    goto LABEL_2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x425050L", 
            "funcEndAddr": "0x4250a0L", 
            "funcName": "sub_425050"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4250A0(FILE *a1, char *a2, const char *a3, __int64 a4, const char *a5, const char *a6, unsigned int a7, __int64 a8, unsigned int a9)\n{\n  const char *v9; // r13\n  const char *v10; // r12\n  __int64 v11; // r14\n  signed __int64 v12; // r15\n  const char *v13; // r13\n  unsigned int v14; // er12\n  unsigned int v15; // eax\n  signed int v16; // ecx\n  char *v17; // rcx\n  signed __int64 v18; // rsi\n  char v19; // cl\n  unsigned __int8 v20; // bl\n  char v21; // di\n  unsigned __int8 v22; // bl\n  int v23; // er10\n  int v24; // ebp\n  __int64 v25; // rdx\n  __int64 v26; // rsi\n  unsigned __int8 v27; // bl\n  unsigned __int8 v28; // cl\n  unsigned __int8 v29; // cl\n  unsigned __int8 v30; // cl\n  char *v31; // rsi\n  __int64 v32; // rdx\n  unsigned __int8 v33; // cl\n  __int64 v34; // r8\n  __int64 v35; // rdx\n  unsigned __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdi\n  __int64 v39; // rdx\n  unsigned __int8 v40; // cl\n  unsigned __int8 v41; // cl\n  unsigned __int8 v42; // cl\n  unsigned __int8 v43; // cl\n  char *v44; // rdx\n  __int64 v45; // rax\n  unsigned __int8 v46; // cl\n  unsigned int v47; // ST20_4\n  FILE *v48; // r13\n  int v49; // ebx\n  unsigned int v50; // ST10_4\n  __int64 v52; // [rsp+0h] [rbp-138h]\n  char *src; // [rsp+8h] [rbp-130h]\n  signed int v54; // [rsp+14h] [rbp-124h]\n  char s; // [rsp+1Ah] [rbp-11Eh]\n  char v56; // [rsp+24h] [rbp-114h]\n  char dest; // [rsp+25h] [rbp-113h]\n  char v58; // [rsp+2Fh] [rbp-109h]\n  FILE *stream; // [rsp+30h] [rbp-108h]\n  __int64 v60; // [rsp+38h] [rbp-100h]\n  char v61; // [rsp+40h] [rbp-F8h]\n  char v62; // [rsp+41h] [rbp-F7h]\n  char v63; // [rsp+42h] [rbp-F6h]\n  char v64[57]; // [rsp+43h] [rbp-F5h]\n  char v65; // [rsp+7Ch] [rbp-BCh]\n  char v66; // [rsp+80h] [rbp-B8h]\n  char v67; // [rsp+81h] [rbp-B7h]\n  char v68; // [rsp+82h] [rbp-B6h]\n  char v69[57]; // [rsp+83h] [rbp-B5h]\n  char v70; // [rsp+BCh] [rbp-7Ch]\n  char v71[120]; // [rsp+C0h] [rbp-78h]\n\n  v9 = a6;\n  v10 = a5;\n  v52 = a4;\n  src = a2;\n  stream = a1;\n  v11 = a7;\n  strncpy(&dest, a3, 0xAuLL);\n  v58 = 0;\n  strtok(&dest, \" \\t\\n\");\n  strncpy(&s, v9, 0xAuLL);\n  v56 = 0;\n  strtok(&s, \" \\t\\n\");\n  v12 = -9223372036854751231LL;\n  do\n  {\n    strncpy(&v66, src, 0x3CuLL);\n    v70 = 0;\n    v13 = v10;\n    strncpy(&v61, v10, 0x3CuLL);\n    v65 = 0;\n    v14 = strlen(&v66);\n    v15 = strlen(&v61);\n    if ( v14 == 60 && src[60] || (v16 = 0, v15 == 60) && v13[60] )\n      v16 = 1;\n    v54 = v16;\n    v60 = v11;\n    v17 = v71;\n    if ( (signed int)v14 > 0 )\n    {\n      v17 = v71;\n      if ( (signed int)v15 > 0 )\n      {\n        v18 = 0LL;\n        while ( 1 )\n        {\n          v19 = *(&v66 + v18);\n          v20 = *(&v66 + v18) - 32;\n          if ( v20 <= 0x3Fu && _bittest64(&v12, v20) )\n            goto LABEL_86;\n          if ( v19 == 126 )\n            goto LABEL_86;\n          v21 = *(&v61 + v18);\n          v22 = *(&v61 + v18) - 32;\n          if ( v22 <= 0x3Fu )\n          {\n            if ( _bittest64(&v12, v22) )\n              goto LABEL_86;\n          }\n          if ( v21 == 126 )\n            goto LABEL_86;\n          if ( v19 == v21 )\n          {\n            v71[v18] = v19;\n            goto LABEL_21;\n          }\n          if ( *(_DWORD *)(*(_QWORD *)(a8 + 8LL * v19 - 520) + 4LL * v21 - 260) <= 0 )\nLABEL_86:\n            v71[v18] = 32;\n          else\n            v71[v18] = 43;\nLABEL_21:\n          if ( ++v18 >= (signed int)v14 || v18 >= (signed int)v15 )\n          {\n            v17 = &v71[v18];\n            break;\n          }\n        }\n      }\n    }\n    *v17 = 0;\n    v23 = 0;\n    v24 = 0;\n    if ( (signed int)v14 > 0 )\n    {\n      v25 = v14 & 3;\n      if ( (unsigned __int64)v14 - 1 < 3 )\n      {\n        v26 = 0LL;\n        v24 = 0;\n        if ( !(v14 & 3) )\n          goto LABEL_53;\nLABEL_47:\n        v31 = &v66 + v26;\n        v32 = -v25;\n        do\n        {\n          v33 = *v31 - 32;\n          if ( (v33 > 0x3Fu || !_bittest64(&v12, v33)) && *v31 != 126 )\n            ++v24;\n          ++v31;\n          ++v32;\n        }\n        while ( v32 );\n        goto LABEL_53;\n      }\n      v26 = 0LL;\n      v24 = 0;\n      do\n      {\n        v27 = *(&v66 + v26) - 32;\n        if ( (v27 > 0x3Fu || !_bittest64(&v12, v27)) && *(&v66 + v26) != 126 )\n          ++v24;\n        v28 = *(&v67 + v26) - 32;\n        if ( (v28 > 0x3Fu || !_bittest64(&v12, v28)) && *(&v67 + v26) != 126 )\n          ++v24;\n        v29 = *(&v68 + v26) - 32;\n        if ( (v29 > 0x3Fu || !_bittest64(&v12, v29)) && *(&v68 + v26) != 126 )\n          ++v24;\n        v30 = v69[v26] - 32;\n        if ( (v30 > 0x3Fu || !_bittest64(&v12, v30)) && v69[v26] != 126 )\n          ++v24;\n        v26 += 4LL;\n      }\n      while ( v14 - v25 != v26 );\n      if ( v14 & 3 )\n        goto LABEL_47;\n    }\nLABEL_53:\n    v34 = (signed int)v15;\n    if ( (signed int)v15 <= 0 )\n      goto LABEL_82;\n    v35 = v15;\n    v36 = v15 - 1LL;\n    v37 = v15 & 3;\n    if ( v36 < 3 )\n    {\n      v38 = 0LL;\n      v23 = 0;\n      if ( !v37 )\n        goto LABEL_82;\nLABEL_76:\n      v44 = &v61 + v38;\n      v45 = -v37;\n      do\n      {\n        v46 = *v44 - 32;\n        if ( (v46 > 0x3Fu || !_bittest64(&v12, v46)) && *v44 != 126 )\n          ++v23;\n        ++v44;\n        ++v45;\n      }\n      while ( v45 );\n      goto LABEL_82;\n    }\n    v39 = v35 - v37;\n    v38 = 0LL;\n    v23 = 0;\n    do\n    {\n      v40 = *(&v61 + v38) - 32;\n      if ( (v40 > 0x3Fu || !_bittest64(&v12, v40)) && *(&v61 + v38) != 126 )\n        ++v23;\n      v41 = *(&v62 + v38) - 32;\n      if ( (v41 > 0x3Fu || !_bittest64(&v12, v41)) && *(&v62 + v38) != 126 )\n        ++v23;\n      v42 = *(&v63 + v38) - 32;\n      if ( (v42 > 0x3Fu || !_bittest64(&v12, v42)) && *(&v63 + v38) != 126 )\n        ++v23;\n      v43 = v64[v38] - 32;\n      if ( (v43 > 0x3Fu || !_bittest64(&v12, v43)) && v64[v38] != 126 )\n        ++v23;\n      v38 += 4LL;\n    }\n    while ( v39 != v38 );\n    if ( v37 )\n      goto LABEL_76;\nLABEL_82:\n    src += (signed int)v14;\n    v10 = &v13[v34];\n    v47 = v52 + v24;\n    v48 = stream;\n    v49 = v23;\n    fprintf(stream, \"%*s%-10.10s %5d %s %5d\\n\", a9, &unk_4409CD, &dest, &v66, (unsigned int)(v52 + v24 - 1));\n    fprintf(v48, \"%*s                 %s\\n\", a9, &unk_4409CD, v71, v52);\n    v50 = v49 + v60;\n    fprintf(v48, \"%*s%-10.10s %5d %s %5d\\n\", a9, &unk_4409CD, &s, &v61, (unsigned int)(v49 + v60 - 1));\n    fputc(10, v48);\n    v11 = v50;\n    v52 = v47;\n  }\n  while ( v54 );\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x4250a0L", 
            "funcEndAddr": "0x425603L", 
            "funcName": "sub_4250A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_425790(__int64 a1, __int64 a2, unsigned int a3, __int64 *a4, __int64 a5, float a6, float a7)\n{\n  unsigned int v7; // er12\n  __int64 v8; // r13\n  __int64 v9; // rbx\n  __int64 v10; // rbp\n  __int64 v11; // r14\n  __int64 v12; // rbx\n  signed int v13; // er15\n  signed int v14; // er12\n  signed int v15; // eax\n  double v16; // xmm0_8\n  int v17; // ebx\n  char **v18; // r14\n  __int64 v19; // rax\n  int v20; // ebx\n  signed __int64 v21; // r12\n  _DWORD *v22; // r15\n  __int64 v23; // rbp\n  char **v24; // rbx\n  const char *v25; // rdi\n  signed __int64 v26; // rsi\n  char *v27; // rax\n  double v28; // xmm0_8\n  __int64 v29; // rbx\n  signed int v30; // ebp\n  int v31; // er12\n  int v32; // ecx\n  __int64 v33; // rbp\n  __int64 v34; // rdx\n  int v35; // esi\n  __int64 v36; // rdi\n  int v37; // ebp\n  int v38; // ebp\n  int v39; // edi\n  bool v40; // sf\n  unsigned __int8 v41; // of\n  __int64 v42; // rbx\n  _QWORD *v43; // rbp\n  __int64 v44; // r12\n  _QWORD *v45; // r11\n  __int64 v46; // rdi\n  int v47; // er10\n  __int64 v48; // rbx\n  __int64 v49; // rcx\n  __int64 v50; // rcx\n  __int64 v51; // rdx\n  __int64 v52; // rax\n  __int64 v53; // r12\n  signed __int64 v54; // rbx\n  signed __int64 v55; // rbp\n  signed int v57; // [rsp+Ch] [rbp-9Ch]\n  __int64 v58; // [rsp+10h] [rbp-98h]\n  int v59; // [rsp+18h] [rbp-90h]\n  float v60; // [rsp+20h] [rbp-88h]\n  int v61; // [rsp+20h] [rbp-88h]\n  __int64 v62; // [rsp+30h] [rbp-78h]\n  _DWORD *ptr; // [rsp+40h] [rbp-68h]\n  __int64 v64; // [rsp+48h] [rbp-60h]\n  __int64 v65; // [rsp+50h] [rbp-58h]\n  __int64 v66; // [rsp+58h] [rbp-50h]\n  __int64 v67; // [rsp+68h] [rbp-40h]\n  __int64 *v68; // [rsp+70h] [rbp-38h]\n\n  v67 = a5;\n  v68 = a4;\n  v60 = a6;\n  v7 = a3;\n  v62 = a2;\n  v8 = a1;\n  v9 = (signed int)a3;\n  v10 = sub_4382F0(\"alignio.c\", 530LL, 4LL * (signed int)a3);\n  v64 = v9;\n  v57 = v7;\n  ptr = (_DWORD *)v10;\n  if ( (signed int)v9 <= 0 )\n  {\n    v13 = 9999999;\n    v16 = 0.0;\n  }\n  else\n  {\n    v11 = v7;\n    v12 = 0LL;\n    v13 = 9999999;\n    v14 = 0;\n    do\n    {\n      v15 = strlen(*(const char **)(a1 + 8 * v12));\n      *(_DWORD *)(v10 + 4 * v12) = v15;\n      v14 += v15;\n      if ( v13 > v15 )\n        v13 = v15;\n      ++v12;\n    }\n    while ( v11 != v12 );\n    v16 = (float)v14;\n    v7 = v57;\n  }\n  v17 = (signed int)(v16 / ((1.0 / (1.0 - a7) + 1.0) * v60 + 1.0)) / (signed int)v7;\n  if ( v17 > v13 )\n    v17 = v13;\n  v18 = (char **)sub_4382F0(\"alignio.c\", 545LL, 8 * v64);\n  v59 = v17;\n  v19 = v17;\n  v20 = v7;\n  v65 = v19;\n  v21 = 4 * v19 + 4;\n  v22 = (_DWORD *)sub_4382F0(\"alignio.c\", 546LL, v21);\n  if ( v20 > 0 )\n  {\n    v66 = (unsigned int)(v59 + 1);\n    v23 = (unsigned int)v57;\n    v24 = v18;\n    do\n    {\n      v25 = \"alignio.c\";\n      v26 = 549LL;\n      v27 = (char *)sub_4382F0(\"alignio.c\", 549LL, v21);\n      *v24 = v27;\n      if ( v59 >= 0 )\n      {\n        v26 = 0LL;\n        v25 = v27;\n        memset(v27, 0, 4 * v66);\n      }\n      ++v24;\n      --v23;\n    }\n    while ( v23 );\n    if ( v57 > 0 )\n    {\n      v28 = (double)(signed int)v66;\n      v29 = 0LL;\n      do\n      {\n        if ( ptr[v29] > v59 )\n        {\n          v30 = -1;\n          v31 = 0;\n          do\n          {\n            sub_437B60(v25, v26);\n            if ( v30 == -1 || (float)(v60 / (float)(a7 + v60)) > v28 )\n            {\n              sub_437B60(v25, v26);\n              v28 = v28 * (double)(signed int)v66;\n              v30 = (signed int)v28;\n            }\n            ++*(_DWORD *)&v18[v29][4 * v30];\n            ++v31;\n          }\n          while ( v31 < ptr[v29] - v59 );\n        }\n        ++v29;\n      }\n      while ( v29 != v57 );\n    }\n  }\n  v32 = v59;\n  v33 = v62;\n  if ( v59 >= 0 )\n  {\n    v34 = 0LL;\n    v32 = v59;\n    do\n    {\n      v22[v34] = 0;\n      v35 = 0;\n      if ( v57 > 0 )\n      {\n        v35 = 0;\n        v36 = 0LL;\n        if ( v57 != 1 )\n        {\n          do\n          {\n            v37 = *(_DWORD *)&v18[v36][4 * v34];\n            if ( v37 > v35 )\n            {\n              v22[v34] = v37;\n              v35 = v37;\n            }\n            v38 = *(_DWORD *)&v18[v36 + 1][4 * v34];\n            if ( v38 > v35 )\n            {\n              v22[v34] = v38;\n              v35 = v38;\n            }\n            v36 += 2LL;\n          }\n          while ( (unsigned int)v57 - (unsigned __int64)(v57 & 1) != v36 );\n        }\n        v33 = v62;\n        if ( v57 & 1 )\n        {\n          v39 = *(_DWORD *)&v18[v36][4 * v34];\n          if ( v39 > v35 )\n          {\n            v22[v34] = v39;\n            v35 = v39;\n          }\n        }\n      }\n      v32 += v35;\n      v41 = __OFSUB__(v34, v65);\n      v40 = v34++ - v65 < 0;\n    }\n    while ( v40 ^ v41 );\n  }\n  v61 = v32;\n  v58 = sub_4382F0(\"alignio.c\", 581LL, 8 * v64);\n  if ( v57 > 0 )\n  {\n    v42 = (unsigned int)v57;\n    v43 = (_QWORD *)v58;\n    do\n    {\n      *v43 = sub_4382F0(\"alignio.c\", 583LL, v61 + 1);\n      ++v43;\n      --v42;\n    }\n    while ( v42 );\n    v33 = v62;\n    if ( v57 > 0 )\n    {\n      v44 = 0LL;\n      while ( v59 < 0 )\n      {\n        v45 = (_QWORD *)(v58 + 8 * v44);\nLABEL_57:\n        *(_BYTE *)(*v45 + v61) = 0;\n        if ( ++v44 == v57 )\n          goto LABEL_58;\n      }\n      v45 = (_QWORD *)(v58 + 8 * v44);\n      v46 = 0LL;\n      v47 = 0;\n      LODWORD(v48) = 0;\n      while ( *(_DWORD *)&v18[v44][4 * v46] <= 0 )\n      {\n        LODWORD(v49) = 0;\n        if ( v22[v46] > 0 )\n          goto LABEL_50;\nLABEL_52:\n        if ( v46 != v59 )\n        {\n          v50 = v47++;\n          v51 = (signed int)v48;\n          LODWORD(v48) = v48 + 1;\n          *(_BYTE *)(*v45 + v51) = *(_BYTE *)(*(_QWORD *)(v8 + 8 * v44) + v50);\n        }\n        v41 = __OFSUB__(v46, v65);\n        v40 = v46++ - v65 < 0;\n        if ( !(v40 ^ v41) )\n          goto LABEL_57;\n      }\n      v49 = 0LL;\n      do\n      {\n        *(_BYTE *)(v49 + (signed int)v48 + *v45) = *(_BYTE *)(v49 + v47 + *(_QWORD *)(v8 + 8 * v44));\n        ++v49;\n      }\n      while ( (signed int)v49 < *(_DWORD *)&v18[v44][4 * v46] );\n      LODWORD(v48) = v49 + v48;\n      v47 += v49;\n      v33 = v62;\n      if ( (signed int)v49 >= v22[v46] )\n        goto LABEL_52;\nLABEL_50:\n      v48 = (signed int)v48;\n      do\n      {\n        *(_BYTE *)(*v45 + v48++) = 32;\n        LODWORD(v49) = v49 + 1;\n      }\n      while ( (signed int)v49 < v22[v46] );\n      goto LABEL_52;\n    }\n  }\nLABEL_58:\n  *(_DWORD *)v67 = 0;\n  *(_DWORD *)(v67 + 4) = v61;\n  *(_DWORD *)(v67 + 8) = v57;\n  v52 = sub_4382F0(\"alignio.c\", 603LL, 360 * v64);\n  *(_QWORD *)(v67 + 40) = v52;\n  v53 = v33;\n  if ( v57 > 0 )\n  {\n    sub_432E70(v52, v33);\n    if ( v57 != 1 )\n    {\n      v54 = (unsigned int)v57 - 1LL;\n      v55 = 360LL;\n      do\n      {\n        sub_432E70(v55 + *(_QWORD *)(v67 + 40), v53 + v55);\n        v55 += 360LL;\n        --v54;\n      }\n      while ( v54 );\n    }\n  }\n  free(ptr);\n  free(v22);\n  sub_438390(v18);\n  *v68 = v58;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x425790L", 
            "funcEndAddr": "0x425cfcL", 
            "funcName": "sub_425790"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_425D00(__int64 a1, unsigned int a2, unsigned int a3, char a4)\n{\n  __int64 v4; // r9\n  __int64 v5; // r14\n  signed __int64 v6; // r10\n  __int64 v7; // rsi\n  unsigned __int8 v8; // bl\n  __int64 v9; // rsi\n  unsigned __int8 v10; // bl\n  __int64 v11; // rax\n  __int64 v12; // rsi\n  char v13; // bp\n\n  if ( (signed int)a2 > 0 )\n  {\n    v4 = a2;\n    v5 = 0LL;\n    v6 = -9223372036854751231LL;\n    do\n    {\n      if ( (signed int)a3 > 0 )\n      {\n        v11 = 0LL;\n        if ( a3 != 1 )\n        {\n          do\n          {\n            v7 = *(_QWORD *)(a1 + 8 * v5);\n            v8 = *(_BYTE *)(v7 + v11) - 32;\n            if ( v8 <= 0x3Fu && _bittest64(&v6, v8) || *(_BYTE *)(v7 + v11) == 126 )\n              *(_BYTE *)(v7 + v11) = a4;\n            v9 = *(_QWORD *)(a1 + 8 * v5);\n            v10 = *(_BYTE *)(v9 + v11 + 1) - 32;\n            if ( v10 <= 0x3Fu && _bittest64(&v6, v10) || *(_BYTE *)(v9 + v11 + 1) == 126 )\n              *(_BYTE *)(v9 + v11 + 1) = a4;\n            v11 += 2LL;\n          }\n          while ( a3 - (unsigned __int64)(a3 & 1) != v11 );\n        }\n        if ( a3 & 1 )\n        {\n          if ( (v12 = *(_QWORD *)(a1 + 8 * v5), v13 = *(_BYTE *)(v12 + v11), (unsigned __int8)(v13 - 32) <= 0x3Fu)\n            && _bittest64(&v6, (unsigned __int8)(v13 - 32))\n            || v13 == 126 )\n          {\n            *(_BYTE *)(v12 + v11) = a4;\n          }\n        }\n      }\n      ++v5;\n    }\n    while ( v5 != v4 );\n  }\n}\n", 
            "funcStartAddr": "0x425d00L", 
            "funcEndAddr": "0x425df1L", 
            "funcName": "sub_425D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_425E00(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  const char *v3; // rbp\n  const char *v4; // rsi\n  const char *v5; // rsi\n  const char *v6; // rbp\n  const char *v7; // r13\n  __int64 v8; // r12\n  __int64 v9; // rdx\n  int v10; // eax\n  const char *i; // [rsp+8h] [rbp-40h]\n  unsigned int v13; // [rsp+14h] [rbp-34h]\n\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  v3 = (const char *)sub_42C980(a1, a2);\n  i = v3;\n  v2 = 0LL;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      v4 = \"CLUSTAL\";\n      if ( !strncmp(v3, \"CLUSTAL\", 7uLL) )\n      {\n        v4 = \"multiple sequence alignment\";\n        if ( strstr(v3, \"multiple sequence alignment\") )\n          break;\n      }\n      v3 = (const char *)sub_42C980(a1, v4);\n      i = v3;\n      if ( !v3 )\n        return v2;\n    }\n    v2 = sub_42AF80(10LL, 0LL);\n    for ( i = (const char *)sub_42C980(a1, 0LL); i; i = (const char *)sub_42C980(a1, v5) )\n    {\n      v5 = \" \\t\\n\";\n      v6 = (const char *)sub_4387A0(&i, \" \\t\\n\", 0LL);\n      if ( v6 )\n      {\n        v5 = \" \\t\\n\";\n        v7 = (const char *)sub_4387A0(&i, \" \\t\\n\", &v13);\n        if ( v7 )\n        {\n          v8 = sub_4387A0(&i, \"\\n\", 0LL);\n          if ( !strpbrk(v6, \".*:\") || (v5 = \".*:\", !strpbrk(v7, \".*:\")) )\n          {\n            if ( v8 )\n            {\n              v9 = *(_QWORD *)(a1 + 8);\n              sub_4325B0(\"Parse failed at line %d, file %s: possibly using spaces as gaps\", *(_DWORD *)(a1 + 16));\n            }\n            v10 = sub_42CA00(v2, v6, (unsigned int)(*(_DWORD *)(v2 + 352) + 1));\n            *(_DWORD *)(v2 + 352) = v10;\n            v5 = (const char *)*(unsigned int *)(*(_QWORD *)(v2 + 328) + 4LL * v10);\n            *(_DWORD *)(*(_QWORD *)(v2 + 328) + 4LL * v10) = sub_438690(*(_QWORD *)v2 + 8LL * v10, v5, v7, v13);\n          }\n        }\n      }\n    }\n    sub_42C2C0(v2);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x425e00L", 
            "funcEndAddr": "0x425fc1L", 
            "funcName": "sub_425E00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_425FD0(FILE *stream, __int64 a2)\n{\n  __int64 v2; // r12\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  unsigned int v5; // er15\n  signed int v6; // eax\n  __int64 v7; // rax\n  __int64 v8; // r13\n  __int64 v9; // rbp\n  __int64 v11; // [rsp+0h] [rbp-78h]\n  char v12; // [rsp+32h] [rbp-46h]\n\n  v2 = *(signed int *)(a2 + 28);\n  if ( v2 <= 0 )\n  {\n    v5 = 0;\n  }\n  else\n  {\n    v3 = *(_QWORD *)(a2 + 8);\n    v4 = 0LL;\n    v5 = 0;\n    do\n    {\n      v6 = strlen(*(const char **)(v3 + 8 * v4));\n      if ( (signed int)v5 < v6 )\n        v5 = v6;\n      ++v4;\n    }\n    while ( v4 < v2 );\n  }\n  LODWORD(v7) = fwrite(\"CLUSTAL W(1.5) multiple sequence alignment\\n\", 0x2BuLL, 1uLL, stream);\n  if ( *(_DWORD *)(a2 + 24) > 0 )\n  {\n    v8 = 0LL;\n    do\n    {\n      LODWORD(v7) = fputc(10, stream);\n      if ( *(_DWORD *)(a2 + 28) > 0 )\n      {\n        v9 = 0LL;\n        do\n        {\n          strncpy((char *)&v11, (const char *)(v8 + *(_QWORD *)(*(_QWORD *)a2 + 8 * v9)), 0x32uLL);\n          v12 = 0;\n          fprintf(stream, \"%*s %s\\n\", v5, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v9++), &v11);\n          v7 = *(signed int *)(a2 + 28);\n        }\n        while ( v9 < v7 );\n      }\n      v8 += 50LL;\n    }\n    while ( *(_DWORD *)(a2 + 24) > (signed int)v8 );\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x425fd0L", 
            "funcEndAddr": "0x4260cfL", 
            "funcName": "sub_425FD0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4260D0(__int64 a1, signed int a2, int a3, _QWORD *a4)\n{\n  _QWORD *v4; // r15\n  signed __int64 v5; // rbx\n  unsigned __int64 v6; // rax\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  __int64 v9; // r14\n  unsigned __int64 v10; // rax\n  unsigned __int64 v11; // rcx\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // rsi\n  __int64 v14; // rdi\n  __int64 v15; // rsi\n  signed __int64 v16; // rax\n  signed __int64 v17; // rcx\n  __int64 v18; // rdx\n  __int64 v19; // rdx\n  signed __int64 v20; // rsi\n  __int128 v21; // xmm1\n  __int128 v22; // xmm1\n  __int128 v23; // xmm1\n  __m128i v24; // xmm1\n  signed __int64 v25; // rdx\n  __int64 v26; // rsi\n  __m128i v27; // xmm1\n  signed __int64 v28; // r12\n  __m128i *v29; // rsi\n  __int64 v30; // rcx\n  _DWORD *v31; // rdx\n  unsigned __int64 v32; // rsi\n  __int64 v33; // rdx\n  __m128i v34; // xmm0\n  signed __int64 v35; // rdi\n  __m128i v36; // xmm8\n  __m128i v37; // xmm9\n  __m128i v38; // xmm10\n  __m128i v39; // xmm4\n  __m128i v40; // xmm5\n  __m128i v41; // xmm6\n  __m128i v42; // xmm7\n  __m128i v43; // xmm1\n  __int64 v44; // rdx\n  __m128i v45; // xmm1\n  __m128i v46; // xmm2\n  char *v47; // rax\n  char *v48; // r14\n  char *v49; // rbx\n  _DWORD *v50; // rbp\n  signed __int64 v51; // r13\n  void *v52; // rax\n  signed __int64 v53; // r13\n  __int64 v54; // rdx\n  char v55; // cl\n  signed __int64 v56; // rdx\n  int v57; // er8\n  unsigned int v58; // er10\n  signed __int64 v59; // rdi\n  __int64 v60; // r8\n  signed __int64 v61; // rbx\n  __int64 v62; // r8\n  signed __int64 v63; // r13\n  char v64; // si\n  signed __int64 v65; // r9\n  signed __int64 v66; // r11\n  signed __int64 v67; // r12\n  __int128 v68; // xmm2\n  signed __int64 v69; // rdx\n  __int64 v70; // r14\n  signed __int64 v71; // rbp\n  signed __int64 v72; // rax\n  __int128 v73; // xmm3\n  float v74; // xmm3_4\n  float v75; // xmm4_4\n  float v76; // xmm3_4\n  float v77; // xmm4_4\n  float v78; // xmm3_4\n  float v79; // xmm3_4\n  signed __int64 v80; // r13\n  signed __int64 v81; // rsi\n  signed int v82; // ebx\n  unsigned __int8 v83; // of\n  int v84; // esi\n  int v85; // esi\n  int v86; // esi\n  int v87; // eax\n  int v88; // esi\n  int v89; // esi\n  int v90; // ebp\n  int v91; // ebp\n  int v92; // eax\n  _DWORD *v93; // rdx\n  char *v94; // rsi\n  __int64 v95; // rbp\n  _DWORD *v96; // r9\n  int v97; // eax\n  int v98; // eax\n  char v99; // r9\n  signed __int64 v100; // r14\n  char *v101; // rax\n  _DWORD *v102; // r14\n  __int64 v103; // rdx\n  char *v104; // rbx\n  bool v105; // al\n  int v106; // er11\n  _DWORD *v107; // rcx\n  __int64 v108; // rsi\n  __int64 v109; // rsi\n  __int64 v110; // rbp\n  int v111; // ecx\n  __int64 v112; // rax\n  int v113; // ecx\n  __int64 v114; // rax\n  int v115; // ecx\n  __int64 v116; // rax\n  int v117; // ecx\n  __int64 *v118; // rsi\n  __int64 v119; // rbp\n  __int64 v120; // rax\n  int v121; // ecx\n  int v122; // eax\n  _DWORD *v123; // r12\n  __int64 v124; // rcx\n  __int64 v125; // rdx\n  __int64 v126; // rcx\n  int v127; // esi\n  __int64 v128; // rcx\n  int v129; // esi\n  __int64 v130; // rcx\n  int v131; // esi\n  __int64 v132; // rcx\n  int v133; // esi\n  __int64 *v134; // rdx\n  __int64 v135; // rcx\n  int v136; // esi\n  int v137; // ecx\n  __int64 v138; // rdx\n  __int64 v139; // rcx\n  float v140; // xmm2_4\n  __int64 v141; // rdx\n  __int64 v142; // rsi\n  signed __int64 v143; // rbp\n  signed __int64 v144; // rdx\n  __int64 v145; // rsi\n  signed __int64 v147; // [rsp+0h] [rbp-E8h]\n  char *v148; // [rsp+0h] [rbp-E8h]\n  _DWORD *ptr; // [rsp+8h] [rbp-E0h]\n  __int64 v150; // [rsp+10h] [rbp-D8h]\n  char v151; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v152; // [rsp+10h] [rbp-D8h]\n  signed __int64 v153; // [rsp+18h] [rbp-D0h]\n  signed int v154; // [rsp+20h] [rbp-C8h]\n  void *s; // [rsp+28h] [rbp-C0h]\n  void *sa; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v157; // [rsp+30h] [rbp-B8h]\n  signed __int64 v158; // [rsp+30h] [rbp-B8h]\n  unsigned __int64 v159; // [rsp+38h] [rbp-B0h]\n  int v160; // [rsp+38h] [rbp-B0h]\n  size_t nmemb; // [rsp+48h] [rbp-A0h]\n  signed __int64 v162; // [rsp+50h] [rbp-98h]\n  signed __int64 v163; // [rsp+50h] [rbp-98h]\n  __int64 v164; // [rsp+58h] [rbp-90h]\n  char v165; // [rsp+58h] [rbp-90h]\n  int v166; // [rsp+64h] [rbp-84h]\n  __int64 v167; // [rsp+68h] [rbp-80h]\n  char v168; // [rsp+80h] [rbp-68h]\n  _QWORD *v169; // [rsp+88h] [rbp-60h]\n  __int64 v170; // [rsp+90h] [rbp-58h]\n  __int64 v171; // [rsp+B0h] [rbp-38h]\n\n  v169 = a4;\n  v166 = a3;\n  v150 = a1;\n  v154 = a2;\n  v4 = (_QWORD *)sub_4382F0(\"cluster.c\", 168LL, 8LL * a2);\n  v5 = 4LL * a2;\n  nmemb = a2;\n  if ( a2 > 0 )\n  {\n    v153 = 4LL * (unsigned int)a2;\n    v6 = a2 & 0xFFFFFFF8;\n    v159 = v6;\n    v6 -= 8LL;\n    v157 = v6;\n    v6 >>= 3;\n    v147 = (unsigned int)a2 - 1LL;\n    v7 = a2 & 7;\n    v8 = ((_BYTE)v6 + 1) & 3;\n    v162 = v8 - 1 - v6;\n    s = (void *)(((_BYTE)v6 + 1) & 3);\n    v164 = -v8;\n    v9 = 0LL;\n    while ( 1 )\n    {\n      v10 = sub_4382F0(\"cluster.c\", 171LL, v5);\n      v4[v9] = v10;\n      v11 = *(_QWORD *)(v150 + 8 * v9);\n      if ( (unsigned int)v154 < 8 || v10 < v11 + 4LL * (unsigned int)v154 && v10 + v153 > v11 )\n      {\n        v12 = 0LL;\nLABEL_7:\n        v13 = v147 - v12;\n        if ( v7 )\n        {\n          v14 = -v7;\n          do\n          {\n            *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)(v11 + 4 * v12);\n            ++v12;\n            ++v14;\n          }\n          while ( v14 );\n        }\n        if ( v13 >= 7 )\n        {\n          v15 = (unsigned int)v154 - v12;\n          v16 = v10 + 4 * v12 + 28;\n          v17 = v11 + 4 * v12 + 28;\n          v18 = 0LL;\n          do\n          {\n            *(_DWORD *)(v16 + 4 * v18 - 28) = *(_DWORD *)(v17 + 4 * v18 - 28);\n            *(_DWORD *)(v16 + 4 * v18 - 24) = *(_DWORD *)(v17 + 4 * v18 - 24);\n            *(_DWORD *)(v16 + 4 * v18 - 20) = *(_DWORD *)(v17 + 4 * v18 - 20);\n            *(_DWORD *)(v16 + 4 * v18 - 16) = *(_DWORD *)(v17 + 4 * v18 - 16);\n            *(_DWORD *)(v16 + 4 * v18 - 12) = *(_DWORD *)(v17 + 4 * v18 - 12);\n            *(_DWORD *)(v16 + 4 * v18 - 8) = *(_DWORD *)(v17 + 4 * v18 - 8);\n            *(_DWORD *)(v16 + 4 * v18 - 4) = *(_DWORD *)(v17 + 4 * v18 - 4);\n            *(_DWORD *)(v16 + 4 * v18) = *(_DWORD *)(v17 + 4 * v18);\n            v18 += 8LL;\n          }\n          while ( v15 != v18 );\n        }\n        goto LABEL_23;\n      }\n      if ( v157 < 0x18 )\n        break;\n      v20 = v162;\n      v19 = 0LL;\n      do\n      {\n        v21 = *(_OWORD *)(v11 + 4 * v19 + 16);\n        *(_OWORD *)(v10 + 4 * v19) = *(_OWORD *)(v11 + 4 * v19);\n        *(_OWORD *)(v10 + 4 * v19 + 16) = v21;\n        v22 = *(_OWORD *)(v11 + 4 * v19 + 48);\n        *(_OWORD *)(v10 + 4 * v19 + 32) = *(_OWORD *)(v11 + 4 * v19 + 32);\n        *(_OWORD *)(v10 + 4 * v19 + 48) = v22;\n        v23 = *(_OWORD *)(v11 + 4 * v19 + 80);\n        *(_OWORD *)(v10 + 4 * v19 + 64) = *(_OWORD *)(v11 + 4 * v19 + 64);\n        *(_OWORD *)(v10 + 4 * v19 + 80) = v23;\n        v24 = _mm_loadu_si128((const __m128i *)(v11 + 4 * v19 + 112));\n        _mm_storeu_si128((__m128i *)(v10 + 4 * v19 + 96), _mm_loadu_si128((const __m128i *)(v11 + 4 * v19 + 96)));\n        _mm_storeu_si128((__m128i *)(v10 + 4 * v19 + 112), v24);\n        v19 += 32LL;\n        v20 += 4LL;\n      }\n      while ( v20 );\n      if ( s )\n        goto LABEL_20;\nLABEL_22:\n      v12 = v159;\n      if ( v159 != v154 )\n        goto LABEL_7;\nLABEL_23:\n      if ( ++v9 == v154 )\n        goto LABEL_24;\n    }\n    v19 = 0LL;\n    if ( !s )\n      goto LABEL_22;\nLABEL_20:\n    v25 = 4 * v19 + 16;\n    v26 = v164;\n    do\n    {\n      v27 = _mm_loadu_si128((const __m128i *)(v11 + v25));\n      _mm_storeu_si128((__m128i *)(v10 + v25 - 16), _mm_loadu_si128((const __m128i *)(v11 + v25 - 16)));\n      _mm_storeu_si128((__m128i *)(v10 + v25), v27);\n      v25 += 32LL;\n      ++v26;\n    }\n    while ( v26 );\n    goto LABEL_22;\n  }\nLABEL_24:\n  ptr = (_DWORD *)sub_4382F0(\"cluster.c\", 176LL, v5);\n  v28 = v154 - 1LL;\n  LOBYTE(v29) = -79;\n  sa = (void *)sub_4382F0(\"cluster.c\", 177LL, 4LL * v154 - 4);\n  if ( v154 <= 0 )\n  {\n    v151 = 0;\n    v158 = 0LL;\n    goto LABEL_40;\n  }\n  if ( (unsigned int)v154 >= 8 )\n  {\n    v30 = v154 & 0xFFFFFFF8;\n    v32 = (unsigned __int64)(v30 - 8) >> 3;\n    v33 = ((_BYTE)v32 + 1) & 3;\n    if ( (unsigned __int64)(v30 - 8) >= 0x18 )\n    {\n      v35 = v33 - 1 - v32;\n      v34 = _mm_load_si128((const __m128i *)&xmmword_440310);\n      v29 = 0LL;\n      v36 = _mm_load_si128((const __m128i *)&xmmword_440290);\n      v37 = _mm_load_si128((const __m128i *)&xmmword_440320);\n      v38 = _mm_load_si128((const __m128i *)&xmmword_440330);\n      v39 = _mm_load_si128((const __m128i *)&xmmword_440340);\n      v40 = _mm_load_si128((const __m128i *)&xmmword_440350);\n      v41 = _mm_load_si128((const __m128i *)&xmmword_440360);\n      v42 = _mm_load_si128((const __m128i *)&xmmword_440370);\n      v43 = _mm_load_si128((const __m128i *)&xmmword_440380);\n      do\n      {\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29], v34);\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 4], _mm_add_epi32(v34, v36));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 8], _mm_add_epi32(v34, v37));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 12], _mm_add_epi32(v34, v38));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 16], _mm_add_epi32(v34, v39));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 20], _mm_add_epi32(v34, v40));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 24], _mm_add_epi32(v34, v41));\n        _mm_storeu_si128((__m128i *)&ptr[(_QWORD)v29 + 28], _mm_add_epi32(v34, v42));\n        v29 += 2;\n        v34 = _mm_add_epi32(v34, v43);\n        v35 += 4LL;\n      }\n      while ( v35 );\n      if ( !v33 )\n      {\nLABEL_36:\n        v31 = ptr;\n        if ( v30 == v154 )\n          goto LABEL_38;\n        goto LABEL_37;\n      }\n    }\n    else\n    {\n      v34 = _mm_load_si128((const __m128i *)&xmmword_440310);\n      v29 = 0LL;\n      if ( !v33 )\n        goto LABEL_36;\n    }\n    v29 = (__m128i *)&ptr[(_QWORD)v29 + 4];\n    v44 = -v33;\n    v45 = _mm_load_si128((const __m128i *)&xmmword_440290);\n    v46 = _mm_load_si128((const __m128i *)&xmmword_440320);\n    do\n    {\n      _mm_storeu_si128(v29 - 1, v34);\n      _mm_storeu_si128(v29, _mm_add_epi32(v34, v45));\n      v34 = _mm_add_epi32(v34, v46);\n      v29 += 2;\n      ++v44;\n    }\n    while ( v44 );\n    goto LABEL_36;\n  }\n  v30 = 0LL;\n  v31 = ptr;\n  do\n  {\nLABEL_37:\n    v31[v30] = v30;\n    ++v30;\n  }\n  while ( v154 != v30 );\nLABEL_38:\n  v151 = 0;\n  v158 = 0LL;\n  if ( v154 >= 2 )\n  {\n    LOBYTE(v29) = 0;\n    memset(sa, 0, 4LL * (unsigned int)v28);\n    v158 = (unsigned int)(v154 - 1);\n    v151 = 1;\n  }\nLABEL_40:\n  v47 = (char *)malloc(40 * v28);\n  v48 = v47;\n  if ( !v47 )\nLABEL_46:\n    sub_4325B0(\"AllocPhylo() failed\", (char)v29);\n  v49 = v47;\n  if ( v151 )\n  {\n    v50 = v47 + 32;\n    v51 = 0LL;\n    do\n    {\n      *(_QWORD *)(v50 - 5) = 0LL;\n      *(v50 - 3) = 0;\n      *((_QWORD *)v50 - 4) = -1LL;\n      *(v50 - 6) = -1;\n      *v50 = 0;\n      LOBYTE(v29) = 1;\n      v52 = calloc(nmemb, 1uLL);\n      *((_QWORD *)v50 - 1) = v52;\n      if ( !v52 )\n        goto LABEL_46;\n      ++v51;\n      v50 += 10;\n    }\n    while ( v51 < v28 );\n    v49 = v48;\n    if ( v151 )\n    {\n      v53 = nmemb;\n      v54 = v154 & 1;\n      v170 = v54;\n      v167 = (unsigned int)v154 - v54;\n      v55 = v154 + 3;\n      v56 = 0LL;\n      v57 = v154;\n      v58 = 0;\n      v148 = v48;\n      while ( 1 )\n      {\n        v59 = v53;\n        v160 = v57;\n        v60 = v57 & 3;\n        v61 = v53 - v60;\n        v171 = v60;\n        v62 = -v60;\n        v168 = nmemb - v56;\n        v152 = nmemb - 1 - v56;\n        v163 = v56;\n        v63 = nmemb - 2 - v56;\n        v165 = v55;\n        v64 = v55;\n        v65 = 0LL;\n        v66 = 1LL;\n        v67 = v158;\n        v68 = 0x497423F0u;\n        do\n        {\n          v69 = v65++;\n          if ( v65 < v59 )\n          {\n            v70 = v4[v69];\n            if ( ((_BYTE)v152 - (_BYTE)v69) & 3 )\n            {\n              v71 = -(signed __int64)(v64 & 3);\n              v72 = v66;\n              do\n              {\n                v73 = *(unsigned int *)(v70 + 4 * v72);\n                if ( *(float *)&v68 > *(float *)&v73 )\n                  v58 = v72;\n                if ( *(float *)&v68 > *(float *)&v73 )\n                  v67 = (unsigned int)v69;\n                *(float *)&v73 = fminf(*(float *)&v73, *(float *)&v68);\n                ++v72;\n                LODWORD(v68) = v73;\n                ++v71;\n              }\n              while ( v71 );\n            }\n            else\n            {\n              v72 = v66;\n              v73 = v68;\n            }\n            v68 = v73;\n            if ( (unsigned __int64)(v63 - v69) >= 3 )\n            {\n              LODWORD(v68) = v73;\n              do\n              {\n                v74 = *(float *)(v70 + 4 * v72);\n                if ( *(float *)&v68 > v74 )\n                  v58 = v72;\n                if ( *(float *)&v68 > v74 )\n                  v67 = (unsigned int)v69;\n                v75 = *(float *)(v70 + 4 * v72 + 4);\n                v76 = fminf(v74, *(float *)&v68);\n                if ( v76 > v75 )\n                  v58 = v72 + 1;\n                if ( v76 > v75 )\n                  v67 = (unsigned int)v69;\n                v77 = fminf(v75, v76);\n                v78 = *(float *)(v70 + 4 * v72 + 8);\n                if ( v77 > v78 )\n                  v58 = v72 + 2;\n                if ( v77 > v78 )\n                  v67 = (unsigned int)v69;\n                v79 = fminf(v78, v77);\n                v68 = *(unsigned int *)(v70 + 4 * v72 + 12);\n                if ( v79 > *(float *)&v68 )\n                  v58 = v72 + 3;\n                if ( v79 > *(float *)&v68 )\n                  v67 = (unsigned int)v69;\n                *(float *)&v68 = fminf(*(float *)&v68, v79);\n                v72 += 4LL;\n              }\n              while ( v72 != v59 );\n            }\n          }\n          ++v66;\n          v64 += 3;\n        }\n        while ( v65 != v59 );\n        v80 = v61;\n        v158 = v59 - 2;\n        v81 = 5 * (v59 - 2);\n        *(_DWORD *)&v148[8 * v81 + 4] = ptr[(signed int)v67];\n        *(_DWORD *)&v148[8 * v81 + 8] = ptr[v58];\n        LODWORD(v81) = ptr[(signed int)v67];\n        v82 = v154;\n        v83 = __OFSUB__((_DWORD)v81, v154);\n        v84 = v81 - v154;\n        if ( !((v84 < 0) ^ v83) )\n          *(_DWORD *)&v148[40 * v84] = v160 + v154 - 2;\n        v85 = ptr[v58];\n        v83 = __OFSUB__(v85, v154);\n        v86 = v85 - v154;\n        if ( !((v86 < 0) ^ v83) )\n          *(_DWORD *)&v148[40 * v86] = v160 + v154 - 2;\n        *(_DWORD *)&v148[40 * (v59 - 2) + 12] = v68;\n        *((_DWORD *)sa + v59 - 2) = v68;\n        *(_DWORD *)&v148[40 * (v59 - 2) + 20] = v68;\n        *(_DWORD *)&v148[40 * (v59 - 2) + 16] = v68;\n        v87 = ptr[(signed int)v67];\n        v88 = ptr[(signed int)v67];\n        v83 = __OFSUB__(v88, v154);\n        v89 = v88 - v154;\n        if ( !((v89 < 0) ^ v83) )\n          *(float *)&v148[40 * (v59 - 2) + 16] = *(float *)&v68 - *((float *)sa + v89);\n        v90 = ptr[v58];\n        v83 = __OFSUB__(v90, v154);\n        v91 = v90 - v154;\n        if ( !((v91 < 0) ^ v83) )\n          *(float *)&v148[40 * (v59 - 2) + 20] = *(float *)&v68 - *((float *)sa + v91);\n        v83 = __OFSUB__(v87, v154);\n        v92 = v87 - v154;\n        if ( (v92 < 0) ^ v83 )\n        {\n          ++*(_DWORD *)&v148[40 * (v59 - 2) + 32];\n          *(_BYTE *)(*(_QWORD *)&v148[40 * (v59 - 2) + 24] + (signed int)ptr[(signed int)v67]) = 1;\n          v93 = ptr;\n        }\n        else\n        {\n          *(_DWORD *)&v148[40 * (v59 - 2) + 32] += *(_DWORD *)&v148[40 * v92 + 32];\n          v94 = &v148[40 * (v59 - 2) + 24];\n          if ( v154 == 1LL )\n          {\n            v95 = 0LL;\n            v96 = ptr;\n          }\n          else\n          {\n            v95 = 0LL;\n            v96 = ptr;\n            do\n            {\n              *(_BYTE *)(*(_QWORD *)v94 + v95) |= *(_BYTE *)(*(_QWORD *)&v148[40\n                                                                            * ((signed int)ptr[(signed int)v67]\n                                                                             - (signed __int64)v154)\n                                                                            + 24]\n                                                           + v95);\n              *(_BYTE *)(*(_QWORD *)v94 + v95 + 1) |= *(_BYTE *)(*(_QWORD *)&v148[40\n                                                                                * ((signed int)ptr[(signed int)v67]\n                                                                                 - (signed __int64)v154)\n                                                                                + 24]\n                                                               + v95\n                                                               + 1);\n              v95 += 2LL;\n            }\n            while ( v167 != v95 );\n          }\n          v93 = v96;\n          v82 = v154;\n          if ( v170 )\n            *(_BYTE *)(*(_QWORD *)v94 + v95) |= *(_BYTE *)(*(_QWORD *)&v148[40\n                                                                          * ((signed int)v96[(signed int)v67]\n                                                                           - (signed __int64)v154)\n                                                                          + 24]\n                                                         + v95);\n        }\n        v97 = v93[v58];\n        v83 = __OFSUB__(v97, v82);\n        v98 = v97 - v82;\n        if ( (v98 < 0) ^ v83 )\n        {\n          ++*(_DWORD *)&v148[40 * (v59 - 2) + 32];\n          *(_BYTE *)(*(_QWORD *)&v148[40 * (v59 - 2) + 24] + (signed int)v93[v58]) = 1;\n          v99 = v168;\n          v100 = v80;\n        }\n        else\n        {\n          *(_DWORD *)&v148[40 * (v59 - 2) + 32] += *(_DWORD *)&v148[40 * v98 + 32];\n          v101 = &v148[40 * (v59 - 2) + 24];\n          v99 = v168;\n          if ( v154 == 1LL )\n          {\n            v103 = 0LL;\n            v104 = v148;\n          }\n          else\n          {\n            v102 = v93;\n            v103 = 0LL;\n            v104 = v148;\n            do\n            {\n              *(_BYTE *)(*(_QWORD *)v101 + v103) |= *(_BYTE *)(*(_QWORD *)&v148[40\n                                                                              * ((signed int)v102[v58]\n                                                                               - (signed __int64)v154)\n                                                                              + 24]\n                                                             + v103);\n              *(_BYTE *)(*(_QWORD *)v101 + v103 + 1) |= *(_BYTE *)(*(_QWORD *)&v148[40\n                                                                                  * ((signed int)v102[v58]\n                                                                                   - (signed __int64)v154)\n                                                                                  + 24]\n                                                                 + v103\n                                                                 + 1);\n              v103 += 2LL;\n            }\n            while ( v167 != v103 );\n          }\n          v100 = v80;\n          if ( v154 & 1 )\n            *(_BYTE *)(*(_QWORD *)v101 + v103) |= *(_BYTE *)(*(_QWORD *)&v104[40\n                                                                            * ((signed int)ptr[v58]\n                                                                             - (signed __int64)v154)\n                                                                            + 24]\n                                                           + v103);\n        }\n        v53 = v59 - 1;\n        v105 = v59 - 1 == (unsigned int)v67;\n        v106 = v58;\n        if ( v105 || v158 == v58 )\n          v106 = v67;\n        if ( v105 || v158 == v58 )\n          v67 = v58;\n        v107 = ptr;\n        if ( v158 != v67 )\n        {\n          v108 = v4[v59 - 2];\n          v4[v59 - 2] = v4[(signed int)v67];\n          v4[(signed int)v67] = v108;\n          if ( v152 >= 3 )\n          {\n            v109 = 0LL;\n            do\n            {\n              v110 = v4[v109];\n              v111 = *(_DWORD *)(v110 + 4 * v59 - 8);\n              *(_DWORD *)(v110 + 4 * v59 - 8) = *(_DWORD *)(v110 + 4LL * (signed int)v67);\n              *(_DWORD *)(v110 + 4LL * (signed int)v67) = v111;\n              v112 = v4[v109 + 1];\n              v113 = *(_DWORD *)(v112 + 4 * v59 - 8);\n              *(_DWORD *)(v112 + 4 * v59 - 8) = *(_DWORD *)(v112 + 4LL * (signed int)v67);\n              *(_DWORD *)(v112 + 4LL * (signed int)v67) = v113;\n              v114 = v4[v109 + 2];\n              v115 = *(_DWORD *)(v114 + 4 * v59 - 8);\n              *(_DWORD *)(v114 + 4 * v59 - 8) = *(_DWORD *)(v114 + 4LL * (signed int)v67);\n              *(_DWORD *)(v114 + 4LL * (signed int)v67) = v115;\n              v116 = v4[v109 + 3];\n              v117 = *(_DWORD *)(v116 + 4 * v59 - 8);\n              *(_DWORD *)(v116 + 4 * v59 - 8) = *(_DWORD *)(v116 + 4LL * (signed int)v67);\n              *(_DWORD *)(v116 + 4LL * (signed int)v67) = v117;\n              v109 += 4LL;\n            }\n            while ( v100 != v109 );\n          }\n          else\n          {\n            v109 = 0LL;\n          }\n          if ( v99 & 3 )\n          {\n            v118 = &v4[v109];\n            v119 = v62;\n            do\n            {\n              v120 = *v118;\n              v121 = *(_DWORD *)(*v118 + 4 * v59 - 8);\n              *(_DWORD *)(v120 + 4 * v59 - 8) = *(_DWORD *)(*v118 + 4LL * (signed int)v67);\n              *(_DWORD *)(v120 + 4LL * (signed int)v67) = v121;\n              ++v118;\n              ++v119;\n            }\n            while ( v119 );\n          }\n          v122 = ptr[v59 - 2];\n          ptr[v59 - 2] = ptr[(signed int)v67];\n          ptr[(signed int)v67] = v122;\n          v107 = ptr;\n        }\n        if ( v53 != v106 )\n          break;\nLABEL_129:\n        v57 = v160 - 1;\n        v138 = 0LL;\n        do\n        {\n          if ( v166 == 2 )\n          {\n            v139 = v4[v59 - 2];\n            v140 = fminf(*(float *)(v139 + 4 * v138), *(float *)(v4[v59 - 1] + 4 * v138));\n          }\n          else if ( v166 == 1 )\n          {\n            v139 = v4[v59 - 2];\n            v140 = fmaxf(*(float *)(v139 + 4 * v138), *(float *)(v4[v59 - 1] + 4 * v138));\n          }\n          else\n          {\n            v139 = v4[v59 - 2];\n            v140 = (float)(*(float *)(v139 + 4 * v138) + *(float *)(v4[v59 - 1] + 4 * v138)) * 0.5;\n          }\n          *(float *)(v139 + 4 * v138++) = v140;\n        }\n        while ( v59 != v138 );\n        v141 = v4[v59 - 2];\n        if ( v152 >= 3 )\n        {\n          v142 = 0LL;\n          do\n          {\n            *(_DWORD *)(v4[v142] + 4 * v59 - 8) = *(_DWORD *)(v141 + 4 * v142);\n            *(_DWORD *)(v4[v142 + 1] + 4 * v59 - 8) = *(_DWORD *)(v141 + 4 * v142 + 4);\n            *(_DWORD *)(v4[v142 + 2] + 4 * v59 - 8) = *(_DWORD *)(v141 + 4 * v142 + 8);\n            *(_DWORD *)(v4[v142 + 3] + 4 * v59 - 8) = *(_DWORD *)(v141 + 4 * v142 + 12);\n            v142 += 4LL;\n          }\n          while ( v100 != v142 );\n          if ( !(v99 & 3) )\n            goto LABEL_144;\nLABEL_142:\n          v143 = (signed __int64)&v4[v142];\n          v144 = v141 + 4 * v142;\n          v145 = 0LL;\n          do\n          {\n            *(_DWORD *)(*(_QWORD *)(v143 + 8 * v145) + 4 * v59 - 8) = *(_DWORD *)(v144 + 4 * v145);\n            ++v145;\n          }\n          while ( v171 != v145 );\n          goto LABEL_144;\n        }\n        v142 = 0LL;\n        if ( v99 & 3 )\n          goto LABEL_142;\nLABEL_144:\n        ptr[v59 - 2] = v160 + v154 - 2;\n        v56 = v163 + 1;\n        v55 = v165 + 3;\n        v58 = v59 - 1;\n        v49 = v148;\n        if ( v59 <= 2 )\n          goto LABEL_145;\n      }\n      v123 = v107;\n      v124 = v4[v59 - 1];\n      v4[v59 - 1] = v4[v106];\n      v4[v106] = v124;\n      if ( v152 >= 3 )\n      {\n        v125 = 0LL;\n        do\n        {\n          v126 = v4[v125];\n          v127 = *(_DWORD *)(v126 + 4 * v59 - 4);\n          *(_DWORD *)(v126 + 4 * v59 - 4) = *(_DWORD *)(v126 + 4LL * v106);\n          *(_DWORD *)(v126 + 4LL * v106) = v127;\n          v128 = v4[v125 + 1];\n          v129 = *(_DWORD *)(v128 + 4 * v59 - 4);\n          *(_DWORD *)(v128 + 4 * v59 - 4) = *(_DWORD *)(v128 + 4LL * v106);\n          *(_DWORD *)(v128 + 4LL * v106) = v129;\n          v130 = v4[v125 + 2];\n          v131 = *(_DWORD *)(v130 + 4 * v59 - 4);\n          *(_DWORD *)(v130 + 4 * v59 - 4) = *(_DWORD *)(v130 + 4LL * v106);\n          *(_DWORD *)(v130 + 4LL * v106) = v131;\n          v132 = v4[v125 + 3];\n          v133 = *(_DWORD *)(v132 + 4 * v59 - 4);\n          *(_DWORD *)(v132 + 4 * v59 - 4) = *(_DWORD *)(v132 + 4LL * v106);\n          *(_DWORD *)(v132 + 4LL * v106) = v133;\n          v125 += 4LL;\n        }\n        while ( v100 != v125 );\n        if ( !(v99 & 3) )\n          goto LABEL_128;\n      }\n      else\n      {\n        v125 = 0LL;\n        if ( !(v99 & 3) )\n        {\nLABEL_128:\n          v137 = v123[v59 - 1];\n          v123[v59 - 1] = v123[v106];\n          v123[v106] = v137;\n          goto LABEL_129;\n        }\n      }\n      v134 = &v4[v125];\n      do\n      {\n        v135 = *v134;\n        v136 = *(_DWORD *)(*v134 + 4 * v59 - 4);\n        *(_DWORD *)(v135 + 4 * v59 - 4) = *(_DWORD *)(*v134 + 4LL * v106);\n        *(_DWORD *)(v135 + 4LL * v106) = v136;\n        ++v134;\n        ++v62;\n      }\n      while ( v62 );\n      goto LABEL_128;\n    }\n  }\nLABEL_145:\n  sub_438390(v4);\n  free(ptr);\n  free(sa);\n  *v169 = v49;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x4260d0L", 
            "funcEndAddr": "0x426e7dL", 
            "funcName": "sub_4260D0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_426E80(signed int a1)\n{\n  char *v1; // rax\n  char *v2; // r14\n  _DWORD *v3; // rbp\n  signed __int64 v4; // rbx\n  void *v5; // rax\n\n  v1 = (char *)malloc(5 * (8LL * a1 - 8));\n  v2 = v1;\n  if ( !v1 )\n    return 0LL;\n  if ( a1 >= 2 )\n  {\n    v3 = v1 + 32;\n    v4 = 0LL;\n    while ( 1 )\n    {\n      *(_QWORD *)(v3 - 5) = 0LL;\n      *(v3 - 3) = 0;\n      *((_QWORD *)v3 - 4) = -1LL;\n      *(v3 - 6) = -1;\n      *v3 = 0;\n      v5 = calloc(a1, 1uLL);\n      *((_QWORD *)v3 - 1) = v5;\n      if ( !v5 )\n        break;\n      ++v4;\n      v3 += 10;\n      if ( v4 >= a1 - 1LL )\n        return v2;\n    }\n    return 0LL;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x426e80L", 
            "funcEndAddr": "0x426f19L", 
            "funcName": "sub_426E80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_426F20(void *ptr, signed int a2)\n{\n  __int64 v2; // r15\n  void **v3; // rbx\n\n  if ( a2 >= 2 )\n  {\n    v2 = (unsigned int)(a2 - 1);\n    v3 = (void **)((char *)ptr + 24);\n    do\n    {\n      free(*v3);\n      v3 += 5;\n      --v2;\n    }\n    while ( v2 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x426f20L", 
            "funcEndAddr": "0x426f5fL", 
            "funcName": "sub_426F20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_426F60(__int64 a1, unsigned int a2, __int64 *a3)\n{\n  __int64 *v3; // r14\n  __int64 result; // rax\n  __int64 v5; // r13\n  __int64 v6; // rbx\n  __int64 v7; // rbp\n  float v8; // xmm0_4\n\n  v3 = a3;\n  result = sub_4374F0(a2);\n  v5 = result;\n  if ( (signed int)a2 > 0 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = v6;\n      do\n      {\n        LODWORD(v8) = COERCE_UNSIGNED_INT64(sub_424090(*(char **)(a1 + 8 * v6), *(_QWORD *)(a1 + 8 * v7)));\n        *(float *)(*(_QWORD *)(v5 + 8 * v7) + 4 * v6) = 1.0 - v8;\n        result = *(_QWORD *)(v5 + 8 * v6);\n        *(float *)(result + 4 * v7++) = 1.0 - v8;\n      }\n      while ( a2 != v7 );\n      ++v6;\n    }\n    while ( v6 != a2 );\n  }\n  *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x426f60L", 
            "funcEndAddr": "0x426ff1L", 
            "funcName": "sub_426F60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_427000(__int64 a1, unsigned int a2, __int64 *a3)\n{\n  __int64 *v3; // r14\n  __int64 result; // rax\n  __int64 v5; // r13\n  __int64 v6; // rbx\n  __int64 v7; // rbp\n  int v8; // xmm0_4\n\n  v3 = a3;\n  result = sub_4374F0(a2);\n  v5 = result;\n  if ( (signed int)a2 > 0 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = v6;\n      do\n      {\n        v8 = COERCE_UNSIGNED_INT64(sub_424090(*(char **)(a1 + 8 * v6), *(_QWORD *)(a1 + 8 * v7)));\n        *(_DWORD *)(*(_QWORD *)(v5 + 8 * v7) + 4 * v6) = v8;\n        result = *(_QWORD *)(v5 + 8 * v6);\n        *(_DWORD *)(result + 4 * v7++) = v8;\n      }\n      while ( a2 != v7 );\n      ++v6;\n    }\n    while ( v6 != a2 );\n  }\n  *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x427000L", 
            "funcEndAddr": "0x427085L", 
            "funcName": "sub_427000"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_427090(FILE *stream, __int64 a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // er13\n  __int64 v5; // r14\n  __int64 v6; // rbx\n  void *v7; // rbp\n  signed int v8; // er15\n  int v9; // eax\n  signed __int64 v10; // rax\n  _DWORD *v11; // rsi\n  int v12; // [rsp+Ch] [rbp-4Ch]\n  void *ptr; // [rsp+10h] [rbp-48h]\n  int v14; // [rsp+1Ch] [rbp-3Ch]\n  __int64 v15; // [rsp+20h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v14 = 2 * a4;\n  ptr = (void *)sub_4382F0(\"cluster.c\", 464LL, 4LL * (signed int)(2 * a4) - 4);\n  v7 = (void *)sub_43ADB0(\"cluster.c\", 464LL);\n  sub_43ADF0(v7, v4);\n  if ( (unsigned int)sub_43AE40(v7, &v12) )\n  {\n    v8 = 0;\n    v15 = a2;\n    do\n    {\n      v9 = v12;\n      if ( v12 >= (signed int)v4 )\n      {\n        if ( v12 < v14 )\n        {\n          if ( v8 )\n            fwrite(\",\\n\", 2uLL, 1uLL, stream);\n          fputc(40, stream);\n          sub_43ADF0(v7, v4 + v12);\n          sub_43ADF0(v7, *(unsigned int *)(v5 + 40 * (v12 - (signed __int64)(signed int)v4) + 8));\n          sub_43ADF0(v7, *(unsigned int *)(v5 + 40 * (v12 - (signed __int64)(signed int)v4) + 4));\n          v10 = 5 * (v12 - (signed __int64)(signed int)v4);\n          v11 = ptr;\n          *((_DWORD *)ptr + *(signed int *)(v5 + 40 * (v12 - (signed __int64)(signed int)v4) + 8)) = *(_DWORD *)(v5 + 40 * (v12 - (signed __int64)(signed int)v4) + 20);\n          v11[*(signed int *)(v5 + 8 * v10 + 4)] = *(_DWORD *)(v5 + 8 * v10 + 16);\n          v8 = 0;\n          v6 = v15;\n          continue;\n        }\n        if ( v12 == v14 )\n          fwrite(\");\\n\", 3uLL, 1uLL, stream);\n        else\n          fprintf(stream, \"):%.5f\", *((float *)ptr + (signed int)(v12 - v4)));\n      }\n      else\n      {\n        if ( v8 )\n        {\n          fputc(44, stream);\n          v9 = v12;\n        }\n        fprintf(stream, \"%s:%.5f\", *(_QWORD *)(v6 + 40) + 360LL * v9 + 4, *((float *)ptr + v9));\n      }\n      v8 = 1;\n    }\n    while ( (unsigned int)sub_43AE40(v7, &v12) );\n  }\n  sub_43AEB0(v7);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x427090L", 
            "funcEndAddr": "0x427290L", 
            "funcName": "sub_427090"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_427290(FILE *stream, __int64 a2, __int64 a3, signed int a4)\n{\n  signed int v4; // er14\n  __int64 v5; // rbx\n  __int64 v6; // r13\n  __int64 v7; // rax\n  signed int v8; // ecx\n  __int64 v9; // rdx\n  const char *v10; // rcx\n  __int64 v11; // rax\n  signed int v12; // ecx\n  __int64 v13; // rdx\n  const char *v14; // rcx\n  __int64 v15; // [rsp+0h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v15 = a2;\n  if ( a4 >= 2 )\n  {\n    v6 = 0LL;\n    do\n    {\n      fprintf(stream, \"Interior node %d (code %d)\\n\", (unsigned int)v6, (unsigned int)(v4 + v6), v15);\n      fprintf(stream, \"\\tParent: %d (code %d)\\n\", (unsigned int)(*(_DWORD *)v5 - v4));\n      v7 = *(signed int *)(v5 + 4);\n      v8 = 0;\n      if ( (signed int)v7 < v4 )\n        v8 = v4;\n      v9 = (unsigned int)(v7 - v8);\n      if ( (signed int)v7 >= v4 )\n        v10 = \"interior\";\n      else\n        v10 = (const char *)(360 * v7 + *(_QWORD *)(v15 + 40) + 4);\n      fprintf(stream, \"\\tLeft:   %d (%s) %f\\n\", v9, v10, *(float *)(v5 + 16));\n      v11 = *(signed int *)(v5 + 8);\n      v12 = 0;\n      if ( (signed int)v11 < v4 )\n        v12 = v4;\n      v13 = (unsigned int)(v11 - v12);\n      if ( (signed int)v11 >= v4 )\n        v14 = \"interior\";\n      else\n        v14 = (const char *)(360 * v11 + *(_QWORD *)(v15 + 40) + 4);\n      fprintf(stream, \"\\tRight:   %d (%s) %f\\n\", v13, v14, *(float *)(v5 + 20));\n      fprintf(stream, \"\\tHeight:  %f\\n\", *(float *)(v5 + 12));\n      fprintf(stream, \"\\tIncludes:%d seqs\\n\", *(unsigned int *)(v5 + 32));\n      ++v6;\n      v5 += 40LL;\n    }\n    while ( v4 - 1 != v6 );\n  }\n}\n", 
            "funcStartAddr": "0x427290L", 
            "funcEndAddr": "0x4273d7L", 
            "funcName": "sub_427290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4273E0(FILE *stream, _QWORD *a2, signed int *a3)\n{\n  signed int *v3; // r15\n  char *v4; // rbp\n  float v5; // xmm0_4\n  char *v6; // rax\n  const char *v7; // rbp\n  char *v8; // rax\n  int v9; // eax\n  int v10; // ecx\n  unsigned __int8 v11; // al\n  bool v12; // cf\n  bool v13; // zf\n  signed int v14; // eax\n  __int64 v15; // r15\n  char *v16; // rax\n  int v17; // eax\n  int v18; // ecx\n  _QWORD *v19; // rbx\n  signed __int64 v20; // rbp\n  void *v21; // rax\n  char *v22; // rbp\n  int v23; // er14\n  __int64 v24; // r13\n  bool v25; // sf\n  unsigned __int8 v26; // of\n  signed int v27; // xmm0_4\n  char v29; // [rsp+0h] [rbp-2D8h]\n  float v30; // [rsp+4h] [rbp-2D4h]\n  unsigned __int64 v31; // [rsp+8h] [rbp-2D0h]\n  signed int v32; // [rsp+10h] [rbp-2C8h]\n  signed int *v33; // [rsp+18h] [rbp-2C0h]\n  int v34; // [rsp+30h] [rbp-2A8h]\n  int v35[27]; // [rsp+34h] [rbp-2A4h]\n  char s; // [rsp+A0h] [rbp-238h]\n\n  v3 = a3;\n  if ( stream && fgets(&s, 512, stream) )\n  {\n    v30 = 0.0;\n    v32 = 0;\n    while ( 1 )\n    {\n      if ( strstr(&s, \"BLOSUM Clustered Scoring Matrix\") && (v4 = strchr(&s, 47)) != 0LL )\n      {\n        if ( !((*__ctype_b_loc())[v4[1]] & 0x800) )\n        {\n          dword_464008 = 5;\n          return 0LL;\n        }\n        v5 = 0.6931471805599453 / strtod(v4 + 1, 0LL);\nLABEL_12:\n        v30 = v5;\n        v32 = 1;\n      }\n      else if ( strstr(&s, \"substitution matrix,\") )\n      {\n        while ( 1 )\n        {\n          v6 = strrchr(&s, 61);\n          if ( !v6 )\n            break;\n          v7 = v6 + 2;\n          if ( (unsigned int)sub_43C520(v6 + 2, 61LL) )\n          {\n            v5 = strtod(v7, 0LL);\n            goto LABEL_12;\n          }\n        }\n      }\n      v8 = strtok(&s, \" \\t\\n\");\n      if ( v8 )\n      {\n        v9 = *v8;\n        if ( v9 != 35 )\n          break;\n      }\n      if ( !fgets(&s, 512, stream) )\n        goto LABEL_46;\n    }\n    v33 = v3;\n    v10 = v9 - 65;\n    v11 = v9 - 65;\n    v12 = v11 < 0x19u;\n    v13 = v11 == 25;\n    v14 = 26;\n    if ( v12 || v13 )\n      v14 = v10;\n    v34 = v14;\n    LODWORD(v15) = 0;\n    v16 = strtok(0LL, \" \\t\\n\");\n    if ( v16 )\n    {\n      v15 = 0LL;\n      do\n      {\n        v17 = *v16;\n        v18 = 26;\n        if ( (unsigned __int8)(v17 - 65) <= 0x19u )\n          v18 = v17 - 65;\n        v35[v15++] = v18;\n        v16 = strtok(0LL, \" \\t\\n\");\n      }\n      while ( v16 );\n    }\n    v19 = calloc(0x1BuLL, 8uLL);\n    if ( !v19 )\n      sub_4325B0(\"calloc failed\", 8);\n    v20 = 2305843009213693925LL;\n    do\n    {\n      v21 = calloc(0x1BuLL, 4uLL);\n      v19[v20 + 27] = v21;\n      if ( !v21 )\n        sub_4325B0(\"calloc failed\", 4);\n      ++v20;\n    }\n    while ( v20 * 8 );\n    v31 = 0LL;\nLABEL_31:\n    if ( fgets(&s, 512, stream) )\n    {\n      v22 = strtok(&s, \" \\t\\n\");\n      if ( v22 )\n      {\n        v23 = 0;\n        while ( v22 )\n        {\n          v24 = *v22;\n          if ( v24 == 42 || (*__ctype_b_loc())[v24] & 0x400 )\n            --v23;\n          else\n            *(_DWORD *)(v19[*(&v34 + v31)] + 4LL * *(&v34 + v23)) = strtol(v22, 0LL, 10);\n          v22 = strtok(0LL, \" \\t\\n\");\n          v26 = __OFSUB__(v23, (_DWORD)v15);\n          v25 = v23++ - (signed int)v15 < 0;\n          if ( !(v25 ^ v26) )\n          {\n            v12 = v31++ < (unsigned int)v15;\n            if ( v12 )\n              goto LABEL_31;\n            if ( v33 )\n            {\n              v27 = LODWORD(v30);\n              if ( !v32 )\n              {\n                sub_432690(\"Failed to parse PAM matrix scale factor. Defaulting to ln(2)/2!\", v29);\n                v27 = 1051816472;\n              }\n              *v33 = v27;\n            }\n            *a2 = v19;\n            return 1LL;\n          }\n        }\n      }\n    }\n  }\nLABEL_46:\n  dword_464008 = 2;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4273e0L", 
            "funcEndAddr": "0x427779L", 
            "funcName": "sub_4273E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_427780(FILE *stream, __int64 a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  int v5; // ebp\n  int v6; // eax\n  signed int v7; // eax\n  int v8; // ebp\n  int v9; // er12\n  signed int v10; // eax\n  __int64 v11; // rbp\n  unsigned int v12; // er12\n  signed __int64 v13; // r15\n  unsigned int v14; // ebx\n  int v15; // [rsp+Ch] [rbp-3Ch]\n  void *ptr; // [rsp+10h] [rbp-38h]\n\n  ptr = (void *)sub_438810(\"Courier\");\n  v2 = *(signed int *)(a2 + 28);\n  if ( v2 <= 0 )\n  {\n    v15 = 8;\n  }\n  else\n  {\n    v3 = *(_QWORD *)(a2 + 8);\n    v4 = 0LL;\n    v5 = 0;\n    do\n    {\n      v6 = strlen(*(const char **)(v3 + 8 * v4));\n      if ( v5 < v6 )\n        v5 = v6;\n      ++v4;\n    }\n    while ( v4 < v2 );\n    v15 = 8 * v5 + 8;\n  }\n  v7 = *(_DWORD *)(a2 + 24);\n  if ( v7 >= 51 )\n    sub_4325B0(\"No EPS fmt if alignment is >50 columns\", -1);\n  v8 = v15 + 9 * v7;\n  if ( v8 >= 613 )\n    sub_4325B0(\"Alignment too wide to write in EPS\", -1);\n  v9 = 15 * *(_DWORD *)(a2 + 28);\n  if ( v9 >= 793 )\n    sub_4325B0(\"Too many seqs to write in EPS\", -1);\n  fprintf(stream, \"%%!PS-Adobe-3.0 EPSF-3.0\\n\");\n  fprintf(stream, \"%%%%BoundingBox: %d %d %d %d\\n\", 0LL, 0LL, (unsigned int)v8, (unsigned int)v9);\n  fprintf(stream, \"%%%%Pages: 1\\n\");\n  fprintf(stream, \"%%%%EndComments\\n\");\n  fprintf(stream, \"/%s findfont\\n\", ptr);\n  fprintf(stream, \"%d scalefont\\n\", 12LL);\n  fwrite(\"setfont\\n\", 8uLL, 1uLL, stream);\n  fwrite(\"newpath\\n\", 8uLL, 1uLL, stream);\n  v10 = *(_DWORD *)(a2 + 28);\n  if ( v10 > 0 )\n  {\n    v11 = 0LL;\n    do\n    {\n      v12 = 15 * (v10 - v11) - 15;\n      fprintf(stream, \"%d %d moveto\\n\", 0LL, v12);\n      fprintf(stream, \"(%s) show\\n\", *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v11));\n      if ( *(_DWORD *)(a2 + 24) > 0 )\n      {\n        v13 = 0LL;\n        v14 = v15;\n        do\n        {\n          fprintf(stream, \"%d %d moveto\\n\", v14, v12);\n          fprintf(stream, \"(%c) show\\n\", (unsigned int)*(char *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v11) + v13));\n          v14 += 9;\n          ++v13;\n        }\n        while ( v13 < *(signed int *)(a2 + 24) );\n      }\n      ++v11;\n      v10 = *(_DWORD *)(a2 + 28);\n    }\n    while ( v10 > (signed int)v11 );\n  }\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x427780L", 
            "funcEndAddr": "0x4279a8L", 
            "funcName": "sub_427780"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4279B0(char *src)\n{\n  char *v1; // rax\n  int v2; // ebx\n  char *v3; // rax\n  char *v4; // r12\n  signed __int64 v5; // r15\n\n  v1 = strrchr(src, 47);\n  v2 = 0;\n  if ( v1 )\n    v2 = (_DWORD)v1 - (_DWORD)src;\n  v3 = (char *)sub_4382F0(\"file.c\", 73LL, v2 + 2);\n  v4 = v3;\n  if ( v2 <= 0 )\n  {\n    if ( *src == 47 )\n      *v3 = 47;\n    else\n      *v3 = 46;\n    v5 = 1LL;\n  }\n  else\n  {\n    v5 = v2;\n    strncpy(v3, src, v2);\n  }\n  v4[v5] = 0;\n  return v4;\n}\n", 
            "funcStartAddr": "0x4279b0L", 
            "funcEndAddr": "0x427a2dL", 
            "funcName": "sub_4279B0"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_427A30(char *src, int a2)\n{\n  int v2; // er14\n  char *v3; // rbp\n  char *v4; // rbx\n  size_t v5; // rax\n  __int64 v6; // rax\n  const char *v7; // r15\n  char *v8; // rdi\n  const char *v9; // rsi\n  char *v10; // rax\n\n  v2 = a2;\n  v3 = src;\n  v4 = strrchr(src, 47);\n  v5 = strlen(src);\n  v6 = sub_4382F0(\"file.c\", 105LL, v5 + 1);\n  v7 = (const char *)v6;\n  if ( v4 )\n  {\n    v8 = (char *)v6;\n    v9 = v4 + 1;\n  }\n  else\n  {\n    v8 = (char *)v6;\n    v9 = v3;\n  }\n  strcpy(v8, v9);\n  if ( v2 )\n  {\n    v10 = strrchr(v7, 46);\n    if ( v10 )\n      *v10 = 0;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x427a30L", 
            "funcEndAddr": "0x427aacL", 
            "funcName": "sub_427A30"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_427AB0@<rax>(char *src@<rdi>, char *s2@<rsi>, __int64 a3@<rax>)\n{\n  char *v3; // r14\n  char *v4; // rax\n  signed __int64 v5; // rbp\n  char *v6; // rax\n  char *v7; // r15\n  char *v8; // rbp\n  size_t v9; // rax\n  __int64 v10; // rax\n  char *v11; // rbx\n  char *v12; // rdi\n  int v13; // er13\n  size_t v14; // rbp\n  size_t v15; // rax\n  char *v16; // rax\n  char *v17; // r12\n  __int64 v19; // [rsp-8h] [rbp-38h]\n\n  v19 = a3;\n  v3 = s2;\n  v4 = strrchr(src, 47);\n  LODWORD(v5) = 0;\n  if ( v4 )\n    LODWORD(v5) = (_DWORD)v4 - (_DWORD)src;\n  v6 = (char *)sub_4382F0(\"file.c\", 73LL, (signed int)v5 + 2);\n  v7 = v6;\n  if ( (signed int)v5 <= 0 )\n  {\n    if ( *src == 47 )\n      *v6 = 47;\n    else\n      *v6 = 46;\n    v5 = 1LL;\n  }\n  else\n  {\n    v5 = (signed int)v5;\n    strncpy(v6, src, (signed int)v5);\n  }\n  v7[v5] = 0;\n  v8 = strrchr(s2, 47);\n  v9 = strlen(s2);\n  v10 = sub_4382F0(\"file.c\", 105LL, v9 + 1);\n  v11 = (char *)v10;\n  if ( v8 )\n  {\n    v12 = (char *)v10;\n    s2 = v8 + 1;\n  }\n  else\n  {\n    v12 = (char *)v10;\n  }\n  strcpy(v12, s2);\n  v13 = strcmp(v3, v11);\n  v14 = strlen(v7);\n  v15 = strlen(v11);\n  v16 = (char *)sub_4382F0(\"file.c\", 170LL, v15 + v14 + 2);\n  v17 = v16;\n  if ( *v11 == 47 )\n  {\n    strcpy(v16, v11);\n    if ( !v13 )\n      goto LABEL_18;\n  }\n  else\n  {\n    sprintf(v16, \"%s%c%s\", v7, 47LL, v11, v19);\n    if ( !v13 )\n      goto LABEL_18;\n  }\n  if ( strcmp(v17, v3) )\n  {\n    free(v17);\n    v17 = 0LL;\n  }\nLABEL_18:\n  free(v7);\n  free(v11);\n  return v17;\n}\n", 
            "funcStartAddr": "0x427ab0L", 
            "funcEndAddr": "0x427c16L", 
            "funcName": "sub_427AB0"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_427C20@<rax>(__int64 a1@<rax>, const char *a2@<rdi>, const char *a3@<rsi>)\n{\n  size_t v3; // rbx\n  size_t v4; // rax\n  char *v5; // rax\n  char *v6; // r15\n  __int64 v8; // [rsp-8h] [rbp-28h]\n\n  v8 = a1;\n  v3 = strlen(a2);\n  v4 = strlen(a3);\n  v5 = (char *)sub_4382F0(\"file.c\", 170LL, v3 + v4 + 2);\n  v6 = v5;\n  if ( *a3 == 47 )\n    strcpy(v5, a3);\n  else\n    sprintf(v5, \"%s%c%s\", a2, 47LL, a3, v8);\n  return v6;\n}\n", 
            "funcStartAddr": "0x427c20L", 
            "funcEndAddr": "0x427c95L", 
            "funcName": "sub_427C20"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_427D00(char *s, char *name, _QWORD *a3)\n{\n  _QWORD *v3; // rbp\n  char *v4; // rax\n  char *v5; // rax\n  char *v6; // r15\n  char *v7; // rbx\n  FILE *v8; // r12\n  int v9; // er14\n  FILE *v10; // rax\n  char sa; // [rsp+10h] [rbp-438h]\n\n  v3 = a3;\n  if ( name )\n  {\n    v4 = getenv(name);\n    v5 = (char *)sub_4381A0(v4);\n    v6 = v5;\n    if ( v5 )\n    {\n      v7 = strtok(v5, \":\");\n      if ( v7 )\n      {\n        v8 = 0LL;\n        while ( 1 )\n        {\n          v9 = strlen(s);\n          if ( (signed int)(v9 + strlen(v7)) >= 1023 )\n          {\n            free(v6);\n            return 0LL;\n          }\n          sprintf(&sa, \"%s%c%s\", v7, 47LL, s);\n          v10 = fopen(&sa, \"r\");\n          if ( v10 )\n            break;\n          v7 = strtok(0LL, \":\");\n          if ( !v7 )\n          {\n            v7 = 0LL;\n            goto LABEL_14;\n          }\n        }\n        v8 = v10;\nLABEL_14:\n        if ( !v3 )\n          goto LABEL_16;\n      }\n      else\n      {\n        v7 = 0LL;\n        v8 = 0LL;\n        if ( !v3 )\n          goto LABEL_16;\n      }\n      *v3 = sub_4381A0(v7);\nLABEL_16:\n      free(v6);\n      return v8;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x427d00L", 
            "funcEndAddr": "0x427e15L", 
            "funcName": "sub_427D00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_427E20(const char *a1)\n{\n  FILE *v1; // rax\n\n  v1 = fopen(a1, \"r\");\n  if ( !v1 )\n    return 0LL;\n  fclose(v1);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x427e20L", 
            "funcEndAddr": "0x427e43L", 
            "funcName": "sub_427E20"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_427E50(int a1, __int64 a2, __int64 a3, int a4, __int64 a5, int *a6, _QWORD *a7, _QWORD *a8)\n{\n  int *v8; // r15\n  int v9; // er14\n  __int64 v10; // rax\n  _QWORD *v11; // rcx\n  _QWORD *v12; // rsi\n  int v13; // ebx\n  const char *v14; // r13\n  int v15; // eax\n  char *v16; // rax\n  _DWORD *v17; // rsi\n  signed __int64 v18; // rcx\n  const char **v19; // rdx\n  _QWORD *v20; // rsi\n  signed __int64 v21; // rcx\n  signed __int64 v22; // r14\n  int *v23; // rbx\n  int v25; // eax\n  __int64 v26; // rsi\n  char *v27; // rdi\n  int v28; // eax\n  char *v29; // rax\n  int v30; // eax\n  size_t v31; // rdx\n  __int64 v32; // rax\n  __int64 v33; // rcx\n  _DWORD *v34; // rbp\n  __int64 v35; // r15\n  const char *v36; // rbx\n  size_t v37; // r14\n  bool v38; // zf\n  int v39; // eax\n  int v40; // [rsp+14h] [rbp-64h]\n  __int64 v41; // [rsp+18h] [rbp-60h]\n  signed int v42; // [rsp+24h] [rbp-54h]\n  int *v43; // [rsp+28h] [rbp-50h]\n  __int64 v44; // [rsp+30h] [rbp-48h]\n  __int64 v45; // [rsp+38h] [rbp-40h]\n  int v46; // [rsp+40h] [rbp-38h]\n\n  v8 = a6;\n  v9 = a4;\n  v10 = a2;\n  v11 = a8;\n  v12 = a7;\n  v13 = dword_44FB08;\n  if ( dword_44FB08 >= a1\n    || (v14 = *(const char **)(v10 + 8LL * dword_44FB08), *v14 != 45)\n    || (v44 = v10, v41 = a3, v15 = strcmp(*(const char **)(v10 + 8LL * dword_44FB08), \"-\"), v12 = a7, v11 = a8, !v15) )\n  {\n    *v8 = v13;\n    *v11 = 0LL;\n    *v12 = 0LL;\n    return 0LL;\n  }\n  if ( !strcmp(v14, \"--\") )\n  {\n    dword_44FB08 = v13 + 1;\n    *v8 = v13 + 1;\n    *a7 = 0LL;\n    *a8 = 0LL;\n    return 0LL;\n  }\n  v16 = (char *)qword_463B20;\n  if ( qword_463B20 )\n    goto LABEL_8;\n  if ( strncmp(v14, \"--\", 2uLL) )\n  {\n    qword_463B20 = (__int64)(v14 + 1);\n    v16 = (char *)(v14 + 1);\nLABEL_8:\n    if ( v9 <= 0 )\nLABEL_13:\n      sub_4325B0(\"No such option \\\"%c\\\".\\n%s\", *v16);\n    v17 = (_DWORD *)(v41 + 8);\n    v18 = 0LL;\n    while ( *v17 != 1 || *v16 != *(_BYTE *)(*((_QWORD *)v17 - 1) + 1LL) )\n    {\n      ++v18;\n      v17 += 4;\n      if ( v18 >= v9 )\n        goto LABEL_13;\n    }\n    v19 = (const char **)a8;\n    v20 = a7;\n    v21 = 16 * v18;\n    *a7 = *(_QWORD *)(v41 + v21);\n    v22 = v21 + v41;\n    v23 = (int *)(v21 + v41 + 12);\n    if ( *v23 )\n    {\n      if ( !*(_BYTE *)(qword_463B20 + 1) )\n      {\n        v28 = dword_44FB08;\n        if ( dword_44FB08 + 1 >= a1 )\n          sub_4325B0(\"Option %s requires an argument\\n%s\", *(_QWORD *)v22);\n        *a8 = *(_QWORD *)(v44 + 8LL * dword_44FB08 + 8);\n        dword_44FB08 = v28 + 2;\n        goto LABEL_24;\n      }\n      *a8 = qword_463B20 + 1;\n    }\n    else\n    {\n      *a8 = 0LL;\n      if ( *(_BYTE *)(qword_463B20 + 1) )\n      {\n        ++qword_463B20;\n        goto LABEL_25;\n      }\n    }\n    ++dword_44FB08;\nLABEL_24:\n    qword_463B20 = 0LL;\n    goto LABEL_25;\n  }\n  v29 = strchr(v14, 61);\n  qword_463B20 = (__int64)v29;\n  if ( v29 )\n  {\n    *v29 = 0;\n    qword_463B20 = (__int64)(v29 + 1);\n    v14 = *(const char **)(v44 + 8LL * v13);\n  }\n  v30 = strlen(v14);\n  if ( v9 <= 0 )\nLABEL_59:\n    sub_4325B0(\"No such option \\\"%s\\\".\\n%s\", (char)v14);\n  v43 = v8;\n  v46 = v30;\n  v31 = v30;\n  v32 = v9;\n  v33 = v41;\n  v34 = (_DWORD *)(v41 + 8);\n  v35 = 0LL;\n  v40 = 0;\n  v42 = 0;\n  v45 = v9;\n  while ( *v34 )\n  {\nLABEL_47:\n    ++v35;\n    v34 += 4;\n    if ( v35 >= v32 )\n      goto LABEL_48;\n  }\n  v36 = (const char *)*((_QWORD *)v34 - 1);\n  v37 = v31;\n  if ( strncmp(*((const char **)v34 - 1), v14, v31) )\n  {\n    v33 = v41;\n    v31 = v37;\nLABEL_46:\n    v32 = v45;\n    goto LABEL_47;\n  }\n  ++v42;\n  v38 = v37 == strlen(v36);\n  v31 = v37;\n  if ( !v38 )\n  {\n    v40 = v35;\n    v33 = v41;\n    goto LABEL_46;\n  }\n  v40 = v35;\n  v33 = v41;\nLABEL_48:\n  if ( v42 < 2 )\n  {\n    v8 = v43;\n    if ( v42 )\n      goto LABEL_60;\n    goto LABEL_59;\n  }\n  if ( v46 != strlen(*(const char **)(v33 + 16LL * (unsigned int)v35)) )\n    sub_4325B0(\"Option \\\"%s\\\" is ambiguous; please be more specific.\\n%s\", (char)v14);\n  v8 = v43;\nLABEL_60:\n  v20 = (_QWORD *)v41;\n  v22 = v41 + 16LL * v40;\n  *a7 = *(_QWORD *)v22;\n  v23 = (int *)(v22 + 12);\n  if ( *(_DWORD *)(v22 + 12) )\n  {\n    if ( qword_463B20 )\n    {\n      v19 = (const char **)a8;\n      *a8 = qword_463B20;\n      qword_463B20 = 0LL;\n      ++dword_44FB08;\n    }\n    else\n    {\n      v39 = dword_44FB08;\n      if ( dword_44FB08 + 1 >= a1 )\n        sub_4325B0(\"Option %s requires an argument\\n%s\", *(_QWORD *)v22);\n      v19 = (const char **)a8;\n      *a8 = *(_QWORD *)(v44 + 8LL * dword_44FB08 + 8);\n      dword_44FB08 = v39 + 2;\n    }\n  }\n  else\n  {\n    if ( qword_463B20 )\n      sub_4325B0(\"Option %s does not take an argument\\n%s\", *(_QWORD *)v22);\n    v19 = (const char **)a8;\n    *a8 = 0LL;\n    ++dword_44FB08;\n  }\nLABEL_25:\n  v25 = *v23;\n  if ( *v23 )\n  {\n    if ( v25 != 1 )\n      goto LABEL_29;\n    if ( !(unsigned int)sub_43C400(*v19, v20) )\n    {\n      v26 = *(_QWORD *)v22;\n      v27 = \"Option %s requires an integer argument\\n%s\";\n      goto LABEL_54;\n    }\n    v25 = *v23;\n    v19 = (const char **)a8;\nLABEL_29:\n    if ( v25 == 2 )\n    {\n      if ( (unsigned int)sub_43C520(*v19, v20) )\n      {\n        v25 = *v23;\n        v19 = (const char **)a8;\n        goto LABEL_32;\n      }\n      v26 = *(_QWORD *)v22;\n      v27 = \"Option %s requires a numerical argument\\n%s\";\nLABEL_54:\n      sub_4325B0(v27, v26);\n    }\nLABEL_32:\n    if ( v25 == 3 && strlen(*v19) != 1 )\n    {\n      v26 = *(_QWORD *)v22;\n      v27 = \"Option %s requires a single-character argument\\n%s\";\n      goto LABEL_54;\n    }\n  }\n  *v8 = dword_44FB08;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x427e50L", 
            "funcEndAddr": "0x42835bL", 
            "funcName": "sub_427E50"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_428360()\n{\n  __int64 v0; // rax\n  __int64 v1; // rbx\n  _QWORD *v2; // rax\n  signed __int64 v3; // rcx\n  signed __int64 v4; // rax\n\n  v0 = sub_4382F0(\"gki.c\", 294LL, 24LL);\n  v1 = v0;\n  *(_QWORD *)(v0 + 8) = 433791696896LL;\n  v2 = (_QWORD *)sub_4382F0(\"gki.c\", 298LL, 2424LL);\n  *(_QWORD *)v1 = v2;\n  v3 = *(signed int *)(v1 + 12);\n  if ( v3 > 0 )\n  {\n    *v2 = 0LL;\n    if ( (_DWORD)v3 != 1 )\n    {\n      v4 = 1LL;\n      do\n        *(_QWORD *)(*(_QWORD *)v1 + 8 * v4++) = 0LL;\n      while ( v4 < v3 );\n    }\n  }\n  *(_DWORD *)(v1 + 16) = 0;\n  return v1;\n}\n", 
            "funcStartAddr": "0x428360L", 
            "funcEndAddr": "0x4283e0L", 
            "funcName": "sub_428360"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4283E0(void *ptr)\n{\n  _DWORD *v1; // r14\n  int v2; // eax\n  _QWORD *v3; // rdi\n  signed __int64 v4; // r15\n  __int64 v5; // rcx\n  __int64 v6; // rbx\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = *((_DWORD *)ptr + 3);\n    if ( v2 <= 0 )\n    {\n      v3 = *(_QWORD **)ptr;\n    }\n    else\n    {\n      v3 = *(_QWORD **)ptr;\n      v4 = 0LL;\n      do\n      {\n        v5 = v3[v4];\n        if ( v5 )\n        {\n          do\n          {\n            v6 = *(_QWORD *)(v5 + 16);\n            if ( *(_QWORD *)v5 )\n            {\n              free(*(void **)v5);\n              v3 = *(_QWORD **)v1;\n            }\n            free((void *)v3[v4]);\n            *(_QWORD *)(*(_QWORD *)v1 + 8 * v4) = v6;\n            v3 = *(_QWORD **)v1;\n            v5 = *(_QWORD *)(*(_QWORD *)v1 + 8 * v4);\n          }\n          while ( v5 );\n          v2 = v1[3];\n        }\n        ++v4;\n      }\n      while ( v4 < v2 );\n    }\n    free(v3);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x4283e0L", 
            "funcEndAddr": "0x428470L", 
            "funcName": "sub_4283E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_428470(__int64 *a1, const char *a2)\n{\n  __int64 *v2; // r14\n  char v3; // al\n  char *v4; // rcx\n  int v5; // edx\n  int v6; // edx\n  __int64 v7; // rbx\n  __int64 v8; // r15\n  size_t v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rcx\n  int v12; // ecx\n  __int64 v13; // rax\n  int v14; // eax\n  signed __int64 v15; // r15\n  __int64 v16; // rax\n  signed int *v17; // rbx\n  __int64 v18; // rax\n  _QWORD *v19; // rax\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rax\n  __int64 v22; // r8\n  _QWORD *v23; // rdi\n  __int64 v24; // r9\n  char **v25; // rsi\n  char v26; // al\n  char *v27; // rdi\n  __int64 v28; // rdx\n  int v29; // edx\n  __int64 v30; // rdi\n\n  v2 = a1;\n  v3 = *a2;\n  if ( *a2 )\n  {\n    v4 = (char *)(a2 + 2);\n    v5 = 0;\n    while ( 1 )\n    {\n      v6 = v3 + (v5 << 7);\n      if ( !*(v4 - 1) )\n        break;\n      v5 = (*(v4 - 1) + (v6 << 7)) % *((_DWORD *)a1 + 3);\n      v3 = *v4;\n      v4 += 2;\n      if ( !v3 )\n        goto LABEL_8;\n    }\n    v5 = v6 % *((_DWORD *)a1 + 3);\n  }\n  else\n  {\n    v5 = 0;\n  }\nLABEL_8:\n  v7 = v5;\n  v8 = *(_QWORD *)(*a1 + 8LL * v5);\n  *(_QWORD *)(*a1 + 8 * v7) = sub_4382F0(\"gki.c\", 189LL, 24LL);\n  v9 = strlen(a2);\n  v10 = sub_4382F0(\"gki.c\", 190LL, v9 + 1);\n  v11 = *a1;\n  **(_QWORD **)(*a1 + 8 * v7) = v10;\n  strcpy(**(char ***)(v11 + 8 * v7), a2);\n  v12 = *((_DWORD *)a1 + 4);\n  v13 = *(_QWORD *)(*a1 + 8 * v7);\n  *(_DWORD *)(v13 + 8) = v12;\n  *(_QWORD *)(v13 + 16) = v8;\n  v14 = v12 + 1;\n  *((_DWORD *)a1 + 4) = v12 + 1;\n  if ( v12 >= 3 * *((_DWORD *)a1 + 3) )\n  {\n    v15 = *((signed int *)a1 + 2);\n    if ( v15 <= 2 )\n    {\n      if ( (unsigned int)(v15 + 1) >= 4 )\n        sub_4325B0(\"bad primelevel in gki_alloc()\", (char)a2);\n      v16 = sub_4382F0(\"gki.c\", 294LL, 24LL);\n      v17 = (signed int *)v16;\n      *(_DWORD *)(v16 + 8) = v15 + 1;\n      v18 = dword_440394[v15];\n      v17[3] = v18;\n      v19 = (_QWORD *)sub_4382F0(\"gki.c\", 298LL, 24 * v18);\n      *(_QWORD *)v17 = v19;\n      v20 = v17[3];\n      if ( v20 > 0 )\n      {\n        *v19 = 0LL;\n        if ( (_DWORD)v20 != 1 )\n        {\n          v21 = 1LL;\n          do\n            *(_QWORD *)(*(_QWORD *)v17 + 8 * v21++) = 0LL;\n          while ( v21 < v20 );\n        }\n      }\n      v17[4] = 0;\n      v22 = *((signed int *)a1 + 3);\n      v23 = (_QWORD *)*a1;\n      if ( v22 > 0 )\n      {\n        v24 = 0LL;\n        do\n        {\n          v25 = (char **)v23[v24];\n          if ( v25 )\n          {\n            do\n            {\n              v26 = **v25;\n              if ( v26 )\n              {\n                v27 = *v25 + 2;\n                LODWORD(v28) = 0;\n                while ( 1 )\n                {\n                  v29 = v26 + ((_DWORD)v28 << 7);\n                  if ( !*(v27 - 1) )\n                    break;\n                  LODWORD(v28) = (*(v27 - 1) + (v29 << 7)) % (signed int)v20;\n                  v26 = *v27;\n                  v27 += 2;\n                  if ( !v26 )\n                    goto LABEL_26;\n                }\n                LODWORD(v28) = v29 % (signed int)v20;\n              }\n              else\n              {\n                LODWORD(v28) = 0;\n              }\nLABEL_26:\n              v28 = (signed int)v28;\n              v30 = *(_QWORD *)(*(_QWORD *)v17 + 8LL * (signed int)v28);\n              *(_QWORD *)(*(_QWORD *)v17 + 8 * v28) = v25;\n              v25 = (char **)v25[2];\n              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8LL * (signed int)v28) + 16LL) = v30;\n            }\n            while ( v25 );\n            v23 = (_QWORD *)*v2;\n          }\n          ++v24;\n        }\n        while ( v24 != v22 );\n      }\n      free(v23);\n      *((_DWORD *)v2 + 2) = v17[2];\n      *((_DWORD *)v2 + 3) = v17[3];\n      *v2 = *(_QWORD *)v17;\n      free(v17);\n      v14 = *((_DWORD *)v2 + 4);\n    }\n  }\n  return (unsigned int)(v14 - 1);\n}\n", 
            "funcStartAddr": "0x428470L", 
            "funcEndAddr": "0x4286b8L", 
            "funcName": "sub_428470"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4286C0(__int64 a1, const char *a2)\n{\n  char v2; // al\n  char *v3; // rcx\n  int v4; // edx\n  int v5; // edx\n  __int64 v6; // rbp\n  unsigned int v7; // er14\n\n  v2 = *a2;\n  if ( *a2 )\n  {\n    v3 = (char *)(a2 + 2);\n    v4 = 0;\n    while ( 1 )\n    {\n      v5 = v2 + (v4 << 7);\n      if ( !*(v3 - 1) )\n        break;\n      v4 = (*(v3 - 1) + (v5 << 7)) % *(_DWORD *)(a1 + 12);\n      v2 = *v3;\n      v3 += 2;\n      if ( !v2 )\n        goto LABEL_8;\n    }\n    v4 = v5 % *(_DWORD *)(a1 + 12);\n  }\n  else\n  {\n    v4 = 0;\n  }\nLABEL_8:\n  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8LL * v4);\n  v7 = -1;\n  if ( v6 )\n  {\n    while ( strcmp(a2, *(const char **)v6) )\n    {\n      v6 = *(_QWORD *)(v6 + 16);\n      if ( !v6 )\n        return v7;\n    }\n    v7 = *(_DWORD *)(v6 + 8);\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x4286c0L", 
            "funcEndAddr": "0x428755L", 
            "funcName": "sub_4286C0"
        }, 
        {
            "decompiledFuncCode": "int __usercall sub_428760@<eax>(__int64 a1@<rax>, __int64 *a2@<rdi>)\n{\n  signed int *v2; // r15\n  __int64 v3; // rax\n  __int64 v4; // rcx\n  __int64 v5; // rdx\n  signed int v6; // ebp\n  signed int v7; // ebx\n  unsigned int v8; // er14\n  __int64 v9; // rdi\n  signed int v10; // esi\n  __int64 v12; // [rsp-8h] [rbp-28h]\n\n  v12 = a1;\n  v2 = (signed int *)a2;\n  v3 = *((signed int *)a2 + 3);\n  if ( v3 <= 0 )\n  {\n    v8 = 0;\n    v7 = 0x7FFFFFFF;\n    v6 = -1;\n  }\n  else\n  {\n    v4 = *a2;\n    v5 = 0LL;\n    v6 = -1;\n    v7 = 0x7FFFFFFF;\n    v8 = 0;\n    do\n    {\n      v9 = *(_QWORD *)(v4 + 8 * v5);\n      v10 = 0;\n      if ( v9 )\n      {\n        v10 = 0;\n        do\n        {\n          ++v10;\n          v9 = *(_QWORD *)(v9 + 16);\n        }\n        while ( v9 );\n      }\n      v8 += (unsigned int)v10 < 1;\n      if ( v10 >= v6 )\n        v6 = v10;\n      if ( v10 <= v7 )\n        v7 = v10;\n      ++v5;\n    }\n    while ( v5 < v3 );\n  }\n  printf(\"Total keys:        %d\\n\", (unsigned int)v2[4], v12);\n  printf(\"Hash table size:   %d\\n\", (unsigned int)v2[3]);\n  printf(\"Average occupancy: %.1f\\n\", (float)((float)v2[4] / (float)v2[3]));\n  printf(\"Unoccupied slots:  %d\\n\", v8);\n  printf(\"Most in one slot:  %d\\n\", (unsigned int)v6);\n  return printf(\"Least in one slot: %d\\n\", (unsigned int)v7);\n}\n", 
            "funcStartAddr": "0x428760L", 
            "funcEndAddr": "0x42884aL", 
            "funcName": "sub_428760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_428960(FILE **a1, void *a2, _WORD *a3, _DWORD *a4)\n{\n  _DWORD *v4; // r14\n  _WORD *v5; // r15\n  unsigned int v6; // ebx\n\n  v4 = a4;\n  v5 = a3;\n  if ( a2 )\n  {\n    if ( !fread(a2, 0x20uLL, 1uLL, *a1) )\n      goto LABEL_7;\n    if ( v5 )\n    {\nLABEL_4:\n      if ( fread(v5, 2uLL, 1uLL, *a1) )\n      {\n        if ( v4 )\n          goto LABEL_6;\nLABEL_10:\n        fseek(*a1, 4LL, 1);\n        goto LABEL_11;\n      }\nLABEL_7:\n      dword_464008 = 2;\n      return 0;\n    }\n  }\n  else\n  {\n    fseek(*a1, 32LL, 1);\n    if ( v5 )\n      goto LABEL_4;\n  }\n  fseek(*a1, 2LL, 1);\n  if ( !v4 )\n    goto LABEL_10;\nLABEL_6:\n  if ( !fread(v4, 4uLL, 1uLL, *a1) )\n    goto LABEL_7;\nLABEL_11:\n  if ( v5 )\n    *v5 = sub_43C6E0((unsigned __int16)*v5, 4LL);\n  v6 = 1;\n  if ( v4 )\n    *v4 = sub_43C6F0((unsigned int)*v4, 4LL);\n  return v6;\n}\n", 
            "funcStartAddr": "0x428960L", 
            "funcEndAddr": "0x428a46L", 
            "funcName": "sub_428960"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_428A50(__int64 a1, char *a2, void *a3, _DWORD *a4, _QWORD *a5)\n{\n  int v5; // er12\n  unsigned int v6; // er15\n  unsigned int v7; // er14\n  unsigned int v8; // er12\n  int v9; // eax\n  int v10; // ecx\n  int v11; // er14\n  unsigned int v12; // er13\n  unsigned __int16 v14; // [rsp+6h] [rbp-82h]\n  unsigned int v15; // [rsp+8h] [rbp-80h]\n  int v16; // [rsp+Ch] [rbp-7Ch]\n  void *v17; // [rsp+10h] [rbp-78h]\n  _DWORD *v18; // [rsp+18h] [rbp-70h]\n  _QWORD *v19; // [rsp+20h] [rbp-68h]\n  char *s2; // [rsp+28h] [rbp-60h]\n  char s1; // [rsp+30h] [rbp-58h]\n  char v22; // [rsp+50h] [rbp-38h]\n\n  v22 = 0;\n  v19 = a5;\n  v18 = a4;\n  v17 = a3;\n  s2 = a2;\n  v5 = *(unsigned __int16 *)(a1 + 8);\n  v6 = v5 + *(_DWORD *)(a1 + 12);\n  v7 = (v5 + v6 + 1) >> 1;\n  fseek(*(FILE **)a1, 38 * v7, 0);\n  if ( (unsigned int)sub_428960((FILE **)a1, &s1, &v14, &v15) )\n  {\n    v8 = v5 + 1;\n    do\n    {\n      v9 = strcmp(&s1, s2);\n      if ( !v9 )\n        break;\n      if ( v8 >= v6 )\n        return 0LL;\n      v10 = v7 + 1;\n      v11 = v7 - 1;\n      if ( v9 < 0 )\n        v8 = v10;\n      v12 = v11;\n      if ( v9 < 0 )\n        v12 = v6;\n      v7 = (v8 + v12) >> 1;\n      fseek(*(FILE **)a1, 38 * v7, 0);\n      v6 = v12;\n    }\n    while ( (unsigned int)sub_428960((FILE **)a1, &s1, &v14, &v15) );\n  }\n  fseek(*(FILE **)a1, 38LL * v14, 0);\n  sub_428960((FILE **)a1, v17, 0LL, &v16);\n  *v18 = v16;\n  *v19 = v15;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x428a50L", 
            "funcEndAddr": "0x428b86L", 
            "funcName": "sub_428A50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_428B90(void *ptr)\n{\n  fclose(*(FILE **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x428b90L", 
            "funcEndAddr": "0x428ba5L", 
            "funcName": "sub_428B90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_428BB0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_4382F0(\"gsi.c\", 200LL, 40LL);\n  *(_QWORD *)v0 = sub_4382F0(\"gsi.c\", 201LL, 80LL);\n  *(_QWORD *)(v0 + 8) = sub_4382F0(\"gsi.c\", 202LL, 40LL);\n  *(_QWORD *)(v0 + 24) = sub_4382F0(\"gsi.c\", 203LL, 4000LL);\n  *(_WORD *)(v0 + 16) = 0;\n  *(_DWORD *)(v0 + 32) = 0;\n  return v0;\n}\n", 
            "funcStartAddr": "0x428bb0L", 
            "funcEndAddr": "0x428c21L", 
            "funcName": "sub_428BB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_428C90(__int64 a1, char *a2, int a3)\n{\n  int v3; // er14\n  __int64 v4; // rax\n  __int64 v5; // rdx\n  __int64 result; // rax\n\n  v3 = a3;\n  if ( (signed int)strlen(a2) >= 32 )\n    sub_4325B0(\"File name too long to be indexed.\", (char)a2);\n  v4 = sub_438810(a2);\n  v5 = *(unsigned __int16 *)(a1 + 16);\n  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v4;\n  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = v3;\n  *(_WORD *)(a1 + 16) = v5 + 1;\n  result = (unsigned __int16)(v5 + 1);\n  if ( (_DWORD)result == 10 * ((unsigned __int16)(v5 + 1) / 0xAu) )\n  {\n    *(_QWORD *)a1 = sub_438340(\"gsi.c\", 229LL, *(_QWORD *)a1, (unsigned int)(8 * result + 80));\n    result = sub_438340(\"gsi.c\", 230LL, *(_QWORD *)(a1 + 8), 4LL * *(unsigned __int16 *)(a1 + 16) + 40);\n    *(_QWORD *)(a1 + 8) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428c90L", 
            "funcEndAddr": "0x428d43L", 
            "funcName": "sub_428C90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_428D50(__int64 a1, const char *a2, signed int a3, signed __int64 a4)\n{\n  signed __int64 v4; // r14\n  signed int v5; // er15\n  __int64 v6; // rdx\n  __int64 v7; // rcx\n  signed __int64 result; // rax\n\n  v4 = a4;\n  v5 = a3;\n  if ( strlen(a2) >= 0x20 )\n    sub_4325B0(\"key too long in GSI index\", (char)a2);\n  if ( v5 >= 0x10000 )\n    sub_4325B0(\"too many files in GSI index\", (char)a2);\n  if ( v4 >= 0x100000000LL )\n    sub_4325B0(\"offset too big in GSI index\", (char)a2);\n  strncpy((char *)(*(_QWORD *)(a1 + 24) + 40LL * *(signed int *)(a1 + 32)), a2, 0x1FuLL);\n  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 40LL * *(signed int *)(a1 + 32) + 31) = 0;\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(signed int *)(a1 + 32);\n  result = 5 * v7;\n  *(_WORD *)(v6 + 8 * result + 32) = v5;\n  *(_DWORD *)(v6 + 8 * result + 36) = v4;\n  LODWORD(v7) = v7 + 1;\n  *(_DWORD *)(a1 + 32) = v7;\n  if ( (_DWORD)v7 == 100\n                   * (((unsigned __int64)(1374389535LL * (signed int)v7) >> 63)\n                    + (unsigned int)(1374389535LL * (signed int)v7 >> 37)) )\n  {\n    result = sub_438340(\"gsi.c\", 247LL, v6, 8 * result + 4040);\n    *(_QWORD *)(a1 + 24) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428d50L", 
            "funcEndAddr": "0x428e3cL", 
            "funcName": "sub_428D50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_428E70(FILE *s, __int64 a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // rsi\n  __int64 v4; // rdx\n  unsigned __int64 result; // rax\n  unsigned __int64 v6; // rbx\n  void *v7; // rsi\n  __int64 v8; // rcx\n  __int64 v9; // rbx\n  unsigned __int64 v10; // r12\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  __int64 v13; // rcx\n\n  v2 = a2;\n  v3 = *(unsigned __int16 *)(a2 + 16);\n  v4 = *(signed int *)(v2 + 32);\n  result = sub_428F20(s);\n  if ( *(_WORD *)(v2 + 16) )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = *(void **)(*(_QWORD *)v2 + 8 * v6);\n      v8 = *(unsigned int *)(*(_QWORD *)(v2 + 8) + 4 * v6++);\n      sub_429010(s, v7);\n      result = *(unsigned __int16 *)(v2 + 16);\n    }\n    while ( v6 < result );\n  }\n  if ( *(_DWORD *)(v2 + 32) )\n  {\n    v9 = 0LL;\n    v10 = 0LL;\n    do\n    {\n      v11 = *(_QWORD *)(v2 + 24);\n      v12 = *(unsigned __int16 *)(v11 + v9 + 32);\n      v13 = *(unsigned int *)(v11 + v9 + 36);\n      sub_429100(s, (void *)(v11 + v9));\n      ++v10;\n      result = *(unsigned int *)(v2 + 32);\n      v9 += 40LL;\n    }\n    while ( v10 < result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x428e70L", 
            "funcEndAddr": "0x428f16L", 
            "funcName": "sub_428E70"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_428F20(FILE *s, signed int a2, signed __int64 a3)\n{\n  unsigned int v3; // ebx\n  size_t result; // rax\n  __int16 v5; // [rsp+Ah] [rbp-3Eh]\n  int v6; // [rsp+Ch] [rbp-3Ch]\n  int ptr; // [rsp+10h] [rbp-38h]\n\n  v3 = a3;\n  if ( a2 >= 0x10000 )\n    sub_4325B0(\"GSI: nfiles out of range\", a2);\n  if ( a3 >= 0x100000000LL )\n    sub_4325B0(\"GSI: nkeys out of range\", a2);\n  v5 = sub_43C700((unsigned __int16)a2);\n  v6 = sub_43C710(v3);\n  ptr = 4805447;\n  if ( fwrite(&ptr, 1uLL, 0x20uLL, s) <= 0x1F )\n    sub_432770(\"gsi.c\", 314LL);\n  if ( !fwrite(&v5, 2uLL, 1uLL, s) )\n    sub_432770(\"gsi.c\", 315LL);\n  result = fwrite(&v6, 4uLL, 1uLL, s);\n  if ( !result )\n    sub_432770(\"gsi.c\", 316LL);\n  return result;\n}\n", 
            "funcStartAddr": "0x428f20L", 
            "funcEndAddr": "0x42900aL", 
            "funcName": "sub_428F20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_429010(FILE *s, void *ptr, signed int a3, unsigned int a4)\n{\n  unsigned int v4; // er15\n  signed int v5; // ebp\n  unsigned int v6; // ebx\n  __int16 ptra; // [rsp+Ah] [rbp-2Eh]\n  int v9; // [rsp+Ch] [rbp-2Ch]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = 0;\n  if ( strlen((const char *)ptr) <= 0x1F )\n  {\n    if ( v5 >= 0x10000 )\n      sub_4325B0(\"GSI: file index out of range\", (char)ptr);\n    ptra = sub_43C700((unsigned __int16)v5);\n    v9 = sub_43C710(v4);\n    if ( fwrite(ptr, 1uLL, 0x20uLL, s) <= 0x1F )\n      sub_432770(\"gsi.c\", 347LL);\n    if ( !fwrite(&ptra, 2uLL, 1uLL, s) )\n      sub_432770(\"gsi.c\", 348LL);\n    v6 = 1;\n    if ( !fwrite(&v9, 4uLL, 1uLL, s) )\n      sub_432770(\"gsi.c\", 349LL);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x429010L", 
            "funcEndAddr": "0x4290fcL", 
            "funcName": "sub_429010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_429100(FILE *s, void *ptr, signed int a3, signed __int64 a4)\n{\n  signed __int64 v4; // r15\n  signed int v5; // ebp\n  unsigned int v6; // ebx\n  __int16 ptra; // [rsp+Ah] [rbp-2Eh]\n  int v9; // [rsp+Ch] [rbp-2Ch]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = 0;\n  if ( strlen((const char *)ptr) <= 0x1F )\n  {\n    if ( v5 >= 0x10000 )\n      sub_4325B0(\"GSI: file index out of range\", (char)ptr);\n    if ( v4 >= 0x100000000LL )\n      sub_4325B0(\"GSI: offset out of range\", (char)ptr);\n    ptra = sub_43C700((unsigned __int16)v5);\n    v9 = sub_43C710((unsigned int)v4);\n    if ( fwrite(ptr, 1uLL, 0x20uLL, s) <= 0x1F )\n      sub_432770(\"gsi.c\", 382LL);\n    if ( !fwrite(&ptra, 2uLL, 1uLL, s) )\n      sub_432770(\"gsi.c\", 383LL);\n    v6 = 1;\n    if ( !fwrite(&v9, 4uLL, 1uLL, s) )\n      sub_432770(\"gsi.c\", 384LL);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x429100L", 
            "funcEndAddr": "0x429207L", 
            "funcName": "sub_429100"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_429210(__int64 a1, char a2, signed int a3)\n{\n  signed int v3; // er14\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  void *v6; // rdi\n  char v7; // bp\n  __int64 v8; // rax\n  _QWORD *v9; // r12\n  unsigned int v10; // er15\n  __int64 v11; // r14\n  __int64 v12; // rbx\n  __int64 v13; // rax\n  __int64 v14; // rbp\n  __int64 v15; // rbp\n  void *v16; // rax\n\n  v3 = a3;\n  v4 = a1;\n  if ( a3 >= 10 )\n    sub_4325B0(\"Strparse(): ntok must be <= %d\", 9);\n  if ( a3 < 0 )\n  {\n    v7 = 1;\n  }\n  else\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = *(&ptr + v5);\n      if ( v6 )\n      {\n        free(v6);\n        *(&ptr + v5) = 0LL;\n      }\n      ++v5;\n    }\n    while ( v3 + 1 != v5 );\n    v7 = 0;\n  }\n  v8 = sub_429350(v4);\n  v9 = (_QWORD *)v8;\n  if ( !v8 )\n    sub_4325B0(\"regexp compilation failed.\", a2);\n  v10 = sub_429560(v8);\n  if ( !((unsigned __int8)v7 | (v10 != 1)) )\n  {\n    v11 = (unsigned int)(v3 + 1);\n    v12 = 0LL;\n    do\n    {\n      v13 = v9[v12];\n      if ( v13 )\n      {\n        v14 = v9[v12 + 10];\n        if ( v14 )\n        {\n          v15 = v14 - v13;\n          v16 = (void *)sub_4382F0(\"hsregex.c\", 124LL, ((v15 << 32) + 0x100000000LL) >> 32);\n          *(&ptr + v12) = v16;\n          v15 = (signed int)v15;\n          strncpy((char *)v16, (const char *)v9[v12], (signed int)v15);\n          *((_BYTE *)*(&ptr + v12) + v15) = 0;\n        }\n      }\n      ++v12;\n    }\n    while ( v11 != v12 );\n  }\n  free(v9);\n  return v10;\n}\n", 
            "funcStartAddr": "0x429210L", 
            "funcEndAddr": "0x42934cL", 
            "funcName": "sub_429210"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_429350(__int64 a1)\n{\n  char *v1; // r14\n  char *v2; // rax\n  signed __int64 v3; // rbx\n  unsigned __int64 v4; // rcx\n  _BYTE *v5; // rax\n  _BYTE *v6; // rcx\n  char v7; // r12\n  signed __int64 v8; // rbp\n  size_t v9; // r15\n  signed __int64 v10; // r13\n  size_t v11; // rax\n  unsigned int v12; // eax\n  signed __int64 v13; // rcx\n  char v15; // [rsp+Ch] [rbp-5Ch]\n  __int64 v16; // [rsp+10h] [rbp-58h]\n  int v17; // [rsp+18h] [rbp-50h]\n  __int16 *v18; // [rsp+20h] [rbp-48h]\n  __int16 v19; // [rsp+28h] [rbp-40h]\n  char v20; // [rsp+2Ah] [rbp-3Eh]\n  __int64 v21; // [rsp+30h] [rbp-38h]\n\n  if ( !a1 )\n    sub_429890(\"NULL argument to sqd_regcomp\");\n  v16 = a1;\n  v17 = 1;\n  v19 = 9;\n  v20 = 0;\n  v18 = &v19;\n  v21 = 1LL;\n  v1 = 0LL;\n  if ( sub_4298C0(&v16, 0LL, &v15) )\n  {\n    if ( v21 >= 0x7FFF )\n      sub_429890(\"regexp too big\");\n    v2 = (char *)malloc(v21 + 184);\n    v1 = v2;\n    if ( !v2 )\n      sub_429890(\"out of space\");\n    v16 = a1;\n    v17 = 1;\n    v3 = (signed __int64)(v2 + 181);\n    v18 = (__int16 *)(v2 + 181);\n    v2[180] = -100;\n    if ( !sub_4298C0(&v16, 0LL, &v15) )\n      return 0LL;\n    *((_WORD *)v1 + 80) = 0;\n    *((_QWORD *)v1 + 21) = 0LL;\n    *((_DWORD *)v1 + 44) = 0;\n    v4 = ((unsigned __int64)(v1[182] & 0x7F) << 8) | (unsigned __int8)v1[183];\n    v5 = (_BYTE *)(v3 - v4);\n    v6 = (_BYTE *)(v3 + v4);\n    if ( v1[181] == 7 )\n      v6 = v5;\n    if ( !*v6 )\n    {\n      v7 = v1[184];\n      if ( v7 == 1 )\n      {\n        v1[161] = 1;\n        if ( !(v15 & 4) )\n          return v1;\n      }\n      else\n      {\n        if ( v7 == 8 )\n          v1[160] = v1[187];\n        if ( !(v15 & 4) )\n          return v1;\n      }\n      v8 = (signed __int64)(v1 + 184);\n      v9 = 0LL;\n      v10 = 0LL;\n      if ( v7 != 8 )\n        goto LABEL_23;\nLABEL_19:\n      v11 = strlen((const char *)(v8 + 3));\n      if ( v11 >= v9 )\n        v10 = v8 + 3;\n      if ( v11 >= v9 )\n        v9 = v11;\nLABEL_23:\n      while ( 1 )\n      {\n        v12 = ((*(_BYTE *)(v8 + 1) & 0x7F) << 8) | *(unsigned __int8 *)(v8 + 2);\n        if ( !v12 )\n          break;\n        v13 = v8 - v12;\n        v8 += v12;\n        if ( v7 == 7 )\n          v8 = v13;\n        if ( !v8 )\n          break;\n        v7 = *(_BYTE *)v8;\n        if ( *(_BYTE *)v8 == 8 )\n          goto LABEL_19;\n      }\n      *((_QWORD *)v1 + 21) = v10;\n      *((_DWORD *)v1 + 44) = v9;\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x429350L", 
            "funcEndAddr": "0x42955aL", 
            "funcName": "sub_429350"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_429560(__int64 a1, char *a2)\n{\n  char *v2; // r14\n  const char *v3; // rsi\n  char *v5; // [rsp+8h] [rbp-40h]\n  char *v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n\n  v2 = a2;\n  if ( !a1 || !a2 )\n    sub_429890(\"NULL argument to sqd_regexec\");\n  if ( *(_BYTE *)(a1 + 180) != -100 )\n    sub_429890(\"corrupted regexp\");\n  v3 = *(const char **)(a1 + 168);\n  if ( v3 && !strstr(v2, v3) )\n    return 0LL;\n  v6 = v2;\n  v7 = a1;\n  v8 = a1 + 80;\n  if ( *(_BYTE *)(a1 + 161) )\n  {\n    v5 = v2;\n    *(_OWORD *)(a1 + 144) = 0LL;\n    *(_OWORD *)(a1 + 128) = 0LL;\n    *(_OWORD *)(a1 + 112) = 0LL;\n    *(_OWORD *)(a1 + 96) = 0LL;\n    *(_OWORD *)(a1 + 80) = 0LL;\n    *(_OWORD *)(a1 + 64) = 0LL;\n    *(_OWORD *)(a1 + 48) = 0LL;\n    *(_OWORD *)(a1 + 32) = 0LL;\n    *(_OWORD *)(a1 + 16) = 0LL;\n    *(_OWORD *)a1 = 0LL;\n    if ( !(unsigned int)sub_42AC60(&v5, a1 + 181) )\n      return 0LL;\n  }\n  else if ( *(_BYTE *)(a1 + 160) )\n  {\n    while ( 1 )\n    {\n      v5 = v2;\n      *(_OWORD *)(a1 + 144) = 0LL;\n      *(_OWORD *)(a1 + 128) = 0LL;\n      *(_OWORD *)(a1 + 112) = 0LL;\n      *(_OWORD *)(a1 + 96) = 0LL;\n      *(_OWORD *)(a1 + 80) = 0LL;\n      *(_OWORD *)(a1 + 64) = 0LL;\n      *(_OWORD *)(a1 + 48) = 0LL;\n      *(_OWORD *)(a1 + 32) = 0LL;\n      *(_OWORD *)(a1 + 16) = 0LL;\n      *(_OWORD *)a1 = 0LL;\n      if ( (unsigned int)sub_42AC60(&v5, a1 + 181) )\n        break;\n      v2 = strchr(v2 + 1, *(char *)(a1 + 160));\n      if ( !v2 )\n        return 0LL;\n    }\n  }\n  else\n  {\n    v5 = v2;\n    *(_OWORD *)(a1 + 144) = 0LL;\n    *(_OWORD *)(a1 + 128) = 0LL;\n    *(_OWORD *)(a1 + 112) = 0LL;\n    *(_OWORD *)(a1 + 96) = 0LL;\n    *(_OWORD *)(a1 + 80) = 0LL;\n    *(_OWORD *)(a1 + 64) = 0LL;\n    *(_OWORD *)(a1 + 48) = 0LL;\n    *(_OWORD *)(a1 + 32) = 0LL;\n    *(_OWORD *)(a1 + 16) = 0LL;\n    *(_OWORD *)a1 = 0LL;\n    if ( !(unsigned int)sub_42AC60(&v5, a1 + 181) )\n    {\n      while ( *v2 )\n      {\n        v5 = ++v2;\n        *(_OWORD *)(a1 + 144) = 0LL;\n        *(_OWORD *)(a1 + 128) = 0LL;\n        *(_OWORD *)(a1 + 112) = 0LL;\n        *(_OWORD *)(a1 + 96) = 0LL;\n        *(_OWORD *)(a1 + 80) = 0LL;\n        *(_OWORD *)(a1 + 64) = 0LL;\n        *(_OWORD *)(a1 + 48) = 0LL;\n        *(_OWORD *)(a1 + 32) = 0LL;\n        *(_OWORD *)(a1 + 16) = 0LL;\n        *(_OWORD *)a1 = 0LL;\n        if ( (unsigned int)sub_42AC60(&v5, a1 + 181) )\n          goto LABEL_16;\n      }\n      return 0LL;\n    }\n  }\nLABEL_16:\n  *(_QWORD *)a1 = v2;\n  *(_QWORD *)(a1 + 80) = v5;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x429560L", 
            "funcEndAddr": "0x42976fL", 
            "funcName": "sub_429560"
        }, 
        {
            "decompiledFuncCode": "void __spoils<rdx,rcx,r8,r9,r10,r11,xmm4,xmm5> sub_429770()\n{\n  if ( ptr )\n  {\n    free(ptr);\n    ptr = 0LL;\n  }\n  if ( qword_463F98 )\n  {\n    free(qword_463F98);\n    qword_463F98 = 0LL;\n  }\n  if ( nptr )\n  {\n    free(nptr);\n    nptr = 0LL;\n  }\n  if ( qword_463FA8 )\n  {\n    free(qword_463FA8);\n    qword_463FA8 = 0LL;\n  }\n  if ( qword_463FB0 )\n  {\n    free(qword_463FB0);\n    qword_463FB0 = 0LL;\n  }\n  if ( qword_463FB8 )\n  {\n    free(qword_463FB8);\n    qword_463FB8 = 0LL;\n  }\n  if ( qword_463FC0 )\n  {\n    free(qword_463FC0);\n    qword_463FC0 = 0LL;\n  }\n  if ( qword_463FC8 )\n  {\n    free(qword_463FC8);\n    qword_463FC8 = 0LL;\n  }\n  if ( qword_463FD0 )\n  {\n    free(qword_463FD0);\n    qword_463FD0 = 0LL;\n  }\n  if ( qword_463FD8 )\n  {\n    free(qword_463FD8);\n    qword_463FD8 = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x429770L", 
            "funcEndAddr": "0x42988bL", 
            "funcName": "sub_429770"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_429890(__int64 a1@<rax>, __int64 a2@<rdi>)\n{\n  fprintf(stderr, \"regexp(3): %s\\n\", a2, a1);\n  exit(1);\n}\n", 
            "funcStartAddr": "0x429890L", 
            "funcEndAddr": "0x4298b4L", 
            "funcName": "sub_429890"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4298C0@<rax>(__int64 a1@<rax>, _DWORD *a2@<rdx>, __int64 a3@<rdi>, int a4@<esi>)\n{\n  _DWORD *v4; // rbp\n  __int64 v5; // rbx\n  signed int v6; // er15\n  __int64 v7; // r14\n  char v8; // r15\n  __int64 v9; // rax\n  unsigned int v10; // esi\n  _BYTE *v11; // rcx\n  _BYTE *v12; // rdx\n  __int64 v13; // rdx\n  _BYTE *v14; // rsi\n  __int16 v15; // dx\n  __int16 v16; // ax\n  _BYTE *v17; // rax\n  signed __int64 i; // r13\n  __int64 v19; // rax\n  unsigned int v20; // esi\n  _BYTE *v21; // rdx\n  _BYTE *j; // rcx\n  __int64 v23; // rdx\n  _BYTE *v24; // rsi\n  __int16 v25; // dx\n  __int16 v26; // ax\n  __int64 v27; // r8\n  int v28; // er9\n  unsigned int v29; // eax\n  _BYTE *v30; // rcx\n  _BYTE *v31; // rdx\n  __int64 v32; // rdx\n  _BYTE *v33; // rax\n  __int16 v34; // dx\n  _BYTE *v35; // rcx\n  signed __int64 v36; // rdi\n  _BYTE *v37; // rdx\n  int v38; // ebp\n  _BYTE *v39; // rsi\n  int k; // eax\n  unsigned int v41; // eax\n  _BYTE *v42; // rbp\n  __int64 v43; // rdi\n  _BYTE *v44; // rax\n  __int16 v45; // di\n  unsigned int v46; // eax\n  _BYTE *v47; // rdx\n  _BYTE *v48; // rax\n  _BYTE *v49; // rax\n  __int64 v51; // [rsp+0h] [rbp-38h]\n\n  v51 = a1;\n  v4 = a2;\n  v5 = a3;\n  *a2 = 1;\n  if ( a4 )\n  {\n    v6 = *(_DWORD *)(a3 + 8);\n    if ( v6 >= 10 )\n      sub_429890(a1, (__int64)\"too many ()\");\n    *(_DWORD *)(a3 + 8) = v6 + 1;\n    v7 = *(_QWORD *)(a3 + 16);\n    if ( v7 == a3 + 24 )\n    {\n      *(_QWORD *)(a3 + 32) += 3LL;\n    }\n    else\n    {\n      *(_BYTE *)v7 = v6 + 20;\n      *(_WORD *)(v7 + 1) = 0;\n      *(_QWORD *)(a3 + 16) = v7 + 3;\n    }\n    v8 = v6 + 30;\n  }\n  else\n  {\n    v8 = 30;\n    v7 = 0LL;\n  }\n  v9 = sub_429DA0(a3, &v51);\n  if ( !v9 )\n    return 0LL;\n  HIDWORD(v51) = a4;\n  if ( a4 )\n  {\n    if ( *(_QWORD *)(a3 + 16) != a3 + 24 )\n    {\n      v10 = ((*(_BYTE *)(v7 + 1) & 0x7F) << 8) | *(unsigned __int8 *)(v7 + 2);\n      v11 = (_BYTE *)v7;\n      if ( v10 )\n      {\n        v12 = (_BYTE *)v7;\n        do\n        {\n          v11 = v12;\n          v13 = v10;\n          v14 = &v11[-v10];\n          v12 = &v11[v13];\n          if ( *v11 == 7 )\n            v12 = v14;\n          if ( !v12 )\n            break;\n          v10 = ((v12[1] & 0x7F) << 8) | (unsigned __int8)v12[2];\n          v11 = v12;\n        }\n        while ( v10 );\n      }\n      v15 = (_WORD)v11 - v9;\n      v16 = v9 - (_WORD)v11;\n      if ( *v11 == 7 )\n        v16 = v15;\n      v11[1] = HIBYTE(v16) & 0x7F;\n      v11[2] = v16;\n    }\n  }\n  else\n  {\n    v7 = v9;\n  }\n  *v4 = *v4 & ((unsigned __int8)v51 | 0xFFFFFFFE) | v51 & 4;\n  v17 = *(_BYTE **)a3;\n  for ( i = a3 + 24; **(_BYTE **)a3 == 124; v17 = *(_BYTE **)a3 )\n  {\n    *(_QWORD *)a3 = v17 + 1;\n    v19 = sub_429DA0(a3, &v51);\n    if ( !v19 )\n      return 0LL;\n    if ( *(_QWORD *)(a3 + 16) != i )\n    {\n      v20 = ((*(_BYTE *)(v7 + 1) & 0x7F) << 8) | *(unsigned __int8 *)(v7 + 2);\n      v21 = (_BYTE *)v7;\n      for ( j = (_BYTE *)v7; v20; j = v21 )\n      {\n        j = v21;\n        v23 = v20;\n        v24 = &j[-v20];\n        v21 = &j[v23];\n        if ( *j == 7 )\n          v21 = v24;\n        if ( !v21 )\n          break;\n        v20 = ((v21[1] & 0x7F) << 8) | (unsigned __int8)v21[2];\n      }\n      v25 = (_WORD)j - v19;\n      v26 = v19 - (_WORD)j;\n      if ( *j == 7 )\n        v26 = v25;\n      j[1] = HIBYTE(v26) & 0x7F;\n      j[2] = v26;\n    }\n    *v4 = *v4 & ((unsigned __int8)v51 | 0xFFFFFFFE) | v51 & 4;\n  }\n  v27 = *(_QWORD *)(a3 + 16);\n  if ( v27 != i )\n  {\n    v28 = HIDWORD(v51);\n    if ( !HIDWORD(v51) )\n      v8 = 0;\n    *(_BYTE *)v27 = v8;\n    *(_WORD *)(v27 + 1) = 0;\n    *(_QWORD *)(a3 + 16) = v27 + 3;\n    if ( v27 + 3 != i )\n    {\n      v29 = ((*(_BYTE *)(v7 + 1) & 0x7F) << 8) | *(unsigned __int8 *)(v7 + 2);\n      v30 = (_BYTE *)v7;\n      if ( v29 )\n      {\n        v31 = (_BYTE *)v7;\n        do\n        {\n          v30 = v31;\n          v32 = v29;\n          v33 = &v30[-v29];\n          v31 = &v30[v32];\n          if ( *v30 == 7 )\n            v31 = v33;\n          if ( !v31 )\n            break;\n          v29 = ((v31[1] & 0x7F) << 8) | (unsigned __int8)v31[2];\n          v30 = v31;\n        }\n        while ( v29 );\n      }\n      v34 = v27 - (_WORD)v30;\n      if ( *v30 == 7 )\n        v34 = (_WORD)v30 - v27;\n      v30[1] = HIBYTE(v34) & 0x7F;\n      v30[2] = v34;\n    }\n    if ( !v7 )\n      goto LABEL_66;\n    goto LABEL_50;\n  }\n  *(_QWORD *)(a3 + 32) += 3LL;\n  v28 = HIDWORD(v51);\n  if ( v7 )\n  {\nLABEL_50:\n    v35 = (_BYTE *)v7;\n    do\n    {\n      if ( *(_QWORD *)(v5 + 16) != i && *v35 == 6 )\n      {\n        v36 = (signed __int64)(v35 + 3);\n        v37 = v35 + 4;\n        v38 = (v35[4] & 0x7F) << 8;\n        v39 = v35 + 5;\n        for ( k = (unsigned __int8)v35[5]; ; k = *(unsigned __int8 *)(v36 + 2) )\n        {\n          v41 = v38 | k;\n          v42 = (_BYTE *)v36;\n          if ( !v41 )\n            break;\n          v42 = (_BYTE *)v36;\n          v43 = v41;\n          v44 = &v42[-v41];\n          v36 = (signed __int64)&v42[v43];\n          if ( *v42 == 7 )\n            v36 = (signed __int64)v44;\n          if ( !v36 )\n            break;\n          v37 = (_BYTE *)(v36 + 1);\n          v38 = (*(_BYTE *)(v36 + 1) & 0x7F) << 8;\n          v39 = (_BYTE *)(v36 + 2);\n        }\n        v45 = v27 - (_WORD)v42;\n        if ( *v42 == 7 )\n          v45 = (_WORD)v42 - v27;\n        *v37 = HIBYTE(v45) & 0x7F;\n        *v39 = v45;\n      }\n      v46 = ((v35[1] & 0x7F) << 8) | (unsigned __int8)v35[2];\n      if ( !v46 )\n        break;\n      v47 = &v35[-v46];\n      v48 = &v35[v46];\n      if ( *v35 == 7 )\n        v48 = v47;\n      v35 = v48;\n    }\n    while ( v48 );\n  }\nLABEL_66:\n  v49 = *(_BYTE **)v5;\n  if ( v28 )\n  {\n    *(_QWORD *)v5 = v49 + 1;\n    if ( *v49 != 41 )\n      sub_429890((__int64)v49, (__int64)\"unterminated ()\");\n  }\n  else\n  {\n    LOBYTE(v49) = *v49;\n    if ( (_BYTE)v49 )\n    {\n      if ( (_BYTE)v49 == 41 )\n        sub_429890((__int64)v49, (__int64)\"unmatched ()\");\n      sub_429890((__int64)v49, (__int64)\"internal error: junk on end\");\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x4298c0L", 
            "funcEndAddr": "0x429c80L", 
            "funcName": "sub_4298C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_429C80@<rax>(__int64 a1@<rax>, char *a2@<rdx>, __int64 a3@<rdi>, _BYTE *a4@<rsi>)\n{\n  char *v4; // r14\n  _BYTE *v5; // r12\n  _BYTE *v6; // rbx\n  __int64 result; // rax\n  const unsigned __int16 *v8; // rdx\n  signed __int64 v9; // rcx\n  const char *v10; // rsi\n  unsigned __int64 v11; // rbx\n  bool v12; // cf\n  size_t v13; // rbx\n  char *v14; // rax\n  bool v15; // zf\n\n  v4 = a2;\n  v5 = a4;\n  if ( !a3 || !a4 || !a2 )\n    sub_429890(a1, (__int64)\"NULL parameter to sqd_regsub\");\n  if ( *(_BYTE *)(a3 + 180) != -100 )\n    sub_429890(a1, (__int64)\"damaged regexp\");\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v6 = v5 + 1;\n      result = (unsigned __int8)*v5;\n      if ( (_BYTE)result != 38 )\n        break;\n      ++v5;\n      v9 = 0LL;\nLABEL_13:\n      v10 = *(const char **)(a3 + 8 * v9);\n      if ( v10 )\n      {\n        v11 = *(_QWORD *)(a3 + 8 * v9 + 80);\n        if ( v11 )\n        {\n          v12 = v11 < (unsigned __int64)v10;\n          v13 = v11 - (_QWORD)v10;\n          if ( !v12 && v13 != 0 )\n          {\n            v14 = strncpy(v4, v10, v13);\n            v15 = v4[v13 - 1] == 0;\n            v4 += v13;\n            if ( v15 )\n              sub_429890((__int64)v14, (__int64)\"damaged match string\");\n          }\n        }\n      }\n    }\n    if ( (_BYTE)result == 92 )\n    {\n      v8 = *__ctype_b_loc();\n      LOBYTE(result) = *v6;\n      if ( v8[(char)*v6] & 0x800 )\n      {\n        v5 += 2;\n        if ( (char)result > 47 )\n        {\n          v9 = (char)result - 48LL;\n          goto LABEL_13;\n        }\n        LOBYTE(result) = *v5;\n        if ( *v5 == 92 )\n          goto LABEL_24;\n      }\n      else\n      {\n        ++v5;\n        if ( (_BYTE)result == 92 )\n          goto LABEL_24;\n      }\n      if ( (_BYTE)result != 38 )\n      {\n        LOBYTE(result) = 92;\nLABEL_25:\n        v6 = v5;\n        goto LABEL_6;\n      }\nLABEL_24:\n      ++v5;\n      goto LABEL_25;\n    }\n    if ( !(_BYTE)result )\n      break;\nLABEL_6:\n    *v4++ = result;\n    v5 = v6;\n  }\n  *v4 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x429c80L", 
            "funcEndAddr": "0x429d97L", 
            "funcName": "sub_429C80"
        }, 
        {
            "decompiledFuncCode": "_WORD *__usercall sub_429DA0@<rax>(_QWORD *a1@<rdi>, int *a2@<rsi>, signed int a3@<r10d>)\n{\n  char **v3; // rbp\n  _WORD *v4; // rax\n  signed __int64 v5; // r13\n  signed __int64 v6; // rax\n  _QWORD *v7; // r9\n  _BYTE *v8; // rbx\n  _BYTE *v9; // r12\n  char v10; // al\n  signed int v11; // er14\n  _QWORD *v12; // r15\n  unsigned __int64 v13; // rax\n  signed __int64 v14; // rcx\n  __int64 v15; // rdx\n  signed __int64 v16; // r14\n  signed __int64 v17; // rbp\n  signed int v18; // er13\n  __int64 v19; // r8\n  _QWORD *v20; // rax\n  signed __int64 v21; // rax\n  signed __int64 v22; // rsi\n  _BYTE *v23; // rax\n  int v24; // edi\n  _BYTE *v25; // rdx\n  int n; // ecx\n  signed __int64 v27; // r13\n  signed int v28; // ebp\n  __int64 v29; // rax\n  _QWORD *v30; // rdi\n  unsigned int v31; // esi\n  _BYTE *v32; // rdx\n  _BYTE *k; // rcx\n  __int64 v34; // rdx\n  _BYTE *v35; // rsi\n  __int16 v36; // dx\n  __int16 v37; // ax\n  __int64 v38; // rax\n  unsigned int v39; // esi\n  _BYTE *v40; // rdx\n  _BYTE *l; // rcx\n  __int64 v42; // rdx\n  _BYTE *v43; // rsi\n  __int16 v44; // si\n  _BYTE *v45; // rcx\n  int v46; // esi\n  _BYTE *v47; // rdx\n  int m; // edi\n  _BYTE *v49; // rdx\n  unsigned int v50; // esi\n  _BYTE *v51; // rcx\n  _BYTE *i; // rax\n  __int64 v53; // rcx\n  _BYTE *v54; // rsi\n  __int16 v55; // si\n  _BYTE *v56; // rax\n  unsigned int v57; // esi\n  _BYTE *v58; // rcx\n  __int64 v59; // rax\n  _BYTE *v60; // rsi\n  __int16 v61; // si\n  __int64 v62; // rax\n  unsigned int v63; // esi\n  _BYTE *v64; // rcx\n  __int64 v65; // rdx\n  _BYTE *v66; // rsi\n  __int16 v67; // dx\n  __int16 v68; // ax\n  __int64 v69; // rax\n  unsigned int v70; // esi\n  _BYTE *v71; // rdx\n  _BYTE *j; // rcx\n  __int64 v73; // rdx\n  _BYTE *v74; // rsi\n  unsigned int v75; // ecx\n  _BYTE *v76; // rdi\n  __int64 v77; // rsi\n  _BYTE *v78; // rcx\n  __int16 v79; // cx\n  __int16 v80; // r8\n  _BYTE *v81; // rax\n  int v82; // edx\n  _BYTE *v83; // rcx\n  int ii; // esi\n  signed int v85; // ebp\n  signed int v86; // ebp\n  unsigned int v87; // esi\n  _BYTE *v88; // rdx\n  __int64 v89; // rbp\n  _BYTE *v90; // rsi\n  __int16 v91; // di\n  unsigned int v92; // esi\n  _BYTE *v93; // rdx\n  _BYTE *jj; // rcx\n  __int64 v95; // rdx\n  _BYTE *v96; // rsi\n  __int16 v97; // dx\n  __int16 v98; // ax\n  unsigned int v99; // esi\n  _BYTE *v100; // rdx\n  __int64 v101; // rdx\n  _BYTE *v102; // rsi\n  __int16 v103; // dx\n  __int16 v104; // ax\n  char *v105; // rax\n  unsigned __int64 v106; // rax\n  signed __int64 v107; // rcx\n  int *v108; // rsi\n  int v109; // eax\n  unsigned int v110; // ecx\n  _BYTE *v111; // rax\n  __int64 v112; // r12\n  _BYTE *v113; // rcx\n  __int16 v114; // dx\n  unsigned int v115; // edi\n  _BYTE *v116; // rsi\n  __int64 v117; // r13\n  _BYTE *v118; // rdi\n  __int16 v119; // di\n  __int16 v120; // ax\n  __int64 v121; // rax\n  signed __int64 v123; // [rsp+8h] [rbp-60h]\n  _QWORD *v124; // [rsp+10h] [rbp-58h]\n  int v125; // [rsp+1Ch] [rbp-4Ch]\n  _WORD *v126; // [rsp+20h] [rbp-48h]\n  int *v127; // [rsp+28h] [rbp-40h]\n  char **v128; // [rsp+30h] [rbp-38h]\n\n  v3 = (char **)a1;\n  *a2 = 0;\n  v5 = (signed __int64)(a1 + 3);\n  v126 = (_WORD *)a1[2];\n  v4 = v126;\n  if ( v126 == (_WORD *)(a1 + 3) )\n  {\n    v6 = (signed __int64)(a1 + 4);\n    a1[4] += 3LL;\n  }\n  else\n  {\n    *v126 = 6;\n    *((_BYTE *)v4 + 2) = 0;\n    a1[2] = (char *)v4 + 3;\n    v6 = (signed __int64)(a1 + 4);\n  }\n  v7 = a1 + 2;\n  v8 = 0LL;\n  v123 = (signed __int64)(a1 + 3);\n  v124 = (_QWORD *)v6;\n  v128 = (char **)a1;\n  v127 = a2;\n  while ( 1 )\n  {\n    v9 = v8;\n    v10 = **v3;\n    if ( !v10 || v10 == 41 || v10 == 124 )\n      break;\n    v11 = a3;\n    v12 = v7;\n    v8 = (_BYTE *)sub_42A770(v3, &v125);\n    if ( !v8 )\n      return 0LL;\n    v13 = (unsigned __int8)**v3;\n    if ( v13 > 0x3F || (v14 = -9223358842715242496LL, !_bittest64(&v14, v13)) )\n    {\n      a3 = v125;\n      v7 = v12;\n      goto LABEL_141;\n    }\n    if ( (_BYTE)v13 != 63 && !(v125 & 1) )\n      sub_429890(v13, (__int64)\"*+ operand could be empty\");\n    v7 = v12;\n    a3 = v11;\n    if ( (char)v13 == 63 )\n    {\n      a3 = 0;\n      if ( (_BYTE)v13 == 43 )\n        goto LABEL_53;\n    }\n    else if ( (char)v13 == 43 )\n    {\n      a3 = 5;\n      if ( (_BYTE)v13 == 43 )\n        goto LABEL_53;\n    }\n    else\n    {\n      if ( (char)v13 == 42 )\n        a3 = 4;\n      if ( (_BYTE)v13 == 43 )\n      {\nLABEL_53:\n        v49 = (_BYTE *)*v12;\n        v30 = v124;\n        if ( v125 & 2 )\n        {\n          if ( v49 != (_BYTE *)v5 )\n          {\n            v86 = a3;\n            memmove(v8 + 3, v8, v49 - v8);\n            a3 = v86;\n            v7 = v12;\n            *v7 += 3LL;\n            *(_WORD *)v8 = 11;\n            v8[2] = 0;\n            goto LABEL_138;\n          }\n          goto LABEL_137;\n        }\n        if ( v49 == (_BYTE *)v5 )\n        {\n          *v124 += 3LL;\nLABEL_135:\n          *v30 += 3LL;\n          goto LABEL_136;\n        }\n        *(_WORD *)v49 = 6;\n        v49[2] = 0;\n        *v12 = v49 + 3;\n        if ( v49 + 3 == (_BYTE *)v5 )\n          goto LABEL_135;\n        v50 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n        v51 = v8;\n        for ( i = v8; v50; i = v51 )\n        {\n          i = v51;\n          v53 = v50;\n          v54 = &i[-v50];\n          v51 = &i[v53];\n          if ( *i == 7 )\n            v51 = v54;\n          if ( !v51 )\n            break;\n          v50 = ((v51[1] & 0x7F) << 8) | (unsigned __int8)v51[2];\n        }\n        v55 = (_WORD)v49 - (_WORD)i;\n        if ( *i == 7 )\n          v55 = (_WORD)i - (_WORD)v49;\n        i[1] = HIBYTE(v55) & 0x7F;\n        i[2] = v55;\n        v56 = (_BYTE *)*v12;\n        if ( *v12 == v5 )\n          goto LABEL_135;\n        *(_WORD *)v56 = 7;\n        v56[2] = 0;\n        *v12 = v56 + 3;\n        if ( v56 + 3 == (_BYTE *)v5 )\n          goto LABEL_136;\n        do\n        {\n          v57 = ((v56[1] & 0x7F) << 8) | (unsigned __int8)v56[2];\n          v58 = v56;\n          if ( !v57 )\n            break;\n          v58 = v56;\n          v59 = v57;\n          v60 = &v58[-v57];\n          v56 = &v58[v59];\n          if ( *v58 == 7 )\n            v56 = v60;\n        }\n        while ( v56 );\n        v61 = (_WORD)v8 - (_WORD)v58;\n        if ( *v58 == 7 )\n          v61 = (_WORD)v58 - (_WORD)v8;\n        v58[1] = HIBYTE(v61) & 0x7F;\n        v58[2] = v61;\n        v62 = *v12;\n        if ( *v12 == v5 )\n          goto LABEL_136;\n        *(_WORD *)v62 = 6;\n        *(_BYTE *)(v62 + 2) = 0;\n        *v12 = v62 + 3;\n        if ( v62 + 3 == v5 )\n          goto LABEL_137;\n        do\n        {\n          v63 = ((v49[1] & 0x7F) << 8) | (unsigned __int8)v49[2];\n          v64 = v49;\n          if ( !v63 )\n            break;\n          v64 = v49;\n          v65 = v63;\n          v66 = &v64[-v63];\n          v49 = &v64[v65];\n          if ( *v64 == 7 )\n            v49 = v66;\n        }\n        while ( v49 );\n        v67 = (_WORD)v64 - v62;\n        v68 = v62 - (_WORD)v64;\n        if ( *v64 == 7 )\n          v68 = v67;\n        v64[1] = HIBYTE(v68) & 0x7F;\n        v64[2] = v68;\n        v69 = *v12;\n        if ( *v12 == v5 )\n          goto LABEL_137;\n        *(_WORD *)v69 = 9;\n        *(_BYTE *)(v69 + 2) = 0;\n        *v12 = v69 + 3;\n        if ( v69 + 3 != v5 )\n        {\n          v70 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n          v71 = v8;\n          for ( j = v8; v70; j = v71 )\n          {\n            j = v71;\n            v73 = v70;\n            v74 = &j[-v70];\n            v71 = &j[v73];\n            if ( *j == 7 )\n              v71 = v74;\n            if ( !v71 )\n              break;\n            v70 = ((v71[1] & 0x7F) << 8) | (unsigned __int8)v71[2];\n          }\n          goto LABEL_126;\n        }\n        goto LABEL_138;\n      }\n    }\n    if ( (_BYTE)v13 != 42 )\n    {\n      if ( (_BYTE)v13 != 63 )\n        goto LABEL_138;\n      if ( *v12 == v123 )\n      {\n        v30 = v124;\n        goto LABEL_135;\n      }\n      v27 = (signed __int64)(v8 + 3);\n      v28 = a3;\n      memmove(v8 + 3, v8, *v12 - (_QWORD)v8);\n      a3 = v28;\n      v7 = v12;\n      *v7 += 3LL;\n      *(_WORD *)v8 = 6;\n      v8[2] = 0;\n      v29 = *v12;\n      v30 = v124;\n      if ( *v12 == v123 )\n        goto LABEL_136;\n      *(_WORD *)v29 = 6;\n      *(_BYTE *)(v29 + 2) = 0;\n      *v12 = v29 + 3;\n      if ( v29 + 3 != v123 )\n      {\n        v31 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n        v32 = v8;\n        for ( k = v8; v31; k = v32 )\n        {\n          k = v32;\n          v34 = v31;\n          v35 = &k[-v31];\n          v32 = &k[v34];\n          if ( *k == 7 )\n            v32 = v35;\n          if ( !v32 )\n            break;\n          v31 = ((v32[1] & 0x7F) << 8) | (unsigned __int8)v32[2];\n        }\n        v36 = (_WORD)k - v29;\n        v37 = v29 - (_WORD)k;\n        if ( *k == 7 )\n          v37 = v36;\n        k[1] = HIBYTE(v37) & 0x7F;\n        k[2] = v37;\n        v38 = *v12;\n        if ( *v12 != v123 )\n        {\n          *(_WORD *)v38 = 9;\n          *(_BYTE *)(v38 + 2) = 0;\n          *v12 = v38 + 3;\n          if ( v38 + 3 != v123 )\n          {\n            v39 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n            v40 = v8;\n            for ( l = v8; v39; l = v40 )\n            {\n              l = v40;\n              v42 = v39;\n              v43 = &l[-v39];\n              v40 = &l[v42];\n              if ( *l == 7 )\n                v40 = v43;\n              if ( !v40 )\n                break;\n              v39 = ((v40[1] & 0x7F) << 8) | (unsigned __int8)v40[2];\n            }\n            v44 = v38 - (_WORD)l;\n            if ( *l == 7 )\n              v44 = (_WORD)l - v38;\n            l[1] = HIBYTE(v44) & 0x7F;\n            l[2] = v44;\n            if ( *v12 != v123 && *v8 == 6 )\n            {\n              v45 = v8 + 4;\n              v46 = (v8[4] & 0x7F) << 8;\n              v47 = v8 + 5;\n              for ( m = (unsigned __int8)v8[5]; ; m = *(unsigned __int8 *)(v27 + 2) )\n              {\n                v115 = v46 | m;\n                v116 = (_BYTE *)v27;\n                if ( !v115 )\n                  break;\n                v116 = (_BYTE *)v27;\n                v117 = v115;\n                v118 = &v116[-v115];\n                v27 = (signed __int64)&v116[v117];\n                if ( *v116 == 7 )\n                  v27 = (signed __int64)v118;\n                if ( !v27 )\n                  break;\n                v45 = (_BYTE *)(v27 + 1);\n                v46 = (*(_BYTE *)(v27 + 1) & 0x7F) << 8;\n                v47 = (_BYTE *)(v27 + 2);\n              }\n              v119 = (_WORD)v116 - v38;\n              v120 = v38 - (_WORD)v116;\n              if ( *v116 == 7 )\n                v120 = v119;\n              *v45 = HIBYTE(v120) & 0x7F;\n              *v47 = v120;\n            }\n          }\n          goto LABEL_138;\n        }\n      }\nLABEL_137:\n      *v30 += 3LL;\n      goto LABEL_138;\n    }\n    v15 = *v12;\n    if ( v125 & 2 )\n    {\n      if ( v15 == v5 )\n      {\n        *v124 += 3LL;\n      }\n      else\n      {\n        v85 = a3;\n        memmove(v8 + 3, v8, v15 - (_QWORD)v8);\n        a3 = v85;\n        v7 = v12;\n        *v7 += 3LL;\n        *(_WORD *)v8 = 10;\n        v8[2] = 0;\n      }\n      goto LABEL_138;\n    }\n    v16 = v5;\n    if ( v15 == v5 )\n    {\n      v20 = v124;\n      *v20 += 3LL;\nLABEL_130:\n      *v20 += 3LL;\nLABEL_131:\n      v30 = v124;\nLABEL_136:\n      *v30 += 3LL;\n      goto LABEL_137;\n    }\n    v17 = (signed __int64)(v8 + 3);\n    v18 = a3;\n    memmove(v8 + 3, v8, v15 - (_QWORD)v8);\n    a3 = v18;\n    v7 = v12;\n    *v7 += 3LL;\n    *(_WORD *)v8 = 6;\n    v8[2] = 0;\n    v19 = *v12;\n    v20 = v124;\n    if ( *v12 == v16 )\n      goto LABEL_130;\n    *(_WORD *)v19 = 7;\n    *(_BYTE *)(v19 + 2) = 0;\n    v21 = v19 + 3;\n    *v12 = v19 + 3;\n    if ( v19 + 3 == v123 )\n      goto LABEL_131;\n    if ( *v8 == 6 )\n    {\n      v22 = (signed __int64)(v8 + 3);\n      v23 = v8 + 4;\n      v24 = (v8[4] & 0x7F) << 8;\n      v25 = v8 + 5;\n      for ( n = (unsigned __int8)v8[5]; ; n = *(unsigned __int8 *)(v22 + 2) )\n      {\n        v75 = v24 | n;\n        v76 = (_BYTE *)v22;\n        if ( !v75 )\n          break;\n        v76 = (_BYTE *)v22;\n        v77 = v75;\n        v78 = &v76[-v75];\n        v22 = (signed __int64)&v76[v77];\n        if ( *v76 == 7 )\n          v22 = (signed __int64)v78;\n        if ( !v22 )\n          break;\n        v23 = (_BYTE *)(v22 + 1);\n        v24 = (*(_BYTE *)(v22 + 1) & 0x7F) << 8;\n        v25 = (_BYTE *)(v22 + 2);\n      }\n      v79 = (_WORD)v76 - v19;\n      v80 = v19 - (_WORD)v76;\n      if ( *v76 == 7 )\n        v80 = v79;\n      *v23 = HIBYTE(v80) & 0x7F;\n      *v25 = v80;\n      v21 = *v12;\n    }\n    if ( v21 == v123 )\n      goto LABEL_131;\n    if ( *v8 == 6 )\n    {\n      v81 = v8 + 4;\n      v82 = (v8[4] & 0x7F) << 8;\n      v83 = v8 + 5;\n      for ( ii = (unsigned __int8)v8[5]; ; ii = *(unsigned __int8 *)(v17 + 2) )\n      {\n        v87 = v82 | ii;\n        v88 = (_BYTE *)v17;\n        if ( !v87 )\n          break;\n        v88 = (_BYTE *)v17;\n        v89 = v87;\n        v90 = &v88[-v87];\n        v17 = (signed __int64)&v88[v89];\n        if ( *v88 == 7 )\n          v17 = (signed __int64)v90;\n        if ( !v17 )\n          break;\n        v81 = (_BYTE *)(v17 + 1);\n        v82 = (*(_BYTE *)(v17 + 1) & 0x7F) << 8;\n        v83 = (_BYTE *)(v17 + 2);\n      }\n      v91 = (_WORD)v8 - (_WORD)v88;\n      if ( *v88 == 7 )\n        v91 = (_WORD)v88 - (_WORD)v8;\n      *v81 = HIBYTE(v91) & 0x7F;\n      *v83 = v91;\n      v21 = *v12;\n    }\n    if ( v21 == v123 )\n      goto LABEL_131;\n    *(_WORD *)v21 = 6;\n    *(_BYTE *)(v21 + 2) = 0;\n    *v12 = v21 + 3;\n    v30 = v124;\n    if ( v21 + 3 == v123 )\n      goto LABEL_137;\n    v92 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n    v93 = v8;\n    for ( jj = v8; v92; jj = v93 )\n    {\n      jj = v93;\n      v95 = v92;\n      v96 = &jj[-v92];\n      v93 = &jj[v95];\n      if ( *jj == 7 )\n        v93 = v96;\n      if ( !v93 )\n        break;\n      v92 = ((v93[1] & 0x7F) << 8) | (unsigned __int8)v93[2];\n    }\n    v97 = (_WORD)jj - v21;\n    v98 = v21 - (_WORD)jj;\n    if ( *jj == 7 )\n      v98 = v97;\n    jj[1] = HIBYTE(v98) & 0x7F;\n    jj[2] = v98;\n    v69 = *v12;\n    if ( *v12 == v123 )\n      goto LABEL_137;\n    *(_WORD *)v69 = 9;\n    *(_BYTE *)(v69 + 2) = 0;\n    *v12 = v69 + 3;\n    if ( v69 + 3 != v123 )\n    {\n      v99 = ((v8[1] & 0x7F) << 8) | (unsigned __int8)v8[2];\n      v100 = v8;\n      for ( j = v8; v99; j = v100 )\n      {\n        j = v100;\n        v101 = v99;\n        v102 = &j[-v99];\n        v100 = &j[v101];\n        if ( *j == 7 )\n          v100 = v102;\n        if ( !v100 )\n          break;\n        v99 = ((v100[1] & 0x7F) << 8) | (unsigned __int8)v100[2];\n      }\nLABEL_126:\n      v103 = (_WORD)j - v69;\n      v104 = v69 - (_WORD)j;\n      if ( *j == 7 )\n        v104 = v103;\n      j[1] = HIBYTE(v104) & 0x7F;\n      j[2] = v104;\n    }\nLABEL_138:\n    v3 = v128;\n    v105 = (*v128)++;\n    v106 = (unsigned __int8)v105[1];\n    if ( v106 <= 0x3F )\n    {\n      v107 = -9223358842715242496LL;\n      if ( _bittest64(&v107, v106) )\n        sub_429890(v106, (__int64)\"nested *?+\");\n    }\n    v5 = v123;\nLABEL_141:\n    v108 = v127;\n    v109 = *v127 | a3 & 1;\n    *v127 = v109;\n    if ( v9 )\n    {\n      if ( *v7 != v5 )\n      {\n        do\n        {\n          v110 = ((v9[1] & 0x7F) << 8) | (unsigned __int8)v9[2];\n          v111 = v9;\n          if ( !v110 )\n            break;\n          v111 = v9;\n          v112 = v110;\n          v113 = &v111[-v110];\n          v9 = &v111[v112];\n          if ( *v111 == 7 )\n            v9 = v113;\n        }\n        while ( v9 );\n        v114 = (_WORD)v8 - (_WORD)v111;\n        if ( *v111 == 7 )\n          v114 = (_WORD)v111 - (_WORD)v8;\n        v111[1] = HIBYTE(v114) & 0x7F;\n        v111[2] = v114;\n      }\n    }\n    else\n    {\n      *v108 = a3 & 4 | v109;\n    }\n  }\n  if ( !v8 )\n  {\n    v121 = *v7;\n    if ( *v7 == v5 )\n    {\n      *v124 += 3LL;\n    }\n    else\n    {\n      *(_WORD *)v121 = 9;\n      *(_BYTE *)(v121 + 2) = 0;\n      *v7 = v121 + 3;\n    }\n  }\n  return v126;\n}\n", 
            "funcStartAddr": "0x429da0L", 
            "funcEndAddr": "0x42a761L", 
            "funcName": "sub_429DA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __usercall sub_42A770@<rax>(__int64 a1@<rax>, const char **a2@<rdi>, _DWORD *a3@<rsi>)\n{\n  _BYTE *v3; // r14\n  const char **v4; // r12\n  const char *v5; // r15\n  const char *v6; // rdx\n  __int64 v7; // rax\n  signed __int64 v8; // rcx\n  signed __int64 result; // rax\n  signed __int64 v10; // rcx\n  _BYTE *v11; // rsi\n  signed __int64 v12; // r8\n  char *v13; // rsi\n  size_t v14; // rax\n  signed __int64 v15; // rcx\n  signed int v16; // eax\n  unsigned __int64 v17; // rdx\n  signed __int64 v18; // rsi\n  signed __int64 v19; // rdx\n  char *v20; // rsi\n  char v21; // dl\n  char *v22; // rdx\n  const char *v23; // rdi\n  char v24; // bl\n  char v25; // cl\n  const char *v26; // rdi\n  char v27; // cl\n  char *v28; // rdx\n  int v29; // esi\n  char *v30; // rcx\n  int v31; // ecx\n  int v32; // er9\n  int v33; // edx\n  char *v34; // r10\n  char v35; // cl\n  int v36; // esi\n  char v37; // dl\n  char *v38; // rdi\n  char *v39; // rdi\n  char *v40; // rdx\n  __int64 v41; // [rsp-4h] [rbp-28h]\n\n  v41 = a1;\n  v3 = a3;\n  v4 = a2;\n  *a3 = 0;\n  v5 = *a2;\n  v6 = *a2 + 1;\n  *a2 = v6;\n  v7 = (unsigned int)*v5;\n  switch ( (_DWORD)v7 )\n  {\n    case 0x24:\n      v8 = (signed __int64)a2[2];\n      result = (signed __int64)(a2 + 3);\n      if ( (const char **)v8 == a2 + 3 )\n        goto LABEL_17;\n      *(_WORD *)v8 = 2;\n      goto LABEL_13;\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x2C:\n    case 0x2D:\n    case 0x2F:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3A:\n    case 0x3B:\n    case 0x3C:\n    case 0x3D:\n    case 0x3E:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x43:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x48:\n    case 0x49:\n    case 0x4A:\n    case 0x4B:\n    case 0x4C:\n    case 0x4D:\n    case 0x4E:\n    case 0x4F:\n    case 0x50:\n    case 0x51:\n    case 0x52:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x56:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5A:\n    case 0x5D:\n    case 0x5F:\n    case 0x60:\n    case 0x61:\n    case 0x62:\n    case 0x63:\n    case 0x64:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n    case 0x68:\n    case 0x69:\n    case 0x6A:\n    case 0x6B:\n    case 0x6C:\n    case 0x6D:\n    case 0x6E:\n    case 0x6F:\n    case 0x70:\n    case 0x71:\n    case 0x72:\n    case 0x73:\n    case 0x74:\n    case 0x75:\n    case 0x76:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7A:\n    case 0x7B:\n      goto LABEL_19;\n    case 0x28:\n      result = sub_4298C0(v7, (_DWORD *)&v41 + 1, (__int64)a2, 1);\n      if ( !result )\n        return 0LL;\n      *a3 |= BYTE4(v41) & 5;\n      return result;\n    case 0x29:\n    case 0x7C:\n      goto LABEL_89;\n    case 0x2A:\n    case 0x2B:\n    case 0x3F:\n      sub_429890(v7, (__int64)\"?+* follows nothing\");\n      return result;\n    case 0x2E:\n      result = (signed __int64)a2[2];\n      if ( (const char **)result == a2 + 3 )\n      {\n        a2[4] += 3;\n        *a3 = 3;\n      }\n      else\n      {\n        *(_WORD *)result = 3;\n        *(_BYTE *)(result + 2) = 0;\n        a2[2] = (const char *)(result + 3);\n        *a3 |= 3u;\n      }\n      return result;\n    case 0x5B:\n      v12 = (signed __int64)(a2 + 3);\n      result = (signed __int64)a2[2];\n      if ( *v6 == 94 )\n      {\n        if ( result == v12 )\n        {\n          a2[4] += 3;\n          v13 = (char *)(a2 + 3);\n        }\n        else\n        {\n          *(_WORD *)result = 5;\n          *(_BYTE *)(result + 2) = 0;\n          v13 = (char *)(result + 3);\n          a2[2] = (const char *)(result + 3);\n          v6 = *a2;\n        }\n        *a2 = ++v6;\n      }\n      else if ( result == v12 )\n      {\n        a2[4] += 3;\n        v13 = (char *)(a2 + 3);\n      }\n      else\n      {\n        *(_WORD *)result = 4;\n        *(_BYTE *)(result + 2) = 0;\n        v13 = (char *)(result + 3);\n        a2[2] = (const char *)(result + 3);\n        v6 = *a2;\n      }\n      v25 = *v6;\n      if ( *v6 == 93 || v25 == 45 )\n      {\n        if ( v13 == (char *)v12 )\n        {\n          ++a2[4];\n        }\n        else\n        {\n          a2[2] = v13 + 1;\n          *v13 = v25;\n          v6 = *a2;\n        }\n        *a2 = ++v6;\n      }\n      while ( 2 )\n      {\n        while ( 2 )\n        {\n          v26 = v6 + 1;\n          *v4 = v6 + 1;\n          v27 = *v6;\n          if ( *v6 == 45 )\n          {\n            v29 = *(unsigned __int8 *)v26;\n            if ( v29 == 93 || !(_BYTE)v29 )\n            {\n              v30 = (char *)v4[2];\n              if ( v30 != (char *)v12 )\n              {\n                v4[2] = v30 + 1;\n                *v30 = 45;\n                v6 = *v4;\n                continue;\n              }\nLABEL_54:\n              ++v4[4];\n              v6 = *v4;\n              continue;\n            }\n            v31 = *((unsigned __int8 *)v6 - 1);\n            if ( (unsigned __int8)v31 > (unsigned __int8)v29 )\n              sub_429890(result, (__int64)\"invalid [] range\");\n            if ( (unsigned __int8)v31 >= (unsigned __int8)v29 )\n            {\nLABEL_79:\n              *v4 = v26 + 1;\n              v6 = *v4;\n              continue;\n            }\n            v32 = v29 - 1;\n            v33 = *((unsigned __int8 *)v6 - 1);\n            if ( ((_BYTE)v29 - (_BYTE)v31) & 1 )\n            {\n              v33 = v31 + 1;\n              v34 = (char *)v4[2];\n              if ( v34 == (char *)v12 )\n              {\n                ++v4[4];\n                if ( v32 != v31 )\n                {\nLABEL_70:\n                  v35 = v33 + 1;\n                  v36 = v29 - v33;\n                  v37 = v33 + 2;\n                  do\n                  {\n                    v38 = (char *)v4[2];\n                    if ( v38 == (char *)v12 )\n                    {\n                      ++v4[4];\n                    }\n                    else\n                    {\n                      v4[2] = v38 + 1;\n                      *v38 = v35;\n                    }\n                    v39 = (char *)v4[2];\n                    if ( v39 == (char *)v12 )\n                    {\n                      ++v4[4];\n                    }\n                    else\n                    {\n                      v4[2] = v39 + 1;\n                      *v39 = v37;\n                    }\n                    v35 += 2;\n                    v37 += 2;\n                    v36 -= 2;\n                  }\n                  while ( v36 );\n                }\nLABEL_78:\n                v26 = *v4;\n                goto LABEL_79;\n              }\n              v4[2] = v34 + 1;\n              *v34 = v33;\n            }\n            if ( v32 != v31 )\n              goto LABEL_70;\n            goto LABEL_78;\n          }\n          break;\n        }\n        if ( v27 && v27 != 93 )\n        {\n          v28 = (char *)v4[2];\n          if ( v28 != (char *)v12 )\n          {\n            v4[2] = v28 + 1;\n            *v28 = v27;\n            v6 = *v4;\n            continue;\n          }\n          goto LABEL_54;\n        }\n        break;\n      }\n      v40 = (char *)v4[2];\n      if ( v40 == (char *)v12 )\n      {\n        ++v4[4];\n        if ( v27 == 93 )\n          goto LABEL_84;\nLABEL_87:\n        sub_429890(result, (__int64)\"unmatched []\");\n      }\n      v4[2] = v40 + 1;\n      *v40 = 0;\n      if ( v27 != 93 )\n        goto LABEL_87;\nLABEL_84:\n      *v3 |= 3u;\n      return result;\n    case 0x5C:\n      if ( !*v6 )\n        sub_429890(v7, (__int64)\"trailing \\\\\");\n      result = (signed __int64)a2[2];\n      v10 = (signed __int64)(a2 + 3);\n      if ( (const char **)result == a2 + 3 )\n      {\n        a2[4] += 3;\n        v11 = (_BYTE *)result;\n      }\n      else\n      {\n        *(_WORD *)result = 8;\n        *(_BYTE *)(result + 2) = 0;\n        v11 = (_BYTE *)(result + 3);\n        a2[2] = (const char *)(result + 3);\n        v6 = *a2;\n      }\n      *a2 = v6 + 1;\n      if ( v11 == (_BYTE *)v10 )\n      {\n        ++a2[4];\n      }\n      else\n      {\n        v21 = *v6;\n        a2[2] = v11 + 1;\n        *v11 = v21;\n        v22 = (char *)a2[2];\n        if ( v22 != (char *)v10 )\n        {\n          a2[2] = v22 + 1;\n          *v22 = 0;\n          goto LABEL_84;\n        }\n      }\n      ++a2[4];\n      goto LABEL_84;\n    case 0x5E:\n      v8 = (signed __int64)a2[2];\n      result = (signed __int64)(a2 + 3);\n      if ( (const char **)v8 == a2 + 3 )\n      {\nLABEL_17:\n        a2[4] += 3;\n      }\n      else\n      {\n        *(_WORD *)v8 = 1;\nLABEL_13:\n        *(_BYTE *)(v8 + 2) = 0;\n        a2[2] = (const char *)(v8 + 3);\n        result = v8;\n      }\n      return result;\n    default:\n      if ( !*v5 )\nLABEL_89:\n        sub_429890(v7, (__int64)\"internal error: \\\\0|) unexpected\");\nLABEL_19:\n      *a2 = v5;\n      v14 = strcspn(v5, \"^$.[()|?+*\\\\\");\n      v15 = v14;\n      if ( v14 == 1 )\n        goto LABEL_95;\n      if ( !v14 )\n        sub_429890(0LL, (__int64)\"internal error: strcspn 0\");\n      v16 = 1;\n      v17 = (unsigned __int8)v5[v15];\n      if ( v17 <= 0x3F )\n      {\n        v18 = -9223358842715242496LL;\n        if ( _bittest64(&v18, v17) )\n        {\n          if ( --v15 == 1 )\n          {\nLABEL_95:\n            v16 = 3;\n            v15 = 1LL;\n          }\n        }\n      }\n      *(_DWORD *)v3 = v16;\n      result = (signed __int64)a2[2];\n      v19 = (signed __int64)(a2 + 3);\n      if ( (const char **)result == a2 + 3 )\n      {\n        a2[4] += 3;\n        v20 = (char *)(a2 + 3);\n      }\n      else\n      {\n        *(_WORD *)result = 8;\n        *(_BYTE *)(result + 2) = 0;\n        v20 = (char *)(result + 3);\n        a2[2] = (const char *)(result + 3);\n      }\n      do\n      {\n        v23 = (*v4)++;\n        if ( v20 == (char *)v19 )\n        {\n          ++v4[4];\n        }\n        else\n        {\n          v24 = *v23;\n          v4[2] = v20 + 1;\n          *v20 = v24;\n        }\n        v20 = (char *)v4[2];\n        --v15;\n      }\n      while ( v15 );\n      if ( v20 == (char *)v19 )\n      {\n        ++v4[4];\n      }\n      else\n      {\n        v4[2] = v20 + 1;\n        *v20 = 0;\n      }\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x42a770L", 
            "funcEndAddr": "0x42ac59L", 
            "funcName": "sub_42A770"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_42AC60@<rax>(unsigned __int64 a1@<rax>, char **a2@<rdi>, char *a3@<rsi>)\n{\n  char *v3; // rbp\n  _QWORD *v4; // r14\n  unsigned int v5; // ecx\n  __int64 v6; // rbx\n  __int64 v7; // r12\n  char *v8; // rcx\n  char *v9; // r12\n  unsigned int v10; // er15\n  __int64 v11; // rbx\n  signed __int64 v12; // rbx\n  const char *v13; // rbx\n  const char *v14; // rbp\n  unsigned __int64 v15; // r13\n  const char *v16; // rbp\n  char *v17; // rax\n  const char *v18; // rbp\n  char *v19; // rax\n  int v20; // edx\n  bool v21; // r13\n  _BYTE *v22; // rbx\n  int v23; // ebp\n  size_t v24; // rax\n  char v25; // cl\n  bool v26; // zf\n  const char *v27; // rsi\n  const char *v28; // rsi\n  unsigned __int64 v29; // rbp\n  char *v30; // rbx\n  _QWORD *v31; // rdi\n  _QWORD *v32; // r13\n  int v33; // er14\n  int v34; // eax\n  __int64 result; // rax\n  char *v36; // rbx\n  unsigned __int64 v37; // rcx\n  char *v38; // rax\n  char *v39; // rcx\n  _BOOL8 v40; // [rsp+0h] [rbp-38h]\n\n  v3 = a3;\n  v4 = a2;\n  if ( !a3 )\nLABEL_29:\n    sub_429890(a1, (__int64)\"corrupted pointers\");\n  while ( 2 )\n  {\n    v5 = ((v3[1] & 0x7F) << 8) | (unsigned __int8)v3[2];\n    a1 = (unsigned int)*v3;\n    v6 = *v3;\n    if ( v5 )\n    {\n      v7 = v5;\n      v8 = &v3[-v5];\n      v9 = &v3[v7];\n      if ( (_BYTE)v6 == 7 )\n        v9 = v8;\n      if ( (unsigned int)a1 > 0x27 )\nLABEL_63:\n        sub_429890(a1, (__int64)\"regexp corruption\");\n    }\n    else\n    {\n      v9 = 0LL;\n      if ( (unsigned int)a1 > 0x27 )\n        goto LABEL_63;\n    }\n    v10 = 1;\n    switch ( (unsigned __int64)(unsigned int)v6 )\n    {\n      case 0uLL:\n        return v10;\n      case 1uLL:\n        a1 = (unsigned __int64)*a2;\n        if ( *a2 != a2[1] )\n          goto LABEL_53;\n        goto LABEL_28;\n      case 2uLL:\n        a1 = (unsigned __int64)*a2;\n        if ( **a2 )\n          goto LABEL_53;\n        goto LABEL_28;\n      case 3uLL:\n        if ( !**a2 )\n          goto LABEL_53;\n        a1 = (unsigned __int64)(*a2 + 1);\n        *a2 = (char *)a1;\n        goto LABEL_28;\n      case 4uLL:\n        v11 = (__int64)*a2;\n        v10 = 0;\n        if ( **a2 )\n        {\n          a1 = (unsigned __int64)strchr(v3 + 3, **a2);\n          if ( a1 )\n            goto LABEL_16;\n        }\n        return v10;\n      case 5uLL:\n        v11 = (__int64)*a2;\n        v10 = 0;\n        if ( !**a2 )\n          return v10;\n        a1 = (unsigned __int64)strchr(v3 + 3, **a2);\n        if ( a1 )\n          return v10;\nLABEL_16:\n        v12 = v11 + 1;\n        goto LABEL_27;\n      case 6uLL:\n        if ( *v9 != 6 )\n        {\n          v9 = v3 + 3;\nLABEL_28:\n          v3 = v9;\n          if ( !v9 )\n            goto LABEL_29;\n          continue;\n        }\n        if ( (_BYTE)v6 == 6 )\n        {\n          v36 = *a2;\n          while ( !(unsigned int)sub_42AC60(a2, v3 + 3) )\n          {\n            *a2 = v36;\n            v37 = ((unsigned __int64)(v3[1] & 0x7F) << 8) | (unsigned __int8)v3[2];\n            v38 = &v3[-v37];\n            v39 = &v3[v37];\n            if ( *v3 == 7 )\n              v39 = v38;\n            v3 = v39;\n            if ( *v39 != 6 )\n              goto LABEL_53;\n          }\n        }\n        else\n        {\nLABEL_53:\n          v10 = 0;\n        }\n        return v10;\n      case 7uLL:\n      case 9uLL:\n        goto LABEL_28;\n      case 8uLL:\n        v13 = *a2;\n        v10 = 0;\n        if ( v3[3] != **a2 )\n          return v10;\n        v14 = v3 + 3;\n        a1 = strlen(v14);\n        v15 = a1;\n        if ( a1 >= 2 )\n        {\n          LODWORD(a1) = strncmp(v14, v13, a1);\n          if ( (_DWORD)a1 )\n            return v10;\n        }\n        v12 = (signed __int64)&v13[v15];\nLABEL_27:\n        *a2 = (char *)v12;\n        goto LABEL_28;\n      case 0xAuLL:\n      case 0xBuLL:\n        v20 = 0;\n        if ( *v9 == 8 )\n          v20 = v9[3];\n        v21 = *v3 != 10;\n        v22 = *a2;\n        switch ( v3[3] )\n        {\n          case 3:\n            v23 = v20;\n            v24 = strlen(*a2);\n            goto LABEL_46;\n          case 4:\n            v27 = v3 + 6;\n            v23 = v20;\n            v24 = strspn(*a2, v27);\n            goto LABEL_46;\n          case 5:\n            v28 = v3 + 6;\n            v23 = v20;\n            v24 = strcspn(*a2, v28);\nLABEL_46:\n            v20 = v23;\n            break;\n          case 8:\n            v25 = v3[6];\n            if ( *v22 == v25 )\n            {\n              v24 = 0LL;\n              do\n                v26 = v22[v24++ + 1] == v25;\n              while ( v26 );\n            }\n            else\n            {\n              v24 = 0LL;\n            }\n            break;\n          default:\n            sub_429890((unsigned int)(v3[3] - 3), (__int64)\"internal error: bad call of regrepeat\");\n            return result;\n        }\n        v29 = v24 + 1;\n        v40 = v21;\n        if ( v24 + 1 <= v21 )\n          goto LABEL_53;\n        v30 = &v22[v24];\n        while ( 1 )\n        {\n          *v4 = v30;\n          if ( !v20 || v20 == *v30 )\n          {\n            v31 = v4;\n            v32 = v4;\n            v33 = v20;\n            v34 = sub_42AC60(v31, v9);\n            v20 = v33;\n            v4 = v32;\n            if ( v34 )\n              return v10;\n          }\n          --v29;\n          --v30;\n          if ( v29 <= v40 )\n            goto LABEL_53;\n        }\n      case 0xCuLL:\n      case 0xDuLL:\n      case 0xEuLL:\n      case 0xFuLL:\n      case 0x10uLL:\n      case 0x11uLL:\n      case 0x12uLL:\n      case 0x13uLL:\n      case 0x14uLL:\n      case 0x1EuLL:\n        goto LABEL_63;\n      case 0x15uLL:\n      case 0x16uLL:\n      case 0x17uLL:\n      case 0x18uLL:\n      case 0x19uLL:\n      case 0x1AuLL:\n      case 0x1BuLL:\n      case 0x1CuLL:\n      case 0x1DuLL:\n        v18 = *a2;\n        if ( !(unsigned int)sub_42AC60(a2, v9) )\n          goto LABEL_53;\n        v19 = a2[2];\n        if ( !*(_QWORD *)&v19[8 * v6 - 160] )\n          *(_QWORD *)&v19[8 * v6 - 160] = v18;\n        return v10;\n      case 0x1FuLL:\n      case 0x20uLL:\n      case 0x21uLL:\n      case 0x22uLL:\n      case 0x23uLL:\n      case 0x24uLL:\n      case 0x25uLL:\n      case 0x26uLL:\n      case 0x27uLL:\n        v16 = *a2;\n        if ( !(unsigned int)sub_42AC60(a2, v9) )\n          goto LABEL_53;\n        v17 = a2[3];\n        if ( !*(_QWORD *)&v17[8 * v6 - 240] )\n          *(_QWORD *)&v17[8 * v6 - 240] = v16;\n        return v10;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x42ac60L", 
            "funcEndAddr": "0x42af7cL", 
            "funcName": "sub_42AC60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42AF80(int a1, int a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n  __int64 v4; // rax\n\n  v2 = sub_4382F0(\"msa.c\", 68LL, 360LL);\n  *(_QWORD *)v2 = sub_4382F0(\"msa.c\", 69LL, 8LL * a1);\n  *(_QWORD *)(v2 + 8) = sub_4382F0(\"msa.c\", 70LL, 8LL * a1);\n  *(_QWORD *)(v2 + 328) = sub_4382F0(\"msa.c\", 71LL, 4LL * a1);\n  *(_QWORD *)(v2 + 16) = sub_4382F0(\"msa.c\", 72LL, 4LL * a1);\n  if ( a1 > 0 )\n  {\n    v3 = 0LL;\n    do\n    {\n      *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3) = 0LL;\n      *(_DWORD *)(*(_QWORD *)(v2 + 328) + 4 * v3) = 0;\n      *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v3) = -1082130432;\n      if ( a2 )\n        v4 = sub_4382F0(\"msa.c\", 80LL, a2 + 1);\n      else\n        v4 = 0LL;\n      *(_QWORD *)(*(_QWORD *)v2 + 8 * v3++) = v4;\n    }\n    while ( a1 != v3 );\n  }\n  *(_DWORD *)(v2 + 24) = a2;\n  *(_DWORD *)(v2 + 28) = 0;\n  *(_DWORD *)(v2 + 320) = a1;\n  *(_DWORD *)(v2 + 324) = a1;\n  *(_OWORD *)(v2 + 112) = 0LL;\n  *(_OWORD *)(v2 + 96) = 0LL;\n  *(_OWORD *)(v2 + 80) = 0LL;\n  *(_OWORD *)(v2 + 64) = 0LL;\n  *(_OWORD *)(v2 + 48) = 0LL;\n  *(_OWORD *)(v2 + 32) = 0LL;\n  *(_OWORD *)(v2 + 336) = 0LL;\n  *(_QWORD *)(v2 + 312) = sub_428360();\n  *(_DWORD *)(v2 + 352) = 0;\n  *(_OWORD *)(v2 + 192) = 0LL;\n  *(_OWORD *)(v2 + 176) = 0LL;\n  *(_OWORD *)(v2 + 160) = 0LL;\n  *(_OWORD *)(v2 + 144) = 0LL;\n  *(_OWORD *)(v2 + 128) = 0LL;\n  *(_DWORD *)(v2 + 208) = 0;\n  *(_OWORD *)(v2 + 228) = 0LL;\n  *(_OWORD *)(v2 + 216) = 0LL;\n  *(_OWORD *)(v2 + 260) = 0LL;\n  *(_OWORD *)(v2 + 248) = 0LL;\n  *(_OWORD *)(v2 + 292) = 0LL;\n  *(_OWORD *)(v2 + 280) = 0LL;\n  return v2;\n}\n", 
            "funcStartAddr": "0x42af80L", 
            "funcEndAddr": "0x42b13fL", 
            "funcName": "sub_42AF80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42B140(__int64 *a1)\n{\n  __int64 *v1; // r14\n  signed __int64 v2; // rcx\n  __int64 v3; // rdx\n  __int64 v4; // rdx\n  __int64 v5; // rdx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  signed __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rax\n  __int64 v15; // rax\n  __int64 v16; // rbx\n  __int64 v17; // rdx\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // rcx\n  __int64 result; // rax\n  __int64 v22; // rbx\n  __int64 v23; // rdx\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  __int64 v26; // rcx\n\n  v1 = a1;\n  v2 = *((signed int *)a1 + 80) + (signed __int64)*((signed int *)a1 + 81);\n  *((_DWORD *)a1 + 80) = v2;\n  *a1 = sub_438340(\"msa.c\", 162LL, *a1, 8 * v2);\n  v1[1] = sub_438340(\"msa.c\", 163LL, v1[1], 8LL * *((signed int *)v1 + 80));\n  v1[41] = sub_438340(\"msa.c\", 164LL, v1[41], 8LL * *((signed int *)v1 + 80));\n  v1[2] = sub_438340(\"msa.c\", 165LL, v1[2], 4LL * *((signed int *)v1 + 80));\n  v3 = a1[14];\n  if ( v3 )\n  {\n    a1[14] = sub_438340(\"msa.c\", 168LL, v3, 8LL * *((signed int *)a1 + 80));\n    a1[42] = sub_438340(\"msa.c\", 169LL, a1[42], 4LL * *((signed int *)a1 + 80));\n  }\n  v4 = a1[15];\n  if ( v4 )\n  {\n    a1[15] = sub_438340(\"msa.c\", 172LL, v4, 8LL * *((signed int *)a1 + 80));\n    a1[43] = sub_438340(\"msa.c\", 173LL, a1[43], 4LL * *((signed int *)a1 + 80));\n  }\n  v5 = a1[12];\n  if ( v5 )\n    a1[12] = sub_438340(\"msa.c\", 176LL, v5, 8LL * *((signed int *)a1 + 80));\n  v6 = a1[13];\n  if ( v6 )\n    a1[13] = sub_438340(\"msa.c\", 178LL, v6, 8LL * *((signed int *)a1 + 80));\n  v7 = *((signed int *)a1 + 81);\n  if ( v7 > 0 )\n  {\n    v8 = *((signed int *)a1 + 80) - v7;\n    do\n    {\n      *(_QWORD *)(a1[1] + 8 * v8) = 0LL;\n      *(_DWORD *)(a1[2] + 4 * v8) = -1082130432;\n      v9 = a1[12];\n      if ( v9 )\n        *(_QWORD *)(v9 + 8 * v8) = 0LL;\n      v10 = a1[13];\n      if ( v10 )\n        *(_QWORD *)(v10 + 8 * v8) = 0LL;\n      v11 = *a1;\n      if ( *((_DWORD *)a1 + 6) )\n        *(_QWORD *)(*a1 + 8 * v8) = sub_438340(\"msa.c\", 189LL, *(_QWORD *)(v11 + 8 * v8), *((signed int *)a1 + 6) + 1LL);\n      else\n        *(_QWORD *)(v11 + 8 * v8) = 0LL;\n      *(_DWORD *)(a1[41] + 4 * v8) = 0;\n      v12 = a1[14];\n      if ( v12 )\n      {\n        if ( *((_DWORD *)a1 + 6) )\n          *(_QWORD *)(a1[14] + 8 * v8) = sub_438340(\n                                           \"msa.c\",\n                                           195LL,\n                                           *(_QWORD *)(v12 + 8 * v8),\n                                           *((signed int *)a1 + 6) + 1LL);\n        else\n          *(_QWORD *)(v12 + 8 * v8) = 0LL;\n        *(_DWORD *)(a1[42] + 4 * v8) = 0;\n      }\n      v13 = a1[15];\n      if ( v13 )\n      {\n        if ( *((_DWORD *)a1 + 6) )\n        {\n          v14 = sub_438340(\"msa.c\", 201LL, *(_QWORD *)(a1[14] + 8 * v8), *((signed int *)a1 + 6) + 1LL);\n          v13 = a1[15];\n        }\n        else\n        {\n          v14 = 0LL;\n        }\n        *(_QWORD *)(v13 + 8 * v8) = v14;\n        *(_DWORD *)(a1[43] + 4 * v8) = 0;\n      }\n      ++v8;\n    }\n    while ( v8 < *((signed int *)a1 + 80) );\n  }\n  v15 = a1[28];\n  if ( v15 && *((_DWORD *)a1 + 60) > 0 )\n  {\n    v16 = 0LL;\n    while ( 1 )\n    {\n      v17 = *(_QWORD *)(v15 + 8 * v16);\n      if ( v17 )\n      {\n        *(_QWORD *)(a1[28] + 8 * v16) = sub_438340(\"msa.c\", 217LL, v17, 8LL * *((signed int *)a1 + 80));\n        v18 = *((signed int *)a1 + 81);\n        if ( v18 > 0 )\n        {\n          v19 = *((signed int *)a1 + 80);\n          v20 = v19 - v18;\n          do\n            *(_QWORD *)(*(_QWORD *)(a1[28] + 8 * v16) + 8 * v20++) = 0LL;\n          while ( v20 < v19 );\n        }\n      }\n      if ( ++v16 >= *((signed int *)a1 + 60) )\n        break;\n      v15 = a1[28];\n    }\n  }\n  result = a1[36];\n  if ( result && *((_DWORD *)a1 + 76) > 0 )\n  {\n    v22 = 0LL;\n    while ( 1 )\n    {\n      v23 = *(_QWORD *)(result + 8 * v22);\n      if ( v23 )\n      {\n        *(_QWORD *)(a1[36] + 8 * v22) = sub_438340(\"msa.c\", 232LL, v23, 8LL * *((signed int *)a1 + 80));\n        v24 = *((signed int *)a1 + 81);\n        if ( v24 > 0 )\n        {\n          v25 = *((signed int *)a1 + 80);\n          v26 = v25 - v24;\n          do\n            *(_QWORD *)(*(_QWORD *)(a1[36] + 8 * v22) + 8 * v26++) = 0LL;\n          while ( v26 < v25 );\n        }\n      }\n      ++v22;\n      result = *((signed int *)a1 + 76);\n      if ( v22 >= result )\n        break;\n      result = a1[36];\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42b140L", 
            "funcEndAddr": "0x42b574L", 
            "funcName": "sub_42B140"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42B580(void *ptr)\n{\n  unsigned int *v1; // rbx\n  __int64 v2; // rsi\n  __int64 v3; // rsi\n  __int64 v4; // rsi\n  __int64 v5; // rsi\n  __int64 v6; // rsi\n  __int64 v7; // rsi\n  void *v8; // rdi\n  void *v9; // rdi\n  void *v10; // rdi\n  void *v11; // rdi\n  void *v12; // rdi\n  void *v13; // rdi\n  void *v14; // rdi\n  void *v15; // rdi\n  void *v16; // rdi\n  void *v17; // rdi\n  void *v18; // rdi\n  __int64 v19; // rsi\n  __int64 v20; // rsi\n  __int64 v21; // rsi\n  __int64 v22; // rsi\n  __int64 v23; // rsi\n  __int64 v24; // rdx\n  __int64 v25; // rsi\n  __int64 v26; // rsi\n  __int64 v27; // rsi\n  __int64 v28; // rsi\n  __int64 v29; // rdx\n\n  v1 = (unsigned int *)ptr;\n  v2 = *((unsigned int *)ptr + 7);\n  sub_438390(*(void **)ptr);\n  v3 = *((unsigned int *)ptr + 7);\n  sub_438390(*((void **)ptr + 1));\n  v4 = *((unsigned int *)ptr + 7);\n  sub_438390(*((void **)ptr + 12));\n  v5 = *((unsigned int *)ptr + 7);\n  sub_438390(*((void **)ptr + 13));\n  v6 = *((unsigned int *)ptr + 7);\n  sub_438390(*((void **)ptr + 14));\n  v7 = *((unsigned int *)ptr + 7);\n  sub_438390(*((void **)ptr + 15));\n  v8 = (void *)*((_QWORD *)ptr + 41);\n  if ( v8 )\n    free(v8);\n  v9 = (void *)*((_QWORD *)v1 + 2);\n  if ( v9 )\n    free(v9);\n  v10 = (void *)*((_QWORD *)v1 + 5);\n  if ( v10 )\n    free(v10);\n  v11 = (void *)*((_QWORD *)v1 + 6);\n  if ( v11 )\n    free(v11);\n  v12 = (void *)*((_QWORD *)v1 + 7);\n  if ( v12 )\n    free(v12);\n  v13 = (void *)*((_QWORD *)v1 + 8);\n  if ( v13 )\n    free(v13);\n  v14 = (void *)*((_QWORD *)v1 + 9);\n  if ( v14 )\n    free(v14);\n  v15 = (void *)*((_QWORD *)v1 + 10);\n  if ( v15 )\n    free(v15);\n  v16 = (void *)*((_QWORD *)v1 + 11);\n  if ( v16 )\n    free(v16);\n  v17 = (void *)*((_QWORD *)v1 + 42);\n  if ( v17 )\n    free(v17);\n  v18 = (void *)*((_QWORD *)v1 + 43);\n  if ( v18 )\n    free(v18);\n  v19 = v1[46];\n  sub_438390(*((void **)v1 + 22));\n  v20 = v1[52];\n  sub_438390(*((void **)v1 + 24));\n  v21 = v1[52];\n  sub_438390(*((void **)v1 + 25));\n  v22 = v1[60];\n  sub_438390(*((void **)v1 + 27));\n  v23 = v1[60];\n  v24 = v1[7];\n  sub_4383E0(*((void **)v1 + 28));\n  v25 = v1[68];\n  sub_438390(*((void **)v1 + 31));\n  v26 = v1[68];\n  sub_438390(*((void **)v1 + 32));\n  v27 = v1[76];\n  sub_438390(*((void **)v1 + 35));\n  v28 = v1[76];\n  v29 = v1[7];\n  sub_4383E0(*((void **)v1 + 36));\n  sub_4283E0(*((void **)v1 + 39));\n  sub_4283E0(*((void **)v1 + 29));\n  sub_4283E0(*((void **)v1 + 33));\n  sub_4283E0(*((void **)v1 + 37));\n  free(v1);\n}\n", 
            "funcStartAddr": "0x42b580L", 
            "funcEndAddr": "0x42b74fL", 
            "funcName": "sub_42B580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42B750(__int64 a1, int a2, char *a3)\n{\n  char *v3; // rbp\n  __int64 result; // rax\n  _QWORD *v5; // rax\n  signed __int64 v6; // rcx\n  signed __int64 v7; // rax\n\n  v3 = a3;\n  if ( !*(_QWORD *)(a1 + 96) )\n  {\n    v5 = (_QWORD *)sub_4382F0(\"msa.c\", 310LL, 8LL * *(signed int *)(a1 + 320));\n    *(_QWORD *)(a1 + 96) = v5;\n    v6 = *(signed int *)(a1 + 320);\n    if ( v6 > 0 )\n    {\n      *v5 = 0LL;\n      if ( (_DWORD)v6 != 1 )\n      {\n        v7 = 1LL;\n        do\n          *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v7++) = 0LL;\n        while ( v7 < v6 );\n      }\n    }\n  }\n  result = sub_438810(v3);\n  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8LL * a2) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42b750L", 
            "funcEndAddr": "0x42b7d7L", 
            "funcName": "sub_42B750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42B7E0(__int64 a1, int a2, char *a3)\n{\n  char *v3; // rbp\n  __int64 result; // rax\n  _QWORD *v5; // rax\n  signed __int64 v6; // rcx\n  signed __int64 v7; // rax\n\n  v3 = a3;\n  if ( !*(_QWORD *)(a1 + 104) )\n  {\n    v5 = (_QWORD *)sub_4382F0(\"msa.c\", 335LL, 8LL * *(signed int *)(a1 + 320));\n    *(_QWORD *)(a1 + 104) = v5;\n    v6 = *(signed int *)(a1 + 320);\n    if ( v6 > 0 )\n    {\n      *v5 = 0LL;\n      if ( (_DWORD)v6 != 1 )\n      {\n        v7 = 1LL;\n        do\n          *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v7++) = 0LL;\n        while ( v7 < v6 );\n      }\n    }\n  }\n  result = sub_438810(v3);\n  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8LL * a2) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42b7e0L", 
            "funcEndAddr": "0x42b867L", 
            "funcName": "sub_42B7E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42B870(__int64 a1, char *a2)\n{\n  __int64 v2; // rdx\n  signed int v3; // eax\n  __int64 v4; // rax\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n\n  v2 = *(_QWORD *)(a1 + 176);\n  if ( !v2 )\n  {\n    v7 = sub_4382F0(\"msa.c\", 362LL, 80LL);\n    v2 = v7;\n    *(_QWORD *)(a1 + 176) = v7;\n    *(_DWORD *)(a1 + 188) = 10;\n    v3 = 10;\n    if ( *(_DWORD *)(a1 + 184) != 10 )\n      goto LABEL_4;\n    goto LABEL_3;\n  }\n  v3 = *(_DWORD *)(a1 + 188);\n  if ( *(_DWORD *)(a1 + 184) == v3 )\n  {\nLABEL_3:\n    *(_DWORD *)(a1 + 188) = v3 + 10;\n    *(_QWORD *)(a1 + 176) = sub_438340(\"msa.c\", 367LL, v2, 8LL * v3 + 80);\n  }\nLABEL_4:\n  v4 = sub_438810(a2);\n  v5 = *(signed int *)(a1 + 184);\n  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v5) = v4;\n  result = (unsigned int)(v5 + 1);\n  *(_DWORD *)(a1 + 184) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42b870L", 
            "funcEndAddr": "0x42b928L", 
            "funcName": "sub_42B870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42B930(__int64 a1, char *a2, char *a3)\n{\n  char *v3; // r14\n  signed int v4; // eax\n  __int64 v5; // rax\n  __int64 v6; // rdx\n  __int64 result; // rax\n\n  v3 = a3;\n  if ( !*(_QWORD *)(a1 + 192) )\n  {\n    *(_QWORD *)(a1 + 192) = sub_4382F0(\"msa.c\", 395LL, 80LL);\n    *(_QWORD *)(a1 + 200) = sub_4382F0(\"msa.c\", 396LL, 80LL);\n    *(_DWORD *)(a1 + 212) = 10;\n    v4 = 10;\n    if ( *(_DWORD *)(a1 + 208) != 10 )\n      goto LABEL_4;\n    goto LABEL_3;\n  }\n  v4 = *(_DWORD *)(a1 + 212);\n  if ( *(_DWORD *)(a1 + 208) == v4 )\n  {\nLABEL_3:\n    *(_DWORD *)(a1 + 212) = v4 + 10;\n    *(_QWORD *)(a1 + 192) = sub_438340(\"msa.c\", 401LL, *(_QWORD *)(a1 + 192), 8LL * v4 + 80);\n    *(_QWORD *)(a1 + 200) = sub_438340(\"msa.c\", 402LL, *(_QWORD *)(a1 + 200), 8LL * *(signed int *)(a1 + 212));\n  }\nLABEL_4:\n  *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8LL * *(signed int *)(a1 + 208)) = sub_438810(a2);\n  v5 = sub_438810(v3);\n  v6 = *(signed int *)(a1 + 208);\n  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v6) = v5;\n  result = (unsigned int)(v6 + 1);\n  *(_DWORD *)(a1 + 208) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x42b930L", 
            "funcEndAddr": "0x42ba55L", 
            "funcName": "sub_42B930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42BA60(__int64 a1, const char *a2, int a3, char *a4)\n{\n  char *v4; // r14\n  int v5; // er15\n  char *v6; // r12\n  int v7; // ebp\n  __int64 v8; // rax\n  __int64 v9; // rcx\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  __int64 *v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rcx\n  __int64 v17; // rdx\n  __int64 v18; // rax\n  __int64 v19; // rsi\n  __int64 v20; // rax\n  __int64 v21; // rax\n  __int64 v22; // r12\n  __int64 v23; // rax\n  __int64 v24; // rbp\n  unsigned int v25; // er15\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = a3;\n  v6 = (char *)a2;\n  if ( *(_QWORD *)(a1 + 216) )\n  {\n    v7 = sub_4286C0(*(_QWORD *)(a1 + 232), a2);\n    if ( v7 >= 0 )\n      goto LABEL_22;\n    v7 = sub_428470(*(__int64 **)(a1 + 232), a2);\n    *(_QWORD *)(a1 + 216) = sub_438340(\"msa.c\", 463LL, *(_QWORD *)(a1 + 216), 8LL * *(signed int *)(a1 + 240) + 8);\n    *(_QWORD *)(a1 + 224) = sub_438340(\"msa.c\", 464LL, *(_QWORD *)(a1 + 224), 8LL * *(signed int *)(a1 + 240) + 8);\n    v8 = sub_4382F0(\"msa.c\", 465LL, 8LL * *(signed int *)(a1 + 320));\n    v9 = *(signed int *)(a1 + 240);\n    *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) = v8;\n    v10 = *(signed int *)(a1 + 320);\n    if ( v10 <= 0 )\n      goto LABEL_22;\n    v11 = v10 & 3;\n    if ( (unsigned __int64)(v10 - 1) >= 3 )\n    {\n      v19 = v10 - v11;\n      v12 = 0LL;\n      do\n      {\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) + 8 * v12) = 0LL;\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) + 8 * v12 + 8) = 0LL;\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) + 8 * v12 + 16) = 0LL;\n        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) + 8 * v12 + 24) = 0LL;\n        v12 += 4LL;\n      }\n      while ( v19 != v12 );\n      if ( !v11 )\n        goto LABEL_22;\n    }\n    else\n    {\n      v12 = 0LL;\n      if ( !(v10 & 3) )\n        goto LABEL_22;\n    }\n    v20 = -v11;\n    do\n    {\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) + 8 * v12++) = 0LL;\n      ++v20;\n    }\n    while ( v20 );\n    goto LABEL_22;\n  }\n  v13 = (__int64 *)sub_428360();\n  *(_QWORD *)(a1 + 232) = v13;\n  v7 = sub_428470(v13, a2);\n  *(_QWORD *)(a1 + 216) = sub_4382F0(\"msa.c\", 447LL, 8LL);\n  *(_QWORD *)(a1 + 224) = sub_4382F0(\"msa.c\", 448LL, 8LL);\n  **(_QWORD **)(a1 + 224) = sub_4382F0(\"msa.c\", 449LL, 8LL * *(signed int *)(a1 + 320));\n  v14 = *(signed int *)(a1 + 320);\n  if ( v14 <= 0 )\n    goto LABEL_22;\n  v15 = v14 & 3;\n  if ( (unsigned __int64)(v14 - 1) >= 3 )\n  {\n    v17 = v14 - v15;\n    v16 = 0LL;\n    do\n    {\n      *(_QWORD *)(**(_QWORD **)(a1 + 224) + 8 * v16) = 0LL;\n      *(_QWORD *)(**(_QWORD **)(a1 + 224) + 8 * v16 + 8) = 0LL;\n      *(_QWORD *)(**(_QWORD **)(a1 + 224) + 8 * v16 + 16) = 0LL;\n      *(_QWORD *)(**(_QWORD **)(a1 + 224) + 8 * v16 + 24) = 0LL;\n      v16 += 4LL;\n    }\n    while ( v17 != v16 );\n    if ( !v15 )\n      goto LABEL_22;\n    goto LABEL_14;\n  }\n  v16 = 0LL;\n  if ( v14 & 3 )\n  {\nLABEL_14:\n    v18 = -v15;\n    do\n    {\n      *(_QWORD *)(**(_QWORD **)(a1 + 224) + 8 * v16++) = 0LL;\n      ++v18;\n    }\n    while ( v18 );\n  }\nLABEL_22:\n  if ( v7 == *(_DWORD *)(a1 + 240) )\n  {\n    v21 = sub_438810(v6);\n    v22 = v7;\n    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8LL * v7) = v21;\n    ++*(_DWORD *)(a1 + 240);\n  }\n  else\n  {\n    v22 = v7;\n  }\n  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v22);\n  v24 = v5;\n  if ( *(_QWORD *)(v23 + 8LL * v5) )\n  {\n    v25 = sub_438690(v23 + 8LL * v5, 0xFFFFFFFFLL, \"\\n\", 1LL);\n    if ( (v25 & 0x80000000) != 0 )\n      sub_4325B0(\"failed to sre_strcat()\", -1);\n    result = sub_438690(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v22) + 8 * v24, v25, v4, 0xFFFFFFFFLL);\n    if ( (signed int)result < 0 )\n      sub_4325B0(\"failed to sre_strcat()\", v25);\n  }\n  else\n  {\n    result = sub_438810(v4);\n    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v22) + 8LL * v5) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42ba60L", 
            "funcEndAddr": "0x42bdecL", 
            "funcName": "sub_42BA60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42BDF0(__int64 a1, char *a2, __int64 a3)\n{\n  __int64 v3; // r14\n  __int64 v4; // rbx\n  int v5; // ebp\n  __int64 v6; // rdi\n  __int64 *v7; // rax\n  _QWORD *v8; // rax\n  __int64 v9; // rax\n\n  v3 = a3;\n  v4 = a1;\n  if ( !*(_QWORD *)(a1 + 248) )\n  {\n    *(_QWORD *)(a1 + 248) = sub_4382F0(\"msa.c\", 517LL, 8LL);\n    *(_QWORD *)(a1 + 256) = sub_4382F0(\"msa.c\", 518LL, 8LL);\n    v7 = (__int64 *)sub_428360();\n    *(_QWORD *)(a1 + 264) = v7;\n    v5 = sub_428470(v7, a2);\n    v8 = *(_QWORD **)(a1 + 256);\n    goto LABEL_7;\n  }\n  v5 = sub_4286C0(*(_QWORD *)(a1 + 264), a2);\n  if ( v5 < 0 )\n  {\n    v5 = sub_428470(*(__int64 **)(a1 + 264), a2);\n    *(_QWORD *)(a1 + 248) = sub_438340(\"msa.c\", 533LL, *(_QWORD *)(a1 + 248), 8LL * *(signed int *)(a1 + 272) + 8);\n    v9 = sub_438340(\"msa.c\", 534LL, *(_QWORD *)(a1 + 256), 8LL * *(signed int *)(a1 + 272) + 8);\n    *(_QWORD *)(a1 + 256) = v9;\n    v8 = (_QWORD *)(v9 + 8LL * v5);\nLABEL_7:\n    *v8 = 0LL;\n    if ( v5 == *(_DWORD *)(a1 + 272) )\n      goto LABEL_4;\nLABEL_8:\n    v6 = v5;\n    return sub_438690(*(_QWORD *)(v4 + 256) + 8 * v6, 0xFFFFFFFFLL, v3, 0xFFFFFFFFLL);\n  }\n  if ( v5 != *(_DWORD *)(a1 + 272) )\n    goto LABEL_8;\nLABEL_4:\n  v6 = v5;\n  *(_QWORD *)(*(_QWORD *)(v4 + 248) + 8LL * v5) = sub_438810(a2);\n  ++*(_DWORD *)(v4 + 272);\n  return sub_438690(*(_QWORD *)(v4 + 256) + 8 * v6, 0xFFFFFFFFLL, v3, 0xFFFFFFFFLL);\n}\n", 
            "funcStartAddr": "0x42bdf0L", 
            "funcEndAddr": "0x42bf5bL", 
            "funcName": "sub_42BDF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42BF60(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rdi\n  int v4; // eax\n  __int64 result; // rax\n\n  v2 = a1;\n  v3 = *(_QWORD *)(a1 + 264);\n  if ( !v3 )\n    return 0LL;\n  v4 = sub_4286C0(v3, a2);\n  if ( v4 < 0 )\n    result = 0LL;\n  else\n    result = *(_QWORD *)(*(_QWORD *)(v2 + 256) + 8LL * v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x42bf60L", 
            "funcEndAddr": "0x42bf90L", 
            "funcName": "sub_42BF60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42BF90(__int64 a1, const char *a2, int a3, __int64 a4)\n{\n  __int64 v4; // r14\n  int v5; // er15\n  char *v6; // r12\n  int v7; // ebp\n  __int64 v8; // rax\n  __int64 v9; // rcx\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  __int64 v13; // rdx\n  __int64 v14; // rax\n  __int64 v15; // rcx\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  __int64 *v18; // rax\n  __int64 v19; // rax\n  __int64 v20; // rcx\n  __int64 v22; // rsi\n  __int64 v23; // rax\n\n  v4 = a4;\n  v5 = a3;\n  v6 = (char *)a2;\n  if ( !*(_QWORD *)(a1 + 280) )\n  {\n    *(_QWORD *)(a1 + 280) = sub_4382F0(\"msa.c\", 601LL, 8LL);\n    *(_QWORD *)(a1 + 288) = sub_4382F0(\"msa.c\", 602LL, 8LL);\n    **(_QWORD **)(a1 + 288) = sub_4382F0(\"msa.c\", 603LL, 8LL * *(signed int *)(a1 + 320));\n    v13 = *(signed int *)(a1 + 320);\n    if ( v13 > 0 )\n    {\n      v14 = v13 & 3;\n      if ( (unsigned __int64)(v13 - 1) >= 3 )\n      {\n        v16 = v13 - v14;\n        v15 = 0LL;\n        do\n        {\n          *(_QWORD *)(**(_QWORD **)(a1 + 288) + 8 * v15) = 0LL;\n          *(_QWORD *)(**(_QWORD **)(a1 + 288) + 8 * v15 + 8) = 0LL;\n          *(_QWORD *)(**(_QWORD **)(a1 + 288) + 8 * v15 + 16) = 0LL;\n          *(_QWORD *)(**(_QWORD **)(a1 + 288) + 8 * v15 + 24) = 0LL;\n          v15 += 4LL;\n        }\n        while ( v16 != v15 );\n        if ( !v14 )\n          goto LABEL_16;\n      }\n      else\n      {\n        v15 = 0LL;\n        if ( !(v13 & 3) )\n          goto LABEL_16;\n      }\n      v17 = -v14;\n      do\n      {\n        *(_QWORD *)(**(_QWORD **)(a1 + 288) + 8 * v15++) = 0LL;\n        ++v17;\n      }\n      while ( v17 );\n    }\nLABEL_16:\n    v18 = (__int64 *)sub_428360();\n    *(_QWORD *)(a1 + 296) = v18;\n    v7 = sub_428470(v18, a2);\n    goto LABEL_17;\n  }\n  v7 = sub_4286C0(*(_QWORD *)(a1 + 296), a2);\n  if ( v7 >= 0 )\n    goto LABEL_17;\n  v7 = sub_428470(*(__int64 **)(a1 + 296), a2);\n  *(_QWORD *)(a1 + 280) = sub_438340(\"msa.c\", 620LL, *(_QWORD *)(a1 + 280), 8LL * *(signed int *)(a1 + 304) + 8);\n  *(_QWORD *)(a1 + 288) = sub_438340(\"msa.c\", 621LL, *(_QWORD *)(a1 + 288), 8LL * *(signed int *)(a1 + 304) + 8);\n  v8 = sub_4382F0(\"msa.c\", 622LL, 8LL * *(signed int *)(a1 + 320));\n  v9 = *(signed int *)(a1 + 304);\n  *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) = v8;\n  v10 = *(signed int *)(a1 + 320);\n  if ( v10 <= 0 )\n    goto LABEL_17;\n  v11 = v10 & 3;\n  if ( (unsigned __int64)(v10 - 1) >= 3 )\n  {\n    v22 = v10 - v11;\n    v12 = 0LL;\n    do\n    {\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) + 8 * v12) = 0LL;\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) + 8 * v12 + 8) = 0LL;\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) + 8 * v12 + 16) = 0LL;\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) + 8 * v12 + 24) = 0LL;\n      v12 += 4LL;\n    }\n    while ( v22 != v12 );\n    if ( !v11 )\n      goto LABEL_17;\n    goto LABEL_24;\n  }\n  v12 = 0LL;\n  if ( v10 & 3 )\n  {\nLABEL_24:\n    v23 = -v11;\n    do\n    {\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v9) + 8 * v12++) = 0LL;\n      ++v23;\n    }\n    while ( v23 );\n  }\nLABEL_17:\n  if ( v7 == *(_DWORD *)(a1 + 304) )\n  {\n    v19 = sub_438810(v6);\n    v20 = v7;\n    *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8LL * v7) = v19;\n    ++*(_DWORD *)(a1 + 304);\n  }\n  else\n  {\n    v20 = v7;\n  }\n  return sub_438690(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v20) + 8LL * v5, 0xFFFFFFFFLL, v4, 0xFFFFFFFFLL);\n}\n", 
            "funcStartAddr": "0x42bf90L", 
            "funcEndAddr": "0x42c2b2L", 
            "funcName": "sub_42BF90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42C2C0(__int64 a1)\n{\n  __int64 v1; // r15\n  int v2; // eax\n  void *v3; // rsi\n  signed __int64 v4; // rbx\n  __int64 v5; // rsi\n  __int64 v6; // rsi\n  __int64 v7; // rax\n  __int64 v8; // rsi\n  __int64 v9; // rax\n  __int64 v10; // rsi\n  const char *v11; // rdi\n  size_t v12; // rax\n  const char *v13; // rdi\n  size_t v14; // rax\n  const char *v15; // rdi\n  size_t v16; // rax\n  void *v17; // rdi\n  void *v18; // rdi\n  void *v19; // rdi\n\n  v1 = a1;\n  v2 = *(_DWORD *)(a1 + 28);\n  if ( !v2 )\n  {\n    v3 = &unk_4409CD;\n    if ( *(_QWORD *)(a1 + 40) )\n      v3 = *(void **)(a1 + 40);\n    sub_4325B0(\"Parse error: no sequences were found for alignment %s\", (char)v3);\n  }\n  *(_DWORD *)(a1 + 24) = **(_DWORD **)(a1 + 328);\n  if ( v2 > 0 )\n  {\n    v4 = 0LL;\n    do\n    {\n      if ( !*(_QWORD *)(*(_QWORD *)a1 + 8 * v4) )\n      {\n        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);\n        *(_QWORD *)(a1 + 40);\n        sub_4325B0(\"Parse error: No sequence for %s in alignment %s\", v5);\n      }\n      if ( *(_BYTE *)(a1 + 32) & 1 && *(float *)(*(_QWORD *)(a1 + 16) + 4 * v4) == -1.0 )\n      {\n        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);\n        *(_QWORD *)(a1 + 40);\n        sub_4325B0(\"Parse error: some weights are set, but %s doesn't have one in alignment %s\", v6);\n      }\n      if ( *(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * v4) != *(_DWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 40);\n        sub_4325B0(\n          \"Parse error: sequence %s: length %d, expected %d in alignment %s\",\n          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4));\n      }\n      v7 = *(_QWORD *)(a1 + 112);\n      if ( v7 && *(_QWORD *)(v7 + 8 * v4) && *(_DWORD *)(*(_QWORD *)(a1 + 336) + 4 * v4) != *(_DWORD *)(a1 + 24) )\n      {\n        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);\n        *(_QWORD *)(a1 + 40);\n        sub_4325B0(\"Parse error: #=GR SS annotation for %s: length %d, expected %d in alignment %s\", v8);\n      }\n      v9 = *(_QWORD *)(a1 + 120);\n      if ( v9 && *(_QWORD *)(v9 + 8 * v4) && *(_DWORD *)(*(_QWORD *)(a1 + 344) + 4 * v4) != *(_DWORD *)(a1 + 24) )\n      {\n        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);\n        *(_QWORD *)(a1 + 40);\n        sub_4325B0(\"Parse error: #=GR SA annotation for %s: length %d, expected %d in alignment %s\", v10);\n      }\n      ++v4;\n    }\n    while ( v4 < *(signed int *)(a1 + 28) );\n  }\n  v11 = *(const char **)(a1 + 72);\n  if ( v11 )\n  {\n    v12 = strlen(v11);\n    if ( v12 != *(_DWORD *)(v1 + 24) )\n    {\n      *(_QWORD *)(v1 + 40);\n      sub_4325B0(\"Parse error: #=GC SS_cons annotation: length %d, expected %d in alignment %s\", v12);\n    }\n  }\n  v13 = *(const char **)(v1 + 80);\n  if ( v13 )\n  {\n    v14 = strlen(v13);\n    if ( v14 != *(_DWORD *)(v1 + 24) )\n    {\n      *(_QWORD *)(v1 + 40);\n      sub_4325B0(\"Parse error: #=GC SA_cons annotation: length %d, expected %d in alignment %s\", v14);\n    }\n  }\n  v15 = *(const char **)(v1 + 88);\n  if ( v15 )\n  {\n    v16 = strlen(v15);\n    if ( v16 != *(_DWORD *)(v1 + 24) )\n    {\n      *(_QWORD *)(v1 + 40);\n      sub_4325B0(\"Parse error: #=GC RF annotation: length %d, expected %d in alignment %s\", v16);\n    }\n  }\n  if ( !(*(_BYTE *)(v1 + 32) & 1) )\n    sub_43C860(*(_QWORD *)(v1 + 16), *(unsigned int *)(v1 + 28));\n  v17 = *(void **)(v1 + 328);\n  if ( v17 )\n  {\n    free(v17);\n    *(_QWORD *)(v1 + 328) = 0LL;\n  }\n  v18 = *(void **)(v1 + 336);\n  if ( v18 )\n  {\n    free(v18);\n    *(_QWORD *)(v1 + 336) = 0LL;\n  }\n  v19 = *(void **)(v1 + 344);\n  if ( v19 )\n  {\n    free(v19);\n    *(_QWORD *)(v1 + 344) = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x42c2c0L", 
            "funcEndAddr": "0x42c589L", 
            "funcName": "sub_42C2C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42C590(char *s, signed int a2, char *a3)\n{\n  char *v3; // r15\n  signed int v4; // er14\n  __int64 v5; // rbx\n  FILE *v6; // rax\n  size_t v7; // rax\n  char *v8; // r15\n  signed __int64 v9; // rsi\n  signed int v10; // eax\n  __int64 v11; // rbp\n  FILE *v12; // rax\n  char *v13; // r12\n  size_t v14; // r15\n  size_t v15; // rax\n  void *ptr; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_4382F0(\"msa.c\", 760LL, 64LL);\n  if ( !strcmp(s, \"-\") )\n  {\n    *(_QWORD *)v5 = stdin;\n    *(_QWORD *)(v5 + 48) = 0x100000000LL;\n    v9 = 0xFFFFFFFFLL;\n    *(_QWORD *)(v5 + 8) = sub_438810(\"[STDIN]\");\n    *(_QWORD *)(v5 + 40) = 0LL;\n    if ( v4 )\n      goto LABEL_19;\nLABEL_5:\n    if ( *(_DWORD *)(v5 + 52) == 1 || *(_DWORD *)(v5 + 48) )\n      sub_4325B0(\"Can't autodetect alignment file format from a stdin or gzip pipe\", v9);\n    v10 = sub_434F70(*(FILE **)v5);\n    v4 = 105;\n    if ( v10 != 7 )\n      v4 = v10;\n    if ( v4 && v4 <= 100 )\n    {\n      v11 = *(_QWORD *)(v5 + 8);\n      sub_4367F0((unsigned int)v4, v9);\n      sub_4325B0(\n        \"File %s does not appear to be an alignment file;\\n\"\n        \"rather, it appears to be an unaligned file in %s format.\\n\"\n        \"I'm expecting an alignment file in this context.\\n\",\n        v11);\n    }\n    if ( !v4 )\n      sub_4325B0(\"Can't determine format of multiple alignment file %s\", *(_QWORD *)(v5 + 8));\n    goto LABEL_19;\n  }\n  v6 = fopen(s, \"r\");\n  *(_QWORD *)v5 = v6;\n  if ( v6 )\n  {\n    v7 = strlen(s);\n    v8 = (char *)sub_4382F0(\"msa.c\", 806LL, v7 + 5);\n    sprintf(v8, \"%s.ssi\", s);\n  }\n  else\n  {\n    v12 = sub_427D00(s, v3, &ptr);\n    *(_QWORD *)v5 = v12;\n    if ( !v12 )\n      return 0LL;\n    v13 = sub_427C20((__int64)v12, (const char *)ptr, s);\n    v14 = strlen(v13);\n    v15 = strlen(s);\n    v8 = (char *)sub_4382F0(\"msa.c\", 813LL, v14 + v15 + 5);\n    sprintf(v8, \"%s.ssi\", v13);\n    free(ptr);\n  }\n  *(_QWORD *)(v5 + 48) = 0LL;\n  *(_QWORD *)(v5 + 8) = sub_438810(s);\n  v9 = v5 + 40;\n  *(_QWORD *)(v5 + 40) = 0LL;\n  sub_438900(v8);\n  free(v8);\n  if ( !v4 )\n    goto LABEL_5;\nLABEL_19:\n  *(_DWORD *)(v5 + 56) = v4;\n  *(_DWORD *)(v5 + 16) = 0;\n  *(_QWORD *)(v5 + 24) = 0LL;\n  *(_DWORD *)(v5 + 32) = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x42c590L", 
            "funcEndAddr": "0x42c7b5L", 
            "funcName": "sub_42C590"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42C8E0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  switch ( *(_DWORD *)(a1 + 56) )\n  {\n    case 0x65:\n      result = sub_43AF00();\n      break;\n    case 0x66:\n      result = sub_42ED20();\n      break;\n    case 0x67:\n      result = sub_42D9D0();\n      break;\n    case 0x68:\n      result = sub_425E00(a1, a2);\n      break;\n    case 0x69:\n      result = (__int64)sub_423510(a1);\n      break;\n    case 0x6A:\n      result = sub_42E4D0();\n      break;\n    default:\n      sub_4325B0(\"MSAFILE corrupted: bad format index\", a2);\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42c8e0L", 
            "funcEndAddr": "0x42c921L", 
            "funcName": "sub_42C8E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42C930(void *ptr)\n{\n  _QWORD *v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v1 = ptr;\n  if ( !*((_DWORD *)ptr + 13) )\n    fclose(*(FILE **)ptr);\n  v2 = (void *)*((_QWORD *)ptr + 3);\n  if ( v2 )\n    free(v2);\n  v3 = (void *)v1[5];\n  if ( v3 )\n    sub_439610(v3);\n  v4 = (void *)v1[1];\n  if ( v4 )\n    free(v4);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x42c930L", 
            "funcEndAddr": "0x42c975L", 
            "funcName": "sub_42C930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42C980(__int64 a1)\n{\n  if ( !sub_438520(a1 + 24, a1 + 32, *(_QWORD *)a1) )\n    return 0LL;\n  ++*(_DWORD *)(a1 + 16);\n  return *(_QWORD *)(a1 + 24);\n}\n", 
            "funcStartAddr": "0x42c980L", 
            "funcEndAddr": "0x42c9a7L", 
            "funcName": "sub_42C980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42CA00(__int64 a1, char *a2, int a3)\n{\n  signed int v3; // ebp\n\n  v3 = a3;\n  if ( a3 < 0 || *(_DWORD *)(a1 + 28) <= a3 || strcmp(a2, *(const char **)(*(_QWORD *)(a1 + 8) + 8LL * a3)) )\n  {\n    v3 = sub_4286C0(*(_QWORD *)(a1 + 312), a2);\n    if ( v3 < 0 )\n    {\n      v3 = sub_428470(*(__int64 **)(a1 + 312), a2);\n      if ( v3 >= *(_DWORD *)(a1 + 320) )\n        sub_42B140((__int64 *)a1);\n      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * v3) = sub_438810(a2);\n      ++*(_DWORD *)(a1 + 28);\n    }\n  }\n  return (unsigned int)v3;\n}\n", 
            "funcStartAddr": "0x42ca00L", 
            "funcEndAddr": "0x42ca85L", 
            "funcName": "sub_42CA00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42CA90(__int64 a1, int *a2)\n{\n  __int64 v2; // rbx\n  signed __int64 v3; // r13\n  _QWORD *v4; // rax\n  signed __int64 v5; // rcx\n  signed __int64 v6; // rax\n  _QWORD *v7; // rax\n  signed __int64 v8; // rcx\n  signed __int64 v9; // rax\n  signed __int64 v10; // rbp\n  __int64 v11; // rcx\n  int v12; // eax\n  signed __int64 v13; // rax\n  char *v14; // r12\n  char *v15; // r12\n  signed __int64 v16; // rax\n  int v17; // eax\n  int v18; // eax\n\n  v2 = sub_42AF80(a2[2], a2[1]);\n  if ( a2[2] > 0 )\n  {\n    v3 = 0LL;\n    do\n    {\n      strcpy(*(char **)(*(_QWORD *)v2 + 8 * v3), *(const char **)(a1 + 8 * v3));\n      *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v3) = *(_DWORD *)(*((_QWORD *)a2 + 2) + 4 * v3);\n      v10 = 360 * v3;\n      *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3) = sub_438810((char *)(*((_QWORD *)a2 + 5) + 360 * v3 + 4));\n      *(_DWORD *)(*(_QWORD *)(v2 + 328) + 4 * v3) = *(_DWORD *)(v2 + 24);\n      sub_428470(*(__int64 **)(v2 + 312), *(const char **)(*(_QWORD *)(v2 + 8) + 8 * v3));\n      v11 = *((_QWORD *)a2 + 5);\n      v12 = *(_DWORD *)(v11 + 360 * v3);\n      if ( v12 & 4 )\n      {\n        v14 = (char *)(v11 + v10 + 132);\n        if ( !*(_QWORD *)(v2 + 96) )\n        {\n          v4 = (_QWORD *)sub_4382F0(\"msa.c\", 310LL, 8LL * *(signed int *)(v2 + 320));\n          *(_QWORD *)(v2 + 96) = v4;\n          v5 = *(signed int *)(v2 + 320);\n          if ( v5 > 0 )\n          {\n            *v4 = 0LL;\n            if ( (_DWORD)v5 != 1 )\n            {\n              v6 = 1LL;\n              do\n                *(_QWORD *)(*(_QWORD *)(v2 + 96) + 8 * v6++) = 0LL;\n              while ( v6 < v5 );\n            }\n          }\n        }\n        *(_QWORD *)(*(_QWORD *)(v2 + 96) + 8 * v3) = sub_438810(v14);\n        v11 = *((_QWORD *)a2 + 5);\n        v12 = *(_DWORD *)(v11 + v10);\n        if ( !(v12 & 8) )\n        {\nLABEL_15:\n          if ( v12 & 0x200 )\n            goto LABEL_26;\n          goto LABEL_16;\n        }\n      }\n      else if ( !(v12 & 8) )\n      {\n        goto LABEL_15;\n      }\n      v15 = (char *)(v11 + v10 + 196);\n      if ( !*(_QWORD *)(v2 + 104) )\n      {\n        v7 = (_QWORD *)sub_4382F0(\"msa.c\", 335LL, 8LL * *(signed int *)(v2 + 320));\n        *(_QWORD *)(v2 + 104) = v7;\n        v8 = *(signed int *)(v2 + 320);\n        if ( v8 > 0 )\n        {\n          *v7 = 0LL;\n          if ( (_DWORD)v8 != 1 )\n          {\n            v9 = 1LL;\n            do\n              *(_QWORD *)(*(_QWORD *)(v2 + 104) + 8 * v9++) = 0LL;\n            while ( v9 < v8 );\n          }\n        }\n      }\n      *(_QWORD *)(*(_QWORD *)(v2 + 104) + 8 * v3) = sub_438810(v15);\n      v12 = *(_DWORD *)(*((_QWORD *)a2 + 5) + v10);\n      if ( v12 & 0x200 )\n      {\nLABEL_26:\n        if ( !*(_QWORD *)(v2 + 112) )\n        {\n          *(_QWORD *)(v2 + 112) = sub_4382F0(\"msa.c\", 1055LL, 8LL * *(signed int *)(v2 + 320));\n          *(_QWORD *)(v2 + 336) = sub_4382F0(\"msa.c\", 1056LL, 4LL * *(signed int *)(v2 + 320));\n          if ( *(_DWORD *)(v2 + 320) > 0 )\n          {\n            v16 = 0LL;\n            do\n            {\n              *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v16) = 0LL;\n              *(_DWORD *)(*(_QWORD *)(v2 + 336) + 4 * v16++) = 0;\n            }\n            while ( v16 < *(signed int *)(v2 + 320) );\n          }\n        }\n        sub_424D70(\n          *(_QWORD *)(*(_QWORD *)v2 + 8 * v3),\n          *(_DWORD *)(v2 + 24),\n          *(const char **)(*((_QWORD *)a2 + 5) + v10 + 344),\n          (_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v3));\n        *(_DWORD *)(*(_QWORD *)(v2 + 336) + 4 * v3) = *(_DWORD *)(v2 + 24);\n        v17 = *(_DWORD *)(*((_QWORD *)a2 + 5) + v10);\n        if ( !(v17 & 0x400) )\n          goto LABEL_31;\nLABEL_17:\n        if ( !*(_QWORD *)(v2 + 120) )\n        {\n          *(_QWORD *)(v2 + 120) = sub_4382F0(\"msa.c\", 1068LL, 8LL * *(signed int *)(v2 + 320));\n          *(_QWORD *)(v2 + 344) = sub_4382F0(\"msa.c\", 1069LL, 4LL * *(signed int *)(v2 + 320));\n          if ( *(_DWORD *)(v2 + 320) > 0 )\n          {\n            v13 = 0LL;\n            do\n            {\n              *(_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * v13) = 0LL;\n              *(_DWORD *)(*(_QWORD *)(v2 + 344) + 4 * v13++) = 0;\n            }\n            while ( v13 < *(signed int *)(v2 + 320) );\n          }\n        }\n        sub_424D70(\n          *(_QWORD *)(*(_QWORD *)v2 + 8 * v3),\n          *(_DWORD *)(v2 + 24),\n          *(const char **)(*((_QWORD *)a2 + 5) + v10 + 352),\n          (_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * v3));\n        *(_DWORD *)(*(_QWORD *)(v2 + 344) + 4 * v3) = *(_DWORD *)(v2 + 24);\n        goto LABEL_31;\n      }\nLABEL_16:\n      if ( v12 & 0x400 )\n        goto LABEL_17;\nLABEL_31:\n      ++v3;\n    }\n    while ( v3 < a2[2] );\n  }\n  *(_QWORD *)(v2 + 40) = sub_438810(*((char **)a2 + 6));\n  *(_QWORD *)(v2 + 48) = sub_438810(*((char **)a2 + 7));\n  *(_QWORD *)(v2 + 56) = sub_438810(*((char **)a2 + 8));\n  *(_QWORD *)(v2 + 64) = sub_438810(*((char **)a2 + 9));\n  *(_QWORD *)(v2 + 72) = sub_438810(*((char **)a2 + 3));\n  *(_QWORD *)(v2 + 88) = sub_438810(*((char **)a2 + 4));\n  v18 = *a2;\n  if ( !(*a2 & 1) )\n  {\n    if ( !(v18 & 2) )\n      goto LABEL_34;\nLABEL_38:\n    *(_DWORD *)(v2 + 144) = a2[22];\n    *(_DWORD *)(v2 + 168) = 1;\n    *(_DWORD *)(v2 + 148) = a2[23];\n    *(_DWORD *)(v2 + 172) = 1;\n    if ( !(*a2 & 4) )\n      goto LABEL_36;\n    goto LABEL_35;\n  }\n  *(_DWORD *)(v2 + 128) = a2[20];\n  *(_DWORD *)(v2 + 152) = 1;\n  *(_DWORD *)(v2 + 132) = a2[21];\n  *(_DWORD *)(v2 + 156) = 1;\n  v18 = *a2;\n  if ( *a2 & 2 )\n    goto LABEL_38;\nLABEL_34:\n  if ( v18 & 4 )\n  {\nLABEL_35:\n    *(_DWORD *)(v2 + 136) = a2[24];\n    *(_DWORD *)(v2 + 160) = 1;\n    *(_DWORD *)(v2 + 140) = a2[25];\n    *(_DWORD *)(v2 + 164) = 1;\n  }\nLABEL_36:\n  *(_DWORD *)(v2 + 28) = a2[2];\n  *(_DWORD *)(v2 + 24) = a2[1];\n  return v2;\n}\n", 
            "funcStartAddr": "0x42ca90L", 
            "funcEndAddr": "0x42cf6aL", 
            "funcName": "sub_42CA90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42CF70(__int64 *a1)\n{\n  __int64 *v1; // r15\n  _DWORD *v2; // r14\n  signed __int64 v3; // rax\n  signed __int64 v4; // r8\n  __int64 v5; // rdx\n  __int64 v6; // rsi\n  __int64 v7; // rdi\n  unsigned __int8 v8; // bl\n\n  v1 = a1;\n  v2 = (_DWORD *)sub_4382F0(\"msa.c\", 1157LL, 4LL * *((signed int *)a1 + 6));\n  if ( *((_DWORD *)a1 + 6) > 0 )\n  {\n    v3 = 0LL;\n    v4 = -9223372036854751231LL;\n    do\n    {\n      v5 = *((signed int *)v1 + 7);\n      LODWORD(v6) = 0;\n      if ( v5 > 0 )\n      {\n        v7 = *v1;\n        v6 = 0LL;\n        do\n        {\n          v8 = *(_BYTE *)(*(_QWORD *)(v7 + 8 * v6) + v3) - 32;\n          if ( (v8 > 0x3Fu || !_bittest64(&v4, v8)) && *(_BYTE *)(*(_QWORD *)(v7 + 8 * v6) + v3) != 126 )\n            break;\n          ++v6;\n        }\n        while ( v6 < v5 );\n      }\n      v2[v3++] = v6 != v5;\n    }\n    while ( v3 < *((signed int *)v1 + 6) );\n  }\n  sub_42D040(v1, v2);\n  free(v2);\n}\n", 
            "funcStartAddr": "0x42cf70L", 
            "funcEndAddr": "0x42d035L", 
            "funcName": "sub_42CF70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42D040(__int64 a1, __int64 a2)\n{\n  int v2; // eax\n  signed __int64 v3; // r9\n  int v4; // er8\n  signed __int64 v5; // r11\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  __int64 v9; // rax\n  int v10; // ecx\n  signed __int64 v11; // rdx\n  __int64 v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rax\n  __int64 v15; // rax\n  signed __int64 v16; // rcx\n  __int64 v17; // rdx\n  signed __int64 v18; // rcx\n  __int64 v19; // rax\n  __int64 v20; // rax\n  __int64 v21; // rax\n  __int64 v22; // rax\n  int v23; // edx\n  signed __int64 v24; // rsi\n  __int64 v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rax\n  __int64 result; // rax\n  signed __int64 v29; // rcx\n\n  v2 = *(_DWORD *)(a1 + 24);\n  if ( v2 <= 0 )\n  {\n    v4 = 0;\n  }\n  else\n  {\n    v3 = 0LL;\n    v4 = 0;\n    do\n    {\n      if ( *(_DWORD *)(a2 + 4 * v3) )\n      {\n        if ( v3 != v4 )\n        {\n          if ( *(_DWORD *)(a1 + 28) > 0 )\n          {\n            v5 = 0LL;\n            do\n            {\n              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v5) + v4) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v5) + v3);\n              v6 = *(_QWORD *)(a1 + 112);\n              if ( v6 )\n              {\n                v7 = *(_QWORD *)(v6 + 8 * v5);\n                if ( v7 )\n                  *(_BYTE *)(v7 + v4) = *(_BYTE *)(v7 + v3);\n              }\n              v8 = *(_QWORD *)(a1 + 120);\n              if ( v8 )\n              {\n                v9 = *(_QWORD *)(v8 + 8 * v5);\n                if ( v9 )\n                  *(_BYTE *)(v9 + v4) = *(_BYTE *)(v9 + v3);\n              }\n              v10 = *(_DWORD *)(a1 + 304);\n              if ( v10 > 0 )\n              {\n                v11 = 0LL;\n                do\n                {\n                  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v11) + 8 * v5);\n                  if ( v12 )\n                  {\n                    *(_BYTE *)(v12 + v4) = *(_BYTE *)(v12 + v3);\n                    v10 = *(_DWORD *)(a1 + 304);\n                  }\n                  ++v11;\n                }\n                while ( v11 < v10 );\n              }\n              ++v5;\n            }\n            while ( v5 < *(signed int *)(a1 + 28) );\n          }\n          v13 = *(_QWORD *)(a1 + 72);\n          if ( v13 )\n            *(_BYTE *)(v13 + v4) = *(_BYTE *)(v13 + v3);\n          v14 = *(_QWORD *)(a1 + 80);\n          if ( v14 )\n            *(_BYTE *)(v14 + v4) = *(_BYTE *)(v14 + v3);\n          v15 = *(_QWORD *)(a1 + 88);\n          if ( v15 )\n            *(_BYTE *)(v15 + v4) = *(_BYTE *)(v15 + v3);\n          if ( *(_DWORD *)(a1 + 272) > 0 )\n          {\n            v16 = 0LL;\n            do\n            {\n              v17 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v16);\n              *(_BYTE *)(v17 + v4) = *(_BYTE *)(v17 + v3);\n              ++v16;\n            }\n            while ( v16 < *(signed int *)(a1 + 272) );\n          }\n        }\n        ++v4;\n        v2 = *(_DWORD *)(a1 + 24);\n      }\n      ++v3;\n    }\n    while ( v3 < v2 );\n  }\n  *(_DWORD *)(a1 + 24) = v4;\n  if ( *(_DWORD *)(a1 + 28) > 0 )\n  {\n    v18 = 0LL;\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v18) + v4) = 0;\n      v19 = *(_QWORD *)(a1 + 112);\n      if ( v19 )\n      {\n        v20 = *(_QWORD *)(v19 + 8 * v18);\n        if ( v20 )\n          *(_BYTE *)(v20 + v4) = 0;\n      }\n      v21 = *(_QWORD *)(a1 + 120);\n      if ( v21 )\n      {\n        v22 = *(_QWORD *)(v21 + 8 * v18);\n        if ( v22 )\n          *(_BYTE *)(v22 + v4) = 0;\n      }\n      v23 = *(_DWORD *)(a1 + 304);\n      if ( v23 > 0 )\n      {\n        v24 = 0LL;\n        do\n        {\n          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v24) + 8 * v18);\n          if ( v25 )\n          {\n            *(_BYTE *)(v25 + v4) = 0;\n            v23 = *(_DWORD *)(a1 + 304);\n          }\n          ++v24;\n        }\n        while ( v24 < v23 );\n      }\n      ++v18;\n    }\n    while ( v18 < *(signed int *)(a1 + 28) );\n  }\n  v26 = *(_QWORD *)(a1 + 72);\n  if ( v26 )\n    *(_BYTE *)(v26 + v4) = 0;\n  v27 = *(_QWORD *)(a1 + 80);\n  if ( v27 )\n    *(_BYTE *)(v27 + v4) = 0;\n  result = *(_QWORD *)(a1 + 88);\n  if ( result )\n    *(_BYTE *)(result + v4) = 0;\n  if ( *(_DWORD *)(a1 + 272) > 0 )\n  {\n    result = v4;\n    v29 = 0LL;\n    do\n      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v29++) + v4) = 0;\n    while ( v29 < *(signed int *)(a1 + 272) );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42d040L", 
            "funcEndAddr": "0x42d2c0L", 
            "funcName": "sub_42D040"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42D380(__int64 a1, __int64 a2, __int64 *a3, double a4, double a5, double a6, __m128i a7, double a8, __m128i a9)\n{\n  __int64 v9; // r15\n  __int64 v10; // r12\n  signed __int64 v11; // rax\n  int v12; // ebx\n  signed __int64 v13; // rcx\n  unsigned __int64 v14; // rsi\n  __int64 v15; // rbp\n  signed __int64 v16; // rdi\n  __int64 v17; // rsi\n  __m128i v18; // xmm3\n  __m128i v19; // xmm0\n  __m128i v20; // xmm1\n  __m128i v21; // xmm5\n  __m128i v22; // xmm0\n  __m128i v23; // xmm1\n  __int64 v24; // rbp\n  __int64 v25; // r13\n  int v26; // eax\n  signed __int64 v27; // r14\n  char *v28; // ST00_8\n  _QWORD *v29; // rax\n  char *v30; // rdi\n  signed __int64 v31; // rcx\n  signed __int64 v32; // rax\n  char *v33; // ST00_8\n  _QWORD *v34; // rax\n  char *v35; // rdi\n  signed __int64 v36; // rcx\n  signed __int64 v37; // rax\n  __int64 v38; // rsi\n  __int64 v39; // rsi\n  __int64 v40; // rax\n  __int64 v41; // rax\n  __int64 v42; // rax\n  char *v43; // rdi\n  __int64 v44; // rax\n  char *v45; // rdi\n  __int64 *v46; // [rsp+8h] [rbp-40h]\n\n  v9 = a2;\n  v10 = a1;\n  v11 = *(signed int *)(a1 + 28);\n  v12 = 0;\n  if ( v11 <= 0 )\n    goto LABEL_44;\n  if ( (unsigned int)v11 >= 8 )\n  {\n    v13 = v11 & 0xFFFFFFFFFFFFFFF8LL;\n    v14 = ((v11 & 0xFFFFFFFFFFFFFFF8LL) - 8) >> 3;\n    v15 = ((_BYTE)v14 + 1) & 1;\n    if ( (v11 & 0xFFFFFFFFFFFFFFF8LL) == 8 )\n    {\n      v19 = 0LL;\n      v17 = 0LL;\n      v20 = 0LL;\n      if ( v15 )\n      {\nLABEL_8:\n        v21 = _mm_cmpeq_epi32(a9, a9);\n        v20 = _mm_sub_epi32(\n                v20,\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17 + 16)), (__m128i)0LL), v21));\n        v19 = _mm_sub_epi32(\n                v19,\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17)), (__m128i)0LL), v21));\n        goto LABEL_9;\n      }\n    }\n    else\n    {\n      v16 = v15 - 1 - v14;\n      v17 = 0LL;\n      v18 = _mm_cmpeq_epi32(a7, a7);\n      v19 = 0LL;\n      v20 = 0LL;\n      do\n      {\n        a9 = _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17 + 16)), (__m128i)0LL), v18);\n        v19 = _mm_sub_epi32(\n                _mm_sub_epi32(\n                  v19,\n                  _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17)), (__m128i)0LL), v18)),\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17 + 32)), (__m128i)0LL), v18));\n        v20 = _mm_sub_epi32(\n                _mm_sub_epi32(v20, a9),\n                _mm_xor_si128(_mm_cmpeq_epi32(_mm_loadu_si128((const __m128i *)(v9 + 4 * v17 + 48)), (__m128i)0LL), v18));\n        v17 += 16LL;\n        v16 += 2LL;\n      }\n      while ( v16 );\n      if ( v15 )\n        goto LABEL_8;\n    }\nLABEL_9:\n    v22 = _mm_add_epi32(v19, v20);\n    v23 = _mm_add_epi32(_mm_shuffle_epi32(v22, 78), v22);\n    v12 = _mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v23, 229), v23));\n    if ( v13 == v11 )\n      goto LABEL_11;\n    goto LABEL_10;\n  }\n  v13 = 0LL;\n  do\nLABEL_10:\n    v12 -= (*(_DWORD *)(v9 + 4 * v13++) < 1u) - 1;\n  while ( v13 < v11 );\nLABEL_11:\n  if ( !v12 )\n  {\nLABEL_44:\n    v25 = 0LL;\n    goto LABEL_45;\n  }\n  v46 = a3;\n  LODWORD(v24) = 0;\n  v25 = sub_42AF80(v12, 0);\n  v26 = *(_DWORD *)(v10 + 28);\n  if ( v26 > 0 )\n  {\n    v27 = 0LL;\n    do\n    {\n      if ( *(_DWORD *)(v9 + 4 * v27) )\n      {\n        v38 = *(unsigned int *)(v10 + 24);\n        v24 = (signed int)v24;\n        *(_QWORD *)(*(_QWORD *)v25 + 8LL * (signed int)v24) = sub_438810(*(char **)(*(_QWORD *)v10 + 8 * v27));\n        v39 = *(unsigned int *)(v10 + 24);\n        *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v24) = sub_438810(*(char **)(*(_QWORD *)(v10 + 8) + 8 * v27));\n        sub_428470(*(__int64 **)(v25 + 312), *(const char **)(*(_QWORD *)(v10 + 8) + 8 * v27));\n        *(_DWORD *)(*(_QWORD *)(v25 + 16) + 4 * v24) = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 4 * v27);\n        v40 = *(_QWORD *)(v10 + 96);\n        if ( v40 )\n        {\n          v30 = *(char **)(v40 + 8 * v27);\n          if ( !*(_QWORD *)(v25 + 96) )\n          {\n            v28 = *(char **)(v40 + 8 * v27);\n            v29 = (_QWORD *)sub_4382F0(\"msa.c\", 310LL, 8LL * *(signed int *)(v25 + 320));\n            v30 = v28;\n            *(_QWORD *)(v25 + 96) = v29;\n            v31 = *(signed int *)(v25 + 320);\n            if ( v31 > 0 )\n            {\n              *v29 = 0LL;\n              if ( (_DWORD)v31 != 1 )\n              {\n                v32 = 1LL;\n                do\n                  *(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v32++) = 0LL;\n                while ( v32 < v31 );\n              }\n            }\n          }\n          *(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v24) = sub_438810(v30);\n        }\n        v41 = *(_QWORD *)(v10 + 104);\n        if ( v41 )\n        {\n          v35 = *(char **)(v41 + 8 * v27);\n          if ( !*(_QWORD *)(v25 + 104) )\n          {\n            v33 = *(char **)(v41 + 8 * v27);\n            v34 = (_QWORD *)sub_4382F0(\"msa.c\", 335LL, 8LL * *(signed int *)(v25 + 320));\n            v35 = v33;\n            *(_QWORD *)(v25 + 104) = v34;\n            v36 = *(signed int *)(v25 + 320);\n            if ( v36 > 0 )\n            {\n              *v34 = 0LL;\n              if ( (_DWORD)v36 != 1 )\n              {\n                v37 = 1LL;\n                do\n                  *(_QWORD *)(*(_QWORD *)(v25 + 104) + 8 * v37++) = 0LL;\n                while ( v37 < v36 );\n              }\n            }\n          }\n          *(_QWORD *)(*(_QWORD *)(v25 + 104) + 8 * v24) = sub_438810(v35);\n        }\n        v42 = *(_QWORD *)(v10 + 112);\n        if ( v42 )\n        {\n          v43 = *(char **)(v42 + 8 * v27);\n          if ( v43 )\n          {\n            if ( !*(_QWORD *)(v25 + 112) )\n            {\n              *(_QWORD *)(v25 + 112) = sub_4382F0(\"msa.c\", 1333LL, 8LL * *(signed int *)(v25 + 28));\n              v43 = *(char **)(*(_QWORD *)(v10 + 112) + 8 * v27);\n            }\n            *(_QWORD *)(*(_QWORD *)(v25 + 112) + 8 * v24) = sub_438810(v43);\n          }\n        }\n        v44 = *(_QWORD *)(v10 + 120);\n        if ( v44 )\n        {\n          v45 = *(char **)(v44 + 8 * v27);\n          if ( v45 )\n          {\n            if ( !*(_QWORD *)(v25 + 120) )\n            {\n              *(_QWORD *)(v25 + 120) = sub_4382F0(\"msa.c\", 1338LL, 8LL * *(signed int *)(v25 + 28));\n              v45 = *(char **)(*(_QWORD *)(v10 + 120) + 8 * v27);\n            }\n            *(_QWORD *)(*(_QWORD *)(v25 + 120) + 8 * v24) = sub_438810(v45);\n          }\n        }\n        LODWORD(v24) = v24 + 1;\n        v26 = *(_DWORD *)(v10 + 28);\n      }\n      ++v27;\n    }\n    while ( v27 < v26 );\n  }\n  *(_DWORD *)(v25 + 28) = v12;\n  *(_DWORD *)(v25 + 24) = *(_DWORD *)(v10 + 24);\n  *(_DWORD *)(v25 + 32) = *(_DWORD *)(v10 + 32);\n  *(_DWORD *)(v25 + 36) = *(_DWORD *)(v10 + 36);\n  *(_QWORD *)(v25 + 40) = sub_438810(*(char **)(v10 + 40));\n  *(_QWORD *)(v25 + 48) = sub_438810(*(char **)(v10 + 48));\n  *(_QWORD *)(v25 + 56) = sub_438810(*(char **)(v10 + 56));\n  *(_QWORD *)(v25 + 64) = sub_438810(*(char **)(v10 + 64));\n  *(_QWORD *)(v25 + 72) = sub_438810(*(char **)(v10 + 72));\n  *(_QWORD *)(v25 + 80) = sub_438810(*(char **)(v10 + 80));\n  *(_QWORD *)(v25 + 88) = sub_438810(*(char **)(v10 + 88));\n  *(_DWORD *)(v25 + 128) = *(_DWORD *)(v10 + 128);\n  *(_DWORD *)(v25 + 152) = *(_DWORD *)(v10 + 152);\n  *(_DWORD *)(v25 + 132) = *(_DWORD *)(v10 + 132);\n  *(_DWORD *)(v25 + 156) = *(_DWORD *)(v10 + 156);\n  *(_DWORD *)(v25 + 136) = *(_DWORD *)(v10 + 136);\n  *(_DWORD *)(v25 + 160) = *(_DWORD *)(v10 + 160);\n  *(_DWORD *)(v25 + 140) = *(_DWORD *)(v10 + 140);\n  *(_DWORD *)(v25 + 164) = *(_DWORD *)(v10 + 164);\n  *(_DWORD *)(v25 + 144) = *(_DWORD *)(v10 + 144);\n  *(_DWORD *)(v25 + 168) = *(_DWORD *)(v10 + 168);\n  *(_DWORD *)(v25 + 148) = *(_DWORD *)(v10 + 148);\n  *(_DWORD *)(v25 + 172) = *(_DWORD *)(v10 + 172);\n  free(*(void **)(v25 + 328));\n  sub_42CF70((__int64 *)v25);\n  a3 = v46;\nLABEL_45:\n  *a3 = v25;\n}\n", 
            "funcStartAddr": "0x42d380L", 
            "funcEndAddr": "0x42d8e0L", 
            "funcName": "sub_42D380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42D8E0(__int64 a1, int a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 96);\n  if ( !v2 || (result = *(_QWORD *)(v2 + 8LL * a2)) == 0 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x42d8e0L", 
            "funcEndAddr": "0x42d8f9L", 
            "funcName": "sub_42D8E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42D900(__int64 a1, int a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 104);\n  if ( !v2 || (result = *(_QWORD *)(v2 + 8LL * a2)) == 0 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x42d900L", 
            "funcEndAddr": "0x42d919L", 
            "funcName": "sub_42D900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42D9D0(__int64 a1)\n{\n  __int64 v1; // r13\n  char *v3; // rbx\n  const char *v4; // rsi\n  char *v5; // rbx\n  char *v6; // rax\n  char *v7; // rbx\n  int v8; // ebp\n  char *v9; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rcx\n  const char *v12; // rax\n  float v13; // xmm0_4\n  char *i; // rax\n  const char *v15; // rbp\n  char *v16; // rbx\n  const unsigned __int16 *v17; // rax\n  int v18; // eax\n  signed __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // rdx\n  char *j; // rcx\n  char v23; // dl\n  int v24; // eax\n  signed int v25; // eax\n  __int64 v26; // rdx\n  char *haystack; // [rsp+8h] [rbp-40h]\n  unsigned int v28; // [rsp+14h] [rbp-34h]\n\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  v3 = (char *)sub_42C980(a1);\n  if ( !v3 )\n    return 0LL;\n  v1 = sub_42AF80(10, 0);\n  if ( !strncmp(v3, \"!!AA_MULTIPLE_ALIGNMENT\", 0x17uLL) )\n  {\n    *(_DWORD *)(v1 + 36) = 3;\nLABEL_9:\n    v3 = (char *)sub_42C980(a1);\n    if ( v3 )\n      goto LABEL_10;\n    return 0LL;\n  }\n  if ( !strncmp(v3, \"!!NA_MULTIPLE_ALIGNMENT\", 0x17uLL) )\n  {\n    *(_DWORD *)(v1 + 36) = 2;\n    goto LABEL_9;\n  }\nLABEL_10:\n  while ( 1 )\n  {\n    v4 = \"..\";\n    if ( strstr(v3, \"..\") )\n    {\n      v4 = \"MSF:\";\n      if ( strstr(v3, \"MSF:\") )\n      {\n        v4 = v3;\n        if ( (unsigned int)sub_429210(\n                             (__int64)\"^.+MSF: +([0-9]+) +Type: +([PNX]).+Check: +([0-9]+) +\\\\.\\\\.\",\n                             (char)v3,\n                             3) )\n          break;\n      }\n    }\n    if ( !(unsigned int)sub_4388B0(v3, v4) )\n      sub_42B870(v1, v3);\n    v3 = (char *)sub_42C980(a1);\n    if ( !v3 )\n      goto LABEL_16;\n  }\n  v24 = *(char *)qword_463F98;\n  if ( v24 == 78 )\n  {\n    v25 = 2;\n    if ( *(_DWORD *)(v1 + 36) )\n      goto LABEL_16;\n  }\n  else if ( v24 == 88 || v24 != 80 )\n  {\n    v25 = 0;\n    if ( *(_DWORD *)(v1 + 36) )\n      goto LABEL_16;\n  }\n  else\n  {\n    v25 = 3;\n    if ( *(_DWORD *)(v1 + 36) )\n      goto LABEL_16;\n  }\n  *(_DWORD *)(v1 + 36) = v25;\nLABEL_16:\n  v5 = (char *)sub_42C980(a1);\n  if ( !v5 )\n    goto LABEL_28;\n  while ( 2 )\n  {\n    switch ( *v5 )\n    {\n      case 9:\n      case 32:\n        ++v5;\n        continue;\n      case 10:\n        goto LABEL_27;\n      case 33:\n        sub_42B870(v1, v5);\n        goto LABEL_27;\n      default:\n        v6 = strstr(v5, \"Name:\");\n        haystack = v6;\n        if ( v6 )\n        {\n          haystack = v6 + 5;\n          v7 = (char *)sub_4387A0(&haystack, \" \\t\", &v28);\n          v8 = sub_428470(*(__int64 **)(v1 + 312), v7);\n          if ( v8 >= *(_DWORD *)(v1 + 320) )\n            sub_42B140((__int64 *)v1);\n          *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8LL * v8) = sub_438810(v7);\n          ++*(_DWORD *)(v1 + 28);\n          v9 = strstr(haystack, \"Weight:\");\n          haystack = v9;\n          if ( !v9 )\n          {\n            v10 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8LL * v8);\n            v11 = *(_QWORD *)(a1 + 8);\n            sub_4325B0(\"No Weight: on line %d for %s in name section of MSF file %s\\n\", *(_DWORD *)(a1 + 16));\n          }\n          haystack = v9 + 7;\n          v12 = (const char *)sub_4387A0(&haystack, \" \\t\", &v28);\n          v13 = strtod(v12, 0LL);\n          *(float *)(*(_QWORD *)(v1 + 16) + 4LL * v8) = v13;\n          *(_BYTE *)(v1 + 32) |= 1u;\nLABEL_27:\n          v5 = (char *)sub_42C980(a1);\n          if ( !v5 )\n            goto LABEL_28;\n          continue;\n        }\n        if ( strncmp(v5, \"//\", 2uLL) )\n        {\n          v26 = *(_QWORD *)(a1 + 8);\n          sub_4325B0(\"Invalid line (probably %d) in name section of MSF file %s:\\n%s\\n\", *(_DWORD *)(a1 + 16));\n        }\nLABEL_28:\n        for ( i = (char *)sub_42C980(a1); i; i = (char *)sub_42C980(a1) )\n        {\n          haystack = i;\n          v15 = (const char *)sub_4387A0(&haystack, \" \\t\", 0LL);\n          if ( v15 )\n          {\n            v16 = (char *)sub_4387A0(&haystack, \"\\n\", &v28);\n            if ( v16 )\n            {\n              v17 = *__ctype_b_loc();\n              if ( !(v17[*v15] & 0x800) || !(v17[*v16] & 0x800) )\n              {\n                v18 = sub_4286C0(*(_QWORD *)(v1 + 312), v15);\n                if ( v18 >= 0 )\n                  *(_DWORD *)(*(_QWORD *)(v1 + 328) + 4LL * v18) = sub_438690(\n                                                                     *(_QWORD *)v1 + 8LL * v18,\n                                                                     *(unsigned int *)(*(_QWORD *)(v1 + 328) + 4LL * v18),\n                                                                     v16,\n                                                                     v28);\n              }\n            }\n          }\n        }\n        if ( *(_DWORD *)(v1 + 28) > 0 )\n        {\n          v19 = 0LL;\n          do\n          {\n            v20 = *(char **)(*(_QWORD *)v1 + 8 * v19);\n            if ( !v20 )\n            {\n              v21 = *(_QWORD *)(a1 + 8);\n              sub_4325B0(\"Didn't find a sequence for %s in MSF file %s\\n\", *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v19));\n            }\n            haystack = *(char **)(*(_QWORD *)v1 + 8 * v19);\n            for ( j = v20; ; ++j )\n            {\n              while ( 1 )\n              {\n                v23 = *j;\n                if ( *j != 9 && v23 != 32 )\n                  break;\n                --*(_DWORD *)(*(_QWORD *)(v1 + 328) + 4 * v19);\n                ++j;\n              }\n              if ( !v23 )\n                break;\n              *v20 = v23;\n              v20 = haystack++ + 1;\n            }\n            *v20 = 0;\n            ++v19;\n          }\n          while ( v19 < *(signed int *)(v1 + 28) );\n        }\n        sub_42C2C0(v1);\n        return v1;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x42d9d0L", 
            "funcEndAddr": "0x42de57L", 
            "funcName": "sub_42D9D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42DE60(FILE *stream, __int64 a2)\n{\n  __int64 v2; // rbx\n  FILE *v3; // r15\n  __int64 v4; // r14\n  __int64 v5; // r12\n  FILE *v6; // r13\n  __int64 v7; // rbp\n  __int64 v8; // rbx\n  __int64 v9; // r15\n  __int64 v10; // r14\n  char *v11; // rbp\n  char v12; // bl\n  const unsigned __int16 **v13; // rax\n  char *v14; // rbp\n  signed __int64 v15; // r8\n  char *v16; // rdi\n  char *i; // rdx\n  char v18; // bl\n  unsigned __int8 v19; // cl\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rcx\n  __int64 v22; // rdx\n  unsigned __int8 v23; // bl\n  __int64 v24; // r14\n  const char **v25; // rbx\n  int v26; // ebp\n  int v27; // eax\n  int v28; // ecx\n  const char *v29; // rdi\n  __int64 v30; // rbp\n  signed __int64 v31; // rbx\n  struct tm *v32; // rax\n  const char *v33; // rbp\n  unsigned int v34; // er13\n  unsigned int v35; // er12\n  signed __int64 v36; // rbp\n  __int64 v37; // ST28_8\n  unsigned int v38; // er12\n  signed __int64 v39; // rbp\n  _QWORD *v40; // r14\n  unsigned int v41; // er13\n  signed int v42; // edx\n  signed __int64 v43; // r8\n  signed __int64 v44; // rbp\n  FILE *v45; // rbx\n  int v46; // er15\n  signed __int64 v47; // r14\n  __int64 v48; // rsi\n  __int64 v49; // rsi\n  __int64 result; // rax\n  __int64 v51; // [rsp+0h] [rbp-108h]\n  __int64 v52; // [rsp+0h] [rbp-108h]\n  __int64 v53; // [rsp+8h] [rbp-100h]\n  unsigned int v54; // [rsp+14h] [rbp-F4h]\n  _QWORD *ptr; // [rsp+18h] [rbp-F0h]\n  _QWORD *v56; // [rsp+20h] [rbp-E8h]\n  signed int v57; // [rsp+28h] [rbp-E0h]\n  __int64 v58; // [rsp+30h] [rbp-D8h]\n  signed __int64 v59; // [rsp+38h] [rbp-D0h]\n  signed __int64 v60; // [rsp+40h] [rbp-C8h]\n  time_t timer; // [rsp+48h] [rbp-C0h]\n  char dest[50]; // [rsp+50h] [rbp-B8h]\n  char v63; // [rsp+82h] [rbp-86h]\n  char s; // [rsp+90h] [rbp-78h]\n\n  v2 = a2;\n  v3 = stream;\n  v4 = sub_4382F0(\"msf.c\", 273LL, 8LL * *(signed int *)(a2 + 28));\n  LOBYTE(a2) = 18;\n  v56 = (_QWORD *)sub_4382F0(\"msf.c\", 274LL, 8LL * *(signed int *)(v2 + 28));\n  LODWORD(v5) = *(_DWORD *)(v2 + 28);\n  ptr = (_QWORD *)v4;\n  if ( (signed int)v5 <= 0 )\n  {\n    v26 = 0;\n    goto LABEL_48;\n  }\n  v6 = stream;\n  v7 = v2;\n  v8 = 0LL;\n  do\n  {\n    a2 = *(unsigned int *)(v7 + 24);\n    *(_QWORD *)(v4 + 8 * v8) = sub_438810(*(char **)(*(_QWORD *)v7 + 8 * v8));\n    LOBYTE(a2) = -1;\n    v56[v8] = sub_438810(*(char **)(*(_QWORD *)(v7 + 8) + 8 * v8));\n    ++v8;\n    v5 = *(signed int *)(v7 + 28);\n  }\n  while ( v8 < v5 );\n  v9 = v7;\n  if ( (signed int)v5 <= 0 )\n  {\n    v26 = 0;\n    v2 = v9;\nLABEL_47:\n    v3 = v6;\n    goto LABEL_48;\n  }\n  v10 = 0LL;\n  do\n  {\n    v11 = (char *)v56[v10];\n    v12 = *v11;\n    if ( *v11 )\n    {\n      v13 = __ctype_b_loc();\n      v14 = v11 + 1;\n      do\n      {\n        if ( !((*v13)[v12] & 8) && v12 != 45 && v12 != 95 )\n          *(v14 - 1) = 95;\n        v12 = *v14++;\n      }\n      while ( v12 );\n    }\n    ++v10;\n    v2 = v9;\n    v5 = *(signed int *)(v9 + 28);\n  }\n  while ( v10 < v5 );\n  v4 = (__int64)ptr;\n  if ( (signed int)v5 <= 0 )\n  {\nLABEL_46:\n    v26 = 0;\n    goto LABEL_47;\n  }\n  a2 = 0LL;\n  v15 = -9223372036854751231LL;\n  do\n  {\n    v16 = (char *)ptr[a2];\n    for ( i = v16 + 1; ; ++i )\n    {\n      v18 = *v16;\n      v19 = *v16 - 32;\n      if ( (v19 > 0x3Fu || !_bittest64(&v15, v19)) && v18 != 126 )\n        break;\n      *v16++ = 126;\n    }\n    while ( v18 > 94 )\n    {\n      if ( v18 == 126 || v18 == 95 )\n        goto LABEL_30;\nLABEL_22:\n      v18 = *i++;\n    }\n    if ( (unsigned __int8)(v18 - 45) < 2u || v18 == 32 )\n    {\nLABEL_30:\n      *(i - 1) = 46;\n      goto LABEL_22;\n    }\n    if ( v18 )\n      goto LABEL_22;\n    v20 = *(signed int *)(v9 + 24);\n    if ( v20 >= 2 )\n    {\n      v21 = v20 + 1;\n      do\n      {\n        v22 = ptr[a2];\n        v23 = *(_BYTE *)(v22 + v21 - 2) - 32;\n        if ( (v23 > 0x3Fu || !_bittest64(&v15, v23)) && *(_BYTE *)(v22 + v21 - 2) != 126 )\n          break;\n        *(_BYTE *)(v22 + v21-- - 2) = 126;\n      }\n      while ( v21 > 2 );\n    }\n    ++a2;\n    v2 = v9;\n    v5 = *(signed int *)(v9 + 28);\n  }\n  while ( a2 < v5 );\n  if ( (signed int)v5 <= 0 )\n    goto LABEL_46;\n  v24 = (unsigned int)v5;\n  v25 = *(const char ***)(v9 + 8);\n  v26 = 0;\n  do\n  {\n    v27 = strlen(*v25);\n    if ( v26 < v27 )\n      v26 = v27;\n    ++v25;\n    --v24;\n  }\n  while ( v24 );\n  v2 = v9;\n  v3 = v6;\n  v4 = (__int64)ptr;\nLABEL_48:\n  v28 = *(_DWORD *)(v2 + 36);\n  if ( !v28 )\n  {\n    LOBYTE(a2) = v5;\n    v28 = sub_435930(*(_QWORD *)v2, (unsigned int)v5);\n    *(_DWORD *)(v2 + 36) = v28;\n  }\n  v54 = v26;\n  switch ( v28 )\n  {\n    case 0:\n      sub_4325B0(\"WriteMSF(): couldn't guess whether that alignment is RNA or protein.\\n\", a2);\n      return result;\n    case 1:\n    case 2:\n      v29 = \"!!NA_MULTIPLE_ALIGNMENT 1.0\\n\";\n      break;\n    case 3:\n      v29 = \"!!AA_MULTIPLE_ALIGNMENT 1.0\\n\";\n      break;\n    default:\n      sub_4325B0(\"Invalid sequence type %d in WriteMSF()\\n\", v28);\n      return result;\n  }\n  fwrite(v29, 0x1CuLL, 1uLL, v3);\n  if ( *(_DWORD *)(v2 + 184) > 0 )\n  {\n    v30 = v2;\n    v31 = 0LL;\n    do\n      fprintf(v3, \"%s\\n\", *(_QWORD *)(*(_QWORD *)(v30 + 176) + 8 * v31++));\n    while ( v31 < *(signed int *)(v30 + 184) );\n    fputc(10, v3);\n    v2 = v30;\n  }\n  timer = time(0LL);\n  v32 = localtime(&timer);\n  if ( !strftime(&s, 0x40uLL, \"%B %d, %Y %H:%M\", v32) )\n    sub_4325B0(\"What time is it on earth? strftime() failed in WriteMSF().\\n\", 64);\n  v33 = \"squid.msf\";\n  if ( *(_QWORD *)(v2 + 40) )\n    v33 = *(const char **)(v2 + 40);\n  v34 = 2 * (*(_DWORD *)(v2 + 36) != 2) + 78;\n  v35 = *(_DWORD *)(v2 + 24);\n  LODWORD(v51) = sub_435810(v4, *(unsigned int *)(v2 + 28));\n  fprintf(v3, \" %s  MSF: %d  Type: %c  %s  Check: %d  ..\\n\", v33, v35, v34, &s, v51);\n  fputc(10, v3);\n  v58 = v2;\n  if ( *(_DWORD *)(v2 + 28) > 0 )\n  {\n    v36 = 0LL;\n    do\n    {\n      v37 = v56[v36];\n      v38 = *(_DWORD *)(v2 + 24);\n      LODWORD(v52) = sub_435770(ptr[v36], *(unsigned int *)(v2 + 24));\n      fprintf(\n        v3,\n        \" Name: %-*.*s  Len:  %5d  Check: %4d  Weight: %.2f\\n\",\n        v54,\n        v54,\n        v37,\n        v38,\n        *(float *)(*(_QWORD *)(v2 + 16) + 4 * v36++),\n        v52);\n    }\n    while ( v36 < *(signed int *)(v2 + 28) );\n  }\n  fputc(10, v3);\n  fwrite(\"//\\n\", 3uLL, 1uLL, v3);\n  if ( *(_DWORD *)(v2 + 24) <= 0 )\n  {\n    v48 = *(unsigned int *)(v2 + 28);\n    v40 = ptr;\n  }\n  else\n  {\n    v39 = 0LL;\n    v40 = ptr;\n    v41 = v54;\n    do\n    {\n      fputc(10, v3);\n      v42 = *(_DWORD *)(v2 + 24) - v39;\n      if ( *(_DWORD *)(v2 + 24) >= (signed int)v39 + 50 )\n        v42 = 50;\n      v43 = v39 | 1;\n      v59 = v39 + 50;\n      v57 = v42;\n      if ( v42 < 11 )\n      {\n        fprintf(v3, \"%*s  %-6d\\n\", v41, &unk_4409CD, v43);\n      }\n      else\n      {\n        LODWORD(v53) = v39 + v42;\n        fprintf(\n          v3,\n          \"%*s  %-6d%*s%6d\\n\",\n          v41,\n          &unk_4409CD,\n          v43,\n          v42\n        + ((unsigned __int64)(1717986919LL * (v42 - 1)) >> 63)\n        + (unsigned int)(1717986919LL * (v42 - 1) >> 34)\n        - 12,\n          &unk_4409CD,\n          v53);\n      }\n      if ( *(_DWORD *)(v2 + 28) > 0 )\n      {\n        v60 = v39;\n        v44 = 0LL;\n        do\n        {\n          v45 = v3;\n          fprintf(v3, \"%-*s \", v54, v56[v44]);\n          strncpy(dest, (const char *)(v60 + v40[v44]), 0x32uLL);\n          v63 = 0;\n          if ( v57 > 0 )\n          {\n            v46 = 0;\n            v47 = 0LL;\n            do\n            {\n              if ( !(v46 + 10 * ((unsigned int)v47 / 0xA)) )\n                fputc(32, v45);\n              fputc(dest[v47++], v45);\n              --v46;\n            }\n            while ( v47 < v57 );\n          }\n          v3 = v45;\n          fputc(10, v45);\n          ++v44;\n          v2 = v58;\n          v40 = ptr;\n        }\n        while ( v44 < *(signed int *)(v58 + 28) );\n        v41 = v54;\n      }\n      v39 = v59;\n    }\n    while ( *(_DWORD *)(v2 + 24) > (signed int)v59 );\n  }\n  sub_438390(v40);\n  v49 = *(unsigned int *)(v2 + 28);\n  return sub_438390(v56);\n}\n", 
            "funcStartAddr": "0x42de60L", 
            "funcEndAddr": "0x42e4cfL", 
            "funcName": "sub_42DE60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E4D0(__int64 a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // r15\n  const char *v3; // rbx\n  __int64 v4; // rbp\n  const char *v5; // rbp\n  const unsigned __int16 **v6; // rbx\n  int v7; // er14\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  int v10; // eax\n  __int64 v12; // [rsp+0h] [rbp-58h]\n  int v13; // [rsp+Ch] [rbp-4Ch]\n  unsigned int v14; // [rsp+10h] [rbp-48h]\n  char dest; // [rsp+15h] [rbp-43h]\n  char v16; // [rsp+1Fh] [rbp-39h]\n  __int64 v17; // [rsp+20h] [rbp-38h]\n\n  v1 = 0LL;\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  v12 = sub_42C980(a1);\n  if ( v12 )\n  {\n    while ( 1 )\n    {\n      v3 = (const char *)sub_4387A0(&v12, \" \\t\\n\", 0LL);\n      if ( v3 )\n        break;\n      v12 = sub_42C980(a1);\n      if ( !v12 )\n      {\n        v1 = 0LL;\n        goto LABEL_13;\n      }\n    }\n    v4 = sub_4387A0(&v12, \" \\t\\n\", 0LL);\n    if ( !v4 )\n      sub_4325B0(\"Failed to parse nseq/alen from first line of PHYLIP file %s\\n\", *(_QWORD *)(a1 + 8));\n    if ( !(unsigned int)sub_43C400(v3, \" \\t\\n\") || !(unsigned int)sub_43C400(v4, \" \\t\\n\") )\n      sub_4325B0(\"nseq and/or alen not an integer in first line of PHYLIP file %s\\n\", *(_QWORD *)(a1 + 8));\n    v1 = strtol(v3, 0LL, 10);\n  }\nLABEL_13:\n  v2 = sub_42AF80(v1, 0);\n  v5 = (const char *)sub_42C980(a1);\n  v12 = (__int64)v5;\n  if ( v5 )\n  {\n    v6 = __ctype_b_loc();\n    v13 = 0;\n    v7 = 0;\n    do\n    {\n      if ( !((*v6)[*v5] & 0x2000) )\n      {\n        if ( !v13 )\n        {\n          strncpy(&dest, v5, 0xAuLL);\n          v16 = 0;\n          sub_428470(*(__int64 **)(v2 + 312), &dest);\n          *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8LL * v7) = sub_438810(&dest);\n          v12 += 10LL;\n        }\n        v17 = v1;\n        v8 = sub_4387A0(&v12, \" \\t\\n\", &v14);\n        if ( !v8 )\n        {\n          v9 = *(_QWORD *)(a1 + 8);\n          sub_4325B0(\"Failed to parse sequence at line %d of PHYLIP file %s\\n\", *(_DWORD *)(a1 + 16));\n        }\n        *(_DWORD *)(*(_QWORD *)(v2 + 328) + 4LL * v7) = sub_438690(\n                                                          *(_QWORD *)v2 + 8LL * v7,\n                                                          *(unsigned int *)(*(_QWORD *)(v2 + 328) + 4LL * v7),\n                                                          v8,\n                                                          v14);\n        ++v7;\n        v1 = v17;\n        v10 = v7 == v17;\n        if ( v7 == (_DWORD)v17 )\n          v7 = 0;\n        v13 += v10;\n      }\n      v5 = (const char *)sub_42C980(a1);\n      v12 = (__int64)v5;\n    }\n    while ( v5 );\n  }\n  *(_DWORD *)(v2 + 28) = v1;\n  sub_42C2C0(v2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x42e4d0L", 
            "funcEndAddr": "0x42e715L", 
            "funcName": "sub_42E4D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_42E720(FILE *stream, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // rbx\n  __int64 v6; // [rsp+0h] [rbp-68h]\n  char v7; // [rsp+32h] [rbp-36h]\n\n  LODWORD(v2) = fprintf(stream, \" %d  %d\\n\", *(unsigned int *)(a2 + 28), *(unsigned int *)(a2 + 24));\n  if ( *(_DWORD *)(a2 + 24) > 0 )\n  {\n    v3 = 0LL;\n    do\n    {\n      if ( v3 )\n        LODWORD(v2) = fputc(10, stream);\n      if ( *(_DWORD *)(a2 + 28) > 0 )\n      {\n        v4 = 0LL;\n        do\n        {\n          strncpy((char *)&v6, (const char *)(v3 + *(_QWORD *)(*(_QWORD *)a2 + 8 * v4)), 0x32uLL);\n          v7 = 0;\n          if ( v3 )\n            fprintf(stream, \"%s\\n\", &v6);\n          else\n            fprintf(stream, \"%-10.10s%s\\n\", *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4), &v6);\n          ++v4;\n          v2 = *(signed int *)(a2 + 28);\n        }\n        while ( v4 < v2 );\n      }\n      v3 += 50LL;\n    }\n    while ( *(_DWORD *)(a2 + 24) > (signed int)v3 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42e720L", 
            "funcEndAddr": "0x42e806L", 
            "funcName": "sub_42E720"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_42E810(char *a1, __int64 a2)\n{\n  char *result; // rax\n  char v3; // al\n  signed int v4; // er14\n  char *v5; // rbx\n  char v6; // al\n  char v7; // bp\n  signed __int64 v8; // rax\n\n  result = 0LL;\n  if ( a1 && a2 )\n  {\n    sub_431C20(a1);\n    v3 = *a1;\n    if ( *a1 )\n    {\n      v4 = 25040079;\n      v5 = a1;\n      do\n      {\n        v6 = sub_437040((unsigned int)v3, a2);\n        v7 = v6;\n        v8 = v6 - 65LL;\n        if ( (unsigned int)v8 <= 0x18 && _bittest(&v4, v8) )\n          v7 = byte_446780[v8];\n        if ( (*__ctype_b_loc())[*v5] & 0x200 )\n          v7 = sub_436FF0((unsigned int)v7);\n        *v5 = v7;\n        v3 = (v5++)[1];\n      }\n      while ( v3 );\n    }\n    result = a1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x42e810L", 
            "funcEndAddr": "0x42e8a1L", 
            "funcName": "sub_42E810"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_42ED20@<rax>(__int64 a1@<rdi>, char a2@<sil>, __m128i a3@<xmm8>)\n{\n  __int64 v3; // rbx\n  FILE *v4; // r14\n  signed int v5; // er13\n  char *v6; // rax\n  const char *v7; // rbx\n  void *v8; // rbx\n  int v9; // er12\n  __int64 v10; // rbp\n  unsigned int v11; // ecx\n  __int64 v12; // r13\n  const char *v13; // rsi\n  void *v14; // rax\n  __int64 v15; // r12\n  bool v16; // zf\n  signed __int64 v17; // rax\n  __int64 v18; // rax\n  _DWORD *v19; // rdi\n  char *v20; // rax\n  signed __int64 v21; // rax\n  char *v22; // rax\n  unsigned int v23; // ecx\n  signed __int64 v24; // rax\n  signed int v25; // eax\n  char *v26; // rax\n  int v27; // eax\n  char *v28; // rax\n  int v29; // eax\n  unsigned __int64 v30; // rax\n  __m128 *v31; // rdx\n  unsigned __int64 v32; // rbp\n  __m128i v33; // xmm1\n  __m128i v34; // xmm8\n  __m128i v35; // xmm2\n  __m128i v36; // xmm2\n  __m128i v37; // xmm0\n  _DWORD *v38; // rcx\n  __int64 v39; // rdx\n  __int64 v40; // r15\n  __int64 v41; // r12\n  __int64 v42; // rbx\n  __int64 v43; // rbp\n  _QWORD *v44; // r13\n  int v45; // eax\n  __int64 v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // rax\n  unsigned int v49; // ebx\n  __int64 v50; // r13\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // r12\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rax\n  float v58; // xmm0_4\n  char *v59; // rax\n  float v60; // xmm0_4\n  char *v61; // rax\n  float v62; // xmm0_4\n  char *v63; // rax\n  float v64; // xmm0_4\n  char *v65; // rax\n  float v66; // xmm0_4\n  char *v67; // rax\n  float v68; // xmm0_4\n  char *v69; // r12\n  signed __int64 v70; // r15\n  signed __int64 v71; // rax\n  char *v72; // rax\n  const char *v73; // r12\n  float v74; // xmm0_4\n  char *v75; // rax\n  char *v76; // rax\n  int v77; // er13\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  char *v81; // rax\n  __int64 v82; // rax\n  __int64 v83; // r13\n  char *v84; // rbp\n  int v85; // eax\n  int v86; // er9\n  int v87; // er8\n  char *v88; // rsi\n  signed __int64 v89; // r10\n  int v90; // ecx\n  int v91; // edi\n  int v92; // ecx\n  int v93; // eax\n  unsigned __int8 v94; // cl\n  char v95; // dl\n  bool v96; // sf\n  unsigned __int8 v97; // of\n  __int64 v98; // rbp\n  int v99; // eax\n  int v100; // er9\n  int v101; // er8\n  char *v102; // rsi\n  int v103; // ecx\n  int v104; // edi\n  int v105; // ecx\n  int v106; // eax\n  char *v107; // rbp\n  signed __int64 v108; // r10\n  unsigned __int8 v109; // cl\n  char v110; // dl\n  __int64 v111; // rbp\n  int v112; // eax\n  int v113; // er9\n  int v114; // er8\n  signed __int64 v115; // r10\n  int v116; // ecx\n  int v117; // edi\n  int v118; // ecx\n  int v119; // eax\n  char *v120; // rbp\n  unsigned __int8 v121; // cl\n  char v122; // dl\n  char *v123; // rbp\n  int v124; // eax\n  int v125; // er9\n  int v126; // er8\n  signed __int64 v127; // r10\n  int v128; // ecx\n  int v129; // edi\n  int v130; // ecx\n  int v131; // eax\n  unsigned __int8 v132; // cl\n  char v133; // dl\n  char *v134; // rdi\n  char *v135; // rbp\n  int v136; // eax\n  int v137; // er9\n  int v138; // er8\n  signed __int64 v139; // r10\n  int v140; // ecx\n  int v141; // edi\n  int v142; // ecx\n  int v143; // eax\n  unsigned __int8 v144; // cl\n  char v145; // dl\n  int *v146; // rcx\n  int *v147; // rdx\n  int v148; // ebp\n  int v149; // er13\n  unsigned int v150; // er15\n  _QWORD *v151; // r12\n  char v152; // r8\n  signed __int64 v153; // r10\n  __int64 v154; // r9\n  __int64 v155; // rdi\n  __int64 v156; // rbp\n  signed __int64 v157; // rbx\n  __int64 v158; // rsi\n  __int64 v159; // rsi\n  __int64 v160; // rdx\n  signed __int64 v161; // r14\n  int v162; // eax\n  __int64 v163; // rdx\n  unsigned __int8 v164; // al\n  unsigned __int8 v165; // cl\n  char v166; // al\n  __int64 v167; // rdx\n  unsigned __int8 v168; // cl\n  unsigned __int8 v169; // cl\n  char v170; // al\n  __int64 v171; // r14\n  int v172; // edx\n  __int64 v173; // rcx\n  __int64 v174; // rdx\n  __int64 v175; // rsi\n  _QWORD *v176; // rsi\n  __int64 v177; // rdx\n  __int64 v178; // rcx\n  char *v179; // rsi\n  int v180; // edx\n  char v181; // al\n  __int64 v182; // rax\n  signed __int64 v183; // rsi\n  __int64 v184; // rsi\n  char v186; // [rsp+0h] [rbp-2108h]\n  int *v187; // [rsp+8h] [rbp-2100h]\n  void *ptr; // [rsp+10h] [rbp-20F8h]\n  int *v189; // [rsp+18h] [rbp-20F0h]\n  unsigned int v190; // [rsp+24h] [rbp-20E4h]\n  __int64 v191; // [rsp+28h] [rbp-20E0h]\n  __int64 v192; // [rsp+30h] [rbp-20D8h]\n  __int64 v193; // [rsp+38h] [rbp-20D0h]\n  int v194; // [rsp+40h] [rbp-20C8h]\n  int v195; // [rsp+44h] [rbp-20C4h]\n  unsigned int v196; // [rsp+48h] [rbp-20C0h]\n  __int64 v197; // [rsp+50h] [rbp-20B8h]\n  __int64 v198; // [rsp+58h] [rbp-20B0h]\n  __int64 v199; // [rsp+60h] [rbp-20A8h]\n  __int64 v200; // [rsp+68h] [rbp-20A0h]\n  __int64 v201; // [rsp+70h] [rbp-2098h]\n  __int64 v202; // [rsp+78h] [rbp-2090h]\n  __int64 v203; // [rsp+80h] [rbp-2088h]\n  __int64 v204; // [rsp+88h] [rbp-2080h]\n  float v205; // [rsp+90h] [rbp-2078h]\n  float v206; // [rsp+94h] [rbp-2074h]\n  float v207; // [rsp+98h] [rbp-2070h]\n  float v208; // [rsp+9Ch] [rbp-206Ch]\n  float v209; // [rsp+A0h] [rbp-2068h]\n  float v210; // [rsp+A4h] [rbp-2064h]\n  void *v211; // [rsp+A8h] [rbp-2060h]\n  __int64 v212; // [rsp+B0h] [rbp-2058h]\n  __int64 v213; // [rsp+B8h] [rbp-2050h]\n  __int64 v214; // [rsp+C0h] [rbp-2048h]\n  __int64 v215; // [rsp+C8h] [rbp-2040h]\n  char s; // [rsp+D0h] [rbp-2038h]\n  char dest; // [rsp+10D0h] [rbp-1038h]\n\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  if ( *(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 52) )\n    sub_4325B0(\"Can't read a SELEX format alignment from a pipe, stdin, or gzip'ed file\", a2);\n  v215 = a1;\n  v4 = *(FILE **)a1;\n  sub_424770((__int64)&v194);\n  if ( !fgets(&s, 4096, v4) )\n  {\nLABEL_17:\n    dword_464008 = 2;\n    return 0LL;\n  }\n  v5 = 0;\n  LODWORD(v189) = 0;\n  while ( 1 )\n  {\n    strcpy(&dest, &s);\n    if ( s == 35 )\n    {\n      if ( !strncmp(&s, \"#=CS\", 4uLL) )\n      {\n        LODWORD(v189) = 1;\n      }\n      else if ( !strncmp(&s, \"#=RF\", 4uLL) )\n      {\n        v5 = 1;\n      }\n    }\n    v6 = strtok(&dest, \" \\t\\n\");\n    v7 = v6;\n    if ( v6 )\n    {\n      if ( !strchr(asc_450048, *v6) )\n        break;\n    }\n    if ( !fgets(&s, 4096, v4) )\n      goto LABEL_17;\n  }\n  if ( feof(v4) )\n  {\n    v193 = 0LL;\n    LOBYTE(v191) = 1;\n    v212 = 0LL;\n    v8 = 0LL;\n    v9 = 0;\n    v10 = 0LL;\n    goto LABEL_78;\n  }\n  LODWORD(v187) = v5;\n  v11 = 1;\n  v12 = 0LL;\n  v193 = 0LL;\n  ptr = 0LL;\n  v9 = 0;\n  do\n  {\n    v214 = v11;\n    if ( v12 )\n    {\n      LOBYTE(v13) = -103;\n      v14 = (void *)sub_438340(\"selex.c\", 153LL, ptr, 8 * v12 + 8);\n    }\n    else\n    {\n      LOBYTE(v13) = -105;\n      v14 = (void *)sub_4382F0(\"selex.c\", 151LL, 8LL);\n    }\n    ptr = v14;\n    *((_QWORD *)v14 + v12) = -4294963199LL;\n    if ( v7 )\n    {\n      v190 = v9;\n      v15 = 0LL;\n      if ( v12 )\n      {\nLABEL_26:\n        v16 = strcmp((const char *)(v200 + 360 * v15 + 4), v7) == 0;\n        v17 = v193;\n        if ( !v16 )\n          v17 = 1LL;\n        v193 = v17;\n      }\n      else\n      {\nLABEL_29:\n        if ( v15 )\n          v18 = sub_438340(\"selex.c\", 166LL, v200, 360 * v15 + 360);\n        else\n          v18 = sub_4382F0(\"selex.c\", 164LL, 360LL);\n        v200 = v18;\n        v19 = (_DWORD *)(v18 + 360 * v15);\n        *v19 = 0;\n        sub_432BF0(v19, v7, 1LL);\n      }\n      v20 = strtok(0LL, \" \\t\\n\");\n      if ( v20 )\n      {\n        v21 = v20 - &dest;\n        if ( v21 < *((signed int *)ptr + 2 * v12) )\n          *((_DWORD *)ptr + 2 * v12) = v21;\n        v22 = &v186 + strlen(&s) + 208;\n        do\n          v23 = *(v22-- - 1);\n        while ( v23 <= 0x3FuLL && (1LL << v23) & 0x100000601LL );\n        v24 = v22 - &s;\n        if ( v24 > *((signed int *)ptr + 2 * v12 + 1) )\n          *((_DWORD *)ptr + 2 * v12 + 1) = v24;\n      }\n      v192 = v15 + 1;\n      while ( 1 )\n      {\n        LOBYTE(v13) = 0;\n        if ( !fgets(&s, 4096, v4) )\n          break;\n        strcpy(&dest, &s);\n        if ( !strncmp(&s, \"#=SS\", 4uLL) )\n        {\n          *(_DWORD *)(v200 + 360 * v15) |= 0x200u;\n        }\n        else if ( !strncmp(&s, \"#=SA\", 4uLL) )\n        {\n          *(_DWORD *)(v200 + 360 * v15) |= 0x400u;\n        }\n        else if ( !strncmp(&s, \"#=CS\", 4uLL) )\n        {\n          LODWORD(v189) = 1;\n        }\n        else\n        {\n          v16 = strncmp(&s, \"#=RF\", 4uLL) == 0;\n          v25 = (signed int)v187;\n          if ( v16 )\n            v25 = 1;\n          LODWORD(v187) = v25;\n        }\n        v13 = \" \\t\\n\";\n        v26 = strtok(&dest, \" \\t\\n\");\n        v7 = v26;\n        if ( !v26 )\n          break;\n        if ( !strchr(asc_450048, *v26) )\n        {\n          v15 = v192;\n          if ( v12 )\n            goto LABEL_26;\n          goto LABEL_29;\n        }\n      }\n      v9 = v190;\n      v27 = v192;\n      if ( !v12 )\n      {\nLABEL_60:\n        v9 = v27;\n        goto LABEL_61;\n      }\n    }\n    else\n    {\n      v27 = 0;\n      if ( !v12 )\n        goto LABEL_60;\n    }\n    if ( v27 != v9 )\n      sub_4325B0(\"Parse error in ReadSELEX()\", (char)v13);\nLABEL_61:\n    if ( fgets(&s, 4096, v4) )\n    {\n      while ( 1 )\n      {\n        strcpy(&dest, &s);\n        v28 = strtok(&dest, \" \\t\\n\");\n        v7 = v28;\n        if ( v28 )\n        {\n          if ( !strchr(asc_450048, *v28) )\n            break;\n        }\n        if ( !fgets(&s, 4096, v4) )\n          goto LABEL_65;\n      }\n    }\n    else\n    {\nLABEL_65:\n      v7 = 0LL;\n    }\n    ++v12;\n    v29 = feof(v4);\n    v11 = v214 + 1;\n  }\n  while ( !v29 );\n  if ( (_DWORD)v12 )\n  {\n    LOBYTE(v191) = (_DWORD)v12 == 0;\n    if ( (unsigned int)v12 < 8uLL )\n    {\n      v30 = 0LL;\n      LODWORD(v10) = 0;\n      goto LABEL_74;\n    }\n    v30 = (unsigned int)v12 - (unsigned __int64)(v12 & 7);\n    v31 = (__m128 *)((char *)ptr + 32);\n    v32 = (unsigned int)v214 - (unsigned __int64)(v214 & 7);\n    v33 = 0LL;\n    v34 = _mm_cmpeq_epi32(a3, a3);\n    v35 = 0LL;\n    do\n    {\n      v33 = _mm_sub_epi32(\n              _mm_sub_epi32(_mm_add_epi32((__m128i)_mm_shuffle_ps(v31[-2], v31[-1], 221), v33), v34),\n              (__m128i)_mm_shuffle_ps(v31[-2], v31[-1], 136));\n      v35 = _mm_sub_epi32(\n              _mm_sub_epi32(_mm_add_epi32((__m128i)_mm_shuffle_ps(*v31, v31[1], 221), v35), v34),\n              (__m128i)_mm_shuffle_ps(*v31, v31[1], 136));\n      v31 += 4;\n      v32 -= 8LL;\n    }\n    while ( v32 );\n    v36 = _mm_add_epi32(v35, v33);\n    v37 = _mm_add_epi32(_mm_shuffle_epi32(v36, 78), v36);\n    v10 = (unsigned int)_mm_cvtsi128_si32(_mm_add_epi32(_mm_shuffle_epi32(v37, 229), v37));\n    if ( v12 & 7 )\n    {\nLABEL_74:\n      v38 = (char *)ptr + 8 * v30 + 4;\n      v39 = (unsigned int)v214 - v30;\n      do\n      {\n        v10 = (unsigned int)(*v38 + v10 + 1 - *(v38 - 1));\n        v38 += 2;\n        --v39;\n      }\n      while ( v39 );\n    }\n    v212 = (unsigned int)v12;\n  }\n  else\n  {\n    v212 = 0LL;\n    LOBYTE(v191) = 1;\n    v10 = 0LL;\n  }\n  v8 = ptr;\n  v5 = (signed int)v187;\nLABEL_78:\n  rewind(v4);\n  v40 = v9;\n  v211 = (void *)sub_4382F0(\"selex.c\", 247LL, 8LL * v9);\n  if ( (_DWORD)v189 )\n    v198 = sub_4382F0(\"selex.c\", 249LL, (signed int)v10 + 1);\n  ptr = v8;\n  if ( v5 )\n    v199 = sub_4382F0(\"selex.c\", 251LL, (signed int)v10 + 1);\n  v192 = v10;\n  v190 = v9;\n  if ( v9 > 0 )\n  {\n    v41 = (signed int)v192 + 1;\n    v42 = v190;\n    v43 = 0LL;\n    v44 = v211;\n    do\n    {\n      *v44 = sub_4382F0(\"selex.c\", 257LL, v41);\n      v45 = *(_DWORD *)(v200 + v43);\n      if ( v45 & 0x200 )\n      {\n        v46 = sub_4382F0(\"selex.c\", 259LL, v41);\n        v47 = v200;\n        *(_QWORD *)(v200 + v43 + 344) = v46;\n        v45 = *(_DWORD *)(v47 + v43);\n      }\n      if ( v45 & 0x400 )\n      {\n        v48 = sub_4382F0(\"selex.c\", 261LL, v41);\n        *(_QWORD *)(v200 + v43 + 352) = v48;\n      }\n      v43 += 360LL;\n      ++v44;\n      --v42;\n    }\n    while ( v42 );\n  }\n  v195 = v192;\n  v49 = v190;\n  v196 = v190;\n  v197 = sub_4382F0(\"selex.c\", 266LL, 4 * v40);\n  sub_43C860(v197, v49);\n  LODWORD(v50) = 0;\n  do\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( 1 )\n                {\n                  while ( 1 )\n                  {\n                    do\n                    {\n                      if ( !fgets(&s, 4096, v4) )\n                        sub_4325B0(\"Parse error in ReadSELEX()\", 0);\n                      strcpy(&dest, &s);\n                      v52 = strtok(&dest, \" \\t\\n\");\n                      v53 = v52;\n                    }\n                    while ( !v52 );\n                    if ( strcmp(v52, \"#=AU\") )\n                      break;\n                    v51 = strtok(0LL, \"\\n\");\n                    if ( !v51 )\n                      break;\n                    v204 = sub_4381A0(v51);\n                  }\n                  if ( strcmp(v53, \"#=ID\") )\n                    break;\n                  v54 = strtok(0LL, \"\\n\");\n                  if ( !v54 )\n                    break;\n                  v201 = sub_4381A0(v54);\n                }\n                if ( strcmp(v53, \"#=AC\") )\n                  break;\n                v55 = strtok(0LL, \"\\n\");\n                if ( !v55 )\n                  break;\n                v203 = sub_4381A0(v55);\n              }\n              if ( strcmp(v53, \"#=DE\") )\n                break;\n              v56 = strtok(0LL, \"\\n\");\n              if ( !v56 )\n                break;\n              v202 = sub_4381A0(v56);\n            }\n            if ( strcmp(v53, \"#=GA\") )\n              break;\n            v57 = strtok(0LL, \" \\t\\n\");\n            if ( !v57 )\n              sub_4325B0(\"Parse error in #=GA line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n            v58 = strtod(v57, 0LL);\n            v209 = v58;\n            v59 = strtok(0LL, \" \\t\\n\");\n            if ( !v59 )\n              sub_4325B0(\"Parse error in #=GA line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n            v60 = strtod(v59, 0LL);\n            v210 = v60;\n            LOBYTE(v194) = v194 | 4;\n          }\n          if ( strcmp(v53, \"#=TC\") )\n            break;\n          v61 = strtok(0LL, \" \\t\\n\");\n          if ( !v61 )\n            sub_4325B0(\"Parse error in #=TC line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n          v62 = strtod(v61, 0LL);\n          v205 = v62;\n          v63 = strtok(0LL, \" \\t\\n\");\n          if ( !v63 )\n            sub_4325B0(\"Parse error in #=TC line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n          v64 = strtod(v63, 0LL);\n          v206 = v64;\n          LOBYTE(v194) = v194 | 1;\n        }\n        if ( strcmp(v53, \"#=NC\") )\n          break;\n        v65 = strtok(0LL, \" \\t\\n\");\n        if ( !v65 )\n          sub_4325B0(\"Parse error in #=NC line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n        v66 = strtod(v65, 0LL);\n        v207 = v66;\n        v67 = strtok(0LL, \" \\t\\n\");\n        if ( !v67 )\n          sub_4325B0(\"Parse error in #=NC line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n        v68 = strtod(v67, 0LL);\n        v208 = v68;\n        LOBYTE(v194) = v194 | 2;\n      }\n      if ( strcmp(v53, \"#=SQ\") )\n        break;\n      v69 = strtok(0LL, \" \\t\\n\");\n      if ( !v69 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n      LODWORD(v187) = v50;\n      v50 = (signed int)v50;\n      v70 = 360LL * (signed int)v50;\n      v16 = strcmp(v69, (const char *)(v200 + v70 + 4)) == 0;\n      v71 = v193;\n      if ( !v16 )\n        v71 = 1LL;\n      v193 = v71;\n      v72 = strtok(0LL, \" \\t\\n\");\n      v73 = v72;\n      if ( !v72 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX()\", (unsigned __int64)\" \\t\\n\");\n      if ( !(unsigned int)sub_43C520(v72, \" \\t\\n\") )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): weight is not a number\", (unsigned __int64)\" \\t\\n\");\n      v74 = strtod(v73, 0LL);\n      *(float *)(v197 + 4 * v50) = v74;\n      v75 = strtok(0LL, \" \\t\\n\");\n      if ( !v75 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): incomplete line\", (unsigned __int64)\" \\t\\n\");\n      sub_432BF0(v70 + v200, v75, 2LL);\n      v76 = strtok(0LL, \" \\t\\n\");\n      v77 = (signed int)v187;\n      if ( !v76 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): incomplete line\", (unsigned __int64)\" \\t\\n\");\n      sub_432BF0(v70 + v200, v76, 4LL);\n      v78 = strtok(0LL, \".:\");\n      if ( !v78 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): incomplete line\", (unsigned __int64)\".:\");\n      sub_432BF0(v70 + v200, v78, 16LL);\n      v79 = strtok(0LL, \".:\");\n      if ( !v79 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): incomplete line\", (unsigned __int64)\".:\");\n      sub_432BF0(v70 + v200, v79, 32LL);\n      v80 = strtok(0LL, \":\\t \");\n      if ( !v80 )\n        sub_4325B0(\"Parse error in #=SQ line in ReadSELEX(): incomplete line\", (unsigned __int64)\":\\t \");\n      sub_432BF0(v70 + v200, v80, 256LL);\n      v81 = strtok(0LL, \"\\n\");\n      if ( v81 )\n        sub_432BF0(v200 + v70, v81, 8LL);\n      LODWORD(v50) = v77 + 1;\n    }\n  }\n  while ( strcmp(v53, \"#=CS\") && strcmp(v53, \"#=RF\") && strchr(asc_450048, *v53) );\n  if ( (_BYTE)v191 )\n    goto LABEL_329;\n  v82 = 0LL;\n  v83 = 0LL;\n  while ( 2 )\n  {\n    v214 = v82;\n    if ( !v53 )\n    {\n      v147 = (int *)((char *)ptr + 8 * v82 + 4);\n      v146 = (int *)((char *)ptr + 8 * v82);\n      goto LABEL_319;\n    }\n    v187 = (int *)((char *)ptr + 8 * v82);\n    v189 = (int *)((char *)ptr + 8 * v82 + 4);\n    v213 = v83;\n    v83 = (signed int)v83;\n    v191 = 0LL;\nLABEL_154:\n    if ( strcmp(v53, \"#=CS\") )\n    {\n      if ( strcmp(v53, \"#=RF\") )\n      {\n        if ( strcmp(v53, \"#=SS\") )\n        {\n          if ( strcmp(v53, \"#=SA\") )\n          {\n            if ( !strncmp(v53, \"#=\", 2uLL) )\n              goto LABEL_312;\n            v84 = (char *)(v83 + *((_QWORD *)v211 + (signed int)v191));\n            v85 = strlen(v53);\n            v86 = *v187;\n            v87 = *v189;\n            v88 = &s;\n            v89 = 4294968321LL;\n            if ( *v187 > 0 )\n            {\n              v90 = *v187 & 3;\n              v88 = &s;\n              if ( (unsigned int)(v86 - 1) >= 3 )\n              {\n                v91 = v90 - v86;\n                v88 = &s;\n                while ( 1 )\n                {\n                  if ( *v88 )\n                  {\n                    if ( !*++v88 )\n                      goto LABEL_164;\nLABEL_169:\n                    if ( !*++v88 )\n                      goto LABEL_170;\nLABEL_165:\n                    if ( *++v88 )\n                      goto LABEL_171;\nLABEL_166:\n                    v91 += 4;\n                    if ( !v91 )\n                      break;\n                  }\n                  else\n                  {\n                    if ( *v88 )\n                      goto LABEL_169;\nLABEL_164:\n                    if ( *v88 )\n                      goto LABEL_165;\nLABEL_170:\n                    if ( !*v88 )\n                      goto LABEL_166;\nLABEL_171:\n                    ++v88;\n                    v91 += 4;\n                    if ( !v91 )\n                      break;\n                  }\n                }\n              }\n              if ( v86 & 3 )\n              {\n                v92 = -v90;\n                do\n                {\n                  if ( *v88 )\n                    ++v88;\n                  ++v92;\n                }\n                while ( v92 );\n              }\n            }\n            if ( v86 <= v87 )\n            {\n              v93 = v85 - 1;\n              do\n              {\n                v94 = *v88;\n                if ( *v88 == 9 )\n                {\n                  sub_432690(\"TAB characters will corrupt a SELEX alignment! Please remove them first.\", v186);\n                  sub_4325B0(\"Parse error in alignment line in ReadSELEX()\", (char)v88);\n                }\n                v95 = 46;\n                if ( v86 > v93 && (v94 > 0x20u || !_bittest64(&v89, v94)) )\n                  v95 = *v88;\n                *v84 = v95;\n                if ( *v88 )\n                  ++v88;\n                ++v84;\n                v97 = __OFSUB__(v86, v87);\n                v96 = v86++ - v87 < 0;\n              }\n              while ( v96 ^ v97 );\n            }\n            v191 = (unsigned int)(v191 + 1);\n            goto LABEL_312;\n          }\n          v135 = (char *)(v83 + *(_QWORD *)(v200 + 360LL * ((signed int)v191 - 1) + 352));\n          v136 = strlen(v53);\n          v137 = *v187;\n          v138 = *v189;\n          v102 = &s;\n          v139 = 4294968321LL;\n          if ( *v187 > 0 )\n          {\n            v140 = *v187 & 3;\n            v102 = &s;\n            if ( (unsigned int)(v137 - 1) >= 3 )\n            {\n              v141 = v140 - v137;\n              v102 = &s;\n              while ( 1 )\n              {\n                if ( *v102 )\n                {\n                  if ( !*++v102 )\n                    goto LABEL_281;\nLABEL_286:\n                  if ( !*++v102 )\n                    goto LABEL_287;\nLABEL_282:\n                  if ( *++v102 )\n                    goto LABEL_288;\nLABEL_283:\n                  v141 += 4;\n                  if ( !v141 )\n                    break;\n                }\n                else\n                {\n                  if ( *v102 )\n                    goto LABEL_286;\nLABEL_281:\n                  if ( *v102 )\n                    goto LABEL_282;\nLABEL_287:\n                  if ( !*v102 )\n                    goto LABEL_283;\nLABEL_288:\n                  ++v102;\n                  v141 += 4;\n                  if ( !v141 )\n                    break;\n                }\n              }\n            }\n            if ( v137 & 3 )\n            {\n              v142 = -v140;\n              do\n              {\n                if ( *v102 )\n                  ++v102;\n                ++v142;\n              }\n              while ( v142 );\n            }\n          }\n          if ( v137 > v138 )\n            goto LABEL_312;\n          v143 = v136 - 1;\n          while ( 1 )\n          {\n            v144 = *v102;\n            if ( *v102 == 9 )\n              break;\n            v145 = 46;\n            if ( v137 > v143 && (v144 > 0x20u || !_bittest64(&v139, v144)) )\n              v145 = *v102;\n            *v135 = v145;\n            if ( *v102 )\n              ++v102;\n            ++v135;\n            v97 = __OFSUB__(v137, v138);\n            v96 = v137++ - v138 < 0;\n            if ( !(v96 ^ v97) )\n              goto LABEL_312;\n          }\n          sub_432690(\"TAB characters will corrupt a SELEX alignment! Please remove them first.\", v186);\n          v134 = \"Parse error in #=SA line in ReadSELEX()\";\nLABEL_311:\n          sub_4325B0(v134, (char)v102);\n        }\n        v123 = (char *)(v83 + *(_QWORD *)(v200 + 360LL * ((signed int)v191 - 1) + 344));\n        v124 = strlen(v53);\n        v125 = *v187;\n        v126 = *v189;\n        v102 = &s;\n        v127 = 4294968321LL;\n        if ( *v187 > 0 )\n        {\n          v128 = *v187 & 3;\n          v102 = &s;\n          if ( (unsigned int)(v125 - 1) >= 3 )\n          {\n            v129 = v128 - v125;\n            v102 = &s;\n            while ( 1 )\n            {\n              if ( *v102 )\n              {\n                if ( !*++v102 )\n                  goto LABEL_251;\nLABEL_256:\n                if ( !*++v102 )\n                  goto LABEL_257;\nLABEL_252:\n                if ( *++v102 )\n                  goto LABEL_258;\nLABEL_253:\n                v129 += 4;\n                if ( !v129 )\n                  break;\n              }\n              else\n              {\n                if ( *v102 )\n                  goto LABEL_256;\nLABEL_251:\n                if ( *v102 )\n                  goto LABEL_252;\nLABEL_257:\n                if ( !*v102 )\n                  goto LABEL_253;\nLABEL_258:\n                ++v102;\n                v129 += 4;\n                if ( !v129 )\n                  break;\n              }\n            }\n          }\n          if ( v125 & 3 )\n          {\n            v130 = -v128;\n            do\n            {\n              if ( *v102 )\n                ++v102;\n              ++v130;\n            }\n            while ( v130 );\n          }\n        }\n        if ( v125 > v126 )\n          goto LABEL_312;\n        v131 = v124 - 1;\n        while ( 1 )\n        {\n          v132 = *v102;\n          if ( *v102 == 9 )\n            break;\n          v133 = 46;\n          if ( v125 > v131 && (v132 > 0x20u || !_bittest64(&v127, v132)) )\n            v133 = *v102;\n          *v123 = v133;\n          if ( *v102 )\n            ++v102;\n          ++v123;\n          v97 = __OFSUB__(v125, v126);\n          v96 = v125++ - v126 < 0;\n          if ( !(v96 ^ v97) )\n            goto LABEL_312;\n        }\n        sub_432690(\"TAB characters will corrupt a SELEX alignment! Please remove them first.\", v186);\n        v134 = \"Parse error in #=SS line in ReadSELEX()\";\n        goto LABEL_311;\n      }\n      v111 = v199;\n      v112 = strlen(v53);\n      v113 = *v187;\n      v114 = *v189;\n      v102 = &s;\n      v115 = 4294968321LL;\n      if ( *v187 > 0 )\n      {\n        v116 = *v187 & 3;\n        v102 = &s;\n        if ( (unsigned int)(v113 - 1) >= 3 )\n        {\n          v117 = v116 - v113;\n          v102 = &s;\n          while ( 1 )\n          {\n            if ( *v102 )\n            {\n              if ( !*++v102 )\n                goto LABEL_222;\nLABEL_227:\n              if ( !*++v102 )\n                goto LABEL_228;\nLABEL_223:\n              if ( *++v102 )\n                goto LABEL_229;\nLABEL_224:\n              v117 += 4;\n              if ( !v117 )\n                break;\n            }\n            else\n            {\n              if ( *v102 )\n                goto LABEL_227;\nLABEL_222:\n              if ( *v102 )\n                goto LABEL_223;\nLABEL_228:\n              if ( !*v102 )\n                goto LABEL_224;\nLABEL_229:\n              ++v102;\n              v117 += 4;\n              if ( !v117 )\n                break;\n            }\n          }\n        }\n        if ( v113 & 3 )\n        {\n          v118 = -v116;\n          do\n          {\n            if ( *v102 )\n              ++v102;\n            ++v118;\n          }\n          while ( v118 );\n        }\n      }\n      if ( v113 > v114 )\n        goto LABEL_312;\n      v119 = v112 - 1;\n      v120 = (char *)(v83 + v111);\n      while ( 1 )\n      {\n        v121 = *v102;\n        if ( *v102 == 9 )\n          break;\n        v122 = 46;\n        if ( v113 > v119 && (v121 > 0x20u || !_bittest64(&v115, v121)) )\n          v122 = *v102;\n        *v120 = v122;\n        if ( *v102 )\n          ++v102;\n        ++v120;\n        v97 = __OFSUB__(v113, v114);\n        v96 = v113++ - v114 < 0;\n        if ( !(v96 ^ v97) )\n          goto LABEL_312;\n      }\n      sub_432690(\"TAB characters will corrupt a SELEX alignment! Please remove them first.\", v186);\n      v134 = \"Parse error in #=RF line in ReadSELEX()\";\n      goto LABEL_311;\n    }\n    v98 = v198;\n    v99 = strlen(v53);\n    v100 = *v187;\n    v101 = *v189;\n    v102 = &s;\n    if ( *v187 > 0 )\n    {\n      v103 = *v187 & 3;\n      v102 = &s;\n      if ( (unsigned int)(v100 - 1) >= 3 )\n      {\n        v104 = v103 - v100;\n        v102 = &s;\n        while ( 1 )\n        {\n          if ( *v102 )\n          {\n            if ( !*++v102 )\n              goto LABEL_193;\nLABEL_198:\n            if ( !*++v102 )\n              goto LABEL_199;\nLABEL_194:\n            if ( *++v102 )\n              goto LABEL_200;\nLABEL_195:\n            v104 += 4;\n            if ( !v104 )\n              break;\n          }\n          else\n          {\n            if ( *v102 )\n              goto LABEL_198;\nLABEL_193:\n            if ( *v102 )\n              goto LABEL_194;\nLABEL_199:\n            if ( !*v102 )\n              goto LABEL_195;\nLABEL_200:\n            ++v102;\n            v104 += 4;\n            if ( !v104 )\n              break;\n          }\n        }\n      }\n      if ( v100 & 3 )\n      {\n        v105 = -v103;\n        do\n        {\n          if ( *v102 )\n            ++v102;\n          ++v105;\n        }\n        while ( v105 );\n      }\n    }\n    if ( v100 > v101 )\n      goto LABEL_312;\n    v106 = v99 - 1;\n    v107 = (char *)(v83 + v98);\n    v108 = 4294968321LL;\n    do\n    {\n      v109 = *v102;\n      if ( *v102 == 9 )\n      {\n        sub_432690(\"TAB characters will corrupt a SELEX alignment! Please remove them first.\", v186);\n        v134 = \"Parse error in #=CS line in ReadSELEX()\";\n        goto LABEL_311;\n      }\n      v110 = 46;\n      if ( v100 > v106 && (v109 > 0x20u || !_bittest64(&v108, v109)) )\n        v110 = *v102;\n      *v107 = v110;\n      if ( *v102 )\n        ++v102;\n      ++v107;\n      v97 = __OFSUB__(v100, v101);\n      v96 = v100++ - v101 < 0;\n    }\n    while ( v96 ^ v97 );\nLABEL_312:\n    while ( fgets(&s, 4096, v4) )\n    {\n      strcpy(&dest, &s);\n      v53 = strtok(&dest, \" \\t\\n\");\n      if ( !v53 )\n        break;\n      if ( !strncmp(&s, \"#=\", 2uLL) || !strchr(asc_450048, *v53) )\n        goto LABEL_154;\n    }\n    LODWORD(v83) = v213;\n    v146 = v187;\n    v147 = v189;\nLABEL_319:\n    v148 = *v146;\n    v149 = *v147 + v83 + 1;\n    if ( fgets(&s, 4096, v4) )\n    {\n      while ( 1 )\n      {\n        strcpy(&dest, &s);\n        v53 = strtok(&dest, \" \\t\\n\");\n        if ( v53 )\n        {\n          if ( !strncmp(&s, \"#=\", 2uLL) || !strchr(asc_450048, *v53) )\n            goto LABEL_328;\n        }\n        else\n        {\n          v53 = 0LL;\n        }\n        if ( !fgets(&s, 4096, v4) )\n          goto LABEL_328;\n      }\n    }\n    v53 = 0LL;\nLABEL_328:\n    v83 = (unsigned int)(v149 - v148);\n    v82 = v214 + 1;\n    if ( v214 + 1 != v212 )\n      continue;\n    break;\n  }\nLABEL_329:\n  v150 = v190;\n  v151 = v211;\n  if ( (signed int)v190 > 0 )\n  {\n    v152 = v192;\n    v153 = (unsigned int)v192 - 1LL;\n    v154 = v192 & 1;\n    v155 = (unsigned int)v192 - v154;\n    v156 = 0LL;\n    v157 = -9223372036854751231LL;\n    do\n    {\n      v160 = v200;\n      v161 = 360 * v156;\n      v162 = *(_DWORD *)(v200 + 360 * v156);\n      if ( v162 & 0x200 )\n      {\n        if ( (signed int)v192 <= 0 )\n        {\n          LODWORD(v158) = 0;\n        }\n        else\n        {\n          v163 = 0LL;\n          LODWORD(v158) = 0;\n          if ( v153 )\n          {\n            do\n            {\n              v164 = *(_BYTE *)(v151[v156] + v163) - 32;\n              if ( (v164 > 0x3Fu || !_bittest64(&v157, v164)) && *(_BYTE *)(v151[v156] + v163) != 126 )\n              {\n                v158 = (signed int)v158;\n                *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v158) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v163);\n                LODWORD(v158) = v158 + 1;\n              }\n              v165 = *(_BYTE *)(v151[v156] + v163 + 1) - 32;\n              if ( (v165 > 0x3Fu || !_bittest64(&v157, v165)) && *(_BYTE *)(v151[v156] + v163 + 1) != 126 )\n              {\n                v158 = (signed int)v158;\n                *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v158) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v163 + 1);\n                LODWORD(v158) = v158 + 1;\n              }\n              v163 += 2LL;\n            }\n            while ( v155 != v163 );\n          }\n          if ( v154 )\n          {\n            v166 = *(_BYTE *)(v151[v156] + v163);\n            if ( ((unsigned __int8)(v166 - 32) > 0x3Fu || !_bittest64(&v157, (unsigned __int8)(v166 - 32)))\n              && v166 != 126 )\n            {\n              v158 = (signed int)v158;\n              *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v158) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 344) + v163);\n              LODWORD(v158) = v158 + 1;\n            }\n          }\n          v160 = v200;\n        }\n        *(_BYTE *)(*(_QWORD *)(v160 + v161 + 344) + (signed int)v158) = 0;\n        v160 = v200;\n        v162 = *(_DWORD *)(v200 + v161);\n      }\n      if ( v162 & 0x400 )\n      {\n        if ( (signed int)v192 <= 0 )\n        {\n          LODWORD(v159) = 0;\n        }\n        else\n        {\n          v167 = 0LL;\n          LODWORD(v159) = 0;\n          if ( v153 )\n          {\n            do\n            {\n              v168 = *(_BYTE *)(v151[v156] + v167) - 32;\n              if ( (v168 > 0x3Fu || !_bittest64(&v157, v168)) && *(_BYTE *)(v151[v156] + v167) != 126 )\n              {\n                v159 = (signed int)v159;\n                *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v159) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v167);\n                LODWORD(v159) = v159 + 1;\n              }\n              v169 = *(_BYTE *)(v151[v156] + v167 + 1) - 32;\n              if ( (v169 > 0x3Fu || !_bittest64(&v157, v169)) && *(_BYTE *)(v151[v156] + v167 + 1) != 126 )\n              {\n                v159 = (signed int)v159;\n                *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v159) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v167 + 1);\n                LODWORD(v159) = v159 + 1;\n              }\n              v167 += 2LL;\n            }\n            while ( v155 != v167 );\n          }\n          if ( v152 & 1 )\n          {\n            v170 = *(_BYTE *)(v151[v156] + v167);\n            if ( ((unsigned __int8)(v170 - 32) > 0x3Fu || !_bittest64(&v157, (unsigned __int8)(v170 - 32)))\n              && v170 != 126 )\n            {\n              v159 = (signed int)v159;\n              *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v159) = *(_BYTE *)(*(_QWORD *)(v200 + v161 + 352) + v167);\n              LODWORD(v159) = v159 + 1;\n            }\n          }\n          v160 = v200;\n        }\n        *(_BYTE *)(*(_QWORD *)(v160 + v161 + 352) + (signed int)v159) = 0;\n      }\n      ++v156;\n    }\n    while ( v156 != v150 );\n  }\n  v171 = v215;\n  v172 = v192;\n  if ( v199 )\n    *(_BYTE *)(v199 + (signed int)v192) = 0;\n  if ( v198 )\n    *(_BYTE *)(v198 + v172) = 0;\n  if ( (signed int)v150 > 0 )\n  {\n    v173 = v172;\n    v174 = v150 & 3;\n    if ( (unsigned __int64)v150 - 1 >= 3 )\n    {\n      v175 = 0LL;\n      do\n      {\n        *(_BYTE *)(v151[v175] + v173) = 0;\n        *(_BYTE *)(v151[v175 + 1] + v173) = 0;\n        *(_BYTE *)(v151[v175 + 2] + v173) = 0;\n        *(_BYTE *)(v151[v175 + 3] + v173) = 0;\n        v175 += 4LL;\n      }\n      while ( v150 - v174 != v175 );\n      if ( v150 & 3 )\n        goto LABEL_383;\n    }\n    else\n    {\n      v175 = 0LL;\n      if ( !(v150 & 3) )\n        goto LABEL_385;\nLABEL_383:\n      v176 = &v151[v175];\n      v177 = -v174;\n      do\n      {\n        *(_BYTE *)(*v176 + v173) = 0;\n        ++v176;\n        ++v177;\n      }\n      while ( v177 );\n    }\nLABEL_385:\n    if ( (signed int)v150 <= 0 )\n      goto LABEL_398;\n    v178 = 0LL;\n    while ( 2 )\n    {\n      v179 = (char *)v151[v178];\n      v180 = 0;\nLABEL_389:\n      v181 = *v179;\n      if ( *v179 > 94 )\n      {\n        if ( v181 != 95 && v181 != 126 )\n          goto LABEL_396;\n      }\n      else if ( (unsigned __int8)(v181 - 45) >= 2u && v181 != 32 )\n      {\n        if ( !v181 )\n        {\n          v182 = v200;\n          v183 = 360 * v178;\n          *(_DWORD *)(v200 + v183 + 324) = v180;\n          *(_BYTE *)(v182 + v183) |= 0x40u;\n          if ( ++v178 == v150 )\n            goto LABEL_398;\n          continue;\n        }\nLABEL_396:\n        ++v180;\n      }\n      break;\n    }\n    ++v179;\n    goto LABEL_389;\n  }\nLABEL_398:\n  free(ptr);\n  if ( (_DWORD)v193 )\n  {\n    v184 = *(_QWORD *)(v171 + 8);\n    sub_432690(\"sequences may be in different orders in blocks of %s?\", v186);\n  }\n  v3 = sub_42CA90((__int64)v151, &v194);\n  sub_42C2C0(v3);\n  sub_4247A0(v151, (__int64)&v194);\n  return v3;\n}\n", 
            "funcStartAddr": "0x42ed20L", 
            "funcEndAddr": "0x4306ecL", 
            "funcName": "sub_42ED20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_430700(FILE *a1, __int64 a2, int a3)\n{\n  __int64 v3; // r15\n  FILE *v4; // r14\n  char *v5; // r12\n  __int64 v6; // r13\n  __int64 v7; // rbx\n  __int64 v8; // r14\n  signed int v9; // ebp\n  signed int v10; // eax\n  unsigned int v11; // er13\n  __int64 v12; // rbx\n  __int64 v13; // rax\n  double v14; // xmm0_8\n  double v15; // xmm0_8\n  double v16; // xmm0_8\n  signed __int64 v17; // rbp\n  __int64 v18; // rax\n  const char *v19; // rax\n  const char *v20; // r10\n  __int64 v21; // rax\n  const char *v22; // rax\n  const char *v23; // rbx\n  signed __int64 v24; // rbx\n  __int64 v25; // rsi\n  __int64 v26; // rsi\n  signed __int64 v27; // r14\n  __int64 v28; // rax\n  __int64 v29; // rsi\n  __int64 v30; // rax\n  __int64 v31; // rsi\n  int v32; // [rsp+10h] [rbp-38h]\n\n  v3 = a2;\n  v4 = a1;\n  v32 = a3;\n  v5 = (char *)malloc(a3 + 101);\n  v6 = *(signed int *)(a2 + 28);\n  if ( v6 <= 0 )\n  {\n    v11 = 6;\n    if ( *(_DWORD *)(a2 + 184) <= 0 )\n      goto LABEL_15;\n    goto LABEL_11;\n  }\n  v7 = *(_QWORD *)(a2 + 8);\n  v8 = 0LL;\n  v9 = 0;\n  do\n  {\n    v10 = strlen(*(const char **)(v7 + 8 * v8));\n    if ( v9 < v10 )\n      v9 = v10;\n    ++v8;\n  }\n  while ( v8 < v6 );\n  v11 = 6;\n  if ( v9 > 5 )\n    v11 = v9;\n  v4 = a1;\n  if ( *(_DWORD *)(a2 + 184) > 0 )\n  {\nLABEL_11:\n    v12 = 0LL;\n    do\n    {\n      fprintf(v4, \"# %s\\n\", *(_QWORD *)(*(_QWORD *)(a2 + 176) + 8 * v12++));\n      v13 = *(signed int *)(a2 + 184);\n    }\n    while ( v12 < v13 );\n    if ( (signed int)v13 > 0 )\n      fputc(10, v4);\n  }\nLABEL_15:\n  if ( *(_QWORD *)(a2 + 40) )\n    fprintf(v4, \"#=ID %s\\n\");\n  if ( *(_QWORD *)(a2 + 56) )\n    fprintf(v4, \"#=AC %s\\n\");\n  if ( *(_QWORD *)(a2 + 48) )\n    fprintf(v4, \"#=DE %s\\n\");\n  if ( *(_QWORD *)(a2 + 64) )\n    fprintf(v4, \"#=AU %s\\n\");\n  if ( *(_DWORD *)(a2 + 160) )\n  {\n    v14 = *(float *)(a2 + 136);\n    if ( !*(_DWORD *)(a2 + 164) )\n    {\n      fprintf(v4, \"#=GA %.1f\\n\", v14);\n      if ( !*(_DWORD *)(a2 + 168) )\n        goto LABEL_33;\n      goto LABEL_27;\n    }\n    fprintf(v4, \"#=GA %.1f %.1f\\n\", v14, *(float *)(a2 + 140));\n  }\n  if ( !*(_DWORD *)(a2 + 168) )\n    goto LABEL_33;\nLABEL_27:\n  v15 = *(float *)(a2 + 144);\n  if ( *(_DWORD *)(a2 + 172) )\n  {\n    fprintf(v4, \"#=NC %.1f %.1f\\n\", v15, *(float *)(a2 + 148));\n    if ( !*(_DWORD *)(a2 + 152) )\n      goto LABEL_36;\n    goto LABEL_34;\n  }\n  fprintf(v4, \"#=NC %.1f\\n\", v15);\nLABEL_33:\n  if ( !*(_DWORD *)(a2 + 152) )\n    goto LABEL_36;\nLABEL_34:\n  v16 = *(float *)(a2 + 128);\n  if ( !*(_DWORD *)(a2 + 156) )\n  {\n    fprintf(v4, \"#=TC %.1f\\n\", v16);\n    if ( *(_DWORD *)(a2 + 28) <= 0 )\n      goto LABEL_49;\n    goto LABEL_37;\n  }\n  fprintf(v4, \"#=TC %.1f %.1f\\n\", v16, *(float *)(a2 + 132));\nLABEL_36:\n  if ( *(_DWORD *)(a2 + 28) <= 0 )\n    goto LABEL_49;\nLABEL_37:\n  v17 = 0LL;\n  do\n  {\n    v18 = *(_QWORD *)(a2 + 96);\n    if ( v18 )\n    {\n      v19 = *(const char **)(v18 + 8 * v17);\n      v20 = \"-\";\n      if ( v19 )\n        v20 = v19;\n    }\n    else\n    {\n      v20 = \"-\";\n    }\n    v21 = *(_QWORD *)(a2 + 104);\n    if ( v21 )\n    {\n      v22 = *(const char **)(v21 + 8 * v17);\n      v23 = \"-\";\n      if ( v22 )\n        v23 = v22;\n    }\n    else\n    {\n      v23 = \"-\";\n    }\n    fprintf(\n      v4,\n      \"#=SQ %-*.*s %6.4f %s %s %d..%d::%d %s\\n\",\n      v11,\n      v11,\n      *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v17),\n      \"-\",\n      *(float *)(*(_QWORD *)(a2 + 16) + 4 * v17),\n      v20,\n      0LL,\n      0LL,\n      0LL,\n      v23);\n    ++v17;\n  }\n  while ( v17 < *(signed int *)(a2 + 28) );\nLABEL_49:\n  fputc(10, v4);\n  if ( *(_DWORD *)(a2 + 24) > 0 )\n  {\n    v24 = 0LL;\n    do\n    {\n      if ( v24 > 0 )\n        fputc(10, v4);\n      v25 = *(_QWORD *)(v3 + 72);\n      if ( v25 )\n      {\n        strncpy(v5, (const char *)(v24 + v25), v32);\n        v5[v32] = 0;\n        fprintf(v4, \"%-*.*s %s\\n\", v11, v11, \"#=CS\", v5);\n      }\n      v26 = *(_QWORD *)(v3 + 88);\n      if ( v26 )\n      {\n        strncpy(v5, (const char *)(v24 + v26), v32);\n        v5[v32] = 0;\n        fprintf(v4, \"%-*.*s %s\\n\", v11, v11, \"#=RF\", v5);\n      }\n      if ( *(_DWORD *)(v3 + 28) > 0 )\n      {\n        v27 = 0LL;\n        do\n        {\n          strncpy(v5, (const char *)(v24 + *(_QWORD *)(*(_QWORD *)v3 + 8 * v27)), v32);\n          v5[v32] = 0;\n          fprintf(a1, \"%-*.*s %s\\n\", v11, v11, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v27), v5);\n          v28 = *(_QWORD *)(v3 + 112);\n          if ( v28 )\n          {\n            v29 = *(_QWORD *)(v28 + 8 * v27);\n            if ( v29 )\n            {\n              strncpy(v5, (const char *)(v24 + v29), v32);\n              v5[v32] = 0;\n              fprintf(a1, \"%-*.*s %s\\n\", v11, v11, \"#=SS\", v5);\n            }\n          }\n          v30 = *(_QWORD *)(v3 + 120);\n          if ( v30 )\n          {\n            v31 = *(_QWORD *)(v30 + 8 * v27);\n            if ( v31 )\n            {\n              strncpy(v5, (const char *)(v24 + v31), v32);\n              v5[v32] = 0;\n              fprintf(a1, \"%-*.*s %s\\n\", v11, v11, \"#=SA\", v5);\n            }\n          }\n          ++v27;\n        }\n        while ( v27 < *(signed int *)(v3 + 28) );\n      }\n      v24 += v32;\n      v4 = a1;\n    }\n    while ( v24 < *(signed int *)(v3 + 24) );\n  }\n  free(v5);\n}\n", 
            "funcStartAddr": "0x430700L", 
            "funcEndAddr": "0x430bd1L", 
            "funcName": "sub_430700"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_430BF0(__int64 a1, unsigned int a2, __int64 *a3)\n{\n  __int64 *v3; // r14\n  __int64 v4; // r15\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  size_t v7; // rax\n  __int64 v8; // rcx\n  int v9; // esi\n  char v10; // al\n\n  v3 = a3;\n  v4 = sub_4382F0(\"selex.c\", 738LL, 8LL * (signed int)a2);\n  if ( (signed int)a2 > 0 )\n  {\n    v5 = a2;\n    v6 = 0LL;\n    do\n    {\n      v7 = strlen(*(const char **)(a1 + 8 * v6));\n      *(_QWORD *)(v4 + 8 * v6) = sub_4382F0(\"selex.c\", 744LL, (signed __int64)((v7 << 32) + 0x100000000LL) >> 32);\n      v8 = 0LL;\n      v9 = 0;\n      while ( 1 )\n      {\n        v10 = *(_BYTE *)(*(_QWORD *)(a1 + 8 * v6) + v8);\n        if ( v10 <= 94 )\n          break;\n        if ( v10 != 95 && v10 != 126 )\n          goto LABEL_12;\nLABEL_4:\n        ++v8;\n      }\n      if ( (unsigned __int8)(v10 - 45) < 2u || v10 == 32 )\n        goto LABEL_4;\n      if ( v10 )\n      {\nLABEL_12:\n        *(_BYTE *)(*(_QWORD *)(v4 + 8 * v6) + v9++) = v10;\n        goto LABEL_4;\n      }\n      *(_BYTE *)(*(_QWORD *)(v4 + 8 * v6++) + v9) = 0;\n    }\n    while ( v6 != v5 );\n  }\n  *v3 = v4;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x430bf0L", 
            "funcEndAddr": "0x430cefL", 
            "funcName": "sub_430BF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_430FD0(_BYTE *a1, _BYTE *a2)\n{\n  _BYTE *v2; // rbp\n  _BYTE *v3; // r12\n  char v4; // bl\n  unsigned int v5; // er14\n  const unsigned __int16 **v6; // r15\n  unsigned __int64 v7; // rcx\n  unsigned __int64 v8; // rax\n\n  v2 = a2;\n  v3 = a1;\n  v4 = *a2;\n  v5 = 1;\n  if ( *a2 )\n  {\n    v6 = __ctype_b_loc();\n    while ( 1 )\n    {\n      if ( (*v6)[v4] & 0x200 )\n      {\n        v4 = (*__ctype_toupper_loc())[v4];\n        *v2 = v4;\n      }\n      v7 = 0LL;\n      do\n        v8 = v7++;\n      while ( v8 <= 0x11 && v4 != byte_44FBE0[4 * v8] );\n      if ( (unsigned int)(v7 - 1) > 0x11 )\n        break;\n      *v3++ = byte_44FBE2[4 * v8];\n      v4 = (v2++)[1];\n      if ( !v4 )\n        goto LABEL_12;\n    }\n    v5 = 0;\n  }\nLABEL_12:\n  *v3 = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x430fd0L", 
            "funcEndAddr": "0x431074L", 
            "funcName": "sub_430FD0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4312F0(__int64 a1, const char *a2, double a3)\n{\n  const char *v3; // rbx\n  size_t v4; // r15\n  const unsigned __int16 *v5; // rcx\n  signed __int64 result; // rax\n  __int64 v7; // rsi\n  _QWORD *v8; // r12\n  __int64 v9; // r13\n  signed __int64 v10; // r14\n  signed __int64 v11; // rbx\n  signed __int64 v12; // rsi\n  __int32_t v13; // ebp\n  int v14; // ebp\n  char *v15; // r15\n  signed __int64 v16; // r13\n  __int32_t v17; // ebx\n  int v18; // ebx\n  __int32_t v19; // ebx\n  __int64 v20; // r15\n  __int64 v21; // r14\n  __int64 v22; // rbp\n  __int64 v23; // rax\n  __int64 v24; // rdx\n  __int64 v25; // rcx\n  char v26; // bl\n  __int64 v27; // rax\n  signed int v28; // ecx\n  bool v29; // zf\n  unsigned __int64 v30; // rax\n  __int64 v31; // r14\n  signed __int64 v32; // rax\n  signed __int64 v33; // rbx\n  signed int v34; // ebp\n  __int64 v35; // rcx\n  __int64 v36; // rax\n  signed int *v37; // r14\n  __int32_t v38; // ebp\n  __int64 v39; // rbp\n  __int64 v40; // r13\n  __int64 v41; // rax\n  __int64 v42; // rdx\n  char v43; // si\n  char v44; // [rsp+7h] [rbp-81h]\n  signed int *ptr; // [rsp+8h] [rbp-80h]\n  const char *v46; // [rsp+10h] [rbp-78h]\n  unsigned int v47; // [rsp+18h] [rbp-70h]\n  char v48; // [rsp+24h] [rbp-64h]\n  char v49[26]; // [rsp+30h] [rbp-58h]\n\n  v3 = a2;\n  v4 = strlen(a2);\n  if ( (signed int)v4 <= 0 )\n  {\nLABEL_5:\n    v46 = v3;\n    v8 = (_QWORD *)sub_4382F0(\"shuffle.c\", 127LL, 208LL);\n    v9 = sub_4382F0(\"shuffle.c\", 128LL, 104LL);\n    v10 = (signed __int64)((v4 << 32) - 0x100000000LL) >> 32;\n    v11 = 4611686018427387878LL;\n    do\n    {\n      v12 = 131LL;\n      v8[v11 + 26] = sub_4382F0(\"shuffle.c\", 131LL, v10);\n      *(_DWORD *)(v9 + v11 * 4 + 104) = 0;\n      ++v11;\n    }\n    while ( v11 * 4 );\n    v13 = *v46;\n    ptr = (signed int *)v9;\n    if ( (unsigned int)(v13 + 128) <= 0x17F )\n      v13 = (*__ctype_toupper_loc())[v13];\n    v47 = v4;\n    if ( (signed int)v4 >= 2 )\n    {\n      v14 = v13 - 65;\n      v15 = (char *)(v46 + 1);\n      v16 = v47 - 1LL;\n      do\n      {\n        v17 = *v15;\n        if ( (unsigned int)(v17 + 128) <= 0x17F )\n          v17 = (*__ctype_toupper_loc())[v17];\n        v18 = v17 - 65;\n        v12 = (signed __int64)ptr;\n        *(_BYTE *)(v8[v14] + ptr[v14]) = v18;\n        ++*(_DWORD *)(v12 + 4LL * v14);\n        ++v15;\n        v14 = v18;\n        --v16;\n      }\n      while ( v16 );\n    }\n    v19 = v46[v10];\n    if ( (unsigned int)(v19 + 128) <= 0x17F )\n      v19 = (*__ctype_toupper_loc())[v19];\n    v48 = v19;\n    v44 = v19 - 65;\n    v20 = (char)(v19 - 65);\n    v21 = (unsigned int)(char)(v19 - 65);\nLABEL_17:\n    v22 = 0LL;\n    do\n    {\n      if ( v22 != v21 && ptr[v22] )\n      {\n        sub_437B60(\"shuffle.c\", v12);\n        v23 = ptr[v22];\n        v24 = v8[v22];\n        v25 = (signed int)((double)(signed int)v23 * a3);\n        v26 = *(_BYTE *)(v24 + v25);\n        *(_BYTE *)(v24 + v25) = *(_BYTE *)(v24 + v23 - 1);\n        *(_BYTE *)(v8[v22] + ptr[v22] - 1LL) = v26;\n      }\n      ++v22;\n    }\n    while ( v22 != 26 );\n    a3 = 0.0;\n    *(_OWORD *)&v49[10] = 0LL;\n    *(_OWORD *)v49 = 0LL;\n    v49[v20] = 1;\n    v27 = 0LL;\n    v28 = 0;\n    while ( 1 )\n    {\n      if ( !v49[v27] )\n      {\n        v12 = ptr[v27];\n        if ( v49[*(char *)(v8[v27] + v12 - 1)] == 1 )\n        {\n          v49[v27] = 1;\n          v28 = 1;\n        }\n      }\n      if ( ++v27 == 26 )\n      {\n        v27 = 0LL;\n        v29 = v28 == 0;\n        v28 = 0;\n        if ( v29 )\n          break;\n      }\n    }\n    v30 = 0LL;\n    do\n    {\n      if ( v21 != v30 && ptr[v30] && !v49[v30] || v30 + 1 != v21 && ptr[v30 + 1] && !v49[v30 + 1] )\n        goto LABEL_17;\n      v30 += 2LL;\n    }\n    while ( v30 < 0x1A );\n    v31 = 0LL;\n    do\n    {\n      v32 = ptr[v31];\n      if ( v32 >= 3 )\n      {\n        v33 = v32 + 1;\n        v34 = v32 - 1;\n        do\n        {\n          sub_437B60(\"shuffle.c\", v12);\n          v35 = v8[v31];\n          v36 = (signed int)((double)v34 * 0.0);\n          v12 = *(unsigned __int8 *)(v35 + v36);\n          *(_BYTE *)(v35 + v36) = *(_BYTE *)(v35 + v33 - 3);\n          *(_BYTE *)(v8[v31] + v33-- - 3) = v12;\n          --v34;\n        }\n        while ( v33 > 3 );\n      }\n      ++v31;\n    }\n    while ( v31 != 26 );\n    v37 = (signed int *)sub_4382F0(\"shuffle.c\", 240LL, 104LL);\n    *((_OWORD *)v37 + 5) = 0LL;\n    *((_OWORD *)v37 + 4) = 0LL;\n    *((_OWORD *)v37 + 3) = 0LL;\n    *((_OWORD *)v37 + 2) = 0LL;\n    *((_OWORD *)v37 + 1) = 0LL;\n    *(_OWORD *)v37 = 0LL;\n    *((_QWORD *)v37 + 12) = 0LL;\n    v38 = *v46;\n    if ( (unsigned int)(v38 + 128) <= 0x17F )\n      v38 = (*__ctype_toupper_loc())[v38];\n    LODWORD(v39) = v38 - 65;\n    v40 = 0LL;\n    do\n    {\n      v41 = (signed int)v39;\n      *(_BYTE *)(a1 + v40) = v39 + 65;\n      v42 = v37[(signed int)v39];\n      v39 = *(char *)(v8[(signed int)v39] + v42);\n      v37[v41] = v42 + 1;\n      ++v40;\n    }\n    while ( v37[v39] != ptr[v39] );\n    v43 = v40 + 1;\n    *(_BYTE *)(a1 + (unsigned int)v40) = v48;\n    *(_BYTE *)(a1 + (unsigned int)(v40 + 1)) = 0;\n    if ( (_BYTE)v39 != v44 )\n      sub_4325B0(\"hey, you didn't end on s_f.\", v43);\n    if ( v47 - 1 != (_DWORD)v40 )\n      sub_4325B0(\"hey, pos (%d) != len (%d).\", v43);\n    sub_438390(v8);\n    free(ptr);\n    free(v37);\n    result = 1LL;\n  }\n  else\n  {\n    v5 = *__ctype_b_loc();\n    result = 0LL;\n    v7 = 0LL;\n    while ( v5[v3[v7]] & 0x400 )\n    {\n      if ( ++v7 >= (signed int)v4 )\n        goto LABEL_5;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4312f0L", 
            "funcEndAddr": "0x431727L", 
            "funcName": "sub_4312F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_431730(_BYTE *a1, const char *a2)\n{\n  const char *v2; // r13\n  unsigned int v3; // er15\n  const unsigned __int16 *v4; // rcx\n  signed __int64 result; // rax\n  __int64 v6; // rsi\n  __int64 v7; // rbx\n  __int32_t v8; // ebp\n  __int64 v9; // r13\n  _BYTE *v10; // rbx\n  __int64 v11; // rax\n  int v12[103]; // [rsp+0h] [rbp-19Ch]\n  int _104[103]; // [rsp+104h] [rbp-98h]\n\n  v2 = a2;\n  v3 = strlen(a2);\n  if ( (signed int)v3 <= 0 )\n  {\n    sub_43C860(_104, 26LL);\nLABEL_15:\n    sub_43DC80(_104, 26LL);\nLABEL_16:\n    v11 = 0LL;\nLABEL_17:\n    a1[v11] = 0;\n    result = 1LL;\n  }\n  else\n  {\n    v4 = *__ctype_b_loc();\n    result = 0LL;\n    v6 = 0LL;\n    while ( v4[v2[v6]] & 0x400 )\n    {\n      if ( ++v6 >= (signed int)v3 )\n      {\n        sub_43C860(_104, 26LL);\n        if ( (signed int)v3 <= 0 )\n          goto LABEL_15;\n        v7 = v3;\n        do\n        {\n          v8 = *v2;\n          if ( (unsigned int)(v8 + 128) <= 0x17F )\n            v8 = (*__ctype_toupper_loc())[v8];\n          *(float *)&v12[v8] = *(float *)&v12[v8] + 1.0;\n          ++v2;\n          --v7;\n        }\n        while ( v7 );\n        sub_43DC80(_104, 26LL);\n        if ( (signed int)v3 > 0 )\n        {\n          v9 = v3;\n          v10 = a1;\n          do\n          {\n            *v10++ = (unsigned __int64)sub_438150(_104, 26LL) + 65;\n            --v9;\n          }\n          while ( v9 );\n          v11 = v3;\n          goto LABEL_17;\n        }\n        goto LABEL_16;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x431730L", 
            "funcEndAddr": "0x43188bL", 
            "funcName": "sub_431730"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_431890(_BYTE *a1, const char *a2)\n{\n  const char *v2; // r15\n  signed int v3; // er12\n  const unsigned __int16 *v4; // rcx\n  signed __int64 result; // rax\n  __int64 v6; // rsi\n  char *v7; // rbp\n  signed __int64 v8; // rbx\n  __int64 v9; // rbx\n  unsigned int v10; // eax\n  int v11; // er13\n  signed int v12; // ebx\n  char *v13; // r15\n  signed __int64 v14; // rbp\n  int v15; // er12\n  __int32_t v16; // er14\n  _BYTE *v17; // r14\n  unsigned int v18; // er15\n  _BYTE *v19; // rbp\n  signed __int64 v20; // rbx\n  signed __int64 v21; // rax\n  __int64 v22; // [rsp+0h] [rbp-AD8h]\n  _BYTE *v23; // [rsp+8h] [rbp-AD0h]\n  char v24[104]; // [rsp+10h] [rbp-AC8h]\n  char v25; // [rsp+78h] [rbp-A60h]\n  char v26; // [rsp+E0h] [rbp-9F8h]\n  char v27; // [rsp+148h] [rbp-990h]\n  char v28; // [rsp+1B0h] [rbp-928h]\n  char v29; // [rsp+218h] [rbp-8C0h]\n  char v30; // [rsp+280h] [rbp-858h]\n  char v31; // [rsp+2E8h] [rbp-7F0h]\n  char v32; // [rsp+350h] [rbp-788h]\n  char v33; // [rsp+3B8h] [rbp-720h]\n  char v34; // [rsp+420h] [rbp-6B8h]\n  char v35; // [rsp+488h] [rbp-650h]\n  char v36; // [rsp+4F0h] [rbp-5E8h]\n  char v37; // [rsp+558h] [rbp-580h]\n  char v38; // [rsp+5C0h] [rbp-518h]\n  char v39; // [rsp+628h] [rbp-4B0h]\n  char v40; // [rsp+690h] [rbp-448h]\n  char v41; // [rsp+6F8h] [rbp-3E0h]\n  char v42; // [rsp+760h] [rbp-378h]\n  char v43; // [rsp+7C8h] [rbp-310h]\n  char v44; // [rsp+830h] [rbp-2A8h]\n  char v45; // [rsp+898h] [rbp-240h]\n  char v46; // [rsp+900h] [rbp-1D8h]\n  char v47; // [rsp+968h] [rbp-170h]\n  char v48; // [rsp+9D0h] [rbp-108h]\n  char v49; // [rsp+A38h] [rbp-A0h]\n\n  v2 = a2;\n  v3 = strlen(a2);\n  if ( v3 <= 0 )\n  {\nLABEL_5:\n    v7 = v24;\n    v8 = 26LL;\n    do\n    {\n      sub_43C860(v7, 26LL);\n      v7 += 104;\n      --v8;\n    }\n    while ( v8 );\n    v9 = (unsigned int)*v2;\n    v10 = *v2 + 128;\n    v23 = a1;\n    if ( v10 <= 0x17F )\n      v9 = (unsigned int)(*__ctype_toupper_loc())[(signed int)v9];\n    v22 = v9;\n    v11 = v9 - 65;\n    v12 = v3;\n    if ( v3 >= 2 )\n    {\n      v13 = (char *)(v2 + 1);\n      v14 = (unsigned int)v3 - 1LL;\n      v15 = v11;\n      do\n      {\n        v16 = *v13;\n        if ( (unsigned int)(v16 + 128) <= 0x17F )\n          v16 = (*__ctype_toupper_loc())[v16];\n        *(float *)&v24[104 * v15 - 260 + 4 * v16] = *(float *)&v24[104 * v15 - 260 + 4 * v16] + 1.0;\n        ++v13;\n        v15 = v16 - 65;\n        --v14;\n      }\n      while ( v14 );\n    }\n    sub_43DC80(v24, 26LL);\n    sub_43DC80(&v25, 26LL);\n    sub_43DC80(&v26, 26LL);\n    sub_43DC80(&v27, 26LL);\n    sub_43DC80(&v28, 26LL);\n    sub_43DC80(&v29, 26LL);\n    sub_43DC80(&v30, 26LL);\n    sub_43DC80(&v31, 26LL);\n    sub_43DC80(&v32, 26LL);\n    sub_43DC80(&v33, 26LL);\n    sub_43DC80(&v34, 26LL);\n    sub_43DC80(&v35, 26LL);\n    sub_43DC80(&v36, 26LL);\n    sub_43DC80(&v37, 26LL);\n    sub_43DC80(&v38, 26LL);\n    sub_43DC80(&v39, 26LL);\n    sub_43DC80(&v40, 26LL);\n    sub_43DC80(&v41, 26LL);\n    sub_43DC80(&v42, 26LL);\n    sub_43DC80(&v43, 26LL);\n    sub_43DC80(&v44, 26LL);\n    sub_43DC80(&v45, 26LL);\n    sub_43DC80(&v46, 26LL);\n    sub_43DC80(&v47, 26LL);\n    sub_43DC80(&v48, 26LL);\n    sub_43DC80(&v49, 26LL);\n    v17 = v23;\n    *v23 = v22;\n    v18 = v12;\n    if ( v12 < 2 )\n    {\n      v21 = 1LL;\n    }\n    else\n    {\n      v19 = v17 + 1;\n      v20 = (unsigned int)v12 - 1LL;\n      do\n      {\n        v11 = sub_438150(&v24[104 * v11], 26LL);\n        *v19++ = v11 + 65;\n        --v20;\n      }\n      while ( v20 );\n      v21 = v18;\n    }\n    v17[v21] = 0;\n    result = 1LL;\n  }\n  else\n  {\n    v4 = *__ctype_b_loc();\n    result = 0LL;\n    v6 = 0LL;\n    while ( v4[v2[v6]] & 0x400 )\n    {\n      if ( ++v6 >= v3 )\n        goto LABEL_5;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x431890L", 
            "funcEndAddr": "0x431c11L", 
            "funcName": "sub_431890"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_431C20(__int64 a1, const char *a2)\n{\n  const char *v2; // r15\n  __int64 v3; // r14\n  size_t v4; // rax\n  __int64 v5; // r8\n  __int64 v6; // rsi\n  signed __int64 v7; // rcx\n  signed __int64 v8; // rdi\n  char v9; // bp\n  char v10; // bp\n  __int64 v11; // rcx\n  char v12; // dl\n\n  v2 = a2;\n  v3 = a1;\n  v4 = strlen(a2);\n  if ( (signed int)v4 < 2 )\n  {\n    v5 = 0LL;\n    if ( !(v4 & 1) )\n      goto LABEL_13;\n    goto LABEL_12;\n  }\n  v5 = (signed int)v4 / 2;\n  if ( (v4 & 0xFFFFFFFE) == 2 )\n  {\n    v6 = 0LL;\n    if ( !((signed int)v4 / 2 & 1) )\n      goto LABEL_11;\nLABEL_10:\n    v11 = (signed int)v4 - 1 - (signed int)v6;\n    v12 = v2[v11];\n    *(_BYTE *)(v3 + v11) = v2[v6];\n    *(_BYTE *)(v3 + v6) = v12;\n    goto LABEL_11;\n  }\n  v7 = (v4 << 32) - 0x100000000LL;\n  v8 = (v4 << 32) - 0x200000000LL;\n  v6 = 0LL;\n  do\n  {\n    v9 = v2[v7 >> 32];\n    *(_BYTE *)(v3 + (v7 >> 32)) = v2[v6];\n    *(_BYTE *)(v3 + v6) = v9;\n    v10 = v2[v8 >> 32];\n    *(_BYTE *)(v3 + (v8 >> 32)) = v2[v6 + 1];\n    *(_BYTE *)(v3 + v6 + 1) = v10;\n    v6 += 2LL;\n    v8 -= 0x200000000LL;\n    v7 -= 0x200000000LL;\n  }\n  while ( v5 - ((signed int)v4 / 2 & 1) != v6 );\n  if ( (signed int)v4 / 2 & 1 )\n    goto LABEL_10;\nLABEL_11:\n  if ( v4 & 1 )\nLABEL_12:\n    *(_BYTE *)(v3 + v5) = v2[v5];\nLABEL_13:\n  *(_BYTE *)(v3 + (signed int)v4) = 0;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x431c20L", 
            "funcEndAddr": "0x431d38L", 
            "funcName": "sub_431C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_431D40(char *s, const char *a2, int a3, double a4)\n{\n  int v4; // ebp\n  signed __int64 v5; // rdx\n  signed int v6; // er12\n  signed __int64 v7; // r15\n  int v8; // eax\n  size_t v9; // rcx\n  int v10; // er14\n  int v11; // eax\n  signed __int64 v12; // r13\n  __int64 v13; // rax\n  char v14; // cl\n  int v16; // [rsp+0h] [rbp-58h]\n  int v17; // [rsp+4h] [rbp-54h]\n  size_t v18; // [rsp+8h] [rbp-50h]\n  signed __int64 v19; // [rsp+20h] [rbp-38h]\n\n  v16 = a3;\n  if ( s != a2 )\n    strcpy(s, a2);\n  v18 = strlen(s);\n  if ( (signed int)v18 > 0 )\n  {\n    v4 = ~v16;\n    v17 = ~(_DWORD)v18;\n    v5 = (signed int)v18;\n    v6 = -2;\n    v7 = 0LL;\n    do\n    {\n      v8 = ~(_DWORD)v18;\n      if ( v4 >= v17 )\n        v8 = v4;\n      v9 = v7 + v16;\n      v19 = v7 + v16;\n      if ( v7 + v16 > v5 )\n        v9 = v18;\n      if ( (signed __int64)((v9 << 32) - 0x100000000LL) >> 32 > v7 )\n      {\n        v10 = v6 - v8;\n        v11 = ~(_DWORD)v18;\n        if ( v4 >= v17 )\n          v11 = v4;\n        v12 = -2 - v11;\n        do\n        {\n          sub_437B60(s, a2);\n          v13 = (signed int)v7 + (signed int)((double)v10 * a4);\n          v14 = s[v13];\n          s[v13] = s[v12];\n          s[v12--] = v14;\n          --v10;\n        }\n        while ( v12 > v7 );\n      }\n      v4 -= v16;\n      v6 -= v16;\n      v7 += v16;\n      v5 = (signed int)v18;\n    }\n    while ( v19 < (signed int)v18 );\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x431d40L", 
            "funcEndAddr": "0x431e79L", 
            "funcName": "sub_431D40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_431E80(char *a1, char *a2, int a3, int a4, double a5)\n{\n  __int64 v5; // r14\n  unsigned int v6; // ebx\n  char *v7; // r12\n  char *v8; // r15\n  __int64 v9; // rbp\n  __int64 v10; // rcx\n  const char **v11; // rdx\n  __int64 v12; // rcx\n  __int64 v13; // r12\n  __int64 v14; // r13\n  __int64 v15; // rbp\n  __int64 v16; // rdx\n  char v17; // bl\n  __int64 v18; // rax\n  char v19; // bl\n  __int64 v20; // rax\n  char v21; // cl\n  bool v22; // zf\n  bool v23; // sf\n  unsigned __int8 v24; // of\n  unsigned int v26; // [rsp+0h] [rbp-34h]\n\n  LODWORD(v5) = a4;\n  v6 = a3;\n  v7 = a2;\n  v8 = a1;\n  if ( a1 != a2 && a3 > 0 )\n  {\n    v9 = 0LL;\n    do\n    {\n      a1 = *(char **)&v8[8 * v9];\n      a2 = *(char **)&v7[8 * v9];\n      strcpy(a1, a2);\n      ++v9;\n    }\n    while ( v6 != v9 );\n  }\n  if ( (signed int)v6 > 0 )\n  {\n    v10 = v6 & 3;\n    if ( (unsigned __int64)v6 - 1 < 3 )\n    {\n      a2 = 0LL;\n      if ( !(v6 & 3) )\n        goto LABEL_14;\n      goto LABEL_12;\n    }\n    a2 = 0LL;\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)&v8[8 * (_QWORD)a2] + (signed int)v5) = 0;\n      *(_BYTE *)(*(_QWORD *)&v8[8 * (_QWORD)a2 + 8] + (signed int)v5) = 0;\n      *(_BYTE *)(*(_QWORD *)&v8[8 * (_QWORD)a2 + 16] + (signed int)v5) = 0;\n      a1 = *(char **)&v8[8 * (_QWORD)a2 + 24];\n      a1[(signed int)v5] = 0;\n      a2 += 4;\n    }\n    while ( (char *)(v6 - v10) != a2 );\n    if ( v6 & 3 )\n    {\nLABEL_12:\n      v11 = (const char **)&v8[8 * (_QWORD)a2];\n      v12 = -v10;\n      do\n      {\n        a2 = (char *)*v11;\n        (*v11)[(signed int)v5] = 0;\n        ++v11;\n        ++v12;\n      }\n      while ( v12 );\n      goto LABEL_14;\n    }\n  }\nLABEL_14:\n  if ( (signed int)v5 >= 2 )\n  {\n    v5 = (signed int)v5;\n    v13 = v6 & 1;\n    v14 = v6 - v13;\n    v26 = v6;\n    do\n    {\n      sub_437B60(a1, a2);\n      a1 = (char *)(v5 - 1);\n      if ( (signed int)v6 > 0 )\n      {\n        a5 = a5 * (double)(signed int)v5;\n        v15 = (signed int)a5;\n        v16 = 0LL;\n        if ( v6 != 1 )\n        {\n          do\n          {\n            a2 = *(char **)&v8[8 * v16];\n            v17 = a2[v15];\n            a2[v15] = a1[(_QWORD)a2];\n            a1[*(_QWORD *)&v8[8 * v16]] = v17;\n            v18 = *(_QWORD *)&v8[8 * v16 + 8];\n            v19 = *(_BYTE *)(v18 + v15);\n            *(_BYTE *)(v18 + v15) = a1[v18];\n            a1[*(_QWORD *)&v8[8 * v16 + 8]] = v19;\n            v16 += 2LL;\n          }\n          while ( v14 != v16 );\n        }\n        if ( v13 )\n        {\n          v20 = *(_QWORD *)&v8[8 * v16];\n          v21 = *(_BYTE *)(v20 + v15);\n          *(_BYTE *)(v20 + v15) = a1[v20];\n          a1[*(_QWORD *)&v8[8 * v16]] = v21;\n        }\n        v6 = v26;\n      }\n      v24 = __OFSUB__(v5, 2LL);\n      v22 = v5 == 2;\n      v23 = v5-- - 2 < 0;\n    }\n    while ( !((unsigned __int8)(v23 ^ v24) | v22) );\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x431e80L", 
            "funcEndAddr": "0x432005L", 
            "funcName": "sub_431E80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_432010(__int64 a1, __int64 a2, __int64 a3, signed int a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // r13\n  double v6; // xmm0_8\n  __int64 v7; // r12\n  __int64 v8; // r14\n  __int64 v9; // r15\n  int v10; // ebx\n  __int64 v11; // rax\n  __int64 v12; // rcx\n  signed __int64 v13; // r8\n  signed __int64 v14; // rcx\n  __int64 v15; // rcx\n  __int64 v16; // rsi\n  __int64 v17; // rdx\n  _QWORD *v18; // rdx\n  __int64 v19; // rcx\n  signed int v21; // [rsp+Ch] [rbp-4Ch]\n  unsigned __int64 v22; // [rsp+10h] [rbp-48h]\n  double v23; // [rsp+18h] [rbp-40h]\n\n  v4 = a2;\n  v5 = a1;\n  v21 = a4;\n  if ( a4 > 0 )\n  {\n    v6 = (double)a4;\n    v23 = (double)a4;\n    v7 = a3 & 3;\n    v22 = (unsigned int)a3 - 1LL;\n    v8 = (unsigned int)a3 - v7;\n    v9 = 0LL;\n    do\n    {\n      v10 = a3;\n      sub_437B60(a1, a2);\n      LODWORD(a3) = v10;\n      if ( v10 > 0 )\n      {\n        v6 = v6 * v23;\n        v11 = (signed int)v6;\n        if ( v22 >= 3 )\n        {\n          v12 = 0LL;\n          do\n          {\n            *(_BYTE *)(*(_QWORD *)(v5 + 8 * v12) + v9) = *(_BYTE *)(*(_QWORD *)(v4 + 8 * v12) + v11);\n            *(_BYTE *)(*(_QWORD *)(v5 + 8 * v12 + 8) + v9) = *(_BYTE *)(*(_QWORD *)(v4 + 8 * v12 + 8) + v11);\n            *(_BYTE *)(*(_QWORD *)(v5 + 8 * v12 + 16) + v9) = *(_BYTE *)(*(_QWORD *)(v4 + 8 * v12 + 16) + v11);\n            a2 = *(_QWORD *)(v5 + 8 * v12 + 24);\n            *(_BYTE *)(a2 + v9) = *(_BYTE *)(*(_QWORD *)(v4 + 8 * v12 + 24) + v11);\n            v12 += 4LL;\n          }\n          while ( v8 != v12 );\n          if ( !v7 )\n            goto LABEL_12;\nLABEL_10:\n          v13 = v5 + 8 * v12;\n          v14 = v4 + 8 * v12;\n          a2 = 0LL;\n          do\n          {\n            a1 = *(_QWORD *)(v13 + 8 * a2);\n            *(_BYTE *)(a1 + v9) = *(_BYTE *)(*(_QWORD *)(v14 + 8 * a2++) + v11);\n          }\n          while ( v7 != a2 );\n          goto LABEL_12;\n        }\n        v12 = 0LL;\n        if ( v7 )\n          goto LABEL_10;\n      }\nLABEL_12:\n      ++v9;\n    }\n    while ( v9 != v21 );\n  }\n  if ( (signed int)a3 > 0 )\n  {\n    a3 = (unsigned int)a3;\n    v15 = a3 & 3;\n    if ( (unsigned __int64)(unsigned int)a3 - 1 < 3 )\n    {\n      v16 = 0LL;\n      if ( !(a3 & 3) )\n        return 1LL;\n      goto LABEL_20;\n    }\n    v17 = a3 - v15;\n    v16 = 0LL;\n    do\n    {\n      *(_BYTE *)(*(_QWORD *)(v5 + 8 * v16) + v21) = 0;\n      *(_BYTE *)(*(_QWORD *)(v5 + 8 * v16 + 8) + v21) = 0;\n      *(_BYTE *)(*(_QWORD *)(v5 + 8 * v16 + 16) + v21) = 0;\n      *(_BYTE *)(*(_QWORD *)(v5 + 8 * v16 + 24) + v21) = 0;\n      v16 += 4LL;\n    }\n    while ( v17 != v16 );\n    if ( v15 )\n    {\nLABEL_20:\n      v18 = (_QWORD *)(v5 + 8 * v16);\n      v19 = -v15;\n      do\n      {\n        *(_BYTE *)(*v18 + v21) = 0;\n        ++v18;\n        ++v19;\n      }\n      while ( v19 );\n      return 1LL;\n    }\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x432010L", 
            "funcEndAddr": "0x4321d5L", 
            "funcName": "sub_432010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4321E0(char *dest, char *a2, char *s, char *src, double a5)\n{\n  char *v5; // r14\n  char *v6; // r15\n  unsigned int v7; // ebp\n  signed __int64 v8; // r13\n  __int64 v9; // r12\n  signed int *v10; // r13\n  __int64 v11; // r10\n  __int64 v12; // rcx\n  signed __int64 v13; // r8\n  __int64 v14; // rdi\n  _DWORD *v15; // rbp\n  char *v16; // rax\n  char v17; // bl\n  unsigned __int8 v18; // dl\n  __int64 v19; // rsi\n  char v20; // r9\n  unsigned __int8 v21; // al\n  unsigned __int64 v22; // rbp\n  signed __int64 v23; // r13\n  __int64 v24; // rax\n  __int64 v25; // rcx\n  char v26; // dl\n  signed int v27; // er13\n  signed __int64 v28; // rbp\n  __int64 v29; // rax\n  __int64 v30; // rcx\n  char v31; // dl\n  __int64 v32; // rdi\n  signed __int64 v33; // rbp\n  __int64 v34; // rax\n  __int64 v35; // rcx\n  char v36; // dl\n  char v37; // r8\n  char *v39; // [rsp+0h] [rbp-58h]\n  signed int *v40; // [rsp+0h] [rbp-58h]\n  _DWORD *ptr; // [rsp+8h] [rbp-50h]\n  char *v42; // [rsp+10h] [rbp-48h]\n  __int64 v43; // [rsp+10h] [rbp-48h]\n  signed int v44; // [rsp+18h] [rbp-40h]\n  __int64 v45; // [rsp+20h] [rbp-38h]\n\n  v5 = a2;\n  v6 = dest;\n  v42 = src;\n  v39 = s;\n  if ( dest != s )\n  {\n    strcpy(dest, s);\n    s = v39;\n    src = v42;\n  }\n  if ( a2 != src )\n  {\n    strcpy(a2, src);\n    s = v39;\n  }\n  v7 = strlen(s);\n  v8 = 4LL * (signed int)v7;\n  ptr = (_DWORD *)sub_4382F0(\"shuffle.c\", 572LL, 4LL * (signed int)v7);\n  v9 = sub_4382F0(\"shuffle.c\", 573LL, v8);\n  v10 = (signed int *)sub_4382F0(\"shuffle.c\", 574LL, v8);\n  if ( (signed int)v7 > 0 )\n  {\n    v45 = v9;\n    v11 = v7;\n    v12 = 0LL;\n    v13 = -9223372036854751231LL;\n    v14 = 0LL;\n    v44 = 0;\n    LODWORD(v9) = 0;\n    v15 = ptr;\n    v16 = v39;\n    while ( 1 )\n    {\n      v17 = v16[v12];\n      v18 = v16[v12] - 32;\n      v19 = v18;\n      if ( v18 <= 0x3Fu && _bittest64(&v13, v18) || v17 == 126 )\n      {\n        v20 = v42[v12];\n        v21 = v42[v12] - 32;\n        if ( v21 <= 0x3Fu && _bittest64(&v13, v21) || v20 == 126 )\n        {\n          v16 = v39;\n          goto LABEL_31;\n        }\n        v16 = v39;\n        if ( v18 <= 0x3Fu && _bittest64(&v13, v18) || v17 == 126 )\n          goto LABEL_29;\n      }\n      else\n      {\n        v20 = v42[v12];\n      }\n      v22 = (unsigned __int8)(v20 - 32);\n      if ( (unsigned __int8)v22 <= 0x3Fu && _bittest64(&v13, v22) || v20 == 126 )\n      {\n        if ( v18 <= 0x3Fu && _bittest64(&v13, v18) )\n        {\nLABEL_29:\n          v14 = (signed int)v14;\n          v10[v14] = v12;\n          v14 = (unsigned int)(v14 + 1);\n        }\n        else if ( (unsigned __int8)(v20 - 32) <= 0x3Fu && _bittest64(&v13, v22) || v20 == 126 )\n        {\n          *(_DWORD *)(v45 + 4LL * v44) = v12;\n          v16 = v39;\n          ++v44;\n        }\n        v15 = ptr;\n        goto LABEL_31;\n      }\n      v9 = (signed int)v9;\n      v15 = ptr;\n      ptr[v9] = v12;\n      LODWORD(v9) = v9 + 1;\nLABEL_31:\n      if ( v11 == ++v12 )\n      {\n        v43 = v14;\n        v40 = v10;\n        if ( (signed int)v9 >= 2 )\n        {\n          v23 = (signed int)v9 + 1LL;\n          do\n          {\n            sub_437B60(v14, v19);\n            v24 = (signed int)((double)(signed int)v9 * a5);\n            v25 = (signed int)v15[v24];\n            v26 = v6[v25];\n            v14 = (unsigned __int8)v5[v25];\n            v6[v25] = v6[v15[v23 - 2]];\n            v19 = (signed int)v15[v24];\n            v5[v19] = v5[v15[v23 - 2]];\n            v15[v24] = v15[v23 - 2];\n            v6[v15[v23 - 2]] = v26;\n            v5[v15[v23 - 2]] = v14;\n            v15[v24] = v15[v23-- - 2];\n            LODWORD(v9) = v9 - 1;\n          }\n          while ( v23 > 2 );\n        }\n        v27 = v44;\n        v9 = v45;\n        if ( v44 >= 2 )\n        {\n          v28 = v44 + 1LL;\n          do\n          {\n            sub_437B60(v14, v19);\n            v29 = (signed int)((double)v27 * a5);\n            v30 = *(signed int *)(v45 + 4 * v29);\n            v31 = v6[v30];\n            v14 = (unsigned __int8)v5[v30];\n            v6[v30] = v6[*(signed int *)(v45 + 4 * v28 - 8)];\n            v5[*(signed int *)(v45 + 4 * v29)] = v5[*(signed int *)(v45 + 4 * v28 - 8)];\n            v19 = *(unsigned int *)(v45 + 4 * v28 - 8);\n            *(_DWORD *)(v45 + 4 * v29) = v19;\n            v6[*(signed int *)(v45 + 4 * v28 - 8)] = v31;\n            v5[*(signed int *)(v45 + 4 * v28 - 8)] = v14;\n            *(_DWORD *)(v45 + 4 * v28-- - 8) = v30;\n            --v27;\n          }\n          while ( v28 > 2 );\n        }\n        v32 = v43;\n        v10 = v40;\n        if ( (signed int)v43 >= 2 )\n        {\n          v33 = (signed int)v43 + 1LL;\n          do\n          {\n            sub_437B60(v32, v19);\n            v34 = (signed int)((double)(signed int)v32 * a5);\n            v35 = v40[v34];\n            v36 = v6[v35];\n            v37 = v5[v35];\n            v6[v35] = v6[v40[v33 - 2]];\n            v5[v40[v34]] = v5[v40[v33 - 2]];\n            v19 = (unsigned int)v40[v33 - 2];\n            v40[v34] = v19;\n            v6[v40[v33 - 2]] = v36;\n            v5[v40[v33 - 2]] = v37;\n            v40[v33-- - 2] = v35;\n            v32 = (unsigned int)(v32 - 1);\n          }\n          while ( v33 > 2 );\n        }\n        break;\n      }\n    }\n  }\n  free(ptr);\n  free((void *)v9);\n  free(v10);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x4321e0L", 
            "funcEndAddr": "0x4325a8L", 
            "funcName": "sub_4321E0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4325B0(char *format, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n\n  va_start(va, format);\n  fwrite(\"\\nFATAL: \", 8uLL, 1uLL, stderr);\n  vfprintf(stderr, format, va);\n  fputc(10, stderr);\n  fflush(stderr);\n  exit(1);\n}\n", 
            "funcStartAddr": "0x4325b0L", 
            "funcEndAddr": "0x432688L", 
            "funcName": "sub_4325B0"
        }, 
        {
            "decompiledFuncCode": "int sub_432690(char *format, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n\n  va_start(va, format);\n  fwrite(\"WARNING: \", 9uLL, 1uLL, stderr);\n  vfprintf(stderr, format, va);\n  fputc(10, stderr);\n  return fflush(stderr);\n}\n", 
            "funcStartAddr": "0x432690L", 
            "funcEndAddr": "0x432767L", 
            "funcName": "sub_432690"
        }, 
        {
            "decompiledFuncCode": "void __usercall __noreturn sub_432770(__int64 a1@<rax>, __int64 a2@<rdi>, unsigned int a3@<esi>)\n{\n  fprintf(stderr, \"\\nPANIC [%s line %d] \", a2, a3, a1);\n  perror(\"Unusual error\");\n  exit(1);\n}\n", 
            "funcStartAddr": "0x432770L", 
            "funcEndAddr": "0x43279dL", 
            "funcName": "sub_432770"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4327A0(char *a1)\n{\n  return sub_4327B0(a1);\n}\n", 
            "funcStartAddr": "0x4327a0L", 
            "funcEndAddr": "0x4327a7L", 
            "funcName": "sub_4327A0"
        }, 
        {
            "decompiledFuncCode": "FILE **__fastcall sub_4327B0(char *s, signed int a2, char *a3, int a4)\n{\n  int v4; // ebp\n  char *v5; // r15\n  signed int v6; // er14\n  char *v7; // r12\n  FILE **v8; // rbx\n  FILE *v9; // rax\n  __int64 v10; // rbp\n  FILE *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rsi\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = s;\n  v8 = (FILE **)sub_4382F0(\"sqio.c\", 101LL, 176LL);\n  *((_DWORD *)v8 + 9) = v4;\n  *(_OWORD *)(v8 + 11) = xmmword_4403A0;\n  v8[13] = 0LL;\n  if ( !strcmp(s, \"-\") )\n  {\n    *v8 = (FILE *)stdin;\n    v7 = \"[STDIN]\";\n    LODWORD(v10) = 1;\n  }\n  else\n  {\n    v9 = fopen(s, \"r\");\n    *v8 = v9;\n    LODWORD(v10) = 0;\n    if ( !v9 )\n    {\n      v10 = 0LL;\n      v11 = sub_427D00(s, v5, 0LL);\n      *v8 = v11;\n      if ( !v11 )\n        return (FILE **)v10;\n    }\n  }\n  *((_DWORD *)v8 + 38) = v10;\n  *((_DWORD *)v8 + 37) = 0;\n  v8[1] = (FILE *)sub_438810(v7);\n  if ( !a2 )\n  {\n    if ( *((_DWORD *)v8 + 38) == 1 || *((_DWORD *)v8 + 37) )\n      sub_4325B0(\"Can't autodetect sequence file format from a stdin or gzip pipe\", 0xFFFFFFFFLL);\n    v6 = sub_434F70(*v8);\n    if ( !v6 )\n      sub_4325B0(\"Can't determine format of sequence file %s\", v8[1]);\n  }\n  *((_OWORD *)v8 + 10) = 0LL;\n  *((_DWORD *)v8 + 36) = v6;\n  *((_DWORD *)v8 + 4) = 0;\n  v8[3] = 0LL;\n  *((_DWORD *)v8 + 8) = 0;\n  if ( v6 < 101 )\n  {\n    v14 = *((unsigned int *)v8 + 9);\n    if ( (signed int)v14 >= 0 && (unsigned int)sub_439950(*v8, v14, v8 + 5) )\n      sub_4325B0(\"SSIGetFilePosition() failed\");\n    if ( !sub_438520(v8 + 3, v8 + 4, *v8) )\n      LOBYTE(v8[3]->_flags) = 0;\n    ++*((_DWORD *)v8 + 4);\n  }\n  else\n  {\n    v12 = sub_4382F0(\"sqio.c\", 190LL, 64LL);\n    v8[21] = (FILE *)v12;\n    *(_DWORD *)(v12 + 52) = *((_DWORD *)v8 + 38);\n    *(_DWORD *)(v12 + 48) = *((_DWORD *)v8 + 37);\n    *(_OWORD *)v12 = *(_OWORD *)v8;\n    *(_DWORD *)(v12 + 56) = *((_DWORD *)v8 + 36);\n    *(_DWORD *)(v12 + 16) = *((_DWORD *)v8 + 4);\n    *(_QWORD *)(v12 + 24) = 0LL;\n    *(_DWORD *)(v12 + 32) = 0;\n    v13 = sub_42C8E0(v12, 190LL);\n    v8[20] = (FILE *)v13;\n    if ( !v13 )\n      sub_4325B0(\"Failed to read any alignment data from file %s\", v8[1]);\n    *(_DWORD *)(v13 + 352) = 0;\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x4327b0L", 
            "funcEndAddr": "0x4329c4L", 
            "funcName": "sub_4327B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_432B30(void *ptr)\n{\n  void *v1; // rbx\n  void **v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v1 = ptr;\n  v2 = (void **)*((_QWORD *)ptr + 21);\n  if ( v2 )\n  {\n    if ( *((_QWORD *)v1 + 20) )\n    {\n      sub_42B580(*((void **)v1 + 20));\n      v2 = (void **)*((_QWORD *)v1 + 21);\n    }\n    if ( v2[3] )\n    {\n      free(v2[3]);\n      v2 = (void **)*((_QWORD *)v1 + 21);\n    }\n    free(v2);\n  }\n  else if ( !*((_DWORD *)v1 + 38) )\n  {\n    fclose(*(FILE **)v1);\n  }\n  v3 = (void *)*((_QWORD *)v1 + 3);\n  if ( v3 )\n    free(v3);\n  v4 = (void *)*((_QWORD *)v1 + 1);\n  if ( v4 )\n    free(v4);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x432b30L", 
            "funcEndAddr": "0x432bb0L", 
            "funcName": "sub_432B30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_432BB0(void *a1, void **a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n    free(a1);\n  v2 = *(_DWORD *)a2;\n  if ( v2 & 0x200 )\n  {\n    free(a2[43]);\n    v2 = *(_DWORD *)a2;\n  }\n  if ( v2 & 0x400 )\n    free(a2[44]);\n}\n", 
            "funcStartAddr": "0x432bb0L", 
            "funcEndAddr": "0x432be7L", 
            "funcName": "sub_432BB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_432BF0(__int64 a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // er12\n  unsigned int v4; // er14\n  const char *v5; // rbp\n  bool v6; // zf\n  int v7; // eax\n  int v8; // ebx\n  const unsigned __int16 *v9; // rax\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  size_t v13; // rax\n  size_t v14; // rbx\n\n  v3 = a3;\n  v4 = 1;\n  if ( a2 )\n  {\n    v5 = (const char *)(a2 - 1);\n    do\n      v6 = (v5++)[1] == 32;\n    while ( v6 );\n    v7 = strlen(v5);\n    v8 = v7 - 1;\n    if ( v7 - 1 >= 0 )\n    {\n      v9 = *__ctype_b_loc();\n      while ( v9[v5[v8]] & 0x2000 )\n      {\n        if ( --v8 < 0 )\n        {\n          v7 = 0;\n          goto LABEL_10;\n        }\n      }\n      v7 = v8 + 1;\n    }\nLABEL_10:\n    v5[v7] = 0;\n    switch ( v3 )\n    {\n      case 1u:\n        if ( *v5 != 45 )\n        {\n          strncpy((char *)(a1 + 4), v5, 0x3FuLL);\n          *(_BYTE *)(a1 + 67) = 0;\n          *(_BYTE *)a1 |= 1u;\n        }\n        return v4;\n      case 2u:\n        if ( *v5 != 45 )\n        {\n          strncpy((char *)(a1 + 68), v5, 0x3FuLL);\n          *(_BYTE *)(a1 + 131) = 0;\n          *(_BYTE *)a1 |= 2u;\n        }\n        return v4;\n      case 3u:\n      case 5u:\n      case 6u:\n      case 7u:\n      case 9u:\n      case 0xAu:\n      case 0xBu:\n      case 0xCu:\n      case 0xDu:\n      case 0xEu:\n      case 0xFu:\n      case 0x11u:\n      case 0x12u:\n      case 0x13u:\n      case 0x14u:\n      case 0x15u:\n      case 0x16u:\n      case 0x17u:\n      case 0x18u:\n      case 0x19u:\n      case 0x1Au:\n      case 0x1Bu:\n      case 0x1Cu:\n      case 0x1Du:\n      case 0x1Eu:\n      case 0x1Fu:\n        goto LABEL_17;\n      case 4u:\n        if ( *v5 != 45 )\n        {\n          strncpy((char *)(a1 + 132), v5, 0x3FuLL);\n          *(_BYTE *)(a1 + 195) = 0;\n          *(_BYTE *)a1 |= 4u;\n        }\n        return v4;\n      case 8u:\n        if ( *v5 != 45 )\n        {\n          if ( *(_BYTE *)a1 & 8 )\n          {\n            v13 = strlen((const char *)(a1 + 196));\n            if ( (signed int)v13 <= 125 )\n            {\n              v14 = v13 << 32;\n              strncat((char *)(a1 + 196), \" \", (signed __int64)(545460846592LL - (v13 << 32)) >> 32);\n              strncat((char *)(a1 + 196), v5, (signed __int64)(541165879296LL - v14) >> 32);\n            }\n          }\n          else\n          {\n            strncpy((char *)(a1 + 196), v5, 0x7FuLL);\n          }\n          *(_BYTE *)(a1 + 323) = 0;\n          *(_BYTE *)a1 |= 8u;\n        }\n        return v4;\n      case 0x10u:\n        if ( !(unsigned int)sub_43C400(v5, a2) )\n          goto LABEL_31;\n        v12 = strtol(v5, 0LL, 10);\n        *(_DWORD *)(a1 + 328) = v12;\n        if ( v12 )\n          *(_BYTE *)a1 |= 0x10u;\n        return v4;\n      case 0x20u:\n        if ( !(unsigned int)sub_43C400(v5, a2) )\n          goto LABEL_31;\n        v11 = strtol(v5, 0LL, 10);\n        *(_DWORD *)(a1 + 332) = v11;\n        if ( v11 )\n          *(_BYTE *)a1 |= 0x20u;\n        break;\n      default:\n        if ( v3 != 256 )\nLABEL_17:\n          sub_4325B0(\"Invalid flag %d to SetSeqinfoString()\", v3);\n        if ( (unsigned int)sub_43C400(v5, a2) )\n        {\n          v10 = strtol(v5, 0LL, 10);\n          *(_DWORD *)(a1 + 336) = v10;\n          if ( v10 )\n            *(_BYTE *)(a1 + 1) |= 1u;\n        }\n        else\n        {\nLABEL_31:\n          dword_464008 = 5;\n          v4 = 0;\n        }\n        break;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x432bf0L", 
            "funcEndAddr": "0x432e62L", 
            "funcName": "sub_432BF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_432E70(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = *a2;\n  result = *a2;\n  if ( result & 1 )\n  {\n    strcpy((char *)(a1 + 4), (const char *)a2 + 4);\n    result = *a2;\n    if ( !(result & 2) )\n    {\nLABEL_3:\n      if ( !(result & 4) )\n        goto LABEL_4;\n      goto LABEL_16;\n    }\n  }\n  else if ( !(result & 2) )\n  {\n    goto LABEL_3;\n  }\n  strcpy((char *)(a1 + 68), (const char *)a2 + 68);\n  result = *a2;\n  if ( !(result & 4) )\n  {\nLABEL_4:\n    if ( !(result & 8) )\n      goto LABEL_5;\n    goto LABEL_17;\n  }\nLABEL_16:\n  strcpy((char *)(a1 + 132), (const char *)a2 + 132);\n  result = *a2;\n  if ( !(result & 8) )\n  {\nLABEL_5:\n    if ( !(result & 0x40) )\n      goto LABEL_6;\n    goto LABEL_18;\n  }\nLABEL_17:\n  strcpy((char *)(a1 + 196), (const char *)a2 + 196);\n  result = *a2;\n  if ( !(result & 0x40) )\n  {\nLABEL_6:\n    if ( !(result & 0x10) )\n      goto LABEL_7;\n    goto LABEL_19;\n  }\nLABEL_18:\n  *(_DWORD *)(a1 + 324) = a2[81];\n  if ( !(result & 0x10) )\n  {\nLABEL_7:\n    if ( !(result & 0x20) )\n      goto LABEL_8;\n    goto LABEL_20;\n  }\nLABEL_19:\n  *(_DWORD *)(a1 + 328) = a2[82];\n  if ( !(result & 0x20) )\n  {\nLABEL_8:\n    if ( !(result & 0x100) )\n      goto LABEL_9;\n    goto LABEL_21;\n  }\nLABEL_20:\n  *(_DWORD *)(a1 + 332) = a2[83];\n  if ( !(result & 0x100) )\n  {\nLABEL_9:\n    if ( (result & 0x80u) == 0LL )\n      goto LABEL_10;\n    goto LABEL_22;\n  }\nLABEL_21:\n  *(_DWORD *)(a1 + 336) = a2[84];\n  if ( (result & 0x80u) == 0LL )\n  {\nLABEL_10:\n    if ( !(result & 0x200) )\n      goto LABEL_11;\n    goto LABEL_23;\n  }\nLABEL_22:\n  *(_DWORD *)(a1 + 340) = a2[85];\n  if ( !(result & 0x200) )\n  {\nLABEL_11:\n    if ( !(result & 0x400) )\n      return result;\n    goto LABEL_12;\n  }\nLABEL_23:\n  *(_QWORD *)(a1 + 344) = sub_4381A0(*((char **)a2 + 43));\n  result = *a2;\n  if ( result & 0x400 )\n  {\nLABEL_12:\n    result = sub_4381A0(*((char **)a2 + 44));\n    *(_QWORD *)(a1 + 352) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x432e70L", 
            "funcEndAddr": "0x432fd9L", 
            "funcName": "sub_432E70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_433080(char *a1, int a2)\n{\n  char v2; // bp\n  char *v3; // rbx\n  signed __int64 v4; // r14\n  char *v5; // rbx\n\n  v2 = *a1;\n  if ( a2 )\n  {\n    if ( v2 )\n    {\n      v3 = a1 + 1;\n      v4 = -9223372036854751231LL;\n      do\n      {\n        if ( !memchr(\"ACGTUNRYMKSWHBVDacgtunrymkswhbvd\", v2, 0x21uLL)\n          && ((unsigned __int8)(v2 - 32) > 0x3Fu || !_bittest64(&v4, (unsigned __int8)(v2 - 32)))\n          && v2 != 126 )\n        {\n          *(v3 - 1) = 78;\n        }\n        v2 = *v3++;\n      }\n      while ( v2 );\n    }\n  }\n  else if ( v2 )\n  {\n    v5 = a1 + 1;\n    do\n    {\n      if ( !memchr(\"ACGTUNRYMKSWHBVDacgtunrymkswhbvd\", v2, 0x21uLL) )\n        *(v5 - 1) = 78;\n      v2 = *v5++;\n    }\n    while ( v2 );\n  }\n}\n", 
            "funcStartAddr": "0x433080L", 
            "funcEndAddr": "0x43312dL", 
            "funcName": "sub_433080"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_433130(_QWORD *a1, __int64 a2, _QWORD *a3, __int64 a4)\n{\n  __int64 v4; // r13\n  _QWORD *v5; // r15\n  _QWORD *v6; // r12\n  __int64 v7; // rax\n  int v8; // ecx\n  const char *v9; // rdi\n  __int64 v10; // rbx\n  const char *v11; // rbx\n  bool v12; // zf\n  int v13; // ebp\n  int v14; // er14\n  const unsigned __int16 *v15; // rax\n  bool v16; // sf\n  __int64 v17; // rax\n  __int64 v18; // rcx\n  __int64 v19; // rbx\n  const char *v20; // rbx\n  int v21; // ebp\n  int v22; // er14\n  const unsigned __int16 *v23; // rax\n  __int64 v24; // rax\n  __int64 v25; // rcx\n  __int64 v26; // rsi\n  __int64 v27; // rdx\n  __int64 v28; // rcx\n  const char *v29; // rdx\n  __int64 v30; // rdx\n  __int64 v31; // rcx\n  const char *v32; // rdx\n  unsigned int *v33; // r12\n  _QWORD *v34; // rdx\n  int v35; // ecx\n  _BOOL8 result; // rax\n  unsigned int v37; // er14\n  void *v38; // rax\n  signed int v39; // ecx\n  signed __int64 v40; // rbp\n  char **v41; // r15\n  char v42; // al\n  char *v43; // rbp\n  const char *v44; // rbp\n  int v45; // ebx\n  int v46; // er14\n  const unsigned __int16 *v47; // rax\n  __int64 v48; // rsi\n  const char **v49; // r13\n  __int64 v50; // r15\n  int v51; // eax\n  bool v52; // cl\n  int v53; // eax\n  char *v54; // rbx\n  _BYTE *v55; // r14\n  const char *v56; // rbx\n  int v57; // ebp\n  int v58; // er15\n  const unsigned __int16 *v59; // rax\n  signed __int64 v60; // rbp\n  signed __int64 v61; // r14\n  signed int v62; // er15\n  __int64 v63; // rsi\n  const char *v64; // rbx\n  const char *v65; // rbx\n  int v66; // eax\n  __int64 v67; // rbx\n  __int64 v68; // rdi\n  __int64 v69; // rsi\n  char *v70; // rax\n  char *v71; // rax\n  const char *v72; // rbx\n  int v73; // ebp\n  const unsigned __int16 *v74; // rax\n  const char *v75; // rcx\n  char *v76; // rax\n  const char *v77; // rbx\n  int v78; // ebp\n  const unsigned __int16 *v79; // rax\n  const char *v80; // rcx\n  _DWORD *v81; // rax\n  int v82; // ecx\n  __int64 v83; // rsi\n  __int64 v84; // rsi\n  const char **i; // r13\n  __int64 v86; // rsi\n  char *v87; // r14\n  const char *v88; // rbp\n  int v89; // ebx\n  int v90; // er15\n  const unsigned __int16 *v91; // rax\n  _BYTE *v92; // r15\n  const char *v93; // r14\n  int v94; // ebx\n  int v95; // ebp\n  const unsigned __int16 *v96; // rax\n  signed __int64 v97; // r15\n  __int64 v98; // rsi\n  const char *v99; // rbx\n  const char *v100; // rbx\n  char *v101; // rax\n  char *v102; // rax\n  const char *v103; // rbx\n  int v104; // ebp\n  const unsigned __int16 *v105; // rax\n  const char *v106; // rcx\n  _BYTE *j; // rax\n  char **v108; // r15\n  const char *v109; // rbx\n  char *v110; // rax\n  char *v111; // rax\n  const char *v112; // rbx\n  int v113; // eax\n  int v114; // ebp\n  int v115; // eax\n  int v116; // ST18_4\n  const unsigned __int16 *v117; // rax\n  const char *v118; // rcx\n  int v119; // ebx\n  __int64 v120; // rsi\n  __int64 v121; // rsi\n  const char **v122; // r15\n  signed __int64 v123; // r14\n  const char *v124; // rbx\n  __int64 v125; // rsi\n  char *v126; // rax\n  const char *v127; // rbx\n  int v128; // ebp\n  const unsigned __int16 *v129; // rax\n  const char *v130; // rcx\n  _BYTE *v131; // rdi\n  char *v132; // rbx\n  _BYTE *v133; // r14\n  const char *v134; // rbx\n  int v135; // ebp\n  int v136; // er15\n  const unsigned __int16 *v137; // rax\n  char *v138; // rax\n  _BYTE **v139; // rbx\n  __int64 v140; // rsi\n  _BYTE **v141; // r15\n  char *v142; // rbp\n  const char *v143; // rbp\n  int v144; // ebx\n  int v145; // er13\n  const unsigned __int16 *v146; // rax\n  char *v147; // rax\n  __int64 v148; // rsi\n  const char **k; // r13\n  __int64 v150; // rsi\n  char *v151; // r14\n  const char *v152; // rbp\n  int v153; // ebx\n  int v154; // er15\n  const unsigned __int16 *v155; // rax\n  _BYTE *v156; // r15\n  const char *v157; // r14\n  int v158; // ebx\n  int v159; // ebp\n  const unsigned __int16 *v160; // rax\n  signed __int64 v161; // r15\n  __int64 v162; // rsi\n  const char *v163; // rbx\n  const char *v164; // rbx\n  char *v165; // rax\n  const char *v166; // rbx\n  int v167; // ebp\n  const unsigned __int16 *v168; // rax\n  const char *v169; // rcx\n  __int64 v170; // rsi\n  _DWORD *v171; // rax\n  int v172; // ecx\n  __int64 v173; // rsi\n  _QWORD *v174; // r13\n  _BYTE *v175; // r14\n  const char *v176; // rbx\n  int v177; // ebp\n  int v178; // er15\n  const unsigned __int16 *v179; // rax\n  unsigned int v180; // er14\n  char v181; // bp\n  _DWORD *v182; // rax\n  int v183; // ecx\n  __int64 v184; // rsi\n  __int64 v185; // rsi\n  _BYTE *v186; // r15\n  const char *v187; // rbx\n  int v188; // ebp\n  int v189; // er14\n  const unsigned __int16 *v190; // rax\n  __int64 v191; // rsi\n  void *v192; // rax\n  size_t v193; // rbp\n  __int64 v194; // rsi\n  signed __int64 v195; // [rsp+0h] [rbp-78h]\n  signed __int64 v196; // [rsp+8h] [rbp-70h]\n  _BYTE *v197; // [rsp+8h] [rbp-70h]\n  _BYTE *v198; // [rsp+8h] [rbp-70h]\n  _BYTE *v199; // [rsp+8h] [rbp-70h]\n  _BYTE *v200; // [rsp+8h] [rbp-70h]\n  _BYTE *v201; // [rsp+8h] [rbp-70h]\n  unsigned int *v202; // [rsp+10h] [rbp-68h]\n  signed __int64 v203; // [rsp+18h] [rbp-60h]\n  _BYTE *v204; // [rsp+18h] [rbp-60h]\n  _BYTE *v205; // [rsp+18h] [rbp-60h]\n  signed __int64 v206; // [rsp+20h] [rbp-58h]\n  _QWORD *v207; // [rsp+20h] [rbp-58h]\n  unsigned int *v208; // [rsp+28h] [rbp-50h]\n  _BYTE *v209; // [rsp+30h] [rbp-48h]\n  _BYTE *v210; // [rsp+30h] [rbp-48h]\n  __int64 v211; // [rsp+38h] [rbp-40h]\n  _QWORD *v212; // [rsp+40h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a1;\n  dword_464008 = 0;\n  if ( *((_DWORD *)a1 + 36) < 101 )\n  {\n    v35 = feof((FILE *)*a1);\n    result = 0LL;\n    if ( v35 )\n      return result;\n    v37 = *((_DWORD *)a1 + 9);\n    v212 = v5;\n    if ( v37 == -1 )\n    {\n      v38 = calloc(0x1F5uLL, 1uLL);\n      v39 = 500;\n    }\n    else\n    {\n      v38 = 0LL;\n      v39 = 0;\n    }\n    a1[14] = v38;\n    *((_DWORD *)a1 + 35) = v39;\n    *((_DWORD *)a1 + 34) = 0;\n    a1[15] = v4;\n    *(_DWORD *)v4 = 0;\n    v202 = (unsigned int *)((char *)a1 + 36);\n    v207 = a1 + 14;\n    v195 = (signed __int64)(a1 + 15);\n    v211 = v4;\n    v208 = (unsigned int *)(a1 + 17);\n    switch ( *((_DWORD *)a1 + 36) )\n    {\n      case 1:\n        v40 = (signed __int64)(a1 + 5);\n        v41 = (char **)(a1 + 3);\n        if ( (v37 & 0x80000000) == 0 )\n          goto LABEL_43;\n        while ( 1 )\n        {\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **v41 = 0;\n          ++*((_DWORD *)a1 + 4);\n          if ( feof((FILE *)*a1) )\n            break;\n          v42 = **v41;\n          if ( v42 != 59 )\n          {\n            if ( v42 )\n              break;\n          }\n          v37 = *v202;\n          if ( (*v202 & 0x80000000) == 0 )\n          {\nLABEL_43:\n            if ( (unsigned int)sub_439950(*a1, v37, a1 + 5) )\n              sub_4325B0(\"SSIGetFilePosition() failed\", v37, v195);\n          }\n        }\n        if ( feof((FILE *)*a1) )\n          goto LABEL_64;\n        v43 = strtok(*v41, \"\\n\\t \");\n        if ( !v43 )\n          goto LABEL_62;\n        v195 = *(_QWORD *)v195;\n        v44 = v43 - 1;\n        do\n          v12 = (v44++)[1] == 32;\n        while ( v12 );\n        v45 = strlen(v44);\n        v46 = v45 - 1;\n        if ( v45 - 1 < 0 )\n          goto LABEL_60;\n        v47 = *__ctype_b_loc();\n        do\n        {\n          if ( !(v47[v44[v46]] & 0x2000) )\n            goto LABEL_60;\n          --v46;\n          v16 = v45-- - 2 < 0;\n        }\n        while ( !v16 );\n        v45 = 0;\nLABEL_60:\n        v44[v45] = 0;\n        if ( *v44 != 45 )\n        {\n          strncpy((char *)(v195 + 4), v44, 0x3FuLL);\n          *(_BYTE *)(v195 + 67) = 0;\n          *(_BYTE *)v195 |= 1u;\n        }\nLABEL_62:\n        sub_436B40(0LL, sub_436C90, a1);\n        v40 = (signed __int64)(a1 + 5);\nLABEL_64:\n        while ( !feof((FILE *)*a1) && **v41 != 59 )\n        {\n          v48 = *v202;\n          if ( (signed int)v48 >= 0 && (unsigned int)sub_439950(*a1, v48, v40) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **v41 = 0;\n          ++*((_DWORD *)a1 + 4);\n        }\n        goto LABEL_450;\n      case 2:\n        v49 = (const char **)(a1 + 3);\n        v50 = a1[3];\n        v51 = strncmp((const char *)a1[3], \"LOCUS\", 5uLL);\n        v52 = (v37 & 0x80000000) == 0;\n        if ( v51 )\n        {\n          do\n          {\n            if ( v52 && (unsigned int)sub_439950(*a1, v37, a1 + 5) )\n              sub_4325B0(\"SSIGetFilePosition() failed\", v37, v195);\n            if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n              **v49 = 0;\n            ++*((_DWORD *)a1 + 4);\n            v50 = a1[3];\n            v53 = strncmp((const char *)a1[3], \"LOCUS\", 5uLL);\n            v37 = *((_DWORD *)a1 + 9);\n            v52 = (v37 & 0x80000000) == 0;\n          }\n          while ( v53 );\n        }\n        if ( v52 )\n          *(_OWORD *)(a1 + 7) = *(_OWORD *)(a1 + 5);\n        v54 = strtok((char *)(v50 + 12), \"\\n\\t \");\n        if ( !v54 )\n          goto LABEL_90;\n        v55 = *(_BYTE **)v195;\n        v56 = v54 - 1;\n        do\n          v12 = (v56++)[1] == 32;\n        while ( v12 );\n        v57 = strlen(v56);\n        v58 = v57 - 1;\n        if ( v57 - 1 < 0 )\n          goto LABEL_88;\n        v59 = *__ctype_b_loc();\n        while ( v59[v56[v58]] & 0x2000 )\n        {\n          --v58;\n          v16 = v57-- - 2 < 0;\n          if ( v16 )\n          {\n            v57 = 0;\n            break;\n          }\n        }\nLABEL_88:\n        v56[v57] = 0;\n        if ( *v56 != 45 )\n        {\n          strncpy(v55 + 4, v56, 0x3FuLL);\n          v55[67] = 0;\n          *v55 |= 1u;\n        }\nLABEL_90:\n        if ( feof((FILE *)*a1) )\n        {\nLABEL_134:\n          sub_436B40(0LL, sub_436E90, v6);\n          v81 = (_DWORD *)v6[15];\n          v81[82] = 1;\n          v82 = *((_DWORD *)v6 + 34);\n          v81[83] = v82;\n          v81[84] = v82;\n          for ( *v81 |= 0x130u; !feof((FILE *)*v6); ++*((_DWORD *)v6 + 4) )\n          {\n            if ( **v49 && !strncmp(*v49, \"LOCUS\", 5uLL) )\n              break;\n            v83 = *v202;\n            if ( (signed int)v83 >= 0 && (unsigned int)sub_439950(*v6, v83, v6 + 5) )\n              sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n            if ( !sub_438520(v6 + 3, v6 + 4, *v6) )\n              **v49 = 0;\n          }\n          for ( ; !feof((FILE *)*v6); ++*((_DWORD *)v6 + 4) )\n          {\n            if ( !strncmp(*v49, \"LOCUS  \", 7uLL) )\n              break;\n            v84 = *v202;\n            if ( (signed int)v84 >= 0 && (unsigned int)sub_439950(*v6, v84, v6 + 5) )\n              sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n            if ( !sub_438520(v6 + 3, v6 + 4, *v6) )\n              **v49 = 0;\n          }\nLABEL_450:\n          v34 = v207;\n          if ( *v207 )\n          {\n            v33 = v208;\n            *(_BYTE *)(*v207 + (signed int)*v208) = 0;\n            v5 = v212;\n            v4 = v211;\n          }\n          else\n          {\n            v5 = v212;\n            v4 = v211;\n            v33 = v208;\n          }\n          goto LABEL_453;\n        }\n        v60 = (signed __int64)(a1 + 5);\n        v61 = (signed __int64)(a1 + 4);\n        v62 = 0;\n        v203 = (signed __int64)(a1 + 5);\n        v196 = (signed __int64)(a1 + 4);\n        break;\n      case 4:\n        for ( i = (const char **)(a1 + 3); !feof((FILE *)*a1); ++*((_DWORD *)a1 + 4) )\n        {\n          if ( !strncmp(*i, \"ID  \", 4uLL) )\n            break;\n          v86 = *v202;\n          if ( (signed int)v86 >= 0 && (unsigned int)sub_439950(*a1, v86, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **i = 0;\n        }\n        if ( (*v202 & 0x80000000) == 0 )\n          *(_OWORD *)(a1 + 7) = *(_OWORD *)(a1 + 5);\n        v87 = strtok((char *)*i + 5, \"\\n\\t \");\n        if ( !v87 )\n          goto LABEL_182;\n        v197 = *(_BYTE **)v195;\n        v88 = v87 - 1;\n        do\n          v12 = (v88++)[1] == 32;\n        while ( v12 );\n        v89 = strlen(v88);\n        v90 = v89 - 1;\n        if ( v89 - 1 < 0 )\n          goto LABEL_171;\n        v91 = *__ctype_b_loc();\n        while ( v91[v88[v90]] & 0x2000 )\n        {\n          --v90;\n          v16 = v89-- - 2 < 0;\n          if ( v16 )\n          {\n            v89 = 0;\n            break;\n          }\n        }\nLABEL_171:\n        v88[v89] = 0;\n        if ( *v88 != 45 )\n        {\n          strncpy(v197 + 4, v88, 0x3FuLL);\n          v197[67] = 0;\n          *v197 |= 1u;\n        }\n        v92 = *(_BYTE **)v195;\n        v93 = v87 - 1;\n        do\n          v12 = (v93++)[1] == 32;\n        while ( v12 );\n        v94 = strlen(v93);\n        v95 = v94 - 1;\n        if ( v94 - 1 >= 0 )\n        {\n          v96 = *__ctype_b_loc();\n          while ( v96[v93[v95]] & 0x2000 )\n          {\n            --v95;\n            v16 = v94-- - 2 < 0;\n            if ( v16 )\n            {\n              v94 = 0;\n              break;\n            }\n          }\n        }\n        v93[v94] = 0;\n        if ( *v93 != 45 )\n        {\n          strncpy(v92 + 68, v93, 0x3FuLL);\n          v92[131] = 0;\n          *v92 |= 2u;\n        }\nLABEL_182:\n        v97 = (signed __int64)(a1 + 5);\n        do\n        {\n          v98 = *v202;\n          if ( (signed int)v98 >= 0 && (unsigned int)sub_439950(*a1, v98, v97) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **i = 0;\n          ++*((_DWORD *)a1 + 4);\n          if ( !feof((FILE *)*a1) && (v99 = *i, !strncmp(*i, \"AC  \", 4uLL)) )\n          {\n            v102 = strtok((char *)v99 + 5, \";  \\t\\n\");\n            if ( v102 )\n            {\n              v204 = *(_BYTE **)v195;\n              do\n                v103 = v102++;\n              while ( *v103 == 32 );\n              v104 = strlen(v103);\n              if ( v104 - 1 < 0 )\n              {\n                v97 = (signed __int64)(a1 + 5);\n              }\n              else\n              {\n                v105 = *__ctype_b_loc();\n                v106 = &v103[v104 - 1];\n                v97 = (signed __int64)(a1 + 5);\n                while ( v105[*v106] & 0x2000 )\n                {\n                  --v106;\n                  v16 = v104-- - 2 < 0;\n                  if ( v16 )\n                  {\n                    v104 = 0;\n                    break;\n                  }\n                }\n              }\n              v103[v104] = 0;\n              if ( *v103 != 45 )\n              {\n                strncpy(v204 + 132, v103, 0x3FuLL);\n                v204[195] = 0;\n                *v204 |= 4u;\n              }\n            }\n          }\n          else if ( !feof((FILE *)*a1) )\n          {\n            v100 = *i;\n            if ( !strncmp(*i, \"DE  \", 4uLL) )\n            {\n              v101 = strtok((char *)v100 + 5, \"\\n\");\n              if ( v101 )\n                sub_432BF0(*(_QWORD *)v195, (__int64)v101, 8u);\n            }\n          }\n        }\n        while ( !feof((FILE *)*a1) && strncmp(*i, \"SQ\", 2uLL) );\n        sub_436B40(0LL, sub_436EE0, a1);\n        if ( *((_DWORD *)a1 + 9) == -1 )\n        {\n          for ( j = (_BYTE *)*v207; ; ++j )\n          {\n            if ( *j == 45 )\n            {\n              *j = 78;\n            }\n            else if ( !*j )\n            {\n              break;\n            }\n          }\n        }\n        v182 = (_DWORD *)a1[15];\n        v182[82] = 1;\n        v183 = *((_DWORD *)a1 + 34);\n        v182[83] = v183;\n        v182[84] = v183;\n        *v182 |= 0x130u;\n        while ( !feof((FILE *)*a1) && strncmp(*i, \"ID  \", 4uLL) )\n        {\n          v184 = *v202;\n          if ( (signed int)v184 >= 0 && (unsigned int)sub_439950(*a1, v184, v97) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **i = 0;\n          ++*((_DWORD *)a1 + 4);\n        }\n        goto LABEL_450;\n      case 5:\n        v108 = (char **)(a1 + 3);\n        do\n        {\n          v109 = *v108;\n          if ( strstr(*v108, \"..\") )\n          {\n            *v208 = 0;\n            v110 = strstr(v109, \"  Length: \");\n            if ( v110 || (v110 = strstr(v109, \"..\")) != 0LL )\n              *v110 = 0;\n            v111 = strtok(*v108, \"\\n\\t \");\n            if ( v111 )\n            {\n              v198 = *(_BYTE **)v195;\n              do\n                v112 = v111++;\n              while ( *v112 == 32 );\n              v113 = strlen(v112);\n              v114 = v113;\n              v115 = v113 - 1;\n              if ( v115 >= 0 )\n              {\n                v116 = v115;\n                v117 = *__ctype_b_loc();\n                v118 = &v112[v116];\n                while ( v117[*v118] & 0x2000 )\n                {\n                  --v118;\n                  v16 = v114-- - 2 < 0;\n                  if ( v16 )\n                  {\n                    v114 = 0;\n                    break;\n                  }\n                }\n              }\n              v112[v114] = 0;\n              if ( *v112 != 45 )\n              {\n                strncpy(v198 + 4, v112, 0x3FuLL);\n                v198[67] = 0;\n                *v198 |= 1u;\n              }\n            }\n            while ( 1 )\n            {\n              v119 = feof((FILE *)*a1);\n              v120 = *((unsigned int *)a1 + 9);\n              if ( (signed int)v120 >= 0 && (unsigned int)sub_439950(*a1, v120, a1 + 5) )\n                sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n              if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n                **v108 = 0;\n              ++*((_DWORD *)a1 + 4);\n              if ( v119 )\n                break;\n              sub_436CD0(a1[3], a1);\n            }\n          }\n          v121 = *v202;\n          if ( (signed int)v121 >= 0 && (unsigned int)sub_439950(*a1, v121, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **v108 = 0;\n          ++*((_DWORD *)a1 + 4);\n        }\n        while ( !feof((FILE *)*a1) );\n        goto LABEL_450;\n      case 6:\n        v122 = (const char **)(a1 + 3);\n        if ( feof((FILE *)*a1) )\n          goto LABEL_405;\n        v123 = (signed __int64)(a1 + 4);\n        do\n        {\n          v124 = *v122;\n          if ( **v122 != 59 )\n            break;\n          if ( !strncmp(*v122, \"; DNA sequence\", 0xEuLL) )\n          {\n            v126 = strtok((char *)v124 + 16, \",\\n\\t \");\n            if ( v126 )\n            {\n              v199 = *(_BYTE **)v195;\n              do\n                v127 = v126++;\n              while ( *v127 == 32 );\n              v128 = strlen(v127);\n              if ( v128 - 1 < 0 )\n              {\n                v123 = (signed __int64)(a1 + 4);\n              }\n              else\n              {\n                v129 = *__ctype_b_loc();\n                v130 = &v127[v128 - 1];\n                v123 = (signed __int64)(a1 + 4);\n                while ( v129[*v130] & 0x2000 )\n                {\n                  --v130;\n                  v16 = v128-- - 2 < 0;\n                  if ( v16 )\n                  {\n                    v128 = 0;\n                    break;\n                  }\n                }\n              }\n              v127[v128] = 0;\n              if ( *v127 != 45 )\n              {\n                strncpy(v199 + 4, v127, 0x3FuLL);\n                v199[67] = 0;\n                *v199 |= 1u;\n              }\n            }\n          }\n          v125 = *v202;\n          if ( (signed int)v125 >= 0 && (unsigned int)sub_439950(*a1, v125, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, v123, *a1) )\n            **v122 = 0;\n          ++*((_DWORD *)a1 + 4);\n        }\n        while ( !feof((FILE *)*a1) );\nLABEL_405:\n        if ( !feof((FILE *)*a1) )\n          sub_436B40(1LL, sub_436E70, a1);\n        for ( ; !feof((FILE *)*a1); ++*((_DWORD *)a1 + 4) )\n        {\n          if ( **v122 == 59 )\n            break;\n          v185 = *v202;\n          if ( (signed int)v185 >= 0 && (unsigned int)sub_439950(*a1, v185, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **v122 = 0;\n        }\n        goto LABEL_450;\n      case 7:\n        if ( (v37 & 0x80000000) == 0 )\n          *(_OWORD *)(a1 + 7) = *(_OWORD *)(a1 + 5);\n        v131 = (_BYTE *)a1[3];\n        if ( *v131 != 62 )\n          sub_4325B0(\n            \"File %s does not appear to be in FASTA format at line %d.\\n\"\n            \"You may want to specify the file format on the command line.\\n\"\n            \"Usually this is done with an option --informat <fmt>.\\n\",\n            v6[1],\n            *((unsigned int *)v6 + 4),\n            v195);\n        v132 = strtok(v131 + 1, \"\\n\\t \");\n        if ( !v132 )\n          goto LABEL_279;\n        v133 = *(_BYTE **)v195;\n        v134 = v132 - 1;\n        do\n          v12 = (v134++)[1] == 32;\n        while ( v12 );\n        v135 = strlen(v134);\n        v136 = v135 - 1;\n        if ( v135 - 1 < 0 )\n          goto LABEL_277;\n        v137 = *__ctype_b_loc();\n        while ( v137[v134[v136]] & 0x2000 )\n        {\n          --v136;\n          v16 = v135-- - 2 < 0;\n          if ( v16 )\n          {\n            v135 = 0;\n            break;\n          }\n        }\nLABEL_277:\n        v134[v135] = 0;\n        if ( *v134 != 45 )\n        {\n          strncpy(v133 + 4, v134, 0x3FuLL);\n          v133[67] = 0;\n          *v133 |= 1u;\n        }\nLABEL_279:\n        v138 = strtok(0LL, \"\\n\");\n        if ( v138 )\n          sub_432BF0(*(_QWORD *)v195, (__int64)v138, 8u);\n        sub_436B40(0LL, sub_436ED0, v6);\n        if ( !feof((FILE *)*v6) )\n        {\n          v139 = (_BYTE **)(v6 + 3);\n          do\n          {\n            if ( **v139 == 62 )\n              break;\n            v140 = *v202;\n            if ( (signed int)v140 >= 0 && (unsigned int)sub_439950(*v6, v140, v6 + 5) )\n              sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n            if ( !sub_438520(v6 + 3, v6 + 4, *v6) )\n              **v139 = 0;\n            ++*((_DWORD *)v6 + 4);\n          }\n          while ( !feof((FILE *)*v6) );\n        }\n        goto LABEL_450;\n      case 8:\n        if ( (v37 & 0x80000000) == 0 && (unsigned int)sub_439950(*a1, v37, a1 + 5) )\n          sub_4325B0(\"SSIGetFilePosition() failed\", v37, v195);\n        v141 = (_BYTE **)(a1 + 3);\n        if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n          **v141 = 0;\n        ++*((_DWORD *)a1 + 4);\n        v142 = strtok((char *)(a1[3] + 6LL), \" \\t\\n\");\n        if ( !v142 )\n          goto LABEL_306;\n        v200 = *(_BYTE **)v195;\n        v143 = v142 - 1;\n        do\n          v12 = (v143++)[1] == 32;\n        while ( v12 );\n        v144 = strlen(v143);\n        v145 = v144 - 1;\n        if ( v144 - 1 < 0 )\n          goto LABEL_304;\n        v146 = *__ctype_b_loc();\n        while ( v146[v143[v145]] & 0x2000 )\n        {\n          --v145;\n          v16 = v144-- - 2 < 0;\n          if ( v16 )\n          {\n            v144 = 0;\n            break;\n          }\n        }\nLABEL_304:\n        v143[v144] = 0;\n        if ( *v143 != 45 )\n        {\n          strncpy(v200 + 4, v143, 0x3FuLL);\n          v200[67] = 0;\n          *v200 |= 1u;\n        }\nLABEL_306:\n        v147 = strtok(0LL, \"\\n\");\n        if ( v147 )\n          sub_432BF0(*(_QWORD *)v195, (__int64)v147, 8u);\n        sub_436B40(0LL, sub_436F10, a1);\n        for ( ; !(feof((FILE *)*a1) | (*(_BYTE *)a1[3] == 40)); ++*((_DWORD *)a1 + 4) )\n        {\n          v148 = *v202;\n          if ( (signed int)v148 >= 0 && (unsigned int)sub_439950(*a1, v148, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **v141 = 0;\n        }\n        goto LABEL_450;\n      case 0xC:\n        for ( k = (const char **)(a1 + 3); !feof((FILE *)*a1); ++*((_DWORD *)a1 + 4) )\n        {\n          if ( !strncmp(*k, \"ENTRY\", 5uLL) )\n            break;\n          v150 = *v202;\n          if ( (signed int)v150 >= 0 && (unsigned int)sub_439950(*a1, v150, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **k = 0;\n        }\n        if ( feof((FILE *)*a1) )\n          goto LABEL_450;\n        if ( (*v202 & 0x80000000) == 0 )\n          *(_OWORD *)(a1 + 7) = *(_OWORD *)(a1 + 5);\n        v151 = strtok((char *)*k + 15, \"\\n\\t \");\n        if ( !v151 )\n          goto LABEL_346;\n        v201 = *(_BYTE **)v195;\n        v152 = v151 - 1;\n        do\n          v12 = (v152++)[1] == 32;\n        while ( v12 );\n        v153 = strlen(v152);\n        v154 = v153 - 1;\n        if ( v153 - 1 < 0 )\n          goto LABEL_335;\n        v155 = *__ctype_b_loc();\n        while ( v155[v152[v154]] & 0x2000 )\n        {\n          --v154;\n          v16 = v153-- - 2 < 0;\n          if ( v16 )\n          {\n            v153 = 0;\n            break;\n          }\n        }\nLABEL_335:\n        v152[v153] = 0;\n        if ( *v152 != 45 )\n        {\n          strncpy(v201 + 4, v152, 0x3FuLL);\n          v201[67] = 0;\n          *v201 |= 1u;\n        }\n        v156 = *(_BYTE **)v195;\n        v157 = v151 - 1;\n        do\n          v12 = (v157++)[1] == 32;\n        while ( v12 );\n        v158 = strlen(v157);\n        v159 = v158 - 1;\n        if ( v158 - 1 >= 0 )\n        {\n          v160 = *__ctype_b_loc();\n          while ( v160[v157[v159]] & 0x2000 )\n          {\n            --v159;\n            v16 = v158-- - 2 < 0;\n            if ( v16 )\n            {\n              v158 = 0;\n              break;\n            }\n          }\n        }\n        v157[v158] = 0;\n        if ( *v157 != 45 )\n        {\n          strncpy(v156 + 68, v157, 0x3FuLL);\n          v156[131] = 0;\n          *v156 |= 2u;\n        }\nLABEL_346:\n        v161 = (signed __int64)(a1 + 5);\n        do\n        {\n          v162 = *v202;\n          if ( (signed int)v162 >= 0 && (unsigned int)sub_439950(*a1, v162, v161) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **k = 0;\n          ++*((_DWORD *)a1 + 4);\n          if ( !feof((FILE *)*a1) && (v163 = *k, !strncmp(*k, \"TITLE\", 5uLL)) )\n          {\n            sub_432BF0(*(_QWORD *)v195, (__int64)(v163 + 15), 8u);\n          }\n          else if ( !feof((FILE *)*a1) )\n          {\n            v164 = *k;\n            if ( !strncmp(*k, \"ACCESSION\", 9uLL) )\n            {\n              v165 = strtok((char *)v164 + 15, \" \\t\\n\");\n              if ( v165 )\n              {\n                v205 = *(_BYTE **)v195;\n                do\n                  v166 = v165++;\n                while ( *v166 == 32 );\n                v167 = strlen(v166);\n                if ( v167 - 1 < 0 )\n                {\n                  v161 = (signed __int64)(a1 + 5);\n                }\n                else\n                {\n                  v168 = *__ctype_b_loc();\n                  v169 = &v166[v167 - 1];\n                  v161 = (signed __int64)(a1 + 5);\n                  while ( v168[*v169] & 0x2000 )\n                  {\n                    --v169;\n                    v16 = v167-- - 2 < 0;\n                    if ( v16 )\n                    {\n                      v167 = 0;\n                      break;\n                    }\n                  }\n                }\n                v166[v167] = 0;\n                if ( *v166 != 45 )\n                {\n                  strncpy(v205 + 132, v166, 0x3FuLL);\n                  v205[195] = 0;\n                  *v205 |= 4u;\n                }\n              }\n            }\n          }\n        }\n        while ( !feof((FILE *)*a1) && strncmp(*k, \"SEQUENCE\", 8uLL) );\n        v170 = *v202;\n        if ( (signed int)v170 >= 0 && (unsigned int)sub_439950(*a1, v170, v161) )\n          sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n        if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n          **k = 0;\n        ++*((_DWORD *)a1 + 4);\n        sub_436B40(0LL, sub_436F20, a1);\n        v171 = (_DWORD *)a1[15];\n        v171[82] = 1;\n        v172 = *((_DWORD *)a1 + 34);\n        v171[83] = v172;\n        v171[84] = v172;\n        *v171 |= 0x130u;\n        while ( !feof((FILE *)*a1) && strncmp(*k, \"ENTRY\", 5uLL) )\n        {\n          v173 = *v202;\n          if ( (signed int)v173 >= 0 && (unsigned int)sub_439950(*a1, v173, v161) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            **k = 0;\n          ++*((_DWORD *)a1 + 4);\n        }\n        goto LABEL_450;\n      case 0x10:\n        v174 = a1 + 3;\n        if ( (unsigned int)sub_429210((__int64)\">>>>([^ ]+) .+2BIT +Len: ([0-9]+)\", a1[3], 2) )\n        {\n          if ( qword_463F98 )\n          {\n            v175 = *(_BYTE **)v195;\n            v176 = (char *)qword_463F98 - 1;\n            do\n              v12 = (v176++)[1] == 32;\n            while ( v12 );\n            v177 = strlen(v176);\n            v178 = v177 - 1;\n            if ( v177 - 1 >= 0 )\n            {\n              v179 = *__ctype_b_loc();\n              do\n              {\n                if ( !(v179[v176[v178]] & 0x2000) )\n                  goto LABEL_393;\n                --v178;\n                v16 = v177-- - 2 < 0;\n              }\n              while ( !v16 );\n              v177 = 0;\n            }\nLABEL_393:\n            v176[v177] = 0;\n            if ( *v176 != 45 )\n            {\n              strncpy(v175 + 4, v176, 0x3FuLL);\n              v175[67] = 0;\n              *v175 |= 1u;\n            }\n          }\n          v180 = strtol(nptr, 0LL, 10);\n          v181 = 1;\n          goto LABEL_429;\n        }\n        if ( !(unsigned int)sub_429210((__int64)\">>>>([^ ]+) .+ASCII +Len: [0-9]+\", *v174, 1) )\n          sub_4325B0(\"bogus GCGdata format? %s\", *v174, v195);\n        if ( !qword_463F98 )\n          goto LABEL_427;\n        v186 = *(_BYTE **)v195;\n        v187 = (char *)qword_463F98 - 1;\n        do\n          v12 = (v187++)[1] == 32;\n        while ( v12 );\n        v188 = strlen(v187);\n        v189 = v188 - 1;\n        if ( v188 - 1 < 0 )\n          goto LABEL_425;\n        v190 = *__ctype_b_loc();\n        while ( v190[v187[v189]] & 0x2000 )\n        {\n          --v189;\n          v16 = v188-- - 2 < 0;\n          if ( v16 )\n          {\n            v188 = 0;\n            break;\n          }\n        }\nLABEL_425:\n        v187[v188] = 0;\n        v181 = 0;\n        v180 = 0;\n        if ( *v187 != 45 )\n        {\n          strncpy(v186 + 4, v187, 0x3FuLL);\n          v186[67] = 0;\n          *v186 |= 1u;\nLABEL_427:\n          v181 = 0;\n          v180 = 0;\n        }\nLABEL_429:\n        v191 = *v202;\n        if ( (signed int)v191 >= 0 && (unsigned int)sub_439950(*a1, v191, a1 + 5) )\n          sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n        if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n          *(_BYTE *)*v174 = 0;\n        ++*((_DWORD *)a1 + 4);\n        sub_432BF0(a1[15], a1[3], 8u);\n        if ( v181 )\n        {\n          if ( (signed int)v180 >= *((_DWORD *)a1 + 35) )\n          {\n            *((_DWORD *)a1 + 35) = v180;\n            v192 = realloc((void *)a1[14], (signed int)(v180 + 4));\n            a1[14] = v192;\n            if ( !v192 )\n              sub_4325B0(\"malloc failed\", v195);\n          }\n          v193 = (signed int)(v180 + ((unsigned int)((signed int)(v180 + 3) >> 31) >> 30) + 3) >> 2;\n          if ( fread((void *)a1[14], 1uLL, v193, (FILE *)*a1) < v193 )\n            sub_4325B0(\"fread failed\", 1LL, v195);\n          *v208 = v180;\n          sub_4356A0(*v207, v180);\n        }\n        else\n        {\n          sub_436B40(0LL, sub_436F70, a1);\n        }\n        for ( ; !feof((FILE *)*a1); ++*((_DWORD *)a1 + 4) )\n        {\n          if ( *(_BYTE *)*v174 == 62 )\n            break;\n          v194 = *v202;\n          if ( (signed int)v194 >= 0 && (unsigned int)sub_439950(*a1, v194, a1 + 5) )\n            sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n          if ( !sub_438520(a1 + 3, a1 + 4, *a1) )\n            *(_BYTE *)*v174 = 0;\n        }\n        goto LABEL_450;\n      default:\n        dword_464008 = 5;\n        free(v38);\n        return 0LL;\n    }\n    while ( 1 )\n    {\n      v63 = *v202;\n      if ( (signed int)v63 >= 0 && (unsigned int)sub_439950(*v6, v63, v60) )\n        sub_4325B0(\"SSIGetFilePosition() failed\", v195);\n      if ( !sub_438520(v6 + 3, v61, *v6) )\n        **v49 = 0;\n      ++*((_DWORD *)v6 + 4);\n      if ( !feof((FILE *)*v6) )\n      {\n        v64 = *v49;\n        if ( !strncmp(*v49, \"DEFINITION\", 0xAuLL) )\n          break;\n      }\n      if ( !feof((FILE *)*v6) && (v65 = *v49, !strncmp(*v49, \"ACCESSION\", 9uLL)) )\n      {\n        v71 = strtok((char *)v65 + 12, \"\\n\\t \");\n        v62 = 0;\n        if ( v71 )\n        {\n          v209 = *(_BYTE **)v195;\n          do\n            v72 = v71++;\n          while ( *v72 == 32 );\n          v73 = strlen(v72);\n          if ( v73 - 1 < 0 )\n          {\n            v61 = v196;\n          }\n          else\n          {\n            v74 = *__ctype_b_loc();\n            v75 = &v72[v73 - 1];\n            v61 = v196;\n            while ( v74[*v75] & 0x2000 )\n            {\n              --v75;\n              v16 = v73-- - 2 < 0;\n              if ( v16 )\n              {\n                v73 = 0;\n                break;\n              }\n            }\n          }\n          v72[v73] = 0;\n          if ( *v72 == 45 )\n            goto LABEL_131;\n          strncpy(v209 + 132, v72, 0x3FuLL);\n          v209[195] = 0;\n          *v209 |= 4u;\n          v60 = v203;\n        }\n      }\n      else\n      {\n        v66 = feof((FILE *)*v6);\n        v67 = v6[3];\n        if ( v66 || strncmp((const char *)v6[3], \"VERSION\", 7uLL) )\n        {\n          if ( !strncmp((const char *)v67, \"ORIGIN\", 6uLL) )\n            goto LABEL_134;\n          if ( !v62 )\n          {\n            v62 = 0;\n            goto LABEL_133;\n          }\n          v68 = *(_QWORD *)v195;\n          v69 = v67;\n          goto LABEL_106;\n        }\n        v76 = strtok((char *)(v67 + 12), \"\\n\\t \");\n        v62 = 0;\n        if ( v76 )\n        {\n          v210 = *(_BYTE **)v195;\n          do\n            v77 = v76++;\n          while ( *v77 == 32 );\n          v78 = strlen(v77);\n          if ( v78 - 1 < 0 )\n          {\n            v61 = v196;\n          }\n          else\n          {\n            v79 = *__ctype_b_loc();\n            v80 = &v77[v78 - 1];\n            v61 = v196;\n            while ( v79[*v80] & 0x2000 )\n            {\n              --v80;\n              v16 = v78-- - 2 < 0;\n              if ( v16 )\n              {\n                v78 = 0;\n                break;\n              }\n            }\n          }\n          v77[v78] = 0;\n          if ( *v77 != 45 )\n          {\n            strncpy(v210 + 68, v77, 0x3FuLL);\n            v210[131] = 0;\n            *v210 |= 2u;\n            v60 = v203;\n            goto LABEL_133;\n          }\nLABEL_131:\n          v60 = v203;\n          goto LABEL_133;\n        }\n      }\nLABEL_133:\n      if ( feof((FILE *)*v6) )\n        goto LABEL_134;\n    }\n    v70 = strtok((char *)v64 + 12, \"\\n\");\n    v62 = 1;\n    if ( !v70 )\n      goto LABEL_133;\n    v68 = *(_QWORD *)v195;\n    v69 = (__int64)v70;\nLABEL_106:\n    sub_432BF0(v68, v69, 8u);\n    goto LABEL_133;\n  }\n  v7 = a1[20];\n  v8 = *(_DWORD *)(v7 + 352);\n  if ( v8 >= *(_DWORD *)(v7 + 28) )\n  {\n    sub_42B580((void *)a1[20]);\n    v7 = sub_42C8E0(a1[21], a2);\n    a1[20] = v7;\n    if ( !v7 )\n      return 0LL;\n    *(_DWORD *)(v7 + 352) = 0;\n    v8 = 0;\n  }\n  v9 = *(const char **)(*(_QWORD *)v7 + 8LL * v8);\n  v206 = (signed __int64)(v6 + 14);\n  sub_424EF0((__int64)v9, *(_DWORD *)(v7 + 24), v9, v6 + 14);\n  *((_DWORD *)v6 + 34) = strlen((const char *)v6[14]);\n  *(_DWORD *)v4 = 0;\n  v10 = *(_QWORD *)(*(_QWORD *)(v6[20] + 8LL) + 8LL * *(signed int *)(v6[20] + 352LL));\n  if ( v10 )\n  {\n    v11 = (const char *)(v10 - 1);\n    do\n      v12 = (v11++)[1] == 32;\n    while ( v12 );\n    v13 = strlen(v11);\n    v14 = v13 - 1;\n    if ( v13 - 1 >= 0 )\n    {\n      v15 = *__ctype_b_loc();\n      while ( v15[v11[v14]] & 0x2000 )\n      {\n        --v14;\n        v16 = v13-- - 2 < 0;\n        if ( v16 )\n        {\n          v13 = 0;\n          break;\n        }\n      }\n    }\n    v11[v13] = 0;\n    if ( *v11 != 45 )\n    {\n      strncpy((char *)(v4 + 4), v11, 0x3FuLL);\n      *(_BYTE *)(v4 + 67) = 0;\n      *(_BYTE *)v4 |= 1u;\n    }\n  }\n  v17 = v6[20];\n  v18 = *(_QWORD *)(v17 + 96);\n  if ( v18 )\n  {\n    v19 = *(_QWORD *)(v18 + 8LL * *(signed int *)(v17 + 352));\n    if ( v19 )\n    {\n      v20 = (const char *)(v19 - 1);\n      do\n        v12 = (v20++)[1] == 32;\n      while ( v12 );\n      v21 = strlen(v20);\n      v22 = v21 - 1;\n      if ( v21 - 1 >= 0 )\n      {\n        v23 = *__ctype_b_loc();\n        while ( v23[v20[v22]] & 0x2000 )\n        {\n          --v22;\n          v16 = v21-- - 2 < 0;\n          if ( v16 )\n          {\n            v21 = 0;\n            break;\n          }\n        }\n      }\n      v20[v21] = 0;\n      if ( *v20 != 45 )\n      {\n        strncpy((char *)(v4 + 132), v20, 0x3FuLL);\n        *(_BYTE *)(v4 + 195) = 0;\n        *(_BYTE *)v4 |= 4u;\n      }\n    }\n  }\n  v24 = v6[20];\n  v25 = *(_QWORD *)(v24 + 104);\n  if ( v25 )\n  {\n    v26 = *(_QWORD *)(v25 + 8LL * *(signed int *)(v24 + 352));\n    if ( v26 )\n    {\n      sub_432BF0(v4, v26, 8u);\n      v24 = v6[20];\n    }\n  }\n  v27 = *(_QWORD *)(v24 + 112);\n  if ( v27 )\n  {\n    v28 = *(signed int *)(v24 + 352);\n    v29 = *(const char **)(v27 + 8 * v28);\n    if ( v29 )\n    {\n      sub_424EF0(*(_QWORD *)(*(_QWORD *)v24 + 8 * v28), *(_DWORD *)(v24 + 24), v29, (_QWORD *)(v4 + 344));\n      *(_BYTE *)(v4 + 1) |= 2u;\n      v24 = v6[20];\n    }\n  }\n  v30 = *(_QWORD *)(v24 + 120);\n  if ( v30 )\n  {\n    v31 = *(signed int *)(v24 + 352);\n    v32 = *(const char **)(v30 + 8 * v31);\n    if ( v32 )\n    {\n      sub_424EF0(*(_QWORD *)(*(_QWORD *)v24 + 8 * v31), *(_DWORD *)(v24 + 24), v32, (_QWORD *)(v4 + 352));\n      *(_BYTE *)(v4 + 1) |= 4u;\n      v24 = v6[20];\n    }\n  }\n  v33 = (unsigned int *)(v6 + 17);\n  ++*(_DWORD *)(v24 + 352);\n  v34 = (_QWORD *)v206;\nLABEL_453:\n  *(_DWORD *)(v4 + 324) = *v33;\n  *(_BYTE *)v4 |= 0x40u;\n  *v5 = *v34;\n  return dword_464008 == 0;\n}\n", 
            "funcStartAddr": "0x433130L", 
            "funcEndAddr": "0x434f69L", 
            "funcName": "sub_433130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_434F70(FILE *stream)\n{\n  FILE *v1; // r13\n  signed __int64 v2; // r14\n  signed __int64 v3; // r12\n  char **v4; // r15\n  char *v5; // rbx\n  unsigned int v6; // ebp\n  char **v7; // r13\n  signed __int64 v8; // r15\n  signed __int64 v9; // r12\n  char *v10; // rbx\n  __int64 v11; // rbp\n  __int64 v12; // r14\n  char *v13; // rbx\n  char *v14; // rbp\n  char *v15; // rax\n  char *v16; // rax\n  unsigned int v17; // ecx\n  __int64 v18; // rax\n  int v20; // [rsp+8h] [rbp-50h]\n  char v21[4]; // [rsp+Ch] [rbp-4Ch]\n  char *s1; // [rsp+10h] [rbp-48h]\n  char *v23; // [rsp+18h] [rbp-40h]\n  FILE *v24; // [rsp+20h] [rbp-38h]\n\n  v1 = stream;\n  s1 = 0LL;\n  *(_DWORD *)v21 = 0;\n  v2 = 0LL;\n  if ( !sub_438520(&s1, v21, stream) )\n    goto LABEL_56;\n  v3 = 171798691841LL;\n  v4 = &s1;\n  v20 = 0;\n  while ( 1 )\n  {\n    while ( (unsigned int)sub_4388B0(s1, v21) )\n    {\nLABEL_4:\n      if ( !sub_438520(v4, v21, v1) )\n      {\n        if ( v20 )\n        {\nLABEL_57:\n          v6 = 102;\n          if ( (_DWORD)v2 == 1 )\n            v6 = 0;\nLABEL_59:\n          v13 = s1;\n          if ( s1 )\n            goto LABEL_60;\n          goto LABEL_61;\n        }\nLABEL_56:\n        sub_4325B0(\"Sequence file contains no data\", v21);\n      }\n    }\n    if ( !v20 )\n    {\n      v5 = s1;\n      if ( !strncmp(s1, \">>>>\", 4uLL) && strstr(v5, \"Len: \") )\n      {\n        v6 = 16;\n        goto LABEL_59;\n      }\n      if ( *v5 == 62 )\n      {\n        v6 = 7;\n        goto LABEL_59;\n      }\n      v6 = 5;\n      if ( !strncmp(v5, \"!!AA_SEQUENCE\", 0xDuLL) || !strncmp(v5, \"!!NA_SEQUENCE\", 0xDuLL) )\n        goto LABEL_59;\n      if ( !strncmp(v5, \"# STOCKHOLM 1.\", 0xEuLL) )\n      {\n        v6 = 101;\n        goto LABEL_59;\n      }\n      if ( !strncmp(v5, \"CLUSTAL\", 7uLL) && strstr(v5, \"multiple sequence alignment\") )\n      {\n        v6 = 104;\n        goto LABEL_59;\n      }\n      v6 = 103;\n      if ( !strncmp(v5, \"!!AA_MULTIPLE_ALIGNMENT\", 0x17uLL) || !strncmp(v5, \"!!NA_MULTIPLE_ALIGNMENT\", 0x17uLL) )\n        goto LABEL_59;\n      v24 = v1;\n      v7 = v4;\n      v8 = v3;\n      v9 = v2;\n      v10 = (char *)sub_438810(v5);\n      v23 = v10;\n      v11 = sub_4387A0(&v23, \" \\t\\n\", 0LL);\n      if ( v11 )\n      {\n        v12 = sub_4387A0(&v23, \" \\t\\n\", 0LL);\n        if ( v12 )\n        {\n          if ( (unsigned int)sub_43C400(v11, \" \\t\\n\") && (unsigned int)sub_43C400(v12, \" \\t\\n\") )\n          {\n            free(v10);\n            v6 = 106;\n            v1 = v24;\n            goto LABEL_59;\n          }\n        }\n      }\n      free(v10);\n      v2 = v9;\n      v3 = v8;\n      v4 = v7;\n      v1 = v24;\n    }\n    v13 = s1;\n    if ( !strncmp(s1, \"#=AU\", 4uLL) )\n      break;\n    v6 = 102;\n    if ( !strncmp(v13, \"#=ID\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=AC\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=DE\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=GA\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=TC\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=NC\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=SQ\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=SS\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=CS\", 4uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"#=RF\", 4uLL) )\n      goto LABEL_59;\n    v6 = 12;\n    if ( !strncmp(v13, \"///\", 3uLL) || !strncmp(v13, \"ENTRY \", 6uLL) )\n      goto LABEL_59;\n    v14 = strstr(v13, \"..\");\n    if ( v14 )\n    {\n      if ( strstr(v13, \"MSF:\") && strstr(v13, \"Check:\") )\n      {\n        v6 = 103;\n        goto LABEL_59;\n      }\n      v15 = strstr(v13, \" Check: \");\n      if ( v14 && v15 )\n      {\n        v6 = 5;\n        goto LABEL_59;\n      }\n    }\n    v6 = 2;\n    if ( !strncmp(v13, \"LOCUS \", 6uLL) )\n      goto LABEL_59;\n    if ( !strncmp(v13, \"ORIGIN \", 6uLL) )\n      goto LABEL_59;\n    v6 = 4;\n    if ( !strncmp(v13, \"ID   \", 5uLL) || !strncmp(v13, \"SQ   \", 5uLL) )\n      goto LABEL_59;\n    v23 = v13;\n    v16 = (char *)sub_4387A0(&v23, \" \\t\\n\", 0LL);\n    if ( !v16 )\n      goto LABEL_4;\n    v17 = *v16;\n    if ( v17 <= 0x3FuLL )\n    {\n      if ( v3 & (1LL << v17) )\n        goto LABEL_4;\n    }\n    v18 = sub_4387A0(&v23, \" \\t\\n\", 0LL);\n    if ( v18 )\n    {\n      if ( !(unsigned int)sub_4354F0(v18) )\n        v2 = 1LL;\n    }\n    else\n    {\n      v2 = 1LL;\n    }\n    if ( ++v20 == 300 || !sub_438520(v4, v21, v1) )\n      goto LABEL_57;\n  }\n  v6 = 102;\n  if ( !v13 )\n    goto LABEL_61;\nLABEL_60:\n  free(v13);\nLABEL_61:\n  rewind(v1);\n  return v6;\n}\n", 
            "funcStartAddr": "0x434f70L", 
            "funcEndAddr": "0x4354e2L", 
            "funcName": "sub_434F70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4354F0(char *a1, __int64 a2)\n{\n  char v2; // al\n  char *v3; // rbx\n  int v4; // er15\n  int v5; // er12\n  signed int v6; // er13\n  int v7; // eax\n  int v8; // er14\n  unsigned int v9; // ebp\n  signed __int64 result; // rax\n  int v11; // [rsp+8h] [rbp-40h]\n  int v12; // [rsp+Ch] [rbp-3Ch]\n  int v13; // [rsp+10h] [rbp-38h]\n  int v14; // [rsp+14h] [rbp-34h]\n\n  v2 = *a1;\n  if ( !*a1 )\n    return 3LL;\n  v3 = a1 + 1;\n  v14 = 0;\n  v13 = 0;\n  v4 = 0;\n  v12 = 0;\n  v11 = 0;\n  v5 = 0;\n  v6 = 0;\n  do\n  {\n    v7 = sub_437040((unsigned int)v2, a2);\n    v8 = v7 << 24;\n    if ( v7 << 24 <= 771751935 )\n    {\n      if ( v8 == 0x20000000 || v8 == 754974720 )\n        goto LABEL_21;\n    }\n    else if ( v8 == 771751936 || v8 == 1593835520 || v8 == 2113929216 )\n    {\n      goto LABEL_21;\n    }\n    v9 = (char)v7;\n    a2 = (unsigned int)(char)v7;\n    if ( memchr(\"EFIPQZ\", a2, 7uLL) )\n    {\n      ++v5;\n    }\n    else\n    {\n      a2 = v9;\n      if ( memchr(\"ACGTUN\", v9, 7uLL) )\n      {\n        ++v4;\n        if ( v8 == 1426063360 )\n        {\n          ++v12;\n        }\n        else if ( v8 == 1409286144 )\n        {\n          ++v11;\n        }\n      }\n      else\n      {\n        a2 = v9;\n        if ( memchr(\"ABCDEFGHIKLMNPQRSTVWXYZ*\", v9, 0x19uLL) )\n          ++v13;\n        else\n          v14 += ((unsigned int)(*__ctype_b_loc())[v9] >> 10) & 1;\n      }\n    }\n    ++v6;\nLABEL_21:\n    if ( v6 > 299 )\n      break;\n    v2 = *v3++;\n  }\n  while ( v2 );\n  result = 0LL;\n  if ( v14 <= 0 )\n  {\n    result = 3LL;\n    if ( v5 <= 0 && v4 > v13 )\n      result = (unsigned int)(v12 > v11) + 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4354f0L", 
            "funcEndAddr": "0x435698L", 
            "funcName": "sub_4354F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4356A0(__int64 a1, signed int a2)\n{\n  signed __int64 v2; // r8\n  __int64 v3; // rdx\n  unsigned __int8 v4; // al\n  bool v5; // zf\n  bool v6; // sf\n  unsigned __int8 v7; // of\n\n  if ( a2 >= -2 )\n  {\n    v2 = ((signed int)(a2 + ((unsigned int)((a2 - 1) >> 31) >> 30) - 1) >> 2) + 1LL;\n    LODWORD(v3) = (a2 + ((unsigned int)((a2 - 1) >> 31) >> 30) - 1) & 0xFFFFFFFC;\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v2 - 1);\n      v3 = (signed int)v3;\n      *(_BYTE *)(a1 + ((signed int)v3 | 3LL)) = 0x54434741u >> (8 * *(_BYTE *)(a1 + v2 - 1) & 0x18 ^ 0x10);\n      *(_BYTE *)(a1 + ((signed int)v3 | 2LL)) = 0x54434741u >> (2 * v4 & 0x18 ^ 0x10);\n      *(_BYTE *)(a1 + ((signed int)v3 | 1LL)) = 0x54434741u >> ((v4 >> 1) & 0x18 ^ 0x10);\n      *(_BYTE *)(a1 + v3) = 0x54434741u >> ((v4 >> 3) & 0x18 ^ 0x10);\n      LODWORD(v3) = v3 - 4;\n      v7 = __OFADD__(-1LL, v2);\n      v5 = v2 == 1;\n      v6 = v2-- - 1 < 0;\n    }\n    while ( !((unsigned __int8)(v6 ^ v7) | v5) );\n  }\n  *(_BYTE *)(a1 + a2) = 0;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x4356a0L", 
            "funcEndAddr": "0x435764L", 
            "funcName": "sub_4356A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435770(char *a1, __int64 a2)\n{\n  char *v2; // r14\n  __int64 v3; // r15\n  signed int v4; // er12\n  unsigned int v5; // er13\n  unsigned int v6; // ebx\n  int v7; // eax\n\n  v2 = a1;\n  if ( (signed int)a2 <= 0 )\n  {\n    v6 = 0;\n  }\n  else\n  {\n    v3 = (unsigned int)a2;\n    v4 = 1;\n    v5 = 0;\n    v6 = 0;\n    do\n    {\n      v7 = sub_437040((unsigned int)*v2, a2);\n      v6 = v6\n         + (v4 - 57 * (v5 / 0x39)) * v7\n         - 10000\n         * (((unsigned __int64)(1759218605LL * (signed int)(v6 + (v4 - 57 * (v5 / 0x39)) * v7)) >> 63)\n          + (1759218605LL * (signed int)(v6 + (v4 - 57 * (v5 / 0x39)) * v7) >> 44));\n      ++v4;\n      ++v5;\n      ++v2;\n      --v3;\n    }\n    while ( v3 );\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x435770L", 
            "funcEndAddr": "0x435806L", 
            "funcName": "sub_435770"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_435810(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rcx\n  unsigned __int64 result; // rax\n  char *v4; // rbx\n  unsigned int v5; // eax\n  int v6; // er12\n  __int64 v7; // rbp\n  signed int v8; // er15\n  unsigned int v9; // er13\n  int v10; // eax\n  signed __int64 v11; // [rsp+18h] [rbp-40h]\n  int v12; // [rsp+20h] [rbp-38h]\n\n  if ( (signed int)a2 <= 0 )\n    return 0LL;\n  v2 = 0LL;\n  LODWORD(result) = 0;\n  do\n  {\n    v12 = result;\n    v11 = v2;\n    v4 = *(char **)(a1 + 8 * v2);\n    v5 = strlen(*(const char **)(a1 + 8 * v2));\n    v6 = 0;\n    if ( (signed int)v5 > 0 )\n    {\n      v7 = v5;\n      v8 = 1;\n      v9 = 0;\n      v6 = 0;\n      do\n      {\n        v10 = sub_437040((unsigned int)*v4, a2);\n        v6 = v6\n           + (v8 - 57 * (v9 / 0x39)) * v10\n           - 10000\n           * (((unsigned __int64)(1759218605LL * (signed int)(v6 + (v8 - 57 * (v9 / 0x39)) * v10)) >> 63)\n            + (1759218605LL * (signed int)(v6 + (v8 - 57 * (v9 / 0x39)) * v10) >> 44));\n        ++v4;\n        ++v8;\n        ++v9;\n        --v7;\n      }\n      while ( v7 );\n    }\n    result = v12\n           + v6\n           - 10000\n           * (((unsigned __int64)(1759218605LL * (v12 + v6)) >> 63) + (unsigned int)(1759218605LL * (v12 + v6) >> 44));\n    v2 = v11 + 1;\n  }\n  while ( v11 + 1 != (unsigned int)a2 );\n  return result;\n}\n", 
            "funcStartAddr": "0x435810L", 
            "funcEndAddr": "0x43592fL", 
            "funcName": "sub_435810"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_435930(char **a1, __int64 a2)\n{\n  char **v2; // rbx\n  __int64 v3; // r14\n  int v4; // ebp\n  unsigned int v5; // er15\n  int v6; // er13\n  int v7; // er12\n  int v8; // eax\n  signed __int64 result; // rax\n\n  v2 = a1;\n  if ( (signed int)a2 <= 0 )\n  {\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\nLABEL_14:\n    result = 3LL;\n    if ( v5 != (_DWORD)a2 )\n    {\n      result = 1LL;\n      if ( v6 != (_DWORD)a2 )\n      {\n        result = 2LL;\n        if ( v7 != (_DWORD)a2 )\n          result = 3 - (unsigned int)(v5 < 1);\n      }\n    }\n    return result;\n  }\n  v3 = (unsigned int)a2;\n  v4 = 0;\n  v5 = 0;\n  v6 = 0;\n  v7 = 0;\n  do\n  {\n    v8 = sub_4354F0(*v2, a2);\n    switch ( v8 )\n    {\n      case 1:\n        ++v6;\n        break;\n      case 3:\n        ++v5;\n        break;\n      case 2:\n        ++v7;\n        break;\n      default:\n        ++v4;\n        break;\n    }\n    ++v2;\n    --v3;\n  }\n  while ( v3 );\n  result = 0LL;\n  if ( !v4 )\n    goto LABEL_14;\n  return result;\n}\n", 
            "funcStartAddr": "0x435930L", 
            "funcEndAddr": "0x4359fbL", 
            "funcName": "sub_435930"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_435A00(FILE *stream, char *s, __int64 a3, void *a4)\n{\n  void *v4; // rbx\n  __int64 v5; // r13\n  signed int v6; // er12\n  int result; // eax\n  __int64 v8; // rbx\n  __int64 v9; // [rsp+0h] [rbp-68h]\n  char v10; // [rsp+3Ch] [rbp-2Ch]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = strlen(s);\n  v10 = 0;\n  if ( !v4 )\n    v4 = &unk_4409CD;\n  result = fprintf(stream, \">%s %s\\n\", v5, v4);\n  if ( v6 > 0 )\n  {\n    v8 = 0LL;\n    do\n    {\n      strncpy((char *)&v9, &s[v8], 0x3CuLL);\n      result = fprintf(stream, \"%s\\n\", &v9);\n      v8 += 60LL;\n    }\n    while ( (signed int)v8 < v6 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x435a00L", 
            "funcEndAddr": "0x435a9aL", 
            "funcName": "sub_435A00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_435AA0(FILE *a1, __int64 a2, const char *a3, _DWORD *a4)\n{\n  _DWORD *v4; // rbx\n  bool v5; // zf\n  unsigned int v6; // er15\n  unsigned int v7; // er14\n  __int64 v8; // r12\n  signed int v9; // er15\n  unsigned int v10; // ebx\n  char *v11; // r13\n  int v12; // eax\n  _DWORD *v13; // r8\n  signed int v14; // edi\n  void *v15; // rcx\n  const char *v16; // rdx\n  const char *v17; // rdx\n  const char *v18; // rdx\n  void *v19; // rcx\n  signed __int64 v20; // rdx\n  const char *v21; // rdx\n  const char *v22; // rdx\n  int v23; // eax\n  void *v24; // rcx\n  signed __int64 v25; // rdx\n  const char *v26; // rdx\n  const char *v27; // rdx\n  _DWORD *v28; // rbp\n  unsigned int v29; // er14\n  int v30; // eax\n  const char *v31; // rdx\n  const char *v32; // rcx\n  int v33; // esi\n  __int64 v34; // r9\n  const char *v35; // rdx\n  __int64 v36; // r9\n  __int64 v37; // r12\n  unsigned int v38; // ebp\n  __int64 v39; // r14\n  int v40; // eax\n  signed __int64 v41; // r13\n  int v42; // esi\n  _DWORD *v43; // r15\n  __int64 v44; // rbx\n  unsigned int v45; // er15\n  signed int v46; // ebx\n  FILE *v47; // rbp\n  int v48; // ecx\n  __int64 v49; // rax\n  char v50; // al\n  signed __int64 v51; // r15\n  int v52; // esi\n  FILE *v53; // rbp\n  signed int v54; // ebx\n  _DWORD *v55; // rbx\n  __int64 v56; // rbp\n  __int64 v58[2]; // [rsp+0h] [rbp-168h]\n  signed int v59; // [rsp+14h] [rbp-154h]\n  _DWORD *v60; // [rsp+18h] [rbp-150h]\n  signed int v61; // [rsp+24h] [rbp-144h]\n  signed int v62; // [rsp+28h] [rbp-140h]\n  signed int v63; // [rsp+2Ch] [rbp-13Ch]\n  unsigned int v64; // [rsp+30h] [rbp-138h]\n  unsigned int v65; // [rsp+30h] [rbp-138h]\n  int v66; // [rsp+3Ch] [rbp-12Ch]\n  char v67; // [rsp+40h] [rbp-128h]\n  FILE *stream; // [rsp+48h] [rbp-120h]\n  const char *v69; // [rsp+50h] [rbp-118h]\n  int v70; // [rsp+5Ch] [rbp-10Ch]\n  char v71[112]; // [rsp+60h] [rbp-108h]\n  char v72[152]; // [rsp+D0h] [rbp-98h]\n\n  v4 = a4;\n  v5 = (*(_BYTE *)a4 & 0x40) == 0;\n  v69 = a3;\n  if ( v5 )\n    v6 = strlen(a3);\n  else\n    v6 = a4[81];\n  stream = a1;\n  v60 = v4;\n  if ( (signed int)a2 >= 101 )\n    sub_4325B0(\"Tried to write an aligned format with WriteSeq() -- bad, bad.\");\n  LOBYTE(v66) = 0;\n  v62 = 0;\n  v7 = 0;\n  v64 = v6;\n  if ( (signed int)v6 > 0 )\n  {\n    v8 = v6;\n    v9 = 1;\n    v10 = 0;\n    v11 = (char *)v69;\n    v7 = 0;\n    do\n    {\n      v12 = sub_437040((unsigned int)*v11, a2);\n      v7 = v7\n         + (v9 - 57 * (v10 / 0x39)) * v12\n         - 10000\n         * (((unsigned __int64)(1759218605LL * (signed int)(v7 + (v9 - 57 * (v10 / 0x39)) * v12)) >> 63)\n          + (1759218605LL * (signed int)(v7 + (v9 - 57 * (v10 / 0x39)) * v12) >> 44));\n      ++v11;\n      ++v9;\n      ++v10;\n      --v8;\n    }\n    while ( v8 );\n  }\n  v70 = 50;\n  v13 = v60;\n  v61 = 0;\n  v59 = 0;\n  v14 = 0;\n  switch ( (_DWORD)a2 )\n  {\n    case 0:\n      LOWORD(v66) = 10;\n      break;\n    case 1:\n      v15 = &unk_4409CD;\n      if ( *v60 & 8 )\n        v15 = v60 + 49;\n      v62 = 0;\n      fprintf(stream, \";%s %s\\n\", v60 + 1, v15, v60);\n      fprintf(stream, \"%s\\n\", v60 + 1);\n      v13 = v60;\n      LOWORD(v66) = 49;\n      break;\n    case 2:\n      v62 = 0;\n      fprintf(stream, \"LOCUS       %s       %d bp\\n\", v60 + 1, v64);\n      v16 = (const char *)(v60 + 33);\n      if ( !(*v60 & 4) )\n        v16 = \".\";\n      fprintf(stream, \"ACCESSION   %s\\n\", v16);\n      v17 = (const char *)(v60 + 49);\n      if ( !(*v60 & 8) )\n        v17 = \".\";\n      fprintf(stream, \"DEFINITION  %s\\n\", v17);\n      v18 = (const char *)(v60 + 17);\n      if ( !(*v60 & 2) )\n        v18 = \".\";\n      fprintf(stream, \"VERSION     %s\\n\", v18);\n      fwrite(\"ORIGIN      \\n\", 0xDuLL, 1uLL, stream);\n      v13 = v60;\n      v66 = 3092234;\n      v14 = 11;\n      goto LABEL_47;\n    case 4:\n      v20 = (signed __int64)(v60 + 17);\n      if ( !(*v60 & 2) )\n        v20 = (signed __int64)(v60 + 1);\n      v62 = 0;\n      fprintf(stream, \"ID   %s\\n\", v20);\n      v21 = (const char *)(v60 + 33);\n      if ( !(*v60 & 4) )\n        v21 = \"-\";\n      fprintf(stream, \"AC   %s\\n\", v21);\n      v22 = (const char *)(v60 + 49);\n      if ( !(*v60 & 8) )\n        v22 = \"-\";\n      fprintf(stream, \"DE   %s\\n\", v22);\n      fprintf(stream, \"SQ             %d BP\\n\", v64);\n      v13 = v60;\n      v66 = 3092234;\n      v14 = 11;\n      v59 = 5;\n      v61 = 0;\n      goto LABEL_69;\n    case 5:\n      fprintf(stream, \"%s\\n\", v60 + 1);\n      v23 = *v60;\n      if ( *v60 & 4 )\n      {\n        fprintf(stream, \"ACCESSION   %s\\n\", v60 + 33);\n        v23 = *v60;\n      }\n      if ( v23 & 8 )\n        fprintf(stream, \"DEFINITION  %s\\n\", v60 + 49);\n      v62 = 0;\n      fprintf(stream, \"    %s  Length: %d  (today)  Check: %d  ..\\n\", v60 + 1, v64, v7);\n      LOWORD(v66) = 10;\n      v14 = 11;\n      v61 = 1;\n      v59 = 0;\n      v13 = v60;\n      goto LABEL_69;\n    case 6:\n      fwrite(\"; ### from DNA Strider ;-)\\n\", 0x1BuLL, 1uLL, stream);\n      v62 = 0;\n      fprintf(stream, \"; DNA sequence  %s, %d bases, %d checksum.\\n;\\n\", v60 + 1, v64, v7);\n      v13 = v60;\n      v66 = 3092234;\n      break;\n    case 8:\n      v24 = &unk_4409CD;\n      if ( *v60 & 8 )\n        v24 = v60 + 49;\n      v62 = 0;\n      fprintf(stream, \";%s %s\\n\", v60 + 1, v24, v60);\n      fprintf(stream, \"%s\\n\", v60 + 1);\n      LOWORD(v66) = 49;\n      sub_4382C0(v69, \"%s\\n\");\n      v13 = v60;\n      break;\n    case 0xC:\n      v25 = (signed __int64)(v60 + 17);\n      if ( !(*v60 & 2) )\n        v25 = (signed __int64)(v60 + 1);\n      v62 = 0;\n      fprintf(stream, \"ENTRY          %s\\n\", v25);\n      v26 = (const char *)(v60 + 49);\n      if ( !(*v60 & 8) )\n        v26 = \"-\";\n      fprintf(stream, \"TITLE          %s\\n\", v26);\n      v27 = (const char *)(v60 + 33);\n      if ( !(*v60 & 4) )\n        v27 = \"-\";\n      fprintf(stream, \"ACCESSION      %s\\n\", v27);\n      fprintf(stream, \"SUMMARY                                #Length %d  #Checksum  %d\\n\", (unsigned int)v60[81], v7);\n      fwrite(\"SEQUENCE\\n\", 9uLL, 1uLL, stream);\n      fwrite(\"                  5        10        15        20        25        30\\n\", 0x46uLL, 1uLL, stream);\n      v13 = v60;\n      v67 = 0;\n      v66 = 791621386;\n      v14 = 2;\n      v70 = 30;\nLABEL_47:\n      v61 = 1;\n      v59 = 0;\n      goto LABEL_69;\n    case 0xD:\n      goto LABEL_69;\n    case 0xE:\n      v28 = v60;\n      v29 = 0;\n      fprintf(stream, \"NAM  %s\\n\", v60 + 1);\n      v30 = *v60;\n      if ( *v60 & 0x136 )\n      {\n        v31 = (const char *)(v60 + 17);\n        if ( !(v30 & 2) )\n          v31 = \"-\";\n        v32 = (const char *)(v60 + 33);\n        if ( !(v30 & 4) )\n          v32 = \"-\";\n        if ( v30 & 0x10 )\n          v29 = v60[82];\n        v33 = 0;\n        v34 = 0LL;\n        if ( v30 & 0x20 )\n          v34 = (unsigned int)v60[83];\n        if ( v30 & 0x100 )\n          v33 = v60[84];\n        LODWORD(v58[0]) = v33;\n        fprintf(stream, \"SRC  %s %s %d..%d::%d\\n\", v31, v32, v29, v34, v58[0]);\n        v28 = v60;\n        v30 = *v60;\n      }\n      if ( v30 & 8 )\n      {\n        fprintf(stream, \"DES  %s\\n\", v28 + 49);\n        v30 = *v28;\n      }\n      if ( v30 & 0x200 )\n      {\n        fwrite(\"SEQ  +SS\\n\", 9uLL, 1uLL, stream);\n        v13 = v28;\n        v62 = 1;\n      }\n      else\n      {\n        fwrite(\"SEQ\\n\", 4uLL, 1uLL, stream);\n        v13 = v28;\n        v62 = 0;\n      }\n      v66 = 2829066;\n      v59 = 0;\n      v61 = 1;\n      goto LABEL_68;\n    case 0x10:\n      v62 = 0;\n      fprintf(stream, \">>>>%s  9/95  ASCII  Len: %d\\n\", v60 + 1, v64);\n      v35 = \"-\";\n      if ( *v60 & 8 )\n        v35 = (const char *)(v60 + 49);\n      fprintf(stream, \"%s\\n\", v35);\n      v13 = v60;\n      break;\n    default:\n      v19 = &unk_4409CD;\n      if ( *v60 & 8 )\n        v19 = v60 + 49;\n      v62 = 0;\n      fprintf(stream, \">%s %s\\n\", v60 + 1, v19);\n      v13 = v60;\n      break;\n  }\n  v61 = 0;\n  v59 = 0;\nLABEL_68:\n  v14 = 0;\nLABEL_69:\n  v36 = (__int64)v69;\n  if ( (signed int)v64 <= 0 )\n  {\n    v65 = 0;\n  }\n  else\n  {\n    v37 = v64;\n    v38 = 1;\n    v39 = 0LL;\n    v40 = 0;\n    LODWORD(v41) = 0;\n    v65 = 0;\n    v63 = v14;\n    do\n    {\n      v42 = 0;\n      if ( v40 >= 0 )\n      {\n        v42 = v40;\n        if ( !v40 )\n        {\n          if ( v61 )\n          {\n            v43 = v13;\n            v44 = v36;\n            fprintf(stream, \"%8d \", v38);\n            v36 = v44;\n            v13 = v43;\n            v14 = v63;\n          }\n          v42 = 0;\n          if ( v59 )\n          {\n            v45 = v38;\n            v46 = v59;\n            v47 = stream;\n            do\n            {\n              fputc(32, v47);\n              --v46;\n            }\n            while ( v46 );\n            v42 = 0;\n            v36 = (__int64)v69;\n            v13 = v60;\n            v14 = v63;\n            v38 = v45;\n          }\n        }\n      }\n      if ( v14 && (v48 = v41 + 1, ((signed int)v41 + 1) % v14 == 1) )\n      {\n        v49 = (signed int)v41;\n        v71[v49] = 32;\n        v72[v49] = 32;\n      }\n      else\n      {\n        v48 = v41;\n      }\n      v71[v48] = *(_BYTE *)(v36 + v39);\n      v50 = 46;\n      if ( *((_BYTE *)v13 + 1) & 2 )\n        v50 = *(_BYTE *)(*((_QWORD *)v13 + 43) + v39);\n      v72[v48] = v50;\n      v41 = v48 + 1LL;\n      v51 = v39 + 1;\n      if ( v39 + 1 == v37 || (v52 = v42 + 1, v52 == v70) )\n      {\n        v72[v41] = 0;\n        v71[v41] = 0;\n        if ( v62 )\n        {\n          v53 = stream;\n          fprintf(stream, \"%s\\n\", v71);\n          if ( v61 )\n            fwrite(\"         \", 9uLL, 1uLL, v53);\n          if ( v59 )\n          {\n            v54 = v59;\n            do\n            {\n              fputc(32, v53);\n              --v54;\n            }\n            while ( v54 );\n          }\n          if ( v51 == v37 )\n            fprintf(v53, \"%s%s\\n\", v72, &v66);\n          else\n            fprintf(v53, \"%s\\n\", v72);\n          v36 = (__int64)v69;\n          v13 = v60;\n        }\n        else\n        {\n          if ( v51 == v37 )\n          {\n            v55 = v13;\n            v56 = v36;\n            fprintf(stream, \"%s%s\\n\", v71, &v66);\n          }\n          else\n          {\n            v55 = v13;\n            v56 = v36;\n            fprintf(stream, \"%s\\n\", v71);\n          }\n          v36 = v56;\n          v13 = v55;\n        }\n        v14 = v63;\n        ++v65;\n        LODWORD(v41) = 0;\n        v52 = 0;\n        v38 = v39 + 2;\n      }\n      ++v39;\n      v40 = v52;\n    }\n    while ( v51 != v37 );\n  }\n  return v65;\n}\n", 
            "funcStartAddr": "0x435aa0L", 
            "funcEndAddr": "0x43642aL", 
            "funcName": "sub_435AA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436430(char *s, signed __int64 a2, _QWORD *a3, __int64 *a4, _DWORD *a5)\n{\n  _QWORD *v5; // r13\n  __int64 v6; // r12\n  unsigned int v7; // er14\n  FILE **v8; // rax\n  FILE **v9; // rbx\n  signed int v10; // er14\n  signed __int64 v11; // rbp\n  signed __int64 v12; // rbx\n  signed __int64 v13; // r15\n  _QWORD *v14; // rdx\n  __int64 v15; // r13\n  __int64 v16; // rax\n  signed __int64 v17; // rcx\n  _BOOL4 v18; // eax\n  int v19; // ebp\n  _DWORD *v20; // r14\n  _DWORD *v22; // [rsp+8h] [rbp-50h]\n  FILE **ptr; // [rsp+10h] [rbp-48h]\n  _QWORD *v24; // [rsp+18h] [rbp-40h]\n  __int64 *v25; // [rsp+20h] [rbp-38h]\n\n  v22 = a5;\n  v25 = a4;\n  v24 = a3;\n  v5 = (_QWORD *)sub_4382F0(\"sqio.c\", 1732LL, 128LL);\n  v6 = sub_4382F0(\"sqio.c\", 1733LL, 5760LL);\n  v7 = 0;\n  a2 = (unsigned int)a2;\n  v8 = sub_4327B0(s, a2, 0LL, -1);\n  v9 = v8;\n  if ( v8 )\n  {\n    if ( (unsigned int)sub_433130(v8, a2, v5, v6) )\n    {\n      ptr = v9;\n      v10 = 16;\n      v11 = 1LL;\n      v12 = 360LL;\n      v13 = 1LL;\n      do\n      {\n        if ( v11 == v10 )\n        {\n          v14 = v5;\n          v15 = v10;\n          v10 += 16;\n          v16 = sub_438340(\"sqio.c\", 1742LL, v14, 8 * v15 + 128);\n          v17 = 360 * (v15 + 16);\n          v5 = (_QWORD *)v16;\n          a2 = 1743LL;\n          v6 = sub_438340(\"sqio.c\", 1743LL, v6, v17);\n        }\n        v18 = sub_433130(ptr, a2, &v5[v13], v6 + v12);\n        ++v11;\n        v12 += 360LL;\n        ++v13;\n      }\n      while ( v18 );\n      v19 = v11 - 1;\n      v20 = v22;\n      v9 = ptr;\n    }\n    else\n    {\n      v19 = 0;\n      v20 = v22;\n    }\n    sub_432B30(v9);\n    *v24 = v5;\n    *v25 = v6;\n    *v20 = v19;\n    v7 = 1;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x436430L", 
            "funcEndAddr": "0x43659aL", 
            "funcName": "sub_436430"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4365A0(char *a1)\n{\n  char *v1; // rbx\n  unsigned int v2; // ebp\n\n  if ( a1 )\n  {\n    v1 = (char *)sub_438810(a1);\n    sub_4382C0(v1, 0xFFFFFFFFLL);\n    if ( !strcmp(v1, \"FASTA\") )\n    {\n      v2 = 7;\n    }\n    else if ( !strcmp(v1, \"GENBANK\") )\n    {\n      v2 = 2;\n    }\n    else if ( !strcmp(v1, \"EMBL\") )\n    {\n      v2 = 4;\n    }\n    else if ( !strcmp(v1, \"GCG\") )\n    {\n      v2 = 5;\n    }\n    else if ( !strcmp(v1, \"GCGDATA\") )\n    {\n      v2 = 16;\n    }\n    else if ( !strcmp(v1, \"RAW\") )\n    {\n      v2 = 13;\n    }\n    else if ( !strcmp(v1, \"IG\") )\n    {\n      v2 = 1;\n    }\n    else if ( !strcmp(v1, \"STRIDER\") )\n    {\n      v2 = 6;\n    }\n    else if ( !strcmp(v1, \"IDRAW\") )\n    {\n      v2 = 9;\n    }\n    else if ( !strcmp(v1, \"ZUKER\") )\n    {\n      v2 = 8;\n    }\n    else if ( !strcmp(v1, \"PIR\") )\n    {\n      v2 = 12;\n    }\n    else if ( !strcmp(v1, \"SQUID\") )\n    {\n      v2 = 14;\n    }\n    else if ( !strcmp(v1, \"STOCKHOLM\") )\n    {\n      v2 = 101;\n    }\n    else if ( !strcmp(v1, \"SELEX\") )\n    {\n      v2 = 102;\n    }\n    else if ( !strcmp(v1, \"MSF\") )\n    {\n      v2 = 103;\n    }\n    else if ( !strcmp(v1, \"CLUSTAL\") )\n    {\n      v2 = 104;\n    }\n    else if ( !strcmp(v1, \"A2M\") )\n    {\n      v2 = 105;\n    }\n    else if ( !strcmp(v1, \"PHYLIP\") )\n    {\n      v2 = 106;\n    }\n    else\n    {\n      v2 = 107;\n      if ( strcmp(v1, \"EPS\") )\n        v2 = 0;\n    }\n    free(v1);\n  }\n  else\n  {\n    v2 = 0;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4365a0L", 
            "funcEndAddr": "0x4367edL", 
            "funcName": "sub_4365A0"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_4367F0(int a1)\n{\n  const char *v1; // rbx\n  const char *result; // rax\n\n  v1 = \"unknown\";\n  switch ( a1 )\n  {\n    case 0:\n      return v1;\n    case 1:\n      v1 = \"Intelligenetics\";\n      break;\n    case 2:\n      v1 = \"Genbank\";\n      break;\n    case 4:\n      v1 = \"EMBL\";\n      break;\n    case 5:\n      v1 = \"GCG\";\n      break;\n    case 6:\n      v1 = \"MacStrider\";\n      break;\n    case 7:\n      v1 = \"FASTA\";\n      break;\n    case 8:\n      v1 = \"Zuker\";\n      break;\n    case 9:\n      v1 = \"Idraw Postscript\";\n      break;\n    case 12:\n      v1 = \"PIR\";\n      break;\n    case 13:\n      v1 = \"raw\";\n      break;\n    case 14:\n      v1 = \"SQUID\";\n      break;\n    case 16:\n      v1 = \"GCG data library\";\n      break;\n    case 101:\n      v1 = \"Stockholm\";\n      break;\n    case 102:\n      v1 = \"SELEX\";\n      break;\n    case 103:\n      v1 = \"MSF\";\n      break;\n    case 104:\n      v1 = \"Clustal\";\n      break;\n    case 105:\n      v1 = \"a2m\";\n      break;\n    case 106:\n      v1 = \"Phylip\";\n      break;\n    case 107:\n      v1 = \"EPS\";\n      break;\n    default:\n      sub_4325B0(\"Bad code passed to MSAFormat2String()\");\n      return result;\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x4367f0L", 
            "funcEndAddr": "0x4368a2L", 
            "funcName": "sub_4367F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4368B0(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  signed __int64 v4; // r12\n  _BYTE *v5; // rbp\n  const char *v6; // rax\n  const char *v7; // rbx\n  int v8; // ebp\n  const unsigned __int16 *v9; // rax\n  const char *v10; // rcx\n  bool v11; // sf\n  __int64 v12; // rax\n  const char *v13; // rbx\n  int v14; // ebp\n  const unsigned __int16 *v15; // rax\n  const char *v16; // rcx\n  __int64 v17; // rax\n  __int64 v18; // rax\n  const char *v19; // rdx\n  __int64 v20; // rax\n  const char *v21; // rdx\n  __int64 v23; // [rsp+8h] [rbp-40h]\n  _BYTE *v24; // [rsp+10h] [rbp-38h]\n\n  v1 = sub_4382F0(\"sqio.c\", 1857LL, 360LL * *(signed int *)(a1 + 28));\n  v2 = v1;\n  if ( *(_DWORD *)(a1 + 28) > 0 )\n  {\n    v3 = 0LL;\n    v23 = v1;\n    do\n    {\n      v4 = 360 * v3;\n      v5 = (_BYTE *)(v2 + v4);\n      *(_DWORD *)(v2 + v4) = 0;\n      v6 = *(const char **)(*(_QWORD *)(a1 + 8) + 8 * v3);\n      v24 = (_BYTE *)(v2 + 360 * v3);\n      if ( v6 )\n      {\n        do\n          v7 = v6++;\n        while ( *v7 == 32 );\n        v8 = strlen(v7);\n        if ( v8 - 1 < 0 )\n        {\n          v2 = v23;\n        }\n        else\n        {\n          v9 = *__ctype_b_loc();\n          v10 = &v7[v8 - 1];\n          v2 = v23;\n          while ( v9[*v10] & 0x2000 )\n          {\n            --v10;\n            v11 = v8-- - 2 < 0;\n            if ( v11 )\n            {\n              v8 = 0;\n              break;\n            }\n          }\n        }\n        v7[v8] = 0;\n        v5 = v24;\n        if ( *v7 != 45 )\n        {\n          strncpy((char *)(v2 + v4 + 4), v7, 0x3FuLL);\n          *(_BYTE *)(v2 + v4 + 67) = 0;\n          *v24 |= 1u;\n        }\n      }\n      v12 = sub_42D8E0(a1, v3);\n      if ( v12 )\n      {\n        do\n          v13 = (const char *)v12++;\n        while ( *v13 == 32 );\n        v14 = strlen(v13);\n        if ( v14 - 1 < 0 )\n        {\n          v2 = v23;\n        }\n        else\n        {\n          v15 = *__ctype_b_loc();\n          v16 = &v13[v14 - 1];\n          v2 = v23;\n          while ( v15[*v16] & 0x2000 )\n          {\n            --v16;\n            v11 = v14-- - 2 < 0;\n            if ( v11 )\n            {\n              v14 = 0;\n              break;\n            }\n          }\n        }\n        v13[v14] = 0;\n        v5 = v24;\n        if ( *v13 != 45 )\n        {\n          strncpy((char *)(v2 + v4 + 132), v13, 0x3FuLL);\n          *(_BYTE *)(v2 + v4 + 195) = 0;\n          *v24 |= 4u;\n        }\n      }\n      v17 = sub_42D900(a1, v3);\n      sub_432BF0((__int64)v5, v17, 8u);\n      v18 = *(_QWORD *)(a1 + 112);\n      if ( v18 )\n      {\n        v19 = *(const char **)(v18 + 8 * v3);\n        if ( v19 )\n        {\n          sub_424EF0(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3), *(_DWORD *)(a1 + 24), v19, (_QWORD *)(v2 + v4 + 344));\n          v5[1] |= 2u;\n        }\n      }\n      v20 = *(_QWORD *)(a1 + 120);\n      if ( v20 )\n      {\n        v21 = *(const char **)(v20 + 8 * v3);\n        if ( v21 )\n        {\n          sub_424EF0(*(_QWORD *)(*(_QWORD *)a1 + 8 * v3), *(_DWORD *)(a1 + 24), v21, (_QWORD *)(v2 + v4 + 352));\n          v5[1] |= 4u;\n        }\n      }\n      *(_DWORD *)(v2 + v4 + 324) = sub_425050(*(char **)(*(_QWORD *)a1 + 8 * v3));\n      *v5 |= 0x40u;\n      ++v3;\n    }\n    while ( v3 < *(signed int *)(a1 + 28) );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4368b0L", 
            "funcEndAddr": "0x436b33L", 
            "funcName": "sub_4368B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436B40(int a1, __int64 (__fastcall *a2)(_BYTE *, int *), _QWORD *a3)\n{\n  _QWORD *v3; // rbx\n  __int64 (__fastcall *v4)(_BYTE *, int *); // r14\n  __int64 v5; // rsi\n  __int64 v6; // rsi\n  _BYTE *v7; // rdi\n  _BOOL8 v8; // r15\n  __int64 result; // rax\n  int v10; // ebp\n  int v11; // [rsp+Ch] [rbp-3Ch]\n  _QWORD *v12; // [rsp+10h] [rbp-38h]\n\n  v3 = a3;\n  v4 = a2;\n  v11 = 0;\n  *((_DWORD *)a3 + 34) = 0;\n  *((_DWORD *)a3 + 26) = 0;\n  *((_DWORD *)a3 + 23) = 0;\n  v5 = *((unsigned int *)a3 + 9);\n  if ( a1 )\n  {\n    if ( (signed int)v5 >= 0 )\n      *(_OWORD *)(a3 + 9) = *(_OWORD *)(a3 + 5);\n    sub_436CD0(a3[3], a3);\n  }\n  else if ( (signed int)v5 >= 0 && (unsigned int)sub_439950(*a3, v5, a3 + 9) )\n  {\n    sub_4325B0(\"SSIGetFilePosition() failed\");\n  }\n  v12 = v3 + 5;\n  do\n  {\n    while ( 1 )\n    {\n      v6 = *((unsigned int *)v3 + 9);\n      if ( (signed int)v6 >= 0 && (unsigned int)sub_439950(*v3, v6, v12) )\n        sub_4325B0(\"SSIGetFilePosition() failed\");\n      if ( !sub_438520(v3 + 3, v3 + 4, *v3) )\n        *(_BYTE *)v3[3] = 0;\n      ++*((_DWORD *)v3 + 4);\n      v7 = (_BYTE *)v3[3];\n      LODWORD(v8) = 0;\n      if ( !*v7 )\n      {\n        v8 = feof((FILE *)*v3) != 0;\n        v7 = (_BYTE *)v3[3];\n      }\n      result = v4(v7, &v11);\n      v10 = v8 | result;\n      if ( v11 || !v10 )\n        break;\n      if ( v10 )\n        return result;\n    }\n    result = sub_436CD0(v3[3], v3);\n  }\n  while ( !v10 );\n  return result;\n}\n", 
            "funcStartAddr": "0x436b40L", 
            "funcEndAddr": "0x436c83L", 
            "funcName": "sub_436B40"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436C90(char *s, _DWORD *a2)\n{\n  char *v2; // rcx\n  _BOOL8 result; // rax\n\n  *a2 = 1;\n  v2 = strchr(s, 49);\n  result = 1LL;\n  if ( !v2 )\n    result = strchr(s, 50) != 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x436c90L", 
            "funcEndAddr": "0x436ccdL", 
            "funcName": "sub_436C90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_436CD0(char *a1, __int64 a2)\n{\n  _DWORD *v2; // r14\n  char v3; // bl\n  const unsigned __int16 *v4; // rdx\n  int v5; // ecx\n  unsigned __int64 result; // rax\n  signed int v7; // edx\n  int v8; // ecx\n  int v9; // eax\n  signed int v10; // ecx\n  unsigned __int64 *v11; // r15\n  __int64 v12; // rax\n  int v13; // edx\n  int v14; // esi\n  _BYTE *v15; // r12\n  char v16; // bl\n  const unsigned __int16 **v17; // rax\n  char *v18; // r13\n  int v19; // ecx\n  int v20; // edx\n\n  v2 = (_DWORD *)a2;\n  if ( *(_DWORD *)(a2 + 36) == -1 )\n  {\n    v7 = *(_DWORD *)(a2 + 32);\n    v8 = *(_DWORD *)(a2 + 136);\n    v9 = *(_DWORD *)(a2 + 140);\n    if ( v7 + v8 <= v9 )\n    {\n      v11 = (unsigned __int64 *)(a2 + 112);\n    }\n    else\n    {\n      v10 = 500;\n      if ( v7 > 499 )\n        v10 = *(_DWORD *)(a2 + 32);\n      *(_DWORD *)(a2 + 140) = v10 + v9;\n      v11 = (unsigned __int64 *)(a2 + 112);\n      v12 = sub_438340(\"sqio.c\", 524LL, *(_QWORD *)(a2 + 112), v10 + v9 + 1);\n      *(_QWORD *)(a2 + 112) = v12;\n      *(_BYTE *)(v12 + *(signed int *)(a2 + 140)) = 0;\n      v8 = *(_DWORD *)(a2 + 136);\n    }\n    result = *v11;\n    v15 = (_BYTE *)(*v11 + v8);\n    v16 = *a1;\n    if ( *a1 )\n    {\n      v17 = __ctype_b_loc();\n      v18 = a1 + 1;\n      do\n      {\n        if ( !((*v17)[v16] & 0x2800) )\n          *v15++ = v16;\n        v16 = *v18++;\n      }\n      while ( v16 );\n      result = *v11;\n    }\n    *(_DWORD *)(a2 + 136) = (_DWORD)v15 - result;\n  }\n  else\n  {\n    v3 = *a1;\n    if ( *a1 )\n    {\n      v4 = *__ctype_b_loc();\n      v5 = 0;\n      result = (unsigned __int64)a1;\n      do\n      {\n        v5 += (HIBYTE(v4[v3]) & 0x28u) < 1;\n        v3 = *(_BYTE *)(result++ + 1);\n      }\n      while ( v3 );\n    }\n    else\n    {\n      v5 = 0;\n      result = (unsigned __int64)a1;\n    }\n    *(_DWORD *)(a2 + 136) += v5;\n    v13 = *(_DWORD *)(a2 + 88);\n    if ( v13 )\n    {\n      v14 = *(_DWORD *)(a2 + 92);\n      if ( v14 > 0 )\n      {\n        if ( v13 <= 0 || v14 == v13 )\n        {\n          if ( v13 == -1 )\n            v2[22] = v14;\n        }\n        else\n        {\n          v2[22] = 0;\n        }\n      }\n      v2[23] = v5;\n      if ( v5 > v2[24] )\n        v2[24] = v5;\n    }\n    v19 = v2[25];\n    if ( v19 )\n    {\n      result = (unsigned int)(result - (_DWORD)a1);\n      v20 = v2[26];\n      if ( v20 > 0 )\n      {\n        if ( v19 <= 0 || v20 == v19 )\n        {\n          if ( v19 == -1 )\n            v2[25] = v20;\n        }\n        else\n        {\n          v2[25] = 0;\n        }\n      }\n      v2[26] = result;\n      if ( v2[27] < (signed int)result )\n        v2[27] = result;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x436cd0L", 
            "funcEndAddr": "0x436e6fL", 
            "funcName": "sub_436CD0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436E90(char *s1, _DWORD *a2)\n{\n  char *v2; // rcx\n  _BOOL8 result; // rax\n\n  *a2 = 0;\n  v2 = strstr(s1, \"//\");\n  result = 1LL;\n  if ( !v2 )\n    result = strncmp(s1, \"LOCUS\", 5uLL) == 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x436e90L", 
            "funcEndAddr": "0x436ed0L", 
            "funcName": "sub_436E90"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436ED0(_BYTE *a1, _DWORD *a2)\n{\n  *a2 = 0;\n  return *a1 == 62;\n}\n", 
            "funcStartAddr": "0x436ed0L", 
            "funcEndAddr": "0x436edfL", 
            "funcName": "sub_436ED0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436F10(_BYTE *a1, _DWORD *a2)\n{\n  *a2 = 0;\n  return *a1 == 40;\n}\n", 
            "funcStartAddr": "0x436f10L", 
            "funcEndAddr": "0x436f1fL", 
            "funcName": "sub_436F10"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436F20(char *s1, _DWORD *a2)\n{\n  _BOOL8 result; // rax\n\n  *a2 = 0;\n  if ( !strncmp(s1, \"///\", 3uLL) )\n    result = 1LL;\n  else\n    result = strncmp(s1, \"ENTRY\", 5uLL) == 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x436f20L", 
            "funcEndAddr": "0x436f61L", 
            "funcName": "sub_436F20"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_436F70(_BYTE *a1, _DWORD *a2)\n{\n  *a2 = 0;\n  return *a1 == 62;\n}\n", 
            "funcStartAddr": "0x436f70L", 
            "funcEndAddr": "0x436f7fL", 
            "funcName": "sub_436F70"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_436F80(FILE *s, __int64 a2)\n{\n  fprintf(s, \"%s\\n\", a2);\n  fprintf(s, \"SQUID %s (%s)\\n\", \"1.9g\", \"January 2003\");\n  fprintf(s, \"%s\\n\", \"Copyright (C) 1992-2003 HHMI/Washington University School of Medicine\");\n  fprintf(s, \"%s\\n\", \"Freely distributed under the GNU General Public License (GPL)\");\n  return fwrite(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n\", 0x48uLL, 1uLL, s);\n}\n", 
            "funcStartAddr": "0x436f80L", 
            "funcEndAddr": "0x436fefL", 
            "funcName": "sub_436F80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_436FF0(unsigned int a1)\n{\n  unsigned int v1; // ebx\n  const unsigned __int16 **v2; // rax\n\n  v1 = a1;\n  v2 = __ctype_b_loc();\n  if ( a1 + 128 <= 0x17F && (*v2)[a1] & 0x100 )\n    v1 = (*__ctype_tolower_loc())[a1];\n  return v1;\n}\n", 
            "funcStartAddr": "0x436ff0L", 
            "funcEndAddr": "0x437033L", 
            "funcName": "sub_436FF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437040(unsigned int a1)\n{\n  unsigned int v1; // ebx\n  const unsigned __int16 **v2; // rax\n\n  v1 = a1;\n  v2 = __ctype_b_loc();\n  if ( a1 + 128 <= 0x17F && (*v2)[a1] & 0x200 )\n    v1 = (*__ctype_toupper_loc())[a1];\n  return v1;\n}\n", 
            "funcStartAddr": "0x437040L", 
            "funcEndAddr": "0x437083L", 
            "funcName": "sub_437040"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_437090(__int64 a1, __int64 a2, signed int a3, float *a4, float *a5, float *a6)\n{\n  float *v6; // r14\n  __int64 v7; // r10\n  __m128 v8; // xmm0\n  __int64 v9; // rbx\n  float v10; // xmm2_4\n  float v11; // xmm1_4\n  double v12; // xmm4_8\n  __m128 v13; // xmm0\n  signed __int64 v14; // r11\n  signed __int64 v15; // rbx\n  __int64 v16; // rax\n  float v17; // xmm7_4\n  __int64 v18; // rax\n  float v19; // xmm3_4\n  __m128 v20; // xmm4\n  __m128 v21; // xmm5\n  float v22; // xmm6_4\n  double v23; // xmm0_8\n  double v24; // xmm3_8\n  double v25; // xmm1_8\n  double v26; // ST08_8\n  double v27; // xmm0_8\n  double v28; // xmm0_8\n  float v29; // xmm0_4\n\n  v6 = a6;\n  if ( a3 <= 0 )\n  {\n    v10 = 0.0;\n    v11 = 0.0 / (float)a3;\n    v12 = 0.0;\n    v13.m128_f32[0] = 0.0 / (float)a3;\n    goto LABEL_16;\n  }\n  v7 = a3 & 3;\n  if ( (unsigned __int64)(unsigned int)a3 - 1 >= 3 )\n  {\n    v8 = 0LL;\n    v9 = 0LL;\n    do\n    {\n      v8 = _mm_add_ps(\n             _mm_unpacklo_ps((__m128)*(unsigned int *)(a1 + 4 * v9 + 12), (__m128)*(unsigned int *)(a2 + 4 * v9 + 12)),\n             _mm_add_ps(\n               _mm_unpacklo_ps((__m128)*(unsigned int *)(a1 + 4 * v9 + 8), (__m128)*(unsigned int *)(a2 + 4 * v9 + 8)),\n               _mm_add_ps(\n                 _mm_unpacklo_ps((__m128)*(unsigned int *)(a1 + 4 * v9 + 4), (__m128)*(unsigned int *)(a2 + 4 * v9 + 4)),\n                 _mm_add_ps(\n                   _mm_unpacklo_ps((__m128)*(unsigned int *)(a1 + 4 * v9), (__m128)*(unsigned int *)(a2 + 4 * v9)),\n                   v8))));\n      v9 += 4LL;\n    }\n    while ( (unsigned int)a3 - v7 != v9 );\n    if ( !(a3 & 3) )\n      goto LABEL_11;\n    goto LABEL_9;\n  }\n  v8 = 0LL;\n  v9 = 0LL;\n  if ( a3 & 3 )\n  {\nLABEL_9:\n    v14 = a2 + 4 * v9;\n    v15 = a1 + 4 * v9;\n    v16 = 0LL;\n    do\n    {\n      v8 = _mm_add_ps(\n             v8,\n             _mm_unpacklo_ps((__m128)*(unsigned int *)(v15 + 4 * v16), (__m128)*(unsigned int *)(v14 + 4 * v16)));\n      ++v16;\n    }\n    while ( v7 != v16 );\n  }\nLABEL_11:\n  v13 = _mm_div_ps(v8, _mm_cvtepi32_ps(_mm_shuffle_epi32(_mm_cvtsi32_si128(a3), 80)));\n  LODWORD(v11) = (unsigned __int128)_mm_shuffle_ps(v13, v13, 229);\n  if ( a3 > 0 )\n  {\n    v17 = 0.0;\n    v18 = 0LL;\n    v19 = 0.0;\n    v10 = 0.0;\n    do\n    {\n      v20 = (__m128)*(unsigned int *)(a2 + 4 * v18);\n      v21 = _mm_sub_ps(_mm_unpacklo_ps((__m128)*(unsigned int *)(a1 + 4 * v18), v20), v13);\n      LODWORD(v22) = (unsigned __int128)_mm_shuffle_ps(v21, v21, 229);\n      v10 = v10 + (float)(v21.m128_f32[0] * v21.m128_f32[0]);\n      v19 = v19 + (float)((float)(v20.m128_f32[0] - v13.m128_f32[0]) * v22);\n      v17 = v17 + (float)(v22 * v21.m128_f32[0]);\n      ++v18;\n    }\n    while ( a3 != v18 );\n    v12 = v19;\n    goto LABEL_17;\n  }\n  v12 = 0.0;\n  v10 = 0.0;\nLABEL_16:\n  v17 = 0.0;\nLABEL_17:\n  *a5 = v17 / v10;\n  *a4 = v11 - (float)((float)(v17 / v10) * v13.m128_f32[0]);\n  v23 = v10;\n  v24 = 0.0;\n  if ( v10 < 0.0 )\n  {\n    v26 = v12;\n    v27 = sqrt(v23);\n    v24 = 0.0;\n    v12 = v26;\n    v25 = v27;\n  }\n  else\n  {\n    v25 = sqrt(v23);\n  }\n  if ( v12 < v24 )\n    v28 = sqrt(v12);\n  else\n    v28 = sqrt(v12);\n  v29 = v17 / (v25 * v28);\n  *v6 = v29;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x437090L", 
            "funcEndAddr": "0x43728aL", 
            "funcName": "sub_437090"
        }, 
        {
            "decompiledFuncCode": "double __fastcall sub_437380(double a1)\n{\n  double v1; // xmm0_8\n  double v2; // ST08_8\n  double v3; // ST00_8\n  double v4; // xmm1_8\n  double v5; // xmm3_8\n  double v6; // xmm1_8\n  double v7; // xmm2_8\n  double v8; // xmm1_8\n  double v9; // xmm3_8\n  double v10; // xmm1_8\n  double v11; // xmm2_8\n  double v12; // xmm1_8\n  double v13; // xmm3_8\n  double v14; // xmm1_8\n  double v15; // ST10_8\n\n  if ( a1 <= 0.0 )\n    return 999999.0;\n  v1 = a1 + -1.0;\n  v2 = v1;\n  v3 = v1 + 11.0;\n  v4 = v1 + 11.0 + -1.0;\n  v5 = -0.0002319827630494973 / v4 + 1.251639670050933e-10 / (v1 + 11.0) + 1.0;\n  v6 = v4 + -1.0;\n  v7 = 0.2908143421162229 / v6 + v5;\n  v8 = v6 + -1.0;\n  v9 = -31.55153906098611 / v8 + v7;\n  v10 = v8 + -1.0;\n  v11 = 878.585593089525 / v10 + v9;\n  v12 = v10 + -1.0;\n  v13 = -9601.592329182778 / v12 + v11;\n  v14 = v12 + -1.0;\n  v15 = log(\n          46945.80336184385 / (v14 + -1.0 + -1.0 + -1.0 + -1.0)\n        + -156060.5207784446 / (v14 + -1.0 + -1.0 + -1.0)\n        + 206504.9568014106 / (v14 + -1.0 + -1.0)\n        + -138893.4775095388 / (v14 + -1.0)\n        + 50317.96415085709 / v14\n        + v13);\n  return log(v3 + 0.5) * (v2 + 0.5) + 0.9189385329999999 - (v3 + 0.5) + v15;\n}\n", 
            "funcStartAddr": "0x437380L", 
            "funcEndAddr": "0x4374edL", 
            "funcName": "sub_437380"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_4374F0(signed int a1, int a2)\n{\n  __int64 *v2; // r12\n  __int64 v3; // r15\n  __int64 v4; // rax\n  __int64 v5; // r8\n  __int64 v6; // r14\n  signed __int64 v7; // rax\n  signed __int64 v8; // rdx\n  signed __int64 v9; // r9\n  signed __int64 v10; // rdi\n  signed __int64 v11; // rcx\n  __int64 v12; // r8\n  signed __int64 v13; // rsi\n  __int64 v14; // rbp\n  __int64 *v15; // rcx\n  signed __int64 v16; // rax\n  signed __int64 v17; // r15\n  __int64 v18; // r14\n\n  v2 = (__int64 *)sub_4382F0(\"sre_math.c\", 172LL, 8LL * a1);\n  v3 = a2;\n  v4 = sub_4382F0(\"sre_math.c\", 173LL, 4 * a2 * (signed __int64)a1);\n  *v2 = v4;\n  if ( a1 >= 2 )\n  {\n    v2[1] = v4 + 4LL * a2;\n    if ( a1 != 2 )\n    {\n      v5 = (unsigned int)a1;\n      v6 = ((_BYTE)a1 + 2) & 3;\n      if ( (unsigned __int64)(unsigned int)a1 - 3 < 3 )\n      {\n        v7 = 2LL;\n        if ( !(((_BYTE)a1 + 2) & 3) )\n          return v2;\n        goto LABEL_9;\n      }\n      v8 = 12LL * a2;\n      v9 = 16LL * a2;\n      v10 = 20LL * a2;\n      v11 = 8LL * a2;\n      v12 = v5 - v6;\n      v7 = 2LL;\n      v13 = 16LL * a2;\n      do\n      {\n        v2[v7] = v11 + *v2;\n        v14 = *v2;\n        v2[v7 + 1] = v8 + *v2;\n        v2[v7 + 2] = v13 + v14;\n        v2[v7 + 3] = v10 + *v2;\n        v7 += 4LL;\n        v8 += v9;\n        v10 += v9;\n        v13 += v9;\n        v11 += v9;\n      }\n      while ( v12 != v7 );\n      if ( (_DWORD)v6 )\n      {\nLABEL_9:\n        v15 = &v2[v7];\n        v16 = 4 * v3 * v7;\n        v17 = 4 * v3;\n        v18 = -v6;\n        do\n        {\n          *v15 = v16 + *v2;\n          ++v15;\n          v16 += v17;\n          ++v18;\n        }\n        while ( v18 );\n        return v2;\n      }\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4374f0L", 
            "funcEndAddr": "0x437633L", 
            "funcName": "sub_4374F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_437640(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x437640L", 
            "funcEndAddr": "0x437655L", 
            "funcName": "sub_437640"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_437660(signed int a1, int a2)\n{\n  signed __int64 v2; // rbp\n  __int64 *v3; // r13\n  __int64 v4; // r15\n  __int64 v5; // rax\n  __int64 v6; // r8\n  __int64 v7; // r14\n  signed __int64 v8; // rax\n  signed __int64 v9; // rdx\n  signed __int64 v10; // r9\n  signed __int64 v11; // rdi\n  signed __int64 v12; // rbp\n  __int64 v13; // r8\n  signed __int64 v14; // rsi\n  __int64 v15; // rcx\n  __int64 *v16; // rcx\n  signed __int64 v17; // rax\n  signed __int64 v18; // r15\n  __int64 v19; // r14\n\n  v2 = 8LL * a1;\n  v3 = (__int64 *)sub_4382F0(\"sre_math.c\", 190LL, v2);\n  v4 = a2;\n  v5 = sub_4382F0(\"sre_math.c\", 191LL, a2 * v2);\n  *v3 = v5;\n  if ( a1 >= 2 )\n  {\n    v3[1] = v5 + 8LL * a2;\n    if ( a1 != 2 )\n    {\n      v6 = (unsigned int)a1;\n      v7 = ((_BYTE)a1 + 2) & 3;\n      if ( (unsigned __int64)(unsigned int)a1 - 3 < 3 )\n      {\n        v8 = 2LL;\n        if ( !(((_BYTE)a1 + 2) & 3) )\n          return v3;\n        goto LABEL_9;\n      }\n      v9 = 24LL * a2;\n      v10 = 32LL * a2;\n      v11 = 40LL * a2;\n      v12 = 16LL * a2;\n      v13 = v6 - v7;\n      v8 = 2LL;\n      v14 = 32LL * a2;\n      do\n      {\n        v3[v8] = v12 + *v3;\n        v15 = *v3;\n        v3[v8 + 1] = *v3 + v9;\n        v3[v8 + 2] = v14 + v15;\n        v3[v8 + 3] = v11 + *v3;\n        v8 += 4LL;\n        v9 += v10;\n        v11 += v10;\n        v14 += v10;\n        v12 += v10;\n      }\n      while ( v13 != v8 );\n      if ( (_DWORD)v7 )\n      {\nLABEL_9:\n        v16 = &v3[v8];\n        v17 = 8 * v4 * v8;\n        v18 = 8 * v4;\n        v19 = -v7;\n        do\n        {\n          *v16 = v17 + *v3;\n          ++v16;\n          v17 += v18;\n          ++v19;\n        }\n        while ( v19 );\n        return v3;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x437660L", 
            "funcEndAddr": "0x4377b9L", 
            "funcName": "sub_437660"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4377C0(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x4377c0L", 
            "funcEndAddr": "0x4377d5L", 
            "funcName": "sub_4377C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4377E0(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5, int a6)\n{\n  __int64 v6; // r9\n  __int64 v7; // r12\n  __int64 v8; // rbp\n  __int64 v9; // rcx\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  float v12; // xmm0_4\n  int v13; // er14\n  float v14; // xmm1_4\n  int v15; // [rsp+0h] [rbp-34h]\n\n  v15 = a6;\n  if ( (signed int)a4 > 0 )\n  {\n    v6 = a4;\n    v7 = 0LL;\n    do\n    {\n      if ( v15 > 0 )\n      {\n        v8 = *(_QWORD *)(a3 + 8 * v7);\n        v9 = 0LL;\n        do\n        {\n          *(_DWORD *)(v8 + 4 * v9) = 0;\n          if ( a5 > 0 )\n          {\n            v10 = *(_QWORD *)(a1 + 8 * v7);\n            v11 = *(_QWORD *)(a2 + 8LL * a5);\n            v12 = 0.0;\n            if ( a5 != 1 )\n            {\n              v12 = 0.0;\n              v13 = (a5 & 1) - a5;\n              do\n              {\n                v14 = (float)(*(float *)(v10 + 4LL * a5) * *(float *)(v11 + 4 * v9)) + v12;\n                *(float *)(v8 + 4 * v9) = v14;\n                v12 = (float)(*(float *)(v10 + 4LL * a5) * *(float *)(v11 + 4 * v9)) + v14;\n                *(float *)(v8 + 4 * v9) = v12;\n                v13 += 2;\n              }\n              while ( v13 );\n            }\n            if ( a5 & 1 )\n              *(float *)(v8 + 4 * v9) = v12 + (float)(*(float *)(v10 + 4LL * a5) * *(float *)(v11 + 4 * v9));\n          }\n          ++v9;\n        }\n        while ( v9 != v15 );\n      }\n      ++v7;\n    }\n    while ( v7 != v6 );\n  }\n}\n", 
            "funcStartAddr": "0x4377e0L", 
            "funcEndAddr": "0x4378dfL", 
            "funcName": "sub_4377E0"
        }, 
        {
            "decompiledFuncCode": "__int128 __usercall sub_4378E0@<xmm0>(double a1@<xmm0>, __m128d a2@<xmm1>)\n{\n  double v2; // xmm11_8\n  signed int v3; // eax\n  __m128d v4; // xmm5\n  double v5; // xmm4_8\n  __m128 v6; // xmm3\n  __m128 v7; // xmm2\n  double v8; // xmm7_8\n  __m128d v9; // xmm7\n  __m128 v10; // xmm6\n  double v11; // xmm0_8\n  char *v12; // rdi\n  signed int v13; // eax\n  double v14; // xmm6_8\n  double v15; // ST00_8\n  double v16; // xmm0_8\n  __int128 v17; // xmm1\n  double v18; // ST00_8\n  double v19; // xmm0_8\n\n  v2 = a1;\n  if ( a1 <= 0.0 )\n    sub_4325B0(\"IncompleteGamma(): a must be > 0\", *(_QWORD *)&a2.m128d_f64[0]);\n  if ( a2.m128d_f64[0] < 0.0 )\n    sub_4325B0(\"IncompleteGamma(): x must be >= 0\", *(_QWORD *)&a2.m128d_f64[0]);\n  if ( a2.m128d_f64[0] <= a1 + 1.0 )\n  {\n    *(double *)v7.m128_u64 = 1.0 / a1;\n    v13 = 1;\n    v11 = *(double *)&xmmword_4403B0;\n    v4.m128d_f64[0] = 0.0000001;\n    v14 = 1.0 / v2;\n    while ( 1 )\n    {\n      v5 = (double)v13 + v2;\n      *(double *)v7.m128_u64 = a2.m128d_f64[0] / v5 * *(double *)v7.m128_u64;\n      v14 = v14 + *(double *)v7.m128_u64;\n      v6.m128_u64[0] = COERCE_UNSIGNED_INT64(*(double *)v7.m128_u64 / v14) & xmmword_4403B0;\n      if ( *(double *)v6.m128_u64 < 0.0000001 )\n        break;\n      if ( (unsigned int)++v13 > 0x270F )\n      {\n        v12 = \"IncompleteGamma(): failed to converge using series approx\";\nLABEL_16:\n        sub_4325B0(\n          v12,\n          v11,\n          a2.m128d_f64[0],\n          *(double *)v7.m128_u64,\n          *(double *)v6.m128_u64,\n          v5,\n          v4.m128d_f64[0],\n          *(_QWORD *)&a2.m128d_f64[0]);\n      }\n    }\n    v18 = log(a2.m128d_f64[0]) * v2 - a2.m128d_f64[0];\n    v19 = sub_437380(v2);\n    v17 = 0x3FF0000000000000uLL;\n    *(double *)&v17 = 1.0 - v14 * exp(v18 - v19);\n  }\n  else\n  {\n    v3 = 1;\n    v4 = a2;\n    v5 = 1.0;\n    v6 = 0LL;\n    v7 = (__m128)0x3FF0000000000000uLL;\n    while ( 1 )\n    {\n      v8 = (double)v3 - v2;\n      *(double *)v6.m128_u64 = *(double *)v6.m128_u64 * v8 + *(double *)v7.m128_u64;\n      v5 = v5 * v8 + v4.m128d_f64[0];\n      *(_QWORD *)&v9.m128d_f64[1] = v7.m128_u64[1];\n      v9.m128d_f64[0] = *(double *)v7.m128_u64 * (double)v3 + *(double *)v6.m128_u64 * a2.m128d_f64[0];\n      v4.m128d_f64[0] = v4.m128d_f64[0] * (double)v3 + v5 * a2.m128d_f64[0];\n      v6 = (__m128)_mm_unpckl_pd((__m128d)v6, v9);\n      if ( v4.m128d_f64[0] != 0.0 )\n      {\n        v5 = v5 / v4.m128d_f64[0];\n        v6 = (__m128)_mm_div_pd((__m128d)v6, _mm_unpckl_pd(v4, v4));\n        v4 = (__m128d)0x3FF0000000000000uLL;\n      }\n      v10 = _mm_movehl_ps(v6, v6);\n      *(_QWORD *)&v11 = COERCE_UNSIGNED_INT64((*(double *)v10.m128_u64 - *(double *)v7.m128_u64) / *(double *)v10.m128_u64) & xmmword_4403B0;\n      if ( v11 < 0.0000001 )\n        break;\n      ++v3;\n      v7 = v10;\n      if ( (unsigned int)v3 > 0x63 )\n      {\n        v12 = \"IncompleteGamma(): failed to converge using continued fraction approx\";\n        goto LABEL_16;\n      }\n    }\n    v15 = log(a2.m128d_f64[0]) * v2 - a2.m128d_f64[0];\n    v16 = sub_437380(v2);\n    *((_QWORD *)&v17 + 1) = 0LL;\n    *(double *)&v17 = exp(v15 - v16) * *(double *)v10.m128_u64;\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x4378e0L", 
            "funcEndAddr": "0x437b57L", 
            "funcName": "sub_4378E0"
        }, 
        {
            "decompiledFuncCode": "double sub_437B60()\n{\n  signed __int64 v0; // rcx\n  signed __int64 v1; // rdi\n  signed __int64 v2; // rsi\n  unsigned __int64 v3; // rdx\n  signed __int64 v4; // rax\n  signed __int64 v5; // rax\n  unsigned __int64 v6; // rdx\n  signed __int64 v7; // rax\n  signed __int64 v8; // rax\n  signed __int64 v9; // rdx\n  unsigned __int64 v10; // rdx\n  signed __int64 v11; // rax\n  signed __int64 v12; // rsi\n  signed __int64 v13; // rax\n  unsigned __int64 v14; // rdx\n  signed __int64 v15; // rax\n  signed __int64 v16; // rcx\n  signed __int64 v17; // rdx\n  signed __int64 v18; // rax\n  __int64 v19; // rax\n  __int64 v20; // rcx\n  signed __int64 v21; // rsi\n  signed __int64 v22; // rdx\n\n  v0 = dword_45004C;\n  if ( dword_45004C <= 0LL )\n  {\n    v2 = qword_463B30;\n    v0 = qword_463B38;\n  }\n  else\n  {\n    qword_463B30 = dword_45004C;\n    qword_463B38 = dword_45004C;\n    v1 = -512LL;\n    v2 = dword_45004C;\n    do\n    {\n      v3 = ((unsigned __int64)(v2 + ((unsigned __int128)(-7183739866224372601LL * (signed __int128)v2) >> 64)) >> 63)\n         + ((signed __int64)(v2 + ((unsigned __int128)(-7183739866224372601LL * (signed __int128)v2) >> 64)) >> 15);\n      v4 = 40014 * (v2 - 53668 * v3);\n      v3 *= -12211LL;\n      v2 = v4 + v3 + 2147483563;\n      v5 = v3 + v4;\n      if ( v5 >= 0 )\n        v2 = v5;\n      v6 = ((unsigned __int64)((unsigned __int128)(5726900650010560005LL * (signed __int128)v0) >> 64) >> 63)\n         + ((signed __int64)((unsigned __int128)(5726900650010560005LL * (signed __int128)v0) >> 64) >> 14);\n      v7 = 40692 * (v0 - 52774 * v6);\n      v6 *= -3791LL;\n      v0 = v7 + v6 + 2147483399;\n      v8 = v6 + v7;\n      if ( v8 >= 0 )\n        v0 = v8;\n      v9 = v2 - v0 + 2147483563;\n      if ( v2 - v0 >= 0 )\n        v9 = v2 - v0;\n      *(_QWORD *)((char *)qword_463D50 + v1) = v9;\n      v1 += 8LL;\n    }\n    while ( v1 );\n    qword_463B30 = v2;\n    qword_463B38 = v0;\n    dword_45004C = 0;\n  }\n  v10 = ((unsigned __int64)(v2 + ((unsigned __int128)(-7183739866224372601LL * (signed __int128)v2) >> 64)) >> 63)\n      + ((signed __int64)(v2 + ((unsigned __int128)(-7183739866224372601LL * (signed __int128)v2) >> 64)) >> 15);\n  v11 = 40014 * (v2 - 53668 * v10);\n  v10 *= -12211LL;\n  v12 = v11 + v10 + 2147483563;\n  v13 = v10 + v11;\n  if ( v13 >= 0 )\n    v12 = v13;\n  qword_463B30 = v12;\n  v14 = ((unsigned __int64)((unsigned __int128)(5726900650010560005LL * (signed __int128)v0) >> 64) >> 63)\n      + ((signed __int64)((unsigned __int128)(5726900650010560005LL * (signed __int128)v0) >> 64) >> 14);\n  v15 = 40692 * (v0 - 52774 * v14);\n  v16 = -3791LL * v14;\n  v17 = v15 - 3791 * v14 + 2147483399;\n  v18 = v16 + v15;\n  if ( v18 >= 0 )\n    v17 = v18;\n  qword_463B38 = v17;\n  v19 = (signed int)((double)(signed int)qword_463B40 / 2147483563.0 * 64.0);\n  v20 = qword_463B50[v19];\n  qword_463B40 = qword_463B50[v19];\n  v21 = v12 - v17;\n  v22 = v21 + 2147483563;\n  if ( v21 >= 0 )\n    v22 = v21;\n  qword_463B50[v19] = v22;\n  return (double)(signed int)v20 / 2147483563.0;\n}\n", 
            "funcStartAddr": "0x437b60L", 
            "funcEndAddr": "0x437d65L", 
            "funcName": "sub_437B60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_437D70(unsigned int a1)\n{\n  __int64 result; // rax\n  signed int v2; // ecx\n\n  result = -a1;\n  if ( (signed int)-a1 < 1 )\n    result = a1;\n  v2 = 42;\n  if ( (_DWORD)result )\n    v2 = result;\n  dword_45004C = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x437d70L", 
            "funcEndAddr": "0x437d88L", 
            "funcName": "sub_437D70"
        }, 
        {
            "decompiledFuncCode": "void sub_437DF0()\n{\n  __m128d v0; // xmm0\n  __m128d v1; // xmm3\n  double v2; // xmm5_8\n  signed __int64 v3; // rbx\n  double v4; // xmm5_8\n  double v5; // xmm0_8\n  double v6; // xmm5_8\n  double v7; // xmm5_8\n  double v8; // xmm0_8\n  signed __int64 i; // rax\n  double v10; // ST08_8\n  double v11; // xmm1_8\n  double v12; // xmm0_8\n  double v13; // ST08_8\n  double v14; // ST08_8\n  double v15; // xmm0_8\n  double v16; // ST08_8\n  double v17; // [rsp+10h] [rbp-68h]\n  double v18; // [rsp+10h] [rbp-68h]\n  double v19; // [rsp+28h] [rbp-50h]\n  double v20; // [rsp+28h] [rbp-50h]\n  double v21; // [rsp+48h] [rbp-30h]\n  double v22; // [rsp+48h] [rbp-30h]\n  double v23; // [rsp+68h] [rbp-10h]\n\n  v0.m128d_f64[0] = sub_437B60();\n  v1.m128d_f64[0] = 0.5;\n  v2 = (v0.m128d_f64[0] - COERCE_DOUBLE(*(_OWORD *)&_mm_cmplt_sd(v1, v0) & 0x3FF0000000000000LL) + v0.m128d_f64[0])\n     * 32.0;\n  v3 = 31LL;\n  if ( (signed int)v2 != 32LL )\n    v3 = (unsigned int)(signed int)v2;\n  if ( v3 )\n  {\n    v4 = v2 - (double)(signed int)v3;\n    v5 = qword_446F08[v3];\n    if ( v5 >= v4 )\n    {\n      v18 = *(double *)&qword_446D08[v3];\n      v23 = qword_446F08[v3];\n      v22 = qword_446D10[v3] - *(double *)&qword_446D08[v3];\n      while ( 1 )\n      {\n        v14 = v4;\n        v15 = sub_437B60();\n        v4 = v14;\n        if ( v14 > (v15 * v22 * 0.5 + v18) * (v15 * v22) )\n          break;\n        while ( 1 )\n        {\n          v16 = v4;\n          v20 = sub_437B60();\n          v4 = sub_437B60();\n          if ( v16 < v20 )\n            break;\n          if ( v4 > v20 )\n            return;\n        }\n        v5 = v23;\n        if ( v23 < v4 )\n          goto LABEL_5;\n      }\n    }\n    else\n    {\nLABEL_5:\n      v6 = (v4 - v5) * qword_447008[v3];\n    }\n  }\n  else\n  {\n    v7 = v2 + v2;\n    v8 = 2.153875;\n    for ( i = 6LL; v7 < 1.0; v7 = v7 + v7 )\n      v8 = v8 + qword_446E08[i++];\n    v21 = qword_446E08[i];\n    v17 = v8;\n    v10 = (0.5 * ((v7 + -1.0) * v21) + v8) * ((v7 + -1.0) * v21);\n    v11 = sub_437B60();\n    if ( v11 <= v10 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v19 = sub_437B60();\n          v12 = sub_437B60();\n          if ( v11 < v19 )\n            break;\n          v11 = v12;\n          if ( v12 > v19 )\n            return;\n        }\n        v13 = v12 * v21;\n        v11 = sub_437B60();\n      }\n      while ( v11 <= (v13 * 0.5 + v17) * v13 );\n    }\n  }\n}\n", 
            "funcStartAddr": "0x437df0L", 
            "funcEndAddr": "0x4380fdL", 
            "funcName": "sub_437DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_438100(__int64 a1, signed int a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  __int64 result; // rax\n\n  v2 = sub_437B60();\n  if ( a2 <= 0 )\n    return (unsigned int)(signed int)((double)a2 * sub_437B60());\n  v3 = 0.0;\n  result = 0LL;\n  while ( 1 )\n  {\n    v3 = v3 + *(double *)(a1 + 8 * result);\n    if ( v3 > v2 )\n      break;\n    if ( ++result >= a2 )\n      return (unsigned int)(signed int)((double)a2 * sub_437B60());\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x438100L", 
            "funcEndAddr": "0x43814fL", 
            "funcName": "sub_438100"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_438150(__int64 a1, signed int a2)\n{\n  double v2; // xmm0_8\n  float v3; // xmm0_4\n  float v4; // xmm1_4\n  __int64 result; // rax\n\n  v2 = sub_437B60();\n  if ( a2 <= 0 )\n    return (unsigned int)(signed int)((double)a2 * sub_437B60());\n  v3 = v2;\n  v4 = 0.0;\n  result = 0LL;\n  while ( 1 )\n  {\n    v4 = v4 + *(float *)(a1 + 4 * result);\n    if ( v4 > v3 )\n      break;\n    if ( ++result >= a2 )\n      return (unsigned int)(signed int)((double)a2 * sub_437B60());\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x438150L", 
            "funcEndAddr": "0x43819eL", 
            "funcName": "sub_438150"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4381A0(char *src)\n{\n  size_t v1; // rax\n  char *v2; // rax\n  char *v3; // rbx\n\n  if ( !src )\n    return 0LL;\n  v1 = strlen(src);\n  v2 = (char *)malloc(v1 + 1);\n  v3 = v2;\n  if ( !v2 )\n    return 0LL;\n  strcpy(v2, src);\n  return v3;\n}\n", 
            "funcStartAddr": "0x4381a0L", 
            "funcEndAddr": "0x4381dfL", 
            "funcName": "sub_4381A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4381E0(const char *a1)\n{\n  __int64 result; // rax\n  int v2; // ebp\n  const unsigned __int16 *v3; // rax\n\n  LODWORD(result) = strlen(a1);\n  v2 = result - 1;\n  if ( (signed int)result - 1 >= 0 )\n  {\n    v3 = *__ctype_b_loc();\n    while ( v3[a1[v2]] & 0x2000 )\n    {\n      if ( --v2 < 0 )\n      {\n        LODWORD(result) = 0;\n        goto LABEL_7;\n      }\n    }\n    LODWORD(result) = v2 + 1;\n  }\nLABEL_7:\n  result = (signed int)result;\n  a1[(signed int)result] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4381e0L", 
            "funcEndAddr": "0x43822aL", 
            "funcName": "sub_4381E0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_438290(char *a1)\n{\n  char result; // al\n  char *v2; // rbx\n\n  result = *a1;\n  if ( *a1 )\n  {\n    v2 = a1 + 1;\n    do\n    {\n      *(v2 - 1) = sub_436FF0(result);\n      result = *v2++;\n    }\n    while ( result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x438290L", 
            "funcEndAddr": "0x4382b8L", 
            "funcName": "sub_438290"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_4382C0(char *a1)\n{\n  char result; // al\n  char *v2; // rbx\n\n  result = *a1;\n  if ( *a1 )\n  {\n    v2 = a1 + 1;\n    do\n    {\n      *(v2 - 1) = sub_437040(result);\n      result = *v2++;\n    }\n    while ( result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4382c0L", 
            "funcEndAddr": "0x4382e8L", 
            "funcName": "sub_4382C0"
        }, 
        {
            "decompiledFuncCode": "void *__usercall sub_4382F0@<rax>(__int64 a1@<rax>, size_t a2@<rdx>, __int64 a3@<rdi>, unsigned int a4@<esi>)\n{\n  size_t v4; // rbx\n  void *result; // rax\n  __int64 v6; // [rsp-8h] [rbp-28h]\n\n  v6 = a1;\n  v4 = a2;\n  result = malloc(a2);\n  if ( !result )\n    sub_4325B0(\"malloc of %ld bytes failed: file %s line %d\", v4, a3, a4, v6);\n  return result;\n}\n", 
            "funcStartAddr": "0x4382f0L", 
            "funcEndAddr": "0x438333L", 
            "funcName": "sub_4382F0"
        }, 
        {
            "decompiledFuncCode": "void *__usercall sub_438340@<rax>(__int64 a1@<rax>, void *a2@<rdx>, size_t a3@<rcx>, __int64 a4@<rdi>, unsigned int a5@<esi>)\n{\n  size_t v5; // rbx\n  void *result; // rax\n  __int64 v7; // [rsp-8h] [rbp-28h]\n\n  v7 = a1;\n  v5 = a3;\n  result = realloc(a2, a3);\n  if ( !result )\n    sub_4325B0(\"realloc of %ld bytes failed: file %s line %d\", v5, a4, a5, v7);\n  return result;\n}\n", 
            "funcStartAddr": "0x438340L", 
            "funcEndAddr": "0x438386L", 
            "funcName": "sub_438340"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_438390(void *ptr, unsigned int a2)\n{\n  __int64 v2; // r15\n  void **v3; // rbx\n\n  if ( ptr )\n  {\n    if ( (signed int)a2 > 0 )\n    {\n      v2 = a2;\n      v3 = (void **)ptr;\n      do\n      {\n        if ( *v3 )\n          free(*v3);\n        ++v3;\n        --v2;\n      }\n      while ( v2 );\n    }\n    free(ptr);\n  }\n}\n", 
            "funcStartAddr": "0x438390L", 
            "funcEndAddr": "0x4383daL", 
            "funcName": "sub_438390"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4383E0(void *ptr, int a2, int a3)\n{\n  int v3; // er14\n  _QWORD *v4; // r12\n  __int64 v5; // rbx\n  void **v6; // rdi\n  __int64 v7; // rbp\n\n  v3 = a3;\n  v4 = ptr;\n  if ( ptr )\n  {\n    if ( a2 > 0 )\n    {\n      v5 = 0LL;\n      do\n      {\n        v6 = (void **)v4[v5];\n        if ( v6 )\n        {\n          if ( v3 > 0 )\n          {\n            v7 = 0LL;\n            do\n            {\n              if ( v6[v7] )\n              {\n                free(v6[v7]);\n                v6 = (void **)v4[v5];\n              }\n              ++v7;\n            }\n            while ( v3 != v7 );\n          }\n          free(v6);\n        }\n        ++v5;\n      }\n      while ( v5 != a2 );\n    }\n    free(v4);\n  }\n}\n", 
            "funcStartAddr": "0x4383e0L", 
            "funcEndAddr": "0x438471L", 
            "funcName": "sub_4383E0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__usercall sub_438480@<rax>(__int64 a1@<rax>, signed int a2@<edx>, int a3@<ecx>, __int64 a4@<rdi>, __int64 a5@<rsi>)\n{\n  __int64 v5; // r12\n  signed int v6; // er15\n  size_t v7; // rbx\n  _BYTE *v8; // rax\n  _BYTE *v9; // r14\n  __int64 v10; // rbx\n  __int64 v12; // [rsp+0h] [rbp-38h]\n  _BYTE *v13; // [rsp+0h] [rbp-38h]\n\n  v12 = a1;\n  LODWORD(v5) = a3;\n  v6 = a2;\n  v7 = a3 + 1;\n  v8 = malloc(v7);\n  v9 = v8;\n  if ( !v8 )\n    sub_4325B0(\"malloc of %ld bytes failed: file %s line %d\", v7, \"sre_string.c\", 199LL, v12);\n  if ( (signed int)v5 <= 0 )\n  {\n    v5 = 0LL;\n  }\n  else\n  {\n    v5 = (unsigned int)v5;\n    v10 = (unsigned int)v5;\n    v13 = v8;\n    do\n    {\n      *v9++ = *(_BYTE *)(a4 + (signed int)sub_438150(a5, v6));\n      --v10;\n    }\n    while ( v10 );\n    v9 = v13;\n  }\n  v9[v5] = 0;\n  return v9;\n}\n", 
            "funcStartAddr": "0x438480L", 
            "funcEndAddr": "0x43851dL", 
            "funcName": "sub_438480"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_438520@<rax>(FILE *a1@<rax>, FILE *a2@<rdx>, const char **a3@<rdi>, int *a4@<rsi>)\n{\n  FILE *v4; // rbp\n  int *v5; // r15\n  int v6; // esi\n  char *v7; // rbx\n  char *v8; // rax\n  int v9; // eax\n  char *v10; // rbx\n  int v11; // eax\n  signed __int64 v12; // r14\n  int v13; // eax\n  __int64 v14; // r13\n  const char *v15; // rax\n  const char *v16; // rbp\n  FILE *stream; // [rsp+0h] [rbp-38h]\n  FILE *streama; // [rsp+0h] [rbp-38h]\n\n  stream = a1;\n  v4 = a2;\n  v5 = a4;\n  v6 = *a4;\n  if ( v6 )\n  {\n    v7 = (char *)*a3;\n  }\n  else\n  {\n    v8 = (char *)malloc(0x80uLL);\n    v7 = v8;\n    if ( !v8 )\n      sub_4325B0(\"malloc of %ld bytes failed: file %s line %d\", 128LL, \"sre_string.c\", 253LL, stream);\n    *a3 = v8;\n    *v5 = 128;\n    v6 = 128;\n  }\n  if ( !fgets(v7, v6, v4) )\n    return 0LL;\n  v9 = feof(v4);\n  v10 = (char *)*a3;\n  if ( !v9 && v10[(signed __int64)((strlen(*a3) << 32) - 0x100000000LL) >> 32] != 10 )\n  {\n    streama = v4;\n    v11 = *v5;\n    v12 = *v5 - 1LL;\n    while ( 1 )\n    {\n      v13 = v11 + 128;\n      *v5 = v13;\n      v14 = v13;\n      v15 = (const char *)realloc(v10, v13);\n      v16 = v15;\n      if ( !v15 )\n        sub_4325B0(\"realloc of %ld bytes failed: file %s line %d\", v14, \"sre_string.c\", 283LL, streama);\n      *a3 = v15;\n      if ( !fgets((char *)&v15[v12], 129, streama)\n        || v16[((signed __int64)((strlen(&v16[v12]) << 32) - 0x100000000LL) >> 32) + v12] == 10 )\n      {\n        break;\n      }\n      v12 += 128LL;\n      v11 = *v5;\n      v10 = (char *)*a3;\n    }\n    v10 = (char *)*a3;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x438520L", 
            "funcEndAddr": "0x438683L", 
            "funcName": "sub_438520"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_438690(const char **a1, int a2, const char *a3, int a4)\n{\n  int v4; // er15\n  const char *v5; // rbx\n  unsigned int v6; // er13\n  void **v7; // r12\n  const char *v8; // rdi\n  int v9; // er14\n  size_t v10; // rbp\n  char *v11; // rbx\n  char *v12; // rdi\n  signed __int64 v13; // rcx\n  const char *src; // [rsp+0h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = a2;\n  v7 = (void **)a1;\n  if ( a2 >= 0 )\n  {\n    if ( a4 >= 0 )\n      goto LABEL_3;\nLABEL_7:\n    if ( !v5 )\n      return v6;\n    v4 = strlen(v5);\n    if ( !v4 )\n      return v6;\n    goto LABEL_9;\n  }\n  v8 = *a1;\n  if ( *v7 )\n  {\n    v6 = strlen(v8);\n    if ( v4 < 0 )\n      goto LABEL_7;\n  }\n  else\n  {\n    v6 = 0;\n    if ( a4 < 0 )\n      goto LABEL_7;\n  }\nLABEL_3:\n  if ( !v4 )\n    return v6;\nLABEL_9:\n  src = v5;\n  v9 = v4 + 1;\n  if ( *v7 )\n  {\n    v10 = (signed int)(v9 + v6);\n    v11 = (char *)realloc(*v7, v10);\n    if ( !v11 )\n    {\n      v12 = \"realloc of %ld bytes failed: file %s line %d\";\n      v13 = 345LL;\n      goto LABEL_14;\n    }\n  }\n  else\n  {\n    v10 = v9;\n    v11 = (char *)malloc(v9);\n    if ( !v11 )\n    {\n      v12 = \"malloc of %ld bytes failed: file %s line %d\";\n      v13 = 344LL;\nLABEL_14:\n      sub_4325B0(v12, v10, \"sre_string.c\", v13, src);\n    }\n  }\n  *v7 = v11;\n  memcpy(&v11[v6], src, v9);\n  v6 += v4;\n  return v6;\n}\n", 
            "funcStartAddr": "0x438690L", 
            "funcEndAddr": "0x438797L", 
            "funcName": "sub_438690"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_4387A0(const char **a1, const char *a2, _DWORD *a3)\n{\n  _DWORD *v3; // r14\n  const char *v4; // rbx\n  size_t v5; // rax\n  const char *v6; // rbx\n  int v7; // eax\n  char *v8; // rcx\n\n  v3 = a3;\n  v4 = *a1;\n  v5 = strspn(*a1, a2);\n  if ( !v4[v5] )\n    return 0LL;\n  v6 = &v4[v5];\n  v7 = strcspn(v6, a2);\n  v8 = (char *)&v6[v7];\n  if ( v6[v7] )\n    *v8++ = 0;\n  *a1 = v8;\n  if ( v3 )\n    *v3 = v7;\n  return v6;\n}\n", 
            "funcStartAddr": "0x4387a0L", 
            "funcEndAddr": "0x438802L", 
            "funcName": "sub_4387A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_438810(char *src, int a2)\n{\n  int v2; // esi\n  char *v3; // rax\n  char *v4; // rbx\n\n  if ( !src )\n    return 0LL;\n  if ( a2 < 0 )\n    a2 = strlen(src);\n  v2 = a2 + 1;\n  v3 = (char *)malloc(v2);\n  v4 = v3;\n  if ( !v3 )\n    sub_4325B0(\"malloc of %ld bytes failed: file %s line %d\", v2, \"sre_string.c\", 442LL);\n  strcpy(v3, src);\n  return v4;\n}\n", 
            "funcStartAddr": "0x438810L", 
            "funcEndAddr": "0x438873L", 
            "funcName": "sub_438810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4388B0(char *a1)\n{\n  char v1; // r14\n  unsigned int v2; // ebp\n  const unsigned __int16 *v3; // rax\n  char *v4; // rbx\n\n  v1 = *a1;\n  v2 = 1;\n  if ( *a1 )\n  {\n    v3 = *__ctype_b_loc();\n    v4 = a1 + 1;\n    while ( v3[v1] & 0x2000 )\n    {\n      v1 = *v4++;\n      if ( !v1 )\n        return v2;\n    }\n    v2 = 0;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4388b0L", 
            "funcEndAddr": "0x4388f3L", 
            "funcName": "sub_4388B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_438900@<rax>(char *filename@<rdi>, __int64 a2@<rax>, FILE ***a3@<rsi>)\n{\n  FILE **v3; // r13\n  FILE *v4; // rax\n  int v5; // eax\n  unsigned int v6; // ebx\n  int v7; // eax\n  FILE *v8; // rcx\n  char v9; // al\n  __int64 result; // rax\n  FILE *v11; // rcx\n  char v12; // al\n  FILE *v13; // rcx\n  char v14; // al\n  __int64 v15; // r15\n  _QWORD *v16; // rbp\n  FILE *v17; // rax\n  __int64 v18; // rax\n  signed __int64 v19; // rcx\n  __int64 v20; // rax\n  size_t v21; // r15\n  FILE *v22; // rax\n  FILE *v23; // rax\n  FILE *v24; // rax\n  FILE *v25; // rax\n  unsigned __int64 v26; // r15\n  char v27; // al\n  size_t v28; // r12\n  void *v29; // rax\n  FILE *v30; // rbp\n  FILE *v31; // rbp\n  FILE *v32; // rbp\n  FILE *v33; // rbp\n  __int64 v34; // [rsp+0h] [rbp-38h]\n\n  v34 = a2;\n  v3 = (FILE **)malloc(0x90uLL);\n  if ( !v3 )\n    return 3LL;\n  v4 = fopen(filename, \"rb\");\n  *v3 = v4;\n  if ( !v4 )\n  {\n    free(v3);\n    return 4LL;\n  }\n  *((_WORD *)v3 + 6) = 0;\n  *(_OWORD *)(v3 + 15) = 0LL;\n  *(_OWORD *)(v3 + 13) = 0LL;\n  v3[17] = 0LL;\n  if ( fread(&v34, 4uLL, 1uLL, v4) != 1 )\n  {\n    v6 = 5;\n    goto LABEL_25;\n  }\n  v5 = sub_43C6F0((unsigned int)v34, 4LL);\n  if ( v5 == -202118735 || (v6 = 5, v5 == -1310067725) )\n  {\n    if ( fread(&v34, 4uLL, 1uLL, *v3) != 1 )\n      goto LABEL_74;\n    v7 = sub_43C6F0((unsigned int)v34, 4LL);\n    *((_DWORD *)v3 + 2) = v7;\n    v6 = 7;\n    if ( v7 & 3 )\n      goto LABEL_25;\n    *((_BYTE *)v3 + 96) = 0;\n    *((_BYTE *)v3 + 97) = v7 & 1;\n    if ( fread(&v34, 2uLL, 1uLL, *v3) != 1 )\n      goto LABEL_74;\n    *((_WORD *)v3 + 6) = sub_43C6E0((unsigned __int16)v34, 2LL);\n    if ( fread(&v34, 4uLL, 1uLL, *v3) != 1\n      || (*((_DWORD *)v3 + 4) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 5) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 6) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 7) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 8) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 9) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1)\n      || (*((_DWORD *)v3 + 10) = sub_43C6F0((unsigned int)v34, 4LL), fread(&v34, 4uLL, 1uLL, *v3) != 1) )\n    {\nLABEL_74:\n      v6 = 6;\n      goto LABEL_25;\n    }\n    *((_DWORD *)v3 + 11) = sub_43C6F0((unsigned int)v34, 4LL);\n    v8 = *v3;\n    v9 = *((_BYTE *)v3 + 96);\n    v6 = 6;\n    if ( v9 == 1 )\n    {\n      *((_BYTE *)v3 + 48) = 1;\n      if ( fread(&v34, 8uLL, 1uLL, v8) != 1 )\n        goto LABEL_25;\n      v3[7] = (FILE *)sub_43C720(v34, 8LL);\n    }\n    else\n    {\n      if ( v9 )\n        goto LABEL_25;\n      *((_BYTE *)v3 + 48) = 0;\n      if ( fread(&v34, 4uLL, 1uLL, v8) != 1 )\n        goto LABEL_25;\n      *((_DWORD *)v3 + 14) = sub_43C6F0((unsigned int)v34, 4LL);\n    }\n    v11 = *v3;\n    v12 = *((_BYTE *)v3 + 96);\n    if ( v12 == 1 )\n    {\n      *((_BYTE *)v3 + 64) = 1;\n      if ( fread(&v34, 8uLL, 1uLL, v11) != 1 )\n        goto LABEL_25;\n      v3[9] = (FILE *)sub_43C720(v34, 8LL);\n    }\n    else\n    {\n      if ( v12 )\n        goto LABEL_25;\n      *((_BYTE *)v3 + 64) = 0;\n      if ( fread(&v34, 4uLL, 1uLL, v11) != 1 )\n        goto LABEL_25;\n      *((_DWORD *)v3 + 18) = sub_43C6F0((unsigned int)v34, 4LL);\n    }\n    v13 = *v3;\n    v14 = *((_BYTE *)v3 + 96);\n    if ( v14 == 1 )\n    {\n      *((_BYTE *)v3 + 80) = 1;\n      if ( fread(&v34, 8uLL, 1uLL, v13) != 1 )\n        goto LABEL_25;\n      v3[11] = (FILE *)sub_43C720(v34, 8LL);\nLABEL_42:\n      v15 = *((unsigned __int16 *)v3 + 6);\n      if ( !*((_WORD *)v3 + 6) )\n        goto LABEL_25;\n      v16 = v3 + 13;\n      v17 = (FILE *)malloc(8 * v15);\n      v3[13] = v17;\n      if ( !v17 )\n        goto LABEL_71;\n      *(_QWORD *)&v17->_flags = 0LL;\n      if ( (_DWORD)v15 != 1 )\n      {\n        v17->_IO_read_ptr = 0LL;\n        if ( (_DWORD)v15 != 2 )\n        {\n          v18 = ((_BYTE)v15 + 2) & 3;\n          if ( (unsigned __int64)(v15 - 3) < 3 )\n          {\n            v19 = 2LL;\n            if ( !(((_BYTE)v15 + 2) & 3) )\n              goto LABEL_54;\n            goto LABEL_52;\n          }\n          v19 = 2LL;\n          do\n          {\n            *(_QWORD *)(*v16 + 8 * v19) = 0LL;\n            *(_QWORD *)(*v16 + 8 * v19 + 8) = 0LL;\n            *(_QWORD *)(*v16 + 8 * v19 + 16) = 0LL;\n            *(_QWORD *)(*v16 + 8 * v19 + 24) = 0LL;\n            v19 += 4LL;\n          }\n          while ( v15 - v18 != v19 );\n          if ( ((_BYTE)v15 + 2) & 3 )\n          {\nLABEL_52:\n            v20 = -v18;\n            do\n            {\n              *(_QWORD *)(*v16 + 8 * v19++) = 0LL;\n              ++v20;\n            }\n            while ( v20 );\n            goto LABEL_54;\n          }\n        }\n      }\nLABEL_54:\n      v21 = 4 * v15;\n      v22 = (FILE *)malloc(v21);\n      v3[14] = v22;\n      if ( v22 )\n      {\n        v23 = (FILE *)malloc(v21);\n        v3[15] = v23;\n        if ( v23 )\n        {\n          v24 = (FILE *)malloc(v21);\n          v3[16] = v24;\n          if ( v24 )\n          {\n            v25 = (FILE *)malloc(v21);\n            v3[17] = v25;\n            if ( v25 )\n            {\n              v26 = 0LL;\n              while ( 1 )\n              {\n                v27 = *((_BYTE *)v3 + 48);\n                if ( v27 )\n                {\n                  if ( v27 == 1 )\n                    goto LABEL_25;\n                }\n                else if ( fseek(*v3, (unsigned int)(*((_DWORD *)v3 + 14) + v26 * *((_DWORD *)v3 + 9)), 0) )\n                {\n                  goto LABEL_25;\n                }\n                v28 = *((unsigned int *)v3 + 6);\n                v29 = malloc(v28);\n                *((_QWORD *)&v3[13]->_flags + v26) = v29;\n                if ( !v29 )\n                  break;\n                if ( fread(*((void **)&v3[13]->_flags + v26), 1uLL, v28, *v3) != *((_DWORD *)v3 + 6) )\n                  goto LABEL_25;\n                v30 = v3[14];\n                if ( fread(&v34, 4uLL, 1uLL, *v3) != 1 )\n                  goto LABEL_25;\n                *(&v30->_flags + v26) = sub_43C6F0((unsigned int)v34, 4LL);\n                v31 = v3[15];\n                if ( fread(&v34, 4uLL, 1uLL, *v3) != 1 )\n                  goto LABEL_25;\n                *(&v31->_flags + v26) = sub_43C6F0((unsigned int)v34, 4LL);\n                v32 = v3[16];\n                if ( fread(&v34, 4uLL, 1uLL, *v3) != 1 )\n                  goto LABEL_25;\n                *(&v32->_flags + v26) = sub_43C6F0((unsigned int)v34, 4LL);\n                v33 = v3[17];\n                if ( fread(&v34, 4uLL, 1uLL, *v3) != 1 )\n                  goto LABEL_25;\n                *(&v33->_flags + v26++) = sub_43C6F0((unsigned int)v34, 4LL);\n                result = 0LL;\n                if ( v26 >= *((unsigned __int16 *)v3 + 6) )\n                  goto LABEL_26;\n              }\n            }\n          }\n        }\n      }\nLABEL_71:\n      v6 = 3;\n      goto LABEL_25;\n    }\n    if ( !v14 )\n    {\n      *((_BYTE *)v3 + 80) = 0;\n      if ( fread(&v34, 4uLL, 1uLL, v13) == 1 )\n      {\n        *((_DWORD *)v3 + 22) = sub_43C6F0((unsigned int)v34, 4LL);\n        goto LABEL_42;\n      }\n    }\n  }\nLABEL_25:\n  sub_439610(v3);\n  result = v6;\nLABEL_26:\n  *a3 = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x438900L", 
            "funcEndAddr": "0x438f84L", 
            "funcName": "sub_438900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_438F90(__int64 a1, __int64 a2, _DWORD *a3, __int64 a4)\n{\n  __int64 v4; // r14\n  _DWORD *v5; // r15\n  unsigned int v6; // er13\n  FILE *v7; // rcx\n  char v8; // al\n  __int64 v9; // r9\n  size_t v10; // rbp\n  void *v11; // rax\n  void *v12; // r12\n  unsigned int v13; // ebx\n  unsigned __int16 ptr; // [rsp+Ah] [rbp-3Eh]\n  unsigned int v16; // [rsp+Ch] [rbp-3Ch]\n  __int64 v17; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = sub_439140(a1, a2, *(unsigned int *)(a1 + 28), a1 + 64, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 16));\n  if ( v6 == 2 )\n  {\n    v9 = *(unsigned int *)(a1 + 20);\n    if ( (_DWORD)v9 )\n    {\n      v6 = sub_439140(a1, a2, *(unsigned int *)(a1 + 32), a1 + 80, *(unsigned int *)(a1 + 44), v9);\n      if ( !v6 )\n      {\n        v10 = *(unsigned int *)(a1 + 28);\n        v11 = malloc(v10);\n        v12 = v11;\n        if ( v11 )\n        {\n          v6 = 1;\n          if ( fread(v11, 1uLL, v10, *(FILE **)a1) == *(_DWORD *)(a1 + 28) )\n          {\n            v13 = sub_438F90(a1, v12, v5, v4);\n            free(v12);\n            return v13;\n          }\n        }\n        else\n        {\n          v6 = 3;\n        }\n      }\n    }\n    else\n    {\n      v6 = 2;\n    }\n  }\n  else if ( !v6 )\n  {\n    if ( fread(&ptr, 2uLL, 1uLL, *(FILE **)a1) == 1 )\n    {\n      *v5 = (unsigned __int16)sub_43C6E0(ptr, 2LL);\n      v7 = *(FILE **)a1;\n      v8 = *(_BYTE *)(a1 + 97);\n      v6 = 1;\n      if ( v8 != 1 )\n      {\n        if ( v8 )\n          return v6;\n        *(_BYTE *)v4 = 0;\n        if ( fread(&v16, 4uLL, 1uLL, v7) != 1 )\n          return v6;\n        *(_DWORD *)(v4 + 8) = sub_43C6F0(v16, 4LL);\n        return 0;\n      }\n      *(_BYTE *)v4 = 1;\n      if ( fread(&v17, 8uLL, 1uLL, v7) == 1 )\n      {\n        *(_QWORD *)(v4 + 8) = sub_43C720(v17, 8LL);\n        return 0;\n      }\n    }\n    else\n    {\n      v6 = 1;\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x438f90L", 
            "funcEndAddr": "0x439134L", 
            "funcName": "sub_438F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_439140(FILE **a1, const char *a2, int a3, __int64 a4, int a5, unsigned int a6)\n{\n  unsigned int v6; // er14\n  int v7; // er13\n  unsigned int v8; // ebp\n  size_t v9; // r15\n  void *v10; // rbx\n  unsigned int v11; // er12\n  __int64 v12; // rcx\n  unsigned int v13; // er13\n  FILE **v14; // rbp\n  int v15; // eax\n  __int64 v17; // [rsp+8h] [rbp-50h]\n  int v18; // [rsp+14h] [rbp-44h]\n\n  v6 = a6;\n  v7 = a5;\n  v8 = 2;\n  if ( !a6 )\n    return v8;\n  v17 = a4;\n  v9 = a3;\n  v10 = malloc(a3);\n  if ( !v10 )\n    return 3;\n  v11 = 0;\n  v18 = v7;\n  v12 = v17;\nLABEL_4:\n  v13 = v6 - 1;\n  while ( 1 )\n  {\n    v6 = (v11 + v13) >> 1;\n    if ( !*(_BYTE *)v12 )\n      break;\n    v14 = a1;\n    if ( *(_BYTE *)v12 == 1 )\n    {\n      v8 = 7;\n      goto LABEL_20;\n    }\nLABEL_10:\n    if ( fread(v10, 1uLL, v9, *v14) != v9 )\n    {\n      free(v10);\n      return 1;\n    }\n    v15 = strcmp((const char *)v10, a2);\n    if ( !v15 )\n    {\n      free(v10);\n      return 0;\n    }\n    if ( v11 >= v13 )\n      goto LABEL_15;\n    if ( v15 >= 0 )\n    {\n      v12 = v17;\n      if ( v6 )\n        goto LABEL_4;\nLABEL_15:\n      free(v10);\n      return 2;\n    }\n    v11 = v6 + 1;\n    v12 = v17;\n  }\n  v14 = a1;\n  if ( !fseek(*a1, *(_DWORD *)(v12 + 8) + v18 * v6, 0) )\n    goto LABEL_10;\n  v8 = 8;\nLABEL_20:\n  free(v10);\n  return v8;\n}\n", 
            "funcStartAddr": "0x439140L", 
            "funcEndAddr": "0x43929aL", 
            "funcName": "sub_439140"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4392A0(__int64 a1, unsigned int a2, _DWORD *a3, __int64 a4)\n{\n  __int64 v4; // r12\n  _DWORD *v5; // r14\n  unsigned int v6; // ebp\n  char v7; // al\n  size_t v8; // rbp\n  void *v9; // rax\n  void *v10; // r15\n  size_t v11; // rax\n  unsigned __int16 v12; // r13\n  FILE *v13; // rcx\n  char v14; // al\n  unsigned __int16 ptr; // [rsp+Ah] [rbp-3Eh]\n  unsigned int v17; // [rsp+Ch] [rbp-3Ch]\n  __int64 v18; // [rsp+10h] [rbp-38h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = 2;\n  if ( *(_DWORD *)(a1 + 16) > a2 )\n  {\n    v7 = *(_BYTE *)(a1 + 64);\n    v6 = 8;\n    if ( v7 != 1 && (v7 || !fseek(*(FILE **)a1, *(_DWORD *)(a1 + 72) + *(_DWORD *)(a1 + 40) * a2, 0)) )\n    {\n      v8 = *(unsigned int *)(a1 + 28);\n      v9 = malloc(v8);\n      v10 = v9;\n      if ( v9 )\n      {\n        v11 = fread(v9, 1uLL, v8, *(FILE **)a1);\n        v6 = 1;\n        if ( v11 == *(_DWORD *)(a1 + 28) && fread(&ptr, 2uLL, 1uLL, *(FILE **)a1) == 1 )\n        {\n          v12 = sub_43C6E0(ptr, 2LL);\n          v13 = *(FILE **)a1;\n          v14 = *(_BYTE *)(a1 + 97);\n          if ( v14 == 1 )\n          {\n            *(_BYTE *)v4 = 1;\n            if ( fread(&v18, 8uLL, 1uLL, v13) == 1 )\n            {\n              *(_QWORD *)(v4 + 8) = sub_43C720(v18, 8LL);\n              goto LABEL_16;\n            }\n          }\n          else if ( !v14 )\n          {\n            *(_BYTE *)v4 = 0;\n            if ( fread(&v17, 4uLL, 1uLL, v13) == 1 )\n            {\n              *(_DWORD *)(v4 + 8) = sub_43C6F0(v17, 4LL);\nLABEL_16:\n              *v5 = v12;\n              free(v10);\n              return 0;\n            }\n          }\n        }\n      }\n      else\n      {\n        v6 = 3;\n      }\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x4392a0L", 
            "funcEndAddr": "0x4393e7L", 
            "funcName": "sub_4392A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4393F0(__int64 a1, __int64 a2, int a3, signed int *a4, __int64 a5, __int64 a6, int *a7)\n{\n  __int64 v7; // r15\n  signed int *v8; // rbx\n  int v9; // er14\n  __int64 v10; // r12\n  unsigned int v11; // ebp\n  FILE *v12; // rcx\n  char v13; // al\n  unsigned int v14; // edi\n  __int64 v15; // rcx\n  int v16; // ebx\n  int v17; // er9\n  int v18; // eax\n  char v19; // r8\n  __int64 ptr; // [rsp+8h] [rbp-30h]\n\n  v7 = a6;\n  v8 = a4;\n  v9 = a3;\n  v10 = a1;\n  v11 = sub_438F90(a1, a2, a4, a5);\n  if ( v11 )\n    return v11;\n  v11 = 10;\n  if ( !(*(_BYTE *)(*(_QWORD *)(a1 + 120) + 4LL * *v8) & 1) )\n    return v11;\n  v12 = *(FILE **)a1;\n  v13 = *(_BYTE *)(a1 + 97);\n  if ( v13 == 1 )\n  {\n    *(_BYTE *)v7 = 1;\n    if ( fread(&ptr, 8uLL, 1uLL, v12) != 1 )\n      return 1;\n    *(_QWORD *)(v7 + 8) = sub_43C720(ptr, 8LL);\n  }\n  else\n  {\n    if ( v13 )\n      return 1;\n    *(_BYTE *)v7 = 0;\n    if ( fread(&ptr, 4uLL, 1uLL, v12) != 1 )\n      return 1;\n    *(_DWORD *)(v7 + 8) = sub_43C6F0((unsigned int)ptr, 4LL);\n  }\n  if ( fread(&ptr, 4uLL, 1uLL, *(FILE **)a1) != 1 )\n    return 1;\n  v14 = sub_43C6F0((unsigned int)ptr, 4LL);\n  v15 = *v8;\n  v16 = *(_DWORD *)(*(_QWORD *)(v10 + 136) + 4 * v15);\n  v17 = (v9 - 1) / v16;\n  if ( v16 )\n  {\n    v18 = *(_DWORD *)(*(_QWORD *)(v10 + 128) + 4 * v15);\n    if ( v18 )\n    {\n      v11 = 11;\n      if ( v9 >= 0 && v14 >= v9 )\n      {\n        v19 = *(_BYTE *)(v10 + 97);\n        if ( v18 == v16 + 1 )\n        {\n          if ( v19 )\n          {\n            if ( v19 == 1 )\n            {\n              *(_BYTE *)v7 = 1;\n              *(_QWORD *)(v7 + 8) += v18 * v17 + (signed __int64)((v9 - 1) % v16);\n            }\n          }\n          else\n          {\n            *(_BYTE *)v7 = 0;\n            *(_DWORD *)(v7 + 8) += v18 * v17 + (v9 - 1) % v16;\n          }\n        }\n        else\n        {\n          if ( v19 )\n          {\n            if ( v19 == 1 )\n            {\n              *(_BYTE *)v7 = 1;\n              *(_QWORD *)(v7 + 8) += v17 * v18;\n            }\n          }\n          else\n          {\n            *(_BYTE *)v7 = 0;\n            *(_DWORD *)(v7 + 8) += v17 * v18;\n          }\n          v9 = v16 * v17 + 1;\n        }\n        *a7 = v9;\n        v11 = 0;\n      }\n    }\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x4393f0L", 
            "funcEndAddr": "0x4395adL", 
            "funcName": "sub_4393F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4395B0(FILE *a1, __int64 a2)\n{\n  signed __int64 result; // rax\n\n  result = 7LL;\n  if ( !*(_BYTE *)a2 )\n    result = 8 * (unsigned int)(fseek(a1, *(unsigned int *)(a2 + 8), 0) != 0);\n  return result;\n}\n", 
            "funcStartAddr": "0x4395b0L", 
            "funcEndAddr": "0x4395d7L", 
            "funcName": "sub_4395B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_439610(void *ptr)\n{\n  _WORD *v1; // r14\n  void **v2; // rdi\n  unsigned __int16 v3; // cx\n  unsigned __int64 v4; // rbx\n  void *v5; // rdi\n  void *v6; // rdi\n  void *v7; // rdi\n  void *v8; // rdi\n\n  v1 = ptr;\n  if ( ptr )\n  {\n    v2 = (void **)*((_QWORD *)ptr + 13);\n    if ( v2 )\n    {\n      v3 = v1[6];\n      if ( v3 )\n      {\n        v4 = 0LL;\n        do\n        {\n          if ( v2[v4] )\n          {\n            free(v2[v4]);\n            v3 = v1[6];\n            v2 = (void **)*((_QWORD *)v1 + 13);\n          }\n          ++v4;\n        }\n        while ( v4 < v3 );\n      }\n      free(v2);\n    }\n    v5 = (void *)*((_QWORD *)v1 + 14);\n    if ( v5 )\n      free(v5);\n    v6 = (void *)*((_QWORD *)v1 + 15);\n    if ( v6 )\n      free(v6);\n    v7 = (void *)*((_QWORD *)v1 + 16);\n    if ( v7 )\n      free(v7);\n    v8 = (void *)*((_QWORD *)v1 + 17);\n    if ( v8 )\n      free(v8);\n    if ( *(_QWORD *)v1 )\n      fclose(*(FILE **)v1);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x439610L", 
            "funcEndAddr": "0x4396cdL", 
            "funcName": "sub_439610"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4396D0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4396d0L", 
            "funcEndAddr": "0x4396d3L", 
            "funcName": "sub_4396D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__usercall sub_4396E0@<rax>(__int64 a1@<rax>, int a2@<edi>)\n{\n  char *v2; // rax\n  _QWORD *v3; // rbx\n  void *v4; // rax\n  void *v5; // rax\n  void *v6; // rax\n  void *v7; // rax\n  void *v8; // rax\n  void *v9; // rax\n  __int64 v11; // [rsp-8h] [rbp-18h]\n\n  v11 = a1;\n  v2 = (char *)malloc(0x78uLL);\n  v3 = v2;\n  if ( !v2 )\n    goto LABEL_14;\n  *(_DWORD *)v2 = a2;\n  *(_QWORD *)(v2 + 4) = 0LL;\n  *((_DWORD *)v2 + 3) = 200;\n  if ( a2 == 1 )\n    sub_4325B0(\n      \"Can't create a 64-bit SSI index on this system, sorry;\\nI don't have 64-bit file offset functions available.\\n\",\n      v11);\n  *(_OWORD *)(v2 + 38) = 0LL;\n  *(_OWORD *)(v2 + 24) = 0LL;\n  *(_OWORD *)(v2 + 56) = 0LL;\n  *((_QWORD *)v2 + 9) = \"tmp.ssi.1\";\n  *((_OWORD *)v2 + 5) = 0LL;\n  *((_QWORD *)v2 + 12) = 0LL;\n  *((_QWORD *)v2 + 13) = \"tmp.ssi.2\";\n  *((_QWORD *)v2 + 14) = 0LL;\n  v4 = malloc(0x50uLL);\n  v3[2] = v4;\n  if ( !v4 )\n    goto LABEL_14;\n  v5 = malloc(0x28uLL);\n  v3[3] = v5;\n  if ( !v5 )\n    goto LABEL_14;\n  v6 = malloc(0x28uLL);\n  v3[4] = v6;\n  if ( !v6\n    || (v7 = malloc(0x28uLL), (v3[5] = v7) == 0LL)\n    || (v8 = malloc(0x15E0uLL), (v3[7] = v8) == 0LL)\n    || (v9 = malloc(0x15E0uLL), (v3[11] = v9) == 0LL) )\n  {\nLABEL_14:\n    sub_4397E0(v3);\n    v3 = 0LL;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4396e0L", 
            "funcEndAddr": "0x4397ddL", 
            "funcName": "sub_4396E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4397E0(void *ptr)\n{\n  unsigned __int16 *v1; // r14\n  FILE *v2; // rdi\n  FILE *v3; // rdi\n  __int64 v4; // r15\n  unsigned __int64 v5; // rbx\n  __int64 v6; // r15\n  unsigned __int64 v7; // rbx\n  unsigned __int64 v8; // rax\n  unsigned __int64 v9; // r15\n  signed __int64 v10; // rbx\n  void *v11; // rdi\n  void *v12; // rdi\n  void **v13; // rdi\n  unsigned __int64 v14; // rbx\n  void *v15; // rdi\n  void *v16; // rdi\n  void *v17; // rdi\n\n  v1 = (unsigned __int16 *)ptr;\n  if ( ptr )\n  {\n    if ( *((_DWORD *)ptr + 2) )\n    {\n      v2 = (FILE *)*((_QWORD *)ptr + 10);\n      if ( v2 )\n        fclose(v2);\n      v3 = (FILE *)*((_QWORD *)v1 + 14);\n      if ( v3 )\n        fclose(v3);\n      remove(*((const char **)v1 + 9));\n      remove(*((const char **)v1 + 13));\n    }\n    else\n    {\n      if ( *((_DWORD *)ptr + 17) )\n      {\n        v4 = 0LL;\n        v5 = 0LL;\n        do\n        {\n          free(*(void **)(*((_QWORD *)ptr + 7) + v4));\n          ++v5;\n          v4 += 56LL;\n        }\n        while ( v5 < *((unsigned int *)ptr + 17) );\n      }\n      if ( *((_DWORD *)ptr + 25) )\n      {\n        v6 = 0LL;\n        v7 = 0LL;\n        do\n        {\n          free(*(void **)(*((_QWORD *)ptr + 11) + v6));\n          ++v7;\n          v8 = *((unsigned int *)ptr + 25);\n          v6 += 16LL;\n        }\n        while ( v7 < v8 );\n        if ( (_DWORD)v8 )\n        {\n          v9 = 0LL;\n          v10 = 8LL;\n          do\n          {\n            free(*(void **)(*((_QWORD *)ptr + 11) + v10));\n            ++v9;\n            v10 += 16LL;\n          }\n          while ( v9 < *((unsigned int *)ptr + 25) );\n        }\n      }\n      v11 = (void *)*((_QWORD *)ptr + 7);\n      if ( v11 )\n        free(v11);\n      v12 = (void *)*((_QWORD *)v1 + 11);\n      if ( v12 )\n        free(v12);\n    }\n    v13 = (void **)*((_QWORD *)v1 + 2);\n    if ( v1[26] )\n    {\n      v14 = 0LL;\n      do\n      {\n        free(v13[v14++]);\n        v13 = (void **)*((_QWORD *)v1 + 2);\n      }\n      while ( v14 < v1[26] );\n    }\n    if ( v13 )\n      free(v13);\n    v15 = (void *)*((_QWORD *)v1 + 3);\n    if ( v15 )\n      free(v15);\n    v16 = (void *)*((_QWORD *)v1 + 4);\n    if ( v16 )\n      free(v16);\n    v17 = (void *)*((_QWORD *)v1 + 5);\n    if ( v17 )\n      free(v17);\n    free(v1);\n  }\n}\n", 
            "funcStartAddr": "0x4397e0L", 
            "funcEndAddr": "0x43994cL", 
            "funcName": "sub_4397E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_439950(FILE *a1, int a2, _BYTE *a3)\n{\n  _BYTE *v3; // rbx\n  int v4; // eax\n  signed __int64 result; // rax\n\n  v3 = a3;\n  if ( a2 == 1 )\n  {\n    *a3 = 1;\n    result = 7LL;\n  }\n  else\n  {\n    if ( a2 )\n      abort();\n    *a3 = 0;\n    v4 = ftell(a1);\n    *((_DWORD *)v3 + 2) = v4;\n    result = 9 * (unsigned int)(v4 == -1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x439950L", 
            "funcEndAddr": "0x439984L", 
            "funcName": "sub_439950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_439990(__int64 a1, char *a2, int a3, _DWORD *a4)\n{\n  _DWORD *v4; // r14\n  int v5; // er15\n  unsigned int v6; // er12\n  unsigned int v7; // eax\n  const char *v8; // rax\n  __int64 v9; // rdx\n  unsigned __int16 v10; // dx\n  void *v12; // rax\n  void *v13; // rax\n  void *v14; // rax\n  void *v15; // rax\n\n  v4 = a4;\n  v5 = a3;\n  v6 = 13;\n  if ( *(unsigned __int16 *)(a1 + 52) <= 0x7FFEu )\n  {\n    v7 = strlen(a2) + 1;\n    if ( v7 > *(_DWORD *)(a1 + 48) )\n      *(_DWORD *)(a1 + 48) = v7;\n    v8 = sub_427A30(a2, 0);\n    v9 = *(unsigned __int16 *)(a1 + 52);\n    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = v8;\n    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v9) = v5;\n    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v9) = 0;\n    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v9) = 0;\n    *v4 = v9;\n    v10 = v9 + 1;\n    *(_WORD *)(a1 + 52) = v10;\n    if ( v10 != 10 * (v10 / 0xAu) )\n      goto LABEL_14;\n    v12 = realloc(*(void **)(a1 + 16), 8 * (unsigned int)v10 + 80);\n    *(_QWORD *)(a1 + 16) = v12;\n    v6 = 3;\n    if ( v12 )\n    {\n      v13 = realloc(*(void **)(a1 + 24), 4LL * *(unsigned __int16 *)(a1 + 52) + 40);\n      *(_QWORD *)(a1 + 24) = v13;\n      if ( v13 )\n      {\n        v14 = realloc(*(void **)(a1 + 32), 4LL * *(unsigned __int16 *)(a1 + 52) + 40);\n        *(_QWORD *)(a1 + 32) = v14;\n        if ( v14 )\n        {\n          v15 = realloc(*(void **)(a1 + 40), 4LL * *(unsigned __int16 *)(a1 + 52) + 40);\n          *(_QWORD *)(a1 + 40) = v15;\n          if ( v15 )\nLABEL_14:\n            v6 = 0;\n        }\n      }\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x439990L", 
            "funcEndAddr": "0x439ab0L", 
            "funcName": "sub_439990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_439AE0(__int64 a1, char *a2, signed int a3, __int64 a4, __int64 a5, int a6)\n{\n  __int64 v6; // r12\n  unsigned int v7; // ebp\n  __int64 v8; // rbx\n  unsigned int v9; // er14\n  unsigned __int64 v10; // rax\n  _DWORD *v11; // r13\n  int v12; // er14\n  __int64 v13; // r13\n  int v14; // eax\n  int v15; // eax\n  FILE *v16; // rdi\n  __int64 v17; // r9\n  char *v18; // rax\n  __int64 v19; // rcx\n  signed __int64 v20; // rdx\n  _OWORD *v21; // rax\n  int v22; // edx\n  __int64 v23; // r9\n  _DWORD *v24; // rdi\n  __int64 v25; // rax\n  void *v26; // rax\n  int v28; // [rsp+14h] [rbp-44h]\n  __int64 v29; // [rsp+18h] [rbp-40h]\n\n  v6 = a5;\n  v7 = a3;\n  v8 = a1;\n  v9 = 13;\n  if ( a3 <= 32766 )\n  {\n    v10 = *(unsigned int *)(a1 + 68);\n    v9 = 14;\n    if ( v10 <= 0x7FFFFFFE )\n    {\n      if ( !a5 && a6 > 0 )\n        abort();\n      if ( *(_DWORD *)(a1 + 8) )\n      {\n        v11 = (_DWORD *)(a1 + 64);\n      }\n      else if ( ((unsigned int)(*(_DWORD *)(a1 + 48) + 16) * (unsigned __int64)*(unsigned __int16 *)(a1 + 52)\n               + v10 * (*(_DWORD *)(a1 + 64) + 8 * (unsigned int)(*(_DWORD *)a1 == 1) + 14)\n               + (unsigned int)(*(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 64))\n               * (unsigned __int64)*(unsigned int *)(a1 + 100)\n               + 66) >> 20 >= *(signed int *)(a1 + 12) )\n      {\n        v12 = a6;\n        v13 = a4;\n        v14 = sub_439D10(a1);\n        a4 = v13;\n        a6 = v12;\n        v9 = 4;\n        v11 = (_DWORD *)(a1 + 64);\n        if ( v14 )\n          return v9;\n      }\n      else\n      {\n        v11 = (_DWORD *)(a1 + 64);\n      }\n      v29 = a4;\n      v28 = a6;\n      v15 = strlen(a2);\n      if ( (unsigned int)(v15 + 1) > *v11 )\n        *v11 = v15 + 1;\n      if ( *(_DWORD *)(a1 + 8) )\n      {\n        v16 = *(FILE **)(a1 + 80);\n        if ( *(_DWORD *)v8 )\n        {\n          if ( v6 )\n            v17 = *(_QWORD *)(v6 + 8);\n          else\n            v17 = 0LL;\n          fprintf(v16, \"%s\\t%d\\t%llu\\t%llu\\t%lu\\n\", a2, v7, *(_QWORD *)(v29 + 8), v17, v28);\n        }\n        else\n        {\n          if ( v6 )\n            v23 = *(unsigned int *)(v6 + 8);\n          else\n            v23 = 0LL;\n          fprintf(v16, \"%s\\t%d\\t%lu\\t%lu\\t%lu\\n\", a2, v7, *(unsigned int *)(v29 + 8), v23, v28);\n        }\n        ++*(_DWORD *)(v8 + 68);\n        return 0;\n      }\n      v18 = sub_438810(a2, v15);\n      v19 = *(_QWORD *)(a1 + 56);\n      v20 = 56LL * *(unsigned int *)(a1 + 68);\n      *(_QWORD *)(v19 + v20) = v18;\n      v9 = 3;\n      if ( v18 )\n      {\n        *(_WORD *)(v19 + v20 + 8) = v7;\n        *(_OWORD *)(v19 + v20 + 16) = *(_OWORD *)v29;\n        v21 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 56LL * *(unsigned int *)(a1 + 68) + 32);\n        v22 = v28;\n        if ( v6 && v28 > 0 )\n        {\n          *v21 = *(_OWORD *)v6;\n        }\n        else\n        {\n          *v21 = *(_OWORD *)v29;\n          v22 = 0;\n        }\n        v24 = *(_DWORD **)(a1 + 56);\n        v25 = *(unsigned int *)(v8 + 68);\n        v24[14 * v25 + 12] = v22;\n        *(_DWORD *)(v8 + 68) = v25 + 1;\n        if ( (_DWORD)v25 + 1 != 100 * (((signed int)v25 + 1) / 0x64u) )\n          return 0;\n        v26 = realloc(v24, 56LL * (unsigned int)(v25 + 101));\n        *(_QWORD *)(v8 + 56) = v26;\n        if ( v26 )\n          return 0;\n      }\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x439ae0L", 
            "funcEndAddr": "0x439d06L", 
            "funcName": "sub_439AE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_439D10@<rax>(__int64 a1@<rax>, __int64 a2@<rdi>)\n{\n  __int64 v2; // r15\n  unsigned int v3; // ebp\n  FILE *v5; // rax\n  FILE *v6; // rax\n  unsigned __int64 v7; // r14\n  unsigned __int64 v8; // rax\n  signed __int64 v9; // rbp\n  unsigned __int64 v10; // rbx\n  __int64 v11; // rax\n  FILE *v12; // rdi\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  signed __int64 v15; // rbx\n  unsigned __int64 v16; // rbp\n  __int64 v17; // rbx\n  unsigned __int64 v18; // rbp\n  __int64 v19; // rbx\n  unsigned __int64 v20; // rbp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rbx\n  signed __int64 v23; // rbp\n  void *v24; // rdi\n  void *v25; // rdi\n  __int64 v26; // [rsp+0h] [rbp-28h]\n\n  v26 = a1;\n  v2 = a2;\n  v3 = 0;\n  if ( !*(_DWORD *)(a2 + 8) )\n  {\n    v3 = 1;\n    if ( !(unsigned int)sub_427E20(*(const char **)(a2 + 72)) && !(unsigned int)sub_427E20(*(const char **)(a2 + 104)) )\n    {\n      v5 = fopen(*(const char **)(a2 + 72), \"w\");\n      *(_QWORD *)(a2 + 80) = v5;\n      if ( v5 )\n      {\n        v6 = fopen(*(const char **)(a2 + 104), \"w\");\n        *(_QWORD *)(a2 + 112) = v6;\n        if ( v6 )\n        {\n          LODWORD(v7) = 0;\n          LODWORD(v8) = 0;\n          if ( *(_DWORD *)(a2 + 68) )\n          {\n            v9 = 48LL;\n            v10 = 0LL;\n            do\n            {\n              v11 = *(_QWORD *)(v2 + 56);\n              v12 = *(FILE **)(v2 + 80);\n              v13 = *(_QWORD *)(v11 + v9 - 48);\n              v14 = *(unsigned __int16 *)(v11 + v9 - 40);\n              if ( *(_DWORD *)v2 )\n                fprintf(\n                  v12,\n                  \"%s\\t%u\\t%llu\\t%llu\\t%lu\\n\",\n                  v13,\n                  v14,\n                  *(_QWORD *)(v11 + v9 - 24),\n                  *(_QWORD *)(v11 + v9 - 8),\n                  *(unsigned int *)(v11 + v9));\n              else\n                fprintf(\n                  v12,\n                  \"%s\\t%u\\t%lu\\t%lu\\t%lu\\n\",\n                  v13,\n                  v14,\n                  *(unsigned int *)(v11 + v9 - 24),\n                  *(unsigned int *)(v11 + v9 - 8),\n                  *(unsigned int *)(v11 + v9));\n              ++v10;\n              v8 = *(unsigned int *)(v2 + 68);\n              v9 += 56LL;\n            }\n            while ( v10 < v8 );\n          }\n          if ( *(_DWORD *)(v2 + 100) )\n          {\n            v15 = 8LL;\n            v16 = 0LL;\n            do\n            {\n              fprintf(\n                *(FILE **)(v2 + 112),\n                \"%s\\t%s\\n\",\n                *(_QWORD *)(*(_QWORD *)(v2 + 88) + v15 - 8),\n                *(_QWORD *)(*(_QWORD *)(v2 + 88) + v15),\n                v26);\n              ++v16;\n              v7 = *(unsigned int *)(v2 + 100);\n              v15 += 16LL;\n            }\n            while ( v16 < v7 );\n            LODWORD(v8) = *(_DWORD *)(v2 + 68);\n          }\n          if ( (_DWORD)v8 )\n          {\n            v17 = 0LL;\n            v18 = 0LL;\n            do\n            {\n              free(*(void **)(*(_QWORD *)(v2 + 56) + v17));\n              ++v18;\n              v17 += 56LL;\n            }\n            while ( v18 < *(unsigned int *)(v2 + 68) );\n            LODWORD(v7) = *(_DWORD *)(v2 + 100);\n          }\n          if ( (_DWORD)v7 )\n          {\n            v19 = 0LL;\n            v20 = 0LL;\n            do\n            {\n              free(*(void **)(*(_QWORD *)(v2 + 88) + v19));\n              ++v20;\n              v21 = *(unsigned int *)(v2 + 100);\n              v19 += 16LL;\n            }\n            while ( v20 < v21 );\n            if ( (_DWORD)v21 )\n            {\n              v22 = 0LL;\n              v23 = 8LL;\n              do\n              {\n                free(*(void **)(*(_QWORD *)(v2 + 88) + v23));\n                ++v22;\n                v23 += 16LL;\n              }\n              while ( v22 < *(unsigned int *)(v2 + 100) );\n            }\n          }\n          v24 = *(void **)(v2 + 56);\n          if ( v24 )\n            free(v24);\n          v25 = *(void **)(v2 + 88);\n          if ( v25 )\n            free(v25);\n          *(_QWORD *)(v2 + 56) = 0LL;\n          *(_QWORD *)(v2 + 88) = 0LL;\n          *(_DWORD *)(v2 + 8) = 1;\n          v3 = 0;\n        }\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x439d10L", 
            "funcEndAddr": "0x439f09L", 
            "funcName": "sub_439D10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_439F10(__int64 a1, char *a2, char *a3)\n{\n  char *v3; // r14\n  __int64 v4; // rbx\n  unsigned __int64 v5; // rax\n  unsigned int v6; // ebp\n  _DWORD *v7; // r12\n  unsigned __int64 v8; // rax\n  int v9; // eax\n  char *v11; // rax\n  char *v12; // rax\n  _QWORD *v13; // rdi\n  int v14; // esi\n  void *v15; // rax\n\n  v3 = a3;\n  v4 = a1;\n  v5 = *(unsigned int *)(a1 + 100);\n  v6 = 14;\n  if ( v5 <= 0x7FFFFFFE )\n  {\n    if ( *(_DWORD *)(a1 + 8) )\n    {\n      v7 = (_DWORD *)(a1 + 96);\n    }\n    else\n    {\n      v7 = (_DWORD *)(a1 + 96);\n      v8 = ((unsigned int)(*(_DWORD *)(a1 + 48) + 16) * (unsigned __int64)*(unsigned __int16 *)(a1 + 52)\n          + v5 * (unsigned int)(*(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 64))\n          + (*(_DWORD *)(a1 + 64) + 8 * (unsigned int)(*(_DWORD *)a1 == 1) + 14)\n          * (unsigned __int64)*(unsigned int *)(a1 + 68)\n          + 66) >> 20;\n      if ( v8 >= *(signed int *)(a1 + 12) )\n      {\n        v6 = 4;\n        if ( (unsigned int)sub_439D10(v8, a1) )\n          return v6;\n      }\n    }\n    v9 = strlen(a2);\n    if ( (unsigned int)(v9 + 1) > *v7 )\n      *v7 = v9 + 1;\n    if ( *(_DWORD *)(a1 + 8) )\n    {\n      v6 = 0;\n      fprintf(*(FILE **)(a1 + 112), \"%s\\t%s\\n\", a2, v3);\n      ++*(_DWORD *)(a1 + 100);\n    }\n    else\n    {\n      v11 = sub_438810(a2, v9);\n      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16LL * *(unsigned int *)(a1 + 100)) = v11;\n      v6 = 3;\n      if ( v11 )\n      {\n        v12 = sub_438810(v3, -1);\n        v13 = *(_QWORD **)(a1 + 88);\n        v14 = *(_DWORD *)(v4 + 100);\n        v13[2 * *(unsigned int *)(v4 + 100) + 1] = v12;\n        if ( v12 )\n        {\n          *(_DWORD *)(v4 + 100) = v14 + 1;\n          if ( v14 + 1 != 100 * ((v14 + 1) / 0x64u)\n            || (v15 = realloc(v13, 16LL * (unsigned int)(v14 + 101)), (*(_QWORD *)(v4 + 88) = v15) != 0LL) )\n          {\n            v6 = 0;\n          }\n        }\n      }\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x439f10L", 
            "funcEndAddr": "0x43a058L", 
            "funcName": "sub_439F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43A060(const char *a1, int *a2)\n{\n  char *v2; // rbx\n  FILE *v3; // r15\n  int v4; // er8\n  char *v5; // rax\n  __int64 v6; // r12\n  unsigned __int64 v7; // rdi\n  unsigned __int64 v8; // rsi\n  unsigned int v9; // ebp\n  _BOOL4 v10; // er13\n  unsigned int v11; // er14\n  signed __int64 v12; // rbp\n  bool v13; // zf\n  unsigned int v14; // er14\n  signed __int64 v15; // rcx\n  signed __int64 v16; // rdi\n  signed __int64 v17; // rbp\n  signed __int64 v18; // rbx\n  size_t v19; // rsi\n  FILE *v20; // rax\n  FILE *v21; // rax\n  char *v22; // r14\n  __int64 v23; // r13\n  _BOOL4 v24; // ebx\n  void *v25; // r12\n  char v26; // bl\n  const char *v27; // r14\n  const char *v28; // rax\n  unsigned __int16 v29; // r15\n  const char *v30; // rax\n  unsigned int v31; // er13\n  const char *v32; // rax\n  const char *v33; // rax\n  char *v34; // rbx\n  unsigned int v35; // er14\n  __int64 v36; // r14\n  unsigned __int64 v37; // r15\n  __int64 v38; // rax\n  char v39; // cl\n  size_t v40; // rsi\n  __int64 v41; // rax\n  char v42; // cl\n  size_t v43; // rsi\n  char *v44; // r12\n  int v45; // er14\n  const char *v46; // r15\n  const char *v47; // rbp\n  __int64 v48; // rbp\n  unsigned __int64 v49; // r14\n  __int64 v51; // [rsp+0h] [rbp-478h]\n  char *v52; // [rsp+0h] [rbp-478h]\n  FILE *stream; // [rsp+8h] [rbp-470h]\n  char v54; // [rsp+14h] [rbp-464h]\n  char *dest; // [rsp+18h] [rbp-460h]\n  void *ptr; // [rsp+20h] [rbp-458h]\n  int v57; // [rsp+2Ch] [rbp-44Ch]\n  unsigned __int64 v58; // [rsp+30h] [rbp-448h]\n  unsigned __int64 v59; // [rsp+38h] [rbp-440h]\n  const char *s[135]; // [rsp+40h] [rbp-438h]\n\n  v2 = (char *)a2;\n  v3 = fopen(a1, \"wb\");\n  if ( !v3 )\n    return 4;\n  v4 = *a2;\n  v5 = (char *)(unsigned int)a2[16];\n  v6 = (unsigned int)((_DWORD)v5 + a2[24]);\n  v7 = *((unsigned __int16 *)a2 + 26);\n  v8 = (unsigned int)a2[17];\n  if ( v6 * *((unsigned int *)v2 + 25)\n     + (unsigned int)(*((_DWORD *)v2 + 12) + 16) * (unsigned __int64)*((unsigned __int16 *)v2 + 26)\n     + v8 * ((unsigned int)v5 + 8 * (v4 == 1) + 14)\n     + 66 >= 0x7FF00000 )\n  {\n    *((_DWORD *)v2 + 1) = 1;\n    sub_4325B0(\n      \"Can't switch to 64-bit SSI index mode on this system, sorry;\\n\"\n      \"I don't have 64-bit file offset functions available.\\n\");\n  }\n  v51 = (unsigned int)(*((_DWORD *)v2 + 12) + 16);\n  dest = v5;\n  v58 = v7;\n  v10 = v4 == 1;\n  v11 = v10 + 2;\n  if ( *((_DWORD *)v2 + 1) != 1 )\n    v11 = v4 == 1;\n  v12 = 66LL;\n  if ( !(v11 & 2) )\n    v12 = 54LL;\n  v13 = *((_DWORD *)v2 + 2) == 0;\n  v59 = v8;\n  if ( v13 )\n  {\n    sub_422DF0(0LL, 56, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_43AD50, *((char **)v2 + 7), v8);\n    sub_422DF0(0LL, 16, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_43AD60, *((char **)v2 + 11), *((_DWORD *)v2 + 25));\n  }\n  else\n  {\n    fclose(*((FILE **)v2 + 10));\n    *((_QWORD *)v2 + 10) = 0LL;\n    sprintf((char *)s, \"env LC_ALL=POSIX sort -o %s %s\\n\", *((_QWORD *)v2 + 9), *((_QWORD *)v2 + 9), v51);\n    if ( system((const char *)s) )\n      return 16;\n    v20 = fopen(*((const char **)v2 + 9), \"r\");\n    *((_QWORD *)v2 + 10) = v20;\n    if ( !v20 )\n      return 16;\n    fclose(*((FILE **)v2 + 14));\n    *((_QWORD *)v2 + 14) = 0LL;\n    sprintf((char *)s, \"env LC_ALL=POSIX sort -o %s %s\\n\", *((_QWORD *)v2 + 13), *((_QWORD *)v2 + 13));\n    if ( system((const char *)s) )\n      return 16;\n    v21 = fopen(*((const char **)v2 + 13), \"r\");\n    *((_QWORD *)v2 + 14) = v21;\n    if ( !v21 )\n      return 16;\n  }\n  LODWORD(s[0]) = sub_43C710(4092848561LL);\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(v11);\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LOWORD(s[0]) = sub_43C700(*((unsigned __int16 *)v2 + 26));\n  if ( fwrite(s, 2uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(*((unsigned int *)v2 + 17));\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(*((unsigned int *)v2 + 25));\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(*((unsigned int *)v2 + 12));\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(*((unsigned int *)v2 + 16));\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(*((unsigned int *)v2 + 24));\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710(v51);\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  v14 = (_DWORD)dest + 8 * v10 + 14;\n  LODWORD(s[0]) = sub_43C710(v14);\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  LODWORD(s[0]) = sub_43C710((unsigned int)v6);\n  if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n    return 15;\n  v15 = v12 + (unsigned __int16)v58 * (unsigned int)v51;\n  v16 = v12;\n  v17 = v15 + v14 * (unsigned int)v59;\n  v52 = v2;\n  v13 = *((_DWORD *)v2 + 1) == 0;\n  stream = v3;\n  v18 = v15;\n  if ( v13 )\n  {\n    LODWORD(s[0]) = sub_43C710(v16);\n    if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n      return 15;\n    LODWORD(s[0]) = sub_43C710((unsigned int)v18);\n    if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n      return 15;\n    LODWORD(s[0]) = sub_43C710((unsigned int)v17);\n    v19 = 4LL;\n  }\n  else\n  {\n    s[0] = (const char *)sub_43C730(v16, 4LL);\n    if ( fwrite(s, 8uLL, 1uLL, v3) != 1 )\n      return 15;\n    s[0] = (const char *)sub_43C730(v18, 8LL);\n    if ( fwrite(s, 8uLL, 1uLL, v3) != 1 )\n      return 15;\n    s[0] = (const char *)sub_43C730(v17, 8LL);\n    v19 = 8LL;\n  }\n  if ( fwrite(s, v19, 1uLL, v3) != 1 )\n    return 15;\n  v22 = (char *)malloc(*((unsigned int *)v52 + 12));\n  v9 = 3;\n  if ( !v22 )\n    return v9;\n  if ( *((_WORD *)v52 + 26) )\n  {\n    v23 = 0LL;\n    do\n    {\n      v24 = 0;\n      if ( *(_DWORD *)(*((_QWORD *)v52 + 4) + 4 * v23) )\n        v24 = *(_DWORD *)(*((_QWORD *)v52 + 5) + 4 * v23) != 0;\n      strcpy(v22, *(const char **)(*((_QWORD *)v52 + 2) + 8 * v23));\n      if ( fwrite(v22, 1uLL, *((unsigned int *)v52 + 12), v3) != *((_DWORD *)v52 + 12) )\n        return 15;\n      LODWORD(s[0]) = sub_43C710(*(unsigned int *)(*((_QWORD *)v52 + 3) + 4 * v23));\n      if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n        return 15;\n      LODWORD(s[0]) = sub_43C710((unsigned int)v24);\n      if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n        return 15;\n      LODWORD(s[0]) = sub_43C710(*(unsigned int *)(*((_QWORD *)v52 + 4) + 4 * v23));\n      if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n        return 15;\n      LODWORD(s[0]) = sub_43C710(*(unsigned int *)(*((_QWORD *)v52 + 5) + 4 * v23));\n      if ( fwrite(s, 4uLL, 1uLL, v3) != 1 )\n        return 15;\n    }\n    while ( ++v23 < (unsigned __int64)*((unsigned __int16 *)v52 + 26) );\n  }\n  free(v22);\n  dest = (char *)malloc(*((unsigned int *)v52 + 16));\n  if ( !dest )\n    return v9;\n  if ( *((_DWORD *)v52 + 2) )\n  {\n    ptr = 0LL;\n    v57 = 0;\n    v25 = 0LL;\n    if ( *((_DWORD *)v52 + 17) )\n    {\n      while ( sub_438520((FILE *)v52, *((FILE **)v52 + 10), (const char **)&ptr, &v57) )\n      {\n        v26 = *v52;\n        s[0] = (const char *)ptr;\n        v27 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v27 )\n          return 6;\n        v28 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v28 )\n          return 6;\n        v29 = strtol(v28, 0LL, 10);\n        if ( v26 )\n          return 6;\n        v30 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v30 )\n          return 6;\n        v31 = strtoul(v30, 0LL, 10);\n        v32 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v32 )\n          return 6;\n        v59 = strtoul(v32, 0LL, 10);\n        v33 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v33 )\n          return 6;\n        v58 = strtoul(v33, 0LL, 10);\n        v34 = dest;\n        strcpy(dest, v27);\n        v35 = 15;\n        if ( fwrite(v34, 1uLL, *((unsigned int *)v52 + 16), stream) != *((_DWORD *)v52 + 16) )\n          return v35;\n        LOWORD(s[0]) = sub_43C700(v29);\n        if ( fwrite(s, 2uLL, 1uLL, stream) != 1 )\n          return v35;\n        LODWORD(s[0]) = sub_43C710(v31);\n        if ( fwrite(s, 4uLL, 1uLL, stream) != 1 )\n          return v35;\n        LODWORD(s[0]) = sub_43C710(v59);\n        if ( fwrite(s, 4uLL, 1uLL, stream) != 1 )\n          return v35;\n        LODWORD(s[0]) = sub_43C710(v58);\n        if ( fwrite(s, 4uLL, 1uLL, stream) != 1 )\n          return v35;\n        LODWORD(v25) = (_DWORD)v25 + 1;\n        if ( (unsigned int)v25 >= *((_DWORD *)v52 + 17) )\n        {\n          v25 = ptr;\n          goto LABEL_64;\n        }\n      }\n      return 1;\n    }\nLABEL_64:\n    free(v25);\n  }\n  else if ( *((_DWORD *)v52 + 17) )\n  {\n    v36 = 0LL;\n    v37 = 0LL;\n    do\n    {\n      strcpy(dest, *(const char **)(*((_QWORD *)v52 + 7) + v36));\n      if ( fwrite(dest, 1uLL, *((unsigned int *)v52 + 16), stream) != *((_DWORD *)v52 + 16) )\n        return 15;\n      LOWORD(s[0]) = sub_43C700(*(unsigned __int16 *)(*((_QWORD *)v52 + 7) + v36 + 8));\n      if ( fwrite(s, 2uLL, 1uLL, stream) != 1 )\n        return 15;\n      v38 = *((_QWORD *)v52 + 7);\n      v39 = *(_BYTE *)(v38 + v36 + 16);\n      if ( v39 == 1 )\n      {\n        s[0] = (const char *)sub_43C730(*(_QWORD *)(v38 + v36 + 24), 2LL);\n        v40 = 8LL;\n      }\n      else\n      {\n        if ( v39 )\n          goto LABEL_105;\n        LODWORD(s[0]) = sub_43C710(*(unsigned int *)(v38 + v36 + 24));\n        v40 = 4LL;\n      }\n      if ( fwrite(s, v40, 1uLL, stream) != 1 )\n        return 15;\n      v41 = *((_QWORD *)v52 + 7);\n      v42 = *(_BYTE *)(v41 + v36 + 32);\n      if ( v42 == 1 )\n      {\n        s[0] = (const char *)sub_43C730(*(_QWORD *)(v41 + v36 + 40), v40);\n        v43 = 8LL;\n      }\n      else\n      {\n        if ( v42 )\nLABEL_105:\n          abort();\n        LODWORD(s[0]) = sub_43C710(*(unsigned int *)(v41 + v36 + 40));\n        v43 = 4LL;\n      }\n      if ( fwrite(s, v43, 1uLL, stream) != 1 )\n        return 15;\n      LODWORD(s[0]) = sub_43C710(*(unsigned int *)(*((_QWORD *)v52 + 7) + v36 + 48));\n      if ( fwrite(s, 4uLL, 1uLL, stream) != 1 )\n        return 15;\n      ++v37;\n      v36 += 56LL;\n    }\n    while ( v37 < *((unsigned int *)v52 + 17) );\n  }\n  if ( !*((_DWORD *)v52 + 25) )\n  {\nLABEL_99:\n    free(dest);\n    fclose(stream);\n    return 0;\n  }\n  v44 = (char *)malloc(*((unsigned int *)v52 + 24));\n  if ( v44 )\n  {\n    if ( *((_DWORD *)v52 + 2) )\n    {\n      ptr = 0LL;\n      v57 = 0;\n      v45 = 0;\n      while ( sub_438520((FILE *)v52, *((FILE **)v52 + 14), (const char **)&ptr, &v57) )\n      {\n        s[0] = (const char *)ptr;\n        v46 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v46 )\n          return 6;\n        v47 = sub_4387A0(s, \"\\t\\n\", &v54);\n        if ( !v47 )\n          return 6;\n        strcpy(v44, v46);\n        strcpy(dest, v47);\n        v9 = 15;\n        if ( fwrite(v44, 1uLL, *((unsigned int *)v52 + 24), stream) != *((_DWORD *)v52 + 24)\n          || fwrite(dest, 1uLL, *((unsigned int *)v52 + 16), stream) != *((_DWORD *)v52 + 16) )\n        {\n          return v9;\n        }\n        if ( (unsigned int)++v45 >= *((_DWORD *)v52 + 25) )\n        {\n          free(ptr);\n          goto LABEL_98;\n        }\n      }\n      return 1;\n    }\n    v48 = 0LL;\n    v49 = 0LL;\n    while ( 1 )\n    {\n      strcpy(v44, *(const char **)(*((_QWORD *)v52 + 11) + v48));\n      strcpy(dest, *(const char **)(*((_QWORD *)v52 + 11) + v48 + 8));\n      if ( fwrite(v44, 1uLL, *((unsigned int *)v52 + 24), stream) != *((_DWORD *)v52 + 24)\n        || fwrite(dest, 1uLL, *((unsigned int *)v52 + 16), stream) != *((_DWORD *)v52 + 16) )\n      {\n        return 15;\n      }\n      ++v49;\n      v48 += 16LL;\n      if ( v49 >= *((unsigned int *)v52 + 25) )\n      {\nLABEL_98:\n        free(v44);\n        goto LABEL_99;\n      }\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x43a060L", 
            "funcEndAddr": "0x43ad4bL", 
            "funcName": "sub_43A060"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_43AD50(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x43ad50L", 
            "funcEndAddr": "0x43ad5bL", 
            "funcName": "sub_43AD50"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_43AD60(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x43ad60L", 
            "funcEndAddr": "0x43ad6bL", 
            "funcName": "sub_43AD60"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_43ADB0()\n{\n  _QWORD *result; // rax\n\n  result = malloc(0x10uLL);\n  if ( !result )\n    sub_4325B0(\"Memory allocation failure at %s line %d\", \"stack.c\", 42LL);\n  result[1] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x43adb0L", 
            "funcEndAddr": "0x43ade6L", 
            "funcName": "sub_43ADB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43ADF0(__int64 a1, int a2)\n{\n  _DWORD *v2; // rax\n  _DWORD *v3; // rbp\n  __int64 result; // rax\n\n  v2 = malloc(0x10uLL);\n  v3 = v2;\n  if ( !v2 )\n    sub_4325B0(\"Memory allocation failure at %s line %d\", \"stack.c\", 52LL);\n  *v2 = a2;\n  result = *(_QWORD *)(a1 + 8);\n  *((_QWORD *)v3 + 1) = result;\n  *(_QWORD *)(a1 + 8) = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x43adf0L", 
            "funcEndAddr": "0x43ae37L", 
            "funcName": "sub_43ADF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_43AE40(__int64 a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  _QWORD *v3; // rdi\n\n  v2 = a1;\n  v3 = *(_QWORD **)(a1 + 8);\n  if ( !v3 )\n    return 0LL;\n  *(_QWORD *)(v2 + 8) = v3[1];\n  *a2 = *(_DWORD *)v3;\n  free(v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x43ae40L", 
            "funcEndAddr": "0x43ae6bL", 
            "funcName": "sub_43AE40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43AEB0(void *ptr)\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // rdi\n  unsigned int i; // ebp\n\n  v1 = ptr;\n  v2 = (_QWORD *)*((_QWORD *)ptr + 1);\n  for ( i = 0; v2; v2 = (_QWORD *)v1[1] )\n  {\n    v1[1] = v2[1];\n    free(v2);\n    ++i;\n  }\n  free(v1);\n  return i;\n}\n", 
            "funcStartAddr": "0x43aeb0L", 
            "funcEndAddr": "0x43aefaL", 
            "funcName": "sub_43AEB0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_43AF00(__int64 a1)\n{\n  __int64 v1; // r15\n  _QWORD *v2; // r13\n  char *v3; // rax\n  const char *v4; // rbx\n  __int64 v5; // rbp\n  const char **v6; // r12\n  char v7; // bl\n  signed int v8; // er14\n  char *v9; // rbx\n  const char *v10; // rbp\n  int v11; // eax\n  char *v12; // rsi\n  signed int v13; // er14\n  const char **v14; // rbx\n  char *v15; // r12\n  char *v16; // rbp\n  char *v17; // r13\n  const char *v18; // r12\n  char *v19; // rbp\n  __int64 v20; // rbx\n  int v21; // er13\n  signed int v22; // er14\n  char *v23; // rbp\n  const char *v24; // r12\n  char *v25; // rbp\n  const char *v26; // r13\n  const char *v27; // r12\n  __int64 v28; // rbx\n  int v29; // eax\n  int v30; // er14\n  __int64 v31; // rax\n  __int64 v32; // rax\n  float v33; // xmm0_4\n  int v34; // ecx\n  const char **v35; // rdi\n  const char *v36; // rax\n  float v37; // xmm0_4\n  const char *v38; // rax\n  float v39; // xmm0_4\n  void *v40; // rcx\n  _DWORD *v41; // rax\n  const char *v42; // rax\n  float v43; // xmm0_4\n  const char *v44; // rax\n  float v45; // xmm0_4\n  __int64 v46; // rbp\n  _DWORD *v47; // rax\n  const char *v48; // rax\n  float v49; // xmm0_4\n  const char *v50; // rax\n  float v51; // xmm0_4\n  void *v52; // rax\n  signed __int64 v53; // rcx\n  void *v54; // rax\n  signed __int64 v55; // rcx\n  void *v56; // rsi\n  __int64 v58; // [rsp+8h] [rbp-60h]\n  int v59; // [rsp+14h] [rbp-54h]\n  _QWORD *v60; // [rsp+18h] [rbp-50h]\n  const char **v61; // [rsp+20h] [rbp-48h]\n  const char **v62; // [rsp+28h] [rbp-40h]\n  const char **v63; // [rsp+30h] [rbp-38h]\n\n  v1 = a1;\n  if ( feof(*(FILE **)a1) )\n    return 0LL;\n  v2 = (_QWORD *)sub_42AF80(10, 0);\n  do\n  {\n    v3 = (char *)sub_42C980(a1);\n    v4 = v3;\n    if ( !v3 )\n      goto LABEL_121;\n  }\n  while ( (unsigned int)sub_4388B0(v3) );\n  if ( strncmp(v4, \"# STOCKHOLM 1.\", 0xEuLL) )\n    sub_4325B0(\n      \"File %s doesn't appear to be in Stockholm format.\\n\"\n      \"Assuming there isn't some other problem with your file (it is an\\n\"\n      \"alignment file, right?), please either:\\n\"\n      \"  a) use the Babelfish format autotranslator option (-B, usually);\\n\"\n      \"  b) specify the file's format with the --informat option; or\\n\"\n      \"  a) reformat the alignment to Stockholm format.\\n\",\n      *(_QWORD *)(a1 + 8));\n  v5 = sub_42C980(a1);\n  if ( !v5 )\n  {\nLABEL_116:\n    if ( *((_DWORD *)v2 + 7) )\n    {\n      v56 = &unk_4409CD;\n      if ( v2[5] )\n        v56 = (void *)v2[5];\n      sub_4325B0(\"Didn't find // at end of alignment %s\", v56);\n    }\nLABEL_121:\n    sub_42B580(v2);\n    return 0LL;\n  }\n  v63 = (const char **)(v2 + 9);\n  v62 = (const char **)(v2 + 10);\n  v61 = (const char **)(v2 + 11);\n  v6 = (const char **)&v58;\n  v60 = v2;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v7 = *(_BYTE *)v5;\n      if ( *(_BYTE *)v5 == 9 )\n        goto LABEL_9;\n      if ( v7 == 35 )\n      {\n        if ( !strncmp((const char *)v5, \"#=GF\", 4uLL) )\n        {\n          v58 = v5;\n          v13 = 0;\n          v14 = v6;\n          if ( !sub_4387A0(v6, \" \\t\\n\", 0LL) )\n            goto LABEL_87;\n          v13 = 0;\n          v15 = (char *)sub_4387A0(v6, \" \\t\\n\", 0LL);\n          if ( !v15 )\n            goto LABEL_87;\n          v13 = 0;\n          v16 = (char *)sub_4387A0(v14, \"\\n\", 0LL);\n          if ( !v16 )\n            goto LABEL_87;\n          while ( *v16 == 32 || *v16 == 9 )\n            ++v16;\n          if ( !strcmp(v15, \"ID\") )\n          {\n            v2[5] = sub_438810(v16, -1);\n          }\n          else if ( !strcmp(v15, \"AC\") )\n          {\n            v2[7] = sub_438810(v16, -1);\n          }\n          else if ( !strcmp(v15, \"DE\") )\n          {\n            v2[6] = sub_438810(v16, -1);\n          }\n          else\n          {\n            if ( strcmp(v15, \"AU\") )\n            {\n              if ( !strcmp(v15, \"GA\") )\n              {\n                v58 = (__int64)v16;\n                v13 = 0;\n                v14 = (const char **)&v58;\n                v36 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                if ( !v36 )\n                  goto LABEL_87;\n                v37 = strtod(v36, 0LL);\n                *((float *)v2 + 34) = v37;\n                *((_DWORD *)v2 + 40) = 1;\n                v38 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                v13 = 1;\n                if ( v38 )\n                {\n                  v39 = strtod(v38, 0LL);\n                  *((float *)v2 + 35) = v39;\n                  *((_DWORD *)v2 + 41) = 1;\n                }\n              }\n              else if ( !strcmp(v15, \"NC\") )\n              {\n                v58 = (__int64)v16;\n                v13 = 0;\n                v14 = (const char **)&v58;\n                v42 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                if ( !v42 )\n                  goto LABEL_87;\n                v43 = strtod(v42, 0LL);\n                *((float *)v2 + 36) = v43;\n                *((_DWORD *)v2 + 42) = 1;\n                v44 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                v13 = 1;\n                if ( v44 )\n                {\n                  v45 = strtod(v44, 0LL);\n                  *((float *)v2 + 37) = v45;\n                  *((_DWORD *)v2 + 43) = 1;\n                }\n              }\n              else\n              {\n                if ( strcmp(v15, \"TC\") )\n                {\n                  sub_42B930((__int64)v2, v15, v16);\n                  goto LABEL_77;\n                }\n                v58 = (__int64)v16;\n                v13 = 0;\n                v14 = (const char **)&v58;\n                v48 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                if ( !v48 )\n                  goto LABEL_87;\n                v49 = strtod(v48, 0LL);\n                *((float *)v2 + 32) = v49;\n                *((_DWORD *)v2 + 38) = 1;\n                v50 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n                v13 = 1;\n                if ( v50 )\n                {\n                  v51 = strtod(v50, 0LL);\n                  *((float *)v2 + 33) = v51;\n                  *((_DWORD *)v2 + 39) = 1;\n                }\n              }\nLABEL_78:\n              v14 = (const char **)&v58;\n              goto LABEL_87;\n            }\n            v2[8] = sub_438810(v16, -1);\n          }\nLABEL_77:\n          v13 = 1;\n          goto LABEL_78;\n        }\n        if ( !strncmp((const char *)v5, \"#=GS\", 4uLL) )\n        {\n          v58 = v5;\n          v13 = 0;\n          v14 = v6;\n          if ( sub_4387A0(v6, \" \\t\\n\", 0LL) )\n          {\n            v13 = 0;\n            v17 = (char *)sub_4387A0(v6, \" \\t\\n\", 0LL);\n            if ( v17 )\n            {\n              v13 = 0;\n              v18 = sub_4387A0(v6, \" \\t\\n\", 0LL);\n              if ( v18 )\n              {\n                v13 = 0;\n                v19 = (char *)sub_4387A0(v14, \"\\n\", 0LL);\n                if ( v19 )\n                {\n                  while ( *v19 == 32 || *v19 == 9 )\n                    ++v19;\n                  v20 = (__int64)v60;\n                  v21 = sub_42CA00((__int64)v60, v17, *((_DWORD *)v60 + 88) + 1);\n                  *(_DWORD *)(v20 + 352) = v21;\n                  if ( !strcmp(v18, \"WT\") )\n                  {\n                    v33 = strtod(v19, 0LL);\n                    *(float *)(*(_QWORD *)(v20 + 16) + 4LL * v21) = v33;\n                    *(_BYTE *)(v20 + 32) |= 1u;\n                  }\n                  else if ( !strcmp(v18, \"AC\") )\n                  {\n                    sub_42B750((__int64)v60, v21, v19);\n                  }\n                  else if ( !strcmp(v18, \"DE\") )\n                  {\n                    sub_42B7E0((__int64)v60, v21, v19);\n                  }\n                  else\n                  {\n                    sub_42BA60((__int64)v60, v18, v21, v19);\n                  }\n                  v13 = 1;\n                  v14 = (const char **)&v58;\n                }\n              }\n            }\n          }\n          v2 = v60;\nLABEL_87:\n          v6 = v14;\n          if ( !v13 )\n            goto LABEL_88;\n          goto LABEL_69;\n        }\n        if ( strncmp((const char *)v5, \"#=GC\", 4uLL) )\n        {\n          if ( strncmp((const char *)v5, \"#=GR\", 4uLL) )\n          {\n            v12 = (char *)(v5 + 1);\n            v58 = v5 + 1;\n            if ( *(_BYTE *)(v5 + 1) == 10 )\n            {\n              *v12 = 0;\n              goto LABEL_66;\n            }\n            v8 = 0;\n            v12 = (char *)sub_4387A0(v6, \"\\n\", 0LL);\n            if ( v12 )\n            {\nLABEL_66:\n              sub_42B870((__int64)v2, v12);\nLABEL_67:\n              v8 = 1;\n            }\nLABEL_68:\n            if ( !v8 )\n              goto LABEL_88;\n            goto LABEL_69;\n          }\n          v58 = v5;\n          v22 = 0;\n          if ( sub_4387A0(v6, \" \\t\\n\", 0LL) )\n          {\n            v22 = 0;\n            v25 = (char *)sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n            if ( v25 )\n            {\n              v22 = 0;\n              v26 = sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL);\n              if ( v26 )\n              {\n                v27 = sub_4387A0((const char **)&v58, \" \\t\\n\", &v59);\n                if ( v27 )\n                {\n                  v28 = (__int64)v60;\n                  v29 = sub_42CA00((__int64)v60, v25, *((_DWORD *)v60 + 88));\n                  v30 = v29;\n                  *(_DWORD *)(v28 + 352) = v29;\n                  LODWORD(v31) = strcmp(v26, \"SS\");\n                  if ( (_DWORD)v31 )\n                  {\n                    LODWORD(v32) = strcmp(v26, \"SA\");\n                    if ( (_DWORD)v32 )\n                    {\n                      sub_42BF90((__int64)v60, v26, v30, (__int64)v27);\n                    }\n                    else\n                    {\n                      v46 = (__int64)v60;\n                      if ( v60[15] )\n                      {\n                        v47 = (_DWORD *)v60[43];\n                      }\n                      else\n                      {\n                        v54 = sub_4382F0(v32, 8LL * *((signed int *)v60 + 80), (__int64)\"stockholm.c\", 0x23Fu);\n                        *(_QWORD *)(v46 + 120) = v54;\n                        v47 = sub_4382F0((__int64)v54, 4LL * *(signed int *)(v46 + 320), (__int64)\"stockholm.c\", 0x240u);\n                        *(_QWORD *)(v46 + 344) = v47;\n                        if ( *(_DWORD *)(v46 + 320) > 0 )\n                        {\n                          v55 = 0LL;\n                          do\n                          {\n                            *(_QWORD *)(*(_QWORD *)(v46 + 120) + 8 * v55) = 0LL;\n                            v47 = *(_DWORD **)(v46 + 344);\n                            v47[v55++] = 0;\n                          }\n                          while ( v55 < *(signed int *)(v46 + 320) );\n                        }\n                      }\n                      *(_DWORD *)(*(_QWORD *)(v46 + 344) + 4LL * v30) = sub_438690(\n                                                                          (const char **)(*(_QWORD *)(v46 + 120)\n                                                                                        + 8LL * v30),\n                                                                          v47[v30],\n                                                                          v27,\n                                                                          v59);\n                    }\n                  }\n                  else\n                  {\n                    if ( *(_QWORD *)(v28 + 112) )\n                    {\n                      v41 = *(_DWORD **)(v28 + 336);\n                    }\n                    else\n                    {\n                      v52 = sub_4382F0(v31, 8LL * *(signed int *)(v28 + 320), (__int64)\"stockholm.c\", 0x231u);\n                      *(_QWORD *)(v28 + 112) = v52;\n                      v41 = sub_4382F0((__int64)v52, 4LL * *(signed int *)(v28 + 320), (__int64)\"stockholm.c\", 0x232u);\n                      *(_QWORD *)(v28 + 336) = v41;\n                      if ( *(_DWORD *)(v28 + 320) > 0 )\n                      {\n                        v53 = 0LL;\n                        do\n                        {\n                          *(_QWORD *)(*(_QWORD *)(v28 + 112) + 8 * v53) = 0LL;\n                          v41 = *(_DWORD **)(v28 + 336);\n                          v41[v53++] = 0;\n                        }\n                        while ( v53 < *(signed int *)(v28 + 320) );\n                      }\n                    }\n                    *(_DWORD *)(*(_QWORD *)(v28 + 336) + 4LL * v30) = sub_438690(\n                                                                        (const char **)(*(_QWORD *)(v28 + 112)\n                                                                                      + 8LL * v30),\n                                                                        v41[v30],\n                                                                        v27,\n                                                                        v59);\n                  }\n                  v22 = 1;\n                }\n              }\n            }\n          }\n          v2 = v60;\n          goto LABEL_114;\n        }\n        v58 = v5;\n        v22 = 0;\n        if ( !sub_4387A0(v6, \" \\t\\n\", 0LL)\n          || (v22 = 0, (v23 = (char *)sub_4387A0((const char **)&v58, \" \\t\\n\", 0LL)) == 0LL)\n          || (v24 = sub_4387A0((const char **)&v58, \" \\t\\n\", &v59)) == 0LL )\n        {\nLABEL_114:\n          v6 = (const char **)&v58;\n          if ( !v22 )\n          {\nLABEL_88:\n            v40 = (void *)v2[5];\n            if ( !v40 )\n              v40 = &unk_4409CD;\n            sub_4325B0(\n              \"Stockholm format parse error: line %d of file %s while reading alignment %s\",\n              *(unsigned int *)(v1 + 16),\n              *(_QWORD *)(v1 + 8),\n              v40);\n          }\n          goto LABEL_69;\n        }\n        if ( !strcmp(v23, \"SS_cons\") )\n        {\n          v34 = v59;\n          v35 = v63;\n        }\n        else if ( !strcmp(v23, \"SA_cons\") )\n        {\n          v34 = v59;\n          v35 = v62;\n        }\n        else\n        {\n          if ( strcmp(v23, \"RF\") )\n          {\n            sub_42BDF0((__int64)v2, v23, (__int64)v24);\nLABEL_93:\n            v22 = 1;\n            goto LABEL_114;\n          }\n          v34 = v59;\n          v35 = v61;\n        }\n        sub_438690(v35, -1, v24, v34);\n        goto LABEL_93;\n      }\n      if ( v7 != 32 )\n        break;\nLABEL_9:\n      ++v5;\n    }\n    if ( !strncmp((const char *)v5, \"//\", 2uLL) )\n      break;\n    if ( v7 != 10 )\n    {\n      v58 = v5;\n      v8 = 0;\n      v9 = (char *)sub_4387A0(v6, \" \\t\\n\", 0LL);\n      if ( v9 )\n      {\n        v10 = sub_4387A0(v6, \" \\t\\n\", &v59);\n        if ( v10 )\n        {\n          v11 = sub_42CA00((__int64)v2, v9, *((_DWORD *)v2 + 88) + 1);\n          *((_DWORD *)v2 + 88) = v11;\n          *(_DWORD *)(v2[41] + 4LL * v11) = sub_438690(\n                                              (const char **)(*v2 + 8LL * v11),\n                                              *(_DWORD *)(v2[41] + 4LL * v11),\n                                              v10,\n                                              v59);\n          goto LABEL_67;\n        }\n      }\n      goto LABEL_68;\n    }\nLABEL_69:\n    v5 = sub_42C980(v1);\n    if ( !v5 )\n      goto LABEL_116;\n  }\n  sub_42C2C0((__int64)v2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x43af00L", 
            "funcEndAddr": "0x43b9cbL", 
            "funcName": "sub_43AF00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43B9E0(FILE *a1, __int64 a2, int a3)\n{\n  __int64 v3; // r13\n  __int64 v4; // r14\n  __int64 v5; // r15\n  __int64 v6; // rbx\n  int v7; // ebp\n  int v8; // eax\n  bool v9; // r14\n  int v10; // ebx\n  __int64 v11; // r15\n  __int64 v12; // r12\n  __int64 v13; // rbp\n  int v14; // eax\n  _BOOL4 v15; // edi\n  signed int v16; // eax\n  signed int v17; // er15\n  signed int v18; // ecx\n  __int64 v19; // rdx\n  __int64 v20; // rsi\n  int v21; // edi\n  __int64 v22; // r14\n  __int64 v23; // rbp\n  __int64 v24; // rbx\n  signed int v25; // eax\n  __int64 v26; // r15\n  char *v27; // r12\n  __int64 v28; // rbx\n  __int64 v29; // rax\n  double v30; // xmm0_8\n  double v31; // xmm0_8\n  double v32; // xmm0_8\n  signed __int64 v33; // rbx\n  signed __int64 v34; // rbx\n  __int64 v35; // rcx\n  int v36; // eax\n  signed __int64 i; // rbx\n  __int64 v38; // rcx\n  int v39; // eax\n  signed __int64 j; // rbx\n  signed __int64 v41; // rbp\n  signed __int64 v42; // rbx\n  const char *v43; // rax\n  signed __int64 v44; // r12\n  signed __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // rsi\n  __int64 v48; // rax\n  __int64 v49; // rsi\n  int v50; // eax\n  signed __int64 v51; // rbx\n  __int64 v52; // rsi\n  __int64 v53; // rsi\n  __int64 v54; // rsi\n  __int64 v55; // rsi\n  signed __int64 v56; // rbx\n  FILE *s; // [rsp+10h] [rbp-68h]\n  unsigned int v58; // [rsp+1Ch] [rbp-5Ch]\n  int v59; // [rsp+30h] [rbp-48h]\n  char *dest; // [rsp+38h] [rbp-40h]\n  __int64 v61; // [rsp+40h] [rbp-38h]\n\n  v59 = a3;\n  v3 = a2;\n  s = a1;\n  v4 = *(signed int *)(a2 + 28);\n  if ( v4 <= 0 )\n  {\n    v7 = 0;\n  }\n  else\n  {\n    v5 = *(_QWORD *)(a2 + 8);\n    v6 = 0LL;\n    v7 = 0;\n    do\n    {\n      v8 = strlen(*(const char **)(v5 + 8 * v6));\n      if ( v7 < v8 )\n        v7 = v8;\n      ++v6;\n    }\n    while ( v6 < v4 );\n  }\n  v58 = v7;\n  v9 = *(_OWORD *)(a2 + 112) == 0LL;\n  v10 = 2 * (*(_OWORD *)(a2 + 112) != 0LL);\n  v11 = *(signed int *)(a2 + 304);\n  if ( v11 > 0 )\n  {\n    v12 = *(_QWORD *)(a2 + 280);\n    v13 = 0LL;\n    do\n    {\n      v14 = strlen(*(const char **)(v12 + 8 * v13));\n      if ( v10 < v14 )\n        v10 = v14;\n      ++v13;\n    }\n    while ( v13 < v11 );\n  }\n  v15 = *(_QWORD *)(a2 + 88) != 0LL;\n  v16 = 2;\n  if ( !*(_QWORD *)(a2 + 88) )\n    v16 = v10;\n  if ( v10 > 2 )\n    v16 = v10;\n  v17 = 7;\n  v18 = 7;\n  if ( v16 > 6 )\n    v18 = v16;\n  v19 = *(_QWORD *)(a2 + 72);\n  v20 = *(_QWORD *)(a2 + 80);\n  if ( !v19 )\n    v18 = v16;\n  if ( v18 > 6 )\n    v17 = v18;\n  if ( !v20 )\n    v17 = v18;\n  v21 = 4 * v15;\n  if ( !v9 )\n    v21 = 4;\n  if ( v19 | v20 )\n    v21 = 4;\n  v22 = *(signed int *)(v3 + 272);\n  if ( v22 > 0 )\n  {\n    v23 = *(_QWORD *)(v3 + 248);\n    v24 = 0LL;\n    do\n    {\n      v25 = strlen(*(const char **)(v23 + 8 * v24));\n      if ( v17 < v25 )\n        v17 = v25;\n      ++v24;\n    }\n    while ( v24 < v22 );\n  }\n  v26 = v58 + v17;\n  v27 = (char *)sub_4382F0(\n                  (unsigned int)(v21 + v26 + v59 + 61),\n                  v21 + (signed int)v26 + v59 + 61,\n                  (__int64)\"stockholm.c\",\n                  0xFBu);\n  fwrite(\"# STOCKHOLM 1.0\\n\", 0x10uLL, 1uLL, s);\n  if ( *(_DWORD *)(v3 + 184) > 0 )\n  {\n    v28 = 0LL;\n    do\n    {\n      fprintf(s, \"# %s\\n\", *(_QWORD *)(*(_QWORD *)(v3 + 176) + 8 * v28++));\n      v29 = *(signed int *)(v3 + 184);\n    }\n    while ( v28 < v29 );\n    if ( (signed int)v29 > 0 )\n      fputc(10, s);\n  }\n  if ( *(_QWORD *)(v3 + 40) )\n    fprintf(s, \"#=GF ID    %s\\n\");\n  if ( *(_QWORD *)(v3 + 56) )\n    fprintf(s, \"#=GF AC    %s\\n\");\n  if ( *(_QWORD *)(v3 + 48) )\n    fprintf(s, \"#=GF DE    %s\\n\");\n  if ( *(_QWORD *)(v3 + 64) )\n    fprintf(s, \"#=GF AU    %s\\n\");\n  if ( *(_DWORD *)(v3 + 160) )\n  {\n    v30 = *(float *)(v3 + 136);\n    if ( !*(_DWORD *)(v3 + 164) )\n    {\n      fprintf(s, \"#=GF GA    %.1f\\n\", v30);\n      if ( !*(_DWORD *)(v3 + 168) )\n        goto LABEL_57;\n      goto LABEL_51;\n    }\n    fprintf(s, \"#=GF GA    %.1f %.1f\\n\", v30, *(float *)(v3 + 140));\n  }\n  if ( !*(_DWORD *)(v3 + 168) )\n    goto LABEL_57;\nLABEL_51:\n  v31 = *(float *)(v3 + 144);\n  if ( *(_DWORD *)(v3 + 172) )\n  {\n    fprintf(s, \"#=GF NC    %.1f %.1f\\n\", v31, *(float *)(v3 + 148));\n    if ( !*(_DWORD *)(v3 + 152) )\n      goto LABEL_60;\n    goto LABEL_58;\n  }\n  fprintf(s, \"#=GF NC    %.1f\\n\", v31);\nLABEL_57:\n  if ( !*(_DWORD *)(v3 + 152) )\n    goto LABEL_60;\nLABEL_58:\n  v32 = *(float *)(v3 + 128);\n  if ( !*(_DWORD *)(v3 + 156) )\n  {\n    fprintf(s, \"#=GF TC    %.1f\\n\", v32);\n    if ( *(_DWORD *)(v3 + 208) <= 0 )\n      goto LABEL_63;\n    goto LABEL_61;\n  }\n  fprintf(s, \"#=GF TC    %.1f %.1f\\n\", v32, *(float *)(v3 + 132));\nLABEL_60:\n  if ( *(_DWORD *)(v3 + 208) <= 0 )\n    goto LABEL_63;\nLABEL_61:\n  v33 = 0LL;\n  do\n  {\n    fprintf(\n      s,\n      \"#=GF %-5s %s\\n\",\n      *(_QWORD *)(*(_QWORD *)(v3 + 192) + 8 * v33),\n      *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v33));\n    ++v33;\n  }\n  while ( v33 < *(signed int *)(v3 + 208) );\nLABEL_63:\n  fputc(10, s);\n  if ( *(_BYTE *)(v3 + 32) & 1 )\n  {\n    if ( *(_DWORD *)(v3 + 28) > 0 )\n    {\n      v34 = 0LL;\n      do\n      {\n        fprintf(\n          s,\n          \"#=GS %-*.*s WT    %.2f\\n\",\n          v58,\n          v58,\n          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v34),\n          *(float *)(*(_QWORD *)(v3 + 16) + 4 * v34));\n        ++v34;\n      }\n      while ( v34 < *(signed int *)(v3 + 28) );\n    }\n    fputc(10, s);\n  }\n  v35 = *(_QWORD *)(v3 + 96);\n  if ( v35 )\n  {\n    v36 = *(_DWORD *)(v3 + 28);\n    if ( v36 > 0 )\n    {\n      for ( i = 1LL; ; ++i )\n      {\n        if ( *(_QWORD *)(v35 + 8 * i - 8) )\n        {\n          fprintf(s, \"#=GS %-*.*s AC    %s\\n\", v58, v58, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * i - 8));\n          v36 = *(_DWORD *)(v3 + 28);\n        }\n        if ( i >= v36 )\n          break;\n        v35 = *(_QWORD *)(v3 + 96);\n      }\n    }\n    fputc(10, s);\n  }\n  v38 = *(_QWORD *)(v3 + 104);\n  if ( v38 )\n  {\n    v39 = *(_DWORD *)(v3 + 28);\n    if ( v39 > 0 )\n    {\n      for ( j = 1LL; ; ++j )\n      {\n        if ( *(_QWORD *)(v38 + 8 * j - 8) )\n        {\n          fprintf(s, \"#=GS %*.*s DE    %s\\n\", v58, v58, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * j - 8));\n          v39 = *(_DWORD *)(v3 + 28);\n        }\n        if ( j >= v39 )\n          break;\n        v38 = *(_QWORD *)(v3 + 104);\n      }\n    }\n    fputc(10, s);\n  }\n  dest = v27;\n  if ( *(_DWORD *)(v3 + 240) > 0 )\n  {\n    v41 = 0LL;\n    do\n    {\n      if ( *(_DWORD *)(v3 + 28) > 0 )\n      {\n        v42 = 0LL;\n        do\n        {\n          if ( *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * v41) + 8 * v42) )\n          {\n            v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * v41) + 8 * v42);\n            while ( 1 )\n            {\n              v43 = sub_4387A0((const char **)&v61, \"\\n\", 0LL);\n              if ( !v43 )\n                break;\n              fprintf(\n                s,\n                \"#=GS %*.*s %5s %s\\n\",\n                v58,\n                v58,\n                *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v42),\n                *(_QWORD *)(*(_QWORD *)(v3 + 216) + 8 * v41),\n                v43);\n            }\n          }\n          ++v42;\n        }\n        while ( v42 < *(signed int *)(v3 + 28) );\n      }\n      fputc(10, s);\n      ++v41;\n    }\n    while ( v41 < *(signed int *)(v3 + 240) );\n  }\n  if ( *(_DWORD *)(v3 + 24) > 0 )\n  {\n    v44 = 0LL;\n    do\n    {\n      if ( v44 > 0 )\n        fputc(10, s);\n      if ( *(_DWORD *)(v3 + 28) > 0 )\n      {\n        v45 = 0LL;\n        do\n        {\n          strncpy(dest, (const char *)(v44 + *(_QWORD *)(*(_QWORD *)v3 + 8 * v45)), v59);\n          dest[v59] = 0;\n          fprintf(\n            s,\n            \"%-*.*s  %s\\n\",\n            (unsigned int)(v26 + v21),\n            (unsigned int)(v26 + v21),\n            *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v45),\n            dest);\n          v46 = *(_QWORD *)(v3 + 112);\n          if ( v46 )\n          {\n            v47 = *(_QWORD *)(v46 + 8 * v45);\n            if ( v47 )\n            {\n              strncpy(dest, (const char *)(v44 + v47), v59);\n              dest[v59] = 0;\n              fprintf(s, \"#=GR %-*.*s SS     %s\\n\", v58, v58, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v45), dest);\n            }\n          }\n          v48 = *(_QWORD *)(v3 + 120);\n          if ( v48 )\n          {\n            v49 = *(_QWORD *)(v48 + 8 * v45);\n            if ( v49 )\n            {\n              strncpy(dest, (const char *)(v44 + v49), v59);\n              dest[v59] = 0;\n              fprintf(s, \"#=GR %-*.*s SA     %s\\n\", v58, v58, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v45), dest);\n            }\n          }\n          v50 = *(_DWORD *)(v3 + 304);\n          if ( v50 > 0 )\n          {\n            v51 = 0LL;\n            do\n            {\n              v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 288) + 8 * v51) + 8 * v45);\n              if ( v52 )\n              {\n                strncpy(dest, (const char *)(v44 + v52), v59);\n                dest[v59] = 0;\n                fprintf(\n                  s,\n                  \"#=GR %-*.*s %5s  %s\\n\",\n                  v58,\n                  v58,\n                  *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v45),\n                  *(_QWORD *)(*(_QWORD *)(v3 + 280) + 8 * v51),\n                  dest);\n                v50 = *(_DWORD *)(v3 + 304);\n              }\n              ++v51;\n            }\n            while ( v51 < v50 );\n          }\n          ++v45;\n        }\n        while ( v45 < *(signed int *)(v3 + 28) );\n      }\n      v53 = *(_QWORD *)(v3 + 72);\n      if ( v53 )\n      {\n        strncpy(dest, (const char *)(v44 + v53), v59);\n        dest[v59] = 0;\n        fprintf(s, \"#=GC %-*.*s %s\\n\", v26, (unsigned int)v26, \"SS_cons\", dest);\n      }\n      v54 = *(_QWORD *)(v3 + 80);\n      if ( v54 )\n      {\n        strncpy(dest, (const char *)(v44 + v54), v59);\n        dest[v59] = 0;\n        fprintf(s, \"#=GC %-*.*s %s\\n\", v26, (unsigned int)v26, \"SA_cons\", dest);\n      }\n      v55 = *(_QWORD *)(v3 + 88);\n      if ( v55 )\n      {\n        strncpy(dest, (const char *)(v44 + v55), v59);\n        dest[v59] = 0;\n        fprintf(s, \"#=GC %-*.*s %s\\n\", v26, (unsigned int)v26, \"RF\", dest);\n      }\n      if ( *(_DWORD *)(v3 + 272) > 0 )\n      {\n        v56 = 0LL;\n        do\n        {\n          strncpy(dest, (const char *)(v44 + *(_QWORD *)(*(_QWORD *)(v3 + 256) + 8 * v56)), v59);\n          dest[v59] = 0;\n          fprintf(\n            s,\n            \"#=GC %-*.*s %s\\n\",\n            (unsigned int)v26,\n            (unsigned int)v26,\n            *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8 * v56++),\n            dest);\n        }\n        while ( v56 < *(signed int *)(v3 + 272) );\n      }\n      v44 += v59;\n    }\n    while ( v44 < *(signed int *)(v3 + 24) );\n  }\n  fwrite(\"//\\n\", 3uLL, 1uLL, s);\n  free(dest);\n}\n", 
            "funcStartAddr": "0x43b9e0L", 
            "funcEndAddr": "0x43c2a6L", 
            "funcName": "sub_43B9E0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_43C2C0(char *s, __int64 a2)\n{\n  size_t v2; // rax\n  char *v3; // r15\n  char v4; // al\n  char *v5; // r13\n  char *v6; // r12\n  int v7; // edi\n  signed int v8; // eax\n  signed int v9; // ecx\n  int v10; // ecx\n  __int64 v11; // rbx\n\n  if ( s )\n  {\n    v2 = strlen(s);\n    v3 = (char *)calloc(v2 + 1, 1uLL);\n    if ( !v3 )\n      sub_4325B0(\"calloc failed\", 1LL);\n    v4 = *s;\n    if ( *s )\n    {\n      v5 = s + 3;\n      v6 = v3;\n      do\n      {\n        if ( !*(v5 - 2) || !*(v5 - 1) )\n          break;\n        v7 = v4;\n        v8 = 64;\n        v9 = 4;\n        switch ( v7 )\n        {\n          case 65:\n          case 97:\n            v9 = 0;\n            goto LABEL_12;\n          case 67:\n          case 99:\n            goto LABEL_12;\n          case 71:\n          case 103:\n            v9 = 8;\n            goto LABEL_12;\n          case 84:\n          case 85:\n          case 116:\n          case 117:\n            v9 = 12;\nLABEL_12:\n            switch ( *(v5 - 2) )\n            {\n              case 65:\n              case 97:\n                goto LABEL_16;\n              case 67:\n              case 99:\n                v9 |= 1u;\n                goto LABEL_16;\n              case 71:\n              case 103:\n                v9 |= 2u;\n                goto LABEL_16;\n              case 84:\n              case 85:\n              case 116:\n              case 117:\n                v9 |= 3u;\nLABEL_16:\n                v10 = 4 * v9;\n                switch ( *(v5 - 1) )\n                {\n                  case 65:\n                  case 97:\n                    goto LABEL_20;\n                  case 67:\n                  case 99:\n                    v10 |= 1u;\n                    goto LABEL_20;\n                  case 71:\n                  case 103:\n                    v10 |= 2u;\n                    goto LABEL_20;\n                  case 84:\n                  case 85:\n                  case 116:\n                  case 117:\n                    v10 |= 3u;\nLABEL_20:\n                    v8 = v10;\n                    break;\n                  default:\n                    goto LABEL_21;\n                }\n                break;\n              default:\n                goto LABEL_21;\n            }\n            break;\n          default:\n            break;\n        }\nLABEL_21:\n        v11 = v8;\n        strcpy(v6, *(const char **)(a2 + 8LL * v8));\n        v6 += strlen(*(const char **)(a2 + 8 * v11));\n        v4 = *v5;\n        v5 += 3;\n      }\n      while ( v4 );\n    }\n  }\n  else\n  {\n    dword_464008 = 2;\n    v3 = 0LL;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x43c2c0L", 
            "funcEndAddr": "0x43c3faL", 
            "funcName": "sub_43C2C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_43C400(char *a1)\n{\n  char *v1; // rbx\n  const unsigned __int16 *v2; // r14\n  __int64 v3; // rax\n  char v4; // cl\n  signed __int64 result; // rax\n  char *v6; // rbx\n  char v7; // cl\n  char *v8; // rbx\n\n  v1 = a1;\n  if ( !a1 )\n  {\n    dword_464008 = 6;\n    return 0LL;\n  }\n  v2 = *__ctype_b_loc();\n  do\n    v3 = *v1++;\n  while ( v2[v3] & 0x2000 );\n  if ( (_BYTE)v3 != 43 && (_BYTE)v3 != 45 )\n    --v1;\n  if ( !strncmp(v1, \"0x\", 2uLL) && (signed int)strlen(v1) > 2 || !strncmp(v1, \"0X\", 2uLL) && (signed int)strlen(v1) > 2 )\n  {\n    v4 = v1[2];\n    result = 1LL;\n    if ( !v4 )\n      return result;\n    v6 = v1 + 3;\n    while ( v2[v4] & 0x1000 )\n    {\n      v4 = *v6++;\n      if ( !v4 )\n        return result;\n    }\n    return 0LL;\n  }\n  v7 = *v1;\n  if ( *v1 == 48 )\n  {\n    if ( (signed int)strlen(v1) > 1 )\n      ++v1;\n    v7 = *v1;\n  }\n  result = 1LL;\n  if ( v7 )\n  {\n    v8 = v1 + 1;\n    while ( v2[v7] & 0x800 )\n    {\n      v7 = *v8++;\n      if ( !v7 )\n        return result;\n    }\n    return 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43c400L", 
            "funcEndAddr": "0x43c51dL", 
            "funcName": "sub_43C400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C520(_BYTE *a1)\n{\n  _BYTE *v1; // rbx\n  const unsigned __int16 *v2; // rcx\n  __int64 v3; // rax\n  int v4; // esi\n  signed int v5; // edi\n  signed int v6; // er8\n  int v7; // edx\n  __int64 result; // rax\n  bool v9; // zf\n  char *v10; // rbx\n\n  v1 = a1;\n  if ( !a1 )\n    return 0LL;\n  v2 = *__ctype_b_loc();\n  do\n    v3 = (char)*v1++;\n  while ( v2[v3] & 0x2000 );\n  if ( (_BYTE)v3 != 43 && (_BYTE)v3 != 45 )\n  {\n    --v1;\n    if ( (_BYTE)v3 )\n    {\nLABEL_7:\n      v4 = 0;\n      v5 = 0;\n      v6 = 0;\n      do\n      {\n        v7 = v2[(char)v3];\n        if ( v7 & 0x800 )\n        {\n          ++v4;\n        }\n        else if ( (_BYTE)v3 == 101 || (_BYTE)v3 == 69 )\n        {\n          v9 = v5 == 0;\n          v5 = 1;\n          if ( !v9 )\n            return 0LL;\n        }\n        else if ( (_BYTE)v3 == 46 )\n        {\n          result = 0LL;\n          v9 = (v6 | v5) == 0;\n          v6 = 1;\n          v5 = 0;\n          if ( !v9 )\n            return result;\n        }\n        else if ( _bittest(&v7, 0xDu) )\n        {\n          goto LABEL_23;\n        }\n        LOBYTE(v3) = (v1++)[1];\n      }\n      while ( (_BYTE)v3 );\n      LOBYTE(v3) = 0;\n      goto LABEL_23;\n    }\n  }\n  else\n  {\n    LOBYTE(v3) = *v1;\n    if ( *v1 )\n      goto LABEL_7;\n  }\n  LOBYTE(v3) = 0;\n  v4 = 0;\nLABEL_23:\n  if ( v2[(char)v3] & 0x2000 )\n  {\n    v10 = v1 + 1;\n    do\n      v3 = *v10++;\n    while ( v2[v3] & 0x2000 );\n  }\n  return ((_BYTE)v3 == 0) & (unsigned __int8)(v4 != 0);\n}\n", 
            "funcStartAddr": "0x43c520L", 
            "funcEndAddr": "0x43c634L", 
            "funcName": "sub_43C520"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C6E0(unsigned int a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c6e0L", 
            "funcEndAddr": "0x43c6e3L", 
            "funcName": "sub_43C6E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C6F0(unsigned int a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c6f0L", 
            "funcEndAddr": "0x43c6f3L", 
            "funcName": "sub_43C6F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C700(unsigned int a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c700L", 
            "funcEndAddr": "0x43c703L", 
            "funcName": "sub_43C700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C710(unsigned int a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c710L", 
            "funcEndAddr": "0x43c713L", 
            "funcName": "sub_43C710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C720(__int64 a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c720L", 
            "funcEndAddr": "0x43c724L", 
            "funcName": "sub_43C720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43C730(__int64 a1)\n{\n  return a1;\n}\n", 
            "funcStartAddr": "0x43c730L", 
            "funcEndAddr": "0x43c734L", 
            "funcName": "sub_43C730"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43C860(__int64 a1, unsigned int a2, __m128 a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // r8\n  __m128 v5; // xmm1\n  unsigned __int64 v6; // rsi\n  __int64 v7; // rdx\n  __int64 v8; // rsi\n  signed __int64 v9; // rcx\n  __m128 *v10; // rcx\n  __int64 v11; // rdx\n  _DWORD *v12; // rcx\n  __int64 v13; // rax\n\n  if ( (signed int)a2 > 0 )\n  {\n    v3 = a2;\n    if ( a2 < 8 )\n    {\n      v4 = 0LL;\nLABEL_13:\n      v12 = (_DWORD *)(a1 + 4 * v4);\n      v13 = v3 - v4;\n      do\n      {\n        *v12 = a3.m128_i32[0];\n        ++v12;\n        --v13;\n      }\n      while ( v13 );\n      return;\n    }\n    v4 = a2 & 0xFFFFFFF8;\n    v5 = _mm_shuffle_ps(a3, a3, 0);\n    v6 = (unsigned __int64)(v4 - 8) >> 3;\n    v7 = ((_BYTE)v6 + 1) & 7;\n    if ( (unsigned __int64)(v4 - 8) >= 0x38 )\n    {\n      v9 = v7 - 1 - v6;\n      v8 = 0LL;\n      do\n      {\n        *(__m128 *)(a1 + 4 * v8) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 16) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 32) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 48) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 64) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 80) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 96) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 112) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 128) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 144) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 160) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 176) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 192) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 208) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 224) = v5;\n        *(__m128 *)(a1 + 4 * v8 + 240) = v5;\n        v8 += 64LL;\n        v9 += 8LL;\n      }\n      while ( v9 );\n      if ( !v7 )\n      {\nLABEL_12:\n        if ( v4 == v3 )\n          return;\n        goto LABEL_13;\n      }\n    }\n    else\n    {\n      v8 = 0LL;\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    v10 = (__m128 *)(a1 + 4 * v8 + 16);\n    v11 = -v7;\n    do\n    {\n      v10[-1] = v5;\n      *v10 = v5;\n      v10 += 2;\n      ++v11;\n    }\n    while ( v11 );\n    goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x43c860L", 
            "funcEndAddr": "0x43c97fL", 
            "funcName": "sub_43C860"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43CA70(__int64 a1, unsigned int a2, __m128 a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // rcx\n  __m128 v5; // xmm1\n  unsigned __int64 v6; // rsi\n  __int64 v7; // r8\n  signed __int64 v8; // rdx\n  __int64 v9; // rsi\n  __m128 v10; // xmm4\n  __m128 v11; // xmm5\n  __m128 v12; // xmm3\n  __m128 v13; // xmm3\n  float *v14; // rdx\n  __int64 v15; // rax\n\n  if ( (signed int)a2 > 0 )\n  {\n    v3 = a2;\n    if ( a2 < 8 )\n    {\n      v4 = 0LL;\nLABEL_10:\n      v14 = (float *)(a1 + 4 * v4);\n      v15 = v3 - v4;\n      do\n      {\n        *v14 = *v14 * a3.m128_f32[0];\n        ++v14;\n        --v15;\n      }\n      while ( v15 );\n      return;\n    }\n    v4 = a2 & 0xFFFFFFF8;\n    v5 = _mm_shuffle_ps(a3, a3, 0);\n    v6 = (unsigned __int64)(v4 - 8) >> 3;\n    v7 = ((_BYTE)v6 + 1) & 1;\n    if ( v4 == 8 )\n    {\n      v9 = 0LL;\n      if ( v7 )\n      {\nLABEL_8:\n        v13 = _mm_mul_ps(*(__m128 *)(a1 + 4 * v9 + 16), v5);\n        *(__m128 *)(a1 + 4 * v9) = _mm_mul_ps(*(__m128 *)(a1 + 4 * v9), v5);\n        *(__m128 *)(a1 + 4 * v9 + 16) = v13;\n        goto LABEL_9;\n      }\n    }\n    else\n    {\n      v8 = v7 - 1 - v6;\n      v9 = 0LL;\n      do\n      {\n        v10 = *(__m128 *)(a1 + 4 * v9 + 32);\n        v11 = *(__m128 *)(a1 + 4 * v9 + 48);\n        v12 = _mm_mul_ps(*(__m128 *)(a1 + 4 * v9 + 16), v5);\n        *(__m128 *)(a1 + 4 * v9) = _mm_mul_ps(*(__m128 *)(a1 + 4 * v9), v5);\n        *(__m128 *)(a1 + 4 * v9 + 16) = v12;\n        *(__m128 *)(a1 + 4 * v9 + 32) = _mm_mul_ps(v10, v5);\n        *(__m128 *)(a1 + 4 * v9 + 48) = _mm_mul_ps(v11, v5);\n        v9 += 16LL;\n        v8 += 2LL;\n      }\n      while ( v8 );\n      if ( v7 )\n        goto LABEL_8;\n    }\nLABEL_9:\n    if ( v4 == v3 )\n      return;\n    goto LABEL_10;\n  }\n}\n", 
            "funcStartAddr": "0x43ca70L", 
            "funcEndAddr": "0x43cb50L", 
            "funcName": "sub_43CA70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43CBE0(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // rax\n  float v3; // xmm0_4\n  __int64 v4; // rcx\n  float *v5; // rcx\n  __int64 v6; // rax\n\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2 & 7;\n    if ( (unsigned __int64)a2 - 1 < 7 )\n    {\n      v3 = 0.0;\n      v4 = 0LL;\n      if ( !(a2 & 7) )\n        return;\n      goto LABEL_9;\n    }\n    v3 = 0.0;\n    v4 = 0LL;\n    do\n    {\n      v3 = (float)((float)((float)((float)((float)((float)((float)(v3 + *(float *)(a1 + 4 * v4))\n                                                         + *(float *)(a1 + 4 * v4 + 4))\n                                                 + *(float *)(a1 + 4 * v4 + 8))\n                                         + *(float *)(a1 + 4 * v4 + 12))\n                                 + *(float *)(a1 + 4 * v4 + 16))\n                         + *(float *)(a1 + 4 * v4 + 20))\n                 + *(float *)(a1 + 4 * v4 + 24))\n         + *(float *)(a1 + 4 * v4 + 28);\n      v4 += 8LL;\n    }\n    while ( a2 - v2 != v4 );\n    if ( a2 & 7 )\n    {\nLABEL_9:\n      v5 = (float *)(a1 + 4 * v4);\n      v6 = -v2;\n      do\n      {\n        v3 = v3 + *v5;\n        ++v5;\n        ++v6;\n      }\n      while ( v6 );\n      return;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43cbe0L", 
            "funcEndAddr": "0x43cc6fL", 
            "funcName": "sub_43CBE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43CE20(unsigned __int64 a1, unsigned __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r9\n  __int64 v4; // rcx\n  unsigned __int64 v5; // rax\n  __int64 v6; // rdx\n  __int64 v7; // r9\n  signed __int64 v8; // rax\n  signed __int64 v9; // rcx\n  __int64 v10; // rdx\n  unsigned __int64 v11; // rdx\n  __int64 v12; // r8\n  signed __int64 v13; // rax\n  __int64 v14; // rdx\n  __m128 v15; // xmm0\n  __m128 v16; // xmm1\n  __m128 v17; // xmm3\n  __m128 v18; // xmm0\n  __m128 v19; // xmm1\n  __m128 v20; // xmm0\n\n  if ( (signed int)a3 <= 0 )\n    return;\n  v3 = a3;\n  if ( a3 >= 8 && (a2 + 4LL * a3 <= a1 || a1 + 4LL * a3 <= a2) )\n  {\n    v4 = a3 & 0xFFFFFFF8;\n    v11 = (unsigned __int64)(v4 - 8) >> 3;\n    v12 = ((_BYTE)v11 + 1) & 1;\n    if ( v4 == 8 )\n    {\n      v14 = 0LL;\n      if ( v12 )\n      {\nLABEL_17:\n        v20 = _mm_add_ps(*(__m128 *)(a1 + 4 * v14 + 16), *(__m128 *)(a2 + 4 * v14 + 16));\n        *(__m128 *)(a1 + 4 * v14) = _mm_add_ps(*(__m128 *)(a1 + 4 * v14), *(__m128 *)(a2 + 4 * v14));\n        *(__m128 *)(a1 + 4 * v14 + 16) = v20;\n        goto LABEL_18;\n      }\n    }\n    else\n    {\n      v13 = v12 - 1 - v11;\n      v14 = 0LL;\n      do\n      {\n        v15 = _mm_add_ps(*(__m128 *)(a1 + 4 * v14 + 16), *(__m128 *)(a2 + 4 * v14 + 16));\n        v16 = *(__m128 *)(a1 + 4 * v14 + 32);\n        v17 = *(__m128 *)(a1 + 4 * v14 + 48);\n        *(__m128 *)(a1 + 4 * v14) = _mm_add_ps(*(__m128 *)(a1 + 4 * v14), *(__m128 *)(a2 + 4 * v14));\n        *(__m128 *)(a1 + 4 * v14 + 16) = v15;\n        v18 = _mm_add_ps(*(__m128 *)(a2 + 4 * v14 + 32), v16);\n        v19 = _mm_add_ps(*(__m128 *)(a2 + 4 * v14 + 48), v17);\n        *(__m128 *)(a1 + 4 * v14 + 32) = v18;\n        *(__m128 *)(a1 + 4 * v14 + 48) = v19;\n        v14 += 16LL;\n        v13 += 2LL;\n      }\n      while ( v13 );\n      if ( v12 )\n        goto LABEL_17;\n    }\nLABEL_18:\n    if ( v4 == v3 )\n      return;\n    goto LABEL_6;\n  }\n  v4 = 0LL;\nLABEL_6:\n  v5 = v3 - v4 - 1;\n  if ( v3 & 3 )\n  {\n    v6 = -(v3 & 3);\n    do\n    {\n      *(float *)(a1 + 4 * v4) = *(float *)(a2 + 4 * v4) + *(float *)(a1 + 4 * v4);\n      ++v4;\n      ++v6;\n    }\n    while ( v6 );\n  }\n  if ( v5 >= 3 )\n  {\n    v7 = v3 - v4;\n    v8 = a1 + 4 * v4 + 12;\n    v9 = a2 + 4 * v4 + 12;\n    v10 = 0LL;\n    do\n    {\n      *(float *)(v8 + 4 * v10 - 12) = *(float *)(v9 + 4 * v10 - 12) + *(float *)(v8 + 4 * v10 - 12);\n      *(float *)(v8 + 4 * v10 - 8) = *(float *)(v9 + 4 * v10 - 8) + *(float *)(v8 + 4 * v10 - 8);\n      *(float *)(v8 + 4 * v10 - 4) = *(float *)(v9 + 4 * v10 - 4) + *(float *)(v8 + 4 * v10 - 4);\n      *(float *)(v8 + 4 * v10) = *(float *)(v9 + 4 * v10) + *(float *)(v8 + 4 * v10);\n      v10 += 4LL;\n    }\n    while ( v7 != v10 );\n  }\n}\n", 
            "funcStartAddr": "0x43ce20L", 
            "funcEndAddr": "0x43cfb8L", 
            "funcName": "sub_43CE20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43D180(unsigned __int64 a1, unsigned __int64 a2, unsigned int a3)\n{\n  __int64 v3; // r8\n  __int64 v4; // rcx\n  unsigned __int64 v5; // r9\n  __int64 v6; // rdx\n  __int64 v7; // r8\n  signed __int64 v8; // rax\n  signed __int64 v9; // rcx\n  __int64 v10; // rdx\n  unsigned __int64 v11; // rax\n  __int64 v12; // r9\n  __int64 v13; // rax\n  signed __int64 v14; // rdx\n  __int128 v15; // xmm1\n  __int128 v16; // xmm1\n  __int128 v17; // xmm1\n  __int128 v18; // xmm1\n  signed __int64 v19; // rax\n  __int64 v20; // r9\n  __int128 v21; // xmm1\n\n  if ( (signed int)a3 <= 0 )\n    return;\n  v3 = a3;\n  if ( a3 >= 8 && (a2 + 4LL * a3 <= a1 || a1 + 4LL * a3 <= a2) )\n  {\n    v4 = a3 & 0xFFFFFFF8;\n    v11 = (unsigned __int64)(v4 - 8) >> 3;\n    v12 = ((_BYTE)v11 + 1) & 3;\n    if ( (unsigned __int64)(v4 - 8) >= 0x18 )\n    {\n      v14 = v12 - 1 - v11;\n      v13 = 0LL;\n      do\n      {\n        v15 = *(_OWORD *)(a2 + 4 * v13 + 16);\n        *(_OWORD *)(a1 + 4 * v13) = *(_OWORD *)(a2 + 4 * v13);\n        *(_OWORD *)(a1 + 4 * v13 + 16) = v15;\n        v16 = *(_OWORD *)(a2 + 4 * v13 + 48);\n        *(_OWORD *)(a1 + 4 * v13 + 32) = *(_OWORD *)(a2 + 4 * v13 + 32);\n        *(_OWORD *)(a1 + 4 * v13 + 48) = v16;\n        v17 = *(_OWORD *)(a2 + 4 * v13 + 80);\n        *(_OWORD *)(a1 + 4 * v13 + 64) = *(_OWORD *)(a2 + 4 * v13 + 64);\n        *(_OWORD *)(a1 + 4 * v13 + 80) = v17;\n        v18 = *(_OWORD *)(a2 + 4 * v13 + 112);\n        *(_OWORD *)(a1 + 4 * v13 + 96) = *(_OWORD *)(a2 + 4 * v13 + 96);\n        *(_OWORD *)(a1 + 4 * v13 + 112) = v18;\n        v13 += 32LL;\n        v14 += 4LL;\n      }\n      while ( v14 );\n      if ( !v12 )\n      {\nLABEL_21:\n        if ( v4 == v3 )\n          return;\n        goto LABEL_6;\n      }\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !v12 )\n        goto LABEL_21;\n    }\n    v19 = 4 * v13 + 16;\n    v20 = -v12;\n    do\n    {\n      v21 = *(_OWORD *)(a2 + v19);\n      *(_OWORD *)(a1 + v19 - 16) = *(_OWORD *)(a2 + v19 - 16);\n      *(_OWORD *)(a1 + v19) = v21;\n      v19 += 32LL;\n      ++v20;\n    }\n    while ( v20 );\n    goto LABEL_21;\n  }\n  v4 = 0LL;\nLABEL_6:\n  v5 = v3 - v4 - 1;\n  if ( v3 & 7 )\n  {\n    v6 = -(v3 & 7);\n    do\n    {\n      *(_DWORD *)(a1 + 4 * v4) = *(_DWORD *)(a2 + 4 * v4);\n      ++v4;\n      ++v6;\n    }\n    while ( v6 );\n  }\n  if ( v5 >= 7 )\n  {\n    v7 = v3 - v4;\n    v8 = a1 + 4 * v4 + 28;\n    v9 = a2 + 4 * v4 + 28;\n    v10 = 0LL;\n    do\n    {\n      *(_DWORD *)(v8 + 4 * v10 - 28) = *(_DWORD *)(v9 + 4 * v10 - 28);\n      *(_DWORD *)(v8 + 4 * v10 - 24) = *(_DWORD *)(v9 + 4 * v10 - 24);\n      *(_DWORD *)(v8 + 4 * v10 - 20) = *(_DWORD *)(v9 + 4 * v10 - 20);\n      *(_DWORD *)(v8 + 4 * v10 - 16) = *(_DWORD *)(v9 + 4 * v10 - 16);\n      *(_DWORD *)(v8 + 4 * v10 - 12) = *(_DWORD *)(v9 + 4 * v10 - 12);\n      *(_DWORD *)(v8 + 4 * v10 - 8) = *(_DWORD *)(v9 + 4 * v10 - 8);\n      *(_DWORD *)(v8 + 4 * v10 - 4) = *(_DWORD *)(v9 + 4 * v10 - 4);\n      *(_DWORD *)(v8 + 4 * v10) = *(_DWORD *)(v9 + 4 * v10);\n      v10 += 8LL;\n    }\n    while ( v7 != v10 );\n  }\n}\n", 
            "funcStartAddr": "0x43d180L", 
            "funcEndAddr": "0x43d316L", 
            "funcName": "sub_43D180"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43D3E0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rcx\n  __int64 v6; // rdx\n  signed __int64 v7; // rdx\n  signed __int64 v8; // rcx\n  __int64 v9; // rsi\n\n  if ( (signed int)a3 > 0 )\n  {\n    a3 = (unsigned int)a3;\n    v3 = a3 & 3;\n    if ( (unsigned __int64)(unsigned int)a3 - 1 < 3 )\n    {\n      v4 = 0.0;\n      v5 = 0LL;\n      if ( !(a3 & 3) )\n        return;\n      goto LABEL_9;\n    }\n    v6 = a3 - v3;\n    v4 = 0.0;\n    v5 = 0LL;\n    do\n    {\n      v4 = (float)(*(float *)(a1 + 4 * v5 + 12) * *(float *)(a2 + 4 * v5 + 12))\n         + (float)((float)(*(float *)(a1 + 4 * v5 + 8) * *(float *)(a2 + 4 * v5 + 8))\n                 + (float)((float)(*(float *)(a1 + 4 * v5 + 4) * *(float *)(a2 + 4 * v5 + 4))\n                         + (float)((float)(*(float *)(a1 + 4 * v5) * *(float *)(a2 + 4 * v5)) + v4)));\n      v5 += 4LL;\n    }\n    while ( v6 != v5 );\n    if ( v3 )\n    {\nLABEL_9:\n      v7 = a2 + 4 * v5;\n      v8 = a1 + 4 * v5;\n      v9 = 0LL;\n      do\n      {\n        v4 = v4 + (float)(*(float *)(v8 + 4 * v9) * *(float *)(v7 + 4 * v9));\n        ++v9;\n      }\n      while ( v3 != v9 );\n      return;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43d3e0L", 
            "funcEndAddr": "0x43d488L", 
            "funcName": "sub_43D3E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43D790(__int64 a1, unsigned int a2)\n{\n  __int64 result; // rax\n  __int64 v3; // r8\n  unsigned __int64 v4; // rax\n  __int64 v5; // rsi\n  unsigned int v6; // edx\n  signed __int64 v7; // rcx\n  __int64 v8; // r8\n  unsigned int v9; // eax\n  __int64 v10; // rsi\n\n  result = 0LL;\n  if ( (signed int)a2 >= 2 )\n  {\n    v3 = a2;\n    v4 = a2 - 2LL;\n    v5 = ((_BYTE)a2 + 3) & 3;\n    if ( v4 >= 3 )\n    {\n      v8 = v3 - v5;\n      v9 = 0;\n      v7 = 1LL;\n      do\n      {\n        v6 = v7;\n        if ( *(float *)(a1 + 4 * v7) <= *(float *)(a1 + 4LL * (signed int)v9) )\n          v6 = v9;\n        if ( *(float *)(a1 + 4 * v7 + 4) > *(float *)(a1 + 4LL * (signed int)v6) )\n          v6 = v7 + 1;\n        if ( *(float *)(a1 + 4 * v7 + 8) > *(float *)(a1 + 4LL * (signed int)v6) )\n          v6 = v7 + 2;\n        if ( *(float *)(a1 + 4 * v7 + 12) > *(float *)(a1 + 4LL * (signed int)v6) )\n          v6 = v7 + 3;\n        v7 += 4LL;\n        v9 = v6;\n      }\n      while ( v8 != v7 );\n    }\n    else\n    {\n      v6 = 0;\n      v7 = 1LL;\n    }\n    result = v6;\n    if ( (_DWORD)v5 )\n    {\n      v10 = -v5;\n      do\n      {\n        result = (unsigned int)v7;\n        if ( *(float *)(a1 + 4 * v7) <= *(float *)(a1 + 4LL * (signed int)v6) )\n          result = v6;\n        ++v7;\n        v6 = result;\n        ++v10;\n      }\n      while ( v10 );\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43d790L", 
            "funcEndAddr": "0x43d84fL", 
            "funcName": "sub_43D790"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43DC80(__int64 a1, unsigned int a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rcx\n  __m128 v4; // xmm0\n  __int64 v5; // rdx\n  float *v6; // rdx\n  __int64 v7; // rcx\n  __int64 v8; // rcx\n  __m128 v9; // xmm0\n  __int64 v10; // r8\n  __m128 v11; // xmm1\n  unsigned __int64 v12; // rsi\n  __int64 v13; // r8\n  signed __int64 v14; // rdx\n  __int64 v15; // rsi\n  __m128 v16; // xmm3\n  float *v17; // rdx\n  __int64 v18; // rax\n  __m128 v19; // xmm1\n  unsigned __int64 v20; // rsi\n  __int64 v21; // rdx\n  __int64 v22; // rsi\n  signed __int64 v23; // rcx\n  __m128 *v24; // rcx\n  __int64 v25; // rdx\n  _DWORD *v26; // rcx\n  __int64 v27; // rax\n\n  if ( (signed int)a2 > 0 )\n  {\n    v2 = a2;\n    v3 = a2 & 7;\n    if ( (unsigned __int64)a2 - 1 >= 7 )\n    {\n      v4 = 0LL;\n      v5 = 0LL;\n      do\n      {\n        v4.m128_f32[0] = (float)((float)((float)((float)((float)((float)((float)(v4.m128_f32[0] + *(float *)(a1 + 4 * v5))\n                                                                       + *(float *)(a1 + 4 * v5 + 4))\n                                                               + *(float *)(a1 + 4 * v5 + 8))\n                                                       + *(float *)(a1 + 4 * v5 + 12))\n                                               + *(float *)(a1 + 4 * v5 + 16))\n                                       + *(float *)(a1 + 4 * v5 + 20))\n                               + *(float *)(a1 + 4 * v5 + 24))\n                       + *(float *)(a1 + 4 * v5 + 28);\n        v5 += 8LL;\n      }\n      while ( a2 - v3 != v5 );\n      if ( !(a2 & 7) )\n      {\nLABEL_10:\n        if ( v4.m128_f32[0] != 0.0 )\n        {\n          if ( a2 < 4 )\n          {\n            v8 = 0LL;\nLABEL_22:\n            v17 = (float *)(a1 + 4 * v8);\n            v18 = v2 - v8;\n            do\n            {\n              *v17 = *v17 / v4.m128_f32[0];\n              ++v17;\n              --v18;\n            }\n            while ( v18 );\n            return;\n          }\n          v8 = a2 & 0xFFFFFFFC;\n          v11 = _mm_shuffle_ps(v4, v4, 0);\n          v12 = (unsigned __int64)(v8 - 4) >> 2;\n          v13 = ((_BYTE)v12 + 1) & 1;\n          if ( v8 == 4 )\n          {\n            v15 = 0LL;\n            if ( v13 )\n            {\nLABEL_20:\n              *(__m128 *)(a1 + 4 * v15) = _mm_div_ps(*(__m128 *)(a1 + 4 * v15), v11);\n              goto LABEL_21;\n            }\n          }\n          else\n          {\n            v14 = v13 - 1 - v12;\n            v15 = 0LL;\n            do\n            {\n              v16 = *(__m128 *)(a1 + 4 * v15 + 16);\n              *(__m128 *)(a1 + 4 * v15) = _mm_div_ps(*(__m128 *)(a1 + 4 * v15), v11);\n              *(__m128 *)(a1 + 4 * v15 + 16) = _mm_div_ps(v16, v11);\n              v15 += 8LL;\n              v14 += 2LL;\n            }\n            while ( v14 );\n            if ( v13 )\n              goto LABEL_20;\n          }\nLABEL_21:\n          if ( v8 == v2 )\n            return;\n          goto LABEL_22;\n        }\n        if ( (signed int)a2 <= 0 )\n          return;\n        v9 = (__m128)0x3F800000u;\n        v9.m128_f32[0] = 1.0 / (float)(signed int)a2;\n        if ( a2 < 8 )\n        {\n          v10 = 0LL;\nLABEL_36:\n          v26 = (_DWORD *)(a1 + 4 * v10);\n          v27 = v2 - v10;\n          do\n          {\n            *v26 = v9.m128_i32[0];\n            ++v26;\n            --v27;\n          }\n          while ( v27 );\n          return;\n        }\n        v10 = a2 & 0xFFFFFFF8;\n        v19 = _mm_shuffle_ps(v9, v9, 0);\n        v20 = (unsigned __int64)(v10 - 8) >> 3;\n        v21 = ((_BYTE)v20 + 1) & 7;\n        if ( (unsigned __int64)(v10 - 8) >= 0x38 )\n        {\n          v23 = v21 - 1 - v20;\n          v22 = 0LL;\n          do\n          {\n            *(__m128 *)(a1 + 4 * v22) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 16) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 32) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 48) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 64) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 80) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 96) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 112) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 128) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 144) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 160) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 176) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 192) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 208) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 224) = v19;\n            *(__m128 *)(a1 + 4 * v22 + 240) = v19;\n            v22 += 64LL;\n            v23 += 8LL;\n          }\n          while ( v23 );\n          if ( !v21 )\n          {\nLABEL_35:\n            if ( v10 == v2 )\n              return;\n            goto LABEL_36;\n          }\n        }\n        else\n        {\n          v22 = 0LL;\n          if ( !v21 )\n            goto LABEL_35;\n        }\n        v24 = (__m128 *)(a1 + 4 * v22 + 16);\n        v25 = -v21;\n        do\n        {\n          v24[-1] = v19;\n          *v24 = v19;\n          v24 += 2;\n          ++v25;\n        }\n        while ( v25 );\n        goto LABEL_35;\n      }\n    }\n    else\n    {\n      v4 = 0LL;\n      v5 = 0LL;\n      if ( !(a2 & 7) )\n        goto LABEL_10;\n    }\n    v6 = (float *)(a1 + 4 * v5);\n    v7 = -v3;\n    do\n    {\n      v4.m128_f32[0] = v4.m128_f32[0] + *v6;\n      ++v6;\n      ++v7;\n    }\n    while ( v7 );\n    goto LABEL_10;\n  }\n}\n", 
            "funcStartAddr": "0x43dc80L", 
            "funcEndAddr": "0x43df0fL", 
            "funcName": "sub_43DC80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43E300(__int64 a1, unsigned int a2, __int64 a3, _DWORD *a4)\n{\n  unsigned __int64 v4; // r13\n  unsigned int v5; // er14\n  __int64 v6; // rax\n  size_t v7; // r12\n  char *v8; // r15\n  char *v9; // rbx\n  float *v10; // r12\n  __int64 v11; // rax\n  unsigned __int64 v12; // rcx\n  signed __int64 v13; // rdx\n  __int64 v14; // rcx\n  signed __int64 v15; // rdx\n  signed __int64 v16; // rax\n  __int64 v17; // rsi\n  unsigned __int64 v18; // rdx\n  __int64 v19; // rcx\n  __int64 v20; // rdx\n  signed __int64 v21; // rsi\n  signed __int64 v22; // rdx\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  unsigned __int64 v25; // rcx\n  signed __int64 v26; // rdx\n  __int64 v27; // rbp\n  signed __int64 v28; // rcx\n  signed __int64 v29; // rax\n  __int64 v30; // rdx\n  unsigned __int64 v31; // rdx\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  signed __int64 v34; // rsi\n  __int128 v35; // xmm1\n  __int128 v36; // xmm1\n  __int128 v37; // xmm1\n  __int128 v38; // xmm1\n  signed __int64 v39; // rdx\n  __int64 v40; // rcx\n  __int128 v41; // xmm1\n  void *ptr; // [rsp+8h] [rbp-40h]\n  void *v43; // [rsp+10h] [rbp-38h]\n\n  v4 = (unsigned __int64)a4;\n  v5 = a2;\n  if ( a2 == 1 )\n  {\n    *a4 = 1065353216;\n    return;\n  }\n  sub_426F60(a1, a2, (__int64 *)&v43);\n  if ( !(unsigned int)sub_4260D0((__int64)v43, a2, 2, &ptr) )\n    sub_4325B0(\"Cluster() failed\", a2);\n  v6 = (signed int)(2 * a2);\n  v7 = 4 * v6 - 4;\n  v8 = (char *)sub_4382F0(v6, v7, (__int64)\"weight.c\", 0x43u);\n  v9 = (char *)sub_4382F0((__int64)v8, v7, (__int64)\"weight.c\", 0x44u);\n  v10 = (float *)sub_4382F0((__int64)v9, v7, (__int64)\"weight.c\", 0x45u);\n  if ( (signed int)a2 <= 0 )\n  {\n    sub_43E800(ptr, a2, v8, v9, a2);\n    v10[a2] = (float)(signed int)a2;\n    sub_43E8B0(ptr, a2, v8, v9, v10, a2);\n    goto LABEL_48;\n  }\n  if ( a2 >= 8 && (v9 >= &v8[4 * a2] || v8 >= &v9[4 * a2]) )\n  {\n    v11 = a2 & 0xFFFFFFF8;\n    v18 = (unsigned __int64)(v11 - 8) >> 3;\n    v19 = ((_BYTE)v18 + 1) & 3;\n    if ( (unsigned __int64)(v11 - 8) >= 0x18 )\n    {\n      v21 = v19 - 1 - v18;\n      v20 = 0LL;\n      do\n      {\n        *(_OWORD *)&v9[4 * v20] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 16] = 0LL;\n        *(_OWORD *)&v8[4 * v20] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 16] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 32] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 48] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 32] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 48] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 64] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 80] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 64] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 80] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 96] = 0LL;\n        *(_OWORD *)&v9[4 * v20 + 112] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 96] = 0LL;\n        *(_OWORD *)&v8[4 * v20 + 112] = 0LL;\n        v20 += 32LL;\n        v21 += 4LL;\n      }\n      while ( v21 );\n      if ( !v19 )\n      {\nLABEL_26:\n        if ( v11 == v5 )\n          goto LABEL_27;\n        goto LABEL_10;\n      }\n    }\n    else\n    {\n      v20 = 0LL;\n      if ( !v19 )\n        goto LABEL_26;\n    }\n    v22 = 4 * v20 + 16;\n    v23 = -v19;\n    do\n    {\n      *(_OWORD *)&v9[v22 - 16] = 0LL;\n      *(_OWORD *)&v9[v22] = 0LL;\n      *(_OWORD *)&v8[v22 - 16] = 0LL;\n      *(_OWORD *)&v8[v22] = 0LL;\n      v22 += 32LL;\n      ++v23;\n    }\n    while ( v23 );\n    goto LABEL_26;\n  }\n  v11 = 0LL;\nLABEL_10:\n  v12 = v5 - v11 - 1;\n  if ( v5 & 3 )\n  {\n    v13 = -(signed __int64)(v5 & 3);\n    do\n    {\n      *(_DWORD *)&v9[4 * v11] = 0;\n      *(_DWORD *)&v8[4 * v11++] = 0;\n      ++v13;\n    }\n    while ( v13 );\n  }\n  if ( v12 >= 3 )\n  {\n    v14 = v5 - v11;\n    v15 = (signed __int64)&v8[4 * v11 + 12];\n    v16 = (signed __int64)&v9[4 * v11 + 12];\n    v17 = 0LL;\n    do\n    {\n      *(_DWORD *)(v16 + 4 * v17 - 12) = 0;\n      *(_DWORD *)(v15 + 4 * v17 - 12) = 0;\n      *(_DWORD *)(v16 + 4 * v17 - 8) = 0;\n      *(_DWORD *)(v15 + 4 * v17 - 8) = 0;\n      *(_DWORD *)(v16 + 4 * v17 - 4) = 0;\n      *(_DWORD *)(v15 + 4 * v17 - 4) = 0;\n      *(_DWORD *)(v16 + 4 * v17) = 0;\n      *(_DWORD *)(v15 + 4 * v17) = 0;\n      v17 += 4LL;\n    }\n    while ( v14 != v17 );\n  }\nLABEL_27:\n  sub_43E800(ptr, v5, v8, v9, v5);\n  v10[v5] = (float)(signed int)v5;\n  sub_43E8B0(ptr, v5, v8, v9, v10, v5);\n  if ( (signed int)v5 <= 0 )\n    goto LABEL_48;\n  if ( v5 < 8 || (unsigned __int64)&v10[v5] > v4 && (unsigned __int64)v10 < v4 + 4LL * v5 )\n  {\n    v24 = 0LL;\nLABEL_32:\n    v25 = v5 - v24 - 1;\n    if ( v5 & 7 )\n    {\n      v26 = -(signed __int64)(v5 & 7);\n      do\n      {\n        *(float *)(v4 + 4 * v24) = v10[v24];\n        ++v24;\n        ++v26;\n      }\n      while ( v26 );\n    }\n    if ( v25 >= 7 )\n    {\n      v27 = v5 - v24;\n      v28 = v4 + 4 * v24 + 28;\n      v29 = (signed __int64)&v10[v24 + 7];\n      v30 = 0LL;\n      do\n      {\n        *(_DWORD *)(v28 + 4 * v30 - 28) = *(_DWORD *)(v29 + 4 * v30 - 28);\n        *(_DWORD *)(v28 + 4 * v30 - 24) = *(_DWORD *)(v29 + 4 * v30 - 24);\n        *(_DWORD *)(v28 + 4 * v30 - 20) = *(_DWORD *)(v29 + 4 * v30 - 20);\n        *(_DWORD *)(v28 + 4 * v30 - 16) = *(_DWORD *)(v29 + 4 * v30 - 16);\n        *(_DWORD *)(v28 + 4 * v30 - 12) = *(_DWORD *)(v29 + 4 * v30 - 12);\n        *(_DWORD *)(v28 + 4 * v30 - 8) = *(_DWORD *)(v29 + 4 * v30 - 8);\n        *(_DWORD *)(v28 + 4 * v30 - 4) = *(_DWORD *)(v29 + 4 * v30 - 4);\n        *(_DWORD *)(v28 + 4 * v30) = *(_DWORD *)(v29 + 4 * v30);\n        v30 += 8LL;\n      }\n      while ( v27 != v30 );\n    }\n    goto LABEL_48;\n  }\n  v24 = v5 & 0xFFFFFFF8;\n  v31 = (unsigned __int64)(v24 - 8) >> 3;\n  v32 = ((_BYTE)v31 + 1) & 3;\n  if ( (unsigned __int64)(v24 - 8) < 0x18 )\n  {\n    v33 = 0LL;\n    if ( !v32 )\n      goto LABEL_47;\n    goto LABEL_45;\n  }\n  v34 = v32 - 1 - v31;\n  v33 = 0LL;\n  do\n  {\n    v35 = *(_OWORD *)&v10[v33 + 4];\n    *(_OWORD *)(v4 + 4 * v33) = *(_OWORD *)&v10[v33];\n    *(_OWORD *)(v4 + 4 * v33 + 16) = v35;\n    v36 = *(_OWORD *)&v10[v33 + 12];\n    *(_OWORD *)(v4 + 4 * v33 + 32) = *(_OWORD *)&v10[v33 + 8];\n    *(_OWORD *)(v4 + 4 * v33 + 48) = v36;\n    v37 = *(_OWORD *)&v10[v33 + 20];\n    *(_OWORD *)(v4 + 4 * v33 + 64) = *(_OWORD *)&v10[v33 + 16];\n    *(_OWORD *)(v4 + 4 * v33 + 80) = v37;\n    v38 = *(_OWORD *)&v10[v33 + 28];\n    *(_OWORD *)(v4 + 4 * v33 + 96) = *(_OWORD *)&v10[v33 + 24];\n    *(_OWORD *)(v4 + 4 * v33 + 112) = v38;\n    v33 += 32LL;\n    v34 += 4LL;\n  }\n  while ( v34 );\n  if ( v32 )\n  {\nLABEL_45:\n    v39 = 4 * v33 + 16;\n    v40 = -v32;\n    do\n    {\n      v41 = *(_OWORD *)((char *)v10 + v39);\n      *(_OWORD *)(v4 + v39 - 16) = *(_OWORD *)((char *)v10 + v39 - 16);\n      *(_OWORD *)(v4 + v39) = v41;\n      v39 += 32LL;\n      ++v40;\n    }\n    while ( v40 );\n  }\nLABEL_47:\n  if ( v24 != v5 )\n    goto LABEL_32;\nLABEL_48:\n  sub_437640(v43);\n  sub_426F20(ptr, v5);\n  free(v8);\n  free(v9);\n  free(v10);\n}\n", 
            "funcStartAddr": "0x43e300L", 
            "funcEndAddr": "0x43e7f8L", 
            "funcName": "sub_43E300"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43E800(__int64 a1, signed int a2, __int64 a3, __int64 a4, int a5)\n{\n  __int64 v5; // r15\n  __int64 v6; // rax\n  signed __int64 v7; // r14\n  __int64 v8; // r13\n  __int64 v9; // r12\n  __int64 v10; // r12\n  __int64 v11; // rbp\n  __int64 result; // rax\n  int v13; // [rsp+0h] [rbp-34h]\n\n  v5 = a3;\n  v13 = a5;\n  v6 = a5 - a2;\n  v7 = 5 * v6;\n  v8 = *(signed int *)(a1 + 40 * v6 + 4);\n  if ( (signed int)v8 >= a2 )\n  {\n    v9 = a4;\n    sub_43E800(a1, (unsigned int)a2, a3, a4, (unsigned int)v8);\n    a4 = v9;\n  }\n  v10 = *(signed int *)(a1 + 8 * v7 + 8);\n  if ( (signed int)v10 >= a2 )\n  {\n    v11 = a4;\n    sub_43E800(a1, (unsigned int)a2, v5, a4, (unsigned int)v10);\n    a4 = v11;\n  }\n  result = v13;\n  *(float *)(v5 + 4 * result) = (float)(*(float *)(v5 + 4 * v8) + *(float *)(a4 + 4 * v8))\n                              + *(float *)(a1 + 8 * v7 + 16);\n  *(float *)(a4 + 4 * result) = (float)(*(float *)(v5 + 4 * v10) + *(float *)(a4 + 4 * v10))\n                              + *(float *)(a1 + 8 * v7 + 20);\n  return result;\n}\n", 
            "funcStartAddr": "0x43e800L", 
            "funcEndAddr": "0x43e8a8L", 
            "funcName": "sub_43E800"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43E8B0(__int64 a1, signed int a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  int v6; // ebx\n  __int64 v7; // r12\n  __int64 v8; // r14\n  __int64 v9; // r15\n  __int64 v10; // rcx\n  __int64 v11; // r9\n  __int64 result; // rax\n  float v13; // xmm0_4\n  float v14; // xmm1_4\n  float v15; // xmm0_4\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm2_4\n  float v19; // xmm1_4\n\n  v6 = a6;\n  v7 = a5;\n  v8 = a4;\n  v9 = a3;\n  do\n  {\n    v10 = v6;\n    v11 = *(signed int *)(a1 + 40LL * (v6 - a2) + 4);\n    v6 = *(_DWORD *)(a1 + 40LL * (v6 - a2) + 8);\n    result = v6;\n    v13 = *(float *)(v9 + 4 * v10);\n    v14 = *(float *)(v8 + 4 * v10) + v13;\n    if ( v14 <= 0.0 )\n    {\n      v16 = 1.0;\n      if ( (signed int)v11 >= a2 )\n        v16 = (double)*(signed int *)(a1 + 40LL * ((signed int)v11 - a2) + 32);\n      v17 = 1.0;\n      if ( v6 >= a2 )\n        v17 = (double)*(signed int *)(a1 + 40LL * (v6 - a2) + 32);\n      v18 = *(float *)(v7 + 4 * v10) * v16;\n      v19 = v16 + v17;\n      *(float *)(v7 + 4 * v11) = v18 / v19;\n      v15 = (float)(v17 * *(float *)(v7 + 4 * v10)) / v19;\n    }\n    else\n    {\n      *(float *)(v7 + 4 * v11) = (float)(v13 / v14) * *(float *)(v7 + 4 * v10);\n      v15 = (float)(*(float *)(v8 + 4 * v10) / (float)(*(float *)(v9 + 4 * v10) + *(float *)(v8 + 4 * v10)))\n          * *(float *)(v7 + 4 * v10);\n    }\n    *(float *)(v7 + 4LL * v6) = v15;\n    if ( (signed int)v11 >= a2 )\n      result = sub_43E8B0(a1, (unsigned int)a2, v9, v8, v7, v11);\n  }\n  while ( v6 >= a2 );\n  return result;\n}\n", 
            "funcStartAddr": "0x43e8b0L", 
            "funcEndAddr": "0x43e9e5L", 
            "funcName": "sub_43E8B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43E9F0(_QWORD *a1, signed int a2, signed int a3, _DWORD *a4)\n{\n  _DWORD *v4; // r15\n  _QWORD *v5; // r12\n  _QWORD *v6; // rax\n  _QWORD *v7; // r13\n  size_t v8; // r14\n  __int64 v9; // r15\n  _QWORD *v10; // rbx\n  __int64 v11; // rbp\n  void *v12; // rax\n  __int64 v13; // r9\n  signed __int64 v14; // r8\n  __int64 v15; // rdi\n  __int64 v16; // rsi\n  __int64 v17; // r11\n  __int64 v18; // rcx\n  signed int v19; // er10\n  signed int v20; // ebp\n  char v21; // al\n  char v22; // dl\n  unsigned __int8 v23; // bl\n  float v24; // xmm0_4\n  __int64 v25; // rdx\n  __int64 v26; // rdi\n  float v27; // xmm2_4\n  __int64 v28; // rbx\n  __int64 v29; // rdi\n  __int64 v30; // rdi\n  __int64 v31; // rbp\n  __int64 v32; // rax\n  _QWORD *v33; // rax\n  _QWORD *v34; // rbp\n  _DWORD *v35; // rax\n  _DWORD *v36; // r14\n  _QWORD *v37; // r12\n  __int64 v38; // rbx\n  __int64 v39; // rbp\n  signed __int64 v40; // rbx\n  __int64 v41; // r15\n  _QWORD *v42; // r12\n  unsigned int v43; // eax\n  char v44; // al\n  unsigned __int8 v45; // cl\n  int v46; // eax\n  signed __int64 v47; // rcx\n  _BYTE *v48; // r15\n  int v49; // eax\n  signed __int64 v50; // r13\n  __int64 v51; // rbx\n  __int64 v52; // rbp\n  char v53; // al\n  __int64 v54; // rax\n  float v55; // xmm1_4\n  __int64 v56; // r12\n  float v57; // xmm2_4\n  __int64 v58; // rsi\n  signed int v59; // edi\n  signed int v60; // ebp\n  char v61; // al\n  char v62; // bl\n  unsigned __int8 v63; // cl\n  float v64; // xmm3_4\n  float v65; // xmm0_4\n  __int64 v66; // rcx\n  unsigned __int64 v67; // rsi\n  __int64 v68; // rdx\n  signed __int64 v69; // rdi\n  __int64 v70; // rsi\n  __m128 v71; // xmm2\n  float *v72; // rdx\n  __int64 v73; // rax\n  __int64 v74; // [rsp+0h] [rbp-108h]\n  signed int v75; // [rsp+8h] [rbp-100h]\n  __int64 v76; // [rsp+10h] [rbp-F8h]\n  float *ptr; // [rsp+20h] [rbp-E8h]\n  _QWORD *v78; // [rsp+40h] [rbp-C8h]\n  _QWORD *v79; // [rsp+48h] [rbp-C0h]\n  int v80; // [rsp+50h] [rbp-B8h]\n  __int64 v81; // [rsp+58h] [rbp-B0h]\n  __int128 v82; // [rsp+60h] [rbp-A8h]\n  __int128 v83; // [rsp+70h] [rbp-98h]\n  __int128 v84; // [rsp+80h] [rbp-88h]\n  __int128 v85; // [rsp+90h] [rbp-78h]\n  __int128 v86; // [rsp+A0h] [rbp-68h]\n  char v87[28]; // [rsp+B0h] [rbp-58h]\n\n  v4 = a4;\n  v75 = a3;\n  v5 = a1;\n  if ( a2 == 1 )\n  {\n    *a4 = 1065353216;\n    return;\n  }\n  v6 = malloc(8LL * a2);\n  v7 = v6;\n  if ( !v6 )\n    sub_4325B0(\"malloc failed\");\n  v81 = a2;\n  v8 = 4LL * a2;\n  v76 = (__int64)v4;\n  LODWORD(v74) = a2;\n  if ( a2 <= 0 )\n  {\n    ptr = (float *)sub_4382F0((__int64)v6, 4LL * a2, (__int64)\"weight.c\", 0xB8u);\n    goto LABEL_51;\n  }\n  v9 = (unsigned int)a2;\n  v10 = v6;\n  v11 = (unsigned int)a2;\n  do\n  {\n    v12 = malloc(v8);\n    *v10 = v12;\n    if ( !v12 )\n      sub_4325B0(\"malloc failed\", v74);\n    ++v10;\n    --v11;\n  }\n  while ( v11 );\n  v13 = 0LL;\n  v14 = -9223372036854751231LL;\n  do\n  {\n    v15 = v5[v13];\n    v16 = v5[v13];\n    v17 = v13;\n    while ( 2 )\n    {\n      v18 = 0LL;\n      v19 = 0;\n      v20 = 0;\n      while ( 1 )\n      {\n        v21 = *(_BYTE *)(v15 + v18);\n        if ( v21 > 94 )\n        {\n          if ( v21 == 95 || v21 == 126 )\n            goto LABEL_14;\n          goto LABEL_22;\n        }\n        if ( (unsigned __int8)(v21 - 45) < 2u || v21 == 32 )\n          goto LABEL_14;\n        if ( !v21 )\n          break;\nLABEL_22:\n        v22 = *(_BYTE *)(v16 + v18);\n        v23 = *(_BYTE *)(v16 + v18) - 32;\n        if ( v23 <= 0x3Fu && _bittest64(&v14, v23) || v22 == 126 )\n        {\nLABEL_14:\n          ++v18;\n        }\n        else\n        {\n          v19 += v21 != v22;\n          ++v20;\n          ++v18;\n        }\n      }\n      if ( v20 <= 0 )\n        v24 = 0.0;\n      else\n        v24 = (float)v19 / (float)v20;\n      *(float *)(v7[v17] + 4 * v13) = v24;\n      *(float *)(v7[v13] + 4 * v17) = v24;\n      if ( v17 + 1 != v9 )\n      {\n        v16 = v5[v17++ + 1];\n        continue;\n      }\n      break;\n    }\n    ++v13;\n  }\n  while ( v13 != v9 );\n  ptr = (float *)sub_4382F0(v17 + 1, v8, (__int64)\"weight.c\", 0xB8u);\n  a2 = v74;\n  if ( (signed int)v74 > 0 )\n  {\n    v25 = 0LL;\n    while ( (_DWORD)v74 == 1 )\n    {\n      v26 = 0LL;\n      v27 = 1.0;\n      if ( v9 & 1 )\n        goto LABEL_45;\nLABEL_48:\n      ptr[v25++] = v27 * 0.5;\n      if ( v25 == v9 )\n        goto LABEL_51;\n    }\n    v28 = 0LL;\n    v27 = 1.0;\n    do\n    {\n      if ( v25 != v28 )\n      {\n        v29 = v7[v25];\n        if ( v27 > *(float *)(v29 + 4 * v28) )\n          v27 = *(float *)(v29 + 4 * v28);\n      }\n      if ( v28 + 1 != v25 )\n      {\n        v30 = v7[v25];\n        if ( v27 > *(float *)(v30 + 4 * v28 + 4) )\n          v27 = *(float *)(v30 + 4 * v28 + 4);\n      }\n      v28 += 2LL;\n      v26 = v28;\n    }\n    while ( v9 - (v9 & 1) != v28 );\n    if ( !(v9 & 1) )\n      goto LABEL_48;\nLABEL_45:\n    if ( v26 != v25 )\n    {\n      v31 = v7[v25];\n      if ( v27 > *(float *)(v31 + 4 * v26) )\n        v27 = *(float *)(v31 + 4 * v26);\n    }\n    goto LABEL_48;\n  }\nLABEL_51:\n  sub_438390(v7, a2);\n  v33 = sub_4382F0(v32, 8LL * v75, (__int64)\"weight.c\", 0xC6u);\n  v34 = v33;\n  v35 = sub_4382F0((__int64)v33, 4LL * v75, (__int64)\"weight.c\", 0xC7u);\n  v36 = v35;\n  v79 = v5;\n  v37 = v34;\n  v78 = v34;\n  if ( v75 > 0 )\n  {\n    v38 = (unsigned int)v75;\n    do\n    {\n      v35 = sub_4382F0((__int64)v35, 0x1BuLL, (__int64)\"weight.c\", 0xC9u);\n      *v34 = v35;\n      ++v34;\n      --v38;\n    }\n    while ( v38 );\n    if ( v75 > 0 )\n    {\n      v39 = 0LL;\n      v40 = -9223372036854751231LL;\n      do\n      {\n        *(_OWORD *)&v87[12] = 0LL;\n        *(_OWORD *)v87 = 0LL;\n        v86 = 0LL;\n        v85 = 0LL;\n        v84 = 0LL;\n        v83 = 0LL;\n        v82 = 0LL;\n        if ( (signed int)v74 > 0 )\n        {\n          v41 = (unsigned int)v74;\n          v42 = v79;\n          do\n          {\n            v44 = *(_BYTE *)(*v42 + v39);\n            v45 = *(_BYTE *)(*v42 + v39) - 32;\n            if ( v45 <= 0x3Fu && _bittest64(&v40, v45) || v44 == 126 )\n            {\n              *(_DWORD *)&v87[24] = 1;\n            }\n            else\n            {\n              v43 = (((unsigned int)(*__ctype_b_loc())[v44] >> 3) & 0x20) + v44 - 97;\n              if ( v43 <= 0x19 )\n                *((_DWORD *)&v82 + (signed int)v43) = 1;\n            }\n            ++v42;\n            --v41;\n          }\n          while ( v41 );\n        }\n        v36[v39] = 0;\n        v46 = 0;\n        v47 = -26LL;\n        v37 = v78;\n        do\n        {\n          if ( *(_DWORD *)&v87[4 * v47 + 24] )\n          {\n            *(_BYTE *)(v78[v39] + v46) = v47 + 91;\n            v46 = v36[v39] + 1;\n            v36[v39] = v46;\n          }\n          ++v47;\n        }\n        while ( v47 );\n        if ( *(_DWORD *)&v87[24] )\n        {\n          *(_BYTE *)(v78[v39] + v46) = 32;\n          ++v36[v39];\n        }\n        ++v39;\n      }\n      while ( v39 != v75 );\n    }\n  }\n  v48 = sub_4382F0((unsigned int)(v75 + 1), v75 + 1, (__int64)\"weight.c\", 0x10Cu);\n  sub_43C860(v76, v74, (__m128)0LL);\n  if ( (signed int)v74 <= 0 )\n    goto LABEL_121;\n  v49 = 0;\n  HIDWORD(v74) = 42;\n  v50 = -9223372036854751231LL;\n  while ( 2 )\n  {\n    v80 = v49;\n    if ( v75 <= 0 )\n    {\n      v54 = 0LL;\n    }\n    else\n    {\n      v51 = 0LL;\n      do\n      {\n        if ( v36[v51] )\n        {\n          v52 = v37[v51];\n          v53 = *(_BYTE *)(v52 + (signed int)((double)(signed int)v36[v51] * sub_437B60()));\n        }\n        else\n        {\n          v53 = 32;\n        }\n        v48[v51++] = v53;\n      }\n      while ( v75 != v51 );\n      v54 = (unsigned int)v75;\n    }\n    v48[v54] = 0;\n    v55 = sub_437B60();\n    v56 = 0LL;\n    v57 = 1.0;\n    while ( 2 )\n    {\n      v58 = 0LL;\n      v59 = 0;\n      v60 = 0;\n      while ( 1 )\n      {\n        v61 = *(_BYTE *)(v79[v56] + v58);\n        if ( v61 <= 94 )\n          break;\n        if ( v61 == 95 || v61 == 126 )\n          goto LABEL_84;\nLABEL_92:\n        v62 = v48[v58];\n        v63 = v48[v58] - 32;\n        if ( v63 <= 0x3Fu && _bittest64(&v50, v63) || v62 == 126 )\n        {\nLABEL_84:\n          ++v58;\n          continue;\n        }\n        v59 += v61 != v62;\n        ++v60;\n        ++v58;\n      }\n      if ( (unsigned __int8)(v61 - 45) < 2u || v61 == 32 )\n        goto LABEL_84;\n      if ( v61 )\n        goto LABEL_92;\n      if ( v60 <= 0 )\n        v64 = 0.0;\n      else\n        v64 = (float)v59 / (float)v60;\n      if ( ptr[v56] > v64 )\n      {\n        HIDWORD(v74) = v56;\n        break;\n      }\n      if ( v57 > v64 )\n      {\n        v55 = sub_437B60();\n        v57 = v64;\n        goto LABEL_105;\n      }\n      if ( v64 == v57 )\n      {\n        v65 = sub_437B60();\n        if ( v65 > v55 )\n        {\n          v57 = v64;\n          v55 = v65;\nLABEL_105:\n          HIDWORD(v74) = v56;\n        }\n      }\n      if ( ++v56 < v81 )\n        continue;\n      break;\n    }\n    *(float *)(v76 + 4LL * SHIDWORD(v74)) = *(float *)(v76 + 4LL * SHIDWORD(v74)) + 1.0;\n    v49 = v80 + 1;\n    v37 = v78;\n    if ( v80 + 1 < 50 * (signed int)v74 )\n      continue;\n    break;\n  }\n  if ( (signed int)v74 <= 0 )\n    goto LABEL_121;\n  if ( (unsigned int)v74 >= 4 )\n  {\n    v66 = (unsigned int)v74 & 0xFFFFFFFC;\n    v67 = (unsigned __int64)(v66 - 4) >> 2;\n    v68 = ((_BYTE)v67 + 1) & 1;\n    if ( v66 == 4 )\n    {\n      v70 = 0LL;\n      if ( v68 )\n      {\nLABEL_117:\n        *(__m128 *)(v76 + 4 * v70) = _mm_div_ps(*(__m128 *)(v76 + 4 * v70), (__m128)xmmword_4403C0);\n        goto LABEL_118;\n      }\n    }\n    else\n    {\n      v69 = v68 - 1 - v67;\n      v70 = 0LL;\n      do\n      {\n        v71 = *(__m128 *)(v76 + 4 * v70 + 16);\n        *(__m128 *)(v76 + 4 * v70) = _mm_div_ps(*(__m128 *)(v76 + 4 * v70), (__m128)xmmword_4403C0);\n        *(__m128 *)(v76 + 4 * v70 + 16) = _mm_div_ps(v71, (__m128)xmmword_4403C0);\n        v70 += 8LL;\n        v69 += 2LL;\n      }\n      while ( v69 );\n      if ( v68 )\n        goto LABEL_117;\n    }\nLABEL_118:\n    if ( v66 != (unsigned int)v74 )\n      goto LABEL_119;\n    goto LABEL_121;\n  }\n  v66 = 0LL;\nLABEL_119:\n  v72 = (float *)(v76 + 4 * v66);\n  v73 = (unsigned int)v74 - v66;\n  do\n  {\n    *v72 = *v72 / 50.0;\n    ++v72;\n    --v73;\n  }\n  while ( v73 );\nLABEL_121:\n  free(v48);\n  free(v36);\n  free(ptr);\n  sub_438390(v37, v75);\n}\n", 
            "funcStartAddr": "0x43e9f0L", 
            "funcEndAddr": "0x43f20cL", 
            "funcName": "sub_43E9F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43F210(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  unsigned int v5; // er15\n  __int64 v6; // rbp\n  __int64 v7; // rax\n  _DWORD *v8; // rax\n  _DWORD *v9; // rbx\n  signed int *v10; // rdx\n  __int64 v11; // rcx\n  __int64 v12; // rsi\n  __int64 v13; // rbp\n  __int64 v14; // rbp\n  __int64 v15; // rbp\n  signed int *v16; // rdx\n  __int64 v17; // rcx\n  signed int *v18; // r12\n  __int64 v19; // rcx\n  __int64 v20; // rdx\n  __m128i v21; // xmm1\n  __m128i v22; // xmm2\n  __m128i v23; // xmm2\n  __m128i v24; // xmm1\n  void *ptr; // [rsp+0h] [rbp-38h]\n  int v26; // [rsp+Ch] [rbp-2Ch]\n\n  v4 = a4;\n  v5 = a2;\n  sub_43F3F0(a1, a2, a3, &ptr, &v26);\n  sub_43C860(v4, a2, (__m128)0x3F800000u);\n  v6 = v26;\n  v8 = sub_4382F0(v7, 4LL * v26, (__int64)\"weight.c\", 0x193u);\n  v9 = v8;\n  if ( v6 > 0 )\n    memset(v8, 0, 4LL * (unsigned int)v6);\n  if ( (signed int)a2 <= 0 )\n    goto LABEL_15;\n  v10 = (signed int *)ptr;\n  v11 = a2 & 3;\n  if ( (unsigned __int64)(unsigned int)a2 - 1 < 3 )\n  {\n    v12 = 0LL;\n    if ( !(v5 & 3) )\n      goto LABEL_12;\n    goto LABEL_10;\n  }\n  v12 = 0LL;\n  do\n  {\n    ++v9[v10[v12]];\n    v13 = v10[v12 + 1];\n    ++v9[v13];\n    v14 = v10[v12 + 2];\n    ++v9[v14];\n    v15 = v10[v12 + 3];\n    ++v9[v15];\n    v12 += 4LL;\n  }\n  while ( v5 - v11 != v12 );\n  if ( v5 & 3 )\n  {\nLABEL_10:\n    v16 = &v10[v12];\n    v17 = -v11;\n    do\n    {\n      ++v9[*v16];\n      ++v16;\n      ++v17;\n    }\n    while ( v17 );\n  }\nLABEL_12:\n  if ( (signed int)v5 <= 0 )\n  {\nLABEL_15:\n    v18 = (signed int *)ptr;\n    goto LABEL_20;\n  }\n  v18 = (signed int *)ptr;\n  if ( v5 < 4 )\n  {\n    v19 = 0LL;\n    do\n    {\nLABEL_19:\n      *(float *)(v4 + 4 * v19) = 1.0 / (float)(signed int)v9[v18[v19]];\n      ++v19;\n    }\n    while ( v5 != v19 );\n    goto LABEL_20;\n  }\n  v19 = v5 & 0xFFFFFFFC;\n  v20 = 0LL;\n  do\n  {\n    v21 = _mm_loadu_si128((const __m128i *)&v18[v20]);\n    v22 = _mm_shuffle_epi32(v21, 78);\n    v23 = _mm_unpacklo_epi32(v22, _mm_srai_epi32(v22, 0x1Fu));\n    v24 = _mm_unpacklo_epi32(v21, _mm_srai_epi32(v21, 0x1Fu));\n    *(__m128 *)(v4 + 4 * v20) = _mm_div_ps(\n                                  (__m128)xmmword_4403D0,\n                                  _mm_cvtepi32_ps((__m128i)_mm_movelh_ps(\n                                                             _mm_unpacklo_ps(\n                                                               (__m128)(unsigned int)v9[v24.m128i_i64[0]],\n                                                               (__m128)(unsigned int)v9[(unsigned __int64)*(_OWORD *)&_mm_shuffle_epi32(v24, 78)]),\n                                                             _mm_unpacklo_ps(\n                                                               (__m128)(unsigned int)v9[v23.m128i_i64[0]],\n                                                               (__m128)(unsigned int)v9[(unsigned __int64)*(_OWORD *)&_mm_shuffle_epi32(v23, 78)]))));\n    v20 += 4LL;\n  }\n  while ( v19 != v20 );\n  if ( v19 != v5 )\n    goto LABEL_19;\nLABEL_20:\n  free(v9);\n  free(v18);\n}\n", 
            "funcStartAddr": "0x43f210L", 
            "funcEndAddr": "0x43f3efL", 
            "funcName": "sub_43F210"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__usercall sub_43F3F0@<rax>(__int64 a1@<rax>, _QWORD *a2@<rcx>, __int64 a3@<rdi>, unsigned int a4@<esi>, _DWORD *a5@<r8>, __m128i a6@<xmm0>)\n{\n  size_t v6; // rbp\n  __int64 v7; // rax\n  signed int v8; // ebp\n  __int64 v9; // rcx\n  signed int *v10; // rdi\n  unsigned __int64 v11; // rsi\n  __int64 v12; // rdx\n  __m128i v13; // xmm0\n  __int64 v14; // rsi\n  signed __int64 v15; // rbx\n  __m128i v16; // xmm8\n  __m128i v17; // xmm9\n  __m128i v18; // xmm10\n  __m128i v19; // xmm4\n  __m128i v20; // xmm5\n  __m128i v21; // xmm6\n  __m128i v22; // xmm7\n  __m128i v23; // xmm1\n  __m128i *v24; // rsi\n  __int64 v25; // rdx\n  __m128i v26; // xmm1\n  __m128i v27; // xmm2\n  double v28; // xmm0_8\n  __int64 v29; // r9\n  __int64 v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rax\n  __int64 v33; // rax\n  signed int v34; // er15\n  signed __int64 v35; // r8\n  __int64 v36; // rdx\n  signed __int64 v37; // r10\n  __int64 v38; // r11\n  __int64 v39; // rcx\n  __int64 v40; // rsi\n  signed int v41; // ebp\n  signed int v42; // eax\n  signed __int64 v43; // rdi\n  char v44; // r14\n  char v45; // r12\n  unsigned __int8 v46; // r13\n  float v47; // xmm1_4\n  __int64 v48; // rax\n  _DWORD *result; // rax\n  float v50; // [rsp+4h] [rbp-64h]\n  int v51; // [rsp+4h] [rbp-64h]\n  char *ptr; // [rsp+8h] [rbp-60h]\n  signed int *v53; // [rsp+10h] [rbp-58h]\n  _DWORD *v54; // [rsp+18h] [rbp-50h]\n  __int64 v55; // [rsp+20h] [rbp-48h]\n  _QWORD *v56; // [rsp+28h] [rbp-40h]\n  _DWORD *v57; // [rsp+30h] [rbp-38h]\n\n  v57 = a5;\n  v56 = a2;\n  v50 = COERCE_FLOAT(_mm_cvtsi128_si32(a6));\n  v55 = a3;\n  v6 = 4LL * (signed int)a4;\n  ptr = (char *)sub_4382F0(a1, v6, (__int64)\"weight.c\", 0x2CCu);\n  v53 = (signed int *)sub_4382F0((__int64)ptr, v6, (__int64)\"weight.c\", 0x2CDu);\n  v54 = sub_4382F0((__int64)v53, v6, (__int64)\"weight.c\", 0x2CEu);\n  if ( (signed int)a4 <= 0 )\n  {\n    v51 = 0;\n    v10 = (signed int *)ptr;\n    goto LABEL_45;\n  }\n  v7 = a4;\n  v8 = a4;\n  if ( a4 < 8 )\n  {\n    v9 = 0LL;\n    v10 = (signed int *)ptr;\n    goto LABEL_14;\n  }\n  v9 = a4 & 0xFFFFFFF8;\n  v11 = (unsigned __int64)(v9 - 8) >> 3;\n  v12 = ((_BYTE)v11 + 1) & 3;\n  v10 = (signed int *)ptr;\n  if ( (unsigned __int64)(v9 - 8) < 0x18 )\n  {\n    v13 = _mm_load_si128((const __m128i *)&xmmword_440310);\n    v14 = 0LL;\n    if ( !v12 )\n      goto LABEL_13;\n    goto LABEL_11;\n  }\n  v15 = v12 - 1 - v11;\n  v13 = _mm_load_si128((const __m128i *)&xmmword_440310);\n  v14 = 0LL;\n  v16 = _mm_load_si128((const __m128i *)&xmmword_440290);\n  v17 = _mm_load_si128((const __m128i *)&xmmword_440320);\n  v18 = _mm_load_si128((const __m128i *)&xmmword_440330);\n  v19 = _mm_load_si128((const __m128i *)&xmmword_440340);\n  v20 = _mm_load_si128((const __m128i *)&xmmword_440350);\n  v21 = _mm_load_si128((const __m128i *)&xmmword_440360);\n  v22 = _mm_load_si128((const __m128i *)&xmmword_440370);\n  v23 = _mm_load_si128((const __m128i *)&xmmword_440380);\n  do\n  {\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14], v13);\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 16], _mm_add_epi32(v13, v16));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 32], _mm_add_epi32(v13, v17));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 48], _mm_add_epi32(v13, v18));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 64], _mm_add_epi32(v13, v19));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 80], _mm_add_epi32(v13, v20));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 96], _mm_add_epi32(v13, v21));\n    _mm_storeu_si128((__m128i *)&ptr[4 * v14 + 112], _mm_add_epi32(v13, v22));\n    v14 += 32LL;\n    v13 = _mm_add_epi32(v13, v23);\n    v15 += 4LL;\n  }\n  while ( v15 );\n  if ( v12 )\n  {\nLABEL_11:\n    v24 = (__m128i *)&ptr[4 * v14 + 16];\n    v25 = -v12;\n    v26 = _mm_load_si128((const __m128i *)&xmmword_440290);\n    v27 = _mm_load_si128((const __m128i *)&xmmword_440320);\n    do\n    {\n      _mm_storeu_si128(v24 - 1, v13);\n      _mm_storeu_si128(v24, _mm_add_epi32(v13, v26));\n      v13 = _mm_add_epi32(v13, v27);\n      v24 += 2;\n      ++v25;\n    }\n    while ( v25 );\n  }\nLABEL_13:\n  while ( v7 != v9 )\n  {\nLABEL_14:\n    v10[v9] = v9;\n    ++v9;\n  }\n  if ( v8 > 0 )\n  {\n    v28 = 1.0 - v50;\n    v51 = 0;\n    LODWORD(v29) = 0;\n    while ( 1 )\n    {\n      v30 = v8--;\n      v31 = (signed int)v29;\n      v53[v31] = v10[v30 - 1];\n      LODWORD(v29) = v29 + 1;\n      if ( (signed int)v31 < 0 )\n        goto LABEL_42;\n      do\n      {\n        v32 = (signed int)v29;\n        LODWORD(v29) = v29 - 1;\n        v33 = v53[v32 - 1];\n        v54[v33] = v51;\n        if ( v8 <= 0 )\n        {\n          v34 = v8;\n          goto LABEL_41;\n        }\n        v34 = v8;\n        v35 = v8;\n        v36 = *(_QWORD *)(v55 + 8 * v33);\n        do\n        {\n          v37 = v35--;\n          v38 = v10[v37 - 1];\n          v39 = *(_QWORD *)(v55 + 8 * v38);\n          v40 = 0LL;\n          v41 = 0;\n          v42 = 0;\n          v43 = -9223372036854751231LL;\n          while ( 1 )\n          {\n            v44 = *(_BYTE *)(v36 + v40);\n            if ( v44 > 94 )\n            {\n              if ( v44 == 95 || v44 == 126 )\n                goto LABEL_21;\n              goto LABEL_29;\n            }\n            if ( (unsigned __int8)(v44 - 45) < 2u || v44 == 32 )\n              goto LABEL_21;\n            if ( !v44 )\n              break;\nLABEL_29:\n            v45 = *(_BYTE *)(v39 + v40);\n            v46 = *(_BYTE *)(v39 + v40) - 32;\n            if ( v46 <= 0x3Fu && _bittest64(&v43, v46) || v45 == 126 )\n            {\nLABEL_21:\n              ++v40;\n            }\n            else\n            {\n              v41 += v44 != v45;\n              ++v42;\n              ++v40;\n            }\n          }\n          if ( v42 <= 0 )\n            v47 = 0.0;\n          else\n            v47 = (float)v41 / (float)v42;\n          v10 = (signed int *)ptr;\n          if ( v28 >= v47 )\n          {\n            v48 = v34--;\n            *(_DWORD *)&ptr[4 * v37 - 4] = *(_DWORD *)&ptr[4 * v48 - 4];\n            v29 = (signed int)v29;\n            v53[v29] = v38;\n            LODWORD(v29) = v29 + 1;\n          }\n        }\n        while ( v37 > 1 );\nLABEL_41:\n        v8 = v34;\n      }\n      while ( (signed int)v29 > 0 );\nLABEL_42:\n      ++v51;\n      if ( v8 <= 0 )\n        goto LABEL_45;\n    }\n  }\n  v51 = 0;\nLABEL_45:\n  free(v10);\n  free(v53);\n  *v56 = v54;\n  result = v57;\n  *v57 = v51;\n  return result;\n}\n", 
            "funcStartAddr": "0x43f3f0L", 
            "funcEndAddr": "0x43f80cL", 
            "funcName": "sub_43F3F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_43F810(__int64 a1, unsigned int a2, unsigned int a3, __int64 a4)\n{\n  unsigned int v4; // er15\n  __int64 v5; // r14\n  __int64 v6; // r13\n  int v7; // er9\n  int v8; // er15\n  int v9; // ebp\n  int v10; // edi\n  int v11; // ebx\n  int v12; // er11\n  int v13; // er10\n  int v14; // er8\n  int v15; // esi\n  int v16; // edx\n  int v17; // ecx\n  int v18; // eax\n  const unsigned __int16 *v19; // r15\n  __int64 v20; // rbp\n  _QWORD *v21; // rbx\n  __int64 v22; // r12\n  int v23; // eax\n  int v24; // er12\n  int v25; // esi\n  int v26; // ecx\n  int v27; // edi\n  int v28; // er10\n  int v29; // er11\n  int v30; // er9\n  int v31; // er8\n  int v32; // er15\n  int v33; // er15\n  const unsigned __int16 *v34; // rbx\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  float v37; // xmm0_4\n  __int64 v38; // rbx\n  __int64 v39; // r15\n  __int64 v40; // r14\n  __int64 v41; // rbp\n  unsigned int v42; // ebp\n  float v43; // xmm0_4\n  __m128 v44; // xmm1\n  int v45[45]; // [rsp+0h] [rbp-1ACh]\n  bool v46; // [rsp+B5h] [rbp-F7h]\n  bool v47; // [rsp+B6h] [rbp-F6h]\n  bool v48; // [rsp+B7h] [rbp-F5h]\n  bool v49; // [rsp+B8h] [rbp-F4h]\n  bool v50; // [rsp+B9h] [rbp-F3h]\n  bool v51; // [rsp+BAh] [rbp-F2h]\n  bool v52; // [rsp+BBh] [rbp-F1h]\n  bool v53; // [rsp+BCh] [rbp-F0h]\n  bool v54; // [rsp+BDh] [rbp-EFh]\n  bool v55; // [rsp+BEh] [rbp-EEh]\n  bool v56; // [rsp+BFh] [rbp-EDh]\n  bool v57; // [rsp+C0h] [rbp-ECh]\n  bool v58; // [rsp+C1h] [rbp-EBh]\n  bool v59; // [rsp+C2h] [rbp-EAh]\n  bool v60; // [rsp+C3h] [rbp-E9h]\n  unsigned int v61; // [rsp+C4h] [rbp-E8h]\n  int v62; // [rsp+C8h] [rbp-E4h]\n  __int128 v63; // [rsp+CCh] [rbp-E0h]\n  __int64 v64; // [rsp+DCh] [rbp-D0h]\n  int v65; // [rsp+E4h] [rbp-C8h]\n  int v66; // [rsp+E8h] [rbp-C4h]\n  int v67; // [rsp+ECh] [rbp-C0h]\n  int v68; // [rsp+F0h] [rbp-BCh]\n  _QWORD *v69; // [rsp+F4h] [rbp-B8h]\n  __int64 v70; // [rsp+FCh] [rbp-B0h]\n  __int128 v71; // [rsp+104h] [rbp-A8h]\n  __int128 v72; // [rsp+114h] [rbp-98h]\n  __int128 v73; // [rsp+124h] [rbp-88h]\n  __int128 v74; // [rsp+134h] [rbp-78h]\n  __int128 v75; // [rsp+144h] [rbp-68h]\n  __int128 v76; // [rsp+154h] [rbp-58h]\n  __int64 v77; // [rsp+164h] [rbp-48h]\n  __int64 v78; // [rsp+16Ch] [rbp-40h]\n  __int64 v79; // [rsp+174h] [rbp-38h]\n\n  v4 = a3;\n  v69 = (_QWORD *)a1;\n  v70 = a4;\n  v61 = a2;\n  sub_43C860(a4, a2, (__m128)0LL);\n  if ( (signed int)v4 > 0 )\n  {\n    v5 = v61;\n    v79 = v4;\n    v6 = 0LL;\n    v78 = v61;\n    do\n    {\n      v76 = 0LL;\n      v75 = 0LL;\n      v74 = 0LL;\n      v73 = 0LL;\n      v72 = 0LL;\n      v71 = 0LL;\n      v77 = 0LL;\n      v65 = 0;\n      v7 = 0;\n      v8 = 0;\n      v9 = 0;\n      v64 = 0LL;\n      v10 = 0;\n      v11 = 0;\n      v63 = 0uLL;\n      v62 = 0;\n      v12 = 0;\n      v13 = 0;\n      v14 = 0;\n      v15 = 0;\n      v16 = 0;\n      v17 = 0;\n      v18 = 0;\n      if ( (signed int)v61 > 0 )\n      {\n        v19 = *__ctype_b_loc();\n        v20 = v5;\n        v21 = v69;\n        do\n        {\n          v22 = *(char *)(*v21 + v6);\n          if ( v19[v22] & 0x400 )\n          {\n            if ( (unsigned int)(v22 + 128) <= 0x17F )\n              LODWORD(v22) = (*__ctype_toupper_loc())[v22];\n            ++v45[(signed int)v22];\n          }\n          ++v21;\n          --v20;\n        }\n        while ( v20 );\n        v17 = DWORD1(v71);\n        v18 = v71;\n        v15 = HIDWORD(v71);\n        v16 = DWORD2(v71);\n        v13 = DWORD1(v72);\n        v14 = v72;\n        v62 = HIDWORD(v72);\n        v12 = DWORD2(v72);\n        v63 = v73;\n        v10 = DWORD1(v74);\n        v64 = *((_QWORD *)&v74 + 1);\n        v7 = DWORD2(v75);\n        v8 = DWORD1(v75);\n        v65 = HIDWORD(v75);\n        v9 = v75;\n        v11 = v74;\n      }\n      v53 = v18 > 0;\n      v23 = v10;\n      v51 = v17 > 0;\n      v52 = v16 > 0;\n      v24 = 0;\n      v54 = v15 > 0;\n      v25 = 0;\n      v55 = v14 > 0;\n      v26 = v7;\n      v27 = 0;\n      v56 = v13 > 0;\n      v28 = 0;\n      v57 = v12 > 0;\n      v29 = 0;\n      v58 = v62 > 0;\n      v30 = 0;\n      v59 = (signed int)v63 > 0;\n      v31 = 0;\n      v60 = SDWORD1(v63) > 0;\n      LOBYTE(v66) = SDWORD2(v63) > 0;\n      LOBYTE(v67) = SHIDWORD(v63) > 0;\n      LOBYTE(v68) = v11 > 0;\n      LOBYTE(v62) = v23 > 0;\n      LOBYTE(v63) = (signed int)v64 > 0;\n      BYTE4(v63) = SHIDWORD(v64) > 0;\n      BYTE8(v63) = v9 > 0;\n      BYTE12(v63) = v8 > 0;\n      LOBYTE(v64) = v26 > 0;\n      BYTE4(v64) = v65 > 0;\n      LOBYTE(v65) = (signed int)v76 > 0;\n      v32 = 0;\n      if ( (signed int)v61 > 0 )\n      {\n        v50 = SHIDWORD(v77) > 0;\n        v49 = (signed int)v77 > 0;\n        v48 = SHIDWORD(v76) > 0;\n        v47 = SDWORD2(v76) > 0;\n        v46 = SDWORD1(v76) > 0;\n        LOBYTE(v24) = v54;\n        LOBYTE(v25) = v55;\n        LOBYTE(v27) = v56;\n        LOBYTE(v28) = v57;\n        LOBYTE(v29) = v58;\n        LOBYTE(v30) = v59;\n        LOBYTE(v31) = v60;\n        v66 = v53 + v51 + v52 + v24 + v25 + v27 + v28 + v29 + v30 + v31 + (unsigned __int8)v66;\n        v67 = (unsigned __int8)v67;\n        v68 = (unsigned __int8)v68;\n        v62 = (unsigned __int8)v62;\n        LOBYTE(v32) = SHIDWORD(v77) > 0;\n        v5 = v78;\n        v33 = v66\n            + (unsigned __int8)v67\n            + (unsigned __int8)v68\n            + (unsigned __int8)v62\n            + (unsigned __int8)v63\n            + BYTE4(v63)\n            + BYTE8(v63)\n            + BYTE12(v63)\n            + (unsigned __int8)v64\n            + BYTE4(v64)\n            + (unsigned __int8)v65\n            + (SDWORD1(v76) > 0)\n            + (SDWORD2(v76) > 0)\n            + (SHIDWORD(v76) > 0)\n            + ((signed int)v77 > 0)\n            + v32;\n        v34 = *__ctype_b_loc();\n        v35 = 0LL;\n        do\n        {\n          v36 = *(char *)(v69[v35] + v6);\n          if ( v34[v36] & 0x400 )\n          {\n            if ( (unsigned int)(v36 + 128) <= 0x17F )\n              LODWORD(v36) = (*__ctype_toupper_loc())[v36];\n            v37 = *(float *)(v70 + 4 * v35) + 1.0 / (float)(v33 * v45[(signed int)v36]);\n            *(float *)(v70 + 4 * v35) = v37;\n          }\n          ++v35;\n        }\n        while ( v5 != v35 );\n      }\n      ++v6;\n    }\n    while ( v6 != v79 );\n  }\n  v38 = v70;\n  v39 = (__int64)v69;\n  if ( (signed int)v61 > 0 )\n  {\n    v40 = v61;\n    v41 = 0LL;\n    do\n    {\n      *(float *)(v38 + 4 * v41) = *(float *)(v38 + 4 * v41) / (float)(signed int)sub_425050(*(char **)(v39 + 8 * v41));\n      ++v41;\n    }\n    while ( v40 != v41 );\n  }\n  v42 = v61;\n  v43 = (float)(signed int)v61;\n  *(float *)&v69 = (float)(signed int)v61;\n  sub_43CBE0(v38, v61);\n  v44 = (__m128)(unsigned int)v69;\n  v44.m128_f32[0] = *(float *)&v69 / v43;\n  sub_43CA70(v38, v42, v44);\n}\n", 
            "funcStartAddr": "0x43f810L", 
            "funcEndAddr": "0x43fdbbL", 
            "funcName": "sub_43F810"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_43FDC0(__int64 a1@<rax>, __int64 a2@<rdi>, __int64 *a3@<rsi>, double a4@<xmm0>, double a5@<xmm1>, double a6@<xmm2>, __m128i a7@<xmm3>)\n{\n  signed int *v7; // r15\n  double v8; // xmm4_8\n  __m128i v9; // xmm5\n  __int64 v10; // rax\n  __int64 v11; // rcx\n  signed __int64 v12; // rbx\n  int v13; // ebp\n  __int64 v14; // r14\n  __int64 v15; // r12\n  _DWORD *ptr; // [rsp+0h] [rbp-48h]\n  float v17; // [rsp+Ch] [rbp-3Ch]\n\n  v17 = *(float *)&a4;\n  v7 = (signed int *)sub_4382F0(a1, 4LL * *(signed int *)(a2 + 28), (__int64)\"weight.c\", 0x214u);\n  ptr = sub_4382F0((__int64)v7, 4LL * *(signed int *)(a2 + 28), (__int64)\"weight.c\", 0x215u);\n  if ( *(_DWORD *)(a2 + 28) > 0 )\n  {\n    v10 = 0LL;\n    do\n    {\n      ptr[v10++] = 0;\n      v11 = *(signed int *)(a2 + 28);\n    }\n    while ( v10 < v11 );\n    if ( (signed int)v11 > 0 )\n    {\n      v12 = 0LL;\n      v13 = 0;\n      do\n      {\n        v14 = v13;\n        if ( v13 <= 0 )\n        {\nLABEL_10:\n          ++v13;\n          v7[v14] = v12;\n          ptr[v12] = 1;\n        }\n        else\n        {\n          v15 = 0LL;\n          while ( 1 )\n          {\n            a4 = sub_424090(*(char **)(*(_QWORD *)a2 + 8 * v12), *(_QWORD *)(*(_QWORD *)a2 + 8LL * v7[v15]));\n            if ( *(float *)&a4 > v17 )\n              break;\n            if ( ++v15 >= v13 )\n              goto LABEL_10;\n          }\n          a4 = *(float *)&a4;\n          printf(\n            \"removing %12s -- fractional identity %.2f to %s\\n\",\n            *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v12),\n            *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * v7[v15]),\n            a4,\n            ptr);\n        }\n        ++v12;\n      }\n      while ( v12 < *(signed int *)(a2 + 28) );\n    }\n  }\n  sub_42D380(a2, (__int64)ptr, a3, a4, a5, a6, a7, v8, v9);\n  free(v7);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x43fdc0L", 
            "funcEndAddr": "0x43feffL", 
            "funcName": "sub_43FDC0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_43FF00(__int64 a1@<rax>, __int64 *a2@<rdx>, __int64 a3@<rdi>, signed int a4@<esi>, double a5@<xmm0>, double a6@<xmm1>, double a7@<xmm2>, __m128i a8@<xmm3>)\n{\n  signed int v8; // ebp\n  signed int *v9; // r15\n  _DWORD *v10; // rax\n  double v11; // xmm4_8\n  __m128i v12; // xmm5\n  __int64 v13; // rbx\n  __int64 v14; // rcx\n  __int64 v15; // rcx\n  signed int *v16; // r14\n  signed int v17; // er15\n  __int64 v18; // r12\n  void *v19; // rbx\n  signed int *ptr; // [rsp+8h] [rbp-50h]\n  __int64 *v21; // [rsp+18h] [rbp-40h]\n  _DWORD *v22; // [rsp+20h] [rbp-38h]\n\n  v21 = a2;\n  v8 = a4;\n  v9 = (signed int *)sub_4382F0(a1, 4LL * *(signed int *)(a3 + 28), (__int64)\"weight.c\", 0x254u);\n  v10 = sub_4382F0((__int64)v9, 4LL * *(signed int *)(a3 + 28), (__int64)\"weight.c\", 0x255u);\n  LODWORD(v13) = *(_DWORD *)(a3 + 28);\n  if ( (signed int)v13 > 0 )\n  {\n    v14 = 0LL;\n    do\n    {\n      v9[v14] = v14;\n      v10[v14++] = 0;\n      v13 = *(signed int *)(a3 + 28);\n    }\n    while ( v14 < v13 );\n  }\n  if ( (signed int)v13 <= a4 )\n    v8 = v13;\n  v15 = (__int64)v10;\n  ptr = v9;\n  if ( v8 > 0 )\n  {\n    v16 = &v9[(signed int)v13 - 1];\n    v17 = 0;\n    v22 = v10;\n    do\n    {\n      a5 = sub_437B60();\n      a6 = (double)(signed int)v13 * a5;\n      v18 = (signed int)a6;\n      printf(\"chose %d: %s\\n\", ptr[v18], *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8LL * ptr[v18]));\n      v15 = (__int64)v22;\n      v22[ptr[v18]] = 1;\n      ptr[v18] = *v16;\n      ++v17;\n      LODWORD(v13) = v13 - 1;\n      --v16;\n    }\n    while ( v17 < v8 );\n  }\n  v19 = (void *)v15;\n  sub_42D380(a3, v15, v21, a5, a6, a7, a8, v11, v12);\n  free(ptr);\n  free(v19);\n}\n", 
            "funcStartAddr": "0x43ff00L", 
            "funcEndAddr": "0x440043L", 
            "funcName": "sub_43FF00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = ((char *)&stru_44EDF8 - (char *)&off_44EDF0) >> 3;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_44EDF0 + v5++))(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x440050L", 
            "funcEndAddr": "0x4400b5L", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x4400c0L", 
            "funcEndAddr": "0x4400c2L", 
            "funcName": "fini"
        }
    ], 
    "failedCount": 0, 
    "binaryInfo": {
        "binaryName": "hmmer-amd64-clang-O2_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "379", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }, 
    "recognizedCount": 0
}