{
    "decompileResult": [
        {
            "decompiledFuncCode": "char __fastcall sub_6090(char *old, char *a2)\n{\n  if ( !rename(old, a2) )\n    return 1;\n  remove(a2);\n  if ( !rename(old, a2) )\n    return 1;\n  perror(\"puttygen: cannot move new file on to old one\");\n  return 0;\n}\n", 
            "funcStartAddr": "0x6090L", 
            "funcEndAddr": "0x60d2L", 
            "funcName": "sub_6090"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_60D2()\n{\n  __assert_fail(\"false && \\\"bad status value in lf_load_keyfile_helper\\\"\", \"sshpubk.c\", 0x75u, \"lf_load_keyfile_helper\");\n}\n", 
            "funcStartAddr": "0x60d2L", 
            "funcEndAddr": "0x60f5L", 
            "funcName": "sub_60D2"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_60F5()\n{\n  __assert_fail(\"false && \\\"bad hash algorithm for RSA PKCS#1\\\"\", \"sshrsa.c\", 0x2C4u, \"rsa_pkcs1_prefix_for_hash\");\n}\n", 
            "funcStartAddr": "0x60f5L", 
            "funcEndAddr": "0x6118L", 
            "funcName": "sub_60F5"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_6118()\n{\n  __assert_fail(\n    \"blk->used == 0 && \\\"Should have exactly hit a block boundary\\\"\",\n    \"sshsh256.c\",\n    0xB5u,\n    \"sha256_block_pad\");\n}\n", 
            "funcStartAddr": "0x6118L", 
            "funcEndAddr": "0x613bL", 
            "funcName": "sub_6118"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_613B()\n{\n  __assert_fail(\"blk->used == 0 && \\\"Should have exactly hit a block boundary\\\"\", \"sshsha.c\", 0xA6u, \"sha1_block_pad\");\n}\n", 
            "funcStartAddr": "0x613bL", 
            "funcEndAddr": "0x615eL", 
            "funcName": "sub_613B"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_615E()\n{\n  __assert_fail(\"width <= scc->line_chars_remaining\", \"stripctrl.c\", 0x9Cu, \"stripctrl_check_line_limit\");\n}\n", 
            "funcStartAddr": "0x615eL", 
            "funcEndAddr": "0x6181L", 
            "funcName": "sub_615E"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_6181()\n{\n  __assert_fail(\"width >= 0\", \"stripctrl.c\", 0xAAu, \"stripctrl_locale_put_wc\");\n}\n", 
            "funcStartAddr": "0x6181L", 
            "funcEndAddr": "0x61a4L", 
            "funcName": "sub_6181"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_61A4()\n{\n  __assert_fail(\"width >= 0\", \"stripctrl.c\", 0xC7u, \"stripctrl_term_put_wc\");\n}\n", 
            "funcStartAddr": "0x61a4L", 
            "funcEndAddr": "0x61c7L", 
            "funcName": "sub_61A4"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_61C7()\n{\n  __assert_fail(\"fd >= 0\", \"unix/uxpoll.c\", 0x87u, \"pollwrap_get_fd_events_revents\");\n}\n", 
            "funcStartAddr": "0x61c7L", 
            "funcEndAddr": "0x61eaL", 
            "funcName": "sub_61C7"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_61EA()\n{\n  __assert_fail(\"fingerprints[fptype]\", \"utils.c\", 0x45Bu, \"ssh2_pick_fingerprint\");\n}\n", 
            "funcStartAddr": "0x61eaL", 
            "funcEndAddr": "0x620dL", 
            "funcName": "sub_61EA"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, signed __int64 *a3@<rbx>, const char *a4@<rdi>)\n{\n  __int64 v4; // r15\n  char **v5; // rbp\n  char *v6; // r14\n  const char *v7; // rax\n  signed __int64 v8; // r12\n  char v9; // bl\n  const char *v10; // rbp\n  __int64 v11; // rcx\n  __int64 v12; // rdx\n  char *v13; // rcx\n  __int64 v14; // r12\n  unsigned int v15; // er14\n  __int64 result; // rax\n  _BYTE *v17; // rdx\n  char v18; // al\n  __int64 v19; // rdx\n  __int64 v20; // rcx\n  const char *v21; // rbp\n  signed __int64 v22; // r12\n  unsigned int v23; // ebx\n  signed int v24; // ebp\n  signed __int64 v25; // rax\n  signed __int64 v26; // rbx\n  __int64 (__fastcall *v27)(); // rax\n  void **v28; // rbp\n  const char *v29; // r12\n  __int64 v30; // r14\n  __int64 v31; // r8\n  char *v32; // rcx\n  const char *v33; // rbx\n  __int64 v34; // rdx\n  __int64 v35; // rcx\n  __int64 v36; // rax\n  char v37; // si\n  char *v38; // rcx\n  const char *v39; // rdx\n  const char *v40; // rcx\n  char v41; // r13\n  bool v42; // al\n  unsigned int v43; // eax\n  char v44; // r13\n  signed __int64 v45; // rax\n  char *v46; // rdi\n  __int64 v47; // r14\n  __int64 v48; // rax\n  FILE *v49; // ST18_8\n  FILE *v50; // r13\n  __int64 v51; // rcx\n  __int64 v52; // rdx\n  char *v53; // rsi\n  signed __int64 v54; // rsi\n  __int64 v55; // rbx\n  __int64 v56; // rax\n  signed __int64 v57; // rcx\n  char *v58; // rsi\n  struct tm *v59; // rdi\n  __int64 v60; // rdx\n  __int64 v61; // rbp\n  __int64 v62; // r13\n  __int64 v63; // rax\n  __int64 v64; // r12\n  __int64 v65; // rax\n  __int64 v66; // rax\n  int v67; // eax\n  char *v68; // rax\n  signed __int64 v69; // r12\n  char *v70; // rax\n  char *v71; // r15\n  const char *v72; // rcx\n  const char *v73; // rdx\n  const char *v74; // rbp\n  signed __int64 v75; // rcx\n  char **v76; // rdi\n  __int64 v77; // rax\n  __int64 v78; // r13\n  int v79; // eax\n  __int64 v80; // rdx\n  int v81; // ebx\n  __int64 v82; // rax\n  __int64 v83; // rax\n  __int64 v84; // rax\n  __int64 v85; // r13\n  __int64 v86; // rax\n  int v87; // eax\n  __int64 v88; // r13\n  FILE *v89; // r14\n  unsigned __int64 *v90; // rbx\n  unsigned __int64 i; // rbp\n  const char *v92; // r13\n  signed __int64 v93; // r12\n  signed __int64 v94; // rax\n  __int64 v95; // rdi\n  unsigned __int64 *v96; // r13\n  __int64 v97; // rbp\n  __int64 v98; // rax\n  signed __int64 v99; // rbp\n  const char *v100; // r13\n  const char *v101; // rax\n  __int32 v102; // er14\n  __int64 v103; // r13\n  __int64 v104; // rcx\n  __int64 v105; // rdx\n  __int64 v106; // rax\n  __int64 v107; // rdx\n  void *v108; // rax\n  size_t v109; // rdx\n  size_t v110; // rsi\n  size_t v111; // r13\n  __int64 (__fastcall **v112)(_QWORD, _QWORD, _QWORD); // rax\n  __int64 v113; // rax\n  __int64 v114; // r14\n  unsigned int v115; // eax\n  char v116; // [rsp+0h] [rbp-228h]\n  char v117; // [rsp+8h] [rbp-220h]\n  __int64 v118; // [rsp+8h] [rbp-220h]\n  char *v119; // [rsp+8h] [rbp-220h]\n  __int64 v120; // [rsp+10h] [rbp-218h]\n  signed int v121; // [rsp+10h] [rbp-218h]\n  signed int stream; // [rsp+18h] [rbp-210h]\n  FILE *streama; // [rsp+18h] [rbp-210h]\n  char *v124; // [rsp+20h] [rbp-208h]\n  char old; // [rsp+28h] [rbp-200h]\n  char *olda; // [rsp+28h] [rbp-200h]\n  char **endptr; // [rsp+30h] [rbp-1F8h]\n  const char *v128; // [rsp+38h] [rbp-1F0h]\n  signed int v129; // [rsp+40h] [rbp-1E8h]\n  signed __int64 *v130; // [rsp+40h] [rbp-1E8h]\n  char *newa; // [rsp+48h] [rbp-1E0h]\n  signed int v132; // [rsp+50h] [rbp-1D8h]\n  char **v133; // [rsp+50h] [rbp-1D8h]\n  char *src; // [rsp+58h] [rbp-1D0h]\n  unsigned int v135; // [rsp+64h] [rbp-1C4h]\n  __int64 (__fastcall **v136)(); // [rsp+68h] [rbp-1C0h]\n  const char *v137; // [rsp+70h] [rbp-1B8h]\n  bool v138; // [rsp+78h] [rbp-1B0h]\n  char *v139; // [rsp+78h] [rbp-1B0h]\n  signed __int64 v140; // [rsp+80h] [rbp-1A8h]\n  char v141; // [rsp+89h] [rbp-19Fh]\n  char v142; // [rsp+8Ah] [rbp-19Eh]\n  bool v143; // [rsp+8Ah] [rbp-19Eh]\n  unsigned __int8 v144; // [rsp+8Bh] [rbp-19Dh]\n  int v145; // [rsp+8Ch] [rbp-19Ch]\n  char v146; // [rsp+90h] [rbp-198h]\n  char *v147; // [rsp+D8h] [rbp-150h]\n  void *s1; // [rsp+E0h] [rbp-148h]\n  char v149; // [rsp+E8h] [rbp-140h]\n  __m128i v150; // [rsp+F0h] [rbp-138h]\n  __m128i v151; // [rsp+100h] [rbp-128h]\n  __int64 v152; // [rsp+110h] [rbp-118h]\n  struct tm tp; // [rsp+120h] [rbp-108h]\n  __int64 v154; // [rsp+160h] [rbp-C8h]\n  __int64 v155; // [rsp+168h] [rbp-C0h]\n  __int64 v156; // [rsp+170h] [rbp-B8h]\n  int v157; // [rsp+178h] [rbp-B0h]\n  __int64 *v158; // [rsp+180h] [rbp-A8h]\n  char s; // [rsp+190h] [rbp-98h]\n  unsigned __int64 v160; // [rsp+1E8h] [rbp-40h]\n\n  LODWORD(v4) = (_DWORD)a4;\n  v5 = a1;\n  v160 = __readfsqword(0x28u);\n  v147 = 0LL;\n  v150 = _mm_loadu_si128((const __m128i *)&xmmword_50220);\n  s1 = 0LL;\n  v152 = 0LL;\n  v151 = _mm_loadu_si128((const __m128i *)&xmmword_50230);\n  if ( (unsigned __int8)sub_442D0(a4, a1, a2) )\n    ::stream = stderr;\n  if ( (signed int)a4 <= 1 )\n  {\n    v15 = 0;\n    v14 = 0LL;\n    sub_8D20(1LL);\n    v118 = 0LL;\n    olda = 0LL;\n    endptr = 0LL;\n    goto LABEL_38;\n  }\n  v135 = 1;\n  v144 = 0;\n  v137 = 0LL;\n  v128 = 0LL;\n  v6 = 0LL;\n  v136 = off_260CE0;\n  v124 = 0LL;\n  v132 = 0;\n  old = 0;\n  v117 = 0;\n  v142 = 0;\n  v141 = 0;\n  src = 0LL;\n  stream = -1;\n  v129 = 0;\n  newa = 0LL;\n  v121 = 0;\n  while ( 1 )\n  {\n    LODWORD(v4) = v4 - 1;\n    if ( !(_DWORD)v4 )\n      break;\n    v7 = v5[1];\n    v8 = (signed __int64)(v5 + 1);\n    if ( *v7 != 45 || (v9 = v7[1]) == 0 )\n    {\n      if ( v6 )\n      {\n        a4 = \"puttygen: cannot handle more than one input file\\n\";\n        fwrite(\"puttygen: cannot handle more than one input file\\n\", 1uLL, 0x31uLL, stderr);\n        v117 = 1;\n      }\n      else\n      {\n        v6 = v5[1];\n      }\n      goto LABEL_6;\n    }\n    v10 = v7 + 1;\n    while ( 2 )\n    {\n      v11 = (unsigned int)v9;\n      v12 = (unsigned __int8)(v9 - 45);\n      switch ( v9 )\n      {\n        case 45:\n          v17 = v7 + 2;\n          v18 = v7[2];\n          if ( v18 != 61 && v18 )\n          {\n            do\n              v18 = *++v17;\n            while ( *v17 && v18 != 61 );\n          }\n          if ( v18 == 61 )\n          {\n            *v17 = 0;\n            a4 = v10;\n            v33 = v17 + 1;\n            if ( !strcmp(v10, \"-help\") )\n            {\n              if ( !v33 )\n              {\nLABEL_53:\n                sub_8D90(a4, \"-help\", v19, v20);\n                old = 1;\n                goto LABEL_6;\n              }\n              goto LABEL_95;\n            }\n            a4 = v10;\n            if ( !strcmp(v10, \"-version\") )\n            {\n              if ( !v33 )\n              {\nLABEL_152:\n                sub_8CE0(a4, \"-version\", v34, v35);\n                old = 1;\n                goto LABEL_6;\n              }\nLABEL_95:\n              a4 = (const char *)stderr;\n              __fprintf_chk(stderr, 1LL, \"puttygen: option `-%s' expects no argument\\n\", v10);\n              v117 = 1;\n              goto LABEL_6;\n            }\n            a4 = v10;\n            if ( !strcmp(v10, \"-pgpfp\") )\n            {\n              if ( !v33 )\n              {\nLABEL_173:\n                sub_446A0(a4, \"-pgpfp\");\n                old = 1;\n                goto LABEL_6;\n              }\n              goto LABEL_95;\n            }\n          }\n          else\n          {\n            a4 = v10;\n            if ( !strcmp(v10, \"-help\") )\n              goto LABEL_53;\n            a4 = v10;\n            if ( !strcmp(v10, \"-version\") )\n              goto LABEL_152;\n            a4 = v10;\n            if ( !strcmp(v10, \"-pgpfp\") )\n              goto LABEL_173;\n            v33 = 0LL;\n          }\n          if ( !strcmp(v10, \"-old-passphrase\") )\n          {\n            if ( !v33 && (signed int)v4 > 1 )\n            {\n              v33 = *(const char **)(v8 + 8);\n              LODWORD(v4) = v4 - 1;\n              v8 += 8LL;\n            }\n            if ( !v33 )\n              goto LABEL_229;\n            a4 = v33;\n            v36 = sub_8BD0(v33, \"-old-passphrase\");\n            v124 = (char *)v36;\n            goto LABEL_106;\n          }\n          if ( !strcmp(v10, \"-new-passphrase\") )\n          {\n            if ( !v33 && (signed int)v4 > 1 )\n            {\n              v33 = *(const char **)(v8 + 8);\n              LODWORD(v4) = v4 - 1;\n              v8 += 8LL;\n            }\n            if ( !v33 )\n              goto LABEL_229;\n            a4 = v33;\n            v36 = sub_8BD0(v33, \"-new-passphrase\");\n            v128 = (const char *)v36;\nLABEL_106:\n            v37 = v117;\n            if ( !v36 )\n              v37 = 1;\n            v117 = v37;\n            goto LABEL_6;\n          }\n          a4 = v10;\n          if ( !strcmp(v10, \"-random-device\") )\n          {\n            if ( !v33 && (signed int)v4 > 1 )\n            {\n              v33 = *(const char **)(v8 + 8);\n              LODWORD(v4) = v4 - 1;\n              v8 += 8LL;\n            }\n            if ( v33 )\n            {\n              v137 = v33;\n              goto LABEL_6;\n            }\n            goto LABEL_229;\n          }\n          a4 = v10;\n          if ( !strcmp(v10, \"-dump\") )\n          {\nLABEL_126:\n            v129 = 7;\n            goto LABEL_6;\n          }\n          if ( strcmp(v10, \"-primes\") )\n          {\n            a4 = v10;\n            if ( !strcmp(v10, \"-strong-rsa\") )\n            {\n              v144 = 1;\n              goto LABEL_6;\n            }\n            a4 = v10;\n            if ( !strcmp(v10, \"-reencrypt\") )\n            {\n              v142 = 1;\n              goto LABEL_6;\n            }\n            if ( strcmp(v10, \"-ppk-param\") && strcmp(v10, \"-ppk-params\") )\n            {\n              v40 = v10;\n              v39 = \"puttygen: no such option `-%s'\\n\";\n              goto LABEL_170;\n            }\n            if ( !v33 && (signed int)v4 > 1 )\n            {\n              v33 = *(const char **)(v8 + 8);\n              LODWORD(v4) = v4 - 1;\n              v8 += 8LL;\n            }\n            if ( !v33 )\n            {\nLABEL_229:\n              v40 = v10;\n              v39 = \"puttygen: option `-%s' expects an argument\\n\";\n              goto LABEL_170;\n            }\n            v139 = v6;\n            v140 = v8;\n            v145 = v4;\n            while ( 2 )\n            {\n              v68 = strchr(v33, 44);\n              v69 = (signed __int64)v68;\n              if ( v68 )\n              {\n                *v68 = 0;\n                v69 = (signed __int64)(v68 + 1);\n              }\n              v70 = strchr(v33, 61);\n              v71 = v70;\n              v72 = v33;\n              v73 = \"puttygen: PPK parameter '%s' expected a value\\n\";\n              if ( v70 )\n              {\n                *v70 = 0;\n                v74 = v70 + 1;\n                if ( !strcmp(v33, \"kdf\") )\n                {\n                  a4 = v74;\n                  if ( !strcmp(v74, \"Argon2id\") || (a4 = v74, !strcmp(v74, \"argon2id\")) )\n                  {\n                    v150.m128i_i32[1] = 2;\n                    goto LABEL_340;\n                  }\n                  a4 = v74;\n                  if ( !strcmp(v74, \"Argon2i\") || (a4 = v74, !strcmp(v74, \"argon2i\")) )\n                  {\n                    v150.m128i_i32[1] = 1;\n                    goto LABEL_340;\n                  }\n                  a4 = v74;\n                  if ( !strcmp(v74, \"Argon2d\") || (a4 = v74, !strcmp(v74, \"argon2d\")) )\n                  {\n                    v150.m128i_i32[1] = 0;\nLABEL_340:\n                    v33 = (const char *)v69;\n                    if ( !v69 )\n                    {\n                      v6 = v139;\n                      v8 = v140;\n                      LODWORD(v4) = v145;\n                      goto LABEL_6;\n                    }\n                    continue;\n                  }\n                  v72 = v74;\n                  v73 = \"puttygen: unrecognised kdf '%s'\\n\";\n                }\n                else\n                {\n                  v102 = strtoul(v74, (char **)&tp, 0);\n                  if ( !v71[1] || **(_BYTE **)&tp.tm_sec )\n                  {\n                    a4 = (const char *)stderr;\n                    __fprintf_chk(stderr, 1LL, \"puttygen: value '%s' for PPK parameter '%s': expected a number\\n\", v74);\n                    v117 = 1;\n                    goto LABEL_340;\n                  }\n                  a4 = v33;\n                  if ( !strcmp(v33, \"version\") )\n                  {\n                    v150.m128i_i32[0] = v102;\n                    goto LABEL_340;\n                  }\n                  a4 = v33;\n                  if ( !strcmp(v33, \"memory\") || (a4 = v33, !strcmp(v33, \"mem\")) )\n                  {\n                    v150.m128i_i32[2] = v102;\n                    goto LABEL_340;\n                  }\n                  a4 = v33;\n                  if ( !strcmp(v33, \"time\") )\n                  {\n                    v150.m128i_i8[12] = 1;\n                    v151.m128i_i32[0] = v102;\n                    goto LABEL_340;\n                  }\n                  a4 = v33;\n                  if ( !strcmp(v33, \"passes\") )\n                  {\n                    v150.m128i_i8[12] = 0;\n                    v151.m128i_i32[0] = v102;\n                    goto LABEL_340;\n                  }\n                  a4 = v33;\n                  if ( !strcmp(v33, \"parallelism\") || (a4 = v33, !strcmp(v33, \"parallel\")) )\n                  {\n                    v151.m128i_i32[1] = v102;\n                    goto LABEL_340;\n                  }\n                  v73 = \"puttygen: unrecognised PPK parameter '%s'\\n\";\n                  v72 = v33;\n                }\n              }\n              break;\n            }\n            a4 = (const char *)stderr;\n            __fprintf_chk(stderr, 1LL, v73, v72);\n            v117 = 1;\n            goto LABEL_340;\n          }\n          if ( !v33 && (signed int)v4 > 1 )\n          {\n            v33 = *(const char **)(v8 + 8);\n            LODWORD(v4) = v4 - 1;\n            v8 += 8LL;\n          }\n          if ( !v33 )\n            goto LABEL_229;\n          a4 = v33;\n          if ( !strcmp(v33, \"probable\") || (a4 = v33, !strcmp(v33, \"probabilistic\")) )\n          {\n            v136 = off_260CE0;\n          }\n          else\n          {\n            a4 = v33;\n            if ( strcmp(v33, \"provable\") )\n            {\n              a4 = v33;\n              if ( strcmp(v33, \"proven\") )\n              {\n                a4 = v33;\n                if ( strcmp(v33, \"simple\") )\n                {\n                  a4 = v33;\n                  if ( strcmp(v33, aMaurer) )\n                  {\n                    a4 = v33;\n                    if ( !strcmp(v33, \"provable-even\")\n                      || (a4 = v33, !strcmp(v33, \"proven-even\"))\n                      || (a4 = v33, !strcmp(v33, \"even\"))\n                      || (a4 = v33, !strcmp(v33, \"complex\"))\n                      || (a4 = v33, !strcmp(v33, aMaurer_0)) )\n                    {\n                      v136 = off_260C20;\n                      goto LABEL_6;\n                    }\n                    v40 = v33;\n                    v39 = \"puttygen: unrecognised prime-generation mode `%s'\\n\";\nLABEL_170:\n                    a4 = (const char *)stderr;\n                    __fprintf_chk(stderr, 1LL, v39, v40);\n                    v117 = 1;\n                    goto LABEL_6;\n                  }\n                }\n              }\n            }\n            v136 = off_260C60;\n          }\nLABEL_6:\n          v5 = (char **)v8;\n          break;\n        case 67:\n        case 69:\n        case 79:\n        case 98:\n        case 111:\n        case 116:\n          v21 = v7 + 2;\n          if ( !v7[2] )\n          {\n            if ( (_DWORD)v4 == 1 )\n            {\n              a4 = (const char *)stderr;\n              __fprintf_chk(stderr, 1LL, \"puttygen: option `-%c' expects a parameter\\n\", v11);\n              v117 = 1;\n            }\n            else\n            {\n              v21 = *(const char **)(v8 + 8);\n              LODWORD(v4) = v4 - 1;\n              v8 += 8LL;\n            }\n          }\n          switch ( v9 )\n          {\n            case 67:\n              src = (char *)v21;\n              break;\n            case 69:\n              a4 = v21;\n              if ( !strcmp(v21, \"md5\") )\n              {\n                v135 = 0;\n              }\n              else\n              {\n                a4 = v21;\n                if ( strcmp(v21, \"sha256\") )\n                {\n                  v39 = \"puttygen: unknown fingerprint type `%s'\\n\";\n                  v40 = v21;\n                  goto LABEL_170;\n                }\n                v135 = 1;\n              }\n              break;\n            case 79:\n              a4 = v21;\n              if ( !strcmp(v21, \"public\") )\n              {\n                v129 = 1;\n              }\n              else\n              {\n                a4 = v21;\n                if ( !strcmp(v21, \"public-openssh\") )\n                {\n                  v129 = 2;\n                }\n                else\n                {\n                  a4 = v21;\n                  if ( !strcmp(v21, \"private\") )\n                  {\n                    v129 = 0;\n                  }\n                  else\n                  {\n                    a4 = v21;\n                    if ( !strcmp(v21, \"fingerprint\") )\n                    {\n                      v129 = 3;\n                    }\n                    else\n                    {\n                      a4 = v21;\n                      if ( !strcmp(v21, \"private-openssh\") )\n                      {\n                        v132 = 2;\n                        v129 = 4;\n                      }\n                      else\n                      {\n                        a4 = v21;\n                        if ( !strcmp(v21, \"private-openssh-new\") )\n                        {\n                          v132 = 2;\n                          v129 = 5;\n                        }\n                        else\n                        {\n                          a4 = v21;\n                          if ( strcmp(v21, \"private-sshcom\") )\n                          {\n                            a4 = v21;\n                            if ( !strcmp(v21, \"text\") )\n                              goto LABEL_126;\n                            v40 = v21;\n                            v39 = \"puttygen: unknown output type `%s'\\n\";\n                            goto LABEL_170;\n                          }\n                          v132 = 2;\n                          v129 = 6;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              break;\n            case 98:\n              a4 = v21;\n              stream = strtol(v21, 0LL, 10);\n              break;\n            case 111:\n              newa = (char *)v21;\n              break;\n            case 116:\n              a4 = v21;\n              if ( !strcmp(v21, \"rsa\") || (a4 = v21, !strcmp(v21, \"rsa2\")) )\n              {\n                v132 = 2;\n                v121 = 2;\n              }\n              else\n              {\n                a4 = v21;\n                if ( !strcmp(v21, \"rsa1\") )\n                {\n                  v132 = 1;\n                  v121 = 1;\n                }\n                else\n                {\n                  a4 = v21;\n                  if ( !strcmp(v21, \"dsa\") || (a4 = v21, !strcmp(v21, \"dss\")) )\n                  {\n                    v132 = 2;\n                    v121 = 3;\n                  }\n                  else\n                  {\n                    a4 = v21;\n                    if ( !strcmp(v21, \"ecdsa\") )\n                    {\n                      v132 = 2;\n                      v121 = 4;\n                    }\n                    else\n                    {\n                      a4 = v21;\n                      if ( !strcmp(v21, \"eddsa\") )\n                      {\n                        v132 = 2;\n                        v121 = 5;\n                      }\n                      else\n                      {\n                        a4 = v21;\n                        if ( !strcmp(v21, \"ed25519\") )\n                        {\n                          v132 = 2;\n                          stream = 255;\n                          v121 = 5;\n                        }\n                        else\n                        {\n                          a4 = v21;\n                          if ( strcmp(v21, \"ed448\") )\n                          {\n                            v40 = v21;\n                            v39 = \"puttygen: unknown key type `%s'\\n\";\n                            goto LABEL_170;\n                          }\n                          v132 = 2;\n                          stream = 448;\n                          v121 = 5;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              break;\n            default:\n              goto LABEL_6;\n          }\n          goto LABEL_6;\n        case 76:\n        case 80:\n        case 86:\n        case 104:\n        case 108:\n        case 112:\n        case 113:\n          switch ( v9 )\n          {\n            case 76:\n              v7 = v10;\n              v129 = 2;\n              break;\n            case 80:\n              v7 = v10;\n              v141 = 1;\n              break;\n            case 86:\n              sub_8CE0(a4, off_49EA0, v12, v11);\n              v7 = v10;\n              old = 1;\n              break;\n            case 104:\n              sub_8D90(a4, off_49EA0, v12, v11);\n              v7 = v10;\n              old = 1;\n              break;\n            case 108:\n              v7 = v10;\n              v129 = 3;\n              break;\n            case 112:\n              v7 = v10;\n              v129 = 1;\n              break;\n            case 113:\n              ::stream = 0LL;\n              goto LABEL_146;\n            default:\nLABEL_146:\n              v7 = v10;\n              break;\n          }\n          goto LABEL_60;\n        default:\n          a4 = (const char *)stderr;\n          __fprintf_chk(stderr, 1LL, \"puttygen: no such option `-%c'\\n\", v11);\n          v7 = v10;\n          v117 = 1;\nLABEL_60:\n          if ( !v10 )\n            goto LABEL_6;\n          v9 = v7[1];\n          ++v10;\n          if ( !v9 )\n            goto LABEL_6;\n          continue;\n      }\n      break;\n    }\n  }\n  if ( stream != -1 )\n  {\n    if ( (unsigned int)(v121 - 4) > 1 )\n      goto LABEL_16;\n    if ( v121 == 4 )\n      goto LABEL_151;\nLABEL_83:\n    v26 = 2LL;\n    v27 = (__int64 (__fastcall *)())sub_353E0;\n    v28 = &off_4F188;\n    v29 = \"EdDSA\";\n    goto LABEL_84;\n  }\n  if ( v121 != 4 )\n  {\n    if ( v121 != 5 )\n    {\n      stream = 2048;\n      goto LABEL_22;\n    }\n    stream = 255;\n    goto LABEL_83;\n  }\n  stream = 384;\nLABEL_151:\n  v26 = 3LL;\n  v28 = &off_4F198;\n  v29 = \"ECDSA\";\n  v27 = sub_35340;\nLABEL_84:\n  if ( !((unsigned __int8 (__fastcall *)(_QWORD, char *, struct tm *))v27)((unsigned int)stream, &v149, &tp) )\n  {\n    __fprintf_chk(stderr, 1LL, \"puttygen: invalid bits for %s, choose\", v29);\n    v119 = v6;\n    v30 = 0LL;\n    while ( v30 != v26 )\n    {\n      v31 = *((unsigned int *)v28 + v30);\n      if ( v30 )\n      {\n        v32 = \" or \";\n        if ( v26 - 1 != v30 )\n          v32 = \", \";\n      }\n      else\n      {\n        v32 = \" \";\n      }\n      ++v30;\n      __fprintf_chk(stderr, 1LL, \"%s%d\", v32);\n    }\n    v6 = v119;\n    fputc(10, stderr);\n    v117 = 1;\n  }\nLABEL_16:\n  if ( (unsigned int)(v121 - 1) <= 2 )\n  {\n    if ( stream <= 255 )\n    {\n      v38 = \"RSA\";\n      if ( v121 == 3 )\n        v38 = \"DSA\";\n      LODWORD(v4) = 1;\n      __fprintf_chk(stderr, 1LL, \"puttygen: cannot generate %s keys shorter than 256 bits\\n\", v38);\n      goto LABEL_24;\n    }\n    if ( stream <= 2047 )\n    {\n      v13 = \"RSA\";\n      if ( v121 == 3 )\n        v13 = \"DSA\";\n      __fprintf_chk(stderr, 1LL, \"puttygen: warning: %s keys shorter than %d bits are probably not secure\\n\", v13);\n    }\n  }\nLABEL_22:\n  if ( v117 )\n  {\n    LODWORD(v4) = 1;\nLABEL_24:\n    v120 = 0LL;\n    v5 = 0LL;\n    a3 = 0LL;\n    olda = 0LL;\n    v118 = 0LL;\n    v14 = 0LL;\n    endptr = 0LL;\n    goto LABEL_25;\n  }\n  if ( old )\n    goto LABEL_24;\n  if ( !v6 && !v121 )\n  {\n    LODWORD(v4) = 1;\n    sub_8D20(1LL);\n    goto LABEL_24;\n  }\n  v138 = v121 != 0;\n  if ( v6 && v121 != 0 )\n  {\n    LODWORD(v4) = 1;\n    fwrite(\"puttygen: cannot both load and generate a key\\n\", 1uLL, 0x2EuLL, stderr);\n    goto LABEL_24;\n  }\n  if ( v121 )\n  {\n    if ( (unsigned int)(v129 - 4) > 3 && v129 )\n    {\n      LODWORD(v4) = 1;\n      fwrite(\"puttygen: this would generate a new key but discard the private part\\n\", 1uLL, 0x45uLL, stderr);\n      goto LABEL_24;\n    }\n    goto LABEL_174;\n  }\n  if ( !v6 )\n  {\nLABEL_174:\n    endptr = 0LL;\n    v118 = 0LL;\n    v41 = v129 == 0;\n    v42 = v129 == 4;\n    v23 = 0;\n    v24 = 0;\n    v22 = 0LL;\n    goto LABEL_175;\n  }\n  endptr = (char **)sub_44540(v6);\n  if ( !strcmp(v6, \"-\") )\n    v118 = sub_38190(stdin, &tp);\n  else\n    v118 = sub_38100(endptr, &tp);\n  if ( !v118 )\n    goto LABEL_78;\n  v22 = v118 + 24;\n  v23 = sub_3B1E0(v118 + 24);\n  v24 = v23;\n  sub_113D0(*(_QWORD *)(v118 + 56), 0LL);\n  if ( v23 > 0xA )\nLABEL_442:\n    __assert_fail(\"false && \\\"Should never see these types on an input file\\\"\", \"cmdgen.c\", 0x301u, \"main\");\n  v25 = 1LL << v23;\n  if ( (1LL << v23) & 0x6E8 )\n  {\n    if ( v132 == 1 )\n    {\n      fwrite(\"puttygen: conversion from SSH-2 to SSH-1 keys not supported\\n\", 1uLL, 0x3CuLL, stderr);\n      goto LABEL_79;\n    }\n    v132 = 2;\n  }\n  else\n  {\n    if ( !(v25 & 0x104) )\n    {\n      if ( v25 & 3 )\n      {\n        sub_3B2A0(v23);\nLABEL_78:\n        __fprintf_chk(stderr, 1LL, \"puttygen: unable to load file `%s': %s\\n\", v6);\nLABEL_79:\n        LODWORD(v4) = 1;\n        v120 = 0LL;\n        v5 = 0LL;\n        a3 = 0LL;\n        olda = 0LL;\n        v14 = 0LL;\n        goto LABEL_25;\n      }\n      goto LABEL_442;\n    }\n    if ( v132 == 2 )\n    {\n      fwrite(\"puttygen: conversion from SSH-1 to SSH-2 keys not supported\\n\", 1uLL, 0x3CuLL, stderr);\n      goto LABEL_79;\n    }\n    v132 = 1;\n  }\n  v41 = v129 == 0;\n  if ( v129 == 0 && v23 - 2 <= 1 )\n  {\n    v41 = v129 == 0 && v23 - 2 <= 1;\n    goto LABEL_264;\n  }\n  v42 = v129 == 4;\n  if ( v23 == 5 && v129 == 4 )\n  {\n    v23 = 5;\n    v24 = 5;\n    goto LABEL_264;\n  }\n  if ( v23 == 6 && v129 == 5 )\n  {\n    v23 = 6;\n    goto LABEL_264;\n  }\n  if ( v23 != 7 || v129 != 6 )\n  {\nLABEL_175:\n    olda = 0LL;\n    if ( !newa )\n    {\n      v41 |= v42;\n      if ( v41 || (olda = 0LL, (unsigned int)(v129 - 5) <= 1) )\n      {\n        fwrite(\"puttygen: need to specify an output file\\n\", 1uLL, 0x29uLL, stderr);\n        olda = 0LL;\n        goto LABEL_238;\n      }\n    }\n    goto LABEL_176;\n  }\nLABEL_264:\n  olda = 0LL;\n  if ( !newa )\n  {\n    newa = v6;\n    olda = (char *)sub_46F20(v6, v116);\n  }\n  if ( (src == 0LL) & (unsigned __int8)(v141 ^ 1) && !v142 )\n  {\n    fwrite(\"puttygen: this command would perform no useful action\\n\", 1uLL, 0x36uLL, stderr);\n    goto LABEL_238;\n  }\nLABEL_176:\n  v43 = v24 - 8;\n  if ( (unsigned int)(v129 - 4) <= 2 || v41 || (unsigned int)(v24 - 5) <= 2 )\n  {\n    if ( v43 <= 2 )\n    {\n      fwrite(\"puttygen: cannot perform this action on a public-key-only input file\\n\", 1uLL, 0x45uLL, stderr);\nLABEL_238:\n      LODWORD(v4) = 1;\n      v120 = 0LL;\n      v5 = 0LL;\n      a3 = 0LL;\n      v14 = 0LL;\n      goto LABEL_25;\n    }\n    v143 = 1;\n  }\n  else\n  {\n    v143 = v43 > 2 && v129 == 7;\n  }\n  if ( v121 )\n  {\n    sub_41CD0(&v146);\n    v57 = 14LL;\n    v58 = &v146;\n    v59 = &tp;\n    while ( v57 )\n    {\n      v59->tm_sec = *(_DWORD *)v58;\n      v58 += 4;\n      v59 = (struct tm *)((char *)v59 + 4);\n      --v57;\n    }\n    if ( v121 == 3 )\n    {\n      strftime(&s, 0x1EuLL, \"dsa-key-%Y%m%d\", &tp);\n    }\n    else if ( v121 == 4 )\n    {\n      strftime(&s, 0x1EuLL, aEc, &tp);\n    }\n    else if ( v121 != 5 || stream != 255 )\n    {\n      if ( v121 == 5 )\n        strftime(&s, 0x1EuLL, \"eddsa-key-%Y%m%d\", &tp);\n      else\n        strftime(&s, 0x1EuLL, \"rsa-key-%Y%m%d\", &tp);\n    }\n    else\n    {\n      strftime(&s, 0x1EuLL, \"ed25519-key-%Y%m%d\", &tp);\n    }\n    v60 = (unsigned int)(stream >> 31);\n    LODWORD(v60) = stream % 8;\n    v61 = stream / 8;\n    a3 = (signed __int64 *)sub_44310(stream / 8, v137, v60);\n    if ( !a3 )\n    {\n      LODWORD(v4) = 1;\n      v5 = 0LL;\n      v14 = 0LL;\n      fwrite(\"puttygen: failed to collect entropy, could not generate key\\n\", 1uLL, 0x3CuLL, stderr);\n      v120 = 0LL;\n      goto LABEL_25;\n    }\n    sub_3B840(off_261480);\n    sub_3B620(a3, v61);\n    sub_47E30(a3, v61);\n    sub_114C0(a3);\n    v62 = ((__int64 (__fastcall *)(__int64 (__fastcall **)()))v136[1])(v136);\n    switch ( v121 )\n    {\n      case 3:\n        v98 = sub_11440(1LL, 48LL, 0LL);\n        v99 = v98 + 40;\n        sub_32400(v98, (unsigned int)stream, v62, &off_262010);\n        a3 = (signed __int64 *)sub_11440(1LL, 16LL, 0LL);\n        *a3 = v99;\n        goto LABEL_292;\n      case 4:\n        v97 = sub_11440(1LL, 32LL, 0LL);\n        sub_35450(v97, (unsigned int)stream);\n        break;\n      case 5:\n        v97 = sub_11440(1LL, 32LL, 0LL);\n        sub_354C0(v97, (unsigned int)stream);\n        break;\n      default:\n        v5 = (char **)sub_11440(1LL, 72LL, 0LL);\n        sub_3DA10(v5, (unsigned int)stream, v144, v62, &off_262010);\n        v5[7] = 0LL;\n        if ( v121 == 1 )\n        {\n          a3 = 0LL;\n          (*(void (__fastcall **)(__int64))(*(_QWORD *)v62 + 16LL))(v62);\n          v5[7] = (char *)sub_46EE0(&s);\n          goto LABEL_293;\n        }\n        a3 = (signed __int64 *)sub_11440(1LL, 16LL, 0LL);\n        *a3 = (signed __int64)(v5 + 8);\nLABEL_292:\n        v5 = 0LL;\n        (*(void (__fastcall **)(__int64))(*(_QWORD *)v62 + 16LL))(v62);\n        a3[1] = sub_46EE0(&s);\nLABEL_293:\n        v120 = 0LL;\n        goto LABEL_193;\n    }\n    a3 = (signed __int64 *)sub_11440(1LL, 16LL, 0LL);\n    *a3 = v97 + 24;\n    goto LABEL_292;\n  }\n  *(_QWORD *)&tp.tm_sec = 0LL;\n  if ( !v6 )\n    __assert_fail(\"infile != NULL\", \"cmdgen.c\", 0x399u, \"main\");\n  sub_114C0(v147);\n  v147 = 0LL;\n  if ( v23 == 2 )\n  {\n    v44 = sub_38290(v22, &v147);\n  }\n  else if ( v23 == 3 )\n  {\n    v44 = sub_3A1B0(v22, &v147);\n  }\n  else\n  {\n    v44 = sub_E280(endptr, v22, v23, &v147);\n  }\n  sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n  if ( !v44 || !v143 )\n  {\n    v124 = 0LL;\n    goto LABEL_273;\n  }\n  if ( !v124 )\n  {\n    v84 = sub_11AD0();\n    *(_BYTE *)v84 = 0;\n    *(_BYTE *)(v84 + 1) = 0;\n    v85 = v84;\n    *(_QWORD *)(v84 + 8) = sub_46EE0(\"SSH key passphrase\");\n    v86 = sub_46EE0(\"Enter passphrase to load key: \");\n    sub_11B30(v85, v86, 0LL);\n    v87 = sub_43F30(v85);\n    if ( v87 < 0 )\n      __assert_fail(\"ret >= 0\", \"cmdgen.c\", 0x3B6u, \"main\");\n    if ( !v87 )\n    {\n      v5 = 0LL;\n      a3 = 0LL;\n      sub_11C10(v85);\n      perror(\"puttygen: unable to read passphrase\");\n      goto LABEL_300;\n    }\n    v124 = (char *)sub_11C00(**(_QWORD **)(v85 + 56));\n    sub_11C10(v85);\nLABEL_273:\n    v45 = 1LL << v24;\n    if ( (1LL << v24) & 0x608 )\n    {\n      if ( !v143 )\n      {\n        sub_114C0(v147);\n        v147 = 0LL;\n        v55 = sub_47400();\n        v120 = v55;\n        if ( (unsigned __int8)sub_397E0(v22, &s1, v55 + 24, &v147, &tp) )\n        {\n          v56 = sub_38B20(s1);\n          if ( v56 )\n          {\n            (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(v56 + 96))(\n              v56,\n              *(_QWORD *)(v55 + 8),\n              *(_QWORD *)(v55 + 16));\n            a3 = 0LL;\n            sub_114C0(s1);\n            sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n            goto LABEL_192;\n          }\n          a3 = 0LL;\n          sub_114C0(s1);\n          sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n          if ( v120 )\n            goto LABEL_192;\n        }\n        else\n        {\n          sub_47420(v55);\n          sub_114C0(s1);\n          sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n        }\n        if ( !*(_QWORD *)&tp.tm_sec )\n        {\n          a3 = 0LL;\nLABEL_387:\n          v5 = 0LL;\n          *(_QWORD *)&tp.tm_sec = \"unknown error\";\n          goto LABEL_299;\n        }\n        v5 = 0LL;\n        a3 = 0LL;\nLABEL_299:\n        __fprintf_chk(stderr, 1LL, \"puttygen: error loading `%s': %s\\n\", v6);\nLABEL_300:\n        LODWORD(v4) = 1;\n        v120 = 0LL;\n        v14 = 0LL;\n        goto LABEL_25;\n      }\n      goto LABEL_189;\n    }\n    goto LABEL_294;\n  }\n  v45 = 1LL << v24;\n  if ( (1LL << v24) & 0x608 )\n  {\nLABEL_189:\n    a3 = (signed __int64 *)sub_38B40(v22, v124, &tp);\n    sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n    if ( a3 != (signed __int64 *)&unk_265640 && a3 )\n      goto LABEL_191;\n    v5 = 0LL;\n    if ( *(_QWORD *)&tp.tm_sec )\n      goto LABEL_299;\n    if ( a3 != (signed __int64 *)&unk_265640 )\n      goto LABEL_387;\n    goto LABEL_298;\n  }\nLABEL_294:\n  if ( !(v45 & 0x104) )\n  {\n    if ( !(v45 & 0xE0) )\n      __assert_fail(\"false && \\\"bad input key type\\\"\", \"cmdgen.c\", 0x41Au, \"main\");\n    a3 = (signed __int64 *)sub_ED40(v22, v23, v124, &tp);\n    if ( a3 )\n    {\n      if ( a3 != (signed __int64 *)&unk_265640 )\n      {\nLABEL_191:\n        v120 = 0LL;\nLABEL_192:\n        v5 = 0LL;\n        goto LABEL_193;\n      }\nLABEL_298:\n      a3 = (signed __int64 *)&unk_265640;\n      v5 = 0LL;\n      *(_QWORD *)&tp.tm_sec = \"wrong passphrase\";\n      goto LABEL_299;\n    }\n    v5 = 0LL;\n    if ( *(_QWORD *)&tp.tm_sec )\n      goto LABEL_299;\nLABEL_383:\n    *(_QWORD *)&tp.tm_sec = \"unknown error\";\n    goto LABEL_299;\n  }\n  v5 = (char **)sub_11440(1LL, 72LL, 0LL);\n  v75 = 18LL;\n  v76 = v5;\n  while ( v75 )\n  {\n    *(_DWORD *)v76 = 0;\n    v76 = (char **)((char *)v76 + 4);\n    --v75;\n  }\n  if ( v143 )\n  {\n    v81 = sub_38220(v22, v5, v124, &tp);\n  }\n  else\n  {\n    sub_114C0(v147);\n    v147 = 0LL;\n    v77 = sub_47400();\n    v78 = v77;\n    v79 = sub_38360(v22, v77 + 24, &v147, &tp);\n    v80 = *(_QWORD *)(v78 + 8);\n    v81 = v79;\n    v82 = *(_QWORD *)(v78 + 16);\n    v155 = 0LL;\n    v157 = 0;\n    v154 = v80;\n    v156 = v82;\n    v158 = &v154;\n    sub_3C3B0(&v154, v5, 0LL);\n    sub_47420(v78);\n    v83 = sub_46EE0(v147);\n    v5[3] = 0LL;\n    v5[7] = (char *)v83;\n    v5[4] = 0LL;\n    v5[5] = 0LL;\n    v5[6] = 0LL;\n  }\n  sub_113D0(*(_QWORD *)(v22 + 32), 0LL);\n  if ( v81 <= 0 )\n  {\n    a3 = 0LL;\n    if ( *(_QWORD *)&tp.tm_sec )\n      goto LABEL_299;\n    goto LABEL_383;\n  }\n  v120 = 0LL;\n  a3 = 0LL;\nLABEL_193:\n  if ( src )\n  {\n    if ( v132 == 1 )\n    {\n      if ( !v5 )\n        __assert_fail(\"ssh1key\", \"cmdgen.c\", 0x429u, \"main\");\n      sub_114C0(v5[7]);\n      v5[7] = (char *)sub_46EE0(src);\n    }\n    else\n    {\n      if ( !a3 )\n        __assert_fail(\"ssh2key\", \"cmdgen.c\", 0x42Du, \"main\");\n      sub_114C0(a3[1]);\n      a3[1] = sub_46EE0(src);\n    }\n  }\n  if ( !v141 && v124 )\n  {\n    if ( v128 )\n      goto LABEL_200;\n    v128 = (const char *)sub_46EE0(v124);\n  }\n  if ( v128 )\n  {\nLABEL_200:\n    if ( !*v128 )\n    {\n      sub_114C0(v128);\n      v128 = 0LL;\n    }\n    goto LABEL_202;\n  }\n  if ( v141 || v129 != 7 && v138 )\n  {\n    v63 = sub_11AD0();\n    *(_BYTE *)v63 = 0;\n    *(_BYTE *)(v63 + 1) = 0;\n    v64 = v63;\n    *(_QWORD *)(v63 + 8) = sub_46EE0(\"New SSH key passphrase\");\n    v65 = sub_46EE0(\"Enter passphrase to save key: \");\n    sub_11B30(v64, v65, 0LL);\n    v66 = sub_46EE0(\"Re-enter passphrase to verify: \");\n    sub_11B30(v64, v66, 0LL);\n    v67 = sub_43F30(v64);\n    if ( v67 < 0 )\n      __assert_fail(\"ret >= 0\", \"cmdgen.c\", 0x44Du, \"main\");\n    if ( !v67 )\n    {\n      sub_11C10(v64);\n      perror(\"puttygen: unable to read new passphrase\");\nLABEL_309:\n      if ( !v124 )\n      {\n        v15 = 1;\n        v14 = 0LL;\n        goto LABEL_29;\n      }\n      LODWORD(v4) = 1;\n      v14 = 0LL;\n      goto LABEL_26;\n    }\n    v100 = (const char *)sub_11BF0(*(_QWORD *)(*(_QWORD *)(v64 + 56) + 8LL));\n    v101 = (const char *)sub_11BF0(**(_QWORD **)(v64 + 56));\n    if ( strcmp(v101, v100) )\n    {\n      sub_11C10(v64);\n      fwrite(\"puttygen: passphrases do not match\\n\", 1uLL, 0x23uLL, stderr);\n      goto LABEL_309;\n    }\n    v103 = sub_11C00(**(_QWORD **)(v64 + 56));\n    sub_11C10(v64);\n    if ( v103 )\n    {\n      v128 = (const char *)v103;\n      goto LABEL_200;\n    }\n  }\nLABEL_202:\n  v46 = olda;\n  if ( !olda )\n  {\n    v46 = \"\";\n    if ( newa )\n      v46 = newa;\n  }\n  v14 = sub_44540(v46);\n  switch ( v129 )\n  {\n    case 1:\n    case 2:\n      if ( !newa )\n      {\n        v50 = stdout;\nLABEL_215:\n        if ( v132 == 1 )\n        {\n          sub_3ABF0(v50, v5);\nLABEL_220:\n          if ( newa )\n            fclose(v50);\n          goto LABEL_25;\n        }\n        if ( v120 )\n        {\n          v51 = *(unsigned int *)(v120 + 16);\n          v52 = *(_QWORD *)v120;\n          if ( !a3 )\n          {\n            v53 = v147;\n            goto LABEL_219;\n          }\n        }\n        else\n        {\n          if ( !a3 )\n            __assert_fail(\"ssh2key\", \"cmdgen.c\", 0x49Cu, \"main\");\n          v120 = sub_47400();\n          (*(void (__fastcall **)(signed __int64, __int64))(*(_QWORD *)*a3 + 56LL))(*a3, v120 + 24);\n          v104 = *(unsigned int *)(v120 + 16);\n          v105 = *(_QWORD *)v120;\n        }\n        v53 = (char *)a3[1];\nLABEL_219:\n        sub_3AC80(v50, v53);\n        goto LABEL_220;\n      }\n      v50 = (FILE *)sub_448E0(v14, \"w\", 0LL);\n      if ( v50 )\n        goto LABEL_215;\n      goto LABEL_486;\n    case 3:\n      if ( v132 == 1 )\n      {\n        if ( !v5 )\n          __assert_fail(\"ssh1key\", \"cmdgen.c\", 0x4B3u, \"main\");\n        v47 = sub_3C970(v5);\n      }\n      else if ( a3 )\n      {\n        v47 = sub_3B120(*a3, v135);\n      }\n      else\n      {\n        if ( !v120 )\n          __assert_fail(\"ssh2blob\", \"cmdgen.c\", 0x4B9u, \"main\");\n        v47 = sub_3AEA0(*(_QWORD *)(v120 + 8), *(_QWORD *)(v120 + 16), v135);\n      }\n      if ( !newa )\n      {\n        __fprintf_chk(stdout, 1LL, \"%s\\n\", v47);\n        goto LABEL_212;\n      }\n      v48 = sub_448E0(v14, \"w\", 0LL);\n      if ( v48 )\n      {\n        v49 = (FILE *)v48;\n        __fprintf_chk(v48, 1LL, \"%s\\n\", v47);\n        fclose(v49);\nLABEL_212:\n        sub_114C0(v47);\n        goto LABEL_25;\n      }\n      goto LABEL_486;\n    case 4:\n    case 5:\n    case 6:\n      if ( v132 != 2 )\n        __assert_fail(\"sshver == 2\", \"cmdgen.c\", 0x4D3u, \"main\");\n      if ( !a3 )\n        __assert_fail(\"ssh2key\", \"cmdgen.c\", 0x4D4u, \"main\");\n      sub_3B810();\n      if ( v129 == 5 )\n        v54 = 6LL;\n      else\n        v54 = 3 * (unsigned int)(v129 == 6) + 4;\n      if ( (unsigned __int8)sub_F850(v14, v54, a3, v128) )\n      {\n        if ( olda )\n          v4 = (unsigned __int8)(sub_6090(olda, newa) ^ 1);\n      }\n      else\n      {\n        LODWORD(v4) = 1;\n        fwrite(\"puttygen: unable to export key\\n\", 1uLL, 0x1FuLL, stderr);\n      }\n      goto LABEL_25;\n    case 7:\n      if ( v132 != 1 )\n      {\n        if ( a3 )\n        {\n          v88 = (*(__int64 (**)(void))(*(_QWORD *)*a3 + 88LL))();\n          goto LABEL_366;\n        }\n        if ( !v120 )\n          __assert_fail(\"ssh2blob\", \"cmdgen.c\", 0x4F8u, \"main\");\n        v106 = *(_QWORD *)(v120 + 16);\n        v107 = *(_QWORD *)(v120 + 8);\n        v158 = &v154;\n        v155 = 0LL;\n        v157 = 0;\n        v154 = v107;\n        v156 = v106;\n        v108 = (void *)sub_111C0();\n        v110 = v109;\n        v111 = v109;\n        v112 = (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))sub_38870(v108, v109);\n        if ( v112 )\n        {\n          v113 = (*v112)(v112, *(_QWORD *)(v120 + 8), *(_QWORD *)(v120 + 16));\n          v114 = v113;\n          if ( v113 )\n          {\n            v88 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v113 + 88LL))(v113);\n            (*(void (__fastcall **)(__int64))(*(_QWORD *)v114 + 24LL))(v114);\n            goto LABEL_366;\n          }\n          fwrite(\"puttygen: unable to decode public key\\n\", 1uLL, 0x26uLL, stderr);\n        }\n        else\n        {\n          v115 = sub_470B0(v111, v110);\n          __fprintf_chk(\n            stderr,\n            1LL,\n            \"puttygen: cannot extract key components from public key of unknown type '%.*s'\\n\",\n            v115);\n        }\n        LODWORD(v4) = 1;\n        goto LABEL_25;\n      }\n      if ( !v5 )\n        __assert_fail(\"ssh1key\", \"cmdgen.c\", 0x4F2u, \"main\");\n      v88 = sub_3C480(v5);\nLABEL_366:\n      if ( newa )\n      {\n        v89 = (FILE *)sub_448E0(v14, \"w\", 0LL);\n        if ( !v89 )\n        {\nLABEL_486:\n          fwrite(\"unable to open output file\\n\", 1uLL, 0x1BuLL, stderr);\n          exit(1);\n        }\n      }\n      else\n      {\n        v89 = stdout;\n      }\n      v130 = a3;\n      v133 = v5;\n      streama = (FILE *)v14;\n      v90 = (unsigned __int64 *)v88;\n      for ( i = 0LL; *v90 > i; ++i )\n      {\n        v93 = 24 * i;\n        v94 = 24 * i + v90[2];\n        if ( *(_BYTE *)(v94 + 8) )\n        {\n          v92 = (const char *)sub_13560(*(_QWORD *)(v94 + 16));\n          __fprintf_chk(v89, 1LL, \"%s=0x%s\\n\", *(_QWORD *)(v90[2] + v93));\n          sub_47E30(v92, strlen(v92));\n          sub_114C0(v92);\n        }\n        else\n        {\n          __fprintf_chk(v89, 1LL, \"%s=\\\"\", *(_QWORD *)v94);\n          v95 = *(_QWORD *)(v90[2] + v93 + 16);\n          sub_48270(v89);\n          fwrite(\"\\\"\\n\", 1uLL, 2uLL, v89);\n        }\n      }\n      v96 = v90;\n      v14 = (__int64)streama;\n      v5 = v133;\n      a3 = v130;\n      if ( newa )\n        fclose(v89);\n      sub_3B4E0(v96);\n      while ( 1 )\n      {\nLABEL_25:\n        v15 = v4;\n        if ( v124 )\n        {\nLABEL_26:\n          sub_47E30(v124, strlen(v124));\n          v15 = v4;\n          sub_114C0(v124);\n        }\n        if ( v128 )\n        {\n          sub_47E30(v128, strlen(v128));\n          sub_114C0(v128);\n        }\nLABEL_29:\n        if ( v5 )\n        {\n          sub_3CE80(v5);\n          sub_114C0(v5);\n        }\n        if ( a3 && a3 != (signed __int64 *)&unk_265640 )\n        {\n          sub_114C0(a3[1]);\n          if ( *a3 )\n            (*(void (**)(void))(*(_QWORD *)*a3 + 24LL))();\n          sub_114C0(a3);\n        }\n        if ( v120 )\n          sub_47420(v120);\nLABEL_38:\n        sub_114C0(v147);\n        if ( endptr )\n          sub_445D0(endptr);\n        if ( v118 )\n          sub_37FC0(v118);\n        if ( v14 )\n          sub_445D0(v14);\n        sub_114C0(olda);\n        result = v15;\n        if ( __readfsqword(0x28u) == v160 )\n          break;\nLABEL_422:\n        LODWORD(v4) = 1;\n        fwrite(\"puttygen: unable to save SSH-2 private key\\n\", 1uLL, 0x2BuLL, stderr);\n      }\n      return result;\n    default:\n      sub_3B810();\n      if ( v132 == 1 )\n      {\n        if ( !v5 )\n          __assert_fail(\"ssh1key\", \"cmdgen.c\", 0x476u, \"main\");\n        if ( !(unsigned __int8)sub_387E0(v14, v5, v128) )\n        {\n          LODWORD(v4) = 1;\n          fwrite(\"puttygen: unable to save SSH-1 private key\\n\", 1uLL, 0x2BuLL, stderr);\n          goto LABEL_25;\n        }\n      }\n      else\n      {\n        if ( !a3 )\n          __assert_fail(\"ssh2key\", \"cmdgen.c\", 0x47Du, \"main\");\n        if ( !(unsigned __int8)sub_3AAD0(v14, a3, v128, &v150) )\n          goto LABEL_422;\n      }\n      if ( olda )\n        v4 = (unsigned __int8)(sub_6090(olda, newa) ^ 1);\n      goto LABEL_25;\n  }\n}\n", 
            "funcStartAddr": "0x6210L", 
            "funcEndAddr": "0x8952L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_8990())(void)\n{\n  __int64 (**result)(void); // rax\n\n  result = (__int64 (**)(void))&stdout;\n  if ( &stdout != &stdout )\n  {\n    result = &ITM_deregisterTMCloneTable;\n    if ( &ITM_deregisterTMCloneTable )\n      result = (__int64 (**)(void))ITM_deregisterTMCloneTable();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8990L", 
            "funcEndAddr": "0x89c2L", 
            "funcName": "sub_8990"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_89D0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x89d0L", 
            "funcEndAddr": "0x8a12L", 
            "funcName": "sub_89D0"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_8A20())(void)\n{\n  __int64 (**result)(void); // rax\n\n  if ( !byte_262048 )\n  {\n    if ( &__cxa_finalize )\n      _cxa_finalize(off_262008);\n    result = sub_8990();\n    byte_262048 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8a20L", 
            "funcEndAddr": "0x8a5aL", 
            "funcName": "sub_8A20"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_8A60()\n{\n  return sub_89D0();\n}\n", 
            "funcStartAddr": "0x8a60L", 
            "funcEndAddr": "0x8a6aL", 
            "funcName": "sub_8A60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_8A70()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x8a70L", 
            "funcEndAddr": "0x8a73L", 
            "funcName": "sub_8A70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_8A80()\n{\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x8a80L", 
            "funcEndAddr": "0x8a86L", 
            "funcName": "sub_8A80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_8A90(__int64 a1, int a2)\n{\n  dword_262050 = 0;\n  byte_262054 = a2 == 0;\n}\n", 
            "funcStartAddr": "0x8a90L", 
            "funcEndAddr": "0x8aa4L", 
            "funcName": "sub_8A90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8AB0(double a1)\n{\n  __int64 result; // rax\n  unsigned int v2; // ebx\n\n  result = (unsigned int)(signed int)(a1 * 64.0 + 0.5);\n  if ( (unsigned int)result > dword_262050 )\n  {\n    v2 = result;\n    do\n    {\n      fputc(43, stream);\n      result = (unsigned int)++dword_262050;\n    }\n    while ( dword_262050 < v2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8ab0L", 
            "funcEndAddr": "0x8b02L", 
            "funcName": "sub_8AB0"
        }, 
        {
            "decompiledFuncCode": "int sub_8B10()\n{\n  int result; // eax\n\n  if ( byte_262054 && (unsigned int)dword_262050 <= 0x3F )\n  {\n    do\n    {\n      fputc(43, stream);\n      result = ++dword_262050;\n    }\n    while ( (unsigned int)dword_262050 <= 0x3F );\n  }\n  if ( stream )\n  {\n    fputc(10, stream);\n    result = fflush(stream);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8b10L", 
            "funcEndAddr": "0x8b85L", 
            "funcName": "sub_8B10"
        }, 
        {
            "decompiledFuncCode": "int sub_8B90()\n{\n  int result; // eax\n\n  if ( stream )\n  {\n    fputc(43, stream);\n    result = fflush(stream);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8b90L", 
            "funcEndAddr": "0x8bc2L", 
            "funcName": "sub_8B90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8BD0(const char *a1)\n{\n  FILE *v1; // rax\n  FILE *v2; // rbp\n  const char *v3; // rax\n  __int64 v4; // rbx\n  int *v6; // rax\n  int *v7; // rax\n\n  v1 = fopen(a1, \"r\");\n  if ( v1 )\n  {\n    v2 = v1;\n    v3 = (const char *)sub_47610(v1);\n    v4 = (__int64)v3;\n    if ( v3 )\n    {\n      v3[strcspn(v3, \"\\r\\n\")] = 0;\n    }\n    else if ( ferror(v2) )\n    {\n      v6 = __errno_location();\n      strerror(*v6);\n      __fprintf_chk(stderr, 1LL, \"puttygen: error reading from %s: %s\\n\", a1);\n    }\n    else\n    {\n      v4 = sub_46EE0(\"\");\n    }\n    fclose(v2);\n  }\n  else\n  {\n    v7 = __errno_location();\n    v4 = 0LL;\n    strerror(*v7);\n    __fprintf_chk(stderr, 1LL, \"puttygen: cannot open %s: %s\\n\", a1);\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x8bd0L", 
            "funcEndAddr": "0x8cb3L", 
            "funcName": "sub_8BD0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_8CC0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x8cc0L", 
            "funcEndAddr": "0x8cc3L", 
            "funcName": "sub_8CC0"
        }, 
        {
            "decompiledFuncCode": "void nullsub_1()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x8cd0L", 
            "funcEndAddr": "0x8cd2L", 
            "funcName": "nullsub_1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_8CE0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_11FA0(\"\\n\");\n  __printf_chk(1LL, \"puttygen: %s\\n%s\\n\", \"Release 0.76\", v0);\n  return sub_114C0(v0);\n}\n", 
            "funcStartAddr": "0x8ce0L", 
            "funcEndAddr": "0x8d16L", 
            "funcName": "sub_8CE0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_8D20(char a1)\n{\n  if ( !a1 )\n    return fwrite(\n             \"Usage: puttygen ( keyfile | -t type [ -b bits ] )\\n\"\n             \"                [ -C comment ] [ -P ] [ -q ]\\n\"\n             \"                [ -o output-keyfile ] [ -O type | -l | -L | -p ]\\n\",\n             1uLL,\n             0xA0uLL,\n             stdout);\n  fwrite(\n    \"Usage: puttygen ( keyfile | -t type [ -b bits ] )\\n\"\n    \"                [ -C comment ] [ -P ] [ -q ]\\n\"\n    \"                [ -o output-keyfile ] [ -O type | -l | -L | -p ]\\n\",\n    1uLL,\n    0xA0uLL,\n    stderr);\n  return fwrite(\"Use \\\"puttygen --help\\\" for more detail.\\n\", 1uLL, 0x27uLL, stderr);\n}\n", 
            "funcStartAddr": "0x8d20L", 
            "funcEndAddr": "0x8d8dL", 
            "funcName": "sub_8D20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_8D90(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __printf_chk(1LL, \"PuTTYgen: key generator and converter for the PuTTY tools\\n%s\\n\", \"Release 0.76\", a4);\n  sub_8D20(0);\n  return puts(\n           \"  -t    specify key type when generating:\\n\"\n           \"           eddsa, ecdsa, rsa, dsa, rsa1   use with -b\\n\"\n           \"           ed25519, ed448                 special cases of eddsa\\n\"\n           \"  -b    specify number of bits when generating key\\n\"\n           \"  -C    change or specify key comment\\n\"\n           \"  -P    change key passphrase\\n\"\n           \"  -q    quiet: do not display progress bar\\n\"\n           \"  -O    specify output type:\\n\"\n           \"           private             output PuTTY private key format\\n\"\n           \"           private-openssh     export OpenSSH private key\\n\"\n           \"           private-openssh-new export OpenSSH private key (force new format)\\n\"\n           \"           private-sshcom      export ssh.com private key\\n\"\n           \"           public              RFC 4716 / ssh.com public key\\n\"\n           \"           public-openssh      OpenSSH public key\\n\"\n           \"           fingerprint         output the key fingerprint\\n\"\n           \"           text                output the key components as 'name=0x####'\\n\"\n           \"  -o    specify output file\\n\"\n           \"  -l    equivalent to `-O fingerprint'\\n\"\n           \"  -L    equivalent to `-O public-openssh'\\n\"\n           \"  -p    equivalent to `-O public'\\n\"\n           \"  --dump   equivalent to `-O text'\\n\"\n           \"  --reencrypt          load a key and save it with fresh encryption\\n\"\n           \"  --old-passphrase file\\n\"\n           \"        specify file containing old key passphrase\\n\"\n           \"  --new-passphrase file\\n\"\n           \"        specify file containing new key passphrase\\n\"\n           \"  --random-device device\\n\"\n           \"        specify device to read entropy from (e.g. /dev/urandom)\\n\"\n           \"  --primes <type>      select prime-generation method:\\n\"\n           \"        probable       conventional probabilistic prime finding\\n\"\n           \"        proven         numbers that have been proven to be prime\\n\"\n           \"        proven-even    also try harder for an even distribution\\n\"\n           \"  --strong-rsa         use \\\"strong\\\" primes as RSA key factors\\n\"\n           \"  --ppk-param <key>=<value>[,<key>=<value>,...]\\n\"\n           \"        specify parameters when writing PuTTY private key file format:\\n\"\n           \"            version       PPK format version (min 2, max 3, default 3)\\n\"\n           \"            kdf           key derivation function (argon2id, argon2i, argon2d)\\n\"\n           \"            memory        Kbyte of memory to use in passphrase hash\\n\"\n           \"                             (default 8192)\\n\"\n           \"            time          approx milliseconds to hash for (default 100)\\n\"\n           \"            passes        number of hash passes to run (alternative to 'time')\\n\"\n           \"            parallelism   number of parallelisable threads in the hash function\\n\"\n           \"                             (default 1)\");\n}\n", 
            "funcStartAddr": "0x8d90L", 
            "funcEndAddr": "0x8dc5L", 
            "funcName": "sub_8D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8DD0(signed int *a1)\n{\n  __int64 v1; // rax\n  int v2; // eax\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( dword_4A5E0[v1] != 3 )\n  {\n    v2 = dword_4A2A0[v1];\n    if ( v2 != 3 )\n      goto LABEL_3;\nLABEL_8:\n    sub_114C0(*((_QWORD *)a1 + 2));\n    return sub_114C0(a1);\n  }\n  sub_114C0(*((_QWORD *)a1 + 1));\n  v2 = dword_4A2A0[*a1];\n  if ( v2 == 3 )\n    goto LABEL_8;\nLABEL_3:\n  if ( v2 == 4 )\n  {\n    sub_445D0(*((_QWORD *)a1 + 2));\n    result = sub_114C0(a1);\n  }\n  else\n  {\n    if ( v2 == 5 )\n      sub_449A0(*((_QWORD *)a1 + 2));\n    result = sub_114C0(a1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8dd0L", 
            "funcEndAddr": "0x8e6aL", 
            "funcName": "sub_8DD0"
        }, 
        {
            "decompiledFuncCode": "signed int *__fastcall sub_8E70(_QWORD *a1)\n{\n  signed int *result; // rax\n\n  while ( 1 )\n  {\n    result = (signed int *)sub_43230(*a1, 0LL);\n    if ( !result )\n      break;\n    sub_8DD0(result);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8e70L", 
            "funcEndAddr": "0x8e99L", 
            "funcName": "sub_8E70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8F80(_QWORD *a1, __int64 a2)\n{\n  __int64 result; // rax\n  signed int *v3; // rbp\n\n  result = sub_42E00(*a1);\n  if ( result )\n  {\n    v3 = (signed int *)result;\n    if ( a2 != result )\n    {\n      sub_43270(*a1, result);\n      sub_8DD0(v3);\n      result = sub_42E00(*a1);\n      if ( a2 != result )\n        __assert_fail(aOldentry, \"conf.c\", 0xECu, \"conf_insert\");\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8f80L", 
            "funcEndAddr": "0x8fe8L", 
            "funcName": "sub_8F80"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_8FF0()\n{\n  _QWORD *v0; // rbx\n\n  v0 = (_QWORD *)sub_11440(1LL, 8LL, 0LL);\n  *v0 = sub_42D90(sub_8EA0, 8LL);\n  return v0;\n}\n", 
            "funcStartAddr": "0x8ff0L", 
            "funcEndAddr": "0x9019L", 
            "funcName": "sub_8FF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9020(_QWORD *a1)\n{\n  sub_8E70(a1);\n  sub_42DC0(*a1);\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x9020L", 
            "funcEndAddr": "0x903aL", 
            "funcName": "sub_9020"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9040(_QWORD *a1, _QWORD *a2)\n{\n  unsigned int v2; // ebx\n  _QWORD *v3; // r13\n  __int64 result; // rax\n  char **v5; // r15\n  __int64 v6; // rsi\n  __int64 v7; // rax\n  int v8; // eax\n  __int64 v9; // rax\n\n  v2 = 0;\n  v3 = a2;\n  sub_8E70(a1);\n  while ( 1 )\n  {\n    result = sub_42E40(*v3, v2);\n    v5 = (char **)result;\n    if ( !result )\n      return result;\n    v6 = sub_11440(1LL, 24LL, 0LL);\n    v7 = *(signed int *)v5;\n    *(_DWORD *)v6 = v7;\n    v8 = dword_4A5E0[v7];\n    if ( v8 == 2 )\n    {\n      *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);\n    }\n    else if ( v8 == 3 )\n    {\n      *(_QWORD *)(v6 + 8) = sub_46EE0(v5[1]);\n    }\n    v9 = (unsigned int)dword_4A2A0[*(signed int *)v5];\n    switch ( (signed __int64)*(signed int *)v5 )\n    {\n      case 0LL:\n      case 9LL:\n      case 10LL:\n      case 14LL:\n      case 16LL:\n      case 17LL:\n      case 18LL:\n      case 20LL:\n      case 21LL:\n      case 28LL:\n      case 50LL:\n      case 52LL:\n      case 53LL:\n      case 54LL:\n      case 55LL:\n      case 56LL:\n      case 58LL:\n      case 61LL:\n      case 67LL:\n      case 103LL:\n      case 137LL:\n      case 138LL:\n      case 160LL:\n      case 161LL:\n      case 162LL:\n      case 164LL:\n      case 169LL:\n      case 174LL:\n      case 192LL:\n      case 202LL:\n      case 262LL:\n      case 263LL:\n      case 382LL:\n      case 400LL:\n        *(_QWORD *)(v6 + 16) = sub_46EE0(v5[2]);\n        break;\n      case 1LL:\n      case 2LL:\n      case 3LL:\n      case 4LL:\n      case 6LL:\n      case 11LL:\n      case 13LL:\n      case 15LL:\n      case 19LL:\n      case 24LL:\n      case 25LL:\n      case 27LL:\n      case 32LL:\n      case 34LL:\n      case 44LL:\n      case 45LL:\n      case 51LL:\n      case 62LL:\n      case 63LL:\n      case 64LL:\n      case 65LL:\n      case 66LL:\n      case 68LL:\n      case 73LL:\n      case 83LL:\n      case 92LL:\n      case 93LL:\n      case 104LL:\n      case 108LL:\n      case 110LL:\n      case 111LL:\n      case 113LL:\n      case 114LL:\n      case 115LL:\n      case 119LL:\n      case 123LL:\n      case 124LL:\n      case 126LL:\n      case 128LL:\n      case 129LL:\n      case 136LL:\n      case 146LL:\n      case 147LL:\n      case 148LL:\n      case 155LL:\n      case 157LL:\n      case 158LL:\n      case 159LL:\n      case 163LL:\n      case 170LL:\n      case 175LL:\n      case 176LL:\n      case 177LL:\n      case 178LL:\n      case 179LL:\n      case 180LL:\n      case 181LL:\n      case 182LL:\n      case 183LL:\n      case 184LL:\n      case 185LL:\n      case 186LL:\n      case 187LL:\n      case 200LL:\n      case 232LL:\n      case 233LL:\n      case 240LL:\n      case 253LL:\n      case 355LL:\n      case 363LL:\n        *(_DWORD *)(v6 + 16) = *((_DWORD *)v5 + 4);\n        break;\n      case 5LL:\n      case 7LL:\n      case 8LL:\n      case 12LL:\n      case 22LL:\n      case 23LL:\n      case 26LL:\n      case 29LL:\n      case 30LL:\n      case 31LL:\n      case 35LL:\n      case 36LL:\n      case 37LL:\n      case 38LL:\n      case 39LL:\n      case 40LL:\n      case 41LL:\n      case 42LL:\n      case 43LL:\n      case 47LL:\n      case 48LL:\n      case 49LL:\n      case 57LL:\n      case 59LL:\n      case 60LL:\n      case 69LL:\n      case 70LL:\n      case 71LL:\n      case 72LL:\n      case 74LL:\n      case 75LL:\n      case 76LL:\n      case 77LL:\n      case 78LL:\n      case 79LL:\n      case 80LL:\n      case 81LL:\n      case 82LL:\n      case 84LL:\n      case 85LL:\n      case 86LL:\n      case 87LL:\n      case 88LL:\n      case 89LL:\n      case 90LL:\n      case 91LL:\n      case 94LL:\n      case 95LL:\n      case 96LL:\n      case 97LL:\n      case 98LL:\n      case 99LL:\n      case 100LL:\n      case 101LL:\n      case 102LL:\n      case 105LL:\n      case 106LL:\n      case 107LL:\n      case 109LL:\n      case 112LL:\n      case 117LL:\n      case 118LL:\n      case 120LL:\n      case 121LL:\n      case 122LL:\n      case 130LL:\n      case 131LL:\n      case 132LL:\n      case 133LL:\n      case 134LL:\n      case 135LL:\n      case 139LL:\n      case 140LL:\n      case 141LL:\n      case 142LL:\n      case 143LL:\n      case 144LL:\n      case 145LL:\n      case 149LL:\n      case 150LL:\n      case 151LL:\n      case 152LL:\n      case 153LL:\n      case 154LL:\n      case 156LL:\n      case 165LL:\n      case 166LL:\n      case 167LL:\n      case 168LL:\n      case 172LL:\n      case 173LL:\n      case 188LL:\n      case 189LL:\n      case 190LL:\n      case 191LL:\n      case 193LL:\n      case 194LL:\n      case 195LL:\n      case 196LL:\n      case 201LL:\n        *(_BYTE *)(v6 + 16) = *((_BYTE *)v5 + 16);\n        break;\n      case 33LL:\n      case 46LL:\n      case 116LL:\n      case 127LL:\n      case 171LL:\n        *(_QWORD *)(v6 + 16) = sub_44580(v5[2]);\n        break;\n      case 125LL:\n      case 197LL:\n      case 198LL:\n      case 199LL:\n        *(_QWORD *)(v6 + 16) = sub_44990(v5[2]);\n        break;\n      default:\n        break;\n    }\n    ++v2;\n    sub_42E00(*a1);\n  }\n}\n", 
            "funcStartAddr": "0x9040L", 
            "funcEndAddr": "0x919fL", 
            "funcName": "sub_9040"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_91A0(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  v1 = sub_8FF0();\n  sub_9040(v1, a1);\n  return v1;\n}\n", 
            "funcStartAddr": "0x91a0L", 
            "funcEndAddr": "0x91c6L", 
            "funcName": "sub_91A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_91D0(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] )\n    __assert_fail(\"subkeytypes[primary] == TYPE_NONE\", \"conf.c\", 0x10Eu, \"conf_get_bool\");\n  if ( dword_4A2A0[a2] != 1 )\n    __assert_fail(\"valuetypes[primary] == TYPE_BOOL\", \"conf.c\", 0x10Fu, \"conf_get_bool\");\n  v2 = *a1;\n  v5 = a2;\n  v3 = sub_43200(v2, &v5, 0LL);\n  if ( !v3 || (result = *(unsigned __int8 *)(v3 + 16), __readfsqword(0x28u) != v6) )\n    __assert_fail(\"entry\", \"conf.c\", 0x112u, \"conf_get_bool\");\n  return result;\n}\n", 
            "funcStartAddr": "0x91d0L", 
            "funcEndAddr": "0x9292L", 
            "funcName": "sub_91D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_92A0(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] )\n    __assert_fail(\"subkeytypes[primary] == TYPE_NONE\", \"conf.c\", 0x11Bu, \"conf_get_int\");\n  if ( dword_4A2A0[a2] != 2 )\n    __assert_fail(\"valuetypes[primary] == TYPE_INT\", \"conf.c\", 0x11Cu, \"conf_get_int\");\n  v2 = *a1;\n  v5 = a2;\n  v3 = sub_43200(v2, &v5, 0LL);\n  if ( !v3 || (result = *(unsigned int *)(v3 + 16), __readfsqword(0x28u) != v6) )\n    __assert_fail(\"entry\", \"conf.c\", 0x11Fu, \"conf_get_int\");\n  return result;\n}\n", 
            "funcStartAddr": "0x92a0L", 
            "funcEndAddr": "0x9361L", 
            "funcName": "sub_92A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9370(__int64 *a1, int a2, int a3)\n{\n  __int64 v3; // rdi\n  __int64 v4; // rax\n  __int64 result; // rax\n  int v6; // [rsp+0h] [rbp-28h]\n  int v7; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] != 2 )\n    __assert_fail(\"subkeytypes[primary] == TYPE_INT\", \"conf.c\", 0x128u, \"conf_get_int_int\");\n  if ( dword_4A2A0[a2] != 2 )\n    __assert_fail(\"valuetypes[primary] == TYPE_INT\", \"conf.c\", 0x129u, \"conf_get_int_int\");\n  v3 = *a1;\n  v6 = a2;\n  v7 = a3;\n  v4 = sub_43200(v3, &v6, 0LL);\n  if ( !v4 || (result = *(unsigned int *)(v4 + 16), __readfsqword(0x28u) != v8) )\n    __assert_fail(\"entry\", \"conf.c\", 0x12Du, \"conf_get_int_int\");\n  return result;\n}\n", 
            "funcStartAddr": "0x9370L", 
            "funcEndAddr": "0x9434L", 
            "funcName": "sub_9370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9440(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] )\n    __assert_fail(\"subkeytypes[primary] == TYPE_NONE\", \"conf.c\", 0x136u, \"conf_get_str\");\n  if ( dword_4A2A0[a2] != 3 )\n    __assert_fail(\"valuetypes[primary] == TYPE_STR\", \"conf.c\", 0x137u, \"conf_get_str\");\n  v2 = *a1;\n  v5 = a2;\n  v3 = sub_43200(v2, &v5, 0LL);\n  if ( !v3 || (result = *(_QWORD *)(v3 + 16), __readfsqword(0x28u) != v6) )\n    __assert_fail(\"entry\", \"conf.c\", 0x13Au, \"conf_get_str\");\n  return result;\n}\n", 
            "funcStartAddr": "0x9440L", 
            "funcEndAddr": "0x9502L", 
            "funcName": "sub_9440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9510(__int64 *a1, int a2, __int64 a3)\n{\n  __int64 v3; // rdi\n  __int64 v4; // rax\n  __int64 result; // rax\n  int v6; // [rsp+0h] [rbp-28h]\n  __int64 v7; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] != 3 )\n    __assert_fail(\"subkeytypes[primary] == TYPE_STR\", \"conf.c\", 0x143u, \"conf_get_str_str_opt\");\n  if ( dword_4A2A0[a2] != 3 )\n    __assert_fail(\"valuetypes[primary] == TYPE_STR\", \"conf.c\", 0x144u, \"conf_get_str_str_opt\");\n  v3 = *a1;\n  v6 = a2;\n  v7 = a3;\n  v4 = sub_43200(v3, &v6, 0LL);\n  if ( v4 )\n    result = *(_QWORD *)(v4 + 16);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x9510L", 
            "funcEndAddr": "0x95bfL", 
            "funcName": "sub_9510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_95C0(__int64 *a1, int a2, __int64 a3)\n{\n  __int64 result; // rax\n\n  result = sub_9510(a1, a2, a3);\n  if ( !result )\n    __assert_fail(\"ret\", \"conf.c\", 0x14Eu, \"conf_get_str_str\");\n  return result;\n}\n", 
            "funcStartAddr": "0x95c0L", 
            "funcEndAddr": "0x95f2L", 
            "funcName": "sub_95C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9600(__int64 *a1, int a2, char *a3, _QWORD *a4)\n{\n  _QWORD *v4; // rbp\n  __int64 v5; // rdi\n  __int64 v6; // rax\n  __int64 result; // rax\n  int v8; // [rsp+0h] [rbp-38h]\n  char *v9; // [rsp+8h] [rbp-30h]\n  unsigned __int64 v10; // [rsp+18h] [rbp-20h]\n\n  v4 = a4;\n  v10 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] != 3 )\n    __assert_fail(\"subkeytypes[primary] == TYPE_STR\", \"conf.c\", 0x158u, \"conf_get_str_strs\");\n  if ( dword_4A2A0[a2] != 3\n    || ((v8 = a2, v5 = *a1, !a3) ? (v9 = \"\", v6 = sub_43210(v5, &v8, sub_8F10, 4LL)) : (v9 = a3,\n                                                                                        v6 = sub_43210(\n                                                                                               v5,\n                                                                                               &v8,\n                                                                                               0LL,\n                                                                                               3LL)),\n        !v6 || *(_DWORD *)v6 != a2 ? (result = 0LL) : (*v4 = *(_QWORD *)(v6 + 8), result = *(_QWORD *)(v6 + 16)),\n        __readfsqword(0x28u) != v10) )\n  {\n    __assert_fail(\"valuetypes[primary] == TYPE_STR\", \"conf.c\", 0x159u, \"conf_get_str_strs\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x9600L", 
            "funcEndAddr": "0x96ffL", 
            "funcName": "sub_9600"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9800(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] )\n    __assert_fail(\"subkeytypes[primary] == TYPE_NONE\", \"conf.c\", 0x181u, \"conf_get_filename\");\n  if ( dword_4A2A0[a2] != 4 )\n    __assert_fail(\"valuetypes[primary] == TYPE_FILENAME\", \"conf.c\", 0x182u, \"conf_get_filename\");\n  v2 = *a1;\n  v5 = a2;\n  v3 = sub_43200(v2, &v5, 0LL);\n  if ( !v3 || (result = *(_QWORD *)(v3 + 16), __readfsqword(0x28u) != v6) )\n    __assert_fail(\"entry\", \"conf.c\", 0x185u, \"conf_get_filename\");\n  return result;\n}\n", 
            "funcStartAddr": "0x9800L", 
            "funcEndAddr": "0x98c2L", 
            "funcName": "sub_9800"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_98D0(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rax\n  __int64 result; // rax\n  int v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] )\n    __assert_fail(\"subkeytypes[primary] == TYPE_NONE\", \"conf.c\", 0x18Eu, \"conf_get_fontspec\");\n  if ( dword_4A2A0[a2] != 5 )\n    __assert_fail(\"valuetypes[primary] == TYPE_FONT\", \"conf.c\", 0x18Fu, \"conf_get_fontspec\");\n  v2 = *a1;\n  v5 = a2;\n  v3 = sub_43200(v2, &v5, 0LL);\n  if ( !v3 || (result = *(_QWORD *)(v3 + 16), __readfsqword(0x28u) != v6) )\n    __assert_fail(\"entry\", \"conf.c\", 0x192u, \"conf_get_fontspec\");\n  return result;\n}\n", 
            "funcStartAddr": "0x98d0L", 
            "funcEndAddr": "0x9992L", 
            "funcName": "sub_98D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9CC0(_QWORD *a1, int a2, __int64 a3)\n{\n  _QWORD *v3; // rbp\n  __int64 v4; // rdi\n  __int64 v5; // rax\n  signed int *v6; // rbx\n  __int64 result; // rax\n  unsigned __int64 v8; // rt1\n  int v9; // [rsp+0h] [rbp-38h]\n  __int64 v10; // [rsp+8h] [rbp-30h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-20h]\n\n  v11 = __readfsqword(0x28u);\n  if ( dword_4A5E0[a2] != 3 )\n    __assert_fail(\"subkeytypes[primary] == TYPE_STR\", \"conf.c\", 0x1D6u, \"conf_del_str_str\");\n  if ( dword_4A2A0[a2] != 3 )\n    goto LABEL_11;\n  v3 = a1;\n  v4 = *a1;\n  v9 = a2;\n  v10 = a3;\n  v5 = sub_43200(v4, &v9, 0LL);\n  v6 = (signed int *)v5;\n  if ( v5 )\n  {\n    sub_43270(*v3, v5);\n    sub_8DD0(v6);\n  }\n  v8 = __readfsqword(0x28u);\n  result = v8 ^ v11;\n  if ( v8 != v11 )\nLABEL_11:\n    __assert_fail(\"valuetypes[primary] == TYPE_STR\", \"conf.c\", 0x1D7u, \"conf_del_str_str\");\n  return result;\n}\n", 
            "funcStartAddr": "0x9cc0L", 
            "funcEndAddr": "0x9d81L", 
            "funcName": "sub_9CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A1D0(char *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n\n  v3 = (char *)sub_470D0(a2, a3);\n  sub_434A0(s, v3);\n  return sub_114C0(v3);\n}\n", 
            "funcStartAddr": "0xa1d0L", 
            "funcEndAddr": "0xa200L", 
            "funcName": "sub_A1D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_A200(char *a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a2);\n  v4 = __readfsqword(0x28u);\n  sub_A1D0(a1, a2, (__int64)va);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0xa200L", 
            "funcEndAddr": "0xa2b1L", 
            "funcName": "sub_A200"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_A2C0(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v2; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a1);\n  v2 = __readfsqword(0x28u);\n  sub_A1D0(\"FATAL ERROR\", a1, (__int64)va);\n  sub_43480(1);\n}\n", 
            "funcStartAddr": "0xa2c0L", 
            "funcEndAddr": "0xa36dL", 
            "funcName": "sub_A2C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_A370(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a1);\n  v3 = __readfsqword(0x28u);\n  sub_A1D0(\"ERROR\", a1, (__int64)va);\n  return __readfsqword(0x28u) ^ v3;\n}\n", 
            "funcStartAddr": "0xa370L", 
            "funcEndAddr": "0xa430L", 
            "funcName": "sub_A370"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A460(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // r12\n  _QWORD *v5; // rax\n  __int64 v6; // rdi\n  _QWORD *v7; // rbx\n  __int64 v8; // rax\n\n  v3 = a1;\n  v4 = a3;\n  v5 = (_QWORD *)sub_11440(1LL, 32LL, 0LL);\n  v6 = *(_QWORD *)(a1 + 8);\n  v5[3] = v3;\n  v7 = v5;\n  *v5 = a2;\n  v5[1] = v4;\n  v5[2] = 0LL;\n  v8 = sub_152D0(v6, 32LL);\n  v7[2] = sub_133C0(v8);\n  return v7;\n}\n", 
            "funcStartAddr": "0xa460L", 
            "funcEndAddr": "0xa4bdL", 
            "funcName": "sub_A460"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A4C0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  _QWORD *v5; // rax\n  __int64 v6; // rdi\n  _QWORD *v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rdi\n  __int64 v10; // rax\n\n  v3 = a3;\n  v4 = a1;\n  v5 = (_QWORD *)sub_11440(1LL, 40LL, 0LL);\n  v6 = *(_QWORD *)(a1 + 8);\n  v5[4] = v4;\n  *v5 = a2;\n  v7 = v5;\n  v5[1] = v3;\n  v5[3] = 0LL;\n  v5[2] = 0LL;\n  v8 = sub_15280(v6, a2, v3);\n  v9 = *(_QWORD *)(v4 + 8);\n  v7[3] = v8;\n  v10 = sub_152D0(v9, a2);\n  v7[2] = sub_133C0(v10);\n  return v7;\n}\n", 
            "funcStartAddr": "0xa4c0L", 
            "funcEndAddr": "0xa538L", 
            "funcName": "sub_A4C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A540(_QWORD *a1, _QWORD *a2, unsigned int a3)\n{\n  _QWORD *v3; // r12\n  unsigned int v4; // ebx\n\n  v3 = a1;\n  v4 = a3;\n  sub_13140(*a1, *a1, *a2, a3);\n  sub_13140(v3[1], v3[1], a2[1], v4);\n  return sub_13140(v3[2], v3[2], a2[2], v4);\n}\n", 
            "funcStartAddr": "0xa540L", 
            "funcEndAddr": "0xa586L", 
            "funcName": "sub_A540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A590(_QWORD *a1, _QWORD *a2, unsigned int a3)\n{\n  _QWORD *v3; // r12\n  unsigned int v4; // ebx\n\n  v3 = a1;\n  v4 = a3;\n  sub_13140(*a1, *a1, *a2, a3);\n  sub_13140(v3[1], v3[1], a2[1], v4);\n  sub_13140(v3[2], v3[2], a2[2], v4);\n  return sub_13140(v3[3], v3[3], a2[3], v4);\n}\n", 
            "funcStartAddr": "0xa590L", 
            "funcEndAddr": "0xa5e9L", 
            "funcName": "sub_A590"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A5F0(_QWORD *a1, _QWORD *a2)\n{\n  sub_131B0(*a1, *a2);\n  sub_131B0(a1[1], a2[1]);\n  return sub_131B0(a1[2], a2[2]);\n}\n", 
            "funcStartAddr": "0xa5f0L", 
            "funcEndAddr": "0xa62bL", 
            "funcName": "sub_A5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A630(_QWORD *a1, _QWORD *a2)\n{\n  sub_131B0(*a1, *a2);\n  sub_131B0(a1[1], a2[1]);\n  sub_131B0(a1[2], a2[2]);\n  return sub_131B0(a1[3], a2[3]);\n}\n", 
            "funcStartAddr": "0xa630L", 
            "funcEndAddr": "0xa67bL", 
            "funcName": "sub_A630"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A680(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // r13\n  __int64 v6; // r12\n  _QWORD *v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rdi\n\n  v4 = a1;\n  v5 = a3;\n  v6 = a4;\n  v7 = (_QWORD *)sub_11440(1LL, 40LL, 0LL);\n  *v7 = sub_133C0(a1);\n  v8 = sub_16210(a1, 40LL);\n  v7[1] = v8;\n  v9 = sub_16350(v8, a2);\n  v10 = v7[1];\n  v7[3] = v9;\n  v7[4] = sub_16350(v10, v5);\n  if ( v6 )\n    v7[2] = sub_168B0(v4, v6);\n  else\n    v7[2] = 0LL;\n  return v7;\n}\n", 
            "funcStartAddr": "0xa680L", 
            "funcEndAddr": "0xa71bL", 
            "funcName": "sub_A680"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A720(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[3]);\n  sub_12FF0(a1[4]);\n  sub_15110(a1[1]);\n  if ( a1[2] )\n    sub_16990();\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xa720L", 
            "funcEndAddr": "0xa75eL", 
            "funcName": "sub_A720"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A760(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // rax\n\n  v3 = sub_16350(*(_QWORD *)(a1 + 8), a3);\n  v4 = sub_16350(*(_QWORD *)(a1 + 8), a2);\n  return sub_A460(a1, v4, v3);\n}\n", 
            "funcStartAddr": "0xa760L", 
            "funcEndAddr": "0xa797L", 
            "funcName": "sub_A760"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A7A0(_QWORD *a1)\n{\n  _QWORD *v1; // rbp\n  _QWORD *v2; // rax\n  __int64 v3; // rdi\n  _QWORD *v4; // rbx\n  __int64 v5; // rbp\n\n  v1 = a1;\n  v2 = (_QWORD *)sub_11440(1LL, 32LL, 0LL);\n  v3 = *a1;\n  v2[3] = v1;\n  v4 = v2;\n  v2[2] = 0LL;\n  v2[1] = 0LL;\n  *v2 = 0LL;\n  v5 = sub_12FE0(v3, 32LL);\n  *v4 = sub_12F90(v5);\n  v4[1] = sub_12F90(v5);\n  v4[2] = sub_12F90(v5);\n  return v4;\n}\n", 
            "funcStartAddr": "0xa7a0L", 
            "funcEndAddr": "0xa811L", 
            "funcName": "sub_A7A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A820(_QWORD *a1, _QWORD *a2)\n{\n  sub_130D0(*a1, *a2);\n  sub_130D0(a1[1], a2[1]);\n  return sub_130D0(a1[2], a2[2]);\n}\n", 
            "funcStartAddr": "0xa820L", 
            "funcEndAddr": "0xa857L", 
            "funcName": "sub_A820"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_A860(_QWORD *a1)\n{\n  _QWORD *v1; // rbp\n  __int64 v2; // r12\n  __int64 *v3; // rax\n  __int64 v4; // rdi\n  __int64 *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v8; // rax\n  __int64 v9; // rdi\n\n  v1 = a1;\n  v2 = a1[3];\n  v3 = (__int64 *)sub_11440(1LL, 32LL, 0LL);\n  *v3 = 0LL;\n  v4 = *a1;\n  v5 = v3;\n  v3[3] = v2;\n  v3[2] = 0LL;\n  v3[1] = 0LL;\n  v6 = sub_133C0(v4);\n  v7 = v1[1];\n  *v5 = v6;\n  v8 = sub_133C0(v7);\n  v9 = v1[2];\n  v5[1] = v8;\n  v5[2] = sub_133C0(v9);\n  return v5;\n}\n", 
            "funcStartAddr": "0xa860L", 
            "funcEndAddr": "0xa8c8L", 
            "funcName": "sub_A860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A8D0(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[1]);\n  sub_12FF0(a1[2]);\n  sub_47E30(a1, 32LL);\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xa8d0L", 
            "funcEndAddr": "0xa904L", 
            "funcName": "sub_A8D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_A910(_QWORD *a1, __int64 a2, unsigned __int8 a3)\n{\n  _QWORD *v3; // rbx\n  __int64 v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // r14\n  __int64 v7; // rbp\n  __int64 v8; // r12\n  __int64 v9; // rbp\n  __int64 v10; // r14\n  unsigned __int8 v11; // r12\n  _QWORD *result; // rax\n  unsigned __int8 v13; // [rsp+Ch] [rbp-4Ch]\n  int v14; // [rsp+14h] [rbp-44h]\n  unsigned __int64 v15; // [rsp+18h] [rbp-40h]\n\n  v15 = __readfsqword(0x28u);\n  v13 = a3;\n  if ( !a1[2] )\n    goto LABEL_10;\n  v3 = a1;\n  v4 = sub_16350(a1[1], a2);\n  v5 = sub_15280(a1[1], v4, v4);\n  v6 = sub_16670(v3[1], v5, v3[3]);\n  v7 = sub_15280(a1[1], v6, v4);\n  v8 = sub_16670(v3[1], v7, v3[4]);\n  sub_12FF0(v5);\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  v9 = sub_169E0(a1[2], v8, &v14);\n  sub_12FF0(v8);\n  if ( v14 )\n  {\n    v10 = sub_15390(a1[1], v9);\n    v11 = sub_13400(v10, 0LL);\n    sub_137D0(v10, *a1, v9);\n    sub_13140(v9, v9, v10, (v11 ^ v13) & 1);\n    sub_12FF0(v10);\n    result = sub_A460((__int64)a1, v4, v9);\n  }\n  else\n  {\n    sub_12FF0(v4);\n    sub_12FF0(v9);\n    result = 0LL;\n  }\n  if ( __readfsqword(0x28u) != v15 )\nLABEL_10:\n    __assert_fail(\"wc->sc\", \"ecc.c\", 0x90u, \"ecc_weierstrass_point_new_from_x\");\n  return result;\n}\n", 
            "funcStartAddr": "0xa910L", 
            "funcEndAddr": "0xaa88L", 
            "funcName": "sub_A910"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_AA90(_QWORD *a1, _QWORD *a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // r15\n  __int64 *v4; // rax\n  __int64 v5; // r13\n  __int64 *v6; // rbx\n  __int64 v7; // rsi\n  __int64 v8; // r12\n  __int64 v9; // ST30_8\n  __int64 v10; // rbp\n  __int64 v11; // ST38_8\n  __int64 v12; // ST20_8\n  __int64 v13; // rax\n  __int64 v14; // r15\n  __int64 v15; // r15\n  __int64 v16; // r13\n  __int64 v17; // rbp\n  __int64 v18; // r14\n  __int64 v19; // rax\n  __int64 v20; // ST58_8\n  __int64 v21; // rax\n  __int64 v22; // ST50_8\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // ST48_8\n  __int64 v26; // ST38_8\n  __int64 v27; // r12\n  __int64 v28; // rax\n  __int64 v29; // ST30_8\n  __int64 v30; // rax\n  __int64 v31; // rdi\n  __int64 v33; // [rsp+8h] [rbp-90h]\n  __int64 v34; // [rsp+10h] [rbp-88h]\n  __int64 v35; // [rsp+18h] [rbp-80h]\n  __int64 v36; // [rsp+20h] [rbp-78h]\n  __int64 v37; // [rsp+28h] [rbp-70h]\n  __int64 v38; // [rsp+40h] [rbp-58h]\n\n  v2 = a2[3];\n  if ( v2 != a1[3] )\n    __assert_fail(\"Q->wc == wc\", \"ecc.c\", 0x12Bu, \"ecc_weierstrass_add\");\n  v3 = a2;\n  v4 = (__int64 *)sub_11440(1LL, 32LL, 0LL);\n  v4[3] = v2;\n  v5 = a1[3];\n  v6 = v4;\n  v4[2] = 0LL;\n  v7 = a1[2];\n  v4[1] = 0LL;\n  *v4 = 0LL;\n  v8 = sub_15280(*(_QWORD *)(v5 + 8), v7, v7);\n  v9 = sub_15280(*(_QWORD *)(v5 + 8), v8, a1[2]);\n  v10 = sub_15280(*(_QWORD *)(v5 + 8), v3[2], v3[2]);\n  v11 = sub_15280(*(_QWORD *)(v5 + 8), v10, v3[2]);\n  v33 = sub_15280(*(_QWORD *)(v5 + 8), *a1, v10);\n  v34 = sub_15280(*(_QWORD *)(v5 + 8), a1[1], v11);\n  v35 = sub_15280(*(_QWORD *)(v5 + 8), *v3, v8);\n  v12 = sub_15280(*(_QWORD *)(v5 + 8), v3[1], v9);\n  v13 = sub_15280(*(_QWORD *)(v5 + 8), a1[2], v3[2]);\n  v14 = v12;\n  v38 = v13;\n  v36 = sub_16700(*(_QWORD *)(v5 + 8), v12, v34);\n  v37 = sub_16700(*(_QWORD *)(v5 + 8), v35, v33);\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v14);\n  if ( (unsigned int)sub_140A0(v36, 0LL) )\n    __assert_fail(\"!mp_eq_integer(lambda_n, 0)\", \"ecc.c\", 0x137u, \"ecc_weierstrass_add\");\n  v15 = v6[3];\n  v16 = sub_15280(*(_QWORD *)(v15 + 8), v36, v36);\n  v17 = sub_15280(*(_QWORD *)(v15 + 8), v37, v37);\n  v18 = sub_15280(*(_QWORD *)(v15 + 8), v37, v17);\n  v19 = sub_16670(*(_QWORD *)(v15 + 8), v33, v35);\n  v20 = v19;\n  v21 = sub_15280(*(_QWORD *)(v15 + 8), v17, v19);\n  v22 = v21;\n  v23 = sub_16700(*(_QWORD *)(v15 + 8), v16, v21);\n  v24 = *(_QWORD *)(v15 + 8);\n  *v6 = v23;\n  v25 = sub_15280(v24, v17, v33);\n  v26 = sub_16700(*(_QWORD *)(v15 + 8), v25, *v6);\n  v27 = sub_15280(*(_QWORD *)(v15 + 8), v36, v26);\n  v28 = sub_15280(*(_QWORD *)(v15 + 8), v18, v34);\n  v29 = v28;\n  v30 = sub_16700(*(_QWORD *)(v15 + 8), v27, v28);\n  v31 = *(_QWORD *)(v15 + 8);\n  v6[1] = v30;\n  v6[2] = sub_15280(v31, v38, v37);\n  sub_12FF0(v16);\n  sub_12FF0(v17);\n  sub_12FF0(v18);\n  sub_12FF0(v20);\n  sub_12FF0(v26);\n  sub_12FF0(v22);\n  sub_12FF0(v27);\n  sub_12FF0(v25);\n  sub_12FF0(v29);\n  sub_12FF0(v33);\n  sub_12FF0(v34);\n  sub_12FF0(v35);\n  sub_12FF0(v38);\n  sub_12FF0(v36);\n  sub_12FF0(v37);\n  return v6;\n}\n", 
            "funcStartAddr": "0xaa90L", 
            "funcEndAddr": "0xae0bL", 
            "funcName": "sub_AA90"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_AE10(_QWORD *a1)\n{\n  _QWORD *v1; // r13\n  __int64 v2; // rbp\n  __int64 *v3; // rax\n  __int64 v4; // rsi\n  __int64 *v5; // rbx\n  __int64 v6; // rbp\n  __int64 v7; // r15\n  __int64 v8; // ST18_8\n  __int64 v9; // r14\n  __int64 v10; // ST10_8\n  __int64 v11; // ST08_8\n  __int64 v12; // r12\n  __int64 v13; // ST00_8\n  __int64 v14; // rbp\n  __int64 v15; // r12\n  __int64 v16; // r14\n  __int64 v17; // r15\n  __int64 v18; // ST18_8\n  __int64 v19; // ST08_8\n  __int64 v20; // r13\n  __int64 v21; // ST10_8\n  __int64 v22; // rax\n  __int64 v23; // ST38_8\n  __int64 v24; // rax\n  __int64 v25; // ST30_8\n  __int64 v26; // rax\n  __int64 v27; // rdi\n  __int64 v28; // ST28_8\n  __int64 v29; // ST20_8\n  __int64 v30; // r14\n  __int64 v31; // rax\n  __int64 v32; // r15\n  __int64 v33; // rax\n  __int64 v34; // rdi\n\n  v1 = a1;\n  v2 = a1[3];\n  v3 = (__int64 *)sub_11440(1LL, 32LL, 0LL);\n  *v3 = 0LL;\n  v4 = *a1;\n  v5 = v3;\n  v3[3] = v2;\n  v6 = a1[3];\n  v3[2] = 0LL;\n  v3[1] = 0LL;\n  v7 = sub_15280(*(_QWORD *)(v6 + 8), v4, v4);\n  v8 = sub_16670(*(_QWORD *)(v6 + 8), v7, v7);\n  v9 = sub_16670(*(_QWORD *)(v6 + 8), v8, v7);\n  v10 = sub_15280(*(_QWORD *)(v6 + 8), v1[2], v1[2]);\n  v11 = sub_15280(*(_QWORD *)(v6 + 8), v10, v10);\n  v12 = sub_15280(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 24), v11);\n  v13 = sub_16670(*(_QWORD *)(v6 + 8), v9, v12);\n  v14 = sub_16670(*(_QWORD *)(v6 + 8), v1[1], v1[1]);\n  sub_12FF0(v7);\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  v15 = v5[3];\n  v16 = *a1;\n  v17 = a1[1];\n  v18 = a1[2];\n  v19 = sub_15280(*(_QWORD *)(v15 + 8), v13, v13);\n  v20 = sub_15280(*(_QWORD *)(v15 + 8), v14, v14);\n  v21 = sub_15280(*(_QWORD *)(v15 + 8), v14, v20);\n  v22 = sub_16670(*(_QWORD *)(v15 + 8), v16, v16);\n  v23 = v22;\n  v24 = sub_15280(*(_QWORD *)(v15 + 8), v20, v22);\n  v25 = v24;\n  v26 = sub_16700(*(_QWORD *)(v15 + 8), v19, v24);\n  v27 = *(_QWORD *)(v15 + 8);\n  *v5 = v26;\n  v28 = sub_15280(v27, v20, v16);\n  v29 = sub_16700(*(_QWORD *)(v15 + 8), v28, *v5);\n  v30 = sub_15280(*(_QWORD *)(v15 + 8), v13, v29);\n  v31 = sub_15280(*(_QWORD *)(v15 + 8), v21, v17);\n  v32 = v31;\n  v33 = sub_16700(*(_QWORD *)(v15 + 8), v30, v31);\n  v34 = *(_QWORD *)(v15 + 8);\n  v5[1] = v33;\n  v5[2] = sub_15280(v34, v18, v14);\n  sub_12FF0(v19);\n  sub_12FF0(v20);\n  sub_12FF0(v21);\n  sub_12FF0(v23);\n  sub_12FF0(v29);\n  sub_12FF0(v25);\n  sub_12FF0(v30);\n  sub_12FF0(v28);\n  sub_12FF0(v32);\n  sub_12FF0(v13);\n  sub_12FF0(v14);\n  return v5;\n}\n", 
            "funcStartAddr": "0xae10L", 
            "funcEndAddr": "0xb0c7L", 
            "funcName": "sub_AE10"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_B0D0(_QWORD *a1, _QWORD *a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // r15\n  _QWORD *v4; // r12\n  __int64 *v5; // rax\n  __int64 v6; // r14\n  __int64 *v7; // rbx\n  __int64 v8; // rsi\n  __int64 v9; // r13\n  __int64 v10; // ST30_8\n  __int64 v11; // rbp\n  __int64 v12; // ST38_8\n  __int64 v13; // ST10_8\n  __int64 v14; // ST18_8\n  __int64 v15; // ST20_8\n  __int64 v16; // ST40_8\n  __int64 v17; // ST58_8\n  __int64 v18; // ST08_8\n  __int64 v19; // ST28_8\n  __int64 v20; // rbp\n  __int64 v21; // r13\n  __int64 v22; // ST60_8\n  __int64 v23; // ST30_8\n  __int64 v24; // r14\n  __int64 v25; // ST40_8\n  __int64 v26; // ST38_8\n  __int64 v27; // ST48_8\n  __int64 v28; // ST50_8\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // ST30_8\n  __int64 v32; // rbp\n  __int64 v33; // ST38_8\n  __int64 v34; // rax\n  __int64 v35; // ST78_8\n  __int64 v36; // rax\n  __int64 v37; // ST70_8\n  __int64 v38; // rax\n  __int64 v39; // rdi\n  __int64 v40; // ST68_8\n  __int64 v41; // ST60_8\n  __int64 v42; // ST40_8\n  __int64 v43; // rax\n  __int64 v44; // r14\n  __int64 v45; // rax\n  __int64 v46; // rdi\n  __int64 v47; // rbp\n\n  v2 = a2[3];\n  if ( v2 != a1[3] )\n    __assert_fail(\"Q->wc == wc\", \"ecc.c\", 0x180u, \"ecc_weierstrass_add_general\");\n  v3 = a1;\n  v4 = a2;\n  v5 = (__int64 *)sub_11440(1LL, 32LL, 0LL);\n  v5[3] = v2;\n  v6 = a1[3];\n  v7 = v5;\n  v5[2] = 0LL;\n  v8 = a1[2];\n  v5[1] = 0LL;\n  *v5 = 0LL;\n  v9 = sub_15280(*(_QWORD *)(v6 + 8), v8, v8);\n  v10 = sub_15280(*(_QWORD *)(v6 + 8), v9, a1[2]);\n  v11 = sub_15280(*(_QWORD *)(v6 + 8), v4[2], v4[2]);\n  v12 = sub_15280(*(_QWORD *)(v6 + 8), v11, v4[2]);\n  v13 = sub_15280(*(_QWORD *)(v6 + 8), *a1, v11);\n  v14 = sub_15280(*(_QWORD *)(v6 + 8), a1[1], v12);\n  v15 = sub_15280(*(_QWORD *)(v6 + 8), *v4, v9);\n  v16 = sub_15280(*(_QWORD *)(v6 + 8), v4[1], v10);\n  v17 = sub_15280(*(_QWORD *)(v6 + 8), a1[2], v4[2]);\n  v18 = sub_16700(*(_QWORD *)(v6 + 8), v16, v14);\n  v19 = sub_16700(*(_QWORD *)(v6 + 8), v15, v13);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  sub_12FF0(v16);\n  v20 = a1[3];\n  v21 = sub_15280(*(_QWORD *)(v20 + 8), *v3, *v3);\n  v22 = sub_16670(*(_QWORD *)(v20 + 8), v21, v21);\n  v23 = sub_16670(*(_QWORD *)(v20 + 8), v22, v21);\n  v24 = sub_15280(*(_QWORD *)(v20 + 8), v3[2], v3[2]);\n  v25 = sub_15280(*(_QWORD *)(v20 + 8), v24, v24);\n  v26 = sub_15280(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 24), v25);\n  v27 = sub_16670(*(_QWORD *)(v20 + 8), v23, v26);\n  v28 = sub_16670(*(_QWORD *)(v20 + 8), v3[1], v3[1]);\n  sub_12FF0(v21);\n  sub_12FF0(v22);\n  sub_12FF0(v23);\n  sub_12FF0(v24);\n  sub_12FF0(v25);\n  sub_12FF0(v26);\n  LODWORD(v20) = sub_140A0(v19, 0LL);\n  LODWORD(v20) = sub_140A0(v18, 0LL) & v20;\n  v29 = v19;\n  sub_13140(v18, v18, v27, (unsigned int)v20);\n  sub_13140(v29, v29, v28, (unsigned int)v20);\n  v30 = v7[3];\n  v31 = sub_15280(*(_QWORD *)(v30 + 8), v18, v18);\n  v32 = sub_15280(*(_QWORD *)(v30 + 8), v29, v29);\n  v33 = sub_15280(*(_QWORD *)(v30 + 8), v19, v32);\n  v34 = sub_16670(*(_QWORD *)(v30 + 8), v13, v15);\n  v35 = v34;\n  v36 = sub_15280(*(_QWORD *)(v30 + 8), v32, v34);\n  v37 = v36;\n  v38 = sub_16700(*(_QWORD *)(v30 + 8), v31, v36);\n  v39 = *(_QWORD *)(v30 + 8);\n  *v7 = v38;\n  v40 = sub_15280(v39, v32, v13);\n  v41 = sub_16700(*(_QWORD *)(v30 + 8), v40, *v7);\n  v42 = sub_15280(*(_QWORD *)(v30 + 8), v18, v41);\n  v43 = sub_15280(*(_QWORD *)(v30 + 8), v33, v14);\n  v44 = v43;\n  v45 = sub_16700(*(_QWORD *)(v30 + 8), v42, v43);\n  v46 = *(_QWORD *)(v30 + 8);\n  v7[1] = v45;\n  v7[2] = sub_15280(v46, v17, v19);\n  sub_12FF0(v31);\n  sub_12FF0(v32);\n  sub_12FF0(v33);\n  sub_12FF0(v35);\n  sub_12FF0(v41);\n  sub_12FF0(v37);\n  sub_12FF0(v42);\n  sub_12FF0(v40);\n  sub_12FF0(v44);\n  LODWORD(v32) = sub_140A0(v3[2], 0LL);\n  sub_13140(*v7, *v7, *v4, (unsigned int)v32);\n  sub_13140(v7[1], v7[1], v4[1], (unsigned int)v32);\n  sub_13140(v7[2], v7[2], v4[2], (unsigned int)v32);\n  LODWORD(v32) = sub_140A0(v4[2], 0LL);\n  sub_13140(*v7, *v7, *v3, (unsigned int)v32);\n  sub_13140(v7[1], v7[1], v3[1], (unsigned int)v32);\n  sub_13140(v7[2], v7[2], v3[2], (unsigned int)v32);\n  v47 = (unsigned int)sub_140A0(v7[2], 0LL);\n  sub_13250(*v7, v47);\n  sub_13250(v7[1], (unsigned int)v47);\n  sub_12FF0(v13);\n  sub_12FF0(v14);\n  sub_12FF0(v15);\n  sub_12FF0(v17);\n  sub_12FF0(v18);\n  sub_12FF0(v19);\n  sub_12FF0(v27);\n  sub_12FF0(v28);\n  return v7;\n}\n", 
            "funcStartAddr": "0xb0d0L", 
            "funcEndAddr": "0xb61aL", 
            "funcName": "sub_B0D0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_B620(_QWORD *a1, __int64 a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // r15\n  __int64 *v4; // rbp\n  __int64 *v5; // r14\n  __int64 v6; // rax\n  signed __int64 v7; // rcx\n  unsigned int v8; // er15\n  signed __int64 v9; // ST00_8\n  int v10; // ebx\n  __int64 *v11; // r13\n  __int64 *v12; // r12\n  __int64 *v13; // rdi\n  unsigned int v14; // edx\n  __int64 *v16; // [rsp+8h] [rbp-50h]\n  _QWORD *v17; // [rsp+10h] [rbp-48h]\n\n  v17 = a1;\n  v2 = sub_AE10(a1);\n  v3 = v2;\n  v16 = v2;\n  v4 = sub_A860(a1);\n  v5 = sub_A860(v3);\n  v6 = sub_12FE0(a2, a2);\n  if ( v6 )\n  {\n    v7 = v6 - 1;\n    v8 = 1;\n    do\n    {\n      v9 = v7;\n      v10 = sub_13400(a2, v7);\n      v11 = sub_AA90(v4, v5);\n      sub_A5F0(v4, v5);\n      v12 = sub_AE10(v4);\n      sub_A8D0(v4);\n      v13 = v5;\n      v4 = v12;\n      v5 = v11;\n      sub_A8D0(v13);\n      sub_A5F0(v12, v11);\n      sub_A540(v12, v17, v8);\n      v14 = v8;\n      v8 &= ~v10;\n      sub_A540(v11, v16, v14);\n      v7 = v9 - 1;\n    }\n    while ( v9 );\n  }\n  else\n  {\n    v11 = v5;\n    v12 = v4;\n  }\n  sub_A8D0(v16);\n  sub_A8D0(v11);\n  return v12;\n}\n", 
            "funcStartAddr": "0xb620L", 
            "funcEndAddr": "0xb748L", 
            "funcName": "sub_B620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_B750(__int64 a1)\n{\n  return sub_140A0(*(_QWORD *)(a1 + 16), 0LL);\n}\n", 
            "funcStartAddr": "0xb750L", 
            "funcEndAddr": "0xb75bL", 
            "funcName": "sub_B750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_B760(_QWORD *a1, __int64 *a2, __int64 *a3)\n{\n  _QWORD *v3; // r13\n  __int64 *v4; // r14\n  __int64 v5; // rbx\n  __int64 v6; // rbp\n  __int64 v7; // r12\n  __int64 v8; // ST08_8\n  __int64 result; // rax\n\n  v3 = a1;\n  v4 = a3;\n  v5 = a1[3];\n  v6 = sub_15500(*(_QWORD *)(v5 + 8), a1[2]);\n  v7 = sub_15280(*(_QWORD *)(v5 + 8), v6, v6);\n  v8 = sub_15280(*(_QWORD *)(v5 + 8), v7, v6);\n  sub_15160(*(_QWORD *)(v5 + 8), *v3, *v3, v7);\n  sub_15160(*(_QWORD *)(v5 + 8), v3[1], v3[1], v8);\n  sub_15160(*(_QWORD *)(v5 + 8), v3[2], v3[2], v6);\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  result = sub_12FF0(v8);\n  if ( a2 )\n  {\n    result = sub_15390(*(_QWORD *)(v5 + 8), *a1);\n    *a2 = result;\n  }\n  if ( v4 )\n  {\n    result = sub_15390(*(_QWORD *)(v5 + 8), a1[1]);\n    *v4 = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xb760L", 
            "funcEndAddr": "0xb83fL", 
            "funcName": "sub_B760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_B840(_QWORD *a1)\n{\n  _QWORD *v1; // rbp\n  _QWORD *v2; // rbx\n  __int64 v3; // r15\n  __int64 v4; // ST28_8\n  __int64 v5; // r14\n  __int64 v6; // r12\n  __int64 v7; // r13\n  __int64 v8; // ST20_8\n  __int64 v9; // ST18_8\n  __int64 v10; // rbp\n  __int64 v11; // ST10_8\n  __int64 v12; // ST08_8\n  __int64 v13; // rbx\n  unsigned int v14; // ST04_4\n\n  v1 = a1;\n  v2 = (_QWORD *)a1[3];\n  v3 = sub_15280(v2[1], a1[1], a1[1]);\n  v4 = sub_15280(v2[1], *v1, *v1);\n  v5 = sub_15280(v2[1], v4, *a1);\n  v6 = sub_15280(v2[1], v1[2], v1[2]);\n  v7 = sub_15280(v2[1], v6, v6);\n  v8 = sub_15280(v2[1], v2[3], v7);\n  v9 = sub_15280(v2[1], v8, *a1);\n  v10 = sub_16670(v2[1], v5, v9);\n  v11 = sub_15280(v2[1], v6, v7);\n  v12 = sub_15280(v2[1], v2[4], v11);\n  v13 = sub_16670(v2[1], v10, v12);\n  v14 = sub_14030(v3, v13);\n  sub_12FF0(v3);\n  sub_12FF0(v4);\n  sub_12FF0(v5);\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  sub_12FF0(v13);\n  return v14;\n}\n", 
            "funcStartAddr": "0xb840L", 
            "funcEndAddr": "0xb9bfL", 
            "funcName": "sub_B840"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_B9C0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r13\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v8; // r14\n  __int64 v9; // r13\n  __int64 v10; // rbp\n  __int64 v11; // r12\n\n  v3 = a3;\n  v4 = (_QWORD *)sub_11440(1LL, 40LL, 0LL);\n  *v4 = sub_133C0(a1);\n  v5 = sub_16210(a1, 40LL);\n  v4[1] = v5;\n  v6 = sub_16350(v5, a2);\n  v7 = v4[1];\n  v4[2] = v6;\n  v4[3] = sub_16350(v7, v3);\n  v8 = sub_12FA0(4LL, v3);\n  v9 = sub_154D0(v8, *v4);\n  v10 = sub_133C0(a2);\n  sub_13980(v10, v10, 2LL);\n  v11 = sub_161D0(v10, v9, *v4);\n  v4[4] = sub_16350(v4[1], v11);\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  return v4;\n}\n", 
            "funcStartAddr": "0xb9c0L", 
            "funcEndAddr": "0xba9eL", 
            "funcName": "sub_B9C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_BAA0(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[2]);\n  sub_12FF0(a1[3]);\n  sub_12FF0(a1[4]);\n  sub_15110(a1[1]);\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xbaa0L", 
            "funcEndAddr": "0xbad9L", 
            "funcName": "sub_BAA0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_BAE0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 *v3; // rax\n  __int64 v4; // rdi\n  __int64 *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v8; // rax\n\n  v2 = a1;\n  v3 = (__int64 *)sub_11440(1LL, 24LL, 0LL);\n  v4 = *(_QWORD *)(a1 + 8);\n  v3[2] = v2;\n  v3[1] = 0LL;\n  *v3 = 0LL;\n  v5 = v3;\n  v6 = sub_16350(v4, a2);\n  v7 = *(_QWORD *)(v2 + 8);\n  *v5 = v6;\n  v8 = sub_152D0(v7, a2);\n  v5[1] = sub_133C0(v8);\n  return v5;\n}\n", 
            "funcStartAddr": "0xbae0L", 
            "funcEndAddr": "0xbb3dL", 
            "funcName": "sub_BAE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_BB40(_QWORD *a1, _QWORD *a2)\n{\n  sub_130D0(*a1, *a2);\n  return sub_130D0(a1[1], a2[1]);\n}\n", 
            "funcStartAddr": "0xbb40L", 
            "funcEndAddr": "0xbb6aL", 
            "funcName": "sub_BB40"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_BB70(_QWORD *a1)\n{\n  _QWORD *v1; // rbp\n  __int64 v2; // r12\n  __int64 *v3; // rax\n  __int64 v4; // rdi\n  __int64 *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n\n  v1 = a1;\n  v2 = a1[2];\n  v3 = (__int64 *)sub_11440(1LL, 24LL, 0LL);\n  *v3 = 0LL;\n  v4 = *a1;\n  v5 = v3;\n  v3[2] = v2;\n  v3[1] = 0LL;\n  v6 = sub_133C0(v4);\n  v7 = v1[1];\n  *v5 = v6;\n  v5[1] = sub_133C0(v7);\n  return v5;\n}\n", 
            "funcStartAddr": "0xbb70L", 
            "funcEndAddr": "0xbbc3L", 
            "funcName": "sub_BB70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_BBD0(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[1]);\n  sub_47E30(a1, 24LL);\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xbbd0L", 
            "funcEndAddr": "0xbbfbL", 
            "funcName": "sub_BBD0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_BC00(_QWORD *a1, _QWORD *a2, _QWORD *a3)\n{\n  __int64 v3; // r12\n  _QWORD *v4; // r15\n  _QWORD *v5; // rbp\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rax\n  __int64 v8; // rdi\n  _QWORD *v9; // r14\n  __int64 v10; // rdx\n  __int64 v11; // rsi\n  __int64 v12; // r13\n  __int64 v13; // rbp\n  __int64 v14; // ST08_8\n  __int64 v15; // ST18_8\n  __int64 v16; // ST38_8\n  __int64 v17; // r13\n  __int64 v18; // ST20_8\n  __int64 v19; // rbx\n  __int64 v20; // rbp\n  __int64 v21; // ST28_8\n  __int64 v22; // rbx\n  __int64 v23; // ST10_8\n  __int64 v24; // ST30_8\n\n  v3 = a2[2];\n  if ( v3 != a1[2] )\n    __assert_fail(\"Q->mc == mc\", \"ecc.c\", 0x296u, \"ecc_montgomery_diff_add\");\n  v4 = a3;\n  if ( v3 != a3[2] )\n    __assert_fail(aPminus, \"ecc.c\", 0x297u, \"ecc_montgomery_diff_add\");\n  v5 = a1;\n  v6 = a2;\n  v7 = (_QWORD *)sub_11440(1LL, 24LL, 0LL);\n  v8 = *(_QWORD *)(v3 + 8);\n  v7[1] = 0LL;\n  v9 = v7;\n  v10 = v5[1];\n  *v7 = 0LL;\n  v11 = *v5;\n  v7[2] = v3;\n  v12 = sub_16700(v8, v11, v10);\n  v13 = sub_16670(*(_QWORD *)(v3 + 8), *v5, v5[1]);\n  v14 = sub_16700(*(_QWORD *)(v3 + 8), *v6, v6[1]);\n  v15 = v12;\n  v16 = sub_16670(*(_QWORD *)(v3 + 8), *v6, v6[1]);\n  v17 = sub_15280(*(_QWORD *)(v3 + 8), v12, v16);\n  v18 = v13;\n  v19 = sub_15280(*(_QWORD *)(v3 + 8), v13, v14);\n  v20 = sub_16670(*(_QWORD *)(v3 + 8), v17, v19);\n  v21 = v19;\n  v22 = sub_16700(*(_QWORD *)(v3 + 8), v17, v19);\n  v23 = sub_15280(*(_QWORD *)(v3 + 8), v20, v20);\n  v24 = sub_15280(*(_QWORD *)(v3 + 8), v22, v22);\n  *v9 = sub_15280(*(_QWORD *)(v3 + 8), v23, v4[1]);\n  v9[1] = sub_15280(*(_QWORD *)(v3 + 8), v24, *v4);\n  sub_12FF0(v15);\n  sub_12FF0(v18);\n  sub_12FF0(v14);\n  sub_12FF0(v16);\n  sub_12FF0(v17);\n  sub_12FF0(v21);\n  sub_12FF0(v20);\n  sub_12FF0(v22);\n  sub_12FF0(v23);\n  sub_12FF0(v24);\n  return v9;\n}\n", 
            "funcStartAddr": "0xbc00L", 
            "funcEndAddr": "0xbe11L", 
            "funcName": "sub_BC00"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_BE20(__int64 *a1)\n{\n  __int64 *v1; // rbp\n  __int64 v2; // rbx\n  __int64 *v3; // rax\n  __int64 *v4; // r12\n  __int64 v5; // rdx\n  __int64 v6; // rdi\n  __int64 v7; // rsi\n  __int64 v8; // r15\n  __int64 v9; // r14\n  __int64 v10; // r13\n  __int64 v11; // rax\n  __int64 v12; // ST28_8\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // ST20_8\n  __int64 v16; // ST18_8\n  __int64 v17; // rbp\n  __int64 v18; // ST10_8\n  __int64 v19; // ST08_8\n\n  v1 = a1;\n  v2 = a1[2];\n  v3 = (__int64 *)sub_11440(1LL, 24LL, 0LL);\n  v3[1] = 0LL;\n  *v3 = 0LL;\n  v4 = v3;\n  v5 = a1[1];\n  v6 = *(_QWORD *)(v2 + 8);\n  v7 = *v1;\n  v3[2] = v2;\n  v8 = sub_16700(v6, v7, v5);\n  v9 = sub_16670(*(_QWORD *)(v2 + 8), *v1, v1[1]);\n  v10 = sub_15280(*(_QWORD *)(v2 + 8), v8, v8);\n  v11 = sub_15280(*(_QWORD *)(v2 + 8), v9, v9);\n  v12 = v11;\n  v13 = sub_15280(*(_QWORD *)(v2 + 8), v10, v11);\n  v14 = v1[1];\n  *v4 = v13;\n  v15 = sub_15280(*(_QWORD *)(v2 + 8), *v1, v14);\n  v16 = sub_16670(*(_QWORD *)(v2 + 8), v15, v15);\n  v17 = sub_16670(*(_QWORD *)(v2 + 8), v16, v16);\n  v18 = sub_15280(*(_QWORD *)(v2 + 8), v17, *(_QWORD *)(v2 + 32));\n  v19 = sub_16670(*(_QWORD *)(v2 + 8), v10, v18);\n  v4[1] = sub_15280(*(_QWORD *)(v2 + 8), v17, v19);\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v12);\n  sub_12FF0(v15);\n  sub_12FF0(v16);\n  sub_12FF0(v17);\n  sub_12FF0(v18);\n  sub_12FF0(v19);\n  return v4;\n}\n", 
            "funcStartAddr": "0xbe20L", 
            "funcEndAddr": "0xbfa9L", 
            "funcName": "sub_BE20"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_BFB0(__int64 *a1, __int64 a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // r14\n  __int64 *v4; // r13\n  __int64 *v5; // r15\n  __int64 v6; // rax\n  signed __int64 v7; // r8\n  unsigned int v8; // er14\n  signed __int64 v9; // ST08_8\n  int v10; // ebx\n  __int64 *v11; // r12\n  __int64 *v12; // rbp\n  __int64 v13; // rcx\n  __int64 *v15; // [rsp+10h] [rbp-48h]\n\n  v2 = sub_BE20(a1);\n  v3 = v2;\n  v15 = v2;\n  v4 = sub_BB70(a1);\n  v5 = sub_BB70(v3);\n  v6 = sub_12FE0(a2, a2);\n  if ( v6 )\n  {\n    v7 = v6 - 1;\n    v8 = 1;\n    do\n    {\n      v9 = v7;\n      v10 = sub_13400(a2, v7);\n      v11 = sub_BC00(v4, v5, a1);\n      sub_131B0(*v4, *v5);\n      sub_131B0(v4[1], v5[1]);\n      v12 = sub_BE20(v4);\n      sub_BBD0(v4);\n      v4 = v12;\n      sub_BBD0(v5);\n      sub_131B0(*v12, *v11);\n      sub_131B0(v12[1], v11[1]);\n      sub_13140(*v12, *v12, *a1, v8);\n      sub_13140(v12[1], v12[1], a1[1], v8);\n      sub_13140(*v11, *v11, *v15, v8);\n      v13 = v8;\n      v8 &= ~v10;\n      v5 = v11;\n      sub_13140(v11[1], v11[1], v15[1], v13);\n      v7 = v9 - 1;\n    }\n    while ( v9 );\n  }\n  else\n  {\n    v11 = v5;\n    v12 = v4;\n  }\n  sub_BBD0(v15);\n  sub_BBD0(v11);\n  return v12;\n}\n", 
            "funcStartAddr": "0xbfb0L", 
            "funcEndAddr": "0xc130L", 
            "funcName": "sub_BFB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C130(_QWORD *a1, __int64 *a2)\n{\n  _QWORD *v2; // rbx\n  __int64 v3; // rbp\n  __int64 v4; // r12\n  __int64 result; // rax\n\n  v2 = a1;\n  v3 = a1[2];\n  v4 = sub_15500(*(_QWORD *)(v3 + 8), a1[1]);\n  sub_15160(*(_QWORD *)(v3 + 8), *v2, *v2, v4);\n  sub_15160(*(_QWORD *)(v3 + 8), v2[1], v2[1], v4);\n  result = sub_12FF0(v4);\n  if ( a2 )\n  {\n    result = sub_15390(*(_QWORD *)(v3 + 8), *a1);\n    *a2 = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xc130L", 
            "funcEndAddr": "0xc1a1L", 
            "funcName": "sub_C130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C1B0(__int64 a1)\n{\n  return sub_140A0(*(_QWORD *)(a1 + 8), 0LL);\n}\n", 
            "funcStartAddr": "0xc1b0L", 
            "funcEndAddr": "0xc1bbL", 
            "funcName": "sub_C1B0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_C1C0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // r13\n  __int64 v6; // r12\n  _QWORD *v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rdi\n\n  v4 = a1;\n  v5 = a3;\n  v6 = a4;\n  v7 = (_QWORD *)sub_11440(1LL, 40LL, 0LL);\n  *v7 = sub_133C0(a1);\n  v8 = sub_16210(a1, 40LL);\n  v7[1] = v8;\n  v9 = sub_16350(v8, a2);\n  v10 = v7[1];\n  v7[3] = v9;\n  v7[4] = sub_16350(v10, v5);\n  if ( v6 )\n    v7[2] = sub_168B0(v4, v6);\n  else\n    v7[2] = 0LL;\n  return v7;\n}\n", 
            "funcStartAddr": "0xc1c0L", 
            "funcEndAddr": "0xc25bL", 
            "funcName": "sub_C1C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C260(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[3]);\n  sub_12FF0(a1[4]);\n  sub_15110(a1[1]);\n  if ( a1[2] )\n    sub_16990();\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xc260L", 
            "funcEndAddr": "0xc29eL", 
            "funcName": "sub_C260"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_C2A0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // rax\n\n  v3 = sub_16350(*(_QWORD *)(a1 + 8), a3);\n  v4 = sub_16350(*(_QWORD *)(a1 + 8), a2);\n  return sub_A4C0(a1, v4, v3);\n}\n", 
            "funcStartAddr": "0xc2a0L", 
            "funcEndAddr": "0xc2d7L", 
            "funcName": "sub_C2A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C2E0(_QWORD *a1, _QWORD *a2)\n{\n  sub_130D0(*a1, *a2);\n  sub_130D0(a1[1], a2[1]);\n  sub_130D0(a1[2], a2[2]);\n  return sub_130D0(a1[3], a2[3]);\n}\n", 
            "funcStartAddr": "0xc2e0L", 
            "funcEndAddr": "0xc324L", 
            "funcName": "sub_C2E0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_C330(_QWORD *a1)\n{\n  _QWORD *v1; // rbp\n  __int64 v2; // r12\n  __int64 *v3; // rax\n  __int64 v4; // rdi\n  __int64 *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  __int64 v8; // rax\n  __int64 v9; // rdi\n  __int64 v10; // rax\n  __int64 v11; // rdi\n\n  v1 = a1;\n  v2 = a1[4];\n  v3 = (__int64 *)sub_11440(1LL, 40LL, 0LL);\n  *v3 = 0LL;\n  v4 = *a1;\n  v5 = v3;\n  v3[4] = v2;\n  v3[3] = 0LL;\n  v3[2] = 0LL;\n  v3[1] = 0LL;\n  v6 = sub_133C0(v4);\n  v7 = v1[1];\n  *v5 = v6;\n  v8 = sub_133C0(v7);\n  v9 = v1[2];\n  v5[1] = v8;\n  v10 = sub_133C0(v9);\n  v11 = v1[3];\n  v5[2] = v10;\n  v5[3] = sub_133C0(v11);\n  return v5;\n}\n", 
            "funcStartAddr": "0xc330L", 
            "funcEndAddr": "0xc3adL", 
            "funcName": "sub_C330"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C3B0(_QWORD *a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[1]);\n  sub_12FF0(a1[2]);\n  sub_12FF0(a1[3]);\n  sub_47E30(a1, 40LL);\n  return sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0xc3b0L", 
            "funcEndAddr": "0xc3edL", 
            "funcName": "sub_C3B0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_C3F0(_QWORD *a1, __int64 a2, unsigned __int8 a3)\n{\n  _QWORD *v3; // r14\n  __int64 v4; // rbp\n  __int64 v5; // r12\n  __int64 v6; // ST10_8\n  __int64 v7; // r15\n  __int64 v8; // rax\n  __int64 v9; // r13\n  __int64 v10; // ST08_8\n  __int64 v11; // ST00_8\n  __int64 v12; // rbx\n  __int64 v13; // r13\n  unsigned __int8 v14; // r12\n  _QWORD *result; // rax\n  unsigned __int8 v16; // [rsp+1Ch] [rbp-4Ch]\n  int v17; // [rsp+24h] [rbp-44h]\n  unsigned __int64 v18; // [rsp+28h] [rbp-40h]\n\n  v18 = __readfsqword(0x28u);\n  v16 = a3;\n  if ( !a1[2] )\n    goto LABEL_10;\n  v3 = a1;\n  v4 = sub_16350(a1[1], a2);\n  v5 = sub_15280(a1[1], v4, v4);\n  v6 = sub_15280(v3[1], v3[3], v5);\n  v7 = sub_16700(v3[1], v6, v3[4]);\n  v8 = sub_152D0(a1[1], v6);\n  v9 = sub_16700(a1[1], v5, v8);\n  v10 = sub_15500(a1[1], v7);\n  v11 = sub_15280(a1[1], v9, v10);\n  v12 = sub_169E0(a1[2], v11, &v17);\n  sub_12FF0(v5);\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  sub_12FF0(v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  if ( v17 )\n  {\n    v13 = sub_15390(a1[1], v12);\n    v14 = sub_13400(v13, 0LL);\n    sub_137D0(v13, *a1, v12);\n    sub_13140(v12, v12, v13, (v14 ^ v16) & 1);\n    sub_12FF0(v13);\n    result = sub_A4C0((__int64)a1, v12, v4);\n  }\n  else\n  {\n    sub_12FF0(v12);\n    sub_12FF0(v4);\n    result = 0LL;\n  }\n  if ( __readfsqword(0x28u) != v18 )\nLABEL_10:\n    __assert_fail(\"ec->sc\", \"ecc.c\", 0x3BEu, \"ecc_edwards_point_new_from_y\");\n  return result;\n}\n", 
            "funcStartAddr": "0xc3f0L", 
            "funcEndAddr": "0xc5b8L", 
            "funcName": "sub_C3F0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_C5C0(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // r13\n  _QWORD *v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 *v5; // rax\n  __int64 v6; // rdi\n  __int64 *v7; // r12\n  __int64 v8; // rdx\n  __int64 v9; // rsi\n  __int64 v10; // r15\n  __int64 v11; // r14\n  __int64 v12; // ST10_8\n  __int64 v13; // ST00_8\n  __int64 v14; // ST18_8\n  __int64 v15; // rbx\n  __int64 v16; // ST20_8\n  __int64 v17; // rbp\n  __int64 v18; // ST30_8\n  __int64 v19; // ST40_8\n  __int64 v20; // ST48_8\n  __int64 v21; // ST28_8\n  __int64 v22; // ST38_8\n  __int64 v23; // ST08_8\n  __int64 v24; // rbp\n  __int64 v25; // rbx\n  __int64 v26; // rax\n  __int64 v27; // rdi\n  __int64 v28; // rax\n  __int64 v29; // rdi\n  __int64 v30; // rax\n  __int64 v31; // rdi\n\n  v2 = (_QWORD *)a2[4];\n  if ( v2 != *(_QWORD **)(a1 + 32) )\n    __assert_fail(\"Q->ec == ec\", \"ecc.c\", 0x403u, \"ecc_edwards_add\");\n  v3 = (_QWORD *)a1;\n  v4 = a2;\n  v5 = (__int64 *)sub_11440(1LL, 40LL, 0LL);\n  v6 = v2[1];\n  *v5 = 0LL;\n  v7 = v5;\n  v8 = *a2;\n  v9 = *v3;\n  v5[4] = (__int64)v2;\n  v5[3] = 0LL;\n  v5[2] = 0LL;\n  v5[1] = 0LL;\n  v10 = sub_15280(v6, v9, v8);\n  v11 = sub_15280(v2[1], v3[1], v4[1]);\n  v12 = sub_15280(v2[1], v3[3], v4[3]);\n  v13 = sub_15280(v2[1], v3[2], v4[2]);\n  v14 = sub_16670(v2[1], *v3, v3[1]);\n  v15 = sub_16670(v2[1], *v4, v4[1]);\n  v16 = sub_15280(v2[1], v2[4], v10);\n  v17 = sub_15280(v2[1], v2[3], v12);\n  v18 = v15;\n  v19 = sub_15280(v2[1], v14, v15);\n  v20 = sub_16670(v2[1], v10, v11);\n  v21 = sub_16700(v2[1], v19, v20);\n  v22 = v17;\n  v23 = sub_16700(v2[1], v13, v17);\n  v24 = sub_16670(v2[1], v13, v17);\n  v25 = sub_16700(v2[1], v11, v16);\n  v26 = sub_15280(v2[1], v21, v23);\n  v27 = v2[1];\n  *v7 = v26;\n  v28 = sub_15280(v27, v23, v24);\n  v29 = v2[1];\n  v7[2] = v28;\n  v30 = sub_15280(v29, v24, v25);\n  v31 = v2[1];\n  v7[1] = v30;\n  v7[3] = sub_15280(v31, v25, v21);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  sub_12FF0(v13);\n  sub_12FF0(v14);\n  sub_12FF0(v18);\n  sub_12FF0(v16);\n  sub_12FF0(v22);\n  sub_12FF0(v19);\n  sub_12FF0(v20);\n  sub_12FF0(v21);\n  sub_12FF0(v23);\n  sub_12FF0(v24);\n  sub_12FF0(v25);\n  return v7;\n}\n", 
            "funcStartAddr": "0xc5c0L", 
            "funcEndAddr": "0xc85aL", 
            "funcName": "sub_C5C0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_C860(_QWORD *a1, __int64 a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // r15\n  __int64 *v4; // rbx\n  __int64 *v5; // r14\n  __int64 v6; // rax\n  signed __int64 v7; // rcx\n  unsigned int v8; // er15\n  signed __int64 v9; // ST00_8\n  int v10; // ebp\n  __int64 *v11; // r13\n  __int64 *v12; // r12\n  __int64 *v13; // rdi\n  unsigned int v14; // edx\n  __int64 *v16; // [rsp+8h] [rbp-50h]\n  _QWORD *v17; // [rsp+10h] [rbp-48h]\n\n  v17 = a1;\n  v2 = sub_C5C0((__int64)a1, a1);\n  v3 = v2;\n  v16 = v2;\n  v4 = sub_C330(a1);\n  v5 = sub_C330(v3);\n  v6 = sub_12FE0(a2, a1);\n  if ( v6 )\n  {\n    v7 = v6 - 1;\n    v8 = 1;\n    do\n    {\n      v9 = v7;\n      v10 = sub_13400(a2, v7);\n      v11 = sub_C5C0((__int64)v4, v5);\n      sub_A630(v4, v5);\n      v12 = sub_C5C0((__int64)v4, v4);\n      sub_C3B0(v4);\n      v13 = v5;\n      v4 = v12;\n      v5 = v11;\n      sub_C3B0(v13);\n      sub_A630(v12, v11);\n      sub_A590(v12, v17, v8);\n      v14 = v8;\n      v8 &= ~v10;\n      sub_A590(v11, v16, v14);\n      v7 = v9 - 1;\n    }\n    while ( v9 );\n  }\n  else\n  {\n    v11 = v5;\n    v12 = v4;\n  }\n  sub_C3B0(v16);\n  sub_C3B0(v11);\n  return v12;\n}\n", 
            "funcStartAddr": "0xc860L", 
            "funcEndAddr": "0xc988L", 
            "funcName": "sub_C860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C990(_QWORD *a1, __int64 *a2)\n{\n  __int64 v2; // r12\n  __int64 v3; // r13\n  __int64 v4; // r14\n  __int64 v5; // ST08_8\n  __int64 v6; // r15\n  __int64 v7; // r14\n  __int64 v8; // r13\n  __int64 v9; // r14\n  __int64 v10; // r15\n  __int64 v11; // r12\n  __int64 v12; // rbp\n  int v13; // ebx\n\n  v2 = a2[4];\n  if ( v2 != a1[4] )\n    __assert_fail(\"Q->ec == ec\", \"ecc.c\", 0x47Fu, \"ecc_edwards_eq\");\n  v3 = *(_QWORD *)(v2 + 8);\n  v4 = a1[2];\n  v5 = *a2;\n  v6 = sub_15280(*(_QWORD *)(v2 + 8), *a1, a2[2]);\n  v7 = sub_15280(v3, v5, v4);\n  LODWORD(v5) = sub_14030(v6, v7);\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  v8 = *(_QWORD *)(v2 + 8);\n  v9 = a2[1];\n  v10 = a1[2];\n  v11 = sub_15280(*(_QWORD *)(v2 + 8), a1[1], a2[2]);\n  v12 = sub_15280(v8, v9, v10);\n  v13 = sub_14030(v11, v12);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  return v13 & (unsigned int)v5;\n}\n", 
            "funcStartAddr": "0xc990L", 
            "funcEndAddr": "0xca89L", 
            "funcName": "sub_C990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CA90(_QWORD *a1, __int64 *a2, __int64 *a3)\n{\n  __int64 *v3; // r13\n  __int64 v4; // rbp\n  _QWORD *v5; // rbx\n  __int64 v6; // r12\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = a1[4];\n  v5 = a1;\n  v6 = sub_15500(*(_QWORD *)(v4 + 8), a1[2]);\n  sub_15160(*(_QWORD *)(v4 + 8), *v5, *v5, v6);\n  sub_15160(*(_QWORD *)(v4 + 8), v5[1], v5[1], v6);\n  sub_15160(*(_QWORD *)(v4 + 8), v5[2], v5[2], v6);\n  sub_12FF0(v6);\n  result = sub_15160(*(_QWORD *)(v4 + 8), v5[3], *v5, v5[1]);\n  if ( a2 )\n  {\n    result = sub_15390(*(_QWORD *)(v4 + 8), *a1);\n    *a2 = result;\n  }\n  if ( v3 )\n  {\n    result = sub_15390(*(_QWORD *)(v4 + 8), a1[1]);\n    *v3 = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xca90L", 
            "funcEndAddr": "0xcb3cL", 
            "funcName": "sub_CA90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CB40(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r12\n  __int64 v5; // rbp\n  __int64 v6; // rax\n  _QWORD *v7; // rbx\n\n  v4 = a3;\n  v5 = a4;\n  v6 = sub_35A10(off_260B80);\n  v7 = (_QWORD *)v6;\n  if ( v6 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n  sub_10C20(v7[1], a1, a2);\n  sub_10C10(v7[1], v4, 8LL);\n  (*(void (__fastcall **)(_QWORD *, __int64))(*v7 + 24LL))(v7, v5);\n  (*(void (__fastcall **)(_QWORD *))(*v7 + 8LL))(v7);\n  sub_10C10(v7[1], v5, 16LL);\n  sub_10C20(v7[1], a1, a2);\n  sub_10C10(v7[1], v4, 8LL);\n  (*(void (__fastcall **)(_QWORD *, __int64))(*v7 + 24LL))(v7, v5 + 16);\n  return (*(__int64 (__fastcall **)(_QWORD *))(*v7 + 32LL))(v7);\n}\n", 
            "funcStartAddr": "0xcb40L", 
            "funcEndAddr": "0xcbf9L", 
            "funcName": "sub_CB40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CC00(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rbp\n\n  v3 = a3;\n  v4 = sub_35A10(off_260B80);\n  v5 = (_QWORD *)v4;\n  if ( v4 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);\n  sub_10C20(v5[1], a1, a2);\n  v6 = (*(__int64 (__fastcall **)(_QWORD, __int64))*v5)(*v5, a1);\n  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v6 + 16LL))(v6, v5);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v6 + 24LL))(v6, v3);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 32LL))(v6);\n  sub_10C10(v5[1], v3, 16LL);\n  (*(void (__fastcall **)(_QWORD *, __int64))(*v5 + 24LL))(v5, v3 + 16);\n  return (*(__int64 (__fastcall **)(_QWORD *))(*v5 + 32LL))(v5);\n}\n", 
            "funcStartAddr": "0xcc00L", 
            "funcEndAddr": "0xcca3L", 
            "funcName": "sub_CC00"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall sub_CCB0(__m128i *a1, _QWORD *a2)\n{\n  unsigned __int8 v2; // al\n  unsigned __int8 v3; // r14\n  int v4; // er14\n  int v5; // ebx\n  unsigned __int8 v6; // al\n  unsigned __int64 v7; // rbp\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __m128i v10; // xmm0\n  __m128i *result; // rax\n  int v12; // eax\n  int v13; // er15\n  char v14; // al\n  __int128 v15; // [rsp+0h] [rbp-58h]\n  __int64 v16; // [rsp+10h] [rbp-48h]\n\n  v2 = sub_11070(*a2);\n  v3 = v2;\n  v2 &= 0x1Fu;\n  v4 = v3 & 0xE0;\n  v5 = v2;\n  if ( v2 == 31 )\n  {\n    v5 = 0;\n    do\n    {\n      v14 = sub_11070(*a2);\n      v5 = v14 & 0x7F | (v5 << 7);\n    }\n    while ( v14 < 0 );\n  }\n  v6 = sub_11070(*a2);\n  v7 = v6;\n  if ( (v6 & 0x80u) != 0 )\n  {\n    v12 = v6 & 0x7F;\n    v7 = 0LL;\n    v13 = v12 - 1;\n    if ( v12 )\n    {\n      do\n      {\n        --v13;\n        v7 = (unsigned __int8)sub_11070(*a2) | (v7 << 8);\n      }\n      while ( v13 != -1 );\n    }\n  }\n  v8 = sub_11030(*a2, v7);\n  *(_QWORD *)&v15 = __PAIR__(v4, v5);\n  *((_QWORD *)&v15 + 1) = v8;\n  v16 = v9;\n  v10 = _mm_load_si128((const __m128i *)&v15);\n  a1[1].m128i_i64[0] = v9;\n  result = a1;\n  *a1 = v10;\n  return result;\n}\n", 
            "funcStartAddr": "0xccb0L", 
            "funcEndAddr": "0xcd94L", 
            "funcName": "sub_CCB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CDA0(_QWORD *a1)\n{\n  int v1; // eax\n\n  v1 = sub_11140(*a1);\n  return sub_11030(*a1, (unsigned int)(v1 + 7) >> 3);\n}\n", 
            "funcStartAddr": "0xcda0L", 
            "funcEndAddr": "0xcdbbL", 
            "funcName": "sub_CDA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CDC0(_QWORD *a1, char a2, signed int a3, char a4)\n{\n  _QWORD *v4; // r12\n  signed int v5; // ebp\n  __int64 v6; // rdi\n  signed int i; // ebx\n  int v8; // ebx\n  signed int v9; // esi\n  __int64 result; // rax\n\n  v4 = a1;\n  v5 = a3;\n  sub_10CD0(*a1, (unsigned __int8)(a4 | a2));\n  if ( v5 <= 127 )\n    return sub_10CD0(*a1, (unsigned __int8)v5);\n  v6 = *a1;\n  i = v5 >> 8;\n  if ( v5 >> 8 )\n  {\n    for ( i = 1; v5 >> 8 * (i + 1) > 0; ++i )\n      ;\n    sub_10CD0(v6, (unsigned __int8)(i + 1) | 0x80u);\n  }\n  else\n  {\n    sub_10CD0(v6, 129LL);\n  }\n  v8 = 8 * i;\n  do\n  {\n    v9 = v5 >> v8;\n    v8 -= 8;\n    result = sub_10CD0(*v4, (unsigned __int8)v9);\n  }\n  while ( v8 != -8 );\n  return result;\n}\n", 
            "funcStartAddr": "0xcdc0L", 
            "funcEndAddr": "0xce64L", 
            "funcName": "sub_CDC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CE70(__int64 a1, _QWORD *a2, __int64 a3)\n{\n  _QWORD *v3; // rbx\n  __int64 v4; // rbp\n  _QWORD *v5; // r14\n  _QWORD *v6; // r15\n  __int64 v7; // rax\n  signed __int64 v8; // r13\n  __int64 v9; // rax\n  signed __int64 v10; // r12\n  __int64 v11; // rbp\n  __int64 v12; // r12\n  __int64 v13; // rsi\n  signed int v14; // esi\n  __int64 v15; // rbp\n  FILE *v16; // rax\n  FILE *v17; // rbx\n  FILE *v18; // rdi\n  unsigned int v19; // ebx\n  __int64 v21; // [rsp+0h] [rbp-B8h]\n  __int64 v22; // [rsp+10h] [rbp-A8h]\n  unsigned int v23; // [rsp+2Ch] [rbp-8Ch]\n  __int128 v24; // [rsp+30h] [rbp-88h]\n  char v25; // [rsp+40h] [rbp-78h]\n  __int64 v26; // [rsp+60h] [rbp-58h]\n  unsigned __int64 v27; // [rsp+78h] [rbp-40h]\n\n  v3 = a2;\n  v4 = a3;\n  v22 = a3;\n  v27 = __readfsqword(0x28u);\n  v5 = (_QWORD *)sub_47400();\n  (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)*a2 + 56LL))(*a2, v5 + 3);\n  v6 = (_QWORD *)sub_47410();\n  (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)*v3 + 72LL))(*v3, v6 + 3);\n  v7 = sub_47410();\n  v8 = v7 + 24;\n  v21 = v7;\n  sub_10F80(v7 + 24, \"openssh-key-v1\");\n  if ( v4 )\n  {\n    sub_3B660(&v24, 16LL);\n    sub_10F30(v8, \"aes256-ctr\");\n    sub_10F30(v8, \"bcrypt\");\n    v9 = sub_47410();\n    v10 = v9 + 24;\n    v11 = v9;\n    sub_10E70(v9 + 24, &v24, 16LL);\n    sub_10D80(v10, 16LL);\n    sub_10F60(v8, v11);\n  }\n  else\n  {\n    v24 = 0LL;\n    sub_10F30(v8, \"none\");\n    sub_10F30(v8, \"none\");\n    sub_10F30(v8, \"\");\n  }\n  sub_10D80(v8, 1LL);\n  sub_10E70(v8, *v5, v5[2]);\n  v12 = sub_47410();\n  sub_3B660(&v23, 4LL);\n  v13 = _byteswap_ulong(v23);\n  sub_10D80(v12 + 24, v13);\n  sub_10D80(v12 + 24, (unsigned int)v13);\n  sub_10F30(v12 + 24, *(_QWORD *)(*(_QWORD *)*v3 + 104LL));\n  sub_10C10(v12 + 24, *v6, v6[2]);\n  sub_10F30(v12 + 24, v3[1]);\n  v14 = 1;\n  do\n    sub_10CD0(v12 + 24, (unsigned __int8)v14++);\n  while ( *(_BYTE *)(v12 + 16) & 0xF );\n  if ( v22 )\n  {\n    sub_206F0(v22, &v24, 16LL, 16LL, &v25, 48LL);\n    v15 = sub_18690(&off_25F600);\n    (*(void (__fastcall **)(__int64, char *))(*(_QWORD *)v15 + 24LL))(v15, &v25);\n    (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v15 + 16LL))(v15, &v26);\n    (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)v15 + 32LL))(\n      v15,\n      *(_QWORD *)(v12 + 8),\n      *(unsigned int *)(v12 + 16));\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v15 + 8LL))(v15);\n    sub_47E30(&v25, 48LL);\n  }\n  sub_10F60(v8, v12);\n  v16 = (FILE *)sub_448E0(a1, \"wb\", 1LL);\n  v17 = v16;\n  if ( v16 )\n  {\n    fwrite(\"-----BEGIN OPENSSH PRIVATE KEY-----\\n\", 1uLL, 0x24uLL, v16);\n    sub_3A400(v17, *(_QWORD *)(v21 + 8), (unsigned int)*(_QWORD *)(v21 + 16), 64LL);\n    fwrite(\"-----END OPENSSH PRIVATE KEY-----\\n\", 1uLL, 0x22uLL, v17);\n    v18 = v17;\n    v19 = 1;\n    fclose(v18);\n  }\n  else\n  {\n    v19 = 0;\n    if ( !v21 )\n      goto LABEL_10;\n  }\n  sub_47420(v21);\nLABEL_10:\n  sub_47420(v6);\n  sub_47420(v5);\n  return v19;\n}\n", 
            "funcStartAddr": "0xce70L", 
            "funcEndAddr": "0xd1a8L", 
            "funcName": "sub_CE70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_D1B0(__int64 a1, const char **a2)\n{\n  __int64 v2; // r12\n  __int64 v3; // rbx\n  __int64 v4; // rax\n  __int64 v5; // rdi\n  void *v6; // rax\n  size_t v7; // rdx\n  char *v8; // rax\n  const char *v9; // rbp\n  const char *v10; // r13\n  size_t v11; // rax\n  __int64 v12; // rdi\n  __int64 v13; // rdi\n  __int64 result; // rax\n  unsigned __int64 v15; // rt1\n  char v16; // al\n  bool v17; // cf\n  bool v18; // zf\n  const char *v19; // rdi\n  signed __int64 v20; // rcx\n  const char *v21; // rsi\n  char v22; // al\n  bool v23; // cf\n  bool v24; // zf\n  const char *v25; // rdi\n  signed __int64 v26; // rcx\n  const char *v27; // rsi\n  char v28; // al\n  bool v29; // cf\n  bool v30; // zf\n  char *v31; // r14\n  size_t v32; // rsi\n  char v33; // r13\n  __int64 v34; // r12\n  void *v35; // rax\n  size_t v36; // rdx\n  char *v37; // rax\n  char *v38; // rax\n  unsigned __int8 v39; // r15\n  signed __int64 v40; // rdx\n  bool v41; // cf\n  bool v42; // zf\n  char *v43; // ST20_8\n  const unsigned __int16 **v44; // rax\n  const unsigned __int16 *v45; // rcx\n  bool v46; // cf\n  bool v47; // zf\n  const char *v48; // rdi\n  signed __int64 v49; // rcx\n  const char *v50; // rsi\n  char v51; // al\n  bool v52; // cf\n  bool v53; // zf\n  bool v54; // cf\n  bool v55; // zf\n  _BYTE *v56; // rsi\n  const char *v57; // rdi\n  signed __int64 v58; // rcx\n  size_t v59; // rsi\n  const char *v60; // rdi\n  signed __int64 v61; // rcx\n  const char *v62; // rsi\n  char v63; // al\n  const char *v64; // rdi\n  signed __int64 v65; // rcx\n  const char *v66; // rsi\n  char v67; // al\n  bool v68; // cf\n  bool v69; // zf\n  const char *v70; // rdi\n  signed __int64 v71; // rcx\n  _BYTE *v72; // rsi\n  char v73; // al\n  bool v74; // cf\n  bool v75; // zf\n  char *v76; // rax\n  signed __int64 v77; // r13\n  signed __int64 v78; // r14\n  __int64 v79; // rax\n  __int64 v80; // rax\n  char *v81; // r15\n  char v82; // cl\n  int v83; // eax\n  int v84; // eax\n  const char *v85; // rdi\n  signed __int64 v86; // rcx\n  const char *v87; // rsi\n  char v88; // al\n  bool v89; // cf\n  bool v90; // zf\n  const char *v91; // rdi\n  signed __int64 v92; // rcx\n  _BYTE *v93; // rsi\n  const char *v94; // rdi\n  signed __int64 v95; // rcx\n  const char *v96; // rsi\n  const char **v97; // [rsp+10h] [rbp-88h]\n  __int64 v98; // [rsp+18h] [rbp-80h]\n  signed int s; // [rsp+20h] [rbp-78h]\n  char *sa; // [rsp+20h] [rbp-78h]\n  char v101; // [rsp+32h] [rbp-66h]\n  char *v102; // [rsp+38h] [rbp-60h]\n  int v103; // [rsp+4Ch] [rbp-4Ch]\n  char v104; // [rsp+51h] [rbp-47h]\n  char v105[4]; // [rsp+54h] [rbp-44h]\n  unsigned __int64 v106; // [rsp+58h] [rbp-40h]\n\n  v2 = a1;\n  v97 = a2;\n  v106 = __readfsqword(0x28u);\n  v3 = sub_11440(1LL, 56LL, 0LL);\n  v4 = sub_47410(1LL, 56LL);\n  v5 = *(_QWORD *)(a1 + 32);\n  *(_QWORD *)(v3 + 48) = v4;\n  v6 = (void *)sub_112C0(v5);\n  if ( *(_DWORD *)(*(_QWORD *)(v2 + 32) + 24LL) )\n  {\n    v10 = \"unexpected end of file\";\n    sub_47E30(v105, 4LL);\n    goto LABEL_6;\n  }\n  v8 = (char *)sub_48120(v6, v7);\n  v9 = v8;\n  if ( !v8 )\n  {\nLABEL_12:\n    v10 = \"unexpected end of file\";\n    goto LABEL_5;\n  }\n  v10 = \"file does not begin with OpenSSH key header\";\n  if ( !(unsigned __int8)sub_48160(v8, \"-----BEGIN \") )\n    goto LABEL_4;\n  v16 = sub_48190(v9, \"PRIVATE KEY-----\");\n  v17 = 0;\n  v18 = v16 == 0;\n  v101 = v16;\n  if ( !v16 )\n    goto LABEL_4;\n  v19 = \"-----BEGIN RSA PRIVATE KEY-----\";\n  v20 = 32LL;\n  v21 = v9;\n  do\n  {\n    if ( !v20 )\n      break;\n    v17 = (const unsigned __int8)*v21 < *v19;\n    v18 = *v21++ == *v19++;\n    --v20;\n  }\n  while ( v18 );\n  v22 = (!v17 && !v18) - v17;\n  v23 = 0;\n  v24 = v22 == 0;\n  if ( v22 )\n  {\n    v25 = \"-----BEGIN DSA PRIVATE KEY-----\";\n    v26 = 32LL;\n    v27 = v9;\n    do\n    {\n      if ( !v26 )\n        break;\n      v23 = (const unsigned __int8)*v27 < *v25;\n      v24 = *v27++ == *v25++;\n      --v26;\n    }\n    while ( v24 );\n    v28 = (!v23 && !v24) - v23;\n    v29 = 0;\n    v30 = v28 == 0;\n    if ( v28 )\n    {\n      v85 = \"-----BEGIN EC PRIVATE KEY-----\";\n      v86 = 31LL;\n      v87 = v9;\n      do\n      {\n        if ( !v86 )\n          break;\n        v29 = (const unsigned __int8)*v87 < *v85;\n        v30 = *v87++ == *v85++;\n        --v86;\n      }\n      while ( v30 );\n      v88 = (!v29 && !v30) - v29;\n      v89 = 0;\n      v90 = v88 == 0;\n      if ( v88 )\n      {\n        v94 = \"-----BEGIN OPENSSH PRIVATE KEY-----\";\n        v95 = 36LL;\n        v96 = v9;\n        v10 = \"unrecognised key type\";\n        do\n        {\n          if ( !v95 )\n            break;\n          v89 = (const unsigned __int8)*v96 < *v94;\n          v90 = *v96++ == *v94++;\n          --v95;\n        }\n        while ( v90 );\n        if ( (!v89 && !v90) == v89 )\n          v10 = \"this is a new-style OpenSSH key\";\n        goto LABEL_4;\n      }\n      *(_DWORD *)v3 = 2;\n    }\n    else\n    {\n      *(_DWORD *)v3 = 0;\n    }\n  }\n  else\n  {\n    *(_DWORD *)v3 = 1;\n  }\n  v31 = &v104;\n  v32 = strlen(v9);\n  v33 = 0;\n  sub_47E30(v9, v32);\n  sub_114C0(v9);\n  v98 = v2;\n  *(_BYTE *)(v3 + 4) = 0;\n  v34 = 0LL;\n  *(_OWORD *)(v3 + 12) = 0LL;\n  *(_OWORD *)(v3 + 28) = 0LL;\n  while ( 1 )\n  {\n    v35 = (void *)sub_112C0(*(_QWORD *)(v98 + 32));\n    if ( *(_DWORD *)(*(_QWORD *)(v98 + 32) + 24LL) )\n      goto LABEL_12;\n    v37 = (char *)sub_48120(v35, v36);\n    v9 = v37;\n    if ( !v37 )\n      goto LABEL_12;\n    if ( (unsigned __int8)sub_48160(v37, \"-----END \") && (unsigned __int8)sub_48190(v9, \"PRIVATE KEY-----\") )\n      break;\n    v38 = strchr(v9, 58);\n    if ( !v38 )\n    {\n      v81 = (char *)v9;\n      while ( 1 )\n      {\n        v82 = *v81;\n        if ( (unsigned __int8)((*v81 & 0xDF) - 65) > 0x19u )\n        {\n          if ( (unsigned __int8)v82 > 0x3Du )\n          {\n            v33 = v101;\n            goto LABEL_44;\n          }\n          v33 = ~(unsigned __int8)(0x23FF880000000000uLL >> v82) & 1;\n          if ( v33 )\n            goto LABEL_44;\n        }\n        v83 = v34 + 1;\n        v105[v34] = v82;\n        if ( (_DWORD)v34 == 3 )\n        {\n          v84 = sub_478D0(v105, v31);\n          if ( v84 <= 0 )\n          {\n            v10 = \"invalid base64 encoding\";\n            goto LABEL_4;\n          }\n          sub_10C10(*(_QWORD *)(v3 + 48) + 24LL, v31, v84);\n          sub_47E30(v31, 3LL);\n          v83 = 0;\n        }\n        ++v81;\n        v34 = v83;\n      }\n    }\n    if ( v33 )\n    {\n      v10 = \"header found in body of key data\";\n      goto LABEL_4;\n    }\n    v39 = v38[1];\n    v40 = (signed __int64)(v38 + 1);\n    *v38 = 0;\n    v41 = 0;\n    v42 = v39 == 0;\n    if ( !v39 )\n    {\nLABEL_47:\n      v60 = \"Proc-Type\";\n      v61 = 10LL;\n      v62 = v9;\n      do\n      {\n        if ( !v61 )\n          break;\n        v41 = (const unsigned __int8)*v62 < *v60;\n        v42 = *v62++ == *v60++;\n        --v61;\n      }\n      while ( v42 );\n      v63 = (!v41 && !v42) - v41;\n      v52 = 0;\n      v53 = v63 == 0;\n      if ( !v63 )\n      {\nLABEL_99:\n        v10 = \"Proc-Type is not 4 (only 4 is supported)\";\n        goto LABEL_4;\n      }\nLABEL_51:\n      v64 = \"DEK-Info\";\n      v65 = 9LL;\n      v66 = v9;\n      do\n      {\n        if ( !v65 )\n          break;\n        v52 = (const unsigned __int8)*v66 < *v64;\n        v53 = *v66++ == *v64++;\n        --v65;\n      }\n      while ( v53 );\n      v67 = (!v52 && !v53) - v52;\n      v68 = 0;\n      v69 = v67 == 0;\n      if ( !v67 )\n      {\n        v70 = \"DES-EDE3-CBC,\";\n        v71 = 13LL;\n        v72 = (_BYTE *)v40;\n        do\n        {\n          if ( !v71 )\n            break;\n          v68 = *v72 < (const unsigned __int8)*v70;\n          v69 = *v72++ == *v70++;\n          --v71;\n        }\n        while ( v69 );\n        v73 = (!v68 && !v69) - v68;\n        v74 = 0;\n        v75 = v73 == 0;\n        if ( v73 )\n        {\n          v91 = \"AES-128-CBC,\";\n          v92 = 12LL;\n          v93 = (_BYTE *)v40;\n          do\n          {\n            if ( !v92 )\n              break;\n            v74 = *v93 < (const unsigned __int8)*v91;\n            v75 = *v93++ == *v91++;\n            --v92;\n          }\n          while ( v75 );\n          if ( (!v74 && !v75) != v74 )\n          {\n            v10 = \"unsupported cipher\";\n            goto LABEL_4;\n          }\n          *(_DWORD *)(v3 + 8) = 1;\n          s = 16;\n        }\n        else\n        {\n          *(_DWORD *)(v3 + 8) = 0;\n          s = 8;\n        }\n        v76 = strchr((const char *)v40, 44);\n        v102 = v31;\n        v77 = (signed __int64)(v76 + 1);\n        v78 = v3 + 12;\n        sa = &v76[2 * (s - 1) + 3];\n        do\n        {\n          if ( (unsigned int)__isoc99_sscanf(v77, \"%2x\", &v103) != 1 )\n          {\n            v10 = \"expected more iv data in DEK-Info\";\n            goto LABEL_4;\n          }\n          v77 += 2LL;\n          *(_BYTE *)(++v78 - 1) = v103;\n        }\n        while ( sa != (char *)v77 );\n        v33 = 0;\n        v34 = (signed int)v34;\n        v31 = v102;\n        if ( *sa )\n        {\n          v10 = \"more iv data than expected in DEK-Info\";\nLABEL_4:\n          v11 = strlen(v9);\n          sub_47E30(v9, v11);\n          sub_114C0(v9);\n          goto LABEL_5;\n        }\n      }\n      goto LABEL_44;\n    }\n    v43 = v38 + 1;\n    v44 = __ctype_b_loc();\n    v40 = (signed __int64)v43;\n    v45 = *v44;\n    while ( 1 )\n    {\n      v46 = 0;\n      v47 = (v45[v39] & 0x2000) == 0;\n      if ( !(v45[v39] & 0x2000) )\n        break;\n      v39 = *(_BYTE *)++v40;\n      v41 = 0;\n      v42 = *(_BYTE *)v40 == 0;\n      if ( !*(_BYTE *)v40 )\n        goto LABEL_47;\n    }\n    v48 = \"Proc-Type\";\n    v49 = 10LL;\n    v50 = v9;\n    do\n    {\n      if ( !v49 )\n        break;\n      v46 = (const unsigned __int8)*v50 < *v48;\n      v47 = *v50++ == *v48++;\n      --v49;\n    }\n    while ( v47 );\n    v51 = (!v46 && !v47) - v46;\n    v52 = 0;\n    v53 = v51 == 0;\n    if ( v51 )\n      goto LABEL_51;\n    if ( v39 != 52 )\n      goto LABEL_99;\n    v54 = *(_BYTE *)(v40 + 1) < 0x2Cu;\n    v55 = *(_BYTE *)(v40 + 1) == 44;\n    if ( *(_BYTE *)(v40 + 1) != 44 )\n      goto LABEL_99;\n    v56 = (_BYTE *)(v40 + 2);\n    v57 = \"ENCRYPTED\";\n    v58 = 10LL;\n    do\n    {\n      if ( !v58 )\n        break;\n      v54 = *v56 < (const unsigned __int8)*v57;\n      v55 = *v56++ == *v57++;\n      --v58;\n    }\n    while ( v55 );\n    if ( (!v54 && !v55) == v54 )\n      *(_BYTE *)(v3 + 4) = 1;\nLABEL_44:\n    v59 = strlen(v9);\n    sub_47E30(v9, v59);\n    sub_114C0(v9);\n  }\n  sub_114C0(v9);\n  v79 = *(_QWORD *)(v3 + 48);\n  if ( !v79 || (v80 = *(_QWORD *)(v79 + 16)) == 0 )\n  {\n    v10 = \"key body not present\";\n    goto LABEL_5;\n  }\n  if ( *(_BYTE *)(v3 + 4) && v80 & 7 )\n    goto LABEL_102;\n  sub_47E30(v105, 4LL);\n  if ( v97 )\n    *v97 = 0LL;\n  while ( 1 )\n  {\n    result = v3;\n    v15 = __readfsqword(0x28u);\n    v3 = v15 ^ v106;\n    if ( v15 == v106 )\n      break;\nLABEL_102:\n    v10 = \"encrypted key blob is not a multiple of cipher block size\";\nLABEL_5:\n    sub_47E30(v105, 4LL);\nLABEL_6:\n    v12 = *(_QWORD *)(v3 + 48);\n    if ( v12 )\n      sub_47420(v12);\n    sub_47E30(v3, 56LL);\n    v13 = v3;\n    v3 = 0LL;\n    sub_114C0(v13);\n    if ( v97 )\n      *v97 = v10;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xd1b0L", 
            "funcEndAddr": "0xd7efL", 
            "funcName": "sub_D1B0"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_D7F0@<rax>(const char *a1@<rbp>, __int64 a2@<rdi>, const char **a3@<rsi>)\n{\n  __int64 v3; // r15\n  char *v4; // rax\n  char *v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  void *v8; // rax\n  size_t v9; // rdx\n  const char *v10; // rax\n  bool v11; // cf\n  bool v12; // zf\n  const char *v13; // rdi\n  const char *v14; // rsi\n  signed __int64 v15; // rcx\n  const char *v16; // r12\n  __int64 v17; // rbx\n  size_t v18; // rsi\n  __int64 v19; // rdi\n  char *result; // rax\n  void *v21; // rax\n  size_t v22; // rdx\n  const char *v23; // rax\n  bool v24; // cf\n  bool v25; // zf\n  const char *v26; // rdi\n  const char *v27; // rsi\n  signed __int64 v28; // rcx\n  char *v29; // rax\n  __int64 v30; // r12\n  signed __int64 v31; // r13\n  const unsigned __int16 *v32; // rax\n  int v33; // er13\n  const char *v34; // r12\n  int v35; // er13\n  bool v36; // cf\n  bool v37; // zf\n  signed __int64 v38; // r14\n  const char *v39; // rax\n  const char *v40; // r12\n  int v41; // eax\n  int v42; // esi\n  size_t v43; // rax\n  void *v44; // rax\n  size_t v45; // rdx\n  const char *v46; // rdi\n  signed __int64 v47; // rcx\n  const char *v48; // rsi\n  size_t v49; // rax\n  char *v50; // r14\n  char v51; // cl\n  int v52; // eax\n  int v53; // eax\n  char *dest; // [rsp+8h] [rbp-70h]\n  const char **v55; // [rsp+10h] [rbp-68h]\n  char v56; // [rsp+18h] [rbp-60h]\n  __int64 v57; // [rsp+20h] [rbp-58h]\n  char v58; // [rsp+31h] [rbp-47h]\n  char v59[4]; // [rsp+34h] [rbp-44h]\n  unsigned __int64 v60; // [rsp+38h] [rbp-40h]\n\n  v3 = a2;\n  v55 = a3;\n  v60 = __readfsqword(0x28u);\n  v4 = (char *)sub_11440(1LL, 264LL, 0LL);\n  *v4 = 0;\n  v5 = v4;\n  dest = v4;\n  v6 = sub_47410(1LL, 264LL);\n  v7 = *(_QWORD *)(a2 + 32);\n  *((_QWORD *)v5 + 32) = v6;\n  v8 = (void *)sub_112C0(v7);\n  if ( *(_DWORD *)(*(_QWORD *)(v3 + 32) + 24LL) )\n    goto LABEL_33;\n  v10 = (const char *)sub_48120(v8, v9);\n  v11 = 0;\n  v12 = v10 == 0LL;\n  a1 = v10;\n  if ( !v10 )\n    goto LABEL_33;\n  v13 = \"---- BEGIN SSH2 ENCRYPTED PRIVATE KEY ----\";\n  v14 = v10;\n  v15 = 43LL;\n  v16 = \"file does not begin with ssh.com key header\";\n  do\n  {\n    if ( !v15 )\n      break;\n    v11 = (const unsigned __int8)*v14 < *v13;\n    v12 = *v14++ == *v13++;\n    --v15;\n  }\n  while ( v12 );\n  v17 = (char)((!v11 && !v12) - v11);\n  v18 = strlen(v10);\n  if ( !(_DWORD)v17 )\n  {\n    sub_47E30(a1, v18);\n    sub_114C0(a1);\n    v56 = 0;\n    while ( 1 )\n    {\n      v21 = (void *)sub_112C0(*(_QWORD *)(v3 + 32));\n      if ( *(_DWORD *)(*(_QWORD *)(v3 + 32) + 24LL) )\n        goto LABEL_33;\n      v23 = (const char *)sub_48120(v21, v22);\n      v24 = 0;\n      v25 = v23 == 0LL;\n      a1 = v23;\n      if ( !v23 )\n        goto LABEL_33;\n      v26 = \"---- END SSH2 ENCRYPTED PRIVATE KEY ----\";\n      v27 = v23;\n      v28 = 41LL;\n      do\n      {\n        if ( !v28 )\n          break;\n        v24 = (const unsigned __int8)*v27 < *v26;\n        v25 = *v27++ == *v26++;\n        --v28;\n      }\n      while ( v25 );\n      if ( (!v24 && !v25) == v24 )\n      {\n        sub_114C0(v23);\n        v19 = *((_QWORD *)dest + 32);\n        if ( !*(_QWORD *)(v19 + 16) )\n        {\n          v16 = \"key body not present\";\n          goto LABEL_8;\n        }\n        if ( v55 )\n          *v55 = 0LL;\n        goto LABEL_10;\n      }\n      v29 = strchr(v23, 58);\n      if ( v29 )\n      {\n        if ( v56 )\n        {\n          v16 = \"header found in body of key data\";\n          v18 = strlen(a1);\n          break;\n        }\n        v30 = (unsigned __int8)v29[1];\n        v31 = (signed __int64)(v29 + 1);\n        *v29 = 0;\n        if ( (_BYTE)v30 )\n        {\n          v32 = *__ctype_b_loc();\n          do\n          {\n            if ( !(v32[v30] & 0x2000) )\n              break;\n            v30 = *(unsigned __int8 *)++v31;\n          }\n          while ( (_BYTE)v30 );\n        }\n        v33 = v31 - (_DWORD)a1;\n        v34 = &a1[v33];\n        v57 = v33;\n        v35 = strlen(&a1[v33]) + v33;\n        if ( a1[v35] )\n          __assert_fail(\"!line[len]\", \"import.c\", 0x6F5u, \"load_sshcom_key\");\n        v36 = a1[v35 - 1] < 0x5Cu;\n        v37 = a1[v35 - 1] == 92;\n        if ( a1[v35 - 1] == 92 )\n        {\n          v38 = v35 - 1LL;\n          while ( 1 )\n          {\n            v44 = (void *)sub_112C0(*(_QWORD *)(v3 + 32));\n            if ( *(_DWORD *)(*(_QWORD *)(v3 + 32) + 24LL) )\n              break;\n            v39 = (const char *)sub_48120(v44, v45);\n            v40 = v39;\n            if ( !v39 )\n              break;\n            v41 = strlen(v39);\n            v42 = v35 + v41 + 1;\n            v35 = v35 + v41 - 1;\n            a1 = (const char *)sub_11480(a1, v42, 1LL);\n            strcpy((char *)&a1[v38], v40);\n            if ( a1[v35] )\n              __assert_fail(\"!line[len]\", \"import.c\", 0x704u, \"load_sshcom_key\");\n            v38 = v35 - 1LL;\n            v43 = strlen(v40);\n            sub_47E30(v40, v43);\n            sub_114C0(v40);\n            if ( a1[v35 - 1] != 92 )\n            {\n              v17 = (signed int)v17;\n              v36 = __CFADD__(a1, v57);\n              v37 = &a1[v57] == 0LL;\n              v34 = &a1[v57];\n              goto LABEL_35;\n            }\n          }\n          if ( a1 )\n            goto LABEL_61;\nLABEL_33:\n          v16 = \"unexpected end of file\";\n          v19 = *((_QWORD *)dest + 32);\n          goto LABEL_8;\n        }\nLABEL_35:\n        v46 = \"Comment\";\n        v47 = 8LL;\n        v48 = a1;\n        do\n        {\n          if ( !v47 )\n            break;\n          v36 = (const unsigned __int8)*v48 < *v46;\n          v37 = *v48++ == *v46++;\n          --v47;\n        }\n        while ( v37 );\n        if ( (!v36 && !v37) == v36 )\n        {\n          if ( *v34 == 34 && v34[strlen(v34) - 1] == 34 )\n          {\n            v34[strlen(v34 + 1)] = 0;\n            ++v34;\n          }\n          strncpy(dest, v34, 0x100uLL);\n          dest[255] = 0;\n        }\n      }\n      else\n      {\n        v50 = (char *)a1;\n        while ( 1 )\n        {\n          v51 = *v50;\n          if ( (unsigned __int8)((*v50 & 0xDF) - 65) > 0x19u )\n          {\n            if ( (unsigned __int8)v51 > 0x3Du )\n            {\n              v56 = 1;\n              goto LABEL_41;\n            }\n            if ( ~(unsigned __int8)(0x23FF880000000000uLL >> v51) & 1 )\n              break;\n          }\n          v52 = v17 + 1;\n          v59[v17] = v51;\n          if ( (_DWORD)v17 == 3 )\n          {\n            v53 = sub_478D0(v59, &v58);\n            if ( v53 <= 0 )\n            {\n              v16 = \"invalid base64 encoding\";\n              v18 = strlen(a1);\n              goto LABEL_7;\n            }\n            sub_10C10(*((_QWORD *)dest + 32) + 24LL, &v58, v53);\n            v52 = 0;\n          }\n          ++v50;\n          v17 = v52;\n        }\n        v56 = ~(unsigned __int8)(0x23FF880000000000uLL >> v51) & 1;\n      }\nLABEL_41:\n      v49 = strlen(a1);\n      sub_47E30(a1, v49);\n      sub_114C0(a1);\n    }\n  }\nLABEL_7:\n  while ( 1 )\n  {\n    sub_47E30(a1, v18);\n    sub_114C0(a1);\n    v19 = *((_QWORD *)dest + 32);\nLABEL_8:\n    sub_47420(v19);\n    sub_47E30(dest, 264LL);\n    sub_114C0(dest);\n    dest = 0LL;\n    if ( v55 )\n      *v55 = v16;\nLABEL_10:\n    result = dest;\n    if ( __readfsqword(0x28u) == v60 )\n      break;\nLABEL_61:\n    v16 = \"unexpected end of file\";\n    v18 = strlen(a1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xd7f0L", 
            "funcEndAddr": "0xdcf2L", 
            "funcName": "sub_D7F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_DD00@<rax>(__int64 a1@<rdi>, const char **a2@<rsi>, __int64 a3@<r12>)\n{\n  __int64 v3; // r15\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  void *v7; // rax\n  size_t v8; // rdx\n  const char *v9; // rax\n  bool v10; // cf\n  bool v11; // zf\n  const char *v12; // r13\n  const char *v13; // rdi\n  signed __int64 v14; // rcx\n  const char *v15; // rsi\n  const char *v16; // rbp\n  size_t v17; // rsi\n  __int64 v18; // rdi\n  __int64 result; // rax\n  int v20; // er8\n  void *v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // rax\n  bool v24; // cf\n  bool v25; // zf\n  const char *v26; // rdi\n  _BYTE *v27; // rsi\n  signed __int64 v28; // rcx\n  __int64 v29; // r8\n  _BYTE *v30; // r14\n  unsigned __int64 v31; // rdx\n  int v32; // ST1C_4\n  size_t v33; // rax\n  int v34; // eax\n  int v35; // eax\n  __int64 v36; // rdx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  const char *v39; // rdi\n  bool v40; // cf\n  bool v41; // zf\n  _BYTE *v42; // rsi\n  signed __int64 v43; // rcx\n  size_t v44; // rdx\n  size_t v45; // rsi\n  size_t v46; // rdx\n  size_t v47; // rbp\n  size_t v48; // rsi\n  __int64 v49; // rdx\n  int v50; // eax\n  __int64 v51; // rax\n  __int64 *v52; // rdi\n  __int64 v53; // rdx\n  int v54; // eax\n  unsigned int v55; // ebp\n  __int64 *v56; // rax\n  __int64 v57; // rdx\n  const char **v58; // [rsp+10h] [rbp-B8h]\n  int v59; // [rsp+1Ch] [rbp-ACh]\n  __int64 v60; // [rsp+20h] [rbp-A8h]\n  __int64 v61; // [rsp+28h] [rbp-A0h]\n  __int64 v62; // [rsp+30h] [rbp-98h]\n  int v63; // [rsp+38h] [rbp-90h]\n  __int64 *v64; // [rsp+40h] [rbp-88h]\n  __int64 v65; // [rsp+50h] [rbp-78h]\n  __int64 v66; // [rsp+58h] [rbp-70h]\n  __int64 v67; // [rsp+60h] [rbp-68h]\n  int v68; // [rsp+68h] [rbp-60h]\n  __int64 *v69; // [rsp+70h] [rbp-58h]\n  char v70; // [rsp+81h] [rbp-47h]\n  char v71[4]; // [rsp+84h] [rbp-44h]\n  unsigned __int64 v72; // [rsp+88h] [rbp-40h]\n\n  v3 = a1;\n  v58 = a2;\n  v72 = __readfsqword(0x28u);\n  v4 = sub_11440(1LL, 64LL, 0LL);\n  v5 = sub_47410(1LL, 64LL);\n  v6 = *(_QWORD *)(a1 + 32);\n  *(_QWORD *)(v4 + 56) = v5;\n  v7 = (void *)sub_112C0(v6);\n  if ( !*(_DWORD *)(*(_QWORD *)(v3 + 32) + 24LL) )\n  {\n    v9 = (const char *)sub_48120(v7, v8);\n    v10 = 0;\n    v11 = v9 == 0LL;\n    v12 = v9;\n    if ( v9 )\n    {\n      v13 = \"-----BEGIN OPENSSH PRIVATE KEY-----\";\n      v14 = 36LL;\n      v15 = v9;\n      v16 = \"file does not begin with OpenSSH new-style key header\";\n      do\n      {\n        if ( !v14 )\n          break;\n        v10 = (const unsigned __int8)*v15 < *v13;\n        v11 = *v15++ == *v13++;\n        --v14;\n      }\n      while ( v11 );\n      a3 = (unsigned int)(char)((!v10 && !v11) - v10);\n      v17 = strlen(v9);\n      if ( (_DWORD)a3 )\n      {\nLABEL_7:\n        sub_47E30(v12, v17);\n        sub_114C0(v12);\nLABEL_8:\n        sub_47E30(v71, 4LL);\n        goto LABEL_9;\n      }\n      a3 = 2593941443970072576LL;\n      sub_47E30(v12, v17);\n      sub_114C0(v12);\n      v20 = 0;\nLABEL_14:\n      v59 = v20;\n      v21 = (void *)sub_112C0(*(_QWORD *)(v3 + 32));\n      if ( !*(_DWORD *)(*(_QWORD *)(v3 + 32) + 24LL) )\n      {\n        v23 = sub_48120(v21, v22);\n        v24 = 0;\n        v25 = v23 == 0;\n        v12 = (const char *)v23;\n        if ( v23 )\n        {\n          v26 = \"-----END OPENSSH PRIVATE KEY-----\";\n          v27 = (_BYTE *)v23;\n          v28 = 34LL;\n          v29 = v59;\n          do\n          {\n            if ( !v28 )\n              break;\n            v24 = *v27 < (const unsigned __int8)*v26;\n            v25 = *v27++ == *v26++;\n            --v28;\n          }\n          while ( v25 );\n          if ( (!v24 && !v25) != v24 )\n          {\n            v30 = (_BYTE *)v23;\n            while ( 1 )\n            {\n              v31 = (unsigned __int8)*v30;\n              if ( (unsigned __int8)((*v30 & 0xDF) - 65) > 0x19u\n                && ((unsigned __int8)v31 > 0x3Du || !_bittest64(&a3, v31)) )\n              {\n                v32 = v29;\n                v33 = strlen(v12);\n                sub_47E30(v12, v33);\n                sub_114C0(v12);\n                v20 = v32;\n                goto LABEL_14;\n              }\n              v34 = v29 + 1;\n              v71[v29] = v31;\n              if ( (_DWORD)v29 == 3 )\n              {\n                v35 = sub_478D0(v71, &v70);\n                if ( v35 <= 0 )\n                {\n                  v16 = \"invalid base64 encoding\";\n                  v17 = strlen(v12);\n                  goto LABEL_7;\n                }\n                sub_10C10(*(_QWORD *)(v4 + 56) + 24LL, &v70, v35);\n                sub_47E30(&v70, 3LL);\n                v34 = 0;\n              }\n              ++v30;\n              v29 = v34;\n            }\n          }\n          v16 = \"key body not present\";\n          sub_114C0(v23);\n          v36 = *(_QWORD *)(v4 + 56);\n          v37 = *(_QWORD *)(v36 + 16);\n          if ( v37 )\n          {\n            v38 = *(_QWORD *)(v36 + 8);\n            v62 = v37;\n            v61 = 0LL;\n            v63 = 0;\n            v16 = \"new-style OpenSSH magic number missing\\n\";\n            v64 = &v60;\n            v60 = v38;\n            v39 = \"openssh-key-v1\";\n            v42 = (_BYTE *)sub_11230(&v60, v27);\n            v43 = 15LL;\n            do\n            {\n              if ( !v43 )\n                break;\n              v40 = *v42 < (const unsigned __int8)*v39;\n              v41 = *v42++ == *v39++;\n              --v43;\n            }\n            while ( v41 );\n            if ( (!v40 && !v41) == v40 )\n            {\n              a3 = sub_111C0(v64, v42);\n              v16 = (const char *)v44;\n              v45 = v44;\n              if ( (unsigned __int8)sub_47EC0((void *)a3, v44, \"none\") )\n              {\n                *(_DWORD *)v4 = 0;\n              }\n              else\n              {\n                v45 = (size_t)v16;\n                if ( !(unsigned __int8)sub_47EC0((void *)a3, (size_t)v16, \"aes256-cbc\") )\n                  goto LABEL_52;\n                *(_DWORD *)v4 = 1;\n              }\n              goto LABEL_39;\n            }\n          }\n          goto LABEL_8;\n        }\n      }\n    }\n    v16 = \"unexpected end of file\";\n    goto LABEL_8;\n  }\n  v16 = \"unexpected end of file\";\n  sub_47E30(v71, 4LL);\nLABEL_9:\n  sub_47420(*(_QWORD *)(v4 + 56));\n  sub_47E30(v4, 64LL);\n  v18 = v4;\n  v4 = 0LL;\n  sub_114C0(v18);\n  if ( v58 )\n    *v58 = v16;\n  while ( 1 )\n  {\n    result = v4;\n    if ( __readfsqword(0x28u) == v72 )\n      return result;\nLABEL_52:\n    v45 = (size_t)v16;\n    if ( !(unsigned __int8)sub_47EC0((void *)a3, (size_t)v16, \"aes256-ctr\") )\n    {\n      v16 = \"unrecognised cipher name\\n\";\n      if ( *((_DWORD *)v64 + 6) )\n        v16 = \"no cipher name found\";\n      goto LABEL_8;\n    }\n    *(_DWORD *)v4 = 2;\nLABEL_39:\n    a3 = sub_111C0(v64, v45);\n    v47 = v46;\n    v48 = v46;\n    if ( (unsigned __int8)sub_47EC0((void *)a3, v46, \"none\") )\n    {\n      *(_DWORD *)(v4 + 4) = 0;\n    }\n    else\n    {\n      v48 = v47;\n      if ( !(unsigned __int8)sub_47EC0((void *)a3, v47, \"bcrypt\") )\n      {\n        v16 = \"unrecognised kdf name\\n\";\n        if ( *((_DWORD *)v64 + 6) )\n          v16 = \"no kdf name found\";\n        goto LABEL_8;\n      }\n      *(_DWORD *)(v4 + 4) = 1;\n    }\n    a3 = sub_111C0(v64, v48);\n    v50 = *(_DWORD *)(v4 + 4);\n    if ( v50 )\n    {\n      if ( v50 == 1 )\n      {\n        v65 = a3;\n        v67 = v49;\n        v66 = 0LL;\n        v68 = 0;\n        v16 = \"failed to parse bcrypt options string\";\n        v69 = &v65;\n        v51 = sub_111C0(&v65, v48);\n        v52 = v69;\n        *(_QWORD *)(v4 + 16) = v51;\n        *(_QWORD *)(v4 + 24) = v53;\n        *(_DWORD *)(v4 + 8) = sub_11140(v52);\n        if ( *((_DWORD *)v69 + 6) )\n          goto LABEL_8;\n      }\n    }\n    else if ( v49 )\n    {\n      v16 = \"expected empty options string for 'none' kdf\";\n      goto LABEL_8;\n    }\n    v54 = sub_11140(v64);\n    *(_DWORD *)(v4 + 32) = v54;\n    if ( v54 != 1 )\n    {\n      v16 = \"multiple keys in new-style OpenSSH key file not supported\\n\";\n      if ( *((_DWORD *)v64 + 6) )\n        v16 = \"no key count found\";\n      goto LABEL_8;\n    }\n    *(_DWORD *)(v4 + 36) = 0;\n    v55 = 0;\n    do\n    {\n      ++v55;\n      sub_111C0(v64, v48);\n    }\n    while ( *(_DWORD *)(v4 + 32) > v55 );\n    v16 = \"no private key container string found\\n\";\n    *(_QWORD *)(v4 + 40) = sub_111C0(v64, v48);\n    v56 = v64;\n    *(_QWORD *)(v4 + 48) = v57;\n    if ( *((_DWORD *)v56 + 6) )\n      goto LABEL_8;\n    sub_47E30(v71, 4LL);\n    if ( v58 )\n      *v58 = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0xdd00L", 
            "funcEndAddr": "0xe25cL", 
            "funcName": "sub_DD00"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_E280@<rax>(int a1@<edx>, const char *a2@<rcx>, __int64 a3@<rsi>, __int64 a4@<r12>)\n{\n  _QWORD *v4; // rbp\n  unsigned int v5; // ebx\n  char *v7; // rax\n  char *v8; // r12\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rdi\n  char *v14; // rax\n  __int64 v15; // rax\n  __int64 v16; // rbp\n  char *v17; // rax\n  __int64 v18; // rax\n  __int64 v19; // rbp\n  void *v20; // rax\n  size_t v21; // rdx\n  __int64 v22; // [rsp+0h] [rbp-48h]\n  __int64 v23; // [rsp+8h] [rbp-40h]\n  __int64 v24; // [rsp+10h] [rbp-38h]\n  int v25; // [rsp+18h] [rbp-30h]\n  __int64 *v26; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v27; // [rsp+28h] [rbp-20h]\n\n  v4 = a2;\n  v5 = a3;\n  v27 = __readfsqword(0x28u);\n  if ( a1 == 5 )\n  {\n    v14 = (char *)sub_44590();\n    *v4 = sub_46EE0(v14);\n    v15 = sub_D1B0(a3, 0LL);\n    v16 = v15;\n    if ( v15 )\n    {\n      v5 = *(unsigned __int8 *)(v15 + 4);\n      sub_47420(*(_QWORD *)(v15 + 48));\n      sub_47E30(v16, 56LL);\n      sub_114C0(v16);\n      return v5;\n    }\n    return 0;\n  }\n  if ( a1 == 6 )\n  {\n    v17 = (char *)sub_44590();\n    *v4 = sub_46EE0(v17);\n    v18 = sub_DD00(a3, 0LL, a4);\n    v19 = v18;\n    if ( v18 )\n    {\n      LOBYTE(v5) = *(_DWORD *)v18 != 0;\n      sub_47420(*(_QWORD *)(v18 + 56));\n      sub_47E30(v19, 64LL);\n      sub_114C0(v19);\n      return v5;\n    }\n    return 0;\n  }\n  if ( a1 != 7 )\n    return 0;\n  v7 = sub_D7F0(a2, a3, 0LL);\n  v8 = v7;\n  *v4 = 0LL;\n  if ( !v7 )\n  {\n    *v4 = sub_46EE0(\"\");\n    return 0;\n  }\n  v9 = *((_QWORD *)v7 + 32);\n  v10 = *(_QWORD *)(v9 + 16);\n  v11 = *(_QWORD *)(v9 + 8);\n  v23 = 0LL;\n  v25 = 0;\n  v26 = &v22;\n  v22 = v11;\n  v24 = v10;\n  if ( sub_11140(&v22) != 1064303083\n    || (sub_11140(v26), sub_111C0(v26, 0LL), v20 = (void *)sub_111C0(v26, 0LL), *((_DWORD *)v26 + 6)) )\n  {\n    v5 = 0;\n  }\n  else\n  {\n    v5 = (unsigned __int64)sub_47EC0(v20, v21, \"none\") ^ 1;\n  }\n  v12 = sub_46EE0(v8);\n  v13 = *((_QWORD *)v8 + 32);\n  *v4 = v12;\n  sub_47420(v13);\n  sub_47E30(v8, 264LL);\n  sub_114C0(v8);\n  return v5;\n}\n", 
            "funcStartAddr": "0xe280L", 
            "funcEndAddr": "0xe48fL", 
            "funcName": "sub_E280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E500(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rax\n\n  v5 = sub_38100(a1, a5);\n  if ( v5 )\n    sub_37FC0(v5);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xe500L", 
            "funcEndAddr": "0xe520L", 
            "funcName": "sub_E500"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_E530(const char *a1)\n{\n  size_t result; // rax\n  char v2; // dl\n\n  result = (size_t)&a1[strlen(a1)];\n  if ( (unsigned __int64)a1 < result )\n  {\n    do\n    {\n      v2 = *(_BYTE *)(result - 1);\n      if ( v2 != 13 && v2 != 10 )\n        break;\n      *(_BYTE *)--result = 0;\n    }\n    while ( a1 != (const char *)result );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe530L", 
            "funcEndAddr": "0xe564L", 
            "funcName": "sub_E530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E570(__int64 a1, _BYTE *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  _BYTE *v4; // rbp\n  __int64 v5; // rbx\n  __int64 v6; // rdi\n\n  v3 = a1;\n  v4 = a2;\n  v5 = a3;\n  v6 = *(_QWORD *)(a1 + 8);\n  if ( !a3 )\n    goto LABEL_6;\n  while ( !*v4 )\n  {\n    ++v4;\n    if ( !--v5 )\n      goto LABEL_6;\n  }\n  if ( *v4 < 0 )\n  {\n    sub_10D80(v6, v5 + 1);\n    sub_10CD0(*(_QWORD *)(v3 + 8), 0LL);\n  }\n  else\n  {\nLABEL_6:\n    sub_10D80(v6, v5);\n  }\n  return sub_10C10(*(_QWORD *)(v3 + 8), v4, v5);\n}\n", 
            "funcStartAddr": "0xe570L", 
            "funcEndAddr": "0xe5dfL", 
            "funcName": "sub_E570"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_E5E0(__int64 a1, const char *a2, const char **a3)\n{\n  const char *v3; // r12\n  const char **v4; // rsi\n  const char **v5; // rbp\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  __int64 v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  _BYTE *v11; // rax\n  __int64 *v12; // r12\n  const char *v13; // r14\n  __int64 *result; // rax\n  int v15; // eax\n  __int64 v16; // rax\n  __int64 v17; // r12\n  signed int v18; // er14\n  int v19; // er15\n  __int64 (__fastcall **v20)(); // rax\n  __int64 v21; // rax\n  __int64 v22; // r12\n  __int64 v23; // r15\n  unsigned __int64 v24; // ST08_8\n  __int64 v25; // ST00_8\n  __int64 v26; // rax\n  __int64 *v27; // rdi\n  __int64 v28; // [rsp+0h] [rbp-188h]\n  _BYTE *v29; // [rsp+0h] [rbp-188h]\n  int v30; // [rsp+8h] [rbp-180h]\n  char *v31; // [rsp+10h] [rbp-178h]\n  __int64 v32; // [rsp+18h] [rbp-170h]\n  __int64 v33; // [rsp+28h] [rbp-160h]\n  int v34; // [rsp+30h] [rbp-158h]\n  _BYTE *v35; // [rsp+38h] [rbp-150h]\n  __int64 v36; // [rsp+40h] [rbp-148h]\n  int v37; // [rsp+50h] [rbp-138h]\n  _BYTE *v38; // [rsp+58h] [rbp-130h]\n  __int64 v39; // [rsp+60h] [rbp-128h]\n  int v40; // [rsp+70h] [rbp-118h]\n  _BYTE *v41; // [rsp+78h] [rbp-110h]\n  __int64 v42; // [rsp+80h] [rbp-108h]\n  int v43; // [rsp+90h] [rbp-F8h]\n  _BYTE *v44; // [rsp+98h] [rbp-F0h]\n  __int64 v45; // [rsp+A0h] [rbp-E8h]\n  int v46; // [rsp+B0h] [rbp-D8h]\n  __int64 v47; // [rsp+B8h] [rbp-D0h]\n  unsigned int v48; // [rsp+C0h] [rbp-C8h]\n  int v49; // [rsp+D0h] [rbp-B8h]\n  _BYTE *v50; // [rsp+D8h] [rbp-B0h]\n  __int64 v51; // [rsp+E0h] [rbp-A8h]\n  _BYTE *v52; // [rsp+F0h] [rbp-98h]\n  __int64 v53; // [rsp+F8h] [rbp-90h]\n  __int64 v54; // [rsp+100h] [rbp-88h]\n  int v55; // [rsp+108h] [rbp-80h]\n  _BYTE **v56; // [rsp+110h] [rbp-78h]\n  char v57; // [rsp+120h] [rbp-68h]\n  unsigned __int64 v58; // [rsp+148h] [rbp-40h]\n\n  v3 = a2;\n  v4 = a3;\n  v5 = a3;\n  v58 = __readfsqword(0x28u);\n  v6 = sub_D1B0(a1, a3);\n  v7 = sub_47410(a1, v4);\n  v8 = v7;\n  if ( !v6 )\n  {\n    v12 = 0LL;\n    sub_47420(v7);\n    goto LABEL_8;\n  }\n  if ( *(_BYTE *)(v6 + 4) )\n  {\n    v16 = strlen(v3);\n    sub_CB40((__int64)v3, v16, v6 + 12, (__int64)&v57);\n    if ( *(_DWORD *)(v6 + 8) )\n    {\n      v17 = sub_18690(&off_25FD80);\n      (*(void (__fastcall **)(__int64, char *))(*(_QWORD *)v17 + 24LL))(v17, &v57);\n      (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v17 + 16LL))(v17, v6 + 12);\n      (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)v17 + 40LL))(\n        v17,\n        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8LL),\n        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16LL));\n      (*(void (__fastcall **)(__int64))(*(_QWORD *)v17 + 8LL))(v17);\n    }\n    else\n    {\n      sub_20350(&v57, v6 + 12, *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8LL), *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16LL));\n    }\n    sub_47E30(&v57, 32LL);\n  }\n  v9 = *(_QWORD *)(v6 + 48);\n  v10 = *(_QWORD *)(v9 + 16);\n  v11 = *(_BYTE **)(v9 + 8);\n  v53 = 0LL;\n  v55 = 0;\n  v56 = &v52;\n  v52 = v11;\n  v54 = v10;\n  sub_CCB0((__m128i *)&v49, &v56);\n  if ( *((_DWORD *)v56 + 6) || v49 != 16 )\n  {\n    v12 = (__int64 *)&unk_265640;\n    v13 = \"ASN.1 decoding failure\";\n    if ( !*(_BYTE *)(v6 + 4) )\n      v12 = 0LL;\n    goto LABEL_6;\n  }\n  v53 = 0LL;\n  v55 = 0;\n  v56 = &v52;\n  v52 = v50;\n  v54 = v51;\n  v15 = *(_DWORD *)v6;\n  if ( *(_DWORD *)v6 == 1 )\n  {\n    v18 = 9;\n    v28 = v8 + 24;\n    sub_10F30(v8 + 24, \"ssh-rsa\");\n    v32 = 0LL;\n    v31 = \"\";\n    goto LABEL_22;\n  }\n  if ( !v15 )\n  {\n    v18 = 6;\n    v28 = v8 + 24;\n    sub_10F30(v8 + 24, \"ssh-dss\");\n    v32 = 0LL;\n    v31 = \"\";\nLABEL_22:\n    v30 = 0;\n    v19 = 0;\n    do\n    {\n      sub_CCB0((__m128i *)&v49, v56 + 4);\n      if ( *((_DWORD *)v56 + 6) || v49 != 2 )\n      {\n        v12 = (__int64 *)&unk_265640;\n        v13 = \"ASN.1 decoding failure\";\n        if ( !*(_BYTE *)(v6 + 4) )\n          v12 = 0LL;\n        goto LABEL_6;\n      }\n      if ( v19 )\n      {\n        if ( *(_DWORD *)v6 == 1 )\n        {\n          if ( v19 == 1 )\n          {\n            v31 = v50;\n            v32 = v51;\n          }\n          else if ( (unsigned int)(v19 - 6) > 1 )\n          {\n            sub_E570(v28, v50, v51);\n            if ( v19 == 2 )\n            {\n              sub_E570(v28, v31, v32);\n              v30 = *(_DWORD *)(v8 + 16);\n            }\n          }\n        }\n        else if ( !*(_DWORD *)v6 )\n        {\n          sub_E570(v28, v50, v51);\n          if ( v19 == 4 )\n            v30 = *(_DWORD *)(v8 + 16);\n        }\n      }\n      else if ( v51 != 1 || *v50 )\n      {\n        v13 = \"version number mismatch\";\n        v12 = 0LL;\n        goto LABEL_6;\n      }\n      ++v19;\n    }\n    while ( v19 != v18 );\n    if ( v30 <= 0 )\n      __assert_fail(\"privptr > 0\", \"import.c\", 0x308u, \"openssh_pem_read\");\n    v12 = (__int64 *)sub_11440(1LL, 16LL, 0LL);\n    v20 = off_260F40;\n    if ( *(_DWORD *)v6 != 1 )\n      v20 = off_2603C0;\n    v21 = ((__int64 (__fastcall *)(__int64 (__fastcall **)(), _QWORD, _QWORD, _QWORD, _QWORD))v20[1])(\n            v20,\n            *(_QWORD *)(v8 + 8),\n            v30,\n            *(_QWORD *)(v8 + 8) + v30,\n            *(_QWORD *)(v8 + 16) - v30);\n    *v12 = v21;\n    if ( !v21 )\n      goto LABEL_60;\nLABEL_44:\n    v13 = 0LL;\n    v12[1] = sub_46EE0(\"imported-openssh-key\");\n    goto LABEL_6;\n  }\n  if ( v15 != 2 )\n    __assert_fail(\"false && \\\"Bad key type from load_openssh_pem_key\\\"\", \"import.c\", 0x316u, \"openssh_pem_read\");\n  sub_CCB0((__m128i *)&v34, &v56);\n  sub_CCB0((__m128i *)&v37, v56 + 4);\n  sub_CCB0((__m128i *)&v40, v56 + 4);\n  sub_CCB0((__m128i *)&v43, v56 + 4);\n  v53 = 0LL;\n  v55 = 0;\n  v56 = &v52;\n  v52 = v41;\n  v54 = v42;\n  sub_CCB0((__m128i *)&v46, &v56);\n  v53 = 0LL;\n  v55 = 0;\n  v56 = &v52;\n  v52 = v44;\n  v54 = v45;\n  sub_CCB0((__m128i *)&v49, &v56);\n  if ( *((_DWORD *)v56 + 6) || v34 != 2 || v36 != 1 || *v35 != 1 || v37 != 4 || v40 || v43 != 1 || v46 != 6 || v49 != 3 )\n    goto LABEL_66;\n  v22 = v51;\n  v29 = v50;\n  v23 = sub_35290(v48, v47, &v33);\n  if ( !v23 )\n    goto LABEL_63;\n  if ( 2 * (((unsigned __int64)(*(_QWORD *)(v33 + 24) + 7LL) >> 3) + 1) != v22 )\n  {\nLABEL_66:\n    v13 = \"ASN.1 decoding failure\";\n    v12 = (__int64 *)&unk_265640;\n    if ( !*(_BYTE *)(v6 + 4) )\n      goto LABEL_17;\n    goto LABEL_6;\n  }\n  v24 = 2 * (((unsigned __int64)(*(_QWORD *)(v33 + 24) + 7LL) >> 3) + 1);\n  v12 = (__int64 *)sub_11440(1LL, 16LL, 0LL);\n  sub_10F30(v8 + 24, *(_QWORD *)(v23 + 104));\n  sub_10F30(v8 + 24, *(_QWORD *)(v33 + 8));\n  v50 = v29 + 1;\n  v51 = v24 - 1;\n  sub_10F20(v8 + 24);\n  v25 = *(_QWORD *)(v8 + 16);\n  sub_E570(v8 + 24, v38, v39);\n  v26 = (*(__int64 (__fastcall **)(__int64, _QWORD, _QWORD, _QWORD, _QWORD))(v23 + 8))(\n          v23,\n          *(_QWORD *)(v8 + 8),\n          (signed int)v25,\n          *(_QWORD *)(v8 + 8) + (signed int)v25,\n          *(_QWORD *)(v8 + 16) - (signed int)v25);\n  *v12 = v26;\n  if ( v26 )\n    goto LABEL_44;\nLABEL_60:\n  v27 = v12;\n  v13 = \"unable to create key data structure\";\n  v12 = 0LL;\n  sub_114C0(v27);\n  while ( 1 )\n  {\nLABEL_6:\n    sub_47420(v8);\n    sub_47420(*(_QWORD *)(v6 + 48));\n    sub_47E30(v6, 56LL);\n    sub_114C0(v6);\n    if ( v5 )\n      *v5 = v13;\nLABEL_8:\n    result = v12;\n    if ( __readfsqword(0x28u) == v58 )\n      break;\nLABEL_63:\n    v13 = \"Unsupported ECDSA curve.\";\nLABEL_17:\n    v12 = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xe5e0L", 
            "funcEndAddr": "0xed3eL", 
            "funcName": "sub_E5E0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__usercall sub_ED40@<rax>(const char *a1@<rdx>, const char **a2@<rcx>, char *a3@<rbp>, __int64 a4@<rdi>, int a5@<esi>, __int64 a6@<r12>, __int64 a7@<r13>)\n{\n  const char *v7; // r14\n  const char **v8; // rbx\n  __int64 *v9; // r12\n  const char **v10; // rsi\n  char *v11; // rax\n  const char *v12; // r15\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 *result; // rax\n  char *v17; // rax\n  int v18; // eax\n  int v19; // eax\n  unsigned int v20; // eax\n  bool v21; // zf\n  __int64 (__fastcall **v22)(); // rax\n  __int64 v23; // r12\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  unsigned int v26; // er12\n  __int64 v27; // rax\n  __int64 v28; // rdx\n  _QWORD *v29; // rax\n  _QWORD *v30; // r8\n  unsigned __int64 v31; // rdx\n  __int128 v32; // ax\n  void *v33; // rax\n  size_t v34; // rdx\n  signed __int64 v35; // rsi\n  __int64 v36; // rax\n  __int64 v37; // rdx\n  __int64 v38; // r15\n  __int64 *v39; // rsi\n  __int64 *v40; // rax\n  int v41; // er9\n  int v42; // er14\n  void *v43; // rax\n  size_t v44; // rdx\n  __int64 v45; // rax\n  __int64 v46; // rax\n  __int64 v47; // rdi\n  void *v48; // rax\n  size_t v49; // rdx\n  __int64 v50; // r8\n  __int64 v51; // rdx\n  size_t v52; // ST08_8\n  __int64 v53; // rax\n  __int64 v54; // rdx\n  __int64 v55; // r8\n  __int64 v56; // rsi\n  __int64 v57; // r15\n  __int64 v58; // rdx\n  __int64 v59; // rdx\n  void *v60; // rdx\n  __int64 v61; // rdx\n  __int64 v62; // rdx\n  __int64 v63; // rax\n  __int64 v64; // rdx\n  __int64 *v65; // rdi\n  __int64 v66; // rdx\n  __int64 v67; // rdx\n  __int64 v68; // rdx\n  __int64 v69; // rdx\n  __int64 v70; // rax\n  __int64 v71; // rdx\n  _BYTE *v72; // ST48_8\n  __int64 (__fastcall **v73)(); // r15\n  __int64 v74; // rax\n  _BYTE *v75; // ST58_8\n  _BYTE *v76; // rsi\n  size_t n; // [rsp+8h] [rbp-140h]\n  _BYTE *na; // [rsp+8h] [rbp-140h]\n  _BYTE *nb; // [rsp+8h] [rbp-140h]\n  int nc; // [rsp+8h] [rbp-140h]\n  void *s1; // [rsp+10h] [rbp-138h]\n  void *s1a; // [rsp+10h] [rbp-138h]\n  _BYTE *s1b; // [rsp+10h] [rbp-138h]\n  signed int v84; // [rsp+18h] [rbp-130h]\n  __int64 v85; // [rsp+18h] [rbp-130h]\n  __int64 v86; // [rsp+18h] [rbp-130h]\n  _BYTE *v87; // [rsp+20h] [rbp-128h]\n  _BYTE *v88; // [rsp+20h] [rbp-128h]\n  __int64 v89; // [rsp+28h] [rbp-120h]\n  __int64 v90; // [rsp+28h] [rbp-120h]\n  _BYTE *v91; // [rsp+30h] [rbp-118h]\n  __int64 v92; // [rsp+30h] [rbp-118h]\n  __int64 v93; // [rsp+38h] [rbp-110h]\n  _BYTE *v94; // [rsp+38h] [rbp-110h]\n  _BYTE *v95; // [rsp+40h] [rbp-108h]\n  __int64 v96; // [rsp+40h] [rbp-108h]\n  __int64 v97; // [rsp+48h] [rbp-100h]\n  __int64 v98; // [rsp+50h] [rbp-F8h]\n  __int64 v99; // [rsp+60h] [rbp-E8h]\n  __int64 v100; // [rsp+68h] [rbp-E0h]\n  __int64 v101; // [rsp+70h] [rbp-D8h]\n  int v102; // [rsp+78h] [rbp-D0h]\n  __int64 *v103; // [rsp+80h] [rbp-C8h]\n  __int64 v104; // [rsp+88h] [rbp-C0h]\n  __m128i v105; // [rsp+90h] [rbp-B8h]\n  char v106; // [rsp+A0h] [rbp-A8h]\n  __m128i v107; // [rsp+B0h] [rbp-98h]\n  char v108; // [rsp+C0h] [rbp-88h]\n  __int128 v109; // [rsp+D0h] [rbp-78h]\n  __int128 v110; // [rsp+E0h] [rbp-68h]\n  __int128 v111; // [rsp+F0h] [rbp-58h]\n  unsigned __int64 v112; // [rsp+108h] [rbp-40h]\n\n  v7 = a1;\n  v8 = a2;\n  v112 = __readfsqword(0x28u);\n  if ( a5 == 5 )\n  {\n    v9 = sub_E5E0(a4, a1, a2);\n    goto LABEL_8;\n  }\n  if ( a5 == 6 )\n  {\n    v17 = (char *)sub_DD00(a4, a2, a6);\n    a3 = v17;\n    if ( !v17 )\n    {\n      v9 = 0LL;\n      goto LABEL_8;\n    }\n    v18 = *(_DWORD *)v17;\n    if ( v18 )\n    {\n      if ( (unsigned int)(v18 - 1) > 1 )\n        __assert_fail(\"false && \\\"Bad cipher enumeration value\\\"\", \"import.c\", 0x54Eu, \"openssh_new_read\");\n      v19 = *((_DWORD *)a3 + 1);\n      if ( v19 )\n      {\n        if ( v19 != 1 )\n          __assert_fail(\"false && \\\"Bad kdf enumeration value\\\"\", \"import.c\", 0x55Du, \"openssh_new_read\");\n        sub_206F0(v7, *((_QWORD *)a3 + 2), *((unsigned int *)a3 + 6), *((unsigned int *)a3 + 2), &v109, 48LL);\n      }\n      else\n      {\n        v109 = 0LL;\n        v110 = 0LL;\n        v111 = 0LL;\n      }\n      v20 = *(_DWORD *)a3;\n      if ( *(_DWORD *)a3 )\n      {\n        if ( v20 > 2 )\n          __assert_fail(\"false && \\\"Bad cipher enumeration value\\\"\", \"import.c\", 0x577u, \"openssh_new_read\");\n        v9 = 0LL;\n        v7 = \"private key container length is not a multiple of AES block size\\n\";\n        if ( a3[48] & 0xF )\n          goto LABEL_24;\n        v21 = v20 == 1;\n        v22 = &off_25F600;\n        if ( v21 )\n          v22 = &off_25F780;\n        v23 = ((__int64 (__fastcall *)(__int64 (__fastcall **)()))*v22)(v22);\n        (*(void (__fastcall **)(__int64, __int128 *))(*(_QWORD *)v23 + 24LL))(v23, &v109);\n        (*(void (__fastcall **)(__int64, __int128 *))(*(_QWORD *)v23 + 16LL))(v23, &v111);\n        (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)v23 + 40LL))(\n          v23,\n          *((_QWORD *)a3 + 5),\n          *((unsigned int *)a3 + 12));\n        (*(void (__fastcall **)(__int64))(*(_QWORD *)v23 + 8LL))(v23);\n      }\n    }\n    v24 = *((_QWORD *)a3 + 5);\n    v25 = *((_QWORD *)a3 + 6);\n    a7 = (__int64)&v99;\n    v100 = 0LL;\n    v102 = 0;\n    v7 = \"decryption check failed\";\n    v103 = &v99;\n    v99 = v24;\n    v101 = v25;\n    v26 = sub_11140(&v99);\n    v27 = sub_11140(v103);\n    v28 = v26;\n    v9 = 0LL;\n    if ( v27 == v28 && !*((_DWORD *)v103 + 6) )\n    {\n      v39 = (_QWORD *)&word_10;\n      v40 = (__int64 *)sub_11440(1LL, 16LL, 0LL);\n      v41 = *((_DWORD *)a3 + 8);\n      v9 = v40;\n      *v40 = 0LL;\n      v40[1] = 0LL;\n      if ( v41 <= 0 )\n        goto LABEL_86;\n      v42 = 0;\n      do\n      {\n        v43 = (void *)sub_111C0(v103, v39);\n        v39 = (__int64 *)v44;\n        v45 = sub_38870(v43, v44);\n        if ( !v45 )\n        {\n          v7 = \"private key type not recognised\\n\";\n          goto LABEL_60;\n        }\n        v39 = &v99;\n        v46 = (*(__int64 (__fastcall **)(__int64, __int64 *))(v45 + 16))(v45, &v99);\n        v47 = (__int64)v103;\n        *v9 = v46;\n        if ( *(_DWORD *)(v47 + 24) )\n        {\n          v7 = \"unable to read entire private key\";\n          goto LABEL_60;\n        }\n        if ( !v46 )\n        {\n          v7 = \"unable to create key data structure\";\n          goto LABEL_60;\n        }\n        if ( *((_DWORD *)a3 + 9) != v42 )\n        {\n          (*(void (__fastcall **)(__int64))(*(_QWORD *)v46 + 24LL))(v46);\n          v47 = (__int64)v103;\n          *v9 = 0LL;\n        }\n        v48 = (void *)sub_111C0(v47, &v99);\n        if ( *((_DWORD *)v103 + 6) )\n        {\n          v7 = \"unable to read key comment\";\n          goto LABEL_60;\n        }\n        if ( *((_DWORD *)a3 + 9) == v42 )\n        {\n          v39 = (__int64 *)v49;\n          v9[1] = sub_48120(v48, v49);\n        }\n        ++v42;\n      }\n      while ( v42 < *((_DWORD *)a3 + 8) );\n      if ( *v9 )\n      {\n        a7 = 1LL;\n        while ( v103[2] != v103[1] )\n        {\n          if ( (unsigned __int8)sub_11070(v103) != (_BYTE)a7 )\n          {\n            v7 = \"padding at end of private string did not match\";\n            goto LABEL_60;\n          }\n          a7 = (unsigned int)(a7 + 1);\n        }\n        v7 = 0LL;\n      }\n      else\n      {\nLABEL_86:\n        v7 = \"key index out of range\";\nLABEL_60:\n        sub_114C0(v9[1]);\n        if ( *v9 )\n          (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)*v9 + 24LL))(*v9, v39);\n        v65 = v9;\n        v9 = 0LL;\n        sub_114C0(v65);\n      }\n    }\nLABEL_24:\n    sub_47420(*((_QWORD *)a3 + 7));\n    sub_47E30(a3, 64LL);\n    sub_114C0(a3);\n    if ( v8 )\n      *v8 = v7;\n    goto LABEL_8;\n  }\n  v9 = 0LL;\n  if ( a5 != 7 )\n    goto LABEL_8;\n  v10 = a2;\n  v11 = sub_D7F0(a3, a4, a2);\n  a3 = v11;\n  v106 = 0;\n  v108 = 0;\n  v105 = _mm_load_si128((const __m128i *)&xmmword_4BE20);\n  v107 = _mm_load_si128((const __m128i *)&xmmword_4BE30);\n  if ( !v11 )\n    goto LABEL_8;\n  a7 = (__int64)&v99;\n  v12 = \"key does not begin with magic number\";\n  v13 = *((_QWORD *)v11 + 32);\n  v14 = *(_QWORD *)(v13 + 16);\n  v15 = *(_QWORD *)(v13 + 8);\n  v100 = 0LL;\n  v102 = 0;\n  v103 = &v99;\n  v99 = v15;\n  v101 = v14;\n  if ( sub_11140(&v99) != 1064303083 )\n    goto LABEL_6;\n  v12 = \"key is of unknown type\";\n  sub_11140(v103);\n  v29 = (_QWORD *)sub_111C0(v103, v10);\n  v30 = v29;\n  if ( v31 <= 0x10 )\n    goto LABEL_6;\n  *(_QWORD *)&v32 = *v29;\n  *((_QWORD *)&v32 + 1) = v30[1];\n  if ( (v32 ^ *(_OWORD *)&v105) == 0 )\n  {\n    v84 = 0;\n  }\n  else\n  {\n    if ( (*(_OWORD *)&v107 ^ v32) != 0 )\n      goto LABEL_6;\n    v84 = 1;\n  }\n  v33 = (void *)sub_111C0(v103, v32 ^ v105.m128i_i64[0] | *((_QWORD *)&v32 + 1) ^ v105.m128i_i64[1]);\n  v35 = v34;\n  s1 = v33;\n  n = v34;\n  if ( (unsigned __int8)sub_47EC0(v33, v34, \"none\") )\n  {\n    v9 = 0LL;\n    v50 = sub_111C0(v103, v35);\n    v38 = v51;\n    if ( v51 )\n      goto LABEL_52;\nLABEL_50:\n    v9 = 0LL;\n    v12 = \"no key data found\";\n    goto LABEL_6;\n  }\n  v9 = 0LL;\n  v12 = \"key encryption is of unknown type\";\n  if ( !(unsigned __int8)sub_47EC0(s1, n, \"3des-cbc\") )\n    goto LABEL_6;\n  v36 = sub_111C0(v103, n);\n  v38 = v37;\n  if ( !v37 )\n    goto LABEL_50;\n  if ( v37 & 7 )\n  {\n    v9 = 0LL;\n    v12 = \"encrypted part of key is not a multiple of cipher block size\";\n    goto LABEL_6;\n  }\n  v52 = v36;\n  v53 = strlen(v7);\n  sub_CC00((__int64)v7, v53, (__int64)&v109);\n  v104 = 0LL;\n  sub_20350(&v109, &v104, v52, (unsigned int)v38);\n  v35 = 32LL;\n  v9 = (__int64 *)&unk_265640;\n  sub_47E30(&v109, 32LL);\n  v50 = v52;\nLABEL_52:\n  v99 = v50;\n  v101 = v38;\n  v100 = 0LL;\n  v102 = 0;\n  v12 = \"containing string was ill-formed\";\n  v103 = &v99;\n  v55 = sub_111C0(&v99, v35);\n  v56 = *((unsigned int *)v103 + 6);\n  if ( !(_DWORD)v56 )\n  {\n    v99 = v55;\n    v101 = v54;\n    v100 = 0LL;\n    v102 = 0;\n    v103 = &v99;\n    v7 = (const char *)sub_47410(&v99, v56);\n    if ( v84 )\n    {\n      v12 = \"predefined DSA parameters not supported\";\n      if ( sub_11140(v103) )\n        goto LABEL_56;\n      v12 = \"key data did not contain five integers\";\n      nb = (_BYTE *)sub_CDA0(v103 + 4);\n      a7 = v66;\n      v88 = (_BYTE *)sub_CDA0(v103 + 4);\n      v90 = v67;\n      s1b = (_BYTE *)sub_CDA0(v103 + 4);\n      v86 = v68;\n      v94 = (_BYTE *)sub_CDA0(v103 + 4);\n      v96 = v69;\n      v70 = sub_CDA0(v103 + 4);\n      v92 = v71;\n      if ( *((_DWORD *)v103 + 6) )\n      {\nLABEL_56:\n        if ( v7 )\n          goto LABEL_57;\n        goto LABEL_6;\n      }\n      v72 = (_BYTE *)v70;\n      sub_10F30(v7 + 24, \"ssh-dss\");\n      sub_E570((__int64)(v7 + 24), nb, a7);\n      sub_E570((__int64)(v7 + 24), s1b, v86);\n      sub_E570((__int64)(v7 + 24), v88, v90);\n      sub_E570((__int64)(v7 + 24), v94, v96);\n      v73 = off_2603C0;\n      nc = *((_DWORD *)v7 + 4);\n      sub_E570((__int64)(v7 + 24), v72, v92);\n    }\n    else\n    {\n      v57 = sub_CDA0(v103 + 4);\n      v85 = v58;\n      v87 = (_BYTE *)sub_CDA0(v103 + 4);\n      v89 = v59;\n      na = (_BYTE *)sub_CDA0(v103 + 4);\n      s1a = v60;\n      v91 = (_BYTE *)sub_CDA0(v103 + 4);\n      v93 = v61;\n      v95 = (_BYTE *)sub_CDA0(v103 + 4);\n      v97 = v62;\n      v63 = sub_CDA0(v103 + 4);\n      v98 = v64;\n      if ( *((_DWORD *)v103 + 6) )\n      {\n        v12 = \"key data did not contain six integers\";\n        goto LABEL_56;\n      }\n      v75 = (_BYTE *)v63;\n      sub_10F30(v7 + 24, \"ssh-rsa\");\n      v76 = (_BYTE *)v57;\n      v73 = off_260F40;\n      sub_E570((__int64)(v7 + 24), v76, v85);\n      sub_E570((__int64)(v7 + 24), na, (__int64)s1a);\n      nc = *((_DWORD *)v7 + 4);\n      sub_E570((__int64)(v7 + 24), v87, v89);\n      sub_E570((__int64)(v7 + 24), v75, v98);\n      sub_E570((__int64)(v7 + 24), v95, v97);\n      sub_E570((__int64)(v7 + 24), v91, v93);\n    }\n    a7 = sub_11440(1LL, 16LL, 0LL);\n    v74 = ((__int64 (__fastcall *)(__int64 (__fastcall **)(), _QWORD, _QWORD, _QWORD, _QWORD))v73[1])(\n            v73,\n            *((_QWORD *)v7 + 1),\n            nc,\n            *((_QWORD *)v7 + 1) + nc,\n            *((_QWORD *)v7 + 2) - nc);\n    *(_QWORD *)a7 = v74;\n    if ( !v74 )\n      goto LABEL_80;\n    v9 = (__int64 *)a7;\n    v12 = 0LL;\n    *(_QWORD *)(a7 + 8) = sub_46EE0(a3);\n    goto LABEL_57;\n  }\n  while ( 1 )\n  {\nLABEL_6:\n    sub_47420(*((_QWORD *)a3 + 32));\n    sub_47E30(a3, 264LL);\n    sub_114C0(a3);\n    if ( v8 )\n      *v8 = v12;\nLABEL_8:\n    result = v9;\n    if ( __readfsqword(0x28u) == v112 )\n      break;\nLABEL_80:\n    v12 = \"unable to create key data structure\";\n    sub_114C0(a7);\nLABEL_57:\n    sub_47420(v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xed40L", 
            "funcEndAddr": "0xf771L", 
            "funcName": "sub_ED40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F7E0(__int64 a1, unsigned __int8 *a2, __int64 a3)\n{\n  int v3; // eax\n  __int64 v4; // rbp\n  unsigned __int8 *v5; // rbx\n  int v6; // ecx\n  int v7; // esi\n\n  v3 = 8 * a3 - 1;\n  v4 = a3;\n  v5 = a2;\n  if ( v3 > 0 && (*a2 & 0x80u) == 0 )\n  {\n    v6 = 7;\n    do\n    {\n      --v3;\n      if ( !v6 )\n      {\n        ++v5;\n        --v4;\n      }\n      if ( !v3 )\n        break;\n      v7 = *v5;\n      v6 = v3 & 7;\n    }\n    while ( !_bittest(&v7, v6) );\n  }\n  sub_10D80(*(_QWORD *)(a1 + 8), v3 + 1);\n  return sub_10C10(*(_QWORD *)(a1 + 8), v5, v4);\n}\n", 
            "funcStartAddr": "0xf7e0L", 
            "funcEndAddr": "0xf84cL", 
            "funcName": "sub_F7E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F850(__int64 a1, int a2, __int64 (__fastcall ****a3)(), char *a4)\n{\n  __int64 (__fastcall ****v4)(); // r12\n  unsigned int v5; // er15\n  __int64 result; // rax\n  __int64 (__fastcall ***v7)(); // rax\n  __int64 (__fastcall **v8)(); // rdx\n  __int64 v9; // rax\n  __int64 (__fastcall ***v10)(); // rdi\n  signed __int64 v11; // rsi\n  __int64 v12; // rax\n  __int64 (__fastcall ***v13)(); // rdi\n  signed __int64 v14; // rsi\n  _QWORD *v15; // rax\n  __int64 v16; // rdx\n  __int64 v17; // rcx\n  __int64 (__fastcall ***v18)(); // r12\n  __int64 (__fastcall **v19)(); // rdi\n  __int64 (__fastcall *v20)(); // rbx\n  __int64 v21; // r14\n  signed __int64 v22; // rsi\n  signed __int64 v23; // rdx\n  __int64 v24; // r13\n  __int64 v25; // r13\n  signed __int64 v26; // rsi\n  __int64 v27; // rbx\n  __int64 v28; // r14\n  __int64 v29; // rdi\n  char *v30; // rbx\n  __int64 v31; // rax\n  unsigned int v32; // er12\n  __int64 v33; // rax\n  FILE *v34; // rax\n  FILE *v35; // rbp\n  __int64 v36; // rcx\n  __int64 v37; // rdi\n  __int64 v38; // rax\n  __int64 (__fastcall ***v39)(); // rdi\n  signed __int64 v40; // rsi\n  __int64 v41; // rbp\n  _QWORD *v42; // rax\n  __int64 (__fastcall ***v43)(); // rdi\n  signed __int64 v44; // rsi\n  __int64 (__fastcall **v45)(); // rax\n  FILE *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  __int64 v49; // r13\n  __int64 v50; // rdx\n  __int64 v51; // r14\n  __int64 v52; // rdx\n  __int64 v53; // rdx\n  __int64 v54; // rdx\n  __int64 v55; // rdx\n  __int64 v56; // rax\n  __int128 v57; // ax\n  __int64 v58; // r9\n  __int64 v59; // rdi\n  char *v60; // rsi\n  __int64 v61; // r14\n  signed int v62; // ebx\n  __int64 v63; // rbp\n  __int64 v64; // rbx\n  __int64 v65; // rax\n  signed __int64 v66; // r13\n  char *v67; // rdx\n  _QWORD *v68; // r14\n  __int64 v69; // rax\n  __int64 v70; // rax\n  __int64 v71; // rdx\n  __int64 v72; // r13\n  __int64 v73; // rdx\n  __int64 v74; // r14\n  __int64 v75; // rdx\n  __int64 v76; // rax\n  __int64 v77; // rdx\n  __int128 v78; // ax\n  __int128 v79; // ax\n  __int128 v80; // ax\n  __int64 *v81; // rdi\n  __int128 v82; // ax\n  __int64 v83; // rsi\n  __m128i v84; // xmm1\n  char v85; // r15\n  __m128i v86; // xmm0\n  signed int v87; // er14\n  __int64 v88; // rax\n  __int64 v89; // rbx\n  _QWORD *v90; // r13\n  const char *v91; // rsi\n  int v92; // er15\n  __int64 v93; // rax\n  int v94; // er15\n  __int64 v95; // r10\n  signed __int64 v96; // r14\n  int v97; // eax\n  _BYTE *v98; // rdx\n  int v99; // edx\n  __int64 v100; // rax\n  int v101; // ebx\n  signed __int64 v102; // r9\n  unsigned int v103; // er14\n  _BYTE *v104; // rax\n  __int64 v105; // rax\n  _BYTE *v106; // rdx\n  unsigned int v107; // ecx\n  __int64 v108; // rax\n  FILE *v109; // rax\n  FILE *v110; // rbx\n  signed __int64 v111; // r14\n  const char *v112; // r15\n  __int64 v113; // rcx\n  const char *v114; // rcx\n  __int64 v115; // rax\n  __int64 v116; // rdx\n  __int64 v117; // r13\n  __int64 v118; // rdx\n  __int64 v119; // r14\n  __int128 v120; // ax\n  __int128 v121; // ax\n  __int128 v122; // ax\n  __int128 v123; // ax\n  __int128 v124; // ax\n  __m128i v125; // xmm5\n  __int64 v126; // rax\n  __int64 v127; // rdx\n  __int128 v128; // ax\n  __int128 v129; // ax\n  __int64 v130; // rdx\n  __int128 v131; // ax\n  __int128 v132; // ax\n  __int128 v133; // ax\n  __int64 v134; // r14\n  __int64 v135; // rbp\n  __int64 v136; // rbx\n  __int64 v137; // r12\n  __int64 v138; // r13\n  __int64 v139; // rax\n  unsigned __int64 v140; // rbx\n  signed __int64 v141; // rbp\n  __int64 v142; // rbx\n  __int64 v143; // rbp\n  char *v144; // rbx\n  __m128i v145; // xmm2\n  __m128i v146; // xmm3\n  __m128i v147; // xmm4\n  char *s; // [rsp+0h] [rbp-218h]\n  __int64 v149; // [rsp+8h] [rbp-210h]\n  __int128 v150; // [rsp+10h] [rbp-208h]\n  __int128 v151; // [rsp+20h] [rbp-1F8h]\n  __int128 v152; // [rsp+30h] [rbp-1E8h]\n  __m128i v153; // [rsp+40h] [rbp-1D8h]\n  __m128i v154; // [rsp+50h] [rbp-1C8h]\n  _QWORD *v155; // [rsp+60h] [rbp-1B8h]\n  __int64 v156; // [rsp+68h] [rbp-1B0h]\n  __int128 v157; // [rsp+70h] [rbp-1A8h]\n  __int128 v158; // [rsp+80h] [rbp-198h]\n  __int64 v159; // [rsp+90h] [rbp-188h]\n  unsigned __int64 v160; // [rsp+98h] [rbp-180h]\n  __int128 v161; // [rsp+A0h] [rbp-178h]\n  __int128 v162; // [rsp+B0h] [rbp-168h]\n  __int128 v163; // [rsp+C0h] [rbp-158h]\n  int v164; // [rsp+DCh] [rbp-13Ch]\n  __int64 v165; // [rsp+E0h] [rbp-138h]\n  __int64 v166; // [rsp+E8h] [rbp-130h]\n  __int64 v167; // [rsp+F0h] [rbp-128h]\n  int v168; // [rsp+F8h] [rbp-120h]\n  __int64 *v169; // [rsp+100h] [rbp-118h]\n  char *v170; // [rsp+110h] [rbp-108h]\n  __int64 v171; // [rsp+118h] [rbp-100h]\n  __m128i v172; // [rsp+120h] [rbp-F8h]\n  __m128i v173; // [rsp+130h] [rbp-E8h]\n  __int128 v174; // [rsp+140h] [rbp-D8h]\n  __int128 v175; // [rsp+150h] [rbp-C8h]\n  __int128 v176; // [rsp+160h] [rbp-B8h]\n  __int64 v177; // [rsp+170h] [rbp-A8h]\n  unsigned __int64 v178; // [rsp+178h] [rbp-A0h]\n  __int64 v179; // [rsp+180h] [rbp-98h]\n  __int64 v180; // [rsp+188h] [rbp-90h]\n  __m128i v181; // [rsp+190h] [rbp-88h]\n  char v182; // [rsp+1A7h] [rbp-71h]\n  __int64 v183; // [rsp+1A8h] [rbp-70h]\n  char v184; // [rsp+1B0h] [rbp-68h]\n  unsigned __int64 v185; // [rsp+1D8h] [rbp-40h]\n\n  v4 = a3;\n  v185 = __readfsqword(0x28u);\n  v149 = a1;\n  s = a4;\n  if ( a2 == 4 )\n  {\n    v7 = *a3;\n    v8 = **a3;\n    *(_QWORD *)&v152 = off_2606C0;\n    LOBYTE(v7) = v8 == off_2603C0;\n    LOBYTE(a4) = v8 == off_260F40;\n    LODWORD(v7) = (unsigned int)a4 | (unsigned int)v7;\n    LOBYTE(a4) = v8 == off_260760;\n    LODWORD(v7) = (unsigned int)a4 | (unsigned int)v7;\n    LOBYTE(a4) = v8 == off_2606C0;\n    LODWORD(v7) = (unsigned int)a4 | (unsigned int)v7;\n    LOBYTE(v7) = (v8 == off_260620) | (unsigned __int8)v7;\n    v5 = (unsigned int)v7;\n    if ( !(_BYTE)v7 )\n      goto LABEL_6;\n    v9 = ((__int64 (*)(void))sub_47400)();\n    v10 = *v4;\n    v11 = v9 + 24;\n    *(_QWORD *)&v150 = v9;\n    ((void (__fastcall *)(__int64 (__fastcall ***)(), __int64))(*v10)[7])(v10, v9 + 24);\n    v12 = sub_47410(v10, v11);\n    v13 = *v4;\n    v14 = v12 + 24;\n    *(_QWORD *)&v151 = v12;\n    ((void (__fastcall *)(__int64 (__fastcall ***)(), __int64))(*v13)[8])(v13, v12 + 24);\n    v15 = (_QWORD *)sub_47410(v13, v14);\n    v18 = *v4;\n    v155 = v15;\n    v19 = *v18;\n    if ( *v18 == off_260F40 )\n    {\n      v126 = *(_QWORD *)(v150 + 16);\n      v127 = *(_QWORD *)(v150 + 8);\n      v166 = 0LL;\n      v168 = 0;\n      v169 = &v165;\n      v165 = v127;\n      v167 = v126;\n      sub_111C0(&v165, v14);\n      *(_QWORD *)&v128 = sub_111C0(v169, v14);\n      v162 = v128;\n      *(_QWORD *)&v129 = sub_111C0(v169, v14);\n      v161 = v129;\n      *(_QWORD *)&v129 = *(_QWORD *)(v151 + 16);\n      *((_QWORD *)&v129 + 1) = *(_QWORD *)(v151 + 8);\n      v166 = 0LL;\n      v168 = 0;\n      v169 = &v165;\n      v165 = *((_QWORD *)&v129 + 1);\n      v167 = v129;\n      v153.m128i_i64[0] = sub_111C0(&v165, v14);\n      v156 = v130;\n      *(_QWORD *)&v131 = sub_111C0(v169, v14);\n      v157 = v131;\n      *(_QWORD *)&v132 = sub_111C0(v169, v14);\n      v158 = v132;\n      *(_QWORD *)&v133 = sub_111C0(v169, v14);\n      v163 = v133;\n      if ( *((_DWORD *)v169 + 6) )\n        __assert_fail(\"!get_err(src)\", \"import.c\", 0x368u, \"openssh_pem_write\");\n      v134 = sub_13290(v153.m128i_i64[0], v156);\n      v135 = sub_13290(v157, *((_QWORD *)&v157 + 1));\n      v136 = sub_13290(v158, *((_QWORD *)&v158 + 1));\n      sub_13A10(v135, v135, 1LL);\n      sub_13A10(v136, v136, 1LL);\n      v137 = sub_15EB0(v134, v135);\n      v138 = sub_15EB0(v134, v136);\n      sub_12FF0(v134);\n      sub_12FF0(v135);\n      sub_12FF0(v136);\n      v139 = sub_134B0(v137);\n      v140 = (unsigned __int64)(v139 + 8) >> 3;\n      v160 = (unsigned __int64)(v139 + 8) >> 3;\n      v60 = (_BYTE *)(&n + 1);\n      *(_QWORD *)&v152 = (unsigned __int64)(sub_134B0(v138) + 8) >> 3;\n      v154.m128i_i32[0] = v152 + v140;\n      v61 = sub_11440((signed int)v152 + (signed int)v140, 1LL, 0LL);\n      v159 = v61 + v140;\n      if ( v140 )\n      {\n        v141 = v140 - 1;\n        v142 = v61;\n        do\n        {\n          v60 = (char *)v141--;\n          *(_BYTE *)(++v142 - 1) = sub_133D0(v137, v60);\n        }\n        while ( v141 != -1 );\n      }\n      if ( (_QWORD)v152 )\n      {\n        v143 = v159;\n        v144 = (char *)(v152 - 1);\n        do\n        {\n          v60 = v144--;\n          *(_BYTE *)(++v143 - 1) = sub_133D0(v138, v60);\n        }\n        while ( v144 != (char *)-1LL );\n      }\n      v62 = 9;\n      sub_12FF0(v137);\n      v59 = v138;\n      sub_12FF0(v138);\n      v145 = _mm_load_si128((const __m128i *)&v161);\n      v171 = 1LL;\n      v182 = 0;\n      v170 = &v182;\n      v146 = _mm_load_si128((const __m128i *)&v162);\n      v177 = v61;\n      *(_QWORD *)&v174 = v153.m128i_i64[0];\n      v147 = _mm_load_si128((const __m128i *)&v163);\n      *((_QWORD *)&v174 + 1) = v156;\n      v172 = v145;\n      v173 = v146;\n      v181 = v147;\n      v175 = v157;\n      v176 = v158;\n      v178 = v160;\n      v179 = v159;\n      v180 = v152;\n      v153.m128i_i64[0] = (__int64)\"-----END RSA PRIVATE KEY-----\\n\";\n      *(_QWORD *)&v152 = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n    }\n    else\n    {\n      if ( v19 != off_2603C0 )\n      {\n        if ( v19 != (__int64 (__fastcall **)())v152 && v19 != off_260760 && v19 != off_260620 )\n          __assert_fail(\"false && \\\"bad key alg in openssh_pem_write\\\"\", \"import.c\", 0x3F5u, \"openssh_pem_write\");\n        LOBYTE(v16) = v19 == (__int64 (__fastcall **)())v152 || v19 == off_260760;\n        *(_QWORD *)&v152 = sub_35330(v19, &v164, v16, v17, v152);\n        v20 = (*(v18 - 3))[3];\n        v21 = sub_47410(v19, &v164);\n        sub_10CD0(*(_QWORD *)(v21 + 32), 2LL);\n        LODWORD(v20) = 2 * (((unsigned __int64)v20 + 7) >> 3);\n        sub_10CD0(*(_QWORD *)(v21 + 32), 1LL);\n        sub_10CD0(v21 + 24, 1LL);\n        v153.m128i_i64[0] = *(_QWORD *)(v151 + 16);\n        sub_CDC0((_QWORD *)(v21 + 32), 4, v153.m128i_i32[0] - 4, 0);\n        v22 = *(_QWORD *)v151 + 4LL;\n        v23 = *(_QWORD *)(v151 + 16) - 4LL;\n        v153.m128i_i64[0] = *(_QWORD *)v151;\n        sub_10C10(v21 + 24, v22, v23);\n        v24 = sub_47400(v21 + 24);\n        sub_CDC0((_QWORD *)(v24 + 32), 6, v164, 0);\n        sub_10C10(v24 + 24, v152, v164);\n        sub_CDC0((_QWORD *)(v21 + 32), 0, *(_DWORD *)(v24 + 16), 160);\n        sub_10C10(v21 + 24, *(_QWORD *)v24, *(_QWORD *)(v24 + 16));\n        sub_47420(v24);\n        v25 = sub_47400(v24);\n        sub_CDC0((_QWORD *)(v25 + 32), 3, (_DWORD)v20 + 2, 0);\n        v153.m128i_i64[0] = v25 + 24;\n        sub_10CD0(v25 + 24, 0LL);\n        v26 = *(_QWORD *)v150 + 39LL;\n        *(_QWORD *)&v152 = *(_QWORD *)v150;\n        sub_10C10(v25 + 24, v26, (signed int)v20 + 1);\n        sub_CDC0((_QWORD *)(v21 + 32), 1, *(_DWORD *)(v25 + 16), 160);\n        sub_10C10(v21 + 24, *(_QWORD *)v25, *(_QWORD *)(v25 + 16));\n        sub_47420(v25);\n        v27 = (__int64)(v155 + 3);\n        sub_CDC0(v155 + 4, 16, *(_DWORD *)(v21 + 16), 32);\n        sub_10C10(v155 + 3, *(_QWORD *)v21, *(_QWORD *)(v21 + 16));\n        sub_47420(v21);\n        v154.m128i_i32[0] = 0;\n        v28 = 0LL;\n        v153.m128i_i64[0] = (__int64)\"-----END EC PRIVATE KEY-----\\n\";\n        *(_QWORD *)&v152 = \"-----BEGIN EC PRIVATE KEY-----\\n\";\nLABEL_14:\n        if ( s )\n        {\n          v29 = v27;\n          v30 = (char *)&v183;\n          v31 = v155[2];\n          v32 = (v31 + 8) & 0xFFFFFFF8;\n          sub_10C30(v29, (signed int)(v32 - v31), (unsigned __int8)(((v31 + 8) & 0xF8) - v31));\n          sub_3B660(&v183, 8LL);\n          v33 = strlen(s);\n          sub_CB40((__int64)s, v33, (__int64)&v183, (__int64)&v184);\n          sub_20390(&v184, &v183, v155[1], v32);\n          sub_47E30(&v184, 32LL);\n          v34 = (FILE *)sub_448E0(v149, \"wb\", 1LL);\n          v35 = v34;\n          if ( !v34 )\n          {\n            v5 = 0;\n            goto LABEL_20;\n          }\n          fputs((const char *)v152, v34);\n          fwrite(\"Proc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,\", 1uLL, 0x2EuLL, v35);\n          do\n          {\n            v36 = (unsigned __int8)*v30++;\n            __fprintf_chk(v35, 1LL, \"%02X\", v36);\n          }\n          while ( &v184 != v30 );\n          fwrite(\"\\n\\n\", 1uLL, 2uLL, v35);\n        }\n        else\n        {\n          v46 = (FILE *)sub_448E0(v149, \"wb\", 1LL);\n          v35 = v46;\n          if ( !v46 )\n          {\n            v5 = 0;\n            if ( !v155 )\n            {\nLABEL_21:\n              if ( v28 )\n              {\n                sub_47E30(v28, v154.m128i_i32[0]);\n                sub_114C0(v28);\n              }\n              if ( (_QWORD)v151 )\n                sub_47420(v151);\n              v37 = v150;\n              if ( (_QWORD)v150 )\n                goto LABEL_33;\n              goto LABEL_4;\n            }\nLABEL_20:\n            sub_47420(v155);\n            goto LABEL_21;\n          }\n          fputs((const char *)v152, v46);\n        }\n        sub_3A400(v35, v155[1], (unsigned int)v155[2], 64LL);\n        fputs((const char *)v153.m128i_i64[0], v35);\n        fclose(v35);\n        goto LABEL_20;\n      }\n      v47 = *(_QWORD *)(v150 + 16);\n      v48 = *(_QWORD *)(v150 + 8);\n      v166 = 0LL;\n      v168 = 0;\n      v169 = &v165;\n      v165 = v48;\n      v167 = v47;\n      sub_111C0(&v165, v14);\n      v49 = sub_111C0(v169, v14);\n      v51 = v50;\n      v154.m128i_i64[0] = sub_111C0(v169, v14);\n      v154.m128i_i64[1] = v52;\n      v153.m128i_i64[0] = sub_111C0(v169, v14);\n      v153.m128i_i64[1] = v53;\n      *(_QWORD *)&v152 = sub_111C0(v169, v14);\n      *((_QWORD *)&v152 + 1) = v54;\n      v55 = *(_QWORD *)(v151 + 16);\n      v56 = *(_QWORD *)(v151 + 8);\n      v166 = 0LL;\n      v168 = 0;\n      v169 = &v165;\n      v165 = v56;\n      v167 = v55;\n      *(_QWORD *)&v57 = sub_111C0(&v165, v14);\n      v58 = v153.m128i_i64[0];\n      v59 = *((unsigned int *)v169 + 6);\n      if ( (_DWORD)v59 )\nLABEL_74:\n        __assert_fail(\"!get_err(src)\", \"import.c\", 0x3A0u, \"openssh_pem_write\");\n      v176 = v57;\n      v60 = &v182;\n      v172.m128i_i64[1] = v51;\n      v61 = 0LL;\n      v153.m128i_i64[0] = (__int64)\"-----END DSA PRIVATE KEY-----\\n\";\n      v170 = &v182;\n      v171 = 1LL;\n      v182 = 0;\n      v62 = 6;\n      v172.m128i_i64[0] = v49;\n      v173 = v154;\n      *(_QWORD *)&v174 = v58;\n      *((_QWORD *)&v174 + 1) = v153.m128i_i64[1];\n      v175 = v152;\n      *(_QWORD *)&v152 = \"-----BEGIN DSA PRIVATE KEY-----\\n\";\n      v154.m128i_i32[0] = 0;\n    }\n    v63 = (unsigned int)(v62 - 1);\n    v64 = 0LL;\n    v65 = sub_47410(v59, v60);\n    v66 = v65 + 24;\n    v156 = v65;\n    *(_QWORD *)&v157 = v61;\n    LODWORD(v67) = 1;\n    v68 = (_QWORD *)(v65 + 32);\n    while ( 1 )\n    {\n      sub_CDC0(v68, 2, (signed int)v67, 0);\n      v69 = (signed int)v64++;\n      sub_10C20(v66, (&v170)[2 * v69], *(&v171 + 2 * v69));\n      if ( v63 + 1 == v64 )\n        break;\n      v67 = (&v170)[2 * v64 + 1];\n    }\n    v28 = v157;\n    v27 = (__int64)(v155 + 3);\n    sub_CDC0(v155 + 4, 16, *(_DWORD *)(v156 + 16), 32);\n    sub_10C10(v155 + 3, *(_QWORD *)v156, *(_QWORD *)(v156 + 16));\n    sub_47420(v156);\n    goto LABEL_14;\n  }\n  if ( a2 == 6 )\n  {\nLABEL_6:\n    v5 = sub_CE70(a1, v4, (__int64)s);\n    goto LABEL_4;\n  }\n  v5 = 0;\n  if ( a2 != 7 )\n    goto LABEL_4;\n  v38 = sub_47400(a1);\n  v39 = *v4;\n  v40 = v38 + 24;\n  v41 = v38;\n  ((void (__fastcall *)(__int64 (__fastcall ***)(), __int64))(**v4)[7])(*v4, v38 + 24);\n  v42 = (_QWORD *)sub_47410(v39, v40);\n  v43 = *v4;\n  v155 = v42;\n  v44 = (signed __int64)(v42 + 3);\n  ((void (__fastcall *)(__int64 (__fastcall ***)(), _QWORD *))(*v43)[8])(v43, v42 + 3);\n  v45 = **v4;\n  if ( v45 == off_260F40 )\n  {\n    v70 = *(_QWORD *)(v41 + 16);\n    v71 = *(_QWORD *)(v41 + 8);\n    v166 = 0LL;\n    v168 = 0;\n    v169 = &v165;\n    v165 = v71;\n    v167 = v70;\n    sub_111C0(&v165, v44);\n    v72 = sub_111C0(v169, v44);\n    v74 = v73;\n    v153.m128i_i64[0] = sub_111C0(v169, v44);\n    v153.m128i_i64[1] = v75;\n    v76 = v155[2];\n    v77 = v155[1];\n    v169 = &v165;\n    v166 = 0LL;\n    v168 = 0;\n    v165 = v77;\n    v167 = v76;\n    *(_QWORD *)&v78 = sub_111C0(&v165, v44);\n    v152 = v78;\n    *(_QWORD *)&v79 = sub_111C0(v169, v44);\n    v150 = v79;\n    *(_QWORD *)&v80 = sub_111C0(v169, v44);\n    v81 = v169;\n    v151 = v80;\n    *(_QWORD *)&v82 = sub_111C0(v169, v44);\n    v83 = *((unsigned int *)v169 + 6);\n    if ( (_DWORD)v83 )\n      __assert_fail(\"!get_err(src)\", \"import.c\", 0x891u, \"sshcom_write\");\n    v84 = _mm_load_si128((const __m128i *)&v150);\n    v85 = 0;\n    v174 = v82;\n    v171 = v74;\n    v86 = _mm_load_si128((const __m128i *)&v151);\n    v87 = 6;\n    v170 = (char *)v72;\n    v172 = (__m128i)v152;\n    v175 = (__int128)v86;\n    v173 = v153;\n    v176 = (__int128)v84;\n    *(_QWORD *)&v150 = \"if-modn{sign{rsa-pkcs1-sha1},encrypt{rsa-pkcs1v2-oaep}}\";\n  }\n  else\n  {\n    if ( v45 != off_2603C0 )\n      goto LABEL_29;\n    v115 = *(_QWORD *)(v41 + 16);\n    v116 = *(_QWORD *)(v41 + 8);\n    v166 = 0LL;\n    v168 = 0;\n    v169 = &v165;\n    v165 = v116;\n    v167 = v115;\n    sub_111C0(&v165, v44);\n    v117 = sub_111C0(v169, v44);\n    v119 = v118;\n    *(_QWORD *)&v120 = sub_111C0(v169, v44);\n    v152 = v120;\n    *(_QWORD *)&v121 = sub_111C0(v169, v44);\n    v151 = v121;\n    *(_QWORD *)&v122 = sub_111C0(v169, v44);\n    v150 = v122;\n    v81 = &v165;\n    v123 = *(_OWORD *)(v155 + 1);\n    v166 = 0LL;\n    v168 = 0;\n    v169 = &v165;\n    v167 = *((_QWORD *)&v123 + 1);\n    v165 = v123;\n    *(_QWORD *)&v124 = sub_111C0(&v165, v44);\n    v83 = (__int64)v169;\n    if ( *((_DWORD *)v169 + 6) )\n      __assert_fail(\"!get_err(src)\", \"import.c\", 0x8ADu, \"sshcom_write\");\n    v125 = _mm_load_si128((const __m128i *)&v150);\n    v85 = 1;\n    v175 = v124;\n    v171 = v119;\n    v170 = (char *)v117;\n    v172 = (__m128i)v151;\n    v87 = 5;\n    v173 = (__m128i)v152;\n    v174 = (__int128)v125;\n    *(_QWORD *)&v150 = \"dl-modp{sign{dsa-nist-sha1},dh{plain}}\";\n  }\n  v88 = sub_47410(v81, v83);\n  v89 = v88 + 24;\n  v90 = (_QWORD *)v88;\n  sub_10D80(v88 + 24, 1064303083LL);\n  sub_10D80(v89, 0LL);\n  sub_10F30(v89, v150);\n  v91 = \"none\";\n  if ( s )\n    v91 = \"3des-cbc\";\n  sub_10F30(v89, v91);\n  *(_QWORD *)&v150 = v90[2];\n  sub_10D80(v89, 0LL);\n  sub_10D80(v89, 0LL);\n  if ( v85 )\n    sub_10D80(v89, 0LL);\n  v92 = 0;\n  do\n  {\n    v93 = v92++;\n    sub_F7E0(v89, (unsigned __int8 *)(&v170)[2 * v93], *(&v171 + 2 * v93));\n  }\n  while ( v92 != v87 );\n  v94 = v150;\n  v95 = (signed int)v150;\n  v96 = (signed int)v150 + 4LL;\n  v97 = *((_DWORD *)v90 + 4) - 8 - v150;\n  v98 = (_BYTE *)(v96 + *v90);\n  v98[3] = v97;\n  v98[2] = BYTE1(v97);\n  v98[1] = BYTE2(v97);\n  *v98 = HIBYTE(v97);\n  if ( s )\n  {\n    v99 = v94 + 4 - *((_DWORD *)v90 + 4);\n    *(_QWORD *)&v152 = v95;\n    *(_QWORD *)&v150 = &v184;\n    *(_QWORD *)&v151 = v99 & 7;\n    sub_3B660(&v184, v151);\n    sub_10C10(v89, v150, v151);\n    v100 = *v90;\n    v101 = *((_DWORD *)v90 + 4);\n    v95 = v152;\n    v102 = *v90 + v96;\n    v103 = v101 - 4 - v94;\n    if ( ((_BYTE)v101 - 4 - (_BYTE)v94) & 7 )\n      __assert_fail(\"!passphrase || cipherlen % 8 == 0\", \"import.c\", 0x8D8u, \"sshcom_write\");\n  }\n  else\n  {\n    v100 = *v90;\n    v102 = *v90 + v96;\n    v103 = *((_DWORD *)v90 + 4) - 4 - v150;\n  }\n  v104 = (_BYTE *)(v95 + v100);\n  v104[2] = BYTE1(v103);\n  v104[3] = v103;\n  v104[1] = BYTE2(v103);\n  *(_QWORD *)&v150 = v102;\n  *v104 = HIBYTE(v103);\n  v105 = v90[2];\n  v106 = (_BYTE *)*v90;\n  v107 = (unsigned int)v90[2] >> 8;\n  v106[7] = v105;\n  v106[6] = v107;\n  v106[4] = BYTE3(v105);\n  v106[5] = BYTE2(v105);\n  if ( s )\n  {\n    v108 = strlen(s);\n    sub_CC00((__int64)s, v108, (__int64)&v184);\n    v183 = 0LL;\n    sub_20390(&v184, &v183, v150, v103);\n    sub_47E30(&v184, 32LL);\n  }\n  v5 = 0;\n  v109 = (FILE *)sub_448E0(v149, \"wb\", 1LL);\n  v110 = v109;\n  if ( v109 )\n  {\n    v111 = 60LL;\n    fwrite(\"---- BEGIN SSH2 ENCRYPTED PRIVATE KEY ----\\n\", 1uLL, 0x2BuLL, v109);\n    fwrite(\"Comment: \\\"\", 1uLL, 0xAuLL, v110);\n    v112 = (const char *)v4[1];\n    while ( (signed int)v111 < (signed int)strlen(v112) )\n    {\n      v113 = (unsigned int)v111;\n      v112 += v111;\n      v111 = 70LL;\n      __fprintf_chk(v110, 1LL, \"%.*s\\\\\\n\", v113);\n    }\n    v114 = v112;\n    v5 = 1;\n    __fprintf_chk(v110, 1LL, \"%s\\\"\\n\", v114);\n    sub_3A400(v110, v90[1], *((unsigned int *)v90 + 4), 70LL);\n    fwrite(\"---- END SSH2 ENCRYPTED PRIVATE KEY ----\\n\", 1uLL, 0x29uLL, v110);\n    fclose(v110);\n  }\n  sub_47420(v90);\nLABEL_29:\n  if ( v155 )\n    sub_47420(v155);\n  if ( v41 )\n  {\n    v37 = v41;\nLABEL_33:\n    sub_47420(v37);\n  }\nLABEL_4:\n  result = v5;\n  if ( __readfsqword(0x28u) != v185 )\n    goto LABEL_74;\n  return result;\n}\n", 
            "funcStartAddr": "0xf850L", 
            "funcEndAddr": "0x10affL", 
            "funcName": "sub_F850"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_10B30(__int64 a1, unsigned __int64 a2)\n{\n  signed __int64 result; // rax\n\n  result = 1LL;\n  if ( *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) < a2 )\n  {\n    *(_DWORD *)(a1 + 24) = 1;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x10b30L", 
            "funcEndAddr": "0x10b4dL", 
            "funcName": "sub_10B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10C10(__int64 (**a1)(void))\n{\n  return (*a1)();\n}\n", 
            "funcStartAddr": "0x10c10L", 
            "funcEndAddr": "0x10c12L", 
            "funcName": "sub_10C10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10C20(__int64 (**a1)(void))\n{\n  return (*a1)();\n}\n", 
            "funcStartAddr": "0x10c20L", 
            "funcEndAddr": "0x10c22L", 
            "funcName": "sub_10C20"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10C30(void (__fastcall **a1)(_QWORD, __int64 *, signed __int64), unsigned __int64 a2, unsigned __int8 a3)\n{\n  signed __int64 v3; // rcx\n  unsigned __int128 v4; // ax\n  unsigned __int64 v5; // rbx\n  signed __int64 v6; // rbp\n  __int64 v8; // [rsp+0h] [rbp-48h]\n  __int64 v9; // [rsp+8h] [rbp-40h]\n  unsigned __int64 v10; // [rsp+18h] [rbp-30h]\n\n  v10 = __readfsqword(0x28u);\n  v3 = 72340172838076673LL * a3;\n  v4 = 0x101010101010101LL * (unsigned __int128)a3;\n  v8 = v4;\n  v9 = v3 + *((_QWORD *)&v4 + 1);\n  if ( a2 )\n  {\n    v5 = a2;\n    do\n    {\n      v6 = 16LL;\n      if ( v5 <= 0x10 )\n        v6 = v5;\n      (*a1)(a1, &v8, v6);\n      v5 -= v6;\n    }\n    while ( v5 );\n  }\n  return __readfsqword(0x28u) ^ v10;\n}\n", 
            "funcStartAddr": "0x10c30L", 
            "funcEndAddr": "0x10cc7L", 
            "funcName": "sub_10C30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10CD0(__int64 (__fastcall **a1)(_QWORD, char *, signed __int64), char a2)\n{\n  char v3; // [rsp+Ch] [rbp-Ch]\n\n  v3 = a2;\n  return (*a1)(a1, &v3, 1LL);\n}\n", 
            "funcStartAddr": "0x10cd0L", 
            "funcEndAddr": "0x10ceaL", 
            "funcName": "sub_10CD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10CF0(void (__fastcall **a1)(_QWORD, char *, signed __int64, _QWORD), char a2)\n{\n  char v3; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\n  v4 = __readfsqword(0x28u);\n  v3 = a2;\n  (*a1)(a1, &v3, 1LL, 0LL);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x10cf0L", 
            "funcEndAddr": "0x10d2fL", 
            "funcName": "sub_10CF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10D30(void (__fastcall **a1)(_QWORD, char *, signed __int64, _QWORD), __int16 a2)\n{\n  char v3; // [rsp+6h] [rbp-12h]\n  char v4; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v4 = a2;\n  v5 = __readfsqword(0x28u);\n  v3 = HIBYTE(a2);\n  (*a1)(a1, &v3, 2LL, 0LL);\n  return __readfsqword(0x28u) ^ v5;\n}\n", 
            "funcStartAddr": "0x10d30L", 
            "funcEndAddr": "0x10d78L", 
            "funcName": "sub_10D30"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10D80(void (__fastcall **a1)(_QWORD, char *, signed __int64, _QWORD), int a2)\n{\n  char v3; // [rsp+4h] [rbp-14h]\n  char v4; // [rsp+5h] [rbp-13h]\n  char v5; // [rsp+6h] [rbp-12h]\n  char v6; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v7; // [rsp+8h] [rbp-10h]\n\n  v5 = BYTE1(a2);\n  v6 = a2;\n  v3 = HIBYTE(a2);\n  v7 = __readfsqword(0x28u);\n  v4 = BYTE2(a2);\n  (*a1)(a1, &v3, 4LL, 0LL);\n  return __readfsqword(0x28u) ^ v7;\n}\n", 
            "funcStartAddr": "0x10d80L", 
            "funcEndAddr": "0x10dd9L", 
            "funcName": "sub_10D80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10DE0(void (__fastcall **a1)(_QWORD, char *, signed __int64, _QWORD), __int64 a2)\n{\n  char v3; // [rsp+0h] [rbp-18h]\n  char v4; // [rsp+1h] [rbp-17h]\n  char v5; // [rsp+2h] [rbp-16h]\n  char v6; // [rsp+3h] [rbp-15h]\n  char v7; // [rsp+4h] [rbp-14h]\n  char v8; // [rsp+5h] [rbp-13h]\n  char v9; // [rsp+6h] [rbp-12h]\n  char v10; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v11; // [rsp+8h] [rbp-10h]\n\n  v9 = BYTE1(a2);\n  v10 = a2;\n  v8 = BYTE2(a2);\n  v7 = BYTE3(a2);\n  v6 = BYTE4(a2);\n  v5 = BYTE5(a2);\n  v3 = HIBYTE(a2);\n  v11 = __readfsqword(0x28u);\n  v4 = BYTE6(a2);\n  (*a1)(a1, &v3, 8LL, 0LL);\n  return __readfsqword(0x28u) ^ v11;\n}\n", 
            "funcStartAddr": "0x10de0L", 
            "funcEndAddr": "0x10e67L", 
            "funcName": "sub_10DE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10E70(void (__fastcall **a1)(_QWORD, char *, signed __int64), char *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // rbx\n  char v5; // [rsp+4h] [rbp-24h]\n  char v6; // [rsp+5h] [rbp-23h]\n  char v7; // [rsp+6h] [rbp-22h]\n  char v8; // [rsp+7h] [rbp-21h]\n  unsigned __int64 v9; // [rsp+8h] [rbp-20h]\n\n  v9 = __readfsqword(0x28u);\n  if ( a3 >> 31 > 1 )\n    __assert_fail(\"(len >> 31) < 2\", \"marshal.c\", 0x41u, \"BinarySink_put_string\");\n  v3 = a3;\n  v7 = BYTE1(a3);\n  v8 = a3;\n  v6 = BYTE2(a3);\n  v5 = BYTE3(a3);\n  (*a1)(a1, &v5, 4LL);\n  (*a1)(a1, a2, v3);\n  return __readfsqword(0x28u) ^ v9;\n}\n", 
            "funcStartAddr": "0x10e70L", 
            "funcEndAddr": "0x10f12L", 
            "funcName": "sub_10E70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10F20(void (__fastcall **a1)(_QWORD, char *, signed __int64), char *a2, unsigned __int64 a3)\n{\n  return sub_10E70(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x10f20L", 
            "funcEndAddr": "0x10f25L", 
            "funcName": "sub_10F20"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_10F30(void (__fastcall **a1)(_QWORD, char *, signed __int64), char *a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = strlen(a2);\n  return sub_10E70(a1, a2, v2);\n}\n", 
            "funcStartAddr": "0x10f30L", 
            "funcEndAddr": "0x10f58L", 
            "funcName": "sub_10F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10F60(void (__fastcall **a1)(_QWORD, char *, signed __int64), __int64 a2)\n{\n  sub_10E70(a1, *(char **)a2, *(_QWORD *)(a2 + 16));\n  return sub_47420(a2);\n}\n", 
            "funcStartAddr": "0x10f60L", 
            "funcEndAddr": "0x10f79L", 
            "funcName": "sub_10F60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10F80(__int64 (__fastcall **a1)(_QWORD, const char *, size_t), const char *a2)\n{\n  size_t v2; // rax\n\n  v2 = strlen(a2);\n  return (*a1)(a1, a2, v2 + 1);\n}\n", 
            "funcStartAddr": "0x10f80L", 
            "funcEndAddr": "0x10fa9L", 
            "funcName": "sub_10F80"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_11030(__int64 a1, unsigned __int64 a2)\n{\n  char *result; // rax\n  __int64 v3; // rdx\n\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, a2) )\n    return \"\";\n  v3 = *(_QWORD *)(a1 + 8);\n  result = (char *)(v3 + *(_QWORD *)a1);\n  *(_QWORD *)(a1 + 8) = v3 + a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x11030L", 
            "funcEndAddr": "0x1106aL", 
            "funcName": "sub_11030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11070(__int64 a1)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, 1uLL) )\n    return 0LL;\n  v2 = *(_QWORD *)(a1 + 8);\n  v3 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 8) = v2 + 1;\n  return *(unsigned __int8 *)(v3 + v2);\n}\n", 
            "funcStartAddr": "0x11070L", 
            "funcEndAddr": "0x110a2L", 
            "funcName": "sub_11070"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_110B0(__int64 a1)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, 1uLL) )\n    return 0;\n  v2 = *(_QWORD *)(a1 + 8);\n  v3 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 8) = v2 + 1;\n  return *(_BYTE *)(v3 + v2) != 0;\n}\n", 
            "funcStartAddr": "0x110b0L", 
            "funcEndAddr": "0x110e5L", 
            "funcName": "sub_110B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_110F0(__int64 a1)\n{\n  __int64 v2; // rax\n  unsigned __int8 *v3; // rdx\n  bool v4; // zf\n\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, 2uLL) )\n    return 0LL;\n  v2 = *(_QWORD *)(a1 + 8);\n  v3 = (unsigned __int8 *)(v2 + *(_QWORD *)a1);\n  *(_QWORD *)(a1 + 8) = v2 + 2;\n  v4 = ((*v3 << 8) | v3[1]) == 0;\n  return _byteswap_ushort(*(_WORD *)v3);\n}\n", 
            "funcStartAddr": "0x110f0L", 
            "funcEndAddr": "0x11132L", 
            "funcName": "sub_110F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11140(__int64 a1)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, 4uLL) )\n    return 0LL;\n  v2 = *(_QWORD *)(a1 + 8);\n  v3 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 8) = v2 + 4;\n  return _byteswap_ulong(*(_DWORD *)(v3 + v2));\n}\n", 
            "funcStartAddr": "0x11140L", 
            "funcEndAddr": "0x11175L", 
            "funcName": "sub_11140"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_111C0(__int64 a1)\n{\n  char *result; // rax\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  unsigned __int32 v4; // edx\n  __int64 v5; // r8\n  __int64 v6; // rdx\n\n  if ( *(_DWORD *)(a1 + 24) )\n    return \"\";\n  if ( !(unsigned __int8)sub_10B30(a1, 4uLL) )\n    return \"\";\n  v2 = *(_QWORD *)(a1 + 8);\n  v3 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 8) = v2 + 4;\n  v4 = _byteswap_ulong(*(_DWORD *)(v3 + v2));\n  if ( *(_DWORD *)(a1 + 24) || !(unsigned __int8)sub_10B30(a1, v4) )\n    return \"\";\n  v6 = *(_QWORD *)(a1 + 8);\n  result = (char *)(v6 + *(_QWORD *)a1);\n  *(_QWORD *)(a1 + 8) = v6 + v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x111c0L", 
            "funcEndAddr": "0x11226L", 
            "funcName": "sub_111C0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_11230(__int64 a1)\n{\n  char *v1; // rbp\n  __int64 v2; // r12\n  _BYTE *v3; // rax\n\n  v1 = \"\";\n  if ( *(_DWORD *)(a1 + 24) )\n    return v1;\n  v2 = *(_QWORD *)(a1 + 8);\n  v1 = (char *)(v2 + *(_QWORD *)a1);\n  v3 = memchr((const void *)(v2 + *(_QWORD *)a1), 0, *(_QWORD *)(a1 + 16) - v2);\n  if ( v3 )\n  {\n    *(_QWORD *)(a1 + 8) = v3 - v1 + v2 + 1;\n    return v1;\n  }\n  *(_DWORD *)(a1 + 24) = 1;\n  return \"\";\n}\n", 
            "funcStartAddr": "0x11230L", 
            "funcEndAddr": "0x11296L", 
            "funcName": "sub_11230"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10bf8L", 
            "funcEndAddr": "0x10c07L", 
            "funcName": "sub_112A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10bf8L", 
            "funcEndAddr": "0x10c07L", 
            "funcName": "sub_112A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10bf8L", 
            "funcEndAddr": "0x10c07L", 
            "funcName": "sub_112A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10bf8L", 
            "funcEndAddr": "0x10c07L", 
            "funcName": "sub_112A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10bf8L", 
            "funcEndAddr": "0x10c07L", 
            "funcName": "sub_112A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_112B0(__int64 a1)\n{\n  __int64 retaddr; // [rsp+0h] [rbp+0h]\n\n  retaddr = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  JUMPOUT(*(_DWORD *)(a1 + 24), 0, &loc_10BB1);\n  JUMPOUT(&loc_10C03);\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10b50L", 
            "funcEndAddr": "0x10b7fL", 
            "funcName": "sub_112B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_112B0(__int64 a1)\n{\n  __int64 retaddr; // [rsp+0h] [rbp+0h]\n\n  retaddr = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  JUMPOUT(*(_DWORD *)(a1 + 24), 0, &loc_10BB1);\n  JUMPOUT(&loc_10C03);\n}\n\n__int64 __fastcall sub_112A0(__int64 a1, const char *a2)\n{\n  __int64 v2; // rbp\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // [rsp+0h] [rbp-40h]\n\n  v6 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  if ( !*(_DWORD *)(a1 + 24) )\n  {\n    while ( (unsigned __int8)sub_10B30(a1, 1uLL) )\n    {\n      v2 = *(_QWORD *)(a1 + 8);\n      if ( (strchr(a2, *(char *)(*(_QWORD *)a1 + v2)) != 0LL) == 1 )\n      {\n        v3 = *(_DWORD *)(a1 + 24);\n        *(_QWORD *)(a1 + 8) = v2 + 1;\n        if ( !v3 )\n          continue;\n      }\n      return v6;\n    }\n    v4 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x10b50L", 
            "funcEndAddr": "0x10b7fL", 
            "funcName": "sub_112B0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_112C0(__int64 *a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r13\n  unsigned __int64 v3; // r12\n  signed __int64 v4; // r14\n  char *v5; // rax\n  signed __int64 v6; // rdx\n  char v8; // al\n\n  v1 = *a1;\n  v2 = a1[1];\n  v3 = *a1 + v2;\n  if ( !*((_DWORD *)a1 + 6) )\n  {\n    v4 = a1[2];\n    v5 = (char *)memchr((const void *)(*a1 + v2), 10, v4 - v2);\n    if ( v5 )\n      v4 = (signed __int64)&v5[v2 - v3 + 1];\n    a1[1] = v4;\n    v6 = v1 + v4;\n    if ( v1 + v4 > v3 && *(_BYTE *)(v6 - 1) == 10 && v6 - 1 > v3 )\n      v8 = *(_BYTE *)(v6 - 2);\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x112c0L", 
            "funcEndAddr": "0x11357L", 
            "funcName": "sub_112C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_113D0(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = *(_QWORD *)(a1 + 16);\n  if ( result >= a2 )\n  {\n    *(_QWORD *)(a1 + 8) = a2;\n    *(_DWORD *)(a1 + 24) = 0;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 8) = result;\n    *(_DWORD *)(a1 + 24) = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x113d0L", 
            "funcEndAddr": "0x113f4L", 
            "funcName": "sub_113D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_11400(_QWORD *a1, __int64 a2)\n{\n  signed __int64 result; // rax\n\n  *a1 = a2;\n  a1[1] = sub_10B00;\n  result = (signed __int64)(a1 + 1);\n  a1[2] = a1 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x11400L", 
            "funcEndAddr": "0x11417L", 
            "funcName": "sub_11400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11440(unsigned __int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  __int64 v3; // rcx\n  unsigned __int128 v4; // ax\n\n  v3 = a3;\n  v4 = a2 * (unsigned __int128)a1;\n  if ( !is_mul_ok(a2, a1) )\n    goto LABEL_10;\n  a1 = v4;\n  if ( ~v3 < (unsigned __int64)v4 )\n    goto LABEL_10;\n  a1 = v3 + v4;\n  if ( !(v3 + (_QWORD)v4) )\n    a1 = 1LL;\n  *(_QWORD *)&v4 = malloc(a1);\n  if ( !(_QWORD)v4 )\nLABEL_10:\n    sub_12230(a1, a2, *((_QWORD *)&v4 + 1), v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x11440L", 
            "funcEndAddr": "0x1147dL", 
            "funcName": "sub_11440"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_11480(void *a1, size_t a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rdx\n  void *result; // rax\n\n  v3 = a3;\n  v4 = 0x7FFFFFFF / a3;\n  v5 = 0x7FFFFFFF % a3;\n  if ( v4 < a2 || ((a2 *= v3, !a1) ? (a1 = (void *)a2, result = malloc(a2)) : (result = realloc(a1, a2)), !result) )\n    sub_12230(a1, a2, v5, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x11480L", 
            "funcEndAddr": "0x114bfL", 
            "funcName": "sub_11480"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_114C0(void *a1)\n{\n  if ( a1 )\n    free(a1);\n}\n", 
            "funcStartAddr": "0x114c0L", 
            "funcEndAddr": "0x114d2L", 
            "funcName": "sub_114C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_114E0(void *ptr, unsigned __int64 *a2, unsigned __int64 a3, unsigned __int64 a4, unsigned __int64 a5, char a6)\n{\n  unsigned __int64 v6; // rbp\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // r14\n  void *v9; // r13\n  unsigned __int64 v10; // rcx\n  void *v11; // r15\n  unsigned __int64 v12; // rcx\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rdi\n  void *v16; // rax\n  size_t v17; // rbp\n\n  if ( !a3 )\n    __assert_fail(\"eltsize > 0\", \"memory.c\", 0x58u, \"safegrowarray\");\n  v6 = a3;\n  v7 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v8 = *a2;\n  v9 = ptr;\n  if ( 0xFFFFFFFFFFFFFFFFLL / a3 < *a2 )\n    __assert_fail(\"oldsize <= maxsize\", \"memory.c\", 0x5Eu, \"safegrowarray\");\n  if ( v7 < a4 )\n    __assert_fail(\"oldlen <= maxsize\", \"memory.c\", 0x5Fu, \"safegrowarray\");\n  if ( v7 - a4 < a5 )\n    __assert_fail(\"extralen <= maxsize - oldlen\", \"memory.c\", 0x60u, \"safegrowarray\");\n  v10 = a5 + a4;\n  v11 = ptr;\n  if ( v10 >= v8 )\n  {\n    v12 = v10 - v8;\n    if ( v8 >> 4 >= v12 )\n      v12 = v8 >> 4;\n    v13 = 0x100 / a3;\n    if ( 0x100 / a3 < v12 )\n      v13 = v12;\n    v14 = 0xFFFFFFFFFFFFFFFFLL / a3 - v8;\n    if ( v14 > v13 )\n      v14 = v13;\n    if ( a6 )\n    {\n      v16 = (void *)sub_11440(v14 + v8, a3, 0LL);\n      v11 = v16;\n      if ( v8 )\n      {\n        v17 = v8 * v6;\n        memcpy(v16, v9, v17);\n        sub_47E30(v9, v17);\n        free(v9);\n      }\n    }\n    else\n    {\n      v11 = sub_11480(v9, v14 + v8, a3);\n    }\n    *a2 = v14 + v8;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x114e0L", 
            "funcEndAddr": "0x11658L", 
            "funcName": "sub_114E0"
        }, 
        {
            "decompiledFuncCode": "__int16 __fastcall sub_11660(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rax\n  unsigned __int64 v4; // r12\n  bool v5; // zf\n  __int64 v6; // rax\n  char v7; // r12\n  bool v8; // bl\n  __int16 result; // ax\n\n  v2 = sub_153C0(*a1, a2, a1[2]);\n  v3 = sub_152D0(*a1, a2);\n  if ( (unsigned int)sub_14030(v2, v3) )\n  {\n    v8 = 0;\n    v7 = 1;\n  }\n  else\n  {\n    v4 = 0LL;\n    if ( a1[1] )\n    {\n      while ( 1 )\n      {\n        v5 = (unsigned int)sub_14030(v2, a1[5]) == 0;\n        v6 = a1[1];\n        if ( !v5 )\n          break;\n        if ( v6 - 1 != v4 )\n        {\n          ++v4;\n          sub_15160(*a1, v2, v2, v2);\n          if ( a1[1] > v4 )\n            continue;\n        }\n        goto LABEL_10;\n      }\n      v5 = v6 - 1 == v4;\n      v7 = 1;\n      v8 = v5;\n    }\n    else\n    {\nLABEL_10:\n      v8 = 0;\n      v7 = 0;\n    }\n  }\n  sub_12FF0(v2);\n  LOBYTE(result) = v7;\n  HIBYTE(result) = v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x11660L", 
            "funcEndAddr": "0x11717L", 
            "funcName": "sub_11660"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_11720(__int64 a1)\n{\n  _QWORD *v1; // rbx\n  signed __int64 i; // rsi\n  __int64 v3; // rsi\n  __int64 v4; // rax\n  __int64 v5; // rsi\n  __int64 v6; // rax\n  __int64 v7; // rsi\n\n  v1 = (_QWORD *)sub_11440(1uLL, 0x30uLL, 0LL);\n  if ( !(unsigned int)sub_13FC0(a1, 2LL) )\n    __assert_fail(\"mp_hs_integer(p, 2)\", \"millerrabin.c\", 0x6Cu, \"miller_rabin_new\");\n  if ( (unsigned int)sub_13400(a1, 0LL) != 1 )\n    __assert_fail(\"mp_get_bit(p, 0) == 1\", \"millerrabin.c\", 0x6Du, \"miller_rabin_new\");\n  v1[1] = 1LL;\n  for ( i = 1LL; !(unsigned int)sub_13400(a1, i); v1[1] = i )\n    i = v1[1] + 1LL;\n  v3 = v1[1];\n  v1[2] = sub_14AE0(a1, v3);\n  v1[3] = sub_12FA0(2LL, v3);\n  v4 = sub_16E80(a1);\n  v1[4] = v4;\n  v5 = v4;\n  sub_13A10(v4, v4, 1LL);\n  v6 = sub_16210(a1, v5);\n  v7 = v1[4];\n  *v1 = v6;\n  v1[5] = sub_16350(v6, v7);\n  return v1;\n}\n", 
            "funcStartAddr": "0x11720L", 
            "funcEndAddr": "0x1182dL", 
            "funcName": "sub_11720"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_11830(_QWORD *a1)\n{\n  sub_12FF0(a1[2]);\n  sub_12FF0(a1[3]);\n  sub_12FF0(a1[4]);\n  sub_12FF0(a1[5]);\n  sub_15110(*a1);\n  sub_47E30(a1, 48LL);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x11830L", 
            "funcEndAddr": "0x11876L", 
            "funcName": "sub_11830"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11880(_QWORD *a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbp\n  unsigned int v3; // eax\n  unsigned int v4; // ebx\n\n  v1 = sub_16DD0(a1[3], a1[4], sub_3B660);\n  v2 = v1;\n  LOWORD(v3) = sub_11660(a1, v1);\n  v4 = v3;\n  sub_12FF0(v2);\n  return v4;\n}\n", 
            "funcStartAddr": "0x11880L", 
            "funcEndAddr": "0x118beL", 
            "funcName": "sub_11880"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_118C0(_QWORD *a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rax\n  __int64 v3; // rbx\n  __int16 v4; // ax\n  __int64 v6; // ST08_8\n\n  while ( 1 )\n  {\n    v1 = sub_16DD0(a1[3], a1[4], sub_3B660);\n    v2 = sub_16E50(v1);\n    v3 = v2;\n    v4 = sub_11660(a1, v2);\n    if ( !(_BYTE)v4 )\n    {\n      sub_12FF0(v3);\n      return 0LL;\n    }\n    if ( HIBYTE(v4) )\n      break;\n    sub_12FF0(v3);\n  }\n  v6 = sub_15390(*a1, v3);\n  sub_12FF0(v3);\n  return v6;\n}\n", 
            "funcStartAddr": "0x118c0L", 
            "funcEndAddr": "0x1194fL", 
            "funcName": "sub_118C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_11950(unsigned int a1)\n{\n  signed __int64 result; // rax\n\n  result = 2LL;\n  if ( a1 <= 0x513 )\n  {\n    result = 3LL;\n    if ( a1 <= 0x351 )\n    {\n      result = 4LL;\n      if ( a1 <= 0x289 )\n      {\n        result = 5LL;\n        if ( a1 <= 0x225 )\n        {\n          result = 6LL;\n          if ( a1 <= 0x1C1 )\n          {\n            result = 7LL;\n            if ( a1 <= 0x18F )\n            {\n              result = 8LL;\n              if ( a1 <= 0x15D )\n              {\n                result = 9LL;\n                if ( a1 <= 0x12B )\n                {\n                  result = 12LL;\n                  if ( a1 <= 0xF9 )\n                  {\n                    result = 15LL;\n                    if ( a1 <= 0xC7 )\n                      result = a1 < 0x96 ? 27 : 18;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x11950L", 
            "funcEndAddr": "0x119e6L", 
            "funcName": "sub_11950"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_119F0(__int64 a1, __int64 a2, ...)\n{\n  void *v2; // rbx\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a2);\n  v5 = __readfsqword(0x28u);\n  v2 = (void *)sub_470D0(a2, va);\n  (*(void (__fastcall **)(__int64, void *))(*(_QWORD *)a1 + 32LL))(a1, v2);\n  sub_114C0(v2);\n  return __readfsqword(0x28u) ^ v5;\n}\n", 
            "funcStartAddr": "0x119f0L", 
            "funcEndAddr": "0x11ac3L", 
            "funcName": "sub_119F0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_11AD0()\n{\n  __int64 result; // rax\n\n  result = sub_11440(1uLL, 0x48uLL, 0LL);\n  *(_QWORD *)(result + 56) = 0LL;\n  *(_QWORD *)(result + 48) = 0LL;\n  *(_QWORD *)(result + 40) = 0LL;\n  *(_QWORD *)(result + 64) = 0LL;\n  *(_BYTE *)result = 1;\n  *(_QWORD *)(result + 24) = 0LL;\n  *(_QWORD *)(result + 8) = 0LL;\n  *(_BYTE *)(result + 32) = 0;\n  *(_BYTE *)(result + 16) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x11ad0L", 
            "funcEndAddr": "0x11b25L", 
            "funcName": "sub_11AD0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_11B30(_QWORD *a1, __int64 a2, char a3)\n{\n  char v3; // r12\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rbp\n  __int64 v7; // rax\n  unsigned __int64 v8; // rcx\n  void *v9; // rdi\n  _QWORD *result; // rax\n  __int64 v11; // rdx\n\n  v3 = a3;\n  v4 = a1;\n  v5 = sub_11440(1uLL, 0x18uLL, 0LL);\n  *(_QWORD *)v5 = a2;\n  *(_BYTE *)(v5 + 8) = v3;\n  v6 = v5;\n  v7 = sub_47410(1LL, 24LL);\n  v8 = a1[5];\n  v9 = (void *)a1[7];\n  *(_QWORD *)(v6 + 16) = v7;\n  result = sub_114E0(v9, v4 + 6, 8uLL, v8, 1uLL, 0);\n  v11 = v4[5];\n  v4[7] = result;\n  v4[5] = v11 + 1;\n  result[v11] = v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x11b30L", 
            "funcEndAddr": "0x11ba5L", 
            "funcName": "sub_11B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11BB0(__int64 a1, const char *a2)\n{\n  sub_47350(*(_QWORD *)(a1 + 16), 0LL);\n  strlen(a2);\n  return sub_10C20((__int64 (**)(void))(*(_QWORD *)(a1 + 16) + 24LL));\n}\n", 
            "funcStartAddr": "0x11bb0L", 
            "funcEndAddr": "0x11be8L", 
            "funcName": "sub_11BB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11BF0(__int64 a1)\n{\n  return **(_QWORD **)(a1 + 16);\n}\n", 
            "funcStartAddr": "0x11bf0L", 
            "funcEndAddr": "0x11bf8L", 
            "funcName": "sub_11BF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11C00(__int64 a1)\n{\n  return sub_46EE0(**(char ***)(a1 + 16));\n}\n", 
            "funcStartAddr": "0x11c00L", 
            "funcEndAddr": "0x11c0cL", 
            "funcName": "sub_11C00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_11C10(__int64 a1)\n{\n  unsigned __int64 v1; // rbx\n  __int64 v2; // rbp\n\n  if ( *(_QWORD *)(a1 + 40) )\n  {\n    v1 = 0LL;\n    do\n    {\n      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v1++);\n      sub_47420(*(_QWORD *)(v2 + 16));\n      sub_114C0(*(void **)v2);\n      sub_114C0((void *)v2);\n    }\n    while ( *(_QWORD *)(a1 + 40) > v1 );\n  }\n  sub_114C0(*(void **)(a1 + 56));\n  sub_114C0(*(void **)(a1 + 8));\n  sub_114C0(*(void **)(a1 + 24));\n  sub_114C0((void *)a1);\n}\n", 
            "funcStartAddr": "0x11c10L", 
            "funcEndAddr": "0x11c78L", 
            "funcName": "sub_11C10"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_11C80(__int64 *a1)\n{\n  bool result; // al\n\n  if ( (unsigned int)sub_92A0(a1, 2) == 5 )\n    result = *(_BYTE *)sub_9440(a1, 61) != 0;\n  else\n    result = *(_BYTE *)sub_9440(a1, 0) != 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x11c80L", 
            "funcEndAddr": "0x11cbdL", 
            "funcName": "sub_11C80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11CC0(__int64 *a1)\n{\n  __int64 result; // rax\n\n  if ( (unsigned int)sub_92A0(a1, 2) == 5 )\n    result = sub_9440(a1, 61);\n  else\n    result = sub_9440(a1, 0);\n  return result;\n}\n", 
            "funcStartAddr": "0x11cc0L", 
            "funcEndAddr": "0x11ceeL", 
            "funcName": "sub_11CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_11FA0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  void *v3; // r12\n\n  v1 = sub_47400(a1);\n  sub_474E0(v1);\n  sub_474E0(v1);\n  v2 = sub_44C60(v1, \"%sCompiler: gcc %s\");\n  if ( v2 )\n  {\n    v3 = (void *)v2;\n    sub_474E0(v1);\n    sub_114C0(v3);\n  }\n  sub_474E0(v1);\n  return sub_47470(v1, \"%sSource commit: %s\");\n}\n", 
            "funcStartAddr": "0x11fa0L", 
            "funcEndAddr": "0x1204cL", 
            "funcName": "sub_11FA0"
        }, 
        {
            "decompiledFuncCode": "void nullsub_2()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x12080L", 
            "funcEndAddr": "0x12082L", 
            "funcName": "nullsub_2"
        }, 
        {
            "decompiledFuncCode": "void nullsub_3()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x12090L", 
            "funcEndAddr": "0x12092L", 
            "funcName": "nullsub_3"
        }, 
        {
            "decompiledFuncCode": "void nullsub_4()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x120a0L", 
            "funcEndAddr": "0x120a2L", 
            "funcName": "nullsub_4"
        }, 
        {
            "decompiledFuncCode": "void nullsub_5()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x120c0L", 
            "funcEndAddr": "0x120c2L", 
            "funcName": "nullsub_5"
        }, 
        {
            "decompiledFuncCode": "void nullsub_6()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x12120L", 
            "funcEndAddr": "0x12122L", 
            "funcName": "nullsub_6"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_12230()\n{\n  sub_A2C0((__int64)\"Out of memory\");\n}\n", 
            "funcStartAddr": "0x12230L", 
            "funcEndAddr": "0x12242L", 
            "funcName": "sub_12230"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_12250(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // rcx\n  char v4; // al\n  signed __int64 v5; // r8\n  char v6; // cl\n  signed __int64 v7; // r10\n  int v8; // er11\n  _BYTE *v9; // rax\n  signed __int64 v10; // r10\n  int v11; // er9\n  int v12; // er8\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      v5 = v3-- ^ a3;\n      a3 ^= v5 & ~(((unsigned __int8)(v4 ^ 0x30) - 1LL) >> 63);\n    }\n    while ( v3 != -1 );\n  }\n  if ( a2 )\n  {\n    v6 = 0;\n    do\n    {\n      v7 = 1LL << v6;\n      v8 = -((a3 >> v6) & 1);\n      if ( a2 > 1LL << v6 )\n      {\n        v9 = (_BYTE *)(a1 + v7);\n        v10 = -v7;\n        do\n        {\n          v11 = (unsigned __int8)v9[v10];\n          v12 = v8 & (v11 ^ (unsigned __int8)*v9);\n          v9[v10] = v8 & (v11 ^ *v9) ^ v11;\n          *v9++ ^= v12;\n        }\n        while ( (_BYTE *)(a1 + a2) != v9 );\n      }\n      ++v6;\n    }\n    while ( a2 >> v6 );\n  }\n}\n", 
            "funcStartAddr": "0x12250L", 
            "funcEndAddr": "0x122f6L", 
            "funcName": "sub_12250"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_12300(__int64 a1, __int64 a2, _QWORD *a3, unsigned __int64 *a4, __int64 a5, __int64 a6, unsigned __int64 a7)\n{\n  unsigned __int64 v7; // r10\n  unsigned __int64 v8; // r15\n  _QWORD *v9; // rbp\n  unsigned __int64 v10; // r13\n  __int64 v11; // rsi\n  unsigned __int128 v12; // ax\n  unsigned __int64 v14; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v15; // [rsp+8h] [rbp-60h]\n  __int64 v16; // [rsp+10h] [rbp-58h]\n\n  if ( !a2 )\n    return a7;\n  v7 = 0LL;\n  v8 = a7;\n  v16 = a2;\n  v9 = a3;\n  v15 = *a3;\n  v14 = *a4;\n  do\n  {\n    if ( v15 > v7 )\n      v10 = *(_QWORD *)(v9[1] + 8 * v7);\n    else\n      v10 = 0LL;\n    v11 = a6;\n    if ( v14 > v7 )\n      v11 = a6 ^ *(_QWORD *)(a4[1] + 8 * v7) & a5;\n    v12 = (unsigned __int64)v11 + v10 + (unsigned __int128)v8;\n    v8 = *((_QWORD *)&v12 + 1);\n    if ( a1 )\n      *(_QWORD *)(a1 + 8 * v7) = v12;\n    ++v7;\n  }\n  while ( v16 != v7 );\n  return v8;\n}\n", 
            "funcStartAddr": "0x12300L", 
            "funcEndAddr": "0x123c3L", 
            "funcName": "sub_12300"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_123D0(__int64 *a1, unsigned __int64 *a2, __int64 a3, unsigned __int64 a4)\n{\n  __int64 v4; // r8\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // r14\n  __int64 v7; // rbx\n  unsigned __int64 v8; // r15\n  unsigned int v9; // edi\n  __int128 v10; // cx\n  signed __int64 v11; // kr00_8\n  signed __int64 v12; // r13\n  __int64 v13; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v14; // [rsp+18h] [rbp-40h]\n\n  v4 = *a1;\n  if ( *a1 )\n  {\n    v5 = 0LL;\n    v6 = 0LL;\n    v7 = a1[1];\n    v8 = *a2;\n    v9 = 0;\n    v14 = a4;\n    v13 = v7;\n    do\n    {\n      v9 |= ((unsigned __int64)-(signed __int64)(((unsigned int)v5 ^ (unsigned int)v14) & 1 | ((v5 ^ v14) >> 1)) >> 63) ^ 1;\n      v12 = a3 & -(signed __int64)v9;\n      a3 &= v9 - 1LL;\n      if ( v8 > v5 )\n        v10 = *(unsigned __int64 *)(a2[1] + 8 * v5);\n      else\n        v10 = 0uLL;\n      v11 = v6 + v12;\n      v6 = (v10 + v6 + (unsigned __int128)(unsigned __int64)v12) >> 64;\n      *(_QWORD *)(v13 + 8 * v5++) = v10 + v11;\n    }\n    while ( v5 != v4 );\n  }\n}\n", 
            "funcStartAddr": "0x123d0L", 
            "funcEndAddr": "0x1249aL", 
            "funcName": "sub_123D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_124A0(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r9\n  unsigned __int64 v3; // rbx\n  _QWORD *v4; // rax\n  char v5; // cl\n  unsigned __int64 v6; // rdx\n  __int64 v7; // rax\n  int v8; // ebp\n  signed __int64 result; // rax\n  signed int v10; // er10\n  signed __int64 v11; // r8\n  unsigned __int64 v12; // r12\n  unsigned __int64 *i; // rdx\n  unsigned __int64 v14; // rsi\n  unsigned __int64 v15; // rax\n  unsigned __int64 v16; // [rsp+0h] [rbp-48h]\n\n  v2 = *a1;\n  v16 = a2 & 0x3F;\n  if ( *a1 )\n  {\n    v3 = a1[1];\n    v4 = (_QWORD *)a1[1];\n    do\n    {\n      *v4 &= ((v2 - (a2 >> 6)) >> 63) - 1;\n      ++v4;\n    }\n    while ( v4 != (_QWORD *)(v3 + 8 * v2) );\n    v5 = 0;\n    do\n    {\n      v6 = 1LL << v5;\n      do\n      {\n        v7 = 0LL;\n        if ( v2 > v6 )\n          v7 = *(_QWORD *)(v3 + 8 * v6);\n        *(_QWORD *)(v3 + (-8LL << v5) + 8 * v6) ^= -(signed __int64)((a2 >> 6 >> v5) & 1) & (*(_QWORD *)(v3 + (-8LL << v5) + 8 * v6) ^ v7);\n        ++v6;\n      }\n      while ( v2 + (1LL << v5) != v6 );\n      ++v5;\n    }\n    while ( v2 >> v5 );\n  }\n  v8 = 0;\n  result = 8 * v2 - 8;\n  do\n  {\n    v10 = 1 << v8;\n    v11 = -(signed __int64)((v16 >> v8) & 1);\n    if ( v2 )\n    {\n      v12 = a1[1];\n      for ( i = (unsigned __int64 *)a1[1]; ; *(i - 1) = v14 ^ v11 & (v14 ^ ((*i << (64 - (1 << v8))) | v15)) )\n      {\n        v14 = *i;\n        ++i;\n        v15 = v14 >> v10;\n        if ( (unsigned __int64 *)(8 * v2 + v12) == i )\n          break;\n      }\n      result = (v14 ^ v15) & v11 ^ v14;\n      *(_QWORD *)(v12 + 8 * v2 - 8) = result;\n    }\n    ++v8;\n  }\n  while ( v8 != 6 );\n  return result;\n}\n", 
            "funcStartAddr": "0x124a0L", 
            "funcEndAddr": "0x12615L", 
            "funcName": "sub_124A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_12620(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rbp\n  unsigned __int64 v3; // r11\n  __int64 v4; // rsi\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // r12\n  unsigned __int64 result; // rax\n  signed __int64 v8; // rdx\n  unsigned __int64 v9; // rbx\n  _QWORD *v10; // rax\n  char v11; // cl\n  unsigned __int64 v12; // rdi\n  __int64 v13; // rax\n  __int64 v14; // rdx\n\n  v2 = a2;\n  v3 = *a1;\n  v4 = a2 & 0x3F;\n  v5 = v2 >> 6;\n  v6 = ((unsigned __int64)(64 - v4) >> 6) - 1;\n  result = v6 & (64 - v4);\n  v8 = ((*a1 - v5) >> 63) - 1;\n  if ( *a1 )\n  {\n    v9 = a1[1];\n    v10 = (_QWORD *)a1[1];\n    do\n    {\n      *v10 &= v8;\n      ++v10;\n    }\n    while ( (_QWORD *)(v9 + 8 * v3) != v10 );\n    v11 = 0;\n    do\n    {\n      v12 = v3 - 1 - (1LL << v11);\n      do\n      {\n        v13 = 0LL;\n        if ( v3 > v12 )\n          v13 = *(_QWORD *)(v9 + 8 * v12);\n        *(_QWORD *)(v9 + (8LL << v11) + 8 * v12) ^= -(signed __int64)((v5 >> v11) & 1) & (*(_QWORD *)(v9 + (8LL << v11) + 8 * v12) ^ v13);\n        --v12;\n      }\n      while ( ~(1LL << v11) != v12 );\n      ++v11;\n    }\n    while ( v3 >> v11 );\n    result = v3 - 2;\n    do\n    {\n      v14 = *(_QWORD *)(v9 + 8 * result + 8) << v4;\n      if ( v3 > result )\n        v14 |= v6 & (*(_QWORD *)(v9 + 8 * result) >> ((unsigned __int8)v6 & (unsigned __int8)(64 - v4)));\n      *(_QWORD *)(v9 + 8 * result-- + 8) = v14;\n    }\n    while ( result != -2LL );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x12620L", 
            "funcEndAddr": "0x12743L", 
            "funcName": "sub_12620"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_127F0(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n\n  v2 = *a1;\n  if ( *a1 < a2 )\n    __assert_fail(\"len <= pool->nw\", \"mpint.c\", 0x2AFu, \"mp_alloc_from_scratch\");\n  v3 = a1[1];\n  if ( v2 - a2 <= v2 )\n    v2 -= a2;\n  *a1 = v2;\n  a1[1] = v3 + 8 * a2;\n  return a2;\n}\n", 
            "funcStartAddr": "0x127f0L", 
            "funcEndAddr": "0x1283bL", 
            "funcName": "sub_127F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_12840@<rax>(unsigned __int64 *a1@<rdx>, unsigned __int64 a2@<rcx>, unsigned __int64 *a3@<rdi>, unsigned __int64 *a4@<rsi>, __int64 a5@<r8>, __int64 a6@<r10>)\n{\n  unsigned __int64 *v6; // r15\n  unsigned __int64 *v7; // rbp\n  unsigned __int64 v8; // rsi\n  unsigned __int64 v9; // rax\n  unsigned __int64 *v10; // rbx\n  __int64 v11; // ST48_8\n  unsigned __int64 v12; // ST28_8\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // r10\n  unsigned __int64 v16; // rdi\n  unsigned __int64 v17; // rsi\n  unsigned __int64 v18; // rcx\n  _QWORD *v19; // r15\n  unsigned __int64 v20; // rbp\n  unsigned __int64 v21; // rsi\n  unsigned __int64 i; // rbx\n  _QWORD *v23; // rcx\n  unsigned __int64 *v24; // r8\n  unsigned __int64 v25; // rdi\n  unsigned __int64 v26; // r10\n  unsigned __int128 v27; // ax\n  unsigned __int128 v28; // ax\n  unsigned __int128 v29; // ax\n  __int64 v31; // rsi\n  unsigned __int64 v32; // r8\n  unsigned __int64 v33; // r13\n  __int64 v34; // r9\n  unsigned __int64 v35; // rbp\n  unsigned __int64 v36; // rdx\n  unsigned __int64 v37; // rdi\n  signed __int64 v38; // rdx\n  signed __int64 v39; // rsi\n  unsigned __int64 v40; // rdi\n  unsigned __int64 v41; // rdx\n  __int64 v42; // rdx\n  unsigned __int64 v43; // rsi\n  __int128 v44; // ax\n  unsigned __int64 v45; // rax\n  unsigned __int64 v46; // r13\n  __int64 v47; // rdx\n  __int128 v48; // ax\n  __int128 v49; // ax\n  _QWORD *v50; // [rsp+28h] [rbp-130h]\n  __int64 v51; // [rsp+38h] [rbp-120h]\n  unsigned __int64 v52; // [rsp+40h] [rbp-118h]\n  unsigned __int64 v53; // [rsp+50h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+58h] [rbp-100h]\n  unsigned __int64 v55; // [rsp+60h] [rbp-F8h]\n  __int64 v56; // [rsp+68h] [rbp-F0h]\n  __int64 v57; // [rsp+70h] [rbp-E8h]\n  _QWORD *v58; // [rsp+78h] [rbp-E0h]\n  __int64 v59; // [rsp+80h] [rbp-D8h]\n  unsigned __int64 v60; // [rsp+88h] [rbp-D0h]\n  unsigned __int64 v61; // [rsp+90h] [rbp-C8h]\n  _QWORD *v62; // [rsp+98h] [rbp-C0h]\n  unsigned __int64 v63; // [rsp+A0h] [rbp-B8h]\n  __int64 v64; // [rsp+A8h] [rbp-B0h]\n  __int64 v65; // [rsp+B0h] [rbp-A8h]\n  unsigned __int64 v66; // [rsp+B8h] [rbp-A0h]\n  unsigned __int64 v67; // [rsp+C0h] [rbp-98h]\n  _QWORD *v68; // [rsp+C8h] [rbp-90h]\n  __int64 v69; // [rsp+D0h] [rbp-88h]\n  _QWORD *v70; // [rsp+D8h] [rbp-80h]\n  __int64 v71; // [rsp+E0h] [rbp-78h]\n  __int64 v72; // [rsp+E8h] [rbp-70h]\n  __int128 v73; // [rsp+F0h] [rbp-68h]\n  __int128 v74; // [rsp+100h] [rbp-58h]\n  unsigned __int64 v75; // [rsp+118h] [rbp-40h]\n\n  v6 = a1;\n  v7 = a4;\n  v8 = *a3;\n  v75 = __readfsqword(0x28u);\n  v9 = *v7;\n  if ( *a1 >= *v7 )\n    v9 = *a1;\n  v55 = a2;\n  v56 = a5;\n  if ( v9 > v8 )\n    v9 = v8;\n  v53 = 2 * v9;\n  if ( a2 < 6 * v9 )\n    __assert_fail(\"scratch.nw >= mp_mul_scratchspace_unary(inlen)\", \"mpint.c\", 0x3EBu, \"mp_mul_internal\");\n  v10 = a3;\n  v11 = a6;\n  v12 = v9;\n  sub_47E30(a3[1], 8 * v8);\n  v13 = v12;\n  v14 = *v7;\n  v15 = v11;\n  if ( v12 <= 0x17 )\n  {\n    v16 = *v6;\n    v18 = *v10;\n    v45 = v6[1];\n    v19 = (_QWORD *)v10[1];\n    v52 = v45;\n    v50 = (_QWORD *)v7[1];\n  }\n  else\n  {\n    v16 = *v6;\n    v17 = v6[1];\n    v18 = *v10;\n    v19 = (_QWORD *)v10[1];\n    v52 = v17;\n    v50 = (_QWORD *)v7[1];\n    if ( v14 && v16 )\n    {\n      v31 = v16;\n      v32 = v13 >> 1;\n      v54 = v13;\n      v33 = v13 - (v13 >> 1);\n      v66 = v10[1];\n      v34 = v33;\n      v35 = 2 * v33;\n      if ( v14 <= v33 )\n        v34 = v14;\n      v58 = v50;\n      if ( v33 <= v16 )\n        v31 = v13 - (v13 >> 1);\n      v36 = v14 - v34;\n      v60 = v52;\n      v59 = v31;\n      v57 = v34;\n      if ( v36 > v32 )\n        v36 = v13 >> 1;\n      v37 = v16 - v31;\n      v61 = v36;\n      if ( v37 > v32 )\n        v37 = v13 >> 1;\n      v62 = &v50[v34];\n      v38 = v52 + 8 * v31;\n      v39 = v18;\n      if ( v35 <= v18 )\n        v39 = 2 * v33;\n      v63 = v37;\n      v40 = v18;\n      v64 = v38;\n      if ( v33 <= v18 )\n        v40 = v13 - (v13 >> 1);\n      v41 = v18 - v40;\n      v65 = v39;\n      if ( v18 - v40 > v18 )\n        v41 = v18;\n      v67 = v41;\n      v68 = &v19[v40];\n      v42 = v18 - v39;\n      if ( v18 - v39 > v18 )\n        v42 = v18;\n      v69 = v42;\n      v70 = &v19[v39];\n      sub_12840(&v65, &v57, &v59, v55, v56);\n      sub_12840(&v69, &v61, &v63, v55, v56);\n      if ( *v10 >= v53 )\n      {\n        v46 = v33 + 1;\n        v71 = sub_127F0(&v55, v46);\n        v72 = v47;\n        *(_QWORD *)&v48 = sub_127F0(&v55, v46);\n        v73 = v48;\n        sub_12300(v72, v71, &v57, &v61, -1LL, 0LL, 0LL);\n        sub_12300(*((__int64 *)&v73 + 1), v73, &v59, &v63, -1LL, 0LL, 0LL);\n        *(_QWORD *)&v49 = sub_127F0(&v55, v35 + 1);\n        v74 = v49;\n        sub_12840(&v74, &v71, &v73, v55, v56);\n        sub_12300(*((__int64 *)&v74 + 1), v74, &v74, (unsigned __int64 *)&v65, -1LL, -1LL, 1uLL);\n        sub_12300(*((__int64 *)&v74 + 1), v74, &v74, (unsigned __int64 *)&v69, -1LL, -1LL, 1uLL);\n        sub_12300((__int64)v68, v67, &v67, (unsigned __int64 *)&v74, -1LL, 0LL, 0LL);\n      }\n      else\n      {\n        v43 = v54;\n        if ( v67 <= v54 )\n          v43 = v67;\n        *(_QWORD *)&v44 = sub_127F0(&v55, v43);\n        v74 = v44;\n        sub_12840(&v74, &v57, &v63, v55, v56);\n        sub_12300((__int64)v68, v67, &v67, (unsigned __int64 *)&v74, -1LL, 0LL, 0LL);\n        sub_12840(&v74, &v61, &v59, v55, v56);\n        sub_12300((__int64)v68, v67, &v67, (unsigned __int64 *)&v74, -1LL, 0LL, 0LL);\n      }\n      return __readfsqword(0x28u) ^ v75;\n    }\n  }\n  v20 = (unsigned __int64)&v19[v18];\n  v21 = (unsigned __int64)&v50[v14];\n  for ( i = v52 + 8 * v16; v21 > (unsigned __int64)v50 && v20 > (unsigned __int64)v19; ++v19 )\n  {\n    v23 = v19;\n    if ( v20 <= (unsigned __int64)v19 || i <= v52 )\n    {\n      v25 = 0LL;\n    }\n    else\n    {\n      v51 = v15;\n      v24 = (unsigned __int64 *)v52;\n      v25 = 0LL;\n      v26 = *v50;\n      do\n      {\n        v27 = 0uLL;\n        if ( i > (unsigned __int64)v24 )\n          v27 = *v24 * (unsigned __int128)v26;\n        v28 = (unsigned __int64)*v23 + (unsigned __int128)v25 + v27;\n        ++v24;\n        *v23 = v28;\n        ++v23;\n        v25 = *((_QWORD *)&v28 + 1);\n      }\n      while ( i > (unsigned __int64)v24 && v20 > (unsigned __int64)v23 );\n      v15 = v51;\n    }\n    while ( v20 > (unsigned __int64)v23 )\n    {\n      v15 = 0LL;\n      v29 = v25 + (unsigned __int128)(unsigned __int64)*v23;\n      *v23 += v25;\n      ++v23;\n      v25 = *((_QWORD *)&v29 + 1);\n    }\n    ++v50;\n  }\n  return __readfsqword(0x28u) ^ v75;\n}\n", 
            "funcStartAddr": "0x12840L", 
            "funcEndAddr": "0x12e54L", 
            "funcName": "sub_12840"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_12E60(__int64 a1)\n{\n  _QWORD *v1; // rax\n  _QWORD *v2; // rbx\n\n  v1 = (_QWORD *)sub_11440(1uLL, 0x10uLL, 8 * a1);\n  if ( !a1 )\n    __assert_fail(\"nw\", \"mpint.c\", 0x44u, \"mp_make_sized\");\n  v2 = v1;\n  *v1 = a1;\n  v1[1] = v1 + 2;\n  sub_47E30(v1 + 2, 8 * a1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x12e60L", 
            "funcEndAddr": "0x12ec3L", 
            "funcName": "sub_12E60"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_12ED0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // rdi\n  __int64 v6; // r12\n  __int64 v7; // rbx\n  _QWORD *result; // rax\n  __int64 v9; // r11\n  unsigned __int8 *v10; // rdi\n  __int64 v11; // r8\n  __int64 v12; // r9\n  char v13; // cl\n  unsigned __int64 v14; // r10\n\n  v4 = a1;\n  v5 = (unsigned __int64)(a2 + 7) >> 3;\n  v6 = a3;\n  v7 = a4;\n  if ( !v5 )\n    v5 = 1LL;\n  result = sub_12E60(v5);\n  if ( a2 )\n  {\n    v9 = result[1];\n    v10 = (unsigned __int8 *)(v7 + v4);\n    v11 = 0LL;\n    do\n    {\n      v12 = *v10;\n      v13 = v11 & 7;\n      v14 = v11++ & 0xFFFFFFFFFFFFFFF8LL;\n      v10 += v6;\n      *(_QWORD *)(v9 + v14) |= v12 << 8 * v13;\n    }\n    while ( v11 != a2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x12ed0L", 
            "funcEndAddr": "0x12f42L", 
            "funcName": "sub_12ED0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_12F50(__int64 a1, const void *a2)\n{\n  _QWORD *v2; // rbx\n\n  v2 = sub_12E60(a1);\n  memcpy((void *)v2[1], a2, 8LL * *v2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x12f50L", 
            "funcEndAddr": "0x12f82L", 
            "funcName": "sub_12F50"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_12F90(__int64 a1)\n{\n  return sub_12E60((unsigned __int64)(a1 + 63) >> 6);\n}\n", 
            "funcStartAddr": "0x12f90L", 
            "funcEndAddr": "0x12f9dL", 
            "funcName": "sub_12F90"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_12FA0(__int64 a1)\n{\n  _QWORD *result; // rax\n  _QWORD *v2; // rdx\n  signed __int64 v3; // rcx\n\n  result = sub_12E60(1LL);\n  if ( *result )\n  {\n    v2 = (_QWORD *)result[1];\n    v3 = (signed __int64)&v2[*result];\n    do\n    {\n      *v2 = a1;\n      ++v2;\n    }\n    while ( v2 != (_QWORD *)v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x12fa0L", 
            "funcEndAddr": "0x12fceL", 
            "funcName": "sub_12FA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_12FD0(_QWORD *a1)\n{\n  return 8LL * *a1;\n}\n", 
            "funcStartAddr": "0x12fd0L", 
            "funcEndAddr": "0x12fd8L", 
            "funcName": "sub_12FD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_12FE0(_QWORD *a1)\n{\n  return *a1 << 6;\n}\n", 
            "funcStartAddr": "0x12fe0L", 
            "funcEndAddr": "0x12fe8L", 
            "funcName": "sub_12FE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_12FF0(_QWORD *a1)\n{\n  sub_47E30(a1[1], 8LL * *a1);\n  sub_47E30(a1, 16LL);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x12ff0L", 
            "funcEndAddr": "0x1301eL", 
            "funcName": "sub_12FF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_130D0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  unsigned __int64 v3; // rbx\n  bool v4; // cf\n  bool v5; // zf\n  void *v6; // rdi\n\n  v2 = a1;\n  v3 = *a1;\n  v4 = *a2 < *a1;\n  v5 = *a2 == *a1;\n  v6 = (void *)a1[1];\n  if ( v4 || v5 )\n    v3 = *a2;\n  memmove(v6, (const void *)a2[1], 8 * v3);\n  return sub_47E30(8 * v3 + v2[1], 8 * (*v2 - v3));\n}\n", 
            "funcStartAddr": "0x130d0L", 
            "funcEndAddr": "0x13115L", 
            "funcName": "sub_130D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_13140(__int64 *a1, unsigned __int64 *a2, unsigned __int64 *a3, char a4)\n{\n  __int64 v4; // rbp\n  signed __int64 v5; // rcx\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // r11\n  unsigned __int64 v8; // rax\n  __int64 v9; // r10\n  __int64 v10; // r8\n  __int64 v11; // rdi\n\n  v4 = *a1;\n  v5 = -(signed __int64)(a4 & 1);\n  if ( *a1 )\n  {\n    v6 = *a2;\n    v7 = *a3;\n    v8 = 0LL;\n    v9 = a1[1];\n    do\n    {\n      v10 = 0LL;\n      if ( v6 > v8 )\n        v10 = *(_QWORD *)(a2[1] + 8 * v8);\n      v11 = v10;\n      if ( v7 > v8 )\n        v11 = v10 ^ *(_QWORD *)(a3[1] + 8 * v8);\n      *(_QWORD *)(v9 + 8 * v8++) = v10 ^ v5 & v11;\n    }\n    while ( v8 != v4 );\n  }\n}\n", 
            "funcStartAddr": "0x13140L", 
            "funcEndAddr": "0x131a6L", 
            "funcName": "sub_13140"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_131B0(__int64 *a1, _QWORD *a2, char a3)\n{\n  __int64 v3; // rcx\n  __int64 *v4; // rax\n  _QWORD *v5; // rdx\n  signed __int64 v6; // r8\n  __int64 v7; // rsi\n  signed __int64 v8; // rcx\n  signed __int64 v9; // [rsp+8h] [rbp-10h]\n\n  v3 = *a1;\n  if ( *a1 != *a2 )\n    __assert_fail(\"x0->nw == x1->nw\", \"mpint.c\", 0x9Au, \"mp_cond_swap\");\n  v9 = -(signed __int64)(a3 & 1);\n  if ( v3 )\n  {\n    v4 = (__int64 *)a1[1];\n    v5 = (_QWORD *)a2[1];\n    v6 = (signed __int64)&v4[v3];\n    do\n    {\n      v7 = *v4;\n      ++v4;\n      v8 = v9 & (v7 ^ *v5);\n      *(v4 - 1) = v8 ^ v7;\n      *v5 ^= v8;\n      ++v5;\n    }\n    while ( v4 != (__int64 *)v6 );\n  }\n}\n", 
            "funcStartAddr": "0x131b0L", 
            "funcEndAddr": "0x1322cL", 
            "funcName": "sub_131B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_13250(_QWORD *a1, char a2)\n{\n  signed __int64 v2; // rsi\n  _QWORD *v3; // rax\n  signed __int64 v4; // rdx\n\n  v2 = (a2 & 1) - 1LL;\n  if ( *a1 )\n  {\n    v3 = (_QWORD *)a1[1];\n    v4 = (signed __int64)&v3[*a1];\n    do\n    {\n      *v3 &= v2;\n      ++v3;\n    }\n    while ( v3 != (_QWORD *)v4 );\n  }\n}\n", 
            "funcStartAddr": "0x13250L", 
            "funcEndAddr": "0x1327eL", 
            "funcName": "sub_13250"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_13280(__int64 a1, __int64 a2)\n{\n  return sub_12ED0(a1, a2, 1LL, 0LL);\n}\n", 
            "funcStartAddr": "0x13280L", 
            "funcEndAddr": "0x1328cL", 
            "funcName": "sub_13280"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_13290(__int64 a1, __int64 a2)\n{\n  return sub_12ED0(a1, a2, -1LL, a2 - 1);\n}\n", 
            "funcStartAddr": "0x13290L", 
            "funcEndAddr": "0x132a0L", 
            "funcName": "sub_13290"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_132A0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rdi\n  _QWORD *result; // rax\n  __int64 v5; // r9\n  char *v6; // r8\n  unsigned __int64 v7; // rdi\n  __int64 v8; // r11\n  char v9; // cl\n  char v10; // dl\n  unsigned __int64 v11; // r11\n  char v12; // cl\n\n  if ( a2 > 0x3FFFFFFFFFFFFFFFLL )\n    __assert_fail(\"hex.len <= (~(size_t)0) / 4\", \"mpint.c\", 0xFAu, \"mp_from_hex_pl\");\n  v2 = a1;\n  v3 = (4 * a2 + 63) >> 6;\n  if ( !v3 )\n    v3 = 1LL;\n  result = sub_12E60(v3);\n  if ( a2 )\n  {\n    v5 = result[1];\n    v6 = (char *)(v2 + a2 - 1);\n    v7 = 0LL;\n    do\n    {\n      v8 = *v6--;\n      v9 = (v8 - 48) ^ ((v8 - 48) ^ (v8 - 87)) & ~(unsigned __int8)(((102 - v8) | (v8 - 97)) >> 63);\n      v10 = v9 ^ (v9 ^ (v8 - 55)) & ~(unsigned __int8)(((70 - v8) | (v8 - 65)) >> 63);\n      v11 = v7 >> 4;\n      v12 = v7++ & 0xF;\n      *(_QWORD *)(v5 + 8 * v11) |= (unsigned __int64)(v10 & 0xF) << 4 * v12;\n    }\n    while ( v7 != a2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x132a0L", 
            "funcEndAddr": "0x1339aL", 
            "funcName": "sub_132A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_133A0(const char *a1)\n{\n  unsigned __int64 v1; // rax\n\n  v1 = strlen(a1);\n  return sub_132A0((__int64)a1, v1);\n}\n", 
            "funcStartAddr": "0x133a0L", 
            "funcEndAddr": "0x133b5L", 
            "funcName": "sub_133A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_133C0(__int64 a1)\n{\n  return sub_12F50(*(_QWORD *)a1, *(const void **)(a1 + 8));\n}\n", 
            "funcStartAddr": "0x133c0L", 
            "funcEndAddr": "0x133ccL", 
            "funcName": "sub_133C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_133D0(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( a2 >> 3 < *a1 )\n    result = *(_QWORD *)(a1[1] + (a2 & 0xFFFFFFFFFFFFFFF8LL)) >> 8 * ((unsigned __int8)a2 & 7u);\n  return result;\n}\n", 
            "funcStartAddr": "0x133d0L", 
            "funcEndAddr": "0x133fcL", 
            "funcName": "sub_133D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_13400(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  signed __int64 result; // rax\n\n  result = 0LL;\n  if ( a2 >> 6 < *a1 )\n    result = (*(_QWORD *)(a1[1] + 8 * (a2 >> 6)) >> a2) & 1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x13400L", 
            "funcEndAddr": "0x13420L", 
            "funcName": "sub_13400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_13420(_QWORD *a1)\n{\n  signed __int64 v1; // rdx\n  __int64 result; // rax\n\n  v1 = *a1 - 1LL;\n  if ( !*a1 )\n    return 0LL;\n  do\n    result = *(_QWORD *)(a1[1] + 8 * v1--);\n  while ( v1 != -1 );\n  return result;\n}\n", 
            "funcStartAddr": "0x13420L", 
            "funcEndAddr": "0x13443L", 
            "funcName": "sub_13420"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13450(unsigned __int64 *a1, unsigned __int64 a2, char a3)\n{\n  char v3; // cl\n  unsigned __int64 *v4; // rsi\n  unsigned __int64 result; // rax\n\n  if ( *a1 <= a2 >> 6 )\n    __assert_fail(\"word < x->nw\", \"mpint.c\", 0x134u, \"mp_set_bit\");\n  v3 = a2 & 0x3F;\n  v4 = (unsigned __int64 *)(a1[1] + 8 * (a2 >> 6));\n  result = ((unsigned __int64)(a3 & 1) << v3) | *v4 & __ROL8__(-2LL, v3);\n  *v4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x13450L", 
            "funcEndAddr": "0x134a6L", 
            "funcName": "sub_13450"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_134B0(__int64 *a1)\n{\n  __int64 v1; // r9\n  unsigned __int64 v2; // rsi\n  __int64 v3; // r10\n  __int64 v4; // rcx\n  signed __int64 v5; // rdi\n  signed __int64 v6; // rax\n  __int64 v7; // rdx\n  signed __int64 v8; // rax\n  signed int v9; // er8\n  unsigned __int64 v10; // rcx\n  __int64 v11; // r9\n  signed __int64 v12; // rdx\n  unsigned __int64 v13; // rdi\n  unsigned __int64 v14; // rdx\n\n  v1 = *a1;\n  if ( *a1 )\n  {\n    v2 = -1LL;\n    v3 = a1[1];\n    v4 = 0LL;\n    v5 = -1LL;\n    do\n    {\n      v6 = -(*(_QWORD *)(v3 + 8 * v4) & 1LL | (*(_QWORD *)(v3 + 8 * v4) >> 1)) >> 63;\n      v2 ^= v6 & (v2 ^ *(_QWORD *)(v3 + 8 * v4));\n      v7 = v4++;\n      v5 ^= (v5 ^ v7) & v6;\n    }\n    while ( v1 != v4 );\n    v8 = (v5 << 6) + 1;\n  }\n  else\n  {\n    v8 = -63LL;\n    v2 = -1LL;\n  }\n  v9 = 6;\n  v10 = 32LL;\n  v11 = 0LL;\n  do\n  {\n    v12 = -(signed __int64)(v2 >> v10) >> 63;\n    v13 = v12 & (v2 ^ (v2 >> v10));\n    v14 = v10 & v12;\n    v10 >>= 1;\n    v2 ^= v13;\n    v11 += v14;\n    --v9;\n  }\n  while ( v9 );\n  return v11 + v8;\n}\n", 
            "funcStartAddr": "0x134b0L", 
            "funcEndAddr": "0x13560L", 
            "funcName": "sub_134B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_13560(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  signed __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r14\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // r8\n  char v9; // cl\n  signed __int64 v10; // rdi\n\n  v1 = a1;\n  v2 = 16LL * *a1;\n  v3 = sub_11440(v2 + 1, 1uLL, 0LL);\n  v4 = v3;\n  *(_BYTE *)(v3 + v2) = 0;\n  v5 = v2 - 1;\n  if ( v2 )\n  {\n    v6 = v3 + v5;\n    v7 = 0LL;\n    do\n    {\n      v8 = v7 >> 4;\n      v9 = v7++ & 0xF;\n      --v6;\n      v10 = (*(_QWORD *)(v1[1] + 8 * v8) >> 4 * v9) & 0xFLL;\n      *(_BYTE *)(v6 + 1) = v10 + (-(((unsigned __int8)v10 + 6) >> 4) & 0x27) + 48;\n    }\n    while ( v2 != v7 );\n  }\n  sub_12250(v4, v2 + 1, v5);\n  return v4;\n}\n\n__int64 __fastcall sub_13560(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  signed __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r14\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // r8\n  char v9; // cl\n  signed __int64 v10; // rdi\n\n  v1 = a1;\n  v2 = 16LL * *a1;\n  v3 = sub_11440(v2 + 1, 1uLL, 0LL);\n  v4 = v3;\n  *(_BYTE *)(v3 + v2) = 0;\n  v5 = v2 - 1;\n  if ( v2 )\n  {\n    v6 = v3 + v5;\n    v7 = 0LL;\n    do\n    {\n      v8 = v7 >> 4;\n      v9 = v7++ & 0xF;\n      --v6;\n      v10 = (*(_QWORD *)(v1[1] + 8 * v8) >> 4 * v9) & 0xFLL;\n      *(_BYTE *)(v6 + 1) = v10 + (-(((unsigned __int8)v10 + 6) >> 4) & 0x27) + 48;\n    }\n    while ( v2 != v7 );\n  }\n  sub_12250(v4, v2 + 1, v5);\n  return v4;\n}\n", 
            "funcStartAddr": "0x12750L", 
            "funcEndAddr": "0x127e8L", 
            "funcName": "sub_13560"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_13560(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  signed __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r14\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // r8\n  char v9; // cl\n  signed __int64 v10; // rdi\n\n  v1 = a1;\n  v2 = 16LL * *a1;\n  v3 = sub_11440(v2 + 1, 1uLL, 0LL);\n  v4 = v3;\n  *(_BYTE *)(v3 + v2) = 0;\n  v5 = v2 - 1;\n  if ( v2 )\n  {\n    v6 = v3 + v5;\n    v7 = 0LL;\n    do\n    {\n      v8 = v7 >> 4;\n      v9 = v7++ & 0xF;\n      --v6;\n      v10 = (*(_QWORD *)(v1[1] + 8 * v8) >> 4 * v9) & 0xFLL;\n      *(_BYTE *)(v6 + 1) = v10 + (-(((unsigned __int8)v10 + 6) >> 4) & 0x27) + 48;\n    }\n    while ( v2 != v7 );\n  }\n  sub_12250(v4, v2 + 1, v5);\n  return v4;\n}\n\n__int64 __fastcall sub_13560(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  signed __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r14\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // r8\n  char v9; // cl\n  signed __int64 v10; // rdi\n\n  v1 = a1;\n  v2 = 16LL * *a1;\n  v3 = sub_11440(v2 + 1, 1uLL, 0LL);\n  v4 = v3;\n  *(_BYTE *)(v3 + v2) = 0;\n  v5 = v2 - 1;\n  if ( v2 )\n  {\n    v6 = v3 + v5;\n    v7 = 0LL;\n    do\n    {\n      v8 = v7 >> 4;\n      v9 = v7++ & 0xF;\n      --v6;\n      v10 = (*(_QWORD *)(v1[1] + 8 * v8) >> 4 * v9) & 0xFLL;\n      *(_BYTE *)(v6 + 1) = v10 + (-(((unsigned __int8)v10 + 6) >> 4) & 0x27) + 48;\n    }\n    while ( v2 != v7 );\n  }\n  sub_12250(v4, v2 + 1, v5);\n  return v4;\n}\n", 
            "funcStartAddr": "0x12750L", 
            "funcEndAddr": "0x127e8L", 
            "funcName": "sub_13560"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13580(__int64 a1, __int64 *a2)\n{\n  __int64 *v2; // rbp\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // r13\n  unsigned __int64 v5; // rbx\n  unsigned __int64 result; // rax\n  __int64 v7; // rsi\n\n  v2 = a2;\n  v3 = sub_134B0(a2);\n  v4 = (v3 + 7) >> 3;\n  if ( v3 > 0xFFFF )\n    __assert_fail(\"bits < 0x10000\", \"mpint.c\", 0x24Eu, \"BinarySink_put_mp_ssh1\");\n  v5 = v4 - 1;\n  result = sub_10D30(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 + 8), v3);\n  if ( v4 )\n  {\n    do\n    {\n      LOBYTE(v7) = 0;\n      if ( v5 >> 3 < *v2 )\n        v7 = *(_QWORD *)(v2[1] + (v5 & 0xFFFFFFFFFFFFFFF8LL)) >> 8 * ((unsigned __int8)v5 & 7u);\n      --v5;\n      result = sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 + 8), v7);\n    }\n    while ( v5 != -1LL );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x13580L", 
            "funcEndAddr": "0x1362bL", 
            "funcName": "sub_13580"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13630(__int64 a1, __int64 *a2)\n{\n  __int64 *v2; // rbp\n  unsigned __int64 v3; // r13\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // rbx\n  __int64 v6; // rsi\n\n  v2 = a2;\n  v3 = (unsigned __int64)(sub_134B0(a2) + 8) >> 3;\n  result = sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 + 8), v3);\n  if ( v3 )\n  {\n    v5 = v3 - 1;\n    do\n    {\n      LOBYTE(v6) = 0;\n      if ( v5 >> 3 < *v2 )\n        v6 = *(_QWORD *)(v2[1] + (v5 & 0xFFFFFFFFFFFFFFF8LL)) >> 8 * ((unsigned __int8)v5 & 7u);\n      --v5;\n      result = sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 + 8), v6);\n    }\n    while ( v5 != -1LL );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x13630L", 
            "funcEndAddr": "0x136bcL", 
            "funcName": "sub_13630"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_136C0(__int64 a1)\n{\n  unsigned int v1; // eax\n  unsigned __int64 v2; // rbp\n  char *v3; // rax\n  __int64 v4; // rdx\n  __int64 *v5; // rax\n  _QWORD *v6; // r11\n\n  v1 = sub_110F0(*(_QWORD *)(a1 + 32));\n  v2 = v1;\n  v3 = sub_11030(*(_QWORD *)(a1 + 32), (v1 + 7) >> 3);\n  if ( !*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24LL) )\n  {\n    v5 = sub_12ED0((__int64)v3, v4, -1LL, v4 - 1);\n    if ( sub_134B0(v5) <= v2 )\n      return v6;\n    *(_DWORD *)(a1 + 24) = 2;\n    sub_12FF0(v6);\n  }\n  return sub_12FA0(0LL);\n}\n", 
            "funcStartAddr": "0x136c0L", 
            "funcEndAddr": "0x1373cL", 
            "funcName": "sub_136C0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_13740(__int64 a1)\n{\n  char *v1; // rax\n  unsigned __int64 v2; // rdx\n\n  v1 = sub_111C0(*(_QWORD *)(a1 + 32));\n  if ( *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24LL) )\n    return sub_12FA0(0LL);\n  if ( v2 && (*v1 < 0 || !*v1 && (v2 <= 1 || v1[1] >= 0)) )\n  {\n    *(_DWORD *)(a1 + 24) = 2;\n    return sub_12FA0(0LL);\n  }\n  return sub_12ED0((__int64)v1, v2, -1LL, v2 - 1);\n}\n", 
            "funcStartAddr": "0x13740L", 
            "funcEndAddr": "0x1379cL", 
            "funcName": "sub_13740"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_137A0(__int64 *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  return sub_12300(a1[1], *a1, a2, a3, -1LL, 0LL, 0LL);\n}\n", 
            "funcStartAddr": "0x137a0L", 
            "funcEndAddr": "0x137caL", 
            "funcName": "sub_137A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_137D0(__int64 *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  return sub_12300(a1[1], *a1, a2, a3, -1LL, -1LL, 1uLL);\n}\n", 
            "funcStartAddr": "0x137d0L", 
            "funcEndAddr": "0x137faL", 
            "funcName": "sub_137D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_13980(__int64 *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  __int64 v3; // r8\n  __int64 v4; // rdi\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // r15\n  unsigned __int64 v7; // rbp\n  unsigned __int64 v8; // r11\n  unsigned __int128 v9; // kr00_16\n\n  v3 = *a1;\n  v4 = a1[1];\n  if ( v3 )\n  {\n    v5 = 0LL;\n    v6 = 0LL;\n    v7 = *a2;\n    do\n    {\n      if ( v7 > v5 )\n        v8 = *(_QWORD *)(a2[1] + 8 * v5);\n      else\n        v8 = 0LL;\n      v9 = v8 + v6 + (unsigned __int128)a3;\n      v6 = *((_QWORD *)&v9 + 1);\n      if ( v4 )\n        *(_QWORD *)(v4 + 8 * v5) = v9;\n      ++v5;\n      a3 = 0LL;\n    }\n    while ( v3 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x13980L", 
            "funcEndAddr": "0x13a02L", 
            "funcName": "sub_13980"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_13A10(__int64 *a1, unsigned __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r8\n  __int64 v4; // rdi\n  unsigned __int64 v5; // rax\n  signed __int64 v6; // r15\n  unsigned __int64 v7; // rbp\n  unsigned __int64 v8; // r11\n  unsigned __int128 v9; // kr00_16\n\n  v3 = *a1;\n  v4 = a1[1];\n  if ( v3 )\n  {\n    v5 = 0LL;\n    v6 = 1LL;\n    v7 = *a2;\n    do\n    {\n      if ( v7 > v5 )\n        v8 = *(_QWORD *)(a2[1] + 8 * v5);\n      else\n        v8 = 0LL;\n      v9 = v8 + (unsigned __int64)v6 + (unsigned __int128)(unsigned __int64)~a3;\n      v6 = *((_QWORD *)&v9 + 1);\n      if ( v4 )\n        *(_QWORD *)(v4 + 8 * v5) = v9;\n      ++v5;\n      a3 = 0LL;\n    }\n    while ( v3 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x13a10L", 
            "funcEndAddr": "0x13a9aL", 
            "funcName": "sub_13A10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_13AA0(__int64 *a1, unsigned __int64 *a2, unsigned __int16 a3)\n{\n  __int64 v3; // r8\n  unsigned __int64 v4; // rcx\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // r11\n  unsigned __int64 v7; // rbp\n  __int64 v8; // rbx\n  unsigned __int64 v9; // r10\n  __int64 v10; // rdx\n\n  v3 = *a1;\n  if ( *a1 )\n  {\n    v4 = 0LL;\n    v5 = 0LL;\n    v6 = a3;\n    v7 = *a2;\n    v8 = a1[1];\n    do\n    {\n      v9 = 0LL;\n      v10 = v5;\n      if ( v7 > v4 )\n      {\n        v9 = (*(unsigned __int64 *)(a2[1] + 8 * v4) * (unsigned __int128)v6 + v5) >> 64;\n        v10 = *(_QWORD *)(a2[1] + 8 * v4) * v6 + v5;\n      }\n      *(_QWORD *)(v8 + 8 * v4++) = v10;\n      v5 = v9;\n    }\n    while ( v4 != v3 );\n    if ( v9 )\n      __assert_fail(\"!carry\", \"mpint.c\", 0x354u, \"mp_mul_integer_into\");\n  }\n}\n", 
            "funcStartAddr": "0x13aa0L", 
            "funcEndAddr": "0x13b21L", 
            "funcName": "sub_13AA0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__usercall sub_13B30@<rax>(char *a1@<rdi>, unsigned __int64 a2@<rsi>, unsigned __int64 a3@<r9>, __int64 a4@<r10>, unsigned __int64 a5@<r11>)\n{\n  __int64 *v5; // rax\n  __int64 *v6; // rbp\n  unsigned __int64 v7; // r9\n  __int64 v8; // r10\n  unsigned __int64 v9; // r11\n  char *v10; // rbp\n  __int64 *v11; // r15\n  __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  signed __int64 v14; // rdi\n  _QWORD *v15; // rdx\n  unsigned __int64 v16; // rax\n  unsigned __int128 v17; // cx\n  unsigned __int64 v19; // [rsp+0h] [rbp-78h]\n  __int64 v20; // [rsp+8h] [rbp-70h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v22; // [rsp+10h] [rbp-68h]\n  __int64 v23; // [rsp+18h] [rbp-60h]\n  signed __int64 v24; // [rsp+20h] [rbp-58h]\n  char *v25; // [rsp+28h] [rbp-50h]\n  unsigned __int64 v26; // [rsp+30h] [rbp-48h]\n\n  if ( a2 > 0x14E5E0A72F05396LL )\n    __assert_fail(\"decimal.len < (~(size_t)0) / 196\", \"mpint.c\", 0xDBu, \"mp_from_decimal_pl\");\n  v26 = a5;\n  v21 = a3;\n  v23 = a4;\n  v5 = sub_12E60(((unsigned __int64)(0x8AD8F2FBA9386823LL * (unsigned __int128)(196 * a2) >> 64) >> 11) + 1);\n  v6 = v5;\n  if ( a2 )\n  {\n    v7 = v21;\n    v8 = v23;\n    v9 = v26;\n    v25 = &a1[a2];\n    v24 = (signed __int64)&a1[a2 - 1];\n    v10 = a1;\n    v11 = v5;\n    do\n    {\n      v12 = v11[1];\n      v13 = *v10 - 48;\n      if ( *v11 )\n      {\n        v14 = v12 + 8 * *v11;\n        v15 = (_QWORD *)v11[1];\n        v16 = 0LL;\n        do\n        {\n          v8 = 0LL;\n          v7 = v13;\n          v9 = v16;\n          v17 = (unsigned __int64)*v15 + v16 + (unsigned __int128)v13;\n          v16 = *((_QWORD *)&v17 + 1);\n          if ( v12 )\n            *v15 = v17;\n          ++v15;\n          v13 = 0LL;\n        }\n        while ( v15 != (_QWORD *)v14 );\n      }\n      v22 = v9;\n      v19 = v7;\n      v20 = v8;\n      if ( (char *)v24 == v10 )\n        break;\n      sub_13AA0(v11, (unsigned __int64 *)v11, 0xAu);\n      ++v10;\n      v7 = v19;\n      v8 = v20;\n      v9 = v22;\n    }\n    while ( v25 != v10 );\n    v6 = v11;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x13b30L", 
            "funcEndAddr": "0x13ca7L", 
            "funcName": "sub_13B30"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_13CB0(char *a1)\n{\n  unsigned __int64 v1; // rax\n  unsigned __int64 v2; // r9\n  __int64 v3; // r10\n  unsigned __int64 v4; // r11\n\n  v1 = strlen(a1);\n  return sub_13B30(a1, v1, v2, v3, v4);\n}\n", 
            "funcStartAddr": "0x13cb0L", 
            "funcEndAddr": "0x13cc5L", 
            "funcName": "sub_13CB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13CD0(__int64 *a1, _QWORD *a2, unsigned __int64 *a3, char a4)\n{\n  return sub_12300(a1[1], *a1, a2, a3, -(signed __int64)(a4 & 1), 0LL, 0LL);\n}\n", 
            "funcStartAddr": "0x13cd0L", 
            "funcEndAddr": "0x13cfdL", 
            "funcName": "sub_13CD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13D00(__int64 *a1, _QWORD *a2, unsigned __int64 *a3, char a4)\n{\n  return sub_12300(a1[1], *a1, a2, a3, -(signed __int64)(a4 & 1), -(signed __int64)(a4 & 1), a4 & 1);\n}\n", 
            "funcStartAddr": "0x13d00L", 
            "funcEndAddr": "0x13d2bL", 
            "funcName": "sub_13D00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_13D30(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // r15\n  signed __int64 result; // rax\n  unsigned __int64 v4; // rdx\n  unsigned __int64 v5; // r11\n  signed __int64 v6; // r13\n\n  v2 = *a1;\n  if ( *a2 >= *a1 )\n    v2 = *a2;\n  if ( !v2 )\n    return 1LL;\n  result = 1LL;\n  v4 = 0LL;\n  do\n  {\n    if ( *a1 > v4 )\n      v5 = *(_QWORD *)(a1[1] + 8 * v4);\n    else\n      v5 = 0LL;\n    v6 = -1LL;\n    if ( *a2 > v4 )\n      v6 = ~*(_QWORD *)(a2[1] + 8 * v4);\n    ++v4;\n    result = ((unsigned __int64)v6 + v5 + (unsigned __int128)(unsigned __int64)result) >> 64;\n  }\n  while ( v4 != v2 );\n  return result;\n}\n", 
            "funcStartAddr": "0x13d30L", 
            "funcEndAddr": "0x13dd0L", 
            "funcName": "sub_13D30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_13DD0(__int64 a1, _QWORD *a2, unsigned __int64 a3, unsigned __int64 a4)\n{\n  _QWORD *v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // rdx\n  unsigned __int64 v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  unsigned __int64 *v10; // rdx\n  __int64 v11; // r10\n  __int128 v12; // ax\n  unsigned __int64 *v13; // rsi\n  __int64 v14; // r10\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rcx\n  __int64 v17; // rbp\n  __int64 v18; // r12\n  unsigned __int64 *v19; // rcx\n  char v20; // al\n  unsigned __int64 *v21; // rcx\n  unsigned __int128 v23; // [rsp+0h] [rbp-88h]\n  __int64 v24; // [rsp+10h] [rbp-78h]\n  __int64 v25; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v26; // [rsp+20h] [rbp-68h]\n  __int64 v27; // [rsp+28h] [rbp-60h]\n  __int128 v28; // [rsp+30h] [rbp-58h]\n  __int64 v29; // [rsp+40h] [rbp-48h]\n  __int64 v30; // [rsp+48h] [rbp-40h]\n  unsigned __int64 v31; // [rsp+58h] [rbp-30h]\n\n  v4 = a2;\n  v31 = __readfsqword(0x28u);\n  v5 = *a2;\n  if ( *(_QWORD *)(a1 + 8) <= *a2 )\n    v5 = *(_QWORD *)(a1 + 8);\n  v23 = __PAIR__(a4, a3);\n  v6 = a2[1];\n  v7 = *(_QWORD *)(a1 + 16);\n  v24 = v5;\n  v25 = v6;\n  v8 = sub_127F0((unsigned __int64 *)&v23, v7);\n  v27 = v9;\n  v10 = *(unsigned __int64 **)(a1 + 32);\n  v26 = v8;\n  sub_12840(v10, v23, &v26, (unsigned __int64 *)&v24, *((__int64 *)&v23 + 1), v11);\n  *(_QWORD *)&v12 = sub_127F0((unsigned __int64 *)&v23, *(_QWORD *)(a1 + 24));\n  v13 = *(unsigned __int64 **)a1;\n  v28 = v12;\n  sub_12840(&v26, v23, (unsigned __int64 *)&v28, v13, *((__int64 *)&v23 + 1), v14);\n  sub_12300(*((__int64 *)&v28 + 1), v28, v4, (unsigned __int64 *)&v28, -1LL, 0LL, 0LL);\n  v15 = *(_QWORD *)(a1 + 16);\n  v16 = *(_QWORD *)(a1 + 16);\n  if ( (unsigned __int64)v28 <= v15 )\n    v16 = v28;\n  v17 = v28 - v15;\n  if ( (unsigned __int64)v28 - v15 > (signed __int64)v28 - v16 )\n    v17 = v28 - v16;\n  v29 = v17;\n  v18 = *((_QWORD *)&v28 + 1) + 8 * v16;\n  v19 = *(unsigned __int64 **)a1;\n  v30 = v18;\n  v20 = sub_13D30((unsigned __int64 *)&v29, v19);\n  sub_12300(v18, v17, &v29, v21, -(signed __int64)(v20 & 1), -(signed __int64)(v20 & 1), v20 & 1);\n  return v29;\n}\n", 
            "funcStartAddr": "0x13dd0L", 
            "funcEndAddr": "0x13f39L", 
            "funcName": "sub_13DD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_13F40(__int64 a1, unsigned __int64 *a2)\n{\n  __int64 v2; // rdx\n  __int64 v4; // [rsp+0h] [rbp-38h]\n  __int64 v5; // [rsp+8h] [rbp-30h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-20h]\n\n  v6 = __readfsqword(0x28u);\n  v4 = sub_13DD0(a1, a2, **(_QWORD **)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL));\n  v5 = v2;\n  sub_130D0(a2, (unsigned __int64 *)&v4);\n  sub_47E30(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL), 8LL * **(_QWORD **)(a1 + 64));\n  return __readfsqword(0x28u) ^ v6;\n}\n", 
            "funcStartAddr": "0x13f40L", 
            "funcEndAddr": "0x13fb4L", 
            "funcName": "sub_13F40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_13FC0(signed __int64 *a1, __int64 a2)\n{\n  signed __int64 v2; // r8\n  signed __int64 *v3; // rbp\n  unsigned __int64 v4; // r13\n  signed __int64 result; // rax\n  unsigned __int64 v6; // rdx\n  __int64 v7; // r11\n  signed __int64 v8; // rdi\n\n  v2 = 1LL;\n  v3 = a1;\n  v4 = *a1;\n  result = 1LL;\n  if ( *a1 )\n    v2 = *a1;\n  v6 = 0LL;\n  do\n  {\n    if ( v4 <= v6 )\n      v7 = 0LL;\n    else\n      v7 = *(_QWORD *)(v3[1] + 8 * v6);\n    v8 = __CFADD__(v7, result + ~a2) + (((unsigned __int64)result + (unsigned __int128)(unsigned __int64)~a2) >> 64);\n    ++v6;\n    a2 = 0LL;\n    result = v8;\n  }\n  while ( v2 != v6 );\n  return result;\n}\n", 
            "funcStartAddr": "0x13fc0L", 
            "funcEndAddr": "0x14028L", 
            "funcName": "sub_13FC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_14030(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // r10\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rcx\n  __int64 v5; // rdx\n\n  v2 = *a1;\n  if ( *a2 >= *a1 )\n    v2 = *a2;\n  if ( !v2 )\n    return 1LL;\n  v3 = 0LL;\n  v4 = 0LL;\n  do\n  {\n    v5 = 0LL;\n    if ( *a1 > v3 )\n      v5 = *(_QWORD *)(a1[1] + 8 * v3);\n    if ( *a2 > v3 )\n      v5 ^= *(_QWORD *)(a2[1] + 8 * v3);\n    ++v3;\n    v4 |= v5;\n  }\n  while ( v2 != v3 );\n  return ((unsigned __int64)-(signed __int64)(v4 & 1 | (v4 >> 1)) >> 63) ^ 1;\n}\n", 
            "funcStartAddr": "0x14030L", 
            "funcEndAddr": "0x14096L", 
            "funcName": "sub_14030"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_140A0(signed __int64 *a1, __int64 a2)\n{\n  signed __int64 v2; // r8\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v2 = 1LL;\n  if ( *a1 )\n    v2 = *a1;\n  v3 = 0LL;\n  v4 = 0LL;\n  do\n  {\n    if ( *a1 > v3 )\n      a2 ^= *(_QWORD *)(a1[1] + 8 * v3);\n    ++v3;\n    v4 |= a2;\n    a2 = 0LL;\n  }\n  while ( v2 != v3 );\n  return ((unsigned __int64)-(signed __int64)(v4 & 1 | (v4 >> 1)) >> 63) ^ 1;\n}\n", 
            "funcStartAddr": "0x140a0L", 
            "funcEndAddr": "0x140eaL", 
            "funcName": "sub_140A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_140F0(_QWORD *a1, unsigned __int64 *a2)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rdi\n  __int64 *v4; // rax\n  __int64 v5; // r11\n\n  v2 = a1;\n  v3 = *a1;\n  if ( *a2 >= v3 )\n    v3 = *a2;\n  v4 = sub_12E60(v3 + 1);\n  sub_12300(v4[1], *v4, v2, a2, -1LL, 0LL, 0LL);\n  return v5;\n}\n", 
            "funcStartAddr": "0x140f0L", 
            "funcEndAddr": "0x1413eL", 
            "funcName": "sub_140F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14140(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // rbp\n  unsigned __int64 v3; // rdi\n  __int64 *v4; // rax\n  __int64 v5; // r11\n\n  v2 = a1;\n  v3 = *a1;\n  if ( *a2 >= v3 )\n    v3 = *a2;\n  v4 = sub_12E60(v3);\n  sub_12300(v4[1], *v4, v2, a2, -1LL, -1LL, 1uLL);\n  return v5;\n}\n", 
            "funcStartAddr": "0x14140L", 
            "funcEndAddr": "0x1418aL", 
            "funcName": "sub_14140"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_14190(unsigned __int64 *a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // rbp\n  unsigned __int64 v4; // rax\n  unsigned __int64 *v5; // rbx\n  __int64 v6; // r10\n\n  v3 = a3;\n  v4 = *a2;\n  if ( *a3 >= *a2 )\n    v4 = *a3;\n  if ( v4 > *a1 )\n    v4 = *a1;\n  v5 = sub_12E60(6 * v4);\n  sub_12840(v3, *v5, a1, a2, v5[1], v6);\n  sub_12FF0(v5);\n}\n", 
            "funcStartAddr": "0x14190L", 
            "funcEndAddr": "0x141edL", 
            "funcName": "sub_14190"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_141F0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12E60(*a1 + *a2);\n  sub_14190(v2, a1, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x141f0L", 
            "funcEndAddr": "0x1421fL", 
            "funcName": "sub_141F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_14220(__int64 *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  __int64 v3; // r9\n  unsigned __int64 v4; // r10\n  __int64 v5; // rdx\n  signed __int64 v6; // r8\n  signed __int64 v7; // r13\n  unsigned __int64 result; // rax\n  _QWORD *v9; // r11\n  unsigned __int64 v10; // r12\n  __int64 v11; // rbx\n\n  v3 = *a1;\n  v4 = a3 >> 6;\n  v5 = a3 & 0x3F;\n  v6 = 8 * *a1 - 8;\n  v7 = -8LL * v4;\n  while ( 1 )\n  {\n    result = v3 - 1;\n    if ( !v3 )\n      return result;\n    v9 = (_QWORD *)(v6 + a1[1]);\n    if ( v4 > result )\n    {\n      *v9 = 0LL;\n      goto LABEL_3;\n    }\n    v10 = *a2;\n    v11 = 0LL;\n    if ( result - v4 < *a2 )\n      v11 = *(_QWORD *)(v7 + a2[1] + v6);\n    if ( v5 )\n    {\n      v11 <<= v5;\n      *v9 = v11;\n      if ( v4 >= result )\n        goto LABEL_3;\n      if ( v10 > v3 - 2 - v4 )\n        v11 |= *(_QWORD *)(v6 + v7 + a2[1] - 8) >> (64 - (unsigned __int8)v5);\n    }\n    *v9 = v11;\nLABEL_3:\n    v6 -= 8LL;\n    --v3;\n  }\n}\n", 
            "funcStartAddr": "0x14220L", 
            "funcEndAddr": "0x142d7L", 
            "funcName": "sub_14220"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_142E0(_QWORD *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 result; // rax\n  __int64 v4; // rdx\n  unsigned __int64 v5; // rbp\n  signed __int64 v6; // r8\n  __int64 v7; // rbx\n  signed __int64 v8; // r9\n  unsigned __int64 v9; // rdi\n  unsigned __int64 v10; // rdi\n\n  result = a3 >> 6;\n  v4 = a3 & 0x3F;\n  if ( *a1 )\n  {\n    v5 = *a2;\n    v6 = 8 * result;\n    v7 = result + *a1;\n    v8 = a1[1] - 8 * result;\n    do\n    {\n      while ( 1 )\n      {\n        v9 = 0LL;\n        if ( v5 > result )\n          v9 = *(_QWORD *)(a2[1] + v6);\n        if ( v4 )\n          break;\n        ++result;\n        *(_QWORD *)(v8 + v6) = v9;\n        v6 += 8LL;\n        if ( result == v7 )\n          return result;\n      }\n      ++result;\n      v10 = v9 >> v4;\n      *(_QWORD *)(v8 + v6) = v10;\n      if ( result < v5 )\n        v10 |= *(_QWORD *)(a2[1] + v6 + 8) << (64 - (unsigned __int8)v4);\n      *(_QWORD *)(v8 + v6) = v10;\n      v6 += 8LL;\n    }\n    while ( result != v7 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x142e0L", 
            "funcEndAddr": "0x14379L", 
            "funcName": "sub_142E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_14380(__int64 a1)\n{\n  __int64 *v1; // rbx\n  unsigned __int64 *v2; // rbp\n  unsigned __int64 *v3; // rax\n  unsigned __int64 *v4; // r12\n  _QWORD *v5; // rsi\n  signed __int64 v6; // rcx\n  _QWORD *v7; // rax\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  signed __int64 v10; // r14\n  signed __int64 v11; // r15\n  __int64 v12; // r13\n  _QWORD *v13; // r10\n  signed int v14; // edx\n  unsigned int v15; // edi\n  unsigned int v16; // esi\n  signed __int64 v17; // r11\n  int v18; // ecx\n  __int64 v19; // rax\n  int v20; // esi\n  unsigned int v21; // esi\n  char v22; // al\n  __int64 v23; // rdx\n\n  v1 = sub_12F50(*(_QWORD *)a1, *(const void **)(a1 + 8));\n  v2 = sub_12E60(*v1);\n  v3 = sub_12E60(*v1);\n  v4 = v3;\n  v5 = (_QWORD *)v3[1];\n  if ( *v3 )\n  {\n    v6 = (signed __int64)&v5[*v3];\n    v7 = (_QWORD *)v3[1];\n    do\n    {\n      *v7 = -3689348814741910324LL;\n      ++v7;\n    }\n    while ( (_QWORD *)v6 != v7 );\n  }\n  v8 = *v1;\n  ++*v5;\n  if ( v8 > 0x70381C0E07037LL )\n    __assert_fail(\"x->nw < (~(size_t)1) / (146 * BIGNUM_INT_BITS)\", \"mpint.c\", 0x1D4u, \"mp_get_decimal\");\n  v9 = 0xE40655826010E41LL * (unsigned __int128)(9344 * v8) >> 64;\n  v10 = (v9 + ((9344 * v8 - v9) >> 1)) >> 8;\n  if ( !v10 )\n    v10 = 1LL;\n  v11 = v10;\n  v12 = sub_11440(v10 + 2, 1uLL, 0LL);\n  *(_BYTE *)(v12 + v10 + 1) = 0;\n  do\n  {\n    if ( *v1 )\n    {\n      v13 = (_QWORD *)v1[1];\n      v14 = 1;\n      v15 = 0;\n      v16 = 0;\n      v17 = (signed __int64)&v13[*v1];\n      do\n      {\n        v18 = 0;\n        do\n        {\n          v19 = *v13 >> v18;\n          v18 += 8;\n          v16 += v14 * (unsigned __int8)v19;\n          LODWORD(v19) = 255 * v14;\n          v14 = 6;\n          v15 += v19;\n        }\n        while ( v18 != 64 );\n        if ( v15 > 0xFFFFD02F )\n        {\n          v15 = (unsigned __int16)v15 + 393210;\n          v16 = (unsigned __int16)v16 + 6 * (v16 >> 16);\n        }\n        ++v13;\n        v14 = 6;\n      }\n      while ( (_QWORD *)v17 != v13 );\n      v20 = v16 - 10 * (429496729 * (unsigned __int64)v16 >> 32);\n      v21 = v20 - 10 * ((unsigned int)(v20 + 6) >> 4);\n      if ( v21 > 9 )\n        __assert_fail(\"low_digit < 10\", \"mpint.c\", 0x208u, \"mp_get_decimal\");\n      v22 = v21 + 48;\n      v23 = v21;\n    }\n    else\n    {\n      v23 = 0LL;\n      v22 = 48;\n    }\n    *(_BYTE *)(v12 + v11) = v22;\n    sub_13A10(v1, (unsigned __int64 *)v1, v23);\n    --v11;\n    sub_142E0(v2, (unsigned __int64 *)v1, 1uLL);\n    sub_14190((unsigned __int64 *)v1, v2, v4);\n  }\n  while ( v11 != -1 );\n  sub_12FF0(v1);\n  sub_12FF0(v2);\n  sub_12FF0(v4);\n  sub_12250(v12, v10 + 2, v10);\n  return v12;\n}\n", 
            "funcStartAddr": "0x14380L", 
            "funcEndAddr": "0x145b8L", 
            "funcName": "sub_14380"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_145C0(unsigned __int64 *a1, unsigned __int64 *a2, __int64 *a3, unsigned __int64 *a4, unsigned __int64 *a5)\n{\n  unsigned __int64 *v5; // r14\n  unsigned __int64 *v6; // r13\n  unsigned __int64 v7; // rbp\n  unsigned __int64 *v8; // rbx\n  unsigned __int64 *v9; // r12\n  unsigned __int64 *v10; // r13\n  unsigned __int64 v11; // r15\n  __int64 v12; // r14\n  unsigned __int64 *v13; // r13\n  char v14; // r10\n  unsigned int v15; // ebp\n  char v16; // bl\n  unsigned __int64 v17; // rsi\n  signed __int64 v18; // rax\n  signed __int64 v19; // rax\n  signed __int64 v20; // r10\n  unsigned __int64 v21; // r15\n  __int64 v22; // r12\n  unsigned __int64 v23; // rax\n  signed __int64 v24; // r14\n  signed __int64 v25; // ST20_8\n  __int64 v26; // r11\n  _QWORD *v27; // r11\n  __int64 *v28; // r11\n  unsigned __int64 *v29; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v30; // [rsp+18h] [rbp-70h]\n  unsigned __int64 *v31; // [rsp+18h] [rbp-70h]\n  __int64 *v32; // [rsp+20h] [rbp-68h]\n  unsigned __int64 *v33; // [rsp+28h] [rbp-60h]\n  unsigned __int64 *v34; // [rsp+38h] [rbp-50h]\n  int v35; // [rsp+38h] [rbp-50h]\n  __int64 *v36; // [rsp+40h] [rbp-48h]\n  unsigned __int64 *v37; // [rsp+48h] [rbp-40h]\n\n  v5 = a5;\n  v6 = a4;\n  v7 = 1LL;\n  if ( *a4 )\n    v7 = *a4;\n  v32 = a3;\n  v37 = a2;\n  if ( v7 < *a5 )\n    v7 = *a5;\n  v8 = sub_12E60(v7);\n  v9 = sub_12E60(v7);\n  sub_130D0(v8, v6);\n  sub_130D0(v9, v5);\n  v33 = sub_12E60(v7 + 1);\n  v10 = sub_12E60(v7 + 1);\n  v36 = sub_12E60(v7);\n  v30 = v7 << 7;\n  v29 = sub_12E60(((v7 << 8) + 63) >> 6);\n  if ( v7 << 7 )\n  {\n    v34 = v10;\n    v11 = 1LL;\n    v12 = 0LL;\n    v13 = v8;\n    do\n    {\n      v14 = sub_13D30(v9, v13);\n      v15 = *(_DWORD *)v9[1] & *(unsigned __int64 *)v13[1] & 1;\n      v16 = *(_BYTE *)v13[1] & 1 ^ v15 & (*(_BYTE *)v13[1] & 1 ^ v14);\n      sub_131B0((__int64 *)v13, v9, v16);\n      sub_12300(v13[1], *v13, v13, v9, -(signed __int64)v15, -(signed __int64)v15, v15);\n      sub_142E0(v13, v13, 1uLL);\n      v17 = 2 * v12++;\n      sub_13450(v29, v17, v15);\n      sub_13450(v29, v11, v16);\n      v11 += 2LL;\n    }\n    while ( v30 != v12 );\n    v8 = v13;\n    v10 = v34;\n  }\n  if ( v32 )\n    sub_12300(v32[1], *v32, v8, v9, -1LL, 0LL, 0LL);\n  if ( a1 || v37 )\n  {\n    v18 = 0LL;\n    if ( *v8 )\n      v18 = *(_QWORD *)v8[1] & 1LL;\n    *(_QWORD *)v33[1] = v18;\n    v19 = 0LL;\n    if ( *v9 )\n      v19 = *(_QWORD *)v9[1] & 1LL;\n    *(_QWORD *)v10[1] = v19;\n    sub_130D0(v8, v33);\n    sub_130D0(v9, v10);\n    v35 = *(_DWORD *)v9[1];\n    v20 = v30 - 1;\n    if ( v30 )\n    {\n      v21 = 2 * v30 - 1;\n      v31 = v9;\n      do\n      {\n        v22 = 0LL;\n        v23 = (v21 - 1) >> 6;\n        if ( v23 < *v29 )\n          v22 = -((*(_QWORD *)(v29[1] + 8 * v23) >> (2 * v20 & 0x3F)) & 1LL);\n        LOBYTE(v24) = 0;\n        if ( v21 >> 6 < *v29 )\n        {\n          v24 = (*(_QWORD *)(v29[1] + 8 * (v21 >> 6)) >> v21) & 1LL;\n          LOBYTE(v35) = v24 ^ v35;\n        }\n        v25 = v20;\n        v21 -= 2LL;\n        sub_12300(v33[1], *v33, v33, v31, -(*(_QWORD *)v33[1] & 1LL), 0LL, 0LL);\n        sub_12300(v10[1], *v10, v10, v8, v26, 0LL, 0LL);\n        sub_142E0(v33, v33, 1uLL);\n        sub_12300(v10[1], *v10, v10, v33, v22, 0LL, 0LL);\n        sub_14220((__int64 *)v8, v8, 1uLL);\n        sub_12300(v8[1], *v8, v8, v31, v22, 0LL, 0LL);\n        sub_131B0((__int64 *)v8, v27, v24);\n        sub_131B0((__int64 *)v33, v10, v24);\n        v20 = v25 - 1;\n      }\n      while ( v25 );\n      v9 = v31;\n    }\n    sub_12300(v36[1], *v36, v9, v33, -1LL, -1LL, 1uLL);\n    sub_13140(v28, (unsigned __int64 *)v28, (unsigned __int64 *)v36, v35);\n    sub_12300(v36[1], *v36, v8, v10, -1LL, -1LL, 1uLL);\n    sub_13140((__int64 *)v10, v10, (unsigned __int64 *)v36, v35);\n    if ( !a1 || (sub_130D0(a1, v33), v37) )\n      sub_130D0(v37, v10);\n  }\n  sub_12FF0(v8);\n  sub_12FF0(v9);\n  sub_12FF0(v33);\n  sub_12FF0(v10);\n  sub_12FF0(v36);\n  sub_12FF0(v29);\n}\n", 
            "funcStartAddr": "0x145c0L", 
            "funcEndAddr": "0x14a42L", 
            "funcName": "sub_145C0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_14A50(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  __int64 *v2; // rbx\n\n  v2 = sub_12E60(*a1 + ((a2 + 63) >> 6));\n  sub_14220(v2, a1, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x14a50L", 
            "funcEndAddr": "0x14a84L", 
            "funcName": "sub_14A50"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_14A90(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 *v2; // rbp\n  unsigned __int64 v3; // rdi\n  unsigned __int64 v4; // rax\n  __int64 v5; // rdi\n  _QWORD *v6; // rbx\n\n  v2 = a1;\n  v3 = *a1;\n  v4 = a2 >> 6;\n  if ( a2 >> 6 > v3 )\n    v4 = v3;\n  v5 = v3 - v4;\n  if ( !v5 )\n    v5 = 1LL;\n  v6 = sub_12E60(v5);\n  sub_142E0(v6, v2, a2);\n  return v6;\n}\n", 
            "funcStartAddr": "0x14a90L", 
            "funcEndAddr": "0x14ad5L", 
            "funcName": "sub_14A90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_14AE0(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12F50(*(_QWORD *)a1, *(const void **)(a1 + 8));\n  sub_124A0(v2, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x14ae0L", 
            "funcEndAddr": "0x14b0dL", 
            "funcName": "sub_14AE0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_14B10(unsigned __int64 *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n\n  v3 = a3;\n  sub_130D0(a1, a2);\n  return sub_124A0(a1, v3);\n}\n", 
            "funcStartAddr": "0x14b10L", 
            "funcEndAddr": "0x14b32L", 
            "funcName": "sub_14B10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_14B40(unsigned __int64 *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n\n  v3 = a3;\n  sub_130D0(a1, a2);\n  return sub_12620(a1, v3);\n}\n", 
            "funcStartAddr": "0x14b40L", 
            "funcEndAddr": "0x14b62L", 
            "funcName": "sub_14B40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_14B70(unsigned __int64 *a1, unsigned __int64 a2)\n{\n  signed __int64 result; // rax\n  signed __int64 v3; // rdx\n  unsigned __int64 v4; // rsi\n  signed __int64 v5; // rcx\n\n  result = a2 >> 6;\n  v3 = (1LL << a2) - 1;\n  if ( a2 >> 6 < *a1 )\n  {\n    v4 = a1[1];\n    result = v4 + 8 * result;\n    v5 = v4 + 8 * *a1;\n    do\n    {\n      *(_QWORD *)result &= v3;\n      result += 8LL;\n      v3 = 0LL;\n    }\n    while ( result != v5 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x14b70L", 
            "funcEndAddr": "0x14bb0L", 
            "funcName": "sub_14B70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_14BB0(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rbx\n  unsigned __int64 *v3; // r13\n  signed __int64 v4; // rdx\n  unsigned __int64 v5; // rbp\n  const __m128i *v6; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  unsigned __int64 v9; // r12\n  unsigned __int64 v10; // rbx\n  unsigned __int64 v11; // rbp\n  __int128 v12; // ax\n  signed __int64 v13; // r15\n  _QWORD *v14; // rax\n  _QWORD *v15; // rcx\n  signed __int64 v16; // rdx\n  unsigned __int64 v17; // rdx\n  __int64 v18; // rax\n  unsigned __int64 v19; // rax\n  __int64 v20; // rdx\n  __int64 v21; // r10\n  unsigned __int64 v22; // rax\n  __int64 v23; // rdx\n  __int128 v24; // ax\n  __int64 v25; // r10\n  _QWORD *v26; // rax\n  _QWORD *v27; // rcx\n  signed __int64 v28; // rdx\n  unsigned __int64 v29; // rax\n  unsigned __int64 *v30; // r11\n  __int128 v31; // ax\n  __int64 v32; // r10\n  _QWORD *v33; // rax\n  _QWORD *v34; // rdx\n  unsigned __int64 v35; // rdx\n  unsigned __int64 v36; // rsi\n  unsigned __int64 v37; // rax\n  signed __int64 v38; // rdx\n  unsigned __int64 v39; // rsi\n  _QWORD *v40; // rax\n  signed __int64 v41; // rcx\n  unsigned __int64 *result; // rax\n  unsigned __int64 *v43; // [rsp+10h] [rbp-158h]\n  __int64 v44; // [rsp+18h] [rbp-150h]\n  unsigned __int64 v45; // [rsp+30h] [rbp-138h]\n  unsigned __int64 v46; // [rsp+38h] [rbp-130h]\n  unsigned __int64 v47; // [rsp+70h] [rbp-F8h]\n  __int64 *v48; // [rsp+78h] [rbp-F0h]\n  __m128i v49; // [rsp+80h] [rbp-E8h]\n  __m128i v50; // [rsp+90h] [rbp-D8h]\n  __int128 v51; // [rsp+A0h] [rbp-C8h]\n  unsigned __int64 v52; // [rsp+B0h] [rbp-B8h]\n  __int64 v53; // [rsp+B8h] [rbp-B0h]\n  unsigned __int64 v54; // [rsp+C0h] [rbp-A8h]\n  __int64 v55; // [rsp+C8h] [rbp-A0h]\n  unsigned __int64 v56; // [rsp+D0h] [rbp-98h]\n  __int64 v57; // [rsp+D8h] [rbp-90h]\n  __int128 v58; // [rsp+E0h] [rbp-88h]\n  __int64 v59; // [rsp+F0h] [rbp-78h]\n  __int64 v60; // [rsp+F8h] [rbp-70h]\n  __int128 v61; // [rsp+100h] [rbp-68h]\n  unsigned __int64 v62; // [rsp+110h] [rbp-58h]\n  unsigned __int64 v63; // [rsp+118h] [rbp-50h]\n  unsigned __int64 v64; // [rsp+128h] [rbp-40h]\n\n  v47 = a2;\n  v64 = __readfsqword(0x28u);\n  if ( !*(_QWORD *)a1 )\n    __assert_fail(\"x->nw > 0\", \"mpint.c\", 0x4FEu, \"mp_invert_mod_2to\");\n  if ( !(**(_BYTE **)(a1 + 8) & 1) )\n    __assert_fail(\"x->w[0] & 1\", \"mpint.c\", 0x4FFu, \"mp_invert_mod_2to\");\n  if ( !a2 )\n    goto LABEL_38;\n  v2 = (a2 + 63) >> 6;\n  if ( !v2 )\n    v2 = 1LL;\n  v3 = sub_12E60(v2);\n  v4 = v2;\n  if ( 2 * v2 <= v2 )\n    v4 = 2 * v2;\n  v5 = 6 * v4;\n  v6 = (const __m128i *)sub_12E60(6 * v4 + 6 * v2);\n  v48 = (__int64 *)v6;\n  v49 = _mm_loadu_si128(v6);\n  v7 = sub_127F0((unsigned __int64 *)&v49, v5);\n  *(_QWORD *)v3[1] = 1LL;\n  if ( a2 > 1 )\n  {\n    v9 = 1LL;\n    v44 = v8;\n    v45 = v7;\n    v43 = (unsigned __int64 *)&v59;\n    do\n    {\n      v10 = (v9 + 63) >> 6;\n      v11 = v9 >> 6;\n      v46 = (2 * v9 + 63) >> 6;\n      v50 = _mm_load_si128(&v49);\n      *(_QWORD *)&v12 = sub_127F0((unsigned __int64 *)&v50, v10);\n      v51 = v12;\n      sub_130D0((unsigned __int64 *)&v51, (unsigned __int64 *)a1);\n      v13 = (1LL << v9) - 1;\n      if ( v9 >> 6 < (unsigned __int64)v51 )\n      {\n        v14 = (_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * v11);\n        v15 = (_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * v51);\n        v16 = (1LL << v9) - 1;\n        do\n        {\n          *v14 &= v16;\n          ++v14;\n          v16 = 0LL;\n        }\n        while ( v14 != v15 );\n      }\n      v17 = (v9 + 63) >> 6;\n      if ( *v3 <= v10 )\n        v17 = *v3;\n      v18 = v3[1];\n      v52 = v17;\n      v53 = v18;\n      v19 = sub_127F0((unsigned __int64 *)&v50, v46);\n      v55 = v20;\n      v54 = v19;\n      sub_12840(&v52, v45, &v54, (unsigned __int64 *)&v51, v44, v21);\n      v22 = sub_127F0((unsigned __int64 *)&v50, (v9 + 63) >> 6);\n      v57 = v23;\n      v56 = v22;\n      sub_142E0(&v56, &v54, v9);\n      *(_QWORD *)&v24 = sub_127F0((unsigned __int64 *)&v50, (v9 + 63) >> 6);\n      v58 = v24;\n      sub_142E0(&v58, (unsigned __int64 *)a1, v9);\n      if ( v11 < (unsigned __int64)v58 )\n      {\n        v26 = (_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * v11);\n        v27 = (_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * v58);\n        v28 = (1LL << v9) - 1;\n        do\n        {\n          *v26 &= v28;\n          ++v26;\n          v28 = 0LL;\n        }\n        while ( v27 != v26 );\n      }\n      v29 = (v9 + 63) >> 6;\n      if ( v54 <= v10 )\n        v29 = v54;\n      v59 = v29;\n      v60 = v55;\n      sub_12840((unsigned __int64 *)&v58, v45, v43, &v52, v44, v25);\n      sub_12300(v60, v59, v43, &v56, -1LL, 0LL, 0LL);\n      v43 = v30;\n      v62 = 0LL;\n      sub_12300(v60, v59, &v62, v30, -1LL, -1LL, 1uLL);\n      *(_QWORD *)&v31 = sub_127F0((unsigned __int64 *)&v50, (v9 + 63) >> 6);\n      v61 = v31;\n      sub_12840(v43, v45, (unsigned __int64 *)&v61, &v52, v44, v32);\n      if ( v11 < (unsigned __int64)v61 )\n      {\n        v33 = (_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * v11);\n        v34 = (_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * v61);\n        do\n        {\n          *v33 &= v13;\n          ++v33;\n          v13 = 0LL;\n        }\n        while ( v34 != v33 );\n      }\n      sub_14220((__int64 *)&v56, (unsigned __int64 *)&v61, v9 & 0x3F);\n      v35 = v9 >> 6;\n      if ( *v3 <= v11 )\n        v35 = *v3;\n      v36 = *v3 - v35;\n      if ( v46 - v11 <= v36 )\n        v36 = v46 - v11;\n      v37 = v3[1];\n      v62 = v36;\n      v9 *= 2LL;\n      v63 = v37 + 8 * v35;\n      sub_12300(v37 + 8 * v35, v36, &v62, &v56, -1LL, 0LL, 0LL);\n    }\n    while ( v47 > v9 );\n  }\n  v38 = (1LL << v47) - 1;\n  if ( *v3 > v47 >> 6 )\n  {\n    v39 = v3[1];\n    v40 = (_QWORD *)(v39 + 8 * (v47 >> 6));\n    v41 = v39 + 8 * *v3;\n    do\n    {\n      *v40 &= v38;\n      ++v40;\n      v38 = 0LL;\n    }\n    while ( (_QWORD *)v41 != v40 );\n  }\n  sub_12FF0(v48);\n  result = v3;\n  if ( __readfsqword(0x28u) != v64 )\nLABEL_38:\n    __assert_fail(\"p > 0\", \"mpint.c\", 0x500u, \"mp_invert_mod_2to\");\n  return result;\n}\n", 
            "funcStartAddr": "0x14bb0L", 
            "funcEndAddr": "0x1510aL", 
            "funcName": "sub_14BB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_15110(_QWORD **a1)\n{\n  sub_12FF0(*a1);\n  sub_12FF0(a1[5]);\n  sub_12FF0(a1[6]);\n  sub_12FF0(a1[7]);\n  sub_12FF0(a1[4]);\n  sub_12FF0(a1[8]);\n  sub_47E30(a1, 72LL);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x15110L", 
            "funcEndAddr": "0x1515fL", 
            "funcName": "sub_15110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_15160(__int64 a1, unsigned __int64 *a2, unsigned __int64 *a3, unsigned __int64 *a4)\n{\n  unsigned __int64 *v4; // r13\n  unsigned __int64 v5; // rsi\n  unsigned __int64 *v6; // r12\n  unsigned __int64 *v7; // rbp\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rdx\n  __int64 result; // rax\n  unsigned __int64 v12; // rt1\n  __m128i v13; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v14; // [rsp+10h] [rbp-58h]\n  __int64 v15; // [rsp+18h] [rbp-50h]\n  __int64 v16; // [rsp+20h] [rbp-48h]\n  __int64 v17; // [rsp+28h] [rbp-40h]\n  unsigned __int64 v18; // [rsp+38h] [rbp-30h]\n\n  v4 = a2;\n  v5 = *(_QWORD *)(a1 + 16);\n  v18 = __readfsqword(0x28u);\n  if ( *a3 > v5 )\n    __assert_fail(\"x->nw <= mc->rw\", \"mpint.c\", 0x5B8u, \"monty_mul_into\");\n  v6 = a4;\n  if ( v5 < *a4 )\n    goto LABEL_9;\n  v7 = a3;\n  v13 = _mm_loadu_si128((const __m128i *)*(_QWORD *)(a1 + 64));\n  v8 = sub_127F0((unsigned __int64 *)&v13, 2 * v5);\n  v15 = v9;\n  v14 = v8;\n  sub_14190(&v14, v7, v6);\n  v16 = sub_13DD0(a1, &v14, v13.m128i_u64[0], v13.m128i_u64[1]);\n  v17 = v10;\n  sub_130D0(v4, (unsigned __int64 *)&v16);\n  sub_47E30(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL), 8LL * **(_QWORD **)(a1 + 64));\n  v12 = __readfsqword(0x28u);\n  result = v12 ^ v18;\n  if ( v12 != v18 )\nLABEL_9:\n    __assert_fail(\"y->nw <= mc->rw\", \"mpint.c\", 0x5B9u, \"monty_mul_into\");\n  return result;\n}\n", 
            "funcStartAddr": "0x15160L", 
            "funcEndAddr": "0x15275L", 
            "funcName": "sub_15160"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15280(__int64 a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // r13\n  unsigned __int64 *v4; // rbx\n\n  v3 = a3;\n  v4 = sub_12E60(*(_QWORD *)(a1 + 16));\n  sub_15160(a1, v4, a2, v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x15280L", 
            "funcEndAddr": "0x152beL", 
            "funcName": "sub_15280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_152D0(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 40);\n}\n", 
            "funcStartAddr": "0x152d0L", 
            "funcEndAddr": "0x152d5L", 
            "funcName": "sub_152D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_152E0(__int64 a1, unsigned __int64 *a2, _QWORD *a3)\n{\n  __int64 v3; // rdx\n  __int64 v5; // [rsp+0h] [rbp-38h]\n  __int64 v6; // [rsp+8h] [rbp-30h]\n  unsigned __int64 v7; // [rsp+18h] [rbp-20h]\n\n  v7 = __readfsqword(0x28u);\n  if ( *a3 > (unsigned __int64)(2LL * *(_QWORD *)(a1 + 16)) )\n    __assert_fail(\"x->nw <= 2*mc->rw\", \"mpint.c\", 0x5F5u, \"monty_export_into\");\n  v5 = sub_13DD0(a1, a3, **(_QWORD **)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL));\n  v6 = v3;\n  sub_130D0(a2, (unsigned __int64 *)&v5);\n  sub_47E30(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL), 8LL * **(_QWORD **)(a1 + 64));\n  return __readfsqword(0x28u) ^ v7;\n}\n", 
            "funcStartAddr": "0x152e0L", 
            "funcEndAddr": "0x15382L", 
            "funcName": "sub_152E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15390(__int64 a1, _QWORD *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12E60(*(_QWORD *)(a1 + 16));\n  sub_152E0(a1, v2, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x15390L", 
            "funcEndAddr": "0x153bcL", 
            "funcName": "sub_15390"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_153C0(__int64 a1, __int64 a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // r14\n  unsigned __int64 v4; // rbp\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // r13\n  unsigned __int64 *i; // rbx\n  char v8; // cl\n\n  v3 = a3;\n  v4 = 0LL;\n  v5 = sub_12F50(*(_QWORD *)a2, *(const void **)(a2 + 8));\n  v6 = sub_12F50(**(_QWORD **)(a1 + 40), *(const void **)(*(_QWORD *)(a1 + 40) + 8LL));\n  for ( i = sub_12E60(2LL * *(_QWORD *)(a1 + 16)); ; sub_130D0(v5, i) )\n  {\n    sub_14190(i, v6, v5);\n    sub_13F40(a1, i);\n    v8 = 0;\n    if ( v4 >> 6 < *v3 )\n      v8 = (*(_QWORD *)(v3[1] + 8 * (v4 >> 6)) >> v4) & 1;\n    sub_13140((__int64 *)v6, v6, i, v8);\n    if ( *v3 << 6 <= ++v4 )\n      break;\n    sub_14190(i, v5, v5);\n    sub_13F40(a1, i);\n  }\n  sub_12FF0(v5);\n  sub_12FF0(i);\n  sub_47E30(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8LL), 8LL * **(_QWORD **)(a1 + 64));\n  return v6;\n}\n", 
            "funcStartAddr": "0x153c0L", 
            "funcEndAddr": "0x154c6L", 
            "funcName": "sub_153C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_154D0(unsigned __int64 *a1, __int64 *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12E60(*a2);\n  sub_145C0(v2, 0LL, 0LL, a1, (unsigned __int64 *)a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x154d0L", 
            "funcEndAddr": "0x154ffL", 
            "funcName": "sub_154D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15500(__int64 a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // rax\n  unsigned __int64 *v3; // r13\n  unsigned __int64 *v4; // r12\n  unsigned __int64 *v5; // rbp\n\n  v2 = sub_154D0(a2, *(__int64 **)a1);\n  v3 = *(unsigned __int64 **)(a1 + 56);\n  v4 = v2;\n  v5 = sub_12E60(*(_QWORD *)(a1 + 16));\n  sub_15160(a1, v5, v4, v3);\n  sub_12FF0(v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x15500L", 
            "funcEndAddr": "0x15552L", 
            "funcName": "sub_15500"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_15560(unsigned __int64 *a1, __int64 a2, __int64 *a3, unsigned __int64 *a4, unsigned __int64 *a5)\n{\n  __int64 *v5; // r15\n  unsigned __int64 *v6; // rbp\n  unsigned __int64 v7; // rdi\n  __int64 *v8; // rax\n  __int64 v9; // rdi\n  __int64 *v10; // r11\n  unsigned __int64 v11; // r12\n  unsigned __int64 v12; // r8\n  __int64 *v13; // rdx\n  unsigned __int64 v14; // rax\n  __int64 v15; // rcx\n  signed __int64 v16; // r8\n  __int64 v17; // rax\n  __int64 v18; // rdi\n  unsigned __int64 v19; // r12\n  _QWORD *v20; // r11\n  unsigned __int64 *v21; // rbp\n  unsigned __int64 *v22; // rbx\n  unsigned __int64 *v23; // [rsp+0h] [rbp-58h]\n  unsigned __int64 *v24; // [rsp+8h] [rbp-50h]\n\n  v5 = a3;\n  v6 = a1;\n  v7 = *a1;\n  if ( *(_QWORD *)a2 >= v7 )\n    v7 = *(_QWORD *)a2;\n  v23 = a4;\n  v24 = a5;\n  v8 = sub_12E60(v7);\n  v9 = *v8;\n  v10 = v8;\n  if ( *v8 )\n  {\n    v11 = *v6;\n    v12 = *(_QWORD *)a2;\n    v13 = (__int64 *)v8[1];\n    v14 = 0LL;\n    do\n    {\n      v15 = 0LL;\n      if ( v11 > v14 )\n        v15 = *(_QWORD *)(v6[1] + 8 * v14);\n      if ( v12 > v14 )\n        v15 |= *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v14);\n      v13[v14++] = v15;\n    }\n    while ( v14 != v9 );\n    v16 = (signed __int64)&v13[v14];\n    do\n    {\n      v17 = *v13;\n      v18 = -*v13;\n      ++v13;\n      *(v13 - 1) = v18 & v17;\n    }\n    while ( v13 != (__int64 *)v16 );\n  }\n  v19 = sub_134B0(v10) - 1;\n  sub_12FF0(v20);\n  v21 = sub_12F50(*v6, (const void *)v6[1]);\n  sub_124A0(v21, v19);\n  v22 = sub_12F50(*(_QWORD *)a2, *(const void **)(a2 + 8));\n  sub_124A0(v22, v19);\n  sub_145C0(v23, v24, v5, v21, v22);\n  sub_12FF0(v21);\n  sub_12FF0(v22);\n  if ( v5 )\n    sub_12620((unsigned __int64 *)v5, v19);\n}\n", 
            "funcStartAddr": "0x15560L", 
            "funcEndAddr": "0x156cfL", 
            "funcName": "sub_15560"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_156D0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  unsigned __int64 v3; // rdi\n  __int64 *v4; // rbp\n\n  v2 = a1;\n  v3 = *a1;\n  if ( *a2 <= v3 )\n    v3 = *a2;\n  v4 = sub_12E60(v3);\n  sub_15560(v2, (__int64)a2, v4, 0LL, 0LL);\n  return v4;\n}\n", 
            "funcStartAddr": "0x156d0L", 
            "funcEndAddr": "0x15707L", 
            "funcName": "sub_156D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_15710(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  __int64 *v2; // rax\n  signed __int64 v3; // r9\n  signed __int64 v4; // rcx\n  unsigned __int64 v5; // rsi\n  unsigned __int64 v6; // rdx\n\n  v2 = sub_156D0(a1, a2);\n  v3 = 1LL;\n  v4 = 1LL;\n  if ( *v2 )\n    v3 = *v2;\n  v5 = 0LL;\n  v6 = 0LL;\n  do\n  {\n    if ( *v2 > v6 )\n      v4 ^= *(_QWORD *)(v2[1] + 8 * v6);\n    ++v6;\n    v5 |= v4;\n    v4 = 0LL;\n  }\n  while ( v3 != v6 );\n  sub_12FF0(v2);\n  return ((unsigned __int64)-(signed __int64)((v5 >> 1) | v5 & 1) >> 63) ^ 1;\n}\n", 
            "funcStartAddr": "0x15710L", 
            "funcEndAddr": "0x15771L", 
            "funcName": "sub_15710"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_15780(unsigned __int64 *a1, __int64 *a2, unsigned __int64 *a3, unsigned __int64 *a4)\n{\n  __int64 *v4; // r14\n  unsigned __int64 v5; // r9\n  signed __int64 v6; // rsi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdx\n  __int64 v9; // r11\n  unsigned __int64 v10; // rdi\n  unsigned __int64 v11; // rsi\n  __int64 v12; // rbp\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r8\n  unsigned __int64 v15; // rdx\n  signed __int64 v16; // rax\n  __int64 v17; // rcx\n  signed __int64 v18; // rax\n  __int64 v19; // rbp\n  signed __int64 v20; // r10\n  unsigned __int64 v21; // r8\n  signed __int64 v22; // rdx\n  signed __int64 v23; // r13\n  unsigned __int64 v24; // rax\n  unsigned __int64 v25; // rsi\n  __int64 v26; // r12\n  signed __int64 v27; // rbx\n  unsigned __int64 v28; // r15\n  signed __int64 v29; // rdx\n  int v30; // ecx\n  unsigned __int64 v31; // rax\n  unsigned __int64 v32; // r9\n  signed __int64 v33; // r13\n  unsigned __int64 v34; // r9\n  __int64 *v35; // rax\n  unsigned __int64 *v36; // rsi\n  __int64 *v37; // r13\n  __int64 v38; // r9\n  unsigned __int64 v39; // r15\n  __int64 *v40; // rax\n  __int64 v41; // rdi\n  unsigned __int64 *v42; // r12\n  __int64 *v43; // rbp\n  unsigned __int64 *v44; // rsi\n  unsigned __int64 v45; // rax\n  unsigned __int64 v46; // rdx\n  unsigned __int64 v47; // rdi\n  unsigned __int64 v48; // rax\n  __int64 v49; // r10\n  unsigned __int64 *v50; // r15\n  unsigned __int64 v51; // rax\n  unsigned __int64 v52; // rdx\n  unsigned __int64 v53; // r14\n  __int64 v54; // r10\n  unsigned __int64 *v55; // rax\n  unsigned __int64 v56; // rdx\n  unsigned __int64 *v57; // r12\n  unsigned __int64 v58; // rax\n  __int64 v59; // rdi\n  unsigned __int64 *v60; // rbp\n  unsigned __int64 *v61; // rbx\n  signed int v62; // er15\n  unsigned int v63; // ebp\n  char v64; // al\n  int v65; // er11\n  unsigned __int64 v66; // rcx\n  unsigned __int64 v67; // r8\n  unsigned __int64 v68; // rsi\n  _QWORD *v69; // rax\n  unsigned __int64 v70; // r15\n  unsigned __int128 v71; // kr00_16\n  unsigned __int64 *v73; // [rsp+8h] [rbp-E0h]\n  __int64 *v74; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v75; // [rsp+18h] [rbp-D0h]\n  unsigned __int64 *v76; // [rsp+18h] [rbp-D0h]\n  unsigned __int64 v77; // [rsp+20h] [rbp-C8h]\n  unsigned __int64 *v78; // [rsp+30h] [rbp-B8h]\n  unsigned __int64 *v79; // [rsp+38h] [rbp-B0h]\n  unsigned __int64 *v80; // [rsp+40h] [rbp-A8h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-A0h]\n  unsigned __int64 v82; // [rsp+80h] [rbp-68h]\n  unsigned __int64 v83; // [rsp+88h] [rbp-60h]\n  unsigned __int64 v84; // [rsp+90h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+98h] [rbp-50h]\n  unsigned __int64 v86; // [rsp+A8h] [rbp-40h]\n\n  v4 = a2;\n  v5 = *a2;\n  v6 = 1LL;\n  v86 = __readfsqword(0x28u);\n  v7 = 0LL;\n  v79 = a3;\n  v78 = a1;\n  v80 = a4;\n  if ( v5 )\n    v6 = v5;\n  v8 = 0LL;\n  do\n  {\n    if ( v5 > v7 )\n      v8 |= *(_QWORD *)(v4[1] + 8 * v7);\n    ++v7;\n  }\n  while ( v6 != v7 );\n  if ( !(v8 & 1 | (v8 >> 1)) )\n    __assert_fail(\"!mp_eq_integer(d, 0)\", \"mpint.c\", 0x7A9u, \"mp_divmod_into\");\n  if ( v5 )\n  {\n    v9 = v4[1];\n    v10 = 0LL;\n    v11 = 0LL;\n    v12 = 0LL;\n    v13 = 0LL;\n    v14 = 0LL;\n    do\n    {\n      v15 = *(_QWORD *)(v9 + 8 * v14);\n      v16 = -(signed __int64)(*(_QWORD *)(v9 + 8 * v14) & 1LL | (v15 >> 1)) >> 63;\n      v10 ^= v16 & (v10 ^ v13);\n      v11 ^= v16 & (v15 ^ v11);\n      v17 = v14++ ^ v12;\n      v18 = v17 & v16;\n      v13 = v15;\n      v12 ^= v18;\n    }\n    while ( v5 != v14 );\n    v19 = v12 << 6;\n  }\n  else\n  {\n    v10 = 0LL;\n    v11 = 0LL;\n    v19 = 0LL;\n  }\n  v20 = 5LL;\n  v21 = 0LL;\n  do\n  {\n    v22 = 1LL << v20;\n    v23 = 64 - (1LL << v20--);\n    v24 = ((unsigned __int64)-(signed __int64)((v11 >> v23) & 1 | (v11 >> v23 >> 1)) >> 63) - 1;\n    v11 ^= v24 & (v11 ^ ((v10 >> v23) | (v11 << v22)));\n    v10 ^= v24 & (v10 ^ (v10 << v22));\n    v21 ^= (v21 ^ (v21 + v22)) & v24;\n  }\n  while ( v20 != -1 );\n  v25 = v11 >> 32;\n  v26 = 0LL;\n  v27 = 5LL;\n  v28 = (27517229472LL\n       - ((2430105293u\n         - (v25\n          * (3975772737u\n           - (v25\n            * (4150055939u\n             - (v25\n              * (2866416568u\n               - (v25\n                * (2620235790u - (v25 * (3057066472u - (v25 * (4131287530u - (2463826902u * v25 >> 34)) >> 34)) >> 33)) >> 32)) >> 31)) >> 31)) >> 31))\n        * v25 >> 26)) << 32;\n  do\n  {\n    v29 = -(signed __int64)((v21 >> v27) & 1);\n    v30 = 1LL << v27;\n    v31 = (v26 << (1LL << v27)) | (v28 >> (64 - (unsigned __int8)(1LL << v27)));\n    --v27;\n    v26 ^= v29 & (v26 ^ v31);\n    v28 ^= (v28 ^ (v28 << v30)) & v29;\n  }\n  while ( v27 != -1 );\n  v32 = (*v78 + v5) << 6;\n  v33 = v32 + 66;\n  v34 = v32 + 3;\n  if ( v34 > 0xBF )\n    v34 = 191LL;\n  v75 = (v33 - v34) & 0xFFFFFFFFFFFFFFC0LL;\n  v35 = sub_12E60((v75 + 256) >> 6);\n  v36 = (unsigned __int64 *)v35;\n  v37 = v35;\n  sub_123D0(v35, (unsigned __int64 *)v35, v28, (v75 + 64 - v19) >> 6);\n  sub_123D0(v37, v36, v26, v38 + 1);\n  v39 = (v75 + 256) >> 6;\n  v74 = sub_12E60(v39);\n  sub_123D0(v74, (unsigned __int64 *)v74, 1LL, (v75 + 192) >> 6);\n  v40 = sub_12E60(v39 + *v4);\n  v41 = (v75 + 256) >> 6;\n  v42 = (unsigned __int64 *)v40;\n  if ( *v40 >= v39 )\n    v41 = *v40;\n  v43 = sub_12E60(v41);\n  v44 = sub_12E60(*v43 + v39);\n  v45 = *v37;\n  v46 = *v37;\n  if ( *v4 >= (unsigned __int64)*v37 )\n    v46 = *v4;\n  if ( v46 > *v42 )\n    v46 = *v42;\n  v47 = 6 * v46;\n  if ( *v43 >= v45 )\n    v45 = *v43;\n  if ( v45 > *v44 )\n    v45 = *v44;\n  v48 = 6 * v45;\n  if ( v47 < v48 )\n    v47 = v48;\n  v50 = sub_12E60(v47);\n  v51 = *v44;\n  v52 = (v75 + 191) >> 6;\n  v81 = (v75 + 191) >> 6;\n  if ( *v44 <= v52 )\n    v52 = *v44;\n  if ( *v44 - v52 <= v51 )\n    v51 = *v44 - v52;\n  v83 = v44[1] + 8 * v52;\n  v82 = v51;\n  v77 = (*v78 << 6) + 4;\n  if ( v77 > 0x14 )\n  {\n    v76 = (unsigned __int64 *)v4;\n    v53 = 20LL;\n    do\n    {\n      v53 = 2 * v53 - 1;\n      sub_12840(v76, *v50, v42, (unsigned __int64 *)v37, v50[1], v49);\n      sub_12300(v43[1], *v43, v74, v42, -1LL, -1LL, 1uLL);\n      sub_12840((unsigned __int64 *)v43, *v50, v44, (unsigned __int64 *)v37, v50[1], v54);\n      sub_142E0(v37, &v82, 0x3FuLL);\n    }\n    while ( v77 > v53 );\n    v4 = (__int64 *)v76;\n  }\n  sub_12FF0(v42);\n  sub_12FF0(v43);\n  sub_12FF0(v44);\n  sub_12FF0(v50);\n  v55 = sub_141F0((unsigned __int64 *)v37, v78);\n  v56 = *v55;\n  v57 = v55;\n  v58 = v81;\n  if ( v81 > v56 )\n    v58 = v56;\n  if ( v56 - v58 <= v56 )\n    v56 -= v58;\n  v59 = *v78;\n  v85 = v57[1] + 8 * v58;\n  v84 = v56;\n  v60 = sub_12E60(v59);\n  sub_142E0(v60, &v84, 0x3FuLL);\n  v61 = sub_12E60(*v4);\n  sub_14190(v61, v60, (unsigned __int64 *)v4);\n  v62 = 2;\n  sub_12300(v61[1], *v61, v78, v61, -1LL, -1LL, 1uLL);\n  v73 = v60;\n  v63 = 0;\n  while ( 1 )\n  {\n    v64 = sub_13D30(v61, (unsigned __int64 *)v4);\n    sub_12300(\n      v61[1],\n      *v61,\n      v61,\n      (unsigned __int64 *)v4,\n      -(signed __int64)(v64 & 1),\n      -(signed __int64)(v64 & 1),\n      v64 & 1);\n    v63 += v65;\n    if ( v62 == 1 )\n      break;\n    v62 = 1;\n  }\n  v66 = *v73;\n  v67 = v73[1];\n  if ( *v73 )\n  {\n    v68 = v63;\n    v69 = (_QWORD *)v73[1];\n    v70 = 0LL;\n    do\n    {\n      v71 = v70 + (unsigned __int128)v68 + (unsigned __int64)*v69;\n      v70 = *((_QWORD *)&v71 + 1);\n      if ( v67 )\n        *v69 = v71;\n      ++v69;\n      v68 = 0LL;\n    }\n    while ( v69 != (_QWORD *)(v67 + 8 * v66) );\n  }\n  if ( (unsigned int)sub_13D30(v61, (unsigned __int64 *)v4) )\n    __assert_fail(\"!mp_cmp_hs(remainder, d)\", \"mpint.c\", 0x8BAu, \"mp_divmod_into\");\n  if ( v79 )\n    sub_130D0(v79, v73);\n  if ( v80 )\n    sub_130D0(v80, v61);\n  sub_12FF0(v37);\n  sub_12FF0(v74);\n  sub_12FF0(v57);\n  sub_12FF0(v73);\n  sub_12FF0(v61);\n  return __readfsqword(0x28u) ^ v86;\n}\n", 
            "funcStartAddr": "0x15780L", 
            "funcEndAddr": "0x15e7eL", 
            "funcName": "sub_15780"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15E80(__int64 *a1, __int64 *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12E60(*a1);\n  sub_15780((unsigned __int64 *)a1, a2, v2, 0LL);\n  return v2;\n}\n", 
            "funcStartAddr": "0x15e80L", 
            "funcEndAddr": "0x15eadL", 
            "funcName": "sub_15E80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15EB0(unsigned __int64 *a1, __int64 *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12E60(*a2);\n  sub_15780(a1, a2, 0LL, v2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x15eb0L", 
            "funcEndAddr": "0x15eddL", 
            "funcName": "sub_15EB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_15EE0(unsigned __int64 *a1, unsigned int a2, __int64 *a3)\n{\n  __int64 v3; // rbx\n  unsigned __int64 v4; // r12\n  unsigned __int64 **v5; // r14\n  __int64 *v6; // rbx\n  unsigned __int64 v7; // rdx\n  signed __int64 *v8; // rax\n  signed __int64 v9; // rcx\n  signed __int64 v10; // rdx\n  signed __int64 v11; // r12\n  unsigned __int64 *v12; // rsi\n  unsigned __int64 **v13; // rbp\n  unsigned __int64 v14; // r14\n  unsigned __int64 v15; // r13\n  unsigned __int64 v16; // rax\n  int v17; // er15\n  int v18; // eax\n  __int64 v19; // r13\n  char v20; // bp\n  __int64 *v21; // rdi\n  unsigned __int64 *v22; // rdx\n  unsigned __int64 v23; // rbx\n  unsigned __int64 *v24; // rbp\n  unsigned __int64 *v25; // rdi\n  unsigned __int64 **v27; // [rsp+8h] [rbp-90h]\n  signed __int64 i; // [rsp+10h] [rbp-88h]\n  unsigned __int64 v29; // [rsp+18h] [rbp-80h]\n  unsigned __int64 **v30; // [rsp+28h] [rbp-70h]\n  unsigned __int64 *v31; // [rsp+30h] [rbp-68h]\n  unsigned int v32; // [rsp+3Ch] [rbp-5Ch]\n  unsigned __int64 **v33; // [rsp+40h] [rbp-58h]\n  unsigned __int64 v34; // [rsp+48h] [rbp-50h]\n  unsigned __int64 v35; // [rsp+50h] [rbp-48h]\n  __int64 *v36; // [rsp+58h] [rbp-40h]\n\n  v3 = 2 * (a2 + 1);\n  v4 = 0LL;\n  v31 = a1;\n  v36 = a3;\n  v32 = a2 + 1;\n  v35 = (unsigned int)(v3 + 1);\n  v5 = (unsigned __int64 **)sub_11440(v35, 8uLL, 0LL);\n  do\n    v5[v4++] = sub_12E60(*a1 + 1);\n  while ( (unsigned int)(v3 + 1) > v4 );\n  v6 = (__int64 *)v5[v3];\n  v30 = &v5[v32];\n  v7 = **v5;\n  if ( v7 )\n  {\n    v8 = (signed __int64 *)(*v5)[1];\n    v9 = (signed __int64)&v8[v7];\n    v10 = 1LL;\n    do\n    {\n      *v8 = v10;\n      ++v8;\n      v10 = 0LL;\n    }\n    while ( (signed __int64 *)v9 != v8 );\n  }\n  v34 = a2;\n  v33 = &v30[a2];\n  for ( i = -(signed __int64)((*a1 << 6) / a2); ; ++i )\n  {\n    v29 = -i;\n    if ( i == 1 )\n      break;\n    if ( v32 )\n    {\n      v11 = 1LL;\n      sub_130D0(*v30, *v5);\n      v27 = v30 + 1;\n      if ( v32 != 1LL )\n      {\n        do\n        {\n          v12 = v5[v11];\n          v13 = v5;\n          v14 = 0LL;\n          sub_130D0(*v27, v12);\n          v15 = v29;\n          LOWORD(v16) = 1;\n          do\n          {\n            v17 = (unsigned __int16)v16;\n            sub_13AA0(v6, v13[v14], v16);\n            sub_14220(v6, (unsigned __int64 *)v6, v15);\n            sub_12300((*v27)[1], **v27, *v27, (unsigned __int64 *)v6, -1LL, 0LL, 0LL);\n            v18 = v11 - v14++;\n            v16 = (unsigned int)(v17 * v18) / v14;\n            if ( v16 > 0xFFFF )\n              __assert_fail(\"binom_mul < 0x10000\", \"mpint.c\", 0x908u, \"mp_nthroot\");\n            v15 += i;\n          }\n          while ( v14 != v11 );\n          ++v27;\n          ++v11;\n          v29 -= i;\n          v5 = v13;\n        }\n        while ( v32 != v11 );\n      }\n      v19 = 0LL;\n      v20 = sub_13D30(v31, *v33);\n      do\n      {\n        v21 = (__int64 *)v5[v19];\n        v22 = v30[v19++];\n        sub_13140(v21, (unsigned __int64 *)v21, v22, v20);\n      }\n      while ( v19 != v11 );\n    }\n  }\n  if ( v36 )\n    sub_12300(v36[1], *v36, v31, v5[v34], -1LL, -1LL, 1uLL);\n  v23 = 0LL;\n  v24 = sub_12E60(((*v31 << 6) / v34 + 63) >> 6);\n  sub_130D0(v24, v5[1]);\n  do\n  {\n    v25 = v5[v23++];\n    sub_12FF0(v25);\n  }\n  while ( v35 > v23 );\n  sub_114C0(v5);\n  return v24;\n}\n", 
            "funcStartAddr": "0x15ee0L", 
            "funcEndAddr": "0x161c8L", 
            "funcName": "sub_15EE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_161D0(unsigned __int64 *a1, unsigned __int64 *a2, __int64 *a3)\n{\n  __int64 *v3; // rbp\n  unsigned __int64 *v4; // rbx\n  unsigned __int64 *v5; // rbp\n\n  v3 = a3;\n  v4 = sub_141F0(a1, a2);\n  v5 = sub_15EB0(v4, v3);\n  sub_12FF0(v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x161d0L", 
            "funcEndAddr": "0x16201L", 
            "funcName": "sub_161D0"
        }, 
        {
            "decompiledFuncCode": "__int64 **__fastcall sub_16210(__int64 *a1)\n{\n  __int64 *v1; // rbp\n  __int64 **v2; // rax\n  __int64 v3; // rdi\n  __int64 **v4; // rbx\n  const void *v5; // rsi\n  __int64 *v6; // rax\n  unsigned __int64 v7; // rsi\n  unsigned __int64 *v8; // rax\n  __int64 v9; // rdi\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rax\n  unsigned __int64 *v12; // rbp\n  __int64 *v13; // rsi\n  unsigned __int64 *v14; // rax\n  unsigned __int64 *v15; // rdi\n  __int64 *v16; // rdx\n  __int64 *v17; // rax\n  __int64 *v18; // rcx\n  signed __int64 v19; // rdx\n  __int64 **result; // rax\n  __int64 **v21; // [rsp-10h] [rbp-48h]\n  __int64 v22; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v23; // [rsp+18h] [rbp-20h]\n\n  v1 = a1;\n  v23 = __readfsqword(0x28u);\n  v2 = (__int64 **)sub_11440(1uLL, 0x48uLL, 0LL);\n  v3 = *a1;\n  v4 = v2;\n  v5 = (const void *)v1[1];\n  v2[2] = (__int64 *)*v1;\n  v2[1] = (__int64 *)(v3 << 6);\n  v2[3] = (__int64 *)(2 * v3 + 1);\n  v6 = sub_12F50(v3, v5);\n  v7 = (unsigned __int64)v4[1];\n  *v4 = v6;\n  v8 = sub_14BB0((__int64)v6, v7);\n  v22 = 0LL;\n  v9 = v8[1];\n  v10 = *v8;\n  v4[4] = (__int64 *)v8;\n  sub_12300(v9, v10, &v22, v8, -1LL, -1LL, 1uLL);\n  v11 = sub_12E60((__int64)v4[2] + 1);\n  v12 = v11;\n  v13 = *v4;\n  *(_QWORD *)(v11[1] + 8LL * (_QWORD)v4[2]) = 1LL;\n  v4[5] = (__int64 *)sub_15EB0(v11, v13);\n  sub_12FF0(v12);\n  v14 = sub_161D0((unsigned __int64 *)v4[5], (unsigned __int64 *)v4[5], *v4);\n  v15 = (unsigned __int64 *)v4[5];\n  v16 = *v4;\n  v4[6] = (__int64 *)v14;\n  v4[7] = (__int64 *)sub_161D0(v15, v14, v16);\n  v17 = v4[2];\n  v18 = v4[3];\n  v19 = (signed __int64)v18 + 3 * (_QWORD)v17;\n  if ( v17 > v18 )\n    v17 = v4[3];\n  v4[8] = sub_12E60(v19 + 6LL * (_QWORD)v17);\n  result = v21;\n  if ( __readfsqword(0x28u) == v23 )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x16210L", 
            "funcEndAddr": "0x16344L", 
            "funcName": "sub_16210"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_16350(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_161D0(a2, *(unsigned __int64 **)(a1 + 40), *(__int64 **)a1);\n}\n", 
            "funcStartAddr": "0x16350L", 
            "funcEndAddr": "0x16362L", 
            "funcName": "sub_16350"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_16370(__int64 a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // rbx\n\n  v3 = sub_161D0(a3, *(unsigned __int64 **)(a1 + 40), *(__int64 **)a1);\n  sub_130D0(a2, v3);\n  sub_12FF0(v3);\n}\n", 
            "funcStartAddr": "0x16370L", 
            "funcEndAddr": "0x163a7L", 
            "funcName": "sub_16370"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_163B0(unsigned __int64 *a1, unsigned __int64 *a2, __int64 a3)\n{\n  __int64 **v3; // rbx\n  unsigned __int64 *v4; // r13\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // rbp\n\n  if ( !*(_QWORD *)a3 )\n    __assert_fail(\"modulus->nw > 0\", \"mpint.c\", 0x62Bu, \"mp_modpow\");\n  if ( !(**(_BYTE **)(a3 + 8) & 1) )\n    __assert_fail(\"modulus->w[0] & 1\", \"mpint.c\", 0x62Cu, \"mp_modpow\");\n  v3 = sub_16210((__int64 *)a3);\n  v4 = sub_161D0(a1, (unsigned __int64 *)v3[5], *v3);\n  v5 = sub_153C0((__int64)v3, (__int64)v4, a2);\n  v6 = sub_12E60((__int64)v3[2]);\n  sub_152E0((__int64)v3, v6, v5);\n  sub_12FF0(v4);\n  sub_12FF0(v5);\n  sub_15110(v3);\n  return v6;\n}\n", 
            "funcStartAddr": "0x163b0L", 
            "funcEndAddr": "0x16483L", 
            "funcName": "sub_163B0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_16490(_QWORD *a1, unsigned __int64 *a2, __int64 *a3)\n{\n  __int64 *v3; // rbp\n  unsigned __int64 *v4; // rbx\n  unsigned __int64 *v5; // rbp\n\n  v3 = a3;\n  v4 = (unsigned __int64 *)sub_140F0(a1, a2);\n  v5 = sub_15EB0(v4, v3);\n  sub_12FF0(v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x16490L", 
            "funcEndAddr": "0x164c1L", 
            "funcName": "sub_16490"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_164D0(unsigned __int64 *a1, unsigned __int64 *a2, __int64 *a3)\n{\n  unsigned __int64 *v3; // r15\n  unsigned __int64 v4; // rdi\n  __int64 *v5; // rbx\n  unsigned __int64 v6; // r15\n  __int64 v7; // rbp\n  _QWORD *v8; // rcx\n  signed __int64 v9; // rsi\n  unsigned __int64 v10; // rax\n  unsigned __int64 v11; // rdx\n  unsigned __int64 *v12; // rax\n  unsigned __int64 v13; // rsi\n  unsigned __int64 *v14; // r12\n  __int64 v15; // rdi\n  char v16; // r8\n  _QWORD *v17; // rcx\n  __int64 v18; // kr00_8\n  signed __int64 v19; // rcx\n  unsigned __int64 v20; // rdx\n  unsigned __int64 v21; // rax\n  __int64 *v23; // [rsp+8h] [rbp-70h]\n\n  v3 = a1;\n  v4 = *a1;\n  if ( *a2 >= v4 )\n    v4 = *a2;\n  v23 = a3;\n  v5 = sub_12E60(v4);\n  sub_12300(v5[1], *v5, v3, a2, -1LL, -1LL, 1uLL);\n  v6 = (unsigned int)sub_13D30(a2, v3);\n  v7 = -(signed __int64)v6;\n  if ( *v5 )\n  {\n    v8 = (_QWORD *)v5[1];\n    v9 = (signed __int64)&v8[*v5];\n    v10 = v6;\n    do\n    {\n      v11 = __CFADD__(v10, v7 ^ *v8);\n      *v8 = (v7 ^ *v8) + v10;\n      ++v8;\n      v10 = v11;\n    }\n    while ( (_QWORD *)v9 != v8 );\n  }\n  v12 = sub_15EB0((unsigned __int64 *)v5, v23);\n  v13 = *v12;\n  v14 = v12;\n  v15 = v12[1];\n  v16 = v6;\n  if ( *v12 )\n  {\n    v17 = (_QWORD *)v12[1];\n    do\n    {\n      v18 = v7 ^ *v17;\n      *v17 = v6 + (v7 ^ *v17);\n      ++v17;\n      v6 = (v6 + (unsigned __int128)(unsigned __int64)v18) >> 64;\n    }\n    while ( (_QWORD *)(v15 + 8 * v13) != v17 );\n    v19 = 1LL;\n    v14 = v12;\n    if ( v13 )\n      v19 = v13;\n  }\n  else\n  {\n    v19 = 1LL;\n  }\n  v20 = 0LL;\n  v21 = 0LL;\n  do\n  {\n    if ( v13 > v21 )\n      v20 |= *(_QWORD *)(v15 + 8 * v21);\n    ++v21;\n  }\n  while ( v21 != v19 );\n  sub_12300(\n    v15,\n    v13,\n    v14,\n    (unsigned __int64 *)v23,\n    -(signed __int64)(((unsigned __int64)-(signed __int64)((v20 >> 1) | v20 & 1) >> 63) & *(_QWORD *)&v16),\n    0LL,\n    0LL);\n  sub_12FF0(v5);\n  return v14;\n}\n", 
            "funcStartAddr": "0x164d0L", 
            "funcEndAddr": "0x16667L", 
            "funcName": "sub_164D0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_16670(__int64 **a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // r13\n  __int64 *v4; // rbp\n  __int64 *v5; // rbx\n  unsigned __int8 v6; // al\n  unsigned __int8 v7; // cl\n\n  v3 = a3;\n  v4 = *a1;\n  v5 = sub_12E60(**a1);\n  sub_12300(v5[1], *v5, a2, v3, -1LL, 0LL, 0LL);\n  v6 = sub_13D30((unsigned __int64 *)v5, (unsigned __int64 *)v4);\n  sub_12300(\n    v5[1],\n    *v5,\n    v5,\n    (unsigned __int64 *)v4,\n    -(signed __int64)((v7 | v6) & 1),\n    -(signed __int64)((v7 | v6) & 1),\n    (v7 | v6) & 1);\n  return v5;\n}\n", 
            "funcStartAddr": "0x16670L", 
            "funcEndAddr": "0x166f1L", 
            "funcName": "sub_16670"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_16700(__int64 **a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // r13\n  __int64 *v4; // rbp\n  __int64 *v5; // rbx\n  char v6; // al\n\n  v3 = a3;\n  v4 = *a1;\n  v5 = sub_12E60(**a1);\n  sub_12300(v5[1], *v5, a2, v3, -1LL, -1LL, 1uLL);\n  v6 = sub_13D30(a2, v3);\n  sub_12300(v5[1], *v5, v5, (unsigned __int64 *)v4, -(signed __int64)(~v6 & 1), 0LL, 0LL);\n  return v5;\n}\n", 
            "funcStartAddr": "0x16700L", 
            "funcEndAddr": "0x16783L", 
            "funcName": "sub_16700"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_16790(__int64 *a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // rbp\n  char v4; // al\n\n  v3 = a3;\n  v4 = sub_13D30(a2, a3);\n  sub_13140(a1, a2, v3, v4);\n}\n", 
            "funcStartAddr": "0x16790L", 
            "funcEndAddr": "0x167bcL", 
            "funcName": "sub_16790"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_167C0(__int64 *a1, unsigned __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // rbp\n  unsigned __int64 *v4; // rsi\n  char v5; // al\n\n  v3 = a2;\n  v4 = a3;\n  v5 = sub_13D30(v3, a3);\n  sub_13140(a1, v4, v3, v5);\n}\n", 
            "funcStartAddr": "0x167c0L", 
            "funcEndAddr": "0x167e6L", 
            "funcName": "sub_167C0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_167F0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  unsigned __int64 v3; // rdi\n  __int64 *v4; // rbp\n\n  v2 = a1;\n  v3 = *a1;\n  if ( *a2 <= v3 )\n    v3 = *a2;\n  v4 = sub_12E60(v3);\n  sub_16790(v4, v2, a2);\n  return v4;\n}\n", 
            "funcStartAddr": "0x167f0L", 
            "funcEndAddr": "0x16822L", 
            "funcName": "sub_167F0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_16830(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  unsigned __int64 v3; // rdi\n  __int64 *v4; // rbp\n\n  v2 = a1;\n  v3 = *a1;\n  if ( *a2 >= v3 )\n    v3 = *a2;\n  v4 = sub_12E60(v3);\n  sub_167C0(v4, v2, a2);\n  return v4;\n}\n", 
            "funcStartAddr": "0x16830L", 
            "funcEndAddr": "0x16862L", 
            "funcName": "sub_16830"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_16870(unsigned __int64 a1)\n{\n  unsigned __int64 *v1; // rbx\n\n  v1 = sub_12E60((a1 + 64) >> 6);\n  sub_13450(v1, a1, 1);\n  return v1;\n}\n", 
            "funcStartAddr": "0x16870L", 
            "funcEndAddr": "0x168a3L", 
            "funcName": "sub_16870"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_168B0(__int64 a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  __int64 v3; // rax\n  _QWORD *v4; // rbx\n  __int64 *v5; // rax\n  __int64 **v6; // rax\n  unsigned __int64 *v7; // rsi\n  __int64 *v8; // rdx\n  unsigned __int64 *v9; // rax\n  unsigned __int64 v10; // rdx\n  unsigned __int64 v11; // rsi\n  __int64 v12; // rax\n  unsigned __int64 *v13; // rax\n\n  v2 = a2;\n  v3 = sub_11440(1uLL, 0x38uLL, 0LL);\n  *(_QWORD *)(v3 + 48) = 0LL;\n  v4 = (_QWORD *)v3;\n  *(_OWORD *)v3 = 0LL;\n  *(_OWORD *)(v3 + 16) = 0LL;\n  *(_OWORD *)(v3 + 32) = 0LL;\n  v5 = sub_12F50(*(_QWORD *)a1, *(const void **)(a1 + 8));\n  *v4 = v5;\n  v6 = sub_16210(v5);\n  v7 = (unsigned __int64 *)v6[5];\n  v8 = *v6;\n  v4[1] = v6;\n  v9 = sub_161D0(v2, v7, v8);\n  v10 = *(_QWORD *)a1;\n  v4[5] = v9;\n  v11 = 1LL;\n  v4[2] = 1LL;\n  if ( v10 << 6 > 1 )\n  {\n    do\n    {\n      if ( v11 >> 6 < v10 )\n      {\n        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v11 >> 6));\n        if ( _bittest64(&v12, v11) )\n          break;\n      }\n      v4[2] = ++v11;\n    }\n    while ( v11 != v10 << 6 );\n  }\n  v13 = sub_14A90((unsigned __int64 *)a1, v11);\n  v4[3] = v13;\n  v4[4] = sub_14A90(v13, 1uLL);\n  return v4;\n}\n", 
            "funcStartAddr": "0x168b0L", 
            "funcEndAddr": "0x16984L", 
            "funcName": "sub_168B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_16990(_QWORD **a1)\n{\n  void *v1; // rbx\n  _QWORD *v2; // rdi\n\n  v1 = a1;\n  sub_15110((_QWORD **)a1[1]);\n  sub_12FF0(*a1);\n  sub_12FF0(a1[5]);\n  sub_12FF0(a1[3]);\n  sub_12FF0(a1[4]);\n  v2 = a1[6];\n  if ( v2 )\n    sub_12FF0(v2);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x16990L", 
            "funcEndAddr": "0x169d7L", 
            "funcName": "sub_16990"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_169E0(__int64 a1, unsigned __int64 *a2, _DWORD *a3)\n{\n  __int64 v3; // r15\n  signed __int64 *v4; // r13\n  __int64 v5; // rdi\n  const __m128i *v6; // rax\n  unsigned __int64 *v7; // rdx\n  __int64 v8; // rdi\n  __int64 v9; // rdx\n  unsigned __int64 v10; // rbp\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  unsigned __int64 v13; // rax\n  unsigned __int64 *v14; // rsi\n  __int64 v15; // rdx\n  signed __int64 v16; // r12\n  unsigned __int64 v17; // r14\n  int v18; // eax\n  signed __int64 v19; // rsi\n  unsigned __int64 v20; // rdx\n  bool v21; // cf\n  bool v22; // zf\n  __int64 v24; // rdi\n  char v25; // ST00_1\n  unsigned __int64 *v26; // rax\n  __int64 v27; // [rsp+0h] [rbp-B8h]\n  unsigned __int64 *v28; // [rsp+10h] [rbp-A8h]\n  _DWORD *v29; // [rsp+18h] [rbp-A0h]\n  __int64 *v30; // [rsp+28h] [rbp-90h]\n  __m128i v31; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v32; // [rsp+40h] [rbp-78h]\n  __int64 v33; // [rsp+48h] [rbp-70h]\n  unsigned __int64 v34; // [rsp+50h] [rbp-68h]\n  __int64 v35; // [rsp+58h] [rbp-60h]\n  unsigned __int64 v36; // [rsp+60h] [rbp-58h]\n  __int64 v37; // [rsp+68h] [rbp-50h]\n  unsigned __int64 v38; // [rsp+78h] [rbp-40h]\n\n  v3 = a1;\n  v4 = (signed __int64 *)a2;\n  v5 = *(_QWORD *)(a1 + 8);\n  v38 = __readfsqword(0x28u);\n  v29 = a3;\n  if ( !*(_QWORD *)(v3 + 48) )\n  {\n    v26 = sub_153C0(v5, *(_QWORD *)(v3 + 40), *(unsigned __int64 **)(v3 + 24));\n    v5 = *(_QWORD *)(v3 + 8);\n    *(_QWORD *)(v3 + 48) = v26;\n  }\n  v6 = (const __m128i *)sub_12E60(3LL * *(_QWORD *)(v5 + 16));\n  v7 = *(unsigned __int64 **)(v3 + 32);\n  v8 = *(_QWORD *)(v3 + 8);\n  v30 = (__int64 *)v6;\n  v31 = _mm_loadu_si128(v6);\n  v28 = sub_153C0(v8, (__int64)a2, v7);\n  v32 = sub_127F0((unsigned __int64 *)&v31, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16LL));\n  v33 = v9;\n  sub_130D0(&v32, v28);\n  sub_15160(*(_QWORD *)(v3 + 8), v28, v28, a2);\n  v10 = 0LL;\n  sub_15160(*(_QWORD *)(v3 + 8), &v32, v28, &v32);\n  v34 = sub_127F0((unsigned __int64 *)&v31, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16LL));\n  v11 = *(_QWORD *)(v3 + 8);\n  v35 = v12;\n  v13 = sub_127F0((unsigned __int64 *)&v31, *(_QWORD *)(v11 + 16));\n  v14 = *(unsigned __int64 **)(v3 + 48);\n  v36 = v13;\n  v37 = v15;\n  sub_130D0(&v36, v14);\n  while ( *(_QWORD *)(v3 + 16) > v10 )\n  {\n    while ( 1 )\n    {\n      v16 = v10 + 1;\n      sub_130D0(&v34, &v32);\n      if ( v10 + 1 < *(_QWORD *)(v3 + 16) )\n      {\n        v17 = v10 + 1;\n        do\n        {\n          ++v17;\n          sub_15160(*(_QWORD *)(v3 + 8), &v34, &v34, &v34);\n        }\n        while ( *(_QWORD *)(v3 + 16) > v17 );\n      }\n      v27 = *(_QWORD *)(v3 + 8);\n      v18 = sub_14030(&v34, *(unsigned __int64 **)(*(_QWORD *)(v3 + 8) + 40LL));\n      if ( v10 )\n        break;\n      v19 = 1LL;\n      if ( *v4 )\n        v19 = *v4;\n      v20 = 0LL;\n      while ( 1 )\n      {\n        if ( *v4 > v10 )\n          v20 |= *(_QWORD *)(v4[1] + 8 * v10);\n        v10 = v16;\n        if ( v19 == v16 )\n          break;\n        ++v16;\n      }\n      v10 = 1LL;\n      v21 = *(_QWORD *)(v3 + 16) < 1uLL;\n      v22 = *(_QWORD *)(v3 + 16) == 1LL;\n      *v29 = ((unsigned __int64)-(signed __int64)((v20 >> 1) | v20 & 1) >> 63) ^ 1 | v18;\n      if ( v21 || v22 )\n        goto LABEL_17;\n    }\n    v24 = v27;\n    v25 = v18;\n    sub_15160(v24, &v34, v28, &v36);\n    ++v10;\n    sub_13140((__int64 *)v28, &v34, v28, v25);\n    sub_15160(*(_QWORD *)(v3 + 8), &v36, &v36, &v36);\n    sub_15160(*(_QWORD *)(v3 + 8), &v34, &v32, &v36);\n    sub_13140((__int64 *)&v32, &v34, &v32, v25);\n  }\nLABEL_17:\n  sub_12FF0(v30);\n  return v28;\n}\n", 
            "funcStartAddr": "0x169e0L", 
            "funcEndAddr": "0x16c8cL", 
            "funcName": "sub_169E0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_16D00(__int64 a1, void (__fastcall *a2)(_BYTE *, unsigned __int64))\n{\n  unsigned __int64 v2; // rbx\n  _BYTE *v3; // rbp\n  _QWORD *v4; // r12\n\n  v2 = (unsigned __int64)(a1 + 7) >> 3;\n  v3 = (_BYTE *)sub_11440(v2, 1uLL, 0LL);\n  a2(v3, v2);\n  if ( v2 )\n    *v3 &= (2 << ((a1 - 1) & 7)) - 1;\n  v4 = sub_12ED0((__int64)v3, v2, -1LL, v2 - 1);\n  sub_47E30(v3, v2);\n  sub_114C0(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x16d00L", 
            "funcEndAddr": "0x16d87L", 
            "funcName": "sub_16D00"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_16D90(__int64 *a1, void (__fastcall *a2)(_BYTE *, unsigned __int64))\n{\n  unsigned __int64 *v2; // rbx\n  unsigned __int64 *v3; // rbp\n\n  v2 = sub_16D00((*a1 << 6) + 128, a2);\n  v3 = sub_15EB0(v2, a1);\n  sub_12FF0(v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x16d90L", 
            "funcEndAddr": "0x16dccL", 
            "funcName": "sub_16D90"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_16DD0(unsigned __int64 *a1, unsigned __int64 *a2, void (__fastcall *a3)(_BYTE *, unsigned __int64))\n{\n  void (__fastcall *v3)(_BYTE *, unsigned __int64); // r12\n  __int64 *v4; // rbp\n  unsigned __int64 *v5; // r12\n  __int64 *v6; // rbx\n\n  v3 = a3;\n  v4 = (__int64 *)sub_14140(a2, a1);\n  v5 = sub_16D90(v4, v3);\n  v6 = sub_12E60(*a2);\n  sub_12300(v6[1], *v6, v5, a1, -1LL, 0LL, 0LL);\n  sub_12FF0(v5);\n  sub_12FF0(v4);\n  return v6;\n}\n", 
            "funcStartAddr": "0x16dd0L", 
            "funcEndAddr": "0x16e4aL", 
            "funcName": "sub_16DD0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_16E50(_QWORD *a1)\n{\n  __int64 v1; // rdx\n  _QWORD *result; // rax\n\n  v1 = *a1;\n  result = a1;\n  if ( *a1 > 1uLL )\n  {\n    do\n    {\n      if ( *(_QWORD *)(a1[1] + 8 * v1 - 8) )\n        break;\n      --v1;\n    }\n    while ( v1 != 1 );\n  }\n  *a1 = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x16e50L", 
            "funcEndAddr": "0x16e7eL", 
            "funcName": "sub_16E50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_16E80(unsigned __int64 *a1)\n{\n  unsigned __int64 *v1; // rbx\n  unsigned __int64 v2; // rdi\n  unsigned __int64 *v3; // rbp\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 > 1 )\n  {\n    do\n    {\n      if ( *(_QWORD *)(v1[1] + 8 * v2 - 8) )\n        break;\n      --v2;\n    }\n    while ( v2 != 1 );\n  }\n  v3 = sub_12E60(v2);\n  sub_130D0(v3, v1);\n  return v3;\n}\n", 
            "funcStartAddr": "0x16e80L", 
            "funcEndAddr": "0x16ecfL", 
            "funcName": "sub_16E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_16ED0(unsigned __int64 *a1, unsigned int a2)\n{\n  unsigned __int64 v2; // rbx\n  signed __int64 v3; // rax\n  signed __int64 v4; // r13\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rsi\n\n  v2 = a2;\n  v3 = sub_12FD0(a1);\n  if ( !v3 )\n    return 0LL;\n  v4 = v3 - 1;\n  v5 = 0LL;\n  do\n  {\n    v6 = v4--;\n    v5 = ((v5 << 8) + (unsigned __int8)sub_133D0(a1, v6)) % v2;\n  }\n  while ( v4 != -1 );\n  return (unsigned int)v5;\n}\n", 
            "funcStartAddr": "0x16ed0L", 
            "funcEndAddr": "0x16f35L", 
            "funcName": "sub_16ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_16F40()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x16f40L", 
            "funcEndAddr": "0x16f43L", 
            "funcName": "sub_16F40"
        }, 
        {
            "decompiledFuncCode": "void nullsub_7()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x16f50L", 
            "funcEndAddr": "0x16f52L", 
            "funcName": "nullsub_7"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_16FC0(_QWORD *a1, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5)\n{\n  _QWORD *v5; // rbp\n  __int64 v6; // r13\n  unsigned __int64 v7; // r12\n  _QWORD **v8; // rbx\n  _QWORD *v9; // rax\n  __int64 v10; // rdi\n  __int64 v11; // rax\n  __int64 v12; // r15\n  unsigned __int64 v13; // rcx\n  void *v14; // rdi\n  _QWORD *v15; // rax\n  __int64 v16; // rdx\n  __int64 v18; // [rsp+8h] [rbp-40h]\n\n  v5 = a1;\n  v6 = a3;\n  v7 = a4;\n  v18 = a5;\n  v8 = (_QWORD **)sub_11440(1uLL, 0x28uLL, 0LL);\n  v9 = sub_133C0(a2);\n  v10 = *a1;\n  *v8 = v9;\n  if ( v8 == (_QWORD **)sub_42E00(v10) )\n  {\n    if ( v18 )\n    {\n      v11 = sub_11440(v7, 8uLL, 0LL);\n      v8[1] = (_QWORD *)v11;\n      if ( v7 )\n      {\n        v12 = 0LL;\n        do\n        {\n          *(_QWORD *)(v11 + 8 * v12) = sub_43200(*v5, *(_QWORD *)(v6 + 8 * v12), sub_16F90);\n          v11 = (__int64)v8[1];\n          if ( !*(_QWORD *)(v11 + 8 * v12) )\n            __assert_fail(\"pr->factors[i]\", \"pockle.c\", 0x4Cu, \"pockle_insert\");\n          ++v12;\n        }\n        while ( v7 != v12 );\n      }\n      v8[2] = (_QWORD *)v7;\n      v8[3] = sub_133C0(v18);\n    }\n    else\n    {\n      v8[1] = 0LL;\n      v8[2] = 0LL;\n      v8[3] = 0LL;\n    }\n    v13 = v5[2];\n    v14 = (void *)v5[1];\n    v8[4] = (_QWORD *)v13;\n    v15 = sub_114E0(v14, v5 + 3, 8uLL, v13, 1uLL, 0);\n    v16 = v5[2];\n    v5[1] = v15;\n    v5[2] = v16 + 1;\n    v15[v16] = v8;\n  }\n  else\n  {\n    sub_12FF0(*v8);\n    sub_114C0(v8);\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x16fc0L", 
            "funcEndAddr": "0x17121L", 
            "funcName": "sub_16FC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_17130(__int64 a1, __int64 a2)\n{\n  char *v2; // rbx\n  size_t v3; // r12\n\n  v2 = (char *)sub_14380(a2);\n  v3 = strlen(v2);\n  sub_10C20((__int64 (**)(void))(a1 + 24));\n  sub_47E30(v2, v3);\n  sub_114C0(v2);\n}\n", 
            "funcStartAddr": "0x17130L", 
            "funcEndAddr": "0x17173L", 
            "funcName": "sub_17130"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_17180()\n{\n  _QWORD *v0; // rbx\n  __int64 v1; // rax\n  _QWORD *result; // rax\n\n  v0 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n  v1 = sub_42D90(sub_16F60, 32LL);\n  v0[1] = 0LL;\n  *v0 = v1;\n  result = v0;\n  v0[3] = 0LL;\n  v0[2] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x17180L", 
            "funcEndAddr": "0x171c1L", 
            "funcName": "sub_17180"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_171E0(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n  __int64 *v3; // rbp\n  __int64 v4; // rdx\n  signed __int64 v5; // rax\n  __int64 v6; // rdi\n  _QWORD **v7; // rbx\n  _QWORD *v8; // rdi\n\n  result = a1[2];\n  if ( a2 < result )\n  {\n    v3 = a1;\n    do\n    {\n      v4 = v3[1];\n      v5 = result - 1;\n      v6 = *v3;\n      v3[2] = v5;\n      v7 = *(_QWORD ***)(v4 + 8 * v5);\n      sub_43270(v6, *(_QWORD *)(v4 + 8 * v5));\n      sub_12FF0(*v7);\n      v8 = v7[3];\n      if ( v8 )\n        sub_12FF0(v8);\n      sub_114C0(v7[1]);\n      sub_114C0(v7);\n      result = v3[2];\n    }\n    while ( result > a2 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x171e0L", 
            "funcEndAddr": "0x17252L", 
            "funcName": "sub_171E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_17260(__int64 *a1)\n{\n  sub_171E0(a1, 0LL);\n  if ( (unsigned int)sub_42DE0(*a1, 0LL) )\n    __assert_fail(\"count234(pockle->tree) == 0\", \"pockle.c\", 0x34u, \"pockle_free\");\n  sub_42DC0(*a1);\n  sub_114C0((void *)a1[1]);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x17260L", 
            "funcEndAddr": "0x172b0L", 
            "funcName": "sub_17260"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_172B0(_QWORD *a1, signed __int64 *a2)\n{\n  __int64 v2; // rbp\n  unsigned int v4; // ebx\n  __int16 *v5; // rcx\n  unsigned int v6; // esi\n\n  v2 = (__int64)a2;\n  if ( (unsigned int)sub_13FC0(a2, 0x100000000LL) )\n    return 1LL;\n  v4 = sub_13420(a2);\n  if ( v4 <= 1 )\n    return 3LL;\n  sub_18520(a2, 0x100000000LL);\n  v5 = &word_262080;\n  while ( 1 )\n  {\n    v6 = (unsigned __int16)*v5;\n    if ( v6 == v4 )\n      return sub_16FC0(a1, v2, 0LL, 0LL, 0LL);\n    if ( !(v4 % v6) )\n      break;\n    ++v5;\n    if ( v5 == &word_262080 + 6542 )\n      return sub_16FC0(a1, v2, 0LL, 0LL, 0LL);\n  }\n  return 2LL;\n}\n", 
            "funcStartAddr": "0x172b0L", 
            "funcEndAddr": "0x1735cL", 
            "funcName": "sub_172B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17360(_QWORD *a1, signed __int64 *a2, __int64 a3, unsigned __int64 a4, unsigned __int64 *a5)\n{\n  unsigned __int64 v5; // r15\n  __int64 *v6; // rbp\n  unsigned __int64 *v7; // r14\n  __int64 v8; // r12\n  __int64 v9; // rax\n  unsigned __int64 *v10; // r15\n  __int64 v11; // rax\n  unsigned __int64 *v12; // r13\n  int v13; // ST00_4\n  unsigned __int64 *v14; // rax\n  unsigned __int64 *v15; // rbx\n  __int64 *v16; // rbx\n  unsigned int v17; // er15\n  unsigned __int64 *v18; // r12\n  __int64 **v19; // rbx\n  unsigned __int64 *v21; // rbx\n  unsigned __int64 *v22; // r12\n  int v23; // er13\n  __int64 v24; // rax\n  unsigned __int64 *v25; // rbx\n  __int64 v26; // rax\n  unsigned __int64 *v27; // r12\n  unsigned __int64 *v28; // r13\n  __int64 *v29; // r15\n  unsigned __int64 *v30; // r13\n  unsigned __int64 *v31; // rax\n  int v32; // ST00_4\n  __int64 *v33; // rdi\n  __int64 v34; // r12\n  unsigned __int64 *v35; // rax\n  unsigned __int64 *v36; // r14\n  unsigned __int64 *v37; // rbp\n  __int64 *v38; // r13\n  unsigned __int64 *v39; // ST08_8\n  unsigned __int64 *v40; // ST00_8\n  unsigned __int64 *v41; // rax\n  unsigned __int64 *v42; // r15\n  __int64 v43; // rax\n  __int64 *v44; // ST00_8\n  unsigned __int64 *v45; // ST30_8\n  int v46; // ST38_4\n  unsigned __int64 *v47; // rdi\n  unsigned __int64 *v48; // rdi\n  __int64 v49; // [rsp+0h] [rbp-78h]\n  __int64 v50; // [rsp+8h] [rbp-70h]\n  _QWORD *v51; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v52; // [rsp+18h] [rbp-60h]\n  unsigned __int64 *v53; // [rsp+28h] [rbp-50h]\n  __int64 *v54; // [rsp+30h] [rbp-48h]\n  unsigned __int64 *v55; // [rsp+38h] [rbp-40h]\n\n  v5 = a4;\n  v51 = a1;\n  v50 = a3;\n  v52 = a4;\n  v53 = a5;\n  if ( !(unsigned int)sub_13FC0(a2, 2LL) )\n    return 3;\n  v6 = sub_133C0((__int64)a2);\n  sub_13A10(v6, (unsigned __int64 *)v6, 1LL);\n  v7 = sub_12FA0(1LL);\n  if ( v5 )\n  {\n    v8 = 0LL;\n    while ( 1 )\n    {\n      v16 = *(__int64 **)(v50 + 8 * v8);\n      if ( !sub_43200(*a1, *(_QWORD *)(v50 + 8 * v8), sub_16F90) )\n      {\n        v17 = 4;\n        v18 = 0LL;\n        v19 = 0LL;\n        goto LABEL_8;\n      }\n      v9 = sub_12FE0(v6);\n      v10 = sub_12F90(v9);\n      v11 = sub_12FE0(v16);\n      v12 = sub_12F90(v11);\n      sub_15780((unsigned __int64 *)v6, v16, v10, v12);\n      v13 = sub_140A0((signed __int64 *)v12, 0LL);\n      sub_12FF0(v12);\n      sub_12FF0(v6);\n      if ( !v13 )\n        break;\n      ++v8;\n      v14 = sub_141F0(v7, (unsigned __int64 *)v16);\n      v6 = (__int64 *)v10;\n      v15 = sub_16E50(v14);\n      sub_12FF0(v7);\n      v7 = v15;\n      if ( v52 == v8 )\n        goto LABEL_18;\n    }\n    v6 = (__int64 *)v10;\n    v18 = 0LL;\n    v17 = 5;\n    v19 = 0LL;\n    goto LABEL_8;\n  }\nLABEL_18:\n  v21 = sub_141F0(v7, v7);\n  v22 = sub_141F0(v21, v7);\n  v23 = sub_13D30((unsigned __int64 *)a2, v22);\n  sub_12FF0(v22);\n  sub_12FF0(v21);\n  if ( !v23 )\n  {\n    v24 = sub_12FE0(v6);\n    v25 = sub_12F90(v24);\n    v26 = sub_12FE0(v7);\n    v27 = sub_12F90(v26);\n    sub_15780((unsigned __int64 *)v6, (__int64 *)v7, v25, v27);\n    if ( (unsigned int)sub_13D30(v25, v7) )\n      __assert_fail(\"!mp_cmp_hs(a, f)\", \"pockle.c\", 0x113u, \"pockle_add_prime\");\n    if ( (unsigned int)sub_13D30(v27, v7) )\n      __assert_fail(\"!mp_cmp_hs(b, f)\", \"pockle.c\", 0x114u, \"pockle_add_prime\");\n    if ( !(unsigned int)sub_140A0((signed __int64 *)v25, 0LL) )\n    {\n      v28 = sub_141F0(v27, v27);\n      sub_14220((__int64 *)v25, v25, 2uLL);\n      if ( (unsigned int)sub_13D30(v28, v25) )\n      {\n        v41 = (unsigned __int64 *)sub_14140(v28, v25);\n        v42 = v41;\n        v43 = sub_12FE0(v41);\n        v44 = sub_12F90(v43);\n        v45 = sub_15EE0(v42, 2u, v44);\n        v46 = sub_140A0(v44, 0LL);\n        sub_12FF0(v42);\n        sub_12FF0(v45);\n        sub_12FF0(v44);\n        sub_12FF0(v28);\n        if ( v46 )\n        {\n          v47 = v27;\n          v17 = 8;\n          v18 = 0LL;\n          sub_12FF0(v47);\n          v48 = v25;\n          v19 = 0LL;\n          sub_12FF0(v48);\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        sub_12FF0(v28);\n      }\n    }\n    sub_12FF0(v27);\n    sub_12FF0(v25);\n    v19 = sub_16210(a2);\n    v18 = sub_16350((__int64)v19, v53);\n    v29 = sub_133C0((__int64)a2);\n    sub_13A10(v29, (unsigned __int64 *)v29, 1LL);\n    v30 = sub_153C0((__int64)v19, (__int64)v18, (unsigned __int64 *)v29);\n    v31 = (unsigned __int64 *)sub_152D0((__int64)v19);\n    v32 = sub_14030(v30, v31);\n    sub_12FF0(v30);\n    v33 = v29;\n    v17 = 7;\n    sub_12FF0(v33);\n    if ( v32 )\n    {\n      if ( v52 )\n      {\n        v49 = (__int64)v18;\n        v54 = v6;\n        v34 = 0LL;\n        v55 = v7;\n        do\n        {\n          v35 = sub_15E80(a2, *(__int64 **)(v50 + 8 * v34));\n          v36 = sub_16E50(v35);\n          v37 = sub_153C0((__int64)v19, v49, v36);\n          v38 = (__int64 *)sub_15390((__int64)v19, v37);\n          sub_13A10(v38, (unsigned __int64 *)v38, 1LL);\n          if ( !(unsigned int)sub_15710((unsigned __int64 *)v38, (unsigned __int64 *)a2) )\n          {\n            v18 = (unsigned __int64 *)v49;\n            v39 = v36;\n            v40 = v37;\n            v7 = v55;\n            v6 = v54;\n            v17 = ((unsigned int)sub_140A0(v38, 0LL) == 0) + 9;\n            sub_12FF0(v39);\n            sub_12FF0(v40);\n            sub_12FF0(v38);\n            goto LABEL_8;\n          }\n          ++v34;\n          sub_12FF0(v36);\n          sub_12FF0(v37);\n          sub_12FF0(v38);\n        }\n        while ( v52 != v34 );\n        v6 = v54;\n        v18 = (unsigned __int64 *)v49;\n        v7 = v55;\n      }\n      v17 = sub_16FC0(v51, (__int64)a2, v50, v52, (__int64)v53);\n    }\n    goto LABEL_8;\n  }\n  v17 = 6;\n  v18 = 0LL;\n  v19 = 0LL;\nLABEL_8:\n  if ( v6 )\n    sub_12FF0(v6);\n  if ( v7 )\n    sub_12FF0(v7);\n  if ( v18 )\n    sub_12FF0(v18);\n  if ( v19 )\n    sub_15110(v19);\n  return v17;\n}\n", 
            "funcStartAddr": "0x17360L", 
            "funcEndAddr": "0x178adL", 
            "funcName": "sub_17360"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall compar(const void *a1, const void *a2)\n{\n  signed __int64 result; // rax\n\n  if ( *(_DWORD *)a1 < *(_DWORD *)a2 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = *(_DWORD *)a1 > *(_DWORD *)a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x17b70L", 
            "funcEndAddr": "0x17b86L", 
            "funcName": "compar"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17B90(int a1, unsigned int a2, int a3)\n{\n  int v3; // er13\n  __int64 v4; // rbx\n  unsigned __int64 *v5; // r14\n  __int64 *v6; // r12\n  _QWORD *v7; // rax\n  unsigned __int64 *v8; // rax\n\n  v3 = a3;\n  v4 = sub_11440(1uLL, 0x58uLL, 0LL);\n  if ( a2 >> (v3 - 1) != 1 )\n    __assert_fail(\"first >> (nfirst-1) == 1\", \"primecandidate.c\", 0x2Fu, \"pcs_new_with_firstbits\");\n  *(_DWORD *)v4 = a1;\n  *(_BYTE *)(v4 + 4) = 0;\n  *(_BYTE *)(v4 + 5) = 0;\n  *(_BYTE *)(v4 + 6) = 0;\n  *(_BYTE *)(v4 + 7) = 0;\n  *(_QWORD *)(v4 + 64) = 0LL;\n  *(_QWORD *)(v4 + 80) = 0LL;\n  *(_QWORD *)(v4 + 72) = 0LL;\n  *(_QWORD *)(v4 + 40) = 0LL;\n  *(_QWORD *)(v4 + 56) = 0LL;\n  *(_QWORD *)(v4 + 48) = 0LL;\n  v5 = sub_12FA0(a2);\n  v6 = sub_14A50(v5, (unsigned int)(a1 - v3));\n  sub_12FF0(v5);\n  sub_13450((unsigned __int64 *)v6, 0LL, 1);\n  v7 = sub_12FA0(2LL);\n  *(_QWORD *)(v4 + 24) = v6;\n  *(_QWORD *)(v4 + 16) = v7;\n  v8 = sub_16870((unsigned int)(a1 - v3 - 1));\n  *(_QWORD *)(v4 + 32) = 1LL;\n  *(_QWORD *)(v4 + 8) = v8;\n  return v4;\n}\n", 
            "funcStartAddr": "0x17b90L", 
            "funcEndAddr": "0x17c8bL", 
            "funcName": "sub_17B90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_17C90(int a1)\n{\n  return sub_17B90(a1, 1u, 1);\n}\n", 
            "funcStartAddr": "0x17c90L", 
            "funcEndAddr": "0x17c9fL", 
            "funcName": "sub_17C90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_17CA0(__int64 a1)\n{\n  __int64 v1; // rbp\n  unsigned __int64 v2; // rbx\n  _QWORD *v3; // rdi\n\n  v1 = a1;\n  sub_12FF0(*(_QWORD **)(a1 + 8));\n  sub_12FF0(*(_QWORD **)(a1 + 16));\n  sub_12FF0(*(_QWORD **)(a1 + 24));\n  if ( *(_QWORD *)(a1 + 72) )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = *(_QWORD **)(*(_QWORD *)(v1 + 64) + 8 * v2++);\n      sub_12FF0(v3);\n    }\n    while ( *(_QWORD *)(v1 + 72) > v2 );\n  }\n  sub_114C0(*(void **)(v1 + 40));\n  sub_114C0(*(void **)(v1 + 64));\n  sub_114C0((void *)v1);\n}\n", 
            "funcStartAddr": "0x17ca0L", 
            "funcEndAddr": "0x17d07L", 
            "funcName": "sub_17CA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_17D30(unsigned __int64 **a1, __int64 *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 **v3; // rbx\n  unsigned __int64 *v4; // r14\n  __int64 *v5; // rbp\n  unsigned __int64 *v6; // r15\n  unsigned __int64 *v7; // r12\n  unsigned __int64 *v8; // r15\n  __int64 *v9; // r12\n  __int64 *v10; // ST18_8\n  unsigned __int64 *v11; // r13\n  unsigned __int64 *v12; // ST08_8\n  unsigned __int64 *v13; // ST10_8\n  unsigned __int64 *v14; // r13\n  __int64 *v15; // rbp\n  unsigned __int64 *v16; // r15\n  unsigned __int64 *v17; // rbp\n  unsigned __int64 *v18; // rbp\n  unsigned __int64 *v19; // rax\n  unsigned __int64 *v20; // rdi\n  unsigned __int64 *v21; // rax\n  unsigned __int64 *v22; // rdi\n\n  v3 = a1;\n  v4 = sub_15EB0(a3, a2);\n  v5 = sub_156D0((unsigned __int64 *)a2, a1[2]);\n  v6 = sub_15EB0(a1[3], v5);\n  v7 = sub_15EB0(v4, v5);\n  if ( !(unsigned int)sub_14030(v6, v7) )\n    __assert_fail(\"mp_cmp_eq(test1, test2)\", \"primecandidate.c\", 0x7Cu, \"pcs_require_residue_inner\");\n  sub_12FF0(v6);\n  sub_12FF0(v7);\n  v8 = sub_15E80((__int64 *)a1[2], v5);\n  v9 = (__int64 *)sub_15E80(a2, v5);\n  v10 = (__int64 *)sub_164D0(v4, a1[3], a2);\n  v11 = sub_15E80(v10, v5);\n  v12 = v11;\n  v13 = sub_154D0(v8, v9);\n  v14 = sub_161D0(v11, v13, v9);\n  sub_12FF0(v5);\n  sub_12FF0(v10);\n  sub_12FF0(v13);\n  sub_12FF0(v8);\n  sub_12FF0(v12);\n  if ( (unsigned int)sub_13D30(v14, a1[1]) )\n    __assert_fail(\"!mp_cmp_hs(K, s->limit)\", \"primecandidate.c\", 0xAFu, \"pcs_require_residue_inner\");\n  v15 = (__int64 *)sub_140F0(a1[1], (unsigned __int64 *)v9);\n  sub_13A10(v15, (unsigned __int64 *)v15, 1LL);\n  sub_137D0(v15, v15, v14);\n  sub_12FF0(a1[1]);\n  a1[1] = sub_15E80(v15, v9);\n  sub_12FF0(v15);\n  v16 = a1[3];\n  v17 = sub_141F0(a1[2], v14);\n  a1[3] = (unsigned __int64 *)sub_140F0(a1[3], v17);\n  sub_12FF0(v17);\n  sub_12FF0(v16);\n  v18 = a1[2];\n  a1[2] = sub_141F0(a1[2], (unsigned __int64 *)v9);\n  sub_12FF0(v18);\n  sub_12FF0(v9);\n  sub_12FF0(v14);\n  v19 = sub_16E50(a1[2]);\n  v20 = a1[3];\n  v3[2] = v19;\n  v21 = sub_16E50(v20);\n  v22 = v3[1];\n  v3[3] = v21;\n  v3[1] = sub_16E50(v22);\n  sub_12FF0(v4);\n}\n", 
            "funcStartAddr": "0x17d30L", 
            "funcEndAddr": "0x17f71L", 
            "funcName": "sub_17D30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_17F80(unsigned __int64 **a1, __int64 *a2)\n{\n  unsigned __int64 *v2; // rbx\n\n  v2 = sub_12FA0(1LL);\n  sub_17D30(a1, a2, v2);\n  sub_12FF0(v2);\n}\n", 
            "funcStartAddr": "0x17f80L", 
            "funcEndAddr": "0x17fb1L", 
            "funcName": "sub_17F80"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_17FC0(__int64 a1, __int64 *a2)\n{\n  char *v2; // rax\n  __int64 v3; // rdx\n  char *v4; // rbx\n  _QWORD *result; // rax\n\n  sub_17F80((unsigned __int64 **)a1, a2);\n  v2 = (char *)sub_114E0(*(void **)(a1 + 64), (unsigned __int64 *)(a1 + 80), 8uLL, *(_QWORD *)(a1 + 72), 1uLL, 0);\n  v3 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 64) = v2;\n  *(_QWORD *)(a1 + 72) = v3 + 1;\n  v4 = &v2[8 * v3];\n  result = sub_133C0((__int64)a2);\n  *(_QWORD *)v4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x17fc0L", 
            "funcEndAddr": "0x18016L", 
            "funcName": "sub_17FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18020(__int64 a1, unsigned int a2, unsigned int a3)\n{\n  __int64 result; // rax\n\n  if ( *(_DWORD *)(a1 + 36) )\n    __assert_fail(\"!s->avoid_modulus\", \"primecandidate.c\", 0xEAu, \"pcs_avoid_residue_small\");\n  *(_DWORD *)(a1 + 36) = a2;\n  result = a3 / a2;\n  *(_DWORD *)(a1 + 32) = a3 % a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x18020L", 
            "funcEndAddr": "0x18057L", 
            "funcName": "sub_18020"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18060(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // er12\n  __int64 v3; // rbx\n  __int16 *v4; // rbp\n  unsigned __int64 v5; // rsi\n  void *v6; // rdi\n  __int16 *v7; // r13\n  __int16 *v8; // r15\n  char *v9; // rax\n  __int64 v10; // rsi\n  unsigned int v11; // edx\n  char *v12; // rax\n  __int64 v13; // r15\n  unsigned __int64 v14; // r12\n  __int64 v15; // rcx\n  __int64 v16; // r14\n  __int64 v17; // r8\n  unsigned int *v18; // rax\n  __int64 v19; // rbp\n  __int64 v20; // r9\n  int v21; // er13\n  __int64 v22; // ST08_8\n  unsigned int v23; // eax\n  __int64 v24; // r9\n  __int64 v25; // rcx\n  __int64 v26; // rax\n  signed __int64 v27; // rdi\n  signed __int64 v28; // rsi\n  __int64 v29; // rdx\n  signed __int64 v30; // rdi\n  signed __int64 v31; // r10\n  signed __int64 v32; // rdx\n  _DWORD *v33; // rax\n  bool v34; // cf\n  bool v35; // zf\n  char *v36; // rax\n  __int64 v37; // rsi\n  char *v38; // rcx\n  char *v39; // rax\n  __int64 v40; // rsi\n  int v41; // edx\n  char *v42; // rax\n\n  v2 = 0x10000;\n  v3 = a1;\n  sub_18520(a1, a2);\n  if ( !(unsigned int)sub_13FC0(*(signed __int64 **)(a1 + 24), 0x10000LL) )\n    v2 = sub_13420(*(_QWORD **)(a1 + 24));\n  v4 = &word_262080;\n  v5 = *(_QWORD *)(a1 + 48);\n  v6 = *(void **)(a1 + 40);\n  v7 = &word_262080 + 6542;\n  v8 = &word_262080;\n  do\n  {\n    if ( (unsigned __int16)*v8 >= v2 )\n      break;\n    ++v8;\n    v9 = (char *)sub_114E0(v6, (unsigned __int64 *)(v3 + 56), 8uLL, v5, 1uLL, 0);\n    v10 = *(_QWORD *)(v3 + 48);\n    v11 = (unsigned __int16)*(v8 - 1);\n    v6 = v9;\n    *(_QWORD *)(v3 + 40) = v9;\n    v12 = &v9[8 * v10];\n    v5 = v10 + 1;\n    *(_QWORD *)v12 = v11;\n    *(_QWORD *)(v3 + 48) = v5;\n  }\n  while ( v7 != v8 );\n  if ( !*(_BYTE *)(v3 + 5) )\n  {\nLABEL_7:\n    if ( !*(_DWORD *)(v3 + 36) )\n      goto LABEL_8;\n    goto LABEL_28;\n  }\n  while ( (unsigned __int16)*v4 < v2 )\n  {\n    if ( *v4 != 2 )\n    {\n      v36 = (char *)sub_114E0(v6, (unsigned __int64 *)(v3 + 56), 8uLL, v5, 1uLL, 0);\n      v37 = *(_QWORD *)(v3 + 48);\n      *(_QWORD *)(v3 + 40) = v36;\n      v6 = v36;\n      v38 = &v36[8 * v37];\n      LODWORD(v36) = (unsigned __int16)*v4;\n      v5 = v37 + 1;\n      *(_DWORD *)v38 = (_DWORD)v36;\n      *((_DWORD *)v38 + 1) = ((signed int)v36 - 1) / 2;\n      *(_QWORD *)(v3 + 48) = v5;\n    }\n    ++v4;\n    if ( v7 == v4 )\n      goto LABEL_7;\n  }\n  if ( *(_DWORD *)(v3 + 36) )\n  {\nLABEL_28:\n    v39 = (char *)sub_114E0(v6, (unsigned __int64 *)(v3 + 56), 8uLL, v5, 1uLL, 0);\n    v40 = *(_QWORD *)(v3 + 48);\n    v41 = *(_DWORD *)(v3 + 36);\n    v6 = v39;\n    *(_QWORD *)(v3 + 40) = v39;\n    v42 = &v39[8 * v40];\n    v5 = v40 + 1;\n    *(_DWORD *)v42 = v41;\n    *((_DWORD *)v42 + 1) = *(_DWORD *)(v3 + 32);\n    *(_QWORD *)(v3 + 48) = v5;\n  }\nLABEL_8:\n  qsort(v6, v5, 8uLL, (__compar_fn_t)compar);\n  v13 = *(_QWORD *)(v3 + 48);\n  if ( v13 )\n  {\n    v14 = 0LL;\n    v13 = 0LL;\n    v15 = 0LL;\n    v16 = 0LL;\n    v17 = 0LL;\n    do\n    {\n      while ( 1 )\n      {\n        v18 = (unsigned int *)(*(_QWORD *)(v3 + 40) + 8 * v14);\n        v19 = *v18;\n        v20 = v18[1];\n        v21 = *v18;\n        if ( v19 != v15 )\n        {\n          v22 = v18[1];\n          v16 = (unsigned int)sub_16ED0(*(unsigned __int64 **)(v3 + 24), v19);\n          v23 = sub_16ED0(*(unsigned __int64 **)(v3 + 16), v19);\n          v20 = v22;\n          v17 = v23;\n        }\n        if ( !v17 )\n          break;\n        v24 = v20 - v16;\n        v25 = v17;\n        v26 = v19;\n        v27 = 0LL;\n        v28 = 1LL;\n        while ( 1 )\n        {\n          v29 = v26 % v25;\n          v30 = v27 - v28 * (v26 / v25);\n          v26 = v25;\n          v31 = v30;\n          v27 = v28;\n          if ( !v29 )\n            break;\n          v28 = v31;\n          v25 = v29;\n        }\n        if ( v25 != 1 )\n          __assert_fail(\"v1 == 1 || v1 == -1\", \"primecandidate.c\", 0xFFu, \"invert\");\n        v15 = v19;\n        v32 = v24 * v28 % v19;\n        if ( v32 < 0 )\n          LODWORD(v32) = v32 + v19;\n        ++v14;\n        v33 = (_DWORD *)(*(_QWORD *)(v3 + 40) + 8 * v13++);\n        v34 = *(_QWORD *)(v3 + 48) < v14;\n        v35 = *(_QWORD *)(v3 + 48) == v14;\n        *v33 = v21;\n        v33[1] = v32;\n        if ( v34 || v35 )\n          goto LABEL_22;\n      }\n      if ( v16 == v20 )\n        __assert_fail(\"res != addend_m\", \"primecandidate.c\", 0x15Du, \"pcs_ready\");\n      ++v14;\n      v15 = v19;\n    }\n    while ( *(_QWORD *)(v3 + 48) > v14 );\n  }\nLABEL_22:\n  *(_QWORD *)(v3 + 48) = v13;\n  *(_BYTE *)(v3 + 4) = 1;\n}\n", 
            "funcStartAddr": "0x18060L", 
            "funcEndAddr": "0x18347L", 
            "funcName": "sub_18060"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_18350(unsigned int *a1)\n{\n  unsigned __int64 *v1; // r13\n  unsigned __int64 v2; // rbx\n  __int64 v3; // rcx\n  __int64 v4; // rax\n  unsigned int *v5; // rdx\n  __int64 v6; // r12\n  __int64 v7; // r14\n  unsigned __int64 *v8; // rbx\n\n  if ( !*((_BYTE *)a1 + 4) )\n    __assert_fail(\"s->ready\", \"primecandidate.c\", 0x172u, \"pcs_generate\");\n  if ( *((_BYTE *)a1 + 6) )\n  {\n    if ( *((_BYTE *)a1 + 7) )\n      return 0LL;\n    *((_BYTE *)a1 + 7) = 1;\n  }\n  while ( 1 )\n  {\n    v1 = sub_16D90(*((__int64 **)a1 + 1), (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n    if ( !*((_QWORD *)a1 + 6) )\n      break;\n    v2 = 0LL;\n    v3 = 0LL;\n    v4 = 0LL;\n    while ( 1 )\n    {\n      v5 = (unsigned int *)(*((_QWORD *)a1 + 5) + 8 * v2);\n      v6 = *v5;\n      v7 = v5[1];\n      if ( v3 != v6 )\n        v4 = (unsigned int)sub_16ED0(v1, *v5);\n      if ( v4 == v7 )\n        break;\n      ++v2;\n      v3 = v6;\n      if ( *((_QWORD *)a1 + 6) <= v2 )\n        goto LABEL_12;\n    }\n    sub_12FF0(v1);\n  }\nLABEL_12:\n  v8 = sub_12F90(*a1);\n  sub_14190(v8, v1, *((unsigned __int64 **)a1 + 2));\n  sub_137A0((__int64 *)v8, v8, *((unsigned __int64 **)a1 + 3));\n  sub_12FF0(v1);\n  return v8;\n}\n", 
            "funcStartAddr": "0x18350L", 
            "funcEndAddr": "0x18440L", 
            "funcName": "sub_18350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18490(unsigned int *a1)\n{\n  return *a1;\n}\n", 
            "funcStartAddr": "0x18490L", 
            "funcEndAddr": "0x18493L", 
            "funcName": "sub_18490"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_184A0(__int64 a1)\n{\n  return sub_134B0(*(__int64 **)(a1 + 8));\n}\n", 
            "funcStartAddr": "0x184a0L", 
            "funcEndAddr": "0x184b2L", 
            "funcName": "sub_184A0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_184C0(unsigned __int64 **a1)\n{\n  unsigned __int64 *v1; // r12\n  __int64 *v2; // rbp\n\n  v1 = sub_141F0(a1[1], a1[2]);\n  v2 = (__int64 *)sub_140F0(v1, a1[3]);\n  sub_12FF0(v1);\n  sub_137D0(v2, v2, a1[2]);\n  return v2;\n}\n", 
            "funcStartAddr": "0x184c0L", 
            "funcEndAddr": "0x18505L", 
            "funcName": "sub_184C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18510(__int64 a1, _QWORD *a2)\n{\n  *a2 = *(_QWORD *)(a1 + 72);\n  return *(_QWORD *)(a1 + 64);\n}\n", 
            "funcStartAddr": "0x18510L", 
            "funcEndAddr": "0x1851cL", 
            "funcName": "sub_18510"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_18520()\n{\n  __int64 *v0; // rax\n  signed __int64 v1; // rdx\n  unsigned __int64 i; // rax\n  signed __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n  __int64 result; // rax\n  unsigned __int64 v6; // rt1\n  __int64 v7; // [rsp+0h] [rbp-10018h]\n  _BYTE v8[6]; // [rsp+2h] [rbp-10016h]\n  __int64 v9; // [rsp+10000h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+10008h] [rbp-10h]\n\n  v10 = __readfsqword(0x28u);\n  if ( !word_262080[0] )\n  {\n    v0 = (__int64 *)v8;\n    do\n    {\n      *(_BYTE *)v0 = 1;\n      v0 = (__int64 *)((char *)v0 + 1);\n    }\n    while ( v0 != &v9 );\n    v1 = 2LL;\n    do\n    {\n      if ( *((_BYTE *)&v7 + v1) )\n      {\n        for ( i = 2 * v1; i <= 0xFFFF; i += v1 )\n          *((_BYTE *)&v7 + i) = 0;\n      }\n      ++v1;\n    }\n    while ( v1 != 0x10000 );\n    v3 = 2LL;\n    v4 = 0LL;\n    do\n    {\n      if ( *((_BYTE *)&v7 + v3) )\n      {\n        if ( v4 > 0x198D )\n          __assert_fail(\"pos < NSMALLPRIMES\", \"smallprimes.c\", 0x26u, \"init_smallprimes\");\n        word_262080[v4++] = v3;\n      }\n      ++v3;\n    }\n    while ( v3 != 0x10000 );\n    if ( v4 != 6542 )\n      goto LABEL_21;\n  }\n  v6 = __readfsqword(0x28u);\n  result = v6 ^ v10;\n  if ( v6 != v10 )\nLABEL_21:\n    __assert_fail(\"pos == NSMALLPRIMES\", \"smallprimes.c\", 0x2Bu, \"init_smallprimes\");\n  return result;\n}\n", 
            "funcStartAddr": "0x18520L", 
            "funcEndAddr": "0x1864aL", 
            "funcName": "sub_18520"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_18650(__int64 a1, unsigned __int64 *a2)\n{\n  signed __int64 result; // rax\n\n  *(_QWORD *)(a1 - 88) = _byteswap_uint64(a2[1]);\n  *(_QWORD *)(a1 - 80) = _byteswap_uint64(*a2);\n  result = a1 - 8;\n  *(_QWORD *)(a1 - 8) = a1 - 8;\n  return result;\n}\n", 
            "funcStartAddr": "0x18650L", 
            "funcEndAddr": "0x1866eL", 
            "funcName": "sub_18650"
        }, 
        {
            "decompiledFuncCode": "bool sub_18670()\n{\n  _RAX = 1LL;\n  __asm { cpuid }\n  return (_RCX & 0x2080000) == 34078720;\n}\n", 
            "funcStartAddr": "0x18670L", 
            "funcEndAddr": "0x18689L", 
            "funcName": "sub_18670"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_18690(__int64 a1)\n{\n  __int64 (***v1)(void); // rsi\n  __int64 (**v2)(void); // rdi\n  __int64 result; // rax\n  bool v4; // al\n  __int64 (**v5)(void); // rdi\n\n  v1 = *(__int64 (****)(void))(a1 + 104);\n  if ( byte_26539D )\n  {\n    v2 = v1[1];\n    if ( !byte_26539C )\n      v2 = *v1;\n    result = (*v2)();\n  }\n  else\n  {\n    v4 = sub_18670();\n    v5 = v1[1];\n    if ( !v4 )\n      v5 = *v1;\n    byte_26539C = v4;\n    byte_26539D = 1;\n    result = (*v5)();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x18690L", 
            "funcEndAddr": "0x186d9L", 
            "funcName": "sub_18690"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_186E0(__int64 a1, const __m128i *a2)\n{\n  *(__m128i *)(a1 - 24) = _mm_loadu_si128(a2);\n}\n", 
            "funcStartAddr": "0x186e0L", 
            "funcEndAddr": "0x186e9L", 
            "funcName": "sub_186E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_186F0(__int64 a1, const __m128i *a2)\n{\n  *(__m128i *)(a1 - 88) = _mm_loadu_si128(a2);\n}\n", 
            "funcStartAddr": "0x186f0L", 
            "funcEndAddr": "0x186f9L", 
            "funcName": "sub_186F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18700(__int64 a1)\n{\n  sub_47E30(a1 - 1296, 1304LL);\n  sub_114C0((void *)(a1 - 1296));\n}\n", 
            "funcStartAddr": "0x18700L", 
            "funcEndAddr": "0x1871eL", 
            "funcName": "sub_18700"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18720(__int64 a1)\n{\n  void *v1; // rbx\n\n  v1 = *(void **)(a1 - 8);\n  sub_47E30(a1 - 504, 512LL);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x18720L", 
            "funcEndAddr": "0x1873fL", 
            "funcName": "sub_18720"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_18740(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x518uLL, 0LL);\n  *(_QWORD *)(v1 + 1296) = a1;\n  return v1 + 1296;\n}\n", 
            "funcStartAddr": "0x18740L", 
            "funcEndAddr": "0x18764L", 
            "funcName": "sub_18740"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_18770(__int64 a1)\n{\n  char v1; // al\n  __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n\n  v1 = byte_26539C;\n  if ( !byte_26539D )\n  {\n    v1 = sub_18670();\n    byte_26539D = 1;\n    byte_26539C = v1;\n  }\n  if ( !v1 )\n    return 0LL;\n  v2 = sub_11440(0x20FuLL, 1uLL, 0LL);\n  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0LL;\n  *(_QWORD *)(v3 + 496) = v2;\n  *(_QWORD *)(v3 + 504) = a1;\n  return v3 + 504;\n}\n", 
            "funcStartAddr": "0x18770L", 
            "funcEndAddr": "0x187d4L", 
            "funcName": "sub_18770"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_187E0(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n  __m128i v4; // xmm2\n  __m128i v5; // xmm1\n  __m128i v17; // xmm0\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      v5 = _mm_loadu_si128((const __m128i *)(a2 - 16));\n      _XMM0 = _mm_xor_si128(_mm_load_si128((const __m128i *)(_RDI - 264)), v5);\n      __asm\n      {\n        aesdec  xmm0, xmmword ptr [rdi-0F8h]\n        aesdec  xmm0, xmmword ptr [rdi-0E8h]\n        aesdec  xmm0, xmmword ptr [rdi-0D8h]\n        aesdec  xmm0, xmmword ptr [rdi-0C8h]\n        aesdec  xmm0, xmmword ptr [rdi-0B8h]\n        aesdec  xmm0, xmmword ptr [rdi-0A8h]\n        aesdec  xmm0, xmmword ptr [rdi-98h]\n        aesdec  xmm0, xmmword ptr [rdi-88h]\n        aesdec  xmm0, xmmword ptr [rdi-78h]\n        aesdeclast xmm0, xmmword ptr [rdi-68h]\n      }\n      v17 = _mm_xor_si128(_XMM0, v4);\n      v4 = v5;\n      *(__m128i *)(a2 - 16) = v17;\n      *(__m128i *)(_RDI - 24) = v5;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x187e0L", 
            "funcEndAddr": "0x18880L", 
            "funcName": "sub_187E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18880(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n  __m128i v4; // xmm2\n  __m128i v5; // xmm1\n  __m128i v19; // xmm0\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      v5 = _mm_loadu_si128((const __m128i *)(a2 - 16));\n      _XMM0 = _mm_xor_si128(_mm_load_si128((const __m128i *)(_RDI - 264)), v5);\n      __asm\n      {\n        aesdec  xmm0, xmmword ptr [rdi-0F8h]\n        aesdec  xmm0, xmmword ptr [rdi-0E8h]\n        aesdec  xmm0, xmmword ptr [rdi-0D8h]\n        aesdec  xmm0, xmmword ptr [rdi-0C8h]\n        aesdec  xmm0, xmmword ptr [rdi-0B8h]\n        aesdec  xmm0, xmmword ptr [rdi-0A8h]\n        aesdec  xmm0, xmmword ptr [rdi-98h]\n        aesdec  xmm0, xmmword ptr [rdi-88h]\n        aesdec  xmm0, xmmword ptr [rdi-78h]\n        aesdec  xmm0, xmmword ptr [rdi-68h]\n        aesdec  xmm0, xmmword ptr [rdi-58h]\n        aesdeclast xmm0, xmmword ptr [rdi-48h]\n      }\n      v19 = _mm_xor_si128(_XMM0, v4);\n      v4 = v5;\n      *(__m128i *)(a2 - 16) = v19;\n      *(__m128i *)(_RDI - 24) = v5;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18880L", 
            "funcEndAddr": "0x18930L", 
            "funcName": "sub_18880"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18930(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n  __m128i v4; // xmm2\n  __m128i v5; // xmm1\n  __m128i v21; // xmm0\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      v5 = _mm_loadu_si128((const __m128i *)(a2 - 16));\n      _XMM0 = _mm_xor_si128(_mm_load_si128((const __m128i *)(_RDI - 264)), v5);\n      __asm\n      {\n        aesdec  xmm0, xmmword ptr [rdi-0F8h]\n        aesdec  xmm0, xmmword ptr [rdi-0E8h]\n        aesdec  xmm0, xmmword ptr [rdi-0D8h]\n        aesdec  xmm0, xmmword ptr [rdi-0C8h]\n        aesdec  xmm0, xmmword ptr [rdi-0B8h]\n        aesdec  xmm0, xmmword ptr [rdi-0A8h]\n        aesdec  xmm0, xmmword ptr [rdi-98h]\n        aesdec  xmm0, xmmword ptr [rdi-88h]\n        aesdec  xmm0, xmmword ptr [rdi-78h]\n        aesdec  xmm0, xmmword ptr [rdi-68h]\n        aesdec  xmm0, xmmword ptr [rdi-58h]\n        aesdec  xmm0, xmmword ptr [rdi-48h]\n        aesdec  xmm0, xmmword ptr [rdi-38h]\n        aesdeclast xmm0, xmmword ptr [rdi-28h]\n      }\n      v21 = _mm_xor_si128(_XMM0, v4);\n      v4 = v5;\n      *(__m128i *)(a2 - 16) = v21;\n      *(__m128i *)(_RDI - 24) = v5;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18930L", 
            "funcEndAddr": "0x189ecL", 
            "funcName": "sub_18930"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_189F0(__int64 a1, __int64 a2)\n{\n  int v2; // eax\n  int v3; // ebx\n  unsigned __int64 v4; // rbx\n  signed __int64 v5; // r9\n  unsigned int v6; // er10\n  unsigned __int64 v7; // rcx\n  int v8; // er8\n  unsigned __int64 v9; // rdx\n  int v12; // eax\n  __int64 v13; // rdx\n  __int64 *v14; // rax\n  signed __int64 v15; // rdx\n  __m128i v16; // xmm1\n  signed __int64 v17; // rbp\n  __int64 v19; // rax\n  __int64 v23; // [rsp+0h] [rbp-138h]\n  unsigned __int64 v24; // [rsp+F8h] [rbp-40h]\n\n  v24 = __readfsqword(0x28u);\n  v2 = *(_DWORD *)(*(_QWORD *)a1 + 76LL);\n  v3 = v2 + 31;\n  if ( v2 >= 0 )\n    v3 = *(_DWORD *)(*(_QWORD *)a1 + 76LL);\n  v4 = v3 >> 5;\n  v5 = 4 * (v4 + 7);\n  if ( v5 )\n  {\n    v6 = 0;\n    v7 = 0LL;\n    do\n    {\n      while ( v4 > v7 )\n      {\n        *((_DWORD *)&v23 + v7) = *(_DWORD *)(a2 + 4 * v7);\n        if ( v5 == ++v7 )\n          goto LABEL_12;\n      }\n      v8 = *((_DWORD *)&v23 + v7 - 1);\n      v9 = v7 % v4;\n      if ( v4 != 8 || (v7 & 7) != 4 )\n      {\n        if ( !v9 )\n          goto LABEL_9;\n      }\n      else\n      {\n        _XMM0 = _mm_insert_epi32((__m128i)0LL, v8, 1);\n        __asm { aeskeygenassist xmm0, xmm0, 0 }\n        if ( !v9 )\n        {\nLABEL_9:\n          _XMM0 = _mm_insert_epi32((__m128i)0LL, v8, 1);\n          __asm { aeskeygenassist xmm0, xmm0, 0 }\n          v12 = _mm_extract_epi32(_XMM0, 1);\n          if ( v6 > 9 )\n            __assert_fail(\"rconpos < lenof(key_setup_round_constants)\", \"sshaes.c\", 0x556u, \"aes_ni_key_expand\");\n          v13 = v6++;\n          v8 = v12 ^ byte_4C988[v13];\n          goto LABEL_11;\n        }\n        v8 = _mm_cvtsi128_si32(_XMM0);\n      }\nLABEL_11:\n      *((_DWORD *)&v23 + v7) = *((_DWORD *)&v23 + v7 - v4) ^ v8;\n      ++v7;\n    }\n    while ( v5 != v7 );\n  }\nLABEL_12:\n  v14 = &v23;\n  v15 = a1 - 504;\n  do\n  {\n    v16 = _mm_cvtsi32_si128(*((_DWORD *)v14 + 2));\n    v14 += 2;\n    v15 += 16LL;\n    *(__m128i *)(v15 - 16) = _mm_unpacklo_epi64(\n                               _mm_insert_epi32(_mm_cvtsi32_si128(*((_DWORD *)v14 - 4)), *((_DWORD *)v14 - 3), 1),\n                               _mm_insert_epi32(v16, *((_DWORD *)v14 - 1), 1));\n  }\n  while ( &v23 + 2 * v4 + 14 != v14 );\n  v17 = 16 * v4 + a1 - 504 + 240;\n  sub_47E30(&v23, 240LL);\n  _XMM0 = _mm_load_si128((const __m128i *)(a1 - 504));\n  v19 = 0LL;\n  while ( 1 )\n  {\n    ++v19;\n    *(__m128i *)(v17 + 96) = _XMM0;\n    if ( v4 + 7 == v19 )\n      break;\n    _XMM0 = _mm_load_si128((const __m128i *)(a1 - 504 + 16 * v19));\n    if ( v4 + 6 - v19 )\n      __asm { aesimc  xmm0, xmm0 }\n    v17 -= 16LL;\n  }\n  return __readfsqword(0x28u) ^ v24;\n}\n", 
            "funcStartAddr": "0x189f0L", 
            "funcEndAddr": "0x18c08L", 
            "funcName": "sub_189F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18C10(__int64 a1, const __m128i *a2)\n{\n  *(__m128i *)(a1 - 24) = _mm_shuffle_epi8(_mm_loadu_si128(a2), (__m128i)xmmword_4C9A0);\n}\n", 
            "funcStartAddr": "0x18c10L", 
            "funcEndAddr": "0x18c22L", 
            "funcName": "sub_18C10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18C30(__int64 _RDI, const __m128i *a2, int a3)\n{\n  const __m128i *v3; // rdx\n  __m128i v4; // xmm0\n  __m128i v5; // xmm3\n  __m128i v6; // xmm2\n  __m128i v7; // xmm6\n  __m128i v19; // xmm0\n\n  v3 = (const __m128i *)((char *)a2 + a3);\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    v5 = _mm_load_si128((const __m128i *)&xmmword_4C9A0);\n    v6 = _mm_load_si128((const __m128i *)&xmmword_4C9B0);\n    do\n    {\n      v7 = _mm_loadu_si128(a2);\n      ++a2;\n      _XMM0 = _mm_xor_si128(_mm_shuffle_epi8(v4, v5), *(__m128i *)(_RDI - 504));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenclast xmm0, xmmword ptr [rdi-158h]\n      }\n      a2[-1] = _mm_xor_si128(_XMM0, v7);\n      v19 = _mm_add_epi64(_mm_load_si128((const __m128i *)(_RDI - 24)), v6);\n      v4 = _mm_sub_epi64(v19, _mm_unpacklo_epi64((__m128i)0LL, _mm_cmpeq_epi64(v19, (__m128i)0LL)));\n      *(__m128i *)(_RDI - 24) = v4;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18c30L", 
            "funcEndAddr": "0x18d04L", 
            "funcName": "sub_18C30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18D10(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    _XMM0 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      _XMM0 = _mm_xor_si128(_mm_xor_si128(_XMM0, *(__m128i *)(_RDI - 504)), _mm_loadu_si128((const __m128i *)(a2 - 16)));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenclast xmm0, xmmword ptr [rdi-158h]\n      }\n      *(__m128i *)(a2 - 16) = _XMM0;\n      *(__m128i *)(_RDI - 24) = _XMM0;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18d10L", 
            "funcEndAddr": "0x18daeL", 
            "funcName": "sub_18D10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18DB0(__int64 _RDI, const __m128i *a2, int a3)\n{\n  const __m128i *v3; // rdx\n  __m128i v4; // xmm0\n  __m128i v5; // xmm3\n  __m128i v6; // xmm2\n  __m128i v7; // xmm6\n  __m128i v21; // xmm0\n\n  v3 = (const __m128i *)((char *)a2 + a3);\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    v5 = _mm_load_si128((const __m128i *)&xmmword_4C9A0);\n    v6 = _mm_load_si128((const __m128i *)&xmmword_4C9B0);\n    do\n    {\n      v7 = _mm_loadu_si128(a2);\n      ++a2;\n      _XMM0 = _mm_xor_si128(_mm_shuffle_epi8(v4, v5), *(__m128i *)(_RDI - 504));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenc  xmm0, xmmword ptr [rdi-158h]\n        aesenc  xmm0, xmmword ptr [rdi-148h]\n        aesenclast xmm0, xmmword ptr [rdi-138h]\n      }\n      a2[-1] = _mm_xor_si128(_XMM0, v7);\n      v21 = _mm_add_epi64(_mm_load_si128((const __m128i *)(_RDI - 24)), v6);\n      v4 = _mm_sub_epi64(v21, _mm_unpacklo_epi64((__m128i)0LL, _mm_cmpeq_epi64(v21, (__m128i)0LL)));\n      *(__m128i *)(_RDI - 24) = v4;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18db0L", 
            "funcEndAddr": "0x18e96L", 
            "funcName": "sub_18DB0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18EA0(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    _XMM0 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      _XMM0 = _mm_xor_si128(_mm_xor_si128(_XMM0, *(__m128i *)(_RDI - 504)), _mm_loadu_si128((const __m128i *)(a2 - 16)));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenc  xmm0, xmmword ptr [rdi-158h]\n        aesenc  xmm0, xmmword ptr [rdi-148h]\n        aesenclast xmm0, xmmword ptr [rdi-138h]\n      }\n      *(__m128i *)(a2 - 16) = _XMM0;\n      *(__m128i *)(_RDI - 24) = _XMM0;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18ea0L", 
            "funcEndAddr": "0x18f54L", 
            "funcName": "sub_18EA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_18F60(__int64 _RDI, const __m128i *a2, int a3)\n{\n  const __m128i *v3; // rdx\n  __m128i v4; // xmm0\n  __m128i v5; // xmm3\n  __m128i v6; // xmm2\n  __m128i v7; // xmm6\n  __m128i v23; // xmm0\n\n  v3 = (const __m128i *)((char *)a2 + a3);\n  if ( a2 < v3 )\n  {\n    v4 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    v5 = _mm_load_si128((const __m128i *)&xmmword_4C9A0);\n    v6 = _mm_load_si128((const __m128i *)&xmmword_4C9B0);\n    do\n    {\n      v7 = _mm_loadu_si128(a2);\n      ++a2;\n      _XMM0 = _mm_xor_si128(_mm_shuffle_epi8(v4, v5), *(__m128i *)(_RDI - 504));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenc  xmm0, xmmword ptr [rdi-158h]\n        aesenc  xmm0, xmmword ptr [rdi-148h]\n        aesenc  xmm0, xmmword ptr [rdi-138h]\n        aesenc  xmm0, xmmword ptr [rdi-128h]\n        aesenclast xmm0, xmmword ptr [rdi-118h]\n      }\n      a2[-1] = _mm_xor_si128(_XMM0, v7);\n      v23 = _mm_add_epi64(_mm_load_si128((const __m128i *)(_RDI - 24)), v6);\n      v4 = _mm_sub_epi64(v23, _mm_unpacklo_epi64((__m128i)0LL, _mm_cmpeq_epi64(v23, (__m128i)0LL)));\n      *(__m128i *)(_RDI - 24) = v4;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x18f60L", 
            "funcEndAddr": "0x19058L", 
            "funcName": "sub_18F60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_19060(__int64 _RDI, unsigned __int64 a2, int a3)\n{\n  unsigned __int64 v3; // rdx\n\n  v3 = a2 + a3;\n  if ( a2 < v3 )\n  {\n    _XMM0 = _mm_load_si128((const __m128i *)(_RDI - 24));\n    do\n    {\n      a2 += 16LL;\n      _XMM0 = _mm_xor_si128(_mm_xor_si128(_XMM0, *(__m128i *)(_RDI - 504)), _mm_loadu_si128((const __m128i *)(a2 - 16)));\n      __asm\n      {\n        aesenc  xmm0, xmmword ptr [rdi-1E8h]\n        aesenc  xmm0, xmmword ptr [rdi-1D8h]\n        aesenc  xmm0, xmmword ptr [rdi-1C8h]\n        aesenc  xmm0, xmmword ptr [rdi-1B8h]\n        aesenc  xmm0, xmmword ptr [rdi-1A8h]\n        aesenc  xmm0, xmmword ptr [rdi-198h]\n        aesenc  xmm0, xmmword ptr [rdi-188h]\n        aesenc  xmm0, xmmword ptr [rdi-178h]\n        aesenc  xmm0, xmmword ptr [rdi-168h]\n        aesenc  xmm0, xmmword ptr [rdi-158h]\n        aesenc  xmm0, xmmword ptr [rdi-148h]\n        aesenc  xmm0, xmmword ptr [rdi-138h]\n        aesenc  xmm0, xmmword ptr [rdi-128h]\n        aesenclast xmm0, xmmword ptr [rdi-118h]\n      }\n      *(__m128i *)(a2 - 16) = _XMM0;\n      *(__m128i *)(_RDI - 24) = _XMM0;\n    }\n    while ( v3 > a2 );\n  }\n}\n", 
            "funcStartAddr": "0x19060L", 
            "funcEndAddr": "0x19126L", 
            "funcName": "sub_19060"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_19130(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  signed __int64 v4; // r11\n  int v5; // ebp\n  unsigned __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdi\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rdx\n  unsigned __int64 v11; // rax\n  signed __int64 v12; // rdx\n  signed __int64 v13; // rdx\n  signed __int64 v14; // rcx\n  signed __int64 v15; // rdx\n  unsigned __int64 v16; // rcx\n  unsigned __int64 v17; // rax\n  __int64 v18; // rdx\n  int v19; // ecx\n  unsigned __int64 v20; // rax\n  _WORD *v21; // rdx\n  __int64 v22; // rsi\n  __int64 v24; // rax\n  __int64 v25; // rax\n  __int128 *v26; // rsi\n  unsigned __int16 v27; // dx\n  int v28; // edx\n  unsigned __int16 v29; // ST5A_2\n  unsigned __int16 v30; // ST1E_2\n  __int16 v31; // ST7C_2\n  unsigned __int16 v32; // ST58_2\n  int v33; // er12\n  unsigned __int16 v34; // ST5E_2\n  unsigned __int16 v35; // ST5C_2\n  int v36; // eax\n  int v37; // er14\n  int v38; // ecx\n  int v39; // eax\n  int v40; // er12\n  unsigned __int16 v41; // ST7A_2\n  unsigned __int16 v42; // si\n  __int16 v43; // ST80_2\n  int v44; // edx\n  unsigned __int16 v45; // ST60_2\n  int v46; // er15\n  int v47; // ebx\n  __int16 v48; // ST62_2\n  __int16 v49; // ST82_2\n  int v50; // er8\n  int v51; // er12\n  int v52; // er8\n  int v53; // esi\n  int v54; // er14\n  int v55; // esi\n  int v56; // er9\n  int v57; // eax\n  int v58; // er9\n  int v59; // er10\n  int v60; // eax\n  int v61; // er10\n  int v62; // ebx\n  int v63; // esi\n  int v64; // er12\n  int v65; // ebx\n  int v66; // er8\n  int v67; // er14\n  int v68; // er9\n  int v69; // er10\n  int v70; // eax\n  int v71; // esi\n  __int16 v72; // ST64_2\n  int v73; // edx\n  int v74; // er14\n  __int16 v75; // ST78_2\n  __int16 v76; // ST1A_2\n  __int16 v77; // ST5E_2\n  unsigned __int16 v78; // ST58_2\n  __int16 v79; // ST56_2\n  __int16 v80; // ST62_2\n  int v81; // er15\n  int v82; // er12\n  int v83; // er10\n  __int16 v84; // ST7A_2\n  int v85; // esi\n  int v86; // ebx\n  int v87; // er14\n  int v88; // er10\n  int v89; // ebx\n  int v90; // er10\n  int v91; // er8\n  unsigned __int64 v92; // rcx\n  int v93; // eax\n  unsigned __int64 v94; // [rsp+0h] [rbp-100h]\n  unsigned __int64 v95; // [rsp+18h] [rbp-E8h]\n  signed __int64 v96; // [rsp+20h] [rbp-E0h]\n  __int64 v97; // [rsp+28h] [rbp-D8h]\n  unsigned __int64 v98; // [rsp+30h] [rbp-D0h]\n  int v99; // [rsp+48h] [rbp-B8h]\n  char v100; // [rsp+4Dh] [rbp-B3h]\n  unsigned int v101; // [rsp+64h] [rbp-9Ch]\n  __int64 v102; // [rsp+88h] [rbp-78h]\n  unsigned __int16 v103; // [rsp+98h] [rbp-68h]\n  unsigned __int16 v104; // [rsp+9Ah] [rbp-66h]\n  unsigned __int16 v105; // [rsp+9Ch] [rbp-64h]\n  unsigned __int16 v106; // [rsp+9Eh] [rbp-62h]\n  unsigned __int16 v107; // [rsp+A0h] [rbp-60h]\n  unsigned __int16 v108; // [rsp+A2h] [rbp-5Eh]\n  unsigned __int16 v109; // [rsp+A4h] [rbp-5Ch]\n  unsigned __int16 v110; // [rsp+A6h] [rbp-5Ah]\n  __int128 v111; // [rsp+A8h] [rbp-58h]\n  unsigned __int64 v112; // [rsp+C0h] [rbp-40h]\n\n  v112 = __readfsqword(0x28u);\n  v102 = a1;\n  v97 = a2;\n  v94 = (unsigned __int64)*(signed int *)(*(_QWORD *)a1 + 76LL) >> 5;\n  *(_DWORD *)(a1 - 96) = v94 + 6;\n  v2 = a1;\n  v3 = a1 - 1296;\n  v4 = v3 + 960;\n  v96 = v3 + 960;\n  *(_QWORD *)(v2 - 336) = 0LL;\n  *(_QWORD *)(v2 - 104) = 0LL;\n  memset(\n    (void *)((v3 + 968) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((_DWORD)v3 + 960 - (((_DWORD)v3 + 968) & 0xFFFFFFF8) + 240) >> 3));\n  v111 = 0LL;\n  if ( 4 * (_DWORD)v94 == -28 )\n  {\n    sub_47E30(&v111, 16LL);\n    sub_47E30(&v103, 16LL);\n    return __readfsqword(0x28u) ^ v112;\n  }\n  v5 = 0;\n  v100 = 0;\n  v99 = 0;\n  v101 = 0;\n  v6 = *((_QWORD *)&v111 + 1) ^ (*((_QWORD *)&v111 + 1) ^ (*((_QWORD *)&v111 + 1) >> 7)) & 0xAA00AA00AA00AALL ^ (((*((_QWORD *)&v111 + 1) ^ (*((_QWORD *)&v111 + 1) >> 7)) & 0xAA00AA00AA00AALL) << 7);\n  v7 = (v6 ^ (v6 >> 14)) & 0xCCCC0000CCCCLL ^ v6 ^ (((v6 ^ (v6 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n  v8 = 0LL;\n  v9 = ((unsigned int)v7 ^ (unsigned int)(v7 >> 28)) & 0xF0F0F0F0;\n  v98 = v9 ^ v7 ^ (v9 << 28);\n  do\n  {\n    if ( v94 > v8 )\n    {\n      v100 = 1;\n      v99 = *(_DWORD *)(v97 + 4 * v8);\n      v10 = ((unsigned __int64)HIBYTE(v99) << 24) | (unsigned __int8)v99 | (unsigned __int16)v99 & 0xFF00 | ((unsigned __int64)BYTE2(v99) << 16);\n      v11 = (v10 ^ (v10 >> 7)) & 0xAA00AA00AA00AALL ^ v10 ^ (((v10 ^ (v10 >> 7)) & 0xAA00AA00AA00AALL) << 7);\n      v12 = (v11 ^ (v11 >> 14)) & 0xCCCC0000CCCCLL;\n      v17 = ((unsigned __int64)((((_DWORD)v12 << 14) ^ (unsigned int)v12 ^ (unsigned int)v11) & 0xF0F0F0F0) << 28) ^ (((_DWORD)v12 << 14) ^ (unsigned int)v12 ^ (unsigned int)v11) & 0xF0F0F0F0 ^ (v12 << 14) ^ v12 ^ v11;\n      v13 = (v98 ^ (v17 >> 8)) & 0xFF00FF00FF00FFLL;\n      v14 = v13;\n      v15 = v98 ^ v13;\n      v104 = v15;\n      v16 = v17 ^ (v14 << 8);\n      LOBYTE(v17) = v16;\n      v105 = WORD1(v16);\n      v103 = v16;\n      v109 = HIWORD(v16);\n      v107 = WORD2(v16);\n      v106 = WORD1(v15);\n      v110 = HIWORD(v15);\n      v108 = WORD2(v15);\n      goto LABEL_5;\n    }\n    v24 = 0LL;\n    do\n    {\n      *(&v103 + v24) = (signed int)*(unsigned __int16 *)(v96 + 16LL * ((unsigned int)(v8 - 1) >> 2) + 2 * v24) >> 4 * ((v8 - 1) & 3);\n      ++v24;\n    }\n    while ( v24 != 8 );\n    v95 = v8 % v94;\n    if ( !(v8 % v94) )\n    {\n      v26 = (__int128 *)&v103;\n      do\n      {\n        v27 = *(_WORD *)v26;\n        v26 = (__int128 *)((char *)v26 + 2);\n        *((_WORD *)v26 - 1) = ((unsigned __int8)(v27 >> 1) | (unsigned __int8)(8 * v27)) & 0xF;\n      }\n      while ( &v111 != v26 );\n      v95 = 0LL;\nLABEL_29:\n      v28 = v109 ^ v108;\n      v29 = v28 ^ v103 ^ v107;\n      v30 = v110 ^ v104 ^ v105 ^ v107;\n      v31 = v28 ^ v103 ^ v104;\n      v32 = v28 ^ v103;\n      v33 = v110 ^ v107;\n      v34 = v31 ^ v110 ^ v105;\n      v35 = v110 ^ v28 ^ v103;\n      v36 = v30 ^ v106;\n      v37 = v36 ^ v109;\n      v38 = v36 ^ v105;\n      v39 = v33;\n      v40 = v37 ^ v33;\n      v41 = v39;\n      v42 = v28 ^ v38;\n      v43 = v40;\n      v44 = v40 ^ v28;\n      v45 = v42;\n      v46 = (unsigned __int16)(v38 & v30);\n      v47 = (unsigned __int16)(v44 & (v110 ^ v104));\n      v48 = v103 ^ v40;\n      LOWORD(v40) = v40 ^ v42;\n      v49 = v40;\n      v50 = v39 & ~v37;\n      v51 = v50 ^ (unsigned __int16)(v40 & (v105 ^ v107));\n      v52 = (unsigned __int16)(v42 & (v110 ^ v105)) ^ v50;\n      v53 = v46 ^ v37 ^ (v38 ^ v103) & v34;\n      v54 = v29;\n      LOWORD(v54) = v103 & v29;\n      v55 = v51 ^ v53;\n      v56 = v54 ^ (unsigned __int16)(v110 ^ v105);\n      LOWORD(v56) = v45 ^ v56;\n      v57 = ~v104 & v32;\n      LOWORD(v57) = v110 ^ v104 ^ v57;\n      v58 = v52 ^ v46 ^ v56;\n      v59 = v35;\n      LOWORD(v59) = v48 & v35;\n      v60 = v51 ^ v47 ^ v44 ^ v57;\n      v61 = v52 ^ v59 ^ v44 ^ v110 ^ v47;\n      v62 = v55;\n      v63 = v60 & v55;\n      v64 = v58 ^ v62;\n      v65 = v63 ^ v61;\n      v66 = v58 ^ (v63 ^ v61) & v64;\n      v67 = (v63 ^ v58) & (v61 ^ v60);\n      v68 = v67 ^ v61;\n      v69 = (v67 ^ v63) & v61;\n      v70 = v69 ^ v68 ^ v60;\n      v71 = v64 ^ v66 & (v69 ^ v65);\n      v72 = v71 ^ v70;\n      v73 = (v71 ^ v66) & v44;\n      v74 = v68 ^ v66 ^ v71 ^ v70;\n      v75 = v68 & v103;\n      v76 = (v110 ^ v104) & (v71 ^ v66);\n      v77 = v70 & v34;\n      v78 = v71 & v32;\n      v79 = v74 & (v105 ^ v107);\n      v80 = v66 & v48;\n      v81 = (unsigned __int16)(v74 & (v105 ^ v107)) ^ (v68 ^ v66) & v41;\n      v82 = (unsigned __int16)(v68 & v103);\n      LOWORD(v82) = v76 ^ v82;\n      v83 = (unsigned __int16)(v74 & v49);\n      v84 = v31 & v71 ^ v80;\n      v85 = v73 ^ (unsigned __int16)(v38 & (v70 ^ v68));\n      v86 = v45;\n      LOWORD(v86) = v72 & v45;\n      LOWORD(v73) = v83 ^ v43 & (v68 ^ v66) ^ v73;\n      LOWORD(v66) = v35 & v66;\n      v87 = v85 ^ v82;\n      v88 = v86 ^ v83;\n      v89 = v81 ^ v78;\n      v90 = v89 ^ v88;\n      LOWORD(v82) = v89 ^ v77 ^ v30 & (v70 ^ v68);\n      v91 = v90 ^ v87 ^ v66;\n      LOWORD(v81) = v87 ^ v81;\n      LOWORD(v87) = v110 ^ v105;\n      LOWORD(v70) = v82 ^ (v38 ^ v103) & v70;\n      v103 = ~(v84 ^ v81);\n      v107 = v70 ^ v85;\n      v110 = v73 ^ v82;\n      v105 = v91 ^ v77 ^ v29 & v68;\n      v109 = ~(v73 ^ v78 ^ v70 ^ v85);\n      v106 = v80 ^ v75 ^ v70;\n      v108 = ~(v91 ^ v73 ^ v78 ^ v79 ^ v72 & v87);\n      v104 = ~(v90 ^ v84 ^ v76);\n      if ( !(v8 % v94) )\n      {\n        if ( v101 > 9 )\n        {\n          if ( v100 )\n            LODWORD(v111) = v99;\n          __assert_fail(\"rconpos < lenof(key_setup_round_constants)\", \"sshaes.c\", 0x39Du, \"aes_sliced_key_setup\");\n        }\n        v92 = v95;\n        v93 = byte_4C988[v101];\n        do\n        {\n          *(&v103 + v92) ^= (v93 >> v92) & 1;\n          ++v92;\n        }\n        while ( v92 != 8 );\n        ++v101;\n      }\n      goto LABEL_23;\n    }\n    if ( v94 == 8 && (v8 & 7) == 4 )\n      goto LABEL_29;\nLABEL_23:\n    v25 = 0LL;\n    do\n    {\n      *(&v103 + v25) ^= (signed int)*(unsigned __int16 *)(v96 + 16LL * ((unsigned int)(v8 - v94) >> 2) + 2 * v25) >> 4 * ((v8 - v94) & 3);\n      ++v25;\n    }\n    while ( v25 != 8 );\n    LOBYTE(v17) = v103;\nLABEL_5:\n    v18 = 0LL;\n    v19 = v5;\n    while ( 1 )\n    {\n      *(_WORD *)(v4 + v18) |= (v17 & 0xF) << v5;\n      v18 += 2LL;\n      if ( v18 == 16 )\n        break;\n      LOWORD(v17) = *(unsigned __int16 *)((char *)&v103 + v18);\n    }\n    v5 += 4;\n    if ( v19 == 12 )\n    {\n      v4 += 16LL;\n      v5 = 0;\n    }\n    ++v8;\n  }\n  while ( 4 * (_DWORD)v94 + 28 != v8 );\n  if ( v100 )\n    LODWORD(v111) = v99;\n  sub_47E30(&v111, 16LL);\n  sub_47E30(&v103, 16LL);\n  v20 = 8 * (v8 >> 2);\n  if ( v20 <= 8 )\n  {\n    if ( v20 )\n      goto LABEL_16;\n  }\n  else\n  {\n    v21 = (_WORD *)(v102 - 320);\n    do\n    {\n      *v21 = ~*v21;\n      v21[1] = ~v21[1];\n      v21[5] = ~v21[5];\n      v21[6] = ~v21[6];\n      v21 += 8;\n    }\n    while ( (_WORD *)(v102 + 16 * (v8 >> 2) - 336) != v21 );\nLABEL_16:\n    v22 = 0LL;\n    do\n    {\n      *(_QWORD *)(v102 + 8 * v22 - 1296) = 281479271743489LL * *(unsigned __int16 *)(v102 + 2 * v22 - 336);\n      ++v22;\n    }\n    while ( v22 != v20 );\n  }\n  return __readfsqword(0x28u) ^ v112;\n}\n", 
            "funcStartAddr": "0x19130L", 
            "funcEndAddr": "0x19a9aL", 
            "funcName": "sub_19130"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_19AA0(__int64 a1, _QWORD *a2, __int64 a3)\n{\n  unsigned __int64 v3; // rdi\n  unsigned __int64 v4; // rax\n  signed __int64 v5; // r8\n  unsigned __int64 v6; // rdi\n  unsigned __int64 v7; // rax\n  __int64 v8; // r13\n  unsigned __int64 v9; // rsi\n  __int64 v10; // rdi\n  unsigned __int64 v11; // rax\n  signed __int64 v12; // rdi\n  signed __int64 v13; // r13\n  unsigned __int64 v14; // rdi\n  unsigned __int64 v15; // rsi\n  int v16; // er15\n  unsigned __int64 v17; // r11\n  unsigned __int64 v18; // rcx\n  int v19; // er13\n  unsigned __int64 v20; // rax\n  unsigned __int64 v21; // rsi\n  signed __int64 v22; // rbx\n  unsigned __int64 v23; // rdi\n  int v24; // edx\n  signed __int64 v25; // rdx\n  int v26; // ebx\n  int v27; // eax\n  int v28; // er15\n  int v29; // edx\n  int v30; // ebx\n  int v31; // ecx\n  int v32; // er12\n  int v33; // er10\n  __int16 v34; // ST0E_2\n  int v35; // er14\n  int v36; // er8\n  __int16 v37; // ST20_2\n  unsigned __int16 v38; // ST10_2\n  __int16 v39; // ST12_2\n  __int16 v40; // ST22_2\n  unsigned __int16 v41; // ST14_2\n  int v42; // er11\n  __int16 v43; // ST16_2\n  __int16 v44; // dx\n  int v45; // er11\n  unsigned __int16 v46; // r13\n  __int16 v47; // r9\n  __int16 v48; // ST18_2\n  __int16 v49; // si\n  int v50; // edx\n  int v51; // ebp\n  int v52; // ecx\n  int v53; // er15\n  __int16 v54; // si\n  __int16 v55; // ST26_2\n  unsigned __int16 v56; // ST0C_2\n  __int16 v57; // r13\n  __int16 v58; // ST1C_2\n  __int16 v59; // ST24_2\n  int v60; // er14\n  int v61; // esi\n  int v62; // er13\n  int v63; // esi\n  int v64; // er10\n  int v65; // er9\n  int v66; // er11\n  int v67; // eax\n  int v68; // er10\n  int v69; // er9\n  int v70; // er13\n  int v71; // edi\n  int v72; // er11\n  int v73; // er9\n  int v74; // esi\n  int v75; // er9\n  int v76; // er10\n  int v77; // ebp\n  int v78; // edi\n  int v79; // er14\n  int v80; // eax\n  int v81; // er10\n  int v82; // er13\n  __int16 v83; // ST1A_2\n  int v84; // edi\n  int v85; // ebx\n  int v86; // er13\n  __int16 v87; // ST1C_2\n  int v88; // er8\n  unsigned __int16 v89; // ST0E_2\n  int v90; // er14\n  int v91; // ecx\n  int v92; // er15\n  int v93; // edi\n  int v94; // er12\n  __int16 v95; // ST16_2\n  int v96; // esi\n  int v97; // esi\n  int v98; // er13\n  int v99; // er10\n  int v100; // edx\n  int v101; // ecx\n  int v102; // er9\n  int v103; // er12\n  int v104; // er8\n  int v105; // er9\n  int v106; // er14\n  int v107; // er11\n  int v108; // edi\n  int v109; // er10\n  int v110; // edi\n  int v111; // eax\n  int v112; // er14\n  int v113; // edx\n  int v114; // esi\n  int v115; // ebp\n  int v116; // eax\n  int v117; // ecx\n  int v118; // er11\n  int v119; // ecx\n  int v120; // er10\n  unsigned int v121; // er12\n  int v122; // ecx\n  int v123; // er9\n  int v124; // er12\n  int v125; // edi\n  int v126; // edi\n  int v127; // er12\n  int v128; // esi\n  int v129; // er12\n  int v130; // er12\n  int v131; // esi\n  int v132; // er15\n  int v133; // ebp\n  int v134; // esi\n  int v135; // ebp\n  int v136; // ebp\n  int v137; // esi\n  int v138; // eax\n  unsigned int v139; // esi\n  int v140; // er8\n  int v141; // er10\n  int v142; // eax\n  int v143; // er15\n  int v144; // er11\n  int v145; // edx\n  int v146; // edi\n  int v147; // eax\n  int v148; // edi\n  int v149; // eax\n  int v150; // edi\n  int v151; // esi\n  int v152; // er9\n  int v153; // er11\n  int v154; // er8\n  int v155; // er14\n  int v156; // esi\n  unsigned __int16 v157; // ST10_2\n  int v158; // er13\n  int v159; // er9\n  unsigned __int16 v160; // ST0C_2\n  int v161; // ebx\n  int v162; // er14\n  int v163; // er13\n  unsigned int v164; // eax\n  int v165; // er14\n  int v166; // er14\n  int v167; // er13\n  int v168; // er13\n  int v169; // ecx\n  unsigned int v170; // edx\n  int v171; // er9\n  int v172; // er11\n  int v173; // er9\n  int v174; // er15\n  int v175; // er15\n  int v176; // esi\n  int v177; // esi\n  int v178; // ebx\n  int v179; // er8\n  int v180; // er8\n  int v181; // edx\n  int v182; // edx\n  unsigned __int16 v183; // ST12_2\n  int v184; // er14\n  int v185; // edx\n  int v186; // eax\n  int v187; // er13\n  int v188; // eax\n  int v189; // edx\n  int v190; // edx\n  int v191; // ebp\n  int v192; // er11\n  int v193; // ecx\n  int v194; // er11\n  int v195; // er10\n  int v196; // ecx\n  int v197; // er15\n  int v198; // edi\n  int v199; // ebp\n  int v200; // ecx\n  int v201; // edi\n  int v202; // esi\n  int v203; // edi\n  int v204; // er10\n  int v205; // esi\n  int v206; // er14\n  int v207; // edi\n  int v208; // ebx\n  int v209; // ecx\n  int v210; // er12\n  int v211; // ebx\n  int v212; // er10\n  __int16 v213; // ST10_2\n  int v214; // er8\n  int v215; // er9\n  __int16 v216; // ST20_2\n  __int16 v217; // ST12_2\n  __int16 v218; // ST22_2\n  __int16 v219; // ST14_2\n  __int16 v220; // ax\n  int v221; // er14\n  int v222; // er11\n  int v223; // er13\n  int v224; // esi\n  int v225; // er14\n  int v226; // ebp\n  unsigned __int16 v227; // ST18_2\n  unsigned __int16 v228; // ST1C_2\n  __int16 v229; // ST16_2\n  int v230; // er12\n  __int16 v231; // ax\n  __int16 v232; // ST0C_2\n  int v233; // er11\n  __int16 v234; // ST24_2\n  int v235; // er9\n  int v236; // ecx\n  int v237; // er14\n  int v238; // edx\n  __int16 v239; // ST1E_2\n  int v240; // er10\n  int v241; // esi\n  int v242; // eax\n  int v243; // esi\n  int v244; // eax\n  int v245; // edx\n  int v246; // eax\n  int v247; // ecx\n  int v248; // er15\n  int v249; // esi\n  int v250; // er15\n  int v251; // edi\n  int v252; // er10\n  int v253; // er9\n  int v254; // eax\n  int v255; // ecx\n  int v256; // edx\n  int v257; // er9\n  __int16 v258; // ST0E_2\n  int v259; // esi\n  int v260; // ecx\n  int v261; // er8\n  __int16 v262; // ST1A_2\n  int v263; // er12\n  int v264; // edi\n  unsigned __int16 v265; // ST16_2\n  __int16 v266; // ST10_2\n  int v267; // esi\n  int v268; // ebx\n  int v269; // er13\n  int v270; // ecx\n  int v271; // er8\n  int v272; // er12\n  int v273; // er14\n  int v274; // edi\n  int v275; // edx\n  int v276; // er13\n  int v277; // ebp\n  int v278; // ecx\n  int v279; // ecx\n  int v280; // ecx\n  int v281; // ebp\n  unsigned __int64 v282; // rdx\n  unsigned __int64 v283; // r9\n  signed __int64 v284; // rdi\n  unsigned __int64 v285; // rdx\n  unsigned __int64 v286; // r9\n  __int64 v287; // rcx\n  unsigned __int64 v288; // r9\n  __int64 v289; // rsi\n  __int64 v290; // rcx\n  unsigned __int64 v291; // rsi\n  unsigned __int64 v292; // rdx\n  signed __int64 v293; // rsi\n  unsigned __int64 v294; // rax\n  unsigned __int64 result; // rax\n  _WORD *v296; // [rsp+0h] [rbp-68h]\n  unsigned __int16 v297; // [rsp+Eh] [rbp-5Ah]\n  _WORD *v298; // [rsp+28h] [rbp-40h]\n  __int64 v299; // [rsp+30h] [rbp-38h]\n\n  v299 = a1;\n  v3 = (((*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL) << 7) ^ *a2 ^ (*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL;\n  v4 = a2[1] ^ (a2[1] ^ (a2[1] >> 7)) & 0xAA00AA00AA00AALL ^ (((a2[1] ^ (a2[1] >> 7)) & 0xAA00AA00AA00AALL) << 7);\n  v5 = (v3 ^ (v3 >> 14)) & 0xCCCC0000CCCCLL;\n  v6 = v5 ^ v3;\n  v5 <<= 14;\n  v7 = (((v4 ^ (v4 >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v4 ^ (v4 >> 14)) & 0xCCCC0000CCCCLL ^ v4;\n  v8 = ((unsigned int)v6 ^ (unsigned int)v5 ^ (unsigned int)((v6 ^ v5) >> 28)) & 0xF0F0F0F0;\n  v9 = (v8 << 28) ^ v8 ^ v6 ^ v5;\n  v10 = ((unsigned int)v7 ^ (unsigned int)(v7 >> 28)) & 0xF0F0F0F0;\n  v11 = (v10 << 28) ^ v10 ^ v7;\n  v12 = (v11 ^ (v9 >> 8)) & 0xFF00FF00FF00FFLL;\n  v13 = v12;\n  v14 = v11 ^ v12;\n  v15 = (v13 << 8) ^ v9;\n  v16 = v14 ^ *(unsigned __int16 *)(a3 + 962);\n  v17 = v14 >> 16;\n  v18 = v14 >> 32;\n  LOWORD(v17) = *(_WORD *)(a3 + 966) ^ WORD1(v14);\n  v297 = v15 ^ *(_WORD *)(a3 + 960);\n  LOWORD(v18) = *(_WORD *)(a3 + 970) ^ WORD2(v14);\n  v19 = (v15 >> 16) ^ *(unsigned __int16 *)(a3 + 964);\n  v20 = v15 >> 32;\n  v21 = v15 >> 48;\n  LOWORD(v20) = *(_WORD *)(a3 + 968) ^ v20;\n  LOWORD(v21) = *(_WORD *)(a3 + 972) ^ v21;\n  v23 = v14 >> 48;\n  v22 = a3 + 976;\n  LOWORD(v23) = *(_WORD *)(a3 + 974) ^ v23;\n  v24 = *(_DWORD *)(a3 + 1200);\n  v296 = (_WORD *)v22;\n  if ( v24 != 1 )\n  {\n    v25 = v22 + 16 * ((unsigned int)(v24 - 2) + 1LL);\n    v26 = v20;\n    v27 = v16;\n    v298 = (_WORD *)v25;\n    v28 = v26;\n    v29 = v19;\n    do\n    {\n      v30 = v297;\n      v31 = v21 ^ v18;\n      v32 = v27 ^ v23;\n      v33 = v29 ^ v23;\n      v34 = v28 ^ v29;\n      v35 = v27 ^ v23 ^ v28 ^ v29;\n      v36 = v31 ^ v30;\n      v37 = v27 ^ v23 ^ v28 ^ v29;\n      v38 = v29 ^ v23;\n      v39 = v31 ^ v30 ^ v28;\n      v40 = v31 ^ v30 ^ v27;\n      v41 = v31 ^ v30 ^ v23;\n      v42 = v35 ^ v17;\n      v43 = v40 ^ v29 ^ v23;\n      v44 = v42 ^ v29;\n      v45 = v21 ^ v42;\n      v46 = v44 ^ v31;\n      v47 = v44 ^ v30;\n      v48 = v44;\n      v49 = v44 ^ v31;\n      v50 = v28 ^ v23;\n      v51 = v45 ^ v28 ^ v23;\n      v52 = v51 ^ v31;\n      v53 = v51 ^ v30;\n      v54 = v51 ^ v49;\n      v55 = v51;\n      v56 = v46;\n      v57 = v54;\n      LOWORD(v33) = v56 & v33;\n      v58 = v54;\n      v59 = v47;\n      v60 = (unsigned __int16)(v35 & v48);\n      v61 = v50 & ~v45;\n      v62 = v61 ^ (unsigned __int16)(v57 & v34);\n      v63 = v33 ^ v61;\n      v64 = v62 ^ v60 ^ v45 ^ (unsigned __int16)(v47 & v43);\n      v65 = (unsigned __int16)(v30 & v39) ^ v38;\n      LOWORD(v65) = v56 ^ v65;\n      v66 = v64;\n      v67 = v62 ^ v52 & v32 ^ v52 ^ v32 ^ v36 & ~v27;\n      v68 = v67 & v64;\n      v69 = v63 ^ v60 ^ v65;\n      v70 = v69 ^ v66;\n      v71 = v63 ^ v52 ^ v23 ^ v52 & v32 ^ (v51 ^ v30) & v41;\n      v72 = v69 ^ (v68 ^ v71) & (v69 ^ v66);\n      v73 = (v71 ^ v67) & (v68 ^ v69);\n      v74 = v73 ^ v71;\n      v75 = v68 ^ v73;\n      v76 = v68 ^ v71;\n      v77 = v74;\n      v78 = v75 & v71;\n      v79 = v74;\n      v80 = v78 ^ v74 ^ v67;\n      v81 = v70 ^ v72 & (v78 ^ v76);\n      v82 = v30;\n      v83 = v81 ^ v80;\n      HIWORD(v75) = HIWORD(v74) ^ HIWORD(v72);\n      v84 = v81 ^ v72;\n      v85 = v74 ^ v72 ^ v81 ^ v80;\n      LOWORD(v74) = v85 & v58;\n      v86 = v77 & v82;\n      LOWORD(v85) = v34 & v85;\n      v87 = v74;\n      v88 = v81 & v36;\n      v89 = v86;\n      LOWORD(v81) = v40 & v81;\n      v90 = v80 ^ v79;\n      v91 = v84 & v52;\n      v92 = v72 & v53;\n      v93 = v32 & v84;\n      v94 = v86;\n      v95 = v80 & v43;\n      v96 = (v77 ^ v72) & (unsigned __int16)v50;\n      LOWORD(v75) = v55 & (v77 ^ v72);\n      LOWORD(v72) = v41 & v72;\n      v97 = v85 ^ v96;\n      v98 = v97 ^ v88;\n      v99 = v92 ^ v81;\n      v100 = v91 ^ (unsigned __int16)(v90 & v48);\n      v101 = v75 ^ v91;\n      v102 = v56;\n      LOWORD(v101) = v87 ^ v101;\n      v103 = v100 ^ v93 ^ v94;\n      LOWORD(v102) = v87 ^ v83 & v56;\n      LOWORD(v90) = v95 ^ v37 & v90;\n      v104 = v101 ^ v88;\n      v105 = v98 ^ v102;\n      v106 = v98 ^ v90;\n      v107 = v105 ^ v103 ^ v72;\n      LOWORD(v80) = v59 & v80;\n      v108 = v99 ^ v93;\n      v109 = v103 ^ v97 ^ v99;\n      HIWORD(v97) = HIWORD(v109);\n      LOWORD(v77) = v95 ^ v39 & v77;\n      v110 = v105 ^ v108;\n      LOWORD(v97) = (unsigned __int16)v109 >> 8;\n      HIWORD(v105) = HIWORD(v110);\n      v111 = v106 ^ v80;\n      v112 = v101 ^ v106;\n      v113 = v111 ^ v100;\n      v114 = v109 ^ v97;\n      LOWORD(v114) = v114 & 0xCC;\n      v115 = v107 ^ v77;\n      LOWORD(v98) = v113 ^ v104;\n      v116 = v92 ^ v89 ^ v111;\n      v117 = v38;\n      LOWORD(v117) = v83 & v38;\n      v118 = v117 ^ v85 ^ v104 ^ v107;\n      v119 = (v114 << 8) ^ v114 ^ v109;\n      v120 = v119 << 12;\n      v121 = v119 & 0xFFFF5555;\n      LOWORD(v120) = ((_WORD)v119 << 12) & 0xA000;\n      LOWORD(v119) = ((unsigned __int16)v119 >> 4) & 0xAAA;\n      HIWORD(v104) = HIWORD(v118);\n      v122 = v120 | v121 | v119;\n      LOWORD(v105) = (unsigned __int16)v110 >> 8;\n      v123 = v110 ^ v105;\n      LOWORD(v123) = v123 & 0xCC;\n      v124 = v123;\n      v125 = v123 ^ v110;\n      HIWORD(v123) = HIWORD(v112);\n      v126 = (v124 << 8) ^ v125;\n      v127 = v126;\n      v128 = v126;\n      v126 <<= 12;\n      LOWORD(v128) = v128 & 0x5555;\n      LOWORD(v126) = v126 & 0xA000;\n      LOWORD(v127) = ((unsigned __int16)v127 >> 4) & 0xAAA;\n      v129 = v128 | v127;\n      HIWORD(v128) = HIWORD(v115);\n      LOWORD(v128) = (unsigned __int16)v115 >> 8;\n      v130 = v126 | v129;\n      v131 = v115 ^ v128;\n      LOWORD(v131) = v131 & 0xCC;\n      v132 = v131 ^ v115 ^ (v131 << 8);\n      v133 = v132;\n      v134 = v132;\n      v132 <<= 12;\n      LOWORD(v134) = v134 & 0x5555;\n      LOWORD(v132) = v132 & 0xA000;\n      LOWORD(v133) = ((unsigned __int16)v133 >> 4) & 0xAAA;\n      v135 = v134 | v133;\n      HIWORD(v134) = HIWORD(v116);\n      LOWORD(v134) = (unsigned __int16)v116 >> 8;\n      v136 = v132 | v135;\n      v137 = v116 ^ v134;\n      LOWORD(v137) = v137 & 0xCC;\n      v138 = (v137 << 8) ^ v137 ^ v116;\n      HIWORD(v120) = HIWORD(v138);\n      LOWORD(v120) = (unsigned __int16)v138 >> 4;\n      v139 = v138 & 0xFFFF5555;\n      v138 <<= 12;\n      LOWORD(v120) = v120 & 0xAAA;\n      LOWORD(v138) = v138 & 0xA000;\n      LOWORD(v104) = (unsigned __int16)v118 >> 8;\n      v140 = v118 ^ v104;\n      v141 = v138 | v139 | v120;\n      HIWORD(v138) = HIWORD(v113);\n      LOWORD(v140) = v140 & 0xCC;\n      LOWORD(v138) = (unsigned __int16)v113 >> 8;\n      v142 = v113 ^ v138;\n      v143 = 8 * v141;\n      LOWORD(v142) = v142 & 0xCC;\n      v144 = (v140 << 8) ^ v140 ^ v118;\n      HIWORD(v139) = HIWORD(v144);\n      v145 = (v142 << 8) ^ v142 ^ v113;\n      LOWORD(v139) = ((unsigned __int16)v144 >> 4) & 0xAAA;\n      v146 = v145;\n      v147 = v145;\n      v145 <<= 12;\n      LOWORD(v147) = v147 & 0x5555;\n      LOWORD(v145) = v145 & 0xA000;\n      LOWORD(v146) = ((unsigned __int16)v146 >> 4) & 0xAAA;\n      v148 = v147 | v146;\n      v149 = v144;\n      v144 <<= 12;\n      LOWORD(v149) = v149 & 0x5555;\n      LOWORD(v144) = v144 & 0xA000;\n      v150 = v145 | v148;\n      v151 = v144 | v149 | v139;\n      LOWORD(v123) = (unsigned __int16)v112 >> 8;\n      v152 = v112 ^ v123;\n      v153 = 8 * v130;\n      LOWORD(v152) = v152 & 0xCC;\n      v154 = v151;\n      v155 = v152 ^ v112;\n      v156 = 8 * v150;\n      v157 = v154;\n      LOWORD(v98) = ((unsigned __int8)((v98 ^ BYTE1(v98)) & 0xCC) << 8) ^ ((unsigned __int8)v98 ^ BYTE1(v98)) & 0xCC ^ v98;\n      LOWORD(v85) = ((_WORD)v98 << 12) & 0xA000 | v98 & 0x5555 | ((unsigned __int16)v98 >> 4) & 0xAAA;\n      v158 = v152;\n      v159 = 8 * v136;\n      v160 = v85;\n      v161 = 8 * v154;\n      v162 = v155 ^ (v158 << 8);\n      v163 = v162 << 12;\n      v164 = v162 & 0xFFFF5555;\n      LOWORD(v163) = ((_WORD)v162 << 12) & 0xA000;\n      LOWORD(v162) = ((unsigned __int16)v162 >> 4) & 0xAAA;\n      v165 = v164 | v162;\n      HIWORD(v164) = HIWORD(v122);\n      v166 = v163 | v165;\n      v167 = 8 * v122;\n      LOWORD(v164) = ((unsigned __int16)v122 >> 1) & 0x7777;\n      LOWORD(v167) = 8 * v122 & 0x8888;\n      v168 = v164 | v167;\n      HIWORD(v164) = HIWORD(v130);\n      v169 = v168 ^ v122;\n      LOWORD(v153) = 8 * v130 & 0x8888;\n      LOWORD(v164) = (unsigned __int16)v130 >> 1;\n      v170 = v164;\n      HIWORD(v164) = HIWORD(v136);\n      LOWORD(v159) = 8 * v136 & 0x8888;\n      LOWORD(v143) = 8 * v141 & 0x8888;\n      LOWORD(v170) = v170 & 0x7777;\n      LOWORD(v164) = ((unsigned __int16)v136 >> 1) & 0x7777;\n      LOWORD(v156) = 8 * v150 & 0x8888;\n      v171 = v164 | v159;\n      HIWORD(v164) = HIWORD(v141);\n      LOWORD(v161) = 8 * v154 & 0x8888;\n      v172 = v130 ^ (v170 | v153);\n      LOWORD(v164) = ((unsigned __int16)v141 >> 1) & 0x7777;\n      v173 = v136 ^ v171;\n      v174 = v164 | v143;\n      HIWORD(v164) = HIWORD(v150);\n      v175 = v141 ^ v174;\n      LOWORD(v164) = ((unsigned __int16)v150 >> 1) & 0x7777;\n      v176 = v164 | v156;\n      HIWORD(v164) = HIWORD(v154);\n      v177 = v150 ^ v176;\n      LOWORD(v164) = ((unsigned __int16)v154 >> 1) & 0x7777;\n      v178 = v154 ^ (v164 | v161);\n      v179 = 8 * v160;\n      LOWORD(v179) = 8 * v160 & 0x8888;\n      HIWORD(v164) = HIWORD(v166);\n      v180 = v160 ^ ((v160 >> 1) & 0x7777 | v179);\n      v181 = 8 * v166;\n      LOWORD(v181) = 8 * v166 & 0x8888;\n      LOWORD(v164) = ((unsigned __int16)v166 >> 1) & 0x7777;\n      v182 = v164 | v181;\n      v183 = v182;\n      v184 = v182 ^ v166;\n      v185 = 4 * v172;\n      LOWORD(v185) = 4 * v172 & 0xCCCC;\n      LOWORD(v164) = v184 ^ *v296 ^ v168 ^ (4 * v169 & 0xCCCC | ((unsigned __int16)v169 >> 2) & 0x3333);\n      HIWORD(v168) = HIWORD(v172);\n      LOWORD(v168) = (unsigned __int16)v172 >> 2;\n      v297 = v164;\n      v186 = v168;\n      v187 = 4 * v173;\n      LOWORD(v186) = v186 & 0x3333;\n      v188 = v185 | v186;\n      LOWORD(v187) = 4 * v173 & 0xCCCC;\n      LOWORD(v130) = v296[1] ^ v130;\n      v189 = v172 ^ v169 ^ v130;\n      HIWORD(v169) = HIWORD(v173);\n      LOWORD(v136) = v296[2] ^ v136;\n      LOWORD(v169) = (unsigned __int16)v173 >> 2;\n      LOWORD(v141) = v296[3] ^ v141;\n      v27 = v184 ^ v189 ^ v188;\n      v190 = v169;\n      HIWORD(v169) = HIWORD(v175);\n      LOWORD(v190) = v190 & 0x3333;\n      v191 = v172 ^ v136;\n      v192 = 4 * v175;\n      LOWORD(v169) = ((unsigned __int16)v175 >> 2) & 0x3333;\n      LOWORD(v192) = 4 * v175 & 0xCCCC;\n      v29 = v173 ^ v191 ^ (v187 | v190);\n      HIWORD(v191) = HIWORD(v177);\n      v193 = v192 | v169;\n      LOWORD(v150) = v296[4] ^ v150;\n      v194 = v184 ^ v141;\n      v195 = 4 * v180;\n      LOWORD(v191) = ((unsigned __int16)v177 >> 2) & 0x3333;\n      LOWORD(v195) = 4 * v180 & 0xCCCC;\n      LODWORD(v17) = v193 ^ v175 ^ v173 ^ v194;\n      v196 = 4 * v177;\n      v197 = v184 ^ v150 ^ v175;\n      v198 = 4 * v178;\n      LOWORD(v196) = 4 * v177 & 0xCCCC;\n      v199 = v196 | v191;\n      HIWORD(v196) = HIWORD(v178);\n      LOWORD(v198) = 4 * v178 & 0xCCCC;\n      v28 = v199 ^ v177 ^ v197;\n      LOWORD(v196) = ((unsigned __int16)v178 >> 2) & 0x3333;\n      v200 = v198 | v196;\n      v201 = v157;\n      LOWORD(v201) = v296[5] ^ v157;\n      v202 = v201 ^ v177;\n      v203 = 4 * v184;\n      LOWORD(v184) = ((unsigned __int16)v184 >> 2) & 0x3333;\n      LODWORD(v18) = v178 ^ v202 ^ v200;\n      HIWORD(v202) = HIWORD(v180);\n      LOWORD(v203) = v203 & 0xCCCC;\n      LOWORD(v202) = ((unsigned __int16)v180 >> 2) & 0x3333;\n      v204 = v202 | v195;\n      v205 = v160;\n      LOWORD(v205) = v296[6] ^ v160;\n      LODWORD(v21) = v180 ^ v205 ^ v178 ^ v204;\n      v206 = v203 | v184;\n      v207 = v183;\n      LOWORD(v207) = v296[7] ^ v183;\n      v296 += 8;\n      LODWORD(v23) = v207 ^ v180 ^ v206;\n    }\n    while ( v296 != v298 );\n    v208 = v28;\n    v19 = v29;\n    v16 = v27;\n    LODWORD(v20) = v208;\n  }\n  v209 = v21 ^ v18;\n  v210 = v20 ^ v23;\n  v211 = v16 ^ v23;\n  v212 = v23 ^ v19;\n  v213 = v20 ^ v19;\n  v214 = v209 ^ v297;\n  v215 = v16 ^ v23 ^ v20 ^ v19;\n  v216 = v16 ^ v23 ^ v20 ^ v19;\n  v217 = v209 ^ v297 ^ v20;\n  v218 = v16 ^ v209 ^ v297;\n  v219 = v209 ^ v297 ^ v23;\n  v220 = v218 ^ v23 ^ v19;\n  v221 = v19;\n  v222 = v215 ^ v17;\n  v223 = v210;\n  v224 = v222 ^ v21;\n  v225 = v222 ^ v221;\n  v226 = v224 ^ v210;\n  v227 = v225;\n  v228 = v210;\n  v229 = v220;\n  v230 = v224 ^ v210 ^ v209;\n  v231 = v225 ^ v297;\n  v232 = v225 ^ v209;\n  v233 = v226 ^ v225 ^ v209;\n  v234 = v225 ^ v297;\n  v235 = (unsigned __int16)(v215 & v225);\n  v236 = v223 & ~v224;\n  v237 = v236 ^ (unsigned __int16)(v233 & v213);\n  v238 = v212;\n  LOWORD(v212) = v232 & v212;\n  v239 = v238;\n  v240 = v236 ^ v212;\n  LOWORD(v223) = v226 ^ v297;\n  v241 = (unsigned __int16)(v231 & v229) ^ v235 ^ v224;\n  v242 = v297;\n  LOWORD(v242) = v217 & v297;\n  v243 = v237 ^ v241;\n  v244 = v238 ^ v242;\n  LOWORD(v244) = v232 ^ v244;\n  v245 = v237 ^ v230 & v211 ^ v230 ^ v211 ^ v214 & ~v16;\n  v246 = v240 ^ v235 ^ v244;\n  v247 = v240 ^ (unsigned __int16)((v226 ^ v297) & v219) ^ v230 ^ v23 ^ v230 & (v16 ^ v23);\n  v248 = v243;\n  v249 = v245 & v243;\n  v250 = v246 ^ v248;\n  v251 = v249 ^ v247;\n  v252 = v246 ^ (v249 ^ v247) & v250;\n  v253 = (v249 ^ v246) & (v247 ^ v245);\n  v254 = v253 ^ v247;\n  v255 = (v253 ^ v249) & v247;\n  v256 = v255 ^ v254 ^ v245;\n  v257 = v250 ^ v252 & (v255 ^ v251);\n  HIWORD(v226) = HIWORD(v254) ^ HIWORD(v252);\n  LOWORD(v250) = v257 ^ v256;\n  v258 = v254 & v297;\n  v259 = v254 ^ v252 ^ v257 ^ v256;\n  v260 = (v257 ^ v252) & v230;\n  v261 = v257 & v214;\n  v262 = v252 & v223;\n  HIWORD(v237) = HIWORD(v256) ^ HIWORD(v254);\n  v263 = v259 & v233;\n  LOWORD(v259) = v213 & v259;\n  v264 = v211 & (v257 ^ v252);\n  v265 = v256 & v229;\n  v266 = v259;\n  LOWORD(v257) = v252 & v223 ^ v218 & v257;\n  LOWORD(v226) = v226 & (v254 ^ v252);\n  v267 = v259 ^ (v254 ^ v252) & v228;\n  LOWORD(v237) = v216 & (v256 ^ v254);\n  v268 = v267 ^ v261;\n  v269 = v260 ^ (v256 ^ v254) & v227;\n  v270 = v263 ^ v226 ^ v260;\n  v271 = v270 ^ v261;\n  v272 = v268 ^ (unsigned __int16)(v250 & v232) ^ v263;\n  v273 = v268 ^ v265 ^ v237;\n  LOWORD(v252) = v272 ^ v269 ^ v264 ^ v258 ^ v219 & v252;\n  LOWORD(v256) = v234 & v256;\n  LOWORD(v267) = v269 ^ v264 ^ v258 ^ v267;\n  v274 = v272 ^ v257 ^ v264;\n  v275 = v273 ^ v256;\n  LOWORD(v273) = v270 ^ v273;\n  v276 = v275 ^ v269;\n  LOWORD(v254) = v252 ^ v265 ^ v217 & v254;\n  v277 = v276 ^ v271;\n  LOWORD(v271) = v266 ^ v250 & v239 ^ v271;\n  LOWORD(v270) = ((unsigned __int8)(v257 ^ v267) ^ ((unsigned __int16)(v257 ^ v267) >> 8)) & 0xCC ^ v257 ^ v267 ^ ((unsigned __int8)((v257 ^ v267 ^ ((unsigned __int16)(v257 ^ v267) >> 8)) & 0xCC) << 8);\n  HIWORD(v270) = HIWORD(v274);\n  LOWORD(v267) = ((_WORD)v270 << 12) & 0xA000 | v270 & 0x5555 | ((unsigned __int16)v270 >> 4) & 0xAAA;\n  LOWORD(v270) = (unsigned __int16)v274 >> 8;\n  v278 = v274 ^ v270;\n  LOWORD(v278) = v278 & 0xCC;\n  v279 = v278 ^ v274 ^ (v278 << 8);\n  LOWORD(v254) = ((unsigned __int8)((v254 ^ BYTE1(v254)) & 0xCC) << 8) ^ ((unsigned __int8)v254 ^ BYTE1(v254)) & 0xCC ^ v254;\n  LOWORD(v274) = v279 & 0x5555 | ((unsigned __int16)v279 >> 4) & 0xAAA;\n  LOWORD(v272) = ((_WORD)v279 << 12) & 0xA000;\n  LOWORD(v257) = ((_WORD)v254 << 12) & 0xA000 | v254 & 0x5555 | ((unsigned __int16)v254 >> 4) & 0xAAA;\n  LOWORD(v254) = ((unsigned __int8)(v262 ^ v258 ^ v275) ^ ((unsigned __int16)(v262 ^ v258 ^ v275) >> 8)) & 0xCC ^ v262 ^ v258 ^ v275 ^ ((unsigned __int8)((v262 ^ v258 ^ v275 ^ ((unsigned __int16)(v262 ^ v258 ^ v275) >> 8)) & 0xCC) << 8);\n  LOWORD(v275) = ((_WORD)v254 << 12) & 0xA000 | v254 & 0x5555 | ((unsigned __int16)v254 >> 4) & 0xAAA;\n  LOWORD(v254) = ((unsigned __int8)v276 ^ BYTE1(v276)) & 0xCC ^ v276 ^ ((unsigned __int8)((v276 ^ BYTE1(v276)) & 0xCC) << 8);\n  LOWORD(v252) = ((unsigned __int8)((v271 ^ v252 ^ ((unsigned __int16)(v271 ^ v252) >> 8)) & 0xCC) << 8) ^ ((unsigned __int8)(v271 ^ v252) ^ ((unsigned __int16)(v271 ^ v252) >> 8)) & 0xCC ^ v271 ^ v252;\n  HIWORD(v279) = HIWORD(v277);\n  LOWORD(v279) = (unsigned __int16)v277 >> 8;\n  v280 = v277 ^ v279;\n  LOWORD(v280) = v280 & 0xCC;\n  v281 = (v280 << 8) ^ v280 ^ v277;\n  LOWORD(v280) = ((unsigned __int8)v273 ^ BYTE1(v273)) & 0xCC;\n  v282 = (unsigned __int16)(v296[1] ^ (v272 | v274)) | (((((unsigned __int16)(v296[5] ^ (v252 & 0x5555 | ((unsigned __int16)v252 >> 4) & 0xAAA | ((_WORD)v252 << 12) & 0xA000)) | ((unsigned __int64)(unsigned __int16)(v296[7] ^ ((((unsigned __int16)((_WORD)v280 << 8) ^ (unsigned __int16)(v280 ^ v273)) << 12) & 0xA000 | (((_WORD)v280 << 8) ^ v280 ^ v273) & 0x5555 | ((unsigned __int16)(((_WORD)v280 << 8) ^ v280 ^ v273) >> 4) & 0xAAA)) << 16)) << 16) | (unsigned __int16)(v296[3] ^ v275)) << 16);\n  v283 = (unsigned __int16)(*v296 ^ v267) | ((((((unsigned __int64)(unsigned __int16)(v296[6] ^ (((_WORD)v281 << 12) & 0xA000 | v281 & 0x5555 | ((unsigned __int16)v281 >> 4) & 0xAAA)) << 16) | (unsigned __int16)(v296[4] ^ (((_WORD)v254 << 12) & 0xA000 | v254 & 0x5555 | ((unsigned __int16)v254 >> 4) & 0xAAA))) << 16) | (unsigned __int16)(v296[2] ^ v257)) << 16);\n  v284 = (v282 ^ (v283 >> 8)) & 0xFF00FF00FF00FFLL;\n  v285 = v284 ^ v282;\n  v286 = (v284 << 8) ^ v283;\n  v287 = ((unsigned int)v286 ^ (unsigned int)(v286 >> 28)) & 0xF0F0F0F0;\n  v288 = v287 ^ v286;\n  v289 = v287 << 28;\n  v290 = ((unsigned int)v285 ^ (unsigned int)(v285 >> 28)) & 0xF0F0F0F0;\n  v291 = (((v288 ^ v289 ^ ((v288 ^ v289) >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v288 ^ v289 ^ ((v288 ^ v289) >> 14)) & 0xCCCC0000CCCCLL ^ v288 ^ v289;\n  v292 = (((v290 ^ v285 ^ (v290 << 28) ^ ((v290 ^ v285 ^ (v290 << 28)) >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v290 ^ v285 ^ (v290 << 28) ^ ((v290 ^ v285 ^ (v290 << 28)) >> 14)) & 0xCCCC0000CCCCLL ^ v290 ^ v285 ^ (v290 << 28);\n  v293 = (((v291 ^ (v291 >> 7)) & 0xAA00AA00AA00AALL) << 7) ^ (v291 ^ (v291 >> 7)) & 0xAA00AA00AA00AALL ^ v291;\n  v294 = (v292 ^ (v292 >> 7)) & 0xAA00AA00AA00AALL ^ v292 ^ (((v292 ^ (v292 >> 7)) & 0xAA00AA00AA00AALL) << 7);\n  *(_WORD *)v299 = v293;\n  *(_BYTE *)(v299 + 2) = BYTE2(v293);\n  *(_BYTE *)(v299 + 3) = BYTE3(v293);\n  *(_BYTE *)(v299 + 4) = BYTE4(v293);\n  *(_BYTE *)(v299 + 5) = BYTE5(v293);\n  *(_BYTE *)(v299 + 7) = HIBYTE(v293);\n  *(_BYTE *)(v299 + 6) = BYTE6(v293);\n  *(_WORD *)(v299 + 8) = v294;\n  *(_BYTE *)(v299 + 10) = BYTE2(v294);\n  *(_BYTE *)(v299 + 11) = BYTE3(v294);\n  *(_BYTE *)(v299 + 12) = BYTE4(v294);\n  *(_BYTE *)(v299 + 13) = BYTE5(v294);\n  result = v294 >> 56;\n  *(_BYTE *)(v299 + 15) = result;\n  *(_BYTE *)(v299 + 14) = ((v292 ^ (v292 >> 7)) & 0xAA00AA00AA00AALL ^ v292 ^ (((v292 ^ (v292 >> 7)) & 0xAA00AA00AA00AALL) << 7)) >> 48;\n  return result;\n}\n", 
            "funcStartAddr": "0x19aa0L", 
            "funcEndAddr": "0x1a985L", 
            "funcName": "sub_19AA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1A990(__int64 a1, __m128i *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  __m128i *v4; // r14\n  unsigned __int64 v5; // rax\n  char v6; // dh^5\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  unsigned __int64 result; // rax\n\n  v3 = (unsigned __int64)a2->m128i_u64 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    do\n    {\n      v5 = v4->m128i_i64[0] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 85) << 24) | *(unsigned __int8 *)(a1 - 88) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 87) << 8));\n      *(_BYTE *)(a1 - 88) ^= LOBYTE(v4->m128i_i64[0]);\n      *(_BYTE *)(a1 - 87) = BYTE1(v5);\n      *(_BYTE *)(a1 - 86) = BYTE2(v5);\n      *(_BYTE *)(a1 - 85) = BYTE3(v5);\n      *(_BYTE *)(a1 - 84) = BYTE4(v5);\n      *(_BYTE *)(a1 - 83) = BYTE5(v5);\n      v6 = BYTE6(v5);\n      *(_BYTE *)(a1 - 81) = HIBYTE(v5);\n      v7 = *(unsigned __int8 *)(a1 - 79);\n      *(_BYTE *)(a1 - 82) = v6;\n      ++v4;\n      v8 = v4[-1].m128i_i64[1] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 77) << 24) | *(unsigned __int8 *)(a1 - 80) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 78) << 16) | (v7 << 8));\n      *(_WORD *)(a1 - 80) = v8;\n      *(_BYTE *)(a1 - 78) = BYTE2(v8);\n      *(_BYTE *)(a1 - 77) = BYTE3(v8);\n      *(_BYTE *)(a1 - 76) = BYTE4(v8);\n      *(_BYTE *)(a1 - 75) = BYTE5(v8);\n      *(_BYTE *)(a1 - 74) = BYTE6(v8);\n      *(_BYTE *)(a1 - 73) = HIBYTE(v8);\n      result = sub_19AA0(a1 - 1296 + 1208, (_QWORD *)(a1 - 1296 + 1208), a1 - 1296);\n      v4[-1] = _mm_loadu_si128((const __m128i *)(a1 - 88));\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1a990L", 
            "funcEndAddr": "0x1ab23L", 
            "funcName": "sub_1A990"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1AB30(__int64 a1, __m128i *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  __m128i *v4; // r14\n  unsigned __int64 v5; // rax\n  char v6; // dh^5\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  unsigned __int64 result; // rax\n\n  v3 = (unsigned __int64)a2->m128i_u64 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    do\n    {\n      v5 = v4->m128i_i64[0] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 85) << 24) | *(unsigned __int8 *)(a1 - 88) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 87) << 8));\n      *(_BYTE *)(a1 - 88) ^= LOBYTE(v4->m128i_i64[0]);\n      *(_BYTE *)(a1 - 87) = BYTE1(v5);\n      *(_BYTE *)(a1 - 86) = BYTE2(v5);\n      *(_BYTE *)(a1 - 85) = BYTE3(v5);\n      *(_BYTE *)(a1 - 84) = BYTE4(v5);\n      *(_BYTE *)(a1 - 83) = BYTE5(v5);\n      v6 = BYTE6(v5);\n      *(_BYTE *)(a1 - 81) = HIBYTE(v5);\n      v7 = *(unsigned __int8 *)(a1 - 79);\n      *(_BYTE *)(a1 - 82) = v6;\n      ++v4;\n      v8 = v4[-1].m128i_i64[1] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 77) << 24) | *(unsigned __int8 *)(a1 - 80) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 78) << 16) | (v7 << 8));\n      *(_WORD *)(a1 - 80) = v8;\n      *(_BYTE *)(a1 - 78) = BYTE2(v8);\n      *(_BYTE *)(a1 - 77) = BYTE3(v8);\n      *(_BYTE *)(a1 - 76) = BYTE4(v8);\n      *(_BYTE *)(a1 - 75) = BYTE5(v8);\n      *(_BYTE *)(a1 - 74) = BYTE6(v8);\n      *(_BYTE *)(a1 - 73) = HIBYTE(v8);\n      result = sub_19AA0(a1 - 1296 + 1208, (_QWORD *)(a1 - 1296 + 1208), a1 - 1296);\n      v4[-1] = _mm_loadu_si128((const __m128i *)(a1 - 88));\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1ab30L", 
            "funcEndAddr": "0x1acc3L", 
            "funcName": "sub_1AB30"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1ACD0(__int64 a1, __m128i *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  __m128i *v4; // r14\n  unsigned __int64 v5; // rax\n  char v6; // dh^5\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  unsigned __int64 result; // rax\n\n  v3 = (unsigned __int64)a2->m128i_u64 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    do\n    {\n      v5 = v4->m128i_i64[0] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 85) << 24) | *(unsigned __int8 *)(a1 - 88) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 87) << 8));\n      *(_BYTE *)(a1 - 88) ^= LOBYTE(v4->m128i_i64[0]);\n      *(_BYTE *)(a1 - 87) = BYTE1(v5);\n      *(_BYTE *)(a1 - 86) = BYTE2(v5);\n      *(_BYTE *)(a1 - 85) = BYTE3(v5);\n      *(_BYTE *)(a1 - 84) = BYTE4(v5);\n      *(_BYTE *)(a1 - 83) = BYTE5(v5);\n      v6 = BYTE6(v5);\n      *(_BYTE *)(a1 - 81) = HIBYTE(v5);\n      v7 = *(unsigned __int8 *)(a1 - 79);\n      *(_BYTE *)(a1 - 82) = v6;\n      ++v4;\n      v8 = v4[-1].m128i_i64[1] ^ (((unsigned __int64)*(unsigned __int8 *)(a1 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 77) << 24) | *(unsigned __int8 *)(a1 - 80) | ((unsigned __int64)*(unsigned __int8 *)(a1 - 78) << 16) | (v7 << 8));\n      *(_WORD *)(a1 - 80) = v8;\n      *(_BYTE *)(a1 - 78) = BYTE2(v8);\n      *(_BYTE *)(a1 - 77) = BYTE3(v8);\n      *(_BYTE *)(a1 - 76) = BYTE4(v8);\n      *(_BYTE *)(a1 - 75) = BYTE5(v8);\n      *(_BYTE *)(a1 - 74) = BYTE6(v8);\n      *(_BYTE *)(a1 - 73) = HIBYTE(v8);\n      result = sub_19AA0(a1 - 1296 + 1208, (_QWORD *)(a1 - 1296 + 1208), a1 - 1296);\n      v4[-1] = _mm_loadu_si128((const __m128i *)(a1 - 88));\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x1acd0L", 
            "funcEndAddr": "0x1ae63L", 
            "funcName": "sub_1ACD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1AE70(__int64 a1, _QWORD *a2, __int64 a3)\n{\n  unsigned __int64 v3; // r8\n  unsigned __int64 v4; // rcx\n  signed __int64 v5; // rdx\n  signed __int64 v6; // rdi\n  signed __int64 v7; // rdx\n  _QWORD *v8; // r8\n  unsigned __int64 v9; // rax\n  unsigned __int64 v10; // rdi\n  __int64 v11; // rdx\n  unsigned __int64 v12; // rdx\n  __int64 v13; // rax\n  unsigned __int64 v14; // rdi\n  signed __int64 v15; // rcx\n  unsigned __int64 v16; // rdi\n  unsigned __int64 v17; // rdx\n  __int64 v18; // r9\n  unsigned __int64 v19; // r10\n  __int64 v20; // r12\n  __int64 v21; // rbp\n  __int64 v22; // rbx\n  __int64 v23; // r11\n  unsigned __int64 v24; // rdi\n  __int64 v25; // r15\n  signed __int64 v26; // rcx\n  unsigned __int64 v27; // rdx\n  signed __int64 v28; // rax\n  unsigned __int64 v29; // rdx\n  unsigned __int64 v30; // rcx\n  __int64 v31; // rax\n  unsigned __int64 v32; // rdx\n  __int64 v33; // r15\n  unsigned __int64 v34; // rax\n  signed __int64 v35; // r15\n  unsigned __int64 v36; // rax\n  unsigned __int64 v37; // rdx\n  int v38; // eax\n  _QWORD *v39; // r14\n  __int64 v40; // r9\n  __int64 v41; // rbp\n  __int64 v42; // r12\n  __int64 v43; // rbx\n  unsigned __int64 v44; // rdi\n  unsigned __int64 v45; // rcx\n  __int64 v46; // r8\n  __int64 v47; // ST08_8\n  unsigned __int64 v48; // ST10_8\n  __int64 v49; // rcx\n  __int64 v50; // r15\n  __int64 v51; // r9\n  __int64 v52; // ST38_8\n  __int64 v53; // ST28_8\n  unsigned __int64 v54; // rsi\n  __int64 v55; // r10\n  __int64 v56; // rcx\n  __int64 v57; // ST48_8\n  __int64 v58; // rax\n  __int64 v59; // r14\n  __int64 v60; // ST40_8\n  __int64 v61; // ST90_8\n  __int64 v62; // rdx\n  __int64 v63; // ST30_8\n  __int64 v64; // r13\n  __int64 v65; // ST00_8\n  __int64 v66; // rdx\n  __int64 v67; // rbp\n  __int64 v68; // ST20_8\n  __int64 v69; // rdi\n  __int64 v70; // ST88_8\n  __int64 v71; // ST18_8\n  __int64 v72; // rbx\n  __int64 v73; // r10\n  __int64 v74; // r9\n  __int64 v75; // rdi\n  __int64 v76; // r11\n  __int64 v77; // rbp\n  __int64 v78; // r14\n  __int64 v79; // rdi\n  __int64 v80; // r11\n  __int64 v81; // rbx\n  __int64 v82; // r8\n  __int64 v83; // r9\n  __int64 v84; // r13\n  __int64 v85; // r11\n  __int64 v86; // r14\n  __int64 v87; // r12\n  __int64 v88; // rbx\n  __int64 v89; // ST58_8\n  __int64 v90; // ST50_8\n  __int64 v91; // r10\n  __int64 v92; // rdi\n  __int64 v93; // r12\n  __int64 v94; // r11\n  __int64 v95; // ST68_8\n  __int64 v96; // ST60_8\n  __int64 v97; // r10\n  __int64 v98; // rbp\n  __int64 v99; // rdi\n  __int64 v100; // r12\n  __int64 v101; // rsi\n  __int64 v102; // r9\n  __int64 v103; // rbp\n  __int64 v104; // rcx\n  __int64 v105; // ST08_8\n  __int64 v106; // ST30_8\n  __int64 v107; // rdx\n  __int64 v108; // r15\n  __int64 v109; // rdx\n  unsigned __int64 v110; // ST10_8\n  __int64 v111; // rax\n  unsigned __int64 v112; // r14\n  unsigned __int64 v113; // rdx\n  __int64 v114; // r13\n  unsigned __int64 v115; // ST18_8\n  __int64 v116; // rbx\n  unsigned __int64 v117; // r10\n  unsigned __int64 v118; // r13\n  unsigned __int64 v119; // r15\n  unsigned __int64 v120; // rbp\n  signed __int64 v121; // rcx\n  unsigned __int64 v122; // rdx\n  unsigned __int64 v123; // r9\n  unsigned __int64 v124; // r15\n  unsigned __int64 v125; // rdi\n  unsigned __int64 v126; // rbp\n  signed __int64 v127; // rdx\n  unsigned __int64 v128; // r10\n  unsigned __int64 v129; // rsi\n  signed __int64 v130; // rcx\n  unsigned __int64 v131; // rax\n  unsigned __int64 v132; // r13\n  unsigned __int64 v133; // rcx\n  unsigned __int64 v134; // rdx\n  __int64 v135; // r15\n  unsigned __int64 v136; // rbx\n  unsigned __int64 v137; // r11\n  unsigned __int64 v138; // r14\n  unsigned __int64 v139; // rbp\n  unsigned __int64 v140; // r15\n  unsigned __int64 v141; // r9\n  unsigned __int64 v142; // rdi\n  unsigned __int64 v143; // r8\n  unsigned __int64 v144; // r9\n  unsigned __int64 v145; // r15\n  unsigned __int64 v146; // ST48_8\n  unsigned __int64 v147; // ST38_8\n  unsigned __int64 v148; // rbx\n  unsigned __int64 v149; // ST40_8\n  unsigned __int64 v150; // rax\n  unsigned __int64 v151; // rsi\n  unsigned __int64 v152; // rcx\n  unsigned __int64 v153; // rdx\n  unsigned __int128 v154; // ST18_16\n  unsigned __int64 v155; // rbp\n  unsigned __int64 v156; // r11\n  unsigned __int64 v157; // r10\n  unsigned __int64 v158; // r15\n  unsigned __int64 v159; // rdi\n  unsigned __int64 v160; // ST00_8\n  unsigned __int64 v161; // r8\n  unsigned __int64 v162; // ST28_8\n  unsigned __int64 v163; // r13\n  unsigned __int64 v164; // rbx\n  unsigned __int64 v165; // r9\n  unsigned __int64 v166; // ST58_8\n  unsigned __int64 v167; // ST60_8\n  unsigned __int64 v168; // r13\n  unsigned __int64 v169; // ST70_8\n  unsigned __int64 v170; // ST30_8\n  unsigned __int64 v171; // ST78_8\n  unsigned __int64 v172; // ST80_8\n  unsigned __int64 v173; // ST88_8\n  unsigned __int64 v174; // ST90_8\n  unsigned __int64 v175; // rcx\n  unsigned __int64 v176; // r8\n  unsigned __int64 v177; // ST98_8\n  unsigned __int64 v178; // r15\n  unsigned __int64 v179; // rbp\n  unsigned __int64 v180; // STA0_8\n  unsigned __int64 v181; // STA8_8\n  __int64 v182; // r11\n  unsigned __int64 v183; // r9\n  unsigned __int64 v184; // r10\n  unsigned __int64 v185; // STB8_8\n  unsigned __int64 v186; // r14\n  unsigned __int64 v187; // rdi\n  unsigned __int64 v188; // rsi\n  unsigned __int64 v189; // rdx\n  unsigned __int64 v190; // r12\n  unsigned __int64 v191; // r13\n  unsigned __int64 v192; // r8\n  unsigned __int64 v193; // rax\n  unsigned __int64 v194; // rsi\n  unsigned __int64 v195; // ST30_8\n  unsigned __int64 v196; // rbp\n  unsigned __int64 v197; // rdx\n  unsigned __int64 v198; // r11\n  unsigned __int64 v199; // rsi\n  unsigned __int64 v200; // ST00_8\n  __int64 v201; // rax\n  unsigned __int64 v202; // r12\n  unsigned __int64 v203; // rcx\n  unsigned __int64 v204; // ST40_8\n  unsigned __int64 v205; // ST48_8\n  unsigned __int64 v206; // r10\n  unsigned __int64 v207; // ST50_8\n  unsigned __int64 v208; // ST60_8\n  __int64 v209; // ST58_8\n  unsigned __int64 v210; // ST68_8\n  unsigned __int64 v211; // ST80_8\n  unsigned __int64 v212; // rbp\n  unsigned __int64 v213; // r14\n  unsigned __int64 v214; // rax\n  unsigned __int64 v215; // r8\n  unsigned __int64 v216; // rdx\n  unsigned __int64 v217; // rax\n  __int64 v218; // rbx\n  unsigned __int64 v219; // ST38_8\n  unsigned __int64 v220; // rdi\n  unsigned __int64 v221; // ST70_8\n  unsigned __int64 v222; // r15\n  unsigned __int64 v223; // ST78_8\n  unsigned __int64 v224; // rdi\n  unsigned __int64 v225; // r13\n  unsigned __int64 v226; // rax\n  unsigned __int64 v227; // r8\n  unsigned __int64 v228; // r13\n  __int64 v229; // rbp\n  unsigned __int64 v230; // rbx\n  unsigned __int64 v231; // rax\n  unsigned __int64 v232; // rdi\n  unsigned __int64 v233; // r8\n  unsigned __int64 v234; // rdx\n  unsigned __int64 v235; // r15\n  unsigned __int64 v236; // r13\n  unsigned __int64 v237; // r9\n  unsigned __int64 v238; // rbp\n  unsigned __int64 v239; // rdx\n  unsigned __int64 v240; // rbx\n  __int64 v241; // r8\n  unsigned __int64 v242; // r10\n  unsigned __int64 v243; // r13\n  unsigned __int64 v244; // rax\n  unsigned __int64 v245; // r15\n  unsigned __int64 v246; // ST88_8\n  unsigned __int64 v247; // ST70_8\n  unsigned __int64 v248; // ST28_8\n  unsigned __int64 v249; // rdx\n  __int64 v250; // ST30_8\n  unsigned __int64 v251; // rcx\n  unsigned __int64 v252; // r11\n  unsigned __int64 v253; // rsi\n  unsigned __int64 v254; // r8\n  unsigned __int64 v255; // rax\n  unsigned __int64 v256; // r12\n  unsigned __int64 v257; // ST40_8\n  unsigned __int64 v258; // r9\n  unsigned __int64 v259; // r12\n  __int64 v260; // ST50_8\n  unsigned __int64 v261; // rax\n  __int64 v262; // r10\n  unsigned __int64 v263; // rax\n  unsigned __int64 v264; // rbp\n  __int64 v265; // ST58_8\n  unsigned __int64 v266; // r10\n  unsigned __int64 v267; // r15\n  unsigned __int64 v268; // r9\n  unsigned __int64 v269; // rax\n  unsigned __int64 v270; // r13\n  unsigned __int64 v271; // rbx\n  unsigned __int64 v272; // r13\n  unsigned __int64 v273; // r11\n  signed __int64 v274; // rsi\n  unsigned __int64 v275; // rcx\n  unsigned __int64 v276; // rax\n  unsigned __int64 v277; // r8\n  unsigned __int64 v278; // rax\n  unsigned __int64 v279; // rdx\n  unsigned __int64 v280; // r13\n  unsigned __int64 v281; // r9\n  __int64 v282; // r12\n  unsigned __int64 v283; // r8\n  unsigned __int64 v284; // r9\n  unsigned __int64 v285; // rdi\n  unsigned __int64 v286; // r10\n  unsigned __int64 v287; // rsi\n  unsigned __int64 result; // rax\n  unsigned __int64 v289; // rdx\n  unsigned __int64 v290; // r15\n  unsigned __int64 v291; // rbx\n  unsigned __int64 v292; // rcx\n  unsigned __int64 v293; // rbp\n  unsigned __int64 v294; // rcx\n  unsigned __int64 v295; // r11\n  __int64 v296; // rbx\n  unsigned __int64 v297; // rbp\n  __int64 v298; // r11\n  unsigned __int64 v299; // rcx\n  unsigned __int64 v300; // r11\n  unsigned __int64 v301; // rbx\n  signed __int64 v302; // rcx\n  unsigned __int64 v303; // rbp\n  unsigned __int64 v304; // rcx\n  __int64 v305; // [rsp+0h] [rbp-128h]\n  unsigned __int64 v306; // [rsp+0h] [rbp-128h]\n  _QWORD *v307; // [rsp+8h] [rbp-120h]\n  __int128 v308; // [rsp+18h] [rbp-110h]\n  int v309; // [rsp+78h] [rbp-B0h]\n  signed __int64 v310; // [rsp+80h] [rbp-A8h]\n  signed __int64 v311; // [rsp+C0h] [rbp-68h]\n  signed __int64 v312; // [rsp+D0h] [rbp-58h]\n  __int64 v313; // [rsp+E0h] [rbp-48h]\n  _QWORD *v314; // [rsp+E8h] [rbp-40h]\n  __int64 v315; // [rsp+F0h] [rbp-38h]\n\n  v3 = a2[1];\n  *(_QWORD *)&v308 = a3;\n  v313 = a1;\n  v4 = (((*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL) << 7) ^ *a2 ^ (*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL;\n  v5 = (v3 ^ (v3 >> 7)) & 0xAA00AA00AA00AALL;\n  v6 = v5;\n  v7 = v3 ^ v5;\n  v8 = a2;\n  v9 = (v4 ^ (v4 >> 14)) & 0xCCCC0000CCCCLL ^ v4 ^ (((v4 ^ (v4 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n  v10 = (v7 ^ (v6 << 7) ^ ((v7 ^ (unsigned __int64)(v6 << 7)) >> 14)) & 0xCCCC0000CCCCLL ^ v7 ^ (v6 << 7) ^ (((v7 ^ (v6 << 7) ^ ((v7 ^ (unsigned __int64)(v6 << 7)) >> 14)) & 0xCCCC0000CCCCLL) << 14);\n  v11 = ((unsigned int)v9 ^ (unsigned int)(v9 >> 28)) & 0xF0F0F0F0;\n  v12 = v11 ^ v9 ^ (v11 << 28);\n  v13 = ((unsigned int)v10 ^ (unsigned int)(v10 >> 28)) & 0xF0F0F0F0;\n  v14 = v13 ^ v10 ^ (v13 << 28);\n  v15 = (v14 ^ (v12 >> 8)) & 0xFF00FF00FF00FFLL;\n  v16 = v15 ^ v14;\n  v17 = (v15 << 8) ^ v12;\n  v18 = (unsigned __int16)v17;\n  v19 = v17 >> 48;\n  v20 = (unsigned __int16)v16;\n  v305 = WORD1(v17);\n  v21 = WORD2(v17);\n  v22 = WORD1(v16);\n  v23 = WORD2(v16);\n  v24 = v16 >> 48;\n  do\n  {\n    v8 += 2;\n    v25 = v8[1];\n    v26 = (*v8 ^ (*v8 >> 7)) & 0xAA00AA00AA00AALL;\n    v27 = *v8 ^ v26 ^ (v26 << 7);\n    v28 = (v25 ^ (v8[1] >> 7)) & 0xAA00AA00AA00AALL;\n    v29 = (((v27 ^ (v27 >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v27 ^ (v27 >> 14)) & 0xCCCC0000CCCCLL ^ v27;\n    v30 = (((v25 ^ v28 ^ (v28 << 7) ^ ((v25 ^ v28 ^ (unsigned __int64)(v28 << 7)) >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v25 ^ v28 ^ (v28 << 7) ^ ((v25 ^ v28 ^ (unsigned __int64)(v28 << 7)) >> 14)) & 0xCCCC0000CCCCLL ^ v25 ^ v28 ^ (v28 << 7);\n    v31 = ((unsigned int)v29 ^ (unsigned int)(v29 >> 28)) & 0xF0F0F0F0;\n    v32 = (v31 << 28) ^ v31 ^ v29;\n    v33 = ((unsigned int)v30 ^ (unsigned int)(v30 >> 28)) & 0xF0F0F0F0;\n    v34 = v33 ^ v30 ^ (v33 << 28);\n    v35 = (v34 ^ (v32 >> 8)) & 0xFF00FF00FF00FFLL;\n    v36 = v35 ^ v34;\n    v37 = (v35 << 8) ^ v32;\n    v18 |= (unsigned __int64)(unsigned __int16)v37 << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v305 |= (unsigned __int64)WORD1(v37) << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v19 |= v37 >> 48 << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v21 |= (unsigned __int64)WORD2(v37) << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v20 |= (unsigned __int64)(unsigned __int16)v36 << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v22 |= (unsigned __int64)WORD1(v36) << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v23 |= (unsigned __int64)WORD2(v36) << ((unsigned __int8)v8 - (unsigned __int8)a2);\n    v24 |= v36 >> 48 << ((unsigned __int8)v8 - (unsigned __int8)a2);\n  }\n  while ( v8 != a2 + 6 );\n  v38 = *(_DWORD *)(v308 + 1200);\n  v309 = v38;\n  v39 = (_QWORD *)(v308 + 8LL * (unsigned int)(8 * v38));\n  v40 = *v39 ^ v18;\n  v41 = v39[4] ^ v21;\n  v42 = v39[1] ^ v20;\n  v43 = v39[3] ^ v22;\n  v44 = v39[7] ^ v24;\n  v45 = v41 ^ v39[6] ^ v19;\n  v310 = v308 + 8LL * (unsigned int)(8 * v38);\n  v46 = v23 ^ v39[5];\n  v47 = v43 ^ v40;\n  v48 = v45;\n  v49 = v45 ^ v42 ^ v40;\n  v50 = v41 ^ v43 ^ v40;\n  v51 = v49;\n  v52 = v50 ^ v42;\n  v53 = v41 ^ v43 ^ v49;\n  v54 = v44 ^ v41 ^ v39[6] ^ v19;\n  v55 = v44 ^ v53;\n  v56 = v46 ^ v49;\n  v57 = v54 ^ v43;\n  v58 = v55 ^ v39[2] ^ v305;\n  v59 = v41 ^ v43;\n  v60 = v54 ^ v41;\n  v61 = v55 ^ v43;\n  v62 = v58 ^ v56 ^ v41 ^ v43;\n  v63 = v41 ^ v44;\n  v64 = (v56 ^ v50) & (v50 ^ v42);\n  v65 = v62;\n  v66 = v54 ^ v62;\n  v67 = v66 & (v55 ^ v43);\n  v68 = v59;\n  v69 = v59 & ~v58;\n  v70 = v66 ^ v56 ^ v50;\n  v71 = v51;\n  v72 = v69 ^ v70 & (v54 ^ v43);\n  v73 = v69 ^ ~v47 & v60;\n  v74 = v73 ^ v67 ^ v47 ^ v65 & v51;\n  v75 = v72 ^ v67 ^ v58 ^ v54 & v63;\n  v76 = v59 ^ v46;\n  v77 = v74 ^ v75;\n  v78 = v72 ^ v64 ^ v56 ^ v50 & v48 ^ v42;\n  v79 = v78 & v75;\n  v80 = v73 ^ v64 ^ v56 & v53 ^ v76;\n  v81 = v79 ^ v80;\n  v82 = v74 ^ (v79 ^ v80) & v77;\n  v83 = (v80 ^ v78) & (v79 ^ v74);\n  v84 = v83 ^ v80;\n  v85 = (v79 ^ v83) & v80;\n  v86 = v85 ^ v84 ^ v78;\n  v87 = v81;\n  v88 = v86 ^ v84;\n  v89 = v86 & v54;\n  v90 = (v86 ^ v84) & v66;\n  v91 = v77 ^ v82 & (v85 ^ v87);\n  v92 = v91 ^ v82;\n  v93 = v91 ^ v86;\n  v94 = v91 & v50;\n  v95 = (v91 ^ v82) & (v56 ^ v50);\n  v96 = v84 & v65;\n  v97 = v48 & v91;\n  v98 = v93;\n  v99 = v52 & v92;\n  v100 = v84 ^ v82;\n  v101 = v98 & (v60 ^ v47);\n  v102 = v84 ^ v82 ^ v98;\n  v103 = v60 & v98;\n  v104 = v82 & v56;\n  v105 = v63 & v86;\n  v106 = v84 & v71;\n  v107 = v102 & v57 ^ v99 ^ v101 ^ v97 ^ (v84 ^ v82) & v58;\n  v108 = v107 ^ v90;\n  v109 = v95 ^ v107;\n  v110 = v108 ^ v84 & v65;\n  v111 = v109 ^ v94;\n  v112 = v104 ^ v109;\n  v113 = v109 ^ v94 ^ v101 ^ v70 & v102;\n  v114 = v111 ^ v105 ^ v89 ^ v53 & v82 ^ (v65 ^ v71) & v84;\n  v115 = v114 ^ v97;\n  v116 = v103 ^ v106 ^ v61 & v88;\n  v117 = v116 ^ v68 & v100;\n  v118 = v99 ^ v102 & v57 ^ v116 ^ v114;\n  v119 = v104 ^ v89 ^ v94 ^ v108;\n  v120 = v113 ^ v102 & v57 ^ v95 ^ v90 ^ v105 ^ v106 ^ v96 ^ v104 ^ v103;\n  v121 = (v117 ^ (v117 >> 8)) & 0xCC00CC00CC00CCLL;\n  v306 = ((v121 << 8) ^ v121 ^ v117) & 0x5555555555555555LL | (((v121 << 8) ^ v121 ^ v117) >> 12) & 0xA000A000A000ALL | 16 * ((v121 << 8) ^ v121 ^ v117) & 0xAAA0AAA0AAA0AAA0LL;\n  v122 = (((v113 ^ (v113 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v113 ^ (v113 >> 8)) & 0xCC00CC00CC00CCLL ^ v113;\n  v123 = v122 & 0x5555555555555555LL | (v122 >> 12) & 0xA000A000A000ALL | 16 * v122 & 0xAAA0AAA0AAA0AAA0LL;\n  v124 = (((v119 ^ (v119 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v119 ^ (v119 >> 8)) & 0xCC00CC00CC00CCLL ^ v119;\n  v125 = v124 & 0x5555555555555555LL | (v124 >> 12) & 0xA000A000A000ALL | 16 * v124 & 0xAAA0AAA0AAA0AAA0LL;\n  v126 = (((v120 ^ (v120 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v120 ^ (v120 >> 8)) & 0xCC00CC00CC00CCLL ^ v120;\n  v127 = (v110 ^ (v110 >> 8)) & 0xCC00CC00CC00CCLL;\n  v128 = v126 & 0x5555555555555555LL | (v126 >> 12) & 0xA000A000A000ALL | 16 * v126 & 0xAAA0AAA0AAA0AAA0LL;\n  v129 = (v110 ^ v127 ^ (v127 << 8)) & 0x5555555555555555LL | ((v110 ^ v127 ^ (v127 << 8)) >> 12) & 0xA000A000A000ALL | 16 * (v110 ^ v127 ^ (v127 << 8)) & 0xAAA0AAA0AAA0AAA0LL;\n  v130 = (v115 ^ (v115 >> 8)) & 0xCC00CC00CC00CCLL;\n  v131 = (v115 ^ v130 ^ (v130 << 8)) & 0x5555555555555555LL | ((v115 ^ v130 ^ (v130 << 8)) >> 12) & 0xA000A000A000ALL | 16 * (v115 ^ v130 ^ (v130 << 8)) & 0xAAA0AAA0AAA0AAA0LL;\n  v132 = (((v118 ^ (v118 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v118 ^ (v118 >> 8)) & 0xCC00CC00CC00CCLL ^ v118;\n  v133 = v132 & 0x5555555555555555LL | (v132 >> 12) & 0xA000A000A000ALL | 16 * v132 & 0xAAA0AAA0AAA0AAA0LL;\n  v134 = (v112 ^ (v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL ^ (((v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) & 0x5555555555555555LL | ((v112 ^ (v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL ^ (((v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) >> 12) & 0xA000A000A000ALL | 16 * (v112 ^ (v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL ^ (((v112 ^ (v112 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) & 0xAAA0AAA0AAA0AAA0LL;\n  v314 = (_QWORD *)(v310 - 64);\n  if ( v309 != 1 )\n  {\n    v135 = (unsigned int)(v309 - 2);\n    v312 = 2814792717434890LL;\n    v136 = v306;\n    v315 = v135;\n    v307 = (_QWORD *)(v310 - 64);\n    v137 = v126 & 0x5555555555555555LL | (v126 >> 12) & 0xA000A000A000ALL | 16 * v126 & 0xAAA0AAA0AAA0AAA0LL;\n    v138 = v125;\n    v139 = v131;\n    v311 = v310 - (v135 << 6) - 128;\n    v140 = v123;\n    v141 = v134;\n    do\n    {\n      v142 = v140 ^ v307[1];\n      v143 = v307[4] ^ v129;\n      v144 = v307[7] ^ v141;\n      v145 = v137 ^ v307[3];\n      v146 = v136 ^ *v307;\n      v147 = v138 ^ v307[2];\n      v148 = v133 ^ v307[6];\n      v149 = v145;\n      v150 = v139 ^ v307[5];\n      v151 = v144 ^ v145;\n      v152 = v142;\n      v153 = v144 ^ v146;\n      v154 = __PAIR__(v148, v142);\n      v155 = v142 ^ v146;\n      v156 = v144 ^ v147;\n      v157 = v144 ^ v148;\n      v158 = v148 ^ v142;\n      v159 = v150 ^ v148;\n      v160 = v143;\n      v161 = v150 ^ v143;\n      v162 = v144;\n      v163 = v150 ^ v148 ^ v144 ^ v146;\n      v164 = v144 ^ v147 ^ v148;\n      v165 = v164 ^ v161 ^ v151;\n      v166 = v158;\n      v167 = v163 ^ ((v163 >> 1) & 0x7777777777777777LL | 8 * v163 & 0x8888888888888888LL);\n      v168 = v150 ^ v155 ^ (((v150 ^ v155) >> 1) & 0x7777777777777777LL | 8 * (v150 ^ v155) & 0x8888888888888888LL);\n      v169 = (((v157 ^ v153 ^ v152 ^ v147) >> 1) & 0x7777777777777777LL | 8 * (v157 ^ v153 ^ v152 ^ v147) & 0x8888888888888888LL) ^ v157 ^ v153 ^ v152 ^ v147;\n      v170 = v158 ^ v153 ^ v156 ^ v150 ^ v149 ^ (((v158 ^ v153 ^ v156 ^ v150 ^ v149) >> 1) & 0x7777777777777777LL | 8 * (v158 ^ v153 ^ v156 ^ v150 ^ v149) & 0x8888888888888888LL);\n      v171 = v165 ^ v158 ^ (((v165 ^ v158) >> 1) & 0x7777777777777777LL | 8 * (v165 ^ v158) & 0x8888888888888888LL);\n      v172 = v165 ^ ((v165 >> 1) & 0x7777777777777777LL | 8 * v165 & 0x8888888888888888LL);\n      v173 = v160 ^ v151 ^ v159 ^ (((v160 ^ v151 ^ v159) >> 1) & 0x7777777777777777LL | 8 * (v160 ^ v151 ^ v159) & 0x8888888888888888LL);\n      v174 = v157 ^ v161 ^ (((v157 ^ v161) >> 1) & 0x7777777777777777LL | 8 * (v157 ^ v161) & 0x8888888888888888LL);\n      v175 = v162 ^ ((v162 >> 1) & 0x7777777777777777LL | 8 * v162 & 0x8888888888888888LL);\n      v176 = v153 ^ ((v153 >> 1) & 0x7777777777777777LL | 8 * v153 & 0x8888888888888888LL);\n      v177 = v154 ^ (((unsigned __int64)v154 >> 1) & 0x7777777777777777LL | 8 * v154 & 0x8888888888888888LL);\n      v178 = v156 ^ ((v156 >> 1) & 0x7777777777777777LL | 8 * v156 & 0x8888888888888888LL);\n      v179 = v151 ^ ((v151 >> 1) & 0x7777777777777777LL | 8 * v151 & 0x8888888888888888LL);\n      v180 = v160 ^ ((v160 >> 1) & 0x7777777777777777LL | 8 * v160 & 0x8888888888888888LL);\n      v181 = v150 ^ ((v150 >> 1) & 0x7777777777777777LL | 8 * v150 & 0x8888888888888888LL);\n      v182 = *((_QWORD *)&v154 + 1);\n      v183 = v182 ^ ((*((_QWORD *)&v154 + 1) >> 2) & 0x3333333333333333LL | 4 * v182 & 0xCCCCCCCCCCCCCCCCLL);\n      v184 = ((v157 >> 2) & 0x3333333333333333LL | 4 * v157 & 0xCCCCCCCCCCCCCCCCLL) ^ v157;\n      v185 = v153 ^ ((v153 >> 2) & 0x3333333333333333LL | 4 * v153 & 0xCCCCCCCCCCCCCCCCLL);\n      v186 = v166 ^ ((v166 >> 2) & 0x3333333333333333LL | 4 * v166 & 0xCCCCCCCCCCCCCCCCLL);\n      v187 = v164 ^ ((v164 >> 2) & 0x3333333333333333LL | 4 * v164 & 0xCCCCCCCCCCCCCCCCLL);\n      v188 = ((v151 >> 2) & 0x3333333333333333LL | 4 * v151 & 0xCCCCCCCCCCCCCCCCLL) ^ v151;\n      v189 = v150 ^ ((v150 >> 2) & 0x3333333333333333LL | 4 * v150 & 0xCCCCCCCCCCCCCCCCLL);\n      v190 = ((v167 >> 2) & 0x3333333333333333LL | 4 * v167 & 0xCCCCCCCCCCCCCCCCLL) ^ ((v175 >> 2) & 0x3333333333333333LL | 4 * v175 & 0xCCCCCCCCCCCCCCCCLL) ^ v167 ^ v146 ^ ((v183 >> 1) & 0x7777777777777777LL | 8 * v183 & 0x8888888888888888LL);\n      *(_QWORD *)&v154 = ((v168 >> 2) & 0x3333333333333333LL | 4 * v168 & 0xCCCCCCCCCCCCCCCCLL) ^ (8 * v184 & 0x8888888888888888LL | (v184 >> 1) & 0x7777777777777777LL) ^ v168 ^ v154 ^ (4 * v176 & 0xCCCCCCCCCCCCCCCCLL | (v176 >> 2) & 0x3333333333333333LL);\n      v191 = ((v186 >> 1) & 0x7777777777777777LL | 8 * v186 & 0x8888888888888888LL) ^ v149 ^ v170 ^ (4 * v178 & 0xCCCCCCCCCCCCCCCCLL | (v178 >> 2) & 0x3333333333333333LL) ^ ((v170 >> 2) & 0x3333333333333333LL | 4 * v170 & 0xCCCCCCCCCCCCCCCCLL);\n      v192 = (8 * v187 & 0x8888888888888888LL | (v187 >> 1) & 0x7777777777777777LL) ^ v160 ^ v171 ^ (4 * v179 & 0xCCCCCCCCCCCCCCCCLL | (v179 >> 2) & 0x3333333333333333LL) ^ (4 * v171 & 0xCCCCCCCCCCCCCCCCLL | (v171 >> 2) & 0x3333333333333333LL);\n      v193 = (8 * v188 & 0x8888888888888888LL | (v188 >> 1) & 0x7777777777777777LL) ^ v172 ^ ((v180 >> 2) & 0x3333333333333333LL | 4 * v180 & 0xCCCCCCCCCCCCCCCCLL) ^ v150;\n      v194 = v182 ^ ((*((_QWORD *)&v154 + 1) >> 1) & 0x7777777777777777LL | 8 * v182 & 0x8888888888888888LL);\n      v195 = ((v172 >> 2) & 0x3333333333333333LL | 4 * v172 & 0xCCCCCCCCCCCCCCCCLL) ^ v193;\n      v196 = ((v189 >> 1) & 0x7777777777777777LL | 8 * v189 & 0x8888888888888888LL) ^ ((v194 >> 2) & 0x3333333333333333LL | 4 * v194 & 0xCCCCCCCCCCCCCCCCLL) ^ v174 ^ v162 ^ (4 * v174 & 0xCCCCCCCCCCCCCCCCLL | (v174 >> 2) & 0x3333333333333333LL);\n      v197 = v160 ^ ((v160 >> 2) & 0x3333333333333333LL | 4 * v160 & 0xCCCCCCCCCCCCCCCCLL);\n      v198 = v192 ^ ((v173 >> 2) & 0x3333333333333333LL | 4 * v173 & 0xCCCCCCCCCCCCCCCCLL) ^ *((_QWORD *)&v154 + 1) ^ v173 ^ (4 * v181 & 0xCCCCCCCCCCCCCCCCLL | (v181 >> 2) & 0x3333333333333333LL) ^ (8 * v197 & 0x8888888888888888LL | (v197 >> 1) & 0x7777777777777777LL);\n      v199 = v198 ^ v196;\n      v200 = v191 ^ v190;\n      *((_QWORD *)&v154 + 1) = v192 ^ v191;\n      v201 = v190 ^ v154;\n      v202 = v192 ^ v191 ^ v190;\n      v203 = v198 ^ v201 ^ v195;\n      v204 = v198 ^ v201;\n      v205 = v192 ^ v191 ^ v198 ^ v201;\n      v206 = v196 ^ v205;\n      v207 = v192 ^ v196;\n      v208 = v198 ^ v196 ^ v192;\n      v209 = v202 ^ v154;\n      v210 = v198 ^ v196 ^ v191;\n      v211 = v196 ^ v205 ^ v191;\n      v212 = v192 ^ v191;\n      v213 = v206 ^ v169 ^ ((v177 >> 2) & 0x3333333333333333LL | 4 * v177 & 0xCCCCCCCCCCCCCCCCLL) ^ v147 ^ (8 * v185 & 0x8888888888888888LL | (v185 >> 1) & 0x7777777777777777LL) ^ (4 * v169 & 0xCCCCCCCCCCCCCCCCLL | (v169 >> 2) & 0x3333333333333333LL);\n      v214 = v213 ^ v203 ^ v192 ^ v191;\n      v215 = (v192 ^ v191) & ~v213;\n      v216 = v214;\n      v217 = v199 ^ v214;\n      v218 = (v202 ^ v154) & (v203 ^ v202);\n      v219 = v216;\n      v220 = v217 ^ v203 ^ v202;\n      v221 = v217;\n      v222 = v211 & v217;\n      v223 = v220;\n      v224 = v215 ^ v220 & (v199 ^ v191);\n      v225 = v215 ^ v208 & ~v200;\n      v226 = v224 ^ v211 & v217 ^ v213 ^ v199 & v207;\n      v227 = v225 ^ v222 ^ v200 ^ v216 & v204;\n      v228 = v225 ^ v218 ^ v212 ^ v195 ^ v203 & v205;\n      v229 = v224 ^ v218 ^ v154 ^ v203 ^ v202 & v198;\n      v230 = v227 ^ v226;\n      v231 = v229 & v226;\n      v232 = v227 ^ (v231 ^ v228) & v230;\n      v233 = (v228 ^ v229) & (v231 ^ v227);\n      v234 = v231 ^ v228;\n      v235 = v233 ^ v228;\n      v236 = (v231 ^ v233) & v228;\n      v237 = v235;\n      v238 = v236 ^ v235 ^ v229;\n      v239 = v230 ^ v232 & (v236 ^ v234);\n      v240 = v235 ^ v232;\n      v241 = v239 ^ v238;\n      v242 = v239 ^ v232;\n      v243 = v238 ^ v235;\n      v244 = (v238 ^ v235) & v221;\n      v245 = v235 ^ v232 ^ v239 ^ v238;\n      *(_QWORD *)&v154 = v244;\n      v246 = v238 & v199;\n      v247 = v239 & v202;\n      v248 = (v239 ^ v232) & (v203 ^ v202);\n      v249 = v198 & v239;\n      v250 = v237 & v219;\n      v251 = v232 & v203;\n      v252 = v245 & v210;\n      v253 = v241 & (v208 ^ v200);\n      v254 = v208 & v241;\n      v255 = v249 ^ (v237 ^ v232) & v213;\n      v256 = v219 ^ v204;\n      v257 = v237 & v204;\n      v258 = v256 & v237;\n      v259 = v238 & v207;\n      v260 = v242 & v209;\n      v261 = v245 & v210 ^ v242 & v209 ^ v253 ^ v255;\n      v262 = v261 ^ v154;\n      v263 = v248 ^ v261;\n      v264 = v262 ^ v250;\n      v265 = v262;\n      v266 = v251 ^ v263;\n      v267 = v263 ^ v247 ^ v253 ^ v223 & v245;\n      v268 = v263 ^ v247 ^ v259 ^ v246 ^ v205 & v232 ^ v258;\n      v269 = v265 ^ v247 ^ v251 ^ v246;\n      v270 = v254 ^ v257 ^ v211 & v243;\n      v271 = v270 ^ *((_QWORD *)&v154 + 1) & v240;\n      v272 = v268 ^ v260 ^ v252 ^ v270;\n      v273 = v267 ^ v248 ^ v154 ^ v259 ^ v257 ^ v250 ^ v251 ^ v254 ^ v252;\n      v274 = (v271 ^ (v271 >> 8)) & 0xCC00CC00CC00CCLL;\n      v136 = (v274 ^ v271 ^ (v274 << 8)) & 0x5555555555555555LL | 16 * (v274 ^ v271 ^ (v274 << 8)) & 0xAAA0AAA0AAA0AAA0LL | v312 & ((v274 ^ v271 ^ (v274 << 8)) >> 12);\n      v275 = (v267 ^ (v267 >> 8)) & 0xCC00CC00CC00CCLL ^ v267 ^ (((v267 ^ (v267 >> 8)) & 0xCC00CC00CC00CCLL) << 8);\n      v140 = v275 & 0x5555555555555555LL | 16 * v275 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v275 >> 12);\n      v276 = (((v269 ^ (v269 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v269 ^ (v269 >> 8)) & 0xCC00CC00CC00CCLL ^ v269;\n      v138 = v276 & 0x5555555555555555LL | 16 * v276 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v276 >> 12);\n      v277 = (v273 ^ (v273 >> 8)) & 0xCC00CC00CC00CCLL ^ v273 ^ (((v273 ^ (v273 >> 8)) & 0xCC00CC00CC00CCLL) << 8);\n      v137 = v277 & 0x5555555555555555LL | 16 * v277 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v277 >> 12);\n      v278 = v264 ^ (v264 ^ (v264 >> 8)) & 0xCC00CC00CC00CCLL ^ (((v264 ^ (v264 >> 8)) & 0xCC00CC00CC00CCLL) << 8);\n      v129 = v278 & 0x5555555555555555LL | 16 * v278 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v278 >> 12);\n      v279 = (((v268 ^ v249 ^ ((v268 ^ v249) >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v268 ^ v249 ^ ((v268 ^ v249) >> 8)) & 0xCC00CC00CC00CCLL ^ v268 ^ v249;\n      v139 = v279 & 0x5555555555555555LL | 16 * v279 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v279 >> 12);\n      v307 -= 8;\n      v280 = (((v272 ^ (v272 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v272 ^ (v272 >> 8)) & 0xCC00CC00CC00CCLL ^ v272;\n      v133 = v280 & 0x5555555555555555LL | 16 * v280 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v280 >> 12);\n      v281 = (((v266 ^ (v266 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ v266 ^ (v266 ^ (v266 >> 8)) & 0xCC00CC00CC00CCLL;\n      v141 = v281 & 0x5555555555555555LL | 16 * v281 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v281 >> 12);\n    }\n    while ( v307 != (_QWORD *)v311 );\n    v134 = v141;\n    v306 = v136;\n    v125 = v138;\n    v123 = v140;\n    v131 = v139;\n    v128 = v277 & 0x5555555555555555LL | 16 * v277 & 0xAAA0AAA0AAA0AAA0LL | v312 & (v277 >> 12);\n    v314 += 8 * ~v315;\n  }\n  v282 = v313;\n  v283 = *v314 ^ v306;\n  v284 = v314[1] ^ v123;\n  v285 = v314[2] ^ v125;\n  v286 = v314[3] ^ v128;\n  v287 = v314[4] ^ v129;\n  result = v314[5] ^ v131;\n  v289 = v314[7] ^ v134;\n  v290 = v314[6] ^ v133;\n  do\n  {\n    v291 = (unsigned __int16)(v284 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(v286 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(result >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (unsigned __int64)((unsigned int)(v289 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) << 16)) << 16)) << 16);\n    v292 = (v291 ^ (((unsigned __int16)(v283 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(v285 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(v287 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (unsigned __int64)((unsigned int)(v290 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) << 16)) << 16)) << 16)) >> 8)) & 0xFF00FF00FF00FFLL;\n    v293 = v292;\n    v294 = v291 ^ v292;\n    v295 = (v293 << 8) ^ ((unsigned __int16)(v283 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(v285 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (((unsigned __int16)(v287 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) | (unsigned __int64)((unsigned int)(v290 >> ((unsigned __int8)v282 - (unsigned __int8)v313)) << 16)) << 16)) << 16));\n    v296 = ((unsigned int)v295 ^ (unsigned int)(v295 >> 28)) & 0xF0F0F0F0;\n    v297 = v296 ^ v295 ^ (v296 << 28);\n    v298 = ((unsigned int)v294 ^ (unsigned int)(v294 >> 28)) & 0xF0F0F0F0;\n    v299 = (v298 << 28) ^ v298 ^ v294;\n    v300 = (v297 ^ (v297 >> 14)) & 0xCCCC0000CCCCLL ^ v297 ^ (((v297 ^ (v297 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n    v301 = (v299 ^ (v299 >> 14)) & 0xCCCC0000CCCCLL ^ v299 ^ (((v299 ^ (v299 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n    v302 = (v300 ^ (v300 >> 7)) & 0xAA00AA00AA00AALL;\n    v303 = v302 ^ v300 ^ (v302 << 7);\n    *(_WORD *)v282 = v303;\n    v304 = (v301 ^ (v301 >> 7)) & 0xAA00AA00AA00AALL ^ v301 ^ (((v301 ^ (v301 >> 7)) & 0xAA00AA00AA00AALL) << 7);\n    *(_BYTE *)(v282 + 8) = v304;\n    v282 += 16LL;\n    *(_BYTE *)(v282 - 14) = BYTE2(v303);\n    *(_BYTE *)(v282 - 13) = BYTE3(v303);\n    *(_BYTE *)(v282 - 12) = BYTE4(v303);\n    *(_BYTE *)(v282 - 11) = BYTE5(v303);\n    *(_BYTE *)(v282 - 9) = HIBYTE(v303);\n    *(_BYTE *)(v282 - 10) = BYTE6(v303);\n    *(_BYTE *)(v282 - 7) = BYTE1(v304);\n    *(_BYTE *)(v282 - 6) = BYTE2(v304);\n    *(_BYTE *)(v282 - 5) = BYTE3(v304);\n    *(_BYTE *)(v282 - 4) = BYTE4(v304);\n    *(_BYTE *)(v282 - 3) = BYTE5(v304);\n    *(_BYTE *)(v282 - 1) = HIBYTE(v304);\n    *(_BYTE *)(v282 - 2) = v304 >> 48;\n  }\n  while ( v282 != v313 + 64 );\n  return result;\n}\n", 
            "funcStartAddr": "0x1ae70L", 
            "funcEndAddr": "0x1c626L", 
            "funcName": "sub_1AE70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1C630(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // er14\n  unsigned __int64 v4; // r14\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  signed __int64 v7; // r15\n  __int128 *v8; // rcx\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rax\n  char v11; // di^6\n  __int64 v12; // rax\n  unsigned __int64 v13; // rax\n  __int64 v15; // [rsp+0h] [rbp-90h]\n  __int128 v16; // [rsp+8h] [rbp-88h]\n  __int128 v17; // [rsp+18h] [rbp-78h]\n  __int128 v18; // [rsp+28h] [rbp-68h]\n  __int128 v19; // [rsp+38h] [rbp-58h]\n  unsigned __int64 v20; // [rsp+50h] [rbp-40h]\n\n  v3 = a3 + 15;\n  v20 = __readfsqword(0x28u);\n  if ( a3 >= 0 )\n    v3 = a3;\n  v4 = v3 >> 4;\n  v16 = 0LL;\n  v17 = 0LL;\n  v18 = 0LL;\n  v19 = 0LL;\n  if ( v4 )\n  {\n    v5 = a1;\n    v6 = a2;\n    v15 = a1 - 1296;\n    do\n    {\n      v7 = 4LL;\n      if ( v4 <= 4 )\n        v7 = v4;\n      __memcpy_chk(&v16, v6, 16 * v7, 64LL);\n      sub_1AE70((__int64)&v16, &v16, v15);\n      v8 = &v16;\n      v9 = v6;\n      do\n      {\n        v10 = *(_QWORD *)v8 ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 85) << 24) | *(unsigned __int8 *)(v5 - 88) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 87) << 8));\n        *(_BYTE *)v8 ^= *(_BYTE *)(v5 - 88);\n        *((_BYTE *)v8 + 1) = BYTE1(v10);\n        *((_BYTE *)v8 + 2) = BYTE2(v10);\n        *((_BYTE *)v8 + 3) = BYTE3(v10);\n        *((_BYTE *)v8 + 4) = BYTE4(v10);\n        *((_BYTE *)v8 + 5) = BYTE5(v10);\n        v11 = BYTE6(v10);\n        *((_BYTE *)v8 + 7) = HIBYTE(v10);\n        v12 = *(unsigned __int8 *)(v5 - 79);\n        *((_BYTE *)v8 + 6) = v11;\n        v9 += 16LL;\n        ++v8;\n        v13 = *((_QWORD *)v8 - 1) ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 77) << 24) | *(unsigned __int8 *)(v5 - 80) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 78) << 16) | (v12 << 8));\n        *((_WORD *)v8 - 4) = v13;\n        *((_BYTE *)v8 - 6) = BYTE2(v13);\n        *((_BYTE *)v8 - 5) = BYTE3(v13);\n        *((_BYTE *)v8 - 4) = BYTE4(v13);\n        *((_BYTE *)v8 - 3) = BYTE5(v13);\n        *((_BYTE *)v8 - 2) = BYTE6(v13);\n        *((_BYTE *)v8 - 1) = HIBYTE(v13);\n        *(__m128i *)(v5 - 88) = _mm_loadu_si128((const __m128i *)(v9 - 16));\n        *(__m128i *)(v9 - 16) = _mm_load_si128((const __m128i *)v8 - 1);\n      }\n      while ( v9 != v6 + 16 * v7 );\n      v4 -= v7;\n      v6 = v9;\n    }\n    while ( v4 );\n  }\n  sub_47E30(&v16, 64LL);\n  return __readfsqword(0x28u) ^ v20;\n}\n", 
            "funcStartAddr": "0x1c630L", 
            "funcEndAddr": "0x1c894L", 
            "funcName": "sub_1C630"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1C8A0(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // er14\n  unsigned __int64 v4; // r14\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  signed __int64 v7; // r15\n  __int128 *v8; // rcx\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rax\n  char v11; // di^6\n  __int64 v12; // rax\n  unsigned __int64 v13; // rax\n  __int64 v15; // [rsp+0h] [rbp-90h]\n  __int128 v16; // [rsp+8h] [rbp-88h]\n  __int128 v17; // [rsp+18h] [rbp-78h]\n  __int128 v18; // [rsp+28h] [rbp-68h]\n  __int128 v19; // [rsp+38h] [rbp-58h]\n  unsigned __int64 v20; // [rsp+50h] [rbp-40h]\n\n  v3 = a3 + 15;\n  v20 = __readfsqword(0x28u);\n  if ( a3 >= 0 )\n    v3 = a3;\n  v4 = v3 >> 4;\n  v16 = 0LL;\n  v17 = 0LL;\n  v18 = 0LL;\n  v19 = 0LL;\n  if ( v4 )\n  {\n    v5 = a1;\n    v6 = a2;\n    v15 = a1 - 1296;\n    do\n    {\n      v7 = 4LL;\n      if ( v4 <= 4 )\n        v7 = v4;\n      __memcpy_chk(&v16, v6, 16 * v7, 64LL);\n      sub_1AE70((__int64)&v16, &v16, v15);\n      v8 = &v16;\n      v9 = v6;\n      do\n      {\n        v10 = *(_QWORD *)v8 ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 85) << 24) | *(unsigned __int8 *)(v5 - 88) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 87) << 8));\n        *(_BYTE *)v8 ^= *(_BYTE *)(v5 - 88);\n        *((_BYTE *)v8 + 1) = BYTE1(v10);\n        *((_BYTE *)v8 + 2) = BYTE2(v10);\n        *((_BYTE *)v8 + 3) = BYTE3(v10);\n        *((_BYTE *)v8 + 4) = BYTE4(v10);\n        *((_BYTE *)v8 + 5) = BYTE5(v10);\n        v11 = BYTE6(v10);\n        *((_BYTE *)v8 + 7) = HIBYTE(v10);\n        v12 = *(unsigned __int8 *)(v5 - 79);\n        *((_BYTE *)v8 + 6) = v11;\n        v9 += 16LL;\n        ++v8;\n        v13 = *((_QWORD *)v8 - 1) ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 77) << 24) | *(unsigned __int8 *)(v5 - 80) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 78) << 16) | (v12 << 8));\n        *((_WORD *)v8 - 4) = v13;\n        *((_BYTE *)v8 - 6) = BYTE2(v13);\n        *((_BYTE *)v8 - 5) = BYTE3(v13);\n        *((_BYTE *)v8 - 4) = BYTE4(v13);\n        *((_BYTE *)v8 - 3) = BYTE5(v13);\n        *((_BYTE *)v8 - 2) = BYTE6(v13);\n        *((_BYTE *)v8 - 1) = HIBYTE(v13);\n        *(__m128i *)(v5 - 88) = _mm_loadu_si128((const __m128i *)(v9 - 16));\n        *(__m128i *)(v9 - 16) = _mm_load_si128((const __m128i *)v8 - 1);\n      }\n      while ( v9 != v6 + 16 * v7 );\n      v4 -= v7;\n      v6 = v9;\n    }\n    while ( v4 );\n  }\n  sub_47E30(&v16, 64LL);\n  return __readfsqword(0x28u) ^ v20;\n}\n", 
            "funcStartAddr": "0x1c8a0L", 
            "funcEndAddr": "0x1cb04L", 
            "funcName": "sub_1C8A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1CB10(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // er14\n  unsigned __int64 v4; // r14\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  signed __int64 v7; // r15\n  __int128 *v8; // rcx\n  __int64 v9; // rsi\n  unsigned __int64 v10; // rax\n  char v11; // di^6\n  __int64 v12; // rax\n  unsigned __int64 v13; // rax\n  __int64 v15; // [rsp+0h] [rbp-90h]\n  __int128 v16; // [rsp+8h] [rbp-88h]\n  __int128 v17; // [rsp+18h] [rbp-78h]\n  __int128 v18; // [rsp+28h] [rbp-68h]\n  __int128 v19; // [rsp+38h] [rbp-58h]\n  unsigned __int64 v20; // [rsp+50h] [rbp-40h]\n\n  v3 = a3 + 15;\n  v20 = __readfsqword(0x28u);\n  if ( a3 >= 0 )\n    v3 = a3;\n  v4 = v3 >> 4;\n  v16 = 0LL;\n  v17 = 0LL;\n  v18 = 0LL;\n  v19 = 0LL;\n  if ( v4 )\n  {\n    v5 = a1;\n    v6 = a2;\n    v15 = a1 - 1296;\n    do\n    {\n      v7 = 4LL;\n      if ( v4 <= 4 )\n        v7 = v4;\n      __memcpy_chk(&v16, v6, 16 * v7, 64LL);\n      sub_1AE70((__int64)&v16, &v16, v15);\n      v8 = &v16;\n      v9 = v6;\n      do\n      {\n        v10 = *(_QWORD *)v8 ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 81) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 82) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 83) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 84) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 85) << 24) | *(unsigned __int8 *)(v5 - 88) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 86) << 16) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 87) << 8));\n        *(_BYTE *)v8 ^= *(_BYTE *)(v5 - 88);\n        *((_BYTE *)v8 + 1) = BYTE1(v10);\n        *((_BYTE *)v8 + 2) = BYTE2(v10);\n        *((_BYTE *)v8 + 3) = BYTE3(v10);\n        *((_BYTE *)v8 + 4) = BYTE4(v10);\n        *((_BYTE *)v8 + 5) = BYTE5(v10);\n        v11 = BYTE6(v10);\n        *((_BYTE *)v8 + 7) = HIBYTE(v10);\n        v12 = *(unsigned __int8 *)(v5 - 79);\n        *((_BYTE *)v8 + 6) = v11;\n        v9 += 16LL;\n        ++v8;\n        v13 = *((_QWORD *)v8 - 1) ^ (((unsigned __int64)*(unsigned __int8 *)(v5 - 73) << 56) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 74) << 48) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 75) << 40) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 76) << 32) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 77) << 24) | *(unsigned __int8 *)(v5 - 80) | ((unsigned __int64)*(unsigned __int8 *)(v5 - 78) << 16) | (v12 << 8));\n        *((_WORD *)v8 - 4) = v13;\n        *((_BYTE *)v8 - 6) = BYTE2(v13);\n        *((_BYTE *)v8 - 5) = BYTE3(v13);\n        *((_BYTE *)v8 - 4) = BYTE4(v13);\n        *((_BYTE *)v8 - 3) = BYTE5(v13);\n        *((_BYTE *)v8 - 2) = BYTE6(v13);\n        *((_BYTE *)v8 - 1) = HIBYTE(v13);\n        *(__m128i *)(v5 - 88) = _mm_loadu_si128((const __m128i *)(v9 - 16));\n        *(__m128i *)(v9 - 16) = _mm_load_si128((const __m128i *)v8 - 1);\n      }\n      while ( v9 != v6 + 16 * v7 );\n      v4 -= v7;\n      v6 = v9;\n    }\n    while ( v4 );\n  }\n  sub_47E30(&v16, 64LL);\n  return __readfsqword(0x28u) ^ v20;\n}\n", 
            "funcStartAddr": "0x1cb10L", 
            "funcEndAddr": "0x1cd74L", 
            "funcName": "sub_1CB10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1CD80(__int64 a1, _QWORD *a2, __int64 a3)\n{\n  _QWORD *v3; // rbp\n  unsigned __int64 v4; // r9\n  unsigned __int64 v5; // r8\n  unsigned __int64 v6; // rdi\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdi\n  __int64 v9; // rcx\n  unsigned __int64 v10; // rcx\n  __int64 v11; // rax\n  unsigned __int64 v12; // rdi\n  signed __int64 v13; // rbx\n  unsigned __int64 v14; // rdi\n  __int64 v15; // r9\n  unsigned __int64 v16; // rcx\n  __int64 v17; // rbx\n  __int64 v18; // r8\n  __int64 v19; // rax\n  __int64 v20; // r13\n  unsigned __int64 v21; // rdi\n  __int64 v22; // r14\n  signed __int64 v23; // r11\n  unsigned __int64 v24; // r12\n  signed __int64 v25; // rcx\n  unsigned __int64 v26; // r12\n  unsigned __int64 v27; // rcx\n  __int64 v28; // r11\n  unsigned __int64 v29; // r12\n  __int64 v30; // r14\n  unsigned __int64 v31; // r11\n  signed __int64 v32; // r14\n  unsigned __int64 v33; // r11\n  unsigned __int64 v34; // r12\n  unsigned __int64 v35; // r9\n  unsigned __int64 v36; // rax\n  __int64 v37; // rcx\n  unsigned __int64 v38; // rdi\n  unsigned __int64 v39; // r15\n  signed __int64 v40; // rbx\n  unsigned __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  int v43; // edx\n  unsigned __int64 v44; // rcx\n  unsigned __int64 v45; // r14\n  unsigned __int64 v46; // rdx\n  unsigned __int64 v47; // rcx\n  unsigned __int64 v48; // r10\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r8\n  unsigned __int64 v51; // r13\n  unsigned __int64 v52; // rdi\n  unsigned __int64 v53; // rbp\n  unsigned __int64 v54; // ST30_8\n  unsigned __int64 v55; // r11\n  unsigned __int64 v56; // rdx\n  unsigned __int64 v57; // rsi\n  unsigned __int64 v58; // ST38_8\n  unsigned __int64 v59; // ST28_8\n  unsigned __int64 v60; // r11\n  unsigned __int64 v61; // ST40_8\n  unsigned __int64 v62; // r10\n  unsigned __int64 v63; // r15\n  unsigned __int64 v64; // rax\n  unsigned __int64 v65; // rcx\n  unsigned __int64 v66; // r12\n  unsigned __int64 v67; // ST20_8\n  unsigned __int64 v68; // r15\n  unsigned __int64 v69; // ST68_8\n  unsigned __int64 v70; // rdi\n  unsigned __int64 v71; // ST58_8\n  unsigned __int64 v72; // r11\n  unsigned __int64 v73; // rbp\n  unsigned __int64 v74; // ST48_8\n  unsigned __int64 v75; // ST50_8\n  unsigned __int64 v76; // rdx\n  unsigned __int64 v77; // r10\n  unsigned __int64 v78; // ST18_8\n  unsigned __int64 v79; // ST70_8\n  unsigned __int64 v80; // rsi\n  unsigned __int64 v81; // ST60_8\n  unsigned __int64 v82; // r15\n  unsigned __int64 v83; // r11\n  unsigned __int64 v84; // rdi\n  unsigned __int64 v85; // r9\n  unsigned __int64 v86; // rax\n  unsigned __int64 v87; // rdx\n  unsigned __int64 v88; // rbx\n  unsigned __int64 v89; // rdi\n  unsigned __int64 v90; // r15\n  unsigned __int64 v91; // r14\n  unsigned __int64 v92; // r11\n  unsigned __int64 v93; // r9\n  unsigned __int64 v94; // rbx\n  unsigned __int64 v95; // rdx\n  unsigned __int64 v96; // rax\n  unsigned __int64 v97; // r10\n  unsigned __int64 v98; // r15\n  unsigned __int64 v99; // rdx\n  unsigned __int64 v100; // ST00_8\n  unsigned __int64 v101; // rcx\n  unsigned __int64 v102; // rdi\n  unsigned __int64 v103; // r8\n  unsigned __int64 v104; // r12\n  __int64 v105; // rsi\n  unsigned __int64 v106; // rdx\n  __int64 v107; // ST10_8\n  unsigned __int64 v108; // ST28_8\n  unsigned __int64 v109; // ST40_8\n  unsigned __int64 v110; // rsi\n  unsigned __int64 v111; // rdx\n  unsigned __int64 v112; // r13\n  unsigned __int64 v113; // r10\n  unsigned __int64 v114; // rcx\n  unsigned __int64 v115; // rbp\n  unsigned __int64 v116; // r14\n  unsigned __int64 v117; // r8\n  __int64 v118; // r9\n  unsigned __int64 v119; // r11\n  unsigned __int64 v120; // rdi\n  unsigned __int64 v121; // r10\n  unsigned __int64 v122; // rax\n  unsigned __int64 v123; // r14\n  unsigned __int64 v124; // rcx\n  unsigned __int64 v125; // rbx\n  unsigned __int64 v126; // rax\n  unsigned __int64 v127; // r13\n  signed __int64 v128; // rsi\n  unsigned __int64 v129; // r8\n  unsigned __int64 v130; // r11\n  unsigned __int64 v131; // rdi\n  unsigned __int64 v132; // ST00_8\n  unsigned __int64 v133; // rbx\n  unsigned __int64 v134; // ST18_8\n  unsigned __int64 v135; // rax\n  unsigned __int64 v136; // ST20_8\n  unsigned __int64 v137; // rcx\n  unsigned __int64 v138; // r10\n  unsigned __int64 v139; // r8\n  unsigned __int64 v140; // rdi\n  unsigned __int64 v141; // r13\n  unsigned __int64 v142; // r8\n  unsigned __int64 v143; // r14\n  unsigned __int64 v144; // r13\n  unsigned __int64 v145; // rbp\n  unsigned __int64 v146; // r11\n  unsigned __int64 v147; // rsi\n  unsigned __int64 v148; // r14\n  unsigned __int64 v149; // rcx\n  unsigned __int64 v150; // rbx\n  unsigned __int64 v151; // r12\n  unsigned __int64 v152; // r9\n  unsigned __int64 v153; // r15\n  unsigned __int64 v154; // r13\n  unsigned __int64 v155; // r15\n  unsigned __int64 v156; // rdx\n  unsigned __int64 v157; // rcx\n  unsigned __int64 v158; // r14\n  unsigned __int64 v159; // r8\n  unsigned __int64 v160; // ST10_8\n  unsigned __int64 v161; // r12\n  unsigned __int64 v162; // ST20_8\n  unsigned __int64 v163; // ST30_8\n  unsigned __int64 v164; // r11\n  unsigned __int64 v165; // ST38_8\n  unsigned __int64 v166; // rbx\n  unsigned __int64 v167; // r13\n  unsigned __int64 v168; // rax\n  unsigned __int64 v169; // r15\n  unsigned __int64 v170; // r10\n  unsigned __int64 v171; // r14\n  unsigned __int64 v172; // ST40_8\n  unsigned __int64 v173; // ST18_8\n  unsigned __int64 v174; // r11\n  unsigned __int64 v175; // rax\n  unsigned __int64 v176; // rsi\n  unsigned __int64 v177; // rdx\n  unsigned __int64 v178; // r14\n  unsigned __int64 v179; // ST58_8\n  unsigned __int64 v180; // r9\n  unsigned __int64 v181; // ST70_8\n  unsigned __int64 v182; // r12\n  unsigned __int64 v183; // ST68_8\n  unsigned __int64 v184; // ST50_8\n  unsigned __int64 v185; // r9\n  unsigned __int64 v186; // ST48_8\n  unsigned __int64 v187; // rsi\n  unsigned __int64 v188; // rcx\n  unsigned __int64 v189; // ST60_8\n  unsigned __int64 v190; // r14\n  unsigned __int64 v191; // r10\n  unsigned __int64 v192; // ST28_8\n  unsigned __int64 v193; // rbp\n  unsigned __int64 v194; // r15\n  unsigned __int64 v195; // rsi\n  unsigned __int64 v196; // rax\n  unsigned __int64 v197; // rdx\n  unsigned __int64 v198; // rcx\n  unsigned __int64 v199; // rbp\n  unsigned __int64 v200; // rsi\n  unsigned __int64 v201; // rbp\n  unsigned __int64 v202; // rdi\n  unsigned __int64 v203; // r10\n  unsigned __int64 v204; // r9\n  unsigned __int64 v205; // rax\n  unsigned __int64 v206; // rcx\n  unsigned __int64 v207; // rdx\n  __int64 v208; // r9\n  unsigned __int64 v209; // r14\n  __int64 v210; // ST00_8\n  unsigned __int64 v211; // rcx\n  unsigned __int64 v212; // rsi\n  unsigned __int64 v213; // r8\n  unsigned __int64 v214; // ST40_8\n  unsigned __int64 v215; // rdi\n  __int64 v216; // r12\n  unsigned __int64 v217; // rbx\n  unsigned __int64 v218; // r15\n  unsigned __int64 v219; // ST28_8\n  unsigned __int64 v220; // ST20_8\n  unsigned __int64 v221; // rsi\n  unsigned __int64 v222; // r9\n  unsigned __int64 v223; // r13\n  unsigned __int64 v224; // r11\n  __int64 v225; // rcx\n  unsigned __int64 v226; // r15\n  unsigned __int64 v227; // r8\n  unsigned __int64 v228; // r10\n  unsigned __int64 v229; // rdx\n  unsigned __int64 v230; // r13\n  unsigned __int64 v231; // rbx\n  unsigned __int64 v232; // rax\n  unsigned __int64 v233; // r10\n  unsigned __int64 v234; // rcx\n  unsigned __int64 v235; // rsi\n  unsigned __int64 v236; // rdi\n  unsigned __int64 v237; // rax\n  signed __int64 v238; // ST28_8\n  unsigned __int64 v239; // r15\n  unsigned __int64 v240; // rdx\n  unsigned __int64 v241; // rbx\n  unsigned __int64 v242; // rax\n  unsigned __int64 v243; // r9\n  signed __int64 v244; // r12\n  signed __int64 v245; // rcx\n  signed __int64 v246; // r13\n  unsigned __int64 v247; // r12\n  unsigned __int64 v248; // r15\n  unsigned __int64 v249; // r10\n  unsigned __int64 v250; // r14\n  unsigned __int64 v251; // rbp\n  __int64 v252; // rdi\n  unsigned __int64 v253; // r9\n  unsigned __int64 v254; // r8\n  unsigned __int64 v255; // rsi\n  unsigned __int64 v256; // rax\n  unsigned __int64 v257; // rcx\n  unsigned __int64 v258; // rax\n  unsigned __int64 v259; // rdx\n  __int64 v260; // rsi\n  unsigned __int64 v261; // rcx\n  __int64 v262; // rdx\n  unsigned __int64 v263; // rax\n  unsigned __int64 v264; // rdx\n  unsigned __int64 v265; // rsi\n  signed __int64 v266; // rax\n  unsigned __int64 v267; // rcx\n  unsigned __int64 v268; // rax\n  unsigned __int64 result; // rax\n  __int64 v270; // [rsp+0h] [rbp-B8h]\n  unsigned __int64 v271; // [rsp+0h] [rbp-B8h]\n  unsigned __int64 v272; // [rsp+0h] [rbp-B8h]\n  unsigned __int64 v273; // [rsp+8h] [rbp-B0h]\n  _QWORD *v274; // [rsp+8h] [rbp-B0h]\n  unsigned __int64 v275; // [rsp+10h] [rbp-A8h]\n  signed __int64 v276; // [rsp+78h] [rbp-40h]\n  __int64 v277; // [rsp+80h] [rbp-38h]\n\n  v3 = a2;\n  v4 = a2[1];\n  v277 = a1;\n  v5 = (((*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL) << 7) ^ *a2 ^ (*a2 ^ (*a2 >> 7)) & 0xAA00AA00AA00AALL;\n  v6 = v4 ^ (v4 ^ (v4 >> 7)) & 0xAA00AA00AA00AALL ^ (((v4 ^ (v4 >> 7)) & 0xAA00AA00AA00AALL) << 7);\n  v7 = (v5 ^ (v5 >> 14)) & 0xCCCC0000CCCCLL ^ v5 ^ (((v5 ^ (v5 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n  v8 = (v6 ^ (v6 >> 14)) & 0xCCCC0000CCCCLL ^ v6 ^ (((v6 ^ (v6 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n  v9 = ((unsigned int)v7 ^ (unsigned int)(v7 >> 28)) & 0xF0F0F0F0;\n  v10 = v9 ^ v7 ^ (v9 << 28);\n  v11 = ((unsigned int)v8 ^ (unsigned int)(v8 >> 28)) & 0xF0F0F0F0;\n  v12 = v11 ^ v8 ^ (v11 << 28);\n  v13 = (v12 ^ (v10 >> 8)) & 0xFF00FF00FF00FFLL;\n  v14 = v13 ^ v12;\n  v15 = (unsigned __int16)v14;\n  v16 = (v13 << 8) ^ v10;\n  v270 = (unsigned __int16)v16;\n  v273 = v16 >> 48;\n  v17 = WORD1(v16);\n  v18 = WORD2(v14);\n  v19 = WORD2(v16);\n  v20 = WORD1(v14);\n  v21 = v14 >> 48;\n  do\n  {\n    v3 += 2;\n    v22 = v3[1];\n    v23 = (*v3 ^ (*v3 >> 7)) & 0xAA00AA00AA00AALL;\n    v24 = *v3 ^ v23 ^ (v23 << 7);\n    v25 = (v22 ^ (v3[1] >> 7)) & 0xAA00AA00AA00AALL;\n    v26 = (((v24 ^ (v24 >> 14)) & 0xCCCC0000CCCCLL) << 14) ^ (v24 ^ (v24 >> 14)) & 0xCCCC0000CCCCLL ^ v24;\n    v27 = (v22 ^ v25 ^ (v25 << 7) ^ ((v22 ^ v25 ^ (unsigned __int64)(v25 << 7)) >> 14)) & 0xCCCC0000CCCCLL ^ v22 ^ v25 ^ (v25 << 7) ^ (((v22 ^ v25 ^ (v25 << 7) ^ ((v22 ^ v25 ^ (unsigned __int64)(v25 << 7)) >> 14)) & 0xCCCC0000CCCCLL) << 14);\n    v28 = ((unsigned int)v26 ^ (unsigned int)(v26 >> 28)) & 0xF0F0F0F0;\n    v29 = (v28 << 28) ^ v28 ^ v26;\n    v30 = ((unsigned int)v27 ^ (unsigned int)(v27 >> 28)) & 0xF0F0F0F0;\n    v31 = v30 ^ v27 ^ (v30 << 28);\n    v32 = (v31 ^ (v29 >> 8)) & 0xFF00FF00FF00FFLL;\n    v33 = v32 ^ v31;\n    v34 = (v32 << 8) ^ v29;\n    v270 |= (unsigned __int64)(unsigned __int16)v34 << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v17 |= (unsigned __int64)WORD1(v34) << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v273 |= v34 >> 48 << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v15 |= (unsigned __int64)(unsigned __int16)v33 << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v19 |= (unsigned __int64)WORD2(v34) << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v20 |= (unsigned __int64)WORD1(v33) << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v18 |= (unsigned __int64)WORD2(v33) << ((unsigned __int8)v3 - (unsigned __int8)a2);\n    v21 |= v33 >> 48 << ((unsigned __int8)v3 - (unsigned __int8)a2);\n  }\n  while ( v3 != a2 + 6 );\n  v35 = *(_QWORD *)(a3 + 8) ^ v15;\n  v36 = *(_QWORD *)(a3 + 32) ^ v19;\n  v37 = *(_QWORD *)(a3 + 40);\n  v38 = *(_QWORD *)(a3 + 56) ^ v21;\n  v39 = *(_QWORD *)(a3 + 16) ^ v17;\n  v40 = a3 + 64;\n  v275 = *(_QWORD *)a3 ^ v270;\n  v41 = v20 ^ *(_QWORD *)(a3 + 24);\n  v42 = *(_QWORD *)(a3 + 48) ^ v273;\n  v43 = *(_DWORD *)(a3 + 1200);\n  v44 = v18 ^ v37;\n  v271 = v35;\n  v274 = (_QWORD *)v40;\n  if ( v43 != 1 )\n  {\n    v45 = v38;\n    v276 = v40 + (((unsigned int)(v43 - 2) + 1LL) << 6);\n    v46 = v39;\n    do\n    {\n      v47 = v42 ^ v44;\n      v48 = v36 ^ v46;\n      v49 = v45 ^ v46;\n      v50 = v47 ^ v275;\n      v51 = v45 ^ v271;\n      v52 = v45 ^ v271 ^ v36 ^ v46;\n      v53 = v47 ^ v275 ^ v271;\n      v54 = v47 ^ v275 ^ v36;\n      v55 = v52 ^ v41;\n      v56 = v55 ^ v46;\n      v57 = v55 ^ v42;\n      v58 = v45 ^ v47 ^ v275;\n      v59 = v48;\n      v60 = v57 ^ v45 ^ v36;\n      v61 = v53 ^ v49;\n      v62 = v52;\n      v63 = v56 ^ v47;\n      v64 = v45 ^ v36;\n      v65 = v60 ^ v47;\n      v66 = v60 ^ v275;\n      v67 = v63;\n      v68 = v60 ^ v63;\n      v69 = v60;\n      v70 = v56 ^ v275;\n      v71 = v53;\n      v72 = v56 & v62;\n      v73 = v56;\n      v74 = v64;\n      v75 = v62;\n      v76 = v64 & ~v57;\n      v77 = v72;\n      v78 = v49;\n      v79 = v68;\n      v80 = v72 ^ v57;\n      v81 = v70;\n      v82 = v76 ^ v68 & v59;\n      v83 = v76 ^ v67 & v49;\n      v84 = v82 ^ v80 ^ v70 & v61;\n      v85 = v83 ^ v77 ^ v67 ^ v49 ^ v54 & v275;\n      v86 = v82 ^ v65 & v51 ^ v65 ^ v51 ^ v50 & ~v271;\n      v87 = v83 ^ v66 & v58 ^ v65 ^ v45 ^ v65 & (v45 ^ v271);\n      v88 = v84;\n      v89 = v86 & v84;\n      v90 = v85 ^ v88;\n      v91 = v89 ^ v83 ^ v66 & v58 ^ v65 ^ v45 ^ v65 & (v45 ^ v271);\n      v92 = v85 ^ v91 & (v85 ^ v88);\n      v93 = (v87 ^ v86) & (v89 ^ v85);\n      v94 = v93 ^ v87;\n      v95 = (v89 ^ v93) & v87;\n      v96 = v95 ^ v94 ^ v86;\n      v97 = v90 ^ v92 & (v91 ^ v95);\n      v98 = v97 ^ v96;\n      v99 = v94 ^ v92 ^ v97 ^ v96;\n      v100 = v94 & v275;\n      v101 = (v97 ^ v92) & v65;\n      v102 = v51 & (v97 ^ v92);\n      v103 = v97 & v50;\n      v104 = v92 & v66;\n      v105 = v99 & v79;\n      v106 = v59 & v99;\n      v107 = v105;\n      v108 = v106;\n      v109 = v96 & v61;\n      v110 = v106 ^ (v94 ^ v92) & v74;\n      v111 = v101 ^ (v96 ^ v94) & v73;\n      v112 = v110 ^ v103;\n      v113 = v104 ^ v71 & v97;\n      v114 = v107 ^ v69 & (v94 ^ v92) ^ v101;\n      v115 = v111 ^ v102 ^ v100;\n      v116 = v110 ^ v103 ^ v109 ^ v75 & (v96 ^ v94);\n      v117 = v114 ^ v103;\n      v118 = v112 ^ v107 ^ v98 & v67;\n      v119 = v118 ^ v115 ^ v58 & v92;\n      v120 = v113 ^ v102;\n      v121 = v115 ^ v110 ^ v113;\n      v122 = v116 ^ v81 & v96;\n      v123 = v114 ^ v116;\n      v124 = v122 ^ v111;\n      v125 = v119 ^ v109 ^ v54 & v94;\n      v126 = v100 ^ v104 ^ v122;\n      v127 = v124 ^ v117;\n      v128 = (v121 ^ (v121 >> 8)) & 0xCC00CC00CC00CCLL;\n      v129 = v119 ^ v108 ^ v98 & v78 ^ v117;\n      v130 = ((v128 << 8) ^ v128 ^ v121) & 0x5555555555555555LL | (((v128 << 8) ^ v128 ^ v121) << 12) & 0xA000A000A000A000LL | (((v128 << 8) ^ v128 ^ v121) >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v131 = (((v118 ^ v120 ^ ((v118 ^ v120) >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v118 ^ v120 ^ ((v118 ^ v120) >> 8)) & 0xCC00CC00CC00CCLL ^ v118 ^ v120;\n      v132 = v131 & 0x5555555555555555LL | (v131 << 12) & 0xA000A000A000A000LL | (v131 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v133 = (((v125 ^ (v125 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v125 ^ (v125 >> 8)) & 0xCC00CC00CC00CCLL ^ v125;\n      v135 = (((v126 ^ (v126 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v126 ^ (v126 >> 8)) & 0xCC00CC00CC00CCLL ^ v126;\n      v136 = v135 & 0x5555555555555555LL | (v135 << 12) & 0xA000A000A000A000LL | (v135 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v137 = (((v124 ^ (v124 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v124 ^ (v124 >> 8)) & 0xCC00CC00CC00CCLL ^ v124;\n      v138 = v137 & 0x5555555555555555LL | (v137 << 12) & 0xA000A000A000A000LL | (v137 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v139 = (((v129 ^ (v129 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v129 ^ (v129 >> 8)) & 0xCC00CC00CC00CCLL ^ v129;\n      v140 = v139 & 0x5555555555555555LL | (v139 << 12) & 0xA000A000A000A000LL | (v139 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v141 = (((v127 ^ (v127 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v127 ^ (v127 >> 8)) & 0xCC00CC00CC00CCLL ^ v127;\n      v142 = v141 & 0x5555555555555555LL | (v141 << 12) & 0xA000A000A000A000LL | (v141 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v134 = v133 & 0x5555555555555555LL | (v133 << 12) & 0xA000A000A000A000LL | (v133 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v143 = (((v123 ^ (v123 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v123 ^ (v123 >> 8)) & 0xCC00CC00CC00CCLL ^ v123;\n      v144 = v143 & 0x5555555555555555LL | (v143 << 12) & 0xA000A000A000A000LL | (v143 >> 4) & 0xAAA0AAA0AAA0AAALL;\n      v145 = (v130 >> 1) & 0x7777777777777777LL | 8 * v130 & 0x8888888888888888LL;\n      v146 = v145 ^ v130;\n      v147 = v132 ^ ((v132 >> 1) & 0x7777777777777777LL | 8 * v132 & 0x8888888888888888LL);\n      v148 = v134 ^ ((v134 >> 1) & 0x7777777777777777LL | 8 * v134 & 0x8888888888888888LL);\n      v149 = v136 ^ ((v136 >> 1) & 0x7777777777777777LL | 8 * v136 & 0x8888888888888888LL);\n      v150 = v138 ^ ((v138 >> 1) & 0x7777777777777777LL | 8 * v138 & 0x8888888888888888LL);\n      v151 = v140 ^ ((v140 >> 1) & 0x7777777777777777LL | 8 * v140 & 0x8888888888888888LL);\n      v152 = v142 ^ ((v142 >> 1) & 0x7777777777777777LL | 8 * v142 & 0x8888888888888888LL);\n      v153 = (v144 >> 1) & 0x7777777777777777LL | 8 * v144 & 0x8888888888888888LL;\n      v154 = v153 ^ v144;\n      v275 = v154 ^ *v274 ^ v145 ^ (4 * v146 & 0xCCCCCCCCCCCCCCCCLL | (v146 >> 2) & 0x3333333333333333LL);\n      v271 = v154 ^ v147 ^ v274[1] ^ v132 ^ v146 ^ (4 * v147 & 0xCCCCCCCCCCCCCCCCLL | (v147 >> 2) & 0x3333333333333333LL);\n      v46 = v148 ^ v147 ^ v274[2] ^ v134 ^ (4 * v148 & 0xCCCCCCCCCCCCCCCCLL | (v148 >> 2) & 0x3333333333333333LL);\n      v41 = v149 ^ v148 ^ v154 ^ v274[3] ^ v136 ^ (4 * v149 & 0xCCCCCCCCCCCCCCCCLL | (v149 >> 2) & 0x3333333333333333LL);\n      v36 = v150 ^ v149 ^ v154 ^ v274[4] ^ v138 ^ (4 * v150 & 0xCCCCCCCCCCCCCCCCLL | (v150 >> 2) & 0x3333333333333333LL);\n      v44 = v151 ^ v274[5] ^ v140 ^ v150 ^ (4 * v151 & 0xCCCCCCCCCCCCCCCCLL | (v151 >> 2) & 0x3333333333333333LL);\n      v42 = v152 ^ v274[6] ^ v142 ^ v151 ^ (4 * v152 & 0xCCCCCCCCCCCCCCCCLL | (v152 >> 2) & 0x3333333333333333LL);\n      v155 = v274[7] ^ v153;\n      v274 += 8;\n      v45 = v155 ^ v152 ^ (4 * v154 & 0xCCCCCCCCCCCCCCCCLL | (v154 >> 2) & 0x3333333333333333LL);\n    }\n    while ( v274 != (_QWORD *)v276 );\n    v39 = v46;\n    v38 = v45;\n  }\n  v156 = v275;\n  v157 = v42 ^ v44;\n  v158 = v38 ^ v36;\n  v159 = v157 ^ v275;\n  v160 = v38 ^ v39;\n  v161 = v38 ^ v271 ^ v36 ^ v39;\n  v162 = v36 ^ v39;\n  v163 = v159 ^ v36;\n  v164 = v161 ^ v41;\n  v165 = v38 ^ v159;\n  v166 = v164 ^ v39;\n  v167 = v42 ^ v164;\n  v168 = v159 ^ v271 ^ v38 ^ v39;\n  v169 = v164 ^ v39 ^ v157;\n  v170 = v158;\n  v171 = v42 ^ v164 ^ v158;\n  v172 = v168;\n  v173 = v169;\n  v174 = v171 ^ v156;\n  v175 = v156;\n  v176 = v156;\n  v177 = v171;\n  v178 = v169 ^ v171;\n  v179 = v159 ^ v271;\n  v180 = v161;\n  v181 = v178;\n  v182 = v177 ^ v157;\n  v183 = v177;\n  v184 = v180;\n  v185 = v166 & v180;\n  v186 = v170;\n  v187 = v166 ^ v176;\n  v188 = v170 & ~v167;\n  v189 = v187;\n  v190 = v188 ^ v178 & v162;\n  v191 = v188 ^ v160 & v169;\n  v192 = v38 ^ v271;\n  v193 = v182 & (v38 ^ v271);\n  v194 = v175;\n  v195 = v190 ^ v185 ^ v167 ^ v187 & v172;\n  v196 = v191 ^ v185 ^ v173 ^ v160 ^ v163 & v175;\n  v197 = v190 ^ v193 ^ v182 ^ v38 ^ v271 ^ v159 & ~v271;\n  v198 = v191 ^ v174 & (v38 ^ v159) ^ v182 ^ v38 ^ v193;\n  v199 = v195;\n  v200 = v197 & v195;\n  v201 = v196 ^ v199;\n  v202 = v200 ^ v198;\n  v203 = v196 ^ (v200 ^ v198) & v201;\n  v204 = (v200 ^ v196) & (v198 ^ v197);\n  v205 = v204 ^ v198;\n  v206 = (v204 ^ v200) & v198;\n  v207 = v206 ^ v205 ^ v197;\n  v208 = v201 ^ v203 & (v206 ^ v202);\n  v209 = v208 ^ v207;\n  v210 = v205 & v194;\n  v211 = (v208 ^ v203) & v182;\n  v212 = v205 ^ v203 ^ v208 ^ v207;\n  v213 = v208 & v159;\n  v214 = v207 & v172;\n  v215 = v192 & (v208 ^ v203);\n  v216 = v212 & v181;\n  v217 = v211 ^ (v207 ^ v205) & v166;\n  v218 = v162 & v212;\n  v219 = v218;\n  v220 = v203 & v174;\n  v221 = v218 ^ (v205 ^ v203) & v186;\n  v222 = v203 & v174 ^ v179 & v208;\n  v223 = v221 ^ v213 ^ v214 ^ v184 & (v207 ^ v205);\n  v224 = v217 ^ v215 ^ v210;\n  v225 = v216 ^ v183 & (v205 ^ v203) ^ v211;\n  v226 = v221 ^ v213 ^ v216 ^ v209 & v173;\n  v227 = v225 ^ v213;\n  v228 = v226 ^ v224 ^ v165 & v203;\n  v229 = v223 ^ v189 & v207;\n  v230 = v225 ^ v223;\n  v231 = v229 ^ v217;\n  v232 = v228 ^ v214 ^ v163 & v205;\n  v233 = v219 ^ v209 & v160 ^ v227 ^ v228;\n  v234 = v231 ^ v227;\n  v235 = (((v222 ^ v224 ^ v221 ^ ((v222 ^ v224 ^ v221) >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v222 ^ v224 ^ v221 ^ ((v222 ^ v224 ^ v221) >> 8)) & 0xCC00CC00CC00CCLL ^ v222 ^ v224 ^ v221;\n  v236 = (((v226 ^ v222 ^ v215 ^ ((v226 ^ v222 ^ v215) >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v226 ^ v222 ^ v215 ^ ((v226 ^ v222 ^ v215) >> 8)) & 0xCC00CC00CC00CCLL ^ v226 ^ v222 ^ v215;\n  v237 = (((v232 ^ (v232 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v232 ^ (v232 >> 8)) & 0xCC00CC00CC00CCLL ^ v232;\n  v238 = v237 & 0x5555555555555555LL;\n  v239 = (v237 >> 4) & 0xAAA0AAA0AAA0AAALL | (v237 << 12) & 0xA000A000A000A000LL;\n  v240 = (((v220 ^ v210 ^ v229 ^ ((v220 ^ v210 ^ v229) >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v220 ^ v210 ^ v229 ^ ((v220 ^ v210 ^ v229) >> 8)) & 0xCC00CC00CC00CCLL ^ v220 ^ v210 ^ v229;\n  v241 = (((v231 ^ (v231 >> 8)) & 0xCC00CC00CC00CCLL) << 8) ^ (v231 ^ (v231 >> 8)) & 0xCC00CC00CC00CCLL ^ v231;\n  v242 = (v234 ^ (v234 >> 8)) & 0xCC00CC00CC00CCLL ^ v234 ^ (((v234 ^ (v234 >> 8)) & 0xCC00CC00CC00CCLL) << 8);\n  v243 = (v242 << 12) & 0xA000A000A000A000LL | (v242 >> 4) & 0xAAA0AAA0AAA0AAALL;\n  v244 = (v230 ^ (v230 >> 8)) & 0xCC00CC00CC00CCLL;\n  v245 = v244;\n  v246 = v244 ^ v230;\n  v247 = v274[1] ^ (v236 & 0x5555555555555555LL | (v236 << 12) & 0xA000A000A000A000LL | (v236 >> 4) & 0xAAA0AAA0AAA0AAALL);\n  v248 = v274[2] ^ (v238 | v239);\n  v272 = *v274 ^ (v235 & 0x5555555555555555LL | (v235 << 12) & 0xA000A000A000A000LL | (v235 >> 4) & 0xAAA0AAA0AAA0AAALL);\n  v249 = v274[5] ^ (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL ^ v233 ^ (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) & 0x5555555555555555LL | (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL ^ v233 ^ (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) << 12) & 0xA000A000A000A000LL | (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL ^ v233 ^ (((v233 ^ (v233 >> 8)) & 0xCC00CC00CC00CCLL) << 8)) >> 4) & 0xAAA0AAA0AAA0AAALL);\n  v250 = v274[3] ^ ((v240 >> 4) & 0xAAA0AAA0AAA0AAALL | (v240 << 12) & 0xA000A000A000A000LL | v240 & 0x5555555555555555LL);\n  v251 = (v241 & 0x5555555555555555LL | (v241 >> 4) & 0xAAA0AAA0AAA0AAALL | (v241 << 12) & 0xA000A000A000A000LL) ^ v274[4];\n  v252 = v277;\n  v253 = v274[6] ^ (v242 & 0x5555555555555555LL | v243);\n  v254 = v274[7] ^ (((v246 ^ (unsigned __int64)(v245 << 8)) >> 4) & 0xAAA0AAA0AAA0AAALL | ((v246 ^ (v245 << 8)) << 12) & 0xA000A000A000A000LL | (v246 ^ (v245 << 8)) & 0x5555555555555555LL);\n  do\n  {\n    v255 = (unsigned __int16)(v247 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v250 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v249 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (unsigned __int64)((unsigned int)(v254 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) << 16)) << 16)) << 16);\n    v256 = (v255 ^ (((unsigned __int16)(v272 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v248 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v251 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (unsigned __int64)((unsigned int)(v253 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) << 16)) << 16)) << 16)) >> 8)) & 0xFF00FF00FF00FFLL;\n    v257 = v256;\n    v258 = v255 ^ v256;\n    v259 = (v257 << 8) ^ ((unsigned __int16)(v272 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v248 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (((unsigned __int16)(v251 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) | (unsigned __int64)((unsigned int)(v253 >> ((unsigned __int8)v252 - (unsigned __int8)v277)) << 16)) << 16)) << 16));\n    v260 = ((unsigned int)v259 ^ (unsigned int)(v259 >> 28)) & 0xF0F0F0F0;\n    v261 = v260 ^ v259 ^ (v260 << 28);\n    v262 = ((unsigned int)v258 ^ (unsigned int)(v258 >> 28)) & 0xF0F0F0F0;\n    v263 = (v262 << 28) ^ v262 ^ v258;\n    v264 = (v261 ^ (v261 >> 14)) & 0xCCCC0000CCCCLL ^ v261 ^ (((v261 ^ (v261 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n    v265 = (v263 ^ (v263 >> 14)) & 0xCCCC0000CCCCLL ^ v263 ^ (((v263 ^ (v263 >> 14)) & 0xCCCC0000CCCCLL) << 14);\n    v266 = (v264 ^ (v264 >> 7)) & 0xAA00AA00AA00AALL;\n    v267 = v266 ^ v264 ^ (v266 << 7);\n    *(_WORD *)v252 = v267;\n    v268 = (v265 ^ (v265 >> 7)) & 0xAA00AA00AA00AALL ^ v265 ^ (((v265 ^ (v265 >> 7)) & 0xAA00AA00AA00AALL) << 7);\n    *(_BYTE *)(v252 + 8) = v268;\n    v252 += 16LL;\n    *(_BYTE *)(v252 - 14) = BYTE2(v267);\n    *(_BYTE *)(v252 - 13) = BYTE3(v267);\n    *(_BYTE *)(v252 - 12) = BYTE4(v267);\n    *(_BYTE *)(v252 - 11) = BYTE5(v267);\n    *(_BYTE *)(v252 - 9) = HIBYTE(v267);\n    *(_BYTE *)(v252 - 10) = BYTE6(v267);\n    *(_BYTE *)(v252 - 7) = BYTE1(v268);\n    *(_BYTE *)(v252 - 6) = BYTE2(v268);\n    *(_BYTE *)(v252 - 5) = BYTE3(v268);\n    *(_BYTE *)(v252 - 4) = BYTE4(v268);\n    *(_BYTE *)(v252 - 3) = BYTE5(v268);\n    result = v268 >> 56;\n    *(_BYTE *)(v252 - 1) = result;\n    *(_BYTE *)(v252 - 2) = ((v265 ^ (v265 >> 7)) & 0xAA00AA00AA00AALL ^ v265 ^ (((v265 ^ (v265 >> 7)) & 0xAA00AA00AA00AALL) << 7)) >> 48;\n  }\n  while ( v252 != v277 + 64 );\n  return result;\n}\n", 
            "funcStartAddr": "0x1cd80L", 
            "funcEndAddr": "0x1df22L", 
            "funcName": "sub_1CD80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1DF30(__int64 a1, _QWORD *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  _QWORD *v4; // rbx\n  _QWORD *v5; // r9\n  __int64 v6; // rcx\n  __int64 v7; // rax\n  __int64 v8; // rax\n  signed __int64 v9; // rdx\n  _BYTE *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // r13\n  __int64 v14; // ST08_8\n  signed __int64 v15; // ST00_8\n\n  v3 = (unsigned __int64)a2 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    v5 = *(_QWORD **)(a1 - 8);\n    v6 = a1 - 1296;\n    do\n    {\n      if ( (_QWORD *)(a1 - 8) == v5 )\n      {\n        v9 = *(_QWORD *)(a1 - 88);\n        v10 = (_BYTE *)(v6 + 1224);\n        do\n        {\n          v10[15] = v9;\n          v10[14] = BYTE1(v9);\n          v10[13] = BYTE2(v9);\n          v10[12] = BYTE3(v9);\n          v10[11] = BYTE4(v9);\n          v10[10] = BYTE5(v9);\n          v10[8] = HIBYTE(v9);\n          v10[9] = BYTE6(v9);\n          v11 = *(_QWORD *)(a1 - 80);\n          v10[7] = v11;\n          v10[6] = BYTE1(v11);\n          v10[5] = BYTE2(v11);\n          v10[4] = BYTE3(v11);\n          v10[3] = BYTE4(v11);\n          v10[2] = BYTE5(v11);\n          *v10 = HIBYTE(v11);\n          v10[1] = BYTE6(v11);\n          v12 = *(_QWORD *)(a1 - 88);\n          v13 = v12;\n          v9 = v12 + 1;\n          *(_QWORD *)(a1 - 88) = v9;\n          v10 += 16;\n          *(_QWORD *)(a1 - 80) += (v13 + (unsigned __int128)1uLL) >> 64;\n        }\n        while ( v10 < (_BYTE *)v5 );\n        v14 = v6;\n        v15 = v6 + 1224;\n        sub_1CD80(v6 + 1224, (_QWORD *)(v6 + 1224), v6);\n        v6 = v14;\n        *(_QWORD *)(a1 - 8) = v15;\n        v5 = (_QWORD *)v15;\n      }\n      v7 = *v4 ^ *v5;\n      v4 += 2;\n      *((_WORD *)v4 - 8) = v7;\n      *((_BYTE *)v4 - 14) = BYTE2(v7);\n      *((_BYTE *)v4 - 13) = BYTE3(v7);\n      *((_BYTE *)v4 - 12) = BYTE4(v7);\n      *((_BYTE *)v4 - 11) = BYTE5(v7);\n      *((_BYTE *)v4 - 9) = HIBYTE(v7);\n      *((_BYTE *)v4 - 10) = BYTE6(v7);\n      v8 = *(v4 - 1) ^ v5[1];\n      *((_WORD *)v4 - 4) = v8;\n      *((_BYTE *)v4 - 6) = BYTE2(v8);\n      *((_BYTE *)v4 - 5) = BYTE3(v8);\n      *((_BYTE *)v4 - 4) = BYTE4(v8);\n      *((_BYTE *)v4 - 3) = BYTE5(v8);\n      *((_BYTE *)v4 - 1) = HIBYTE(v8);\n      *((_BYTE *)v4 - 2) = BYTE6(v8);\n      v5 = (_QWORD *)(*(_QWORD *)(a1 - 8) + 16LL);\n      *(_QWORD *)(a1 - 8) = v5;\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n}\n", 
            "funcStartAddr": "0x1df30L", 
            "funcEndAddr": "0x1e14fL", 
            "funcName": "sub_1DF30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1E150(__int64 a1, _QWORD *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  _QWORD *v4; // rbx\n  _QWORD *v5; // r9\n  __int64 v6; // rcx\n  __int64 v7; // rax\n  __int64 v8; // rax\n  signed __int64 v9; // rdx\n  _BYTE *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // r13\n  __int64 v14; // ST08_8\n  signed __int64 v15; // ST00_8\n\n  v3 = (unsigned __int64)a2 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    v5 = *(_QWORD **)(a1 - 8);\n    v6 = a1 - 1296;\n    do\n    {\n      if ( (_QWORD *)(a1 - 8) == v5 )\n      {\n        v9 = *(_QWORD *)(a1 - 88);\n        v10 = (_BYTE *)(v6 + 1224);\n        do\n        {\n          v10[15] = v9;\n          v10[14] = BYTE1(v9);\n          v10[13] = BYTE2(v9);\n          v10[12] = BYTE3(v9);\n          v10[11] = BYTE4(v9);\n          v10[10] = BYTE5(v9);\n          v10[8] = HIBYTE(v9);\n          v10[9] = BYTE6(v9);\n          v11 = *(_QWORD *)(a1 - 80);\n          v10[7] = v11;\n          v10[6] = BYTE1(v11);\n          v10[5] = BYTE2(v11);\n          v10[4] = BYTE3(v11);\n          v10[3] = BYTE4(v11);\n          v10[2] = BYTE5(v11);\n          *v10 = HIBYTE(v11);\n          v10[1] = BYTE6(v11);\n          v12 = *(_QWORD *)(a1 - 88);\n          v13 = v12;\n          v9 = v12 + 1;\n          *(_QWORD *)(a1 - 88) = v9;\n          v10 += 16;\n          *(_QWORD *)(a1 - 80) += (v13 + (unsigned __int128)1uLL) >> 64;\n        }\n        while ( v10 < (_BYTE *)v5 );\n        v14 = v6;\n        v15 = v6 + 1224;\n        sub_1CD80(v6 + 1224, (_QWORD *)(v6 + 1224), v6);\n        v6 = v14;\n        *(_QWORD *)(a1 - 8) = v15;\n        v5 = (_QWORD *)v15;\n      }\n      v7 = *v4 ^ *v5;\n      v4 += 2;\n      *((_WORD *)v4 - 8) = v7;\n      *((_BYTE *)v4 - 14) = BYTE2(v7);\n      *((_BYTE *)v4 - 13) = BYTE3(v7);\n      *((_BYTE *)v4 - 12) = BYTE4(v7);\n      *((_BYTE *)v4 - 11) = BYTE5(v7);\n      *((_BYTE *)v4 - 9) = HIBYTE(v7);\n      *((_BYTE *)v4 - 10) = BYTE6(v7);\n      v8 = *(v4 - 1) ^ v5[1];\n      *((_WORD *)v4 - 4) = v8;\n      *((_BYTE *)v4 - 6) = BYTE2(v8);\n      *((_BYTE *)v4 - 5) = BYTE3(v8);\n      *((_BYTE *)v4 - 4) = BYTE4(v8);\n      *((_BYTE *)v4 - 3) = BYTE5(v8);\n      *((_BYTE *)v4 - 1) = HIBYTE(v8);\n      *((_BYTE *)v4 - 2) = BYTE6(v8);\n      v5 = (_QWORD *)(*(_QWORD *)(a1 - 8) + 16LL);\n      *(_QWORD *)(a1 - 8) = v5;\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n}\n", 
            "funcStartAddr": "0x1e150L", 
            "funcEndAddr": "0x1e36fL", 
            "funcName": "sub_1E150"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_1E370(__int64 a1, _QWORD *a2, int a3)\n{\n  unsigned __int64 v3; // r12\n  _QWORD *v4; // rbx\n  _QWORD *v5; // r9\n  __int64 v6; // rcx\n  __int64 v7; // rax\n  __int64 v8; // rax\n  signed __int64 v9; // rdx\n  _BYTE *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // r13\n  __int64 v14; // ST08_8\n  signed __int64 v15; // ST00_8\n\n  v3 = (unsigned __int64)a2 + a3;\n  if ( (unsigned __int64)a2 < v3 )\n  {\n    v4 = a2;\n    v5 = *(_QWORD **)(a1 - 8);\n    v6 = a1 - 1296;\n    do\n    {\n      if ( (_QWORD *)(a1 - 8) == v5 )\n      {\n        v9 = *(_QWORD *)(a1 - 88);\n        v10 = (_BYTE *)(v6 + 1224);\n        do\n        {\n          v10[15] = v9;\n          v10[14] = BYTE1(v9);\n          v10[13] = BYTE2(v9);\n          v10[12] = BYTE3(v9);\n          v10[11] = BYTE4(v9);\n          v10[10] = BYTE5(v9);\n          v10[8] = HIBYTE(v9);\n          v10[9] = BYTE6(v9);\n          v11 = *(_QWORD *)(a1 - 80);\n          v10[7] = v11;\n          v10[6] = BYTE1(v11);\n          v10[5] = BYTE2(v11);\n          v10[4] = BYTE3(v11);\n          v10[3] = BYTE4(v11);\n          v10[2] = BYTE5(v11);\n          *v10 = HIBYTE(v11);\n          v10[1] = BYTE6(v11);\n          v12 = *(_QWORD *)(a1 - 88);\n          v13 = v12;\n          v9 = v12 + 1;\n          *(_QWORD *)(a1 - 88) = v9;\n          v10 += 16;\n          *(_QWORD *)(a1 - 80) += (v13 + (unsigned __int128)1uLL) >> 64;\n        }\n        while ( v10 < (_BYTE *)v5 );\n        v14 = v6;\n        v15 = v6 + 1224;\n        sub_1CD80(v6 + 1224, (_QWORD *)(v6 + 1224), v6);\n        v6 = v14;\n        *(_QWORD *)(a1 - 8) = v15;\n        v5 = (_QWORD *)v15;\n      }\n      v7 = *v4 ^ *v5;\n      v4 += 2;\n      *((_WORD *)v4 - 8) = v7;\n      *((_BYTE *)v4 - 14) = BYTE2(v7);\n      *((_BYTE *)v4 - 13) = BYTE3(v7);\n      *((_BYTE *)v4 - 12) = BYTE4(v7);\n      *((_BYTE *)v4 - 11) = BYTE5(v7);\n      *((_BYTE *)v4 - 9) = HIBYTE(v7);\n      *((_BYTE *)v4 - 10) = BYTE6(v7);\n      v8 = *(v4 - 1) ^ v5[1];\n      *((_WORD *)v4 - 4) = v8;\n      *((_BYTE *)v4 - 6) = BYTE2(v8);\n      *((_BYTE *)v4 - 5) = BYTE3(v8);\n      *((_BYTE *)v4 - 4) = BYTE4(v8);\n      *((_BYTE *)v4 - 3) = BYTE5(v8);\n      *((_BYTE *)v4 - 1) = HIBYTE(v8);\n      *((_BYTE *)v4 - 2) = BYTE6(v8);\n      v5 = (_QWORD *)(*(_QWORD *)(a1 - 8) + 16LL);\n      *(_QWORD *)(a1 - 8) = v5;\n    }\n    while ( v3 > (unsigned __int64)v4 );\n  }\n}\n", 
            "funcStartAddr": "0x1e370L", 
            "funcEndAddr": "0x1e58fL", 
            "funcName": "sub_1E370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1E590(unsigned int a1)\n{\n  unsigned int v1; // ebx\n  bool v2; // cf\n  bool v3; // zf\n  signed __int64 v4; // rdi\n  __int64 v5; // rax\n  __int64 v6; // rbp\n  __int64 (__fastcall **v7)(_QWORD, __int16 *, signed __int64); // rax\n  __int64 result; // rax\n  __int16 v9; // [rsp+4h] [rbp-24h]\n  char v10; // [rsp+6h] [rbp-22h]\n  char v11; // [rsp+7h] [rbp-21h]\n  unsigned __int64 v12; // [rsp+8h] [rbp-20h]\n\n  v1 = a1;\n  v12 = __readfsqword(0x28u);\n  v2 = a1 < 0x40;\n  v3 = a1 == 64;\n  v4 = 64LL;\n  if ( v2 || v3 )\n    v4 = v1;\n  v5 = sub_212A0(v4);\n  v6 = v5;\n  v7 = *(__int64 (__fastcall ***)(_QWORD, __int16 *, signed __int64))(v5 + 8);\n  v9 = v1;\n  v10 = BYTE2(v1);\n  v11 = HIBYTE(v1);\n  result = (*v7)(v7, &v9, 4LL);\n  if ( __readfsqword(0x28u) == v12 )\n    result = v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x1e590L", 
            "funcEndAddr": "0x1e605L", 
            "funcName": "sub_1E590"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1E610(__int64 (***a1)(void), unsigned int a2, __int64 a3)\n{\n  __int64 (***v3)(void); // r15\n  unsigned int v4; // er12\n  __int64 v5; // rbp\n  signed __int64 v6; // rdi\n  __int64 v8; // [rsp+0h] [rbp-98h]\n  __m128i v9[4]; // [rsp+10h] [rbp-88h]\n  __m128i v10[4]; // [rsp+20h] [rbp-78h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-40h]\n\n  v3 = a1;\n  v11 = __readfsqword(0x28u);\n  v8 = a3;\n  if ( a2 > 0x40 )\n  {\n    v4 = a2 - 32;\n    v5 = a3;\n    while ( 1 )\n    {\n      v5 += 32LL;\n      ((void (__fastcall *)(__int64 (***)(void), __m128i *))(*v3)[3])(v3, v9);\n      ((void (__fastcall *)(__int64 (***)(void)))(*v3)[4])(v3);\n      v6 = 64LL;\n      *(__m128i *)(v5 - 32) = _mm_load_si128(v9);\n      *(__m128i *)(v5 - 16) = _mm_load_si128(v10);\n      if ( v4 <= 0x40 )\n        v6 = v4;\n      v3 = (__int64 (***)(void))sub_212A0(v6);\n      sub_10C10(v3[1]);\n      sub_47E30(v9, 64LL);\n      if ( v4 == a2 - 32 - ((a2 - 65) & 0xFFFFFFE0) )\n        break;\n      v4 -= 32;\n    }\n    v8 += 32 * (((a2 - 65) >> 5) + 1LL);\n  }\n  ((void (__fastcall *)(__int64 (***)(void), __int64))(*v3)[3])(v3, v8);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v3)[4])(v3);\n  return __readfsqword(0x28u) ^ v11;\n}\n", 
            "funcStartAddr": "0x1e610L", 
            "funcEndAddr": "0x1e71bL", 
            "funcName": "sub_1E610"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1E720(void (__fastcall **a1)(_QWORD, __int16 *, signed __int64), __int16 *a2, unsigned __int64 a3)\n{\n  signed __int64 v3; // rbx\n  __int16 v5; // [rsp+4h] [rbp-24h]\n  char v6; // [rsp+6h] [rbp-22h]\n  char v7; // [rsp+7h] [rbp-21h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-20h]\n\n  v8 = __readfsqword(0x28u);\n  if ( a3 >> 31 > 1 )\n    __assert_fail(\"(pl.len >> 31) < 2\", \"sshargon2.c\", 0x23u, \"BinarySink_put_stringpl_le\");\n  v3 = a3;\n  v5 = a3;\n  v6 = BYTE2(a3);\n  v7 = BYTE3(a3);\n  (*a1)(a1, &v5, 4LL);\n  (*a1)(a1, a2, v3);\n  return __readfsqword(0x28u) ^ v8;\n}\n", 
            "funcStartAddr": "0x1e720L", 
            "funcEndAddr": "0x1e7c2L", 
            "funcName": "sub_1E720"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_1E7D0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rax\n  char *v4; // r12\n  char *v5; // r11\n  __int64 v6; // rax\n  __int64 v7; // rax\n  unsigned __int64 v8; // rcx\n  __int64 v9; // r8\n  signed __int64 v10; // rdx\n  __int64 v11; // rsi\n  __int64 v12; // rax\n  signed __int64 v13; // rsi\n  __int64 v14; // rcx\n  __int64 v15; // r8\n  signed __int64 v16; // rdi\n  __int64 v17; // rcx\n  signed __int64 v18; // ST20_8\n  __int64 v19; // ST28_8\n  unsigned __int64 v20; // rdi\n  __int64 v21; // rdx\n  signed __int64 v22; // rax\n  __int64 v23; // r9\n  __int64 v24; // rcx\n  signed __int64 v25; // r9\n  __int64 v26; // ST10_8\n  __int64 v27; // rdi\n  signed __int64 v28; // ST18_8\n  __int64 v29; // rcx\n  unsigned __int64 v30; // r10\n  __int64 v31; // rdx\n  signed __int64 v32; // rax\n  __int64 v33; // rdi\n  signed __int64 v34; // rbx\n  __int64 v35; // ST08_8\n  signed __int64 v36; // r13\n  __int64 v37; // rax\n  __int64 v38; // rdi\n  unsigned __int64 v39; // r15\n  __int64 v40; // rdx\n  signed __int64 v41; // rbp\n  signed __int64 v42; // r14\n  __int64 v43; // rax\n  unsigned __int64 v44; // r10\n  __int64 v45; // r15\n  __int64 v46; // rdx\n  signed __int64 v47; // rbp\n  __int64 v48; // rax\n  signed __int64 v49; // rsi\n  __int64 v50; // rdx\n  signed __int64 v51; // r13\n  __int64 v52; // rcx\n  signed __int64 v53; // r14\n  __int64 v54; // rdx\n  signed __int64 v55; // rsi\n  signed __int64 v56; // r9\n  __int64 v57; // r8\n  signed __int64 v58; // rbp\n  __int64 v59; // rdi\n  signed __int64 v60; // rdx\n  __int64 v61; // r8\n  signed __int64 v62; // rdx\n  signed __int64 v63; // rbx\n  __int64 v64; // rdx\n  signed __int64 v65; // rcx\n  __int64 v66; // rax\n  signed __int64 v67; // rbx\n  __int64 v68; // rdx\n  signed __int64 v69; // rdx\n  signed __int64 v70; // r10\n  __int64 v71; // rax\n  signed __int64 v72; // rcx\n  signed __int64 v73; // r10\n  __int64 v74; // r10\n  signed __int64 v75; // r10\n  char *v76; // r9\n  char *v77; // r15\n  __int64 v78; // rax\n  __int64 v79; // rax\n  unsigned __int64 v80; // rcx\n  __int64 v81; // r8\n  signed __int64 v82; // rdx\n  __int64 v83; // rsi\n  __int64 v84; // rax\n  signed __int64 v85; // rsi\n  __int64 v86; // rcx\n  __int64 v87; // r8\n  signed __int64 v88; // rdi\n  __int64 v89; // rcx\n  signed __int64 v90; // ST20_8\n  __int64 v91; // ST28_8\n  unsigned __int64 v92; // rdi\n  __int64 v93; // rdx\n  signed __int64 v94; // rax\n  __int64 v95; // r10\n  __int64 v96; // rcx\n  signed __int64 v97; // r10\n  __int64 v98; // ST10_8\n  __int64 v99; // rdi\n  signed __int64 v100; // r11\n  __int64 v101; // rax\n  signed __int64 v102; // ST18_8\n  __int64 v103; // rcx\n  unsigned __int64 v104; // r11\n  signed __int64 v105; // rbp\n  __int64 v106; // rdx\n  signed __int64 v107; // rax\n  __int64 v108; // rdi\n  unsigned __int64 v109; // rbx\n  __int64 v110; // ST08_8\n  signed __int64 v111; // r12\n  __int64 v112; // rax\n  __int64 v113; // rdi\n  unsigned __int64 v114; // r14\n  __int64 v115; // rdx\n  signed __int64 v116; // rbp\n  signed __int64 v117; // r13\n  __int64 v118; // rax\n  unsigned __int64 v119; // r11\n  __int64 v120; // r14\n  __int64 v121; // rdx\n  signed __int64 v122; // rbp\n  __int64 v123; // rax\n  signed __int64 v124; // rsi\n  __int64 v125; // rdx\n  signed __int64 v126; // r12\n  __int64 v127; // rcx\n  signed __int64 v128; // r13\n  __int64 v129; // rdx\n  signed __int64 v130; // rsi\n  signed __int64 v131; // r10\n  __int64 v132; // r8\n  signed __int64 v133; // rbp\n  __int64 v134; // rdi\n  signed __int64 v135; // rdx\n  __int64 v136; // r8\n  signed __int64 v137; // rdx\n  signed __int64 v138; // rbx\n  __int64 v139; // rdx\n  signed __int64 v140; // rcx\n  __int64 v141; // rax\n  signed __int64 v142; // rbx\n  __int64 v143; // rdx\n  signed __int64 v144; // rdx\n  signed __int64 v145; // r11\n  __int64 v146; // rax\n  signed __int64 v147; // rcx\n  signed __int64 v148; // r11\n  __int64 v149; // r11\n  signed __int64 v150; // r11\n  _QWORD *v151; // rdi\n  __int64 v152; // rdx\n  __int64 v153; // rax\n  __int64 v154; // rax\n  _QWORD *v156; // [rsp+50h] [rbp-C58h]\n  char v157[1024]; // [rsp+60h] [rbp-C48h]\n  char v158; // [rsp+460h] [rbp-848h]\n  char v159[128]; // [rsp+860h] [rbp-448h]\n  char v160; // [rsp+8E0h] [rbp-3C8h]\n  unsigned __int64 v161; // [rsp+C68h] [rbp-40h]\n\n  v156 = a1;\n  v161 = __readfsqword(0x28u);\n  v3 = 0LL;\n  do\n  {\n    *(_QWORD *)&v157[v3] = *(_QWORD *)(a2 + v3) ^ *(_QWORD *)(a3 + v3);\n    v3 += 8LL;\n  }\n  while ( v3 != 1024 );\n  v4 = &v158;\n  v5 = v157;\n  do\n  {\n    v6 = 0LL;\n    do\n    {\n      *(_QWORD *)&v4[v6] = *(_QWORD *)&v5[v6];\n      *(_QWORD *)&v4[v6 + 8] = *(_QWORD *)&v5[v6 + 8];\n      v6 += 16LL;\n    }\n    while ( v6 != 128 );\n    v7 = *((_QWORD *)v4 + 4);\n    v8 = v7 + *(_QWORD *)v4 + 2 * (unsigned int)*((_QWORD *)v4 + 4) * (unsigned __int64)(unsigned int)*(_QWORD *)v4;\n    v9 = __ROL8__(v8 ^ *((_QWORD *)v4 + 12), 32);\n    v10 = v9 + *((_QWORD *)v4 + 8) + (unsigned int)v9 * 2LL * (unsigned int)*((_QWORD *)v4 + 8);\n    v11 = (_DWORD)v7 + *(_DWORD *)v4 + 2 * (unsigned int)*((_QWORD *)v4 + 4) * (unsigned int)*(_QWORD *)v4;\n    v12 = __ROR8__(v10 ^ v7, 24);\n    v13 = v12 + v8 + (unsigned int)v12 * 2 * v11;\n    v14 = (_DWORD)v9 + *((_DWORD *)v4 + 16) + (unsigned int)v9 * 2 * (unsigned int)*((_QWORD *)v4 + 8);\n    v15 = __ROR8__(v13 ^ v9, 16);\n    v16 = (unsigned int)v15 * 2 * v14 + v15 + v10;\n    v17 = *((_QWORD *)v4 + 5);\n    v18 = v16;\n    v19 = __ROL8__(v16 ^ v12, 1);\n    v20 = v17 + *((_QWORD *)v4 + 1) + 2 * (unsigned int)v17 * (unsigned __int64)(unsigned int)*((_QWORD *)v4 + 1);\n    v21 = __ROL8__(v20 ^ *((_QWORD *)v4 + 13), 32);\n    v22 = v21 + *((_QWORD *)v4 + 9) + (unsigned int)v21 * 2LL * (unsigned int)*((_QWORD *)v4 + 9);\n    v23 = (_DWORD)v17 + *((_DWORD *)v4 + 2) + 2 * (unsigned int)v17 * (unsigned int)*((_QWORD *)v4 + 1);\n    v24 = __ROR8__(v22 ^ v17, 24);\n    v25 = v24 + v20 + (unsigned int)v24 * 2 * v23;\n    v26 = __ROR8__(v25 ^ v21, 16);\n    v27 = *((_QWORD *)v4 + 6);\n    v28 = (unsigned int)v26 * 2LL * (unsigned int)v22 + v26 + v22;\n    v29 = __ROL8__(v28 ^ v24, 1);\n    v30 = v27\n        + *((_QWORD *)v4 + 2)\n        + 2 * (unsigned int)*((_QWORD *)v4 + 6) * (unsigned __int64)(unsigned int)*((_QWORD *)v4 + 2);\n    v31 = __ROL8__(v30 ^ *((_QWORD *)v4 + 14), 32);\n    v32 = v31 + *((_QWORD *)v4 + 10) + 2LL * (unsigned int)*((_QWORD *)v4 + 10) * (unsigned int)v31;\n    v33 = __ROR8__(v32 ^ v27, 24);\n    v34 = v33 + v30 + 2LL * (unsigned int)v30 * (unsigned int)v33;\n    v35 = __ROR8__(v34 ^ v31, 16);\n    v36 = v35 + v32 + 2LL * (unsigned int)v32 * (unsigned int)v35;\n    v37 = *((_QWORD *)v4 + 7);\n    v38 = __ROL8__(v36 ^ v33, 1);\n    v39 = v37\n        + *((_QWORD *)v4 + 3)\n        + 2 * (unsigned int)*((_QWORD *)v4 + 3) * (unsigned __int64)(unsigned int)*((_QWORD *)v4 + 7);\n    v40 = __ROL8__(v39 ^ *((_QWORD *)v4 + 15), 32);\n    v41 = 2LL\n        * ((_DWORD)v37 + *((_DWORD *)v4 + 6) + 2 * (unsigned int)*((_QWORD *)v4 + 3) * (unsigned int)*((_QWORD *)v4 + 7));\n    v42 = v40 + *((_QWORD *)v4 + 11) + 2LL * (unsigned int)*((_QWORD *)v4 + 11) * (unsigned int)v40;\n    v43 = __ROR8__(v42 ^ v37, 24);\n    v44 = v43 + v39 + v41 * (unsigned int)v43;\n    v45 = (_DWORD)v40 + *((_DWORD *)v4 + 22) + 2 * (unsigned int)*((_QWORD *)v4 + 11) * (unsigned int)v40;\n    v46 = __ROR8__(v44 ^ v40, 16);\n    v47 = v46 + v42 + 2 * v45 * (unsigned int)v46;\n    v48 = __ROL8__(v47 ^ v43, 1);\n    v49 = 2LL * (unsigned int)v13 * (unsigned int)v29 + v29 + v13;\n    v50 = __ROL8__(v49 ^ v46, 32);\n    v51 = 2LL * (unsigned int)v36 * (unsigned int)v50 + v50 + v36;\n    v52 = __ROR8__(v51 ^ v29, 24);\n    v53 = v52 + v49 + 2LL * (unsigned int)v49 * (unsigned int)v52;\n    *(_QWORD *)v4 = v53;\n    v54 = __ROR8__(v53 ^ v50, 16);\n    *((_QWORD *)v4 + 15) = v54;\n    v55 = v54 + v51 + (unsigned int)v54 * 2LL * (unsigned int)v51;\n    *((_QWORD *)v4 + 10) = v55;\n    *((_QWORD *)v4 + 5) = __ROL8__(v52 ^ v55, 1);\n    v56 = 2LL * (unsigned int)v25 * (unsigned int)v38 + v38 + v25;\n    v57 = __ROL8__(v56 ^ v15, 32);\n    v58 = 2LL * (unsigned int)v47 * (unsigned int)v57 + v57 + v47;\n    v59 = __ROR8__(v58 ^ v38, 24);\n    v60 = v59 + v56 + 2LL * (unsigned int)v56 * (unsigned int)v59;\n    *((_QWORD *)v4 + 1) = v60;\n    v61 = __ROR8__(v60 ^ v57, 16);\n    *((_QWORD *)v4 + 12) = v61;\n    v62 = v61 + v58 + 2LL * (unsigned int)v58 * (unsigned int)v61;\n    *((_QWORD *)v4 + 11) = v62;\n    *((_QWORD *)v4 + 6) = __ROL8__(v62 ^ v59, 1);\n    v63 = (unsigned int)v48 * 2LL * (unsigned int)v34 + v48 + v34;\n    v64 = __ROL8__(v63 ^ v26, 32);\n    v65 = v64 + v18 + (unsigned int)v64 * 2LL * (unsigned int)v18;\n    v66 = __ROR8__(v65 ^ v48, 24);\n    v67 = (unsigned int)v66 * 2LL * (unsigned int)v63 + v66 + v63;\n    *((_QWORD *)v4 + 2) = v67;\n    v68 = __ROR8__(v67 ^ v64, 16);\n    *((_QWORD *)v4 + 13) = v68;\n    v69 = (unsigned int)v68 * 2LL * (unsigned int)v65 + v65 + v68;\n    *((_QWORD *)v4 + 8) = v69;\n    *((_QWORD *)v4 + 7) = __ROL8__(v69 ^ v66, 1);\n    v70 = (unsigned int)v19 * 2LL * (unsigned int)v44 + v19 + v44;\n    v4 += 128;\n    v5 += 128;\n    v71 = __ROL8__(v70 ^ v35, 32);\n    v72 = v71 + v28 + (unsigned int)v71 * 2LL * (unsigned int)v28;\n    v73 = (unsigned int)__ROR8__(v72 ^ v19, 24) * 2LL * (unsigned int)v70 + __ROR8__(v72 ^ v19, 24) + v70;\n    *((_QWORD *)v4 - 13) = v73;\n    v74 = __ROR8__(v71 ^ v73, 16);\n    *((_QWORD *)v4 - 2) = v74;\n    v75 = (unsigned int)v74 * 2LL * (unsigned int)v72 + v72 + v74;\n    *((_QWORD *)v4 - 7) = v75;\n    *((_QWORD *)v4 - 12) = __ROL8__(v75 ^ __ROR8__(v72 ^ v19, 24), 1);\n  }\n  while ( v159 != v4 );\n  v76 = &v158;\n  v77 = v159;\n  do\n  {\n    v78 = 0LL;\n    do\n    {\n      *(_QWORD *)&v77[v78] = *(_QWORD *)&v76[v78];\n      *(_QWORD *)&v77[v78 + 8] = *(_QWORD *)&v76[v78 + 8];\n      v78 += 128LL;\n    }\n    while ( v78 != 1024 );\n    v79 = *((_QWORD *)v77 + 32);\n    v80 = v79\n        + *(_QWORD *)v77\n        + 2 * (unsigned int)*((_QWORD *)v77 + 32) * (unsigned __int64)(unsigned int)*(_QWORD *)v77;\n    v81 = __ROL8__(v80 ^ *((_QWORD *)v77 + 96), 32);\n    v82 = v81 + *((_QWORD *)v77 + 64) + (unsigned int)v81 * 2LL * (unsigned int)*((_QWORD *)v77 + 64);\n    v83 = (_DWORD)v79 + *(_DWORD *)v77 + 2 * (unsigned int)*((_QWORD *)v77 + 32) * (unsigned int)*(_QWORD *)v77;\n    v84 = __ROR8__(v82 ^ v79, 24);\n    v85 = v84 + v80 + (unsigned int)v84 * 2 * v83;\n    v86 = (_DWORD)v81 + *((_DWORD *)v77 + 128) + (unsigned int)v81 * 2 * (unsigned int)*((_QWORD *)v77 + 64);\n    v87 = __ROR8__(v85 ^ v81, 16);\n    v88 = (unsigned int)v87 * 2 * v86 + v87 + v82;\n    v89 = *((_QWORD *)v77 + 33);\n    v90 = v88;\n    v91 = __ROL8__(v88 ^ v84, 1);\n    v92 = v89 + *((_QWORD *)v77 + 1) + 2 * (unsigned int)v89 * (unsigned __int64)(unsigned int)*((_QWORD *)v77 + 1);\n    v93 = __ROL8__(v92 ^ *((_QWORD *)v77 + 97), 32);\n    v94 = v93 + *((_QWORD *)v77 + 65) + (unsigned int)v93 * 2LL * (unsigned int)*((_QWORD *)v77 + 65);\n    v95 = (_DWORD)v89 + *((_DWORD *)v77 + 2) + 2 * (unsigned int)v89 * (unsigned int)*((_QWORD *)v77 + 1);\n    v96 = __ROR8__(v94 ^ v89, 24);\n    v97 = v96 + v92 + (unsigned int)v96 * 2 * v95;\n    v98 = __ROR8__(v97 ^ v93, 16);\n    v99 = *((_QWORD *)v77 + 48);\n    v100 = (unsigned int)v98 * 2LL * (unsigned int)v94 + v98 + v94;\n    v101 = *((_QWORD *)v77 + 16);\n    v102 = v100;\n    v103 = __ROL8__(v100 ^ v96, 1);\n    v104 = v99 + v101 + 2 * (unsigned int)v99 * (unsigned __int64)(unsigned int)v101;\n    v105 = 2LL * (unsigned int)(v99 + v101 + 2 * v99 * v101);\n    v106 = __ROL8__(v104 ^ *((_QWORD *)v77 + 112), 32);\n    v107 = v106 + *((_QWORD *)v77 + 80) + 2LL * (unsigned int)*((_QWORD *)v77 + 80) * (unsigned int)v106;\n    v108 = __ROR8__(v107 ^ v99, 24);\n    v109 = v108 + v104 + v105 * (unsigned int)v108;\n    v110 = __ROR8__(v109 ^ v106, 16);\n    v111 = v110 + v107 + 2LL * (unsigned int)v107 * (unsigned int)v110;\n    v112 = *((_QWORD *)v77 + 49);\n    v113 = __ROL8__(v111 ^ v108, 1);\n    v114 = v112\n         + *((_QWORD *)v77 + 17)\n         + 2 * (unsigned int)*((_QWORD *)v77 + 17) * (unsigned __int64)(unsigned int)*((_QWORD *)v77 + 49);\n    v115 = __ROL8__(v114 ^ *((_QWORD *)v77 + 113), 32);\n    v116 = 2LL\n         * ((_DWORD)v112\n          + *((_DWORD *)v77 + 34)\n          + 2 * (unsigned int)*((_QWORD *)v77 + 17) * (unsigned int)*((_QWORD *)v77 + 49));\n    v117 = v115 + *((_QWORD *)v77 + 81) + 2LL * (unsigned int)*((_QWORD *)v77 + 81) * (unsigned int)v115;\n    v118 = __ROR8__(v117 ^ v112, 24);\n    v119 = v118 + v114 + v116 * (unsigned int)v118;\n    v120 = (_DWORD)v115 + *((_DWORD *)v77 + 162) + 2 * (unsigned int)*((_QWORD *)v77 + 81) * (unsigned int)v115;\n    v121 = __ROR8__(v119 ^ v115, 16);\n    v122 = v121 + v117 + 2 * v120 * (unsigned int)v121;\n    v123 = __ROL8__(v122 ^ v118, 1);\n    v124 = 2LL * (unsigned int)v85 * (unsigned int)v103 + v103 + v85;\n    v125 = __ROL8__(v124 ^ v121, 32);\n    v126 = 2LL * (unsigned int)v111 * (unsigned int)v125 + v125 + v111;\n    v127 = __ROR8__(v126 ^ v103, 24);\n    v128 = v127 + v124 + 2LL * (unsigned int)v124 * (unsigned int)v127;\n    *(_QWORD *)v77 = v128;\n    v129 = __ROR8__(v128 ^ v125, 16);\n    *((_QWORD *)v77 + 113) = v129;\n    v130 = v129 + v126 + (unsigned int)v129 * 2LL * (unsigned int)v126;\n    *((_QWORD *)v77 + 80) = v130;\n    *((_QWORD *)v77 + 33) = __ROL8__(v127 ^ v130, 1);\n    v131 = 2LL * (unsigned int)v97 * (unsigned int)v113 + v113 + v97;\n    v132 = __ROL8__(v131 ^ v87, 32);\n    v133 = 2LL * (unsigned int)v122 * (unsigned int)v132 + v132 + v122;\n    v134 = __ROR8__(v133 ^ v113, 24);\n    v135 = v134 + v131 + 2LL * (unsigned int)v131 * (unsigned int)v134;\n    *((_QWORD *)v77 + 1) = v135;\n    v136 = __ROR8__(v135 ^ v132, 16);\n    *((_QWORD *)v77 + 96) = v136;\n    v137 = v136 + v133 + 2LL * (unsigned int)v133 * (unsigned int)v136;\n    *((_QWORD *)v77 + 81) = v137;\n    *((_QWORD *)v77 + 48) = __ROL8__(v137 ^ v134, 1);\n    v138 = (unsigned int)v123 * 2LL * (unsigned int)v109 + v123 + v109;\n    v139 = __ROL8__(v138 ^ v98, 32);\n    v140 = v139 + v90 + (unsigned int)v139 * 2LL * (unsigned int)v90;\n    v141 = __ROR8__(v140 ^ v123, 24);\n    v142 = (unsigned int)v141 * 2LL * (unsigned int)v138 + v141 + v138;\n    *((_QWORD *)v77 + 16) = v142;\n    v143 = __ROR8__(v142 ^ v139, 16);\n    *((_QWORD *)v77 + 97) = v143;\n    v144 = (unsigned int)v143 * 2LL * (unsigned int)v140 + v140 + v143;\n    *((_QWORD *)v77 + 64) = v144;\n    *((_QWORD *)v77 + 49) = __ROL8__(v144 ^ v141, 1);\n    v145 = (unsigned int)v91 * 2LL * (unsigned int)v119 + v91 + v119;\n    v77 += 16;\n    v76 += 16;\n    v146 = __ROL8__(v145 ^ v110, 32);\n    v147 = v146 + v102 + (unsigned int)v146 * 2LL * (unsigned int)v102;\n    v148 = (unsigned int)__ROR8__(v147 ^ v91, 24) * 2LL * (unsigned int)v145 + __ROR8__(v147 ^ v91, 24) + v145;\n    *((_QWORD *)v77 + 15) = v148;\n    v149 = __ROR8__(v146 ^ v148, 16);\n    *((_QWORD *)v77 + 110) = v149;\n    v150 = (unsigned int)v149 * 2LL * (unsigned int)v147 + v147 + v149;\n    *((_QWORD *)v77 + 63) = v150;\n    *((_QWORD *)v77 + 30) = __ROL8__(v150 ^ __ROR8__(v147 ^ v91, 24), 1);\n  }\n  while ( v77 != &v160 );\n  v151 = v156;\n  v152 = 0LL;\n  do\n  {\n    v153 = *(_QWORD *)&v159[v152] ^ *(_QWORD *)&v157[v152];\n    v152 += 8LL;\n    v154 = *v151 ^ v153;\n    ++v151;\n    *((_WORD *)v151 - 4) = v154;\n    *((_BYTE *)v151 - 6) = BYTE2(v154);\n    *((_BYTE *)v151 - 5) = BYTE3(v154);\n    *((_BYTE *)v151 - 4) = BYTE4(v154);\n    *((_BYTE *)v151 - 3) = BYTE5(v154);\n    *((_BYTE *)v151 - 1) = HIBYTE(v154);\n    *((_BYTE *)v151 - 2) = BYTE6(v154);\n  }\n  while ( v152 != 1024 );\n  sub_47E30(v157, 1024LL);\n  sub_47E30(&v158, 1024LL);\n  sub_47E30(v159, 1024LL);\n  return __readfsqword(0x28u) ^ v161;\n}\n", 
            "funcStartAddr": "0x1e7d0L", 
            "funcEndAddr": "0x1f1b9L", 
            "funcName": "sub_1E7D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1F1C0(unsigned int a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, __int64 a6, __int16 *a7, unsigned __int64 a8, __int16 *a9, unsigned __int64 a10, __int16 *a11, unsigned __int64 a12, __int16 *a13, unsigned __int64 a14)\n{\n  unsigned int v14; // er14\n  unsigned int v15; // ebp\n  __int64 v16; // rax\n  _QWORD *v17; // rbx\n  void (__fastcall **v18)(_QWORD, int *, signed __int64); // rax\n  void (__fastcall **v19)(_QWORD, int *, signed __int64); // rdi\n  void (__fastcall **v20)(_QWORD, int *, signed __int64); // rax\n  void (__fastcall **v21)(_QWORD, int *, signed __int64); // rax\n  void (__fastcall **v22)(_QWORD, int *, signed __int64); // rax\n  unsigned __int64 v23; // r14\n  void (__fastcall **v24)(_QWORD, int *, signed __int64); // rdi\n  __int64 v25; // r12\n  __int64 v26; // r13\n  char *v27; // rbp\n  __int64 v28; // r14\n  __int64 (***v29)(void); // r15\n  __int64 (**v30)(void); // r8\n  __int64 (**v31)(void); // r8\n  char v32; // dh^2\n  __int64 v33; // r13\n  __int64 v34; // r15\n  __int64 (***v35)(void); // r14\n  __int64 (**v36)(void); // r8\n  __int64 (**v37)(void); // r8\n  char v38; // dh^2\n  bool v39; // di\n  __int64 (***v40)(void); // rbp\n  unsigned __int64 v41; // r15\n  __int64 v42; // rcx\n  unsigned int v43; // eax\n  int *v44; // rdx\n  int v45; // edi\n  signed int v46; // esi\n  unsigned __int64 v47; // r11\n  unsigned int v48; // ebx\n  unsigned __int64 v49; // r11\n  signed __int64 v50; // rdx\n  signed __int64 v51; // r11\n  signed __int64 v52; // rax\n  char *v53; // rbp\n  __int64 v54; // rdx\n  __int64 result; // rax\n  unsigned __int64 v56; // rt1\n  int *v57; // [rsp+0h] [rbp-11B8h]\n  char *v58; // [rsp+8h] [rbp-11B0h]\n  unsigned int v59; // [rsp+18h] [rbp-11A0h]\n  unsigned int v60; // [rsp+1Ch] [rbp-119Ch]\n  int *v61; // [rsp+20h] [rbp-1198h]\n  int v62; // [rsp+28h] [rbp-1190h]\n  __int64 v63; // [rsp+30h] [rbp-1188h]\n  bool v64; // [rsp+30h] [rbp-1188h]\n  unsigned __int64 v65; // [rsp+40h] [rbp-1178h]\n  __int64 v66; // [rsp+48h] [rbp-1170h]\n  unsigned __int64 v67; // [rsp+50h] [rbp-1168h]\n  unsigned int v68; // [rsp+58h] [rbp-1160h]\n  unsigned int v69; // [rsp+5Ch] [rbp-115Ch]\n  char v70; // [rsp+80h] [rbp-1138h]\n  __int64 v71; // [rsp+88h] [rbp-1130h]\n  char v72; // [rsp+90h] [rbp-1128h]\n  unsigned __int64 v73; // [rsp+98h] [rbp-1120h]\n  char v74; // [rsp+A3h] [rbp-1115h]\n  char v75; // [rsp+A4h] [rbp-1114h]\n  __int16 v76; // [rsp+A5h] [rbp-1113h]\n  char v77; // [rsp+A7h] [rbp-1111h]\n  char v78; // [rsp+A8h] [rbp-1110h]\n  char v79; // [rsp+B0h] [rbp-1108h]\n  char v80; // [rsp+B8h] [rbp-1100h]\n  char v81; // [rsp+C0h] [rbp-10F8h]\n  char v82; // [rsp+C1h] [rbp-10F7h]\n  char v83; // [rsp+C2h] [rbp-10F6h]\n  __int16 v84; // [rsp+C3h] [rbp-10F5h]\n  __int16 v85; // [rsp+C5h] [rbp-10F3h]\n  char v86; // [rsp+C7h] [rbp-10F1h]\n  unsigned __int64 v87; // [rsp+C8h] [rbp-10F0h]\n  unsigned __int64 v88; // [rsp+D0h] [rbp-10E8h]\n  unsigned __int64 v89; // [rsp+D8h] [rbp-10E0h]\n  __int64 v90; // [rsp+E0h] [rbp-10D8h]\n  __int64 v91; // [rsp+E8h] [rbp-10D0h]\n  int v92; // [rsp+F0h] [rbp-10C8h]\n  unsigned int v93; // [rsp+F4h] [rbp-10C4h]\n  signed __int64 v94; // [rsp+F8h] [rbp-10C0h]\n  __int64 v95; // [rsp+100h] [rbp-10B8h]\n  __int16 v96; // [rsp+108h] [rbp-10B0h]\n  bool v97; // [rsp+10Ah] [rbp-10AEh]\n  bool v98; // [rsp+10Bh] [rbp-10ADh]\n  unsigned int v99; // [rsp+10Ch] [rbp-10ACh]\n  size_t v100; // [rsp+110h] [rbp-10A8h]\n  __int64 v101; // [rsp+118h] [rbp-10A0h]\n  int v102; // [rsp+120h] [rbp-1098h]\n  int v103[255]; // [rsp+124h] [rbp-1094h]\n  char v104; // [rsp+520h] [rbp-C98h]\n  char v105; // [rsp+920h] [rbp-898h]\n  char v106; // [rsp+921h] [rbp-897h]\n  __int16 v107; // [rsp+922h] [rbp-896h]\n  char v108; // [rsp+928h] [rbp-890h]\n  char v109; // [rsp+929h] [rbp-88Fh]\n  char v110; // [rsp+92Ah] [rbp-88Eh]\n  char v111; // [rsp+92Bh] [rbp-88Dh]\n  char v112; // [rsp+930h] [rbp-888h]\n  char v113; // [rsp+938h] [rbp-880h]\n  char v114; // [rsp+939h] [rbp-87Fh]\n  __int16 v115; // [rsp+93Ah] [rbp-87Eh]\n  char v116; // [rsp+93Ch] [rbp-87Ch]\n  __int16 v117; // [rsp+93Dh] [rbp-87Bh]\n  char v118; // [rsp+93Fh] [rbp-879h]\n  char v119; // [rsp+940h] [rbp-878h]\n  char v120; // [rsp+941h] [rbp-877h]\n  __int16 v121; // [rsp+942h] [rbp-876h]\n  char v122; // [rsp+948h] [rbp-870h]\n  char v123; // [rsp+949h] [rbp-86Fh]\n  char v124; // [rsp+94Ah] [rbp-86Eh]\n  char v125; // [rsp+94Bh] [rbp-86Dh]\n  char v126; // [rsp+950h] [rbp-868h]\n  char v127; // [rsp+951h] [rbp-867h]\n  char v128; // [rsp+952h] [rbp-866h]\n  char v129; // [rsp+953h] [rbp-865h]\n  char v130; // [rsp+D20h] [rbp-498h]\n  int v131; // [rsp+112Ch] [rbp-8Ch]\n  int v132; // [rsp+1130h] [rbp-88h]\n  unsigned __int64 v133; // [rsp+1178h] [rbp-40h]\n\n  v14 = a4;\n  v15 = a3;\n  v59 = a1;\n  v60 = a5;\n  v62 = a12;\n  v99 = a2;\n  LOBYTE(v61) = (_BYTE)a11;\n  v101 = a6;\n  v133 = __readfsqword(0x28u);\n  v16 = sub_212A0(64LL);\n  v17 = (_QWORD *)v16;\n  v88 = a1;\n  v18 = *(void (__fastcall ***)(_QWORD, int *, signed __int64))(v16 + 8);\n  v132 = a1;\n  (*v18)(v18, &v132, 4LL);\n  v19 = (void (__fastcall **)(_QWORD, int *, signed __int64))v17[1];\n  v132 = a2;\n  (*v19)(v19, &v132, 4LL);\n  v20 = (void (__fastcall **)(_QWORD, int *, signed __int64))v17[1];\n  HIBYTE(v132) = HIBYTE(v15);\n  LOWORD(v132) = v15;\n  BYTE2(v132) = BYTE2(v15);\n  (*v20)(v20, &v132, 4LL);\n  v21 = (void (__fastcall **)(_QWORD, int *, signed __int64))v17[1];\n  v95 = v14;\n  v81 = v14;\n  LOWORD(v132) = v14;\n  HIBYTE(v132) = HIBYTE(v14);\n  BYTE2(v132) = BYTE2(v14);\n  (*v21)(v21, &v132, 4LL);\n  v22 = (void (__fastcall **)(_QWORD, int *, signed __int64))v17[1];\n  v57 = &v132;\n  v132 = 19;\n  (*v22)(v22, &v132, 4LL);\n  v23 = v60;\n  v24 = (void (__fastcall **)(_QWORD, int *, signed __int64))v17[1];\n  v77 = v60;\n  LOWORD(v132) = __PAIR__(BYTE1(v23), (unsigned __int8)v60);\n  HIWORD(v132) = HIWORD(v60);\n  (*v24)(v24, &v132, 4LL);\n  sub_1E720((void (__fastcall **)(_QWORD, __int16 *, signed __int64))v17[1], a7, a8);\n  sub_1E720((void (__fastcall **)(_QWORD, __int16 *, signed __int64))v17[1], a9, a10);\n  sub_1E720((void (__fastcall **)(_QWORD, __int16 *, signed __int64))v17[1], a11, a12);\n  sub_1E720((void (__fastcall **)(_QWORD, __int16 *, signed __int64))v17[1], a13, a14);\n  (*(void (__fastcall **)(_QWORD *, int *))(*v17 + 24LL))(v17, &v132);\n  (*(void (__fastcall **)(_QWORD *))(*v17 + 32LL))(v17);\n  v25 = v88;\n  v93 = v15 / (4 * v59);\n  v26 = 4LL * (v15 / (4 * v59));\n  v73 = v26 * v88;\n  v27 = (char *)sub_11440(v26 * v88, 0x400uLL, 0LL);\n  v58 = v27;\n  v100 = v26 * v88 << 10;\n  memset(v27, 0, v100);\n  if ( v88 )\n  {\n    v63 = v26;\n    v62 = v60;\n    v61 = &v131;\n    v28 = 0LL;\n    do\n    {\n      v29 = (__int64 (***)(void))sub_1E590(0x400u);\n      sub_10C10(v29[1]);\n      v30 = v29[1];\n      v131 = 0;\n      ((void (__fastcall *)(__int64 (**)(void), int *, signed __int64))*v30)(v30, &v131, 4LL);\n      v31 = v29[1];\n      LOWORD(v131) = v28;\n      BYTE2(v131) = BYTE2(v28);\n      v32 = BYTE3(v28);\n      ++v28;\n      HIBYTE(v131) = v32;\n      ((void (__fastcall *)(__int64 (**)(void), int *, signed __int64))*v31)(v31, &v131, 4LL);\n      sub_1E610(v29, 0x400u, (__int64)v27);\n      v27 += 1024;\n    }\n    while ( v88 != v28 );\n    v33 = 0LL;\n    v34 = v28;\n    v25 = (__int64)&v58[1024 * v88];\n    do\n    {\n      v35 = (__int64 (***)(void))sub_1E590(0x400u);\n      sub_10C10(v35[1]);\n      v36 = v35[1];\n      v131 = 1;\n      ((void (__fastcall *)(__int64 (**)(void), int *, signed __int64))*v36)(v36, &v131, 4LL);\n      v37 = v35[1];\n      LOWORD(v131) = v33;\n      BYTE2(v131) = BYTE2(v33);\n      v38 = BYTE3(v33);\n      ++v33;\n      HIBYTE(v131) = v38;\n      ((void (__fastcall *)(__int64 (**)(void), int *, signed __int64))*v37)(v37, &v131, 4LL);\n      sub_1E610(v35, 0x400u, v25);\n      v25 += 1024LL;\n    }\n    while ( v33 != v34 );\n    v23 = v60;\n    v26 = v63;\n  }\n  v64 = v60 == 0;\n  if ( !v95 )\n    goto LABEL_35;\n  v66 = 0LL;\n  v67 = 2LL;\n  v85 = WORD1(v73);\n  v80 = BYTE1(v73);\n  v96 = *(_WORD *)((char *)&v73 + 5);\n  v86 = BYTE4(v73);\n  v87 = v73 >> 56;\n  v84 = WORD1(v95);\n  v79 = BYTE1(v95);\n  v78 = BYTE1(v23);\n  v82 = BYTE2(v23);\n  v83 = BYTE3(v23);\n  v98 = v60 == 2;\n  v65 = v88 << 10;\nLABEL_9:\n  v91 = 0LL;\n  v69 = 0;\n  v71 = 0LL;\n  v76 = WORD1(v66);\n  v72 = BYTE1(v66);\n  v97 = v98 && v66 == 0;\n  v68 = v26 - 1;\nLABEL_10:\n  v39 = v64;\n  v92 = v71;\n  if ( v97 && (_DWORD)v71 == 2 )\n    v39 = v97 && (_DWORD)v71 == 2;\n  v64 = v39;\n  if ( v88 )\n  {\n    v25 = 0LL;\n    v60 = v93 * (((_BYTE)v71 + 1) & 3);\n    v90 = v67 + v91;\n    v94 = v26 - 1;\n    v89 = (v67 + v91) * v88;\nLABEL_14:\n    if ( v93 <= v67 )\n      goto LABEL_32;\n    v57 = (int *)v25;\n    v70 = BYTE1(v25);\n    v74 = BYTE2(v25);\n    v75 = BYTE3(v25);\n    LOBYTE(v61) = v92 != 0 || v66 != 0;\n    v62 = v60 - 1;\n    v40 = (__int64 (***)(void))&v58[1024 * (v89 + v25)];\n    v25 = v90;\n    v23 = v67;\n    v41 = v26;\nLABEL_23:\n    v48 = v25 - 1;\n    if ( !v25 )\n      v48 = v68;\n    v26 = (__int64)&v58[1024 * ((_QWORD)v57 + v48 * v59)];\n    if ( v64 )\n    {\n      v42 = *(unsigned int *)v26;\n      v43 = *(_DWORD *)(v26 + 4);\n      if ( !(_BYTE)v61 )\n      {\nLABEL_30:\n        v45 = (signed int)v57;\n        v47 = v41;\n        v46 = -1;\n        goto LABEL_22;\n      }\n    }\n    else\n    {\n      v49 = v23 & 0x7F;\n      if ( v23 == v67 || !(v23 & 0x7F) )\n      {\n        memset(&v105, 0, 0x400uLL);\n        v105 = v66;\n        v106 = v72;\n        v107 = v76;\n        v108 = (char)v57;\n        v109 = v70;\n        v110 = v74;\n        v111 = v75;\n        v112 = v71;\n        v113 = v73;\n        v114 = v80;\n        v115 = v85;\n        v116 = v86;\n        v117 = v96;\n        v119 = v81;\n        v118 = v87;\n        v121 = v84;\n        v120 = v79;\n        v122 = v77;\n        v124 = v82;\n        v123 = v78;\n        v125 = v83;\n        v50 = (v23 >> 7) + 1;\n        v126 = (v23 >> 7) + 1;\n        v127 = BYTE1(v50);\n        v129 = BYTE3(v50);\n        v128 = ((unsigned int)(v23 >> 7) + 1) >> 16;\n        memset(&v104, 0, 0x400uLL);\n        sub_1E7D0(&v104, (__int64)&v104, (__int64)&v105);\n        memset(&v102, 0, 0x400uLL);\n        sub_1E7D0(&v102, (__int64)&v102, (__int64)&v104);\n        v49 = v23 & 0x7F;\n      }\n      v51 = 2 * v49;\n      v42 = *(unsigned int *)((char *)&v102 + v51 * 4);\n      v43 = v103[v51];\n      if ( !(_BYTE)v61 )\n        goto LABEL_30;\n    }\n    v44 = (int *)(v43 % v59);\n    v45 = v43 % v59;\n    if ( v66 )\n    {\n      v46 = v62;\n      v47 = v41 - v60;\n      goto LABEL_19;\n    }\n    goto LABEL_42;\n  }\n  while ( 1 )\n  {\n    ++v71;\n    v69 += v93;\n    v91 += v93;\n    v67 = 0LL;\n    if ( v71 != 4 )\n      goto LABEL_10;\n    if ( v95 != ++v66 )\n      goto LABEL_9;\nLABEL_35:\n    qmemcpy(&v130, &v58[v88 * ((v26 << 10) - 1024)], 0x400uLL);\n    if ( v88 > 1 )\n    {\n      v52 = v88 * (v26 - 1);\n      v25 = (__int64)&v58[1024 * (v52 + 1)];\n      v53 = &v58[1024 * (v88 + v52)];\n      do\n      {\n        v54 = v25;\n        v25 += 1024LL;\n        sub_483E0(&v130, &v130, v54, 1024LL);\n      }\n      while ( (char *)v25 != v53 );\n    }\n    v41 = v99;\n    v40 = (__int64 (***)(void))sub_1E590(v99);\n    sub_10C10(v40[1]);\n    sub_1E610(v40, v99, v101);\n    sub_47E30(&v102, 1024LL);\n    sub_47E30(&v104, 1024LL);\n    sub_47E30(&v105, 1024LL);\n    sub_47E30(&v130, 1024LL);\n    v48 = (unsigned int)v58;\n    sub_47E30(v58, v100);\n    v45 = (signed int)v58;\n    sub_114C0(v58);\n    v56 = __readfsqword(0x28u);\n    result = v56 ^ v133;\n    if ( v56 == v133 )\n      return result;\nLABEL_42:\n    v47 = v41;\n    v46 = -1;\nLABEL_19:\n    if ( v57 != v44 )\n    {\n      if ( v23 )\n        v48 = v69;\n      else\n        v48 = (v94 + (unsigned __int64)(unsigned int)v25) % v41;\n    }\nLABEL_22:\n    ++v23;\n    ++v25;\n    sub_1E7D0(\n      v40,\n      v26,\n      (__int64)&v58[1024\n                  * ((unsigned int)(v46\n                                  + (v48 + v47) % v41\n                                  - ((unsigned int)((v48 + v47) % v41) * ((unsigned __int64)(v42 * v42) >> 32) >> 32))\n                   % v41\n                   * v59\n                   + v45)]);\n    v40 = (__int64 (***)(void))((char *)v40 + v65);\n    if ( v93 != v23 )\n      goto LABEL_23;\n    v25 = (__int64)v57;\n    v26 = v41;\nLABEL_32:\n    if ( v88 != ++v25 )\n      goto LABEL_14;\n  }\n}\n", 
            "funcStartAddr": "0x1f1c0L", 
            "funcEndAddr": "0x1fe53L", 
            "funcName": "sub_1F1C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_1FEC0(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, __int64 a6, __int128 a7, __int128 a8, __int128 a9, __m128i a10)\n{\n  unsigned int v10; // er13\n  unsigned int v11; // ebp\n  int v12; // ebx\n  __int64 v13; // rax\n  __m128i v14; // xmm2\n  __m128i v15; // xmm1\n  __m128i v16; // xmm0\n  __m128i v18; // [rsp+0h] [rbp-68h]\n  __m128i v19; // [rsp+10h] [rbp-58h]\n  __m128i v20; // [rsp+20h] [rbp-48h]\n  __m128i v21; // [rsp+30h] [rbp-38h]\n\n  v10 = a3;\n  v11 = a4;\n  v12 = a5;\n  v21 = _mm_loadu_si128((const __m128i *)&a7);\n  v20 = _mm_loadu_si128((const __m128i *)&a8);\n  v19 = _mm_loadu_si128((const __m128i *)&a9);\n  v18 = _mm_loadu_si128(&a10);\n  v13 = sub_472D0(a6);\n  v14 = _mm_load_si128(&v19);\n  v15 = _mm_load_si128(&v20);\n  v16 = _mm_load_si128(&v21);\n  a10 = _mm_load_si128(&v18);\n  return sub_1F1C0(\n           v11,\n           v12,\n           a2,\n           v10,\n           a1,\n           v13,\n           (__int16 *)v16.m128i_i64[0],\n           v16.m128i_u64[1],\n           (__int16 *)v15.m128i_i64[0],\n           v15.m128i_u64[1],\n           (__int16 *)v14.m128i_i64[0],\n           v14.m128i_u64[1],\n           (__int16 *)a10.m128i_i64[0],\n           a10.m128i_u64[1]);\n}\n", 
            "funcStartAddr": "0x1fec0L", 
            "funcEndAddr": "0x1ff6eL", 
            "funcName": "sub_1FEC0"
        }, 
        {
            "decompiledFuncCode": "unsigned int *__fastcall sub_1FF70(__int64 a1, unsigned int a2, int a3, unsigned int *a4, unsigned int a5, int a6, __int16 *a7, unsigned __int64 a8, __int16 *a9, unsigned __int64 a10, __int16 *a11, unsigned __int64 a12, __int16 *a13, unsigned __int64 a14, __int64 a15)\n{\n  int v15; // er15\n  unsigned int v16; // ebx\n  unsigned int v17; // ebp\n  unsigned __int64 v18; // r12\n  int v19; // eax\n  __int64 v20; // r13\n  __int64 v21; // rax\n  unsigned int *result; // rax\n  unsigned int v23; // [rsp+Ch] [rbp-4Ch]\n  unsigned int v24; // [rsp+14h] [rbp-44h]\n  unsigned int *v25; // [rsp+18h] [rbp-40h]\n\n  v15 = a6;\n  v16 = 1;\n  v17 = 1;\n  v23 = a1;\n  v25 = a4;\n  v24 = a5;\n  v18 = 1000 * a3 / 0x3E8u;\n  while ( 1 )\n  {\n    v20 = sub_44490(a1);\n    v21 = sub_472D0(a15);\n    sub_1F1C0(v24, v15, a2, v16, v23, v21, a7, a8, a9, a10, a11, a12, a13, a14);\n    if ( v18 <= sub_44490(v24) - v20 || ~v16 < v17 )\n      break;\n    a1 = a15;\n    sub_47350(a15, 0LL);\n    v19 = v17 + v16;\n    v17 = v16;\n    v16 = v19;\n  }\n  result = v25;\n  *v25 = v16;\n  return result;\n}\n", 
            "funcStartAddr": "0x1ff70L", 
            "funcEndAddr": "0x20077L", 
            "funcName": "sub_1FF70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20080(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n\n  v2 = sub_18690((__int64)&off_25F780);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 24LL))(v2, a1);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 16LL))(v2, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x20080L", 
            "funcEndAddr": "0x200baL", 
            "funcName": "sub_20080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_200C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n\n  v2 = sub_22D80(off_260220);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 24LL))(v2, a1);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 16LL))(v2, a2);\n  return v2;\n}\n", 
            "funcStartAddr": "0x200c0L", 
            "funcEndAddr": "0x200faL", 
            "funcName": "sub_200C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20100(__int64 a1)\n{\n  __int64 v1; // r8\n  __int64 v2; // rcx\n  unsigned int v3; // eax\n  __int64 *v4; // rdx\n  int v5; // esi\n  __int64 v6; // rsi\n  __int64 v7; // rbp\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v10; // [rsp+8h] [rbp-20h]\n\n  v1 = 0LL;\n  LODWORD(v2) = 0;\n  v10 = __readfsqword(0x28u);\n  v3 = 0;\n  v4 = &v9;\n  do\n  {\n    if ( (signed int)v2 <= 6 )\n    {\n      LODWORD(v2) = v2 + 8;\n      v5 = *(unsigned __int8 *)(a1 + (signed int)v1);\n      v1 = (unsigned int)(v1 + 1);\n      v3 = v5 | (v3 << 8);\n    }\n    v2 = (unsigned int)(v2 - 7);\n    v4 = (__int64 *)((char *)v4 + 1);\n    *((_BYTE *)v4 - 1) = 2 * (v3 >> v2);\n    v6 = (unsigned int)~(127 << v2);\n    v3 &= v6;\n  }\n  while ( &v10 != (unsigned __int64 *)v4 );\n  v7 = sub_22D50(off_260340, v6, v4, v2, v1, 127LL);\n  (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v7 + 24LL))(v7, &v9);\n  sub_47E30(&v9, 8LL);\n  (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v7 + 16LL))(v7, &v9);\n  return v7;\n}\n", 
            "funcStartAddr": "0x20100L", 
            "funcEndAddr": "0x201bcL", 
            "funcName": "sub_20100"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_201C0(const __m128i *a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  __int64 result; // rax\n  __int64 v4; // [rsp+8h] [rbp-40h]\n  __m128i v5; // [rsp+10h] [rbp-38h]\n  __int64 v6; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+28h] [rbp-20h]\n\n  v7 = __readfsqword(0x28u);\n  v1 = sub_22DE0(off_260100);\n  v2 = a1->m128i_i64[0];\n  v5 = _mm_loadu_si128(a1);\n  v6 = v2;\n  (*(void (__fastcall **)(__int64, __m128i *))(*(_QWORD *)v1 + 24LL))(v1, &v5);\n  sub_47E30(&v5, 24LL);\n  v4 = 0LL;\n  result = (*(__int64 (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v1 + 16LL))(v1, &v4);\n  if ( __readfsqword(0x28u) == v7 )\n    result = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x201c0L", 
            "funcEndAddr": "0x20250L", 
            "funcName": "sub_201C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20250(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // er12\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n\n  v4 = a4;\n  v5 = a3;\n  v6 = sub_20080(a1, a2);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v6 + 32LL))(v6, v5, v4);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n}\n", 
            "funcStartAddr": "0x20250L", 
            "funcEndAddr": "0x20281L", 
            "funcName": "sub_20250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20290(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // er12\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n\n  v4 = a4;\n  v5 = a3;\n  v6 = sub_20080(a1, a2);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v6 + 40LL))(v6, v5, v4);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n}\n", 
            "funcStartAddr": "0x20290L", 
            "funcEndAddr": "0x202c1L", 
            "funcName": "sub_20290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_202D0(const __m128i *a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // er12\n  __int64 v4; // rbx\n\n  v3 = a3;\n  v4 = sub_201C0(a1);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v4 + 40LL))(v4, a2, v3);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);\n}\n", 
            "funcStartAddr": "0x202d0L", 
            "funcEndAddr": "0x20301L", 
            "funcName": "sub_202D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20310(const __m128i *a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // er12\n  __int64 v4; // rbx\n\n  v3 = a3;\n  v4 = sub_201C0(a1);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v4 + 32LL))(v4, a2, v3);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);\n}\n", 
            "funcStartAddr": "0x20310L", 
            "funcEndAddr": "0x20341L", 
            "funcName": "sub_20310"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20350(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // er12\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n\n  v4 = a4;\n  v5 = a3;\n  v6 = sub_200C0(a1, a2);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v6 + 40LL))(v6, v5, v4);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n}\n", 
            "funcStartAddr": "0x20350L", 
            "funcEndAddr": "0x20381L", 
            "funcName": "sub_20350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20390(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  unsigned int v4; // er12\n  __int64 v5; // rbp\n  __int64 v6; // rbx\n\n  v4 = a4;\n  v5 = a3;\n  v6 = sub_200C0(a1, a2);\n  (*(void (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)v6 + 32LL))(v6, v5, v4);\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n}\n", 
            "funcStartAddr": "0x20390L", 
            "funcEndAddr": "0x203c1L", 
            "funcName": "sub_20390"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20450(__int64 (**a1)(void), __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  __int64 (***v6)(void); // rbx\n\n  v4 = a4;\n  v5 = (*a1)();\n  v6 = (__int64 (***)(void))v5;\n  if ( v5 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);\n  sub_10C20(v6[1]);\n  ((void (__fastcall *)(__int64 (***)(void), __int64))(*v6)[3])(v6, v4);\n  return ((__int64 (__fastcall *)(__int64 (***)(void)))(*v6)[4])(v6);\n}\n", 
            "funcStartAddr": "0x20450L", 
            "funcEndAddr": "0x204a7L", 
            "funcName": "sub_20450"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_204B0(__int64 (__fastcall **a1)(_QWORD, _QWORD), __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r15\n  __int64 v7; // rbp\n  __int64 (***v8)(void); // rbx\n\n  v6 = a3;\n  v7 = a6;\n  v8 = (__int64 (***)(void))(*a1)(a1, 0LL);\n  ((void (__fastcall *)(__int64 (***)(void), __int64, __int64))(*v8)[2])(v8, a2, v6);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v8)[3])(v8);\n  sub_10C20(v8[1]);\n  ((void (__fastcall *)(__int64 (***)(void), __int64))(*v8)[4])(v8, v7);\n  return ((__int64 (__fastcall *)(__int64 (***)(void)))(*v8)[1])(v8);\n}\n", 
            "funcStartAddr": "0x204b0L", 
            "funcEndAddr": "0x20521L", 
            "funcName": "sub_204B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_20530(__int64 a1, __int16 a2, __int64 a3, __int16 a4)\n{\n  __int64 v4; // r15\n  unsigned int v5; // er13\n  signed int v6; // ebx\n  __int64 v7; // rbp\n\n  v4 = a3;\n  v5 = a4;\n  v6 = 64;\n  v7 = sub_224E0();\n  sub_21FB0(v7);\n  sub_22050(v7, a1, (unsigned int)a2, v4, v5);\n  do\n  {\n    sub_22050(v7, v4, v5, 0LL, 0LL);\n    sub_22050(v7, a1, (unsigned int)a2, 0LL, 0LL);\n    --v6;\n  }\n  while ( v6 );\n  return v7;\n}\n", 
            "funcStartAddr": "0x20530L", 
            "funcEndAddr": "0x205bdL", 
            "funcName": "sub_20530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_205C0(__int64 a1, __int16 a2, __int64 a3, __int16 a4, __m128i *a5)\n{\n  __m128i *v5; // rbp\n  signed int v6; // ebx\n  __int64 v7; // r12\n\n  v5 = a5;\n  v6 = 64;\n  v7 = sub_20530(a1, a2, a3, a4);\n  *v5 = _mm_load_si128((const __m128i *)&xmmword_4CA00);\n  v5[1] = _mm_load_si128((const __m128i *)&xmmword_4CA10);\n  do\n  {\n    sub_21EE0(v5, 32LL, v7);\n    --v6;\n  }\n  while ( v6 );\n  return sub_22500(v7);\n}\n", 
            "funcStartAddr": "0x205c0L", 
            "funcEndAddr": "0x20611L", 
            "funcName": "sub_205C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_20620(int a1, __int64 a2, __int64 a3, __int64 a4, __m128i *a5)\n{\n  __m128i *v5; // r14\n  __int64 v6; // rax\n  __int64 (***v7)(void); // rbx\n  __int64 v9; // [rsp+0h] [rbp-88h]\n  unsigned __int64 v10; // [rsp+48h] [rbp-40h]\n\n  v5 = a5;\n  v10 = __readfsqword(0x28u);\n  v6 = sub_3ED40(&off_2612E0);\n  v7 = (__int64 (***)(void))v6;\n  if ( v6 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);\n  sub_10C10(v7[1]);\n  if ( a1 )\n    sub_10D80((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))v7[1], a1);\n  ((void (__fastcall *)(__int64 (***)(void), __int64 *))(*v7)[3])(v7, &v9);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v7)[4])(v7);\n  sub_205C0(a2, 64, (__int64)&v9, 64, v5);\n  sub_47E30(&v9, 64LL);\n  return __readfsqword(0x28u) ^ v10;\n}\n", 
            "funcStartAddr": "0x20620L", 
            "funcEndAddr": "0x206ebL", 
            "funcName": "sub_20620"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_206F0(const char *a1, __int64 a2, unsigned int a3, int a4, __int64 a5, signed int a6)\n{\n  __int64 v6; // r15\n  int v7; // ebp\n  signed int v8; // ebx\n  __int64 v9; // rax\n  int v10; // eax\n  int v11; // eax\n  char *v12; // r13\n  char v13; // al\n  __int64 v14; // rcx\n  __int64 v15; // rdx\n  __m128i *v16; // r15\n  int v17; // er13\n  int v18; // edi\n  char v19; // ST1B_1\n  __int64 v20; // rdx\n  char i; // al\n  char v22; // al\n  __int64 v23; // rax\n  __int128 *v24; // rdx\n  char v25; // cl\n  __int64 v27; // [rsp+8h] [rbp-100h]\n  __int64 v28; // [rsp+10h] [rbp-F8h]\n  signed __int64 v29; // [rsp+20h] [rbp-E8h]\n  unsigned int v30; // [rsp+38h] [rbp-D0h]\n  int v31; // [rsp+3Ch] [rbp-CCh]\n  char v32; // [rsp+40h] [rbp-C8h]\n  __int128 v33; // [rsp+60h] [rbp-A8h]\n  __int128 v34; // [rsp+70h] [rbp-98h]\n  char v35; // [rsp+80h] [rbp-88h]\n  unsigned __int64 v36; // [rsp+C8h] [rbp-40h]\n\n  v6 = a5;\n  v7 = a4;\n  v8 = a6;\n  v30 = a3;\n  v36 = __readfsqword(0x28u);\n  v9 = strlen(a1);\n  sub_20450((__int64 (**)(void))&off_2612E0, (__int64)a1, v9, (__int64)&v35);\n  v10 = v8 + 62;\n  if ( v8 + 31 >= 0 )\n    v10 = v8 + 31;\n  v11 = v10 >> 5;\n  v31 = v11;\n  if ( v11 > 0 )\n  {\n    v27 = 0LL;\n    v29 = (unsigned int)(v11 - 1) + 1LL;\n    v12 = &v32;\n    do\n    {\n      v33 = 0LL;\n      v34 = 0LL;\n      if ( v7 > 0 )\n      {\n        v13 = 0;\n        v14 = v30;\n        v15 = a2;\n        v28 = v6;\n        v16 = (__m128i *)v12;\n        v17 = 0;\n        while ( 1 )\n        {\n          v18 = 0;\n          if ( !v17 )\n            v18 = v27 + 1;\n          v19 = v13;\n          sub_20620(v18, (__int64)&v35, v15, v14, v16);\n          v20 = 0LL;\n          for ( i = v19; ; i = *((_BYTE *)&v33 + v20) )\n          {\n            v22 = *((_BYTE *)v16->m128i_i64 + v20++) ^ i;\n            *((_BYTE *)&v33 + v20 - 1) = v22;\n            if ( v20 == 32 )\n              break;\n          }\n          if ( v7 == ++v17 )\n            break;\n          v13 = v33;\n          v15 = (__int64)v16;\n          v14 = 32LL;\n        }\n        v12 = (char *)v16;\n        v6 = v28;\n      }\n      v23 = v27;\n      if ( v8 > (signed int)v27 )\n      {\n        v24 = &v33;\n        do\n        {\n          v25 = *(_BYTE *)v24;\n          v24 = (__int128 *)((char *)v24 + 1);\n          *(_BYTE *)(v6 + v23) = v25;\n          v23 += v31;\n        }\n        while ( v8 > (signed int)v23 );\n      }\n      ++v27;\n    }\n    while ( v27 != v29 );\n  }\n  sub_47E30(&v35, 64LL);\n  return __readfsqword(0x28u) ^ v36;\n}\n", 
            "funcStartAddr": "0x206f0L", 
            "funcEndAddr": "0x208b1L", 
            "funcName": "sub_206F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_208C0(__int64 a1)\n{\n  __m128i v1; // xmm0\n  int v2; // eax\n  signed __int64 result; // rax\n  __m128i v4; // xmm0\n\n  *(_QWORD *)(a1 - 40) = 0LL;\n  v1 = _mm_loadu_si128((const __m128i *)((char *)&xmmword_4CB40 + 8));\n  *(_QWORD *)(a1 - 24) = 0LL;\n  *(_QWORD *)(a1 - 32) = 0LL;\n  *(_QWORD *)(a1 - 184) = 6620516959819538809LL;\n  v2 = *(_DWORD *)(a1 - 176);\n  *(__m128i *)(a1 - 232) = v1;\n  result = v2 ^ 0x1010000u ^ 0x6A09E667F3BCC908LL;\n  v4 = _mm_loadu_si128((const __m128i *)((char *)&xmmword_4CB50 + 8));\n  *(_QWORD *)(a1 - 240) = result;\n  *(__m128i *)(a1 - 216) = v4;\n  *(__m128i *)(a1 - 200) = _mm_loadu_si128((const __m128i *)&xmmword_4CB68);\n  return result;\n}\n", 
            "funcStartAddr": "0x208c0L", 
            "funcEndAddr": "0x20933L", 
            "funcName": "sub_208C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_20940(__m128i *a1, const __m128i *a2)\n{\n  signed __int64 result; // rax\n\n  a1[-15] = _mm_loadu_si128(a2 - 15);\n  result = (signed __int64)a1[-1].m128i_i64;\n  a1[-14] = _mm_loadu_si128(a2 - 14);\n  a1[-13] = _mm_loadu_si128(a2 - 13);\n  a1[-12] = _mm_loadu_si128(a2 - 12);\n  a1[-11] = _mm_loadu_si128(a2 - 11);\n  a1[-10] = _mm_loadu_si128(a2 - 10);\n  a1[-9] = _mm_loadu_si128(a2 - 9);\n  a1[-8] = _mm_loadu_si128(a2 - 8);\n  a1[-7] = _mm_loadu_si128(a2 - 7);\n  a1[-6] = _mm_loadu_si128(a2 - 6);\n  a1[-5] = _mm_loadu_si128(a2 - 5);\n  a1[-4] = _mm_loadu_si128(a2 - 4);\n  a1[-3] = _mm_loadu_si128(a2 - 3);\n  a1[-2] = _mm_loadu_si128(a2 - 2);\n  a1[-1] = _mm_loadu_si128(a2 - 1);\n  *a1 = _mm_loadu_si128(a2);\n  a1[-1].m128i_i64[1] = result;\n  a1->m128i_i64[1] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x20940L", 
            "funcEndAddr": "0x20a0eL", 
            "funcName": "sub_20940"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_20A10(__int64 a1)\n{\n  sub_47E30(a1 - 240, 256LL);\n  sub_114C0((void *)(a1 - 240));\n}\n", 
            "funcStartAddr": "0x20a10L", 
            "funcEndAddr": "0x20a2eL", 
            "funcName": "sub_20A10"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_20A30(unsigned int a1)\n{\n  __int64 v1; // rax\n  signed __int64 v2; // rdx\n  _QWORD *result; // rax\n\n  if ( a1 > 0x40 )\n    __assert_fail(\"hashlen <= ssh_blake2b.hlen\", \"sshblake2.c\", 0x78u, \"blake2b_new_inner\");\n  v1 = sub_11440(1uLL, 0x100uLL, 0LL);\n  v2 = v1 + 224;\n  *(_DWORD *)(v1 + 64) = a1;\n  result = (_QWORD *)(v1 + 240);\n  *result = off_25FF00;\n  *(result - 2) = sub_210B0;\n  *(result - 1) = v2;\n  result[1] = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x20a30L", 
            "funcEndAddr": "0x20a97L", 
            "funcName": "sub_20A30"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_20AA0(__int64 a1)\n{\n  return sub_20A30(*(_QWORD *)(a1 + 40));\n}\n", 
            "funcStartAddr": "0x20aa0L", 
            "funcEndAddr": "0x20aa6L", 
            "funcName": "sub_20AA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_20AB0(const __m128i *a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // rax\n  signed __int64 v6; // rcx\n  unsigned __int64 v7; // rdx\n  __m128i v8; // xmm0\n  signed __int64 v9; // r12\n  __int128 *v10; // r15\n  __int64 v11; // rbp\n  signed __int64 v12; // r8\n  __int64 v13; // rax\n  __int64 v14; // r14\n  signed __int64 v15; // r9\n  signed __int64 v16; // rdi\n  unsigned __int64 v17; // r10\n  signed __int64 v18; // rbx\n  __int64 v19; // r13\n  __m128i v20; // xmm0\n  __int64 v21; // r11\n  unsigned __int8 v22; // si\n  __int64 v23; // rbp\n  __int64 v24; // rcx\n  unsigned __int64 v25; // r10\n  __int64 v26; // r9\n  __int64 v27; // rax\n  __int64 v28; // rbp\n  __int64 v29; // rdx\n  __int64 v30; // rdi\n  __int64 v31; // rcx\n  __int64 v32; // rbx\n  __int64 v33; // r10\n  __int64 v34; // r9\n  __int64 v35; // ST38_8\n  __int64 v36; // rdx\n  __int64 v37; // ST40_8\n  __int64 v38; // ST48_8\n  __int64 v39; // r10\n  __int64 v40; // r8\n  __int64 v41; // rax\n  __int64 v42; // rdi\n  __int64 v43; // r14\n  __int64 v44; // r8\n  __int64 v45; // rax\n  __int64 v46; // r12\n  __int64 v47; // r14\n  __int64 v48; // rsi\n  __int64 v49; // r11\n  __int64 v50; // rbx\n  __int64 v51; // rdi\n  __int64 v52; // rsi\n  __int64 v53; // r11\n  __int64 v54; // rbx\n  __int64 v55; // rbp\n  __int64 v56; // rdi\n  __int64 v57; // r11\n  __int64 v58; // r12\n  __int64 v59; // r10\n  __int64 v60; // r11\n  __int64 v61; // r12\n  __int64 v62; // r9\n  __int64 v63; // rcx\n  __int64 v64; // rbx\n  __int64 v65; // r14\n  __int64 v66; // r10\n  __int64 v67; // r8\n  __int64 v68; // rdx\n  __int64 v69; // r10\n  __int64 v70; // rdi\n  __int64 v71; // rsi\n  __int64 v72; // r12\n  __int64 v73; // rdi\n  __int64 v74; // rax\n  __int64 v75; // rsi\n  __int64 v76; // r10\n  __int64 i; // rax\n  signed __int64 v79; // [rsp+0h] [rbp-1B8h]\n  __int64 v80; // [rsp+8h] [rbp-1B0h]\n  __int64 v81; // [rsp+10h] [rbp-1A8h]\n  __int64 v82; // [rsp+18h] [rbp-1A0h]\n  __int64 v83; // [rsp+20h] [rbp-198h]\n  __int64 v84; // [rsp+28h] [rbp-190h]\n  __int64 v85; // [rsp+30h] [rbp-188h]\n  unsigned __int8 v86; // [rsp+54h] [rbp-164h]\n  unsigned __int8 v87; // [rsp+55h] [rbp-163h]\n  unsigned __int8 v88; // [rsp+56h] [rbp-162h]\n  unsigned __int8 v89; // [rsp+57h] [rbp-161h]\n  unsigned __int8 v90; // [rsp+58h] [rbp-160h]\n  unsigned __int8 v91; // [rsp+59h] [rbp-15Fh]\n  unsigned __int8 v92; // [rsp+5Ah] [rbp-15Eh]\n  unsigned __int8 v93; // [rsp+5Bh] [rbp-15Dh]\n  unsigned __int8 v94; // [rsp+5Ch] [rbp-15Ch]\n  unsigned __int8 v95; // [rsp+5Dh] [rbp-15Bh]\n  unsigned __int8 v96; // [rsp+5Eh] [rbp-15Ah]\n  unsigned __int8 v97; // [rsp+5Fh] [rbp-159h]\n  const __m128i *v98; // [rsp+60h] [rbp-158h]\n  __int64 v99[16]; // [rsp+70h] [rbp-148h]\n  __m128i v100; // [rsp+F0h] [rbp-C8h]\n  __m128i v101; // [rsp+100h] [rbp-B8h]\n  __m128i v102; // [rsp+110h] [rbp-A8h]\n  __m128i v103; // [rsp+120h] [rbp-98h]\n  __m128i v104; // [rsp+130h] [rbp-88h]\n  __m128i v105; // [rsp+140h] [rbp-78h]\n  __int64 v106; // [rsp+150h] [rbp-68h]\n  unsigned __int64 v107; // [rsp+158h] [rbp-60h]\n  __m128i v108; // [rsp+160h] [rbp-58h]\n  unsigned __int64 v109; // [rsp+178h] [rbp-40h]\n\n  v98 = a1;\n  v109 = __readfsqword(0x28u);\n  v5 = 0LL;\n  do\n  {\n    v99[v5] = *(_QWORD *)(a2 + v5 * 8);\n    ++v5;\n  }\n  while ( v5 != 16 );\n  v6 = a4 ^ 0x510E527FADE682D1LL;\n  v7 = a3 ^ 0x9B05688C2B3E6C1FLL;\n  v8 = _mm_loadu_si128(a1);\n  v9 = -(signed __int64)a5 ^ 0x1F83D9ABFB41BD6BLL;\n  v106 = v6;\n  v107 = v7;\n  v10 = (__int128 *)&unk_4CA90;\n  v100 = v8;\n  v11 = v8.m128i_i64[0];\n  v12 = 3LL;\n  v101 = _mm_loadu_si128(a1 + 1);\n  v84 = v101.m128i_i64[1];\n  v85 = v101.m128i_i64[0];\n  v102 = _mm_loadu_si128(a1 + 2);\n  v13 = v102.m128i_i64[0];\n  v103 = _mm_loadu_si128(a1 + 3);\n  v80 = v8.m128i_i64[1];\n  v14 = v103.m128i_i64[0];\n  v15 = 2LL;\n  v81 = v103.m128i_i64[1];\n  v104 = _mm_load_si128((const __m128i *)&xmmword_4CB40);\n  v16 = v104.m128i_i64[1];\n  v17 = v104.m128i_i64[0];\n  v18 = 1LL;\n  v105 = _mm_load_si128((const __m128i *)&xmmword_4CB50);\n  v82 = v105.m128i_i64[0];\n  v19 = 0LL;\n  v20 = _mm_load_si128((const __m128i *)((char *)&xmmword_4CB68 + 8));\n  v108 = v20;\n  v108.m128i_i64[0] = v9;\n  v83 = v20.m128i_i64[1];\n  v79 = v105.m128i_i64[1];\n  v96 = 5;\n  v95 = 14;\n  v94 = 15;\n  v93 = 12;\n  v92 = 13;\n  v91 = 10;\n  v90 = 11;\n  v89 = 8;\n  v88 = 9;\n  v87 = 6;\n  v86 = 7;\n  v21 = v102.m128i_i64[1];\n  v97 = 4;\n  while ( 1 )\n  {\n    v23 = v13 + v99[v19] + v11;\n    v24 = __ROL8__(v23 ^ v6, 32);\n    v25 = v24 + v17;\n    v26 = v21 + v99[v15] + v80;\n    v27 = __ROR8__(v25 ^ v13, 24);\n    v28 = v27 + v99[v18] + v23;\n    v29 = __ROL8__(v26 ^ v7, 32);\n    v30 = v29 + v16;\n    v31 = __ROR8__(v28 ^ v24, 16);\n    v32 = v31 + v25;\n    v33 = __ROR8__(v30 ^ v21, 24);\n    v34 = v33 + v99[v12] + v26;\n    v35 = v32;\n    v36 = __ROR8__(v34 ^ v29, 16);\n    v37 = __ROL8__(v32 ^ v27, 1);\n    v38 = v36 + v30;\n    v39 = __ROL8__((v36 + v30) ^ v33, 1);\n    v40 = v85 + v14 + v99[v97];\n    v41 = __ROL8__(v40 ^ v9, 32);\n    v42 = v41 + v82;\n    v43 = __ROR8__((v41 + v82) ^ v14, 24);\n    v44 = v43 + v99[v96] + v40;\n    v45 = __ROR8__(v44 ^ v41, 16);\n    v46 = v45 + v42;\n    v47 = __ROL8__((v45 + v42) ^ v43, 1);\n    v48 = v81 + v99[v87] + v84;\n    v49 = __ROL8__(v48 ^ v83, 32);\n    v50 = v49 + v79;\n    v51 = __ROR8__((v49 + v79) ^ v81, 24);\n    v52 = v51 + v99[v86] + v48;\n    v53 = __ROR8__(v52 ^ v49, 16);\n    v54 = v53 + v50;\n    v55 = v39 + v99[v89] + v28;\n    v56 = __ROL8__(v54 ^ v51, 1);\n    v57 = __ROL8__(v55 ^ v53, 32);\n    v58 = v57 + v46;\n    v59 = __ROR8__(v58 ^ v39, 24);\n    v11 = v59 + v99[v88] + v55;\n    v60 = __ROR8__(v11 ^ v57, 16);\n    v61 = v60 + v58;\n    v83 = v60;\n    v82 = v61;\n    v21 = __ROL8__(v61 ^ v59, 1);\n    v62 = v47 + v99[v91] + v34;\n    v63 = __ROL8__(v62 ^ v31, 32);\n    v64 = v63 + v54;\n    v65 = __ROR8__(v64 ^ v47, 24);\n    v66 = v99[v90] + v62 + v65;\n    v80 = v66;\n    v6 = __ROR8__(v66 ^ v63, 16);\n    v79 = v6 + v64;\n    v14 = __ROL8__((v6 + v64) ^ v65, 1);\n    v67 = v56 + v99[v93] + v44;\n    v68 = __ROL8__(v67 ^ v36, 32);\n    v69 = v35 + v68;\n    v70 = __ROR8__((v35 + v68) ^ v56, 24);\n    v85 = v70 + v99[v92] + v67;\n    v7 = __ROR8__(v85 ^ v68, 16);\n    v17 = v7 + v69;\n    v81 = __ROL8__(v17 ^ v70, 1);\n    v71 = v37 + v99[v95] + v52;\n    v72 = __ROL8__(v71 ^ v45, 32);\n    v73 = v38 + v72;\n    v74 = __ROR8__((v38 + v72) ^ v37, 24);\n    v84 = v99[v94] + v71 + v74;\n    v9 = __ROR8__(v84 ^ v72, 16);\n    v16 = v9 + v73;\n    v13 = __ROL8__(v16 ^ v74, 1);\n    if ( v10 == &xmmword_4CB40 )\n      break;\n    v22 = *((_BYTE *)v10 + 5);\n    v18 = *((unsigned __int8 *)v10 + 1);\n    ++v10;\n    v19 = *((unsigned __int8 *)v10 - 16);\n    v12 = *((unsigned __int8 *)v10 - 13);\n    v15 = *((unsigned __int8 *)v10 - 14);\n    v96 = v22;\n    v97 = *((_BYTE *)v10 - 12);\n    v86 = *((_BYTE *)v10 - 9);\n    v87 = *((_BYTE *)v10 - 10);\n    v88 = *((_BYTE *)v10 - 7);\n    v89 = *((_BYTE *)v10 - 8);\n    v90 = *((_BYTE *)v10 - 5);\n    v91 = *((_BYTE *)v10 - 6);\n    v92 = *((_BYTE *)v10 - 3);\n    v93 = *((_BYTE *)v10 - 4);\n    v94 = *((_BYTE *)v10 - 1);\n    v95 = *((_BYTE *)v10 - 2);\n  }\n  v102.m128i_i64[0] = v13;\n  v75 = v17;\n  v104.m128i_i64[1] = v16;\n  v106 = v6;\n  v104.m128i_i64[0] = v17;\n  v107 = v7;\n  v76 = v11;\n  v100.m128i_i64[1] = v80;\n  v100.m128i_i64[0] = v11;\n  v102.m128i_i64[1] = v21;\n  v103.m128i_i64[0] = v14;\n  v108.m128i_i64[0] = v9;\n  v101.m128i_i64[0] = v85;\n  v105.m128i_i64[0] = v82;\n  v101.m128i_i64[1] = v84;\n  v103.m128i_i64[1] = v81;\n  v108.m128i_i64[1] = v83;\n  v105.m128i_i64[1] = v6 + v64;\n  for ( i = 0LL; ; v75 = v104.m128i_i64[i] )\n  {\n    v98->m128i_i64[i] ^= v75 ^ v76;\n    ++i;\n    if ( i == 8 )\n      break;\n    v76 = v100.m128i_i64[i];\n  }\n  sub_47E30(&v100, 128LL);\n  sub_47E30(v99, 128LL);\n  return __readfsqword(0x28u) ^ v109;\n}\n", 
            "funcStartAddr": "0x20ab0L", 
            "funcEndAddr": "0x210acL", 
            "funcName": "sub_20AB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_21190(__int64 a1, void *a2)\n{\n  __int64 v2; // r12\n  const __m128i *v3; // rbx\n  __int64 v4; // rdi\n  __int64 *v5; // rdi\n  __int64 *v6; // rax\n  __int64 v7; // rdx\n  __int64 v9; // [rsp+0h] [rbp-B8h]\n  __int64 v10; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v11; // [rsp+88h] [rbp-30h]\n\n  v2 = a1;\n  v3 = (const __m128i *)(a1 - 240);\n  v4 = *(_QWORD *)(a1 - 40);\n  v11 = __readfsqword(0x28u);\n  memset((char *)v3[4].m128i_i64 + v4 + 4, 0, 128 - v4);\n  sub_20AB0(v3, (__int64)v3[4].m128i_i64 + 4, *(_QWORD *)(v2 - 32), *(_QWORD *)(v2 - 24), 1u);\n  v5 = (__int64 *)v3;\n  v6 = &v9;\n  do\n  {\n    v7 = *v5;\n    ++v6;\n    ++v5;\n    *((_WORD *)v6 - 4) = v7;\n    *((_BYTE *)v6 - 6) = BYTE2(v7);\n    *((_BYTE *)v6 - 5) = BYTE3(v7);\n    *((_BYTE *)v6 - 4) = BYTE4(v7);\n    *((_BYTE *)v6 - 3) = BYTE5(v7);\n    *((_BYTE *)v6 - 1) = HIBYTE(v7);\n    *((_BYTE *)v6 - 2) = BYTE6(v7);\n  }\n  while ( v6 != &v10 );\n  memcpy(a2, &v9, *(unsigned int *)(v2 - 176));\n  sub_47E30(&v9, 128LL);\n  return __readfsqword(0x28u) ^ v11;\n}\n", 
            "funcStartAddr": "0x21190L", 
            "funcEndAddr": "0x2129cL", 
            "funcName": "sub_21190"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_212A0(unsigned int a1)\n{\n  _QWORD *v1; // rbx\n\n  v1 = sub_20A30(a1);\n  (*(void (__fastcall **)(_QWORD *))(*v1 + 8LL))(v1);\n  return v1;\n}\n", 
            "funcStartAddr": "0x212a0L", 
            "funcEndAddr": "0x212b7L", 
            "funcName": "sub_212A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_212C0(int a1, int a2, unsigned int *a3, _DWORD *a4)\n{\n  signed __int64 result; // rax\n  unsigned int *v5; // r14\n  unsigned int v6; // edi\n  unsigned int v7; // esi\n  unsigned int v8; // ebx\n  unsigned int v9; // er10\n  unsigned int v10; // ebx\n  unsigned int v11; // ebp\n  unsigned int v12; // esi\n  unsigned int v13; // ebx\n  unsigned int v14; // er11\n  unsigned int v15; // ebx\n  unsigned int v16; // er10\n  unsigned int v17; // edi\n  unsigned int v18; // ebx\n  unsigned int v19; // esi\n  unsigned int v20; // ebx\n  __int64 v21; // rdx\n  int v22; // edi\n  __int64 v23; // r10\n  int v24; // ebx\n  unsigned int v25; // esi\n  int v26; // edi\n\n  result = (signed __int64)(a4 + 768);\n  v5 = a3;\n  v6 = a1 ^ a4[1024];\n  v7 = (a4[(unsigned __int8)v6 + 768] + (a4[BYTE1(v6) + 512] ^ (a4[BYTE2(v6) + 256] + a4[v6 >> 24]))) ^ a4[1025] ^ a2;\n  v8 = (a4[(unsigned __int8)v7 + 768] + (a4[BYTE1(v7) + 512] ^ (a4[BYTE2(v7) + 256] + a4[v7 >> 24]))) ^ a4[1026] ^ v6;\n  v9 = a4[1027] ^ v7 ^ (a4[(unsigned __int8)v8 + 768] + (a4[BYTE1(v8) + 512] ^ (a4[BYTE2(v8) + 256] + a4[v8 >> 24])));\n  v10 = (a4[(unsigned __int8)v9 + 768] + (a4[BYTE1(v9) + 512] ^ (a4[BYTE2(v9) + 256] + a4[v9 >> 24]))) ^ a4[1028] ^ v8;\n  v11 = a4[1029] ^ v9 ^ (a4[(unsigned __int8)v10 + 768] + (a4[BYTE1(v10) + 512] ^ (a4[BYTE2(v10) + 256] + a4[v10 >> 24])));\n  v12 = a4[1030] ^ v10 ^ (a4[(unsigned __int8)v11 + 768]\n                        + (a4[BYTE1(v11) + 512] ^ (a4[BYTE2(v11) + 256] + a4[v11 >> 24])));\n  v13 = a4[1031] ^ v11 ^ (a4[(unsigned __int8)v12 + 768]\n                        + (a4[BYTE1(v12) + 512] ^ (a4[BYTE2(v12) + 256] + a4[v12 >> 24])));\n  v14 = a4[1032] ^ v12 ^ (a4[(unsigned __int8)v13 + 768]\n                        + (a4[BYTE1(v13) + 512] ^ (a4[BYTE2(v13) + 256] + a4[v13 >> 24])));\n  v15 = (a4[(unsigned __int8)v14 + 768] + (a4[BYTE1(v14) + 512] ^ (a4[BYTE2(v14) + 256] + a4[v14 >> 24]))) ^ a4[1033] ^ v13;\n  v16 = a4[1034] ^ v14 ^ (a4[(unsigned __int8)v15 + 768]\n                        + (a4[BYTE1(v15) + 512] ^ (a4[BYTE2(v15) + 256] + a4[v15 >> 24])));\n  v17 = a4[1035] ^ v15 ^ (a4[(unsigned __int8)v16 + 768]\n                        + (a4[BYTE1(v16) + 512] ^ (a4[BYTE2(v16) + 256] + a4[v16 >> 24])));\n  v18 = a4[1036] ^ v16 ^ (a4[(unsigned __int8)v17 + 768]\n                        + (a4[BYTE1(v17) + 512] ^ (a4[BYTE2(v17) + 256] + a4[v17 >> 24])));\n  v19 = a4[1037] ^ v17 ^ (a4[(unsigned __int8)v18 + 768]\n                        + (a4[BYTE1(v18) + 512] ^ (a4[BYTE2(v18) + 256] + a4[v18 >> 24])));\n  v20 = (a4[(unsigned __int8)v19 + 768] + (a4[BYTE1(v19) + 512] ^ (a4[BYTE2(v19) + 256] + a4[v19 >> 24]))) ^ a4[1038] ^ v18;\n  v21 = BYTE1(v20);\n  v22 = a4[BYTE2(v20) + 256] + a4[v20 >> 24];\n  v23 = (unsigned __int8)v20;\n  v24 = a4[1040] ^ v20;\n  v25 = (a4[v23 + 768] + (a4[v21 + 512] ^ v22)) ^ a4[1039] ^ v19;\n  v26 = a4[(unsigned __int8)v25 + 768] + (a4[BYTE1(v25) + 512] ^ (a4[BYTE2(v25) + 256] + a4[v25 >> 24]));\n  *v5 = a4[1041] ^ v25;\n  v5[1] = v26 ^ v24;\n  return result;\n}\n", 
            "funcStartAddr": "0x212c0L", 
            "funcEndAddr": "0x215e7L", 
            "funcName": "sub_212C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_215F0(int a1, int a2, unsigned int *a3, _DWORD *a4)\n{\n  signed __int64 result; // rax\n  unsigned int *v5; // r14\n  unsigned int v6; // edi\n  unsigned int v7; // esi\n  unsigned int v8; // ebx\n  unsigned int v9; // er10\n  unsigned int v10; // ebx\n  unsigned int v11; // ebp\n  unsigned int v12; // esi\n  unsigned int v13; // ebx\n  unsigned int v14; // er11\n  unsigned int v15; // ebx\n  unsigned int v16; // er10\n  unsigned int v17; // edi\n  unsigned int v18; // ebx\n  unsigned int v19; // esi\n  unsigned int v20; // ebx\n  __int64 v21; // rdx\n  int v22; // edi\n  __int64 v23; // r10\n  int v24; // ebx\n  unsigned int v25; // esi\n  int v26; // edi\n\n  result = (signed __int64)(a4 + 768);\n  v5 = a3;\n  v6 = a1 ^ a4[1041];\n  v7 = (a4[(unsigned __int8)v6 + 768] + (a4[BYTE1(v6) + 512] ^ (a4[BYTE2(v6) + 256] + a4[v6 >> 24]))) ^ a4[1040] ^ a2;\n  v8 = (a4[(unsigned __int8)v7 + 768] + (a4[BYTE1(v7) + 512] ^ (a4[BYTE2(v7) + 256] + a4[v7 >> 24]))) ^ a4[1039] ^ v6;\n  v9 = a4[1038] ^ v7 ^ (a4[(unsigned __int8)v8 + 768] + (a4[BYTE1(v8) + 512] ^ (a4[BYTE2(v8) + 256] + a4[v8 >> 24])));\n  v10 = (a4[(unsigned __int8)v9 + 768] + (a4[BYTE1(v9) + 512] ^ (a4[BYTE2(v9) + 256] + a4[v9 >> 24]))) ^ a4[1037] ^ v8;\n  v11 = a4[1036] ^ v9 ^ (a4[(unsigned __int8)v10 + 768] + (a4[BYTE1(v10) + 512] ^ (a4[BYTE2(v10) + 256] + a4[v10 >> 24])));\n  v12 = a4[1035] ^ v10 ^ (a4[(unsigned __int8)v11 + 768]\n                        + (a4[BYTE1(v11) + 512] ^ (a4[BYTE2(v11) + 256] + a4[v11 >> 24])));\n  v13 = a4[1034] ^ v11 ^ (a4[(unsigned __int8)v12 + 768]\n                        + (a4[BYTE1(v12) + 512] ^ (a4[BYTE2(v12) + 256] + a4[v12 >> 24])));\n  v14 = a4[1033] ^ v12 ^ (a4[(unsigned __int8)v13 + 768]\n                        + (a4[BYTE1(v13) + 512] ^ (a4[BYTE2(v13) + 256] + a4[v13 >> 24])));\n  v15 = (a4[(unsigned __int8)v14 + 768] + (a4[BYTE1(v14) + 512] ^ (a4[BYTE2(v14) + 256] + a4[v14 >> 24]))) ^ a4[1032] ^ v13;\n  v16 = a4[1031] ^ v14 ^ (a4[(unsigned __int8)v15 + 768]\n                        + (a4[BYTE1(v15) + 512] ^ (a4[BYTE2(v15) + 256] + a4[v15 >> 24])));\n  v17 = a4[1030] ^ v15 ^ (a4[(unsigned __int8)v16 + 768]\n                        + (a4[BYTE1(v16) + 512] ^ (a4[BYTE2(v16) + 256] + a4[v16 >> 24])));\n  v18 = a4[1029] ^ v16 ^ (a4[(unsigned __int8)v17 + 768]\n                        + (a4[BYTE1(v17) + 512] ^ (a4[BYTE2(v17) + 256] + a4[v17 >> 24])));\n  v19 = a4[1028] ^ v17 ^ (a4[(unsigned __int8)v18 + 768]\n                        + (a4[BYTE1(v18) + 512] ^ (a4[BYTE2(v18) + 256] + a4[v18 >> 24])));\n  v20 = (a4[(unsigned __int8)v19 + 768] + (a4[BYTE1(v19) + 512] ^ (a4[BYTE2(v19) + 256] + a4[v19 >> 24]))) ^ a4[1027] ^ v18;\n  v21 = BYTE1(v20);\n  v22 = a4[BYTE2(v20) + 256] + a4[v20 >> 24];\n  v23 = (unsigned __int8)v20;\n  v24 = a4[1025] ^ v20;\n  v25 = (a4[v23 + 768] + (a4[v21 + 512] ^ v22)) ^ a4[1026] ^ v19;\n  v26 = a4[(unsigned __int8)v25 + 768] + (a4[BYTE1(v25) + 512] ^ (a4[BYTE2(v25) + 256] + a4[v25 >> 24]));\n  *v5 = a4[1024] ^ v25;\n  v5[1] = v26 ^ v24;\n  return result;\n}\n", 
            "funcStartAddr": "0x215f0L", 
            "funcEndAddr": "0x21917L", 
            "funcName": "sub_215F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21920(__int64 a1, _DWORD *a2)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)(a1 - 8) = *a2;\n  result = (unsigned int)a2[1];\n  *(_DWORD *)(a1 - 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x21920L", 
            "funcEndAddr": "0x2192cL", 
            "funcName": "sub_21920"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21930(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)(a1 - 8) = _byteswap_ulong(*a2);\n  result = _byteswap_ulong(a2[1]);\n  *(_DWORD *)(a1 - 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x21930L", 
            "funcEndAddr": "0x21940L", 
            "funcName": "sub_21930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21940(__int64 a1, int *a2, int a3)\n{\n  int v3; // er15\n  int v4; // ebp\n  int *v5; // rbx\n  int v6; // er13\n  int v7; // er12\n  int v8; // edx\n  int v9; // eax\n  bool v10; // zf\n  __int64 result; // rax\n  unsigned __int64 v12; // rt1\n  signed __int64 v13; // [rsp+10h] [rbp-58h]\n  int v14; // [rsp+20h] [rbp-48h]\n  int v15; // [rsp+24h] [rbp-44h]\n  unsigned __int64 v16; // [rsp+28h] [rbp-40h]\n\n  v16 = __readfsqword(0x28u);\n  if ( a3 & 7 )\n    goto LABEL_11;\n  v3 = *(_DWORD *)(a1 - 8);\n  v4 = *(_DWORD *)(a1 - 4);\n  if ( a3 <= 0 )\n  {\n    v7 = *(_DWORD *)(a1 - 4);\n    v6 = *(_DWORD *)(a1 - 8);\n  }\n  else\n  {\n    v5 = a2;\n    v13 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v6 = *v5;\n      v7 = v5[1];\n      v5 += 2;\n      sub_215F0(v6, v7, (unsigned int *)&v14, (_DWORD *)(a1 - 4176));\n      v8 = v3 ^ v14;\n      v9 = v4 ^ v15;\n      v3 = v6;\n      *((_WORD *)v5 - 4) = v8;\n      *((_WORD *)v5 - 2) = v9;\n      *((_BYTE *)v5 - 5) = HIBYTE(v8);\n      *((_BYTE *)v5 - 6) = BYTE2(v8);\n      *((_BYTE *)v5 - 2) = BYTE2(v9);\n      *((_BYTE *)v5 - 1) = HIBYTE(v9);\n      v4 = v7;\n    }\n    while ( (int *)v13 != v5 );\n  }\n  v12 = __readfsqword(0x28u);\n  result = v12 ^ v16;\n  v10 = v12 == v16;\n  *(_DWORD *)(a1 - 8) = v6;\n  *(_DWORD *)(a1 - 4) = v7;\n  if ( !v10 )\nLABEL_11:\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x161u, \"blowfish_lsb_decrypt_cbc\");\n  return result;\n}\n", 
            "funcStartAddr": "0x21940L", 
            "funcEndAddr": "0x21a64L", 
            "funcName": "sub_21940"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_21A70(__int64 a1, _DWORD *a2, int a3)\n{\n  __int64 v3; // r14\n  int v4; // ecx\n  int v5; // eax\n  _DWORD *v6; // rbp\n  _DWORD *v7; // rbx\n  signed __int64 v8; // r13\n  int v9; // eax\n  int v10; // edi\n  int v12; // [rsp+0h] [rbp-38h]\n  int v13; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-30h]\n\n  v14 = __readfsqword(0x28u);\n  if ( a3 & 7 )\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x133u, \"blowfish_lsb_encrypt_cbc\");\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 - 8);\n  v5 = *(_DWORD *)(a1 - 4);\n  if ( a3 > 0 )\n  {\n    v6 = (_DWORD *)(a1 - 4176);\n    v7 = a2;\n    v8 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v9 = v7[1] ^ v5;\n      v10 = *v7;\n      v7 += 2;\n      sub_212C0(v4 ^ v10, v9, (unsigned int *)&v12, v6);\n      v4 = v12;\n      v5 = v13;\n      *((_WORD *)v7 - 4) = v12;\n      *((_WORD *)v7 - 2) = v5;\n      *((_BYTE *)v7 - 6) = BYTE2(v4);\n      *((_BYTE *)v7 - 5) = HIBYTE(v4);\n      *((_BYTE *)v7 - 2) = BYTE2(v5);\n      *((_BYTE *)v7 - 1) = HIBYTE(v5);\n    }\n    while ( (_DWORD *)v8 != v7 );\n  }\n  *(_DWORD *)(v3 - 4) = v5;\n  *(_DWORD *)(v3 - 8) = v4;\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0x21a70L", 
            "funcEndAddr": "0x21b59L", 
            "funcName": "sub_21A70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21B60(__int64 a1, unsigned int *a2, int a3)\n{\n  int v3; // er15\n  int v4; // ebp\n  unsigned int *v5; // rbx\n  unsigned int v6; // er9\n  unsigned int v7; // er8\n  int v8; // er13\n  int v9; // er12\n  int v10; // edx\n  int v11; // eax\n  bool v12; // zf\n  __int64 result; // rax\n  unsigned __int64 v14; // rt1\n  signed __int64 v15; // [rsp+10h] [rbp-58h]\n  int v16; // [rsp+20h] [rbp-48h]\n  int v17; // [rsp+24h] [rbp-44h]\n  unsigned __int64 v18; // [rsp+28h] [rbp-40h]\n\n  v18 = __readfsqword(0x28u);\n  if ( a3 & 7 )\n    goto LABEL_11;\n  v3 = *(_DWORD *)(a1 - 8);\n  v4 = *(_DWORD *)(a1 - 4);\n  if ( a3 <= 0 )\n  {\n    v9 = *(_DWORD *)(a1 - 4);\n    v8 = *(_DWORD *)(a1 - 8);\n  }\n  else\n  {\n    v5 = a2;\n    v15 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v6 = *v5;\n      v7 = v5[1];\n      v5 += 2;\n      v8 = _byteswap_ulong(v6);\n      v9 = _byteswap_ulong(v7);\n      sub_215F0(v8, v9, (unsigned int *)&v16, (_DWORD *)(a1 - 4176));\n      v10 = v3 ^ v16;\n      v11 = v4 ^ v17;\n      v3 = v8;\n      *((_BYTE *)v5 - 5) = v10;\n      *((_BYTE *)v5 - 6) = BYTE1(v10);\n      *((_BYTE *)v5 - 1) = v11;\n      *((_BYTE *)v5 - 2) = BYTE1(v11);\n      *((_BYTE *)v5 - 8) = HIBYTE(v10);\n      *((_BYTE *)v5 - 7) = BYTE2(v10);\n      *((_BYTE *)v5 - 3) = BYTE2(v11);\n      *((_BYTE *)v5 - 4) = HIBYTE(v11);\n      v4 = v9;\n    }\n    while ( (unsigned int *)v15 != v5 );\n  }\n  v14 = __readfsqword(0x28u);\n  result = v14 ^ v18;\n  v12 = v14 == v18;\n  *(_DWORD *)(a1 - 8) = v8;\n  *(_DWORD *)(a1 - 4) = v9;\n  if ( !v12 )\nLABEL_11:\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x199u, \"blowfish_msb_decrypt_cbc\");\n  return result;\n}\n", 
            "funcStartAddr": "0x21b60L", 
            "funcEndAddr": "0x21c8cL", 
            "funcName": "sub_21B60"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_21C90(__int64 a1, unsigned int *a2, int a3)\n{\n  __int64 v3; // r14\n  int v4; // ecx\n  int v5; // eax\n  _DWORD *v6; // rbp\n  unsigned int *v7; // rbx\n  signed __int64 v8; // r13\n  unsigned int v9; // edi\n  unsigned int v10; // esi\n  int v12; // [rsp+0h] [rbp-38h]\n  int v13; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-30h]\n\n  v14 = __readfsqword(0x28u);\n  if ( a3 & 7 )\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x17Du, \"blowfish_msb_encrypt_cbc\");\n  v3 = a1;\n  v4 = *(_DWORD *)(a1 - 8);\n  v5 = *(_DWORD *)(a1 - 4);\n  if ( a3 > 0 )\n  {\n    v6 = (_DWORD *)(a1 - 4176);\n    v7 = a2;\n    v8 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v9 = *v7;\n      v10 = v7[1];\n      v7 += 2;\n      sub_212C0(v4 ^ _byteswap_ulong(v9), v5 ^ _byteswap_ulong(v10), (unsigned int *)&v12, v6);\n      v4 = v12;\n      v5 = v13;\n      *((_BYTE *)v7 - 5) = v12;\n      *((_BYTE *)v7 - 6) = BYTE1(v4);\n      *((_BYTE *)v7 - 1) = v5;\n      *((_BYTE *)v7 - 2) = BYTE1(v5);\n      *((_BYTE *)v7 - 7) = BYTE2(v4);\n      *((_BYTE *)v7 - 8) = HIBYTE(v4);\n      *((_BYTE *)v7 - 3) = BYTE2(v5);\n      *((_BYTE *)v7 - 4) = HIBYTE(v5);\n    }\n    while ( (unsigned int *)v8 != v7 );\n  }\n  *(_DWORD *)(v3 - 4) = v5;\n  *(_DWORD *)(v3 - 8) = v4;\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0x21c90L", 
            "funcEndAddr": "0x21d7dL", 
            "funcName": "sub_21C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21D80(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // ebp\n  int v4; // er13\n  __int64 v5; // rbx\n  unsigned int v6; // er14\n  unsigned __int32 v7; // eax\n  char v8; // dh^1\n  unsigned int v9; // eax\n  unsigned __int32 v10; // eax\n  bool v11; // zf\n  __int64 result; // rax\n  unsigned __int64 v13; // rt1\n  int v14; // [rsp+10h] [rbp-48h]\n  int v15; // [rsp+14h] [rbp-44h]\n  unsigned __int64 v16; // [rsp+18h] [rbp-40h]\n\n  v16 = __readfsqword(0x28u);\n  if ( a3 & 7 )\n    goto LABEL_11;\n  v3 = *(_DWORD *)(a1 - 8);\n  v4 = *(_DWORD *)(a1 - 4);\n  if ( a3 > 0 )\n  {\n    v5 = a2;\n    v6 = v4 + ((unsigned int)(a3 - 1) >> 3) + 1;\n    do\n    {\n      sub_212C0(v3, v4, (unsigned int *)&v14, (_DWORD *)(a1 - 4176));\n      v7 = v14 ^ _byteswap_ulong(*(_DWORD *)v5);\n      v8 = BYTE2(v7);\n      *(_BYTE *)(v5 + 3) = v7;\n      *(_BYTE *)(v5 + 2) = BYTE1(v7);\n      *(_BYTE *)v5 = HIBYTE(v7);\n      v9 = *(_DWORD *)(v5 + 4);\n      *(_BYTE *)(v5 + 1) = v8;\n      v10 = v15 ^ _byteswap_ulong(v9);\n      *(_BYTE *)(v5 + 7) = v10;\n      *(_BYTE *)(v5 + 6) = BYTE1(v10);\n      v11 = v4++ == -1;\n      *(_BYTE *)(v5 + 5) = BYTE2(v10);\n      *(_BYTE *)(v5 + 4) = HIBYTE(v10);\n      if ( v11 )\n        ++v3;\n      v5 += 8LL;\n    }\n    while ( v6 != v4 );\n  }\n  v13 = __readfsqword(0x28u);\n  result = v13 ^ v16;\n  v11 = v13 == v16;\n  *(_DWORD *)(a1 - 8) = v3;\n  *(_DWORD *)(a1 - 4) = v4;\n  if ( !v11 )\nLABEL_11:\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x1B5u, \"blowfish_msb_sdctr\");\n  return result;\n}\n", 
            "funcStartAddr": "0x21d80L", 
            "funcEndAddr": "0x21e89L", 
            "funcName": "sub_21D80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_21E90(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x1058uLL, 0LL);\n  *(_QWORD *)(v1 + 4176) = a1;\n  return v1 + 4176;\n}\n", 
            "funcStartAddr": "0x21e90L", 
            "funcEndAddr": "0x21eb4L", 
            "funcName": "sub_21E90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_21EC0(__int64 a1)\n{\n  sub_47E30(a1 - 4176, 4184LL);\n  sub_114C0((void *)(a1 - 4176));\n}\n", 
            "funcStartAddr": "0x21ec0L", 
            "funcEndAddr": "0x21edeL", 
            "funcName": "sub_21EC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_21EE0(int *a1, int a2, _DWORD *a3)\n{\n  int *v3; // rbx\n  _DWORD *v4; // rbp\n  signed __int64 v5; // r13\n  int v6; // esi\n  int v7; // edi\n  __int16 v8; // ah^1\n  char v9; // dh^1\n  int v10; // eax\n  int v12; // [rsp+0h] [rbp-38h]\n  int v13; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-30h]\n\n  v14 = __readfsqword(0x28u);\n  if ( a2 & 7 )\n    __assert_fail(\"(len & 7) == 0\", \"sshblowf.c\", 0x14Fu, \"blowfish_lsb_encrypt_ecb\");\n  if ( a2 > 0 )\n  {\n    v3 = a1;\n    v4 = a3;\n    v5 = (signed __int64)&a1[2 * ((unsigned int)(a2 - 1) >> 3) + 2];\n    do\n    {\n      v6 = v3[1];\n      v7 = *v3;\n      v3 += 2;\n      sub_212C0(v7, v6, (unsigned int *)&v12, v4);\n      v8 = HIWORD(v12);\n      *((_WORD *)v3 - 4) = v12;\n      v9 = v8;\n      *((_BYTE *)v3 - 5) = HIBYTE(v8);\n      v10 = v13;\n      *((_BYTE *)v3 - 6) = v9;\n      *((_WORD *)v3 - 2) = v10;\n      *((_BYTE *)v3 - 2) = BYTE2(v10);\n      *((_BYTE *)v3 - 1) = HIBYTE(v10);\n    }\n    while ( v3 != (int *)v5 );\n  }\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0x21ee0L", 
            "funcEndAddr": "0x21fa7L", 
            "funcName": "sub_21EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_21FB0(__int64 a1)\n{\n  __int64 v1; // rax\n  signed int i; // edx\n  __int64 result; // rax\n  signed int v4; // er8\n  signed int v5; // esi\n  signed int v6; // ecx\n  signed int v7; // edx\n\n  v1 = 0LL;\n  for ( i = 608135816; ; i = *(_DWORD *)((char *)&unk_4DCC0 + v1) )\n  {\n    *(_DWORD *)(a1 + v1 + 4096) = i;\n    v1 += 4LL;\n    if ( v1 == 72 )\n      break;\n  }\n  result = 0LL;\n  v4 = 976866871;\n  v5 = -381855128;\n  v6 = 1266315497;\n  v7 = -785314906;\n  while ( 1 )\n  {\n    *(_DWORD *)(a1 + result) = v7;\n    *(_DWORD *)(a1 + result + 1024) = v6;\n    *(_DWORD *)(a1 + result + 2048) = v5;\n    *(_DWORD *)(a1 + result + 3072) = v4;\n    result += 4LL;\n    if ( result == 1024 )\n      break;\n    v7 = *(_DWORD *)((char *)&unk_4D8C0 + result);\n    v6 = *(_DWORD *)((char *)&unk_4D4C0 + result);\n    v5 = *(_DWORD *)((char *)&unk_4D0C0 + result);\n    v4 = *(_DWORD *)((char *)&unk_4CCC0 + result);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x21fb0L", 
            "funcEndAddr": "0x2204eL", 
            "funcName": "sub_21FB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22050(_DWORD *a1, __int64 a2, __int16 a3, char *a4, __int16 a5)\n{\n  signed __int64 v5; // r14\n  signed __int64 v6; // r13\n  signed __int64 v7; // r12\n  char *v8; // rbx\n  signed int v9; // er15\n  int v10; // ecx\n  signed __int64 v11; // r8\n  int v12; // edi\n  int v13; // ebp\n  int v14; // er11\n  int v15; // edx\n  int v16; // eax\n  int v17; // ebp\n  int v18; // er11\n  __int64 v19; // rbp\n  int v20; // esi\n  int i; // edi\n  int v22; // eax\n  char v23; // cl\n  int v24; // er11\n  int v25; // eax\n  _DWORD *v26; // r12\n  signed int v27; // ebp\n  int j; // edi\n  int v29; // eax\n  char v30; // cl\n  int v31; // er11\n  int v32; // eax\n  int k; // edi\n  int v34; // eax\n  char v35; // cl\n  int v36; // er10\n  int v37; // eax\n  signed __int64 v38; // r12\n  int l; // edi\n  int v40; // eax\n  char v41; // cl\n  int v42; // er10\n  int v43; // eax\n  int m; // edi\n  int v45; // eax\n  char v46; // cl\n  int v47; // er10\n  int v48; // eax\n  _DWORD *v50; // [rsp+8h] [rbp-70h]\n  signed __int64 v51; // [rsp+18h] [rbp-60h]\n  __int64 v52; // [rsp+2Ch] [rbp-4Ch]\n  char v53; // [rsp+37h] [rbp-41h]\n  unsigned __int64 v54; // [rsp+38h] [rbp-40h]\n\n  v5 = (signed __int64)(a1 + 256);\n  v6 = (signed __int64)(a1 + 768);\n  v7 = (signed __int64)(a1 + 1024);\n  v50 = a1;\n  v54 = __readfsqword(0x28u);\n  v51 = (signed __int64)(a1 + 512);\n  if ( a4 )\n  {\n    v8 = a4;\n    v9 = a5;\n  }\n  else\n  {\n    v53 = 0;\n    v9 = 1;\n    v8 = &v53;\n  }\n  v10 = a3;\n  v11 = (signed __int64)(a1 + 1024);\n  v12 = 0;\n  do\n  {\n    v11 += 4LL;\n    v13 = *(_DWORD *)(v11 - 4) ^ (*(unsigned __int8 *)(a2 + v12 % v10) << 24);\n    *(_DWORD *)(v11 - 4) = v13;\n    v14 = *(unsigned __int8 *)(a2 + (v12 + 1) % v10);\n    v15 = (v12 + 2) % v10;\n    v16 = v12 + 3;\n    v12 += 4;\n    v17 = (v14 << 16) ^ v13;\n    *(_DWORD *)(v11 - 4) = v17;\n    v18 = v17 ^ (*(unsigned __int8 *)(a2 + v15) << 8);\n    *(_DWORD *)(v11 - 4) = v18;\n    *(_DWORD *)(v11 - 4) = *(unsigned __int8 *)(a2 + v16 % v10) ^ v18;\n  }\n  while ( v12 != 72 );\n  v52 = 0LL;\n  v19 = 0LL;\n  v20 = 0;\n  do\n  {\n    for ( i = 0; ; v20 = *((_DWORD *)&v52 + (i >> 2)) )\n    {\n      v22 = i + v19;\n      v23 = ~(_BYTE)i;\n      v24 = i++ >> 2;\n      *((_DWORD *)&v52 + v24) = ((unsigned __int8)v8[v22 % v9] << 8 * (v23 & 3)) ^ v20;\n      if ( i == 8 )\n        break;\n    }\n    sub_212C0(v52, SHIDWORD(v52), (unsigned int *)&v52, v50);\n    v25 = HIDWORD(v52);\n    v20 = v52;\n    *(_DWORD *)(v7 + v19) = v52;\n    *(_DWORD *)(v7 + v19 + 4) = v25;\n    v19 += 8LL;\n  }\n  while ( v19 != 72 );\n  v26 = v50;\n  v27 = 72;\n  do\n  {\n    for ( j = 0; ; v20 = *((_DWORD *)&v52 + (j >> 2)) )\n    {\n      v29 = v27 + j;\n      v30 = ~(_BYTE)j;\n      v31 = j++ >> 2;\n      *((_DWORD *)&v52 + v31) = ((unsigned __int8)v8[v29 % v9] << 8 * (v30 & 3)) ^ v20;\n      if ( j == 8 )\n        break;\n    }\n    v27 += 8;\n    v26 += 2;\n    sub_212C0(v52, SHIDWORD(v52), (unsigned int *)&v52, v50);\n    v32 = HIDWORD(v52);\n    v20 = v52;\n    *(v26 - 2) = v52;\n    *(v26 - 1) = v32;\n  }\n  while ( v27 != 1096 );\n  do\n  {\n    for ( k = 0; ; v20 = *((_DWORD *)&v52 + (k >> 2)) )\n    {\n      v34 = v27 + k;\n      v35 = ~(_BYTE)k;\n      v36 = k++ >> 2;\n      *((_DWORD *)&v52 + v36) = ((unsigned __int8)v8[v34 % v9] << 8 * (v35 & 3)) ^ v20;\n      if ( k == 8 )\n        break;\n    }\n    v27 += 8;\n    v5 += 8LL;\n    sub_212C0(v52, SHIDWORD(v52), (unsigned int *)&v52, v50);\n    v37 = HIDWORD(v52);\n    v20 = v52;\n    *(_DWORD *)(v5 - 8) = v52;\n    *(_DWORD *)(v5 - 4) = v37;\n  }\n  while ( v27 != 2120 );\n  v38 = v51;\n  do\n  {\n    for ( l = 0; ; v20 = *((_DWORD *)&v52 + (l >> 2)) )\n    {\n      v40 = v27 + l;\n      v41 = ~(_BYTE)l;\n      v42 = l++ >> 2;\n      *((_DWORD *)&v52 + v42) = ((unsigned __int8)v8[v40 % v9] << 8 * (v41 & 3)) ^ v20;\n      if ( l == 8 )\n        break;\n    }\n    v27 += 8;\n    v38 += 8LL;\n    sub_212C0(v52, SHIDWORD(v52), (unsigned int *)&v52, v50);\n    v43 = HIDWORD(v52);\n    v20 = v52;\n    *(_DWORD *)(v38 - 8) = v52;\n    *(_DWORD *)(v38 - 4) = v43;\n  }\n  while ( v27 != 3144 );\n  do\n  {\n    for ( m = 0; ; v20 = *((_DWORD *)&v52 + (m >> 2)) )\n    {\n      v45 = v27 + m;\n      v46 = ~(_BYTE)m;\n      v47 = m++ >> 2;\n      *((_DWORD *)&v52 + v47) = ((unsigned __int8)v8[v45 % v9] << 8 * (v46 & 3)) ^ v20;\n      if ( m == 8 )\n        break;\n    }\n    v27 += 8;\n    v6 += 8LL;\n    sub_212C0(v52, SHIDWORD(v52), (unsigned int *)&v52, v50);\n    v48 = HIDWORD(v52);\n    v20 = v52;\n    *(_DWORD *)(v6 - 8) = v52;\n    *(_DWORD *)(v6 - 4) = v48;\n  }\n  while ( v27 != 4168 );\n  return __readfsqword(0x28u) ^ v54;\n}\n", 
            "funcStartAddr": "0x22050L", 
            "funcEndAddr": "0x22406L", 
            "funcName": "sub_22050"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22410(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  signed __int64 v3; // rdi\n  signed int v4; // er8\n  __int16 v5; // dx\n  __int64 i; // rax\n  __int64 v7; // rax\n  signed int v8; // er11\n  signed int v9; // er10\n  signed int v10; // er9\n  signed int v11; // er8\n\n  v2 = a1;\n  v3 = a1 - 4176;\n  v4 = 608135816;\n  v5 = *(_WORD *)(*(_QWORD *)(v3 + 4176) + 80LL);\n  for ( i = 0LL; ; v4 = *(_DWORD *)((char *)&unk_4DCC0 + i) )\n  {\n    *(_DWORD *)(v2 + i - 80) = v4;\n    i += 4LL;\n    if ( i == 72 )\n      break;\n  }\n  v7 = 0LL;\n  v8 = 976866871;\n  v9 = -381855128;\n  v10 = 1266315497;\n  v11 = -785314906;\n  while ( 1 )\n  {\n    *(_DWORD *)(v2 + v7 - 4176) = v11;\n    *(_DWORD *)(v2 + v7 - 3152) = v10;\n    *(_DWORD *)(v2 + v7 - 2128) = v9;\n    *(_DWORD *)(v2 + v7 - 1104) = v8;\n    v7 += 4LL;\n    if ( v7 == 1024 )\n      break;\n    v11 = *(_DWORD *)((char *)&unk_4D8C0 + v7);\n    v10 = *(_DWORD *)((char *)&unk_4D4C0 + v7);\n    v9 = *(_DWORD *)((char *)&unk_4D0C0 + v7);\n    v8 = *(_DWORD *)((char *)&unk_4CCC0 + v7);\n  }\n  return sub_22050((_DWORD *)v3, a2, v5, 0LL, 0);\n}\n", 
            "funcStartAddr": "0x22410L", 
            "funcEndAddr": "0x224deL", 
            "funcName": "sub_22410"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_224E0()\n{\n  return sub_11440(1uLL, 0x1050uLL, 0LL);\n}\n", 
            "funcStartAddr": "0x224e0L", 
            "funcEndAddr": "0x224f1L", 
            "funcName": "sub_224E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22500(void *a1)\n{\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x22500L", 
            "funcEndAddr": "0x22505L", 
            "funcName": "sub_22500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_22510(int a1, int a2, int a3)\n{\n  unsigned int v3; // esi\n  unsigned int v4; // edx\n  signed int v5; // er9\n  unsigned int v6; // ebx\n  unsigned int v7; // edx\n  unsigned int v8; // eax\n  unsigned int v9; // er14\n  int v10; // er8\n  unsigned int v11; // esi\n  unsigned int v12; // er15\n  int v13; // er8\n  unsigned int v14; // edx\n  signed int v15; // edi\n  signed int v16; // ecx\n  signed int v17; // er11\n  int v18; // er13\n  int v19; // ebp\n  int v20; // er12\n  int v21; // ebx\n  signed int *v22; // rax\n  int v23; // er15\n  int v24; // er14\n  int v25; // er10\n  int v26; // er8\n  int v27; // esi\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  int v30; // eax\n  unsigned int v31; // eax\n  unsigned int v32; // eax\n  int v34; // [rsp+0h] [rbp-44h]\n  unsigned int v35; // [rsp+4h] [rbp-40h]\n  unsigned int v36; // [rsp+8h] [rbp-3Ch]\n  unsigned int v37; // [rsp+Ch] [rbp-38h]\n  int v38; // [rsp+10h] [rbp-34h]\n\n  v3 = a1 ^ a2;\n  v4 = __ROL4__(a1, 4) ^ a3;\n  v5 = 234941184;\n  v6 = v4 & 0xFC00FC | 0xFF00FF00;\n  v35 = v4 & 0xFC00FC | 0xFF00FF00;\n  v7 = (v4 >> 8) & 0xFC00FC | 0xFF00FF00;\n  v8 = v3 & 0xFC00FC | 0xFF00FF00;\n  v9 = v7;\n  v10 = (v3 >> 8) & 0xFC00FC;\n  v11 = v6;\n  v12 = v8;\n  v10 |= 0xFF00FF00;\n  v36 = v7;\n  v37 = v8;\n  v38 = v10;\n  v13 = v10 - v6;\n  v14 = v6;\n  v15 = 2063609344;\n  v16 = -167733504;\n  v17 = -2097117952;\n  v18 = 0;\n  v19 = 0;\n  v20 = 0;\n  v21 = 0;\n  v22 = (signed int *)&unk_4DDE0;\n  v34 = v13;\n  v23 = v12 - v11;\n  v24 = v9 - v11;\n  while ( 1 )\n  {\n    v22 += 4;\n    v25 = v16 & (v24 + v14);\n    v26 = v15 & (v23 + v14);\n    v27 = v14 + v34;\n    v21 ^= v14 & v17;\n    v14 += 524296;\n    v20 ^= v25;\n    v19 ^= v26;\n    v18 ^= v5 & v27;\n    if ( v22 == (signed int *)\"triple-DES inner-CBC\" )\n      break;\n    v17 = *v22;\n    v16 = v22[1];\n    v15 = v22[2];\n    v5 = v22[3];\n  }\n  v28 = ((16 * v19 & 15360 * ((v37 + 16777472) & 0x40004) ^ v19) >> 8) & 0xF000F0 | (16 * v18 & 15360\n                                                                                              * ((v38 + 16777472) & 0x40004) ^ v18) & 0xF000F000 | ((16 * v20 & 15360 * ((v36 + 16777472) & 0x40004) ^ v20) >> 4) & 0xF000F00 | ((v21 ^ 16 * v21 & 15360 * ((v35 + 16777472) & 0x40004)) >> 12) & 0xF000F;\n  v29 = 16 * ((v28 ^ (v28 >> 4)) & 0x7030702) ^ (v28 ^ (v28 >> 4)) & 0x7030702 ^ v28;\n  v30 = (((v29 ^ (v29 >> 8)) & 0x4E009E) << 8) ^ (v29 ^ (v29 >> 8)) & 0x4E009E ^ v29;\n  v31 = ((unsigned __int16)((v30 ^ HIWORD(v30)) & 0xD9D3) << 16) ^ ((unsigned __int16)v30 ^ HIWORD(v30)) & 0xD9D3 ^ v30;\n  v32 = 16 * ((v31 ^ (v31 >> 4)) & 0x5040004) ^ (v31 ^ (v31 >> 4)) & 0x5040004 ^ v31;\n  return 2 * ((v32 ^ (v32 >> 1)) & 0x4045015) ^ (v32 ^ (v32 >> 1)) & 0x4045015 ^ v32;\n}\n", 
            "funcStartAddr": "0x22510L", 
            "funcEndAddr": "0x2270fL", 
            "funcName": "sub_22510"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_22710(unsigned __int64 a1, __int64 a2)\n{\n  char *v2; // rax\n  char v3; // cl\n  unsigned __int64 v4; // r8\n  int v5; // ecx\n  __int64 v6; // r10\n  signed __int64 v7; // r11\n  unsigned __int64 v8; // r8\n  __int64 v9; // rdx\n  char v10; // cl\n  char *i; // rax\n  char v12; // cl\n  __int64 v13; // rdx\n  char *result; // rax\n\n  v2 = (char *)&unk_4DDA0;\n  v3 = 7;\n  v4 = 0LL;\n  while ( 1 )\n  {\n    ++v2;\n    v4 *= 2LL;\n    if ( v3 >= 0 )\n      v4 |= (a1 >> v3) & 1;\n    if ( v2 == (char *)&unk_4DDA0 + 60 )\n      break;\n    v3 = *v2;\n  }\n  LOBYTE(v5) = 1;\n  v6 = 0LL;\n  v7 = 64424509455LL;\n  while ( 1 )\n  {\n    v8 = v4 << v5;\n    v9 = 0LL;\n    v10 = 46;\n    v4 = v8 & 0xFFFFFFF0FFFFFFFLL | v7 & (v8 >> 28);\n    for ( i = (char *)&unk_4DD40; ; v10 = *i )\n    {\n      ++i;\n      v9 *= 2LL;\n      if ( v10 >= 0 )\n        v9 |= (v4 >> v10) & 1;\n      if ( i == (char *)dword_4DD60 )\n        break;\n    }\n    *(_DWORD *)(a2 + 4 * v6) = v9;\n    v12 = 57;\n    v13 = 0LL;\n    for ( result = (char *)&unk_4DD20; ; v12 = *result )\n    {\n      ++result;\n      v13 *= 2LL;\n      if ( v12 >= 0 )\n        v13 |= (v4 >> v12) & 1;\n      if ( result == (char *)&unk_4DD40 )\n        break;\n    }\n    *(_DWORD *)(a2 + 4 * v6++ + 64) = v13;\n    if ( v6 == 16 )\n      break;\n    v5 = dword_4DD60[v6];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x22710L", 
            "funcEndAddr": "0x22831L", 
            "funcName": "sub_22710"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22840(unsigned int *a1)\n{\n  return ((unsigned __int64)_byteswap_ulong(a1[1]) << 32) | _byteswap_ulong(*a1);\n}\n", 
            "funcStartAddr": "0x22840L", 
            "funcEndAddr": "0x22858L", 
            "funcName": "sub_22840"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22860(__int64 a1)\n{\n  unsigned int v1; // eax\n  int v2; // edx\n  int v3; // eax\n  int v4; // ecx\n  unsigned int v5; // eax\n  int v6; // ecx\n  int v7; // edi\n  int v8; // ecx\n  int v9; // edx\n  unsigned int v10; // edi\n\n  v1 = (HIDWORD(a1) ^ ((unsigned int)a1 >> 4)) & 0xF0F0F0F;\n  v2 = v1 ^ HIDWORD(a1);\n  LODWORD(a1) = 16 * v1 ^ a1;\n  v3 = (unsigned __int16)(v1 ^ WORD2(a1) ^ WORD1(a1));\n  v4 = v3;\n  v5 = v2 ^ v3;\n  v6 = a1 ^ (v4 << 16);\n  v7 = (v6 ^ (v5 >> 2)) & 0x33333333;\n  v8 = v7 ^ v6;\n  v9 = v5 ^ 4 * v7;\n  v10 = (v8 ^ ((v5 ^ 4 * v7) >> 8)) & 0xFF00FF;\n  return (unsigned int)__ROR4__(2 * ((v9 ^ (v10 << 8) ^ ((v8 ^ v10) >> 1)) & 0x55555555) ^ v8 ^ v10, 1) | ((unsigned __int64)(unsigned int)__ROR4__((v9 ^ (v10 << 8) ^ ((v8 ^ v10) >> 1)) & 0x55555555 ^ v9 ^ (v10 << 8), 1) << 32);\n}\n", 
            "funcStartAddr": "0x22860L", 
            "funcEndAddr": "0x228dcL", 
            "funcName": "sub_22860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_228E0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // r12\n  __int64 v6; // rbx\n  int v7; // er15\n  int *v8; // rax\n  __int64 v9; // rbx\n  int v10; // er14\n  int *v11; // rax\n  __int64 v12; // rbx\n  int v13; // er15\n  int *v14; // rax\n  __int64 v15; // rbx\n  int v16; // er14\n  int *v17; // rax\n  __int64 v18; // rbx\n  int v19; // er15\n  int *v20; // rax\n  __int64 v21; // rbx\n  int v22; // er14\n  int *v23; // rax\n  __int64 v24; // rbx\n  int v25; // er15\n  int *v26; // rax\n  __int64 v27; // rbx\n  int v28; // er14\n  int *v29; // rax\n  __int64 v30; // rbx\n  int v31; // er15\n  int *v32; // rax\n  __int64 v33; // rbx\n  int v34; // er14\n  int v35; // er15\n  __int64 v36; // rbx\n  int *v37; // rax\n  __int64 v38; // rbx\n  int v39; // er14\n  int *v40; // rax\n  __int64 v41; // rbx\n  int v42; // er13\n  int *v43; // rax\n  __int64 v44; // rbx\n  int v45; // er14\n  __int64 v46; // r13\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a4 + a3;\n  v7 = a1 ^ sub_22510(SHIDWORD(a1), *(_DWORD *)(a2 + 4 * a3), *(_DWORD *)(a2 + 4 * a3 + 64));\n  v8 = (int *)(a2 + 4 * v6);\n  v9 = v5 + v6;\n  v10 = (unsigned __int64)sub_22510(v7, *v8, v8[16]) ^ HIDWORD(a1);\n  v11 = (int *)(a2 + 4 * v9);\n  v12 = v5 + v9;\n  v13 = (unsigned __int64)sub_22510(v10, *v11, v11[16]) ^ v7;\n  v14 = (int *)(a2 + 4 * v12);\n  v15 = v5 + v12;\n  v16 = (unsigned __int64)sub_22510(v13, *v14, v14[16]) ^ v10;\n  v17 = (int *)(a2 + 4 * v15);\n  v18 = v5 + v15;\n  v19 = (unsigned __int64)sub_22510(v16, *v17, v17[16]) ^ v13;\n  v20 = (int *)(a2 + 4 * v18);\n  v21 = v5 + v18;\n  v22 = (unsigned __int64)sub_22510(v19, *v20, v20[16]) ^ v16;\n  v23 = (int *)(a2 + 4 * v21);\n  v24 = v5 + v21;\n  v25 = (unsigned __int64)sub_22510(v22, *v23, v23[16]) ^ v19;\n  v26 = (int *)(a2 + 4 * v24);\n  v27 = v5 + v24;\n  v28 = (unsigned __int64)sub_22510(v25, *v26, v26[16]) ^ v22;\n  v29 = (int *)(a2 + 4 * v27);\n  v30 = v5 + v27;\n  v31 = (unsigned __int64)sub_22510(v28, *v29, v29[16]) ^ v25;\n  v32 = (int *)(a2 + 4 * v30);\n  v33 = v5 + v30;\n  v34 = (unsigned __int64)sub_22510(v31, *v32, v32[16]) ^ v28;\n  v35 = (unsigned __int64)sub_22510(v34, *(_DWORD *)(v4 + 4 * v33), *(_DWORD *)(v4 + 4 * v33 + 64)) ^ v31;\n  v36 = v5 + v33;\n  v37 = (int *)(a2 + 4 * v36);\n  v38 = v5 + v36;\n  v39 = (unsigned __int64)sub_22510(v35, *v37, v37[16]) ^ v34;\n  v40 = (int *)(a2 + 4 * v38);\n  v41 = v5 + v38;\n  v42 = v35 ^ (unsigned __int64)sub_22510(v39, *v40, v40[16]);\n  v43 = (int *)(a2 + 4 * v41);\n  v44 = v5 + v41;\n  v45 = (unsigned __int64)sub_22510(v42, *v43, v43[16]) ^ v39;\n  v46 = (unsigned int)sub_22510(v45, *(_DWORD *)(a2 + 4 * v44), *(_DWORD *)(a2 + 4 * v44 + 64)) ^ v42;\n  return (v46 << 32) | v45 ^ (unsigned int)sub_22510(\n                                             v46,\n                                             *(_DWORD *)(v4 + 4 * (v5 + v44)),\n                                             *(_DWORD *)(v4 + 4 * (v5 + v44) + 64));\n}\n", 
            "funcStartAddr": "0x228e0L", 
            "funcEndAddr": "0x22a91L", 
            "funcName": "sub_228E0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_22AA0(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_22710(_byteswap_uint64(*a2), a1 - 136);\n}\n", 
            "funcStartAddr": "0x22aa0L", 
            "funcEndAddr": "0x22ab5L", 
            "funcName": "sub_22AA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22AC0(__int64 a1, unsigned int *a2, int a3)\n{\n  __int64 v4; // rbp\n  __int64 v5; // r13\n  unsigned int *v6; // rbx\n  __int64 v7; // r15\n  __int64 v8; // r14\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rax\n  int v15; // edx\n  int v16; // edi\n  int v17; // ecx\n  unsigned int *v18; // rdi\n  int v19; // edx\n  unsigned int v20; // ecx\n  unsigned int v21; // esi\n  unsigned __int64 v22; // rax\n  int v23; // er10\n  int v24; // er11\n  int v25; // edx\n  signed __int64 v26; // [rsp+8h] [rbp-50h]\n  char v27; // [rsp+10h] [rbp-48h]\n  char v28; // [rsp+11h] [rbp-47h]\n  char v29; // [rsp+12h] [rbp-46h]\n  char v30; // [rsp+13h] [rbp-45h]\n  char v31; // [rsp+14h] [rbp-44h]\n  char v32; // [rsp+15h] [rbp-43h]\n  char v33; // [rsp+16h] [rbp-42h]\n  char v34; // [rsp+17h] [rbp-41h]\n  unsigned __int64 v35; // [rsp+18h] [rbp-40h]\n\n  v35 = __readfsqword(0x28u);\n  if ( a3 > 0 )\n  {\n    v4 = a1 - 392;\n    v5 = a1;\n    v6 = a2;\n    v7 = a1 - 392 + 128;\n    v8 = a1 - 392 + 256;\n    v26 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v9 = *(_QWORD *)(v5 - 8);\n      v34 = *(_QWORD *)(v5 - 8);\n      v33 = BYTE1(v9);\n      v32 = BYTE2(v9);\n      v31 = BYTE3(v9);\n      v30 = BYTE4(v9);\n      v29 = BYTE5(v9);\n      v28 = BYTE6(v9);\n      *(_QWORD *)(v5 - 8) = v9 + 1;\n      v27 = HIBYTE(v9);\n      v10 = sub_22840((unsigned int *)&v27);\n      v11 = sub_22860(v10);\n      v12 = sub_228E0(v11, v4, 0LL, 1LL);\n      v13 = sub_228E0(v12, v7, 15LL, -1LL);\n      v14 = sub_228E0(v13, v8, 0LL, 1LL);\n      v15 = __ROL4__(v14, 1);\n      v16 = (__ROL4__(HIDWORD(v14), 1) ^ (__ROL4__(v14, 1) >> 1)) & 0x55555555;\n      v17 = 2 * v16;\n      LODWORD(v14) = v16 ^ __ROL4__(HIDWORD(v14), 1);\n      v18 = v6;\n      v19 = v17 ^ v15;\n      v20 = (v19 ^ ((unsigned int)v14 >> 8)) & 0xFF00FF;\n      LODWORD(v14) = (v20 << 8) ^ v14;\n      v6 += 2;\n      v21 = 4 * ((v20 ^ v19 ^ ((unsigned int)v14 >> 2)) & 0x33333333) ^ v14 ^ (unsigned __int16)(4\n                                                                                               * ((v20 ^ v19 ^ ((unsigned int)v14 >> 2)) & 0x3333) ^ v14 ^ (((v20 ^ v19 ^ ((unsigned int)v14 >> 2)) & 0x33333333) >> 16) ^ ((v20 ^ v19) >> 16));\n      v22 = sub_22840(v18);\n      v25 = 16 * v24 ^ v22 ^ v23;\n      LODWORD(v22) = v24 ^ v21 ^ HIDWORD(v22);\n      *((_BYTE *)v6 - 5) = v25;\n      *((_BYTE *)v6 - 6) = BYTE1(v25);\n      *((_BYTE *)v6 - 1) = v22;\n      *((_BYTE *)v6 - 8) = HIBYTE(v25);\n      *((_BYTE *)v6 - 2) = BYTE1(v22);\n      *((_BYTE *)v6 - 7) = BYTE2(v25);\n      *((_BYTE *)v6 - 3) = (v24 ^ v21 ^ HIDWORD(v22)) >> 16;\n      *((_BYTE *)v6 - 4) = BYTE3(v22);\n    }\n    while ( v6 != (unsigned int *)v26 );\n  }\n  sub_47E30(&v27, 8LL);\n  return __readfsqword(0x28u) ^ v35;\n}\n", 
            "funcStartAddr": "0x22ac0L", 
            "funcEndAddr": "0x22cc3L", 
            "funcName": "sub_22AC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22CD0(__int64 a1)\n{\n  sub_47E30(a1 - 136, 144LL);\n  sub_114C0((void *)(a1 - 136));\n}\n", 
            "funcStartAddr": "0x22cd0L", 
            "funcEndAddr": "0x22ceeL", 
            "funcName": "sub_22CD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22CF0(__int64 a1)\n{\n  sub_47E30(a1 - 392, 400LL);\n  sub_114C0((void *)(a1 - 392));\n}\n", 
            "funcStartAddr": "0x22cf0L", 
            "funcEndAddr": "0x22d0eL", 
            "funcName": "sub_22CF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22D10(__int64 a1)\n{\n  sub_47E30(a1 - 392, 400LL);\n  sub_114C0((void *)(a1 - 392));\n}\n", 
            "funcStartAddr": "0x22d10L", 
            "funcEndAddr": "0x22d2eL", 
            "funcName": "sub_22D10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22D30(__int64 a1)\n{\n  sub_47E30(a1 - 408, 416LL);\n  sub_114C0((void *)(a1 - 408));\n}\n", 
            "funcStartAddr": "0x22d30L", 
            "funcEndAddr": "0x22d4eL", 
            "funcName": "sub_22D30"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_22D50(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x90uLL, 0LL);\n  *(_QWORD *)(v1 + 136) = a1;\n  return v1 + 136;\n}\n", 
            "funcStartAddr": "0x22d50L", 
            "funcEndAddr": "0x22d74L", 
            "funcName": "sub_22D50"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_22D80(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x190uLL, 0LL);\n  *(_QWORD *)(v1 + 392) = a1;\n  return v1 + 392;\n}\n", 
            "funcStartAddr": "0x22d80L", 
            "funcEndAddr": "0x22da4L", 
            "funcName": "sub_22D80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_22DB0(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x190uLL, 0LL);\n  *(_QWORD *)(v1 + 392) = a1;\n  return v1 + 392;\n}\n", 
            "funcStartAddr": "0x22db0L", 
            "funcEndAddr": "0x22dd4L", 
            "funcName": "sub_22DB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_22DE0(__int64 a1)\n{\n  __int64 v1; // rax\n\n  v1 = sub_11440(1uLL, 0x1A0uLL, 0LL);\n  *(_QWORD *)(v1 + 408) = a1;\n  return v1 + 408;\n}\n", 
            "funcStartAddr": "0x22de0L", 
            "funcEndAddr": "0x22e04L", 
            "funcName": "sub_22DE0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_22E10(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rbp\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  unsigned __int64 v5; // rdi\n  __int64 v6; // rsi\n  char *result; // rax\n\n  v2 = a1 - 392;\n  v3 = a2;\n  v4 = 0LL;\n  do\n  {\n    v5 = *(_QWORD *)(v3 + 8 * v4);\n    v6 = v2;\n    ++v4;\n    v2 += 128LL;\n    result = sub_22710(_byteswap_uint64(v5), v6);\n  }\n  while ( v4 != 3 );\n  return result;\n}\n", 
            "funcStartAddr": "0x22e10L", 
            "funcEndAddr": "0x22e42L", 
            "funcName": "sub_22E10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_22E50(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rbp\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  unsigned __int64 v5; // rdi\n  __int64 v6; // rsi\n  char *result; // rax\n\n  v2 = a1 - 392;\n  v3 = a2;\n  v4 = 0LL;\n  do\n  {\n    v5 = *(_QWORD *)(v3 + 8 * v4);\n    v6 = v2;\n    ++v4;\n    v2 += 128LL;\n    result = sub_22710(_byteswap_uint64(v5), v6);\n  }\n  while ( v4 != 3 );\n  return result;\n}\n", 
            "funcStartAddr": "0x22e50L", 
            "funcEndAddr": "0x22e82L", 
            "funcName": "sub_22E50"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_22E90(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rbp\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  unsigned __int64 v5; // rdi\n  __int64 v6; // rsi\n  char *result; // rax\n\n  v2 = a1 - 408;\n  v3 = a2;\n  v4 = 0LL;\n  do\n  {\n    v5 = *(_QWORD *)(v3 + 8 * v4);\n    v6 = v2;\n    ++v4;\n    v2 += 128LL;\n    result = sub_22710(_byteswap_uint64(v5), v6);\n  }\n  while ( v4 != 3 );\n  return result;\n}\n", 
            "funcStartAddr": "0x22e90L", 
            "funcEndAddr": "0x22ec2L", 
            "funcName": "sub_22E90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22ED0(__int64 a1, unsigned __int64 *a2)\n{\n  unsigned __int64 result; // rax\n\n  result = _byteswap_uint64(*a2);\n  *(_QWORD *)(a1 - 8) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x22ed0L", 
            "funcEndAddr": "0x22edbL", 
            "funcName": "sub_22ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_22EE0(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n\n  result = _byteswap_ulong(a2[1]);\n  *(_DWORD *)(a1 - 8) = _byteswap_ulong(*a2);\n  *(_DWORD *)(a1 - 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x22ee0L", 
            "funcEndAddr": "0x22ef0L", 
            "funcName": "sub_22EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_22EF0(__int64 a1, unsigned int *a2)\n{\n  __int64 result; // rax\n\n  result = _byteswap_ulong(a2[1]);\n  *(_DWORD *)(a1 - 8) = _byteswap_ulong(*a2);\n  *(_DWORD *)(a1 - 4) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x22ef0L", 
            "funcEndAddr": "0x22f00L", 
            "funcName": "sub_22EF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_22F00(__int64 a1, unsigned int *a2)\n{\n  unsigned __int64 result; // rax\n  __int64 v3; // r8\n\n  result = sub_22860(((unsigned __int64)_byteswap_ulong(a2[1]) << 32) | _byteswap_ulong(*a2));\n  *(_DWORD *)(v3 - 24) = result;\n  *(_DWORD *)(v3 - 16) = result;\n  *(_DWORD *)(v3 - 8) = result;\n  *(_DWORD *)(v3 - 20) = HIDWORD(result);\n  *(_DWORD *)(v3 - 12) = HIDWORD(result);\n  *(_DWORD *)(v3 - 4) = HIDWORD(result);\n  return result;\n}\n", 
            "funcStartAddr": "0x22f00L", 
            "funcEndAddr": "0x22f3fL", 
            "funcName": "sub_22F00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_22F40(__int64 a1, __int64 a2, int a3)\n{\n  signed int v3; // er9\n  signed int v4; // er11\n  unsigned __int32 v5; // ebx\n  unsigned __int32 v6; // edi\n  int v7; // eax\n  int v8; // edx\n  int v9; // eax\n  int v10; // edx\n  int v11; // esi\n  unsigned int v12; // eax\n  int v13; // edx\n  int v14; // ecx\n  int v15; // edx\n  int v16; // esi\n  unsigned int v17; // ecx\n  unsigned int v18; // eax\n  unsigned int v19; // ecx\n  int v20; // eax\n  int v21; // edx\n  int v22; // eax\n  unsigned int v23; // edx\n  unsigned int v24; // eax\n  signed int v25; // edi\n  int v26; // er12\n  int v27; // er13\n  int v28; // ebp\n  unsigned int v29; // ecx\n  unsigned int v30; // eax\n  int v31; // ebx\n  signed int v32; // ecx\n  int v33; // esi\n  unsigned int v34; // er14\n  int v35; // er8\n  int v36; // edx\n  signed int *v37; // rax\n  unsigned int v38; // ebx\n  int v39; // er15\n  int v40; // er14\n  int v41; // er8\n  int v42; // esi\n  int v43; // er10\n  signed int v44; // er9\n  signed int v45; // er11\n  signed int v46; // edi\n  unsigned int v47; // edx\n  int v48; // eax\n  unsigned int v49; // eax\n  unsigned int v50; // eax\n  unsigned int v51; // eax\n  int v52; // eax\n  int v53; // er12\n  int v54; // er13\n  int v55; // ebp\n  unsigned int v56; // edx\n  unsigned int v57; // eax\n  unsigned int v58; // ecx\n  unsigned int v59; // eax\n  int v60; // ebx\n  signed int v61; // ecx\n  int v62; // esi\n  unsigned int v63; // er14\n  int v64; // er8\n  int v65; // edx\n  signed int *v66; // rax\n  unsigned int v67; // ebx\n  int v68; // er15\n  int v69; // er14\n  int v70; // er8\n  int v71; // esi\n  int v72; // er10\n  signed int v73; // er9\n  signed int v74; // er11\n  signed int v75; // edi\n  unsigned int v76; // edx\n  int v77; // eax\n  unsigned int v78; // eax\n  unsigned int v79; // eax\n  unsigned int v80; // eax\n  int v81; // eax\n  int v82; // er12\n  int v83; // er13\n  int v84; // ebp\n  unsigned int v85; // edx\n  unsigned int v86; // eax\n  unsigned int v87; // ecx\n  unsigned int v88; // eax\n  int v89; // ebx\n  signed int v90; // ecx\n  int v91; // esi\n  unsigned int v92; // er14\n  int v93; // er8\n  int v94; // edx\n  signed int *v95; // rax\n  unsigned int v96; // ebx\n  int v97; // er15\n  int v98; // er14\n  int v99; // er8\n  int v100; // esi\n  int v101; // er10\n  signed int v102; // er9\n  signed int v103; // er11\n  signed int v104; // edi\n  unsigned int v105; // edx\n  int v106; // eax\n  unsigned int v107; // eax\n  unsigned int v108; // eax\n  unsigned int v109; // eax\n  int v110; // eax\n  int v111; // er12\n  int v112; // er13\n  int v113; // ebp\n  unsigned int v114; // edx\n  unsigned int v115; // eax\n  unsigned int v116; // ecx\n  unsigned int v117; // eax\n  int v118; // ebx\n  signed int v119; // ecx\n  int v120; // esi\n  unsigned int v121; // er14\n  int v122; // er8\n  int v123; // edx\n  signed int *v124; // rax\n  unsigned int v125; // ebx\n  int v126; // er15\n  int v127; // er14\n  int v128; // esi\n  int v129; // er10\n  signed int v130; // er9\n  signed int v131; // er11\n  signed int v132; // edi\n  unsigned int v133; // edx\n  int v134; // eax\n  unsigned int v135; // eax\n  unsigned int v136; // eax\n  unsigned int v137; // eax\n  int v138; // eax\n  int v139; // er12\n  int v140; // er13\n  int v141; // ebp\n  unsigned int v142; // edx\n  unsigned int v143; // eax\n  unsigned int v144; // ecx\n  unsigned int v145; // eax\n  int v146; // ebx\n  signed int v147; // ecx\n  int v148; // esi\n  unsigned int v149; // er14\n  int v150; // er8\n  int v151; // edx\n  signed int *v152; // rax\n  unsigned int v153; // ebx\n  int v154; // er15\n  int v155; // er14\n  int v156; // er8\n  int v157; // esi\n  int v158; // er10\n  signed int v159; // er9\n  signed int v160; // er11\n  signed int v161; // edi\n  unsigned int v162; // edx\n  int v163; // eax\n  unsigned int v164; // eax\n  unsigned int v165; // eax\n  unsigned int v166; // eax\n  int v167; // eax\n  int v168; // er12\n  int v169; // er13\n  int v170; // ebp\n  unsigned int v171; // edx\n  unsigned int v172; // eax\n  unsigned int v173; // ecx\n  unsigned int v174; // eax\n  int v175; // ebx\n  signed int v176; // ecx\n  int v177; // esi\n  unsigned int v178; // er14\n  int v179; // er8\n  int v180; // edx\n  signed int *v181; // rax\n  unsigned int v182; // ebx\n  int v183; // er15\n  int v184; // er14\n  int v185; // esi\n  int v186; // er10\n  signed int v187; // er9\n  signed int v188; // er11\n  signed int v189; // edi\n  unsigned int v190; // edx\n  int v191; // eax\n  unsigned int v192; // eax\n  unsigned int v193; // eax\n  unsigned int v194; // eax\n  int v195; // eax\n  int v196; // er12\n  int v197; // er13\n  int v198; // ebp\n  unsigned int v199; // edx\n  unsigned int v200; // eax\n  unsigned int v201; // ecx\n  unsigned int v202; // eax\n  int v203; // ebx\n  signed int v204; // ecx\n  int v205; // esi\n  unsigned int v206; // er14\n  int v207; // er8\n  int v208; // edx\n  signed int *v209; // rax\n  unsigned int v210; // ebx\n  int v211; // er15\n  int v212; // er14\n  int v213; // er8\n  int v214; // esi\n  int v215; // er10\n  signed int v216; // er9\n  signed int v217; // er11\n  signed int v218; // edi\n  unsigned int v219; // edx\n  int v220; // eax\n  unsigned int v221; // eax\n  unsigned int v222; // eax\n  unsigned int v223; // eax\n  int v224; // eax\n  int v225; // er12\n  int v226; // er13\n  int v227; // ebp\n  unsigned int v228; // edx\n  unsigned int v229; // eax\n  unsigned int v230; // ecx\n  unsigned int v231; // eax\n  int v232; // ebx\n  signed int v233; // ecx\n  int v234; // esi\n  unsigned int v235; // er14\n  int v236; // er8\n  int v237; // edx\n  signed int *v238; // rax\n  unsigned int v239; // ebx\n  int v240; // er15\n  int v241; // er14\n  int v242; // esi\n  int v243; // er10\n  signed int v244; // er9\n  signed int v245; // er11\n  signed int v246; // edi\n  unsigned int v247; // edx\n  int v248; // eax\n  unsigned int v249; // eax\n  unsigned int v250; // eax\n  unsigned int v251; // eax\n  int v252; // eax\n  int v253; // er12\n  int v254; // er13\n  int v255; // ebp\n  unsigned int v256; // edx\n  unsigned int v257; // eax\n  unsigned int v258; // ecx\n  unsigned int v259; // eax\n  int v260; // ebx\n  signed int v261; // ecx\n  int v262; // esi\n  unsigned int v263; // er14\n  int v264; // er8\n  int v265; // edx\n  signed int *v266; // rax\n  unsigned int v267; // ebx\n  int v268; // er15\n  int v269; // er14\n  int v270; // er8\n  int v271; // esi\n  int v272; // er10\n  signed int v273; // er9\n  signed int v274; // er11\n  signed int v275; // edi\n  unsigned int v276; // edx\n  int v277; // eax\n  unsigned int v278; // eax\n  unsigned int v279; // eax\n  unsigned int v280; // eax\n  int v281; // eax\n  int v282; // er12\n  int v283; // er13\n  int v284; // ebp\n  unsigned int v285; // edx\n  unsigned int v286; // eax\n  unsigned int v287; // ecx\n  unsigned int v288; // eax\n  int v289; // ebx\n  signed int v290; // ecx\n  int v291; // esi\n  unsigned int v292; // er14\n  int v293; // er8\n  int v294; // edx\n  signed int *v295; // rax\n  unsigned int v296; // ebx\n  int v297; // er15\n  int v298; // er14\n  int v299; // esi\n  int v300; // er10\n  signed int v301; // er9\n  signed int v302; // er11\n  signed int v303; // edi\n  unsigned int v304; // edx\n  int v305; // eax\n  unsigned int v306; // eax\n  unsigned int v307; // eax\n  unsigned int v308; // eax\n  int v309; // eax\n  int v310; // er12\n  int v311; // er13\n  int v312; // ebp\n  unsigned int v313; // edx\n  unsigned int v314; // eax\n  unsigned int v315; // ecx\n  unsigned int v316; // eax\n  int v317; // ebx\n  signed int v318; // ecx\n  int v319; // esi\n  unsigned int v320; // er14\n  int v321; // er8\n  int v322; // edx\n  signed int *v323; // rax\n  unsigned int v324; // ebx\n  int v325; // er15\n  int v326; // er14\n  int v327; // er8\n  int v328; // esi\n  int v329; // er10\n  signed int v330; // er9\n  signed int v331; // er11\n  signed int v332; // edi\n  unsigned int v333; // edx\n  int v334; // eax\n  unsigned int v335; // eax\n  unsigned int v336; // eax\n  unsigned int v337; // eax\n  int v338; // eax\n  int v339; // er12\n  int v340; // er13\n  int v341; // ebp\n  unsigned int v342; // edx\n  unsigned int v343; // eax\n  unsigned int v344; // ecx\n  unsigned int v345; // eax\n  int v346; // ebx\n  signed int v347; // ecx\n  int v348; // esi\n  unsigned int v349; // er14\n  int v350; // er8\n  int v351; // edx\n  signed int *v352; // rax\n  unsigned int v353; // ebx\n  int v354; // er15\n  int v355; // er14\n  int v356; // esi\n  int v357; // er10\n  signed int v358; // er9\n  signed int v359; // er11\n  signed int v360; // edi\n  unsigned int v361; // edx\n  int v362; // eax\n  unsigned int v363; // eax\n  unsigned int v364; // eax\n  unsigned int v365; // eax\n  int v366; // eax\n  int v367; // er12\n  int v368; // er13\n  int v369; // ebp\n  unsigned int v370; // edx\n  unsigned int v371; // eax\n  unsigned int v372; // ecx\n  unsigned int v373; // eax\n  int v374; // ebx\n  signed int v375; // ecx\n  int v376; // esi\n  unsigned int v377; // er14\n  int v378; // er8\n  int v379; // edx\n  signed int *v380; // rax\n  unsigned int v381; // ebx\n  int v382; // er15\n  int v383; // er14\n  int v384; // er8\n  int v385; // esi\n  int v386; // er10\n  signed int v387; // er9\n  signed int v388; // er11\n  signed int v389; // edi\n  unsigned int v390; // edx\n  int v391; // eax\n  unsigned int v392; // eax\n  unsigned int v393; // eax\n  unsigned int v394; // eax\n  int v395; // eax\n  int v396; // er12\n  int v397; // er13\n  int v398; // ebp\n  unsigned int v399; // edx\n  unsigned int v400; // eax\n  unsigned int v401; // ecx\n  unsigned int v402; // eax\n  int v403; // ebx\n  signed int v404; // ecx\n  int v405; // esi\n  unsigned int v406; // er14\n  int v407; // er8\n  int v408; // edx\n  signed int *v409; // rax\n  unsigned int v410; // ebx\n  int v411; // er15\n  int v412; // er14\n  int v413; // esi\n  int v414; // er10\n  signed int v415; // er9\n  signed int v416; // er11\n  signed int v417; // edi\n  unsigned int v418; // edx\n  int v419; // eax\n  unsigned int v420; // eax\n  unsigned int v421; // eax\n  unsigned int v422; // eax\n  int v423; // eax\n  int v424; // er12\n  int v425; // er13\n  int v426; // ebp\n  unsigned int v427; // edx\n  unsigned int v428; // eax\n  unsigned int v429; // ecx\n  unsigned int v430; // eax\n  int v431; // ebx\n  signed int v432; // ecx\n  int v433; // esi\n  unsigned int v434; // er14\n  int v435; // er8\n  int v436; // edx\n  signed int *v437; // rax\n  unsigned int v438; // ebx\n  int v439; // er15\n  int v440; // er14\n  int v441; // er8\n  int v442; // esi\n  int v443; // er10\n  signed int v444; // er9\n  signed int v445; // er11\n  signed int v446; // edi\n  unsigned int v447; // edx\n  int v448; // eax\n  unsigned int v449; // eax\n  unsigned int v450; // eax\n  unsigned int v451; // eax\n  int v452; // eax\n  int v453; // er12\n  int v454; // er13\n  int v455; // ebp\n  unsigned int v456; // edx\n  unsigned int v457; // eax\n  unsigned int v458; // ecx\n  unsigned int v459; // eax\n  int v460; // ebx\n  signed int v461; // ecx\n  int v462; // esi\n  unsigned int v463; // er14\n  int v464; // er8\n  int v465; // edx\n  signed int *v466; // rax\n  unsigned int v467; // ebx\n  int v468; // er15\n  int v469; // er14\n  int v470; // esi\n  int v471; // er10\n  unsigned int v472; // edx\n  int v473; // eax\n  unsigned int v474; // eax\n  unsigned int v475; // eax\n  unsigned int v476; // eax\n  unsigned int v477; // eax\n  int v478; // esi\n  unsigned int v479; // edx\n  int v480; // eax\n  int v481; // ecx\n  int v482; // esi\n  int v483; // ecx\n  unsigned int v484; // edx\n  int v485; // eax\n  int v486; // esi\n  int v487; // eax\n  int v488; // edx\n  int v489; // esi\n  int v490; // edx\n  int v491; // ecx\n  unsigned int v492; // eax\n  int v493; // ecx\n  int v494; // eax\n  int v495; // [rsp+0h] [rbp-74h]\n  int v496; // [rsp+0h] [rbp-74h]\n  int v497; // [rsp+0h] [rbp-74h]\n  int v498; // [rsp+0h] [rbp-74h]\n  int v499; // [rsp+0h] [rbp-74h]\n  int v500; // [rsp+0h] [rbp-74h]\n  int v501; // [rsp+0h] [rbp-74h]\n  int v502; // [rsp+0h] [rbp-74h]\n  int v503; // [rsp+0h] [rbp-74h]\n  __int64 v504; // [rsp+4h] [rbp-70h]\n  __int64 v505; // [rsp+Ch] [rbp-68h]\n  unsigned __int32 v506; // [rsp+14h] [rbp-60h]\n  unsigned __int32 v507; // [rsp+18h] [rbp-5Ch]\n  unsigned __int32 v508; // [rsp+1Ch] [rbp-58h]\n  unsigned __int32 v509; // [rsp+20h] [rbp-54h]\n  int v510; // [rsp+24h] [rbp-50h]\n  int v511; // [rsp+24h] [rbp-50h]\n  int v512; // [rsp+24h] [rbp-50h]\n  int v513; // [rsp+24h] [rbp-50h]\n  int v514; // [rsp+24h] [rbp-50h]\n  int v515; // [rsp+24h] [rbp-50h]\n  int v516; // [rsp+24h] [rbp-50h]\n  int v517; // [rsp+24h] [rbp-50h]\n  int v518; // [rsp+24h] [rbp-50h]\n  int v519; // [rsp+28h] [rbp-4Ch]\n  int v520; // [rsp+28h] [rbp-4Ch]\n  int v521; // [rsp+28h] [rbp-4Ch]\n  int v522; // [rsp+28h] [rbp-4Ch]\n  int v523; // [rsp+28h] [rbp-4Ch]\n  int v524; // [rsp+28h] [rbp-4Ch]\n  int v525; // [rsp+28h] [rbp-4Ch]\n  int v526; // [rsp+28h] [rbp-4Ch]\n  int v527; // [rsp+2Ch] [rbp-48h]\n  int v528; // [rsp+2Ch] [rbp-48h]\n  int v529; // [rsp+2Ch] [rbp-48h]\n  int v530; // [rsp+2Ch] [rbp-48h]\n  int v531; // [rsp+2Ch] [rbp-48h]\n  int v532; // [rsp+2Ch] [rbp-48h]\n  int v533; // [rsp+2Ch] [rbp-48h]\n  int v534; // [rsp+2Ch] [rbp-48h]\n  int v535; // [rsp+2Ch] [rbp-48h]\n  int v536; // [rsp+2Ch] [rbp-48h]\n  int v537; // [rsp+2Ch] [rbp-48h]\n  int v538; // [rsp+2Ch] [rbp-48h]\n  int v539; // [rsp+2Ch] [rbp-48h]\n  int v540; // [rsp+2Ch] [rbp-48h]\n  int v541; // [rsp+2Ch] [rbp-48h]\n  int v542; // [rsp+2Ch] [rbp-48h]\n  unsigned int v543; // [rsp+30h] [rbp-44h]\n  unsigned int v544; // [rsp+30h] [rbp-44h]\n  unsigned int v545; // [rsp+30h] [rbp-44h]\n  unsigned int v546; // [rsp+30h] [rbp-44h]\n  unsigned int v547; // [rsp+30h] [rbp-44h]\n  unsigned int v548; // [rsp+30h] [rbp-44h]\n  unsigned int v549; // [rsp+30h] [rbp-44h]\n  unsigned int v550; // [rsp+30h] [rbp-44h]\n  unsigned int v551; // [rsp+30h] [rbp-44h]\n  unsigned int v552; // [rsp+30h] [rbp-44h]\n  unsigned int v553; // [rsp+30h] [rbp-44h]\n  unsigned int v554; // [rsp+30h] [rbp-44h]\n  unsigned int v555; // [rsp+30h] [rbp-44h]\n  unsigned int v556; // [rsp+30h] [rbp-44h]\n  unsigned int v557; // [rsp+30h] [rbp-44h]\n  unsigned int v558; // [rsp+30h] [rbp-44h]\n  unsigned int v559; // [rsp+34h] [rbp-40h]\n  unsigned int v560; // [rsp+34h] [rbp-40h]\n  unsigned int v561; // [rsp+34h] [rbp-40h]\n  unsigned int v562; // [rsp+34h] [rbp-40h]\n  unsigned int v563; // [rsp+34h] [rbp-40h]\n  unsigned int v564; // [rsp+34h] [rbp-40h]\n  unsigned int v565; // [rsp+34h] [rbp-40h]\n  unsigned int v566; // [rsp+34h] [rbp-40h]\n  unsigned int v567; // [rsp+34h] [rbp-40h]\n  unsigned int v568; // [rsp+34h] [rbp-40h]\n  unsigned int v569; // [rsp+34h] [rbp-40h]\n  unsigned int v570; // [rsp+34h] [rbp-40h]\n  unsigned int v571; // [rsp+34h] [rbp-40h]\n  unsigned int v572; // [rsp+34h] [rbp-40h]\n  unsigned int v573; // [rsp+34h] [rbp-40h]\n  unsigned int v574; // [rsp+34h] [rbp-40h]\n  unsigned int v575; // [rsp+38h] [rbp-3Ch]\n  unsigned int v576; // [rsp+38h] [rbp-3Ch]\n  unsigned int v577; // [rsp+38h] [rbp-3Ch]\n  unsigned int v578; // [rsp+38h] [rbp-3Ch]\n  unsigned int v579; // [rsp+38h] [rbp-3Ch]\n  unsigned int v580; // [rsp+38h] [rbp-3Ch]\n  unsigned int v581; // [rsp+38h] [rbp-3Ch]\n  unsigned int v582; // [rsp+38h] [rbp-3Ch]\n  unsigned int v583; // [rsp+38h] [rbp-3Ch]\n  unsigned int v584; // [rsp+38h] [rbp-3Ch]\n  unsigned int v585; // [rsp+38h] [rbp-3Ch]\n  unsigned int v586; // [rsp+38h] [rbp-3Ch]\n  unsigned int v587; // [rsp+38h] [rbp-3Ch]\n  unsigned int v588; // [rsp+38h] [rbp-3Ch]\n  unsigned int v589; // [rsp+38h] [rbp-3Ch]\n  unsigned int v590; // [rsp+38h] [rbp-3Ch]\n  signed __int64 v591; // [rsp+3Ch] [rbp-38h]\n\n  v504 = a1;\n  v505 = a2;\n  if ( a3 > 0 )\n  {\n    v507 = *(_DWORD *)(a1 - 4);\n    v506 = *(_DWORD *)(a1 - 8);\n    v591 = a2 + 8LL * ((unsigned int)(a3 - 1) >> 3) + 8;\n    do\n    {\n      v3 = 234941184;\n      v4 = -2097117952;\n      v5 = _byteswap_ulong(*(_DWORD *)v505);\n      v508 = v5;\n      v6 = _byteswap_ulong(*(_DWORD *)(v505 + 4));\n      v509 = v6;\n      v7 = (v6 ^ (v5 >> 4)) & 0xF0F0F0F;\n      v8 = v7;\n      v9 = v6 ^ v7;\n      v10 = v5 ^ 16 * v8;\n      v11 = (unsigned __int16)(v9 ^ HIWORD(v10));\n      v12 = v11 ^ v9;\n      v13 = (v11 << 16) ^ v10;\n      v14 = (v13 ^ (v12 >> 2)) & 0x33333333;\n      v15 = v14 ^ v13;\n      v16 = v12 ^ 4 * v14;\n      v17 = (v15 ^ ((v12 ^ 4 * v14) >> 8)) & 0xFF00FF;\n      v18 = v17;\n      v19 = v15 ^ v17;\n      v20 = v16 ^ (v18 << 8);\n      v21 = (v20 ^ (v19 >> 1)) & 0x55555555;\n      v22 = v21 ^ v20;\n      v510 = __ROR4__(v19 ^ 2 * v21, 1);\n      v519 = __ROR4__(v22, 1);\n      v23 = __ROR4__(v22, 1) ^ *(_DWORD *)(v504 - 76);\n      v24 = *(_DWORD *)(v504 - 12) ^ __ROL4__(v22, 3);\n      v25 = 2063609344;\n      v26 = 0;\n      v27 = 0;\n      v28 = 0;\n      v29 = v24;\n      v30 = (v24 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v31 = v29 & 0xFC00FC;\n      v32 = -167733504;\n      v543 = v30;\n      v31 |= 0xFF00FF00;\n      v33 = v31;\n      v34 = v23 & 0xFC00FC | 0xFF00FF00;\n      v35 = v30 - v31;\n      v527 = v31;\n      v559 = v23 & 0xFC00FC | 0xFF00FF00;\n      v575 = (v23 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v36 = v31;\n      v37 = (signed int *)&unk_4DDE0;\n      v38 = 0;\n      v39 = v575 - v33;\n      v40 = v34 - v33;\n      v495 = v35;\n      while ( 1 )\n      {\n        v37 += 4;\n        v41 = v25 & (v40 + v36);\n        v42 = v3 & (v39 + v36);\n        v43 = v36 + v495;\n        v38 ^= v36 & v4;\n        v36 += 524296;\n        v27 ^= v41;\n        v26 ^= v42;\n        v28 ^= v32 & v43;\n        if ( v37 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v4 = *v37;\n        v32 = v37[1];\n        v25 = v37[2];\n        v3 = v37[3];\n      }\n      v44 = 234941184;\n      v45 = -2097117952;\n      v46 = 2063609344;\n      v47 = ((16 * v28 & 15360 * ((v543 + 16777472) & 0x40004) ^ v28) >> 4) & 0xF000F00 | ((16 * v38 & 15360 * ((v527 + 16777472) & 0x40004) ^ v38) >> 12) & 0xF000F | (v26 ^ 16 * v26 & 15360 * ((v575 + 16777472) & 0x40004)) & 0xF000F000 | ((v27 ^ 16 * v27 & 15360 * ((v559 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v48 = (v47 ^ (v47 >> 4)) & 0x7030702;\n      v49 = (16 * v48 ^ v48 ^ v47 ^ ((16 * v48 ^ v48 ^ v47) >> 8)) & 0x4E009E ^ 16 * v48 ^ v48 ^ v47 ^ (((16 * v48 ^ v48 ^ v47 ^ ((16 * v48 ^ v48 ^ v47) >> 8)) & 0x4E009E) << 8);\n      v50 = ((unsigned __int16)((v49 ^ HIWORD(v49)) & 0xD9D3) << 16) ^ ((unsigned __int16)v49 ^ HIWORD(v49)) & 0xD9D3 ^ v49;\n      v51 = 16 * ((v50 ^ (v50 >> 4)) & 0x5040004) ^ (v50 ^ (v50 >> 4)) & 0x5040004 ^ v50;\n      v52 = 2 * ((v51 ^ (v51 >> 1)) & 0x4045015) ^ (v51 ^ (v51 >> 1)) & 0x4045015 ^ v510 ^ v51;\n      v53 = 0;\n      v511 = v52;\n      v54 = 0;\n      v55 = 0;\n      v56 = v52 ^ *(_DWORD *)(v504 - 80);\n      v57 = *(_DWORD *)(v504 - 16) ^ __ROL4__(v52, 4);\n      v58 = v57;\n      v59 = (v57 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v60 = v58 & 0xFC00FC;\n      v61 = -167733504;\n      v544 = v59;\n      v60 |= 0xFF00FF00;\n      v62 = v60;\n      v63 = v56 & 0xFC00FC | 0xFF00FF00;\n      v64 = v59 - v60;\n      v528 = v60;\n      v560 = v56 & 0xFC00FC | 0xFF00FF00;\n      v576 = (v56 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v65 = v60;\n      v66 = (signed int *)&unk_4DDE0;\n      v67 = 0;\n      v68 = v576 - v62;\n      v69 = v63 - v62;\n      v496 = v64;\n      while ( 1 )\n      {\n        v66 += 4;\n        v70 = v46 & (v69 + v65);\n        v71 = v44 & (v68 + v65);\n        v72 = v65 + v496;\n        v67 ^= v65 & v45;\n        v65 += 524296;\n        v54 ^= v70;\n        v53 ^= v71;\n        v55 ^= v61 & v72;\n        if ( v66 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v45 = *v66;\n        v61 = v66[1];\n        v46 = v66[2];\n        v44 = v66[3];\n      }\n      v73 = 234941184;\n      v74 = -2097117952;\n      v75 = 2063609344;\n      v76 = ((16 * v55 & 15360 * ((v544 + 16777472) & 0x40004) ^ v55) >> 4) & 0xF000F00 | ((16 * v67 & 15360 * ((v528 + 16777472) & 0x40004) ^ v67) >> 12) & 0xF000F | (v53 ^ 16 * v53 & 15360 * ((v576 + 16777472) & 0x40004)) & 0xF000F000 | ((v54 ^ 16 * v54 & 15360 * ((v560 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v77 = (v76 ^ (v76 >> 4)) & 0x7030702;\n      v78 = (16 * v77 ^ v77 ^ v76 ^ ((16 * v77 ^ v77 ^ v76) >> 8)) & 0x4E009E ^ 16 * v77 ^ v77 ^ v76 ^ (((16 * v77 ^ v77 ^ v76 ^ ((16 * v77 ^ v77 ^ v76) >> 8)) & 0x4E009E) << 8);\n      v79 = ((unsigned __int16)((v78 ^ HIWORD(v78)) & 0xD9D3) << 16) ^ ((unsigned __int16)v78 ^ HIWORD(v78)) & 0xD9D3 ^ v78;\n      v80 = 16 * ((v79 ^ (v79 >> 4)) & 0x5040004) ^ (v79 ^ (v79 >> 4)) & 0x5040004 ^ v79;\n      v81 = 2 * ((v80 ^ (v80 >> 1)) & 0x4045015) ^ (v80 ^ (v80 >> 1)) & 0x4045015 ^ v519 ^ v80;\n      v82 = 0;\n      v520 = v81;\n      v83 = 0;\n      v84 = 0;\n      v85 = v81 ^ *(_DWORD *)(v504 - 84);\n      v86 = *(_DWORD *)(v504 - 20) ^ __ROL4__(v81, 4);\n      v87 = v86;\n      v88 = (v86 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v89 = v87 & 0xFC00FC;\n      v90 = -167733504;\n      v545 = v88;\n      v89 |= 0xFF00FF00;\n      v91 = v89;\n      v92 = v85 & 0xFC00FC | 0xFF00FF00;\n      v93 = v88 - v89;\n      v529 = v89;\n      v561 = v85 & 0xFC00FC | 0xFF00FF00;\n      v577 = (v85 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v94 = v89;\n      v95 = (signed int *)&unk_4DDE0;\n      v96 = 0;\n      v97 = v577 - v91;\n      v98 = v92 - v91;\n      v497 = v93;\n      while ( 1 )\n      {\n        v95 += 4;\n        v99 = v75 & (v98 + v94);\n        v100 = v73 & (v97 + v94);\n        v101 = v94 + v497;\n        v96 ^= v94 & v74;\n        v94 += 524296;\n        v83 ^= v99;\n        v82 ^= v100;\n        v84 ^= v90 & v101;\n        if ( v95 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v74 = *v95;\n        v90 = v95[1];\n        v75 = v95[2];\n        v73 = v95[3];\n      }\n      v102 = 234941184;\n      v103 = -2097117952;\n      v104 = 2063609344;\n      v105 = ((16 * v84 & 15360 * ((v545 + 16777472) & 0x40004) ^ v84) >> 4) & 0xF000F00 | ((16 * v96 & 15360 * ((v529 + 16777472) & 0x40004) ^ v96) >> 12) & 0xF000F | (v82 ^ 16 * v82 & 15360 * ((v577 + 16777472) & 0x40004)) & 0xF000F000 | ((v83 ^ 16 * v83 & 15360 * ((v561 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v106 = (v105 ^ (v105 >> 4)) & 0x7030702;\n      v107 = (16 * v106 ^ v106 ^ v105 ^ ((16 * v106 ^ v106 ^ v105) >> 8)) & 0x4E009E ^ 16 * v106 ^ v106 ^ v105 ^ (((16 * v106 ^ v106 ^ v105 ^ ((16 * v106 ^ v106 ^ v105) >> 8)) & 0x4E009E) << 8);\n      v108 = ((unsigned __int16)((v107 ^ HIWORD(v107)) & 0xD9D3) << 16) ^ ((unsigned __int16)v107 ^ HIWORD(v107)) & 0xD9D3 ^ v107;\n      v109 = 16 * ((v108 ^ (v108 >> 4)) & 0x5040004) ^ (v108 ^ (v108 >> 4)) & 0x5040004 ^ v108;\n      v110 = 2 * ((v109 ^ (v109 >> 1)) & 0x4045015) ^ (v109 ^ (v109 >> 1)) & 0x4045015 ^ v511 ^ v109;\n      v111 = 0;\n      v512 = v110;\n      v112 = 0;\n      v113 = 0;\n      v114 = v110 ^ *(_DWORD *)(v504 - 88);\n      v115 = *(_DWORD *)(v504 - 24) ^ __ROL4__(v110, 4);\n      v116 = v115;\n      v117 = (v115 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v118 = v116 & 0xFC00FC;\n      v119 = -167733504;\n      v546 = v117;\n      v118 |= 0xFF00FF00;\n      v120 = v118;\n      v121 = v114 & 0xFC00FC | 0xFF00FF00;\n      v122 = v117 - v118;\n      v530 = v118;\n      v562 = v114 & 0xFC00FC | 0xFF00FF00;\n      v578 = (v114 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v123 = v118;\n      v124 = (signed int *)&unk_4DDE0;\n      v125 = 0;\n      v126 = v578 - v120;\n      v127 = v121 - v120;\n      while ( 1 )\n      {\n        v124 += 4;\n        v128 = v102 & (v126 + v123);\n        v125 ^= v123 & v103;\n        v129 = v123 + v122;\n        v112 ^= v104 & (v127 + v123);\n        v123 += 524296;\n        v111 ^= v128;\n        v113 ^= v119 & v129;\n        if ( v124 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v103 = *v124;\n        v119 = v124[1];\n        v104 = v124[2];\n        v102 = v124[3];\n      }\n      v130 = 234941184;\n      v131 = -2097117952;\n      v132 = 2063609344;\n      v133 = ((16 * v113 & 15360 * ((v546 + 16777472) & 0x40004) ^ v113) >> 4) & 0xF000F00 | ((16 * v125 & 15360 * ((v530 + 16777472) & 0x40004) ^ v125) >> 12) & 0xF000F | (v111 ^ 16 * v111 & 15360 * ((v578 + 16777472) & 0x40004)) & 0xF000F000 | ((v112 ^ 16 * v112 & 15360 * ((v562 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v134 = (v133 ^ (v133 >> 4)) & 0x7030702;\n      v135 = (16 * v134 ^ v134 ^ v133 ^ ((16 * v134 ^ v134 ^ v133) >> 8)) & 0x4E009E ^ 16 * v134 ^ v134 ^ v133 ^ (((16 * v134 ^ v134 ^ v133 ^ ((16 * v134 ^ v134 ^ v133) >> 8)) & 0x4E009E) << 8);\n      v136 = ((unsigned __int16)((v135 ^ HIWORD(v135)) & 0xD9D3) << 16) ^ ((unsigned __int16)v135 ^ HIWORD(v135)) & 0xD9D3 ^ v135;\n      v137 = 16 * ((v136 ^ (v136 >> 4)) & 0x5040004) ^ (v136 ^ (v136 >> 4)) & 0x5040004 ^ v136;\n      v138 = 2 * ((v137 ^ (v137 >> 1)) & 0x4045015) ^ (v137 ^ (v137 >> 1)) & 0x4045015 ^ v520 ^ v137;\n      v139 = 0;\n      v521 = v138;\n      v140 = 0;\n      v141 = 0;\n      v142 = v138 ^ *(_DWORD *)(v504 - 92);\n      v143 = *(_DWORD *)(v504 - 28) ^ __ROL4__(v138, 4);\n      v144 = v143;\n      v145 = (v143 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v146 = v144 & 0xFC00FC;\n      v147 = -167733504;\n      v547 = v145;\n      v146 |= 0xFF00FF00;\n      v148 = v146;\n      v149 = v142 & 0xFC00FC | 0xFF00FF00;\n      v150 = v145 - v146;\n      v531 = v146;\n      v563 = v142 & 0xFC00FC | 0xFF00FF00;\n      v579 = (v142 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v151 = v146;\n      v152 = (signed int *)&unk_4DDE0;\n      v153 = 0;\n      v154 = v579 - v148;\n      v155 = v149 - v148;\n      v498 = v150;\n      while ( 1 )\n      {\n        v152 += 4;\n        v156 = v132 & (v155 + v151);\n        v157 = v130 & (v154 + v151);\n        v158 = v151 + v498;\n        v153 ^= v151 & v131;\n        v151 += 524296;\n        v140 ^= v156;\n        v139 ^= v157;\n        v141 ^= v147 & v158;\n        if ( v152 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v131 = *v152;\n        v147 = v152[1];\n        v132 = v152[2];\n        v130 = v152[3];\n      }\n      v159 = 234941184;\n      v160 = -2097117952;\n      v161 = 2063609344;\n      v162 = ((16 * v141 & 15360 * ((v547 + 16777472) & 0x40004) ^ v141) >> 4) & 0xF000F00 | ((16 * v153 & 15360 * ((v531 + 16777472) & 0x40004) ^ v153) >> 12) & 0xF000F | (v139 ^ 16 * v139 & 15360 * ((v579 + 16777472) & 0x40004)) & 0xF000F000 | ((v140 ^ 16 * v140 & 15360 * ((v563 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v163 = (v162 ^ (v162 >> 4)) & 0x7030702;\n      v164 = (16 * v163 ^ v163 ^ v162 ^ ((16 * v163 ^ v163 ^ v162) >> 8)) & 0x4E009E ^ 16 * v163 ^ v163 ^ v162 ^ (((16 * v163 ^ v163 ^ v162 ^ ((16 * v163 ^ v163 ^ v162) >> 8)) & 0x4E009E) << 8);\n      v165 = ((unsigned __int16)((v164 ^ HIWORD(v164)) & 0xD9D3) << 16) ^ ((unsigned __int16)v164 ^ HIWORD(v164)) & 0xD9D3 ^ v164;\n      v166 = 16 * ((v165 ^ (v165 >> 4)) & 0x5040004) ^ (v165 ^ (v165 >> 4)) & 0x5040004 ^ v165;\n      v167 = 2 * ((v166 ^ (v166 >> 1)) & 0x4045015) ^ (v166 ^ (v166 >> 1)) & 0x4045015 ^ v512 ^ v166;\n      v168 = 0;\n      v513 = v167;\n      v169 = 0;\n      v170 = 0;\n      v171 = v167 ^ *(_DWORD *)(v504 - 96);\n      v172 = *(_DWORD *)(v504 - 32) ^ __ROL4__(v167, 4);\n      v173 = v172;\n      v174 = (v172 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v175 = v173 & 0xFC00FC;\n      v176 = -167733504;\n      v548 = v174;\n      v175 |= 0xFF00FF00;\n      v177 = v175;\n      v178 = v171 & 0xFC00FC | 0xFF00FF00;\n      v179 = v174 - v175;\n      v532 = v175;\n      v564 = v171 & 0xFC00FC | 0xFF00FF00;\n      v580 = (v171 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v180 = v175;\n      v181 = (signed int *)&unk_4DDE0;\n      v182 = 0;\n      v183 = v580 - v177;\n      v184 = v178 - v177;\n      while ( 1 )\n      {\n        v181 += 4;\n        v185 = v159 & (v183 + v180);\n        v182 ^= v180 & v160;\n        v186 = v180 + v179;\n        v169 ^= v161 & (v184 + v180);\n        v180 += 524296;\n        v168 ^= v185;\n        v170 ^= v176 & v186;\n        if ( v181 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v160 = *v181;\n        v176 = v181[1];\n        v161 = v181[2];\n        v159 = v181[3];\n      }\n      v187 = 234941184;\n      v188 = -2097117952;\n      v189 = 2063609344;\n      v190 = ((16 * v170 & 15360 * ((v548 + 16777472) & 0x40004) ^ v170) >> 4) & 0xF000F00 | ((16 * v182 & 15360 * ((v532 + 16777472) & 0x40004) ^ v182) >> 12) & 0xF000F | (v168 ^ 16 * v168 & 15360 * ((v580 + 16777472) & 0x40004)) & 0xF000F000 | ((v169 ^ 16 * v169 & 15360 * ((v564 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v191 = (v190 ^ (v190 >> 4)) & 0x7030702;\n      v192 = (16 * v191 ^ v191 ^ v190 ^ ((16 * v191 ^ v191 ^ v190) >> 8)) & 0x4E009E ^ 16 * v191 ^ v191 ^ v190 ^ (((16 * v191 ^ v191 ^ v190 ^ ((16 * v191 ^ v191 ^ v190) >> 8)) & 0x4E009E) << 8);\n      v193 = ((unsigned __int16)((v192 ^ HIWORD(v192)) & 0xD9D3) << 16) ^ ((unsigned __int16)v192 ^ HIWORD(v192)) & 0xD9D3 ^ v192;\n      v194 = 16 * ((v193 ^ (v193 >> 4)) & 0x5040004) ^ (v193 ^ (v193 >> 4)) & 0x5040004 ^ v193;\n      v195 = 2 * ((v194 ^ (v194 >> 1)) & 0x4045015) ^ (v194 ^ (v194 >> 1)) & 0x4045015 ^ v521 ^ v194;\n      v196 = 0;\n      v522 = v195;\n      v197 = 0;\n      v198 = 0;\n      v199 = v195 ^ *(_DWORD *)(v504 - 100);\n      v200 = *(_DWORD *)(v504 - 36) ^ __ROL4__(v195, 4);\n      v201 = v200;\n      v202 = (v200 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v203 = v201 & 0xFC00FC;\n      v204 = -167733504;\n      v549 = v202;\n      v203 |= 0xFF00FF00;\n      v205 = v203;\n      v206 = v199 & 0xFC00FC | 0xFF00FF00;\n      v207 = v202 - v203;\n      v533 = v203;\n      v565 = v199 & 0xFC00FC | 0xFF00FF00;\n      v581 = (v199 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v208 = v203;\n      v209 = (signed int *)&unk_4DDE0;\n      v210 = 0;\n      v211 = v581 - v205;\n      v212 = v206 - v205;\n      v499 = v207;\n      while ( 1 )\n      {\n        v209 += 4;\n        v213 = v189 & (v212 + v208);\n        v214 = v187 & (v211 + v208);\n        v215 = v208 + v499;\n        v210 ^= v208 & v188;\n        v208 += 524296;\n        v197 ^= v213;\n        v196 ^= v214;\n        v198 ^= v204 & v215;\n        if ( v209 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v188 = *v209;\n        v204 = v209[1];\n        v189 = v209[2];\n        v187 = v209[3];\n      }\n      v216 = 234941184;\n      v217 = -2097117952;\n      v218 = 2063609344;\n      v219 = ((16 * v198 & 15360 * ((v549 + 16777472) & 0x40004) ^ v198) >> 4) & 0xF000F00 | ((16 * v210 & 15360 * ((v533 + 16777472) & 0x40004) ^ v210) >> 12) & 0xF000F | (v196 ^ 16 * v196 & 15360 * ((v581 + 16777472) & 0x40004)) & 0xF000F000 | ((v197 ^ 16 * v197 & 15360 * ((v565 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v220 = (v219 ^ (v219 >> 4)) & 0x7030702;\n      v221 = (16 * v220 ^ v220 ^ v219 ^ ((16 * v220 ^ v220 ^ v219) >> 8)) & 0x4E009E ^ 16 * v220 ^ v220 ^ v219 ^ (((16 * v220 ^ v220 ^ v219 ^ ((16 * v220 ^ v220 ^ v219) >> 8)) & 0x4E009E) << 8);\n      v222 = ((unsigned __int16)((v221 ^ HIWORD(v221)) & 0xD9D3) << 16) ^ ((unsigned __int16)v221 ^ HIWORD(v221)) & 0xD9D3 ^ v221;\n      v223 = 16 * ((v222 ^ (v222 >> 4)) & 0x5040004) ^ (v222 ^ (v222 >> 4)) & 0x5040004 ^ v222;\n      v224 = 2 * ((v223 ^ (v223 >> 1)) & 0x4045015) ^ (v223 ^ (v223 >> 1)) & 0x4045015 ^ v513 ^ v223;\n      v225 = 0;\n      v514 = v224;\n      v226 = 0;\n      v227 = 0;\n      v228 = v224 ^ *(_DWORD *)(v504 - 104);\n      v229 = *(_DWORD *)(v504 - 40) ^ __ROL4__(v224, 4);\n      v230 = v229;\n      v231 = (v229 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v232 = v230 & 0xFC00FC;\n      v233 = -167733504;\n      v550 = v231;\n      v232 |= 0xFF00FF00;\n      v234 = v232;\n      v235 = v228 & 0xFC00FC | 0xFF00FF00;\n      v236 = v231 - v232;\n      v534 = v232;\n      v566 = v228 & 0xFC00FC | 0xFF00FF00;\n      v582 = (v228 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v237 = v232;\n      v238 = (signed int *)&unk_4DDE0;\n      v239 = 0;\n      v240 = v582 - v234;\n      v241 = v235 - v234;\n      while ( 1 )\n      {\n        v238 += 4;\n        v242 = v216 & (v240 + v237);\n        v239 ^= v237 & v217;\n        v243 = v237 + v236;\n        v226 ^= v218 & (v241 + v237);\n        v237 += 524296;\n        v225 ^= v242;\n        v227 ^= v233 & v243;\n        if ( v238 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v217 = *v238;\n        v233 = v238[1];\n        v218 = v238[2];\n        v216 = v238[3];\n      }\n      v244 = 234941184;\n      v245 = -2097117952;\n      v246 = 2063609344;\n      v247 = ((16 * v227 & 15360 * ((v550 + 16777472) & 0x40004) ^ v227) >> 4) & 0xF000F00 | ((16 * v239 & 15360 * ((v534 + 16777472) & 0x40004) ^ v239) >> 12) & 0xF000F | (v225 ^ 16 * v225 & 15360 * ((v582 + 16777472) & 0x40004)) & 0xF000F000 | ((v226 ^ 16 * v226 & 15360 * ((v566 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v248 = (v247 ^ (v247 >> 4)) & 0x7030702;\n      v249 = (16 * v248 ^ v248 ^ v247 ^ ((16 * v248 ^ v248 ^ v247) >> 8)) & 0x4E009E ^ 16 * v248 ^ v248 ^ v247 ^ (((16 * v248 ^ v248 ^ v247 ^ ((16 * v248 ^ v248 ^ v247) >> 8)) & 0x4E009E) << 8);\n      v250 = ((unsigned __int16)((v249 ^ HIWORD(v249)) & 0xD9D3) << 16) ^ ((unsigned __int16)v249 ^ HIWORD(v249)) & 0xD9D3 ^ v249;\n      v251 = 16 * ((v250 ^ (v250 >> 4)) & 0x5040004) ^ (v250 ^ (v250 >> 4)) & 0x5040004 ^ v250;\n      v252 = 2 * ((v251 ^ (v251 >> 1)) & 0x4045015) ^ (v251 ^ (v251 >> 1)) & 0x4045015 ^ v522 ^ v251;\n      v253 = 0;\n      v523 = v252;\n      v254 = 0;\n      v255 = 0;\n      v256 = v252 ^ *(_DWORD *)(v504 - 108);\n      v257 = *(_DWORD *)(v504 - 44) ^ __ROL4__(v252, 4);\n      v258 = v257;\n      v259 = (v257 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v260 = v258 & 0xFC00FC;\n      v261 = -167733504;\n      v551 = v259;\n      v260 |= 0xFF00FF00;\n      v262 = v260;\n      v263 = v256 & 0xFC00FC | 0xFF00FF00;\n      v264 = v259 - v260;\n      v535 = v260;\n      v567 = v256 & 0xFC00FC | 0xFF00FF00;\n      v583 = (v256 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v265 = v260;\n      v266 = (signed int *)&unk_4DDE0;\n      v267 = 0;\n      v268 = v583 - v262;\n      v269 = v263 - v262;\n      v500 = v264;\n      while ( 1 )\n      {\n        v266 += 4;\n        v270 = v246 & (v269 + v265);\n        v271 = v244 & (v268 + v265);\n        v272 = v265 + v500;\n        v267 ^= v265 & v245;\n        v265 += 524296;\n        v254 ^= v270;\n        v253 ^= v271;\n        v255 ^= v261 & v272;\n        if ( v266 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v245 = *v266;\n        v261 = v266[1];\n        v246 = v266[2];\n        v244 = v266[3];\n      }\n      v273 = 234941184;\n      v274 = -2097117952;\n      v275 = 2063609344;\n      v276 = ((16 * v255 & 15360 * ((v551 + 16777472) & 0x40004) ^ v255) >> 4) & 0xF000F00 | ((16 * v267 & 15360 * ((v535 + 16777472) & 0x40004) ^ v267) >> 12) & 0xF000F | (v253 ^ 16 * v253 & 15360 * ((v583 + 16777472) & 0x40004)) & 0xF000F000 | ((v254 ^ 16 * v254 & 15360 * ((v567 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v277 = (v276 ^ (v276 >> 4)) & 0x7030702;\n      v278 = (16 * v277 ^ v277 ^ v276 ^ ((16 * v277 ^ v277 ^ v276) >> 8)) & 0x4E009E ^ 16 * v277 ^ v277 ^ v276 ^ (((16 * v277 ^ v277 ^ v276 ^ ((16 * v277 ^ v277 ^ v276) >> 8)) & 0x4E009E) << 8);\n      v279 = ((unsigned __int16)((v278 ^ HIWORD(v278)) & 0xD9D3) << 16) ^ ((unsigned __int16)v278 ^ HIWORD(v278)) & 0xD9D3 ^ v278;\n      v280 = 16 * ((v279 ^ (v279 >> 4)) & 0x5040004) ^ (v279 ^ (v279 >> 4)) & 0x5040004 ^ v279;\n      v281 = 2 * ((v280 ^ (v280 >> 1)) & 0x4045015) ^ (v280 ^ (v280 >> 1)) & 0x4045015 ^ v514 ^ v280;\n      v282 = 0;\n      v515 = v281;\n      v283 = 0;\n      v284 = 0;\n      v285 = v281 ^ *(_DWORD *)(v504 - 112);\n      v286 = *(_DWORD *)(v504 - 48) ^ __ROL4__(v281, 4);\n      v287 = v286;\n      v288 = (v286 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v289 = v287 & 0xFC00FC;\n      v290 = -167733504;\n      v552 = v288;\n      v289 |= 0xFF00FF00;\n      v291 = v289;\n      v292 = v285 & 0xFC00FC | 0xFF00FF00;\n      v293 = v288 - v289;\n      v536 = v289;\n      v568 = v285 & 0xFC00FC | 0xFF00FF00;\n      v584 = (v285 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v294 = v289;\n      v295 = (signed int *)&unk_4DDE0;\n      v296 = 0;\n      v297 = v584 - v291;\n      v298 = v292 - v291;\n      while ( 1 )\n      {\n        v295 += 4;\n        v299 = v273 & (v297 + v294);\n        v296 ^= v294 & v274;\n        v300 = v294 + v293;\n        v283 ^= v275 & (v298 + v294);\n        v294 += 524296;\n        v282 ^= v299;\n        v284 ^= v290 & v300;\n        if ( v295 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v274 = *v295;\n        v290 = v295[1];\n        v275 = v295[2];\n        v273 = v295[3];\n      }\n      v301 = 234941184;\n      v302 = -2097117952;\n      v303 = 2063609344;\n      v304 = ((16 * v284 & 15360 * ((v552 + 16777472) & 0x40004) ^ v284) >> 4) & 0xF000F00 | ((16 * v296 & 15360 * ((v536 + 16777472) & 0x40004) ^ v296) >> 12) & 0xF000F | (v282 ^ 16 * v282 & 15360 * ((v584 + 16777472) & 0x40004)) & 0xF000F000 | ((v283 ^ 16 * v283 & 15360 * ((v568 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v305 = (v304 ^ (v304 >> 4)) & 0x7030702;\n      v306 = (16 * v305 ^ v305 ^ v304 ^ ((16 * v305 ^ v305 ^ v304) >> 8)) & 0x4E009E ^ 16 * v305 ^ v305 ^ v304 ^ (((16 * v305 ^ v305 ^ v304 ^ ((16 * v305 ^ v305 ^ v304) >> 8)) & 0x4E009E) << 8);\n      v307 = ((unsigned __int16)((v306 ^ HIWORD(v306)) & 0xD9D3) << 16) ^ ((unsigned __int16)v306 ^ HIWORD(v306)) & 0xD9D3 ^ v306;\n      v308 = 16 * ((v307 ^ (v307 >> 4)) & 0x5040004) ^ (v307 ^ (v307 >> 4)) & 0x5040004 ^ v307;\n      v309 = 2 * ((v308 ^ (v308 >> 1)) & 0x4045015) ^ (v308 ^ (v308 >> 1)) & 0x4045015 ^ v523 ^ v308;\n      v310 = 0;\n      v524 = v309;\n      v311 = 0;\n      v312 = 0;\n      v313 = v309 ^ *(_DWORD *)(v504 - 116);\n      v314 = *(_DWORD *)(v504 - 52) ^ __ROL4__(v309, 4);\n      v315 = v314;\n      v316 = (v314 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v317 = v315 & 0xFC00FC;\n      v318 = -167733504;\n      v553 = v316;\n      v317 |= 0xFF00FF00;\n      v319 = v317;\n      v320 = v313 & 0xFC00FC | 0xFF00FF00;\n      v321 = v316 - v317;\n      v537 = v317;\n      v569 = v313 & 0xFC00FC | 0xFF00FF00;\n      v585 = (v313 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v322 = v317;\n      v323 = (signed int *)&unk_4DDE0;\n      v324 = 0;\n      v325 = v585 - v319;\n      v326 = v320 - v319;\n      v501 = v321;\n      while ( 1 )\n      {\n        v323 += 4;\n        v327 = v303 & (v326 + v322);\n        v328 = v301 & (v325 + v322);\n        v329 = v322 + v501;\n        v324 ^= v322 & v302;\n        v322 += 524296;\n        v311 ^= v327;\n        v310 ^= v328;\n        v312 ^= v318 & v329;\n        if ( v323 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v302 = *v323;\n        v318 = v323[1];\n        v303 = v323[2];\n        v301 = v323[3];\n      }\n      v330 = 234941184;\n      v331 = -2097117952;\n      v332 = 2063609344;\n      v333 = ((16 * v312 & 15360 * ((v553 + 16777472) & 0x40004) ^ v312) >> 4) & 0xF000F00 | ((16 * v324 & 15360 * ((v537 + 16777472) & 0x40004) ^ v324) >> 12) & 0xF000F | (v310 ^ 16 * v310 & 15360 * ((v585 + 16777472) & 0x40004)) & 0xF000F000 | ((v311 ^ 16 * v311 & 15360 * ((v569 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v334 = (v333 ^ (v333 >> 4)) & 0x7030702;\n      v335 = (16 * v334 ^ v334 ^ v333 ^ ((16 * v334 ^ v334 ^ v333) >> 8)) & 0x4E009E ^ 16 * v334 ^ v334 ^ v333 ^ (((16 * v334 ^ v334 ^ v333 ^ ((16 * v334 ^ v334 ^ v333) >> 8)) & 0x4E009E) << 8);\n      v336 = ((unsigned __int16)((v335 ^ HIWORD(v335)) & 0xD9D3) << 16) ^ ((unsigned __int16)v335 ^ HIWORD(v335)) & 0xD9D3 ^ v335;\n      v337 = 16 * ((v336 ^ (v336 >> 4)) & 0x5040004) ^ (v336 ^ (v336 >> 4)) & 0x5040004 ^ v336;\n      v338 = 2 * ((v337 ^ (v337 >> 1)) & 0x4045015) ^ (v337 ^ (v337 >> 1)) & 0x4045015 ^ v515 ^ v337;\n      v339 = 0;\n      v516 = v338;\n      v340 = 0;\n      v341 = 0;\n      v342 = v338 ^ *(_DWORD *)(v504 - 120);\n      v343 = *(_DWORD *)(v504 - 56) ^ __ROL4__(v338, 4);\n      v344 = v343;\n      v345 = (v343 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v346 = v344 & 0xFC00FC;\n      v347 = -167733504;\n      v554 = v345;\n      v346 |= 0xFF00FF00;\n      v348 = v346;\n      v349 = v342 & 0xFC00FC | 0xFF00FF00;\n      v350 = v345 - v346;\n      v538 = v346;\n      v570 = v342 & 0xFC00FC | 0xFF00FF00;\n      v586 = (v342 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v351 = v346;\n      v352 = (signed int *)&unk_4DDE0;\n      v353 = 0;\n      v354 = v586 - v348;\n      v355 = v349 - v348;\n      while ( 1 )\n      {\n        v352 += 4;\n        v356 = v330 & (v354 + v351);\n        v353 ^= v351 & v331;\n        v357 = v351 + v350;\n        v340 ^= v332 & (v355 + v351);\n        v351 += 524296;\n        v339 ^= v356;\n        v341 ^= v347 & v357;\n        if ( v352 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v331 = *v352;\n        v347 = v352[1];\n        v332 = v352[2];\n        v330 = v352[3];\n      }\n      v358 = 234941184;\n      v359 = -2097117952;\n      v360 = 2063609344;\n      v361 = ((16 * v341 & 15360 * ((v554 + 16777472) & 0x40004) ^ v341) >> 4) & 0xF000F00 | ((16 * v353 & 15360 * ((v538 + 16777472) & 0x40004) ^ v353) >> 12) & 0xF000F | (v339 ^ 16 * v339 & 15360 * ((v586 + 16777472) & 0x40004)) & 0xF000F000 | ((v340 ^ 16 * v340 & 15360 * ((v570 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v362 = (v361 ^ (v361 >> 4)) & 0x7030702;\n      v363 = (16 * v362 ^ v362 ^ v361 ^ ((16 * v362 ^ v362 ^ v361) >> 8)) & 0x4E009E ^ 16 * v362 ^ v362 ^ v361 ^ (((16 * v362 ^ v362 ^ v361 ^ ((16 * v362 ^ v362 ^ v361) >> 8)) & 0x4E009E) << 8);\n      v364 = ((unsigned __int16)((v363 ^ HIWORD(v363)) & 0xD9D3) << 16) ^ ((unsigned __int16)v363 ^ HIWORD(v363)) & 0xD9D3 ^ v363;\n      v365 = 16 * ((v364 ^ (v364 >> 4)) & 0x5040004) ^ (v364 ^ (v364 >> 4)) & 0x5040004 ^ v364;\n      v366 = 2 * ((v365 ^ (v365 >> 1)) & 0x4045015) ^ (v365 ^ (v365 >> 1)) & 0x4045015 ^ v524 ^ v365;\n      v367 = 0;\n      v525 = v366;\n      v368 = 0;\n      v369 = 0;\n      v370 = v366 ^ *(_DWORD *)(v504 - 124);\n      v371 = *(_DWORD *)(v504 - 60) ^ __ROL4__(v366, 4);\n      v372 = v371;\n      v373 = (v371 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v374 = v372 & 0xFC00FC;\n      v375 = -167733504;\n      v555 = v373;\n      v374 |= 0xFF00FF00;\n      v376 = v374;\n      v377 = v370 & 0xFC00FC | 0xFF00FF00;\n      v378 = v373 - v374;\n      v539 = v374;\n      v571 = v370 & 0xFC00FC | 0xFF00FF00;\n      v587 = (v370 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v379 = v374;\n      v380 = (signed int *)&unk_4DDE0;\n      v381 = 0;\n      v382 = v587 - v376;\n      v383 = v377 - v376;\n      v502 = v378;\n      while ( 1 )\n      {\n        v380 += 4;\n        v384 = v360 & (v383 + v379);\n        v385 = v358 & (v382 + v379);\n        v386 = v379 + v502;\n        v381 ^= v379 & v359;\n        v379 += 524296;\n        v368 ^= v384;\n        v367 ^= v385;\n        v369 ^= v375 & v386;\n        if ( v380 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v359 = *v380;\n        v375 = v380[1];\n        v360 = v380[2];\n        v358 = v380[3];\n      }\n      v387 = 234941184;\n      v388 = -2097117952;\n      v389 = 2063609344;\n      v390 = ((16 * v369 & 15360 * ((v555 + 16777472) & 0x40004) ^ v369) >> 4) & 0xF000F00 | ((16 * v381 & 15360 * ((v539 + 16777472) & 0x40004) ^ v381) >> 12) & 0xF000F | (v367 ^ 16 * v367 & 15360 * ((v587 + 16777472) & 0x40004)) & 0xF000F000 | ((v368 ^ 16 * v368 & 15360 * ((v571 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v391 = (v390 ^ (v390 >> 4)) & 0x7030702;\n      v392 = (16 * v391 ^ v391 ^ v390 ^ ((16 * v391 ^ v391 ^ v390) >> 8)) & 0x4E009E ^ 16 * v391 ^ v391 ^ v390 ^ (((16 * v391 ^ v391 ^ v390 ^ ((16 * v391 ^ v391 ^ v390) >> 8)) & 0x4E009E) << 8);\n      v393 = ((unsigned __int16)((v392 ^ HIWORD(v392)) & 0xD9D3) << 16) ^ ((unsigned __int16)v392 ^ HIWORD(v392)) & 0xD9D3 ^ v392;\n      v394 = 16 * ((v393 ^ (v393 >> 4)) & 0x5040004) ^ (v393 ^ (v393 >> 4)) & 0x5040004 ^ v393;\n      v395 = 2 * ((v394 ^ (v394 >> 1)) & 0x4045015) ^ (v394 ^ (v394 >> 1)) & 0x4045015 ^ v516 ^ v394;\n      v396 = 0;\n      v517 = v395;\n      v397 = 0;\n      v398 = 0;\n      v399 = v395 ^ *(_DWORD *)(v504 - 128);\n      v400 = *(_DWORD *)(v504 - 64) ^ __ROL4__(v395, 4);\n      v401 = v400;\n      v402 = (v400 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v403 = v401 & 0xFC00FC;\n      v404 = -167733504;\n      v556 = v402;\n      v403 |= 0xFF00FF00;\n      v405 = v403;\n      v406 = v399 & 0xFC00FC | 0xFF00FF00;\n      v407 = v402 - v403;\n      v540 = v403;\n      v572 = v399 & 0xFC00FC | 0xFF00FF00;\n      v588 = (v399 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v408 = v403;\n      v409 = (signed int *)&unk_4DDE0;\n      v410 = 0;\n      v411 = v588 - v405;\n      v412 = v406 - v405;\n      while ( 1 )\n      {\n        v409 += 4;\n        v413 = v387 & (v411 + v408);\n        v410 ^= v408 & v388;\n        v414 = v408 + v407;\n        v397 ^= v389 & (v412 + v408);\n        v408 += 524296;\n        v396 ^= v413;\n        v398 ^= v404 & v414;\n        if ( v409 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v388 = *v409;\n        v404 = v409[1];\n        v389 = v409[2];\n        v387 = v409[3];\n      }\n      v415 = 234941184;\n      v416 = -2097117952;\n      v417 = 2063609344;\n      v418 = ((16 * v398 & 15360 * ((v556 + 16777472) & 0x40004) ^ v398) >> 4) & 0xF000F00 | ((16 * v410 & 15360 * ((v540 + 16777472) & 0x40004) ^ v410) >> 12) & 0xF000F | (v396 ^ 16 * v396 & 15360 * ((v588 + 16777472) & 0x40004)) & 0xF000F000 | ((v397 ^ 16 * v397 & 15360 * ((v572 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v419 = (v418 ^ (v418 >> 4)) & 0x7030702;\n      v420 = (16 * v419 ^ v419 ^ v418 ^ ((16 * v419 ^ v419 ^ v418) >> 8)) & 0x4E009E ^ 16 * v419 ^ v419 ^ v418 ^ (((16 * v419 ^ v419 ^ v418 ^ ((16 * v419 ^ v419 ^ v418) >> 8)) & 0x4E009E) << 8);\n      v421 = ((unsigned __int16)((v420 ^ HIWORD(v420)) & 0xD9D3) << 16) ^ ((unsigned __int16)v420 ^ HIWORD(v420)) & 0xD9D3 ^ v420;\n      v422 = 16 * ((v421 ^ (v421 >> 4)) & 0x5040004) ^ (v421 ^ (v421 >> 4)) & 0x5040004 ^ v421;\n      v423 = 2 * ((v422 ^ (v422 >> 1)) & 0x4045015) ^ (v422 ^ (v422 >> 1)) & 0x4045015 ^ v525 ^ v422;\n      v424 = 0;\n      v526 = v423;\n      v425 = 0;\n      v426 = 0;\n      v427 = v423 ^ *(_DWORD *)(v504 - 132);\n      v428 = *(_DWORD *)(v504 - 68) ^ __ROL4__(v423, 4);\n      v429 = v428;\n      v430 = (v428 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v431 = v429 & 0xFC00FC;\n      v432 = -167733504;\n      v557 = v430;\n      v431 |= 0xFF00FF00;\n      v433 = v431;\n      v434 = v427 & 0xFC00FC | 0xFF00FF00;\n      v435 = v430 - v431;\n      v541 = v431;\n      v573 = v427 & 0xFC00FC | 0xFF00FF00;\n      v589 = (v427 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v436 = v431;\n      v437 = (signed int *)&unk_4DDE0;\n      v438 = 0;\n      v439 = v589 - v433;\n      v440 = v434 - v433;\n      v503 = v435;\n      while ( 1 )\n      {\n        v437 += 4;\n        v441 = v417 & (v440 + v436);\n        v442 = v415 & (v439 + v436);\n        v443 = v436 + v503;\n        v438 ^= v436 & v416;\n        v436 += 524296;\n        v425 ^= v441;\n        v424 ^= v442;\n        v426 ^= v432 & v443;\n        if ( v437 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v416 = *v437;\n        v432 = v437[1];\n        v417 = v437[2];\n        v415 = v437[3];\n      }\n      v444 = 234941184;\n      v445 = -2097117952;\n      v446 = 2063609344;\n      v447 = ((16 * v426 & 15360 * ((v557 + 16777472) & 0x40004) ^ v426) >> 4) & 0xF000F00 | ((16 * v438 & 15360 * ((v541 + 16777472) & 0x40004) ^ v438) >> 12) & 0xF000F | (v424 ^ 16 * v424 & 15360 * ((v589 + 16777472) & 0x40004)) & 0xF000F000 | ((v425 ^ 16 * v425 & 15360 * ((v573 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v448 = (v447 ^ (v447 >> 4)) & 0x7030702;\n      v449 = (16 * v448 ^ v448 ^ v447 ^ ((16 * v448 ^ v448 ^ v447) >> 8)) & 0x4E009E ^ 16 * v448 ^ v448 ^ v447 ^ (((16 * v448 ^ v448 ^ v447 ^ ((16 * v448 ^ v448 ^ v447) >> 8)) & 0x4E009E) << 8);\n      v450 = ((unsigned __int16)((v449 ^ HIWORD(v449)) & 0xD9D3) << 16) ^ ((unsigned __int16)v449 ^ HIWORD(v449)) & 0xD9D3 ^ v449;\n      v451 = 16 * ((v450 ^ (v450 >> 4)) & 0x5040004) ^ (v450 ^ (v450 >> 4)) & 0x5040004 ^ v450;\n      v452 = 2 * ((v451 ^ (v451 >> 1)) & 0x4045015) ^ (v451 ^ (v451 >> 1)) & 0x4045015 ^ v517 ^ v451;\n      v453 = 0;\n      v518 = v452;\n      v454 = 0;\n      v455 = 0;\n      v456 = v452 ^ *(_DWORD *)(v504 - 136);\n      v457 = *(_DWORD *)(v504 - 72) ^ __ROL4__(v452, 4);\n      v458 = v457;\n      v459 = (v457 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v460 = v458 & 0xFC00FC;\n      v461 = -167733504;\n      v558 = v459;\n      v460 |= 0xFF00FF00;\n      v462 = v460;\n      v463 = v456 & 0xFC00FC | 0xFF00FF00;\n      v464 = v459 - v460;\n      v542 = v460;\n      v574 = v456 & 0xFC00FC | 0xFF00FF00;\n      v590 = (v456 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v465 = v460;\n      v466 = (signed int *)&unk_4DDE0;\n      v467 = 0;\n      v468 = v590 - v462;\n      v469 = v463 - v462;\n      while ( 1 )\n      {\n        v466 += 4;\n        v470 = v444 & (v468 + v465);\n        v467 ^= v465 & v445;\n        v471 = v465 + v464;\n        v454 ^= v446 & (v469 + v465);\n        v465 += 524296;\n        v453 ^= v470;\n        v455 ^= v461 & v471;\n        if ( v466 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v445 = *v466;\n        v461 = v466[1];\n        v446 = v466[2];\n        v444 = v466[3];\n      }\n      v472 = ((16 * v455 & 15360 * ((v558 + 16777472) & 0x40004) ^ v455) >> 4) & 0xF000F00 | ((16 * v467 & 15360 * ((v542 + 16777472) & 0x40004) ^ v467) >> 12) & 0xF000F | (v453 ^ 16 * v453 & 15360 * ((v590 + 16777472) & 0x40004)) & 0xF000F000 | ((v454 ^ 16 * v454 & 15360 * ((v574 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v473 = (v472 ^ (v472 >> 4)) & 0x7030702;\n      v474 = (16 * v473 ^ v473 ^ v472 ^ ((16 * v473 ^ v473 ^ v472) >> 8)) & 0x4E009E ^ 16 * v473 ^ v473 ^ v472 ^ (((16 * v473 ^ v473 ^ v472 ^ ((16 * v473 ^ v473 ^ v472) >> 8)) & 0x4E009E) << 8);\n      v475 = ((unsigned __int16)((v474 ^ HIWORD(v474)) & 0xD9D3) << 16) ^ ((unsigned __int16)v474 ^ HIWORD(v474)) & 0xD9D3 ^ v474;\n      v476 = 16 * ((v475 ^ (v475 >> 4)) & 0x5040004) ^ (v475 ^ (v475 >> 4)) & 0x5040004 ^ v475;\n      v477 = __ROL4__(2 * ((v476 ^ (v476 >> 1)) & 0x4045015) ^ (v476 ^ (v476 >> 1)) & 0x4045015 ^ v526 ^ v476, 1);\n      v478 = (__ROL4__(v518, 1) ^ (v477 >> 1)) & 0x55555555;\n      v479 = v478 ^ __ROL4__(v518, 1);\n      v480 = 2 * v478 ^ v477;\n      v481 = (v480 ^ (v479 >> 8)) & 0xFF00FF;\n      v482 = v481;\n      v483 = v480 ^ v481;\n      v484 = (v482 << 8) ^ v479;\n      v485 = (v483 ^ (v484 >> 2)) & 0x33333333;\n      v486 = 4 * v485;\n      v487 = v483 ^ v485;\n      v488 = v486 ^ v484;\n      v489 = (unsigned __int16)(v488 ^ HIWORD(v487));\n      v490 = v489 ^ v488;\n      v491 = v487 ^ (v489 << 16);\n      v492 = (v490 ^ ((v487 ^ (unsigned int)(v489 << 16)) >> 4)) & 0xF0F0F0F;\n      v493 = 16 * v492 ^ v506 ^ v491;\n      v494 = v507 ^ v490 ^ v492;\n      *(_BYTE *)(v505 + 3) = v493;\n      *(_BYTE *)(v505 + 2) = BYTE1(v493);\n      *(_BYTE *)(v505 + 7) = v494;\n      *(_BYTE *)(v505 + 6) = BYTE1(v494);\n      *(_BYTE *)(v505 + 1) = BYTE2(v493);\n      *(_BYTE *)v505 = HIBYTE(v493);\n      *(_BYTE *)(v505 + 4) = HIBYTE(v494);\n      *(_BYTE *)(v505 + 5) = BYTE2(v494);\n      *(_DWORD *)(v504 - 8) = v508;\n      v506 = v508;\n      *(_DWORD *)(v504 - 4) = v509;\n      v507 = v509;\n      v505 += 8LL;\n    }\n    while ( v505 != v591 );\n  }\n}\n", 
            "funcStartAddr": "0x22f40L", 
            "funcEndAddr": "0x250e8L", 
            "funcName": "sub_22F40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_250F0(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // eax\n  int v4; // ecx\n  signed int v5; // er9\n  signed int v6; // er11\n  unsigned __int32 v7; // eax\n  unsigned __int32 v8; // ecx\n  int v9; // esi\n  int v10; // ecx\n  int v11; // edi\n  int v12; // eax\n  unsigned int v13; // ecx\n  int v14; // edx\n  int v15; // esi\n  int v16; // edx\n  unsigned int v17; // eax\n  unsigned int v18; // edi\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // ecx\n  int v22; // eax\n  int v23; // edx\n  int v24; // eax\n  unsigned int v25; // edx\n  unsigned int v26; // eax\n  int v27; // er12\n  signed int v28; // edi\n  int v29; // ebp\n  int v30; // er13\n  unsigned int v31; // ecx\n  unsigned int v32; // eax\n  int v33; // ebx\n  signed int v34; // ecx\n  int v35; // esi\n  unsigned int v36; // er14\n  int v37; // er8\n  int v38; // edx\n  signed int *v39; // rax\n  int v40; // ebx\n  int v41; // er15\n  int v42; // er14\n  int v43; // er8\n  int v44; // esi\n  int v45; // er10\n  signed int v46; // er9\n  signed int v47; // er11\n  signed int v48; // edi\n  unsigned int v49; // eax\n  unsigned int v50; // eax\n  int v51; // eax\n  unsigned int v52; // eax\n  unsigned int v53; // eax\n  int v54; // eax\n  int v55; // er12\n  int v56; // ebp\n  int v57; // er13\n  unsigned int v58; // edx\n  unsigned int v59; // eax\n  unsigned int v60; // ecx\n  unsigned int v61; // eax\n  int v62; // ebx\n  signed int v63; // ecx\n  int v64; // esi\n  unsigned int v65; // er14\n  int v66; // er8\n  int v67; // edx\n  signed int *v68; // rax\n  int v69; // ebx\n  int v70; // er15\n  int v71; // er14\n  int v72; // er8\n  int v73; // esi\n  int v74; // er10\n  signed int v75; // er9\n  signed int v76; // er11\n  signed int v77; // edi\n  unsigned int v78; // eax\n  unsigned int v79; // eax\n  int v80; // eax\n  unsigned int v81; // eax\n  unsigned int v82; // eax\n  int v83; // eax\n  int v84; // er12\n  int v85; // ebp\n  int v86; // er13\n  unsigned int v87; // edx\n  unsigned int v88; // eax\n  unsigned int v89; // ecx\n  unsigned int v90; // eax\n  int v91; // ebx\n  signed int v92; // ecx\n  int v93; // esi\n  unsigned int v94; // er14\n  int v95; // er8\n  int v96; // edx\n  signed int *v97; // rax\n  int v98; // ebx\n  int v99; // er15\n  int v100; // er14\n  int v101; // er8\n  int v102; // esi\n  int v103; // er10\n  signed int v104; // er9\n  signed int v105; // er11\n  signed int v106; // edi\n  unsigned int v107; // eax\n  unsigned int v108; // eax\n  int v109; // eax\n  unsigned int v110; // eax\n  unsigned int v111; // eax\n  int v112; // eax\n  int v113; // er12\n  int v114; // ebp\n  int v115; // er13\n  unsigned int v116; // edx\n  unsigned int v117; // eax\n  unsigned int v118; // ecx\n  unsigned int v119; // eax\n  int v120; // ebx\n  signed int v121; // ecx\n  int v122; // esi\n  unsigned int v123; // er14\n  int v124; // er8\n  int v125; // edx\n  signed int *v126; // rax\n  int v127; // ebx\n  int v128; // er15\n  int v129; // er14\n  int v130; // esi\n  int v131; // er10\n  signed int v132; // er9\n  signed int v133; // er11\n  signed int v134; // edi\n  unsigned int v135; // eax\n  unsigned int v136; // eax\n  int v137; // eax\n  unsigned int v138; // eax\n  unsigned int v139; // eax\n  int v140; // eax\n  int v141; // er12\n  int v142; // ebp\n  int v143; // er13\n  unsigned int v144; // edx\n  unsigned int v145; // eax\n  unsigned int v146; // ecx\n  unsigned int v147; // eax\n  int v148; // ebx\n  signed int v149; // ecx\n  int v150; // esi\n  unsigned int v151; // er14\n  int v152; // er8\n  int v153; // edx\n  signed int *v154; // rax\n  int v155; // ebx\n  int v156; // er15\n  int v157; // er14\n  int v158; // er8\n  int v159; // esi\n  int v160; // er10\n  signed int v161; // er9\n  signed int v162; // er11\n  signed int v163; // edi\n  unsigned int v164; // eax\n  unsigned int v165; // eax\n  int v166; // eax\n  unsigned int v167; // eax\n  unsigned int v168; // eax\n  int v169; // eax\n  int v170; // er12\n  int v171; // ebp\n  int v172; // er13\n  unsigned int v173; // edx\n  unsigned int v174; // eax\n  unsigned int v175; // ecx\n  unsigned int v176; // eax\n  int v177; // ebx\n  signed int v178; // ecx\n  int v179; // esi\n  unsigned int v180; // er14\n  int v181; // er8\n  int v182; // edx\n  signed int *v183; // rax\n  int v184; // ebx\n  int v185; // er15\n  int v186; // er14\n  int v187; // esi\n  int v188; // er10\n  signed int v189; // er9\n  signed int v190; // er11\n  signed int v191; // edi\n  unsigned int v192; // eax\n  unsigned int v193; // eax\n  int v194; // eax\n  unsigned int v195; // eax\n  unsigned int v196; // eax\n  int v197; // eax\n  int v198; // er12\n  int v199; // ebp\n  int v200; // er13\n  unsigned int v201; // edx\n  unsigned int v202; // eax\n  unsigned int v203; // ecx\n  unsigned int v204; // eax\n  int v205; // ebx\n  signed int v206; // ecx\n  int v207; // esi\n  unsigned int v208; // er14\n  int v209; // er8\n  int v210; // edx\n  signed int *v211; // rax\n  int v212; // ebx\n  int v213; // er15\n  int v214; // er14\n  int v215; // er8\n  int v216; // esi\n  int v217; // er10\n  signed int v218; // er9\n  signed int v219; // er11\n  signed int v220; // edi\n  unsigned int v221; // eax\n  unsigned int v222; // eax\n  int v223; // eax\n  unsigned int v224; // eax\n  unsigned int v225; // eax\n  int v226; // eax\n  int v227; // er12\n  int v228; // ebp\n  int v229; // er13\n  unsigned int v230; // edx\n  unsigned int v231; // eax\n  unsigned int v232; // ecx\n  unsigned int v233; // eax\n  int v234; // ebx\n  signed int v235; // ecx\n  int v236; // esi\n  unsigned int v237; // er14\n  int v238; // er8\n  int v239; // edx\n  signed int *v240; // rax\n  int v241; // ebx\n  int v242; // er15\n  int v243; // er14\n  int v244; // esi\n  int v245; // er10\n  signed int v246; // er9\n  signed int v247; // er11\n  signed int v248; // edi\n  unsigned int v249; // eax\n  unsigned int v250; // eax\n  int v251; // eax\n  unsigned int v252; // eax\n  unsigned int v253; // eax\n  int v254; // eax\n  int v255; // er12\n  int v256; // ebp\n  int v257; // er13\n  unsigned int v258; // edx\n  unsigned int v259; // eax\n  unsigned int v260; // ecx\n  unsigned int v261; // eax\n  int v262; // ebx\n  signed int v263; // ecx\n  int v264; // esi\n  unsigned int v265; // er14\n  int v266; // er8\n  int v267; // edx\n  signed int *v268; // rax\n  int v269; // ebx\n  int v270; // er15\n  int v271; // er14\n  int v272; // er8\n  int v273; // esi\n  int v274; // er10\n  signed int v275; // er9\n  signed int v276; // er11\n  signed int v277; // edi\n  unsigned int v278; // eax\n  unsigned int v279; // eax\n  int v280; // eax\n  unsigned int v281; // eax\n  unsigned int v282; // eax\n  int v283; // eax\n  int v284; // er12\n  int v285; // ebp\n  int v286; // er13\n  unsigned int v287; // edx\n  unsigned int v288; // eax\n  unsigned int v289; // ecx\n  unsigned int v290; // eax\n  int v291; // ebx\n  signed int v292; // ecx\n  int v293; // esi\n  unsigned int v294; // er14\n  int v295; // er8\n  int v296; // edx\n  signed int *v297; // rax\n  int v298; // ebx\n  int v299; // er15\n  int v300; // er14\n  int v301; // esi\n  int v302; // er10\n  signed int v303; // er9\n  signed int v304; // er11\n  signed int v305; // edi\n  unsigned int v306; // eax\n  unsigned int v307; // eax\n  int v308; // eax\n  unsigned int v309; // eax\n  unsigned int v310; // eax\n  int v311; // eax\n  int v312; // er12\n  int v313; // ebp\n  int v314; // er13\n  unsigned int v315; // edx\n  unsigned int v316; // eax\n  unsigned int v317; // ecx\n  unsigned int v318; // eax\n  int v319; // ebx\n  signed int v320; // ecx\n  int v321; // esi\n  unsigned int v322; // er14\n  int v323; // er8\n  int v324; // edx\n  signed int *v325; // rax\n  int v326; // ebx\n  int v327; // er15\n  int v328; // er14\n  int v329; // er8\n  int v330; // esi\n  int v331; // er10\n  signed int v332; // er9\n  signed int v333; // er11\n  signed int v334; // edi\n  unsigned int v335; // eax\n  unsigned int v336; // eax\n  int v337; // eax\n  unsigned int v338; // eax\n  unsigned int v339; // eax\n  int v340; // eax\n  int v341; // er12\n  int v342; // ebp\n  int v343; // er13\n  unsigned int v344; // edx\n  unsigned int v345; // eax\n  unsigned int v346; // ecx\n  unsigned int v347; // eax\n  int v348; // ebx\n  signed int v349; // ecx\n  int v350; // esi\n  unsigned int v351; // er14\n  int v352; // er8\n  int v353; // edx\n  signed int *v354; // rax\n  int v355; // ebx\n  int v356; // er15\n  int v357; // er14\n  int v358; // esi\n  int v359; // er10\n  signed int v360; // er9\n  signed int v361; // er11\n  signed int v362; // edi\n  unsigned int v363; // eax\n  unsigned int v364; // eax\n  int v365; // eax\n  unsigned int v366; // eax\n  unsigned int v367; // eax\n  int v368; // eax\n  int v369; // er12\n  int v370; // ebp\n  int v371; // er13\n  unsigned int v372; // edx\n  unsigned int v373; // eax\n  unsigned int v374; // ecx\n  unsigned int v375; // eax\n  int v376; // ebx\n  signed int v377; // ecx\n  int v378; // esi\n  unsigned int v379; // er14\n  int v380; // er8\n  int v381; // edx\n  signed int *v382; // rax\n  int v383; // ebx\n  int v384; // er15\n  int v385; // er14\n  int v386; // er8\n  int v387; // esi\n  int v388; // er10\n  signed int v389; // er9\n  signed int v390; // er11\n  signed int v391; // edi\n  unsigned int v392; // eax\n  unsigned int v393; // eax\n  int v394; // eax\n  unsigned int v395; // eax\n  unsigned int v396; // eax\n  int v397; // eax\n  int v398; // er12\n  int v399; // ebp\n  int v400; // er13\n  unsigned int v401; // edx\n  unsigned int v402; // eax\n  unsigned int v403; // ecx\n  unsigned int v404; // eax\n  int v405; // ebx\n  signed int v406; // ecx\n  int v407; // esi\n  unsigned int v408; // er14\n  int v409; // er8\n  int v410; // edx\n  signed int *v411; // rax\n  int v412; // ebx\n  int v413; // er15\n  int v414; // er14\n  int v415; // esi\n  int v416; // er10\n  signed int v417; // er9\n  signed int v418; // er11\n  signed int v419; // edi\n  unsigned int v420; // eax\n  unsigned int v421; // eax\n  int v422; // eax\n  unsigned int v423; // eax\n  unsigned int v424; // eax\n  int v425; // eax\n  int v426; // er12\n  int v427; // ebp\n  int v428; // er13\n  unsigned int v429; // edx\n  unsigned int v430; // eax\n  unsigned int v431; // ecx\n  unsigned int v432; // eax\n  int v433; // ebx\n  signed int v434; // ecx\n  int v435; // esi\n  unsigned int v436; // er14\n  int v437; // er8\n  int v438; // edx\n  signed int *v439; // rax\n  int v440; // ebx\n  int v441; // er15\n  int v442; // er14\n  int v443; // er8\n  int v444; // esi\n  int v445; // er10\n  signed int v446; // er9\n  signed int v447; // er11\n  signed int v448; // edi\n  unsigned int v449; // eax\n  unsigned int v450; // eax\n  int v451; // eax\n  unsigned int v452; // eax\n  unsigned int v453; // eax\n  int v454; // eax\n  int v455; // er12\n  int v456; // ebp\n  int v457; // er13\n  unsigned int v458; // edx\n  unsigned int v459; // eax\n  unsigned int v460; // ecx\n  unsigned int v461; // eax\n  int v462; // ebx\n  signed int v463; // ecx\n  int v464; // esi\n  unsigned int v465; // er14\n  int v466; // er8\n  int v467; // edx\n  signed int *v468; // rax\n  int v469; // ebx\n  int v470; // er15\n  int v471; // er14\n  int v472; // esi\n  int v473; // er10\n  __int64 v474; // rdi\n  unsigned int v475; // eax\n  unsigned int v476; // eax\n  int v477; // eax\n  unsigned int v478; // eax\n  unsigned int v479; // eax\n  unsigned int v480; // eax\n  int v481; // esi\n  unsigned int v482; // ecx\n  int v483; // eax\n  int v484; // edx\n  int v485; // eax\n  int v486; // esi\n  unsigned int v487; // edx\n  int v488; // eax\n  int v489; // ecx\n  int v490; // edx\n  int v491; // ecx\n  int v492; // esi\n  unsigned int v493; // edx\n  int v494; // [rsp+0h] [rbp-64h]\n  int v495; // [rsp+0h] [rbp-64h]\n  int v496; // [rsp+0h] [rbp-64h]\n  int v497; // [rsp+0h] [rbp-64h]\n  int v498; // [rsp+0h] [rbp-64h]\n  int v499; // [rsp+0h] [rbp-64h]\n  int v500; // [rsp+0h] [rbp-64h]\n  int v501; // [rsp+0h] [rbp-64h]\n  int v502; // [rsp+0h] [rbp-64h]\n  __int64 v503; // [rsp+4h] [rbp-60h]\n  __int64 v504; // [rsp+Ch] [rbp-58h]\n  int v505; // [rsp+14h] [rbp-50h]\n  int v506; // [rsp+14h] [rbp-50h]\n  int v507; // [rsp+14h] [rbp-50h]\n  int v508; // [rsp+14h] [rbp-50h]\n  int v509; // [rsp+14h] [rbp-50h]\n  int v510; // [rsp+14h] [rbp-50h]\n  int v511; // [rsp+14h] [rbp-50h]\n  int v512; // [rsp+14h] [rbp-50h]\n  int v513; // [rsp+14h] [rbp-50h]\n  int v514; // [rsp+18h] [rbp-4Ch]\n  int v515; // [rsp+18h] [rbp-4Ch]\n  int v516; // [rsp+18h] [rbp-4Ch]\n  int v517; // [rsp+18h] [rbp-4Ch]\n  int v518; // [rsp+18h] [rbp-4Ch]\n  int v519; // [rsp+18h] [rbp-4Ch]\n  int v520; // [rsp+18h] [rbp-4Ch]\n  int v521; // [rsp+18h] [rbp-4Ch]\n  int v522; // [rsp+1Ch] [rbp-48h]\n  int v523; // [rsp+1Ch] [rbp-48h]\n  int v524; // [rsp+1Ch] [rbp-48h]\n  int v525; // [rsp+1Ch] [rbp-48h]\n  int v526; // [rsp+1Ch] [rbp-48h]\n  int v527; // [rsp+1Ch] [rbp-48h]\n  int v528; // [rsp+1Ch] [rbp-48h]\n  int v529; // [rsp+1Ch] [rbp-48h]\n  int v530; // [rsp+1Ch] [rbp-48h]\n  int v531; // [rsp+1Ch] [rbp-48h]\n  int v532; // [rsp+1Ch] [rbp-48h]\n  int v533; // [rsp+1Ch] [rbp-48h]\n  int v534; // [rsp+1Ch] [rbp-48h]\n  int v535; // [rsp+1Ch] [rbp-48h]\n  int v536; // [rsp+1Ch] [rbp-48h]\n  int v537; // [rsp+1Ch] [rbp-48h]\n  unsigned int v538; // [rsp+20h] [rbp-44h]\n  unsigned int v539; // [rsp+20h] [rbp-44h]\n  unsigned int v540; // [rsp+20h] [rbp-44h]\n  unsigned int v541; // [rsp+20h] [rbp-44h]\n  unsigned int v542; // [rsp+20h] [rbp-44h]\n  unsigned int v543; // [rsp+20h] [rbp-44h]\n  unsigned int v544; // [rsp+20h] [rbp-44h]\n  unsigned int v545; // [rsp+20h] [rbp-44h]\n  unsigned int v546; // [rsp+20h] [rbp-44h]\n  unsigned int v547; // [rsp+20h] [rbp-44h]\n  unsigned int v548; // [rsp+20h] [rbp-44h]\n  unsigned int v549; // [rsp+20h] [rbp-44h]\n  unsigned int v550; // [rsp+20h] [rbp-44h]\n  unsigned int v551; // [rsp+20h] [rbp-44h]\n  unsigned int v552; // [rsp+20h] [rbp-44h]\n  unsigned int v553; // [rsp+20h] [rbp-44h]\n  unsigned int v554; // [rsp+24h] [rbp-40h]\n  unsigned int v555; // [rsp+24h] [rbp-40h]\n  unsigned int v556; // [rsp+24h] [rbp-40h]\n  unsigned int v557; // [rsp+24h] [rbp-40h]\n  unsigned int v558; // [rsp+24h] [rbp-40h]\n  unsigned int v559; // [rsp+24h] [rbp-40h]\n  unsigned int v560; // [rsp+24h] [rbp-40h]\n  unsigned int v561; // [rsp+24h] [rbp-40h]\n  unsigned int v562; // [rsp+24h] [rbp-40h]\n  unsigned int v563; // [rsp+24h] [rbp-40h]\n  unsigned int v564; // [rsp+24h] [rbp-40h]\n  unsigned int v565; // [rsp+24h] [rbp-40h]\n  unsigned int v566; // [rsp+24h] [rbp-40h]\n  unsigned int v567; // [rsp+24h] [rbp-40h]\n  unsigned int v568; // [rsp+24h] [rbp-40h]\n  unsigned int v569; // [rsp+24h] [rbp-40h]\n  unsigned int v570; // [rsp+28h] [rbp-3Ch]\n  unsigned int v571; // [rsp+28h] [rbp-3Ch]\n  unsigned int v572; // [rsp+28h] [rbp-3Ch]\n  unsigned int v573; // [rsp+28h] [rbp-3Ch]\n  unsigned int v574; // [rsp+28h] [rbp-3Ch]\n  unsigned int v575; // [rsp+28h] [rbp-3Ch]\n  unsigned int v576; // [rsp+28h] [rbp-3Ch]\n  unsigned int v577; // [rsp+28h] [rbp-3Ch]\n  unsigned int v578; // [rsp+28h] [rbp-3Ch]\n  unsigned int v579; // [rsp+28h] [rbp-3Ch]\n  unsigned int v580; // [rsp+28h] [rbp-3Ch]\n  unsigned int v581; // [rsp+28h] [rbp-3Ch]\n  unsigned int v582; // [rsp+28h] [rbp-3Ch]\n  unsigned int v583; // [rsp+28h] [rbp-3Ch]\n  unsigned int v584; // [rsp+28h] [rbp-3Ch]\n  unsigned int v585; // [rsp+28h] [rbp-3Ch]\n  signed __int64 v586; // [rsp+2Ch] [rbp-38h]\n\n  v503 = a1;\n  v504 = a2;\n  if ( a3 > 0 )\n  {\n    v3 = *(_DWORD *)(a1 - 8);\n    v4 = *(_DWORD *)(a1 - 4);\n    v586 = a2 + 8LL * ((unsigned int)(a3 - 1) >> 3) + 8;\n    do\n    {\n      v5 = 234941184;\n      v6 = -2097117952;\n      v7 = _byteswap_ulong(*(_DWORD *)v504) ^ v3;\n      v8 = _byteswap_ulong(*(_DWORD *)(v504 + 4)) ^ v4;\n      v9 = (v8 ^ (v7 >> 4)) & 0xF0F0F0F;\n      v10 = v9 ^ v8;\n      v11 = v7 ^ 16 * v9;\n      v12 = (unsigned __int16)(v10 ^ ((v7 ^ 16 * v9) >> 16));\n      v13 = v12 ^ v10;\n      v14 = v11 ^ (v12 << 16);\n      v15 = (v14 ^ (v13 >> 2)) & 0x33333333;\n      v16 = v15 ^ v14;\n      v17 = v13 ^ 4 * v15;\n      v18 = v17;\n      v19 = (v16 ^ (v17 >> 8)) & 0xFF00FF;\n      v20 = v19;\n      v21 = v16 ^ v19;\n      v22 = v18 ^ (v20 << 8);\n      v23 = (v22 ^ (v21 >> 1)) & 0x55555555;\n      v24 = v23 ^ v22;\n      v505 = __ROR4__(v21 ^ 2 * v23, 1);\n      v514 = __ROR4__(v24, 1);\n      v25 = __ROR4__(v24, 1) ^ *(_DWORD *)(v503 - 136);\n      v26 = *(_DWORD *)(v503 - 72) ^ __ROL4__(v24, 3);\n      v27 = 0;\n      v28 = 2063609344;\n      v29 = 0;\n      v30 = 0;\n      v31 = v26;\n      v32 = (v26 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v33 = v31 & 0xFC00FC;\n      v34 = -167733504;\n      v538 = v32;\n      v33 |= 0xFF00FF00;\n      v35 = v33;\n      v36 = v25 & 0xFC00FC | 0xFF00FF00;\n      v37 = v32 - v33;\n      v522 = v33;\n      v554 = v25 & 0xFC00FC | 0xFF00FF00;\n      v570 = (v25 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v38 = v33;\n      v39 = (signed int *)&unk_4DDE0;\n      v40 = 0;\n      v41 = v570 - v35;\n      v42 = v36 - v35;\n      v494 = v37;\n      while ( 1 )\n      {\n        v39 += 4;\n        v43 = v28 & (v42 + v38);\n        v44 = v5 & (v41 + v38);\n        v45 = v38 + v494;\n        v30 ^= v38 & v6;\n        v38 += 524296;\n        v40 ^= v43;\n        v27 ^= v44;\n        v29 ^= v34 & v45;\n        if ( v39 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v6 = *v39;\n        v34 = v39[1];\n        v28 = v39[2];\n        v5 = v39[3];\n      }\n      v46 = 234941184;\n      v47 = -2097117952;\n      v48 = 2063609344;\n      v49 = ((16 * v40 & 15360 * ((v554 + 16777472) & 0x40004) ^ v40) >> 8) & 0xF000F0 | (16 * v27 & 15360 * ((v570 + 16777472) & 0x40004) ^ v27) & 0xF000F000 | ((16 * v29 & 15360 * ((v538 + 16777472) & 0x40004) ^ v29) >> 4) & 0xF000F00 | ((v30 ^ 16 * v30 & 15360 * ((v522 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v50 = 16 * ((v49 ^ (v49 >> 4)) & 0x7030702) ^ (v49 ^ (v49 >> 4)) & 0x7030702 ^ v49;\n      v51 = (((v50 ^ (v50 >> 8)) & 0x4E009E) << 8) ^ (v50 ^ (v50 >> 8)) & 0x4E009E ^ v50;\n      v52 = ((unsigned __int16)((v51 ^ HIWORD(v51)) & 0xD9D3) << 16) ^ ((unsigned __int16)v51 ^ HIWORD(v51)) & 0xD9D3 ^ v51;\n      v53 = 16 * ((v52 ^ (v52 >> 4)) & 0x5040004) ^ (v52 ^ (v52 >> 4)) & 0x5040004 ^ v52;\n      v54 = 2 * ((v53 ^ (v53 >> 1)) & 0x4045015) ^ (v53 ^ (v53 >> 1)) & 0x4045015 ^ v505 ^ v53;\n      v55 = 0;\n      v506 = v54;\n      v56 = 0;\n      v57 = 0;\n      v58 = v54 ^ *(_DWORD *)(v503 - 132);\n      v59 = *(_DWORD *)(v503 - 68) ^ __ROL4__(v54, 4);\n      v60 = v59;\n      v61 = (v59 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v62 = v60 & 0xFC00FC;\n      v63 = -167733504;\n      v539 = v61;\n      v62 |= 0xFF00FF00;\n      v64 = v62;\n      v65 = v58 & 0xFC00FC | 0xFF00FF00;\n      v66 = v61 - v62;\n      v523 = v62;\n      v555 = v58 & 0xFC00FC | 0xFF00FF00;\n      v571 = (v58 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v67 = v62;\n      v68 = (signed int *)&unk_4DDE0;\n      v69 = 0;\n      v70 = v571 - v64;\n      v71 = v65 - v64;\n      v495 = v66;\n      while ( 1 )\n      {\n        v68 += 4;\n        v72 = v48 & (v71 + v67);\n        v73 = v46 & (v70 + v67);\n        v74 = v67 + v495;\n        v57 ^= v67 & v47;\n        v67 += 524296;\n        v69 ^= v72;\n        v55 ^= v73;\n        v56 ^= v63 & v74;\n        if ( v68 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v47 = *v68;\n        v63 = v68[1];\n        v48 = v68[2];\n        v46 = v68[3];\n      }\n      v75 = 234941184;\n      v76 = -2097117952;\n      v77 = 2063609344;\n      v78 = ((16 * v69 & 15360 * ((v555 + 16777472) & 0x40004) ^ v69) >> 8) & 0xF000F0 | (16 * v55 & 15360 * ((v571 + 16777472) & 0x40004) ^ v55) & 0xF000F000 | ((16 * v56 & 15360 * ((v539 + 16777472) & 0x40004) ^ v56) >> 4) & 0xF000F00 | ((v57 ^ 16 * v57 & 15360 * ((v523 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v79 = 16 * ((v78 ^ (v78 >> 4)) & 0x7030702) ^ (v78 ^ (v78 >> 4)) & 0x7030702 ^ v78;\n      v80 = (((v79 ^ (v79 >> 8)) & 0x4E009E) << 8) ^ (v79 ^ (v79 >> 8)) & 0x4E009E ^ v79;\n      v81 = ((unsigned __int16)((v80 ^ HIWORD(v80)) & 0xD9D3) << 16) ^ ((unsigned __int16)v80 ^ HIWORD(v80)) & 0xD9D3 ^ v80;\n      v82 = 16 * ((v81 ^ (v81 >> 4)) & 0x5040004) ^ (v81 ^ (v81 >> 4)) & 0x5040004 ^ v81;\n      v83 = 2 * ((v82 ^ (v82 >> 1)) & 0x4045015) ^ (v82 ^ (v82 >> 1)) & 0x4045015 ^ v514 ^ v82;\n      v84 = 0;\n      v515 = v83;\n      v85 = 0;\n      v86 = 0;\n      v87 = v83 ^ *(_DWORD *)(v503 - 128);\n      v88 = *(_DWORD *)(v503 - 64) ^ __ROL4__(v83, 4);\n      v89 = v88;\n      v90 = (v88 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v91 = v89 & 0xFC00FC;\n      v92 = -167733504;\n      v540 = v90;\n      v91 |= 0xFF00FF00;\n      v93 = v91;\n      v94 = v87 & 0xFC00FC | 0xFF00FF00;\n      v95 = v90 - v91;\n      v524 = v91;\n      v556 = v87 & 0xFC00FC | 0xFF00FF00;\n      v572 = (v87 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v96 = v91;\n      v97 = (signed int *)&unk_4DDE0;\n      v98 = 0;\n      v99 = v572 - v93;\n      v100 = v94 - v93;\n      v496 = v95;\n      while ( 1 )\n      {\n        v97 += 4;\n        v101 = v77 & (v100 + v96);\n        v102 = v75 & (v99 + v96);\n        v103 = v96 + v496;\n        v86 ^= v96 & v76;\n        v96 += 524296;\n        v98 ^= v101;\n        v84 ^= v102;\n        v85 ^= v92 & v103;\n        if ( v97 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v76 = *v97;\n        v92 = v97[1];\n        v77 = v97[2];\n        v75 = v97[3];\n      }\n      v104 = 234941184;\n      v105 = -2097117952;\n      v106 = 2063609344;\n      v107 = ((16 * v98 & 15360 * ((v556 + 16777472) & 0x40004) ^ v98) >> 8) & 0xF000F0 | (16 * v84 & 15360 * ((v572 + 16777472) & 0x40004) ^ v84) & 0xF000F000 | ((16 * v85 & 15360 * ((v540 + 16777472) & 0x40004) ^ v85) >> 4) & 0xF000F00 | ((v86 ^ 16 * v86 & 15360 * ((v524 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v108 = 16 * ((v107 ^ (v107 >> 4)) & 0x7030702) ^ (v107 ^ (v107 >> 4)) & 0x7030702 ^ v107;\n      v109 = (((v108 ^ (v108 >> 8)) & 0x4E009E) << 8) ^ (v108 ^ (v108 >> 8)) & 0x4E009E ^ v108;\n      v110 = ((unsigned __int16)((v109 ^ HIWORD(v109)) & 0xD9D3) << 16) ^ ((unsigned __int16)v109 ^ HIWORD(v109)) & 0xD9D3 ^ v109;\n      v111 = 16 * ((v110 ^ (v110 >> 4)) & 0x5040004) ^ (v110 ^ (v110 >> 4)) & 0x5040004 ^ v110;\n      v112 = 2 * ((v111 ^ (v111 >> 1)) & 0x4045015) ^ (v111 ^ (v111 >> 1)) & 0x4045015 ^ v506 ^ v111;\n      v113 = 0;\n      v507 = v112;\n      v114 = 0;\n      v115 = 0;\n      v116 = v112 ^ *(_DWORD *)(v503 - 124);\n      v117 = *(_DWORD *)(v503 - 60) ^ __ROL4__(v112, 4);\n      v118 = v117;\n      v119 = (v117 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v120 = v118 & 0xFC00FC;\n      v121 = -167733504;\n      v541 = v119;\n      v120 |= 0xFF00FF00;\n      v122 = v120;\n      v123 = v116 & 0xFC00FC | 0xFF00FF00;\n      v124 = v119 - v120;\n      v525 = v120;\n      v557 = v116 & 0xFC00FC | 0xFF00FF00;\n      v573 = (v116 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v125 = v120;\n      v126 = (signed int *)&unk_4DDE0;\n      v127 = 0;\n      v128 = v573 - v122;\n      v129 = v123 - v122;\n      while ( 1 )\n      {\n        v126 += 4;\n        v130 = v104 & (v128 + v125);\n        v115 ^= v125 & v105;\n        v131 = v125 + v124;\n        v127 ^= v106 & (v129 + v125);\n        v125 += 524296;\n        v113 ^= v130;\n        v114 ^= v121 & v131;\n        if ( v126 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v105 = *v126;\n        v121 = v126[1];\n        v106 = v126[2];\n        v104 = v126[3];\n      }\n      v132 = 234941184;\n      v133 = -2097117952;\n      v134 = 2063609344;\n      v135 = ((16 * v127 & 15360 * ((v557 + 16777472) & 0x40004) ^ v127) >> 8) & 0xF000F0 | (16 * v113 & 15360 * ((v573 + 16777472) & 0x40004) ^ v113) & 0xF000F000 | ((16 * v114 & 15360 * ((v541 + 16777472) & 0x40004) ^ v114) >> 4) & 0xF000F00 | ((v115 ^ 16 * v115 & 15360 * ((v525 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v136 = 16 * ((v135 ^ (v135 >> 4)) & 0x7030702) ^ (v135 ^ (v135 >> 4)) & 0x7030702 ^ v135;\n      v137 = (((v136 ^ (v136 >> 8)) & 0x4E009E) << 8) ^ (v136 ^ (v136 >> 8)) & 0x4E009E ^ v136;\n      v138 = ((unsigned __int16)((v137 ^ HIWORD(v137)) & 0xD9D3) << 16) ^ ((unsigned __int16)v137 ^ HIWORD(v137)) & 0xD9D3 ^ v137;\n      v139 = 16 * ((v138 ^ (v138 >> 4)) & 0x5040004) ^ (v138 ^ (v138 >> 4)) & 0x5040004 ^ v138;\n      v140 = 2 * ((v139 ^ (v139 >> 1)) & 0x4045015) ^ (v139 ^ (v139 >> 1)) & 0x4045015 ^ v515 ^ v139;\n      v141 = 0;\n      v516 = v140;\n      v142 = 0;\n      v143 = 0;\n      v144 = v140 ^ *(_DWORD *)(v503 - 120);\n      v145 = *(_DWORD *)(v503 - 56) ^ __ROL4__(v140, 4);\n      v146 = v145;\n      v147 = (v145 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v148 = v146 & 0xFC00FC;\n      v149 = -167733504;\n      v542 = v147;\n      v148 |= 0xFF00FF00;\n      v150 = v148;\n      v151 = v144 & 0xFC00FC | 0xFF00FF00;\n      v152 = v147 - v148;\n      v526 = v148;\n      v558 = v144 & 0xFC00FC | 0xFF00FF00;\n      v574 = (v144 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v153 = v148;\n      v154 = (signed int *)&unk_4DDE0;\n      v155 = 0;\n      v156 = v574 - v150;\n      v157 = v151 - v150;\n      v497 = v152;\n      while ( 1 )\n      {\n        v154 += 4;\n        v158 = v134 & (v157 + v153);\n        v159 = v132 & (v156 + v153);\n        v160 = v153 + v497;\n        v143 ^= v153 & v133;\n        v153 += 524296;\n        v155 ^= v158;\n        v141 ^= v159;\n        v142 ^= v149 & v160;\n        if ( v154 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v133 = *v154;\n        v149 = v154[1];\n        v134 = v154[2];\n        v132 = v154[3];\n      }\n      v161 = 234941184;\n      v162 = -2097117952;\n      v163 = 2063609344;\n      v164 = ((16 * v155 & 15360 * ((v558 + 16777472) & 0x40004) ^ v155) >> 8) & 0xF000F0 | (16 * v141 & 15360 * ((v574 + 16777472) & 0x40004) ^ v141) & 0xF000F000 | ((16 * v142 & 15360 * ((v542 + 16777472) & 0x40004) ^ v142) >> 4) & 0xF000F00 | ((v143 ^ 16 * v143 & 15360 * ((v526 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v165 = 16 * ((v164 ^ (v164 >> 4)) & 0x7030702) ^ (v164 ^ (v164 >> 4)) & 0x7030702 ^ v164;\n      v166 = (((v165 ^ (v165 >> 8)) & 0x4E009E) << 8) ^ (v165 ^ (v165 >> 8)) & 0x4E009E ^ v165;\n      v167 = ((unsigned __int16)((v166 ^ HIWORD(v166)) & 0xD9D3) << 16) ^ ((unsigned __int16)v166 ^ HIWORD(v166)) & 0xD9D3 ^ v166;\n      v168 = 16 * ((v167 ^ (v167 >> 4)) & 0x5040004) ^ (v167 ^ (v167 >> 4)) & 0x5040004 ^ v167;\n      v169 = 2 * ((v168 ^ (v168 >> 1)) & 0x4045015) ^ (v168 ^ (v168 >> 1)) & 0x4045015 ^ v507 ^ v168;\n      v170 = 0;\n      v508 = v169;\n      v171 = 0;\n      v172 = 0;\n      v173 = v169 ^ *(_DWORD *)(v503 - 116);\n      v174 = *(_DWORD *)(v503 - 52) ^ __ROL4__(v169, 4);\n      v175 = v174;\n      v176 = (v174 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v177 = v175 & 0xFC00FC;\n      v178 = -167733504;\n      v543 = v176;\n      v177 |= 0xFF00FF00;\n      v179 = v177;\n      v180 = v173 & 0xFC00FC | 0xFF00FF00;\n      v181 = v176 - v177;\n      v527 = v177;\n      v559 = v173 & 0xFC00FC | 0xFF00FF00;\n      v575 = (v173 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v182 = v177;\n      v183 = (signed int *)&unk_4DDE0;\n      v184 = 0;\n      v185 = v575 - v179;\n      v186 = v180 - v179;\n      while ( 1 )\n      {\n        v183 += 4;\n        v187 = v161 & (v185 + v182);\n        v172 ^= v182 & v162;\n        v188 = v182 + v181;\n        v184 ^= v163 & (v186 + v182);\n        v182 += 524296;\n        v170 ^= v187;\n        v171 ^= v178 & v188;\n        if ( v183 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v162 = *v183;\n        v178 = v183[1];\n        v163 = v183[2];\n        v161 = v183[3];\n      }\n      v189 = 234941184;\n      v190 = -2097117952;\n      v191 = 2063609344;\n      v192 = ((16 * v184 & 15360 * ((v559 + 16777472) & 0x40004) ^ v184) >> 8) & 0xF000F0 | (16 * v170 & 15360 * ((v575 + 16777472) & 0x40004) ^ v170) & 0xF000F000 | ((16 * v171 & 15360 * ((v543 + 16777472) & 0x40004) ^ v171) >> 4) & 0xF000F00 | ((v172 ^ 16 * v172 & 15360 * ((v527 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v193 = 16 * ((v192 ^ (v192 >> 4)) & 0x7030702) ^ (v192 ^ (v192 >> 4)) & 0x7030702 ^ v192;\n      v194 = (((v193 ^ (v193 >> 8)) & 0x4E009E) << 8) ^ (v193 ^ (v193 >> 8)) & 0x4E009E ^ v193;\n      v195 = ((unsigned __int16)((v194 ^ HIWORD(v194)) & 0xD9D3) << 16) ^ ((unsigned __int16)v194 ^ HIWORD(v194)) & 0xD9D3 ^ v194;\n      v196 = 16 * ((v195 ^ (v195 >> 4)) & 0x5040004) ^ (v195 ^ (v195 >> 4)) & 0x5040004 ^ v195;\n      v197 = 2 * ((v196 ^ (v196 >> 1)) & 0x4045015) ^ (v196 ^ (v196 >> 1)) & 0x4045015 ^ v516 ^ v196;\n      v198 = 0;\n      v517 = v197;\n      v199 = 0;\n      v200 = 0;\n      v201 = v197 ^ *(_DWORD *)(v503 - 112);\n      v202 = *(_DWORD *)(v503 - 48) ^ __ROL4__(v197, 4);\n      v203 = v202;\n      v204 = (v202 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v205 = v203 & 0xFC00FC;\n      v206 = -167733504;\n      v544 = v204;\n      v205 |= 0xFF00FF00;\n      v207 = v205;\n      v208 = v201 & 0xFC00FC | 0xFF00FF00;\n      v209 = v204 - v205;\n      v528 = v205;\n      v560 = v201 & 0xFC00FC | 0xFF00FF00;\n      v576 = (v201 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v210 = v205;\n      v211 = (signed int *)&unk_4DDE0;\n      v212 = 0;\n      v213 = v576 - v207;\n      v214 = v208 - v207;\n      v498 = v209;\n      while ( 1 )\n      {\n        v211 += 4;\n        v215 = v191 & (v214 + v210);\n        v216 = v189 & (v213 + v210);\n        v217 = v210 + v498;\n        v200 ^= v210 & v190;\n        v210 += 524296;\n        v212 ^= v215;\n        v198 ^= v216;\n        v199 ^= v206 & v217;\n        if ( v211 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v190 = *v211;\n        v206 = v211[1];\n        v191 = v211[2];\n        v189 = v211[3];\n      }\n      v218 = 234941184;\n      v219 = -2097117952;\n      v220 = 2063609344;\n      v221 = ((16 * v212 & 15360 * ((v560 + 16777472) & 0x40004) ^ v212) >> 8) & 0xF000F0 | (16 * v198 & 15360 * ((v576 + 16777472) & 0x40004) ^ v198) & 0xF000F000 | ((16 * v199 & 15360 * ((v544 + 16777472) & 0x40004) ^ v199) >> 4) & 0xF000F00 | ((v200 ^ 16 * v200 & 15360 * ((v528 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v222 = 16 * ((v221 ^ (v221 >> 4)) & 0x7030702) ^ (v221 ^ (v221 >> 4)) & 0x7030702 ^ v221;\n      v223 = (((v222 ^ (v222 >> 8)) & 0x4E009E) << 8) ^ (v222 ^ (v222 >> 8)) & 0x4E009E ^ v222;\n      v224 = ((unsigned __int16)((v223 ^ HIWORD(v223)) & 0xD9D3) << 16) ^ ((unsigned __int16)v223 ^ HIWORD(v223)) & 0xD9D3 ^ v223;\n      v225 = 16 * ((v224 ^ (v224 >> 4)) & 0x5040004) ^ (v224 ^ (v224 >> 4)) & 0x5040004 ^ v224;\n      v226 = 2 * ((v225 ^ (v225 >> 1)) & 0x4045015) ^ (v225 ^ (v225 >> 1)) & 0x4045015 ^ v508 ^ v225;\n      v227 = 0;\n      v509 = v226;\n      v228 = 0;\n      v229 = 0;\n      v230 = v226 ^ *(_DWORD *)(v503 - 108);\n      v231 = *(_DWORD *)(v503 - 44) ^ __ROL4__(v226, 4);\n      v232 = v231;\n      v233 = (v231 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v234 = v232 & 0xFC00FC;\n      v235 = -167733504;\n      v545 = v233;\n      v234 |= 0xFF00FF00;\n      v236 = v234;\n      v237 = v230 & 0xFC00FC | 0xFF00FF00;\n      v238 = v233 - v234;\n      v529 = v234;\n      v561 = v230 & 0xFC00FC | 0xFF00FF00;\n      v577 = (v230 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v239 = v234;\n      v240 = (signed int *)&unk_4DDE0;\n      v241 = 0;\n      v242 = v577 - v236;\n      v243 = v237 - v236;\n      while ( 1 )\n      {\n        v240 += 4;\n        v244 = v218 & (v242 + v239);\n        v229 ^= v239 & v219;\n        v245 = v239 + v238;\n        v241 ^= v220 & (v243 + v239);\n        v239 += 524296;\n        v227 ^= v244;\n        v228 ^= v235 & v245;\n        if ( v240 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v219 = *v240;\n        v235 = v240[1];\n        v220 = v240[2];\n        v218 = v240[3];\n      }\n      v246 = 234941184;\n      v247 = -2097117952;\n      v248 = 2063609344;\n      v249 = ((16 * v241 & 15360 * ((v561 + 16777472) & 0x40004) ^ v241) >> 8) & 0xF000F0 | (16 * v227 & 15360 * ((v577 + 16777472) & 0x40004) ^ v227) & 0xF000F000 | ((16 * v228 & 15360 * ((v545 + 16777472) & 0x40004) ^ v228) >> 4) & 0xF000F00 | ((v229 ^ 16 * v229 & 15360 * ((v529 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v250 = 16 * ((v249 ^ (v249 >> 4)) & 0x7030702) ^ (v249 ^ (v249 >> 4)) & 0x7030702 ^ v249;\n      v251 = (((v250 ^ (v250 >> 8)) & 0x4E009E) << 8) ^ (v250 ^ (v250 >> 8)) & 0x4E009E ^ v250;\n      v252 = ((unsigned __int16)((v251 ^ HIWORD(v251)) & 0xD9D3) << 16) ^ ((unsigned __int16)v251 ^ HIWORD(v251)) & 0xD9D3 ^ v251;\n      v253 = 16 * ((v252 ^ (v252 >> 4)) & 0x5040004) ^ (v252 ^ (v252 >> 4)) & 0x5040004 ^ v252;\n      v254 = 2 * ((v253 ^ (v253 >> 1)) & 0x4045015) ^ (v253 ^ (v253 >> 1)) & 0x4045015 ^ v517 ^ v253;\n      v255 = 0;\n      v518 = v254;\n      v256 = 0;\n      v257 = 0;\n      v258 = v254 ^ *(_DWORD *)(v503 - 104);\n      v259 = *(_DWORD *)(v503 - 40) ^ __ROL4__(v254, 4);\n      v260 = v259;\n      v261 = (v259 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v262 = v260 & 0xFC00FC;\n      v263 = -167733504;\n      v546 = v261;\n      v262 |= 0xFF00FF00;\n      v264 = v262;\n      v265 = v258 & 0xFC00FC | 0xFF00FF00;\n      v266 = v261 - v262;\n      v530 = v262;\n      v562 = v258 & 0xFC00FC | 0xFF00FF00;\n      v578 = (v258 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v267 = v262;\n      v268 = (signed int *)&unk_4DDE0;\n      v269 = 0;\n      v270 = v578 - v264;\n      v271 = v265 - v264;\n      v499 = v266;\n      while ( 1 )\n      {\n        v268 += 4;\n        v272 = v248 & (v271 + v267);\n        v273 = v246 & (v270 + v267);\n        v274 = v267 + v499;\n        v257 ^= v267 & v247;\n        v267 += 524296;\n        v269 ^= v272;\n        v255 ^= v273;\n        v256 ^= v263 & v274;\n        if ( v268 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v247 = *v268;\n        v263 = v268[1];\n        v248 = v268[2];\n        v246 = v268[3];\n      }\n      v275 = 234941184;\n      v276 = -2097117952;\n      v277 = 2063609344;\n      v278 = ((16 * v269 & 15360 * ((v562 + 16777472) & 0x40004) ^ v269) >> 8) & 0xF000F0 | (16 * v255 & 15360 * ((v578 + 16777472) & 0x40004) ^ v255) & 0xF000F000 | ((16 * v256 & 15360 * ((v546 + 16777472) & 0x40004) ^ v256) >> 4) & 0xF000F00 | ((v257 ^ 16 * v257 & 15360 * ((v530 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v279 = 16 * ((v278 ^ (v278 >> 4)) & 0x7030702) ^ (v278 ^ (v278 >> 4)) & 0x7030702 ^ v278;\n      v280 = (((v279 ^ (v279 >> 8)) & 0x4E009E) << 8) ^ (v279 ^ (v279 >> 8)) & 0x4E009E ^ v279;\n      v281 = ((unsigned __int16)((v280 ^ HIWORD(v280)) & 0xD9D3) << 16) ^ ((unsigned __int16)v280 ^ HIWORD(v280)) & 0xD9D3 ^ v280;\n      v282 = 16 * ((v281 ^ (v281 >> 4)) & 0x5040004) ^ (v281 ^ (v281 >> 4)) & 0x5040004 ^ v281;\n      v283 = 2 * ((v282 ^ (v282 >> 1)) & 0x4045015) ^ (v282 ^ (v282 >> 1)) & 0x4045015 ^ v509 ^ v282;\n      v284 = 0;\n      v510 = v283;\n      v285 = 0;\n      v286 = 0;\n      v287 = v283 ^ *(_DWORD *)(v503 - 100);\n      v288 = *(_DWORD *)(v503 - 36) ^ __ROL4__(v283, 4);\n      v289 = v288;\n      v290 = (v288 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v291 = v289 & 0xFC00FC;\n      v292 = -167733504;\n      v547 = v290;\n      v291 |= 0xFF00FF00;\n      v293 = v291;\n      v294 = v287 & 0xFC00FC | 0xFF00FF00;\n      v295 = v290 - v291;\n      v531 = v291;\n      v563 = v287 & 0xFC00FC | 0xFF00FF00;\n      v579 = (v287 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v296 = v291;\n      v297 = (signed int *)&unk_4DDE0;\n      v298 = 0;\n      v299 = v579 - v293;\n      v300 = v294 - v293;\n      while ( 1 )\n      {\n        v297 += 4;\n        v301 = v275 & (v299 + v296);\n        v286 ^= v296 & v276;\n        v302 = v296 + v295;\n        v298 ^= v277 & (v300 + v296);\n        v296 += 524296;\n        v284 ^= v301;\n        v285 ^= v292 & v302;\n        if ( v297 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v276 = *v297;\n        v292 = v297[1];\n        v277 = v297[2];\n        v275 = v297[3];\n      }\n      v303 = 234941184;\n      v304 = -2097117952;\n      v305 = 2063609344;\n      v306 = ((16 * v298 & 15360 * ((v563 + 16777472) & 0x40004) ^ v298) >> 8) & 0xF000F0 | (16 * v284 & 15360 * ((v579 + 16777472) & 0x40004) ^ v284) & 0xF000F000 | ((16 * v285 & 15360 * ((v547 + 16777472) & 0x40004) ^ v285) >> 4) & 0xF000F00 | ((v286 ^ 16 * v286 & 15360 * ((v531 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v307 = 16 * ((v306 ^ (v306 >> 4)) & 0x7030702) ^ (v306 ^ (v306 >> 4)) & 0x7030702 ^ v306;\n      v308 = (((v307 ^ (v307 >> 8)) & 0x4E009E) << 8) ^ (v307 ^ (v307 >> 8)) & 0x4E009E ^ v307;\n      v309 = ((unsigned __int16)((v308 ^ HIWORD(v308)) & 0xD9D3) << 16) ^ ((unsigned __int16)v308 ^ HIWORD(v308)) & 0xD9D3 ^ v308;\n      v310 = 16 * ((v309 ^ (v309 >> 4)) & 0x5040004) ^ (v309 ^ (v309 >> 4)) & 0x5040004 ^ v309;\n      v311 = 2 * ((v310 ^ (v310 >> 1)) & 0x4045015) ^ (v310 ^ (v310 >> 1)) & 0x4045015 ^ v518 ^ v310;\n      v312 = 0;\n      v519 = v311;\n      v313 = 0;\n      v314 = 0;\n      v315 = v311 ^ *(_DWORD *)(v503 - 96);\n      v316 = *(_DWORD *)(v503 - 32) ^ __ROL4__(v311, 4);\n      v317 = v316;\n      v318 = (v316 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v319 = v317 & 0xFC00FC;\n      v320 = -167733504;\n      v548 = v318;\n      v319 |= 0xFF00FF00;\n      v321 = v319;\n      v322 = v315 & 0xFC00FC | 0xFF00FF00;\n      v323 = v318 - v319;\n      v532 = v319;\n      v564 = v315 & 0xFC00FC | 0xFF00FF00;\n      v580 = (v315 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v324 = v319;\n      v325 = (signed int *)&unk_4DDE0;\n      v326 = 0;\n      v327 = v580 - v321;\n      v328 = v322 - v321;\n      v500 = v323;\n      while ( 1 )\n      {\n        v325 += 4;\n        v329 = v305 & (v328 + v324);\n        v330 = v303 & (v327 + v324);\n        v331 = v324 + v500;\n        v314 ^= v324 & v304;\n        v324 += 524296;\n        v326 ^= v329;\n        v312 ^= v330;\n        v313 ^= v320 & v331;\n        if ( v325 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v304 = *v325;\n        v320 = v325[1];\n        v305 = v325[2];\n        v303 = v325[3];\n      }\n      v332 = 234941184;\n      v333 = -2097117952;\n      v334 = 2063609344;\n      v335 = ((16 * v326 & 15360 * ((v564 + 16777472) & 0x40004) ^ v326) >> 8) & 0xF000F0 | (16 * v312 & 15360 * ((v580 + 16777472) & 0x40004) ^ v312) & 0xF000F000 | ((16 * v313 & 15360 * ((v548 + 16777472) & 0x40004) ^ v313) >> 4) & 0xF000F00 | ((v314 ^ 16 * v314 & 15360 * ((v532 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v336 = 16 * ((v335 ^ (v335 >> 4)) & 0x7030702) ^ (v335 ^ (v335 >> 4)) & 0x7030702 ^ v335;\n      v337 = (((v336 ^ (v336 >> 8)) & 0x4E009E) << 8) ^ (v336 ^ (v336 >> 8)) & 0x4E009E ^ v336;\n      v338 = ((unsigned __int16)((v337 ^ HIWORD(v337)) & 0xD9D3) << 16) ^ ((unsigned __int16)v337 ^ HIWORD(v337)) & 0xD9D3 ^ v337;\n      v339 = 16 * ((v338 ^ (v338 >> 4)) & 0x5040004) ^ (v338 ^ (v338 >> 4)) & 0x5040004 ^ v338;\n      v340 = 2 * ((v339 ^ (v339 >> 1)) & 0x4045015) ^ (v339 ^ (v339 >> 1)) & 0x4045015 ^ v510 ^ v339;\n      v341 = 0;\n      v511 = v340;\n      v342 = 0;\n      v343 = 0;\n      v344 = v340 ^ *(_DWORD *)(v503 - 92);\n      v345 = *(_DWORD *)(v503 - 28) ^ __ROL4__(v340, 4);\n      v346 = v345;\n      v347 = (v345 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v348 = v346 & 0xFC00FC;\n      v349 = -167733504;\n      v549 = v347;\n      v348 |= 0xFF00FF00;\n      v350 = v348;\n      v351 = v344 & 0xFC00FC | 0xFF00FF00;\n      v352 = v347 - v348;\n      v533 = v348;\n      v565 = v344 & 0xFC00FC | 0xFF00FF00;\n      v581 = (v344 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v353 = v348;\n      v354 = (signed int *)&unk_4DDE0;\n      v355 = 0;\n      v356 = v581 - v350;\n      v357 = v351 - v350;\n      while ( 1 )\n      {\n        v354 += 4;\n        v358 = v332 & (v356 + v353);\n        v343 ^= v353 & v333;\n        v359 = v353 + v352;\n        v355 ^= v334 & (v357 + v353);\n        v353 += 524296;\n        v341 ^= v358;\n        v342 ^= v349 & v359;\n        if ( v354 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v333 = *v354;\n        v349 = v354[1];\n        v334 = v354[2];\n        v332 = v354[3];\n      }\n      v360 = 234941184;\n      v361 = -2097117952;\n      v362 = 2063609344;\n      v363 = ((16 * v355 & 15360 * ((v565 + 16777472) & 0x40004) ^ v355) >> 8) & 0xF000F0 | (16 * v341 & 15360 * ((v581 + 16777472) & 0x40004) ^ v341) & 0xF000F000 | ((16 * v342 & 15360 * ((v549 + 16777472) & 0x40004) ^ v342) >> 4) & 0xF000F00 | ((v343 ^ 16 * v343 & 15360 * ((v533 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v364 = 16 * ((v363 ^ (v363 >> 4)) & 0x7030702) ^ (v363 ^ (v363 >> 4)) & 0x7030702 ^ v363;\n      v365 = (((v364 ^ (v364 >> 8)) & 0x4E009E) << 8) ^ (v364 ^ (v364 >> 8)) & 0x4E009E ^ v364;\n      v366 = ((unsigned __int16)((v365 ^ HIWORD(v365)) & 0xD9D3) << 16) ^ ((unsigned __int16)v365 ^ HIWORD(v365)) & 0xD9D3 ^ v365;\n      v367 = 16 * ((v366 ^ (v366 >> 4)) & 0x5040004) ^ (v366 ^ (v366 >> 4)) & 0x5040004 ^ v366;\n      v368 = 2 * ((v367 ^ (v367 >> 1)) & 0x4045015) ^ (v367 ^ (v367 >> 1)) & 0x4045015 ^ v519 ^ v367;\n      v369 = 0;\n      v520 = v368;\n      v370 = 0;\n      v371 = 0;\n      v372 = v368 ^ *(_DWORD *)(v503 - 88);\n      v373 = *(_DWORD *)(v503 - 24) ^ __ROL4__(v368, 4);\n      v374 = v373;\n      v375 = (v373 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v376 = v374 & 0xFC00FC;\n      v377 = -167733504;\n      v550 = v375;\n      v376 |= 0xFF00FF00;\n      v378 = v376;\n      v379 = v372 & 0xFC00FC | 0xFF00FF00;\n      v380 = v375 - v376;\n      v534 = v376;\n      v566 = v372 & 0xFC00FC | 0xFF00FF00;\n      v582 = (v372 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v381 = v376;\n      v382 = (signed int *)&unk_4DDE0;\n      v383 = 0;\n      v384 = v582 - v378;\n      v385 = v379 - v378;\n      v501 = v380;\n      while ( 1 )\n      {\n        v382 += 4;\n        v386 = v362 & (v385 + v381);\n        v387 = v360 & (v384 + v381);\n        v388 = v381 + v501;\n        v371 ^= v381 & v361;\n        v381 += 524296;\n        v383 ^= v386;\n        v369 ^= v387;\n        v370 ^= v377 & v388;\n        if ( v382 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v361 = *v382;\n        v377 = v382[1];\n        v362 = v382[2];\n        v360 = v382[3];\n      }\n      v389 = 234941184;\n      v390 = -2097117952;\n      v391 = 2063609344;\n      v392 = ((16 * v383 & 15360 * ((v566 + 16777472) & 0x40004) ^ v383) >> 8) & 0xF000F0 | (16 * v369 & 15360 * ((v582 + 16777472) & 0x40004) ^ v369) & 0xF000F000 | ((16 * v370 & 15360 * ((v550 + 16777472) & 0x40004) ^ v370) >> 4) & 0xF000F00 | ((v371 ^ 16 * v371 & 15360 * ((v534 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v393 = 16 * ((v392 ^ (v392 >> 4)) & 0x7030702) ^ (v392 ^ (v392 >> 4)) & 0x7030702 ^ v392;\n      v394 = (((v393 ^ (v393 >> 8)) & 0x4E009E) << 8) ^ (v393 ^ (v393 >> 8)) & 0x4E009E ^ v393;\n      v395 = ((unsigned __int16)((v394 ^ HIWORD(v394)) & 0xD9D3) << 16) ^ ((unsigned __int16)v394 ^ HIWORD(v394)) & 0xD9D3 ^ v394;\n      v396 = 16 * ((v395 ^ (v395 >> 4)) & 0x5040004) ^ (v395 ^ (v395 >> 4)) & 0x5040004 ^ v395;\n      v397 = 2 * ((v396 ^ (v396 >> 1)) & 0x4045015) ^ (v396 ^ (v396 >> 1)) & 0x4045015 ^ v511 ^ v396;\n      v398 = 0;\n      v512 = v397;\n      v399 = 0;\n      v400 = 0;\n      v401 = v397 ^ *(_DWORD *)(v503 - 84);\n      v402 = *(_DWORD *)(v503 - 20) ^ __ROL4__(v397, 4);\n      v403 = v402;\n      v404 = (v402 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v405 = v403 & 0xFC00FC;\n      v406 = -167733504;\n      v551 = v404;\n      v405 |= 0xFF00FF00;\n      v407 = v405;\n      v408 = v401 & 0xFC00FC | 0xFF00FF00;\n      v409 = v404 - v405;\n      v535 = v405;\n      v567 = v401 & 0xFC00FC | 0xFF00FF00;\n      v583 = (v401 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v410 = v405;\n      v411 = (signed int *)&unk_4DDE0;\n      v412 = 0;\n      v413 = v583 - v407;\n      v414 = v408 - v407;\n      while ( 1 )\n      {\n        v411 += 4;\n        v415 = v389 & (v413 + v410);\n        v400 ^= v410 & v390;\n        v416 = v410 + v409;\n        v412 ^= v391 & (v414 + v410);\n        v410 += 524296;\n        v398 ^= v415;\n        v399 ^= v406 & v416;\n        if ( v411 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v390 = *v411;\n        v406 = v411[1];\n        v391 = v411[2];\n        v389 = v411[3];\n      }\n      v417 = 234941184;\n      v418 = -2097117952;\n      v419 = 2063609344;\n      v420 = ((16 * v412 & 15360 * ((v567 + 16777472) & 0x40004) ^ v412) >> 8) & 0xF000F0 | (16 * v398 & 15360 * ((v583 + 16777472) & 0x40004) ^ v398) & 0xF000F000 | ((16 * v399 & 15360 * ((v551 + 16777472) & 0x40004) ^ v399) >> 4) & 0xF000F00 | ((v400 ^ 16 * v400 & 15360 * ((v535 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v421 = 16 * ((v420 ^ (v420 >> 4)) & 0x7030702) ^ (v420 ^ (v420 >> 4)) & 0x7030702 ^ v420;\n      v422 = (((v421 ^ (v421 >> 8)) & 0x4E009E) << 8) ^ (v421 ^ (v421 >> 8)) & 0x4E009E ^ v421;\n      v423 = ((unsigned __int16)((v422 ^ HIWORD(v422)) & 0xD9D3) << 16) ^ ((unsigned __int16)v422 ^ HIWORD(v422)) & 0xD9D3 ^ v422;\n      v424 = 16 * ((v423 ^ (v423 >> 4)) & 0x5040004) ^ (v423 ^ (v423 >> 4)) & 0x5040004 ^ v423;\n      v425 = 2 * ((v424 ^ (v424 >> 1)) & 0x4045015) ^ (v424 ^ (v424 >> 1)) & 0x4045015 ^ v520 ^ v424;\n      v426 = 0;\n      v521 = v425;\n      v427 = 0;\n      v428 = 0;\n      v429 = v425 ^ *(_DWORD *)(v503 - 80);\n      v430 = *(_DWORD *)(v503 - 16) ^ __ROL4__(v425, 4);\n      v431 = v430;\n      v432 = (v430 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v433 = v431 & 0xFC00FC;\n      v434 = -167733504;\n      v552 = v432;\n      v433 |= 0xFF00FF00;\n      v435 = v433;\n      v436 = v429 & 0xFC00FC | 0xFF00FF00;\n      v437 = v432 - v433;\n      v536 = v433;\n      v568 = v429 & 0xFC00FC | 0xFF00FF00;\n      v584 = (v429 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v438 = v433;\n      v439 = (signed int *)&unk_4DDE0;\n      v440 = 0;\n      v441 = v584 - v435;\n      v442 = v436 - v435;\n      v502 = v437;\n      while ( 1 )\n      {\n        v439 += 4;\n        v443 = v419 & (v442 + v438);\n        v444 = v417 & (v441 + v438);\n        v445 = v438 + v502;\n        v428 ^= v438 & v418;\n        v438 += 524296;\n        v440 ^= v443;\n        v426 ^= v444;\n        v427 ^= v434 & v445;\n        if ( v439 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v418 = *v439;\n        v434 = v439[1];\n        v419 = v439[2];\n        v417 = v439[3];\n      }\n      v446 = 234941184;\n      v447 = -2097117952;\n      v448 = 2063609344;\n      v449 = ((16 * v440 & 15360 * ((v568 + 16777472) & 0x40004) ^ v440) >> 8) & 0xF000F0 | (16 * v426 & 15360 * ((v584 + 16777472) & 0x40004) ^ v426) & 0xF000F000 | ((16 * v427 & 15360 * ((v552 + 16777472) & 0x40004) ^ v427) >> 4) & 0xF000F00 | ((v428 ^ 16 * v428 & 15360 * ((v536 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v450 = 16 * ((v449 ^ (v449 >> 4)) & 0x7030702) ^ (v449 ^ (v449 >> 4)) & 0x7030702 ^ v449;\n      v451 = (((v450 ^ (v450 >> 8)) & 0x4E009E) << 8) ^ (v450 ^ (v450 >> 8)) & 0x4E009E ^ v450;\n      v452 = ((unsigned __int16)((v451 ^ HIWORD(v451)) & 0xD9D3) << 16) ^ ((unsigned __int16)v451 ^ HIWORD(v451)) & 0xD9D3 ^ v451;\n      v453 = 16 * ((v452 ^ (v452 >> 4)) & 0x5040004) ^ (v452 ^ (v452 >> 4)) & 0x5040004 ^ v452;\n      v454 = 2 * ((v453 ^ (v453 >> 1)) & 0x4045015) ^ (v453 ^ (v453 >> 1)) & 0x4045015 ^ v512 ^ v453;\n      v455 = 0;\n      v513 = v454;\n      v456 = 0;\n      v457 = 0;\n      v458 = v454 ^ *(_DWORD *)(v503 - 76);\n      v459 = *(_DWORD *)(v503 - 12) ^ __ROL4__(v454, 4);\n      v460 = v459;\n      v461 = (v459 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v462 = v460 & 0xFC00FC;\n      v463 = -167733504;\n      v553 = v461;\n      v462 |= 0xFF00FF00;\n      v464 = v462;\n      v465 = v458 & 0xFC00FC | 0xFF00FF00;\n      v466 = v461 - v462;\n      v537 = v462;\n      v569 = v458 & 0xFC00FC | 0xFF00FF00;\n      v585 = (v458 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v467 = v462;\n      v468 = (signed int *)&unk_4DDE0;\n      v469 = 0;\n      v470 = v585 - v464;\n      v471 = v465 - v464;\n      while ( 1 )\n      {\n        v468 += 4;\n        v472 = v446 & (v470 + v467);\n        v457 ^= v467 & v447;\n        v473 = v467 + v466;\n        v469 ^= v448 & (v471 + v467);\n        v467 += 524296;\n        v455 ^= v472;\n        v456 ^= v463 & v473;\n        if ( v468 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v447 = *v468;\n        v463 = v468[1];\n        v448 = v468[2];\n        v446 = v468[3];\n      }\n      v474 = v504;\n      v475 = ((16 * v469 & 15360 * ((v569 + 16777472) & 0x40004) ^ v469) >> 8) & 0xF000F0 | (16 * v455 & 15360 * ((v585 + 16777472) & 0x40004) ^ v455) & 0xF000F000 | ((16 * v456 & 15360 * ((v553 + 16777472) & 0x40004) ^ v456) >> 4) & 0xF000F00 | ((v457 ^ 16 * v457 & 15360 * ((v537 + 16777472) & 0x40004u)) >> 12) & 0xF000F;\n      v476 = 16 * ((v475 ^ (v475 >> 4)) & 0x7030702) ^ (v475 ^ (v475 >> 4)) & 0x7030702 ^ v475;\n      v477 = (((v476 ^ (v476 >> 8)) & 0x4E009E) << 8) ^ (v476 ^ (v476 >> 8)) & 0x4E009E ^ v476;\n      v478 = ((unsigned __int16)((v477 ^ HIWORD(v477)) & 0xD9D3) << 16) ^ ((unsigned __int16)v477 ^ HIWORD(v477)) & 0xD9D3 ^ v477;\n      v479 = 16 * ((v478 ^ (v478 >> 4)) & 0x5040004) ^ (v478 ^ (v478 >> 4)) & 0x5040004 ^ v478;\n      v480 = __ROL4__(2 * ((v479 ^ (v479 >> 1)) & 0x4045015) ^ (v479 ^ (v479 >> 1)) & 0x4045015 ^ v521 ^ v479, 1);\n      v481 = (__ROL4__(v513, 1) ^ (v480 >> 1)) & 0x55555555;\n      v482 = v481 ^ __ROL4__(v513, 1);\n      v483 = 2 * v481 ^ v480;\n      v484 = (v483 ^ (v482 >> 8)) & 0xFF00FF;\n      v485 = v484 ^ v483;\n      v486 = v482 ^ (v484 << 8);\n      v487 = (v485 ^ ((v482 ^ (v484 << 8)) >> 2)) & 0x33333333;\n      v488 = v487 ^ v485;\n      v489 = v486 ^ 4 * v487;\n      v490 = (unsigned __int16)(v489 ^ HIWORD(v488));\n      v491 = v490 ^ v489;\n      v492 = v488 ^ (v490 << 16);\n      v493 = (v491 ^ ((v488 ^ (unsigned int)(v490 << 16)) >> 4)) & 0xF0F0F0F;\n      v4 = v493 ^ v491;\n      *(_BYTE *)(v504 + 7) = v4;\n      *(_BYTE *)(v504 + 6) = BYTE1(v4);\n      v3 = v492 ^ 16 * v493;\n      *(_BYTE *)(v504 + 3) = v492 ^ 16 * v493;\n      *(_BYTE *)(v504 + 2) = BYTE1(v3);\n      *(_BYTE *)(v504 + 1) = BYTE2(v3);\n      *(_BYTE *)v504 = (v492 ^ 16 * v493) >> 24;\n      *(_BYTE *)(v504 + 5) = BYTE2(v4);\n      v504 += 8LL;\n      *(_BYTE *)(v474 + 4) = HIBYTE(v4);\n      *(_DWORD *)(v503 - 8) = v3;\n      *(_DWORD *)(v503 - 4) = v4;\n    }\n    while ( v504 != v586 );\n  }\n}\n", 
            "funcStartAddr": "0x250f0L", 
            "funcEndAddr": "0x27286L", 
            "funcName": "sub_250F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_27290(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // eax\n  int v4; // ecx\n  int v5; // er12\n  unsigned int v6; // ebp\n  unsigned int v7; // er13\n  unsigned __int64 v8; // rax\n  signed int v9; // er9\n  signed int v10; // edi\n  signed int v11; // er11\n  unsigned int v12; // edx\n  int v13; // ecx\n  int v14; // ebx\n  signed int v15; // ecx\n  int v16; // esi\n  unsigned int v17; // er14\n  int v18; // er8\n  int v19; // edx\n  signed int *v20; // rax\n  int v21; // ebx\n  int v22; // er15\n  int v23; // er14\n  int v24; // er8\n  int v25; // esi\n  int v26; // er10\n  signed int v27; // er9\n  signed int v28; // er11\n  signed int v29; // edi\n  unsigned int v30; // eax\n  unsigned int v31; // eax\n  int v32; // eax\n  unsigned int v33; // eax\n  unsigned int v34; // eax\n  int v35; // eax\n  int v36; // er12\n  int v37; // ebp\n  unsigned int v38; // er13\n  unsigned int v39; // edx\n  unsigned int v40; // eax\n  unsigned int v41; // ecx\n  unsigned int v42; // eax\n  int v43; // ebx\n  signed int v44; // ecx\n  int v45; // esi\n  unsigned int v46; // er14\n  int v47; // er8\n  int v48; // edx\n  signed int *v49; // rax\n  int v50; // ebx\n  int v51; // er15\n  int v52; // er14\n  int v53; // er8\n  int v54; // esi\n  int v55; // er10\n  signed int v56; // er9\n  signed int v57; // er11\n  signed int v58; // edi\n  unsigned int v59; // eax\n  unsigned int v60; // eax\n  int v61; // eax\n  unsigned int v62; // eax\n  unsigned int v63; // eax\n  int v64; // eax\n  int v65; // er12\n  int v66; // ebp\n  unsigned int v67; // er13\n  unsigned int v68; // edx\n  unsigned int v69; // eax\n  unsigned int v70; // ecx\n  unsigned int v71; // eax\n  int v72; // ebx\n  signed int v73; // ecx\n  int v74; // esi\n  unsigned int v75; // er14\n  int v76; // er8\n  int v77; // edx\n  signed int *v78; // rax\n  int v79; // ebx\n  int v80; // er15\n  int v81; // er14\n  int v82; // er8\n  int v83; // esi\n  int v84; // er10\n  signed int v85; // er9\n  signed int v86; // er11\n  signed int v87; // edi\n  unsigned int v88; // eax\n  unsigned int v89; // eax\n  int v90; // eax\n  unsigned int v91; // eax\n  unsigned int v92; // eax\n  int v93; // eax\n  int v94; // er12\n  int v95; // ebp\n  unsigned int v96; // er13\n  unsigned int v97; // edx\n  unsigned int v98; // eax\n  unsigned int v99; // ecx\n  unsigned int v100; // eax\n  int v101; // ebx\n  signed int v102; // ecx\n  int v103; // esi\n  unsigned int v104; // er14\n  int v105; // er8\n  int v106; // edx\n  signed int *v107; // rax\n  int v108; // ebx\n  int v109; // er15\n  int v110; // er14\n  int v111; // er8\n  int v112; // esi\n  int v113; // er10\n  signed int v114; // er9\n  signed int v115; // er11\n  signed int v116; // edi\n  unsigned int v117; // eax\n  unsigned int v118; // eax\n  int v119; // eax\n  unsigned int v120; // eax\n  unsigned int v121; // eax\n  int v122; // eax\n  int v123; // er12\n  int v124; // ebp\n  unsigned int v125; // er13\n  unsigned int v126; // edx\n  unsigned int v127; // eax\n  unsigned int v128; // ecx\n  unsigned int v129; // eax\n  int v130; // ebx\n  signed int v131; // ecx\n  int v132; // esi\n  unsigned int v133; // er14\n  int v134; // er8\n  int v135; // edx\n  signed int *v136; // rax\n  int v137; // ebx\n  int v138; // er15\n  int v139; // er14\n  int v140; // esi\n  int v141; // er10\n  signed int v142; // er9\n  signed int v143; // er11\n  signed int v144; // edi\n  unsigned int v145; // eax\n  unsigned int v146; // eax\n  int v147; // eax\n  unsigned int v148; // eax\n  unsigned int v149; // eax\n  int v150; // eax\n  int v151; // er12\n  int v152; // ebp\n  unsigned int v153; // er13\n  unsigned int v154; // edx\n  unsigned int v155; // eax\n  unsigned int v156; // ecx\n  unsigned int v157; // eax\n  int v158; // ebx\n  signed int v159; // ecx\n  int v160; // esi\n  unsigned int v161; // er14\n  int v162; // er8\n  int v163; // edx\n  signed int *v164; // rax\n  int v165; // ebx\n  int v166; // er15\n  int v167; // er14\n  int v168; // er8\n  int v169; // esi\n  int v170; // er10\n  signed int v171; // er9\n  signed int v172; // er11\n  signed int v173; // edi\n  unsigned int v174; // eax\n  unsigned int v175; // eax\n  int v176; // eax\n  unsigned int v177; // eax\n  unsigned int v178; // eax\n  int v179; // eax\n  int v180; // er12\n  int v181; // ebp\n  unsigned int v182; // er13\n  unsigned int v183; // edx\n  unsigned int v184; // eax\n  unsigned int v185; // ecx\n  unsigned int v186; // eax\n  int v187; // ebx\n  signed int v188; // ecx\n  int v189; // esi\n  unsigned int v190; // er14\n  int v191; // er8\n  int v192; // edx\n  signed int *v193; // rax\n  int v194; // ebx\n  int v195; // er15\n  int v196; // er14\n  int v197; // esi\n  int v198; // er10\n  signed int v199; // er9\n  signed int v200; // er11\n  signed int v201; // edi\n  unsigned int v202; // eax\n  unsigned int v203; // eax\n  int v204; // eax\n  unsigned int v205; // eax\n  unsigned int v206; // eax\n  int v207; // eax\n  int v208; // er12\n  int v209; // ebp\n  unsigned int v210; // er13\n  unsigned int v211; // edx\n  unsigned int v212; // eax\n  unsigned int v213; // ecx\n  unsigned int v214; // eax\n  int v215; // ebx\n  signed int v216; // ecx\n  int v217; // esi\n  unsigned int v218; // er14\n  int v219; // er8\n  int v220; // edx\n  signed int *v221; // rax\n  int v222; // ebx\n  int v223; // er15\n  int v224; // er14\n  int v225; // er8\n  int v226; // esi\n  int v227; // er10\n  signed int v228; // er9\n  signed int v229; // er11\n  signed int v230; // edi\n  unsigned int v231; // eax\n  unsigned int v232; // eax\n  int v233; // eax\n  unsigned int v234; // eax\n  unsigned int v235; // eax\n  int v236; // eax\n  int v237; // er12\n  int v238; // ebp\n  unsigned int v239; // er13\n  unsigned int v240; // edx\n  unsigned int v241; // eax\n  unsigned int v242; // ecx\n  unsigned int v243; // eax\n  int v244; // ebx\n  signed int v245; // ecx\n  int v246; // esi\n  unsigned int v247; // er14\n  int v248; // er8\n  int v249; // edx\n  signed int *v250; // rax\n  int v251; // ebx\n  int v252; // er15\n  int v253; // er14\n  int v254; // esi\n  int v255; // er10\n  signed int v256; // er9\n  signed int v257; // er11\n  signed int v258; // edi\n  unsigned int v259; // eax\n  unsigned int v260; // eax\n  int v261; // eax\n  unsigned int v262; // eax\n  unsigned int v263; // eax\n  int v264; // eax\n  int v265; // er12\n  int v266; // ebp\n  unsigned int v267; // er13\n  unsigned int v268; // edx\n  unsigned int v269; // eax\n  unsigned int v270; // ecx\n  unsigned int v271; // eax\n  int v272; // ebx\n  signed int v273; // ecx\n  int v274; // esi\n  unsigned int v275; // er14\n  int v276; // er8\n  int v277; // edx\n  signed int *v278; // rax\n  int v279; // ebx\n  int v280; // er15\n  int v281; // er14\n  int v282; // er8\n  int v283; // esi\n  int v284; // er10\n  signed int v285; // er9\n  signed int v286; // er11\n  signed int v287; // edi\n  unsigned int v288; // eax\n  unsigned int v289; // eax\n  int v290; // eax\n  unsigned int v291; // eax\n  unsigned int v292; // eax\n  int v293; // eax\n  int v294; // er12\n  int v295; // ebp\n  unsigned int v296; // er13\n  unsigned int v297; // edx\n  unsigned int v298; // eax\n  unsigned int v299; // ecx\n  unsigned int v300; // eax\n  int v301; // ebx\n  signed int v302; // ecx\n  int v303; // esi\n  unsigned int v304; // er14\n  int v305; // er8\n  int v306; // edx\n  signed int *v307; // rax\n  int v308; // ebx\n  int v309; // er15\n  int v310; // er14\n  int v311; // esi\n  int v312; // er10\n  signed int v313; // er9\n  signed int v314; // er11\n  signed int v315; // edi\n  unsigned int v316; // eax\n  unsigned int v317; // eax\n  int v318; // eax\n  unsigned int v319; // eax\n  unsigned int v320; // eax\n  int v321; // eax\n  int v322; // er12\n  int v323; // ebp\n  unsigned int v324; // er13\n  unsigned int v325; // edx\n  unsigned int v326; // eax\n  unsigned int v327; // ecx\n  unsigned int v328; // eax\n  int v329; // ebx\n  signed int v330; // ecx\n  int v331; // esi\n  unsigned int v332; // er14\n  int v333; // er8\n  int v334; // edx\n  signed int *v335; // rax\n  int v336; // ebx\n  int v337; // er15\n  int v338; // er14\n  int v339; // er8\n  int v340; // esi\n  int v341; // er10\n  signed int v342; // er9\n  signed int v343; // er11\n  signed int v344; // edi\n  unsigned int v345; // eax\n  unsigned int v346; // eax\n  int v347; // eax\n  unsigned int v348; // eax\n  unsigned int v349; // eax\n  int v350; // eax\n  int v351; // er12\n  int v352; // ebp\n  unsigned int v353; // er13\n  unsigned int v354; // edx\n  unsigned int v355; // eax\n  unsigned int v356; // ecx\n  unsigned int v357; // eax\n  int v358; // ebx\n  signed int v359; // ecx\n  int v360; // esi\n  unsigned int v361; // er14\n  int v362; // er8\n  int v363; // edx\n  signed int *v364; // rax\n  int v365; // ebx\n  int v366; // er15\n  int v367; // er14\n  int v368; // esi\n  int v369; // er10\n  signed int v370; // er9\n  signed int v371; // er11\n  signed int v372; // edi\n  unsigned int v373; // eax\n  unsigned int v374; // eax\n  int v375; // eax\n  unsigned int v376; // eax\n  unsigned int v377; // eax\n  int v378; // eax\n  int v379; // er12\n  int v380; // ebp\n  unsigned int v381; // er13\n  unsigned int v382; // edx\n  unsigned int v383; // eax\n  unsigned int v384; // ecx\n  unsigned int v385; // eax\n  int v386; // ebx\n  signed int v387; // ecx\n  int v388; // esi\n  unsigned int v389; // er14\n  int v390; // er8\n  int v391; // edx\n  signed int *v392; // rax\n  int v393; // ebx\n  int v394; // er15\n  int v395; // er14\n  int v396; // er8\n  int v397; // esi\n  int v398; // er10\n  signed int v399; // er9\n  signed int v400; // er11\n  signed int v401; // edi\n  unsigned int v402; // eax\n  unsigned int v403; // eax\n  int v404; // eax\n  unsigned int v405; // eax\n  unsigned int v406; // eax\n  int v407; // eax\n  int v408; // er12\n  int v409; // ebp\n  unsigned int v410; // er13\n  unsigned int v411; // edx\n  unsigned int v412; // eax\n  unsigned int v413; // ecx\n  unsigned int v414; // eax\n  int v415; // ebx\n  signed int v416; // ecx\n  int v417; // esi\n  unsigned int v418; // er14\n  int v419; // er8\n  int v420; // edx\n  signed int *v421; // rax\n  int v422; // ebx\n  int v423; // er15\n  int v424; // er14\n  int v425; // esi\n  int v426; // er10\n  signed int v427; // er9\n  signed int v428; // er11\n  signed int v429; // edi\n  unsigned int v430; // eax\n  unsigned int v431; // eax\n  int v432; // eax\n  unsigned int v433; // eax\n  unsigned int v434; // eax\n  int v435; // eax\n  int v436; // er12\n  int v437; // ebp\n  unsigned int v438; // er13\n  unsigned int v439; // edx\n  unsigned int v440; // eax\n  unsigned int v441; // ecx\n  unsigned int v442; // eax\n  int v443; // ebx\n  signed int v444; // ecx\n  int v445; // esi\n  unsigned int v446; // er14\n  int v447; // er8\n  int v448; // edx\n  signed int *v449; // rax\n  int v450; // ebx\n  int v451; // er15\n  int v452; // er14\n  int v453; // er8\n  int v454; // esi\n  int v455; // er10\n  unsigned int v456; // eax\n  int v457; // edx\n  unsigned int v458; // eax\n  unsigned int v459; // eax\n  unsigned int v460; // eax\n  int v461; // er12\n  unsigned int v462; // ebp\n  unsigned __int64 v463; // rax\n  signed int v464; // er9\n  signed int v465; // edi\n  signed int v466; // er11\n  unsigned int v467; // er13\n  unsigned int v468; // edx\n  int v469; // ecx\n  int v470; // ebx\n  signed int v471; // ecx\n  int v472; // esi\n  unsigned int v473; // er14\n  int v474; // er8\n  int v475; // edx\n  signed int *v476; // rax\n  int v477; // ebx\n  int v478; // er15\n  int v479; // er14\n  int v480; // esi\n  int v481; // er10\n  __int64 v482; // r14\n  unsigned int v483; // eax\n  unsigned int v484; // eax\n  int v485; // eax\n  unsigned int v486; // eax\n  unsigned int v487; // eax\n  int v488; // ebx\n  int v489; // er12\n  unsigned int v490; // er13\n  int v491; // ebp\n  int v492; // ebx\n  int v493; // ebp\n  int v494; // ebp\n  signed int v495; // er9\n  signed int v496; // edi\n  unsigned int v497; // eax\n  signed int v498; // er11\n  unsigned int v499; // edx\n  int v500; // ebp\n  unsigned int v501; // ecx\n  unsigned int v502; // eax\n  int v503; // ebx\n  signed int v504; // ecx\n  int v505; // esi\n  int v506; // er8\n  int v507; // edx\n  signed int *v508; // rax\n  int v509; // ebx\n  int v510; // er15\n  int v511; // er14\n  int v512; // er8\n  int v513; // esi\n  int v514; // er10\n  signed int v515; // er9\n  signed int v516; // er11\n  signed int v517; // edi\n  unsigned int v518; // eax\n  unsigned int v519; // eax\n  int v520; // eax\n  unsigned int v521; // eax\n  unsigned int v522; // eax\n  int v523; // eax\n  int v524; // er12\n  int v525; // ebp\n  unsigned int v526; // er13\n  unsigned int v527; // edx\n  unsigned int v528; // eax\n  unsigned int v529; // ecx\n  unsigned int v530; // eax\n  int v531; // ebx\n  signed int v532; // ecx\n  int v533; // esi\n  unsigned int v534; // er14\n  int v535; // er8\n  int v536; // edx\n  signed int *v537; // rax\n  int v538; // ebx\n  int v539; // er15\n  int v540; // er14\n  int v541; // esi\n  int v542; // er10\n  signed int v543; // er9\n  signed int v544; // er11\n  signed int v545; // edi\n  unsigned int v546; // eax\n  unsigned int v547; // eax\n  int v548; // eax\n  unsigned int v549; // eax\n  unsigned int v550; // eax\n  int v551; // eax\n  int v552; // er12\n  int v553; // ebp\n  unsigned int v554; // er13\n  unsigned int v555; // edx\n  unsigned int v556; // eax\n  unsigned int v557; // ecx\n  unsigned int v558; // eax\n  int v559; // ebx\n  signed int v560; // ecx\n  int v561; // esi\n  unsigned int v562; // er14\n  int v563; // er8\n  int v564; // edx\n  signed int *v565; // rax\n  int v566; // ebx\n  int v567; // er15\n  int v568; // er14\n  int v569; // er8\n  int v570; // esi\n  int v571; // er10\n  signed int v572; // er9\n  signed int v573; // er11\n  signed int v574; // edi\n  unsigned int v575; // eax\n  unsigned int v576; // eax\n  int v577; // eax\n  unsigned int v578; // eax\n  unsigned int v579; // eax\n  int v580; // eax\n  int v581; // er12\n  int v582; // ebp\n  unsigned int v583; // er13\n  unsigned int v584; // edx\n  unsigned int v585; // eax\n  unsigned int v586; // ecx\n  unsigned int v587; // eax\n  int v588; // ebx\n  signed int v589; // ecx\n  int v590; // esi\n  unsigned int v591; // er14\n  int v592; // er8\n  int v593; // edx\n  signed int *v594; // rax\n  int v595; // ebx\n  int v596; // er15\n  int v597; // er14\n  int v598; // esi\n  int v599; // er10\n  signed int v600; // er9\n  signed int v601; // er11\n  signed int v602; // edi\n  unsigned int v603; // eax\n  unsigned int v604; // eax\n  int v605; // eax\n  unsigned int v606; // eax\n  unsigned int v607; // eax\n  int v608; // eax\n  int v609; // er12\n  int v610; // ebp\n  unsigned int v611; // er13\n  unsigned int v612; // edx\n  unsigned int v613; // eax\n  unsigned int v614; // ecx\n  unsigned int v615; // eax\n  int v616; // ebx\n  signed int v617; // ecx\n  int v618; // esi\n  unsigned int v619; // er14\n  int v620; // er8\n  int v621; // edx\n  signed int *v622; // rax\n  int v623; // ebx\n  int v624; // er15\n  int v625; // er14\n  int v626; // er8\n  int v627; // esi\n  int v628; // er10\n  signed int v629; // er9\n  signed int v630; // er11\n  signed int v631; // edi\n  unsigned int v632; // eax\n  unsigned int v633; // eax\n  int v634; // eax\n  unsigned int v635; // eax\n  unsigned int v636; // eax\n  int v637; // eax\n  int v638; // er12\n  int v639; // ebp\n  unsigned int v640; // er13\n  unsigned int v641; // edx\n  unsigned int v642; // eax\n  unsigned int v643; // ecx\n  unsigned int v644; // eax\n  int v645; // ebx\n  signed int v646; // ecx\n  int v647; // esi\n  unsigned int v648; // er14\n  int v649; // er8\n  int v650; // edx\n  signed int *v651; // rax\n  int v652; // ebx\n  int v653; // er15\n  int v654; // er14\n  int v655; // esi\n  int v656; // er10\n  signed int v657; // er9\n  signed int v658; // er11\n  signed int v659; // edi\n  unsigned int v660; // eax\n  unsigned int v661; // eax\n  int v662; // eax\n  unsigned int v663; // eax\n  unsigned int v664; // eax\n  int v665; // eax\n  int v666; // er12\n  int v667; // ebp\n  unsigned int v668; // er13\n  unsigned int v669; // edx\n  unsigned int v670; // eax\n  unsigned int v671; // ecx\n  unsigned int v672; // eax\n  int v673; // ebx\n  signed int v674; // ecx\n  int v675; // esi\n  unsigned int v676; // er14\n  int v677; // er8\n  int v678; // edx\n  signed int *v679; // rax\n  int v680; // ebx\n  int v681; // er15\n  int v682; // er14\n  int v683; // er8\n  int v684; // esi\n  int v685; // er10\n  signed int v686; // er9\n  signed int v687; // er11\n  signed int v688; // edi\n  unsigned int v689; // eax\n  unsigned int v690; // eax\n  int v691; // eax\n  unsigned int v692; // eax\n  unsigned int v693; // eax\n  int v694; // eax\n  int v695; // er12\n  int v696; // ebp\n  unsigned int v697; // er13\n  unsigned int v698; // edx\n  unsigned int v699; // eax\n  unsigned int v700; // ecx\n  unsigned int v701; // eax\n  int v702; // ebx\n  signed int v703; // ecx\n  int v704; // esi\n  unsigned int v705; // er14\n  int v706; // er8\n  int v707; // edx\n  signed int *v708; // rax\n  int v709; // ebx\n  int v710; // er15\n  int v711; // er14\n  int v712; // esi\n  int v713; // er10\n  signed int v714; // er9\n  signed int v715; // er11\n  signed int v716; // edi\n  unsigned int v717; // eax\n  unsigned int v718; // eax\n  int v719; // eax\n  unsigned int v720; // eax\n  unsigned int v721; // eax\n  int v722; // eax\n  int v723; // er12\n  int v724; // ebp\n  unsigned int v725; // er13\n  unsigned int v726; // edx\n  unsigned int v727; // eax\n  unsigned int v728; // ecx\n  unsigned int v729; // eax\n  int v730; // ebx\n  signed int v731; // ecx\n  int v732; // esi\n  unsigned int v733; // er14\n  int v734; // er8\n  int v735; // edx\n  signed int *v736; // rax\n  int v737; // ebx\n  int v738; // er15\n  int v739; // er14\n  int v740; // er8\n  int v741; // esi\n  int v742; // er10\n  signed int v743; // er9\n  signed int v744; // er11\n  signed int v745; // edi\n  unsigned int v746; // eax\n  unsigned int v747; // eax\n  int v748; // eax\n  unsigned int v749; // eax\n  unsigned int v750; // eax\n  int v751; // eax\n  int v752; // er12\n  int v753; // ebp\n  unsigned int v754; // er13\n  unsigned int v755; // edx\n  unsigned int v756; // eax\n  unsigned int v757; // ecx\n  unsigned int v758; // eax\n  int v759; // ebx\n  signed int v760; // ecx\n  int v761; // esi\n  unsigned int v762; // er14\n  int v763; // er8\n  int v764; // edx\n  signed int *v765; // rax\n  int v766; // ebx\n  int v767; // er15\n  int v768; // er14\n  int v769; // esi\n  int v770; // er10\n  unsigned int v771; // eax\n  int v772; // edx\n  unsigned int v773; // eax\n  unsigned int v774; // eax\n  unsigned int v775; // eax\n  unsigned int v776; // eax\n  int v777; // esi\n  int v778; // eax\n  unsigned int v779; // edx\n  int v780; // eax\n  unsigned int v781; // esi\n  int v782; // edx\n  int v783; // eax\n  int v784; // ecx\n  int v785; // edx\n  int v786; // ecx\n  unsigned int v787; // eax\n  int v788; // edx\n  __int64 v789; // rdi\n  int v790; // [rsp+4h] [rbp-74h]\n  int v791; // [rsp+4h] [rbp-74h]\n  int v792; // [rsp+4h] [rbp-74h]\n  int v793; // [rsp+4h] [rbp-74h]\n  int v794; // [rsp+4h] [rbp-74h]\n  int v795; // [rsp+4h] [rbp-74h]\n  int v796; // [rsp+4h] [rbp-74h]\n  int v797; // [rsp+4h] [rbp-74h]\n  int v798; // [rsp+4h] [rbp-74h]\n  int v799; // [rsp+4h] [rbp-74h]\n  int v800; // [rsp+4h] [rbp-74h]\n  int v801; // [rsp+4h] [rbp-74h]\n  int v802; // [rsp+4h] [rbp-74h]\n  int v803; // [rsp+4h] [rbp-74h]\n  int v804; // [rsp+4h] [rbp-74h]\n  __int64 v805; // [rsp+8h] [rbp-70h]\n  __int64 v806; // [rsp+10h] [rbp-68h]\n  __int64 v807; // [rsp+18h] [rbp-60h]\n  int v808; // [rsp+18h] [rbp-60h]\n  int v809; // [rsp+18h] [rbp-60h]\n  int v810; // [rsp+18h] [rbp-60h]\n  int v811; // [rsp+18h] [rbp-60h]\n  int v812; // [rsp+18h] [rbp-60h]\n  int v813; // [rsp+18h] [rbp-60h]\n  int v814; // [rsp+18h] [rbp-60h]\n  int v815; // [rsp+18h] [rbp-60h]\n  int v816; // [rsp+18h] [rbp-60h]\n  int v817; // [rsp+18h] [rbp-60h]\n  int v818; // [rsp+18h] [rbp-60h]\n  int v819; // [rsp+18h] [rbp-60h]\n  int v820; // [rsp+18h] [rbp-60h]\n  int v821; // [rsp+18h] [rbp-60h]\n  int v822; // [rsp+18h] [rbp-60h]\n  int v823; // [rsp+20h] [rbp-58h]\n  int v824; // [rsp+20h] [rbp-58h]\n  int v825; // [rsp+20h] [rbp-58h]\n  int v826; // [rsp+20h] [rbp-58h]\n  int v827; // [rsp+20h] [rbp-58h]\n  int v828; // [rsp+20h] [rbp-58h]\n  int v829; // [rsp+20h] [rbp-58h]\n  int v830; // [rsp+20h] [rbp-58h]\n  int v831; // [rsp+20h] [rbp-58h]\n  int v832; // [rsp+20h] [rbp-58h]\n  int v833; // [rsp+20h] [rbp-58h]\n  int v834; // [rsp+20h] [rbp-58h]\n  int v835; // [rsp+20h] [rbp-58h]\n  int v836; // [rsp+20h] [rbp-58h]\n  int v837; // [rsp+20h] [rbp-58h]\n  int v838; // [rsp+24h] [rbp-54h]\n  unsigned int v839; // [rsp+24h] [rbp-54h]\n  int v840; // [rsp+24h] [rbp-54h]\n  int v841; // [rsp+24h] [rbp-54h]\n  int v842; // [rsp+24h] [rbp-54h]\n  int v843; // [rsp+24h] [rbp-54h]\n  int v844; // [rsp+24h] [rbp-54h]\n  int v845; // [rsp+24h] [rbp-54h]\n  int v846; // [rsp+24h] [rbp-54h]\n  int v847; // [rsp+24h] [rbp-54h]\n  int v848; // [rsp+24h] [rbp-54h]\n  int v849; // [rsp+24h] [rbp-54h]\n  int v850; // [rsp+24h] [rbp-54h]\n  int v851; // [rsp+24h] [rbp-54h]\n  int v852; // [rsp+24h] [rbp-54h]\n  int v853; // [rsp+24h] [rbp-54h]\n  int v854; // [rsp+24h] [rbp-54h]\n  int v855; // [rsp+24h] [rbp-54h]\n  int v856; // [rsp+24h] [rbp-54h]\n  int v857; // [rsp+24h] [rbp-54h]\n  int v858; // [rsp+24h] [rbp-54h]\n  int v859; // [rsp+24h] [rbp-54h]\n  int v860; // [rsp+24h] [rbp-54h]\n  int v861; // [rsp+24h] [rbp-54h]\n  int v862; // [rsp+24h] [rbp-54h]\n  int v863; // [rsp+24h] [rbp-54h]\n  int v864; // [rsp+24h] [rbp-54h]\n  unsigned int v865; // [rsp+28h] [rbp-50h]\n  unsigned int v866; // [rsp+28h] [rbp-50h]\n  unsigned int v867; // [rsp+28h] [rbp-50h]\n  unsigned int v868; // [rsp+28h] [rbp-50h]\n  unsigned int v869; // [rsp+28h] [rbp-50h]\n  unsigned int v870; // [rsp+28h] [rbp-50h]\n  unsigned int v871; // [rsp+28h] [rbp-50h]\n  unsigned int v872; // [rsp+28h] [rbp-50h]\n  unsigned int v873; // [rsp+28h] [rbp-50h]\n  unsigned int v874; // [rsp+28h] [rbp-50h]\n  unsigned int v875; // [rsp+28h] [rbp-50h]\n  unsigned int v876; // [rsp+28h] [rbp-50h]\n  unsigned int v877; // [rsp+28h] [rbp-50h]\n  unsigned int v878; // [rsp+28h] [rbp-50h]\n  unsigned int v879; // [rsp+28h] [rbp-50h]\n  unsigned int v880; // [rsp+28h] [rbp-50h]\n  unsigned int v881; // [rsp+28h] [rbp-50h]\n  unsigned int v882; // [rsp+28h] [rbp-50h]\n  unsigned int v883; // [rsp+28h] [rbp-50h]\n  unsigned int v884; // [rsp+28h] [rbp-50h]\n  unsigned int v885; // [rsp+28h] [rbp-50h]\n  unsigned int v886; // [rsp+28h] [rbp-50h]\n  unsigned int v887; // [rsp+28h] [rbp-50h]\n  unsigned int v888; // [rsp+28h] [rbp-50h]\n  unsigned int v889; // [rsp+28h] [rbp-50h]\n  unsigned int v890; // [rsp+28h] [rbp-50h]\n  unsigned int v891; // [rsp+28h] [rbp-50h]\n  unsigned int v892; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v893; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v894; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v895; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v896; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v897; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v898; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v899; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v900; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v901; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v902; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v903; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v904; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v905; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v906; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v907; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v908; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v909; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v910; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v911; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v912; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v913; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v914; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v915; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v916; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v917; // [rsp+2Ch] [rbp-4Ch]\n  unsigned int v918; // [rsp+2Ch] [rbp-4Ch]\n  int v919; // [rsp+30h] [rbp-48h]\n  unsigned int v920; // [rsp+30h] [rbp-48h]\n  unsigned int v921; // [rsp+30h] [rbp-48h]\n  unsigned int v922; // [rsp+30h] [rbp-48h]\n  unsigned int v923; // [rsp+30h] [rbp-48h]\n  unsigned int v924; // [rsp+30h] [rbp-48h]\n  unsigned int v925; // [rsp+30h] [rbp-48h]\n  unsigned int v926; // [rsp+30h] [rbp-48h]\n  unsigned int v927; // [rsp+30h] [rbp-48h]\n  unsigned int v928; // [rsp+30h] [rbp-48h]\n  unsigned int v929; // [rsp+30h] [rbp-48h]\n  unsigned int v930; // [rsp+30h] [rbp-48h]\n  unsigned int v931; // [rsp+30h] [rbp-48h]\n  unsigned int v932; // [rsp+30h] [rbp-48h]\n  unsigned int v933; // [rsp+30h] [rbp-48h]\n  int v934; // [rsp+30h] [rbp-48h]\n  unsigned int v935; // [rsp+30h] [rbp-48h]\n  unsigned int v936; // [rsp+30h] [rbp-48h]\n  unsigned int v937; // [rsp+30h] [rbp-48h]\n  unsigned int v938; // [rsp+30h] [rbp-48h]\n  unsigned int v939; // [rsp+30h] [rbp-48h]\n  unsigned int v940; // [rsp+30h] [rbp-48h]\n  unsigned int v941; // [rsp+30h] [rbp-48h]\n  unsigned int v942; // [rsp+30h] [rbp-48h]\n  unsigned int v943; // [rsp+30h] [rbp-48h]\n  unsigned int v944; // [rsp+30h] [rbp-48h]\n  signed __int64 v945; // [rsp+38h] [rbp-40h]\n  __int64 v946; // [rsp+40h] [rbp-38h]\n\n  v805 = a1;\n  v806 = a2;\n  if ( a3 > 0 )\n  {\n    v3 = *(_DWORD *)(a1 - 8);\n    v4 = *(_DWORD *)(a1 - 4);\n    v946 = a1 - 264;\n    v945 = a2 + 8LL * ((unsigned int)(a3 - 1) >> 3) + 8;\n    do\n    {\n      v5 = 0;\n      v6 = 0;\n      v7 = 0;\n      v8 = sub_22860(((unsigned __int64)(_byteswap_ulong(*(_DWORD *)(v806 + 4)) ^ v4) << 32) | _byteswap_ulong(*(_DWORD *)v806) ^ v3);\n      v808 = v8;\n      v8 >>= 32;\n      v919 = v8;\n      v9 = 234941184;\n      v10 = 2063609344;\n      v11 = -2097117952;\n      v12 = v8 ^ *(_DWORD *)(v805 - 392);\n      LODWORD(v8) = *(_DWORD *)(v805 - 328) ^ __ROL4__(v8, 4);\n      v13 = v8;\n      LODWORD(v8) = ((unsigned int)v8 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v14 = v13 & 0xFC00FC;\n      v15 = -167733504;\n      v838 = v8;\n      v14 |= 0xFF00FF00;\n      v16 = v14;\n      v17 = v12 & 0xFC00FC | 0xFF00FF00;\n      v18 = v8 - v14;\n      v823 = v14;\n      v865 = v12 & 0xFC00FC | 0xFF00FF00;\n      v892 = (v12 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v19 = v14;\n      v20 = (signed int *)&unk_4DDE0;\n      v21 = 0;\n      v22 = v892 - v16;\n      v23 = v17 - v16;\n      v790 = v18;\n      while ( 1 )\n      {\n        v20 += 4;\n        v24 = v10 & (v23 + v19);\n        v25 = v9 & (v22 + v19);\n        v26 = v19 + v790;\n        v7 ^= v19 & v11;\n        v19 += 524296;\n        v21 ^= v24;\n        v5 ^= v25;\n        v6 ^= v15 & v26;\n        if ( v20 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v11 = *v20;\n        v15 = v20[1];\n        v10 = v20[2];\n        v9 = v20[3];\n      }\n      v27 = 234941184;\n      v28 = -2097117952;\n      v29 = 2063609344;\n      v30 = ((16 * v21 & 15360 * ((v865 + 16777472) & 0x40004) ^ v21) >> 8) & 0xF000F0 | (16 * v5 & 15360 * ((v892 + 16777472) & 0x40004) ^ v5) & 0xF000F000 | ((16 * v6 & 15360 * ((v838 + 16777472) & 0x40004) ^ v6) >> 4) & 0xF000F00 | ((16 * v7 & 15360 * ((v823 + 16777472) & 0x40004) ^ v7) >> 12) & 0xF000F;\n      v31 = 16 * ((v30 ^ (v30 >> 4)) & 0x7030702) ^ (v30 ^ (v30 >> 4)) & 0x7030702 ^ v30;\n      v32 = (((v31 ^ (v31 >> 8)) & 0x4E009E) << 8) ^ (v31 ^ (v31 >> 8)) & 0x4E009E ^ v31;\n      v33 = ((unsigned __int16)((v32 ^ HIWORD(v32)) & 0xD9D3) << 16) ^ ((unsigned __int16)v32 ^ HIWORD(v32)) & 0xD9D3 ^ v32;\n      v34 = 16 * ((v33 ^ (v33 >> 4)) & 0x5040004) ^ (v33 ^ (v33 >> 4)) & 0x5040004 ^ v33;\n      v35 = 2 * ((v34 ^ (v34 >> 1)) & 0x4045015) ^ (v34 ^ (v34 >> 1)) & 0x4045015 ^ v808 ^ v34;\n      v36 = 0;\n      v809 = v35;\n      v37 = 0;\n      v38 = 0;\n      v39 = v35 ^ *(_DWORD *)(v805 - 388);\n      v40 = *(_DWORD *)(v805 - 324) ^ __ROL4__(v35, 4);\n      v41 = v40;\n      v42 = (v40 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v43 = v41 & 0xFC00FC;\n      v44 = -167733504;\n      v839 = v42;\n      v43 |= 0xFF00FF00;\n      v45 = v43;\n      v46 = v39 & 0xFC00FC | 0xFF00FF00;\n      v47 = v42 - v43;\n      v824 = v43;\n      v866 = v39 & 0xFC00FC | 0xFF00FF00;\n      v893 = (v39 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v48 = v43;\n      v49 = (signed int *)&unk_4DDE0;\n      v50 = 0;\n      v51 = v893 - v45;\n      v52 = v46 - v45;\n      v791 = v47;\n      while ( 1 )\n      {\n        v49 += 4;\n        v53 = v29 & (v52 + v48);\n        v54 = v27 & (v51 + v48);\n        v55 = v48 + v791;\n        v38 ^= v48 & v28;\n        v48 += 524296;\n        v50 ^= v53;\n        v36 ^= v54;\n        v37 ^= v44 & v55;\n        if ( v49 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v28 = *v49;\n        v44 = v49[1];\n        v29 = v49[2];\n        v27 = v49[3];\n      }\n      v56 = 234941184;\n      v57 = -2097117952;\n      v58 = 2063609344;\n      v59 = ((16 * v50 & 15360 * ((v866 + 16777472) & 0x40004) ^ v50) >> 8) & 0xF000F0 | (16 * v36 & 15360 * ((v893 + 16777472) & 0x40004) ^ v36) & 0xF000F000 | ((16 * v37 & 15360 * ((v839 + 16777472) & 0x40004) ^ v37) >> 4) & 0xF000F00 | ((16 * v38 & 15360 * ((v824 + 16777472) & 0x40004) ^ v38) >> 12) & 0xF000F;\n      v60 = 16 * ((v59 ^ (v59 >> 4)) & 0x7030702) ^ (v59 ^ (v59 >> 4)) & 0x7030702 ^ v59;\n      v61 = (((v60 ^ (v60 >> 8)) & 0x4E009E) << 8) ^ (v60 ^ (v60 >> 8)) & 0x4E009E ^ v60;\n      v62 = ((unsigned __int16)((v61 ^ HIWORD(v61)) & 0xD9D3) << 16) ^ ((unsigned __int16)v61 ^ HIWORD(v61)) & 0xD9D3 ^ v61;\n      v63 = 16 * ((v62 ^ (v62 >> 4)) & 0x5040004) ^ (v62 ^ (v62 >> 4)) & 0x5040004 ^ v62;\n      v64 = 2 * ((v63 ^ (v63 >> 1)) & 0x4045015) ^ (v63 ^ (v63 >> 1)) & 0x4045015 ^ v919 ^ v63;\n      v65 = 0;\n      v825 = v64;\n      v66 = 0;\n      v67 = 0;\n      v68 = v64 ^ *(_DWORD *)(v805 - 384);\n      v69 = *(_DWORD *)(v805 - 320) ^ __ROL4__(v64, 4);\n      v70 = v69;\n      v71 = (v69 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v72 = v70 & 0xFC00FC;\n      v73 = -167733504;\n      v867 = v71;\n      v72 |= 0xFF00FF00;\n      v74 = v72;\n      v75 = v68 & 0xFC00FC | 0xFF00FF00;\n      v76 = v71 - v72;\n      v840 = v72;\n      v894 = v68 & 0xFC00FC | 0xFF00FF00;\n      v920 = (v68 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v77 = v72;\n      v78 = (signed int *)&unk_4DDE0;\n      v79 = 0;\n      v80 = v920 - v74;\n      v81 = v75 - v74;\n      v792 = v76;\n      while ( 1 )\n      {\n        v78 += 4;\n        v82 = v58 & (v81 + v77);\n        v83 = v56 & (v80 + v77);\n        v84 = v77 + v792;\n        v67 ^= v77 & v57;\n        v77 += 524296;\n        v79 ^= v82;\n        v65 ^= v83;\n        v66 ^= v73 & v84;\n        if ( v78 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v57 = *v78;\n        v73 = v78[1];\n        v58 = v78[2];\n        v56 = v78[3];\n      }\n      v85 = 234941184;\n      v86 = -2097117952;\n      v87 = 2063609344;\n      v88 = ((16 * v79 & 15360 * ((v894 + 16777472) & 0x40004) ^ v79) >> 8) & 0xF000F0 | (16 * v65 & 15360 * ((v920 + 16777472) & 0x40004) ^ v65) & 0xF000F000 | ((16 * v66 & 15360 * ((v867 + 16777472) & 0x40004) ^ v66) >> 4) & 0xF000F00 | ((16 * v67 & 15360 * ((v840 + 16777472) & 0x40004) ^ v67) >> 12) & 0xF000F;\n      v89 = 16 * ((v88 ^ (v88 >> 4)) & 0x7030702) ^ (v88 ^ (v88 >> 4)) & 0x7030702 ^ v88;\n      v90 = (((v89 ^ (v89 >> 8)) & 0x4E009E) << 8) ^ (v89 ^ (v89 >> 8)) & 0x4E009E ^ v89;\n      v91 = ((unsigned __int16)((v90 ^ HIWORD(v90)) & 0xD9D3) << 16) ^ ((unsigned __int16)v90 ^ HIWORD(v90)) & 0xD9D3 ^ v90;\n      v92 = 16 * ((v91 ^ (v91 >> 4)) & 0x5040004) ^ (v91 ^ (v91 >> 4)) & 0x5040004 ^ v91;\n      v93 = 2 * ((v92 ^ (v92 >> 1)) & 0x4045015) ^ (v92 ^ (v92 >> 1)) & 0x4045015 ^ v809 ^ v92;\n      v94 = 0;\n      v810 = v93;\n      v95 = 0;\n      v96 = 0;\n      v97 = v93 ^ *(_DWORD *)(v805 - 380);\n      v98 = *(_DWORD *)(v805 - 316) ^ __ROL4__(v93, 4);\n      v99 = v98;\n      v100 = (v98 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v101 = v99 & 0xFC00FC;\n      v102 = -167733504;\n      v868 = v100;\n      v101 |= 0xFF00FF00;\n      v103 = v101;\n      v104 = v97 & 0xFC00FC | 0xFF00FF00;\n      v105 = v100 - v101;\n      v841 = v101;\n      v895 = v97 & 0xFC00FC | 0xFF00FF00;\n      v921 = (v97 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v106 = v101;\n      v107 = (signed int *)&unk_4DDE0;\n      v108 = 0;\n      v109 = v921 - v103;\n      v110 = v104 - v103;\n      v793 = v105;\n      while ( 1 )\n      {\n        v107 += 4;\n        v111 = v87 & (v110 + v106);\n        v112 = v85 & (v109 + v106);\n        v113 = v106 + v793;\n        v96 ^= v106 & v86;\n        v106 += 524296;\n        v108 ^= v111;\n        v94 ^= v112;\n        v95 ^= v102 & v113;\n        if ( v107 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v86 = *v107;\n        v102 = v107[1];\n        v87 = v107[2];\n        v85 = v107[3];\n      }\n      v114 = 234941184;\n      v115 = -2097117952;\n      v116 = 2063609344;\n      v117 = ((16 * v108 & 15360 * ((v895 + 16777472) & 0x40004) ^ v108) >> 8) & 0xF000F0 | (16 * v94 & 15360 * ((v921 + 16777472) & 0x40004) ^ v94) & 0xF000F000 | ((16 * v95 & 15360 * ((v868 + 16777472) & 0x40004) ^ v95) >> 4) & 0xF000F00 | ((16 * v96 & 15360 * ((v841 + 16777472) & 0x40004) ^ v96) >> 12) & 0xF000F;\n      v118 = 16 * ((v117 ^ (v117 >> 4)) & 0x7030702) ^ (v117 ^ (v117 >> 4)) & 0x7030702 ^ v117;\n      v119 = (((v118 ^ (v118 >> 8)) & 0x4E009E) << 8) ^ (v118 ^ (v118 >> 8)) & 0x4E009E ^ v118;\n      v120 = ((unsigned __int16)((v119 ^ HIWORD(v119)) & 0xD9D3) << 16) ^ ((unsigned __int16)v119 ^ HIWORD(v119)) & 0xD9D3 ^ v119;\n      v121 = 16 * ((v120 ^ (v120 >> 4)) & 0x5040004) ^ (v120 ^ (v120 >> 4)) & 0x5040004 ^ v120;\n      v122 = 2 * ((v121 ^ (v121 >> 1)) & 0x4045015) ^ (v121 ^ (v121 >> 1)) & 0x4045015 ^ v825 ^ v121;\n      v123 = 0;\n      v826 = v122;\n      v124 = 0;\n      v125 = 0;\n      v126 = v122 ^ *(_DWORD *)(v805 - 376);\n      v127 = *(_DWORD *)(v805 - 312) ^ __ROL4__(v122, 4);\n      v128 = v127;\n      v129 = (v127 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v130 = v128 & 0xFC00FC;\n      v131 = -167733504;\n      v869 = v129;\n      v130 |= 0xFF00FF00;\n      v132 = v130;\n      v133 = v126 & 0xFC00FC | 0xFF00FF00;\n      v134 = v129 - v130;\n      v842 = v130;\n      v896 = v126 & 0xFC00FC | 0xFF00FF00;\n      v922 = (v126 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v135 = v130;\n      v136 = (signed int *)&unk_4DDE0;\n      v137 = 0;\n      v138 = v922 - v132;\n      v139 = v133 - v132;\n      while ( 1 )\n      {\n        v136 += 4;\n        v140 = v114 & (v138 + v135);\n        v125 ^= v135 & v115;\n        v141 = v135 + v134;\n        v137 ^= v116 & (v139 + v135);\n        v135 += 524296;\n        v123 ^= v140;\n        v124 ^= v131 & v141;\n        if ( v136 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v115 = *v136;\n        v131 = v136[1];\n        v116 = v136[2];\n        v114 = v136[3];\n      }\n      v142 = 234941184;\n      v143 = -2097117952;\n      v144 = 2063609344;\n      v145 = ((16 * v137 & 15360 * ((v896 + 16777472) & 0x40004) ^ v137) >> 8) & 0xF000F0 | (16 * v123 & 15360 * ((v922 + 16777472) & 0x40004) ^ v123) & 0xF000F000 | ((16 * v124 & 15360 * ((v869 + 16777472) & 0x40004) ^ v124) >> 4) & 0xF000F00 | ((16 * v125 & 15360 * ((v842 + 16777472) & 0x40004) ^ v125) >> 12) & 0xF000F;\n      v146 = 16 * ((v145 ^ (v145 >> 4)) & 0x7030702) ^ (v145 ^ (v145 >> 4)) & 0x7030702 ^ v145;\n      v147 = (((v146 ^ (v146 >> 8)) & 0x4E009E) << 8) ^ (v146 ^ (v146 >> 8)) & 0x4E009E ^ v146;\n      v148 = ((unsigned __int16)((v147 ^ HIWORD(v147)) & 0xD9D3) << 16) ^ ((unsigned __int16)v147 ^ HIWORD(v147)) & 0xD9D3 ^ v147;\n      v149 = 16 * ((v148 ^ (v148 >> 4)) & 0x5040004) ^ (v148 ^ (v148 >> 4)) & 0x5040004 ^ v148;\n      v150 = 2 * ((v149 ^ (v149 >> 1)) & 0x4045015) ^ (v149 ^ (v149 >> 1)) & 0x4045015 ^ v810 ^ v149;\n      v151 = 0;\n      v811 = v150;\n      v152 = 0;\n      v153 = 0;\n      v154 = v150 ^ *(_DWORD *)(v805 - 372);\n      v155 = *(_DWORD *)(v805 - 308) ^ __ROL4__(v150, 4);\n      v156 = v155;\n      v157 = (v155 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v158 = v156 & 0xFC00FC;\n      v159 = -167733504;\n      v870 = v157;\n      v158 |= 0xFF00FF00;\n      v160 = v158;\n      v161 = v154 & 0xFC00FC | 0xFF00FF00;\n      v162 = v157 - v158;\n      v843 = v158;\n      v897 = v154 & 0xFC00FC | 0xFF00FF00;\n      v923 = (v154 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v163 = v158;\n      v164 = (signed int *)&unk_4DDE0;\n      v165 = 0;\n      v166 = v923 - v160;\n      v167 = v161 - v160;\n      v794 = v162;\n      while ( 1 )\n      {\n        v164 += 4;\n        v168 = v144 & (v167 + v163);\n        v169 = v142 & (v166 + v163);\n        v170 = v163 + v794;\n        v153 ^= v163 & v143;\n        v163 += 524296;\n        v165 ^= v168;\n        v151 ^= v169;\n        v152 ^= v159 & v170;\n        if ( v164 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v143 = *v164;\n        v159 = v164[1];\n        v144 = v164[2];\n        v142 = v164[3];\n      }\n      v171 = 234941184;\n      v172 = -2097117952;\n      v173 = 2063609344;\n      v174 = ((16 * v165 & 15360 * ((v897 + 16777472) & 0x40004) ^ v165) >> 8) & 0xF000F0 | (16 * v151 & 15360 * ((v923 + 16777472) & 0x40004) ^ v151) & 0xF000F000 | ((16 * v152 & 15360 * ((v870 + 16777472) & 0x40004) ^ v152) >> 4) & 0xF000F00 | ((16 * v153 & 15360 * ((v843 + 16777472) & 0x40004) ^ v153) >> 12) & 0xF000F;\n      v175 = 16 * ((v174 ^ (v174 >> 4)) & 0x7030702) ^ (v174 ^ (v174 >> 4)) & 0x7030702 ^ v174;\n      v176 = (((v175 ^ (v175 >> 8)) & 0x4E009E) << 8) ^ (v175 ^ (v175 >> 8)) & 0x4E009E ^ v175;\n      v177 = ((unsigned __int16)((v176 ^ HIWORD(v176)) & 0xD9D3) << 16) ^ ((unsigned __int16)v176 ^ HIWORD(v176)) & 0xD9D3 ^ v176;\n      v178 = 16 * ((v177 ^ (v177 >> 4)) & 0x5040004) ^ (v177 ^ (v177 >> 4)) & 0x5040004 ^ v177;\n      v179 = 2 * ((v178 ^ (v178 >> 1)) & 0x4045015) ^ (v178 ^ (v178 >> 1)) & 0x4045015 ^ v826 ^ v178;\n      v180 = 0;\n      v827 = v179;\n      v181 = 0;\n      v182 = 0;\n      v183 = v179 ^ *(_DWORD *)(v805 - 368);\n      v184 = *(_DWORD *)(v805 - 304) ^ __ROL4__(v179, 4);\n      v185 = v184;\n      v186 = (v184 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v187 = v185 & 0xFC00FC;\n      v188 = -167733504;\n      v871 = v186;\n      v187 |= 0xFF00FF00;\n      v189 = v187;\n      v190 = v183 & 0xFC00FC | 0xFF00FF00;\n      v191 = v186 - v187;\n      v844 = v187;\n      v898 = v183 & 0xFC00FC | 0xFF00FF00;\n      v924 = (v183 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v192 = v187;\n      v193 = (signed int *)&unk_4DDE0;\n      v194 = 0;\n      v195 = v924 - v189;\n      v196 = v190 - v189;\n      while ( 1 )\n      {\n        v193 += 4;\n        v197 = v171 & (v195 + v192);\n        v182 ^= v192 & v172;\n        v198 = v192 + v191;\n        v194 ^= v173 & (v196 + v192);\n        v192 += 524296;\n        v180 ^= v197;\n        v181 ^= v188 & v198;\n        if ( v193 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v172 = *v193;\n        v188 = v193[1];\n        v173 = v193[2];\n        v171 = v193[3];\n      }\n      v199 = 234941184;\n      v200 = -2097117952;\n      v201 = 2063609344;\n      v202 = ((16 * v194 & 15360 * ((v898 + 16777472) & 0x40004) ^ v194) >> 8) & 0xF000F0 | (16 * v180 & 15360 * ((v924 + 16777472) & 0x40004) ^ v180) & 0xF000F000 | ((16 * v181 & 15360 * ((v871 + 16777472) & 0x40004) ^ v181) >> 4) & 0xF000F00 | ((16 * v182 & 15360 * ((v844 + 16777472) & 0x40004) ^ v182) >> 12) & 0xF000F;\n      v203 = 16 * ((v202 ^ (v202 >> 4)) & 0x7030702) ^ (v202 ^ (v202 >> 4)) & 0x7030702 ^ v202;\n      v204 = (((v203 ^ (v203 >> 8)) & 0x4E009E) << 8) ^ (v203 ^ (v203 >> 8)) & 0x4E009E ^ v203;\n      v205 = ((unsigned __int16)((v204 ^ HIWORD(v204)) & 0xD9D3) << 16) ^ ((unsigned __int16)v204 ^ HIWORD(v204)) & 0xD9D3 ^ v204;\n      v206 = 16 * ((v205 ^ (v205 >> 4)) & 0x5040004) ^ (v205 ^ (v205 >> 4)) & 0x5040004 ^ v205;\n      v207 = 2 * ((v206 ^ (v206 >> 1)) & 0x4045015) ^ (v206 ^ (v206 >> 1)) & 0x4045015 ^ v811 ^ v206;\n      v208 = 0;\n      v812 = v207;\n      v209 = 0;\n      v210 = 0;\n      v211 = v207 ^ *(_DWORD *)(v805 - 364);\n      v212 = *(_DWORD *)(v805 - 300) ^ __ROL4__(v207, 4);\n      v213 = v212;\n      v214 = (v212 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v215 = v213 & 0xFC00FC;\n      v216 = -167733504;\n      v872 = v214;\n      v215 |= 0xFF00FF00;\n      v217 = v215;\n      v218 = v211 & 0xFC00FC | 0xFF00FF00;\n      v219 = v214 - v215;\n      v845 = v215;\n      v899 = v211 & 0xFC00FC | 0xFF00FF00;\n      v925 = (v211 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v220 = v215;\n      v221 = (signed int *)&unk_4DDE0;\n      v222 = 0;\n      v223 = v925 - v217;\n      v224 = v218 - v217;\n      v795 = v219;\n      while ( 1 )\n      {\n        v221 += 4;\n        v225 = v201 & (v224 + v220);\n        v226 = v199 & (v223 + v220);\n        v227 = v220 + v795;\n        v210 ^= v220 & v200;\n        v220 += 524296;\n        v222 ^= v225;\n        v208 ^= v226;\n        v209 ^= v216 & v227;\n        if ( v221 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v200 = *v221;\n        v216 = v221[1];\n        v201 = v221[2];\n        v199 = v221[3];\n      }\n      v228 = 234941184;\n      v229 = -2097117952;\n      v230 = 2063609344;\n      v231 = ((16 * v222 & 15360 * ((v899 + 16777472) & 0x40004) ^ v222) >> 8) & 0xF000F0 | (16 * v208 & 15360 * ((v925 + 16777472) & 0x40004) ^ v208) & 0xF000F000 | ((16 * v209 & 15360 * ((v872 + 16777472) & 0x40004) ^ v209) >> 4) & 0xF000F00 | ((16 * v210 & 15360 * ((v845 + 16777472) & 0x40004) ^ v210) >> 12) & 0xF000F;\n      v232 = 16 * ((v231 ^ (v231 >> 4)) & 0x7030702) ^ (v231 ^ (v231 >> 4)) & 0x7030702 ^ v231;\n      v233 = (((v232 ^ (v232 >> 8)) & 0x4E009E) << 8) ^ (v232 ^ (v232 >> 8)) & 0x4E009E ^ v232;\n      v234 = ((unsigned __int16)((v233 ^ HIWORD(v233)) & 0xD9D3) << 16) ^ ((unsigned __int16)v233 ^ HIWORD(v233)) & 0xD9D3 ^ v233;\n      v235 = 16 * ((v234 ^ (v234 >> 4)) & 0x5040004) ^ (v234 ^ (v234 >> 4)) & 0x5040004 ^ v234;\n      v236 = 2 * ((v235 ^ (v235 >> 1)) & 0x4045015) ^ (v235 ^ (v235 >> 1)) & 0x4045015 ^ v827 ^ v235;\n      v237 = 0;\n      v828 = v236;\n      v238 = 0;\n      v239 = 0;\n      v240 = v236 ^ *(_DWORD *)(v805 - 360);\n      v241 = *(_DWORD *)(v805 - 296) ^ __ROL4__(v236, 4);\n      v242 = v241;\n      v243 = (v241 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v244 = v242 & 0xFC00FC;\n      v245 = -167733504;\n      v873 = v243;\n      v244 |= 0xFF00FF00;\n      v246 = v244;\n      v247 = v240 & 0xFC00FC | 0xFF00FF00;\n      v248 = v243 - v244;\n      v846 = v244;\n      v900 = v240 & 0xFC00FC | 0xFF00FF00;\n      v926 = (v240 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v249 = v244;\n      v250 = (signed int *)&unk_4DDE0;\n      v251 = 0;\n      v252 = v926 - v246;\n      v253 = v247 - v246;\n      while ( 1 )\n      {\n        v250 += 4;\n        v254 = v228 & (v252 + v249);\n        v239 ^= v249 & v229;\n        v255 = v249 + v248;\n        v251 ^= v230 & (v253 + v249);\n        v249 += 524296;\n        v237 ^= v254;\n        v238 ^= v245 & v255;\n        if ( v250 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v229 = *v250;\n        v245 = v250[1];\n        v230 = v250[2];\n        v228 = v250[3];\n      }\n      v256 = 234941184;\n      v257 = -2097117952;\n      v258 = 2063609344;\n      v259 = ((16 * v251 & 15360 * ((v900 + 16777472) & 0x40004) ^ v251) >> 8) & 0xF000F0 | (16 * v237 & 15360 * ((v926 + 16777472) & 0x40004) ^ v237) & 0xF000F000 | ((16 * v238 & 15360 * ((v873 + 16777472) & 0x40004) ^ v238) >> 4) & 0xF000F00 | ((16 * v239 & 15360 * ((v846 + 16777472) & 0x40004) ^ v239) >> 12) & 0xF000F;\n      v260 = 16 * ((v259 ^ (v259 >> 4)) & 0x7030702) ^ (v259 ^ (v259 >> 4)) & 0x7030702 ^ v259;\n      v261 = (((v260 ^ (v260 >> 8)) & 0x4E009E) << 8) ^ (v260 ^ (v260 >> 8)) & 0x4E009E ^ v260;\n      v262 = ((unsigned __int16)((v261 ^ HIWORD(v261)) & 0xD9D3) << 16) ^ ((unsigned __int16)v261 ^ HIWORD(v261)) & 0xD9D3 ^ v261;\n      v263 = 16 * ((v262 ^ (v262 >> 4)) & 0x5040004) ^ (v262 ^ (v262 >> 4)) & 0x5040004 ^ v262;\n      v264 = 2 * ((v263 ^ (v263 >> 1)) & 0x4045015) ^ (v263 ^ (v263 >> 1)) & 0x4045015 ^ v812 ^ v263;\n      v265 = 0;\n      v813 = v264;\n      v266 = 0;\n      v267 = 0;\n      v268 = v264 ^ *(_DWORD *)(v805 - 356);\n      v269 = *(_DWORD *)(v805 - 292) ^ __ROL4__(v264, 4);\n      v270 = v269;\n      v271 = (v269 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v272 = v270 & 0xFC00FC;\n      v273 = -167733504;\n      v874 = v271;\n      v272 |= 0xFF00FF00;\n      v274 = v272;\n      v275 = v268 & 0xFC00FC | 0xFF00FF00;\n      v276 = v271 - v272;\n      v847 = v272;\n      v901 = v268 & 0xFC00FC | 0xFF00FF00;\n      v927 = (v268 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v277 = v272;\n      v278 = (signed int *)&unk_4DDE0;\n      v279 = 0;\n      v280 = v927 - v274;\n      v281 = v275 - v274;\n      v796 = v276;\n      while ( 1 )\n      {\n        v278 += 4;\n        v282 = v258 & (v281 + v277);\n        v283 = v256 & (v280 + v277);\n        v284 = v277 + v796;\n        v267 ^= v277 & v257;\n        v277 += 524296;\n        v279 ^= v282;\n        v265 ^= v283;\n        v266 ^= v273 & v284;\n        if ( v278 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v257 = *v278;\n        v273 = v278[1];\n        v258 = v278[2];\n        v256 = v278[3];\n      }\n      v285 = 234941184;\n      v286 = -2097117952;\n      v287 = 2063609344;\n      v288 = ((16 * v279 & 15360 * ((v901 + 16777472) & 0x40004) ^ v279) >> 8) & 0xF000F0 | (16 * v265 & 15360 * ((v927 + 16777472) & 0x40004) ^ v265) & 0xF000F000 | ((16 * v266 & 15360 * ((v874 + 16777472) & 0x40004) ^ v266) >> 4) & 0xF000F00 | ((16 * v267 & 15360 * ((v847 + 16777472) & 0x40004) ^ v267) >> 12) & 0xF000F;\n      v289 = 16 * ((v288 ^ (v288 >> 4)) & 0x7030702) ^ (v288 ^ (v288 >> 4)) & 0x7030702 ^ v288;\n      v290 = (((v289 ^ (v289 >> 8)) & 0x4E009E) << 8) ^ (v289 ^ (v289 >> 8)) & 0x4E009E ^ v289;\n      v291 = ((unsigned __int16)((v290 ^ HIWORD(v290)) & 0xD9D3) << 16) ^ ((unsigned __int16)v290 ^ HIWORD(v290)) & 0xD9D3 ^ v290;\n      v292 = 16 * ((v291 ^ (v291 >> 4)) & 0x5040004) ^ (v291 ^ (v291 >> 4)) & 0x5040004 ^ v291;\n      v293 = 2 * ((v292 ^ (v292 >> 1)) & 0x4045015) ^ (v292 ^ (v292 >> 1)) & 0x4045015 ^ v828 ^ v292;\n      v294 = 0;\n      v829 = v293;\n      v295 = 0;\n      v296 = 0;\n      v297 = v293 ^ *(_DWORD *)(v805 - 352);\n      v298 = *(_DWORD *)(v805 - 288) ^ __ROL4__(v293, 4);\n      v299 = v298;\n      v300 = (v298 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v301 = v299 & 0xFC00FC;\n      v302 = -167733504;\n      v875 = v300;\n      v301 |= 0xFF00FF00;\n      v303 = v301;\n      v304 = v297 & 0xFC00FC | 0xFF00FF00;\n      v305 = v300 - v301;\n      v848 = v301;\n      v902 = v297 & 0xFC00FC | 0xFF00FF00;\n      v928 = (v297 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v306 = v301;\n      v307 = (signed int *)&unk_4DDE0;\n      v308 = 0;\n      v309 = v928 - v303;\n      v310 = v304 - v303;\n      while ( 1 )\n      {\n        v307 += 4;\n        v311 = v285 & (v309 + v306);\n        v296 ^= v306 & v286;\n        v312 = v306 + v305;\n        v308 ^= v287 & (v310 + v306);\n        v306 += 524296;\n        v294 ^= v311;\n        v295 ^= v302 & v312;\n        if ( v307 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v286 = *v307;\n        v302 = v307[1];\n        v287 = v307[2];\n        v285 = v307[3];\n      }\n      v313 = 234941184;\n      v314 = -2097117952;\n      v315 = 2063609344;\n      v316 = ((16 * v308 & 15360 * ((v902 + 16777472) & 0x40004) ^ v308) >> 8) & 0xF000F0 | (16 * v294 & 15360 * ((v928 + 16777472) & 0x40004) ^ v294) & 0xF000F000 | ((16 * v295 & 15360 * ((v875 + 16777472) & 0x40004) ^ v295) >> 4) & 0xF000F00 | ((16 * v296 & 15360 * ((v848 + 16777472) & 0x40004) ^ v296) >> 12) & 0xF000F;\n      v317 = 16 * ((v316 ^ (v316 >> 4)) & 0x7030702) ^ (v316 ^ (v316 >> 4)) & 0x7030702 ^ v316;\n      v318 = (((v317 ^ (v317 >> 8)) & 0x4E009E) << 8) ^ (v317 ^ (v317 >> 8)) & 0x4E009E ^ v317;\n      v319 = ((unsigned __int16)((v318 ^ HIWORD(v318)) & 0xD9D3) << 16) ^ ((unsigned __int16)v318 ^ HIWORD(v318)) & 0xD9D3 ^ v318;\n      v320 = 16 * ((v319 ^ (v319 >> 4)) & 0x5040004) ^ (v319 ^ (v319 >> 4)) & 0x5040004 ^ v319;\n      v321 = 2 * ((v320 ^ (v320 >> 1)) & 0x4045015) ^ (v320 ^ (v320 >> 1)) & 0x4045015 ^ v813 ^ v320;\n      v322 = 0;\n      v814 = v321;\n      v323 = 0;\n      v324 = 0;\n      v325 = v321 ^ *(_DWORD *)(v805 - 348);\n      v326 = *(_DWORD *)(v805 - 284) ^ __ROL4__(v321, 4);\n      v327 = v326;\n      v328 = (v326 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v329 = v327 & 0xFC00FC;\n      v330 = -167733504;\n      v876 = v328;\n      v329 |= 0xFF00FF00;\n      v331 = v329;\n      v332 = v325 & 0xFC00FC | 0xFF00FF00;\n      v333 = v328 - v329;\n      v849 = v329;\n      v903 = v325 & 0xFC00FC | 0xFF00FF00;\n      v929 = (v325 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v334 = v329;\n      v335 = (signed int *)&unk_4DDE0;\n      v336 = 0;\n      v337 = v929 - v331;\n      v338 = v332 - v331;\n      v797 = v333;\n      while ( 1 )\n      {\n        v335 += 4;\n        v339 = v315 & (v338 + v334);\n        v340 = v313 & (v337 + v334);\n        v341 = v334 + v797;\n        v324 ^= v334 & v314;\n        v334 += 524296;\n        v336 ^= v339;\n        v322 ^= v340;\n        v323 ^= v330 & v341;\n        if ( v335 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v314 = *v335;\n        v330 = v335[1];\n        v315 = v335[2];\n        v313 = v335[3];\n      }\n      v342 = 234941184;\n      v343 = -2097117952;\n      v344 = 2063609344;\n      v345 = ((16 * v336 & 15360 * ((v903 + 16777472) & 0x40004) ^ v336) >> 8) & 0xF000F0 | (16 * v322 & 15360 * ((v929 + 16777472) & 0x40004) ^ v322) & 0xF000F000 | ((16 * v323 & 15360 * ((v876 + 16777472) & 0x40004) ^ v323) >> 4) & 0xF000F00 | ((16 * v324 & 15360 * ((v849 + 16777472) & 0x40004) ^ v324) >> 12) & 0xF000F;\n      v346 = 16 * ((v345 ^ (v345 >> 4)) & 0x7030702) ^ (v345 ^ (v345 >> 4)) & 0x7030702 ^ v345;\n      v347 = (((v346 ^ (v346 >> 8)) & 0x4E009E) << 8) ^ (v346 ^ (v346 >> 8)) & 0x4E009E ^ v346;\n      v348 = ((unsigned __int16)((v347 ^ HIWORD(v347)) & 0xD9D3) << 16) ^ ((unsigned __int16)v347 ^ HIWORD(v347)) & 0xD9D3 ^ v347;\n      v349 = 16 * ((v348 ^ (v348 >> 4)) & 0x5040004) ^ (v348 ^ (v348 >> 4)) & 0x5040004 ^ v348;\n      v350 = 2 * ((v349 ^ (v349 >> 1)) & 0x4045015) ^ (v349 ^ (v349 >> 1)) & 0x4045015 ^ v829 ^ v349;\n      v351 = 0;\n      v830 = v350;\n      v352 = 0;\n      v353 = 0;\n      v354 = v350 ^ *(_DWORD *)(v805 - 344);\n      v355 = *(_DWORD *)(v805 - 280) ^ __ROL4__(v350, 4);\n      v356 = v355;\n      v357 = (v355 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v358 = v356 & 0xFC00FC;\n      v359 = -167733504;\n      v877 = v357;\n      v358 |= 0xFF00FF00;\n      v360 = v358;\n      v361 = v354 & 0xFC00FC | 0xFF00FF00;\n      v362 = v357 - v358;\n      v850 = v358;\n      v904 = v354 & 0xFC00FC | 0xFF00FF00;\n      v930 = (v354 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v363 = v358;\n      v364 = (signed int *)&unk_4DDE0;\n      v365 = 0;\n      v366 = v930 - v360;\n      v367 = v361 - v360;\n      while ( 1 )\n      {\n        v364 += 4;\n        v368 = v342 & (v366 + v363);\n        v353 ^= v363 & v343;\n        v369 = v363 + v362;\n        v365 ^= v344 & (v367 + v363);\n        v363 += 524296;\n        v351 ^= v368;\n        v352 ^= v359 & v369;\n        if ( v364 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v343 = *v364;\n        v359 = v364[1];\n        v344 = v364[2];\n        v342 = v364[3];\n      }\n      v370 = 234941184;\n      v371 = -2097117952;\n      v372 = 2063609344;\n      v373 = ((16 * v365 & 15360 * ((v904 + 16777472) & 0x40004) ^ v365) >> 8) & 0xF000F0 | (16 * v351 & 15360 * ((v930 + 16777472) & 0x40004) ^ v351) & 0xF000F000 | ((16 * v352 & 15360 * ((v877 + 16777472) & 0x40004) ^ v352) >> 4) & 0xF000F00 | ((16 * v353 & 15360 * ((v850 + 16777472) & 0x40004) ^ v353) >> 12) & 0xF000F;\n      v374 = 16 * ((v373 ^ (v373 >> 4)) & 0x7030702) ^ (v373 ^ (v373 >> 4)) & 0x7030702 ^ v373;\n      v375 = (((v374 ^ (v374 >> 8)) & 0x4E009E) << 8) ^ (v374 ^ (v374 >> 8)) & 0x4E009E ^ v374;\n      v376 = ((unsigned __int16)((v375 ^ HIWORD(v375)) & 0xD9D3) << 16) ^ ((unsigned __int16)v375 ^ HIWORD(v375)) & 0xD9D3 ^ v375;\n      v377 = 16 * ((v376 ^ (v376 >> 4)) & 0x5040004) ^ (v376 ^ (v376 >> 4)) & 0x5040004 ^ v376;\n      v378 = 2 * ((v377 ^ (v377 >> 1)) & 0x4045015) ^ (v377 ^ (v377 >> 1)) & 0x4045015 ^ v814 ^ v377;\n      v379 = 0;\n      v815 = v378;\n      v380 = 0;\n      v381 = 0;\n      v382 = v378 ^ *(_DWORD *)(v805 - 340);\n      v383 = *(_DWORD *)(v805 - 276) ^ __ROL4__(v378, 4);\n      v384 = v383;\n      v385 = (v383 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v386 = v384 & 0xFC00FC;\n      v387 = -167733504;\n      v878 = v385;\n      v386 |= 0xFF00FF00;\n      v388 = v386;\n      v389 = v382 & 0xFC00FC | 0xFF00FF00;\n      v390 = v385 - v386;\n      v851 = v386;\n      v905 = v382 & 0xFC00FC | 0xFF00FF00;\n      v931 = (v382 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v391 = v386;\n      v392 = (signed int *)&unk_4DDE0;\n      v393 = 0;\n      v394 = v931 - v388;\n      v395 = v389 - v388;\n      v798 = v390;\n      while ( 1 )\n      {\n        v392 += 4;\n        v396 = v372 & (v395 + v391);\n        v397 = v370 & (v394 + v391);\n        v398 = v391 + v798;\n        v381 ^= v391 & v371;\n        v391 += 524296;\n        v393 ^= v396;\n        v379 ^= v397;\n        v380 ^= v387 & v398;\n        if ( v392 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v371 = *v392;\n        v387 = v392[1];\n        v372 = v392[2];\n        v370 = v392[3];\n      }\n      v399 = 234941184;\n      v400 = -2097117952;\n      v401 = 2063609344;\n      v402 = ((16 * v393 & 15360 * ((v905 + 16777472) & 0x40004) ^ v393) >> 8) & 0xF000F0 | (16 * v379 & 15360 * ((v931 + 16777472) & 0x40004) ^ v379) & 0xF000F000 | ((16 * v380 & 15360 * ((v878 + 16777472) & 0x40004) ^ v380) >> 4) & 0xF000F00 | ((16 * v381 & 15360 * ((v851 + 16777472) & 0x40004) ^ v381) >> 12) & 0xF000F;\n      v403 = 16 * ((v402 ^ (v402 >> 4)) & 0x7030702) ^ (v402 ^ (v402 >> 4)) & 0x7030702 ^ v402;\n      v404 = (((v403 ^ (v403 >> 8)) & 0x4E009E) << 8) ^ (v403 ^ (v403 >> 8)) & 0x4E009E ^ v403;\n      v405 = ((unsigned __int16)((v404 ^ HIWORD(v404)) & 0xD9D3) << 16) ^ ((unsigned __int16)v404 ^ HIWORD(v404)) & 0xD9D3 ^ v404;\n      v406 = 16 * ((v405 ^ (v405 >> 4)) & 0x5040004) ^ (v405 ^ (v405 >> 4)) & 0x5040004 ^ v405;\n      v407 = 2 * ((v406 ^ (v406 >> 1)) & 0x4045015) ^ (v406 ^ (v406 >> 1)) & 0x4045015 ^ v830 ^ v406;\n      v408 = 0;\n      v831 = v407;\n      v409 = 0;\n      v410 = 0;\n      v411 = v407 ^ *(_DWORD *)(v805 - 336);\n      v412 = *(_DWORD *)(v805 - 272) ^ __ROL4__(v407, 4);\n      v413 = v412;\n      v414 = (v412 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v415 = v413 & 0xFC00FC;\n      v416 = -167733504;\n      v879 = v414;\n      v415 |= 0xFF00FF00;\n      v417 = v415;\n      v418 = v411 & 0xFC00FC | 0xFF00FF00;\n      v419 = v414 - v415;\n      v852 = v415;\n      v906 = v411 & 0xFC00FC | 0xFF00FF00;\n      v932 = (v411 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v420 = v415;\n      v421 = (signed int *)&unk_4DDE0;\n      v422 = 0;\n      v423 = v932 - v417;\n      v424 = v418 - v417;\n      while ( 1 )\n      {\n        v421 += 4;\n        v425 = v399 & (v423 + v420);\n        v410 ^= v420 & v400;\n        v426 = v420 + v419;\n        v422 ^= v401 & (v424 + v420);\n        v420 += 524296;\n        v408 ^= v425;\n        v409 ^= v416 & v426;\n        if ( v421 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v400 = *v421;\n        v416 = v421[1];\n        v401 = v421[2];\n        v399 = v421[3];\n      }\n      v427 = 234941184;\n      v428 = -2097117952;\n      v429 = 2063609344;\n      v430 = ((16 * v422 & 15360 * ((v906 + 16777472) & 0x40004) ^ v422) >> 8) & 0xF000F0 | (16 * v408 & 15360 * ((v932 + 16777472) & 0x40004) ^ v408) & 0xF000F000 | ((16 * v409 & 15360 * ((v879 + 16777472) & 0x40004) ^ v409) >> 4) & 0xF000F00 | ((16 * v410 & 15360 * ((v852 + 16777472) & 0x40004) ^ v410) >> 12) & 0xF000F;\n      v431 = 16 * ((v430 ^ (v430 >> 4)) & 0x7030702) ^ (v430 ^ (v430 >> 4)) & 0x7030702 ^ v430;\n      v432 = (((v431 ^ (v431 >> 8)) & 0x4E009E) << 8) ^ (v431 ^ (v431 >> 8)) & 0x4E009E ^ v431;\n      v433 = ((unsigned __int16)((v432 ^ HIWORD(v432)) & 0xD9D3) << 16) ^ ((unsigned __int16)v432 ^ HIWORD(v432)) & 0xD9D3 ^ v432;\n      v434 = 16 * ((v433 ^ (v433 >> 4)) & 0x5040004) ^ (v433 ^ (v433 >> 4)) & 0x5040004 ^ v433;\n      v435 = 2 * ((v434 ^ (v434 >> 1)) & 0x4045015) ^ (v434 ^ (v434 >> 1)) & 0x4045015 ^ v815 ^ v434;\n      v436 = 0;\n      LODWORD(v807) = v435;\n      v437 = 0;\n      v438 = 0;\n      v439 = v435 ^ *(_DWORD *)(v805 - 332);\n      v440 = *(_DWORD *)(v805 - 268) ^ __ROL4__(v435, 4);\n      v441 = v440;\n      v442 = (v440 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v443 = v441 & 0xFC00FC;\n      v444 = -167733504;\n      v880 = v442;\n      v443 |= 0xFF00FF00;\n      v445 = v443;\n      v446 = v439 & 0xFC00FC | 0xFF00FF00;\n      v447 = v442 - v443;\n      v853 = v443;\n      v907 = v439 & 0xFC00FC | 0xFF00FF00;\n      v933 = (v439 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v448 = v443;\n      v449 = (signed int *)&unk_4DDE0;\n      v450 = 0;\n      v451 = v933 - v445;\n      v452 = v446 - v445;\n      v799 = v447;\n      while ( 1 )\n      {\n        v449 += 4;\n        v453 = v429 & (v452 + v448);\n        v454 = v427 & (v451 + v448);\n        v455 = v448 + v799;\n        v438 ^= v448 & v428;\n        v448 += 524296;\n        v450 ^= v453;\n        v436 ^= v454;\n        v437 ^= v444 & v455;\n        if ( v449 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v428 = *v449;\n        v444 = v449[1];\n        v429 = v449[2];\n        v427 = v449[3];\n      }\n      v456 = ((16 * v450 & 15360 * ((v907 + 16777472) & 0x40004) ^ v450) >> 8) & 0xF000F0 | (16 * v436 & 15360 * ((v933 + 16777472) & 0x40004) ^ v436) & 0xF000F000 | ((16 * v437 & 15360 * ((v880 + 16777472) & 0x40004) ^ v437) >> 4) & 0xF000F00 | ((16 * v438 & 15360 * ((v853 + 16777472) & 0x40004) ^ v438) >> 12) & 0xF000F;\n      v457 = (v456 ^ (v456 >> 4)) & 0x7030702;\n      v458 = (((16 * v457 ^ v457 ^ v456 ^ ((16 * v457 ^ v457 ^ v456) >> 8)) & 0x4E009E) << 8) ^ (16 * v457 ^ v457 ^ v456 ^ ((16 * v457 ^ v457 ^ v456) >> 8)) & 0x4E009E ^ 16 * v457 ^ v457 ^ v456;\n      v459 = ((unsigned __int16)((v458 ^ HIWORD(v458)) & 0xD9D3) << 16) ^ ((unsigned __int16)v458 ^ HIWORD(v458)) & 0xD9D3 ^ v458;\n      v460 = 16 * ((v459 ^ (v459 >> 4)) & 0x5040004) ^ (v459 ^ (v459 >> 4)) & 0x5040004 ^ v459;\n      v461 = 0;\n      v462 = 0;\n      v463 = sub_228E0(\n               (v807 << 32) | 2 * ((v460 ^ (v460 >> 1)) & 0x4045015) ^ (v460 ^ (v460 >> 1)) & 0x4045015 ^ v460 ^ v831,\n               v946,\n               15LL,\n               -1LL);\n      v816 = v463;\n      v463 >>= 32;\n      v934 = v463;\n      v464 = 234941184;\n      v465 = 2063609344;\n      v466 = -2097117952;\n      v467 = 0;\n      v468 = v463 ^ *(_DWORD *)(v805 - 136);\n      LODWORD(v463) = *(_DWORD *)(v805 - 72) ^ __ROL4__(v463, 4);\n      v469 = v463;\n      LODWORD(v463) = ((unsigned int)v463 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v470 = v469 & 0xFC00FC;\n      v471 = -167733504;\n      v854 = v463;\n      v470 |= 0xFF00FF00;\n      v472 = v470;\n      v473 = v468 & 0xFC00FC | 0xFF00FF00;\n      v474 = v463 - v470;\n      v832 = v470;\n      v881 = v468 & 0xFC00FC | 0xFF00FF00;\n      v908 = (v468 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v475 = v470;\n      v476 = (signed int *)&unk_4DDE0;\n      v477 = 0;\n      v478 = v908 - v472;\n      v479 = v473 - v472;\n      while ( 1 )\n      {\n        v476 += 4;\n        v480 = v464 & (v478 + v475);\n        v467 ^= v475 & v466;\n        v481 = v475 + v474;\n        v477 ^= v465 & (v479 + v475);\n        v475 += 524296;\n        v461 ^= v480;\n        v462 ^= v471 & v481;\n        if ( v476 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v466 = *v476;\n        v471 = v476[1];\n        v465 = v476[2];\n        v464 = v476[3];\n      }\n      v482 = v805;\n      v483 = ((16 * v477 & 15360 * ((v881 + 16777472) & 0x40004) ^ v477) >> 8) & 0xF000F0 | (16 * v461 & 15360 * ((v908 + 16777472) & 0x40004) ^ v461) & 0xF000F000 | ((16 * v462 & 15360 * ((v854 + 16777472) & 0x40004) ^ v462) >> 4) & 0xF000F00 | ((16 * v467 & 15360 * ((v832 + 16777472) & 0x40004) ^ v467) >> 12) & 0xF000F;\n      v484 = 16 * ((v483 ^ (v483 >> 4)) & 0x7030702) ^ (v483 ^ (v483 >> 4)) & 0x7030702 ^ v483;\n      v485 = (((v484 ^ (v484 >> 8)) & 0x4E009E) << 8) ^ (v484 ^ (v484 >> 8)) & 0x4E009E ^ v484;\n      v486 = ((unsigned __int16)((v485 ^ HIWORD(v485)) & 0xD9D3) << 16) ^ ((unsigned __int16)v485 ^ HIWORD(v485)) & 0xD9D3 ^ v485;\n      v487 = 16 * ((v486 ^ (v486 >> 4)) & 0x5040004) ^ (v486 ^ (v486 >> 4)) & 0x5040004 ^ v486;\n      v488 = 2 * ((v487 ^ (v487 >> 1)) & 0x4045015) ^ (v487 ^ (v487 >> 1)) & 0x4045015 ^ v487 ^ v816;\n      v489 = 0;\n      v490 = 0;\n      v491 = (unsigned __int64)sub_22510(v488, *(_DWORD *)(v805 - 132), *(_DWORD *)(v805 - 68)) ^ v934;\n      v492 = (unsigned __int64)sub_22510(v491, *(_DWORD *)(v482 - 128), *(_DWORD *)(v482 - 64)) ^ v488;\n      v493 = (unsigned __int64)sub_22510(v492, *(_DWORD *)(v482 - 124), *(_DWORD *)(v482 - 60)) ^ v491;\n      v817 = (unsigned __int64)sub_22510(v493, *(_DWORD *)(v482 - 120), *(_DWORD *)(v482 - 56)) ^ v492;\n      v494 = (unsigned __int64)sub_22510(v817, *(_DWORD *)(v482 - 116), *(_DWORD *)(v482 - 52)) ^ v493;\n      v495 = 234941184;\n      v833 = v494;\n      v496 = 2063609344;\n      v497 = *(_DWORD *)(v805 - 48) ^ __ROL4__(v494, 4);\n      v498 = -2097117952;\n      v499 = v494 ^ *(_DWORD *)(v805 - 112);\n      v500 = 0;\n      v501 = v497;\n      v502 = (v497 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v503 = v501 & 0xFC00FC;\n      v504 = -167733504;\n      v882 = v502;\n      v503 |= 0xFF00FF00;\n      v505 = v503;\n      LODWORD(v482) = v499 & 0xFC00FC | 0xFF00FF00;\n      v506 = v502 - v503;\n      v855 = v503;\n      v909 = v499 & 0xFC00FC | 0xFF00FF00;\n      v935 = (v499 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v507 = v503;\n      v508 = (signed int *)&unk_4DDE0;\n      v509 = 0;\n      v510 = v935 - v505;\n      v511 = v482 - v505;\n      v800 = v506;\n      while ( 1 )\n      {\n        v508 += 4;\n        v512 = v496 & (v511 + v507);\n        v513 = v495 & (v510 + v507);\n        v514 = v507 + v800;\n        v490 ^= v507 & v498;\n        v507 += 524296;\n        v509 ^= v512;\n        v489 ^= v513;\n        v500 ^= v504 & v514;\n        if ( v508 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v498 = *v508;\n        v504 = v508[1];\n        v496 = v508[2];\n        v495 = v508[3];\n      }\n      v515 = 234941184;\n      v516 = -2097117952;\n      v517 = 2063609344;\n      v518 = ((16 * v509 & 15360 * ((v909 + 16777472) & 0x40004) ^ v509) >> 8) & 0xF000F0 | (16 * v489 & 15360 * ((v935 + 16777472) & 0x40004) ^ v489) & 0xF000F000 | ((16 * v500 & 15360 * ((v882 + 16777472) & 0x40004) ^ v500) >> 4) & 0xF000F00 | ((16 * v490 & 15360 * ((v855 + 16777472) & 0x40004) ^ v490) >> 12) & 0xF000F;\n      v519 = 16 * ((v518 ^ (v518 >> 4)) & 0x7030702) ^ (v518 ^ (v518 >> 4)) & 0x7030702 ^ v518;\n      v520 = (((v519 ^ (v519 >> 8)) & 0x4E009E) << 8) ^ (v519 ^ (v519 >> 8)) & 0x4E009E ^ v519;\n      v521 = ((unsigned __int16)((v520 ^ HIWORD(v520)) & 0xD9D3) << 16) ^ ((unsigned __int16)v520 ^ HIWORD(v520)) & 0xD9D3 ^ v520;\n      v522 = 16 * ((v521 ^ (v521 >> 4)) & 0x5040004) ^ (v521 ^ (v521 >> 4)) & 0x5040004 ^ v521;\n      v523 = 2 * ((v522 ^ (v522 >> 1)) & 0x4045015) ^ (v522 ^ (v522 >> 1)) & 0x4045015 ^ v817 ^ v522;\n      v524 = 0;\n      v818 = v523;\n      v525 = 0;\n      v526 = 0;\n      v527 = v523 ^ *(_DWORD *)(v805 - 108);\n      v528 = *(_DWORD *)(v805 - 44) ^ __ROL4__(v523, 4);\n      v529 = v528;\n      v530 = (v528 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v531 = v529 & 0xFC00FC;\n      v532 = -167733504;\n      v883 = v530;\n      v531 |= 0xFF00FF00;\n      v533 = v531;\n      v534 = v527 & 0xFC00FC | 0xFF00FF00;\n      v535 = v530 - v531;\n      v856 = v531;\n      v910 = v527 & 0xFC00FC | 0xFF00FF00;\n      v936 = (v527 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v536 = v531;\n      v537 = (signed int *)&unk_4DDE0;\n      v538 = 0;\n      v539 = v936 - v533;\n      v540 = v534 - v533;\n      while ( 1 )\n      {\n        v537 += 4;\n        v541 = v515 & (v539 + v536);\n        v526 ^= v536 & v516;\n        v542 = v536 + v535;\n        v538 ^= v517 & (v540 + v536);\n        v536 += 524296;\n        v524 ^= v541;\n        v525 ^= v532 & v542;\n        if ( v537 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v516 = *v537;\n        v532 = v537[1];\n        v517 = v537[2];\n        v515 = v537[3];\n      }\n      v543 = 234941184;\n      v544 = -2097117952;\n      v545 = 2063609344;\n      v546 = ((16 * v538 & 15360 * ((v910 + 16777472) & 0x40004) ^ v538) >> 8) & 0xF000F0 | (16 * v524 & 15360 * ((v936 + 16777472) & 0x40004) ^ v524) & 0xF000F000 | ((16 * v525 & 15360 * ((v883 + 16777472) & 0x40004) ^ v525) >> 4) & 0xF000F00 | ((16 * v526 & 15360 * ((v856 + 16777472) & 0x40004) ^ v526) >> 12) & 0xF000F;\n      v547 = 16 * ((v546 ^ (v546 >> 4)) & 0x7030702) ^ (v546 ^ (v546 >> 4)) & 0x7030702 ^ v546;\n      v548 = (((v547 ^ (v547 >> 8)) & 0x4E009E) << 8) ^ (v547 ^ (v547 >> 8)) & 0x4E009E ^ v547;\n      v549 = ((unsigned __int16)((v548 ^ HIWORD(v548)) & 0xD9D3) << 16) ^ ((unsigned __int16)v548 ^ HIWORD(v548)) & 0xD9D3 ^ v548;\n      v550 = 16 * ((v549 ^ (v549 >> 4)) & 0x5040004) ^ (v549 ^ (v549 >> 4)) & 0x5040004 ^ v549;\n      v551 = 2 * ((v550 ^ (v550 >> 1)) & 0x4045015) ^ (v550 ^ (v550 >> 1)) & 0x4045015 ^ v833 ^ v550;\n      v552 = 0;\n      v834 = v551;\n      v553 = 0;\n      v554 = 0;\n      v555 = v551 ^ *(_DWORD *)(v805 - 104);\n      v556 = *(_DWORD *)(v805 - 40) ^ __ROL4__(v551, 4);\n      v557 = v556;\n      v558 = (v556 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v559 = v557 & 0xFC00FC;\n      v560 = -167733504;\n      v884 = v558;\n      v559 |= 0xFF00FF00;\n      v561 = v559;\n      v562 = v555 & 0xFC00FC | 0xFF00FF00;\n      v563 = v558 - v559;\n      v857 = v559;\n      v911 = v555 & 0xFC00FC | 0xFF00FF00;\n      v937 = (v555 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v564 = v559;\n      v565 = (signed int *)&unk_4DDE0;\n      v566 = 0;\n      v567 = v937 - v561;\n      v568 = v562 - v561;\n      v801 = v563;\n      while ( 1 )\n      {\n        v565 += 4;\n        v569 = v545 & (v568 + v564);\n        v570 = v543 & (v567 + v564);\n        v571 = v564 + v801;\n        v554 ^= v564 & v544;\n        v564 += 524296;\n        v566 ^= v569;\n        v552 ^= v570;\n        v553 ^= v560 & v571;\n        if ( v565 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v544 = *v565;\n        v560 = v565[1];\n        v545 = v565[2];\n        v543 = v565[3];\n      }\n      v572 = 234941184;\n      v573 = -2097117952;\n      v574 = 2063609344;\n      v575 = ((16 * v566 & 15360 * ((v911 + 16777472) & 0x40004) ^ v566) >> 8) & 0xF000F0 | (16 * v552 & 15360 * ((v937 + 16777472) & 0x40004) ^ v552) & 0xF000F000 | ((16 * v553 & 15360 * ((v884 + 16777472) & 0x40004) ^ v553) >> 4) & 0xF000F00 | ((16 * v554 & 15360 * ((v857 + 16777472) & 0x40004) ^ v554) >> 12) & 0xF000F;\n      v576 = 16 * ((v575 ^ (v575 >> 4)) & 0x7030702) ^ (v575 ^ (v575 >> 4)) & 0x7030702 ^ v575;\n      v577 = (((v576 ^ (v576 >> 8)) & 0x4E009E) << 8) ^ (v576 ^ (v576 >> 8)) & 0x4E009E ^ v576;\n      v578 = ((unsigned __int16)((v577 ^ HIWORD(v577)) & 0xD9D3) << 16) ^ ((unsigned __int16)v577 ^ HIWORD(v577)) & 0xD9D3 ^ v577;\n      v579 = 16 * ((v578 ^ (v578 >> 4)) & 0x5040004) ^ (v578 ^ (v578 >> 4)) & 0x5040004 ^ v578;\n      v580 = 2 * ((v579 ^ (v579 >> 1)) & 0x4045015) ^ (v579 ^ (v579 >> 1)) & 0x4045015 ^ v818 ^ v579;\n      v581 = 0;\n      v819 = v580;\n      v582 = 0;\n      v583 = 0;\n      v584 = v580 ^ *(_DWORD *)(v805 - 100);\n      v585 = *(_DWORD *)(v805 - 36) ^ __ROL4__(v580, 4);\n      v586 = v585;\n      v587 = (v585 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v588 = v586 & 0xFC00FC;\n      v589 = -167733504;\n      v885 = v587;\n      v588 |= 0xFF00FF00;\n      v590 = v588;\n      v591 = v584 & 0xFC00FC | 0xFF00FF00;\n      v592 = v587 - v588;\n      v858 = v588;\n      v912 = v584 & 0xFC00FC | 0xFF00FF00;\n      v938 = (v584 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v593 = v588;\n      v594 = (signed int *)&unk_4DDE0;\n      v595 = 0;\n      v596 = v938 - v590;\n      v597 = v591 - v590;\n      while ( 1 )\n      {\n        v594 += 4;\n        v598 = v572 & (v596 + v593);\n        v583 ^= v593 & v573;\n        v599 = v593 + v592;\n        v595 ^= v574 & (v597 + v593);\n        v593 += 524296;\n        v581 ^= v598;\n        v582 ^= v589 & v599;\n        if ( v594 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v573 = *v594;\n        v589 = v594[1];\n        v574 = v594[2];\n        v572 = v594[3];\n      }\n      v600 = 234941184;\n      v601 = -2097117952;\n      v602 = 2063609344;\n      v603 = ((16 * v595 & 15360 * ((v912 + 16777472) & 0x40004) ^ v595) >> 8) & 0xF000F0 | (16 * v581 & 15360 * ((v938 + 16777472) & 0x40004) ^ v581) & 0xF000F000 | ((16 * v582 & 15360 * ((v885 + 16777472) & 0x40004) ^ v582) >> 4) & 0xF000F00 | ((16 * v583 & 15360 * ((v858 + 16777472) & 0x40004) ^ v583) >> 12) & 0xF000F;\n      v604 = 16 * ((v603 ^ (v603 >> 4)) & 0x7030702) ^ (v603 ^ (v603 >> 4)) & 0x7030702 ^ v603;\n      v605 = (((v604 ^ (v604 >> 8)) & 0x4E009E) << 8) ^ (v604 ^ (v604 >> 8)) & 0x4E009E ^ v604;\n      v606 = ((unsigned __int16)((v605 ^ HIWORD(v605)) & 0xD9D3) << 16) ^ ((unsigned __int16)v605 ^ HIWORD(v605)) & 0xD9D3 ^ v605;\n      v607 = 16 * ((v606 ^ (v606 >> 4)) & 0x5040004) ^ (v606 ^ (v606 >> 4)) & 0x5040004 ^ v606;\n      v608 = 2 * ((v607 ^ (v607 >> 1)) & 0x4045015) ^ (v607 ^ (v607 >> 1)) & 0x4045015 ^ v834 ^ v607;\n      v609 = 0;\n      v835 = v608;\n      v610 = 0;\n      v611 = 0;\n      v612 = v608 ^ *(_DWORD *)(v805 - 96);\n      v613 = *(_DWORD *)(v805 - 32) ^ __ROL4__(v608, 4);\n      v614 = v613;\n      v615 = (v613 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v616 = v614 & 0xFC00FC;\n      v617 = -167733504;\n      v886 = v615;\n      v616 |= 0xFF00FF00;\n      v618 = v616;\n      v619 = v612 & 0xFC00FC | 0xFF00FF00;\n      v620 = v615 - v616;\n      v859 = v616;\n      v913 = v612 & 0xFC00FC | 0xFF00FF00;\n      v939 = (v612 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v621 = v616;\n      v622 = (signed int *)&unk_4DDE0;\n      v623 = 0;\n      v624 = v939 - v618;\n      v625 = v619 - v618;\n      v802 = v620;\n      while ( 1 )\n      {\n        v622 += 4;\n        v626 = v602 & (v625 + v621);\n        v627 = v600 & (v624 + v621);\n        v628 = v621 + v802;\n        v611 ^= v621 & v601;\n        v621 += 524296;\n        v623 ^= v626;\n        v609 ^= v627;\n        v610 ^= v617 & v628;\n        if ( v622 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v601 = *v622;\n        v617 = v622[1];\n        v602 = v622[2];\n        v600 = v622[3];\n      }\n      v629 = 234941184;\n      v630 = -2097117952;\n      v631 = 2063609344;\n      v632 = ((16 * v623 & 15360 * ((v913 + 16777472) & 0x40004) ^ v623) >> 8) & 0xF000F0 | (16 * v609 & 15360 * ((v939 + 16777472) & 0x40004) ^ v609) & 0xF000F000 | ((16 * v610 & 15360 * ((v886 + 16777472) & 0x40004) ^ v610) >> 4) & 0xF000F00 | ((16 * v611 & 15360 * ((v859 + 16777472) & 0x40004) ^ v611) >> 12) & 0xF000F;\n      v633 = 16 * ((v632 ^ (v632 >> 4)) & 0x7030702) ^ (v632 ^ (v632 >> 4)) & 0x7030702 ^ v632;\n      v634 = (((v633 ^ (v633 >> 8)) & 0x4E009E) << 8) ^ (v633 ^ (v633 >> 8)) & 0x4E009E ^ v633;\n      v635 = ((unsigned __int16)((v634 ^ HIWORD(v634)) & 0xD9D3) << 16) ^ ((unsigned __int16)v634 ^ HIWORD(v634)) & 0xD9D3 ^ v634;\n      v636 = 16 * ((v635 ^ (v635 >> 4)) & 0x5040004) ^ (v635 ^ (v635 >> 4)) & 0x5040004 ^ v635;\n      v637 = 2 * ((v636 ^ (v636 >> 1)) & 0x4045015) ^ (v636 ^ (v636 >> 1)) & 0x4045015 ^ v819 ^ v636;\n      v638 = 0;\n      v820 = v637;\n      v639 = 0;\n      v640 = 0;\n      v641 = v637 ^ *(_DWORD *)(v805 - 92);\n      v642 = *(_DWORD *)(v805 - 28) ^ __ROL4__(v637, 4);\n      v643 = v642;\n      v644 = (v642 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v645 = v643 & 0xFC00FC;\n      v646 = -167733504;\n      v887 = v644;\n      v645 |= 0xFF00FF00;\n      v647 = v645;\n      v648 = v641 & 0xFC00FC | 0xFF00FF00;\n      v649 = v644 - v645;\n      v860 = v645;\n      v914 = v641 & 0xFC00FC | 0xFF00FF00;\n      v940 = (v641 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v650 = v645;\n      v651 = (signed int *)&unk_4DDE0;\n      v652 = 0;\n      v653 = v940 - v647;\n      v654 = v648 - v647;\n      while ( 1 )\n      {\n        v651 += 4;\n        v655 = v629 & (v653 + v650);\n        v640 ^= v650 & v630;\n        v656 = v650 + v649;\n        v652 ^= v631 & (v654 + v650);\n        v650 += 524296;\n        v638 ^= v655;\n        v639 ^= v646 & v656;\n        if ( v651 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v630 = *v651;\n        v646 = v651[1];\n        v631 = v651[2];\n        v629 = v651[3];\n      }\n      v657 = 234941184;\n      v658 = -2097117952;\n      v659 = 2063609344;\n      v660 = ((16 * v652 & 15360 * ((v914 + 16777472) & 0x40004) ^ v652) >> 8) & 0xF000F0 | (16 * v638 & 15360 * ((v940 + 16777472) & 0x40004) ^ v638) & 0xF000F000 | ((16 * v639 & 15360 * ((v887 + 16777472) & 0x40004) ^ v639) >> 4) & 0xF000F00 | ((16 * v640 & 15360 * ((v860 + 16777472) & 0x40004) ^ v640) >> 12) & 0xF000F;\n      v661 = 16 * ((v660 ^ (v660 >> 4)) & 0x7030702) ^ (v660 ^ (v660 >> 4)) & 0x7030702 ^ v660;\n      v662 = (((v661 ^ (v661 >> 8)) & 0x4E009E) << 8) ^ (v661 ^ (v661 >> 8)) & 0x4E009E ^ v661;\n      v663 = ((unsigned __int16)((v662 ^ HIWORD(v662)) & 0xD9D3) << 16) ^ ((unsigned __int16)v662 ^ HIWORD(v662)) & 0xD9D3 ^ v662;\n      v664 = 16 * ((v663 ^ (v663 >> 4)) & 0x5040004) ^ (v663 ^ (v663 >> 4)) & 0x5040004 ^ v663;\n      v665 = 2 * ((v664 ^ (v664 >> 1)) & 0x4045015) ^ (v664 ^ (v664 >> 1)) & 0x4045015 ^ v835 ^ v664;\n      v666 = 0;\n      v836 = v665;\n      v667 = 0;\n      v668 = 0;\n      v669 = v665 ^ *(_DWORD *)(v805 - 88);\n      v670 = *(_DWORD *)(v805 - 24) ^ __ROL4__(v665, 4);\n      v671 = v670;\n      v672 = (v670 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v673 = v671 & 0xFC00FC;\n      v674 = -167733504;\n      v888 = v672;\n      v673 |= 0xFF00FF00;\n      v675 = v673;\n      v676 = v669 & 0xFC00FC | 0xFF00FF00;\n      v677 = v672 - v673;\n      v861 = v673;\n      v915 = v669 & 0xFC00FC | 0xFF00FF00;\n      v941 = (v669 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v678 = v673;\n      v679 = (signed int *)&unk_4DDE0;\n      v680 = 0;\n      v681 = v941 - v675;\n      v682 = v676 - v675;\n      v803 = v677;\n      while ( 1 )\n      {\n        v679 += 4;\n        v683 = v659 & (v682 + v678);\n        v684 = v657 & (v681 + v678);\n        v685 = v678 + v803;\n        v668 ^= v678 & v658;\n        v678 += 524296;\n        v680 ^= v683;\n        v666 ^= v684;\n        v667 ^= v674 & v685;\n        if ( v679 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v658 = *v679;\n        v674 = v679[1];\n        v659 = v679[2];\n        v657 = v679[3];\n      }\n      v686 = 234941184;\n      v687 = -2097117952;\n      v688 = 2063609344;\n      v689 = ((16 * v680 & 15360 * ((v915 + 16777472) & 0x40004) ^ v680) >> 8) & 0xF000F0 | (16 * v666 & 15360 * ((v941 + 16777472) & 0x40004) ^ v666) & 0xF000F000 | ((16 * v667 & 15360 * ((v888 + 16777472) & 0x40004) ^ v667) >> 4) & 0xF000F00 | ((16 * v668 & 15360 * ((v861 + 16777472) & 0x40004) ^ v668) >> 12) & 0xF000F;\n      v690 = 16 * ((v689 ^ (v689 >> 4)) & 0x7030702) ^ (v689 ^ (v689 >> 4)) & 0x7030702 ^ v689;\n      v691 = (((v690 ^ (v690 >> 8)) & 0x4E009E) << 8) ^ (v690 ^ (v690 >> 8)) & 0x4E009E ^ v690;\n      v692 = ((unsigned __int16)((v691 ^ HIWORD(v691)) & 0xD9D3) << 16) ^ ((unsigned __int16)v691 ^ HIWORD(v691)) & 0xD9D3 ^ v691;\n      v693 = 16 * ((v692 ^ (v692 >> 4)) & 0x5040004) ^ (v692 ^ (v692 >> 4)) & 0x5040004 ^ v692;\n      v694 = 2 * ((v693 ^ (v693 >> 1)) & 0x4045015) ^ (v693 ^ (v693 >> 1)) & 0x4045015 ^ v820 ^ v693;\n      v695 = 0;\n      v821 = v694;\n      v696 = 0;\n      v697 = 0;\n      v698 = v694 ^ *(_DWORD *)(v805 - 84);\n      v699 = *(_DWORD *)(v805 - 20) ^ __ROL4__(v694, 4);\n      v700 = v699;\n      v701 = (v699 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v702 = v700 & 0xFC00FC;\n      v703 = -167733504;\n      v889 = v701;\n      v702 |= 0xFF00FF00;\n      v704 = v702;\n      v705 = v698 & 0xFC00FC | 0xFF00FF00;\n      v706 = v701 - v702;\n      v862 = v702;\n      v916 = v698 & 0xFC00FC | 0xFF00FF00;\n      v942 = (v698 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v707 = v702;\n      v708 = (signed int *)&unk_4DDE0;\n      v709 = 0;\n      v710 = v942 - v704;\n      v711 = v705 - v704;\n      while ( 1 )\n      {\n        v708 += 4;\n        v712 = v686 & (v710 + v707);\n        v697 ^= v707 & v687;\n        v713 = v707 + v706;\n        v709 ^= v688 & (v711 + v707);\n        v707 += 524296;\n        v695 ^= v712;\n        v696 ^= v703 & v713;\n        if ( v708 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v687 = *v708;\n        v703 = v708[1];\n        v688 = v708[2];\n        v686 = v708[3];\n      }\n      v714 = 234941184;\n      v715 = -2097117952;\n      v716 = 2063609344;\n      v717 = ((16 * v709 & 15360 * ((v916 + 16777472) & 0x40004) ^ v709) >> 8) & 0xF000F0 | (16 * v695 & 15360 * ((v942 + 16777472) & 0x40004) ^ v695) & 0xF000F000 | ((16 * v696 & 15360 * ((v889 + 16777472) & 0x40004) ^ v696) >> 4) & 0xF000F00 | ((16 * v697 & 15360 * ((v862 + 16777472) & 0x40004) ^ v697) >> 12) & 0xF000F;\n      v718 = 16 * ((v717 ^ (v717 >> 4)) & 0x7030702) ^ (v717 ^ (v717 >> 4)) & 0x7030702 ^ v717;\n      v719 = (((v718 ^ (v718 >> 8)) & 0x4E009E) << 8) ^ (v718 ^ (v718 >> 8)) & 0x4E009E ^ v718;\n      v720 = ((unsigned __int16)((v719 ^ HIWORD(v719)) & 0xD9D3) << 16) ^ ((unsigned __int16)v719 ^ HIWORD(v719)) & 0xD9D3 ^ v719;\n      v721 = 16 * ((v720 ^ (v720 >> 4)) & 0x5040004) ^ (v720 ^ (v720 >> 4)) & 0x5040004 ^ v720;\n      v722 = 2 * ((v721 ^ (v721 >> 1)) & 0x4045015) ^ (v721 ^ (v721 >> 1)) & 0x4045015 ^ v836 ^ v721;\n      v723 = 0;\n      v837 = v722;\n      v724 = 0;\n      v725 = 0;\n      v726 = v722 ^ *(_DWORD *)(v805 - 80);\n      v727 = *(_DWORD *)(v805 - 16) ^ __ROL4__(v722, 4);\n      v728 = v727;\n      v729 = (v727 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v730 = v728 & 0xFC00FC;\n      v731 = -167733504;\n      v890 = v729;\n      v730 |= 0xFF00FF00;\n      v732 = v730;\n      v733 = v726 & 0xFC00FC | 0xFF00FF00;\n      v734 = v729 - v730;\n      v863 = v730;\n      v917 = v726 & 0xFC00FC | 0xFF00FF00;\n      v943 = (v726 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v735 = v730;\n      v736 = (signed int *)&unk_4DDE0;\n      v737 = 0;\n      v738 = v943 - v732;\n      v739 = v733 - v732;\n      v804 = v734;\n      while ( 1 )\n      {\n        v736 += 4;\n        v740 = v716 & (v739 + v735);\n        v741 = v714 & (v738 + v735);\n        v742 = v735 + v804;\n        v725 ^= v735 & v715;\n        v735 += 524296;\n        v737 ^= v740;\n        v723 ^= v741;\n        v724 ^= v731 & v742;\n        if ( v736 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v715 = *v736;\n        v731 = v736[1];\n        v716 = v736[2];\n        v714 = v736[3];\n      }\n      v743 = 234941184;\n      v744 = -2097117952;\n      v745 = 2063609344;\n      v746 = ((16 * v737 & 15360 * ((v917 + 16777472) & 0x40004) ^ v737) >> 8) & 0xF000F0 | (16 * v723 & 15360 * ((v943 + 16777472) & 0x40004) ^ v723) & 0xF000F000 | ((16 * v724 & 15360 * ((v890 + 16777472) & 0x40004) ^ v724) >> 4) & 0xF000F00 | ((16 * v725 & 15360 * ((v863 + 16777472) & 0x40004) ^ v725) >> 12) & 0xF000F;\n      v747 = 16 * ((v746 ^ (v746 >> 4)) & 0x7030702) ^ (v746 ^ (v746 >> 4)) & 0x7030702 ^ v746;\n      v748 = (((v747 ^ (v747 >> 8)) & 0x4E009E) << 8) ^ (v747 ^ (v747 >> 8)) & 0x4E009E ^ v747;\n      v749 = ((unsigned __int16)((v748 ^ HIWORD(v748)) & 0xD9D3) << 16) ^ ((unsigned __int16)v748 ^ HIWORD(v748)) & 0xD9D3 ^ v748;\n      v750 = 16 * ((v749 ^ (v749 >> 4)) & 0x5040004) ^ (v749 ^ (v749 >> 4)) & 0x5040004 ^ v749;\n      v751 = 2 * ((v750 ^ (v750 >> 1)) & 0x4045015) ^ (v750 ^ (v750 >> 1)) & 0x4045015 ^ v821 ^ v750;\n      v752 = 0;\n      v822 = v751;\n      v753 = 0;\n      v754 = 0;\n      v755 = v751 ^ *(_DWORD *)(v805 - 76);\n      v756 = *(_DWORD *)(v805 - 12) ^ __ROL4__(v751, 4);\n      v757 = v756;\n      v758 = (v756 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v759 = v757 & 0xFC00FC;\n      v760 = -167733504;\n      v891 = v758;\n      v759 |= 0xFF00FF00;\n      v761 = v759;\n      v762 = v755 & 0xFC00FC | 0xFF00FF00;\n      v763 = v758 - v759;\n      v864 = v759;\n      v918 = v755 & 0xFC00FC | 0xFF00FF00;\n      v944 = (v755 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v764 = v759;\n      v765 = (signed int *)&unk_4DDE0;\n      v766 = 0;\n      v767 = v944 - v761;\n      v768 = v762 - v761;\n      while ( 1 )\n      {\n        v765 += 4;\n        v769 = v743 & (v767 + v764);\n        v754 ^= v764 & v744;\n        v770 = v764 + v763;\n        v766 ^= v745 & (v768 + v764);\n        v764 += 524296;\n        v752 ^= v769;\n        v753 ^= v760 & v770;\n        if ( v765 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v744 = *v765;\n        v760 = v765[1];\n        v745 = v765[2];\n        v743 = v765[3];\n      }\n      v771 = ((16 * v766 & 15360 * ((v918 + 16777472) & 0x40004) ^ v766) >> 8) & 0xF000F0 | (16 * v752 & 15360 * ((v944 + 16777472) & 0x40004) ^ v752) & 0xF000F000 | ((16 * v753 & 15360 * ((v891 + 16777472) & 0x40004) ^ v753) >> 4) & 0xF000F00 | ((16 * v754 & 15360 * ((v864 + 16777472) & 0x40004) ^ v754) >> 12) & 0xF000F;\n      v772 = (v771 ^ (v771 >> 4)) & 0x7030702;\n      v773 = (((16 * v772 ^ v772 ^ v771 ^ ((16 * v772 ^ v772 ^ v771) >> 8)) & 0x4E009E) << 8) ^ (16 * v772 ^ v772 ^ v771 ^ ((16 * v772 ^ v772 ^ v771) >> 8)) & 0x4E009E ^ 16 * v772 ^ v772 ^ v771;\n      v774 = ((unsigned __int16)((v773 ^ HIWORD(v773)) & 0xD9D3) << 16) ^ ((unsigned __int16)v773 ^ HIWORD(v773)) & 0xD9D3 ^ v773;\n      v775 = 16 * ((v774 ^ (v774 >> 4)) & 0x5040004) ^ (v774 ^ (v774 >> 4)) & 0x5040004 ^ v774;\n      v776 = __ROL4__(2 * ((v775 ^ (v775 >> 1)) & 0x4045015) ^ (v775 ^ (v775 >> 1)) & 0x4045015 ^ v837 ^ v775, 1);\n      v777 = (__ROL4__(v822, 1) ^ (v776 >> 1)) & 0x55555555;\n      v778 = 2 * v777 ^ v776;\n      v779 = (v778 ^ (((unsigned int)v777 ^ __ROL4__(v822, 1)) >> 8)) & 0xFF00FF;\n      v780 = v779 ^ v778;\n      v781 = v777 ^ __ROL4__(v822, 1) ^ (v779 << 8);\n      v782 = (v780 ^ (v781 >> 2)) & 0x33333333;\n      v783 = v782 ^ v780;\n      v784 = v781 ^ 4 * v782;\n      v785 = (unsigned __int16)(v784 ^ HIWORD(v783));\n      v786 = v785 ^ v784;\n      v787 = (v785 << 16) ^ v783;\n      v788 = (v786 ^ (v787 >> 4)) & 0xF0F0F0F;\n      v4 = v788 ^ v786;\n      v3 = 16 * v788 ^ v787;\n      v789 = v806;\n      *(_BYTE *)(v806 + 1) = BYTE2(v3);\n      *(_BYTE *)(v806 + 3) = v3;\n      *(_BYTE *)(v806 + 2) = BYTE1(v3);\n      *(_BYTE *)v806 = HIBYTE(v3);\n      *(_BYTE *)(v806 + 7) = v4;\n      *(_BYTE *)(v806 + 6) = BYTE1(v4);\n      *(_BYTE *)(v806 + 5) = BYTE2(v4);\n      v806 += 8LL;\n      *(_BYTE *)(v789 + 4) = HIBYTE(v4);\n      *(_DWORD *)(v805 - 8) = v3;\n      *(_DWORD *)(v805 - 4) = v4;\n    }\n    while ( v806 != v945 );\n  }\n}\n", 
            "funcStartAddr": "0x27290L", 
            "funcEndAddr": "0x2aaecL", 
            "funcName": "sub_27290"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2AAF0(__int64 a1, unsigned int *a2, int a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  unsigned int *v5; // r15\n  __int64 v6; // r13\n  __int64 v7; // rax\n  __int64 v8; // kr00_8\n  __int64 v9; // rax\n  int v10; // edx\n  int v11; // edi\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r14\n  int v14; // er12\n  __int64 v15; // rax\n  int v16; // edx\n  int v17; // edx\n  int v18; // edi\n  int v19; // edx\n  unsigned int v20; // edi\n  unsigned int v21; // edx\n  int v22; // ecx\n  int v23; // edx\n  int v24; // ecx\n  int v25; // esi\n  int v26; // ecx\n  int v27; // edx\n  signed __int64 v28; // [rsp+0h] [rbp-40h]\n  __int64 v29; // [rsp+8h] [rbp-38h]\n\n  if ( a3 > 0 )\n  {\n    v3 = a1 - 408;\n    v4 = a1;\n    v5 = a2;\n    v6 = a1 - 408 + 256;\n    v29 = a1 - 408 + 128;\n    v28 = (signed __int64)&a2[2 * ((unsigned int)(a3 - 1) >> 3) + 2];\n    do\n    {\n      v7 = sub_22860(((unsigned __int64)_byteswap_ulong(v5[1]) << 32) | _byteswap_ulong(*v5));\n      v8 = v7;\n      v9 = sub_228E0(v7, v6, 15LL, -1LL);\n      v10 = *(_DWORD *)(v4 - 12) ^ *(_DWORD *)(v4 - 4);\n      v11 = *(_DWORD *)(v4 - 16) ^ *(_DWORD *)(v4 - 8);\n      *(_QWORD *)(v4 - 8) = v8;\n      v12 = sub_228E0(\n              ((unsigned __int64)(HIDWORD(v9) ^ (unsigned int)v10) << 32) | v11 ^ (unsigned int)v9,\n              v29,\n              0LL,\n              1LL);\n      v13 = v12 >> 32;\n      *(_QWORD *)(v4 - 16) = v12;\n      v14 = v12;\n      v15 = sub_228E0((v12 >> 32 << 32) | (unsigned int)v12, v3, 15LL, -1LL);\n      v16 = *(_DWORD *)(v4 - 24);\n      *(_DWORD *)(v4 - 24) = v14;\n      v17 = v15 ^ v16;\n      LODWORD(v15) = *(_DWORD *)(v4 - 20) ^ HIDWORD(v15);\n      *(_DWORD *)(v4 - 20) = v13;\n      LODWORD(v15) = __ROL4__(v15, 1);\n      v18 = (v15 ^ (__ROL4__(v17, 1) >> 1)) & 0x55555555;\n      LODWORD(v15) = v18 ^ v15;\n      v19 = __ROL4__(v17, 1) ^ 2 * v18;\n      v20 = v15 ^ (((v19 ^ ((unsigned int)v15 >> 8)) & 0xFF00FF) << 8);\n      v21 = (v19 ^ ((unsigned int)v15 >> 8)) & 0xFF00FF ^ v19;\n      v5 += 2;\n      v22 = (v21 ^ (v20 >> 2)) & 0x33333333;\n      v23 = v22 ^ v21;\n      LODWORD(v15) = v20 ^ 4 * v22;\n      v24 = (unsigned __int16)(v15 ^ HIWORD(v23));\n      LODWORD(v15) = v24 ^ v15;\n      v25 = v23 ^ (v24 << 16);\n      v26 = (v15 ^ ((v23 ^ (unsigned int)(v24 << 16)) >> 4)) & 0xF0F0F0F;\n      LODWORD(v15) = v26 ^ v15;\n      *((_BYTE *)v5 - 1) = v15;\n      v27 = v25 ^ 16 * v26;\n      *((_BYTE *)v5 - 5) = v27;\n      *((_BYTE *)v5 - 6) = BYTE1(v27);\n      *((_BYTE *)v5 - 8) = HIBYTE(v27);\n      *((_BYTE *)v5 - 7) = (v25 ^ (unsigned int)(16 * v26)) >> 16;\n      *((_BYTE *)v5 - 2) = BYTE1(v15);\n      *((_BYTE *)v5 - 3) = BYTE2(v15);\n      *((_BYTE *)v5 - 4) = BYTE3(v15);\n    }\n    while ( v5 != (unsigned int *)v28 );\n  }\n}\n", 
            "funcStartAddr": "0x2aaf0L", 
            "funcEndAddr": "0x2acc2L", 
            "funcName": "sub_2AAF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2ACD0(__int64 a1, __int64 a2, int a3)\n{\n  signed int v3; // er9\n  signed int v4; // er11\n  unsigned __int32 v5; // ebx\n  unsigned __int32 v6; // edi\n  int v7; // eax\n  int v8; // edx\n  int v9; // eax\n  int v10; // esi\n  unsigned int v11; // eax\n  int v12; // edx\n  int v13; // ecx\n  int v14; // edx\n  int v15; // esi\n  unsigned int v16; // ecx\n  unsigned int v17; // eax\n  unsigned int v18; // ecx\n  int v19; // eax\n  int v20; // edx\n  int v21; // eax\n  unsigned int v22; // edx\n  unsigned int v23; // eax\n  signed int v24; // edi\n  int v25; // er12\n  int v26; // er13\n  int v27; // ebp\n  unsigned int v28; // ecx\n  unsigned int v29; // eax\n  int v30; // ebx\n  signed int v31; // ecx\n  int v32; // esi\n  unsigned int v33; // er14\n  int v34; // er8\n  int v35; // edx\n  signed int *v36; // rax\n  unsigned int v37; // ebx\n  int v38; // er15\n  int v39; // er14\n  int v40; // er8\n  int v41; // esi\n  int v42; // er10\n  signed int v43; // er9\n  signed int v44; // er11\n  signed int v45; // edi\n  unsigned int v46; // eax\n  unsigned int v47; // esi\n  unsigned int v48; // eax\n  unsigned int v49; // eax\n  unsigned int v50; // eax\n  unsigned int v51; // eax\n  int v52; // eax\n  int v53; // er12\n  int v54; // er13\n  int v55; // ebp\n  unsigned int v56; // edx\n  unsigned int v57; // eax\n  unsigned int v58; // ecx\n  unsigned int v59; // eax\n  int v60; // ebx\n  signed int v61; // ecx\n  int v62; // esi\n  unsigned int v63; // er14\n  int v64; // er8\n  int v65; // edx\n  signed int *v66; // rax\n  unsigned int v67; // ebx\n  int v68; // er15\n  int v69; // er14\n  int v70; // er8\n  int v71; // esi\n  int v72; // er10\n  signed int v73; // er9\n  signed int v74; // er11\n  signed int v75; // edi\n  unsigned int v76; // eax\n  unsigned int v77; // esi\n  unsigned int v78; // eax\n  unsigned int v79; // eax\n  unsigned int v80; // eax\n  unsigned int v81; // eax\n  int v82; // eax\n  int v83; // er12\n  int v84; // er13\n  int v85; // ebp\n  unsigned int v86; // edx\n  unsigned int v87; // eax\n  unsigned int v88; // ecx\n  unsigned int v89; // eax\n  int v90; // ebx\n  signed int v91; // ecx\n  int v92; // esi\n  unsigned int v93; // er14\n  int v94; // er8\n  int v95; // edx\n  signed int *v96; // rax\n  unsigned int v97; // ebx\n  int v98; // er15\n  int v99; // er14\n  int v100; // er8\n  int v101; // esi\n  int v102; // er10\n  signed int v103; // er9\n  signed int v104; // er11\n  signed int v105; // edi\n  unsigned int v106; // eax\n  unsigned int v107; // esi\n  unsigned int v108; // eax\n  unsigned int v109; // eax\n  unsigned int v110; // eax\n  unsigned int v111; // eax\n  int v112; // eax\n  int v113; // er12\n  int v114; // er13\n  int v115; // ebp\n  unsigned int v116; // edx\n  unsigned int v117; // eax\n  unsigned int v118; // ecx\n  unsigned int v119; // eax\n  int v120; // ebx\n  signed int v121; // ecx\n  int v122; // esi\n  unsigned int v123; // er14\n  int v124; // er8\n  int v125; // edx\n  signed int *v126; // rax\n  unsigned int v127; // ebx\n  int v128; // er15\n  int v129; // er14\n  int v130; // er8\n  int v131; // esi\n  int v132; // er10\n  signed int v133; // er9\n  signed int v134; // er11\n  signed int v135; // edi\n  unsigned int v136; // eax\n  unsigned int v137; // esi\n  unsigned int v138; // eax\n  unsigned int v139; // eax\n  unsigned int v140; // eax\n  unsigned int v141; // eax\n  int v142; // eax\n  int v143; // er12\n  int v144; // er13\n  int v145; // ebp\n  unsigned int v146; // edx\n  unsigned int v147; // eax\n  unsigned int v148; // ecx\n  unsigned int v149; // eax\n  int v150; // ebx\n  signed int v151; // ecx\n  int v152; // esi\n  unsigned int v153; // er14\n  int v154; // er8\n  int v155; // edx\n  signed int *v156; // rax\n  unsigned int v157; // ebx\n  int v158; // er15\n  int v159; // er14\n  int v160; // esi\n  int v161; // er10\n  signed int v162; // er9\n  signed int v163; // er11\n  signed int v164; // edi\n  unsigned int v165; // eax\n  unsigned int v166; // esi\n  unsigned int v167; // eax\n  unsigned int v168; // eax\n  unsigned int v169; // eax\n  unsigned int v170; // eax\n  int v171; // eax\n  int v172; // er12\n  int v173; // er13\n  int v174; // ebp\n  unsigned int v175; // edx\n  unsigned int v176; // eax\n  unsigned int v177; // ecx\n  unsigned int v178; // eax\n  int v179; // ebx\n  signed int v180; // ecx\n  int v181; // esi\n  unsigned int v182; // er14\n  int v183; // er8\n  int v184; // edx\n  signed int *v185; // rax\n  unsigned int v186; // ebx\n  int v187; // er15\n  int v188; // er14\n  int v189; // er8\n  int v190; // esi\n  int v191; // er10\n  signed int v192; // er9\n  signed int v193; // er11\n  signed int v194; // edi\n  unsigned int v195; // eax\n  unsigned int v196; // esi\n  unsigned int v197; // eax\n  unsigned int v198; // eax\n  unsigned int v199; // eax\n  unsigned int v200; // eax\n  int v201; // eax\n  int v202; // er12\n  int v203; // er13\n  int v204; // ebp\n  unsigned int v205; // edx\n  unsigned int v206; // eax\n  unsigned int v207; // ecx\n  unsigned int v208; // eax\n  int v209; // ebx\n  signed int v210; // ecx\n  int v211; // esi\n  unsigned int v212; // er14\n  int v213; // er8\n  int v214; // edx\n  signed int *v215; // rax\n  unsigned int v216; // ebx\n  int v217; // er15\n  int v218; // er14\n  int v219; // esi\n  int v220; // er10\n  signed int v221; // er9\n  signed int v222; // er11\n  signed int v223; // edi\n  unsigned int v224; // eax\n  unsigned int v225; // esi\n  unsigned int v226; // eax\n  unsigned int v227; // eax\n  unsigned int v228; // eax\n  unsigned int v229; // eax\n  int v230; // eax\n  int v231; // er12\n  int v232; // er13\n  int v233; // ebp\n  unsigned int v234; // edx\n  unsigned int v235; // eax\n  unsigned int v236; // ecx\n  unsigned int v237; // eax\n  int v238; // ebx\n  signed int v239; // ecx\n  int v240; // esi\n  unsigned int v241; // er14\n  int v242; // er8\n  int v243; // edx\n  signed int *v244; // rax\n  unsigned int v245; // ebx\n  int v246; // er15\n  int v247; // er14\n  int v248; // er8\n  int v249; // esi\n  int v250; // er10\n  signed int v251; // er9\n  signed int v252; // er11\n  signed int v253; // edi\n  unsigned int v254; // eax\n  unsigned int v255; // esi\n  unsigned int v256; // eax\n  unsigned int v257; // eax\n  unsigned int v258; // eax\n  unsigned int v259; // eax\n  int v260; // eax\n  int v261; // er12\n  int v262; // er13\n  int v263; // ebp\n  unsigned int v264; // edx\n  unsigned int v265; // eax\n  unsigned int v266; // ecx\n  unsigned int v267; // eax\n  int v268; // ebx\n  signed int v269; // ecx\n  int v270; // esi\n  unsigned int v271; // er14\n  int v272; // er8\n  int v273; // edx\n  signed int *v274; // rax\n  unsigned int v275; // ebx\n  int v276; // er15\n  int v277; // er14\n  int v278; // esi\n  int v279; // er10\n  signed int v280; // er9\n  signed int v281; // er11\n  signed int v282; // edi\n  unsigned int v283; // eax\n  unsigned int v284; // esi\n  unsigned int v285; // eax\n  unsigned int v286; // eax\n  unsigned int v287; // eax\n  unsigned int v288; // eax\n  int v289; // eax\n  int v290; // er12\n  int v291; // er13\n  int v292; // ebp\n  unsigned int v293; // edx\n  unsigned int v294; // eax\n  unsigned int v295; // ecx\n  unsigned int v296; // eax\n  int v297; // ebx\n  signed int v298; // ecx\n  int v299; // esi\n  unsigned int v300; // er14\n  int v301; // er8\n  int v302; // edx\n  signed int *v303; // rax\n  unsigned int v304; // ebx\n  int v305; // er15\n  int v306; // er14\n  int v307; // er8\n  int v308; // esi\n  int v309; // er10\n  signed int v310; // er9\n  signed int v311; // er11\n  signed int v312; // edi\n  unsigned int v313; // eax\n  unsigned int v314; // esi\n  unsigned int v315; // eax\n  unsigned int v316; // eax\n  unsigned int v317; // eax\n  unsigned int v318; // eax\n  int v319; // eax\n  int v320; // er12\n  int v321; // er13\n  int v322; // ebp\n  unsigned int v323; // edx\n  unsigned int v324; // eax\n  unsigned int v325; // ecx\n  unsigned int v326; // eax\n  int v327; // ebx\n  signed int v328; // ecx\n  int v329; // esi\n  unsigned int v330; // er14\n  int v331; // er8\n  int v332; // edx\n  signed int *v333; // rax\n  unsigned int v334; // ebx\n  int v335; // er15\n  int v336; // er14\n  int v337; // esi\n  int v338; // er10\n  signed int v339; // er9\n  signed int v340; // er11\n  signed int v341; // edi\n  unsigned int v342; // eax\n  unsigned int v343; // esi\n  unsigned int v344; // eax\n  unsigned int v345; // eax\n  unsigned int v346; // eax\n  unsigned int v347; // eax\n  int v348; // eax\n  int v349; // er12\n  int v350; // er13\n  int v351; // ebp\n  unsigned int v352; // edx\n  unsigned int v353; // eax\n  unsigned int v354; // ecx\n  unsigned int v355; // eax\n  int v356; // ebx\n  signed int v357; // ecx\n  int v358; // esi\n  unsigned int v359; // er14\n  int v360; // er8\n  int v361; // edx\n  signed int *v362; // rax\n  unsigned int v363; // ebx\n  int v364; // er15\n  int v365; // er14\n  int v366; // er8\n  int v367; // esi\n  int v368; // er10\n  signed int v369; // er9\n  signed int v370; // er11\n  signed int v371; // edi\n  unsigned int v372; // eax\n  unsigned int v373; // esi\n  unsigned int v374; // eax\n  unsigned int v375; // eax\n  unsigned int v376; // eax\n  unsigned int v377; // eax\n  int v378; // eax\n  int v379; // er12\n  int v380; // er13\n  int v381; // ebp\n  unsigned int v382; // edx\n  unsigned int v383; // eax\n  unsigned int v384; // ecx\n  unsigned int v385; // eax\n  int v386; // ebx\n  signed int v387; // ecx\n  int v388; // esi\n  unsigned int v389; // er14\n  int v390; // er8\n  int v391; // edx\n  signed int *v392; // rax\n  unsigned int v393; // ebx\n  int v394; // er15\n  int v395; // er14\n  int v396; // esi\n  int v397; // er10\n  signed int v398; // er9\n  signed int v399; // er11\n  signed int v400; // edi\n  unsigned int v401; // eax\n  unsigned int v402; // esi\n  unsigned int v403; // eax\n  unsigned int v404; // eax\n  unsigned int v405; // eax\n  unsigned int v406; // eax\n  int v407; // eax\n  int v408; // er12\n  int v409; // er13\n  int v410; // ebp\n  unsigned int v411; // edx\n  unsigned int v412; // eax\n  unsigned int v413; // ecx\n  unsigned int v414; // eax\n  int v415; // ebx\n  signed int v416; // ecx\n  int v417; // esi\n  unsigned int v418; // er14\n  int v419; // er8\n  int v420; // edx\n  signed int *v421; // rax\n  unsigned int v422; // ebx\n  int v423; // er15\n  int v424; // er14\n  int v425; // er8\n  int v426; // esi\n  int v427; // er10\n  signed int v428; // er9\n  signed int v429; // er11\n  signed int v430; // edi\n  unsigned int v431; // eax\n  unsigned int v432; // esi\n  unsigned int v433; // eax\n  unsigned int v434; // eax\n  unsigned int v435; // eax\n  unsigned int v436; // eax\n  int v437; // eax\n  int v438; // er12\n  int v439; // er13\n  int v440; // ebp\n  unsigned int v441; // edx\n  unsigned int v442; // eax\n  unsigned int v443; // ecx\n  unsigned int v444; // eax\n  int v445; // ebx\n  signed int v446; // ecx\n  int v447; // esi\n  unsigned int v448; // er14\n  int v449; // er8\n  int v450; // edx\n  signed int *v451; // rax\n  unsigned int v452; // ebx\n  int v453; // er15\n  int v454; // er14\n  int v455; // esi\n  int v456; // er10\n  signed int v457; // er9\n  signed int v458; // er11\n  signed int v459; // edi\n  unsigned int v460; // eax\n  unsigned int v461; // esi\n  unsigned int v462; // eax\n  unsigned int v463; // eax\n  unsigned int v464; // eax\n  unsigned int v465; // eax\n  int v466; // eax\n  int v467; // er12\n  int v468; // er13\n  int v469; // ebp\n  unsigned int v470; // edx\n  unsigned int v471; // eax\n  unsigned int v472; // ecx\n  unsigned int v473; // eax\n  int v474; // ebx\n  signed int v475; // ecx\n  int v476; // esi\n  unsigned int v477; // er14\n  int v478; // er8\n  int v479; // edx\n  signed int *v480; // rax\n  unsigned int v481; // ebx\n  int v482; // er15\n  int v483; // er14\n  int v484; // er8\n  int v485; // esi\n  int v486; // er10\n  unsigned int v487; // esi\n  int v488; // eax\n  unsigned int v489; // eax\n  unsigned int v490; // eax\n  unsigned int v491; // eax\n  int v492; // er12\n  int v493; // er13\n  unsigned __int64 v494; // rax\n  signed int v495; // er9\n  signed int v496; // edi\n  signed int v497; // er11\n  unsigned int v498; // ebp\n  unsigned int v499; // edx\n  int v500; // ecx\n  int v501; // ebx\n  signed int v502; // ecx\n  int v503; // esi\n  unsigned int v504; // er14\n  int v505; // er8\n  int v506; // edx\n  signed int *v507; // rax\n  unsigned int v508; // ebx\n  int v509; // er15\n  int v510; // er14\n  int v511; // esi\n  int v512; // er10\n  __int64 v513; // r14\n  unsigned int v514; // eax\n  unsigned int v515; // esi\n  unsigned int v516; // eax\n  unsigned int v517; // eax\n  unsigned int v518; // eax\n  unsigned int v519; // eax\n  int v520; // ebx\n  int v521; // er12\n  int v522; // er13\n  int v523; // ebp\n  int v524; // ebx\n  int v525; // ebp\n  int v526; // ebp\n  signed int v527; // er9\n  signed int v528; // edi\n  unsigned int v529; // eax\n  signed int v530; // er11\n  unsigned int v531; // edx\n  int v532; // ebp\n  unsigned int v533; // ecx\n  unsigned int v534; // eax\n  int v535; // ebx\n  signed int v536; // ecx\n  int v537; // esi\n  int v538; // er8\n  int v539; // edx\n  signed int *v540; // rax\n  unsigned int v541; // ebx\n  int v542; // er15\n  int v543; // er14\n  int v544; // er8\n  int v545; // esi\n  int v546; // er10\n  signed int v547; // er9\n  signed int v548; // er11\n  signed int v549; // edi\n  unsigned int v550; // eax\n  unsigned int v551; // esi\n  unsigned int v552; // eax\n  unsigned int v553; // eax\n  unsigned int v554; // eax\n  unsigned int v555; // eax\n  int v556; // eax\n  int v557; // er12\n  int v558; // er13\n  int v559; // ebp\n  unsigned int v560; // edx\n  unsigned int v561; // eax\n  unsigned int v562; // ecx\n  unsigned int v563; // eax\n  int v564; // ebx\n  signed int v565; // ecx\n  int v566; // esi\n  unsigned int v567; // er14\n  int v568; // er8\n  int v569; // edx\n  signed int *v570; // rax\n  unsigned int v571; // ebx\n  int v572; // er15\n  int v573; // er14\n  int v574; // esi\n  int v575; // er10\n  signed int v576; // er9\n  signed int v577; // er11\n  signed int v578; // edi\n  unsigned int v579; // eax\n  unsigned int v580; // esi\n  unsigned int v581; // eax\n  unsigned int v582; // eax\n  unsigned int v583; // eax\n  unsigned int v584; // eax\n  int v585; // eax\n  int v586; // er12\n  int v587; // er13\n  int v588; // ebp\n  unsigned int v589; // edx\n  unsigned int v590; // eax\n  unsigned int v591; // ecx\n  unsigned int v592; // eax\n  int v593; // ebx\n  signed int v594; // ecx\n  int v595; // esi\n  unsigned int v596; // er14\n  int v597; // er8\n  int v598; // edx\n  signed int *v599; // rax\n  unsigned int v600; // ebx\n  int v601; // er15\n  int v602; // er14\n  int v603; // er8\n  int v604; // esi\n  int v605; // er10\n  signed int v606; // er9\n  signed int v607; // er11\n  signed int v608; // edi\n  unsigned int v609; // eax\n  unsigned int v610; // esi\n  unsigned int v611; // eax\n  unsigned int v612; // eax\n  unsigned int v613; // eax\n  unsigned int v614; // eax\n  int v615; // eax\n  int v616; // er12\n  int v617; // er13\n  int v618; // ebp\n  unsigned int v619; // edx\n  unsigned int v620; // eax\n  unsigned int v621; // ecx\n  unsigned int v622; // eax\n  int v623; // ebx\n  signed int v624; // ecx\n  int v625; // esi\n  unsigned int v626; // er14\n  int v627; // er8\n  int v628; // edx\n  signed int *v629; // rax\n  unsigned int v630; // ebx\n  int v631; // er15\n  int v632; // er14\n  int v633; // esi\n  int v634; // er10\n  signed int v635; // er9\n  signed int v636; // er11\n  signed int v637; // edi\n  unsigned int v638; // eax\n  unsigned int v639; // esi\n  unsigned int v640; // eax\n  unsigned int v641; // eax\n  unsigned int v642; // eax\n  unsigned int v643; // eax\n  int v644; // eax\n  int v645; // er12\n  int v646; // er13\n  int v647; // ebp\n  unsigned int v648; // edx\n  unsigned int v649; // eax\n  unsigned int v650; // ecx\n  unsigned int v651; // eax\n  int v652; // ebx\n  signed int v653; // ecx\n  int v654; // esi\n  unsigned int v655; // er14\n  int v656; // er8\n  int v657; // edx\n  signed int *v658; // rax\n  unsigned int v659; // ebx\n  int v660; // er15\n  int v661; // er14\n  int v662; // er8\n  int v663; // esi\n  int v664; // er10\n  signed int v665; // er9\n  signed int v666; // er11\n  signed int v667; // edi\n  unsigned int v668; // eax\n  unsigned int v669; // esi\n  unsigned int v670; // eax\n  unsigned int v671; // eax\n  unsigned int v672; // eax\n  unsigned int v673; // eax\n  int v674; // eax\n  int v675; // er12\n  int v676; // er13\n  int v677; // ebp\n  unsigned int v678; // edx\n  unsigned int v679; // eax\n  unsigned int v680; // ecx\n  unsigned int v681; // eax\n  int v682; // ebx\n  signed int v683; // ecx\n  int v684; // esi\n  unsigned int v685; // er14\n  int v686; // er8\n  int v687; // edx\n  signed int *v688; // rax\n  unsigned int v689; // ebx\n  int v690; // er15\n  int v691; // er14\n  int v692; // esi\n  int v693; // er10\n  signed int v694; // er9\n  signed int v695; // er11\n  signed int v696; // edi\n  unsigned int v697; // eax\n  unsigned int v698; // esi\n  unsigned int v699; // eax\n  unsigned int v700; // eax\n  unsigned int v701; // eax\n  unsigned int v702; // eax\n  int v703; // eax\n  int v704; // er12\n  int v705; // er13\n  int v706; // ebp\n  unsigned int v707; // edx\n  unsigned int v708; // eax\n  unsigned int v709; // ecx\n  unsigned int v710; // eax\n  int v711; // ebx\n  signed int v712; // ecx\n  int v713; // esi\n  unsigned int v714; // er14\n  int v715; // er8\n  int v716; // edx\n  signed int *v717; // rax\n  unsigned int v718; // ebx\n  int v719; // er15\n  int v720; // er14\n  int v721; // er8\n  int v722; // esi\n  int v723; // er10\n  signed int v724; // er9\n  signed int v725; // er11\n  signed int v726; // edi\n  unsigned int v727; // eax\n  unsigned int v728; // esi\n  unsigned int v729; // eax\n  unsigned int v730; // eax\n  unsigned int v731; // eax\n  unsigned int v732; // eax\n  int v733; // eax\n  int v734; // er12\n  int v735; // er13\n  int v736; // ebp\n  unsigned int v737; // edx\n  unsigned int v738; // eax\n  unsigned int v739; // ecx\n  unsigned int v740; // eax\n  int v741; // ebx\n  signed int v742; // ecx\n  int v743; // esi\n  unsigned int v744; // er14\n  int v745; // er8\n  int v746; // edx\n  signed int *v747; // rax\n  unsigned int v748; // ebx\n  int v749; // er15\n  int v750; // er14\n  int v751; // esi\n  int v752; // er10\n  signed int v753; // er9\n  signed int v754; // er11\n  signed int v755; // edi\n  unsigned int v756; // eax\n  unsigned int v757; // esi\n  unsigned int v758; // eax\n  unsigned int v759; // eax\n  unsigned int v760; // eax\n  unsigned int v761; // eax\n  int v762; // eax\n  int v763; // er12\n  int v764; // er13\n  int v765; // ebp\n  unsigned int v766; // edx\n  unsigned int v767; // eax\n  unsigned int v768; // ecx\n  unsigned int v769; // eax\n  int v770; // ebx\n  signed int v771; // ecx\n  int v772; // esi\n  unsigned int v773; // er14\n  int v774; // er8\n  int v775; // edx\n  signed int *v776; // rax\n  unsigned int v777; // ebx\n  int v778; // er15\n  int v779; // er14\n  int v780; // er8\n  int v781; // esi\n  int v782; // er10\n  signed int v783; // er9\n  signed int v784; // er11\n  signed int v785; // edi\n  unsigned int v786; // eax\n  unsigned int v787; // esi\n  unsigned int v788; // eax\n  unsigned int v789; // eax\n  unsigned int v790; // eax\n  unsigned int v791; // eax\n  int v792; // eax\n  int v793; // er12\n  int v794; // er13\n  int v795; // ebp\n  unsigned int v796; // edx\n  unsigned int v797; // eax\n  unsigned int v798; // ecx\n  unsigned int v799; // eax\n  int v800; // ebx\n  signed int v801; // ecx\n  int v802; // esi\n  unsigned int v803; // er14\n  int v804; // er8\n  int v805; // edx\n  signed int *v806; // rax\n  unsigned int v807; // ebx\n  int v808; // er15\n  int v809; // er14\n  int v810; // esi\n  int v811; // er10\n  unsigned int v812; // eax\n  unsigned int v813; // esi\n  unsigned int v814; // eax\n  unsigned int v815; // eax\n  unsigned int v816; // eax\n  unsigned int v817; // eax\n  unsigned int v818; // eax\n  int v819; // esi\n  int v820; // edx\n  int v821; // eax\n  unsigned int v822; // ecx\n  unsigned int v823; // esi\n  int v824; // ecx\n  unsigned int v825; // esi\n  int v826; // eax\n  int v827; // edx\n  int v828; // eax\n  int v829; // edx\n  int v830; // esi\n  int v831; // edx\n  int v832; // ecx\n  unsigned int v833; // eax\n  int v834; // ecx\n  int v835; // eax\n  bool v836; // zf\n  int v837; // [rsp+4h] [rbp-7Ch]\n  int v838; // [rsp+4h] [rbp-7Ch]\n  int v839; // [rsp+4h] [rbp-7Ch]\n  int v840; // [rsp+4h] [rbp-7Ch]\n  int v841; // [rsp+4h] [rbp-7Ch]\n  int v842; // [rsp+4h] [rbp-7Ch]\n  int v843; // [rsp+4h] [rbp-7Ch]\n  int v844; // [rsp+4h] [rbp-7Ch]\n  int v845; // [rsp+4h] [rbp-7Ch]\n  int v846; // [rsp+4h] [rbp-7Ch]\n  int v847; // [rsp+4h] [rbp-7Ch]\n  int v848; // [rsp+4h] [rbp-7Ch]\n  int v849; // [rsp+4h] [rbp-7Ch]\n  int v850; // [rsp+4h] [rbp-7Ch]\n  int v851; // [rsp+4h] [rbp-7Ch]\n  __int64 v852; // [rsp+8h] [rbp-78h]\n  __int64 v853; // [rsp+10h] [rbp-70h]\n  __int64 v854; // [rsp+18h] [rbp-68h]\n  int v855; // [rsp+18h] [rbp-68h]\n  int v856; // [rsp+18h] [rbp-68h]\n  int v857; // [rsp+18h] [rbp-68h]\n  int v858; // [rsp+18h] [rbp-68h]\n  int v859; // [rsp+18h] [rbp-68h]\n  int v860; // [rsp+18h] [rbp-68h]\n  int v861; // [rsp+18h] [rbp-68h]\n  int v862; // [rsp+18h] [rbp-68h]\n  int v863; // [rsp+18h] [rbp-68h]\n  int v864; // [rsp+18h] [rbp-68h]\n  int v865; // [rsp+18h] [rbp-68h]\n  int v866; // [rsp+18h] [rbp-68h]\n  int v867; // [rsp+18h] [rbp-68h]\n  int v868; // [rsp+18h] [rbp-68h]\n  int v869; // [rsp+18h] [rbp-68h]\n  int v870; // [rsp+20h] [rbp-60h]\n  int v871; // [rsp+20h] [rbp-60h]\n  int v872; // [rsp+20h] [rbp-60h]\n  int v873; // [rsp+20h] [rbp-60h]\n  int v874; // [rsp+20h] [rbp-60h]\n  int v875; // [rsp+20h] [rbp-60h]\n  int v876; // [rsp+20h] [rbp-60h]\n  int v877; // [rsp+20h] [rbp-60h]\n  int v878; // [rsp+20h] [rbp-60h]\n  int v879; // [rsp+20h] [rbp-60h]\n  int v880; // [rsp+20h] [rbp-60h]\n  int v881; // [rsp+20h] [rbp-60h]\n  int v882; // [rsp+20h] [rbp-60h]\n  int v883; // [rsp+20h] [rbp-60h]\n  unsigned __int32 v884; // [rsp+24h] [rbp-5Ch]\n  unsigned __int32 v885; // [rsp+28h] [rbp-58h]\n  int v886; // [rsp+2Ch] [rbp-54h]\n  int v887; // [rsp+2Ch] [rbp-54h]\n  int v888; // [rsp+2Ch] [rbp-54h]\n  int v889; // [rsp+2Ch] [rbp-54h]\n  int v890; // [rsp+2Ch] [rbp-54h]\n  int v891; // [rsp+2Ch] [rbp-54h]\n  int v892; // [rsp+2Ch] [rbp-54h]\n  int v893; // [rsp+2Ch] [rbp-54h]\n  int v894; // [rsp+2Ch] [rbp-54h]\n  int v895; // [rsp+2Ch] [rbp-54h]\n  int v896; // [rsp+2Ch] [rbp-54h]\n  int v897; // [rsp+2Ch] [rbp-54h]\n  int v898; // [rsp+2Ch] [rbp-54h]\n  int v899; // [rsp+2Ch] [rbp-54h]\n  int v900; // [rsp+2Ch] [rbp-54h]\n  int v901; // [rsp+2Ch] [rbp-54h]\n  int v902; // [rsp+2Ch] [rbp-54h]\n  int v903; // [rsp+2Ch] [rbp-54h]\n  int v904; // [rsp+2Ch] [rbp-54h]\n  int v905; // [rsp+2Ch] [rbp-54h]\n  int v906; // [rsp+2Ch] [rbp-54h]\n  int v907; // [rsp+2Ch] [rbp-54h]\n  int v908; // [rsp+2Ch] [rbp-54h]\n  int v909; // [rsp+2Ch] [rbp-54h]\n  int v910; // [rsp+2Ch] [rbp-54h]\n  int v911; // [rsp+2Ch] [rbp-54h]\n  int v912; // [rsp+2Ch] [rbp-54h]\n  unsigned int v913; // [rsp+30h] [rbp-50h]\n  unsigned int v914; // [rsp+30h] [rbp-50h]\n  unsigned int v915; // [rsp+30h] [rbp-50h]\n  unsigned int v916; // [rsp+30h] [rbp-50h]\n  unsigned int v917; // [rsp+30h] [rbp-50h]\n  unsigned int v918; // [rsp+30h] [rbp-50h]\n  unsigned int v919; // [rsp+30h] [rbp-50h]\n  unsigned int v920; // [rsp+30h] [rbp-50h]\n  unsigned int v921; // [rsp+30h] [rbp-50h]\n  unsigned int v922; // [rsp+30h] [rbp-50h]\n  unsigned int v923; // [rsp+30h] [rbp-50h]\n  unsigned int v924; // [rsp+30h] [rbp-50h]\n  unsigned int v925; // [rsp+30h] [rbp-50h]\n  unsigned int v926; // [rsp+30h] [rbp-50h]\n  unsigned int v927; // [rsp+30h] [rbp-50h]\n  unsigned int v928; // [rsp+30h] [rbp-50h]\n  unsigned int v929; // [rsp+30h] [rbp-50h]\n  unsigned int v930; // [rsp+30h] [rbp-50h]\n  unsigned int v931; // [rsp+30h] [rbp-50h]\n  unsigned int v932; // [rsp+30h] [rbp-50h]\n  unsigned int v933; // [rsp+30h] [rbp-50h]\n  unsigned int v934; // [rsp+30h] [rbp-50h]\n  unsigned int v935; // [rsp+30h] [rbp-50h]\n  unsigned int v936; // [rsp+30h] [rbp-50h]\n  unsigned int v937; // [rsp+30h] [rbp-50h]\n  unsigned int v938; // [rsp+30h] [rbp-50h]\n  unsigned int v939; // [rsp+30h] [rbp-50h]\n  unsigned int v940; // [rsp+34h] [rbp-4Ch]\n  unsigned int v941; // [rsp+34h] [rbp-4Ch]\n  unsigned int v942; // [rsp+34h] [rbp-4Ch]\n  unsigned int v943; // [rsp+34h] [rbp-4Ch]\n  unsigned int v944; // [rsp+34h] [rbp-4Ch]\n  unsigned int v945; // [rsp+34h] [rbp-4Ch]\n  unsigned int v946; // [rsp+34h] [rbp-4Ch]\n  unsigned int v947; // [rsp+34h] [rbp-4Ch]\n  unsigned int v948; // [rsp+34h] [rbp-4Ch]\n  unsigned int v949; // [rsp+34h] [rbp-4Ch]\n  unsigned int v950; // [rsp+34h] [rbp-4Ch]\n  unsigned int v951; // [rsp+34h] [rbp-4Ch]\n  unsigned int v952; // [rsp+34h] [rbp-4Ch]\n  unsigned int v953; // [rsp+34h] [rbp-4Ch]\n  unsigned int v954; // [rsp+34h] [rbp-4Ch]\n  unsigned int v955; // [rsp+34h] [rbp-4Ch]\n  unsigned int v956; // [rsp+34h] [rbp-4Ch]\n  unsigned int v957; // [rsp+34h] [rbp-4Ch]\n  unsigned int v958; // [rsp+34h] [rbp-4Ch]\n  unsigned int v959; // [rsp+34h] [rbp-4Ch]\n  unsigned int v960; // [rsp+34h] [rbp-4Ch]\n  unsigned int v961; // [rsp+34h] [rbp-4Ch]\n  unsigned int v962; // [rsp+34h] [rbp-4Ch]\n  unsigned int v963; // [rsp+34h] [rbp-4Ch]\n  unsigned int v964; // [rsp+34h] [rbp-4Ch]\n  unsigned int v965; // [rsp+34h] [rbp-4Ch]\n  unsigned int v966; // [rsp+34h] [rbp-4Ch]\n  unsigned int v967; // [rsp+38h] [rbp-48h]\n  unsigned int v968; // [rsp+38h] [rbp-48h]\n  unsigned int v969; // [rsp+38h] [rbp-48h]\n  unsigned int v970; // [rsp+38h] [rbp-48h]\n  unsigned int v971; // [rsp+38h] [rbp-48h]\n  unsigned int v972; // [rsp+38h] [rbp-48h]\n  unsigned int v973; // [rsp+38h] [rbp-48h]\n  unsigned int v974; // [rsp+38h] [rbp-48h]\n  unsigned int v975; // [rsp+38h] [rbp-48h]\n  unsigned int v976; // [rsp+38h] [rbp-48h]\n  unsigned int v977; // [rsp+38h] [rbp-48h]\n  unsigned int v978; // [rsp+38h] [rbp-48h]\n  unsigned int v979; // [rsp+38h] [rbp-48h]\n  unsigned int v980; // [rsp+38h] [rbp-48h]\n  unsigned int v981; // [rsp+38h] [rbp-48h]\n  unsigned int v982; // [rsp+38h] [rbp-48h]\n  int v983; // [rsp+38h] [rbp-48h]\n  unsigned int v984; // [rsp+38h] [rbp-48h]\n  unsigned int v985; // [rsp+38h] [rbp-48h]\n  unsigned int v986; // [rsp+38h] [rbp-48h]\n  unsigned int v987; // [rsp+38h] [rbp-48h]\n  unsigned int v988; // [rsp+38h] [rbp-48h]\n  unsigned int v989; // [rsp+38h] [rbp-48h]\n  unsigned int v990; // [rsp+38h] [rbp-48h]\n  unsigned int v991; // [rsp+38h] [rbp-48h]\n  unsigned int v992; // [rsp+38h] [rbp-48h]\n  unsigned int v993; // [rsp+38h] [rbp-48h]\n  signed __int64 v994; // [rsp+40h] [rbp-40h]\n  __int64 v995; // [rsp+48h] [rbp-38h]\n\n  v852 = a1;\n  v853 = a2;\n  if ( a3 > 0 )\n  {\n    v995 = a1 - 264;\n    v994 = a2 + 8LL * ((unsigned int)(a3 - 1) >> 3) + 8;\n    do\n    {\n      v3 = 234941184;\n      v4 = -2097117952;\n      v5 = _byteswap_ulong(*(_DWORD *)v853);\n      v884 = v5;\n      v6 = _byteswap_ulong(*(_DWORD *)(v853 + 4));\n      v885 = v6;\n      v7 = (v6 ^ (v5 >> 4)) & 0xF0F0F0F;\n      v8 = v7;\n      v9 = v6 ^ v7;\n      v10 = (unsigned __int16)(v9 ^ ((v5 ^ 16 * v8) >> 16));\n      v11 = v10 ^ v9;\n      v12 = v5 ^ 16 * v8 ^ (v10 << 16);\n      v13 = (v12 ^ (v11 >> 2)) & 0x33333333;\n      v14 = v13 ^ v12;\n      v15 = v11 ^ 4 * v13;\n      v16 = (v14 ^ ((v11 ^ 4 * v13) >> 8)) & 0xFF00FF;\n      v17 = v16;\n      v18 = v14 ^ v16;\n      v19 = v15 ^ (v17 << 8);\n      v20 = (v19 ^ (v18 >> 1)) & 0x55555555;\n      v21 = v20 ^ v19;\n      v855 = __ROR4__(v18 ^ 2 * v20, 1);\n      v870 = __ROR4__(v21, 1);\n      v22 = __ROR4__(v21, 1) ^ *(_DWORD *)(v852 - 76);\n      v23 = *(_DWORD *)(v852 - 12) ^ __ROL4__(v21, 3);\n      v24 = 2063609344;\n      v25 = 0;\n      v26 = 0;\n      v27 = 0;\n      v28 = v23;\n      v29 = (v23 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v30 = v28 & 0xFC00FC;\n      v31 = -167733504;\n      v913 = v29;\n      v30 |= 0xFF00FF00;\n      v32 = v30;\n      v33 = v22 & 0xFC00FC | 0xFF00FF00;\n      v34 = v29 - v30;\n      v886 = v30;\n      v940 = v22 & 0xFC00FC | 0xFF00FF00;\n      v967 = (v22 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v35 = v30;\n      v36 = (signed int *)&unk_4DDE0;\n      v37 = 0;\n      v38 = v967 - v32;\n      v39 = v33 - v32;\n      v837 = v34;\n      while ( 1 )\n      {\n        v36 += 4;\n        v40 = v24 & (v39 + v35);\n        v41 = v3 & (v38 + v35);\n        v42 = v35 + v837;\n        v37 ^= v35 & v4;\n        v35 += 524296;\n        v26 ^= v40;\n        v25 ^= v41;\n        v27 ^= v31 & v42;\n        if ( v36 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v4 = *v36;\n        v31 = v36[1];\n        v24 = v36[2];\n        v3 = v36[3];\n      }\n      v43 = 234941184;\n      v44 = -2097117952;\n      v45 = 2063609344;\n      v46 = ((16 * v27 & 15360 * ((v913 + 16777472) & 0x40004) ^ v27) >> 4) & 0xF000F00 | ((16 * v37 & 15360 * ((v886 + 16777472) & 0x40004) ^ v37) >> 12) & 0xF000F | (v25 ^ 16 * v25 & 15360 * ((v967 + 16777472) & 0x40004)) & 0xF000F000;\n      v47 = v46 | ((v26 ^ 16 * v26 & 15360 * ((v940 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v48 = (v47 ^ ((v46 | ((v26 ^ 16 * v26 & 15360 * ((v940 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v49 = (16 * v48 ^ v48 ^ v47 ^ ((16 * v48 ^ v48 ^ v47) >> 8)) & 0x4E009E ^ 16 * v48 ^ v48 ^ v47 ^ (((16 * v48 ^ v48 ^ v47 ^ ((16 * v48 ^ v48 ^ v47) >> 8)) & 0x4E009E) << 8);\n      v50 = ((unsigned __int16)((v49 ^ HIWORD(v49)) & 0xD9D3) << 16) ^ ((unsigned __int16)v49 ^ HIWORD(v49)) & 0xD9D3 ^ v49;\n      v51 = 16 * ((v50 ^ (v50 >> 4)) & 0x5040004) ^ (v50 ^ (v50 >> 4)) & 0x5040004 ^ v50;\n      v52 = 2 * ((v51 ^ (v51 >> 1)) & 0x4045015) ^ (v51 ^ (v51 >> 1)) & 0x4045015 ^ v855 ^ v51;\n      v53 = 0;\n      v856 = v52;\n      v54 = 0;\n      v55 = 0;\n      v56 = v52 ^ *(_DWORD *)(v852 - 80);\n      v57 = *(_DWORD *)(v852 - 16) ^ __ROL4__(v52, 4);\n      v58 = v57;\n      v59 = (v57 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v60 = v58 & 0xFC00FC;\n      v61 = -167733504;\n      v914 = v59;\n      v60 |= 0xFF00FF00;\n      v62 = v60;\n      v63 = v56 & 0xFC00FC | 0xFF00FF00;\n      v64 = v59 - v60;\n      v887 = v60;\n      v941 = v56 & 0xFC00FC | 0xFF00FF00;\n      v968 = (v56 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v65 = v60;\n      v66 = (signed int *)&unk_4DDE0;\n      v67 = 0;\n      v68 = v968 - v62;\n      v69 = v63 - v62;\n      v838 = v64;\n      while ( 1 )\n      {\n        v66 += 4;\n        v70 = v45 & (v69 + v65);\n        v71 = v43 & (v68 + v65);\n        v72 = v65 + v838;\n        v67 ^= v65 & v44;\n        v65 += 524296;\n        v54 ^= v70;\n        v53 ^= v71;\n        v55 ^= v61 & v72;\n        if ( v66 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v44 = *v66;\n        v61 = v66[1];\n        v45 = v66[2];\n        v43 = v66[3];\n      }\n      v73 = 234941184;\n      v74 = -2097117952;\n      v75 = 2063609344;\n      v76 = ((16 * v55 & 15360 * ((v914 + 16777472) & 0x40004) ^ v55) >> 4) & 0xF000F00 | ((16 * v67 & 15360 * ((v887 + 16777472) & 0x40004) ^ v67) >> 12) & 0xF000F | (v53 ^ 16 * v53 & 15360 * ((v968 + 16777472) & 0x40004)) & 0xF000F000;\n      v77 = v76 | ((v54 ^ 16 * v54 & 15360 * ((v941 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v78 = (v77 ^ ((v76 | ((v54 ^ 16 * v54 & 15360 * ((v941 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v79 = (16 * v78 ^ v78 ^ v77 ^ ((16 * v78 ^ v78 ^ v77) >> 8)) & 0x4E009E ^ 16 * v78 ^ v78 ^ v77 ^ (((16 * v78 ^ v78 ^ v77 ^ ((16 * v78 ^ v78 ^ v77) >> 8)) & 0x4E009E) << 8);\n      v80 = ((unsigned __int16)((v79 ^ HIWORD(v79)) & 0xD9D3) << 16) ^ ((unsigned __int16)v79 ^ HIWORD(v79)) & 0xD9D3 ^ v79;\n      v81 = 16 * ((v80 ^ (v80 >> 4)) & 0x5040004) ^ (v80 ^ (v80 >> 4)) & 0x5040004 ^ v80;\n      v82 = 2 * ((v81 ^ (v81 >> 1)) & 0x4045015) ^ (v81 ^ (v81 >> 1)) & 0x4045015 ^ v870 ^ v81;\n      v83 = 0;\n      v871 = v82;\n      v84 = 0;\n      v85 = 0;\n      v86 = v82 ^ *(_DWORD *)(v852 - 84);\n      v87 = *(_DWORD *)(v852 - 20) ^ __ROL4__(v82, 4);\n      v88 = v87;\n      v89 = (v87 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v90 = v88 & 0xFC00FC;\n      v91 = -167733504;\n      v915 = v89;\n      v90 |= 0xFF00FF00;\n      v92 = v90;\n      v93 = v86 & 0xFC00FC | 0xFF00FF00;\n      v94 = v89 - v90;\n      v888 = v90;\n      v942 = v86 & 0xFC00FC | 0xFF00FF00;\n      v969 = (v86 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v95 = v90;\n      v96 = (signed int *)&unk_4DDE0;\n      v97 = 0;\n      v98 = v969 - v92;\n      v99 = v93 - v92;\n      v839 = v94;\n      while ( 1 )\n      {\n        v96 += 4;\n        v100 = v75 & (v99 + v95);\n        v101 = v73 & (v98 + v95);\n        v102 = v95 + v839;\n        v97 ^= v95 & v74;\n        v95 += 524296;\n        v84 ^= v100;\n        v83 ^= v101;\n        v85 ^= v91 & v102;\n        if ( v96 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v74 = *v96;\n        v91 = v96[1];\n        v75 = v96[2];\n        v73 = v96[3];\n      }\n      v103 = 234941184;\n      v104 = -2097117952;\n      v105 = 2063609344;\n      v106 = ((16 * v85 & 15360 * ((v915 + 16777472) & 0x40004) ^ v85) >> 4) & 0xF000F00 | ((16 * v97 & 15360 * ((v888 + 16777472) & 0x40004) ^ v97) >> 12) & 0xF000F | (v83 ^ 16 * v83 & 15360 * ((v969 + 16777472) & 0x40004)) & 0xF000F000;\n      v107 = v106 | ((v84 ^ 16 * v84 & 15360 * ((v942 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v108 = (v107 ^ ((v106 | ((v84 ^ 16 * v84 & 15360 * ((v942 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v109 = (16 * v108 ^ v108 ^ v107 ^ ((16 * v108 ^ v108 ^ v107) >> 8)) & 0x4E009E ^ 16 * v108 ^ v108 ^ v107 ^ (((16 * v108 ^ v108 ^ v107 ^ ((16 * v108 ^ v108 ^ v107) >> 8)) & 0x4E009E) << 8);\n      v110 = ((unsigned __int16)((v109 ^ HIWORD(v109)) & 0xD9D3) << 16) ^ ((unsigned __int16)v109 ^ HIWORD(v109)) & 0xD9D3 ^ v109;\n      v111 = 16 * ((v110 ^ (v110 >> 4)) & 0x5040004) ^ (v110 ^ (v110 >> 4)) & 0x5040004 ^ v110;\n      v112 = 2 * ((v111 ^ (v111 >> 1)) & 0x4045015) ^ (v111 ^ (v111 >> 1)) & 0x4045015 ^ v856 ^ v111;\n      v113 = 0;\n      v857 = v112;\n      v114 = 0;\n      v115 = 0;\n      v116 = v112 ^ *(_DWORD *)(v852 - 88);\n      v117 = *(_DWORD *)(v852 - 24) ^ __ROL4__(v112, 4);\n      v118 = v117;\n      v119 = (v117 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v120 = v118 & 0xFC00FC;\n      v121 = -167733504;\n      v916 = v119;\n      v120 |= 0xFF00FF00;\n      v122 = v120;\n      v123 = v116 & 0xFC00FC | 0xFF00FF00;\n      v124 = v119 - v120;\n      v889 = v120;\n      v943 = v116 & 0xFC00FC | 0xFF00FF00;\n      v970 = (v116 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v125 = v120;\n      v126 = (signed int *)&unk_4DDE0;\n      v127 = 0;\n      v128 = v970 - v122;\n      v129 = v123 - v122;\n      v840 = v124;\n      while ( 1 )\n      {\n        v126 += 4;\n        v130 = v105 & (v129 + v125);\n        v131 = v103 & (v128 + v125);\n        v132 = v125 + v840;\n        v127 ^= v125 & v104;\n        v125 += 524296;\n        v114 ^= v130;\n        v113 ^= v131;\n        v115 ^= v121 & v132;\n        if ( v126 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v104 = *v126;\n        v121 = v126[1];\n        v105 = v126[2];\n        v103 = v126[3];\n      }\n      v133 = 234941184;\n      v134 = -2097117952;\n      v135 = 2063609344;\n      v136 = ((16 * v115 & 15360 * ((v916 + 16777472) & 0x40004) ^ v115) >> 4) & 0xF000F00 | ((16 * v127 & 15360 * ((v889 + 16777472) & 0x40004) ^ v127) >> 12) & 0xF000F | (v113 ^ 16 * v113 & 15360 * ((v970 + 16777472) & 0x40004)) & 0xF000F000;\n      v137 = v136 | ((v114 ^ 16 * v114 & 15360 * ((v943 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v138 = (v137 ^ ((v136 | ((v114 ^ 16 * v114 & 15360 * ((v943 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v139 = (16 * v138 ^ v138 ^ v137 ^ ((16 * v138 ^ v138 ^ v137) >> 8)) & 0x4E009E ^ 16 * v138 ^ v138 ^ v137 ^ (((16 * v138 ^ v138 ^ v137 ^ ((16 * v138 ^ v138 ^ v137) >> 8)) & 0x4E009E) << 8);\n      v140 = ((unsigned __int16)((v139 ^ HIWORD(v139)) & 0xD9D3) << 16) ^ ((unsigned __int16)v139 ^ HIWORD(v139)) & 0xD9D3 ^ v139;\n      v141 = 16 * ((v140 ^ (v140 >> 4)) & 0x5040004) ^ (v140 ^ (v140 >> 4)) & 0x5040004 ^ v140;\n      v142 = 2 * ((v141 ^ (v141 >> 1)) & 0x4045015) ^ (v141 ^ (v141 >> 1)) & 0x4045015 ^ v871 ^ v141;\n      v143 = 0;\n      v872 = v142;\n      v144 = 0;\n      v145 = 0;\n      v146 = v142 ^ *(_DWORD *)(v852 - 92);\n      v147 = *(_DWORD *)(v852 - 28) ^ __ROL4__(v142, 4);\n      v148 = v147;\n      v149 = (v147 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v150 = v148 & 0xFC00FC;\n      v151 = -167733504;\n      v917 = v149;\n      v150 |= 0xFF00FF00;\n      v152 = v150;\n      v153 = v146 & 0xFC00FC | 0xFF00FF00;\n      v154 = v149 - v150;\n      v890 = v150;\n      v944 = v146 & 0xFC00FC | 0xFF00FF00;\n      v971 = (v146 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v155 = v150;\n      v156 = (signed int *)&unk_4DDE0;\n      v157 = 0;\n      v158 = v971 - v152;\n      v159 = v153 - v152;\n      while ( 1 )\n      {\n        v156 += 4;\n        v160 = v133 & (v158 + v155);\n        v157 ^= v155 & v134;\n        v161 = v155 + v154;\n        v144 ^= v135 & (v159 + v155);\n        v155 += 524296;\n        v143 ^= v160;\n        v145 ^= v151 & v161;\n        if ( v156 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v134 = *v156;\n        v151 = v156[1];\n        v135 = v156[2];\n        v133 = v156[3];\n      }\n      v162 = 234941184;\n      v163 = -2097117952;\n      v164 = 2063609344;\n      v165 = ((16 * v145 & 15360 * ((v917 + 16777472) & 0x40004) ^ v145) >> 4) & 0xF000F00 | ((16 * v157 & 15360 * ((v890 + 16777472) & 0x40004) ^ v157) >> 12) & 0xF000F | (v143 ^ 16 * v143 & 15360 * ((v971 + 16777472) & 0x40004)) & 0xF000F000;\n      v166 = v165 | ((v144 ^ 16 * v144 & 15360 * ((v944 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v167 = (v166 ^ ((v165 | ((v144 ^ 16 * v144 & 15360 * ((v944 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v168 = (16 * v167 ^ v167 ^ v166 ^ ((16 * v167 ^ v167 ^ v166) >> 8)) & 0x4E009E ^ 16 * v167 ^ v167 ^ v166 ^ (((16 * v167 ^ v167 ^ v166 ^ ((16 * v167 ^ v167 ^ v166) >> 8)) & 0x4E009E) << 8);\n      v169 = ((unsigned __int16)((v168 ^ HIWORD(v168)) & 0xD9D3) << 16) ^ ((unsigned __int16)v168 ^ HIWORD(v168)) & 0xD9D3 ^ v168;\n      v170 = 16 * ((v169 ^ (v169 >> 4)) & 0x5040004) ^ (v169 ^ (v169 >> 4)) & 0x5040004 ^ v169;\n      v171 = 2 * ((v170 ^ (v170 >> 1)) & 0x4045015) ^ (v170 ^ (v170 >> 1)) & 0x4045015 ^ v857 ^ v170;\n      v172 = 0;\n      v858 = v171;\n      v173 = 0;\n      v174 = 0;\n      v175 = v171 ^ *(_DWORD *)(v852 - 96);\n      v176 = *(_DWORD *)(v852 - 32) ^ __ROL4__(v171, 4);\n      v177 = v176;\n      v178 = (v176 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v179 = v177 & 0xFC00FC;\n      v180 = -167733504;\n      v918 = v178;\n      v179 |= 0xFF00FF00;\n      v181 = v179;\n      v182 = v175 & 0xFC00FC | 0xFF00FF00;\n      v183 = v178 - v179;\n      v891 = v179;\n      v945 = v175 & 0xFC00FC | 0xFF00FF00;\n      v972 = (v175 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v184 = v179;\n      v185 = (signed int *)&unk_4DDE0;\n      v186 = 0;\n      v187 = v972 - v181;\n      v188 = v182 - v181;\n      v841 = v183;\n      while ( 1 )\n      {\n        v185 += 4;\n        v189 = v164 & (v188 + v184);\n        v190 = v162 & (v187 + v184);\n        v191 = v184 + v841;\n        v186 ^= v184 & v163;\n        v184 += 524296;\n        v173 ^= v189;\n        v172 ^= v190;\n        v174 ^= v180 & v191;\n        if ( v185 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v163 = *v185;\n        v180 = v185[1];\n        v164 = v185[2];\n        v162 = v185[3];\n      }\n      v192 = 234941184;\n      v193 = -2097117952;\n      v194 = 2063609344;\n      v195 = ((16 * v174 & 15360 * ((v918 + 16777472) & 0x40004) ^ v174) >> 4) & 0xF000F00 | ((16 * v186 & 15360 * ((v891 + 16777472) & 0x40004) ^ v186) >> 12) & 0xF000F | (v172 ^ 16 * v172 & 15360 * ((v972 + 16777472) & 0x40004)) & 0xF000F000;\n      v196 = v195 | ((v173 ^ 16 * v173 & 15360 * ((v945 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v197 = (v196 ^ ((v195 | ((v173 ^ 16 * v173 & 15360 * ((v945 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v198 = (16 * v197 ^ v197 ^ v196 ^ ((16 * v197 ^ v197 ^ v196) >> 8)) & 0x4E009E ^ 16 * v197 ^ v197 ^ v196 ^ (((16 * v197 ^ v197 ^ v196 ^ ((16 * v197 ^ v197 ^ v196) >> 8)) & 0x4E009E) << 8);\n      v199 = ((unsigned __int16)((v198 ^ HIWORD(v198)) & 0xD9D3) << 16) ^ ((unsigned __int16)v198 ^ HIWORD(v198)) & 0xD9D3 ^ v198;\n      v200 = 16 * ((v199 ^ (v199 >> 4)) & 0x5040004) ^ (v199 ^ (v199 >> 4)) & 0x5040004 ^ v199;\n      v201 = 2 * ((v200 ^ (v200 >> 1)) & 0x4045015) ^ (v200 ^ (v200 >> 1)) & 0x4045015 ^ v872 ^ v200;\n      v202 = 0;\n      v873 = v201;\n      v203 = 0;\n      v204 = 0;\n      v205 = v201 ^ *(_DWORD *)(v852 - 100);\n      v206 = *(_DWORD *)(v852 - 36) ^ __ROL4__(v201, 4);\n      v207 = v206;\n      v208 = (v206 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v209 = v207 & 0xFC00FC;\n      v210 = -167733504;\n      v919 = v208;\n      v209 |= 0xFF00FF00;\n      v211 = v209;\n      v212 = v205 & 0xFC00FC | 0xFF00FF00;\n      v213 = v208 - v209;\n      v892 = v209;\n      v946 = v205 & 0xFC00FC | 0xFF00FF00;\n      v973 = (v205 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v214 = v209;\n      v215 = (signed int *)&unk_4DDE0;\n      v216 = 0;\n      v217 = v973 - v211;\n      v218 = v212 - v211;\n      while ( 1 )\n      {\n        v215 += 4;\n        v219 = v192 & (v217 + v214);\n        v216 ^= v214 & v193;\n        v220 = v214 + v213;\n        v203 ^= v194 & (v218 + v214);\n        v214 += 524296;\n        v202 ^= v219;\n        v204 ^= v210 & v220;\n        if ( v215 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v193 = *v215;\n        v210 = v215[1];\n        v194 = v215[2];\n        v192 = v215[3];\n      }\n      v221 = 234941184;\n      v222 = -2097117952;\n      v223 = 2063609344;\n      v224 = ((16 * v204 & 15360 * ((v919 + 16777472) & 0x40004) ^ v204) >> 4) & 0xF000F00 | ((16 * v216 & 15360 * ((v892 + 16777472) & 0x40004) ^ v216) >> 12) & 0xF000F | (v202 ^ 16 * v202 & 15360 * ((v973 + 16777472) & 0x40004)) & 0xF000F000;\n      v225 = v224 | ((v203 ^ 16 * v203 & 15360 * ((v946 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v226 = (v225 ^ ((v224 | ((v203 ^ 16 * v203 & 15360 * ((v946 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v227 = (16 * v226 ^ v226 ^ v225 ^ ((16 * v226 ^ v226 ^ v225) >> 8)) & 0x4E009E ^ 16 * v226 ^ v226 ^ v225 ^ (((16 * v226 ^ v226 ^ v225 ^ ((16 * v226 ^ v226 ^ v225) >> 8)) & 0x4E009E) << 8);\n      v228 = ((unsigned __int16)((v227 ^ HIWORD(v227)) & 0xD9D3) << 16) ^ ((unsigned __int16)v227 ^ HIWORD(v227)) & 0xD9D3 ^ v227;\n      v229 = 16 * ((v228 ^ (v228 >> 4)) & 0x5040004) ^ (v228 ^ (v228 >> 4)) & 0x5040004 ^ v228;\n      v230 = 2 * ((v229 ^ (v229 >> 1)) & 0x4045015) ^ (v229 ^ (v229 >> 1)) & 0x4045015 ^ v858 ^ v229;\n      v231 = 0;\n      v859 = v230;\n      v232 = 0;\n      v233 = 0;\n      v234 = v230 ^ *(_DWORD *)(v852 - 104);\n      v235 = *(_DWORD *)(v852 - 40) ^ __ROL4__(v230, 4);\n      v236 = v235;\n      v237 = (v235 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v238 = v236 & 0xFC00FC;\n      v239 = -167733504;\n      v920 = v237;\n      v238 |= 0xFF00FF00;\n      v240 = v238;\n      v241 = v234 & 0xFC00FC | 0xFF00FF00;\n      v242 = v237 - v238;\n      v893 = v238;\n      v947 = v234 & 0xFC00FC | 0xFF00FF00;\n      v974 = (v234 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v243 = v238;\n      v244 = (signed int *)&unk_4DDE0;\n      v245 = 0;\n      v246 = v974 - v240;\n      v247 = v241 - v240;\n      v842 = v242;\n      while ( 1 )\n      {\n        v244 += 4;\n        v248 = v223 & (v247 + v243);\n        v249 = v221 & (v246 + v243);\n        v250 = v243 + v842;\n        v245 ^= v243 & v222;\n        v243 += 524296;\n        v232 ^= v248;\n        v231 ^= v249;\n        v233 ^= v239 & v250;\n        if ( v244 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v222 = *v244;\n        v239 = v244[1];\n        v223 = v244[2];\n        v221 = v244[3];\n      }\n      v251 = 234941184;\n      v252 = -2097117952;\n      v253 = 2063609344;\n      v254 = ((16 * v233 & 15360 * ((v920 + 16777472) & 0x40004) ^ v233) >> 4) & 0xF000F00 | ((16 * v245 & 15360 * ((v893 + 16777472) & 0x40004) ^ v245) >> 12) & 0xF000F | (v231 ^ 16 * v231 & 15360 * ((v974 + 16777472) & 0x40004)) & 0xF000F000;\n      v255 = v254 | ((v232 ^ 16 * v232 & 15360 * ((v947 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v256 = (v255 ^ ((v254 | ((v232 ^ 16 * v232 & 15360 * ((v947 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v257 = (16 * v256 ^ v256 ^ v255 ^ ((16 * v256 ^ v256 ^ v255) >> 8)) & 0x4E009E ^ 16 * v256 ^ v256 ^ v255 ^ (((16 * v256 ^ v256 ^ v255 ^ ((16 * v256 ^ v256 ^ v255) >> 8)) & 0x4E009E) << 8);\n      v258 = ((unsigned __int16)((v257 ^ HIWORD(v257)) & 0xD9D3) << 16) ^ ((unsigned __int16)v257 ^ HIWORD(v257)) & 0xD9D3 ^ v257;\n      v259 = 16 * ((v258 ^ (v258 >> 4)) & 0x5040004) ^ (v258 ^ (v258 >> 4)) & 0x5040004 ^ v258;\n      v260 = 2 * ((v259 ^ (v259 >> 1)) & 0x4045015) ^ (v259 ^ (v259 >> 1)) & 0x4045015 ^ v873 ^ v259;\n      v261 = 0;\n      v874 = v260;\n      v262 = 0;\n      v263 = 0;\n      v264 = v260 ^ *(_DWORD *)(v852 - 108);\n      v265 = *(_DWORD *)(v852 - 44) ^ __ROL4__(v260, 4);\n      v266 = v265;\n      v267 = (v265 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v268 = v266 & 0xFC00FC;\n      v269 = -167733504;\n      v921 = v267;\n      v268 |= 0xFF00FF00;\n      v270 = v268;\n      v271 = v264 & 0xFC00FC | 0xFF00FF00;\n      v272 = v267 - v268;\n      v894 = v268;\n      v948 = v264 & 0xFC00FC | 0xFF00FF00;\n      v975 = (v264 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v273 = v268;\n      v274 = (signed int *)&unk_4DDE0;\n      v275 = 0;\n      v276 = v975 - v270;\n      v277 = v271 - v270;\n      while ( 1 )\n      {\n        v274 += 4;\n        v278 = v251 & (v276 + v273);\n        v275 ^= v273 & v252;\n        v279 = v273 + v272;\n        v262 ^= v253 & (v277 + v273);\n        v273 += 524296;\n        v261 ^= v278;\n        v263 ^= v269 & v279;\n        if ( v274 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v252 = *v274;\n        v269 = v274[1];\n        v253 = v274[2];\n        v251 = v274[3];\n      }\n      v280 = 234941184;\n      v281 = -2097117952;\n      v282 = 2063609344;\n      v283 = ((16 * v263 & 15360 * ((v921 + 16777472) & 0x40004) ^ v263) >> 4) & 0xF000F00 | ((16 * v275 & 15360 * ((v894 + 16777472) & 0x40004) ^ v275) >> 12) & 0xF000F | (v261 ^ 16 * v261 & 15360 * ((v975 + 16777472) & 0x40004)) & 0xF000F000;\n      v284 = v283 | ((v262 ^ 16 * v262 & 15360 * ((v948 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v285 = (v284 ^ ((v283 | ((v262 ^ 16 * v262 & 15360 * ((v948 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v286 = (16 * v285 ^ v285 ^ v284 ^ ((16 * v285 ^ v285 ^ v284) >> 8)) & 0x4E009E ^ 16 * v285 ^ v285 ^ v284 ^ (((16 * v285 ^ v285 ^ v284 ^ ((16 * v285 ^ v285 ^ v284) >> 8)) & 0x4E009E) << 8);\n      v287 = ((unsigned __int16)((v286 ^ HIWORD(v286)) & 0xD9D3) << 16) ^ ((unsigned __int16)v286 ^ HIWORD(v286)) & 0xD9D3 ^ v286;\n      v288 = 16 * ((v287 ^ (v287 >> 4)) & 0x5040004) ^ (v287 ^ (v287 >> 4)) & 0x5040004 ^ v287;\n      v289 = 2 * ((v288 ^ (v288 >> 1)) & 0x4045015) ^ (v288 ^ (v288 >> 1)) & 0x4045015 ^ v859 ^ v288;\n      v290 = 0;\n      v860 = v289;\n      v291 = 0;\n      v292 = 0;\n      v293 = v289 ^ *(_DWORD *)(v852 - 112);\n      v294 = *(_DWORD *)(v852 - 48) ^ __ROL4__(v289, 4);\n      v295 = v294;\n      v296 = (v294 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v297 = v295 & 0xFC00FC;\n      v298 = -167733504;\n      v922 = v296;\n      v297 |= 0xFF00FF00;\n      v299 = v297;\n      v300 = v293 & 0xFC00FC | 0xFF00FF00;\n      v301 = v296 - v297;\n      v895 = v297;\n      v949 = v293 & 0xFC00FC | 0xFF00FF00;\n      v976 = (v293 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v302 = v297;\n      v303 = (signed int *)&unk_4DDE0;\n      v304 = 0;\n      v305 = v976 - v299;\n      v306 = v300 - v299;\n      v843 = v301;\n      while ( 1 )\n      {\n        v303 += 4;\n        v307 = v282 & (v306 + v302);\n        v308 = v280 & (v305 + v302);\n        v309 = v302 + v843;\n        v304 ^= v302 & v281;\n        v302 += 524296;\n        v291 ^= v307;\n        v290 ^= v308;\n        v292 ^= v298 & v309;\n        if ( v303 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v281 = *v303;\n        v298 = v303[1];\n        v282 = v303[2];\n        v280 = v303[3];\n      }\n      v310 = 234941184;\n      v311 = -2097117952;\n      v312 = 2063609344;\n      v313 = ((16 * v292 & 15360 * ((v922 + 16777472) & 0x40004) ^ v292) >> 4) & 0xF000F00 | ((16 * v304 & 15360 * ((v895 + 16777472) & 0x40004) ^ v304) >> 12) & 0xF000F | (v290 ^ 16 * v290 & 15360 * ((v976 + 16777472) & 0x40004)) & 0xF000F000;\n      v314 = v313 | ((v291 ^ 16 * v291 & 15360 * ((v949 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v315 = (v314 ^ ((v313 | ((v291 ^ 16 * v291 & 15360 * ((v949 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v316 = (16 * v315 ^ v315 ^ v314 ^ ((16 * v315 ^ v315 ^ v314) >> 8)) & 0x4E009E ^ 16 * v315 ^ v315 ^ v314 ^ (((16 * v315 ^ v315 ^ v314 ^ ((16 * v315 ^ v315 ^ v314) >> 8)) & 0x4E009E) << 8);\n      v317 = ((unsigned __int16)((v316 ^ HIWORD(v316)) & 0xD9D3) << 16) ^ ((unsigned __int16)v316 ^ HIWORD(v316)) & 0xD9D3 ^ v316;\n      v318 = 16 * ((v317 ^ (v317 >> 4)) & 0x5040004) ^ (v317 ^ (v317 >> 4)) & 0x5040004 ^ v317;\n      v319 = 2 * ((v318 ^ (v318 >> 1)) & 0x4045015) ^ (v318 ^ (v318 >> 1)) & 0x4045015 ^ v874 ^ v318;\n      v320 = 0;\n      v875 = v319;\n      v321 = 0;\n      v322 = 0;\n      v323 = v319 ^ *(_DWORD *)(v852 - 116);\n      v324 = *(_DWORD *)(v852 - 52) ^ __ROL4__(v319, 4);\n      v325 = v324;\n      v326 = (v324 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v327 = v325 & 0xFC00FC;\n      v328 = -167733504;\n      v923 = v326;\n      v327 |= 0xFF00FF00;\n      v329 = v327;\n      v330 = v323 & 0xFC00FC | 0xFF00FF00;\n      v331 = v326 - v327;\n      v896 = v327;\n      v950 = v323 & 0xFC00FC | 0xFF00FF00;\n      v977 = (v323 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v332 = v327;\n      v333 = (signed int *)&unk_4DDE0;\n      v334 = 0;\n      v335 = v977 - v329;\n      v336 = v330 - v329;\n      while ( 1 )\n      {\n        v333 += 4;\n        v337 = v310 & (v335 + v332);\n        v334 ^= v332 & v311;\n        v338 = v332 + v331;\n        v321 ^= v312 & (v336 + v332);\n        v332 += 524296;\n        v320 ^= v337;\n        v322 ^= v328 & v338;\n        if ( v333 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v311 = *v333;\n        v328 = v333[1];\n        v312 = v333[2];\n        v310 = v333[3];\n      }\n      v339 = 234941184;\n      v340 = -2097117952;\n      v341 = 2063609344;\n      v342 = ((16 * v322 & 15360 * ((v923 + 16777472) & 0x40004) ^ v322) >> 4) & 0xF000F00 | ((16 * v334 & 15360 * ((v896 + 16777472) & 0x40004) ^ v334) >> 12) & 0xF000F | (v320 ^ 16 * v320 & 15360 * ((v977 + 16777472) & 0x40004)) & 0xF000F000;\n      v343 = v342 | ((v321 ^ 16 * v321 & 15360 * ((v950 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v344 = (v343 ^ ((v342 | ((v321 ^ 16 * v321 & 15360 * ((v950 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v345 = (16 * v344 ^ v344 ^ v343 ^ ((16 * v344 ^ v344 ^ v343) >> 8)) & 0x4E009E ^ 16 * v344 ^ v344 ^ v343 ^ (((16 * v344 ^ v344 ^ v343 ^ ((16 * v344 ^ v344 ^ v343) >> 8)) & 0x4E009E) << 8);\n      v346 = ((unsigned __int16)((v345 ^ HIWORD(v345)) & 0xD9D3) << 16) ^ ((unsigned __int16)v345 ^ HIWORD(v345)) & 0xD9D3 ^ v345;\n      v347 = 16 * ((v346 ^ (v346 >> 4)) & 0x5040004) ^ (v346 ^ (v346 >> 4)) & 0x5040004 ^ v346;\n      v348 = 2 * ((v347 ^ (v347 >> 1)) & 0x4045015) ^ (v347 ^ (v347 >> 1)) & 0x4045015 ^ v860 ^ v347;\n      v349 = 0;\n      v861 = v348;\n      v350 = 0;\n      v351 = 0;\n      v352 = v348 ^ *(_DWORD *)(v852 - 120);\n      v353 = *(_DWORD *)(v852 - 56) ^ __ROL4__(v348, 4);\n      v354 = v353;\n      v355 = (v353 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v356 = v354 & 0xFC00FC;\n      v357 = -167733504;\n      v924 = v355;\n      v356 |= 0xFF00FF00;\n      v358 = v356;\n      v359 = v352 & 0xFC00FC | 0xFF00FF00;\n      v360 = v355 - v356;\n      v897 = v356;\n      v951 = v352 & 0xFC00FC | 0xFF00FF00;\n      v978 = (v352 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v361 = v356;\n      v362 = (signed int *)&unk_4DDE0;\n      v363 = 0;\n      v364 = v978 - v358;\n      v365 = v359 - v358;\n      v844 = v360;\n      while ( 1 )\n      {\n        v362 += 4;\n        v366 = v341 & (v365 + v361);\n        v367 = v339 & (v364 + v361);\n        v368 = v361 + v844;\n        v363 ^= v361 & v340;\n        v361 += 524296;\n        v350 ^= v366;\n        v349 ^= v367;\n        v351 ^= v357 & v368;\n        if ( v362 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v340 = *v362;\n        v357 = v362[1];\n        v341 = v362[2];\n        v339 = v362[3];\n      }\n      v369 = 234941184;\n      v370 = -2097117952;\n      v371 = 2063609344;\n      v372 = ((16 * v351 & 15360 * ((v924 + 16777472) & 0x40004) ^ v351) >> 4) & 0xF000F00 | ((16 * v363 & 15360 * ((v897 + 16777472) & 0x40004) ^ v363) >> 12) & 0xF000F | (v349 ^ 16 * v349 & 15360 * ((v978 + 16777472) & 0x40004)) & 0xF000F000;\n      v373 = v372 | ((v350 ^ 16 * v350 & 15360 * ((v951 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v374 = (v373 ^ ((v372 | ((v350 ^ 16 * v350 & 15360 * ((v951 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v375 = (16 * v374 ^ v374 ^ v373 ^ ((16 * v374 ^ v374 ^ v373) >> 8)) & 0x4E009E ^ 16 * v374 ^ v374 ^ v373 ^ (((16 * v374 ^ v374 ^ v373 ^ ((16 * v374 ^ v374 ^ v373) >> 8)) & 0x4E009E) << 8);\n      v376 = ((unsigned __int16)((v375 ^ HIWORD(v375)) & 0xD9D3) << 16) ^ ((unsigned __int16)v375 ^ HIWORD(v375)) & 0xD9D3 ^ v375;\n      v377 = 16 * ((v376 ^ (v376 >> 4)) & 0x5040004) ^ (v376 ^ (v376 >> 4)) & 0x5040004 ^ v376;\n      v378 = 2 * ((v377 ^ (v377 >> 1)) & 0x4045015) ^ (v377 ^ (v377 >> 1)) & 0x4045015 ^ v875 ^ v377;\n      v379 = 0;\n      v876 = v378;\n      v380 = 0;\n      v381 = 0;\n      v382 = v378 ^ *(_DWORD *)(v852 - 124);\n      v383 = *(_DWORD *)(v852 - 60) ^ __ROL4__(v378, 4);\n      v384 = v383;\n      v385 = (v383 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v386 = v384 & 0xFC00FC;\n      v387 = -167733504;\n      v925 = v385;\n      v386 |= 0xFF00FF00;\n      v388 = v386;\n      v389 = v382 & 0xFC00FC | 0xFF00FF00;\n      v390 = v385 - v386;\n      v898 = v386;\n      v952 = v382 & 0xFC00FC | 0xFF00FF00;\n      v979 = (v382 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v391 = v386;\n      v392 = (signed int *)&unk_4DDE0;\n      v393 = 0;\n      v394 = v979 - v388;\n      v395 = v389 - v388;\n      while ( 1 )\n      {\n        v392 += 4;\n        v396 = v369 & (v394 + v391);\n        v393 ^= v391 & v370;\n        v397 = v391 + v390;\n        v380 ^= v371 & (v395 + v391);\n        v391 += 524296;\n        v379 ^= v396;\n        v381 ^= v387 & v397;\n        if ( v392 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v370 = *v392;\n        v387 = v392[1];\n        v371 = v392[2];\n        v369 = v392[3];\n      }\n      v398 = 234941184;\n      v399 = -2097117952;\n      v400 = 2063609344;\n      v401 = ((16 * v381 & 15360 * ((v925 + 16777472) & 0x40004) ^ v381) >> 4) & 0xF000F00 | ((16 * v393 & 15360 * ((v898 + 16777472) & 0x40004) ^ v393) >> 12) & 0xF000F | (v379 ^ 16 * v379 & 15360 * ((v979 + 16777472) & 0x40004)) & 0xF000F000;\n      v402 = v401 | ((v380 ^ 16 * v380 & 15360 * ((v952 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v403 = (v402 ^ ((v401 | ((v380 ^ 16 * v380 & 15360 * ((v952 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v404 = (16 * v403 ^ v403 ^ v402 ^ ((16 * v403 ^ v403 ^ v402) >> 8)) & 0x4E009E ^ 16 * v403 ^ v403 ^ v402 ^ (((16 * v403 ^ v403 ^ v402 ^ ((16 * v403 ^ v403 ^ v402) >> 8)) & 0x4E009E) << 8);\n      v405 = ((unsigned __int16)((v404 ^ HIWORD(v404)) & 0xD9D3) << 16) ^ ((unsigned __int16)v404 ^ HIWORD(v404)) & 0xD9D3 ^ v404;\n      v406 = 16 * ((v405 ^ (v405 >> 4)) & 0x5040004) ^ (v405 ^ (v405 >> 4)) & 0x5040004 ^ v405;\n      v407 = 2 * ((v406 ^ (v406 >> 1)) & 0x4045015) ^ (v406 ^ (v406 >> 1)) & 0x4045015 ^ v861 ^ v406;\n      v408 = 0;\n      v862 = v407;\n      v409 = 0;\n      v410 = 0;\n      v411 = v407 ^ *(_DWORD *)(v852 - 128);\n      v412 = *(_DWORD *)(v852 - 64) ^ __ROL4__(v407, 4);\n      v413 = v412;\n      v414 = (v412 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v415 = v413 & 0xFC00FC;\n      v416 = -167733504;\n      v926 = v414;\n      v415 |= 0xFF00FF00;\n      v417 = v415;\n      v418 = v411 & 0xFC00FC | 0xFF00FF00;\n      v419 = v414 - v415;\n      v899 = v415;\n      v953 = v411 & 0xFC00FC | 0xFF00FF00;\n      v980 = (v411 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v420 = v415;\n      v421 = (signed int *)&unk_4DDE0;\n      v422 = 0;\n      v423 = v980 - v417;\n      v424 = v418 - v417;\n      v845 = v419;\n      while ( 1 )\n      {\n        v421 += 4;\n        v425 = v400 & (v424 + v420);\n        v426 = v398 & (v423 + v420);\n        v427 = v420 + v845;\n        v422 ^= v420 & v399;\n        v420 += 524296;\n        v409 ^= v425;\n        v408 ^= v426;\n        v410 ^= v416 & v427;\n        if ( v421 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v399 = *v421;\n        v416 = v421[1];\n        v400 = v421[2];\n        v398 = v421[3];\n      }\n      v428 = 234941184;\n      v429 = -2097117952;\n      v430 = 2063609344;\n      v431 = ((16 * v410 & 15360 * ((v926 + 16777472) & 0x40004) ^ v410) >> 4) & 0xF000F00 | ((16 * v422 & 15360 * ((v899 + 16777472) & 0x40004) ^ v422) >> 12) & 0xF000F | (v408 ^ 16 * v408 & 15360 * ((v980 + 16777472) & 0x40004)) & 0xF000F000;\n      v432 = v431 | ((v409 ^ 16 * v409 & 15360 * ((v953 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v433 = (v432 ^ ((v431 | ((v409 ^ 16 * v409 & 15360 * ((v953 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v434 = (16 * v433 ^ v433 ^ v432 ^ ((16 * v433 ^ v433 ^ v432) >> 8)) & 0x4E009E ^ 16 * v433 ^ v433 ^ v432 ^ (((16 * v433 ^ v433 ^ v432 ^ ((16 * v433 ^ v433 ^ v432) >> 8)) & 0x4E009E) << 8);\n      v435 = ((unsigned __int16)((v434 ^ HIWORD(v434)) & 0xD9D3) << 16) ^ ((unsigned __int16)v434 ^ HIWORD(v434)) & 0xD9D3 ^ v434;\n      v436 = 16 * ((v435 ^ (v435 >> 4)) & 0x5040004) ^ (v435 ^ (v435 >> 4)) & 0x5040004 ^ v435;\n      v437 = 2 * ((v436 ^ (v436 >> 1)) & 0x4045015) ^ (v436 ^ (v436 >> 1)) & 0x4045015 ^ v876 ^ v436;\n      v438 = 0;\n      v877 = v437;\n      v439 = 0;\n      v440 = 0;\n      v441 = v437 ^ *(_DWORD *)(v852 - 132);\n      v442 = *(_DWORD *)(v852 - 68) ^ __ROL4__(v437, 4);\n      v443 = v442;\n      v444 = (v442 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v445 = v443 & 0xFC00FC;\n      v446 = -167733504;\n      v927 = v444;\n      v445 |= 0xFF00FF00;\n      v447 = v445;\n      v448 = v441 & 0xFC00FC | 0xFF00FF00;\n      v449 = v444 - v445;\n      v900 = v445;\n      v954 = v441 & 0xFC00FC | 0xFF00FF00;\n      v981 = (v441 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v450 = v445;\n      v451 = (signed int *)&unk_4DDE0;\n      v452 = 0;\n      v453 = v981 - v447;\n      v454 = v448 - v447;\n      while ( 1 )\n      {\n        v451 += 4;\n        v455 = v428 & (v453 + v450);\n        v452 ^= v450 & v429;\n        v456 = v450 + v449;\n        v439 ^= v430 & (v454 + v450);\n        v450 += 524296;\n        v438 ^= v455;\n        v440 ^= v446 & v456;\n        if ( v451 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v429 = *v451;\n        v446 = v451[1];\n        v430 = v451[2];\n        v428 = v451[3];\n      }\n      v457 = 234941184;\n      v458 = -2097117952;\n      v459 = 2063609344;\n      v460 = ((16 * v440 & 15360 * ((v927 + 16777472) & 0x40004) ^ v440) >> 4) & 0xF000F00 | ((16 * v452 & 15360 * ((v900 + 16777472) & 0x40004) ^ v452) >> 12) & 0xF000F | (v438 ^ 16 * v438 & 15360 * ((v981 + 16777472) & 0x40004)) & 0xF000F000;\n      v461 = v460 | ((v439 ^ 16 * v439 & 15360 * ((v954 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v462 = (v461 ^ ((v460 | ((v439 ^ 16 * v439 & 15360 * ((v954 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v463 = (16 * v462 ^ v462 ^ v461 ^ ((16 * v462 ^ v462 ^ v461) >> 8)) & 0x4E009E ^ 16 * v462 ^ v462 ^ v461 ^ (((16 * v462 ^ v462 ^ v461 ^ ((16 * v462 ^ v462 ^ v461) >> 8)) & 0x4E009E) << 8);\n      v464 = ((unsigned __int16)((v463 ^ HIWORD(v463)) & 0xD9D3) << 16) ^ ((unsigned __int16)v463 ^ HIWORD(v463)) & 0xD9D3 ^ v463;\n      v465 = 16 * ((v464 ^ (v464 >> 4)) & 0x5040004) ^ (v464 ^ (v464 >> 4)) & 0x5040004 ^ v464;\n      v466 = 2 * ((v465 ^ (v465 >> 1)) & 0x4045015) ^ (v465 ^ (v465 >> 1)) & 0x4045015 ^ v862 ^ v465;\n      v467 = 0;\n      LODWORD(v854) = v466;\n      v468 = 0;\n      v469 = 0;\n      v470 = v466 ^ *(_DWORD *)(v852 - 136);\n      v471 = *(_DWORD *)(v852 - 72) ^ __ROL4__(v466, 4);\n      v472 = v471;\n      v473 = (v471 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v474 = v472 & 0xFC00FC;\n      v475 = -167733504;\n      v928 = v473;\n      v474 |= 0xFF00FF00;\n      v476 = v474;\n      v477 = v470 & 0xFC00FC | 0xFF00FF00;\n      v478 = v473 - v474;\n      v901 = v474;\n      v955 = v470 & 0xFC00FC | 0xFF00FF00;\n      v982 = (v470 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v479 = v474;\n      v480 = (signed int *)&unk_4DDE0;\n      v481 = 0;\n      v482 = v982 - v476;\n      v483 = v477 - v476;\n      v846 = v478;\n      while ( 1 )\n      {\n        v480 += 4;\n        v484 = v459 & (v483 + v479);\n        v485 = v457 & (v482 + v479);\n        v486 = v479 + v846;\n        v481 ^= v479 & v458;\n        v479 += 524296;\n        v468 ^= v484;\n        v467 ^= v485;\n        v469 ^= v475 & v486;\n        if ( v480 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v458 = *v480;\n        v475 = v480[1];\n        v459 = v480[2];\n        v457 = v480[3];\n      }\n      v487 = ((16 * v469 & 15360 * ((v928 + 16777472) & 0x40004) ^ v469) >> 4) & 0xF000F00 | ((16 * v481 & 15360 * ((v901 + 16777472) & 0x40004) ^ v481) >> 12) & 0xF000F | (v467 ^ 16 * v467 & 15360 * ((v982 + 16777472) & 0x40004)) & 0xF000F000 | ((v468 ^ 16 * v468 & 15360 * ((v955 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v488 = (v487 ^ (v487 >> 4)) & 0x7030702;\n      v489 = (16 * v488 ^ v488 ^ v487 ^ ((16 * v488 ^ v488 ^ v487) >> 8)) & 0x4E009E ^ 16 * v488 ^ v488 ^ v487 ^ (((16 * v488 ^ v488 ^ v487 ^ ((16 * v488 ^ v488 ^ v487) >> 8)) & 0x4E009E) << 8);\n      v490 = ((unsigned __int16)((v489 ^ HIWORD(v489)) & 0xD9D3) << 16) ^ ((unsigned __int16)v489 ^ HIWORD(v489)) & 0xD9D3 ^ v489;\n      v491 = 16 * ((v490 ^ (v490 >> 4)) & 0x5040004) ^ (v490 ^ (v490 >> 4)) & 0x5040004 ^ v490;\n      v492 = 0;\n      v493 = 0;\n      v494 = sub_228E0(\n               (v854 << 32) | 2 * ((v491 ^ (v491 >> 1)) & 0x4045015) ^ (v491 ^ (v491 >> 1)) & 0x4045015 ^ v491 ^ v877,\n               v995,\n               0LL,\n               1LL);\n      v863 = v494;\n      v494 >>= 32;\n      v983 = v494;\n      v495 = 234941184;\n      v496 = 2063609344;\n      v497 = -2097117952;\n      v498 = 0;\n      v499 = v494 ^ *(_DWORD *)(v852 - 332);\n      LODWORD(v494) = *(_DWORD *)(v852 - 268) ^ __ROL4__(v494, 4);\n      v500 = v494;\n      LODWORD(v494) = ((unsigned int)v494 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v501 = v500 & 0xFC00FC;\n      v502 = -167733504;\n      v902 = v494;\n      v501 |= 0xFF00FF00;\n      v503 = v501;\n      v504 = v499 & 0xFC00FC | 0xFF00FF00;\n      v505 = v494 - v501;\n      v878 = v501;\n      v929 = v499 & 0xFC00FC | 0xFF00FF00;\n      v956 = (v499 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v506 = v501;\n      v507 = (signed int *)&unk_4DDE0;\n      v508 = 0;\n      v509 = v956 - v503;\n      v510 = v504 - v503;\n      while ( 1 )\n      {\n        v507 += 4;\n        v511 = v495 & (v509 + v506);\n        v508 ^= v506 & v497;\n        v512 = v506 + v505;\n        v493 ^= v496 & (v510 + v506);\n        v506 += 524296;\n        v492 ^= v511;\n        v498 ^= v502 & v512;\n        if ( v507 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v497 = *v507;\n        v502 = v507[1];\n        v496 = v507[2];\n        v495 = v507[3];\n      }\n      v513 = v852;\n      v514 = ((16 * v498 & 15360 * ((v902 + 16777472) & 0x40004) ^ v498) >> 4) & 0xF000F00 | ((16 * v508 & 15360 * ((v878 + 16777472) & 0x40004) ^ v508) >> 12) & 0xF000F | (v492 ^ 16 * v492 & 15360 * ((v956 + 16777472) & 0x40004)) & 0xF000F000;\n      v515 = v514 | ((v493 ^ 16 * v493 & 15360 * ((v929 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v516 = (v515 ^ ((v514 | ((v493 ^ 16 * v493 & 15360 * ((v929 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v517 = (16 * v516 ^ v516 ^ v515 ^ ((16 * v516 ^ v516 ^ v515) >> 8)) & 0x4E009E ^ 16 * v516 ^ v516 ^ v515 ^ (((16 * v516 ^ v516 ^ v515 ^ ((16 * v516 ^ v516 ^ v515) >> 8)) & 0x4E009E) << 8);\n      v518 = ((unsigned __int16)((v517 ^ HIWORD(v517)) & 0xD9D3) << 16) ^ ((unsigned __int16)v517 ^ HIWORD(v517)) & 0xD9D3 ^ v517;\n      v519 = 16 * ((v518 ^ (v518 >> 4)) & 0x5040004) ^ (v518 ^ (v518 >> 4)) & 0x5040004 ^ v518;\n      v520 = 2 * ((v519 ^ (v519 >> 1)) & 0x4045015) ^ (v519 ^ (v519 >> 1)) & 0x4045015 ^ v519 ^ v863;\n      v521 = 0;\n      v522 = 0;\n      v523 = (unsigned __int64)sub_22510(v520, *(_DWORD *)(v852 - 336), *(_DWORD *)(v852 - 272)) ^ v983;\n      v524 = (unsigned __int64)sub_22510(v523, *(_DWORD *)(v513 - 340), *(_DWORD *)(v513 - 276)) ^ v520;\n      v525 = (unsigned __int64)sub_22510(v524, *(_DWORD *)(v513 - 344), *(_DWORD *)(v513 - 280)) ^ v523;\n      v864 = (unsigned __int64)sub_22510(v525, *(_DWORD *)(v513 - 348), *(_DWORD *)(v513 - 284)) ^ v524;\n      v526 = (unsigned __int64)sub_22510(v864, *(_DWORD *)(v513 - 352), *(_DWORD *)(v513 - 288)) ^ v525;\n      v527 = 234941184;\n      v879 = v526;\n      v528 = 2063609344;\n      v529 = *(_DWORD *)(v852 - 292) ^ __ROL4__(v526, 4);\n      v530 = -2097117952;\n      v531 = v526 ^ *(_DWORD *)(v852 - 356);\n      v532 = 0;\n      v533 = v529;\n      v534 = (v529 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v535 = v533 & 0xFC00FC;\n      v536 = -167733504;\n      v930 = v534;\n      v535 |= 0xFF00FF00;\n      v537 = v535;\n      LODWORD(v513) = v531 & 0xFC00FC | 0xFF00FF00;\n      v538 = v534 - v535;\n      v903 = v535;\n      v957 = v531 & 0xFC00FC | 0xFF00FF00;\n      v984 = (v531 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v539 = v535;\n      v540 = (signed int *)&unk_4DDE0;\n      v541 = 0;\n      v542 = v984 - v537;\n      v543 = v513 - v537;\n      v847 = v538;\n      while ( 1 )\n      {\n        v540 += 4;\n        v544 = v528 & (v543 + v539);\n        v545 = v527 & (v542 + v539);\n        v546 = v539 + v847;\n        v541 ^= v539 & v530;\n        v539 += 524296;\n        v522 ^= v544;\n        v521 ^= v545;\n        v532 ^= v536 & v546;\n        if ( v540 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v530 = *v540;\n        v536 = v540[1];\n        v528 = v540[2];\n        v527 = v540[3];\n      }\n      v547 = 234941184;\n      v548 = -2097117952;\n      v549 = 2063609344;\n      v550 = ((16 * v532 & 15360 * ((v930 + 16777472) & 0x40004) ^ v532) >> 4) & 0xF000F00 | ((16 * v541 & 15360 * ((v903 + 16777472) & 0x40004) ^ v541) >> 12) & 0xF000F | (v521 ^ 16 * v521 & 15360 * ((v984 + 16777472) & 0x40004)) & 0xF000F000;\n      v551 = v550 | ((v522 ^ 16 * v522 & 15360 * ((v957 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v552 = (v551 ^ ((v550 | ((v522 ^ 16 * v522 & 15360 * ((v957 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v553 = (16 * v552 ^ v552 ^ v551 ^ ((16 * v552 ^ v552 ^ v551) >> 8)) & 0x4E009E ^ 16 * v552 ^ v552 ^ v551 ^ (((16 * v552 ^ v552 ^ v551 ^ ((16 * v552 ^ v552 ^ v551) >> 8)) & 0x4E009E) << 8);\n      v554 = ((unsigned __int16)((v553 ^ HIWORD(v553)) & 0xD9D3) << 16) ^ ((unsigned __int16)v553 ^ HIWORD(v553)) & 0xD9D3 ^ v553;\n      v555 = 16 * ((v554 ^ (v554 >> 4)) & 0x5040004) ^ (v554 ^ (v554 >> 4)) & 0x5040004 ^ v554;\n      v556 = 2 * ((v555 ^ (v555 >> 1)) & 0x4045015) ^ (v555 ^ (v555 >> 1)) & 0x4045015 ^ v864 ^ v555;\n      v557 = 0;\n      v865 = v556;\n      v558 = 0;\n      v559 = 0;\n      v560 = v556 ^ *(_DWORD *)(v852 - 360);\n      v561 = *(_DWORD *)(v852 - 296) ^ __ROL4__(v556, 4);\n      v562 = v561;\n      v563 = (v561 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v564 = v562 & 0xFC00FC;\n      v565 = -167733504;\n      v931 = v563;\n      v564 |= 0xFF00FF00;\n      v566 = v564;\n      v567 = v560 & 0xFC00FC | 0xFF00FF00;\n      v568 = v563 - v564;\n      v904 = v564;\n      v958 = v560 & 0xFC00FC | 0xFF00FF00;\n      v985 = (v560 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v569 = v564;\n      v570 = (signed int *)&unk_4DDE0;\n      v571 = 0;\n      v572 = v985 - v566;\n      v573 = v567 - v566;\n      while ( 1 )\n      {\n        v570 += 4;\n        v574 = v547 & (v572 + v569);\n        v571 ^= v569 & v548;\n        v575 = v569 + v568;\n        v558 ^= v549 & (v573 + v569);\n        v569 += 524296;\n        v557 ^= v574;\n        v559 ^= v565 & v575;\n        if ( v570 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v548 = *v570;\n        v565 = v570[1];\n        v549 = v570[2];\n        v547 = v570[3];\n      }\n      v576 = 234941184;\n      v577 = -2097117952;\n      v578 = 2063609344;\n      v579 = ((16 * v559 & 15360 * ((v931 + 16777472) & 0x40004) ^ v559) >> 4) & 0xF000F00 | ((16 * v571 & 15360 * ((v904 + 16777472) & 0x40004) ^ v571) >> 12) & 0xF000F | (v557 ^ 16 * v557 & 15360 * ((v985 + 16777472) & 0x40004)) & 0xF000F000;\n      v580 = v579 | ((v558 ^ 16 * v558 & 15360 * ((v958 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v581 = (v580 ^ ((v579 | ((v558 ^ 16 * v558 & 15360 * ((v958 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v582 = (16 * v581 ^ v581 ^ v580 ^ ((16 * v581 ^ v581 ^ v580) >> 8)) & 0x4E009E ^ 16 * v581 ^ v581 ^ v580 ^ (((16 * v581 ^ v581 ^ v580 ^ ((16 * v581 ^ v581 ^ v580) >> 8)) & 0x4E009E) << 8);\n      v583 = ((unsigned __int16)((v582 ^ HIWORD(v582)) & 0xD9D3) << 16) ^ ((unsigned __int16)v582 ^ HIWORD(v582)) & 0xD9D3 ^ v582;\n      v584 = 16 * ((v583 ^ (v583 >> 4)) & 0x5040004) ^ (v583 ^ (v583 >> 4)) & 0x5040004 ^ v583;\n      v585 = 2 * ((v584 ^ (v584 >> 1)) & 0x4045015) ^ (v584 ^ (v584 >> 1)) & 0x4045015 ^ v879 ^ v584;\n      v586 = 0;\n      v880 = v585;\n      v587 = 0;\n      v588 = 0;\n      v589 = v585 ^ *(_DWORD *)(v852 - 364);\n      v590 = *(_DWORD *)(v852 - 300) ^ __ROL4__(v585, 4);\n      v591 = v590;\n      v592 = (v590 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v593 = v591 & 0xFC00FC;\n      v594 = -167733504;\n      v932 = v592;\n      v593 |= 0xFF00FF00;\n      v595 = v593;\n      v596 = v589 & 0xFC00FC | 0xFF00FF00;\n      v597 = v592 - v593;\n      v905 = v593;\n      v959 = v589 & 0xFC00FC | 0xFF00FF00;\n      v986 = (v589 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v598 = v593;\n      v599 = (signed int *)&unk_4DDE0;\n      v600 = 0;\n      v601 = v986 - v595;\n      v602 = v596 - v595;\n      v848 = v597;\n      while ( 1 )\n      {\n        v599 += 4;\n        v603 = v578 & (v602 + v598);\n        v604 = v576 & (v601 + v598);\n        v605 = v598 + v848;\n        v600 ^= v598 & v577;\n        v598 += 524296;\n        v587 ^= v603;\n        v586 ^= v604;\n        v588 ^= v594 & v605;\n        if ( v599 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v577 = *v599;\n        v594 = v599[1];\n        v578 = v599[2];\n        v576 = v599[3];\n      }\n      v606 = 234941184;\n      v607 = -2097117952;\n      v608 = 2063609344;\n      v609 = ((16 * v588 & 15360 * ((v932 + 16777472) & 0x40004) ^ v588) >> 4) & 0xF000F00 | ((16 * v600 & 15360 * ((v905 + 16777472) & 0x40004) ^ v600) >> 12) & 0xF000F | (v586 ^ 16 * v586 & 15360 * ((v986 + 16777472) & 0x40004)) & 0xF000F000;\n      v610 = v609 | ((v587 ^ 16 * v587 & 15360 * ((v959 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v611 = (v610 ^ ((v609 | ((v587 ^ 16 * v587 & 15360 * ((v959 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v612 = (16 * v611 ^ v611 ^ v610 ^ ((16 * v611 ^ v611 ^ v610) >> 8)) & 0x4E009E ^ 16 * v611 ^ v611 ^ v610 ^ (((16 * v611 ^ v611 ^ v610 ^ ((16 * v611 ^ v611 ^ v610) >> 8)) & 0x4E009E) << 8);\n      v613 = ((unsigned __int16)((v612 ^ HIWORD(v612)) & 0xD9D3) << 16) ^ ((unsigned __int16)v612 ^ HIWORD(v612)) & 0xD9D3 ^ v612;\n      v614 = 16 * ((v613 ^ (v613 >> 4)) & 0x5040004) ^ (v613 ^ (v613 >> 4)) & 0x5040004 ^ v613;\n      v615 = 2 * ((v614 ^ (v614 >> 1)) & 0x4045015) ^ (v614 ^ (v614 >> 1)) & 0x4045015 ^ v865 ^ v614;\n      v616 = 0;\n      v866 = v615;\n      v617 = 0;\n      v618 = 0;\n      v619 = v615 ^ *(_DWORD *)(v852 - 368);\n      v620 = *(_DWORD *)(v852 - 304) ^ __ROL4__(v615, 4);\n      v621 = v620;\n      v622 = (v620 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v623 = v621 & 0xFC00FC;\n      v624 = -167733504;\n      v933 = v622;\n      v623 |= 0xFF00FF00;\n      v625 = v623;\n      v626 = v619 & 0xFC00FC | 0xFF00FF00;\n      v627 = v622 - v623;\n      v906 = v623;\n      v960 = v619 & 0xFC00FC | 0xFF00FF00;\n      v987 = (v619 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v628 = v623;\n      v629 = (signed int *)&unk_4DDE0;\n      v630 = 0;\n      v631 = v987 - v625;\n      v632 = v626 - v625;\n      while ( 1 )\n      {\n        v629 += 4;\n        v633 = v606 & (v631 + v628);\n        v630 ^= v628 & v607;\n        v634 = v628 + v627;\n        v617 ^= v608 & (v632 + v628);\n        v628 += 524296;\n        v616 ^= v633;\n        v618 ^= v624 & v634;\n        if ( v629 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v607 = *v629;\n        v624 = v629[1];\n        v608 = v629[2];\n        v606 = v629[3];\n      }\n      v635 = 234941184;\n      v636 = -2097117952;\n      v637 = 2063609344;\n      v638 = ((16 * v618 & 15360 * ((v933 + 16777472) & 0x40004) ^ v618) >> 4) & 0xF000F00 | ((16 * v630 & 15360 * ((v906 + 16777472) & 0x40004) ^ v630) >> 12) & 0xF000F | (v616 ^ 16 * v616 & 15360 * ((v987 + 16777472) & 0x40004)) & 0xF000F000;\n      v639 = v638 | ((v617 ^ 16 * v617 & 15360 * ((v960 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v640 = (v639 ^ ((v638 | ((v617 ^ 16 * v617 & 15360 * ((v960 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v641 = (16 * v640 ^ v640 ^ v639 ^ ((16 * v640 ^ v640 ^ v639) >> 8)) & 0x4E009E ^ 16 * v640 ^ v640 ^ v639 ^ (((16 * v640 ^ v640 ^ v639 ^ ((16 * v640 ^ v640 ^ v639) >> 8)) & 0x4E009E) << 8);\n      v642 = ((unsigned __int16)((v641 ^ HIWORD(v641)) & 0xD9D3) << 16) ^ ((unsigned __int16)v641 ^ HIWORD(v641)) & 0xD9D3 ^ v641;\n      v643 = 16 * ((v642 ^ (v642 >> 4)) & 0x5040004) ^ (v642 ^ (v642 >> 4)) & 0x5040004 ^ v642;\n      v644 = 2 * ((v643 ^ (v643 >> 1)) & 0x4045015) ^ (v643 ^ (v643 >> 1)) & 0x4045015 ^ v880 ^ v643;\n      v645 = 0;\n      v881 = v644;\n      v646 = 0;\n      v647 = 0;\n      v648 = v644 ^ *(_DWORD *)(v852 - 372);\n      v649 = *(_DWORD *)(v852 - 308) ^ __ROL4__(v644, 4);\n      v650 = v649;\n      v651 = (v649 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v652 = v650 & 0xFC00FC;\n      v653 = -167733504;\n      v934 = v651;\n      v652 |= 0xFF00FF00;\n      v654 = v652;\n      v655 = v648 & 0xFC00FC | 0xFF00FF00;\n      v656 = v651 - v652;\n      v907 = v652;\n      v961 = v648 & 0xFC00FC | 0xFF00FF00;\n      v988 = (v648 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v657 = v652;\n      v658 = (signed int *)&unk_4DDE0;\n      v659 = 0;\n      v660 = v988 - v654;\n      v661 = v655 - v654;\n      v849 = v656;\n      while ( 1 )\n      {\n        v658 += 4;\n        v662 = v637 & (v661 + v657);\n        v663 = v635 & (v660 + v657);\n        v664 = v657 + v849;\n        v659 ^= v657 & v636;\n        v657 += 524296;\n        v646 ^= v662;\n        v645 ^= v663;\n        v647 ^= v653 & v664;\n        if ( v658 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v636 = *v658;\n        v653 = v658[1];\n        v637 = v658[2];\n        v635 = v658[3];\n      }\n      v665 = 234941184;\n      v666 = -2097117952;\n      v667 = 2063609344;\n      v668 = ((16 * v647 & 15360 * ((v934 + 16777472) & 0x40004) ^ v647) >> 4) & 0xF000F00 | ((16 * v659 & 15360 * ((v907 + 16777472) & 0x40004) ^ v659) >> 12) & 0xF000F | (v645 ^ 16 * v645 & 15360 * ((v988 + 16777472) & 0x40004)) & 0xF000F000;\n      v669 = v668 | ((v646 ^ 16 * v646 & 15360 * ((v961 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v670 = (v669 ^ ((v668 | ((v646 ^ 16 * v646 & 15360 * ((v961 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v671 = (16 * v670 ^ v670 ^ v669 ^ ((16 * v670 ^ v670 ^ v669) >> 8)) & 0x4E009E ^ 16 * v670 ^ v670 ^ v669 ^ (((16 * v670 ^ v670 ^ v669 ^ ((16 * v670 ^ v670 ^ v669) >> 8)) & 0x4E009E) << 8);\n      v672 = ((unsigned __int16)((v671 ^ HIWORD(v671)) & 0xD9D3) << 16) ^ ((unsigned __int16)v671 ^ HIWORD(v671)) & 0xD9D3 ^ v671;\n      v673 = 16 * ((v672 ^ (v672 >> 4)) & 0x5040004) ^ (v672 ^ (v672 >> 4)) & 0x5040004 ^ v672;\n      v674 = 2 * ((v673 ^ (v673 >> 1)) & 0x4045015) ^ (v673 ^ (v673 >> 1)) & 0x4045015 ^ v866 ^ v673;\n      v675 = 0;\n      v867 = v674;\n      v676 = 0;\n      v677 = 0;\n      v678 = v674 ^ *(_DWORD *)(v852 - 376);\n      v679 = *(_DWORD *)(v852 - 312) ^ __ROL4__(v674, 4);\n      v680 = v679;\n      v681 = (v679 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v682 = v680 & 0xFC00FC;\n      v683 = -167733504;\n      v935 = v681;\n      v682 |= 0xFF00FF00;\n      v684 = v682;\n      v685 = v678 & 0xFC00FC | 0xFF00FF00;\n      v686 = v681 - v682;\n      v908 = v682;\n      v962 = v678 & 0xFC00FC | 0xFF00FF00;\n      v989 = (v678 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v687 = v682;\n      v688 = (signed int *)&unk_4DDE0;\n      v689 = 0;\n      v690 = v989 - v684;\n      v691 = v685 - v684;\n      while ( 1 )\n      {\n        v688 += 4;\n        v692 = v665 & (v690 + v687);\n        v689 ^= v687 & v666;\n        v693 = v687 + v686;\n        v676 ^= v667 & (v691 + v687);\n        v687 += 524296;\n        v675 ^= v692;\n        v677 ^= v683 & v693;\n        if ( v688 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v666 = *v688;\n        v683 = v688[1];\n        v667 = v688[2];\n        v665 = v688[3];\n      }\n      v694 = 234941184;\n      v695 = -2097117952;\n      v696 = 2063609344;\n      v697 = ((16 * v677 & 15360 * ((v935 + 16777472) & 0x40004) ^ v677) >> 4) & 0xF000F00 | ((16 * v689 & 15360 * ((v908 + 16777472) & 0x40004) ^ v689) >> 12) & 0xF000F | (v675 ^ 16 * v675 & 15360 * ((v989 + 16777472) & 0x40004)) & 0xF000F000;\n      v698 = v697 | ((v676 ^ 16 * v676 & 15360 * ((v962 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v699 = (v698 ^ ((v697 | ((v676 ^ 16 * v676 & 15360 * ((v962 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v700 = (16 * v699 ^ v699 ^ v698 ^ ((16 * v699 ^ v699 ^ v698) >> 8)) & 0x4E009E ^ 16 * v699 ^ v699 ^ v698 ^ (((16 * v699 ^ v699 ^ v698 ^ ((16 * v699 ^ v699 ^ v698) >> 8)) & 0x4E009E) << 8);\n      v701 = ((unsigned __int16)((v700 ^ HIWORD(v700)) & 0xD9D3) << 16) ^ ((unsigned __int16)v700 ^ HIWORD(v700)) & 0xD9D3 ^ v700;\n      v702 = 16 * ((v701 ^ (v701 >> 4)) & 0x5040004) ^ (v701 ^ (v701 >> 4)) & 0x5040004 ^ v701;\n      v703 = 2 * ((v702 ^ (v702 >> 1)) & 0x4045015) ^ (v702 ^ (v702 >> 1)) & 0x4045015 ^ v881 ^ v702;\n      v704 = 0;\n      v882 = v703;\n      v705 = 0;\n      v706 = 0;\n      v707 = v703 ^ *(_DWORD *)(v852 - 380);\n      v708 = *(_DWORD *)(v852 - 316) ^ __ROL4__(v703, 4);\n      v709 = v708;\n      v710 = (v708 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v711 = v709 & 0xFC00FC;\n      v712 = -167733504;\n      v936 = v710;\n      v711 |= 0xFF00FF00;\n      v713 = v711;\n      v714 = v707 & 0xFC00FC | 0xFF00FF00;\n      v715 = v710 - v711;\n      v909 = v711;\n      v963 = v707 & 0xFC00FC | 0xFF00FF00;\n      v990 = (v707 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v716 = v711;\n      v717 = (signed int *)&unk_4DDE0;\n      v718 = 0;\n      v719 = v990 - v713;\n      v720 = v714 - v713;\n      v850 = v715;\n      while ( 1 )\n      {\n        v717 += 4;\n        v721 = v696 & (v720 + v716);\n        v722 = v694 & (v719 + v716);\n        v723 = v716 + v850;\n        v718 ^= v716 & v695;\n        v716 += 524296;\n        v705 ^= v721;\n        v704 ^= v722;\n        v706 ^= v712 & v723;\n        if ( v717 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v695 = *v717;\n        v712 = v717[1];\n        v696 = v717[2];\n        v694 = v717[3];\n      }\n      v724 = 234941184;\n      v725 = -2097117952;\n      v726 = 2063609344;\n      v727 = ((16 * v706 & 15360 * ((v936 + 16777472) & 0x40004) ^ v706) >> 4) & 0xF000F00 | ((16 * v718 & 15360 * ((v909 + 16777472) & 0x40004) ^ v718) >> 12) & 0xF000F | (v704 ^ 16 * v704 & 15360 * ((v990 + 16777472) & 0x40004)) & 0xF000F000;\n      v728 = v727 | ((v705 ^ 16 * v705 & 15360 * ((v963 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v729 = (v728 ^ ((v727 | ((v705 ^ 16 * v705 & 15360 * ((v963 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v730 = (16 * v729 ^ v729 ^ v728 ^ ((16 * v729 ^ v729 ^ v728) >> 8)) & 0x4E009E ^ 16 * v729 ^ v729 ^ v728 ^ (((16 * v729 ^ v729 ^ v728 ^ ((16 * v729 ^ v729 ^ v728) >> 8)) & 0x4E009E) << 8);\n      v731 = ((unsigned __int16)((v730 ^ HIWORD(v730)) & 0xD9D3) << 16) ^ ((unsigned __int16)v730 ^ HIWORD(v730)) & 0xD9D3 ^ v730;\n      v732 = 16 * ((v731 ^ (v731 >> 4)) & 0x5040004) ^ (v731 ^ (v731 >> 4)) & 0x5040004 ^ v731;\n      v733 = 2 * ((v732 ^ (v732 >> 1)) & 0x4045015) ^ (v732 ^ (v732 >> 1)) & 0x4045015 ^ v867 ^ v732;\n      v734 = 0;\n      v868 = v733;\n      v735 = 0;\n      v736 = 0;\n      v737 = v733 ^ *(_DWORD *)(v852 - 384);\n      v738 = *(_DWORD *)(v852 - 320) ^ __ROL4__(v733, 4);\n      v739 = v738;\n      v740 = (v738 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v741 = v739 & 0xFC00FC;\n      v742 = -167733504;\n      v937 = v740;\n      v741 |= 0xFF00FF00;\n      v743 = v741;\n      v744 = v737 & 0xFC00FC | 0xFF00FF00;\n      v745 = v740 - v741;\n      v910 = v741;\n      v964 = v737 & 0xFC00FC | 0xFF00FF00;\n      v991 = (v737 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v746 = v741;\n      v747 = (signed int *)&unk_4DDE0;\n      v748 = 0;\n      v749 = v991 - v743;\n      v750 = v744 - v743;\n      while ( 1 )\n      {\n        v747 += 4;\n        v751 = v724 & (v749 + v746);\n        v748 ^= v746 & v725;\n        v752 = v746 + v745;\n        v735 ^= v726 & (v750 + v746);\n        v746 += 524296;\n        v734 ^= v751;\n        v736 ^= v742 & v752;\n        if ( v747 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v725 = *v747;\n        v742 = v747[1];\n        v726 = v747[2];\n        v724 = v747[3];\n      }\n      v753 = 234941184;\n      v754 = -2097117952;\n      v755 = 2063609344;\n      v756 = ((16 * v736 & 15360 * ((v937 + 16777472) & 0x40004) ^ v736) >> 4) & 0xF000F00 | ((16 * v748 & 15360 * ((v910 + 16777472) & 0x40004) ^ v748) >> 12) & 0xF000F | (v734 ^ 16 * v734 & 15360 * ((v991 + 16777472) & 0x40004)) & 0xF000F000;\n      v757 = v756 | ((v735 ^ 16 * v735 & 15360 * ((v964 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v758 = (v757 ^ ((v756 | ((v735 ^ 16 * v735 & 15360 * ((v964 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v759 = (16 * v758 ^ v758 ^ v757 ^ ((16 * v758 ^ v758 ^ v757) >> 8)) & 0x4E009E ^ 16 * v758 ^ v758 ^ v757 ^ (((16 * v758 ^ v758 ^ v757 ^ ((16 * v758 ^ v758 ^ v757) >> 8)) & 0x4E009E) << 8);\n      v760 = ((unsigned __int16)((v759 ^ HIWORD(v759)) & 0xD9D3) << 16) ^ ((unsigned __int16)v759 ^ HIWORD(v759)) & 0xD9D3 ^ v759;\n      v761 = 16 * ((v760 ^ (v760 >> 4)) & 0x5040004) ^ (v760 ^ (v760 >> 4)) & 0x5040004 ^ v760;\n      v762 = 2 * ((v761 ^ (v761 >> 1)) & 0x4045015) ^ (v761 ^ (v761 >> 1)) & 0x4045015 ^ v882 ^ v761;\n      v763 = 0;\n      v883 = v762;\n      v764 = 0;\n      v765 = 0;\n      v766 = v762 ^ *(_DWORD *)(v852 - 388);\n      v767 = *(_DWORD *)(v852 - 324) ^ __ROL4__(v762, 4);\n      v768 = v767;\n      v769 = (v767 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v770 = v768 & 0xFC00FC;\n      v771 = -167733504;\n      v938 = v769;\n      v770 |= 0xFF00FF00;\n      v772 = v770;\n      v773 = v766 & 0xFC00FC | 0xFF00FF00;\n      v774 = v769 - v770;\n      v911 = v770;\n      v965 = v766 & 0xFC00FC | 0xFF00FF00;\n      v992 = (v766 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v775 = v770;\n      v776 = (signed int *)&unk_4DDE0;\n      v777 = 0;\n      v778 = v992 - v772;\n      v779 = v773 - v772;\n      v851 = v774;\n      while ( 1 )\n      {\n        v776 += 4;\n        v780 = v755 & (v779 + v775);\n        v781 = v753 & (v778 + v775);\n        v782 = v775 + v851;\n        v777 ^= v775 & v754;\n        v775 += 524296;\n        v764 ^= v780;\n        v763 ^= v781;\n        v765 ^= v771 & v782;\n        if ( v776 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v754 = *v776;\n        v771 = v776[1];\n        v755 = v776[2];\n        v753 = v776[3];\n      }\n      v783 = 234941184;\n      v784 = -2097117952;\n      v785 = 2063609344;\n      v786 = ((16 * v765 & 15360 * ((v938 + 16777472) & 0x40004) ^ v765) >> 4) & 0xF000F00 | ((16 * v777 & 15360 * ((v911 + 16777472) & 0x40004) ^ v777) >> 12) & 0xF000F | (v763 ^ 16 * v763 & 15360 * ((v992 + 16777472) & 0x40004)) & 0xF000F000;\n      v787 = v786 | ((v764 ^ 16 * v764 & 15360 * ((v965 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v788 = (v787 ^ ((v786 | ((v764 ^ 16 * v764 & 15360 * ((v965 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v789 = (16 * v788 ^ v788 ^ v787 ^ ((16 * v788 ^ v788 ^ v787) >> 8)) & 0x4E009E ^ 16 * v788 ^ v788 ^ v787 ^ (((16 * v788 ^ v788 ^ v787 ^ ((16 * v788 ^ v788 ^ v787) >> 8)) & 0x4E009E) << 8);\n      v790 = ((unsigned __int16)((v789 ^ HIWORD(v789)) & 0xD9D3) << 16) ^ ((unsigned __int16)v789 ^ HIWORD(v789)) & 0xD9D3 ^ v789;\n      v791 = 16 * ((v790 ^ (v790 >> 4)) & 0x5040004) ^ (v790 ^ (v790 >> 4)) & 0x5040004 ^ v790;\n      v792 = 2 * ((v791 ^ (v791 >> 1)) & 0x4045015) ^ (v791 ^ (v791 >> 1)) & 0x4045015 ^ v868 ^ v791;\n      v793 = 0;\n      v869 = v792;\n      v794 = 0;\n      v795 = 0;\n      v796 = v792 ^ *(_DWORD *)(v852 - 392);\n      v797 = *(_DWORD *)(v852 - 328) ^ __ROL4__(v792, 4);\n      v798 = v797;\n      v799 = (v797 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v800 = v798 & 0xFC00FC;\n      v801 = -167733504;\n      v939 = v799;\n      v800 |= 0xFF00FF00;\n      v802 = v800;\n      v803 = v796 & 0xFC00FC | 0xFF00FF00;\n      v804 = v799 - v800;\n      v912 = v800;\n      v966 = v796 & 0xFC00FC | 0xFF00FF00;\n      v993 = (v796 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v805 = v800;\n      v806 = (signed int *)&unk_4DDE0;\n      v807 = 0;\n      v808 = v993 - v802;\n      v809 = v803 - v802;\n      while ( 1 )\n      {\n        v806 += 4;\n        v810 = v783 & (v808 + v805);\n        v807 ^= v805 & v784;\n        v811 = v805 + v804;\n        v794 ^= v785 & (v809 + v805);\n        v805 += 524296;\n        v793 ^= v810;\n        v795 ^= v801 & v811;\n        if ( v806 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v784 = *v806;\n        v801 = v806[1];\n        v785 = v806[2];\n        v783 = v806[3];\n      }\n      v812 = ((16 * v795 & 15360 * ((v939 + 16777472) & 0x40004) ^ v795) >> 4) & 0xF000F00 | ((16 * v807 & 15360 * ((v912 + 16777472) & 0x40004) ^ v807) >> 12) & 0xF000F | (v793 ^ 16 * v793 & 15360 * ((v993 + 16777472) & 0x40004)) & 0xF000F000;\n      v813 = v812 | ((v794 ^ 16 * v794 & 15360 * ((v966 + 16777472) & 0x40004)) >> 8) & 0xF000F0;\n      v814 = (v813 ^ ((v812 | ((v794 ^ 16 * v794 & 15360 * ((v966 + 16777472) & 0x40004)) >> 8) & 0xF000F0) >> 4)) & 0x7030702;\n      v815 = (16 * v814 ^ v814 ^ v813 ^ ((16 * v814 ^ v814 ^ v813) >> 8)) & 0x4E009E ^ 16 * v814 ^ v814 ^ v813 ^ (((16 * v814 ^ v814 ^ v813 ^ ((16 * v814 ^ v814 ^ v813) >> 8)) & 0x4E009E) << 8);\n      v816 = ((unsigned __int16)((v815 ^ HIWORD(v815)) & 0xD9D3) << 16) ^ ((unsigned __int16)v815 ^ HIWORD(v815)) & 0xD9D3 ^ v815;\n      v817 = 16 * ((v816 ^ (v816 >> 4)) & 0x5040004) ^ (v816 ^ (v816 >> 4)) & 0x5040004 ^ v816;\n      v818 = __ROL4__(2 * ((v817 ^ (v817 >> 1)) & 0x4045015) ^ (v817 ^ (v817 >> 1)) & 0x4045015 ^ v883 ^ v817, 1);\n      v819 = (__ROL4__(v869, 1) ^ (v818 >> 1)) & 0x55555555;\n      v820 = v819 ^ __ROL4__(v869, 1);\n      v821 = 2 * v819 ^ v818;\n      v822 = (v821 ^ (((unsigned int)v819 ^ __ROL4__(v869, 1)) >> 8)) & 0xFF00FF;\n      v823 = v822;\n      v824 = v821 ^ v822;\n      v825 = v820 ^ (v823 << 8);\n      v826 = (v824 ^ (v825 >> 2)) & 0x33333333;\n      v827 = 4 * v826;\n      v828 = v824 ^ v826;\n      v829 = v825 ^ v827;\n      v830 = (unsigned __int16)(v829 ^ HIWORD(v828));\n      v831 = v830 ^ v829;\n      v832 = v828 ^ (v830 << 16);\n      v833 = (v831 ^ ((v828 ^ (unsigned int)(v830 << 16)) >> 4)) & 0xF0F0F0F;\n      v834 = 16 * v833 ^ *(_DWORD *)(v852 - 8) ^ v832;\n      v835 = *(_DWORD *)(v852 - 4) ^ v831 ^ v833;\n      *(_BYTE *)(v853 + 7) = v835;\n      *(_BYTE *)(v853 + 6) = BYTE1(v835);\n      *(_BYTE *)(v853 + 3) = v834;\n      *(_BYTE *)(v853 + 1) = BYTE2(v834);\n      *(_BYTE *)(v853 + 4) = HIBYTE(v835);\n      *(_BYTE *)(v853 + 2) = BYTE1(v834);\n      v836 = v853 + 8 == v994;\n      *(_BYTE *)v853 = HIBYTE(v834);\n      *(_BYTE *)(v853 + 5) = BYTE2(v835);\n      *(_DWORD *)(v852 - 8) = v884;\n      v853 += 8LL;\n      *(_DWORD *)(v852 - 4) = v885;\n    }\n    while ( !v836 );\n  }\n}\n", 
            "funcStartAddr": "0x2acd0L", 
            "funcEndAddr": "0x2e4a9L", 
            "funcName": "sub_2ACD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_2E4B0(__int64 a1, __int64 a2, int a3)\n{\n  signed int v3; // er9\n  signed int v4; // edi\n  signed int v5; // er11\n  unsigned __int32 v6; // esi\n  unsigned __int32 v7; // eax\n  unsigned __int32 v8; // ecx\n  int v9; // eax\n  int v10; // edx\n  int v11; // eax\n  int v12; // esi\n  int v13; // ecx\n  unsigned int v14; // eax\n  int v15; // edx\n  int v16; // ecx\n  int v17; // edx\n  int v18; // esi\n  unsigned int v19; // ecx\n  unsigned int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  int v23; // eax\n  unsigned int v24; // edx\n  unsigned int v25; // eax\n  int v26; // er12\n  int v27; // ebp\n  unsigned int v28; // er13\n  unsigned int v29; // ecx\n  unsigned int v30; // eax\n  int v31; // ebx\n  signed int v32; // ecx\n  int v33; // esi\n  unsigned int v34; // er14\n  int v35; // er8\n  int v36; // edx\n  signed int *v37; // rax\n  int v38; // ebx\n  int v39; // er15\n  int v40; // er14\n  int v41; // er8\n  int v42; // esi\n  int v43; // er10\n  __int64 v44; // r14\n  unsigned int v45; // eax\n  unsigned int v46; // eax\n  int v47; // eax\n  unsigned int v48; // eax\n  unsigned int v49; // eax\n  int v50; // ebx\n  int v51; // er12\n  int v52; // ebp\n  int v53; // ebx\n  int v54; // ebp\n  int v55; // ebx\n  int v56; // ebp\n  int v57; // ebx\n  int v58; // edi\n  int v59; // ebp\n  int v60; // ebx\n  signed int v61; // er9\n  signed int v62; // edi\n  signed int v63; // er11\n  unsigned int v64; // edx\n  unsigned int v65; // eax\n  unsigned int v66; // ecx\n  unsigned int v67; // eax\n  int v68; // ebx\n  signed int v69; // ecx\n  unsigned int v70; // er8\n  int v71; // esi\n  unsigned int v72; // eax\n  unsigned int v73; // er15\n  int v74; // edx\n  int v75; // ebx\n  unsigned int v76; // er13\n  signed int *v77; // rax\n  int v78; // er15\n  int v79; // er14\n  int v80; // er8\n  int v81; // esi\n  int v82; // er10\n  signed int v83; // er9\n  signed int v84; // er11\n  signed int v85; // edi\n  unsigned int v86; // eax\n  unsigned int v87; // eax\n  int v88; // eax\n  unsigned int v89; // eax\n  unsigned int v90; // eax\n  int v91; // eax\n  int v92; // er12\n  int v93; // ebp\n  unsigned int v94; // er13\n  unsigned int v95; // edx\n  unsigned int v96; // eax\n  unsigned int v97; // ecx\n  unsigned int v98; // eax\n  int v99; // ebx\n  signed int v100; // ecx\n  int v101; // esi\n  unsigned int v102; // er14\n  int v103; // er8\n  int v104; // edx\n  signed int *v105; // rax\n  int v106; // ebx\n  int v107; // er15\n  int v108; // er14\n  int v109; // er8\n  int v110; // esi\n  int v111; // er10\n  signed int v112; // er9\n  signed int v113; // er11\n  signed int v114; // edi\n  unsigned int v115; // eax\n  unsigned int v116; // eax\n  int v117; // eax\n  unsigned int v118; // eax\n  unsigned int v119; // eax\n  int v120; // eax\n  int v121; // er12\n  int v122; // ebp\n  unsigned int v123; // er13\n  unsigned int v124; // edx\n  unsigned int v125; // eax\n  unsigned int v126; // ecx\n  unsigned int v127; // eax\n  int v128; // ebx\n  signed int v129; // ecx\n  int v130; // esi\n  unsigned int v131; // er14\n  int v132; // er8\n  int v133; // edx\n  signed int *v134; // rax\n  int v135; // ebx\n  int v136; // er15\n  int v137; // er14\n  int v138; // er8\n  int v139; // esi\n  int v140; // er10\n  signed int v141; // er9\n  signed int v142; // er11\n  signed int v143; // edi\n  unsigned int v144; // eax\n  unsigned int v145; // eax\n  int v146; // eax\n  unsigned int v147; // eax\n  unsigned int v148; // eax\n  int v149; // eax\n  int v150; // er12\n  int v151; // ebp\n  unsigned int v152; // er13\n  unsigned int v153; // edx\n  unsigned int v154; // eax\n  unsigned int v155; // ecx\n  unsigned int v156; // eax\n  int v157; // ebx\n  signed int v158; // ecx\n  int v159; // esi\n  unsigned int v160; // er14\n  int v161; // er8\n  int v162; // edx\n  signed int *v163; // rax\n  int v164; // ebx\n  int v165; // er15\n  int v166; // er14\n  int v167; // esi\n  int v168; // er10\n  signed int v169; // er9\n  signed int v170; // er11\n  signed int v171; // edi\n  unsigned int v172; // eax\n  unsigned int v173; // eax\n  int v174; // eax\n  unsigned int v175; // eax\n  unsigned int v176; // eax\n  int v177; // eax\n  int v178; // er12\n  int v179; // ebp\n  unsigned int v180; // er13\n  unsigned int v181; // edx\n  unsigned int v182; // eax\n  unsigned int v183; // ecx\n  unsigned int v184; // eax\n  int v185; // ebx\n  signed int v186; // ecx\n  int v187; // esi\n  unsigned int v188; // er14\n  int v189; // er8\n  int v190; // edx\n  signed int *v191; // rax\n  int v192; // ebx\n  int v193; // er15\n  int v194; // er14\n  int v195; // er8\n  int v196; // esi\n  int v197; // er10\n  signed int v198; // er9\n  signed int v199; // er11\n  signed int v200; // edi\n  unsigned int v201; // eax\n  unsigned int v202; // eax\n  int v203; // eax\n  unsigned int v204; // eax\n  unsigned int v205; // eax\n  int v206; // eax\n  int v207; // er12\n  int v208; // ebp\n  unsigned int v209; // er13\n  unsigned int v210; // edx\n  unsigned int v211; // eax\n  unsigned int v212; // ecx\n  unsigned int v213; // eax\n  int v214; // ebx\n  signed int v215; // ecx\n  int v216; // esi\n  unsigned int v217; // er14\n  int v218; // er8\n  int v219; // edx\n  signed int *v220; // rax\n  int v221; // ebx\n  int v222; // er15\n  int v223; // er14\n  int v224; // esi\n  int v225; // er10\n  signed int v226; // er9\n  signed int v227; // er11\n  signed int v228; // edi\n  unsigned int v229; // eax\n  unsigned int v230; // eax\n  int v231; // eax\n  unsigned int v232; // eax\n  unsigned int v233; // eax\n  int v234; // eax\n  int v235; // er12\n  int v236; // ebp\n  unsigned int v237; // er13\n  unsigned int v238; // edx\n  unsigned int v239; // eax\n  unsigned int v240; // ecx\n  unsigned int v241; // eax\n  int v242; // ebx\n  signed int v243; // ecx\n  int v244; // esi\n  unsigned int v245; // er14\n  int v246; // er8\n  int v247; // edx\n  signed int *v248; // rax\n  int v249; // ebx\n  int v250; // er15\n  int v251; // er14\n  int v252; // er8\n  int v253; // esi\n  int v254; // er10\n  unsigned int v255; // eax\n  unsigned int v256; // eax\n  int v257; // eax\n  unsigned int v258; // eax\n  unsigned int v259; // eax\n  unsigned int v260; // ebx\n  int v261; // er12\n  unsigned int v262; // ebp\n  unsigned int v263; // er13\n  __int64 v264; // rax\n  int v265; // ecx\n  int v266; // edx\n  signed int v267; // er9\n  signed int v268; // edi\n  signed int v269; // er11\n  unsigned int v270; // edx\n  int v271; // ecx\n  int v272; // ebx\n  signed int v273; // ecx\n  int v274; // esi\n  unsigned int v275; // er14\n  int v276; // er8\n  int v277; // edx\n  signed int *v278; // rax\n  int v279; // ebx\n  int v280; // er15\n  int v281; // er14\n  int v282; // esi\n  int v283; // er10\n  signed int v284; // er9\n  signed int v285; // er11\n  signed int v286; // edi\n  unsigned int v287; // eax\n  unsigned int v288; // eax\n  int v289; // eax\n  unsigned int v290; // eax\n  unsigned int v291; // eax\n  int v292; // eax\n  int v293; // er12\n  int v294; // ebp\n  unsigned int v295; // er13\n  unsigned int v296; // edx\n  unsigned int v297; // eax\n  unsigned int v298; // ecx\n  unsigned int v299; // eax\n  int v300; // ebx\n  signed int v301; // ecx\n  int v302; // esi\n  unsigned int v303; // er14\n  int v304; // er8\n  int v305; // edx\n  signed int *v306; // rax\n  int v307; // ebx\n  int v308; // er15\n  int v309; // er14\n  int v310; // er8\n  int v311; // esi\n  int v312; // er10\n  signed int v313; // er9\n  signed int v314; // er11\n  signed int v315; // edi\n  unsigned int v316; // eax\n  unsigned int v317; // eax\n  int v318; // eax\n  unsigned int v319; // eax\n  unsigned int v320; // eax\n  int v321; // eax\n  int v322; // er12\n  int v323; // ebp\n  unsigned int v324; // er13\n  unsigned int v325; // edx\n  unsigned int v326; // eax\n  unsigned int v327; // ecx\n  unsigned int v328; // eax\n  int v329; // ebx\n  signed int v330; // ecx\n  int v331; // esi\n  unsigned int v332; // er14\n  int v333; // er8\n  int v334; // edx\n  signed int *v335; // rax\n  int v336; // ebx\n  int v337; // er15\n  int v338; // er14\n  int v339; // esi\n  int v340; // er10\n  signed int v341; // er9\n  signed int v342; // er11\n  signed int v343; // edi\n  unsigned int v344; // eax\n  unsigned int v345; // eax\n  int v346; // eax\n  unsigned int v347; // eax\n  unsigned int v348; // eax\n  int v349; // eax\n  int v350; // er12\n  int v351; // ebp\n  unsigned int v352; // er13\n  unsigned int v353; // edx\n  unsigned int v354; // eax\n  unsigned int v355; // ecx\n  unsigned int v356; // eax\n  int v357; // ebx\n  signed int v358; // ecx\n  int v359; // esi\n  unsigned int v360; // er14\n  int v361; // er8\n  int v362; // edx\n  signed int *v363; // rax\n  int v364; // ebx\n  int v365; // er15\n  int v366; // er14\n  int v367; // er8\n  int v368; // esi\n  int v369; // er10\n  signed int v370; // er9\n  signed int v371; // er11\n  signed int v372; // edi\n  unsigned int v373; // eax\n  unsigned int v374; // eax\n  int v375; // eax\n  unsigned int v376; // eax\n  unsigned int v377; // eax\n  int v378; // eax\n  int v379; // er12\n  int v380; // ebp\n  unsigned int v381; // er13\n  unsigned int v382; // edx\n  unsigned int v383; // eax\n  unsigned int v384; // ecx\n  unsigned int v385; // eax\n  int v386; // ebx\n  signed int v387; // ecx\n  int v388; // esi\n  unsigned int v389; // er14\n  int v390; // er8\n  int v391; // edx\n  signed int *v392; // rax\n  int v393; // ebx\n  int v394; // er15\n  int v395; // er14\n  int v396; // esi\n  int v397; // er10\n  signed int v398; // er9\n  signed int v399; // er11\n  signed int v400; // edi\n  unsigned int v401; // eax\n  unsigned int v402; // eax\n  int v403; // eax\n  unsigned int v404; // eax\n  unsigned int v405; // eax\n  int v406; // eax\n  int v407; // er12\n  int v408; // ebp\n  unsigned int v409; // er13\n  unsigned int v410; // edx\n  unsigned int v411; // eax\n  unsigned int v412; // ecx\n  unsigned int v413; // eax\n  int v414; // ebx\n  signed int v415; // ecx\n  int v416; // esi\n  unsigned int v417; // er14\n  int v418; // er8\n  int v419; // edx\n  signed int *v420; // rax\n  int v421; // ebx\n  int v422; // er15\n  int v423; // er14\n  int v424; // er8\n  int v425; // esi\n  int v426; // er10\n  signed int v427; // er9\n  signed int v428; // er11\n  signed int v429; // edi\n  unsigned int v430; // eax\n  unsigned int v431; // eax\n  int v432; // eax\n  unsigned int v433; // eax\n  unsigned int v434; // eax\n  int v435; // eax\n  int v436; // er12\n  int v437; // ebp\n  unsigned int v438; // er13\n  unsigned int v439; // edx\n  unsigned int v440; // eax\n  unsigned int v441; // ecx\n  unsigned int v442; // eax\n  int v443; // ebx\n  signed int v444; // ecx\n  int v445; // esi\n  unsigned int v446; // er14\n  int v447; // er8\n  int v448; // edx\n  signed int *v449; // rax\n  int v450; // ebx\n  int v451; // er15\n  int v452; // er14\n  int v453; // esi\n  int v454; // er10\n  signed int v455; // er9\n  signed int v456; // er11\n  signed int v457; // edi\n  unsigned int v458; // eax\n  unsigned int v459; // eax\n  int v460; // eax\n  unsigned int v461; // eax\n  unsigned int v462; // eax\n  int v463; // eax\n  int v464; // er12\n  int v465; // ebp\n  unsigned int v466; // er13\n  unsigned int v467; // edx\n  unsigned int v468; // eax\n  unsigned int v469; // ecx\n  unsigned int v470; // eax\n  int v471; // ebx\n  signed int v472; // ecx\n  int v473; // esi\n  unsigned int v474; // er14\n  int v475; // er8\n  int v476; // edx\n  signed int *v477; // rax\n  int v478; // ebx\n  int v479; // er15\n  int v480; // er14\n  int v481; // er8\n  int v482; // esi\n  int v483; // er10\n  signed int v484; // er9\n  signed int v485; // er11\n  signed int v486; // edi\n  unsigned int v487; // eax\n  unsigned int v488; // eax\n  int v489; // eax\n  unsigned int v490; // eax\n  unsigned int v491; // eax\n  int v492; // eax\n  int v493; // er12\n  int v494; // ebp\n  unsigned int v495; // er13\n  unsigned int v496; // edx\n  unsigned int v497; // eax\n  unsigned int v498; // ecx\n  unsigned int v499; // eax\n  int v500; // ebx\n  signed int v501; // ecx\n  int v502; // esi\n  unsigned int v503; // er14\n  int v504; // er8\n  int v505; // edx\n  signed int *v506; // rax\n  int v507; // ebx\n  int v508; // er15\n  int v509; // er14\n  int v510; // esi\n  int v511; // er10\n  signed int v512; // er9\n  signed int v513; // er11\n  signed int v514; // edi\n  unsigned int v515; // eax\n  unsigned int v516; // eax\n  int v517; // eax\n  unsigned int v518; // eax\n  unsigned int v519; // eax\n  int v520; // eax\n  int v521; // er12\n  int v522; // ebp\n  unsigned int v523; // er13\n  unsigned int v524; // edx\n  unsigned int v525; // eax\n  unsigned int v526; // ecx\n  unsigned int v527; // eax\n  int v528; // ebx\n  signed int v529; // ecx\n  int v530; // esi\n  unsigned int v531; // er14\n  int v532; // er8\n  int v533; // edx\n  signed int *v534; // rax\n  int v535; // ebx\n  int v536; // er15\n  int v537; // er14\n  int v538; // er8\n  int v539; // esi\n  int v540; // er10\n  signed int v541; // er9\n  signed int v542; // er11\n  signed int v543; // edi\n  unsigned int v544; // eax\n  unsigned int v545; // eax\n  int v546; // eax\n  unsigned int v547; // eax\n  unsigned int v548; // eax\n  int v549; // eax\n  int v550; // er12\n  int v551; // ebp\n  unsigned int v552; // er13\n  unsigned int v553; // edx\n  unsigned int v554; // eax\n  unsigned int v555; // ecx\n  unsigned int v556; // eax\n  int v557; // ebx\n  signed int v558; // ecx\n  int v559; // esi\n  unsigned int v560; // er14\n  int v561; // er8\n  int v562; // edx\n  signed int *v563; // rax\n  int v564; // ebx\n  int v565; // er15\n  int v566; // er14\n  int v567; // esi\n  int v568; // er10\n  signed int v569; // er9\n  signed int v570; // er11\n  signed int v571; // edi\n  unsigned int v572; // eax\n  unsigned int v573; // eax\n  int v574; // eax\n  unsigned int v575; // eax\n  unsigned int v576; // eax\n  int v577; // eax\n  int v578; // er12\n  int v579; // ebp\n  unsigned int v580; // er13\n  unsigned int v581; // edx\n  unsigned int v582; // eax\n  unsigned int v583; // ecx\n  unsigned int v584; // eax\n  int v585; // ebx\n  signed int v586; // ecx\n  int v587; // esi\n  unsigned int v588; // er14\n  int v589; // er8\n  int v590; // edx\n  signed int *v591; // rax\n  int v592; // ebx\n  int v593; // er15\n  int v594; // er14\n  int v595; // er8\n  int v596; // esi\n  int v597; // er10\n  signed int v598; // er9\n  signed int v599; // er11\n  signed int v600; // edi\n  unsigned int v601; // eax\n  unsigned int v602; // eax\n  int v603; // eax\n  unsigned int v604; // eax\n  unsigned int v605; // eax\n  int v606; // eax\n  int v607; // er12\n  int v608; // ebp\n  unsigned int v609; // er13\n  unsigned int v610; // edx\n  unsigned int v611; // eax\n  unsigned int v612; // ecx\n  unsigned int v613; // eax\n  int v614; // ebx\n  signed int v615; // ecx\n  int v616; // esi\n  unsigned int v617; // er14\n  int v618; // er8\n  int v619; // edx\n  signed int *v620; // rax\n  int v621; // ebx\n  int v622; // er15\n  int v623; // er14\n  int v624; // esi\n  int v625; // er10\n  signed int v626; // er9\n  signed int v627; // er11\n  signed int v628; // edi\n  unsigned int v629; // eax\n  unsigned int v630; // eax\n  int v631; // eax\n  unsigned int v632; // eax\n  unsigned int v633; // eax\n  int v634; // eax\n  int v635; // er12\n  int v636; // ebp\n  unsigned int v637; // er13\n  unsigned int v638; // edx\n  unsigned int v639; // eax\n  unsigned int v640; // ecx\n  unsigned int v641; // eax\n  int v642; // ebx\n  signed int v643; // ecx\n  int v644; // esi\n  unsigned int v645; // er14\n  int v646; // er8\n  int v647; // edx\n  signed int *v648; // rax\n  int v649; // ebx\n  int v650; // er15\n  int v651; // er14\n  int v652; // er8\n  int v653; // esi\n  int v654; // er10\n  signed int v655; // er9\n  signed int v656; // er11\n  signed int v657; // edi\n  unsigned int v658; // eax\n  unsigned int v659; // eax\n  int v660; // eax\n  unsigned int v661; // eax\n  unsigned int v662; // eax\n  int v663; // eax\n  int v664; // er12\n  int v665; // ebp\n  unsigned int v666; // er13\n  unsigned int v667; // edx\n  unsigned int v668; // eax\n  unsigned int v669; // ecx\n  unsigned int v670; // eax\n  int v671; // ebx\n  signed int v672; // ecx\n  int v673; // esi\n  unsigned int v674; // er14\n  int v675; // er8\n  int v676; // edx\n  signed int *v677; // rax\n  int v678; // ebx\n  int v679; // er15\n  int v680; // er14\n  int v681; // esi\n  int v682; // er10\n  signed int v683; // er9\n  signed int v684; // er11\n  signed int v685; // edi\n  unsigned int v686; // eax\n  unsigned int v687; // eax\n  int v688; // eax\n  unsigned int v689; // eax\n  unsigned int v690; // eax\n  int v691; // eax\n  int v692; // er12\n  int v693; // ebp\n  unsigned int v694; // er13\n  unsigned int v695; // edx\n  unsigned int v696; // eax\n  unsigned int v697; // ecx\n  unsigned int v698; // eax\n  int v699; // ebx\n  signed int v700; // ecx\n  int v701; // esi\n  unsigned int v702; // er14\n  int v703; // er8\n  int v704; // edx\n  signed int *v705; // rax\n  int v706; // ebx\n  int v707; // er15\n  int v708; // er14\n  int v709; // er8\n  int v710; // esi\n  int v711; // er10\n  unsigned int v712; // eax\n  unsigned int v713; // eax\n  int v714; // eax\n  unsigned int v715; // eax\n  unsigned int v716; // eax\n  unsigned int v717; // edx\n  int v718; // esi\n  unsigned int v719; // eax\n  int v720; // edx\n  int v721; // ecx\n  int v722; // edx\n  int v723; // esi\n  unsigned int v724; // ecx\n  int v725; // edx\n  int v726; // eax\n  int v727; // ecx\n  int v728; // eax\n  int v729; // esi\n  unsigned int v730; // ecx\n  int v731; // eax\n  int v732; // edx\n  bool v733; // zf\n  int v734; // [rsp+4h] [rbp-6Ch]\n  int v735; // [rsp+4h] [rbp-6Ch]\n  int v736; // [rsp+4h] [rbp-6Ch]\n  int v737; // [rsp+4h] [rbp-6Ch]\n  int v738; // [rsp+4h] [rbp-6Ch]\n  int v739; // [rsp+4h] [rbp-6Ch]\n  int v740; // [rsp+4h] [rbp-6Ch]\n  int v741; // [rsp+4h] [rbp-6Ch]\n  int v742; // [rsp+4h] [rbp-6Ch]\n  int v743; // [rsp+4h] [rbp-6Ch]\n  int v744; // [rsp+4h] [rbp-6Ch]\n  int v745; // [rsp+4h] [rbp-6Ch]\n  int v746; // [rsp+4h] [rbp-6Ch]\n  int v747; // [rsp+4h] [rbp-6Ch]\n  __int64 v748; // [rsp+8h] [rbp-68h]\n  __int64 v749; // [rsp+10h] [rbp-60h]\n  int v750; // [rsp+18h] [rbp-58h]\n  int v751; // [rsp+18h] [rbp-58h]\n  int v752; // [rsp+18h] [rbp-58h]\n  int v753; // [rsp+18h] [rbp-58h]\n  int v754; // [rsp+18h] [rbp-58h]\n  int v755; // [rsp+18h] [rbp-58h]\n  int v756; // [rsp+18h] [rbp-58h]\n  int v757; // [rsp+18h] [rbp-58h]\n  int v758; // [rsp+18h] [rbp-58h]\n  int v759; // [rsp+18h] [rbp-58h]\n  int v760; // [rsp+18h] [rbp-58h]\n  int v761; // [rsp+18h] [rbp-58h]\n  int v762; // [rsp+18h] [rbp-58h]\n  int v763; // [rsp+1Ch] [rbp-54h]\n  int v764; // [rsp+1Ch] [rbp-54h]\n  int v765; // [rsp+1Ch] [rbp-54h]\n  int v766; // [rsp+1Ch] [rbp-54h]\n  unsigned int v767; // [rsp+1Ch] [rbp-54h]\n  int v768; // [rsp+1Ch] [rbp-54h]\n  int v769; // [rsp+1Ch] [rbp-54h]\n  int v770; // [rsp+1Ch] [rbp-54h]\n  int v771; // [rsp+1Ch] [rbp-54h]\n  int v772; // [rsp+1Ch] [rbp-54h]\n  int v773; // [rsp+1Ch] [rbp-54h]\n  int v774; // [rsp+1Ch] [rbp-54h]\n  int v775; // [rsp+1Ch] [rbp-54h]\n  int v776; // [rsp+1Ch] [rbp-54h]\n  unsigned int v777; // [rsp+20h] [rbp-50h]\n  int v778; // [rsp+20h] [rbp-50h]\n  int v779; // [rsp+20h] [rbp-50h]\n  int v780; // [rsp+20h] [rbp-50h]\n  int v781; // [rsp+20h] [rbp-50h]\n  int v782; // [rsp+20h] [rbp-50h]\n  int v783; // [rsp+20h] [rbp-50h]\n  int v784; // [rsp+20h] [rbp-50h]\n  int v785; // [rsp+20h] [rbp-50h]\n  int v786; // [rsp+20h] [rbp-50h]\n  int v787; // [rsp+20h] [rbp-50h]\n  int v788; // [rsp+20h] [rbp-50h]\n  int v789; // [rsp+20h] [rbp-50h]\n  int v790; // [rsp+20h] [rbp-50h]\n  int v791; // [rsp+20h] [rbp-50h]\n  int v792; // [rsp+20h] [rbp-50h]\n  int v793; // [rsp+20h] [rbp-50h]\n  int v794; // [rsp+20h] [rbp-50h]\n  int v795; // [rsp+20h] [rbp-50h]\n  int v796; // [rsp+20h] [rbp-50h]\n  int v797; // [rsp+20h] [rbp-50h]\n  int v798; // [rsp+20h] [rbp-50h]\n  int v799; // [rsp+20h] [rbp-50h]\n  int v800; // [rsp+20h] [rbp-50h]\n  unsigned int v801; // [rsp+24h] [rbp-4Ch]\n  unsigned int v802; // [rsp+24h] [rbp-4Ch]\n  unsigned int v803; // [rsp+24h] [rbp-4Ch]\n  unsigned int v804; // [rsp+24h] [rbp-4Ch]\n  unsigned int v805; // [rsp+24h] [rbp-4Ch]\n  unsigned int v806; // [rsp+24h] [rbp-4Ch]\n  unsigned int v807; // [rsp+24h] [rbp-4Ch]\n  unsigned int v808; // [rsp+24h] [rbp-4Ch]\n  int v809; // [rsp+24h] [rbp-4Ch]\n  unsigned int v810; // [rsp+24h] [rbp-4Ch]\n  unsigned int v811; // [rsp+24h] [rbp-4Ch]\n  unsigned int v812; // [rsp+24h] [rbp-4Ch]\n  unsigned int v813; // [rsp+24h] [rbp-4Ch]\n  unsigned int v814; // [rsp+24h] [rbp-4Ch]\n  unsigned int v815; // [rsp+24h] [rbp-4Ch]\n  unsigned int v816; // [rsp+24h] [rbp-4Ch]\n  unsigned int v817; // [rsp+24h] [rbp-4Ch]\n  unsigned int v818; // [rsp+24h] [rbp-4Ch]\n  unsigned int v819; // [rsp+24h] [rbp-4Ch]\n  unsigned int v820; // [rsp+24h] [rbp-4Ch]\n  unsigned int v821; // [rsp+24h] [rbp-4Ch]\n  unsigned int v822; // [rsp+24h] [rbp-4Ch]\n  unsigned int v823; // [rsp+24h] [rbp-4Ch]\n  unsigned int v824; // [rsp+24h] [rbp-4Ch]\n  unsigned int v825; // [rsp+28h] [rbp-48h]\n  unsigned int v826; // [rsp+28h] [rbp-48h]\n  unsigned int v827; // [rsp+28h] [rbp-48h]\n  unsigned int v828; // [rsp+28h] [rbp-48h]\n  unsigned int v829; // [rsp+28h] [rbp-48h]\n  unsigned int v830; // [rsp+28h] [rbp-48h]\n  unsigned int v831; // [rsp+28h] [rbp-48h]\n  unsigned int v832; // [rsp+28h] [rbp-48h]\n  unsigned int v833; // [rsp+28h] [rbp-48h]\n  unsigned int v834; // [rsp+28h] [rbp-48h]\n  unsigned int v835; // [rsp+28h] [rbp-48h]\n  unsigned int v836; // [rsp+28h] [rbp-48h]\n  unsigned int v837; // [rsp+28h] [rbp-48h]\n  unsigned int v838; // [rsp+28h] [rbp-48h]\n  unsigned int v839; // [rsp+28h] [rbp-48h]\n  unsigned int v840; // [rsp+28h] [rbp-48h]\n  unsigned int v841; // [rsp+28h] [rbp-48h]\n  unsigned int v842; // [rsp+28h] [rbp-48h]\n  unsigned int v843; // [rsp+28h] [rbp-48h]\n  unsigned int v844; // [rsp+28h] [rbp-48h]\n  unsigned int v845; // [rsp+28h] [rbp-48h]\n  unsigned int v846; // [rsp+28h] [rbp-48h]\n  unsigned int v847; // [rsp+28h] [rbp-48h]\n  unsigned int v848; // [rsp+28h] [rbp-48h]\n  int v849; // [rsp+2Ch] [rbp-44h]\n  unsigned int v850; // [rsp+2Ch] [rbp-44h]\n  unsigned int v851; // [rsp+2Ch] [rbp-44h]\n  unsigned int v852; // [rsp+2Ch] [rbp-44h]\n  unsigned int v853; // [rsp+2Ch] [rbp-44h]\n  unsigned int v854; // [rsp+2Ch] [rbp-44h]\n  unsigned int v855; // [rsp+2Ch] [rbp-44h]\n  unsigned int v856; // [rsp+2Ch] [rbp-44h]\n  unsigned int v857; // [rsp+2Ch] [rbp-44h]\n  unsigned int v858; // [rsp+2Ch] [rbp-44h]\n  unsigned int v859; // [rsp+2Ch] [rbp-44h]\n  unsigned int v860; // [rsp+2Ch] [rbp-44h]\n  unsigned int v861; // [rsp+2Ch] [rbp-44h]\n  unsigned int v862; // [rsp+2Ch] [rbp-44h]\n  unsigned int v863; // [rsp+2Ch] [rbp-44h]\n  unsigned int v864; // [rsp+2Ch] [rbp-44h]\n  unsigned int v865; // [rsp+2Ch] [rbp-44h]\n  unsigned int v866; // [rsp+2Ch] [rbp-44h]\n  unsigned int v867; // [rsp+2Ch] [rbp-44h]\n  unsigned int v868; // [rsp+2Ch] [rbp-44h]\n  unsigned int v869; // [rsp+2Ch] [rbp-44h]\n  unsigned int v870; // [rsp+2Ch] [rbp-44h]\n  unsigned int v871; // [rsp+2Ch] [rbp-44h]\n  unsigned int v872; // [rsp+2Ch] [rbp-44h]\n  signed __int64 v873; // [rsp+30h] [rbp-40h]\n  __int64 v874; // [rsp+38h] [rbp-38h]\n\n  v748 = a1;\n  v749 = a2;\n  if ( a3 > 0 )\n  {\n    v874 = a1 - 280;\n    v873 = a2 + 8LL * ((unsigned int)(a3 - 1) >> 3) + 8;\n    do\n    {\n      v3 = 234941184;\n      v4 = 2063609344;\n      v5 = -2097117952;\n      v6 = _byteswap_ulong(*(_DWORD *)v749);\n      v7 = _byteswap_ulong(*(_DWORD *)(v749 + 4));\n      v8 = v7;\n      v9 = (v7 ^ (v6 >> 4)) & 0xF0F0F0F;\n      v10 = v9;\n      v11 = v8 ^ v9;\n      v12 = 16 * v10 ^ v6;\n      v13 = (unsigned __int16)(v11 ^ HIWORD(v12));\n      v14 = v13 ^ v11;\n      v15 = v12 ^ (v13 << 16);\n      v16 = (v15 ^ (v14 >> 2)) & 0x33333333;\n      v17 = v16 ^ v15;\n      v18 = v14 ^ 4 * v16;\n      v19 = (v17 ^ ((v14 ^ 4 * v16) >> 8)) & 0xFF00FF;\n      v20 = v19 ^ v17;\n      v21 = v18 ^ (v19 << 8);\n      v22 = (v21 ^ (v20 >> 1)) & 0x55555555;\n      v23 = *(_DWORD *)(v748 - 20) ^ __ROR4__(v22 ^ v21, 1);\n      v750 = v23;\n      v849 = *(_DWORD *)(v748 - 24) ^ __ROR4__(2 * v22 ^ v20, 1);\n      v24 = v23 ^ *(_DWORD *)(v748 - 408);\n      v25 = *(_DWORD *)(v748 - 344) ^ __ROL4__(v23, 4);\n      v26 = 0;\n      v27 = 0;\n      v28 = 0;\n      v29 = v25;\n      v30 = (v25 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v31 = v29 & 0xFC00FC;\n      v32 = -167733504;\n      v777 = v30;\n      v31 |= 0xFF00FF00;\n      v33 = v31;\n      v34 = v24 & 0xFC00FC | 0xFF00FF00;\n      v35 = v30 - v31;\n      v763 = v31;\n      v801 = v24 & 0xFC00FC | 0xFF00FF00;\n      v825 = (v24 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v36 = v31;\n      v37 = (signed int *)&unk_4DDE0;\n      v38 = 0;\n      v39 = v825 - v33;\n      v40 = v34 - v33;\n      v734 = v35;\n      while ( 1 )\n      {\n        v37 += 4;\n        v41 = v4 & (v40 + v36);\n        v42 = v3 & (v39 + v36);\n        v43 = v36 + v734;\n        v28 ^= v36 & v5;\n        v36 += 524296;\n        v38 ^= v41;\n        v26 ^= v42;\n        v27 ^= v32 & v43;\n        if ( v37 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v5 = *v37;\n        v32 = v37[1];\n        v4 = v37[2];\n        v3 = v37[3];\n      }\n      v44 = v748;\n      v45 = ((16 * v38 & 15360 * ((v801 + 16777472) & 0x40004) ^ v38) >> 8) & 0xF000F0 | (16 * v26 & 15360 * ((v825 + 16777472) & 0x40004) ^ v26) & 0xF000F000 | ((16 * v27 & 15360 * ((v777 + 16777472) & 0x40004) ^ v27) >> 4) & 0xF000F00 | ((16 * v28 & 15360 * ((v763 + 16777472) & 0x40004) ^ v28) >> 12) & 0xF000F;\n      v46 = 16 * ((v45 ^ (v45 >> 4)) & 0x7030702) ^ (v45 ^ (v45 >> 4)) & 0x7030702 ^ v45;\n      v47 = (((v46 ^ (v46 >> 8)) & 0x4E009E) << 8) ^ (v46 ^ (v46 >> 8)) & 0x4E009E ^ v46;\n      v48 = ((unsigned __int16)((v47 ^ HIWORD(v47)) & 0xD9D3) << 16) ^ ((unsigned __int16)v47 ^ HIWORD(v47)) & 0xD9D3 ^ v47;\n      v49 = 16 * ((v48 ^ (v48 >> 4)) & 0x5040004) ^ (v48 ^ (v48 >> 4)) & 0x5040004 ^ v48;\n      v50 = 2 * ((v49 ^ (v49 >> 1)) & 0x4045015) ^ (v49 ^ (v49 >> 1)) & 0x4045015 ^ v49 ^ v849;\n      v51 = 0;\n      v52 = (unsigned __int64)sub_22510(v50, *(_DWORD *)(v748 - 404), *(_DWORD *)(v748 - 340)) ^ v750;\n      v53 = (unsigned __int64)sub_22510(v52, *(_DWORD *)(v44 - 400), *(_DWORD *)(v44 - 336)) ^ v50;\n      v54 = (unsigned __int64)sub_22510(v53, *(_DWORD *)(v44 - 396), *(_DWORD *)(v44 - 332)) ^ v52;\n      v55 = (unsigned __int64)sub_22510(v54, *(_DWORD *)(v44 - 392), *(_DWORD *)(v44 - 328)) ^ v53;\n      v56 = (unsigned __int64)sub_22510(v55, *(_DWORD *)(v44 - 388), *(_DWORD *)(v44 - 324)) ^ v54;\n      v57 = (unsigned __int64)sub_22510(v56, *(_DWORD *)(v44 - 384), *(_DWORD *)(v44 - 320)) ^ v55;\n      v58 = (unsigned __int64)sub_22510(v57, *(_DWORD *)(v44 - 380), *(_DWORD *)(v44 - 316)) ^ v56;\n      v59 = 0;\n      v751 = v58;\n      v60 = (unsigned __int64)sub_22510(v58, *(_DWORD *)(v44 - 376), *(_DWORD *)(v44 - 312)) ^ v57;\n      v61 = 234941184;\n      v62 = 2063609344;\n      v764 = v60;\n      v63 = -2097117952;\n      v64 = v60 ^ *(_DWORD *)(v748 - 372);\n      v65 = *(_DWORD *)(v748 - 308) ^ __ROL4__(v60, 4);\n      v66 = v65;\n      v67 = (v65 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v68 = v66 & 0xFC00FC;\n      v69 = -167733504;\n      v70 = v67;\n      v802 = v67;\n      v68 |= 0xFF00FF00;\n      v71 = v68;\n      v72 = v64 & 0xFC00FC | 0xFF00FF00;\n      LODWORD(v44) = v72;\n      v778 = v68;\n      v73 = (v64 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v74 = v68;\n      v75 = 0;\n      v76 = 0;\n      v826 = v72;\n      v850 = v73;\n      v77 = (signed int *)&unk_4DDE0;\n      v78 = v73 - v71;\n      v79 = v44 - v71;\n      v735 = v70 - v71;\n      while ( 1 )\n      {\n        v77 += 4;\n        v80 = v62 & (v79 + v74);\n        v81 = v61 & (v78 + v74);\n        v82 = v74 + v735;\n        v76 ^= v74 & v63;\n        v74 += 524296;\n        v75 ^= v80;\n        v51 ^= v81;\n        v59 ^= v69 & v82;\n        if ( v77 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v63 = *v77;\n        v69 = v77[1];\n        v62 = v77[2];\n        v61 = v77[3];\n      }\n      v83 = 234941184;\n      v84 = -2097117952;\n      v85 = 2063609344;\n      v86 = ((16 * v75 & 15360 * ((v826 + 16777472) & 0x40004) ^ v75) >> 8) & 0xF000F0 | (16 * v51 & 15360 * ((v850 + 16777472) & 0x40004) ^ v51) & 0xF000F000 | ((16 * v59 & 15360 * ((v802 + 16777472) & 0x40004) ^ v59) >> 4) & 0xF000F00 | ((16 * v76 & 15360 * ((v778 + 16777472) & 0x40004) ^ v76) >> 12) & 0xF000F;\n      v87 = 16 * ((v86 ^ (v86 >> 4)) & 0x7030702) ^ (v86 ^ (v86 >> 4)) & 0x7030702 ^ v86;\n      v88 = (((v87 ^ (v87 >> 8)) & 0x4E009E) << 8) ^ (v87 ^ (v87 >> 8)) & 0x4E009E ^ v87;\n      v89 = ((unsigned __int16)((v88 ^ HIWORD(v88)) & 0xD9D3) << 16) ^ ((unsigned __int16)v88 ^ HIWORD(v88)) & 0xD9D3 ^ v88;\n      v90 = 16 * ((v89 ^ (v89 >> 4)) & 0x5040004) ^ (v89 ^ (v89 >> 4)) & 0x5040004 ^ v89;\n      v91 = 2 * ((v90 ^ (v90 >> 1)) & 0x4045015) ^ (v90 ^ (v90 >> 1)) & 0x4045015 ^ v751 ^ v90;\n      v92 = 0;\n      v752 = v91;\n      v93 = 0;\n      v94 = 0;\n      v95 = v91 ^ *(_DWORD *)(v748 - 368);\n      v96 = *(_DWORD *)(v748 - 304) ^ __ROL4__(v91, 4);\n      v97 = v96;\n      v98 = (v96 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v99 = v97 & 0xFC00FC;\n      v100 = -167733504;\n      v803 = v98;\n      v99 |= 0xFF00FF00;\n      v101 = v99;\n      v102 = v95 & 0xFC00FC | 0xFF00FF00;\n      v103 = v98 - v99;\n      v779 = v99;\n      v827 = v95 & 0xFC00FC | 0xFF00FF00;\n      v851 = (v95 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v104 = v99;\n      v105 = (signed int *)&unk_4DDE0;\n      v106 = 0;\n      v107 = v851 - v101;\n      v108 = v102 - v101;\n      v736 = v103;\n      while ( 1 )\n      {\n        v105 += 4;\n        v109 = v85 & (v108 + v104);\n        v110 = v83 & (v107 + v104);\n        v111 = v104 + v736;\n        v94 ^= v104 & v84;\n        v104 += 524296;\n        v106 ^= v109;\n        v92 ^= v110;\n        v93 ^= v100 & v111;\n        if ( v105 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v84 = *v105;\n        v100 = v105[1];\n        v85 = v105[2];\n        v83 = v105[3];\n      }\n      v112 = 234941184;\n      v113 = -2097117952;\n      v114 = 2063609344;\n      v115 = ((16 * v106 & 15360 * ((v827 + 16777472) & 0x40004) ^ v106) >> 8) & 0xF000F0 | (16 * v92 & 15360 * ((v851 + 16777472) & 0x40004) ^ v92) & 0xF000F000 | ((16 * v93 & 15360 * ((v803 + 16777472) & 0x40004) ^ v93) >> 4) & 0xF000F00 | ((16 * v94 & 15360 * ((v779 + 16777472) & 0x40004) ^ v94) >> 12) & 0xF000F;\n      v116 = 16 * ((v115 ^ (v115 >> 4)) & 0x7030702) ^ (v115 ^ (v115 >> 4)) & 0x7030702 ^ v115;\n      v117 = (((v116 ^ (v116 >> 8)) & 0x4E009E) << 8) ^ (v116 ^ (v116 >> 8)) & 0x4E009E ^ v116;\n      v118 = ((unsigned __int16)((v117 ^ HIWORD(v117)) & 0xD9D3) << 16) ^ ((unsigned __int16)v117 ^ HIWORD(v117)) & 0xD9D3 ^ v117;\n      v119 = 16 * ((v118 ^ (v118 >> 4)) & 0x5040004) ^ (v118 ^ (v118 >> 4)) & 0x5040004 ^ v118;\n      v120 = 2 * ((v119 ^ (v119 >> 1)) & 0x4045015) ^ (v119 ^ (v119 >> 1)) & 0x4045015 ^ v764 ^ v119;\n      v121 = 0;\n      v765 = v120;\n      v122 = 0;\n      v123 = 0;\n      v124 = v120 ^ *(_DWORD *)(v748 - 364);\n      v125 = *(_DWORD *)(v748 - 300) ^ __ROL4__(v120, 4);\n      v126 = v125;\n      v127 = (v125 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v128 = v126 & 0xFC00FC;\n      v129 = -167733504;\n      v804 = v127;\n      v128 |= 0xFF00FF00;\n      v130 = v128;\n      v131 = v124 & 0xFC00FC | 0xFF00FF00;\n      v132 = v127 - v128;\n      v780 = v128;\n      v828 = v124 & 0xFC00FC | 0xFF00FF00;\n      v852 = (v124 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v133 = v128;\n      v134 = (signed int *)&unk_4DDE0;\n      v135 = 0;\n      v136 = v852 - v130;\n      v137 = v131 - v130;\n      v737 = v132;\n      while ( 1 )\n      {\n        v134 += 4;\n        v138 = v114 & (v137 + v133);\n        v139 = v112 & (v136 + v133);\n        v140 = v133 + v737;\n        v123 ^= v133 & v113;\n        v133 += 524296;\n        v135 ^= v138;\n        v121 ^= v139;\n        v122 ^= v129 & v140;\n        if ( v134 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v113 = *v134;\n        v129 = v134[1];\n        v114 = v134[2];\n        v112 = v134[3];\n      }\n      v141 = 234941184;\n      v142 = -2097117952;\n      v143 = 2063609344;\n      v144 = ((16 * v135 & 15360 * ((v828 + 16777472) & 0x40004) ^ v135) >> 8) & 0xF000F0 | (16 * v121 & 15360 * ((v852 + 16777472) & 0x40004) ^ v121) & 0xF000F000 | ((16 * v122 & 15360 * ((v804 + 16777472) & 0x40004) ^ v122) >> 4) & 0xF000F00 | ((16 * v123 & 15360 * ((v780 + 16777472) & 0x40004) ^ v123) >> 12) & 0xF000F;\n      v145 = 16 * ((v144 ^ (v144 >> 4)) & 0x7030702) ^ (v144 ^ (v144 >> 4)) & 0x7030702 ^ v144;\n      v146 = (((v145 ^ (v145 >> 8)) & 0x4E009E) << 8) ^ (v145 ^ (v145 >> 8)) & 0x4E009E ^ v145;\n      v147 = ((unsigned __int16)((v146 ^ HIWORD(v146)) & 0xD9D3) << 16) ^ ((unsigned __int16)v146 ^ HIWORD(v146)) & 0xD9D3 ^ v146;\n      v148 = 16 * ((v147 ^ (v147 >> 4)) & 0x5040004) ^ (v147 ^ (v147 >> 4)) & 0x5040004 ^ v147;\n      v149 = 2 * ((v148 ^ (v148 >> 1)) & 0x4045015) ^ (v148 ^ (v148 >> 1)) & 0x4045015 ^ v752 ^ v148;\n      v150 = 0;\n      v753 = v149;\n      v151 = 0;\n      v152 = 0;\n      v153 = v149 ^ *(_DWORD *)(v748 - 360);\n      v154 = *(_DWORD *)(v748 - 296) ^ __ROL4__(v149, 4);\n      v155 = v154;\n      v156 = (v154 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v157 = v155 & 0xFC00FC;\n      v158 = -167733504;\n      v805 = v156;\n      v157 |= 0xFF00FF00;\n      v159 = v157;\n      v160 = v153 & 0xFC00FC | 0xFF00FF00;\n      v161 = v156 - v157;\n      v781 = v157;\n      v829 = v153 & 0xFC00FC | 0xFF00FF00;\n      v853 = (v153 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v162 = v157;\n      v163 = (signed int *)&unk_4DDE0;\n      v164 = 0;\n      v165 = v853 - v159;\n      v166 = v160 - v159;\n      while ( 1 )\n      {\n        v163 += 4;\n        v167 = v141 & (v165 + v162);\n        v152 ^= v162 & v142;\n        v168 = v162 + v161;\n        v164 ^= v143 & (v166 + v162);\n        v162 += 524296;\n        v150 ^= v167;\n        v151 ^= v158 & v168;\n        if ( v163 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v142 = *v163;\n        v158 = v163[1];\n        v143 = v163[2];\n        v141 = v163[3];\n      }\n      v169 = 234941184;\n      v170 = -2097117952;\n      v171 = 2063609344;\n      v172 = ((16 * v164 & 15360 * ((v829 + 16777472) & 0x40004) ^ v164) >> 8) & 0xF000F0 | (16 * v150 & 15360 * ((v853 + 16777472) & 0x40004) ^ v150) & 0xF000F000 | ((16 * v151 & 15360 * ((v805 + 16777472) & 0x40004) ^ v151) >> 4) & 0xF000F00 | ((16 * v152 & 15360 * ((v781 + 16777472) & 0x40004) ^ v152) >> 12) & 0xF000F;\n      v173 = 16 * ((v172 ^ (v172 >> 4)) & 0x7030702) ^ (v172 ^ (v172 >> 4)) & 0x7030702 ^ v172;\n      v174 = (((v173 ^ (v173 >> 8)) & 0x4E009E) << 8) ^ (v173 ^ (v173 >> 8)) & 0x4E009E ^ v173;\n      v175 = ((unsigned __int16)((v174 ^ HIWORD(v174)) & 0xD9D3) << 16) ^ ((unsigned __int16)v174 ^ HIWORD(v174)) & 0xD9D3 ^ v174;\n      v176 = 16 * ((v175 ^ (v175 >> 4)) & 0x5040004) ^ (v175 ^ (v175 >> 4)) & 0x5040004 ^ v175;\n      v177 = 2 * ((v176 ^ (v176 >> 1)) & 0x4045015) ^ (v176 ^ (v176 >> 1)) & 0x4045015 ^ v765 ^ v176;\n      v178 = 0;\n      v766 = v177;\n      v179 = 0;\n      v180 = 0;\n      v181 = v177 ^ *(_DWORD *)(v748 - 356);\n      v182 = *(_DWORD *)(v748 - 292) ^ __ROL4__(v177, 4);\n      v183 = v182;\n      v184 = (v182 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v185 = v183 & 0xFC00FC;\n      v186 = -167733504;\n      v806 = v184;\n      v185 |= 0xFF00FF00;\n      v187 = v185;\n      v188 = v181 & 0xFC00FC | 0xFF00FF00;\n      v189 = v184 - v185;\n      v782 = v185;\n      v830 = v181 & 0xFC00FC | 0xFF00FF00;\n      v854 = (v181 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v190 = v185;\n      v191 = (signed int *)&unk_4DDE0;\n      v192 = 0;\n      v193 = v854 - v187;\n      v194 = v188 - v187;\n      v738 = v189;\n      while ( 1 )\n      {\n        v191 += 4;\n        v195 = v171 & (v194 + v190);\n        v196 = v169 & (v193 + v190);\n        v197 = v190 + v738;\n        v180 ^= v190 & v170;\n        v190 += 524296;\n        v192 ^= v195;\n        v178 ^= v196;\n        v179 ^= v186 & v197;\n        if ( v191 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v170 = *v191;\n        v186 = v191[1];\n        v171 = v191[2];\n        v169 = v191[3];\n      }\n      v198 = 234941184;\n      v199 = -2097117952;\n      v200 = 2063609344;\n      v201 = ((16 * v192 & 15360 * ((v830 + 16777472) & 0x40004) ^ v192) >> 8) & 0xF000F0 | (16 * v178 & 15360 * ((v854 + 16777472) & 0x40004) ^ v178) & 0xF000F000 | ((16 * v179 & 15360 * ((v806 + 16777472) & 0x40004) ^ v179) >> 4) & 0xF000F00 | ((16 * v180 & 15360 * ((v782 + 16777472) & 0x40004) ^ v180) >> 12) & 0xF000F;\n      v202 = 16 * ((v201 ^ (v201 >> 4)) & 0x7030702) ^ (v201 ^ (v201 >> 4)) & 0x7030702 ^ v201;\n      v203 = (((v202 ^ (v202 >> 8)) & 0x4E009E) << 8) ^ (v202 ^ (v202 >> 8)) & 0x4E009E ^ v202;\n      v204 = ((unsigned __int16)((v203 ^ HIWORD(v203)) & 0xD9D3) << 16) ^ ((unsigned __int16)v203 ^ HIWORD(v203)) & 0xD9D3 ^ v203;\n      v205 = 16 * ((v204 ^ (v204 >> 4)) & 0x5040004) ^ (v204 ^ (v204 >> 4)) & 0x5040004 ^ v204;\n      v206 = 2 * ((v205 ^ (v205 >> 1)) & 0x4045015) ^ (v205 ^ (v205 >> 1)) & 0x4045015 ^ v753 ^ v205;\n      v207 = 0;\n      v754 = v206;\n      v208 = 0;\n      v209 = 0;\n      v210 = v206 ^ *(_DWORD *)(v748 - 352);\n      v211 = *(_DWORD *)(v748 - 288) ^ __ROL4__(v206, 4);\n      v212 = v211;\n      v213 = (v211 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v214 = v212 & 0xFC00FC;\n      v215 = -167733504;\n      v807 = v213;\n      v214 |= 0xFF00FF00;\n      v216 = v214;\n      v217 = v210 & 0xFC00FC | 0xFF00FF00;\n      v218 = v213 - v214;\n      v783 = v214;\n      v831 = v210 & 0xFC00FC | 0xFF00FF00;\n      v855 = (v210 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v219 = v214;\n      v220 = (signed int *)&unk_4DDE0;\n      v221 = 0;\n      v222 = v855 - v216;\n      v223 = v217 - v216;\n      while ( 1 )\n      {\n        v220 += 4;\n        v224 = v198 & (v222 + v219);\n        v209 ^= v219 & v199;\n        v225 = v219 + v218;\n        v221 ^= v200 & (v223 + v219);\n        v219 += 524296;\n        v207 ^= v224;\n        v208 ^= v215 & v225;\n        if ( v220 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v199 = *v220;\n        v215 = v220[1];\n        v200 = v220[2];\n        v198 = v220[3];\n      }\n      v226 = 234941184;\n      v227 = -2097117952;\n      v228 = 2063609344;\n      v229 = ((16 * v221 & 15360 * ((v831 + 16777472) & 0x40004) ^ v221) >> 8) & 0xF000F0 | (16 * v207 & 15360 * ((v855 + 16777472) & 0x40004) ^ v207) & 0xF000F000 | ((16 * v208 & 15360 * ((v807 + 16777472) & 0x40004) ^ v208) >> 4) & 0xF000F00 | ((16 * v209 & 15360 * ((v783 + 16777472) & 0x40004) ^ v209) >> 12) & 0xF000F;\n      v230 = 16 * ((v229 ^ (v229 >> 4)) & 0x7030702) ^ (v229 ^ (v229 >> 4)) & 0x7030702 ^ v229;\n      v231 = (((v230 ^ (v230 >> 8)) & 0x4E009E) << 8) ^ (v230 ^ (v230 >> 8)) & 0x4E009E ^ v230;\n      v232 = ((unsigned __int16)((v231 ^ HIWORD(v231)) & 0xD9D3) << 16) ^ ((unsigned __int16)v231 ^ HIWORD(v231)) & 0xD9D3 ^ v231;\n      v233 = 16 * ((v232 ^ (v232 >> 4)) & 0x5040004) ^ (v232 ^ (v232 >> 4)) & 0x5040004 ^ v232;\n      v234 = 2 * ((v233 ^ (v233 >> 1)) & 0x4045015) ^ (v233 ^ (v233 >> 1)) & 0x4045015 ^ v766 ^ v233;\n      v235 = 0;\n      v767 = v234;\n      v236 = 0;\n      v237 = 0;\n      v238 = v234 ^ *(_DWORD *)(v748 - 348);\n      v239 = *(_DWORD *)(v748 - 284) ^ __ROL4__(v234, 4);\n      v240 = v239;\n      v241 = (v239 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v242 = v240 & 0xFC00FC;\n      v243 = -167733504;\n      v808 = v241;\n      v242 |= 0xFF00FF00;\n      v244 = v242;\n      v245 = v238 & 0xFC00FC | 0xFF00FF00;\n      v246 = v241 - v242;\n      v784 = v242;\n      v832 = v238 & 0xFC00FC | 0xFF00FF00;\n      v856 = (v238 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v247 = v242;\n      v248 = (signed int *)&unk_4DDE0;\n      v249 = 0;\n      v250 = v856 - v244;\n      v251 = v245 - v244;\n      v739 = v246;\n      while ( 1 )\n      {\n        v248 += 4;\n        v252 = v228 & (v251 + v247);\n        v253 = v226 & (v250 + v247);\n        v254 = v247 + v739;\n        v237 ^= v247 & v227;\n        v247 += 524296;\n        v249 ^= v252;\n        v235 ^= v253;\n        v236 ^= v243 & v254;\n        if ( v248 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v227 = *v248;\n        v243 = v248[1];\n        v228 = v248[2];\n        v226 = v248[3];\n      }\n      *(_DWORD *)(v748 - 20) = v767;\n      v255 = ((16 * v249 & 15360 * ((v832 + 16777472) & 0x40004) ^ v249) >> 8) & 0xF000F0 | (16 * v235 & 15360 * ((v856 + 16777472) & 0x40004) ^ v235) & 0xF000F000 | ((16 * v236 & 15360 * ((v808 + 16777472) & 0x40004) ^ v236) >> 4) & 0xF000F00 | ((16 * v237 & 15360 * ((v784 + 16777472) & 0x40004) ^ v237) >> 12) & 0xF000F;\n      v256 = 16 * ((v255 ^ (v255 >> 4)) & 0x7030702) ^ (v255 ^ (v255 >> 4)) & 0x7030702 ^ v255;\n      v257 = (((v256 ^ (v256 >> 8)) & 0x4E009E) << 8) ^ (v256 ^ (v256 >> 8)) & 0x4E009E ^ v256;\n      v258 = ((unsigned __int16)((v257 ^ HIWORD(v257)) & 0xD9D3) << 16) ^ ((unsigned __int16)v257 ^ HIWORD(v257)) & 0xD9D3 ^ v257;\n      v259 = 16 * ((v258 ^ (v258 >> 4)) & 0x5040004) ^ (v258 ^ (v258 >> 4)) & 0x5040004 ^ v258;\n      v260 = 2 * ((v259 ^ (v259 >> 1)) & 0x4045015) ^ (v259 ^ (v259 >> 1)) & 0x4045015 ^ v259 ^ v754;\n      *(_DWORD *)(v748 - 24) = v260;\n      v261 = 0;\n      v262 = 0;\n      v263 = 0;\n      v264 = sub_228E0(((unsigned __int64)v767 << 32) | v260, v874, 15LL, -1LL);\n      v265 = *(_DWORD *)(v748 - 8) ^ *(_DWORD *)(v748 - 16);\n      v266 = *(_DWORD *)(v748 - 12);\n      *(_DWORD *)(v748 - 16) = v260;\n      *(_DWORD *)(v748 - 12) = v767;\n      v267 = 234941184;\n      v268 = 2063609344;\n      v269 = -2097117952;\n      v768 = v264 ^ v265;\n      LODWORD(v264) = HIDWORD(v264) ^ v266 ^ *(_DWORD *)(v748 - 4);\n      v755 = v264;\n      v270 = v264 ^ *(_DWORD *)(v748 - 152);\n      LODWORD(v264) = *(_DWORD *)(v748 - 88) ^ __ROL4__(v264, 4);\n      v271 = v264;\n      LODWORD(v264) = ((unsigned int)v264 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v272 = v271 & 0xFC00FC;\n      v273 = -167733504;\n      v809 = v264;\n      v272 |= 0xFF00FF00;\n      v274 = v272;\n      v275 = v270 & 0xFC00FC | 0xFF00FF00;\n      v276 = v264 - v272;\n      v785 = v272;\n      v833 = v270 & 0xFC00FC | 0xFF00FF00;\n      v857 = (v270 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v277 = v272;\n      v278 = (signed int *)&unk_4DDE0;\n      v279 = 0;\n      v280 = v857 - v274;\n      v281 = v275 - v274;\n      while ( 1 )\n      {\n        v278 += 4;\n        v282 = v267 & (v280 + v277);\n        v263 ^= v277 & v269;\n        v283 = v277 + v276;\n        v279 ^= v268 & (v281 + v277);\n        v277 += 524296;\n        v261 ^= v282;\n        v262 ^= v273 & v283;\n        if ( v278 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v269 = *v278;\n        v273 = v278[1];\n        v268 = v278[2];\n        v267 = v278[3];\n      }\n      v284 = 234941184;\n      v285 = -2097117952;\n      v286 = 2063609344;\n      v287 = ((16 * v279 & 15360 * ((v833 + 16777472) & 0x40004) ^ v279) >> 8) & 0xF000F0 | (16 * v261 & 15360 * ((v857 + 16777472) & 0x40004) ^ v261) & 0xF000F000 | ((16 * v262 & 15360 * ((v809 + 16777472) & 0x40004) ^ v262) >> 4) & 0xF000F00 | ((16 * v263 & 15360 * ((v785 + 16777472) & 0x40004) ^ v263) >> 12) & 0xF000F;\n      v288 = 16 * ((v287 ^ (v287 >> 4)) & 0x7030702) ^ (v287 ^ (v287 >> 4)) & 0x7030702 ^ v287;\n      v289 = (((v288 ^ (v288 >> 8)) & 0x4E009E) << 8) ^ (v288 ^ (v288 >> 8)) & 0x4E009E ^ v288;\n      v290 = ((unsigned __int16)((v289 ^ HIWORD(v289)) & 0xD9D3) << 16) ^ ((unsigned __int16)v289 ^ HIWORD(v289)) & 0xD9D3 ^ v289;\n      v291 = 16 * ((v290 ^ (v290 >> 4)) & 0x5040004) ^ (v290 ^ (v290 >> 4)) & 0x5040004 ^ v290;\n      v292 = 2 * ((v291 ^ (v291 >> 1)) & 0x4045015) ^ (v291 ^ (v291 >> 1)) & 0x4045015 ^ v768 ^ v291;\n      v293 = 0;\n      v769 = v292;\n      v294 = 0;\n      v295 = 0;\n      v296 = v292 ^ *(_DWORD *)(v748 - 148);\n      v297 = *(_DWORD *)(v748 - 84) ^ __ROL4__(v292, 4);\n      v298 = v297;\n      v299 = (v297 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v300 = v298 & 0xFC00FC;\n      v301 = -167733504;\n      v810 = v299;\n      v300 |= 0xFF00FF00;\n      v302 = v300;\n      v303 = v296 & 0xFC00FC | 0xFF00FF00;\n      v304 = v299 - v300;\n      v786 = v300;\n      v834 = v296 & 0xFC00FC | 0xFF00FF00;\n      v858 = (v296 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v305 = v300;\n      v306 = (signed int *)&unk_4DDE0;\n      v307 = 0;\n      v308 = v858 - v302;\n      v309 = v303 - v302;\n      v740 = v304;\n      while ( 1 )\n      {\n        v306 += 4;\n        v310 = v286 & (v309 + v305);\n        v311 = v284 & (v308 + v305);\n        v312 = v305 + v740;\n        v295 ^= v305 & v285;\n        v305 += 524296;\n        v307 ^= v310;\n        v293 ^= v311;\n        v294 ^= v301 & v312;\n        if ( v306 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v285 = *v306;\n        v301 = v306[1];\n        v286 = v306[2];\n        v284 = v306[3];\n      }\n      v313 = 234941184;\n      v314 = -2097117952;\n      v315 = 2063609344;\n      v316 = ((16 * v307 & 15360 * ((v834 + 16777472) & 0x40004) ^ v307) >> 8) & 0xF000F0 | (16 * v293 & 15360 * ((v858 + 16777472) & 0x40004) ^ v293) & 0xF000F000 | ((16 * v294 & 15360 * ((v810 + 16777472) & 0x40004) ^ v294) >> 4) & 0xF000F00 | ((16 * v295 & 15360 * ((v786 + 16777472) & 0x40004) ^ v295) >> 12) & 0xF000F;\n      v317 = 16 * ((v316 ^ (v316 >> 4)) & 0x7030702) ^ (v316 ^ (v316 >> 4)) & 0x7030702 ^ v316;\n      v318 = (((v317 ^ (v317 >> 8)) & 0x4E009E) << 8) ^ (v317 ^ (v317 >> 8)) & 0x4E009E ^ v317;\n      v319 = ((unsigned __int16)((v318 ^ HIWORD(v318)) & 0xD9D3) << 16) ^ ((unsigned __int16)v318 ^ HIWORD(v318)) & 0xD9D3 ^ v318;\n      v320 = 16 * ((v319 ^ (v319 >> 4)) & 0x5040004) ^ (v319 ^ (v319 >> 4)) & 0x5040004 ^ v319;\n      v321 = 2 * ((v320 ^ (v320 >> 1)) & 0x4045015) ^ (v320 ^ (v320 >> 1)) & 0x4045015 ^ v755 ^ v320;\n      v322 = 0;\n      v756 = v321;\n      v323 = 0;\n      v324 = 0;\n      v325 = v321 ^ *(_DWORD *)(v748 - 144);\n      v326 = *(_DWORD *)(v748 - 80) ^ __ROL4__(v321, 4);\n      v327 = v326;\n      v328 = (v326 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v329 = v327 & 0xFC00FC;\n      v330 = -167733504;\n      v811 = v328;\n      v329 |= 0xFF00FF00;\n      v331 = v329;\n      v332 = v325 & 0xFC00FC | 0xFF00FF00;\n      v333 = v328 - v329;\n      v787 = v329;\n      v835 = v325 & 0xFC00FC | 0xFF00FF00;\n      v859 = (v325 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v334 = v329;\n      v335 = (signed int *)&unk_4DDE0;\n      v336 = 0;\n      v337 = v859 - v331;\n      v338 = v332 - v331;\n      while ( 1 )\n      {\n        v335 += 4;\n        v339 = v313 & (v337 + v334);\n        v324 ^= v334 & v314;\n        v340 = v334 + v333;\n        v336 ^= v315 & (v338 + v334);\n        v334 += 524296;\n        v322 ^= v339;\n        v323 ^= v330 & v340;\n        if ( v335 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v314 = *v335;\n        v330 = v335[1];\n        v315 = v335[2];\n        v313 = v335[3];\n      }\n      v341 = 234941184;\n      v342 = -2097117952;\n      v343 = 2063609344;\n      v344 = ((16 * v336 & 15360 * ((v835 + 16777472) & 0x40004) ^ v336) >> 8) & 0xF000F0 | (16 * v322 & 15360 * ((v859 + 16777472) & 0x40004) ^ v322) & 0xF000F000 | ((16 * v323 & 15360 * ((v811 + 16777472) & 0x40004) ^ v323) >> 4) & 0xF000F00 | ((16 * v324 & 15360 * ((v787 + 16777472) & 0x40004) ^ v324) >> 12) & 0xF000F;\n      v345 = 16 * ((v344 ^ (v344 >> 4)) & 0x7030702) ^ (v344 ^ (v344 >> 4)) & 0x7030702 ^ v344;\n      v346 = (((v345 ^ (v345 >> 8)) & 0x4E009E) << 8) ^ (v345 ^ (v345 >> 8)) & 0x4E009E ^ v345;\n      v347 = ((unsigned __int16)((v346 ^ HIWORD(v346)) & 0xD9D3) << 16) ^ ((unsigned __int16)v346 ^ HIWORD(v346)) & 0xD9D3 ^ v346;\n      v348 = 16 * ((v347 ^ (v347 >> 4)) & 0x5040004) ^ (v347 ^ (v347 >> 4)) & 0x5040004 ^ v347;\n      v349 = 2 * ((v348 ^ (v348 >> 1)) & 0x4045015) ^ (v348 ^ (v348 >> 1)) & 0x4045015 ^ v769 ^ v348;\n      v350 = 0;\n      v770 = v349;\n      v351 = 0;\n      v352 = 0;\n      v353 = v349 ^ *(_DWORD *)(v748 - 140);\n      v354 = *(_DWORD *)(v748 - 76) ^ __ROL4__(v349, 4);\n      v355 = v354;\n      v356 = (v354 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v357 = v355 & 0xFC00FC;\n      v358 = -167733504;\n      v812 = v356;\n      v357 |= 0xFF00FF00;\n      v359 = v357;\n      v360 = v353 & 0xFC00FC | 0xFF00FF00;\n      v361 = v356 - v357;\n      v788 = v357;\n      v836 = v353 & 0xFC00FC | 0xFF00FF00;\n      v860 = (v353 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v362 = v357;\n      v363 = (signed int *)&unk_4DDE0;\n      v364 = 0;\n      v365 = v860 - v359;\n      v366 = v360 - v359;\n      v741 = v361;\n      while ( 1 )\n      {\n        v363 += 4;\n        v367 = v343 & (v366 + v362);\n        v368 = v341 & (v365 + v362);\n        v369 = v362 + v741;\n        v352 ^= v362 & v342;\n        v362 += 524296;\n        v364 ^= v367;\n        v350 ^= v368;\n        v351 ^= v358 & v369;\n        if ( v363 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v342 = *v363;\n        v358 = v363[1];\n        v343 = v363[2];\n        v341 = v363[3];\n      }\n      v370 = 234941184;\n      v371 = -2097117952;\n      v372 = 2063609344;\n      v373 = ((16 * v364 & 15360 * ((v836 + 16777472) & 0x40004) ^ v364) >> 8) & 0xF000F0 | (16 * v350 & 15360 * ((v860 + 16777472) & 0x40004) ^ v350) & 0xF000F000 | ((16 * v351 & 15360 * ((v812 + 16777472) & 0x40004) ^ v351) >> 4) & 0xF000F00 | ((16 * v352 & 15360 * ((v788 + 16777472) & 0x40004) ^ v352) >> 12) & 0xF000F;\n      v374 = 16 * ((v373 ^ (v373 >> 4)) & 0x7030702) ^ (v373 ^ (v373 >> 4)) & 0x7030702 ^ v373;\n      v375 = (((v374 ^ (v374 >> 8)) & 0x4E009E) << 8) ^ (v374 ^ (v374 >> 8)) & 0x4E009E ^ v374;\n      v376 = ((unsigned __int16)((v375 ^ HIWORD(v375)) & 0xD9D3) << 16) ^ ((unsigned __int16)v375 ^ HIWORD(v375)) & 0xD9D3 ^ v375;\n      v377 = 16 * ((v376 ^ (v376 >> 4)) & 0x5040004) ^ (v376 ^ (v376 >> 4)) & 0x5040004 ^ v376;\n      v378 = 2 * ((v377 ^ (v377 >> 1)) & 0x4045015) ^ (v377 ^ (v377 >> 1)) & 0x4045015 ^ v756 ^ v377;\n      v379 = 0;\n      v757 = v378;\n      v380 = 0;\n      v381 = 0;\n      v382 = v378 ^ *(_DWORD *)(v748 - 136);\n      v383 = *(_DWORD *)(v748 - 72) ^ __ROL4__(v378, 4);\n      v384 = v383;\n      v385 = (v383 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v386 = v384 & 0xFC00FC;\n      v387 = -167733504;\n      v813 = v385;\n      v386 |= 0xFF00FF00;\n      v388 = v386;\n      v389 = v382 & 0xFC00FC | 0xFF00FF00;\n      v390 = v385 - v386;\n      v789 = v386;\n      v837 = v382 & 0xFC00FC | 0xFF00FF00;\n      v861 = (v382 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v391 = v386;\n      v392 = (signed int *)&unk_4DDE0;\n      v393 = 0;\n      v394 = v861 - v388;\n      v395 = v389 - v388;\n      while ( 1 )\n      {\n        v392 += 4;\n        v396 = v370 & (v394 + v391);\n        v381 ^= v391 & v371;\n        v397 = v391 + v390;\n        v393 ^= v372 & (v395 + v391);\n        v391 += 524296;\n        v379 ^= v396;\n        v380 ^= v387 & v397;\n        if ( v392 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v371 = *v392;\n        v387 = v392[1];\n        v372 = v392[2];\n        v370 = v392[3];\n      }\n      v398 = 234941184;\n      v399 = -2097117952;\n      v400 = 2063609344;\n      v401 = ((16 * v393 & 15360 * ((v837 + 16777472) & 0x40004) ^ v393) >> 8) & 0xF000F0 | (16 * v379 & 15360 * ((v861 + 16777472) & 0x40004) ^ v379) & 0xF000F000 | ((16 * v380 & 15360 * ((v813 + 16777472) & 0x40004) ^ v380) >> 4) & 0xF000F00 | ((16 * v381 & 15360 * ((v789 + 16777472) & 0x40004) ^ v381) >> 12) & 0xF000F;\n      v402 = 16 * ((v401 ^ (v401 >> 4)) & 0x7030702) ^ (v401 ^ (v401 >> 4)) & 0x7030702 ^ v401;\n      v403 = (((v402 ^ (v402 >> 8)) & 0x4E009E) << 8) ^ (v402 ^ (v402 >> 8)) & 0x4E009E ^ v402;\n      v404 = ((unsigned __int16)((v403 ^ HIWORD(v403)) & 0xD9D3) << 16) ^ ((unsigned __int16)v403 ^ HIWORD(v403)) & 0xD9D3 ^ v403;\n      v405 = 16 * ((v404 ^ (v404 >> 4)) & 0x5040004) ^ (v404 ^ (v404 >> 4)) & 0x5040004 ^ v404;\n      v406 = 2 * ((v405 ^ (v405 >> 1)) & 0x4045015) ^ (v405 ^ (v405 >> 1)) & 0x4045015 ^ v770 ^ v405;\n      v407 = 0;\n      v771 = v406;\n      v408 = 0;\n      v409 = 0;\n      v410 = v406 ^ *(_DWORD *)(v748 - 132);\n      v411 = *(_DWORD *)(v748 - 68) ^ __ROL4__(v406, 4);\n      v412 = v411;\n      v413 = (v411 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v414 = v412 & 0xFC00FC;\n      v415 = -167733504;\n      v814 = v413;\n      v414 |= 0xFF00FF00;\n      v416 = v414;\n      v417 = v410 & 0xFC00FC | 0xFF00FF00;\n      v418 = v413 - v414;\n      v790 = v414;\n      v838 = v410 & 0xFC00FC | 0xFF00FF00;\n      v862 = (v410 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v419 = v414;\n      v420 = (signed int *)&unk_4DDE0;\n      v421 = 0;\n      v422 = v862 - v416;\n      v423 = v417 - v416;\n      v742 = v418;\n      while ( 1 )\n      {\n        v420 += 4;\n        v424 = v400 & (v423 + v419);\n        v425 = v398 & (v422 + v419);\n        v426 = v419 + v742;\n        v409 ^= v419 & v399;\n        v419 += 524296;\n        v421 ^= v424;\n        v407 ^= v425;\n        v408 ^= v415 & v426;\n        if ( v420 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v399 = *v420;\n        v415 = v420[1];\n        v400 = v420[2];\n        v398 = v420[3];\n      }\n      v427 = 234941184;\n      v428 = -2097117952;\n      v429 = 2063609344;\n      v430 = ((16 * v421 & 15360 * ((v838 + 16777472) & 0x40004) ^ v421) >> 8) & 0xF000F0 | (16 * v407 & 15360 * ((v862 + 16777472) & 0x40004) ^ v407) & 0xF000F000 | ((16 * v408 & 15360 * ((v814 + 16777472) & 0x40004) ^ v408) >> 4) & 0xF000F00 | ((16 * v409 & 15360 * ((v790 + 16777472) & 0x40004) ^ v409) >> 12) & 0xF000F;\n      v431 = 16 * ((v430 ^ (v430 >> 4)) & 0x7030702) ^ (v430 ^ (v430 >> 4)) & 0x7030702 ^ v430;\n      v432 = (((v431 ^ (v431 >> 8)) & 0x4E009E) << 8) ^ (v431 ^ (v431 >> 8)) & 0x4E009E ^ v431;\n      v433 = ((unsigned __int16)((v432 ^ HIWORD(v432)) & 0xD9D3) << 16) ^ ((unsigned __int16)v432 ^ HIWORD(v432)) & 0xD9D3 ^ v432;\n      v434 = 16 * ((v433 ^ (v433 >> 4)) & 0x5040004) ^ (v433 ^ (v433 >> 4)) & 0x5040004 ^ v433;\n      v435 = 2 * ((v434 ^ (v434 >> 1)) & 0x4045015) ^ (v434 ^ (v434 >> 1)) & 0x4045015 ^ v757 ^ v434;\n      v436 = 0;\n      v758 = v435;\n      v437 = 0;\n      v438 = 0;\n      v439 = v435 ^ *(_DWORD *)(v748 - 128);\n      v440 = *(_DWORD *)(v748 - 64) ^ __ROL4__(v435, 4);\n      v441 = v440;\n      v442 = (v440 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v443 = v441 & 0xFC00FC;\n      v444 = -167733504;\n      v815 = v442;\n      v443 |= 0xFF00FF00;\n      v445 = v443;\n      v446 = v439 & 0xFC00FC | 0xFF00FF00;\n      v447 = v442 - v443;\n      v791 = v443;\n      v839 = v439 & 0xFC00FC | 0xFF00FF00;\n      v863 = (v439 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v448 = v443;\n      v449 = (signed int *)&unk_4DDE0;\n      v450 = 0;\n      v451 = v863 - v445;\n      v452 = v446 - v445;\n      while ( 1 )\n      {\n        v449 += 4;\n        v453 = v427 & (v451 + v448);\n        v438 ^= v448 & v428;\n        v454 = v448 + v447;\n        v450 ^= v429 & (v452 + v448);\n        v448 += 524296;\n        v436 ^= v453;\n        v437 ^= v444 & v454;\n        if ( v449 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v428 = *v449;\n        v444 = v449[1];\n        v429 = v449[2];\n        v427 = v449[3];\n      }\n      v455 = 234941184;\n      v456 = -2097117952;\n      v457 = 2063609344;\n      v458 = ((16 * v450 & 15360 * ((v839 + 16777472) & 0x40004) ^ v450) >> 8) & 0xF000F0 | (16 * v436 & 15360 * ((v863 + 16777472) & 0x40004) ^ v436) & 0xF000F000 | ((16 * v437 & 15360 * ((v815 + 16777472) & 0x40004) ^ v437) >> 4) & 0xF000F00 | ((16 * v438 & 15360 * ((v791 + 16777472) & 0x40004) ^ v438) >> 12) & 0xF000F;\n      v459 = 16 * ((v458 ^ (v458 >> 4)) & 0x7030702) ^ (v458 ^ (v458 >> 4)) & 0x7030702 ^ v458;\n      v460 = (((v459 ^ (v459 >> 8)) & 0x4E009E) << 8) ^ (v459 ^ (v459 >> 8)) & 0x4E009E ^ v459;\n      v461 = ((unsigned __int16)((v460 ^ HIWORD(v460)) & 0xD9D3) << 16) ^ ((unsigned __int16)v460 ^ HIWORD(v460)) & 0xD9D3 ^ v460;\n      v462 = 16 * ((v461 ^ (v461 >> 4)) & 0x5040004) ^ (v461 ^ (v461 >> 4)) & 0x5040004 ^ v461;\n      v463 = 2 * ((v462 ^ (v462 >> 1)) & 0x4045015) ^ (v462 ^ (v462 >> 1)) & 0x4045015 ^ v771 ^ v462;\n      v464 = 0;\n      v772 = v463;\n      v465 = 0;\n      v466 = 0;\n      v467 = v463 ^ *(_DWORD *)(v748 - 124);\n      v468 = *(_DWORD *)(v748 - 60) ^ __ROL4__(v463, 4);\n      v469 = v468;\n      v470 = (v468 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v471 = v469 & 0xFC00FC;\n      v472 = -167733504;\n      v816 = v470;\n      v471 |= 0xFF00FF00;\n      v473 = v471;\n      v474 = v467 & 0xFC00FC | 0xFF00FF00;\n      v475 = v470 - v471;\n      v792 = v471;\n      v840 = v467 & 0xFC00FC | 0xFF00FF00;\n      v864 = (v467 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v476 = v471;\n      v477 = (signed int *)&unk_4DDE0;\n      v478 = 0;\n      v479 = v864 - v473;\n      v480 = v474 - v473;\n      v743 = v475;\n      while ( 1 )\n      {\n        v477 += 4;\n        v481 = v457 & (v480 + v476);\n        v482 = v455 & (v479 + v476);\n        v483 = v476 + v743;\n        v466 ^= v476 & v456;\n        v476 += 524296;\n        v478 ^= v481;\n        v464 ^= v482;\n        v465 ^= v472 & v483;\n        if ( v477 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v456 = *v477;\n        v472 = v477[1];\n        v457 = v477[2];\n        v455 = v477[3];\n      }\n      v484 = 234941184;\n      v485 = -2097117952;\n      v486 = 2063609344;\n      v487 = ((16 * v478 & 15360 * ((v840 + 16777472) & 0x40004) ^ v478) >> 8) & 0xF000F0 | (16 * v464 & 15360 * ((v864 + 16777472) & 0x40004) ^ v464) & 0xF000F000 | ((16 * v465 & 15360 * ((v816 + 16777472) & 0x40004) ^ v465) >> 4) & 0xF000F00 | ((16 * v466 & 15360 * ((v792 + 16777472) & 0x40004) ^ v466) >> 12) & 0xF000F;\n      v488 = 16 * ((v487 ^ (v487 >> 4)) & 0x7030702) ^ (v487 ^ (v487 >> 4)) & 0x7030702 ^ v487;\n      v489 = (((v488 ^ (v488 >> 8)) & 0x4E009E) << 8) ^ (v488 ^ (v488 >> 8)) & 0x4E009E ^ v488;\n      v490 = ((unsigned __int16)((v489 ^ HIWORD(v489)) & 0xD9D3) << 16) ^ ((unsigned __int16)v489 ^ HIWORD(v489)) & 0xD9D3 ^ v489;\n      v491 = 16 * ((v490 ^ (v490 >> 4)) & 0x5040004) ^ (v490 ^ (v490 >> 4)) & 0x5040004 ^ v490;\n      v492 = 2 * ((v491 ^ (v491 >> 1)) & 0x4045015) ^ (v491 ^ (v491 >> 1)) & 0x4045015 ^ v758 ^ v491;\n      v493 = 0;\n      v759 = v492;\n      v494 = 0;\n      v495 = 0;\n      v496 = v492 ^ *(_DWORD *)(v748 - 120);\n      v497 = *(_DWORD *)(v748 - 56) ^ __ROL4__(v492, 4);\n      v498 = v497;\n      v499 = (v497 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v500 = v498 & 0xFC00FC;\n      v501 = -167733504;\n      v817 = v499;\n      v500 |= 0xFF00FF00;\n      v502 = v500;\n      v503 = v496 & 0xFC00FC | 0xFF00FF00;\n      v504 = v499 - v500;\n      v793 = v500;\n      v841 = v496 & 0xFC00FC | 0xFF00FF00;\n      v865 = (v496 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v505 = v500;\n      v506 = (signed int *)&unk_4DDE0;\n      v507 = 0;\n      v508 = v865 - v502;\n      v509 = v503 - v502;\n      while ( 1 )\n      {\n        v506 += 4;\n        v510 = v484 & (v508 + v505);\n        v495 ^= v505 & v485;\n        v511 = v505 + v504;\n        v507 ^= v486 & (v509 + v505);\n        v505 += 524296;\n        v493 ^= v510;\n        v494 ^= v501 & v511;\n        if ( v506 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v485 = *v506;\n        v501 = v506[1];\n        v486 = v506[2];\n        v484 = v506[3];\n      }\n      v512 = 234941184;\n      v513 = -2097117952;\n      v514 = 2063609344;\n      v515 = ((16 * v507 & 15360 * ((v841 + 16777472) & 0x40004) ^ v507) >> 8) & 0xF000F0 | (16 * v493 & 15360 * ((v865 + 16777472) & 0x40004) ^ v493) & 0xF000F000 | ((16 * v494 & 15360 * ((v817 + 16777472) & 0x40004) ^ v494) >> 4) & 0xF000F00 | ((16 * v495 & 15360 * ((v793 + 16777472) & 0x40004) ^ v495) >> 12) & 0xF000F;\n      v516 = 16 * ((v515 ^ (v515 >> 4)) & 0x7030702) ^ (v515 ^ (v515 >> 4)) & 0x7030702 ^ v515;\n      v517 = (((v516 ^ (v516 >> 8)) & 0x4E009E) << 8) ^ (v516 ^ (v516 >> 8)) & 0x4E009E ^ v516;\n      v518 = ((unsigned __int16)((v517 ^ HIWORD(v517)) & 0xD9D3) << 16) ^ ((unsigned __int16)v517 ^ HIWORD(v517)) & 0xD9D3 ^ v517;\n      v519 = 16 * ((v518 ^ (v518 >> 4)) & 0x5040004) ^ (v518 ^ (v518 >> 4)) & 0x5040004 ^ v518;\n      v520 = 2 * ((v519 ^ (v519 >> 1)) & 0x4045015) ^ (v519 ^ (v519 >> 1)) & 0x4045015 ^ v772 ^ v519;\n      v521 = 0;\n      v773 = v520;\n      v522 = 0;\n      v523 = 0;\n      v524 = v520 ^ *(_DWORD *)(v748 - 116);\n      v525 = *(_DWORD *)(v748 - 52) ^ __ROL4__(v520, 4);\n      v526 = v525;\n      v527 = (v525 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v528 = v526 & 0xFC00FC;\n      v529 = -167733504;\n      v818 = v527;\n      v528 |= 0xFF00FF00;\n      v530 = v528;\n      v531 = v524 & 0xFC00FC | 0xFF00FF00;\n      v532 = v527 - v528;\n      v794 = v528;\n      v842 = v524 & 0xFC00FC | 0xFF00FF00;\n      v866 = (v524 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v533 = v528;\n      v534 = (signed int *)&unk_4DDE0;\n      v535 = 0;\n      v536 = v866 - v530;\n      v537 = v531 - v530;\n      v744 = v532;\n      while ( 1 )\n      {\n        v534 += 4;\n        v538 = v514 & (v537 + v533);\n        v539 = v512 & (v536 + v533);\n        v540 = v533 + v744;\n        v523 ^= v533 & v513;\n        v533 += 524296;\n        v535 ^= v538;\n        v521 ^= v539;\n        v522 ^= v529 & v540;\n        if ( v534 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v513 = *v534;\n        v529 = v534[1];\n        v514 = v534[2];\n        v512 = v534[3];\n      }\n      v541 = 234941184;\n      v542 = -2097117952;\n      v543 = 2063609344;\n      v544 = ((16 * v535 & 15360 * ((v842 + 16777472) & 0x40004) ^ v535) >> 8) & 0xF000F0 | (16 * v521 & 15360 * ((v866 + 16777472) & 0x40004) ^ v521) & 0xF000F000 | ((16 * v522 & 15360 * ((v818 + 16777472) & 0x40004) ^ v522) >> 4) & 0xF000F00 | ((16 * v523 & 15360 * ((v794 + 16777472) & 0x40004) ^ v523) >> 12) & 0xF000F;\n      v545 = 16 * ((v544 ^ (v544 >> 4)) & 0x7030702) ^ (v544 ^ (v544 >> 4)) & 0x7030702 ^ v544;\n      v546 = (((v545 ^ (v545 >> 8)) & 0x4E009E) << 8) ^ (v545 ^ (v545 >> 8)) & 0x4E009E ^ v545;\n      v547 = ((unsigned __int16)((v546 ^ HIWORD(v546)) & 0xD9D3) << 16) ^ ((unsigned __int16)v546 ^ HIWORD(v546)) & 0xD9D3 ^ v546;\n      v548 = 16 * ((v547 ^ (v547 >> 4)) & 0x5040004) ^ (v547 ^ (v547 >> 4)) & 0x5040004 ^ v547;\n      v549 = 2 * ((v548 ^ (v548 >> 1)) & 0x4045015) ^ (v548 ^ (v548 >> 1)) & 0x4045015 ^ v759 ^ v548;\n      v550 = 0;\n      v760 = v549;\n      v551 = 0;\n      v552 = 0;\n      v553 = v549 ^ *(_DWORD *)(v748 - 112);\n      v554 = *(_DWORD *)(v748 - 48) ^ __ROL4__(v549, 4);\n      v555 = v554;\n      v556 = (v554 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v557 = v555 & 0xFC00FC;\n      v558 = -167733504;\n      v819 = v556;\n      v557 |= 0xFF00FF00;\n      v559 = v557;\n      v560 = v553 & 0xFC00FC | 0xFF00FF00;\n      v561 = v556 - v557;\n      v795 = v557;\n      v843 = v553 & 0xFC00FC | 0xFF00FF00;\n      v867 = (v553 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v562 = v557;\n      v563 = (signed int *)&unk_4DDE0;\n      v564 = 0;\n      v565 = v867 - v559;\n      v566 = v560 - v559;\n      while ( 1 )\n      {\n        v563 += 4;\n        v567 = v541 & (v565 + v562);\n        v552 ^= v562 & v542;\n        v568 = v562 + v561;\n        v564 ^= v543 & (v566 + v562);\n        v562 += 524296;\n        v550 ^= v567;\n        v551 ^= v558 & v568;\n        if ( v563 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v542 = *v563;\n        v558 = v563[1];\n        v543 = v563[2];\n        v541 = v563[3];\n      }\n      v569 = 234941184;\n      v570 = -2097117952;\n      v571 = 2063609344;\n      v572 = ((16 * v564 & 15360 * ((v843 + 16777472) & 0x40004) ^ v564) >> 8) & 0xF000F0 | (16 * v550 & 15360 * ((v867 + 16777472) & 0x40004) ^ v550) & 0xF000F000 | ((16 * v551 & 15360 * ((v819 + 16777472) & 0x40004) ^ v551) >> 4) & 0xF000F00 | ((16 * v552 & 15360 * ((v795 + 16777472) & 0x40004) ^ v552) >> 12) & 0xF000F;\n      v573 = 16 * ((v572 ^ (v572 >> 4)) & 0x7030702) ^ (v572 ^ (v572 >> 4)) & 0x7030702 ^ v572;\n      v574 = (((v573 ^ (v573 >> 8)) & 0x4E009E) << 8) ^ (v573 ^ (v573 >> 8)) & 0x4E009E ^ v573;\n      v575 = ((unsigned __int16)((v574 ^ HIWORD(v574)) & 0xD9D3) << 16) ^ ((unsigned __int16)v574 ^ HIWORD(v574)) & 0xD9D3 ^ v574;\n      v576 = 16 * ((v575 ^ (v575 >> 4)) & 0x5040004) ^ (v575 ^ (v575 >> 4)) & 0x5040004 ^ v575;\n      v577 = 2 * ((v576 ^ (v576 >> 1)) & 0x4045015) ^ (v576 ^ (v576 >> 1)) & 0x4045015 ^ v773 ^ v576;\n      v578 = 0;\n      v774 = v577;\n      v579 = 0;\n      v580 = 0;\n      v581 = v577 ^ *(_DWORD *)(v748 - 108);\n      v582 = *(_DWORD *)(v748 - 44) ^ __ROL4__(v577, 4);\n      v583 = v582;\n      v584 = (v582 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v585 = v583 & 0xFC00FC;\n      v586 = -167733504;\n      v820 = v584;\n      v585 |= 0xFF00FF00;\n      v587 = v585;\n      v588 = v581 & 0xFC00FC | 0xFF00FF00;\n      v589 = v584 - v585;\n      v796 = v585;\n      v844 = v581 & 0xFC00FC | 0xFF00FF00;\n      v868 = (v581 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v590 = v585;\n      v591 = (signed int *)&unk_4DDE0;\n      v592 = 0;\n      v593 = v868 - v587;\n      v594 = v588 - v587;\n      v745 = v589;\n      while ( 1 )\n      {\n        v591 += 4;\n        v595 = v571 & (v594 + v590);\n        v596 = v569 & (v593 + v590);\n        v597 = v590 + v745;\n        v580 ^= v590 & v570;\n        v590 += 524296;\n        v592 ^= v595;\n        v578 ^= v596;\n        v579 ^= v586 & v597;\n        if ( v591 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v570 = *v591;\n        v586 = v591[1];\n        v571 = v591[2];\n        v569 = v591[3];\n      }\n      v598 = 234941184;\n      v599 = -2097117952;\n      v600 = 2063609344;\n      v601 = ((16 * v592 & 15360 * ((v844 + 16777472) & 0x40004) ^ v592) >> 8) & 0xF000F0 | (16 * v578 & 15360 * ((v868 + 16777472) & 0x40004) ^ v578) & 0xF000F000 | ((16 * v579 & 15360 * ((v820 + 16777472) & 0x40004) ^ v579) >> 4) & 0xF000F00 | ((16 * v580 & 15360 * ((v796 + 16777472) & 0x40004) ^ v580) >> 12) & 0xF000F;\n      v602 = 16 * ((v601 ^ (v601 >> 4)) & 0x7030702) ^ (v601 ^ (v601 >> 4)) & 0x7030702 ^ v601;\n      v603 = (((v602 ^ (v602 >> 8)) & 0x4E009E) << 8) ^ (v602 ^ (v602 >> 8)) & 0x4E009E ^ v602;\n      v604 = ((unsigned __int16)((v603 ^ HIWORD(v603)) & 0xD9D3) << 16) ^ ((unsigned __int16)v603 ^ HIWORD(v603)) & 0xD9D3 ^ v603;\n      v605 = 16 * ((v604 ^ (v604 >> 4)) & 0x5040004) ^ (v604 ^ (v604 >> 4)) & 0x5040004 ^ v604;\n      v606 = 2 * ((v605 ^ (v605 >> 1)) & 0x4045015) ^ (v605 ^ (v605 >> 1)) & 0x4045015 ^ v760 ^ v605;\n      v607 = 0;\n      v761 = v606;\n      v608 = 0;\n      v609 = 0;\n      v610 = v606 ^ *(_DWORD *)(v748 - 104);\n      v611 = *(_DWORD *)(v748 - 40) ^ __ROL4__(v606, 4);\n      v612 = v611;\n      v613 = (v611 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v614 = v612 & 0xFC00FC;\n      v615 = -167733504;\n      v821 = v613;\n      v614 |= 0xFF00FF00;\n      v616 = v614;\n      v617 = v610 & 0xFC00FC | 0xFF00FF00;\n      v618 = v613 - v614;\n      v797 = v614;\n      v845 = v610 & 0xFC00FC | 0xFF00FF00;\n      v869 = (v610 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v619 = v614;\n      v620 = (signed int *)&unk_4DDE0;\n      v621 = 0;\n      v622 = v869 - v616;\n      v623 = v617 - v616;\n      while ( 1 )\n      {\n        v620 += 4;\n        v624 = v598 & (v622 + v619);\n        v609 ^= v619 & v599;\n        v625 = v619 + v618;\n        v621 ^= v600 & (v623 + v619);\n        v619 += 524296;\n        v607 ^= v624;\n        v608 ^= v615 & v625;\n        if ( v620 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v599 = *v620;\n        v615 = v620[1];\n        v600 = v620[2];\n        v598 = v620[3];\n      }\n      v626 = 234941184;\n      v627 = -2097117952;\n      v628 = 2063609344;\n      v629 = ((16 * v621 & 15360 * ((v845 + 16777472) & 0x40004) ^ v621) >> 8) & 0xF000F0 | (16 * v607 & 15360 * ((v869 + 16777472) & 0x40004) ^ v607) & 0xF000F000 | ((16 * v608 & 15360 * ((v821 + 16777472) & 0x40004) ^ v608) >> 4) & 0xF000F00 | ((16 * v609 & 15360 * ((v797 + 16777472) & 0x40004) ^ v609) >> 12) & 0xF000F;\n      v630 = 16 * ((v629 ^ (v629 >> 4)) & 0x7030702) ^ (v629 ^ (v629 >> 4)) & 0x7030702 ^ v629;\n      v631 = (((v630 ^ (v630 >> 8)) & 0x4E009E) << 8) ^ (v630 ^ (v630 >> 8)) & 0x4E009E ^ v630;\n      v632 = ((unsigned __int16)((v631 ^ HIWORD(v631)) & 0xD9D3) << 16) ^ ((unsigned __int16)v631 ^ HIWORD(v631)) & 0xD9D3 ^ v631;\n      v633 = 16 * ((v632 ^ (v632 >> 4)) & 0x5040004) ^ (v632 ^ (v632 >> 4)) & 0x5040004 ^ v632;\n      v634 = 2 * ((v633 ^ (v633 >> 1)) & 0x4045015) ^ (v633 ^ (v633 >> 1)) & 0x4045015 ^ v774 ^ v633;\n      v635 = 0;\n      v775 = v634;\n      v636 = 0;\n      v637 = 0;\n      v638 = v634 ^ *(_DWORD *)(v748 - 100);\n      v639 = *(_DWORD *)(v748 - 36) ^ __ROL4__(v634, 4);\n      v640 = v639;\n      v641 = (v639 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v642 = v640 & 0xFC00FC;\n      v643 = -167733504;\n      v822 = v641;\n      v642 |= 0xFF00FF00;\n      v644 = v642;\n      v645 = v638 & 0xFC00FC | 0xFF00FF00;\n      v646 = v641 - v642;\n      v798 = v642;\n      v846 = v638 & 0xFC00FC | 0xFF00FF00;\n      v870 = (v638 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v647 = v642;\n      v648 = (signed int *)&unk_4DDE0;\n      v649 = 0;\n      v650 = v870 - v644;\n      v651 = v645 - v644;\n      v746 = v646;\n      while ( 1 )\n      {\n        v648 += 4;\n        v652 = v628 & (v651 + v647);\n        v653 = v626 & (v650 + v647);\n        v654 = v647 + v746;\n        v637 ^= v647 & v627;\n        v647 += 524296;\n        v649 ^= v652;\n        v635 ^= v653;\n        v636 ^= v643 & v654;\n        if ( v648 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v627 = *v648;\n        v643 = v648[1];\n        v628 = v648[2];\n        v626 = v648[3];\n      }\n      v655 = 234941184;\n      v656 = -2097117952;\n      v657 = 2063609344;\n      v658 = ((16 * v649 & 15360 * ((v846 + 16777472) & 0x40004) ^ v649) >> 8) & 0xF000F0 | (16 * v635 & 15360 * ((v870 + 16777472) & 0x40004) ^ v635) & 0xF000F000 | ((16 * v636 & 15360 * ((v822 + 16777472) & 0x40004) ^ v636) >> 4) & 0xF000F00 | ((16 * v637 & 15360 * ((v798 + 16777472) & 0x40004) ^ v637) >> 12) & 0xF000F;\n      v659 = 16 * ((v658 ^ (v658 >> 4)) & 0x7030702) ^ (v658 ^ (v658 >> 4)) & 0x7030702 ^ v658;\n      v660 = (((v659 ^ (v659 >> 8)) & 0x4E009E) << 8) ^ (v659 ^ (v659 >> 8)) & 0x4E009E ^ v659;\n      v661 = ((unsigned __int16)((v660 ^ HIWORD(v660)) & 0xD9D3) << 16) ^ ((unsigned __int16)v660 ^ HIWORD(v660)) & 0xD9D3 ^ v660;\n      v662 = 16 * ((v661 ^ (v661 >> 4)) & 0x5040004) ^ (v661 ^ (v661 >> 4)) & 0x5040004 ^ v661;\n      v663 = 2 * ((v662 ^ (v662 >> 1)) & 0x4045015) ^ (v662 ^ (v662 >> 1)) & 0x4045015 ^ v761 ^ v662;\n      v664 = 0;\n      v762 = v663;\n      v665 = 0;\n      v666 = 0;\n      v667 = v663 ^ *(_DWORD *)(v748 - 96);\n      v668 = *(_DWORD *)(v748 - 32) ^ __ROL4__(v663, 4);\n      v669 = v668;\n      v670 = (v668 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v671 = v669 & 0xFC00FC;\n      v672 = -167733504;\n      v823 = v670;\n      v671 |= 0xFF00FF00;\n      v673 = v671;\n      v674 = v667 & 0xFC00FC | 0xFF00FF00;\n      v675 = v670 - v671;\n      v799 = v671;\n      v847 = v667 & 0xFC00FC | 0xFF00FF00;\n      v871 = (v667 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v676 = v671;\n      v677 = (signed int *)&unk_4DDE0;\n      v678 = 0;\n      v679 = v871 - v673;\n      v680 = v674 - v673;\n      while ( 1 )\n      {\n        v677 += 4;\n        v681 = v655 & (v679 + v676);\n        v666 ^= v676 & v656;\n        v682 = v676 + v675;\n        v678 ^= v657 & (v680 + v676);\n        v676 += 524296;\n        v664 ^= v681;\n        v665 ^= v672 & v682;\n        if ( v677 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v656 = *v677;\n        v672 = v677[1];\n        v657 = v677[2];\n        v655 = v677[3];\n      }\n      v683 = 234941184;\n      v684 = -2097117952;\n      v685 = 2063609344;\n      v686 = ((16 * v678 & 15360 * ((v847 + 16777472) & 0x40004) ^ v678) >> 8) & 0xF000F0 | (16 * v664 & 15360 * ((v871 + 16777472) & 0x40004) ^ v664) & 0xF000F000 | ((16 * v665 & 15360 * ((v823 + 16777472) & 0x40004) ^ v665) >> 4) & 0xF000F00 | ((16 * v666 & 15360 * ((v799 + 16777472) & 0x40004) ^ v666) >> 12) & 0xF000F;\n      v687 = 16 * ((v686 ^ (v686 >> 4)) & 0x7030702) ^ (v686 ^ (v686 >> 4)) & 0x7030702 ^ v686;\n      v688 = (((v687 ^ (v687 >> 8)) & 0x4E009E) << 8) ^ (v687 ^ (v687 >> 8)) & 0x4E009E ^ v687;\n      v689 = ((unsigned __int16)((v688 ^ HIWORD(v688)) & 0xD9D3) << 16) ^ ((unsigned __int16)v688 ^ HIWORD(v688)) & 0xD9D3 ^ v688;\n      v690 = 16 * ((v689 ^ (v689 >> 4)) & 0x5040004) ^ (v689 ^ (v689 >> 4)) & 0x5040004 ^ v689;\n      v691 = 2 * ((v690 ^ (v690 >> 1)) & 0x4045015) ^ (v690 ^ (v690 >> 1)) & 0x4045015 ^ v775 ^ v690;\n      v692 = 0;\n      v776 = v691;\n      v693 = 0;\n      v694 = 0;\n      v695 = v691 ^ *(_DWORD *)(v748 - 92);\n      v696 = *(_DWORD *)(v748 - 28) ^ __ROL4__(v691, 4);\n      v697 = v696;\n      v698 = (v696 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v699 = v697 & 0xFC00FC;\n      v700 = -167733504;\n      v824 = v698;\n      v699 |= 0xFF00FF00;\n      v701 = v699;\n      v702 = v695 & 0xFC00FC | 0xFF00FF00;\n      v703 = v698 - v699;\n      v800 = v699;\n      v848 = v695 & 0xFC00FC | 0xFF00FF00;\n      v872 = (v695 >> 8) & 0xFC00FC | 0xFF00FF00;\n      v704 = v699;\n      v705 = (signed int *)&unk_4DDE0;\n      v706 = 0;\n      v707 = v872 - v701;\n      v708 = v702 - v701;\n      v747 = v703;\n      while ( 1 )\n      {\n        v705 += 4;\n        v709 = v685 & (v708 + v704);\n        v710 = v683 & (v707 + v704);\n        v711 = v704 + v747;\n        v694 ^= v704 & v684;\n        v704 += 524296;\n        v706 ^= v709;\n        v692 ^= v710;\n        v693 ^= v700 & v711;\n        if ( v705 == (signed int *)\"triple-DES inner-CBC\" )\n          break;\n        v684 = *v705;\n        v700 = v705[1];\n        v685 = v705[2];\n        v683 = v705[3];\n      }\n      v712 = ((16 * v706 & 15360 * ((v848 + 16777472) & 0x40004) ^ v706) >> 8) & 0xF000F0 | (16 * v692 & 15360 * ((v872 + 16777472) & 0x40004) ^ v692) & 0xF000F000 | ((16 * v693 & 15360 * ((v824 + 16777472) & 0x40004) ^ v693) >> 4) & 0xF000F00 | ((16 * v694 & 15360 * ((v800 + 16777472) & 0x40004) ^ v694) >> 12) & 0xF000F;\n      v713 = 16 * ((v712 ^ (v712 >> 4)) & 0x7030702) ^ (v712 ^ (v712 >> 4)) & 0x7030702 ^ v712;\n      v714 = (((v713 ^ (v713 >> 8)) & 0x4E009E) << 8) ^ (v713 ^ (v713 >> 8)) & 0x4E009E ^ v713;\n      v715 = ((unsigned __int16)((v714 ^ HIWORD(v714)) & 0xD9D3) << 16) ^ ((unsigned __int16)v714 ^ HIWORD(v714)) & 0xD9D3 ^ v714;\n      v716 = 16 * ((v715 ^ (v715 >> 4)) & 0x5040004) ^ (v715 ^ (v715 >> 4)) & 0x5040004 ^ v715;\n      v717 = 2 * ((v716 ^ (v716 >> 1)) & 0x4045015) ^ (v716 ^ (v716 >> 1)) & 0x4045015 ^ v716 ^ v762;\n      *(_DWORD *)(v748 - 4) = v776;\n      *(_DWORD *)(v748 - 8) = v717;\n      v717 = __ROL4__(v717, 1);\n      v718 = (__ROL4__(v776, 1) ^ (v717 >> 1)) & 0x55555555;\n      v719 = v718 ^ __ROL4__(v776, 1);\n      v720 = 2 * v718 ^ v717;\n      v721 = (v720 ^ (v719 >> 8)) & 0xFF00FF;\n      v722 = v721 ^ v720;\n      v723 = v719 ^ (v721 << 8);\n      v724 = (v722 ^ ((v719 ^ (v721 << 8)) >> 2)) & 0x33333333;\n      v725 = v724 ^ v722;\n      v726 = v723 ^ 4 * v724;\n      v727 = (unsigned __int16)(v726 ^ HIWORD(v725));\n      v728 = v727 ^ v726;\n      v729 = v725 ^ (v727 << 16);\n      v730 = (v728 ^ ((v725 ^ (unsigned int)(v727 << 16)) >> 4)) & 0xF0F0F0F;\n      v731 = v730 ^ v728;\n      *(_BYTE *)(v749 + 7) = v731;\n      *(_BYTE *)(v749 + 6) = BYTE1(v731);\n      v732 = v729 ^ 16 * v730;\n      *(_BYTE *)(v749 + 3) = v732;\n      *(_BYTE *)(v749 + 2) = BYTE1(v732);\n      *(_BYTE *)(v749 + 1) = BYTE2(v732);\n      *(_BYTE *)v749 = HIBYTE(v732);\n      v733 = v749 + 8 == v873;\n      *(_BYTE *)(v749 + 5) = BYTE2(v731);\n      *(_BYTE *)(v749 + 4) = HIBYTE(v731);\n      v749 += 8LL;\n    }\n    while ( !v733 );\n  }\n}\n", 
            "funcStartAddr": "0x2e4b0L", 
            "funcEndAddr": "0x317aaL", 
            "funcName": "sub_2E4B0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_317B0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x317b0L", 
            "funcEndAddr": "0x317b3L", 
            "funcName": "sub_317B0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_317C0(__int64 a1, __int64 a2)\n{\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 40));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 32));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 24));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 16));\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 8));\n}\n", 
            "funcStartAddr": "0x317c0L", 
            "funcEndAddr": "0x31813L", 
            "funcName": "sub_317C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_31820(__int64 a1, __int64 a2)\n{\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 8));\n}\n", 
            "funcStartAddr": "0x31820L", 
            "funcEndAddr": "0x31830L", 
            "funcName": "sub_31820"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_31830(__int64 a1, _QWORD *a2)\n{\n  __int64 (**v2)(void); // rbp\n  char *v3; // rbx\n  size_t v4; // r12\n\n  v2 = (__int64 (**)(void))(a1 + 24);\n  if ( *(_QWORD *)(a1 + 16) )\n    sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(a1 + 24), 44);\n  sub_10C10(v2);\n  v3 = (char *)sub_13560(a2);\n  v4 = strlen(v3);\n  sub_10C10(v2);\n  sub_47E30(v3, v4);\n  sub_114C0(v3);\n}\n", 
            "funcStartAddr": "0x31830L", 
            "funcEndAddr": "0x3189eL", 
            "funcName": "sub_31830"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_318A0(__int64 a1)\n{\n  __int64 v1; // rax\n  _QWORD *v2; // rsi\n  __int64 v3; // rbx\n  _QWORD *v4; // rsi\n  __int64 result; // rax\n\n  v1 = sub_47400(a1);\n  v2 = *(_QWORD **)(a1 - 40);\n  v3 = v1;\n  if ( v2 )\n  {\n    sub_31830(v1, v2);\n    sub_31830(v3, *(_QWORD **)(a1 - 32));\n    sub_31830(v3, *(_QWORD **)(a1 - 24));\n    v4 = *(_QWORD **)(a1 - 16);\n    sub_31830(v3, v4);\n    result = sub_47470(v3, v4);\n  }\n  else\n  {\n    sub_47420(v1);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x318a0L", 
            "funcEndAddr": "0x31906L", 
            "funcName": "sub_318A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_31910(__int64 a1)\n{\n  void *v1; // rbp\n  __int64 v2; // rbx\n  _QWORD *v3; // rdi\n  _QWORD *v4; // rdi\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rdi\n  _QWORD *v7; // rdi\n\n  v1 = (void *)(a1 - 40);\n  v2 = a1;\n  v3 = *(_QWORD **)(a1 - 40);\n  if ( v3 )\n    sub_12FF0(v3);\n  v4 = *(_QWORD **)(v2 - 32);\n  if ( v4 )\n    sub_12FF0(v4);\n  v5 = *(_QWORD **)(v2 - 24);\n  if ( v5 )\n    sub_12FF0(v5);\n  v6 = *(_QWORD **)(v2 - 16);\n  if ( v6 )\n    sub_12FF0(v6);\n  v7 = *(_QWORD **)(v2 - 8);\n  if ( v7 )\n    sub_12FF0(v7);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x31910L", 
            "funcEndAddr": "0x31971L", 
            "funcName": "sub_31910"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_31980(__int64 a1, __int64 a2)\n{\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), \"ssh-dss\");\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 40));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 32));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 24));\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 16));\n}\n", 
            "funcStartAddr": "0x31980L", 
            "funcEndAddr": "0x319d6L", 
            "funcName": "sub_31980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_319E0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r13\n  unsigned __int64 *v6; // rbx\n  char *v7; // r14\n  size_t v8; // rdx\n  size_t v9; // rbp\n  char *v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // r15\n  signed __int64 *v14; // rbp\n  signed __int64 *v15; // r15\n  int v16; // er14\n  int v17; // er14\n  int v18; // er14\n  unsigned __int64 *v19; // r14\n  unsigned __int64 *v20; // ST28_8\n  unsigned __int64 *v21; // rbx\n  unsigned __int64 *v22; // r13\n  unsigned __int64 *v23; // ST00_8\n  unsigned __int64 *v24; // ST08_8\n  unsigned __int64 *v25; // ST20_8\n  unsigned __int64 *v26; // ST18_8\n  unsigned __int64 *v27; // ST10_8\n  __int64 v28; // [rsp+0h] [rbp-B8h]\n  __int64 v29; // [rsp+30h] [rbp-88h]\n  __int64 v30; // [rsp+38h] [rbp-80h]\n  __int64 v31; // [rsp+40h] [rbp-78h]\n  int v32; // [rsp+48h] [rbp-70h]\n  __int64 *v33; // [rsp+50h] [rbp-68h]\n  char v34; // [rsp+60h] [rbp-58h]\n  unsigned __int64 v35; // [rsp+78h] [rbp-40h]\n\n  v35 = __readfsqword(0x28u);\n  v28 = a5;\n  if ( !*(_QWORD *)(a1 - 40) )\n    goto LABEL_4;\n  v5 = a4;\n  v6 = (unsigned __int64 *)a2;\n  v29 = a2;\n  v31 = a3;\n  v30 = 0LL;\n  v32 = 0;\n  v33 = &v29;\n  if ( a3 != 40 )\n  {\n    v7 = sub_111C0((__int64)&v29);\n    v9 = v8;\n    v10 = sub_111C0((__int64)v33);\n    v12 = v11;\n    if ( *((_DWORD *)v33 + 6)\n      || (v6 = (unsigned __int64 *)v10, (unsigned __int8)sub_47EC0(v7, v9, \"ssh-dss\") != 1)\n      || v12 != 40 )\n    {\nLABEL_4:\n      LODWORD(v6) = 0;\n      return (unsigned int)v6;\n    }\n  }\n  v14 = sub_13290((__int64)v6, 20LL);\n  v15 = sub_13290((__int64)v6 + 20, 20LL);\n  LOBYTE(v6) = v15 == 0LL || v14 == 0LL;\n  if ( (_BYTE)v6 )\n  {\n    if ( v14 )\n      sub_12FF0(v14);\n    if ( v15 )\n      sub_12FF0(v15);\n    goto LABEL_4;\n  }\n  v16 = sub_140A0(v14, 0LL);\n  v17 = sub_140A0(v15, 0LL) | v16;\n  v18 = (unsigned __int64)sub_13D30((unsigned __int64 *)v14, *(unsigned __int64 **)(a1 - 32)) | v17;\n  if ( !((unsigned int)sub_13D30((unsigned __int64 *)v15, *(unsigned __int64 **)(a1 - 32)) | v18) )\n  {\n    v19 = sub_154D0((unsigned __int64 *)v15, *(__int64 **)(a1 - 32));\n    if ( v19 )\n    {\n      sub_20450((__int64 (**)(void))&off_261420, v5, v28, (__int64)&v34);\n      v20 = sub_13290((__int64)&v34, 20LL);\n      v21 = sub_161D0(v20, v19, *(__int64 **)(a1 - 32));\n      v22 = sub_161D0((unsigned __int64 *)v14, v19, *(__int64 **)(a1 - 32));\n      v23 = v21;\n      v6 = sub_163B0(*(unsigned __int64 **)(a1 - 24), v21, *(_QWORD *)(a1 - 40));\n      v24 = v6;\n      v25 = sub_163B0(*(unsigned __int64 **)(a1 - 16), v22, *(_QWORD *)(a1 - 40));\n      v26 = sub_161D0(v6, v25, *(__int64 **)(a1 - 40));\n      v27 = sub_15EB0(v26, *(__int64 **)(a1 - 32));\n      LOBYTE(v6) = (unsigned int)sub_14030(v27, (unsigned __int64 *)v14) != 0;\n      sub_12FF0(v19);\n      sub_12FF0(v20);\n      sub_12FF0(v23);\n      sub_12FF0(v22);\n      sub_12FF0(v24);\n      sub_12FF0(v25);\n      sub_12FF0(v26);\n      sub_12FF0(v27);\n    }\n  }\n  sub_12FF0(v14);\n  sub_12FF0(v15);\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x319e0L", 
            "funcEndAddr": "0x31c91L", 
            "funcName": "sub_319E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_31CA0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdi\n  __int64 v4; // rbx\n  _QWORD *v5; // rax\n  __int64 v6; // rdi\n  _QWORD *v7; // rax\n  __int64 v8; // rdi\n  _QWORD *v9; // rax\n  __int64 v10; // rdi\n  _QWORD *v11; // rax\n  __int64 v12; // rdi\n  __int64 v13; // rbp\n\n  v2 = sub_11440(1uLL, 0x30uLL, 0LL);\n  v3 = *(_QWORD *)(a2 + 32);\n  v4 = v2;\n  *(_QWORD *)(v2 + 40) = off_2603C0;\n  v5 = sub_13740(v3);\n  v6 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)v4 = v5;\n  v7 = sub_13740(v6);\n  v8 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 8) = v7;\n  v9 = sub_13740(v8);\n  v10 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 16) = v9;\n  v11 = sub_13740(v10);\n  v12 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 24) = v11;\n  *(_QWORD *)(v4 + 32) = sub_13740(v12);\n  v13 = v4 + 40;\n  if ( !*(_DWORD *)(*(_QWORD *)(a2 + 32) + 24LL) )\n  {\n    v13 = v4 + 40;\n    if ( !(unsigned int)sub_140A0(*(signed __int64 **)(v4 + 8), 0LL)\n      && !(unsigned int)sub_140A0(*(signed __int64 **)v4, 0LL) )\n    {\n      return v4 + 40;\n    }\n  }\n  sub_31910(v13);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x31ca0L", 
            "funcEndAddr": "0x31d5cL", 
            "funcName": "sub_31CA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_31D60(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rdx\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // rbx\n  signed __int64 v8; // rbp\n  _QWORD *v9; // rax\n  __int64 v10; // rdi\n  _QWORD *v11; // rax\n  __int64 v12; // rdi\n  _QWORD *v13; // rax\n  __int64 v14; // rdi\n  __int64 v15; // rax\n  __int64 v17; // rdi\n  __int64 v18; // [rsp+0h] [rbp-48h]\n  __int64 v19; // [rsp+8h] [rbp-40h]\n  __int64 v20; // [rsp+10h] [rbp-38h]\n  int v21; // [rsp+18h] [rbp-30h]\n  __int64 *v22; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v23; // [rsp+28h] [rbp-20h]\n\n  v18 = a2;\n  v20 = a3;\n  v23 = __readfsqword(0x28u);\n  v22 = &v18;\n  v19 = 0LL;\n  v21 = 0;\n  v3 = sub_111C0((__int64)&v18);\n  if ( !(unsigned __int8)sub_47EC0(v3, v4, \"ssh-dss\") )\n    return 0LL;\n  v5 = sub_11440(1uLL, 0x30uLL, 0LL);\n  v6 = (__int64)v22;\n  v7 = v5;\n  v8 = v5 + 40;\n  *(_QWORD *)(v5 + 40) = off_2603C0;\n  v9 = sub_13740(v6);\n  v10 = (__int64)v22;\n  *(_QWORD *)v7 = v9;\n  v11 = sub_13740(v10);\n  v12 = (__int64)v22;\n  *(_QWORD *)(v7 + 8) = v11;\n  v13 = sub_13740(v12);\n  v14 = (__int64)v22;\n  *(_QWORD *)(v7 + 16) = v13;\n  *(_QWORD *)(v7 + 24) = sub_13740(v14);\n  v15 = (__int64)v22;\n  *(_QWORD *)(v7 + 32) = 0LL;\n  if ( *(_DWORD *)(v15 + 24)\n    || (v8 = v7 + 40, (unsigned int)sub_140A0(*(signed __int64 **)v7, 0LL))\n    || (unsigned int)sub_140A0(*(signed __int64 **)(v7 + 8), 0LL) )\n  {\n    v17 = v8;\n    v8 = 0LL;\n    sub_31910(v17);\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x31d60L", 
            "funcEndAddr": "0x31e79L", 
            "funcName": "sub_31D60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_31E80(__int64 a1, __int64 a2, __int64 a3)\n{\n  signed __int64 v3; // rax\n  __int64 v4; // rbx\n  unsigned int v5; // ebp\n\n  v3 = sub_31D60(a1, a2, a3);\n  if ( v3 )\n  {\n    v4 = v3;\n    v5 = sub_134B0(*(__int64 **)(v3 - 40));\n    sub_31910(v4);\n  }\n  else\n  {\n    v5 = -1;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x31e80L", 
            "funcEndAddr": "0x31eb7L", 
            "funcName": "sub_31E80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_31EC0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  signed __int64 v7; // rax\n  __int64 v8; // rbx\n  signed __int64 v9; // r12\n  _QWORD *v10; // rax\n  __int64 v11; // rdi\n  char *v12; // r14\n  __int64 v13; // rdx\n  __int64 v14; // rax\n  __int64 *v15; // rbp\n  unsigned __int64 *v16; // rdi\n  __int64 v18; // [rsp+0h] [rbp-78h]\n  __int64 v19; // [rsp+8h] [rbp-70h]\n  __int64 v20; // [rsp+10h] [rbp-68h]\n  int v21; // [rsp+18h] [rbp-60h]\n  __int64 *v22; // [rsp+20h] [rbp-58h]\n  char v23; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v24; // [rsp+48h] [rbp-30h]\n\n  v5 = a4;\n  v6 = a5;\n  v24 = __readfsqword(0x28u);\n  v7 = sub_31D60(a1, a2, a3);\n  if ( !v7 )\n    return 0LL;\n  v8 = v7;\n  v18 = v5;\n  v22 = &v18;\n  v20 = v6;\n  v9 = v7;\n  v19 = 0LL;\n  v21 = 0;\n  v10 = sub_13740((__int64)&v18);\n  v11 = (__int64)v22;\n  *(_QWORD *)(v8 - 8) = v10;\n  if ( *(_DWORD *)(v11 + 24) )\n  {\n    v9 = 0LL;\n    sub_31910(v8);\n    return v9;\n  }\n  v12 = sub_111C0(v11);\n  if ( v13 == 20 )\n  {\n    v14 = sub_3F7E0(&off_261420);\n    v15 = (__int64 *)v14;\n    if ( v14 )\n      (*(void (__fastcall **)(__int64))(*(_QWORD *)v14 + 8LL))(v14);\n    sub_13630(v15[1], *(__int64 **)(v8 - 40));\n    sub_13630(v15[1], *(__int64 **)(v8 - 32));\n    sub_13630(v15[1], *(__int64 **)(v8 - 24));\n    (*(void (__fastcall **)(__int64 *, char *))(*v15 + 24))(v15, &v23);\n    (*(void (__fastcall **)(__int64 *))(*v15 + 32))(v15);\n    if ( !(unsigned __int8)sub_47E50(v12, &v23, 20LL) )\n      goto LABEL_11;\n  }\n  v16 = sub_163B0(*(unsigned __int64 **)(v8 - 24), *(unsigned __int64 **)(v8 - 8), *(_QWORD *)(v8 - 40));\n  if ( !(unsigned int)sub_14030(v16, *(unsigned __int64 **)(v8 - 16)) )\n  {\n    sub_12FF0(v16);\nLABEL_11:\n    v9 = 0LL;\n    sub_31910(v8);\n    return v9;\n  }\n  sub_12FF0(v16);\n  return v9;\n}\n", 
            "funcStartAddr": "0x31ec0L", 
            "funcEndAddr": "0x32032L", 
            "funcName": "sub_31EC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_32040(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rdx\n  __int64 v3; // rdx\n  __int64 v4; // rdx\n\n  v1 = sub_3B3A0();\n  sub_3B3E0(v1, \"key_type\", \"DSA\");\n  if ( !*(_QWORD *)(a1 - 40) )\n    __assert_fail(\"dss->p\", \"sshdss.c\", 0x5Eu, \"dss_components\");\n  sub_3B460(v1, \"p\");\n  v2 = *(_QWORD *)(a1 - 32);\n  sub_3B460(v1, \"q\");\n  v3 = *(_QWORD *)(a1 - 24);\n  sub_3B460(v1, \"g\");\n  v4 = *(_QWORD *)(a1 - 16);\n  sub_3B460(v1, \"public_y\");\n  if ( *(_QWORD *)(a1 - 8) )\n    sub_3B460(v1, \"private_x\");\n  return v1;\n}\n", 
            "funcStartAddr": "0x32040L", 
            "funcEndAddr": "0x320f9L", 
            "funcName": "sub_32040"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_32100(const char *a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // rbp\n  __int64 v4; // rax\n  __int64 *v5; // rbx\n  __int64 *v6; // rbx\n  unsigned __int64 *v7; // r13\n  __int64 *v8; // r12\n  __int64 v10; // [rsp+0h] [rbp-88h]\n  unsigned __int64 v11; // [rsp+48h] [rbp-40h]\n\n  v3 = a3;\n  v11 = __readfsqword(0x28u);\n  v4 = sub_3ED40(&off_2612E0);\n  v5 = (__int64 *)v4;\n  if ( v4 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);\n  sub_10F80((__int64 (__fastcall **)(_QWORD, const char *, size_t))v5[1], a1);\n  sub_13630(v5[1], v3);\n  (*(void (__fastcall **)(__int64 *, __int64 *))(*v5 + 24))(v5, &v10);\n  (*(void (__fastcall **)(__int64 *))(*v5 + 8))(v5);\n  sub_10C10((__int64 (**)(void))v5[1]);\n  sub_10C10((__int64 (**)(void))v5[1]);\n  (*(void (__fastcall **)(__int64 *, __int64 *))(*v5 + 24))(v5, &v10);\n  (*(void (__fastcall **)(__int64 *))(*v5 + 32))(v5);\n  v6 = sub_133C0(a2);\n  sub_13A10(v6, (unsigned __int64 *)v6, 2LL);\n  v7 = sub_13290((__int64)&v10, 64LL);\n  v8 = (__int64 *)sub_15EB0(v7, v6);\n  sub_12FF0(v7);\n  sub_12FF0(v6);\n  sub_13980(v8, (unsigned __int64 *)v8, 2uLL);\n  sub_47E30(&v10, 64LL);\n  return v8;\n}\n", 
            "funcStartAddr": "0x32100L", 
            "funcEndAddr": "0x3223dL", 
            "funcName": "sub_32100"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_32240(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  __int64 *v7; // rbx\n  unsigned __int64 *v8; // r15\n  unsigned __int64 *v9; // ST00_8\n  unsigned __int64 *v10; // r12\n  unsigned __int64 *v11; // r14\n  unsigned __int64 *v12; // ST08_8\n  unsigned __int64 *v13; // ST00_8\n  unsigned __int64 *v14; // r13\n  __int64 *v15; // rdi\n  signed __int64 v16; // rbx\n  unsigned __int64 v17; // rsi\n  char v18; // al\n  signed __int64 v19; // rbx\n  unsigned __int64 v20; // rsi\n  char v21; // al\n  char v23; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v24; // [rsp+28h] [rbp-40h]\n\n  v5 = a1;\n  v6 = a5;\n  v24 = __readfsqword(0x28u);\n  sub_20450((__int64 (**)(void))&off_261420, a2, a3, (__int64)&v23);\n  v7 = sub_32100(\"DSA deterministic k generator\", *(_QWORD *)(v5 - 32), *(__int64 **)(v5 - 8));\n  v8 = sub_154D0((unsigned __int64 *)v7, *(__int64 **)(a1 - 32));\n  v9 = sub_163B0(*(unsigned __int64 **)(v5 - 24), (unsigned __int64 *)v7, *(_QWORD *)(v5 - 40));\n  v10 = sub_15EB0(v9, *(__int64 **)(a1 - 32));\n  sub_12FF0(v9);\n  v11 = sub_13290((__int64)&v23, 20LL);\n  v12 = sub_141F0(*(unsigned __int64 **)(a1 - 8), v10);\n  v13 = (unsigned __int64 *)sub_140F0(v12, v11);\n  v14 = sub_161D0(v8, v13, *(__int64 **)(a1 - 32));\n  sub_12FF0(v13);\n  sub_12FF0(v12);\n  sub_12FF0(v8);\n  v15 = v7;\n  v16 = 19LL;\n  sub_12FF0(v15);\n  sub_12FF0(v11);\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(v6 + 8), \"ssh-dss\");\n  sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(v6 + 8), 40);\n  do\n  {\n    v17 = v16--;\n    v18 = sub_133D0(v10, v17);\n    sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v6 + 8), v18);\n  }\n  while ( v16 != -1 );\n  v19 = 19LL;\n  do\n  {\n    v20 = v19--;\n    v21 = sub_133D0(v14, v20);\n    sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v6 + 8), v21);\n  }\n  while ( v19 != -1 );\n  sub_12FF0(v10);\n  sub_12FF0(v14);\n  return __readfsqword(0x28u) ^ v24;\n}\n", 
            "funcStartAddr": "0x32240L", 
            "funcEndAddr": "0x323f5L", 
            "funcName": "sub_32240"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_32400(__int64 **a1, unsigned int a2, _QWORD *a3, __int64 a4)\n{\n  _QWORD *v4; // r12\n  __int64 v5; // rbx\n  __int64 v6; // r15\n  __int64 v7; // ST08_8\n  __int64 v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rbp\n  __int64 *v11; // r12\n  __int64 *v12; // rsi\n  unsigned __int64 *v13; // r13\n  __int64 *i; // rbp\n  signed __int64 *v15; // r15\n  unsigned __int64 *v16; // rbp\n  __int64 *v17; // rbx\n  __int64 *v18; // r13\n  __int64 *v20; // [rsp+0h] [rbp-48h]\n\n  v4 = a3;\n  v5 = a4;\n  v6 = (*(__int64 (__fastcall **)(_QWORD, __int64, signed __int64))*a3)(*a3, a4, 160LL);\n  v7 = (*(__int64 (__fastcall **)(_QWORD, __int64, _QWORD))*v4)(*v4, v5, a2);\n  sub_36BF0(a2);\n  v8 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 16LL))(v5);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 24LL))(v5, v6);\n  v9 = sub_17C90(160);\n  v20 = (__int64 *)(*(__int64 (__fastcall **)(_QWORD *, __int64, __int64))(*v4 + 24LL))(v4, v9, v5);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 48LL))(v5);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 24LL))(v5, v7);\n  v10 = sub_17C90(a2);\n  sub_17FC0(v10, v20);\n  v11 = (__int64 *)(*(__int64 (__fastcall **)(_QWORD *, __int64, __int64))(*v4 + 24LL))(v4, v10, v5);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 48LL))(v5);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 24LL))(v5, v8);\n  v12 = v20;\n  v13 = sub_15E80(v11, v20);\n  for ( i = sub_12FA0(2LL); ; sub_13980(i, (unsigned __int64 *)i, 1uLL) )\n  {\n    (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v5 + 40LL))(v5, v12);\n    v15 = (signed __int64 *)sub_163B0((unsigned __int64 *)i, v13, (__int64)v11);\n    if ( (unsigned int)sub_13FC0(v15, 2LL) )\n      break;\n    sub_12FF0(v15);\n    v12 = i;\n  }\n  sub_12FF0(i);\n  sub_12FF0(v13);\n  (*(void (__fastcall **)(__int64, signed __int64))(*(_QWORD *)v5 + 48LL))(v5, 2LL);\n  v16 = sub_12FA0(2LL);\n  v17 = sub_133C0((__int64)v20);\n  sub_13A10(v17, (unsigned __int64 *)v17, 1LL);\n  v18 = sub_16DD0(v16, (unsigned __int64 *)v17, (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n  sub_12FF0(v16);\n  sub_12FF0(v17);\n  *a1 = v11;\n  a1[2] = v15;\n  a1[4] = v18;\n  a1[5] = (__int64 *)off_2603C0;\n  a1[1] = v20;\n  a1[3] = (__int64 *)sub_163B0((unsigned __int64 *)v15, (unsigned __int64 *)v18, (__int64)v11);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x32400L", 
            "funcEndAddr": "0x325f6L", 
            "funcName": "sub_32400"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_32600()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x32600L", 
            "funcEndAddr": "0x32603L", 
            "funcName": "sub_32600"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_32610(__int64 a1)\n{\n  return *(_QWORD *)((**(__int64 (***)(void))(a1 + 120))() + 24);\n}\n", 
            "funcStartAddr": "0x32610L", 
            "funcEndAddr": "0x32623L", 
            "funcName": "sub_32610"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_32630(__int64 a1, int a2, __int64 a3, unsigned int a4)\n{\n  __int64 *v4; // r12\n  __int64 v5; // rbp\n  signed __int64 v6; // rax\n  unsigned __int64 result; // rax\n\n  v4 = (__int64 *)a3;\n  *(_DWORD *)a1 = a2;\n  v5 = a4;\n  *(_QWORD *)(a1 + 40) = sub_133C0(a3);\n  v6 = sub_134B0(v4);\n  *(_QWORD *)(a1 + 24) = v6;\n  result = (unsigned __int64)(v6 + v5 + 7) >> 3;\n  *(_QWORD *)(a1 + 32) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x32630L", 
            "funcEndAddr": "0x32668L", 
            "funcName": "sub_32630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_32670(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v3; // [rsp+8h] [rbp-30h]\n  _QWORD *v4; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-20h]\n\n  v5 = __readfsqword(0x28u);\n  v1 = sub_3B3A0();\n  sub_3B3E0(v1, \"key_type\", \"EdDSA\");\n  sub_3B3E0(v1, \"curve_name\", *(_QWORD *)(*(_QWORD *)(a1 - 24) + 16LL));\n  sub_CA90(*(_QWORD **)(a1 - 16), (__int64 *)&v3, (__int64 *)&v4);\n  sub_3B460(v1, \"public_affine_x\");\n  sub_3B460(v1, \"public_affine_y\");\n  sub_12FF0(v3);\n  sub_12FF0(v4);\n  if ( *(_QWORD *)(a1 - 8) )\n    sub_3B460(v1, \"private_exponent\");\n  return v1;\n}\n", 
            "funcStartAddr": "0x32670L", 
            "funcEndAddr": "0x32744L", 
            "funcName": "sub_32670"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_32750(__int64 a1, _QWORD *a2, _QWORD *a3)\n{\n  _QWORD *v3; // r13\n  __int64 v4; // rax\n  __int64 v5; // rbx\n  void *v6; // r12\n  void *v7; // rbp\n\n  v3 = a3;\n  v4 = sub_47400(a1);\n  v5 = v4;\n  if ( a1 )\n    sub_474E0(v4);\n  v6 = (void *)sub_13560(a2);\n  v7 = (void *)sub_13560(v3);\n  sub_474E0(v5);\n  sub_114C0(v6);\n  sub_114C0(v7);\n  return sub_47470(v5, \"0x%s,0x%s\");\n}\n", 
            "funcStartAddr": "0x32750L", 
            "funcEndAddr": "0x327d3L", 
            "funcName": "sub_32750"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_327E0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rdi\n  _QWORD *v3; // [rsp+8h] [rbp-20h]\n  _QWORD *v4; // [rsp+10h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-10h]\n\n  v1 = a1;\n  v2 = *(_QWORD **)(a1 - 16);\n  v5 = __readfsqword(0x28u);\n  sub_CA90(v2, (__int64 *)&v3, (__int64 *)&v4);\n  sub_32750(*(_QWORD *)(*(_QWORD *)(v1 - 24) + 8LL), v3, v4);\n  sub_12FF0(v3);\n  sub_12FF0(v4);\n  __readfsqword(0x28u);\n}\n", 
            "funcStartAddr": "0x327e0L", 
            "funcEndAddr": "0x32857L", 
            "funcName": "sub_327E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_32860(__int64 a1, _QWORD *a2, __int64 a3, char a4)\n{\n  __int64 v4; // r12\n  char v5; // bl\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rbx\n  unsigned __int64 v8; // rsi\n  char v9; // al\n  unsigned __int64 v10; // rsi\n  char v11; // bl\n  char v12; // al\n  unsigned __int64 *v14; // [rsp+8h] [rbp-30h]\n  unsigned __int64 *v15; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v16; // [rsp+18h] [rbp-20h]\n\n  v4 = a3;\n  v5 = a4;\n  v16 = __readfsqword(0x28u);\n  sub_CA90(a2, (__int64 *)&v14, (__int64 *)&v15);\n  v6 = *(_QWORD *)(v4 + 32);\n  if ( v6 <= 1 )\n    __assert_fail(\"curve->fieldBytes >= 2\", aSsh, 0x246u, \"BinarySink_put_epoint\");\n  if ( v5\n    || (sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 + 8), v6),\n        v10 = 0LL,\n        *(_QWORD *)(v4 + 32) != 1LL) )\n  {\n    v7 = 0LL;\n    do\n    {\n      v8 = v7++;\n      v9 = sub_133D0(v15, v8);\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 + 8), v9);\n      v10 = *(_QWORD *)(v4 + 32) - 1LL;\n    }\n    while ( v10 > v7 );\n  }\n  v11 = sub_133D0(v15, v10) & 0x7F;\n  v12 = sub_13400(v14, 0LL);\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 + 8), (v12 << 7) | v11);\n  sub_12FF0(v14);\n  sub_12FF0(v15);\n  return __readfsqword(0x28u) ^ v16;\n}\n", 
            "funcStartAddr": "0x32860L", 
            "funcEndAddr": "0x3297dL", 
            "funcName": "sub_32860"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_32980(__int64 a1, __int64 a2)\n{\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), *(char **)(*(_QWORD *)a1 + 104LL));\n  return sub_32860(*(_QWORD *)(a2 + 8), *(_QWORD **)(a1 - 16), *(_QWORD *)(a1 - 24), 0);\n}\n", 
            "funcStartAddr": "0x32980L", 
            "funcEndAddr": "0x329b5L", 
            "funcName": "sub_32980"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_329C0(__int64 a1)\n{\n  void *v1; // rbp\n  __int64 v2; // rbx\n  _QWORD *v3; // rdi\n  _QWORD *v4; // rdi\n\n  v1 = (void *)(a1 - 24);\n  v2 = a1;\n  v3 = *(_QWORD **)(a1 - 16);\n  if ( v3 )\n    sub_C3B0(v3);\n  v4 = *(_QWORD **)(v2 - 8);\n  if ( v4 )\n    sub_12FF0(v4);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x329c0L", 
            "funcEndAddr": "0x329f7L", 
            "funcName": "sub_329C0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_32A00(__int64 a1, __int64 a2, _DWORD *a3)\n{\n  _DWORD *v3; // rbx\n  unsigned __int64 *v4; // rbp\n  unsigned __int8 v5; // r12\n  _QWORD *v6; // rbx\n\n  if ( *a3 != 2 )\n    __assert_fail(\"curve->type == EC_EDWARDS\", aSsh, 0x21Bu, \"eddsa_decode\");\n  v3 = a3;\n  v4 = sub_13280(a1, a2);\n  v5 = sub_13400(v4, 8LL * *((_QWORD *)v3 + 4) - 1);\n  sub_13450(v4, 8LL * *((_QWORD *)v3 + 4) - 1, 0);\n  if ( (unsigned int)sub_13D30(v4, *((unsigned __int64 **)v3 + 5)) )\n    v6 = 0LL;\n  else\n    v6 = sub_C3F0(*((_QWORD **)v3 + 6), (__int64)v4, v5);\n  sub_12FF0(v4);\n  return v6;\n}\n", 
            "funcStartAddr": "0x32a00L", 
            "funcEndAddr": "0x32aa3L", 
            "funcName": "sub_32A00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_32AB0(__int64 a1, __int64 a2)\n{\n  _DWORD *v2; // rax\n  _DWORD *v3; // rbx\n  char *v4; // r13\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // rbp\n  char *v7; // rax\n  __int64 v8; // rdx\n  char *v9; // r15\n  __int64 v10; // rdx\n  char *v11; // rax\n  __int64 v12; // rdx\n  _QWORD *v13; // rax\n  _QWORD *v14; // r14\n  _QWORD *v15; // rax\n  __int64 v17; // [rsp+8h] [rbp-70h]\n  char *v18; // [rsp+10h] [rbp-68h]\n  __int64 v19; // [rsp+18h] [rbp-60h]\n  __int64 v20; // [rsp+20h] [rbp-58h]\n  int v21; // [rsp+28h] [rbp-50h]\n  __int64 *v22; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+38h] [rbp-40h]\n\n  v23 = __readfsqword(0x28u);\n  v2 = (_DWORD *)(**(__int64 (***)(void))(a1 + 120))();\n  if ( *v2 != 2 )\n    __assert_fail(\"curve->type == EC_EDWARDS\", aSsh, 0x349u, \"eddsa_new_priv_openssh\");\n  v3 = v2;\n  v4 = sub_111C0(*(_QWORD *)(a2 + 32));\n  v6 = v5;\n  v7 = sub_111C0(*(_QWORD *)(a2 + 32));\n  if ( !*(_DWORD *)(*(_QWORD *)(a2 + 32) + 24LL) && v6 == *((_QWORD *)v3 + 4) )\n  {\n    v18 = v7;\n    v20 = v8;\n    v19 = 0LL;\n    v22 = (__int64 *)&v18;\n    v21 = 0;\n    v9 = sub_11030((__int64)&v18, v6);\n    v17 = v10;\n    v11 = sub_11030((__int64)v22, *((_QWORD *)v3 + 4));\n    if ( !*((_DWORD *)v22 + 6) && v22[2] == v22[1] && (unsigned __int8)sub_47F00(v4, v6, v11, v12) )\n    {\n      v13 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n      v13[3] = a1;\n      *v13 = v3;\n      v13[2] = 0LL;\n      v14 = v13;\n      v15 = sub_32A00((__int64)v4, v6, v3);\n      v14[1] = v15;\n      if ( v15 )\n      {\n        v14[2] = sub_13280((__int64)v9, v17);\n        return (signed __int64)(v14 + 3);\n      }\n      sub_329C0((__int64)(v14 + 3));\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x32ab0L", 
            "funcEndAddr": "0x32c35L", 
            "funcName": "sub_32AB0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_32C40(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)\n{\n  __int64 v8; // r15\n  __int64 v9; // r13\n  __int64 v10; // r14\n  __int64 v11; // r12\n  _QWORD *v12; // rax\n  _QWORD *result; // rax\n\n  v8 = a5;\n  v9 = a3;\n  v10 = a4;\n  v11 = a6;\n  sub_32630((__int64)a1, 0, a2, 0);\n  v12 = sub_A680(a2, v9, v10, v8);\n  a1[6] = v12;\n  a1[7] = sub_A760((__int64)v12, v11, a7);\n  result = sub_133C0(a8);\n  a1[8] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x32c40L", 
            "funcEndAddr": "0x32cb2L", 
            "funcName": "sub_32C40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_32CC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v3; // [rsp+8h] [rbp-30h]\n  _QWORD *v4; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-20h]\n\n  v5 = __readfsqword(0x28u);\n  v1 = sub_3B3A0();\n  sub_3B3E0(v1, \"key_type\", \"ECDSA\");\n  sub_3B3E0(v1, \"curve_name\", *(_QWORD *)(*(_QWORD *)(a1 - 24) + 16LL));\n  sub_B760(*(_QWORD **)(a1 - 16), (__int64 *)&v3, (__int64 *)&v4);\n  sub_3B460(v1, \"public_affine_x\");\n  sub_3B460(v1, \"public_affine_y\");\n  sub_12FF0(v3);\n  sub_12FF0(v4);\n  if ( *(_QWORD *)(a1 - 8) )\n    sub_3B460(v1, \"private_exponent\");\n  return v1;\n}\n", 
            "funcStartAddr": "0x32cc0L", 
            "funcEndAddr": "0x32d94L", 
            "funcName": "sub_32CC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_32DA0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rdi\n  _QWORD *v3; // [rsp+8h] [rbp-20h]\n  _QWORD *v4; // [rsp+10h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-10h]\n\n  v1 = a1;\n  v2 = *(_QWORD **)(a1 - 16);\n  v5 = __readfsqword(0x28u);\n  sub_B760(v2, (__int64 *)&v3, (__int64 *)&v4);\n  sub_32750(*(_QWORD *)(*(_QWORD *)(v1 - 24) + 8LL), v3, v4);\n  sub_12FF0(v3);\n  sub_12FF0(v4);\n  __readfsqword(0x28u);\n}\n", 
            "funcStartAddr": "0x32da0L", 
            "funcEndAddr": "0x32e17L", 
            "funcName": "sub_32DA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_32E20@<rax>(__int64 a1@<rdx>, char a2@<cl>, signed __int64 a3@<rdi>, _QWORD *a4@<rsi>, __int64 a5@<r14>)\n{\n  __int64 v5; // r15\n  char v6; // r12\n  signed __int64 v7; // rbp\n  __int64 v9; // rax\n  signed __int64 v10; // rbx\n  unsigned __int64 v11; // rsi\n  char v12; // al\n  __int64 v13; // rax\n  signed __int64 v14; // rbx\n  unsigned __int64 v15; // rsi\n  char v16; // al\n  unsigned __int64 *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 *v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+18h] [rbp-40h]\n\n  v5 = a1;\n  v6 = a2;\n  v7 = a3;\n  v19 = __readfsqword(0x28u);\n  if ( !a2 )\n  {\n    a5 = sub_47400(a3);\n    v7 = a5 + 24;\n  }\n  if ( (unsigned int)sub_B750((__int64)a4) )\n  {\n    sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), 0);\n  }\n  else\n  {\n    sub_B760(a4, (__int64 *)&v17, (__int64 *)&v18);\n    sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), 4);\n    v9 = *(_QWORD *)(v5 + 32);\n    v10 = v9 - 1;\n    if ( v9 )\n    {\n      do\n      {\n        v11 = v10--;\n        v12 = sub_133D0(v17, v11);\n        sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), v12);\n      }\n      while ( v10 != -1 );\n      v13 = *(_QWORD *)(v5 + 32);\n      v14 = v13 - 1;\n      if ( v13 )\n      {\n        do\n        {\n          v15 = v14--;\n          v16 = sub_133D0(v18, v15);\n          sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), v16);\n        }\n        while ( v14 != -1 );\n      }\n    }\n    sub_12FF0(v17);\n    sub_12FF0(v18);\n  }\n  if ( !v6 )\n    sub_10F60(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a3 + 8), a5);\n  return __readfsqword(0x28u) ^ v19;\n}\n", 
            "funcStartAddr": "0x32e20L", 
            "funcEndAddr": "0x32f56L", 
            "funcName": "sub_32E20"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_32F60@<rax>(__int64 a1@<rdi>, __int64 a2@<rsi>, __int64 a3@<r14>)\n{\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), *(char **)(*(_QWORD *)(a1 - 24) + 8LL));\n  sub_32E20(*(_QWORD *)(a1 - 24), 0, *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 - 16), a3);\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 8));\n}\n", 
            "funcStartAddr": "0x32f60L", 
            "funcEndAddr": "0x32fa3L", 
            "funcName": "sub_32F60"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_32FB0@<rax>(__int64 a1@<rdi>, __int64 a2@<rsi>, __int64 a3@<r14>)\n{\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), *(char **)(*(_QWORD *)a1 + 104LL));\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), *(char **)(*(_QWORD *)(a1 - 24) + 8LL));\n  return sub_32E20(*(_QWORD *)(a1 - 24), 0, *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 - 16), a3);\n}\n", 
            "funcStartAddr": "0x32fb0L", 
            "funcEndAddr": "0x32ff6L", 
            "funcName": "sub_32FB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_33000@<rax>(__int64 a1@<rdi>, __int64 a2@<rsi>, __int64 a3@<r14>)\n{\n  return sub_32E20(*(_QWORD *)(a1 + 8), 1, *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 + 24), a3);\n}\n", 
            "funcStartAddr": "0x33000L", 
            "funcEndAddr": "0x33019L", 
            "funcName": "sub_33000"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_33020(__int64 a1)\n{\n  void *v1; // rbp\n  __int64 v2; // rbx\n  _QWORD *v3; // rdi\n  _QWORD *v4; // rdi\n\n  v1 = (void *)(a1 - 24);\n  v2 = a1;\n  v3 = *(_QWORD **)(a1 - 16);\n  if ( v3 )\n    sub_A8D0(v3);\n  v4 = *(_QWORD **)(v2 - 8);\n  if ( v4 )\n    sub_12FF0(v4);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x33020L", 
            "funcEndAddr": "0x33057L", 
            "funcName": "sub_33020"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_33060(__int64 a1)\n{\n  return sub_A8D0(*(_QWORD **)(a1 + 24));\n}\n", 
            "funcStartAddr": "0x33060L", 
            "funcEndAddr": "0x33069L", 
            "funcName": "sub_33060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_33070(__int64 a1)\n{\n  return sub_BBD0(*(_QWORD **)(a1 + 24));\n}\n", 
            "funcStartAddr": "0x33070L", 
            "funcEndAddr": "0x33079L", 
            "funcName": "sub_33070"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_33080(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 *v3; // rbx\n  __int64 *v4; // r12\n  __int64 *v5; // rbx\n  __int64 v6; // r13\n  unsigned __int64 v7; // rbx\n  unsigned __int64 v8; // rsi\n  char v9; // al\n  unsigned __int64 *result; // rax\n  unsigned __int64 *v11; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v12; // [rsp+8h] [rbp-30h]\n\n  v12 = __readfsqword(0x28u);\n  v3 = sub_13280(a2, a3);\n  sub_14B70(v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24LL));\n  v4 = sub_BAE0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48LL), (__int64)v3);\n  sub_12FF0(v3);\n  v5 = sub_BFB0(v4, *(_QWORD *)(a1 + 16));\n  if ( (unsigned int)sub_C1B0((__int64)v5) )\n  {\n    sub_BBD0(v4);\n    sub_BBD0(v5);\n    result = 0LL;\n  }\n  else\n  {\n    sub_C130(v5, (__int64 *)&v11);\n    sub_BBD0(v4);\n    sub_BBD0(v5);\n    v6 = sub_47400(v5);\n    if ( *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32LL) )\n    {\n      v7 = 0LL;\n      do\n      {\n        v8 = v7++;\n        v9 = sub_133D0(v11, v8);\n        sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v6 + 24), v9);\n      }\n      while ( *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32LL) > v7 );\n    }\n    sub_12FF0(v11);\n    v11 = sub_13290(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));\n    sub_47420(v6);\n    result = v11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x33080L", 
            "funcEndAddr": "0x331b9L", 
            "funcName": "sub_33080"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_331C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // r12\n  _QWORD *v4; // rdi\n  unsigned __int64 v5; // rbx\n  unsigned __int64 v6; // rsi\n  char v7; // al\n  unsigned __int64 *v9; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v10; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v3 = a2;\n  v4 = *(_QWORD **)(a1 + 24);\n  v10 = __readfsqword(0x28u);\n  sub_C130(v4, (__int64 *)&v9);\n  if ( *(_QWORD *)(*(_QWORD *)(v2 + 8) + 32LL) )\n  {\n    v5 = 0LL;\n    do\n    {\n      v6 = v5++;\n      v7 = sub_133D0(v9, v6);\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v3 + 8), v7);\n    }\n    while ( *(_QWORD *)(*(_QWORD *)(v2 + 8) + 32LL) > v5 );\n  }\n  sub_12FF0(v9);\n  return __readfsqword(0x28u) ^ v10;\n}\n", 
            "funcStartAddr": "0x331c0L", 
            "funcEndAddr": "0x3324eL", 
            "funcName": "sub_331C0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_33250(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  unsigned __int64 *v6; // rax\n  __int64 v7; // rdx\n  unsigned int v8; // ebx\n  unsigned __int64 v9; // rsi\n  __int64 *result; // rax\n\n  v2 = sub_47410(a1, a2);\n  v3 = v2;\n  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32LL);\n  v5 = sub_472D0(v2);\n  sub_3B660(v5, v4);\n  v6 = sub_13280(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));\n  v7 = *(_QWORD *)(a1 + 8);\n  *(_QWORD *)(a1 + 16) = v6;\n  sub_14B70(v6, *(_QWORD *)(v7 + 24));\n  sub_13450(*(unsigned __int64 **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24LL) - 1LL, 1);\n  if ( *(_DWORD *)(*(_QWORD *)(a1 + 8) + 64LL) )\n  {\n    v8 = 0;\n    do\n    {\n      v9 = v8++;\n      sub_13450(*(unsigned __int64 **)(a1 + 16), v9, 0);\n    }\n    while ( *(_DWORD *)(*(_QWORD *)(a1 + 8) + 64LL) > v8 );\n  }\n  sub_47420(v3);\n  result = sub_BFB0(*(__int64 **)(*(_QWORD *)(a1 + 8) + 56LL), *(_QWORD *)(a1 + 16));\n  *(_QWORD *)(a1 + 24) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x33250L", 
            "funcEndAddr": "0x3330bL", 
            "funcName": "sub_33250"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_33310(_QWORD *a1)\n{\n  unsigned __int64 *v1; // rbp\n  __int64 *result; // rax\n\n  v1 = sub_12FA0(1LL);\n  a1[2] = sub_16DD0(v1, *(unsigned __int64 **)(a1[1] + 64LL), (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n  sub_12FF0(v1);\n  result = sub_B620(*(_QWORD **)(a1[1] + 56LL), a1[2]);\n  a1[3] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x33310L", 
            "funcEndAddr": "0x33365L", 
            "funcName": "sub_33310"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_33370(__int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  unsigned __int64 *v4; // r12\n  unsigned int v5; // ebx\n\n  if ( *(_QWORD *)(a3 + 32) > a2 )\n    __assert_fail(\"hash.len >= curve->fieldBytes\", aSsh, 0x169u, \"eddsa_exponent_from_hash\");\n  v3 = a3;\n  v4 = sub_13280(a1, *(_QWORD *)(a3 + 32));\n  sub_13450(v4, *(_QWORD *)(v3 + 24) - 1LL, 1);\n  sub_14B70(v4, *(_QWORD *)(v3 + 24));\n  if ( *(_DWORD *)(v3 + 72) )\n  {\n    v5 = 0;\n    do\n      sub_13450(v4, v5++, 0);\n    while ( *(_DWORD *)(v3 + 72) > v5 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x33370L", 
            "funcEndAddr": "0x333f3L", 
            "funcName": "sub_33370"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_33400(__int64 (__fastcall ***a1)(_QWORD, char *, signed __int64), unsigned __int64 *a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  unsigned __int64 *v4; // r13\n  unsigned __int64 result; // rax\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rsi\n  char v8; // al\n\n  v3 = a3;\n  v4 = a2;\n  result = sub_10D80((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))*a1, a3);\n  if ( v3 )\n  {\n    v6 = 0LL;\n    do\n    {\n      v7 = v6++;\n      v8 = sub_133D0(v4, v7);\n      result = sub_10CD0((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))*a1, v8);\n    }\n    while ( v3 != v6 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x33400L", 
            "funcEndAddr": "0x33453L", 
            "funcName": "sub_33400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_33460(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // r12\n  __int64 v4; // rax\n  __int64 v5; // rdx\n  _QWORD *v6; // rsi\n  signed __int64 v7; // rdi\n  _QWORD *v8; // r15\n  unsigned __int64 v9; // rbp\n  char *v10; // r14\n  __int64 v11; // r13\n  signed __int64 v12; // rbx\n  signed __int64 v13; // ST08_8\n\n  if ( **(_DWORD **)(a1 - 24) != 2 )\n    __assert_fail(aEk, aSsh, 0x378u, \"eddsa_openssh_blob\");\n  v2 = a1;\n  v3 = a2;\n  v4 = sub_47400(a1);\n  v5 = *(_QWORD *)(a1 - 24);\n  v6 = *(_QWORD **)(a1 - 16);\n  v7 = v4 + 24;\n  v8 = (_QWORD *)v4;\n  sub_32860(v4 + 24, v6, v5, 0);\n  v9 = v8[2] - 4LL;\n  v10 = (char *)(*v8 + 4LL);\n  v11 = sub_47410(v7, v6);\n  sub_33400(\n    (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v11 + 32),\n    *(unsigned __int64 **)(v2 - 8),\n    *(_QWORD *)(*(_QWORD *)(v2 - 24) + 32LL));\n  v12 = *(_QWORD *)(v11 + 16) - 4LL;\n  v13 = *(_QWORD *)v11 + 4LL;\n  sub_10F20(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(v3 + 8), v10, v9);\n  sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(v3 + 8), v9 + v12);\n  sub_10C20(*(__int64 (***)(void))(v3 + 8));\n  sub_10C20(*(__int64 (***)(void))(v3 + 8));\n  sub_47420(v8);\n  return sub_47420(v11);\n}\n", 
            "funcStartAddr": "0x33460L", 
            "funcEndAddr": "0x3355bL", 
            "funcName": "sub_33460"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_33560(__int64 a1, __int64 a2)\n{\n  unsigned __int64 *v2; // rax\n\n  v2 = *(unsigned __int64 **)(a1 - 8);\n  if ( !v2 )\n    __assert_fail(\"ek->privateKey\", aSsh, 0x323u, \"eddsa_private_blob\");\n  return sub_33400(\n           (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(_QWORD *)(a2 + 8) + 8LL),\n           v2,\n           *(_QWORD *)(*(_QWORD *)(a1 - 24) + 32LL));\n}\n", 
            "funcStartAddr": "0x33560L", 
            "funcEndAddr": "0x335a4L", 
            "funcName": "sub_33560"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_335B0(__int64 *a1, _QWORD **a2, _QWORD *a3, __int64 *a4)\n{\n  _QWORD **v4; // r13\n  __int64 *v5; // r12\n  _QWORD *v6; // rbx\n  __int64 v7; // rax\n  __int64 (***v8)(void); // r15\n  __int64 v9; // rsi\n  __int64 v10; // rdx\n  _QWORD *v11; // r12\n  char v13; // [rsp+20h] [rbp-B8h]\n  unsigned __int64 v14; // [rsp+98h] [rbp-40h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v14 = __readfsqword(0x28u);\n  v7 = (*(__int64 (__fastcall **)(_QWORD))*a3)(*a3);\n  v8 = (__int64 (***)(void))v7;\n  if ( v7 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v7 + 8LL))(v7);\n  v9 = *v5;\n  v10 = v5[1];\n  sub_10C20(v8[1]);\n  sub_10C20(v8[1]);\n  sub_32860((__int64)v8[1], *v4, *a1, 1);\n  sub_10C20(v8[1]);\n  ((void (__fastcall *)(__int64 (***)(void), char *))(*v8)[3])(v8, &v13);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v8)[4])(v8);\n  v11 = sub_13280((__int64)&v13, *(_QWORD *)(*v6 + 40LL));\n  sub_47E30(&v13, *(_QWORD *)(*v6 + 40LL));\n  return v11;\n}\n", 
            "funcStartAddr": "0x335b0L", 
            "funcEndAddr": "0x336ceL", 
            "funcName": "sub_335B0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_336D0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // rax\n  void *v4; // rbp\n  __int64 v5; // rbx\n  char *v6; // rax\n  size_t v7; // rdx\n  char *v9; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  char *v12; // r12\n  __int64 v13; // rdx\n  __int64 v14; // rbp\n  __int64 v15; // rdx\n  char *v16; // rcx\n  _QWORD *v17; // ST20_8\n  _QWORD *v18; // rbx\n  __int64 *v19; // rbp\n  __int64 *v20; // r12\n  __int64 *v21; // rbx\n  _QWORD *v22; // [rsp+8h] [rbp-80h]\n  __int64 v23; // [rsp+10h] [rbp-78h]\n  __int64 v24; // [rsp+18h] [rbp-70h]\n  __int64 v25; // [rsp+20h] [rbp-68h]\n  __int64 v26; // [rsp+28h] [rbp-60h]\n  __int64 v27; // [rsp+30h] [rbp-58h]\n  int v28; // [rsp+38h] [rbp-50h]\n  __int64 *v29; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v30; // [rsp+48h] [rbp-40h]\n\n  v30 = __readfsqword(0x28u);\n  v3 = (_QWORD *)*a1;\n  v25 = a2;\n  v27 = a3;\n  v26 = 0LL;\n  v28 = 0;\n  v29 = &v25;\n  v4 = (void *)v3[13];\n  v5 = v3[15];\n  v6 = sub_111C0((__int64)&v25);\n  if ( !(unsigned __int8)sub_47EC0(v6, v7, v4) )\n    return 0;\n  v9 = sub_111C0((__int64)v29);\n  if ( *((_DWORD *)v29 + 6) )\n    return 0;\n  v25 = (__int64)v9;\n  v11 = *(a1 - 3);\n  v29 = &v25;\n  v27 = v10;\n  v26 = 0LL;\n  v28 = 0;\n  v12 = sub_11030((__int64)&v25, *(_QWORD *)(v11 + 32));\n  v14 = v13;\n  v16 = sub_11030((__int64)v29, *(_QWORD *)(*(a1 - 3) + 32LL));\n  if ( *((_DWORD *)v29 + 6) )\n    return 0;\n  if ( v29[2] != v29[1] )\n    return 0;\n  v24 = v15;\n  v23 = (__int64)v16;\n  v22 = sub_32A00((__int64)v12, v14, (_DWORD *)*(a1 - 3));\n  if ( !v22 )\n    return 0;\n  v17 = sub_13280(v23, v24);\n  v18 = sub_335B0(a1 - 3, (_QWORD **)a1 - 2, (_QWORD *)(v5 + 8), (__int64 *)(v5 + 32));\n  v19 = sub_C860(*(_QWORD **)(*(a1 - 3) + 56LL), (__int64)v17);\n  sub_12FF0(v17);\n  v20 = sub_C860((_QWORD *)*(a1 - 2), (__int64)v18);\n  sub_12FF0(v18);\n  v21 = sub_C5C0((__int64)v22, v20);\n  sub_C3B0(v20);\n  LODWORD(v20) = sub_C990(v19, v21);\n  sub_C3B0(v19);\n  sub_C3B0(v21);\n  sub_C3B0(v22);\n  return (_DWORD)v20 != 0;\n}\n", 
            "funcStartAddr": "0x336d0L", 
            "funcEndAddr": "0x338e1L", 
            "funcName": "sub_336D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_338F0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  _QWORD *v5; // rbx\n  __int64 v6; // r14\n  __int64 v7; // rbp\n  __int64 v8; // rax\n  __int64 (__fastcall ***v9)(_QWORD, char *, signed __int64); // r15\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rsi\n  char v12; // al\n  __int64 v13; // rax\n  __int64 (***v14)(void); // r15\n  __int64 v15; // rsi\n  __int64 v16; // rdx\n  __int64 v17; // rdx\n  unsigned __int64 *v18; // r15\n  unsigned __int64 *v19; // r12\n  _QWORD *v20; // rdi\n  __int64 *v21; // r13\n  __int64 v22; // r15\n  __int64 v23; // r8\n  __int64 v24; // r9\n  unsigned __int64 *v25; // ST10_8\n  unsigned __int64 *v26; // rbx\n  unsigned __int64 *v27; // r13\n  __int64 v28; // rdx\n  __int64 v29; // rsi\n  unsigned __int64 v30; // rbx\n  unsigned __int64 v31; // rsi\n  char v32; // al\n  unsigned __int64 *v34; // [rsp+10h] [rbp-C8h]\n  __int64 *v35; // [rsp+18h] [rbp-C0h]\n  char v36; // [rsp+20h] [rbp-B8h]\n  unsigned __int64 v37; // [rsp+98h] [rbp-40h]\n\n  v37 = __readfsqword(0x28u);\n  v35 = (__int64 *)(a1 - 24);\n  v5 = *(_QWORD **)(*(_QWORD *)a1 + 120LL);\n  if ( !*(_QWORD *)(a1 - 8) )\n    __assert_fail(\"ek->privateKey\", aSsh, 0x493u, \"eddsa_sign\");\n  v6 = a1;\n  v7 = a5;\n  v8 = (*(__int64 (__fastcall **)(_QWORD))v5[1])(v5[1]);\n  v9 = (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))v8;\n  if ( v8 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v8 + 8LL))(v8);\n  if ( *(_QWORD *)(*(_QWORD *)(a1 - 24) + 32LL) )\n  {\n    v10 = 0LL;\n    do\n    {\n      v11 = v10++;\n      v12 = sub_133D0(*(unsigned __int64 **)(a1 - 8), v11);\n      sub_10CD0(v9[1], v12);\n    }\n    while ( *(_QWORD *)(*(_QWORD *)(a1 - 24) + 32LL) > v10 );\n  }\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64), char *))(*v9)[3])(v9, &v36);\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64)))(*v9)[4])(v9);\n  v34 = sub_33370((__int64)&v36, *(_QWORD *)(*(_QWORD *)(a1 - 24) + 32LL), *(_QWORD *)(a1 - 24));\n  v13 = (*(__int64 (__fastcall **)(_QWORD))v5[1])(v5[1]);\n  v14 = (__int64 (***)(void))v13;\n  if ( v13 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v13 + 8LL))(v13);\n  v15 = v5[4];\n  v16 = v5[5];\n  sub_10C20(v14[1]);\n  v17 = *(_QWORD *)(v5[1] + 40LL) - *(_QWORD *)(*(_QWORD *)(a1 - 24) + 32LL);\n  sub_10C10(v14[1]);\n  sub_10C20(v14[1]);\n  ((void (__fastcall *)(__int64 (***)(void), char *))(*v14)[3])(v14, &v36);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v14)[4])(v14);\n  v18 = sub_13280((__int64)&v36, *(_QWORD *)(v5[1] + 40LL));\n  v19 = sub_15EB0(v18, *(__int64 **)(*(_QWORD *)(a1 - 24) + 64LL));\n  sub_12FF0(v18);\n  v20 = *(_QWORD **)(*(_QWORD *)(a1 - 24) + 56LL);\n  v21 = sub_C860(v20, (__int64)v19);\n  v22 = sub_47400(v20);\n  sub_32860(v22 + 24, v21, *(_QWORD *)(v6 - 24), 1);\n  sub_C3B0(v21);\n  v23 = *(_QWORD *)(v22 + 8);\n  v24 = *(_QWORD *)(v22 + 16);\n  v25 = sub_335B0(v35, (_QWORD **)(v6 - 16), v5 + 1, v5 + 4);\n  v26 = sub_161D0(v25, v34, *(__int64 **)(*(_QWORD *)(v6 - 24) + 64LL));\n  v27 = sub_16490(v19, v26, *(__int64 **)(*(_QWORD *)(v6 - 24) + 64LL));\n  sub_12FF0(v25);\n  sub_12FF0(v34);\n  sub_12FF0(v26);\n  sub_12FF0(v19);\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), *(char **)(*(_QWORD *)v6 + 104LL));\n  sub_10D80(\n    *(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(v7 + 8),\n    *(_DWORD *)(*(_QWORD *)(v6 - 24) + 32LL) + *(_DWORD *)(v22 + 16));\n  v28 = *(_QWORD *)(v22 + 16);\n  v29 = *(_QWORD *)(v22 + 8);\n  sub_10C10(*(__int64 (***)(void))(v7 + 8));\n  sub_47420(v22);\n  if ( *(_QWORD *)(*(_QWORD *)(v6 - 24) + 32LL) )\n  {\n    v30 = 0LL;\n    do\n    {\n      v31 = v30++;\n      v32 = sub_133D0(v27, v31);\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), v32);\n    }\n    while ( *(_QWORD *)(*(_QWORD *)(v6 - 24) + 32LL) > v30 );\n  }\n  sub_12FF0(v27);\n  return __readfsqword(0x28u) ^ v37;\n}\n", 
            "funcStartAddr": "0x338f0L", 
            "funcEndAddr": "0x33beeL", 
            "funcName": "sub_338F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_33BF0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _DWORD *v4; // rax\n  _DWORD *v5; // rbp\n  _QWORD *v6; // rax\n  __int64 v7; // r12\n  _QWORD *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rdx\n  _QWORD *v11; // rax\n  signed __int64 v12; // rbx\n  signed __int64 result; // rax\n  __int64 v14; // rdi\n  __int64 v15; // [rsp+0h] [rbp-58h]\n  __int64 v16; // [rsp+8h] [rbp-50h]\n  __int64 v17; // [rsp+10h] [rbp-48h]\n  int v18; // [rsp+18h] [rbp-40h]\n  __int64 *v19; // [rsp+20h] [rbp-38h]\n  unsigned __int64 v20; // [rsp+28h] [rbp-30h]\n\n  v3 = a3;\n  v20 = __readfsqword(0x28u);\n  v4 = (_DWORD *)(**(__int64 (***)(void))(a1 + 120))();\n  if ( *v4 != 2 )\nLABEL_8:\n    __assert_fail(\"curve->type == EC_EDWARDS\", aSsh, 0x29Du, \"eddsa_new_pub\");\n  v5 = v4;\n  v17 = v3;\n  v19 = &v15;\n  v15 = a2;\n  v16 = 0LL;\n  v18 = 0;\n  sub_111C0((__int64)&v15);\n  v6 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n  v6[3] = a1;\n  v7 = (__int64)v19;\n  v8 = v6;\n  *v6 = v5;\n  v6[2] = 0LL;\n  v9 = sub_111C0(*(_QWORD *)(v7 + 32));\n  if ( *(_DWORD *)(*(_QWORD *)(v7 + 32) + 24LL) )\n  {\n    v8[1] = 0LL;\n    v12 = (signed __int64)(v8 + 3);\n  }\n  else\n  {\n    v11 = sub_32A00((__int64)v9, v10, v5);\n    v12 = (signed __int64)(v8 + 3);\n    *(_QWORD *)(v12 - 16) = v11;\n    if ( v11 )\n      goto LABEL_4;\n  }\n  v14 = v12;\n  v12 = 0LL;\n  sub_329C0(v14);\nLABEL_4:\n  result = v12;\n  if ( __readfsqword(0x28u) != v20 )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x33bf0L", 
            "funcEndAddr": "0x33d04L", 
            "funcName": "sub_33BF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_33D10(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  signed __int64 v7; // rbx\n  char *v8; // rax\n  __int64 v9; // rdx\n  __int64 v11; // [rsp+0h] [rbp-48h]\n  __int64 v12; // [rsp+8h] [rbp-40h]\n  __int64 v13; // [rsp+10h] [rbp-38h]\n  int v14; // [rsp+18h] [rbp-30h]\n  __int64 *v15; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v16; // [rsp+28h] [rbp-20h]\n\n  v5 = a4;\n  v6 = a5;\n  v16 = __readfsqword(0x28u);\n  v7 = sub_33BF0(a1, a2, a3);\n  if ( v7 )\n  {\n    v11 = v5;\n    v13 = v6;\n    v15 = &v11;\n    v12 = 0LL;\n    v14 = 0;\n    v8 = sub_111C0((__int64)&v11);\n    *(_QWORD *)(v7 - 8) = sub_13280((__int64)v8, v9);\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x33d10L", 
            "funcEndAddr": "0x33d92L", 
            "funcName": "sub_33D10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_33DA0(__int64 a1, __int64 a2)\n{\n  __int64 *v2; // rax\n\n  v2 = *(__int64 **)(a1 - 8);\n  if ( !v2 )\n    __assert_fail(\"ek->privateKey\", aSsh, 0x31Au, \"ecdsa_private_blob\");\n  return sub_13630(*(_QWORD *)(a2 + 8), v2);\n}\n", 
            "funcStartAddr": "0x33da0L", 
            "funcEndAddr": "0x33dd8L", 
            "funcName": "sub_33DA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_33DE0(__int64 **a1, _QWORD *a2)\n{\n  __int64 v2; // rax\n  __int64 (***v3)(void); // rbx\n  __int64 *v4; // rbp\n  signed __int64 v5; // rbx\n  signed __int64 v6; // rax\n  unsigned __int64 *v7; // rbx\n  __int64 v9; // [rsp+0h] [rbp-A8h]\n  unsigned __int64 v10; // [rsp+78h] [rbp-30h]\n\n  v10 = __readfsqword(0x28u);\n  v2 = (*(__int64 (__fastcall **)(_QWORD))*a2)(*a2);\n  v3 = (__int64 (***)(void))v2;\n  if ( v2 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 8LL))(v2);\n  sub_10C20(v3[1]);\n  ((void (__fastcall *)(__int64 (***)(void), __int64 *))(*v3)[3])(v3, &v9);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v3)[4])(v3);\n  v4 = sub_13290((__int64)&v9, *(_QWORD *)(*a2 + 40LL));\n  v5 = sub_134B0(v4);\n  v6 = sub_134B0(*a1);\n  v7 = sub_14AE0((__int64)v4, (v5 - v6) & ~((v5 - v6) >> 63));\n  sub_12FF0(v4);\n  return v7;\n}\n", 
            "funcStartAddr": "0x33de0L", 
            "funcEndAddr": "0x33eb7L", 
            "funcName": "sub_33DE0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_33EC0(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rax\n  void *v4; // r14\n  __int64 v5; // rbp\n  char *v6; // rax\n  size_t v7; // rdx\n  char *v9; // rax\n  __int64 v10; // rdx\n  signed __int64 *v11; // r14\n  signed __int64 *v12; // r15\n  int v13; // ST0C_4\n  int v14; // ST0C_4\n  int v15; // ST0C_4\n  int v16; // ST0C_4\n  unsigned __int64 *v17; // r12\n  unsigned __int64 *v18; // rbp\n  unsigned __int64 *v19; // r13\n  unsigned __int64 *v20; // r12\n  __int64 *v21; // rbp\n  __int64 *v22; // r13\n  __int64 *v23; // r12\n  int v24; // ebx\n  unsigned __int64 *v25; // [rsp+18h] [rbp-70h]\n  __int64 v26; // [rsp+20h] [rbp-68h]\n  __int64 v27; // [rsp+28h] [rbp-60h]\n  __int64 v28; // [rsp+30h] [rbp-58h]\n  int v29; // [rsp+38h] [rbp-50h]\n  __int64 *v30; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v31; // [rsp+48h] [rbp-40h]\n\n  v31 = __readfsqword(0x28u);\n  v3 = *a1;\n  v26 = a2;\n  v28 = a3;\n  v27 = 0LL;\n  v29 = 0;\n  v30 = &v26;\n  v4 = *(void **)(v3 + 104);\n  v5 = *(_QWORD *)(v3 + 120);\n  v6 = sub_111C0((__int64)&v26);\n  if ( !(unsigned __int8)sub_47EC0(v6, v7, v4) )\n    return 0;\n  v9 = sub_111C0((__int64)v30);\n  if ( *((_DWORD *)v30 + 6) )\n    return 0;\n  v28 = v10;\n  v30 = &v26;\n  v26 = (__int64)v9;\n  v27 = 0LL;\n  v29 = 0;\n  v11 = sub_13740((__int64)&v26);\n  v12 = sub_13740((__int64)v30);\n  if ( *((_DWORD *)v30 + 6) )\n  {\n    sub_12FF0(v11);\n    sub_12FF0(v12);\n    return 0;\n  }\n  v13 = sub_140A0(v11, 0LL);\n  v14 = v13 | sub_140A0(v12, 0LL);\n  v15 = v14 | (unsigned __int64)sub_13D30((unsigned __int64 *)v11, *(unsigned __int64 **)(*(a1 - 3) + 64));\n  v16 = v15 | (unsigned __int64)sub_13D30((unsigned __int64 *)v12, *(unsigned __int64 **)(*(a1 - 3) + 64));\n  v17 = sub_33DE0((__int64 **)(*(a1 - 3) + 64), (_QWORD *)(v5 + 8));\n  v18 = sub_154D0((unsigned __int64 *)v12, *(__int64 **)(*(a1 - 3) + 64));\n  v19 = sub_161D0(v17, v18, *(__int64 **)(*(a1 - 3) + 64));\n  sub_12FF0(v17);\n  v20 = sub_161D0((unsigned __int64 *)v11, v18, *(__int64 **)(*(a1 - 3) + 64));\n  sub_12FF0(v18);\n  v21 = sub_B620(*(_QWORD **)(*(a1 - 3) + 56), (__int64)v19);\n  sub_12FF0(v19);\n  v22 = sub_B620((_QWORD *)*(a1 - 2), (__int64)v20);\n  sub_12FF0(v20);\n  v23 = sub_B0D0(v21, v22);\n  sub_A8D0(v21);\n  sub_A8D0(v22);\n  sub_B760(v23, (__int64 *)&v25, 0LL);\n  sub_A8D0(v23);\n  sub_15780(v25, *(__int64 **)(*(a1 - 3) + 64), 0LL, v25);\n  v24 = v16 | sub_14030((unsigned __int64 *)v11, v25) ^ 1;\n  sub_12FF0(v25);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  return v24 == 0;\n}\n", 
            "funcStartAddr": "0x33ec0L", 
            "funcEndAddr": "0x3414aL", 
            "funcName": "sub_33EC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_34150(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbx\n  __int64 v6; // rbp\n  __int64 v7; // r13\n  unsigned __int64 *v8; // r14\n  __int64 *v9; // r12\n  __int64 *v10; // rbp\n  unsigned __int64 *v11; // rbp\n  unsigned __int64 *v12; // ST08_8\n  unsigned __int64 *v13; // r15\n  unsigned __int64 *v14; // r14\n  __int64 *v15; // r12\n  void (__fastcall **v16)(_QWORD, char *, signed __int64); // rdi\n  __int64 v17; // rax\n  __int64 v18; // r14\n  __int64 v19; // rbx\n  unsigned __int64 *v21; // [rsp+18h] [rbp-60h]\n  char v22; // [rsp+20h] [rbp-58h]\n  unsigned __int64 v23; // [rsp+38h] [rbp-40h]\n\n  v23 = __readfsqword(0x28u);\n  if ( !*(_QWORD *)(a1 - 8) )\n    __assert_fail(\"ek->privateKey\", aSsh, 0x45Eu, \"ecdsa_sign\");\n  v5 = a1;\n  v6 = a3;\n  v7 = a5;\n  v8 = sub_33DE0((__int64 **)(*(_QWORD *)(a1 - 24) + 64LL), (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 120LL) + 8LL));\n  sub_20450((__int64 (**)(void))&off_261420, a2, v6, (__int64)&v22);\n  v9 = sub_32100(\"ECDSA deterministic k generator\", *(_QWORD *)(*(_QWORD *)(v5 - 24) + 64LL), *(__int64 **)(v5 - 8));\n  v10 = sub_B620(*(_QWORD **)(*(_QWORD *)(a1 - 24) + 56LL), (__int64)v9);\n  sub_B760(v10, (__int64 *)&v21, 0LL);\n  sub_A8D0(v10);\n  v11 = sub_15EB0(v21, *(__int64 **)(*(_QWORD *)(a1 - 24) + 64LL));\n  sub_12FF0(v21);\n  v12 = sub_161D0(v11, *(unsigned __int64 **)(v5 - 8), *(__int64 **)(*(_QWORD *)(v5 - 24) + 64LL));\n  v13 = sub_16490(v8, v12, *(__int64 **)(*(_QWORD *)(a1 - 24) + 64LL));\n  sub_12FF0(v8);\n  sub_12FF0(v12);\n  v14 = sub_154D0((unsigned __int64 *)v9, *(__int64 **)(*(_QWORD *)(a1 - 24) + 64LL));\n  sub_12FF0(v9);\n  v15 = (__int64 *)sub_161D0(v13, v14, *(__int64 **)(*(_QWORD *)(a1 - 24) + 64LL));\n  sub_12FF0(v13);\n  sub_12FF0(v14);\n  v16 = *(void (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8);\n  sub_10F30(v16, *(char **)(*(_QWORD *)v5 + 104LL));\n  v17 = sub_47400(v16);\n  v18 = v17 + 24;\n  v19 = v17;\n  sub_13630(v17 + 24, (__int64 *)v11);\n  sub_13630(v18, v15);\n  sub_10F60(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(v7 + 8), v19);\n  sub_12FF0(v11);\n  sub_12FF0(v15);\n  return __readfsqword(0x28u) ^ v23;\n}\n", 
            "funcStartAddr": "0x34150L", 
            "funcEndAddr": "0x34346L", 
            "funcName": "sub_34150"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_34350(__int64 a1, __int64 a2, int a3, __int64 *a4)\n{\n  __int64 *v4; // rbp\n  unsigned __int8 v5; // al\n  unsigned __int8 v6; // bl\n  unsigned __int64 v7; // rsi\n  _QWORD *v8; // rbx\n  _QWORD *result; // rax\n  char *v10; // rax\n  __int64 v11; // rdx\n  _QWORD *v12; // r12\n  char *v13; // rax\n  __int64 v14; // rdx\n  _QWORD *v15; // r12\n  char *v16; // rax\n  __int64 v17; // rdx\n  _QWORD *v18; // r13\n  _QWORD *v19; // rdi\n  __int64 v20; // [rsp+0h] [rbp-58h]\n  __int64 v21; // [rsp+8h] [rbp-50h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  __int64 *v24; // [rsp+20h] [rbp-38h]\n  unsigned __int64 v25; // [rsp+28h] [rbp-30h]\n\n  v25 = __readfsqword(0x28u);\n  if ( a3 )\nLABEL_15:\n    __assert_fail(\"curve->type == EC_WEIERSTRASS\", aSsh, 0x1AAu, \"ecdsa_decode\");\n  v20 = a1;\n  v22 = a2;\n  v24 = &v20;\n  v4 = a4;\n  v21 = 0LL;\n  v23 = 0;\n  v5 = sub_11070((__int64)&v20);\n  v6 = v5;\n  v7 = v24[2] - v24[1];\n  if ( v5 > 3u )\n  {\n    if ( v5 != 4 || v7 & 1 )\n      goto LABEL_11;\n    v13 = sub_11030((__int64)v24, v7 >> 1);\n    v15 = sub_13290((__int64)v13, v14);\n    v16 = sub_11030((__int64)v24, v7 >> 1);\n    v18 = sub_13290((__int64)v16, v17);\n    v8 = sub_A760(*v4, (__int64)v15, (__int64)v18);\n    sub_12FF0(v15);\n    sub_12FF0(v18);\n  }\n  else\n  {\n    if ( v5 < 2u )\n    {\n      if ( !v5 )\n      {\n        v8 = sub_A7A0((_QWORD *)*v4);\n        goto LABEL_6;\n      }\nLABEL_11:\n      v8 = 0LL;\n      goto LABEL_8;\n    }\n    v10 = sub_11030((__int64)v24, v7);\n    v12 = sub_13290((__int64)v10, v11);\n    v8 = sub_A910((_QWORD *)*v4, (__int64)v12, v6 & 1);\n    sub_12FF0(v12);\n    if ( !v8 )\n      goto LABEL_11;\n  }\nLABEL_6:\n  if ( !(unsigned int)sub_B840(v8) )\n  {\n    v19 = v8;\n    v8 = 0LL;\n    sub_A8D0(v19);\n  }\nLABEL_8:\n  result = v8;\n  if ( __readfsqword(0x28u) != v25 )\n    goto LABEL_15;\n  return result;\n}\n", 
            "funcStartAddr": "0x34350L", 
            "funcEndAddr": "0x344e3L", 
            "funcName": "sub_34350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_344F0(__int64 a1, __int64 a2, __int64 a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rbx\n  __int64 *v5; // rbp\n  __int64 result; // rax\n  __int64 v7; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-20h]\n\n  v8 = __readfsqword(0x28u);\n  v3 = sub_34350(a2, a3, **(_DWORD **)(a1 + 8), (__int64 *)(*(_QWORD *)(a1 + 8) + 48LL));\n  if ( !v3 )\n    return 0LL;\n  v4 = v3;\n  if ( (unsigned int)sub_B750((__int64)v3) )\n  {\n    sub_A8D0(v4);\n    result = 0LL;\n  }\n  else\n  {\n    v5 = sub_B620(v4, *(_QWORD *)(a1 + 16));\n    sub_B760(v5, &v7, 0LL);\n    sub_A8D0(v4);\n    sub_A8D0(v5);\n    result = v7;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x344f0L", 
            "funcEndAddr": "0x34599L", 
            "funcName": "sub_344F0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_345A0(__int64 *a1, __int64 a2)\n{\n  char *v2; // rax\n  __int64 v3; // rdx\n  _QWORD *result; // rax\n\n  v2 = sub_111C0(*a1);\n  if ( *(_DWORD *)(*a1 + 24) )\n    result = 0LL;\n  else\n    result = sub_34350((__int64)v2, v3, *(_DWORD *)a2, (__int64 *)(a2 + 48));\n  return result;\n}\n", 
            "funcStartAddr": "0x345a0L", 
            "funcEndAddr": "0x345e9L", 
            "funcName": "sub_345A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_345F0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _DWORD *v4; // rax\n  __int64 v5; // rbp\n  void *v6; // rbx\n  char *v7; // rax\n  size_t v8; // rdx\n  _QWORD *v9; // rax\n  signed __int64 v10; // rbx\n  _QWORD *v11; // rax\n  __int64 v13; // rdi\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  __int64 v15; // [rsp+8h] [rbp-50h]\n  __int64 v16; // [rsp+10h] [rbp-48h]\n  int v17; // [rsp+18h] [rbp-40h]\n  __int64 *v18; // [rsp+20h] [rbp-38h]\n  unsigned __int64 v19; // [rsp+28h] [rbp-30h]\n\n  v3 = a3;\n  v19 = __readfsqword(0x28u);\n  v4 = (_DWORD *)(**(__int64 (***)(void))(a1 + 120))();\n  if ( *v4 )\n    __assert_fail(\"curve->type == EC_WEIERSTRASS\", aSsh, 0x280u, \"ecdsa_new_pub\");\n  v5 = (__int64)v4;\n  v16 = v3;\n  v18 = &v14;\n  v14 = a2;\n  v15 = 0LL;\n  v17 = 0;\n  sub_111C0((__int64)&v14);\n  v6 = *(void **)(v5 + 8);\n  v7 = sub_111C0((__int64)v18);\n  if ( !(unsigned __int8)sub_47EC0(v7, v8, v6) )\n    return 0LL;\n  v9 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n  v9[3] = a1;\n  *v9 = v5;\n  v9[2] = 0LL;\n  v10 = (signed __int64)(v9 + 3);\n  v11 = sub_345A0(v18 + 4, v5);\n  *(_QWORD *)(v10 - 16) = v11;\n  if ( !v11 )\n  {\n    v13 = v10;\n    v10 = 0LL;\n    sub_33020(v13);\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x345f0L", 
            "funcEndAddr": "0x34708L", 
            "funcName": "sub_345F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_34710(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  signed __int64 v7; // rbx\n  __int64 v9; // [rsp+0h] [rbp-48h]\n  __int64 v10; // [rsp+8h] [rbp-40h]\n  __int64 v11; // [rsp+10h] [rbp-38h]\n  int v12; // [rsp+18h] [rbp-30h]\n  __int64 *v13; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v14; // [rsp+28h] [rbp-20h]\n\n  v5 = a4;\n  v6 = a5;\n  v14 = __readfsqword(0x28u);\n  v7 = sub_345F0(a1, a2, a3);\n  if ( v7 )\n  {\n    v9 = v5;\n    v11 = v6;\n    v10 = 0LL;\n    v12 = 0;\n    v13 = &v9;\n    *(_QWORD *)(v7 - 8) = sub_13740((__int64)&v9);\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x34710L", 
            "funcEndAddr": "0x34787L", 
            "funcName": "sub_34710"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_34790(__int64 a1, __int64 a2)\n{\n  _DWORD *v2; // rax\n  __int64 v3; // rbp\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rax\n  signed __int64 result; // rax\n\n  v2 = (_DWORD *)(**(__int64 (***)(void))(a1 + 120))();\n  if ( *v2 )\n    __assert_fail(\"curve->type == EC_WEIERSTRASS\", aSsh, 0x395u, \"ecdsa_new_priv_openssh\");\n  v3 = (__int64)v2;\n  sub_111C0(*(_QWORD *)(a2 + 32));\n  v4 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n  v4[3] = a1;\n  *v4 = v3;\n  v4[2] = 0LL;\n  v5 = sub_345A0((__int64 *)(*(_QWORD *)(a2 + 32) + 32LL), v3);\n  v4[1] = v5;\n  if ( v5 )\n  {\n    v4[2] = sub_13740(*(_QWORD *)(a2 + 32));\n    result = (signed __int64)(v4 + 3);\n  }\n  else\n  {\n    sub_33020((__int64)(v4 + 3));\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x34790L", 
            "funcEndAddr": "0x34844L", 
            "funcName": "sub_34790"
        }, 
        {
            "decompiledFuncCode": "void *sub_34850()\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // r15\n  _QWORD *v3; // r14\n  _QWORD *v4; // r13\n  _QWORD *v5; // r12\n  _QWORD *v6; // rbp\n  _QWORD *v7; // ST08_8\n\n  if ( !byte_265630 )\n  {\n    v1 = sub_133A0(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed\");\n    v2 = sub_133A0(\"52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3\");\n    v3 = sub_133A0(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec\");\n    v4 = sub_133A0(\"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\");\n    v5 = sub_133A0(\"6666666666666666666666666666666666666666666666666666666666666658\");\n    v6 = sub_133A0(\"1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed\");\n    v7 = sub_12FA0(2LL);\n    sub_32630((__int64)&unk_2655E0, 2, (__int64)v1, 1u);\n    qword_265610 = (__int64)sub_C1C0((__int64)v1, (__int64)v2, (__int64)v3, (__int64)v7);\n    dword_265628 = 3;\n    qword_265618 = (__int64)sub_C2A0(qword_265610, (__int64)v4, (__int64)v5);\n    qword_265620 = (__int64)sub_133C0((__int64)v6);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    sub_12FF0(v5);\n    sub_12FF0(v6);\n    sub_12FF0(v7);\n    qword_2655E8 = 0LL;\n    byte_265630 = 1;\n    qword_2655F0 = (__int64)\"Ed25519\";\n  }\n  return &unk_2655E0;\n}\n", 
            "funcStartAddr": "0x34850L", 
            "funcEndAddr": "0x349b0L", 
            "funcName": "sub_34850"
        }, 
        {
            "decompiledFuncCode": "void *sub_349B0()\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // r15\n  _QWORD *v3; // r14\n  _QWORD *v4; // r13\n  _QWORD *v5; // r12\n  _QWORD *v6; // rbp\n  _QWORD *v7; // ST08_8\n\n  if ( !byte_2655D0 )\n  {\n    v1 = sub_133A0(\n           \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n    v2 = sub_133A0(\n           \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffff6756\");\n    v3 = sub_133A0(\"1\");\n    v4 = sub_133A0(\n           \"4f1970c66bed0ded221d15a622bf36da9e146570470f1767ea6de324a3d3a46412ae1af72ab66511433b80e18b00938e2626a82bc70cc05e\");\n    v5 = sub_133A0(\n           \"693f46716eb6bc248876203756c9c7624bea73736ca3984087789c1e05a0c2d73ad3ff1ce67c39c4fdbd132c4ed7c8ad9808795bf230fa14\");\n    v6 = sub_133A0(\n           \"3fffffffffffffffffffffffffffffffffffffffffffffffffffffff7cca23e9c44edb49aed63690216cc2728dc58f552378c292ab5844f3\");\n    v7 = sub_12FA0(7LL);\n    sub_32630((__int64)&unk_265580, 2, (__int64)v1, 1u);\n    qword_2655B0 = (__int64)sub_C1C0((__int64)v1, (__int64)v2, (__int64)v3, (__int64)v7);\n    dword_2655C8 = 2;\n    qword_2655B8 = (__int64)sub_C2A0(qword_2655B0, (__int64)v4, (__int64)v5);\n    qword_2655C0 = (__int64)sub_133C0((__int64)v6);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    sub_12FF0(v5);\n    sub_12FF0(v6);\n    sub_12FF0(v7);\n    qword_265588 = 0LL;\n    byte_2655D0 = 1;\n    qword_265590 = (__int64)\"Ed448\";\n  }\n  return &unk_265580;\n}\n", 
            "funcStartAddr": "0x349b0L", 
            "funcEndAddr": "0x34b10L", 
            "funcName": "sub_349B0"
        }, 
        {
            "decompiledFuncCode": "void *sub_34B10()\n{\n  _QWORD *v1; // r15\n  _QWORD *v2; // r14\n  _QWORD *v3; // r13\n  _QWORD *v4; // r12\n  _QWORD *v5; // rbp\n  _QWORD *v6; // rbx\n  _QWORD *v7; // ST18_8\n\n  if ( !byte_265570 )\n  {\n    v1 = sub_133A0(\"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff\");\n    v2 = sub_133A0(\"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\");\n    v3 = sub_133A0(\"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n    v4 = sub_133A0(\"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\");\n    v5 = sub_133A0(\"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\");\n    v6 = sub_133A0(\"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\");\n    v7 = sub_12FA0(3LL);\n    sub_32C40(&unk_265520, (__int64)v1, (__int64)v2, (__int64)v3, (__int64)v7, (__int64)v4, (__int64)v5, (__int64)v6);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    sub_12FF0(v5);\n    sub_12FF0(v6);\n    sub_12FF0(v7);\n    byte_265570 = 1;\n    qword_265528 = (__int64)\"nistp256\";\n    qword_265530 = (__int64)\"nistp256\";\n  }\n  return &unk_265520;\n}\n", 
            "funcStartAddr": "0x34b10L", 
            "funcEndAddr": "0x34c2bL", 
            "funcName": "sub_34B10"
        }, 
        {
            "decompiledFuncCode": "void *sub_34C30()\n{\n  _QWORD *v1; // r15\n  _QWORD *v2; // r14\n  _QWORD *v3; // r13\n  _QWORD *v4; // r12\n  _QWORD *v5; // rbp\n  _QWORD *v6; // rbx\n  _QWORD *v7; // ST18_8\n\n  if ( !byte_265510 )\n  {\n    v1 = sub_133A0(\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff\");\n    v2 = sub_133A0(\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc\");\n    v3 = sub_133A0(\"b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\");\n    v4 = sub_133A0(\"aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\");\n    v5 = sub_133A0(\"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\");\n    v6 = sub_133A0(\"ffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973\");\n    v7 = sub_12FA0(19LL);\n    sub_32C40(&unk_2654C0, (__int64)v1, (__int64)v2, (__int64)v3, (__int64)v7, (__int64)v4, (__int64)v5, (__int64)v6);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    sub_12FF0(v5);\n    sub_12FF0(v6);\n    sub_12FF0(v7);\n    byte_265510 = 1;\n    qword_2654C8 = (__int64)\"nistp384\";\n    qword_2654D0 = (__int64)\"nistp384\";\n  }\n  return &unk_2654C0;\n}\n", 
            "funcStartAddr": "0x34c30L", 
            "funcEndAddr": "0x34d4bL", 
            "funcName": "sub_34C30"
        }, 
        {
            "decompiledFuncCode": "void *sub_34D50()\n{\n  _QWORD *v1; // r15\n  _QWORD *v2; // r14\n  _QWORD *v3; // r13\n  _QWORD *v4; // r12\n  _QWORD *v5; // rbp\n  _QWORD *v6; // rbx\n  _QWORD *v7; // ST18_8\n\n  if ( !byte_2654B0 )\n  {\n    v1 = sub_133A0(\n           \"01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n           \"fffffffffffffffffffffff\");\n    v2 = sub_133A0(\n           \"01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n           \"ffffffffffffffffffffffc\");\n    v3 = sub_133A0(\n           \"0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883\"\n           \"d2c34f1ef451fd46b503f00\");\n    v4 = sub_133A0(\n           \"00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c18\"\n           \"56a429bf97e7e31c2e5bd66\");\n    v5 = sub_133A0(\n           \"011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a\"\n           \"272c24088be94769fd16650\");\n    v6 = sub_133A0(\n           \"01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b88\"\n           \"99c47aebb6fb71e91386409\");\n    v7 = sub_12FA0(3LL);\n    sub_32C40(&unk_265460, (__int64)v1, (__int64)v2, (__int64)v3, (__int64)v7, (__int64)v4, (__int64)v5, (__int64)v6);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    sub_12FF0(v5);\n    sub_12FF0(v6);\n    sub_12FF0(v7);\n    byte_2654B0 = 1;\n    qword_265468 = (__int64)\"nistp521\";\n    qword_265470 = (__int64)\"nistp521\";\n  }\n  return &unk_265460;\n}\n", 
            "funcStartAddr": "0x34d50L", 
            "funcEndAddr": "0x34e6bL", 
            "funcName": "sub_34D50"
        }, 
        {
            "decompiledFuncCode": "void *sub_34E70()\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // r13\n  _QWORD *v3; // r12\n  _QWORD *v4; // rbp\n\n  if ( !byte_265450 )\n  {\n    v1 = sub_133A0(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed\");\n    v2 = sub_133A0(\"0000000000000000000000000000000000000000000000000000000000076d06\");\n    v3 = sub_133A0(\"0000000000000000000000000000000000000000000000000000000000000001\");\n    v4 = sub_133A0(\"0000000000000000000000000000000000000000000000000000000000000009\");\n    sub_32630((__int64)&unk_265400, 1, (__int64)v1, 0);\n    qword_265430 = (__int64)sub_B9C0((__int64)v1, (__int64)v2, (__int64)v3);\n    dword_265440 = 3;\n    qword_265438 = (__int64)sub_BAE0(qword_265430, (__int64)v4);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    qword_265408 = 0LL;\n    byte_265450 = 1;\n    qword_265410 = (__int64)\"Curve25519\";\n  }\n  return &unk_265400;\n}\n", 
            "funcStartAddr": "0x34e70L", 
            "funcEndAddr": "0x34f67L", 
            "funcName": "sub_34E70"
        }, 
        {
            "decompiledFuncCode": "void *sub_34F70()\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // r13\n  _QWORD *v3; // r12\n  _QWORD *v4; // rbp\n\n  if ( !byte_2653F0 )\n  {\n    v1 = sub_133A0(\n           \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n    v2 = sub_133A0(\n           \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000262a6\");\n    v3 = sub_133A0(\n           \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\");\n    v4 = sub_133A0(\n           \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005\");\n    sub_32630((__int64)&unk_2653A0, 1, (__int64)v1, 0);\n    qword_2653D0 = (__int64)sub_B9C0((__int64)v1, (__int64)v2, (__int64)v3);\n    dword_2653E0 = 2;\n    qword_2653D8 = (__int64)sub_BAE0(qword_2653D0, (__int64)v4);\n    sub_12FF0(v1);\n    sub_12FF0(v2);\n    sub_12FF0(v3);\n    sub_12FF0(v4);\n    qword_2653A8 = 0LL;\n    byte_2653F0 = 1;\n    qword_2653B0 = (__int64)\"Curve448\";\n  }\n  return &unk_2653A0;\n}\n", 
            "funcStartAddr": "0x34f70L", 
            "funcEndAddr": "0x35067L", 
            "funcName": "sub_34F70"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_35070(unsigned __int64 *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rbx\n  unsigned __int64 *v4; // rbp\n  __int64 *v5; // rbx\n\n  v2 = (**(__int64 (***)(void))(a2 + 120))();\n  if ( *(_DWORD *)v2 )\n    __assert_fail(\"curve->type == EC_WEIERSTRASS\", aSsh, 0x15Au, \"ecdsa_public\");\n  v3 = v2;\n  v4 = sub_15EB0(a1, *(__int64 **)(v2 + 40));\n  v5 = sub_B620(*(_QWORD **)(v3 + 56), (__int64)v4);\n  sub_12FF0(v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x35070L", 
            "funcEndAddr": "0x350d7L", 
            "funcName": "sub_35070"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_350E0(unsigned __int64 *a1, __int64 a2)\n{\n  __int64 v2; // r14\n  _DWORD *v3; // rax\n  __int64 v4; // r12\n  __int64 v5; // rax\n  __int64 (__fastcall ***v6)(_QWORD, char *, signed __int64); // rbp\n  unsigned __int64 v7; // rbx\n  unsigned __int64 v8; // rsi\n  char v9; // al\n  unsigned __int64 *v10; // rbx\n  __int64 *v11; // rbp\n  __int64 v13; // [rsp+0h] [rbp-A8h]\n  unsigned __int64 v14; // [rsp+78h] [rbp-30h]\n\n  v2 = *(_QWORD *)(a2 + 120);\n  v14 = __readfsqword(0x28u);\n  v3 = (_DWORD *)(*(__int64 (**)(void))v2)();\n  if ( *v3 != 2 )\n    __assert_fail(\"curve->type == EC_EDWARDS\", aSsh, 0x181u, \"eddsa_public\");\n  v4 = (__int64)v3;\n  v5 = (**(__int64 (__fastcall ***)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 8));\n  v6 = (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))v5;\n  if ( v5 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);\n  if ( *(_QWORD *)(v4 + 32) )\n  {\n    v7 = 0LL;\n    do\n    {\n      v8 = v7++;\n      v9 = sub_133D0(a1, v8);\n      sub_10CD0(v6[1], v9);\n    }\n    while ( *(_QWORD *)(v4 + 32) > v7 );\n  }\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64), __int64 *))(*v6)[3])(v6, &v13);\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64)))(*v6)[4])(v6);\n  v10 = sub_33370((__int64)&v13, *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40LL), v4);\n  v11 = sub_C860(*(_QWORD **)(v4 + 56), (__int64)v10);\n  sub_12FF0(v10);\n  return v11;\n}\n", 
            "funcStartAddr": "0x350e0L", 
            "funcEndAddr": "0x351eeL", 
            "funcName": "sub_350E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_351F0(__int64 a1)\n{\n  return *(_QWORD *)((**(__int64 (***)(void))(a1 + 32))() + 16);\n}\n", 
            "funcStartAddr": "0x351f0L", 
            "funcEndAddr": "0x35203L", 
            "funcName": "sub_351F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35270(_QWORD **a1)\n{\n  sub_12FF0(a1[2]);\n  ((void (__fastcall *)(_QWORD **))(*a1)[2])(a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x35270L", 
            "funcEndAddr": "0x3528fL", 
            "funcName": "sub_35270"
        }, 
        {
            "decompiledFuncCode": "__int64 (__fastcall **__fastcall sub_35290(int a1, const void *a2, _QWORD *a3))()\n{\n  __int64 v3; // rbx\n  __int64 (__fastcall **v4)(); // r12\n  __int64 (__fastcall **v5)(); // rbp\n  _QWORD *v7; // [rsp+8h] [rbp-40h]\n\n  v3 = 0LL;\n  v4 = off_2618A0;\n  v5 = off_260760;\n  v7 = a3;\n  if ( a1 == 8 )\n    goto LABEL_4;\n  while ( 1 )\n  {\n    ++v3;\n    if ( v3 == 3 )\n      break;\n    v5 = (__int64 (__fastcall **)())off_260460[v3];\n    v4 = (__int64 (__fastcall **)())v5[15];\n    if ( a1 == *((_DWORD *)v4 + 6) )\n    {\nLABEL_4:\n      if ( !memcmp(a2, v4[2], a1) )\n      {\n        *v7 = ((__int64 (__fastcall *)(const void *))*v4)(a2);\n        return v5;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x35290L", 
            "funcEndAddr": "0x35324L", 
            "funcName": "sub_35290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35330(__int64 a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  int v3; // edx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 120);\n  v3 = *(_DWORD *)(v2 + 24);\n  result = *(_QWORD *)(v2 + 16);\n  *a2 = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x35330L", 
            "funcEndAddr": "0x3533eL", 
            "funcName": "sub_35330"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_35340(int a1, void **a2, _QWORD *a3)\n{\n  signed __int64 result; // rax\n\n  switch ( a1 )\n  {\n    case 384:\n      *a3 = off_2606C0;\n      *a2 = sub_34C30();\n      result = 1LL;\n      break;\n    case 521:\n      *a3 = off_260620;\n      *a2 = sub_34D50();\n      result = 1LL;\n      break;\n    case 256:\n      *a3 = off_260760;\n      *a2 = sub_34B10();\n      result = 1LL;\n      break;\n    default:\n      result = 0LL;\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x35340L", 
            "funcEndAddr": "0x353d1L", 
            "funcName": "sub_35340"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_353E0(signed int a1, void **a2, _QWORD *a3)\n{\n  if ( a1 < 255 )\n    return 0LL;\n  if ( a1 > 256 )\n  {\n    if ( a1 == 448 )\n    {\n      *a3 = off_260800;\n      *a2 = sub_349B0();\n      return 1LL;\n    }\n    return 0LL;\n  }\n  *a3 = off_2608A0;\n  *a2 = sub_34850();\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x353e0L", 
            "funcEndAddr": "0x35449L", 
            "funcName": "sub_353E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35450(__int64 a1, int a2)\n{\n  char v2; // al\n  unsigned int v3; // edx\n  unsigned __int64 *v4; // rbp\n  __int64 *v5; // rax\n\n  v2 = sub_35340(a2, (void **)a1, (_QWORD *)(a1 + 24));\n  v3 = 0;\n  if ( v2 )\n  {\n    v4 = sub_12FA0(1LL);\n    *(_QWORD *)(a1 + 16) = sub_16DD0(\n                             v4,\n                             *(unsigned __int64 **)(*(_QWORD *)a1 + 64LL),\n                             (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n    sub_12FF0(v4);\n    v5 = sub_35070(*(unsigned __int64 **)(a1 + 16), *(_QWORD *)(a1 + 24));\n    v3 = 1;\n    *(_QWORD *)(a1 + 8) = v5;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x35450L", 
            "funcEndAddr": "0x354bbL", 
            "funcName": "sub_35450"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_354C0(__int64 a1, signed int a2)\n{\n  char v2; // al\n  unsigned int v3; // edx\n  unsigned __int64 *v4; // rax\n  __int64 v5; // rsi\n  __int64 *v6; // rax\n\n  v2 = sub_353E0(a2, (void **)a1, (_QWORD *)(a1 + 24));\n  v3 = 0;\n  if ( v2 )\n  {\n    v4 = sub_16D00(a2, (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n    v5 = *(_QWORD *)(a1 + 24);\n    *(_QWORD *)(a1 + 16) = v4;\n    v6 = sub_350E0(v4, v5);\n    v3 = 1;\n    *(_QWORD *)(a1 + 8) = v6;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x354c0L", 
            "funcEndAddr": "0x35510L", 
            "funcName": "sub_354C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35510(__int64 a1)\n{\n  return (*(__int64 (__fastcall **)(_QWORD, _QWORD))(**(_QWORD **)(a1 - 24) + 16LL))(\n           *(_QWORD *)(a1 - 24),\n           *(_QWORD *)(a1 - 32));\n}\n", 
            "funcStartAddr": "0x35510L", 
            "funcEndAddr": "0x35524L", 
            "funcName": "sub_35510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35530(__int64 a1)\n{\n  return **(_QWORD **)(a1 - 8);\n}\n", 
            "funcStartAddr": "0x35530L", 
            "funcEndAddr": "0x35538L", 
            "funcName": "sub_35530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35540(__int64 a1, void *a2)\n{\n  void *v2; // r13\n  _QWORD *v3; // r12\n  __int64 v4; // r14\n  __int64 v5; // rbp\n  _QWORD *v6; // r12\n  __int64 (***v7)(void); // rbp\n  __int64 v8; // rsi\n  __int64 v9; // rdx\n\n  v2 = a2;\n  v3 = *(_QWORD **)(a1 - 24);\n  v4 = *(_QWORD *)(a1 - 16);\n  v5 = (*(__int64 (__fastcall **)(_QWORD))*v3)(*v3);\n  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v5 + 16LL))(v5, v3);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 24LL))(v5, v4);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 32LL))(v5);\n  v6 = *(_QWORD **)(a1 - 40);\n  v7 = (__int64 (***)(void))(*(__int64 (__fastcall **)(_QWORD))*v6)(*v6);\n  ((void (__fastcall *)(__int64 (***)(void), _QWORD *))(*v7)[2])(v7, v6);\n  v8 = *(_QWORD *)(a1 - 16);\n  v9 = *(_QWORD *)(*(_QWORD *)(a1 - 48) + 40LL);\n  sub_10C10(v7[1]);\n  ((void (__fastcall *)(__int64 (***)(void), _QWORD))(*v7)[3])(v7, *(_QWORD *)(a1 - 16));\n  ((void (__fastcall *)(__int64 (***)(void)))(*v7)[4])(v7);\n  memcpy(v2, *(const void **)(a1 - 16), *(signed int *)(*(_QWORD *)a1 + 64LL));\n  return sub_47E30(*(_QWORD *)(a1 - 16), *(_QWORD *)(*(_QWORD *)(a1 - 48) + 40LL));\n}\n", 
            "funcStartAddr": "0x35540L", 
            "funcEndAddr": "0x355faL", 
            "funcName": "sub_35540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_35600(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  __int64 v3; // r12\n  unsigned __int64 v4; // rbp\n  char *v5; // r13\n  char *v6; // r15\n  char v7; // si\n  unsigned __int64 v8; // r14\n  char *v9; // r14\n  char v10; // al\n  __int64 result; // rax\n  __int64 v12; // rsi\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  if ( *(_QWORD *)(*(_QWORD *)(a1 - 48) + 48LL) < a3 )\n  {\n    v3 = sub_47410(a1, a2);\n    v12 = *(_QWORD *)(*(_QWORD *)(a1 - 48) + 40LL);\n    sub_472D0(v3);\n    sub_20450(*(__int64 (***)(void))(a1 - 48), (__int64)v5, v4, *(_QWORD *)(v3 + 8));\n    v5 = *(char **)(v3 + 8);\n    v4 = *(_QWORD *)(v3 + 16);\n  }\n  (*(void (**)(void))(**(_QWORD **)(a1 - 40) + 8LL))();\n  if ( v4 )\n  {\n    v6 = v5;\n    do\n    {\n      v7 = *v6++;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(_QWORD *)(a1 - 40) + 8LL), v7 ^ 0x5C);\n    }\n    while ( &v5[v4] != v6 );\n  }\n  if ( v4 < *(_QWORD *)(*(_QWORD *)(a1 - 48) + 48LL) )\n  {\n    v8 = v4;\n    do\n    {\n      ++v8;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(_QWORD *)(a1 - 40) + 8LL), 92);\n    }\n    while ( *(_QWORD *)(*(_QWORD *)(a1 - 48) + 48LL) > v8 );\n  }\n  (*(void (**)(void))(**(_QWORD **)(a1 - 32) + 8LL))();\n  if ( v4 )\n  {\n    v9 = &v5[v4];\n    do\n    {\n      v10 = *v5++;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(_QWORD *)(a1 - 32) + 8LL), v10 ^ 0x36);\n    }\n    while ( v5 != v9 );\n  }\n  for ( result = *(_QWORD *)(a1 - 48); *(_QWORD *)(result + 48) > v4; result = *(_QWORD *)(a1 - 48) )\n  {\n    ++v4;\n    sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(_QWORD *)(a1 - 32) + 8LL), 54);\n  }\n  if ( v3 )\n    result = sub_47420(v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x35600L", 
            "funcEndAddr": "0x3576bL", 
            "funcName": "sub_35600"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35770(__int64 a1)\n{\n  (*(void (**)(void))(**(_QWORD **)(a1 - 40) + 32LL))();\n  (*(void (**)(void))(**(_QWORD **)(a1 - 32) + 32LL))();\n  (*(void (**)(void))(**(_QWORD **)(a1 - 24) + 32LL))();\n  sub_47E30(*(_QWORD *)(a1 - 16), *(_QWORD *)(*(_QWORD *)(a1 - 48) + 40LL));\n  sub_114C0(*(void **)(a1 - 16));\n  sub_47420(*(_QWORD *)(a1 - 8));\n  sub_47E30(a1 - 48, 64LL);\n  sub_114C0((void *)(a1 - 48));\n}\n", 
            "funcStartAddr": "0x35770L", 
            "funcEndAddr": "0x357d9L", 
            "funcName": "sub_35770"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_357E0(__int64 a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // rax\n  _QWORD *v3; // r12\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 (__fastcall ***v6)(_QWORD); // rbp\n  __int64 (__fastcall **v7)(_QWORD); // rax\n  __int64 v8; // rax\n  __int64 v9; // rbp\n  __int64 (__fastcall **v10)(_QWORD); // rax\n  __int64 v11; // rax\n  __int64 v12; // rbp\n  __int64 (__fastcall **v13)(_QWORD); // rax\n  unsigned __int64 v14; // rdi\n  __int64 v15; // rax\n  __int64 (__fastcall **v16)(_QWORD); // rdx\n  __int64 v17; // rcx\n  __int64 (__fastcall *v18)(_QWORD); // rdx\n  __int64 v19; // rdi\n  __int64 v20; // rax\n\n  v1 = a1;\n  v2 = sub_11440(1uLL, 0x40uLL, 0LL);\n  v3 = *(_QWORD **)(a1 + 72);\n  v4 = (_QWORD *)v2;\n  v5 = (*(__int64 (__fastcall **)(_QWORD, signed __int64))*v3)(*v3, 64LL);\n  v6 = (__int64 (__fastcall ***)(_QWORD))v5;\n  if ( v5 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);\n  v7 = *v6;\n  v4[1] = v6;\n  *v4 = v7;\n  v8 = (*v7)(v7);\n  v9 = v8;\n  if ( v8 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v8 + 8LL))(v8);\n  v10 = (__int64 (__fastcall **)(_QWORD))*v4;\n  v4[2] = v9;\n  v11 = (*v10)(v10);\n  v12 = v11;\n  if ( v11 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v11 + 8LL))(v11);\n  v13 = (__int64 (__fastcall **)(_QWORD))*v4;\n  v4[3] = v12;\n  if ( !v13[6] )\n    __assert_fail(\"ctx->hashalg->blocklen\", \"sshhmac.c\", 0x28u, \"hmac_new\");\n  v14 = (unsigned __int64)v13[5];\n  v4[4] = sub_11440(v14, 1uLL, 0LL);\n  v15 = sub_47400(v14);\n  v16 = (__int64 (__fastcall **)(_QWORD))*v4;\n  v17 = v3[1];\n  v4[5] = v15;\n  v18 = v16[7];\n  sub_474E0(v15);\n  if ( v3[2] || *(_QWORD *)(*v4 + 64LL) )\n  {\n    sub_474E0(v4[5]);\n    if ( v3[2] )\n      sub_474E0(v4[5]);\n    v19 = v4[5];\n    if ( *(_QWORD *)(*v4 + 64LL) )\n    {\n      sub_474E0(v19);\n      v19 = v4[5];\n    }\n    sub_474E0(v19);\n  }\n  v20 = v4[3];\n  v4[6] = v1;\n  v4[7] = *(_QWORD *)(v20 + 8);\n  return (signed __int64)(v4 + 6);\n}\n", 
            "funcStartAddr": "0x357e0L", 
            "funcEndAddr": "0x3596fL", 
            "funcName": "sub_357E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35970(__int64 a1)\n{\n  sub_47E30(a1 - 112, 128LL);\n  sub_114C0((void *)(a1 - 112));\n}\n", 
            "funcStartAddr": "0x35970L", 
            "funcEndAddr": "0x3598bL", 
            "funcName": "sub_35970"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_35990(__int64 a1)\n{\n  __m128i v1; // xmm0\n\n  v1 = _mm_load_si128((const __m128i *)&xmmword_4F620);\n  *(_QWORD *)(a1 - 32) = 0LL;\n  *(_QWORD *)(a1 - 24) = 0LL;\n  *(__m128i *)(a1 - 112) = v1;\n}\n", 
            "funcStartAddr": "0x35990L", 
            "funcEndAddr": "0x359adL", 
            "funcName": "sub_35990"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_359B0(__m128i *a1, const __m128i *a2)\n{\n  signed __int64 result; // rax\n  __m128i v3; // xmm0\n\n  a1[-7] = _mm_loadu_si128(a2 - 7);\n  result = (signed __int64)a1[-1].m128i_i64;\n  a1[-6] = _mm_loadu_si128(a2 - 6);\n  a1[-5] = _mm_loadu_si128(a2 - 5);\n  a1[-4] = _mm_loadu_si128(a2 - 4);\n  a1[-3] = _mm_loadu_si128(a2 - 3);\n  a1[-2] = _mm_loadu_si128(a2 - 2);\n  a1[-1] = _mm_loadu_si128(a2 - 1);\n  v3 = _mm_loadu_si128(a2);\n  a1[-1].m128i_i64[1] = result;\n  *a1 = v3;\n  a1->m128i_i64[1] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x359b0L", 
            "funcEndAddr": "0x35a07L", 
            "funcName": "sub_359B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_35A10(__int64 a1)\n{\n  __int64 v1; // rax\n  signed __int64 v2; // rdx\n  signed __int64 result; // rax\n\n  v1 = sub_11440(1uLL, 0x80uLL, 0LL);\n  v2 = v1 + 96;\n  *(_QWORD *)(v1 + 112) = a1;\n  result = v1 + 112;\n  *(_QWORD *)(result - 16) = sub_35B90;\n  *(_QWORD *)(result - 8) = v2;\n  *(_QWORD *)(result + 8) = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x35a10L", 
            "funcEndAddr": "0x35a46L", 
            "funcName": "sub_35A10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_35A50(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  signed __int64 v3; // r13\n  signed __int64 v4; // rbp\n  __int64 (**v5)(void); // rdi\n  __int64 v6; // rax\n  int v7; // edx\n  __int16 v9; // [rsp+0h] [rbp-38h]\n  char v10; // [rsp+2h] [rbp-36h]\n  char v11; // [rsp+3h] [rbp-35h]\n  char v12; // [rsp+4h] [rbp-34h]\n  char v13; // [rsp+5h] [rbp-33h]\n  char v14; // [rsp+6h] [rbp-32h]\n  char v15; // [rsp+7h] [rbp-31h]\n  unsigned __int64 v16; // [rsp+8h] [rbp-30h]\n\n  v2 = a1;\n  v3 = 55LL - *(_QWORD *)(a1 - 32);\n  v16 = __readfsqword(0x28u);\n  v4 = 8LL * *(_QWORD *)(a1 - 24);\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  sub_10C30(*(void (__fastcall ***)(_QWORD, __int64 *, signed __int64))(a1 - 8), v3 & 0x3F, 0);\n  v9 = v4;\n  v5 = *(__int64 (***)(void))(a1 - 8);\n  v10 = BYTE2(v4);\n  v11 = BYTE3(v4);\n  v12 = BYTE4(v4);\n  v13 = BYTE5(v4);\n  v15 = HIBYTE(v4);\n  v14 = BYTE6(v4);\n  sub_10C10(v5);\n  sub_47E30(&v9, 8LL);\n  v6 = *(_QWORD *)(v2 - 32);\n  if ( v6 )\n    __assert_fail(\"blk->used == 0 && \\\"Should have exactly hit a block boundary\\\"\", \"sshmd5.c\", 0x61u, \"md5_block_pad\");\n  do\n  {\n    v7 = *(_DWORD *)(v2 + 4 * v6 - 112);\n    *(_WORD *)(a2 + 4 * v6) = v7;\n    *(_BYTE *)(a2 + 4 * v6 + 2) = BYTE2(v7);\n    *(_BYTE *)(a2 + 4 * v6++ + 3) = HIBYTE(v7);\n  }\n  while ( v6 != 4 );\n  return __readfsqword(0x28u) ^ v16;\n}\n", 
            "funcStartAddr": "0x35a50L", 
            "funcEndAddr": "0x35b87L", 
            "funcName": "sub_35A50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_35B90(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, unsigned __int64 a19)\n{\n  signed __int64 v19; // r13\n  char *v20; // r12\n  __int64 v21; // rbx\n  unsigned __int64 v22; // rbp\n  size_t v23; // rdi\n  const void *v24; // rsi\n  size_t v25; // r15\n  __int64 v26; // rdi\n  __int64 v27; // rax\n  int v28; // er8\n  int v29; // edi\n  unsigned int *v30; // r11\n  int v31; // esi\n  int v32; // eax\n  __int64 v33; // r14\n  unsigned int *v34; // r10\n  unsigned int v35; // er9\n  signed int v36; // ecx\n  unsigned int v37; // edx\n  unsigned int v38; // edx\n  unsigned int v39; // edx\n  unsigned int v40; // er9\n  int v41; // edi\n  int v42; // ecx\n  unsigned int *v44; // r9\n  unsigned int v45; // er8\n  unsigned int v46; // edx\n  unsigned int v47; // edx\n  unsigned int v48; // er14\n  int v49; // edi\n  int v50; // ecx\n  unsigned int *v51; // r14\n  unsigned int v52; // er8\n  unsigned int v53; // edx\n  unsigned int v54; // edx\n  unsigned int v55; // er10\n  unsigned int v56; // edx\n  int v57; // ecx\n  unsigned int v58; // er8\n  unsigned int v59; // edx\n  unsigned int v60; // edx\n  unsigned int v61; // er10\n  unsigned int v62; // edx\n  int v63; // ecx\n  int v64; // [rsp+B8h] [rbp+10h]\n  int v65; // [rsp+C0h] [rbp+18h]\n  int v66; // [rsp+C4h] [rbp+1Ch]\n\n  v19 = a1 - 80;\n  v20 = a2;\n  v21 = a1;\n  v22 = a3;\n  a19 = __readfsqword(0x28u);\n  while ( v22 )\n  {\n    v23 = *(_QWORD *)(v21 - 16);\n    while ( 1 )\n    {\n      v24 = v20;\n      v25 = 64 - v23;\n      if ( 64 - v23 > v22 )\n        v25 = v22;\n      v20 += v25;\n      v22 -= v25;\n      memcpy((void *)(v19 + v23), v24, v25);\n      v26 = *(_QWORD *)(v21 - 16);\n      *(_QWORD *)(v21 - 8) += v25;\n      v23 = v25 + v26;\n      *(_QWORD *)(v21 - 16) = v23;\n      if ( v23 == 64 )\n        break;\n      if ( !v22 )\n        return __readfsqword(0x28u) ^ a19;\n    }\n    *(_QWORD *)(v21 - 16) = 0LL;\n    v27 = 0LL;\n    do\n    {\n      *((_DWORD *)&a10 + v27) = *(_DWORD *)(v19 + 4 * v27);\n      ++v27;\n    }\n    while ( v27 != 16 );\n    v28 = *(_DWORD *)(v21 - 96);\n    v29 = *(_DWORD *)(v21 - 92);\n    v30 = (unsigned int *)&unk_4F320;\n    v31 = *(_DWORD *)(v21 - 88);\n    v32 = *(_DWORD *)(v21 - 84);\n    v33 = 0LL;\n    v34 = (unsigned int *)&unk_4F320;\n    LOBYTE(v35) = 7;\n    v36 = -680876936;\n    v64 = *(_DWORD *)(v21 - 96);\n    v65 = *(_DWORD *)(v21 - 88);\n    v66 = *(_DWORD *)(v21 - 84);\n    while ( 1 )\n    {\n      v37 = v36 + v28 + *((_DWORD *)&a10 + v33) + (v32 ^ v29 & (v32 ^ v31));\n      v28 = ((v37 >> -(char)v35) | (v37 << v35)) + v29;\n      v38 = *((_DWORD *)&a10 + v34[5]) + v34[3] + v32 + (v31 ^ v28 & (v29 ^ v31));\n      v32 = ((v38 >> -*((_BYTE *)v34 + 16)) | (v38 << v34[4])) + v28;\n      v39 = *((_DWORD *)&a10 + v34[8]) + v34[6] + v31 + (v29 ^ v32 & (v29 ^ v28));\n      v40 = v34[10];\n      v31 = ((v39 >> -*((_BYTE *)v34 + 28)) | (v39 << v34[7])) + v32;\n      v41 = *((_DWORD *)&a10 + v34[11]) + v34[9] + v29;\n      v42 = -v34[10];\n      v34 += 12;\n      v29 = (((v41 + (v28 ^ v31 & (v28 ^ (unsigned int)v32))) >> v42) | ((v41 + (v28 ^ v31 & (v28 ^ v32))) << v40))\n          + v31;\n      if ( &unk_4F3E0 == (_UNKNOWN *)v34 )\n        break;\n      v36 = *v34;\n      v35 = v34[1];\n      v33 = v34[2];\n    }\n    v44 = (unsigned int *)&unk_4F320;\n    do\n    {\n      v45 = *((_DWORD *)&a10 + v44[50]) + v44[48] + (v31 ^ v32 & (v29 ^ v31)) + v28;\n      v28 = v29 + ((v45 >> -*((_BYTE *)v44 + 196)) | (v45 << v44[49]));\n      v46 = *((_DWORD *)&a10 + v44[53]) + v44[51] + v32 + (v29 ^ v31 & (v29 ^ v28));\n      v32 = ((v46 >> -*((_BYTE *)v44 + 208)) | (v46 << v44[52])) + v28;\n      v47 = *((_DWORD *)&a10 + v44[56]) + v44[54] + v31 + (v28 ^ v29 & (v28 ^ v32));\n      v48 = v44[58];\n      v31 = ((v47 >> -*((_BYTE *)v44 + 220)) | (v47 << v44[55])) + v32;\n      v49 = *((_DWORD *)&a10 + v44[59]) + v44[57] + v29;\n      v50 = -v44[58];\n      v44 += 12;\n      v29 = (((v49 + (v32 ^ v28 & (v32 ^ (unsigned int)v31))) >> v50) | ((v49 + (v32 ^ v28 & (v32 ^ v31))) << v48))\n          + v31;\n    }\n    while ( v34 != v44 );\n    v51 = (unsigned int *)&unk_4F320;\n    do\n    {\n      v52 = *((_DWORD *)&a10 + v51[98]) + v51[96] + (v32 ^ v29 ^ v31) + v28;\n      v28 = v29 + ((v52 >> -*((_BYTE *)v51 + 388)) | (v52 << v51[97]));\n      v53 = *((_DWORD *)&a10 + v51[101]) + v51[99] + v32 + (v28 ^ v29 ^ v31);\n      v32 = ((v53 >> -*((_BYTE *)v51 + 400)) | (v53 << v51[100])) + v28;\n      v54 = *((_DWORD *)&a10 + v51[104]) + v51[102] + v31 + (v32 ^ v29 ^ v28);\n      v55 = v51[106];\n      v31 = ((v54 >> -*((_BYTE *)v51 + 412)) | (v54 << v51[103])) + v32;\n      v56 = *((_DWORD *)&a10 + v51[107]) + v51[105] + v29 + (v31 ^ v28 ^ v32);\n      v57 = -v51[106];\n      v51 += 12;\n      v29 = ((v56 >> v57) | (v56 << v55)) + v31;\n    }\n    while ( v44 != v51 );\n    do\n    {\n      v58 = *((_DWORD *)&a10 + v30[146]) + v30[144] + (v31 ^ (v29 | ~v32)) + v28;\n      v28 = v29 + ((v58 >> -*((_BYTE *)v30 + 580)) | (v58 << v30[145]));\n      v59 = *((_DWORD *)&a10 + v30[149]) + v30[147] + v32 + (v29 ^ (v28 | ~v31));\n      v32 = ((v59 >> -*((_BYTE *)v30 + 592)) | (v59 << v30[148])) + v28;\n      v60 = *((_DWORD *)&a10 + v30[152]) + v30[150] + v31 + (v28 ^ (v32 | ~v29));\n      v61 = v30[154];\n      v31 = ((v60 >> -*((_BYTE *)v30 + 604)) | (v60 << v30[151])) + v32;\n      v62 = *((_DWORD *)&a10 + v30[155]) + v30[153] + v29 + (v32 ^ (v31 | ~v28));\n      v63 = -v30[154];\n      v30 += 12;\n      v29 = ((v62 >> v63) | (v62 << v61)) + v31;\n    }\n    while ( v44 != v30 );\n    *(_DWORD *)(v21 - 92) += v29;\n    *(_DWORD *)(v21 - 88) = v65 + v31;\n    *(_DWORD *)(v21 - 96) = v64 + v28;\n    *(_DWORD *)(v21 - 84) = v66 + v32;\n    sub_47E30(&a10, 64LL);\n  }\n  return __readfsqword(0x28u) ^ a19;\n}\n", 
            "funcStartAddr": "0x35b90L", 
            "funcEndAddr": "0x3607dL", 
            "funcName": "sub_35B90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_36080()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x36080L", 
            "funcEndAddr": "0x36083L", 
            "funcName": "sub_36080"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_36090()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x36090L", 
            "funcEndAddr": "0x36093L", 
            "funcName": "sub_36090"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_360A0()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x360a0L", 
            "funcEndAddr": "0x360a3L", 
            "funcName": "sub_360A0"
        }, 
        {
            "decompiledFuncCode": "void nullsub_8()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x360b0L", 
            "funcEndAddr": "0x360b2L", 
            "funcName": "nullsub_8"
        }, 
        {
            "decompiledFuncCode": "void nullsub_9()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x360c0L", 
            "funcEndAddr": "0x360c2L", 
            "funcName": "nullsub_9"
        }, 
        {
            "decompiledFuncCode": "void nullsub_10()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x360d0L", 
            "funcEndAddr": "0x360d2L", 
            "funcName": "nullsub_10"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_360E0(__int64 a1, unsigned int *a2, __int64 a3)\n{\n  __int64 v3; // r14\n  unsigned __int64 *v4; // rax\n  __int64 *v5; // r13\n  _QWORD *v6; // rbp\n  unsigned int v7; // eax\n  int v8; // er12\n  int v9; // ebx\n\n  v3 = a3;\n  sub_18060((__int64)a2, (__int64)a2);\n  while ( 1 )\n  {\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 40LL))(v3);\n    v4 = sub_18350(a2);\n    v5 = (__int64 *)v4;\n    if ( !v4 )\n      break;\n    v6 = sub_11720((__int64)v4);\n    v7 = sub_134B0(v5);\n    v8 = sub_11950(v7);\n    if ( !v8 )\n    {\nLABEL_8:\n      sub_11830(v6);\n      break;\n    }\n    v9 = 0;\n    while ( (unsigned __int8)sub_11880(v6) )\n    {\n      if ( v8 == ++v9 )\n        goto LABEL_8;\n    }\n    sub_11830(v6);\n    sub_12FF0(v5);\n  }\n  sub_17CA0((__int64)a2);\n  return v5;\n}\n", 
            "funcStartAddr": "0x360e0L", 
            "funcEndAddr": "0x36192L", 
            "funcName": "sub_360E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_361A0(void *a1)\n{\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x361a0L", 
            "funcEndAddr": "0x361a5L", 
            "funcName": "sub_361A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_361B0(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_11440(1uLL, 8uLL, 0LL);\n  *result = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x361b0L", 
            "funcEndAddr": "0x361caL", 
            "funcName": "sub_361B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n", 
            "funcStartAddr": "0x17af0L", 
            "funcEndAddr": "0x17b67L", 
            "funcName": "sub_361D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n", 
            "funcStartAddr": "0x17af0L", 
            "funcEndAddr": "0x17b67L", 
            "funcName": "sub_361D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n", 
            "funcStartAddr": "0x17af0L", 
            "funcEndAddr": "0x17b67L", 
            "funcName": "sub_361D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n\n__int64 __fastcall sub_361D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // r12\n  void *v5; // r15\n  __int64 v6; // rax\n  unsigned __int64 v7; // r14\n  __int64 *v8; // rbp\n  __int64 v9; // r13\n  unsigned __int64 v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // r12\n  signed __int64 v15; // [rsp+0h] [rbp-48h]\n  _QWORD *v16; // [rsp+8h] [rbp-40h]\n\n  v16 = *(_QWORD **)(a1 - 8);\n  v2 = sub_47410(v16, a2);\n  v3 = sub_43200(*v16, a2, sub_16F90);\n  if ( !v3 )\n    __assert_fail(\"pr\", \"pockle.c\", 0x197u, \"pockle_mpu\");\n  v4 = v3;\n  v5 = (void *)sub_11440(v16[2], 1uLL, 0LL);\n  memset(v5, 0, v16[2]);\n  *((_BYTE *)v5 + *(_QWORD *)(v4 + 32)) = 1;\n  sub_474E0(v2);\n  sub_17130(v2, a2);\n  sub_474E0(v2);\n  v6 = v16[2];\n  v7 = v6 - 1;\n  v15 = 8 * v6 - 8;\n  while ( v7 != -1LL )\n  {\n    if ( *((_BYTE *)v5 + v7) )\n    {\n      v8 = *(__int64 **)(v16[1] + v15);\n      if ( (unsigned __int64)sub_134B0((__int64 *)*v8) <= 0x40 )\n      {\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n      }\n      else\n      {\n        if ( !v8[3] )\n          __assert_fail(\"pr->witness\", \"pockle.c\", 0x1ACu, \"pockle_mpu\");\n        v9 = 0LL;\n        v10 = 0LL;\n        sub_474E0(v2);\n        sub_17130(v2, *v8);\n        sub_474E0(v2);\n        if ( !v8[2] )\n          goto LABEL_22;\n        do\n        {\n          ++v10;\n          sub_474E0(v2);\n          sub_17130(v2, **(_QWORD **)(v8[1] + v9));\n          v11 = *(_QWORD *)(*(_QWORD *)(v8[1] + v9) + 32LL);\n          if ( v11 >= v7 )\n            __assert_fail(\"pr->factors[i]->index < index\", \"pockle.c\", 0x1B3u, \"pockle_mpu\");\n          *((_BYTE *)v5 + v11) = 1;\n          v9 += 8LL;\n          sub_474E0(v2);\n          v12 = v8[2];\n        }\n        while ( v10 < v12 );\n        if ( v12 != -1LL )\n        {\nLABEL_22:\n          v13 = 0LL;\n          do\n          {\n            ++v13;\n            sub_474E0(v2);\n            sub_17130(v2, v8[3]);\n            sub_474E0(v2);\n          }\n          while ( v8[2] + 1 > v13 );\n        }\n        sub_474E0(v2);\n      }\n    }\n    v15 -= 8LL;\n    --v7;\n  }\n  sub_114C0(v5);\n  return v2;\n}\n", 
            "funcStartAddr": "0x17af0L", 
            "funcEndAddr": "0x17b67L", 
            "funcName": "sub_361D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_361E0(__int64 a1, __int64 (__fastcall ***a2)(_QWORD), signed int a3)\n{\n  double v3; // xmm0_8\n\n  v3 = pow((double)a3, 3.62) * 0.167;\n  return (**a2)(a2);\n}\n", 
            "funcStartAddr": "0x361e0L", 
            "funcEndAddr": "0x36210L", 
            "funcName": "sub_361E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_36210(__int64 a1, __int64 a2, signed int a3)\n{\n  double x; // ST08_8\n  double v4; // xmm1_8\n  double v5; // xmm0_8\n\n  x = (double)a3;\n  v4 = (double)(signed int)sub_11950(a3);\n  v5 = pow(x, 2.58) * v4;\n  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a2 + 8LL))(a2);\n}\n", 
            "funcStartAddr": "0x36210L", 
            "funcEndAddr": "0x36299L", 
            "funcName": "sub_36210"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_362A0()\n{\n  __int64 v1; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n\n  v2 = __readfsqword(0x28u);\n  sub_3B660(&v1, 8LL);\n  return __readfsqword(0x28u) ^ v2;\n}\n", 
            "funcStartAddr": "0x362a0L", 
            "funcEndAddr": "0x36318L", 
            "funcName": "sub_362A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 *__fastcall sub_36320(__int64 a1, unsigned int *a2, __int64 a3, double a4)\n{\n  unsigned __int64 **v4; // r14\n  unsigned __int64 *v5; // r12\n  __int64 v6; // r13\n  unsigned __int64 v7; // rbx\n  unsigned __int64 *v8; // rsi\n  unsigned __int64 *v9; // rax\n  __int64 *v10; // rbp\n  __int64 *v11; // r12\n  unsigned __int64 *v12; // rbx\n  unsigned __int64 *v13; // rax\n  _QWORD *v14; // r15\n  __int64 *v15; // r12\n  unsigned __int64 *v16; // r13\n  __int64 *v17; // r12\n  __int64 v18; // rsi\n  unsigned int v19; // er13\n  unsigned __int64 *v20; // rax\n  signed __int64 *v21; // rbx\n  _QWORD *v22; // r12\n  unsigned __int64 *v23; // rbp\n  __int64 v24; // rax\n  int v25; // eax\n  _QWORD *v27; // rbp\n  signed __int64 *v28; // rax\n  unsigned int v29; // ebx\n  signed int v30; // ebp\n  unsigned int v31; // eax\n  unsigned int v32; // ecx\n  unsigned int v33; // ebp\n  unsigned int v34; // edx\n  double *v35; // r12\n  int *v36; // r15\n  unsigned __int64 v37; // rbp\n  unsigned __int64 v38; // rbx\n  double *v39; // r12\n  unsigned __int64 v40; // rdx\n  double v41; // xmm1_8\n  signed __int64 v42; // rax\n  double v43; // xmm0_8\n  double v44; // xmm0_8\n  double *v45; // rax\n  double v46; // xmm1_8\n  signed __int64 i; // rax\n  void *v48; // rax\n  unsigned __int64 v49; // r13\n  unsigned int v50; // er15\n  double *v51; // r14\n  unsigned __int64 v52; // r12\n  unsigned int v53; // ebx\n  unsigned __int64 v54; // rcx\n  double v55; // xmm0_8\n  bool v56; // cf\n  bool v57; // zf\n  signed __int64 v58; // r12\n  int v59; // edi\n  int *v60; // rbp\n  __int64 v61; // rax\n  __int64 *v62; // rax\n  __int64 *v63; // r15\n  unsigned int v64; // er13\n  int *v65; // rax\n  double v66; // [rsp+0h] [rbp-C8h]\n  _QWORD **v67; // [rsp+10h] [rbp-B8h]\n  double v68; // [rsp+18h] [rbp-B0h]\n  unsigned int v69; // [rsp+40h] [rbp-88h]\n  int *v70; // [rsp+48h] [rbp-80h]\n  __int64 v71; // [rsp+50h] [rbp-78h]\n  signed int v72; // [rsp+58h] [rbp-70h]\n  unsigned int v73; // [rsp+60h] [rbp-68h]\n  unsigned int v74; // [rsp+64h] [rbp-64h]\n  unsigned __int64 **v75; // [rsp+68h] [rbp-60h]\n  __int64 v76; // [rsp+78h] [rbp-50h]\n  unsigned __int64 v77; // [rsp+80h] [rbp-48h]\n  unsigned __int64 v78; // [rsp+88h] [rbp-40h]\n\n  v4 = (unsigned __int64 **)a2;\n  v67 = (_QWORD **)a1;\n  v71 = a3;\n  v78 = __readfsqword(0x28u);\n  v73 = sub_18490(a2);\n  if ( v73 <= 1 )\n    __assert_fail(\"bits > 1\", \"sshprime.c\", 0x14Au, \"provableprime_generate_inner\");\n  if ( v73 <= 0x20 )\n  {\n    v27 = *(_QWORD **)a1;\n    if ( (unsigned int)sub_18490(a2) > 0x20 )\n      __assert_fail(\"pcs_get_bits(pcs) <= 32\", \"sshprime.c\", 0x104u, \"primegen_small\");\n    sub_18060((__int64)a2, (__int64)a2);\n    while ( 1 )\n    {\n      v28 = (signed __int64 *)sub_18350(a2);\n      v21 = v28;\n      if ( !v28 || !(unsigned int)sub_172B0(v27, v28) )\n        break;\n      sub_12FF0(v21);\n    }\nLABEL_14:\n    sub_17CA0((__int64)v4);\n    return v21;\n  }\n  v5 = sub_12FA0(1LL);\n  v6 = sub_18510((__int64)a2, &v77);\n  if ( v77 )\n  {\n    v7 = 0LL;\n    do\n    {\n      v8 = *(unsigned __int64 **)(v6 + 8 * v7++);\n      v9 = sub_141F0(v5, v8);\n      v10 = sub_16E50(v9);\n      sub_12FF0(v5);\n      v5 = (unsigned __int64 *)v10;\n    }\n    while ( v77 > v7 );\n  }\n  else\n  {\n    v10 = (__int64 *)v5;\n  }\n  v11 = sub_184C0(v4);\n  v12 = sub_15EE0((unsigned __int64 *)v11, 3u, 0LL);\n  v13 = sub_15E80(v11, v10);\n  v14 = sub_16E50(v13);\n  sub_12FF0(v11);\n  v15 = (__int64 *)sub_140F0(v12, (unsigned __int64 *)v10);\n  sub_13A10(v15, (unsigned __int64 *)v15, 1LL);\n  v16 = sub_15E80(v15, v10);\n  sub_12FF0(v15);\n  v17 = sub_16E50(v16);\n  sub_12FF0(v12);\n  v18 = 2LL;\n  v19 = sub_184A0((__int64)v4);\n  if ( (unsigned int)sub_13FC0(v17, 2LL) )\n  {\n    v29 = (unsigned __int64)sub_134B0(v17) + 1;\n    sub_12FF0(v14);\n    sub_12FF0(v17);\n    sub_12FF0(v10);\n    if ( !v29 )\n      goto LABEL_8;\n    v30 = 20;\n    v76 = 0LL;\n    v31 = v19 >> 1;\n    if ( v19 >= 0x14 )\n      v30 = v19;\n    v32 = v19 >> 1;\n    v33 = v30 - 20;\n    if ( v29 >= v31 )\n      v32 = v29;\n    v69 = v32;\n    if ( v32 >= v33 )\n      v33 = v32;\n    v34 = **(_DWORD **)(a1 + 16);\n    if ( v34 != 1 )\n    {\n      if ( v34 < 1 )\n      {\n        v36 = (int *)sub_114E0(0LL, (unsigned __int64 *)&v76, 4uLL, 0LL, 1uLL, 0);\n        *v36 = v29;\n        v49 = 1LL;\n        goto LABEL_51;\n      }\n      if ( v34 != 2 )\n        __assert_fail(\"false && \\\"bad subprime policy\\\"\", \"sshprime.c\", 0x261u, \"provableprime_generate_inner\");\n      if ( v31 + 1 <= v33 )\n      {\n        v77 = 0LL;\n        v74 = v33 + 1;\n        v35 = 0LL;\n        v36 = 0LL;\n        v75 = v4;\n        v72 = v19;\n        do\n        {\n          sub_362A0();\n          v37 = 0LL;\n          v38 = 0LL;\n          v68 = 1.0 - a4;\n          v39 = (double *)sub_114E0(v35, &v77, 8uLL, 0LL, 1uLL, 0);\n          v40 = 0LL;\nLABEL_38:\n          v41 = 0.0;\n          v39[v40] = a4;\n          v42 = v38 + 1;\n          v38 = 0LL;\n          while ( 1 )\n          {\n            v43 = v39[v38++];\n            v41 = v41 + v43;\n            v44 = v43 + v41;\n            if ( v44 > 1.0 )\n              break;\n            if ( v38 == v42 )\n            {\n              sub_362A0();\n              a4 = v44 * v68;\n              v68 = v68 - a4;\n              v45 = (double *)sub_114E0(v39, &v77, 8uLL, v38, 1uLL, 0);\n              v39 = v45;\n              v40 = v38;\n              v46 = v45[v37 / 0xFFFFFFFFFFFFFFF8LL];\n              for ( i = (signed __int64)&v45[v38 + v37 / 8]; a4 > v46; v46 = v39[v40 - 1] )\n              {\n                *(double *)(i + 8 * v40-- - 8) = v46;\n                if ( !v40 )\n                  break;\n              }\n              v37 -= 8LL;\n              goto LABEL_38;\n            }\n          }\n          v48 = v36;\n          v49 = 0LL;\n          v50 = 0;\n          v51 = v39;\n          v52 = v38;\n          v53 = 0;\n          do\n          {\n            v54 = v49;\n            v55 = (double)v72 * v51[v49++];\n            a4 = v55 + 1.0;\n            v48 = sub_114E0(v48, (unsigned __int64 *)&v76, 4uLL, v54, 1uLL, 0);\n            v53 += (signed int)a4;\n            *((_DWORD *)v48 + v49 - 1) = (signed int)a4;\n            v50 = v50 + (signed int)a4 - 1;\n          }\n          while ( v52 > v49 );\n          v35 = v51;\n          v56 = v69 < v50;\n          v57 = v69 == v50;\n          v36 = (int *)v48;\n        }\n        while ( !v56 && !v57 || v53 > v74 );\n        v4 = v75;\n        sub_47E30(v35, 8 * v77);\n        sub_114C0(v35);\n        v29 = *v36;\n        goto LABEL_51;\n      }\n    }\n    do\n    {\n      do\n      {\n        sub_362A0();\n        a4 = pow(2.0, a4 - 1.0) * (double)(signed int)v33 + 0.5;\n        v64 = (signed int)a4;\n        v29 = (signed int)a4;\n      }\n      while ( v69 > (signed int)a4 );\n    }\n    while ( v33 < v64 );\n    v65 = (int *)sub_114E0(0LL, (unsigned __int64 *)&v76, 4uLL, 0LL, 1uLL, 0);\n    *v65 = v64;\n    v36 = v65;\n    v49 = 1LL;\nLABEL_51:\n    v58 = (signed __int64)&v36[v49];\n    v59 = v29;\n    v60 = v36 + 1;\n    v70 = v36;\n    v66 = 0.0;\n    while ( 1 )\n    {\n      v61 = sub_17C90(v59);\n      v62 = (__int64 *)sub_36320(v67, v61, v71);\n      v63 = v62;\n      v66 = (double)v59 / (double)(signed int)v73 + v66;\n      if ( !v62 )\n        __assert_fail(\"q\", \"sshprime.c\", 0x26Cu, \"provableprime_generate_inner\");\n      sub_17FC0((__int64)v4, v62);\n      sub_12FF0(v63);\n      if ( v60 == (int *)v58 )\n        break;\n      v59 = *v60;\n      ++v60;\n    }\n    v18 = 4 * v76;\n    sub_47E30(v70, 4 * v76);\n    sub_114C0(v70);\n    goto LABEL_8;\n  }\n  sub_12FF0(v14);\n  sub_12FF0(v17);\n  sub_12FF0(v10);\nLABEL_8:\n  sub_18060((__int64)v4, v18);\nLABEL_9:\n  v20 = sub_18350((unsigned int *)v4);\n  v21 = (signed __int64 *)v20;\n  if ( !v20 )\n    goto LABEL_14;\n  while ( 1 )\n  {\n    v22 = sub_11720((__int64)v20);\n    v23 = (unsigned __int64 *)sub_118C0(v22);\n    sub_11830(v22);\n    if ( !v23 )\n    {\n      sub_12FF0(v21);\n      goto LABEL_9;\n    }\n    v24 = sub_18510((__int64)v4, &v77);\n    v25 = sub_17360(*v67, v21, v24, v77, v23);\n    if ( !v25 )\n      break;\n    if ( (unsigned int)(v25 - 8) > 2 )\n      __assert_fail(\n        \"st == POCKLE_DISCRIMINANT_IS_SQUARE || st == POCKLE_WITNESS_POWER_IS_1 || st == POCKLE_WITNESS_POWER_NOT_COPRIME\",\n        \"sshprime.c\",\n        0x2A2u,\n        \"provableprime_generate_inner\");\n    sub_12FF0(v21);\n    sub_12FF0(v23);\n    v20 = sub_18350((unsigned int *)v4);\n    v21 = (signed __int64 *)v20;\n    if ( !v20 )\n      goto LABEL_14;\n  }\n  sub_12FF0(v23);\n  sub_17CA0((__int64)v4);\n  (*(void (__fastcall **)(__int64, signed __int64 *))(*(_QWORD *)v71 + 32LL))(v71, v21);\n  return v21;\n}\n", 
            "funcStartAddr": "0x36320L", 
            "funcEndAddr": "0x36b46L", 
            "funcName": "sub_36320"
        }, 
        {
            "decompiledFuncCode": "signed __int64 *__fastcall sub_36B50(__int64 a1, unsigned int *a2, __int64 a3)\n{\n  return sub_36320(a1 - 8, a2, a3, 0.0);\n}\n", 
            "funcStartAddr": "0x36b50L", 
            "funcEndAddr": "0x36b65L", 
            "funcName": "sub_36B50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_36B70(__int64 a1)\n{\n  sub_17260(*(__int64 **)(a1 - 8));\n  sub_114C0((void *)(a1 - 8));\n}\n", 
            "funcStartAddr": "0x36b70L", 
            "funcEndAddr": "0x36b87L", 
            "funcName": "sub_36B70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_36B90(__int64 a1)\n{\n  _QWORD *v1; // rax\n  _QWORD *v2; // rbx\n\n  v1 = (_QWORD *)sub_11440(1uLL, 0x18uLL, 0LL);\n  v2 = v1;\n  v1[1] = a1;\n  *v1 = sub_17180();\n  v2[2] = *(_QWORD *)(a1 + 40);\n  return (signed __int64)(v2 + 1);\n}\n", 
            "funcStartAddr": "0x36b90L", 
            "funcEndAddr": "0x36bccL", 
            "funcName": "sub_36B90"
        }, 
        {
            "decompiledFuncCode": "void nullsub_11()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x36bd0L", 
            "funcEndAddr": "0x36bd2L", 
            "funcName": "nullsub_11"
        }, 
        {
            "decompiledFuncCode": "void nullsub_12()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x36be0L", 
            "funcEndAddr": "0x36be2L", 
            "funcName": "nullsub_12"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_36BF0(signed int a1)\n{\n  pow((double)a1, 2.58);\n}\n", 
            "funcStartAddr": "0x36bf0L", 
            "funcEndAddr": "0x36c08L", 
            "funcName": "sub_36BF0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_36C50(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n  signed __int64 v3; // r14\n  _QWORD *v4; // r12\n  __int64 *v5; // rbp\n  signed __int64 v6; // r13\n  __int64 v7; // rax\n  __int64 v8; // rbx\n\n  v1 = a1;\n  v2 = sub_11440(1uLL, 0x1A0uLL, 0LL);\n  v3 = v2 + 8;\n  v4 = (_QWORD *)v2;\n  *(_QWORD *)v2 = 0LL;\n  *(_QWORD *)(v2 + 408) = 0LL;\n  v5 = (__int64 *)(v2 + 136);\n  v6 = v2 + 392;\n  memset(\n    (void *)((v2 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v2 - (((_DWORD)v2 + 8) & 0xFFFFFFF8) + 416) >> 3));\n  *(_OWORD *)(v2 + 40) = 0LL;\n  *(_QWORD *)(v2 + 24) = a1;\n  *(_QWORD *)(v2 + 56) = 0LL;\n  *(_QWORD *)(v2 + 32) = 0LL;\n  do\n  {\n    v7 = (*(__int64 (__fastcall **)(__int64, signed __int64))v1)(v1, 416LL);\n    v8 = v7;\n    if ( v7 )\n      (*(void (__fastcall **)(__int64))(*(_QWORD *)v7 + 8LL))(v7);\n    *v5 = v8;\n    ++v5;\n    v1 = v4[3];\n  }\n  while ( (__int64 *)v6 != v5 );\n  v4[49] = 0LL;\n  v4[2] = v3;\n  v4[1] = sub_36C10;\n  *v4 = 4LL * *(_QWORD *)(v1 + 40);\n  return v4;\n}\n", 
            "funcStartAddr": "0x36c50L", 
            "funcEndAddr": "0x36d35L", 
            "funcName": "sub_36C50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_36D40(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  signed __int64 v2; // rbp\n  __int64 *v3; // rbx\n  __int64 v4; // rdi\n  __int64 v5; // rdi\n  __int64 v6; // rdi\n\n  v1 = a1;\n  v2 = (signed __int64)(a1 + 49);\n  v3 = a1 + 17;\n  sub_47E30(a1 + 5, 16LL);\n  do\n  {\n    v4 = *v3;\n    ++v3;\n    (*(void (__fastcall **)(__int64, signed __int64))(*(_QWORD *)v4 + 32LL))(v4, 16LL);\n  }\n  while ( v3 != (__int64 *)v2 );\n  v5 = v1[4];\n  if ( v5 )\n    (*(void (**)(void))(*(_QWORD *)v5 + 32LL))();\n  v6 = v1[7];\n  if ( v6 )\n    (*(void (**)(void))(*(_QWORD *)v6 + 32LL))();\n  sub_47E30(v1, 416LL);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x36d40L", 
            "funcEndAddr": "0x36db3L", 
            "funcName": "sub_36D40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_36DC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rax\n\n  if ( *(_QWORD *)(a1 + 56) )\n    __assert_fail(\"!pi->keymaker\", \"sshprng.c\", 0x92u, \"prng_seed_begin\");\n  v1 = *(_QWORD *)(a1 + 32);\n  if ( v1 )\n  {\n    *(_QWORD *)(a1 + 56) = v1;\n    *(_QWORD *)(a1 + 32) = 0LL;\n  }\n  else\n  {\n    v2 = (**(__int64 (__fastcall ***)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 24));\n    v1 = v2;\n    if ( v2 )\n      (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 8LL))(v2);\n    *(_QWORD *)(a1 + 56) = v1;\n  }\n  return sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v1 + 8), 82);\n}\n", 
            "funcStartAddr": "0x36dc0L", 
            "funcEndAddr": "0x36e3dL", 
            "funcName": "sub_36DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_36E40(__int64 a1)\n{\n  __int64 v1; // rbp\n  _QWORD *v2; // rbx\n  bool v3; // zf\n  __int64 v4; // rax\n  __int64 v5; // rbp\n  __int64 v6; // rax\n  __int64 (**v7)(void); // rdi\n  __int64 v8; // rdx\n  __int64 result; // rax\n  unsigned __int64 v10; // rt1\n  __int64 v11; // [rsp+0h] [rbp-98h]\n  unsigned __int64 v12; // [rsp+78h] [rbp-20h]\n\n  v1 = *(_QWORD *)(a1 + 56);\n  v12 = __readfsqword(0x28u);\n  if ( !v1 )\n    __assert_fail(\"pi->keymaker\", \"sshprng.c\", 0xB2u, \"prng_seed_finish\");\n  v2 = (_QWORD *)a1;\n  (*(void (__fastcall **)(__int64, __int64 *))(*(_QWORD *)v1 + 24LL))(v1, &v11);\n  (*(void (__fastcall **)(__int64))(*(_QWORD *)v1 + 32LL))(v1);\n  v3 = *(_QWORD *)(a1 + 32) == 0LL;\n  *(_QWORD *)(a1 + 56) = 0LL;\n  if ( !v3 )\n    goto LABEL_11;\n  v4 = (**(__int64 (__fastcall ***)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 24));\n  v5 = v4;\n  if ( v4 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(__int64 (***)(void))(v5 + 8);\n  v2[4] = v5;\n  v8 = *(_QWORD *)(v6 + 40);\n  sub_10C10(v7);\n  v2[49] = 64LL;\n  v2[51] = sub_45000(v7, &v11);\n  sub_47E30(&v11, 114LL);\n  v10 = __readfsqword(0x28u);\n  result = v10 ^ v12;\n  if ( v10 != v12 )\nLABEL_11:\n    __assert_fail(\"!pi->generator\", \"sshprng.c\", 0xC0u, \"prng_seed_finish\");\n  return result;\n}\n", 
            "funcStartAddr": "0x36e40L", 
            "funcEndAddr": "0x36f47L", 
            "funcName": "sub_36E40"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_36F50(_QWORD *a1, char *a2, size_t a3)\n{\n  _QWORD *v3; // rbx\n  size_t i; // rbp\n  _QWORD *v5; // r12\n  __int64 (__fastcall ***v6)(_QWORD, char *, signed __int64); // r15\n  _QWORD *v7; // rsi\n  unsigned int v8; // er12\n  char v9; // cl\n  __int64 v10; // rdx\n  __int64 v11; // r13\n  __int64 (__fastcall **v12)(_QWORD, char *, signed __int64); // rdx\n  __int64 (__fastcall **v13)(_QWORD, char *, signed __int64); // rdx\n  __int64 (__fastcall ***v14)(_QWORD, char *, signed __int64); // rdi\n  size_t v15; // r15\n  __int64 v16; // rax\n  char *dest; // [rsp+0h] [rbp-C8h]\n  char v19; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v20; // [rsp+88h] [rbp-40h]\n\n  v20 = __readfsqword(0x28u);\n  dest = a2;\n  if ( a1[7] )\n    __assert_fail(\"!pi->keymaker\", \"sshprng.c\", 0xDDu, \"prng_read\");\n  v3 = a1;\n  for ( i = a3; i; dest = (char *)memcpy(dest, &v19, v15) + v15 )\n  {\n    v5 = (_QWORD *)v3[4];\n    v6 = (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(*(__int64 (__fastcall **)(_QWORD))*v5)(*v5);\n    v7 = v5;\n    v8 = 0;\n    ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64), _QWORD *))(*v6)[2])(v6, v7);\n    sub_10CD0(v6[1], 71);\n    do\n    {\n      v9 = v8;\n      v10 = v8 >> 6;\n      v8 += 8;\n      sub_10CD0(v6[1], v3[v10 + 5] >> v9);\n    }\n    while ( v8 != 128 );\n    v11 = v3[5];\n    v3[5] = v11 + 1;\n    v12 = *v6;\n    v3[6] += __CFADD__(v11, 1LL);\n    ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64), char *))v12[3])(v6, &v19);\n    v13 = *v6;\n    v14 = v6;\n    v15 = i;\n    ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64)))v13[4])(v14);\n    v16 = v3[3];\n    if ( *(_QWORD *)(v16 + 40) <= i )\n      v15 = *(_QWORD *)(v16 + 40);\n    i -= v15;\n  }\n  sub_47E30(&v19, 114LL);\n  sub_36DC0((__int64)v3);\n  sub_36E40((__int64)v3);\n  return __readfsqword(0x28u) ^ v20;\n}\n", 
            "funcStartAddr": "0x36f50L", 
            "funcEndAddr": "0x370d3L", 
            "funcName": "sub_36F50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_372E0(const char *a1, _DWORD *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned int v3; // edx\n  _BYTE *v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+8h] [rbp-20h]\n\n  v6 = __readfsqword(0x28u);\n  v2 = strtoul(a1, &v5, 10);\n  v3 = 0;\n  if ( *a1 )\n  {\n    v3 = (unsigned int)v5;\n    LOBYTE(v3) = v2 <= 0xFFFFFFFF && *v5 == 0;\n    if ( (_BYTE)v3 )\n      *a2 = v2;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x372e0L", 
            "funcEndAddr": "0x37352L", 
            "funcName": "sub_372E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_37360(const char *a1)\n{\n  unsigned __int64 result; // rax\n  _BYTE *v2; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n\n  v3 = __readfsqword(0x28u);\n  result = strtoul(a1, &v2, 10);\n  if ( !*a1 || *v2 || result > 0x1554 )\n    result = 0xFFFFFFFFLL;\n  return result;\n}\n", 
            "funcStartAddr": "0x37360L", 
            "funcEndAddr": "0x373c4L", 
            "funcName": "sub_37360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_373D0(char *s, __int64 a2, int a3)\n{\n  __int64 v3; // r12\n  int v4; // ebp\n  char *v5; // rax\n  signed __int64 v6; // rdx\n  const char *v7; // r9\n  signed __int64 v8; // rsi\n  const char *v9; // r15\n  signed __int64 v10; // rbx\n  size_t v11; // rax\n  unsigned int v12; // eax\n  _BYTE *v13; // r15\n  int v14; // er14\n  _BYTE *v15; // rdx\n  unsigned int v16; // ebx\n  __int64 v17; // rdi\n  unsigned int v18; // eax\n  const char *src; // [rsp+0h] [rbp-78h]\n  __int64 v21; // [rsp+8h] [rbp-70h]\n  __int64 v22; // [rsp+10h] [rbp-68h]\n  __int64 v23; // [rsp+18h] [rbp-60h]\n  __int64 v24; // [rsp+20h] [rbp-58h]\n  int v25; // [rsp+28h] [rbp-50h]\n  __int64 *v26; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v27; // [rsp+38h] [rbp-40h]\n\n  v3 = a2;\n  v4 = a3;\n  src = s;\n  v22 = a2;\n  v27 = __readfsqword(0x28u);\n  v23 = 0LL;\n  v25 = 0;\n  v24 = a3;\n  v26 = &v22;\n  v5 = sub_111C0((__int64)&v22);\n  v7 = \"INVALID-ALGORITHM\";\n  v8 = 17LL;\n  if ( !*((_DWORD *)v26 + 6) )\n  {\n    v8 = v6;\n    if ( !*((_DWORD *)v26 + 6) )\n      v7 = v5;\n  }\n  v9 = v7;\n  v10 = 4 * ((v4 + 2) / 3) + 3LL;\n  if ( !s )\n  {\n    v21 = sub_11440(v10 + v8, 1uLL, 0LL);\n    v18 = sub_470B0(v8, 1LL);\n    v13 = (_BYTE *)(v21 + (signed int)__sprintf_chk(v21, 1LL, -1LL, \"%.*s \", v18, v9));\n    if ( v4 <= 0 )\n      goto LABEL_13;\n    goto LABEL_6;\n  }\n  v11 = strlen(s);\n  v21 = sub_11440(v11 + v10 + v8, 1uLL, 0LL);\n  v12 = sub_470B0(v8, 1LL);\n  v13 = (_BYTE *)(v21 + (signed int)__sprintf_chk(v21, 1LL, -1LL, \"%.*s \", v12, v9));\n  if ( v4 > 0 )\n  {\nLABEL_6:\n    v14 = 0;\n    do\n    {\n      v15 = v13;\n      v16 = v4 - v14;\n      if ( v4 - v14 > 3 )\n        v16 = 3;\n      v17 = v3 + v14;\n      v13 += 4;\n      v14 += v16;\n      sub_47800(v17, v16, v15);\n    }\n    while ( v4 > v14 );\n    if ( src )\n      goto LABEL_11;\nLABEL_13:\n    *v13 = 0;\n    return v21;\n  }\nLABEL_11:\n  *v13 = 32;\n  strcpy(v13 + 1, src);\n  return v21;\n}\n", 
            "funcStartAddr": "0x373d0L", 
            "funcEndAddr": "0x3759fL", 
            "funcName": "sub_373D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_375A0(__int64 *a1, _BYTE *a2)\n{\n  _BYTE *i; // rbx\n  char v3; // al\n\n  for ( i = a2; ; *(i - 1) = v3 )\n  {\n    v3 = sub_11070(*a1);\n    if ( v3 == 10 || v3 == 13 || *(_DWORD *)(*a1 + 24) )\n      return 0LL;\n    if ( v3 == 58 )\n      break;\n    if ( i == a2 + 39 )\n      return 0LL;\n    ++i;\n  }\n  if ( (unsigned __int8)sub_11070(*a1) != 32 )\n    return 0LL;\n  *i = 0;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x375a0L", 
            "funcEndAddr": "0x37603L", 
            "funcName": "sub_375A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_37610(__int64 *a1, __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n  char *v4; // rax\n  __int64 v5; // rdx\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = sub_11030(*a1, a3);\n  if ( *(_DWORD *)(*a1 + 24) )\n    result = 0LL;\n  else\n    result = (unsigned int)sub_47F00(a2, v3, v4, v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x37610L", 
            "funcEndAddr": "0x3765aL", 
            "funcName": "sub_37610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_37660(__int64 a1, _QWORD *a2, char a3, __int64 *a4, char *a5, _QWORD *a6)\n{\n  char v6; // r14\n  _QWORD *v7; // r13\n  _QWORD *v8; // rbp\n  __int64 v9; // rbx\n  __int64 *v10; // r12\n  unsigned int v11; // er15\n  __int64 v13; // rdi\n  unsigned __int8 v14; // al\n  char *v15; // rax\n  size_t v16; // rdx\n  char *v17; // r8\n  int v18; // ecx\n  int v19; // ST1C_4\n  size_t v20; // ST10_8\n  char *v21; // ST08_8\n  __int64 v22; // rax\n  size_t v23; // rsi\n  __int64 v24; // rdi\n  unsigned __int64 v25; // ST08_8\n  __int64 v26; // r12\n  __int64 v27; // rax\n  __int64 v28; // rdx\n  __int64 v29; // rax\n  char v30; // r14\n  char v31; // r15\n  char v32; // al\n  _QWORD *v33; // rax\n  __int64 v34; // rdi\n  _QWORD *v35; // rax\n  __int64 v36; // rdi\n  char *s; // [rsp+0h] [rbp-78h]\n  char sa; // [rsp+0h] [rbp-78h]\n  int v39; // [rsp+8h] [rbp-70h]\n  int v40; // [rsp+8h] [rbp-70h]\n  char v41; // [rsp+20h] [rbp-58h]\n  unsigned __int64 v42; // [rsp+38h] [rbp-40h]\n\n  v6 = a3;\n  v7 = a6;\n  v8 = a2;\n  v9 = a1;\n  v10 = a4;\n  v42 = __readfsqword(0x28u);\n  s = a5;\n  v11 = 0;\n  *a6 = \"not an SSH-1 RSA file\";\n  if ( !(unsigned __int8)sub_37610(\n                           (__int64 *)(a1 + 32),\n                           (__int64)\"SSH PRIVATE KEY FILE FORMAT 1.1\\n\",\n                           (unsigned __int64)&qword_20 + 1) )\n    return v11;\n  v13 = *(_QWORD *)(a1 + 32);\n  *v7 = \"file format error\";\n  v14 = sub_11070(v13);\n  LOBYTE(v11) = v14 != 0;\n  if ( v14 != 3 && (_BYTE)v11 )\n    return 0;\n  v39 = v14;\n  if ( sub_11140(*(_QWORD *)(v9 + 32)) )\n    return 0;\n  sub_3C3B0(*(_QWORD *)(v9 + 32), a2, 1LL);\n  v15 = sub_111C0(*(_QWORD *)(v9 + 32));\n  v17 = v15;\n  v18 = v39;\n  if ( v10 )\n  {\n    v19 = v39;\n    v20 = v16;\n    v21 = v15;\n    v22 = sub_48120(v15, v16);\n    v18 = v19;\n    v16 = v20;\n    v17 = v21;\n    *v10 = v22;\n  }\n  v40 = v18;\n  if ( !a2 )\n  {\n    if ( !v6 )\n    {\n      v11 = (unsigned __int8)v11;\n      *v7 = 0LL;\n      return v11;\n    }\n    return 1;\n  }\n  v23 = v16;\n  v8[7] = sub_48120(v17, v16);\n  if ( v6 )\n    return 1;\n  v24 = *(_QWORD *)(v9 + 32);\n  if ( v40 )\n  {\n    v11 = 0;\n    if ( (*(_BYTE *)(v24 + 16) - *(_BYTE *)(v24 + 8)) & 7 )\n      return v11;\n    v25 = *(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8);\n    v26 = sub_47410(v24, v23);\n    sub_11030(*(_QWORD *)(v9 + 32), v25);\n    sub_10C20((__int64 (**)(void))(v26 + 24));\n    v27 = strlen(s);\n    sub_20450((__int64 (**)(void))off_260B80, (__int64)s, v27, (__int64)&v41);\n    sub_202D0((const __m128i *)&v41, *(_QWORD *)(v26 + 8), v25);\n    sub_47E30(&v41, 16LL);\n    v28 = *(_QWORD *)(v26 + 8);\n    v29 = *(_QWORD *)(v26 + 16);\n    v24 = v9;\n    *(_QWORD *)(v9 + 8) = 0LL;\n    *(_DWORD *)(v9 + 24) = 0;\n    *(_QWORD *)(v9 + 32) = v9;\n    *(_QWORD *)v9 = v28;\n    *(_QWORD *)(v9 + 16) = v29;\n  }\n  else\n  {\n    v26 = 0LL;\n  }\n  v30 = sub_11070(v24);\n  sa = sub_11070(*(_QWORD *)(v9 + 32));\n  v31 = sub_11070(*(_QWORD *)(v9 + 32));\n  v32 = sub_11070(*(_QWORD *)(v9 + 32));\n  if ( v30 != v31 || sa != v32 )\n  {\n    v11 = -1;\n    *v7 = \"wrong passphrase\";\n  }\n  else\n  {\n    sub_3C460(*(_QWORD *)(v9 + 32), v8);\n    v33 = sub_136C0(*(_QWORD *)(v9 + 32));\n    v34 = *(_QWORD *)(v9 + 32);\n    v8[6] = v33;\n    v35 = sub_136C0(v34);\n    v36 = *(_QWORD *)(v9 + 32);\n    v8[5] = v35;\n    v8[4] = sub_136C0(v36);\n    if ( (unsigned __int8)sub_3CB60(v8) )\n    {\n      *v7 = 0LL;\n      v11 = 1;\n    }\n    else\n    {\n      v11 = 0;\n      *v7 = \"rsa_verify failed\";\n      sub_3CE80(v8);\n    }\n  }\n  if ( v26 )\n    sub_47420(v26);\n  return v11;\n}\n", 
            "funcStartAddr": "0x37660L", 
            "funcEndAddr": "0x37949L", 
            "funcName": "sub_37660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_37950(_QWORD *a1, __int64 *a2)\n{\n  __int64 *v2; // rbx\n  __int64 i; // r12\n  __int64 v4; // rsi\n  int v6; // eax\n\n  v2 = a2;\n  for ( i = sub_47410(a1, a2); ; sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(i + 24), v4) )\n  {\n    v4 = (unsigned __int8)sub_11070(*v2);\n    if ( (_DWORD)v4 == 13 || (_DWORD)v4 == 10 )\n      break;\n    if ( *(_DWORD *)(*v2 + 24) )\n      return sub_47470(i, v4);\n  }\n  if ( !*(_DWORD *)(*v2 + 24) )\n  {\n    v6 = (unsigned __int8)sub_11070(*v2);\n    if ( (unsigned __int8)v6 != 13 && v6 != 10 && !*(_DWORD *)(*v2 + 24) )\n      --*a1;\n  }\n  return sub_47470(i, v4);\n}\n", 
            "funcStartAddr": "0x37950L", 
            "funcEndAddr": "0x379ddL", 
            "funcName": "sub_37950"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_379E0(__int64 a1, signed int a2, __int64 (***a3)(void))\n{\n  __int64 (***v3)(void); // r13\n  const char *v4; // rax\n  char *v5; // r14\n  signed int v6; // eax\n  char *v7; // rbx\n  signed __int64 v8; // r12\n  _BOOL8 result; // rax\n  int v10; // [rsp+0h] [rbp-68h]\n  bool v11; // [rsp+7h] [rbp-61h]\n  void *v12; // [rsp+18h] [rbp-50h]\n  char v13; // [rsp+25h] [rbp-43h]\n  unsigned __int64 v14; // [rsp+28h] [rbp-40h]\n\n  v14 = __readfsqword(0x28u);\n  if ( a2 > 5460 )\n    goto LABEL_20;\n  v3 = a3;\n  v12 = (void *)sub_11440(48 * a2, 1uLL, 0LL);\n  if ( a2 <= 0 )\n  {\nLABEL_14:\n    sub_114C0(v12);\n    v11 = 1;\n  }\n  else\n  {\n    v10 = 0;\n    while ( 1 )\n    {\n      v4 = (const char *)sub_37950((_QWORD *)(a1 + 8), (__int64 *)(a1 + 32));\n      v5 = (char *)v4;\n      if ( !v4 )\n      {\n        sub_114C0(v12);\n        v11 = 0;\n        goto LABEL_11;\n      }\n      v6 = strlen(v4);\n      v11 = v6 > 64 || (v6 & 3) != 0;\n      if ( v11 )\n      {\n        sub_114C0(v12);\n        sub_114C0(v5);\n        v11 = 0;\n        goto LABEL_11;\n      }\n      if ( v6 > 0 )\n        break;\nLABEL_13:\n      sub_114C0(v5);\n      if ( a2 == ++v10 )\n        goto LABEL_14;\n    }\n    v7 = v5;\n    v8 = (signed __int64)&v5[4 * ((unsigned int)(v6 - 1) >> 2) + 4];\n    while ( (unsigned int)sub_478D0(v7, &v13) )\n    {\n      v7 += 4;\n      sub_10C10(*v3);\n      if ( v7 == (char *)v8 )\n        goto LABEL_13;\n    }\n    sub_114C0(v5);\n    sub_114C0(v12);\n  }\nLABEL_11:\n  result = v11;\n  if ( __readfsqword(0x28u) != v14 )\nLABEL_20:\n    __assert_fail(\"nlines < MAX_KEY_BLOB_LINES\", \"sshpubk.c\", 0x20Eu, \"read_blob\");\n  return result;\n}\n", 
            "funcStartAddr": "0x379e0L", 
            "funcEndAddr": "0x37b7fL", 
            "funcName": "sub_379E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_37B80(unsigned int a1, unsigned __int64 *a2, unsigned __int64 *a3, __int16 *a4, unsigned __int64 a5, __int64 a6, __m128i a7, _OWORD *a8, _OWORD *a9, char **a10, __int128 a11, __int64 a12)\n{\n  unsigned __int64 v12; // r14\n  __int64 v13; // r12\n  unsigned __int64 v14; // rbx\n  unsigned __int64 v15; // rsi\n  unsigned int v16; // edx\n  __int64 v17; // rdi\n  int v18; // er8\n  unsigned int v19; // eax\n  unsigned int v20; // esi\n  int v21; // eax\n  __int64 v22; // rax\n  __int64 v23; // rdx\n  __int128 v24; // ax\n  __int64 v25; // rdi\n  __int128 v26; // ax\n  __int64 v27; // rdi\n  char *v28; // rdx\n  int v30; // ebp\n  unsigned int v31; // ebx\n  unsigned __int64 v32; // rsi\n  __int64 v33; // rax\n  __int64 (***v34)(void); // r15\n  int v35; // esi\n  __int64 v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // rsi\n  __int64 v39; // rax\n  __int64 (***v40)(void); // rbp\n  __int64 v41; // rax\n  __int128 v42; // ST10_16\n  unsigned __int64 *v43; // [rsp+0h] [rbp-A8h]\n  unsigned __int64 *v44; // [rsp+10h] [rbp-98h]\n  int v45; // [rsp+3Ch] [rbp-6Ch]\n  __int64 v46; // [rsp+40h] [rbp-68h]\n  __int64 v47; // [rsp+48h] [rbp-60h]\n  __int64 v48; // [rsp+50h] [rbp-58h]\n  int v49; // [rsp+58h] [rbp-50h]\n  __int64 *v50; // [rsp+60h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+68h] [rbp-40h]\n\n  v43 = a2;\n  v44 = a3;\n  v51 = __readfsqword(0x28u);\n  if ( a1 < 1 )\n    goto LABEL_16;\n  v12 = a5;\n  v13 = a6;\n  if ( a1 > 2 )\n  {\n    if ( a1 == 3 )\n    {\n      v14 = 0LL;\n      v15 = *a2;\n      if ( *v43 )\n      {\n        v16 = *(_DWORD *)(a12 + 16);\n        v17 = *(unsigned int *)(a12 + 4);\n        v18 = *(_DWORD *)v44 + v15 + 32;\n        v19 = *(_DWORD *)(a12 + 20);\n        v20 = *(_DWORD *)(a12 + 8);\n        if ( *(_BYTE *)(a12 + 12) )\n        {\n          v14 = 32LL;\n          sub_1FF70(\n            v17,\n            v20,\n            v16,\n            (unsigned int *)&v45,\n            v19,\n            v18,\n            a4,\n            v12,\n            (__int16 *)a11,\n            *((unsigned __int64 *)&a11 + 1),\n            (__int16 *)\"\",\n            0LL,\n            (__int16 *)\"\",\n            0LL,\n            a6);\n          v21 = v45;\n          v15 = *v43;\n          *(_BYTE *)(a12 + 12) = 0;\n          *(_DWORD *)(a12 + 16) = v21;\n        }\n        else\n        {\n          v14 = 32LL;\n          *((_QWORD *)&v42 + 1) = v12;\n          *(_QWORD *)&v42 = a4;\n          sub_1FEC0(v17, v20, v16, v19, v18, a6, v42, a11, (unsigned __int64)\"\", a7);\n          v15 = *v43;\n        }\n      }\n      goto LABEL_7;\n    }\nLABEL_16:\n    __assert_fail(\n      \"false && \\\"bad format version in ssh2_ppk_derive_keys\\\"\",\n      \"sshpubk.c\",\n      0x294u,\n      \"ssh2_ppk_derive_keys\");\n  }\n  v30 = 0;\n  v31 = 20;\n  v32 = *a2;\n  if ( *v43 )\n  {\n    do\n    {\n      v33 = sub_3F7E0(&off_261420);\n      v34 = (__int64 (***)(void))v33;\n      if ( v33 )\n        (*(void (__fastcall **)(__int64))(*(_QWORD *)v33 + 8LL))(v33);\n      v35 = v30++;\n      sub_10D80((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))v34[1], v35);\n      sub_10C20(v34[1]);\n      v36 = sub_472D0(v13);\n      ((void (__fastcall *)(__int64 (***)(void), __int64))(*v34)[3])(v34, v36);\n      ((void (__fastcall *)(__int64 (***)(void)))(*v34)[4])(v34);\n      v37 = v31;\n      v31 += 20;\n      v32 = *v43;\n    }\n    while ( v37 < *v43 );\n  }\n  sub_47350(v13, v32);\n  v38 = *v44;\n  sub_10C30((void (__fastcall **)(_QWORD, __int64 *, signed __int64))(v13 + 24), *v44, 0);\n  v39 = sub_3F7E0(&off_261420);\n  v40 = (__int64 (***)(void))v39;\n  if ( v39 )\n    (*(void (__fastcall **)(__int64, unsigned __int64))(*(_QWORD *)v39 + 8LL))(v39, v38);\n  v14 = (unsigned __int64)(*v40)[5];\n  sub_10C20(v40[1]);\n  sub_10C20(v40[1]);\n  v41 = sub_472D0(v13);\n  ((void (__fastcall *)(__int64 (***)(void), __int64))(*v40)[3])(v40, v41);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v40)[4])(v40);\n  v15 = *v43;\nLABEL_7:\n  v22 = *(_QWORD *)(v13 + 16);\n  v23 = *(_QWORD *)(v13 + 8);\n  v47 = 0LL;\n  v49 = 0;\n  v50 = &v46;\n  v46 = v23;\n  v48 = v22;\n  *(_QWORD *)&v24 = sub_11030((__int64)&v46, v15);\n  v25 = (__int64)v50;\n  *a8 = v24;\n  *(_QWORD *)&v26 = sub_11030(v25, *v44);\n  v27 = (__int64)v50;\n  *a9 = v26;\n  *a10 = sub_11030(v27, v14);\n  a10[1] = v28;\n  return __readfsqword(0x28u) ^ v51;\n}\n", 
            "funcStartAddr": "0x37b80L", 
            "funcEndAddr": "0x37ea5L", 
            "funcName": "sub_37B80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_37EB0(__int64 (__fastcall ***a1)(_QWORD, char *, signed __int64), __int64 a2, signed int a3, signed int a4)\n{\n  __int64 (__fastcall ***v4)(_QWORD, char *, signed __int64); // rbp\n  signed int v5; // er12\n  signed int v6; // er14\n  signed int v7; // ebx\n  signed int v8; // er15\n  __int64 v9; // r15\n  __int64 (__fastcall **v10)(_QWORD, char *, signed __int64); // rdi\n  char v11; // si\n  __int64 v13; // [rsp+8h] [rbp-50h]\n  char v14[4]; // [rsp+14h] [rbp-44h]\n  unsigned __int64 v15; // [rsp+18h] [rbp-40h]\n\n  v4 = a1;\n  v15 = __readfsqword(0x28u);\n  v13 = a2;\n  if ( a3 > 0 )\n  {\n    v5 = a3;\n    v6 = a4;\n    v7 = 0;\n    do\n    {\n      v8 = 3;\n      if ( v5 <= 3 )\n        v8 = v5;\n      v5 -= v8;\n      sub_47800(v13, (unsigned int)v8, v14);\n      v13 += v8;\n      v9 = 0LL;\n      do\n      {\n        v10 = *v4;\n        if ( v6 <= v7 )\n        {\n          v7 = 1;\n          sub_10CD0(v10, 10);\n          v10 = *v4;\n        }\n        else\n        {\n          ++v7;\n        }\n        v11 = v14[v9++];\n        sub_10CD0(v10, v11);\n      }\n      while ( v9 != 4 );\n    }\n    while ( v5 > 0 );\n  }\n  sub_10CD0(*v4, 10);\n  return __readfsqword(0x28u) ^ v15;\n}\n", 
            "funcStartAddr": "0x37eb0L", 
            "funcEndAddr": "0x37f8aL", 
            "funcName": "sub_37EB0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_37F90(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_11440(1uLL, 0x40uLL, a1);\n  result[1] = 0LL;\n  result[2] = a1;\n  *result = result + 8;\n  return result;\n}\n", 
            "funcStartAddr": "0x37f90L", 
            "funcEndAddr": "0x37fbbL", 
            "funcName": "sub_37F90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_37FC0(_QWORD *a1)\n{\n  sub_47E30(*a1, a1[2]);\n  sub_47E30(a1, 64LL);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x37fc0L", 
            "funcEndAddr": "0x37fe6L", 
            "funcName": "sub_37FC0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_37FF0(__int64 *a1, FILE *a2)\n{\n  unsigned __int64 v2; // rdx\n  __int64 *v3; // rbx\n  unsigned __int64 v4; // rdi\n  size_t v5; // r12\n  signed __int64 result; // rax\n  __int64 v7; // rdx\n  int v8; // eax\n\n  v2 = a1[2];\n  v3 = a1;\n  a1[1] = 0LL;\n  v4 = 0LL;\n  if ( !v2 )\n    goto LABEL_13;\n  do\n  {\n    v5 = fread((void *)(*v3 + v4), 1uLL, v2 - v4, a2);\n    if ( ferror(a2) )\n      return 2LL;\n    v4 = v3[1];\n    v2 = v3[2];\n    if ( !v5 )\n      break;\n    v4 += v5;\n    v3[1] = v4;\n  }\n  while ( v4 < v2 );\n  if ( v2 != v4 )\n  {\n    result = 0LL;\n  }\n  else\n  {\nLABEL_13:\n    v8 = fgetc(a2);\n    v4 = v3[1];\n    result = v8 != -1;\n  }\n  v7 = *v3;\n  v3[5] = v4;\n  v3[4] = 0LL;\n  *((_DWORD *)v3 + 12) = 0;\n  v3[3] = v7;\n  v3[7] = (__int64)(v3 + 3);\n  return result;\n}\n", 
            "funcStartAddr": "0x37ff0L", 
            "funcEndAddr": "0x380a7L", 
            "funcName": "sub_37FF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_380B0(__int64 *a1, __int64 a2)\n{\n  unsigned int v2; // ebp\n  FILE *v3; // rax\n  FILE *v4; // rbx\n\n  v2 = 2;\n  v3 = (FILE *)sub_448E0(a2, \"rb\", 0LL);\n  if ( v3 )\n  {\n    v4 = v3;\n    v2 = sub_37FF0(a1, v3);\n    fclose(v4);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x380b0L", 
            "funcEndAddr": "0x380f1L", 
            "funcName": "sub_380B0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_38100(__int64 a1, char **a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // rbx\n  unsigned int v4; // eax\n  int *v5; // rax\n  char *v6; // rax\n  __int64 *v7; // rdi\n\n  v2 = (__int64 *)sub_11440(1uLL, 0x40uLL, (__int64)&unk_56555);\n  v3 = v2;\n  *v2 = (__int64)(v2 + 8);\n  v2[1] = 0LL;\n  v2[2] = (__int64)&unk_56555;\n  v4 = sub_380B0(v2, a1);\n  if ( v4 == 1 )\n  {\n    v6 = \"file is too large to be a key file\";\n  }\n  else\n  {\n    if ( v4 < 1 )\n      return v3;\n    if ( v4 != 2 )\n      sub_60D2();\n    v5 = __errno_location();\n    v6 = strerror(*v5);\n  }\n  if ( a2 )\n    *a2 = v6;\n  v7 = v3;\n  v3 = 0LL;\n  sub_37FC0(v7);\n  return v3;\n}\n", 
            "funcStartAddr": "0x38100L", 
            "funcEndAddr": "0x3818eL", 
            "funcName": "sub_38100"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_38190(FILE *a1, char **a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // rbx\n  unsigned int v4; // eax\n  int *v5; // rax\n  char *v6; // rax\n  __int64 *v7; // rdi\n\n  v2 = (__int64 *)sub_11440(1uLL, 0x40uLL, (__int64)&unk_56555);\n  v3 = v2;\n  *v2 = (__int64)(v2 + 8);\n  v2[1] = 0LL;\n  v2[2] = (__int64)&unk_56555;\n  v4 = sub_37FF0(v2, a1);\n  if ( v4 == 1 )\n  {\n    v6 = \"file is too large to be a key file\";\n  }\n  else\n  {\n    if ( v4 < 1 )\n      return v3;\n    if ( v4 != 2 )\n      sub_60D2();\n    v5 = __errno_location();\n    v6 = strerror(*v5);\n  }\n  if ( a2 )\n    *a2 = v6;\n  v7 = v3;\n  v3 = 0LL;\n  sub_37FC0(v7);\n  return v3;\n}\n", 
            "funcStartAddr": "0x38190L", 
            "funcEndAddr": "0x3821eL", 
            "funcName": "sub_38190"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_38220(__int64 a1, _QWORD *a2, char *a3, _QWORD *a4)\n{\n  return sub_37660(a1, a2, 0, 0LL, a3, a4);\n}\n", 
            "funcStartAddr": "0x38220L", 
            "funcEndAddr": "0x3822fL", 
            "funcName": "sub_38220"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_38290(__int64 a1, __int64 *a2)\n{\n  __int64 v3; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\n  v4 = __readfsqword(0x28u);\n  return (unsigned int)sub_37660(a1, 0LL, 0, a2, 0LL, &v3) == 1;\n}\n", 
            "funcStartAddr": "0x38290L", 
            "funcEndAddr": "0x382d6L", 
            "funcName": "sub_38290"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_38360(__int64 a1, __int64 a2, __int64 *a3, const char **a4)\n{\n  __int64 *v4; // r12\n  const char **v5; // rbp\n  char v6; // r14\n  __int64 v7; // rcx\n  signed __int64 result; // rax\n  void *v9; // rax\n  size_t v10; // rdx\n  const char *v11; // rax\n  char *v12; // rbx\n  size_t v13; // rax\n  char *v14; // r14\n  size_t v15; // rax\n  char *v16; // r15\n  _BYTE *v17; // rax\n  signed __int64 v18; // rcx\n  __int64 v19; // r14\n  signed __int64 v20; // rax\n  __int64 v21; // rcx\n  char *src; // [rsp+8h] [rbp-A0h]\n  const char *v23; // [rsp+18h] [rbp-90h]\n  __int128 v24; // [rsp+20h] [rbp-88h]\n  __int128 v25; // [rsp+30h] [rbp-78h]\n  __int128 v26; // [rsp+40h] [rbp-68h]\n  __int128 v27; // [rsp+50h] [rbp-58h]\n  __int64 v28; // [rsp+60h] [rbp-48h]\n  unsigned __int64 v29; // [rsp+68h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a4;\n  v29 = __readfsqword(0x28u);\n  v23 = 0LL;\n  v6 = sub_37610((__int64 *)(a1 + 32), (__int64)\"SSH PRIVATE KEY FILE FORMAT 1.1\\n\", (unsigned __int64)&qword_20 + 1);\n  sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n  if ( v6 )\n  {\n    v28 = 0LL;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 0LL;\n    v27 = 0LL;\n    if ( (unsigned int)sub_37660(a1, &v24, 1, v4, 0LL, &v23) )\n    {\n      sub_3CCC0(a2, &v24, 0LL, v7);\n      sub_3CE80(&v24);\n      return 1LL;\n    }\n    goto LABEL_3;\n  }\n  v9 = (void *)sub_112C0(*(__int64 **)(a1 + 32));\n  v11 = (const char *)sub_48120(v9, v10);\n  v12 = (char *)v11;\n  v13 = (size_t)&v11[strspn(v11, \"0123456789\")];\n  if ( *(_BYTE *)v13 != 32 )\n    goto LABEL_8;\n  v14 = (char *)(v13 + 1);\n  *(_BYTE *)v13 = 0;\n  v15 = v13 + 1 + strspn((const char *)(v13 + 1), \"0123456789\");\n  if ( *(_BYTE *)v15 != 32 )\n    goto LABEL_8;\n  v16 = (char *)(v15 + 1);\n  *(_BYTE *)v15 = 0;\n  v17 = (_BYTE *)(v15 + 1 + strspn((const char *)(v15 + 1), \"0123456789\"));\n  if ( *v17 )\n  {\n    if ( *v17 != 32 )\n    {\nLABEL_8:\n      sub_114C0(v12);\n      v23 = \"not an SSH-1 RSA file\";\n      goto LABEL_3;\n    }\n    v18 = (signed __int64)(v17 + 1);\n    *v17 = 0;\n  }\n  else\n  {\n    v18 = 0LL;\n  }\n  src = (char *)v18;\n  v28 = 0LL;\n  v24 = 0LL;\n  v25 = 0LL;\n  v26 = 0LL;\n  v27 = 0LL;\n  *(_QWORD *)&v25 = sub_13CB0(v14);\n  *((_QWORD *)&v24 + 1) = sub_13CB0(v16);\n  v19 = (signed int)strtol(v12, 0LL, 10);\n  v20 = sub_134B0(*((__int64 **)&v24 + 1));\n  v21 = (__int64)src;\n  if ( v19 != v20 )\n  {\n    sub_12FF0((_QWORD *)v25);\n    sub_12FF0(*((_QWORD **)&v24 + 1));\n    sub_114C0(v12);\n    v23 = \"key bit count does not match in SSH-1 public key file\";\nLABEL_3:\n    result = 0LL;\n    if ( v5 )\n      *v5 = v23;\n    return result;\n  }\n  if ( v4 )\n  {\n    if ( src )\n      v21 = sub_46EE0(src);\n    *v4 = v21;\n  }\n  sub_3CCC0(a2, &v24, 0LL, v21);\n  sub_3CE80(&v24);\n  sub_114C0(v12);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x38360L", 
            "funcEndAddr": "0x385faL", 
            "funcName": "sub_38360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_38660(__int64 a1, unsigned __int64 a2)\n{\n  const char *v2; // r14\n  __int64 v3; // rax\n  __int64 (__fastcall **v4)(_QWORD, char *, signed __int64); // rbx\n  __int64 v5; // r12\n  __int64 v6; // rcx\n  char *v7; // rsi\n  __int64 v8; // r15\n  __int64 v9; // rax\n  __int64 v11; // [rsp+0h] [rbp-58h]\n  unsigned __int64 v12; // [rsp+18h] [rbp-40h]\n\n  v2 = (const char *)a2;\n  v12 = __readfsqword(0x28u);\n  v3 = sub_47410(a1, a2);\n  v4 = (__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v3 + 24);\n  v5 = v3;\n  sub_10C20((__int64 (**)(void))(v3 + 24));\n  sub_10CD0(v4, a2 >= 1 ? 3 : 0);\n  sub_10D80((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))v4, 0);\n  sub_3CCC0(v4, a1, 1LL, v6);\n  v7 = *(char **)(a1 + 56);\n  if ( !v7 )\n    v7 = \"\";\n  sub_10F30((void (__fastcall **)(_QWORD, char *, signed __int64))v4, v7);\n  v8 = *(_QWORD *)(v5 + 16);\n  sub_3B660(&v11, 2LL);\n  sub_10C10((__int64 (**)(void))v4);\n  sub_10C10((__int64 (**)(void))v4);\n  sub_13580((__int64)v4, *(__int64 **)(a1 + 24));\n  sub_13580((__int64)v4, *(__int64 **)(a1 + 48));\n  sub_13580((__int64)v4, *(__int64 **)(a1 + 40));\n  sub_13580((__int64)v4, *(__int64 **)(a1 + 32));\n  sub_10C30((void (__fastcall **)(_QWORD, __int64 *, signed __int64))v4, ((_DWORD)v8 - *(_DWORD *)(v5 + 16)) & 7, 0);\n  if ( v2 )\n  {\n    v9 = strlen(v2);\n    sub_20450((__int64 (**)(void))off_260B80, (__int64)v2, v9, (__int64)&v11);\n    sub_20310((const __m128i *)&v11, (signed int)v8 + *(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 16) - v8);\n    sub_47E30(&v11, 16LL);\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x38660L", 
            "funcEndAddr": "0x387d8L", 
            "funcName": "sub_38660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_387E0(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r13\n  unsigned int v4; // er12\n  __int64 v5; // rax\n  FILE *v6; // rbx\n  __int64 v7; // rbp\n  size_t v8; // r14\n  __int64 v9; // r13\n\n  v3 = a3;\n  v4 = 0;\n  v5 = sub_448E0(a1, \"wb\", 1LL);\n  if ( v5 )\n  {\n    v6 = (FILE *)v5;\n    v7 = sub_38660(a2, v3);\n    v8 = fwrite(*(const void **)v7, 1uLL, *(_QWORD *)(v7 + 16), v6);\n    v9 = *(_QWORD *)(v7 + 16);\n    if ( !fclose(v6) )\n      LOBYTE(v4) = v8 == v9;\n    sub_47420(v7);\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x387e0L", 
            "funcEndAddr": "0x38861L", 
            "funcName": "sub_387E0"
        }, 
        {
            "decompiledFuncCode": "__int64 (__fastcall *(*__fastcall sub_38870(void *s1, size_t n))[13])()\n{\n  __int64 (__fastcall *(**v2)[13])(); // rbx\n  __int64 (__fastcall *(*v3)[13])(); // rbp\n\n  v2 = off_261A28;\n  v3 = (__int64 (__fastcall *(*)[13])())off_260F40;\n  while ( !(unsigned __int8)sub_47EC0(s1, n, (*v3)[13]) )\n  {\n    if ( v2 == &off_261A28[8] )\n      return 0LL;\n    v3 = *v2;\n    ++v2;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x38870L", 
            "funcEndAddr": "0x388c5L", 
            "funcName": "sub_38870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_388D0(__int64 a1)\n{\n  __int64 *v1; // rbp\n  char v2; // al\n  unsigned int v3; // ecx\n  char v4; // al\n  char v5; // al\n  char v6; // al\n  char v7; // al\n  char v8; // al\n  __int64 v9; // rdx\n  __int64 v10; // rdx\n  void *v11; // rax\n  size_t v12; // rdx\n  __int64 v13; // rdx\n  __int64 v15; // rdx\n  __int64 v16; // rdx\n  __int64 v17; // rdx\n  __int64 v18; // rdx\n  __int64 v19; // rdx\n  __int64 v20; // rdx\n\n  v1 = (__int64 *)(a1 + 32);\n  sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n  v2 = sub_37610((__int64 *)(a1 + 32), (__int64)\"SSH PRIVATE KEY FILE FORMAT 1.1\\n\", (unsigned __int64)&qword_20 + 1);\n  v3 = 2;\n  if ( !v2 )\n  {\n    sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n    v4 = sub_37610(v1, (__int64)\"---- BEGIN SSH2 PUBLIC KEY\", (unsigned __int64)&off_18 + 2);\n    v3 = 9;\n    if ( !v4 )\n    {\n      sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n      v5 = sub_37610(v1, (__int64)\"PuTTY-User-Key-File-\", (unsigned __int64)&dword_14);\n      v3 = 3;\n      if ( !v5 )\n      {\n        sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n        v6 = sub_37610(v1, (__int64)\"-----BEGIN OPENSSH PRIVATE KEY\", (unsigned __int64)&off_18 + 6);\n        v3 = 6;\n        if ( !v6 )\n        {\n          sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n          v7 = sub_37610(v1, (__int64)\"-----BEGIN \", (unsigned __int64)&byte_9[2]);\n          v3 = 5;\n          if ( !v7 )\n          {\n            sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n            v8 = sub_37610(v1, (__int64)\"---- BEGIN SSH2 ENCRYPTED PRIVAT\", (unsigned __int64)&qword_20);\n            v3 = 7;\n            if ( !v8 )\n            {\n              sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n              sub_112A0(*(_QWORD *)(a1 + 32), \"0123456789\");\n              if ( v9\n                && (sub_112A0(*(_QWORD *)(a1 + 32), \" \"), v10 == 1)\n                && (sub_112A0(*(_QWORD *)(a1 + 32), \"0123456789\"), v17)\n                && (sub_112A0(*(_QWORD *)(a1 + 32), \" \"), v18 == 1)\n                && (sub_112A0(*(_QWORD *)(a1 + 32), \"0123456789\"), v19)\n                && (sub_112B0(*(_QWORD *)(a1 + 32)), !v20) )\n              {\n                v3 = 8;\n              }\n              else\n              {\n                sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n                sub_112B0(*(_QWORD *)(a1 + 32));\n                if ( !sub_38870(v11, v12)\n                  || (sub_112A0(*(_QWORD *)(a1 + 32), \" \"), v13 != 1)\n                  || (sub_112A0(\n                        *(_QWORD *)(a1 + 32),\n                        \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/=\"),\n                      !v15)\n                  || (sub_112B0(*(_QWORD *)(a1 + 32)), v3 = 10, v16) )\n                {\n                  v3 = 1;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x388d0L", 
            "funcEndAddr": "0x38b1aL", 
            "funcName": "sub_388D0"
        }, 
        {
            "decompiledFuncCode": "__int64 (__fastcall *(*__fastcall sub_38B20(void *s1))[13])()\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)s1);\n  return sub_38870(s1, v1);\n}\n", 
            "funcStartAddr": "0x38b20L", 
            "funcEndAddr": "0x38b35L", 
            "funcName": "sub_38B20"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__usercall sub_38B40@<rax>(const char **a1@<rdx>, __int64 a2@<rdi>, char *a3@<rsi>, unsigned __int8 *a4@<r15>)\n{\n  __int64 v4; // r12\n  __int64 *v5; // rbp\n  const char **v6; // r13\n  char v7; // al\n  bool v8; // cf\n  bool v9; // zf\n  const char *v10; // rdi\n  signed __int64 v11; // rcx\n  char *v12; // rsi\n  char v13; // al\n  bool v14; // cf\n  bool v15; // zf\n  const char *v16; // rdi\n  signed __int64 v17; // rcx\n  char *v18; // rsi\n  char v19; // al\n  bool v20; // cf\n  bool v21; // zf\n  _QWORD *v22; // r14\n  unsigned __int8 *v23; // rax\n  unsigned __int8 *v24; // rdi\n  char v25; // al\n  bool v26; // cf\n  bool v27; // zf\n  const char *v28; // rdi\n  signed __int64 v29; // rcx\n  char *v30; // rsi\n  __int64 v31; // rax\n  bool v32; // cf\n  bool v33; // zf\n  _BYTE *v34; // rsi\n  const char *v35; // rdi\n  signed __int64 v36; // rcx\n  _BYTE *v37; // rdx\n  char v38; // al\n  bool v39; // cf\n  bool v40; // zf\n  const char *v41; // rdi\n  signed __int64 v42; // rcx\n  _BYTE *v43; // rsi\n  char v44; // al\n  bool v45; // cf\n  bool v46; // zf\n  const char *v47; // rdi\n  signed __int64 v48; // rcx\n  char *v49; // rsi\n  char v50; // al\n  bool v51; // cf\n  bool v52; // zf\n  const char *v53; // rdi\n  signed __int64 v54; // rcx\n  char *v55; // rsi\n  const char *v56; // rax\n  signed int v57; // er15\n  char v58; // al\n  bool v59; // cf\n  bool v60; // zf\n  const char *v61; // rdi\n  signed __int64 v62; // rcx\n  char *v63; // rsi\n  const char *v64; // rax\n  const char *v65; // rdi\n  signed int v66; // ST60_4\n  signed int v67; // er15\n  char v68; // al\n  bool v69; // cf\n  bool v70; // zf\n  const char *v71; // rdi\n  signed __int64 v72; // rcx\n  char *v73; // rsi\n  char v74; // al\n  bool v75; // cf\n  bool v76; // zf\n  const char *v77; // rdi\n  signed __int64 v78; // rcx\n  char *v79; // rsi\n  _QWORD *v80; // rdi\n  __int128 v81; // cx\n  __int64 v82; // ST90_8\n  size_t v83; // rax\n  unsigned __int64 v84; // r8\n  signed __int64 v85; // rsi\n  __int64 v86; // rdi\n  __int64 v87; // rcx\n  __int64 *v88; // rbp\n  __int64 (__fastcall **v89)(); // r14\n  __int64 (***v90)(void); // rbx\n  __int64 v91; // rdx\n  __int64 v92; // rsi\n  __int64 v93; // r9\n  signed __int64 v94; // rbx\n  char *v95; // r12\n  char *v96; // rdi\n  int v97; // eax\n  const char *v98; // rbx\n  _QWORD *v99; // rbp\n  const char *v100; // rdi\n  signed __int64 v101; // rcx\n  char *v102; // rsi\n  char v103; // al\n  bool v104; // cf\n  bool v105; // zf\n  const char *v106; // rdi\n  char *v107; // rsi\n  signed __int64 v108; // rcx\n  _QWORD *result; // rax\n  char v110; // al\n  bool v111; // cf\n  bool v112; // zf\n  const char *v113; // rdi\n  signed __int64 v114; // rcx\n  char *v115; // rsi\n  __int64 v116; // rax\n  bool v117; // cf\n  bool v118; // zf\n  const char *v119; // rdi\n  _BYTE *v120; // rsi\n  signed __int64 v121; // rcx\n  char v122; // al\n  bool v123; // cf\n  bool v124; // zf\n  char v125; // al\n  bool v126; // cf\n  bool v127; // zf\n  const char *v128; // rdi\n  signed __int64 v129; // rcx\n  char *v130; // rsi\n  char *v131; // rdi\n  char v132; // al\n  bool v133; // cf\n  bool v134; // zf\n  const char *v135; // rdi\n  signed __int64 v136; // rcx\n  char *v137; // rsi\n  char v138; // al\n  bool v139; // cf\n  bool v140; // zf\n  const char *v141; // rdi\n  signed __int64 v142; // rcx\n  char *v143; // rsi\n  const char *v144; // rax\n  char v145; // al\n  bool v146; // cf\n  bool v147; // zf\n  const char *v148; // rdi\n  signed __int64 v149; // rcx\n  char *v150; // rsi\n  unsigned __int8 *v151; // rax\n  unsigned __int8 v152; // ST60_1\n  const unsigned __int16 **v153; // rax\n  unsigned __int8 v154; // dl\n  const unsigned __int16 **v155; // rbp\n  unsigned __int8 *v156; // rbx\n  __int64 v157; // rax\n  unsigned __int8 v158; // al\n  char v159; // al\n  __int64 v160; // rax\n  void (__fastcall **v161)(_QWORD, char *, signed __int64); // rbx\n  __int64 v162; // rax\n  const char *v163; // rdi\n  signed __int64 v164; // rcx\n  unsigned __int8 *v165; // rsi\n  char v166; // al\n  bool v167; // cf\n  bool v168; // zf\n  const char *v169; // rdi\n  signed __int64 v170; // rcx\n  unsigned __int8 *v171; // rsi\n  void *v172; // rdi\n  __int64 v173; // [rsp+8h] [rbp-1A0h]\n  unsigned __int8 *v174; // [rsp+10h] [rbp-198h]\n  char *s; // [rsp+18h] [rbp-190h]\n  unsigned int v176; // [rsp+20h] [rbp-188h]\n  __int64 v177; // [rsp+20h] [rbp-188h]\n  char *v178; // [rsp+28h] [rbp-180h]\n  __int64 v179; // [rsp+30h] [rbp-178h]\n  char *v180; // [rsp+30h] [rbp-178h]\n  __int64 *v181; // [rsp+30h] [rbp-178h]\n  __int64 (__fastcall *(*v182)[13])(); // [rsp+38h] [rbp-170h]\n  __int64 v183; // [rsp+40h] [rbp-168h]\n  char **v184; // [rsp+48h] [rbp-160h]\n  char v185; // [rsp+50h] [rbp-158h]\n  char v186; // [rsp+58h] [rbp-150h]\n  __int64 v187; // [rsp+70h] [rbp-138h]\n  __int64 v188; // [rsp+80h] [rbp-128h]\n  __int64 v189; // [rsp+90h] [rbp-118h]\n  __int64 v190; // [rsp+98h] [rbp-110h]\n  __int128 v191; // [rsp+A0h] [rbp-108h]\n  __int128 v192; // [rsp+B0h] [rbp-F8h]\n  __int64 v193; // [rsp+C0h] [rbp-E8h]\n  char v194; // [rsp+CFh] [rbp-D9h]\n  char v195; // [rsp+D0h] [rbp-D8h]\n  char v196; // [rsp+F0h] [rbp-B8h]\n  char nptr; // [rsp+120h] [rbp-88h]\n  __int16 v198; // [rsp+121h] [rbp-87h]\n  unsigned __int64 v199; // [rsp+168h] [rbp-40h]\n\n  v4 = a2;\n  v5 = (__int64 *)(a2 + 32);\n  v6 = a1;\n  s = a3;\n  v199 = __readfsqword(0x28u);\n  v173 = sub_47400(a2);\n  v7 = sub_375A0((__int64 *)(a2 + 32), &v196);\n  v8 = 0;\n  v9 = v7 == 0;\n  if ( !v7 )\n  {\n    v98 = \"no header line found in key file\";\n    goto LABEL_95;\n  }\n  v10 = \"PuTTY-User-Key-File-3\";\n  v11 = 22LL;\n  v12 = &v196;\n  do\n  {\n    if ( !v11 )\n      break;\n    v8 = (unsigned __int8)*v12 < *v10;\n    v9 = *v12++ == *v10++;\n    --v11;\n  }\n  while ( v9 );\n  v13 = (!v8 && !v9) - v8;\n  v14 = 0;\n  v15 = v13 == 0;\n  if ( v13 )\n  {\n    v16 = \"PuTTY-User-Key-File-2\";\n    v17 = 22LL;\n    v18 = &v196;\n    do\n    {\n      if ( !v17 )\n        break;\n      v14 = (unsigned __int8)*v18 < *v16;\n      v15 = *v18++ == *v16++;\n      --v17;\n    }\n    while ( v15 );\n    v19 = (!v14 && !v15) - v14;\n    v20 = 0;\n    v21 = v19 == 0;\n    if ( v19 )\n    {\n      v100 = \"PuTTY-User-Key-File-1\";\n      v101 = 22LL;\n      v102 = &v196;\n      do\n      {\n        if ( !v101 )\n          break;\n        v20 = (unsigned __int8)*v102 < *v100;\n        v21 = *v102++ == *v100++;\n        --v101;\n      }\n      while ( v21 );\n      v103 = (!v20 && !v21) - v20;\n      v104 = 0;\n      v105 = v103 == 0;\n      if ( v103 )\n      {\n        v106 = \"PuTTY-User-Key-File-\";\n        v107 = &v196;\n        v108 = 20LL;\n        v98 = \"PuTTY key format too new\";\n        do\n        {\n          if ( !v108 )\n            break;\n          v104 = (unsigned __int8)*v107 < *v106;\n          v105 = *v107++ == *v106++;\n          --v108;\n        }\n        while ( v105 );\n        if ( (!v104 && !v105) != v104 )\n          v98 = \"not a PuTTY SSH-2 private key\";\n        goto LABEL_95;\n      }\n      sub_43DE0(v100, v102);\n      v176 = 1;\n    }\n    else\n    {\n      v176 = 2;\n    }\n  }\n  else\n  {\n    v176 = 3;\n  }\n  v22 = (_QWORD *)(v4 + 8);\n  v23 = (unsigned __int8 *)sub_37950((_QWORD *)(v4 + 8), v5);\n  a4 = v23;\n  if ( !v23 )\n  {\nLABEL_102:\n    v98 = \"file format error\";\nLABEL_95:\n    v99 = 0LL;\n    goto LABEL_96;\n  }\n  v182 = sub_38B20(v23);\n  v24 = a4;\n  if ( !v182 )\n  {\nLABEL_101:\n    sub_114C0(v24);\n    goto LABEL_102;\n  }\n  sub_114C0(a4);\n  v25 = sub_375A0(v5, &v196);\n  v26 = 0;\n  v27 = v25 == 0;\n  if ( !v25 )\n    goto LABEL_102;\n  v28 = \"Encryption\";\n  v29 = 11LL;\n  v30 = &v196;\n  do\n  {\n    if ( !v29 )\n      break;\n    v26 = (unsigned __int8)*v30 < *v28;\n    v27 = *v30++ == *v28++;\n    --v29;\n  }\n  while ( v27 );\n  if ( (!v26 && !v27) != v26 )\n    goto LABEL_102;\n  v31 = sub_37950((_QWORD *)(v4 + 8), v5);\n  v32 = 0;\n  v33 = v31 == 0;\n  v34 = (_BYTE *)v31;\n  if ( !v31 )\n    goto LABEL_102;\n  v35 = \"aes256-cbc\";\n  v36 = 11LL;\n  v37 = (_BYTE *)v31;\n  v174 = (unsigned __int8 *)v31;\n  do\n  {\n    if ( !v36 )\n      break;\n    v32 = *v34 < (const unsigned __int8)*v35;\n    v33 = *v34++ == *v35++;\n    --v36;\n  }\n  while ( v33 );\n  v38 = (!v32 && !v33) - v32;\n  v39 = 0;\n  v40 = v38 == 0;\n  if ( v38 )\n  {\n    v41 = \"none\";\n    v42 = 5LL;\n    v43 = v37;\n    do\n    {\n      if ( !v42 )\n        break;\n      v39 = *v43 < (const unsigned __int8)*v41;\n      v40 = *v43++ == *v41++;\n      --v42;\n    }\n    while ( v40 );\n    if ( (!v39 && !v40) != v39 )\n      goto LABEL_100;\n    v184 = &off_260DA0;\n  }\n  else\n  {\n    v184 = &off_260D80;\n  }\n  v44 = sub_375A0(v5, &v196);\n  v45 = 0;\n  v46 = v44 == 0;\n  if ( !v44 )\n    goto LABEL_100;\n  v47 = \"Comment\";\n  v48 = 8LL;\n  v49 = &v196;\n  do\n  {\n    if ( !v48 )\n      break;\n    v45 = (unsigned __int8)*v49 < *v47;\n    v46 = *v49++ == *v47++;\n    --v48;\n  }\n  while ( v46 );\n  if ( (!v45 && !v46) != v45 )\n  {\nLABEL_100:\n    v24 = v174;\n    goto LABEL_101;\n  }\n  v178 = (char *)sub_37950((_QWORD *)(v4 + 8), v5);\n  if ( !v178 )\n  {\n    v99 = 0LL;\n    v98 = \"file format error\";\n    sub_114C0(v174);\n    goto LABEL_96;\n  }\n  v193 = 0LL;\n  v191 = 0LL;\n  v192 = 0LL;\n  v50 = sub_375A0(v5, &v196);\n  v51 = 0;\n  v52 = v50 == 0;\n  if ( !v50 )\n    goto LABEL_193;\n  v53 = \"Public-Lines\";\n  v54 = 13LL;\n  v55 = &v196;\n  do\n  {\n    if ( !v54 )\n      break;\n    v51 = (unsigned __int8)*v55 < *v53;\n    v52 = *v55++ == *v53++;\n    --v54;\n  }\n  while ( v52 );\n  if ( (!v51 && !v52) != v51\n    || (v56 = (const char *)sub_37950((_QWORD *)(v4 + 8), v5)) == 0LL\n    || (v180 = (char *)v56, v57 = sub_37360(v56), sub_114C0(v180), v57 < 0) )\n  {\nLABEL_193:\n    v98 = \"file format error\";\n    v4 = 0LL;\n    v179 = 0LL;\n    v183 = 0LL;\n    v99 = 0LL;\n    a4 = 0LL;\n    goto LABEL_105;\n  }\n  v183 = sub_47400(v180);\n  if ( !(unsigned __int8)sub_379E0(v4, v57, (__int64 (***)(void))(v183 + 32)) )\n    goto LABEL_161;\n  if ( v176 == 3 && v184[2] )\n  {\n    v110 = sub_375A0(v5, &v196);\n    v111 = 0;\n    v112 = v110 == 0;\n    if ( !v110 )\n      goto LABEL_161;\n    v113 = \"Key-Derivation\";\n    v114 = 15LL;\n    v115 = &v196;\n    do\n    {\n      if ( !v114 )\n        break;\n      v111 = (unsigned __int8)*v115 < *v113;\n      v112 = *v115++ == *v113++;\n      --v114;\n    }\n    while ( v112 );\n    if ( (!v111 && !v112) != v111 )\n      goto LABEL_161;\n    v116 = sub_37950((_QWORD *)(v4 + 8), v5);\n    v117 = 0;\n    v118 = v116 == 0;\n    a4 = (unsigned __int8 *)v116;\n    if ( !v116 )\n      goto LABEL_178;\n    v119 = \"Argon2d\";\n    v120 = (_BYTE *)v116;\n    v121 = 8LL;\n    do\n    {\n      if ( !v121 )\n        break;\n      v117 = *v120 < (const unsigned __int8)*v119;\n      v118 = *v120++ == *v119++;\n      --v121;\n    }\n    while ( v118 );\n    v122 = (!v117 && !v118) - v117;\n    v123 = 0;\n    v124 = v122 == 0;\n    if ( v122 )\n    {\n      v163 = \"Argon2i\";\n      v164 = 8LL;\n      v165 = a4;\n      do\n      {\n        if ( !v164 )\n          break;\n        v123 = *v165 < *v163;\n        v124 = *v165++ == *v163++;\n        --v164;\n      }\n      while ( v124 );\n      v166 = (!v123 && !v124) - v123;\n      v167 = 0;\n      v168 = v166 == 0;\n      if ( v166 )\n      {\n        v169 = \"Argon2id\";\n        v170 = 9LL;\n        v171 = a4;\n        do\n        {\n          if ( !v170 )\n            break;\n          v167 = *v171 < *v169;\n          v168 = *v171++ == *v169++;\n          --v170;\n        }\n        while ( v168 );\n        if ( (!v167 && !v168) != v167 )\n          goto LABEL_159;\n        DWORD1(v191) = 2;\n      }\n      else\n      {\n        DWORD1(v191) = 1;\n      }\n    }\n    else\n    {\n      DWORD1(v191) = 0;\n    }\n    sub_114C0(a4);\n    v125 = sub_375A0(v5, &v196);\n    v126 = 0;\n    v127 = v125 == 0;\n    if ( !v125 )\n      goto LABEL_161;\n    v128 = \"Argon2-Memory\";\n    v129 = 14LL;\n    v130 = &v196;\n    do\n    {\n      if ( !v129 )\n        break;\n      v126 = (unsigned __int8)*v130 < *v128;\n      v127 = *v130++ == *v128++;\n      --v129;\n    }\n    while ( v127 );\n    if ( (!v126 && !v127) != v126 )\n      goto LABEL_161;\n    a4 = (unsigned __int8 *)sub_37950((_QWORD *)(v4 + 8), v5);\n    if ( !a4 )\n      goto LABEL_178;\n    v131 = (char *)a4;\n    if ( !(unsigned __int8)sub_372E0((const char *)a4, (_DWORD *)&v191 + 2) )\n      goto LABEL_160;\n    sub_114C0(a4);\n    v132 = sub_375A0(v5, &v196);\n    v133 = 0;\n    v134 = v132 == 0;\n    if ( !v132 )\n      goto LABEL_161;\n    v135 = \"Argon2-Passes\";\n    v136 = 14LL;\n    v137 = &v196;\n    do\n    {\n      if ( !v136 )\n        break;\n      v133 = (unsigned __int8)*v137 < *v135;\n      v134 = *v137++ == *v135++;\n      --v136;\n    }\n    while ( v134 );\n    if ( (!v133 && !v134) != v133 )\n      goto LABEL_161;\n    a4 = (unsigned __int8 *)sub_37950((_QWORD *)(v4 + 8), v5);\n    if ( !a4 )\n      goto LABEL_178;\n    v131 = (char *)a4;\n    if ( !(unsigned __int8)sub_372E0((const char *)a4, &v192) )\n      goto LABEL_160;\n    sub_114C0(a4);\n    v138 = sub_375A0(v5, &v196);\n    v139 = 0;\n    v140 = v138 == 0;\n    if ( !v138 )\n      goto LABEL_161;\n    v141 = \"Argon2-Parallelism\";\n    v142 = 19LL;\n    v143 = &v196;\n    do\n    {\n      if ( !v142 )\n        break;\n      v139 = (unsigned __int8)*v143 < *v141;\n      v140 = *v143++ == *v141++;\n      --v142;\n    }\n    while ( v140 );\n    if ( (!v139 && !v140) != v139 )\n      goto LABEL_161;\n    v144 = (const char *)sub_37950((_QWORD *)(v4 + 8), v5);\n    a4 = (unsigned __int8 *)v144;\n    if ( !v144 )\n      goto LABEL_178;\n    v131 = (char *)v144;\n    if ( !(unsigned __int8)sub_372E0(v144, (_DWORD *)&v192 + 1) )\n    {\nLABEL_160:\n      sub_114C0(v131);\n      goto LABEL_161;\n    }\n    sub_114C0(a4);\n    v145 = sub_375A0(v5, &v196);\n    v146 = 0;\n    v147 = v145 == 0;\n    if ( !v145 )\n      goto LABEL_161;\n    v148 = \"Argon2-Salt\";\n    v149 = 12LL;\n    v150 = &v196;\n    do\n    {\n      if ( !v149 )\n        break;\n      v146 = (unsigned __int8)*v150 < *v148;\n      v147 = *v150++ == *v148++;\n      --v149;\n    }\n    while ( v147 );\n    if ( (!v146 && !v147) != v146 )\n      goto LABEL_161;\n    v151 = (unsigned __int8 *)sub_37950((_QWORD *)(v4 + 8), v5);\n    a4 = v151;\n    if ( !v151 )\n      goto LABEL_178;\n    if ( !*v151 )\n    {\nLABEL_188:\n      sub_114C0(a4);\n      goto LABEL_44;\n    }\n    v152 = *v151;\n    v153 = __ctype_b_loc();\n    v154 = v152;\n    v181 = v5;\n    v155 = v153;\n    v156 = a4 + 1;\n    while ( (*v155)[v154] & 0x1000 )\n    {\n      v157 = *v156;\n      if ( !(_BYTE)v157 || !((*v155)[v157] & 0x1000) )\n        break;\n      nptr = v154;\n      v158 = *v156;\n      v156 += 2;\n      v198 = v158;\n      v159 = strtoul(&nptr, 0LL, 16);\n      sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v173 + 24), v159);\n      v154 = *(v156 - 1);\n      if ( !v154 )\n      {\n        v5 = v181;\n        v22 = (_QWORD *)(v4 + 8);\n        goto LABEL_188;\n      }\n    }\nLABEL_159:\n    v131 = (char *)a4;\n    goto LABEL_160;\n  }\nLABEL_44:\n  v58 = sub_375A0(v5, &v196);\n  v59 = 0;\n  v60 = v58 == 0;\n  if ( !v58 )\n    goto LABEL_161;\n  v61 = \"Private-Lines\";\n  v62 = 14LL;\n  v63 = &v196;\n  do\n  {\n    if ( !v62 )\n      break;\n    v59 = (unsigned __int8)*v63 < *v61;\n    v60 = *v63++ == *v61++;\n    --v62;\n  }\n  while ( v60 );\n  if ( (!v59 && !v60) != v59 )\n    goto LABEL_161;\n  v64 = (const char *)sub_37950(v22, v5);\n  a4 = (unsigned __int8 *)v64;\n  if ( !v64 )\n  {\nLABEL_178:\n    v98 = \"file format error\";\n    v4 = 0LL;\n    v179 = 0LL;\n    v99 = 0LL;\n    goto LABEL_105;\n  }\n  v65 = v64;\n  v66 = sub_37360(v64);\n  sub_114C0(a4);\n  v67 = v66;\n  if ( v66 < 0 )\n  {\nLABEL_161:\n    v98 = \"file format error\";\n    v4 = 0LL;\n    v179 = 0LL;\n    v99 = 0LL;\n    a4 = 0LL;\n    goto LABEL_105;\n  }\n  v179 = sub_47410(v65, v5);\n  if ( !(unsigned __int8)sub_379E0(v4, v67, (__int64 (***)(void))(v179 + 32)) )\n    goto LABEL_165;\n  v68 = sub_375A0(v5, &v196);\n  v69 = 0;\n  v70 = v68 == 0;\n  v185 = v68;\n  if ( !v68 )\n    goto LABEL_165;\n  v71 = \"Private-MAC\";\n  v72 = 12LL;\n  v73 = &v196;\n  do\n  {\n    if ( !v72 )\n      break;\n    v69 = (unsigned __int8)*v73 < *v71;\n    v70 = *v73++ == *v71++;\n    --v72;\n  }\n  while ( v70 );\n  v74 = (!v69 && !v70) - v69;\n  v75 = 0;\n  v76 = v74 == 0;\n  if ( v74 )\n  {\n    v77 = \"Private-Hash\";\n    v78 = 13LL;\n    v79 = &v196;\n    do\n    {\n      if ( !v78 )\n        break;\n      v75 = (unsigned __int8)*v79 < *v77;\n      v76 = *v79++ == *v77++;\n      --v78;\n    }\n    while ( v76 );\n    if ( v176 == 1 && (!v75 && !v76) == v75 )\n    {\n      v80 = v22;\n      a4 = (unsigned __int8 *)sub_37950(v22, v5);\n      if ( a4 )\n      {\n        v186 = 0;\n        goto LABEL_64;\n      }\nLABEL_186:\n      v98 = \"file format error\";\n      v4 = 0LL;\n      v99 = 0LL;\n      goto LABEL_105;\n    }\nLABEL_165:\n    v98 = \"file format error\";\n    v4 = 0LL;\n    v99 = 0LL;\n    a4 = 0LL;\n    goto LABEL_105;\n  }\n  v80 = v22;\n  a4 = (unsigned __int8 *)sub_37950(v22, v5);\n  if ( !a4 )\n    goto LABEL_186;\n  v186 = v185;\nLABEL_64:\n  v4 = sub_47400(v80);\n  v81 = *(_OWORD *)(v173 + 8);\n  if ( s )\n  {\n    v82 = *(_QWORD *)(v173 + 8);\n    v83 = strlen(s);\n    *(_QWORD *)&v81 = v82;\n    v84 = v83;\n  }\n  else\n  {\n    v84 = 0LL;\n    s = \"\";\n  }\n  v85 = (signed __int64)(v184 + 2);\n  v86 = v176;\n  sub_37B80(\n    v176,\n    (unsigned __int64 *)v184 + 2,\n    (unsigned __int64 *)v184 + 3,\n    (__int16 *)s,\n    v84,\n    v4,\n    (__m128i)0LL,\n    &v187,\n    &v188,\n    (char **)&v189,\n    v81,\n    (__int64)&v191);\n  v87 = *(_QWORD *)(v179 + 16);\n  if ( *(_QWORD *)(v179 + 16) % (unsigned __int64)v184[1] )\n  {\n    v98 = \"file format error\";\n    v99 = 0LL;\n    goto LABEL_105;\n  }\n  if ( v184 == &off_260D80 )\n  {\n    v85 = v188;\n    v86 = v187;\n    sub_20290(v187, v188, *(_QWORD *)(v179 + 8), v87);\n  }\n  if ( v176 == 3 )\n  {\n    v89 = off_260B20;\nLABEL_168:\n    v160 = sub_47410(v86, v85);\n    v161 = (void (__fastcall **)(_QWORD, char *, signed __int64))(v160 + 24);\n    v88 = (__int64 *)v160;\n    sub_10F30((void (__fastcall **)(_QWORD, char *, signed __int64))(v160 + 24), (char *)(*v182)[13]);\n    sub_10F30(v161, (char *)v174);\n    sub_10F30(v161, v178);\n    sub_10E70(v161, *(char **)v183, *(_QWORD *)(v183 + 16));\n    sub_10E70(v161, *(char **)v179, *(_QWORD *)(v179 + 16));\n    goto LABEL_72;\n  }\n  if ( v176 != 1 )\n  {\n    v89 = off_260A60;\n    goto LABEL_168;\n  }\n  v88 = (__int64 *)v179;\n  v89 = off_260A60;\n  v185 = 0;\nLABEL_72:\n  if ( v186 )\n  {\n    v90 = (__int64 (***)(void))((__int64 (__fastcall *)(__int64 (__fastcall **)(), _QWORD))*v89)(v89, 0LL);\n    ((void (__fastcall *)(__int64 (***)(void), __int64, __int64))(*v90)[2])(v90, v189, v190);\n    ((void (__fastcall *)(__int64 (***)(void)))(*v90)[3])(v90);\n    v91 = v88[2];\n    v92 = *v88;\n    sub_10C10(v90[1]);\n    ((void (__fastcall *)(__int64 (***)(void), char *))(*v90)[4])(v90, &v195);\n    ((void (__fastcall *)(__int64 (***)(void)))(*v90)[1])(v90);\n  }\n  else\n  {\n    sub_20450((__int64 (**)(void))&off_261420, v88[1], v88[2], (__int64)&v195);\n  }\n  if ( v185 )\n    sub_47420(v88);\n  if ( *((_DWORD *)v89 + 16) > 0 )\n  {\n    v177 = v4;\n    v94 = 1LL;\n    v95 = &nptr;\n    do\n    {\n      v96 = v95;\n      v95 += 2;\n      __sprintf_chk(v96, 1LL, -1LL, \"%02x\", (unsigned __int8)*(&v194 + v94), v93);\n      v97 = v94++;\n    }\n    while ( *((_DWORD *)v89 + 16) > v97 );\n    v4 = v177;\n  }\n  if ( !strcmp((const char *)a4, &nptr) )\n  {\n    v99 = (_QWORD *)sub_11440(1uLL, 0x10uLL, 0LL);\n    v99[1] = v178;\n    v162 = ((__int64 (__fastcall *)(__int64 (__fastcall *(*)[13])(), _QWORD, _QWORD, _QWORD, _QWORD))(*v182)[1])(\n             v182,\n             *(_QWORD *)(v183 + 8),\n             *(_QWORD *)(v183 + 16),\n             *(_QWORD *)(v179 + 8),\n             *(_QWORD *)(v179 + 16));\n    *v99 = v162;\n    if ( !v162 )\n      goto LABEL_189;\n    v98 = 0LL;\n    goto LABEL_171;\n  }\n  v98 = \"wrong passphrase\";\n  v99 = &unk_265640;\n  if ( !v184[2] )\n    v98 = \"MAC failed\";\n  if ( !v184[2] )\n    v99 = 0LL;\nLABEL_105:\n  sub_114C0(v178);\n  sub_114C0(v174);\n  if ( !a4 )\n    goto LABEL_107;\n  while ( 1 )\n  {\n    sub_114C0(a4);\nLABEL_107:\n    if ( v183 )\n      sub_47420(v183);\n    if ( v179 )\n      sub_47420(v179);\n    if ( v4 )\n      sub_47420(v4);\nLABEL_96:\n    sub_47420(v173);\n    if ( v6 )\n      *v6 = v98;\n    result = v99;\n    if ( __readfsqword(0x28u) == v199 )\n      break;\nLABEL_189:\n    v172 = v99;\n    v98 = \"createkey failed\";\n    v99 = 0LL;\n    sub_114C0(v172);\nLABEL_171:\n    sub_114C0(v174);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x38b40L", 
            "funcEndAddr": "0x39788L", 
            "funcName": "sub_38B40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_397E0(__int64 a1, _QWORD *a2, __int64 a3, char ***a4, const char **a5)\n{\n  char ***v5; // r15\n  const char **v6; // r12\n  __int64 v7; // rbx\n  int v8; // ebp\n  const char *v9; // rax\n  _BOOL4 v10; // ebx\n  __int64 result; // rax\n  void *v12; // rax\n  size_t v13; // rdx\n  _BYTE *v14; // rax\n  bool v15; // cf\n  bool v16; // zf\n  const char *v17; // rdi\n  signed __int64 v18; // rcx\n  _BYTE *v19; // rsi\n  const char *v20; // rbp\n  void *v21; // rax\n  size_t v22; // rdx\n  const char *v23; // rax\n  char *v24; // rax\n  const char *v25; // rbx\n  char *v26; // rax\n  int v27; // ebp\n  int v28; // er14\n  unsigned int *v29; // r13\n  const char *v30; // rdi\n  int v31; // eax\n  const char *v32; // rbx\n  signed __int32 v33; // edx\n  char v34; // al\n  bool v35; // cf\n  bool v36; // zf\n  const char *v37; // rdi\n  signed __int64 v38; // rcx\n  char *v39; // rsi\n  char v40; // al\n  bool v41; // cf\n  bool v42; // zf\n  const char *v43; // rdi\n  signed __int64 v44; // rcx\n  char *v45; // rsi\n  char v46; // al\n  bool v47; // cf\n  bool v48; // zf\n  const char *v49; // rdi\n  signed __int64 v50; // rcx\n  char *v51; // rsi\n  char v52; // al\n  const char *v53; // rdi\n  signed __int64 v54; // rcx\n  char *v55; // rsi\n  char *v56; // rax\n  char *v57; // ST20_8\n  char v58; // al\n  bool v59; // cf\n  bool v60; // zf\n  const char *v61; // rdi\n  signed __int64 v62; // rcx\n  char *v63; // rsi\n  void *v64; // rax\n  char *v65; // rax\n  char *v66; // rcx\n  char v67; // al\n  char *v68; // rcx\n  int v69; // eax\n  const char *v70; // rdi\n  signed __int64 v71; // rcx\n  char *v72; // rsi\n  bool v73; // cf\n  bool v74; // zf\n  char v75; // al\n  bool v76; // cf\n  bool v77; // zf\n  const char *v78; // rdi\n  signed __int64 v79; // rcx\n  char *v80; // rsi\n  void *v81; // rax\n  size_t v82; // rdx\n  const char *v83; // rax\n  char *v84; // r13\n  const char *v85; // rdi\n  char *v86; // rax\n  bool v87; // cf\n  bool v88; // zf\n  char *v89; // r9\n  signed __int64 v90; // rcx\n  char *v91; // rsi\n  const char *v92; // rdi\n  char v93; // al\n  char v94; // cl\n  char *v95; // rdx\n  char *v96; // rsi\n  char v97; // cl\n  char *v98; // rax\n  char v99; // cl\n  char *v100; // ST20_8\n  size_t v101; // rax\n  char *v102; // rax\n  int v103; // er14\n  char v104; // al\n  bool v105; // cf\n  bool v106; // zf\n  char *v107; // rbp\n  __int64 v108; // rdx\n  void *v109; // rax\n  size_t v110; // rdx\n  const char *v111; // rdi\n  signed __int64 v112; // rcx\n  char *v113; // rsi\n  unsigned __int64 v114; // rax\n  signed __int32 v115; // esi\n  _QWORD *v116; // rbx\n  __int64 v117; // ST08_8\n  __int64 v118; // rdx\n  __int64 v119; // rsi\n  const char *v120; // rax\n  char *v121; // rbp\n  signed int v122; // er13\n  char *v123; // ST20_8\n  _QWORD *v124; // [rsp+8h] [rbp-B0h]\n  __int64 v125; // [rsp+10h] [rbp-A8h]\n  char **v126; // [rsp+18h] [rbp-A0h]\n  char *s; // [rsp+20h] [rbp-98h]\n  char *sa; // [rsp+20h] [rbp-98h]\n  char *v129; // [rsp+28h] [rbp-90h]\n  __int64 v130; // [rsp+38h] [rbp-80h]\n  char v131; // [rsp+4Dh] [rbp-6Bh]\n  char s1[40]; // [rsp+50h] [rbp-68h]\n  unsigned __int64 v133; // [rsp+78h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a5;\n  v7 = a1;\n  v124 = a2;\n  v125 = a3;\n  v133 = __readfsqword(0x28u);\n  v8 = sub_388D0(a1);\n  sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n  if ( v8 != 9 )\n  {\n    if ( v8 == 10 )\n    {\n      v21 = (void *)sub_112C0(*(__int64 **)(a1 + 32));\n      v23 = (const char *)sub_48120(v21, v22);\n      s = (char *)v23;\n      v24 = strchr(v23, 32);\n      v126 = (char **)v24;\n      if ( v24 )\n      {\n        v25 = v24 + 1;\n        *v24 = 0;\n        v26 = strchr(v24 + 1, 32);\n        v126 = (char **)v26;\n        if ( v26 )\n        {\n          *v26 = 0;\n          v126 = (char **)sub_46EE0(v26 + 1);\n        }\n        v27 = 0;\n        v28 = 3 * (strlen(v25) >> 2);\n        v29 = (unsigned int *)sub_11440(v28, 1uLL, 0LL);\n        while ( !memchr(v25, 0, 4uLL) )\n        {\n          if ( v28 <= v27 + 2 )\n            __assert_fail(\"pubbloblen + 3 <= pubblobsize\", \"sshpubk.c\", 0x48Du, \"openssh_loadpub\");\n          v30 = v25;\n          v25 += 4;\n          v27 += sub_478D0(v30, (char *)v29 + v27);\n        }\n        if ( *v25 )\n        {\n          v32 = \"invalid length for base64 data in OpenSSH public key file\";\n        }\n        else\n        {\n          v31 = strlen(s);\n          if ( v27 <= v31 + 3 )\n          {\n            v32 = \"key algorithms do not match in OpenSSH public key file\";\n          }\n          else\n          {\n            v32 = \"key algorithms do not match in OpenSSH public key file\";\n            v33 = _byteswap_ulong(*v29);\n            if ( v33 == v31 && !memcmp(v29 + 1, s, v33) )\n            {\n              if ( a2 )\n                *a2 = sub_46EE0(s);\n              if ( v5 )\n                *v5 = v126;\n              else\n                sub_114C0(v126);\n              v10 = 1;\n              sub_114C0(s);\n              sub_10C10(*(__int64 (***)(void))(v125 + 8));\n              sub_114C0(v29);\n              goto LABEL_8;\n            }\n          }\n        }\n      }\n      else\n      {\n        v29 = 0LL;\n        v32 = \"no key blob in OpenSSH public key file\";\n      }\n      sub_114C0(s);\n      sub_114C0(v126);\n      sub_114C0(v29);\n      if ( v6 )\n        *v6 = v32;\n    }\n    else\n    {\n      if ( v8 != 3 )\n      {\nLABEL_4:\n        v9 = \"not a PuTTY SSH-2 private key\";\n        goto LABEL_5;\n      }\n      v34 = sub_375A0((__int64 *)(a1 + 32), s1);\n      v35 = 0;\n      v36 = v34 == 0;\n      if ( !v34 )\n        goto LABEL_144;\n      v37 = \"PuTTY-User-Key-File-3\";\n      v38 = 22LL;\n      v39 = s1;\n      do\n      {\n        if ( !v38 )\n          break;\n        v35 = (unsigned __int8)*v39 < *v37;\n        v36 = *v39++ == *v37++;\n        --v38;\n      }\n      while ( v36 );\n      v40 = (!v35 && !v36) - v35;\n      v41 = 0;\n      v42 = v40 == 0;\n      if ( v40 )\n      {\n        v43 = \"PuTTY-User-Key-File-2\";\n        v44 = 22LL;\n        v45 = s1;\n        do\n        {\n          if ( !v44 )\n            break;\n          v41 = (unsigned __int8)*v45 < *v43;\n          v42 = *v45++ == *v43++;\n          --v44;\n        }\n        while ( v42 );\n        v46 = (!v41 && !v42) - v41;\n        v47 = 0;\n        v48 = v46 == 0;\n        if ( v46 )\n        {\n          v49 = \"PuTTY-User-Key-File-1\";\n          v50 = 22LL;\n          v51 = s1;\n          do\n          {\n            if ( !v50 )\n              break;\n            v47 = (unsigned __int8)*v51 < *v49;\n            v48 = *v51++ == *v49++;\n            --v50;\n          }\n          while ( v48 );\n          v52 = (!v47 && !v48) - v47;\n          v35 = 0;\n          v36 = v52 == 0;\n          if ( v52 )\n          {\nLABEL_144:\n            v53 = \"PuTTY-User-Key-File-\";\n            v54 = 20LL;\n            v55 = s1;\n            v9 = \"PuTTY key format too new\";\n            do\n            {\n              if ( !v54 )\n                break;\n              v35 = (unsigned __int8)*v55 < *v53;\n              v36 = *v55++ == *v53++;\n              --v54;\n            }\n            while ( v36 );\n            if ( (!v35 && !v36) == v35 )\n              goto LABEL_5;\n            goto LABEL_4;\n          }\n        }\n      }\n      v56 = (char *)sub_37950((_QWORD *)(v7 + 8), (__int64 *)(v7 + 32));\n      if ( !v56 )\n        goto LABEL_145;\n      v57 = v56;\n      v126 = (char **)sub_38B20(v56);\n      sub_114C0(v57);\n      if ( !v126 )\n        goto LABEL_145;\n      v58 = sub_375A0((__int64 *)(v7 + 32), s1);\n      v59 = 0;\n      v60 = v58 == 0;\n      if ( !v58 )\n        goto LABEL_145;\n      v61 = \"Encryption\";\n      v62 = 11LL;\n      v63 = s1;\n      do\n      {\n        if ( !v62 )\n          break;\n        v59 = (unsigned __int8)*v63 < *v61;\n        v60 = *v63++ == *v61++;\n        --v62;\n      }\n      while ( v60 );\n      if ( (!v59 && !v60) != v59\n        || (v64 = (void *)sub_37950((_QWORD *)(v7 + 8), (__int64 *)(v7 + 32))) == 0LL\n        || (sub_114C0(v64), !(unsigned __int8)sub_375A0((__int64 *)(v7 + 32), s1))\n        || strcmp(s1, \"Comment\")\n        || (v65 = (char *)sub_37950((_QWORD *)(v7 + 8), (__int64 *)(v7 + 32)), (v66 = v65) == 0LL) )\n      {\nLABEL_145:\n        v9 = \"file format error\";\nLABEL_5:\n        if ( v6 )\n          *v6 = v9;\n        goto LABEL_7;\n      }\n      if ( v5 )\n      {\n        *v5 = (char **)v65;\n      }\n      else\n      {\n        v123 = v65;\n        sub_114C0(v65);\n        v66 = v123;\n      }\n      sa = v66;\n      v67 = sub_375A0((__int64 *)(v7 + 32), s1);\n      v68 = sa;\n      if ( v67 )\n      {\n        v69 = strcmp(s1, \"Public-Lines\");\n        v68 = sa;\n        if ( !v69 )\n        {\n          v120 = (const char *)sub_37950((_QWORD *)(v7 + 8), (__int64 *)(v7 + 32));\n          v121 = (char *)v120;\n          v68 = sa;\n          if ( v120 )\n          {\n            v122 = sub_37360(v120);\n            sub_114C0(v121);\n            v68 = sa;\n            if ( v122 >= 0 )\n            {\n              v10 = sub_379E0(v7, v122, (__int64 (***)(void))(v125 + 8));\n              v68 = sa;\n              if ( (_BYTE)v10 )\n              {\n                if ( v124 )\n                  *v124 = sub_46EE0(v126[13]);\n                goto LABEL_8;\n              }\n            }\n          }\n        }\n      }\n      if ( v6 )\n        *v6 = \"file format error\";\n      if ( v5 )\n      {\n        v10 = 0;\n        sub_114C0(v68);\n        *v5 = 0LL;\n        goto LABEL_8;\n      }\n    }\nLABEL_7:\n    v10 = 0;\n    goto LABEL_8;\n  }\n  v12 = (void *)sub_112C0(*(__int64 **)(a1 + 32));\n  v14 = (_BYTE *)sub_48120(v12, v13);\n  v15 = 0;\n  v16 = v14 == 0LL;\n  if ( !v14 )\n  {\n    v20 = \"invalid begin line in SSH-2 public key file\";\n    sub_114C0(0LL);\n    sub_114C0(0LL);\n    goto LABEL_16;\n  }\n  v17 = \"---- BEGIN SSH2 PUBLIC KEY ----\";\n  v18 = 32LL;\n  v19 = v14;\n  do\n  {\n    if ( !v18 )\n      break;\n    v15 = *v19 < (const unsigned __int8)*v17;\n    v16 = *v19++ == *v17++;\n    --v18;\n  }\n  while ( v16 );\n  if ( (!v15 && !v16) != v15 )\n  {\n    v20 = \"invalid begin line in SSH-2 public key file\";\n    sub_114C0(v14);\n    sub_114C0(0LL);\n    goto LABEL_16;\n  }\n  sub_114C0(v14);\n  v126 = 0LL;\n  while ( 1 )\n  {\n    v81 = (void *)sub_112C0(*(__int64 **)(v7 + 32));\n    v83 = (const char *)sub_48120(v81, v82);\n    v84 = (char *)v83;\n    if ( !v83 )\n    {\n      v20 = \"truncated SSH-2 public key file\";\nLABEL_105:\n      sub_114C0(v84);\n      sub_114C0(v126);\n      goto LABEL_16;\n    }\n    v85 = v83;\n    v86 = strstr(v83, \": \");\n    v87 = 0;\n    v88 = v86 == 0LL;\n    v89 = v86;\n    if ( !v86 )\n      break;\n    *v86 = 0;\n    v90 = 8LL;\n    v91 = v84;\n    v92 = \"Comment\";\n    do\n    {\n      if ( !v90 )\n        break;\n      v87 = (unsigned __int8)*v91 < *v92;\n      v88 = *v91++ == *v92++;\n      --v90;\n    }\n    while ( v88 );\n    v93 = (!v87 && !v88) - v87;\n    v73 = 0;\n    v74 = v93 == 0;\n    if ( !v93 )\n    {\n      v94 = v89[2];\n      v95 = v89 + 2;\n      if ( v94 != 34 )\n        goto LABEL_93;\n      v129 = v89;\n      v100 = v89 + 2;\n      v101 = strlen(v89 + 2);\n      v95 = v100;\n      v94 = 34;\n      v102 = &v100[v101 - 1];\n      if ( *v102 != 34 )\n        goto LABEL_146;\n      *v102 = 0;\n      v95 = v129 + 3;\n      v94 = v129[3];\nLABEL_93:\n      if ( v94 )\n      {\nLABEL_146:\n        v96 = v84;\n        do\n        {\n          while ( 1 )\n          {\n            if ( v94 == 92 )\n            {\n              v99 = v95[1];\n              if ( v99 )\n                break;\n            }\n            v97 = *v95;\n            ++v96;\n            v98 = v95++;\n            *(v96 - 1) = v97;\n            v94 = v98[1];\n            if ( !v94 )\n              goto LABEL_99;\n          }\n          *(++v96 - 1) = v99;\n          v94 = v95[2];\n          v95 += 2;\n        }\n        while ( v94 );\n      }\n      else\n      {\n        v96 = v84;\n      }\nLABEL_99:\n      *v96 = 0;\n      sub_114C0(v126);\n      v126 = (char **)sub_46EE0(v84);\n      goto LABEL_85;\n    }\n    v70 = \"Subject\";\n    v71 = 8LL;\n    v72 = v84;\n    do\n    {\n      if ( !v71 )\n        break;\n      v73 = (unsigned __int8)*v72 < *v70;\n      v74 = *v72++ == *v70++;\n      --v71;\n    }\n    while ( v74 );\n    v75 = (!v73 && !v74) - v73;\n    v76 = 0;\n    v77 = v75 == 0;\n    if ( v75 )\n    {\n      v78 = \"x-\";\n      v79 = 2LL;\n      v80 = v84;\n      do\n      {\n        if ( !v79 )\n          break;\n        v76 = (unsigned __int8)*v80 < *v78;\n        v77 = *v80++ == *v78++;\n        --v79;\n      }\n      while ( v77 );\n      if ( (!v76 && !v77) != v76 )\n      {\n        v20 = \"unrecognised header in SSH-2 public key file\";\n        goto LABEL_105;\n      }\n    }\nLABEL_85:\n    sub_114C0(v84);\n  }\n  v130 = sub_47400(v85);\n  v103 = 0;\n  while ( 1 )\n  {\n    v104 = *v84;\n    v105 = (unsigned __int8)*v84 < 0x2Du;\n    v106 = *v84 == 45;\n    if ( *v84 == 45 )\n      break;\n    v107 = v84;\n    if ( v104 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v108 = v103++;\n          s1[v108] = v104;\n          if ( v103 == 4 )\n            break;\n          v104 = *++v107;\n          if ( !*v107 )\n            goto LABEL_113;\n        }\n        ++v107;\n        sub_478D0(s1, &v131);\n        v103 = 0;\n        sub_10C10((__int64 (**)(void))(v130 + 24));\n        v104 = *v107;\n      }\n      while ( *v107 );\n    }\nLABEL_113:\n    sub_114C0(v84);\n    v109 = (void *)sub_112C0(*(__int64 **)(v7 + 32));\n    v84 = (char *)sub_48120(v109, v110);\n    if ( !v84 )\n      goto LABEL_114;\n  }\n  v111 = \"---- END SSH2 PUBLIC KEY ----\";\n  v112 = 30LL;\n  v113 = v84;\n  do\n  {\n    if ( !v112 )\n      break;\n    v105 = (unsigned __int8)*v113 < *v111;\n    v106 = *v113++ == *v111++;\n    --v112;\n  }\n  while ( v106 );\n  if ( (!v105 && !v106) == v105 )\n  {\n    sub_114C0(v84);\n    v114 = *(_QWORD *)(v130 + 16);\n    if ( v114 <= 3 )\n    {\n      v20 = \"not enough data in SSH-2 public key file\";\n    }\n    else\n    {\n      v115 = _byteswap_ulong(**(_DWORD **)(v130 + 8));\n      if ( v115 >= 0 && v115 <= v114 - 4 )\n      {\n        v116 = v124;\n        if ( v124 )\n        {\n          v117 = *(_QWORD *)v130;\n          *v116 = sub_47120((unsigned __int64)\"%.*s\");\n        }\n        if ( !v5 )\n          goto LABEL_135;\n        *v5 = v126;\n        goto LABEL_128;\n      }\n      v20 = \"invalid algorithm prefix in SSH-2 public key file\";\n    }\n    sub_114C0(0LL);\n    sub_114C0(v126);\n    goto LABEL_115;\n  }\nLABEL_114:\n  v20 = \"invalid end line in SSH-2 public key file\";\n  sub_114C0(v84);\n  sub_114C0(v126);\n  if ( !v130 )\n    goto LABEL_16;\nLABEL_115:\n  sub_47420(v130);\nLABEL_16:\n  v10 = 0;\n  if ( v6 )\n    *v6 = v20;\nLABEL_8:\n  while ( 1 )\n  {\n    result = (unsigned int)v10;\n    if ( __readfsqword(0x28u) == v133 )\n      break;\nLABEL_135:\n    sub_114C0(v126);\nLABEL_128:\n    v118 = *(_QWORD *)(v130 + 16);\n    v119 = *(_QWORD *)(v130 + 8);\n    sub_10C20(*(__int64 (***)(void))(v125 + 8));\n    v10 = 1;\n    sub_47420(v130);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x397e0L", 
            "funcEndAddr": "0x3a141L", 
            "funcName": "sub_397E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3A1B0(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // r13\n  __int64 v3; // rbp\n  __int64 *v4; // r12\n  char v5; // al\n  bool v6; // cf\n  bool v7; // zf\n  const char *v8; // rdi\n  signed __int64 v9; // rcx\n  char *v10; // rsi\n  char v11; // al\n  bool v12; // cf\n  bool v13; // zf\n  const char *v14; // rdi\n  signed __int64 v15; // rcx\n  char *v16; // rsi\n  char v17; // al\n  bool v18; // cf\n  bool v19; // zf\n  _QWORD *v20; // rbp\n  void *v21; // rax\n  unsigned int v22; // eax\n  bool v23; // cf\n  bool v24; // zf\n  unsigned int v25; // er14\n  const char *v26; // rdi\n  signed __int64 v27; // rcx\n  char *v28; // rsi\n  void *v29; // r15\n  unsigned __int8 v30; // al\n  bool v31; // cf\n  bool v32; // zf\n  const char *v33; // rdi\n  signed __int64 v34; // rcx\n  char *v35; // rsi\n  const char *v36; // rdi\n  signed __int64 v37; // rcx\n  char *v38; // rsi\n  void *v40; // rax\n  bool v41; // cf\n  bool v42; // zf\n  const char *v43; // rdi\n  signed __int64 v44; // rcx\n  _BYTE *v45; // rsi\n  unsigned __int8 v46; // [rsp+Fh] [rbp-69h]\n  char v47; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+38h] [rbp-40h]\n\n  v2 = a2;\n  v3 = a1;\n  v48 = __readfsqword(0x28u);\n  if ( a2 )\n    *a2 = 0LL;\n  v4 = (__int64 *)(a1 + 32);\n  v5 = sub_375A0((__int64 *)(a1 + 32), &v47);\n  v6 = 0;\n  v7 = v5 == 0;\n  if ( !v5 )\n    goto LABEL_42;\n  v8 = \"PuTTY-User-Key-File-3\";\n  v9 = 22LL;\n  v10 = &v47;\n  do\n  {\n    if ( !v9 )\n      break;\n    v6 = (unsigned __int8)*v10 < *v8;\n    v7 = *v10++ == *v8++;\n    --v9;\n  }\n  while ( v7 );\n  v11 = (!v6 && !v7) - v6;\n  v12 = 0;\n  v13 = v11 == 0;\n  if ( v11 )\n  {\n    v14 = \"PuTTY-User-Key-File-2\";\n    v15 = 22LL;\n    v16 = &v47;\n    do\n    {\n      if ( !v15 )\n        break;\n      v12 = (unsigned __int8)*v16 < *v14;\n      v13 = *v16++ == *v14++;\n      --v15;\n    }\n    while ( v13 );\n    v17 = (!v12 && !v13) - v12;\n    v18 = 0;\n    v19 = v17 == 0;\n    if ( v17 )\n    {\n      v36 = \"PuTTY-User-Key-File-1\";\n      v37 = 22LL;\n      v38 = &v47;\n      do\n      {\n        if ( !v37 )\n          break;\n        v18 = (unsigned __int8)*v38 < *v36;\n        v19 = *v38++ == *v36++;\n        --v37;\n      }\n      while ( v19 );\n      if ( (!v18 && !v19) != v18 )\n        goto LABEL_42;\n    }\n  }\n  v20 = (_QWORD *)(v3 + 8);\n  v21 = (void *)sub_37950(v20, v4);\n  if ( !v21 )\n    goto LABEL_42;\n  sub_114C0(v21);\n  v22 = sub_375A0(v4, &v47);\n  v23 = 0;\n  v24 = (_BYTE)v22 == 0;\n  v25 = v22;\n  if ( !(_BYTE)v22 )\n    goto LABEL_42;\n  v26 = \"Encryption\";\n  v27 = 11LL;\n  v28 = &v47;\n  do\n  {\n    if ( !v27 )\n      break;\n    v23 = (unsigned __int8)*v28 < *v26;\n    v24 = *v28++ == *v26++;\n    --v27;\n  }\n  while ( v24 );\n  if ( (!v23 && !v24) == v23 && (v29 = (void *)sub_37950(v20, v4)) != 0LL )\n  {\n    v30 = sub_375A0(v4, &v47);\n    v31 = 0;\n    v32 = v30 == 0;\n    if ( v30 )\n    {\n      v33 = \"Comment\";\n      v34 = 8LL;\n      v35 = &v47;\n      do\n      {\n        if ( !v34 )\n          break;\n        v31 = (unsigned __int8)*v35 < *v33;\n        v32 = *v35++ == *v33++;\n        --v34;\n      }\n      while ( v32 );\n      if ( (!v31 && !v32) == v31 )\n      {\n        v46 = v30;\n        v40 = (void *)sub_37950(v20, v4);\n        if ( !v40 )\n        {\n          sub_114C0(v29);\n          return v46;\n        }\n        v41 = 0;\n        v42 = v2 == 0LL;\n        if ( v2 )\n          *v2 = v40;\n        else\n          sub_114C0(v40);\n        v43 = \"aes256-cbc\";\n        v44 = 11LL;\n        v45 = v29;\n        do\n        {\n          if ( !v44 )\n            break;\n          v41 = *v45 < (const unsigned __int8)*v43;\n          v42 = *v45++ == *v43++;\n          --v44;\n        }\n        while ( v42 );\n        LOBYTE(v25) = (!v41 && !v42) == v41;\n      }\n    }\n    sub_114C0(v29);\n  }\n  else\n  {\nLABEL_42:\n    v25 = 0;\n  }\n  return v25;\n}\n", 
            "funcStartAddr": "0x3a1b0L", 
            "funcEndAddr": "0x3a374L", 
            "funcName": "sub_3A1B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3A380(__int64 a1, _QWORD *a2)\n{\n  __int64 *v2; // rax\n  __int64 *v3; // rbx\n  unsigned __int8 v4; // ST0F_1\n  __int64 result; // rax\n\n  v2 = sub_38100(a1, 0LL);\n  if ( v2 )\n  {\n    v3 = v2;\n    v4 = sub_3A1B0((__int64)(v2 + 3), a2);\n    sub_37FC0(v3);\n    result = v4;\n  }\n  else\n  {\n    result = 0LL;\n    if ( a2 )\n      *a2 = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3a380L", 
            "funcEndAddr": "0x3a3d6L", 
            "funcName": "sub_3A380"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3A400(__int64 a1, __int64 a2, signed int a3, signed int a4)\n{\n  signed int v4; // er13\n  signed int v5; // er12\n  __int64 v7; // [rsp+0h] [rbp-48h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+18h] [rbp-30h]\n\n  v4 = a4;\n  v5 = a3;\n  v9 = __readfsqword(0x28u);\n  sub_11400(&v7, a1);\n  sub_37EB0((__int64 (__fastcall ***)(_QWORD, char *, signed __int64))&v8, a2, v5, v4);\n  return __readfsqword(0x28u) ^ v9;\n}\n", 
            "funcStartAddr": "0x3a400L", 
            "funcEndAddr": "0x3a463L", 
            "funcName": "sub_3A400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3A470(char **a1, const char *a2, const __m128i *a3)\n{\n  char **v3; // r14\n  const char *v4; // r15\n  const __m128i *v5; // rbx\n  __int64 v6; // rax\n  char *v7; // rdi\n  signed __int64 v8; // rsi\n  __int64 v9; // r13\n  __int64 v10; // r12\n  char **v11; // rax\n  signed int v12; // ecx\n  const char *v13; // rax\n  __int64 v14; // rdi\n  size_t v15; // rdx\n  char *v16; // rdi\n  __int64 v17; // rax\n  __m128i v18; // xmm0\n  __int64 v19; // rax\n  __int64 v20; // r9\n  __int64 v21; // r10\n  __int64 v22; // ST70_8\n  __int64 v23; // ST78_8\n  size_t v24; // rax\n  unsigned __int64 v25; // r8\n  __int16 *v26; // rcx\n  __int64 (__fastcall **v27)(); // rbp\n  __int128 v28; // ST18_16\n  __int64 v29; // rdi\n  __int64 v30; // rax\n  void (__fastcall **v31)(_QWORD, char *, signed __int64); // rbx\n  __int64 v32; // ST70_8\n  __int64 v33; // rsi\n  __int64 v34; // rdi\n  __int64 v35; // rbx\n  __int64 v36; // rcx\n  char *v37; // rdx\n  int v38; // ecx\n  signed __int64 v39; // r14\n  __int64 v40; // rdx\n  int v41; // eax\n  __int64 result; // rax\n  unsigned __int64 v43; // r15\n  __int64 v44; // rdx\n  char *dest; // [rsp+0h] [rbp-118h]\n  __int64 v46; // [rsp+8h] [rbp-110h]\n  char *v47; // [rsp+18h] [rbp-100h]\n  __int64 v48; // [rsp+20h] [rbp-F8h]\n  int v49; // [rsp+34h] [rbp-E4h]\n  char **v50; // [rsp+38h] [rbp-E0h]\n  __int64 v51; // [rsp+50h] [rbp-C8h]\n  __int64 v52; // [rsp+58h] [rbp-C0h]\n  __int64 v53; // [rsp+60h] [rbp-B8h]\n  __int64 v54; // [rsp+70h] [rbp-A8h]\n  __int64 v55; // [rsp+78h] [rbp-A0h]\n  __m128i v56; // [rsp+80h] [rbp-98h]\n  __m128i v57; // [rsp+90h] [rbp-88h]\n  __int64 v58; // [rsp+A0h] [rbp-78h]\n  char v59; // [rsp+AFh] [rbp-69h]\n  char v60; // [rsp+B0h] [rbp-68h]\n  unsigned __int64 v61; // [rsp+D8h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a2;\n  v5 = a3;\n  v61 = __readfsqword(0x28u);\n  v6 = sub_47400(a1);\n  v7 = *a1;\n  v8 = v6 + 24;\n  v9 = v6;\n  (*(void (__fastcall **)(char *, __int64))(*(_QWORD *)*v3 + 56LL))(v7, v6 + 24);\n  v10 = sub_47410(v7, v8);\n  (*(void (__fastcall **)(char *, __int64))(*(_QWORD *)*v3 + 64LL))(*v3, v10 + 24);\n  v11 = &off_260D80;\n  if ( !v4 )\n    v11 = &off_260DA0;\n  v50 = v11;\n  v13 = \"aes256-cbc\";\n  if ( !v4 )\n    v13 = \"none\";\n  v47 = (char *)v13;\n  v12 = (unsigned __int64)v4 < 1 ? 1 : 16;\n  v49 = v12 + *(_DWORD *)(v10 + 16) - 1 - (v12 + *(_DWORD *)(v10 + 16) - 1) % v12;\n  dest = (char *)sub_11440(v49, 1uLL, 0LL);\n  memset(dest, 0, v49);\n  memcpy(dest, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16));\n  sub_20450((__int64 (**)(void))&off_261420, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), (__int64)&v60);\n  v14 = *(_QWORD *)(v10 + 16);\n  v15 = v49 - v14;\n  if ( v15 > 0x13 )\n    goto LABEL_35;\n  v16 = &dest[v14];\n  memcpy(v16, &v60, v15);\n  v17 = v5[2].m128i_i64[0];\n  v56 = _mm_loadu_si128(v5);\n  v18 = _mm_loadu_si128(v5 + 1);\n  v58 = v17;\n  v57 = v18;\n  v19 = sub_47400(v16);\n  v46 = v19;\n  if ( v56.m128i_i32[0] == 3 )\n  {\n    if ( v57.m128i_i64[1] )\n    {\n      v16 = (char *)(v19 + 24);\n      sub_10C10((__int64 (**)(void))(v19 + 24));\n    }\n    else\n    {\n      v16 = (char *)sub_472D0(v19);\n      sub_3B660(v16, 16LL);\n    }\n  }\n  v48 = sub_47400(v16);\n  v20 = *(_QWORD *)(v46 + 8);\n  v21 = *(_QWORD *)(v46 + 16);\n  if ( v4 )\n  {\n    v22 = *(_QWORD *)(v46 + 8);\n    v23 = *(_QWORD *)(v46 + 16);\n    v24 = strlen(v4);\n    v20 = v22;\n    v21 = v23;\n    v25 = v24;\n    v26 = (__int16 *)v4;\n  }\n  else\n  {\n    v25 = 0LL;\n    v26 = (__int16 *)\"\";\n  }\n  v27 = off_260B20;\n  *((_QWORD *)&v28 + 1) = v21;\n  *(_QWORD *)&v28 = v20;\n  v29 = v56.m128i_u32[0];\n  sub_37B80(\n    v56.m128i_u32[0],\n    (unsigned __int64 *)v50 + 2,\n    (unsigned __int64 *)v50 + 3,\n    v26,\n    v25,\n    v48,\n    v18,\n    &v51,\n    &v53,\n    (char **)&v54,\n    v28,\n    (__int64)&v56);\n  if ( v56.m128i_i32[0] == 2 )\n    v27 = off_260A60;\n  v30 = sub_47410(v29, v50 + 2);\n  v31 = (void (__fastcall **)(_QWORD, char *, signed __int64))(v30 + 24);\n  v32 = v30;\n  sub_10F30((void (__fastcall **)(_QWORD, char *, signed __int64))(v30 + 24), *(char **)(*(_QWORD *)*v3 + 104LL));\n  sub_10F30(v31, v47);\n  sub_10F30(v31, v3[1]);\n  sub_10E70(v31, *(char **)v9, *(_QWORD *)(v9 + 16));\n  sub_10E70(v31, dest, v49);\n  v33 = v54;\n  sub_204B0(\n    (__int64 (__fastcall **)(_QWORD, _QWORD))v27,\n    v54,\n    v55,\n    *(_QWORD *)(v32 + 8),\n    *(_QWORD *)(v32 + 16),\n    (__int64)&v60);\n  v34 = v32;\n  sub_47420(v32);\n  if ( v4 )\n  {\n    if ( v52 != 32 )\n      __assert_fail(\"cipherkey.len == 32\", \"sshpubk.c\", 0x60Bu, \"ppk_save_sb\");\n    v33 = v53;\n    v34 = v51;\n    sub_20250(v51, v53, (__int64)dest, v49);\n  }\n  v35 = sub_47410(v34, v33);\n  v36 = *(_QWORD *)(*(_QWORD *)*v3 + 104LL);\n  sub_474E0(v35);\n  sub_474E0(v35);\n  v37 = v3[1];\n  sub_474E0(v35);\n  v38 = *(_DWORD *)(v9 + 16) + 47;\n  sub_474E0(v35);\n  sub_37EB0(\n    (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v35 + 32),\n    *(_QWORD *)(v9 + 8),\n    *(_DWORD *)(v9 + 16),\n    64);\n  if ( v56.m128i_i32[0] == 3 && v50[2] )\n  {\n    sub_474E0(v35);\n    sub_474E0(v35);\n    if ( v56.m128i_i8[12] )\n      __assert_fail(\"!params.argon2_passes_auto\", \"sshpubk.c\", 0x61Cu, \"ppk_save_sb\");\n    sub_474E0(v35);\n    sub_474E0(v35);\n    sub_474E0(v35);\n    if ( *(_QWORD *)(v46 + 16) )\n    {\n      v43 = 0LL;\n      do\n      {\n        v44 = *(unsigned __int8 *)(*(_QWORD *)(v46 + 8) + v43++);\n        sub_474E0(v35);\n      }\n      while ( *(_QWORD *)(v46 + 16) > v43 );\n    }\n    sub_474E0(v35);\n  }\n  sub_474E0(v35);\n  sub_37EB0((__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v35 + 32), (__int64)dest, v49, 64);\n  sub_474E0(v35);\n  if ( *((_DWORD *)v27 + 16) > 0 )\n  {\n    v39 = 1LL;\n    do\n    {\n      v40 = (unsigned __int8)*(&v59 + v39);\n      sub_474E0(v35);\n      v41 = v39++;\n    }\n    while ( *((_DWORD *)v27 + 16) > v41 );\n  }\n  sub_474E0(v35);\n  sub_47420(v48);\n  sub_47420(v46);\n  sub_47420(v9);\n  sub_47420(v10);\n  sub_47E30(dest, v49);\n  sub_114C0(dest);\n  result = v35;\n  if ( __readfsqword(0x28u) != v61 )\nLABEL_35:\n    __assert_fail(\"priv_encrypted_len - priv_blob->len < 20\", \"sshpubk.c\", 0x5DFu, \"ppk_save_sb\");\n  return result;\n}\n", 
            "funcStartAddr": "0x3a470L", 
            "funcEndAddr": "0x3aac3L", 
            "funcName": "sub_3A470"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3AAD0(__int64 a1, char **a2, const char *a3, const __m128i *a4)\n{\n  const char *v4; // r13\n  const __m128i *v5; // r14\n  unsigned int v6; // er12\n  __int64 v7; // rax\n  FILE *v8; // rbx\n  __int64 v9; // rbp\n  size_t v10; // r14\n  __int64 v11; // r13\n\n  v4 = a3;\n  v5 = a4;\n  v6 = 0;\n  v7 = sub_448E0(a1, \"wb\", 1LL);\n  if ( v7 )\n  {\n    v8 = (FILE *)v7;\n    v9 = sub_3A470(a2, v4, v5);\n    v10 = fwrite(*(const void **)v9, 1uLL, *(_QWORD *)(v9 + 16), v8);\n    v11 = *(_QWORD *)(v9 + 16);\n    if ( !fclose(v8) )\n      LOBYTE(v6) = v10 == v11;\n    sub_47420(v9);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x3aad0L", 
            "funcEndAddr": "0x3ab59L", 
            "funcName": "sub_3AAD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3AB60(__int64 *a1)\n{\n  void *v1; // r13\n  void *v2; // r12\n  __int64 v3; // rbx\n\n  v1 = (void *)sub_14380(a1[2]);\n  v2 = (void *)sub_14380(a1[1]);\n  a1[7];\n  sub_134B0((__int64 *)a1[1]);\n  v3 = sub_47120((unsigned __int64)\"%zu %s %s%s%s\");\n  sub_114C0(v1);\n  sub_114C0(v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x3ab60L", 
            "funcEndAddr": "0x3abecL", 
            "funcName": "sub_3AB60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3ABF0(__int64 a1, __int64 *a2)\n{\n  void *v2; // rbx\n\n  v2 = (void *)sub_3AB60(a2);\n  __fprintf_chk(a1, 1LL, \"%s\\n\", v2);\n  sub_114C0(v2);\n}\n", 
            "funcStartAddr": "0x3abf0L", 
            "funcEndAddr": "0x3ac2bL", 
            "funcName": "sub_3ABF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3AC30(char **a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rbp\n\n  v1 = sub_47400(a1);\n  (*(void (__fastcall **)(char *, __int64))(*(_QWORD *)*a1 + 56LL))(*a1, v1 + 24);\n  v2 = sub_373D0(a1[1], *(_QWORD *)v1, *(_DWORD *)(v1 + 16));\n  sub_47420(v1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x3ac30L", 
            "funcEndAddr": "0x3ac73L", 
            "funcName": "sub_3AC30"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3AC80(FILE *s, char *a2, __int64 a3, int a4, int a5)\n{\n  __int64 v5; // r13\n  FILE *v6; // rbp\n  char *v7; // rbx\n  signed int v8; // er12\n  void *v9; // rbx\n  unsigned __int64 result; // rax\n  unsigned __int64 v11; // rt1\n  char v12; // al\n  int v13; // edi\n  signed int v14; // ebx\n  signed int v15; // er15\n  unsigned int v16; // er14\n  __int64 v17; // rdi\n  char sa; // [rsp+13h] [rbp-45h]\n  char v19; // [rsp+17h] [rbp-41h]\n  unsigned __int64 v20; // [rsp+18h] [rbp-40h]\n\n  v5 = a3;\n  v6 = s;\n  v7 = a2;\n  v8 = a4;\n  v20 = __readfsqword(0x28u);\n  if ( a5 == 9 )\n  {\n    fwrite(\"---- BEGIN SSH2 PUBLIC KEY ----\\n\", 1uLL, 0x20uLL, s);\n    if ( a2 )\n    {\n      fwrite(\"Comment: \\\"\", 1uLL, 0xAuLL, s);\n      v12 = *a2;\n      if ( *a2 )\n      {\n        do\n        {\n          if ( v12 == 92 || v12 == 34 )\n            fputc(92, v6);\n          v13 = *v7++;\n          fputc(v13, v6);\n          v12 = *v7;\n        }\n        while ( *v7 );\n      }\n      fwrite(\"\\\"\\n\", 1uLL, 2uLL, v6);\n    }\n    if ( v8 > 0 )\n    {\n      v14 = 3;\n      if ( v8 <= 3 )\n        v14 = v8;\n      sub_47800(v5, (unsigned int)v14, &sa);\n      v15 = 1;\n      v19 = 0;\n      fputs(&sa, v6);\n      while ( v8 > v14 )\n      {\n        while ( 1 )\n        {\n          v16 = v8 - v14;\n          if ( v8 - v14 > 3 )\n            v16 = 3;\n          v17 = v5 + v14;\n          ++v15;\n          v14 += v16;\n          sub_47800(v17, v16, &sa);\n          v19 = 0;\n          fputs(&sa, v6);\n          if ( v15 != 16 )\n            break;\n          v15 = 0;\n          fputc(10, v6);\n          if ( v8 <= v14 )\n            goto LABEL_23;\n        }\n      }\nLABEL_23:\n      if ( v15 )\n        fputc(10, v6);\n    }\n    fwrite(\"---- END SSH2 PUBLIC KEY ----\\n\", 1uLL, 0x1EuLL, v6);\n  }\n  else\n  {\n    if ( a5 != 10 )\n      goto LABEL_26;\n    v9 = (void *)sub_373D0(a2, a3, a4);\n    __fprintf_chk(s, 1LL, \"%s\\n\", v9);\n    sub_114C0(v9);\n  }\n  v11 = __readfsqword(0x28u);\n  result = v11 ^ v20;\n  if ( v11 != v20 )\nLABEL_26:\n    __assert_fail(\"false && \\\"Bad key type in ssh2_write_pubkey\\\"\", \"sshpubk.c\", 0x6C2u, \"ssh2_write_pubkey\");\n  return result;\n}\n", 
            "funcStartAddr": "0x3ac80L", 
            "funcEndAddr": "0x3ae92L", 
            "funcName": "sub_3AC80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3AEA0(__int64 a1, const char *a2, int a3)\n{\n  __int64 v3; // r12\n  int v4; // ebx\n  __int64 v5; // rbp\n  size_t v6; // rdx\n  char *v7; // r14\n  char *v8; // rbx\n  unsigned int v9; // er14\n  signed __int64 v10; // rsi\n  char *v11; // rdi\n  signed __int64 v13; // rbx\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n  size_t v17; // rsi\n  size_t v18; // r15\n  __int64 (__fastcall *(*v19)[13])(); // rax\n  __int64 v20; // [rsp+10h] [rbp-98h]\n  __int64 v21; // [rsp+18h] [rbp-90h]\n  const char *v22; // [rsp+20h] [rbp-88h]\n  int v23; // [rsp+28h] [rbp-80h]\n  __int64 *v24; // [rsp+30h] [rbp-78h]\n  char v25; // [rsp+3Bh] [rbp-6Dh]\n  char v26; // [rsp+3Fh] [rbp-69h]\n  char v27[40]; // [rsp+40h] [rbp-68h]\n  char v28[40]; // [rsp+61h] [rbp-47h]\n  unsigned __int64 v29; // [rsp+68h] [rbp-40h]\n\n  v3 = (__int64)a2;\n  v4 = a3;\n  v29 = __readfsqword(0x28u);\n  v5 = sub_47400(a1);\n  v20 = a1;\n  v22 = a2;\n  v21 = 0LL;\n  v23 = 0;\n  v24 = &v20;\n  v7 = sub_111C0((__int64)&v20);\n  if ( !*((_DWORD *)v24 + 6) )\n  {\n    v17 = v6;\n    v18 = v6;\n    v19 = sub_38870(v7, v6);\n    if ( v19 )\n    {\n      ((void (__fastcall *)(__int64 (__fastcall *(*)[13])(), __int64, __int64))(*v19)[12])(v19, a1, v3);\n      sub_470B0(v18, a1);\n      a2 = \"%.*s %d \";\n    }\n    else\n    {\n      sub_470B0(v18, v17);\n      a2 = \"%.*s \";\n    }\n    sub_474E0(v5);\n  }\n  if ( v4 )\n  {\n    if ( v4 == 1 )\n    {\n      v8 = v27;\n      v9 = 32;\n      sub_20450((__int64 (**)(void))&off_2610A0, a1, v3, (__int64)v27);\n      sub_10C20((__int64 (**)(void))(v5 + 24));\n      do\n      {\n        v10 = 3LL;\n        v11 = v8;\n        if ( v9 <= 3 )\n          v10 = v9;\n        v8 += 3;\n        sub_47800(v11, v10, &v25);\n        sub_10C10((__int64 (**)(void))(v5 + 24));\n        v9 -= 3;\n      }\n      while ( v8 != v28 );\n      a2 = (_BYTE *)(&word_3C + 1);\n      sub_473D0(v5, 61LL);\n    }\n  }\n  else\n  {\n    v13 = 1LL;\n    sub_20450((__int64 (**)(void))off_260B80, a1, v3, (__int64)v27);\n    do\n    {\n      v14 = (unsigned __int8)*(&v26 + v13);\n      sub_474E0(v5);\n      v15 = (unsigned int)v13++;\n    }\n    while ( v13 != 16 );\n    v16 = (unsigned __int8)v27[v15];\n    a2 = \"%02x%s\";\n    sub_474E0(v5);\n  }\n  return sub_47470(v5, a2);\n}\n", 
            "funcStartAddr": "0x3aea0L", 
            "funcEndAddr": "0x3b0c3L", 
            "funcName": "sub_3AEA0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3B0D0(__int64 a1, const char *a2)\n{\n  _QWORD *v2; // rbx\n\n  v2 = (_QWORD *)sub_11440(2uLL, 8uLL, 0LL);\n  *v2 = sub_3AEA0(a1, a2, 0);\n  v2[1] = sub_3AEA0(a1, a2, 1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x3b0d0L", 
            "funcEndAddr": "0x3b11aL", 
            "funcName": "sub_3B0D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3B120(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n\n  v2 = sub_47400(a1);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 56LL))(a1, v2 + 24);\n  v3 = sub_3AEA0(*(_QWORD *)(v2 + 8), *(const char **)(v2 + 16), a2);\n  sub_47420(v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x3b120L", 
            "funcEndAddr": "0x3b163L", 
            "funcName": "sub_3B120"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3B170(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rbp\n\n  v1 = sub_47400(a1);\n  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 56LL))(a1, v1 + 24);\n  v2 = sub_3B0D0(*(_QWORD *)(v1 + 8), *(const char **)(v1 + 16));\n  sub_47420(v1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x3b170L", 
            "funcEndAddr": "0x3b1b1L", 
            "funcName": "sub_3B170"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3B1C0(void **a1)\n{\n  sub_114C0(*a1);\n  sub_114C0(a1[1]);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x3b1c0L", 
            "funcEndAddr": "0x3b1deL", 
            "funcName": "sub_3B1C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3B1E0(__int64 a1)\n{\n  unsigned int v1; // ebp\n\n  v1 = sub_388D0(a1);\n  sub_113D0(*(_QWORD *)(a1 + 32), 0LL);\n  return v1;\n}\n", 
            "funcStartAddr": "0x3b1e0L", 
            "funcEndAddr": "0x3b204L", 
            "funcName": "sub_3B1E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3B210(__int64 a1)\n{\n  __int64 *v1; // rbx\n  unsigned int v2; // ebp\n  __int64 result; // rax\n\n  v1 = (__int64 *)sub_11440(1uLL, 0x40uLL, 1024LL);\n  *v1 = (__int64)(v1 + 8);\n  v1[1] = 0LL;\n  v1[2] = 1024LL;\n  if ( (unsigned int)sub_380B0(v1, a1) == 2 )\n  {\n    sub_37FC0(v1);\n    result = 0LL;\n  }\n  else\n  {\n    v2 = sub_388D0((__int64)(v1 + 3));\n    sub_113D0(v1[7], 0LL);\n    sub_37FC0(v1);\n    result = v2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3b210L", 
            "funcEndAddr": "0x3b293L", 
            "funcName": "sub_3B210"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_3B2A0(int a1)\n{\n  char *result; // rax\n\n  switch ( a1 )\n  {\n    case 0:\n      result = \"unable to open file\";\n      break;\n    case 1:\n      result = \"not a recognised key file format\";\n      break;\n    case 2:\n      result = \"SSH-1 private key\";\n      break;\n    case 3:\n      result = \"PuTTY SSH-2 private key\";\n      break;\n    case 4:\n      __assert_fail(\n        \"false && \\\"OPENSSH_AUTO should never reach key_type_to_str\\\"\",\n        \"sshpubk.c\",\n        0x78Eu,\n        \"key_type_to_str\");\n      return result;\n    case 5:\n      result = \"OpenSSH SSH-2 private key (old PEM format)\";\n      break;\n    case 6:\n      result = \"OpenSSH SSH-2 private key (new format)\";\n      break;\n    case 7:\n      result = \"ssh.com SSH-2 private key\";\n      break;\n    case 8:\n      result = \"SSH-1 public key\";\n      break;\n    case 9:\n      result = \"SSH-2 public key (RFC 4716 format)\";\n      break;\n    case 10:\n      result = \"SSH-2 public key (OpenSSH format)\";\n      break;\n    default:\n      __assert_fail(\"false && \\\"bad key type in key_type_to_str\\\"\", \"sshpubk.c\", 0x790u, \"key_type_to_str\");\n      return result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3b2a0L", 
            "funcEndAddr": "0x3b39aL", 
            "funcName": "sub_3B2A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_3B3A0()\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_11440(1uLL, 0x18uLL, 0LL);\n  *result = 0LL;\n  result[1] = 0LL;\n  result[2] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x3b3a0L", 
            "funcEndAddr": "0x3b3d1L", 
            "funcName": "sub_3B3A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3B3E0(__int64 a1, char *a2, char *a3)\n{\n  char *v3; // r12\n  char *v4; // rax\n  unsigned __int64 v5; // rdx\n  signed __int64 v6; // rbx\n  __int64 *v7; // r14\n  __int64 v8; // rax\n  signed __int64 v9; // rbx\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = (char *)sub_114E0(*(void **)(a1 + 16), (unsigned __int64 *)(a1 + 8), 0x18uLL, *(_QWORD *)a1, 1uLL, 0);\n  v5 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v4;\n  *(_QWORD *)a1 = v5 + 1;\n  v6 = 24 * v5;\n  v7 = (__int64 *)&v4[24 * v5];\n  v8 = sub_46EE0(a2);\n  v9 = *(_QWORD *)(a1 + 16) + v6;\n  *v7 = v8;\n  *(_BYTE *)(v9 + 8) = 0;\n  result = sub_46EE0(v3);\n  *(_QWORD *)(v9 + 16) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x3b3e0L", 
            "funcEndAddr": "0x3b454L", 
            "funcName": "sub_3B3E0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3B460(__int64 a1, char *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  char *v4; // rax\n  unsigned __int64 v5; // rdx\n  signed __int64 v6; // rbx\n  __int64 *v7; // r14\n  __int64 v8; // rax\n  signed __int64 v9; // rbx\n  _QWORD *result; // rax\n\n  v3 = a3;\n  v4 = (char *)sub_114E0(*(void **)(a1 + 16), (unsigned __int64 *)(a1 + 8), 0x18uLL, *(_QWORD *)a1, 1uLL, 0);\n  v5 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v4;\n  *(_QWORD *)a1 = v5 + 1;\n  v6 = 24 * v5;\n  v7 = (__int64 *)&v4[24 * v5];\n  v8 = sub_46EE0(a2);\n  v9 = *(_QWORD *)(a1 + 16) + v6;\n  *v7 = v8;\n  *(_BYTE *)(v9 + 8) = 1;\n  result = sub_133C0(v3);\n  *(_QWORD *)(v9 + 16) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x3b460L", 
            "funcEndAddr": "0x3b4d4L", 
            "funcName": "sub_3B460"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3B4E0(_QWORD *a1)\n{\n  void *v1; // rbp\n  __int64 v2; // rbx\n  unsigned __int64 v3; // r12\n  __int64 v4; // rax\n  __int64 v5; // r13\n  size_t v6; // rax\n  void *v7; // rdi\n\n  v1 = a1;\n  if ( *a1 )\n  {\n    v2 = 0LL;\n    v3 = 0LL;\n    do\n    {\n      while ( 1 )\n      {\n        sub_114C0(*(void **)(*((_QWORD *)v1 + 2) + v2));\n        v4 = v2 + *((_QWORD *)v1 + 2);\n        if ( !*(_BYTE *)(v4 + 8) )\n          break;\n        ++v3;\n        v2 += 24LL;\n        sub_12FF0(*(_QWORD **)(v4 + 16));\n        if ( *(_QWORD *)v1 <= v3 )\n          goto LABEL_6;\n      }\n      v5 = *(_QWORD *)(v4 + 16);\n      ++v3;\n      v6 = strlen(*(const char **)(v4 + 16));\n      sub_47E30(v5, v6);\n      v7 = *(void **)(*((_QWORD *)v1 + 2) + v2 + 16);\n      v2 += 24LL;\n      sub_114C0(v7);\n    }\n    while ( *(_QWORD *)v1 > v3 );\n  }\nLABEL_6:\n  sub_114C0(*((void **)v1 + 2));\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x3b4e0L", 
            "funcEndAddr": "0x3b57fL", 
            "funcName": "sub_3B4E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n\nunsigned __int64 __usercall sub_3B5F0@<rax>(int a1@<edx>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned int a4@<edi>, __int64 a5@<rsi>, __int64 a6@<r12>, __int64 a7@<r13>, __int64 a8@<r14>, __int64 a9@<r15>)\n{\n  unsigned __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  signed __int64 v12; // rdi\n  int v13; // ecx\n  unsigned int v14; // eax\n  __int64 v15; // rax\n  __int64 (**v16)(void); // rdi\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // rbp\n  unsigned int v19; // er12\n  __int64 v20; // rdx\n  unsigned __int64 result; // rax\n  __int64 v22; // [rsp-B8h] [rbp-B8h]\n  unsigned __int64 v23; // [rsp-40h] [rbp-40h]\n  __int64 v24; // [rsp-30h] [rbp-30h]\n  __int64 v25; // [rsp-28h] [rbp-28h]\n  __int64 v26; // [rsp-20h] [rbp-20h]\n  __int64 v27; // [rsp-18h] [rbp-18h]\n  __int64 v28; // [rsp-10h] [rbp-10h]\n  __int64 v29; // [rsp-8h] [rbp-8h]\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n  {\n    v29 = a9;\n    v28 = a8;\n    v27 = a7;\n    v26 = a6;\n    v25 = a3;\n    v24 = a2;\n    v9 = a1;\n    v23 = __readfsqword(0x28u);\n    if ( a4 > 0x10 )\n      __assert_fail(\"source_id < NOISE_MAX_SOURCES\", \"sshprng.c\", 0xF4u, \"prng_add_entropy\");\n    v10 = qword_265660 + 4LL * a4;\n    v11 = qword_265660;\n    v12 = 1LL;\n    v13 = *(_DWORD *)(v10 + 64);\n    *(_DWORD *)(v10 + 64) = v13 + 1;\n    v14 = (unsigned int)(v13 + 1) >> 1;\n    if ( (v13 + 1) & 1 )\n    {\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 136) + 8LL);\n      sub_10C20(v16);\n      v17 = *(_QWORD *)(v11 + 392);\n      if ( v17 < v9 )\n      {\n        *(_QWORD *)(v11 + 392) = 0LL;\n        goto LABEL_12;\n      }\n      v15 = v17 - v9;\n      *(_QWORD *)(v11 + 392) = v15;\n    }\n    else\n    {\n      do\n      {\n        if ( v14 & 1 )\n        {\n          v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 8 * v12 + 136) + 8LL);\n          sub_10C20(v16);\n          v15 = *(_QWORD *)(v11 + 392);\n          goto LABEL_8;\n        }\n        ++v12;\n        v14 >>= 1;\n      }\n      while ( v12 != 31 );\n      v16 = *(__int64 (***)(void))(*(_QWORD *)(v11 + 384) + 8LL);\n      sub_10C20(v16);\n      v15 = *(_QWORD *)(v11 + 392);\n    }\nLABEL_8:\n    if ( v15 )\n      return __readfsqword(0x28u) ^ v23;\nLABEL_12:\n    if ( (unsigned __int64)(sub_45000(v16, a5) - *(_QWORD *)(v11 + 408)) > 0x63 )\n    {\n      v18 = (_QWORD *)(v11 + 136);\n      sub_36DC0(v11);\n      v19 = *(_DWORD *)(v11 + 400) + 1;\n      *(_DWORD *)(v11 + 400) = v19;\n      do\n      {\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 24LL))(*v18, &v22);\n        v20 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40LL);\n        sub_10C10((__int64 (**)(void))(v11 + 8));\n        (*(void (__fastcall **)(_QWORD, __int64 *))(*(_QWORD *)*v18 + 8LL))(*v18, &v22);\n        if ( v19 & 1 )\n          break;\n        ++v18;\n        v19 >>= 1;\n      }\n      while ( v18 != (_QWORD *)(v11 + 392) );\n      sub_47E30(&v22, 114LL);\n      sub_36E40(v11);\n    }\n    return __readfsqword(0x28u) ^ v23;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x37280L", 
            "funcEndAddr": "0x372c3L", 
            "funcName": "sub_3B5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3B620()\n{\n  sub_36DC0(qword_265660);\n  sub_10C20((__int64 (**)(void))(qword_265660 + 8));\n  return sub_36E40(qword_265660);\n}\n", 
            "funcStartAddr": "0x3b620L", 
            "funcEndAddr": "0x3b660L", 
            "funcName": "sub_3B620"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3B660(char *a1, size_t a2)\n{\n  if ( dword_265650 <= 0 )\n    __assert_fail(\"random_active > 0\", \"sshrand.c\", 0x85u, \"random_read\");\n  return sub_36F50((_QWORD *)qword_265660, a1, a2);\n}\n", 
            "funcStartAddr": "0x3b660L", 
            "funcEndAddr": "0x3b69fL", 
            "funcName": "sub_3B660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3B6A0(char **a1, _DWORD *a2)\n{\n  char *v2; // rbx\n  __int64 result; // rax\n\n  v2 = (char *)sub_11440(*(_QWORD *)qword_265660, 1uLL, 0LL);\n  sub_3B660(v2, *(_QWORD *)qword_265660);\n  result = *(_QWORD *)qword_265660;\n  *a2 = *(_QWORD *)qword_265660;\n  *a1 = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x3b6a0L", 
            "funcEndAddr": "0x3b6ecL", 
            "funcName": "sub_3B6A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_3B6F0()\n{\n  int v1; // [rsp+Ch] [rbp-1Ch]\n  void *buf; // [rsp+10h] [rbp-18h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-10h]\n\n  v3 = __readfsqword(0x28u);\n  sub_3B6A0((char **)&buf, &v1);\n  sub_46880(buf);\n  sub_114C0(buf);\n  return __readfsqword(0x28u) ^ v3;\n}\n", 
            "funcStartAddr": "0x3b6f0L", 
            "funcEndAddr": "0x3b745L", 
            "funcName": "sub_3B6F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_3B750()\n{\n  unsigned __int64 result; // rax\n\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n    result = sub_3B6F0();\n  return result;\n}\n", 
            "funcStartAddr": "0x3b750L", 
            "funcEndAddr": "0x3b762L", 
            "funcName": "sub_3B750"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3B770(__int64 a1)\n{\n  unsigned __int64 result; // rax\n\n  if ( qword_265660 )\n    __assert_fail(\"!global_prng\", \"sshrand.c\", 0x3Fu, \"random_create\");\n  qword_265660 = (__int64)sub_36C50(a1);\n  sub_36DC0(qword_265660);\n  sub_44C70(sub_3B580);\n  sub_36E40(qword_265660);\n  qword_265658 = sub_16F40();\n  result = (unsigned int)dword_265650;\n  if ( dword_265650 )\n    result = sub_3B6F0();\n  return result;\n}\n", 
            "funcStartAddr": "0x3b770L", 
            "funcEndAddr": "0x3b808L", 
            "funcName": "sub_3B770"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_3B810()\n{\n  unsigned __int64 result; // rax\n  bool v1; // zf\n\n  result = (unsigned int)dword_265650;\n  v1 = dword_265650++ == 0;\n  if ( v1 )\n    result = sub_3B770((__int64)&off_2610A0);\n  return result;\n}\n", 
            "funcStartAddr": "0x3b810L", 
            "funcEndAddr": "0x3b834L", 
            "funcName": "sub_3B810"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3B840(__int64 a1)\n{\n  ++dword_265650;\n  return sub_3B770(a1);\n}\n", 
            "funcStartAddr": "0x3b840L", 
            "funcEndAddr": "0x3b84cL", 
            "funcName": "sub_3B840"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_3B950(unsigned __int64 *a1, unsigned __int64 *a2, __int64 *a3, __int64 a4, __int64 *a5, unsigned __int64 *a6)\n{\n  __int64 *v6; // r13\n  __int64 *v7; // r12\n  unsigned __int64 *v8; // ST28_8\n  __int64 *v9; // ST18_8\n  __int64 *v10; // r15\n  __int64 *v11; // r14\n  unsigned __int64 *v12; // ST08_8\n  unsigned __int64 *v13; // ST10_8\n  unsigned __int64 *v14; // ST20_8\n  unsigned __int64 *v15; // rbx\n  unsigned __int64 *v16; // ST20_8\n  unsigned __int64 *v17; // rbp\n  char v18; // al\n  unsigned __int64 *v19; // r13\n  unsigned __int64 *v20; // ST20_8\n  __int64 *v21; // r12\n  unsigned __int64 *v22; // ST18_8\n\n  v6 = (__int64 *)a4;\n  v7 = a5;\n  v8 = a6;\n  v9 = a3;\n  v10 = sub_133C0(a4);\n  sub_13A10(v10, (unsigned __int64 *)v10, 1LL);\n  v11 = sub_133C0((__int64)v7);\n  sub_13A10(v11, (unsigned __int64 *)v11, 1LL);\n  v12 = sub_15EB0(a2, v10);\n  v13 = sub_15EB0(a2, v11);\n  v14 = sub_15EB0(a1, v6);\n  v15 = sub_163B0(v14, v12, (__int64)v6);\n  sub_12FF0(v14);\n  v16 = sub_15EB0(a1, v7);\n  v17 = sub_163B0(v16, v13, (__int64)v7);\n  sub_12FF0(v16);\n  v18 = sub_13D30(v17, v15);\n  sub_13CD0((__int64 *)v15, v15, (unsigned __int64 *)v6, v18);\n  v19 = (unsigned __int64 *)sub_14140(v15, v17);\n  v20 = sub_141F0(v8, (unsigned __int64 *)v7);\n  v21 = (__int64 *)sub_141F0(v20, v19);\n  sub_137A0(v21, v21, v17);\n  v22 = sub_15EB0((unsigned __int64 *)v21, v9);\n  sub_12FF0(v10);\n  sub_12FF0(v11);\n  sub_12FF0(v12);\n  sub_12FF0(v13);\n  sub_12FF0(v15);\n  sub_12FF0(v17);\n  sub_12FF0(v19);\n  sub_12FF0(v20);\n  sub_12FF0(v21);\n  return v22;\n}\n", 
            "funcStartAddr": "0x3b950L", 
            "funcEndAddr": "0x3bafbL", 
            "funcName": "sub_3B950"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3BB00(__int64 a1, _QWORD *a2)\n{\n  __int64 (**v2)(void); // rbp\n  char *v3; // rbx\n  size_t v4; // r12\n\n  v2 = (__int64 (**)(void))(a1 + 24);\n  if ( *(_QWORD *)(a1 + 16) )\n    sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(a1 + 24), 44);\n  sub_10C10(v2);\n  v3 = (char *)sub_13560(a2);\n  v4 = strlen(v3);\n  sub_10C10(v2);\n  sub_47E30(v3, v4);\n  sub_114C0(v3);\n}\n", 
            "funcStartAddr": "0x3bb00L", 
            "funcEndAddr": "0x3bb6eL", 
            "funcName": "sub_3BB00"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3BB70(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)\n{\n  __int64 v5; // r15\n  int v6; // ebx\n  __int64 v7; // rax\n  __int64 (***v8)(void); // r13\n  __int64 v9; // r8\n  __int64 v10; // r12\n  __int64 v11; // rdx\n  int v13; // [rsp+8h] [rbp-C0h]\n  char v14[120]; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v15; // [rsp+88h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a5;\n  v15 = __readfsqword(0x28u);\n  v7 = (*(__int64 (**)(void))a1)();\n  v8 = (__int64 (***)(void))v7;\n  if ( v7 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v7 + 8LL))(v7);\n  if ( v6 > 0 )\n  {\n    v13 = 0;\n    do\n    {\n      v9 = v6;\n      if ( *(_QWORD *)(a1 + 40) <= (unsigned __int64)v6 )\n        v9 = *(_QWORD *)(a1 + 40);\n      v10 = v9;\n      ((void (__fastcall *)(__int64 (***)(void)))(*v8)[1])(v8);\n      if ( *(_QWORD *)(a1 + 40) > 0x72uLL )\n        __assert_fail(\"h->hlen <= MAX_HASH_LEN\", \"sshrsa.c\", 0x393u, \"oaep_mask\");\n      sub_10C10(v8[1]);\n      sub_10D80((void (__fastcall **)(_QWORD, char *, signed __int64, _QWORD))v8[1], v13);\n      ((void (__fastcall *)(__int64 (***)(void), char *))(*v8)[3])(v8, v14);\n      ++v13;\n      if ( (_DWORD)v10 )\n      {\n        v11 = 0LL;\n        do\n        {\n          *(_BYTE *)(v5 + v11) ^= v14[v11];\n          ++v11;\n        }\n        while ( (unsigned int)(v10 - 1) + 1LL != v11 );\n      }\n      v6 -= v10;\n      v5 += v10;\n    }\n    while ( v6 > 0 );\n  }\n  ((void (__fastcall *)(__int64 (***)(void)))(*v8)[4])(v8);\n  return __readfsqword(0x28u) ^ v15;\n}\n", 
            "funcStartAddr": "0x3bb70L", 
            "funcEndAddr": "0x3bcabL", 
            "funcName": "sub_3BB70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3BCB0(__int64 a1, __int64 a2)\n{\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 56));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 48));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 40));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 16));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 32));\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 24));\n}\n", 
            "funcStartAddr": "0x3bcb0L", 
            "funcEndAddr": "0x3bd10L", 
            "funcName": "sub_3BCB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3BD10(__int64 a1, __int64 a2)\n{\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 40));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 32));\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 24));\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 16));\n}\n", 
            "funcStartAddr": "0x3bd10L", 
            "funcEndAddr": "0x3bd56L", 
            "funcName": "sub_3BD10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3BD60(__int64 a1, __int64 a2)\n{\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(a2 + 8), \"ssh-rsa\");\n  sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 48));\n  return sub_13630(*(_QWORD *)(a2 + 8), *(__int64 **)(a1 - 56));\n}\n", 
            "funcStartAddr": "0x3bd60L", 
            "funcEndAddr": "0x3bd9cL", 
            "funcName": "sub_3BD60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3BDA0(__int64 a1, char a2)\n{\n  unsigned __int64 v2; // rdi\n  __int64 (__fastcall **v3)(); // rcx\n  signed __int64 v5; // r8\n\n  v2 = (unsigned __int64)(sub_134B0(*(__int64 **)(a1 - 56)) + 7) >> 3;\n  if ( a2 & 2 )\n  {\n    v3 = &off_261420;\n    if ( &off_2610A0 != &off_261420 )\n    {\n      v3 = &off_2610A0;\nLABEL_13:\n      v5 = 22LL;\nLABEL_9:\n      if ( v2 >= (unsigned __int64)v3[5] + v5 )\n        return 0LL;\n      return sub_47120((unsigned __int64)\"%zu-bit RSA key is too short to generate %s signatures\");\n    }\nLABEL_8:\n    v5 = 18LL;\n    goto LABEL_9;\n  }\n  if ( !(a2 & 4) )\n  {\n    v3 = &off_261420;\n    goto LABEL_8;\n  }\n  v3 = off_2612E0;\n  if ( off_2612E0 == &off_261420 )\n    goto LABEL_8;\n  if ( off_2612E0 == &off_2610A0 )\n    goto LABEL_13;\n  if ( v2 >= (unsigned __int64)off_2612E0[5] + 22 )\n    return 0LL;\n  return sub_47120((unsigned __int64)\"%zu-bit RSA key is too short to generate %s signatures\");\n}\n", 
            "funcStartAddr": "0x3bda0L", 
            "funcEndAddr": "0x3be6dL", 
            "funcName": "sub_3BDA0"
        }, 
        {
            "decompiledFuncCode": "_WORD *__fastcall sub_3BE70(unsigned __int64 a1, __int64 a2)\n{\n  __int64 (__fastcall **v2)(_QWORD, __int64, unsigned __int64, char *); // r15\n  unsigned __int64 v3; // rax\n  char *v4; // rcx\n  signed __int64 v5; // r12\n  size_t v6; // r13\n  char *v7; // ST08_8\n  _WORD *v8; // rax\n  _WORD *v9; // rbx\n  _QWORD *v10; // rax\n  __int64 v11; // rsi\n  unsigned __int64 v12; // rdx\n  char *v13; // rax\n  char *v14; // rcx\n  unsigned int v15; // eax\n  unsigned int v16; // eax\n  __int64 v17; // rdi\n  __int64 v18; // rax\n  __int64 (***v19)(void); // r15\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n\n  v2 = (__int64 (__fastcall **)(_QWORD, __int64, unsigned __int64, char *))a2;\n  if ( (__int64 (__fastcall **)())a2 == &off_261420 )\n  {\n    v21 = *(_QWORD *)(a2 + 40) + 18LL;\n    if ( a1 < v21 )\n      goto LABEL_17;\n    v5 = 16LL;\n    v4 = (char *)&unk_50530;\n    v6 = a1 - v21;\n  }\n  else\n  {\n    if ( (__int64 (__fastcall **)())a2 != &off_2610A0 )\n    {\n      if ( (__int64 (__fastcall **)())a2 != off_2612E0 )\n        sub_60F5();\n      v3 = *(_QWORD *)(a2 + 40) + 22LL;\n      if ( a1 >= v3 )\n      {\n        v4 = (char *)&unk_504F0;\n        v5 = 20LL;\n        v6 = a1 - v3;\n        goto LABEL_6;\n      }\nLABEL_17:\n      __assert_fail(\"nbytes >= fixed_parts\", \"sshrsa.c\", 0x2D1u, \"rsa_pkcs1_signature_string\");\n    }\n    v22 = *(_QWORD *)(a2 + 40) + 22LL;\n    if ( a1 < v22 )\n      goto LABEL_17;\n    v5 = 20LL;\n    v4 = (char *)&unk_50510;\n    v6 = a1 - v22;\n  }\nLABEL_6:\n  v7 = v4;\n  v8 = (_WORD *)sub_11440(a1, 1uLL, 0LL);\n  v9 = v8;\n  *v8 = 256;\n  memset(v8 + 1, 255, v6);\n  v10 = (_QWORD *)((char *)v9 + v6 + 2);\n  *v10 = *(_QWORD *)v7;\n  v11 = *(_QWORD *)&v7[(unsigned int)v5 - 8];\n  *(_QWORD *)((char *)v10 + (unsigned int)v5 - 8) = v11;\n  v12 = ((unsigned __int64)v9 + v6 + 10) & 0xFFFFFFFFFFFFFFF8LL;\n  v13 = (char *)v10 - v12;\n  v14 = (char *)(v7 - v13);\n  v15 = (v5 + (_DWORD)v13) & 0xFFFFFFF8;\n  if ( v15 >= 8 )\n  {\n    v16 = v15 & 0xFFFFFFF8;\n    LODWORD(v11) = 0;\n    do\n    {\n      v17 = (unsigned int)v11;\n      v11 = (unsigned int)(v11 + 8);\n      *(_QWORD *)(v12 + v17) = *(_QWORD *)&v14[v17];\n    }\n    while ( (unsigned int)v11 < v16 );\n  }\n  v18 = (*v2)(v2, v11, v12, v14);\n  v19 = (__int64 (***)(void))v18;\n  if ( v18 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v18 + 8LL))(v18);\n  sub_10C20(v19[1]);\n  ((void (__fastcall *)(__int64 (***)(void), size_t))(*v19)[3])(v19, (signed __int64)v9 + v6 + v5 + 2);\n  ((void (__fastcall *)(__int64 (***)(void)))(*v19)[4])(v19);\n  return v9;\n}\n", 
            "funcStartAddr": "0x3be70L", 
            "funcEndAddr": "0x3c021L", 
            "funcName": "sub_3BE70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C030(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  _QWORD *v4; // r12\n  __int64 v5; // rax\n  __int64 *v6; // rdi\n  int v7; // eax\n  __int64 (__fastcall **v8)(); // rbp\n  unsigned __int64 v9; // rbx\n  char *v10; // r15\n  unsigned __int64 v11; // rdx\n  unsigned __int64 v12; // r14\n  __int64 v13; // rdx\n  char *v14; // r8\n  unsigned __int64 *v15; // ST10_8\n  unsigned __int64 *v16; // r15\n  _WORD *v17; // rax\n  char *v18; // r12\n  int v19; // er13\n  char v20; // bp\n  char v21; // al\n  void *v23; // [rsp+8h] [rbp-80h]\n  __int64 v24; // [rsp+10h] [rbp-78h]\n  __int64 v25; // [rsp+18h] [rbp-70h]\n  __int64 v26; // [rsp+20h] [rbp-68h]\n  __int64 v27; // [rsp+28h] [rbp-60h]\n  __int64 v28; // [rsp+30h] [rbp-58h]\n  int v29; // [rsp+38h] [rbp-50h]\n  __int64 *v30; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v31; // [rsp+48h] [rbp-40h]\n\n  v3 = a3;\n  v4 = a1;\n  v31 = __readfsqword(0x28u);\n  v5 = *a1;\n  v6 = (__int64 *)*(a1 - 7);\n  v7 = **(_DWORD **)(v5 + 120);\n  if ( !(v7 & 2) )\n  {\n    if ( v7 & 4 )\n    {\n      v8 = off_2612E0;\n      v9 = (unsigned __int64)(sub_134B0(v6) + 7) >> 3;\n      if ( off_2612E0 != &off_261420 )\n        goto LABEL_4;\n    }\n    else\n    {\n      v8 = &off_261420;\n      v9 = (unsigned __int64)(sub_134B0(v6) + 7) >> 3;\n    }\nLABEL_13:\n    if ( (unsigned __int64)v8[5] + 18 <= v9 )\n      goto LABEL_5;\nLABEL_14:\n    LODWORD(v12) = 0;\n    return (unsigned int)v12;\n  }\n  v8 = &off_261420;\n  v9 = (unsigned __int64)(sub_134B0(v6) + 7) >> 3;\n  if ( &off_2610A0 == &off_261420 )\n    goto LABEL_13;\n  v8 = &off_2610A0;\nLABEL_4:\n  if ( (unsigned __int64)v8[5] + 22 > v9 )\n    goto LABEL_14;\nLABEL_5:\n  v26 = a2;\n  v28 = v3;\n  v27 = 0LL;\n  v29 = 0;\n  v30 = &v26;\n  v10 = sub_111C0((__int64)&v26);\n  v12 = v11;\n  v14 = sub_111C0((__int64)v30);\n  if ( *((_DWORD *)v30 + 6) )\n    goto LABEL_14;\n  v25 = v13;\n  v24 = (__int64)v14;\n  LODWORD(v12) = sub_47EC0(v10, v12, *(void **)(*v4 + 104LL));\n  if ( !(_BYTE)v12 )\n    goto LABEL_14;\n  v15 = sub_13290(v24, v25);\n  v16 = sub_163B0(v15, (unsigned __int64 *)*(v4 - 6), *(v4 - 7));\n  sub_12FF0(v15);\n  v17 = sub_3BE70(v9, (__int64)v8);\n  v23 = v17;\n  if ( v9 )\n  {\n    v18 = (char *)v17 + v9 - 1;\n    v12 = 0LL;\n    v19 = 0;\n    do\n    {\n      v20 = *v18;\n      v21 = sub_133D0(v16, v12++);\n      --v18;\n      v19 |= (unsigned __int8)(v21 ^ v20);\n    }\n    while ( v12 != v9 );\n    LOBYTE(v12) = v19 == 0;\n  }\n  sub_47E30(v23, v9);\n  sub_114C0(v23);\n  sub_12FF0(v16);\n  return (unsigned int)v12;\n}\n", 
            "funcStartAddr": "0x3c030L", 
            "funcEndAddr": "0x3c26dL", 
            "funcName": "sub_3C030"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3C270(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5)\n{\n  char *v5; // r15\n  __int64 v6; // r12\n  __int64 (__fastcall **v7)(); // rsi\n  int v8; // ecx\n  int v9; // ecx\n  unsigned __int64 v10; // rbp\n  _WORD *v11; // r14\n  unsigned __int64 *v12; // r13\n  __int64 *v13; // rbp\n  unsigned __int64 v14; // rbx\n  signed __int64 v15; // rbx\n  unsigned __int64 v16; // rsi\n  char v17; // al\n\n  v5 = \"rsa-sha2-256\";\n  v6 = a5;\n  v7 = &off_2610A0;\n  v8 = **(_DWORD **)(*(_QWORD *)a1 + 120LL) | a4;\n  if ( !(v8 & 2) )\n  {\n    v5 = \"ssh-rsa\";\n    v9 = v8 & 4;\n    v7 = &off_261420;\n    if ( v9 )\n      v5 = \"rsa-sha2-512\";\n    if ( v9 )\n      v7 = off_2612E0;\n  }\n  v10 = (unsigned __int64)(sub_134B0(*(__int64 **)(a1 - 56)) + 7) >> 3;\n  v11 = sub_3BE70(v10, (__int64)v7);\n  v12 = sub_13290((__int64)v11, v10);\n  sub_47E30(v11, v10);\n  sub_114C0(v11);\n  v13 = (__int64 *)sub_3B950(\n                     v12,\n                     *(unsigned __int64 **)(a1 - 40),\n                     *(__int64 **)(a1 - 56),\n                     *(_QWORD *)(a1 - 32),\n                     *(__int64 **)(a1 - 24),\n                     *(unsigned __int64 **)(a1 - 16));\n  sub_12FF0(v12);\n  sub_10F30(*(void (__fastcall ***)(_QWORD, char *, signed __int64))(v6 + 8), v5);\n  v14 = (unsigned __int64)(sub_134B0(v13) + 7) >> 3;\n  sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(v6 + 8), v14);\n  if ( v14 )\n  {\n    v15 = v14 - 1;\n    do\n    {\n      v16 = v15--;\n      v17 = sub_133D0((unsigned __int64 *)v13, v16);\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(v6 + 8), v17);\n    }\n    while ( v15 != -1 );\n  }\n  sub_12FF0(v13);\n}\n", 
            "funcStartAddr": "0x3c270L", 
            "funcEndAddr": "0x3c3b0L", 
            "funcName": "sub_3C270"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3C3B0(__int64 a1, __int64 a2, int a3)\n{\n  __int64 v3; // rbp\n  int v4; // er12\n  int v5; // er14\n  __int64 v6; // rdi\n  _QWORD *v7; // r13\n  __int64 *v8; // r12\n\n  v3 = a1;\n  v4 = a3;\n  v5 = sub_11140(*(_QWORD *)(a1 + 32));\n  v6 = *(_QWORD *)(a1 + 32);\n  if ( v4 )\n  {\n    v8 = sub_136C0(v6);\n    v7 = sub_136C0(*(_QWORD *)(v3 + 32));\n    if ( a2 )\n      goto LABEL_3;\n  }\n  else\n  {\n    v7 = sub_136C0(v6);\n    v8 = sub_136C0(*(_QWORD *)(v3 + 32));\n    if ( a2 )\n    {\nLABEL_3:\n      *(_DWORD *)a2 = v5;\n      *(_QWORD *)(a2 + 16) = v7;\n      *(_QWORD *)(a2 + 8) = v8;\n      *(_DWORD *)(a2 + 4) = (unsigned __int64)(sub_134B0(v8) + 7) >> 3;\n      return;\n    }\n  }\n  sub_12FF0(v7);\n  sub_12FF0(v8);\n}\n", 
            "funcStartAddr": "0x3c3b0L", 
            "funcEndAddr": "0x3c451L", 
            "funcName": "sub_3C3B0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3C460(__int64 a1, __int64 a2)\n{\n  _QWORD *result; // rax\n\n  result = sub_136C0(*(_QWORD *)(a1 + 32));\n  *(_QWORD *)(a2 + 24) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x3c460L", 
            "funcEndAddr": "0x3c473L", 
            "funcName": "sub_3C460"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3C480(__int64 *a1)\n{\n  _QWORD *v1; // rbx\n  __int64 v2; // rdx\n\n  v1 = sub_3B3A0();\n  sub_3B3E0((__int64)v1, \"key_type\", \"RSA\");\n  sub_3B460((__int64)v1, \"public_modulus\", a1[1]);\n  sub_3B460((__int64)v1, \"public_exponent\", a1[2]);\n  v2 = a1[3];\n  if ( v2 )\n  {\n    sub_3B460((__int64)v1, \"private_exponent\", v2);\n    sub_3B460((__int64)v1, \"private_p\", a1[4]);\n    sub_3B460((__int64)v1, \"private_q\", a1[5]);\n    sub_3B460((__int64)v1, \"private_inverse_q_mod_p\", a1[6]);\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x3c480L", 
            "funcEndAddr": "0x3c528L", 
            "funcName": "sub_3C480"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3C530(__int64 a1)\n{\n  return sub_3C480((__int64 *)(a1 - 64));\n}\n", 
            "funcStartAddr": "0x3c530L", 
            "funcEndAddr": "0x3c539L", 
            "funcName": "sub_3C530"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3C540(__int64 a1)\n{\n  __int64 v1; // rbp\n  __int64 v2; // rax\n  _QWORD *v3; // rbx\n  _QWORD *v4; // rax\n  __int64 v5; // rdi\n  _QWORD *v6; // rax\n  __int64 v7; // rdi\n  _QWORD *v8; // rax\n  __int64 v9; // rdi\n\n  v1 = a1;\n  v2 = sub_11440(1uLL, 0x48uLL, 0LL);\n  *(_QWORD *)(v2 + 64) = 0LL;\n  v3 = (_QWORD *)v2;\n  *(_OWORD *)v2 = 0LL;\n  *(_OWORD *)(v2 + 16) = 0LL;\n  *(_OWORD *)(v2 + 32) = 0LL;\n  *(_OWORD *)(v2 + 48) = 0LL;\n  sub_3C3B0(*(_QWORD *)(a1 + 32), v2, 1);\n  v4 = sub_136C0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32LL));\n  v5 = *(_QWORD *)(a1 + 32);\n  v3[3] = v4;\n  v6 = sub_136C0(v5);\n  v7 = *(_QWORD *)(v1 + 32);\n  v3[6] = v6;\n  v8 = sub_136C0(v7);\n  v9 = *(_QWORD *)(v1 + 32);\n  v3[5] = v8;\n  v3[4] = sub_136C0(v9);\n  return v3;\n}\n", 
            "funcStartAddr": "0x3c540L", 
            "funcEndAddr": "0x3c5cbL", 
            "funcName": "sub_3C540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C920(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // rsi\n\n  v1 = sub_47400(a1);\n  sub_3BB00(v1, *(_QWORD **)(a1 + 16));\n  v2 = *(_QWORD **)(a1 + 8);\n  sub_3BB00(v1, v2);\n  return sub_47470(v1, v2);\n}\n", 
            "funcStartAddr": "0x3c920L", 
            "funcEndAddr": "0x3c957L", 
            "funcName": "sub_3C920"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C960(__int64 a1)\n{\n  return sub_3C920(a1 - 64);\n}\n", 
            "funcStartAddr": "0x3c960L", 
            "funcEndAddr": "0x3c966L", 
            "funcName": "sub_3C960"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3C970(__int64 a1)\n{\n  signed __int64 v1; // rax\n  __int64 (__fastcall ***v2)(_QWORD, char *, signed __int64); // r12\n  unsigned __int64 v3; // rax\n  signed __int64 v4; // rbx\n  unsigned __int64 v5; // rsi\n  char v6; // al\n  unsigned __int64 v7; // rax\n  signed __int64 v8; // rbx\n  unsigned __int64 v9; // rsi\n  char v10; // al\n  __int64 v11; // rbx\n  __int64 v12; // r12\n  __int64 v13; // rcx\n  char *v14; // rsi\n  __int64 v16; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v17; // [rsp+18h] [rbp-30h]\n\n  v17 = __readfsqword(0x28u);\n  v1 = sub_35A10((__int64)off_260B80);\n  v2 = (__int64 (__fastcall ***)(_QWORD, char *, signed __int64))v1;\n  if ( v1 )\n    (*(void (__fastcall **)(signed __int64))(*(_QWORD *)v1 + 8LL))(v1);\n  v3 = (unsigned __int64)(sub_134B0(*(__int64 **)(a1 + 8)) + 7) >> 3;\n  v4 = v3 - 1;\n  if ( v3 )\n  {\n    do\n    {\n      v5 = v4--;\n      v6 = sub_133D0(*(unsigned __int64 **)(a1 + 8), v5);\n      sub_10CD0(v2[1], v6);\n    }\n    while ( v4 != -1 );\n  }\n  v7 = (unsigned __int64)(sub_134B0(*(__int64 **)(a1 + 16)) + 7) >> 3;\n  v8 = v7 - 1;\n  if ( v7 )\n  {\n    do\n    {\n      v9 = v8--;\n      v10 = sub_133D0(*(unsigned __int64 **)(a1 + 16), v9);\n      sub_10CD0(v2[1], v10);\n    }\n    while ( v8 != -1 );\n  }\n  v11 = 0LL;\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64), __int64 *))(*v2)[3])(v2, &v16);\n  ((void (__fastcall *)(__int64 (__fastcall ***)(_QWORD, char *, signed __int64)))(*v2)[4])(v2);\n  v12 = sub_47400(v2);\n  sub_134B0(*(__int64 **)(a1 + 8));\n  sub_474E0(v12);\n  while ( 1 )\n  {\n    v13 = *((unsigned __int8 *)&v16 + v11);\n    if ( v11 )\n      break;\n    sub_474E0(v12);\nLABEL_8:\n    ++v11;\n  }\n  v14 = (char *)&unk_50393;\n  sub_474E0(v12);\n  if ( (_DWORD)v11 != 15 )\n    goto LABEL_8;\n  if ( *(_QWORD *)(a1 + 56) )\n  {\n    v14 = \" %s\";\n    sub_474E0(v12);\n  }\n  return sub_47470(v12, v14);\n}\n", 
            "funcStartAddr": "0x3c970L", 
            "funcEndAddr": "0x3cb0eL", 
            "funcName": "sub_3C970"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3CB10(__int64 a1)\n{\n  _QWORD *v1; // rax\n  _QWORD *v2; // rbx\n\n  v1 = (_QWORD *)sub_11440(2uLL, 8uLL, 0LL);\n  v2 = v1;\n  *v1 = 0LL;\n  v1[1] = 0LL;\n  *v1 = sub_3C970(a1);\n  return v2;\n}\n", 
            "funcStartAddr": "0x3cb10L", 
            "funcEndAddr": "0x3cb51L", 
            "funcName": "sub_3CB10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3CB60(_QWORD **a1)\n{\n  int v1; // ebp\n  int v2; // eax\n  unsigned int v3; // edx\n  unsigned __int64 *v4; // r12\n  char v5; // bp\n  __int64 *v6; // r12\n  signed __int64 *v7; // r13\n  char v8; // bp\n  __int64 *v9; // r12\n  signed __int64 *v10; // r13\n  int v11; // ebp\n  __int64 *v12; // r13\n  __int64 *v13; // r12\n\n  v1 = sub_13FC0(a1[4], 2LL);\n  v2 = sub_13FC0(a1[5], 2LL);\n  v3 = 0;\n  if ( v2 & v1 )\n  {\n    v4 = sub_141F0(a1[4], a1[5]);\n    v5 = sub_14030(v4, a1[1]);\n    sub_12FF0(v4);\n    v6 = sub_133C0((__int64)a1[4]);\n    sub_13A10(v6, (unsigned __int64 *)v6, 1LL);\n    v7 = (signed __int64 *)sub_161D0(a1[2], a1[3], v6);\n    sub_12FF0(v6);\n    v8 = sub_140A0(v7, 1LL) & v5;\n    sub_12FF0(v7);\n    v9 = sub_133C0((__int64)a1[5]);\n    sub_13A10(v9, (unsigned __int64 *)v9, 1LL);\n    v10 = (signed __int64 *)sub_161D0(a1[2], a1[3], v9);\n    sub_12FF0(v9);\n    v11 = sub_140A0(v10, 1LL) & v8 & 1;\n    sub_12FF0(v10);\n    v12 = sub_16830(a1[4], a1[5]);\n    v13 = sub_167F0(a1[4], a1[5]);\n    sub_12FF0(a1[4]);\n    sub_12FF0(a1[5]);\n    sub_12FF0(a1[6]);\n    a1[4] = v12;\n    a1[5] = v13;\n    a1[6] = sub_154D0((unsigned __int64 *)v13, v12);\n    v3 = v11 & 1;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x3cb60L", 
            "funcEndAddr": "0x3ccbeL", 
            "funcName": "sub_3CB60"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3CCC0(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // er12\n  int v4; // eax\n  unsigned __int64 result; // rax\n\n  v3 = a3;\n  v4 = sub_134B0(*(__int64 **)(a2 + 8));\n  sub_10D80(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 + 8), v4);\n  if ( v3 )\n  {\n    sub_13580(*(_QWORD *)(a1 + 8), *(__int64 **)(a2 + 8));\n    result = sub_13580(*(_QWORD *)(a1 + 8), *(__int64 **)(a2 + 16));\n  }\n  else\n  {\n    sub_13580(*(_QWORD *)(a1 + 8), *(__int64 **)(a2 + 16));\n    result = sub_13580(*(_QWORD *)(a1 + 8), *(__int64 **)(a2 + 8));\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3ccc0L", 
            "funcEndAddr": "0x3cd26L", 
            "funcName": "sub_3CCC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3CD30(__int64 a1, __int64 **a2)\n{\n  sub_3CCC0(a1, (__int64)a2, 1);\n  sub_13580(*(_QWORD *)(a1 + 8), a2[3]);\n  sub_13580(*(_QWORD *)(a1 + 8), a2[6]);\n  sub_13580(*(_QWORD *)(a1 + 8), a2[5]);\n  return sub_13580(*(_QWORD *)(a1 + 8), a2[4]);\n}\n", 
            "funcStartAddr": "0x3cd30L", 
            "funcEndAddr": "0x3cd80L", 
            "funcName": "sub_3CD30"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3CD80(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rax\n  _QWORD *v3; // rax\n  signed __int64 result; // rax\n  __int64 v5; // [rsp+0h] [rbp-38h]\n  __int64 v6; // [rsp+8h] [rbp-30h]\n  __int64 v7; // [rsp+10h] [rbp-28h]\n  int v8; // [rsp+18h] [rbp-20h]\n  __int64 *v9; // [rsp+20h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+28h] [rbp-10h]\n\n  v5 = a1;\n  v7 = a2;\n  v10 = __readfsqword(0x28u);\n  v9 = &v5;\n  v6 = 0LL;\n  v8 = 0;\n  sub_11140((__int64)&v5);\n  v2 = sub_136C0((__int64)v9);\n  sub_12FF0(v2);\n  v3 = sub_136C0((__int64)v9);\n  sub_12FF0(v3);\n  if ( *((_DWORD *)v9 + 6) )\n    result = 0xFFFFFFFFLL;\n  else\n    result = (unsigned int)v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x3cd80L", 
            "funcEndAddr": "0x3ce14L", 
            "funcName": "sub_3CD80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3CE20(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // rdi\n  _QWORD *v3; // rdi\n  _QWORD *v4; // rdi\n  _QWORD *v5; // rdi\n\n  v1 = a1;\n  v2 = (_QWORD *)a1[3];\n  if ( v2 )\n  {\n    sub_12FF0(v2);\n    v1[3] = 0LL;\n  }\n  v3 = (_QWORD *)v1[4];\n  if ( v3 )\n  {\n    sub_12FF0(v3);\n    v1[4] = 0LL;\n  }\n  v4 = (_QWORD *)v1[5];\n  if ( v4 )\n  {\n    sub_12FF0(v4);\n    v1[5] = 0LL;\n  }\n  v5 = (_QWORD *)v1[6];\n  if ( v5 )\n  {\n    sub_12FF0(v5);\n    v1[6] = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x3ce20L", 
            "funcEndAddr": "0x3ce7eL", 
            "funcName": "sub_3CE20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3CE80(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n  _QWORD *v2; // rdi\n  _QWORD *v3; // rdi\n  void *v4; // rdi\n\n  v1 = a1;\n  sub_3CE20(a1);\n  v2 = (_QWORD *)a1[1];\n  if ( v2 )\n  {\n    sub_12FF0(v2);\n    v1[1] = 0LL;\n  }\n  v3 = (_QWORD *)v1[2];\n  if ( v3 )\n  {\n    sub_12FF0(v3);\n    v1[2] = 0LL;\n  }\n  v4 = (void *)v1[7];\n  if ( v4 )\n  {\n    sub_114C0(v4);\n    v1[7] = 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x3ce80L", 
            "funcEndAddr": "0x3cecdL", 
            "funcName": "sub_3CE80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3CED0(__int64 a1)\n{\n  sub_3CE80((_QWORD *)(a1 - 64));\n  sub_114C0((void *)(a1 - 64));\n}\n", 
            "funcStartAddr": "0x3ced0L", 
            "funcEndAddr": "0x3cee6L", 
            "funcName": "sub_3CED0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3CEF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdi\n  __int64 v4; // rbx\n  _QWORD *v5; // rax\n  __int64 v6; // rdi\n  _QWORD *v7; // rax\n  __int64 v8; // rdi\n  _QWORD *v9; // rax\n  __int64 v10; // rdi\n  _QWORD *v11; // rax\n  __int64 v12; // rdi\n  _QWORD *v13; // rax\n  __int64 v14; // rdi\n\n  v2 = sub_11440(1uLL, 0x48uLL, 0LL);\n  v3 = *(_QWORD *)(a2 + 32);\n  v4 = v2;\n  *(_QWORD *)(v2 + 56) = 0LL;\n  *(_QWORD *)(v2 + 64) = off_260F40;\n  v5 = sub_13740(v3);\n  v6 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 8) = v5;\n  v7 = sub_13740(v6);\n  v8 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 16) = v7;\n  v9 = sub_13740(v8);\n  v10 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 24) = v9;\n  v11 = sub_13740(v10);\n  v12 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 48) = v11;\n  v13 = sub_13740(v12);\n  v14 = *(_QWORD *)(a2 + 32);\n  *(_QWORD *)(v4 + 32) = v13;\n  *(_QWORD *)(v4 + 40) = sub_13740(v14);\n  if ( !*(_DWORD *)(v14 + 24) && (unsigned __int8)sub_3CB60((_QWORD **)v4) )\n    return v4 + 64;\n  sub_3CE80((_QWORD *)v4);\n  sub_114C0((void *)v4);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3cef0L", 
            "funcEndAddr": "0x3cfa9L", 
            "funcName": "sub_3CEF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3CFB0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  char *v4; // rax\n  size_t v5; // rdx\n  __int64 v6; // rax\n  __int64 v7; // rdi\n  _QWORD *v8; // rbx\n  _QWORD *v9; // rax\n  __int64 v10; // rdi\n  _QWORD *v11; // rax\n  __int64 v12; // rdx\n  signed __int64 result; // rax\n  __int64 v14; // [rsp+0h] [rbp-48h]\n  __int64 v15; // [rsp+8h] [rbp-40h]\n  __int64 v16; // [rsp+10h] [rbp-38h]\n  int v17; // [rsp+18h] [rbp-30h]\n  __int64 *v18; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v19; // [rsp+28h] [rbp-20h]\n\n  v3 = a1;\n  v14 = a2;\n  v16 = a3;\n  v19 = __readfsqword(0x28u);\n  v18 = &v14;\n  v15 = 0LL;\n  v17 = 0;\n  v4 = sub_111C0((__int64)&v14);\n  if ( !(unsigned __int8)sub_47EC0(v4, v5, \"ssh-rsa\") )\n    return 0LL;\n  v6 = sub_11440(1uLL, 0x48uLL, 0LL);\n  v7 = (__int64)v18;\n  *(_QWORD *)(v6 + 64) = v3;\n  v8 = (_QWORD *)v6;\n  v9 = sub_13740(v7);\n  v10 = (__int64)v18;\n  v8[2] = v9;\n  v11 = sub_13740(v10);\n  v12 = (__int64)v18;\n  v8[1] = v11;\n  result = (signed __int64)(v8 + 8);\n  v8[3] = 0LL;\n  v8[6] = 0LL;\n  v8[5] = 0LL;\n  v8[4] = 0LL;\n  LODWORD(v12) = *(_DWORD *)(v12 + 24);\n  v8[7] = 0LL;\n  if ( (_DWORD)v12 )\n  {\n    sub_3CE80(v8);\n    sub_114C0(v8);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3cfb0L", 
            "funcEndAddr": "0x3d0b1L", 
            "funcName": "sub_3CFB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3D0C0(__int64 a1, __int64 a2, __int64 a3)\n{\n  signed __int64 v3; // rax\n  _QWORD *v4; // rbx\n  unsigned int v5; // ebp\n\n  v3 = sub_3CFB0(a1, a2, a3);\n  if ( v3 )\n  {\n    v4 = (_QWORD *)(v3 - 64);\n    v5 = sub_134B0(*(__int64 **)(v3 - 56));\n    sub_3CE80(v4);\n    sub_114C0(v4);\n  }\n  else\n  {\n    v5 = -1;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x3d0c0L", 
            "funcEndAddr": "0x3d107L", 
            "funcName": "sub_3D0C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3D110(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r13\n  __int64 v6; // r12\n  signed __int64 v7; // rax\n  signed __int64 v8; // rbx\n  _QWORD *v9; // rbp\n  _QWORD *v10; // rax\n  __int64 v11; // rdi\n  _QWORD *v12; // rax\n  __int64 v13; // rdi\n  _QWORD *v14; // rax\n  __int64 v15; // rdi\n  __int64 v17; // [rsp+0h] [rbp-58h]\n  __int64 v18; // [rsp+8h] [rbp-50h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  __int64 *v21; // [rsp+20h] [rbp-38h]\n  unsigned __int64 v22; // [rsp+28h] [rbp-30h]\n\n  v5 = a4;\n  v6 = a5;\n  v22 = __readfsqword(0x28u);\n  v7 = sub_3CFB0(a1, a2, a3);\n  v8 = v7;\n  if ( v7 )\n  {\n    v9 = (_QWORD *)(v7 - 64);\n    v17 = v5;\n    v21 = &v17;\n    v19 = v6;\n    v18 = 0LL;\n    v20 = 0;\n    v10 = sub_13740((__int64)&v17);\n    v11 = (__int64)v21;\n    *(_QWORD *)(v8 - 40) = v10;\n    v12 = sub_13740(v11);\n    v13 = (__int64)v21;\n    *(_QWORD *)(v8 - 32) = v12;\n    v14 = sub_13740(v13);\n    v15 = (__int64)v21;\n    *(_QWORD *)(v8 - 24) = v14;\n    *(_QWORD *)(v8 - 16) = sub_13740(v15);\n    if ( *((_DWORD *)v21 + 6) || !(unsigned __int8)sub_3CB60((_QWORD **)v9) )\n    {\n      v8 = 0LL;\n      sub_3CE80(v9);\n      sub_114C0(v9);\n    }\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x3d110L", 
            "funcEndAddr": "0x3d1e9L", 
            "funcName": "sub_3D110"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3D220(_QWORD *a1)\n{\n  sub_3CE80(a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x3d220L", 
            "funcEndAddr": "0x3d232L", 
            "funcName": "sub_3D220"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3D240(__int64 a1)\n{\n  return sub_134B0(*(__int64 **)(a1 + 8));\n}\n", 
            "funcStartAddr": "0x3d240L", 
            "funcEndAddr": "0x3d252L", 
            "funcName": "sub_3D240"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_3D430(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r12\n  unsigned __int64 v6; // rbp\n  __int64 *v7; // rdi\n  __int64 v8; // r13\n  unsigned __int64 v9; // rbx\n  unsigned __int64 *v10; // r12\n  __int64 v11; // rax\n  _BYTE *v12; // rbp\n  __int64 v13; // r14\n  unsigned __int64 v14; // rsi\n  signed __int64 v15; // r15\n  signed int v16; // edx\n  _BYTE *v17; // rcx\n  char v18; // cl\n  _BYTE *v19; // rax\n  char v20; // cl\n  _QWORD *result; // rax\n  _QWORD *v22; // [rsp+0h] [rbp-D8h]\n  void *s2; // [rsp+8h] [rbp-D0h]\n  __int64 (**v24)(void); // [rsp+10h] [rbp-C8h]\n  unsigned __int64 *v25; // [rsp+18h] [rbp-C0h]\n  _BYTE *v26; // [rsp+20h] [rbp-B8h]\n  __int64 v27; // [rsp+28h] [rbp-B0h]\n  __int64 v28; // [rsp+30h] [rbp-A8h]\n  int v29; // [rsp+38h] [rbp-A0h]\n  __int64 *v30; // [rsp+40h] [rbp-98h]\n  char v31; // [rsp+50h] [rbp-88h]\n  unsigned __int64 v32; // [rsp+98h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a1;\n  v6 = a4;\n  v7 = *(__int64 **)(a1 + 8);\n  v8 = *(_QWORD *)(a2 + 40);\n  v32 = __readfsqword(0x28u);\n  v24 = (__int64 (**)(void))a2;\n  v9 = (unsigned __int64)(sub_134B0(v7) + 7) >> 3;\n  if ( v6 != (signed int)v9 )\n    return 0LL;\n  v25 = sub_13290(v4, v6);\n  v10 = sub_3B950(\n          v25,\n          *(unsigned __int64 **)(v5 + 24),\n          *(__int64 **)(v5 + 8),\n          *(_QWORD *)(v5 + 32),\n          *(__int64 **)(v5 + 40),\n          *(unsigned __int64 **)(v5 + 48));\n  v11 = sub_11440(v6, 1uLL, 0LL);\n  v12 = (_BYTE *)v11;\n  if ( (signed int)v9 > 0 )\n  {\n    v13 = v11;\n    v14 = (signed int)v9 - 1;\n    v15 = v14 - 1;\n    s2 = (void *)(v14 - 1 - (unsigned int)(v9 - 1));\n    while ( 1 )\n    {\n      *(_BYTE *)(++v13 - 1) = sub_133D0(v10, v14);\n      v14 = v15;\n      if ( (void *)v15 == s2 )\n        break;\n      --v15;\n    }\n  }\n  sub_12FF0(v25);\n  sub_12FF0(v10);\n  sub_3BB70((__int64)v24, (__int64)&v12[(signed int)v8 + 1], (unsigned int)(v9 - v8 - 1), (__int64)(v12 + 1), v8);\n  sub_3BB70((__int64)v24, (__int64)(v12 + 1), (unsigned int)v8, (__int64)&v12[(signed int)v8 + 1], v9 - v8 - 1);\n  if ( *v12 )\n    goto LABEL_21;\n  if ( (unsigned int)v8 > 0x40 )\n    __assert_fail(\"HLEN <= lenof(labelhash)\", \"sshrsa.c\", 0x425u, \"ssh_rsakex_decrypt\");\n  sub_20450(v24, (__int64)\"\", 0LL, (__int64)&v31);\n  if ( memcmp(&v12[(signed int)v8 + 1], &v31, (signed int)v8) )\n    goto LABEL_21;\n  v16 = 2 * v8 + 1;\n  v17 = &v12[v16];\n  if ( (signed int)v9 > v16 )\n  {\n    v18 = *v17;\n    if ( v18 == 1 )\n    {\nLABEL_22:\n      v17 = &v12[++v16];\n    }\n    else\n    {\n      v19 = &v12[v16 + 1];\n      if ( v18 )\n      {\nLABEL_21:\n        sub_114C0(v12);\n        return 0LL;\n      }\n      while ( 1 )\n      {\n        ++v16;\n        v17 = v19;\n        if ( (_DWORD)v9 == v16 )\n          break;\n        v20 = *v19;\n        if ( *v19 == 1 )\n          goto LABEL_22;\n        ++v19;\n        if ( v20 )\n          goto LABEL_21;\n      }\n      v16 = v9;\n    }\n  }\n  v26 = v17;\n  v27 = 0LL;\n  v29 = 0;\n  v30 = (__int64 *)&v26;\n  v28 = (signed int)v9 - v16;\n  v22 = sub_13740((__int64)&v26);\n  sub_114C0(v12);\n  result = v22;\n  if ( *((_DWORD *)v30 + 6) || v30[2] != v30[1] )\n  {\n    sub_12FF0(v22);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3d430L", 
            "funcEndAddr": "0x3d6f0L", 
            "funcName": "sub_3D430"
        }, 
        {
            "decompiledFuncCode": "__m128i *__usercall sub_3D6F0@<rax>(char a1@<dl>, _QWORD *a2@<rcx>, unsigned int a3@<ebp>, __m128i *a4@<rdi>, unsigned int a5@<esi>, __int64 a6@<r8>, int a7@<r12d>, unsigned int a8@<r14d>)\n{\n  __int64 v8; // r13\n  __m128i *v9; // rbx\n  char v10; // r8\n  __int64 (__fastcall **v11)(_QWORD, _QWORD, _QWORD); // rdi\n  __int64 (__fastcall *v12)(_QWORD, _QWORD, _QWORD); // rax\n  _QWORD *v13; // r15\n  char v14; // ST0F_1\n  __m128i v15; // xmm0\n  __m128i *result; // rax\n  __int64 v17; // rax\n  __int128 v18; // [rsp+10h] [rbp-78h]\n  __int128 v19; // [rsp+20h] [rbp-68h]\n  __int128 v20; // [rsp+30h] [rbp-58h]\n  __int64 v21; // [rsp+40h] [rbp-48h]\n\n  v8 = a6;\n  v9 = a4;\n  v10 = 0;\n  v11 = (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))*a2;\n  v12 = *(__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))*a2;\n  if ( a1 )\n  {\n    v13 = a2;\n    a3 = (signed int)(a5 - 33) / 2;\n    a8 = a5 - 33 - a3;\n    a7 = (signed int)(a3 - 33) / 2;\n    if ( a7 > 32 )\n    {\n      *(_QWORD *)&v20 = ((__int64 (__fastcall *)(__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD), __int64, _QWORD, _QWORD *, _QWORD))v12)(\n                          v11,\n                          v8,\n                          (unsigned int)a7,\n                          a2,\n                          0LL);\n      *((_QWORD *)&v20 + 1) = (*(__int64 (__fastcall **)(_QWORD, __int64, _QWORD))*v13)(*v13, v8, a3);\n      v17 = (*(__int64 (__fastcall **)(_QWORD, __int64, _QWORD))*v13)(*v13, v8, a8);\n      v11 = (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))*v13;\n      v21 = v17;\n      v10 = 1;\n      v12 = *v11;\n    }\n  }\n  v14 = v10;\n  *(_QWORD *)((char *)&v18 + 4) = __PAIR__(a7, a5);\n  HIDWORD(v18) = a3;\n  *((_QWORD *)&v19 + 1) = v12(v11, v8, a5);\n  LODWORD(v19) = a8;\n  LOBYTE(v18) = v14;\n  v15 = _mm_load_si128((const __m128i *)&v18);\n  v9[3].m128i_i64[0] = v21;\n  result = v9;\n  *v9 = v15;\n  v9[1] = _mm_load_si128((const __m128i *)&v19);\n  v9[2] = _mm_load_si128((const __m128i *)&v20);\n  return result;\n}\n", 
            "funcStartAddr": "0x3d6f0L", 
            "funcEndAddr": "0x3d7f3L", 
            "funcName": "sub_3D6F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3D800(char a1, int a2, int a3, int a4, int a5, unsigned int a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)\n{\n  unsigned int v12; // er12\n  void (__fastcall *v13)(__int64, __int64); // rax\n  int v14; // er13\n  int v15; // ebp\n  __int64 v16; // rax\n  __int64 v17; // r13\n  __int64 *v18; // r13\n  __int64 v19; // rax\n  unsigned __int64 *v20; // rbp\n  unsigned __int64 **v21; // r12\n  __int64 *v22; // r15\n  __int64 v23; // r12\n  __int64 v25; // rbp\n  int v26; // [rsp+8h] [rbp-40h]\n  __int64 *v27; // [rsp+8h] [rbp-40h]\n\n  v12 = a6;\n  v26 = a3;\n  v13 = *(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a12 + 24LL);\n  if ( a1 )\n  {\n    v14 = a4;\n    v15 = a5;\n    v13(a12, a8);\n    v16 = sub_17B90(v26, v12, 13);\n    v27 = (__int64 *)(*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a11 + 24LL))(a11, v16, a12);\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)a12 + 48LL))(a12);\n    (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a12 + 24LL))(a12, a9);\n    v17 = sub_17B90(v14, v12, 13);\n    sub_17FC0(v17, v27);\n    v18 = (__int64 *)(*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a11 + 24LL))(a11, v17, a12);\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)a12 + 48LL))(a12);\n    (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a12 + 24LL))(a12, a10);\n    v19 = sub_17B90(v15, v12, 13);\n    v20 = (unsigned __int64 *)(*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a11 + 24LL))(\n                                a11,\n                                v19,\n                                a12);\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)a12 + 48LL))(a12);\n    (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a12 + 24LL))(a12, a7);\n    v21 = (unsigned __int64 **)sub_17B90(a2, v12, 13);\n    sub_18020((__int64)v21, 0x10001u, 1u);\n    sub_17FC0((__int64)v21, v18);\n    v22 = sub_133C0((__int64)v20);\n    sub_13A10(v22, v20, 1LL);\n    sub_17D30(v21, (__int64 *)v20, (unsigned __int64 *)v22);\n    sub_12FF0(v22);\n    v23 = (*(__int64 (__fastcall **)(__int64, unsigned __int64 **, __int64))(*(_QWORD *)a11 + 24LL))(a11, v21, a12);\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)a12 + 48LL))(a12);\n    if ( v27 )\n      sub_12FF0(v27);\n    if ( v18 )\n      sub_12FF0(v18);\n    if ( v20 )\n      sub_12FF0(v20);\n  }\n  else\n  {\n    v13(a12, a7);\n    v25 = sub_17B90(a2, v12, 13);\n    sub_18020(v25, 0x10001u, 1u);\n    v23 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a11 + 24LL))(a11, v25, a12);\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)a12 + 48LL))(a12);\n  }\n  return v23;\n}\n", 
            "funcStartAddr": "0x3d800L", 
            "funcEndAddr": "0x3da0cL", 
            "funcName": "sub_3D800"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __usercall sub_3DA10@<rax>(char a1@<dl>, _QWORD *a2@<rcx>, __int64 a3@<rdi>, int a4@<esi>, __int64 a5@<r8>, int a6@<r12d>)\n{\n  char v6; // bl\n  int v7; // ebp\n  __int64 v8; // r14\n  char v9; // dl\n  unsigned int v10; // ebx\n  unsigned int v11; // eax\n  unsigned __int64 v12; // rdx\n  unsigned int v13; // er13\n  unsigned int v14; // er14\n  unsigned __int64 *v15; // r12\n  unsigned int v16; // er15\n  __int64 *v17; // rbx\n  __int64 *v18; // rbp\n  __int64 v19; // r12\n  int v20; // ebx\n  int v21; // edx\n  int v22; // eax\n  unsigned int v23; // ebx\n  int v24; // er9\n  int v25; // er13\n  unsigned __int64 *v26; // rbx\n  unsigned __int64 *v27; // rax\n  unsigned __int64 *v28; // rbp\n  __int64 *v29; // r15\n  __int64 *v30; // r14\n  __int64 *v31; // r12\n  __int64 *v32; // r13\n  unsigned __int64 *v33; // r12\n  unsigned __int64 *v34; // rax\n  int v35; // eax\n  int v36; // edx\n  int v37; // eax\n  bool v38; // zf\n  signed __int64 result; // rax\n  char v40; // al\n  int v41; // [rsp+Ch] [rbp-ECh]\n  __int64 *v42; // [rsp+10h] [rbp-E8h]\n  _QWORD *v43; // [rsp+18h] [rbp-E0h]\n  __int64 v44; // [rsp+20h] [rbp-D8h]\n  unsigned __int64 *v45; // [rsp+28h] [rbp-D0h]\n  unsigned int v46; // [rsp+30h] [rbp-C8h]\n  int v47; // [rsp+34h] [rbp-C4h]\n  char v48; // [rsp+40h] [rbp-B8h]\n  int v49; // [rsp+44h] [rbp-B4h]\n  int v50; // [rsp+48h] [rbp-B0h]\n  int v51; // [rsp+4Ch] [rbp-ACh]\n  int v52; // [rsp+50h] [rbp-A8h]\n  __int64 v53; // [rsp+58h] [rbp-A0h]\n  __int64 v54; // [rsp+60h] [rbp-98h]\n  __int64 v55; // [rsp+68h] [rbp-90h]\n  __int64 v56; // [rsp+70h] [rbp-88h]\n  char v57; // [rsp+80h] [rbp-78h]\n  int v58; // [rsp+84h] [rbp-74h]\n  int v59; // [rsp+88h] [rbp-70h]\n  int v60; // [rsp+8Ch] [rbp-6Ch]\n  int v61; // [rsp+90h] [rbp-68h]\n  __int64 v62; // [rsp+98h] [rbp-60h]\n  __int64 v63; // [rsp+A0h] [rbp-58h]\n  __int64 v64; // [rsp+A8h] [rbp-50h]\n  __int64 v65; // [rsp+B0h] [rbp-48h]\n  unsigned __int64 v66; // [rsp+B8h] [rbp-40h]\n\n  v6 = a1;\n  v43 = a2;\n  v66 = __readfsqword(0x28u);\n  v44 = a5;\n  *(_QWORD *)(a3 + 64) = off_260F40;\n  v45 = sub_12FA0(65537LL);\n  v7 = a4 - a4 / 2;\n  v46 = a4 / 2;\n  v41 = v7;\n  if ( a4 / 2 > v7 )\n    __assert_fail(\"pbits >= qbits\", \"sshrsag.c\", 0x7Du, \"rsa_generate\");\n  v8 = v44;\n  sub_3D6F0(v6, v43, v7, (__m128i *)&v48, v7, v44, a6, v44);\n  v9 = v6;\n  v10 = 4096;\n  sub_3D6F0(v9, v43, v7, (__m128i *)&v57, v46, v8, a6, v8);\n  (*(void (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v8 + 16LL))(v8, v46);\n  v42 = sub_12F90(32LL);\n  do\n  {\n    v11 = (v10 + 0x1FFFFFF) / v10;\n    if ( v10 + 2 >= v11 )\n      v11 = v10 + 2;\n    v12 = 0LL;\n    if ( v11 != 8193 )\n      v12 = 0x2000 - v11;\n    ++v10;\n    sub_13980(v42, (unsigned __int64 *)v42, v12);\n  }\n  while ( v10 != 0x2000 );\n  v13 = 0;\n  v14 = 0;\n  v15 = sub_12FA0(0LL);\n  v16 = 4096;\n  v17 = sub_12F90(32LL);\n  sub_14220(v17, (unsigned __int64 *)v42, 1uLL);\n  v18 = sub_16DD0(v15, (unsigned __int64 *)v17, (void (__fastcall *)(_BYTE *, unsigned __int64))sub_3B660);\n  sub_12FF0(v15);\n  sub_12FF0(v17);\n  v47 = sub_13400((unsigned __int64 *)v18, 0LL);\n  sub_142E0(v18, (unsigned __int64 *)v18, 1uLL);\n  do\n  {\n    v23 = v16 + 2;\n    if ( v16 + 2 < (v16 + 0x1FFFFFF) / v16 )\n      v23 = (v16 + 0x1FFFFFF) / v16;\n    if ( v23 == 8193 )\n    {\n      v19 = 0LL;\n      v23 = 0x2000;\n    }\n    else\n    {\n      v19 = 0x2000 - v23;\n    }\n    v20 = (unsigned __int64)sub_13420(v18) + v23;\n    v21 = -((unsigned __int64)sub_13FC0(v18, v19) ^ 1);\n    v22 = v14 ^ v16++;\n    v13 ^= (v13 ^ v20) & v21;\n    v14 ^= v21 & v22;\n    sub_13A10(v18, (unsigned __int64 *)v18, v19);\n  }\n  while ( v16 != 0x2000 );\n  sub_12FF0(v18);\n  sub_12FF0(v42);\n  if ( v14 <= 0xFFF )\n    __assert_fail(\"lo <= a\", \"sshrsag.c\", 0x114u, \"invent_firstbits\");\n  if ( v13 <= 0xFFF )\n    __assert_fail(\"lo <= b\", \"sshrsag.c\", 0x116u, \"invent_firstbits\");\n  if ( v13 > 0x1FFF )\n    __assert_fail(\"b < hi\", \"sshrsag.c\", 0x117u, \"invent_firstbits\");\n  if ( v13 * v14 <= 0x1FFFFFF )\n    __assert_fail(\"a * b >= minproduct\", \"sshrsag.c\", 0x118u, \"invent_firstbits\");\n  if ( v13 < v14 + 2 )\n    __assert_fail(\"b >= a + min_separation\", \"sshrsag.c\", 0x119u, \"invent_firstbits\");\n  v24 = -v47 & (v13 ^ v14);\n  v25 = v24 ^ v13;\n  v26 = (unsigned __int64 *)sub_3D800(v48, v49, v50, v51, v52, v14 ^ v24, v53, v54, v55, v56, (__int64)v43, v44);\n  v27 = (unsigned __int64 *)sub_3D800(v57, v58, v59, v60, v61, v25, v62, v63, v64, v65, (__int64)v43, v44);\n  v28 = v27;\n  if ( v46 == v41 )\n  {\n    v40 = sub_13D30(v27, v26);\n    sub_131B0((__int64 *)v26, v28, v40);\n  }\n  else if ( !(unsigned int)sub_13D30(v26, v27) )\n  {\n    goto LABEL_33;\n  }\n  v29 = (__int64 *)sub_141F0(v26, v28);\n  v30 = sub_133C0((__int64)v26);\n  sub_13A10(v30, (unsigned __int64 *)v30, 1LL);\n  v31 = sub_133C0((__int64)v28);\n  sub_13A10(v31, (unsigned __int64 *)v31, 1LL);\n  v32 = (__int64 *)sub_141F0((unsigned __int64 *)v30, (unsigned __int64 *)v31);\n  sub_12FF0(v30);\n  sub_12FF0(v31);\n  v33 = sub_154D0(v45, v32);\n  sub_12FF0(v32);\n  v34 = sub_154D0(v28, (__int64 *)v26);\n  *(_QWORD *)(a3 + 32) = v26;\n  *(_QWORD *)(a3 + 8) = v29;\n  *(_QWORD *)(a3 + 16) = v45;\n  *(_QWORD *)(a3 + 24) = v33;\n  *(_QWORD *)(a3 + 40) = v28;\n  *(_QWORD *)(a3 + 48) = v34;\n  v35 = sub_134B0(v29);\n  v36 = v35 + 14;\n  *(_DWORD *)a3 = v35;\n  v37 = v35 + 7;\n  if ( v37 < 0 )\n    v37 = v36;\n  v38 = __readfsqword(0x28u) == v66;\n  *(_DWORD *)(a3 + 4) = v37 >> 3;\n  result = 1LL;\n  if ( !v38 )\nLABEL_33:\n    __assert_fail(\"mp_cmp_hs(p, q)\", \"sshrsag.c\", 0x92u, \"rsa_generate\");\n  return result;\n}\n", 
            "funcStartAddr": "0x3da10L", 
            "funcEndAddr": "0x3df31L", 
            "funcName": "sub_3DA10"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3DF40()\n{\n  unsigned int v5; // esi\n  __int64 result; // rax\n\n  _RAX = 0LL;\n  __asm { cpuid }\n  v5 = _RAX;\n  result = 0LL;\n  if ( v5 > 6 )\n  {\n    _RAX = 7LL;\n    __asm { cpuid }\n    result = ((unsigned int)_RBX >> 29) & 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3df40L", 
            "funcEndAddr": "0x3df90L", 
            "funcName": "sub_3DF40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3DF90()\n{\n  char v0; // al\n  __int64 (__fastcall *v1)(); // rdx\n  __int64 (__fastcall **v2)(); // rdi\n  __int64 v3; // rax\n  __int64 v4; // rbx\n\n  v0 = byte_26566C;\n  if ( !byte_26566D )\n  {\n    v0 = sub_3DF40();\n    byte_26566D = 1;\n    byte_26566C = v0;\n  }\n  v1 = sub_3E180;\n  v2 = off_261040;\n  if ( v0 )\n  {\n    v1 = sub_3E1C0;\n    if ( v0 )\n      v2 = off_260FE0;\n  }\n  v3 = ((__int64 (__fastcall *)(__int64 (__fastcall **)()))v1)(v2);\n  v4 = v3;\n  if ( v3 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 8LL))(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x3df90L", 
            "funcEndAddr": "0x3dff1L", 
            "funcName": "sub_3DF90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3E000(__int64 a1)\n{\n  __m128i v1; // xmm0\n\n  v1 = _mm_load_si128((const __m128i *)&xmmword_50800);\n  *(_QWORD *)(a1 - 40) = 0LL;\n  *(_QWORD *)(a1 - 32) = 0LL;\n  *(__m128i *)(a1 - 136) = v1;\n  *(__m128i *)(a1 - 120) = _mm_load_si128((const __m128i *)&xmmword_50810);\n}\n", 
            "funcStartAddr": "0x3e000L", 
            "funcEndAddr": "0x3e02cL", 
            "funcName": "sub_3E000"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3E030(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __m128i v3; // xmm0\n  signed __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 - 24);\n  *(__m128i *)(a1 - 136) = _mm_load_si128((const __m128i *)(a2 - 136));\n  *(__m128i *)(a1 - 120) = _mm_load_si128((const __m128i *)(a2 - 120));\n  *(__m128i *)(a1 - 104) = _mm_load_si128((const __m128i *)(a2 - 104));\n  *(__m128i *)(a1 - 88) = _mm_load_si128((const __m128i *)(a2 - 88));\n  *(__m128i *)(a1 - 72) = _mm_load_si128((const __m128i *)(a2 - 72));\n  *(__m128i *)(a1 - 56) = _mm_load_si128((const __m128i *)(a2 - 56));\n  *(__m128i *)(a1 - 40) = _mm_load_si128((const __m128i *)(a2 - 40));\n  *(__m128i *)(a1 - 24) = _mm_load_si128((const __m128i *)(a2 - 24));\n  *(__m128i *)(a1 - 8) = _mm_load_si128((const __m128i *)(a2 - 8));\n  v3 = _mm_load_si128((const __m128i *)(a2 + 8));\n  *(_QWORD *)(a1 - 24) = v2;\n  result = a1 - 16;\n  *(__m128i *)(a1 + 8) = v3;\n  *(_QWORD *)(a1 - 8) = a1 - 16;\n  *(_QWORD *)(a1 + 8) = a1 - 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x3e030L", 
            "funcEndAddr": "0x3e0a5L", 
            "funcName": "sub_3E030"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3E0B0(__int64 a1)\n{\n  sub_47E30(a1 - 128, 144LL);\n  sub_114C0((void *)(a1 - 128));\n}\n", 
            "funcStartAddr": "0x3e0b0L", 
            "funcEndAddr": "0x3e0cbL", 
            "funcName": "sub_3E0B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3E0D0(__int64 a1)\n{\n  void *v1; // rbx\n\n  v1 = *(void **)(a1 - 24);\n  sub_47E30(a1 - 136, 160LL);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x3e0d0L", 
            "funcEndAddr": "0x3e0efL", 
            "funcName": "sub_3E0D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3E0F0(__int64 a1)\n{\n  __m128i v1; // xmm0\n\n  v1 = _mm_load_si128((const __m128i *)&xmmword_507E0);\n  *(_QWORD *)(a1 - 32) = 0LL;\n  *(_QWORD *)(a1 - 24) = 0LL;\n  *(__m128i *)(a1 - 128) = v1;\n  *(__m128i *)(a1 - 112) = _mm_load_si128((const __m128i *)&xmmword_507F0);\n}\n", 
            "funcStartAddr": "0x3e0f0L", 
            "funcEndAddr": "0x3e119L", 
            "funcName": "sub_3E0F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3E120(__m128i *a1, const __m128i *a2)\n{\n  signed __int64 result; // rax\n  __m128i v3; // xmm0\n\n  a1[-8] = _mm_loadu_si128(a2 - 8);\n  result = (signed __int64)a1[-1].m128i_i64;\n  a1[-7] = _mm_loadu_si128(a2 - 7);\n  a1[-6] = _mm_loadu_si128(a2 - 6);\n  a1[-5] = _mm_loadu_si128(a2 - 5);\n  a1[-4] = _mm_loadu_si128(a2 - 4);\n  a1[-3] = _mm_loadu_si128(a2 - 3);\n  a1[-2] = _mm_loadu_si128(a2 - 2);\n  a1[-1] = _mm_loadu_si128(a2 - 1);\n  v3 = _mm_loadu_si128(a2);\n  a1[-1].m128i_i64[1] = result;\n  *a1 = v3;\n  a1->m128i_i64[1] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x3e120L", 
            "funcEndAddr": "0x3e180L", 
            "funcName": "sub_3E120"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3E180(__int64 a1)\n{\n  __int64 v1; // rax\n  signed __int64 v2; // rdx\n  signed __int64 result; // rax\n\n  v1 = sub_11440(1uLL, 0x90uLL, 0LL);\n  v2 = v1 + 112;\n  *(_QWORD *)(v1 + 128) = a1;\n  result = v1 + 128;\n  *(_QWORD *)(result - 16) = sub_3EC90;\n  *(_QWORD *)(result - 8) = v2;\n  *(_QWORD *)(result + 8) = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x3e180L", 
            "funcEndAddr": "0x3e1b9L", 
            "funcName": "sub_3E180"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3E1C0(__int64 a1)\n{\n  char v1; // al\n  __int64 v2; // rax\n  _QWORD *v3; // rdx\n\n  v1 = byte_26566C;\n  if ( !byte_26566D )\n  {\n    v1 = sub_3DF40();\n    byte_26566D = 1;\n    byte_26566C = v1;\n  }\n  if ( !v1 )\n    return 0LL;\n  v2 = sub_11440(0xAFuLL, 1uLL, 0LL);\n  v3 = (_QWORD *)((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);\n  v3[14] = v2;\n  v3[17] = a1;\n  v3[15] = sub_3E310;\n  v3[16] = v3 + 15;\n  v3[18] = v3 + 15;\n  return (signed __int64)(v3 + 17);\n}\n", 
            "funcStartAddr": "0x3e1c0L", 
            "funcEndAddr": "0x3e244L", 
            "funcName": "sub_3E1C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3E250(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  signed __int64 v4; // r12\n  __int64 result; // rax\n  int v6; // edx\n\n  v2 = 8LL * *(_QWORD *)(a1 - 24);\n  v3 = ((55 - *(_DWORD *)(a1 - 32)) & 0x3F) + 1LL;\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  if ( v3 != 1 )\n  {\n    v4 = 1LL;\n    do\n    {\n      ++v4;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 0);\n    }\n    while ( v3 != v4 );\n  }\n  sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v2);\n  result = *(_QWORD *)(a1 - 32);\n  if ( result )\n    sub_6118();\n  do\n  {\n    v6 = *(_DWORD *)(a1 + 4 * result - 128);\n    *(_BYTE *)(a2 + 4 * result + 3) = v6;\n    *(_BYTE *)(a2 + 4 * result + 2) = BYTE1(v6);\n    *(_BYTE *)(a2 + 4 * result + 1) = BYTE2(v6);\n    *(_BYTE *)(a2 + 4 * result++) = HIBYTE(v6);\n  }\n  while ( result != 8 );\n  return result;\n}\n", 
            "funcStartAddr": "0x3e250L", 
            "funcEndAddr": "0x3e303L", 
            "funcName": "sub_3E250"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_3E310(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r14\n  char *v4; // r15\n  __int64 i; // rbp\n  size_t v6; // rdi\n  const void *v7; // rsi\n  size_t v8; // rbx\n  void *result; // rax\n  __int64 v10; // rdi\n  __int128 v11; // t1\n\n  v3 = a3;\n  v4 = a2;\n  for ( i = a1; v3; *(__m128i *)(i - 120) = _mm_add_epi32(_XMM4, _XMM1) )\n  {\n    v6 = *(_QWORD *)(i - 24);\n    while ( 1 )\n    {\n      v7 = v4;\n      v8 = 64 - v6;\n      if ( 64 - v6 > v3 )\n        v8 = v3;\n      v4 += v8;\n      v3 -= v8;\n      result = memcpy((void *)(i - 88 + v6), v7, v8);\n      v10 = *(_QWORD *)(i - 24);\n      *(_QWORD *)(i - 16) += v8;\n      v6 = v8 + v10;\n      *(_QWORD *)(i - 24) = v6;\n      if ( v6 == 64 )\n        break;\n      if ( !v3 )\n        return result;\n    }\n    v11 = *(_OWORD *)(i - 88);\n    *(_QWORD *)(i - 24) = 0LL;\n    _XMM4 = _mm_load_si128((const __m128i *)(i - 120));\n    __asm { sha256rnds2 xmm2, xmm4, xmm0 }\n    _XMM5 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(i - 72)), (__m128i)xmmword_50820);\n    __asm\n    {\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n    }\n    _XMM10 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(i - 56)), (__m128i)xmmword_50820);\n    _XMM6 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(i - 40)), (__m128i)xmmword_50820);\n    __asm\n    {\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256msg1 xmm7, xmm5\n      sha256msg1 xmm5, xmm10\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm7, xmm6\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256msg1 xmm9, xmm6\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm5, xmm7\n      sha256msg1 xmm6, xmm7\n      sha256rnds2 xmm1, xmm2, xmm0\n    }\n    _XMM8 = _XMM5;\n    __asm\n    {\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm9, xmm8\n      sha256msg1 xmm7, xmm8\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm5, xmm9\n      sha256msg1 xmm8, xmm9\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm7, xmm5\n      sha256msg1 xmm9, xmm5\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm8, xmm7\n      sha256msg1 xmm5, xmm7\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm9, xmm8\n      sha256msg1 xmm7, xmm8\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm5, xmm9\n      sha256msg1 xmm8, xmm9\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm7, xmm5\n      sha256msg1 xmm6, xmm5\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm8, xmm7\n      sha256msg1 xmm5, xmm7\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm6, xmm8\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n      sha256msg2 xmm5, xmm6\n      sha256rnds2 xmm1, xmm2, xmm0\n      sha256rnds2 xmm2, xmm1, xmm0\n    }\n    *(__m128i *)(i - 104) = _mm_add_epi32(_mm_load_si128((const __m128i *)(i - 104)), _XMM2);\n    __asm { sha256rnds2 xmm1, xmm2, xmm0 }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3e310L", 
            "funcEndAddr": "0x3e6ccL", 
            "funcName": "sub_3E310"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3E6D0(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r12\n  signed __int64 v3; // rbp\n  signed __int64 v4; // rbx\n  unsigned __int64 result; // rax\n  __m128i v6; // xmm2\n  __m128i v7; // xmm0\n  __m128i v8; // xmm1\n  __m128i v9; // xmm0\n  __m128i v10; // xmm2\n\n  v2 = 8LL * *(_QWORD *)(a1 - 32);\n  v3 = ((55 - *(_DWORD *)(a1 - 40)) & 0x3F) + 1LL;\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  if ( v3 != 1 )\n  {\n    v4 = 1LL;\n    do\n    {\n      ++v4;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 0);\n    }\n    while ( v3 != v4 );\n  }\n  result = sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v2);\n  if ( *(_QWORD *)(a1 - 40) )\n    sub_6118();\n  v6 = _mm_shuffle_epi32(*(__m128i *)(a1 - 136), 27);\n  v7 = _mm_shuffle_epi32(*(__m128i *)(a1 - 120), 177);\n  v8 = _mm_blend_epi16(v6, v7, 240);\n  v9 = _mm_alignr_epi8(v7, v6, 8);\n  v10 = _mm_load_si128((const __m128i *)&xmmword_50820);\n  *a2 = _mm_shuffle_epi8(v8, v10);\n  a2[1] = _mm_shuffle_epi8(v9, v10);\n  return result;\n}\n", 
            "funcStartAddr": "0x3e6d0L", 
            "funcEndAddr": "0x3e792L", 
            "funcName": "sub_3E6D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3E7A0(int *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  char *v3; // rdi\n  char *v4; // r11\n  unsigned int v5; // eax\n  unsigned int v6; // ecx\n  signed int v7; // er13\n  signed int v8; // er12\n  signed int v9; // ebp\n  int v10; // esi\n  int v11; // ecx\n  int v12; // eax\n  int v13; // edi\n  int v14; // er8\n  int v15; // er9\n  int v16; // er10\n  __int128 *v17; // r14\n  int v18; // ebx\n  int v19; // er13\n  int v20; // eax\n  int v21; // er10\n  int v22; // er12\n  int v23; // ebx\n  int v24; // edx\n  int v25; // ebp\n  int v26; // ecx\n  int v27; // er8\n  int v28; // ebp\n  int v29; // er9\n  int v30; // esi\n  int v31; // edi\n  int v32; // eax\n  int v33; // ebp\n  int v34; // edx\n  int v35; // ecx\n  int v36; // ebp\n  int v37; // esi\n  int v38; // edx\n  signed int v40; // [rsp+Ch] [rbp-18Ch]\n  signed int v41; // [rsp+10h] [rbp-188h]\n  signed int v42; // [rsp+14h] [rbp-184h]\n  signed int v43; // [rsp+18h] [rbp-180h]\n  signed int v44; // [rsp+1Ch] [rbp-17Ch]\n  int *v45; // [rsp+20h] [rbp-178h]\n  int v46; // [rsp+30h] [rbp-168h]\n  int v47; // [rsp+34h] [rbp-164h]\n  int v48; // [rsp+38h] [rbp-160h]\n  int v49; // [rsp+3Ch] [rbp-15Ch]\n  int v50; // [rsp+44h] [rbp-154h]\n  int v51; // [rsp+48h] [rbp-150h]\n  int v52; // [rsp+4Ch] [rbp-14Ch]\n  char v53[264]; // [rsp+50h] [rbp-148h]\n  char _110[264]; // [rsp+110h] [rbp-88h]\n  unsigned __int64 v55; // [rsp+158h] [rbp-40h]\n\n  v45 = a1;\n  v55 = __readfsqword(0x28u);\n  v2 = 0LL;\n  do\n  {\n    *(_DWORD *)&v53[4 * v2] = _byteswap_ulong(*(_DWORD *)(a2 + 4 * v2));\n    ++v2;\n  }\n  while ( v2 != 16 );\n  v3 = v53;\n  v4 = v53;\n  do\n  {\n    v5 = *((_DWORD *)v3 + 14);\n    v6 = *((_DWORD *)v3 + 1);\n    v3 += 4;\n    *((_DWORD *)v3 + 15) = *((_DWORD *)v3 + 8)\n                         + *((_DWORD *)v3 - 1)\n                         + ((v5 >> 10) ^ __ROL4__(v5, 13) ^ __ROL4__(v5, 15))\n                         + ((v6 >> 3) ^ __ROL4__(v6, 14) ^ __ROR4__(v6, 7));\n  }\n  while ( _110 != v3 );\n  v7 = 1116352408;\n  v8 = 1899447441;\n  v9 = -1245643825;\n  v44 = -373957723;\n  v43 = 961987163;\n  v42 = 1508970993;\n  v41 = -1841331548;\n  v10 = *v45;\n  v11 = v45[1];\n  v12 = v45[3];\n  v13 = v45[4];\n  v14 = v45[5];\n  v15 = v45[6];\n  v46 = *v45;\n  v47 = v45[1];\n  v48 = v45[2];\n  v49 = v45[3];\n  v16 = v45[7];\n  v52 = v45[7];\n  v50 = v45[5];\n  v17 = (__int128 *)&unk_506E0;\n  v51 = v45[6];\n  v40 = -1424204075;\n  v18 = v45[2];\n  while ( 1 )\n  {\n    v19 = *(_DWORD *)v4\n        + (v15 ^ v13 & (v14 ^ v15))\n        + (__ROL4__(v13, 7) ^ __ROR4__(v13, 6) ^ __ROR4__(v13, 11))\n        + v16\n        + v7;\n    v20 = v19 + v12;\n    v21 = v19 + (__ROL4__(v10, 10) ^ __ROR4__(v10, 2) ^ __ROR4__(v10, 13)) + (v11 & v10 | v18 & (v11 | v10));\n    v22 = (v14 ^ v20 & (v14 ^ v13))\n        + *((_DWORD *)v4 + 1)\n        + v15\n        + (__ROL4__(v20, 7) ^ __ROR4__(v20, 6) ^ __ROR4__(v20, 11))\n        + v8;\n    v23 = v22 + v18;\n    v24 = v22 + (__ROL4__(v21, 10) ^ __ROR4__(v21, 2) ^ __ROR4__(v21, 13)) + (v21 & v10 | v11 & (v21 | v10));\n    v25 = (__ROL4__(v23, 7) ^ __ROR4__(v23, 6) ^ __ROR4__(v23, 11))\n        + (v13 ^ v23 & (v20 ^ v13))\n        + *((_DWORD *)v4 + 2)\n        + v14\n        + v9;\n    v26 = v25 + v11;\n    v27 = v25 + (__ROL4__(v24, 10) ^ __ROR4__(v24, 2) ^ __ROR4__(v24, 13)) + (v21 & v24 | v10 & (v21 | v24));\n    v28 = __ROR4__(\n            v25 + (__ROL4__(v24, 10) ^ __ROR4__(v24, 2) ^ __ROR4__(v24, 13)) + (v21 & v24 | v10 & (v21 | v24)),\n            13);\n    v29 = *((_DWORD *)v4 + 3)\n        + v13\n        + (v20 ^ v26 & (v20 ^ v23))\n        + (__ROL4__(v26, 7) ^ __ROR4__(v26, 6) ^ __ROR4__(v26, 11))\n        + v44;\n    v30 = v29 + v10;\n    v31 = v29 + (__ROL4__(v27, 10) ^ __ROR4__(v27, 2) ^ v28) + (v24 & v27 | v21 & (v24 | v27));\n    v32 = *((_DWORD *)v4 + 4)\n        + v20\n        + (v23 ^ v30 & (v23 ^ v26))\n        + (__ROL4__(v30, 7) ^ __ROR4__(v30, 6) ^ __ROR4__(v30, 11));\n    v16 = v32 + v43 + v21;\n    v12 = v32 + v43 + (__ROL4__(v31, 10) ^ __ROR4__(v31, 13) ^ __ROR4__(v31, 2)) + (v27 & v31 | v24 & (v27 | v31));\n    v33 = (__ROL4__(v16, 7) ^ __ROR4__(v16, 11) ^ __ROR4__(v16, 6))\n        + (v26 ^ v16 & (v26 ^ v30))\n        + *((_DWORD *)v4 + 5)\n        + v23\n        + v42;\n    v15 = v33 + v24;\n    v18 = v33 + (__ROL4__(v12, 10) ^ __ROR4__(v12, 13) ^ __ROR4__(v12, 2)) + (v31 & v12 | v27 & (v31 | v12));\n    v34 = v41\n        + (v30 ^ v15 & (v30 ^ v16))\n        + *((_DWORD *)v4 + 6)\n        + v26\n        + (__ROL4__(v15, 7) ^ __ROR4__(v15, 11) ^ __ROR4__(v15, 6));\n    v35 = __ROR4__(\n            v33 + (__ROL4__(v12, 10) ^ __ROR4__(v12, 13) ^ __ROR4__(v12, 2)) + (v31 & v12 | v27 & (v31 | v12)),\n            13) ^ __ROR4__(v18, 2);\n    v36 = __ROL4__(\n            v33 + (__ROL4__(v12, 10) ^ __ROR4__(v12, 13) ^ __ROR4__(v12, 2)) + (v31 & v12 | v27 & (v31 | v12)),\n            10);\n    v14 = v34 + v27;\n    v37 = *((_DWORD *)v4 + 7) + v30;\n    v4 += 32;\n    v11 = v34 + (v35 ^ v36) + (v12 & v18 | v31 & (v12 | v18));\n    v38 = v40 + (v16 ^ v14 & (v16 ^ v15)) + v37 + (__ROL4__(v14, 7) ^ __ROR4__(v14, 11) ^ __ROR4__(v14, 6));\n    v13 = v38 + v31;\n    v10 = v38 + (__ROR4__(v11, 13) ^ __ROR4__(v11, 2) ^ __ROL4__(v11, 10)) + (v18 & v11 | v12 & (v18 | v11));\n    v17 += 2;\n    if ( &xmmword_507E0 == v17 )\n      break;\n    v9 = *((_DWORD *)v17 + 2);\n    v8 = *((_DWORD *)v17 + 1);\n    v7 = *(_DWORD *)v17;\n    v40 = *((_DWORD *)v17 + 7);\n    v41 = *((_DWORD *)v17 + 6);\n    v42 = *((_DWORD *)v17 + 5);\n    v43 = *((_DWORD *)v17 + 4);\n    v44 = *((_DWORD *)v17 + 3);\n  }\n  v45[4] += v13;\n  *v45 = v46 + v10;\n  v45[3] = v49 + v12;\n  v45[1] = v47 + v11;\n  v45[2] = v48 + v18;\n  v45[5] = v50 + v14;\n  v45[6] = v51 + v15;\n  v45[7] = v52 + v16;\n  sub_47E30(v53, 256LL);\n  return __readfsqword(0x28u) ^ v55;\n}\n", 
            "funcStartAddr": "0x3e7a0L", 
            "funcEndAddr": "0x3ec8eL", 
            "funcName": "sub_3E7A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3EC90(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r15\n  signed __int64 result; // rax\n  __int64 v5; // r14\n  char *v6; // rbp\n  size_t v7; // rdi\n  __int64 v8; // r12\n  const void *v9; // rsi\n  size_t v10; // rbx\n  __int64 v11; // rdi\n  int *i; // [rsp+50h] [rbp+8h]\n\n  v3 = a3;\n  result = a1 - 112;\n  v5 = a1;\n  v6 = a2;\n  for ( i = (int *)(a1 - 112); v3; result = sub_3E7A0(i, v8) )\n  {\n    v7 = *(_QWORD *)(v5 - 16);\n    v8 = (__int64)(i + 8);\n    while ( 1 )\n    {\n      v9 = v6;\n      v10 = 64 - v7;\n      if ( 64 - v7 > v3 )\n        v10 = v3;\n      v6 += v10;\n      v3 -= v10;\n      result = (signed __int64)memcpy((void *)(v8 + v7), v9, v10);\n      v11 = *(_QWORD *)(v5 - 16);\n      *(_QWORD *)(v5 - 8) += v10;\n      v7 = v10 + v11;\n      *(_QWORD *)(v5 - 16) = v7;\n      if ( v7 == 64 )\n        break;\n      if ( !v3 )\n        return result;\n    }\n    *(_QWORD *)(v5 - 16) = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3ec90L", 
            "funcEndAddr": "0x3ed34L", 
            "funcName": "sub_3EC90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3ED40(__int64 a1)\n{\n  __int64 v1; // rdx\n  __int64 (__fastcall **v2)(_QWORD); // rax\n  __int64 v3; // rax\n  __int64 v4; // rbx\n\n  v1 = *(_QWORD *)(a1 + 80);\n  v2 = *(__int64 (__fastcall ***)(_QWORD))(v1 + 8);\n  if ( byte_26566F )\n  {\n    if ( byte_26566E )\n      v2 = *(__int64 (__fastcall ***)(_QWORD))v1;\n  }\n  else\n  {\n    byte_26566E = 0;\n    byte_26566F = 1;\n  }\n  v3 = (*v2)(v2);\n  v4 = v3;\n  if ( v3 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 8LL))(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x3ed40L", 
            "funcEndAddr": "0x3ed8dL", 
            "funcName": "sub_3ED40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3ED90()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x3ed90L", 
            "funcEndAddr": "0x3ed93L", 
            "funcName": "sub_3ED90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3EDA0(__int64 a1)\n{\n  sub_47E30(a1 - 232, 248LL);\n  sub_114C0((void *)(a1 - 232));\n}\n", 
            "funcStartAddr": "0x3eda0L", 
            "funcEndAddr": "0x3edbeL", 
            "funcName": "sub_3EDA0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_3EDC0()\n{\n  __assert_fail(\"false && \\\"Should never be called\\\"\", \"sshsh512.c\", 0x32Bu, \"sha512_stub_free\");\n}\n", 
            "funcStartAddr": "0x3edc0L", 
            "funcEndAddr": "0x3ede3L", 
            "funcName": "sub_3EDC0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_3EDF0()\n{\n  __assert_fail(\"false && \\\"Should never be called\\\"\", \"sshsh512.c\", 0x32Cu, \"sha512_stub_digest\");\n}\n", 
            "funcStartAddr": "0x3edf0L", 
            "funcEndAddr": "0x3ee13L", 
            "funcName": "sub_3EDF0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_3EE20()\n{\n  __assert_fail(\"false && \\\"Should never be called\\\"\", \"sshsh512.c\", 0x32Au, \"sha512_stub_copyfrom\");\n}\n", 
            "funcStartAddr": "0x3ee20L", 
            "funcEndAddr": "0x3ee43L", 
            "funcName": "sub_3EE20"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_3EE50()\n{\n  __assert_fail(\"false && \\\"Should never be called\\\"\", \"sshsh512.c\", 0x329u, \"sha512_stub_reset\");\n}\n", 
            "funcStartAddr": "0x3ee50L", 
            "funcEndAddr": "0x3ee73L", 
            "funcName": "sub_3EE50"
        }, 
        {
            "decompiledFuncCode": "const __m128i *__fastcall sub_3EE80(__int64 a1)\n{\n  const __m128i *result; // rax\n  __m128i v2; // xmm0\n\n  result = *(const __m128i **)(*(_QWORD *)a1 + 80LL);\n  *(__m128i *)(a1 - 232) = _mm_loadu_si128(result);\n  *(__m128i *)(a1 - 216) = _mm_loadu_si128(result + 1);\n  *(__m128i *)(a1 - 200) = _mm_loadu_si128(result + 2);\n  v2 = _mm_loadu_si128(result + 3);\n  *(_QWORD *)(a1 - 40) = 0LL;\n  *(_QWORD *)(a1 - 24) = 0LL;\n  *(__m128i *)(a1 - 184) = v2;\n  *(_QWORD *)(a1 - 32) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x3ee80L", 
            "funcEndAddr": "0x3eecfL", 
            "funcName": "sub_3EE80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3EED0(__int64 a1, __int64 a2)\n{\n  signed __int64 result; // rax\n  __m128i v3; // xmm0\n\n  result = a1 - 16;\n  *(__m128i *)(a1 - 232) = _mm_loadu_si128((const __m128i *)(a2 - 232));\n  *(__m128i *)(a1 - 216) = _mm_loadu_si128((const __m128i *)(a2 - 216));\n  *(__m128i *)(a1 - 200) = _mm_loadu_si128((const __m128i *)(a2 - 200));\n  *(__m128i *)(a1 - 184) = _mm_loadu_si128((const __m128i *)(a2 - 184));\n  *(__m128i *)(a1 - 168) = _mm_loadu_si128((const __m128i *)(a2 - 168));\n  *(__m128i *)(a1 - 152) = _mm_loadu_si128((const __m128i *)(a2 - 152));\n  *(__m128i *)(a1 - 136) = _mm_loadu_si128((const __m128i *)(a2 - 136));\n  *(__m128i *)(a1 - 120) = _mm_loadu_si128((const __m128i *)(a2 - 120));\n  *(__m128i *)(a1 - 104) = _mm_loadu_si128((const __m128i *)(a2 - 104));\n  *(__m128i *)(a1 - 88) = _mm_loadu_si128((const __m128i *)(a2 - 88));\n  *(__m128i *)(a1 - 72) = _mm_loadu_si128((const __m128i *)(a2 - 72));\n  *(__m128i *)(a1 - 56) = _mm_loadu_si128((const __m128i *)(a2 - 56));\n  *(__m128i *)(a1 - 40) = _mm_loadu_si128((const __m128i *)(a2 - 40));\n  *(__m128i *)(a1 - 24) = _mm_loadu_si128((const __m128i *)(a2 - 24));\n  v3 = _mm_loadu_si128((const __m128i *)(a2 - 8));\n  *(_QWORD *)(a1 + 8) = a1 - 16;\n  *(__m128i *)(a1 - 8) = v3;\n  *(_QWORD *)(a1 - 8) = a1 - 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x3eed0L", 
            "funcEndAddr": "0x3ef8eL", 
            "funcName": "sub_3EED0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3EF90(__int64 a1)\n{\n  __int64 v1; // rax\n  signed __int64 v2; // rdx\n  signed __int64 result; // rax\n\n  v1 = sub_11440(1uLL, 0xF8uLL, 0LL);\n  v2 = v1 + 216;\n  *(_QWORD *)(v1 + 232) = a1;\n  result = v1 + 232;\n  *(_QWORD *)(result - 16) = sub_3F6C0;\n  *(_QWORD *)(result - 8) = v2;\n  *(_QWORD *)(result + 8) = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x3ef90L", 
            "funcEndAddr": "0x3efceL", 
            "funcName": "sub_3EF90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3EFD0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  __int64 v3; // r13\n  unsigned int v4; // er12\n  unsigned __int64 v5; // rdx\n  unsigned __int64 result; // rax\n  __int64 v7; // rax\n\n  v2 = *(_QWORD *)(a1 - 32);\n  v3 = *(_QWORD *)(a1 - 24);\n  v4 = (111 - *(_DWORD *)(a1 - 40)) & 0x7F;\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  sub_10C30(*(void (__fastcall ***)(_QWORD, __int64 *, signed __int64))(a1 - 8), v4, 0);\n  sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v2);\n  sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v3);\n  v5 = *(_QWORD *)(a1 - 40);\n  if ( v5 )\n    __assert_fail(\n      \"blk->used == 0 && \\\"Should have exactly hit a block boundary\\\"\",\n      \"sshsh512.c\",\n      0xDEu,\n      \"sha512_block_pad\");\n  result = *(_QWORD *)(*(_QWORD *)a1 + 40LL) >> 3;\n  if ( result )\n  {\n    do\n    {\n      v7 = *(_QWORD *)(a1 + 8 * v5++ - 232);\n      a2 += 8LL;\n      *(_BYTE *)(a2 - 1) = v7;\n      *(_BYTE *)(a2 - 2) = BYTE1(v7);\n      *(_BYTE *)(a2 - 3) = BYTE2(v7);\n      *(_BYTE *)(a2 - 4) = BYTE3(v7);\n      *(_BYTE *)(a2 - 5) = BYTE4(v7);\n      *(_BYTE *)(a2 - 6) = BYTE5(v7);\n      *(_BYTE *)(a2 - 8) = HIBYTE(v7);\n      *(_BYTE *)(a2 - 7) = BYTE6(v7);\n      result = *(_QWORD *)(*(_QWORD *)a1 + 40LL) >> 3;\n    }\n    while ( result > v5 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3efd0L", 
            "funcEndAddr": "0x3f0dfL", 
            "funcName": "sub_3EFD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3F0E0(signed __int64 *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  char *v3; // rdi\n  char *v4; // r11\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // rcx\n  signed __int64 v7; // r13\n  signed __int64 v8; // r12\n  signed __int64 v9; // rbp\n  signed __int64 v10; // rsi\n  signed __int64 v11; // rax\n  signed __int64 v12; // rdi\n  signed __int64 v13; // r8\n  signed __int64 v14; // r9\n  signed __int64 v15; // r14\n  signed __int64 v16; // r10\n  _QWORD *v17; // r15\n  signed __int64 v18; // rbx\n  signed __int64 v19; // rcx\n  signed __int64 v20; // rcx\n  signed __int64 v21; // rax\n  signed __int64 v22; // r10\n  __int64 v23; // rcx\n  signed __int64 v24; // r12\n  signed __int64 v25; // r14\n  signed __int64 v26; // rdx\n  signed __int64 v27; // rbp\n  signed __int64 v28; // rbx\n  signed __int64 v29; // rcx\n  __int64 v30; // rbp\n  signed __int64 v31; // r8\n  signed __int64 v32; // rsi\n  signed __int64 v33; // rdi\n  __int64 v34; // rax\n  signed __int64 v35; // r8\n  signed __int64 v36; // rdx\n  __int64 v37; // rbx\n  __int64 v38; // rsi\n  signed __int64 v39; // rdx\n  signed __int64 v41; // [rsp+8h] [rbp-340h]\n  signed __int64 v42; // [rsp+10h] [rbp-338h]\n  signed __int64 v43; // [rsp+18h] [rbp-330h]\n  signed __int64 v44; // [rsp+20h] [rbp-328h]\n  signed __int64 v45; // [rsp+28h] [rbp-320h]\n  signed __int64 *v46; // [rsp+30h] [rbp-318h]\n  __int64 v47; // [rsp+40h] [rbp-308h]\n  __int64 v48; // [rsp+48h] [rbp-300h]\n  __int64 v49; // [rsp+50h] [rbp-2F8h]\n  __int64 v50; // [rsp+58h] [rbp-2F0h]\n  __int64 v51; // [rsp+68h] [rbp-2E0h]\n  __int64 v52; // [rsp+70h] [rbp-2D8h]\n  __int64 v53; // [rsp+78h] [rbp-2D0h]\n  char v54[648]; // [rsp+80h] [rbp-2C8h]\n  char _280[648]; // [rsp+280h] [rbp-C8h]\n  unsigned __int64 v56; // [rsp+308h] [rbp-40h]\n\n  v46 = a1;\n  v56 = __readfsqword(0x28u);\n  v2 = 0LL;\n  do\n  {\n    *(_QWORD *)&v54[v2] = _byteswap_uint64(*(_QWORD *)(a2 + v2));\n    v2 += 8LL;\n  }\n  while ( v2 != 128 );\n  v3 = v54;\n  v4 = v54;\n  do\n  {\n    v5 = *((_QWORD *)v3 + 1);\n    v6 = *((_QWORD *)v3 + 14);\n    v3 += 8;\n    *((_QWORD *)v3 + 15) = *((_QWORD *)v3 - 1)\n                         + *((_QWORD *)v3 + 8)\n                         + ((v5 >> 7) ^ __ROR8__(v5, 8) ^ __ROR8__(v5, 1))\n                         + ((v6 >> 6) ^ __ROR8__(v6, 19) ^ __ROL8__(v6, 3));\n  }\n  while ( _280 != v3 );\n  v7 = 4794697086780616226LL;\n  v45 = -1606136188198331460LL;\n  v8 = 8158064640168781261LL;\n  v44 = 4131703408338449720LL;\n  v9 = -5349999486874862801LL;\n  v10 = *v46;\n  v11 = v46[3];\n  v12 = v46[4];\n  v13 = v46[5];\n  v14 = v46[6];\n  v15 = v46[2];\n  v43 = 6480981068601479193LL;\n  v47 = *v46;\n  v42 = -7908458776815382629LL;\n  v48 = v46[1];\n  v16 = v46[7];\n  v53 = v46[7];\n  v41 = -6116909921290321640LL;\n  v49 = v46[2];\n  v17 = &unk_50B60;\n  v50 = v46[3];\n  v51 = v46[5];\n  v52 = v46[6];\n  v18 = v46[1];\n  while ( 1 )\n  {\n    v20 = *(_QWORD *)v4\n        + (__ROL8__(v12, 23) ^ __ROR8__(v12, 14) ^ __ROR8__(v12, 18))\n        + (v14 ^ v12 & (v14 ^ v13))\n        + v16\n        + v7;\n    v21 = v20 + v11;\n    v22 = v20 + (__ROL8__(v10, 25) ^ __ROR8__(v10, 28) ^ __ROL8__(v10, 30)) + (v18 & v10 | v15 & (v18 | v10));\n    v23 = __ROL8__(\n            v20 + (__ROL8__(v10, 25) ^ __ROR8__(v10, 28) ^ __ROL8__(v10, 30)) + (v18 & v10 | v15 & (v18 | v10)),\n            30);\n    v24 = (v13 ^ v21 & (v12 ^ v13))\n        + *((_QWORD *)v4 + 1)\n        + v14\n        + (__ROL8__(v21, 23) ^ __ROR8__(v21, 14) ^ __ROR8__(v21, 18))\n        + v8;\n    v25 = v24 + v15;\n    v26 = v24 + (__ROL8__(v22, 25) ^ __ROR8__(v22, 28) ^ v23) + (v22 & v10 | v18 & (v22 | v10));\n    v27 = (v12 ^ v25 & (v21 ^ v12))\n        + *((_QWORD *)v4 + 2)\n        + v13\n        + (__ROL8__(v25, 23) ^ __ROR8__(v25, 14) ^ __ROR8__(v25, 18))\n        + v9;\n    v28 = v27 + v18;\n    v29 = v27 + (__ROL8__(v26, 25) ^ __ROR8__(v26, 28) ^ __ROL8__(v26, 30)) + (v22 & v26 | v10 & (v22 | v26));\n    v30 = v26 & (v27 + (__ROL8__(v26, 25) ^ __ROR8__(v26, 28) ^ __ROL8__(v26, 30)) + (v22 & v26 | v10 & (v22 | v26)));\n    v31 = *((_QWORD *)v4 + 3)\n        + v12\n        + (v21 ^ v28 & (v21 ^ v25))\n        + (__ROL8__(v28, 23) ^ __ROR8__(v28, 14) ^ __ROR8__(v28, 18))\n        + v45;\n    v32 = v31 + v10;\n    v33 = v31 + (__ROL8__(v29, 25) ^ __ROR8__(v29, 28) ^ __ROL8__(v29, 30)) + (v30 | v22 & (v26 | v29));\n    v34 = *((_QWORD *)v4 + 4)\n        + v21\n        + (v25 ^ v32 & (v25 ^ v28))\n        + (__ROL8__(v32, 23) ^ __ROR8__(v32, 14) ^ __ROR8__(v32, 18));\n    v16 = v34 + v44 + v22;\n    v11 = v34 + v44 + (__ROL8__(v33, 25) ^ __ROL8__(v33, 30) ^ __ROR8__(v33, 28)) + (v29 & v33 | v26 & (v29 | v33));\n    v35 = (__ROL8__(v16, 23) ^ __ROR8__(v16, 18) ^ __ROR8__(v16, 14))\n        + (v28 ^ v16 & (v28 ^ v32))\n        + *((_QWORD *)v4 + 5)\n        + v25\n        + v43;\n    v14 = v35 + v26;\n    v15 = v35 + (__ROL8__(v11, 25) ^ __ROL8__(v11, 30) ^ __ROR8__(v11, 28)) + (v33 & v11 | v29 & (v33 | v11));\n    v36 = v42\n        + (v32 ^ v14 & (v32 ^ v16))\n        + *((_QWORD *)v4 + 6)\n        + v28\n        + (__ROL8__(v14, 23) ^ __ROR8__(v14, 18) ^ __ROR8__(v14, 14));\n    v37 = __ROR8__(\n            v35 + (__ROL8__(v11, 25) ^ __ROL8__(v11, 30) ^ __ROR8__(v11, 28)) + (v33 & v11 | v29 & (v33 | v11)),\n            28);\n    v38 = *((_QWORD *)v4 + 7) + v32;\n    v4 += 64;\n    v13 = v36 + v29;\n    v18 = v36 + (v11 & v15 | v33 & (v11 | v15)) + (__ROL8__(v15, 25) ^ __ROL8__(v15, 30) ^ v37);\n    v39 = v41 + (v16 ^ v13 & (v16 ^ v14)) + v38 + (__ROL8__(v13, 23) ^ __ROR8__(v13, 18) ^ __ROR8__(v13, 14));\n    v12 = v39 + v33;\n    v10 = v39 + (__ROL8__(v18, 30) ^ __ROR8__(v18, 28) ^ __ROL8__(v18, 25)) + (v15 & v18 | v11 & (v15 | v18));\n    if ( v17 == (_QWORD *)&unk_50DA0 )\n      break;\n    v19 = v17[7];\n    v9 = v17[2];\n    v17 += 8;\n    v8 = *(v17 - 7);\n    v7 = *(v17 - 8);\n    v41 = v19;\n    v42 = *(v17 - 2);\n    v43 = *(v17 - 3);\n    v44 = *(v17 - 4);\n    v45 = *(v17 - 5);\n  }\n  v46[4] += v12;\n  *v46 = v47 + v10;\n  v46[3] = v50 + v11;\n  v46[1] = v48 + v18;\n  v46[2] = v49 + v15;\n  v46[5] = v51 + v13;\n  v46[6] = v52 + v14;\n  v46[7] = v53 + v16;\n  sub_47E30(v54, 640LL);\n  return __readfsqword(0x28u) ^ v56;\n}\n", 
            "funcStartAddr": "0x3f0e0L", 
            "funcEndAddr": "0x3f6b1L", 
            "funcName": "sub_3F0E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3F6C0(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // r14\n  __int64 v5; // r15\n  char *v6; // rbp\n  size_t v7; // rdi\n  __int64 v8; // r12\n  const void *v9; // rsi\n  size_t v10; // rbx\n  signed __int64 v11; // rbx\n  unsigned __int8 v12; // cf\n  signed __int64 v13; // rbx\n  signed __int64 *i; // [rsp+50h] [rbp+8h]\n\n  result = a1 - 216;\n  v4 = a3;\n  v5 = a1;\n  v6 = a2;\n  for ( i = (signed __int64 *)(a1 - 216); v4; result = sub_3F0E0(i, v8) )\n  {\n    v7 = *(_QWORD *)(v5 - 24);\n    v8 = (__int64)(i + 8);\n    while ( 1 )\n    {\n      v9 = v6;\n      v10 = 128 - v7;\n      if ( 128 - v7 > v4 )\n        v10 = v4;\n      v6 += v10;\n      v4 -= v10;\n      memcpy((void *)(v8 + v7), v9, v10);\n      v7 = v10 + *(_QWORD *)(v5 - 24);\n      v11 = 8 * v10;\n      v12 = __CFADD__(*(_QWORD *)(v5 - 8), v11);\n      v13 = *(_QWORD *)(v5 - 8) + v11;\n      *(_QWORD *)(v5 - 24) = v7;\n      result = v12;\n      *(_QWORD *)(v5 - 16) += v12;\n      *(_QWORD *)(v5 - 8) = v13;\n      if ( v7 == 128 )\n        break;\n      if ( !v4 )\n        return result;\n    }\n    *(_QWORD *)(v5 - 24) = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3f6c0L", 
            "funcEndAddr": "0x3f784L", 
            "funcName": "sub_3F6C0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3F790()\n{\n  unsigned int v5; // esi\n  __int64 result; // rax\n\n  _RAX = 0LL;\n  __asm { cpuid }\n  v5 = _RAX;\n  result = 0LL;\n  if ( v5 > 6 )\n  {\n    _RAX = 7LL;\n    __asm { cpuid }\n    result = ((unsigned int)_RBX >> 29) & 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x3f790L", 
            "funcEndAddr": "0x3f7e0L", 
            "funcName": "sub_3F790"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_3F7E0()\n{\n  char v0; // al\n  __int64 (__fastcall *v1)(); // rdx\n  __int64 (__fastcall **v2)(); // rdi\n  __int64 v3; // rax\n  __int64 v4; // rbx\n\n  v0 = byte_265670;\n  if ( !byte_265671 )\n  {\n    v0 = sub_3F790();\n    byte_265671 = 1;\n    byte_265670 = v0;\n  }\n  v1 = sub_3FED0;\n  v2 = off_2613C0;\n  if ( v0 )\n  {\n    v1 = sub_3FF10;\n    if ( v0 )\n      v2 = off_261360;\n  }\n  v3 = ((__int64 (__fastcall *)(__int64 (__fastcall **)()))v1)(v2);\n  v4 = v3;\n  if ( v3 )\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 8LL))(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x3f7e0L", 
            "funcEndAddr": "0x3f841L", 
            "funcName": "sub_3F7E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3F850(__int64 a1)\n{\n  __m128i v1; // xmm0\n\n  v1 = _mm_load_si128((const __m128i *)&xmmword_50EB0);\n  *(_QWORD *)(a1 - 40) = 0LL;\n  *(_QWORD *)(a1 - 32) = 0LL;\n  *(__m128i *)(a1 - 136) = v1;\n  *(__m128i *)(a1 - 120) = _mm_load_si128((const __m128i *)&xmmword_50EC0);\n}\n", 
            "funcStartAddr": "0x3f850L", 
            "funcEndAddr": "0x3f87cL", 
            "funcName": "sub_3F850"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3F880(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __m128i v3; // xmm0\n  signed __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 - 24);\n  *(__m128i *)(a1 - 136) = _mm_load_si128((const __m128i *)(a2 - 136));\n  *(__m128i *)(a1 - 120) = _mm_load_si128((const __m128i *)(a2 - 120));\n  *(__m128i *)(a1 - 104) = _mm_load_si128((const __m128i *)(a2 - 104));\n  *(__m128i *)(a1 - 88) = _mm_load_si128((const __m128i *)(a2 - 88));\n  *(__m128i *)(a1 - 72) = _mm_load_si128((const __m128i *)(a2 - 72));\n  *(__m128i *)(a1 - 56) = _mm_load_si128((const __m128i *)(a2 - 56));\n  *(__m128i *)(a1 - 40) = _mm_load_si128((const __m128i *)(a2 - 40));\n  *(__m128i *)(a1 - 24) = _mm_load_si128((const __m128i *)(a2 - 24));\n  *(__m128i *)(a1 - 8) = _mm_load_si128((const __m128i *)(a2 - 8));\n  v3 = _mm_load_si128((const __m128i *)(a2 + 8));\n  *(_QWORD *)(a1 - 24) = v2;\n  result = a1 - 16;\n  *(__m128i *)(a1 + 8) = v3;\n  *(_QWORD *)(a1 - 8) = a1 - 16;\n  *(_QWORD *)(a1 + 8) = a1 - 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x3f880L", 
            "funcEndAddr": "0x3f8f5L", 
            "funcName": "sub_3F880"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_3F900(int *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  char *v3; // r9\n  char *v4; // rdx\n  int v5; // eax\n  int v6; // er12\n  int v7; // er15\n  char *v8; // rbp\n  int v9; // edx\n  int v10; // ecx\n  int v11; // er8\n  int v12; // eax\n  int v13; // esi\n  int v14; // er13\n  int v15; // esi\n  int v16; // ecx\n  int v17; // er13\n  int v18; // er8\n  int v19; // edx\n  int v20; // er13\n  int v21; // eax\n  int v22; // er13\n  int v23; // er8\n  char *v24; // rbx\n  int v25; // er13\n  int v26; // esi\n  int v27; // ecx\n  int v28; // er13\n  int v29; // er8\n  int v30; // edx\n  int v31; // er13\n  int v32; // eax\n  int v33; // eax\n  int v34; // er13\n  int v35; // esi\n  int v36; // er13\n  int v37; // er8\n  char *v38; // rbp\n  int v39; // er13\n  int v40; // er11\n  int v41; // esi\n  int v42; // ecx\n  int v43; // er13\n  int v44; // er11\n  int v45; // er8\n  int v46; // er11\n  int v47; // er13\n  int v48; // edx\n  int v49; // er11\n  int v50; // er11\n  int v51; // er13\n  int v52; // eax\n  int v53; // er11\n  int v54; // er13\n  int v55; // er11\n  int v56; // ebp\n  int v57; // esi\n  int v58; // ecx\n  int v59; // ebp\n  int v60; // er8\n  int v61; // edx\n  int v62; // ebp\n  int v63; // eax\n  int v64; // eax\n  int v65; // ebp\n  int v66; // esi\n  int v67; // ebp\n  int v68; // er8\n  int v70; // [rsp+4h] [rbp-194h]\n  int v71; // [rsp+8h] [rbp-190h]\n  char v72[328]; // [rsp+10h] [rbp-188h]\n  char _60[328]; // [rsp+60h] [rbp-138h]\n  char _110[328]; // [rsp+110h] [rbp-88h]\n  unsigned __int64 v75; // [rsp+158h] [rbp-40h]\n\n  v75 = __readfsqword(0x28u);\n  v2 = 0LL;\n  do\n  {\n    *(_DWORD *)&v72[4 * v2] = _byteswap_ulong(*(_DWORD *)(a2 + 4 * v2));\n    ++v2;\n  }\n  while ( v2 != 16 );\n  v3 = v72;\n  v4 = v72;\n  do\n  {\n    v5 = *((_DWORD *)v4 + 8) ^ *((_DWORD *)v4 + 13);\n    v4 += 4;\n    *((_DWORD *)v4 + 15) = __ROL4__(*((_DWORD *)v4 - 1) ^ *((_DWORD *)v4 + 1) ^ v5, 1);\n  }\n  while ( _110 != v4 );\n  v6 = a1[1];\n  v7 = a1[2];\n  v8 = v72;\n  v9 = a1[3];\n  v71 = a1[4];\n  v10 = a1[4];\n  v11 = *a1;\n  v12 = a1[2];\n  v13 = a1[1];\n  v70 = a1[3];\n  do\n  {\n    v14 = v13 & (v9 ^ v12);\n    v15 = __ROR4__(v13, 2);\n    v16 = __ROL4__(v11, 5) + *(_DWORD *)v8 + 1518500249 + (v9 ^ v14) + v10;\n    v17 = v11 & (v12 ^ v15);\n    v18 = __ROR4__(v11, 2);\n    v19 = __ROL4__(v16, 5) + (v12 ^ v17) + v9 + *((_DWORD *)v8 + 1) + 1518500249;\n    v20 = v16 & (v15 ^ v18);\n    v10 = __ROR4__(v16, 2);\n    v21 = __ROL4__(v19, 5) + (v15 ^ v20) + v12 + *((_DWORD *)v8 + 2) + 1518500249;\n    v22 = v19 & (v18 ^ v10);\n    v9 = __ROR4__(v19, 2);\n    v13 = __ROL4__(v21, 5) + (v18 ^ v22) + v15 + *((_DWORD *)v8 + 3) + 1518500249;\n    v23 = (v10 ^ v21 & (v10 ^ v9)) + v18 + *((_DWORD *)v8 + 4) + 1518500249;\n    v8 += 20;\n    v12 = __ROR4__(v21, 2);\n    v11 = __ROL4__(v13, 5) + v23;\n  }\n  while ( _60 != v8 );\n  v24 = v72;\n  do\n  {\n    v25 = v13;\n    v26 = __ROR4__(v13, 2);\n    v24 += 20;\n    v27 = *((_DWORD *)v24 + 15) + (v9 ^ v12 ^ v25) + __ROL4__(v11, 5) + 1859775393 + v10;\n    v28 = v11;\n    v29 = __ROR4__(v11, 2);\n    v30 = __ROL4__(v27, 5) + *((_DWORD *)v24 + 16) + v9 + (v26 ^ v12 ^ v28) + 1859775393;\n    v31 = v12 + *((_DWORD *)v24 + 17) + 1859775393;\n    v32 = v27 ^ v26 ^ v29;\n    v10 = __ROR4__(v27, 2);\n    v33 = __ROL4__(v30, 5) + v31 + v32;\n    v34 = v26 + *((_DWORD *)v24 + 18) + 1859775393;\n    v35 = v30 ^ v29 ^ v10;\n    v9 = __ROR4__(v30, 2);\n    v13 = __ROL4__(v33, 5) + v34 + v35;\n    v36 = v29 + *((_DWORD *)v24 + 19) + 1859775393;\n    v37 = v33 ^ v10 ^ v9;\n    v12 = __ROR4__(v33, 2);\n    v11 = __ROL4__(v13, 5) + v36 + v37;\n  }\n  while ( v8 != v24 );\n  v38 = v72;\n  do\n  {\n    v39 = v12 & v13;\n    v40 = v9 & (v12 | v13);\n    v41 = __ROR4__(v13, 2);\n    v42 = __ROL4__(v11, 5) + *((_DWORD *)v38 + 40) - 1894007588 + (v39 | v40) + v10;\n    v43 = v11 & v41;\n    v44 = v11 | v41;\n    v45 = __ROR4__(v11, 2);\n    v46 = v43 | v12 & v44;\n    v47 = v42 & v45;\n    v48 = __ROL4__(v42, 5) + v46 + v9 + *((_DWORD *)v38 + 41) - 1894007588;\n    v49 = v42 | v45;\n    v10 = __ROR4__(v42, 2);\n    v50 = v47 | v41 & v49;\n    v51 = v48 & v10;\n    v52 = __ROL4__(v48, 5) + v50 + v12 + *((_DWORD *)v38 + 42) - 1894007588;\n    v53 = v48 | v10;\n    v9 = __ROR4__(v48, 2);\n    v13 = __ROL4__(v52, 5) + (v51 | v45 & v53) + v41 + *((_DWORD *)v38 + 43) - 1894007588;\n    v54 = v52 & v9;\n    v38 += 20;\n    v55 = v10 & (v52 | v9);\n    v12 = __ROR4__(v52, 2);\n    v11 = __ROL4__(v13, 5) + (v54 | v55) + v45 + *((_DWORD *)v38 + 39) - 1894007588;\n  }\n  while ( v24 != v38 );\n  do\n  {\n    v56 = v13;\n    v57 = __ROR4__(v13, 2);\n    v3 += 20;\n    v58 = *((_DWORD *)v3 + 55) + (v9 ^ v12 ^ v56) + __ROL4__(v11, 5) - 899497514 + v10;\n    v59 = v11;\n    v60 = __ROR4__(v11, 2);\n    v61 = __ROL4__(v58, 5) + *((_DWORD *)v3 + 56) + v9 + (v57 ^ v12 ^ v59) - 899497514;\n    v62 = v12 + *((_DWORD *)v3 + 57) - 899497514;\n    v63 = v58 ^ v57 ^ v60;\n    v10 = __ROR4__(v58, 2);\n    v64 = __ROL4__(v61, 5) + v62 + v63;\n    v65 = v57 + *((_DWORD *)v3 + 58) - 899497514;\n    v66 = v61 ^ v60 ^ v10;\n    v9 = __ROR4__(v61, 2);\n    v13 = __ROL4__(v64, 5) + v65 + v66;\n    v67 = v60 + *((_DWORD *)v3 + 59) - 899497514;\n    v68 = v64 ^ v10 ^ v9;\n    v12 = __ROR4__(v64, 2);\n    v11 = __ROL4__(v13, 5) + v67 + v68;\n  }\n  while ( v24 != v3 );\n  *a1 += v11;\n  a1[1] = v6 + v13;\n  a1[2] = v7 + v12;\n  a1[3] = v70 + v9;\n  a1[4] = v71 + v10;\n  sub_47E30(v72, 320LL);\n  return __readfsqword(0x28u) ^ v75;\n}\n", 
            "funcStartAddr": "0x3f900L", 
            "funcEndAddr": "0x3fd47L", 
            "funcName": "sub_3F900"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3FD50(__int64 a1)\n{\n  sub_47E30(a1 - 120, 136LL);\n  sub_114C0((void *)(a1 - 120));\n}\n", 
            "funcStartAddr": "0x3fd50L", 
            "funcEndAddr": "0x3fd6bL", 
            "funcName": "sub_3FD50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_3FD70(__int64 a1)\n{\n  void *v1; // rbx\n\n  v1 = *(void **)(a1 - 24);\n  sub_47E30(a1 - 136, 160LL);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x3fd70L", 
            "funcEndAddr": "0x3fd8fL", 
            "funcName": "sub_3FD70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3FE40(__int64 a1)\n{\n  signed __int64 result; // rax\n  __m128i v2; // xmm0\n\n  result = 3285377520LL;\n  *(_QWORD *)(a1 - 32) = 0LL;\n  v2 = _mm_load_si128((const __m128i *)&xmmword_50E90);\n  *(_QWORD *)(a1 - 24) = 0LL;\n  *(__m128i *)(a1 - 120) = v2;\n  *(_DWORD *)(a1 - 104) = -1009589776;\n  return result;\n}\n", 
            "funcStartAddr": "0x3fe40L", 
            "funcEndAddr": "0x3fe66L", 
            "funcName": "sub_3FE40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3FE70(__int64 a1, __int64 a2)\n{\n  signed __int64 result; // rax\n  __m128i v3; // xmm0\n\n  result = a1 - 16;\n  *(__m128i *)(a1 - 120) = _mm_loadu_si128((const __m128i *)(a2 - 120));\n  *(__m128i *)(a1 - 104) = _mm_loadu_si128((const __m128i *)(a2 - 104));\n  *(__m128i *)(a1 - 88) = _mm_loadu_si128((const __m128i *)(a2 - 88));\n  *(__m128i *)(a1 - 72) = _mm_loadu_si128((const __m128i *)(a2 - 72));\n  *(__m128i *)(a1 - 56) = _mm_loadu_si128((const __m128i *)(a2 - 56));\n  *(__m128i *)(a1 - 40) = _mm_loadu_si128((const __m128i *)(a2 - 40));\n  *(__m128i *)(a1 - 24) = _mm_loadu_si128((const __m128i *)(a2 - 24));\n  v3 = _mm_loadu_si128((const __m128i *)(a2 - 8));\n  *(_QWORD *)(a1 + 8) = a1 - 16;\n  *(__m128i *)(a1 - 8) = v3;\n  *(_QWORD *)(a1 - 8) = a1 - 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x3fe70L", 
            "funcEndAddr": "0x3fec5L", 
            "funcName": "sub_3FE70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3FED0(__int64 a1)\n{\n  __int64 v1; // rax\n  signed __int64 v2; // rdx\n  signed __int64 result; // rax\n\n  v1 = sub_11440(1uLL, 0x88uLL, 0LL);\n  v2 = v1 + 104;\n  *(_QWORD *)(v1 + 120) = a1;\n  result = v1 + 120;\n  *(_QWORD *)(result - 16) = sub_3FD90;\n  *(_QWORD *)(result - 8) = v2;\n  *(_QWORD *)(result + 8) = v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x3fed0L", 
            "funcEndAddr": "0x3ff06L", 
            "funcName": "sub_3FED0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_3FF10(__int64 a1)\n{\n  char v1; // al\n  __int64 v2; // rax\n  _QWORD *v3; // rdx\n\n  v1 = byte_265670;\n  if ( !byte_265671 )\n  {\n    v1 = sub_3F790();\n    byte_265671 = 1;\n    byte_265670 = v1;\n  }\n  if ( !v1 )\n    return 0LL;\n  v2 = sub_11440(0xAFuLL, 1uLL, 0LL);\n  v3 = (_QWORD *)((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);\n  v3[14] = v2;\n  v3[17] = a1;\n  v3[15] = sub_40060;\n  v3[16] = v3 + 15;\n  v3[18] = v3 + 15;\n  return (signed __int64)(v3 + 17);\n}\n", 
            "funcStartAddr": "0x3ff10L", 
            "funcEndAddr": "0x3ff94L", 
            "funcName": "sub_3FF10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_3FFA0(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r13\n  signed __int64 v3; // rbp\n  signed __int64 v4; // rbx\n  unsigned int v5; // eax\n  __int8 v6; // cl\n  unsigned int v7; // edx\n  __int64 result; // rax\n\n  v2 = 8LL * *(_QWORD *)(a1 - 32);\n  v3 = ((55 - *(_DWORD *)(a1 - 40)) & 0x3F) + 1LL;\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  if ( v3 != 1 )\n  {\n    v4 = 1LL;\n    do\n    {\n      ++v4;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 0);\n    }\n    while ( v3 != v4 );\n  }\n  sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v2);\n  if ( *(_QWORD *)(a1 - 40) )\n    sub_613B();\n  *a2 = _mm_shuffle_epi8(_mm_shuffle_epi32(*(__m128i *)(a1 - 136), 27), (__m128i)xmmword_50820);\n  v5 = *(_DWORD *)(a1 - 108);\n  a2[1].m128i_i8[3] = v5;\n  v6 = BYTE1(v5);\n  v7 = v5 >> 16;\n  result = v5 >> 24;\n  a2[1].m128i_i8[2] = v6;\n  a2[1].m128i_i8[1] = v7;\n  a2[1].m128i_i8[0] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x3ffa0L", 
            "funcEndAddr": "0x40060L", 
            "funcName": "sub_3FFA0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40060(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r14\n  char *v4; // r15\n  __int64 v5; // rbp\n  signed __int64 i; // r13\n  size_t v7; // rdi\n  const void *v8; // rsi\n  size_t v9; // rbx\n  void *result; // rax\n  __int64 v11; // rdi\n  __m128i v12; // xmm1\n  __m128i v13; // xmm3\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a1;\n  for ( i = a1 - 88; v3; *(__m128i *)(v5 - 120) = _mm_add_epi32(v13, _XMM0) )\n  {\n    v7 = *(_QWORD *)(v5 - 24);\n    while ( 1 )\n    {\n      v8 = v4;\n      v9 = 64 - v7;\n      if ( 64 - v7 > v3 )\n        v9 = v3;\n      v4 += v9;\n      v3 -= v9;\n      result = memcpy((void *)(i + v7), v8, v9);\n      v11 = *(_QWORD *)(v5 - 24);\n      *(_QWORD *)(v5 - 16) += v9;\n      v7 = v9 + v11;\n      *(_QWORD *)(v5 - 24) = v7;\n      if ( v7 == 64 )\n        break;\n      if ( !v3 )\n        return result;\n    }\n    v12 = _mm_loadu_si128((const __m128i *)(v5 - 88));\n    *(_QWORD *)(v5 - 24) = 0LL;\n    v13 = _mm_load_si128((const __m128i *)(v5 - 120));\n    _XMM2 = _mm_load_si128((const __m128i *)(v5 - 104));\n    _XMM0 = _mm_add_epi32(_XMM2, _mm_shuffle_epi8(v12, (__m128i)xmmword_4C9A0));\n    __asm { sha1rnds4 xmm5, xmm0, 0 }\n    _XMM9 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(v5 - 56)), (__m128i)xmmword_4C9A0);\n    _XMM0 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(v5 - 72)), (__m128i)xmmword_4C9A0);\n    __asm\n    {\n      sha1nexte xmm5, xmm9\n      sha1nexte xmm4, xmm0\n      sha1msg1 xmm1, xmm0\n    }\n    _XMM8 = _mm_shuffle_epi8(_mm_loadu_si128((const __m128i *)(v5 - 40)), (__m128i)xmmword_4C9A0);\n    __asm\n    {\n      sha1rnds4 xmm7, xmm4, 0\n      sha1msg1 xmm0, xmm9\n      sha1nexte xmm7, xmm8\n      sha1msg2 xmm1, xmm8\n      sha1rnds4 xmm6, xmm5, 0\n      sha1msg1 xmm4, xmm8\n      sha1nexte xmm6, xmm1\n      sha1msg2 xmm0, xmm1\n      sha1rnds4 xmm10, xmm7, 0\n      sha1msg1 xmm5, xmm1\n      sha1msg2 xmm4, xmm0\n      sha1rnds4 xmm11, xmm6, 0\n      sha1nexte xmm7, xmm0\n      sha1msg1 xmm1, xmm0\n      sha1rnds4 xmm12, xmm7, 1\n      sha1nexte xmm6, xmm4\n      sha1msg2 xmm5, xmm4\n      sha1rnds4 xmm13, xmm6, 1\n      sha1nexte xmm7, xmm5\n      sha1msg1 xmm0, xmm4\n      sha1msg2 xmm1, xmm5\n      sha1rnds4 xmm14, xmm7, 1\n      sha1nexte xmm6, xmm1\n      sha1msg1 xmm4, xmm5\n      sha1msg2 xmm0, xmm1\n      sha1rnds4 xmm15, xmm6, 1\n      sha1nexte xmm7, xmm0\n      sha1msg1 xmm5, xmm1\n      sha1msg2 xmm4, xmm0\n      sha1rnds4 xmm10, xmm7, 1\n      sha1nexte xmm6, xmm4\n      sha1msg1 xmm1, xmm0\n      sha1msg2 xmm5, xmm4\n      sha1rnds4 xmm11, xmm6, 2\n      sha1nexte xmm7, xmm5\n      sha1msg1 xmm0, xmm4\n      sha1msg2 xmm1, xmm5\n      sha1rnds4 xmm12, xmm7, 2\n      sha1nexte xmm6, xmm1\n      sha1msg1 xmm4, xmm5\n      sha1msg2 xmm0, xmm1\n      sha1rnds4 xmm13, xmm6, 2\n      sha1nexte xmm7, xmm0\n      sha1msg1 xmm5, xmm1\n      sha1msg2 xmm4, xmm0\n      sha1rnds4 xmm14, xmm7, 2\n      sha1nexte xmm6, xmm4\n      sha1msg1 xmm1, xmm0\n      sha1msg2 xmm5, xmm4\n      sha1rnds4 xmm15, xmm6, 2\n      sha1nexte xmm7, xmm5\n      sha1msg1 xmm0, xmm4\n      sha1msg2 xmm1, xmm5\n      sha1rnds4 xmm8, xmm7, 3\n      sha1nexte xmm6, xmm1\n      sha1msg1 xmm4, xmm5\n      sha1msg2 xmm0, xmm1\n      sha1rnds4 xmm9, xmm6, 3\n      sha1msg1 xmm5, xmm1\n      sha1nexte xmm7, xmm0\n      sha1msg2 xmm1, xmm0\n      sha1rnds4 xmm4, xmm7, 3\n      sha1nexte xmm6, xmm1\n      sha1msg2 xmm0, xmm1\n      sha1rnds4 xmm1, xmm6, 3\n      sha1nexte xmm4, xmm0\n      sha1nexte xmm1, xmm2\n      sha1rnds4 xmm0, xmm4, 3\n    }\n    *(_OWORD *)(v5 - 104) = _XMM1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40060L", 
            "funcEndAddr": "0x40395L", 
            "funcName": "sub_40060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403A0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  signed __int64 v4; // rbp\n  __int64 result; // rax\n  int v6; // edx\n\n  v2 = 8LL * *(_QWORD *)(a1 - 24);\n  v3 = ((55 - *(_DWORD *)(a1 - 32)) & 0x3F) + 1LL;\n  sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 128);\n  if ( v3 != 1 )\n  {\n    v4 = 1LL;\n    do\n    {\n      ++v4;\n      sub_10CD0(*(__int64 (__fastcall ***)(_QWORD, char *, signed __int64))(a1 - 8), 0);\n    }\n    while ( v3 != v4 );\n  }\n  sub_10DE0(*(void (__fastcall ***)(_QWORD, char *, signed __int64, _QWORD))(a1 - 8), v2);\n  result = *(_QWORD *)(a1 - 32);\n  if ( result )\n    sub_613B();\n  do\n  {\n    v6 = *(_DWORD *)(a1 + 4 * result - 120);\n    *(_BYTE *)(a2 + 4 * result + 3) = v6;\n    *(_BYTE *)(a2 + 4 * result + 2) = BYTE1(v6);\n    *(_BYTE *)(a2 + 4 * result + 1) = BYTE2(v6);\n    *(_BYTE *)(a2 + 4 * result++) = HIBYTE(v6);\n  }\n  while ( result != 5 );\n  return result;\n}\n", 
            "funcStartAddr": "0x403a0L", 
            "funcEndAddr": "0x4044cL", 
            "funcName": "sub_403A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40450(__int64 a1, __int64 a2)\n{\n  qmemcpy((void *)(a1 - 432), (const void *)(a2 - 432), 0x1B0uLL);\n}\n", 
            "funcStartAddr": "0x40450L", 
            "funcEndAddr": "0x40467L", 
            "funcName": "sub_40450"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40470(__int64 a1)\n{\n  sub_47E30(a1 - 432, 464LL);\n  sub_114C0((void *)(a1 - 432));\n}\n", 
            "funcStartAddr": "0x40470L", 
            "funcEndAddr": "0x4048eL", 
            "funcName": "sub_40470"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40490(_QWORD *a1, char *a2, size_t a3)\n{\n  signed __int64 *v3; // r15\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  size_t v6; // rbp\n  signed __int64 v7; // r15\n  signed __int64 *v8; // r8\n  unsigned __int64 v9; // rax\n  unsigned __int64 v10; // rdi\n  signed __int64 v11; // rsi\n  signed __int64 *v12; // rdx\n  __int64 v13; // rcx\n  signed __int64 v14; // rcx\n  _QWORD *v15; // rdx\n  __int64 *v16; // r11\n  signed __int64 *v17; // r10\n  __int64 *v18; // rsi\n  signed __int64 i; // rdi\n  __int64 v20; // rax\n  signed __int64 *v21; // rdi\n  int v22; // er8\n  __int64 v23; // rdx\n  signed __int64 *j; // rax\n  __int64 v25; // rcx\n  signed __int64 *v26; // rbp\n  int *v27; // r12\n  int v28; // er13\n  int v29; // er9\n  int v30; // er8\n  __int64 k; // rdi\n  unsigned __int64 v32; // rsi\n  unsigned int v33; // ecx\n  __int64 v34; // rdx\n  unsigned int v35; // ecx\n  unsigned int v36; // esi\n  __int64 v37; // rdx\n  signed __int64 v38; // rdi\n  signed __int64 *v40; // [rsp+0h] [rbp-148h]\n  char *v41; // [rsp+8h] [rbp-140h]\n  signed __int64 v42; // [rsp+10h] [rbp-138h]\n  signed __int64 v43; // [rsp+18h] [rbp-130h]\n  signed __int64 v44; // [rsp+20h] [rbp-128h]\n  char *dest; // [rsp+28h] [rbp-120h]\n  char *src; // [rsp+30h] [rbp-118h]\n  size_t n; // [rsp+38h] [rbp-110h]\n  __int64 v48[25]; // [rsp+40h] [rbp-108h]\n  unsigned __int64 v49; // [rsp+108h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a1[52];\n  v49 = __readfsqword(0x28u);\n  v5 = a1[51];\n  src = a2;\n  n = a3;\n  dest = (char *)(a1 + 25);\n  v6 = v4 - v5;\n  if ( a3 < v6 )\n  {\n    dest += v5;\n  }\n  else\n  {\n    v40 = a1;\n    v43 = (signed __int64)(a1 + 5);\n    v44 = (signed __int64)(a1 + 1);\n    v7 = (signed __int64)(a1 + 26);\n    do\n    {\n      memcpy(&dest[v5], src, v6);\n      v8 = v40;\n      n -= v6;\n      v9 = 0LL;\n      src += v6;\n      v10 = v40[52];\n      do\n      {\n        v11 = v9 + 40;\n        v12 = v8;\n        do\n        {\n          if ( v10 <= v9 )\n            break;\n          v13 = *(_QWORD *)&dest[v9];\n          v9 += 8LL;\n          *v12 ^= v13;\n          v12 += 5;\n        }\n        while ( v9 != v11 );\n        ++v8;\n      }\n      while ( (signed __int64 *)v43 != v8 );\n      v42 = 1LL;\n      v14 = *v40;\n      v41 = (char *)&off_50FC8;\n      while ( 1 )\n      {\n        v15 = (_QWORD *)v44;\n        v16 = v48;\n        v17 = v40;\n        v18 = v48;\n        for ( i = v14; ; i = *(v15 - 1) )\n        {\n          v20 = v15[1] ^ *v15;\n          v15 += 5;\n          ++v18;\n          *(v18 - 1) = i ^ *(v15 - 2) ^ *(v15 - 3) ^ v20;\n          if ( (_QWORD *)v7 == v15 )\n            break;\n        }\n        v21 = (signed __int64 *)v43;\n        v22 = 0;\n        while ( 1 )\n        {\n          v23 = v48[(v22 + 4) % 5u] ^ __ROL8__(v48[(v22 + 1) % 5u], 1);\n          *(v21 - 5) = v23 ^ v14;\n          for ( j = v21 - 4; v21 != j; *(j - 1) = v23 ^ v25 )\n          {\n            v25 = *j;\n            ++j;\n          }\n          if ( v22 == 4 )\n            break;\n          v14 = *v21;\n          ++v22;\n          v21 += 5;\n        }\n        v26 = v40;\n        v27 = (int *)&unk_50F40;\n        v28 = 0;\n        LOBYTE(v29) = 0;\n        while ( 1 )\n        {\n          v30 = v28;\n          for ( k = 0LL; ; v29 = v27[k] )\n          {\n            v32 = v26[k];\n            v33 = v30;\n            v30 += 3;\n            v34 = (unsigned int)k++;\n            v48[5 * v34 + v33 % 5] = (v32 >> -(char)v29) | (v32 << v29);\n            if ( k == 5 )\n              break;\n          }\n          v27 += 5;\n          v26 += 5;\n          if ( v28 == 8 )\n            break;\n          v29 = *v27;\n          v28 += 2;\n        }\n        v35 = 0;\n        do\n        {\n          v36 = v35++ + 2;\n          v37 = 0LL;\n          do\n          {\n            v17[v37] = v16[v37] ^ v48[5 * (v36 % 5) + v37] & ~v48[5 * (v35 % 5) + v37];\n            ++v37;\n          }\n          while ( v37 != 5 );\n          v16 += 5;\n          v17 += 5;\n        }\n        while ( v35 != 5 );\n        v14 = *v40 ^ v42;\n        *v40 = v14;\n        if ( \"stripctrl.c\" == v41 )\n          break;\n        v38 = *(_QWORD *)v41;\n        v41 += 8;\n        v42 = v38;\n      }\n      sub_47E30(v48, 200LL);\n      v6 = v40[52];\n      v40[51] = 0LL;\n      v5 = 0LL;\n    }\n    while ( v6 <= n );\n    v3 = v40;\n  }\n  memcpy(dest, src, n);\n  v3[51] += n;\n  return __readfsqword(0x28u) ^ v49;\n}\n", 
            "funcStartAddr": "0x40490L", 
            "funcEndAddr": "0x407fdL", 
            "funcName": "sub_40490"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40810(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // r12\n  size_t v4; // r13\n  signed __int64 v5; // rdi\n  __int64 v6; // rcx\n  __int64 *v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  _QWORD *v10; // rdx\n  unsigned __int64 v12; // r10\n  char *v13; // rdx\n  char *v14; // r13\n  unsigned int v15; // edx\n  unsigned int v16; // edx\n  unsigned int v17; // er11\n  __int64 v18; // r14\n  char v19; // [rsp+1h] [rbp-109h]\n  __int16 v20; // [rsp+2h] [rbp-108h]\n  char v21; // [rsp+4h] [rbp-106h]\n  char v22; // [rsp+5h] [rbp-105h]\n  char v23; // [rsp+6h] [rbp-104h]\n  char v24; // [rsp+7h] [rbp-103h]\n  char v25; // [rsp+8h] [rbp-102h]\n  char v26; // [rsp+9h] [rbp-101h]\n  unsigned __int64 v27; // [rsp+CAh] [rbp-40h]\n\n  v2 = a1;\n  v3 = a2;\n  v27 = __readfsqword(0x28u);\n  v4 = *(_QWORD *)(a1 - 16) - *(_QWORD *)(a1 - 24);\n  if ( *(_QWORD *)(a1 - 16) == *(_QWORD *)(a1 - 24) )\n    v4 = *(_QWORD *)(a1 - 16);\n  __memset_chk(&v20, 0LL, v4, 200LL);\n  LOBYTE(v20) = *(_BYTE *)(a1 - 32) | v20;\n  *(&v19 + v4) |= 0x80u;\n  sub_40490((_QWORD *)(a1 - 432), (char *)&v20, v4);\n  v5 = a1 - 232;\n  v6 = 0LL;\n  do\n  {\n    v7 = (__int64 *)(v5 - 200);\n    do\n    {\n      v8 = *(_QWORD *)(v2 - 8) - v6;\n      if ( *(_QWORD *)(v2 - 8) == v6 )\n        break;\n      v9 = *v7;\n      if ( v8 > 8 )\n        v8 = 8LL;\n      v20 = *v7;\n      v21 = BYTE2(v9);\n      v22 = BYTE3(v9);\n      v23 = BYTE4(v9);\n      v24 = BYTE5(v9);\n      v26 = HIBYTE(v9);\n      v25 = BYTE6(v9);\n      v10 = (_QWORD *)(v3 + v6);\n      if ( (unsigned int)v8 >= 8 )\n      {\n        *v10 = *(_QWORD *)&v20;\n        *(_QWORD *)((char *)v10 + (unsigned int)v8 - 8) = *(_QWORD *)((char *)&v20 + (unsigned int)v8 - 8);\n        v12 = (unsigned __int64)(v10 + 1) & 0xFFFFFFFFFFFFFFF8LL;\n        v13 = (char *)v10 - v12;\n        v14 = (char *)((char *)&v20 - v13);\n        v15 = (v8 + (_DWORD)v13) & 0xFFFFFFF8;\n        if ( v15 >= 8 )\n        {\n          v16 = v15 & 0xFFFFFFF8;\n          v17 = 0;\n          do\n          {\n            v18 = v17;\n            v17 += 8;\n            *(_QWORD *)(v12 + v18) = *(_QWORD *)&v14[v18];\n          }\n          while ( v17 < v16 );\n        }\n      }\n      else if ( v8 & 4 )\n      {\n        *(_DWORD *)v10 = *(_DWORD *)&v20;\n        *(_DWORD *)((char *)v10 + (unsigned int)v8 - 4) = *(_DWORD *)((char *)&v20 + (unsigned int)v8 - 4);\n      }\n      else if ( (_DWORD)v8 )\n      {\n        *(_BYTE *)v10 = v20;\n        if ( v8 & 2 )\n          *(_WORD *)((char *)v10 + (unsigned int)v8 - 2) = *(__int16 *)((char *)&v20 + (unsigned int)v8 - 2);\n      }\n      v7 += 5;\n      v6 += v8;\n    }\n    while ( (__int64 *)v5 != v7 );\n    v5 += 8LL;\n  }\n  while ( v5 != v2 - 192 );\n  return __readfsqword(0x28u) ^ v27;\n}\n", 
            "funcStartAddr": "0x40810L", 
            "funcEndAddr": "0x40a09L", 
            "funcName": "sub_40810"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40A10(__int64 a1)\n{\n  _QWORD *v1; // rax\n  signed __int64 v2; // rbx\n\n  v1 = (_QWORD *)sub_11440(1uLL, 0x1D0uLL, 0LL);\n  v2 = (signed __int64)(v1 + 54);\n  v1[54] = a1;\n  v1[56] = sub_40800;\n  v1[57] = v1 + 56;\n  v1[55] = v1 + 56;\n  (*(void (__fastcall **)(_QWORD *, signed __int64))(a1 + 8))(v1 + 54, 464LL);\n  return v2;\n}\n", 
            "funcStartAddr": "0x40a10L", 
            "funcEndAddr": "0x40a6bL", 
            "funcName": "sub_40A10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B00(__int64 a1)\n{\n  __int64 v1; // rdx\n\n  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40LL);\n  JUMPOUT(&loc_40A70);\n}\n", 
            "funcStartAddr": "0x40b00L", 
            "funcEndAddr": "0x40b22L", 
            "funcName": "sub_40B00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B30(__int64 *a1)\n{\n  signed __int64 result; // rax\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  unsigned int v4; // esi\n\n  v2 = *a1;\n  v3 = (signed __int64)(a1 - 54);\n  v4 = 8 * *(unsigned __int64 *)(v2 + 40);\n  *(_QWORD *)(v3 + 408) = 0LL;\n  *(_BYTE *)(v3 + 400) = 31;\n  *(_QWORD *)(v3 + 424) = v4 >> 3;\n  *(_QWORD *)(v3 + 416) = 136LL;\n  result = v3 + 40;\n  do\n  {\n    *(_QWORD *)v3 = 0LL;\n    *(_QWORD *)(v3 + 40) = 0LL;\n    v3 += 8LL;\n    *(_QWORD *)(v3 + 72) = 0LL;\n    *(_QWORD *)(v3 + 112) = 0LL;\n    *(_QWORD *)(v3 + 152) = 0LL;\n  }\n  while ( v3 != result );\n  return result;\n}\n\nsigned __int64 __fastcall sub_40B30(__int64 *a1)\n{\n  signed __int64 result; // rax\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  unsigned int v4; // esi\n\n  v2 = *a1;\n  v3 = (signed __int64)(a1 - 54);\n  v4 = 8 * *(unsigned __int64 *)(v2 + 40);\n  *(_QWORD *)(v3 + 408) = 0LL;\n  *(_BYTE *)(v3 + 400) = 31;\n  *(_QWORD *)(v3 + 424) = v4 >> 3;\n  *(_QWORD *)(v3 + 416) = 136LL;\n  result = v3 + 40;\n  do\n  {\n    *(_QWORD *)v3 = 0LL;\n    *(_QWORD *)(v3 + 40) = 0LL;\n    v3 += 8LL;\n    *(_QWORD *)(v3 + 72) = 0LL;\n    *(_QWORD *)(v3 + 112) = 0LL;\n    *(_QWORD *)(v3 + 152) = 0LL;\n  }\n  while ( v3 != result );\n  return result;\n}\n", 
            "funcStartAddr": "0x40a70L", 
            "funcEndAddr": "0x40affL", 
            "funcName": "sub_40B30"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B30(__int64 *a1)\n{\n  signed __int64 result; // rax\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  unsigned int v4; // esi\n\n  v2 = *a1;\n  v3 = (signed __int64)(a1 - 54);\n  v4 = 8 * *(unsigned __int64 *)(v2 + 40);\n  *(_QWORD *)(v3 + 408) = 0LL;\n  *(_BYTE *)(v3 + 400) = 31;\n  *(_QWORD *)(v3 + 424) = v4 >> 3;\n  *(_QWORD *)(v3 + 416) = 136LL;\n  result = v3 + 40;\n  do\n  {\n    *(_QWORD *)v3 = 0LL;\n    *(_QWORD *)(v3 + 40) = 0LL;\n    v3 += 8LL;\n    *(_QWORD *)(v3 + 72) = 0LL;\n    *(_QWORD *)(v3 + 112) = 0LL;\n    *(_QWORD *)(v3 + 152) = 0LL;\n  }\n  while ( v3 != result );\n  return result;\n}\n\nsigned __int64 __fastcall sub_40B30(__int64 *a1)\n{\n  signed __int64 result; // rax\n  __int64 v2; // rax\n  signed __int64 v3; // rdi\n  unsigned int v4; // esi\n\n  v2 = *a1;\n  v3 = (signed __int64)(a1 - 54);\n  v4 = 8 * *(unsigned __int64 *)(v2 + 40);\n  *(_QWORD *)(v3 + 408) = 0LL;\n  *(_BYTE *)(v3 + 400) = 31;\n  *(_QWORD *)(v3 + 424) = v4 >> 3;\n  *(_QWORD *)(v3 + 416) = 136LL;\n  result = v3 + 40;\n  do\n  {\n    *(_QWORD *)v3 = 0LL;\n    *(_QWORD *)(v3 + 40) = 0LL;\n    v3 += 8LL;\n    *(_QWORD *)(v3 + 72) = 0LL;\n    *(_QWORD *)(v3 + 112) = 0LL;\n    *(_QWORD *)(v3 + 152) = 0LL;\n  }\n  while ( v3 != result );\n  return result;\n}\n", 
            "funcStartAddr": "0x40a70L", 
            "funcEndAddr": "0x40affL", 
            "funcName": "sub_40B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B50(__int64 a1, _DWORD *a2, size_t a3)\n{\n  _DWORD *v3; // r12\n  __int64 v4; // rbx\n  size_t v5; // rbp\n  signed __int64 v6; // r14\n  __int64 v7; // rdi\n  signed __int64 v8; // r13\n  size_t v9; // r15\n  signed __int64 v10; // rsi\n  size_t v11; // rdx\n  __int64 v12; // r15\n  size_t v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rcx\n  wint_t v16; // er15\n  int v17; // eax\n  __int64 v18; // r8\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // rax\n  unsigned __int64 v21; // rdx\n  size_t v22; // rax\n  unsigned __int64 v23; // rdx\n  size_t v24; // rdx\n  __int64 v25; // r13\n  size_t v26; // rax\n  __int64 v27; // rdx\n  __int64 v28; // rcx\n  __int64 v29; // r8\n  unsigned __int64 v30; // r15\n  wint_t v31; // er13\n  int v32; // eax\n  __int64 v33; // rcx\n  __int64 v34; // r8\n  char *v35; // rax\n  unsigned __int64 v36; // rdx\n  signed __int64 v37; // rcx\n  unsigned __int64 v38; // r14\n  unsigned __int64 v39; // rcx\n  char *v40; // r12\n  unsigned int v41; // eax\n  unsigned int v42; // edx\n  __int64 v43; // rcx\n  __int64 v44; // rax\n  __int64 result; // rax\n  unsigned __int64 v46; // rt1\n  unsigned __int64 v47; // r15\n  __int64 v48; // rdx\n  __int64 v49; // r8\n  __int64 v50; // rcx\n  size_t v51; // rcx\n  unsigned __int64 v52; // r13\n  int v53; // eax\n  __int64 v54; // rdx\n  __int64 v55; // rcx\n  __int64 v56; // r8\n  unsigned int v57; // er15\n  wchar_t v58; // ecx\n  unsigned __int64 v59; // rax\n  unsigned __int64 v60; // rax\n  wchar_t v61; // ST08_4\n  unsigned __int64 v62; // ST20_8\n  wchar_t *v63; // ST08_8\n  char *v64; // ST18_8\n  unsigned __int64 v65; // ST20_8\n  wchar_t v66; // ST08_4\n  int v67; // eax\n  int v68; // eax\n  char *v69; // ST18_8\n  wchar_t v70; // ST08_4\n  wchar_t *v71; // [rsp+8h] [rbp-90h]\n  signed int v72; // [rsp+8h] [rbp-90h]\n  wchar_t *v73; // [rsp+8h] [rbp-90h]\n  wchar_t *v74; // [rsp+8h] [rbp-90h]\n  signed int s; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v76; // [rsp+20h] [rbp-78h]\n  const char *locale; // [rsp+28h] [rbp-70h]\n  wint_t wc; // [rsp+38h] [rbp-60h]\n  wint_t v79; // [rsp+3Ch] [rbp-5Ch]\n  char v80; // [rsp+40h] [rbp-58h]\n  unsigned __int64 v81; // [rsp+58h] [rbp-40h]\n\n  v3 = a2;\n  v4 = a1;\n  v5 = a3;\n  v6 = a1 - 152;\n  v81 = __readfsqword(0x28u);\n  locale = setlocale(0, 0LL);\n  setlocale(0, \"\");\n  v7 = *(_QWORD *)(a1 - 64);\n  if ( !v7 )\n    goto LABEL_20;\n  v8 = v6 + 24;\n  while ( 1 )\n  {\n    v9 = 64 - v7;\n    v71 = (wchar_t *)(64 - v7);\n    if ( v5 <= 64 - v7 )\n      v9 = v5;\n    memcpy((void *)(v8 + v7), v3, v9);\n    v10 = v6 + 24;\n    v11 = v9 + *(_QWORD *)(v4 - 64);\n    v12 = *(_QWORD *)(v4 - 152);\n    v13 = mbrtowc((wchar_t *)&wc, (const char *)(v6 + 24), v11, (mbstate_t *)(v4 - 152));\n    if ( v13 == -2LL )\n      break;\n    if ( v13 == -1LL )\n    {\n      *(_QWORD *)v6 = 0LL;\n      v23 = *(_QWORD *)(v4 - 64);\n      v19 = 1LL;\n      if ( v23 <= 1 )\n        goto LABEL_52;\n      goto LABEL_19;\n    }\n    if ( v13 )\n    {\n      v16 = wc;\n      v76 = v13;\n      v72 = sub_48660(wc, v10, v14, v15, v71);\n      v17 = iswprint(v16);\n      v19 = v76;\n      if ( v72 >= 0 && v17 )\n      {\nLABEL_10:\n        v20 = v72;\n        goto LABEL_11;\n      }\n      if ( v16 == 10 || v16 == 13 && *(_BYTE *)(v4 - 136) )\n      {\n        v20 = 0LL;\n        if ( v72 >= 0 )\n          goto LABEL_10;\nLABEL_11:\n        if ( *(_BYTE *)(v4 - 24) )\n        {\n          if ( *(_BYTE *)(v4 - 23) )\n          {\n            v62 = v20;\n            v63 = (wchar_t *)v19;\n            sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n            *(_BYTE *)(v4 - 23) = 0;\n            *(_QWORD *)(v4 - 16) = 77LL;\n            v20 = v62;\n            v19 = (unsigned __int64)v63;\n            if ( v16 == 10 )\n              goto LABEL_104;\nLABEL_14:\n            v21 = *(_QWORD *)(v4 - 16);\n            if ( v21 < v20 )\n            {\n              v65 = v20;\n              v74 = (wchar_t *)v19;\n              sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n              v20 = v65;\n              *(_QWORD *)(v4 - 16) = 77LL;\n              if ( v65 > 0x4D )\n                goto LABEL_121;\n              v21 = 77LL;\n              v19 = (unsigned __int64)v74;\n            }\n            *(_QWORD *)(v4 - 16) = v21 - v20;\n          }\n          else\n          {\n            if ( v16 != 10 )\n              goto LABEL_14;\nLABEL_104:\n            *(_BYTE *)(v4 - 23) = 1;\n          }\n        }\n        v73 = (wchar_t *)v19;\n        v22 = wcrtomb(&v80, v16, (mbstate_t *)(v6 + 8));\n        v19 = (unsigned __int64)v73;\n        if ( v22 )\n        {\n          sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n          v19 = (unsigned __int64)v73;\n        }\n      }\n      else\n      {\n        v16 = *(_DWORD *)(v4 - 132);\n        if ( v16 )\n        {\n          LODWORD(v20) = sub_48660(v16, v10, (unsigned int)v72, v76, v18);\n          if ( (v20 & 0x80000000) != 0LL )\n            goto LABEL_110;\n          v20 = (signed int)v20;\n          v19 = v76;\n          goto LABEL_11;\n        }\n      }\n      v23 = *(_QWORD *)(v4 - 64);\n      if ( v19 >= v23 )\n        goto LABEL_52;\n      goto LABEL_19;\n    }\n    v47 = (signed int)sub_48660(0LL, v10, v14, v15, v71);\n    if ( iswprint(0) && (v47 & 0x80000000) == 0LL )\n    {\n      v58 = 0;\n    }\n    else\n    {\n      v50 = *(unsigned int *)(v4 - 132);\n      if ( !(_DWORD)v50 )\n        goto LABEL_51;\n      v66 = *(_DWORD *)(v4 - 132);\n      v67 = sub_48660((unsigned int)v50, v10, v48, v50, v49);\n      v47 = v67;\n      v58 = v66;\n      if ( v67 < 0 )\nLABEL_110:\n        sub_6181();\n    }\n    if ( *(_BYTE *)(v4 - 24) )\n    {\n      if ( *(_BYTE *)(v4 - 23) )\n      {\n        v61 = v58;\n        sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n        v58 = v61;\n        *(_BYTE *)(v4 - 23) = 0;\n        *(_QWORD *)(v4 - 16) = 77LL;\n        if ( v61 != 10 )\n        {\nLABEL_82:\n          v59 = *(_QWORD *)(v4 - 16);\n          if ( v47 > v59 )\n          {\n            v70 = v58;\n            sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n            *(_QWORD *)(v4 - 16) = 77LL;\n            v58 = v70;\n            if ( v47 > 0x4D )\n              goto LABEL_121;\n            v59 = 77LL;\n          }\n          *(_QWORD *)(v4 - 16) = v59 - v47;\n          goto LABEL_84;\n        }\n      }\n      else if ( v58 != 10 )\n      {\n        goto LABEL_82;\n      }\n      *(_BYTE *)(v4 - 23) = 1;\n    }\nLABEL_84:\n    if ( !wcrtomb(&v80, v58, (mbstate_t *)(v6 + 8)) )\n    {\nLABEL_51:\n      v23 = *(_QWORD *)(v4 - 64);\n      v19 = 1LL;\n      if ( v23 <= 1 )\n        goto LABEL_52;\n      goto LABEL_19;\n    }\n    sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n    v23 = *(_QWORD *)(v4 - 64);\n    v19 = 1LL;\n    if ( v23 <= 1 )\n    {\nLABEL_52:\n      v51 = v19 - v23;\n      if ( v5 < v51 )\n        __assert_fail(\"consumed_from_main_string <= len\", \"stripctrl.c\", 0x14Du, \"stripctrl_locale_BinarySink_write\");\n      v3 = (_DWORD *)((char *)v3 + v51);\n      v5 -= v51;\n      goto LABEL_54;\n    }\nLABEL_19:\n    v24 = v23 - v19;\n    *(_QWORD *)(v4 - 64) = v24;\n    memmove((void *)(v6 + 24), (const void *)(v8 + v19), v24);\n    v7 = *(_QWORD *)(v4 - 64);\n    if ( !v7 )\n      goto LABEL_20;\n  }\n  v44 = *(_QWORD *)(v4 - 64);\n  *(_QWORD *)(v4 - 152) = v12;\n  if ( v44 )\n  {\n    if ( v5 > (unsigned __int64)v71 )\n      __assert_fail(\"to_copy == len\", \"stripctrl.c\", 0x15Fu, \"stripctrl_locale_BinarySink_write\");\n    *(_QWORD *)(v4 - 64) = v44 + v5;\n    goto LABEL_44;\n  }\nLABEL_54:\n  *(_QWORD *)(v4 - 64) = 0LL;\nLABEL_20:\n  if ( !v5 )\n    goto LABEL_36;\n  while ( 2 )\n  {\n    v25 = *(_QWORD *)(v4 - 152);\n    v26 = mbrtowc((wchar_t *)&v79, (const char *)v3, v5, (mbstate_t *)(v4 - 152));\n    v30 = v26;\n    if ( v26 != -2LL )\n    {\n      if ( v26 == -1LL )\n      {\n        *(_QWORD *)v6 = 0LL;\n        v30 = 1LL;\n        goto LABEL_34;\n      }\n      if ( v26 )\n      {\n        v31 = v79;\n        s = sub_48660(v79, v3, v27, v28, v29);\n        v32 = iswprint(v31);\n        if ( s >= 0 && v32 )\n        {\nLABEL_26:\n          v35 = (char *)s;\n          goto LABEL_27;\n        }\n        if ( v31 == 10 || v31 == 13 && *(_BYTE *)(v4 - 136) )\n        {\n          v35 = 0LL;\n          if ( s >= 0 )\n            goto LABEL_26;\nLABEL_27:\n          if ( *(_BYTE *)(v4 - 24) )\n          {\n            if ( *(_BYTE *)(v4 - 23) )\n            {\n              v64 = v35;\n              sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n              *(_BYTE *)(v4 - 23) = 0;\n              *(_QWORD *)(v4 - 16) = 77LL;\n              v35 = v64;\n              if ( v31 == 10 )\n                goto LABEL_106;\nLABEL_30:\n              v36 = *(_QWORD *)(v4 - 16);\n              if ( (unsigned __int64)v35 > v36 )\n              {\n                v69 = v35;\n                sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n                v35 = v69;\n                *(_QWORD *)(v4 - 16) = 77LL;\n                if ( (unsigned __int64)v69 > 0x4D )\n                  goto LABEL_121;\n                v36 = 77LL;\n              }\n              *(_QWORD *)(v4 - 16) = v36 - (_QWORD)v35;\n            }\n            else\n            {\n              if ( v31 != 10 )\n                goto LABEL_30;\nLABEL_106:\n              *(_BYTE *)(v4 - 23) = 1;\n            }\n          }\n          if ( wcrtomb(&v80, v31, (mbstate_t *)(v6 + 8)) )\n            sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n        }\n        else\n        {\n          v31 = *(_DWORD *)(v4 - 132);\n          if ( v31 )\n          {\n            LODWORD(v35) = sub_48660(v31, v3, (unsigned int)s, v33, v34);\n            if ( (signed int)v35 < 0 )\n              goto LABEL_110;\n            v35 = (char *)(signed int)v35;\n            goto LABEL_27;\n          }\n        }\nLABEL_34:\n        if ( v30 > v5 )\n          __assert_fail(\"consumed <= len\", \"stripctrl.c\", 0x17Bu, \"stripctrl_locale_BinarySink_write\");\n        v3 = (_DWORD *)((char *)v3 + v30);\n        v5 -= v30;\n        if ( !v5 )\n          goto LABEL_36;\n        continue;\n      }\n      v52 = (signed int)sub_48660(0LL, v3, v27, v28, v29);\n      v53 = iswprint(0);\n      if ( (v52 & 0x80000000) == 0LL && v53 )\n      {\n        v57 = 0;\n      }\n      else\n      {\n        v57 = *(_DWORD *)(v4 - 132);\n        if ( !v57 )\n          goto LABEL_58;\n        v68 = sub_48660(v57, v3, v54, v55, v56);\n        v52 = v68;\n        if ( v68 < 0 )\n          goto LABEL_110;\n      }\n      if ( *(_BYTE *)(v4 - 24) )\n      {\n        if ( *(_BYTE *)(v4 - 23) )\n        {\n          sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n          *(_BYTE *)(v4 - 23) = 0;\n          *(_QWORD *)(v4 - 16) = 77LL;\n          if ( v57 == 10 )\n            goto LABEL_102;\nLABEL_91:\n          v60 = *(_QWORD *)(v4 - 16);\n          if ( v52 > v60 )\n          {\n            sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n            *(_QWORD *)(v4 - 16) = 77LL;\n            if ( v52 > 0x4D )\n              goto LABEL_121;\n            v60 = 77LL;\n          }\n          *(_QWORD *)(v4 - 16) = v60 - v52;\n        }\n        else\n        {\n          if ( v57 != 10 )\n            goto LABEL_91;\nLABEL_102:\n          *(_BYTE *)(v4 - 23) = 1;\n        }\n      }\n      if ( wcrtomb(&v80, v57, (mbstate_t *)(v6 + 8)) )\n      {\n        v30 = 1LL;\n        sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v4 - 8) + 8LL));\n        goto LABEL_34;\n      }\nLABEL_58:\n      v30 = 1LL;\n      goto LABEL_34;\n    }\n    break;\n  }\n  *(_QWORD *)(v4 - 152) = v25;\n  if ( v5 > 0x40 )\n    __assert_fail(\"len <= SCC_BUFSIZE\", \"stripctrl.c\", 0x184u, \"stripctrl_locale_BinarySink_write\");\nLABEL_36:\n  v37 = v6 + 24;\n  if ( (unsigned int)v5 < 8 )\n  {\n    if ( v5 & 4 )\n    {\n      *(_DWORD *)(v4 - 128) = *v3;\n      *(_DWORD *)(v37 + (unsigned int)v5 - 4) = *(_DWORD *)((char *)v3 + (unsigned int)v5 - 4);\n    }\n    else if ( (_DWORD)v5 )\n    {\n      *(_BYTE *)(v4 - 128) = *(_BYTE *)v3;\n      if ( v5 & 2 )\n        *(_WORD *)(v37 + (unsigned int)v5 - 2) = *(_WORD *)((char *)v3 + (unsigned int)v5 - 2);\n    }\n  }\n  else\n  {\n    v38 = (v6 + 32) & 0xFFFFFFFFFFFFFFF8LL;\n    *(_QWORD *)(v4 - 128) = *(_QWORD *)v3;\n    *(_QWORD *)(v37 + (unsigned int)v5 - 8) = *(_QWORD *)((char *)v3 + (unsigned int)v5 - 8);\n    v39 = v37 - v38;\n    v40 = (char *)v3 - v39;\n    if ( (((_DWORD)v5 + (_DWORD)v39) & 0xFFFFFFF8) >= 8 )\n    {\n      v41 = (v5 + v39) & 0xFFFFFFF8;\n      v42 = 0;\n      do\n      {\n        v43 = v42;\n        v42 += 8;\n        *(_QWORD *)(v38 + v43) = *(_QWORD *)&v40[v43];\n      }\n      while ( v42 < v41 );\n    }\n  }\n  *(_QWORD *)(v4 - 64) = v5;\nLABEL_44:\n  setlocale(0, locale);\n  v46 = __readfsqword(0x28u);\n  result = v46 ^ v81;\n  if ( v46 != v81 )\nLABEL_121:\n    sub_615E();\n  return result;\n}\n", 
            "funcStartAddr": "0x40b50L", 
            "funcEndAddr": "0x4149fL", 
            "funcName": "sub_40B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414A0(__int64 a1, unsigned __int8 *a2, __int64 a3)\n{\n  __int64 v3; // r14\n  unsigned __int8 *v4; // rbx\n  __int64 v5; // rdi\n  char v6; // al\n  int v7; // eax\n  __int64 v8; // rdx\n  __int64 v9; // rcx\n  __int64 v10; // r8\n  unsigned __int64 v11; // r12\n  char v12; // al\n  unsigned __int64 v13; // r12\n  __int64 v14; // rbp\n  __int64 v15; // rax\n  signed __int64 v16; // rsi\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n  __int64 v19; // r8\n  signed __int64 v20; // rdi\n  signed int v21; // er13\n  bool v22; // r12\n  __int64 v23; // rdi\n  __int64 result; // rax\n  unsigned __int64 v25; // rt1\n  signed __int64 v26; // r9\n  unsigned __int64 v27; // rax\n  unsigned __int64 v28; // rax\n  int v29; // eax\n  __int64 v30; // rdx\n  __int64 v31; // rcx\n  unsigned __int64 v32; // r12\n  signed int v33; // er8\n  signed __int64 v34; // r15\n  signed __int64 v35; // r13\n  unsigned __int64 v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r12\n  __int64 v39; // rax\n  signed __int64 v40; // ST18_8\n  __int64 v41; // r8\n  __int64 v42; // rdi\n  int v43; // eax\n  char v44; // al\n  signed int v45; // ST18_4\n  signed __int64 v46; // [rsp+8h] [rbp-60h]\n  unsigned __int8 *v47; // [rsp+10h] [rbp-58h]\n  signed int v48; // [rsp+18h] [rbp-50h]\n  signed __int64 v49; // [rsp+18h] [rbp-50h]\n  char v50; // [rsp+22h] [rbp-46h]\n  unsigned __int64 v51; // [rsp+28h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a2;\n  v5 = *(_QWORD *)(a1 - 56);\n  v51 = __readfsqword(0x28u);\n  v6 = *(_BYTE *)(v5 + 305);\n  if ( !v6 )\n    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 4352) + 16LL) == 55;\n  if ( *(_BYTE *)(v3 - 48) != v6 )\n  {\n    *(_BYTE *)(v3 - 48) = v6;\n    *(_DWORD *)(v3 - 44) = 0;\n  }\n  if ( a3 )\n  {\n    v46 = v3 - 44;\n    v47 = &a2[a3];\n    while ( 1 )\n    {\n      v16 = v3 - 44;\n      v14 = (*(__int64 (__fastcall **)(__int64, signed __int64, _QWORD))(v3 - 32))(v5, v46, *v4);\n      if ( v14 != 2147483681LL )\n        goto LABEL_21;\n      if ( *(_BYTE *)(*(_QWORD *)(v3 - 56) + 4528LL) )\n      {\n        v29 = sub_48760(65533LL);\n        if ( v29 >= 0 )\n          goto LABEL_55;\n      }\n      else\n      {\n        v29 = sub_48660(65533LL, v46, v17, v18, v19);\n        if ( v29 >= 0 )\n        {\nLABEL_55:\n          if ( !*(_BYTE *)(v3 - 24) )\n          {\n            v39 = *(_QWORD *)(v3 - 56);\n            v34 = 65533LL;\n            if ( *(_BYTE *)(v39 + 305) )\n              goto LABEL_65;\n            goto LABEL_81;\n          }\n          v32 = v29;\n          v33 = 65533;\n          v34 = 65533LL;\nLABEL_57:\n          v35 = 0LL;\n          if ( *(_BYTE *)(v3 - 23) )\n            goto LABEL_96;\n          goto LABEL_58;\n        }\n      }\n      v41 = *(unsigned int *)(v3 - 132);\n      v42 = *(_QWORD *)(v3 - 56);\n      if ( (_DWORD)v41 )\n      {\n        v34 = (signed int)v41;\n        v48 = *(_DWORD *)(v3 - 132);\n        if ( *(_BYTE *)(v42 + 4528) )\n          v43 = sub_48760((unsigned int)v41);\n        else\n          v43 = sub_48660((unsigned int)v41, v46, v30, v31, v41);\n        v33 = v48;\n        if ( v43 < 0 )\nLABEL_32:\n          sub_61A4();\n        v32 = v43;\n        v44 = *(_BYTE *)(v3 - 24);\n        if ( v34 != 10 )\n        {\n          if ( !v44 )\n          {\n            if ( (unsigned __int64)(v34 - 55296) < 0x800 )\n              v34 = (unsigned __int8)v34;\nLABEL_64:\n            v39 = *(_QWORD *)(v3 - 56);\n            if ( *(_BYTE *)(v39 + 305) )\n            {\nLABEL_65:\n              if ( !sub_481D0(&v50, v34) )\n                goto LABEL_84;\n              goto LABEL_83;\n            }\nLABEL_81:\n            if ( *(_DWORD *)(*(_QWORD *)(v39 + 4352) + 16LL) == 55 )\n              goto LABEL_65;\n            v50 = v34;\nLABEL_83:\n            sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\nLABEL_84:\n            v42 = *(_QWORD *)(v3 - 56);\n            goto LABEL_85;\n          }\n          goto LABEL_57;\n        }\n        if ( v44 )\n        {\n          if ( !*(_BYTE *)(v3 - 23) )\n          {\n            *(_BYTE *)(v3 - 23) = 1;\n            goto LABEL_89;\n          }\n          v35 = 1LL;\n          v33 = 10;\nLABEL_96:\n          v45 = v33;\n          sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n          *(_BYTE *)(v3 - 23) = 0;\n          *(_QWORD *)(v3 - 16) = 77LL;\n          v33 = v45;\nLABEL_58:\n          if ( v33 == 10 )\n          {\n            v38 = v34 - 55296;\n            *(_BYTE *)(v3 - 23) = 1;\n          }\n          else\n          {\n            v36 = *(_QWORD *)(v3 - 16);\n            if ( v36 < v32 )\n            {\n              sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n              *(_QWORD *)(v3 - 16) = 77LL;\n              if ( v32 > 0x4D )\n                goto LABEL_102;\n              v36 = 77LL;\n            }\n            v37 = v36 - v32;\n            v38 = v34 - 55296;\n            *(_QWORD *)(v3 - 16) = v37;\n          }\n          if ( !v35 )\n          {\n            if ( v38 < 0x800 )\n              v34 = (unsigned __int8)v34;\n            goto LABEL_64;\n          }\n        }\n        else\n        {\nLABEL_89:\n          v38 = -55286LL;\n        }\n        sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n        if ( v38 < 0x800 )\n          v34 = (unsigned __int8)v34;\n        goto LABEL_64;\n      }\nLABEL_85:\n      v16 = v3 - 44;\n      v14 = (*(__int64 (__fastcall **)(__int64, signed __int64, _QWORD))(v3 - 32))(v42, v46, *v4);\nLABEL_21:\n      if ( v14 == 2147483711LL )\n        goto LABEL_18;\n      if ( v14 == 2147483690LL )\n      {\n        v21 = 65533;\n        v20 = 65533LL;\n        v22 = 0;\n        v14 = 65533LL;\n      }\n      else\n      {\n        v20 = (unsigned int)v14;\n        v21 = v14;\n        v22 = (v14 & 0xFFFFFFFFFFFFFF60LL) == 0;\n      }\n      if ( *(_BYTE *)(*(_QWORD *)(v3 - 56) + 4528LL) )\n      {\n        v7 = sub_48760(v20);\n        if ( v7 < 0 )\n          goto LABEL_26;\n      }\n      else\n      {\n        v7 = sub_48660(v20, v16, v17, v18, v19);\n        if ( v7 < 0 )\n          goto LABEL_26;\n      }\n      if ( !v22 )\n      {\n        v11 = v7;\n        v12 = *(_BYTE *)(v3 - 24);\n        goto LABEL_10;\n      }\nLABEL_26:\n      if ( v21 == 10 || v21 == 13 && *(_BYTE *)(v3 - 136) )\n      {\n        if ( v7 < 0 )\n          v7 = 0;\n      }\n      else\n      {\n        v23 = *(unsigned int *)(v3 - 132);\n        if ( !(_DWORD)v23 )\n          goto LABEL_18;\n        v14 = (signed int)v23;\n        if ( *(_BYTE *)(*(_QWORD *)(v3 - 56) + 4528LL) )\n          v7 = sub_48760(v23);\n        else\n          v7 = sub_48660(v23, v16, v8, v9, v10);\n        if ( v7 < 0 )\n          goto LABEL_32;\n      }\n      v11 = v7;\n      v21 = v14;\n      v12 = *(_BYTE *)(v3 - 24);\n      if ( v14 == 10 )\n      {\n        if ( !v12 )\n          goto LABEL_45;\n        if ( !*(_BYTE *)(v3 - 23) )\n        {\n          *(_BYTE *)(v3 - 23) = 1;\nLABEL_45:\n          v13 = -55286LL;\nLABEL_46:\n          sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n          goto LABEL_12;\n        }\n        v26 = 1LL;\n        v21 = 10;\nLABEL_68:\n        v40 = v26;\n        sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n        *(_BYTE *)(v3 - 23) = 0;\n        *(_QWORD *)(v3 - 16) = 77LL;\n        v26 = v40;\n        goto LABEL_48;\n      }\nLABEL_10:\n      if ( !v12 )\n      {\n        v13 = v14 - 55296;\n        goto LABEL_12;\n      }\n      v26 = 0LL;\n      if ( *(_BYTE *)(v3 - 23) )\n        goto LABEL_68;\nLABEL_48:\n      if ( v21 == 10 )\n      {\n        v13 = v14 - 55296;\n        *(_BYTE *)(v3 - 23) = 1;\n      }\n      else\n      {\n        v27 = *(_QWORD *)(v3 - 16);\n        if ( v11 > v27 )\n        {\n          v49 = v26;\n          sub_10C20(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\n          *(_QWORD *)(v3 - 16) = 77LL;\n          if ( v11 > 0x4D )\n            goto LABEL_102;\n          v27 = 77LL;\n          v26 = v49;\n        }\n        v28 = v27 - v11;\n        v13 = v14 - 55296;\n        *(_QWORD *)(v3 - 16) = v28;\n      }\n      if ( v26 )\n        goto LABEL_46;\nLABEL_12:\n      if ( v13 < 0x800 )\n        v14 = (unsigned __int8)v14;\n      v15 = *(_QWORD *)(v3 - 56);\n      if ( !*(_BYTE *)(v15 + 305) && *(_DWORD *)(*(_QWORD *)(v15 + 4352) + 16LL) != 55 )\n      {\n        v50 = v14;\nLABEL_17:\n        sub_10C10(*(__int64 (***)(void))(*(_QWORD *)(v3 - 8) + 8LL));\nLABEL_18:\n        if ( ++v4 == v47 )\n          break;\n        goto LABEL_19;\n      }\n      if ( sub_481D0(&v50, v14) )\n        goto LABEL_17;\n      if ( ++v4 == v47 )\n        break;\nLABEL_19:\n      v5 = *(_QWORD *)(v3 - 56);\n    }\n  }\n  v25 = __readfsqword(0x28u);\n  result = v25 ^ v51;\n  if ( v25 != v51 )\nLABEL_102:\n    sub_615E();\n  return result;\n}\n", 
            "funcStartAddr": "0x414a0L", 
            "funcEndAddr": "0x41b5fL", 
            "funcName": "sub_414A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41C00(__int64 a1)\n{\n  *(_QWORD *)(a1 - 44) = 0LL;\n  *(_DWORD *)(a1 - 36) = 0;\n  *(_QWORD *)(a1 - 152) = 0LL;\n  *(_QWORD *)(a1 - 144) = 0LL;\n  *(_BYTE *)(a1 - 23) = 1;\n}\n", 
            "funcStartAddr": "0x41c00L", 
            "funcEndAddr": "0x41c2aL", 
            "funcName": "sub_41C00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41C40(__int64 a1)\n{\n  sub_47E30(a1 - 152, 168LL);\n  sub_114C0((void *)(a1 - 152));\n}\n", 
            "funcStartAddr": "0x41c40L", 
            "funcEndAddr": "0x41c5eL", 
            "funcName": "sub_41C40"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall sub_41CD0(__m128i *a1)\n{\n  const __m128i *v1; // rax\n  __m128i v2; // xmm0\n  __int64 v3; // rax\n  __int64 vars0; // [rsp+0h] [rbp+0h]\n  unsigned __int64 vars8; // [rsp+8h] [rbp+8h]\n\n  vars8 = __readfsqword(0x28u);\n  time(&vars0);\n  if ( vars0 == -1 )\n    __assert_fail(\"t != ((time_t)-1)\", \"time.c\", 0xEu, \"ltime\");\n  v1 = (const __m128i *)localtime(&vars0);\n  *a1 = _mm_loadu_si128(v1);\n  a1[1] = _mm_loadu_si128(v1 + 1);\n  v2 = _mm_loadu_si128(v1 + 2);\n  v3 = v1[3].m128i_i64[0];\n  a1[2] = v2;\n  a1[3].m128i_i64[0] = v3;\n  return a1;\n}\n", 
            "funcStartAddr": "0x41cd0L", 
            "funcEndAddr": "0x41d62L", 
            "funcName": "sub_41CD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41D70(_QWORD *a1)\n{\n  if ( a1 )\n  {\n    sub_41D70(a1[1]);\n    sub_41D70(a1[2]);\n    sub_41D70(a1[3]);\n    sub_41D70(a1[4]);\n    sub_114C0(a1);\n  }\n}\n", 
            "funcStartAddr": "0x41d70L", 
            "funcEndAddr": "0x41db1L", 
            "funcName": "sub_41D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41DC0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = (unsigned int)(*(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 44));\n  if ( *(_QWORD *)(a1 + 56) )\n    result = (unsigned int)(result + 1);\n  if ( *(_QWORD *)(a1 + 64) )\n    result = (unsigned int)(result + 1);\n  if ( *(_QWORD *)(a1 + 72) )\n    result = (unsigned int)(result + 1);\n  return result;\n}\n", 
            "funcStartAddr": "0x41dc0L", 
            "funcEndAddr": "0x41decL", 
            "funcName": "sub_41DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42570(void **a1, int a2)\n{\n  __int64 v2; // r14\n  signed __int64 v3; // r13\n  int v4; // er12\n  _QWORD *v5; // rbx\n  int v6; // eax\n  __int64 v7; // rdx\n  _QWORD *v8; // rdx\n  _QWORD *v9; // rax\n  _QWORD *v10; // r12\n  __int64 v11; // r15\n  _QWORD *v12; // rax\n  _QWORD *v13; // rdx\n  _QWORD *v14; // rcx\n  __int64 v15; // rdx\n  int v16; // er12\n  int v17; // eax\n  int v18; // eax\n  __int64 v19; // rdi\n  signed int v20; // ebp\n  __int64 *v21; // rax\n  __int64 *v22; // rdx\n  signed int v23; // esi\n  __int64 v24; // rcx\n  signed __int64 v25; // rdx\n  int v26; // edx\n  __int64 v27; // rbp\n  signed __int64 v28; // r8\n  signed int v29; // esi\n  signed __int64 v30; // rdi\n  int v31; // er9\n  __int64 *v32; // rax\n  __int64 v33; // rax\n  __int64 v34; // rdi\n  __int64 v35; // rax\n  __int64 v36; // rdi\n  signed __int64 v37; // rax\n  signed __int64 v38; // rdi\n  int v39; // eax\n  __int64 v40; // r8\n  _QWORD *v41; // rdx\n  signed __int64 v43; // r9\n  __int64 v44; // rcx\n  int v45; // esi\n  __int64 v46; // r15\n  __int64 *v47; // rax\n  int v48; // edi\n  __int64 *v49; // rax\n  int v50; // edi\n  __int64 *v51; // rax\n  int v52; // eax\n  __int64 v53; // r8\n  void *v54; // rdx\n  __int64 v55; // rax\n  __int64 v56; // rdx\n  __int64 v57; // rsi\n  __int64 v58; // rsi\n  __int64 v59; // rdi\n  signed __int64 v60; // rax\n  __int64 v61; // rdx\n  int v62; // edx\n  __int64 *v63; // rax\n  __int64 v64; // rsi\n  _QWORD *v65; // rax\n  signed __int64 v66; // rdx\n  signed __int64 v67; // rax\n  bool v68; // zf\n  __int64 v69; // rcx\n  signed __int64 v70; // r10\n  int v71; // eax\n  bool v72; // cf\n  signed __int64 v73; // r11\n  signed __int64 v74; // rax\n  __int64 *v75; // rdi\n  signed __int64 v76; // rsi\n  int v77; // eax\n  __int64 v78; // r8\n  __int64 v79; // r9\n  int v80; // er12\n  __int64 v81; // rcx\n  int v82; // eax\n  __int64 v83; // r8\n  void *v84; // rdi\n  _QWORD *v85; // [rsp+8h] [rbp-40h]\n\n  v2 = 0LL;\n  v3 = -1LL;\n  v4 = a2;\n  v5 = *a1;\n  v85 = a1;\n  while ( 1 )\n  {\nLABEL_2:\n    if ( !v5 )\n    {\nLABEL_6:\n      if ( v2 )\n      {\n        if ( (_DWORD)v3 == -1 )\n          return 0LL;\n      }\n      else\n      {\n        v2 = *(_QWORD *)&word_38[4 * (signed int)v3];\n        if ( (_DWORD)v3 == -1 )\n          return 0LL;\n      }\nLABEL_8:\n      v8 = (_QWORD *)*v5;\n      v9 = (_QWORD *)v5[1];\n      if ( !*v5 )\n        goto LABEL_35;\nLABEL_9:\n      if ( v9 || !v5[8] )\n        goto LABEL_10;\n      v9 = v8;\nLABEL_37:\n      if ( (_DWORD)v3 != 2 )\n      {\n        v23 = v3 + 1;\n        v24 = v5[(signed int)v3 + 8];\n        if ( !v24 )\n          goto LABEL_43;\n        v25 = (signed __int64)&v5[v3];\n        while ( 1 )\n        {\n          *(_QWORD *)(v25 + 56) = v24;\n          if ( v23 == 2 )\n            break;\n          v25 += 8LL;\n          v24 = *(_QWORD *)(v25 + 64);\n          v23 = 2;\n          if ( !v24 )\n          {\n            v3 = 1LL;\n            goto LABEL_43;\n          }\n        }\n      }\n      v3 = 2LL;\nLABEL_43:\n      v5[v3 + 7] = 0LL;\n      if ( v9 )\n      {\n        while ( 1 )\n        {\n          v26 = 0;\n          if ( (_QWORD *)v9[1] != v5 )\n          {\n            v26 = 1;\n            if ( (_QWORD *)v9[2] != v5 )\n              v26 = (v9[3] != (_QWORD)v5) + 2;\n          }\n          v5 = v9;\n          --*((_DWORD *)v9 + v26 + 10);\n          if ( !*v9 )\n            break;\n          v9 = (_QWORD *)*v9;\n        }\n      }\n      return v2;\n    }\n    while ( 1 )\n    {\n      v6 = *((_DWORD *)v5 + 10);\n      if ( v6 > v4 )\n      {\n        v7 = v5[1];\n        if ( !*(_QWORD *)(v7 + 64) )\n        {\n          v27 = v5[2];\n          v28 = 0LL;\n          v29 = 1;\n          if ( v27 )\n            goto LABEL_54;\n          v45 = 0;\n          v46 = 0LL;\nLABEL_69:\n          *(_QWORD *)(v27 + 32) = *(_QWORD *)(v27 + 16);\n          *(_DWORD *)(v27 + 52) = *(_DWORD *)(v27 + 44);\n          *(_QWORD *)(v27 + 72) = *(_QWORD *)(v27 + 56);\n          *(_QWORD *)(v27 + 24) = *(_QWORD *)(v27 + 8);\n          *(_DWORD *)(v27 + 48) = *(_DWORD *)(v27 + 40);\n          v48 = *(_DWORD *)(v7 + 44);\n          *(_QWORD *)(v27 + 64) = v5[v46 + 7];\n          v49 = *(__int64 **)(v7 + 16);\n          *(_DWORD *)(v27 + 44) = v48;\n          *(_QWORD *)(v27 + 16) = v49;\n          if ( v49 )\n            *v49 = v27;\n          v50 = *(_DWORD *)(v7 + 40);\n          *(_QWORD *)(v27 + 56) = *(_QWORD *)(v7 + 56);\n          v51 = *(__int64 **)(v7 + 8);\n          *(_DWORD *)(v27 + 40) = v50;\n          *(_QWORD *)(v27 + 8) = v51;\n          if ( v51 )\n            *v51 = v27;\n          v52 = sub_41DC0(v27);\n          *((_DWORD *)v5 + v53 + 10) = v52;\n          sub_114C0(v54);\n          v55 = v46;\n          v56 = v45 + 1;\n          while ( 1 )\n          {\n            v58 = v5[v56 + 1];\n            v59 = (signed int)v55;\n            if ( !v58 )\n              break;\n            v5[v55 + 1] = v58;\n            *((_DWORD *)v5 + v55 + 10) = *((_DWORD *)v5 + v56 + 10);\n            if ( (_DWORD)v55 == 2 )\n            {\n              v5[9] = 0LL;\nLABEL_106:\n              v68 = v5[7] == 0LL;\n              v5[4] = 0LL;\n              *((_DWORD *)v5 + 13) = 0;\n              if ( v68 )\n              {\nLABEL_107:\n                v84 = v5;\n                v5 = (_QWORD *)v27;\n                *v85 = v27;\n                *(_QWORD *)v27 = 0LL;\n                sub_114C0(v84);\n                goto LABEL_2;\n              }\nLABEL_78:\n              v5 = (_QWORD *)v27;\n              goto LABEL_2;\n            }\n            v57 = v5[v56++ + 7];\n            v5[v55++ + 7] = v57;\n            if ( (_DWORD)v55 == 3 )\n              goto LABEL_106;\n          }\n          v60 = (signed __int64)&v5[(signed int)v55];\n          *(_QWORD *)(v60 + 8) = 0LL;\n          *((_DWORD *)v5 + v59 + 10) = 0;\n          *(_QWORD *)(v60 + 56) = 0LL;\n          if ( !v5[7] )\n            goto LABEL_107;\n          goto LABEL_78;\n        }\n        goto LABEL_5;\n      }\n      v4 -= v6 + 1;\n      if ( v4 < 0 )\n        break;\n      v17 = *((_DWORD *)v5 + 11);\n      if ( v4 < v17 )\n      {\n        v7 = v5[2];\n        if ( !*(_QWORD *)(v7 + 64) )\n        {\n          v43 = 0LL;\n          v28 = 1LL;\n          goto LABEL_66;\n        }\n      }\n      else\n      {\n        v4 -= v17 + 1;\n        if ( v4 < 0 )\n        {\n          v3 = 1LL;\n          if ( !v2 )\n            v2 = v5[8];\n          goto LABEL_8;\n        }\n        v18 = *((_DWORD *)v5 + 12);\n        if ( v4 < v18 )\n        {\n          v7 = v5[3];\n          if ( !*(_QWORD *)(v7 + 64) )\n          {\n            v43 = 1LL;\n            v28 = 2LL;\nLABEL_66:\n            v44 = v5[v43 + 1];\n            if ( !*(_QWORD *)(v44 + 64) )\n            {\n              v29 = v28 + 1;\n              v27 = v5[(signed int)v28 + 2];\n              if ( !v27 )\n                goto LABEL_68;\nLABEL_54:\n              if ( !*(_QWORD *)(v27 + 64) )\n              {\n                if ( (_DWORD)v28 )\n                {\nLABEL_68:\n                  v45 = v28 - 1;\n                  v46 = (signed int)v28 - 1;\n                  v4 += *((_DWORD *)v5 + v46 + 10) + 1;\n                  v47 = &v5[v28];\n                  v7 = *v47;\n                  v27 = v47[1];\n                }\n                else\n                {\n                  v7 = v5[1];\n                  v27 = v5[2];\n                  v45 = 0;\n                  v46 = 0LL;\n                }\n                goto LABEL_69;\n              }\n              v30 = (signed __int64)&v5[v28];\n              v31 = *(_DWORD *)(v27 + 40);\n              *(_QWORD *)(v7 + 64) = *(_QWORD *)(v30 + 56);\n              v32 = *(__int64 **)(v27 + 8);\n              *(_DWORD *)(v7 + 48) = v31;\n              *(_QWORD *)(v7 + 24) = v32;\n              if ( v32 )\n                *v32 = v7;\n              *(_QWORD *)(v30 + 56) = *(_QWORD *)(v27 + 56);\n              *(_QWORD *)(v27 + 8) = *(_QWORD *)(v27 + 16);\n              *(_DWORD *)(v27 + 40) = *(_DWORD *)(v27 + 44);\n              v33 = *(_QWORD *)(v27 + 64);\n              if ( v33 )\n              {\n                v34 = *(_QWORD *)(v27 + 24);\n                *(_QWORD *)(v27 + 56) = v33;\n                v35 = *(_QWORD *)(v27 + 72);\n                *(_QWORD *)(v27 + 16) = v34;\n                *(_DWORD *)(v27 + 44) = *(_DWORD *)(v27 + 48);\n                if ( v35 )\n                {\n                  v36 = *(_QWORD *)(v27 + 32);\n                  *(_QWORD *)(v27 + 64) = v35;\n                  v37 = 3LL;\n                  *(_QWORD *)(v27 + 24) = v36;\n                  *(_DWORD *)(v27 + 48) = *(_DWORD *)(v27 + 52);\n                  v38 = 2LL;\n                }\n                else\n                {\n                  v37 = 2LL;\n                  v38 = 1LL;\n                }\n              }\n              else\n              {\n                v37 = 1LL;\n                v38 = 0LL;\n              }\n              *(_QWORD *)(v27 + 8 * v37 + 8) = 0LL;\n              *(_DWORD *)(v27 + 4 * v37 + 40) = 0;\n              *(_QWORD *)(v27 + 8 * v38 + 56) = 0LL;\n              v39 = sub_41DC0(v7);\n              *((_DWORD *)v5 + v40 + 10) = v39;\n              *((_DWORD *)v5 + v29 + 10) = sub_41DC0(v27);\n              v5 = v41;\n              goto LABEL_2;\n            }\n            goto LABEL_97;\n          }\n        }\n        else\n        {\n          v4 -= v18 + 1;\n          if ( v4 < 0 )\n          {\n            v3 = 2LL;\n            if ( !v2 )\n              v2 = v5[9];\n            goto LABEL_8;\n          }\n          v7 = v5[4];\n          if ( !*(_QWORD *)(v7 + 64) )\n          {\n            v44 = v5[3];\n            v28 = 3LL;\n            if ( !*(_QWORD *)(v44 + 64) )\n              goto LABEL_68;\n            v43 = 2LL;\nLABEL_97:\n            v70 = (signed __int64)&v5[v43];\n            v71 = 3 - (*(_QWORD *)(v44 + 72) < 1uLL);\n            v72 = *(_QWORD *)(v44 + 72) < 1uLL;\n            *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 16);\n            v73 = v44 + 8LL * v71;\n            v74 = v44 + 4LL * v71;\n            *(_DWORD *)(v7 + 48) = *(_DWORD *)(v7 + 44);\n            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 56);\n            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 8);\n            *(_DWORD *)(v7 + 44) = *(_DWORD *)(v7 + 40);\n            *(_QWORD *)(v7 + 56) = *(_QWORD *)(v70 + 56);\n            v75 = *(__int64 **)(v73 + 8);\n            *(_QWORD *)(v7 + 8) = v75;\n            *(_DWORD *)(v7 + 40) = *(_DWORD *)(v74 + 40);\n            if ( v75 )\n              *v75 = v7;\n            v76 = v44 + 8LL * (2 - v72);\n            *(_QWORD *)(v70 + 56) = *(_QWORD *)(v76 + 56);\n            *(_QWORD *)(v73 + 8) = 0LL;\n            *(_DWORD *)(v74 + 40) = 0;\n            *(_QWORD *)(v76 + 56) = 0LL;\n            v77 = sub_41DC0(v7);\n            *((_DWORD *)v5 + v78 + 10) = v77;\n            v80 = *((_DWORD *)v5 + v79 + 10) + v4;\n            v82 = sub_41DC0(v81);\n            *(_DWORD *)(v83 + 40) = v82;\n            v4 = v80 - v82;\n            goto LABEL_5;\n          }\n        }\n      }\nLABEL_5:\n      v5 = (_QWORD *)v7;\n      if ( !v7 )\n        goto LABEL_6;\n    }\n    v3 = 0LL;\n    if ( v2 )\n      goto LABEL_8;\n    v8 = (_QWORD *)*v5;\n    v2 = v5[7];\n    v9 = (_QWORD *)v5[1];\n    if ( *v5 )\n      goto LABEL_9;\nLABEL_35:\n    if ( !v5[8] )\n      break;\n    if ( !v9 )\n      goto LABEL_37;\nLABEL_10:\n    v10 = &v5[(signed int)v3];\n    v11 = v10[1];\n    v12 = (_QWORD *)v10[1];\n    if ( *(_QWORD *)(v11 + 64) )\n    {\n      while ( 1 )\n      {\n        v14 = (_QWORD *)v12[1];\n        if ( !v14 )\n          break;\n        v13 = (_QWORD *)v12[4];\n        if ( v13 || (v13 = (_QWORD *)v12[3]) != 0LL )\n        {\n          v12 = v13;\n        }\n        else\n        {\n          v12 = (_QWORD *)v12[2];\n          if ( !v12 )\n            v12 = v14;\n        }\n      }\n      v15 = v12[9];\n      if ( !v15 )\n      {\n        v15 = v12[8];\n        if ( !v15 )\n          v15 = v12[7];\n      }\n      v10[7] = v15;\n      v16 = *((_DWORD *)v5 + (signed int)v3 + 10);\n      v5 = (_QWORD *)v11;\n      v4 = v16 - 1;\n    }\n    else\n    {\n      v19 = v10[2];\n      v20 = v3 + 1;\n      v21 = *(__int64 **)(v19 + 8);\n      if ( *(_QWORD *)(v19 + 64) )\n      {\n        v22 = (__int64 *)v10[2];\n        while ( v21 )\n        {\n          v22 = v21;\n          v21 = (__int64 *)v21[1];\n        }\n        v5 = (_QWORD *)v10[2];\n        v10[7] = v22[7];\n        v4 = 0;\n        continue;\n      }\n      v61 = v10[7];\n      *(_QWORD *)(v11 + 24) = v21;\n      *(_QWORD *)(v11 + 64) = v61;\n      *(_DWORD *)(v11 + 48) = *(_DWORD *)(v19 + 40);\n      if ( v21 )\n        *v21 = v11;\n      v62 = *(_DWORD *)(v19 + 44);\n      *(_QWORD *)(v11 + 72) = *(_QWORD *)(v19 + 56);\n      v63 = *(__int64 **)(v19 + 16);\n      *(_DWORD *)(v11 + 52) = v62;\n      *(_QWORD *)(v11 + 32) = v63;\n      if ( v63 )\n        *v63 = v11;\n      sub_114C0((void *)v19);\n      *((_DWORD *)v5 + (signed int)v3 + 10) = sub_41DC0(v11);\n      if ( (_DWORD)v3 == 2 )\n      {\nLABEL_90:\n        v20 = 3;\n        v67 = 2LL;\n      }\n      else\n      {\n        v64 = v10[8];\n        if ( v64 )\n        {\n          v65 = &v5[(signed int)v3];\n          v66 = (signed __int64)v5 + 4 * ((signed int)v3 + 2);\n          while ( 1 )\n          {\n            v65[7] = v64;\n            v65[2] = v65[3];\n            *(_DWORD *)(v66 + 36) = *(_DWORD *)(v66 + 40);\n            if ( v20 == 2 )\n              goto LABEL_90;\n            v64 = v65[9];\n            v66 += 4LL;\n            ++v65;\n            v20 = 2;\n            if ( !v64 )\n            {\n              v67 = 1LL;\n              goto LABEL_91;\n            }\n          }\n        }\n        v67 = (signed int)v3;\n      }\nLABEL_91:\n      v5[v67 + 7] = 0LL;\n      v68 = v5[7] == 0LL;\n      v69 = v20;\n      v5[v69 + 1] = 0LL;\n      *((_DWORD *)v5 + v69 + 10) = 0;\n      if ( v68 )\n      {\n        *v85 = v11;\n        *(_QWORD *)v11 = 0LL;\n        sub_114C0(v5);\n      }\n      v5 = (_QWORD *)v11;\n      v4 = *(_DWORD *)(v11 + 40) + *(_DWORD *)(v11 + 44) + 1;\n    }\n  }\n  if ( v9 )\n    goto LABEL_10;\n  sub_114C0(v5);\n  *v85 = 0LL;\n  return v2;\n}\n", 
            "funcStartAddr": "0x42570L", 
            "funcEndAddr": "0x42d87L", 
            "funcName": "sub_42570"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_42D90(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_11440(1uLL, 0x10uLL, 0LL);\n  *result = 0LL;\n  result[1] = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x42d90L", 
            "funcEndAddr": "0x42db2L", 
            "funcName": "sub_42D90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42DC0(_QWORD **a1)\n{\n  sub_41D70(*a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x42dc0L", 
            "funcEndAddr": "0x42dd5L", 
            "funcName": "sub_42DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42DE0(__int64 *a1)\n{\n  __int64 v1; // rdi\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( v1 )\n    result = sub_41DC0(v1);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x42de0L", 
            "funcEndAddr": "0x42df3L", 
            "funcName": "sub_42DE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n\n__int64 __fastcall sub_42E00(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  signed int v3; // er12\n  __int64 v4; // rbx\n  int v5; // eax\n  int v6; // eax\n  _QWORD *v7; // rbp\n  signed __int64 v8; // r15\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // r15\n  signed __int64 v12; // r8\n  signed __int64 v13; // r13\n  _QWORD *v14; // r14\n  signed __int64 v15; // r15\n  __int64 v16; // rdi\n  int v17; // esi\n  __int64 v18; // rdx\n  __int64 v19; // rax\n  __int64 v20; // r11\n  int v21; // er10\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 *v24; // rax\n  __int64 *v25; // rax\n  __int64 *v26; // rax\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // r12\n  __int64 v30; // rax\n  int v31; // eax\n  signed int v32; // eax\n  signed int v33; // eax\n  signed int v34; // eax\n  __int64 v35; // rcx\n  int v36; // edx\n  int v37; // edx\n  _QWORD *v38; // rax\n  _QWORD *v39; // rax\n  int v40; // eax\n  __int64 v41; // rdx\n  _QWORD *v42; // rcx\n  int v43; // esi\n  _QWORD *v44; // rax\n  __int64 v45; // rax\n  _QWORD *v46; // rcx\n  int v47; // eax\n  __int64 v48; // rcx\n  __int64 v49; // rax\n  int v50; // eax\n  int v51; // esi\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rsi\n  int v55; // ecx\n  __int64 v56; // rsi\n  signed __int64 v57; // rdx\n  int v59; // [rsp+0h] [rbp-58h]\n  int v60; // [rsp+4h] [rbp-54h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+10h] [rbp-48h]\n  __int64 *v63; // [rsp+18h] [rbp-40h]\n\n  if ( !a1[1] )\n    return 0LL;\n  v57 = 0xFFFFFFFFLL;\n  v2 = a2;\n  v3 = -1;\n  v4 = *a1;\n  if ( !*a1 )\n  {\n    v44 = (_QWORD *)sub_11440(1uLL, 0x50uLL, 0LL);\n    *a1 = (__int64)v44;\n    v44[9] = 0LL;\n    v44[8] = 0LL;\n    *v44 = 0LL;\n    v44[1] = 0LL;\n    v44[2] = 0LL;\n    v44[3] = 0LL;\n    v44[4] = 0LL;\n    v44[5] = 0LL;\n    v44[6] = 0LL;\n    v44[7] = a2;\n    return a2;\n  }\n  while ( v3 >= 0 )\n  {\n    v7 = *(_QWORD **)(v4 + 8);\n    if ( v7 )\n    {\n      v32 = *(_DWORD *)(v4 + 40);\n      if ( v32 >= v3 )\n        goto LABEL_15;\n      v3 -= v32 + 1;\n      v33 = *(_DWORD *)(v4 + 44);\n      if ( v33 >= v3 )\n      {\nLABEL_45:\n        v7 = *(_QWORD **)(v4 + 16);\n        v8 = 16LL;\n        goto LABEL_14;\n      }\n      v3 -= v33 + 1;\n      v34 = *(_DWORD *)(v4 + 48);\n      if ( v34 < v3 )\n      {\n        v3 -= v34 + 1;\n        if ( *(_DWORD *)(v4 + 52) < v3 )\n          return 0LL;\nLABEL_13:\n        v7 = *(_QWORD **)(v4 + 32);\n        v8 = 32LL;\n        goto LABEL_14;\n      }\n      goto LABEL_50;\n    }\n    v7 = *(_QWORD **)(v4 + 8LL * v3 + 8);\n    v8 = 8LL * v3 + 8;\nLABEL_14:\n    if ( !v7 )\n      goto LABEL_19;\nLABEL_15:\n    v4 = (__int64)v7;\n  }\n  v9 = ((__int64 (__fastcall *)(__int64, _QWORD, signed __int64))a1[1])(a2, *(_QWORD *)(v4 + 56), v57);\n  if ( v9 >= 0 )\n  {\n    if ( !v9 )\n      return *(_QWORD *)(v4 + 56);\n    if ( !*(_QWORD *)(v4 + 64) )\n      goto LABEL_45;\n    v5 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n    if ( v5 < 0 )\n      goto LABEL_45;\n    if ( !v5 )\n      return *(_QWORD *)(v4 + 64);\n    if ( *(_QWORD *)(v4 + 72) )\n    {\n      v6 = ((__int64 (__fastcall *)(__int64))a1[1])(a2);\n      if ( v6 >= 0 )\n      {\n        if ( !v6 )\n          return *(_QWORD *)(v4 + 72);\n        goto LABEL_13;\n      }\n    }\nLABEL_50:\n    v7 = *(_QWORD **)(v4 + 24);\n    v8 = 24LL;\n    goto LABEL_14;\n  }\n  v7 = *(_QWORD **)(v4 + 8);\n  v8 = 8LL;\n  if ( v7 )\n    goto LABEL_15;\nLABEL_19:\n  v10 = *(_QWORD *)(v4 + 64);\n  v11 = v4 + v8;\n  v12 = v4 + 8;\n  if ( !v10 )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\nLABEL_58:\n    if ( v11 == v12 )\n    {\n      v47 = *(_DWORD *)(v28 + 44);\n      v48 = *(_QWORD *)(v28 + 16);\n      *(_QWORD *)(v28 + 8) = v29;\n      *(_QWORD *)(v28 + 16) = v4;\n      *(_DWORD *)(v28 + 48) = v47;\n      v49 = *(_QWORD *)(v28 + 56);\n      *(_QWORD *)(v28 + 24) = v48;\n      *(_QWORD *)(v28 + 64) = v49;\n      *(_DWORD *)(v28 + 44) = v59;\n      *(_QWORD *)(v28 + 56) = v61;\n      *(_DWORD *)(v28 + 40) = v60;\n      v39 = (_QWORD *)v29;\n      v29 = v4;\n      v4 = v48;\n    }\n    else\n    {\n      *(_QWORD *)(v28 + 24) = v4;\n      *(_QWORD *)(v28 + 16) = v29;\n      *(_DWORD *)(v28 + 48) = v59;\n      *(_QWORD *)(v28 + 64) = v61;\n      *(_DWORD *)(v28 + 44) = v60;\n      v39 = *(_QWORD **)(v28 + 8);\n    }\n    goto LABEL_60;\n  }\n  if ( !*(_QWORD *)(v4 + 72) )\n  {\n    v28 = v4;\n    v29 = 0LL;\n    v4 = 0LL;\n    v61 = a2;\n    v59 = 0;\n    v60 = 0;\n    goto LABEL_78;\n  }\n  v61 = a2;\n  v63 = a1;\n  v62 = a2;\n  v59 = 0;\n  v13 = v11;\n  v60 = 0;\n  v14 = 0LL;\n  v15 = v4 + 8;\n  while ( 2 )\n  {\n    v29 = sub_11440(1uLL, 0x50uLL, 0LL);\n    *(_QWORD *)v29 = *(_QWORD *)v4;\n    if ( v13 == v15 )\n    {\n      *(_QWORD *)(v29 + 8) = v7;\n      *(_QWORD *)(v29 + 16) = v14;\n      *(_DWORD *)(v29 + 40) = v60;\n      *(_QWORD *)(v29 + 56) = v61;\n      *(_DWORD *)(v29 + 44) = v59;\n      *(_QWORD *)(v29 + 64) = *(_QWORD *)(v4 + 56);\n      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 16);\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 44);\n      v30 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v30;\n      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 48);\n      v19 = *(_QWORD *)(v4 + 72);\n      goto LABEL_44;\n    }\n    v16 = *(_QWORD *)(v4 + 8);\n    v17 = *(_DWORD *)(v4 + 40);\n    v18 = *(_QWORD *)(v4 + 56);\n    v19 = *(_QWORD *)(v4 + 72);\n    if ( v13 == v4 + 16 )\n    {\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 16) = v7;\n      *(_QWORD *)(v29 + 24) = v14;\n      *(_DWORD *)(v29 + 44) = v60;\n      v7 = *(_QWORD **)(v4 + 24);\n      *(_QWORD *)(v29 + 64) = v61;\n      *(_DWORD *)(v29 + 48) = v59;\n      v35 = *(_QWORD *)(v4 + 64);\n      v36 = *(_DWORD *)(v4 + 48);\n      *(_QWORD *)(v4 + 8) = v7;\n      v61 = v35;\n      *(_DWORD *)(v4 + 40) = v36;\nLABEL_44:\n      *(_QWORD *)(v4 + 56) = v19;\n      v14 = *(_QWORD **)(v4 + 32);\n      v31 = *(_DWORD *)(v4 + 52);\n      *(_QWORD *)(v4 + 16) = v14;\n      *(_DWORD *)(v4 + 44) = v31;\n    }\n    else\n    {\n      v20 = *(_QWORD *)(v4 + 16);\n      v21 = *(_DWORD *)(v4 + 44);\n      v22 = *(_QWORD *)(v4 + 64);\n      *(_QWORD *)(v29 + 8) = v16;\n      *(_DWORD *)(v29 + 40) = v17;\n      *(_QWORD *)(v29 + 56) = v18;\n      *(_QWORD *)(v29 + 16) = v20;\n      *(_DWORD *)(v29 + 44) = v21;\n      *(_QWORD *)(v29 + 64) = v22;\n      if ( v13 == v4 + 24 )\n      {\n        *(_QWORD *)(v29 + 24) = v7;\n        v7 = v14;\n        *(_DWORD *)(v29 + 48) = v60;\n        *(_QWORD *)(v4 + 56) = v19;\n        v37 = *(_DWORD *)(v4 + 52);\n        v38 = *(_QWORD **)(v4 + 32);\n        *(_QWORD *)(v4 + 8) = v14;\n        *(_DWORD *)(v4 + 40) = v59;\n        *(_DWORD *)(v4 + 44) = v37;\n        *(_QWORD *)(v4 + 16) = v38;\n        v14 = v38;\n      }\n      else\n      {\n        *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 24);\n        *(_DWORD *)(v29 + 48) = *(_DWORD *)(v4 + 48);\n        *(_DWORD *)(v4 + 40) = v60;\n        v23 = v61;\n        *(_QWORD *)(v4 + 8) = v7;\n        *(_QWORD *)(v4 + 16) = v14;\n        v61 = v19;\n        *(_QWORD *)(v4 + 56) = v23;\n        *(_DWORD *)(v4 + 44) = v59;\n      }\n    }\n    *(_QWORD *)(v4 + 24) = 0LL;\n    *(_QWORD *)(v4 + 32) = 0LL;\n    v24 = *(__int64 **)(v29 + 8);\n    *(_QWORD *)(v29 + 32) = 0LL;\n    *(_QWORD *)(v4 + 48) = 0LL;\n    *(_DWORD *)(v29 + 52) = 0;\n    *(_QWORD *)(v4 + 64) = 0LL;\n    *(_QWORD *)(v4 + 72) = 0LL;\n    *(_QWORD *)(v29 + 72) = 0LL;\n    if ( v24 )\n      *v24 = v29;\n    v25 = *(__int64 **)(v29 + 16);\n    if ( v25 )\n      *v25 = v29;\n    v26 = *(__int64 **)(v29 + 24);\n    if ( v26 )\n      *v26 = v29;\n    if ( v7 )\n      *v7 = v4;\n    if ( v14 )\n      *v14 = v4;\n    v60 = sub_41DC0(v29);\n    v27 = sub_41DC0(v4);\n    v28 = *(_QWORD *)v4;\n    v59 = v27;\n    if ( !*(_QWORD *)v4 )\n    {\n      v2 = v62;\n      v45 = sub_11440(1uLL, 0x50uLL, 0LL);\n      *v63 = v45;\n      *(_QWORD *)(v45 + 8) = v29;\n      *(_QWORD *)(v45 + 16) = v4;\n      *(_QWORD *)(v45 + 64) = 0LL;\n      *(_DWORD *)(v45 + 40) = v60;\n      *(_QWORD *)(v45 + 24) = 0LL;\n      *(_QWORD *)(v45 + 72) = 0LL;\n      *(_QWORD *)(v45 + 32) = 0LL;\n      *(_QWORD *)(v45 + 48) = 0LL;\n      *(_QWORD *)(v45 + 56) = v61;\n      *(_QWORD *)v45 = 0LL;\n      *(_DWORD *)(v45 + 44) = v59;\n      *(_QWORD *)v29 = v45;\n      *(_QWORD *)v4 = v45;\n      return v2;\n    }\n    v15 = v28 + 8;\n    v13 = v28 + 8;\n    if ( *(_QWORD *)(v28 + 8) != v4\n      && (v13 = v28 + 16, *(_QWORD *)(v28 + 16) != v4)\n      && (v13 = v28 + 32, *(_QWORD *)(v28 + 24) == v4) )\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      v13 = v28 + 24;\n      if ( !v10 )\n      {\nLABEL_57:\n        v12 = v28 + 8;\n        v11 = v13;\n        v2 = v62;\n        goto LABEL_58;\n      }\n    }\n    else\n    {\n      v10 = *(_QWORD *)(v28 + 64);\n      if ( !v10 )\n        goto LABEL_57;\n    }\n    v7 = (_QWORD *)v29;\n    v14 = (_QWORD *)v4;\n    if ( *(_QWORD *)(v28 + 72) )\n    {\n      v4 = *(_QWORD *)v4;\n      continue;\n    }\n    break;\n  }\n  v12 = v28 + 8;\n  v11 = v13;\n  v2 = v62;\nLABEL_78:\n  if ( v11 == v12 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v50 = *(_DWORD *)(v28 + 44);\n    v51 = *(_DWORD *)(v28 + 48);\n    v52 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 8) = v29;\n    *(_DWORD *)(v28 + 48) = v50;\n    v53 = *(_QWORD *)(v28 + 56);\n    *(_DWORD *)(v28 + 52) = v51;\n    v54 = *(_QWORD *)(v28 + 16);\n    *(_QWORD *)(v28 + 32) = v52;\n    *(_QWORD *)(v28 + 16) = v4;\n    *(_QWORD *)(v28 + 64) = v53;\n    *(_QWORD *)(v28 + 24) = v54;\n    *(_DWORD *)(v28 + 44) = v59;\n    *(_QWORD *)(v28 + 56) = v61;\n    *(_DWORD *)(v28 + 40) = v60;\n    v39 = (_QWORD *)v4;\n    v4 = v52;\n    v46 = (_QWORD *)v29;\n    v29 = v54;\n  }\n  else if ( v11 == v28 + 16 )\n  {\n    *(_QWORD *)(v28 + 72) = v10;\n    v55 = *(_DWORD *)(v28 + 48);\n    v56 = *(_QWORD *)(v28 + 24);\n    *(_QWORD *)(v28 + 16) = v29;\n    *(_QWORD *)(v28 + 24) = v4;\n    *(_DWORD *)(v28 + 48) = v59;\n    *(_DWORD *)(v28 + 52) = v55;\n    *(_QWORD *)(v28 + 32) = v56;\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 64) = v61;\n    *(_DWORD *)(v28 + 44) = v60;\n    v39 = (_QWORD *)v29;\n    v29 = v4;\n    v4 = v56;\n  }\n  else\n  {\n    v46 = *(_QWORD **)(v28 + 8);\n    *(_QWORD *)(v28 + 32) = v4;\n    *(_QWORD *)(v28 + 24) = v29;\n    *(_DWORD *)(v28 + 52) = v59;\n    *(_QWORD *)(v28 + 72) = v61;\n    *(_DWORD *)(v28 + 48) = v60;\n    v39 = *(_QWORD **)(v28 + 16);\n  }\n  if ( v46 )\n    *v46 = v28;\nLABEL_60:\n  if ( v39 )\n    *v39 = v28;\n  if ( v29 )\n    *(_QWORD *)v29 = v28;\n  if ( v4 )\n    *(_QWORD *)v4 = v28;\n  if ( *(_QWORD *)v28 )\n  {\n    do\n    {\n      v40 = sub_41DC0(v28);\n      v43 = 0;\n      if ( v42[1] != v41 )\n      {\n        v43 = 1;\n        if ( v42[2] != v41 )\n          v43 = (v42[3] != v41) + 2;\n      }\n      v28 = (__int64)v42;\n      *((_DWORD *)v42 + v43 + 10) = v40;\n    }\n    while ( *v42 );\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x42350L", 
            "funcEndAddr": "0x42565L", 
            "funcName": "sub_42E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_42E40(__int64 *a1, signed int a2)\n{\n  __int64 v2; // rdx\n  signed int v3; // eax\n  signed int v4; // eax\n  signed int v6; // eax\n\n  if ( a2 < 0 || !*a1 || a2 >= (signed int)sub_41DC0(*a1) )\n    return 0LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v3 = *(_DWORD *)(v2 + 40);\n      if ( v3 <= a2 )\n        break;\n      v2 = *(_QWORD *)(v2 + 8);\nLABEL_6:\n      if ( !v2 )\n        return 0LL;\n    }\n    a2 -= v3 + 1;\n    if ( a2 < 0 )\n      return *(_QWORD *)(v2 + 56);\n    v4 = *(_DWORD *)(v2 + 44);\n    if ( v4 <= a2 )\n      break;\n    v2 = *(_QWORD *)(v2 + 16);\n    if ( !v2 )\n      return 0LL;\n  }\n  a2 -= v4 + 1;\n  if ( a2 < 0 )\n    return *(_QWORD *)(v2 + 64);\n  v6 = *(_DWORD *)(v2 + 48);\n  if ( v6 > a2 )\n  {\n    v2 = *(_QWORD *)(v2 + 24);\n    goto LABEL_6;\n  }\n  a2 -= v6 + 1;\n  if ( a2 >= 0 )\n  {\n    v2 = *(_QWORD *)(v2 + 32);\n    goto LABEL_6;\n  }\n  return *(_QWORD *)(v2 + 72);\n}\n", 
            "funcStartAddr": "0x42e40L", 
            "funcEndAddr": "0x42ec7L", 
            "funcName": "sub_42E40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_42ED0(__int64 a1, int a2)\n{\n  _QWORD *v2; // rcx\n  int v3; // eax\n  int v4; // esi\n  int v5; // eax\n  int v6; // edx\n  int *v7; // rsi\n  int v8; // er8\n  int v9; // eax\n  int v10; // eax\n  __int64 v11; // rsi\n  int v12; // edx\n  __int64 v13; // r8\n  _DWORD *v14; // rax\n  signed __int64 v15; // rcx\n\n  v2 = *(_QWORD **)(a1 + 32);\n  if ( !v2 )\n  {\n    *(_QWORD *)a1 = 0LL;\n    *(_DWORD *)(a1 + 8) = 0;\n    return;\n  }\n  v3 = *(_DWORD *)(a1 + 20);\n  if ( v3 == -1 )\n  {\n    v6 = *(_DWORD *)(a1 + 24);\n    *(_DWORD *)(a1 + 12) = 0;\n  }\n  else\n  {\n    if ( !a2 )\n      __assert_fail(\"direction\", \"tree234.c\", 0x27Fu, \"search234_step\");\n    if ( a2 <= 0 )\n    {\n      v4 = v3 - 1;\n      v5 = *(_DWORD *)(a1 + 12);\n      *(_DWORD *)(a1 + 16) = v4;\n    }\n    else\n    {\n      v4 = *(_DWORD *)(a1 + 16);\n      v5 = v3 + 1;\n      *(_DWORD *)(a1 + 12) = v5;\n    }\n    v6 = *(_DWORD *)(a1 + 24);\n    if ( v5 <= v4 )\n      goto LABEL_18;\n    if ( v5 > 0 )\n    {\n      v7 = (int *)(v2 + 5);\n      do\n      {\n        v8 = *v7;\n        ++v7;\n        v6 += v8 + 1;\n      }\n      while ( v7 != (int *)((char *)v2 + 4 * (unsigned int)(v5 - 1) + 44) );\n      *(_DWORD *)(a1 + 24) = v6;\n    }\n    v2 = (_QWORD *)v2[v5 + 1];\n    *(_DWORD *)(a1 + 20) = -1;\n    *(_DWORD *)(a1 + 12) = 0;\n    *(_QWORD *)(a1 + 32) = v2;\n    if ( !v2 )\n    {\n      *(_DWORD *)(a1 + 16) = 0;\n      *(_QWORD *)a1 = 0LL;\n      *(_DWORD *)(a1 + 8) = v6;\n      return;\n    }\n  }\n  v9 = -1;\n  if ( v2[7] )\n  {\n    if ( v2[8] )\n      v9 = (v2[9] != 0LL) + 1;\n    else\n      v9 = 0;\n  }\n  *(_DWORD *)(a1 + 16) = v9;\nLABEL_18:\n  v10 = (*(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 16)) / 2;\n  v11 = v10;\n  v12 = v10 + v6;\n  v13 = v2[v10 + 7];\n  *(_DWORD *)(a1 + 20) = v10;\n  *(_DWORD *)(a1 + 8) = v12;\n  *(_QWORD *)a1 = v13;\n  if ( v10 >= 0 )\n  {\n    v14 = v2 + 5;\n    v15 = (signed __int64)v2 + 4 * v11 + 44;\n    do\n    {\n      v12 += *v14;\n      ++v14;\n    }\n    while ( v14 != (_DWORD *)v15 );\n    *(_DWORD *)(a1 + 8) = v12;\n  }\n}\n", 
            "funcStartAddr": "0x42ed0L", 
            "funcEndAddr": "0x43025L", 
            "funcName": "sub_42ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43050(__int64 *a1, __int64 a2, __int64 (__fastcall *a3)(__int64), int a4, _DWORD *a5)\n{\n  int v5; // er15\n  signed int v6; // er13\n  __int64 (__fastcall *v7)(__int64); // rbp\n  __int64 v8; // rbx\n  int v9; // esi\n  signed int v10; // ecx\n  __int64 result; // rax\n  int v12; // ecx\n  _DWORD *v13; // [rsp+10h] [rbp-78h]\n  unsigned int v14; // [rsp+18h] [rbp-70h]\n  __int64 v15; // [rsp+20h] [rbp-68h]\n  int v16; // [rsp+28h] [rbp-60h]\n  __int64 v17; // [rsp+34h] [rbp-54h]\n  __int64 v18; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+48h] [rbp-40h]\n\n  v5 = a4;\n  v6 = -1;\n  v7 = a3;\n  v8 = a2;\n  v19 = __readfsqword(0x28u);\n  v13 = a5;\n  v14 = a4 - 1;\n  if ( (unsigned int)(a4 - 1) > 1 )\n    v6 = (unsigned int)(a4 - 3) <= 1;\n  if ( (a4 & 0xFFFFFFFD) != 1 && !a2 )\n    goto LABEL_30;\n  if ( !a3 )\n    v7 = (__int64 (__fastcall *)(__int64))a1[1];\n  v18 = *a1;\n  v17 = 0xFFFFFFFFLL;\n  sub_42ED0((__int64)&v15, 0);\n  if ( !v15 )\n  {\nLABEL_14:\n    if ( v5 )\n    {\n      v10 = v16;\n      if ( v14 <= 1 )\n        v10 = v16-- - 1;\n      result = sub_42E40(a1, v10);\n      if ( result )\n      {\n        if ( v13 )\n          *v13 = v12;\n      }\n    }\n    else\n    {\n      result = 0LL;\n    }\n    goto LABEL_20;\n  }\n  while ( 1 )\n  {\n    if ( v8 )\n      v9 = v7(v8);\n    else\n      v9 = -v6;\n    if ( v9 )\n      goto LABEL_13;\n    if ( (v5 & 0xFFFFFFFD) != 1 )\n      break;\n    v9 = v6;\nLABEL_13:\n    sub_42ED0((__int64)&v15, v9);\n    if ( !v15 )\n      goto LABEL_14;\n  }\n  if ( v13 )\n    *v13 = v16;\n  result = v15;\nLABEL_20:\n  if ( __readfsqword(0x28u) != v19 )\nLABEL_30:\n    __assert_fail(\"!(equal_permitted && !e)\", \"tree234.c\", 0x219u, \"findrelpos234\");\n  return result;\n}\n", 
            "funcStartAddr": "0x43050L", 
            "funcEndAddr": "0x431f6L", 
            "funcName": "sub_43050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43200(__int64 *a1, __int64 a2, __int64 (__fastcall *a3)(__int64))\n{\n  return sub_43050(a1, a2, a3, 0, 0LL);\n}\n", 
            "funcStartAddr": "0x43200L", 
            "funcEndAddr": "0x4320aL", 
            "funcName": "sub_43200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43210(__int64 *a1, __int64 a2, __int64 (__fastcall *a3)(__int64), int a4)\n{\n  return sub_43050(a1, a2, a3, a4, 0LL);\n}\n", 
            "funcStartAddr": "0x43210L", 
            "funcEndAddr": "0x43218L", 
            "funcName": "sub_43210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43230(__int64 *a1, int a2)\n{\n  __int64 v2; // rdi\n  void **v3; // rdx\n\n  if ( a2 < 0 )\n    return 0LL;\n  v2 = *a1;\n  if ( !v2 )\n    return 0LL;\n  if ( a2 >= (signed int)sub_41DC0(v2) )\n    return 0LL;\n  return sub_42570(v3, a2);\n}\n", 
            "funcStartAddr": "0x43230L", 
            "funcEndAddr": "0x43263L", 
            "funcName": "sub_43230"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43270(__int64 *a1, __int64 a2)\n{\n  __int64 result; // rax\n  int v3; // [rsp+4h] [rbp-14h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\n  v4 = __readfsqword(0x28u);\n  result = sub_43050(a1, a2, 0LL, 0, &v3);\n  if ( result )\n    result = sub_42570((void **)a1, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x43270L", 
            "funcEndAddr": "0x432c2L", 
            "funcName": "sub_43270"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_432D0(struct termios *termios_p)\n{\n  tcgetattr(2, termios_p);\n  return tcsetattr(2, 1, &::termios_p);\n}\n", 
            "funcStartAddr": "0x432d0L", 
            "funcEndAddr": "0x432fbL", 
            "funcName": "sub_432D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_43300(struct termios *termios_p)\n{\n  return tcsetattr(2, 1, termios_p);\n}\n", 
            "funcStartAddr": "0x43300L", 
            "funcEndAddr": "0x43312L", 
            "funcName": "sub_43300"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_43320(void *buf)\n{\n  __int64 v1; // rbp\n  void *v2; // rsi\n  unsigned int v3; // ebx\n  int *v4; // r12\n  int v5; // eax\n\n  v1 = sub_45090();\n  while ( 1 )\n  {\n    v2 = buf;\n    v3 = read(0, buf, 0x1FuLL);\n    if ( (v3 & 0x80000000) == 0 )\n      break;\n    v4 = __errno_location();\n    if ( *v4 != 11 )\n      break;\n    sub_450E0(v1, buf);\n    v2 = 0LL;\n    sub_45260(v1, 0LL, 1LL);\n    while ( 1 )\n    {\n      v5 = sub_452A0(v1);\n      v3 = v5;\n      if ( v5 >= 0 )\n        break;\n      if ( *v4 != 4 )\n        goto LABEL_10;\n    }\n    if ( !v5 )\n      __assert_fail(\"ret != 0\", \"unix/uxcons.c\", 0x5Du, \"block_and_read\");\n    if ( !(sub_45370(v1, 0LL) & 1) )\n      __assert_fail(\"pollwrap_check_fd_rwx(pw, fd, SELECT_R)\", \"unix/uxcons.c\", 0x62u, \"block_and_read\");\n  }\nLABEL_10:\n  sub_45110(v1, v2);\n  return v3;\n}\n", 
            "funcStartAddr": "0x43320L", 
            "funcEndAddr": "0x433f4L", 
            "funcName": "sub_43320"
        }, 
        {
            "decompiledFuncCode": "int sub_43400()\n{\n  int result; // eax\n\n  result = isatty(2);\n  if ( result )\n  {\n    byte_265680 = 1;\n    result = tcgetattr(2, &termios_p);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43400L", 
            "funcEndAddr": "0x4343cL", 
            "funcName": "sub_43400"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_43480(int status)\n{\n  nullsub_1();\n  sub_3B750();\n  exit(status);\n}\n", 
            "funcStartAddr": "0x43480L", 
            "funcEndAddr": "0x43494L", 
            "funcName": "sub_43480"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_434A0(char *s, char *a2)\n{\n  __int64 v3; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v4; // [rsp+48h] [rbp-20h]\n\n  v4 = __readfsqword(0x28u);\n  if ( byte_265680 )\n    sub_432D0((struct termios *)&v3);\n  fputs(s, stderr);\n  fwrite(\": \", 1uLL, 2uLL, stderr);\n  fputs(a2, stderr);\n  fputc(10, stderr);\n  fflush(stderr);\n  if ( byte_265680 )\n    sub_43300((struct termios *)&v3);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x434a0L", 
            "funcEndAddr": "0x43562L", 
            "funcName": "sub_434A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_438A0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  FILE *v3; // rsi\n  signed __int64 result; // rax\n  struct termios v5; // [rsp+10h] [rbp-F8h]\n  struct termios termios_p; // [rsp+50h] [rbp-B8h]\n  struct termios v7; // [rsp+90h] [rbp-78h]\n  char buf; // [rsp+D0h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+F8h] [rbp-10h]\n\n  v2 = a2;\n  v9 = __readfsqword(0x28u);\n  if ( byte_265680 )\n  {\n    sub_432D0(&v5);\n    v2 = a2;\n  }\n  __fprintf_chk(\n    stderr,\n    1LL,\n    \"The first %s supported by the server is\\n%s, which is below the configured warning threshold.\\n\",\n    v2);\n  v3 = stderr;\n  if ( !byte_262060 )\n  {\n    fputs(\"Continue with connection? (y/n) \", stderr);\n    fflush(stderr);\n    tcgetattr(0, &termios_p);\n    *(__m128i *)&v7.c_iflag = _mm_load_si128((const __m128i *)&termios_p);\n    v7.c_lflag |= 0xBu;\n    *(_QWORD *)&v7.c_cc[31] = *(_QWORD *)&termios_p.c_cc[31];\n    *(__m128i *)&v7.c_line = _mm_load_si128((const __m128i *)&termios_p.c_line);\n    v7.c_ospeed = termios_p.c_ospeed;\n    *(__m128i *)&v7.c_cc[15] = _mm_load_si128((const __m128i *)&termios_p.c_cc[15]);\n    tcsetattr(0, 0, &v7);\n    buf = 0;\n    sub_43320(&buf);\n    tcsetattr(0, 0, &termios_p);\n    if ( (buf & 0xDF) == 89 )\n    {\n      result = 1LL;\n      if ( byte_265680 )\n      {\n        sub_43300(&v5);\n        result = 1LL;\n      }\n      goto LABEL_11;\n    }\n    v3 = stderr;\n  }\n  fputs(\"Connection abandoned.\\n\", v3);\n  if ( byte_265680 )\n    sub_43300(&v5);\n  result = 0LL;\nLABEL_11:\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0x438a0L", 
            "funcEndAddr": "0x43a4eL", 
            "funcName": "sub_438A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_43A50(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  FILE *v3; // rsi\n  signed __int64 result; // rax\n  struct termios v5; // [rsp+10h] [rbp-F8h]\n  struct termios termios_p; // [rsp+50h] [rbp-B8h]\n  struct termios v7; // [rsp+90h] [rbp-78h]\n  char buf; // [rsp+D0h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+F8h] [rbp-10h]\n\n  v2 = a2;\n  v9 = __readfsqword(0x28u);\n  if ( byte_265680 )\n  {\n    sub_432D0(&v5);\n    v2 = a2;\n  }\n  __fprintf_chk(\n    stderr,\n    1LL,\n    \"The first host key type we have stored for this server\\n\"\n    \"is %s, which is below the configured warning threshold.\\n\"\n    \"The server also provides the following types of host key\\n\"\n    \"above the threshold, which we do not have stored:\\n\"\n    \"%s\\n\",\n    v2);\n  v3 = stderr;\n  if ( !byte_262060 )\n  {\n    fputs(\"Continue with connection? (y/n) \", stderr);\n    fflush(stderr);\n    tcgetattr(0, &termios_p);\n    *(__m128i *)&v7.c_iflag = _mm_load_si128((const __m128i *)&termios_p);\n    v7.c_lflag |= 0xBu;\n    *(_QWORD *)&v7.c_cc[31] = *(_QWORD *)&termios_p.c_cc[31];\n    *(__m128i *)&v7.c_line = _mm_load_si128((const __m128i *)&termios_p.c_line);\n    v7.c_ospeed = termios_p.c_ospeed;\n    *(__m128i *)&v7.c_cc[15] = _mm_load_si128((const __m128i *)&termios_p.c_cc[15]);\n    tcsetattr(0, 0, &v7);\n    buf = 0;\n    sub_43320(&buf);\n    tcsetattr(0, 0, &termios_p);\n    if ( (buf & 0xDF) == 89 )\n    {\n      result = 1LL;\n      if ( byte_265680 )\n      {\n        sub_43300(&v5);\n        result = 1LL;\n      }\n      goto LABEL_11;\n    }\n    v3 = stderr;\n  }\n  fputs(\"Connection abandoned.\\n\", v3);\n  if ( byte_265680 )\n    sub_43300(&v5);\n  result = 0LL;\nLABEL_11:\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0x43a50L", 
            "funcEndAddr": "0x43bfeL", 
            "funcName": "sub_43A50"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_43C00(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // r8\n  signed __int64 result; // rax\n  struct termios v4; // [rsp+10h] [rbp-F8h]\n  struct termios termios_p; // [rsp+50h] [rbp-B8h]\n  struct termios v6; // [rsp+90h] [rbp-78h]\n  char buf; // [rsp+D0h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+F8h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  if ( byte_265680 )\n    sub_432D0(&v4);\n  v2 = *a2;\n  if ( byte_262060 )\n  {\n    __fprintf_chk(stderr, 1LL, \"The session log file \\\"%.*s\\\" already exists.\\nLogging will not be enabled.\\n\", 4096LL);\n    fflush(stderr);\n    result = 0LL;\n  }\n  else\n  {\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"The session log file \\\"%.*s\\\" already exists.\\n\"\n      \"You can overwrite it with a new session log,\\n\"\n      \"append your session log to the end of it,\\n\"\n      \"or disable session logging for this session.\\n\"\n      \"Enter \\\"y\\\" to wipe the file, \\\"n\\\" to append to it,\\n\"\n      \"or just press Return to disable logging.\\n\"\n      \"Wipe the log file? (y/n, Return cancels logging) \",\n      4096LL);\n    fflush(stderr);\n    tcgetattr(0, &termios_p);\n    *(__m128i *)&v6.c_iflag = _mm_load_si128((const __m128i *)&termios_p);\n    v6.c_lflag |= 0xBu;\n    *(_QWORD *)&v6.c_cc[31] = *(_QWORD *)&termios_p.c_cc[31];\n    *(__m128i *)&v6.c_line = _mm_load_si128((const __m128i *)&termios_p.c_line);\n    v6.c_ospeed = termios_p.c_ospeed;\n    *(__m128i *)&v6.c_cc[15] = _mm_load_si128((const __m128i *)&termios_p.c_cc[15]);\n    tcsetattr(0, 0, &v6);\n    buf = 0;\n    sub_43320(&buf);\n    tcsetattr(0, 0, &termios_p);\n    if ( byte_265680 )\n      sub_43300(&v4);\n    result = 2LL;\n    if ( (buf & 0xDF) != 89 )\n      result = (buf & 0xDF) == 78;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x43c00L", 
            "funcEndAddr": "0x43d9cL", 
            "funcName": "sub_43C00"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_43DE0()\n{\n  __int64 v1; // [rsp+0h] [rbp-58h]\n  unsigned __int64 v2; // [rsp+48h] [rbp-10h]\n\n  v2 = __readfsqword(0x28u);\n  if ( byte_265680 )\n    sub_432D0((struct termios *)&v1);\n  fwrite(\n    \"You are loading an SSH-2 private key which has an\\n\"\n    \"old version of the file format. This means your key\\n\"\n    \"file is not fully tamperproof. Future versions of\\n\"\n    \"PuTTY may stop supporting this private key format,\\n\"\n    \"so we recommend you convert your key to the new\\n\"\n    \"format.\\n\"\n    \"\\n\"\n    \"Once the key is loaded into PuTTYgen, you can perform\\n\"\n    \"this conversion simply by saving it again.\\n\",\n    1uLL,\n    0x165uLL,\n    stderr);\n  if ( byte_265680 )\n    sub_43300((struct termios *)&v1);\n  return __readfsqword(0x28u) ^ v2;\n}\n", 
            "funcStartAddr": "0x43de0L", 
            "funcEndAddr": "0x43e4fL", 
            "funcName": "sub_43DE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_43E50(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  struct termios termios_p; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v5; // [rsp+58h] [rbp-10h]\n\n  v2 = a2;\n  v5 = __readfsqword(0x28u);\n  if ( byte_265680 )\n  {\n    sub_432D0(&termios_p);\n    v2 = a2;\n  }\n  __fprintf_chk(stderr, 1LL, \"%s\\n\", v2);\n  fflush(stderr);\n  if ( byte_265680 )\n    sub_43300(&termios_p);\n  return __readfsqword(0x28u) ^ v5;\n}\n", 
            "funcStartAddr": "0x43e50L", 
            "funcEndAddr": "0x43edbL", 
            "funcName": "sub_43E50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_43EE0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = (*(__int64 (**)(void))(*(_QWORD *)a1 + 24LL))();\n  if ( (_BYTE)result )\n    result = sub_43E50(a1, a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x43ee0L", 
            "funcEndAddr": "0x43f11L", 
            "funcName": "sub_43EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_43F30@<rax>(__int64 a1@<rdi>, int a2@<r12d>, __int64 a3@<r14>, FILE *a4@<r15>)\n{\n  __int64 v4; // r13\n  unsigned __int64 v5; // rbx\n  __int64 v6; // rdi\n  unsigned __int64 v7; // rax\n  unsigned int v8; // ebx\n  int v9; // eax\n  const void *v10; // rbx\n  size_t v11; // rbp\n  const void *v12; // rbx\n  size_t v13; // rbp\n  __int64 v14; // rbx\n  __m128i v15; // xmm0\n  bool v16; // zf\n  unsigned int v17; // eax\n  const char *v18; // rbp\n  size_t v19; // rax\n  __int64 v20; // rdi\n  __int64 v21; // rbp\n  void *v22; // rax\n  int v23; // eax\n  __int64 result; // rax\n  struct termios *termios_p; // [rsp+0h] [rbp-D8h]\n  struct termios *v26; // [rsp+8h] [rbp-D0h]\n  __int128 v27; // [rsp+10h] [rbp-C8h]\n  __int128 v28; // [rsp+20h] [rbp-B8h]\n  __int128 v29; // [rsp+30h] [rbp-A8h]\n  __int64 v30; // [rsp+40h] [rbp-98h]\n  int v31; // [rsp+48h] [rbp-90h]\n  __m128i v32; // [rsp+50h] [rbp-88h]\n  __m128i v33; // [rsp+60h] [rbp-78h]\n  __m128i v34; // [rsp+70h] [rbp-68h]\n  __int64 v35; // [rsp+80h] [rbp-58h]\n  int v36; // [rsp+88h] [rbp-50h]\n  unsigned __int64 v37; // [rsp+98h] [rbp-40h]\n\n  v4 = a1;\n  v5 = 0LL;\n  v37 = __readfsqword(0x28u);\n  if ( *(_QWORD *)(a1 + 40) )\n  {\n    do\n    {\n      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5++);\n      sub_11BB0(v6, \"\");\n      v7 = *(_QWORD *)(v4 + 40);\n    }\n    while ( v7 > v5 );\n    if ( v7 )\n    {\n      v8 = 0;\n      if ( byte_262060 )\n        goto LABEL_26;\n    }\n  }\n  v9 = open(\"/dev/tty\", 2);\n  a2 = v9;\n  if ( v9 >= 0 )\n  {\n    a4 = fdopen(v9, \"w\");\n  }\n  else\n  {\n    a4 = stderr;\n    a2 = 0;\n  }\n  if ( *(_BYTE *)(v4 + 16) )\n  {\n    v10 = *(const void **)(v4 + 8);\n    if ( v10 )\n    {\n      v11 = strlen(*(const char **)(v4 + 8));\n      fwrite(v10, 1uLL, v11, a4);\n      fflush(a4);\n      if ( !(unsigned __int8)sub_47FE0(v10, v11, \"\\n\", 1LL, 0LL) )\n      {\n        fwrite(\"\\n\", 1uLL, 1uLL, a4);\n        fflush(a4);\n      }\n    }\n  }\n  v12 = *(const void **)(v4 + 24);\n  if ( v12 )\n  {\n    v13 = strlen(*(const char **)(v4 + 24));\n    fwrite(v12, 1uLL, v13, a4);\n    fflush(a4);\n    if ( !(unsigned __int8)sub_47FE0(v12, v13, \"\\n\", 1LL, 0LL) )\n    {\n      fwrite(\"\\n\", 1uLL, 1uLL, a4);\n      fflush(a4);\n    }\n  }\n  if ( *(_QWORD *)(v4 + 40) )\n  {\n    a3 = 0LL;\n    termios_p = (struct termios *)&v27;\n    v26 = (struct termios *)&v32;\n    goto LABEL_16;\n  }\n  while ( 1 )\n  {\n    v8 = 1;\n    if ( stderr != a4 )\n      fclose(a4);\nLABEL_26:\n    result = v8;\n    if ( __readfsqword(0x28u) == v37 )\n      return result;\nLABEL_34:\n    fwrite(\"\\n\", 1uLL, 1uLL, a4);\n    fflush(a4);\n    while ( *(_QWORD *)(v4 + 40) > (unsigned __int64)++a3 )\n    {\nLABEL_16:\n      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a3);\n      tcgetattr(a2, termios_p);\n      v15 = _mm_load_si128((const __m128i *)&v27);\n      v35 = v30;\n      v32 = v15;\n      v36 = v31;\n      v16 = *(_BYTE *)(v14 + 8) == 0;\n      v33 = _mm_load_si128((const __m128i *)&v28);\n      v32.m128i_i32[3] = v15.m128i_i32[3] | 3;\n      v34 = _mm_load_si128((const __m128i *)&v29);\n      if ( v16 )\n        v17 = v15.m128i_i32[3] & 0xFFFFFFF7 | 3;\n      else\n        v17 = v15.m128i_i32[3] | 0xB;\n      v32.m128i_i32[3] = v17;\n      tcsetattr(a2, 0, v26);\n      v18 = *(const char **)v14;\n      v19 = strlen(*(const char **)v14);\n      fwrite(v18, 1uLL, v19, a4);\n      fflush(a4);\n      do\n      {\n        v20 = *(_QWORD *)(v14 + 16);\n        v21 = *(_QWORD *)(v20 + 16);\n        v22 = (void *)sub_472D0(v20);\n        v23 = read(a2, v22, 0x10000uLL);\n        if ( v23 <= 0 )\n        {\n          tcsetattr(a2, 0, termios_p);\n          if ( !*(_BYTE *)(v14 + 8) )\n          {\n            fwrite(\"\\n\", 1uLL, 1uLL, a4);\n            fflush(a4);\n          }\n          if ( stderr != a4 )\n            fclose(a4);\n          v8 = 0;\n          goto LABEL_26;\n        }\n        sub_47350(*(_QWORD *)(v14 + 16), v23 + v21);\n      }\n      while ( !(unsigned __int8)sub_473D0(*(_QWORD *)(v14 + 16), 10LL) );\n      tcsetattr(a2, 0, termios_p);\n      if ( !*(_BYTE *)(v14 + 8) )\n        goto LABEL_34;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x43f30L", 
            "funcEndAddr": "0x442c9L", 
            "funcName": "sub_43F30"
        }, 
        {
            "decompiledFuncCode": "bool sub_442D0()\n{\n  return isatty(0) != 0;\n}\n", 
            "funcStartAddr": "0x442d0L", 
            "funcEndAddr": "0x442e5L", 
            "funcName": "sub_442D0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_44310(int a1, const char *a2)\n{\n  const char *v2; // r14\n  char *v3; // r12\n  int v4; // er13\n  int v5; // ebx\n  int v6; // eax\n  int *v7; // rax\n  const char *v8; // rdx\n  const char *v9; // rcx\n  int *v11; // rax\n\n  v2 = a2;\n  v3 = (char *)sub_11440(a1, 1uLL, 0LL);\n  if ( a2 )\n  {\nLABEL_2:\n    v4 = open(v2, 0);\n    if ( v4 < 0 )\n    {\n      sub_114C0(v3);\n      v11 = __errno_location();\n      strerror(*v11);\n      v9 = v2;\n      v8 = \"puttygen: %s: open: %s\\n\";\n    }\n    else\n    {\n      v5 = 0;\n      if ( a1 <= 0 )\n      {\nLABEL_9:\n        close(v4);\n        return v3;\n      }\n      while ( 1 )\n      {\n        v6 = read(v4, &v3[v5], a1 - v5);\n        if ( v6 < 0 )\n          break;\n        v5 += v6;\n        if ( a1 <= v5 )\n          goto LABEL_9;\n      }\n      close(v4);\n      sub_114C0(v3);\n      v7 = __errno_location();\n      strerror(*v7);\n      v8 = \"puttygen: %s: read: %s\\n\";\n      v9 = v2;\n    }\n    __fprintf_chk(stderr, 1LL, v8, v9);\n    return 0LL;\n  }\n  if ( !access(\"/dev/urandom\", 4) )\n  {\n    v2 = \"/dev/urandom\";\n    goto LABEL_2;\n  }\n  if ( !access(\"/dev/random\", 4) )\n  {\n    v2 = \"/dev/random\";\n    goto LABEL_2;\n  }\n  sub_114C0(v3);\n  fwrite(\"puttygen: cannot find a readable random number source; use --random-device\\n\", 1uLL, 0x4BuLL, stderr);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x44310L", 
            "funcEndAddr": "0x44484L", 
            "funcName": "sub_44310"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_44490()\n{\n  __int64 v1; // [rsp+0h] [rbp-28h]\n  __int64 v2; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-10h]\n\n  v3 = __readfsqword(0x28u);\n  if ( !clock_gettime(1, (struct timespec *)&v1) )\n    return 1000 * v1\n         + ((signed __int64)((unsigned __int128)(4835703278458516699LL * (signed __int128)v2) >> 64) >> 18)\n         - (v2 >> 63);\n  gettimeofday((struct timeval *)&v1, 0LL);\n  return 1000 * v1\n       + ((signed __int64)((unsigned __int128)(2361183241434822607LL * (signed __int128)v2) >> 64) >> 7)\n       - (v2 >> 63);\n}\n", 
            "funcStartAddr": "0x44490L", 
            "funcEndAddr": "0x4453dL", 
            "funcName": "sub_44490"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_44540(char *src)\n{\n  _QWORD *v1; // rbx\n\n  v1 = (_QWORD *)sub_11440(1uLL, 8uLL, 0LL);\n  *v1 = sub_46EE0(src);\n  return v1;\n}\n", 
            "funcStartAddr": "0x44540L", 
            "funcEndAddr": "0x44572L", 
            "funcName": "sub_44540"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_44580(char **a1)\n{\n  return sub_44540(*a1);\n}\n", 
            "funcStartAddr": "0x44580L", 
            "funcEndAddr": "0x44585L", 
            "funcName": "sub_44580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44590(__int64 a1)\n{\n  return *(_QWORD *)a1;\n}\n", 
            "funcStartAddr": "0x44590L", 
            "funcEndAddr": "0x44594L", 
            "funcName": "sub_44590"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_445A0(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2) == 0;\n}\n", 
            "funcStartAddr": "0x445a0L", 
            "funcEndAddr": "0x445b9L", 
            "funcName": "sub_445A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_445D0(void **a1)\n{\n  sub_114C0(*a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x445d0L", 
            "funcEndAddr": "0x445e5L", 
            "funcName": "sub_445D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_445F0(__int64 a1, const char **a2)\n{\n  return sub_10F80(*(__int64 (__fastcall ***)(_QWORD, const char *, size_t))(a1 + 8), *a2);\n}\n", 
            "funcStartAddr": "0x445f0L", 
            "funcEndAddr": "0x445fcL", 
            "funcName": "sub_445F0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_44600(__int64 a1)\n{\n  char *v1; // rax\n\n  v1 = sub_11230(*(_QWORD *)(a1 + 32));\n  return sub_44540(v1);\n}\n", 
            "funcStartAddr": "0x44600L", 
            "funcEndAddr": "0x44619L", 
            "funcName": "sub_44600"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_44630()\n{\n  __uid_t v0; // ebp\n  char *v1; // rbx\n  struct passwd *v2; // rax\n  struct passwd *v3; // rax\n\n  v0 = getuid();\n  v1 = getlogin();\n  setpwent();\n  if ( v1 )\n  {\n    v2 = getpwnam(v1);\n    if ( v2 )\n    {\n      if ( v2->pw_uid == v0 )\n        goto LABEL_6;\n    }\n  }\n  v3 = getpwuid(v0);\n  if ( v3 )\n  {\n    v1 = v3->pw_name;\nLABEL_6:\n    endpwent();\n    return sub_46EE0(v1);\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x44630L", 
            "funcEndAddr": "0x44691L", 
            "funcName": "sub_44630"
        }, 
        {
            "decompiledFuncCode": "size_t sub_446A0()\n{\n  return fwrite(\n           \"These are the fingerprints of the PuTTY PGP Master Keys. They can\\n\"\n           \"be used to establish a trust path from this executable to another\\n\"\n           \"one. See the manual for more information.\\n\"\n           \"(Note: these fingerprints have nothing to do with SSH!)\\n\"\n           \"\\n\"\n           \"PuTTY Master Key as of 2018 (RSA, 4096-bit):\\n\"\n           \"  24E1 B1C5 75EA 3C9F F752  A922 76BC 7FE4 EBFD 2D9E\\n\"\n           \"\\n\"\n           \"Previous Master Key (2015, RSA, 4096-bit):\\n\"\n           \"  440D E3B5 B7A1 CA85 B3CC  1718 AB58 5DC6 0467 6F7C\\n\",\n           1uLL,\n           0x1AAuLL,\n           stdout);\n}\n", 
            "funcStartAddr": "0x446a0L", 
            "funcEndAddr": "0x446bdL", 
            "funcName": "sub_446A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_446C0(int fd)\n{\n  int v1; // eax\n  int result; // eax\n  int *v3; // rax\n  const char *v4; // rdx\n  __int64 v5; // rcx\n  int *v6; // rax\n\n  v1 = fcntl(fd, 1);\n  if ( v1 < 0 )\n  {\n    v3 = __errno_location();\n    strerror(*v3);\n    v4 = \"%d: fcntl(F_GETFD): %s\\n\";\n    v5 = (unsigned int)fd;\nLABEL_5:\n    __fprintf_chk(stderr, 1LL, v4, v5);\n    exit(1);\n  }\n  result = fcntl(fd, 2, v1 | 1u);\n  if ( result < 0 )\n  {\n    v6 = __errno_location();\n    strerror(*v6);\n    v5 = (unsigned int)fd;\n    v4 = \"%d: fcntl(F_SETFD): %s\\n\";\n    goto LABEL_5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x446c0L", 
            "funcEndAddr": "0x4473bL", 
            "funcName": "sub_446C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_44740(int fd)\n{\n  int v1; // eax\n  int result; // eax\n  int *v3; // rax\n  const char *v4; // rdx\n  __int64 v5; // rcx\n  int *v6; // rax\n\n  v1 = fcntl(fd, 1);\n  if ( v1 < 0 )\n  {\n    v3 = __errno_location();\n    strerror(*v3);\n    v4 = \"%d: fcntl(F_GETFD): %s\\n\";\n    v5 = (unsigned int)fd;\nLABEL_5:\n    __fprintf_chk(stderr, 1LL, v4, v5);\n    exit(1);\n  }\n  result = fcntl(fd, 2, v1 & 0xFFFFFFFE);\n  if ( result < 0 )\n  {\n    v6 = __errno_location();\n    strerror(*v6);\n    v5 = (unsigned int)fd;\n    v4 = \"%d: fcntl(F_SETFD): %s\\n\";\n    goto LABEL_5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x44740L", 
            "funcEndAddr": "0x447bbL", 
            "funcName": "sub_44740"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_447C0(int fd)\n{\n  int v1; // eax\n  unsigned int v2; // ebx\n  int *v4; // rax\n  const char *v5; // rdx\n  __int64 v6; // rcx\n  int *v7; // rax\n\n  v1 = fcntl(fd, 3);\n  if ( v1 < 0 )\n  {\n    v4 = __errno_location();\n    strerror(*v4);\n    v5 = \"%d: fcntl(F_GETFL): %s\\n\";\n    v6 = (unsigned int)fd;\nLABEL_5:\n    __fprintf_chk(stderr, 1LL, v5, v6);\n    exit(1);\n  }\n  v2 = v1;\n  if ( fcntl(fd, 4) < 0 )\n  {\n    v7 = __errno_location();\n    strerror(*v7);\n    v6 = (unsigned int)fd;\n    v5 = \"%d: fcntl(F_SETFL): %s\\n\";\n    goto LABEL_5;\n  }\n  return (v2 >> 11) & 1;\n}\n", 
            "funcStartAddr": "0x447c0L", 
            "funcEndAddr": "0x4484fL", 
            "funcName": "sub_447C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44850(int fd)\n{\n  int v1; // eax\n  unsigned int v2; // ebx\n  int *v4; // rax\n  const char *v5; // rdx\n  __int64 v6; // rcx\n  int *v7; // rax\n\n  v1 = fcntl(fd, 3);\n  if ( v1 < 0 )\n  {\n    v4 = __errno_location();\n    strerror(*v4);\n    v5 = \"%d: fcntl(F_GETFL): %s\\n\";\n    v6 = (unsigned int)fd;\nLABEL_5:\n    __fprintf_chk(stderr, 1LL, v5, v6);\n    exit(1);\n  }\n  v2 = v1;\n  if ( fcntl(fd, 4) < 0 )\n  {\n    v7 = __errno_location();\n    strerror(*v7);\n    v6 = (unsigned int)fd;\n    v5 = \"%d: fcntl(F_SETFL): %s\\n\";\n    goto LABEL_5;\n  }\n  return (v2 >> 11) & 1;\n}\n", 
            "funcStartAddr": "0x44850L", 
            "funcEndAddr": "0x448dfL", 
            "funcName": "sub_44850"
        }, 
        {
            "decompiledFuncCode": "FILE *__usercall sub_448E0@<rax>(char a1@<dl>, __int64 a2@<rbx>, const char **a3@<rdi>, const char *a4@<rsi>)\n{\n  int v4; // eax\n  FILE *result; // rax\n\n  if ( !a1 )\n    return fopen(*a3, a4);\n  if ( *a4 != 119 )\n    __assert_fail(\"mode[0] == 'w'\", \"unix/uxmisc.c\", 0xF6u, \"f_open\");\n  v4 = open(*a3, 577, 384LL, a2);\n  if ( v4 < 0 )\n    result = 0LL;\n  else\n    result = fdopen(v4, a4);\n  return result;\n}\n", 
            "funcStartAddr": "0x448e0L", 
            "funcEndAddr": "0x44943L", 
            "funcName": "sub_448E0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_44950(char *src)\n{\n  _QWORD *v1; // rbx\n\n  v1 = (_QWORD *)sub_11440(1uLL, 8uLL, 0LL);\n  *v1 = sub_46EE0(src);\n  return v1;\n}\n", 
            "funcStartAddr": "0x44950L", 
            "funcEndAddr": "0x44982L", 
            "funcName": "sub_44950"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_44990(char **a1)\n{\n  return sub_44950(*a1);\n}\n", 
            "funcStartAddr": "0x44990L", 
            "funcEndAddr": "0x44995L", 
            "funcName": "sub_44990"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_449A0(void **a1)\n{\n  sub_114C0(*a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x449a0L", 
            "funcEndAddr": "0x449b5L", 
            "funcName": "sub_449A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_449C0(__int64 a1, const char **a2)\n{\n  return sub_10F80(*(__int64 (__fastcall ***)(_QWORD, const char *, size_t))(a1 + 8), *a2);\n}\n", 
            "funcStartAddr": "0x449c0L", 
            "funcEndAddr": "0x449ccL", 
            "funcName": "sub_449C0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_449D0(__int64 a1)\n{\n  char *v1; // rax\n\n  v1 = sub_11230(*(_QWORD *)(a1 + 32));\n  return sub_44950(v1);\n}\n", 
            "funcStartAddr": "0x449d0L", 
            "funcEndAddr": "0x449e9L", 
            "funcName": "sub_449D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_449F0(char *filename)\n{\n  char *v1; // rbx\n  int v2; // edi\n  int v3; // ebp\n  __int64 result; // rax\n  int *v5; // rax\n  __int64 v6; // [rsp+0h] [rbp-B8h]\n  int v7; // [rsp+18h] [rbp-A0h]\n  int v8; // [rsp+1Ch] [rbp-9Ch]\n  unsigned __int64 v9; // [rsp+98h] [rbp-20h]\n\n  v1 = filename;\n  v9 = __readfsqword(0x28u);\n  if ( mkdir(filename, 0x1C0u) < 0 && (v2 = *__errno_location(), v2 != 17) )\n  {\n    strerror(v2);\n    result = sub_47120((unsigned __int64)\"%s: mkdir: %s\");\n  }\n  else if ( __xstat(1, v1, (struct stat *)&v6) < 0 )\n  {\n    v5 = __errno_location();\n    strerror(*v5);\n    result = sub_47120((unsigned __int64)\"%s: stat: %s\");\n  }\n  else\n  {\n    v3 = v8;\n    if ( v3 == getuid() )\n    {\n      if ( v7 & 0x3F )\n        result = sub_47120((unsigned __int64)\"%s: directory has overgenerous permissions %03o (expected 700)\");\n      else\n        result = 0LL;\n    }\n    else\n    {\n      result = sub_47120((unsigned __int64)\"%s: directory owned by uid %d, not by us\");\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x449f0L", 
            "funcEndAddr": "0x44b04L", 
            "funcName": "sub_449F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44B10(__int64 a1, __mode_t a2)\n{\n  __int64 v2; // rbp\n  int i; // ebx\n  const char *v4; // rdi\n  int v5; // ebx\n  char *v6; // r14\n  int v7; // edi\n  __int64 v9; // ST08_8\n\n  v2 = a1;\n  for ( i = 0; ; i = strspn(v4, \"/\") + v5 )\n  {\n    v5 = strcspn((const char *)(v2 + i), \"/\") + i;\n    if ( v5 <= 0 )\n    {\n      v4 = (const char *)(v2 + v5);\n      if ( !*v4 )\n        return 0LL;\n      continue;\n    }\n    v6 = (char *)sub_47120((unsigned __int64)\"%.*s\");\n    if ( mkdir(v6, a2) < 0 )\n    {\n      v7 = *__errno_location();\n      if ( v7 != 17 )\n        break;\n    }\n    sub_114C0(v6);\n    v4 = (const char *)(v2 + v5);\n    if ( !*v4 )\n      return 0LL;\n  }\n  strerror(v7);\n  v9 = sub_47120((unsigned __int64)\"%s: mkdir: %s\");\n  sub_114C0(v6);\n  return v9;\n}\n", 
            "funcStartAddr": "0x44b10L", 
            "funcEndAddr": "0x44be8L", 
            "funcName": "sub_44B10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_44BF0(const char **a1)\n{\n  const char *v1; // rsi\n  int v2; // eax\n  unsigned int v3; // ecx\n  __int64 v5; // [rsp+0h] [rbp-A8h]\n  int v6; // [rsp+18h] [rbp-90h]\n  __int64 v7; // [rsp+30h] [rbp-78h]\n  unsigned __int64 v8; // [rsp+98h] [rbp-10h]\n\n  v1 = *a1;\n  v8 = __readfsqword(0x28u);\n  v2 = __xstat(1, v1, (struct stat *)&v5);\n  v3 = 0;\n  if ( v2 >= 0 && (v6 & 0xF000) == 0x8000 )\n    LOBYTE(v3) = v7 > 0;\n  return v3;\n}\n", 
            "funcStartAddr": "0x44bf0L", 
            "funcEndAddr": "0x44c60L", 
            "funcName": "sub_44BF0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_44C60()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x44c60L", 
            "funcEndAddr": "0x44c63L", 
            "funcName": "sub_44C60"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_44C70(void (__fastcall *a1)(__int64 *, signed __int64))\n{\n  void (__fastcall *v1)(__int64 *, signed __int64); // r12\n  int v2; // eax\n  int v3; // er13\n  signed int v4; // ebp\n  int v5; // eax\n  int v6; // edi\n  char v7; // r13\n  FILE *v8; // rbp\n  unsigned int v9; // eax\n  FILE *v10; // rbp\n  int *v11; // rax\n  char *v12; // rax\n  unsigned int v13; // eax\n  int v15; // edi\n  char *v16; // rsi\n  FILE *v17; // rax\n  __int64 v18; // [rsp+0h] [rbp-238h]\n  unsigned __int64 v19; // [rsp+208h] [rbp-30h]\n\n  v1 = a1;\n  v19 = __readfsqword(0x28u);\n  v2 = open(\"/dev/urandom\", 0);\n  if ( v2 < 0 )\n  {\n    v7 = 0;\n    v8 = popen(\"ps -axu 2>/dev/null\", \"r\");\n    if ( v8 )\n      goto LABEL_8;\nLABEL_11:\n    v11 = __errno_location();\n    v12 = strerror(*v11);\n    __fprintf_chk(stderr, 1LL, \"popen: %s\\nUnable to access fallback entropy source\\n\", v12);\n    exit(1);\n  }\n  v3 = v2;\n  v4 = 0;\n  do\n  {\n    v5 = read(v3, (char *)&v18 + v4, 32 - v4);\n    if ( v5 < 0 )\n    {\n      v15 = v3;\n      v7 = 0;\n      close(v15);\n      v8 = popen(\"ps -axu 2>/dev/null\", \"r\");\n      if ( v8 )\n        goto LABEL_8;\n      goto LABEL_11;\n    }\n    v4 += v5;\n  }\n  while ( v4 <= 31 );\n  v6 = v3;\n  v7 = 1;\n  close(v6);\n  v1(&v18, 32LL);\n  v8 = popen(\"ps -axu 2>/dev/null\", \"r\");\n  if ( !v8 )\n  {\n    v16 = \"r\";\n    v17 = popen(\"ls -al /tmp 2>/dev/null\", \"r\");\n    v10 = v17;\n    if ( !v17 )\n      goto LABEL_16;\n    goto LABEL_14;\n  }\nLABEL_8:\n  while ( 1 )\n  {\n    v9 = fread(&v18, 1uLL, 0x200uLL, v8);\n    if ( (signed int)v9 <= 0 )\n      break;\n    v1(&v18, v9);\n  }\n  pclose(v8);\n  v16 = \"r\";\n  v10 = popen(\"ls -al /tmp 2>/dev/null\", \"r\");\n  if ( !v10 )\n  {\n    if ( v7 )\n      goto LABEL_16;\n    goto LABEL_11;\n  }\nLABEL_14:\n  while ( 1 )\n  {\n    v16 = (_BYTE *)(&n + 1);\n    v13 = fread(&v18, 1uLL, 0x200uLL, v10);\n    if ( (signed int)v13 <= 0 )\n      break;\n    v1(&v18, v13);\n  }\n  pclose(v10);\nLABEL_16:\n  sub_467E0(v1, v16);\n  return __readfsqword(0x28u) ^ v19;\n}\n", 
            "funcStartAddr": "0x44c70L", 
            "funcEndAddr": "0x44e89L", 
            "funcName": "sub_44C70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_44E90@<rax>(__int64 a1@<r12>, __int64 a2@<r13>, __int64 a3@<r14>, __int64 a4@<r15>)\n{\n  int v4; // eax\n  __int64 v5; // rbp\n  int v6; // eax\n  int v7; // eax\n  __int64 v8; // rbp\n  int v9; // eax\n  __int64 v11; // [rsp+0h] [rbp-2B8h]\n  char buf; // [rsp+90h] [rbp-228h]\n  unsigned __int64 v13; // [rsp+298h] [rbp-20h]\n\n  v13 = __readfsqword(0x28u);\n  v4 = open(\"/proc/meminfo\", 0);\n  v5 = (unsigned int)v4;\n  if ( v4 >= 0 )\n  {\n    while ( 1 )\n    {\n      v6 = read(v5, &buf, 0x200uLL);\n      if ( v6 <= 0 )\n        break;\n      sub_3B5F0(v6, (__int64)&buf, v5, 6u, (__int64)&buf, a1, a2, a3, a4);\n    }\n    close(v5);\n  }\n  v7 = open(\"/proc/stat\", 0);\n  v8 = (unsigned int)v7;\n  if ( v7 >= 0 )\n  {\n    while ( 1 )\n    {\n      v9 = read(v8, &buf, 0x200uLL);\n      if ( v9 <= 0 )\n        break;\n      sub_3B5F0(v9, (__int64)&buf, v8, 7u, (__int64)&buf, a1, a2, a3, a4);\n    }\n    close(v8);\n  }\n  getrusage(0, (struct rusage *)&v11);\n  sub_3B5F0(144, (__int64)&v11, v8, 8u, (__int64)&v11, a1, a2, a3, a4);\n  return __readfsqword(0x28u) ^ v13;\n}\n", 
            "funcStartAddr": "0x44e90L", 
            "funcEndAddr": "0x44f8aL", 
            "funcName": "sub_44E90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __usercall sub_44F90@<rax>(unsigned int a1@<edi>, __int64 a2@<rsi>, __int64 a3@<r12>, __int64 a4@<r13>, __int64 a5@<r14>, __int64 a6@<r15>)\n{\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  struct timeval tv; // [rsp+10h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-20h]\n\n  v7 = a2;\n  v9 = __readfsqword(0x28u);\n  gettimeofday(&tv, 0LL);\n  sub_3B5F0(16, (__int64)&tv, a1, 0, (__int64)&tv, a3, a4, a5, a6);\n  sub_3B5F0(8, (__int64)&tv, a1, a1, (__int64)&v7, a3, a4, a5, a6);\n  return __readfsqword(0x28u) ^ v9;\n}\n", 
            "funcStartAddr": "0x44f90L", 
            "funcEndAddr": "0x44ff8L", 
            "funcName": "sub_44F90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_45000()\n{\n  __int64 v1; // [rsp+0h] [rbp-28h]\n  __int64 v2; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-10h]\n\n  v3 = __readfsqword(0x28u);\n  gettimeofday((struct timeval *)&v1, 0LL);\n  return 1000 * v1\n       + ((signed __int64)((unsigned __int128)(2361183241434822607LL * (signed __int128)v2) >> 64) >> 7)\n       - (v2 >> 63);\n}\n", 
            "funcStartAddr": "0x45000L", 
            "funcEndAddr": "0x45064L", 
            "funcName": "sub_45000"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_45090()\n{\n  _QWORD *v0; // rax\n  _QWORD *v1; // rbx\n\n  v0 = (_QWORD *)sub_11440(1uLL, 0x20uLL, 0LL);\n  v0[2] = 16LL;\n  v0[1] = 0LL;\n  v1 = v0;\n  *v0 = sub_11440(0x10uLL, 8uLL, 0LL);\n  v1[3] = sub_42D90((__int64)sub_45070);\n  return v1;\n}\n", 
            "funcStartAddr": "0x45090L", 
            "funcEndAddr": "0x450deL", 
            "funcName": "sub_45090"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_450E0(__int64 a1)\n{\n  void *result; // rax\n\n  *(_QWORD *)(a1 + 8) = 0LL;\n  while ( 1 )\n  {\n    result = (void *)sub_43230(*(__int64 **)(a1 + 24), 0);\n    if ( !result )\n      break;\n    sub_114C0(result);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x450e0L", 
            "funcEndAddr": "0x4510aL", 
            "funcName": "sub_450E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_45110(__int64 a1)\n{\n  sub_450E0(a1);\n  sub_42DC0(*(_QWORD ***)(a1 + 24));\n  sub_114C0(*(void **)a1);\n  sub_114C0((void *)a1);\n}\n", 
            "funcStartAddr": "0x45110L", 
            "funcEndAddr": "0x45133L", 
            "funcName": "sub_45110"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_45140(__int64 a1, int a2, __int16 a3)\n{\n  __int64 v3; // rbx\n  __int64 *v4; // rdi\n  __int16 v5; // r12\n  __int64 v6; // rax\n  char *v8; // rax\n  __int64 v9; // r14\n  int *v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rdi\n  __int64 v13; // r13\n  int v14; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v15; // [rsp+18h] [rbp-30h]\n\n  v15 = __readfsqword(0x28u);\n  if ( a2 < 0 )\n    __assert_fail(\"fd >= 0\", \"unix/uxpoll.c\", 0x3Au, \"pollwrap_add_fd_events\");\n  v3 = a1;\n  v4 = *(__int64 **)(a1 + 24);\n  v14 = a2;\n  v5 = a3;\n  v6 = sub_43200(v4, (__int64)&v14, 0LL);\n  if ( !v6 )\n  {\n    v8 = (char *)sub_114E0(*(void **)v3, (unsigned __int64 *)(v3 + 16), 8uLL, *(_QWORD *)(v3 + 8), 1uLL, 0);\n    v9 = *(_QWORD *)(v3 + 8);\n    *(_QWORD *)v3 = v8;\n    v10 = (int *)&v8[8 * v9];\n    *(_QWORD *)(v3 + 8) = v9 + 1;\n    *v10 = a2;\n    v10[1] = 0;\n    v11 = sub_11440(1uLL, 0x10uLL, 0LL);\n    v12 = *(__int64 **)(v3 + 24);\n    v13 = v11;\n    *(_DWORD *)v11 = a2;\n    *(_QWORD *)(v11 + 8) = v9;\n    v6 = sub_42E00(v12, v11);\n    if ( v13 != v6 )\n      __assert_fail(\"added == f2p\", \"unix/uxpoll.c\", 0x48u, \"pollwrap_add_fd_events\");\n  }\n  *(_WORD *)(*(_QWORD *)v3 + 8LL * *(_QWORD *)(v6 + 8) + 4) |= v5;\n  return __readfsqword(0x28u) ^ v15;\n}\n", 
            "funcStartAddr": "0x45140L", 
            "funcEndAddr": "0x4525cL", 
            "funcName": "sub_45140"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_45260(__int64 a1, int a2, char a3)\n{\n  __int16 v3; // ax\n\n  v3 = a3 & 1;\n  if ( a3 & 1 )\n    v3 = 193;\n  if ( a3 & 2 )\n    v3 |= 0x304u;\n  if ( a3 & 4 )\n    v3 |= 2u;\n  return sub_45140(a1, a2, v3);\n}\n", 
            "funcStartAddr": "0x45260L", 
            "funcEndAddr": "0x4528dL", 
            "funcName": "sub_45260"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_452A0(__int64 a1)\n{\n  return poll(*(struct pollfd **)a1, *(_QWORD *)(a1 + 8), -1);\n}\n", 
            "funcStartAddr": "0x452a0L", 
            "funcEndAddr": "0x452b1L", 
            "funcName": "sub_452A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45300(__int64 a1, int a2)\n{\n  _QWORD *v2; // rbx\n  __int64 *v3; // rdi\n  __int64 v4; // rax\n  unsigned int v5; // edx\n  int v7; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-10h]\n\n  v8 = __readfsqword(0x28u);\n  if ( a2 < 0 )\n    sub_61C7();\n  v2 = (_QWORD *)a1;\n  v3 = *(__int64 **)(a1 + 24);\n  v7 = a2;\n  v4 = sub_43200(v3, (__int64)&v7, 0LL);\n  v5 = 0;\n  if ( v4 )\n    v5 = *(signed __int16 *)(*v2 + 8LL * *(_QWORD *)(v4 + 8) + 6);\n  return v5;\n}\n", 
            "funcStartAddr": "0x45300L", 
            "funcEndAddr": "0x45362L", 
            "funcName": "sub_45300"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45370(__int64 a1, int a2)\n{\n  _QWORD *v2; // rbx\n  __int64 *v3; // rdi\n  __int64 v4; // rax\n  unsigned int v5; // edx\n  signed __int64 v6; // rcx\n  __int16 v7; // ax\n  __int16 v8; // cx\n  int v10; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-10h]\n\n  v11 = __readfsqword(0x28u);\n  if ( a2 < 0 )\n    sub_61C7();\n  v2 = (_QWORD *)a1;\n  v3 = *(__int64 **)(a1 + 24);\n  v10 = a2;\n  v4 = sub_43200(v3, (__int64)&v10, 0LL);\n  v5 = 0;\n  if ( v4 )\n  {\n    v6 = *v2 + 8LL * *(_QWORD *)(v4 + 8);\n    v7 = *(_WORD *)(v6 + 4);\n    v8 = *(_WORD *)(v6 + 6);\n    if ( v7 & 1 )\n      v5 = (v8 & 0xD9) != 0;\n    if ( v7 & 4 && v8 & 0x30C )\n      v5 |= 2u;\n    if ( v7 & 2 && v8 & 2 )\n      v5 |= 4u;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x45370L", 
            "funcEndAddr": "0x4540bL", 
            "funcName": "sub_45370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45410(__int64 a1, const char *a2)\n{\n  char *v2; // rax\n  char *v3; // rdi\n  char *v5; // rbp\n  char *v6; // r12\n  char *v7; // rbx\n  __uid_t v8; // eax\n  struct passwd *v9; // rax\n  char *v10; // rax\n  const char *v11; // rax\n  char *v12; // r13\n  const char *v13; // rbx\n  char *v14; // r14\n  const char *v15; // rdi\n  void *v16; // rbp\n  const char *v17; // rbx\n  __int64 v18; // r13\n  void *v19; // rbp\n  signed __int64 v20; // r12\n  const char *v21; // rax\n  const char *v22; // rax\n\n  if ( !(_DWORD)a1 )\n  {\n    v5 = getenv(\"PUTTYDIR\");\n    v3 = v5;\n    if ( v5 )\n      return sub_46EE0(v3);\n    v6 = 0LL;\n    v7 = getenv(\"HOME\");\n    v8 = getuid();\n    v9 = getpwuid(v8);\n    if ( v9 )\n      v6 = v9->pw_dir;\n    v10 = getenv(aXdgConfig);\n    if ( v10 )\n    {\n      if ( *v10 )\n      {\n        v12 = (char *)sub_47120((unsigned __int64)\"%s/putty\");\n        if ( v12 )\n          goto LABEL_86;\n      }\n    }\n    if ( v7 )\n    {\n      v11 = (const char *)sub_47120((unsigned __int64)\"%s/.config/putty\");\n      v12 = (char *)v11;\n      if ( v11 && !access(v11, 0) )\n        return (__int64)v12;\nLABEL_17:\n      v13 = (const char *)sub_47120((unsigned __int64)\"%s/.putty\");\n      if ( v6 )\n      {\n        v6 = (char *)sub_47120((unsigned __int64)\"%s/.putty\");\n        v14 = (char *)sub_46EE0(\"/.putty\");\n        if ( v13 )\n        {\n          if ( !access(v13, 0) )\n            goto LABEL_26;\n          v5 = (char *)v13;\n          v13 = v6;\n        }\n        else\n        {\n          v5 = 0LL;\n          v13 = v6;\n        }\nLABEL_21:\n        if ( v13 && !access(v13, 0) )\n        {\n          v6 = (char *)v13;\n        }\n        else\n        {\n          if ( access(v14, 0) )\n          {\n            if ( v5 )\n            {\n              v6 = (char *)v13;\n              v13 = v5;\n              goto LABEL_26;\n            }\n            if ( v13 )\n            {\n              v6 = (char *)v13;\n            }\n            else\n            {\n              v5 = 0LL;\n              v6 = 0LL;\n              v13 = v14;\n            }\n            goto LABEL_61;\n          }\n          v6 = (char *)v13;\n          v13 = v14;\n        }\nLABEL_66:\n        if ( v13 == v5 )\n          goto LABEL_26;\nLABEL_61:\n        sub_114C0(v5);\n        goto LABEL_26;\n      }\n      v21 = (const char *)sub_46EE0(\"/.putty\");\n      v14 = (char *)v21;\n      if ( v13 )\n      {\n        if ( !access(v13, 0) )\n          goto LABEL_27;\n        if ( access(v14, 0) )\n        {\nLABEL_26:\n          if ( v13 == v6 )\n          {\nLABEL_28:\n            if ( v13 != v14 )\n              sub_114C0(v14);\n            if ( v13 != v12 )\n              sub_114C0(v12);\n            return (__int64)v13;\n          }\nLABEL_27:\n          sub_114C0(v6);\n          goto LABEL_28;\n        }\n        v5 = (char *)v13;\n        v13 = v14;\n        goto LABEL_66;\n      }\n      if ( access(v21, 0) )\n      {\n        v5 = 0LL;\n        v13 = v14;\n        goto LABEL_61;\n      }\n      v13 = v14;\nLABEL_60:\n      v6 = 0LL;\n      goto LABEL_61;\n    }\n    if ( !v6 )\n    {\n      v22 = (const char *)sub_47120((unsigned __int64)\"%s/.config/putty\");\n      v12 = (char *)v22;\n      if ( v22 )\n      {\n        v13 = v22;\n        if ( !access(v22, 0) )\n          return (__int64)v13;\n      }\n      goto LABEL_59;\n    }\n    v12 = (char *)sub_47120((unsigned __int64)\"%s/.config/putty\");\n    if ( v12 )\n    {\nLABEL_86:\n      if ( !access(v12, 0) )\n        return (__int64)v12;\n      if ( v7 )\n        goto LABEL_17;\n      if ( !v6 )\n      {\nLABEL_59:\n        v13 = (const char *)sub_46EE0(\"/.putty\");\n        v14 = (char *)v13;\n        access(v13, 0);\n        goto LABEL_60;\n      }\n    }\n    v13 = (const char *)sub_47120((unsigned __int64)\"%s/.putty\");\n    v14 = (char *)sub_46EE0(\"/.putty\");\n    goto LABEL_21;\n  }\n  if ( (_DWORD)a1 == 4 )\n  {\n    v2 = getenv(\"PUTTYSESSIONS\");\n    if ( v2 )\n      goto LABEL_8;\n    v15 = \"%s/sessions\";\n    v16 = (void *)sub_45410(0LL, 0LL);\nLABEL_33:\n    v13 = (const char *)sub_47120((char)v15);\n    sub_114C0(v16);\n    return (__int64)v13;\n  }\n  if ( (_DWORD)a1 != 5 )\n  {\n    switch ( (_DWORD)a1 )\n    {\n      case 1:\n        v2 = getenv(\"PUTTYSSHHOSTKEYS\");\n        if ( v2 )\n          goto LABEL_8;\n        v15 = \"%s/sshhostkeys\";\n        v16 = (void *)sub_45410(0LL, 0LL);\n        break;\n      case 2:\n        v15 = \"%s.tmp\";\n        v16 = (void *)sub_45410(1LL, 0LL);\n        break;\n      case 3:\n        v2 = getenv(\"PUTTYRANDOMSEED\");\n        if ( v2 )\n        {\nLABEL_8:\n          v3 = v2;\n          return sub_46EE0(v3);\n        }\n        v15 = \"%s/randomseed\";\n        v16 = (void *)sub_45410(0LL, 0LL);\n        break;\n      default:\n        v15 = \"%s/ERROR\";\n        v16 = (void *)sub_45410(0LL, 0LL);\n        break;\n    }\n    goto LABEL_33;\n  }\n  v17 = a2;\n  v18 = sub_47400(a1);\n  v19 = (void *)sub_45410(4LL, 0LL);\n  sub_474E0(v18);\n  sub_114C0(v19);\n  if ( !a2 || (LODWORD(a2) = *(unsigned __int8 *)a2, !(_BYTE)a2) )\n  {\n    v17 = \"Default Settings\";\n    LODWORD(a2) = 68;\n  }\n  v20 = 4503599629467661LL;\n  do\n  {\n    if ( (unsigned __int8)((_BYTE)a2 - 43) <= 0x34u && _bittest64(&v20, (unsigned int)((_DWORD)a2 - 43))\n      || (unsigned __int8)((_BYTE)a2 - 48) <= 9u\n      || (unsigned __int8)(((unsigned __int8)a2 & 0xDF) - 65) <= 0x19u )\n    {\n      sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v18 + 24), (char)a2);\n    }\n    else\n    {\n      sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v18 + 24), 37);\n      sub_10CD0(\n        (__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v18 + 24),\n        a0123456789abcd_0[((const unsigned __int8)*v17 >> 4) & 0xF]);\n      sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v18 + 24), a0123456789abcd_0[*v17 & 0xF]);\n    }\n    a2 = (const char *)*(unsigned __int8 *)++v17;\n  }\n  while ( (_BYTE)a2 );\n  return sub_47470(v18, a2);\n}\n", 
            "funcStartAddr": "0x45410L", 
            "funcEndAddr": "0x4595bL", 
            "funcName": "sub_45410"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45970(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 result; // rax\n  __int64 v3; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-10h]\n\n  v3 = a1;\n  v4 = __readfsqword(0x28u);\n  if ( qword_2656E0 && (v1 = sub_43200((__int64 *)qword_2656E0, (__int64)&v3, 0LL)) != 0 )\n    result = *(_QWORD *)(v1 + 8);\n  else\n    result = sub_8CC0();\n  return result;\n}\n", 
            "funcStartAddr": "0x45970L", 
            "funcEndAddr": "0x459d3L", 
            "funcName": "sub_45970"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_45B50(FILE **a1)\n{\n  fclose(*a1);\n  sub_114C0(a1);\n}\n", 
            "funcStartAddr": "0x45b50L", 
            "funcEndAddr": "0x45b65L", 
            "funcName": "sub_45B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45E10(__int64 **a1, __int64 a2)\n{\n  __int64 v2; // rax\n  char *v3; // rdi\n  __int64 v5; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  v5 = a2;\n  if ( a1 )\n  {\n    v2 = sub_43200(*a1, (__int64)&v5, 0LL);\n    if ( v2 )\n    {\n      v3 = *(char **)(v2 + 8);\n      if ( !v3 )\n        __assert_fail(\"val != NULL\", \"unix/uxstore.c\", 0x199u, \"read_setting_s\");\n      return sub_46EE0(v3);\n    }\n  }\n  v3 = (char *)sub_45970(a2);\n  if ( v3 )\n    return sub_46EE0(v3);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x45e10L", 
            "funcEndAddr": "0x45ea8L", 
            "funcName": "sub_45E10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_45EB0(__int64 **a1, __int64 a2, unsigned int a3)\n{\n  unsigned int v3; // ebx\n  __int64 v4; // rax\n  const char *v5; // rdi\n  __int64 result; // rax\n  __int64 v7; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+18h] [rbp-20h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  v7 = a2;\n  if ( a1 )\n  {\n    v4 = sub_43200(*a1, (__int64)&v7, 0LL);\n    if ( v4 )\n    {\n      v5 = *(const char **)(v4 + 8);\n      if ( !v5 )\n        __assert_fail(\"val != NULL\", \"unix/uxstore.c\", 0x1ACu, \"read_setting_i\");\n      return strtol(v5, 0LL, 10);\n    }\n  }\n  v5 = (const char *)sub_45970(a2);\n  result = v3;\n  if ( v5 )\n    return strtol(v5, 0LL, 10);\n  return result;\n}\n", 
            "funcStartAddr": "0x45eb0L", 
            "funcEndAddr": "0x45f50L", 
            "funcName": "sub_45EB0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_46010(__int64 **a1, __int64 a2)\n{\n  char *v2; // rax\n  char *v3; // rbx\n  _QWORD *v4; // rbp\n\n  v2 = (char *)sub_45E10(a1, a2);\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = sub_44540(v2);\n  sub_114C0(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0x46010L", 
            "funcEndAddr": "0x46044L", 
            "funcName": "sub_46010"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_46130(const char *a1)\n{\n  char *v1; // rbx\n\n  v1 = (char *)sub_45410(5LL, a1);\n  unlink(v1);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x46130L", 
            "funcEndAddr": "0x46152L", 
            "funcName": "sub_46130"
        }, 
        {
            "decompiledFuncCode": "_QWORD *sub_46160()\n{\n  char *v0; // rbx\n  DIR *v1; // rbp\n  _QWORD *result; // rax\n\n  v0 = (char *)sub_45410(4LL, 0LL);\n  v1 = opendir(v0);\n  sub_114C0(v0);\n  result = (_QWORD *)sub_11440(1uLL, 8uLL, 0LL);\n  *result = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x46160L", 
            "funcEndAddr": "0x461a3L", 
            "funcName": "sub_46160"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_461B0(DIR **a1, __int64 a2)\n{\n  signed __int64 result; // rax\n  __int64 v3; // rbx\n  char *v4; // r14\n  __int64 v5; // r15\n  struct dirent *v6; // rax\n  signed __int64 v7; // r14\n  __int64 (__fastcall **i)(_QWORD, char *, signed __int64); // rbp\n  char v9; // si\n  int v10; // eax\n  int v11; // edx\n  int v12; // esi\n  char v13; // al\n  int v14; // eax\n  char v15; // dl\n  struct stat stat_buf; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v17; // [rsp+A8h] [rbp-40h]\n\n  v17 = __readfsqword(0x28u);\n  result = 0LL;\n  if ( *a1 )\n  {\n    v3 = sub_47400(a1);\n    v4 = (char *)sub_45410(4LL, 0LL);\n    strlen(v4);\n    sub_10C20((__int64 (**)(void))(v3 + 24));\n    sub_114C0(v4);\n    sub_10CD0((__int64 (__fastcall **)(_QWORD, char *, signed __int64))(v3 + 24), 47);\n    v5 = *(_QWORD *)(v3 + 16);\n    do\n    {\n      v6 = readdir(*a1);\n      if ( !v6 )\n      {\n        sub_47420(v3);\n        return 0LL;\n      }\n      v7 = (signed __int64)v6->d_name;\n      sub_47350(v3, v5);\n      strlen((const char *)v7);\n      sub_10C20((__int64 (**)(void))(v3 + 24));\n    }\n    while ( __xstat(1, *(const char **)v3, &stat_buf) < 0 || (stat_buf.st_mode & 0xF000) != 0x8000 );\n    for ( i = (__int64 (__fastcall **)(_QWORD, char *, signed __int64))(a2 + 24); ; sub_10CD0(i, v9) )\n    {\n      v9 = *(_BYTE *)v7;\n      if ( !*(_BYTE *)v7 )\n        break;\n      while ( v9 == 37 )\n      {\n        v10 = *(char *)(v7 + 1);\n        if ( !*(_BYTE *)(v7 + 1) )\n          break;\n        v11 = *(char *)(v7 + 2);\n        if ( !*(_BYTE *)(v7 + 2) )\n          break;\n        v12 = v10 - 48;\n        v13 = v10 - 55;\n        if ( v12 > 9 )\n          LOBYTE(v12) = v13;\n        v14 = v11 - 48;\n        v15 = v11 - 55;\n        if ( v14 > 9 )\n          LOBYTE(v14) = v15;\n        v7 += 3LL;\n        sub_10CD0(i, v14 + 16 * v12);\n        v9 = *(_BYTE *)v7;\n        if ( !*(_BYTE *)v7 )\n          goto LABEL_16;\n      }\n      ++v7;\n    }\nLABEL_16:\n    sub_47420(v3);\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x461b0L", 
            "funcEndAddr": "0x46361L", 
            "funcName": "sub_461B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_46370(DIR **a1)\n{\n  DIR **v1; // rbx\n  DIR *v2; // rdi\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 )\n    closedir(v2);\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x46370L", 
            "funcEndAddr": "0x4638aL", 
            "funcName": "sub_46370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_46390(const char *a1, unsigned int a2, const char *a3, char *a4)\n{\n  const char *v4; // rbp\n  char *v5; // rbx\n  FILE *v6; // r12\n  const char *v7; // rax\n  char *v8; // rbx\n  size_t v9; // r15\n  __int64 v10; // r9\n  const char *v11; // r15\n  const char *v12; // r15\n  unsigned int v14; // er13\n  char *v15; // [rsp+8h] [rbp-70h]\n  size_t s1; // [rsp+10h] [rbp-68h]\n  size_t v17; // [rsp+18h] [rbp-60h]\n  char s2; // [rsp+20h] [rbp-58h]\n  unsigned __int64 v19; // [rsp+38h] [rbp-40h]\n\n  v4 = a3;\n  v15 = a4;\n  v19 = __readfsqword(0x28u);\n  v5 = (char *)sub_45410(1LL, 0LL);\n  v6 = fopen(v5, \"r\");\n  sub_114C0(v5);\n  if ( v6 )\n  {\n    while ( 1 )\n    {\n      v7 = (const char *)sub_47610(v6);\n      v8 = (char *)v7;\n      if ( !v7 )\n      {\n        v14 = 1;\n        goto LABEL_14;\n      }\n      v7[strcspn(v7, \"\\n\")] = 0;\n      v9 = (signed int)strlen(v4);\n      if ( !strncmp(v8, v4, v9) && v8[v9] == 64 )\n      {\n        v11 = &v8[v9 + 1];\n        __sprintf_chk(&s2, 1LL, 20LL, \"%d\", a2, v10);\n        s1 = (signed int)strlen(&s2);\n        if ( !strncmp(v11, &s2, s1) && v11[s1] == 58 )\n        {\n          v12 = &v11[s1 + 1];\n          v17 = (signed int)strlen(a1);\n          if ( !strncmp(v12, a1, v17) && v12[v17] == 32 )\n            break;\n        }\n      }\n      sub_114C0(v8);\n    }\n    v14 = strcmp(&v12[v17 + 1], v15);\n    if ( v14 )\n    {\n      sub_114C0(v8);\n      v14 = 2;\n    }\n    else\n    {\n      sub_114C0(v8);\n    }\nLABEL_14:\n    fclose(v6);\n  }\n  else\n  {\n    v14 = 1;\n  }\n  return v14;\n}\n", 
            "funcStartAddr": "0x46390L", 
            "funcEndAddr": "0x46594L", 
            "funcName": "sub_46390"
        }, 
        {
            "decompiledFuncCode": "void sub_465C0()\n{\n  char *v0; // r12\n  FILE *v1; // rbp\n  FILE *v2; // rbx\n  const char *v3; // r14\n  int v4; // eax\n  size_t v5; // r15\n  const char *v6; // rax\n  char *v7; // r13\n  void *v8; // rdi\n  int *v9; // rax\n  int v10; // edi\n  int *v11; // r13\n  char *v12; // rax\n  int *v13; // rax\n  char *v14; // rax\n  __int64 v15; // rax\n  void *v16; // rbx\n  __int64 v17; // rax\n  void *v18; // rbp\n  char *newa; // [rsp+8h] [rbp-50h]\n\n  v0 = (char *)sub_45410(2LL, 0LL);\n  v1 = fopen(v0, \"w\");\n  if ( !v1 )\n  {\n    v9 = __errno_location();\n    v10 = *v9;\n    v11 = v9;\n    if ( *v9 == 2 )\n    {\n      v15 = sub_45410(0LL, 0LL);\n      v16 = (void *)v15;\n      v17 = sub_44B10(v15, 0x1C0u);\n      v18 = (void *)v17;\n      if ( v17 )\n      {\n        sub_A370((__int64)\"Unable to store host key: %s\", v17);\n        sub_114C0(v18);\n        sub_114C0(v16);\n        v8 = v0;\n        goto LABEL_12;\n      }\n      sub_114C0(v16);\n      v1 = fopen(v0, \"w\");\n      if ( v1 )\n        goto LABEL_2;\n      v10 = *v11;\n    }\n    v12 = strerror(v10);\n    sub_A370((__int64)\"Unable to store host key: open(\\\"%s\\\") returned '%s'\", v0, v12);\n    v8 = v0;\n    goto LABEL_12;\n  }\nLABEL_2:\n  newa = (char *)sub_45410(1LL, 0LL);\n  v2 = fopen(newa, \"r\");\n  v3 = (const char *)sub_47120((unsigned __int64)\"%s@%d:%s %s\\n\");\n  v4 = strcspn(v3, \" \");\n  if ( v2 )\n  {\n    v5 = v4 + 1;\n    while ( 1 )\n    {\n      v6 = (const char *)sub_47610(v2);\n      v7 = (char *)v6;\n      if ( !v6 )\n        break;\n      if ( strncmp(v6, v3, v5) )\n        fputs(v7, v1);\n      sub_114C0(v7);\n    }\n    fclose(v2);\n  }\n  fputs(v3, v1);\n  fclose(v1);\n  if ( rename(v0, newa) < 0 )\n  {\n    v13 = __errno_location();\n    v14 = strerror(*v13);\n    sub_A370((__int64)\"Unable to store host key: rename(\\\"%s\\\",\\\"%s\\\") returned '%s'\", v0, newa, v14);\n  }\n  sub_114C0(v0);\n  sub_114C0(newa);\n  v8 = (void *)v3;\nLABEL_12:\n  sub_114C0(v8);\n}\n", 
            "funcStartAddr": "0x465c0L", 
            "funcEndAddr": "0x467deL", 
            "funcName": "sub_465C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_467E0(void (__fastcall *a1)(__int64 *, _QWORD))\n{\n  void (__fastcall *v1)(__int64 *, _QWORD); // r12\n  char *v2; // rdi\n  int v3; // ebp\n  unsigned int v4; // eax\n  __int64 v6; // [rsp+0h] [rbp-228h]\n  unsigned __int64 v7; // [rsp+208h] [rbp-20h]\n\n  v1 = a1;\n  v7 = __readfsqword(0x28u);\n  v2 = (char *)sub_45410(3LL, 0LL);\n  v3 = open(v2, 0);\n  sub_114C0(v2);\n  if ( v3 >= 0 )\n  {\n    while ( 1 )\n    {\n      v4 = read(v3, &v6, 0x200uLL);\n      if ( (signed int)v4 <= 0 )\n        break;\n      v1(&v6, v4);\n    }\n    close(v3);\n  }\n  return __readfsqword(0x28u) ^ v7;\n}\n", 
            "funcStartAddr": "0x467e0L", 
            "funcEndAddr": "0x46876L", 
            "funcName": "sub_467E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_46880(void *buf, int a2)\n{\n  char *v2; // rbp\n  int v3; // ebx\n  char *v4; // r13\n  int v5; // er12\n  size_t v6; // rdx\n  int v7; // eax\n  int *v8; // rax\n  char *v9; // rax\n  char *v10; // rdi\n  int *v11; // rax\n  int v12; // edi\n  int *v13; // r14\n  char *v14; // rax\n  __int64 v15; // rax\n  char *v16; // r15\n  __int64 v17; // rax\n  void *v18; // r12\n\n  v2 = (char *)buf;\n  v3 = a2;\n  v4 = (char *)sub_45410(3LL, 0LL);\n  v5 = open(v4, 65, 384LL);\n  if ( v5 >= 0 )\n  {\nLABEL_2:\n    v6 = a2;\n    if ( a2 > 0 )\n    {\n      while ( 1 )\n      {\n        v7 = write(v5, v2, v6);\n        if ( v7 < 0 )\n          break;\n        v3 -= v7;\n        v6 = v3;\n        v2 += v3;\n        if ( v3 <= 0 )\n          goto LABEL_7;\n      }\n      v8 = __errno_location();\n      v9 = strerror(*v8);\n      sub_A370((__int64)\"Unable to write random seed: write returned '%s'\", v9);\n    }\nLABEL_7:\n    close(v5);\n    goto LABEL_8;\n  }\n  v11 = __errno_location();\n  v12 = *v11;\n  v13 = v11;\n  if ( *v11 == 2 )\n  {\n    v15 = sub_45410(0LL, 0LL);\n    v16 = (char *)v15;\n    v17 = sub_44B10(v15, 0x1C0u);\n    v18 = (void *)v17;\n    if ( v17 )\n    {\n      sub_A370((__int64)\"Unable to write random seed: %s\", v17);\n      sub_114C0(v18);\n      sub_114C0(v4);\n      v10 = v16;\n      goto LABEL_9;\n    }\n    sub_114C0(v16);\n    v5 = open(v4, 65, 384LL);\n    if ( v5 >= 0 )\n      goto LABEL_2;\n    v12 = *v13;\n  }\n  v14 = strerror(v12);\n  sub_A370((__int64)\"Unable to write random seed: open(\\\"%s\\\") returned '%s'\", v4, v14);\nLABEL_8:\n  v10 = v4;\nLABEL_9:\n  sub_114C0(v10);\n}\n", 
            "funcStartAddr": "0x46880L", 
            "funcEndAddr": "0x469dfL", 
            "funcName": "sub_46880"
        }, 
        {
            "decompiledFuncCode": "void nullsub_13()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x469e0L", 
            "funcEndAddr": "0x469e2L", 
            "funcName": "nullsub_13"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_469F0(_BYTE *a1, const char *a2, char a3)\n{\n  const char *v3; // r12\n  int v4; // esi\n  _BYTE *v5; // rbx\n  char v6; // bp\n  _BYTE *v7; // r13\n  int v8; // er14\n\n  v3 = a2;\n  v4 = (char)*a1;\n  if ( *a1 )\n  {\n    v5 = a1;\n    v6 = a3;\n    v7 = 0LL;\n    v8 = 0;\n    while ( 1 )\n    {\n      while ( (_BYTE)v4 == 91 )\n      {\n        v4 = (char)*++v5;\n        ++v8;\n        if ( !*v5 )\n          return v7;\n      }\n      if ( (_BYTE)v4 == 93 )\n      {\n        if ( v8 )\n        {\n          --v8;\n          goto LABEL_8;\n        }\n      }\n      else if ( (_BYTE)v4 == 58 && v8 )\n      {\n        goto LABEL_8;\n      }\n      if ( strchr(v3, v4) )\n      {\n        v7 = v5;\n        if ( v6 )\n          return v7;\n      }\nLABEL_8:\n      v4 = (char)*++v5;\n      if ( !*v5 )\n        return v7;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x469f0L", 
            "funcEndAddr": "0x46a78L", 
            "funcName": "sub_469F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_46A80(char a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbx\n  _BYTE *v3; // rax\n\n  v1 = sub_11440(1uLL, 0x38uLL, 0LL);\n  v2 = v1;\n  *(_BYTE *)(v1 + 48) = a1;\n  *(_QWORD *)(v1 + 24) = 0LL;\n  *(_QWORD *)(v1 + 32) = &sub_47320;\n  *(_QWORD *)v1 = 512LL;\n  *(_QWORD *)(v1 + 40) = v1 + 32;\n  v3 = (_BYTE *)sub_11440(0x200uLL, 1uLL, 0LL);\n  *(_QWORD *)(v2 + 8) = v3;\n  *(_QWORD *)(v2 + 16) = v3;\n  *v3 = 0;\n  return v2 + 8;\n}\n", 
            "funcStartAddr": "0x46a80L", 
            "funcEndAddr": "0x46ae9L", 
            "funcName": "sub_46A80"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_46AF0(void *a1, unsigned __int64 a2, unsigned __int64 *a3, __int64 a4, const __m128i *a5)\n{\n  __int64 v5; // r12\n  const __m128i *v6; // r14\n  unsigned __int64 v7; // rax\n  char *i; // rbp\n  unsigned __int64 v9; // rcx\n  unsigned __int64 v10; // r8\n  __m128i v11; // xmm0\n  int v12; // eax\n  unsigned __int64 *v14; // [rsp+8h] [rbp-70h]\n  unsigned __int64 v15; // [rsp+18h] [rbp-60h]\n  __m128i v16; // [rsp+20h] [rbp-58h]\n  __int64 v17; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v18; // [rsp+38h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a5;\n  v7 = *a3;\n  v14 = a3;\n  v18 = __readfsqword(0x28u);\n  v15 = v7;\n  for ( i = (char *)sub_114E0(a1, &v15, 1uLL, a2, 0x200uLL, 1); ; i = (char *)sub_114E0(i, &v15, 1uLL, v9, v10, 1) )\n  {\n    v11 = _mm_loadu_si128(v6);\n    v17 = v6[1].m128i_i64[0];\n    v16 = v11;\n    v12 = __vsnprintf_chk(&i[a2], v15 - a2, 1LL, -1LL, v5, &v16);\n    v9 = v15;\n    if ( v12 < 0 )\n      goto LABEL_7;\n    v9 = v15;\n    v10 = v12;\n    if ( v12 < v15 )\n      break;\n    if ( v12 )\n    {\n      v9 = a2 + 1;\n      continue;\n    }\nLABEL_7:\n    v10 = 1LL;\n  }\n  *v14 = v15;\n  return i;\n}\n", 
            "funcStartAddr": "0x46af0L", 
            "funcEndAddr": "0x46c0fL", 
            "funcName": "sub_46AF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_46C40(void *a1, size_t a2)\n{\n  unsigned __int8 *v2; // rax\n  unsigned __int8 *v3; // rcx\n  __int64 result; // rax\n\n  v2 = (unsigned __int8 *)memset(a1, 0, a2);\n  v3 = v2;\n  for ( result = *v2; (_BYTE)result; result = *v3 )\n    ++v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x46c40L", 
            "funcEndAddr": "0x46c70L", 
            "funcName": "sub_46C40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_46D60(const char *a1, char **a2)\n{\n  __int64 result; // rax\n  int v3; // edx\n  char *v4; // rdx\n\n  result = *(unsigned __int8 *)a1;\n  if ( (_BYTE)result != 94 )\n    goto LABEL_2;\n  v3 = *((unsigned __int8 *)a1 + 1);\n  if ( !(_BYTE)v3 )\n    goto LABEL_2;\n  if ( (_BYTE)v3 == 60 )\n  {\n    result = strtol(a1 + 2, a2, 0);\n    v4 = *a2;\n    if ( *a2 != a1 + 2 && *v4 == 62 )\n    {\n      *a2 = v4 + 1;\n      return result;\n    }\nLABEL_2:\n    *a2 = 0LL;\n    return 0LL;\n  }\n  if ( (unsigned __int8)(v3 - 97) <= 0x19u )\n  {\n    result = (unsigned int)(v3 - 96);\n    *a2 = (char *)(a1 + 2);\n  }\n  else if ( (unsigned __int8)(v3 - 63) <= 0x20u || (v3 & 0x80u) != 0 )\n  {\n    result = v3 ^ 0x40u;\n    *a2 = (char *)(a1 + 2);\n  }\n  else if ( (_BYTE)v3 == 126 )\n  {\n    *a2 = (char *)(a1 + 2);\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x46d60L", 
            "funcEndAddr": "0x46e0eL", 
            "funcName": "sub_46D60"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_46E10(char *s, const char *a2)\n{\n  _BYTE *v2; // rax\n  size_t result; // rax\n\n  v2 = sub_469F0(s, a2, 1);\n  if ( v2 )\n    result = v2 - s;\n  else\n    result = strlen(s);\n  return result;\n}\n", 
            "funcStartAddr": "0x46e10L", 
            "funcEndAddr": "0x46e39L", 
            "funcName": "sub_46E10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_46E40(_BYTE *a1, char a2)\n{\n  char v3; // [rsp+6h] [rbp-12h]\n  char v4; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v3 = a2;\n  v4 = 0;\n  v5 = __readfsqword(0x28u);\n  return sub_469F0(a1, &v3, 1);\n}\n", 
            "funcStartAddr": "0x46e40L", 
            "funcEndAddr": "0x46e87L", 
            "funcName": "sub_46E40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_46E90(_BYTE *a1, char a2)\n{\n  char v3; // [rsp+6h] [rbp-12h]\n  char v4; // [rsp+7h] [rbp-11h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v3 = a2;\n  v4 = 0;\n  v5 = __readfsqword(0x28u);\n  return sub_469F0(a1, &v3, 0);\n}\n", 
            "funcStartAddr": "0x46e90L", 
            "funcEndAddr": "0x46ed4L", 
            "funcName": "sub_46E90"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_46EE0(char *src)\n{\n  int v1; // eax\n  char *v2; // rax\n\n  if ( !src )\n    return 0LL;\n  v1 = strlen(src);\n  v2 = (char *)sub_11440(v1 + 1, 1uLL, 0LL);\n  return strcpy(v2, src);\n}\n", 
            "funcStartAddr": "0x46ee0L", 
            "funcEndAddr": "0x46f16L", 
            "funcName": "sub_46EE0"
        }, 
        {
            "decompiledFuncCode": "char *sub_46F20(char *src, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, ...)\n{\n  int i; // ebx\n  const char **v10; // rdx\n  char *v11; // rbx\n  char *result; // rax\n  const char **v13; // rcx\n  unsigned __int64 v14; // rt1\n  gcc_va_list va; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v16; // [rsp+18h] [rbp-50h]\n\n  va_start(va, a9);\n  v16 = __readfsqword(0x28u);\n  for ( i = strlen(src); ; i += strlen(*v10) )\n  {\n    if ( va[0].gp_offset > 0x2F )\n    {\n      v10 = (const char **)va[0].overflow_arg_area;\n      va[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\n    }\n    else\n    {\n      v10 = (const char **)((char *)va[0].reg_save_area + va[0].gp_offset);\n      va[0].gp_offset += 8;\n    }\n    if ( !*v10 )\n      break;\n  }\n  v11 = (char *)sub_11440(i + 1, 1uLL, 0LL);\n  result = stpcpy(v11, src);\n  va_end(va);\n  va_start(va, a9);\nLABEL_7:\n  if ( va[0].gp_offset <= 0x2F )\n  {\n    v13 = (const char **)((char *)va[0].reg_save_area + va[0].gp_offset);\n    va[0].gp_offset += 8;\n    goto LABEL_9;\n  }\n  do\n  {\n    v13 = (const char **)va[0].overflow_arg_area;\n    va[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\nLABEL_9:\n    if ( *v13 )\n    {\n      result = stpcpy(result, *v13);\n      goto LABEL_7;\n    }\n    result = v11;\n    v14 = __readfsqword(0x28u);\n    v11 = (char *)(v14 ^ v16);\n  }\n  while ( v14 != v16 );\n  return result;\n}\n", 
            "funcStartAddr": "0x46f20L", 
            "funcEndAddr": "0x47064L", 
            "funcName": "sub_46F20"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_470B0(unsigned __int64 a1)\n{\n  signed __int64 result; // rax\n\n  result = 0x7FFFFFFFLL;\n  if ( a1 <= 0x7FFFFFFF )\n    result = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x470b0L", 
            "funcEndAddr": "0x470c1L", 
            "funcName": "sub_470B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_470D0(__int64 a1, const __m128i *a2)\n{\n  __int64 v3; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-10h]\n\n  v4 = __readfsqword(0x28u);\n  v3 = 0LL;\n  return sub_46AF0(0LL, 0LL, (unsigned __int64 *)&v3, a1, a2);\n}\n", 
            "funcStartAddr": "0x470d0L", 
            "funcEndAddr": "0x47118L", 
            "funcName": "sub_470D0"
        }, 
        {
            "decompiledFuncCode": "char *sub_47120(__int64 a1, ...)\n{\n  __int64 v2; // [rsp+8h] [rbp-E0h]\n  gcc_va_list va; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v4; // [rsp+28h] [rbp-C0h]\n\n  va_start(va, a1);\n  v4 = __readfsqword(0x28u);\n  v2 = 0LL;\n  return sub_46AF0(0LL, 0LL, (unsigned __int64 *)&v2, a1, (const __m128i *)va);\n}\n", 
            "funcStartAddr": "0x47120L", 
            "funcEndAddr": "0x471f1L", 
            "funcName": "sub_47120"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_472D0(__int64 a1, unsigned __int64 a2)\n{\n  _BYTE *v2; // rax\n  __int64 v3; // rdx\n\n  v2 = sub_114E0(*(void **)a1, (unsigned __int64 *)(a1 - 8), 1uLL, *(_QWORD *)(a1 + 16) + 1LL, a2, *(_BYTE *)(a1 + 40));\n  v3 = *(_QWORD *)(a1 + 16);\n  *(_QWORD *)a1 = v2;\n  *(_QWORD *)(a1 + 8) = v2;\n  *(_QWORD *)(a1 + 16) = v3 + a2;\n  v2[v3 + a2] = 0;\n  return &v2[v3];\n}\n", 
            "funcStartAddr": "0x472d0L", 
            "funcEndAddr": "0x4731dL", 
            "funcName": "sub_472D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_47320(__int64 a1, const void *a2, unsigned __int64 a3)\n{\n  size_t v3; // rbx\n  char *v4; // rax\n\n  v3 = a3;\n  v4 = sub_472D0(a1 - 24, a3);\n  return memcpy(v4, a2, v3);\n}\n", 
            "funcStartAddr": "0x47320L", 
            "funcEndAddr": "0x4734cL", 
            "funcName": "sub_47320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47350(__int64 *a1, unsigned __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1[2] < a2 )\n    __assert_fail(\"new_len <= buf->len\", \"utils.c\", 0x1B3u, \"strbuf_shrink_to\");\n  result = *a1;\n  a1[2] = a2;\n  *(_BYTE *)(result + a2) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x47350L", 
            "funcEndAddr": "0x47385L", 
            "funcName": "sub_47350"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_473D0(_QWORD *a1, char a2)\n{\n  __int64 v2; // rdx\n  signed __int64 result; // rax\n  signed __int64 v4; // rdx\n  _BYTE *v5; // rcx\n\n  v2 = a1[2];\n  result = 0LL;\n  if ( v2 )\n  {\n    v4 = v2 - 1;\n    v5 = (_BYTE *)(v4 + *a1);\n    if ( *v5 == a2 )\n    {\n      a1[2] = v4;\n      result = 1LL;\n      *v5 = 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x473d0L", 
            "funcEndAddr": "0x473fdL", 
            "funcName": "sub_473D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_47400()\n{\n  return sub_46A80(0);\n}\n", 
            "funcStartAddr": "0x47400L", 
            "funcEndAddr": "0x47407L", 
            "funcName": "sub_47400"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_47410()\n{\n  return sub_46A80(1);\n}\n", 
            "funcStartAddr": "0x47410L", 
            "funcEndAddr": "0x4741aL", 
            "funcName": "sub_47410"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_47420(void **a1)\n{\n  void **v1; // rbp\n  void **v2; // rbx\n  void *v3; // rdi\n  size_t v4; // rsi\n\n  v1 = a1 - 1;\n  v2 = a1;\n  v3 = *a1;\n  if ( v3 )\n  {\n    v4 = (size_t)*(v2 - 1);\n    if ( v4 )\n    {\n      sub_46C40(v3, v4);\n      v3 = *v2;\n    }\n    sub_114C0(v3);\n  }\n  sub_114C0(v1);\n}\n", 
            "funcStartAddr": "0x47420L", 
            "funcEndAddr": "0x47462L", 
            "funcName": "sub_47420"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47470(__int64 *a1)\n{\n  __int64 v1; // rbx\n\n  v1 = *a1;\n  sub_114C0(a1 - 1);\n  return v1;\n}\n", 
            "funcStartAddr": "0x47470L", 
            "funcEndAddr": "0x47482L", 
            "funcName": "sub_47470"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_47490(__int64 a1, __int64 a2, const __m128i *a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbp\n  size_t result; // rax\n\n  v3 = sub_46AF0(*(void **)a1, *(_QWORD *)(a1 + 16), (unsigned __int64 *)(a1 - 8), a2, a3);\n  v4 = *(_QWORD *)(a1 + 16);\n  *(_QWORD *)a1 = v3;\n  *(_QWORD *)(a1 + 8) = v3;\n  result = strlen(&v3[v4]);\n  *(_QWORD *)(a1 + 16) = result + v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x47490L", 
            "funcEndAddr": "0x474d1L", 
            "funcName": "sub_47490"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_474E0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a2);\n  v4 = __readfsqword(0x28u);\n  sub_47490(a1, a2, (const __m128i *)va);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0x474e0L", 
            "funcEndAddr": "0x47591L", 
            "funcName": "sub_474E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_475A0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_46A80(0);\n  sub_472D0(v0, 4uLL);\n  return v0;\n}\n", 
            "funcStartAddr": "0x475a0L", 
            "funcEndAddr": "0x475bdL", 
            "funcName": "sub_475A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_47610(FILE *stream)\n{\n  unsigned __int64 v1; // rbx\n  char *v2; // rbp\n  signed int v3; // esi\n  char *v4; // rax\n  char *v5; // r14\n  char *v7; // rdi\n  __int64 v8; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v1 = 0LL;\n  v9 = __readfsqword(0x28u);\n  v8 = 512LL;\n  v2 = (char *)sub_11440(0x200uLL, 1uLL, 0LL);\n  v3 = 512;\n  while ( 1 )\n  {\n    v5 = &v2[v1];\n    if ( !fgets(&v2[v1], v3 - (signed int)v1, stream) )\n      break;\n    v1 += strlen(&v2[v1]);\n    if ( v1 && v2[v1 - 1] == 10 )\n    {\n      v5 = &v2[v1];\n      goto LABEL_7;\n    }\n    v4 = (char *)sub_114E0(v2, (unsigned __int64 *)&v8, 1uLL, v1, 0x200uLL, 1);\n    v3 = v8;\n    v2 = v4;\n  }\n  if ( v1 )\n  {\nLABEL_7:\n    *v5 = 0;\n    return v2;\n  }\n  v7 = v2;\n  v2 = 0LL;\n  sub_114C0(v7);\n  return v2;\n}\n", 
            "funcStartAddr": "0x47610L", 
            "funcEndAddr": "0x476f8L", 
            "funcName": "sub_47610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47800(unsigned __int8 *a1, signed int a2, char *a3)\n{\n  unsigned int v3; // eax\n  unsigned int v4; // eax\n  unsigned int v5; // eax\n  unsigned int v6; // esi\n  __int64 result; // rax\n  char v8; // cl\n  int v9; // esi\n\n  v3 = *a1 << 16;\n  if ( a2 <= 1 )\n  {\n    a3[2] = 61;\n    v8 = aAbcdefghijklmn[v3 >> 18];\n    result = (unsigned __int8)aAbcdefghijklmn[(v3 >> 12) & 0x30];\n    a3[3] = 61;\n    *a3 = v8;\n    a3[1] = result;\n  }\n  else\n  {\n    v4 = (a1[1] << 8) | (*a1 << 16);\n    if ( a2 == 2 )\n    {\n      a3[3] = 61;\n      *a3 = aAbcdefghijklmn[v4 >> 18];\n      v9 = (v4 >> 12) & 0x3F;\n      result = (unsigned __int8)aAbcdefghijklmn[(v4 >> 6) & 0x3C];\n      LOBYTE(v9) = aAbcdefghijklmn[v9];\n      a3[2] = result;\n      a3[1] = v9;\n    }\n    else\n    {\n      v5 = a1[2] | v4;\n      *a3 = aAbcdefghijklmn[v5 >> 18];\n      a3[1] = aAbcdefghijklmn[(v5 >> 12) & 0x3F];\n      v6 = v5;\n      result = (unsigned __int8)aAbcdefghijklmn[v5 & 0x3F];\n      LOBYTE(v6) = aAbcdefghijklmn[(v6 >> 6) & 0x3F];\n      a3[3] = result;\n      a3[2] = v6;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x47800L", 
            "funcEndAddr": "0x478c5L", 
            "funcName": "sub_47800"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_478D0(__int64 a1, _BYTE *a2)\n{\n  __int64 v2; // rdx\n  int v3; // eax\n  int v4; // eax\n  signed __int64 result; // rax\n  int v6; // edx\n  int v7; // [rsp+0h] [rbp-28h]\n  int v8; // [rsp+4h] [rbp-24h]\n  int v9; // [rsp+8h] [rbp-20h]\n  int v10; // [rsp+Ch] [rbp-1Ch]\n  unsigned __int64 v11; // [rsp+18h] [rbp-10h]\n\n  v2 = 0LL;\n  v11 = __readfsqword(0x28u);\n  do\n  {\n    v3 = *(char *)(a1 + v2);\n    if ( (unsigned __int8)(*(_BYTE *)(a1 + v2) - 65) > 0x19u )\n    {\n      if ( (unsigned __int8)(v3 - 97) > 0x19u )\n      {\n        if ( (unsigned __int8)(v3 - 48) <= 9u )\n        {\n          v4 = v3 + 4;\n        }\n        else\n        {\n          switch ( (_BYTE)v3 )\n          {\n            case 0x2B:\n              v4 = 62;\n              break;\n            case 0x2F:\n              v4 = 63;\n              break;\n            case 0x3D:\n              v4 = -1;\n              break;\n            default:\n              return 0LL;\n          }\n        }\n      }\n      else\n      {\n        v4 = v3 - 71;\n      }\n    }\n    else\n    {\n      v4 = v3 - 65;\n    }\n    *(&v7 + v2++) = v4;\n  }\n  while ( v2 != 4 );\n  if ( v7 == -1 || v8 == -1 )\n    return 0LL;\n  if ( v9 == -1 )\n  {\n    if ( v10 == -1 )\n    {\n      result = 1LL;\n      *a2 = ((v8 << 12) | (unsigned int)(v7 << 18)) >> 16;\n      return result;\n    }\n    return 0LL;\n  }\n  result = (unsigned int)(v10 != -1) + 2;\n  v6 = ((_WORD)v9 << 6) & 0xFC0 | v10 & 0x3F | (v8 << 12) | (v7 << 18);\n  a2[1] = BYTE1(v6);\n  *a2 = BYTE2(v6);\n  if ( (_DWORD)result != 3 )\n    return 2LL;\n  a2[2] = v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x478d0L", 
            "funcEndAddr": "0x47a2fL", 
            "funcName": "sub_478D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_47A60(__int64 a1)\n{\n  _QWORD *i; // rbx\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)a1; i = *(_QWORD **)a1 )\n  {\n    *(_QWORD *)a1 = *i;\n    sub_46C40(i, 0x20uLL);\n    sub_114C0(i);\n  }\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_QWORD *)(a1 + 16) = 0LL;\n}\n", 
            "funcStartAddr": "0x47a60L", 
            "funcEndAddr": "0x47ab4L", 
            "funcName": "sub_47A60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_47BE0(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r12\n  _QWORD *v3; // rbx\n  __int64 v4; // rax\n  bool v5; // zf\n  __int64 v6; // rdx\n  __int64 v7; // rbp\n\n  if ( *(_QWORD *)(a1 + 16) < a2 )\n    __assert_fail(\"ch->buffersize >= len\", \"utils.c\", 0x2EEu, \"bufchain_consume\");\n  v2 = a2;\n  if ( a2 )\n  {\n    v3 = *(_QWORD **)a1;\n    v4 = (signed int)a2;\n    if ( !*(_QWORD *)a1 )\nLABEL_12:\n      __assert_fail(\"ch->head != NULL\", \"utils.c\", 0x2F1u, \"bufchain_consume\");\n    while ( 1 )\n    {\n      v6 = v3[1];\n      v7 = v3[2] - v6;\n      if ( v4 >= v7 )\n      {\n        v5 = *v3 == 0LL;\n        *(_QWORD *)a1 = *v3;\n        if ( v5 )\n          *(_QWORD *)(a1 + 8) = 0LL;\n        sub_46C40(v3, 0x20uLL);\n        sub_114C0(v3);\n        *(_QWORD *)(a1 + 16) -= (signed int)v7;\n        v2 -= (signed int)v7;\n        if ( !v2 )\n          return;\n      }\n      else\n      {\n        v3[1] = v4 + v6;\n        *(_QWORD *)(a1 + 16) -= v4;\n        v2 -= v4;\n        if ( !v2 )\n          return;\n      }\n      v3 = *(_QWORD **)a1;\n      v4 = (signed int)v2;\n      if ( !*(_QWORD *)a1 )\n        goto LABEL_12;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x47be0L", 
            "funcEndAddr": "0x47cc0L", 
            "funcName": "sub_47BE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_47CD0(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  _QWORD *v3; // rbp\n  unsigned __int64 v4; // r12\n  char *v5; // rcx\n  signed __int64 v6; // rbx\n  const void *v7; // rsi\n  signed __int64 v8; // rax\n  char *v9; // rax\n\n  v3 = *(_QWORD **)a1;\n  if ( *(_QWORD *)(a1 + 16) < a3 )\n    __assert_fail(\"ch->buffersize >= len\", \"utils.c\", 0x30Du, \"bufchain_fetch\");\n  v4 = a3;\n  if ( a3 )\n  {\n    v5 = a2;\n    v6 = (signed int)a3;\n    if ( !v3 )\nLABEL_10:\n      __assert_fail(\"tmp != NULL\", \"utils.c\", 0x311u, \"bufchain_fetch\");\n    while ( 1 )\n    {\n      v7 = (const void *)v3[1];\n      v8 = v3[2] - (_QWORD)v7;\n      if ( v6 >= v8 )\n        v6 = (signed int)v8;\n      v9 = (char *)memcpy(v5, v7, v6);\n      v3 = (_QWORD *)*v3;\n      v5 = &v9[v6];\n      v4 -= v6;\n      if ( !v4 )\n        break;\n      v6 = (signed int)v4;\n      if ( !v3 )\n        goto LABEL_10;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x47cd0L", 
            "funcEndAddr": "0x47d72L", 
            "funcName": "sub_47CD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_47D80(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbp\n\n  v3 = a3;\n  sub_47CD0(a1, a2, a3);\n  sub_47BE0(a1, v3);\n}\n", 
            "funcStartAddr": "0x47d80L", 
            "funcEndAddr": "0x47da2L", 
            "funcName": "sub_47D80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_47DF0(__int64 a1, char *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rbx\n\n  v3 = a3;\n  if ( *(_QWORD *)(a1 + 16) <= a3 )\n    v3 = *(_QWORD *)(a1 + 16);\n  if ( v3 )\n  {\n    sub_47CD0(a1, a2, v3);\n    sub_47BE0(a1, v3);\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x47df0L", 
            "funcEndAddr": "0x47e27L", 
            "funcName": "sub_47DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47E30(void *a1, size_t a2)\n{\n  __int64 result; // rax\n\n  if ( a1 )\n  {\n    if ( a2 )\n      result = sub_46C40(a1, a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x47e30L", 
            "funcEndAddr": "0x47e42L", 
            "funcName": "sub_47E30"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_47E50(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rcx\n  int v4; // er8\n  unsigned __int8 v5; // al\n\n  if ( !a3 )\n    return 1LL;\n  v3 = 0LL;\n  v4 = 0;\n  do\n  {\n    v5 = *(_BYTE *)(a2 + v3) ^ *(_BYTE *)(a1 + v3);\n    ++v3;\n    v4 |= v5;\n  }\n  while ( a3 != v3 );\n  return ((unsigned int)(256 - v4) >> 8) & 1;\n}\n", 
            "funcStartAddr": "0x47e50L", 
            "funcEndAddr": "0x47e8eL", 
            "funcName": "sub_47E50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47EC0(void *s1, size_t n, void *s2)\n{\n  void *v3; // rbx\n  size_t v4; // rax\n  unsigned int v5; // edx\n\n  v3 = s2;\n  v4 = strlen((const char *)s2);\n  v5 = 0;\n  if ( n == v4 )\n    LOBYTE(v5) = memcmp(s1, v3, n) == 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x47ec0L", 
            "funcEndAddr": "0x47ef6L", 
            "funcName": "sub_47EC0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_47F00(const void *a1, __int64 a2, const void *a3, size_t a4)\n{\n  bool result; // al\n\n  if ( a4 == a2 )\n    result = memcmp(a1, a3, a4) == 0;\n  else\n    result = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x47f00L", 
            "funcEndAddr": "0x47f29L", 
            "funcName": "sub_47F00"
        }, 
        {
            "decompiledFuncCode": "signed int __fastcall sub_47F30(const void *a1, size_t a2, const void *a3, size_t a4)\n{\n  size_t v4; // rbp\n  const void *v5; // rsi\n  size_t v6; // rdx\n  size_t v7; // rbx\n  signed int result; // eax\n\n  v4 = a2;\n  v5 = a3;\n  v6 = a4;\n  v7 = a4;\n  if ( v4 <= a4 )\n    v6 = v4;\n  if ( !v6 || (result = memcmp(a1, v5, v6)) == 0 )\n  {\n    if ( v4 < v7 )\n      result = -1;\n    else\n      result = v4 > v7;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x47f30L", 
            "funcEndAddr": "0x47f77L", 
            "funcName": "sub_47F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_47FE0(__int64 a1, unsigned __int64 a2, const void *a3, size_t a4, _QWORD *a5)\n{\n  unsigned int v5; // er12\n  _QWORD *v6; // r13\n  size_t v7; // rbx\n\n  v5 = 0;\n  if ( a2 >= a4 )\n  {\n    v6 = a5;\n    v7 = a2 - a4;\n    if ( !memcmp((const void *)(a1 + a2 - a4), a3, a4) )\n    {\n      v5 = 1;\n      if ( v6 )\n      {\n        *v6 = a1;\n        v6[1] = v7;\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x47fe0L", 
            "funcEndAddr": "0x48035L", 
            "funcName": "sub_47FE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_48120(void *src, size_t n)\n{\n  void *v2; // rax\n  _BYTE *result; // rax\n\n  v2 = (void *)sub_11440(n + 1, 1uLL, 0LL);\n  result = memcpy(v2, src, n);\n  result[n] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x48120L", 
            "funcEndAddr": "0x48155L", 
            "funcName": "sub_48120"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_48160(char *s1, char *s2)\n{\n  size_t v2; // rax\n\n  v2 = strlen(s2);\n  return strncmp(s1, s2, v2) == 0;\n}\n", 
            "funcStartAddr": "0x48160L", 
            "funcEndAddr": "0x4818eL", 
            "funcName": "sub_48160"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_48190(const char *a1, const char *a2)\n{\n  size_t v2; // rbp\n  size_t v3; // rax\n  unsigned int v4; // edx\n\n  v2 = strlen(a1);\n  v3 = strlen(a2);\n  v4 = 0;\n  if ( v2 >= v3 )\n    LOBYTE(v4) = strcmp(&a1[v2 - v3], a2) == 0;\n  return v4;\n}\n", 
            "funcStartAddr": "0x48190L", 
            "funcEndAddr": "0x481ccL", 
            "funcName": "sub_48190"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_481D0(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rax\n  char v3; // dl\n  unsigned __int64 v4; // rcx\n  char v5; // al\n  signed __int64 result; // rax\n\n  if ( a2 <= 0x7F )\n  {\n    *a1 = a2;\n    result = 1LL;\n  }\n  else\n  {\n    v2 = a2 >> 6;\n    v3 = a2 & 0x3F | 0x80;\n    if ( a2 <= 0x7FF )\n    {\n      a1[1] = v3;\n      *a1 = v2 | 0xC0;\n      result = 2LL;\n    }\n    else\n    {\n      v4 = a2 >> 12;\n      v5 = v2 & 0x3F | 0x80;\n      if ( a2 <= 0xFFFF )\n      {\n        a1[1] = v5;\n        *a1 = v4 | 0xE0;\n        a1[2] = v3;\n        result = 3LL;\n      }\n      else\n      {\n        a1[2] = v5;\n        *a1 = (a2 >> 18) | 0xF0;\n        a1[1] = v4 & 0x3F | 0x80;\n        a1[3] = v3;\n        result = 4LL;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x481d0L", 
            "funcEndAddr": "0x48263L", 
            "funcName": "sub_481D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_48270(FILE *s, unsigned __int8 *a2, __int64 a3)\n{\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 *v4; // r13\n  int result; // eax\n  unsigned __int8 v6; // cl\n\n  v3 = &a2[a3];\n  if ( a2 < &a2[a3] )\n  {\n    v4 = a2;\n    do\n    {\n      while ( 1 )\n      {\n        v6 = *v4;\n        if ( *v4 != 10 )\n          break;\n        ++v4;\n        result = fwrite(\"\\\\n\", 1uLL, 2uLL, s);\n        if ( v4 == v3 )\n          return result;\n      }\n      switch ( v6 )\n      {\n        case 0xDu:\n          result = fwrite(\"\\\\r\", 1uLL, 2uLL, s);\n          break;\n        case 9u:\n          result = fwrite(\"\\\\t\", 1uLL, 2uLL, s);\n          break;\n        case 8u:\n          result = fwrite(\"\\\\b\", 1uLL, 2uLL, s);\n          break;\n        case 0x5Cu:\n          result = fwrite(\"\\\\\\\\\", 1uLL, 2uLL, s);\n          break;\n        case 0x22u:\n          result = fwrite(\"\\\\\\\"\", 1uLL, 2uLL, s);\n          break;\n        default:\n          if ( (unsigned __int8)(v6 - 32) > 0x5Eu )\n            result = __fprintf_chk(s, 1LL, \"\\\\%03o\", v6);\n          else\n            result = fputc((char)v6, s);\n          break;\n      }\n      ++v4;\n    }\n    while ( v4 != v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x48270L", 
            "funcEndAddr": "0x483deL", 
            "funcName": "sub_48270"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_483E0(__int64 a1, __int64 a2, __int64 a3, char a4)\n{\n  return ((__int64 (*)(void))((char *)dword_51E40 + dword_51E40[a4 & 0xF]))();\n}\n", 
            "funcStartAddr": "0x483e0L", 
            "funcEndAddr": "0x483f6L", 
            "funcName": "sub_483E0"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_48600(__int64 a1)\n{\n  _BOOL8 result; // rax\n\n  result = *(_QWORD *)(a1 + 8) != 0LL;\n  if ( !*(_QWORD *)(a1 + 8 * result) )\n    sub_61EA();\n  return result;\n}\n", 
            "funcStartAddr": "0x48600L", 
            "funcEndAddr": "0x48620L", 
            "funcName": "sub_48600"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_48620(unsigned int a1, __int64 a2, int a3)\n{\n  int v3; // ecx\n  int v4; // eax\n  unsigned int *v5; // r8\n\n  v3 = 0;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v4 = (a3 + v3) >> 1;\n      v5 = (unsigned int *)(a2 + 8LL * v4);\n      if ( v5[1] >= a1 )\n        break;\n      v3 = v4 + 1;\n      if ( v4 + 1 > a3 )\n        return 0LL;\n    }\n    if ( a1 >= *v5 )\n      break;\n    a3 = v4 - 1;\n    if ( v3 > v4 - 1 )\n      return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x48620L", 
            "funcEndAddr": "0x48656L", 
            "funcName": "sub_48620"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_48660(unsigned int a1)\n{\n  signed __int64 result; // rax\n  unsigned int v2; // er9\n  char v3; // dl\n\n  result = 0LL;\n  if ( a1 )\n  {\n    if ( a1 - 127 <= 0x20 || a1 <= 0x1F )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else\n    {\n      result = 1LL;\n      if ( a1 > 0x2FF )\n      {\n        v2 = a1;\n        if ( a1 > 0xE01EF || (v3 = sub_48620(a1, (__int64)&off_52920, 141), result = 0LL, !v3) )\n        {\n          result = 1LL;\n          if ( v2 - 4352 <= 0x3EEFD )\n            result = (unsigned int)((unsigned __int8)sub_48620(v2, (__int64)&off_52580, 115) != 0) + 1;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x48660L", 
            "funcEndAddr": "0x486f6L", 
            "funcName": "sub_48660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_48700(unsigned int *a1, __int64 a2)\n{\n  unsigned int *v2; // rbx\n  unsigned int v3; // edi\n  unsigned int v4; // er11\n  int v5; // eax\n  __int64 v6; // r10\n  int v7; // er11\n\n  v2 = a1;\n  v3 = *a1;\n  if ( v3 && a2 )\n  {\n    while ( 1 )\n    {\n      v5 = sub_48660(v3);\n      if ( v5 < 0 )\n        break;\n      v3 = v2[v6 + 1];\n      v4 = v5 + v7;\n      if ( !v3 || v6 + 1 == a2 )\n        return v4;\n    }\n    v4 = -1;\n  }\n  else\n  {\n    v4 = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x48700L", 
            "funcEndAddr": "0x48755L", 
            "funcName": "sub_48700"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_48760(unsigned int a1)\n{\n  unsigned int v1; // er9\n  signed __int64 result; // rax\n\n  v1 = a1;\n  if ( a1 - 161 <= 0x10FF5C && (unsigned __int8)sub_48620(a1, (__int64)&off_51FE0, 178) )\n    result = 2LL;\n  else\n    result = sub_48660(v1);\n  return result;\n}\n", 
            "funcStartAddr": "0x48760L", 
            "funcEndAddr": "0x4879bL", 
            "funcName": "sub_48760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_487A0(unsigned int *a1, __int64 a2)\n{\n  unsigned int *v2; // rbx\n  unsigned int v3; // edi\n  unsigned int v4; // er11\n  int v5; // eax\n  __int64 v6; // r10\n  int v7; // er11\n\n  v2 = a1;\n  v3 = *a1;\n  if ( v3 && a2 )\n  {\n    while ( 1 )\n    {\n      v5 = sub_48760(v3);\n      if ( v5 < 0 )\n        break;\n      v3 = v2[v6 + 1];\n      v4 = v5 + v7;\n      if ( !v3 || v6 + 1 == a2 )\n        return v4;\n    }\n    v4 = -1;\n  }\n  else\n  {\n    v4 = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x487a0L", 
            "funcEndAddr": "0x487f5L", 
            "funcName": "sub_487A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = &off_25F4F8 - off_25F4F0;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_25F4F0[v5++])(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x48800L", 
            "funcEndAddr": "0x48865L", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x48870L", 
            "funcEndAddr": "0x48872L", 
            "funcName": "fini"
        }
    ], 
    "failedCount": 0, 
    "binaryInfo": {
        "binaryName": "puttygen_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "815", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }, 
    "recognizedCount": 0
}